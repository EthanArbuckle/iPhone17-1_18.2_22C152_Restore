void sirinluinternalqueryrewrite::QRHypothesis::~QRHypothesis(sirinluinternalqueryrewrite::QRHypothesis *this)
{
  uint64_t vars8;

  sirinluinternalqueryrewrite::QRHypothesis::~QRHypothesis(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1F232BDD8;
  v2 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v2) {
    std::default_delete<std::string>::operator()[abi:ne180100](v2);
  }
  v3 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  PB::Base::~Base(this);
}

void *sirinluinternalqueryrewrite::QRHypothesis::QRHypothesis(void *this)
{
  *this = &unk_1F232BDD8;
  this[1] = 0;
  this[3] = 0;
  this[4] = 0;
  return this;
}

{
  *this = &unk_1F232BDD8;
  this[1] = 0;
  this[3] = 0;
  this[4] = 0;
  return this;
}

uint64_t sirinluinternalqueryrewrite::QRHypothesis::QRHypothesis(uint64_t this, const sirinluinternalqueryrewrite::QRHypothesis *a2)
{
  *(void *)this = &unk_1F232BDD8;
  *(void *)(this + 8) = 0;
  *(void *)(this + 24) = 0;
  *(void *)(this + 32) = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  if (*((void *)a2 + 3)) {
    operator new();
  }
  char v2 = *((unsigned char *)a2 + 36);
  if (v2)
  {
    uint64_t v3 = *((void *)a2 + 2);
    *(unsigned char *)(this + 36) |= 1u;
    *(void *)(this + 16) = v3;
    char v2 = *((unsigned char *)a2 + 36);
  }
  if ((v2 & 2) != 0)
  {
    int v4 = *((_DWORD *)a2 + 8);
    *(unsigned char *)(this + 36) |= 2u;
    *(_DWORD *)(this + 32) = v4;
  }
  return this;
}

const sirinluinternalqueryrewrite::QRHypothesis *sirinluinternalqueryrewrite::QRHypothesis::operator=(const sirinluinternalqueryrewrite::QRHypothesis *a1, const sirinluinternalqueryrewrite::QRHypothesis *a2)
{
  if (a1 != a2)
  {
    sirinluinternalqueryrewrite::QRHypothesis::QRHypothesis((uint64_t)v8, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v9;
    uint64_t v9 = v3;
    uint64_t v4 = *((void *)a1 + 3);
    *((void *)a1 + 3) = v11;
    uint64_t v11 = v4;
    uint64_t v5 = *((void *)a1 + 2);
    *((void *)a1 + 2) = v10;
    uint64_t v10 = v5;
    uint64_t v6 = *((void *)a1 + 4);
    *((void *)a1 + 4) = v12;
    uint64_t v12 = v6;
    sirinluinternalqueryrewrite::QRHypothesis::~QRHypothesis((sirinluinternalqueryrewrite::QRHypothesis *)v8);
  }
  return a1;
}

double sirinluinternalqueryrewrite::swap(sirinluinternalqueryrewrite *this, sirinluinternalqueryrewrite::QRHypothesis *a2, sirinluinternalqueryrewrite::QRHypothesis *a3)
{
  int v3 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  uint64_t v5 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  LODWORD(v5) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v5;
  return result;
}

uint64_t sirinluinternalqueryrewrite::QRHypothesis::QRHypothesis(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F232BDD8;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v6;
  if (v7) {
    std::default_delete<std::string>::operator()[abi:ne180100](v7);
  }
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return a1;
}

void *sirinluinternalqueryrewrite::QRHypothesis::operator=(void *a1, uint64_t a2)
{
  if (a1 != (void *)a2)
  {
    sirinluinternalqueryrewrite::QRHypothesis::QRHypothesis((uint64_t)v8, a2);
    uint64_t v3 = a1[1];
    a1[1] = v9;
    uint64_t v9 = v3;
    uint64_t v4 = a1[3];
    a1[3] = v11;
    uint64_t v11 = v4;
    uint64_t v5 = a1[2];
    a1[2] = v10;
    uint64_t v10 = v5;
    uint64_t v6 = a1[4];
    a1[4] = v12;
    uint64_t v12 = v6;
    sirinluinternalqueryrewrite::QRHypothesis::~QRHypothesis((sirinluinternalqueryrewrite::QRHypothesis *)v8);
  }
  return a1;
}

BOOL sirinluinternalqueryrewrite::QRHypothesis::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v4)
  {
    if (!v5 || !sirinluexternal::UUID::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  uint64_t v6 = *(unsigned __int8 **)(a1 + 24);
  uint64_t v7 = *(unsigned __int8 ***)(a2 + 24);
  if (v6)
  {
    if (!v7) {
      return 0;
    }
    uint64_t v8 = v6[23];
    if ((v8 & 0x80u) == 0) {
      uint64_t v9 = (unsigned __int8 *)v6[23];
    }
    else {
      uint64_t v9 = (unsigned __int8 *)*((void *)v6 + 1);
    }
    uint64_t v10 = (unsigned __int8 *)*((unsigned __int8 *)v7 + 23);
    int v11 = (char)v10;
    if ((char)v10 < 0) {
      uint64_t v10 = v7[1];
    }
    if (v9 != v10) {
      return 0;
    }
    if (v11 >= 0) {
      uint64_t v12 = *(unsigned __int8 **)(a2 + 24);
    }
    else {
      uint64_t v12 = *v7;
    }
    if ((v8 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v6, v12, *((void *)v6 + 1))) {
        return 0;
      }
    }
    else if (v6[23])
    {
      while (*v6 == *v12)
      {
        ++v6;
        ++v12;
        if (!--v8) {
          goto LABEL_23;
        }
      }
      return 0;
    }
  }
  else if (v7)
  {
    return 0;
  }
LABEL_23:
  if (*(unsigned char *)(a1 + 36))
  {
    if ((*(unsigned char *)(a2 + 36) & 1) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 36))
  {
    return 0;
  }
  BOOL result = (*(unsigned char *)(a2 + 36) & 2) == 0;
  if ((*(unsigned char *)(a1 + 36) & 2) == 0) {
    return result;
  }
  return (*(unsigned char *)(a2 + 36) & 2) != 0 && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32);
}

unint64_t sirinluinternalqueryrewrite::QRHypothesis::hash_value(sirinluinternalqueryrewrite::QRHypothesis *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (!v2)
  {
    uint64_t v6 = 0;
    goto LABEL_11;
  }
  if ((*(unsigned char *)(v2 + 28) & 1) == 0)
  {
    uint64_t v3 = 0;
    if ((*(unsigned char *)(v2 + 28) & 2) != 0) {
      goto LABEL_4;
    }
LABEL_8:
    uint64_t v4 = 0;
    if ((*(unsigned char *)(v2 + 28) & 4) != 0) {
      goto LABEL_5;
    }
LABEL_9:
    uint64_t v5 = 0;
    goto LABEL_10;
  }
  uint64_t v3 = *(void *)(v2 + 8);
  if ((*(unsigned char *)(v2 + 28) & 2) == 0) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v4 = *(void *)(v2 + 16);
  if ((*(unsigned char *)(v2 + 28) & 4) == 0) {
    goto LABEL_9;
  }
LABEL_5:
  uint64_t v5 = *(int *)(v2 + 24);
LABEL_10:
  uint64_t v6 = v4 ^ v3 ^ v5;
LABEL_11:
  unint64_t v7 = *((void *)this + 3);
  if (v7) {
    unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100](v7);
  }
  if (*((unsigned char *)this + 36))
  {
    double v8 = *((double *)this + 2);
    if (v8 == 0.0) {
      double v8 = 0.0;
    }
    if ((*((unsigned char *)this + 36) & 2) != 0) {
      goto LABEL_15;
    }
LABEL_19:
    uint64_t v9 = 0;
    return v7 ^ v6 ^ *(void *)&v8 ^ v9;
  }
  double v8 = 0.0;
  if ((*((unsigned char *)this + 36) & 2) == 0) {
    goto LABEL_19;
  }
LABEL_15:
  uint64_t v9 = *((int *)this + 8);
  return v7 ^ v6 ^ *(void *)&v8 ^ v9;
}

uint64_t sirinluinternalqueryrewrite::QRHypothesis::makeAsrId(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t SIRINLUINTERNALCCQROverrideTemplateReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SIRINLUEXTERNALRewriteMessage);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALRewriteMessageReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1C8AE2444(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8AE2620(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8AE2728(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8AE27CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8AE2938(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8AE2AB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8AE2C38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8AE2D64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8AE2E88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8AE3004(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8AE3130(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8AE3254(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8AE33E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8AE36F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sirinluexternalnlu_router::NLRouterRewriteUtterance::formatText(sirinluexternalnlu_router::NLRouterRewriteUtterance *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "correction_outcome");
  }
  if (*((void *)this + 2)) {
    PB::TextFormatter::format();
  }
  if (*((unsigned char *)this + 36)) {
    PB::TextFormatter::format(a2, "routing_decision");
  }
  uint64_t v6 = *((void *)this + 3);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, a2, "utterance_id");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluexternalnlu_router::NLRouterRewriteUtterance::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *(const PB::Base **)(this + 24);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  if (*(void *)(v3 + 16)) {
    this = PB::Writer::write();
  }
  if (*(unsigned char *)(v3 + 36)) {
    this = PB::Writer::writeVarInt(a2);
  }
  uint64_t v5 = *(const PB::Base **)(v3 + 8);
  if (v5)
  {
    return PB::Writer::writeSubmessage(a2, v5);
  }
  return this;
}

uint64_t sirinluexternalnlu_router::NLRouterRewriteUtterance::readFrom(sirinluexternalnlu_router::NLRouterRewriteUtterance *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
      break;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      int v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        operator new();
      case 2u:
        operator new();
      case 3u:
        *((unsigned char *)this + 36) |= 1u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v21 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v20 <= 0xFFFFFFFFFFFFFFF5 && v20 + 10 <= v21)
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          do
          {
            unint64_t v26 = v20 + 1;
            *((void *)a2 + 1) = v20 + 1;
            char v27 = *(unsigned char *)(v22 + v20);
            v25 |= (unint64_t)(v27 & 0x7F) << v23;
            if ((v27 & 0x80) == 0) {
              goto LABEL_43;
            }
            v23 += 7;
            unint64_t v20 = v26;
            BOOL v14 = v24++ > 8;
          }
          while (!v14);
LABEL_39:
          LODWORD(v25) = 0;
          goto LABEL_43;
        }
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v25 = 0;
        if (v21 <= v20) {
          unint64_t v21 = *((void *)a2 + 1);
        }
        break;
      case 4u:
        operator new();
      default:
        goto LABEL_19;
    }
    while (1)
    {
      if (v21 == v20)
      {
        LODWORD(v25) = 0;
        *((unsigned char *)a2 + 24) = 1;
        goto LABEL_43;
      }
      unint64_t v30 = v20 + 1;
      char v31 = *(unsigned char *)(v22 + v20);
      *((void *)a2 + 1) = v30;
      v25 |= (unint64_t)(v31 & 0x7F) << v28;
      if ((v31 & 0x80) == 0) {
        break;
      }
      v28 += 7;
      unint64_t v20 = v30;
      BOOL v14 = v29++ > 8;
      if (v14) {
        goto LABEL_39;
      }
    }
    if (*((unsigned char *)a2 + 24)) {
      LODWORD(v25) = 0;
    }
LABEL_43:
    *((_DWORD *)this + 8) = v25;
LABEL_44:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  char v15 = 0;
  unsigned int v16 = 0;
  unint64_t v11 = 0;
  if (v2 > v3) {
    unint64_t v3 = v2;
  }
  do
  {
    if (v3 == v2)
    {
      int v4 = 1;
      *((unsigned char *)a2 + 24) = 1;
      return v4 == 0;
    }
    unint64_t v17 = v2 + 1;
    char v18 = *(unsigned char *)(v8 + v2);
    *((void *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0) {
      goto LABEL_21;
    }
    v15 += 7;
    unint64_t v2 = v17;
    BOOL v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  uint64_t result = PB::Reader::skip(a2);
  if (result) {
    goto LABEL_44;
  }
  return result;
}

void sirinluexternalnlu_router::NLRouterRewriteUtterance::~NLRouterRewriteUtterance(sirinluexternalnlu_router::NLRouterRewriteUtterance *this)
{
  sirinluexternalnlu_router::NLRouterRewriteUtterance::~NLRouterRewriteUtterance(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)this = &unk_1F232BE28;
  unint64_t v2 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    std::default_delete<std::string>::operator()[abi:ne180100](v3);
  }
  int v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  PB::Base::~Base(this);
}

double sirinluexternalnlu_router::NLRouterRewriteUtterance::NLRouterRewriteUtterance(sirinluexternalnlu_router::NLRouterRewriteUtterance *this)
{
  *(void *)this = &unk_1F232BE28;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

{
  double result;

  *(void *)this = &unk_1F232BE28;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

uint64_t sirinluexternalnlu_router::NLRouterRewriteUtterance::NLRouterRewriteUtterance(uint64_t this, const sirinluexternalnlu_router::NLRouterRewriteUtterance *a2)
{
  *(void *)this = &unk_1F232BE28;
  *(_OWORD *)(this + 8) = 0u;
  *(_OWORD *)(this + 24) = 0u;
  if (*((void *)a2 + 3)) {
    operator new();
  }
  if (*((void *)a2 + 2)) {
    operator new();
  }
  if (*((unsigned char *)a2 + 36))
  {
    int v2 = *((_DWORD *)a2 + 8);
    *(unsigned char *)(this + 36) |= 1u;
    *(_DWORD *)(this + 32) = v2;
  }
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternalnlu_router::NLRouterRewriteUtterance::operator=(uint64_t a1, const sirinluexternalnlu_router::NLRouterRewriteUtterance *a2)
{
  if ((const sirinluexternalnlu_router::NLRouterRewriteUtterance *)a1 != a2)
  {
    sirinluexternalnlu_router::NLRouterRewriteUtterance::NLRouterRewriteUtterance((uint64_t)v7, a2);
    uint64_t v3 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v9;
    uint64_t v9 = v3;
    uint64_t v4 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v10;
    uint64_t v10 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v5;
    sirinluexternalnlu_router::NLRouterRewriteUtterance::~NLRouterRewriteUtterance((sirinluexternalnlu_router::NLRouterRewriteUtterance *)v7);
  }
  return a1;
}

uint64_t sirinluexternalnlu_router::swap(uint64_t this, sirinluexternalnlu_router::NLRouterRewriteUtterance *a2, sirinluexternalnlu_router::NLRouterRewriteUtterance *a3)
{
  int v3 = *(_DWORD *)(this + 36);
  *(_DWORD *)(this + 36) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v3;
  uint64_t v4 = *(void *)(this + 24);
  *(void *)(this + 24) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v4;
  uint64_t v5 = *(void *)(this + 16);
  *(void *)(this + 16) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  LODWORD(v5) = *(_DWORD *)(this + 32);
  *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v5;
  uint64_t v6 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v6;
  return this;
}

uint64_t sirinluexternalnlu_router::NLRouterRewriteUtterance::NLRouterRewriteUtterance(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F232BE28;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  uint64_t v5 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v4;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  uint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v6;
  if (v7) {
    std::default_delete<std::string>::operator()[abi:ne180100](v7);
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v9 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v8;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  return a1;
}

uint64_t sirinluexternalnlu_router::NLRouterRewriteUtterance::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sirinluexternalnlu_router::NLRouterRewriteUtterance::NLRouterRewriteUtterance((uint64_t)v7, a2);
    uint64_t v3 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v9;
    uint64_t v9 = v3;
    uint64_t v4 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v10;
    uint64_t v10 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v5;
    sirinluexternalnlu_router::NLRouterRewriteUtterance::~NLRouterRewriteUtterance((sirinluexternalnlu_router::NLRouterRewriteUtterance *)v7);
  }
  return a1;
}

BOOL sirinluexternalnlu_router::NLRouterRewriteUtterance::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a2 + 24);
  if (v4)
  {
    if (!v5 || !sirinluexternal::UUID::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  uint64_t v6 = *(unsigned __int8 **)(a1 + 16);
  uint64_t v7 = *(unsigned __int8 ***)(a2 + 16);
  if (v6)
  {
    if (!v7) {
      return 0;
    }
    uint64_t v8 = v6[23];
    if ((v8 & 0x80u) == 0) {
      uint64_t v9 = (unsigned __int8 *)v6[23];
    }
    else {
      uint64_t v9 = (unsigned __int8 *)*((void *)v6 + 1);
    }
    uint64_t v10 = (unsigned __int8 *)*((unsigned __int8 *)v7 + 23);
    int v11 = (char)v10;
    if ((char)v10 < 0) {
      uint64_t v10 = v7[1];
    }
    if (v9 != v10) {
      return 0;
    }
    if (v11 >= 0) {
      unint64_t v12 = *(unsigned __int8 **)(a2 + 16);
    }
    else {
      unint64_t v12 = *v7;
    }
    if ((v8 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v6, v12, *((void *)v6 + 1))) {
        return 0;
      }
    }
    else if (v6[23])
    {
      while (*v6 == *v12)
      {
        ++v6;
        ++v12;
        if (!--v8) {
          goto LABEL_23;
        }
      }
      return 0;
    }
  }
  else if (v7)
  {
    return 0;
  }
LABEL_23:
  if (*(unsigned char *)(a1 + 36))
  {
    if ((*(unsigned char *)(a2 + 36) & 1) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 36))
  {
    return 0;
  }
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a2 + 8);
  BOOL result = (v13 | v14) == 0;
  if (v13 && v14)
  {
    if (*(unsigned char *)(v13 + 12)) {
      return (*(unsigned char *)(v14 + 12) & 1) != 0 && *(_DWORD *)(v13 + 8) == *(_DWORD *)(v14 + 8);
    }
    return (*(unsigned char *)(v14 + 12) & 1) == 0;
  }
  return result;
}

unint64_t sirinluexternalnlu_router::NLRouterRewriteUtterance::hash_value(sirinluexternalnlu_router::NLRouterRewriteUtterance *this)
{
  uint64_t v2 = *((void *)this + 3);
  if (!v2)
  {
    uint64_t v6 = 0;
    goto LABEL_11;
  }
  if ((*(unsigned char *)(v2 + 28) & 1) == 0)
  {
    uint64_t v3 = 0;
    if ((*(unsigned char *)(v2 + 28) & 2) != 0) {
      goto LABEL_4;
    }
LABEL_8:
    uint64_t v4 = 0;
    if ((*(unsigned char *)(v2 + 28) & 4) != 0) {
      goto LABEL_5;
    }
LABEL_9:
    uint64_t v5 = 0;
    goto LABEL_10;
  }
  uint64_t v3 = *(void *)(v2 + 8);
  if ((*(unsigned char *)(v2 + 28) & 2) == 0) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v4 = *(void *)(v2 + 16);
  if ((*(unsigned char *)(v2 + 28) & 4) == 0) {
    goto LABEL_9;
  }
LABEL_5:
  uint64_t v5 = *(int *)(v2 + 24);
LABEL_10:
  uint64_t v6 = v4 ^ v3 ^ v5;
LABEL_11:
  unint64_t v7 = *((void *)this + 2);
  if (v7) {
    unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100](v7);
  }
  if (*((unsigned char *)this + 36)) {
    uint64_t v8 = *((int *)this + 8);
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *((void *)this + 1);
  if (v9)
  {
    if (*(unsigned char *)(v9 + 12)) {
      uint64_t v9 = *(int *)(v9 + 8);
    }
    else {
      uint64_t v9 = 0;
    }
  }
  return v7 ^ v6 ^ v8 ^ v9;
}

uint64_t sirinluexternalnlu_router::NLRouterRewriteUtterance::makeUtteranceId(uint64_t this)
{
  if (!*(void *)(this + 24)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternalnlu_router::NLRouterRewriteUtterance::makeCorrectionOutcome(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternal::SystemDialogAct::formatText(sirinluexternal::SystemDialogAct *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "gave_options");
  }
  uint64_t v6 = *((void *)this + 2);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, a2, "id_a");
  }
  uint64_t v7 = *((void *)this + 3);
  if (v7) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "informed");
  }
  uint64_t v8 = *((void *)this + 4);
  if (v8) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v8 + 32))(v8, a2, "offered");
  }
  uint64_t v9 = *((void *)this + 5);
  if (v9) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v9 + 32))(v9, a2, "prompted");
  }
  uint64_t v10 = *((void *)this + 6);
  if (v10) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v10 + 32))(v10, a2, "rendered_text");
  }
  uint64_t v11 = *((void *)this + 7);
  if (v11) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v11 + 32))(v11, a2, "reported_failure");
  }
  uint64_t v12 = *((void *)this + 8);
  if (v12) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v12 + 32))(v12, a2, "reported_success");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluexternal::SystemDialogAct::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = (void *)this;
  uint64_t v4 = *(const PB::Base **)(this + 16);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  uint64_t v5 = (const PB::Base *)v3[5];
  if (v5) {
    this = PB::Writer::writeSubmessage(a2, v5);
  }
  uint64_t v6 = (const PB::Base *)v3[4];
  if (v6) {
    this = PB::Writer::writeSubmessage(a2, v6);
  }
  uint64_t v7 = (const PB::Base *)v3[1];
  if (v7) {
    this = PB::Writer::writeSubmessage(a2, v7);
  }
  uint64_t v8 = (const PB::Base *)v3[3];
  if (v8) {
    this = PB::Writer::writeSubmessage(a2, v8);
  }
  uint64_t v9 = (const PB::Base *)v3[8];
  if (v9) {
    this = PB::Writer::writeSubmessage(a2, v9);
  }
  uint64_t v10 = (const PB::Base *)v3[7];
  if (v10) {
    this = PB::Writer::writeSubmessage(a2, v10);
  }
  uint64_t v11 = (const PB::Base *)v3[6];
  if (v11)
  {
    return PB::Writer::writeSubmessage(a2, v11);
  }
  return this;
}

uint64_t sirinluexternal::SystemDialogAct::readFrom(sirinluexternal::SystemDialogAct *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_19;
        }
      }
LABEL_21:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v10 >> 3))
      {
        case 1u:
          operator new();
        case 2u:
          operator new();
        case 3u:
          operator new();
        case 4u:
          operator new();
        case 5u:
          operator new();
        case 6u:
          operator new();
        case 7u:
          operator new();
        default:
          if ((v10 >> 3) == 101) {
            operator new();
          }
          return result;
      }
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_21;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_19;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluexternal::SystemDialogAct::~SystemDialogAct(sirinluexternal::SystemDialogAct *this)
{
  sirinluexternal::SystemDialogAct::~SystemDialogAct(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t vars8;

  *(void *)this = &unk_1F232BE78;
  unint64_t v2 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unint64_t v3 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  char v8 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  unsigned int v9 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  PB::Base::~Base(this);
}

double sirinluexternal::SystemDialogAct::SystemDialogAct(sirinluexternal::SystemDialogAct *this)
{
  *(void *)this = &unk_1F232BE78;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  return result;
}

{
  double result;

  *(void *)this = &unk_1F232BE78;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  return result;
}

uint64_t sirinluexternal::SystemDialogAct::SystemDialogAct(uint64_t this, const sirinluexternal::SystemDialogAct *a2)
{
  *(void *)this = &unk_1F232BE78;
  *(_OWORD *)(this + 8) = 0u;
  *(_OWORD *)(this + 24) = 0u;
  *(_OWORD *)(this + 40) = 0u;
  *(_OWORD *)(this + 56) = 0u;
  if (*((void *)a2 + 2)) {
    operator new();
  }
  if (*((void *)a2 + 5)) {
    operator new();
  }
  if (*((void *)a2 + 4)) {
    operator new();
  }
  if (*((void *)a2 + 1)) {
    operator new();
  }
  if (*((void *)a2 + 3)) {
    operator new();
  }
  if (*((void *)a2 + 8)) {
    operator new();
  }
  if (*((void *)a2 + 7)) {
    operator new();
  }
  if (*((void *)a2 + 6)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternal::SystemDialogAct::operator=(uint64_t a1, const sirinluexternal::SystemDialogAct *a2)
{
  if ((const sirinluexternal::SystemDialogAct *)a1 != a2)
  {
    sirinluexternal::SystemDialogAct::SystemDialogAct((uint64_t)v8, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v10;
    long long v9 = v3;
    long long v10 = v4;
    long long v5 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v12;
    long long v6 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v11;
    long long v11 = v6;
    long long v12 = v5;
    sirinluexternal::SystemDialogAct::~SystemDialogAct((sirinluexternal::SystemDialogAct *)v8);
  }
  return a1;
}

void *sirinluexternal::swap(void *this, sirinluexternal::SystemDialogAct *a2, sirinluexternal::SystemDialogAct *a3)
{
  uint64_t v3 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v3;
  uint64_t v4 = this[5];
  this[5] = *((void *)a2 + 5);
  *((void *)a2 + 5) = v4;
  uint64_t v5 = this[4];
  this[4] = *((void *)a2 + 4);
  *((void *)a2 + 4) = v5;
  uint64_t v6 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v6;
  uint64_t v7 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  uint64_t v8 = this[8];
  this[8] = *((void *)a2 + 8);
  *((void *)a2 + 8) = v8;
  uint64_t v9 = this[7];
  this[7] = *((void *)a2 + 7);
  *((void *)a2 + 7) = v9;
  uint64_t v10 = this[6];
  this[6] = *((void *)a2 + 6);
  *((void *)a2 + 6) = v10;
  return this;
}

uint64_t sirinluexternal::SystemDialogAct::SystemDialogAct(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1F232BE78;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v5 = a2[2];
  a2[2] = 0;
  uint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v5;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = a2[5];
  a2[5] = 0;
  uint64_t v8 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v7;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = a2[4];
  a2[4] = 0;
  uint64_t v10 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v9;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = a2[1];
  a2[1] = 0;
  uint64_t v12 = *v4;
  *uint64_t v4 = v11;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = a2[3];
  a2[3] = 0;
  uint64_t v14 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v13;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  uint64_t v15 = a2[8];
  a2[8] = 0;
  uint64_t v16 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = v15;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  uint64_t v17 = a2[7];
  a2[7] = 0;
  uint64_t v18 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v17;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  uint64_t v19 = a2[6];
  a2[6] = 0;
  uint64_t v20 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v19;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  return a1;
}

uint64_t sirinluexternal::SystemDialogAct::operator=(uint64_t a1, void *a2)
{
  if ((void *)a1 != a2)
  {
    sirinluexternal::SystemDialogAct::SystemDialogAct((uint64_t)v8, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v10;
    long long v9 = v3;
    long long v10 = v4;
    long long v5 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v12;
    long long v6 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v11;
    long long v11 = v6;
    long long v12 = v5;
    sirinluexternal::SystemDialogAct::~SystemDialogAct((sirinluexternal::SystemDialogAct *)v8);
  }
  return a1;
}

uint64_t sirinluexternal::SystemDialogAct::operator==(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a2[2];
  if (v4)
  {
    if (!v5 || !sirinluexternal::UUID::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  uint64_t v6 = a1[5];
  uint64_t v7 = a2[5];
  if (v6)
  {
    if (!v7 || (sirinluexternal::SystemPrompted::operator==(v6, v7) & 1) == 0) {
      return 0;
    }
  }
  else if (v7)
  {
    return 0;
  }
  uint64_t v8 = a1[4];
  uint64_t v9 = a2[4];
  if (v8)
  {
    if (!v9 || !sirinluexternal::SystemOffered::operator==(v8, v9)) {
      return 0;
    }
  }
  else if (v9)
  {
    return 0;
  }
  uint64_t v10 = a1[1];
  uint64_t v11 = a2[1];
  if (v10)
  {
    if (!v11
      || !PB::PtrVector<sirinluexternal::UserDialogAct>::operator==((uint64_t *)(v10 + 8), *(void ***)(v11 + 8), *(void *)(v11 + 16)))
    {
      return 0;
    }
  }
  else if (v11)
  {
    return 0;
  }
  long long v12 = (void *)a1[3];
  uint64_t v13 = a2[3];
  if (v12)
  {
    if (!v13 || (sirinluexternal::SystemInformed::operator==(v12, v13) & 1) == 0) {
      return 0;
    }
  }
  else if (v13)
  {
    return 0;
  }
  uint64_t v14 = a1[8];
  uint64_t v15 = a2[8];
  if (v14)
  {
    if (!v15 || (sirinluexternal::SystemReportedSuccess::operator==(v14, v15) & 1) == 0) {
      return 0;
    }
  }
  else if (v15)
  {
    return 0;
  }
  uint64_t v16 = (void *)a1[7];
  uint64_t v17 = (void *)a2[7];
  if (!v16)
  {
    if (!v17) {
      goto LABEL_34;
    }
    return 0;
  }
  if (!v17 || (sirinluexternal::SystemReportedFailure::operator==(v16, v17) & 1) == 0) {
    return 0;
  }
LABEL_34:
  uint64_t v18 = a1[6];
  uint64_t v19 = a2[6];
  uint64_t result = (v18 | v19) == 0;
  if (v18 && v19)
  {
    uint64_t v21 = a1[6];
    return siricommon::StringValue::operator==(v21, v19);
  }
  return result;
}

unint64_t sirinluexternal::SystemDialogAct::hash_value(sirinluexternal::SystemDialogAct *this)
{
  uint64_t v2 = *((void *)this + 2);
  if (!v2)
  {
    uint64_t v6 = 0;
    goto LABEL_11;
  }
  if ((*(unsigned char *)(v2 + 28) & 1) == 0)
  {
    uint64_t v3 = 0;
    if ((*(unsigned char *)(v2 + 28) & 2) != 0) {
      goto LABEL_4;
    }
LABEL_8:
    uint64_t v4 = 0;
    if ((*(unsigned char *)(v2 + 28) & 4) != 0) {
      goto LABEL_5;
    }
LABEL_9:
    uint64_t v5 = 0;
    goto LABEL_10;
  }
  uint64_t v3 = *(void *)(v2 + 8);
  if ((*(unsigned char *)(v2 + 28) & 2) == 0) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v4 = *(void *)(v2 + 16);
  if ((*(unsigned char *)(v2 + 28) & 4) == 0) {
    goto LABEL_9;
  }
LABEL_5:
  uint64_t v5 = *(int *)(v2 + 24);
LABEL_10:
  uint64_t v6 = v4 ^ v3 ^ v5;
LABEL_11:
  uint64_t v7 = (sirinluexternal::SystemPrompted *)*((void *)this + 5);
  if (v7) {
    unint64_t v8 = sirinluexternal::SystemPrompted::hash_value(v7);
  }
  else {
    unint64_t v8 = 0;
  }
  uint64_t v9 = *((void *)this + 4);
  if (v9 && (uint64_t v10 = *(sirinluexternal::UserDialogAct **)(v9 + 8)) != 0) {
    unint64_t v11 = sirinluexternal::UserDialogAct::hash_value(v10);
  }
  else {
    unint64_t v11 = 0;
  }
  uint64_t v12 = *((void *)this + 1);
  if (!v12
    || (uint64_t v13 = *(sirinluexternal::UserDialogAct ***)(v12 + 8),
        uint64_t v14 = *(sirinluexternal::UserDialogAct ***)(v12 + 16),
        v13 == v14))
  {
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v15 = 0;
    do
    {
      uint64_t v16 = *v13++;
      v15 ^= sirinluexternal::UserDialogAct::hash_value(v16);
    }
    while (v13 != v14);
  }
  uint64_t v17 = (sirinluexternal::SystemInformed *)*((void *)this + 3);
  if (v17) {
    uint64_t v18 = sirinluexternal::SystemInformed::hash_value(v17);
  }
  else {
    uint64_t v18 = 0;
  }
  uint64_t v19 = (sirinluexternal::SystemReportedSuccess *)*((void *)this + 8);
  if (v19) {
    unint64_t v20 = sirinluexternal::SystemReportedSuccess::hash_value(v19);
  }
  else {
    unint64_t v20 = 0;
  }
  uint64_t v21 = (sirinluexternal::SystemReportedFailure *)*((void *)this + 7);
  if (v21) {
    unint64_t v22 = sirinluexternal::SystemReportedFailure::hash_value(v21);
  }
  else {
    unint64_t v22 = 0;
  }
  uint64_t v23 = *((void *)this + 6);
  if (v23)
  {
    unint64_t v24 = *(void *)(v23 + 8);
    if (v24) {
      unint64_t v24 = std::__string_hash<char>::operator()[abi:ne180100](v24);
    }
  }
  else
  {
    unint64_t v24 = 0;
  }
  return v8 ^ v6 ^ v18 ^ v20 ^ v22 ^ v24 ^ v11 ^ v15;
}

uint64_t sirinluexternal::SystemDialogAct::makeIdA(uint64_t this)
{
  if (!*(void *)(this + 16)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternal::SystemDialogAct::makePrompted(uint64_t this)
{
  if (!*(void *)(this + 40)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternal::SystemDialogAct::makeOffered(uint64_t this)
{
  if (!*(void *)(this + 32)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternal::SystemDialogAct::makeGaveOptions(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternal::SystemDialogAct::makeInformed(uint64_t this)
{
  if (!*(void *)(this + 24)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternal::SystemDialogAct::makeReportedSuccess(uint64_t this)
{
  if (!*(void *)(this + 64)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternal::SystemDialogAct::makeReportedFailure(uint64_t this)
{
  if (!*(void *)(this + 56)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternal::SystemDialogAct::makeRenderedText(uint64_t this)
{
  if (!*(void *)(this + 48)) {
    operator new();
  }
  return this;
}

BOOL SIRINLUINTERNALSPANMATCHSpanMatchRequestReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v17 = objc_alloc_init(SIRINLUINTERNALTokenChain);
        objc_storeStrong((id *)(a1 + 24), v17);
        if (PBReaderPlaceMark() && SIRINLUINTERNALTokenChainReadFrom((char *)v17, a2)) {
          goto LABEL_30;
        }
        goto LABEL_35;
      case 2u:
        uint64_t v17 = objc_alloc_init(SIRINLUEXTERNALNLContext);
        objc_storeStrong((id *)(a1 + 16), v17);
        if (!PBReaderPlaceMark() || !SIRINLUEXTERNALNLContextReadFrom((id *)&v17->super.super.isa, a2)) {
          goto LABEL_35;
        }
        goto LABEL_30;
      case 3u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v17 = *(SIRINLUINTERNALTokenChain **)(a1 + 32);
        *(void *)(a1 + 32) = v18;
        goto LABEL_31;
      case 4u:
        uint64_t v17 = objc_alloc_init(SIRINLUEXTERNALUUID);
        objc_storeStrong((id *)(a1 + 8), v17);
        if PBReaderPlaceMark() && (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v17, a2))
        {
LABEL_30:
          PBReaderRecallMark();
LABEL_31:

LABEL_32:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_35:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_32;
    }
  }
}

BOOL SIRINLUEXTERNALRRBoundingBoxReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      switch((v10 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 40) |= 4u;
          uint64_t v18 = *v3;
          unint64_t v19 = *(void *)(a2 + v18);
          if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v20 = *(void *)(*(void *)(a2 + *v7) + v19);
            *(void *)(a2 + v18) = v19 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v20 = 0;
          }
          char v27 = &OBJC_IVAR___SIRINLUEXTERNALRRBoundingBox__xCoordinate;
          goto LABEL_41;
        case 2u:
          *(unsigned char *)(a1 + 40) |= 8u;
          uint64_t v21 = *v3;
          unint64_t v22 = *(void *)(a2 + v21);
          if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v20 = *(void *)(*(void *)(a2 + *v7) + v22);
            *(void *)(a2 + v21) = v22 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v20 = 0;
          }
          char v27 = &OBJC_IVAR___SIRINLUEXTERNALRRBoundingBox__yCoordinate;
          goto LABEL_41;
        case 3u:
          *(unsigned char *)(a1 + 40) |= 2u;
          uint64_t v23 = *v3;
          unint64_t v24 = *(void *)(a2 + v23);
          if (v24 <= 0xFFFFFFFFFFFFFFF7 && v24 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v20 = *(void *)(*(void *)(a2 + *v7) + v24);
            *(void *)(a2 + v23) = v24 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v20 = 0;
          }
          char v27 = &OBJC_IVAR___SIRINLUEXTERNALRRBoundingBox__width;
          goto LABEL_41;
        case 4u:
          *(unsigned char *)(a1 + 40) |= 1u;
          uint64_t v25 = *v3;
          unint64_t v26 = *(void *)(a2 + v25);
          if (v26 <= 0xFFFFFFFFFFFFFFF7 && v26 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v20 = *(void *)(*(void *)(a2 + *v7) + v26);
            *(void *)(a2 + v25) = v26 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v20 = 0;
          }
          char v27 = &OBJC_IVAR___SIRINLUEXTERNALRRBoundingBox__height;
LABEL_41:
          *(void *)(a1 + *v27) = v20;
          goto LABEL_42;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            return 0;
          }
LABEL_42:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          break;
      }
    }
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL SIRINLUINTERNALCONTEXTUPDATEContextUpdateResponseReadFrom(id *a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = objc_alloc_init(SIRINLUINTERNALCONTEXTUPDATEReformedTurnInputBundle);
        [a1 addReformedTurnInputBundles:v17];
        if (!PBReaderPlaceMark()
          || (SIRINLUINTERNALCONTEXTUPDATEReformedTurnInputBundleReadFrom((uint64_t)v17, a2) & 1) == 0)
        {
          goto LABEL_30;
        }
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_27:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v17 = objc_alloc_init(SIRINLUEXTERNALUUID);
    objc_storeStrong(a1 + 2, v17);
    if (!PBReaderPlaceMark() || (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v17, a2) & 1) == 0)
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t siricommon::UInt64Value::formatText(siricommon::UInt64Value *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 16)) {
    PB::TextFormatter::format(a2, "value");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t siricommon::UInt64Value::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(unsigned char *)(this + 16)) {
    return PB::Writer::writeVarInt(a2);
  }
  return this;
}

uint64_t siricommon::UInt64Value::readFrom(siricommon::UInt64Value *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_29;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 16) |= 1u;
        unint64_t v19 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
        uint64_t v20 = *(void *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v3)
        {
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v23 = 0;
          if (v3 <= v19) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          else {
            unint64_t v2 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v2 == v19)
            {
              uint64_t v23 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_43;
            }
            unint64_t v28 = v19 + 1;
            char v29 = *(unsigned char *)(v20 + v19);
            *((void *)a2 + 1) = v28;
            v23 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0) {
              break;
            }
            v26 += 7;
            unint64_t v19 = v28;
            BOOL v14 = v27++ > 8;
            if (v14)
            {
              uint64_t v23 = 0;
              goto LABEL_42;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v23 = 0;
          }
LABEL_42:
          unint64_t v2 = v28;
        }
        else
        {
          char v21 = 0;
          unsigned int v22 = 0;
          uint64_t v23 = 0;
          while (1)
          {
            unint64_t v2 = v19 + 1;
            *((void *)a2 + 1) = v19 + 1;
            char v24 = *(unsigned char *)(v20 + v19);
            v23 |= (unint64_t)(v24 & 0x7F) << v21;
            if ((v24 & 0x80) == 0) {
              break;
            }
            v21 += 7;
            unint64_t v19 = v2;
            BOOL v14 = v22++ > 8;
            if (v14)
            {
              uint64_t v23 = 0;
              break;
            }
          }
        }
LABEL_43:
        *((void *)this + 1) = v23;
      }
      else
      {
LABEL_29:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
      }
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_29;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void siricommon::UInt64Value::~UInt64Value(siricommon::UInt64Value *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x1CB772580);
}

uint64_t siricommon::UInt64Value::UInt64Value(uint64_t this)
{
  *(void *)this = &unk_1F232BEC8;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

{
  *(void *)this = &unk_1F232BEC8;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t siricommon::UInt64Value::UInt64Value(uint64_t this, const siricommon::UInt64Value *a2)
{
  *(void *)this = &unk_1F232BEC8;
  *(_DWORD *)(this + 16) = 0;
  if (*((unsigned char *)a2 + 16))
  {
    uint64_t v2 = *((void *)a2 + 1);
    *(unsigned char *)(this + 16) = 1;
    *(void *)(this + 8) = v2;
  }
  return this;
}

{
  uint64_t v2;

  *(void *)this = &unk_1F232BEC8;
  *(_DWORD *)(this + 16) = 0;
  if (*((unsigned char *)a2 + 16))
  {
    uint64_t v2 = *((void *)a2 + 1);
    *(unsigned char *)(this + 16) = 1;
    *(void *)(this + 8) = v2;
  }
  return this;
}

uint64_t siricommon::UInt64Value::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    int v4 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = *(unsigned char *)(a2 + 16) & 1;
    int v8 = v4;
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v7[0] = &unk_1F232BEC8;
    v7[1] = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  void v8[2];
  int v9;

  if (a1 != a2)
  {
    uint64_t v3 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = 0;
    int v4 = *(void *)(a2 + 8);
    uint64_t v5 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v3;
    char v9 = v5;
    uint64_t v6 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v8[0] = &unk_1F232BEC8;
    v8[1] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t siricommon::swap(uint64_t this, siricommon::UInt64Value *a2, siricommon::UInt64Value *a3)
{
  int v3 = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v3;
  uint64_t v4 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  return this;
}

uint64_t siricommon::UInt64Value::UInt64Value(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &unk_1F232BEC8;
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  *(void *)(result + 8) = *(void *)(a2 + 8);
  return result;
}

{
  *(void *)uint64_t result = &unk_1F232BEC8;
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  *(void *)(result + 8) = *(void *)(a2 + 8);
  return result;
}

BOOL siricommon::UInt64Value::operator==(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a1 + 16);
  BOOL result = (*(unsigned char *)(a2 + 16) & 1) == 0;
  if (v3) {
    return (*(unsigned char *)(a2 + 16) & 1) != 0 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  }
  return result;
}

uint64_t siricommon::UInt64Value::hash_value(siricommon::UInt64Value *this)
{
  if (*((unsigned char *)this + 16)) {
    return *((void *)this + 1);
  }
  else {
    return 0;
  }
}

uint64_t sirinluinternalitfm::ITFMParserRequest::formatText(sirinluinternalitfm::ITFMParserRequest *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "embeddings");
  }
  uint64_t v6 = (uint64_t *)*((void *)this + 2);
  uint64_t v7 = (uint64_t *)*((void *)this + 3);
  while (v6 != v7)
  {
    uint64_t v8 = *v6++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v8 + 32))(v8, a2, "matching_spans");
  }
  uint64_t v9 = *((void *)this + 5);
  if (v9) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v9 + 32))(v9, a2, "nlu_request_id");
  }
  uint64_t v10 = *((void *)this + 6);
  if (v10) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v10 + 32))(v10, a2, "parser");
  }
  uint64_t v11 = *((void *)this + 7);
  if (v11) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v11 + 32))(v11, a2, "request_id");
  }
  uint64_t v12 = *((void *)this + 8);
  if (v12) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v12 + 32))(v12, a2, "tokenised_utterance");
  }
  uint64_t v13 = *((void *)this + 9);
  if (v13) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v13 + 32))(v13, a2, "turn_input");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluinternalitfm::ITFMParserRequest::writeTo(uint64_t this, PB::Writer *a2)
{
  char v3 = (void *)this;
  uint64_t v4 = *(const PB::Base **)(this + 56);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  uint64_t v5 = (const PB::Base *)v3[8];
  if (v5) {
    this = PB::Writer::writeSubmessage(a2, v5);
  }
  uint64_t v6 = (const PB::Base *)v3[1];
  if (v6) {
    this = PB::Writer::writeSubmessage(a2, v6);
  }
  uint64_t v7 = (const PB::Base **)v3[2];
  uint64_t v8 = (const PB::Base **)v3[3];
  while (v7 != v8)
  {
    uint64_t v9 = *v7++;
    this = PB::Writer::writeSubmessage(a2, v9);
  }
  uint64_t v10 = (const PB::Base *)v3[9];
  if (v10) {
    this = PB::Writer::writeSubmessage(a2, v10);
  }
  uint64_t v11 = (const PB::Base *)v3[6];
  if (v11) {
    this = PB::Writer::writeSubmessage(a2, v11);
  }
  uint64_t v12 = (const PB::Base *)v3[5];
  if (v12)
  {
    return PB::Writer::writeSubmessage(a2, v12);
  }
  return this;
}

uint64_t sirinluinternalitfm::ITFMParserRequest::readFrom(sirinluinternalitfm::ITFMParserRequest *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_19;
        }
      }
LABEL_21:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v10 >> 3))
      {
        case 1u:
          operator new();
        case 2u:
          operator new();
        case 3u:
          operator new();
        case 4u:
          PB::PtrVector<sirinluinternal::MatchingSpan>::emplace_back<>();
        case 5u:
          operator new();
        case 6u:
          operator new();
        case 7u:
          operator new();
        default:
          break;
      }
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_21;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_19;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluinternalitfm::ITFMParserRequest::~ITFMParserRequest(sirinluinternalitfm::ITFMParserRequest *this)
{
  sirinluinternalitfm::ITFMParserRequest::~ITFMParserRequest(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  uint64_t vars8;

  *(void *)this = &unk_1F232BF18;
  unint64_t v2 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unint64_t v3 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  char v8 = (void **)((char *)this + 16);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v7 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  PB::Base::~Base(this);
}

double sirinluinternalitfm::ITFMParserRequest::ITFMParserRequest(sirinluinternalitfm::ITFMParserRequest *this)
{
  *(void *)this = &unk_1F232BF18;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = 0;
  return result;
}

{
  double result;

  *(void *)this = &unk_1F232BF18;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = 0;
  return result;
}

uint64_t sirinluinternalitfm::ITFMParserRequest::ITFMParserRequest(uint64_t this, const sirinluinternalitfm::ITFMParserRequest *a2)
{
  *(_OWORD *)(this + 8) = 0u;
  *(void *)this = &unk_1F232BF18;
  *(_OWORD *)(this + 24) = 0u;
  *(_OWORD *)(this + 40) = 0u;
  *(_OWORD *)(this + 56) = 0u;
  *(void *)(this + 72) = 0;
  if (*((void *)a2 + 7)) {
    operator new();
  }
  if (*((void *)a2 + 8)) {
    operator new();
  }
  if (*((void *)a2 + 1)) {
    operator new();
  }
  if (*((void *)a2 + 2) != *((void *)a2 + 3)) {
    PB::PtrVector<sirinluinternal::MatchingSpan>::emplace_back<sirinluinternal::MatchingSpan const&>();
  }
  if (*((void *)a2 + 9)) {
    operator new();
  }
  if (*((void *)a2 + 6)) {
    operator new();
  }
  if (*((void *)a2 + 5)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternalitfm::ITFMParserRequest::operator=(uint64_t a1, const sirinluinternalitfm::ITFMParserRequest *a2)
{
  if ((const sirinluinternalitfm::ITFMParserRequest *)a1 != a2)
  {
    sirinluinternalitfm::ITFMParserRequest::ITFMParserRequest((uint64_t)&v9, a2);
    long long v3 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v13;
    long long v13 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v10 = v4;
    long long v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    long long v11 = v5;
    uint64_t v6 = *(void *)(a1 + 72);
    *(void *)(a1 + 72) = v14;
    uint64_t v14 = v6;
    long long v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    long long v12 = v7;
    sirinluinternalitfm::ITFMParserRequest::~ITFMParserRequest((sirinluinternalitfm::ITFMParserRequest *)&v9);
  }
  return a1;
}

void *sirinluinternalitfm::swap(void *this, sirinluinternalitfm::ITFMParserRequest *a2, sirinluinternalitfm::ITFMParserRequest *a3)
{
  uint64_t v3 = this[7];
  this[7] = *((void *)a2 + 7);
  *((void *)a2 + 7) = v3;
  uint64_t v4 = this[8];
  this[8] = *((void *)a2 + 8);
  *((void *)a2 + 8) = v4;
  uint64_t v5 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  uint64_t v8 = this[4];
  this[4] = *((void *)a2 + 4);
  *((void *)a2 + 4) = v8;
  uint64_t v9 = this[9];
  this[9] = *((void *)a2 + 9);
  *((void *)a2 + 9) = v9;
  uint64_t v10 = this[6];
  this[6] = *((void *)a2 + 6);
  *((void *)a2 + 6) = v10;
  uint64_t v11 = this[5];
  this[5] = *((void *)a2 + 5);
  *((void *)a2 + 5) = v11;
  return this;
}

uint64_t sirinluinternalitfm::ITFMParserRequest::ITFMParserRequest(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F232BF18;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = 0;
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = 0;
  uint64_t v6 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v5;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = 0;
  uint64_t v8 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = v7;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v10 = *v4;
  *uint64_t v4 = v9;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate((void **)(a1 + 16));
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  uint64_t v11 = *(void *)(a2 + 72);
  *(void *)(a2 + 72) = 0;
  uint64_t v12 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = v11;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  uint64_t v14 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v13;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  uint64_t v15 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  uint64_t v16 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v15;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  return a1;
}

uint64_t sirinluinternalitfm::ITFMParserRequest::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sirinluinternalitfm::ITFMParserRequest::ITFMParserRequest((uint64_t)&v9, a2);
    long long v3 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v13;
    long long v13 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v10 = v4;
    long long v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    long long v11 = v5;
    uint64_t v6 = *(void *)(a1 + 72);
    *(void *)(a1 + 72) = v14;
    uint64_t v14 = v6;
    long long v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    long long v12 = v7;
    sirinluinternalitfm::ITFMParserRequest::~ITFMParserRequest((sirinluinternalitfm::ITFMParserRequest *)&v9);
  }
  return a1;
}

BOOL sirinluinternalitfm::ITFMParserRequest::operator==(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[7];
  uint64_t v5 = *(void *)(a2 + 56);
  if (v4)
  {
    if (!v5 || !sirinluexternal::UUID::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  uint64_t v6 = (void *)a1[8];
  long long v7 = *(void **)(a2 + 64);
  if (v6)
  {
    if (!v7 || !sirinluinternalnlv4_parser::Tokenisation::operator==(v6, v7)) {
      return 0;
    }
  }
  else if (v7)
  {
    return 0;
  }
  uint64_t v8 = a1[1];
  uint64_t v9 = *(void *)(a2 + 8);
  if (v8)
  {
    if (!v9 || !sirinluinternal::NLv4EmbeddingTensor::operator==(v8, v9)) {
      return 0;
    }
  }
  else if (v9)
  {
    return 0;
  }
  BOOL result = PB::PtrVector<sirinluinternal::MatchingSpan>::operator==(a1 + 2, *(uint64_t **)(a2 + 16), *(void *)(a2 + 24));
  if (!result) {
    return result;
  }
  uint64_t v11 = a1[9];
  uint64_t v12 = *(void *)(a2 + 72);
  if (v11)
  {
    if (!v12 || (sirinluexternal::TurnInput::operator==(v11, v12) & 1) == 0) {
      return 0;
    }
  }
  else if (v12)
  {
    return 0;
  }
  uint64_t v13 = a1[6];
  uint64_t v14 = *(void *)(a2 + 48);
  if (!v13)
  {
    if (!v14) {
      goto LABEL_29;
    }
    return 0;
  }
  if (!v14 || !sirinluexternal::Parser::operator==(v13, v14)) {
    return 0;
  }
LABEL_29:
  uint64_t v15 = a1[5];
  uint64_t v16 = *(void *)(a2 + 40);
  BOOL result = (v15 | v16) == 0;
  if (v15 && v16)
  {
    uint64_t v17 = a1[5];
    return sirinluexternal::RequestID::operator==(v17, v16);
  }
  return result;
}

unint64_t sirinluinternalitfm::ITFMParserRequest::hash_value(sirinluinternalitfm::ITFMParserRequest *this)
{
  uint64_t v2 = *((void *)this + 7);
  if (!v2)
  {
    uint64_t v6 = 0;
    goto LABEL_11;
  }
  if ((*(unsigned char *)(v2 + 28) & 1) == 0)
  {
    uint64_t v3 = 0;
    if ((*(unsigned char *)(v2 + 28) & 2) != 0) {
      goto LABEL_4;
    }
LABEL_8:
    uint64_t v4 = 0;
    if ((*(unsigned char *)(v2 + 28) & 4) != 0) {
      goto LABEL_5;
    }
LABEL_9:
    uint64_t v5 = 0;
    goto LABEL_10;
  }
  uint64_t v3 = *(void *)(v2 + 8);
  if ((*(unsigned char *)(v2 + 28) & 2) == 0) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v4 = *(void *)(v2 + 16);
  if ((*(unsigned char *)(v2 + 28) & 4) == 0) {
    goto LABEL_9;
  }
LABEL_5:
  uint64_t v5 = *(int *)(v2 + 24);
LABEL_10:
  uint64_t v6 = v4 ^ v3 ^ v5;
LABEL_11:
  long long v7 = (sirinluinternalnlv4_parser::Tokenisation *)*((void *)this + 8);
  if (v7) {
    unint64_t v8 = sirinluinternalnlv4_parser::Tokenisation::hash_value(v7);
  }
  else {
    unint64_t v8 = 0;
  }
  uint64_t v9 = (sirinluinternal::NLv4EmbeddingTensor *)*((void *)this + 1);
  if (v9) {
    unint64_t v10 = sirinluinternal::NLv4EmbeddingTensor::hash_value(v9);
  }
  else {
    unint64_t v10 = 0;
  }
  uint64_t v11 = (sirinluinternal::MatchingSpan **)*((void *)this + 2);
  uint64_t v12 = (sirinluinternal::MatchingSpan **)*((void *)this + 3);
  if (v11 == v12)
  {
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v13 = 0;
    do
    {
      uint64_t v14 = *v11++;
      v13 ^= sirinluinternal::MatchingSpan::hash_value(v14);
    }
    while (v11 != v12);
  }
  uint64_t v15 = (sirinluexternal::TurnInput *)*((void *)this + 9);
  if (v15) {
    unint64_t v16 = sirinluexternal::TurnInput::hash_value(v15);
  }
  else {
    unint64_t v16 = 0;
  }
  uint64_t v17 = *((void *)this + 6);
  if (!v17)
  {
    uint64_t v20 = 0;
    goto LABEL_33;
  }
  if (*(unsigned char *)(v17 + 16))
  {
    uint64_t v18 = *(int *)(v17 + 8);
    if ((*(unsigned char *)(v17 + 16) & 2) != 0) {
      goto LABEL_28;
    }
LABEL_31:
    uint64_t v19 = 0;
    goto LABEL_32;
  }
  uint64_t v18 = 0;
  if ((*(unsigned char *)(v17 + 16) & 2) == 0) {
    goto LABEL_31;
  }
LABEL_28:
  uint64_t v19 = *(int *)(v17 + 12);
LABEL_32:
  uint64_t v20 = v19 ^ v18;
LABEL_33:
  unint64_t v21 = *((void *)this + 5);
  if (v21) {
    unint64_t v21 = sirinluexternal::RequestID::hash_value((sirinluexternal::RequestID *)v21);
  }
  return v8 ^ v6 ^ v16 ^ v20 ^ v21 ^ v10 ^ v13;
}

uint64_t sirinluinternalitfm::ITFMParserRequest::makeRequestId(uint64_t this)
{
  if (!*(void *)(this + 56)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternalitfm::ITFMParserRequest::makeTokenisedUtterance(uint64_t this)
{
  if (!*(void *)(this + 64)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternalitfm::ITFMParserRequest::makeEmbeddings(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternalitfm::ITFMParserRequest::makeTurnInput(uint64_t this)
{
  if (!*(void *)(this + 72)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternalitfm::ITFMParserRequest::makeParser(uint64_t this)
{
  if (!*(void *)(this + 48)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternalitfm::ITFMParserRequest::makeNluRequestId(uint64_t this)
{
  if (!*(void *)(this + 40)) {
    operator new();
  }
  return this;
}

uint64_t siricommon::BytesValue::formatText(siricommon::BytesValue *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((void *)this + 1)) {
    PB::TextFormatter::format();
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t siricommon::BytesValue::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(void *)(this + 8)) {
    return PB::Writer::write();
  }
  return this;
}

uint64_t siricommon::BytesValue::readFrom(siricommon::BytesValue *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void siricommon::BytesValue::~BytesValue(void ***this)
{
  *this = (void **)&unk_1F232BF68;
  std::unique_ptr<PB::Data>::reset[abi:ne180100](this + 1, 0);
  PB::Base::~Base((PB::Base *)this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t vars8;

  *this = (void **)&unk_1F232BF68;
  std::unique_ptr<PB::Data>::reset[abi:ne180100](this + 1, 0);
  PB::Base::~Base((PB::Base *)this);
}

{
  uint64_t vars8;

  *this = (void **)&unk_1F232BF68;
  std::unique_ptr<PB::Data>::reset[abi:ne180100](this + 1, 0);
  PB::Base::~Base((PB::Base *)this);
}

void *siricommon::BytesValue::BytesValue(void *this)
{
  *this = &unk_1F232BF68;
  this[1] = 0;
  return this;
}

{
  *this = &unk_1F232BF68;
  this[1] = 0;
  return this;
}

void *siricommon::BytesValue::BytesValue(void *this, const siricommon::BytesValue *a2)
{
  *this = &unk_1F232BF68;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

void ***siricommon::BytesValue::operator=(void ***a1, const siricommon::BytesValue *a2)
{
  if (a1 != (void ***)a2)
  {
    siricommon::BytesValue::BytesValue(&v5, a2);
    unint64_t v3 = a1[1];
    a1[1] = v6;
    uint64_t v5 = &unk_1F232BF68;
    uint64_t v6 = v3;
    std::unique_ptr<PB::Data>::reset[abi:ne180100](&v6, 0);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t siricommon::swap(uint64_t this, siricommon::BytesValue *a2, siricommon::BytesValue *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

uint64_t siricommon::BytesValue::BytesValue(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F232BF68;
  *(void *)(a1 + 8) = 0;
  uint64_t v3 = *(void ***)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  std::unique_ptr<PB::Data>::reset[abi:ne180100]((void ***)(a1 + 8), v3);
  return a1;
}

{
  void **v3;

  *(void *)a1 = &unk_1F232BF68;
  *(void *)(a1 + 8) = 0;
  uint64_t v3 = *(void ***)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  std::unique_ptr<PB::Data>::reset[abi:ne180100]((void ***)(a1 + 8), v3);
  return a1;
}

uint64_t siricommon::BytesValue::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v6 = &unk_1F232BF68;
    uint64_t v7 = 0;
    uint64_t v3 = *(void ***)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    std::unique_ptr<PB::Data>::reset[abi:ne180100](&v7, v3);
    int v4 = *(void ***)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v6 = &unk_1F232BF68;
    uint64_t v7 = v4;
    std::unique_ptr<PB::Data>::reset[abi:ne180100](&v7, 0);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

BOOL siricommon::BytesValue::operator==(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 8)) {
    return *(void *)(a2 + 8) == 0;
  }
  if (!*(void *)(a2 + 8)) {
    return 0;
  }
  if (PB::Data::operator==()) {
    return 1;
  }
  return !*(void *)(a1 + 8) && *(void *)(a2 + 8) == 0;
}

uint64_t siricommon::BytesValue::hash_value(siricommon::BytesValue *this)
{
  if (*((void *)this + 1)) {
    return PBHashBytes();
  }
  else {
    return 0;
  }
}

uint64_t SIRINLUEXTERNALRRGroupIdentifierReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  int v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 20) |= 1u;
        while (1)
        {
          uint64_t v21 = *v3;
          unint64_t v22 = *(void *)(a2 + v21);
          if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0) {
            goto LABEL_33;
          }
          v18 += 7;
          BOOL v14 = v19++ >= 9;
          if (v14)
          {
            LODWORD(v20) = 0;
            goto LABEL_35;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_33:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v20) = 0;
        }
LABEL_35:
        *(_DWORD *)(a1 + 16) = v20;
      }
      else if ((v10 >> 3) == 1)
      {
        char v17 = objc_alloc_init(SIRICOMMONStringValue);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || (SIRICOMMONStringValueReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1C8AEAF00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C8AEAF58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8AEAFD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C8AEB02C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8AEB098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C8AEB130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C8AEB190(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8AEB20C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C8AEB264(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8AEB2E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C8AEB338(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8AEB3B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C8AEB40C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8AEB488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C8AEB4E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8AEB54C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C8AEB5C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8AEB640(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sirinluinternal::SubwordTokenChain::formatText(sirinluinternal::SubwordTokenChain *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((void *)this + 1)) {
    PB::TextFormatter::format();
  }
  uint64_t v5 = (uint64_t *)*((void *)this + 2);
  uint64_t v6 = (uint64_t *)*((void *)this + 3);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "subword_tokens");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluinternal::SubwordTokenChain::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if (*(void *)(this + 8)) {
    this = PB::Writer::write();
  }
  uint64_t v5 = *(const PB::Base ***)(v3 + 16);
  int v4 = *(const PB::Base ***)(v3 + 24);
  while (v5 != v4)
  {
    uint64_t v6 = *v5++;
    this = PB::Writer::writeSubmessage(a2, v6);
  }
  return this;
}

uint64_t sirinluinternal::SubwordTokenChain::readFrom(sirinluinternal::SubwordTokenChain *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_24;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 2) {
        operator new();
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_24:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_24;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sub_1C8AEBA54(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void *sirinluinternal::swap(void *this, sirinluinternal::SubwordTokenChain *a2, sirinluinternal::SubwordTokenChain *a3)
{
  uint64_t v3 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  uint64_t v4 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  uint64_t v6 = this[4];
  this[4] = *((void *)a2 + 4);
  *((void *)a2 + 4) = v6;
  return this;
}

BOOL sirinluinternal::SubwordTokenChain::operator==(void *a1, uint64_t a2)
{
  uint64_t v4 = (unsigned __int8 *)a1[1];
  uint64_t v5 = *(unsigned __int8 ***)(a2 + 8);
  if (v4)
  {
    if (!v5) {
      return 0;
    }
    uint64_t v6 = v4[23];
    if ((v6 & 0x80u) == 0) {
      uint64_t v7 = (unsigned __int8 *)v4[23];
    }
    else {
      uint64_t v7 = (unsigned __int8 *)*((void *)v4 + 1);
    }
    char v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    int v9 = (char)v8;
    if ((char)v8 < 0) {
      char v8 = v5[1];
    }
    if (v7 != v8) {
      return 0;
    }
    if (v9 >= 0) {
      unint64_t v10 = *(unsigned __int8 **)(a2 + 8);
    }
    else {
      unint64_t v10 = *v5;
    }
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v10, *((void *)v4 + 1))) {
        return 0;
      }
    }
    else if (v4[23])
    {
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6) {
          goto LABEL_18;
        }
      }
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
LABEL_18:
  uint64_t v11 = a1[2];
  uint64_t v12 = a1[3];
  uint64_t v14 = a2 + 16;
  BOOL v13 = *(uint64_t **)(a2 + 16);
  if (v12 - v11 != *(void *)(v14 + 8) - (void)v13) {
    return 0;
  }
  if (v11 == v12) {
    return 1;
  }
  uint64_t v15 = v11 + 8;
  do
  {
    uint64_t v16 = *v13++;
    BOOL result = sirinluinternal::SubwordToken::operator==(*(void *)(v15 - 8), v16);
    BOOL v18 = !result || v15 == v12;
    v15 += 8;
  }
  while (!v18);
  return result;
}

unint64_t sirinluinternal::SubwordTokenChain::hash_value(sirinluinternal::SubwordTokenChain *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    unint64_t v3 = std::__string_hash<char>::operator()[abi:ne180100](v2);
  }
  else {
    unint64_t v3 = 0;
  }
  uint64_t v5 = (sirinluinternal::SubwordToken **)*((void *)this + 2);
  uint64_t v4 = (sirinluinternal::SubwordToken **)*((void *)this + 3);
  if (v5 == v4)
  {
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = *v5++;
      v6 ^= sirinluinternal::SubwordToken::hash_value(v7);
    }
    while (v5 != v4);
  }
  return v6 ^ v3;
}

uint64_t SIRINLUINTERNALSNLP_INTERMEDIATENLv4ExecutedHandcraftedRulesReadFrom(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = objc_alloc_init(SIRINLUINTERNALSNLP_INTERMEDIATESNLPHandcraftedRules);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark()
          || (SIRINLUINTERNALSNLP_INTERMEDIATESNLPHandcraftedRulesReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sirinluexternal::Span::formatText(sirinluexternal::Span *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((unsigned char *)this + 72) & 2) != 0) {
    PB::TextFormatter::format(a2, "end_token_index");
  }
  if (*((void *)this + 4)) {
    PB::TextFormatter::format();
  }
  if (*((void *)this + 5)) {
    PB::TextFormatter::format();
  }
  uint64_t v5 = *((void *)this + 1);
  uint64_t v6 = *((void *)this + 2);
  while (v5 != v6)
  {
    v5 += 4;
    PB::TextFormatter::format(a2, "matcher_names");
  }
  char v7 = *((unsigned char *)this + 72);
  if (v7)
  {
    PB::TextFormatter::format(a2, "score", *((double *)this + 6));
    char v7 = *((unsigned char *)this + 72);
  }
  if ((v7 & 4) != 0) {
    PB::TextFormatter::format(a2, "start_token_index");
  }
  uint64_t v8 = *((void *)this + 7);
  if (v8) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v8 + 32))(v8, a2, "uso_graph");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluexternal::Span::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if (*(void *)(this + 40)) {
    this = PB::Writer::write();
  }
  if (*(void *)(v3 + 32)) {
    this = PB::Writer::write();
  }
  char v4 = *(unsigned char *)(v3 + 72);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    char v4 = *(unsigned char *)(v3 + 72);
  }
  if ((v4 & 2) != 0) {
    this = PB::Writer::writeVarInt(a2);
  }
  uint64_t v5 = *(const PB::Base **)(v3 + 56);
  if (v5) {
    this = PB::Writer::writeSubmessage(a2, v5);
  }
  if (*(unsigned char *)(v3 + 72)) {
    this = PB::Writer::write(a2, *(double *)(v3 + 48));
  }
  uint64_t v7 = *(void *)(v3 + 8);
  uint64_t v6 = *(void *)(v3 + 16);
  while (v7 != v6)
  {
    v7 += 4;
    this = PB::Writer::writeVarInt(a2);
  }
  return this;
}

BOOL sirinluexternal::Span::readFrom(sirinluexternal::Span *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (2)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v53 = v10++ > 8;
        if (v53) {
          goto LABEL_19;
        }
      }
LABEL_25:
      if ((v11 & 7) != 4)
      {
        switch((v11 >> 3))
        {
          case 1u:
            operator new();
          case 2u:
            operator new();
          case 3u:
            *((unsigned char *)this + 72) |= 4u;
            unint64_t v19 = *((void *)a2 + 1);
            unint64_t v20 = *((void *)a2 + 2);
            uint64_t v21 = *(void *)a2;
            if (v19 <= 0xFFFFFFFFFFFFFFF5 && v19 + 10 <= v20)
            {
              char v22 = 0;
              unsigned int v23 = 0;
              uint64_t v24 = 0;
              do
              {
                unint64_t v25 = v19 + 1;
                *((void *)a2 + 1) = v19 + 1;
                char v26 = *(unsigned char *)(v21 + v19);
                v24 |= (unint64_t)(v26 & 0x7F) << v22;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_122;
                }
                v22 += 7;
                unint64_t v19 = v25;
                BOOL v53 = v23++ > 8;
              }
              while (!v53);
LABEL_98:
              LODWORD(v24) = 0;
              goto LABEL_122;
            }
            char v58 = 0;
            unsigned int v59 = 0;
            uint64_t v24 = 0;
            if (v20 <= v19) {
              unint64_t v20 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v20 == v19)
              {
                LODWORD(v24) = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v60 = v19 + 1;
                char v61 = *(unsigned char *)(v21 + v19);
                *((void *)a2 + 1) = v60;
                v24 |= (unint64_t)(v61 & 0x7F) << v58;
                if (v61 < 0)
                {
                  v58 += 7;
                  unint64_t v19 = v60;
                  BOOL v53 = v59++ > 8;
                  if (v53) {
                    goto LABEL_98;
                  }
                  continue;
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v24) = 0;
                }
              }
              break;
            }
LABEL_122:
            *((_DWORD *)this + 17) = v24;
            goto LABEL_20;
          case 4u:
            *((unsigned char *)this + 72) |= 2u;
            unint64_t v27 = *((void *)a2 + 1);
            unint64_t v28 = *((void *)a2 + 2);
            uint64_t v29 = *(void *)a2;
            if (v27 <= 0xFFFFFFFFFFFFFFF5 && v27 + 10 <= v28)
            {
              char v30 = 0;
              unsigned int v31 = 0;
              uint64_t v32 = 0;
              do
              {
                unint64_t v33 = v27 + 1;
                *((void *)a2 + 1) = v27 + 1;
                char v34 = *(unsigned char *)(v29 + v27);
                v32 |= (unint64_t)(v34 & 0x7F) << v30;
                if ((v34 & 0x80) == 0) {
                  goto LABEL_125;
                }
                v30 += 7;
                unint64_t v27 = v33;
                BOOL v53 = v31++ > 8;
              }
              while (!v53);
LABEL_105:
              LODWORD(v32) = 0;
              goto LABEL_125;
            }
            char v62 = 0;
            unsigned int v63 = 0;
            uint64_t v32 = 0;
            if (v28 <= v27) {
              unint64_t v28 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v28 == v27)
              {
                LODWORD(v32) = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v64 = v27 + 1;
                char v65 = *(unsigned char *)(v29 + v27);
                *((void *)a2 + 1) = v64;
                v32 |= (unint64_t)(v65 & 0x7F) << v62;
                if (v65 < 0)
                {
                  v62 += 7;
                  unint64_t v27 = v64;
                  BOOL v53 = v63++ > 8;
                  if (v53) {
                    goto LABEL_105;
                  }
                  continue;
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v32) = 0;
                }
              }
              break;
            }
LABEL_125:
            *((_DWORD *)this + 16) = v32;
            goto LABEL_20;
          case 5u:
            operator new();
          case 6u:
            *((unsigned char *)this + 72) |= 1u;
            unint64_t v35 = *((void *)a2 + 1);
            if (v35 <= 0xFFFFFFFFFFFFFFF7 && v35 + 8 <= *((void *)a2 + 2))
            {
              *((void *)this + 6) = *(void *)(*(void *)a2 + v35);
              *((void *)a2 + 1) += 8;
            }
            else
            {
              *((unsigned char *)a2 + 24) = 1;
            }
            goto LABEL_20;
          case 7u:
            if ((v11 & 7) == 2)
            {
              if (PB::Reader::placeMark()) {
                return 0;
              }
              if (*((void *)a2 + 1) < *((void *)a2 + 2) && !*((unsigned char *)a2 + 24))
              {
                v36 = (char *)*((void *)this + 2);
                while (1)
                {
                  unint64_t v37 = *((void *)this + 3);
                  if ((unint64_t)v36 >= v37)
                  {
                    v38 = (char *)*((void *)this + 1);
                    uint64_t v39 = (v36 - v38) >> 2;
                    unint64_t v40 = v39 + 1;
                    if ((unint64_t)(v39 + 1) >> 62) {
                      goto LABEL_156;
                    }
                    uint64_t v41 = v37 - (void)v38;
                    if (v41 >> 1 > v40) {
                      unint64_t v40 = v41 >> 1;
                    }
                    if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v42 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v42 = v40;
                    }
                    if (v42)
                    {
                      unint64_t v42 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v42);
                      v38 = (char *)*((void *)this + 1);
                      v36 = (char *)*((void *)this + 2);
                    }
                    else
                    {
                      uint64_t v43 = 0;
                    }
                    v44 = (_DWORD *)(v42 + 4 * v39);
                    _DWORD *v44 = 0;
                    v45 = (char *)(v44 + 1);
                    while (v36 != v38)
                    {
                      int v46 = *((_DWORD *)v36 - 1);
                      v36 -= 4;
                      *--v44 = v46;
                    }
                    *((void *)this + 1) = v44;
                    *((void *)this + 2) = v45;
                    *((void *)this + 3) = v42 + 4 * v43;
                    if (v38) {
                      operator delete(v38);
                    }
                    v36 = v45;
                  }
                  else
                  {
                    *(_DWORD *)v36 = 0;
                    v36 += 4;
                  }
                  *((void *)this + 2) = v36;
                  unint64_t v48 = *((void *)a2 + 1);
                  unint64_t v47 = *((void *)a2 + 2);
                  uint64_t v49 = *(void *)a2;
                  char v50 = 0;
                  unsigned int v51 = 0;
                  uint64_t v52 = 0;
                  BOOL v53 = v48 > 0xFFFFFFFFFFFFFFF5 || v48 + 10 > v47;
                  if (v53) {
                    break;
                  }
                  while (1)
                  {
                    unint64_t v55 = v48 + 1;
                    *((void *)a2 + 1) = v48 + 1;
                    char v57 = *(unsigned char *)(v49 + v48);
                    v52 |= (unint64_t)(v57 & 0x7F) << v50;
                    if ((v57 & 0x80) == 0) {
                      break;
                    }
                    v50 += 7;
                    unint64_t v48 = v55;
                    BOOL v53 = v51++ > 8;
                    if (v53) {
                      goto LABEL_86;
                    }
                  }
LABEL_89:
                  *((_DWORD *)v36 - 1) = v52;
                  if (v55 >= v47 || *((unsigned char *)a2 + 24)) {
                    goto LABEL_44;
                  }
                }
                if (v47 <= v48) {
                  uint64_t v54 = *((void *)a2 + 1);
                }
                else {
                  uint64_t v54 = *((void *)a2 + 2);
                }
                while (v54 != v48)
                {
                  unint64_t v55 = v48 + 1;
                  char v56 = *(unsigned char *)(v49 + v48);
                  *((void *)a2 + 1) = v55;
                  v52 |= (unint64_t)(v56 & 0x7F) << v50;
                  if ((v56 & 0x80) == 0)
                  {
                    if (*((unsigned char *)a2 + 24)) {
                      LODWORD(v52) = 0;
                    }
                    goto LABEL_89;
                  }
                  v50 += 7;
                  unint64_t v48 = v55;
                  BOOL v53 = v51++ > 8;
                  if (v53)
                  {
LABEL_86:
                    LODWORD(v52) = 0;
                    goto LABEL_89;
                  }
                }
                *((unsigned char *)a2 + 24) = 1;
                *((_DWORD *)v36 - 1) = 0;
              }
LABEL_44:
              PB::Reader::recallMark();
            }
            else
            {
              v67 = (char *)*((void *)this + 2);
              unint64_t v66 = *((void *)this + 3);
              if ((unint64_t)v67 >= v66)
              {
                v69 = (char *)*((void *)this + 1);
                uint64_t v70 = (v67 - v69) >> 2;
                unint64_t v71 = v70 + 1;
                if ((unint64_t)(v70 + 1) >> 62) {
LABEL_156:
                }
                  std::vector<std::string>::__throw_length_error[abi:ne180100]();
                uint64_t v72 = v66 - (void)v69;
                if (v72 >> 1 > v71) {
                  unint64_t v71 = v72 >> 1;
                }
                if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v73 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v73 = v71;
                }
                if (v73)
                {
                  unint64_t v73 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v73);
                  v69 = (char *)*((void *)this + 1);
                  v67 = (char *)*((void *)this + 2);
                }
                else
                {
                  uint64_t v74 = 0;
                }
                v75 = (_DWORD *)(v73 + 4 * v70);
                _DWORD *v75 = 0;
                v68 = v75 + 1;
                while (v67 != v69)
                {
                  int v76 = *((_DWORD *)v67 - 1);
                  v67 -= 4;
                  *--v75 = v76;
                }
                *((void *)this + 1) = v75;
                *((void *)this + 2) = v68;
                *((void *)this + 3) = v73 + 4 * v74;
                if (v69) {
                  operator delete(v69);
                }
              }
              else
              {
                *(_DWORD *)v67 = 0;
                v68 = v67 + 4;
              }
              *((void *)this + 2) = v68;
              unint64_t v77 = *((void *)a2 + 1);
              unint64_t v78 = *((void *)a2 + 2);
              uint64_t v79 = *(void *)a2;
              char v80 = 0;
              unsigned int v81 = 0;
              if (v77 > 0xFFFFFFFFFFFFFFF5 || v77 + 10 > v78)
              {
                uint64_t v85 = 0;
                if (v78 <= v77) {
                  unint64_t v78 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v78 == v77)
                  {
                    LODWORD(v85) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_151;
                  }
                  unint64_t v83 = v77 + 1;
                  char v84 = *(unsigned char *)(v79 + v77);
                  *((void *)a2 + 1) = v83;
                  v85 |= (unint64_t)(v84 & 0x7F) << v80;
                  if ((v84 & 0x80) == 0) {
                    break;
                  }
                  v80 += 7;
                  unint64_t v77 = v83;
                  BOOL v53 = v81++ > 8;
                  if (v53)
                  {
LABEL_147:
                    LODWORD(v85) = 0;
                    goto LABEL_151;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v85) = 0;
                }
              }
              else
              {
                uint64_t v85 = 0;
                while (1)
                {
                  unint64_t v86 = v77 + 1;
                  *((void *)a2 + 1) = v77 + 1;
                  char v87 = *(unsigned char *)(v79 + v77);
                  v85 |= (unint64_t)(v87 & 0x7F) << v80;
                  if ((v87 & 0x80) == 0) {
                    break;
                  }
                  v80 += 7;
                  unint64_t v77 = v86;
                  BOOL v53 = v81++ > 8;
                  if (v53) {
                    goto LABEL_147;
                  }
                }
              }
LABEL_151:
              *(v68 - 1) = v85;
            }
LABEL_20:
            unint64_t v2 = *((void *)a2 + 1);
            unint64_t v3 = *((void *)a2 + 2);
            int v4 = *((unsigned __int8 *)a2 + 24);
            if (v2 >= v3 || v4 != 0) {
              return v4 == 0;
            }
            continue;
          default:
            goto LABEL_19;
        }
      }
      int v4 = 0;
      return v4 == 0;
    }
    break;
  }
  char v14 = 0;
  unsigned int v15 = 0;
  unint64_t v11 = 0;
  if (v2 > v3) {
    unint64_t v3 = v2;
  }
  do
  {
    if (v3 == v2)
    {
      int v4 = 1;
      *((unsigned char *)a2 + 24) = 1;
      return v4 == 0;
    }
    unint64_t v16 = v2 + 1;
    char v17 = *(unsigned char *)(v8 + v2);
    *((void *)a2 + 1) = v16;
    v11 |= (unint64_t)(v17 & 0x7F) << v14;
    if ((v17 & 0x80) == 0) {
      goto LABEL_25;
    }
    v14 += 7;
    unint64_t v2 = v16;
    BOOL v53 = v15++ > 8;
  }
  while (!v53);
LABEL_19:
  if (PB::Reader::skip(a2)) {
    goto LABEL_20;
  }
  return 0;
}

void sirinluexternal::Span::~Span(sirinluexternal::Span *this)
{
  sirinluexternal::Span::~Span(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t vars8;

  *(void *)this = &unk_1F232C008;
  unint64_t v2 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unint64_t v3 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3) {
    std::default_delete<std::string>::operator()[abi:ne180100](v3);
  }
  int v4 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v4) {
    std::default_delete<std::string>::operator()[abi:ne180100](v4);
  }
  uint64_t v5 = (void *)*((void *)this + 1);
  if (v5)
  {
    *((void *)this + 2) = v5;
    operator delete(v5);
  }
  PB::Base::~Base(this);
}

double sirinluexternal::Span::Span(sirinluexternal::Span *this)
{
  *(void *)this = &unk_1F232C008;
  *((void *)this + 7) = 0;
  *((_DWORD *)this + 18) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 5) = 0;
  return result;
}

{
  double result;

  *(void *)this = &unk_1F232C008;
  *((void *)this + 7) = 0;
  *((_DWORD *)this + 18) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 5) = 0;
  return result;
}

sirinluexternal::Span *sirinluexternal::Span::Span(sirinluexternal::Span *this, const sirinluexternal::Span *a2)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  unint64_t v3 = (void *)((char *)this + 8);
  *(void *)this = &unk_1F232C008;
  *((void *)this + 7) = 0;
  *((_DWORD *)this + 18) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 5) = 0;
  if (*((void *)a2 + 5)) {
    operator new();
  }
  if (*((void *)a2 + 4)) {
    operator new();
  }
  char v4 = *((unsigned char *)a2 + 72);
  if ((v4 & 4) != 0)
  {
    int v5 = *((_DWORD *)a2 + 17);
    *((unsigned char *)this + 72) |= 4u;
    *((_DWORD *)this + 17) = v5;
    char v4 = *((unsigned char *)a2 + 72);
  }
  if ((v4 & 2) != 0)
  {
    int v6 = *((_DWORD *)a2 + 16);
    *((unsigned char *)this + 72) |= 2u;
    *((_DWORD *)this + 16) = v6;
  }
  if (*((void *)a2 + 7)) {
    operator new();
  }
  if (*((unsigned char *)a2 + 72))
  {
    uint64_t v7 = *((void *)a2 + 6);
    *((unsigned char *)this + 72) |= 1u;
    *((void *)this + 6) = v7;
  }
  if (this != a2)
  {
    uint64_t v8 = (char *)*((void *)a2 + 1);
    char v9 = (unsigned char *)*((void *)a2 + 2);
    size_t v10 = v9 - v8;
    unint64_t v11 = (v9 - v8) >> 2;
    uint64_t v12 = *((void *)this + 3);
    char v13 = (char *)*((void *)this + 1);
    if (v11 <= (v12 - (uint64_t)v13) >> 2)
    {
      unint64_t v16 = (void **)((char *)this + 16);
      BOOL v18 = (unsigned char *)*((void *)this + 2);
      unint64_t v19 = (v18 - v13) >> 2;
      if (v19 < v11)
      {
        unint64_t v20 = &v8[4 * v19];
        if (v18 != v13)
        {
          memmove(*((void **)this + 1), v8, v18 - v13);
          char v13 = (char *)*v16;
        }
        size_t v10 = v9 - v20;
        if (v9 == v20) {
          goto LABEL_33;
        }
        uint64_t v21 = v13;
        char v22 = v20;
        goto LABEL_32;
      }
    }
    else
    {
      if (v13)
      {
        *((void *)this + 2) = v13;
        operator delete(v13);
        uint64_t v12 = 0;
        *unint64_t v3 = 0;
        v3[1] = 0;
        v3[2] = 0;
      }
      if ((v10 & 0x8000000000000000) != 0) {
        goto LABEL_35;
      }
      uint64_t v14 = v12 >> 1;
      if (v12 >> 1 <= v11) {
        uint64_t v14 = (v9 - v8) >> 2;
      }
      unint64_t v15 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v14;
      if (v15 >> 62) {
LABEL_35:
      }
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      char v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v15);
      *((void *)this + 2) = v13;
      unint64_t v16 = (void **)((char *)this + 16);
      *((void *)this + 1) = v13;
      *((void *)this + 3) = &v13[4 * v17];
    }
    if (v9 == v8)
    {
LABEL_33:
      *unint64_t v16 = &v13[v10];
      return this;
    }
    uint64_t v21 = v13;
    char v22 = v8;
LABEL_32:
    memmove(v21, v22, v10);
    goto LABEL_33;
  }
  return this;
}

uint64_t sirinluexternal::Span::operator=(uint64_t a1, const sirinluexternal::Span *a2)
{
  if ((const sirinluexternal::Span *)a1 != a2)
  {
    sirinluexternal::Span::Span((sirinluexternal::Span *)&v11, a2);
    int v3 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v18;
    int v18 = v3;
    uint64_t v4 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v14;
    uint64_t v14 = v4;
    uint64_t v5 = *(void *)(a1 + 64);
    *(void *)(a1 + 64) = v17;
    uint64_t v17 = v5;
    uint64_t v6 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = v16;
    uint64_t v16 = v6;
    uint64_t v7 = *(void *)(a1 + 48);
    *(void *)(a1 + 48) = v15;
    uint64_t v15 = v7;
    long long v8 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v12;
    long long v12 = v8;
    long long v9 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v13;
    long long v13 = v9;
    sirinluexternal::Span::~Span((sirinluexternal::Span *)&v11);
  }
  return a1;
}

double sirinluexternal::swap(sirinluexternal *this, sirinluexternal::Span *a2, sirinluexternal::Span *a3)
{
  int v3 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v3;
  uint64_t v4 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v4;
  uint64_t v5 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v5;
  LODWORD(v5) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v5;
  LODWORD(v5) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v5;
  uint64_t v6 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v6;
  double result = *((double *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((double *)a2 + 6) = result;
  uint64_t v8 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v8;
  uint64_t v9 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v9;
  uint64_t v10 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v10;
  return result;
}

uint64_t sirinluexternal::Span::Span(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F232C008;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v4 = (void *)(a1 + 8);
  *(void *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a2 + 72) = 0;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  uint64_t v6 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v5;
  if (v6) {
    std::default_delete<std::string>::operator()[abi:ne180100](v6);
  }
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  uint64_t v8 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v7;
  if (v8) {
    std::default_delete<std::string>::operator()[abi:ne180100](v8);
  }
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  uint64_t v9 = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = 0;
  uint64_t v10 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v9;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v11 = *(void **)(a1 + 8);
  if (v11)
  {
    *(void *)(a1 + 16) = v11;
    operator delete(v11);
    *uint64_t v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

uint64_t sirinluexternal::Span::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sirinluexternal::Span::Span((uint64_t)&v11, a2);
    int v3 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v18;
    int v18 = v3;
    uint64_t v4 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v14;
    uint64_t v14 = v4;
    uint64_t v5 = *(void *)(a1 + 64);
    *(void *)(a1 + 64) = v17;
    uint64_t v17 = v5;
    uint64_t v6 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = v16;
    uint64_t v16 = v6;
    uint64_t v7 = *(void *)(a1 + 48);
    *(void *)(a1 + 48) = v15;
    uint64_t v15 = v7;
    long long v8 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v12;
    long long v12 = v8;
    long long v9 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v13;
    long long v13 = v9;
    sirinluexternal::Span::~Span((sirinluexternal::Span *)&v11);
  }
  return a1;
}

BOOL sirinluexternal::Span::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned __int8 **)(a1 + 40);
  uint64_t v5 = *(unsigned __int8 ***)(a2 + 40);
  if (v4)
  {
    if (!v5) {
      return 0;
    }
    uint64_t v6 = v4[23];
    if ((v6 & 0x80u) == 0) {
      uint64_t v7 = (unsigned __int8 *)v4[23];
    }
    else {
      uint64_t v7 = (unsigned __int8 *)*((void *)v4 + 1);
    }
    long long v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    int v9 = (char)v8;
    if ((char)v8 < 0) {
      long long v8 = v5[1];
    }
    if (v7 != v8) {
      return 0;
    }
    if (v9 >= 0) {
      uint64_t v10 = *(unsigned __int8 **)(a2 + 40);
    }
    else {
      uint64_t v10 = *v5;
    }
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v10, *((void *)v4 + 1))) {
        return 0;
      }
    }
    else if (v4[23])
    {
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6) {
          goto LABEL_18;
        }
      }
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
LABEL_18:
  uint64_t v11 = *(unsigned __int8 **)(a1 + 32);
  long long v12 = *(unsigned __int8 ***)(a2 + 32);
  if (v11)
  {
    if (!v12) {
      return 0;
    }
    uint64_t v13 = v11[23];
    if ((v13 & 0x80u) == 0) {
      uint64_t v14 = (unsigned __int8 *)v11[23];
    }
    else {
      uint64_t v14 = (unsigned __int8 *)*((void *)v11 + 1);
    }
    uint64_t v15 = (unsigned __int8 *)*((unsigned __int8 *)v12 + 23);
    int v16 = (char)v15;
    if ((char)v15 < 0) {
      uint64_t v15 = v12[1];
    }
    if (v14 != v15) {
      return 0;
    }
    if (v16 >= 0) {
      uint64_t v17 = *(unsigned __int8 **)(a2 + 32);
    }
    else {
      uint64_t v17 = *v12;
    }
    if ((v13 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v11, v17, *((void *)v11 + 1))) {
        return 0;
      }
    }
    else if (v11[23])
    {
      while (*v11 == *v17)
      {
        ++v11;
        ++v17;
        if (!--v13) {
          goto LABEL_35;
        }
      }
      return 0;
    }
  }
  else if (v12)
  {
    return 0;
  }
LABEL_35:
  char v18 = *(unsigned char *)(a1 + 72);
  char v19 = *(unsigned char *)(a2 + 72);
  if ((v18 & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 72) & 4) == 0 || *(_DWORD *)(a1 + 68) != *(_DWORD *)(a2 + 68)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 72) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 72) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 72) & 2) == 0 || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 72) & 2) != 0)
  {
    return 0;
  }
  unint64_t v20 = *(void **)(a1 + 56);
  uint64_t v21 = *(void **)(a2 + 56);
  if (v20)
  {
    if (!v21 || (sirinluexternal::UsoGraph::operator==(v20, v21) & 1) == 0) {
      return 0;
    }
  }
  else if (v21)
  {
    return 0;
  }
  if (v18)
  {
    if ((v19 & 1) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48)) {
      return 0;
    }
  }
  else if (v19)
  {
    return 0;
  }
  uint64_t v23 = *(void *)(a1 + 8);
  uint64_t v22 = *(void *)(a1 + 16);
  uint64_t v24 = *(int **)(a2 + 8);
  if (v22 - v23 != *(void *)(a2 + 16) - (void)v24) {
    return 0;
  }
  if (v23 == v22) {
    return 1;
  }
  uint64_t v25 = v23 + 4;
  do
  {
    int v26 = *v24++;
    BOOL result = *(_DWORD *)(v25 - 4) == v26;
    BOOL v28 = *(_DWORD *)(v25 - 4) != v26 || v25 == v22;
    v25 += 4;
  }
  while (!v28);
  return result;
}

unint64_t sirinluexternal::Span::hash_value(sirinluexternal::Span *this)
{
  uint64_t v2 = *((void *)this + 5);
  if (v2) {
    unint64_t v3 = std::__string_hash<char>::operator()[abi:ne180100](v2);
  }
  else {
    unint64_t v3 = 0;
  }
  uint64_t v4 = *((void *)this + 4);
  if (v4) {
    unint64_t v5 = std::__string_hash<char>::operator()[abi:ne180100](v4);
  }
  else {
    unint64_t v5 = 0;
  }
  char v6 = *((unsigned char *)this + 72);
  if ((v6 & 4) != 0)
  {
    uint64_t v7 = *((unsigned int *)this + 17);
    if ((*((unsigned char *)this + 72) & 2) != 0) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v7 = 0;
    if ((*((unsigned char *)this + 72) & 2) != 0)
    {
LABEL_9:
      uint64_t v8 = *((unsigned int *)this + 16);
      goto LABEL_12;
    }
  }
  uint64_t v8 = 0;
LABEL_12:
  unint64_t v9 = *((void *)this + 7);
  if (v9)
  {
    unint64_t v9 = sirinluexternal::UsoGraph::hash_value((sirinluexternal::UsoGraph *)v9);
    char v6 = *((unsigned char *)this + 72);
  }
  if (v6)
  {
    double v10 = *((double *)this + 6);
    if (v10 == 0.0) {
      double v10 = 0.0;
    }
  }
  else
  {
    double v10 = 0.0;
  }
  return v5 ^ v3 ^ v7 ^ v8 ^ v9 ^ *(void *)&v10 ^ PBHashBytes();
}

uint64_t sirinluexternal::Span::makeUsoGraph(uint64_t this)
{
  if (!*(void *)(this + 56)) {
    operator new();
  }
  return this;
}

BOOL SIRINLUINTERNALOVERRIDESOverridesRequestReadFrom(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  unint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v17 = PBReaderReadString();
        char v18 = *(SIRINLUINTERNALTokenChain **)(a1 + 48);
        *(void *)(a1 + 48) = v17;
        goto LABEL_37;
      case 2u:
        char v18 = objc_alloc_init(SIRINLUINTERNALTokenChain);
        objc_storeStrong((id *)(a1 + 32), v18);
        if (!PBReaderPlaceMark() || !SIRINLUINTERNALTokenChainReadFrom((char *)v18, a2)) {
          goto LABEL_41;
        }
        goto LABEL_36;
      case 3u:
        char v18 = objc_alloc_init(SIRINLUINTERNALMatchingSpan);
        [(id)a1 addMatchingSpans:v18];
        if (!PBReaderPlaceMark() || (SIRINLUINTERNALMatchingSpanReadFrom((uint64_t)v18, a2) & 1) == 0) {
          goto LABEL_41;
        }
        goto LABEL_36;
      case 4u:
        char v18 = objc_alloc_init(SIRINLUEXTERNALSystemDialogAct);
        [(id)a1 addSystemDialogActs:v18];
        if (!PBReaderPlaceMark()
          || !SIRINLUEXTERNALSystemDialogActReadFrom((id *)&v18->super.super.isa, a2))
        {
          goto LABEL_41;
        }
        goto LABEL_36;
      case 5u:
        char v18 = objc_alloc_init(SIRINLUEXTERNALTurnContext);
        objc_storeStrong((id *)(a1 + 40), v18);
        if (!PBReaderPlaceMark() || !SIRINLUEXTERNALTurnContextReadFrom((uint64_t)v18, a2)) {
          goto LABEL_41;
        }
        goto LABEL_36;
      case 6u:
        char v18 = objc_alloc_init(SIRINLUINTERNALOVERRIDESTurnInputAndPreprocessing);
        [(id)a1 addInputs:v18];
        if (PBReaderPlaceMark()
          && SIRINLUINTERNALOVERRIDESTurnInputAndPreprocessingReadFrom((uint64_t)v18, a2))
        {
LABEL_36:
          PBReaderRecallMark();
LABEL_37:

LABEL_38:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_41:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_38;
    }
  }
}

uint64_t SIRINLUINTERNALUtteranceRuleReadFrom(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  unint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v17 = PBReaderReadString();
        char v18 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v17;

        goto LABEL_39;
      case 2u:
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v22 = 0;
        *(unsigned char *)(a1 + 36) |= 1u;
        while (2)
        {
          uint64_t v23 = *v3;
          unint64_t v24 = *(void *)(a2 + v23);
          if (v24 == -1 || v24 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v25 = *(unsigned char *)(*(void *)(a2 + *v7) + v24);
            *(void *)(a2 + v23) = v24 + 1;
            v22 |= (unint64_t)(v25 & 0x7F) << v20;
            if (v25 < 0)
            {
              v20 += 7;
              BOOL v14 = v21++ >= 9;
              if (v14)
              {
                LODWORD(v22) = 0;
                goto LABEL_38;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v22) = 0;
        }
LABEL_38:
        *(_DWORD *)(a1 + 32) = v22;
        goto LABEL_39;
      case 3u:
        int v26 = objc_alloc_init(SIRINLUINTERNALCompareOptions);
        objc_storeStrong((id *)(a1 + 8), v26);
        if (!PBReaderPlaceMark() || !SIRINLUINTERNALCompareOptionsReadFrom((uint64_t)v26, a2)) {
          goto LABEL_41;
        }
        goto LABEL_34;
      case 4u:
        int v26 = objc_alloc_init(SIRINLUINTERNALAdjacentSpans);
        [(id)a1 addSpansForNamedCaptureGroups:v26];
        if (PBReaderPlaceMark() && SIRINLUINTERNALAdjacentSpansReadFrom(v26, a2))
        {
LABEL_34:
          PBReaderRecallMark();

LABEL_39:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_41:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_39;
    }
  }
}

uint64_t SIRINLUEXTERNALNLU_ROUTERNLRouterServiceResponseReadFrom(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  unint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 44) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_51;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_53;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_51:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v19) = 0;
        }
LABEL_53:
        uint64_t v35 = 24;
        goto LABEL_62;
      case 2u:
        char v24 = 0;
        unsigned int v25 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 44) |= 4u;
        while (2)
        {
          uint64_t v26 = *v3;
          unint64_t v27 = *(void *)(a2 + v26);
          if (v27 == -1 || v27 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v27);
            *(void *)(a2 + v26) = v27 + 1;
            v19 |= (unint64_t)(v28 & 0x7F) << v24;
            if (v28 < 0)
            {
              v24 += 7;
              BOOL v14 = v25++ >= 9;
              if (v14)
              {
                LODWORD(v19) = 0;
                goto LABEL_57;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v19) = 0;
        }
LABEL_57:
        uint64_t v35 = 40;
        goto LABEL_62;
      case 3u:
        uint64_t v29 = objc_alloc_init(SIRINLUEXTERNALNLU_ROUTERNLRouterRewriteUtterance);
        [(id)a1 addSiriXRewriteUtterances:v29];
        goto LABEL_37;
      case 4u:
        uint64_t v29 = objc_alloc_init(SIRINLUEXTERNALNLU_ROUTERNLRouterRewriteUtterance);
        [(id)a1 addQueryRewrites:v29];
LABEL_37:
        if (!PBReaderPlaceMark()
          || (SIRINLUEXTERNALNLU_ROUTERNLRouterRewriteUtteranceReadFrom((uint64_t)v29, a2) & 1) == 0)
        {
          goto LABEL_65;
        }
        goto LABEL_49;
      case 5u:
        char v30 = 0;
        unsigned int v31 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 44) |= 2u;
        while (2)
        {
          uint64_t v32 = *v3;
          unint64_t v33 = *(void *)(a2 + v32);
          if (v33 == -1 || v33 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
            *(void *)(a2 + v32) = v33 + 1;
            v19 |= (unint64_t)(v34 & 0x7F) << v30;
            if (v34 < 0)
            {
              v30 += 7;
              BOOL v14 = v31++ >= 9;
              if (v14)
              {
                LODWORD(v19) = 0;
                goto LABEL_61;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v19) = 0;
        }
LABEL_61:
        uint64_t v35 = 28;
LABEL_62:
        *(_DWORD *)(a1 + v35) = v19;
        goto LABEL_63;
      case 6u:
        uint64_t v29 = objc_alloc_init(SIRINLUEXTERNALNLU_ROUTERNLRoutingGenAIMetadata);
        objc_storeStrong((id *)(a1 + 8), v29);
        if (PBReaderPlaceMark()
          && SIRINLUEXTERNALNLU_ROUTERNLRoutingGenAIMetadataReadFrom((uint64_t)v29, a2))
        {
LABEL_49:
          PBReaderRecallMark();

LABEL_63:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_65:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_63;
    }
  }
}

uint64_t sirinluinternal::ParseOverride::formatText(sirinluinternal::ParseOverride *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 72);
  if (v5)
  {
    PB::TextFormatter::format(a2, "creation_timestamp_ms_since_unix_epoch");
    char v5 = *((unsigned char *)this + 72);
  }
  if ((v5 & 4) != 0) {
    PB::TextFormatter::format(a2, "enabled");
  }
  if (*((void *)this + 2)) {
    PB::TextFormatter::format();
  }
  char v6 = (uint64_t *)*((void *)this + 3);
  uint64_t v7 = (uint64_t *)*((void *)this + 4);
  while (v6 != v7)
  {
    uint64_t v8 = *v6++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v8 + 32))(v8, a2, "nlu_request_rules");
  }
  uint64_t v9 = *((void *)this + 6);
  if (v9) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v9 + 32))(v9, a2, "parse");
  }
  if ((*((unsigned char *)this + 72) & 2) != 0) {
    PB::TextFormatter::format(a2, "parser_identifier");
  }
  if (*((void *)this + 7)) {
    PB::TextFormatter::format();
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluinternal::ParseOverride::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if (*(void *)(this + 16)) {
    this = PB::Writer::write();
  }
  char v4 = *(unsigned char *)(v3 + 72);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2);
    char v4 = *(unsigned char *)(v3 + 72);
    if ((v4 & 1) == 0)
    {
LABEL_5:
      if ((v4 & 2) == 0) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
  }
  else if ((*(unsigned char *)(v3 + 72) & 1) == 0)
  {
    goto LABEL_5;
  }
  this = PB::Writer::writeVarInt(a2);
  if ((*(unsigned char *)(v3 + 72) & 2) != 0) {
LABEL_6:
  }
    this = PB::Writer::writeVarInt(a2);
LABEL_7:
  char v5 = *(const PB::Base **)(v3 + 48);
  if (v5) {
    this = PB::Writer::writeSubmessage(a2, v5);
  }
  char v6 = *(const PB::Base ***)(v3 + 24);
  uint64_t v7 = *(const PB::Base ***)(v3 + 32);
  while (v6 != v7)
  {
    uint64_t v8 = *v6++;
    this = PB::Writer::writeSubmessage(a2, v8);
  }
  if (*(void *)(v3 + 56))
  {
    return PB::Writer::write();
  }
  return this;
}

uint64_t sirinluinternal::ParseOverride::readFrom(sirinluinternal::ParseOverride *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_25;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      goto LABEL_20;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_25:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        operator new();
      case 2u:
        *((unsigned char *)this + 72) |= 4u;
        unint64_t v21 = *((void *)a2 + 1);
        if (v21 >= *((void *)a2 + 2))
        {
          BOOL v24 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          unint64_t v22 = v21 + 1;
          int v23 = *(unsigned __int8 *)(*(void *)a2 + v21);
          *((void *)a2 + 1) = v22;
          BOOL v24 = v23 != 0;
        }
        *((unsigned char *)this + 68) = v24;
        goto LABEL_20;
      case 3u:
        *((unsigned char *)this + 72) |= 1u;
        unint64_t v25 = *((void *)a2 + 1);
        unint64_t v26 = *((void *)a2 + 2);
        uint64_t v27 = *(void *)a2;
        if (v25 <= 0xFFFFFFFFFFFFFFF5 && v25 + 10 <= v26)
        {
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v30 = 0;
          do
          {
            unint64_t v31 = v25 + 1;
            *((void *)a2 + 1) = v25 + 1;
            char v32 = *(unsigned char *)(v27 + v25);
            v30 |= (unint64_t)(v32 & 0x7F) << v28;
            if ((v32 & 0x80) == 0) {
              goto LABEL_66;
            }
            v28 += 7;
            unint64_t v25 = v31;
            BOOL v14 = v29++ > 8;
          }
          while (!v14);
LABEL_55:
          uint64_t v30 = 0;
          goto LABEL_66;
        }
        char v41 = 0;
        unsigned int v42 = 0;
        uint64_t v30 = 0;
        if (v26 <= v25) {
          unint64_t v26 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v26 == v25)
          {
            uint64_t v30 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v43 = v25 + 1;
            char v44 = *(unsigned char *)(v27 + v25);
            *((void *)a2 + 1) = v43;
            v30 |= (unint64_t)(v44 & 0x7F) << v41;
            if (v44 < 0)
            {
              v41 += 7;
              unint64_t v25 = v43;
              BOOL v14 = v42++ > 8;
              if (v14) {
                goto LABEL_55;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v30 = 0;
            }
          }
          break;
        }
LABEL_66:
        *((void *)this + 1) = v30;
        goto LABEL_20;
      case 4u:
        *((unsigned char *)this + 72) |= 2u;
        unint64_t v33 = *((void *)a2 + 1);
        unint64_t v34 = *((void *)a2 + 2);
        uint64_t v35 = *(void *)a2;
        if (v33 <= 0xFFFFFFFFFFFFFFF5 && v33 + 10 <= v34)
        {
          char v36 = 0;
          unsigned int v37 = 0;
          uint64_t v38 = 0;
          do
          {
            unint64_t v39 = v33 + 1;
            *((void *)a2 + 1) = v33 + 1;
            char v40 = *(unsigned char *)(v35 + v33);
            v38 |= (unint64_t)(v40 & 0x7F) << v36;
            if ((v40 & 0x80) == 0) {
              goto LABEL_70;
            }
            v36 += 7;
            unint64_t v33 = v39;
            BOOL v14 = v37++ > 8;
          }
          while (!v14);
LABEL_62:
          LODWORD(v38) = 0;
          goto LABEL_70;
        }
        char v45 = 0;
        unsigned int v46 = 0;
        uint64_t v38 = 0;
        if (v34 <= v33) {
          unint64_t v34 = *((void *)a2 + 1);
        }
        break;
      case 6u:
        operator new();
      case 7u:
        PB::PtrVector<sirinluinternal::NluRequestRule>::emplace_back<>();
      case 8u:
        operator new();
      default:
        goto LABEL_19;
    }
    while (1)
    {
      if (v34 == v33)
      {
        LODWORD(v38) = 0;
        *((unsigned char *)a2 + 24) = 1;
        goto LABEL_70;
      }
      unint64_t v47 = v33 + 1;
      char v48 = *(unsigned char *)(v35 + v33);
      *((void *)a2 + 1) = v47;
      v38 |= (unint64_t)(v48 & 0x7F) << v45;
      if ((v48 & 0x80) == 0) {
        break;
      }
      v45 += 7;
      unint64_t v33 = v47;
      BOOL v14 = v46++ > 8;
      if (v14) {
        goto LABEL_62;
      }
    }
    if (*((unsigned char *)a2 + 24)) {
      LODWORD(v38) = 0;
    }
LABEL_70:
    *((_DWORD *)this + 16) = v38;
LABEL_20:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

void PB::PtrVector<sirinluinternal::NluRequestRule>::emplace_back<>()
{
}

void sub_1C8AF22F0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sirinluinternal::ParseOverride::~ParseOverride(void ***this)
{
  sirinluinternal::ParseOverride::~ParseOverride(this);
  JUMPOUT(0x1CB772580);
}

{
  void **v2;
  uint64_t v3;
  void **v4;
  uint64_t vars8;

  *this = (void **)&unk_1F232C058;
  std::unique_ptr<PB::Data>::reset[abi:ne180100](this + 7, 0);
  unint64_t v2 = this[6];
  this[6] = 0;
  if (v2) {
    (*((void (**)(void **))*v2 + 1))(v2);
  }
  int v4 = (void **)(this + 3);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v4);
  unint64_t v3 = (uint64_t)this[2];
  this[2] = 0;
  if (v3) {
    std::default_delete<std::string>::operator()[abi:ne180100](v3);
  }
  PB::Base::~Base((PB::Base *)this);
}

double sirinluinternal::ParseOverride::ParseOverride(sirinluinternal::ParseOverride *this)
{
  *(void *)this = &unk_1F232C058;
  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_DWORD *)this + 16) = 1;
  *((unsigned char *)this + 68) = 1;
  *((_DWORD *)this + 18) = 0;
  return result;
}

{
  double result;

  *(void *)this = &unk_1F232C058;
  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_DWORD *)this + 16) = 1;
  *((unsigned char *)this + 68) = 1;
  *((_DWORD *)this + 18) = 0;
  return result;
}

uint64_t sirinluinternal::ParseOverride::ParseOverride(uint64_t this, const sirinluinternal::ParseOverride *a2)
{
  *(void *)this = &unk_1F232C058;
  *(_OWORD *)(this + 16) = 0u;
  *(_OWORD *)(this + 32) = 0u;
  *(_OWORD *)(this + 48) = 0u;
  *(_DWORD *)(this + 64) = 1;
  *(unsigned char *)(this + 68) = 1;
  *(_DWORD *)(this + 72) = 0;
  if (*((void *)a2 + 2)) {
    operator new();
  }
  char v2 = *((unsigned char *)a2 + 72);
  if ((v2 & 4) != 0)
  {
    char v4 = *((unsigned char *)a2 + 68);
    *(unsigned char *)(this + 72) |= 4u;
    *(unsigned char *)(this + 68) = v4;
    char v2 = *((unsigned char *)a2 + 72);
    if ((v2 & 1) == 0)
    {
LABEL_5:
      if ((v2 & 2) == 0) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
  }
  else if ((*((unsigned char *)a2 + 72) & 1) == 0)
  {
    goto LABEL_5;
  }
  uint64_t v5 = *((void *)a2 + 1);
  *(unsigned char *)(this + 72) |= 1u;
  *(void *)(this + 8) = v5;
  if ((*((unsigned char *)a2 + 72) & 2) != 0)
  {
LABEL_6:
    int v3 = *((_DWORD *)a2 + 16);
    *(unsigned char *)(this + 72) |= 2u;
    *(_DWORD *)(this + 64) = v3;
  }
LABEL_7:
  if (*((void *)a2 + 6)) {
    operator new();
  }
  if (*((void *)a2 + 3) != *((void *)a2 + 4)) {
    PB::PtrVector<sirinluinternal::NluRequestRule>::emplace_back<sirinluinternal::NluRequestRule const&>();
  }
  if (*((void *)a2 + 7)) {
    operator new();
  }
  return this;
}

void PB::PtrVector<sirinluinternal::NluRequestRule>::emplace_back<sirinluinternal::NluRequestRule const&>()
{
}

void sub_1C8AF2798(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sirinluinternal::ParseOverride::operator=(uint64_t a1, const sirinluinternal::ParseOverride *a2)
{
  if ((const sirinluinternal::ParseOverride *)a1 != a2)
  {
    sirinluinternal::ParseOverride::ParseOverride((uint64_t)&v10, a2);
    long long v3 = v13;
    long long v4 = *(_OWORD *)(a1 + 16);
    long long v5 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 16) = v12;
    *(_OWORD *)(a1 + 32) = v3;
    int v6 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v17;
    int v17 = v6;
    LOBYTE(v6) = *(unsigned char *)(a1 + 68);
    *(unsigned char *)(a1 + 68) = v16;
    char v16 = v6;
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v11;
    uint64_t v11 = v7;
    LODWORD(v7) = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v15;
    int v15 = v7;
    long long v12 = v4;
    long long v13 = v5;
    long long v8 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(a1 + 48) = v14;
    long long v14 = v8;
    sirinluinternal::ParseOverride::~ParseOverride(&v10);
  }
  return a1;
}

uint64_t sirinluinternal::swap(uint64_t this, sirinluinternal::ParseOverride *a2, sirinluinternal::ParseOverride *a3)
{
  int v3 = *(_DWORD *)(this + 72);
  *(_DWORD *)(this + 72) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v3;
  LOBYTE(v3) = *(unsigned char *)(this + 68);
  *(unsigned char *)(this + 68) = *((unsigned char *)a2 + 68);
  *((unsigned char *)a2 + 68) = v3;
  uint64_t v5 = *(void *)(this + 8);
  uint64_t v4 = *(void *)(this + 16);
  uint64_t v6 = *((void *)a2 + 2);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *(void *)(this + 16) = v6;
  *((void *)a2 + 1) = v5;
  *((void *)a2 + 2) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 64);
  *(_DWORD *)(this + 64) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v4;
  uint64_t v7 = *(void *)(this + 48);
  *(void *)(this + 48) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v7;
  uint64_t v8 = *(void *)(this + 24);
  *(void *)(this + 24) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v8;
  uint64_t v9 = *(void *)(this + 32);
  *(void *)(this + 32) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v9;
  uint64_t v10 = *(void *)(this + 40);
  *(void *)(this + 40) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v10;
  uint64_t v11 = *(void *)(this + 56);
  *(void *)(this + 56) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v11;
  return this;
}

uint64_t sirinluinternal::ParseOverride::ParseOverride(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F232C058;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 1;
  *(unsigned char *)(a1 + 68) = 1;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a2 + 72) = 0;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v4;
  if (v5) {
    std::default_delete<std::string>::operator()[abi:ne180100](v5);
  }
  *(unsigned char *)(a1 + 68) = *(unsigned char *)(a2 + 68);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  uint64_t v7 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate((void **)(a1 + 24));
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  uint64_t v8 = *(void ***)(a2 + 56);
  *(void *)(a2 + 56) = 0;
  std::unique_ptr<PB::Data>::reset[abi:ne180100]((void ***)(a1 + 56), v8);
  return a1;
}

uint64_t sirinluinternal::ParseOverride::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sirinluinternal::ParseOverride::ParseOverride((uint64_t)&v10, a2);
    long long v3 = v13;
    long long v4 = *(_OWORD *)(a1 + 16);
    long long v5 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 16) = v12;
    *(_OWORD *)(a1 + 32) = v3;
    int v6 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v17;
    int v17 = v6;
    LOBYTE(v6) = *(unsigned char *)(a1 + 68);
    *(unsigned char *)(a1 + 68) = v16;
    char v16 = v6;
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v11;
    uint64_t v11 = v7;
    LODWORD(v7) = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v15;
    int v15 = v7;
    long long v12 = v4;
    long long v13 = v5;
    long long v8 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(a1 + 48) = v14;
    long long v14 = v8;
    sirinluinternal::ParseOverride::~ParseOverride(&v10);
  }
  return a1;
}

uint64_t sirinluinternal::ParseOverride::operator==(uint64_t a1, uint64_t a2)
{
  long long v4 = *(unsigned __int8 **)(a1 + 16);
  long long v5 = *(unsigned __int8 ***)(a2 + 16);
  if (v4)
  {
    if (!v5) {
      return 0;
    }
    uint64_t v6 = v4[23];
    if ((v6 & 0x80u) == 0) {
      uint64_t v7 = (unsigned __int8 *)v4[23];
    }
    else {
      uint64_t v7 = (unsigned __int8 *)*((void *)v4 + 1);
    }
    long long v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    int v9 = (char)v8;
    if ((char)v8 < 0) {
      long long v8 = v5[1];
    }
    if (v7 != v8) {
      return 0;
    }
    if (v9 >= 0) {
      uint64_t v10 = *(unsigned __int8 **)(a2 + 16);
    }
    else {
      uint64_t v10 = *v5;
    }
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v10, *((void *)v4 + 1))) {
        return 0;
      }
    }
    else if (v4[23])
    {
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6) {
          goto LABEL_18;
        }
      }
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
LABEL_18:
  if ((*(unsigned char *)(a1 + 72) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 72) & 4) == 0 || *(unsigned __int8 *)(a1 + 68) != *(unsigned __int8 *)(a2 + 68)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 72) & 4) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 72))
  {
    if ((*(unsigned char *)(a2 + 72) & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 72))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 72) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 72) & 2) == 0 || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 72) & 2) != 0)
  {
    return 0;
  }
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a2 + 48);
  if (!v11)
  {
    if (!v12) {
      goto LABEL_42;
    }
    return 0;
  }
  if (!v12 || !sirinluexternal::UserParse::operator==(v11, v12)) {
    return 0;
  }
LABEL_42:
  uint64_t result = PB::PtrVector<sirinluinternal::NluRequestRule>::operator==((uint64_t *)(a1 + 24), *(void ***)(a2 + 24), *(void *)(a2 + 32));
  if (result)
  {
    if (!*(void *)(a1 + 56)) {
      return *(void *)(a2 + 56) == 0;
    }
    if (*(void *)(a2 + 56))
    {
      if (PB::Data::operator==()) {
        return 1;
      }
      if (!*(void *)(a1 + 56)) {
        return *(void *)(a2 + 56) == 0;
      }
    }
    return 0;
  }
  return result;
}

BOOL PB::PtrVector<sirinluinternal::NluRequestRule>::operator==(uint64_t *a1, void **a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (v4 - *a1 != a3 - (void)a2) {
    return 0;
  }
  if (v3 == v4) {
    return 1;
  }
  long long v5 = a2;
  uint64_t v6 = v3 + 8;
  do
  {
    uint64_t v7 = *v5++;
    BOOL result = sirinluinternal::NluRequestRule::operator==(*(void **)(v6 - 8), v7);
    BOOL v9 = !result || v6 == v4;
    v6 += 8;
  }
  while (!v9);
  return result;
}

unint64_t sirinluinternal::ParseOverride::hash_value(sirinluinternal::ParseOverride *this)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    unint64_t v3 = std::__string_hash<char>::operator()[abi:ne180100](v2);
  }
  else {
    unint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 72) & 4) == 0)
  {
    uint64_t v4 = 0;
    if (*((unsigned char *)this + 72)) {
      goto LABEL_6;
    }
LABEL_9:
    uint64_t v5 = 0;
    if ((*((unsigned char *)this + 72) & 2) != 0) {
      goto LABEL_7;
    }
    goto LABEL_10;
  }
  uint64_t v4 = *((unsigned __int8 *)this + 68);
  if ((*((unsigned char *)this + 72) & 1) == 0) {
    goto LABEL_9;
  }
LABEL_6:
  uint64_t v5 = *((void *)this + 1);
  if ((*((unsigned char *)this + 72) & 2) != 0)
  {
LABEL_7:
    uint64_t v6 = *((int *)this + 16);
    goto LABEL_11;
  }
LABEL_10:
  uint64_t v6 = 0;
LABEL_11:
  uint64_t v7 = (sirinluexternal::UserParse *)*((void *)this + 6);
  if (v7) {
    unint64_t v8 = sirinluexternal::UserParse::hash_value(v7);
  }
  else {
    unint64_t v8 = 0;
  }
  BOOL v9 = (sirinluinternal::NluRequestRule **)*((void *)this + 3);
  uint64_t v10 = (sirinluinternal::NluRequestRule **)*((void *)this + 4);
  if (v9 == v10)
  {
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = *v9++;
      v11 ^= sirinluinternal::NluRequestRule::hash_value(v12);
    }
    while (v9 != v10);
  }
  if (*((void *)this + 7)) {
    uint64_t v13 = PBHashBytes();
  }
  else {
    uint64_t v13 = 0;
  }
  return v4 ^ v3 ^ v5 ^ v6 ^ v13 ^ v8 ^ v11;
}

uint64_t sirinluinternal::ParseOverride::makeParse(uint64_t this)
{
  if (!*(void *)(this + 48)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternalembedding::EmbeddingRequest::formatText(sirinluinternalembedding::EmbeddingRequest *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((void *)this + 1)) {
    PB::TextFormatter::format();
  }
  uint64_t v5 = *((void *)this + 2);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "token_chain");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluinternalembedding::EmbeddingRequest::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if (*(void *)(this + 8)) {
    this = PB::Writer::write();
  }
  uint64_t v4 = *(const PB::Base **)(v3 + 16);
  if (v4)
  {
    return PB::Writer::writeSubmessage(a2, v4);
  }
  return this;
}

uint64_t sirinluinternalembedding::EmbeddingRequest::readFrom(sirinluinternalembedding::EmbeddingRequest *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_24;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 2) {
        operator new();
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_24:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_24;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluinternalembedding::EmbeddingRequest::~EmbeddingRequest(sirinluinternalembedding::EmbeddingRequest *this)
{
  sirinluinternalembedding::EmbeddingRequest::~EmbeddingRequest(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1F232C0A8;
  unint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    std::default_delete<std::string>::operator()[abi:ne180100](v3);
  }
  PB::Base::~Base(this);
}

void *sirinluinternalembedding::EmbeddingRequest::EmbeddingRequest(void *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1F232C0A8;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1F232C0A8;
  return this;
}

void *sirinluinternalembedding::EmbeddingRequest::EmbeddingRequest(void *this, const sirinluinternalembedding::EmbeddingRequest *a2)
{
  *this = &unk_1F232C0A8;
  this[1] = 0;
  this[2] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  if (*((void *)a2 + 2)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternalembedding::EmbeddingRequest::operator=(uint64_t a1, const sirinluinternalembedding::EmbeddingRequest *a2)
{
  if ((const sirinluinternalembedding::EmbeddingRequest *)a1 != a2)
  {
    sirinluinternalembedding::EmbeddingRequest::EmbeddingRequest(&v5, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    long long v6 = v3;
    sirinluinternalembedding::EmbeddingRequest::~EmbeddingRequest((sirinluinternalembedding::EmbeddingRequest *)&v5);
  }
  return a1;
}

uint64_t sirinluinternalembedding::swap(uint64_t this, sirinluinternalembedding::EmbeddingRequest *a2, sirinluinternalembedding::EmbeddingRequest *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  uint64_t v4 = *(void *)(this + 16);
  *(void *)(this + 16) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  return this;
}

void *sirinluinternalembedding::EmbeddingRequest::EmbeddingRequest(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F232C0A8;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v5 = a1[1];
  a1[1] = v4;
  if (v5) {
    std::default_delete<std::string>::operator()[abi:ne180100](v5);
  }
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  uint64_t v7 = a1[2];
  a1[2] = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  return a1;
}

uint64_t sirinluinternalembedding::EmbeddingRequest::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sirinluinternalembedding::EmbeddingRequest::EmbeddingRequest(&v5, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    long long v6 = v3;
    sirinluinternalembedding::EmbeddingRequest::~EmbeddingRequest((sirinluinternalembedding::EmbeddingRequest *)&v5);
  }
  return a1;
}

BOOL sirinluinternalembedding::EmbeddingRequest::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned __int8 **)(a1 + 8);
  uint64_t v5 = *(unsigned __int8 ***)(a2 + 8);
  if (!v4)
  {
    if (!v5) {
      goto LABEL_21;
    }
    return 0;
  }
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v4[23];
  if ((v6 & 0x80u) == 0) {
    uint64_t v7 = (unsigned __int8 *)v4[23];
  }
  else {
    uint64_t v7 = (unsigned __int8 *)*((void *)v4 + 1);
  }
  char v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
  int v9 = (char)v8;
  if ((char)v8 < 0) {
    char v8 = v5[1];
  }
  if (v7 != v8) {
    return 0;
  }
  if (v9 >= 0) {
    unint64_t v10 = *(unsigned __int8 **)(a2 + 8);
  }
  else {
    unint64_t v10 = *v5;
  }
  if ((v6 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)v4, v10, *((void *)v4 + 1))) {
      goto LABEL_21;
    }
    return 0;
  }
  if (v4[23])
  {
    while (*v4 == *v10)
    {
      ++v4;
      ++v10;
      if (!--v6) {
        goto LABEL_21;
      }
    }
    return 0;
  }
LABEL_21:
  uint64_t v12 = *(void *)(a1 + 16);
  unint64_t v13 = *(void *)(a2 + 16);
  BOOL result = (v12 | v13) == 0;
  if (v12) {
    BOOL v14 = v13 == 0;
  }
  else {
    BOOL v14 = 1;
  }
  if (!v14)
  {
    unsigned int v15 = *(void **)(a1 + 16);
    return sirinluinternal::TokenChain::operator==(v15, (void *)v13);
  }
  return result;
}

unint64_t sirinluinternalembedding::EmbeddingRequest::hash_value(sirinluinternalembedding::EmbeddingRequest *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    unint64_t v3 = std::__string_hash<char>::operator()[abi:ne180100](v2);
  }
  else {
    unint64_t v3 = 0;
  }
  unint64_t v4 = *((void *)this + 2);
  if (v4) {
    unint64_t v4 = sirinluinternal::TokenChain::hash_value((sirinluinternal::TokenChain *)v4);
  }
  return v4 ^ v3;
}

uint64_t sirinluinternalembedding::EmbeddingRequest::makeTokenChain(uint64_t this)
{
  if (!*(void *)(this + 16)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternalnlu_router::NLRouterServiceResponse::formatText(sirinluexternalnlu_router::NLRouterServiceResponse *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "gen_ai_metadata");
  }
  uint64_t v6 = (uint64_t *)*((void *)this + 2);
  uint64_t v7 = (uint64_t *)*((void *)this + 3);
  while (v6 != v7)
  {
    uint64_t v8 = *v6++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v8 + 32))(v8, a2, "query_rewrites");
  }
  char v9 = *((unsigned char *)this + 76);
  if ((v9 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "routingDecisionSource");
    char v9 = *((unsigned char *)this + 76);
  }
  if (v9) {
    PB::TextFormatter::format(a2, "routing_decision");
  }
  unint64_t v10 = (uint64_t *)*((void *)this + 5);
  unint64_t v11 = (uint64_t *)*((void *)this + 6);
  while (v10 != v11)
  {
    uint64_t v12 = *v10++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v12 + 32))(v12, a2, "siri_x_rewrite_utterances");
  }
  if ((*((unsigned char *)this + 76) & 4) != 0) {
    PB::TextFormatter::format(a2, "status");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluexternalnlu_router::NLRouterServiceResponse::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 76);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2);
    char v4 = *(unsigned char *)(v3 + 76);
  }
  if ((v4 & 4) != 0) {
    this = PB::Writer::writeVarInt(a2);
  }
  uint64_t v5 = *(const PB::Base ***)(v3 + 40);
  uint64_t v6 = *(const PB::Base ***)(v3 + 48);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    this = PB::Writer::writeSubmessage(a2, v7);
  }
  uint64_t v8 = *(const PB::Base ***)(v3 + 16);
  char v9 = *(const PB::Base ***)(v3 + 24);
  while (v8 != v9)
  {
    unint64_t v10 = *v8++;
    this = PB::Writer::writeSubmessage(a2, v10);
  }
  if ((*(unsigned char *)(v3 + 76) & 2) != 0) {
    this = PB::Writer::writeVarInt(a2);
  }
  unint64_t v11 = *(const PB::Base **)(v3 + 8);
  if (v11)
  {
    return PB::Writer::writeSubmessage(a2, v11);
  }
  return this;
}

uint64_t sirinluexternalnlu_router::NLRouterServiceResponse::readFrom(sirinluexternalnlu_router::NLRouterServiceResponse *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
      break;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      int v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 76) |= 1u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v21 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v20 <= 0xFFFFFFFFFFFFFFF5 && v20 + 10 <= v21)
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          do
          {
            unint64_t v26 = v20 + 1;
            *((void *)a2 + 1) = v20 + 1;
            char v27 = *(unsigned char *)(v22 + v20);
            v25 |= (unint64_t)(v27 & 0x7F) << v23;
            if ((v27 & 0x80) == 0) {
              goto LABEL_71;
            }
            v23 += 7;
            unint64_t v20 = v26;
            BOOL v14 = v24++ > 8;
          }
          while (!v14);
LABEL_53:
          LODWORD(v25) = 0;
          goto LABEL_71;
        }
        char v44 = 0;
        unsigned int v45 = 0;
        uint64_t v25 = 0;
        if (v21 <= v20) {
          unint64_t v21 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v21 == v20)
          {
            LODWORD(v25) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v46 = v20 + 1;
            char v47 = *(unsigned char *)(v22 + v20);
            *((void *)a2 + 1) = v46;
            v25 |= (unint64_t)(v47 & 0x7F) << v44;
            if (v47 < 0)
            {
              v44 += 7;
              unint64_t v20 = v46;
              BOOL v14 = v45++ > 8;
              if (v14) {
                goto LABEL_53;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v25) = 0;
            }
          }
          break;
        }
LABEL_71:
        *((_DWORD *)this + 16) = v25;
        goto LABEL_80;
      case 2u:
        *((unsigned char *)this + 76) |= 4u;
        unint64_t v28 = *((void *)a2 + 1);
        unint64_t v29 = *((void *)a2 + 2);
        uint64_t v30 = *(void *)a2;
        if (v28 <= 0xFFFFFFFFFFFFFFF5 && v28 + 10 <= v29)
        {
          char v31 = 0;
          unsigned int v32 = 0;
          uint64_t v33 = 0;
          do
          {
            unint64_t v34 = v28 + 1;
            *((void *)a2 + 1) = v28 + 1;
            char v35 = *(unsigned char *)(v30 + v28);
            v33 |= (unint64_t)(v35 & 0x7F) << v31;
            if ((v35 & 0x80) == 0) {
              goto LABEL_75;
            }
            v31 += 7;
            unint64_t v28 = v34;
            BOOL v14 = v32++ > 8;
          }
          while (!v14);
LABEL_60:
          LODWORD(v33) = 0;
          goto LABEL_75;
        }
        char v48 = 0;
        unsigned int v49 = 0;
        uint64_t v33 = 0;
        if (v29 <= v28) {
          unint64_t v29 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v29 == v28)
          {
            LODWORD(v33) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v50 = v28 + 1;
            char v51 = *(unsigned char *)(v30 + v28);
            *((void *)a2 + 1) = v50;
            v33 |= (unint64_t)(v51 & 0x7F) << v48;
            if (v51 < 0)
            {
              v48 += 7;
              unint64_t v28 = v50;
              BOOL v14 = v49++ > 8;
              if (v14) {
                goto LABEL_60;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v33) = 0;
            }
          }
          break;
        }
LABEL_75:
        *((_DWORD *)this + 18) = v33;
        goto LABEL_80;
      case 3u:
        PB::PtrVector<sirinluexternalnlu_router::NLRouterRewriteUtterance>::emplace_back<>();
      case 4u:
        PB::PtrVector<sirinluexternalnlu_router::NLRouterRewriteUtterance>::emplace_back<>();
      case 5u:
        *((unsigned char *)this + 76) |= 2u;
        unint64_t v36 = *((void *)a2 + 1);
        unint64_t v37 = *((void *)a2 + 2);
        uint64_t v38 = *(void *)a2;
        if (v36 <= 0xFFFFFFFFFFFFFFF5 && v36 + 10 <= v37)
        {
          char v39 = 0;
          unsigned int v40 = 0;
          uint64_t v41 = 0;
          do
          {
            unint64_t v42 = v36 + 1;
            *((void *)a2 + 1) = v36 + 1;
            char v43 = *(unsigned char *)(v38 + v36);
            v41 |= (unint64_t)(v43 & 0x7F) << v39;
            if ((v43 & 0x80) == 0) {
              goto LABEL_79;
            }
            v39 += 7;
            unint64_t v36 = v42;
            BOOL v14 = v40++ > 8;
          }
          while (!v14);
LABEL_67:
          LODWORD(v41) = 0;
          goto LABEL_79;
        }
        char v52 = 0;
        unsigned int v53 = 0;
        uint64_t v41 = 0;
        if (v37 <= v36) {
          unint64_t v37 = *((void *)a2 + 1);
        }
        break;
      case 6u:
        operator new();
      default:
        goto LABEL_19;
    }
    while (1)
    {
      if (v37 == v36)
      {
        LODWORD(v41) = 0;
        *((unsigned char *)a2 + 24) = 1;
        goto LABEL_79;
      }
      unint64_t v54 = v36 + 1;
      char v55 = *(unsigned char *)(v38 + v36);
      *((void *)a2 + 1) = v54;
      v41 |= (unint64_t)(v55 & 0x7F) << v52;
      if ((v55 & 0x80) == 0) {
        break;
      }
      v52 += 7;
      unint64_t v36 = v54;
      BOOL v14 = v53++ > 8;
      if (v14) {
        goto LABEL_67;
      }
    }
    if (*((unsigned char *)a2 + 24)) {
      LODWORD(v41) = 0;
    }
LABEL_79:
    *((_DWORD *)this + 17) = v41;
LABEL_80:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  char v15 = 0;
  unsigned int v16 = 0;
  unint64_t v11 = 0;
  if (v2 > v3) {
    unint64_t v3 = v2;
  }
  do
  {
    if (v3 == v2)
    {
      int v4 = 1;
      *((unsigned char *)a2 + 24) = 1;
      return v4 == 0;
    }
    unint64_t v17 = v2 + 1;
    char v18 = *(unsigned char *)(v8 + v2);
    *((void *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0) {
      goto LABEL_21;
    }
    v15 += 7;
    unint64_t v2 = v17;
    BOOL v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  uint64_t result = PB::Reader::skip(a2);
  if (result) {
    goto LABEL_80;
  }
  return result;
}

void PB::PtrVector<sirinluexternalnlu_router::NLRouterRewriteUtterance>::emplace_back<>()
{
}

void sub_1C8AF401C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sirinluexternalnlu_router::NLRouterServiceResponse::~NLRouterServiceResponse(sirinluexternalnlu_router::NLRouterServiceResponse *this)
{
  sirinluexternalnlu_router::NLRouterServiceResponse::~NLRouterServiceResponse(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  void **v3;
  uint64_t vars8;

  *(void *)this = &unk_1F232C0F8;
  unint64_t v3 = (void **)((char *)this + 40);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v3);
  unint64_t v3 = (void **)((char *)this + 16);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v3);
  unint64_t v2 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

double sirinluexternalnlu_router::NLRouterServiceResponse::NLRouterServiceResponse(sirinluexternalnlu_router::NLRouterServiceResponse *this)
{
  *(void *)this = &unk_1F232C0F8;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = 0;
  return result;
}

{
  double result;

  *(void *)this = &unk_1F232C0F8;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = 0;
  return result;
}

uint64_t sirinluexternalnlu_router::NLRouterServiceResponse::NLRouterServiceResponse(uint64_t this, const sirinluexternalnlu_router::NLRouterServiceResponse *a2)
{
  *(void *)this = &unk_1F232C0F8;
  *(_OWORD *)(this + 8) = 0u;
  *(_OWORD *)(this + 40) = 0u;
  *(_OWORD *)(this + 24) = 0u;
  *(_OWORD *)(this + 56) = 0u;
  *(void *)(this + 72) = 0;
  if (*((unsigned char *)a2 + 76))
  {
    int v3 = *((_DWORD *)a2 + 16);
    *(unsigned char *)(this + 76) = 1;
    *(_DWORD *)(this + 64) = v3;
    char v2 = 5;
    if ((*((unsigned char *)a2 + 76) & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v2 = 4;
  if ((*((unsigned char *)a2 + 76) & 4) != 0)
  {
LABEL_5:
    int v4 = *((_DWORD *)a2 + 18);
    *(unsigned char *)(this + 76) = v2;
    *(_DWORD *)(this + 72) = v4;
  }
LABEL_6:
  if (*((void *)a2 + 5) != *((void *)a2 + 6)) {
    PB::PtrVector<sirinluexternalnlu_router::NLRouterRewriteUtterance>::emplace_back<sirinluexternalnlu_router::NLRouterRewriteUtterance const&>();
  }
  if (*((void *)a2 + 2) != *((void *)a2 + 3)) {
    PB::PtrVector<sirinluexternalnlu_router::NLRouterRewriteUtterance>::emplace_back<sirinluexternalnlu_router::NLRouterRewriteUtterance const&>();
  }
  if ((*((unsigned char *)a2 + 76) & 2) != 0)
  {
    int v5 = *((_DWORD *)a2 + 17);
    *(unsigned char *)(this + 76) |= 2u;
    *(_DWORD *)(this + 68) = v5;
  }
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

void PB::PtrVector<sirinluexternalnlu_router::NLRouterRewriteUtterance>::emplace_back<sirinluexternalnlu_router::NLRouterRewriteUtterance const&>()
{
}

void sub_1C8AF4420(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sirinluexternalnlu_router::NLRouterServiceResponse::operator=(uint64_t a1, const sirinluexternalnlu_router::NLRouterServiceResponse *a2)
{
  if ((const sirinluexternalnlu_router::NLRouterServiceResponse *)a1 != a2)
  {
    sirinluexternalnlu_router::NLRouterServiceResponse::NLRouterServiceResponse((uint64_t)&v9, a2);
    long long v3 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    long long v12 = v3;
    uint64_t v4 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = v13;
    uint64_t v13 = v4;
    long long v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    long long v11 = v5;
    long long v6 = *(_OWORD *)(a1 + 64);
    *(_OWORD *)(a1 + 64) = v14;
    long long v14 = v6;
    long long v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v10 = v7;
    sirinluexternalnlu_router::NLRouterServiceResponse::~NLRouterServiceResponse((sirinluexternalnlu_router::NLRouterServiceResponse *)&v9);
  }
  return a1;
}

double sirinluexternalnlu_router::swap(sirinluexternalnlu_router *this, sirinluexternalnlu_router::NLRouterServiceResponse *a2, sirinluexternalnlu_router::NLRouterServiceResponse *a3)
{
  int v3 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v3;
  int v4 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v4;
  uint64_t v5 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v5;
  uint64_t v6 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v6;
  uint64_t v7 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v7;
  uint64_t v8 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v8;
  uint64_t v9 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v9;
  uint64_t v10 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v10;
  double result = *((double *)a2 + 8);
  uint64_t v12 = *((void *)this + 8);
  *((double *)this + 8) = result;
  *((void *)a2 + 8) = v12;
  uint64_t v13 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v13;
  return result;
}

uint64_t sirinluexternalnlu_router::NLRouterServiceResponse::NLRouterServiceResponse(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F232C0F8;
  int v4 = (void **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  uint64_t v5 = (_OWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a2 + 76) = 0;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate((void **)(a1 + 40));
  *uint64_t v5 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 40) = 0u;
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(v4);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a2 + 24) = 0u;
  int v6 = *(_DWORD *)(a2 + 68);
  uint64_t v7 = *(void *)(a2 + 8);
  *(_OWORD *)(a2 + 8) = 0u;
  *(_DWORD *)(a1 + 68) = v6;
  uint64_t v8 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  return a1;
}

uint64_t sirinluexternalnlu_router::NLRouterServiceResponse::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sirinluexternalnlu_router::NLRouterServiceResponse::NLRouterServiceResponse((uint64_t)&v9, a2);
    long long v3 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    long long v12 = v3;
    uint64_t v4 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = v13;
    uint64_t v13 = v4;
    long long v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    long long v11 = v5;
    long long v6 = *(_OWORD *)(a1 + 64);
    *(_OWORD *)(a1 + 64) = v14;
    long long v14 = v6;
    long long v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v10 = v7;
    sirinluexternalnlu_router::NLRouterServiceResponse::~NLRouterServiceResponse((sirinluexternalnlu_router::NLRouterServiceResponse *)&v9);
  }
  return a1;
}

BOOL sirinluexternalnlu_router::NLRouterServiceResponse::operator==(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a1 + 76);
  char v5 = *(unsigned char *)(a2 + 76);
  if (v4)
  {
    if ((*(unsigned char *)(a2 + 76) & 1) == 0 || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 76))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 76) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 76) & 4) == 0 || *(_DWORD *)(a1 + 72) != *(_DWORD *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 76) & 4) != 0)
  {
    return 0;
  }
  BOOL result = PB::PtrVector<sirinluexternalnlu_router::NLRouterRewriteUtterance>::operator==(*(void *)(a1 + 40), *(void *)(a1 + 48), *(uint64_t **)(a2 + 40), *(void *)(a2 + 48));
  if (result)
  {
    BOOL result = PB::PtrVector<sirinluexternalnlu_router::NLRouterRewriteUtterance>::operator==(*(void *)(a1 + 16), *(void *)(a1 + 24), *(uint64_t **)(a2 + 16), *(void *)(a2 + 24));
    if (result)
    {
      if ((v4 & 2) != 0)
      {
        if ((v5 & 2) == 0 || *(_DWORD *)(a1 + 68) != *(_DWORD *)(a2 + 68)) {
          return 0;
        }
      }
      else if ((v5 & 2) != 0)
      {
        return 0;
      }
      uint64_t v7 = *(void *)(a1 + 8);
      uint64_t v8 = *(void *)(a2 + 8);
      BOOL result = (v7 | v8) == 0;
      if (v7 && v8)
      {
        uint64_t v9 = *(void *)(a1 + 8);
        return sirinluexternalnlu_router::NLRoutingGenAIMetadata::operator==(v9, v8);
      }
    }
  }
  return result;
}

BOOL PB::PtrVector<sirinluexternalnlu_router::NLRouterRewriteUtterance>::operator==(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  if (a2 - a1 != a4 - (void)a3) {
    return 0;
  }
  if (a1 == a2) {
    return 1;
  }
  char v5 = a3;
  uint64_t v6 = a1 + 8;
  do
  {
    uint64_t v7 = *v5++;
    BOOL result = sirinluexternalnlu_router::NLRouterRewriteUtterance::operator==(*(void *)(v6 - 8), v7);
    BOOL v9 = !result || v6 == a2;
    v6 += 8;
  }
  while (!v9);
  return result;
}

uint64_t sirinluexternalnlu_router::NLRouterServiceResponse::hash_value(sirinluexternalnlu_router::NLRouterServiceResponse *this)
{
  char v2 = *((unsigned char *)this + 76);
  if (v2)
  {
    uint64_t v3 = *((int *)this + 16);
    if ((*((unsigned char *)this + 76) & 4) != 0) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 76) & 4) != 0)
    {
LABEL_3:
      uint64_t v4 = *((int *)this + 18);
      goto LABEL_6;
    }
  }
  uint64_t v4 = 0;
LABEL_6:
  char v5 = (sirinluexternalnlu_router::NLRouterRewriteUtterance **)*((void *)this + 5);
  uint64_t v6 = (sirinluexternalnlu_router::NLRouterRewriteUtterance **)*((void *)this + 6);
  if (v5 == v6)
  {
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = *v5++;
      v7 ^= sirinluexternalnlu_router::NLRouterRewriteUtterance::hash_value(v8);
    }
    while (v5 != v6);
  }
  BOOL v9 = (sirinluexternalnlu_router::NLRouterRewriteUtterance **)*((void *)this + 2);
  long long v10 = (sirinluexternalnlu_router::NLRouterRewriteUtterance **)*((void *)this + 3);
  if (v9 == v10)
  {
    uint64_t v11 = 0;
    if ((v2 & 2) == 0)
    {
LABEL_15:
      uint64_t v13 = 0;
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v11 = 0;
    do
    {
      long long v12 = *v9++;
      v11 ^= sirinluexternalnlu_router::NLRouterRewriteUtterance::hash_value(v12);
    }
    while (v9 != v10);
    if ((v2 & 2) == 0) {
      goto LABEL_15;
    }
  }
  uint64_t v13 = *((int *)this + 17);
LABEL_18:
  uint64_t v14 = *((void *)this + 1);
  if (v14)
  {
    if (*(unsigned char *)(v14 + 16))
    {
      uint64_t v15 = *(int *)(v14 + 8);
      if ((*(unsigned char *)(v14 + 16) & 2) != 0) {
        goto LABEL_21;
      }
    }
    else
    {
      uint64_t v15 = 0;
      if ((*(unsigned char *)(v14 + 16) & 2) != 0)
      {
LABEL_21:
        uint64_t v16 = *(int *)(v14 + 12);
LABEL_24:
        uint64_t v14 = v16 ^ v15;
        return v4 ^ v3 ^ v13 ^ v14 ^ v7 ^ v11;
      }
    }
    uint64_t v16 = 0;
    goto LABEL_24;
  }
  return v4 ^ v3 ^ v13 ^ v14 ^ v7 ^ v11;
}

uint64_t sirinluexternalnlu_router::NLRouterServiceResponse::makeGenAiMetadata(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternaltokenizer::TokenizerResponse::formatText(sirinluinternaltokenizer::TokenizerResponse *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "asrId");
  }
  if (*((void *)this + 2)) {
    PB::TextFormatter::format();
  }
  uint64_t v6 = *((void *)this + 3);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, a2, "token_chain");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluinternaltokenizer::TokenizerResponse::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *(const PB::Base **)(this + 24);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  if (*(void *)(v3 + 16)) {
    this = PB::Writer::write();
  }
  uint64_t v5 = *(const PB::Base **)(v3 + 8);
  if (v5)
  {
    return PB::Writer::writeSubmessage(a2, v5);
  }
  return this;
}

uint64_t sirinluinternaltokenizer::TokenizerResponse::readFrom(sirinluinternaltokenizer::TokenizerResponse *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_25;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v18 = v10 >> 3;
      if ((v10 >> 3) == 3) {
        operator new();
      }
      if (v18 == 2) {
        operator new();
      }
      if (v18 == 1) {
        operator new();
      }
LABEL_25:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_25;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluinternaltokenizer::TokenizerResponse::~TokenizerResponse(sirinluinternaltokenizer::TokenizerResponse *this)
{
  sirinluinternaltokenizer::TokenizerResponse::~TokenizerResponse(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)this = &unk_1F232C148;
  unint64_t v2 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    std::default_delete<std::string>::operator()[abi:ne180100](v3);
  }
  int v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  PB::Base::~Base(this);
}

void *sirinluinternaltokenizer::TokenizerResponse::TokenizerResponse(void *this)
{
  *this = &unk_1F232C148;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = &unk_1F232C148;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

void *sirinluinternaltokenizer::TokenizerResponse::TokenizerResponse(void *this, const sirinluinternaltokenizer::TokenizerResponse *a2)
{
  *this = &unk_1F232C148;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  if (*((void *)a2 + 3)) {
    operator new();
  }
  if (*((void *)a2 + 2)) {
    operator new();
  }
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternaltokenizer::TokenizerResponse::operator=(uint64_t a1, const sirinluinternaltokenizer::TokenizerResponse *a2)
{
  if ((const sirinluinternaltokenizer::TokenizerResponse *)a1 != a2)
  {
    sirinluinternaltokenizer::TokenizerResponse::TokenizerResponse(&v6, a2);
    uint64_t v3 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v8;
    uint64_t v8 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v4;
    sirinluinternaltokenizer::TokenizerResponse::~TokenizerResponse((sirinluinternaltokenizer::TokenizerResponse *)&v6);
  }
  return a1;
}

void *sirinluinternaltokenizer::swap(void *this, sirinluinternaltokenizer::TokenizerResponse *a2, sirinluinternaltokenizer::TokenizerResponse *a3)
{
  uint64_t v3 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v3;
  uint64_t v4 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  return this;
}

void *sirinluinternaltokenizer::TokenizerResponse::TokenizerResponse(void *a1, void *a2)
{
  *a1 = &unk_1F232C148;
  a1[1] = 0;
  uint64_t v4 = a1 + 1;
  a1[2] = 0;
  a1[3] = 0;
  uint64_t v5 = a2[3];
  a2[3] = 0;
  uint64_t v6 = a1[3];
  a1[3] = v5;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = a2[2];
  a2[2] = 0;
  uint64_t v8 = a1[2];
  a1[2] = v7;
  if (v8) {
    std::default_delete<std::string>::operator()[abi:ne180100](v8);
  }
  uint64_t v9 = a2[1];
  a2[1] = 0;
  uint64_t v10 = *v4;
  *uint64_t v4 = v9;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  return a1;
}

uint64_t sirinluinternaltokenizer::TokenizerResponse::operator=(uint64_t a1, void *a2)
{
  if ((void *)a1 != a2)
  {
    sirinluinternaltokenizer::TokenizerResponse::TokenizerResponse(&v6, a2);
    uint64_t v3 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v8;
    uint64_t v8 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v4;
    sirinluinternaltokenizer::TokenizerResponse::~TokenizerResponse((sirinluinternaltokenizer::TokenizerResponse *)&v6);
  }
  return a1;
}

BOOL sirinluinternaltokenizer::TokenizerResponse::operator==(void *a1, void *a2)
{
  long long v4 = (void *)a1[3];
  uint64_t v5 = (void *)a2[3];
  if (v4)
  {
    if (!v5 || !sirinluinternal::TokenChain::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  uint64_t v6 = (unsigned __int8 *)a1[2];
  long long v7 = (unsigned __int8 **)a2[2];
  if (!v6)
  {
    if (!v7) {
      goto LABEL_26;
    }
    return 0;
  }
  if (!v7) {
    return 0;
  }
  uint64_t v8 = v6[23];
  if ((v8 & 0x80u) == 0) {
    uint64_t v9 = (unsigned __int8 *)v6[23];
  }
  else {
    uint64_t v9 = (unsigned __int8 *)*((void *)v6 + 1);
  }
  uint64_t v10 = (unsigned __int8 *)*((unsigned __int8 *)v7 + 23);
  int v11 = (char)v10;
  if ((char)v10 < 0) {
    uint64_t v10 = v7[1];
  }
  if (v9 != v10) {
    return 0;
  }
  if (v11 >= 0) {
    char v12 = (unsigned __int8 *)a2[2];
  }
  else {
    char v12 = *v7;
  }
  if ((v8 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)v6, v12, *((void *)v6 + 1))) {
      goto LABEL_26;
    }
    return 0;
  }
  if (v6[23])
  {
    while (*v6 == *v12)
    {
      ++v6;
      ++v12;
      if (!--v8) {
        goto LABEL_26;
      }
    }
    return 0;
  }
LABEL_26:
  uint64_t v14 = a1[1];
  uint64_t v15 = a2[1];
  BOOL result = (v14 | v15) == 0;
  if (v14) {
    BOOL v16 = v15 == 0;
  }
  else {
    BOOL v16 = 1;
  }
  if (!v16)
  {
    uint64_t v17 = a1[1];
    return sirinluexternal::UUID::operator==(v17, v15);
  }
  return result;
}

unint64_t sirinluinternaltokenizer::TokenizerResponse::hash_value(sirinluinternaltokenizer::TokenizerResponse *this)
{
  unint64_t v2 = (sirinluinternal::TokenChain *)*((void *)this + 3);
  if (v2) {
    unint64_t v3 = sirinluinternal::TokenChain::hash_value(v2);
  }
  else {
    unint64_t v3 = 0;
  }
  unint64_t v4 = *((void *)this + 2);
  if (v4) {
    unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100](v4);
  }
  uint64_t v5 = *((void *)this + 1);
  if (v5)
  {
    if (*(unsigned char *)(v5 + 28))
    {
      uint64_t v6 = *(void *)(v5 + 8);
      if ((*(unsigned char *)(v5 + 28) & 2) != 0)
      {
LABEL_9:
        uint64_t v7 = *(void *)(v5 + 16);
        if ((*(unsigned char *)(v5 + 28) & 4) != 0)
        {
LABEL_10:
          uint64_t v8 = *(int *)(v5 + 24);
LABEL_14:
          uint64_t v5 = v7 ^ v6 ^ v8;
          return v4 ^ v3 ^ v5;
        }
LABEL_13:
        uint64_t v8 = 0;
        goto LABEL_14;
      }
    }
    else
    {
      uint64_t v6 = 0;
      if ((*(unsigned char *)(v5 + 28) & 2) != 0) {
        goto LABEL_9;
      }
    }
    uint64_t v7 = 0;
    if ((*(unsigned char *)(v5 + 28) & 4) != 0) {
      goto LABEL_10;
    }
    goto LABEL_13;
  }
  return v4 ^ v3 ^ v5;
}

uint64_t sirinluinternaltokenizer::TokenizerResponse::makeTokenChain(uint64_t this)
{
  if (!*(void *)(this + 24)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternaltokenizer::TokenizerResponse::makeAsrId(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

BOOL SIRINLUINTERNALPLAN_GENERATIONPlanGenerationResponseReadFrom(void *a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        uint64_t v17 = (SIRINLUINTERNALPLAN_GENERATIONVariableEventIdPair *)objc_claimAutoreleasedReturnValue();
        if (v17) {
          [a1 addPlans:v17];
        }
LABEL_25:

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_27:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v17 = objc_alloc_init(SIRINLUINTERNALPLAN_GENERATIONVariableEventIdPair);
    [a1 addMappings:v17];
    if (!PBReaderPlaceMark()
      || !SIRINLUINTERNALPLAN_GENERATIONVariableEventIdPairReadFrom((uint64_t)v17, a2))
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_25;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t SIRINLUINTERNALMentionDetectorSpanDataReadFrom(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        *(unsigned char *)(a1 + 16) |= 1u;
        uint64_t v18 = *v3;
        unint64_t v19 = *(void *)(a2 + v18);
        if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v20 = *(void *)(*(void *)(a2 + *v7) + v19);
          *(void *)(a2 + v18) = v19 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v20 = 0;
        }
        *(void *)(a1 + 8) = v20;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t SIRINLUINTERNALPSCPSCServiceResponseReadFrom(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        *(unsigned char *)(a1 + 12) |= 1u;
        uint64_t v18 = *v3;
        unint64_t v19 = *(void *)(a2 + v18);
        if (v19 <= 0xFFFFFFFFFFFFFFFBLL && v19 + 4 <= *(void *)(a2 + *v4))
        {
          int v20 = *(_DWORD *)(*(void *)(a2 + *v7) + v19);
          *(void *)(a2 + v18) = v19 + 4;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          int v20 = 0;
        }
        *(_DWORD *)(a1 + 8) = v20;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t SIRINLUEXTERNALUsoEdgeLabelReadFrom(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        unsigned int v24 = objc_alloc_init(SIRINLUEXTERNALUsoLabel);
        objc_storeStrong((id *)(a1 + 8), v24);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALUsoLabelReadFrom((uint64_t)v24, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        if (v17 == 2)
        {
          char v25 = 0;
          unsigned int v26 = 0;
          uint64_t v20 = 0;
          *(unsigned char *)(a1 + 24) |= 1u;
          while (1)
          {
            uint64_t v27 = *v3;
            unint64_t v28 = *(void *)(a2 + v27);
            if (v28 == -1 || v28 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
            *(void *)(a2 + v27) = v28 + 1;
            v20 |= (unint64_t)(v29 & 0x7F) << v25;
            if ((v29 & 0x80) == 0) {
              goto LABEL_45;
            }
            v25 += 7;
            BOOL v14 = v26++ >= 9;
            if (v14)
            {
              LODWORD(v20) = 0;
              goto LABEL_47;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_45:
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v20) = 0;
          }
LABEL_47:
          uint64_t v31 = 16;
        }
        else
        {
          if (v17 != 1)
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
            continue;
          }
          char v18 = 0;
          unsigned int v19 = 0;
          uint64_t v20 = 0;
          *(unsigned char *)(a1 + 24) |= 2u;
          while (1)
          {
            uint64_t v21 = *v3;
            unint64_t v22 = *(void *)(a2 + v21);
            if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
            *(void *)(a2 + v21) = v22 + 1;
            v20 |= (unint64_t)(v23 & 0x7F) << v18;
            if ((v23 & 0x80) == 0) {
              goto LABEL_41;
            }
            v18 += 7;
            BOOL v14 = v19++ >= 9;
            if (v14)
            {
              LODWORD(v20) = 0;
              goto LABEL_43;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_41:
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v20) = 0;
          }
LABEL_43:
          uint64_t v31 = 20;
        }
        *(_DWORD *)(a1 + v31) = v20;
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1C8AF83D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PB::Writer *a9)
{
  std::unique_ptr<PB::Writer>::reset[abi:ne180100](&a9);
  (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  _Unwind_Resume(a1);
}

PB::Writer *std::unique_ptr<PB::Writer>::reset[abi:ne180100](PB::Writer **a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    PB::Writer::~Writer(result);
    JUMPOUT(0x1CB772580);
  }
  return result;
}

uint64_t sirinluinternal::InternalSpanData::formatText(sirinluinternal::InternalSpanData *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "mention_detector_span_data");
  }
  uint64_t v6 = *((void *)this + 2);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, a2, "mention_resolver_span_data");
  }
  uint64_t v7 = *((void *)this + 3);
  if (v7) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "overton_kg_span_data");
  }
  uint64_t v8 = *((void *)this + 4);
  if (v8) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v8 + 32))(v8, a2, "plum_span_data");
  }
  uint64_t v9 = *((void *)this + 5);
  if (v9) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v9 + 32))(v9, a2, "siri_vocabulary_span_data");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluinternal::InternalSpanData::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v3 = (void *)this;
  unint64_t v4 = *(const PB::Base **)(this + 40);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  uint64_t v5 = (const PB::Base *)v3[4];
  if (v5) {
    this = PB::Writer::writeSubmessage(a2, v5);
  }
  uint64_t v6 = (const PB::Base *)v3[3];
  if (v6) {
    this = PB::Writer::writeSubmessage(a2, v6);
  }
  uint64_t v7 = (const PB::Base *)v3[1];
  if (v7) {
    this = PB::Writer::writeSubmessage(a2, v7);
  }
  uint64_t v8 = (const PB::Base *)v3[2];
  if (v8)
  {
    return PB::Writer::writeSubmessage(a2, v8);
  }
  return this;
}

uint64_t sirinluinternal::InternalSpanData::readFrom(sirinluinternal::InternalSpanData *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_19;
        }
      }
LABEL_21:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v10 >> 3))
      {
        case 1u:
          operator new();
        case 2u:
          operator new();
        case 3u:
          operator new();
        case 4u:
          operator new();
        case 5u:
          operator new();
        default:
          break;
      }
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_21;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_19;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluinternal::InternalSpanData::~InternalSpanData(sirinluinternal::InternalSpanData *this)
{
  sirinluinternal::InternalSpanData::~InternalSpanData(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t vars8;

  *(void *)this = &unk_1F232C198;
  unint64_t v2 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  PB::Base::~Base(this);
}

double sirinluinternal::InternalSpanData::InternalSpanData(sirinluinternal::InternalSpanData *this)
{
  *(void *)this = &unk_1F232C198;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 5) = 0;
  return result;
}

{
  double result;

  *(void *)this = &unk_1F232C198;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 5) = 0;
  return result;
}

uint64_t sirinluinternal::InternalSpanData::InternalSpanData(uint64_t this, const sirinluinternal::InternalSpanData *a2)
{
  *(void *)this = &unk_1F232C198;
  *(_OWORD *)(this + 8) = 0u;
  *(_OWORD *)(this + 24) = 0u;
  *(void *)(this + 40) = 0;
  if (*((void *)a2 + 5)) {
    operator new();
  }
  if (*((void *)a2 + 4)) {
    operator new();
  }
  if (*((void *)a2 + 3)) {
    operator new();
  }
  if (*((void *)a2 + 1)) {
    operator new();
  }
  if (*((void *)a2 + 2)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternal::InternalSpanData::operator=(uint64_t a1, const sirinluinternal::InternalSpanData *a2)
{
  if ((const sirinluinternal::InternalSpanData *)a1 != a2)
  {
    sirinluinternal::InternalSpanData::InternalSpanData((uint64_t)&v7, a2);
    uint64_t v3 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v10;
    uint64_t v10 = v3;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    long long v9 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v5;
    sirinluinternal::InternalSpanData::~InternalSpanData((sirinluinternal::InternalSpanData *)&v7);
  }
  return a1;
}

void *sirinluinternal::swap(void *this, sirinluinternal::InternalSpanData *a2, sirinluinternal::InternalSpanData *a3)
{
  uint64_t v3 = this[5];
  this[5] = *((void *)a2 + 5);
  *((void *)a2 + 5) = v3;
  uint64_t v4 = this[4];
  this[4] = *((void *)a2 + 4);
  *((void *)a2 + 4) = v4;
  uint64_t v5 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  uint64_t v6 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v6;
  uint64_t v7 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v7;
  return this;
}

uint64_t sirinluinternal::InternalSpanData::InternalSpanData(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1F232C198;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 40) = 0;
  uint64_t v5 = a2[5];
  a2[5] = 0;
  uint64_t v6 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v5;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = a2[4];
  a2[4] = 0;
  uint64_t v8 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v7;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = a2[3];
  a2[3] = 0;
  uint64_t v10 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v9;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = a2[1];
  a2[1] = 0;
  uint64_t v12 = *v4;
  *uint64_t v4 = v11;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = a2[2];
  a2[2] = 0;
  uint64_t v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v13;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  return a1;
}

uint64_t sirinluinternal::InternalSpanData::operator=(uint64_t a1, void *a2)
{
  if ((void *)a1 != a2)
  {
    sirinluinternal::InternalSpanData::InternalSpanData((uint64_t)&v7, a2);
    uint64_t v3 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v10;
    uint64_t v10 = v3;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    long long v9 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v5;
    sirinluinternal::InternalSpanData::~InternalSpanData((sirinluinternal::InternalSpanData *)&v7);
  }
  return a1;
}

BOOL sirinluinternal::InternalSpanData::operator==(void *a1, void *a2)
{
  uint64_t v4 = a1[5];
  uint64_t v5 = a2[5];
  if (v4)
  {
    if (!v5 || !sirinluinternal::SiriVocabularySpanData::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  uint64_t v6 = a1[4];
  uint64_t v7 = a2[4];
  if (v6)
  {
    if (!v7) {
      return 0;
    }
    if (*(unsigned char *)(v6 + 16))
    {
      if ((*(unsigned char *)(v7 + 16) & 1) == 0 || *(double *)(v6 + 8) != *(double *)(v7 + 8)) {
        return 0;
      }
    }
    else if (*(unsigned char *)(v7 + 16))
    {
      return 0;
    }
  }
  else if (v7)
  {
    return 0;
  }
  uint64_t v8 = a1[3];
  uint64_t v9 = a2[3];
  if (v8)
  {
    if (!v9 || !sirinluinternal::OvertonKGSpanData::operator==(v8, v9)) {
      return 0;
    }
  }
  else if (v9)
  {
    return 0;
  }
  uint64_t v10 = a1[1];
  uint64_t v11 = a2[1];
  if (!v10)
  {
    if (!v11) {
      goto LABEL_29;
    }
    return 0;
  }
  if (!v11) {
    return 0;
  }
  if (*(unsigned char *)(v10 + 16))
  {
    if ((*(unsigned char *)(v11 + 16) & 1) == 0 || *(double *)(v10 + 8) != *(double *)(v11 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(v11 + 16))
  {
    return 0;
  }
LABEL_29:
  uint64_t v12 = a1[2];
  uint64_t v13 = a2[2];
  BOOL result = (v12 | v13) == 0;
  if (v12 && v13)
  {
    uint64_t v15 = a1[2];
    return sirinluinternal::MentionResolverSpanData::operator==(v15, v13);
  }
  return result;
}

unint64_t sirinluinternal::InternalSpanData::hash_value(sirinluinternal::InternalSpanData *this)
{
  unint64_t v2 = (sirinluinternal::SiriVocabularySpanData *)*((void *)this + 5);
  if (v2) {
    uint64_t v3 = sirinluinternal::SiriVocabularySpanData::hash_value(v2);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *((void *)this + 4);
  if (v4 && (*(unsigned char *)(v4 + 16) & 1) != 0)
  {
    double v6 = *(double *)(v4 + 8);
    if (v6 == 0.0) {
      double v5 = 0.0;
    }
    else {
      double v5 = v6;
    }
  }
  else
  {
    double v5 = 0.0;
  }
  unint64_t v7 = *((void *)this + 3);
  if (v7) {
    unint64_t v7 = sirinluinternal::OvertonKGSpanData::hash_value((sirinluinternal::OvertonKGSpanData *)v7);
  }
  double v8 = *((double *)this + 1);
  if (v8 != 0.0)
  {
    if (*(unsigned char *)(*(void *)&v8 + 16))
    {
      double v8 = *(double *)(*(void *)&v8 + 8);
      if (v8 == 0.0) {
        double v8 = 0.0;
      }
    }
    else
    {
      double v8 = 0.0;
    }
  }
  uint64_t v9 = *((void *)this + 2);
  if (v9)
  {
    if (*(unsigned char *)(v9 + 24))
    {
      double v10 = *(double *)(v9 + 8);
      if (v10 == 0.0) {
        double v10 = 0.0;
      }
      if ((*(unsigned char *)(v9 + 24) & 2) != 0) {
        goto LABEL_20;
      }
    }
    else
    {
      double v10 = 0.0;
      if ((*(unsigned char *)(v9 + 24) & 2) != 0)
      {
LABEL_20:
        double v11 = *(double *)(v9 + 16);
        if (v11 == 0.0) {
          double v11 = 0.0;
        }
        goto LABEL_27;
      }
    }
    double v11 = 0.0;
LABEL_27:
    uint64_t v9 = *(void *)&v11 ^ *(void *)&v10;
  }
  return *(void *)&v5 ^ v3 ^ v7 ^ *(void *)&v8 ^ v9;
}

uint64_t sirinluinternal::InternalSpanData::makeSiriVocabularySpanData(uint64_t this)
{
  if (!*(void *)(this + 40)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternal::InternalSpanData::makePlumSpanData(uint64_t this)
{
  if (!*(void *)(this + 32)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternal::InternalSpanData::makeOvertonKgSpanData(uint64_t this)
{
  if (!*(void *)(this + 24)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternal::InternalSpanData::makeMentionDetectorSpanData(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternal::InternalSpanData::makeMentionResolverSpanData(uint64_t this)
{
  if (!*(void *)(this + 16)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules::formatText(sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((void *)this + 1)) {
    PB::TextFormatter::format();
  }
  uint64_t v5 = *((void *)this + 2);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "rules");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *(const PB::Base **)(this + 16);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  if (*(void *)(v3 + 8))
  {
    return PB::Writer::write();
  }
  return this;
}

uint64_t sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules::readFrom(sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_24;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 2) {
        operator new();
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_24:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_24;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules::~ITFMExecutedHandcraftedRules(sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules *this)
{
  sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules::~ITFMExecutedHandcraftedRules(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1F232C1E8;
  unint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    std::default_delete<std::string>::operator()[abi:ne180100](v3);
  }
  PB::Base::~Base(this);
}

void *sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules::ITFMExecutedHandcraftedRules(void *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1F232C1E8;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1F232C1E8;
  return this;
}

void *sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules::ITFMExecutedHandcraftedRules(void *this, const sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules *a2)
{
  *this = &unk_1F232C1E8;
  this[1] = 0;
  this[2] = 0;
  if (*((void *)a2 + 2)) {
    operator new();
  }
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules::operator=(uint64_t a1, const sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules *a2)
{
  if ((const sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules *)a1 != a2)
  {
    sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules::ITFMExecutedHandcraftedRules(&v5, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    long long v6 = v3;
    sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules::~ITFMExecutedHandcraftedRules((sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules *)&v5);
  }
  return a1;
}

uint64_t sirinluinternalsnlp_intermediate::swap(uint64_t this, sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules *a2, sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules *a3)
{
  uint64_t v3 = *(void *)(this + 16);
  *(void *)(this + 16) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v3;
  uint64_t v4 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  return this;
}

void *sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules::ITFMExecutedHandcraftedRules(void *a1, uint64_t a2)
{
  a1[1] = 0;
  uint64_t v4 = a1 + 1;
  *a1 = &unk_1F232C1E8;
  a1[2] = 0;
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  uint64_t v6 = a1[2];
  a1[2] = v5;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v8 = *v4;
  *uint64_t v4 = v7;
  if (v8) {
    std::default_delete<std::string>::operator()[abi:ne180100](v8);
  }
  return a1;
}

uint64_t sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules::ITFMExecutedHandcraftedRules(&v5, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    long long v6 = v3;
    sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules::~ITFMExecutedHandcraftedRules((sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules *)&v5);
  }
  return a1;
}

uint64_t sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a2 + 16);
  if (v4)
  {
    if (!v5 || !sirinluinternalsnlp_intermediate::SNLPHandcraftedRules::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  long long v6 = *(unsigned __int8 **)(a1 + 8);
  uint64_t v7 = *(unsigned __int8 ***)(a2 + 8);
  uint64_t result = v7 == 0;
  if (!v6) {
    return result;
  }
  if (!v7) {
    return 0;
  }
  uint64_t v9 = v6[23];
  if ((v9 & 0x80u) == 0) {
    unint64_t v10 = (unsigned __int8 *)v6[23];
  }
  else {
    unint64_t v10 = (unsigned __int8 *)*((void *)v6 + 1);
  }
  unint64_t v11 = (unsigned __int8 *)*((unsigned __int8 *)v7 + 23);
  int v12 = (char)v11;
  if ((char)v11 < 0) {
    unint64_t v11 = v7[1];
  }
  if (v10 != v11) {
    return 0;
  }
  if (v12 >= 0) {
    BOOL v13 = *(unsigned __int8 **)(a2 + 8);
  }
  else {
    BOOL v13 = *v7;
  }
  if ((v9 & 0x80) != 0) {
    return !memcmp(*(const void **)v6, v13, *((void *)v6 + 1));
  }
  if (!v6[23]) {
    return 1;
  }
  uint64_t v14 = v9 - 1;
  do
  {
    int v16 = *v6++;
    int v15 = v16;
    int v18 = *v13++;
    int v17 = v18;
    BOOL v20 = v14-- != 0;
    uint64_t result = v15 == v17;
  }
  while (v15 == v17 && v20);
  return result;
}

unint64_t sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules::hash_value(sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules *this)
{
  uint64_t v2 = *((void *)this + 2);
  if (!v2 || (uint64_t v3 = *(void *)(v2 + 8), v4 = *(void *)(v2 + 16), v3 == v4))
  {
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = 0;
    do
    {
      v5 ^= std::__string_hash<char>::operator()[abi:ne180100](v3);
      v3 += 24;
    }
    while (v3 != v4);
  }
  unint64_t v6 = *((void *)this + 1);
  if (v6) {
    unint64_t v6 = std::__string_hash<char>::operator()[abi:ne180100](v6);
  }
  return v6 ^ v5;
}

uint64_t sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules::makeRules(uint64_t this)
{
  if (!*(void *)(this + 16)) {
    operator new();
  }
  return this;
}

BOOL SIRINLUEXTERNALSystemDialogActGroupReadFrom(id *a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        int v17 = objc_alloc_init(SIRINLUEXTERNALSystemDialogAct);
        objc_storeStrong(a1 + 2, v17);
        if (!PBReaderPlaceMark()
          || !SIRINLUEXTERNALSystemDialogActReadFrom((id *)&v17->super.super.isa, a2))
        {
          goto LABEL_30;
        }
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_27:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    int v17 = objc_alloc_init(SIRINLUEXTERNALSystemDialogActGroup);
    [a1 addChildActs:v17];
    if (!PBReaderPlaceMark() || (SIRINLUEXTERNALSystemDialogActGroupReadFrom(v17, a2) & 1) == 0)
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL SIRINLUEXTERNALRepetitionResultReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 16) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4))
          {
            unsigned int v24 = &OBJC_IVAR___SIRINLUEXTERNALRepetitionResult__asrHypothesisIndex;
            goto LABEL_38;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            break;
          }
          v17 += 7;
          BOOL v23 = v18++ > 8;
          if (v23)
          {
            LODWORD(v19) = 0;
            unsigned int v24 = &OBJC_IVAR___SIRINLUEXTERNALRepetitionResult__asrHypothesisIndex;
            goto LABEL_41;
          }
        }
        unsigned int v24 = &OBJC_IVAR___SIRINLUEXTERNALRepetitionResult__asrHypothesisIndex;
LABEL_39:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v19) = 0;
        }
LABEL_41:
        *(_DWORD *)(a1 + *v24) = v19;
        goto LABEL_42;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_42:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v25 = 0;
    unsigned int v26 = 0;
    uint64_t v19 = 0;
    *(unsigned char *)(a1 + 16) |= 2u;
    while (1)
    {
      uint64_t v27 = *v3;
      unint64_t v28 = *(void *)(a2 + v27);
      if (v28 == -1 || v28 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
      *(void *)(a2 + v27) = v28 + 1;
      v19 |= (unint64_t)(v29 & 0x7F) << v25;
      if ((v29 & 0x80) == 0)
      {
        unsigned int v24 = &OBJC_IVAR___SIRINLUEXTERNALRepetitionResult__repetitionType;
        goto LABEL_39;
      }
      v25 += 7;
      BOOL v23 = v26++ > 8;
      if (v23)
      {
        LODWORD(v19) = 0;
        unsigned int v24 = &OBJC_IVAR___SIRINLUEXTERNALRepetitionResult__repetitionType;
        goto LABEL_41;
      }
    }
    unsigned int v24 = &OBJC_IVAR___SIRINLUEXTERNALRepetitionResult__repetitionType;
LABEL_38:
    *(unsigned char *)(a2 + *v5) = 1;
    goto LABEL_39;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sirinluexternal::UsoEntitySpan::formatText(sirinluexternal::UsoEntitySpan *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = (uint64_t *)*((void *)this + 1);
  unint64_t v6 = (uint64_t *)*((void *)this + 2);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "alternatives");
  }
  uint64_t v8 = *((void *)this + 4);
  if (v8) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v8 + 32))(v8, a2, "end_index");
  }
  uint64_t v9 = *((void *)this + 5);
  if (v9) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v9 + 32))(v9, a2, "label");
  }
  uint64_t v10 = *((void *)this + 6);
  if (v10) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v10 + 32))(v10, a2, "match_info");
  }
  if (*((unsigned char *)this + 120)) {
    PB::TextFormatter::format(a2, "node_index");
  }
  uint64_t v11 = *((void *)this + 7);
  if (v11) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v11 + 32))(v11, a2, "origin_app_id");
  }
  uint64_t v12 = *((void *)this + 8);
  if (v12) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v12 + 32))(v12, a2, "origin_entity_id");
  }
  uint64_t v13 = *((void *)this + 9);
  if (v13) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v13 + 32))(v13, a2, "payload_attachment_info");
  }
  uint64_t v14 = (uint64_t *)*((void *)this + 10);
  int v15 = (uint64_t *)*((void *)this + 11);
  while (v14 != v15)
  {
    uint64_t v16 = *v14++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v16 + 32))(v16, a2, "properties");
  }
  if ((*((unsigned char *)this + 120) & 2) != 0) {
    PB::TextFormatter::format(a2, "source_component");
  }
  uint64_t v17 = *((void *)this + 13);
  if (v17) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v17 + 32))(v17, a2, "start_index");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluexternal::UsoEntitySpan::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if (*(unsigned char *)(this + 120)) {
    this = PB::Writer::writeVarInt(a2);
  }
  uint64_t v4 = *(const PB::Base **)(v3 + 56);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  if ((*(unsigned char *)(v3 + 120) & 2) != 0) {
    this = PB::Writer::writeVarInt(a2);
  }
  uint64_t v5 = *(const PB::Base **)(v3 + 40);
  if (v5) {
    this = PB::Writer::writeSubmessage(a2, v5);
  }
  unint64_t v6 = *(const PB::Base **)(v3 + 48);
  if (v6) {
    this = PB::Writer::writeSubmessage(a2, v6);
  }
  uint64_t v7 = *(const PB::Base ***)(v3 + 80);
  uint64_t v8 = *(const PB::Base ***)(v3 + 88);
  while (v7 != v8)
  {
    uint64_t v9 = *v7++;
    this = PB::Writer::writeSubmessage(a2, v9);
  }
  uint64_t v10 = *(const PB::Base **)(v3 + 104);
  if (v10) {
    this = PB::Writer::writeSubmessage(a2, v10);
  }
  uint64_t v11 = *(const PB::Base **)(v3 + 32);
  if (v11) {
    this = PB::Writer::writeSubmessage(a2, v11);
  }
  uint64_t v12 = *(const PB::Base ***)(v3 + 8);
  uint64_t v13 = *(const PB::Base ***)(v3 + 16);
  while (v12 != v13)
  {
    uint64_t v14 = *v12++;
    this = PB::Writer::writeSubmessage(a2, v14);
  }
  int v15 = *(const PB::Base **)(v3 + 64);
  if (v15) {
    this = PB::Writer::writeSubmessage(a2, v15);
  }
  uint64_t v16 = *(const PB::Base **)(v3 + 72);
  if (v16)
  {
    return PB::Writer::writeSubmessage(a2, v16);
  }
  return this;
}

uint64_t sirinluexternal::UsoEntitySpan::readFrom(sirinluexternal::UsoEntitySpan *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
      break;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      int v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 120) |= 1u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v21 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v20 <= 0xFFFFFFFFFFFFFFF5 && v20 + 10 <= v21)
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          do
          {
            unint64_t v26 = v20 + 1;
            *((void *)a2 + 1) = v20 + 1;
            char v27 = *(unsigned char *)(v22 + v20);
            v25 |= (unint64_t)(v27 & 0x7F) << v23;
            if ((v27 & 0x80) == 0) {
              goto LABEL_67;
            }
            v23 += 7;
            unint64_t v20 = v26;
            BOOL v14 = v24++ > 8;
          }
          while (!v14);
LABEL_59:
          LODWORD(v25) = 0;
          goto LABEL_67;
        }
        char v40 = 0;
        unsigned int v41 = 0;
        uint64_t v25 = 0;
        if (v21 <= v20) {
          unint64_t v21 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v21 == v20)
          {
            LODWORD(v25) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v42 = v20 + 1;
            char v43 = *(unsigned char *)(v22 + v20);
            *((void *)a2 + 1) = v42;
            v25 |= (unint64_t)(v43 & 0x7F) << v40;
            if (v43 < 0)
            {
              v40 += 7;
              unint64_t v20 = v42;
              BOOL v14 = v41++ > 8;
              if (v14) {
                goto LABEL_59;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v25) = 0;
            }
          }
          break;
        }
LABEL_67:
        *((_DWORD *)this + 28) = v25;
        goto LABEL_68;
      case 2u:
        operator new();
      case 3u:
        *((unsigned char *)this + 120) |= 2u;
        unint64_t v28 = *((void *)a2 + 1);
        unint64_t v29 = *((void *)a2 + 2);
        uint64_t v30 = *(void *)a2;
        if (v28 <= 0xFFFFFFFFFFFFFFF5 && v28 + 10 <= v29)
        {
          char v31 = 0;
          unsigned int v32 = 0;
          uint64_t v33 = 0;
          do
          {
            unint64_t v34 = v28 + 1;
            *((void *)a2 + 1) = v28 + 1;
            char v35 = *(unsigned char *)(v30 + v28);
            v33 |= (unint64_t)(v35 & 0x7F) << v31;
            if ((v35 & 0x80) == 0) {
              goto LABEL_64;
            }
            v31 += 7;
            unint64_t v28 = v34;
            BOOL v14 = v32++ > 8;
          }
          while (!v14);
LABEL_52:
          LODWORD(v33) = 0;
          goto LABEL_64;
        }
        char v36 = 0;
        unsigned int v37 = 0;
        uint64_t v33 = 0;
        if (v29 <= v28) {
          unint64_t v29 = *((void *)a2 + 1);
        }
        break;
      case 4u:
        operator new();
      case 5u:
        operator new();
      case 6u:
        operator new();
      case 7u:
        operator new();
      case 8u:
        operator new();
      case 9u:
        operator new();
      case 0xAu:
        operator new();
      case 0xBu:
        operator new();
      default:
        goto LABEL_19;
    }
    while (1)
    {
      if (v29 == v28)
      {
        LODWORD(v33) = 0;
        *((unsigned char *)a2 + 24) = 1;
        goto LABEL_64;
      }
      unint64_t v38 = v28 + 1;
      char v39 = *(unsigned char *)(v30 + v28);
      *((void *)a2 + 1) = v38;
      v33 |= (unint64_t)(v39 & 0x7F) << v36;
      if ((v39 & 0x80) == 0) {
        break;
      }
      v36 += 7;
      unint64_t v28 = v38;
      BOOL v14 = v37++ > 8;
      if (v14) {
        goto LABEL_52;
      }
    }
    if (*((unsigned char *)a2 + 24)) {
      LODWORD(v33) = 0;
    }
LABEL_64:
    *((_DWORD *)this + 29) = v33;
LABEL_68:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  char v15 = 0;
  unsigned int v16 = 0;
  unint64_t v11 = 0;
  if (v2 > v3) {
    unint64_t v3 = v2;
  }
  do
  {
    if (v3 == v2)
    {
      int v4 = 1;
      *((unsigned char *)a2 + 24) = 1;
      return v4 == 0;
    }
    unint64_t v17 = v2 + 1;
    char v18 = *(unsigned char *)(v8 + v2);
    *((void *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0) {
      goto LABEL_21;
    }
    v15 += 7;
    unint64_t v2 = v17;
    BOOL v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  uint64_t result = PB::Reader::skip(a2);
  if (result) {
    goto LABEL_68;
  }
  return result;
}

void sub_1C8AFC284(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sirinluexternal::UsoEntitySpan::~UsoEntitySpan(sirinluexternal::UsoEntitySpan *this)
{
  sirinluexternal::UsoEntitySpan::~UsoEntitySpan(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t vars8;

  *(void *)this = &unk_1F232C238;
  unint64_t v2 = *((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*((void *)this + 10))
  {
    std::vector<std::unique_ptr<siricommon::StringValue>>::__clear[abi:ne180100]((void *)this + 10);
    operator delete(*((void **)this + 10));
  }
  unint64_t v3 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  unint64_t v6 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  if (*((void *)this + 1))
  {
    std::vector<std::unique_ptr<siricommon::StringValue>>::__clear[abi:ne180100]((void *)this + 1);
    operator delete(*((void **)this + 1));
  }
  PB::Base::~Base(this);
}

double sirinluexternal::UsoEntitySpan::UsoEntitySpan(sirinluexternal::UsoEntitySpan *this)
{
  *(void *)this = &unk_1F232C238;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 30) = 0;
  return result;
}

{
  double result;

  *(void *)this = &unk_1F232C238;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 30) = 0;
  return result;
}

uint64_t sirinluexternal::UsoEntitySpan::UsoEntitySpan(uint64_t this, const sirinluexternal::UsoEntitySpan *a2)
{
  *(void *)this = &unk_1F232C238;
  *(_OWORD *)(this + 8) = 0u;
  *(_OWORD *)(this + 24) = 0u;
  *(_OWORD *)(this + 40) = 0u;
  *(_OWORD *)(this + 56) = 0u;
  *(_OWORD *)(this + 72) = 0u;
  *(_OWORD *)(this + 88) = 0u;
  *(_OWORD *)(this + 104) = 0u;
  *(_DWORD *)(this + 120) = 0;
  if (*((unsigned char *)a2 + 120))
  {
    int v2 = *((_DWORD *)a2 + 28);
    *(unsigned char *)(this + 120) = 1;
    *(_DWORD *)(this + 112) = v2;
  }
  if (*((void *)a2 + 7)) {
    operator new();
  }
  if ((*((unsigned char *)a2 + 120) & 2) != 0)
  {
    int v3 = *((_DWORD *)a2 + 29);
    *(unsigned char *)(this + 120) |= 2u;
    *(_DWORD *)(this + 116) = v3;
  }
  if (*((void *)a2 + 5)) {
    operator new();
  }
  if (*((void *)a2 + 6)) {
    operator new();
  }
  if (*((void *)a2 + 10) != *((void *)a2 + 11)) {
    operator new();
  }
  if (*((void *)a2 + 13)) {
    operator new();
  }
  if (*((void *)a2 + 4)) {
    operator new();
  }
  if (*((void *)a2 + 1) != *((void *)a2 + 2)) {
    operator new();
  }
  if (*((void *)a2 + 8)) {
    operator new();
  }
  if (*((void *)a2 + 9)) {
    operator new();
  }
  return this;
}

void sub_1C8AFCB34(void *a1)
{
}

sirinluexternal *sirinluexternal::UsoEntitySpan::operator=(sirinluexternal *a1, const sirinluexternal::UsoEntitySpan *a2)
{
  if (a1 != a2)
  {
    sirinluexternal::UsoEntitySpan::UsoEntitySpan((uint64_t)v5, a2);
    sirinluexternal::swap(a1, (sirinluexternal::UsoEntitySpan *)v5, v3);
    sirinluexternal::UsoEntitySpan::~UsoEntitySpan((sirinluexternal::UsoEntitySpan *)v5);
  }
  return a1;
}

double sirinluexternal::swap(sirinluexternal *this, sirinluexternal::UsoEntitySpan *a2, sirinluexternal::UsoEntitySpan *a3)
{
  int v3 = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v3;
  uint64_t v4 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v4;
  double result = *((double *)a2 + 14);
  uint64_t v6 = *((void *)this + 14);
  *((double *)this + 14) = result;
  *((void *)a2 + 14) = v6;
  uint64_t v7 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v7;
  uint64_t v8 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v8;
  uint64_t v9 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v9;
  uint64_t v10 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v10;
  uint64_t v11 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v11;
  uint64_t v12 = *((void *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v12;
  uint64_t v13 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v13;
  uint64_t v14 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v14;
  uint64_t v15 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v15;
  uint64_t v16 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v16;
  uint64_t v17 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v17;
  uint64_t v18 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v18;
  return result;
}

uint64_t sirinluexternal::UsoEntitySpan::UsoEntitySpan(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F232C238;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v4 = (void **)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a2 + 120) = 0;
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = 0;
  uint64_t v6 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v5;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  uint64_t v8 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v7;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = (void **)(a1 + 80);
  uint64_t v10 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  uint64_t v11 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v10;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  if (*v9)
  {
    std::vector<std::unique_ptr<siricommon::StringValue>>::__clear[abi:ne180100]((void *)(a1 + 80));
    operator delete(*v9);
    *uint64_t v9 = 0;
    *(void *)(a1 + 88) = 0;
    *(void *)(a1 + 96) = 0;
  }
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  uint64_t v12 = *(void *)(a2 + 104);
  *(void *)(a2 + 104) = 0;
  uint64_t v13 = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = v12;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t v14 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  uint64_t v15 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v14;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  if (*v4)
  {
    std::vector<std::unique_ptr<siricommon::StringValue>>::__clear[abi:ne180100](v4);
    operator delete(*v4);
    *uint64_t v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  uint64_t v16 = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = 0;
  uint64_t v17 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = v16;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  uint64_t v18 = *(void *)(a2 + 72);
  *(void *)(a2 + 72) = 0;
  uint64_t v19 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = v18;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  return a1;
}

sirinluexternal *sirinluexternal::UsoEntitySpan::operator=(sirinluexternal *a1, uint64_t a2)
{
  if (a1 != (sirinluexternal *)a2)
  {
    sirinluexternal::UsoEntitySpan::UsoEntitySpan((uint64_t)v5, a2);
    sirinluexternal::swap(a1, (sirinluexternal::UsoEntitySpan *)v5, v3);
    sirinluexternal::UsoEntitySpan::~UsoEntitySpan((sirinluexternal::UsoEntitySpan *)v5);
  }
  return a1;
}

BOOL sirinluexternal::UsoEntitySpan::operator==(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a1 + 120);
  char v5 = *(unsigned char *)(a2 + 120);
  if (v4)
  {
    if ((*(unsigned char *)(a2 + 120) & 1) == 0 || *(_DWORD *)(a1 + 112) != *(_DWORD *)(a2 + 112)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 120))
  {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a2 + 56);
  if (v6)
  {
    if (!v7 || (siricommon::StringValue::operator==(v6, v7) & 1) == 0) {
      return 0;
    }
  }
  else if (v7)
  {
    return 0;
  }
  if ((v4 & 2) != 0)
  {
    if ((v5 & 2) == 0 || *(_DWORD *)(a1 + 116) != *(_DWORD *)(a2 + 116)) {
      return 0;
    }
  }
  else if ((v5 & 2) != 0)
  {
    return 0;
  }
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v9 = *(void *)(a2 + 40);
  if (v8)
  {
    if (!v9 || (siricommon::StringValue::operator==(v8, v9) & 1) == 0) {
      return 0;
    }
  }
  else if (v9)
  {
    return 0;
  }
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a2 + 48);
  if (v10)
  {
    if (!v11 || !sirinluexternal::MatchInfo::operator==(v10, v11)) {
      return 0;
    }
  }
  else if (v11)
  {
    return 0;
  }
  BOOL result = PB::PtrVector<sirinluexternal::SpanProperty>::operator==(*(void *)(a1 + 80), *(void *)(a1 + 88), *(void ***)(a2 + 80), *(void *)(a2 + 88));
  if (result)
  {
    uint64_t v13 = *(void *)(a1 + 104);
    uint64_t v14 = *(void *)(a2 + 104);
    if (v13)
    {
      if (!v14) {
        return 0;
      }
      if (*(unsigned char *)(v13 + 12))
      {
        if ((*(unsigned char *)(v14 + 12) & 1) == 0 || *(_DWORD *)(v13 + 8) != *(_DWORD *)(v14 + 8)) {
          return 0;
        }
      }
      else if (*(unsigned char *)(v14 + 12))
      {
        return 0;
      }
    }
    else if (v14)
    {
      return 0;
    }
    uint64_t v15 = *(void *)(a1 + 32);
    uint64_t v16 = *(void *)(a2 + 32);
    if (v15)
    {
      if (!v16) {
        return 0;
      }
      if (*(unsigned char *)(v15 + 12))
      {
        if ((*(unsigned char *)(v16 + 12) & 1) == 0 || *(_DWORD *)(v15 + 8) != *(_DWORD *)(v16 + 8)) {
          return 0;
        }
      }
      else if (*(unsigned char *)(v16 + 12))
      {
        return 0;
      }
    }
    else if (v16)
    {
      return 0;
    }
    BOOL result = PB::PtrVector<sirinluexternal::AsrAlternative>::operator==(*(void *)(a1 + 8), *(void *)(a1 + 16), *(uint64_t **)(a2 + 8), *(void *)(a2 + 16));
    if (result)
    {
      uint64_t v17 = *(void *)(a1 + 64);
      uint64_t v18 = *(void *)(a2 + 64);
      if (v17)
      {
        if (!v18 || (siricommon::StringValue::operator==(v17, v18) & 1) == 0) {
          return 0;
        }
      }
      else if (v18)
      {
        return 0;
      }
      uint64_t v19 = *(void *)(a1 + 72);
      uint64_t v20 = *(void *)(a2 + 72);
      BOOL result = (v19 | v20) == 0;
      if (v19)
      {
        if (v20)
        {
          if (*(unsigned char *)(v19 + 12)) {
            return (*(unsigned char *)(v20 + 12) & 1) != 0 && *(_DWORD *)(v19 + 8) == *(_DWORD *)(v20 + 8);
          }
          return (*(unsigned char *)(v20 + 12) & 1) == 0;
        }
      }
    }
  }
  return result;
}

BOOL PB::PtrVector<sirinluexternal::SpanProperty>::operator==(uint64_t a1, uint64_t a2, void **a3, uint64_t a4)
{
  if (a2 - a1 != a4 - (void)a3) {
    return 0;
  }
  if (a1 == a2) {
    return 1;
  }
  char v5 = a3;
  uint64_t v6 = a1 + 8;
  do
  {
    uint64_t v7 = *v5++;
    BOOL result = sirinluexternal::SpanProperty::operator==(*(void **)(v6 - 8), v7);
    BOOL v9 = !result || v6 == a2;
    v6 += 8;
  }
  while (!v9);
  return result;
}

BOOL PB::PtrVector<sirinluexternal::AsrAlternative>::operator==(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  if (a2 - a1 != a4 - (void)a3) {
    return 0;
  }
  if (a1 == a2) {
    return 1;
  }
  char v5 = a3;
  uint64_t v6 = a1 + 8;
  do
  {
    uint64_t v7 = *v5++;
    BOOL result = sirinluexternal::AsrAlternative::operator==(*(void *)(v6 - 8), v7);
    BOOL v9 = !result || v6 == a2;
    v6 += 8;
  }
  while (!v9);
  return result;
}

unint64_t sirinluexternal::UsoEntitySpan::hash_value(sirinluexternal::UsoEntitySpan *this)
{
  char v2 = *((unsigned char *)this + 120);
  if (v2) {
    uint64_t v3 = *((unsigned int *)this + 28);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *((void *)this + 7);
  if (!v4 || (uint64_t v5 = *(void *)(v4 + 8)) == 0)
  {
    unint64_t v27 = 0;
    if ((v2 & 2) != 0) {
      goto LABEL_7;
    }
LABEL_9:
    uint64_t v28 = 0;
    goto LABEL_10;
  }
  unint64_t v27 = std::__string_hash<char>::operator()[abi:ne180100](v5);
  if ((v2 & 2) == 0) {
    goto LABEL_9;
  }
LABEL_7:
  uint64_t v28 = *((int *)this + 29);
LABEL_10:
  uint64_t v6 = *((void *)this + 5);
  if (v6 && (uint64_t v7 = *(void *)(v6 + 8)) != 0) {
    unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](v7);
  }
  else {
    unint64_t v8 = 0;
  }
  BOOL v9 = (sirinluexternal::MatchInfo *)*((void *)this + 6);
  if (v9) {
    uint64_t v10 = sirinluexternal::MatchInfo::hash_value(v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v12 = (sirinluexternal::SpanProperty **)*((void *)this + 10);
  uint64_t v11 = (sirinluexternal::SpanProperty **)*((void *)this + 11);
  if (v12 == v11)
  {
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v13 = 0;
    do
    {
      uint64_t v14 = *v12++;
      v13 ^= sirinluexternal::SpanProperty::hash_value(v14);
    }
    while (v12 != v11);
  }
  uint64_t v15 = *((void *)this + 13);
  if (v15 && (*(unsigned char *)(v15 + 12) & 1) != 0) {
    uint64_t v16 = *(unsigned int *)(v15 + 8);
  }
  else {
    uint64_t v16 = 0;
  }
  uint64_t v17 = *((void *)this + 4);
  if (v17 && (*(unsigned char *)(v17 + 12) & 1) != 0) {
    uint64_t v18 = *(unsigned int *)(v17 + 8);
  }
  else {
    uint64_t v18 = 0;
  }
  uint64_t v20 = (sirinluexternal::AsrAlternative **)*((void *)this + 1);
  uint64_t v19 = (sirinluexternal::AsrAlternative **)*((void *)this + 2);
  if (v20 == v19)
  {
    uint64_t v21 = 0;
  }
  else
  {
    uint64_t v21 = 0;
    do
    {
      uint64_t v22 = *v20++;
      v21 ^= sirinluexternal::AsrAlternative::hash_value(v22);
    }
    while (v20 != v19);
  }
  uint64_t v23 = *((void *)this + 8);
  if (v23)
  {
    unint64_t v24 = *(void *)(v23 + 8);
    if (v24) {
      unint64_t v24 = std::__string_hash<char>::operator()[abi:ne180100](v24);
    }
  }
  else
  {
    unint64_t v24 = 0;
  }
  uint64_t v25 = *((void *)this + 9);
  if (v25)
  {
    if (*(unsigned char *)(v25 + 12)) {
      uint64_t v25 = *(int *)(v25 + 8);
    }
    else {
      uint64_t v25 = 0;
    }
  }
  return v27 ^ v3 ^ v28 ^ v8 ^ v10 ^ v13 ^ v16 ^ v24 ^ v25 ^ v18 ^ v21;
}

uint64_t sirinluexternal::UsoEntitySpan::makeOriginAppId(uint64_t this)
{
  if (!*(void *)(this + 56)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternal::UsoEntitySpan::makeLabel(uint64_t this)
{
  if (!*(void *)(this + 40)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternal::UsoEntitySpan::makeMatchInfo(uint64_t this)
{
  if (!*(void *)(this + 48)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternal::UsoEntitySpan::makeStartIndex(uint64_t this)
{
  if (!*(void *)(this + 104)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternal::UsoEntitySpan::makeEndIndex(uint64_t this)
{
  if (!*(void *)(this + 32)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternal::UsoEntitySpan::makeOriginEntityId(uint64_t this)
{
  if (!*(void *)(this + 64)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternal::UsoEntitySpan::makePayloadAttachmentInfo(uint64_t this)
{
  if (!*(void *)(this + 72)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternalsnlp_intermediate::SNLPHandcraftedRules::formatText(sirinluinternalsnlp_intermediate::SNLPHandcraftedRules *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  for (uint64_t i = *((void *)this + 2); v5 != i; v5 += 24)
    PB::TextFormatter::format();
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluinternalsnlp_intermediate::SNLPHandcraftedRules::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v2 = *(void *)(this + 8);
  for (uint64_t i = *(void *)(this + 16); v2 != i; v2 += 24)
    this = PB::Writer::write();
  return this;
}

uint64_t sirinluinternalsnlp_intermediate::SNLPHandcraftedRules::readFrom(sirinluinternalsnlp_intermediate::SNLPHandcraftedRules *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    unint64_t v8 = (std::vector<std::string> *)((char *)this + 8);
    BOOL v9 = (std::allocator<std::string> *)((char *)this + 24);
    while (1)
    {
      uint64_t v10 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v11 = 0;
      unsigned int v12 = 0;
      unint64_t v13 = 0;
      while (1)
      {
        unint64_t v14 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v15 = *(unsigned char *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0) {
          break;
        }
        v11 += 7;
        unint64_t v2 = v14;
        BOOL v16 = v12++ > 8;
        if (v16) {
          goto LABEL_25;
        }
      }
LABEL_21:
      if ((v13 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v13 >> 3) == 1)
      {
        uint64_t v22 = (char *)*((void *)this + 2);
        unint64_t v21 = *((void *)this + 3);
        if ((unint64_t)v22 >= v21)
        {
          unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((v22 - (char *)v8->__begin_) >> 3);
          unint64_t v26 = v25 + 1;
          if (v25 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - (unint64_t)v8->__begin_) >> 3);
          if (2 * v27 > v26) {
            unint64_t v26 = 2 * v27;
          }
          if (v27 >= 0x555555555555555) {
            unint64_t v28 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v28 = v26;
          }
          __v.__end_cap_.__value_ = v9;
          if (v28) {
            unint64_t v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v28);
          }
          else {
            uint64_t v29 = 0;
          }
          uint64_t v30 = (std::string *)(v28 + 24 * v25);
          __v.__first_ = (std::__split_buffer<std::string>::pointer)v28;
          __v.__begin_ = v30;
          __v.__end_cap_.__value_ = (std::string *)(v28 + 24 * v29);
          v30->__r_.__value_.__r.__words[0] = 0;
          v30->__r_.__value_.__l.__size_ = 0;
          v30->__r_.__value_.__r.__words[2] = 0;
          __v.__end_ = v30 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(v8, &__v);
          uint64_t v23 = (void *)*((void *)this + 2);
          std::__split_buffer<std::string>::~__split_buffer(&__v);
        }
        else
        {
          *(void *)uint64_t v22 = 0;
          *((void *)v22 + 1) = 0;
          uint64_t v23 = v22 + 24;
          *((void *)v22 + 2) = 0;
        }
        *((void *)this + 2) = v23;
        PB::Reader::read();
      }
      else
      {
LABEL_25:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v17 = 0;
    unsigned int v18 = 0;
    unint64_t v13 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v19 = v2 + 1;
      char v20 = *(unsigned char *)(v10 + v2);
      *((void *)a2 + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0) {
        goto LABEL_21;
      }
      v17 += 7;
      unint64_t v2 = v19;
      BOOL v16 = v18++ > 8;
      if (v16) {
        goto LABEL_25;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluinternalsnlp_intermediate::SNLPHandcraftedRules::~SNLPHandcraftedRules(sirinluinternalsnlp_intermediate::SNLPHandcraftedRules *this)
{
  *(void *)this = &unk_1F232C288;
  unint64_t v2 = (void **)((char *)this + 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
  JUMPOUT(0x1CB772580);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_1F232C288;
  unint64_t v2 = (void **)((char *)this + 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_1F232C288;
  unint64_t v2 = (void **)((char *)this + 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
}

void *sirinluinternalsnlp_intermediate::SNLPHandcraftedRules::SNLPHandcraftedRules(void *this)
{
  *this = &unk_1F232C288;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = &unk_1F232C288;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

sirinluinternalsnlp_intermediate::SNLPHandcraftedRules *sirinluinternalsnlp_intermediate::SNLPHandcraftedRules::SNLPHandcraftedRules(sirinluinternalsnlp_intermediate::SNLPHandcraftedRules *this, const sirinluinternalsnlp_intermediate::SNLPHandcraftedRules *a2)
{
  *(void *)this = &unk_1F232C288;
  *((void *)this + 1) = 0;
  unint64_t v3 = (std::vector<std::string> *)((char *)this + 8);
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  if (this != a2) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v3, *((std::string **)a2 + 1), *((long long **)a2 + 2), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3));
  }
  return this;
}

uint64_t sirinluinternalsnlp_intermediate::SNLPHandcraftedRules::operator=(uint64_t a1, const sirinluinternalsnlp_intermediate::SNLPHandcraftedRules *a2)
{
  if ((const sirinluinternalsnlp_intermediate::SNLPHandcraftedRules *)a1 != a2)
  {
    sirinluinternalsnlp_intermediate::SNLPHandcraftedRules::SNLPHandcraftedRules((sirinluinternalsnlp_intermediate::SNLPHandcraftedRules *)&v6, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v3;
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v8;
    uint64_t v8 = v4;
    uint64_t v6 = &unk_1F232C288;
    BOOL v9 = (void **)&v7;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v9);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

void *sirinluinternalsnlp_intermediate::swap(void *this, sirinluinternalsnlp_intermediate::SNLPHandcraftedRules *a2, sirinluinternalsnlp_intermediate::SNLPHandcraftedRules *a3)
{
  uint64_t v3 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  uint64_t v4 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  return this;
}

uint64_t sirinluinternalsnlp_intermediate::SNLPHandcraftedRules::SNLPHandcraftedRules(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F232C288;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a1 + 8));
  *uint64_t v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

{
  _OWORD *v4;

  *(void *)a1 = &unk_1F232C288;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a1 + 8));
  *uint64_t v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

uint64_t sirinluinternalsnlp_intermediate::SNLPHandcraftedRules::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    BOOL v9 = &unk_1F232C288;
    memset(&v10, 0, sizeof(v10));
    std::vector<std::string>::__vdeallocate(&v10);
    uint64_t v4 = *(void *)(a2 + 24);
    long long v5 = *(_OWORD *)(a2 + 8);
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    long long v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v5;
    *(_OWORD *)&v10.__begin_ = v6;
    long long v7 = *(std::string **)(a1 + 24);
    *(void *)(a1 + 24) = v4;
    v10.__end_cap_.__value_ = v7;
    char v11 = &v10;
    BOOL v9 = &unk_1F232C288;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

BOOL sirinluinternalsnlp_intermediate::SNLPHandcraftedRules::operator==(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned __int8 **)(a1 + 8);
  uint64_t v3 = *(unsigned __int8 **)(a1 + 16);
  uint64_t v4 = *(unsigned __int8 **)(a2 + 8);
  if (v3 - v2 != *(void *)(a2 + 16) - (void)v4) {
    return 0;
  }
  if (v2 == v3) {
    return 1;
  }
  do
  {
    BOOL result = std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(v2, v4);
    if (!result) {
      break;
    }
    v2 += 24;
    v4 += 24;
  }
  while (v2 != v3);
  return result;
}

uint64_t sirinluinternalsnlp_intermediate::SNLPHandcraftedRules::hash_value(sirinluinternalsnlp_intermediate::SNLPHandcraftedRules *this)
{
  uint64_t v1 = *((void *)this + 1);
  uint64_t v2 = *((void *)this + 2);
  if (v1 == v2) {
    return 0;
  }
  uint64_t v3 = 0;
  do
  {
    v3 ^= std::__string_hash<char>::operator()[abi:ne180100](v1);
    v1 += 24;
  }
  while (v1 != v2);
  return v3;
}

BOOL SIRINLUEXTERNALUserWantedToProceedReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  long long v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    long long v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = objc_alloc_init(SIRINLUEXTERNALUUID);
        objc_storeStrong((id *)(a1 + 16), v17);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_30;
        }
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_27:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v17 = objc_alloc_init(SIRINLUEXTERNALUsoGraph);
    objc_storeStrong((id *)(a1 + 8), v17);
    if (!PBReaderPlaceMark() || !SIRINLUEXTERNALUsoGraphReadFrom((id *)&v17->super.super.isa, a2))
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL SIRINLUINTERNALMENTION_RESOLVERMentionResolverResponseReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  long long v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    long long v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3) {
        break;
      }
      if (v17 == 2)
      {
        unsigned int v18 = objc_alloc_init(SIRINLUINTERNALMatchingSpan);
        [(id)a1 addMentions:v18];
        if (!PBReaderPlaceMark() || (SIRINLUINTERNALMatchingSpanReadFrom((uint64_t)v18, a2) & 1) == 0)
        {
LABEL_33:

          return 0;
        }
LABEL_27:
        PBReaderRecallMark();
LABEL_28:

        goto LABEL_30;
      }
      if (v17 == 1)
      {
        unsigned int v18 = objc_alloc_init(SIRINLUEXTERNALUUID);
        objc_storeStrong((id *)(a1 + 16), v18);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v18, a2) & 1) == 0) {
          goto LABEL_33;
        }
        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_30:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v19 = PBReaderReadString();
    unsigned int v18 = *(SIRINLUINTERNALMatchingSpan **)(a1 + 24);
    *(void *)(a1 + 24) = v19;
    goto LABEL_28;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL SIRINLUINTERNALOverrideMetadataReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  long long v5 = (int *)MEMORY[0x1E4F940C8];
  long long v6 = (int *)MEMORY[0x1E4F940B8];
  while (1)
  {
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
      return v7 == 0;
    }
    if (*(unsigned char *)(a2 + *v5))
    {
      int v7 = 1;
      return v7 == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    uint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v6) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        int v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      LOBYTE(v10) = 0;
    }
LABEL_14:
    if (v7) {
      BOOL v15 = 1;
    }
    else {
      BOOL v15 = (v10 & 7) == 4;
    }
    if (v15) {
      return v7 == 0;
    }
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      return 0;
    }
  }
}

uint64_t SIRINLUINTERNALSiriVocabularySpanDataReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  long long v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v15 = v9++ >= 9;
        if (v15)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v18 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        *(unsigned char *)(a1 + 28) |= 1u;
        uint64_t v26 = *v3;
        unint64_t v27 = *(void *)(a2 + v26);
        if (v27 <= 0xFFFFFFFFFFFFFFF7 && v27 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v28 = *(void *)(*(void *)(a2 + *v7) + v27);
          *(void *)(a2 + v26) = v27 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v28 = 0;
        }
        uint64_t v32 = 8;
      }
      else
      {
        if (v18 != 2)
        {
          if (v18 == 1)
          {
            char v19 = 0;
            unsigned int v20 = 0;
            uint64_t v21 = 0;
            *(unsigned char *)(a1 + 28) |= 4u;
            while (1)
            {
              uint64_t v22 = *v3;
              uint64_t v23 = *(void *)(a2 + v22);
              unint64_t v24 = v23 + 1;
              if (v23 == -1 || v24 > *(void *)(a2 + *v4)) {
                break;
              }
              char v25 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
              *(void *)(a2 + v22) = v24;
              v21 |= (unint64_t)(v25 & 0x7F) << v19;
              if ((v25 & 0x80) == 0) {
                goto LABEL_37;
              }
              v19 += 7;
              BOOL v15 = v20++ >= 9;
              if (v15)
              {
                LODWORD(v21) = 0;
                goto LABEL_39;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_37:
            if (*(unsigned char *)(a2 + *v5)) {
              LODWORD(v21) = 0;
            }
LABEL_39:
            *(_DWORD *)(a1 + 24) = v21;
          }
          else
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
          }
          continue;
        }
        *(unsigned char *)(a1 + 28) |= 2u;
        uint64_t v29 = *v3;
        unint64_t v30 = *(void *)(a2 + v29);
        if (v30 <= 0xFFFFFFFFFFFFFFF7 && v30 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v28 = *(void *)(*(void *)(a2 + *v7) + v30);
          *(void *)(a2 + v29) = v30 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v28 = 0;
        }
        uint64_t v32 = 16;
      }
      *(void *)(a1 + v32) = v28;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t SIRINLUINTERNALQUERYREWRITEQRUtteranceReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  long long v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  int v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      uint64_t v12 = *(void *)(a2 + v11);
      unint64_t v13 = v12 + 1;
      if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
        break;
      }
      char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v16 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        unint64_t v18 = objc_alloc_init(SIRINLUEXTERNALUUID);
        objc_storeStrong((id *)(a1 + 16), v18);
        if PBReaderPlaceMark() && (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v18, a2)) {
          goto LABEL_29;
        }
        goto LABEL_37;
      case 2u:
        uint64_t v20 = PBReaderReadString();
        uint64_t v21 = *(void **)(a1 + 32);
        *(void *)(a1 + 32) = v20;

        goto LABEL_35;
      case 3u:
        unint64_t v18 = objc_alloc_init(SIRINLUINTERNALQUERYREWRITEQRToken);
        [(id)a1 addUtteranceTokens:v18];
        goto LABEL_27;
      case 4u:
        unint64_t v18 = objc_alloc_init(SIRINLUINTERNALQUERYREWRITEQRToken);
        [(id)a1 addAsrUtteranceTokens:v18];
LABEL_27:
        if (PBReaderPlaceMark()
          && (SIRINLUINTERNALQUERYREWRITEQRTokenReadFrom((uint64_t)v18, a2) & 1) != 0)
        {
LABEL_29:
          PBReaderRecallMark();

LABEL_35:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_37:

        return 0;
      case 5u:
        *(unsigned char *)(a1 + 48) |= 1u;
        uint64_t v22 = *v3;
        unint64_t v23 = *(void *)(a2 + v22);
        if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v24 = *(void *)(*(void *)(a2 + *v7) + v23);
          *(void *)(a2 + v22) = v23 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v24 = 0;
        }
        *(void *)(a1 + 8) = v24;
        goto LABEL_35;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_35;
    }
  }
}

uint64_t sirinluinternalembedding::EmbeddingTensorOutput::formatText(sirinluinternalembedding::EmbeddingTensorOutput *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 44)) {
    PB::TextFormatter::format(a2, "embedding_dim");
  }
  uint64_t v5 = *((void *)this + 2);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "embedding_tensor");
  }
  if (*((void *)this + 3)) {
    PB::TextFormatter::format();
  }
  if ((*((unsigned char *)this + 44) & 2) != 0) {
    PB::TextFormatter::format(a2, "is_stable_embeddings_version");
  }
  uint64_t v6 = *((void *)this + 4);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, a2, "sentence_embedding_tensor");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluinternalembedding::EmbeddingTensorOutput::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if (*(void *)(this + 24)) {
    this = PB::Writer::write();
  }
  uint64_t v4 = *(const PB::Base **)(v3 + 16);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  uint64_t v5 = *(const PB::Base **)(v3 + 32);
  if (v5) {
    this = PB::Writer::writeSubmessage(a2, v5);
  }
  char v6 = *(unsigned char *)(v3 + 44);
  if (v6)
  {
    this = PB::Writer::writeVarInt(a2);
    char v6 = *(unsigned char *)(v3 + 44);
  }
  if ((v6 & 2) != 0)
  {
    return PB::Writer::write(a2);
  }
  return this;
}

uint64_t sirinluinternalembedding::EmbeddingTensorOutput::readFrom(sirinluinternalembedding::EmbeddingTensorOutput *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
      break;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      int v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        operator new();
      case 2u:
        operator new();
      case 3u:
        operator new();
      case 4u:
        *((unsigned char *)this + 44) |= 1u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v21 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v20 <= 0xFFFFFFFFFFFFFFF5 && v20 + 10 <= v21)
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          do
          {
            unint64_t v26 = v20 + 1;
            *((void *)a2 + 1) = v20 + 1;
            char v27 = *(unsigned char *)(v22 + v20);
            v25 |= (unint64_t)(v27 & 0x7F) << v23;
            if ((v27 & 0x80) == 0) {
              goto LABEL_47;
            }
            v23 += 7;
            unint64_t v20 = v26;
            BOOL v14 = v24++ > 8;
          }
          while (!v14);
LABEL_41:
          uint64_t v25 = 0;
          goto LABEL_47;
        }
        char v32 = 0;
        unsigned int v33 = 0;
        uint64_t v25 = 0;
        if (v21 <= v20) {
          unint64_t v21 = *((void *)a2 + 1);
        }
        break;
      case 5u:
        *((unsigned char *)this + 44) |= 2u;
        unint64_t v28 = *((void *)a2 + 1);
        if (v28 >= *((void *)a2 + 2))
        {
          BOOL v31 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          unint64_t v29 = v28 + 1;
          int v30 = *(unsigned __int8 *)(*(void *)a2 + v28);
          *((void *)a2 + 1) = v29;
          BOOL v31 = v30 != 0;
        }
        *((unsigned char *)this + 40) = v31;
        goto LABEL_48;
      default:
        goto LABEL_19;
    }
    while (1)
    {
      if (v21 == v20)
      {
        uint64_t v25 = 0;
        *((unsigned char *)a2 + 24) = 1;
        goto LABEL_47;
      }
      unint64_t v34 = v20 + 1;
      char v35 = *(unsigned char *)(v22 + v20);
      *((void *)a2 + 1) = v34;
      v25 |= (unint64_t)(v35 & 0x7F) << v32;
      if ((v35 & 0x80) == 0) {
        break;
      }
      v32 += 7;
      unint64_t v20 = v34;
      BOOL v14 = v33++ > 8;
      if (v14) {
        goto LABEL_41;
      }
    }
    if (*((unsigned char *)a2 + 24)) {
      uint64_t v25 = 0;
    }
LABEL_47:
    *((void *)this + 1) = v25;
LABEL_48:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  char v15 = 0;
  unsigned int v16 = 0;
  unint64_t v11 = 0;
  if (v2 > v3) {
    unint64_t v3 = v2;
  }
  do
  {
    if (v3 == v2)
    {
      int v4 = 1;
      *((unsigned char *)a2 + 24) = 1;
      return v4 == 0;
    }
    unint64_t v17 = v2 + 1;
    char v18 = *(unsigned char *)(v8 + v2);
    *((void *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0) {
      goto LABEL_21;
    }
    v15 += 7;
    unint64_t v2 = v17;
    BOOL v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  uint64_t result = PB::Reader::skip(a2);
  if (result) {
    goto LABEL_48;
  }
  return result;
}

void sirinluinternalembedding::EmbeddingTensorOutput::~EmbeddingTensorOutput(sirinluinternalembedding::EmbeddingTensorOutput *this)
{
  sirinluinternalembedding::EmbeddingTensorOutput::~EmbeddingTensorOutput(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)this = &unk_1F232C2F8;
  unint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    std::default_delete<std::string>::operator()[abi:ne180100](v3);
  }
  int v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  PB::Base::~Base(this);
}

uint64_t sirinluinternalembedding::EmbeddingTensorOutput::EmbeddingTensorOutput(uint64_t this)
{
  *(void *)this = &unk_1F232C2F8;
  *(_DWORD *)(this + 44) = 0;
  *(void *)(this + 24) = 0;
  *(void *)(this + 32) = 0;
  *(void *)(this + 16) = 0;
  return this;
}

{
  *(void *)this = &unk_1F232C2F8;
  *(_DWORD *)(this + 44) = 0;
  *(void *)(this + 24) = 0;
  *(void *)(this + 32) = 0;
  *(void *)(this + 16) = 0;
  return this;
}

uint64_t sirinluinternalembedding::EmbeddingTensorOutput::EmbeddingTensorOutput(uint64_t this, const sirinluinternalembedding::EmbeddingTensorOutput *a2)
{
  *(void *)this = &unk_1F232C2F8;
  *(void *)(this + 16) = 0;
  *(_DWORD *)(this + 44) = 0;
  *(void *)(this + 24) = 0;
  *(void *)(this + 32) = 0;
  if (*((void *)a2 + 3)) {
    operator new();
  }
  if (*((void *)a2 + 2)) {
    operator new();
  }
  if (*((void *)a2 + 4)) {
    operator new();
  }
  char v2 = *((unsigned char *)a2 + 44);
  if (v2)
  {
    uint64_t v3 = *((void *)a2 + 1);
    *(unsigned char *)(this + 44) |= 1u;
    *(void *)(this + 8) = v3;
    char v2 = *((unsigned char *)a2 + 44);
  }
  if ((v2 & 2) != 0)
  {
    char v4 = *((unsigned char *)a2 + 40);
    *(unsigned char *)(this + 44) |= 2u;
    *(unsigned char *)(this + 40) = v4;
  }
  return this;
}

uint64_t sirinluinternalembedding::EmbeddingTensorOutput::operator=(uint64_t a1, const sirinluinternalembedding::EmbeddingTensorOutput *a2)
{
  if ((const sirinluinternalembedding::EmbeddingTensorOutput *)a1 != a2)
  {
    sirinluinternalembedding::EmbeddingTensorOutput::EmbeddingTensorOutput((uint64_t)&v8, a2);
    int v3 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v13;
    int v13 = v3;
    long long v4 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v10;
    long long v10 = v4;
    uint64_t v5 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v11;
    uint64_t v11 = v5;
    uint64_t v6 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v9;
    uint64_t v9 = v6;
    LOBYTE(v6) = *(unsigned char *)(a1 + 40);
    *(unsigned char *)(a1 + 40) = v12;
    char v12 = v6;
    sirinluinternalembedding::EmbeddingTensorOutput::~EmbeddingTensorOutput((sirinluinternalembedding::EmbeddingTensorOutput *)&v8);
  }
  return a1;
}

uint64_t sirinluinternalembedding::swap(uint64_t this, sirinluinternalembedding::EmbeddingTensorOutput *a2, sirinluinternalembedding::EmbeddingTensorOutput *a3)
{
  int v3 = *(_DWORD *)(this + 44);
  *(_DWORD *)(this + 44) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  uint64_t v4 = *(void *)(this + 24);
  *(void *)(this + 24) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v4;
  uint64_t v6 = *(void *)(this + 8);
  uint64_t v5 = *(void *)(this + 16);
  uint64_t v7 = *((void *)a2 + 2);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *(void *)(this + 16) = v7;
  *((void *)a2 + 2) = v5;
  uint64_t v8 = *(void *)(this + 32);
  *(void *)(this + 32) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v8;
  *((void *)a2 + 1) = v6;
  LOBYTE(v8) = *(unsigned char *)(this + 40);
  *(unsigned char *)(this + 40) = *((unsigned char *)a2 + 40);
  *((unsigned char *)a2 + 40) = v8;
  return this;
}

uint64_t sirinluinternalembedding::EmbeddingTensorOutput::EmbeddingTensorOutput(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F232C2F8;
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 16);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  uint64_t v6 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v5;
  if (v6) {
    std::default_delete<std::string>::operator()[abi:ne180100](v6);
  }
  uint64_t v7 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  uint64_t v8 = *v4;
  *uint64_t v4 = v7;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  uint64_t v10 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v9;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t sirinluinternalembedding::EmbeddingTensorOutput::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sirinluinternalembedding::EmbeddingTensorOutput::EmbeddingTensorOutput((uint64_t)&v8, a2);
    int v3 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v13;
    int v13 = v3;
    long long v4 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v10;
    long long v10 = v4;
    uint64_t v5 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v11;
    uint64_t v11 = v5;
    uint64_t v6 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v9;
    uint64_t v9 = v6;
    LOBYTE(v6) = *(unsigned char *)(a1 + 40);
    *(unsigned char *)(a1 + 40) = v12;
    char v12 = v6;
    sirinluinternalembedding::EmbeddingTensorOutput::~EmbeddingTensorOutput((sirinluinternalembedding::EmbeddingTensorOutput *)&v8);
  }
  return a1;
}

BOOL sirinluinternalembedding::EmbeddingTensorOutput::operator==(uint64_t a1, uint64_t a2)
{
  long long v4 = *(unsigned __int8 **)(a1 + 24);
  uint64_t v5 = *(unsigned __int8 ***)(a2 + 24);
  if (v4)
  {
    if (!v5) {
      return 0;
    }
    uint64_t v6 = v4[23];
    if ((v6 & 0x80u) == 0) {
      uint64_t v7 = (unsigned __int8 *)v4[23];
    }
    else {
      uint64_t v7 = (unsigned __int8 *)*((void *)v4 + 1);
    }
    uint64_t v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    int v9 = (char)v8;
    if ((char)v8 < 0) {
      uint64_t v8 = v5[1];
    }
    if (v7 != v8) {
      return 0;
    }
    if (v9 >= 0) {
      long long v10 = *(unsigned __int8 **)(a2 + 24);
    }
    else {
      long long v10 = *v5;
    }
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v10, *((void *)v4 + 1))) {
        return 0;
      }
    }
    else if (v4[23])
    {
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6) {
          goto LABEL_18;
        }
      }
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
LABEL_18:
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(void *)(a2 + 16);
  if (v11)
  {
    if (!v12 || !sirinluinternal::NLv4EmbeddingTensor::operator==(v11, v12)) {
      return 0;
    }
  }
  else if (v12)
  {
    return 0;
  }
  uint64_t v13 = *(void *)(a1 + 32);
  uint64_t v14 = *(void *)(a2 + 32);
  if (v13)
  {
    if (!v14 || !sirinluinternal::NLv4EmbeddingTensor::operator==(v13, v14)) {
      return 0;
    }
  }
  else if (v14)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 44))
  {
    if ((*(unsigned char *)(a2 + 44) & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 44))
  {
    return 0;
  }
  BOOL result = (*(unsigned char *)(a2 + 44) & 2) == 0;
  if ((*(unsigned char *)(a1 + 44) & 2) == 0) {
    return result;
  }
  return (*(unsigned char *)(a2 + 44) & 2) != 0 && *(unsigned __int8 *)(a1 + 40) == *(unsigned __int8 *)(a2 + 40);
}

unint64_t sirinluinternalembedding::EmbeddingTensorOutput::hash_value(sirinluinternalembedding::EmbeddingTensorOutput *this)
{
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    unint64_t v3 = std::__string_hash<char>::operator()[abi:ne180100](v2);
  }
  else {
    unint64_t v3 = 0;
  }
  long long v4 = (sirinluinternal::NLv4EmbeddingTensor *)*((void *)this + 2);
  if (v4) {
    unint64_t v5 = sirinluinternal::NLv4EmbeddingTensor::hash_value(v4);
  }
  else {
    unint64_t v5 = 0;
  }
  unint64_t v6 = *((void *)this + 4);
  if (v6) {
    unint64_t v6 = sirinluinternal::NLv4EmbeddingTensor::hash_value((sirinluinternal::NLv4EmbeddingTensor *)v6);
  }
  if (*((unsigned char *)this + 44))
  {
    uint64_t v7 = *((void *)this + 1);
    if ((*((unsigned char *)this + 44) & 2) != 0) {
      goto LABEL_11;
    }
LABEL_13:
    uint64_t v8 = 0;
    return v5 ^ v3 ^ v6 ^ v7 ^ v8;
  }
  uint64_t v7 = 0;
  if ((*((unsigned char *)this + 44) & 2) == 0) {
    goto LABEL_13;
  }
LABEL_11:
  uint64_t v8 = *((unsigned __int8 *)this + 40);
  return v5 ^ v3 ^ v6 ^ v7 ^ v8;
}

uint64_t sirinluinternalembedding::EmbeddingTensorOutput::makeEmbeddingTensor(uint64_t this)
{
  if (!*(void *)(this + 16)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternalembedding::EmbeddingTensorOutput::makeSentenceEmbeddingTensor(uint64_t this)
{
  if (!*(void *)(this + 32)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternal::PlanOverrideValue::formatText(sirinluinternal::PlanOverrideValue *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((void *)this + 1)) {
    PB::TextFormatter::format();
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluinternal::PlanOverrideValue::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(void *)(this + 8)) {
    return PB::Writer::write();
  }
  return this;
}

uint64_t sirinluinternal::PlanOverrideValue::readFrom(sirinluinternal::PlanOverrideValue *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluinternal::PlanOverrideValue::~PlanOverrideValue(sirinluinternal::PlanOverrideValue *this)
{
  sirinluinternal::PlanOverrideValue::~PlanOverrideValue(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t vars8;

  unint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1F232C348;
  *((void *)this + 1) = 0;
  if (v2) {
    std::default_delete<std::string>::operator()[abi:ne180100](v2);
  }
  PB::Base::~Base(this);
}

void *sirinluinternal::PlanOverrideValue::PlanOverrideValue(void *this)
{
  *this = &unk_1F232C348;
  this[1] = 0;
  return this;
}

{
  *this = &unk_1F232C348;
  this[1] = 0;
  return this;
}

void *sirinluinternal::PlanOverrideValue::PlanOverrideValue(void *this, const sirinluinternal::PlanOverrideValue *a2)
{
  *this = &unk_1F232C348;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const sirinluinternal::PlanOverrideValue *sirinluinternal::PlanOverrideValue::operator=(const sirinluinternal::PlanOverrideValue *a1, const sirinluinternal::PlanOverrideValue *a2)
{
  if (a1 != a2)
  {
    sirinluinternal::PlanOverrideValue::PlanOverrideValue(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    sirinluinternal::PlanOverrideValue::~PlanOverrideValue((sirinluinternal::PlanOverrideValue *)&v5);
  }
  return a1;
}

uint64_t sirinluinternal::swap(uint64_t this, sirinluinternal::PlanOverrideValue *a2, sirinluinternal::PlanOverrideValue *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *sirinluinternal::PlanOverrideValue::PlanOverrideValue(void *a1, uint64_t a2)
{
  *a1 = &unk_1F232C348;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    std::default_delete<std::string>::operator()[abi:ne180100](v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_1F232C348;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    std::default_delete<std::string>::operator()[abi:ne180100](v4);
  }
  return a1;
}

uint64_t sirinluinternal::PlanOverrideValue::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = &unk_1F232C348;
    v6[1] = v4;
    sirinluinternal::PlanOverrideValue::~PlanOverrideValue((sirinluinternal::PlanOverrideValue *)v6);
  }
  return a1;
}

uint64_t sirinluinternal::PlanOverrideValue::operator==(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned __int8 **)(a1 + 8);
  uint64_t v3 = *(unsigned __int8 ***)(a2 + 8);
  uint64_t result = v3 == 0;
  if (!v2) {
    return result;
  }
  if (!v3) {
    return 0;
  }
  uint64_t v5 = v2[23];
  if ((v5 & 0x80u) == 0) {
    uint64_t v6 = (unsigned __int8 *)v2[23];
  }
  else {
    uint64_t v6 = (unsigned __int8 *)*((void *)v2 + 1);
  }
  uint64_t v7 = (unsigned __int8 *)*((unsigned __int8 *)v3 + 23);
  int v8 = (char)v7;
  if ((char)v7 < 0) {
    uint64_t v7 = v3[1];
  }
  if (v6 != v7) {
    return 0;
  }
  if (v8 >= 0) {
    unsigned int v9 = *(unsigned __int8 **)(a2 + 8);
  }
  else {
    unsigned int v9 = *v3;
  }
  if ((v5 & 0x80) != 0) {
    return !memcmp(*(const void **)v2, v9, *((void *)v2 + 1));
  }
  if (!v2[23]) {
    return 1;
  }
  uint64_t v10 = v5 - 1;
  do
  {
    int v12 = *v2++;
    int v11 = v12;
    int v14 = *v9++;
    int v13 = v14;
    BOOL v16 = v10-- != 0;
    uint64_t result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

unint64_t sirinluinternal::PlanOverrideValue::hash_value(sirinluinternal::PlanOverrideValue *this)
{
  unint64_t result = *((void *)this + 1);
  if (result) {
    return std::__string_hash<char>::operator()[abi:ne180100](result);
  }
  return result;
}

void sub_1C8B02D24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C8B02DC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B033A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26)
{
  _Unwind_Resume(a1);
}

void sub_1C8B035C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B03A84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22)
{
  _Unwind_Resume(a1);
}

void sub_1C8B042F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C8B04730(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B0497C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B04BDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B04D84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B04E48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B04ED4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B04F60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B05120(_Unwind_Exception *a1)
{
  uint64_t v5 = v3;

  _Unwind_Resume(a1);
}

void sub_1C8B05210(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1C8B055B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C8B05700(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B0579C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B05838(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B058D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B05970(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B05A0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B05AA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B05B44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B05BB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B05E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C8B06010(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B06124(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B06238(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B0634C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B06460(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B06574(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B06688(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B06D74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B06F3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B06FF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B07098(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B07404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C8B077C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B07A84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B07DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C8B08084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C8B082C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B08524(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B08A2C(_Unwind_Exception *a1)
{
  uint64_t v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1C8B08C8C(_Unwind_Exception *a1)
{
  uint64_t v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1C8B08F08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B09494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C8B09670(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B096F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B09980(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B09C8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B09E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PB::Writer *a9, char a10)
{
  std::unique_ptr<PB::Writer>::reset[abi:ne180100](&a9);
  sirinluexternal::UsoGraph::~UsoGraph((sirinluexternal::UsoGraph *)&a10);
  _Unwind_Resume(a1);
}

void sub_1C8B0A23C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C8B0A3C4(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1C8B0A5A0(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1C8B0A71C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B0A8D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B0A9B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B0ABE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B0AEC0(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1C8B0B0C4(_Unwind_Exception *a1)
{
  uint64_t v5 = v3;

  _Unwind_Resume(a1);
}

void sub_1C8B0B2C8(_Unwind_Exception *a1)
{
  int v8 = v5;

  _Unwind_Resume(a1);
}

void sub_1C8B0B440(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1C8B0B9FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B0C240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, std::__shared_weak_count *a11, void *a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,std::__shared_weak_count *a52,uint64_t a53)
{
  std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100](&a50);
  if (a52) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a52);
  }
  uint64_t v56 = a53;
  a53 = 0;
  if (v56) {
    (*(void (**)(uint64_t))(*(void *)v56 + 8))(v56);
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }

  _Unwind_Resume(a1);
}

void std::__shared_weak_count::__release_shared[abi:ne180100](std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

uint64_t std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    MEMORY[0x1CB772330]();
    JUMPOUT(0x1CB772580);
  }
  return result;
}

void sub_1C8B0C5E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B0C6F8(_Unwind_Exception *a1)
{
  uint64_t v6 = v4;

  _Unwind_Resume(a1);
}

void sub_1C8B0C818(_Unwind_Exception *a1)
{
  uint64_t v6 = v4;

  _Unwind_Resume(a1);
}

void sub_1C8B0C9F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B0CB68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B0CCC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B0CE3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B0D140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C8B0D420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C8B0D5FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B0DA1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C8B0DD00(_Unwind_Exception *a1)
{
  uint64_t v7 = v5;

  _Unwind_Resume(a1);
}

void sub_1C8B0DE80(_Unwind_Exception *a1)
{
  uint64_t v7 = v5;

  _Unwind_Resume(a1);
}

void sub_1C8B0DF9C(_Unwind_Exception *a1)
{
  uint64_t v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1C8B0E0C4(_Unwind_Exception *a1)
{
  uint64_t v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1C8B0E1D8(_Unwind_Exception *a1)
{
  uint64_t v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1C8B0E2F0(_Unwind_Exception *a1)
{
  uint64_t v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1C8B0E404(_Unwind_Exception *a1)
{
  uint64_t v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1C8B0E52C(_Unwind_Exception *a1)
{
  uint64_t v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1C8B0E680(_Unwind_Exception *a1)
{
  uint64_t v7 = v6;

  _Unwind_Resume(a1);
}

void sub_1C8B0E79C(_Unwind_Exception *a1)
{
  uint64_t v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1C8B0EB24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C8B0EE18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B0EF78(_Unwind_Exception *a1)
{
  uint64_t v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1C8B0F0CC(_Unwind_Exception *a1)
{
  uint64_t v7 = v5;

  _Unwind_Resume(a1);
}

void sub_1C8B0F284(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B0F3DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sirinluexternal::UtteranceAlignment::formatText(sirinluexternal::UtteranceAlignment *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 40);
  if (v5)
  {
    PB::TextFormatter::format(a2, "asr_hypothesis_index");
    char v5 = *((unsigned char *)this + 40);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(a2, "node_index");
  }
  uint64_t v6 = (uint64_t *)*((void *)this + 1);
  uint64_t v7 = (uint64_t *)*((void *)this + 2);
  while (v6 != v7)
  {
    uint64_t v8 = *v6++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v8 + 32))(v8, a2, "spans");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluexternal::UtteranceAlignment::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if (*(unsigned char *)(this + 40)) {
    this = PB::Writer::writeVarInt(a2);
  }
  uint64_t v4 = *(const PB::Base ***)(v3 + 8);
  char v5 = *(const PB::Base ***)(v3 + 16);
  while (v4 != v5)
  {
    uint64_t v6 = *v4++;
    this = PB::Writer::writeSubmessage(a2, v6);
  }
  if ((*(unsigned char *)(v3 + 40) & 2) != 0)
  {
    return PB::Writer::writeVarInt(a2);
  }
  return this;
}

uint64_t sirinluexternal::UtteranceAlignment::readFrom(sirinluexternal::UtteranceAlignment *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_25:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v21 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((unsigned char *)this + 40) |= 2u;
        unint64_t v30 = *((void *)a2 + 1);
        unint64_t v31 = *((void *)a2 + 2);
        uint64_t v32 = *(void *)a2;
        if (v30 > 0xFFFFFFFFFFFFFFF5 || v30 + 10 > v31)
        {
          char v38 = 0;
          unsigned int v39 = 0;
          uint64_t v35 = 0;
          if (v31 <= v30) {
            unint64_t v31 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v31 == v30)
            {
              LODWORD(v35) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_62;
            }
            unint64_t v40 = v30 + 1;
            char v41 = *(unsigned char *)(v32 + v30);
            *((void *)a2 + 1) = v40;
            v35 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0) {
              break;
            }
            v38 += 7;
            unint64_t v30 = v40;
            BOOL v14 = v39++ > 8;
            if (v14)
            {
LABEL_50:
              LODWORD(v35) = 0;
              goto LABEL_62;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v35) = 0;
          }
        }
        else
        {
          char v33 = 0;
          unsigned int v34 = 0;
          uint64_t v35 = 0;
          while (1)
          {
            unint64_t v36 = v30 + 1;
            *((void *)a2 + 1) = v30 + 1;
            char v37 = *(unsigned char *)(v32 + v30);
            v35 |= (unint64_t)(v37 & 0x7F) << v33;
            if ((v37 & 0x80) == 0) {
              break;
            }
            v33 += 7;
            unint64_t v30 = v36;
            BOOL v14 = v34++ > 8;
            if (v14) {
              goto LABEL_50;
            }
          }
        }
LABEL_62:
        *((_DWORD *)this + 9) = v35;
      }
      else
      {
        if (v21 == 2) {
          operator new();
        }
        if (v21 == 1)
        {
          *((unsigned char *)this + 40) |= 1u;
          unint64_t v22 = *((void *)a2 + 1);
          unint64_t v23 = *((void *)a2 + 2);
          uint64_t v24 = *(void *)a2;
          if (v22 > 0xFFFFFFFFFFFFFFF5 || v22 + 10 > v23)
          {
            char v42 = 0;
            unsigned int v43 = 0;
            uint64_t v27 = 0;
            if (v23 <= v22) {
              unint64_t v23 = *((void *)a2 + 1);
            }
            while (1)
            {
              if (v23 == v22)
              {
                LODWORD(v27) = 0;
                *((unsigned char *)a2 + 24) = 1;
                goto LABEL_65;
              }
              unint64_t v44 = v22 + 1;
              char v45 = *(unsigned char *)(v24 + v22);
              *((void *)a2 + 1) = v44;
              v27 |= (unint64_t)(v45 & 0x7F) << v42;
              if ((v45 & 0x80) == 0) {
                break;
              }
              v42 += 7;
              unint64_t v22 = v44;
              BOOL v14 = v43++ > 8;
              if (v14)
              {
LABEL_57:
                LODWORD(v27) = 0;
                goto LABEL_65;
              }
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v27) = 0;
            }
          }
          else
          {
            char v25 = 0;
            unsigned int v26 = 0;
            uint64_t v27 = 0;
            while (1)
            {
              unint64_t v28 = v22 + 1;
              *((void *)a2 + 1) = v22 + 1;
              char v29 = *(unsigned char *)(v24 + v22);
              v27 |= (unint64_t)(v29 & 0x7F) << v25;
              if ((v29 & 0x80) == 0) {
                break;
              }
              v25 += 7;
              unint64_t v22 = v28;
              BOOL v14 = v26++ > 8;
              if (v14) {
                goto LABEL_57;
              }
            }
          }
LABEL_65:
          *((_DWORD *)this + 8) = v27;
        }
        else
        {
LABEL_19:
          uint64_t result = PB::Reader::skip(a2);
          if (!result) {
            return result;
          }
        }
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_25;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sub_1C8B0F9F4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sirinluexternal::UtteranceAlignment::~UtteranceAlignment(sirinluexternal::UtteranceAlignment *this)
{
  *(void *)this = &unk_1F232C3D8;
  unint64_t v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
  JUMPOUT(0x1CB772580);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_1F232C3D8;
  unint64_t v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_1F232C3D8;
  unint64_t v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
}

uint64_t sirinluexternal::UtteranceAlignment::UtteranceAlignment(uint64_t this)
{
  *(void *)this = &unk_1F232C3D8;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

{
  *(void *)this = &unk_1F232C3D8;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

uint64_t sirinluexternal::UtteranceAlignment::UtteranceAlignment(uint64_t this, const sirinluexternal::UtteranceAlignment *a2)
{
  *(void *)this = &unk_1F232C3D8;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 40) = 0;
  if (*((unsigned char *)a2 + 40))
  {
    int v2 = *((_DWORD *)a2 + 8);
    *(unsigned char *)(this + 40) = 1;
    *(_DWORD *)(this + 32) = v2;
  }
  if (*((void *)a2 + 1) != *((void *)a2 + 2)) {
    operator new();
  }
  if ((*((unsigned char *)a2 + 40) & 2) != 0)
  {
    int v3 = *((_DWORD *)a2 + 9);
    *(unsigned char *)(this + 40) |= 2u;
    *(_DWORD *)(this + 36) = v3;
  }
  return this;
}

void sub_1C8B0FD58(void *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  __clang_call_terminate(a1);
}

uint64_t sirinluexternal::UtteranceAlignment::operator=(uint64_t a1, const sirinluexternal::UtteranceAlignment *a2)
{
  if ((const sirinluexternal::UtteranceAlignment *)a1 != a2)
  {
    sirinluexternal::UtteranceAlignment::UtteranceAlignment((uint64_t)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v11;
    int v11 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v4;
    uint64_t v5 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v9;
    uint64_t v9 = v5;
    *(void *)&long long v4 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v10;
    uint64_t v10 = v4;
    uint64_t v7 = &unk_1F232C3D8;
    unint64_t v12 = (void **)&v8;
    std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v12);
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t sirinluexternal::swap(uint64_t this, sirinluexternal::UtteranceAlignment *a2, sirinluexternal::UtteranceAlignment *a3)
{
  int v3 = *(_DWORD *)(this + 40);
  *(_DWORD *)(this + 40) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  int v4 = *(_DWORD *)(this + 32);
  *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  uint64_t v5 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = *(void *)(this + 16);
  *(void *)(this + 16) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *(void *)(this + 24);
  *(void *)(this + 24) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  LODWORD(v7) = *(_DWORD *)(this + 36);
  *(_DWORD *)(this + 36) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v7;
  return this;
}

uint64_t sirinluexternal::UtteranceAlignment::UtteranceAlignment(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F232C3D8;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = a1 + 8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  if (*(void *)(a1 + 8))
  {
    std::vector<std::unique_ptr<siricommon::StringValue>>::__clear[abi:ne180100]((void *)(a1 + 8));
    operator delete(*(void **)v4);
    *(void *)uint64_t v4 = 0;
    *(void *)(v4 + 8) = 0;
    *(void *)(v4 + 16) = 0;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  return a1;
}

uint64_t sirinluexternal::UtteranceAlignment::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sirinluexternal::UtteranceAlignment::UtteranceAlignment((uint64_t)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v11;
    int v11 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v4;
    uint64_t v5 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v9;
    uint64_t v9 = v5;
    *(void *)&long long v4 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v10;
    uint64_t v10 = v4;
    uint64_t v7 = &unk_1F232C3D8;
    unint64_t v12 = (void **)&v8;
    std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v12);
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

BOOL sirinluexternal::UtteranceAlignment::operator==(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a1 + 40);
  char v5 = *(unsigned char *)(a2 + 40);
  if (v4)
  {
    if ((*(unsigned char *)(a2 + 40) & 1) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 40))
  {
    return 0;
  }
  uint64_t v7 = *(uint64_t **)(a1 + 8);
  uint64_t v6 = *(uint64_t **)(a1 + 16);
  long long v8 = *(uint64_t **)(a2 + 8);
  if ((char *)v6 - (char *)v7 != *(void *)(a2 + 16) - (void)v8) {
    return 0;
  }
  while (v7 != v6)
  {
    BOOL result = sirinluexternal::UtteranceSpan::operator==(*v7, *v8);
    if (!result) {
      return result;
    }
    ++v7;
    ++v8;
  }
  BOOL result = (v5 & 2) == 0;
  if ((v4 & 2) != 0) {
    return (v5 & 2) != 0 && *(_DWORD *)(a1 + 36) == *(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sirinluexternal::UtteranceAlignment::hash_value(sirinluexternal::UtteranceAlignment *this)
{
  char v2 = *((unsigned char *)this + 40);
  if (v2) {
    uint64_t v3 = *((unsigned int *)this + 8);
  }
  else {
    uint64_t v3 = 0;
  }
  char v4 = (sirinluexternal::UtteranceSpan **)*((void *)this + 1);
  char v5 = (sirinluexternal::UtteranceSpan **)*((void *)this + 2);
  if (v4 != v5)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = *v4++;
      v6 ^= sirinluexternal::UtteranceSpan::hash_value(v7);
    }
    while (v4 != v5);
    if ((v2 & 2) == 0) {
      goto LABEL_8;
    }
LABEL_10:
    uint64_t v8 = *((unsigned int *)this + 9);
    return v6 ^ v3 ^ v8;
  }
  uint64_t v6 = 0;
  if ((*((unsigned char *)this + 40) & 2) != 0) {
    goto LABEL_10;
  }
LABEL_8:
  uint64_t v8 = 0;
  return v6 ^ v3 ^ v8;
}

uint64_t SIRINLUEXTERNALUsoLabelReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  char v4 = (int *)MEMORY[0x1E4F940E0];
  char v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        char v18 = *(void **)(a1 + 8);
        *(void *)(a1 + 8) = v17;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t siricommon::BoolValue::formatText(siricommon::BoolValue *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 12)) {
    PB::TextFormatter::format(a2, "value");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t siricommon::BoolValue::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(unsigned char *)(this + 12)) {
    return PB::Writer::write(a2);
  }
  return this;
}

uint64_t siricommon::BoolValue::readFrom(siricommon::BoolValue *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_24;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 12) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
        if (v2 >= v3)
        {
          BOOL v20 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v19 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v20 = v19 != 0;
        }
        *((unsigned char *)this + 8) = v20;
      }
      else
      {
LABEL_24:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
      }
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_24;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void siricommon::BoolValue::~BoolValue(siricommon::BoolValue *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x1CB772580);
}

uint64_t siricommon::BoolValue::BoolValue(uint64_t this)
{
  *(void *)this = &unk_1F232C428;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

{
  *(void *)this = &unk_1F232C428;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

uint64_t siricommon::BoolValue::BoolValue(uint64_t this, const siricommon::BoolValue *a2)
{
  *(void *)this = &unk_1F232C428;
  *(_DWORD *)(this + 12) = 0;
  if (*((unsigned char *)a2 + 12))
  {
    char v2 = *((unsigned char *)a2 + 8);
    *(unsigned char *)(this + 12) = 1;
    *(unsigned char *)(this + 8) = v2;
  }
  return this;
}

{
  char v2;

  *(void *)this = &unk_1F232C428;
  *(_DWORD *)(this + 12) = 0;
  if (*((unsigned char *)a2 + 12))
  {
    char v2 = *((unsigned char *)a2 + 8);
    *(unsigned char *)(this + 12) = 1;
    *(unsigned char *)(this + 8) = v2;
  }
  return this;
}

uint64_t siricommon::BoolValue::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v7 = &unk_1F232C428;
    char v3 = *(unsigned char *)(a2 + 8);
    int v4 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = *(unsigned char *)(a2 + 12) & 1;
    int v9 = v4;
    char v5 = *(unsigned char *)(a1 + 8);
    *(unsigned char *)(a1 + 8) = v3;
    char v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

{
  int v3;
  char v4;
  int v5;
  void *v7;
  char v8;
  int v9;

  if (a1 != a2)
  {
    uint64_t v7 = &unk_1F232C428;
    char v3 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = 0;
    int v4 = *(unsigned char *)(a2 + 8);
    char v5 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = v3;
    int v9 = v5;
    LOBYTE(v3) = *(unsigned char *)(a1 + 8);
    *(unsigned char *)(a1 + 8) = v4;
    char v8 = v3;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t siricommon::swap(uint64_t this, siricommon::BoolValue *a2, siricommon::BoolValue *a3)
{
  int v3 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  LOBYTE(v3) = *(unsigned char *)(this + 8);
  *(unsigned char *)(this + 8) = *((unsigned char *)a2 + 8);
  *((unsigned char *)a2 + 8) = v3;
  return this;
}

uint64_t siricommon::BoolValue::BoolValue(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &unk_1F232C428;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(unsigned char *)(result + 8) = *(unsigned char *)(a2 + 8);
  return result;
}

{
  *(void *)uint64_t result = &unk_1F232C428;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(unsigned char *)(result + 8) = *(unsigned char *)(a2 + 8);
  return result;
}

BOOL siricommon::BoolValue::operator==(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a1 + 12);
  BOOL result = (*(unsigned char *)(a2 + 12) & 1) == 0;
  if (v3) {
    return (*(unsigned char *)(a2 + 12) & 1) != 0 && *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8);
  }
  return result;
}

uint64_t siricommon::BoolValue::hash_value(siricommon::BoolValue *this)
{
  if (*((unsigned char *)this + 12)) {
    return *((unsigned __int8 *)this + 8);
  }
  else {
    return 0;
  }
}

void sub_1C8B10AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C8B10B70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C8B10BF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C8B10C80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C8B10CD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B10D38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B10DB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SIRINLUINTERNALSNLP_INTERMEDIATEContextFeaturizerResponseReadFrom(uint64_t a1, uint64_t a2)
{
  char v3 = (int *)MEMORY[0x1E4F940E8];
  int v4 = (int *)MEMORY[0x1E4F940E0];
  char v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        unint64_t v17 = objc_alloc_init(SIRINLUINTERNALSNLP_INTERMEDIATELinearizedTensor);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark()
          || (SIRINLUINTERNALSNLP_INTERMEDIATELinearizedTensorReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t SIRINLUEXTERNALPayloadAttachmentInfoReadFrom(uint64_t a1, uint64_t a2)
{
  char v3 = (int *)MEMORY[0x1E4F940E8];
  int v4 = (int *)MEMORY[0x1E4F940E0];
  char v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 12) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_29;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_31;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_29:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v19) = 0;
        }
LABEL_31:
        *(_DWORD *)(a1 + 8) = v19;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sirinluexternal::SystemOffered::formatText(sirinluexternal::SystemOffered *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "offered_act");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluexternal::SystemOffered::writeTo(uint64_t this, PB::Writer *a2)
{
  char v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2);
  }
  return this;
}

uint64_t sirinluexternal::SystemOffered::readFrom(sirinluexternal::SystemOffered *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluexternal::SystemOffered::~SystemOffered(sirinluexternal::SystemOffered *this)
{
  sirinluexternal::SystemOffered::~SystemOffered(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t vars8;

  unint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1F232C478;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

void *sirinluexternal::SystemOffered::SystemOffered(void *this)
{
  *this = &unk_1F232C478;
  this[1] = 0;
  return this;
}

{
  *this = &unk_1F232C478;
  this[1] = 0;
  return this;
}

void *sirinluexternal::SystemOffered::SystemOffered(void *this, const sirinluexternal::SystemOffered *a2)
{
  *this = &unk_1F232C478;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const sirinluexternal::SystemOffered *sirinluexternal::SystemOffered::operator=(const sirinluexternal::SystemOffered *a1, const sirinluexternal::SystemOffered *a2)
{
  if (a1 != a2)
  {
    sirinluexternal::SystemOffered::SystemOffered(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    sirinluexternal::SystemOffered::~SystemOffered((sirinluexternal::SystemOffered *)&v5);
  }
  return a1;
}

uint64_t sirinluexternal::swap(uint64_t this, sirinluexternal::SystemOffered *a2, sirinluexternal::SystemOffered *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *sirinluexternal::SystemOffered::SystemOffered(void *a1, uint64_t a2)
{
  *a1 = &unk_1F232C478;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_1F232C478;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t sirinluexternal::SystemOffered::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = &unk_1F232C478;
    v6[1] = v4;
    sirinluexternal::SystemOffered::~SystemOffered((sirinluexternal::SystemOffered *)v6);
  }
  return a1;
}

BOOL sirinluexternal::SystemOffered::operator==(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a2 + 8);
  if (v2) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    return (v2 | v3) == 0;
  }
  else {
    return sirinluexternal::UserDialogAct::operator==((void *)v2, (void *)v3);
  }
}

sirinluexternal::UserDialogAct *sirinluexternal::SystemOffered::hash_value(sirinluexternal::SystemOffered *this)
{
  uint64_t result = (sirinluexternal::UserDialogAct *)*((void *)this + 1);
  if (result) {
    return (sirinluexternal::UserDialogAct *)sirinluexternal::UserDialogAct::hash_value(result);
  }
  return result;
}

uint64_t sirinluexternal::SystemOffered::makeOfferedAct(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternal::UsoLabel::formatText(sirinluexternal::UsoLabel *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((void *)this + 1)) {
    PB::TextFormatter::format();
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluexternal::UsoLabel::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(void *)(this + 8)) {
    return PB::Writer::write();
  }
  return this;
}

uint64_t sirinluexternal::UsoLabel::readFrom(sirinluexternal::UsoLabel *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluexternal::UsoLabel::~UsoLabel(sirinluexternal::UsoLabel *this)
{
  sirinluexternal::UsoLabel::~UsoLabel(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t vars8;

  unint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1F232C4C8;
  *((void *)this + 1) = 0;
  if (v2) {
    std::default_delete<std::string>::operator()[abi:ne180100](v2);
  }
  PB::Base::~Base(this);
}

void *sirinluexternal::UsoLabel::UsoLabel(void *this)
{
  *this = &unk_1F232C4C8;
  this[1] = 0;
  return this;
}

{
  *this = &unk_1F232C4C8;
  this[1] = 0;
  return this;
}

void *sirinluexternal::UsoLabel::UsoLabel(void *this, const sirinluexternal::UsoLabel *a2)
{
  *this = &unk_1F232C4C8;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const sirinluexternal::UsoLabel *sirinluexternal::UsoLabel::operator=(const sirinluexternal::UsoLabel *a1, const sirinluexternal::UsoLabel *a2)
{
  if (a1 != a2)
  {
    sirinluexternal::UsoLabel::UsoLabel(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    sirinluexternal::UsoLabel::~UsoLabel((sirinluexternal::UsoLabel *)&v5);
  }
  return a1;
}

uint64_t sirinluexternal::swap(uint64_t this, sirinluexternal::UsoLabel *a2, sirinluexternal::UsoLabel *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *sirinluexternal::UsoLabel::UsoLabel(void *a1, uint64_t a2)
{
  *a1 = &unk_1F232C4C8;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    std::default_delete<std::string>::operator()[abi:ne180100](v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_1F232C4C8;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    std::default_delete<std::string>::operator()[abi:ne180100](v4);
  }
  return a1;
}

uint64_t sirinluexternal::UsoLabel::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = &unk_1F232C4C8;
    v6[1] = v4;
    sirinluexternal::UsoLabel::~UsoLabel((sirinluexternal::UsoLabel *)v6);
  }
  return a1;
}

uint64_t sirinluexternal::UsoLabel::operator==(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned __int8 **)(a1 + 8);
  uint64_t v3 = *(unsigned __int8 ***)(a2 + 8);
  uint64_t result = v3 == 0;
  if (!v2) {
    return result;
  }
  if (!v3) {
    return 0;
  }
  uint64_t v5 = v2[23];
  if ((v5 & 0x80u) == 0) {
    uint64_t v6 = (unsigned __int8 *)v2[23];
  }
  else {
    uint64_t v6 = (unsigned __int8 *)*((void *)v2 + 1);
  }
  uint64_t v7 = (unsigned __int8 *)*((unsigned __int8 *)v3 + 23);
  int v8 = (char)v7;
  if ((char)v7 < 0) {
    uint64_t v7 = v3[1];
  }
  if (v6 != v7) {
    return 0;
  }
  if (v8 >= 0) {
    unsigned int v9 = *(unsigned __int8 **)(a2 + 8);
  }
  else {
    unsigned int v9 = *v3;
  }
  if ((v5 & 0x80) != 0) {
    return !memcmp(*(const void **)v2, v9, *((void *)v2 + 1));
  }
  if (!v2[23]) {
    return 1;
  }
  uint64_t v10 = v5 - 1;
  do
  {
    int v12 = *v2++;
    int v11 = v12;
    int v14 = *v9++;
    int v13 = v14;
    BOOL v16 = v10-- != 0;
    uint64_t result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

unint64_t sirinluexternal::UsoLabel::hash_value(sirinluexternal::UsoLabel *this)
{
  unint64_t result = *((void *)this + 1);
  if (result) {
    return std::__string_hash<char>::operator()[abi:ne180100](result);
  }
  return result;
}

BOOL SIRINLUEXTERNALSystemReportedSuccessReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = objc_alloc_init(SIRINLUEXTERNALUUID);
        objc_storeStrong((id *)(a1 + 16), v17);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_30;
        }
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_27:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v17 = objc_alloc_init(SIRINLUEXTERNALUsoGraph);
    objc_storeStrong((id *)(a1 + 8), v17);
    if (!PBReaderPlaceMark() || !SIRINLUEXTERNALUsoGraphReadFrom((id *)&v17->super.super.isa, a2))
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t SIRINLUINTERNALMENTION_RESOLVERMentionResolverRequestReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = objc_alloc_init(SIRINLUEXTERNALUUID);
        uint64_t v18 = 80;
        goto LABEL_23;
      case 2u:
        char v17 = objc_alloc_init(SIRINLUEXTERNALUUID);
        uint64_t v18 = 72;
LABEL_23:
        objc_storeStrong((id *)(a1 + v18), v17);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_73;
        }
        goto LABEL_60;
      case 3u:
        uint64_t v20 = PBReaderReadString();
        uint64_t v21 = 88;
        goto LABEL_28;
      case 4u:
        uint64_t v20 = PBReaderReadString();
        uint64_t v21 = 104;
LABEL_28:
        char v22 = *(void **)(a1 + v21);
        *(void *)(a1 + v21) = v20;

        goto LABEL_61;
      case 5u:
        char v17 = objc_alloc_init(SIRINLUINTERNALTokenChain);
        objc_storeStrong((id *)(a1 + 96), v17);
        if (!PBReaderPlaceMark() || !SIRINLUINTERNALTokenChainReadFrom((char *)v17, a2)) {
          goto LABEL_73;
        }
        goto LABEL_60;
      case 6u:
        char v17 = objc_alloc_init(SIRINLUINTERNALNLv4EmbeddingTensor);
        objc_storeStrong((id *)(a1 + 48), v17);
        if (!PBReaderPlaceMark()
          || (SIRINLUINTERNALNLv4EmbeddingTensorReadFrom((uint64_t)v17, a2) & 1) == 0)
        {
          goto LABEL_73;
        }
        goto LABEL_60;
      case 7u:
        char v17 = objc_alloc_init(SIRINLUEXTERNALEntityCandidate);
        [(id)a1 addEntityCandidates:v17];
        if (!PBReaderPlaceMark()
          || !SIRINLUEXTERNALEntityCandidateReadFrom((id *)&v17->super.super.isa, a2))
        {
          goto LABEL_73;
        }
        goto LABEL_60;
      case 8u:
        char v17 = objc_alloc_init(SIRINLUINTERNALMatchingSpan);
        [(id)a1 addDetectedMentions:v17];
        goto LABEL_58;
      case 9u:
        char v23 = 0;
        unsigned int v24 = 0;
        uint64_t v25 = 0;
        *(unsigned char *)(a1 + 112) |= 1u;
        while (2)
        {
          uint64_t v26 = *v3;
          unint64_t v27 = *(void *)(a2 + v26);
          if (v27 == -1 || v27 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v27);
            *(void *)(a2 + v26) = v27 + 1;
            v25 |= (unint64_t)(v28 & 0x7F) << v23;
            if (v28 < 0)
            {
              v23 += 7;
              BOOL v14 = v24++ >= 9;
              if (v14)
              {
                uint64_t v25 = 0;
                goto LABEL_66;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v25 = 0;
        }
LABEL_66:
        uint64_t v34 = 8;
        goto LABEL_71;
      case 0xAu:
        char v17 = objc_alloc_init(SIRINLUINTERNALMatchingSpan);
        [(id)a1 addMatchingSpans:v17];
        goto LABEL_58;
      case 0xBu:
        char v29 = 0;
        unsigned int v30 = 0;
        uint64_t v25 = 0;
        *(unsigned char *)(a1 + 112) |= 2u;
        while (2)
        {
          uint64_t v31 = *v3;
          unint64_t v32 = *(void *)(a2 + v31);
          if (v32 == -1 || v32 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v33 = *(unsigned char *)(*(void *)(a2 + *v7) + v32);
            *(void *)(a2 + v31) = v32 + 1;
            v25 |= (unint64_t)(v33 & 0x7F) << v29;
            if (v33 < 0)
            {
              v29 += 7;
              BOOL v14 = v30++ >= 9;
              if (v14)
              {
                uint64_t v25 = 0;
                goto LABEL_70;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v25 = 0;
        }
LABEL_70:
        uint64_t v34 = 16;
LABEL_71:
        *(void *)(a1 + v34) = v25;
        goto LABEL_61;
      case 0xCu:
        char v17 = objc_alloc_init(SIRINLUEXTERNALRequestID);
        objc_storeStrong((id *)(a1 + 24), v17);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALRequestIDReadFrom((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_73;
        }
        goto LABEL_60;
      case 0xDu:
        char v17 = objc_alloc_init(SIRINLUINTERNALMatchingSpan);
        [(id)a1 addContextualSpans:v17];
LABEL_58:
        if PBReaderPlaceMark() && (SIRINLUINTERNALMatchingSpanReadFrom((uint64_t)v17, a2))
        {
LABEL_60:
          PBReaderRecallMark();

LABEL_61:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_73:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_61;
    }
  }
}

uint64_t sirinluinternalplan_generation::VariableEventIdPair::formatText(sirinluinternalplan_generation::VariableEventIdPair *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((void *)this + 1)) {
    PB::TextFormatter::format();
  }
  if (*((void *)this + 2)) {
    PB::TextFormatter::format();
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluinternalplan_generation::VariableEventIdPair::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v2 = this;
  if (*(void *)(this + 16)) {
    this = PB::Writer::write();
  }
  if (*(void *)(v2 + 8))
  {
    return PB::Writer::write();
  }
  return this;
}

BOOL sirinluinternalplan_generation::VariableEventIdPair::readFrom(sirinluinternalplan_generation::VariableEventIdPair *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_24;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 2) {
        operator new();
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_24:
      if ((PB::Reader::skip(a2) & 1) == 0) {
        return 0;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_24;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluinternalplan_generation::VariableEventIdPair::~VariableEventIdPair(sirinluinternalplan_generation::VariableEventIdPair *this)
{
  sirinluinternalplan_generation::VariableEventIdPair::~VariableEventIdPair(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1F232C518;
  unint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    std::default_delete<std::string>::operator()[abi:ne180100](v2);
  }
  unint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    std::default_delete<std::string>::operator()[abi:ne180100](v3);
  }
  PB::Base::~Base(this);
}

void *sirinluinternalplan_generation::VariableEventIdPair::VariableEventIdPair(void *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1F232C518;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1F232C518;
  return this;
}

void *sirinluinternalplan_generation::VariableEventIdPair::VariableEventIdPair(void *this, const sirinluinternalplan_generation::VariableEventIdPair *a2)
{
  *this = &unk_1F232C518;
  this[1] = 0;
  this[2] = 0;
  if (*((void *)a2 + 2)) {
    operator new();
  }
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternalplan_generation::VariableEventIdPair::operator=(uint64_t a1, const sirinluinternalplan_generation::VariableEventIdPair *a2)
{
  if ((const sirinluinternalplan_generation::VariableEventIdPair *)a1 != a2)
  {
    sirinluinternalplan_generation::VariableEventIdPair::VariableEventIdPair(&v5, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    long long v6 = v3;
    sirinluinternalplan_generation::VariableEventIdPair::~VariableEventIdPair((sirinluinternalplan_generation::VariableEventIdPair *)&v5);
  }
  return a1;
}

uint64_t sirinluinternalplan_generation::swap(uint64_t this, sirinluinternalplan_generation::VariableEventIdPair *a2, sirinluinternalplan_generation::VariableEventIdPair *a3)
{
  uint64_t v3 = *(void *)(this + 16);
  *(void *)(this + 16) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v3;
  uint64_t v4 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  return this;
}

void *sirinluinternalplan_generation::VariableEventIdPair::VariableEventIdPair(void *a1, uint64_t a2)
{
  a1[1] = 0;
  uint64_t v4 = a1 + 1;
  *a1 = &unk_1F232C518;
  a1[2] = 0;
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  uint64_t v6 = a1[2];
  a1[2] = v5;
  if (v6) {
    std::default_delete<std::string>::operator()[abi:ne180100](v6);
  }
  uint64_t v7 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v8 = *v4;
  *uint64_t v4 = v7;
  if (v8) {
    std::default_delete<std::string>::operator()[abi:ne180100](v8);
  }
  return a1;
}

uint64_t sirinluinternalplan_generation::VariableEventIdPair::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sirinluinternalplan_generation::VariableEventIdPair::VariableEventIdPair(&v5, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    long long v6 = v3;
    sirinluinternalplan_generation::VariableEventIdPair::~VariableEventIdPair((sirinluinternalplan_generation::VariableEventIdPair *)&v5);
  }
  return a1;
}

uint64_t sirinluinternalplan_generation::VariableEventIdPair::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned __int8 **)(a1 + 16);
  uint64_t v5 = *(unsigned __int8 ***)(a2 + 16);
  if (v4)
  {
    if (!v5) {
      return 0;
    }
    uint64_t v6 = v4[23];
    if ((v6 & 0x80u) == 0) {
      uint64_t v7 = (unsigned __int8 *)v4[23];
    }
    else {
      uint64_t v7 = (unsigned __int8 *)*((void *)v4 + 1);
    }
    uint64_t v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    int v9 = (char)v8;
    if ((char)v8 < 0) {
      uint64_t v8 = v5[1];
    }
    if (v7 != v8) {
      return 0;
    }
    if (v9 >= 0) {
      unint64_t v10 = *(unsigned __int8 **)(a2 + 16);
    }
    else {
      unint64_t v10 = *v5;
    }
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v10, *((void *)v4 + 1))) {
        return 0;
      }
    }
    else if (v4[23])
    {
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6) {
          goto LABEL_21;
        }
      }
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
LABEL_21:
  char v12 = *(unsigned __int8 **)(a1 + 8);
  BOOL v13 = *(unsigned __int8 ***)(a2 + 8);
  uint64_t result = v13 == 0;
  if (!v12) {
    return result;
  }
  if (!v13) {
    return 0;
  }
  uint64_t v14 = v12[23];
  if ((v14 & 0x80u) == 0) {
    unsigned int v15 = (unsigned __int8 *)v12[23];
  }
  else {
    unsigned int v15 = (unsigned __int8 *)*((void *)v12 + 1);
  }
  unint64_t v16 = (unsigned __int8 *)*((unsigned __int8 *)v13 + 23);
  int v17 = (char)v16;
  if ((char)v16 < 0) {
    unint64_t v16 = v13[1];
  }
  if (v15 != v16) {
    return 0;
  }
  if (v17 >= 0) {
    uint64_t v18 = *(unsigned __int8 **)(a2 + 8);
  }
  else {
    uint64_t v18 = *v13;
  }
  if ((v14 & 0x80) != 0) {
    return !memcmp(*(const void **)v12, v18, *((void *)v12 + 1));
  }
  if (!v12[23]) {
    return 1;
  }
  uint64_t v19 = v14 - 1;
  do
  {
    int v21 = *v12++;
    int v20 = v21;
    int v23 = *v18++;
    int v22 = v23;
    BOOL v25 = v19-- != 0;
    uint64_t result = v20 == v22;
  }
  while (v20 == v22 && v25);
  return result;
}

unint64_t sirinluinternalplan_generation::VariableEventIdPair::hash_value(sirinluinternalplan_generation::VariableEventIdPair *this)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    unint64_t v3 = std::__string_hash<char>::operator()[abi:ne180100](v2);
  }
  else {
    unint64_t v3 = 0;
  }
  unint64_t v4 = *((void *)this + 1);
  if (v4) {
    unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100](v4);
  }
  return v4 ^ v3;
}

uint64_t SIRINLUINTERNALQUERYREWRITEQRHypothesisReadFrom(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v15 = v9++ >= 9;
        if (v15)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          uint64_t v18 = objc_alloc_init(SIRINLUEXTERNALUUID);
          objc_storeStrong((id *)(a1 + 16), v18);
          if PBReaderPlaceMark() && (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v18, a2))
          {
            PBReaderRecallMark();

            continue;
          }

          return 0;
        case 2u:
          uint64_t v20 = PBReaderReadString();
          int v21 = *(void **)(a1 + 32);
          *(void *)(a1 + 32) = v20;

          continue;
        case 3u:
          *(unsigned char *)(a1 + 40) |= 1u;
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v24 = *(void *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v24 = 0;
          }
          *(void *)(a1 + 8) = v24;
          continue;
        case 4u:
          char v25 = 0;
          unsigned int v26 = 0;
          uint64_t v27 = 0;
          *(unsigned char *)(a1 + 40) |= 2u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v28 = *v3;
        uint64_t v29 = *(void *)(a2 + v28);
        unint64_t v30 = v29 + 1;
        if (v29 == -1 || v30 > *(void *)(a2 + *v4)) {
          break;
        }
        char v31 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
        *(void *)(a2 + v28) = v30;
        v27 |= (unint64_t)(v31 & 0x7F) << v25;
        if ((v31 & 0x80) == 0) {
          goto LABEL_36;
        }
        v25 += 7;
        BOOL v15 = v26++ >= 9;
        if (v15)
        {
          LODWORD(v27) = 0;
          goto LABEL_38;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_36:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v27) = 0;
      }
LABEL_38:
      *(_DWORD *)(a1 + 24) = v27;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1C8B16C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  MEMORY[0x1CB772580](v7, 0x1030C40E9F947FBLL);
  apple::aiml::flatbuffers2::FlatBufferBuilder::~FlatBufferBuilder((apple::aiml::flatbuffers2::FlatBufferBuilder *)va);
  _Unwind_Resume(a1);
}

uint64_t apple::aiml::flatbuffers2::FlatBufferBuilder::Finish(apple::aiml::flatbuffers2::FlatBufferBuilder *this, unsigned int a2, const char *a3)
{
  apple::aiml::flatbuffers2::FlatBufferBuilder::NotNested((uint64_t)this);
  *((void *)this + 7) = *((void *)this + 5);
  apple::aiml::flatbuffers2::FlatBufferBuilder::PreAlign(this, 4, *((void *)this + 9));
  int v5 = apple::aiml::flatbuffers2::FlatBufferBuilder::ReferTo(this, a2);
  uint64_t result = apple::aiml::flatbuffers2::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)this, v5);
  *((unsigned char *)this + 71) = 1;
  return result;
}

double apple::aiml::flatbuffers2::FlatBufferBuilder::Release(apple::aiml::flatbuffers2::FlatBufferBuilder *this, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 71)) {
    __assert_rtn("Finished", "flatbuffers.h", 1319, "finished");
  }
  int v2 = *(unsigned __int8 *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)this = *(void *)a2;
  *((unsigned char *)this + 8) = v2;
  *((void *)this + 2) = v4;
  *((void *)this + 3) = v3;
  *((void *)this + 4) = v5;
  *((void *)this + 5) = (v3 + v4 - v5);
  if (v2)
  {
    *(void *)a2 = 0;
    *(unsigned char *)(a2 + 8) = 0;
  }
  double result = 0.0;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  return result;
}

void apple::aiml::flatbuffers2::FlatBufferBuilder::~FlatBufferBuilder(apple::aiml::flatbuffers2::FlatBufferBuilder *this)
{
  uint64_t v2 = *((void *)this + 11);
  if (v2)
  {
    std::__tree<apple::aiml::flatbuffers2::Offset<apple::aiml::flatbuffers2::String>,apple::aiml::flatbuffers2::FlatBufferBuilder::StringOffsetCompare,std::allocator<apple::aiml::flatbuffers2::Offset<apple::aiml::flatbuffers2::String>>>::destroy(*(void **)(v2 + 8));
    MEMORY[0x1CB772580](v2, 0x1060C40C2B13FB5);
  }
  uint64_t v3 = *((void *)this + 5);
  if (v3)
  {
    if (*(void *)this) {
      (*(void (**)(void))(**(void **)this + 24))(*(void *)this);
    }
    else {
      MEMORY[0x1CB772560](v3, 0x1000C8077774924);
    }
  }
  *((void *)this + 5) = 0;
  if (*((unsigned char *)this + 8) && *(void *)this) {
    (*(void (**)(void))(**(void **)this + 8))(*(void *)this);
  }
  *(void *)this = 0;
  *((unsigned char *)this + 8) = 0;
}

void std::__tree<apple::aiml::flatbuffers2::Offset<apple::aiml::flatbuffers2::String>,apple::aiml::flatbuffers2::FlatBufferBuilder::StringOffsetCompare,std::allocator<apple::aiml::flatbuffers2::Offset<apple::aiml::flatbuffers2::String>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<apple::aiml::flatbuffers2::Offset<apple::aiml::flatbuffers2::String>,apple::aiml::flatbuffers2::FlatBufferBuilder::StringOffsetCompare,std::allocator<apple::aiml::flatbuffers2::Offset<apple::aiml::flatbuffers2::String>>>::destroy(*a1);
    std::__tree<apple::aiml::flatbuffers2::Offset<apple::aiml::flatbuffers2::String>,apple::aiml::flatbuffers2::FlatBufferBuilder::StringOffsetCompare,std::allocator<apple::aiml::flatbuffers2::Offset<apple::aiml::flatbuffers2::String>>>::destroy(a1[1]);
    operator delete(a1);
  }
}

char *apple::aiml::flatbuffers2::Allocator::reallocate_downward(apple::aiml::flatbuffers2::Allocator *this, unsigned __int8 *a2, unint64_t a3, unint64_t a4, size_t a5, size_t a6)
{
  if (a4 <= a3) {
    __assert_rtn("reallocate_downward", "flatbuffers.h", 687, "new_size > old_size");
  }
  uint64_t v12 = (char *)(*(uint64_t (**)(apple::aiml::flatbuffers2::Allocator *, unint64_t))(*(void *)this + 16))(this, a4);
  memcpy(&v12[a4 - a5], &a2[a3 - a5], a5);
  memcpy(v12, a2, a6);
  (*(void (**)(apple::aiml::flatbuffers2::Allocator *, unsigned __int8 *, unint64_t))(*(void *)this + 24))(this, a2, a3);
  return v12;
}

void apple::aiml::flatbuffers2::DefaultAllocator::deallocate(apple::aiml::flatbuffers2::DefaultAllocator *this, unsigned __int8 *a2)
{
  if (a2) {
    JUMPOUT(0x1CB772560);
  }
}

void apple::aiml::flatbuffers2::DefaultAllocator::allocate(apple::aiml::flatbuffers2::DefaultAllocator *this)
{
}

void apple::aiml::flatbuffers2::DefaultAllocator::~DefaultAllocator(apple::aiml::flatbuffers2::DefaultAllocator *this)
{
}

void apple::aiml::flatbuffers2::DetachedBuffer::~DetachedBuffer(apple::aiml::flatbuffers2::DetachedBuffer *this)
{
  uint64_t v3 = (_OWORD *)((char *)this + 16);
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    uint64_t v4 = *(void *)this;
    if (*(void *)this) {
      (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
    }
    else {
      MEMORY[0x1CB772560](v2, 0x1000C8077774924);
    }
  }
  if (*((unsigned char *)this + 8) && *(void *)this) {
    (*(void (**)(void))(**(void **)this + 8))(*(void *)this);
  }
  *(void *)this = 0;
  *((unsigned char *)this + 8) = 0;
  *uint64_t v3 = 0u;
  v3[1] = 0u;
}

uint64_t apple::aiml::flatbuffers2::FlatBufferBuilder::NotNested(uint64_t this)
{
  if (*(unsigned char *)(this + 70)) {
    __assert_rtn("NotNested", "flatbuffers.h", 1432, "!nested");
  }
  if (*(_DWORD *)(this + 64)) {
    __assert_rtn("NotNested", "flatbuffers.h", 1434, "!num_field_loc");
  }
  return this;
}

unint64_t apple::aiml::flatbuffers2::FlatBufferBuilder::PreAlign(apple::aiml::flatbuffers2::FlatBufferBuilder *this, uint64_t a2, unint64_t a3)
{
  if (*((void *)this + 9) < a3) {
    *((void *)this + 9) = a3;
  }
  return apple::aiml::flatbuffers2::vector_downward::fill(this, (a3 - 1) & (-a2 - (*((_DWORD *)this + 8) - *((_DWORD *)this + 12) + *((_DWORD *)this + 10))));
}

unint64_t apple::aiml::flatbuffers2::vector_downward::ensure_space(apple::aiml::flatbuffers2::vector_downward *this, unint64_t a2)
{
  uint64_t v2 = (char *)*((void *)this + 6);
  unint64_t v3 = *((void *)this + 7);
  if ((unint64_t)v2 < v3
    || (uint64_t v6 = (unsigned __int8 *)*((void *)this + 5), v7 = v3 - v6, v3 < (unint64_t)v6))
  {
    __assert_rtn("ensure_space", "flatbuffers.h", 988, "cur_ >= scratch_ && scratch_ >= buf_");
  }
  unint64_t v8 = *((void *)this + 4);
  if ((unint64_t)&v2[-v3] < a2)
  {
    unsigned int v9 = v8 - v2 + v6;
    if (v8) {
      unint64_t v10 = v8 >> 1;
    }
    else {
      unint64_t v10 = *((void *)this + 2);
    }
    if (v10 <= a2) {
      unint64_t v10 = a2;
    }
    unint64_t v11 = (*((void *)this + 3) + v8 + v10 - 1) & -*((void *)this + 3);
    *((void *)this + 4) = v11;
    uint64_t v12 = *(void *)this;
    if (v6)
    {
      if (v12)
      {
        unint64_t v13 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 32))(v12);
      }
      else
      {
        BOOL v15 = &unk_1F232EBB0;
        unint64_t v13 = apple::aiml::flatbuffers2::Allocator::reallocate_downward((apple::aiml::flatbuffers2::Allocator *)&v15, v6, v8, v11, v9, (v3 - v6));
      }
    }
    else
    {
      if (!v12)
      {
        BOOL v15 = &unk_1F232EBB0;
        operator new[]();
      }
      unint64_t v13 = (char *)(*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v12 + 16))(v12, v11);
    }
    LODWORD(v6) = v13;
    unint64_t v8 = *((void *)this + 4);
    uint64_t v2 = &v13[v8 - v9];
    *((void *)this + 5) = v13;
    *((void *)this + 6) = v2;
    *((void *)this + 7) = &v13[v7];
  }
  if ((v8 - v2 + v6) >= 0x7FFFFFFF) {
    __assert_rtn("ensure_space", "flatbuffers.h", 992, "size() < FLATBUFFERS_MAX_BUFFER_SIZE");
  }
  return a2;
}

uint64_t apple::aiml::flatbuffers2::FlatBufferBuilder::ReferTo(apple::aiml::flatbuffers2::FlatBufferBuilder *this, unsigned int a2)
{
  apple::aiml::flatbuffers2::FlatBufferBuilder::Align(this, 4uLL);
  if (!a2
    || (unsigned int v4 = *((_DWORD *)this + 8) - *((_DWORD *)this + 12) + *((_DWORD *)this + 10), v5 = v4 >= a2, v6 = v4 - a2, !v5))
  {
    __assert_rtn("ReferTo", "flatbuffers.h", 1419, "off && off <= GetSize()");
  }
  return v6 + 4;
}

uint64_t apple::aiml::flatbuffers2::FlatBufferBuilder::PushElement<unsigned int>(uint64_t a1, int a2)
{
  apple::aiml::flatbuffers2::FlatBufferBuilder::Align((apple::aiml::flatbuffers2::FlatBufferBuilder *)a1, 4uLL);
  apple::aiml::flatbuffers2::vector_downward::ensure_space((apple::aiml::flatbuffers2::vector_downward *)a1, 4uLL);
  uint64_t v4 = *(void *)(a1 + 48);
  *(_DWORD *)(v4 - 4) = a2;
  v4 -= 4;
  *(void *)(a1 + 48) = v4;
  return (*(_DWORD *)(a1 + 32) - v4 + *(_DWORD *)(a1 + 40));
}

unint64_t apple::aiml::flatbuffers2::FlatBufferBuilder::Align(apple::aiml::flatbuffers2::FlatBufferBuilder *this, unint64_t a2)
{
  if (*((void *)this + 9) < a2) {
    *((void *)this + 9) = a2;
  }
  return apple::aiml::flatbuffers2::vector_downward::fill(this, (a2 - 1) & -(uint64_t)(*((_DWORD *)this + 8) - *((_DWORD *)this + 12) + *((_DWORD *)this + 10)));
}

unint64_t apple::aiml::flatbuffers2::vector_downward::fill(apple::aiml::flatbuffers2::vector_downward *this, unint64_t a2)
{
  unint64_t result = apple::aiml::flatbuffers2::vector_downward::ensure_space(this, a2);
  *((void *)this + 6) -= a2;
  if (a2)
  {
    uint64_t v5 = 0;
    do
      *(unsigned char *)(*((void *)this + 6) + v5++) = 0;
    while (a2 != v5);
  }
  return result;
}

void sub_1C8B17644(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t apple::aiml::flatbuffers2::FlatBufferBuilder::CreateString(apple::aiml::flatbuffers2::FlatBufferBuilder *this, const char *a2, unint64_t a3)
{
  apple::aiml::flatbuffers2::FlatBufferBuilder::NotNested((uint64_t)this);
  apple::aiml::flatbuffers2::FlatBufferBuilder::PreAlign(this, a3 + 1, 4uLL);
  apple::aiml::flatbuffers2::vector_downward::ensure_space(this, 1uLL);
  unsigned int v6 = (unsigned char *)(*((void *)this + 6) - 1);
  *((void *)this + 6) = v6;
  *unsigned int v6 = 0;
  if (a3)
  {
    apple::aiml::flatbuffers2::vector_downward::ensure_space(this, a3);
    int v7 = (void *)(*((void *)this + 6) - a3);
    *((void *)this + 6) = v7;
    memcpy(v7, a2, a3);
  }
  apple::aiml::flatbuffers2::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)this, a3);
  return (*((_DWORD *)this + 8) - *((_DWORD *)this + 12) + *((_DWORD *)this + 10));
}

apple::aiml::flatbuffers2::FlatBufferBuilder *apple::aiml::flatbuffers2::FlatBufferBuilder::AddOffset<apple::aiml::flatbuffers2::String>(apple::aiml::flatbuffers2::FlatBufferBuilder *result, uint64_t a2, unsigned int a3)
{
  if (a3)
  {
    unint64_t v4 = (unint64_t)result;
    int v5 = apple::aiml::flatbuffers2::FlatBufferBuilder::ReferTo(result, a3);
    return (apple::aiml::flatbuffers2::FlatBufferBuilder *)apple::aiml::flatbuffers2::FlatBufferBuilder::AddElement<unsigned int>(v4, a2, v5, 0);
  }
  return result;
}

uint64_t apple::aiml::flatbuffers2::FlatBufferBuilder::EndTable(apple::aiml::flatbuffers2::FlatBufferBuilder *this, int a2)
{
  if (!*((unsigned char *)this + 70)) {
    __assert_rtn("EndTable", "flatbuffers.h", 1450, "nested");
  }
  apple::aiml::flatbuffers2::FlatBufferBuilder::Align(this, 4uLL);
  apple::aiml::flatbuffers2::vector_downward::ensure_space(this, 4uLL);
  uint64_t v4 = *((void *)this + 6);
  *(_DWORD *)(v4 - 4) = 0;
  v4 -= 4;
  *((void *)this + 6) = v4;
  uint64_t v5 = *((void *)this + 4) - v4 + *((void *)this + 5);
  if ((unsigned __int16)(*((_WORD *)this + 34) + 2) <= 4u) {
    unint64_t v6 = 4;
  }
  else {
    unint64_t v6 = (unsigned __int16)(*((_WORD *)this + 34) + 2);
  }
  *((_WORD *)this + 34) = v6;
  apple::aiml::flatbuffers2::vector_downward::ensure_space(this, v6);
  int v7 = (void *)(*((void *)this + 6) - v6);
  *((void *)this + 6) = v7;
  bzero(v7, v6);
  unsigned __int16 v8 = v5 - a2;
  if ((v5 - a2) >= 0x10000) {
    __assert_rtn("EndTable", "flatbuffers.h", 1465, "table_object_size < 0x10000");
  }
  unsigned int v9 = (unsigned __int16 *)*((void *)this + 6);
  if (!v9) {
    __assert_rtn("data", "flatbuffers.h", 1016, "cur_");
  }
  v9[1] = v8;
  *unsigned int v9 = *((_WORD *)this + 34);
  unint64_t v10 = *((void *)this + 7);
  if (!v10) {
    __assert_rtn("scratch_end", "flatbuffers.h", 1026, "scratch_");
  }
  uint64_t v11 = *((unsigned int *)this + 16);
  unint64_t v12 = v10 - 8 * v11;
  if (v11)
  {
    unint64_t v13 = (int *)(v10 - 8 * v11);
    do
    {
      uint64_t v14 = *((unsigned __int16 *)v13 + 2);
      if (*(unsigned __int16 *)((char *)v9 + v14)) {
        __assert_rtn("EndTable", "flatbuffers.h", 1476, "!ReadScalar<voffset_t>(buf_.data() + field_location->id)");
      }
      int v15 = *v13;
      v13 += 2;
      *(unsigned __int16 *)((char *)v9 + v14) = v5 - v15;
    }
    while ((unint64_t)v13 < v10);
  }
  *((void *)this + 7) = v12;
  *((_DWORD *)this + 16) = 0;
  *((_WORD *)this + 34) = 0;
  uint64_t v17 = *((void *)this + 4);
  unint64_t v16 = *((void *)this + 5);
  LODWORD(v18) = v17 - v9 + v16;
  if (*((unsigned char *)this + 81))
  {
    if (!v16) {
      __assert_rtn("scratch_data", "flatbuffers.h", 1021, "buf_");
    }
    if (v16 < v12)
    {
      size_t v19 = *v9;
      uint64_t v20 = v16 + v17;
      int v21 = (unsigned int *)*((void *)this + 5);
      while (1)
      {
        uint64_t v18 = *v21;
        if (v19 == *(unsigned __int16 *)(v20 - v18) && !memcmp((const void *)(v20 - v18), v9, v19)) {
          break;
        }
        if ((unint64_t)++v21 >= v12)
        {
          LODWORD(v18) = v17 - v9 + v16;
          goto LABEL_21;
        }
      }
      unsigned int v9 = (unsigned __int16 *)((char *)v9 + (v17 - v9 + v16 - v5));
      *((void *)this + 6) = v9;
    }
  }
LABEL_21:
  if (v18 == v17 + v16 - v9)
  {
    apple::aiml::flatbuffers2::vector_downward::ensure_space(this, 4uLL);
    uint64_t v22 = (_DWORD *)*((void *)this + 7);
    *uint64_t v22 = v18;
    *((void *)this + 7) = v22 + 1;
    uint64_t v17 = *((void *)this + 4);
    unint64_t v16 = *((void *)this + 5);
  }
  *(_DWORD *)(v16 + v17 - v5) = v18 - v5;
  *((unsigned char *)this + 70) = 0;
  return v5;
}

unint64_t apple::aiml::flatbuffers2::FlatBufferBuilder::AddElement<unsigned int>(unint64_t result, uint64_t a2, int a3, int a4)
{
  unint64_t v5 = result;
  if (a3 != a4 || *(unsigned char *)(result + 80))
  {
    unsigned int v6 = apple::aiml::flatbuffers2::FlatBufferBuilder::PushElement<unsigned int>(result, a3);
    unint64_t result = apple::aiml::flatbuffers2::vector_downward::ensure_space((apple::aiml::flatbuffers2::vector_downward *)v5, 8uLL);
    **(void **)(v5 + 56) = v6 | (unint64_t)(a2 << 32);
    *(void *)(v5 + 56) += 8;
    ++*(_DWORD *)(v5 + 64);
    unsigned int v7 = *(unsigned __int16 *)(v5 + 68);
    if (v7 <= a2) {
      LOWORD(v7) = a2;
    }
    *(_WORD *)(v5 + 68) = v7;
  }
  return result;
}

void sub_1C8B17D04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL SSUIntentParameter::Verify(SSUIntentParameter *this, apple::aiml::flatbuffers2::Verifier *a2)
{
  BOOL result = apple::aiml::flatbuffers2::Verifier::VerifyTableStart(a2, this->var0);
  if (result)
  {
    BOOL result = apple::aiml::flatbuffers2::Table::VerifyOffset((apple::aiml::flatbuffers2::Table *)this, a2, 4u);
    if (result)
    {
      unint64_t v5 = &this[-*(int *)this->var0];
      if (*(unsigned __int16 *)v5->var0 >= 5u && (uint64_t v6 = *(unsigned __int16 *)v5[4].var0) != 0) {
        unsigned int v7 = &this[v6 + *(unsigned int *)this[v6].var0];
      }
      else {
        unsigned int v7 = 0;
      }
      BOOL result = apple::aiml::flatbuffers2::Verifier::VerifyString(a2, v7->var0);
      if (result)
      {
        BOOL result = apple::aiml::flatbuffers2::Table::VerifyOffset((apple::aiml::flatbuffers2::Table *)this, a2, 6u);
        if (result)
        {
          unsigned __int16 v8 = &this[-*(int *)this->var0];
          if (*(unsigned __int16 *)v8->var0 >= 7u && (uint64_t v9 = *(unsigned __int16 *)v8[6].var0) != 0) {
            unint64_t v10 = &this[v9 + *(unsigned int *)this[v9].var0];
          }
          else {
            unint64_t v10 = 0;
          }
          BOOL result = apple::aiml::flatbuffers2::Verifier::VerifyString(a2, v10->var0);
          if (result)
          {
            --*((_DWORD *)a2 + 4);
            return 1;
          }
        }
      }
    }
  }
  return result;
}

BOOL apple::aiml::flatbuffers2::Verifier::VerifyTableStart(apple::aiml::flatbuffers2::Verifier *this, const unsigned __int8 *a2)
{
  uint64_t v2 = *(void *)this;
  unint64_t v3 = (unint64_t)&a2[-*(void *)this];
  if ((v3 & 3) != 0 && *((unsigned char *)this + 40)) {
    return 0;
  }
  unint64_t v4 = *((void *)this + 1);
  BOOL v5 = v4 >= 5 && v4 - 4 >= v3;
  if (!v5) {
    return 0;
  }
  uint64_t v6 = *(int *)a2;
  unsigned int v7 = *((_DWORD *)this + 5);
  unsigned int v8 = *((_DWORD *)this + 4) + 1;
  *((_DWORD *)this + 4) = v8;
  unsigned int v9 = *((_DWORD *)this + 6) + 1;
  *((_DWORD *)this + 6) = v9;
  if (v8 > v7 || v9 > *((_DWORD *)this + 7)) {
    return 0;
  }
  unint64_t v10 = v3 - v6;
  if (v10)
  {
    uint64_t v11 = 0;
    if (*((unsigned char *)this + 40) || v4 - 2 < v10) {
      return v11;
    }
  }
  else if (v4 - 2 < v10)
  {
    return 0;
  }
  unint64_t v12 = *(unsigned __int16 *)(v2 + v10);
  if ((v12 & 1) != 0 && *((unsigned char *)this + 40)) {
    return 0;
  }
  BOOL v5 = v4 >= v12;
  unint64_t v14 = v4 - v12;
  return v14 != 0 && v5 && v14 >= v10;
}

BOOL apple::aiml::flatbuffers2::Table::VerifyOffset(apple::aiml::flatbuffers2::Table *this, const apple::aiml::flatbuffers2::Verifier *a2, unsigned int a3)
{
  unint64_t v3 = (unsigned __int16 *)((char *)this - *(int *)this);
  if (*v3 <= a3) {
    return 1;
  }
  uint64_t v4 = *(unsigned __int16 *)((char *)v3 + a3);
  if (!v4) {
    return 1;
  }
  unint64_t v5 = (unint64_t)this + v4 - *(void *)a2;
  if ((v5 & 3) != 0 && *((unsigned char *)a2 + 40) != 0) {
    return 0;
  }
  BOOL result = 0;
  unint64_t v8 = *((void *)a2 + 1);
  if (v8 >= 5 && v8 - 4 >= v5)
  {
    uint64_t v9 = *(unsigned int *)(*(void *)a2 + v5);
    if ((int)v9 >= 1) {
      return v8 - 1 >= v5 + v9;
    }
    return 0;
  }
  return result;
}

BOOL apple::aiml::flatbuffers2::Verifier::VerifyString(apple::aiml::flatbuffers2::Verifier *a1, const unsigned __int8 *a2)
{
  if (!a2) {
    return 1;
  }
  unint64_t v6 = 0;
  BOOL result = apple::aiml::flatbuffers2::Verifier::VerifyVectorOrString(a1, a2, 1uLL, &v6);
  if (result)
  {
    unint64_t v4 = *((void *)a1 + 1);
    return v4 >= 2 && v4 - 1 >= v6 && *(unsigned char *)(*(void *)a1 + v6) == 0;
  }
  return result;
}

BOOL apple::aiml::flatbuffers2::Verifier::VerifyVectorOrString(apple::aiml::flatbuffers2::Verifier *this, const unsigned __int8 *a2, unint64_t a3, unint64_t *a4)
{
  unint64_t v4 = (unint64_t)&a2[-*(void *)this];
  if ((v4 & 3) != 0 && *((unsigned char *)this + 40)) {
    return 0;
  }
  unint64_t v5 = *((void *)this + 1);
  if (v5 < 5 || v5 - 4 < v4) {
    return 0;
  }
  unint64_t v7 = *(unsigned int *)a2;
  if (0x7FFFFFFF / a3 <= v7) {
    return 0;
  }
  unint64_t v8 = v7 * a3 + 4;
  if (a4)
  {
    *a4 = v8 + v4;
    unint64_t v5 = *((void *)this + 1);
  }
  BOOL v9 = v5 > v8;
  unint64_t v10 = v5 - v8;
  return v9 && v10 >= v4;
}

void sub_1C8B181AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  MEMORY[0x1CB772580](v7, 0x1030C40E9F947FBLL);
  apple::aiml::flatbuffers2::FlatBufferBuilder::~FlatBufferBuilder((apple::aiml::flatbuffers2::FlatBufferBuilder *)va);
  _Unwind_Resume(a1);
}

void sub_1C8B182E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B184F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL SSUExampleUtterance::Verify(SSUExampleUtterance *this, apple::aiml::flatbuffers2::Verifier *a2)
{
  BOOL result = apple::aiml::flatbuffers2::Verifier::VerifyTableStart(a2, this->var0);
  if (result)
  {
    BOOL result = apple::aiml::flatbuffers2::Table::VerifyOffset((apple::aiml::flatbuffers2::Table *)this, a2, 4u);
    if (result)
    {
      unint64_t v5 = &this[-*(int *)this->var0];
      if (*(unsigned __int16 *)v5->var0 >= 5u && (uint64_t v6 = *(unsigned __int16 *)v5[4].var0) != 0) {
        uint64_t v7 = &this[v6 + *(unsigned int *)this[v6].var0];
      }
      else {
        uint64_t v7 = 0;
      }
      BOOL result = apple::aiml::flatbuffers2::Verifier::VerifyString(a2, v7->var0);
      if (result)
      {
        --*((_DWORD *)a2 + 4);
        return 1;
      }
    }
  }
  return result;
}

void sub_1C8B18720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  MEMORY[0x1CB772580](v7, 0x1030C40E9F947FBLL);
  apple::aiml::flatbuffers2::FlatBufferBuilder::~FlatBufferBuilder((apple::aiml::flatbuffers2::FlatBufferBuilder *)va);
  _Unwind_Resume(a1);
}

void sub_1C8B18A64(_Unwind_Exception *a1)
{
  if (v2) {
    operator delete(v2);
  }
  _Unwind_Resume(a1);
}

unint64_t apple::aiml::flatbuffers2::FlatBufferBuilder::StartVector(apple::aiml::flatbuffers2::FlatBufferBuilder *this, uint64_t a2, unint64_t a3)
{
  apple::aiml::flatbuffers2::FlatBufferBuilder::NotNested((uint64_t)this);
  *((unsigned char *)this + 70) = 1;
  uint64_t v6 = a3 * a2;
  apple::aiml::flatbuffers2::FlatBufferBuilder::PreAlign(this, v6, 4uLL);
  return apple::aiml::flatbuffers2::FlatBufferBuilder::PreAlign(this, v6, a3);
}

uint64_t apple::aiml::flatbuffers2::FlatBufferBuilder::EndVector(apple::aiml::flatbuffers2::FlatBufferBuilder *this, int a2)
{
  if (!*((unsigned char *)this + 70)) {
    __assert_rtn("EndVector", "flatbuffers.h", 1672, "nested");
  }
  *((unsigned char *)this + 70) = 0;
  return apple::aiml::flatbuffers2::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)this, a2);
}

void sub_1C8B18C98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B18D48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B18E4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B18F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C8B190E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL SSUExampleEncodedVector::Verify(SSUExampleEncodedVector *this, apple::aiml::flatbuffers2::Verifier *a2)
{
  BOOL result = apple::aiml::flatbuffers2::Verifier::VerifyTableStart(a2, this->var0);
  if (result)
  {
    BOOL result = apple::aiml::flatbuffers2::Table::VerifyOffset((apple::aiml::flatbuffers2::Table *)this, a2, 4u);
    if (result)
    {
      unint64_t v5 = &this[-*(int *)this->var0];
      if (*(unsigned __int16 *)v5->var0 < 5u
        || (uint64_t v6 = *(unsigned __int16 *)v5[4].var0) == 0
        || (BOOL result = apple::aiml::flatbuffers2::Verifier::VerifyVectorOrString(a2, this[v6 + *(unsigned int *)this[v6].var0].var0, 4uLL, 0)))
      {
        --*((_DWORD *)a2 + 4);
        return 1;
      }
    }
  }
  return result;
}

void sub_1C8B19310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  MEMORY[0x1CB772580](v7, 0x1030C40E9F947FBLL);
  apple::aiml::flatbuffers2::FlatBufferBuilder::~FlatBufferBuilder((apple::aiml::flatbuffers2::FlatBufferBuilder *)va);
  _Unwind_Resume(a1);
}

void sub_1C8B19548(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

apple::aiml::flatbuffers2::FlatBufferBuilder *apple::aiml::flatbuffers2::FlatBufferBuilder::AddOffset<void>(apple::aiml::flatbuffers2::FlatBufferBuilder *result, unsigned int a2)
{
  if (a2)
  {
    unint64_t v2 = (unint64_t)result;
    int v3 = apple::aiml::flatbuffers2::FlatBufferBuilder::ReferTo(result, a2);
    return (apple::aiml::flatbuffers2::FlatBufferBuilder *)apple::aiml::flatbuffers2::FlatBufferBuilder::AddElement<unsigned int>(v2, 6, v3, 0);
  }
  return result;
}

void sub_1C8B196E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B197D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B1999C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL SSUExample::Verify(SSUExample *this, apple::aiml::flatbuffers2::Verifier *a2)
{
  BOOL result = apple::aiml::flatbuffers2::Verifier::VerifyTableStart(a2, this->var0);
  if (!result) {
    return result;
  }
  unint64_t v5 = &this[-*(int *)this->var0];
  unsigned int v6 = *(unsigned __int16 *)v5->var0;
  if (v6 >= 5)
  {
    if (*(_WORD *)v5[4].var0)
    {
      BOOL result = 0;
      unint64_t v7 = *((void *)a2 + 1);
      if (v7 < 2 || v7 - 1 < (unint64_t)this[*(unsigned __int16 *)v5[4].var0 - *(void *)a2].var0) {
        return result;
      }
    }
  }
  BOOL result = apple::aiml::flatbuffers2::Table::VerifyOffset((apple::aiml::flatbuffers2::Table *)this, a2, 6u);
  if (!result) {
    return result;
  }
  if (v6 < 7)
  {
    if (v6 < 5) {
      goto LABEL_22;
    }
    goto LABEL_11;
  }
  if (!*(_WORD *)v5[6].var0)
  {
LABEL_11:
    unint64_t v8 = 0;
    goto LABEL_12;
  }
  unint64_t v8 = (SSUExampleUtterance *)&this[*(unsigned __int16 *)v5[6].var0
                                  + *(unsigned int *)this[*(unsigned __int16 *)v5[6].var0].var0];
LABEL_12:
  if (!*(_WORD *)v5[4].var0) {
    goto LABEL_22;
  }
  int v9 = this[*(unsigned __int16 *)v5[4].var0].var0[0];
  if (v9 != 2)
  {
    BOOL v10 = v9 != 1 || v8 == 0;
    if (!v10 && !SSUExampleUtterance::Verify(v8, a2)) {
      return 0;
    }
    goto LABEL_22;
  }
  if (!v8 || (BOOL result = SSUExampleEncodedVector::Verify((SSUExampleEncodedVector *)v8, a2)))
  {
LABEL_22:
    --*((_DWORD *)a2 + 4);
    return 1;
  }
  return result;
}

void sub_1C8B19B64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B19D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  MEMORY[0x1CB772580](v7, 0x1030C40E9F947FBLL);
  apple::aiml::flatbuffers2::FlatBufferBuilder::~FlatBufferBuilder((apple::aiml::flatbuffers2::FlatBufferBuilder *)va);
  _Unwind_Resume(a1);
}

void sub_1C8B1A2A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  if (v24) {
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<apple::aiml::flatbuffers2::Offset<SSUExample>>::reserve(void **a1, unint64_t a2)
{
  if (a2 > ((unsigned char *)a1[2] - (unsigned char *)*a1) >> 2)
  {
    if (a2 >> 62) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    int64_t v3 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    unint64_t v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a2);
    unint64_t v5 = &v4[v3 & 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v7 = &v4[4 * v6];
    unint64_t v8 = (char *)*a1;
    int v9 = (char *)a1[1];
    BOOL v10 = v5;
    if (v9 != *a1)
    {
      BOOL v10 = v5;
      do
      {
        int v11 = *((_DWORD *)v9 - 1);
        v9 -= 4;
        *((_DWORD *)v10 - 1) = v11;
        v10 -= 4;
      }
      while (v9 != v8);
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

uint64_t apple::aiml::flatbuffers2::FlatBufferBuilder::CreateVector<SSUExample>(apple::aiml::flatbuffers2::FlatBufferBuilder *a1, uint64_t a2, uint64_t a3)
{
  apple::aiml::flatbuffers2::FlatBufferBuilder::StartVector(a1, a3, 4uLL);
  if (a3)
  {
    uint64_t v6 = a2 - 4;
    uint64_t v7 = a3;
    do
    {
      uint64_t v8 = v7 - 1;
      int v9 = apple::aiml::flatbuffers2::FlatBufferBuilder::ReferTo(a1, *(_DWORD *)(v6 + 4 * v7));
      apple::aiml::flatbuffers2::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)a1, v9);
      uint64_t v7 = v8;
    }
    while (v8);
  }
  return apple::aiml::flatbuffers2::FlatBufferBuilder::EndVector(a1, a3);
}

apple::aiml::flatbuffers2::FlatBufferBuilder *apple::aiml::flatbuffers2::FlatBufferBuilder::AddOffset<apple::aiml::flatbuffers2::Vector<apple::aiml::flatbuffers2::Offset<SSUExample>>>(apple::aiml::flatbuffers2::FlatBufferBuilder *result, unsigned int a2)
{
  if (a2)
  {
    unint64_t v2 = (unint64_t)result;
    int v3 = apple::aiml::flatbuffers2::FlatBufferBuilder::ReferTo(result, a2);
    return (apple::aiml::flatbuffers2::FlatBufferBuilder *)apple::aiml::flatbuffers2::FlatBufferBuilder::AddElement<unsigned int>(v2, 8, v3, 0);
  }
  return result;
}

void sub_1C8B1A600(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B1A6B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B1A7C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B1A8B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C8B1AA14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B1AAC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B1ABD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B1ACCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C8B1AEF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL SSUIntent::Verify(SSUIntent *this, apple::aiml::flatbuffers2::Verifier *a2)
{
  BOOL result = apple::aiml::flatbuffers2::Verifier::VerifyTableStart(a2, this->var0);
  if (result)
  {
    BOOL result = apple::aiml::flatbuffers2::Table::VerifyOffset((apple::aiml::flatbuffers2::Table *)this, a2, 4u);
    if (result)
    {
      unint64_t v5 = &this[-*(int *)this->var0];
      if (*(unsigned __int16 *)v5->var0 >= 5u && (uint64_t v6 = *(unsigned __int16 *)v5[4].var0) != 0) {
        uint64_t v7 = &this[v6 + *(unsigned int *)this[v6].var0];
      }
      else {
        uint64_t v7 = 0;
      }
      BOOL result = apple::aiml::flatbuffers2::Verifier::VerifyString(a2, v7->var0);
      if (result)
      {
        BOOL result = apple::aiml::flatbuffers2::Table::VerifyOffset((apple::aiml::flatbuffers2::Table *)this, a2, 6u);
        if (result)
        {
          uint64_t v8 = *(int *)this->var0;
          if (*(unsigned __int16 *)this[-v8].var0 < 7u) {
            goto LABEL_18;
          }
          if (*(_WORD *)this[-v8 + 6].var0)
          {
            BOOL result = apple::aiml::flatbuffers2::Verifier::VerifyVectorOrString(a2, this[*(unsigned __int16 *)this[-v8 + 6].var0+ *(unsigned int *)this[*(unsigned __int16 *)this[-v8 + 6].var0].var0].var0, 4uLL, 0);
            if (!result) {
              return result;
            }
            uint64_t v8 = *(int *)this->var0;
            if (*(unsigned __int16 *)this[-v8].var0 < 7u) {
              goto LABEL_18;
            }
          }
          uint64_t v9 = *(unsigned __int16 *)this[-v8 + 6].var0;
          if (v9 && (BOOL v10 = &this[v9 + *(unsigned int *)this[v9].var0], *(_DWORD *)v10->var0))
          {
            unint64_t v11 = 0;
            unint64_t v12 = v10 + 4;
            while (SSUIntentParameter::Verify((SSUIntentParameter *)&v12[*(unsigned int *)v12->var0], a2))
            {
              ++v11;
              v12 += 4;
              if (v11 >= *(unsigned int *)v10->var0) {
                goto LABEL_18;
              }
            }
            return 0;
          }
          else
          {
LABEL_18:
            BOOL result = apple::aiml::flatbuffers2::Table::VerifyOffset((apple::aiml::flatbuffers2::Table *)this, a2, 8u);
            if (!result) {
              return result;
            }
            unint64_t v13 = 0;
            uint64_t v14 = *(int *)this->var0;
            if (*(unsigned __int16 *)this[-v14].var0 >= 9u)
            {
              if (!*(_WORD *)this[-v14 + 8].var0) {
                goto LABEL_23;
              }
              BOOL result = apple::aiml::flatbuffers2::Verifier::VerifyVectorOrString(a2, this[*(unsigned __int16 *)this[-v14 + 8].var0+ *(unsigned int *)this[*(unsigned __int16 *)this[-v14 + 8].var0].var0].var0, 4uLL, 0);
              if (!result) {
                return result;
              }
              unint64_t v13 = 0;
              uint64_t v14 = *(int *)this->var0;
              if (*(unsigned __int16 *)this[-v14].var0 >= 9u)
              {
LABEL_23:
                uint64_t v15 = *(unsigned __int16 *)this[-v14 + 8].var0;
                if (v15) {
                  unint64_t v13 = (SSUExample *)&this[v15 + *(unsigned int *)this[v15].var0];
                }
                else {
                  unint64_t v13 = 0;
                }
              }
            }
            BOOL result = apple::aiml::flatbuffers2::Verifier::VerifyVectorOfTables<SSUExample>(a2, v13);
            if (result)
            {
              --*((_DWORD *)a2 + 4);
              return 1;
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL apple::aiml::flatbuffers2::Verifier::VerifyVectorOfTables<SSUExample>(apple::aiml::flatbuffers2::Verifier *a1, SSUExample *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*(_DWORD *)a2->var0) {
    return 1;
  }
  unint64_t v4 = 0;
  unint64_t v5 = a2 + 4;
  do
  {
    BOOL result = SSUExample::Verify(&v5[*(unsigned int *)v5->var0], a1);
    if (!result) {
      break;
    }
    ++v4;
    v5 += 4;
  }
  while (v4 < *(unsigned int *)a2->var0);
  return result;
}

uint64_t sirinluexternal::RRAnnotation::formatText(sirinluexternal::RRAnnotation *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "key");
  }
  uint64_t v6 = *((void *)this + 2);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, a2, "value");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluexternal::RRAnnotation::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  unint64_t v4 = *(const PB::Base **)(this + 8);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  uint64_t v5 = *(const PB::Base **)(v3 + 16);
  if (v5)
  {
    return PB::Writer::writeSubmessage(a2, v5);
  }
  return this;
}

uint64_t sirinluexternal::RRAnnotation::readFrom(sirinluexternal::RRAnnotation *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_24;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 2) {
        operator new();
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_24:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_24;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluexternal::RRAnnotation::~RRAnnotation(sirinluexternal::RRAnnotation *this)
{
  sirinluexternal::RRAnnotation::~RRAnnotation(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1F232C588;
  unint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  PB::Base::~Base(this);
}

void *sirinluexternal::RRAnnotation::RRAnnotation(void *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1F232C588;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1F232C588;
  return this;
}

void *sirinluexternal::RRAnnotation::RRAnnotation(void *this, const sirinluexternal::RRAnnotation *a2)
{
  *this = &unk_1F232C588;
  this[1] = 0;
  this[2] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  if (*((void *)a2 + 2)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternal::RRAnnotation::operator=(uint64_t a1, const sirinluexternal::RRAnnotation *a2)
{
  if ((const sirinluexternal::RRAnnotation *)a1 != a2)
  {
    sirinluexternal::RRAnnotation::RRAnnotation(&v5, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    long long v6 = v3;
    sirinluexternal::RRAnnotation::~RRAnnotation((sirinluexternal::RRAnnotation *)&v5);
  }
  return a1;
}

uint64_t sirinluexternal::swap(uint64_t this, sirinluexternal::RRAnnotation *a2, sirinluexternal::RRAnnotation *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  uint64_t v4 = *(void *)(this + 16);
  *(void *)(this + 16) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  return this;
}

void *sirinluexternal::RRAnnotation::RRAnnotation(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F232C588;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v5 = a1[1];
  a1[1] = v4;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  uint64_t v7 = a1[2];
  a1[2] = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  return a1;
}

uint64_t sirinluexternal::RRAnnotation::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sirinluexternal::RRAnnotation::RRAnnotation(&v5, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    long long v6 = v3;
    sirinluexternal::RRAnnotation::~RRAnnotation((sirinluexternal::RRAnnotation *)&v5);
  }
  return a1;
}

uint64_t sirinluexternal::RRAnnotation::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v4)
  {
    if (v5 && (siricommon::StringValue::operator==(v4, v5) & 1) != 0) {
      goto LABEL_4;
    }
    return 0;
  }
  if (v5) {
    return 0;
  }
LABEL_4:
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t result = (v6 | v7) == 0;
  if (v6) {
    BOOL v9 = v7 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    uint64_t v10 = *(void *)(a1 + 16);
    return siricommon::StringValue::operator==(v10, v7);
  }
  return result;
}

unint64_t sirinluexternal::RRAnnotation::hash_value(sirinluexternal::RRAnnotation *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2 && (uint64_t v3 = *(void *)(v2 + 8)) != 0) {
    unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100](v3);
  }
  else {
    unint64_t v4 = 0;
  }
  uint64_t v5 = *((void *)this + 2);
  if (v5)
  {
    unint64_t v6 = *(void *)(v5 + 8);
    if (v6) {
      unint64_t v6 = std::__string_hash<char>::operator()[abi:ne180100](v6);
    }
  }
  else
  {
    unint64_t v6 = 0;
  }
  return v6 ^ v4;
}

uint64_t sirinluexternal::RRAnnotation::makeKey(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternal::RRAnnotation::makeValue(uint64_t this)
{
  if (!*(void *)(this + 16)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse::formatText(sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "response");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2);
  }
  return this;
}

uint64_t sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse::readFrom(sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse::~NLv4SpanFeaturizerResponse(sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse *this)
{
  sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse::~NLv4SpanFeaturizerResponse(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t vars8;

  unint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1F232C5D8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

void *sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse::NLv4SpanFeaturizerResponse(void *this)
{
  *this = &unk_1F232C5D8;
  this[1] = 0;
  return this;
}

{
  *this = &unk_1F232C5D8;
  this[1] = 0;
  return this;
}

void *sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse::NLv4SpanFeaturizerResponse(void *this, const sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse *a2)
{
  *this = &unk_1F232C5D8;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse *sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse::operator=(const sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse *a1, const sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse *a2)
{
  if (a1 != a2)
  {
    sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse::NLv4SpanFeaturizerResponse(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse::~NLv4SpanFeaturizerResponse((sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse *)&v5);
  }
  return a1;
}

uint64_t sirinluinternalsnlp_intermediate::swap(uint64_t this, sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse *a2, sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse::NLv4SpanFeaturizerResponse(void *a1, uint64_t a2)
{
  *a1 = &unk_1F232C5D8;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_1F232C5D8;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = &unk_1F232C5D8;
    v6[1] = v4;
    sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse::~NLv4SpanFeaturizerResponse((sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse *)v6);
  }
  return a1;
}

BOOL sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    return (v2 | v3) == 0;
  }
  else {
    return sirinluinternalsnlp_intermediate::SpanFeaturizerResponse::operator==(v2, v3);
  }
}

uint64_t sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse::hash_value(sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (v1 && (uint64_t v2 = *(sirinluinternalsnlp_intermediate::LinearizedTensor **)(v1 + 8)) != 0) {
    return sirinluinternalsnlp_intermediate::LinearizedTensor::hash_value(v2);
  }
  else {
    return 0;
  }
}

uint64_t sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse::makeResponse(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternalembedding::EmbeddingResponse::formatText(sirinluinternalembedding::EmbeddingResponse *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 120)) {
    PB::TextFormatter::format(a2, "embedding_dim");
  }
  uint64_t v5 = *((void *)this + 2);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "embedding_tensor");
  }
  uint64_t v6 = (uint64_t *)*((void *)this + 3);
  uint64_t v7 = (uint64_t *)*((void *)this + 4);
  while (v6 != v7)
  {
    uint64_t v8 = *v6++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v8 + 32))(v8, a2, "embedding_tensor_outputs");
  }
  char v9 = *((unsigned char *)this + 120);
  if ((v9 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "num_layer");
    char v9 = *((unsigned char *)this + 120);
    if ((v9 & 4) == 0)
    {
LABEL_9:
      if ((v9 & 8) == 0) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
  }
  else if ((*((unsigned char *)this + 120) & 4) == 0)
  {
    goto LABEL_9;
  }
  PB::TextFormatter::format(a2, "num_subword_token");
  if ((*((unsigned char *)this + 120) & 8) != 0) {
LABEL_10:
  }
    PB::TextFormatter::format(a2, "num_token");
LABEL_11:
  uint64_t v10 = *((void *)this + 9);
  if (v10) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v10 + 32))(v10, a2, "sentence_embedding_tensor");
  }
  unint64_t v11 = (uint64_t *)*((void *)this + 10);
  char v12 = (uint64_t *)*((void *)this + 11);
  while (v11 != v12)
  {
    uint64_t v13 = *v11++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v13 + 32))(v13, a2, "subword_embedding_tensor_outputs");
  }
  uint64_t v14 = *((void *)this + 13);
  if (v14) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v14 + 32))(v14, a2, "subword_token_chain");
  }
  uint64_t v15 = *((void *)this + 14);
  if (v15) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v15 + 32))(v15, a2, "token_chain");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluinternalembedding::EmbeddingResponse::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  BOOL v4 = *(const PB::Base **)(this + 16);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  uint64_t v5 = *(const PB::Base **)(v3 + 112);
  if (v5) {
    this = PB::Writer::writeSubmessage(a2, v5);
  }
  char v6 = *(unsigned char *)(v3 + 120);
  if ((v6 & 8) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    char v6 = *(unsigned char *)(v3 + 120);
    if ((v6 & 2) == 0)
    {
LABEL_7:
      if ((v6 & 1) == 0) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
  }
  else if ((*(unsigned char *)(v3 + 120) & 2) == 0)
  {
    goto LABEL_7;
  }
  this = PB::Writer::writeVarInt(a2);
  if (*(unsigned char *)(v3 + 120)) {
LABEL_8:
  }
    this = PB::Writer::writeVarInt(a2);
LABEL_9:
  uint64_t v7 = *(const PB::Base **)(v3 + 72);
  if (v7) {
    this = PB::Writer::writeSubmessage(a2, v7);
  }
  uint64_t v8 = *(const PB::Base ***)(v3 + 24);
  char v9 = *(const PB::Base ***)(v3 + 32);
  while (v8 != v9)
  {
    uint64_t v10 = *v8++;
    this = PB::Writer::writeSubmessage(a2, v10);
  }
  unint64_t v11 = *(const PB::Base **)(v3 + 104);
  if (v11) {
    this = PB::Writer::writeSubmessage(a2, v11);
  }
  if ((*(unsigned char *)(v3 + 120) & 4) != 0) {
    this = PB::Writer::writeVarInt(a2);
  }
  uint64_t v13 = *(const PB::Base ***)(v3 + 80);
  char v12 = *(const PB::Base ***)(v3 + 88);
  while (v13 != v12)
  {
    uint64_t v14 = *v13++;
    this = PB::Writer::writeSubmessage(a2, v14);
  }
  return this;
}

uint64_t sirinluinternalembedding::EmbeddingResponse::readFrom(sirinluinternalembedding::EmbeddingResponse *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
      break;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      int v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        operator new();
      case 2u:
        operator new();
      case 3u:
        *((unsigned char *)this + 120) |= 8u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v21 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v20 <= 0xFFFFFFFFFFFFFFF5 && v20 + 10 <= v21)
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          do
          {
            unint64_t v26 = v20 + 1;
            *((void *)a2 + 1) = v20 + 1;
            char v27 = *(unsigned char *)(v22 + v20);
            v25 |= (unint64_t)(v27 & 0x7F) << v23;
            if ((v27 & 0x80) == 0) {
              goto LABEL_93;
            }
            v23 += 7;
            unint64_t v20 = v26;
            BOOL v14 = v24++ > 8;
          }
          while (!v14);
LABEL_68:
          uint64_t v25 = 0;
          goto LABEL_93;
        }
        char v53 = 0;
        unsigned int v54 = 0;
        uint64_t v25 = 0;
        if (v21 <= v20) {
          unint64_t v21 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v21 == v20)
          {
            uint64_t v25 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v55 = v20 + 1;
            char v56 = *(unsigned char *)(v22 + v20);
            *((void *)a2 + 1) = v55;
            v25 |= (unint64_t)(v56 & 0x7F) << v53;
            if (v56 < 0)
            {
              v53 += 7;
              unint64_t v20 = v55;
              BOOL v14 = v54++ > 8;
              if (v14) {
                goto LABEL_68;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v25 = 0;
            }
          }
          break;
        }
LABEL_93:
        *((void *)this + 8) = v25;
        goto LABEL_57;
      case 4u:
        *((unsigned char *)this + 120) |= 2u;
        unint64_t v28 = *((void *)a2 + 1);
        unint64_t v29 = *((void *)a2 + 2);
        uint64_t v30 = *(void *)a2;
        if (v28 <= 0xFFFFFFFFFFFFFFF5 && v28 + 10 <= v29)
        {
          char v31 = 0;
          unsigned int v32 = 0;
          uint64_t v33 = 0;
          do
          {
            unint64_t v34 = v28 + 1;
            *((void *)a2 + 1) = v28 + 1;
            char v35 = *(unsigned char *)(v30 + v28);
            v33 |= (unint64_t)(v35 & 0x7F) << v31;
            if ((v35 & 0x80) == 0) {
              goto LABEL_97;
            }
            v31 += 7;
            unint64_t v28 = v34;
            BOOL v14 = v32++ > 8;
          }
          while (!v14);
LABEL_75:
          uint64_t v33 = 0;
          goto LABEL_97;
        }
        char v57 = 0;
        unsigned int v58 = 0;
        uint64_t v33 = 0;
        if (v29 <= v28) {
          unint64_t v29 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v29 == v28)
          {
            uint64_t v33 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v59 = v28 + 1;
            char v60 = *(unsigned char *)(v30 + v28);
            *((void *)a2 + 1) = v59;
            v33 |= (unint64_t)(v60 & 0x7F) << v57;
            if (v60 < 0)
            {
              v57 += 7;
              unint64_t v28 = v59;
              BOOL v14 = v58++ > 8;
              if (v14) {
                goto LABEL_75;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v33 = 0;
            }
          }
          break;
        }
LABEL_97:
        *((void *)this + 6) = v33;
        goto LABEL_57;
      case 5u:
        *((unsigned char *)this + 120) |= 1u;
        unint64_t v36 = *((void *)a2 + 1);
        unint64_t v37 = *((void *)a2 + 2);
        uint64_t v38 = *(void *)a2;
        if (v36 <= 0xFFFFFFFFFFFFFFF5 && v36 + 10 <= v37)
        {
          char v39 = 0;
          unsigned int v40 = 0;
          uint64_t v41 = 0;
          do
          {
            unint64_t v42 = v36 + 1;
            *((void *)a2 + 1) = v36 + 1;
            char v43 = *(unsigned char *)(v38 + v36);
            v41 |= (unint64_t)(v43 & 0x7F) << v39;
            if ((v43 & 0x80) == 0) {
              goto LABEL_101;
            }
            v39 += 7;
            unint64_t v36 = v42;
            BOOL v14 = v40++ > 8;
          }
          while (!v14);
LABEL_82:
          uint64_t v41 = 0;
          goto LABEL_101;
        }
        char v61 = 0;
        unsigned int v62 = 0;
        uint64_t v41 = 0;
        if (v37 <= v36) {
          unint64_t v37 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v37 == v36)
          {
            uint64_t v41 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v63 = v36 + 1;
            char v64 = *(unsigned char *)(v38 + v36);
            *((void *)a2 + 1) = v63;
            v41 |= (unint64_t)(v64 & 0x7F) << v61;
            if (v64 < 0)
            {
              v61 += 7;
              unint64_t v36 = v63;
              BOOL v14 = v62++ > 8;
              if (v14) {
                goto LABEL_82;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v41 = 0;
            }
          }
          break;
        }
LABEL_101:
        *((void *)this + 1) = v41;
        goto LABEL_57;
      case 6u:
        operator new();
      case 7u:
        PB::PtrVector<sirinluinternalembedding::EmbeddingTensorOutput>::emplace_back<>();
      case 8u:
        operator new();
      case 9u:
        *((unsigned char *)this + 120) |= 4u;
        unint64_t v44 = *((void *)a2 + 1);
        unint64_t v45 = *((void *)a2 + 2);
        uint64_t v46 = *(void *)a2;
        if (v44 <= 0xFFFFFFFFFFFFFFF5 && v44 + 10 <= v45)
        {
          char v47 = 0;
          unsigned int v48 = 0;
          uint64_t v49 = 0;
          do
          {
            unint64_t v50 = v44 + 1;
            *((void *)a2 + 1) = v44 + 1;
            char v51 = *(unsigned char *)(v46 + v44);
            v49 |= (unint64_t)(v51 & 0x7F) << v47;
            if ((v51 & 0x80) == 0) {
              goto LABEL_105;
            }
            v47 += 7;
            unint64_t v44 = v50;
            BOOL v14 = v48++ > 8;
          }
          while (!v14);
LABEL_89:
          uint64_t v49 = 0;
          goto LABEL_105;
        }
        char v65 = 0;
        unsigned int v66 = 0;
        uint64_t v49 = 0;
        if (v45 <= v44) {
          unint64_t v45 = *((void *)a2 + 1);
        }
        break;
      case 0xAu:
        PB::PtrVector<sirinluinternalembedding::EmbeddingTensorOutput>::emplace_back<>();
      default:
        goto LABEL_19;
    }
    while (1)
    {
      if (v45 == v44)
      {
        uint64_t v49 = 0;
        *((unsigned char *)a2 + 24) = 1;
        goto LABEL_105;
      }
      unint64_t v67 = v44 + 1;
      char v68 = *(unsigned char *)(v46 + v44);
      *((void *)a2 + 1) = v67;
      v49 |= (unint64_t)(v68 & 0x7F) << v65;
      if ((v68 & 0x80) == 0) {
        break;
      }
      v65 += 7;
      unint64_t v44 = v67;
      BOOL v14 = v66++ > 8;
      if (v14) {
        goto LABEL_89;
      }
    }
    if (*((unsigned char *)a2 + 24)) {
      uint64_t v49 = 0;
    }
LABEL_105:
    *((void *)this + 7) = v49;
LABEL_57:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  char v15 = 0;
  unsigned int v16 = 0;
  unint64_t v11 = 0;
  if (v2 > v3) {
    unint64_t v3 = v2;
  }
  do
  {
    if (v3 == v2)
    {
      int v4 = 1;
      *((unsigned char *)a2 + 24) = 1;
      return v4 == 0;
    }
    unint64_t v17 = v2 + 1;
    char v18 = *(unsigned char *)(v8 + v2);
    *((void *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0) {
      goto LABEL_21;
    }
    v15 += 7;
    unint64_t v2 = v17;
    BOOL v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  uint64_t result = PB::Reader::skip(a2);
  if (result) {
    goto LABEL_57;
  }
  return result;
}

void PB::PtrVector<sirinluinternalembedding::EmbeddingTensorOutput>::emplace_back<>()
{
}

void sub_1C8B1D354(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sirinluinternalembedding::EmbeddingResponse::~EmbeddingResponse(sirinluinternalembedding::EmbeddingResponse *this)
{
  sirinluinternalembedding::EmbeddingResponse::~EmbeddingResponse(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t vars8;

  *(void *)this = &unk_1F232C628;
  unint64_t v2 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unint64_t v3 = *((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  char v6 = (void **)((char *)this + 80);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v6);
  int v4 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  char v6 = (void **)((char *)this + 24);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  PB::Base::~Base(this);
}

double sirinluinternalembedding::EmbeddingResponse::EmbeddingResponse(sirinluinternalembedding::EmbeddingResponse *this)
{
  *(void *)this = &unk_1F232C628;
  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 30) = 0;
  return result;
}

{
  double result;

  *(void *)this = &unk_1F232C628;
  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 30) = 0;
  return result;
}

uint64_t sirinluinternalembedding::EmbeddingResponse::EmbeddingResponse(uint64_t this, const sirinluinternalembedding::EmbeddingResponse *a2)
{
  *(_OWORD *)(this + 16) = 0u;
  *(_OWORD *)(this + 72) = 0u;
  *(void *)this = &unk_1F232C628;
  *(_OWORD *)(this + 32) = 0u;
  *(_OWORD *)(this + 88) = 0u;
  *(_OWORD *)(this + 104) = 0u;
  *(_DWORD *)(this + 120) = 0;
  if (*((void *)a2 + 2)) {
    operator new();
  }
  if (*((void *)a2 + 14)) {
    operator new();
  }
  char v2 = *((unsigned char *)a2 + 120);
  if ((v2 & 8) != 0)
  {
    uint64_t v5 = *((void *)a2 + 8);
    *(unsigned char *)(this + 120) |= 8u;
    *(void *)(this + 64) = v5;
    char v2 = *((unsigned char *)a2 + 120);
    if ((v2 & 2) == 0)
    {
LABEL_7:
      if ((v2 & 1) == 0) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
  }
  else if ((*((unsigned char *)a2 + 120) & 2) == 0)
  {
    goto LABEL_7;
  }
  uint64_t v6 = *((void *)a2 + 6);
  *(unsigned char *)(this + 120) |= 2u;
  *(void *)(this + 48) = v6;
  if (*((unsigned char *)a2 + 120))
  {
LABEL_8:
    uint64_t v3 = *((void *)a2 + 1);
    *(unsigned char *)(this + 120) |= 1u;
    *(void *)(this + 8) = v3;
  }
LABEL_9:
  if (*((void *)a2 + 9)) {
    operator new();
  }
  if (*((void *)a2 + 3) != *((void *)a2 + 4)) {
    PB::PtrVector<sirinluinternalembedding::EmbeddingTensorOutput>::emplace_back<sirinluinternalembedding::EmbeddingTensorOutput const&>();
  }
  if (*((void *)a2 + 13)) {
    operator new();
  }
  if ((*((unsigned char *)a2 + 120) & 4) != 0)
  {
    uint64_t v4 = *((void *)a2 + 7);
    *(unsigned char *)(this + 120) |= 4u;
    *(void *)(this + 56) = v4;
  }
  if (*((void *)a2 + 10) != *((void *)a2 + 11)) {
    PB::PtrVector<sirinluinternalembedding::EmbeddingTensorOutput>::emplace_back<sirinluinternalembedding::EmbeddingTensorOutput const&>();
  }
  return this;
}

void PB::PtrVector<sirinluinternalembedding::EmbeddingTensorOutput>::emplace_back<sirinluinternalembedding::EmbeddingTensorOutput const&>()
{
}

void sub_1C8B1D92C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sirinluinternalembedding::EmbeddingResponse::operator=(uint64_t a1, const sirinluinternalembedding::EmbeddingResponse *a2)
{
  if ((const sirinluinternalembedding::EmbeddingResponse *)a1 != a2)
  {
    sirinluinternalembedding::EmbeddingResponse::EmbeddingResponse((uint64_t)v5, a2);
    sirinluinternalembedding::swap(a1, (sirinluinternalembedding::EmbeddingResponse *)v5, v3);
    sirinluinternalembedding::EmbeddingResponse::~EmbeddingResponse((sirinluinternalembedding::EmbeddingResponse *)v5);
  }
  return a1;
}

uint64_t sirinluinternalembedding::swap(uint64_t this, sirinluinternalembedding::EmbeddingResponse *a2, sirinluinternalembedding::EmbeddingResponse *a3)
{
  int v3 = *(_DWORD *)(this + 120);
  *(_DWORD *)(this + 120) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v3;
  uint64_t v4 = *(void *)(this + 64);
  *(void *)(this + 64) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v4;
  uint64_t v5 = *(void *)(this + 48);
  *(void *)(this + 48) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v5;
  uint64_t v7 = *(void *)(this + 8);
  uint64_t v6 = *(void *)(this + 16);
  uint64_t v8 = *((void *)a2 + 2);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *(void *)(this + 16) = v8;
  *((void *)a2 + 2) = v6;
  uint64_t v9 = *(void *)(this + 112);
  *(void *)(this + 112) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v9;
  *((void *)a2 + 1) = v7;
  uint64_t v10 = *(void *)(this + 72);
  *(void *)(this + 72) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v10;
  uint64_t v11 = *(void *)(this + 24);
  *(void *)(this + 24) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v11;
  uint64_t v12 = *(void *)(this + 32);
  *(void *)(this + 32) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v12;
  uint64_t v13 = *(void *)(this + 40);
  *(void *)(this + 40) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v13;
  uint64_t v14 = *(void *)(this + 104);
  *(void *)(this + 104) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v14;
  uint64_t v15 = *(void *)(this + 56);
  *(void *)(this + 56) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v15;
  uint64_t v16 = *(void *)(this + 80);
  *(void *)(this + 80) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v16;
  uint64_t v17 = *(void *)(this + 88);
  *(void *)(this + 88) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v17;
  uint64_t v18 = *(void *)(this + 96);
  *(void *)(this + 96) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v18;
  return this;
}

uint64_t sirinluinternalembedding::EmbeddingResponse::EmbeddingResponse(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F232C628;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a2 + 120) = 0;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v4;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *(void *)(a2 + 112);
  *(void *)(a2 + 112) = 0;
  uint64_t v7 = *(void *)(a1 + 112);
  *(void *)(a1 + 112) = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *(void *)(a2 + 64);
  uint64_t v9 = *(void *)(a2 + 72);
  *(void *)(a2 + 72) = 0;
  uint64_t v10 = *(void *)(a1 + 72);
  *(void *)(a1 + 64) = v8;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 72) = v9;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate((void **)(a1 + 24));
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  uint64_t v11 = *(void *)(a2 + 104);
  *(void *)(a2 + 104) = 0;
  uint64_t v12 = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = v11;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate((void **)(a1 + 80));
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  return a1;
}

uint64_t sirinluinternalembedding::EmbeddingResponse::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sirinluinternalembedding::EmbeddingResponse::EmbeddingResponse((uint64_t)v5, a2);
    sirinluinternalembedding::swap(a1, (sirinluinternalembedding::EmbeddingResponse *)v5, v3);
    sirinluinternalembedding::EmbeddingResponse::~EmbeddingResponse((sirinluinternalembedding::EmbeddingResponse *)v5);
  }
  return a1;
}

BOOL sirinluinternalembedding::EmbeddingResponse::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a2 + 16);
  if (v4)
  {
    if (!v5 || !sirinluinternal::NLv4EmbeddingTensor::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  uint64_t v6 = *(void **)(a1 + 112);
  uint64_t v7 = *(void **)(a2 + 112);
  if (v6)
  {
    if (!v7 || !sirinluinternal::TokenChain::operator==(v6, v7)) {
      return 0;
    }
  }
  else if (v7)
  {
    return 0;
  }
  char v8 = *(unsigned char *)(a1 + 120);
  char v9 = *(unsigned char *)(a2 + 120);
  if ((v8 & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 120) & 8) == 0 || *(void *)(a1 + 64) != *(void *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 120) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 120) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 120) & 2) == 0 || *(void *)(a1 + 48) != *(void *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 120) & 2) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 120))
  {
    if ((*(unsigned char *)(a2 + 120) & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 120))
  {
    return 0;
  }
  uint64_t v10 = *(void *)(a1 + 72);
  uint64_t v11 = *(void *)(a2 + 72);
  if (v10)
  {
    if (!v11 || !sirinluinternal::NLv4EmbeddingTensor::operator==(v10, v11)) {
      return 0;
    }
  }
  else if (v11)
  {
    return 0;
  }
  if (!PB::PtrVector<sirinluinternalembedding::EmbeddingTensorOutput>::operator==(*(void *)(a1 + 24), *(void *)(a1 + 32), *(uint64_t **)(a2 + 24), *(void *)(a2 + 32)))return 0; {
  uint64_t v12 = *(void **)(a1 + 104);
  }
  uint64_t v13 = *(void *)(a2 + 104);
  if (!v12)
  {
    if (!v13) {
      goto LABEL_37;
    }
    return 0;
  }
  if (!v13 || !sirinluinternal::SubwordTokenChain::operator==(v12, v13)) {
    return 0;
  }
LABEL_37:
  if ((v8 & 4) != 0)
  {
    if ((v9 & 4) == 0 || *(void *)(a1 + 56) != *(void *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v9 & 4) != 0)
  {
    return 0;
  }
  uint64_t v14 = *(void *)(a1 + 80);
  uint64_t v15 = *(void *)(a1 + 88);
  uint64_t v16 = *(uint64_t **)(a2 + 80);
  uint64_t v17 = *(void *)(a2 + 88);
  return PB::PtrVector<sirinluinternalembedding::EmbeddingTensorOutput>::operator==(v14, v15, v16, v17);
}

BOOL PB::PtrVector<sirinluinternalembedding::EmbeddingTensorOutput>::operator==(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  if (a2 - a1 != a4 - (void)a3) {
    return 0;
  }
  if (a1 == a2) {
    return 1;
  }
  uint64_t v5 = a3;
  uint64_t v6 = a1 + 8;
  do
  {
    uint64_t v7 = *v5++;
    BOOL result = sirinluinternalembedding::EmbeddingTensorOutput::operator==(*(void *)(v6 - 8), v7);
    BOOL v9 = !result || v6 == a2;
    v6 += 8;
  }
  while (!v9);
  return result;
}

unint64_t sirinluinternalembedding::EmbeddingResponse::hash_value(sirinluinternalembedding::EmbeddingResponse *this)
{
  char v2 = (sirinluinternal::NLv4EmbeddingTensor *)*((void *)this + 2);
  if (v2) {
    unint64_t v3 = sirinluinternal::NLv4EmbeddingTensor::hash_value(v2);
  }
  else {
    unint64_t v3 = 0;
  }
  uint64_t v4 = (sirinluinternal::TokenChain *)*((void *)this + 14);
  if (v4) {
    unint64_t v5 = sirinluinternal::TokenChain::hash_value(v4);
  }
  else {
    unint64_t v5 = 0;
  }
  if ((*((unsigned char *)this + 120) & 8) == 0)
  {
    uint64_t v22 = 0;
    if ((*((unsigned char *)this + 120) & 2) != 0) {
      goto LABEL_9;
    }
LABEL_12:
    uint64_t v21 = 0;
    if (*((unsigned char *)this + 120)) {
      goto LABEL_10;
    }
    goto LABEL_13;
  }
  uint64_t v22 = *((void *)this + 8);
  if ((*((unsigned char *)this + 120) & 2) == 0) {
    goto LABEL_12;
  }
LABEL_9:
  uint64_t v21 = *((void *)this + 6);
  if (*((unsigned char *)this + 120))
  {
LABEL_10:
    uint64_t v6 = *((void *)this + 1);
    goto LABEL_14;
  }
LABEL_13:
  uint64_t v6 = 0;
LABEL_14:
  uint64_t v7 = (sirinluinternal::NLv4EmbeddingTensor *)*((void *)this + 9);
  if (v7) {
    unint64_t v8 = sirinluinternal::NLv4EmbeddingTensor::hash_value(v7);
  }
  else {
    unint64_t v8 = 0;
  }
  uint64_t v10 = (sirinluinternalembedding::EmbeddingTensorOutput **)*((void *)this + 3);
  BOOL v9 = (sirinluinternalembedding::EmbeddingTensorOutput **)*((void *)this + 4);
  if (v10 == v9)
  {
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = *v10++;
      v11 ^= sirinluinternalembedding::EmbeddingTensorOutput::hash_value(v12);
    }
    while (v10 != v9);
  }
  uint64_t v13 = (sirinluinternal::SubwordTokenChain *)*((void *)this + 13);
  if (v13) {
    unint64_t v14 = sirinluinternal::SubwordTokenChain::hash_value(v13);
  }
  else {
    unint64_t v14 = 0;
  }
  if ((*((unsigned char *)this + 120) & 4) != 0) {
    uint64_t v15 = *((void *)this + 7);
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v16 = (sirinluinternalembedding::EmbeddingTensorOutput **)*((void *)this + 10);
  uint64_t v17 = (sirinluinternalembedding::EmbeddingTensorOutput **)*((void *)this + 11);
  if (v16 == v17)
  {
    uint64_t v18 = 0;
  }
  else
  {
    uint64_t v18 = 0;
    do
    {
      size_t v19 = *v16++;
      v18 ^= sirinluinternalembedding::EmbeddingTensorOutput::hash_value(v19);
    }
    while (v16 != v17);
  }
  return v5 ^ v3 ^ v22 ^ v21 ^ v6 ^ v8 ^ v11 ^ v14 ^ v15 ^ v18;
}

uint64_t sirinluinternalembedding::EmbeddingResponse::makeEmbeddingTensor(uint64_t this)
{
  if (!*(void *)(this + 16)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternalembedding::EmbeddingResponse::makeTokenChain(uint64_t this)
{
  if (!*(void *)(this + 112)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternalembedding::EmbeddingResponse::makeSentenceEmbeddingTensor(uint64_t this)
{
  if (!*(void *)(this + 72)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternalembedding::EmbeddingResponse::makeSubwordTokenChain(uint64_t this)
{
  if (!*(void *)(this + 104)) {
    operator new();
  }
  return this;
}

uint64_t SIRINLUINTERNALMDSUaaPParseOverrideReadFrom(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  unint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = objc_alloc_init(SIRINLUINTERNALParseOverride);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || (SIRINLUINTERNALParseOverrideReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t SIRINLUINTERNALUAAP_PARSERUaaPParserRequestReadFrom(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  unint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v17 = objc_alloc_init(SIRINLUEXTERNALUUID);
        objc_storeStrong((id *)(a1 + 32), v17);
        if PBReaderPlaceMark() && (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v17, a2)) {
          goto LABEL_35;
        }
        goto LABEL_50;
      case 2u:
        uint64_t v17 = objc_alloc_init(SIRINLUINTERNALTokenChain);
        objc_storeStrong((id *)(a1 + 40), v17);
        if (!PBReaderPlaceMark() || !SIRINLUINTERNALTokenChainReadFrom((char *)v17, a2)) {
          goto LABEL_50;
        }
        goto LABEL_35;
      case 3u:
        uint64_t v17 = objc_alloc_init(SIRINLUINTERNALNLv4EmbeddingTensor);
        objc_storeStrong((id *)(a1 + 16), v17);
        if (!PBReaderPlaceMark()
          || (SIRINLUINTERNALNLv4EmbeddingTensorReadFrom((uint64_t)v17, a2) & 1) == 0)
        {
          goto LABEL_50;
        }
        goto LABEL_35;
      case 4u:
        uint64_t v17 = objc_alloc_init(SIRINLUINTERNALMatchingSpan);
        [(id)a1 addMatchingSpans:v17];
        if (!PBReaderPlaceMark() || (SIRINLUINTERNALMatchingSpanReadFrom((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_50;
        }
        goto LABEL_35;
      case 5u:
        uint64_t v17 = objc_alloc_init(SIRINLUEXTERNALTurnInput);
        objc_storeStrong((id *)(a1 + 48), v17);
        if PBReaderPlaceMark() && (SIRINLUEXTERNALTurnInputReadFrom((uint64_t)v17, a2))
        {
LABEL_35:
          PBReaderRecallMark();

LABEL_36:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_50:

        return 0;
      case 6u:
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        *(unsigned char *)(a1 + 56) |= 1u;
        while (2)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              BOOL v14 = v20++ >= 9;
              if (v14)
              {
                uint64_t v21 = 0;
                goto LABEL_48;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v21 = 0;
        }
LABEL_48:
        *(void *)(a1 + 8) = v21;
        goto LABEL_36;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_36;
    }
  }
}

uint64_t SIRINLUINTERNALQUERYREWRITEQRResponseReadFrom(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  unint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v17 = objc_alloc_init(SIRINLUEXTERNALUUID);
        objc_storeStrong((id *)(a1 + 24), v17);
        if PBReaderPlaceMark() && (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v17, a2)) {
          goto LABEL_36;
        }
        goto LABEL_43;
      case 2u:
        uint64_t v17 = objc_alloc_init(SIRINLUINTERNALQUERYREWRITEQRHypothesis);
        [(id)a1 addQrHypotheses:v17];
        if (!PBReaderPlaceMark()
          || (SIRINLUINTERNALQUERYREWRITEQRHypothesisReadFrom((uint64_t)v17, a2) & 1) == 0)
        {
          goto LABEL_43;
        }
        goto LABEL_36;
      case 3u:
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        *(unsigned char *)(a1 + 40) |= 1u;
        while (2)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              BOOL v14 = v20++ >= 9;
              if (v14)
              {
                LODWORD(v21) = 0;
                goto LABEL_40;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v21) = 0;
        }
LABEL_40:
        *(_DWORD *)(a1 + 16) = v21;
        goto LABEL_41;
      case 4u:
        uint64_t v17 = objc_alloc_init(SIRINLUINTERNALRewriteHypothesis);
        [(id)a1 addRewriteHypotheses:v17];
        if PBReaderPlaceMark() && (SIRINLUINTERNALRewriteHypothesisReadFrom((uint64_t)v17, a2))
        {
LABEL_36:
          PBReaderRecallMark();

LABEL_41:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_43:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_41;
    }
  }
}

uint64_t sirinluinternal::PreprocessingWrapper::formatText(sirinluinternal::PreprocessingWrapper *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "embedding_response");
  }
  uint64_t v6 = *((void *)this + 2);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, a2, "mention_resolver_response");
  }
  uint64_t v7 = *((void *)this + 3);
  if (v7) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "span_match_response");
  }
  uint64_t v8 = *((void *)this + 4);
  if (v8) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v8 + 32))(v8, a2, "tokenizer_response");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluinternal::PreprocessingWrapper::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v3 = (void *)this;
  uint64_t v4 = *(const PB::Base **)(this + 32);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  uint64_t v5 = (const PB::Base *)v3[3];
  if (v5) {
    this = PB::Writer::writeSubmessage(a2, v5);
  }
  uint64_t v6 = (const PB::Base *)v3[1];
  if (v6) {
    this = PB::Writer::writeSubmessage(a2, v6);
  }
  uint64_t v7 = (const PB::Base *)v3[2];
  if (v7)
  {
    return PB::Writer::writeSubmessage(a2, v7);
  }
  return this;
}

uint64_t sirinluinternal::PreprocessingWrapper::readFrom(sirinluinternal::PreprocessingWrapper *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_19;
        }
      }
LABEL_21:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v10 >> 3))
      {
        case 1u:
          operator new();
        case 2u:
          operator new();
        case 3u:
          operator new();
        case 4u:
          operator new();
        default:
          break;
      }
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_21;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_19;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluinternal::PreprocessingWrapper::~PreprocessingWrapper(sirinluinternal::PreprocessingWrapper *this)
{
  sirinluinternal::PreprocessingWrapper::~PreprocessingWrapper(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t vars8;

  *(void *)this = &unk_1F232C678;
  unint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  PB::Base::~Base(this);
}

double sirinluinternal::PreprocessingWrapper::PreprocessingWrapper(sirinluinternal::PreprocessingWrapper *this)
{
  *(void *)this = &unk_1F232C678;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

{
  double result;

  *(void *)this = &unk_1F232C678;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

uint64_t sirinluinternal::PreprocessingWrapper::PreprocessingWrapper(uint64_t this, const sirinluinternal::PreprocessingWrapper *a2)
{
  *(void *)this = &unk_1F232C678;
  *(_OWORD *)(this + 8) = 0u;
  *(_OWORD *)(this + 24) = 0u;
  if (*((void *)a2 + 4)) {
    operator new();
  }
  if (*((void *)a2 + 3)) {
    operator new();
  }
  if (*((void *)a2 + 1)) {
    operator new();
  }
  if (*((void *)a2 + 2)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternal::PreprocessingWrapper::operator=(uint64_t a1, const sirinluinternal::PreprocessingWrapper *a2)
{
  if ((const sirinluinternal::PreprocessingWrapper *)a1 != a2)
  {
    sirinluinternal::PreprocessingWrapper::PreprocessingWrapper((uint64_t)v6, a2);
    long long v3 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v8;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v4;
    long long v8 = v3;
    sirinluinternal::PreprocessingWrapper::~PreprocessingWrapper((sirinluinternal::PreprocessingWrapper *)v6);
  }
  return a1;
}

void *sirinluinternal::swap(void *this, sirinluinternal::PreprocessingWrapper *a2, sirinluinternal::PreprocessingWrapper *a3)
{
  uint64_t v3 = this[4];
  this[4] = *((void *)a2 + 4);
  *((void *)a2 + 4) = v3;
  uint64_t v4 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v4;
  uint64_t v5 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  return this;
}

uint64_t sirinluinternal::PreprocessingWrapper::PreprocessingWrapper(uint64_t a1, void *a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)a1 = &unk_1F232C678;
  *(_OWORD *)(a1 + 24) = 0u;
  uint64_t v5 = a2[4];
  a2[4] = 0;
  uint64_t v6 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v5;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = a2[3];
  a2[3] = 0;
  uint64_t v8 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v7;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = a2[1];
  a2[1] = 0;
  uint64_t v10 = *v4;
  *uint64_t v4 = v9;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = a2[2];
  a2[2] = 0;
  uint64_t v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  return a1;
}

uint64_t sirinluinternal::PreprocessingWrapper::operator=(uint64_t a1, void *a2)
{
  if ((void *)a1 != a2)
  {
    sirinluinternal::PreprocessingWrapper::PreprocessingWrapper((uint64_t)v6, a2);
    long long v3 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v8;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v4;
    long long v8 = v3;
    sirinluinternal::PreprocessingWrapper::~PreprocessingWrapper((sirinluinternal::PreprocessingWrapper *)v6);
  }
  return a1;
}

uint64_t sirinluinternal::PreprocessingWrapper::operator==(void *a1, void *a2)
{
  long long v4 = (void *)a1[4];
  uint64_t v5 = (void *)a2[4];
  if (v4)
  {
    if (!v5 || !sirinluinternaltokenizer::TokenizerResponse::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  uint64_t v6 = a1[3];
  uint64_t v7 = a2[3];
  if (v6)
  {
    if (!v7
      || !PB::PtrVector<sirinluinternal::MatchingSpan>::operator==((uint64_t *)(v6 + 8), *(uint64_t **)(v7 + 8), *(void *)(v7 + 16)))
    {
      return 0;
    }
  }
  else if (v7)
  {
    return 0;
  }
  uint64_t v8 = a1[1];
  uint64_t v9 = a2[1];
  if (!v8)
  {
    if (!v9) {
      goto LABEL_14;
    }
    return 0;
  }
  if (!v9 || !sirinluinternalembedding::EmbeddingResponse::operator==(v8, v9)) {
    return 0;
  }
LABEL_14:
  uint64_t v10 = a1[2];
  uint64_t v11 = a2[2];
  uint64_t result = (v10 | v11) == 0;
  if (v10 && v11)
  {
    BOOL v13 = (uint64_t *)a1[2];
    return sirinluinternalmention_resolver::MentionResolverResponse::operator==(v13, v11);
  }
  return result;
}

unint64_t sirinluinternal::PreprocessingWrapper::hash_value(sirinluinternal::PreprocessingWrapper *this)
{
  unint64_t v2 = (sirinluinternaltokenizer::TokenizerResponse *)*((void *)this + 4);
  if (v2) {
    unint64_t v3 = sirinluinternaltokenizer::TokenizerResponse::hash_value(v2);
  }
  else {
    unint64_t v3 = 0;
  }
  uint64_t v4 = *((void *)this + 3);
  if (!v4
    || (uint64_t v5 = *(sirinluinternal::MatchingSpan ***)(v4 + 8), v6 = *(sirinluinternal::MatchingSpan ***)(v4 + 16), v5 == v6))
  {
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = *v5++;
      v7 ^= sirinluinternal::MatchingSpan::hash_value(v8);
    }
    while (v5 != v6);
  }
  uint64_t v9 = (sirinluinternalembedding::EmbeddingResponse *)*((void *)this + 1);
  if (v9) {
    unint64_t v10 = sirinluinternalembedding::EmbeddingResponse::hash_value(v9);
  }
  else {
    unint64_t v10 = 0;
  }
  unint64_t v11 = *((void *)this + 2);
  if (v11) {
    unint64_t v11 = sirinluinternalmention_resolver::MentionResolverResponse::hash_value((sirinluinternalmention_resolver::MentionResolverResponse *)v11);
  }
  return v7 ^ v3 ^ v10 ^ v11;
}

uint64_t sirinluinternal::PreprocessingWrapper::makeTokenizerResponse(uint64_t this)
{
  if (!*(void *)(this + 32)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternal::PreprocessingWrapper::makeSpanMatchResponse(uint64_t this)
{
  if (!*(void *)(this + 24)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternal::PreprocessingWrapper::makeEmbeddingResponse(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternal::PreprocessingWrapper::makeMentionResolverResponse(uint64_t this)
{
  if (!*(void *)(this + 16)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternal::Parser::formatText(sirinluexternal::Parser *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 16);
  if (v5)
  {
    PB::TextFormatter::format(a2, "algorithm");
    char v5 = *((unsigned char *)this + 16);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(a2, "parser_id");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluexternal::Parser::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 16);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2);
    char v4 = *(unsigned char *)(v3 + 16);
  }
  if ((v4 & 2) != 0)
  {
    return PB::Writer::writeVarInt(a2);
  }
  return this;
}

uint64_t sirinluexternal::Parser::readFrom(sirinluexternal::Parser *this, PB::Reader *a2)
{
  unint64_t v3 = *((void *)a2 + 1);
  unint64_t v2 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v3 + 1;
        *((void *)a2 + 1) = v3 + 1;
        char v13 = *(unsigned char *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v3 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_30;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 16) |= 2u;
        unint64_t v26 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v27 = *(void *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          char v36 = 0;
          unsigned int v37 = 0;
          uint64_t v30 = 0;
          if (v2 <= v26) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v26)
            {
              LODWORD(v30) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_64;
            }
            unint64_t v38 = v26 + 1;
            char v39 = *(unsigned char *)(v27 + v26);
            *((void *)a2 + 1) = v38;
            v30 |= (unint64_t)(v39 & 0x7F) << v36;
            if ((v39 & 0x80) == 0) {
              break;
            }
            v36 += 7;
            unint64_t v26 = v38;
            BOOL v14 = v37++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
              goto LABEL_63;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v30) = 0;
          }
LABEL_63:
          unint64_t v3 = v38;
        }
        else
        {
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v30 = 0;
          while (1)
          {
            unint64_t v3 = v26 + 1;
            *((void *)a2 + 1) = v26 + 1;
            char v31 = *(unsigned char *)(v27 + v26);
            v30 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            unint64_t v26 = v3;
            BOOL v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
              break;
            }
          }
        }
LABEL_64:
        *((_DWORD *)this + 3) = v30;
      }
      else if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 16) |= 1u;
        unint64_t v19 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v20 = *(void *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v2)
        {
          char v32 = 0;
          unsigned int v33 = 0;
          uint64_t v23 = 0;
          if (v2 <= v19) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v19)
            {
              LODWORD(v23) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_60;
            }
            unint64_t v34 = v19 + 1;
            char v35 = *(unsigned char *)(v20 + v19);
            *((void *)a2 + 1) = v34;
            v23 |= (unint64_t)(v35 & 0x7F) << v32;
            if ((v35 & 0x80) == 0) {
              break;
            }
            v32 += 7;
            unint64_t v19 = v34;
            BOOL v14 = v33++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              goto LABEL_59;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v23) = 0;
          }
LABEL_59:
          unint64_t v3 = v34;
        }
        else
        {
          char v21 = 0;
          unsigned int v22 = 0;
          uint64_t v23 = 0;
          while (1)
          {
            unint64_t v3 = v19 + 1;
            *((void *)a2 + 1) = v19 + 1;
            char v24 = *(unsigned char *)(v20 + v19);
            v23 |= (unint64_t)(v24 & 0x7F) << v21;
            if ((v24 & 0x80) == 0) {
              break;
            }
            v21 += 7;
            unint64_t v19 = v3;
            BOOL v14 = v22++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              break;
            }
          }
        }
LABEL_60:
        *((_DWORD *)this + 2) = v23;
      }
      else
      {
LABEL_30:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v3 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
      }
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v3 >= v2 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v3 > v2) {
      unint64_t v2 = v3;
    }
    while (v2 != v3)
    {
      unint64_t v17 = v3 + 1;
      char v18 = *(unsigned char *)(v8 + v3);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v3 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_30;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluexternal::Parser::~Parser(sirinluexternal::Parser *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x1CB772580);
}

uint64_t sirinluexternal::Parser::Parser(uint64_t this)
{
  *(void *)this = &unk_1F232C6C8;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

{
  *(void *)this = &unk_1F232C6C8;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t sirinluexternal::Parser::Parser(uint64_t this, const sirinluexternal::Parser *a2)
{
  *(void *)this = &unk_1F232C6C8;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  if (*((unsigned char *)a2 + 16))
  {
    int v3 = *((_DWORD *)a2 + 2);
    *(unsigned char *)(this + 16) = 1;
    *(_DWORD *)(this + 8) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 16) & 2) == 0) {
      return this;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 16) & 2) != 0)
  {
LABEL_5:
    int v4 = *((_DWORD *)a2 + 3);
    *(unsigned char *)(this + 16) = v2;
    *(_DWORD *)(this + 12) = v4;
  }
  return this;
}

uint64_t sirinluexternal::Parser::operator=(uint64_t a1, const sirinluexternal::Parser *a2)
{
  if ((const sirinluexternal::Parser *)a1 != a2)
  {
    sirinluexternal::Parser::Parser((uint64_t)v6, a2);
    int v3 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v8;
    int v8 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

double sirinluexternal::swap(sirinluexternal *this, sirinluexternal::Parser *a2, sirinluexternal::Parser *a3)
{
  int v3 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v3;
  double result = *((double *)a2 + 1);
  uint64_t v5 = *((void *)this + 1);
  *((double *)this + 1) = result;
  *((void *)a2 + 1) = v5;
  return result;
}

double sirinluexternal::Parser::Parser(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F232C6C8;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(void *)a1 = &unk_1F232C6C8;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t sirinluexternal::Parser::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v7[0] = &unk_1F232C6C8;
    int v3 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = 0;
    int v8 = *(_DWORD *)(a1 + 16);
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a2 + 8);
    *(_DWORD *)(a1 + 16) = v3;
    *(void *)(a1 + 8) = v5;
    v7[1] = v4;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

BOOL sirinluexternal::Parser::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 16))
  {
    if ((*(unsigned char *)(a2 + 16) & 1) == 0 || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 16))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 16) & 2) == 0;
  if ((*(unsigned char *)(a1 + 16) & 2) != 0) {
    return (*(unsigned char *)(a2 + 16) & 2) != 0 && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12);
  }
  return v2;
}

uint64_t sirinluexternal::Parser::hash_value(sirinluexternal::Parser *this)
{
  if (*((unsigned char *)this + 16))
  {
    uint64_t v1 = *((int *)this + 2);
    if ((*((unsigned char *)this + 16) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v2 = 0;
    return v2 ^ v1;
  }
  uint64_t v1 = 0;
  if ((*((unsigned char *)this + 16) & 2) == 0) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v2 = *((int *)this + 3);
  return v2 ^ v1;
}

uint64_t SIRICOMMONBoolValueReadFrom(uint64_t a1, uint64_t a2)
{
  int v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 12) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_29;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v19 = 0;
            goto LABEL_31;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_29:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v19 = 0;
        }
LABEL_31:
        *(unsigned char *)(a1 + 8) = v19 != 0;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t SIRINLUINTERNALSPANMATCHSpanMatchResponseReadFrom(void *a1, uint64_t a2)
{
  int v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = objc_alloc_init(SIRINLUINTERNALMatchingSpan);
        [a1 addMatchingSpans:v17];
        if (!PBReaderPlaceMark() || (SIRINLUINTERNALMatchingSpanReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1C8B23538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  MEMORY[0x1CB772580](v7, 0x1030C40E9F947FBLL);
  apple::aiml::flatbuffers2::FlatBufferBuilder::~FlatBufferBuilder((apple::aiml::flatbuffers2::FlatBufferBuilder *)va);
  _Unwind_Resume(a1);
}

void sub_1C8B238CC(_Unwind_Exception *a1)
{
  if (v2) {
    operator delete(v2);
  }
  _Unwind_Resume(a1);
}

void sub_1C8B23A60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B23B10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B23C24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B23D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C8B23E04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B24094(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL CDMCATISwiftBloomFilter::Verify(CDMCATISwiftBloomFilter *this, apple::aiml::flatbuffers2::Verifier *a2)
{
  BOOL result = apple::aiml::flatbuffers2::Verifier::VerifyTableStart(a2, this->var0);
  if (result)
  {
    BOOL result = apple::aiml::flatbuffers2::Table::VerifyOffset((apple::aiml::flatbuffers2::Table *)this, a2, 4u);
    if (result)
    {
      uint64_t v5 = *(int *)this->var0;
      unsigned int v6 = *(unsigned __int16 *)this[-v5].var0;
      if (v6 < 5) {
        goto LABEL_28;
      }
      if (*(_WORD *)this[-v5 + 4].var0)
      {
        BOOL result = CDMCATISwiftBitVector::Verify((CDMCATISwiftBitVector *)&this[*(unsigned __int16 *)this[-v5 + 4].var0+ *(unsigned int *)this[*(unsigned __int16 *)this[-v5 + 4].var0].var0], a2);
        if (!result) {
          return result;
        }
        uint64_t v5 = *(int *)this->var0;
        uint64_t v7 = -v5;
        unsigned int v6 = *(unsigned __int16 *)this[-v5].var0;
      }
      else
      {
        uint64_t v7 = -v5;
      }
      if (v6 < 7) {
        goto LABEL_28;
      }
      char v8 = &this[v7];
      if (!*(_WORD *)v8[6].var0
        || (result = 0, unint64_t v9 = *((void *)a2 + 1), v9 >= 9)
        && v9 - 8 >= (unint64_t)this[*(unsigned __int16 *)v8[6].var0 - *(void *)a2].var0)
      {
        if (v6 < 9) {
          goto LABEL_28;
        }
        if (!*(_WORD *)v8[8].var0
          || (result = 0, unint64_t v10 = *((void *)a2 + 1), v10 >= 9)
          && v10 - 8 >= (unint64_t)this[*(unsigned __int16 *)v8[8].var0 - *(void *)a2].var0)
        {
          if (v6 < 0xB
            || (!*(_WORD *)v8[10].var0
             || (result = 0, unint64_t v11 = *((void *)a2 + 1), v11 >= 9)
             && v11 - 8 >= (unint64_t)this[*(unsigned __int16 *)v8[10].var0 - *(void *)a2].var0)
            && (v6 < 0xD
             || (!*(_WORD *)v8[12].var0
              || (result = 0, unint64_t v12 = *((void *)a2 + 1), v12 >= 5)
              && v12 - 4 >= (unint64_t)this[*(unsigned __int16 *)v8[12].var0 - *(void *)a2].var0)
             && (v6 < 0xF
              || (uint64_t v13 = *(unsigned __int16 *)v8[14].var0, !*(_WORD *)v8[14].var0)
              || (BOOL result = 0, v14 = *((void *)a2 + 1), v14 >= 9)
              && v14 - 8 >= (unint64_t)this[v13 - *(void *)a2].var0)))
          {
LABEL_28:
            BOOL result = apple::aiml::flatbuffers2::Table::VerifyOffset((apple::aiml::flatbuffers2::Table *)this, a2, 0x10u);
            if (result)
            {
              int v15 = &this[-(int)v5];
              if (*(unsigned __int16 *)v15->var0 >= 0x11u && (uint64_t v16 = *(unsigned __int16 *)v15[16].var0) != 0) {
                char v17 = &this[v16 + *(unsigned int *)this[v16].var0];
              }
              else {
                char v17 = 0;
              }
              BOOL result = apple::aiml::flatbuffers2::Verifier::VerifyString(a2, v17->var0);
              if (result)
              {
                unsigned int v18 = &this[-*(int *)this->var0];
                unsigned int v19 = *(unsigned __int16 *)v18->var0;
                if (v19 < 0x13
                  || (!*(_WORD *)v18[18].var0
                   || (BOOL result = 0, v20 = *((void *)a2 + 1), v20 >= 5)
                   && v20 - 4 >= (unint64_t)this[*(unsigned __int16 *)v18[18].var0 - *(void *)a2].var0)
                  && (v19 < 0x15
                   || (uint64_t v21 = *(unsigned __int16 *)v18[20].var0) == 0
                   || (BOOL result = 0, v22 = *((void *)a2 + 1), v22 >= 5)
                   && v22 - 4 >= (unint64_t)this[v21 - *(void *)a2].var0))
                {
                  --*((_DWORD *)a2 + 4);
                  return 1;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL CDMCATISwiftBitVector::Verify(CDMCATISwiftBitVector *this, apple::aiml::flatbuffers2::Verifier *a2)
{
  BOOL result = apple::aiml::flatbuffers2::Verifier::VerifyTableStart(a2, this->var0);
  if (result)
  {
    uint64_t v5 = &this[-*(int *)this->var0];
    unsigned int v6 = *(unsigned __int16 *)v5->var0;
    if (v6 < 5) {
      goto LABEL_18;
    }
    if (!*(_WORD *)v5[4].var0
      || (BOOL result = 0, v7 = *((void *)a2 + 1), v7 >= 9)
      && v7 - 8 >= (unint64_t)this[*(unsigned __int16 *)v5[4].var0 - *(void *)a2].var0)
    {
      if (v6 < 7
        || (!*(_WORD *)v5[6].var0
         || (BOOL result = 0, v8 = *((void *)a2 + 1), v8 >= 9)
         && v8 - 8 >= (unint64_t)this[*(unsigned __int16 *)v5[6].var0 - *(void *)a2].var0)
        && (v6 < 9
         || (!*(_WORD *)v5[8].var0
          || (result = 0, unint64_t v9 = *((void *)a2 + 1), v9 >= 9)
          && v9 - 8 >= (unint64_t)this[*(unsigned __int16 *)v5[8].var0 - *(void *)a2].var0)
         && (v6 < 0xB
          || !*(_WORD *)v5[10].var0
          || (result = 0, unint64_t v10 = *((void *)a2 + 1), v10 >= 9)
          && v10 - 8 >= (unint64_t)this[*(unsigned __int16 *)v5[10].var0 - *(void *)a2].var0)))
      {
LABEL_18:
        BOOL result = apple::aiml::flatbuffers2::Table::VerifyOffset((apple::aiml::flatbuffers2::Table *)this, a2, 0xCu);
        if (result
          && (v6 < 0xD
           || !*(_WORD *)v5[12].var0
           || (BOOL result = apple::aiml::flatbuffers2::Verifier::VerifyVectorOrString(a2, this[*(unsigned __int16 *)v5[12].var0+ *(unsigned int *)this[*(unsigned __int16 *)v5[12].var0].var0].var0, 1uLL, 0))))
        {
          --*((_DWORD *)a2 + 4);
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t sirinluinternal::CCQROverrideTemplate::formatText(sirinluinternal::CCQROverrideTemplate *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "rewrite_message");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluinternal::CCQROverrideTemplate::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2);
  }
  return this;
}

uint64_t sirinluinternal::CCQROverrideTemplate::readFrom(sirinluinternal::CCQROverrideTemplate *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluinternal::CCQROverrideTemplate::~CCQROverrideTemplate(sirinluinternal::CCQROverrideTemplate *this)
{
  sirinluinternal::CCQROverrideTemplate::~CCQROverrideTemplate(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t vars8;

  unint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1F232C718;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

void *sirinluinternal::CCQROverrideTemplate::CCQROverrideTemplate(void *this)
{
  *this = &unk_1F232C718;
  this[1] = 0;
  return this;
}

{
  *this = &unk_1F232C718;
  this[1] = 0;
  return this;
}

void *sirinluinternal::CCQROverrideTemplate::CCQROverrideTemplate(void *this, const sirinluinternal::CCQROverrideTemplate *a2)
{
  *this = &unk_1F232C718;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const sirinluinternal::CCQROverrideTemplate *sirinluinternal::CCQROverrideTemplate::operator=(const sirinluinternal::CCQROverrideTemplate *a1, const sirinluinternal::CCQROverrideTemplate *a2)
{
  if (a1 != a2)
  {
    sirinluinternal::CCQROverrideTemplate::CCQROverrideTemplate(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    sirinluinternal::CCQROverrideTemplate::~CCQROverrideTemplate((sirinluinternal::CCQROverrideTemplate *)&v5);
  }
  return a1;
}

uint64_t sirinluinternal::swap(uint64_t this, sirinluinternal::CCQROverrideTemplate *a2, sirinluinternal::CCQROverrideTemplate *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *sirinluinternal::CCQROverrideTemplate::CCQROverrideTemplate(void *a1, uint64_t a2)
{
  *a1 = &unk_1F232C718;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_1F232C718;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t sirinluinternal::CCQROverrideTemplate::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = &unk_1F232C718;
    v6[1] = v4;
    sirinluinternal::CCQROverrideTemplate::~CCQROverrideTemplate((sirinluinternal::CCQROverrideTemplate *)v6);
  }
  return a1;
}

uint64_t sirinluinternal::CCQROverrideTemplate::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    return (v2 | v3) == 0;
  }
  else {
    return sirinluexternal::RewriteMessage::operator==(v2, v3);
  }
}

unint64_t sirinluinternal::CCQROverrideTemplate::hash_value(sirinluinternal::CCQROverrideTemplate *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (!v1) {
    return 0;
  }
  if (*(unsigned char *)(v1 + 20)) {
    uint64_t v2 = *(int *)(v1 + 16);
  }
  else {
    uint64_t v2 = 0;
  }
  unint64_t v4 = *(void *)(v1 + 8);
  if (v4) {
    unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100](v4);
  }
  return v4 ^ v2;
}

uint64_t sirinluinternal::CCQROverrideTemplate::makeRewriteMessage(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternalsubword_embedding::SubwordEmbeddingRequest::formatText(sirinluexternalsubword_embedding::SubwordEmbeddingRequest *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "request_id");
  }
  if (*((void *)this + 2)) {
    PB::TextFormatter::format();
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluexternalsubword_embedding::SubwordEmbeddingRequest::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if (*(void *)(this + 16)) {
    this = PB::Writer::write();
  }
  unint64_t v4 = *(const PB::Base **)(v3 + 8);
  if (v4)
  {
    return PB::Writer::writeSubmessage(a2, v4);
  }
  return this;
}

uint64_t sirinluexternalsubword_embedding::SubwordEmbeddingRequest::readFrom(sirinluexternalsubword_embedding::SubwordEmbeddingRequest *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_24;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 2) {
        operator new();
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_24:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_24;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluexternalsubword_embedding::SubwordEmbeddingRequest::~SubwordEmbeddingRequest(sirinluexternalsubword_embedding::SubwordEmbeddingRequest *this)
{
  sirinluexternalsubword_embedding::SubwordEmbeddingRequest::~SubwordEmbeddingRequest(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1F232C768;
  unint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    std::default_delete<std::string>::operator()[abi:ne180100](v2);
  }
  unint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  PB::Base::~Base(this);
}

void *sirinluexternalsubword_embedding::SubwordEmbeddingRequest::SubwordEmbeddingRequest(void *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1F232C768;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1F232C768;
  return this;
}

void *sirinluexternalsubword_embedding::SubwordEmbeddingRequest::SubwordEmbeddingRequest(void *this, const sirinluexternalsubword_embedding::SubwordEmbeddingRequest *a2)
{
  *this = &unk_1F232C768;
  this[1] = 0;
  this[2] = 0;
  if (*((void *)a2 + 2)) {
    operator new();
  }
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternalsubword_embedding::SubwordEmbeddingRequest::operator=(uint64_t a1, const sirinluexternalsubword_embedding::SubwordEmbeddingRequest *a2)
{
  if ((const sirinluexternalsubword_embedding::SubwordEmbeddingRequest *)a1 != a2)
  {
    sirinluexternalsubword_embedding::SubwordEmbeddingRequest::SubwordEmbeddingRequest(&v5, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    long long v6 = v3;
    sirinluexternalsubword_embedding::SubwordEmbeddingRequest::~SubwordEmbeddingRequest((sirinluexternalsubword_embedding::SubwordEmbeddingRequest *)&v5);
  }
  return a1;
}

uint64_t sirinluexternalsubword_embedding::swap(uint64_t this, sirinluexternalsubword_embedding::SubwordEmbeddingRequest *a2, sirinluexternalsubword_embedding::SubwordEmbeddingRequest *a3)
{
  uint64_t v3 = *(void *)(this + 16);
  *(void *)(this + 16) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v3;
  uint64_t v4 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  return this;
}

void *sirinluexternalsubword_embedding::SubwordEmbeddingRequest::SubwordEmbeddingRequest(void *a1, uint64_t a2)
{
  a1[1] = 0;
  uint64_t v4 = a1 + 1;
  *a1 = &unk_1F232C768;
  a1[2] = 0;
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  uint64_t v6 = a1[2];
  a1[2] = v5;
  if (v6) {
    std::default_delete<std::string>::operator()[abi:ne180100](v6);
  }
  uint64_t v7 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v8 = *v4;
  *uint64_t v4 = v7;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  return a1;
}

uint64_t sirinluexternalsubword_embedding::SubwordEmbeddingRequest::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sirinluexternalsubword_embedding::SubwordEmbeddingRequest::SubwordEmbeddingRequest(&v5, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    long long v6 = v3;
    sirinluexternalsubword_embedding::SubwordEmbeddingRequest::~SubwordEmbeddingRequest((sirinluexternalsubword_embedding::SubwordEmbeddingRequest *)&v5);
  }
  return a1;
}

BOOL sirinluexternalsubword_embedding::SubwordEmbeddingRequest::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned __int8 **)(a1 + 16);
  uint64_t v5 = *(unsigned __int8 ***)(a2 + 16);
  if (!v4)
  {
    if (!v5) {
      goto LABEL_21;
    }
    return 0;
  }
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v4[23];
  if ((v6 & 0x80u) == 0) {
    uint64_t v7 = (unsigned __int8 *)v4[23];
  }
  else {
    uint64_t v7 = (unsigned __int8 *)*((void *)v4 + 1);
  }
  uint64_t v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
  int v9 = (char)v8;
  if ((char)v8 < 0) {
    uint64_t v8 = v5[1];
  }
  if (v7 != v8) {
    return 0;
  }
  if (v9 >= 0) {
    unint64_t v10 = *(unsigned __int8 **)(a2 + 16);
  }
  else {
    unint64_t v10 = *v5;
  }
  if ((v6 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)v4, v10, *((void *)v4 + 1))) {
      goto LABEL_21;
    }
    return 0;
  }
  if (v4[23])
  {
    while (*v4 == *v10)
    {
      ++v4;
      ++v10;
      if (!--v6) {
        goto LABEL_21;
      }
    }
    return 0;
  }
LABEL_21:
  uint64_t v12 = *(void *)(a1 + 8);
  uint64_t v13 = *(void *)(a2 + 8);
  BOOL result = (v12 | v13) == 0;
  if (v12) {
    BOOL v14 = v13 == 0;
  }
  else {
    BOOL v14 = 1;
  }
  if (!v14)
  {
    uint64_t v15 = *(void *)(a1 + 8);
    return sirinluexternal::RequestID::operator==(v15, v13);
  }
  return result;
}

unint64_t sirinluexternalsubword_embedding::SubwordEmbeddingRequest::hash_value(sirinluexternalsubword_embedding::SubwordEmbeddingRequest *this)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    unint64_t v3 = std::__string_hash<char>::operator()[abi:ne180100](v2);
  }
  else {
    unint64_t v3 = 0;
  }
  unint64_t v4 = *((void *)this + 1);
  if (v4) {
    unint64_t v4 = sirinluexternal::RequestID::hash_value((sirinluexternal::RequestID *)v4);
  }
  return v4 ^ v3;
}

uint64_t sirinluexternalsubword_embedding::SubwordEmbeddingRequest::makeRequestId(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

BOOL SIRINLUEXTERNALRRSurroundingTextReadFrom(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        unsigned int v18 = *(SIRINLUEXTERNALRRBoundingBox **)(a1 + 16);
        *(void *)(a1 + 16) = v17;
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_26:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    unsigned int v18 = objc_alloc_init(SIRINLUEXTERNALRRBoundingBox);
    objc_storeStrong((id *)(a1 + 8), v18);
    if (!PBReaderPlaceMark() || !SIRINLUEXTERNALRRBoundingBoxReadFrom((uint64_t)v18, a2))
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_24;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sirinluexternal::RRGroupIdentifier::formatText(sirinluexternal::RRGroupIdentifier *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "group_id");
  }
  if (*((unsigned char *)this + 20)) {
    PB::TextFormatter::format(a2, "seq");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluexternal::RRGroupIdentifier::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  unint64_t v4 = *(const PB::Base **)(this + 8);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  if (*(unsigned char *)(v3 + 20))
  {
    return PB::Writer::writeVarInt(a2);
  }
  return this;
}

uint64_t sirinluexternal::RRGroupIdentifier::readFrom(sirinluexternal::RRGroupIdentifier *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_24;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v21 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v21)
        {
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v25 = 0;
          if (v21 <= v20) {
            unint64_t v21 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v21 == v20)
            {
              LODWORD(v25) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_43;
            }
            unint64_t v30 = v20 + 1;
            char v31 = *(unsigned char *)(v22 + v20);
            *((void *)a2 + 1) = v30;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            unint64_t v20 = v30;
            BOOL v14 = v29++ > 8;
            if (v14)
            {
LABEL_39:
              LODWORD(v25) = 0;
              goto LABEL_43;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v25) = 0;
          }
        }
        else
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          while (1)
          {
            unint64_t v26 = v20 + 1;
            *((void *)a2 + 1) = v20 + 1;
            char v27 = *(unsigned char *)(v22 + v20);
            v25 |= (unint64_t)(v27 & 0x7F) << v23;
            if ((v27 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            unint64_t v20 = v26;
            BOOL v14 = v24++ > 8;
            if (v14) {
              goto LABEL_39;
            }
          }
        }
LABEL_43:
        *((_DWORD *)this + 4) = v25;
      }
      else
      {
        if ((v11 >> 3) == 1) {
          operator new();
        }
LABEL_24:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_24;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluexternal::RRGroupIdentifier::~RRGroupIdentifier(sirinluexternal::RRGroupIdentifier *this)
{
  sirinluexternal::RRGroupIdentifier::~RRGroupIdentifier(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t vars8;

  unint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1F232C7B8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

uint64_t sirinluexternal::RRGroupIdentifier::RRGroupIdentifier(uint64_t this)
{
  *(void *)this = &unk_1F232C7B8;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(void *)this = &unk_1F232C7B8;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t sirinluexternal::RRGroupIdentifier::RRGroupIdentifier(uint64_t this, const sirinluexternal::RRGroupIdentifier *a2)
{
  *(void *)this = &unk_1F232C7B8;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  if (*((unsigned char *)a2 + 20))
  {
    int v2 = *((_DWORD *)a2 + 4);
    *(unsigned char *)(this + 20) |= 1u;
    *(_DWORD *)(this + 16) = v2;
  }
  return this;
}

const sirinluexternal::RRGroupIdentifier *sirinluexternal::RRGroupIdentifier::operator=(const sirinluexternal::RRGroupIdentifier *a1, const sirinluexternal::RRGroupIdentifier *a2)
{
  if (a1 != a2)
  {
    sirinluexternal::RRGroupIdentifier::RRGroupIdentifier((uint64_t)v6, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v7;
    uint64_t v7 = v3;
    uint64_t v4 = *((void *)a1 + 2);
    *((void *)a1 + 2) = v8;
    uint64_t v8 = v4;
    sirinluexternal::RRGroupIdentifier::~RRGroupIdentifier((sirinluexternal::RRGroupIdentifier *)v6);
  }
  return a1;
}

uint64_t sirinluexternal::swap(uint64_t this, sirinluexternal::RRGroupIdentifier *a2, sirinluexternal::RRGroupIdentifier *a3)
{
  int v3 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  uint64_t v4 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  return this;
}

uint64_t sirinluexternal::RRGroupIdentifier::RRGroupIdentifier(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F232C7B8;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t sirinluexternal::RRGroupIdentifier::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sirinluexternal::RRGroupIdentifier::RRGroupIdentifier((uint64_t)v6, a2);
    uint64_t v3 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v3;
    uint64_t v4 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v8;
    uint64_t v8 = v4;
    sirinluexternal::RRGroupIdentifier::~RRGroupIdentifier((sirinluexternal::RRGroupIdentifier *)v6);
  }
  return a1;
}

BOOL sirinluexternal::RRGroupIdentifier::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v4)
  {
    if (!v5 || (siricommon::StringValue::operator==(v4, v5) & 1) == 0) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  BOOL result = (*(unsigned char *)(a2 + 20) & 1) == 0;
  if ((*(unsigned char *)(a1 + 20) & 1) == 0) {
    return result;
  }
  return (*(unsigned char *)(a2 + 20) & 1) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
}

unint64_t sirinluexternal::RRGroupIdentifier::hash_value(sirinluexternal::RRGroupIdentifier *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    unint64_t v3 = *(void *)(v2 + 8);
    if (v3) {
      unint64_t v3 = std::__string_hash<char>::operator()[abi:ne180100](v3);
    }
  }
  else
  {
    unint64_t v3 = 0;
  }
  if (*((unsigned char *)this + 20)) {
    uint64_t v4 = *((int *)this + 4);
  }
  else {
    uint64_t v4 = 0;
  }
  return v4 ^ v3;
}

uint64_t sirinluexternal::RRGroupIdentifier::makeGroupId(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternalcdm::NluRequest::formatText(sirinluexternalcdm::NluRequest *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "current_turn_input");
  }
  uint64_t v6 = (uint64_t *)*((void *)this + 2);
  uint64_t v7 = (uint64_t *)*((void *)this + 3);
  while (v6 != v7)
  {
    uint64_t v8 = *v6++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v8 + 32))(v8, a2, "previous_turn_inputs");
  }
  uint64_t v9 = *((void *)this + 5);
  if (v9) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v9 + 32))(v9, a2, "request_id");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluexternalcdm::NluRequest::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v3 = (void *)this;
  uint64_t v4 = *(const PB::Base **)(this + 40);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  uint64_t v5 = (const PB::Base *)v3[1];
  if (v5) {
    this = PB::Writer::writeSubmessage(a2, v5);
  }
  uint64_t v7 = (const PB::Base **)v3[2];
  uint64_t v6 = (const PB::Base **)v3[3];
  while (v7 != v6)
  {
    uint64_t v8 = *v7++;
    this = PB::Writer::writeSubmessage(a2, v8);
  }
  return this;
}

uint64_t sirinluexternalcdm::NluRequest::readFrom(sirinluexternalcdm::NluRequest *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_25;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v18 = v10 >> 3;
      if ((v10 >> 3) == 3) {
        PB::PtrVector<sirinluexternal::TurnInput>::emplace_back<>();
      }
      if (v18 == 2) {
        operator new();
      }
      if (v18 == 1) {
        operator new();
      }
LABEL_25:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_25;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void PB::PtrVector<sirinluexternal::TurnInput>::emplace_back<>()
{
}

void sub_1C8B26AC4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sirinluexternalcdm::NluRequest::~NluRequest(sirinluexternalcdm::NluRequest *this)
{
  sirinluexternalcdm::NluRequest::~NluRequest(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t v3;
  void **v4;
  uint64_t vars8;

  *(void *)this = &unk_1F232C808;
  unint64_t v2 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  int v4 = (void **)((char *)this + 16);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v4);
  unint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  PB::Base::~Base(this);
}

double sirinluexternalcdm::NluRequest::NluRequest(sirinluexternalcdm::NluRequest *this)
{
  *(void *)this = &unk_1F232C808;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 5) = 0;
  return result;
}

{
  double result;

  *(void *)this = &unk_1F232C808;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 5) = 0;
  return result;
}

uint64_t sirinluexternalcdm::NluRequest::NluRequest(uint64_t this, const sirinluexternalcdm::NluRequest *a2)
{
  *(void *)this = &unk_1F232C808;
  *(_OWORD *)(this + 8) = 0u;
  *(_OWORD *)(this + 24) = 0u;
  *(void *)(this + 40) = 0;
  if (*((void *)a2 + 5)) {
    operator new();
  }
  if (*((void *)a2 + 1)) {
    operator new();
  }
  if (*((void *)a2 + 2) != *((void *)a2 + 3)) {
    PB::PtrVector<sirinluexternal::TurnInput>::emplace_back<sirinluexternal::TurnInput const&>();
  }
  return this;
}

void PB::PtrVector<sirinluexternal::TurnInput>::emplace_back<sirinluexternal::TurnInput const&>()
{
}

void sub_1C8B26EA4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sirinluexternalcdm::NluRequest::operator=(uint64_t a1, const sirinluexternalcdm::NluRequest *a2)
{
  if ((const sirinluexternalcdm::NluRequest *)a1 != a2)
  {
    sirinluexternalcdm::NluRequest::NluRequest((uint64_t)&v7, a2);
    uint64_t v3 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v10;
    uint64_t v10 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v4;
    long long v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    long long v9 = v5;
    sirinluexternalcdm::NluRequest::~NluRequest((sirinluexternalcdm::NluRequest *)&v7);
  }
  return a1;
}

void *sirinluexternalcdm::swap(void *this, sirinluexternalcdm::NluRequest *a2, sirinluexternalcdm::NluRequest *a3)
{
  uint64_t v3 = this[5];
  this[5] = *((void *)a2 + 5);
  *((void *)a2 + 5) = v3;
  uint64_t v4 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  uint64_t v5 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  uint64_t v6 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v6;
  uint64_t v7 = this[4];
  this[4] = *((void *)a2 + 4);
  *((void *)a2 + 4) = v7;
  return this;
}

uint64_t sirinluexternalcdm::NluRequest::NluRequest(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F232C808;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 40) = 0;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  uint64_t v6 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v5;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v8 = *v4;
  *uint64_t v4 = v7;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate((void **)(a1 + 16));
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  return a1;
}

uint64_t sirinluexternalcdm::NluRequest::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sirinluexternalcdm::NluRequest::NluRequest((uint64_t)&v7, a2);
    uint64_t v3 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v10;
    uint64_t v10 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v4;
    long long v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    long long v9 = v5;
    sirinluexternalcdm::NluRequest::~NluRequest((sirinluexternalcdm::NluRequest *)&v7);
  }
  return a1;
}

uint64_t sirinluexternalcdm::NluRequest::operator==(void *a1, void *a2)
{
  uint64_t v4 = a1[5];
  uint64_t v5 = a2[5];
  if (v4)
  {
    if (!v5 || !sirinluexternal::RequestID::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  uint64_t v6 = a1[1];
  uint64_t v7 = a2[1];
  if (!v6)
  {
    if (!v7) {
      goto LABEL_9;
    }
    return 0;
  }
  if (!v7 || (sirinluexternal::TurnInput::operator==(v6, v7) & 1) == 0) {
    return 0;
  }
LABEL_9:
  long long v8 = (uint64_t *)a2[2];
  uint64_t v9 = a2[3];
  return PB::PtrVector<sirinluexternal::TurnInput>::operator==(a1 + 2, v8, v9);
}

uint64_t PB::PtrVector<sirinluexternal::TurnInput>::operator==(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (v4 - *a1 != a3 - (void)a2) {
    return 0;
  }
  if (v3 == v4) {
    return 1;
  }
  uint64_t v5 = a2;
  uint64_t v6 = v3 + 8;
  do
  {
    uint64_t v7 = *v5++;
    uint64_t result = sirinluexternal::TurnInput::operator==(*(void *)(v6 - 8), v7);
    if (result) {
      BOOL v9 = v6 == v4;
    }
    else {
      BOOL v9 = 1;
    }
    v6 += 8;
  }
  while (!v9);
  return result;
}

unint64_t sirinluexternalcdm::NluRequest::hash_value(sirinluexternalcdm::NluRequest *this)
{
  unint64_t v2 = (sirinluexternal::RequestID *)*((void *)this + 5);
  if (v2) {
    unint64_t v3 = sirinluexternal::RequestID::hash_value(v2);
  }
  else {
    unint64_t v3 = 0;
  }
  uint64_t v4 = (sirinluexternal::TurnInput *)*((void *)this + 1);
  if (v4) {
    unint64_t v5 = sirinluexternal::TurnInput::hash_value(v4);
  }
  else {
    unint64_t v5 = 0;
  }
  uint64_t v7 = (sirinluexternal::TurnInput **)*((void *)this + 2);
  uint64_t v6 = (sirinluexternal::TurnInput **)*((void *)this + 3);
  if (v7 == v6)
  {
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = 0;
    do
    {
      BOOL v9 = *v7++;
      v8 ^= sirinluexternal::TurnInput::hash_value(v9);
    }
    while (v7 != v6);
  }
  return v5 ^ v3 ^ v8;
}

uint64_t sirinluexternalcdm::NluRequest::makeRequestId(uint64_t this)
{
  if (!*(void *)(this + 40)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternalcdm::NluRequest::makeCurrentTurnInput(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void sub_1C8B27578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  MEMORY[0x1CB772580](v7, 0x1030C40E9F947FBLL);
  apple::aiml::flatbuffers2::FlatBufferBuilder::~FlatBufferBuilder((apple::aiml::flatbuffers2::FlatBufferBuilder *)va);
  _Unwind_Resume(a1);
}

void sub_1C8B27AF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  if (v24) {
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C8B27CD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B27D84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B27E98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B27F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C8B280E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B28198(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B282AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B283A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C8B285C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL SSUCategoryGroup::Verify(SSUCategoryGroup *this, apple::aiml::flatbuffers2::Verifier *a2)
{
  BOOL result = apple::aiml::flatbuffers2::Verifier::VerifyTableStart(a2, this->var0);
  if (result)
  {
    BOOL result = apple::aiml::flatbuffers2::Table::VerifyOffset((apple::aiml::flatbuffers2::Table *)this, a2, 4u);
    if (result)
    {
      unint64_t v5 = &this[-*(int *)this->var0];
      if (*(unsigned __int16 *)v5->var0 >= 5u && (uint64_t v6 = *(unsigned __int16 *)v5[4].var0) != 0) {
        uint64_t v7 = &this[v6 + *(unsigned int *)this[v6].var0];
      }
      else {
        uint64_t v7 = 0;
      }
      BOOL result = apple::aiml::flatbuffers2::Verifier::VerifyString(a2, v7->var0);
      if (result)
      {
        BOOL result = apple::aiml::flatbuffers2::Table::VerifyOffset((apple::aiml::flatbuffers2::Table *)this, a2, 6u);
        if (result)
        {
          uint64_t v8 = *(int *)this->var0;
          if (*(unsigned __int16 *)this[-v8].var0 < 7u) {
            goto LABEL_18;
          }
          if (*(_WORD *)this[-v8 + 6].var0)
          {
            BOOL result = apple::aiml::flatbuffers2::Verifier::VerifyVectorOrString(a2, this[*(unsigned __int16 *)this[-v8 + 6].var0+ *(unsigned int *)this[*(unsigned __int16 *)this[-v8 + 6].var0].var0].var0, 4uLL, 0);
            if (!result) {
              return result;
            }
            uint64_t v8 = *(int *)this->var0;
            if (*(unsigned __int16 *)this[-v8].var0 < 7u) {
              goto LABEL_18;
            }
          }
          uint64_t v9 = *(unsigned __int16 *)this[-v8 + 6].var0;
          if (v9 && (uint64_t v10 = &this[v9 + *(unsigned int *)this[v9].var0], *(_DWORD *)v10->var0))
          {
            unint64_t v11 = 0;
            char v12 = v10 + 4;
            while (SSUIntent::Verify((SSUIntent *)&v12[*(unsigned int *)v12->var0], a2))
            {
              ++v11;
              v12 += 4;
              if (v11 >= *(unsigned int *)v10->var0) {
                goto LABEL_18;
              }
            }
            return 0;
          }
          else
          {
LABEL_18:
            BOOL result = apple::aiml::flatbuffers2::Table::VerifyOffset((apple::aiml::flatbuffers2::Table *)this, a2, 8u);
            if (!result) {
              return result;
            }
            BOOL v13 = 0;
            uint64_t v14 = *(int *)this->var0;
            if (*(unsigned __int16 *)this[-v14].var0 >= 9u)
            {
              if (!*(_WORD *)this[-v14 + 8].var0) {
                goto LABEL_23;
              }
              BOOL result = apple::aiml::flatbuffers2::Verifier::VerifyVectorOrString(a2, this[*(unsigned __int16 *)this[-v14 + 8].var0+ *(unsigned int *)this[*(unsigned __int16 *)this[-v14 + 8].var0].var0].var0, 4uLL, 0);
              if (!result) {
                return result;
              }
              BOOL v13 = 0;
              uint64_t v14 = *(int *)this->var0;
              if (*(unsigned __int16 *)this[-v14].var0 >= 9u)
              {
LABEL_23:
                uint64_t v15 = *(unsigned __int16 *)this[-v14 + 8].var0;
                if (v15) {
                  BOOL v13 = (SSUExample *)&this[v15 + *(unsigned int *)this[v15].var0];
                }
                else {
                  BOOL v13 = 0;
                }
              }
            }
            BOOL result = apple::aiml::flatbuffers2::Verifier::VerifyVectorOfTables<SSUExample>(a2, v13);
            if (result)
            {
              --*((_DWORD *)a2 + 4);
              return 1;
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_1C8B28960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  MEMORY[0x1CB772580](v7, 0x1030C40E9F947FBLL);
  apple::aiml::flatbuffers2::FlatBufferBuilder::~FlatBufferBuilder((apple::aiml::flatbuffers2::FlatBufferBuilder *)va);
  _Unwind_Resume(a1);
}

void sub_1C8B28D48(_Unwind_Exception *a1)
{
  if (v2) {
    operator delete(v2);
  }
  _Unwind_Resume(a1);
}

void sub_1C8B28ED0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B28F80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B29094(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B29188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C8B2935C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL SSUCategory::Verify(SSUCategory *this, apple::aiml::flatbuffers2::Verifier *a2)
{
  BOOL result = apple::aiml::flatbuffers2::Verifier::VerifyTableStart(a2, this->var0);
  if (!result) {
    return result;
  }
  uint64_t v5 = *(int *)this->var0;
  uint64_t v6 = &this[-v5];
  unsigned int v7 = *(unsigned __int16 *)this[-v5].var0;
  if (v7 >= 5)
  {
    if (*(_WORD *)v6[4].var0)
    {
      BOOL result = 0;
      unint64_t v8 = *((void *)a2 + 1);
      if (v8 < 2 || v8 - 1 < (unint64_t)this[*(unsigned __int16 *)v6[4].var0 - *(void *)a2].var0) {
        return result;
      }
    }
  }
  BOOL result = apple::aiml::flatbuffers2::Table::VerifyOffset((apple::aiml::flatbuffers2::Table *)this, a2, 6u);
  if (!result) {
    return result;
  }
  if (v7 < 7) {
    goto LABEL_18;
  }
  if (*(_WORD *)v6[6].var0)
  {
    BOOL result = apple::aiml::flatbuffers2::Verifier::VerifyVectorOrString(a2, this[*(unsigned __int16 *)v6[6].var0 + *(unsigned int *)this[*(unsigned __int16 *)v6[6].var0].var0].var0, 4uLL, 0);
    if (!result) {
      return result;
    }
    uint64_t v9 = *(int *)this->var0;
    if (*(unsigned __int16 *)this[-v9].var0 < 7u) {
      goto LABEL_18;
    }
    uint64_t v10 = -v9;
  }
  else
  {
    uint64_t v10 = -v5;
  }
  uint64_t v11 = *(unsigned __int16 *)this[v10 + 6].var0;
  if (!v11 || (char v12 = &this[v11 + *(unsigned int *)this[v11].var0], !*(_DWORD *)v12->var0))
  {
LABEL_18:
    --*((_DWORD *)a2 + 4);
    return 1;
  }
  unint64_t v13 = 0;
  uint64_t v14 = v12 + 4;
  while (SSUCategoryGroup::Verify((SSUCategoryGroup *)&v14[*(unsigned int *)v14->var0], a2))
  {
    ++v13;
    v14 += 4;
    if (v13 >= *(unsigned int *)v12->var0) {
      goto LABEL_18;
    }
  }
  return 0;
}

uint64_t sirinluexternal::RRBoundingBox::formatText(sirinluexternal::RRBoundingBox *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 40);
  if (v5)
  {
    PB::TextFormatter::format(a2, "height", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 40);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 40) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "width", *((double *)this + 2));
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "x_coordinate", *((double *)this + 3));
  if ((*((unsigned char *)this + 40) & 8) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "y_coordinate", *((double *)this + 4));
LABEL_6:
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluexternal::RRBoundingBox::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 40);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 24));
    char v4 = *(unsigned char *)(v3 + 40);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::write(a2, *(double *)(v3 + 16));
      if ((*(unsigned char *)(v3 + 40) & 1) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 40) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 2) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 1) == 0) {
    return this;
  }
LABEL_9:
  double v5 = *(double *)(v3 + 8);
  return PB::Writer::write(a2, v5);
}

uint64_t sirinluexternal::RRBoundingBox::readFrom(sirinluexternal::RRBoundingBox *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_37;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 40) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
        goto LABEL_36;
      case 2u:
        *((unsigned char *)this + 40) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
        goto LABEL_36;
      case 3u:
        *((unsigned char *)this + 40) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        goto LABEL_36;
      case 4u:
        *((unsigned char *)this + 40) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
LABEL_36:
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_34:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_37:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

void sirinluexternal::RRBoundingBox::~RRBoundingBox(sirinluexternal::RRBoundingBox *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x1CB772580);
}

uint64_t sirinluexternal::RRBoundingBox::RRBoundingBox(uint64_t this)
{
  *(void *)this = &unk_1F232C858;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

{
  *(void *)this = &unk_1F232C858;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

double sirinluexternal::RRBoundingBox::RRBoundingBox(sirinluexternal::RRBoundingBox *this, const sirinluexternal::RRBoundingBox *a2)
{
  *(void *)this = &unk_1F232C858;
  *((_DWORD *)this + 10) = 0;
  char v2 = *((unsigned char *)a2 + 40);
  if ((v2 & 4) != 0)
  {
    double result = *((double *)a2 + 3);
    char v3 = 4;
    *((unsigned char *)this + 40) = 4;
    *((double *)this + 3) = result;
    char v2 = *((unsigned char *)a2 + 40);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 40) & 8) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 4);
    v3 |= 8u;
    *((unsigned char *)this + 40) = v3;
    *((double *)this + 4) = result;
    char v2 = *((unsigned char *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 2) == 0)
  {
    if ((v2 & 1) == 0) {
      return result;
    }
LABEL_10:
    double result = *((double *)a2 + 1);
    *((unsigned char *)this + 40) = v3 | 1;
    *((double *)this + 1) = result;
    return result;
  }
  double result = *((double *)a2 + 2);
  v3 |= 2u;
  *((unsigned char *)this + 40) = v3;
  *((double *)this + 2) = result;
  if (*((unsigned char *)a2 + 40)) {
    goto LABEL_10;
  }
  return result;
}

uint64_t sirinluexternal::RRBoundingBox::operator=(uint64_t a1, const sirinluexternal::RRBoundingBox *a2)
{
  if ((const sirinluexternal::RRBoundingBox *)a1 != a2)
  {
    sirinluexternal::RRBoundingBox::RRBoundingBox((sirinluexternal::RRBoundingBox *)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v10;
    int v10 = v3;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    long long v9 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

double sirinluexternal::swap(sirinluexternal *this, sirinluexternal::RRBoundingBox *a2, sirinluexternal::RRBoundingBox *a3)
{
  int v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v4;
  uint64_t v5 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double sirinluexternal::RRBoundingBox::RRBoundingBox(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F232C858;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(void *)a1 = &unk_1F232C858;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t sirinluexternal::RRBoundingBox::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v8 = &unk_1F232C858;
    int v3 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    int v11 = *(_DWORD *)(a1 + 40);
    long long v10 = *(_OWORD *)(a1 + 24);
    long long v4 = *(_OWORD *)(a1 + 8);
    long long v5 = *(_OWORD *)(a2 + 8);
    long long v6 = *(_OWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 40) = v3;
    *(_OWORD *)(a1 + 24) = v6;
    *(_OWORD *)(a1 + 8) = v5;
    long long v9 = v4;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

BOOL sirinluexternal::RRBoundingBox::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 40) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 40) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 40) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 40) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 40) & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 40) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 40) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 40) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 40) & 2) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 40) & 1) == 0;
  if (*(unsigned char *)(a1 + 40)) {
    return (*(unsigned char *)(a2 + 40) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  }
  return v2;
}

uint64_t sirinluexternal::RRBoundingBox::hash_value(sirinluexternal::RRBoundingBox *this)
{
  if ((*((unsigned char *)this + 40) & 4) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 40) & 8) != 0) {
      goto LABEL_3;
    }
LABEL_15:
    double v2 = 0.0;
    if ((*((unsigned char *)this + 40) & 2) != 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
  double v1 = *((double *)this + 3);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 40) & 8) == 0) {
    goto LABEL_15;
  }
LABEL_3:
  double v2 = *((double *)this + 4);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((*((unsigned char *)this + 40) & 2) != 0)
  {
LABEL_6:
    double v3 = *((double *)this + 2);
    if (v3 == 0.0) {
      double v3 = 0.0;
    }
    if (*((unsigned char *)this + 40)) {
      goto LABEL_9;
    }
LABEL_17:
    double v4 = 0.0;
    return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ *(void *)&v4;
  }
LABEL_16:
  double v3 = 0.0;
  if ((*((unsigned char *)this + 40) & 1) == 0) {
    goto LABEL_17;
  }
LABEL_9:
  double v4 = *((double *)this + 1);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ *(void *)&v4;
}

uint64_t siricommon::UInt32Value::formatText(siricommon::UInt32Value *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 12)) {
    PB::TextFormatter::format(a2, "value");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t siricommon::UInt32Value::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(unsigned char *)(this + 12)) {
    return PB::Writer::writeVarInt(a2);
  }
  return this;
}

uint64_t siricommon::UInt32Value::readFrom(siricommon::UInt32Value *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_29;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 12) |= 1u;
        unint64_t v19 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
        uint64_t v20 = *(void *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v3)
        {
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v23 = 0;
          if (v3 <= v19) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          else {
            unint64_t v2 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v2 == v19)
            {
              LODWORD(v23) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_43;
            }
            unint64_t v28 = v19 + 1;
            char v29 = *(unsigned char *)(v20 + v19);
            *((void *)a2 + 1) = v28;
            v23 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0) {
              break;
            }
            v26 += 7;
            unint64_t v19 = v28;
            BOOL v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              goto LABEL_42;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v23) = 0;
          }
LABEL_42:
          unint64_t v2 = v28;
        }
        else
        {
          char v21 = 0;
          unsigned int v22 = 0;
          uint64_t v23 = 0;
          while (1)
          {
            unint64_t v2 = v19 + 1;
            *((void *)a2 + 1) = v19 + 1;
            char v24 = *(unsigned char *)(v20 + v19);
            v23 |= (unint64_t)(v24 & 0x7F) << v21;
            if ((v24 & 0x80) == 0) {
              break;
            }
            v21 += 7;
            unint64_t v19 = v2;
            BOOL v14 = v22++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              break;
            }
          }
        }
LABEL_43:
        *((_DWORD *)this + 2) = v23;
      }
      else
      {
LABEL_29:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
      }
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_29;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void siricommon::UInt32Value::~UInt32Value(siricommon::UInt32Value *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x1CB772580);
}

uint64_t siricommon::UInt32Value::UInt32Value(uint64_t this)
{
  *(void *)this = &unk_1F232C8A8;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

{
  *(void *)this = &unk_1F232C8A8;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

uint64_t siricommon::UInt32Value::UInt32Value(uint64_t this, const siricommon::UInt32Value *a2)
{
  *(void *)this = &unk_1F232C8A8;
  *(_DWORD *)(this + 12) = 0;
  if (*((unsigned char *)a2 + 12))
  {
    int v2 = *((_DWORD *)a2 + 2);
    *(unsigned char *)(this + 12) = 1;
    *(_DWORD *)(this + 8) = v2;
  }
  return this;
}

{
  int v2;

  *(void *)this = &unk_1F232C8A8;
  *(_DWORD *)(this + 12) = 0;
  if (*((unsigned char *)a2 + 12))
  {
    int v2 = *((_DWORD *)a2 + 2);
    *(unsigned char *)(this + 12) = 1;
    *(_DWORD *)(this + 8) = v2;
  }
  return this;
}

uint64_t siricommon::UInt32Value::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v6[0] = &unk_1F232C8A8;
    int v3 = *(unsigned char *)(a2 + 12) & 1;
    uint64_t v4 = *(void *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 12) = v3;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  void v6[2];

  if (a1 != a2)
  {
    v6[0] = &unk_1F232C8A8;
    int v3 = *(void *)(a2 + 8);
    *(_DWORD *)(a2 + 12) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t siricommon::swap(uint64_t this, siricommon::UInt32Value *a2, siricommon::UInt32Value *a3)
{
  int v3 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  int v4 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  return this;
}

uint64_t siricommon::UInt32Value::UInt32Value(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &unk_1F232C8A8;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

{
  *(void *)uint64_t result = &unk_1F232C8A8;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

BOOL siricommon::UInt32Value::operator==(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a1 + 12);
  BOOL result = (*(unsigned char *)(a2 + 12) & 1) == 0;
  if (v3) {
    return (*(unsigned char *)(a2 + 12) & 1) != 0 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
  }
  return result;
}

uint64_t siricommon::UInt32Value::hash_value(siricommon::UInt32Value *this)
{
  if (*((unsigned char *)this + 12)) {
    return *((unsigned int *)this + 2);
  }
  else {
    return 0;
  }
}

BOOL SIRINLUEXTERNALCDM_PLANNERCdmPlannerRequestReadFrom(uint64_t a1, uint64_t a2)
{
  char v3 = (int *)MEMORY[0x1E4F940E8];
  int v4 = (int *)MEMORY[0x1E4F940E0];
  long long v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        char v18 = *(SIRINLUEXTERNALCDM_PLANNERCDMPlannerRequestIdentifier **)(a1 + 16);
        *(void *)(a1 + 16) = v17;
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_26:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v18 = objc_alloc_init(SIRINLUEXTERNALCDM_PLANNERCDMPlannerRequestIdentifier);
    objc_storeStrong((id *)(a1 + 8), v18);
    if (!PBReaderPlaceMark()
      || !SIRINLUEXTERNALCDM_PLANNERCDMPlannerRequestIdentifierReadFrom((uint64_t)v18, a2))
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_24;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sirinluinternalsnlp_intermediate::ContextFeaturizerResponse::formatText(sirinluinternalsnlp_intermediate::ContextFeaturizerResponse *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "tensor");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluinternalsnlp_intermediate::ContextFeaturizerResponse::writeTo(uint64_t this, PB::Writer *a2)
{
  int v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2);
  }
  return this;
}

uint64_t sirinluinternalsnlp_intermediate::ContextFeaturizerResponse::readFrom(sirinluinternalsnlp_intermediate::ContextFeaturizerResponse *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluinternalsnlp_intermediate::ContextFeaturizerResponse::~ContextFeaturizerResponse(sirinluinternalsnlp_intermediate::ContextFeaturizerResponse *this)
{
  sirinluinternalsnlp_intermediate::ContextFeaturizerResponse::~ContextFeaturizerResponse(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t vars8;

  unint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1F232C8F8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

void *sirinluinternalsnlp_intermediate::ContextFeaturizerResponse::ContextFeaturizerResponse(void *this)
{
  *this = &unk_1F232C8F8;
  this[1] = 0;
  return this;
}

{
  *this = &unk_1F232C8F8;
  this[1] = 0;
  return this;
}

void *sirinluinternalsnlp_intermediate::ContextFeaturizerResponse::ContextFeaturizerResponse(void *this, const sirinluinternalsnlp_intermediate::ContextFeaturizerResponse *a2)
{
  *this = &unk_1F232C8F8;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const sirinluinternalsnlp_intermediate::ContextFeaturizerResponse *sirinluinternalsnlp_intermediate::ContextFeaturizerResponse::operator=(const sirinluinternalsnlp_intermediate::ContextFeaturizerResponse *a1, const sirinluinternalsnlp_intermediate::ContextFeaturizerResponse *a2)
{
  if (a1 != a2)
  {
    sirinluinternalsnlp_intermediate::ContextFeaturizerResponse::ContextFeaturizerResponse(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    sirinluinternalsnlp_intermediate::ContextFeaturizerResponse::~ContextFeaturizerResponse((sirinluinternalsnlp_intermediate::ContextFeaturizerResponse *)&v5);
  }
  return a1;
}

uint64_t sirinluinternalsnlp_intermediate::swap(uint64_t this, sirinluinternalsnlp_intermediate::ContextFeaturizerResponse *a2, sirinluinternalsnlp_intermediate::ContextFeaturizerResponse *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *sirinluinternalsnlp_intermediate::ContextFeaturizerResponse::ContextFeaturizerResponse(void *a1, uint64_t a2)
{
  *a1 = &unk_1F232C8F8;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_1F232C8F8;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t sirinluinternalsnlp_intermediate::ContextFeaturizerResponse::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = &unk_1F232C8F8;
    v6[1] = v4;
    sirinluinternalsnlp_intermediate::ContextFeaturizerResponse::~ContextFeaturizerResponse((sirinluinternalsnlp_intermediate::ContextFeaturizerResponse *)v6);
  }
  return a1;
}

BOOL sirinluinternalsnlp_intermediate::ContextFeaturizerResponse::operator==(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a2 + 8);
  if (v2) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    return (v2 | v3) == 0;
  }
  else {
    return sirinluinternalsnlp_intermediate::LinearizedTensor::operator==((void *)v2, (void *)v3);
  }
}

sirinluinternalsnlp_intermediate::LinearizedTensor *sirinluinternalsnlp_intermediate::ContextFeaturizerResponse::hash_value(sirinluinternalsnlp_intermediate::ContextFeaturizerResponse *this)
{
  uint64_t result = (sirinluinternalsnlp_intermediate::LinearizedTensor *)*((void *)this + 1);
  if (result) {
    return (sirinluinternalsnlp_intermediate::LinearizedTensor *)sirinluinternalsnlp_intermediate::LinearizedTensor::hash_value(result);
  }
  return result;
}

uint64_t sirinluinternalsnlp_intermediate::ContextFeaturizerResponse::makeTensor(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

BOOL SIRINLUINTERNALTOKENIZERTokenizerRequestReadFrom(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  BOOL v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3) {
        break;
      }
      if (v17 == 2)
      {
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 16;
LABEL_26:
        uint64_t v20 = *(SIRINLUEXTERNALUUID **)(a1 + v19);
        *(void *)(a1 + v19) = v18;
LABEL_27:

        goto LABEL_29;
      }
      if (v17 == 1)
      {
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 24;
        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_29:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v20 = objc_alloc_init(SIRINLUEXTERNALUUID);
    objc_storeStrong((id *)(a1 + 8), v20);
    if (!PBReaderPlaceMark() || (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v20, a2) & 1) == 0)
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_27;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL SIRINLUEXTERNALLanguageVariantResultReadFrom(id *a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  BOOL v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        unint64_t v17 = objc_alloc_init(SIRINLUEXTERNALMultilingualVariant);
        [a1 addMultilingualVariant:v17];
        if (!PBReaderPlaceMark()
          || (SIRINLUEXTERNALMultilingualVariantReadFrom((uint64_t)v17, a2) & 1) == 0)
        {
          goto LABEL_30;
        }
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_27:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    unint64_t v17 = objc_alloc_init(SIRINLUEXTERNALParser);
    objc_storeStrong(a1 + 2, v17);
    if (!PBReaderPlaceMark() || !SIRINLUEXTERNALParserReadFrom((uint64_t)v17, a2))
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules::formatText(sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "rules");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2);
  }
  return this;
}

uint64_t sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules::readFrom(sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules::~NLv4ExecutedHandcraftedRules(sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules *this)
{
  sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules::~NLv4ExecutedHandcraftedRules(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t vars8;

  unint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1F232C948;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

void *sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules::NLv4ExecutedHandcraftedRules(void *this)
{
  *this = &unk_1F232C948;
  this[1] = 0;
  return this;
}

{
  *this = &unk_1F232C948;
  this[1] = 0;
  return this;
}

void *sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules::NLv4ExecutedHandcraftedRules(void *this, const sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules *a2)
{
  *this = &unk_1F232C948;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules *sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules::operator=(const sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules *a1, const sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules *a2)
{
  if (a1 != a2)
  {
    sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules::NLv4ExecutedHandcraftedRules(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules::~NLv4ExecutedHandcraftedRules((sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules *)&v5);
  }
  return a1;
}

uint64_t sirinluinternalsnlp_intermediate::swap(uint64_t this, sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules *a2, sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules::NLv4ExecutedHandcraftedRules(void *a1, uint64_t a2)
{
  *a1 = &unk_1F232C948;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_1F232C948;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = &unk_1F232C948;
    v6[1] = v4;
    sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules::~NLv4ExecutedHandcraftedRules((sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules *)v6);
  }
  return a1;
}

BOOL sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    return (v2 | v3) == 0;
  }
  else {
    return sirinluinternalsnlp_intermediate::SNLPHandcraftedRules::operator==(v2, v3);
  }
}

uint64_t sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules::hash_value(sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t v3 = *(void *)(v1 + 16);
  if (v2 == v3) {
    return 0;
  }
  uint64_t v4 = 0;
  do
  {
    v4 ^= std::__string_hash<char>::operator()[abi:ne180100](v2);
    v2 += 24;
  }
  while (v2 != v3);
  return v4;
}

uint64_t sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules::makeRules(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t SIRINLUINTERNALNLv4EmbeddingTensorReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v15 = v9++ >= 9;
        if (v15)
        {
          unint64_t v10 = 0;
          uint64_t v16 = *v5;
          int v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      uint64_t v16 = *v5;
      int v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(unsigned char *)(a2 + v16)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      int v18 = v10 & 7;
      if (v17 || v18 == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          if (v18 != 2)
          {
            uint64_t v47 = *v3;
            unint64_t v48 = *(void *)(a2 + v47);
            if (v48 <= 0xFFFFFFFFFFFFFFFBLL && v48 + 4 <= *(void *)(a2 + *v4)) {
              *(void *)(a2 + v47) = v48 + 4;
            }
            else {
              *(unsigned char *)(a2 + v16) = 1;
            }
            PBRepeatedFloatAdd();
            continue;
          }
          uint64_t result = PBReaderPlaceMark();
          if (result)
          {
            while (1)
            {
              char v21 = (unint64_t *)(a2 + *v3);
              unint64_t v22 = *v21;
              unint64_t v23 = *(void *)(a2 + *v4);
              if (*v21 >= v23) {
                break;
              }
              uint64_t v24 = *v5;
              if (*(unsigned char *)(a2 + v24)) {
                break;
              }
              if (v22 > 0xFFFFFFFFFFFFFFFBLL || v22 + 4 > v23) {
                *(unsigned char *)(a2 + v24) = 1;
              }
              else {
                *char v21 = v22 + 4;
              }
              PBRepeatedFloatAdd();
            }
            PBReaderRecallMark();
            continue;
          }
          return result;
        case 2u:
          char v25 = 0;
          unsigned int v26 = 0;
          uint64_t v27 = 0;
          *(unsigned char *)(a1 + 64) |= 4u;
          while (1)
          {
            uint64_t v28 = *v3;
            uint64_t v29 = *(void *)(a2 + v28);
            unint64_t v30 = v29 + 1;
            if (v29 == -1 || v30 > *(void *)(a2 + *v4)) {
              break;
            }
            char v31 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
            *(void *)(a2 + v28) = v30;
            v27 |= (unint64_t)(v31 & 0x7F) << v25;
            if ((v31 & 0x80) == 0) {
              goto LABEL_53;
            }
            v25 += 7;
            BOOL v15 = v26++ >= 9;
            if (v15)
            {
              uint64_t v27 = 0;
              goto LABEL_55;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_53:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v27 = 0;
          }
LABEL_55:
          uint64_t v46 = 48;
          goto LABEL_64;
        case 3u:
          char v32 = 0;
          unsigned int v33 = 0;
          uint64_t v27 = 0;
          *(unsigned char *)(a1 + 64) |= 2u;
          while (2)
          {
            uint64_t v34 = *v3;
            uint64_t v35 = *(void *)(a2 + v34);
            unint64_t v36 = v35 + 1;
            if (v35 == -1 || v36 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v37 = *(unsigned char *)(*(void *)(a2 + *v7) + v35);
              *(void *)(a2 + v34) = v36;
              v27 |= (unint64_t)(v37 & 0x7F) << v32;
              if (v37 < 0)
              {
                v32 += 7;
                BOOL v15 = v33++ >= 9;
                if (v15)
                {
                  uint64_t v27 = 0;
                  goto LABEL_59;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v27 = 0;
          }
LABEL_59:
          uint64_t v46 = 40;
          goto LABEL_64;
        case 4u:
          char v38 = 0;
          unsigned int v39 = 0;
          uint64_t v27 = 0;
          *(unsigned char *)(a1 + 64) |= 1u;
          break;
        case 5u:
          uint64_t v44 = PBReaderReadString();
          unint64_t v45 = *(void **)(a1 + 56);
          *(void *)(a1 + 56) = v44;

          continue;
        default:
          if (PBReaderSkipValueWithTag()) {
            continue;
          }
          return 0;
      }
      while (1)
      {
        uint64_t v40 = *v3;
        uint64_t v41 = *(void *)(a2 + v40);
        unint64_t v42 = v41 + 1;
        if (v41 == -1 || v42 > *(void *)(a2 + *v4)) {
          break;
        }
        char v43 = *(unsigned char *)(*(void *)(a2 + *v7) + v41);
        *(void *)(a2 + v40) = v42;
        v27 |= (unint64_t)(v43 & 0x7F) << v38;
        if ((v43 & 0x80) == 0) {
          goto LABEL_61;
        }
        v38 += 7;
        BOOL v15 = v39++ >= 9;
        if (v15)
        {
          uint64_t v27 = 0;
          goto LABEL_63;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_61:
      if (*(unsigned char *)(a2 + *v5)) {
        uint64_t v27 = 0;
      }
LABEL_63:
      uint64_t v46 = 32;
LABEL_64:
      *(void *)(a1 + v46) = v27;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t SIRINLUEXTERNALRequestIDReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 16;
        goto LABEL_29;
      case 2u:
        uint64_t v19 = objc_alloc_init(SIRINLUEXTERNALUUID);
        objc_storeStrong((id *)(a1 + 32), v19);
        if PBReaderPlaceMark() && (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v19, a2))
        {
          PBReaderRecallMark();

LABEL_30:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }

        return 0;
      case 3u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 56;
        goto LABEL_29;
      case 4u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 24;
        goto LABEL_29;
      case 5u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 48;
        goto LABEL_29;
      case 0xBu:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 8;
LABEL_29:
        char v21 = *(void **)(a1 + v18);
        *(void *)(a1 + v18) = v17;

        goto LABEL_30;
      case 0xCu:
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        *(unsigned char *)(a1 + 64) |= 1u;
        while (2)
        {
          uint64_t v25 = *v3;
          unint64_t v26 = *(void *)(a2 + v25);
          if (v26 == -1 || v26 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v27 = *(unsigned char *)(*(void *)(a2 + *v7) + v26);
            *(void *)(a2 + v25) = v26 + 1;
            v24 |= (unint64_t)(v27 & 0x7F) << v22;
            if (v27 < 0)
            {
              v22 += 7;
              BOOL v14 = v23++ >= 9;
              if (v14)
              {
                LODWORD(v24) = 0;
                goto LABEL_42;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v24) = 0;
        }
LABEL_42:
        *(_DWORD *)(a1 + 40) = v24;
        goto LABEL_30;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_30;
    }
  }
}

BOOL SIRINLUEXTERNALParserReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 16) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4))
          {
            uint64_t v24 = &OBJC_IVAR___SIRINLUEXTERNALParser__algorithm;
            goto LABEL_38;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            break;
          }
          v17 += 7;
          BOOL v23 = v18++ > 8;
          if (v23)
          {
            LODWORD(v19) = 0;
            uint64_t v24 = &OBJC_IVAR___SIRINLUEXTERNALParser__algorithm;
            goto LABEL_41;
          }
        }
        uint64_t v24 = &OBJC_IVAR___SIRINLUEXTERNALParser__algorithm;
LABEL_39:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v19) = 0;
        }
LABEL_41:
        *(_DWORD *)(a1 + *v24) = v19;
        goto LABEL_42;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_42:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v25 = 0;
    unsigned int v26 = 0;
    uint64_t v19 = 0;
    *(unsigned char *)(a1 + 16) |= 2u;
    while (1)
    {
      uint64_t v27 = *v3;
      unint64_t v28 = *(void *)(a2 + v27);
      if (v28 == -1 || v28 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
      *(void *)(a2 + v27) = v28 + 1;
      v19 |= (unint64_t)(v29 & 0x7F) << v25;
      if ((v29 & 0x80) == 0)
      {
        uint64_t v24 = &OBJC_IVAR___SIRINLUEXTERNALParser__parserId;
        goto LABEL_39;
      }
      v25 += 7;
      BOOL v23 = v26++ > 8;
      if (v23)
      {
        LODWORD(v19) = 0;
        uint64_t v24 = &OBJC_IVAR___SIRINLUEXTERNALParser__parserId;
        goto LABEL_41;
      }
    }
    uint64_t v24 = &OBJC_IVAR___SIRINLUEXTERNALParser__parserId;
LABEL_38:
    *(unsigned char *)(a2 + *v5) = 1;
    goto LABEL_39;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sirinluinternalmention_detector::MentionDetectorResponse::formatText(sirinluinternalmention_detector::MentionDetectorResponse *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = (uint64_t *)*((void *)this + 1);
  uint64_t v6 = (uint64_t *)*((void *)this + 2);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "mentions");
  }
  uint64_t v8 = *((void *)this + 4);
  if (v8) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v8 + 32))(v8, a2, "request_id");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluinternalmention_detector::MentionDetectorResponse::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *(const PB::Base **)(this + 32);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  uint64_t v6 = *(const PB::Base ***)(v3 + 8);
  uint64_t v5 = *(const PB::Base ***)(v3 + 16);
  while (v6 != v5)
  {
    uint64_t v7 = *v6++;
    this = PB::Writer::writeSubmessage(a2, v7);
  }
  return this;
}

uint64_t sirinluinternalmention_detector::MentionDetectorResponse::readFrom(sirinluinternalmention_detector::MentionDetectorResponse *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_24;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 2) {
        PB::PtrVector<sirinluinternal::MatchingSpan>::emplace_back<>();
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_24:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_24;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluinternalmention_detector::MentionDetectorResponse::~MentionDetectorResponse(sirinluinternalmention_detector::MentionDetectorResponse *this)
{
  sirinluinternalmention_detector::MentionDetectorResponse::~MentionDetectorResponse(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  void **v3;
  uint64_t vars8;

  *(void *)this = &unk_1F232C998;
  unint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unint64_t v3 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v3);
  PB::Base::~Base(this);
}

double sirinluinternalmention_detector::MentionDetectorResponse::MentionDetectorResponse(sirinluinternalmention_detector::MentionDetectorResponse *this)
{
  *(void *)this = &unk_1F232C998;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

{
  double result;

  *(void *)this = &unk_1F232C998;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

uint64_t sirinluinternalmention_detector::MentionDetectorResponse::MentionDetectorResponse(uint64_t this, const sirinluinternalmention_detector::MentionDetectorResponse *a2)
{
  *(void *)this = &unk_1F232C998;
  *(_OWORD *)(this + 8) = 0u;
  *(_OWORD *)(this + 24) = 0u;
  if (*((void *)a2 + 4)) {
    operator new();
  }
  if (*((void *)a2 + 1) != *((void *)a2 + 2)) {
    PB::PtrVector<sirinluinternal::MatchingSpan>::emplace_back<sirinluinternal::MatchingSpan const&>();
  }
  return this;
}

uint64_t sirinluinternalmention_detector::MentionDetectorResponse::operator=(uint64_t a1, const sirinluinternalmention_detector::MentionDetectorResponse *a2)
{
  if ((const sirinluinternalmention_detector::MentionDetectorResponse *)a1 != a2)
  {
    sirinluinternalmention_detector::MentionDetectorResponse::MentionDetectorResponse((uint64_t)v6, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v8;
    long long v7 = v3;
    long long v8 = v4;
    sirinluinternalmention_detector::MentionDetectorResponse::~MentionDetectorResponse((sirinluinternalmention_detector::MentionDetectorResponse *)v6);
  }
  return a1;
}

void *sirinluinternalmention_detector::swap(void *this, sirinluinternalmention_detector::MentionDetectorResponse *a2, sirinluinternalmention_detector::MentionDetectorResponse *a3)
{
  uint64_t v3 = this[4];
  this[4] = *((void *)a2 + 4);
  *((void *)a2 + 4) = v3;
  uint64_t v4 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  uint64_t v5 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  uint64_t v6 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v6;
  return this;
}

uint64_t sirinluinternalmention_detector::MentionDetectorResponse::MentionDetectorResponse(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v4 = (void **)(a1 + 8);
  *(void *)a1 = &unk_1F232C998;
  *(_OWORD *)(a1 + 24) = 0u;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v5;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(v4);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

uint64_t sirinluinternalmention_detector::MentionDetectorResponse::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sirinluinternalmention_detector::MentionDetectorResponse::MentionDetectorResponse((uint64_t)v6, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v8;
    long long v7 = v3;
    long long v8 = v4;
    sirinluinternalmention_detector::MentionDetectorResponse::~MentionDetectorResponse((sirinluinternalmention_detector::MentionDetectorResponse *)v6);
  }
  return a1;
}

BOOL sirinluinternalmention_detector::MentionDetectorResponse::operator==(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = a2[4];
  if (!v4)
  {
    if (!v5) {
      goto LABEL_4;
    }
    return 0;
  }
  if (!v5 || !sirinluexternal::UUID::operator==(v4, v5)) {
    return 0;
  }
LABEL_4:
  uint64_t v6 = (uint64_t *)a2[1];
  uint64_t v7 = a2[2];
  return PB::PtrVector<sirinluinternal::MatchingSpan>::operator==((uint64_t *)(a1 + 8), v6, v7);
}

uint64_t sirinluinternalmention_detector::MentionDetectorResponse::hash_value(sirinluinternalmention_detector::MentionDetectorResponse *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (!v1)
  {
    uint64_t v5 = 0;
    goto LABEL_11;
  }
  if ((*(unsigned char *)(v1 + 28) & 1) == 0)
  {
    uint64_t v2 = 0;
    if ((*(unsigned char *)(v1 + 28) & 2) != 0) {
      goto LABEL_4;
    }
LABEL_8:
    uint64_t v3 = 0;
    if ((*(unsigned char *)(v1 + 28) & 4) != 0) {
      goto LABEL_5;
    }
LABEL_9:
    uint64_t v4 = 0;
    goto LABEL_10;
  }
  uint64_t v2 = *(void *)(v1 + 8);
  if ((*(unsigned char *)(v1 + 28) & 2) == 0) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v3 = *(void *)(v1 + 16);
  if ((*(unsigned char *)(v1 + 28) & 4) == 0) {
    goto LABEL_9;
  }
LABEL_5:
  uint64_t v4 = *(int *)(v1 + 24);
LABEL_10:
  uint64_t v5 = v3 ^ v2 ^ v4;
LABEL_11:
  uint64_t v6 = (sirinluinternal::MatchingSpan **)*((void *)this + 1);
  uint64_t v7 = (sirinluinternal::MatchingSpan **)*((void *)this + 2);
  if (v6 == v7)
  {
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = 0;
    do
    {
      unsigned int v9 = *v6++;
      v8 ^= sirinluinternal::MatchingSpan::hash_value(v9);
    }
    while (v6 != v7);
  }
  return v8 ^ v5;
}

uint64_t sirinluinternalmention_detector::MentionDetectorResponse::makeRequestId(uint64_t this)
{
  if (!*(void *)(this + 32)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternalsnlp_intermediate::SpanFeaturizerResponse::formatText(sirinluinternalsnlp_intermediate::SpanFeaturizerResponse *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "tensor");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluinternalsnlp_intermediate::SpanFeaturizerResponse::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2);
  }
  return this;
}

uint64_t sirinluinternalsnlp_intermediate::SpanFeaturizerResponse::readFrom(sirinluinternalsnlp_intermediate::SpanFeaturizerResponse *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluinternalsnlp_intermediate::SpanFeaturizerResponse::~SpanFeaturizerResponse(sirinluinternalsnlp_intermediate::SpanFeaturizerResponse *this)
{
  sirinluinternalsnlp_intermediate::SpanFeaturizerResponse::~SpanFeaturizerResponse(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t vars8;

  unint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1F232C9E8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

void *sirinluinternalsnlp_intermediate::SpanFeaturizerResponse::SpanFeaturizerResponse(void *this)
{
  *this = &unk_1F232C9E8;
  this[1] = 0;
  return this;
}

{
  *this = &unk_1F232C9E8;
  this[1] = 0;
  return this;
}

void *sirinluinternalsnlp_intermediate::SpanFeaturizerResponse::SpanFeaturizerResponse(void *this, const sirinluinternalsnlp_intermediate::SpanFeaturizerResponse *a2)
{
  *this = &unk_1F232C9E8;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const sirinluinternalsnlp_intermediate::SpanFeaturizerResponse *sirinluinternalsnlp_intermediate::SpanFeaturizerResponse::operator=(const sirinluinternalsnlp_intermediate::SpanFeaturizerResponse *a1, const sirinluinternalsnlp_intermediate::SpanFeaturizerResponse *a2)
{
  if (a1 != a2)
  {
    sirinluinternalsnlp_intermediate::SpanFeaturizerResponse::SpanFeaturizerResponse(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    sirinluinternalsnlp_intermediate::SpanFeaturizerResponse::~SpanFeaturizerResponse((sirinluinternalsnlp_intermediate::SpanFeaturizerResponse *)&v5);
  }
  return a1;
}

uint64_t sirinluinternalsnlp_intermediate::swap(uint64_t this, sirinluinternalsnlp_intermediate::SpanFeaturizerResponse *a2, sirinluinternalsnlp_intermediate::SpanFeaturizerResponse *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *sirinluinternalsnlp_intermediate::SpanFeaturizerResponse::SpanFeaturizerResponse(void *a1, uint64_t a2)
{
  *a1 = &unk_1F232C9E8;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_1F232C9E8;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t sirinluinternalsnlp_intermediate::SpanFeaturizerResponse::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = &unk_1F232C9E8;
    v6[1] = v4;
    sirinluinternalsnlp_intermediate::SpanFeaturizerResponse::~SpanFeaturizerResponse((sirinluinternalsnlp_intermediate::SpanFeaturizerResponse *)v6);
  }
  return a1;
}

BOOL sirinluinternalsnlp_intermediate::SpanFeaturizerResponse::operator==(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a2 + 8);
  if (v2) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    return (v2 | v3) == 0;
  }
  else {
    return sirinluinternalsnlp_intermediate::LinearizedTensor::operator==((void *)v2, (void *)v3);
  }
}

sirinluinternalsnlp_intermediate::LinearizedTensor *sirinluinternalsnlp_intermediate::SpanFeaturizerResponse::hash_value(sirinluinternalsnlp_intermediate::SpanFeaturizerResponse *this)
{
  uint64_t result = (sirinluinternalsnlp_intermediate::LinearizedTensor *)*((void *)this + 1);
  if (result) {
    return (sirinluinternalsnlp_intermediate::LinearizedTensor *)sirinluinternalsnlp_intermediate::LinearizedTensor::hash_value(result);
  }
  return result;
}

uint64_t sirinluinternalsnlp_intermediate::SpanFeaturizerResponse::makeTensor(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternalssu_inference::SsuInferenceRequest::formatText(sirinluexternalssu_inference::SsuInferenceRequest *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "request_id");
  }
  if (*((void *)this + 2)) {
    PB::TextFormatter::format();
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluexternalssu_inference::SsuInferenceRequest::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  BOOL v4 = *(const PB::Base **)(this + 8);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  if (*(void *)(v3 + 16))
  {
    return PB::Writer::write();
  }
  return this;
}

uint64_t sirinluexternalssu_inference::SsuInferenceRequest::readFrom(sirinluexternalssu_inference::SsuInferenceRequest *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_24;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 2) {
        operator new();
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_24:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_24;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluexternalssu_inference::SsuInferenceRequest::~SsuInferenceRequest(sirinluexternalssu_inference::SsuInferenceRequest *this)
{
  sirinluexternalssu_inference::SsuInferenceRequest::~SsuInferenceRequest(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1F232CA38;
  unint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    std::default_delete<std::string>::operator()[abi:ne180100](v2);
  }
  unint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  PB::Base::~Base(this);
}

void *sirinluexternalssu_inference::SsuInferenceRequest::SsuInferenceRequest(void *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1F232CA38;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1F232CA38;
  return this;
}

void *sirinluexternalssu_inference::SsuInferenceRequest::SsuInferenceRequest(void *this, const sirinluexternalssu_inference::SsuInferenceRequest *a2)
{
  *this = &unk_1F232CA38;
  this[1] = 0;
  this[2] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  if (*((void *)a2 + 2)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternalssu_inference::SsuInferenceRequest::operator=(uint64_t a1, const sirinluexternalssu_inference::SsuInferenceRequest *a2)
{
  if ((const sirinluexternalssu_inference::SsuInferenceRequest *)a1 != a2)
  {
    sirinluexternalssu_inference::SsuInferenceRequest::SsuInferenceRequest(&v5, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    long long v6 = v3;
    sirinluexternalssu_inference::SsuInferenceRequest::~SsuInferenceRequest((sirinluexternalssu_inference::SsuInferenceRequest *)&v5);
  }
  return a1;
}

uint64_t sirinluexternalssu_inference::swap(uint64_t this, sirinluexternalssu_inference::SsuInferenceRequest *a2, sirinluexternalssu_inference::SsuInferenceRequest *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  uint64_t v4 = *(void *)(this + 16);
  *(void *)(this + 16) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  return this;
}

void *sirinluexternalssu_inference::SsuInferenceRequest::SsuInferenceRequest(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F232CA38;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v5 = a1[1];
  a1[1] = v4;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  uint64_t v7 = a1[2];
  a1[2] = v6;
  if (v7) {
    std::default_delete<std::string>::operator()[abi:ne180100](v7);
  }
  return a1;
}

uint64_t sirinluexternalssu_inference::SsuInferenceRequest::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sirinluexternalssu_inference::SsuInferenceRequest::SsuInferenceRequest(&v5, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    long long v6 = v3;
    sirinluexternalssu_inference::SsuInferenceRequest::~SsuInferenceRequest((sirinluexternalssu_inference::SsuInferenceRequest *)&v5);
  }
  return a1;
}

uint64_t sirinluexternalssu_inference::SsuInferenceRequest::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v4)
  {
    if (!v5 || !sirinluexternal::RequestID::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  long long v6 = *(unsigned __int8 **)(a1 + 16);
  uint64_t v7 = *(unsigned __int8 ***)(a2 + 16);
  uint64_t result = v7 == 0;
  if (!v6) {
    return result;
  }
  if (!v7) {
    return 0;
  }
  uint64_t v9 = v6[23];
  if ((v9 & 0x80u) == 0) {
    unint64_t v10 = (unsigned __int8 *)v6[23];
  }
  else {
    unint64_t v10 = (unsigned __int8 *)*((void *)v6 + 1);
  }
  unint64_t v11 = (unsigned __int8 *)*((unsigned __int8 *)v7 + 23);
  int v12 = (char)v11;
  if ((char)v11 < 0) {
    unint64_t v11 = v7[1];
  }
  if (v10 != v11) {
    return 0;
  }
  if (v12 >= 0) {
    BOOL v13 = *(unsigned __int8 **)(a2 + 16);
  }
  else {
    BOOL v13 = *v7;
  }
  if ((v9 & 0x80) != 0) {
    return !memcmp(*(const void **)v6, v13, *((void *)v6 + 1));
  }
  if (!v6[23]) {
    return 1;
  }
  uint64_t v14 = v9 - 1;
  do
  {
    int v16 = *v6++;
    int v15 = v16;
    int v18 = *v13++;
    int v17 = v18;
    BOOL v20 = v14-- != 0;
    uint64_t result = v15 == v17;
  }
  while (v15 == v17 && v20);
  return result;
}

unint64_t sirinluexternalssu_inference::SsuInferenceRequest::hash_value(sirinluexternalssu_inference::SsuInferenceRequest *this)
{
  unint64_t v2 = (sirinluexternal::RequestID *)*((void *)this + 1);
  if (v2) {
    unint64_t v3 = sirinluexternal::RequestID::hash_value(v2);
  }
  else {
    unint64_t v3 = 0;
  }
  unint64_t v4 = *((void *)this + 2);
  if (v4) {
    unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100](v4);
  }
  return v4 ^ v3;
}

uint64_t sirinluexternalssu_inference::SsuInferenceRequest::makeRequestId(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t SIRINLUINTERNALCONTEXTUPDATEReformedTurnInputBundleReadFrom(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        uint64_t v24 = objc_alloc_init(SIRINLUEXTERNALTurnInput);
        [(id)a1 addPreviousTurns:v24];
      }
      else
      {
        if (v17 != 2)
        {
          if (v17 == 1)
          {
            char v18 = 0;
            unsigned int v19 = 0;
            uint64_t v20 = 0;
            *(unsigned char *)(a1 + 28) |= 1u;
            while (1)
            {
              uint64_t v21 = *v3;
              unint64_t v22 = *(void *)(a2 + v21);
              if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
              *(void *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0) {
                goto LABEL_36;
              }
              v18 += 7;
              BOOL v14 = v19++ >= 9;
              if (v14)
              {
                LODWORD(v20) = 0;
                goto LABEL_38;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_36:
            if (*(unsigned char *)(a2 + *v5)) {
              LODWORD(v20) = 0;
            }
LABEL_38:
            *(_DWORD *)(a1 + 24) = v20;
          }
          else
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
          }
          continue;
        }
        uint64_t v24 = objc_alloc_init(SIRINLUEXTERNALTurnInput);
        objc_storeStrong((id *)(a1 + 8), v24);
      }
      if (!PBReaderPlaceMark() || (SIRINLUEXTERNALTurnInputReadFrom((uint64_t)v24, a2) & 1) == 0)
      {

        return 0;
      }
      PBReaderRecallMark();
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t SIRINLUINTERNALOVERRIDESOverridesResponseReadFrom(void *a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        unint64_t v17 = objc_alloc_init(SIRINLUEXTERNALUserParse);
        [a1 addParses:v17];
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALUserParseReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t SIRICOMMONUInt32ValueReadFrom(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 12) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_29;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_31;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_29:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v19) = 0;
        }
LABEL_31:
        *(_DWORD *)(a1 + 8) = v19;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sirinluexternal::UtteranceSpan::formatText(sirinluexternal::UtteranceSpan *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 32);
  if (v5)
  {
    PB::TextFormatter::format(a2, "end_index");
    char v5 = *((unsigned char *)this + 32);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((*((unsigned char *)this + 32) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "end_milli_seconds");
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "end_unicode_scalar_index");
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "start_index");
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "start_milli_seconds");
  if ((*((unsigned char *)this + 32) & 0x20) != 0) {
LABEL_7:
  }
    PB::TextFormatter::format(a2, "start_unicode_scalar_index");
LABEL_8:
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluexternal::UtteranceSpan::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 32);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((*(unsigned char *)(this + 32) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
LABEL_12:
    this = PB::Writer::writeVarInt(a2);
    if ((*(unsigned char *)(v3 + 32) & 2) == 0) {
      return this;
    }
    goto LABEL_13;
  }
LABEL_11:
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 0x10) != 0) {
    goto LABEL_12;
  }
LABEL_6:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_13:
  return PB::Writer::writeVarInt(a2);
}

uint64_t sirinluexternal::UtteranceSpan::readFrom(sirinluexternal::UtteranceSpan *this, PB::Reader *a2)
{
  unint64_t v3 = *((void *)a2 + 1);
  unint64_t v2 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 >= v2 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v3 > v2) {
        unint64_t v2 = v3;
      }
      do
      {
        if (v2 == v3)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v3 + 1;
        char v18 = *(unsigned char *)(v8 + v3);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_24;
        }
        v15 += 7;
        unint64_t v3 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v3 = *((void *)a2 + 1);
      unint64_t v2 = *((void *)a2 + 2);
      goto LABEL_21;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v3 + 1;
      *((void *)a2 + 1) = v3 + 1;
      char v13 = *(unsigned char *)(v8 + v3);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v3 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_24:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 32) |= 8u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v56 = 0;
          unsigned int v57 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_120;
            }
            unint64_t v58 = v20 + 1;
            char v59 = *(unsigned char *)(v21 + v20);
            *((void *)a2 + 1) = v58;
            v24 |= (unint64_t)(v59 & 0x7F) << v56;
            if ((v59 & 0x80) == 0) {
              break;
            }
            v56 += 7;
            unint64_t v20 = v58;
            BOOL v14 = v57++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_119:
              unint64_t v3 = v58;
              goto LABEL_120;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
          goto LABEL_119;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v3 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_120;
          }
          v22 += 7;
          unint64_t v20 = v3;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_120:
        *((_DWORD *)this + 5) = v24;
        break;
      case 2u:
        *((unsigned char *)this + 32) |= 1u;
        unint64_t v26 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v27 = *(void *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          char v60 = 0;
          unsigned int v61 = 0;
          uint64_t v30 = 0;
          if (v2 <= v26) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v26)
            {
              LODWORD(v30) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_125;
            }
            unint64_t v62 = v26 + 1;
            char v63 = *(unsigned char *)(v27 + v26);
            *((void *)a2 + 1) = v62;
            v30 |= (unint64_t)(v63 & 0x7F) << v60;
            if ((v63 & 0x80) == 0) {
              break;
            }
            v60 += 7;
            unint64_t v26 = v62;
            BOOL v14 = v61++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_124:
              unint64_t v3 = v62;
              goto LABEL_125;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v30) = 0;
          }
          goto LABEL_124;
        }
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v30 = 0;
        do
        {
          unint64_t v3 = v26 + 1;
          *((void *)a2 + 1) = v26 + 1;
          char v31 = *(unsigned char *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0) {
            goto LABEL_125;
          }
          v28 += 7;
          unint64_t v26 = v3;
          BOOL v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_125:
        *((_DWORD *)this + 2) = v30;
        break;
      case 3u:
        *((unsigned char *)this + 32) |= 0x20u;
        unint64_t v32 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v33 = *(void *)a2;
        if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v2)
        {
          char v64 = 0;
          unsigned int v65 = 0;
          uint64_t v36 = 0;
          if (v2 <= v32) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v32)
            {
              LODWORD(v36) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_130;
            }
            unint64_t v66 = v32 + 1;
            char v67 = *(unsigned char *)(v33 + v32);
            *((void *)a2 + 1) = v66;
            v36 |= (unint64_t)(v67 & 0x7F) << v64;
            if ((v67 & 0x80) == 0) {
              break;
            }
            v64 += 7;
            unint64_t v32 = v66;
            BOOL v14 = v65++ > 8;
            if (v14)
            {
              LODWORD(v36) = 0;
LABEL_129:
              unint64_t v3 = v66;
              goto LABEL_130;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v36) = 0;
          }
          goto LABEL_129;
        }
        char v34 = 0;
        unsigned int v35 = 0;
        uint64_t v36 = 0;
        do
        {
          unint64_t v3 = v32 + 1;
          *((void *)a2 + 1) = v32 + 1;
          char v37 = *(unsigned char *)(v33 + v32);
          v36 |= (unint64_t)(v37 & 0x7F) << v34;
          if ((v37 & 0x80) == 0) {
            goto LABEL_130;
          }
          v34 += 7;
          unint64_t v32 = v3;
          BOOL v14 = v35++ > 8;
        }
        while (!v14);
        LODWORD(v36) = 0;
LABEL_130:
        *((_DWORD *)this + 7) = v36;
        break;
      case 4u:
        *((unsigned char *)this + 32) |= 4u;
        unint64_t v38 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v39 = *(void *)a2;
        if (v38 > 0xFFFFFFFFFFFFFFF5 || v38 + 10 > v2)
        {
          char v68 = 0;
          unsigned int v69 = 0;
          uint64_t v42 = 0;
          if (v2 <= v38) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v38)
            {
              LODWORD(v42) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_135;
            }
            unint64_t v70 = v38 + 1;
            char v71 = *(unsigned char *)(v39 + v38);
            *((void *)a2 + 1) = v70;
            v42 |= (unint64_t)(v71 & 0x7F) << v68;
            if ((v71 & 0x80) == 0) {
              break;
            }
            v68 += 7;
            unint64_t v38 = v70;
            BOOL v14 = v69++ > 8;
            if (v14)
            {
              LODWORD(v42) = 0;
LABEL_134:
              unint64_t v3 = v70;
              goto LABEL_135;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v42) = 0;
          }
          goto LABEL_134;
        }
        char v40 = 0;
        unsigned int v41 = 0;
        uint64_t v42 = 0;
        do
        {
          unint64_t v3 = v38 + 1;
          *((void *)a2 + 1) = v38 + 1;
          char v43 = *(unsigned char *)(v39 + v38);
          v42 |= (unint64_t)(v43 & 0x7F) << v40;
          if ((v43 & 0x80) == 0) {
            goto LABEL_135;
          }
          v40 += 7;
          unint64_t v38 = v3;
          BOOL v14 = v41++ > 8;
        }
        while (!v14);
        LODWORD(v42) = 0;
LABEL_135:
        *((_DWORD *)this + 4) = v42;
        break;
      case 5u:
        *((unsigned char *)this + 32) |= 0x10u;
        unint64_t v44 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v45 = *(void *)a2;
        if (v44 > 0xFFFFFFFFFFFFFFF5 || v44 + 10 > v2)
        {
          char v72 = 0;
          unsigned int v73 = 0;
          uint64_t v48 = 0;
          if (v2 <= v44) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v44)
            {
              LODWORD(v48) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_140;
            }
            unint64_t v74 = v44 + 1;
            char v75 = *(unsigned char *)(v45 + v44);
            *((void *)a2 + 1) = v74;
            v48 |= (unint64_t)(v75 & 0x7F) << v72;
            if ((v75 & 0x80) == 0) {
              break;
            }
            v72 += 7;
            unint64_t v44 = v74;
            BOOL v14 = v73++ > 8;
            if (v14)
            {
              LODWORD(v48) = 0;
LABEL_139:
              unint64_t v3 = v74;
              goto LABEL_140;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v48) = 0;
          }
          goto LABEL_139;
        }
        char v46 = 0;
        unsigned int v47 = 0;
        uint64_t v48 = 0;
        do
        {
          unint64_t v3 = v44 + 1;
          *((void *)a2 + 1) = v44 + 1;
          char v49 = *(unsigned char *)(v45 + v44);
          v48 |= (unint64_t)(v49 & 0x7F) << v46;
          if ((v49 & 0x80) == 0) {
            goto LABEL_140;
          }
          v46 += 7;
          unint64_t v44 = v3;
          BOOL v14 = v47++ > 8;
        }
        while (!v14);
        LODWORD(v48) = 0;
LABEL_140:
        *((_DWORD *)this + 6) = v48;
        break;
      case 6u:
        *((unsigned char *)this + 32) |= 2u;
        unint64_t v50 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v51 = *(void *)a2;
        if (v50 > 0xFFFFFFFFFFFFFFF5 || v50 + 10 > v2)
        {
          char v76 = 0;
          unsigned int v77 = 0;
          uint64_t v54 = 0;
          if (v2 <= v50) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v50)
            {
              LODWORD(v54) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_145;
            }
            unint64_t v78 = v50 + 1;
            char v79 = *(unsigned char *)(v51 + v50);
            *((void *)a2 + 1) = v78;
            v54 |= (unint64_t)(v79 & 0x7F) << v76;
            if ((v79 & 0x80) == 0) {
              break;
            }
            v76 += 7;
            unint64_t v50 = v78;
            BOOL v14 = v77++ > 8;
            if (v14)
            {
              LODWORD(v54) = 0;
LABEL_144:
              unint64_t v3 = v78;
              goto LABEL_145;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v54) = 0;
          }
          goto LABEL_144;
        }
        char v52 = 0;
        unsigned int v53 = 0;
        uint64_t v54 = 0;
        do
        {
          unint64_t v3 = v50 + 1;
          *((void *)a2 + 1) = v50 + 1;
          char v55 = *(unsigned char *)(v51 + v50);
          v54 |= (unint64_t)(v55 & 0x7F) << v52;
          if ((v55 & 0x80) == 0) {
            goto LABEL_145;
          }
          v52 += 7;
          unint64_t v50 = v3;
          BOOL v14 = v53++ > 8;
        }
        while (!v14);
        LODWORD(v54) = 0;
LABEL_145:
        *((_DWORD *)this + 3) = v54;
        break;
      default:
        goto LABEL_19;
    }
LABEL_21:
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v3 >= v2 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

void sirinluexternal::UtteranceSpan::~UtteranceSpan(sirinluexternal::UtteranceSpan *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x1CB772580);
}

uint64_t sirinluexternal::UtteranceSpan::UtteranceSpan(uint64_t this)
{
  *(void *)this = &unk_1F232CA88;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(void *)this = &unk_1F232CA88;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t sirinluexternal::UtteranceSpan::UtteranceSpan(uint64_t this, const sirinluexternal::UtteranceSpan *a2)
{
  *(void *)this = &unk_1F232CA88;
  *(_DWORD *)(this + 32) = 0;
  char v2 = *((unsigned char *)a2 + 32);
  if ((v2 & 8) != 0)
  {
    int v4 = *((_DWORD *)a2 + 5);
    char v3 = 8;
    *(unsigned char *)(this + 32) = 8;
    *(_DWORD *)(this + 20) = v4;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if (*((unsigned char *)a2 + 32))
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 2);
    v3 |= 1u;
    *(unsigned char *)(this + 32) = v3;
    *(_DWORD *)(this + 8) = v5;
    char v2 = *((unsigned char *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    int v6 = *((_DWORD *)a2 + 7);
    v3 |= 0x20u;
    *(unsigned char *)(this + 32) = v3;
    *(_DWORD *)(this + 28) = v6;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_13;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 4);
  v3 |= 4u;
  *(unsigned char *)(this + 32) = v3;
  *(_DWORD *)(this + 16) = v7;
  char v2 = *((unsigned char *)a2 + 32);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 2) == 0) {
      return this;
    }
LABEL_14:
    int v9 = *((_DWORD *)a2 + 3);
    *(unsigned char *)(this + 32) = v3 | 2;
    *(_DWORD *)(this + 12) = v9;
    return this;
  }
LABEL_13:
  int v8 = *((_DWORD *)a2 + 6);
  v3 |= 0x10u;
  *(unsigned char *)(this + 32) = v3;
  *(_DWORD *)(this + 24) = v8;
  if ((*((unsigned char *)a2 + 32) & 2) != 0) {
    goto LABEL_14;
  }
  return this;
}

uint64_t sirinluexternal::UtteranceSpan::operator=(uint64_t a1, const sirinluexternal::UtteranceSpan *a2)
{
  if ((const sirinluexternal::UtteranceSpan *)a1 != a2)
  {
    sirinluexternal::UtteranceSpan::UtteranceSpan((uint64_t)v7, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v9;
    uint64_t v9 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

_DWORD *sirinluexternal::swap(_DWORD *this, sirinluexternal::UtteranceSpan *a2, sirinluexternal::UtteranceSpan *a3)
{
  int v3 = this[8];
  this[8] = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  int v4 = this[5];
  this[5] = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  int v5 = this[2];
  this[2] = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v5;
  int v6 = this[7];
  this[7] = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v6;
  int v7 = this[4];
  this[4] = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v7;
  int v8 = this[6];
  this[6] = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v8;
  int v9 = this[3];
  this[3] = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v9;
  return this;
}

uint64_t sirinluexternal::UtteranceSpan::UtteranceSpan(uint64_t result, _DWORD *a2)
{
  *(void *)uint64_t result = &unk_1F232CA88;
  *(_DWORD *)(result + 32) = a2[8];
  a2[8] = 0;
  *(_DWORD *)(result + 20) = a2[5];
  *(_DWORD *)(result + 8) = a2[2];
  *(_DWORD *)(result + 28) = a2[7];
  *(_DWORD *)(result + 16) = a2[4];
  *(_DWORD *)(result + 24) = a2[6];
  *(_DWORD *)(result + 12) = a2[3];
  return result;
}

{
  *(void *)uint64_t result = &unk_1F232CA88;
  *(_DWORD *)(result + 32) = a2[8];
  a2[8] = 0;
  *(_DWORD *)(result + 20) = a2[5];
  *(_DWORD *)(result + 8) = a2[2];
  *(_DWORD *)(result + 28) = a2[7];
  *(_DWORD *)(result + 16) = a2[4];
  *(_DWORD *)(result + 24) = a2[6];
  *(_DWORD *)(result + 12) = a2[3];
  return result;
}

uint64_t sirinluexternal::UtteranceSpan::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v8 = &unk_1F232CA88;
    int v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    int v11 = *(_DWORD *)(a1 + 32);
    uint64_t v10 = *(void *)(a1 + 24);
    long long v4 = *(_OWORD *)(a1 + 8);
    long long v5 = *(_OWORD *)(a2 + 8);
    uint64_t v6 = *(void *)(a2 + 24);
    *(_DWORD *)(a1 + 32) = v3;
    *(void *)(a1 + 24) = v6;
    *(_OWORD *)(a1 + 8) = v5;
    long long v9 = v4;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

BOOL sirinluexternal::UtteranceSpan::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 32) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 8) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 8) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 32))
  {
    if ((*(unsigned char *)(a2 + 32) & 1) == 0 || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 32))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 0x20) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 0x20) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 0x20) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 4) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 0x10) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 0x10) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 32) & 2) == 0;
  if ((*(unsigned char *)(a1 + 32) & 2) != 0) {
    return (*(unsigned char *)(a2 + 32) & 2) != 0 && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12);
  }
  return v2;
}

uint64_t sirinluexternal::UtteranceSpan::hash_value(sirinluexternal::UtteranceSpan *this)
{
  if ((*((unsigned char *)this + 32) & 8) != 0)
  {
    uint64_t v1 = *((unsigned int *)this + 5);
    if (*((unsigned char *)this + 32))
    {
LABEL_3:
      uint64_t v2 = *((unsigned int *)this + 2);
      if ((*((unsigned char *)this + 32) & 0x20) != 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v1 = 0;
    if (*((unsigned char *)this + 32)) {
      goto LABEL_3;
    }
  }
  uint64_t v2 = 0;
  if ((*((unsigned char *)this + 32) & 0x20) != 0)
  {
LABEL_4:
    uint64_t v3 = *((unsigned int *)this + 7);
    if ((*((unsigned char *)this + 32) & 4) != 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  uint64_t v3 = 0;
  if ((*((unsigned char *)this + 32) & 4) != 0)
  {
LABEL_5:
    uint64_t v4 = *((unsigned int *)this + 4);
    if ((*((unsigned char *)this + 32) & 0x10) != 0) {
      goto LABEL_6;
    }
LABEL_12:
    uint64_t v5 = 0;
    if ((*((unsigned char *)this + 32) & 2) != 0) {
      goto LABEL_7;
    }
LABEL_13:
    uint64_t v6 = 0;
    return v2 ^ v1 ^ v3 ^ v4 ^ v5 ^ v6;
  }
LABEL_11:
  uint64_t v4 = 0;
  if ((*((unsigned char *)this + 32) & 0x10) == 0) {
    goto LABEL_12;
  }
LABEL_6:
  uint64_t v5 = *((int *)this + 6);
  if ((*((unsigned char *)this + 32) & 2) == 0) {
    goto LABEL_13;
  }
LABEL_7:
  uint64_t v6 = *((int *)this + 3);
  return v2 ^ v1 ^ v3 ^ v4 ^ v5 ^ v6;
}

BOOL SIRINLUEXTERNALSUBWORD_EMBEDDINGSubwordEmbeddingRequestReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        char v18 = *(SIRINLUEXTERNALRequestID **)(a1 + 16);
        *(void *)(a1 + 16) = v17;
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_26:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v18 = objc_alloc_init(SIRINLUEXTERNALRequestID);
    objc_storeStrong((id *)(a1 + 8), v18);
    if (!PBReaderPlaceMark() || (SIRINLUEXTERNALRequestIDReadFrom((uint64_t)v18, a2) & 1) == 0)
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_24;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sirinluinternalitfm::ITFMHypothesis::formatText(sirinluinternalitfm::ITFMHypothesis *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 24);
  if (v5)
  {
    PB::TextFormatter::format(a2, "label");
    char v5 = *((unsigned char *)this + 24);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(a2, "probability", *((float *)this + 5));
  }
  if (*((void *)this + 1)) {
    PB::TextFormatter::format();
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluinternalitfm::ITFMHypothesis::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 24);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2);
    char v4 = *(unsigned char *)(v3 + 24);
  }
  if ((v4 & 2) != 0) {
    this = PB::Writer::write(a2, *(float *)(v3 + 20));
  }
  if (*(void *)(v3 + 8))
  {
    return PB::Writer::write();
  }
  return this;
}

uint64_t sirinluinternalitfm::ITFMHypothesis::readFrom(sirinluinternalitfm::ITFMHypothesis *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_31;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v19 = v11 >> 3;
      if ((v11 >> 3) == 3) {
        operator new();
      }
      if (v19 == 2)
      {
        *((unsigned char *)this + 24) |= 2u;
        unint64_t v30 = *((void *)a2 + 1);
        if (v30 <= 0xFFFFFFFFFFFFFFFBLL && v30 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v30);
          *((void *)a2 + 1) += 4;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else if (v19 == 1)
      {
        *((unsigned char *)this + 24) |= 1u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v21 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v21)
        {
          char v31 = 0;
          unsigned int v32 = 0;
          uint64_t v25 = 0;
          if (v21 <= v20) {
            unint64_t v21 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v21 == v20)
            {
              LODWORD(v25) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_52;
            }
            unint64_t v33 = v20 + 1;
            char v34 = *(unsigned char *)(v22 + v20);
            *((void *)a2 + 1) = v33;
            v25 |= (unint64_t)(v34 & 0x7F) << v31;
            if ((v34 & 0x80) == 0) {
              break;
            }
            v31 += 7;
            unint64_t v20 = v33;
            BOOL v14 = v32++ > 8;
            if (v14)
            {
LABEL_47:
              LODWORD(v25) = 0;
              goto LABEL_52;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v25) = 0;
          }
        }
        else
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          while (1)
          {
            unint64_t v26 = v20 + 1;
            *((void *)a2 + 1) = v20 + 1;
            char v27 = *(unsigned char *)(v22 + v20);
            v25 |= (unint64_t)(v27 & 0x7F) << v23;
            if ((v27 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            unint64_t v20 = v26;
            BOOL v14 = v24++ > 8;
            if (v14) {
              goto LABEL_47;
            }
          }
        }
LABEL_52:
        *((_DWORD *)this + 4) = v25;
      }
      else
      {
LABEL_31:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_31;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluinternalitfm::ITFMHypothesis::~ITFMHypothesis(sirinluinternalitfm::ITFMHypothesis *this)
{
  sirinluinternalitfm::ITFMHypothesis::~ITFMHypothesis(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t vars8;

  unint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1F232CAD8;
  *((void *)this + 1) = 0;
  if (v2) {
    std::default_delete<std::string>::operator()[abi:ne180100](v2);
  }
  PB::Base::~Base(this);
}

uint64_t sirinluinternalitfm::ITFMHypothesis::ITFMHypothesis(uint64_t this)
{
  *(void *)this = &unk_1F232CAD8;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(void *)this = &unk_1F232CAD8;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

uint64_t sirinluinternalitfm::ITFMHypothesis::ITFMHypothesis(uint64_t this, const sirinluinternalitfm::ITFMHypothesis *a2)
{
  *(void *)this = &unk_1F232CAD8;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  if (*((unsigned char *)a2 + 24))
  {
    int v3 = *((_DWORD *)a2 + 4);
    *(unsigned char *)(this + 24) = 1;
    *(_DWORD *)(this + 16) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 24) & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 24) & 2) != 0)
  {
LABEL_5:
    int v4 = *((_DWORD *)a2 + 5);
    *(unsigned char *)(this + 24) = v2;
    *(_DWORD *)(this + 20) = v4;
  }
LABEL_6:
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternalitfm::ITFMHypothesis::operator=(uint64_t a1, const sirinluinternalitfm::ITFMHypothesis *a2)
{
  if ((const sirinluinternalitfm::ITFMHypothesis *)a1 != a2)
  {
    sirinluinternalitfm::ITFMHypothesis::ITFMHypothesis((uint64_t)&v8, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v12;
    int v12 = v3;
    int v4 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v10;
    int v10 = v4;
    int v5 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v11;
    int v11 = v5;
    uint64_t v6 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v9;
    uint64_t v9 = v6;
    sirinluinternalitfm::ITFMHypothesis::~ITFMHypothesis((sirinluinternalitfm::ITFMHypothesis *)&v8);
  }
  return a1;
}

float sirinluinternalitfm::swap(sirinluinternalitfm *this, sirinluinternalitfm::ITFMHypothesis *a2, sirinluinternalitfm::ITFMHypothesis *a3)
{
  int v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  int v4 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  float result = *((float *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((float *)a2 + 5) = result;
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v6;
  return result;
}

uint64_t sirinluinternalitfm::ITFMHypothesis::ITFMHypothesis(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F232CAD8;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v3;
  if (v4) {
    std::default_delete<std::string>::operator()[abi:ne180100](v4);
  }
  return a1;
}

uint64_t sirinluinternalitfm::ITFMHypothesis::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sirinluinternalitfm::ITFMHypothesis::ITFMHypothesis((uint64_t)&v8, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v12;
    int v12 = v3;
    int v4 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v10;
    int v10 = v4;
    int v5 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v11;
    int v11 = v5;
    uint64_t v6 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v9;
    uint64_t v9 = v6;
    sirinluinternalitfm::ITFMHypothesis::~ITFMHypothesis((sirinluinternalitfm::ITFMHypothesis *)&v8);
  }
  return a1;
}

uint64_t sirinluinternalitfm::ITFMHypothesis::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    if ((*(unsigned char *)(a2 + 24) & 1) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 24))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 24) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 24) & 2) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 24) & 2) != 0)
  {
    return 0;
  }
  char v2 = *(unsigned __int8 **)(a1 + 8);
  int v3 = *(unsigned __int8 ***)(a2 + 8);
  uint64_t result = v3 == 0;
  if (!v2) {
    return result;
  }
  if (!v3) {
    return 0;
  }
  uint64_t v5 = v2[23];
  if ((v5 & 0x80u) == 0) {
    uint64_t v6 = (unsigned __int8 *)v2[23];
  }
  else {
    uint64_t v6 = (unsigned __int8 *)*((void *)v2 + 1);
  }
  int v7 = (unsigned __int8 *)*((unsigned __int8 *)v3 + 23);
  int v8 = (char)v7;
  if ((char)v7 < 0) {
    int v7 = v3[1];
  }
  if (v6 != v7) {
    return 0;
  }
  if (v8 >= 0) {
    uint64_t v9 = *(unsigned __int8 **)(a2 + 8);
  }
  else {
    uint64_t v9 = *v3;
  }
  if ((v5 & 0x80) != 0) {
    return !memcmp(*(const void **)v2, v9, *((void *)v2 + 1));
  }
  if (!v2[23]) {
    return 1;
  }
  uint64_t v10 = v5 - 1;
  do
  {
    int v12 = *v2++;
    int v11 = v12;
    int v14 = *v9++;
    int v13 = v14;
    BOOL v16 = v10-- != 0;
    uint64_t result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

unint64_t sirinluinternalitfm::ITFMHypothesis::hash_value(sirinluinternalitfm::ITFMHypothesis *this)
{
  if ((*((unsigned char *)this + 24) & 1) == 0)
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 24) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v3 = 0;
    goto LABEL_8;
  }
  uint64_t v1 = *((int *)this + 4);
  if ((*((unsigned char *)this + 24) & 2) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  float v2 = *((float *)this + 5);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = LODWORD(v2);
  }
LABEL_8:
  unint64_t v4 = *((void *)this + 1);
  if (v4) {
    unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100](v4);
  }
  return v3 ^ v1 ^ v4;
}

uint64_t sirinluinternalplan_generation::PlanGenerationResponse::formatText(sirinluinternalplan_generation::PlanGenerationResponse *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = (uint64_t *)*((void *)this + 1);
  uint64_t v6 = (uint64_t *)*((void *)this + 2);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "mappings");
  }
  uint64_t v8 = *((void *)this + 4);
  for (uint64_t i = *((void *)this + 5); v8 != i; v8 += 24)
    PB::TextFormatter::format();
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluinternalplan_generation::PlanGenerationResponse::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *(void *)(this + 32);
  uint64_t v5 = *(void *)(this + 40);
  while (v4 != v5)
  {
    this = PB::Writer::write();
    v4 += 24;
  }
  uint64_t v7 = *(const PB::Base ***)(v3 + 8);
  uint64_t v6 = *(const PB::Base ***)(v3 + 16);
  while (v7 != v6)
  {
    uint64_t v8 = *v7++;
    this = PB::Writer::writeSubmessage(a2, v8);
  }
  return this;
}

uint64_t sirinluinternalplan_generation::PlanGenerationResponse::readFrom(sirinluinternalplan_generation::PlanGenerationResponse *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (std::vector<std::string> *)((char *)this + 32);
    uint64_t v9 = (std::allocator<std::string> *)((char *)this + 48);
    while (1)
    {
      uint64_t v10 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v11 = 0;
      unsigned int v12 = 0;
      unint64_t v13 = 0;
      while (1)
      {
        unint64_t v14 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v15 = *(unsigned char *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0) {
          break;
        }
        v11 += 7;
        unint64_t v2 = v14;
        BOOL v16 = v12++ > 8;
        if (v16) {
          goto LABEL_26;
        }
      }
LABEL_21:
      if ((v13 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v13 >> 3) == 2) {
        operator new();
      }
      if ((v13 >> 3) == 1)
      {
        uint64_t v22 = (char *)*((void *)this + 5);
        unint64_t v21 = *((void *)this + 6);
        if ((unint64_t)v22 >= v21)
        {
          unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((v22 - (char *)v8->__begin_) >> 3);
          unint64_t v26 = v25 + 1;
          if (v25 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - (unint64_t)v8->__begin_) >> 3);
          if (2 * v27 > v26) {
            unint64_t v26 = 2 * v27;
          }
          if (v27 >= 0x555555555555555) {
            unint64_t v28 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v28 = v26;
          }
          __v.__end_cap_.__value_ = v9;
          if (v28) {
            unint64_t v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v28);
          }
          else {
            uint64_t v29 = 0;
          }
          unint64_t v30 = (std::string *)(v28 + 24 * v25);
          __v.__first_ = (std::__split_buffer<std::string>::pointer)v28;
          __v.__begin_ = v30;
          __v.__end_cap_.__value_ = (std::string *)(v28 + 24 * v29);
          v30->__r_.__value_.__r.__words[0] = 0;
          v30->__r_.__value_.__l.__size_ = 0;
          v30->__r_.__value_.__r.__words[2] = 0;
          __v.__end_ = v30 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(v8, &__v);
          char v23 = (void *)*((void *)this + 5);
          std::__split_buffer<std::string>::~__split_buffer(&__v);
        }
        else
        {
          *(void *)uint64_t v22 = 0;
          *((void *)v22 + 1) = 0;
          *((void *)v22 + 2) = 0;
          char v23 = v22 + 24;
          *((void *)this + 5) = v22 + 24;
        }
        *((void *)this + 5) = v23;
        PB::Reader::read();
      }
      else
      {
LABEL_26:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v17 = 0;
    unsigned int v18 = 0;
    unint64_t v13 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v19 = v2 + 1;
      char v20 = *(unsigned char *)(v10 + v2);
      *((void *)a2 + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0) {
        goto LABEL_21;
      }
      v17 += 7;
      unint64_t v2 = v19;
      BOOL v16 = v18++ > 8;
      if (v16) {
        goto LABEL_26;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sub_1C8B350D0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sirinluinternalplan_generation::PlanGenerationResponse::~PlanGenerationResponse(sirinluinternalplan_generation::PlanGenerationResponse *this)
{
  sirinluinternalplan_generation::PlanGenerationResponse::~PlanGenerationResponse(this);
  JUMPOUT(0x1CB772580);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_1F232CB28;
  unint64_t v2 = (void **)((char *)this + 32);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((void *)this + 1))
  {
    std::vector<std::unique_ptr<siricommon::StringValue>>::__clear[abi:ne180100]((void *)this + 1);
    operator delete(*((void **)this + 1));
  }
  PB::Base::~Base(this);
}

double sirinluinternalplan_generation::PlanGenerationResponse::PlanGenerationResponse(sirinluinternalplan_generation::PlanGenerationResponse *this)
{
  *(void *)this = &unk_1F232CB28;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(void *)this = &unk_1F232CB28;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

sirinluinternalplan_generation::PlanGenerationResponse *sirinluinternalplan_generation::PlanGenerationResponse::PlanGenerationResponse(sirinluinternalplan_generation::PlanGenerationResponse *this, const sirinluinternalplan_generation::PlanGenerationResponse *a2)
{
  *(void *)this = &unk_1F232CB28;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  if (this != a2) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)((char *)this + 32), *((std::string **)a2 + 4), *((long long **)a2 + 5), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 3));
  }
  if (*((void *)a2 + 1) != *((void *)a2 + 2)) {
    operator new();
  }
  return this;
}

void sub_1C8B353B0(void *a1)
{
}

uint64_t sirinluinternalplan_generation::PlanGenerationResponse::operator=(uint64_t a1, const sirinluinternalplan_generation::PlanGenerationResponse *a2)
{
  if ((const sirinluinternalplan_generation::PlanGenerationResponse *)a1 != a2)
  {
    sirinluinternalplan_generation::PlanGenerationResponse::PlanGenerationResponse((sirinluinternalplan_generation::PlanGenerationResponse *)v7, a2);
    long long v3 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v10;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v4;
    long long v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    long long v9 = v5;
    long long v10 = v3;
    sirinluinternalplan_generation::PlanGenerationResponse::~PlanGenerationResponse((sirinluinternalplan_generation::PlanGenerationResponse *)v7);
  }
  return a1;
}

void *sirinluinternalplan_generation::swap(void *this, sirinluinternalplan_generation::PlanGenerationResponse *a2, sirinluinternalplan_generation::PlanGenerationResponse *a3)
{
  uint64_t v3 = this[4];
  this[4] = *((void *)a2 + 4);
  *((void *)a2 + 4) = v3;
  uint64_t v4 = this[5];
  this[5] = *((void *)a2 + 5);
  *((void *)a2 + 5) = v4;
  uint64_t v5 = this[6];
  this[6] = *((void *)a2 + 6);
  *((void *)a2 + 6) = v5;
  uint64_t v6 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v6;
  uint64_t v7 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v7;
  uint64_t v8 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v8;
  return this;
}

uint64_t sirinluinternalplan_generation::PlanGenerationResponse::PlanGenerationResponse(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F232CB28;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v4 = (void **)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a1 + 32));
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  if (*v4)
  {
    std::vector<std::unique_ptr<siricommon::StringValue>>::__clear[abi:ne180100](v4);
    operator delete(*v4);
    *uint64_t v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

uint64_t sirinluinternalplan_generation::PlanGenerationResponse::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sirinluinternalplan_generation::PlanGenerationResponse::PlanGenerationResponse((uint64_t)v7, a2);
    long long v3 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v10;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v4;
    long long v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    long long v9 = v5;
    long long v10 = v3;
    sirinluinternalplan_generation::PlanGenerationResponse::~PlanGenerationResponse((sirinluinternalplan_generation::PlanGenerationResponse *)v7);
  }
  return a1;
}

uint64_t sirinluinternalplan_generation::PlanGenerationResponse::operator==(void *a1, void *a2)
{
  unint64_t v2 = (unsigned __int8 *)a1[4];
  long long v3 = (unsigned __int8 *)a1[5];
  long long v4 = (unsigned __int8 *)a2[4];
  if (v3 - v2 != a2[5] - (void)v4) {
    return 0;
  }
  while (v2 != v3)
  {
    uint64_t result = std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(v2, v4);
    if (!result) {
      return result;
    }
    v2 += 24;
    v4 += 24;
  }
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[2];
  char v11 = a2 + 1;
  long long v10 = (uint64_t *)a2[1];
  if (v9 - v8 != v11[1] - (void)v10) {
    return 0;
  }
  if (v8 == v9) {
    return 1;
  }
  uint64_t v12 = v8 + 8;
  do
  {
    uint64_t v13 = *v10++;
    uint64_t result = sirinluinternalplan_generation::VariableEventIdPair::operator==(*(void *)(v12 - 8), v13);
    if (result) {
      BOOL v14 = v12 == v9;
    }
    else {
      BOOL v14 = 1;
    }
    v12 += 8;
  }
  while (!v14);
  return result;
}

uint64_t sirinluinternalplan_generation::PlanGenerationResponse::hash_value(sirinluinternalplan_generation::PlanGenerationResponse *this)
{
  uint64_t v2 = *((void *)this + 4);
  uint64_t v3 = *((void *)this + 5);
  if (v2 == v3)
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = 0;
    do
    {
      v4 ^= std::__string_hash<char>::operator()[abi:ne180100](v2);
      v2 += 24;
    }
    while (v2 != v3);
  }
  uint64_t v6 = (sirinluinternalplan_generation::VariableEventIdPair **)*((void *)this + 1);
  long long v5 = (sirinluinternalplan_generation::VariableEventIdPair **)*((void *)this + 2);
  if (v6 == v5)
  {
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = *v6++;
      v7 ^= sirinluinternalplan_generation::VariableEventIdPair::hash_value(v8);
    }
    while (v6 != v5);
  }
  return v7 ^ v4;
}

uint64_t sirinluexternal::SystemReportedFailure::formatText(sirinluexternal::SystemReportedFailure *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "reason");
  }
  uint64_t v6 = *((void *)this + 2);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, a2, "task");
  }
  uint64_t v7 = *((void *)this + 3);
  if (v7) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "task_id");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluexternal::SystemReportedFailure::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *(const PB::Base **)(this + 24);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  uint64_t v5 = *(const PB::Base **)(v3 + 8);
  if (v5) {
    this = PB::Writer::writeSubmessage(a2, v5);
  }
  uint64_t v6 = *(const PB::Base **)(v3 + 16);
  if (v6)
  {
    return PB::Writer::writeSubmessage(a2, v6);
  }
  return this;
}

uint64_t sirinluexternal::SystemReportedFailure::readFrom(sirinluexternal::SystemReportedFailure *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_25;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v18 = v10 >> 3;
      if ((v10 >> 3) == 3) {
        operator new();
      }
      if (v18 == 2) {
        operator new();
      }
      if (v18 == 1) {
        operator new();
      }
LABEL_25:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_25;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluexternal::SystemReportedFailure::~SystemReportedFailure(sirinluexternal::SystemReportedFailure *this)
{
  sirinluexternal::SystemReportedFailure::~SystemReportedFailure(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)this = &unk_1F232CB78;
  unint64_t v2 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  PB::Base::~Base(this);
}

void *sirinluexternal::SystemReportedFailure::SystemReportedFailure(void *this)
{
  *this = &unk_1F232CB78;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = &unk_1F232CB78;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

void *sirinluexternal::SystemReportedFailure::SystemReportedFailure(void *this, const sirinluexternal::SystemReportedFailure *a2)
{
  *this = &unk_1F232CB78;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  if (*((void *)a2 + 3)) {
    operator new();
  }
  if (*((void *)a2 + 1)) {
    operator new();
  }
  if (*((void *)a2 + 2)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternal::SystemReportedFailure::operator=(uint64_t a1, const sirinluexternal::SystemReportedFailure *a2)
{
  if ((const sirinluexternal::SystemReportedFailure *)a1 != a2)
  {
    sirinluexternal::SystemReportedFailure::SystemReportedFailure(&v6, a2);
    uint64_t v3 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v8;
    uint64_t v8 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v4;
    sirinluexternal::SystemReportedFailure::~SystemReportedFailure((sirinluexternal::SystemReportedFailure *)&v6);
  }
  return a1;
}

void *sirinluexternal::swap(void *this, sirinluexternal::SystemReportedFailure *a2, sirinluexternal::SystemReportedFailure *a3)
{
  uint64_t v3 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v3;
  uint64_t v4 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  uint64_t v5 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  return this;
}

void *sirinluexternal::SystemReportedFailure::SystemReportedFailure(void *a1, void *a2)
{
  *a1 = &unk_1F232CB78;
  a1[1] = 0;
  uint64_t v4 = a1 + 1;
  a1[2] = 0;
  a1[3] = 0;
  uint64_t v5 = a2[3];
  a2[3] = 0;
  uint64_t v6 = a1[3];
  a1[3] = v5;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = a2[1];
  a2[1] = 0;
  uint64_t v8 = *v4;
  *uint64_t v4 = v7;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = a2[2];
  a2[2] = 0;
  uint64_t v10 = a1[2];
  a1[2] = v9;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  return a1;
}

uint64_t sirinluexternal::SystemReportedFailure::operator=(uint64_t a1, void *a2)
{
  if ((void *)a1 != a2)
  {
    sirinluexternal::SystemReportedFailure::SystemReportedFailure(&v6, a2);
    uint64_t v3 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v8;
    uint64_t v8 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v4;
    sirinluexternal::SystemReportedFailure::~SystemReportedFailure((sirinluexternal::SystemReportedFailure *)&v6);
  }
  return a1;
}

uint64_t sirinluexternal::SystemReportedFailure::operator==(void *a1, void *a2)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = a2[3];
  if (v4)
  {
    if (!v5 || !sirinluexternal::UUID::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  uint64_t v6 = (void *)a1[1];
  long long v7 = (void *)a2[1];
  if (!v6)
  {
    if (!v7) {
      goto LABEL_9;
    }
    return 0;
  }
  if (!v7 || (sirinluexternal::UsoGraph::operator==(v6, v7) & 1) == 0) {
    return 0;
  }
LABEL_9:
  uint64_t v8 = a1[2];
  unint64_t v9 = a2[2];
  uint64_t result = (v8 | v9) == 0;
  if (v8 && v9)
  {
    unint64_t v11 = (void *)a1[2];
    return sirinluexternal::UsoGraph::operator==(v11, (void *)v9);
  }
  return result;
}

unint64_t sirinluexternal::SystemReportedFailure::hash_value(sirinluexternal::SystemReportedFailure *this)
{
  uint64_t v2 = *((void *)this + 3);
  if (!v2)
  {
    uint64_t v6 = 0;
    goto LABEL_11;
  }
  if ((*(unsigned char *)(v2 + 28) & 1) == 0)
  {
    uint64_t v3 = 0;
    if ((*(unsigned char *)(v2 + 28) & 2) != 0) {
      goto LABEL_4;
    }
LABEL_8:
    uint64_t v4 = 0;
    if ((*(unsigned char *)(v2 + 28) & 4) != 0) {
      goto LABEL_5;
    }
LABEL_9:
    uint64_t v5 = 0;
    goto LABEL_10;
  }
  uint64_t v3 = *(void *)(v2 + 8);
  if ((*(unsigned char *)(v2 + 28) & 2) == 0) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v4 = *(void *)(v2 + 16);
  if ((*(unsigned char *)(v2 + 28) & 4) == 0) {
    goto LABEL_9;
  }
LABEL_5:
  uint64_t v5 = *(int *)(v2 + 24);
LABEL_10:
  uint64_t v6 = v4 ^ v3 ^ v5;
LABEL_11:
  long long v7 = (sirinluexternal::UsoGraph *)*((void *)this + 1);
  if (v7) {
    uint64_t v8 = sirinluexternal::UsoGraph::hash_value(v7);
  }
  else {
    uint64_t v8 = 0;
  }
  unint64_t v9 = *((void *)this + 2);
  if (v9) {
    unint64_t v9 = sirinluexternal::UsoGraph::hash_value((sirinluexternal::UsoGraph *)v9);
  }
  return v8 ^ v6 ^ v9;
}

uint64_t sirinluexternal::SystemReportedFailure::makeTaskId(uint64_t this)
{
  if (!*(void *)(this + 24)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternal::SystemReportedFailure::makeReason(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternal::SystemReportedFailure::makeTask(uint64_t this)
{
  if (!*(void *)(this + 16)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternal::UsoEdge::formatText(sirinluexternal::UsoEdge *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 24)) {
    PB::TextFormatter::format(a2, "from_index");
  }
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "label");
  }
  if ((*((unsigned char *)this + 24) & 2) != 0) {
    PB::TextFormatter::format(a2, "to_index");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluexternal::UsoEdge::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 24);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2);
    char v4 = *(unsigned char *)(v3 + 24);
  }
  if ((v4 & 2) != 0) {
    this = PB::Writer::writeVarInt(a2);
  }
  uint64_t v5 = *(const PB::Base **)(v3 + 8);
  if (v5)
  {
    return PB::Writer::writeSubmessage(a2, v5);
  }
  return this;
}

uint64_t sirinluexternal::UsoEdge::readFrom(sirinluexternal::UsoEdge *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_25:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v21 = v11 >> 3;
      if ((v11 >> 3) == 3) {
        operator new();
      }
      if (v21 == 2)
      {
        *((unsigned char *)this + 24) |= 2u;
        unint64_t v30 = *((void *)a2 + 1);
        unint64_t v31 = *((void *)a2 + 2);
        uint64_t v32 = *(void *)a2;
        if (v30 > 0xFFFFFFFFFFFFFFF5 || v30 + 10 > v31)
        {
          char v42 = 0;
          unsigned int v43 = 0;
          uint64_t v35 = 0;
          if (v31 <= v30) {
            unint64_t v31 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v31 == v30)
            {
              LODWORD(v35) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_65;
            }
            unint64_t v44 = v30 + 1;
            char v45 = *(unsigned char *)(v32 + v30);
            *((void *)a2 + 1) = v44;
            v35 |= (unint64_t)(v45 & 0x7F) << v42;
            if ((v45 & 0x80) == 0) {
              break;
            }
            v42 += 7;
            unint64_t v30 = v44;
            BOOL v14 = v43++ > 8;
            if (v14)
            {
LABEL_57:
              LODWORD(v35) = 0;
              goto LABEL_65;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v35) = 0;
          }
        }
        else
        {
          char v33 = 0;
          unsigned int v34 = 0;
          uint64_t v35 = 0;
          while (1)
          {
            unint64_t v36 = v30 + 1;
            *((void *)a2 + 1) = v30 + 1;
            char v37 = *(unsigned char *)(v32 + v30);
            v35 |= (unint64_t)(v37 & 0x7F) << v33;
            if ((v37 & 0x80) == 0) {
              break;
            }
            v33 += 7;
            unint64_t v30 = v36;
            BOOL v14 = v34++ > 8;
            if (v14) {
              goto LABEL_57;
            }
          }
        }
LABEL_65:
        *((_DWORD *)this + 5) = v35;
      }
      else if (v21 == 1)
      {
        *((unsigned char *)this + 24) |= 1u;
        unint64_t v22 = *((void *)a2 + 1);
        unint64_t v23 = *((void *)a2 + 2);
        uint64_t v24 = *(void *)a2;
        if (v22 > 0xFFFFFFFFFFFFFFF5 || v22 + 10 > v23)
        {
          char v38 = 0;
          unsigned int v39 = 0;
          uint64_t v27 = 0;
          if (v23 <= v22) {
            unint64_t v23 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v23 == v22)
            {
              LODWORD(v27) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_62;
            }
            unint64_t v40 = v22 + 1;
            char v41 = *(unsigned char *)(v24 + v22);
            *((void *)a2 + 1) = v40;
            v27 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0) {
              break;
            }
            v38 += 7;
            unint64_t v22 = v40;
            BOOL v14 = v39++ > 8;
            if (v14)
            {
LABEL_50:
              LODWORD(v27) = 0;
              goto LABEL_62;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v27) = 0;
          }
        }
        else
        {
          char v25 = 0;
          unsigned int v26 = 0;
          uint64_t v27 = 0;
          while (1)
          {
            unint64_t v28 = v22 + 1;
            *((void *)a2 + 1) = v22 + 1;
            char v29 = *(unsigned char *)(v24 + v22);
            v27 |= (unint64_t)(v29 & 0x7F) << v25;
            if ((v29 & 0x80) == 0) {
              break;
            }
            v25 += 7;
            unint64_t v22 = v28;
            BOOL v14 = v26++ > 8;
            if (v14) {
              goto LABEL_50;
            }
          }
        }
LABEL_62:
        *((_DWORD *)this + 4) = v27;
      }
      else
      {
LABEL_19:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_25;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluexternal::UsoEdge::~UsoEdge(sirinluexternal::UsoEdge *this)
{
  sirinluexternal::UsoEdge::~UsoEdge(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t vars8;

  unint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1F232CBC8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

uint64_t sirinluexternal::UsoEdge::UsoEdge(uint64_t this)
{
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)this = &unk_1F232CBC8;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)this = &unk_1F232CBC8;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

uint64_t sirinluexternal::UsoEdge::UsoEdge(uint64_t this, const sirinluexternal::UsoEdge *a2)
{
  *(void *)this = &unk_1F232CBC8;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(_DWORD *)(this + 24) = 0;
  if (*((unsigned char *)a2 + 24))
  {
    int v3 = *((_DWORD *)a2 + 4);
    *(unsigned char *)(this + 24) = 1;
    *(_DWORD *)(this + 16) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 24) & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 24) & 2) != 0)
  {
LABEL_5:
    int v4 = *((_DWORD *)a2 + 5);
    *(unsigned char *)(this + 24) = v2;
    *(_DWORD *)(this + 20) = v4;
  }
LABEL_6:
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternal::UsoEdge::operator=(uint64_t a1, const sirinluexternal::UsoEdge *a2)
{
  if ((const sirinluexternal::UsoEdge *)a1 != a2)
  {
    sirinluexternal::UsoEdge::UsoEdge((uint64_t)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v9;
    uint64_t v9 = v4;
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v5;
    sirinluexternal::UsoEdge::~UsoEdge((sirinluexternal::UsoEdge *)&v7);
  }
  return a1;
}

uint64_t sirinluexternal::swap(uint64_t this, sirinluexternal::UsoEdge *a2, sirinluexternal::UsoEdge *a3)
{
  int v3 = *(_DWORD *)(this + 24);
  *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  int v4 = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  int v5 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v5;
  uint64_t v6 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v6;
  return this;
}

uint64_t sirinluexternal::UsoEdge::UsoEdge(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F232CBC8;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t sirinluexternal::UsoEdge::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sirinluexternal::UsoEdge::UsoEdge((uint64_t)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v9;
    uint64_t v9 = v4;
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v5;
    sirinluexternal::UsoEdge::~UsoEdge((sirinluexternal::UsoEdge *)&v7);
  }
  return a1;
}

uint64_t sirinluexternal::UsoEdge::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    if ((*(unsigned char *)(a2 + 24) & 1) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 24))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 24) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 24) & 2) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 24) & 2) != 0)
  {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t result = (v2 | v3) == 0;
  if (v2)
  {
    if (v3) {
      return sirinluexternal::UsoEdgeLabel::operator==(v2, v3);
    }
  }
  return result;
}

unint64_t sirinluexternal::UsoEdge::hash_value(sirinluexternal::UsoEdge *this)
{
  if (*((unsigned char *)this + 24))
  {
    uint64_t v1 = *((unsigned int *)this + 4);
    if ((*((unsigned char *)this + 24) & 2) != 0) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 24) & 2) != 0)
    {
LABEL_3:
      uint64_t v2 = *((unsigned int *)this + 5);
      goto LABEL_6;
    }
  }
  uint64_t v2 = 0;
LABEL_6:
  unint64_t v3 = *((void *)this + 1);
  if (v3) {
    unint64_t v3 = sirinluexternal::UsoEdgeLabel::hash_value((sirinluexternal::UsoEdgeLabel *)v3);
  }
  return v2 ^ v1 ^ v3;
}

uint64_t sirinluexternal::UsoEdge::makeLabel(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

siri::ontology::UsoEntityNode *siri::ontology::setUtteranceAlignmentMessageIfExists(int a1, void *lpsrc, int a3)
{
  if (result)
  {
    uint64_t v5 = result;
    if (*((void *)result + 7) != *((void *)result + 8))
    {
      int v10 = &unk_1F232C3D8;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      int v15 = a3;
      int v16 = 2;
      if (*(_DWORD *)siri::ontology::UsoEntityNode::getUtteranceAlignment(result) != -1)
      {
        int v6 = *(_DWORD *)siri::ontology::UsoEntityNode::getUtteranceAlignment(v5);
        LOBYTE(v16) = v16 | 1;
        int v14 = v6;
      }
      UtteranceAlignment = (siri::ontology::UsoUtteranceAlignment *)siri::ontology::UsoEntityNode::getUtteranceAlignment(v5);
      siri::ontology::UsoUtteranceAlignment::getSpans((uint64_t *)&v8, UtteranceAlignment);
      if (v8 != v9) {
        operator new();
      }
      if (v8)
      {
        uint64_t v9 = v8;
        operator delete(v8);
      }
      operator new();
    }
  }
  return result;
}

void sub_1C8B37278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  sirinluexternal::UtteranceAlignment::~UtteranceAlignment((sirinluexternal::UtteranceAlignment *)&a19);
  _Unwind_Resume(a1);
}

void siri::ontology::setIdentifierMessage(int a1, void *lpsrc, int a3)
{
  if (v4)
  {
    siri::ontology::UsoEntityNode::getIdentifiers((uint64_t *)&v17, v4);
    if (v17 != v18)
    {
      uint64_t v5 = *v17;
      uint64_t v12 = &unk_1F232D338;
      int v16 = 4;
      long long v14 = 0u;
      long long v15 = 0u;
      long long v13 = 0u;
      DWORD2(v15) = a3;
      if (*(char *)(v5 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v5, *(void *)(v5 + 8));
        if (*((void *)&v14 + 1))
        {
          if (*(char *)(*((void *)&v14 + 1) + 23) < 0) {
            operator delete(**((void ***)&v14 + 1));
          }
          **((std::string **)&v14 + 1) = __str;
          if (*(char *)(v5 + 47) < 0) {
            std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v5 + 24), *(void *)(v5 + 32));
          }
          else {
            std::string __str = *(std::string *)(v5 + 24);
          }
          if (!(void)v13) {
            operator new();
          }
          if (*(char *)(v13 + 23) < 0) {
            operator delete(*(void **)v13);
          }
          *(std::string *)long long v13 = __str;
          std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&__str, (long long *)(v5 + 48));
          if ((_BYTE)v20)
          {
            sirinluexternal::UsoEntityIdentifier::makeNamespaceA((uint64_t)&v12);
            if (!(_BYTE)v20) {
              std::__throw_bad_optional_access[abi:ne180100]();
            }
            uint64_t v6 = *((void *)&v13 + 1);
            siricommon::StringValue::makeValue(*((uint64_t *)&v13 + 1));
            std::string::operator=(*(std::string **)(v6 + 8), &__str);
            if ((_BYTE)v20 && SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
          }
          if (*(unsigned char *)(v5 + 88))
          {
            uint64_t v7 = *(void *)(v5 + 80);
            sirinluexternal::UsoEntityIdentifier::makeProbability((uint64_t)&v12);
            uint64_t v8 = v14;
            *(unsigned char *)(v14 + 16) |= 1u;
            *(void *)(v8 + 8) = v7;
          }
          uint64_t v9 = *(void *)(v5 + 96);
          if ((v9 & 0xFF00000000) != 0)
          {
            LOBYTE(v16) = v16 | 8;
            HIDWORD(v15) = v9;
          }
          uint64_t v10 = *(void *)(v5 + 104);
          if ((v10 & 0xFF00000000) != 0)
          {
            LOBYTE(v16) = v16 | 1;
            LODWORD(v15) = v10;
          }
          uint64_t v11 = *(void *)(v5 + 112);
          if ((v11 & 0xFF00000000) != 0)
          {
            LOBYTE(v16) = v16 | 2;
            DWORD1(v15) = v11;
          }
          operator new();
        }
      }
      else
      {
        std::string __str = *(std::string *)v5;
      }
      operator new();
    }
    if (v17)
    {
      char v18 = v17;
      operator delete(v17);
    }
  }
}

void sub_1C8B376F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
  sirinluexternal::UsoEntityIdentifier::~UsoEntityIdentifier((sirinluexternal::UsoEntityIdentifier *)&a10);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

std::string *std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](std::string *this, long long *a2)
{
  this->__r_.__value_.__s.__data_[0] = 0;
  this[1].__r_.__value_.__s.__data_[0] = 0;
  if (*((unsigned char *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long v3 = *a2;
      this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
  return this;
}

void sub_1C8B377F4(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_bad_optional_access[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x1E4FBA4F8] + 16;
  __cxa_throw(exception, MEMORY[0x1E4FBA348], MEMORY[0x1E4FBA1F0]);
}

uint64_t siricommon::StringValue::makeValue(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void siri::ontology::setEntitySpanMessage(int a1, void *lpsrc, int a3)
{
  if (v3)
  {
    siri::ontology::UsoEntityNode::getEntitySpans((uint64_t *)&v66, v3);
    uint64_t v4 = (siri::ontology::UsoEntitySpan **)v66;
    if (v66 != v67)
    {
      unsigned int v57 = &unk_1F232C238;
      int v65 = 1;
      long long v63 = 0u;
      long long v64 = 0u;
      long long v58 = 0u;
      long long v59 = 0u;
      long long v60 = 0u;
      long long v61 = 0u;
      long long v62 = 0u;
      DWORD2(v64) = a3;
      std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&__str, *v66);
      if ((_BYTE)v69)
      {
        sirinluexternal::UsoEntitySpan::makeOriginAppId((uint64_t)&v57);
        if (!(_BYTE)v69) {
          std::__throw_bad_optional_access[abi:ne180100]();
        }
        uint64_t v5 = v61;
        siricommon::StringValue::makeValue(v61);
        std::string::operator=(*(std::string **)(v5 + 8), &__str);
        if ((_BYTE)v69 && SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
      }
      uint64_t v6 = *v4;
      uint64_t v7 = *((void *)*v4 + 4);
      if ((v7 & 0xFF00000000) != 0)
      {
        LOBYTE(v65) = v65 | 2;
        HIDWORD(v64) = v7;
        uint64_t v6 = *v4;
      }
      std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&__str, (long long *)((char *)v6 + 40));
      if ((_BYTE)v69)
      {
        sirinluexternal::UsoEntitySpan::makeLabel((uint64_t)&v57);
        if (!(_BYTE)v69) {
          std::__throw_bad_optional_access[abi:ne180100]();
        }
        uint64_t v8 = v60;
        siricommon::StringValue::makeValue(v60);
        std::string::operator=(*(std::string **)(v8 + 8), &__str);
        if ((_BYTE)v69 && SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
      }
      std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&__str, (long long *)((char *)*v4 + 152));
      if ((_BYTE)v69)
      {
        sirinluexternal::UsoEntitySpan::makeOriginEntityId((uint64_t)&v57);
        if (!(_BYTE)v69) {
          std::__throw_bad_optional_access[abi:ne180100]();
        }
        uint64_t v9 = *((void *)&v61 + 1);
        siricommon::StringValue::makeValue(*((uint64_t *)&v61 + 1));
        std::string::operator=(*(std::string **)(v9 + 8), &__str);
        if ((_BYTE)v69 && SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
      }
      uint64_t v10 = *v4;
      uint64_t v11 = *((void *)*v4 + 14);
      if ((v11 & 0xFF00000000) != 0)
      {
        sirinluexternal::UsoEntitySpan::makeStartIndex((uint64_t)&v57);
        uint64_t v12 = v64;
        *(unsigned char *)(v64 + 12) |= 1u;
        *(_DWORD *)(v12 + 8) = v11;
        uint64_t v10 = *v4;
      }
      uint64_t v13 = *((void *)v10 + 15);
      if ((v13 & 0xFF00000000) != 0)
      {
        sirinluexternal::UsoEntitySpan::makeEndIndex((uint64_t)&v57);
        uint64_t v14 = *((void *)&v59 + 1);
        *(unsigned char *)(*((void *)&v59 + 1) + 12) |= 1u;
        *(_DWORD *)(v14 + 8) = v13;
        uint64_t v10 = *v4;
      }
      if (*((unsigned char *)v10 + 80))
      {
        long long v15 = (int *)*((void *)v10 + 9);
        sirinluexternal::UsoEntitySpan::makeMatchInfo((uint64_t)&v57);
        int v16 = *v15;
        if (*v15)
        {
          uint64_t v17 = *((void *)&v60 + 1);
          *(unsigned char *)(*((void *)&v60 + 1) + 100) |= 1u;
          *(_DWORD *)(v17 + 96) = v16;
        }
        if (*((unsigned char *)v15 + 8))
        {
          int v18 = v15[1];
          sirinluexternal::MatchInfo::makeMatchScore(*((uint64_t *)&v60 + 1));
          uint64_t v19 = *(void *)(*((void *)&v60 + 1) + 40);
          *(unsigned char *)(v19 + 12) |= 1u;
          *(_DWORD *)(v19 + 8) = v18;
        }
        uint64_t v20 = *(void *)(v15 + 3);
        if ((v20 & 0xFF00000000) != 0)
        {
          sirinluexternal::MatchInfo::makeMaxTokenCount(*((uint64_t *)&v60 + 1));
          uint64_t v21 = *(void *)(*((void *)&v60 + 1) + 88);
          *(unsigned char *)(v21 + 12) |= 1u;
          *(_DWORD *)(v21 + 8) = v20;
        }
        uint64_t v22 = *(void *)(v15 + 7);
        if ((v22 & 0xFF00000000) != 0)
        {
          sirinluexternal::MatchInfo::makeMaxStopWordCount(*((uint64_t *)&v60 + 1));
          uint64_t v23 = *(void *)(*((void *)&v60 + 1) + 80);
          *(unsigned char *)(v23 + 12) |= 1u;
          *(_DWORD *)(v23 + 8) = v22;
        }
        uint64_t v24 = *(void *)(v15 + 9);
        if ((v24 & 0xFF00000000) != 0)
        {
          sirinluexternal::MatchInfo::makeMatchedStopWordCount(*((uint64_t *)&v60 + 1));
          uint64_t v25 = *(void *)(*((void *)&v60 + 1) + 56);
          *(unsigned char *)(v25 + 12) |= 1u;
          *(_DWORD *)(v25 + 8) = v24;
        }
        uint64_t v26 = *(void *)(v15 + 11);
        if ((v26 & 0xFF00000000) != 0)
        {
          sirinluexternal::MatchInfo::makeEditDistance(*((uint64_t *)&v60 + 1));
          uint64_t v27 = *(void *)(*((void *)&v60 + 1) + 32);
          *(unsigned char *)(v27 + 12) |= 1u;
          *(_DWORD *)(v27 + 8) = v26;
        }
        uint64_t v28 = *(void *)(v15 + 13);
        if ((v28 & 0xFF00000000) != 0)
        {
          sirinluexternal::MatchInfo::makeMaxAliasCount(*((uint64_t *)&v60 + 1));
          uint64_t v29 = *(void *)(*((void *)&v60 + 1) + 72);
          *(unsigned char *)(v29 + 12) |= 1u;
          *(_DWORD *)(v29 + 8) = v28;
        }
        uint64_t v30 = *(void *)(v15 + 15);
        if ((v30 & 0xFF00000000) != 0)
        {
          sirinluexternal::MatchInfo::makeMatchedAliasCount(*((uint64_t *)&v60 + 1));
          uint64_t v31 = *(void *)(*((void *)&v60 + 1) + 48);
          *(unsigned char *)(v31 + 12) |= 1u;
          *(_DWORD *)(v31 + 8) = v30;
        }
        uint64_t v32 = *(void *)(v15 + 5);
        if ((v32 & 0xFF00000000) != 0)
        {
          sirinluexternal::MatchInfo::makeMatchedTokenCount(*((uint64_t *)&v60 + 1));
          uint64_t v33 = *(void *)(*((void *)&v60 + 1) + 64);
          *(unsigned char *)(v33 + 12) |= 1u;
          *(_DWORD *)(v33 + 8) = v32;
        }
        uint64_t v35 = (int *)*((void *)v15 + 9);
        unsigned int v34 = (int *)*((void *)v15 + 10);
        while (v35 != v34)
        {
          int v36 = *v35;
          char v37 = (void *)*((void *)&v60 + 1);
          unsigned int v39 = *(char **)(*((void *)&v60 + 1) + 16);
          unint64_t v38 = *(void *)(*((void *)&v60 + 1) + 24);
          if ((unint64_t)v39 >= v38)
          {
            char v41 = *(char **)(*((void *)&v60 + 1) + 8);
            uint64_t v42 = (v39 - v41) >> 2;
            unint64_t v43 = v42 + 1;
            if ((unint64_t)(v42 + 1) >> 62) {
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v44 = v38 - (void)v41;
            if (v44 >> 1 > v43) {
              unint64_t v43 = v44 >> 1;
            }
            BOOL v45 = (unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL;
            unint64_t v46 = 0x3FFFFFFFFFFFFFFFLL;
            if (!v45) {
              unint64_t v46 = v43;
            }
            if (v46)
            {
              unint64_t v46 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v46);
              char v41 = (char *)v37[1];
              unsigned int v39 = (char *)v37[2];
            }
            else
            {
              uint64_t v47 = 0;
            }
            uint64_t v48 = (_DWORD *)(v46 + 4 * v42);
            *uint64_t v48 = v36;
            unint64_t v40 = v48 + 1;
            while (v39 != v41)
            {
              int v49 = *((_DWORD *)v39 - 1);
              v39 -= 4;
              *--uint64_t v48 = v49;
            }
            v37[1] = v48;
            v37[2] = v40;
            v37[3] = v46 + 4 * v47;
            if (v41) {
              operator delete(v41);
            }
          }
          else
          {
            *(_DWORD *)unsigned int v39 = v36;
            unint64_t v40 = v39 + 4;
          }
          v37[2] = v40;
          ++v35;
        }
      }
      siri::ontology::UsoEntitySpan::getAlternatives((uint64_t *)&v51, *v4);
      if (v51 != (void *)v52)
      {
        uint64_t v54 = (std::string *)&unk_1F232DA68;
        char v55 = 0;
        uint64_t v56 = 0;
        operator new();
      }
      if (v51)
      {
        *(void *)&long long v52 = v51;
        operator delete(v51);
      }
      siri::ontology::UsoEntitySpan::getSpanProperties((uint64_t *)&v54, *v4);
      if (v54 != v55)
      {
        uint64_t v51 = &unk_1F232D248;
        long long v52 = 0u;
        long long v53 = 0u;
        operator new();
      }
      if (v54)
      {
        char v55 = v54;
        operator delete(v54);
      }
      operator new();
    }
    if (v66)
    {
      char v67 = v66;
      operator delete(v66);
    }
  }
}

void sub_1C8B382B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  sirinluexternal::UsoEntitySpan::~UsoEntitySpan((sirinluexternal::UsoEntitySpan *)&a26);
  uint64_t v29 = *(void **)(v27 - 168);
  if (v29)
  {
    *(void *)(v27 - 160) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(a1);
}

void siri::ontology::setNodeMessage(int a1, uint64_t a2, unint64_t *a3, int a4)
{
  switch((*(unsigned int (**)(unint64_t *))(*a3 + 16))(a3))
  {
    case 0u:
    case 2u:
      if (!v8) {
        goto LABEL_36;
      }
      int v9 = *(_DWORD *)(v8[3] + 36);
      *(unsigned char *)(a2 + 76) |= 1u;
      *(_DWORD *)(a2 + 72) = v9;
      if (!v9)
      {
        uint64_t v10 = (const std::string *)(v8[3] + 8);
        siricommon::StringValue::makeValue(a2);
        std::string::operator=(*(std::string **)(a2 + 8), v10);
      }
      goto LABEL_29;
    case 1u:
      if (!v17) {
        goto LABEL_36;
      }
      int v18 = v17;
      int v19 = *(_DWORD *)(v17[3] + 36);
      *(unsigned char *)(a2 + 76) |= 1u;
      *(_DWORD *)(a2 + 72) = v19;
      if (!v19)
      {
        uint64_t v20 = (const std::string *)(v17[3] + 8);
        siricommon::StringValue::makeValue(a2);
        std::string::operator=(*(std::string **)(a2 + 8), v20);
      }
      sirinluexternal::UsoNode::makeUsoVerbElementId(a2);
      int v21 = *(_DWORD *)(v18[13] + 36);
      uint64_t v22 = *(void *)(a2 + 56);
      *(unsigned char *)(v22 + 12) |= 1u;
      *(_DWORD *)(v22 + 8) = v21;
      if (!v21)
      {
        uint64_t v23 = (const std::string *)(v18[13] + 8);
        uint64_t v24 = *(std::string **)(a2 + 64);
        if (!v24) {
          operator new();
        }
        std::string::operator=(v24, v23);
      }
      siri::ontology::setIdentifierMessage(a1, a3, a4);
      goto LABEL_30;
    case 3u:
      if (!v11) {
        goto LABEL_36;
      }
      int v12 = *(_DWORD *)(*((void *)v11 + 3) + 36);
      *(unsigned char *)(a2 + 76) |= 1u;
      *(_DWORD *)(a2 + 72) = v12;
      uint64_t v13 = (long long *)(v11 + 104);
      std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&__p, (long long *)(v11 + 104));
      if (v40)
      {
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        sirinluexternal::UsoNode::makeStringPayload(a2);
        uint64_t v14 = *(void *)(a2 + 48);
        std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&__p, v13);
        if (!v40) {
          std::__throw_bad_optional_access[abi:ne180100]();
        }
        siricommon::StringValue::makeValue(v14);
        uint64_t v15 = *(void *)(v14 + 8);
        if (*(char *)(v15 + 23) < 0) {
          operator delete(*(void **)v15);
        }
        long long v16 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(void *)(v15 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)uint64_t v15 = v16;
      }
      siri::ontology::setIdentifierMessage(a1, a3, a4);
      siri::ontology::setUtteranceAlignmentMessageIfExists(a1, a3, a4);
      siri::ontology::setEntitySpanMessage(a1, a3, a4);
      return;
    case 4u:
      if (!v27) {
        goto LABEL_36;
      }
      uint64_t v28 = v27;
      int v29 = *(_DWORD *)(v27[3] + 36);
      *(unsigned char *)(a2 + 76) |= 1u;
      *(_DWORD *)(a2 + 72) = v29;
      if (*((unsigned char *)v27 + 112))
      {
        sirinluexternal::UsoNode::makeIntegerPayload(a2);
        if (!*((unsigned char *)v28 + 112)) {
          std::__throw_bad_optional_access[abi:ne180100]();
        }
        uint64_t v30 = v28[13];
        uint64_t v31 = *(void *)(a2 + 16);
        *(unsigned char *)(v31 + 16) |= 1u;
        *(void *)(v31 + 8) = v30;
      }
LABEL_29:
      siri::ontology::setIdentifierMessage(a1, a3, a4);
      siri::ontology::setUtteranceAlignmentMessageIfExists(a1, a3, a4);
LABEL_30:
      siri::ontology::setEntitySpanMessage(a1, a3, a4);
      break;
    case 5u:
      if (!v25) {
LABEL_36:
      }
        __cxa_bad_cast();
      int v26 = *(_DWORD *)(v25[3] + 36);
      *(unsigned char *)(a2 + 76) |= 1u;
      *(_DWORD *)(a2 + 72) = v26;
      if (!v26)
      {
        uint64_t v32 = (const std::string *)(v25[3] + 8);
        siricommon::StringValue::makeValue(a2);
        uint64_t v33 = *(std::string **)(a2 + 8);
        std::string::operator=(v33, v32);
      }
      break;
    default:
      std::string::basic_string[abi:ne180100]<0>(&__p, "UsoGraphProtoWriterException");
      std::to_string(&v36, a3[2]);
      unsigned int v34 = std::string::insert(&v36, 0, "Unknown UsoGraphNode, vertex: ");
      long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      std::string::size_type v38 = v34->__r_.__value_.__r.__words[2];
      long long v37 = v35;
      v34->__r_.__value_.__l.__size_ = 0;
      v34->__r_.__value_.__r.__words[2] = 0;
      v34->__r_.__value_.__r.__words[0] = 0;
      siri::ontology::throwException<siri::ontology::UsoGraphProtoWriterException,char const*,int,char const*,std::string>();
  }
}

void sub_1C8B38998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    uint64_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void siri::ontology::throwException<siri::ontology::UsoGraphProtoWriterException,char const*,int,char const*,std::string>()
{
  exception = __cxa_allocate_exception(0x70uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, "/Library/Caches/com.apple.xbs/Sources/SiriNLUTypes/serializers/SiriOntology/cpp/UsoGraphProtoWriter.cpp");
  std::string::basic_string[abi:ne180100]<0>(v1, "setNodeMessage");
  siri::ontology::OntologyBaseException::OntologyBaseException();
  void *exception = &unk_1F232CC30;
}

void sub_1C8B38B6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v21 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

void siri::ontology::OntologyBaseException::~OntologyBaseException(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&unk_1F232E958;
  if (SHIBYTE(this[13].__vftable) < 0) {
    operator delete(this[11].__vftable);
  }
  if (SHIBYTE(this[10].__vftable) < 0) {
    operator delete(this[8].__vftable);
  }
  if (SHIBYTE(this[6].__vftable) < 0) {
    operator delete(this[4].__vftable);
  }
  if (SHIBYTE(this[3].__vftable) < 0) {
    operator delete(this[1].__vftable);
  }
  std::exception::~exception(this);
}

{
  uint64_t vars8;

  siri::ontology::OntologyBaseException::~OntologyBaseException(this);
  JUMPOUT(0x1CB772580);
}

uint64_t siri::ontology::OntologyBaseException::what(siri::ontology::OntologyBaseException *this)
{
  uint64_t result = (uint64_t)this + 88;
  if (*((char *)this + 111) < 0) {
    return *(void *)result;
  }
  return result;
}

void siri::ontology::UsoGraphProtoWriterException::~UsoGraphProtoWriterException(std::exception *this)
{
  siri::ontology::OntologyBaseException::~OntologyBaseException(this);
  JUMPOUT(0x1CB772580);
}

void siri::ontology::UsoGraphProtoWriter::toProtobuf(siri::ontology::UsoGraphProtoWriter *this, const siri::ontology::UsoGraph *a2, sirinluexternal::UsoGraph *a3)
{
  long long v63 = &unk_1F232F360;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  long long v71 = 0u;
  sirinluexternal::UsoGraph::makeVersion((uint64_t)&v63);
  uint64_t v6 = *((void *)&v71 + 1);
  int v7 = *((_DWORD *)this + 2);
  *(unsigned char *)(*((void *)&v71 + 1) + 20) |= 1u;
  *(_DWORD *)(v6 + 8) = v7;
  uint64_t v8 = *((void *)&v71 + 1);
  int v9 = *((_DWORD *)this + 3);
  *(unsigned char *)(*((void *)&v71 + 1) + 20) |= 2u;
  *(_DWORD *)(v8 + 12) = v9;
  uint64_t v10 = *((void *)&v71 + 1);
  int v11 = *((_DWORD *)this + 4);
  *(unsigned char *)(*((void *)&v71 + 1) + 20) |= 4u;
  *(_DWORD *)(v10 + 16) = v11;
  *(_OWORD *)std::string __p = 0u;
  long long v61 = 0u;
  float v62 = 1.0;
  siri::ontology::UsoGraph::getNodes((uint64_t *)&v58, this);
  if (v58 != v59)
  {
    int v12 = *v58;
    long long v52 = &unk_1F232E1E8;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    uint64_t v57 = 0;
    siri::ontology::setNodeMessage((int)&v63, (uint64_t)&v52, v12, 0);
    unint64_t v13 = v12[2];
    unint64_t v14 = (unint64_t)__p[1];
    if (__p[1])
    {
      uint8x8_t v15 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
      v15.i16[0] = vaddlv_u8(v15);
      if (v15.u32[0] > 1uLL)
      {
        unint64_t v3 = v12[2];
        if ((void *)v13 >= __p[1]) {
          unint64_t v3 = v13 % (unint64_t)__p[1];
        }
      }
      else
      {
        unint64_t v3 = ((unint64_t)__p[1] - 1) & v13;
      }
      long long v16 = (void *)*((void *)__p[0] + v3);
      if (v16)
      {
        for (uint64_t i = (void *)*v16; i; uint64_t i = (void *)*i)
        {
          unint64_t v18 = i[1];
          if (v18 == v13)
          {
            if (i[2] == v13) {
              goto LABEL_74;
            }
          }
          else
          {
            if (v15.u32[0] > 1uLL)
            {
              if ((void *)v18 >= __p[1]) {
                v18 %= (unint64_t)__p[1];
              }
            }
            else
            {
              v18 &= (unint64_t)__p[1] - 1;
            }
            if (v18 != v3) {
              break;
            }
          }
        }
      }
    }
    int v19 = operator new(0x20uLL);
    *int v19 = 0;
    v19[1] = v13;
    *((_OWORD *)v19 + 1) = v13;
    float v20 = (float)(unint64_t)(*((void *)&v61 + 1) + 1);
    if (v14 && (float)(v62 * (float)v14) >= v20)
    {
LABEL_64:
      std::string v36 = __p[0];
      long long v37 = (void *)*((void *)__p[0] + v3);
      if (v37)
      {
        *int v19 = *v37;
      }
      else
      {
        *int v19 = v61;
        *(void *)&long long v61 = v19;
        v36[v3] = &v61;
        if (!*v19)
        {
LABEL_73:
          ++*((void *)&v61 + 1);
LABEL_74:
          operator new();
        }
        unint64_t v38 = *(void *)(*v19 + 8);
        if ((v14 & (v14 - 1)) != 0)
        {
          if (v38 >= v14) {
            v38 %= v14;
          }
        }
        else
        {
          v38 &= v14 - 1;
        }
        long long v37 = (char *)__p[0] + 8 * v38;
      }
      *long long v37 = v19;
      goto LABEL_73;
    }
    BOOL v21 = (v14 & (v14 - 1)) != 0;
    if (v14 < 3) {
      BOOL v21 = 1;
    }
    unint64_t v22 = v21 | (2 * v14);
    unint64_t v23 = vcvtps_u32_f32(v20 / v62);
    if (v22 <= v23) {
      int8x8_t prime = (int8x8_t)v23;
    }
    else {
      int8x8_t prime = (int8x8_t)v22;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v14 = (unint64_t)__p[1];
    }
    if (*(void *)&prime > v14) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v14)
    {
      unint64_t v31 = vcvtps_u32_f32((float)*((unint64_t *)&v61 + 1) / v62);
      if (v14 < 3 || (uint8x8_t v32 = (uint8x8_t)vcnt_s8((int8x8_t)v14), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        unint64_t v31 = std::__next_prime(v31);
      }
      else
      {
        uint64_t v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2) {
          unint64_t v31 = v33;
        }
      }
      if (*(void *)&prime <= v31) {
        int8x8_t prime = (int8x8_t)v31;
      }
      if (*(void *)&prime >= v14)
      {
        unint64_t v14 = (unint64_t)__p[1];
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v25 = operator new(8 * *(void *)&prime);
          int v26 = __p[0];
          __p[0] = v25;
          if (v26) {
            operator delete(v26);
          }
          uint64_t v27 = 0;
          __p[1] = (void *)prime;
          do
            *((void *)__p[0] + v27++) = 0;
          while (*(void *)&prime != v27);
          uint64_t v28 = (void **)v61;
          if ((void)v61)
          {
            unint64_t v29 = *(void *)(v61 + 8);
            uint8x8_t v30 = (uint8x8_t)vcnt_s8(prime);
            v30.i16[0] = vaddlv_u8(v30);
            if (v30.u32[0] > 1uLL)
            {
              if (v29 >= *(void *)&prime) {
                v29 %= *(void *)&prime;
              }
            }
            else
            {
              v29 &= *(void *)&prime - 1;
            }
            *((void *)__p[0] + v29) = &v61;
            for (j = *v28; j; unint64_t v29 = v35)
            {
              unint64_t v35 = j[1];
              if (v30.u32[0] > 1uLL)
              {
                if (v35 >= *(void *)&prime) {
                  v35 %= *(void *)&prime;
                }
              }
              else
              {
                v35 &= *(void *)&prime - 1;
              }
              if (v35 != v29)
              {
                if (!*((void *)__p[0] + v35))
                {
                  *((void *)__p[0] + v35) = v28;
                  goto LABEL_55;
                }
                *uint64_t v28 = (void *)*j;
                void *j = **((void **)__p[0] + v35);
                **((void **)__p[0] + v35) = j;
                j = v28;
              }
              unint64_t v35 = v29;
LABEL_55:
              uint64_t v28 = (void **)j;
              j = (void *)*j;
            }
          }
          unint64_t v14 = (unint64_t)prime;
          goto LABEL_59;
        }
        unsigned int v39 = __p[0];
        __p[0] = 0;
        if (v39) {
          operator delete(v39);
        }
        unint64_t v14 = 0;
        __p[1] = 0;
      }
    }
LABEL_59:
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14) {
        unint64_t v3 = v13 % v14;
      }
      else {
        unint64_t v3 = v13;
      }
    }
    else
    {
      unint64_t v3 = (v14 - 1) & v13;
    }
    goto LABEL_64;
  }
  if (v58)
  {
    long long v59 = v58;
    operator delete(v58);
  }
  siri::ontology::UsoGraph::getEdges((uint64_t *)&v58, this);
  if (v58 != v59)
  {
    char v40 = *v58;
    char v41 = __p[0];
    uint64_t v42 = __p[1];
    unint64_t v43 = std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::find<unsigned long long>((uint64_t)__p[0], (unint64_t)__p[1], **v58);
    if (v43)
    {
      uint64_t v44 = v43;
      BOOL v45 = std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::find<unsigned long long>((uint64_t)v41, (unint64_t)v42, v40[1]);
      if (v45)
      {
        char v72 = &unk_1F232CBC8;
        LODWORD(v75) = 0;
        uint64_t v73 = 0;
        unint64_t v74 = 0;
        uint64_t v46 = v44[3];
        LOBYTE(v75) = 1;
        uint64_t v47 = v45[3];
        LOBYTE(v75) = 3;
        unint64_t v74 = __PAIR64__(v47, v46);
        sirinluexternal::UsoEdge::makeLabel((uint64_t)&v72);
        int v48 = *((_DWORD *)v40 + 15);
        uint64_t v49 = v73;
        int v50 = *((_DWORD *)v40 + 4);
        *(unsigned char *)(v73 + 24) |= 3u;
        *(_DWORD *)(v49 + 16) = v50;
        *(_DWORD *)(v49 + 20) = v48;
        if (!v48)
        {
          sirinluexternal::UsoEdgeLabel::makeBaseEdgeLabel(v49);
          uint64_t v51 = *(std::string **)(*(void *)(v73 + 8) + 8);
          if (!v51) {
            operator new();
          }
          std::string::operator=(v51, (const std::string *)(v40 + 4));
        }
        operator new();
      }
      std::string::basic_string[abi:ne180100]<0>(&v52, "UsoGraphProtoWriterException");
      siri::ontology::throwException<siri::ontology::UsoGraphProtoWriterException,char const*,int,char const*,char const*>((uint64_t)&v52, 373, "Unknown toNode edge");
    }
    std::string::basic_string[abi:ne180100]<0>(&v52, "UsoGraphProtoWriterException");
    siri::ontology::throwException<siri::ontology::UsoGraphProtoWriterException,char const*,int,char const*,char const*>((uint64_t)&v52, 369, "Unknown fromNode edge");
  }
  if (v58)
  {
    long long v59 = v58;
    operator delete(v58);
  }
  sirinluexternal::UsoGraph::operator=(a2, (const sirinluexternal::UsoGraph *)&v63);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::~__hash_table((uint64_t)__p);
  sirinluexternal::UsoGraph::~UsoGraph((sirinluexternal::UsoGraph *)&v63);
}

void sub_1C8B39574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  size_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::find<unsigned long long>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (!a2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a3;
    if (a3 >= a2) {
      unint64_t v4 = a3 % a2;
    }
  }
  else
  {
    unint64_t v4 = (a2 - 1) & a3;
  }
  size_t v5 = *(void **)(a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  uint64_t result = (void *)*v5;
  if (*v5)
  {
    do
    {
      unint64_t v7 = result[1];
      if (v7 == a3)
      {
        if (result[2] == a3) {
          return result;
        }
      }
      else
      {
        if (v3.u32[0] > 1uLL)
        {
          if (v7 >= a2) {
            v7 %= a2;
          }
        }
        else
        {
          v7 &= a2 - 1;
        }
        if (v7 != v4) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void siri::ontology::throwException<siri::ontology::UsoGraphProtoWriterException,char const*,int,char const*,char const*>(uint64_t a1, uint64_t a2, char *a3)
{
  exception = __cxa_allocate_exception(0x70uLL);
  std::string::basic_string[abi:ne180100]<0>(v7, "/Library/Caches/com.apple.xbs/Sources/SiriNLUTypes/serializers/SiriOntology/cpp/UsoGraphProtoWriter.cpp");
  std::string::basic_string[abi:ne180100]<0>(v6, "toProtobuf");
  std::string::basic_string[abi:ne180100]<0>(v5, a3);
  siri::ontology::OntologyBaseException::OntologyBaseException();
  void *exception = &unk_1F232CC30;
}

void sub_1C8B39830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v28 & 1) == 0) {
LABEL_10:
    }
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v27);
  goto LABEL_10;
}

void siri::ontology::UsoGraphProtoWriter::toProtobuf()
{
}

void sub_1C8B39944(_Unwind_Exception *a1)
{
  void *v1 = 0;
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  _Unwind_Resume(a1);
}

void siri::ontology::UsoGraphProtoWriter::toProtobuf(siri::ontology::UsoGraphProtoWriter *this, const siri::ontology::UsoGraph *a2)
{
}

void sub_1C8B39A14(_Unwind_Exception *a1)
{
  void *v1 = 0;
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  _Unwind_Resume(a1);
}

void sub_1C8B3A130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C8B3A5F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100](&a10);

  std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100](&a11);
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  uint64_t v18 = a14;
  a14 = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }

  _Unwind_Resume(a1);
}

uint64_t sirinluexternalnlu_router::NLParseResponse::formatText(sirinluexternalnlu_router::NLParseResponse *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  size_t v5 = (uint64_t *)*((void *)this + 1);
  uint64_t v6 = (uint64_t *)*((void *)this + 2);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "user_parses");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluexternalnlu_router::NLParseResponse::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v2 = *(const PB::Base ***)(this + 8);
  for (uint64_t i = *(const PB::Base ***)(this + 16); v2 != i; this = PB::Writer::writeSubmessage(a2, v5))
    size_t v5 = *v2++;
  return this;
}

uint64_t sirinluexternalnlu_router::NLParseResponse::readFrom(sirinluexternalnlu_router::NLParseResponse *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        PB::PtrVector<sirinluexternal::UserParse>::emplace_back<>();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluexternalnlu_router::NLParseResponse::~NLParseResponse(sirinluexternalnlu_router::NLParseResponse *this)
{
  *(void *)this = &unk_1F232CC58;
  unint64_t v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
  JUMPOUT(0x1CB772580);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_1F232CC58;
  unint64_t v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_1F232CC58;
  unint64_t v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
}

void *sirinluexternalnlu_router::NLParseResponse::NLParseResponse(void *this)
{
  *this = &unk_1F232CC58;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = &unk_1F232CC58;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

void *sirinluexternalnlu_router::NLParseResponse::NLParseResponse(void *this, const sirinluexternalnlu_router::NLParseResponse *a2)
{
  this[1] = 0;
  *this = &unk_1F232CC58;
  this[2] = 0;
  this[3] = 0;
  if (*((void *)a2 + 1) != *((void *)a2 + 2)) {
    PB::PtrVector<sirinluexternal::UserParse>::emplace_back<sirinluexternal::UserParse const&>();
  }
  return this;
}

uint64_t sirinluexternalnlu_router::NLParseResponse::operator=(uint64_t a1, const sirinluexternalnlu_router::NLParseResponse *a2)
{
  if ((const sirinluexternalnlu_router::NLParseResponse *)a1 != a2)
  {
    sirinluexternalnlu_router::NLParseResponse::NLParseResponse(&v6, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v3;
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v8;
    uint64_t v8 = v4;
    uint64_t v6 = &unk_1F232CC58;
    unsigned int v9 = (void **)&v7;
    std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v9);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

void *sirinluexternalnlu_router::swap(void *this, sirinluexternalnlu_router::NLParseResponse *a2, sirinluexternalnlu_router::NLParseResponse *a3)
{
  uint64_t v3 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  uint64_t v4 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  return this;
}

uint64_t sirinluexternalnlu_router::NLParseResponse::NLParseResponse(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F232CC58;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate((void **)(a1 + 8));
  *uint64_t v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

{
  _OWORD *v4;

  *(void *)a1 = &unk_1F232CC58;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate((void **)(a1 + 8));
  *uint64_t v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

uint64_t sirinluexternalnlu_router::NLParseResponse::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v9 = &unk_1F232CC58;
    long long v10 = 0uLL;
    uint64_t v11 = 0;
    std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate((void **)&v10);
    uint64_t v4 = *(void *)(a2 + 24);
    long long v5 = *(_OWORD *)(a2 + 8);
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    long long v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v5;
    long long v10 = v6;
    uint64_t v7 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v4;
    uint64_t v11 = v7;
    char v12 = (void **)&v10;
    unsigned int v9 = &unk_1F232CC58;
    std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v12);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

BOOL sirinluexternalnlu_router::NLParseResponse::operator==(uint64_t a1, uint64_t a2)
{
  return PB::PtrVector<sirinluexternal::UserParse>::operator==((uint64_t *)(a1 + 8), *(uint64_t **)(a2 + 8), *(void *)(a2 + 16));
}

uint64_t sirinluexternalnlu_router::NLParseResponse::hash_value(sirinluexternalnlu_router::NLParseResponse *this)
{
  uint64_t v1 = (sirinluexternal::UserParse **)*((void *)this + 1);
  unint64_t v2 = (sirinluexternal::UserParse **)*((void *)this + 2);
  if (v1 == v2) {
    return 0;
  }
  uint64_t v3 = 0;
  do
  {
    uint64_t v4 = *v1++;
    v3 ^= sirinluexternal::UserParse::hash_value(v4);
  }
  while (v1 != v2);
  return v3;
}

uint64_t sirinluexternalnlu_router::App::formatText(sirinluexternalnlu_router::App *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((void *)this + 1)) {
    PB::TextFormatter::format();
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluexternalnlu_router::App::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(void *)(this + 8)) {
    return PB::Writer::write();
  }
  return this;
}

uint64_t sirinluexternalnlu_router::App::readFrom(sirinluexternalnlu_router::App *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluexternalnlu_router::App::~App(sirinluexternalnlu_router::App *this)
{
  sirinluexternalnlu_router::App::~App(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t vars8;

  unint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1F232CCA8;
  *((void *)this + 1) = 0;
  if (v2) {
    std::default_delete<std::string>::operator()[abi:ne180100](v2);
  }
  PB::Base::~Base(this);
}

void *sirinluexternalnlu_router::App::App(void *this)
{
  *this = &unk_1F232CCA8;
  this[1] = 0;
  return this;
}

{
  *this = &unk_1F232CCA8;
  this[1] = 0;
  return this;
}

void *sirinluexternalnlu_router::App::App(void *this, const sirinluexternalnlu_router::App *a2)
{
  *this = &unk_1F232CCA8;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const sirinluexternalnlu_router::App *sirinluexternalnlu_router::App::operator=(const sirinluexternalnlu_router::App *a1, const sirinluexternalnlu_router::App *a2)
{
  if (a1 != a2)
  {
    sirinluexternalnlu_router::App::App(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    sirinluexternalnlu_router::App::~App((sirinluexternalnlu_router::App *)&v5);
  }
  return a1;
}

uint64_t sirinluexternalnlu_router::swap(uint64_t this, sirinluexternalnlu_router::App *a2, sirinluexternalnlu_router::App *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *sirinluexternalnlu_router::App::App(void *a1, uint64_t a2)
{
  *a1 = &unk_1F232CCA8;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    std::default_delete<std::string>::operator()[abi:ne180100](v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_1F232CCA8;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    std::default_delete<std::string>::operator()[abi:ne180100](v4);
  }
  return a1;
}

uint64_t sirinluexternalnlu_router::App::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = &unk_1F232CCA8;
    v6[1] = v4;
    sirinluexternalnlu_router::App::~App((sirinluexternalnlu_router::App *)v6);
  }
  return a1;
}

uint64_t sirinluexternalnlu_router::App::operator==(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned __int8 **)(a1 + 8);
  uint64_t v3 = *(unsigned __int8 ***)(a2 + 8);
  uint64_t result = v3 == 0;
  if (!v2) {
    return result;
  }
  if (!v3) {
    return 0;
  }
  uint64_t v5 = v2[23];
  if ((v5 & 0x80u) == 0) {
    uint64_t v6 = (unsigned __int8 *)v2[23];
  }
  else {
    uint64_t v6 = (unsigned __int8 *)*((void *)v2 + 1);
  }
  uint64_t v7 = (unsigned __int8 *)*((unsigned __int8 *)v3 + 23);
  int v8 = (char)v7;
  if ((char)v7 < 0) {
    uint64_t v7 = v3[1];
  }
  if (v6 != v7) {
    return 0;
  }
  if (v8 >= 0) {
    unsigned int v9 = *(unsigned __int8 **)(a2 + 8);
  }
  else {
    unsigned int v9 = *v3;
  }
  if ((v5 & 0x80) != 0) {
    return !memcmp(*(const void **)v2, v9, *((void *)v2 + 1));
  }
  if (!v2[23]) {
    return 1;
  }
  uint64_t v10 = v5 - 1;
  do
  {
    int v12 = *v2++;
    int v11 = v12;
    int v14 = *v9++;
    int v13 = v14;
    BOOL v16 = v10-- != 0;
    uint64_t result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

unint64_t sirinluexternalnlu_router::App::hash_value(sirinluexternalnlu_router::App *this)
{
  unint64_t result = *((void *)this + 1);
  if (result) {
    return std::__string_hash<char>::operator()[abi:ne180100](result);
  }
  return result;
}

uint64_t sirinluexternalnlu_router::RetrievedContext::formatText(sirinluexternalnlu_router::RetrievedContext *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 20)) {
    PB::TextFormatter::format(a2, "type");
  }
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "typed_value");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluexternalnlu_router::RetrievedContext::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if (*(unsigned char *)(this + 20)) {
    this = PB::Writer::writeVarInt(a2);
  }
  uint64_t v4 = *(const PB::Base **)(v3 + 8);
  if (v4)
  {
    return PB::Writer::writeSubmessage(a2, v4);
  }
  return this;
}

uint64_t sirinluexternalnlu_router::RetrievedContext::readFrom(sirinluexternalnlu_router::RetrievedContext *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_30;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 5) {
        operator new();
      }
      if ((v11 >> 3) == 3)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v19 = *((void *)a2 + 1);
        unint64_t v20 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v20)
        {
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v24 = 0;
          if (v20 <= v19) {
            unint64_t v20 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v20 == v19)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_43;
            }
            unint64_t v30 = v19 + 1;
            char v31 = *(unsigned char *)(v21 + v19);
            *((void *)a2 + 1) = v30;
            v24 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            unint64_t v19 = v30;
            BOOL v14 = v29++ > 8;
            if (v14)
            {
LABEL_39:
              LODWORD(v24) = 0;
              goto LABEL_43;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
        }
        else
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            unint64_t v25 = v19 + 1;
            *((void *)a2 + 1) = v19 + 1;
            char v26 = *(unsigned char *)(v21 + v19);
            v24 |= (unint64_t)(v26 & 0x7F) << v22;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            unint64_t v19 = v25;
            BOOL v14 = v23++ > 8;
            if (v14) {
              goto LABEL_39;
            }
          }
        }
LABEL_43:
        *((_DWORD *)this + 4) = v24;
      }
      else
      {
LABEL_30:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_30;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluexternalnlu_router::RetrievedContext::~RetrievedContext(sirinluexternalnlu_router::RetrievedContext *this)
{
  sirinluexternalnlu_router::RetrievedContext::~RetrievedContext(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t vars8;

  unint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1F232CCF8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

void *sirinluexternalnlu_router::RetrievedContext::RetrievedContext(void *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1F232CCF8;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1F232CCF8;
  return this;
}

uint64_t sirinluexternalnlu_router::RetrievedContext::RetrievedContext(uint64_t this, const sirinluexternalnlu_router::RetrievedContext *a2)
{
  *(void *)this = &unk_1F232CCF8;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  if (*((unsigned char *)a2 + 20))
  {
    int v2 = *((_DWORD *)a2 + 4);
    *(unsigned char *)(this + 20) = 1;
    *(_DWORD *)(this + 16) = v2;
  }
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const sirinluexternalnlu_router::RetrievedContext *sirinluexternalnlu_router::RetrievedContext::operator=(const sirinluexternalnlu_router::RetrievedContext *a1, const sirinluexternalnlu_router::RetrievedContext *a2)
{
  if (a1 != a2)
  {
    sirinluexternalnlu_router::RetrievedContext::RetrievedContext((uint64_t)v6, a2);
    uint64_t v3 = *((void *)a1 + 2);
    *((void *)a1 + 2) = v8;
    uint64_t v8 = v3;
    uint64_t v4 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v7;
    uint64_t v7 = v4;
    sirinluexternalnlu_router::RetrievedContext::~RetrievedContext((sirinluexternalnlu_router::RetrievedContext *)v6);
  }
  return a1;
}

uint64_t sirinluexternalnlu_router::swap(uint64_t this, sirinluexternalnlu_router::RetrievedContext *a2, sirinluexternalnlu_router::RetrievedContext *a3)
{
  int v3 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  int v4 = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  uint64_t v5 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  return this;
}

uint64_t sirinluexternalnlu_router::RetrievedContext::RetrievedContext(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F232CCF8;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t sirinluexternalnlu_router::RetrievedContext::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sirinluexternalnlu_router::RetrievedContext::RetrievedContext((uint64_t)v6, a2);
    uint64_t v3 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v8;
    uint64_t v8 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v4;
    sirinluexternalnlu_router::RetrievedContext::~RetrievedContext((sirinluexternalnlu_router::RetrievedContext *)v6);
  }
  return a1;
}

uint64_t sirinluexternalnlu_router::RetrievedContext::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 20))
  {
    if ((*(unsigned char *)(a2 + 20) & 1) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 20))
  {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t result = (v2 | v3) == 0;
  if (v2) {
    BOOL v5 = v3 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    return sirinluexternalnlu_router::TypedValue::operator==(v2, v3);
  }
  return result;
}

unint64_t sirinluexternalnlu_router::RetrievedContext::hash_value(sirinluexternalnlu_router::RetrievedContext *this)
{
  if (*((unsigned char *)this + 20)) {
    uint64_t v1 = *((int *)this + 4);
  }
  else {
    uint64_t v1 = 0;
  }
  uint64_t v2 = *((void *)this + 1);
  if (v2 && (uint64_t v3 = *(void *)(v2 + 8)) != 0 && (v4 = *(void *)(v3 + 8)) != 0)
  {
    unint64_t v5 = *(void *)(v4 + 8);
    if (v5) {
      unint64_t v5 = std::__string_hash<char>::operator()[abi:ne180100](v5);
    }
  }
  else
  {
    unint64_t v5 = 0;
  }
  return v5 ^ v1;
}

uint64_t sirinluexternalnlu_router::RetrievedContext::makeTypedValue(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternalnlu_router::PommesResponse::formatText(sirinluexternalnlu_router::PommesResponse *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((void *)this + 1)) {
    PB::TextFormatter::format();
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluexternalnlu_router::PommesResponse::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(void *)(this + 8)) {
    return PB::Writer::write();
  }
  return this;
}

uint64_t sirinluexternalnlu_router::PommesResponse::readFrom(sirinluexternalnlu_router::PommesResponse *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 4) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluexternalnlu_router::PommesResponse::~PommesResponse(sirinluexternalnlu_router::PommesResponse *this)
{
  sirinluexternalnlu_router::PommesResponse::~PommesResponse(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t vars8;

  unint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1F232CD48;
  *((void *)this + 1) = 0;
  if (v2) {
    std::default_delete<std::string>::operator()[abi:ne180100](v2);
  }
  PB::Base::~Base(this);
}

void *sirinluexternalnlu_router::PommesResponse::PommesResponse(void *this)
{
  *this = &unk_1F232CD48;
  this[1] = 0;
  return this;
}

{
  *this = &unk_1F232CD48;
  this[1] = 0;
  return this;
}

void *sirinluexternalnlu_router::PommesResponse::PommesResponse(void *this, const sirinluexternalnlu_router::PommesResponse *a2)
{
  *this = &unk_1F232CD48;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const sirinluexternalnlu_router::PommesResponse *sirinluexternalnlu_router::PommesResponse::operator=(const sirinluexternalnlu_router::PommesResponse *a1, const sirinluexternalnlu_router::PommesResponse *a2)
{
  if (a1 != a2)
  {
    sirinluexternalnlu_router::PommesResponse::PommesResponse(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    sirinluexternalnlu_router::PommesResponse::~PommesResponse((sirinluexternalnlu_router::PommesResponse *)&v5);
  }
  return a1;
}

uint64_t sirinluexternalnlu_router::swap(uint64_t this, sirinluexternalnlu_router::PommesResponse *a2, sirinluexternalnlu_router::PommesResponse *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *sirinluexternalnlu_router::PommesResponse::PommesResponse(void *a1, uint64_t a2)
{
  *a1 = &unk_1F232CD48;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    std::default_delete<std::string>::operator()[abi:ne180100](v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_1F232CD48;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    std::default_delete<std::string>::operator()[abi:ne180100](v4);
  }
  return a1;
}

uint64_t sirinluexternalnlu_router::PommesResponse::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = &unk_1F232CD48;
    v6[1] = v4;
    sirinluexternalnlu_router::PommesResponse::~PommesResponse((sirinluexternalnlu_router::PommesResponse *)v6);
  }
  return a1;
}

uint64_t sirinluexternalnlu_router::PommesResponse::operator==(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned __int8 **)(a1 + 8);
  uint64_t v3 = *(unsigned __int8 ***)(a2 + 8);
  uint64_t result = v3 == 0;
  if (!v2) {
    return result;
  }
  if (!v3) {
    return 0;
  }
  uint64_t v5 = v2[23];
  if ((v5 & 0x80u) == 0) {
    uint64_t v6 = (unsigned __int8 *)v2[23];
  }
  else {
    uint64_t v6 = (unsigned __int8 *)*((void *)v2 + 1);
  }
  uint64_t v7 = (unsigned __int8 *)*((unsigned __int8 *)v3 + 23);
  int v8 = (char)v7;
  if ((char)v7 < 0) {
    uint64_t v7 = v3[1];
  }
  if (v6 != v7) {
    return 0;
  }
  if (v8 >= 0) {
    unsigned int v9 = *(unsigned __int8 **)(a2 + 8);
  }
  else {
    unsigned int v9 = *v3;
  }
  if ((v5 & 0x80) != 0) {
    return !memcmp(*(const void **)v2, v9, *((void *)v2 + 1));
  }
  if (!v2[23]) {
    return 1;
  }
  uint64_t v10 = v5 - 1;
  do
  {
    int v12 = *v2++;
    int v11 = v12;
    int v14 = *v9++;
    int v13 = v14;
    BOOL v16 = v10-- != 0;
    uint64_t result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

unint64_t sirinluexternalnlu_router::PommesResponse::hash_value(sirinluexternalnlu_router::PommesResponse *this)
{
  unint64_t result = *((void *)this + 1);
  if (result) {
    return std::__string_hash<char>::operator()[abi:ne180100](result);
  }
  return result;
}

uint64_t sirinluexternalnlu_router::TypedValue::formatText(sirinluexternalnlu_router::TypedValue *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "primitive");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluexternalnlu_router::TypedValue::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2);
  }
  return this;
}

uint64_t sirinluexternalnlu_router::TypedValue::readFrom(sirinluexternalnlu_router::TypedValue *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluexternalnlu_router::TypedValue::~TypedValue(sirinluexternalnlu_router::TypedValue *this)
{
  sirinluexternalnlu_router::TypedValue::~TypedValue(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t vars8;

  unint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1F232CD98;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

void *sirinluexternalnlu_router::TypedValue::TypedValue(void *this)
{
  *this = &unk_1F232CD98;
  this[1] = 0;
  return this;
}

{
  *this = &unk_1F232CD98;
  this[1] = 0;
  return this;
}

void *sirinluexternalnlu_router::TypedValue::TypedValue(void *this, const sirinluexternalnlu_router::TypedValue *a2)
{
  *this = &unk_1F232CD98;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const sirinluexternalnlu_router::TypedValue *sirinluexternalnlu_router::TypedValue::operator=(const sirinluexternalnlu_router::TypedValue *a1, const sirinluexternalnlu_router::TypedValue *a2)
{
  if (a1 != a2)
  {
    sirinluexternalnlu_router::TypedValue::TypedValue(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    sirinluexternalnlu_router::TypedValue::~TypedValue((sirinluexternalnlu_router::TypedValue *)&v5);
  }
  return a1;
}

uint64_t sirinluexternalnlu_router::swap(uint64_t this, sirinluexternalnlu_router::TypedValue *a2, sirinluexternalnlu_router::TypedValue *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *sirinluexternalnlu_router::TypedValue::TypedValue(void *a1, uint64_t a2)
{
  *a1 = &unk_1F232CD98;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_1F232CD98;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t sirinluexternalnlu_router::TypedValue::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = &unk_1F232CD98;
    v6[1] = v4;
    sirinluexternalnlu_router::TypedValue::~TypedValue((sirinluexternalnlu_router::TypedValue *)v6);
  }
  return a1;
}

uint64_t sirinluexternalnlu_router::TypedValue::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    return (v2 | v3) == 0;
  }
  else {
    return sirinluexternalnlu_router::PrimitiveValue::operator==(v2, v3);
  }
}

unint64_t sirinluexternalnlu_router::TypedValue::hash_value(sirinluexternalnlu_router::TypedValue *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (v1 && (uint64_t v2 = *(void *)(v1 + 8)) != 0 && (v3 = *(void *)(v2 + 8)) != 0) {
    return std::__string_hash<char>::operator()[abi:ne180100](v3);
  }
  else {
    return 0;
  }
}

uint64_t sirinluexternalnlu_router::TypedValue::makePrimitive(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternalnlu_router::QueryDecorationOutput::formatText(sirinluexternalnlu_router::QueryDecorationOutput *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  for (uint64_t i = *((void *)this + 2); v5 != i; v5 += 24)
    PB::TextFormatter::format();
  uint64_t v7 = *((void *)this + 4);
  for (uint64_t j = *((void *)this + 5); v7 != j; v7 += 24)
    PB::TextFormatter::format();
  uint64_t v9 = *((void *)this + 7);
  for (uint64_t k = *((void *)this + 8); v9 != k; v9 += 24)
    PB::TextFormatter::format();
  uint64_t v11 = *((void *)this + 10);
  for (uint64_t m = *((void *)this + 11); v11 != m; v11 += 24)
    PB::TextFormatter::format();
  BOOL v13 = (uint64_t *)*((void *)this + 13);
  char v14 = (uint64_t *)*((void *)this + 14);
  while (v13 != v14)
  {
    uint64_t v15 = *v13++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v15 + 32))(v15, a2, "required_context");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluexternalnlu_router::QueryDecorationOutput::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = (void *)this;
  BOOL v4 = *(const PB::Base ***)(this + 104);
  uint64_t v5 = *(const PB::Base ***)(this + 112);
  while (v4 != v5)
  {
    uint64_t v6 = *v4++;
    this = PB::Writer::writeSubmessage(a2, v6);
  }
  uint64_t v7 = v3[10];
  uint64_t v8 = v3[11];
  while (v7 != v8)
  {
    this = PB::Writer::write();
    v7 += 24;
  }
  uint64_t v9 = v3[4];
  uint64_t v10 = v3[5];
  while (v9 != v10)
  {
    this = PB::Writer::write();
    v9 += 24;
  }
  uint64_t v11 = v3[7];
  uint64_t v12 = v3[8];
  while (v11 != v12)
  {
    this = PB::Writer::write();
    v11 += 24;
  }
  uint64_t v14 = v3[1];
  uint64_t v13 = v3[2];
  while (v14 != v13)
  {
    this = PB::Writer::write();
    v14 += 24;
  }
  return this;
}

uint64_t sirinluexternalnlu_router::QueryDecorationOutput::readFrom(sirinluexternalnlu_router::QueryDecorationOutput *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  uint64_t v8 = (std::vector<std::string> *)((char *)this + 8);
  uint64_t v9 = (std::allocator<std::string> *)((char *)this + 24);
  uint64_t v10 = (std::vector<std::string> *)((char *)this + 56);
  uint64_t v11 = (std::allocator<std::string> *)((char *)this + 72);
  uint64_t v12 = (std::vector<std::string> *)((char *)this + 32);
  uint64_t v13 = (std::allocator<std::string> *)((char *)this + 48);
  uint64_t v14 = (std::vector<std::string> *)((char *)this + 80);
  long long v63 = (std::allocator<std::string> *)((char *)this + 96);
  while (1)
  {
    uint64_t v15 = *(void *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      char v16 = 0;
      unsigned int v17 = 0;
      unint64_t v18 = 0;
      while (1)
      {
        unint64_t v19 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v20 = *(unsigned char *)(v15 + v2);
        v18 |= (unint64_t)(v20 & 0x7F) << v16;
        if ((v20 & 0x80) == 0) {
          break;
        }
        v16 += 7;
        unint64_t v2 = v19;
        BOOL v21 = v17++ > 8;
        if (v21) {
          goto LABEL_20;
        }
      }
LABEL_22:
      if ((v18 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v18 >> 3))
      {
        case 3u:
          operator new();
        case 5u:
          char v31 = (char *)*((void *)this + 11);
          unint64_t v30 = *((void *)this + 12);
          if ((unint64_t)v31 >= v30)
          {
            unint64_t v44 = 0xAAAAAAAAAAAAAAABLL * ((v31 - (char *)v14->__begin_) >> 3);
            unint64_t v45 = v44 + 1;
            if (v44 + 1 > 0xAAAAAAAAAAAAAAALL) {
              goto LABEL_84;
            }
            unint64_t v46 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - (unint64_t)v14->__begin_) >> 3);
            if (2 * v46 > v45) {
              unint64_t v45 = 2 * v46;
            }
            if (v46 >= 0x555555555555555) {
              unint64_t v47 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v47 = v45;
            }
            __v.__end_cap_.__value_ = v63;
            if (v47) {
              unint64_t v47 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v47);
            }
            else {
              uint64_t v48 = 0;
            }
            long long v60 = (std::string *)(v47 + 24 * v44);
            __v.__first_ = (std::__split_buffer<std::string>::pointer)v47;
            __v.__begin_ = v60;
            __v.__end_cap_.__value_ = (std::string *)(v47 + 24 * v48);
            v60->__r_.__value_.__r.__words[0] = 0;
            v60->__r_.__value_.__l.__size_ = 0;
            v60->__r_.__value_.__r.__words[2] = 0;
            __v.__end_ = v60 + 1;
            std::vector<std::string>::__swap_out_circular_buffer(v14, &__v);
            uint8x8_t v32 = (void *)*((void *)this + 11);
            std::__split_buffer<std::string>::~__split_buffer(&__v);
          }
          else
          {
            *(void *)char v31 = 0;
            *((void *)v31 + 1) = 0;
            *((void *)v31 + 2) = 0;
            uint8x8_t v32 = v31 + 24;
            *((void *)this + 11) = v31 + 24;
          }
          *((void *)this + 11) = v32;
          break;
        case 6u:
          char v28 = (char *)*((void *)this + 5);
          unint64_t v27 = *((void *)this + 6);
          if ((unint64_t)v28 >= v27)
          {
            unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * ((v28 - (char *)v12->__begin_) >> 3);
            unint64_t v40 = v39 + 1;
            if (v39 + 1 > 0xAAAAAAAAAAAAAAALL) {
              goto LABEL_84;
            }
            unint64_t v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - (unint64_t)v12->__begin_) >> 3);
            if (2 * v41 > v40) {
              unint64_t v40 = 2 * v41;
            }
            if (v41 >= 0x555555555555555) {
              unint64_t v42 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v42 = v40;
            }
            __v.__end_cap_.__value_ = v13;
            if (v42) {
              unint64_t v42 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v42);
            }
            else {
              uint64_t v43 = 0;
            }
            long long v59 = (std::string *)(v42 + 24 * v39);
            __v.__first_ = (std::__split_buffer<std::string>::pointer)v42;
            __v.__begin_ = v59;
            __v.__end_cap_.__value_ = (std::string *)(v42 + 24 * v43);
            v59->__r_.__value_.__r.__words[0] = 0;
            v59->__r_.__value_.__l.__size_ = 0;
            v59->__r_.__value_.__r.__words[2] = 0;
            __v.__end_ = v59 + 1;
            std::vector<std::string>::__swap_out_circular_buffer(v12, &__v);
            unsigned int v29 = (void *)*((void *)this + 5);
            std::__split_buffer<std::string>::~__split_buffer(&__v);
          }
          else
          {
            *(void *)char v28 = 0;
            *((void *)v28 + 1) = 0;
            *((void *)v28 + 2) = 0;
            unsigned int v29 = v28 + 24;
            *((void *)this + 5) = v28 + 24;
          }
          *((void *)this + 5) = v29;
          break;
        case 7u:
          unsigned int v34 = (char *)*((void *)this + 8);
          unint64_t v33 = *((void *)this + 9);
          if ((unint64_t)v34 >= v33)
          {
            unint64_t v49 = 0xAAAAAAAAAAAAAAABLL * ((v34 - (char *)v10->__begin_) >> 3);
            unint64_t v50 = v49 + 1;
            if (v49 + 1 > 0xAAAAAAAAAAAAAAALL) {
              goto LABEL_84;
            }
            unint64_t v51 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - (unint64_t)v10->__begin_) >> 3);
            if (2 * v51 > v50) {
              unint64_t v50 = 2 * v51;
            }
            if (v51 >= 0x555555555555555) {
              unint64_t v52 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v52 = v50;
            }
            __v.__end_cap_.__value_ = v11;
            if (v52) {
              unint64_t v52 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v52);
            }
            else {
              uint64_t v53 = 0;
            }
            long long v61 = (std::string *)(v52 + 24 * v49);
            __v.__first_ = (std::__split_buffer<std::string>::pointer)v52;
            __v.__begin_ = v61;
            __v.__end_cap_.__value_ = (std::string *)(v52 + 24 * v53);
            v61->__r_.__value_.__r.__words[0] = 0;
            v61->__r_.__value_.__l.__size_ = 0;
            v61->__r_.__value_.__r.__words[2] = 0;
            __v.__end_ = v61 + 1;
            std::vector<std::string>::__swap_out_circular_buffer(v10, &__v);
            unint64_t v35 = (void *)*((void *)this + 8);
            std::__split_buffer<std::string>::~__split_buffer(&__v);
          }
          else
          {
            *(void *)unsigned int v34 = 0;
            *((void *)v34 + 1) = 0;
            *((void *)v34 + 2) = 0;
            unint64_t v35 = v34 + 24;
            *((void *)this + 8) = v34 + 24;
          }
          *((void *)this + 8) = v35;
          break;
        case 8u:
          long long v37 = (char *)*((void *)this + 2);
          unint64_t v36 = *((void *)this + 3);
          if ((unint64_t)v37 >= v36)
          {
            unint64_t v54 = 0xAAAAAAAAAAAAAAABLL * ((v37 - (char *)v8->__begin_) >> 3);
            unint64_t v55 = v54 + 1;
            if (v54 + 1 > 0xAAAAAAAAAAAAAAALL) {
LABEL_84:
            }
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            unint64_t v56 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - (unint64_t)v8->__begin_) >> 3);
            if (2 * v56 > v55) {
              unint64_t v55 = 2 * v56;
            }
            if (v56 >= 0x555555555555555) {
              unint64_t v57 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v57 = v55;
            }
            __v.__end_cap_.__value_ = v9;
            if (v57) {
              unint64_t v57 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v57);
            }
            else {
              uint64_t v58 = 0;
            }
            float v62 = (std::string *)(v57 + 24 * v54);
            __v.__first_ = (std::__split_buffer<std::string>::pointer)v57;
            __v.__begin_ = v62;
            __v.__end_cap_.__value_ = (std::string *)(v57 + 24 * v58);
            v62->__r_.__value_.__r.__words[0] = 0;
            v62->__r_.__value_.__l.__size_ = 0;
            v62->__r_.__value_.__r.__words[2] = 0;
            __v.__end_ = v62 + 1;
            std::vector<std::string>::__swap_out_circular_buffer(v8, &__v);
            unint64_t v38 = (void *)*((void *)this + 2);
            std::__split_buffer<std::string>::~__split_buffer(&__v);
          }
          else
          {
            *(void *)long long v37 = 0;
            *((void *)v37 + 1) = 0;
            *((void *)v37 + 2) = 0;
            unint64_t v38 = v37 + 24;
            *((void *)this + 2) = v37 + 24;
          }
          *((void *)this + 2) = v38;
          break;
        default:
          goto LABEL_20;
      }
      PB::Reader::read();
      goto LABEL_78;
    }
    char v22 = 0;
    unsigned int v23 = 0;
    unint64_t v18 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    do
    {
      if (v3 == v2)
      {
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      unint64_t v24 = v2 + 1;
      char v25 = *(unsigned char *)(v15 + v2);
      *((void *)a2 + 1) = v24;
      v18 |= (unint64_t)(v25 & 0x7F) << v22;
      if ((v25 & 0x80) == 0) {
        goto LABEL_22;
      }
      v22 += 7;
      unint64_t v2 = v24;
      BOOL v21 = v23++ > 8;
    }
    while (!v21);
LABEL_20:
    uint64_t result = PB::Reader::skip(a2);
    if (!result) {
      return result;
    }
LABEL_78:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
}

void sub_1C8B3D284(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sirinluexternalnlu_router::QueryDecorationOutput::~QueryDecorationOutput(sirinluexternalnlu_router::QueryDecorationOutput *this)
{
  sirinluexternalnlu_router::QueryDecorationOutput::~QueryDecorationOutput(this);
  JUMPOUT(0x1CB772580);
}

{
  void **v2;
  void **v3;
  uint64_t vars8;

  *(void *)this = &unk_1F232CDE8;
  unint64_t v2 = (void **)((char *)this + 104);
  if (*((void *)this + 13))
  {
    std::vector<std::unique_ptr<siricommon::StringValue>>::__clear[abi:ne180100]((void *)this + 13);
    operator delete(*v2);
  }
  unint64_t v3 = (void **)((char *)this + 80);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  unint64_t v3 = (void **)((char *)this + 56);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  unint64_t v3 = (void **)((char *)this + 32);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  unint64_t v3 = (void **)((char *)this + 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  PB::Base::~Base(this);
}

double sirinluexternalnlu_router::QueryDecorationOutput::QueryDecorationOutput(sirinluexternalnlu_router::QueryDecorationOutput *this)
{
  *(void *)this = &unk_1F232CDE8;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((void *)this + 15) = 0;
  return result;
}

{
  double result;

  *(void *)this = &unk_1F232CDE8;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((void *)this + 15) = 0;
  return result;
}

sirinluexternalnlu_router::QueryDecorationOutput *sirinluexternalnlu_router::QueryDecorationOutput::QueryDecorationOutput(sirinluexternalnlu_router::QueryDecorationOutput *this, const sirinluexternalnlu_router::QueryDecorationOutput *a2)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v5 = (std::vector<std::string> *)((char *)this + 8);
  *(_OWORD *)((char *)this + 56) = 0u;
  uint64_t v6 = (std::vector<std::string> *)((char *)this + 56);
  *(void *)this = &unk_1F232CDE8;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((void *)this + 15) = 0;
  if (*((void *)a2 + 13) != *((void *)a2 + 14)) {
    operator new();
  }
  if (this != a2)
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)((char *)this + 80), *((std::string **)a2 + 10), *((long long **)a2 + 11), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 11) - *((void *)a2 + 10)) >> 3));
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)((char *)this + 32), *((std::string **)a2 + 4), *((long long **)a2 + 5), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 3));
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v6, *((std::string **)a2 + 7), *((long long **)a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 3));
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v5, *((std::string **)a2 + 1), *((long long **)a2 + 2), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3));
  }
  return this;
}

void sub_1C8B3D640(void *a1)
{
}

const sirinluexternalnlu_router::QueryDecorationOutput *sirinluexternalnlu_router::QueryDecorationOutput::operator=(const sirinluexternalnlu_router::QueryDecorationOutput *a1, const sirinluexternalnlu_router::QueryDecorationOutput *a2)
{
  if (a1 != a2)
  {
    sirinluexternalnlu_router::QueryDecorationOutput::QueryDecorationOutput((sirinluexternalnlu_router::QueryDecorationOutput *)v5, a2);
    sirinluexternalnlu_router::swap(a1, (sirinluexternalnlu_router::QueryDecorationOutput *)v5, v3);
    sirinluexternalnlu_router::QueryDecorationOutput::~QueryDecorationOutput((sirinluexternalnlu_router::QueryDecorationOutput *)v5);
  }
  return a1;
}

void *sirinluexternalnlu_router::swap(void *this, sirinluexternalnlu_router::QueryDecorationOutput *a2, sirinluexternalnlu_router::QueryDecorationOutput *a3)
{
  uint64_t v3 = this[13];
  this[13] = *((void *)a2 + 13);
  *((void *)a2 + 13) = v3;
  uint64_t v4 = this[14];
  this[14] = *((void *)a2 + 14);
  *((void *)a2 + 14) = v4;
  uint64_t v5 = this[15];
  this[15] = *((void *)a2 + 15);
  *((void *)a2 + 15) = v5;
  uint64_t v6 = this[10];
  this[10] = *((void *)a2 + 10);
  *((void *)a2 + 10) = v6;
  uint64_t v7 = this[11];
  this[11] = *((void *)a2 + 11);
  *((void *)a2 + 11) = v7;
  uint64_t v8 = this[12];
  this[12] = *((void *)a2 + 12);
  *((void *)a2 + 12) = v8;
  uint64_t v9 = this[4];
  this[4] = *((void *)a2 + 4);
  *((void *)a2 + 4) = v9;
  uint64_t v10 = this[5];
  this[5] = *((void *)a2 + 5);
  *((void *)a2 + 5) = v10;
  uint64_t v11 = this[6];
  this[6] = *((void *)a2 + 6);
  *((void *)a2 + 6) = v11;
  uint64_t v12 = this[7];
  this[7] = *((void *)a2 + 7);
  *((void *)a2 + 7) = v12;
  uint64_t v13 = this[8];
  this[8] = *((void *)a2 + 8);
  *((void *)a2 + 8) = v13;
  uint64_t v14 = this[9];
  this[9] = *((void *)a2 + 9);
  *((void *)a2 + 9) = v14;
  uint64_t v15 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v15;
  uint64_t v16 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v16;
  uint64_t v17 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v17;
  return this;
}

uint64_t sirinluexternalnlu_router::QueryDecorationOutput::QueryDecorationOutput(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F232CDE8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(void *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v4 = (std::vector<std::string> *)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v5 = (std::vector<std::string> *)(a1 + 56);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = 0;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a1 + 80));
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a1 + 32));
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  std::vector<std::string>::__vdeallocate(v5);
  *(_OWORD *)&v5->__begin_ = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  std::vector<std::string>::__vdeallocate(v4);
  *(_OWORD *)&v4->__begin_ = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

void *sirinluexternalnlu_router::QueryDecorationOutput::operator=(void *a1, uint64_t a2)
{
  if (a1 != (void *)a2)
  {
    sirinluexternalnlu_router::QueryDecorationOutput::QueryDecorationOutput((uint64_t)v5, a2);
    sirinluexternalnlu_router::swap(a1, (sirinluexternalnlu_router::QueryDecorationOutput *)v5, v3);
    sirinluexternalnlu_router::QueryDecorationOutput::~QueryDecorationOutput((sirinluexternalnlu_router::QueryDecorationOutput *)v5);
  }
  return a1;
}

uint64_t sirinluexternalnlu_router::QueryDecorationOutput::operator==(void *a1, void *a2)
{
  uint64_t v3 = (uint64_t *)a1[13];
  unint64_t v2 = (uint64_t *)a1[14];
  uint64_t v4 = (uint64_t *)a2[13];
  if ((char *)v2 - (char *)v3 != a2[14] - (void)v4) {
    return 0;
  }
  while (v3 != v2)
  {
    uint64_t result = sirinluexternalnlu_router::RetrievedContext::operator==(*v3, *v4);
    if (!result) {
      return result;
    }
    ++v3;
    ++v4;
  }
  uint64_t v8 = (unsigned __int8 *)a1[10];
  uint64_t v9 = (unsigned __int8 *)a1[11];
  uint64_t v10 = (unsigned __int8 *)a2[10];
  if (v9 - v8 != a2[11] - (void)v10) {
    return 0;
  }
  while (v8 != v9)
  {
    uint64_t result = std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(v8, v10);
    if (!result) {
      return result;
    }
    v8 += 24;
    v10 += 24;
  }
  uint64_t v11 = (unsigned __int8 *)a1[4];
  uint64_t v12 = (unsigned __int8 *)a1[5];
  uint64_t v13 = (unsigned __int8 *)a2[4];
  if (v12 - v11 != a2[5] - (void)v13) {
    return 0;
  }
  while (v11 != v12)
  {
    uint64_t result = std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(v11, v13);
    if (!result) {
      return result;
    }
    v11 += 24;
    v13 += 24;
  }
  uint64_t v14 = (unsigned __int8 *)a1[7];
  uint64_t v15 = (unsigned __int8 *)a1[8];
  uint64_t v16 = (unsigned __int8 *)a2[7];
  if (v15 - v14 != a2[8] - (void)v16) {
    return 0;
  }
  while (v14 != v15)
  {
    uint64_t result = std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(v14, v16);
    if (!result) {
      return result;
    }
    v14 += 24;
    v16 += 24;
  }
  unint64_t v19 = a1 + 1;
  uint64_t v17 = (unsigned __int8 *)a1[1];
  unint64_t v18 = (unsigned __int8 *)v19[1];
  BOOL v21 = a2 + 1;
  char v20 = (unsigned __int8 *)a2[1];
  if (v18 - v17 != v21[1] - (void)v20) {
    return 0;
  }
  if (v17 == v18) {
    return 1;
  }
  do
  {
    uint64_t result = std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(v17, v20);
    if (!result) {
      break;
    }
    v17 += 24;
    v20 += 24;
  }
  while (v17 != v18);
  return result;
}

uint64_t sirinluexternalnlu_router::QueryDecorationOutput::hash_value(sirinluexternalnlu_router::QueryDecorationOutput *this)
{
  unint64_t v2 = (sirinluexternalnlu_router::RetrievedContext **)*((void *)this + 13);
  uint64_t v3 = (sirinluexternalnlu_router::RetrievedContext **)*((void *)this + 14);
  if (v2 == v3)
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = *v2++;
      v4 ^= sirinluexternalnlu_router::RetrievedContext::hash_value(v5);
    }
    while (v2 != v3);
  }
  uint64_t v6 = *((void *)this + 10);
  uint64_t v7 = *((void *)this + 11);
  if (v6 == v7)
  {
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = 0;
    do
    {
      v8 ^= std::__string_hash<char>::operator()[abi:ne180100](v6);
      v6 += 24;
    }
    while (v6 != v7);
  }
  uint64_t v9 = *((void *)this + 4);
  uint64_t v10 = *((void *)this + 5);
  if (v9 == v10)
  {
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v11 = 0;
    do
    {
      v11 ^= std::__string_hash<char>::operator()[abi:ne180100](v9);
      v9 += 24;
    }
    while (v9 != v10);
  }
  uint64_t v12 = *((void *)this + 7);
  uint64_t v13 = *((void *)this + 8);
  if (v12 == v13)
  {
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t v14 = 0;
    do
    {
      v14 ^= std::__string_hash<char>::operator()[abi:ne180100](v12);
      v12 += 24;
    }
    while (v12 != v13);
  }
  uint64_t v16 = *((void *)this + 1);
  uint64_t v15 = *((void *)this + 2);
  if (v16 == v15)
  {
    uint64_t v17 = 0;
  }
  else
  {
    uint64_t v17 = 0;
    do
    {
      v17 ^= std::__string_hash<char>::operator()[abi:ne180100](v16);
      v16 += 24;
    }
    while (v16 != v15);
  }
  return v8 ^ v4 ^ v11 ^ v14 ^ v17;
}

uint64_t sirinluexternalnlu_router::NLRouterTurnProbingResult::formatText(sirinluexternalnlu_router::NLRouterTurnProbingResult *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "nl_parse_response");
  }
  uint64_t v6 = *((void *)this + 2);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, a2, "pommes_response");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluexternalnlu_router::NLRouterTurnProbingResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *(const PB::Base **)(this + 8);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  uint64_t v5 = *(const PB::Base **)(v3 + 16);
  if (v5)
  {
    return PB::Writer::writeSubmessage(a2, v5);
  }
  return this;
}

uint64_t sirinluexternalnlu_router::NLRouterTurnProbingResult::readFrom(sirinluexternalnlu_router::NLRouterTurnProbingResult *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_24;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 2) {
        operator new();
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_24:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_24;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluexternalnlu_router::NLRouterTurnProbingResult::~NLRouterTurnProbingResult(sirinluexternalnlu_router::NLRouterTurnProbingResult *this)
{
  sirinluexternalnlu_router::NLRouterTurnProbingResult::~NLRouterTurnProbingResult(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1F232CE38;
  unint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  PB::Base::~Base(this);
}

void *sirinluexternalnlu_router::NLRouterTurnProbingResult::NLRouterTurnProbingResult(void *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1F232CE38;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1F232CE38;
  return this;
}

void *sirinluexternalnlu_router::NLRouterTurnProbingResult::NLRouterTurnProbingResult(void *this, const sirinluexternalnlu_router::NLRouterTurnProbingResult *a2)
{
  *this = &unk_1F232CE38;
  this[1] = 0;
  this[2] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  if (*((void *)a2 + 2)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternalnlu_router::NLRouterTurnProbingResult::operator=(uint64_t a1, const sirinluexternalnlu_router::NLRouterTurnProbingResult *a2)
{
  if ((const sirinluexternalnlu_router::NLRouterTurnProbingResult *)a1 != a2)
  {
    sirinluexternalnlu_router::NLRouterTurnProbingResult::NLRouterTurnProbingResult(&v5, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    long long v6 = v3;
    sirinluexternalnlu_router::NLRouterTurnProbingResult::~NLRouterTurnProbingResult((sirinluexternalnlu_router::NLRouterTurnProbingResult *)&v5);
  }
  return a1;
}

uint64_t sirinluexternalnlu_router::swap(uint64_t this, sirinluexternalnlu_router::NLRouterTurnProbingResult *a2, sirinluexternalnlu_router::NLRouterTurnProbingResult *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  uint64_t v4 = *(void *)(this + 16);
  *(void *)(this + 16) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  return this;
}

void *sirinluexternalnlu_router::NLRouterTurnProbingResult::NLRouterTurnProbingResult(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F232CE38;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v5 = a1[1];
  a1[1] = v4;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  uint64_t v7 = a1[2];
  a1[2] = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  return a1;
}

uint64_t sirinluexternalnlu_router::NLRouterTurnProbingResult::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sirinluexternalnlu_router::NLRouterTurnProbingResult::NLRouterTurnProbingResult(&v5, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    long long v6 = v3;
    sirinluexternalnlu_router::NLRouterTurnProbingResult::~NLRouterTurnProbingResult((sirinluexternalnlu_router::NLRouterTurnProbingResult *)&v5);
  }
  return a1;
}

uint64_t sirinluexternalnlu_router::NLRouterTurnProbingResult::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v4)
  {
    if (v5
      && PB::PtrVector<sirinluexternal::UserParse>::operator==((uint64_t *)(v4 + 8), *(uint64_t **)(v5 + 8), *(void *)(v5 + 16)))
    {
      goto LABEL_4;
    }
    return 0;
  }
  if (v5) {
    return 0;
  }
LABEL_4:
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t result = (v6 | v7) == 0;
  if (v6) {
    BOOL v9 = v7 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    uint64_t v10 = *(void *)(a1 + 16);
    return sirinluexternalnlu_router::PommesResponse::operator==(v10, v7);
  }
  return result;
}

unint64_t sirinluexternalnlu_router::NLRouterTurnProbingResult::hash_value(sirinluexternalnlu_router::NLRouterTurnProbingResult *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (!v2
    || (long long v3 = *(sirinluexternal::UserParse ***)(v2 + 8), v4 = *(sirinluexternal::UserParse ***)(v2 + 16), v3 == v4))
  {
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = *v3++;
      v5 ^= sirinluexternal::UserParse::hash_value(v6);
    }
    while (v3 != v4);
  }
  uint64_t v7 = *((void *)this + 2);
  if (v7)
  {
    unint64_t v8 = *(void *)(v7 + 8);
    if (v8) {
      unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](v8);
    }
  }
  else
  {
    unint64_t v8 = 0;
  }
  return v8 ^ v5;
}

uint64_t sirinluexternalnlu_router::NLRouterTurnProbingResult::makeNlParseResponse(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternalnlu_router::NLRouterTurnProbingResult::makePommesResponse(uint64_t this)
{
  if (!*(void *)(this + 16)) {
    operator new();
  }
  return this;
}

BOOL SIRINLUEXTERNALCDM_PLANNERCdmPlannerResponseReadFrom(char *a1, uint64_t a2)
{
  long long v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3) {
        break;
      }
      if (v17 == 2)
      {
        uint64_t v18 = PBReaderReadData();
        uint64_t v19 = 8;
LABEL_26:
        char v20 = *(SIRINLUEXTERNALCDM_PLANNERCDMTranscriptEvent **)&a1[v19];
        *(void *)&a1[v19] = v18;
LABEL_27:

        goto LABEL_29;
      }
      if (v17 == 1)
      {
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 16;
        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_29:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v20 = objc_alloc_init(SIRINLUEXTERNALCDM_PLANNERCDMTranscriptEvent);
    [a1 addTranscriptEvents:v20];
    if (!PBReaderPlaceMark() || !SIRINLUEXTERNALCDM_PLANNERCDMTranscriptEventReadFrom((uint64_t)v20, a2))
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_27;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sirinluexternal::UsoEdgeLabel::formatText(sirinluexternal::UsoEdgeLabel *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "base_edge_label");
  }
  char v6 = *((unsigned char *)this + 24);
  if (v6)
  {
    PB::TextFormatter::format(a2, "enumeration");
    char v6 = *((unsigned char *)this + 24);
  }
  if ((v6 & 2) != 0) {
    PB::TextFormatter::format(a2, "uso_element_id");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluexternal::UsoEdgeLabel::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 24);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    char v4 = *(unsigned char *)(v3 + 24);
  }
  if (v4) {
    this = PB::Writer::writeVarInt(a2);
  }
  uint64_t v5 = *(const PB::Base **)(v3 + 8);
  if (v5)
  {
    return PB::Writer::writeSubmessage(a2, v5);
  }
  return this;
}

uint64_t sirinluexternal::UsoEdgeLabel::readFrom(sirinluexternal::UsoEdgeLabel *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_25:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v21 = v11 >> 3;
      if ((v11 >> 3) == 3) {
        operator new();
      }
      if (v21 == 2)
      {
        *((unsigned char *)this + 24) |= 1u;
        unint64_t v30 = *((void *)a2 + 1);
        unint64_t v31 = *((void *)a2 + 2);
        uint64_t v32 = *(void *)a2;
        if (v30 > 0xFFFFFFFFFFFFFFF5 || v30 + 10 > v31)
        {
          char v42 = 0;
          unsigned int v43 = 0;
          uint64_t v35 = 0;
          if (v31 <= v30) {
            unint64_t v31 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v31 == v30)
            {
              LODWORD(v35) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_65;
            }
            unint64_t v44 = v30 + 1;
            char v45 = *(unsigned char *)(v32 + v30);
            *((void *)a2 + 1) = v44;
            v35 |= (unint64_t)(v45 & 0x7F) << v42;
            if ((v45 & 0x80) == 0) {
              break;
            }
            v42 += 7;
            unint64_t v30 = v44;
            BOOL v14 = v43++ > 8;
            if (v14)
            {
LABEL_57:
              LODWORD(v35) = 0;
              goto LABEL_65;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v35) = 0;
          }
        }
        else
        {
          char v33 = 0;
          unsigned int v34 = 0;
          uint64_t v35 = 0;
          while (1)
          {
            unint64_t v36 = v30 + 1;
            *((void *)a2 + 1) = v30 + 1;
            char v37 = *(unsigned char *)(v32 + v30);
            v35 |= (unint64_t)(v37 & 0x7F) << v33;
            if ((v37 & 0x80) == 0) {
              break;
            }
            v33 += 7;
            unint64_t v30 = v36;
            BOOL v14 = v34++ > 8;
            if (v14) {
              goto LABEL_57;
            }
          }
        }
LABEL_65:
        *((_DWORD *)this + 4) = v35;
      }
      else if (v21 == 1)
      {
        *((unsigned char *)this + 24) |= 2u;
        unint64_t v22 = *((void *)a2 + 1);
        unint64_t v23 = *((void *)a2 + 2);
        uint64_t v24 = *(void *)a2;
        if (v22 > 0xFFFFFFFFFFFFFFF5 || v22 + 10 > v23)
        {
          char v38 = 0;
          unsigned int v39 = 0;
          uint64_t v27 = 0;
          if (v23 <= v22) {
            unint64_t v23 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v23 == v22)
            {
              LODWORD(v27) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_62;
            }
            unint64_t v40 = v22 + 1;
            char v41 = *(unsigned char *)(v24 + v22);
            *((void *)a2 + 1) = v40;
            v27 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0) {
              break;
            }
            v38 += 7;
            unint64_t v22 = v40;
            BOOL v14 = v39++ > 8;
            if (v14)
            {
LABEL_50:
              LODWORD(v27) = 0;
              goto LABEL_62;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v27) = 0;
          }
        }
        else
        {
          char v25 = 0;
          unsigned int v26 = 0;
          uint64_t v27 = 0;
          while (1)
          {
            unint64_t v28 = v22 + 1;
            *((void *)a2 + 1) = v22 + 1;
            char v29 = *(unsigned char *)(v24 + v22);
            v27 |= (unint64_t)(v29 & 0x7F) << v25;
            if ((v29 & 0x80) == 0) {
              break;
            }
            v25 += 7;
            unint64_t v22 = v28;
            BOOL v14 = v26++ > 8;
            if (v14) {
              goto LABEL_50;
            }
          }
        }
LABEL_62:
        *((_DWORD *)this + 5) = v27;
      }
      else
      {
LABEL_19:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_25;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluexternal::UsoEdgeLabel::~UsoEdgeLabel(sirinluexternal::UsoEdgeLabel *this)
{
  sirinluexternal::UsoEdgeLabel::~UsoEdgeLabel(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t vars8;

  unint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1F232CE88;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

uint64_t sirinluexternal::UsoEdgeLabel::UsoEdgeLabel(uint64_t this)
{
  *(void *)this = &unk_1F232CE88;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(void *)this = &unk_1F232CE88;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

uint64_t sirinluexternal::UsoEdgeLabel::UsoEdgeLabel(uint64_t this, const sirinluexternal::UsoEdgeLabel *a2)
{
  *(void *)this = &unk_1F232CE88;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  *(_DWORD *)(this + 24) = 0;
  if ((*((unsigned char *)a2 + 24) & 2) != 0)
  {
    int v3 = *((_DWORD *)a2 + 5);
    *(unsigned char *)(this + 24) = 2;
    *(_DWORD *)(this + 20) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 24) & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v2 = 1;
  if (*((unsigned char *)a2 + 24))
  {
LABEL_5:
    int v4 = *((_DWORD *)a2 + 4);
    *(unsigned char *)(this + 24) = v2;
    *(_DWORD *)(this + 16) = v4;
  }
LABEL_6:
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternal::UsoEdgeLabel::operator=(uint64_t a1, const sirinluexternal::UsoEdgeLabel *a2)
{
  if ((const sirinluexternal::UsoEdgeLabel *)a1 != a2)
  {
    sirinluexternal::UsoEdgeLabel::UsoEdgeLabel((uint64_t)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v9;
    uint64_t v9 = v4;
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v5;
    sirinluexternal::UsoEdgeLabel::~UsoEdgeLabel((sirinluexternal::UsoEdgeLabel *)&v7);
  }
  return a1;
}

uint64_t sirinluexternal::swap(uint64_t this, sirinluexternal::UsoEdgeLabel *a2, sirinluexternal::UsoEdgeLabel *a3)
{
  int v3 = *(_DWORD *)(this + 24);
  *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  int v4 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  int v5 = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  uint64_t v6 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v6;
  return this;
}

uint64_t sirinluexternal::UsoEdgeLabel::UsoEdgeLabel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F232CE88;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t sirinluexternal::UsoEdgeLabel::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sirinluexternal::UsoEdgeLabel::UsoEdgeLabel((uint64_t)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v9;
    uint64_t v9 = v4;
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v5;
    sirinluexternal::UsoEdgeLabel::~UsoEdgeLabel((sirinluexternal::UsoEdgeLabel *)&v7);
  }
  return a1;
}

uint64_t sirinluexternal::UsoEdgeLabel::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 24) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 24) & 2) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 24) & 2) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 24))
  {
    if ((*(unsigned char *)(a2 + 24) & 1) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 24))
  {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t result = (v2 | v3) == 0;
  if (v2)
  {
    if (v3) {
      return sirinluexternal::UsoLabel::operator==(v2, v3);
    }
  }
  return result;
}

unint64_t sirinluexternal::UsoEdgeLabel::hash_value(sirinluexternal::UsoEdgeLabel *this)
{
  if ((*((unsigned char *)this + 24) & 2) != 0)
  {
    uint64_t v1 = *((unsigned int *)this + 5);
    if (*((unsigned char *)this + 24)) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v1 = 0;
    if (*((unsigned char *)this + 24))
    {
LABEL_3:
      uint64_t v2 = *((unsigned int *)this + 4);
      goto LABEL_6;
    }
  }
  uint64_t v2 = 0;
LABEL_6:
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    unint64_t v4 = *(void *)(v3 + 8);
    if (v4) {
      unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100](v4);
    }
  }
  else
  {
    unint64_t v4 = 0;
  }
  return v2 ^ v1 ^ v4;
}

uint64_t sirinluexternal::UsoEdgeLabel::makeBaseEdgeLabel(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t SIRINLUEXTERNALNLU_ROUTERPrimitiveValueReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 17)
      {
        unint64_t v17 = objc_alloc_init(SIRINLUEXTERNALNLU_ROUTERApp);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALNLU_ROUTERAppReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sirinluexternal::UserAcknowledged::formatText(sirinluexternal::UserAcknowledged *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "reference");
  }
  uint64_t v6 = *((void *)this + 2);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, a2, "system_dialog_act_id");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluexternal::UserAcknowledged::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  unint64_t v4 = *(const PB::Base **)(this + 16);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  uint64_t v5 = *(const PB::Base **)(v3 + 8);
  if (v5)
  {
    return PB::Writer::writeSubmessage(a2, v5);
  }
  return this;
}

uint64_t sirinluexternal::UserAcknowledged::readFrom(sirinluexternal::UserAcknowledged *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_24;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 2) {
        operator new();
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_24:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_24;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluexternal::UserAcknowledged::~UserAcknowledged(sirinluexternal::UserAcknowledged *this)
{
  sirinluexternal::UserAcknowledged::~UserAcknowledged(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1F232CED8;
  unint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  PB::Base::~Base(this);
}

void *sirinluexternal::UserAcknowledged::UserAcknowledged(void *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1F232CED8;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1F232CED8;
  return this;
}

void *sirinluexternal::UserAcknowledged::UserAcknowledged(void *this, const sirinluexternal::UserAcknowledged *a2)
{
  *this = &unk_1F232CED8;
  this[1] = 0;
  this[2] = 0;
  if (*((void *)a2 + 2)) {
    operator new();
  }
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternal::UserAcknowledged::operator=(uint64_t a1, const sirinluexternal::UserAcknowledged *a2)
{
  if ((const sirinluexternal::UserAcknowledged *)a1 != a2)
  {
    sirinluexternal::UserAcknowledged::UserAcknowledged(&v5, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    long long v6 = v3;
    sirinluexternal::UserAcknowledged::~UserAcknowledged((sirinluexternal::UserAcknowledged *)&v5);
  }
  return a1;
}

uint64_t sirinluexternal::swap(uint64_t this, sirinluexternal::UserAcknowledged *a2, sirinluexternal::UserAcknowledged *a3)
{
  uint64_t v3 = *(void *)(this + 16);
  *(void *)(this + 16) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v3;
  uint64_t v4 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  return this;
}

void *sirinluexternal::UserAcknowledged::UserAcknowledged(void *a1, uint64_t a2)
{
  a1[1] = 0;
  uint64_t v4 = a1 + 1;
  *a1 = &unk_1F232CED8;
  a1[2] = 0;
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  uint64_t v6 = a1[2];
  a1[2] = v5;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v8 = *v4;
  *uint64_t v4 = v7;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  return a1;
}

uint64_t sirinluexternal::UserAcknowledged::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sirinluexternal::UserAcknowledged::UserAcknowledged(&v5, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    long long v6 = v3;
    sirinluexternal::UserAcknowledged::~UserAcknowledged((sirinluexternal::UserAcknowledged *)&v5);
  }
  return a1;
}

uint64_t sirinluexternal::UserAcknowledged::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a2 + 16);
  if (v4)
  {
    if (v5 && sirinluexternal::UUID::operator==(v4, v5)) {
      goto LABEL_4;
    }
    return 0;
  }
  if (v5) {
    return 0;
  }
LABEL_4:
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = *(void *)(a2 + 8);
  uint64_t result = (v6 | v7) == 0;
  if (v6) {
    BOOL v9 = v7 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    unint64_t v10 = *(void **)(a1 + 8);
    return sirinluexternal::UsoGraph::operator==(v10, (void *)v7);
  }
  return result;
}

unint64_t sirinluexternal::UserAcknowledged::hash_value(sirinluexternal::UserAcknowledged *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (!v1)
  {
    uint64_t v5 = 0;
    goto LABEL_11;
  }
  if ((*(unsigned char *)(v1 + 28) & 1) == 0)
  {
    uint64_t v2 = 0;
    if ((*(unsigned char *)(v1 + 28) & 2) != 0) {
      goto LABEL_4;
    }
LABEL_8:
    uint64_t v3 = 0;
    if ((*(unsigned char *)(v1 + 28) & 4) != 0) {
      goto LABEL_5;
    }
LABEL_9:
    uint64_t v4 = 0;
    goto LABEL_10;
  }
  uint64_t v2 = *(void *)(v1 + 8);
  if ((*(unsigned char *)(v1 + 28) & 2) == 0) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v3 = *(void *)(v1 + 16);
  if ((*(unsigned char *)(v1 + 28) & 4) == 0) {
    goto LABEL_9;
  }
LABEL_5:
  uint64_t v4 = *(int *)(v1 + 24);
LABEL_10:
  uint64_t v5 = v3 ^ v2 ^ v4;
LABEL_11:
  unint64_t v6 = *((void *)this + 1);
  if (v6) {
    unint64_t v6 = sirinluexternal::UsoGraph::hash_value((sirinluexternal::UsoGraph *)v6);
  }
  return v6 ^ v5;
}

uint64_t sirinluexternal::UserAcknowledged::makeSystemDialogActId(uint64_t this)
{
  if (!*(void *)(this + 16)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternal::UserAcknowledged::makeReference(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternalqueryrewrite::QRToken::formatText(sirinluinternalqueryrewrite::QRToken *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 44);
  if (v5)
  {
    PB::TextFormatter::format(a2, "asr_confidence", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 44);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(a2, "end_index");
  }
  if (*((void *)this + 2)) {
    PB::TextFormatter::format();
  }
  char v6 = *((unsigned char *)this + 44);
  if ((v6 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "remove_space_after");
    char v6 = *((unsigned char *)this + 44);
  }
  if ((v6 & 4) != 0) {
    PB::TextFormatter::format(a2, "start_index");
  }
  if (*((void *)this + 3)) {
    PB::TextFormatter::format();
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluinternalqueryrewrite::QRToken::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if (*(void *)(this + 24)) {
    this = PB::Writer::write();
  }
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    char v4 = *(unsigned char *)(v3 + 44);
    if ((v4 & 2) == 0)
    {
LABEL_5:
      if ((v4 & 1) == 0) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
  }
  else if ((*(unsigned char *)(v3 + 44) & 2) == 0)
  {
    goto LABEL_5;
  }
  this = PB::Writer::writeVarInt(a2);
  if (*(unsigned char *)(v3 + 44)) {
LABEL_6:
  }
    this = PB::Writer::write(a2, *(double *)(v3 + 8));
LABEL_7:
  if (*(void *)(v3 + 16)) {
    this = PB::Writer::write();
  }
  if ((*(unsigned char *)(v3 + 44) & 8) != 0)
  {
    return PB::Writer::write(a2);
  }
  return this;
}

uint64_t sirinluinternalqueryrewrite::QRToken::readFrom(sirinluinternalqueryrewrite::QRToken *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
      break;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      int v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        operator new();
      case 2u:
        *((unsigned char *)this + 44) |= 4u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v21 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v20 <= 0xFFFFFFFFFFFFFFF5 && v20 + 10 <= v21)
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          do
          {
            unint64_t v26 = v20 + 1;
            *((void *)a2 + 1) = v20 + 1;
            char v27 = *(unsigned char *)(v22 + v20);
            v25 |= (unint64_t)(v27 & 0x7F) << v23;
            if ((v27 & 0x80) == 0) {
              goto LABEL_64;
            }
            v23 += 7;
            unint64_t v20 = v26;
            BOOL v14 = v24++ > 8;
          }
          while (!v14);
LABEL_50:
          LODWORD(v25) = 0;
          goto LABEL_64;
        }
        char v41 = 0;
        unsigned int v42 = 0;
        uint64_t v25 = 0;
        if (v21 <= v20) {
          unint64_t v21 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v21 == v20)
          {
            LODWORD(v25) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v43 = v20 + 1;
            char v44 = *(unsigned char *)(v22 + v20);
            *((void *)a2 + 1) = v43;
            v25 |= (unint64_t)(v44 & 0x7F) << v41;
            if (v44 < 0)
            {
              v41 += 7;
              unint64_t v20 = v43;
              BOOL v14 = v42++ > 8;
              if (v14) {
                goto LABEL_50;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v25) = 0;
            }
          }
          break;
        }
LABEL_64:
        *((_DWORD *)this + 9) = v25;
        goto LABEL_69;
      case 3u:
        *((unsigned char *)this + 44) |= 2u;
        unint64_t v28 = *((void *)a2 + 1);
        unint64_t v29 = *((void *)a2 + 2);
        uint64_t v30 = *(void *)a2;
        if (v28 <= 0xFFFFFFFFFFFFFFF5 && v28 + 10 <= v29)
        {
          char v31 = 0;
          unsigned int v32 = 0;
          uint64_t v33 = 0;
          do
          {
            unint64_t v34 = v28 + 1;
            *((void *)a2 + 1) = v28 + 1;
            char v35 = *(unsigned char *)(v30 + v28);
            v33 |= (unint64_t)(v35 & 0x7F) << v31;
            if ((v35 & 0x80) == 0) {
              goto LABEL_68;
            }
            v31 += 7;
            unint64_t v28 = v34;
            BOOL v14 = v32++ > 8;
          }
          while (!v14);
LABEL_57:
          LODWORD(v33) = 0;
          goto LABEL_68;
        }
        char v45 = 0;
        unsigned int v46 = 0;
        uint64_t v33 = 0;
        if (v29 <= v28) {
          unint64_t v29 = *((void *)a2 + 1);
        }
        break;
      case 4u:
        *((unsigned char *)this + 44) |= 1u;
        unint64_t v36 = *((void *)a2 + 1);
        if (v36 <= 0xFFFFFFFFFFFFFFF7 && v36 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v36);
          *((void *)a2 + 1) += 8;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
        goto LABEL_69;
      case 5u:
        operator new();
      case 6u:
        *((unsigned char *)this + 44) |= 8u;
        unint64_t v37 = *((void *)a2 + 1);
        if (v37 >= *((void *)a2 + 2))
        {
          BOOL v40 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          unint64_t v38 = v37 + 1;
          int v39 = *(unsigned __int8 *)(*(void *)a2 + v37);
          *((void *)a2 + 1) = v38;
          BOOL v40 = v39 != 0;
        }
        *((unsigned char *)this + 40) = v40;
        goto LABEL_69;
      default:
        goto LABEL_19;
    }
    while (1)
    {
      if (v29 == v28)
      {
        LODWORD(v33) = 0;
        *((unsigned char *)a2 + 24) = 1;
        goto LABEL_68;
      }
      unint64_t v47 = v28 + 1;
      char v48 = *(unsigned char *)(v30 + v28);
      *((void *)a2 + 1) = v47;
      v33 |= (unint64_t)(v48 & 0x7F) << v45;
      if ((v48 & 0x80) == 0) {
        break;
      }
      v45 += 7;
      unint64_t v28 = v47;
      BOOL v14 = v46++ > 8;
      if (v14) {
        goto LABEL_57;
      }
    }
    if (*((unsigned char *)a2 + 24)) {
      LODWORD(v33) = 0;
    }
LABEL_68:
    *((_DWORD *)this + 8) = v33;
LABEL_69:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  char v15 = 0;
  unsigned int v16 = 0;
  unint64_t v11 = 0;
  if (v2 > v3) {
    unint64_t v3 = v2;
  }
  do
  {
    if (v3 == v2)
    {
      int v4 = 1;
      *((unsigned char *)a2 + 24) = 1;
      return v4 == 0;
    }
    unint64_t v17 = v2 + 1;
    char v18 = *(unsigned char *)(v8 + v2);
    *((void *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0) {
      goto LABEL_21;
    }
    v15 += 7;
    unint64_t v2 = v17;
    BOOL v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  uint64_t result = PB::Reader::skip(a2);
  if (result) {
    goto LABEL_69;
  }
  return result;
}

void sirinluinternalqueryrewrite::QRToken::~QRToken(sirinluinternalqueryrewrite::QRToken *this)
{
  sirinluinternalqueryrewrite::QRToken::~QRToken(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1F232CF28;
  unint64_t v2 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v2) {
    std::default_delete<std::string>::operator()[abi:ne180100](v2);
  }
  unint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    std::default_delete<std::string>::operator()[abi:ne180100](v3);
  }
  PB::Base::~Base(this);
}

uint64_t sirinluinternalqueryrewrite::QRToken::QRToken(uint64_t this)
{
  *(void *)this = &unk_1F232CF28;
  *(_DWORD *)(this + 44) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  return this;
}

{
  *(void *)this = &unk_1F232CF28;
  *(_DWORD *)(this + 44) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  return this;
}

uint64_t sirinluinternalqueryrewrite::QRToken::QRToken(uint64_t this, const sirinluinternalqueryrewrite::QRToken *a2)
{
  *(void *)this = &unk_1F232CF28;
  *(void *)(this + 16) = 0;
  *(_DWORD *)(this + 44) = 0;
  *(void *)(this + 24) = 0;
  if (*((void *)a2 + 3)) {
    operator new();
  }
  char v2 = *((unsigned char *)a2 + 44);
  if ((v2 & 4) != 0)
  {
    int v4 = *((_DWORD *)a2 + 9);
    *(unsigned char *)(this + 44) |= 4u;
    *(_DWORD *)(this + 36) = v4;
    char v2 = *((unsigned char *)a2 + 44);
    if ((v2 & 2) == 0)
    {
LABEL_5:
      if ((v2 & 1) == 0) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
  }
  else if ((*((unsigned char *)a2 + 44) & 2) == 0)
  {
    goto LABEL_5;
  }
  int v5 = *((_DWORD *)a2 + 8);
  *(unsigned char *)(this + 44) |= 2u;
  *(_DWORD *)(this + 32) = v5;
  if (*((unsigned char *)a2 + 44))
  {
LABEL_6:
    uint64_t v3 = *((void *)a2 + 1);
    *(unsigned char *)(this + 44) |= 1u;
    *(void *)(this + 8) = v3;
  }
LABEL_7:
  if (*((void *)a2 + 2)) {
    operator new();
  }
  if ((*((unsigned char *)a2 + 44) & 8) != 0)
  {
    char v6 = *((unsigned char *)a2 + 40);
    *(unsigned char *)(this + 44) |= 8u;
    *(unsigned char *)(this + 40) = v6;
  }
  return this;
}

uint64_t sirinluinternalqueryrewrite::QRToken::operator=(uint64_t a1, const sirinluinternalqueryrewrite::QRToken *a2)
{
  if ((const sirinluinternalqueryrewrite::QRToken *)a1 != a2)
  {
    sirinluinternalqueryrewrite::QRToken::QRToken((uint64_t)&v8, a2);
    int v3 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v13;
    int v13 = v3;
    uint64_t v4 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v11;
    uint64_t v11 = v4;
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v9;
    uint64_t v9 = v5;
    long long v6 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v10;
    long long v10 = v6;
    LOBYTE(v3) = *(unsigned char *)(a1 + 40);
    *(unsigned char *)(a1 + 40) = v12;
    char v12 = v3;
    sirinluinternalqueryrewrite::QRToken::~QRToken((sirinluinternalqueryrewrite::QRToken *)&v8);
  }
  return a1;
}

double sirinluinternalqueryrewrite::swap(sirinluinternalqueryrewrite *this, sirinluinternalqueryrewrite::QRToken *a2, sirinluinternalqueryrewrite::QRToken *a3)
{
  int v3 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  LOBYTE(v6) = *((unsigned char *)this + 40);
  *((unsigned char *)this + 40) = *((unsigned char *)a2 + 40);
  *((unsigned char *)a2 + 40) = v6;
  return result;
}

uint64_t sirinluinternalqueryrewrite::QRToken::QRToken(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F232CF28;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  uint64_t v5 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v4;
  if (v5) {
    std::default_delete<std::string>::operator()[abi:ne180100](v5);
  }
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  uint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v6;
  if (v7) {
    std::default_delete<std::string>::operator()[abi:ne180100](v7);
  }
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t sirinluinternalqueryrewrite::QRToken::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sirinluinternalqueryrewrite::QRToken::QRToken((uint64_t)&v8, a2);
    int v3 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v13;
    int v13 = v3;
    uint64_t v4 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v11;
    uint64_t v11 = v4;
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v9;
    uint64_t v9 = v5;
    long long v6 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v10;
    long long v10 = v6;
    LOBYTE(v3) = *(unsigned char *)(a1 + 40);
    *(unsigned char *)(a1 + 40) = v12;
    char v12 = v3;
    sirinluinternalqueryrewrite::QRToken::~QRToken((sirinluinternalqueryrewrite::QRToken *)&v8);
  }
  return a1;
}

BOOL sirinluinternalqueryrewrite::QRToken::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned __int8 **)(a1 + 24);
  uint64_t v5 = *(unsigned __int8 ***)(a2 + 24);
  if (v4)
  {
    if (!v5) {
      return 0;
    }
    uint64_t v6 = v4[23];
    if ((v6 & 0x80u) == 0) {
      uint64_t v7 = (unsigned __int8 *)v4[23];
    }
    else {
      uint64_t v7 = (unsigned __int8 *)*((void *)v4 + 1);
    }
    uint64_t v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    int v9 = (char)v8;
    if ((char)v8 < 0) {
      uint64_t v8 = v5[1];
    }
    if (v7 != v8) {
      return 0;
    }
    if (v9 >= 0) {
      long long v10 = *(unsigned __int8 **)(a2 + 24);
    }
    else {
      long long v10 = *v5;
    }
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v10, *((void *)v4 + 1))) {
        return 0;
      }
    }
    else if (v4[23])
    {
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6) {
          goto LABEL_18;
        }
      }
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
LABEL_18:
  char v11 = *(unsigned char *)(a1 + 44);
  char v12 = *(unsigned char *)(a2 + 44);
  if ((v11 & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 44) & 4) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 44) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 44) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 44) & 2) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 44) & 2) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 44))
  {
    if ((*(unsigned char *)(a2 + 44) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 44))
  {
    return 0;
  }
  int v13 = *(unsigned __int8 **)(a1 + 16);
  BOOL v14 = *(unsigned __int8 **)(a2 + 16);
  if (v13)
  {
    if (!v14 || !std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(v13, v14)) {
      return 0;
    }
  }
  else if (v14)
  {
    return 0;
  }
  BOOL result = (v12 & 8) == 0;
  if ((v11 & 8) == 0) {
    return result;
  }
  return (v12 & 8) != 0 && *(unsigned __int8 *)(a1 + 40) == *(unsigned __int8 *)(a2 + 40);
}

unint64_t sirinluinternalqueryrewrite::QRToken::hash_value(sirinluinternalqueryrewrite::QRToken *this)
{
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    unint64_t v3 = std::__string_hash<char>::operator()[abi:ne180100](v2);
  }
  else {
    unint64_t v3 = 0;
  }
  char v4 = *((unsigned char *)this + 44);
  if ((v4 & 4) != 0)
  {
    uint64_t v5 = *((unsigned int *)this + 9);
    if ((*((unsigned char *)this + 44) & 2) != 0)
    {
LABEL_6:
      uint64_t v6 = *((unsigned int *)this + 8);
      if (*((unsigned char *)this + 44)) {
        goto LABEL_7;
      }
LABEL_12:
      uint64_t v7 = 0;
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v5 = 0;
    if ((*((unsigned char *)this + 44) & 2) != 0) {
      goto LABEL_6;
    }
  }
  uint64_t v6 = 0;
  if ((*((unsigned char *)this + 44) & 1) == 0) {
    goto LABEL_12;
  }
LABEL_7:
  if (*((double *)this + 1) == 0.0) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = *((void *)this + 1);
  }
LABEL_13:
  unint64_t v8 = *((void *)this + 2);
  if (v8) {
    unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](v8);
  }
  if ((v4 & 8) != 0) {
    uint64_t v9 = *((unsigned __int8 *)this + 40);
  }
  else {
    uint64_t v9 = 0;
  }
  return v5 ^ v3 ^ v6 ^ v7 ^ v8 ^ v9;
}

uint64_t SIRINLUINTERNALSNLCSNLCParserResponseReadFrom(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  char v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v15 = v9++ >= 9;
        if (v15)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        *(unsigned char *)(a1 + 16) |= 2u;
        uint64_t v25 = *v3;
        unint64_t v26 = *(void *)(a2 + v25);
        if (v26 <= 0xFFFFFFFFFFFFFFFBLL && v26 + 4 <= *(void *)(a2 + *v4))
        {
          int v27 = *(_DWORD *)(*(void *)(a2 + *v7) + v26);
          *(void *)(a2 + v25) = v26 + 4;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          int v27 = 0;
        }
        *(_DWORD *)(a1 + 12) = v27;
      }
      else if ((v10 >> 3) == 1)
      {
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 16) |= 1u;
        while (1)
        {
          uint64_t v21 = *v3;
          uint64_t v22 = *(void *)(a2 + v21);
          unint64_t v23 = v22 + 1;
          if (v22 == -1 || v23 > *(void *)(a2 + *v4)) {
            break;
          }
          char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v23;
          v20 |= (unint64_t)(v24 & 0x7F) << v18;
          if ((v24 & 0x80) == 0) {
            goto LABEL_33;
          }
          v18 += 7;
          BOOL v15 = v19++ >= 9;
          if (v15)
          {
            LODWORD(v20) = 0;
            goto LABEL_35;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_33:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v20) = 0;
        }
LABEL_35:
        *(_DWORD *)(a1 + 8) = v20;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1C8B4228C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C8B4230C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C8B42380(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B42400(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SIRINLUINTERNALContextRuleReadFrom(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  char v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        unint64_t v17 = objc_alloc_init(SIRINLUEXTERNALTurnContext);
        objc_storeStrong((id *)(a1 + 24), v17);
        if (PBReaderPlaceMark() && SIRINLUEXTERNALTurnContextReadFrom((uint64_t)v17, a2)) {
          goto LABEL_26;
        }
        goto LABEL_51;
      case 2u:
        unint64_t v17 = objc_alloc_init(SIRINLUINTERNALMatchingSpan);
        [(id)a1 addMatchingSpans:v17];
        if PBReaderPlaceMark() && (SIRINLUINTERNALMatchingSpanReadFrom((uint64_t)v17, a2))
        {
LABEL_26:
          PBReaderRecallMark();

LABEL_49:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_51:

        return 0;
      case 3u:
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        *(unsigned char *)(a1 + 36) |= 2u;
        while (2)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              BOOL v14 = v20++ >= 9;
              if (v14)
              {
                uint64_t v21 = 0;
                goto LABEL_44;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v21 = 0;
        }
LABEL_44:
        *(unsigned char *)(a1 + 32) = v21 != 0;
        goto LABEL_49;
      case 4u:
        char v25 = 0;
        unsigned int v26 = 0;
        uint64_t v27 = 0;
        *(unsigned char *)(a1 + 36) |= 1u;
        while (2)
        {
          uint64_t v28 = *v3;
          unint64_t v29 = *(void *)(a2 + v28);
          if (v29 == -1 || v29 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
            *(void *)(a2 + v28) = v29 + 1;
            v27 |= (unint64_t)(v30 & 0x7F) << v25;
            if (v30 < 0)
            {
              v25 += 7;
              BOOL v14 = v26++ >= 9;
              if (v14)
              {
                LODWORD(v27) = 0;
                goto LABEL_48;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v27) = 0;
        }
LABEL_48:
        *(_DWORD *)(a1 + 16) = v27;
        goto LABEL_49;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_49;
    }
  }
}

BOOL SIRINLUEXTERNALUserAcknowledgedReadFrom(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  char v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        unint64_t v17 = objc_alloc_init(SIRINLUEXTERNALUUID);
        objc_storeStrong((id *)(a1 + 16), v17);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_30;
        }
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_27:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    unint64_t v17 = objc_alloc_init(SIRINLUEXTERNALUsoGraph);
    objc_storeStrong((id *)(a1 + 8), v17);
    if (!PBReaderPlaceMark() || !SIRINLUEXTERNALUsoGraphReadFrom((id *)&v17->super.super.isa, a2))
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL SIRINLUINTERNALPSCPSCServiceRequestReadFrom(id *a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  char v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        unint64_t v17 = objc_alloc_init(SIRINLUEXTERNALUUID);
        objc_storeStrong(a1 + 5, v17);
        if PBReaderPlaceMark() && (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v17, a2)) {
          goto LABEL_41;
        }
        goto LABEL_45;
      case 2u:
        unint64_t v17 = objc_alloc_init(SIRINLUINTERNALNLV4_PARSERTokenisation);
        objc_storeStrong(a1 + 6, v17);
        if (!PBReaderPlaceMark() || !SIRINLUINTERNALNLV4_PARSERTokenisationReadFrom((uint64_t)v17, a2)) {
          goto LABEL_45;
        }
        goto LABEL_41;
      case 3u:
        unint64_t v17 = objc_alloc_init(SIRINLUINTERNALNLv4EmbeddingTensor);
        objc_storeStrong(a1 + 1, v17);
        if (!PBReaderPlaceMark()
          || (SIRINLUINTERNALNLv4EmbeddingTensorReadFrom((uint64_t)v17, a2) & 1) == 0)
        {
          goto LABEL_45;
        }
        goto LABEL_41;
      case 4u:
        unint64_t v17 = objc_alloc_init(SIRINLUINTERNALMatchingSpan);
        [a1 addMatchingSpans:v17];
        if (!PBReaderPlaceMark() || (SIRINLUINTERNALMatchingSpanReadFrom((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_45;
        }
        goto LABEL_41;
      case 5u:
        unint64_t v17 = objc_alloc_init(SIRINLUEXTERNALTurnInput);
        objc_storeStrong(a1 + 7, v17);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALTurnInputReadFrom((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_45;
        }
        goto LABEL_41;
      case 6u:
        unint64_t v17 = objc_alloc_init(SIRINLUEXTERNALLegacyNLContext);
        objc_storeStrong(a1 + 2, v17);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALLegacyNLContextReadFrom((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_45;
        }
        goto LABEL_41;
      case 7u:
        unint64_t v17 = objc_alloc_init(SIRINLUEXTERNALRequestID);
        objc_storeStrong(a1 + 4, v17);
        if PBReaderPlaceMark() && (SIRINLUEXTERNALRequestIDReadFrom((uint64_t)v17, a2))
        {
LABEL_41:
          PBReaderRecallMark();

LABEL_42:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_45:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_42;
    }
  }
}

uint64_t SIRINLUINTERNALSNLP_INTERMEDIATENLv4AssetVersionReadFrom(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  char v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        unint64_t v17 = objc_alloc_init(SIRINLUINTERNALSNLP_INTERMEDIATESNLPAssetVersion);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark()
          || (SIRINLUINTERNALSNLP_INTERMEDIATESNLPAssetVersionReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL SIRINLUINTERNALSNLP_INTERMEDIATEITFMExecutedHandcraftedRulesReadFrom(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  char v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        unint64_t v17 = objc_alloc_init(SIRINLUINTERNALSNLP_INTERMEDIATESNLPHandcraftedRules);
        objc_storeStrong((id *)(a1 + 16), v17);
        if (!PBReaderPlaceMark()
          || (SIRINLUINTERNALSNLP_INTERMEDIATESNLPHandcraftedRulesReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_26:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v18 = PBReaderReadString();
    unint64_t v17 = *(SIRINLUINTERNALSNLP_INTERMEDIATESNLPHandcraftedRules **)(a1 + 8);
    *(void *)(a1 + 8) = v18;
LABEL_24:

    goto LABEL_26;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sirinluinternalqueryrewrite::QRInteraction::formatText(sirinluinternalqueryrewrite::QRInteraction *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((void *)this + 1)) {
    PB::TextFormatter::format();
  }
  uint64_t v5 = (uint64_t *)*((void *)this + 2);
  uint64_t v6 = (uint64_t *)*((void *)this + 3);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "original_utterances");
  }
  char v8 = (uint64_t *)*((void *)this + 5);
  unsigned int v9 = (uint64_t *)*((void *)this + 6);
  while (v8 != v9)
  {
    uint64_t v10 = *v8++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v10 + 32))(v10, a2, "siri_response");
  }
  char v11 = *((unsigned char *)this + 76);
  if (v11)
  {
    PB::TextFormatter::format(a2, "start_timestamp");
    char v11 = *((unsigned char *)this + 76);
  }
  if ((v11 & 2) != 0) {
    PB::TextFormatter::format(a2, "tap2edit");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluinternalqueryrewrite::QRInteraction::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(const PB::Base ***)(this + 16);
  uint64_t v5 = *(const PB::Base ***)(this + 24);
  while (v4 != v5)
  {
    uint64_t v6 = *v4++;
    this = PB::Writer::writeSubmessage(a2, v6);
  }
  uint64_t v7 = *(const PB::Base ***)(v3 + 40);
  char v8 = *(const PB::Base ***)(v3 + 48);
  while (v7 != v8)
  {
    unsigned int v9 = *v7++;
    this = PB::Writer::writeSubmessage(a2, v9);
  }
  if (*(void *)(v3 + 8)) {
    this = PB::Writer::write();
  }
  char v10 = *(unsigned char *)(v3 + 76);
  if ((v10 & 2) != 0)
  {
    this = PB::Writer::write(a2);
    char v10 = *(unsigned char *)(v3 + 76);
  }
  if (v10)
  {
    return PB::Writer::writeVarInt(a2);
  }
  return this;
}

uint64_t sirinluinternalqueryrewrite::QRInteraction::readFrom(sirinluinternalqueryrewrite::QRInteraction *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
      break;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      int v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        operator new();
      case 2u:
        PB::PtrVector<sirinluinternal::Token>::emplace_back<>();
      case 3u:
        operator new();
      case 4u:
        *((unsigned char *)this + 76) |= 2u;
        unint64_t v28 = *((void *)a2 + 1);
        if (v28 >= *((void *)a2 + 2))
        {
          BOOL v31 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          unint64_t v29 = v28 + 1;
          int v30 = *(unsigned __int8 *)(*(void *)a2 + v28);
          *((void *)a2 + 1) = v29;
          BOOL v31 = v30 != 0;
        }
        *((unsigned char *)this + 72) = v31;
        goto LABEL_48;
      case 5u:
        *((unsigned char *)this + 76) |= 1u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v21 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v20 <= 0xFFFFFFFFFFFFFFF5 && v20 + 10 <= v21)
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          do
          {
            unint64_t v26 = v20 + 1;
            *((void *)a2 + 1) = v20 + 1;
            char v27 = *(unsigned char *)(v22 + v20);
            v25 |= (unint64_t)(v27 & 0x7F) << v23;
            if ((v27 & 0x80) == 0) {
              goto LABEL_47;
            }
            v23 += 7;
            unint64_t v20 = v26;
            BOOL v14 = v24++ > 8;
          }
          while (!v14);
LABEL_41:
          uint64_t v25 = 0;
          goto LABEL_47;
        }
        char v32 = 0;
        unsigned int v33 = 0;
        uint64_t v25 = 0;
        if (v21 <= v20) {
          unint64_t v21 = *((void *)a2 + 1);
        }
        break;
      default:
        goto LABEL_19;
    }
    while (1)
    {
      if (v21 == v20)
      {
        uint64_t v25 = 0;
        *((unsigned char *)a2 + 24) = 1;
        goto LABEL_47;
      }
      unint64_t v34 = v20 + 1;
      char v35 = *(unsigned char *)(v22 + v20);
      *((void *)a2 + 1) = v34;
      v25 |= (unint64_t)(v35 & 0x7F) << v32;
      if ((v35 & 0x80) == 0) {
        break;
      }
      v32 += 7;
      unint64_t v20 = v34;
      BOOL v14 = v33++ > 8;
      if (v14) {
        goto LABEL_41;
      }
    }
    if (*((unsigned char *)a2 + 24)) {
      uint64_t v25 = 0;
    }
LABEL_47:
    *((void *)this + 8) = v25;
LABEL_48:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  char v15 = 0;
  unsigned int v16 = 0;
  unint64_t v11 = 0;
  if (v2 > v3) {
    unint64_t v3 = v2;
  }
  do
  {
    if (v3 == v2)
    {
      int v4 = 1;
      *((unsigned char *)a2 + 24) = 1;
      return v4 == 0;
    }
    unint64_t v17 = v2 + 1;
    char v18 = *(unsigned char *)(v8 + v2);
    *((void *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0) {
      goto LABEL_21;
    }
    v15 += 7;
    unint64_t v2 = v17;
    BOOL v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  uint64_t result = PB::Reader::skip(a2);
  if (result) {
    goto LABEL_48;
  }
  return result;
}

void sub_1C8B462DC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sirinluinternalqueryrewrite::QRInteraction::~QRInteraction(sirinluinternalqueryrewrite::QRInteraction *this)
{
  sirinluinternalqueryrewrite::QRInteraction::~QRInteraction(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  void **v3;
  uint64_t vars8;

  *(void *)this = &unk_1F232CF78;
  unint64_t v3 = (void **)((char *)this + 40);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((void *)this + 2))
  {
    std::vector<std::unique_ptr<siricommon::StringValue>>::__clear[abi:ne180100]((void *)this + 2);
    operator delete(*((void **)this + 2));
  }
  unint64_t v2 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v2) {
    std::default_delete<std::string>::operator()[abi:ne180100](v2);
  }
  PB::Base::~Base(this);
}

double sirinluinternalqueryrewrite::QRInteraction::QRInteraction(sirinluinternalqueryrewrite::QRInteraction *this)
{
  *(void *)this = &unk_1F232CF78;
  *((_DWORD *)this + 19) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 7) = 0;
  return result;
}

{
  double result;

  *(void *)this = &unk_1F232CF78;
  *((_DWORD *)this + 19) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 7) = 0;
  return result;
}

uint64_t sirinluinternalqueryrewrite::QRInteraction::QRInteraction(uint64_t this, const sirinluinternalqueryrewrite::QRInteraction *a2)
{
  *(void *)this = &unk_1F232CF78;
  *(_OWORD *)(this + 8) = 0u;
  *(_OWORD *)(this + 40) = 0u;
  *(_DWORD *)(this + 76) = 0;
  *(_OWORD *)(this + 24) = 0u;
  *(void *)(this + 56) = 0;
  if (*((void *)a2 + 2) != *((void *)a2 + 3)) {
    operator new();
  }
  if (*((void *)a2 + 5) != *((void *)a2 + 6)) {
    PB::PtrVector<sirinluinternal::Token>::emplace_back<sirinluinternal::Token const&>();
  }
  if (*((void *)a2 + 1)) {
    operator new();
  }
  char v2 = *((unsigned char *)a2 + 76);
  if ((v2 & 2) != 0)
  {
    char v3 = *((unsigned char *)a2 + 72);
    *(unsigned char *)(this + 76) |= 2u;
    *(unsigned char *)(this + 72) = v3;
    char v2 = *((unsigned char *)a2 + 76);
  }
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 8);
    *(unsigned char *)(this + 76) |= 1u;
    *(void *)(this + 64) = v4;
  }
  return this;
}

void sub_1C8B46698(void *a1)
{
}

uint64_t sirinluinternalqueryrewrite::QRInteraction::operator=(uint64_t a1, const sirinluinternalqueryrewrite::QRInteraction *a2)
{
  if ((const sirinluinternalqueryrewrite::QRInteraction *)a1 != a2)
  {
    sirinluinternalqueryrewrite::QRInteraction::QRInteraction((uint64_t)&v11, a2);
    int v3 = *(_DWORD *)(a1 + 76);
    *(_DWORD *)(a1 + 76) = v18;
    int v18 = v3;
    LOBYTE(v3) = *(unsigned char *)(a1 + 72);
    *(unsigned char *)(a1 + 72) = v17;
    char v17 = v3;
    uint64_t v4 = *(void *)(a1 + 56);
    uint64_t v5 = *(void *)(a1 + 64);
    uint64_t v6 = v16;
    *(void *)(a1 + 56) = v15;
    *(void *)(a1 + 64) = v6;
    long long v7 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v13;
    long long v13 = v7;
    long long v8 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v14;
    long long v14 = v8;
    long long v9 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v12;
    long long v12 = v9;
    uint64_t v15 = v4;
    uint64_t v16 = v5;
    sirinluinternalqueryrewrite::QRInteraction::~QRInteraction((sirinluinternalqueryrewrite::QRInteraction *)&v11);
  }
  return a1;
}

uint64_t sirinluinternalqueryrewrite::swap(uint64_t this, sirinluinternalqueryrewrite::QRInteraction *a2, sirinluinternalqueryrewrite::QRInteraction *a3)
{
  int v3 = *(_DWORD *)(this + 76);
  *(_DWORD *)(this + 76) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v3;
  uint64_t v4 = *(void *)(this + 16);
  *(void *)(this + 16) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = *(void *)(this + 24);
  *(void *)(this + 24) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  uint64_t v6 = *(void *)(this + 32);
  *(void *)(this + 32) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v6;
  uint64_t v7 = *(void *)(this + 40);
  *(void *)(this + 40) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v7;
  uint64_t v8 = *(void *)(this + 48);
  *(void *)(this + 48) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v8;
  uint64_t v9 = *(void *)(this + 56);
  uint64_t v10 = *(void *)(this + 64);
  uint64_t v11 = *((void *)a2 + 8);
  *(void *)(this + 56) = *((void *)a2 + 7);
  *(void *)(this + 64) = v11;
  *((void *)a2 + 7) = v9;
  uint64_t v12 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  char v13 = *(unsigned char *)(this + 72);
  *(unsigned char *)(this + 72) = *((unsigned char *)a2 + 72);
  *((void *)a2 + 1) = v12;
  *((unsigned char *)a2 + 72) = v13;
  *((void *)a2 + 8) = v10;
  return this;
}

uint64_t sirinluinternalqueryrewrite::QRInteraction::QRInteraction(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F232CF78;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  uint64_t v4 = (void **)(a1 + 40);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a2 + 76) = 0;
  uint64_t v5 = a1 + 16;
  uint64_t v6 = (void *)(a2 + 16);
  if (*(void *)(a1 + 16))
  {
    std::vector<std::unique_ptr<siricommon::StringValue>>::__clear[abi:ne180100]((void *)(a1 + 16));
    operator delete(*(void **)v5);
    *(void *)uint64_t v5 = 0;
    *(void *)(v5 + 8) = 0;
    *(void *)(v5 + 16) = 0;
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *uint64_t v6 = 0;
  v6[1] = 0;
  void v6[2] = 0;
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(v4);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  uint64_t v7 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v8 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  if (v8) {
    std::default_delete<std::string>::operator()[abi:ne180100](v8);
  }
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  return a1;
}

uint64_t sirinluinternalqueryrewrite::QRInteraction::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sirinluinternalqueryrewrite::QRInteraction::QRInteraction((uint64_t)&v11, a2);
    int v3 = *(_DWORD *)(a1 + 76);
    *(_DWORD *)(a1 + 76) = v18;
    int v18 = v3;
    LOBYTE(v3) = *(unsigned char *)(a1 + 72);
    *(unsigned char *)(a1 + 72) = v17;
    char v17 = v3;
    uint64_t v4 = *(void *)(a1 + 56);
    uint64_t v5 = *(void *)(a1 + 64);
    uint64_t v6 = v16;
    *(void *)(a1 + 56) = v15;
    *(void *)(a1 + 64) = v6;
    long long v7 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v13;
    long long v13 = v7;
    long long v8 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v14;
    long long v14 = v8;
    long long v9 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v12;
    long long v12 = v9;
    uint64_t v15 = v4;
    uint64_t v16 = v5;
    sirinluinternalqueryrewrite::QRInteraction::~QRInteraction((sirinluinternalqueryrewrite::QRInteraction *)&v11);
  }
  return a1;
}

BOOL sirinluinternalqueryrewrite::QRInteraction::operator==(uint64_t a1, uint64_t a2)
{
  int v3 = *(uint64_t **)(a1 + 16);
  char v2 = *(uint64_t **)(a1 + 24);
  uint64_t v4 = *(uint64_t **)(a2 + 16);
  if ((char *)v2 - (char *)v3 != *(void *)(a2 + 24) - (void)v4) {
    return 0;
  }
  while (v3 != v2)
  {
    BOOL result = sirinluinternalqueryrewrite::QRUtterance::operator==(*v3, *v4);
    if (!result) {
      return result;
    }
    ++v3;
    ++v4;
  }
  BOOL result = PB::PtrVector<sirinluinternal::Token>::operator==(*(void *)(a1 + 40), *(void *)(a1 + 48), *(uint64_t **)(a2 + 40), *(void *)(a2 + 48));
  if (result)
  {
    long long v8 = *(unsigned __int8 **)(a1 + 8);
    long long v9 = *(unsigned __int8 ***)(a2 + 8);
    if (v8)
    {
      if (!v9) {
        return 0;
      }
      uint64_t v10 = v8[23];
      if ((v10 & 0x80u) == 0) {
        uint64_t v11 = (unsigned __int8 *)v8[23];
      }
      else {
        uint64_t v11 = (unsigned __int8 *)*((void *)v8 + 1);
      }
      long long v12 = (unsigned __int8 *)*((unsigned __int8 *)v9 + 23);
      int v13 = (char)v12;
      if ((char)v12 < 0) {
        long long v12 = v9[1];
      }
      if (v11 != v12) {
        return 0;
      }
      if (v13 >= 0) {
        long long v14 = *(unsigned __int8 **)(a2 + 8);
      }
      else {
        long long v14 = *v9;
      }
      if ((v10 & 0x80) == 0)
      {
        if (v8[23])
        {
          while (*v8 == *v14)
          {
            ++v8;
            ++v14;
            if (!--v10) {
              goto LABEL_23;
            }
          }
          return 0;
        }
LABEL_23:
        if ((*(unsigned char *)(a1 + 76) & 2) != 0)
        {
          if ((*(unsigned char *)(a2 + 76) & 2) == 0 || *(unsigned __int8 *)(a1 + 72) != *(unsigned __int8 *)(a2 + 72)) {
            return 0;
          }
        }
        else if ((*(unsigned char *)(a2 + 76) & 2) != 0)
        {
          return 0;
        }
        BOOL result = (*(unsigned char *)(a2 + 76) & 1) == 0;
        if ((*(unsigned char *)(a1 + 76) & 1) == 0) {
          return result;
        }
        return (*(unsigned char *)(a2 + 76) & 1) != 0 && *(void *)(a1 + 64) == *(void *)(a2 + 64);
      }
      if (!memcmp(*(const void **)v8, v14, *((void *)v8 + 1))) {
        goto LABEL_23;
      }
    }
    else if (!v9)
    {
      goto LABEL_23;
    }
    return 0;
  }
  return result;
}

unint64_t sirinluinternalqueryrewrite::QRInteraction::hash_value(sirinluinternalqueryrewrite::QRInteraction *this)
{
  char v2 = (sirinluinternalqueryrewrite::QRUtterance **)*((void *)this + 2);
  int v3 = (sirinluinternalqueryrewrite::QRUtterance **)*((void *)this + 3);
  if (v2 == v3)
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = *v2++;
      v4 ^= sirinluinternalqueryrewrite::QRUtterance::hash_value(v5);
    }
    while (v2 != v3);
  }
  uint64_t v6 = (sirinluinternal::Token **)*((void *)this + 5);
  long long v7 = (sirinluinternal::Token **)*((void *)this + 6);
  if (v6 == v7)
  {
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = 0;
    do
    {
      long long v9 = *v6++;
      v8 ^= sirinluinternal::Token::hash_value(v9);
    }
    while (v6 != v7);
  }
  unint64_t v10 = *((void *)this + 1);
  if (v10) {
    unint64_t v10 = std::__string_hash<char>::operator()[abi:ne180100](v10);
  }
  if ((*((unsigned char *)this + 76) & 2) != 0)
  {
    uint64_t v11 = *((unsigned __int8 *)this + 72);
    if (*((unsigned char *)this + 76)) {
      goto LABEL_15;
    }
LABEL_17:
    uint64_t v12 = 0;
    return v8 ^ v4 ^ v10 ^ v11 ^ v12;
  }
  uint64_t v11 = 0;
  if ((*((unsigned char *)this + 76) & 1) == 0) {
    goto LABEL_17;
  }
LABEL_15:
  uint64_t v12 = *((void *)this + 8);
  return v8 ^ v4 ^ v10 ^ v11 ^ v12;
}

BOOL SIRINLUEXTERNALUserWantedToUndoReadFrom(uint64_t a1, uint64_t a2)
{
  int v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    long long v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = objc_alloc_init(SIRINLUEXTERNALUUID);
        objc_storeStrong((id *)(a1 + 16), v17);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_30;
        }
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_27:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v17 = objc_alloc_init(SIRINLUEXTERNALUsoGraph);
    objc_storeStrong((id *)(a1 + 8), v17);
    if (!PBReaderPlaceMark() || !SIRINLUEXTERNALUsoGraphReadFrom((id *)&v17->super.super.isa, a2))
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t SIRINLUINTERNALCATICATIResponseReadFrom(void *a1, uint64_t a2)
{
  int v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    long long v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = objc_alloc_init(SIRINLUEXTERNALUserParse);
        [a1 addHypotheses:v17];
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALUserParseReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sirinluexternalcdm_planner::CDMPlannerRequestIdentifier::formatText(sirinluexternalcdm_planner::CDMPlannerRequestIdentifier *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((void *)this + 1)) {
    PB::TextFormatter::format();
  }
  if (*((void *)this + 2)) {
    PB::TextFormatter::format();
  }
  if (*((void *)this + 3)) {
    PB::TextFormatter::format();
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluexternalcdm_planner::CDMPlannerRequestIdentifier::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v2 = this;
  if (*(void *)(this + 24)) {
    this = PB::Writer::write();
  }
  if (*(void *)(v2 + 16)) {
    this = PB::Writer::write();
  }
  if (*(void *)(v2 + 8))
  {
    return PB::Writer::write();
  }
  return this;
}

BOOL sirinluexternalcdm_planner::CDMPlannerRequestIdentifier::readFrom(sirinluexternalcdm_planner::CDMPlannerRequestIdentifier *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_25;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v18 = v10 >> 3;
      if ((v10 >> 3) == 3) {
        operator new();
      }
      if (v18 == 2) {
        operator new();
      }
      if (v18 == 1) {
        operator new();
      }
LABEL_25:
      if ((PB::Reader::skip(a2) & 1) == 0) {
        return 0;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_25;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluexternalcdm_planner::CDMPlannerRequestIdentifier::~CDMPlannerRequestIdentifier(sirinluexternalcdm_planner::CDMPlannerRequestIdentifier *this)
{
  sirinluexternalcdm_planner::CDMPlannerRequestIdentifier::~CDMPlannerRequestIdentifier(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)this = &unk_1F232CFC8;
  unint64_t v2 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v2) {
    std::default_delete<std::string>::operator()[abi:ne180100](v2);
  }
  unint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    std::default_delete<std::string>::operator()[abi:ne180100](v3);
  }
  int v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    std::default_delete<std::string>::operator()[abi:ne180100](v4);
  }
  PB::Base::~Base(this);
}

void *sirinluexternalcdm_planner::CDMPlannerRequestIdentifier::CDMPlannerRequestIdentifier(void *this)
{
  *this = &unk_1F232CFC8;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = &unk_1F232CFC8;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

void *sirinluexternalcdm_planner::CDMPlannerRequestIdentifier::CDMPlannerRequestIdentifier(void *this, const sirinluexternalcdm_planner::CDMPlannerRequestIdentifier *a2)
{
  *this = &unk_1F232CFC8;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  if (*((void *)a2 + 3)) {
    operator new();
  }
  if (*((void *)a2 + 2)) {
    operator new();
  }
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternalcdm_planner::CDMPlannerRequestIdentifier::operator=(uint64_t a1, const sirinluexternalcdm_planner::CDMPlannerRequestIdentifier *a2)
{
  if ((const sirinluexternalcdm_planner::CDMPlannerRequestIdentifier *)a1 != a2)
  {
    sirinluexternalcdm_planner::CDMPlannerRequestIdentifier::CDMPlannerRequestIdentifier(&v6, a2);
    uint64_t v3 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v8;
    uint64_t v8 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v4;
    sirinluexternalcdm_planner::CDMPlannerRequestIdentifier::~CDMPlannerRequestIdentifier((sirinluexternalcdm_planner::CDMPlannerRequestIdentifier *)&v6);
  }
  return a1;
}

void *sirinluexternalcdm_planner::swap(void *this, sirinluexternalcdm_planner::CDMPlannerRequestIdentifier *a2, sirinluexternalcdm_planner::CDMPlannerRequestIdentifier *a3)
{
  uint64_t v3 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v3;
  uint64_t v4 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  return this;
}

void *sirinluexternalcdm_planner::CDMPlannerRequestIdentifier::CDMPlannerRequestIdentifier(void *a1, void *a2)
{
  *a1 = &unk_1F232CFC8;
  a1[1] = 0;
  uint64_t v4 = a1 + 1;
  a1[2] = 0;
  a1[3] = 0;
  uint64_t v5 = a2[3];
  a2[3] = 0;
  uint64_t v6 = a1[3];
  a1[3] = v5;
  if (v6) {
    std::default_delete<std::string>::operator()[abi:ne180100](v6);
  }
  uint64_t v7 = a2[2];
  a2[2] = 0;
  uint64_t v8 = a1[2];
  a1[2] = v7;
  if (v8) {
    std::default_delete<std::string>::operator()[abi:ne180100](v8);
  }
  uint64_t v9 = a2[1];
  a2[1] = 0;
  uint64_t v10 = *v4;
  *uint64_t v4 = v9;
  if (v10) {
    std::default_delete<std::string>::operator()[abi:ne180100](v10);
  }
  return a1;
}

uint64_t sirinluexternalcdm_planner::CDMPlannerRequestIdentifier::operator=(uint64_t a1, void *a2)
{
  if ((void *)a1 != a2)
  {
    sirinluexternalcdm_planner::CDMPlannerRequestIdentifier::CDMPlannerRequestIdentifier(&v6, a2);
    uint64_t v3 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v8;
    uint64_t v8 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v4;
    sirinluexternalcdm_planner::CDMPlannerRequestIdentifier::~CDMPlannerRequestIdentifier((sirinluexternalcdm_planner::CDMPlannerRequestIdentifier *)&v6);
  }
  return a1;
}

uint64_t sirinluexternalcdm_planner::CDMPlannerRequestIdentifier::operator==(void *a1, void *a2)
{
  long long v4 = (unsigned __int8 *)a1[3];
  uint64_t v5 = (unsigned __int8 **)a2[3];
  if (v4)
  {
    if (!v5) {
      return 0;
    }
    uint64_t v6 = v4[23];
    if ((v6 & 0x80u) == 0) {
      long long v7 = (unsigned __int8 *)v4[23];
    }
    else {
      long long v7 = (unsigned __int8 *)*((void *)v4 + 1);
    }
    uint64_t v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    int v9 = (char)v8;
    if ((char)v8 < 0) {
      uint64_t v8 = v5[1];
    }
    if (v7 != v8) {
      return 0;
    }
    if (v9 >= 0) {
      uint64_t v10 = (unsigned __int8 *)a2[3];
    }
    else {
      uint64_t v10 = *v5;
    }
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v10, *((void *)v4 + 1))) {
        return 0;
      }
    }
    else if (v4[23])
    {
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6) {
          goto LABEL_21;
        }
      }
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
LABEL_21:
  char v12 = (unsigned __int8 *)a1[2];
  BOOL v13 = (unsigned __int8 **)a2[2];
  if (v12)
  {
    if (!v13) {
      return 0;
    }
    uint64_t v14 = v12[23];
    if ((v14 & 0x80u) == 0) {
      unsigned int v15 = (unsigned __int8 *)v12[23];
    }
    else {
      unsigned int v15 = (unsigned __int8 *)*((void *)v12 + 1);
    }
    unint64_t v16 = (unsigned __int8 *)*((unsigned __int8 *)v13 + 23);
    int v17 = (char)v16;
    if ((char)v16 < 0) {
      unint64_t v16 = v13[1];
    }
    if (v15 != v16) {
      return 0;
    }
    if (v17 >= 0) {
      unint64_t v18 = (unsigned __int8 *)a2[2];
    }
    else {
      unint64_t v18 = *v13;
    }
    if ((v14 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v12, v18, *((void *)v12 + 1))) {
        return 0;
      }
    }
    else if (v12[23])
    {
      while (*v12 == *v18)
      {
        ++v12;
        ++v18;
        if (!--v14) {
          goto LABEL_38;
        }
      }
      return 0;
    }
  }
  else if (v13)
  {
    return 0;
  }
LABEL_38:
  char v19 = (unsigned __int8 *)a1[1];
  unint64_t v20 = (unsigned __int8 **)a2[1];
  uint64_t result = v20 == 0;
  if (!v19) {
    return result;
  }
  if (!v20) {
    return 0;
  }
  uint64_t v21 = v19[23];
  if ((v21 & 0x80u) == 0) {
    uint64_t v22 = (unsigned __int8 *)v19[23];
  }
  else {
    uint64_t v22 = (unsigned __int8 *)*((void *)v19 + 1);
  }
  char v23 = (unsigned __int8 *)*((unsigned __int8 *)v20 + 23);
  int v24 = (char)v23;
  if ((char)v23 < 0) {
    char v23 = v20[1];
  }
  if (v22 != v23) {
    return 0;
  }
  if (v24 >= 0) {
    uint64_t v25 = (unsigned __int8 *)a2[1];
  }
  else {
    uint64_t v25 = *v20;
  }
  if ((v21 & 0x80) != 0) {
    return !memcmp(*(const void **)v19, v25, *((void *)v19 + 1));
  }
  if (!v19[23]) {
    return 1;
  }
  uint64_t v26 = v21 - 1;
  do
  {
    int v28 = *v19++;
    int v27 = v28;
    int v30 = *v25++;
    int v29 = v30;
    BOOL v32 = v26-- != 0;
    uint64_t result = v27 == v29;
  }
  while (v27 == v29 && v32);
  return result;
}

unint64_t sirinluexternalcdm_planner::CDMPlannerRequestIdentifier::hash_value(sirinluexternalcdm_planner::CDMPlannerRequestIdentifier *this)
{
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    unint64_t v3 = std::__string_hash<char>::operator()[abi:ne180100](v2);
  }
  else {
    unint64_t v3 = 0;
  }
  uint64_t v4 = *((void *)this + 2);
  if (v4) {
    unint64_t v5 = std::__string_hash<char>::operator()[abi:ne180100](v4);
  }
  else {
    unint64_t v5 = 0;
  }
  unint64_t v6 = *((void *)this + 1);
  if (v6) {
    unint64_t v6 = std::__string_hash<char>::operator()[abi:ne180100](v6);
  }
  return v5 ^ v3 ^ v6;
}

uint64_t sirinluexternalnlu_router::TurnSummary::formatText(sirinluexternalnlu_router::TurnSummary *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((void *)this + 1)) {
    PB::TextFormatter::format();
  }
  if (*((unsigned char *)this + 36)) {
    PB::TextFormatter::format(a2, "execution_source");
  }
  uint64_t v5 = *((void *)this + 2);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "gen_ai_metadata");
  }
  if (*((void *)this + 3)) {
    PB::TextFormatter::format();
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluexternalnlu_router::TurnSummary::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if (*(void *)(this + 8)) {
    this = PB::Writer::write();
  }
  if (*(void *)(v3 + 24)) {
    this = PB::Writer::write();
  }
  if (*(unsigned char *)(v3 + 36)) {
    this = PB::Writer::writeVarInt(a2);
  }
  uint64_t v4 = *(const PB::Base **)(v3 + 16);
  if (v4)
  {
    return PB::Writer::writeSubmessage(a2, v4);
  }
  return this;
}

uint64_t sirinluexternalnlu_router::TurnSummary::readFrom(sirinluexternalnlu_router::TurnSummary *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
      break;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      int v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        operator new();
      case 2u:
        operator new();
      case 3u:
        *((unsigned char *)this + 36) |= 1u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v21 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v20 <= 0xFFFFFFFFFFFFFFF5 && v20 + 10 <= v21)
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          do
          {
            unint64_t v26 = v20 + 1;
            *((void *)a2 + 1) = v20 + 1;
            char v27 = *(unsigned char *)(v22 + v20);
            v25 |= (unint64_t)(v27 & 0x7F) << v23;
            if ((v27 & 0x80) == 0) {
              goto LABEL_43;
            }
            v23 += 7;
            unint64_t v20 = v26;
            BOOL v14 = v24++ > 8;
          }
          while (!v14);
LABEL_39:
          LODWORD(v25) = 0;
          goto LABEL_43;
        }
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v25 = 0;
        if (v21 <= v20) {
          unint64_t v21 = *((void *)a2 + 1);
        }
        break;
      case 4u:
        operator new();
      default:
        goto LABEL_19;
    }
    while (1)
    {
      if (v21 == v20)
      {
        LODWORD(v25) = 0;
        *((unsigned char *)a2 + 24) = 1;
        goto LABEL_43;
      }
      unint64_t v30 = v20 + 1;
      char v31 = *(unsigned char *)(v22 + v20);
      *((void *)a2 + 1) = v30;
      v25 |= (unint64_t)(v31 & 0x7F) << v28;
      if ((v31 & 0x80) == 0) {
        break;
      }
      v28 += 7;
      unint64_t v20 = v30;
      BOOL v14 = v29++ > 8;
      if (v14) {
        goto LABEL_39;
      }
    }
    if (*((unsigned char *)a2 + 24)) {
      LODWORD(v25) = 0;
    }
LABEL_43:
    *((_DWORD *)this + 8) = v25;
LABEL_44:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  char v15 = 0;
  unsigned int v16 = 0;
  unint64_t v11 = 0;
  if (v2 > v3) {
    unint64_t v3 = v2;
  }
  do
  {
    if (v3 == v2)
    {
      int v4 = 1;
      *((unsigned char *)a2 + 24) = 1;
      return v4 == 0;
    }
    unint64_t v17 = v2 + 1;
    char v18 = *(unsigned char *)(v8 + v2);
    *((void *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0) {
      goto LABEL_21;
    }
    v15 += 7;
    unint64_t v2 = v17;
    BOOL v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  uint64_t result = PB::Reader::skip(a2);
  if (result) {
    goto LABEL_44;
  }
  return result;
}

void sirinluexternalnlu_router::TurnSummary::~TurnSummary(sirinluexternalnlu_router::TurnSummary *this)
{
  sirinluexternalnlu_router::TurnSummary::~TurnSummary(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)this = &unk_1F232D018;
  unint64_t v2 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v2) {
    std::default_delete<std::string>::operator()[abi:ne180100](v2);
  }
  unint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    std::default_delete<std::string>::operator()[abi:ne180100](v4);
  }
  PB::Base::~Base(this);
}

double sirinluexternalnlu_router::TurnSummary::TurnSummary(sirinluexternalnlu_router::TurnSummary *this)
{
  *(void *)this = &unk_1F232D018;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

{
  double result;

  *(void *)this = &unk_1F232D018;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

uint64_t sirinluexternalnlu_router::TurnSummary::TurnSummary(uint64_t this, const sirinluexternalnlu_router::TurnSummary *a2)
{
  *(void *)this = &unk_1F232D018;
  *(_OWORD *)(this + 8) = 0u;
  *(_OWORD *)(this + 24) = 0u;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  if (*((void *)a2 + 3)) {
    operator new();
  }
  if (*((unsigned char *)a2 + 36))
  {
    int v2 = *((_DWORD *)a2 + 8);
    *(unsigned char *)(this + 36) |= 1u;
    *(_DWORD *)(this + 32) = v2;
  }
  if (*((void *)a2 + 2)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternalnlu_router::TurnSummary::operator=(uint64_t a1, const sirinluexternalnlu_router::TurnSummary *a2)
{
  if ((const sirinluexternalnlu_router::TurnSummary *)a1 != a2)
  {
    sirinluexternalnlu_router::TurnSummary::TurnSummary((uint64_t)v7, a2);
    uint64_t v3 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v9;
    uint64_t v9 = v3;
    uint64_t v4 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v10;
    uint64_t v10 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v5;
    sirinluexternalnlu_router::TurnSummary::~TurnSummary((sirinluexternalnlu_router::TurnSummary *)v7);
  }
  return a1;
}

uint64_t sirinluexternalnlu_router::swap(uint64_t this, sirinluexternalnlu_router::TurnSummary *a2, sirinluexternalnlu_router::TurnSummary *a3)
{
  int v3 = *(_DWORD *)(this + 36);
  *(_DWORD *)(this + 36) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v3;
  uint64_t v4 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  uint64_t v5 = *(void *)(this + 24);
  *(void *)(this + 24) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  LODWORD(v5) = *(_DWORD *)(this + 32);
  *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v5;
  uint64_t v6 = *(void *)(this + 16);
  *(void *)(this + 16) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  return this;
}

uint64_t sirinluexternalnlu_router::TurnSummary::TurnSummary(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F232D018;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  if (v5) {
    std::default_delete<std::string>::operator()[abi:ne180100](v5);
  }
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v6;
  if (v7) {
    std::default_delete<std::string>::operator()[abi:ne180100](v7);
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v8;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  return a1;
}

uint64_t sirinluexternalnlu_router::TurnSummary::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sirinluexternalnlu_router::TurnSummary::TurnSummary((uint64_t)v7, a2);
    uint64_t v3 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v9;
    uint64_t v9 = v3;
    uint64_t v4 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v10;
    uint64_t v10 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v5;
    sirinluexternalnlu_router::TurnSummary::~TurnSummary((sirinluexternalnlu_router::TurnSummary *)v7);
  }
  return a1;
}

BOOL sirinluexternalnlu_router::TurnSummary::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned __int8 **)(a1 + 8);
  long long v5 = *(unsigned __int8 ***)(a2 + 8);
  if (v4)
  {
    if (!v5) {
      return 0;
    }
    uint64_t v6 = v4[23];
    if ((v6 & 0x80u) == 0) {
      uint64_t v7 = (unsigned __int8 *)v4[23];
    }
    else {
      uint64_t v7 = (unsigned __int8 *)*((void *)v4 + 1);
    }
    long long v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    int v9 = (char)v8;
    if ((char)v8 < 0) {
      long long v8 = v5[1];
    }
    if (v7 != v8) {
      return 0;
    }
    if (v9 >= 0) {
      uint64_t v10 = *(unsigned __int8 **)(a2 + 8);
    }
    else {
      uint64_t v10 = *v5;
    }
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v10, *((void *)v4 + 1))) {
        return 0;
      }
    }
    else if (v4[23])
    {
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6) {
          goto LABEL_18;
        }
      }
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
LABEL_18:
  unint64_t v11 = *(unsigned __int8 **)(a1 + 24);
  unint64_t v12 = *(unsigned __int8 ***)(a2 + 24);
  if (!v11)
  {
    if (!v12) {
      goto LABEL_35;
    }
    return 0;
  }
  if (!v12) {
    return 0;
  }
  uint64_t v13 = v11[23];
  if ((v13 & 0x80u) == 0) {
    BOOL v14 = (unsigned __int8 *)v11[23];
  }
  else {
    BOOL v14 = (unsigned __int8 *)*((void *)v11 + 1);
  }
  char v15 = (unsigned __int8 *)*((unsigned __int8 *)v12 + 23);
  int v16 = (char)v15;
  if ((char)v15 < 0) {
    char v15 = v12[1];
  }
  if (v14 != v15) {
    return 0;
  }
  if (v16 >= 0) {
    unint64_t v17 = *(unsigned __int8 **)(a2 + 24);
  }
  else {
    unint64_t v17 = *v12;
  }
  if ((v13 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)v11, v17, *((void *)v11 + 1))) {
      goto LABEL_35;
    }
    return 0;
  }
  if (v11[23])
  {
    while (*v11 == *v17)
    {
      ++v11;
      ++v17;
      if (!--v13) {
        goto LABEL_35;
      }
    }
    return 0;
  }
LABEL_35:
  if (*(unsigned char *)(a1 + 36))
  {
    if ((*(unsigned char *)(a2 + 36) & 1) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 36))
  {
    return 0;
  }
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t v19 = *(void *)(a2 + 16);
  BOOL result = (v18 | v19) == 0;
  if (v18 && v19)
  {
    uint64_t v21 = *(void *)(a1 + 16);
    return sirinluexternalnlu_router::NLRoutingGenAIMetadata::operator==(v21, v19);
  }
  return result;
}

unint64_t sirinluexternalnlu_router::TurnSummary::hash_value(sirinluexternalnlu_router::TurnSummary *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    unint64_t v3 = std::__string_hash<char>::operator()[abi:ne180100](v2);
  }
  else {
    unint64_t v3 = 0;
  }
  unint64_t v4 = *((void *)this + 3);
  if (v4) {
    unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100](v4);
  }
  if (*((unsigned char *)this + 36)) {
    uint64_t v5 = *((int *)this + 8);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *((void *)this + 2);
  if (v6)
  {
    if (*(unsigned char *)(v6 + 16))
    {
      uint64_t v7 = *(int *)(v6 + 8);
      if ((*(unsigned char *)(v6 + 16) & 2) != 0) {
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v7 = 0;
      if ((*(unsigned char *)(v6 + 16) & 2) != 0)
      {
LABEL_12:
        uint64_t v8 = *(int *)(v6 + 12);
LABEL_15:
        uint64_t v6 = v8 ^ v7;
        return v4 ^ v3 ^ v5 ^ v6;
      }
    }
    uint64_t v8 = 0;
    goto LABEL_15;
  }
  return v4 ^ v3 ^ v5 ^ v6;
}

uint64_t sirinluexternalnlu_router::TurnSummary::makeGenAiMetadata(uint64_t this)
{
  if (!*(void *)(this + 16)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternal::AsrHypothesis::formatText(sirinluexternal::AsrHypothesis *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = (uint64_t *)*((void *)this + 1);
  uint64_t v6 = (uint64_t *)*((void *)this + 2);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "asr_tokens");
  }
  uint64_t v8 = *((void *)this + 4);
  if (v8) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v8 + 32))(v8, a2, "id_a");
  }
  if (*((unsigned char *)this + 80)) {
    PB::TextFormatter::format(a2, "probability", *((double *)this + 5));
  }
  int v9 = (uint64_t *)*((void *)this + 6);
  uint64_t v10 = (uint64_t *)*((void *)this + 7);
  while (v9 != v10)
  {
    uint64_t v11 = *v9++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v11 + 32))(v11, a2, "rewritten_utterances");
  }
  if (*((void *)this + 9)) {
    PB::TextFormatter::format();
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluexternal::AsrHypothesis::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  unint64_t v4 = *(const PB::Base **)(this + 32);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  if (*(void *)(v3 + 72)) {
    this = PB::Writer::write();
  }
  if (*(unsigned char *)(v3 + 80)) {
    this = PB::Writer::write(a2, *(double *)(v3 + 40));
  }
  uint64_t v5 = *(const PB::Base ***)(v3 + 8);
  uint64_t v6 = *(const PB::Base ***)(v3 + 16);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    this = PB::Writer::writeSubmessage(a2, v7);
  }
  int v9 = *(const PB::Base ***)(v3 + 48);
  uint64_t v8 = *(const PB::Base ***)(v3 + 56);
  while (v9 != v8)
  {
    uint64_t v10 = *v9++;
    this = PB::Writer::writeSubmessage(a2, v10);
  }
  return this;
}

uint64_t sirinluexternal::AsrHypothesis::readFrom(sirinluexternal::AsrHypothesis *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3) {
        break;
      }
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
LABEL_31:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) != 4)
    {
      switch((v11 >> 3))
      {
        case 1u:
          operator new();
        case 2u:
          operator new();
        case 3u:
          *((unsigned char *)this + 80) |= 1u;
          unint64_t v20 = *((void *)a2 + 1);
          if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *((void *)a2 + 2))
          {
            *((void *)this + 5) = *(void *)(*(void *)a2 + v20);
            *((void *)a2 + 1) += 8;
          }
          else
          {
            *((unsigned char *)a2 + 24) = 1;
          }
          goto LABEL_31;
        case 4u:
          operator new();
        case 5u:
          operator new();
        default:
          goto LABEL_19;
      }
    }
    int v4 = 0;
  }
  return v4 == 0;
}

void sub_1C8B49A44(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sirinluexternal::AsrHypothesis::~AsrHypothesis(sirinluexternal::AsrHypothesis *this)
{
  sirinluexternal::AsrHypothesis::~AsrHypothesis(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1F232D068;
  unint64_t v2 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v2) {
    std::default_delete<std::string>::operator()[abi:ne180100](v2);
  }
  if (*((void *)this + 6))
  {
    std::vector<std::unique_ptr<siricommon::StringValue>>::__clear[abi:ne180100]((void *)this + 6);
    operator delete(*((void **)this + 6));
  }
  unint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*((void *)this + 1))
  {
    std::vector<std::unique_ptr<siricommon::StringValue>>::__clear[abi:ne180100]((void *)this + 1);
    operator delete(*((void **)this + 1));
  }
  PB::Base::~Base(this);
}

double sirinluexternal::AsrHypothesis::AsrHypothesis(sirinluexternal::AsrHypothesis *this)
{
  *(void *)this = &unk_1F232D068;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_DWORD *)this + 20) = 0;
  return result;
}

{
  double result;

  *(void *)this = &unk_1F232D068;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_DWORD *)this + 20) = 0;
  return result;
}

uint64_t sirinluexternal::AsrHypothesis::AsrHypothesis(uint64_t this, const sirinluexternal::AsrHypothesis *a2)
{
  *(void *)this = &unk_1F232D068;
  *(_OWORD *)(this + 8) = 0u;
  *(_OWORD *)(this + 48) = 0u;
  *(_OWORD *)(this + 24) = 0u;
  *(_OWORD *)(this + 64) = 0u;
  *(_DWORD *)(this + 80) = 0;
  if (*((void *)a2 + 4)) {
    operator new();
  }
  if (*((void *)a2 + 9)) {
    operator new();
  }
  if (*((unsigned char *)a2 + 80))
  {
    uint64_t v2 = *((void *)a2 + 5);
    *(unsigned char *)(this + 80) |= 1u;
    *(void *)(this + 40) = v2;
  }
  if (*((void *)a2 + 1) != *((void *)a2 + 2)) {
    operator new();
  }
  if (*((void *)a2 + 6) != *((void *)a2 + 7)) {
    operator new();
  }
  return this;
}

void sub_1C8B49F28(void *a1)
{
}

uint64_t sirinluexternal::AsrHypothesis::operator=(uint64_t a1, const sirinluexternal::AsrHypothesis *a2)
{
  if ((const sirinluexternal::AsrHypothesis *)a1 != a2)
  {
    sirinluexternal::AsrHypothesis::AsrHypothesis((uint64_t)v11, a2);
    uint64_t v3 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v14;
    uint64_t v14 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v12;
    long long v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v13;
    long long v12 = v4;
    long long v13 = v5;
    long long v6 = v16;
    long long v7 = *(_OWORD *)(a1 + 48);
    long long v8 = *(_OWORD *)(a1 + 64);
    *(_OWORD *)(a1 + 48) = v15;
    *(_OWORD *)(a1 + 64) = v6;
    int v9 = *(_DWORD *)(a1 + 80);
    *(_DWORD *)(a1 + 80) = v17;
    int v17 = v9;
    long long v15 = v7;
    long long v16 = v8;
    sirinluexternal::AsrHypothesis::~AsrHypothesis((sirinluexternal::AsrHypothesis *)v11);
  }
  return a1;
}

double sirinluexternal::swap(sirinluexternal *this, sirinluexternal::AsrHypothesis *a2, sirinluexternal::AsrHypothesis *a3)
{
  int v3 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v3;
  uint64_t v4 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v4;
  uint64_t v5 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v5;
  double result = *((double *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((double *)a2 + 5) = result;
  uint64_t v7 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v7;
  uint64_t v8 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v8;
  uint64_t v9 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v9;
  uint64_t v10 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v10;
  uint64_t v11 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v11;
  uint64_t v12 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v12;
  return result;
}

uint64_t sirinluexternal::AsrHypothesis::AsrHypothesis(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F232D068;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v4 = (void **)(a1 + 8);
  *(_OWORD *)(a1 + 48) = 0u;
  uint64_t v5 = (void **)(a1 + 48);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a2 + 80) = 0;
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  uint64_t v7 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *(void *)(a2 + 72);
  *(void *)(a2 + 72) = 0;
  uint64_t v9 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = v8;
  if (v9) {
    std::default_delete<std::string>::operator()[abi:ne180100](v9);
  }
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  if (*(void *)(a1 + 8))
  {
    std::vector<std::unique_ptr<siricommon::StringValue>>::__clear[abi:ne180100](v4);
    operator delete(*v4);
    *uint64_t v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (*(void *)(a1 + 48))
  {
    std::vector<std::unique_ptr<siricommon::StringValue>>::__clear[abi:ne180100](v5);
    operator delete(*v5);
    *uint64_t v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  return a1;
}

uint64_t sirinluexternal::AsrHypothesis::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sirinluexternal::AsrHypothesis::AsrHypothesis((uint64_t)v11, a2);
    uint64_t v3 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v14;
    uint64_t v14 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v12;
    long long v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v13;
    long long v12 = v4;
    long long v13 = v5;
    long long v6 = v16;
    long long v7 = *(_OWORD *)(a1 + 48);
    long long v8 = *(_OWORD *)(a1 + 64);
    *(_OWORD *)(a1 + 48) = v15;
    *(_OWORD *)(a1 + 64) = v6;
    int v9 = *(_DWORD *)(a1 + 80);
    *(_DWORD *)(a1 + 80) = v17;
    int v17 = v9;
    long long v15 = v7;
    long long v16 = v8;
    sirinluexternal::AsrHypothesis::~AsrHypothesis((sirinluexternal::AsrHypothesis *)v11);
  }
  return a1;
}

BOOL sirinluexternal::AsrHypothesis::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a2 + 32);
  if (v4)
  {
    if (!v5 || !sirinluexternal::UUID::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  long long v6 = *(unsigned __int8 **)(a1 + 72);
  long long v7 = *(unsigned __int8 ***)(a2 + 72);
  if (!v6)
  {
    if (!v7) {
      goto LABEL_23;
    }
    return 0;
  }
  if (!v7) {
    return 0;
  }
  uint64_t v8 = v6[23];
  if ((v8 & 0x80u) == 0) {
    int v9 = (unsigned __int8 *)v6[23];
  }
  else {
    int v9 = (unsigned __int8 *)*((void *)v6 + 1);
  }
  uint64_t v10 = (unsigned __int8 *)*((unsigned __int8 *)v7 + 23);
  int v11 = (char)v10;
  if ((char)v10 < 0) {
    uint64_t v10 = v7[1];
  }
  if (v9 != v10) {
    return 0;
  }
  if (v11 >= 0) {
    long long v12 = *(unsigned __int8 **)(a2 + 72);
  }
  else {
    long long v12 = *v7;
  }
  if ((v8 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)v6, v12, *((void *)v6 + 1))) {
      goto LABEL_23;
    }
    return 0;
  }
  if (v6[23])
  {
    while (*v6 == *v12)
    {
      ++v6;
      ++v12;
      if (!--v8) {
        goto LABEL_23;
      }
    }
    return 0;
  }
LABEL_23:
  if (*(unsigned char *)(a1 + 80))
  {
    if ((*(unsigned char *)(a2 + 80) & 1) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 80))
  {
    return 0;
  }
  uint64_t v14 = *(uint64_t **)(a1 + 8);
  long long v13 = *(uint64_t **)(a1 + 16);
  long long v15 = *(uint64_t **)(a2 + 8);
  if ((char *)v13 - (char *)v14 != *(void *)(a2 + 16) - (void)v15) {
    return 0;
  }
  while (v14 != v13)
  {
    BOOL result = sirinluexternal::AsrTokenInformation::operator==(*v14, *v15);
    if (!result) {
      return result;
    }
    ++v14;
    ++v15;
  }
  uint64_t v17 = *(void *)(a1 + 48);
  uint64_t v18 = *(void *)(a1 + 56);
  uint64_t v20 = a2 + 48;
  uint64_t v19 = *(uint64_t **)(a2 + 48);
  if (v18 - v17 != *(void *)(v20 + 8) - (void)v19) {
    return 0;
  }
  if (v17 == v18) {
    return 1;
  }
  uint64_t v21 = v17 + 8;
  do
  {
    uint64_t v22 = *v19++;
    BOOL result = sirinluexternal::RewrittenUtterance::operator==(*(void *)(v21 - 8), v22);
    BOOL v23 = !result || v21 == v18;
    v21 += 8;
  }
  while (!v23);
  return result;
}

unint64_t sirinluexternal::AsrHypothesis::hash_value(sirinluexternal::AsrHypothesis *this)
{
  uint64_t v2 = *((void *)this + 4);
  if (!v2)
  {
    uint64_t v6 = 0;
    goto LABEL_11;
  }
  if ((*(unsigned char *)(v2 + 28) & 1) == 0)
  {
    uint64_t v3 = 0;
    if ((*(unsigned char *)(v2 + 28) & 2) != 0) {
      goto LABEL_4;
    }
LABEL_8:
    uint64_t v4 = 0;
    if ((*(unsigned char *)(v2 + 28) & 4) != 0) {
      goto LABEL_5;
    }
LABEL_9:
    uint64_t v5 = 0;
    goto LABEL_10;
  }
  uint64_t v3 = *(void *)(v2 + 8);
  if ((*(unsigned char *)(v2 + 28) & 2) == 0) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v4 = *(void *)(v2 + 16);
  if ((*(unsigned char *)(v2 + 28) & 4) == 0) {
    goto LABEL_9;
  }
LABEL_5:
  uint64_t v5 = *(int *)(v2 + 24);
LABEL_10:
  uint64_t v6 = v4 ^ v3 ^ v5;
LABEL_11:
  uint64_t v7 = *((void *)this + 9);
  if (v7) {
    unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](v7);
  }
  else {
    unint64_t v8 = 0;
  }
  if (*((unsigned char *)this + 80))
  {
    if (*((double *)this + 5) == 0.0) {
      uint64_t v9 = 0;
    }
    else {
      uint64_t v9 = *((void *)this + 5);
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v10 = (sirinluexternal::AsrTokenInformation **)*((void *)this + 1);
  int v11 = (sirinluexternal::AsrTokenInformation **)*((void *)this + 2);
  if (v10 == v11)
  {
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t v12 = 0;
    do
    {
      long long v13 = *v10++;
      v12 ^= sirinluexternal::AsrTokenInformation::hash_value(v13);
    }
    while (v10 != v11);
  }
  long long v15 = (sirinluexternal::RewrittenUtterance **)*((void *)this + 6);
  uint64_t v14 = (sirinluexternal::RewrittenUtterance **)*((void *)this + 7);
  if (v15 == v14)
  {
    uint64_t v16 = 0;
  }
  else
  {
    uint64_t v16 = 0;
    do
    {
      uint64_t v17 = *v15++;
      v16 ^= sirinluexternal::RewrittenUtterance::hash_value(v17);
    }
    while (v15 != v14);
  }
  return v8 ^ v6 ^ v9 ^ v12 ^ v16;
}

uint64_t sirinluexternal::AsrHypothesis::makeIdA(uint64_t this)
{
  if (!*(void *)(this + 32)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternal::NLUSupplementaryOutput::formatText(sirinluexternal::NLUSupplementaryOutput *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "correction_outcome");
  }
  uint64_t v6 = (uint64_t *)*((void *)this + 2);
  uint64_t v7 = (uint64_t *)*((void *)this + 3);
  while (v6 != v7)
  {
    uint64_t v8 = *v6++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v8 + 32))(v8, a2, "matching_spans");
  }
  uint64_t v9 = *((void *)this + 5);
  if (v9) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v9 + 32))(v9, a2, "rewrite");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluexternal::NLUSupplementaryOutput::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *(const PB::Base ***)(this + 16);
  uint64_t v5 = *(const PB::Base ***)(this + 24);
  while (v4 != v5)
  {
    uint64_t v6 = *v4++;
    this = PB::Writer::writeSubmessage(a2, v6);
  }
  uint64_t v7 = *(const PB::Base **)(v3 + 40);
  if (v7) {
    this = PB::Writer::writeSubmessage(a2, v7);
  }
  uint64_t v8 = *(const PB::Base **)(v3 + 8);
  if (v8)
  {
    return PB::Writer::writeSubmessage(a2, v8);
  }
  return this;
}

uint64_t sirinluexternal::NLUSupplementaryOutput::readFrom(sirinluexternal::NLUSupplementaryOutput *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_25;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v18 = v10 >> 3;
      if ((v10 >> 3) == 3) {
        operator new();
      }
      if (v18 == 2) {
        operator new();
      }
      if (v18 == 1) {
        PB::PtrVector<sirinluexternal::Span>::emplace_back<>();
      }
LABEL_25:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_25;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void PB::PtrVector<sirinluexternal::Span>::emplace_back<>()
{
}

void sub_1C8B4ABA0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sirinluexternal::NLUSupplementaryOutput::~NLUSupplementaryOutput(sirinluexternal::NLUSupplementaryOutput *this)
{
  sirinluexternal::NLUSupplementaryOutput::~NLUSupplementaryOutput(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t v3;
  void **v4;
  uint64_t vars8;

  *(void *)this = &unk_1F232D0B8;
  unint64_t v2 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  int v4 = (void **)((char *)this + 16);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v4);
  unint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  PB::Base::~Base(this);
}

double sirinluexternal::NLUSupplementaryOutput::NLUSupplementaryOutput(sirinluexternal::NLUSupplementaryOutput *this)
{
  *(void *)this = &unk_1F232D0B8;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 5) = 0;
  return result;
}

{
  double result;

  *(void *)this = &unk_1F232D0B8;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 5) = 0;
  return result;
}

uint64_t sirinluexternal::NLUSupplementaryOutput::NLUSupplementaryOutput(uint64_t this, const sirinluexternal::NLUSupplementaryOutput *a2)
{
  *(_OWORD *)(this + 8) = 0u;
  *(void *)this = &unk_1F232D0B8;
  *(_OWORD *)(this + 24) = 0u;
  *(void *)(this + 40) = 0;
  if (*((void *)a2 + 2) != *((void *)a2 + 3)) {
    PB::PtrVector<sirinluexternal::Span>::emplace_back<sirinluexternal::Span const&>();
  }
  if (*((void *)a2 + 5)) {
    operator new();
  }
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

void PB::PtrVector<sirinluexternal::Span>::emplace_back<sirinluexternal::Span const&>()
{
}

void sub_1C8B4AFB8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sirinluexternal::NLUSupplementaryOutput::operator=(uint64_t a1, const sirinluexternal::NLUSupplementaryOutput *a2)
{
  if ((const sirinluexternal::NLUSupplementaryOutput *)a1 != a2)
  {
    sirinluexternal::NLUSupplementaryOutput::NLUSupplementaryOutput((uint64_t)&v7, a2);
    long long v3 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    long long v9 = v3;
    uint64_t v4 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v10;
    uint64_t v10 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v5;
    sirinluexternal::NLUSupplementaryOutput::~NLUSupplementaryOutput((sirinluexternal::NLUSupplementaryOutput *)&v7);
  }
  return a1;
}

void *sirinluexternal::swap(void *this, sirinluexternal::NLUSupplementaryOutput *a2, sirinluexternal::NLUSupplementaryOutput *a3)
{
  uint64_t v3 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v3;
  uint64_t v4 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v4;
  uint64_t v5 = this[4];
  this[4] = *((void *)a2 + 4);
  *((void *)a2 + 4) = v5;
  uint64_t v6 = this[5];
  this[5] = *((void *)a2 + 5);
  *((void *)a2 + 5) = v6;
  uint64_t v7 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v7;
  return this;
}

uint64_t sirinluexternal::NLUSupplementaryOutput::NLUSupplementaryOutput(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F232D0B8;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 40) = 0;
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate((void **)(a1 + 16));
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  uint64_t v6 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v5;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v8 = *v4;
  *uint64_t v4 = v7;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  return a1;
}

uint64_t sirinluexternal::NLUSupplementaryOutput::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sirinluexternal::NLUSupplementaryOutput::NLUSupplementaryOutput((uint64_t)&v7, a2);
    long long v3 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    long long v9 = v3;
    uint64_t v4 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v10;
    uint64_t v10 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v5;
    sirinluexternal::NLUSupplementaryOutput::~NLUSupplementaryOutput((sirinluexternal::NLUSupplementaryOutput *)&v7);
  }
  return a1;
}

BOOL sirinluexternal::NLUSupplementaryOutput::operator==(void *a1, uint64_t a2)
{
  BOOL result = PB::PtrVector<sirinluexternal::Span>::operator==(a1 + 2, *(uint64_t **)(a2 + 16), *(void *)(a2 + 24));
  if (!result) {
    return result;
  }
  uint64_t v5 = a1[5];
  uint64_t v6 = *(void *)(a2 + 40);
  if (!v5)
  {
    if (!v6) {
      goto LABEL_9;
    }
    return 0;
  }
  if (!v6 || (sirinluexternal::RewriteMessage::operator==(v5, v6) & 1) == 0) {
    return 0;
  }
LABEL_9:
  uint64_t v7 = a1[1];
  uint64_t v8 = *(void *)(a2 + 8);
  BOOL result = (v7 | v8) == 0;
  if (v7 && v8)
  {
    if (*(unsigned char *)(v7 + 12))
    {
      if ((*(unsigned char *)(v8 + 12) & 1) != 0 && *(_DWORD *)(v7 + 8) == *(_DWORD *)(v8 + 8)) {
        return 1;
      }
    }
    else if ((*(unsigned char *)(v8 + 12) & 1) == 0)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

BOOL PB::PtrVector<sirinluexternal::Span>::operator==(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (v4 - *a1 != a3 - (void)a2) {
    return 0;
  }
  if (v3 == v4) {
    return 1;
  }
  uint64_t v5 = a2;
  uint64_t v6 = v3 + 8;
  do
  {
    uint64_t v7 = *v5++;
    BOOL result = sirinluexternal::Span::operator==(*(void *)(v6 - 8), v7);
    BOOL v9 = !result || v6 == v4;
    v6 += 8;
  }
  while (!v9);
  return result;
}

unint64_t sirinluexternal::NLUSupplementaryOutput::hash_value(sirinluexternal::NLUSupplementaryOutput *this)
{
  unint64_t v2 = (sirinluexternal::Span **)*((void *)this + 2);
  uint64_t v3 = (sirinluexternal::Span **)*((void *)this + 3);
  if (v2 == v3)
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = *v2++;
      v4 ^= sirinluexternal::Span::hash_value(v5);
    }
    while (v2 != v3);
  }
  unint64_t v6 = *((void *)this + 5);
  if (v6)
  {
    if (*(unsigned char *)(v6 + 20)) {
      uint64_t v7 = *(int *)(v6 + 16);
    }
    else {
      uint64_t v7 = 0;
    }
    unint64_t v8 = *(void *)(v6 + 8);
    if (v8) {
      unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](v8);
    }
    unint64_t v6 = v8 ^ v7;
  }
  uint64_t v9 = *((void *)this + 1);
  if (v9)
  {
    if (*(unsigned char *)(v9 + 12)) {
      uint64_t v9 = *(int *)(v9 + 8);
    }
    else {
      uint64_t v9 = 0;
    }
  }
  return v6 ^ v4 ^ v9;
}

uint64_t sirinluexternal::NLUSupplementaryOutput::makeRewrite(uint64_t this)
{
  if (!*(void *)(this + 40)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternal::NLUSupplementaryOutput::makeCorrectionOutcome(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternal::ReferenceContext::formatText(sirinluexternal::ReferenceContext *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 12);
  if (v5)
  {
    PB::TextFormatter::format(a2, "contextual_reference");
    char v5 = *((unsigned char *)this + 12);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(a2, "disambiguation_needed");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluexternal::ReferenceContext::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 12);
  if (v4)
  {
    this = PB::Writer::write(a2);
    char v4 = *(unsigned char *)(v3 + 12);
  }
  if ((v4 & 2) != 0)
  {
    return PB::Writer::write(a2);
  }
  return this;
}

uint64_t sirinluexternal::ReferenceContext::readFrom(sirinluexternal::ReferenceContext *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_25;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 12) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
        if (v2 >= v3)
        {
          BOOL v23 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v22 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v23 = v22 != 0;
        }
        *((unsigned char *)this + 9) = v23;
      }
      else if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 12) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
        if (v2 >= v3)
        {
          BOOL v20 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v19 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v20 = v19 != 0;
        }
        *((unsigned char *)this + 8) = v20;
      }
      else
      {
LABEL_25:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
      }
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_25;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluexternal::ReferenceContext::~ReferenceContext(sirinluexternal::ReferenceContext *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x1CB772580);
}

uint64_t sirinluexternal::ReferenceContext::ReferenceContext(uint64_t this)
{
  *(void *)this = &unk_1F232D108;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

{
  *(void *)this = &unk_1F232D108;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

uint64_t sirinluexternal::ReferenceContext::ReferenceContext(uint64_t this, const sirinluexternal::ReferenceContext *a2)
{
  *(void *)this = &unk_1F232D108;
  *(_DWORD *)(this + 12) = 0;
  if (*((unsigned char *)a2 + 12))
  {
    char v3 = *((unsigned char *)a2 + 8);
    *(unsigned char *)(this + 12) = 1;
    *(unsigned char *)(this + 8) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 12) & 2) == 0) {
      return this;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 12) & 2) != 0)
  {
LABEL_5:
    char v4 = *((unsigned char *)a2 + 9);
    *(unsigned char *)(this + 12) = v2;
    *(unsigned char *)(this + 9) = v4;
  }
  return this;
}

uint64_t sirinluexternal::ReferenceContext::operator=(uint64_t a1, const sirinluexternal::ReferenceContext *a2)
{
  if ((const sirinluexternal::ReferenceContext *)a1 != a2)
  {
    sirinluexternal::ReferenceContext::ReferenceContext((uint64_t)&v5, a2);
    int v3 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = v7;
    int v7 = v3;
    LOWORD(v3) = *(_WORD *)(a1 + 8);
    *(_WORD *)(a1 + 8) = v6;
    __int16 v6 = v3;
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t sirinluexternal::swap(uint64_t this, sirinluexternal::ReferenceContext *a2, sirinluexternal::ReferenceContext *a3)
{
  int v3 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  LOBYTE(v3) = *(unsigned char *)(this + 8);
  *(unsigned char *)(this + 8) = *((unsigned char *)a2 + 8);
  *((unsigned char *)a2 + 8) = v3;
  LOBYTE(v3) = *(unsigned char *)(this + 9);
  *(unsigned char *)(this + 9) = *((unsigned char *)a2 + 9);
  *((unsigned char *)a2 + 9) = v3;
  return this;
}

uint64_t sirinluexternal::ReferenceContext::ReferenceContext(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &unk_1F232D108;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(unsigned char *)(result + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(result + 9) = *(unsigned char *)(a2 + 9);
  return result;
}

{
  *(void *)uint64_t result = &unk_1F232D108;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(unsigned char *)(result + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(result + 9) = *(unsigned char *)(a2 + 9);
  return result;
}

uint64_t sirinluexternal::ReferenceContext::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v7 = &unk_1F232D108;
    int v3 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = 0;
    __int16 v4 = *(_WORD *)(a2 + 8);
    int v5 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = v3;
    int v9 = v5;
    LOWORD(v3) = *(_WORD *)(a1 + 8);
    *(_WORD *)(a1 + 8) = v4;
    __int16 v8 = v3;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

BOOL sirinluexternal::ReferenceContext::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1[12])
  {
    if ((a2[12] & 1) == 0 || a1[8] != a2[8]) {
      return 0;
    }
  }
  else if (a2[12])
  {
    return 0;
  }
  BOOL v2 = (a2[12] & 2) == 0;
  if ((a1[12] & 2) != 0) {
    return (a2[12] & 2) != 0 && a1[9] == a2[9];
  }
  return v2;
}

uint64_t sirinluexternal::ReferenceContext::hash_value(sirinluexternal::ReferenceContext *this)
{
  if (*((unsigned char *)this + 12))
  {
    uint64_t v1 = *((unsigned __int8 *)this + 8);
    if ((*((unsigned char *)this + 12) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v2 = 0;
    return v2 ^ v1;
  }
  uint64_t v1 = 0;
  if ((*((unsigned char *)this + 12) & 2) == 0) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v2 = *((unsigned __int8 *)this + 9);
  return v2 ^ v1;
}

BOOL SIRINLUEXTERNALSpanPropertyReadFrom(uint64_t a1, uint64_t a2)
{
  int v3 = (int *)MEMORY[0x1E4F940E8];
  __int16 v4 = (int *)MEMORY[0x1E4F940E0];
  int v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  int v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v17 = PBReaderReadString();
        char v18 = *(SIRICOMMONStringValue **)(a1 + 8);
        *(void *)(a1 + 8) = v17;
        goto LABEL_31;
      case 2u:
        char v18 = objc_alloc_init(SIRICOMMONStringValue);
        objc_storeStrong((id *)(a1 + 32), v18);
        if (!PBReaderPlaceMark() || (SIRICOMMONStringValueReadFrom((uint64_t)v18, a2) & 1) == 0) {
          goto LABEL_35;
        }
        goto LABEL_30;
      case 3u:
        char v18 = objc_alloc_init(SIRICOMMONInt32Value);
        objc_storeStrong((id *)(a1 + 24), v18);
        if (!PBReaderPlaceMark() || (SIRICOMMONInt32ValueReadFrom((uint64_t)v18, a2) & 1) == 0) {
          goto LABEL_35;
        }
        goto LABEL_30;
      case 4u:
        char v18 = objc_alloc_init(SIRICOMMONFloatValue);
        objc_storeStrong((id *)(a1 + 16), v18);
        if PBReaderPlaceMark() && (SIRICOMMONFloatValueReadFrom((uint64_t)v18, a2))
        {
LABEL_30:
          PBReaderRecallMark();
LABEL_31:

LABEL_32:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_35:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_32;
    }
  }
}

BOOL SIRINLUEXTERNALUserDialogActReadFrom(id *a1, uint64_t a2)
{
  int v3 = (int *)MEMORY[0x1E4F940E8];
  __int16 v4 = (int *)MEMORY[0x1E4F940E0];
  int v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  int v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 3u:
        uint64_t v17 = objc_alloc_init(SIRINLUEXTERNALUserAccepted);
        objc_storeStrong(a1 + 1, v17);
        if (PBReaderPlaceMark() && SIRINLUEXTERNALUserAcceptedReadFrom((uint64_t)v17, a2)) {
          goto LABEL_54;
        }
        goto LABEL_58;
      case 4u:
        uint64_t v17 = objc_alloc_init(SIRINLUEXTERNALUserRejected);
        objc_storeStrong(a1 + 6, v17);
        if (!PBReaderPlaceMark() || !SIRINLUEXTERNALUserRejectedReadFrom((uint64_t)v17, a2)) {
          goto LABEL_58;
        }
        goto LABEL_54;
      case 5u:
      case 0xBu:
        goto LABEL_26;
      case 6u:
        uint64_t v17 = objc_alloc_init(SIRINLUEXTERNALUserCancelled);
        objc_storeStrong(a1 + 4, v17);
        if (!PBReaderPlaceMark() || !SIRINLUEXTERNALUserCancelledReadFrom((uint64_t)v17, a2)) {
          goto LABEL_58;
        }
        goto LABEL_54;
      case 7u:
        uint64_t v17 = objc_alloc_init(SIRINLUEXTERNALUserWantedToRepeat);
        objc_storeStrong(a1 + 10, v17);
        if (!PBReaderPlaceMark() || !SIRINLUEXTERNALUserWantedToRepeatReadFrom((uint64_t)v17, a2)) {
          goto LABEL_58;
        }
        goto LABEL_54;
      case 8u:
        uint64_t v17 = objc_alloc_init(SIRINLUEXTERNALUserAcknowledged);
        objc_storeStrong(a1 + 2, v17);
        if (!PBReaderPlaceMark() || !SIRINLUEXTERNALUserAcknowledgedReadFrom((uint64_t)v17, a2)) {
          goto LABEL_58;
        }
        goto LABEL_54;
      case 9u:
        uint64_t v17 = objc_alloc_init(SIRINLUEXTERNALUserWantedToProceed);
        objc_storeStrong(a1 + 9, v17);
        if (!PBReaderPlaceMark() || !SIRINLUEXTERNALUserWantedToProceedReadFrom((uint64_t)v17, a2)) {
          goto LABEL_58;
        }
        goto LABEL_54;
      case 0xAu:
        uint64_t v17 = objc_alloc_init(SIRINLUEXTERNALUserWantedToPause);
        objc_storeStrong(a1 + 8, v17);
        if (!PBReaderPlaceMark() || !SIRINLUEXTERNALUserWantedToPauseReadFrom((uint64_t)v17, a2)) {
          goto LABEL_58;
        }
        goto LABEL_54;
      case 0xCu:
        uint64_t v17 = objc_alloc_init(SIRINLUEXTERNALDelegatedUserDialogAct);
        objc_storeStrong(a1 + 5, v17);
        if (!PBReaderPlaceMark()
          || (SIRINLUEXTERNALDelegatedUserDialogActReadFrom((uint64_t)v17, a2) & 1) == 0)
        {
          goto LABEL_58;
        }
        goto LABEL_54;
      case 0xDu:
        uint64_t v17 = objc_alloc_init(SIRINLUEXTERNALUserStatedTask);
        objc_storeStrong(a1 + 7, v17);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALUserStatedTaskReadFrom((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_58;
        }
        goto LABEL_54;
      case 0xEu:
        uint64_t v17 = objc_alloc_init(SIRINLUEXTERNALUserWantedToUndo);
        objc_storeStrong(a1 + 11, v17);
        if (PBReaderPlaceMark() && SIRINLUEXTERNALUserWantedToUndoReadFrom((uint64_t)v17, a2)) {
          goto LABEL_54;
        }
        goto LABEL_58;
      default:
        if ((v10 >> 3) != 101)
        {
LABEL_26:
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            return 0;
          }
          goto LABEL_55;
        }
        uint64_t v17 = objc_alloc_init(SIRINLUEXTERNALUtteranceAlignment);
        objc_storeStrong(a1 + 3, v17);
        if PBReaderPlaceMark() && (SIRINLUEXTERNALUtteranceAlignmentReadFrom(v17, a2))
        {
LABEL_54:
          PBReaderRecallMark();

LABEL_55:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_58:

        return 0;
    }
  }
}

void sub_1C8B4EB6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B4EDD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B4EF80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B4F044(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B4F1AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B4F37C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B4F464(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B4F5D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B4F76C(_Unwind_Exception *a1)
{
  __int16 v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1C8B4F8F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B4FA3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B4FAE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B4FB54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B4FBD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B4FD48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B4FE50(_Unwind_Exception *a1)
{
  int v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1C8B4FFE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B501DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B502F0(_Unwind_Exception *a1)
{
  int v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1C8B5047C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B50594(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B50724(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B509B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B50BD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B50EA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B51000(_Unwind_Exception *a1)
{
  int v5 = v3;

  _Unwind_Resume(a1);
}

void sub_1C8B51154(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B51384(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SIRINLUEXTERNALTurnInputReadFrom(uint64_t a1, uint64_t a2)
{
  int v3 = (int *)MEMORY[0x1E4F940E8];
  __int16 v4 = (int *)MEMORY[0x1E4F940E0];
  int v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  int v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v17 = objc_alloc_init(SIRINLUEXTERNALSystemDialogActGroup);
        objc_storeStrong((id *)(a1 + 64), v17);
        if (PBReaderPlaceMark()
          && SIRINLUEXTERNALSystemDialogActGroupReadFrom((id *)&v17->super.super.isa, a2))
        {
          goto LABEL_55;
        }
        goto LABEL_67;
      case 2u:
        uint64_t v17 = objc_alloc_init(SIRINLUEXTERNALEntityCandidate);
        [(id)a1 addSalientEntities:v17];
        if (!PBReaderPlaceMark()
          || !SIRINLUEXTERNALEntityCandidateReadFrom((id *)&v17->super.super.isa, a2))
        {
          goto LABEL_67;
        }
        goto LABEL_55;
      case 3u:
        uint64_t v17 = objc_alloc_init(SIRINLUEXTERNALTask);
        [(id)a1 addActiveTasks:v17];
        goto LABEL_29;
      case 4u:
        uint64_t v17 = objc_alloc_init(SIRINLUEXTERNALTask);
        [(id)a1 addExecutedTasks:v17];
LABEL_29:
        if (!PBReaderPlaceMark() || !SIRINLUEXTERNALTaskReadFrom((id *)&v17->super.super.isa, a2)) {
          goto LABEL_67;
        }
        goto LABEL_55;
      case 5u:
        uint64_t v17 = objc_alloc_init(SIRINLUEXTERNALAsrHypothesis);
        [(id)a1 addAsrOutputs:v17];
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALAsrHypothesisReadFrom((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_67;
        }
        goto LABEL_55;
      case 6u:
        uint64_t v17 = objc_alloc_init(SIRINLUEXTERNALTurnContext);
        objc_storeStrong((id *)(a1 + 72), v17);
        if (!PBReaderPlaceMark() || !SIRINLUEXTERNALTurnContextReadFrom((uint64_t)v17, a2)) {
          goto LABEL_67;
        }
        goto LABEL_55;
      case 7u:
        uint64_t v19 = PBReaderReadString();
        BOOL v20 = *(void **)(a1 + 48);
        *(void *)(a1 + 48) = v19;

        goto LABEL_56;
      case 8u:
        char v21 = 0;
        unsigned int v22 = 0;
        uint64_t v23 = 0;
        *(unsigned char *)(a1 + 84) |= 2u;
        while (2)
        {
          uint64_t v24 = *v3;
          unint64_t v25 = *(void *)(a2 + v24);
          if (v25 == -1 || v25 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v26 = *(unsigned char *)(*(void *)(a2 + *v7) + v25);
            *(void *)(a2 + v24) = v25 + 1;
            v23 |= (unint64_t)(v26 & 0x7F) << v21;
            if (v26 < 0)
            {
              v21 += 7;
              BOOL v14 = v22++ >= 9;
              if (v14)
              {
                uint64_t v23 = 0;
                goto LABEL_61;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v23 = 0;
        }
LABEL_61:
        *(unsigned char *)(a1 + 80) = v23 != 0;
        goto LABEL_56;
      case 9u:
        char v27 = 0;
        unsigned int v28 = 0;
        uint64_t v29 = 0;
        *(unsigned char *)(a1 + 84) |= 1u;
        while (2)
        {
          uint64_t v30 = *v3;
          unint64_t v31 = *(void *)(a2 + v30);
          if (v31 == -1 || v31 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v32 = *(unsigned char *)(*(void *)(a2 + *v7) + v31);
            *(void *)(a2 + v30) = v31 + 1;
            v29 |= (unint64_t)(v32 & 0x7F) << v27;
            if (v32 < 0)
            {
              v27 += 7;
              BOOL v14 = v28++ >= 9;
              if (v14)
              {
                uint64_t v29 = 0;
                goto LABEL_65;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v29 = 0;
        }
LABEL_65:
        *(void *)(a1 + 8) = v29;
        goto LABEL_56;
      case 0xAu:
        uint64_t v17 = objc_alloc_init(SIRINLUEXTERNALCorrectionOutcome);
        objc_storeStrong((id *)(a1 + 32), v17);
        if PBReaderPlaceMark() && (SIRINLUEXTERNALCorrectionOutcomeReadFrom((uint64_t)v17, a2))
        {
LABEL_55:
          PBReaderRecallMark();

LABEL_56:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_67:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_56;
    }
  }
}

uint64_t sirinluexternalsubword_embedding::SubwordEmbeddingSetup::formatText(sirinluexternalsubword_embedding::SubwordEmbeddingSetup *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((void *)this + 1)) {
    PB::TextFormatter::format();
  }
  if (*((void *)this + 2)) {
    PB::TextFormatter::format();
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluexternalsubword_embedding::SubwordEmbeddingSetup::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v2 = this;
  if (*(void *)(this + 16)) {
    this = PB::Writer::write();
  }
  if (*(void *)(v2 + 8))
  {
    return PB::Writer::write();
  }
  return this;
}

BOOL sirinluexternalsubword_embedding::SubwordEmbeddingSetup::readFrom(sirinluexternalsubword_embedding::SubwordEmbeddingSetup *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_24;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 2) {
        operator new();
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_24:
      if ((PB::Reader::skip(a2) & 1) == 0) {
        return 0;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_24;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluexternalsubword_embedding::SubwordEmbeddingSetup::~SubwordEmbeddingSetup(sirinluexternalsubword_embedding::SubwordEmbeddingSetup *this)
{
  sirinluexternalsubword_embedding::SubwordEmbeddingSetup::~SubwordEmbeddingSetup(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1F232D158;
  unint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    std::default_delete<std::string>::operator()[abi:ne180100](v2);
  }
  unint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    std::default_delete<std::string>::operator()[abi:ne180100](v3);
  }
  PB::Base::~Base(this);
}

void *sirinluexternalsubword_embedding::SubwordEmbeddingSetup::SubwordEmbeddingSetup(void *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1F232D158;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1F232D158;
  return this;
}

void *sirinluexternalsubword_embedding::SubwordEmbeddingSetup::SubwordEmbeddingSetup(void *this, const sirinluexternalsubword_embedding::SubwordEmbeddingSetup *a2)
{
  *this = &unk_1F232D158;
  this[1] = 0;
  this[2] = 0;
  if (*((void *)a2 + 2)) {
    operator new();
  }
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternalsubword_embedding::SubwordEmbeddingSetup::operator=(uint64_t a1, const sirinluexternalsubword_embedding::SubwordEmbeddingSetup *a2)
{
  if ((const sirinluexternalsubword_embedding::SubwordEmbeddingSetup *)a1 != a2)
  {
    sirinluexternalsubword_embedding::SubwordEmbeddingSetup::SubwordEmbeddingSetup(&v5, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    long long v6 = v3;
    sirinluexternalsubword_embedding::SubwordEmbeddingSetup::~SubwordEmbeddingSetup((sirinluexternalsubword_embedding::SubwordEmbeddingSetup *)&v5);
  }
  return a1;
}

uint64_t sirinluexternalsubword_embedding::swap(uint64_t this, sirinluexternalsubword_embedding::SubwordEmbeddingSetup *a2, sirinluexternalsubword_embedding::SubwordEmbeddingSetup *a3)
{
  uint64_t v3 = *(void *)(this + 16);
  *(void *)(this + 16) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v3;
  uint64_t v4 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  return this;
}

void *sirinluexternalsubword_embedding::SubwordEmbeddingSetup::SubwordEmbeddingSetup(void *a1, uint64_t a2)
{
  a1[1] = 0;
  uint64_t v4 = a1 + 1;
  *a1 = &unk_1F232D158;
  a1[2] = 0;
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  uint64_t v6 = a1[2];
  a1[2] = v5;
  if (v6) {
    std::default_delete<std::string>::operator()[abi:ne180100](v6);
  }
  uint64_t v7 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v8 = *v4;
  *uint64_t v4 = v7;
  if (v8) {
    std::default_delete<std::string>::operator()[abi:ne180100](v8);
  }
  return a1;
}

uint64_t sirinluexternalsubword_embedding::SubwordEmbeddingSetup::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sirinluexternalsubword_embedding::SubwordEmbeddingSetup::SubwordEmbeddingSetup(&v5, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    long long v6 = v3;
    sirinluexternalsubword_embedding::SubwordEmbeddingSetup::~SubwordEmbeddingSetup((sirinluexternalsubword_embedding::SubwordEmbeddingSetup *)&v5);
  }
  return a1;
}

uint64_t sirinluexternalsubword_embedding::SubwordEmbeddingSetup::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned __int8 **)(a1 + 16);
  uint64_t v5 = *(unsigned __int8 ***)(a2 + 16);
  if (v4)
  {
    if (!v5) {
      return 0;
    }
    uint64_t v6 = v4[23];
    if ((v6 & 0x80u) == 0) {
      uint64_t v7 = (unsigned __int8 *)v4[23];
    }
    else {
      uint64_t v7 = (unsigned __int8 *)*((void *)v4 + 1);
    }
    uint64_t v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    int v9 = (char)v8;
    if ((char)v8 < 0) {
      uint64_t v8 = v5[1];
    }
    if (v7 != v8) {
      return 0;
    }
    if (v9 >= 0) {
      unint64_t v10 = *(unsigned __int8 **)(a2 + 16);
    }
    else {
      unint64_t v10 = *v5;
    }
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v10, *((void *)v4 + 1))) {
        return 0;
      }
    }
    else if (v4[23])
    {
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6) {
          goto LABEL_21;
        }
      }
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
LABEL_21:
  char v12 = *(unsigned __int8 **)(a1 + 8);
  BOOL v13 = *(unsigned __int8 ***)(a2 + 8);
  uint64_t result = v13 == 0;
  if (!v12) {
    return result;
  }
  if (!v13) {
    return 0;
  }
  uint64_t v14 = v12[23];
  if ((v14 & 0x80u) == 0) {
    unsigned int v15 = (unsigned __int8 *)v12[23];
  }
  else {
    unsigned int v15 = (unsigned __int8 *)*((void *)v12 + 1);
  }
  unint64_t v16 = (unsigned __int8 *)*((unsigned __int8 *)v13 + 23);
  int v17 = (char)v16;
  if ((char)v16 < 0) {
    unint64_t v16 = v13[1];
  }
  if (v15 != v16) {
    return 0;
  }
  if (v17 >= 0) {
    char v18 = *(unsigned __int8 **)(a2 + 8);
  }
  else {
    char v18 = *v13;
  }
  if ((v14 & 0x80) != 0) {
    return !memcmp(*(const void **)v12, v18, *((void *)v12 + 1));
  }
  if (!v12[23]) {
    return 1;
  }
  uint64_t v19 = v14 - 1;
  do
  {
    int v21 = *v12++;
    int v20 = v21;
    int v23 = *v18++;
    int v22 = v23;
    BOOL v25 = v19-- != 0;
    uint64_t result = v20 == v22;
  }
  while (v20 == v22 && v25);
  return result;
}

unint64_t sirinluexternalsubword_embedding::SubwordEmbeddingSetup::hash_value(sirinluexternalsubword_embedding::SubwordEmbeddingSetup *this)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    unint64_t v3 = std::__string_hash<char>::operator()[abi:ne180100](v2);
  }
  else {
    unint64_t v3 = 0;
  }
  unint64_t v4 = *((void *)this + 1);
  if (v4) {
    unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100](v4);
  }
  return v4 ^ v3;
}

uint64_t SIRINLUEXTERNALRewrittenUtteranceReadFrom(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        *(unsigned char *)(a1 + 24) |= 1u;
        uint64_t v19 = *v3;
        unint64_t v20 = *(void *)(a2 + v19);
        if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v20);
          *(void *)(a2 + v19) = v20 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v21 = 0;
        }
        *(void *)(a1 + 8) = v21;
      }
      else if ((v10 >> 3) == 1)
      {
        char v18 = objc_alloc_init(SIRICOMMONStringValue);
        objc_storeStrong((id *)(a1 + 16), v18);
        if (!PBReaderPlaceMark() || (SIRICOMMONStringValueReadFrom((uint64_t)v18, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sirinluinternaloverrides::TurnInputAndPreprocessing::formatText(sirinluinternaloverrides::TurnInputAndPreprocessing *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = (uint64_t *)*((void *)this + 1);
  uint64_t v6 = (uint64_t *)*((void *)this + 2);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "matching_spans");
  }
  uint64_t v8 = *((void *)this + 4);
  if (v8) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v8 + 32))(v8, a2, "token_chain");
  }
  uint64_t v9 = *((void *)this + 5);
  if (v9) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v9 + 32))(v9, a2, "turn_input");
  }
  if (*((void *)this + 6)) {
    PB::TextFormatter::format();
  }
  return MEMORY[0x1F4147498](a2);
}

void *sirinluinternaloverrides::TurnInputAndPreprocessing::writeTo(void *this, PB::Writer *a2)
{
  unint64_t v3 = this;
  if (this[6]) {
    this = (void *)PB::Writer::write();
  }
  unint64_t v4 = (const PB::Base *)v3[4];
  if (v4) {
    this = (void *)PB::Writer::writeSubmessage(a2, v4);
  }
  uint64_t v5 = (const PB::Base **)v3[1];
  uint64_t v6 = (const PB::Base **)v3[2];
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    this = (void *)PB::Writer::writeSubmessage(a2, v7);
  }
  uint64_t v8 = (const PB::Base *)v3[5];
  if (v8)
  {
    return (void *)PB::Writer::writeSubmessage(a2, v8);
  }
  return this;
}

uint64_t sirinluinternaloverrides::TurnInputAndPreprocessing::readFrom(sirinluinternaloverrides::TurnInputAndPreprocessing *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_19;
        }
      }
LABEL_21:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v10 >> 3))
      {
        case 1u:
          operator new();
        case 2u:
          operator new();
        case 3u:
          PB::PtrVector<sirinluinternal::MatchingSpan>::emplace_back<>();
        case 4u:
          operator new();
        default:
          break;
      }
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_21;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_19;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluinternaloverrides::TurnInputAndPreprocessing::~TurnInputAndPreprocessing(sirinluinternaloverrides::TurnInputAndPreprocessing *this)
{
  sirinluinternaloverrides::TurnInputAndPreprocessing::~TurnInputAndPreprocessing(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  uint64_t vars8;

  *(void *)this = &unk_1F232D1A8;
  unint64_t v2 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v2) {
    std::default_delete<std::string>::operator()[abi:ne180100](v2);
  }
  unint64_t v3 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v5);
  PB::Base::~Base(this);
}

double sirinluinternaloverrides::TurnInputAndPreprocessing::TurnInputAndPreprocessing(sirinluinternaloverrides::TurnInputAndPreprocessing *this)
{
  *(void *)this = &unk_1F232D1A8;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(void *)this = &unk_1F232D1A8;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

uint64_t sirinluinternaloverrides::TurnInputAndPreprocessing::TurnInputAndPreprocessing(uint64_t this, const sirinluinternaloverrides::TurnInputAndPreprocessing *a2)
{
  *(void *)this = &unk_1F232D1A8;
  *(_OWORD *)(this + 8) = 0u;
  *(_OWORD *)(this + 24) = 0u;
  *(_OWORD *)(this + 40) = 0u;
  if (*((void *)a2 + 6)) {
    operator new();
  }
  if (*((void *)a2 + 4)) {
    operator new();
  }
  if (*((void *)a2 + 1) != *((void *)a2 + 2)) {
    PB::PtrVector<sirinluinternal::MatchingSpan>::emplace_back<sirinluinternal::MatchingSpan const&>();
  }
  if (*((void *)a2 + 5)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternaloverrides::TurnInputAndPreprocessing::operator=(uint64_t a1, const sirinluinternaloverrides::TurnInputAndPreprocessing *a2)
{
  if ((const sirinluinternaloverrides::TurnInputAndPreprocessing *)a1 != a2)
  {
    sirinluinternaloverrides::TurnInputAndPreprocessing::TurnInputAndPreprocessing((uint64_t)v7, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    long long v8 = v3;
    long long v9 = v4;
    long long v5 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v10;
    long long v10 = v5;
    sirinluinternaloverrides::TurnInputAndPreprocessing::~TurnInputAndPreprocessing((sirinluinternaloverrides::TurnInputAndPreprocessing *)v7);
  }
  return a1;
}

void *sirinluinternaloverrides::swap(void *this, sirinluinternaloverrides::TurnInputAndPreprocessing *a2, sirinluinternaloverrides::TurnInputAndPreprocessing *a3)
{
  uint64_t v3 = this[6];
  this[6] = *((void *)a2 + 6);
  *((void *)a2 + 6) = v3;
  uint64_t v4 = this[4];
  this[4] = *((void *)a2 + 4);
  *((void *)a2 + 4) = v4;
  uint64_t v5 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  uint64_t v8 = this[5];
  this[5] = *((void *)a2 + 5);
  *((void *)a2 + 5) = v8;
  return this;
}

uint64_t sirinluinternaloverrides::TurnInputAndPreprocessing::TurnInputAndPreprocessing(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F232D1A8;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v4 = (void **)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  uint64_t v6 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v5;
  if (v6) {
    std::default_delete<std::string>::operator()[abi:ne180100](v6);
  }
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  uint64_t v8 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v7;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(v4);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  uint64_t v9 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  uint64_t v10 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v9;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  return a1;
}

uint64_t sirinluinternaloverrides::TurnInputAndPreprocessing::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sirinluinternaloverrides::TurnInputAndPreprocessing::TurnInputAndPreprocessing((uint64_t)v7, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    long long v8 = v3;
    long long v9 = v4;
    long long v5 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v10;
    long long v10 = v5;
    sirinluinternaloverrides::TurnInputAndPreprocessing::~TurnInputAndPreprocessing((sirinluinternaloverrides::TurnInputAndPreprocessing *)v7);
  }
  return a1;
}

uint64_t sirinluinternaloverrides::TurnInputAndPreprocessing::operator==(uint64_t *a1, uint64_t a2)
{
  long long v4 = (unsigned __int8 *)a1[6];
  long long v5 = *(unsigned __int8 ***)(a2 + 48);
  if (v4)
  {
    if (!v5) {
      return 0;
    }
    uint64_t v6 = v4[23];
    if ((v6 & 0x80u) == 0) {
      uint64_t v7 = (unsigned __int8 *)v4[23];
    }
    else {
      uint64_t v7 = (unsigned __int8 *)*((void *)v4 + 1);
    }
    long long v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    int v9 = (char)v8;
    if ((char)v8 < 0) {
      long long v8 = v5[1];
    }
    if (v7 != v8) {
      return 0;
    }
    if (v9 >= 0) {
      long long v10 = *(unsigned __int8 **)(a2 + 48);
    }
    else {
      long long v10 = *v5;
    }
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v10, *((void *)v4 + 1))) {
        return 0;
      }
    }
    else if (v4[23])
    {
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6) {
          goto LABEL_18;
        }
      }
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
LABEL_18:
  unint64_t v11 = (void *)a1[4];
  char v12 = *(void **)(a2 + 32);
  if (!v11)
  {
    if (!v12) {
      goto LABEL_23;
    }
    return 0;
  }
  if (!v12 || !sirinluinternal::TokenChain::operator==(v11, v12)) {
    return 0;
  }
LABEL_23:
  uint64_t result = PB::PtrVector<sirinluinternal::MatchingSpan>::operator==(a1 + 1, *(uint64_t **)(a2 + 8), *(void *)(a2 + 16));
  if (result)
  {
    uint64_t v14 = a1[5];
    uint64_t v15 = *(void *)(a2 + 40);
    uint64_t result = (v14 | v15) == 0;
    if (v14)
    {
      if (v15)
      {
        uint64_t v16 = a1[5];
        return sirinluexternal::TurnInput::operator==(v16, v15);
      }
    }
  }
  return result;
}

unint64_t sirinluinternaloverrides::TurnInputAndPreprocessing::hash_value(sirinluinternaloverrides::TurnInputAndPreprocessing *this)
{
  uint64_t v2 = *((void *)this + 6);
  if (v2) {
    unint64_t v3 = std::__string_hash<char>::operator()[abi:ne180100](v2);
  }
  else {
    unint64_t v3 = 0;
  }
  long long v4 = (sirinluinternal::TokenChain *)*((void *)this + 4);
  if (v4) {
    unint64_t v5 = sirinluinternal::TokenChain::hash_value(v4);
  }
  else {
    unint64_t v5 = 0;
  }
  uint64_t v6 = (sirinluinternal::MatchingSpan **)*((void *)this + 1);
  uint64_t v7 = (sirinluinternal::MatchingSpan **)*((void *)this + 2);
  if (v6 == v7)
  {
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = 0;
    do
    {
      int v9 = *v6++;
      v8 ^= sirinluinternal::MatchingSpan::hash_value(v9);
    }
    while (v6 != v7);
  }
  unint64_t v10 = *((void *)this + 5);
  if (v10) {
    unint64_t v10 = sirinluexternal::TurnInput::hash_value((sirinluexternal::TurnInput *)v10);
  }
  return v5 ^ v3 ^ v8 ^ v10;
}

uint64_t sirinluinternaloverrides::TurnInputAndPreprocessing::makeTokenChain(uint64_t this)
{
  if (!*(void *)(this + 32)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternaloverrides::TurnInputAndPreprocessing::makeTurnInput(uint64_t this)
{
  if (!*(void *)(this + 40)) {
    operator new();
  }
  return this;
}

BOOL SIRINLUEXTERNALEntityCandidateReadFrom(id *a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  long long v4 = (int *)MEMORY[0x1E4F940E0];
  unint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = objc_alloc_init(SIRINLUEXTERNALUsoGraph);
        objc_storeStrong(a1 + 3, v17);
        if (PBReaderPlaceMark() && SIRINLUEXTERNALUsoGraphReadFrom((id *)&v17->super.super.isa, a2)) {
          goto LABEL_40;
        }
        goto LABEL_44;
      case 2u:
        char v17 = objc_alloc_init(SIRICOMMONDoubleValue);
        objc_storeStrong(a1 + 7, v17);
        if (!PBReaderPlaceMark() || (SIRICOMMONDoubleValueReadFrom((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_44;
        }
        goto LABEL_40;
      case 3u:
        char v17 = objc_alloc_init(SIRICOMMONStringValue);
        uint64_t v18 = 4;
        goto LABEL_29;
      case 4u:
        char v17 = objc_alloc_init(SIRICOMMONStringValue);
        uint64_t v18 = 2;
LABEL_29:
        objc_storeStrong(&a1[v18], v17);
        if (!PBReaderPlaceMark() || (SIRICOMMONStringValueReadFrom((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_44;
        }
        goto LABEL_40;
      case 5u:
        char v17 = objc_alloc_init(SIRINLUEXTERNALRRGroupIdentifier);
        objc_storeStrong(a1 + 5, v17);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALRRGroupIdentifierReadFrom((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_44;
        }
        goto LABEL_40;
      case 6u:
        char v17 = objc_alloc_init(SIRINLUEXTERNALRRAnnotation);
        [a1 addAnnotations:v17];
        if (!PBReaderPlaceMark() || !SIRINLUEXTERNALRRAnnotationReadFrom((uint64_t)v17, a2)) {
          goto LABEL_44;
        }
        goto LABEL_40;
      case 7u:
        char v17 = objc_alloc_init(SIRINLUEXTERNALRRMetadata);
        objc_storeStrong(a1 + 6, v17);
        if PBReaderPlaceMark() && (SIRINLUEXTERNALRRMetadataReadFrom((uint64_t)v17, a2))
        {
LABEL_40:
          PBReaderRecallMark();

LABEL_41:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_44:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_41;
    }
  }
}

uint64_t sirinluinternal::OverrideValue::formatText(sirinluinternal::OverrideValue *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "ccqr_override_template");
  }
  uint64_t v6 = *((void *)this + 2);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, a2, "lvc_override_value");
  }
  uint64_t v7 = *((void *)this + 3);
  if (v7) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "plan_override_value");
  }
  uint64_t v8 = *((void *)this + 4);
  if (v8) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v8 + 32))(v8, a2, "user_parse");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluinternal::OverrideValue::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v3 = (void *)this;
  long long v4 = *(const PB::Base **)(this + 8);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  uint64_t v5 = (const PB::Base *)v3[4];
  if (v5) {
    this = PB::Writer::writeSubmessage(a2, v5);
  }
  uint64_t v6 = (const PB::Base *)v3[2];
  if (v6) {
    this = PB::Writer::writeSubmessage(a2, v6);
  }
  uint64_t v7 = (const PB::Base *)v3[3];
  if (v7)
  {
    return PB::Writer::writeSubmessage(a2, v7);
  }
  return this;
}

uint64_t sirinluinternal::OverrideValue::readFrom(sirinluinternal::OverrideValue *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_19;
        }
      }
LABEL_21:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v10 >> 3))
      {
        case 1u:
          operator new();
        case 2u:
          operator new();
        case 3u:
          operator new();
        case 4u:
          operator new();
        default:
          break;
      }
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_21;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_19;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluinternal::OverrideValue::~OverrideValue(sirinluinternal::OverrideValue *this)
{
  sirinluinternal::OverrideValue::~OverrideValue(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t vars8;

  *(void *)this = &unk_1F232D1F8;
  unint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  PB::Base::~Base(this);
}

double sirinluinternal::OverrideValue::OverrideValue(sirinluinternal::OverrideValue *this)
{
  *(void *)this = &unk_1F232D1F8;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

{
  double result;

  *(void *)this = &unk_1F232D1F8;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

uint64_t sirinluinternal::OverrideValue::OverrideValue(uint64_t this, const sirinluinternal::OverrideValue *a2)
{
  *(void *)this = &unk_1F232D1F8;
  *(_OWORD *)(this + 8) = 0u;
  *(_OWORD *)(this + 24) = 0u;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  if (*((void *)a2 + 4)) {
    operator new();
  }
  if (*((void *)a2 + 2)) {
    operator new();
  }
  if (*((void *)a2 + 3)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternal::OverrideValue::operator=(uint64_t a1, const sirinluinternal::OverrideValue *a2)
{
  if ((const sirinluinternal::OverrideValue *)a1 != a2)
  {
    sirinluinternal::OverrideValue::OverrideValue((uint64_t)v6, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v8;
    long long v7 = v3;
    long long v8 = v4;
    sirinluinternal::OverrideValue::~OverrideValue((sirinluinternal::OverrideValue *)v6);
  }
  return a1;
}

void *sirinluinternal::swap(void *this, sirinluinternal::OverrideValue *a2, sirinluinternal::OverrideValue *a3)
{
  uint64_t v3 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  uint64_t v4 = this[4];
  this[4] = *((void *)a2 + 4);
  *((void *)a2 + 4) = v4;
  uint64_t v5 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  uint64_t v6 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v6;
  return this;
}

uint64_t sirinluinternal::OverrideValue::OverrideValue(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1F232D1F8;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  uint64_t v4 = a2[1];
  a2[1] = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = a2[4];
  a2[4] = 0;
  uint64_t v7 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = a2[2];
  a2[2] = 0;
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v8;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = a2[3];
  a2[3] = 0;
  uint64_t v11 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v10;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  return a1;
}

uint64_t sirinluinternal::OverrideValue::operator=(uint64_t a1, void *a2)
{
  if ((void *)a1 != a2)
  {
    sirinluinternal::OverrideValue::OverrideValue((uint64_t)v6, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v8;
    long long v7 = v3;
    long long v8 = v4;
    sirinluinternal::OverrideValue::~OverrideValue((sirinluinternal::OverrideValue *)v6);
  }
  return a1;
}

uint64_t sirinluinternal::OverrideValue::operator==(void *a1, void *a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a2[1];
  if (v4)
  {
    if (!v5 || (sirinluinternal::CCQROverrideTemplate::operator==(v4, v5) & 1) == 0) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  uint64_t v6 = a1[4];
  uint64_t v7 = a2[4];
  if (v6)
  {
    if (!v7 || !sirinluexternal::UserParse::operator==(v6, v7)) {
      return 0;
    }
  }
  else if (v7)
  {
    return 0;
  }
  uint64_t v8 = a1[2];
  uint64_t v9 = a2[2];
  if (!v8)
  {
    if (!v9) {
      goto LABEL_14;
    }
    return 0;
  }
  if (!v9 || !sirinluinternal::LVCOverrideValue::operator==(v8, v9)) {
    return 0;
  }
LABEL_14:
  uint64_t v10 = a1[3];
  uint64_t v11 = a2[3];
  uint64_t result = (v10 | v11) == 0;
  if (v10 && v11)
  {
    uint64_t v13 = a1[3];
    return sirinluinternal::PlanOverrideValue::operator==(v13, v11);
  }
  return result;
}

unint64_t sirinluinternal::OverrideValue::hash_value(sirinluinternal::OverrideValue *this)
{
  unint64_t v2 = (sirinluinternal::CCQROverrideTemplate *)*((void *)this + 1);
  if (v2) {
    unint64_t v3 = sirinluinternal::CCQROverrideTemplate::hash_value(v2);
  }
  else {
    unint64_t v3 = 0;
  }
  uint64_t v4 = (sirinluexternal::UserParse *)*((void *)this + 4);
  if (v4) {
    unint64_t v5 = sirinluexternal::UserParse::hash_value(v4);
  }
  else {
    unint64_t v5 = 0;
  }
  uint64_t v6 = *((void *)this + 2);
  if (v6 && (uint64_t v7 = *(sirinluexternal::MultilingualVariant **)(v6 + 8)) != 0) {
    unint64_t v8 = sirinluexternal::MultilingualVariant::hash_value(v7);
  }
  else {
    unint64_t v8 = 0;
  }
  uint64_t v9 = *((void *)this + 3);
  if (v9)
  {
    unint64_t v10 = *(void *)(v9 + 8);
    if (v10) {
      unint64_t v10 = std::__string_hash<char>::operator()[abi:ne180100](v10);
    }
  }
  else
  {
    unint64_t v10 = 0;
  }
  return v5 ^ v3 ^ v8 ^ v10;
}

uint64_t sirinluinternal::OverrideValue::makeCcqrOverrideTemplate(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternal::OverrideValue::makeUserParse(uint64_t this)
{
  if (!*(void *)(this + 32)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternal::OverrideValue::makeLvcOverrideValue(uint64_t this)
{
  if (!*(void *)(this + 16)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternal::OverrideValue::makePlanOverrideValue(uint64_t this)
{
  if (!*(void *)(this + 24)) {
    operator new();
  }
  return this;
}

BOOL SIRINLUEXTERNALUsoGraphReadFrom(id *a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  unint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = objc_alloc_init(SIRINLUEXTERNALSemVer);
        objc_storeStrong(a1 + 6, v17);
        if (PBReaderPlaceMark() && SIRINLUEXTERNALSemVerReadFrom((uint64_t)v17, a2)) {
          goto LABEL_38;
        }
        goto LABEL_42;
      case 2u:
        char v17 = objc_alloc_init(SIRINLUEXTERNALUsoNode);
        [a1 addNodes:v17];
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALUsoNodeReadFrom((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_42;
        }
        goto LABEL_38;
      case 3u:
        char v17 = objc_alloc_init(SIRINLUEXTERNALUsoEdge);
        [a1 addEdges:v17];
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALUsoEdgeReadFrom((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_42;
        }
        goto LABEL_38;
      case 4u:
        char v17 = objc_alloc_init(SIRINLUEXTERNALUsoEntityIdentifier);
        [a1 addIdentifiers:v17];
        if (!PBReaderPlaceMark()
          || (SIRINLUEXTERNALUsoEntityIdentifierReadFrom((uint64_t)v17, a2) & 1) == 0)
        {
          goto LABEL_42;
        }
        goto LABEL_38;
      case 5u:
        char v17 = objc_alloc_init(SIRINLUEXTERNALUtteranceAlignment);
        [a1 addAlignments:v17];
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALUtteranceAlignmentReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_42;
        }
        goto LABEL_38;
      case 6u:
        char v17 = objc_alloc_init(SIRINLUEXTERNALUsoEntitySpan);
        [a1 addSpans:v17];
        if PBReaderPlaceMark() && (SIRINLUEXTERNALUsoEntitySpanReadFrom((uint64_t)v17, a2))
        {
LABEL_38:
          PBReaderRecallMark();

LABEL_39:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_42:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_39;
    }
  }
}

uint64_t sirinluexternal::SpanProperty::formatText(sirinluexternal::SpanProperty *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((void *)this + 1)) {
    PB::TextFormatter::format();
  }
  uint64_t v5 = *((void *)this + 2);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "value_float");
  }
  uint64_t v6 = *((void *)this + 3);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, a2, "value_int");
  }
  uint64_t v7 = *((void *)this + 4);
  if (v7) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "value_string");
  }
  return MEMORY[0x1F4147498](a2);
}

void *sirinluexternal::SpanProperty::writeTo(void *this, PB::Writer *a2)
{
  unint64_t v3 = this;
  if (this[1]) {
    this = (void *)PB::Writer::write();
  }
  uint64_t v4 = (const PB::Base *)v3[4];
  if (v4) {
    this = (void *)PB::Writer::writeSubmessage(a2, v4);
  }
  uint64_t v5 = (const PB::Base *)v3[3];
  if (v5) {
    this = (void *)PB::Writer::writeSubmessage(a2, v5);
  }
  uint64_t v6 = (const PB::Base *)v3[2];
  if (v6)
  {
    return (void *)PB::Writer::writeSubmessage(a2, v6);
  }
  return this;
}

uint64_t sirinluexternal::SpanProperty::readFrom(sirinluexternal::SpanProperty *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_19;
        }
      }
LABEL_21:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v10 >> 3))
      {
        case 1u:
          operator new();
        case 2u:
          operator new();
        case 3u:
          operator new();
        case 4u:
          operator new();
        default:
          break;
      }
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_21;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_19;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluexternal::SpanProperty::~SpanProperty(sirinluexternal::SpanProperty *this)
{
  sirinluexternal::SpanProperty::~SpanProperty(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t vars8;

  *(void *)this = &unk_1F232D248;
  unint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v5) {
    std::default_delete<std::string>::operator()[abi:ne180100](v5);
  }
  PB::Base::~Base(this);
}

double sirinluexternal::SpanProperty::SpanProperty(sirinluexternal::SpanProperty *this)
{
  *(void *)this = &unk_1F232D248;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

{
  double result;

  *(void *)this = &unk_1F232D248;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

uint64_t sirinluexternal::SpanProperty::SpanProperty(uint64_t this, const sirinluexternal::SpanProperty *a2)
{
  *(void *)this = &unk_1F232D248;
  *(_OWORD *)(this + 8) = 0u;
  *(_OWORD *)(this + 24) = 0u;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  if (*((void *)a2 + 4)) {
    operator new();
  }
  if (*((void *)a2 + 3)) {
    operator new();
  }
  if (*((void *)a2 + 2)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternal::SpanProperty::operator=(uint64_t a1, const sirinluexternal::SpanProperty *a2)
{
  if ((const sirinluexternal::SpanProperty *)a1 != a2)
  {
    sirinluexternal::SpanProperty::SpanProperty((uint64_t)v6, a2);
    long long v3 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v8;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v4;
    long long v8 = v3;
    sirinluexternal::SpanProperty::~SpanProperty((sirinluexternal::SpanProperty *)v6);
  }
  return a1;
}

void *sirinluexternal::swap(void *this, sirinluexternal::SpanProperty *a2, sirinluexternal::SpanProperty *a3)
{
  uint64_t v3 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  uint64_t v4 = this[4];
  this[4] = *((void *)a2 + 4);
  *((void *)a2 + 4) = v4;
  uint64_t v5 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  uint64_t v6 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  return this;
}

uint64_t sirinluexternal::SpanProperty::SpanProperty(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1F232D248;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  uint64_t v4 = a2[1];
  a2[1] = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  if (v5) {
    std::default_delete<std::string>::operator()[abi:ne180100](v5);
  }
  uint64_t v6 = a2[4];
  a2[4] = 0;
  uint64_t v7 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = a2[3];
  a2[3] = 0;
  uint64_t v9 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v8;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = a2[2];
  a2[2] = 0;
  uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  return a1;
}

uint64_t sirinluexternal::SpanProperty::operator=(uint64_t a1, void *a2)
{
  if ((void *)a1 != a2)
  {
    sirinluexternal::SpanProperty::SpanProperty((uint64_t)v6, a2);
    long long v3 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v8;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v4;
    long long v8 = v3;
    sirinluexternal::SpanProperty::~SpanProperty((sirinluexternal::SpanProperty *)v6);
  }
  return a1;
}

BOOL sirinluexternal::SpanProperty::operator==(void *a1, void *a2)
{
  long long v4 = (unsigned __int8 *)a1[1];
  uint64_t v5 = (unsigned __int8 **)a2[1];
  if (v4)
  {
    if (!v5) {
      return 0;
    }
    uint64_t v6 = v4[23];
    if ((v6 & 0x80u) == 0) {
      long long v7 = (unsigned __int8 *)v4[23];
    }
    else {
      long long v7 = (unsigned __int8 *)*((void *)v4 + 1);
    }
    long long v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    int v9 = (char)v8;
    if ((char)v8 < 0) {
      long long v8 = v5[1];
    }
    if (v7 != v8) {
      return 0;
    }
    if (v9 >= 0) {
      uint64_t v10 = (unsigned __int8 *)a2[1];
    }
    else {
      uint64_t v10 = *v5;
    }
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v10, *((void *)v4 + 1))) {
        return 0;
      }
    }
    else if (v4[23])
    {
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6) {
          goto LABEL_18;
        }
      }
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
LABEL_18:
  uint64_t v11 = a1[4];
  uint64_t v12 = a2[4];
  if (v11)
  {
    if (!v12 || (siricommon::StringValue::operator==(v11, v12) & 1) == 0) {
      return 0;
    }
  }
  else if (v12)
  {
    return 0;
  }
  uint64_t v13 = a1[3];
  uint64_t v14 = a2[3];
  if (!v13)
  {
    if (!v14) {
      goto LABEL_34;
    }
    return 0;
  }
  if (!v14) {
    return 0;
  }
  if (*(unsigned char *)(v13 + 12))
  {
    if ((*(unsigned char *)(v14 + 12) & 1) == 0 || *(_DWORD *)(v13 + 8) != *(_DWORD *)(v14 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(v14 + 12))
  {
    return 0;
  }
LABEL_34:
  uint64_t v15 = a1[2];
  uint64_t v16 = a2[2];
  BOOL result = (v15 | v16) == 0;
  if (v15 && v16)
  {
    if (*(unsigned char *)(v15 + 12))
    {
      if ((*(unsigned char *)(v16 + 12) & 1) == 0 || *(float *)(v15 + 8) != *(float *)(v16 + 8)) {
        return 0;
      }
    }
    else if (*(unsigned char *)(v16 + 12))
    {
      return 0;
    }
    return 1;
  }
  return result;
}

unint64_t sirinluexternal::SpanProperty::hash_value(sirinluexternal::SpanProperty *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    unint64_t v3 = std::__string_hash<char>::operator()[abi:ne180100](v2);
  }
  else {
    unint64_t v3 = 0;
  }
  uint64_t v4 = *((void *)this + 4);
  if (v4)
  {
    unint64_t v5 = *(void *)(v4 + 8);
    if (v5) {
      unint64_t v5 = std::__string_hash<char>::operator()[abi:ne180100](v5);
    }
  }
  else
  {
    unint64_t v5 = 0;
  }
  uint64_t v6 = *((void *)this + 3);
  if (v6)
  {
    if (*(unsigned char *)(v6 + 12)) {
      uint64_t v6 = *(int *)(v6 + 8);
    }
    else {
      uint64_t v6 = 0;
    }
  }
  uint64_t v7 = *((void *)this + 2);
  if (v7)
  {
    if (*(unsigned char *)(v7 + 12))
    {
      float v8 = *(float *)(v7 + 8);
      uint64_t v7 = LODWORD(v8);
      if (v8 == 0.0) {
        uint64_t v7 = 0;
      }
    }
    else
    {
      uint64_t v7 = 0;
    }
  }
  return v5 ^ v3 ^ v6 ^ v7;
}

uint64_t sirinluexternal::SpanProperty::makeValueString(uint64_t this)
{
  if (!*(void *)(this + 32)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternal::SpanProperty::makeValueInt(uint64_t this)
{
  if (!*(void *)(this + 24)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternal::SpanProperty::makeValueFloat(uint64_t this)
{
  if (!*(void *)(this + 16)) {
    operator new();
  }
  return this;
}

uint64_t SIRINLUINTERNALTokenReadFrom(unsigned char *a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  unint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 56;
          goto LABEL_67;
        case 2u:
          char v20 = 0;
          unsigned int v21 = 0;
          uint64_t v22 = 0;
          a1[68] |= 1u;
          while (2)
          {
            uint64_t v23 = *v3;
            unint64_t v24 = *(void *)(a2 + v23);
            if (v24 == -1 || v24 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v25 = *(unsigned char *)(*(void *)(a2 + *v7) + v24);
              *(void *)(a2 + v23) = v24 + 1;
              v22 |= (unint64_t)(v25 & 0x7F) << v20;
              if (v25 < 0)
              {
                v20 += 7;
                BOOL v14 = v21++ >= 9;
                if (v14)
                {
                  LODWORD(v22) = 0;
                  goto LABEL_74;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v22) = 0;
          }
LABEL_74:
          uint64_t v55 = 8;
          goto LABEL_96;
        case 3u:
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v22 = 0;
          a1[68] |= 2u;
          while (2)
          {
            uint64_t v28 = *v3;
            unint64_t v29 = *(void *)(a2 + v28);
            if (v29 == -1 || v29 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
              *(void *)(a2 + v28) = v29 + 1;
              v22 |= (unint64_t)(v30 & 0x7F) << v26;
              if (v30 < 0)
              {
                v26 += 7;
                BOOL v14 = v27++ >= 9;
                if (v14)
                {
                  LODWORD(v22) = 0;
                  goto LABEL_78;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v22) = 0;
          }
LABEL_78:
          uint64_t v55 = 32;
          goto LABEL_96;
        case 4u:
          char v31 = 0;
          unsigned int v32 = 0;
          uint64_t v33 = 0;
          a1[68] |= 0x10u;
          while (2)
          {
            uint64_t v34 = *v3;
            unint64_t v35 = *(void *)(a2 + v34);
            if (v35 == -1 || v35 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v36 = *(unsigned char *)(*(void *)(a2 + *v7) + v35);
              *(void *)(a2 + v34) = v35 + 1;
              v33 |= (unint64_t)(v36 & 0x7F) << v31;
              if (v36 < 0)
              {
                v31 += 7;
                BOOL v14 = v32++ >= 9;
                if (v14)
                {
                  uint64_t v33 = 0;
                  goto LABEL_82;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v33 = 0;
          }
LABEL_82:
          BOOL v56 = v33 != 0;
          uint64_t v57 = 64;
          goto LABEL_87;
        case 5u:
          char v37 = 0;
          unsigned int v38 = 0;
          uint64_t v39 = 0;
          a1[68] |= 0x20u;
          while (2)
          {
            uint64_t v40 = *v3;
            unint64_t v41 = *(void *)(a2 + v40);
            if (v41 == -1 || v41 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v42 = *(unsigned char *)(*(void *)(a2 + *v7) + v41);
              *(void *)(a2 + v40) = v41 + 1;
              v39 |= (unint64_t)(v42 & 0x7F) << v37;
              if (v42 < 0)
              {
                v37 += 7;
                BOOL v14 = v38++ >= 9;
                if (v14)
                {
                  uint64_t v39 = 0;
                  goto LABEL_86;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v39 = 0;
          }
LABEL_86:
          BOOL v56 = v39 != 0;
          uint64_t v57 = 65;
LABEL_87:
          a1[v57] = v56;
          continue;
        case 6u:
          unint64_t v43 = PBReaderReadString();
          if (v43) {
            [a1 addCleanValues:v43];
          }
          goto LABEL_70;
        case 7u:
          char v44 = 0;
          unsigned int v45 = 0;
          uint64_t v22 = 0;
          a1[68] |= 8u;
          while (2)
          {
            uint64_t v46 = *v3;
            unint64_t v47 = *(void *)(a2 + v46);
            if (v47 == -1 || v47 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v48 = *(unsigned char *)(*(void *)(a2 + *v7) + v47);
              *(void *)(a2 + v46) = v47 + 1;
              v22 |= (unint64_t)(v48 & 0x7F) << v44;
              if (v48 < 0)
              {
                v44 += 7;
                BOOL v14 = v45++ >= 9;
                if (v14)
                {
                  LODWORD(v22) = 0;
                  goto LABEL_91;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v22) = 0;
          }
LABEL_91:
          uint64_t v55 = 48;
          goto LABEL_96;
        case 8u:
          char v49 = 0;
          unsigned int v50 = 0;
          uint64_t v22 = 0;
          a1[68] |= 4u;
          break;
        case 9u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 16;
LABEL_67:
          unint64_t v54 = *(void **)&a1[v18];
          *(void *)&a1[v18] = v17;

          continue;
        case 0xAu:
          unint64_t v43 = PBReaderReadString();
          if (v43) {
            [a1 addNormalizedValues:v43];
          }
LABEL_70:

          continue;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v51 = *v3;
        unint64_t v52 = *(void *)(a2 + v51);
        if (v52 == -1 || v52 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v53 = *(unsigned char *)(*(void *)(a2 + *v7) + v52);
        *(void *)(a2 + v51) = v52 + 1;
        v22 |= (unint64_t)(v53 & 0x7F) << v49;
        if ((v53 & 0x80) == 0) {
          goto LABEL_93;
        }
        v49 += 7;
        BOOL v14 = v50++ >= 9;
        if (v14)
        {
          LODWORD(v22) = 0;
          goto LABEL_95;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_93:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v22) = 0;
      }
LABEL_95:
      uint64_t v55 = 36;
LABEL_96:
      *(_DWORD *)&a1[v55] = v22;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sirinluexternalcdm_planner::CdmPlannerResponse::formatText(sirinluexternalcdm_planner::CdmPlannerResponse *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((void *)this + 1)) {
    PB::TextFormatter::format();
  }
  if (*((void *)this + 2)) {
    PB::TextFormatter::format();
  }
  unint64_t v5 = (uint64_t *)*((void *)this + 3);
  uint64_t v6 = (uint64_t *)*((void *)this + 4);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "transcript_events");
  }
  return MEMORY[0x1F4147498](a2);
}

void *sirinluexternalcdm_planner::CdmPlannerResponse::writeTo(void *this, PB::Writer *a2)
{
  unint64_t v3 = this;
  if (this[2]) {
    this = (void *)PB::Writer::write();
  }
  if (v3[1]) {
    this = (void *)PB::Writer::write();
  }
  unint64_t v5 = (const PB::Base **)v3[3];
  uint64_t v4 = (const PB::Base **)v3[4];
  while (v5 != v4)
  {
    uint64_t v6 = *v5++;
    this = (void *)PB::Writer::writeSubmessage(a2, v6);
  }
  return this;
}

uint64_t sirinluexternalcdm_planner::CdmPlannerResponse::readFrom(sirinluexternalcdm_planner::CdmPlannerResponse *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_19;
        }
      }
LABEL_23:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v19 = v10 >> 3;
      if ((v10 >> 3) == 3) {
        operator new();
      }
      if (v19 == 2) {
        operator new();
      }
      if (v19 == 1) {
        operator new();
      }
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_23;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_19;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sub_1C8B5C484(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sirinluexternalcdm_planner::CdmPlannerResponse::~CdmPlannerResponse(sirinluexternalcdm_planner::CdmPlannerResponse *this)
{
  sirinluexternalcdm_planner::CdmPlannerResponse::~CdmPlannerResponse(this);
  JUMPOUT(0x1CB772580);
}

{
  void **v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1F232D298;
  unint64_t v2 = (void **)((char *)this + 24);
  if (*((void *)this + 3))
  {
    std::vector<std::unique_ptr<siricommon::StringValue>>::__clear[abi:ne180100]((void *)this + 3);
    operator delete(*v2);
  }
  unint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    std::default_delete<std::string>::operator()[abi:ne180100](v3);
  }
  std::unique_ptr<PB::Data>::reset[abi:ne180100]((void ***)this + 1, 0);
  PB::Base::~Base(this);
}

double sirinluexternalcdm_planner::CdmPlannerResponse::CdmPlannerResponse(sirinluexternalcdm_planner::CdmPlannerResponse *this)
{
  *(void *)this = &unk_1F232D298;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 5) = 0;
  return result;
}

{
  double result;

  *(void *)this = &unk_1F232D298;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 5) = 0;
  return result;
}

uint64_t sirinluexternalcdm_planner::CdmPlannerResponse::CdmPlannerResponse(uint64_t this, const sirinluexternalcdm_planner::CdmPlannerResponse *a2)
{
  *(_OWORD *)(this + 8) = 0u;
  *(void *)this = &unk_1F232D298;
  *(_OWORD *)(this + 24) = 0u;
  *(void *)(this + 40) = 0;
  if (*((void *)a2 + 2)) {
    operator new();
  }
  if (*((void *)a2 + 1)) {
    operator new();
  }
  if (*((void *)a2 + 3) != *((void *)a2 + 4)) {
    operator new();
  }
  return this;
}

void sub_1C8B5C7EC(void *a1)
{
}

uint64_t sirinluexternalcdm_planner::CdmPlannerResponse::operator=(uint64_t a1, const sirinluexternalcdm_planner::CdmPlannerResponse *a2)
{
  if ((const sirinluexternalcdm_planner::CdmPlannerResponse *)a1 != a2)
  {
    sirinluexternalcdm_planner::CdmPlannerResponse::CdmPlannerResponse((uint64_t)&v7, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v3;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    long long v9 = v4;
    uint64_t v5 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v10;
    uint64_t v10 = v5;
    sirinluexternalcdm_planner::CdmPlannerResponse::~CdmPlannerResponse((sirinluexternalcdm_planner::CdmPlannerResponse *)&v7);
  }
  return a1;
}

void *sirinluexternalcdm_planner::swap(void *this, sirinluexternalcdm_planner::CdmPlannerResponse *a2, sirinluexternalcdm_planner::CdmPlannerResponse *a3)
{
  uint64_t v3 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v3;
  uint64_t v4 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  uint64_t v5 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  uint64_t v6 = this[4];
  this[4] = *((void *)a2 + 4);
  *((void *)a2 + 4) = v6;
  uint64_t v7 = this[5];
  this[5] = *((void *)a2 + 5);
  *((void *)a2 + 5) = v7;
  return this;
}

uint64_t sirinluexternalcdm_planner::CdmPlannerResponse::CdmPlannerResponse(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F232D298;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v4 = (void ***)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 40) = 0;
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  uint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v5;
  if (v6) {
    std::default_delete<std::string>::operator()[abi:ne180100](v6);
  }
  uint64_t v7 = *(void ***)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  std::unique_ptr<PB::Data>::reset[abi:ne180100](v4, v7);
  long long v8 = (void **)(a1 + 24);
  if (*(void *)(a1 + 24))
  {
    std::vector<std::unique_ptr<siricommon::StringValue>>::__clear[abi:ne180100]((void *)(a1 + 24));
    operator delete(*v8);
    *long long v8 = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  return a1;
}

uint64_t sirinluexternalcdm_planner::CdmPlannerResponse::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sirinluexternalcdm_planner::CdmPlannerResponse::CdmPlannerResponse((uint64_t)&v7, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v3;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    long long v9 = v4;
    uint64_t v5 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v10;
    uint64_t v10 = v5;
    sirinluexternalcdm_planner::CdmPlannerResponse::~CdmPlannerResponse((sirinluexternalcdm_planner::CdmPlannerResponse *)&v7);
  }
  return a1;
}

uint64_t sirinluexternalcdm_planner::CdmPlannerResponse::operator==(void *a1, void *a2)
{
  long long v4 = (unsigned __int8 *)a1[2];
  uint64_t v5 = (unsigned __int8 **)a2[2];
  if (v4)
  {
    if (!v5) {
      return 0;
    }
    uint64_t v6 = v4[23];
    if ((v6 & 0x80u) == 0) {
      uint64_t v7 = (unsigned __int8 *)v4[23];
    }
    else {
      uint64_t v7 = (unsigned __int8 *)*((void *)v4 + 1);
    }
    long long v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    int v9 = (char)v8;
    if ((char)v8 < 0) {
      long long v8 = v5[1];
    }
    if (v7 != v8) {
      return 0;
    }
    if (v9 >= 0) {
      uint64_t v10 = (unsigned __int8 *)a2[2];
    }
    else {
      uint64_t v10 = *v5;
    }
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v10, *((void *)v4 + 1))) {
        return 0;
      }
    }
    else if (v4[23])
    {
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6) {
          goto LABEL_18;
        }
      }
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
LABEL_18:
  uint64_t v11 = a2[1];
  if (!a1[1])
  {
    if (!v11) {
      goto LABEL_24;
    }
    return 0;
  }
  if (!v11 || (PB::Data::operator==() & 1) == 0 && a1[1] | a2[1]) {
    return 0;
  }
LABEL_24:
  BOOL v13 = (char *)a1[3];
  char v12 = (char *)a1[4];
  unsigned int v15 = a2 + 3;
  char v14 = (void **)a2[3];
  if (v12 - v13 != v15[1] - (void)v14) {
    return 0;
  }
  if (v13 == v12) {
    return 1;
  }
  do
  {
    uint64_t result = sirinluexternalcdm_planner::CDMTranscriptEvent::operator==(*(void **)v13, *v14);
    if (!result) {
      break;
    }
    v13 += 8;
    ++v14;
  }
  while (v13 != (char *)a1[4]);
  return result;
}

unint64_t sirinluexternalcdm_planner::CdmPlannerResponse::hash_value(sirinluexternalcdm_planner::CdmPlannerResponse *this)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    unint64_t v3 = std::__string_hash<char>::operator()[abi:ne180100](v2);
  }
  else {
    unint64_t v3 = 0;
  }
  if (*((void *)this + 1)) {
    uint64_t v4 = PBHashBytes();
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v6 = (sirinluexternalcdm_planner::CDMTranscriptEvent **)*((void *)this + 3);
  uint64_t v5 = (sirinluexternalcdm_planner::CDMTranscriptEvent **)*((void *)this + 4);
  if (v6 == v5)
  {
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = 0;
    do
    {
      long long v8 = *v6++;
      v7 ^= sirinluexternalcdm_planner::CDMTranscriptEvent::hash_value(v8);
    }
    while (v6 != v5);
  }
  return v4 ^ v3 ^ v7;
}

uint64_t SIRINLUINTERNALSNLP_INTERMEDIATESNLPHandcraftedRulesReadFrom(void *a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = PBReaderReadString();
        if (v17) {
          [a1 addRuleIds:v17];
        }
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL SIRINLUEXTERNALNLU_ROUTERRequestSummaryReadFrom(void *a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = (SIRINLUEXTERNALNLU_ROUTERTurnSummary *)a1[2];
        a1[2] = v17;
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_26:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v18 = objc_alloc_init(SIRINLUEXTERNALNLU_ROUTERTurnSummary);
    [a1 addTurnSummaries:v18];
    if (!PBReaderPlaceMark() || (SIRINLUEXTERNALNLU_ROUTERTurnSummaryReadFrom((uint64_t)v18, a2) & 1) == 0)
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_24;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t SIRINLUINTERNALPlanOverrideValueReadFrom(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = *(void **)(a1 + 8);
        *(void *)(a1 + 8) = v17;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sirinluinternaloverrides::OverridesResponse::formatText(sirinluinternaloverrides::OverridesResponse *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = (uint64_t *)*((void *)this + 1);
  uint64_t v6 = (uint64_t *)*((void *)this + 2);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "parses");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluinternaloverrides::OverridesResponse::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v2 = *(const PB::Base ***)(this + 8);
  for (uint64_t i = *(const PB::Base ***)(this + 16); v2 != i; this = PB::Writer::writeSubmessage(a2, v5))
    uint64_t v5 = *v2++;
  return this;
}

uint64_t sirinluinternaloverrides::OverridesResponse::readFrom(sirinluinternaloverrides::OverridesResponse *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        PB::PtrVector<sirinluexternal::UserParse>::emplace_back<>();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluinternaloverrides::OverridesResponse::~OverridesResponse(sirinluinternaloverrides::OverridesResponse *this)
{
  *(void *)this = &unk_1F232D2E8;
  unint64_t v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
  JUMPOUT(0x1CB772580);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_1F232D2E8;
  unint64_t v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_1F232D2E8;
  unint64_t v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
}

void *sirinluinternaloverrides::OverridesResponse::OverridesResponse(void *this)
{
  *this = &unk_1F232D2E8;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = &unk_1F232D2E8;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

void *sirinluinternaloverrides::OverridesResponse::OverridesResponse(void *this, const sirinluinternaloverrides::OverridesResponse *a2)
{
  this[1] = 0;
  *this = &unk_1F232D2E8;
  this[2] = 0;
  this[3] = 0;
  if (*((void *)a2 + 1) != *((void *)a2 + 2)) {
    PB::PtrVector<sirinluexternal::UserParse>::emplace_back<sirinluexternal::UserParse const&>();
  }
  return this;
}

uint64_t sirinluinternaloverrides::OverridesResponse::operator=(uint64_t a1, const sirinluinternaloverrides::OverridesResponse *a2)
{
  if ((const sirinluinternaloverrides::OverridesResponse *)a1 != a2)
  {
    sirinluinternaloverrides::OverridesResponse::OverridesResponse(&v6, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v3;
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v8;
    uint64_t v8 = v4;
    uint64_t v6 = &unk_1F232D2E8;
    unsigned int v9 = (void **)&v7;
    std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v9);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

void *sirinluinternaloverrides::swap(void *this, sirinluinternaloverrides::OverridesResponse *a2, sirinluinternaloverrides::OverridesResponse *a3)
{
  uint64_t v3 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  uint64_t v4 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  return this;
}

uint64_t sirinluinternaloverrides::OverridesResponse::OverridesResponse(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F232D2E8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate((void **)(a1 + 8));
  *uint64_t v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

{
  _OWORD *v4;

  *(void *)a1 = &unk_1F232D2E8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate((void **)(a1 + 8));
  *uint64_t v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

uint64_t sirinluinternaloverrides::OverridesResponse::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v9 = &unk_1F232D2E8;
    long long v10 = 0uLL;
    uint64_t v11 = 0;
    std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate((void **)&v10);
    uint64_t v4 = *(void *)(a2 + 24);
    long long v5 = *(_OWORD *)(a2 + 8);
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    long long v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v5;
    long long v10 = v6;
    uint64_t v7 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v4;
    uint64_t v11 = v7;
    char v12 = (void **)&v10;
    unsigned int v9 = &unk_1F232D2E8;
    std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v12);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

BOOL sirinluinternaloverrides::OverridesResponse::operator==(uint64_t a1, uint64_t a2)
{
  return PB::PtrVector<sirinluexternal::UserParse>::operator==((uint64_t *)(a1 + 8), *(uint64_t **)(a2 + 8), *(void *)(a2 + 16));
}

uint64_t sirinluinternaloverrides::OverridesResponse::hash_value(sirinluinternaloverrides::OverridesResponse *this)
{
  uint64_t v1 = (sirinluexternal::UserParse **)*((void *)this + 1);
  unint64_t v2 = (sirinluexternal::UserParse **)*((void *)this + 2);
  if (v1 == v2) {
    return 0;
  }
  uint64_t v3 = 0;
  do
  {
    uint64_t v4 = *v1++;
    v3 ^= sirinluexternal::UserParse::hash_value(v4);
  }
  while (v1 != v2);
  return v3;
}

void sub_1C8B5EB5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C8B5EBE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C8B5EC74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C8B5ECCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B5ED48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C8B5EDA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B5EE1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C8B5EE74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B5EEF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C8B5EF48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B5EFA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B5F028(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL SIRINLUINTERNALSubwordTokenChainReadFrom(void *a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  long long v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = (SIRINLUINTERNALSubwordToken *)a1[1];
        a1[1] = v17;
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_26:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v18 = objc_alloc_init(SIRINLUINTERNALSubwordToken);
    [a1 addSubwordTokens:v18];
    if (!PBReaderPlaceMark() || (SIRINLUINTERNALSubwordTokenReadFrom((uint64_t)v18, a2) & 1) == 0)
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_24;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t SIRINLUINTERNALSubwordTokenReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  long long v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v22 = 0;
        *(unsigned char *)(a1 + 24) |= 2u;
        while (1)
        {
          uint64_t v23 = *v3;
          unint64_t v24 = *(void *)(a2 + v23);
          if (v24 == -1 || v24 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v25 = *(unsigned char *)(*(void *)(a2 + *v7) + v24);
          *(void *)(a2 + v23) = v24 + 1;
          v22 |= (unint64_t)(v25 & 0x7F) << v20;
          if ((v25 & 0x80) == 0) {
            goto LABEL_39;
          }
          v20 += 7;
          BOOL v14 = v21++ >= 9;
          if (v14)
          {
            LODWORD(v22) = 0;
            goto LABEL_41;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_39:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v22) = 0;
        }
LABEL_41:
        uint64_t v32 = 12;
      }
      else
      {
        if (v17 != 2)
        {
          if (v17 == 1)
          {
            uint64_t v18 = PBReaderReadString();
            unint64_t v19 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v18;
          }
          else
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
          }
          continue;
        }
        char v26 = 0;
        unsigned int v27 = 0;
        uint64_t v22 = 0;
        *(unsigned char *)(a1 + 24) |= 1u;
        while (1)
        {
          uint64_t v28 = *v3;
          unint64_t v29 = *(void *)(a2 + v28);
          if (v29 == -1 || v29 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
          *(void *)(a2 + v28) = v29 + 1;
          v22 |= (unint64_t)(v30 & 0x7F) << v26;
          if ((v30 & 0x80) == 0) {
            goto LABEL_43;
          }
          v26 += 7;
          BOOL v14 = v27++ >= 9;
          if (v14)
          {
            LODWORD(v22) = 0;
            goto LABEL_45;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_43:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v22) = 0;
        }
LABEL_45:
        uint64_t v32 = 8;
      }
      *(_DWORD *)(a1 + v32) = v22;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t SIRINLUINTERNALLVCOverrideValueReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  long long v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        unint64_t v17 = objc_alloc_init(SIRINLUEXTERNALMultilingualVariant);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark()
          || (SIRINLUEXTERNALMultilingualVariantReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1C8B60BBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B60DB8(_Unwind_Exception *a1)
{
  long long v5 = v3;

  _Unwind_Resume(a1);
}

void sub_1C8B60F5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B611B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C8B6137C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B614D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B61674(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B61788(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B618E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B619E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B61B5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B62074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, __int16 a20,char a21,char a22)
{
  std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100](&a19);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }

  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA418];
  uint64_t v3 = *MEMORY[0x1E4FBA418];
  *(void *)a1 = *MEMORY[0x1E4FBA418];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1CB772500](a1 + 112);
  return a1;
}

uint64_t SIRICOMMONFloatValueReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  long long v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        *(unsigned char *)(a1 + 12) |= 1u;
        uint64_t v18 = *v3;
        unint64_t v19 = *(void *)(a2 + v18);
        if (v19 <= 0xFFFFFFFFFFFFFFFBLL && v19 + 4 <= *(void *)(a2 + *v4))
        {
          int v20 = *(_DWORD *)(*(void *)(a2 + *v7) + v19);
          *(void *)(a2 + v18) = v19 + 4;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          int v20 = 0;
        }
        *(_DWORD *)(a1 + 8) = v20;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL SIRINLUINTERNALMENTION_DETECTORMentionDetectorResponseReadFrom(id *a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  long long v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        unint64_t v17 = objc_alloc_init(SIRINLUEXTERNALUUID);
        objc_storeStrong(a1 + 2, v17);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_30;
        }
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_27:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    unint64_t v17 = objc_alloc_init(SIRINLUINTERNALMatchingSpan);
    [a1 addMentions:v17];
    if (!PBReaderPlaceMark() || (SIRINLUINTERNALMatchingSpanReadFrom((uint64_t)v17, a2) & 1) == 0)
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t SIRINLUEXTERNALUsoEntityIdentifierReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  long long v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 64) |= 4u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_59;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_61;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_59:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v19) = 0;
        }
LABEL_61:
        uint64_t v43 = 32;
        goto LABEL_74;
      case 2u:
        uint64_t v24 = PBReaderReadString();
        uint64_t v25 = 8;
        goto LABEL_30;
      case 3u:
        uint64_t v24 = PBReaderReadString();
        uint64_t v25 = 56;
LABEL_30:
        char v26 = *(void **)(a1 + v25);
        *(void *)(a1 + v25) = v24;

        goto LABEL_75;
      case 4u:
        unsigned int v27 = objc_alloc_init(SIRICOMMONStringValue);
        objc_storeStrong((id *)(a1 + 24), v27);
        if (!PBReaderPlaceMark() || (SIRICOMMONStringValueReadFrom((uint64_t)v27, a2) & 1) == 0) {
          goto LABEL_77;
        }
        goto LABEL_36;
      case 5u:
        unsigned int v27 = objc_alloc_init(SIRICOMMONDoubleValue);
        objc_storeStrong((id *)(a1 + 40), v27);
        if PBReaderPlaceMark() && (SIRICOMMONDoubleValueReadFrom((uint64_t)v27, a2))
        {
LABEL_36:
          PBReaderRecallMark();

LABEL_75:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_77:

        return 0;
      case 6u:
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 64) |= 8u;
        while (2)
        {
          uint64_t v30 = *v3;
          unint64_t v31 = *(void *)(a2 + v30);
          if (v31 == -1 || v31 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v32 = *(unsigned char *)(*(void *)(a2 + *v7) + v31);
            *(void *)(a2 + v30) = v31 + 1;
            v19 |= (unint64_t)(v32 & 0x7F) << v28;
            if (v32 < 0)
            {
              v28 += 7;
              BOOL v14 = v29++ >= 9;
              if (v14)
              {
                LODWORD(v19) = 0;
                goto LABEL_65;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v19) = 0;
        }
LABEL_65:
        uint64_t v43 = 48;
        goto LABEL_74;
      case 7u:
        char v33 = 0;
        unsigned int v34 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 64) |= 1u;
        while (2)
        {
          uint64_t v35 = *v3;
          unint64_t v36 = *(void *)(a2 + v35);
          if (v36 == -1 || v36 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v37 = *(unsigned char *)(*(void *)(a2 + *v7) + v36);
            *(void *)(a2 + v35) = v36 + 1;
            v19 |= (unint64_t)(v37 & 0x7F) << v33;
            if (v37 < 0)
            {
              v33 += 7;
              BOOL v14 = v34++ >= 9;
              if (v14)
              {
                LODWORD(v19) = 0;
                goto LABEL_69;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v19) = 0;
        }
LABEL_69:
        uint64_t v43 = 16;
        goto LABEL_74;
      case 8u:
        char v38 = 0;
        unsigned int v39 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 64) |= 2u;
        while (2)
        {
          uint64_t v40 = *v3;
          unint64_t v41 = *(void *)(a2 + v40);
          if (v41 == -1 || v41 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v42 = *(unsigned char *)(*(void *)(a2 + *v7) + v41);
            *(void *)(a2 + v40) = v41 + 1;
            v19 |= (unint64_t)(v42 & 0x7F) << v38;
            if (v42 < 0)
            {
              v38 += 7;
              BOOL v14 = v39++ >= 9;
              if (v14)
              {
                LODWORD(v19) = 0;
                goto LABEL_73;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v19) = 0;
        }
LABEL_73:
        uint64_t v43 = 20;
LABEL_74:
        *(_DWORD *)(a1 + v43) = v19;
        goto LABEL_75;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_75;
    }
  }
}

uint64_t SIRINLUEXTERNALSpanReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  long long v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      uint64_t v12 = *(void *)(a2 + v11);
      unint64_t v13 = v12 + 1;
      if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
        break;
      }
      char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v15 = v9++ >= 9;
      if (v15)
      {
        unint64_t v10 = 0;
        int v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    int v17 = v10 & 7;
    if (v16 || v17 == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v19 = PBReaderReadString();
        uint64_t v20 = 56;
        goto LABEL_23;
      case 2u:
        uint64_t v19 = PBReaderReadString();
        uint64_t v20 = 48;
LABEL_23:
        unint64_t v21 = *(void **)(a1 + v20);
        *(void *)(a1 + v20) = v19;

        goto LABEL_78;
      case 3u:
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        *(unsigned char *)(a1 + 80) |= 4u;
        while (2)
        {
          uint64_t v25 = *v3;
          uint64_t v26 = *(void *)(a2 + v25);
          unint64_t v27 = v26 + 1;
          if (v26 == -1 || v27 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v26);
            *(void *)(a2 + v25) = v27;
            v24 |= (unint64_t)(v28 & 0x7F) << v22;
            if (v28 < 0)
            {
              v22 += 7;
              BOOL v15 = v23++ >= 9;
              if (v15)
              {
                LODWORD(v24) = 0;
                goto LABEL_60;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v24) = 0;
        }
LABEL_60:
        uint64_t v47 = 64;
        goto LABEL_65;
      case 4u:
        char v29 = 0;
        unsigned int v30 = 0;
        uint64_t v24 = 0;
        *(unsigned char *)(a1 + 80) |= 2u;
        while (2)
        {
          uint64_t v31 = *v3;
          uint64_t v32 = *(void *)(a2 + v31);
          unint64_t v33 = v32 + 1;
          if (v32 == -1 || v33 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v32);
            *(void *)(a2 + v31) = v33;
            v24 |= (unint64_t)(v34 & 0x7F) << v29;
            if (v34 < 0)
            {
              v29 += 7;
              BOOL v15 = v30++ >= 9;
              if (v15)
              {
                LODWORD(v24) = 0;
                goto LABEL_64;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v24) = 0;
        }
LABEL_64:
        uint64_t v47 = 40;
LABEL_65:
        *(_DWORD *)(a1 + v47) = v24;
        goto LABEL_78;
      case 5u:
        uint64_t v35 = objc_alloc_init(SIRINLUEXTERNALUsoGraph);
        objc_storeStrong((id *)(a1 + 72), v35);
        if (PBReaderPlaceMark() && SIRINLUEXTERNALUsoGraphReadFrom((id *)&v35->super.super.isa, a2))
        {
          PBReaderRecallMark();

LABEL_78:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }

        return 0;
      case 6u:
        *(unsigned char *)(a1 + 80) |= 1u;
        uint64_t v36 = *v3;
        unint64_t v37 = *(void *)(a2 + v36);
        if (v37 <= 0xFFFFFFFFFFFFFFF7 && v37 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v38 = *(void *)(*(void *)(a2 + *v7) + v37);
          *(void *)(a2 + v36) = v37 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v38 = 0;
        }
        *(void *)(a1 + 32) = v38;
        goto LABEL_78;
      case 7u:
        if (v17 == 2)
        {
          uint64_t result = PBReaderPlaceMark();
          if (!result) {
            return result;
          }
          while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
          {
            char v40 = 0;
            unsigned int v41 = 0;
            uint64_t v42 = 0;
            while (1)
            {
              uint64_t v43 = *v3;
              uint64_t v44 = *(void *)(a2 + v43);
              unint64_t v45 = v44 + 1;
              if (v44 == -1 || v45 > *(void *)(a2 + *v4)) {
                break;
              }
              char v46 = *(unsigned char *)(*(void *)(a2 + *v7) + v44);
              *(void *)(a2 + v43) = v45;
              v42 |= (unint64_t)(v46 & 0x7F) << v40;
              if (v46 < 0)
              {
                v40 += 7;
                BOOL v15 = v41++ >= 9;
                if (!v15) {
                  continue;
                }
              }
              goto LABEL_56;
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_56:
            PBRepeatedInt32Add();
          }
          PBReaderRecallMark();
        }
        else
        {
          char v48 = 0;
          unsigned int v49 = 0;
          uint64_t v50 = 0;
          while (1)
          {
            uint64_t v51 = *v3;
            uint64_t v52 = *(void *)(a2 + v51);
            unint64_t v53 = v52 + 1;
            if (v52 == -1 || v53 > *(void *)(a2 + *v4)) {
              break;
            }
            char v54 = *(unsigned char *)(*(void *)(a2 + *v7) + v52);
            *(void *)(a2 + v51) = v53;
            v50 |= (unint64_t)(v54 & 0x7F) << v48;
            if (v54 < 0)
            {
              v48 += 7;
              BOOL v15 = v49++ >= 9;
              if (!v15) {
                continue;
              }
            }
            goto LABEL_75;
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_75:
          PBRepeatedInt32Add();
        }
        goto LABEL_78;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_78;
    }
  }
}

uint64_t sirinluexternal::UsoEntityIdentifier::formatText(sirinluexternal::UsoEntityIdentifier *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((void *)this + 1)) {
    PB::TextFormatter::format();
  }
  char v5 = *((unsigned char *)this + 56);
  if (v5)
  {
    PB::TextFormatter::format(a2, "group_index");
    char v5 = *((unsigned char *)this + 56);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(a2, "interpretation_group");
  }
  uint64_t v6 = *((void *)this + 2);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, a2, "namespace_a");
  }
  if ((*((unsigned char *)this + 56) & 4) != 0) {
    PB::TextFormatter::format(a2, "node_index");
  }
  uint64_t v7 = *((void *)this + 3);
  if (v7) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "probability");
  }
  if ((*((unsigned char *)this + 56) & 8) != 0) {
    PB::TextFormatter::format(a2, "source_component");
  }
  if (*((void *)this + 4)) {
    PB::TextFormatter::format();
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluexternal::UsoEntityIdentifier::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if ((*(unsigned char *)(this + 56) & 4) != 0) {
    this = PB::Writer::writeVarInt(a2);
  }
  if (*(void *)(v3 + 8)) {
    this = PB::Writer::write();
  }
  if (*(void *)(v3 + 32)) {
    this = PB::Writer::write();
  }
  uint64_t v4 = *(const PB::Base **)(v3 + 16);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  char v5 = *(const PB::Base **)(v3 + 24);
  if (v5) {
    this = PB::Writer::writeSubmessage(a2, v5);
  }
  char v6 = *(unsigned char *)(v3 + 56);
  if ((v6 & 8) == 0)
  {
    if ((*(unsigned char *)(v3 + 56) & 1) == 0) {
      goto LABEL_13;
    }
LABEL_16:
    this = PB::Writer::writeVarInt(a2);
    if ((*(unsigned char *)(v3 + 56) & 2) == 0) {
      return this;
    }
    goto LABEL_17;
  }
  this = PB::Writer::writeVarInt(a2);
  char v6 = *(unsigned char *)(v3 + 56);
  if (v6) {
    goto LABEL_16;
  }
LABEL_13:
  if ((v6 & 2) == 0) {
    return this;
  }
LABEL_17:
  return PB::Writer::writeVarInt(a2);
}

uint64_t sirinluexternal::UsoEntityIdentifier::readFrom(sirinluexternal::UsoEntityIdentifier *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_25;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      goto LABEL_20;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_25:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 56) |= 4u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v22 = *((void *)a2 + 2);
        uint64_t v23 = *(void *)a2;
        if (v21 <= 0xFFFFFFFFFFFFFFF5 && v21 + 10 <= v22)
        {
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          do
          {
            unint64_t v27 = v21 + 1;
            *((void *)a2 + 1) = v21 + 1;
            char v28 = *(unsigned char *)(v23 + v21);
            v26 |= (unint64_t)(v28 & 0x7F) << v24;
            if ((v28 & 0x80) == 0) {
              goto LABEL_90;
            }
            v24 += 7;
            unint64_t v21 = v27;
            BOOL v14 = v25++ > 8;
          }
          while (!v14);
LABEL_65:
          LODWORD(v26) = 0;
          goto LABEL_90;
        }
        char v53 = 0;
        unsigned int v54 = 0;
        uint64_t v26 = 0;
        if (v22 <= v21) {
          unint64_t v22 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v22 == v21)
          {
            LODWORD(v26) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v55 = v21 + 1;
            char v56 = *(unsigned char *)(v23 + v21);
            *((void *)a2 + 1) = v55;
            v26 |= (unint64_t)(v56 & 0x7F) << v53;
            if (v56 < 0)
            {
              v53 += 7;
              unint64_t v21 = v55;
              BOOL v14 = v54++ > 8;
              if (v14) {
                goto LABEL_65;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v26) = 0;
            }
          }
          break;
        }
LABEL_90:
        *((_DWORD *)this + 12) = v26;
        goto LABEL_20;
      case 2u:
        operator new();
      case 3u:
        operator new();
      case 4u:
        operator new();
      case 5u:
        operator new();
      case 6u:
        *((unsigned char *)this + 56) |= 8u;
        unint64_t v29 = *((void *)a2 + 1);
        unint64_t v30 = *((void *)a2 + 2);
        uint64_t v31 = *(void *)a2;
        if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
        {
          char v32 = 0;
          unsigned int v33 = 0;
          uint64_t v34 = 0;
          do
          {
            unint64_t v35 = v29 + 1;
            *((void *)a2 + 1) = v29 + 1;
            char v36 = *(unsigned char *)(v31 + v29);
            v34 |= (unint64_t)(v36 & 0x7F) << v32;
            if ((v36 & 0x80) == 0) {
              goto LABEL_94;
            }
            v32 += 7;
            unint64_t v29 = v35;
            BOOL v14 = v33++ > 8;
          }
          while (!v14);
LABEL_72:
          LODWORD(v34) = 0;
          goto LABEL_94;
        }
        char v57 = 0;
        unsigned int v58 = 0;
        uint64_t v34 = 0;
        if (v30 <= v29) {
          unint64_t v30 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v30 == v29)
          {
            LODWORD(v34) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v59 = v29 + 1;
            char v60 = *(unsigned char *)(v31 + v29);
            *((void *)a2 + 1) = v59;
            v34 |= (unint64_t)(v60 & 0x7F) << v57;
            if (v60 < 0)
            {
              v57 += 7;
              unint64_t v29 = v59;
              BOOL v14 = v58++ > 8;
              if (v14) {
                goto LABEL_72;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v34) = 0;
            }
          }
          break;
        }
LABEL_94:
        *((_DWORD *)this + 13) = v34;
        goto LABEL_20;
      case 7u:
        *((unsigned char *)this + 56) |= 1u;
        unint64_t v37 = *((void *)a2 + 1);
        unint64_t v38 = *((void *)a2 + 2);
        uint64_t v39 = *(void *)a2;
        if (v37 <= 0xFFFFFFFFFFFFFFF5 && v37 + 10 <= v38)
        {
          char v40 = 0;
          unsigned int v41 = 0;
          uint64_t v42 = 0;
          do
          {
            unint64_t v43 = v37 + 1;
            *((void *)a2 + 1) = v37 + 1;
            char v44 = *(unsigned char *)(v39 + v37);
            v42 |= (unint64_t)(v44 & 0x7F) << v40;
            if ((v44 & 0x80) == 0) {
              goto LABEL_98;
            }
            v40 += 7;
            unint64_t v37 = v43;
            BOOL v14 = v41++ > 8;
          }
          while (!v14);
LABEL_79:
          LODWORD(v42) = 0;
          goto LABEL_98;
        }
        char v61 = 0;
        unsigned int v62 = 0;
        uint64_t v42 = 0;
        if (v38 <= v37) {
          unint64_t v38 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v38 == v37)
          {
            LODWORD(v42) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v63 = v37 + 1;
            char v64 = *(unsigned char *)(v39 + v37);
            *((void *)a2 + 1) = v63;
            v42 |= (unint64_t)(v64 & 0x7F) << v61;
            if (v64 < 0)
            {
              v61 += 7;
              unint64_t v37 = v63;
              BOOL v14 = v62++ > 8;
              if (v14) {
                goto LABEL_79;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v42) = 0;
            }
          }
          break;
        }
LABEL_98:
        *((_DWORD *)this + 10) = v42;
        goto LABEL_20;
      case 8u:
        *((unsigned char *)this + 56) |= 2u;
        unint64_t v45 = *((void *)a2 + 1);
        unint64_t v46 = *((void *)a2 + 2);
        uint64_t v47 = *(void *)a2;
        if (v45 <= 0xFFFFFFFFFFFFFFF5 && v45 + 10 <= v46)
        {
          char v48 = 0;
          unsigned int v49 = 0;
          uint64_t v50 = 0;
          do
          {
            unint64_t v51 = v45 + 1;
            *((void *)a2 + 1) = v45 + 1;
            char v52 = *(unsigned char *)(v47 + v45);
            v50 |= (unint64_t)(v52 & 0x7F) << v48;
            if ((v52 & 0x80) == 0) {
              goto LABEL_102;
            }
            v48 += 7;
            unint64_t v45 = v51;
            BOOL v14 = v49++ > 8;
          }
          while (!v14);
LABEL_86:
          LODWORD(v50) = 0;
          goto LABEL_102;
        }
        char v65 = 0;
        unsigned int v66 = 0;
        uint64_t v50 = 0;
        if (v46 <= v45) {
          unint64_t v46 = *((void *)a2 + 1);
        }
        break;
      default:
        goto LABEL_19;
    }
    while (1)
    {
      if (v46 == v45)
      {
        LODWORD(v50) = 0;
        *((unsigned char *)a2 + 24) = 1;
        goto LABEL_102;
      }
      unint64_t v67 = v45 + 1;
      char v68 = *(unsigned char *)(v47 + v45);
      *((void *)a2 + 1) = v67;
      v50 |= (unint64_t)(v68 & 0x7F) << v65;
      if ((v68 & 0x80) == 0) {
        break;
      }
      v65 += 7;
      unint64_t v45 = v67;
      BOOL v14 = v66++ > 8;
      if (v14) {
        goto LABEL_86;
      }
    }
    if (*((unsigned char *)a2 + 24)) {
      LODWORD(v50) = 0;
    }
LABEL_102:
    *((_DWORD *)this + 11) = v50;
LABEL_20:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

void sirinluexternal::UsoEntityIdentifier::~UsoEntityIdentifier(sirinluexternal::UsoEntityIdentifier *this)
{
  sirinluexternal::UsoEntityIdentifier::~UsoEntityIdentifier(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t vars8;

  *(void *)this = &unk_1F232D338;
  unint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2) {
    std::default_delete<std::string>::operator()[abi:ne180100](v2);
  }
  unint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  char v5 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v5) {
    std::default_delete<std::string>::operator()[abi:ne180100](v5);
  }
  PB::Base::~Base(this);
}

double sirinluexternal::UsoEntityIdentifier::UsoEntityIdentifier(sirinluexternal::UsoEntityIdentifier *this)
{
  *(void *)this = &unk_1F232D338;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  return result;
}

{
  double result;

  *(void *)this = &unk_1F232D338;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  return result;
}

uint64_t sirinluexternal::UsoEntityIdentifier::UsoEntityIdentifier(uint64_t this, const sirinluexternal::UsoEntityIdentifier *a2)
{
  *(void *)this = &unk_1F232D338;
  *(_OWORD *)(this + 8) = 0u;
  *(_OWORD *)(this + 24) = 0u;
  *(_OWORD *)(this + 40) = 0u;
  *(_DWORD *)(this + 56) = 0;
  if ((*((unsigned char *)a2 + 56) & 4) != 0)
  {
    int v2 = *((_DWORD *)a2 + 12);
    *(unsigned char *)(this + 56) = 4;
    *(_DWORD *)(this + 48) = v2;
  }
  if (*((void *)a2 + 1)) {
    operator new();
  }
  if (*((void *)a2 + 4)) {
    operator new();
  }
  if (*((void *)a2 + 2)) {
    operator new();
  }
  if (*((void *)a2 + 3)) {
    operator new();
  }
  char v3 = *((unsigned char *)a2 + 56);
  if ((v3 & 8) != 0)
  {
    int v5 = *((_DWORD *)a2 + 13);
    *(unsigned char *)(this + 56) |= 8u;
    *(_DWORD *)(this + 52) = v5;
    char v3 = *((unsigned char *)a2 + 56);
    if ((v3 & 1) == 0)
    {
LABEL_13:
      if ((v3 & 2) == 0) {
        return this;
      }
      goto LABEL_14;
    }
  }
  else if ((*((unsigned char *)a2 + 56) & 1) == 0)
  {
    goto LABEL_13;
  }
  int v6 = *((_DWORD *)a2 + 10);
  *(unsigned char *)(this + 56) |= 1u;
  *(_DWORD *)(this + 40) = v6;
  if ((*((unsigned char *)a2 + 56) & 2) == 0) {
    return this;
  }
LABEL_14:
  int v4 = *((_DWORD *)a2 + 11);
  *(unsigned char *)(this + 56) |= 2u;
  *(_DWORD *)(this + 44) = v4;
  return this;
}

uint64_t sirinluexternal::UsoEntityIdentifier::operator=(uint64_t a1, const sirinluexternal::UsoEntityIdentifier *a2)
{
  if ((const sirinluexternal::UsoEntityIdentifier *)a1 != a2)
  {
    sirinluexternal::UsoEntityIdentifier::UsoEntityIdentifier((uint64_t)&v8, a2);
    int v3 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a1 + 56) = v12;
    int v12 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    long long v9 = v4;
    long long v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v10;
    long long v10 = v5;
    long long v6 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v11;
    long long v11 = v6;
    sirinluexternal::UsoEntityIdentifier::~UsoEntityIdentifier((sirinluexternal::UsoEntityIdentifier *)&v8);
  }
  return a1;
}

double sirinluexternal::swap(sirinluexternal *this, sirinluexternal::UsoEntityIdentifier *a2, sirinluexternal::UsoEntityIdentifier *a3)
{
  int v3 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  uint64_t v5 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  double result = *((double *)a2 + 6);
  uint64_t v9 = *((void *)this + 6);
  *((double *)this + 6) = result;
  *((void *)a2 + 6) = v9;
  LODWORD(v7) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v7;
  LODWORD(v7) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v7;
  return result;
}

uint64_t sirinluexternal::UsoEntityIdentifier::UsoEntityIdentifier(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F232D338;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  if (v5) {
    std::default_delete<std::string>::operator()[abi:ne180100](v5);
  }
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  uint64_t v7 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v6;
  if (v7) {
    std::default_delete<std::string>::operator()[abi:ne180100](v7);
  }
  uint64_t v8 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v8;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  uint64_t v11 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v10;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  return a1;
}

uint64_t sirinluexternal::UsoEntityIdentifier::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sirinluexternal::UsoEntityIdentifier::UsoEntityIdentifier((uint64_t)&v8, a2);
    int v3 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a1 + 56) = v12;
    int v12 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    long long v9 = v4;
    long long v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v10;
    long long v10 = v5;
    long long v6 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v11;
    long long v11 = v6;
    sirinluexternal::UsoEntityIdentifier::~UsoEntityIdentifier((sirinluexternal::UsoEntityIdentifier *)&v8);
  }
  return a1;
}

BOOL sirinluexternal::UsoEntityIdentifier::operator==(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a1 + 56);
  char v5 = *(unsigned char *)(a2 + 56);
  if ((v4 & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 56) & 4) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 56) & 4) != 0)
  {
    return 0;
  }
  long long v6 = *(unsigned __int8 **)(a1 + 8);
  uint64_t v7 = *(unsigned __int8 ***)(a2 + 8);
  if (v6)
  {
    if (!v7) {
      return 0;
    }
    uint64_t v8 = v6[23];
    if ((v8 & 0x80u) == 0) {
      long long v9 = (unsigned __int8 *)v6[23];
    }
    else {
      long long v9 = (unsigned __int8 *)*((void *)v6 + 1);
    }
    long long v10 = (unsigned __int8 *)*((unsigned __int8 *)v7 + 23);
    int v11 = (char)v10;
    if ((char)v10 < 0) {
      long long v10 = v7[1];
    }
    if (v9 != v10) {
      return 0;
    }
    if (v11 >= 0) {
      int v12 = *(unsigned __int8 **)(a2 + 8);
    }
    else {
      int v12 = *v7;
    }
    if ((v8 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v6, v12, *((void *)v6 + 1))) {
        return 0;
      }
    }
    else if (v6[23])
    {
      while (*v6 == *v12)
      {
        ++v6;
        ++v12;
        if (!--v8) {
          goto LABEL_23;
        }
      }
      return 0;
    }
  }
  else if (v7)
  {
    return 0;
  }
LABEL_23:
  char v13 = *(unsigned __int8 **)(a1 + 32);
  BOOL v14 = *(unsigned __int8 ***)(a2 + 32);
  if (v13)
  {
    if (!v14) {
      return 0;
    }
    uint64_t v15 = v13[23];
    if ((v15 & 0x80u) == 0) {
      unsigned int v16 = (unsigned __int8 *)v13[23];
    }
    else {
      unsigned int v16 = (unsigned __int8 *)*((void *)v13 + 1);
    }
    unint64_t v17 = (unsigned __int8 *)*((unsigned __int8 *)v14 + 23);
    int v18 = (char)v17;
    if ((char)v17 < 0) {
      unint64_t v17 = v14[1];
    }
    if (v16 != v17) {
      return 0;
    }
    if (v18 >= 0) {
      uint64_t v19 = *(unsigned __int8 **)(a2 + 32);
    }
    else {
      uint64_t v19 = *v14;
    }
    if ((v15 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v13, v19, *((void *)v13 + 1))) {
        return 0;
      }
    }
    else if (v13[23])
    {
      while (*v13 == *v19)
      {
        ++v13;
        ++v19;
        if (!--v15) {
          goto LABEL_40;
        }
      }
      return 0;
    }
  }
  else if (v14)
  {
    return 0;
  }
LABEL_40:
  uint64_t v20 = *(void *)(a1 + 16);
  uint64_t v21 = *(void *)(a2 + 16);
  if (v20)
  {
    if (!v21 || (siricommon::StringValue::operator==(v20, v21) & 1) == 0) {
      return 0;
    }
  }
  else if (v21)
  {
    return 0;
  }
  uint64_t v22 = *(void *)(a1 + 24);
  uint64_t v23 = *(void *)(a2 + 24);
  if (v22)
  {
    if (!v23) {
      return 0;
    }
    if (*(unsigned char *)(v22 + 16))
    {
      if ((*(unsigned char *)(v23 + 16) & 1) == 0 || *(double *)(v22 + 8) != *(double *)(v23 + 8)) {
        return 0;
      }
    }
    else if (*(unsigned char *)(v23 + 16))
    {
      return 0;
    }
  }
  else if (v23)
  {
    return 0;
  }
  if ((v4 & 8) != 0)
  {
    if ((v5 & 8) == 0 || *(_DWORD *)(a1 + 52) != *(_DWORD *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((v5 & 8) != 0)
  {
    return 0;
  }
  if (v4)
  {
    if ((v5 & 1) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  BOOL result = (v5 & 2) == 0;
  if ((v4 & 2) == 0) {
    return result;
  }
  return (v5 & 2) != 0 && *(_DWORD *)(a1 + 44) == *(_DWORD *)(a2 + 44);
}

unint64_t sirinluexternal::UsoEntityIdentifier::hash_value(sirinluexternal::UsoEntityIdentifier *this)
{
  char v2 = *((unsigned char *)this + 56);
  if ((v2 & 4) != 0) {
    uint64_t v3 = *((unsigned int *)this + 12);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *((void *)this + 1);
  if (v4) {
    unint64_t v5 = std::__string_hash<char>::operator()[abi:ne180100](v4);
  }
  else {
    unint64_t v5 = 0;
  }
  uint64_t v6 = *((void *)this + 4);
  if (v6) {
    unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100](v6);
  }
  else {
    unint64_t v7 = 0;
  }
  uint64_t v8 = *((void *)this + 2);
  if (v8)
  {
    unint64_t v9 = *(void *)(v8 + 8);
    if (v9) {
      unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](v9);
    }
  }
  else
  {
    unint64_t v9 = 0;
  }
  double v10 = *((double *)this + 3);
  if (v10 == 0.0)
  {
LABEL_17:
    if ((v2 & 8) == 0) {
      goto LABEL_18;
    }
    goto LABEL_24;
  }
  if ((*(unsigned char *)(*(void *)&v10 + 16) & 1) == 0)
  {
    double v10 = 0.0;
    goto LABEL_17;
  }
  double v10 = *(double *)(*(void *)&v10 + 8);
  if (v10 == 0.0) {
    double v10 = 0.0;
  }
  if ((v2 & 8) == 0)
  {
LABEL_18:
    uint64_t v11 = 0;
    if (v2) {
      goto LABEL_19;
    }
LABEL_25:
    uint64_t v12 = 0;
    if ((v2 & 2) != 0) {
      goto LABEL_20;
    }
LABEL_26:
    uint64_t v13 = 0;
    return v5 ^ v3 ^ v7 ^ v9 ^ *(void *)&v10 ^ v11 ^ v12 ^ v13;
  }
LABEL_24:
  uint64_t v11 = *((int *)this + 13);
  if ((v2 & 1) == 0) {
    goto LABEL_25;
  }
LABEL_19:
  uint64_t v12 = *((unsigned int *)this + 10);
  if ((v2 & 2) == 0) {
    goto LABEL_26;
  }
LABEL_20:
  uint64_t v13 = *((unsigned int *)this + 11);
  return v5 ^ v3 ^ v7 ^ v9 ^ *(void *)&v10 ^ v11 ^ v12 ^ v13;
}

uint64_t sirinluexternal::UsoEntityIdentifier::makeNamespaceA(uint64_t this)
{
  if (!*(void *)(this + 16)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternal::UsoEntityIdentifier::makeProbability(uint64_t this)
{
  if (!*(void *)(this + 24)) {
    operator new();
  }
  return this;
}

uint64_t SIRINLUINTERNALPLUMSpanDataReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  unint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        *(unsigned char *)(a1 + 16) |= 1u;
        uint64_t v18 = *v3;
        unint64_t v19 = *(void *)(a2 + v18);
        if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v20 = *(void *)(*(void *)(a2 + *v7) + v19);
          *(void *)(a2 + v18) = v19 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v20 = 0;
        }
        *(void *)(a1 + 8) = v20;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sirinluinternalsnlp_intermediate::SNLPAssetVersion::formatText(sirinluinternalsnlp_intermediate::SNLPAssetVersion *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((void *)this + 1)) {
    PB::TextFormatter::format();
  }
  char v5 = *((unsigned char *)this + 28);
  if (v5)
  {
    PB::TextFormatter::format(a2, "ncv_number");
    char v5 = *((unsigned char *)this + 28);
    if ((v5 & 2) == 0)
    {
LABEL_5:
      if ((v5 & 4) == 0) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
  }
  else if ((*((unsigned char *)this + 28) & 2) == 0)
  {
    goto LABEL_5;
  }
  PB::TextFormatter::format(a2, "os_release");
  if ((*((unsigned char *)this + 28) & 4) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(a2, "patch_number");
LABEL_7:
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluinternalsnlp_intermediate::SNLPAssetVersion::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 28);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    char v4 = *(unsigned char *)(v3 + 28);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*(unsigned char *)(this + 28) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  if ((*(unsigned char *)(v3 + 28) & 4) != 0) {
LABEL_4:
  }
    this = PB::Writer::writeVarInt(a2);
LABEL_5:
  if (*(void *)(v3 + 8))
  {
    return PB::Writer::write();
  }
  return this;
}

uint64_t sirinluinternalsnlp_intermediate::SNLPAssetVersion::readFrom(sirinluinternalsnlp_intermediate::SNLPAssetVersion *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_25;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      goto LABEL_20;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_25:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 28) |= 2u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v22 = *((void *)a2 + 2);
        uint64_t v23 = *(void *)a2;
        if (v21 <= 0xFFFFFFFFFFFFFFF5 && v21 + 10 <= v22)
        {
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          do
          {
            unint64_t v27 = v21 + 1;
            *((void *)a2 + 1) = v21 + 1;
            char v28 = *(unsigned char *)(v23 + v21);
            v26 |= (unint64_t)(v28 & 0x7F) << v24;
            if ((v28 & 0x80) == 0) {
              goto LABEL_73;
            }
            v24 += 7;
            unint64_t v21 = v27;
            BOOL v14 = v25++ > 8;
          }
          while (!v14);
LABEL_55:
          LODWORD(v26) = 0;
          goto LABEL_73;
        }
        char v45 = 0;
        unsigned int v46 = 0;
        uint64_t v26 = 0;
        if (v22 <= v21) {
          unint64_t v22 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v22 == v21)
          {
            LODWORD(v26) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v47 = v21 + 1;
            char v48 = *(unsigned char *)(v23 + v21);
            *((void *)a2 + 1) = v47;
            v26 |= (unint64_t)(v48 & 0x7F) << v45;
            if (v48 < 0)
            {
              v45 += 7;
              unint64_t v21 = v47;
              BOOL v14 = v46++ > 8;
              if (v14) {
                goto LABEL_55;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v26) = 0;
            }
          }
          break;
        }
LABEL_73:
        *((_DWORD *)this + 5) = v26;
        goto LABEL_20;
      case 2u:
        *((unsigned char *)this + 28) |= 1u;
        unint64_t v29 = *((void *)a2 + 1);
        unint64_t v30 = *((void *)a2 + 2);
        uint64_t v31 = *(void *)a2;
        if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
        {
          char v32 = 0;
          unsigned int v33 = 0;
          uint64_t v34 = 0;
          do
          {
            unint64_t v35 = v29 + 1;
            *((void *)a2 + 1) = v29 + 1;
            char v36 = *(unsigned char *)(v31 + v29);
            v34 |= (unint64_t)(v36 & 0x7F) << v32;
            if ((v36 & 0x80) == 0) {
              goto LABEL_77;
            }
            v32 += 7;
            unint64_t v29 = v35;
            BOOL v14 = v33++ > 8;
          }
          while (!v14);
LABEL_62:
          LODWORD(v34) = 0;
          goto LABEL_77;
        }
        char v49 = 0;
        unsigned int v50 = 0;
        uint64_t v34 = 0;
        if (v30 <= v29) {
          unint64_t v30 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v30 == v29)
          {
            LODWORD(v34) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v51 = v29 + 1;
            char v52 = *(unsigned char *)(v31 + v29);
            *((void *)a2 + 1) = v51;
            v34 |= (unint64_t)(v52 & 0x7F) << v49;
            if (v52 < 0)
            {
              v49 += 7;
              unint64_t v29 = v51;
              BOOL v14 = v50++ > 8;
              if (v14) {
                goto LABEL_62;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v34) = 0;
            }
          }
          break;
        }
LABEL_77:
        *((_DWORD *)this + 4) = v34;
        goto LABEL_20;
      case 3u:
        *((unsigned char *)this + 28) |= 4u;
        unint64_t v37 = *((void *)a2 + 1);
        unint64_t v38 = *((void *)a2 + 2);
        uint64_t v39 = *(void *)a2;
        if (v37 <= 0xFFFFFFFFFFFFFFF5 && v37 + 10 <= v38)
        {
          char v40 = 0;
          unsigned int v41 = 0;
          uint64_t v42 = 0;
          do
          {
            unint64_t v43 = v37 + 1;
            *((void *)a2 + 1) = v37 + 1;
            char v44 = *(unsigned char *)(v39 + v37);
            v42 |= (unint64_t)(v44 & 0x7F) << v40;
            if ((v44 & 0x80) == 0) {
              goto LABEL_81;
            }
            v40 += 7;
            unint64_t v37 = v43;
            BOOL v14 = v41++ > 8;
          }
          while (!v14);
LABEL_69:
          LODWORD(v42) = 0;
          goto LABEL_81;
        }
        char v53 = 0;
        unsigned int v54 = 0;
        uint64_t v42 = 0;
        if (v38 <= v37) {
          unint64_t v38 = *((void *)a2 + 1);
        }
        break;
      case 4u:
        operator new();
      default:
        goto LABEL_19;
    }
    while (1)
    {
      if (v38 == v37)
      {
        LODWORD(v42) = 0;
        *((unsigned char *)a2 + 24) = 1;
        goto LABEL_81;
      }
      unint64_t v55 = v37 + 1;
      char v56 = *(unsigned char *)(v39 + v37);
      *((void *)a2 + 1) = v55;
      v42 |= (unint64_t)(v56 & 0x7F) << v53;
      if ((v56 & 0x80) == 0) {
        break;
      }
      v53 += 7;
      unint64_t v37 = v55;
      BOOL v14 = v54++ > 8;
      if (v14) {
        goto LABEL_69;
      }
    }
    if (*((unsigned char *)a2 + 24)) {
      LODWORD(v42) = 0;
    }
LABEL_81:
    *((_DWORD *)this + 6) = v42;
LABEL_20:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

void sirinluinternalsnlp_intermediate::SNLPAssetVersion::~SNLPAssetVersion(sirinluinternalsnlp_intermediate::SNLPAssetVersion *this)
{
  sirinluinternalsnlp_intermediate::SNLPAssetVersion::~SNLPAssetVersion(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t vars8;

  unint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1F232D388;
  *((void *)this + 1) = 0;
  if (v2) {
    std::default_delete<std::string>::operator()[abi:ne180100](v2);
  }
  PB::Base::~Base(this);
}

uint64_t sirinluinternalsnlp_intermediate::SNLPAssetVersion::SNLPAssetVersion(uint64_t this)
{
  *(void *)this = &unk_1F232D388;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(void *)this = &unk_1F232D388;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

uint64_t sirinluinternalsnlp_intermediate::SNLPAssetVersion::SNLPAssetVersion(uint64_t this, const sirinluinternalsnlp_intermediate::SNLPAssetVersion *a2)
{
  *(void *)this = &unk_1F232D388;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 28) = 0;
  char v2 = *((unsigned char *)a2 + 28);
  if ((v2 & 2) != 0)
  {
    int v4 = *((_DWORD *)a2 + 5);
    char v3 = 2;
    *(unsigned char *)(this + 28) = 2;
    *(_DWORD *)(this + 20) = v4;
    char v2 = *((unsigned char *)a2 + 28);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if (*((unsigned char *)a2 + 28))
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 4);
    v3 |= 1u;
    *(unsigned char *)(this + 28) = v3;
    *(_DWORD *)(this + 16) = v5;
    char v2 = *((unsigned char *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    int v6 = *((_DWORD *)a2 + 6);
    *(unsigned char *)(this + 28) = v3 | 4;
    *(_DWORD *)(this + 24) = v6;
  }
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternalsnlp_intermediate::SNLPAssetVersion::operator=(uint64_t a1, const sirinluinternalsnlp_intermediate::SNLPAssetVersion *a2)
{
  if ((const sirinluinternalsnlp_intermediate::SNLPAssetVersion *)a1 != a2)
  {
    sirinluinternalsnlp_intermediate::SNLPAssetVersion::SNLPAssetVersion((uint64_t)&v6, a2);
    long long v3 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v8;
    long long v8 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v4;
    sirinluinternalsnlp_intermediate::SNLPAssetVersion::~SNLPAssetVersion((sirinluinternalsnlp_intermediate::SNLPAssetVersion *)&v6);
  }
  return a1;
}

uint64_t sirinluinternalsnlp_intermediate::swap(uint64_t this, sirinluinternalsnlp_intermediate::SNLPAssetVersion *a2, sirinluinternalsnlp_intermediate::SNLPAssetVersion *a3)
{
  int v3 = *(_DWORD *)(this + 28);
  *(_DWORD *)(this + 28) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  int v4 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  int v5 = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  int v6 = *(_DWORD *)(this + 24);
  *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v6;
  uint64_t v7 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v7;
  return this;
}

uint64_t sirinluinternalsnlp_intermediate::SNLPAssetVersion::SNLPAssetVersion(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F232D388;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v3;
  if (v4) {
    std::default_delete<std::string>::operator()[abi:ne180100](v4);
  }
  return a1;
}

uint64_t sirinluinternalsnlp_intermediate::SNLPAssetVersion::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sirinluinternalsnlp_intermediate::SNLPAssetVersion::SNLPAssetVersion((uint64_t)&v6, a2);
    long long v3 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v8;
    long long v8 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v4;
    sirinluinternalsnlp_intermediate::SNLPAssetVersion::~SNLPAssetVersion((sirinluinternalsnlp_intermediate::SNLPAssetVersion *)&v6);
  }
  return a1;
}

BOOL sirinluinternalsnlp_intermediate::SNLPAssetVersion::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 28) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 2) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 28))
  {
    if ((*(unsigned char *)(a2 + 28) & 1) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 28))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 4) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 4) != 0)
  {
    return 0;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a2 + 8);
  BOOL result = (v2 | v3) == 0;
  if (v2 && v3)
  {
    uint64_t v5 = *(unsigned __int8 *)(v2 + 23);
    if ((v5 & 0x80u) == 0) {
      uint64_t v6 = (unsigned __int8 *)*(unsigned __int8 *)(v2 + 23);
    }
    else {
      uint64_t v6 = *(unsigned __int8 **)(v2 + 8);
    }
    uint64_t v7 = (unsigned __int8 *)*(unsigned __int8 *)(v3 + 23);
    int v8 = (char)v7;
    if ((char)v7 < 0) {
      uint64_t v7 = *(unsigned __int8 **)(v3 + 8);
    }
    if (v6 != v7) {
      return 0;
    }
    if (v8 >= 0) {
      char v9 = *(unsigned __int8 **)(a2 + 8);
    }
    else {
      char v9 = *(unsigned __int8 **)v3;
    }
    if ((v5 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v2, v9, *(void *)(v2 + 8))) {
        return 0;
      }
    }
    else if (*(unsigned char *)(v2 + 23))
    {
      uint64_t v10 = v5 - 1;
      do
      {
        int v12 = *(unsigned __int8 *)v2++;
        int v11 = v12;
        int v14 = *v9++;
        int v13 = v14;
        BOOL v16 = v10-- != 0;
      }
      while (v11 == v13 && v16);
      if (v11 != v13) {
        return 0;
      }
    }
    return 1;
  }
  return result;
}

unint64_t sirinluinternalsnlp_intermediate::SNLPAssetVersion::hash_value(sirinluinternalsnlp_intermediate::SNLPAssetVersion *this)
{
  if ((*((unsigned char *)this + 28) & 2) == 0)
  {
    uint64_t v1 = 0;
    if (*((unsigned char *)this + 28)) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v2 = 0;
    if ((*((unsigned char *)this + 28) & 4) != 0) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  uint64_t v1 = *((unsigned int *)this + 5);
  if ((*((unsigned char *)this + 28) & 1) == 0) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v2 = *((unsigned int *)this + 4);
  if ((*((unsigned char *)this + 28) & 4) != 0)
  {
LABEL_4:
    uint64_t v3 = *((unsigned int *)this + 6);
    goto LABEL_8;
  }
LABEL_7:
  uint64_t v3 = 0;
LABEL_8:
  unint64_t v4 = *((void *)this + 1);
  if (v4) {
    unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100](v4);
  }
  return v2 ^ v1 ^ v3 ^ v4;
}

void sub_1C8B683F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B6857C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B68688(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1C8B68758(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B68834(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1C8B68904(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B68A7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B68D40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL SIRINLUINTERNALNLV4_PARSERTokenisationReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3) {
        break;
      }
      if (v17 == 2)
      {
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 8;
LABEL_26:
        uint64_t v20 = *(SIRINLUINTERNALTokenChain **)(a1 + v19);
        *(void *)(a1 + v19) = v18;
LABEL_27:

        goto LABEL_29;
      }
      if (v17 == 1)
      {
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 16;
        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_29:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v20 = objc_alloc_init(SIRINLUINTERNALTokenChain);
    objc_storeStrong((id *)(a1 + 24), v20);
    if (!PBReaderPlaceMark() || !SIRINLUINTERNALTokenChainReadFrom((char *)v20, a2))
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_27;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t SIRINLUINTERNALSNLP_INTERMEDIATELinearizedTensorReadFrom(void *a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      int v16 = v10 & 7;
      if (v15 || v16 == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v18 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        uint64_t v26 = PBReaderReadString();
        if (v26) {
          [a1 addFeature:v26];
        }

        goto LABEL_69;
      }
      if (v18 == 2) {
        break;
      }
      if (v18 == 1)
      {
        if (v16 != 2)
        {
          char v33 = 0;
          unsigned int v34 = 0;
          uint64_t v35 = 0;
          while (1)
          {
            uint64_t v36 = *v3;
            unint64_t v37 = *(void *)(a2 + v36);
            if (v37 == -1 || v37 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v38 = *(unsigned char *)(*(void *)(a2 + *v7) + v37);
            *(void *)(a2 + v36) = v37 + 1;
            v35 |= (unint64_t)(v38 & 0x7F) << v33;
            if (v38 < 0)
            {
              v33 += 7;
              BOOL v14 = v34++ >= 9;
              if (!v14) {
                continue;
              }
            }
            goto LABEL_68;
          }
LABEL_67:
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_68:
          PBRepeatedUInt32Add();
          goto LABEL_69;
        }
        uint64_t result = PBReaderPlaceMark();
        if (!result) {
          return result;
        }
        while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
        {
          char v20 = 0;
          unsigned int v21 = 0;
          uint64_t v22 = 0;
          while (1)
          {
            uint64_t v23 = *v3;
            unint64_t v24 = *(void *)(a2 + v23);
            if (v24 == -1 || v24 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v25 = *(unsigned char *)(*(void *)(a2 + *v7) + v24);
            *(void *)(a2 + v23) = v24 + 1;
            v22 |= (unint64_t)(v25 & 0x7F) << v20;
            if (v25 < 0)
            {
              v20 += 7;
              BOOL v14 = v21++ >= 9;
              if (!v14) {
                continue;
              }
            }
            goto LABEL_33;
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_33:
          PBRepeatedUInt32Add();
        }
LABEL_52:
        PBReaderRecallMark();
        goto LABEL_69;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_69:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    if (v16 != 2)
    {
      char v39 = 0;
      unsigned int v40 = 0;
      uint64_t v41 = 0;
      while (1)
      {
        uint64_t v42 = *v3;
        unint64_t v43 = *(void *)(a2 + v42);
        if (v43 == -1 || v43 >= *(void *)(a2 + *v4)) {
          goto LABEL_67;
        }
        char v44 = *(unsigned char *)(*(void *)(a2 + *v7) + v43);
        *(void *)(a2 + v42) = v43 + 1;
        v41 |= (unint64_t)(v44 & 0x7F) << v39;
        if (v44 < 0)
        {
          v39 += 7;
          BOOL v14 = v40++ >= 9;
          if (!v14) {
            continue;
          }
        }
        goto LABEL_68;
      }
    }
    uint64_t result = PBReaderPlaceMark();
    if (!result) {
      return result;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
    {
      char v27 = 0;
      unsigned int v28 = 0;
      uint64_t v29 = 0;
      while (1)
      {
        uint64_t v30 = *v3;
        unint64_t v31 = *(void *)(a2 + v30);
        if (v31 == -1 || v31 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v32 = *(unsigned char *)(*(void *)(a2 + *v7) + v31);
        *(void *)(a2 + v30) = v31 + 1;
        v29 |= (unint64_t)(v32 & 0x7F) << v27;
        if (v32 < 0)
        {
          v27 += 7;
          BOOL v14 = v28++ >= 9;
          if (!v14) {
            continue;
          }
        }
        goto LABEL_49;
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_49:
      PBRepeatedUInt32Add();
    }
    goto LABEL_52;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL SIRINLUEXTERNALTaskReadFrom(id *a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        unint64_t v18 = objc_alloc_init(SIRICOMMONDoubleValue);
        objc_storeStrong(a1 + 1, v18);
        if (!PBReaderPlaceMark() || (SIRICOMMONDoubleValueReadFrom((uint64_t)v18, a2) & 1) == 0)
        {
LABEL_34:

          return 0;
        }
        goto LABEL_29;
      }
      if (v17 == 2) {
        break;
      }
      if (v17 == 1)
      {
        unint64_t v18 = objc_alloc_init(SIRINLUEXTERNALUUID);
        objc_storeStrong(a1 + 3, v18);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v18, a2) & 1) == 0) {
          goto LABEL_34;
        }
LABEL_29:
        PBReaderRecallMark();

        goto LABEL_31;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_31:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    unint64_t v18 = objc_alloc_init(SIRINLUEXTERNALUsoGraph);
    objc_storeStrong(a1 + 2, v18);
    if (!PBReaderPlaceMark() || !SIRINLUEXTERNALUsoGraphReadFrom((id *)&v18->super.super.isa, a2)) {
      goto LABEL_34;
    }
    goto LABEL_29;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sirinluinternal::TokenChain::formatText(sirinluinternal::TokenChain *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((void *)this + 1)) {
    PB::TextFormatter::format();
  }
  if (*((void *)this + 2)) {
    PB::TextFormatter::format();
  }
  uint64_t v5 = (uint64_t *)*((void *)this + 3);
  uint64_t v6 = (uint64_t *)*((void *)this + 4);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "tokens");
  }
  return MEMORY[0x1F4147498](a2);
}

void *sirinluinternal::TokenChain::writeTo(void *this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if (this[2]) {
    this = (void *)PB::Writer::write();
  }
  if (v3[1]) {
    this = (void *)PB::Writer::write();
  }
  uint64_t v5 = (const PB::Base **)v3[3];
  unint64_t v4 = (const PB::Base **)v3[4];
  while (v5 != v4)
  {
    uint64_t v6 = *v5++;
    this = (void *)PB::Writer::writeSubmessage(a2, v6);
  }
  return this;
}

uint64_t sirinluinternal::TokenChain::readFrom(sirinluinternal::TokenChain *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_19;
        }
      }
LABEL_21:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v19 = v10 >> 3;
      if ((v10 >> 3) == 3) {
        PB::PtrVector<sirinluinternal::Token>::emplace_back<>();
      }
      if (v19 == 2) {
        operator new();
      }
      if (v19 == 1) {
        operator new();
      }
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_21;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_19;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluinternal::TokenChain::~TokenChain(sirinluinternal::TokenChain *this)
{
  sirinluinternal::TokenChain::~TokenChain(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t v3;
  void **v4;
  uint64_t vars8;

  *(void *)this = &unk_1F232D3D8;
  int v4 = (void **)((char *)this + 24);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v4);
  unint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    std::default_delete<std::string>::operator()[abi:ne180100](v2);
  }
  unint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    std::default_delete<std::string>::operator()[abi:ne180100](v3);
  }
  PB::Base::~Base(this);
}

double sirinluinternal::TokenChain::TokenChain(sirinluinternal::TokenChain *this)
{
  *(void *)this = &unk_1F232D3D8;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 5) = 0;
  return result;
}

{
  double result;

  *(void *)this = &unk_1F232D3D8;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 5) = 0;
  return result;
}

uint64_t sirinluinternal::TokenChain::TokenChain(uint64_t this, const sirinluinternal::TokenChain *a2)
{
  *(_OWORD *)(this + 8) = 0u;
  *(void *)this = &unk_1F232D3D8;
  *(_OWORD *)(this + 24) = 0u;
  *(void *)(this + 40) = 0;
  if (*((void *)a2 + 2)) {
    operator new();
  }
  if (*((void *)a2 + 1)) {
    operator new();
  }
  if (*((void *)a2 + 3) != *((void *)a2 + 4)) {
    PB::PtrVector<sirinluinternal::Token>::emplace_back<sirinluinternal::Token const&>();
  }
  return this;
}

uint64_t sirinluinternal::TokenChain::operator=(uint64_t a1, const sirinluinternal::TokenChain *a2)
{
  if ((const sirinluinternal::TokenChain *)a1 != a2)
  {
    sirinluinternal::TokenChain::TokenChain((uint64_t)&v7, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v3;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    long long v9 = v4;
    uint64_t v5 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v10;
    uint64_t v10 = v5;
    sirinluinternal::TokenChain::~TokenChain((sirinluinternal::TokenChain *)&v7);
  }
  return a1;
}

void *sirinluinternal::swap(void *this, sirinluinternal::TokenChain *a2, sirinluinternal::TokenChain *a3)
{
  uint64_t v3 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v3;
  uint64_t v4 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  uint64_t v5 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  uint64_t v6 = this[4];
  this[4] = *((void *)a2 + 4);
  *((void *)a2 + 4) = v6;
  uint64_t v7 = this[5];
  this[5] = *((void *)a2 + 5);
  *((void *)a2 + 5) = v7;
  return this;
}

uint64_t sirinluinternal::TokenChain::TokenChain(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F232D3D8;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 40) = 0;
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  uint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v5;
  if (v6) {
    std::default_delete<std::string>::operator()[abi:ne180100](v6);
  }
  uint64_t v7 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v8 = *v4;
  *uint64_t v4 = v7;
  if (v8) {
    std::default_delete<std::string>::operator()[abi:ne180100](v8);
  }
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate((void **)(a1 + 24));
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  return a1;
}

uint64_t sirinluinternal::TokenChain::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sirinluinternal::TokenChain::TokenChain((uint64_t)&v7, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v3;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    long long v9 = v4;
    uint64_t v5 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v10;
    uint64_t v10 = v5;
    sirinluinternal::TokenChain::~TokenChain((sirinluinternal::TokenChain *)&v7);
  }
  return a1;
}

BOOL sirinluinternal::TokenChain::operator==(void *a1, void *a2)
{
  long long v4 = (unsigned __int8 *)a1[2];
  uint64_t v5 = (unsigned __int8 **)a2[2];
  if (v4)
  {
    if (!v5) {
      return 0;
    }
    uint64_t v6 = v4[23];
    if ((v6 & 0x80u) == 0) {
      uint64_t v7 = (unsigned __int8 *)v4[23];
    }
    else {
      uint64_t v7 = (unsigned __int8 *)*((void *)v4 + 1);
    }
    long long v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    int v9 = (char)v8;
    if ((char)v8 < 0) {
      long long v8 = v5[1];
    }
    if (v7 != v8) {
      return 0;
    }
    if (v9 >= 0) {
      uint64_t v10 = (unsigned __int8 *)a2[2];
    }
    else {
      uint64_t v10 = *v5;
    }
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v10, *((void *)v4 + 1))) {
        return 0;
      }
    }
    else if (v4[23])
    {
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6) {
          goto LABEL_20;
        }
      }
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
LABEL_20:
  char v12 = (unsigned __int8 *)a1[1];
  BOOL v13 = (unsigned __int8 **)a2[1];
  if (!v12)
  {
    if (!v13) {
      goto LABEL_37;
    }
    return 0;
  }
  if (!v13) {
    return 0;
  }
  uint64_t v14 = v12[23];
  if ((v14 & 0x80u) == 0) {
    unsigned int v15 = (unsigned __int8 *)v12[23];
  }
  else {
    unsigned int v15 = (unsigned __int8 *)*((void *)v12 + 1);
  }
  unint64_t v16 = (unsigned __int8 *)*((unsigned __int8 *)v13 + 23);
  int v17 = (char)v16;
  if ((char)v16 < 0) {
    unint64_t v16 = v13[1];
  }
  if (v15 != v16) {
    return 0;
  }
  if (v17 >= 0) {
    unint64_t v18 = (unsigned __int8 *)a2[1];
  }
  else {
    unint64_t v18 = *v13;
  }
  if ((v14 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)v12, v18, *((void *)v12 + 1))) {
      goto LABEL_37;
    }
    return 0;
  }
  if (v12[23])
  {
    while (*v12 == *v18)
    {
      ++v12;
      ++v18;
      if (!--v14) {
        goto LABEL_37;
      }
    }
    return 0;
  }
LABEL_37:
  uint64_t v19 = a1[3];
  uint64_t v20 = a1[4];
  unsigned int v21 = (uint64_t *)a2[3];
  uint64_t v22 = a2[4];
  return PB::PtrVector<sirinluinternal::Token>::operator==(v19, v20, v21, v22);
}

unint64_t sirinluinternal::TokenChain::hash_value(sirinluinternal::TokenChain *this)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    unint64_t v3 = std::__string_hash<char>::operator()[abi:ne180100](v2);
  }
  else {
    unint64_t v3 = 0;
  }
  uint64_t v4 = *((void *)this + 1);
  if (v4) {
    unint64_t v5 = std::__string_hash<char>::operator()[abi:ne180100](v4);
  }
  else {
    unint64_t v5 = 0;
  }
  uint64_t v7 = (sirinluinternal::Token **)*((void *)this + 3);
  uint64_t v6 = (sirinluinternal::Token **)*((void *)this + 4);
  if (v7 == v6)
  {
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = 0;
    do
    {
      int v9 = *v7++;
      v8 ^= sirinluinternal::Token::hash_value(v9);
    }
    while (v7 != v6);
  }
  return v5 ^ v3 ^ v8;
}

uint64_t sirinluexternalnlu_router::NLRoutingGenAIMetadata::formatText(sirinluexternalnlu_router::NLRoutingGenAIMetadata *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 16);
  if (v5)
  {
    PB::TextFormatter::format(a2, "prescribed_tool");
    char v5 = *((unsigned char *)this + 16);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(a2, "query_type");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluexternalnlu_router::NLRoutingGenAIMetadata::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 16);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2);
    char v4 = *(unsigned char *)(v3 + 16);
  }
  if ((v4 & 2) != 0)
  {
    return PB::Writer::writeVarInt(a2);
  }
  return this;
}

uint64_t sirinluexternalnlu_router::NLRoutingGenAIMetadata::readFrom(sirinluexternalnlu_router::NLRoutingGenAIMetadata *this, PB::Reader *a2)
{
  unint64_t v3 = *((void *)a2 + 1);
  unint64_t v2 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v3 + 1;
        *((void *)a2 + 1) = v3 + 1;
        char v13 = *(unsigned char *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v3 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_30;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 16) |= 2u;
        unint64_t v26 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v27 = *(void *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          char v36 = 0;
          unsigned int v37 = 0;
          uint64_t v30 = 0;
          if (v2 <= v26) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v26)
            {
              LODWORD(v30) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_64;
            }
            unint64_t v38 = v26 + 1;
            char v39 = *(unsigned char *)(v27 + v26);
            *((void *)a2 + 1) = v38;
            v30 |= (unint64_t)(v39 & 0x7F) << v36;
            if ((v39 & 0x80) == 0) {
              break;
            }
            v36 += 7;
            unint64_t v26 = v38;
            BOOL v14 = v37++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
              goto LABEL_63;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v30) = 0;
          }
LABEL_63:
          unint64_t v3 = v38;
        }
        else
        {
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v30 = 0;
          while (1)
          {
            unint64_t v3 = v26 + 1;
            *((void *)a2 + 1) = v26 + 1;
            char v31 = *(unsigned char *)(v27 + v26);
            v30 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            unint64_t v26 = v3;
            BOOL v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
              break;
            }
          }
        }
LABEL_64:
        *((_DWORD *)this + 3) = v30;
      }
      else if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 16) |= 1u;
        unint64_t v19 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v20 = *(void *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v2)
        {
          char v32 = 0;
          unsigned int v33 = 0;
          uint64_t v23 = 0;
          if (v2 <= v19) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v19)
            {
              LODWORD(v23) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_60;
            }
            unint64_t v34 = v19 + 1;
            char v35 = *(unsigned char *)(v20 + v19);
            *((void *)a2 + 1) = v34;
            v23 |= (unint64_t)(v35 & 0x7F) << v32;
            if ((v35 & 0x80) == 0) {
              break;
            }
            v32 += 7;
            unint64_t v19 = v34;
            BOOL v14 = v33++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              goto LABEL_59;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v23) = 0;
          }
LABEL_59:
          unint64_t v3 = v34;
        }
        else
        {
          char v21 = 0;
          unsigned int v22 = 0;
          uint64_t v23 = 0;
          while (1)
          {
            unint64_t v3 = v19 + 1;
            *((void *)a2 + 1) = v19 + 1;
            char v24 = *(unsigned char *)(v20 + v19);
            v23 |= (unint64_t)(v24 & 0x7F) << v21;
            if ((v24 & 0x80) == 0) {
              break;
            }
            v21 += 7;
            unint64_t v19 = v3;
            BOOL v14 = v22++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              break;
            }
          }
        }
LABEL_60:
        *((_DWORD *)this + 2) = v23;
      }
      else
      {
LABEL_30:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v3 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
      }
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v3 >= v2 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v3 > v2) {
      unint64_t v2 = v3;
    }
    while (v2 != v3)
    {
      unint64_t v17 = v3 + 1;
      char v18 = *(unsigned char *)(v8 + v3);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v3 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_30;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluexternalnlu_router::NLRoutingGenAIMetadata::~NLRoutingGenAIMetadata(sirinluexternalnlu_router::NLRoutingGenAIMetadata *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x1CB772580);
}

uint64_t sirinluexternalnlu_router::NLRoutingGenAIMetadata::NLRoutingGenAIMetadata(uint64_t this)
{
  *(void *)this = &unk_1F232D428;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

{
  *(void *)this = &unk_1F232D428;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t sirinluexternalnlu_router::NLRoutingGenAIMetadata::NLRoutingGenAIMetadata(uint64_t this, const sirinluexternalnlu_router::NLRoutingGenAIMetadata *a2)
{
  *(void *)this = &unk_1F232D428;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  if (*((unsigned char *)a2 + 16))
  {
    int v3 = *((_DWORD *)a2 + 2);
    *(unsigned char *)(this + 16) = 1;
    *(_DWORD *)(this + 8) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 16) & 2) == 0) {
      return this;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 16) & 2) != 0)
  {
LABEL_5:
    int v4 = *((_DWORD *)a2 + 3);
    *(unsigned char *)(this + 16) = v2;
    *(_DWORD *)(this + 12) = v4;
  }
  return this;
}

uint64_t sirinluexternalnlu_router::NLRoutingGenAIMetadata::operator=(uint64_t a1, const sirinluexternalnlu_router::NLRoutingGenAIMetadata *a2)
{
  if ((const sirinluexternalnlu_router::NLRoutingGenAIMetadata *)a1 != a2)
  {
    sirinluexternalnlu_router::NLRoutingGenAIMetadata::NLRoutingGenAIMetadata((uint64_t)v6, a2);
    int v3 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v8;
    int v8 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

double sirinluexternalnlu_router::swap(sirinluexternalnlu_router *this, sirinluexternalnlu_router::NLRoutingGenAIMetadata *a2, sirinluexternalnlu_router::NLRoutingGenAIMetadata *a3)
{
  int v3 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v3;
  double result = *((double *)a2 + 1);
  uint64_t v5 = *((void *)this + 1);
  *((double *)this + 1) = result;
  *((void *)a2 + 1) = v5;
  return result;
}

double sirinluexternalnlu_router::NLRoutingGenAIMetadata::NLRoutingGenAIMetadata(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F232D428;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(void *)a1 = &unk_1F232D428;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t sirinluexternalnlu_router::NLRoutingGenAIMetadata::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v7[0] = &unk_1F232D428;
    int v3 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = 0;
    int v8 = *(_DWORD *)(a1 + 16);
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a2 + 8);
    *(_DWORD *)(a1 + 16) = v3;
    *(void *)(a1 + 8) = v5;
    v7[1] = v4;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

BOOL sirinluexternalnlu_router::NLRoutingGenAIMetadata::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 16))
  {
    if ((*(unsigned char *)(a2 + 16) & 1) == 0 || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 16))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 16) & 2) == 0;
  if ((*(unsigned char *)(a1 + 16) & 2) != 0) {
    return (*(unsigned char *)(a2 + 16) & 2) != 0 && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12);
  }
  return v2;
}

uint64_t sirinluexternalnlu_router::NLRoutingGenAIMetadata::hash_value(sirinluexternalnlu_router::NLRoutingGenAIMetadata *this)
{
  if (*((unsigned char *)this + 16))
  {
    uint64_t v1 = *((int *)this + 2);
    if ((*((unsigned char *)this + 16) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v2 = 0;
    return v2 ^ v1;
  }
  uint64_t v1 = 0;
  if ((*((unsigned char *)this + 16) & 2) == 0) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v2 = *((int *)this + 3);
  return v2 ^ v1;
}

uint64_t SIRINLUEXTERNALRewriteMessageReadFrom(uint64_t a1, uint64_t a2)
{
  int v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        uint64_t v23 = PBReaderReadString();
        char v24 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v23;
      }
      else if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 24) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_31;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_33;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_31:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v19) = 0;
        }
LABEL_33:
        *(_DWORD *)(a1 + 8) = v19;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sirinluinternalmention_resolver::MentionResolverRequest::formatText(sirinluinternalmention_resolver::MentionResolverRequest *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "cdm_request_id");
  }
  uint64_t v6 = (uint64_t *)*((void *)this + 2);
  uint64_t v7 = (uint64_t *)*((void *)this + 3);
  while (v6 != v7)
  {
    uint64_t v8 = *v6++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v8 + 32))(v8, a2, "contextual_spans");
  }
  unsigned int v9 = (uint64_t *)*((void *)this + 5);
  unint64_t v10 = (uint64_t *)*((void *)this + 6);
  while (v9 != v10)
  {
    uint64_t v11 = *v9++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v11 + 32))(v11, a2, "detected_mentions");
  }
  uint64_t v12 = *((void *)this + 8);
  if (v12) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v12 + 32))(v12, a2, "embedding_tensor");
  }
  char v13 = (uint64_t *)*((void *)this + 9);
  BOOL v14 = (uint64_t *)*((void *)this + 10);
  while (v13 != v14)
  {
    uint64_t v15 = *v13++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v15 + 32))(v15, a2, "entity_candidates");
  }
  unsigned int v16 = (uint64_t *)*((void *)this + 12);
  char v17 = (uint64_t *)*((void *)this + 13);
  while (v16 != v17)
  {
    uint64_t v18 = *v16++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v18 + 32))(v18, a2, "matching_spans");
  }
  if (*((unsigned char *)this + 176)) {
    PB::TextFormatter::format(a2, "max_candidates");
  }
  uint64_t v19 = *((void *)this + 16);
  if (v19) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v19 + 32))(v19, a2, "nlu_request_id");
  }
  uint64_t v20 = *((void *)this + 17);
  if (v20) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v20 + 32))(v20, a2, "request_id");
  }
  if (*((void *)this + 18)) {
    PB::TextFormatter::format();
  }
  uint64_t v21 = *((void *)this + 19);
  if (v21) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v21 + 32))(v21, a2, "token_chain");
  }
  if ((*((unsigned char *)this + 176) & 2) != 0) {
    PB::TextFormatter::format(a2, "turn_index");
  }
  if (*((void *)this + 21)) {
    PB::TextFormatter::format();
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluinternalmention_resolver::MentionResolverRequest::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *(const PB::Base **)(this + 136);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  uint64_t v5 = *(const PB::Base **)(v3 + 128);
  if (v5) {
    this = PB::Writer::writeSubmessage(a2, v5);
  }
  if (*(void *)(v3 + 144)) {
    this = PB::Writer::write();
  }
  if (*(void *)(v3 + 168)) {
    this = PB::Writer::write();
  }
  uint64_t v6 = *(const PB::Base **)(v3 + 152);
  if (v6) {
    this = PB::Writer::writeSubmessage(a2, v6);
  }
  uint64_t v7 = *(const PB::Base **)(v3 + 64);
  if (v7) {
    this = PB::Writer::writeSubmessage(a2, v7);
  }
  uint64_t v8 = *(const PB::Base ***)(v3 + 72);
  unsigned int v9 = *(const PB::Base ***)(v3 + 80);
  while (v8 != v9)
  {
    unint64_t v10 = *v8++;
    this = PB::Writer::writeSubmessage(a2, v10);
  }
  uint64_t v11 = *(const PB::Base ***)(v3 + 40);
  uint64_t v12 = *(const PB::Base ***)(v3 + 48);
  while (v11 != v12)
  {
    char v13 = *v11++;
    this = PB::Writer::writeSubmessage(a2, v13);
  }
  if (*(unsigned char *)(v3 + 176)) {
    this = PB::Writer::writeVarInt(a2);
  }
  BOOL v14 = *(const PB::Base ***)(v3 + 96);
  uint64_t v15 = *(const PB::Base ***)(v3 + 104);
  while (v14 != v15)
  {
    unsigned int v16 = *v14++;
    this = PB::Writer::writeSubmessage(a2, v16);
  }
  if ((*(unsigned char *)(v3 + 176) & 2) != 0) {
    this = PB::Writer::writeVarInt(a2);
  }
  char v17 = *(const PB::Base **)(v3 + 8);
  if (v17) {
    this = PB::Writer::writeSubmessage(a2, v17);
  }
  uint64_t v19 = *(const PB::Base ***)(v3 + 16);
  uint64_t v18 = *(const PB::Base ***)(v3 + 24);
  while (v19 != v18)
  {
    uint64_t v20 = *v19++;
    this = PB::Writer::writeSubmessage(a2, v20);
  }
  return this;
}

uint64_t sirinluinternalmention_resolver::MentionResolverRequest::readFrom(sirinluinternalmention_resolver::MentionResolverRequest *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
      break;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      int v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        operator new();
      case 2u:
        operator new();
      case 3u:
        operator new();
      case 4u:
        operator new();
      case 5u:
        operator new();
      case 6u:
        operator new();
      case 7u:
        PB::PtrVector<sirinluexternal::EntityCandidate>::emplace_back<>();
      case 8u:
        PB::PtrVector<sirinluinternal::MatchingSpan>::emplace_back<>();
      case 9u:
        *((unsigned char *)this + 176) |= 1u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v21 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v20 <= 0xFFFFFFFFFFFFFFF5 && v20 + 10 <= v21)
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          do
          {
            unint64_t v26 = v20 + 1;
            *((void *)a2 + 1) = v20 + 1;
            char v27 = *(unsigned char *)(v22 + v20);
            v25 |= (unint64_t)(v27 & 0x7F) << v23;
            if ((v27 & 0x80) == 0) {
              goto LABEL_70;
            }
            v23 += 7;
            unint64_t v20 = v26;
            BOOL v14 = v24++ > 8;
          }
          while (!v14);
LABEL_59:
          uint64_t v25 = 0;
          goto LABEL_70;
        }
        char v37 = 0;
        unsigned int v38 = 0;
        uint64_t v25 = 0;
        if (v21 <= v20) {
          unint64_t v21 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v21 == v20)
          {
            uint64_t v25 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v39 = v20 + 1;
            char v40 = *(unsigned char *)(v22 + v20);
            *((void *)a2 + 1) = v39;
            v25 |= (unint64_t)(v40 & 0x7F) << v37;
            if (v40 < 0)
            {
              v37 += 7;
              unint64_t v20 = v39;
              BOOL v14 = v38++ > 8;
              if (v14) {
                goto LABEL_59;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v25 = 0;
            }
          }
          break;
        }
LABEL_70:
        *((void *)this + 15) = v25;
        goto LABEL_48;
      case 0xAu:
        PB::PtrVector<sirinluinternal::MatchingSpan>::emplace_back<>();
      case 0xBu:
        *((unsigned char *)this + 176) |= 2u;
        unint64_t v28 = *((void *)a2 + 1);
        unint64_t v29 = *((void *)a2 + 2);
        uint64_t v30 = *(void *)a2;
        if (v28 <= 0xFFFFFFFFFFFFFFF5 && v28 + 10 <= v29)
        {
          char v31 = 0;
          unsigned int v32 = 0;
          uint64_t v33 = 0;
          do
          {
            unint64_t v34 = v28 + 1;
            *((void *)a2 + 1) = v28 + 1;
            char v35 = *(unsigned char *)(v30 + v28);
            v33 |= (unint64_t)(v35 & 0x7F) << v31;
            if ((v35 & 0x80) == 0) {
              goto LABEL_74;
            }
            v31 += 7;
            unint64_t v28 = v34;
            BOOL v14 = v32++ > 8;
          }
          while (!v14);
LABEL_66:
          uint64_t v33 = 0;
          goto LABEL_74;
        }
        char v41 = 0;
        unsigned int v42 = 0;
        uint64_t v33 = 0;
        if (v29 <= v28) {
          unint64_t v29 = *((void *)a2 + 1);
        }
        break;
      case 0xCu:
        operator new();
      case 0xDu:
        PB::PtrVector<sirinluinternal::MatchingSpan>::emplace_back<>();
      default:
        goto LABEL_19;
    }
    while (1)
    {
      if (v29 == v28)
      {
        uint64_t v33 = 0;
        *((unsigned char *)a2 + 24) = 1;
        goto LABEL_74;
      }
      unint64_t v43 = v28 + 1;
      char v44 = *(unsigned char *)(v30 + v28);
      *((void *)a2 + 1) = v43;
      v33 |= (unint64_t)(v44 & 0x7F) << v41;
      if ((v44 & 0x80) == 0) {
        break;
      }
      v41 += 7;
      unint64_t v28 = v43;
      BOOL v14 = v42++ > 8;
      if (v14) {
        goto LABEL_66;
      }
    }
    if (*((unsigned char *)a2 + 24)) {
      uint64_t v33 = 0;
    }
LABEL_74:
    *((void *)this + 20) = v33;
LABEL_48:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  char v15 = 0;
  unsigned int v16 = 0;
  unint64_t v11 = 0;
  if (v2 > v3) {
    unint64_t v3 = v2;
  }
  do
  {
    if (v3 == v2)
    {
      int v4 = 1;
      *((unsigned char *)a2 + 24) = 1;
      return v4 == 0;
    }
    unint64_t v17 = v2 + 1;
    char v18 = *(unsigned char *)(v8 + v2);
    *((void *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0) {
      goto LABEL_21;
    }
    v15 += 7;
    unint64_t v2 = v17;
    BOOL v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  uint64_t result = PB::Reader::skip(a2);
  if (result) {
    goto LABEL_48;
  }
  return result;
}

void PB::PtrVector<sirinluexternal::EntityCandidate>::emplace_back<>()
{
}

void sub_1C8B6D560(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sirinluinternalmention_resolver::MentionResolverRequest::~MentionResolverRequest(sirinluinternalmention_resolver::MentionResolverRequest *this)
{
  sirinluinternalmention_resolver::MentionResolverRequest::~MentionResolverRequest(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  uint64_t vars8;

  *(void *)this = &unk_1F232D478;
  unint64_t v2 = *((void *)this + 21);
  *((void *)this + 21) = 0;
  if (v2) {
    std::default_delete<std::string>::operator()[abi:ne180100](v2);
  }
  unint64_t v3 = *((void *)this + 19);
  *((void *)this + 19) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = *((void *)this + 18);
  *((void *)this + 18) = 0;
  if (v4) {
    std::default_delete<std::string>::operator()[abi:ne180100](v4);
  }
  uint64_t v5 = *((void *)this + 17);
  *((void *)this + 17) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 16);
  *((void *)this + 16) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  char v9 = (void **)((char *)this + 96);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v9);
  char v9 = (void **)((char *)this + 72);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v7 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  char v9 = (void **)((char *)this + 40);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v9);
  char v9 = (void **)((char *)this + 16);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v8 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  PB::Base::~Base(this);
}

double sirinluinternalmention_resolver::MentionResolverRequest::MentionResolverRequest(sirinluinternalmention_resolver::MentionResolverRequest *this)
{
  *(void *)this = &unk_1F232D478;
  *((void *)this + 21) = 0;
  *((_DWORD *)this + 44) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  return result;
}

{
  double result;

  *(void *)this = &unk_1F232D478;
  *((void *)this + 21) = 0;
  *((_DWORD *)this + 44) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  return result;
}

uint64_t sirinluinternalmention_resolver::MentionResolverRequest::MentionResolverRequest(uint64_t this, const sirinluinternalmention_resolver::MentionResolverRequest *a2)
{
  *(_OWORD *)(this + 8) = 0u;
  *(_OWORD *)(this + 40) = 0u;
  *(_OWORD *)(this + 72) = 0u;
  *(void *)this = &unk_1F232D478;
  *(_OWORD *)(this + 128) = 0u;
  *(void *)(this + 168) = 0;
  *(_DWORD *)(this + 176) = 0;
  *(_OWORD *)(this + 24) = 0u;
  *(_OWORD *)(this + 56) = 0u;
  *(_OWORD *)(this + 88) = 0u;
  *(_OWORD *)(this + 104) = 0u;
  *(_OWORD *)(this + 144) = 0u;
  if (*((void *)a2 + 17)) {
    operator new();
  }
  if (*((void *)a2 + 16)) {
    operator new();
  }
  if (*((void *)a2 + 18)) {
    operator new();
  }
  if (*((void *)a2 + 21)) {
    operator new();
  }
  if (*((void *)a2 + 19)) {
    operator new();
  }
  if (*((void *)a2 + 8)) {
    operator new();
  }
  if (*((void *)a2 + 9) != *((void *)a2 + 10)) {
    PB::PtrVector<sirinluexternal::EntityCandidate>::emplace_back<sirinluexternal::EntityCandidate const&>();
  }
  if (*((void *)a2 + 5) != *((void *)a2 + 6)) {
    PB::PtrVector<sirinluinternal::MatchingSpan>::emplace_back<sirinluinternal::MatchingSpan const&>();
  }
  if (*((unsigned char *)a2 + 176))
  {
    uint64_t v2 = *((void *)a2 + 15);
    *(unsigned char *)(this + 176) |= 1u;
    *(void *)(this + 120) = v2;
  }
  if (*((void *)a2 + 12) != *((void *)a2 + 13)) {
    PB::PtrVector<sirinluinternal::MatchingSpan>::emplace_back<sirinluinternal::MatchingSpan const&>();
  }
  if ((*((unsigned char *)a2 + 176) & 2) != 0)
  {
    uint64_t v3 = *((void *)a2 + 20);
    *(unsigned char *)(this + 176) |= 2u;
    *(void *)(this + 160) = v3;
  }
  if (*((void *)a2 + 1)) {
    operator new();
  }
  if (*((void *)a2 + 2) != *((void *)a2 + 3)) {
    PB::PtrVector<sirinluinternal::MatchingSpan>::emplace_back<sirinluinternal::MatchingSpan const&>();
  }
  return this;
}

void PB::PtrVector<sirinluexternal::EntityCandidate>::emplace_back<sirinluexternal::EntityCandidate const&>()
{
}

void sub_1C8B6DD14(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sirinluinternalmention_resolver::MentionResolverRequest::operator=(uint64_t a1, const sirinluinternalmention_resolver::MentionResolverRequest *a2)
{
  if ((const sirinluinternalmention_resolver::MentionResolverRequest *)a1 != a2)
  {
    sirinluinternalmention_resolver::MentionResolverRequest::MentionResolverRequest((uint64_t)v5, a2);
    sirinluinternalmention_resolver::swap(a1, (sirinluinternalmention_resolver::MentionResolverRequest *)v5, v3);
    sirinluinternalmention_resolver::MentionResolverRequest::~MentionResolverRequest((sirinluinternalmention_resolver::MentionResolverRequest *)v5);
  }
  return a1;
}

uint64_t sirinluinternalmention_resolver::swap(uint64_t this, sirinluinternalmention_resolver::MentionResolverRequest *a2, sirinluinternalmention_resolver::MentionResolverRequest *a3)
{
  int v3 = *(_DWORD *)(this + 176);
  *(_DWORD *)(this + 176) = *((_DWORD *)a2 + 44);
  *((_DWORD *)a2 + 44) = v3;
  uint64_t v4 = *(void *)(this + 136);
  *(void *)(this + 136) = *((void *)a2 + 17);
  *((void *)a2 + 17) = v4;
  uint64_t v5 = *(void *)(this + 128);
  *(void *)(this + 128) = *((void *)a2 + 16);
  *((void *)a2 + 16) = v5;
  uint64_t v6 = *(void *)(this + 144);
  *(void *)(this + 144) = *((void *)a2 + 18);
  *((void *)a2 + 18) = v6;
  uint64_t v7 = *(void *)(this + 168);
  *(void *)(this + 168) = *((void *)a2 + 21);
  *((void *)a2 + 21) = v7;
  uint64_t v8 = *(void *)(this + 152);
  *(void *)(this + 152) = *((void *)a2 + 19);
  *((void *)a2 + 19) = v8;
  uint64_t v9 = *(void *)(this + 64);
  *(void *)(this + 64) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v9;
  uint64_t v10 = *(void *)(this + 72);
  *(void *)(this + 72) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v10;
  uint64_t v11 = *(void *)(this + 80);
  *(void *)(this + 80) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v11;
  uint64_t v12 = *(void *)(this + 88);
  *(void *)(this + 88) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v12;
  uint64_t v13 = *(void *)(this + 40);
  *(void *)(this + 40) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v13;
  uint64_t v14 = *(void *)(this + 48);
  *(void *)(this + 48) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v14;
  uint64_t v15 = *(void *)(this + 56);
  *(void *)(this + 56) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v15;
  uint64_t v16 = *(void *)(this + 96);
  *(void *)(this + 96) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v16;
  uint64_t v17 = *(void *)(this + 104);
  *(void *)(this + 104) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v17;
  uint64_t v19 = *(void *)(this + 112);
  uint64_t v18 = *(void *)(this + 120);
  uint64_t v20 = *((void *)a2 + 15);
  *(void *)(this + 112) = *((void *)a2 + 14);
  *(void *)(this + 120) = v20;
  *((void *)a2 + 14) = v19;
  *((void *)a2 + 15) = v18;
  uint64_t v21 = *(void *)(this + 160);
  *(void *)(this + 160) = *((void *)a2 + 20);
  *((void *)a2 + 20) = v21;
  uint64_t v22 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v22;
  uint64_t v23 = *(void *)(this + 16);
  *(void *)(this + 16) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v23;
  uint64_t v24 = *(void *)(this + 24);
  *(void *)(this + 24) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v24;
  uint64_t v25 = *(void *)(this + 32);
  *(void *)(this + 32) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v25;
  return this;
}

uint64_t sirinluinternalmention_resolver::MentionResolverRequest::MentionResolverRequest(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 40) = 0u;
  uint64_t v4 = (void **)(a1 + 40);
  *(_OWORD *)(a1 + 72) = 0u;
  uint64_t v5 = (void **)(a1 + 72);
  *(void *)a1 = &unk_1F232D478;
  *(_OWORD *)(a1 + 128) = 0u;
  uint64_t v6 = (uint64_t *)(a1 + 128);
  *(void *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_DWORD *)(a2 + 176) = 0;
  uint64_t v7 = *(void *)(a2 + 136);
  *(void *)(a2 + 136) = 0;
  uint64_t v8 = *(void *)(a1 + 136);
  *(void *)(a1 + 136) = v7;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *(void *)(a2 + 128);
  *(void *)(a2 + 128) = 0;
  uint64_t v10 = *v6;
  *uint64_t v6 = v9;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = *(void *)(a2 + 144);
  *(void *)(a2 + 144) = 0;
  uint64_t v12 = *(void *)(a1 + 144);
  *(void *)(a1 + 144) = v11;
  if (v12) {
    std::default_delete<std::string>::operator()[abi:ne180100](v12);
  }
  uint64_t v13 = *(void *)(a2 + 168);
  *(void *)(a2 + 168) = 0;
  uint64_t v14 = *(void *)(a1 + 168);
  *(void *)(a1 + 168) = v13;
  if (v14) {
    std::default_delete<std::string>::operator()[abi:ne180100](v14);
  }
  uint64_t v15 = *(void *)(a2 + 152);
  *(void *)(a2 + 152) = 0;
  uint64_t v16 = *(void *)(a1 + 152);
  *(void *)(a1 + 152) = v15;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  uint64_t v17 = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = 0;
  uint64_t v18 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = v17;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(v5);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(v4);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate((void **)(a1 + 96));
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  uint64_t v19 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v20 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v19;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate((void **)(a1 + 16));
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  return a1;
}

uint64_t sirinluinternalmention_resolver::MentionResolverRequest::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sirinluinternalmention_resolver::MentionResolverRequest::MentionResolverRequest((uint64_t)v5, a2);
    sirinluinternalmention_resolver::swap(a1, (sirinluinternalmention_resolver::MentionResolverRequest *)v5, v3);
    sirinluinternalmention_resolver::MentionResolverRequest::~MentionResolverRequest((sirinluinternalmention_resolver::MentionResolverRequest *)v5);
  }
  return a1;
}

BOOL sirinluinternalmention_resolver::MentionResolverRequest::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 136);
  uint64_t v5 = *(void *)(a2 + 136);
  if (v4)
  {
    if (!v5 || !sirinluexternal::UUID::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 128);
  uint64_t v7 = *(void *)(a2 + 128);
  if (v6)
  {
    if (!v7 || !sirinluexternal::UUID::operator==(v6, v7)) {
      return 0;
    }
  }
  else if (v7)
  {
    return 0;
  }
  uint64_t v8 = *(unsigned __int8 **)(a1 + 144);
  uint64_t v9 = *(unsigned __int8 ***)(a2 + 144);
  if (v8)
  {
    if (!v9) {
      return 0;
    }
    uint64_t v10 = v8[23];
    if ((v10 & 0x80u) == 0) {
      uint64_t v11 = (unsigned __int8 *)v8[23];
    }
    else {
      uint64_t v11 = (unsigned __int8 *)*((void *)v8 + 1);
    }
    uint64_t v12 = (unsigned __int8 *)*((unsigned __int8 *)v9 + 23);
    int v13 = (char)v12;
    if ((char)v12 < 0) {
      uint64_t v12 = v9[1];
    }
    if (v11 != v12) {
      return 0;
    }
    if (v13 >= 0) {
      uint64_t v14 = *(unsigned __int8 **)(a2 + 144);
    }
    else {
      uint64_t v14 = *v9;
    }
    if ((v10 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v8, v14, *((void *)v8 + 1))) {
        return 0;
      }
    }
    else if (v8[23])
    {
      while (*v8 == *v14)
      {
        ++v8;
        ++v14;
        if (!--v10) {
          goto LABEL_28;
        }
      }
      return 0;
    }
  }
  else if (v9)
  {
    return 0;
  }
LABEL_28:
  uint64_t v15 = *(unsigned __int8 **)(a1 + 168);
  uint64_t v16 = *(unsigned __int8 **)(a2 + 168);
  if (v15)
  {
    if (!v16 || !std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(v15, v16)) {
      return 0;
    }
  }
  else if (v16)
  {
    return 0;
  }
  uint64_t v17 = *(void **)(a1 + 152);
  uint64_t v18 = *(void **)(a2 + 152);
  if (v17)
  {
    if (!v18 || !sirinluinternal::TokenChain::operator==(v17, v18)) {
      return 0;
    }
  }
  else if (v18)
  {
    return 0;
  }
  uint64_t v19 = *(void *)(a1 + 64);
  uint64_t v20 = *(void *)(a2 + 64);
  if (v19)
  {
    if (!v20 || !sirinluinternal::NLv4EmbeddingTensor::operator==(v19, v20)) {
      return 0;
    }
  }
  else if (v20)
  {
    return 0;
  }
  if (!PB::PtrVector<sirinluexternal::EntityCandidate>::operator==((uint64_t *)(a1 + 72), *(uint64_t **)(a2 + 72), *(void *)(a2 + 80))|| !PB::PtrVector<sirinluinternal::MatchingSpan>::operator==((uint64_t *)(a1 + 40), *(uint64_t **)(a2 + 40), *(void *)(a2 + 48)))
  {
    return 0;
  }
  char v21 = *(unsigned char *)(a1 + 176);
  char v22 = *(unsigned char *)(a2 + 176);
  if (v21)
  {
    if ((*(unsigned char *)(a2 + 176) & 1) == 0 || *(void *)(a1 + 120) != *(void *)(a2 + 120)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 176))
  {
    return 0;
  }
  if (!PB::PtrVector<sirinluinternal::MatchingSpan>::operator==((uint64_t *)(a1 + 96), *(uint64_t **)(a2 + 96), *(void *)(a2 + 104)))return 0; {
  if ((v21 & 2) != 0)
  }
  {
    if ((v22 & 2) == 0 || *(void *)(a1 + 160) != *(void *)(a2 + 160)) {
      return 0;
    }
  }
  else if ((v22 & 2) != 0)
  {
    return 0;
  }
  uint64_t v23 = *(void *)(a1 + 8);
  uint64_t v24 = *(void *)(a2 + 8);
  if (!v23)
  {
    if (!v24) {
      goto LABEL_61;
    }
    return 0;
  }
  if (!v24 || !sirinluexternal::RequestID::operator==(v23, v24)) {
    return 0;
  }
LABEL_61:
  uint64_t v25 = *(uint64_t **)(a2 + 16);
  uint64_t v26 = *(void *)(a2 + 24);
  return PB::PtrVector<sirinluinternal::MatchingSpan>::operator==((uint64_t *)(a1 + 16), v25, v26);
}

uint64_t PB::PtrVector<sirinluexternal::EntityCandidate>::operator==(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (v4 - *a1 != a3 - (void)a2) {
    return 0;
  }
  if (v3 == v4) {
    return 1;
  }
  uint64_t v5 = a2;
  uint64_t v6 = v3 + 8;
  do
  {
    uint64_t v7 = *v5++;
    uint64_t result = sirinluexternal::EntityCandidate::operator==(*(uint64_t **)(v6 - 8), v7);
    if (result) {
      BOOL v9 = v6 == v4;
    }
    else {
      BOOL v9 = 1;
    }
    v6 += 8;
  }
  while (!v9);
  return result;
}

unint64_t sirinluinternalmention_resolver::MentionResolverRequest::hash_value(sirinluinternalmention_resolver::MentionResolverRequest *this)
{
  uint64_t v2 = *((void *)this + 17);
  if (!v2)
  {
    uint64_t v6 = 0;
    goto LABEL_11;
  }
  if ((*(unsigned char *)(v2 + 28) & 1) == 0)
  {
    uint64_t v3 = 0;
    if ((*(unsigned char *)(v2 + 28) & 2) != 0) {
      goto LABEL_4;
    }
LABEL_8:
    uint64_t v4 = 0;
    if ((*(unsigned char *)(v2 + 28) & 4) != 0) {
      goto LABEL_5;
    }
LABEL_9:
    uint64_t v5 = 0;
    goto LABEL_10;
  }
  uint64_t v3 = *(void *)(v2 + 8);
  if ((*(unsigned char *)(v2 + 28) & 2) == 0) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v4 = *(void *)(v2 + 16);
  if ((*(unsigned char *)(v2 + 28) & 4) == 0) {
    goto LABEL_9;
  }
LABEL_5:
  uint64_t v5 = *(int *)(v2 + 24);
LABEL_10:
  uint64_t v6 = v4 ^ v3 ^ v5;
LABEL_11:
  uint64_t v7 = *((void *)this + 16);
  if (!v7)
  {
    uint64_t v11 = 0;
    goto LABEL_21;
  }
  if ((*(unsigned char *)(v7 + 28) & 1) == 0)
  {
    uint64_t v8 = 0;
    if ((*(unsigned char *)(v7 + 28) & 2) != 0) {
      goto LABEL_14;
    }
LABEL_18:
    uint64_t v9 = 0;
    if ((*(unsigned char *)(v7 + 28) & 4) != 0) {
      goto LABEL_15;
    }
LABEL_19:
    uint64_t v10 = 0;
    goto LABEL_20;
  }
  uint64_t v8 = *(void *)(v7 + 8);
  if ((*(unsigned char *)(v7 + 28) & 2) == 0) {
    goto LABEL_18;
  }
LABEL_14:
  uint64_t v9 = *(void *)(v7 + 16);
  if ((*(unsigned char *)(v7 + 28) & 4) == 0) {
    goto LABEL_19;
  }
LABEL_15:
  uint64_t v10 = *(int *)(v7 + 24);
LABEL_20:
  uint64_t v11 = v9 ^ v8 ^ v10;
LABEL_21:
  uint64_t v12 = *((void *)this + 18);
  if (v12) {
    unint64_t v13 = std::__string_hash<char>::operator()[abi:ne180100](v12);
  }
  else {
    unint64_t v13 = 0;
  }
  uint64_t v14 = *((void *)this + 21);
  if (v14) {
    unint64_t v15 = std::__string_hash<char>::operator()[abi:ne180100](v14);
  }
  else {
    unint64_t v15 = 0;
  }
  uint64_t v16 = (sirinluinternal::TokenChain *)*((void *)this + 19);
  if (v16) {
    unint64_t v42 = sirinluinternal::TokenChain::hash_value(v16);
  }
  else {
    unint64_t v42 = 0;
  }
  uint64_t v17 = (sirinluinternal::NLv4EmbeddingTensor *)*((void *)this + 8);
  if (v17) {
    unint64_t v41 = sirinluinternal::NLv4EmbeddingTensor::hash_value(v17);
  }
  else {
    unint64_t v41 = 0;
  }
  uint64_t v18 = (sirinluexternal::EntityCandidate **)*((void *)this + 9);
  uint64_t v19 = (sirinluexternal::EntityCandidate **)*((void *)this + 10);
  if (v18 == v19)
  {
    uint64_t v20 = 0;
  }
  else
  {
    uint64_t v20 = 0;
    do
    {
      char v21 = *v18++;
      v20 ^= sirinluexternal::EntityCandidate::hash_value(v21);
    }
    while (v18 != v19);
  }
  char v22 = (sirinluinternal::MatchingSpan **)*((void *)this + 5);
  uint64_t v23 = (sirinluinternal::MatchingSpan **)*((void *)this + 6);
  if (v22 == v23)
  {
    uint64_t v24 = 0;
  }
  else
  {
    uint64_t v24 = 0;
    do
    {
      uint64_t v25 = *v22++;
      v24 ^= sirinluinternal::MatchingSpan::hash_value(v25);
    }
    while (v22 != v23);
  }
  unint64_t v43 = v15;
  unint64_t v44 = v13;
  uint64_t v26 = v11;
  uint64_t v27 = v6;
  if (*((unsigned char *)this + 176)) {
    uint64_t v40 = *((void *)this + 15);
  }
  else {
    uint64_t v40 = 0;
  }
  unint64_t v28 = (sirinluinternal::MatchingSpan **)*((void *)this + 12);
  unint64_t v29 = (sirinluinternal::MatchingSpan **)*((void *)this + 13);
  if (v28 == v29)
  {
    uint64_t v30 = 0;
    if ((*((unsigned char *)this + 176) & 2) == 0)
    {
LABEL_50:
      uint64_t v32 = 0;
      goto LABEL_53;
    }
  }
  else
  {
    uint64_t v30 = 0;
    do
    {
      char v31 = *v28++;
      v30 ^= sirinluinternal::MatchingSpan::hash_value(v31);
    }
    while (v28 != v29);
    if ((*((unsigned char *)this + 176) & 2) == 0) {
      goto LABEL_50;
    }
  }
  uint64_t v32 = *((void *)this + 20);
LABEL_53:
  uint64_t v33 = (sirinluexternal::RequestID *)*((void *)this + 1);
  if (v33) {
    unint64_t v34 = sirinluexternal::RequestID::hash_value(v33);
  }
  else {
    unint64_t v34 = 0;
  }
  char v35 = (sirinluinternal::MatchingSpan **)*((void *)this + 2);
  char v36 = (sirinluinternal::MatchingSpan **)*((void *)this + 3);
  if (v35 == v36)
  {
    uint64_t v37 = 0;
  }
  else
  {
    uint64_t v37 = 0;
    do
    {
      unsigned int v38 = *v35++;
      v37 ^= sirinluinternal::MatchingSpan::hash_value(v38);
    }
    while (v35 != v36);
  }
  return v26 ^ v27 ^ v44 ^ v43 ^ v42 ^ v41 ^ v20 ^ v24 ^ v40 ^ v30 ^ v32 ^ v34 ^ v37;
}

uint64_t sirinluinternalmention_resolver::MentionResolverRequest::makeRequestId(uint64_t this)
{
  if (!*(void *)(this + 136)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternalmention_resolver::MentionResolverRequest::makeNluRequestId(uint64_t this)
{
  if (!*(void *)(this + 128)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternalmention_resolver::MentionResolverRequest::makeTokenChain(uint64_t this)
{
  if (!*(void *)(this + 152)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternalmention_resolver::MentionResolverRequest::makeEmbeddingTensor(uint64_t this)
{
  if (!*(void *)(this + 64)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternalmention_resolver::MentionResolverRequest::makeCdmRequestId(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternal::SystemPrompted::formatText(sirinluexternal::SystemPrompted *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "target");
  }
  uint64_t v6 = *((void *)this + 2);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, a2, "task_id");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluexternal::SystemPrompted::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *(const PB::Base **)(this + 16);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  uint64_t v5 = *(const PB::Base **)(v3 + 8);
  if (v5)
  {
    return PB::Writer::writeSubmessage(a2, v5);
  }
  return this;
}

uint64_t sirinluexternal::SystemPrompted::readFrom(sirinluexternal::SystemPrompted *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_24;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 2) {
        operator new();
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_24:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_24;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluexternal::SystemPrompted::~SystemPrompted(sirinluexternal::SystemPrompted *this)
{
  sirinluexternal::SystemPrompted::~SystemPrompted(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1F232D4C8;
  unint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  PB::Base::~Base(this);
}

void *sirinluexternal::SystemPrompted::SystemPrompted(void *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1F232D4C8;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1F232D4C8;
  return this;
}

void *sirinluexternal::SystemPrompted::SystemPrompted(void *this, const sirinluexternal::SystemPrompted *a2)
{
  *this = &unk_1F232D4C8;
  this[1] = 0;
  this[2] = 0;
  if (*((void *)a2 + 2)) {
    operator new();
  }
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternal::SystemPrompted::operator=(uint64_t a1, const sirinluexternal::SystemPrompted *a2)
{
  if ((const sirinluexternal::SystemPrompted *)a1 != a2)
  {
    sirinluexternal::SystemPrompted::SystemPrompted(&v5, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    long long v6 = v3;
    sirinluexternal::SystemPrompted::~SystemPrompted((sirinluexternal::SystemPrompted *)&v5);
  }
  return a1;
}

uint64_t sirinluexternal::swap(uint64_t this, sirinluexternal::SystemPrompted *a2, sirinluexternal::SystemPrompted *a3)
{
  uint64_t v3 = *(void *)(this + 16);
  *(void *)(this + 16) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v3;
  uint64_t v4 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  return this;
}

void *sirinluexternal::SystemPrompted::SystemPrompted(void *a1, uint64_t a2)
{
  a1[1] = 0;
  uint64_t v4 = a1 + 1;
  *a1 = &unk_1F232D4C8;
  a1[2] = 0;
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  uint64_t v6 = a1[2];
  a1[2] = v5;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v8 = *v4;
  *uint64_t v4 = v7;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  return a1;
}

uint64_t sirinluexternal::SystemPrompted::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sirinluexternal::SystemPrompted::SystemPrompted(&v5, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    long long v6 = v3;
    sirinluexternal::SystemPrompted::~SystemPrompted((sirinluexternal::SystemPrompted *)&v5);
  }
  return a1;
}

uint64_t sirinluexternal::SystemPrompted::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a2 + 16);
  if (v4)
  {
    if (v5 && sirinluexternal::UUID::operator==(v4, v5)) {
      goto LABEL_4;
    }
    return 0;
  }
  if (v5) {
    return 0;
  }
LABEL_4:
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = *(void *)(a2 + 8);
  uint64_t result = (v6 | v7) == 0;
  if (v6) {
    BOOL v9 = v7 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    unint64_t v10 = *(void **)(a1 + 8);
    return sirinluexternal::UsoGraph::operator==(v10, (void *)v7);
  }
  return result;
}

unint64_t sirinluexternal::SystemPrompted::hash_value(sirinluexternal::SystemPrompted *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (!v1)
  {
    uint64_t v5 = 0;
    goto LABEL_11;
  }
  if ((*(unsigned char *)(v1 + 28) & 1) == 0)
  {
    uint64_t v2 = 0;
    if ((*(unsigned char *)(v1 + 28) & 2) != 0) {
      goto LABEL_4;
    }
LABEL_8:
    uint64_t v3 = 0;
    if ((*(unsigned char *)(v1 + 28) & 4) != 0) {
      goto LABEL_5;
    }
LABEL_9:
    uint64_t v4 = 0;
    goto LABEL_10;
  }
  uint64_t v2 = *(void *)(v1 + 8);
  if ((*(unsigned char *)(v1 + 28) & 2) == 0) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v3 = *(void *)(v1 + 16);
  if ((*(unsigned char *)(v1 + 28) & 4) == 0) {
    goto LABEL_9;
  }
LABEL_5:
  uint64_t v4 = *(int *)(v1 + 24);
LABEL_10:
  uint64_t v5 = v3 ^ v2 ^ v4;
LABEL_11:
  unint64_t v6 = *((void *)this + 1);
  if (v6) {
    unint64_t v6 = sirinluexternal::UsoGraph::hash_value((sirinluexternal::UsoGraph *)v6);
  }
  return v6 ^ v5;
}

uint64_t sirinluexternal::SystemPrompted::makeTaskId(uint64_t this)
{
  if (!*(void *)(this + 16)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternal::SystemPrompted::makeTarget(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternalspanmatch::SpanMatchResponse::formatText(sirinluinternalspanmatch::SpanMatchResponse *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = (uint64_t *)*((void *)this + 1);
  unint64_t v6 = (uint64_t *)*((void *)this + 2);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "matching_spans");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluinternalspanmatch::SpanMatchResponse::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v2 = *(const PB::Base ***)(this + 8);
  for (uint64_t i = *(const PB::Base ***)(this + 16); v2 != i; this = PB::Writer::writeSubmessage(a2, v5))
    uint64_t v5 = *v2++;
  return this;
}

uint64_t sirinluinternalspanmatch::SpanMatchResponse::readFrom(sirinluinternalspanmatch::SpanMatchResponse *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        PB::PtrVector<sirinluinternal::MatchingSpan>::emplace_back<>();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluinternalspanmatch::SpanMatchResponse::~SpanMatchResponse(sirinluinternalspanmatch::SpanMatchResponse *this)
{
  *(void *)this = &unk_1F232D518;
  unint64_t v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
  JUMPOUT(0x1CB772580);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_1F232D518;
  unint64_t v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_1F232D518;
  unint64_t v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
}

void *sirinluinternalspanmatch::SpanMatchResponse::SpanMatchResponse(void *this)
{
  *this = &unk_1F232D518;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = &unk_1F232D518;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

void *sirinluinternalspanmatch::SpanMatchResponse::SpanMatchResponse(void *this, const sirinluinternalspanmatch::SpanMatchResponse *a2)
{
  this[1] = 0;
  *this = &unk_1F232D518;
  this[2] = 0;
  this[3] = 0;
  if (*((void *)a2 + 1) != *((void *)a2 + 2)) {
    PB::PtrVector<sirinluinternal::MatchingSpan>::emplace_back<sirinluinternal::MatchingSpan const&>();
  }
  return this;
}

uint64_t sirinluinternalspanmatch::SpanMatchResponse::operator=(uint64_t a1, const sirinluinternalspanmatch::SpanMatchResponse *a2)
{
  if ((const sirinluinternalspanmatch::SpanMatchResponse *)a1 != a2)
  {
    sirinluinternalspanmatch::SpanMatchResponse::SpanMatchResponse(&v6, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v3;
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v8;
    uint64_t v8 = v4;
    unint64_t v6 = &unk_1F232D518;
    unsigned int v9 = (void **)&v7;
    std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v9);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

void *sirinluinternalspanmatch::swap(void *this, sirinluinternalspanmatch::SpanMatchResponse *a2, sirinluinternalspanmatch::SpanMatchResponse *a3)
{
  uint64_t v3 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  uint64_t v4 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  return this;
}

uint64_t sirinluinternalspanmatch::SpanMatchResponse::SpanMatchResponse(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F232D518;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate((void **)(a1 + 8));
  *uint64_t v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

{
  _OWORD *v4;

  *(void *)a1 = &unk_1F232D518;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate((void **)(a1 + 8));
  *uint64_t v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

uint64_t sirinluinternalspanmatch::SpanMatchResponse::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v9 = &unk_1F232D518;
    long long v10 = 0uLL;
    uint64_t v11 = 0;
    std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate((void **)&v10);
    uint64_t v4 = *(void *)(a2 + 24);
    long long v5 = *(_OWORD *)(a2 + 8);
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    long long v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v5;
    long long v10 = v6;
    uint64_t v7 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v4;
    uint64_t v11 = v7;
    char v12 = (void **)&v10;
    unsigned int v9 = &unk_1F232D518;
    std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v12);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

BOOL sirinluinternalspanmatch::SpanMatchResponse::operator==(uint64_t a1, uint64_t a2)
{
  return PB::PtrVector<sirinluinternal::MatchingSpan>::operator==((uint64_t *)(a1 + 8), *(uint64_t **)(a2 + 8), *(void *)(a2 + 16));
}

uint64_t sirinluinternalspanmatch::SpanMatchResponse::hash_value(sirinluinternalspanmatch::SpanMatchResponse *this)
{
  uint64_t v1 = (sirinluinternal::MatchingSpan **)*((void *)this + 1);
  unint64_t v2 = (sirinluinternal::MatchingSpan **)*((void *)this + 2);
  if (v1 == v2) {
    return 0;
  }
  uint64_t v3 = 0;
  do
  {
    uint64_t v4 = *v1++;
    v3 ^= sirinluinternal::MatchingSpan::hash_value(v4);
  }
  while (v1 != v2);
  return v3;
}

uint64_t SIRINLUINTERNALComponentOverrideReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  long long v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 16;
        goto LABEL_50;
      case 2u:
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v22 = 0;
        *(unsigned char *)(a1 + 60) |= 2u;
        while (2)
        {
          uint64_t v23 = *v3;
          unint64_t v24 = *(void *)(a2 + v23);
          if (v24 == -1 || v24 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v25 = *(unsigned char *)(*(void *)(a2 + *v7) + v24);
            *(void *)(a2 + v23) = v24 + 1;
            v22 |= (unint64_t)(v25 & 0x7F) << v20;
            if (v25 < 0)
            {
              v20 += 7;
              BOOL v14 = v21++ >= 9;
              if (v14)
              {
                LODWORD(v22) = 0;
                goto LABEL_54;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v22) = 0;
        }
LABEL_54:
        *(_DWORD *)(a1 + 32) = v22;
        goto LABEL_63;
      case 3u:
        char v26 = 0;
        unsigned int v27 = 0;
        uint64_t v28 = 0;
        *(unsigned char *)(a1 + 60) |= 4u;
        while (2)
        {
          uint64_t v29 = *v3;
          unint64_t v30 = *(void *)(a2 + v29);
          if (v30 == -1 || v30 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v31 = *(unsigned char *)(*(void *)(a2 + *v7) + v30);
            *(void *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              BOOL v14 = v27++ >= 9;
              if (v14)
              {
                uint64_t v28 = 0;
                goto LABEL_58;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v28 = 0;
        }
LABEL_58:
        *(unsigned char *)(a1 + 56) = v28 != 0;
        goto LABEL_63;
      case 4u:
        char v32 = 0;
        unsigned int v33 = 0;
        uint64_t v34 = 0;
        *(unsigned char *)(a1 + 60) |= 1u;
        while (2)
        {
          uint64_t v35 = *v3;
          unint64_t v36 = *(void *)(a2 + v35);
          if (v36 == -1 || v36 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v37 = *(unsigned char *)(*(void *)(a2 + *v7) + v36);
            *(void *)(a2 + v35) = v36 + 1;
            v34 |= (unint64_t)(v37 & 0x7F) << v32;
            if (v37 < 0)
            {
              v32 += 7;
              BOOL v14 = v33++ >= 9;
              if (v14)
              {
                uint64_t v34 = 0;
                goto LABEL_62;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v34 = 0;
        }
LABEL_62:
        *(void *)(a1 + 8) = v34;
        goto LABEL_63;
      case 5u:
        unsigned int v38 = objc_alloc_init(SIRINLUINTERNALOverrideValue);
        objc_storeStrong((id *)(a1 + 48), v38);
        if (!PBReaderPlaceMark()
          || !SIRINLUINTERNALOverrideValueReadFrom((id *)&v38->super.super.isa, a2))
        {
          goto LABEL_65;
        }
        goto LABEL_48;
      case 6u:
        unsigned int v38 = objc_alloc_init(SIRINLUINTERNALNluRequestRule);
        [(id)a1 addNluRequestRules:v38];
        if (PBReaderPlaceMark() && SIRINLUINTERNALNluRequestRuleReadFrom((char *)v38, a2))
        {
LABEL_48:
          PBReaderRecallMark();

LABEL_63:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_65:

        return 0;
      case 7u:
        uint64_t v17 = PBReaderReadData();
        uint64_t v18 = 40;
LABEL_50:
        unint64_t v39 = *(void **)(a1 + v18);
        *(void *)(a1 + v18) = v17;

        goto LABEL_63;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_63;
    }
  }
}

uint64_t SIRINLUINTERNALSNLP_INTERMEDIATENLv4SpanFeaturizerResponseReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  long long v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = objc_alloc_init(SIRINLUINTERNALSNLP_INTERMEDIATESpanFeaturizerResponse);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark()
          || (SIRINLUINTERNALSNLP_INTERMEDIATESpanFeaturizerResponseReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1C8B71808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C8B71888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C8B71908(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C8B7197C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B719FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B71A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C8B71AF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C8B71B50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B71BB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B71C30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL SIRINLUEXTERNALUtteranceSpanReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  long long v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 32) |= 8u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4))
            {
              unint64_t v24 = &OBJC_IVAR___SIRINLUEXTERNALUtteranceSpan__startIndex;
              goto LABEL_69;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              break;
            }
            v17 += 7;
            BOOL v23 = v18++ > 8;
            if (v23)
            {
              LODWORD(v19) = 0;
              unint64_t v24 = &OBJC_IVAR___SIRINLUEXTERNALUtteranceSpan__startIndex;
              goto LABEL_72;
            }
          }
          unint64_t v24 = &OBJC_IVAR___SIRINLUEXTERNALUtteranceSpan__startIndex;
          goto LABEL_70;
        case 2u:
          char v25 = 0;
          unsigned int v26 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 32) |= 1u;
          while (2)
          {
            uint64_t v27 = *v3;
            unint64_t v28 = *(void *)(a2 + v27);
            if (v28 == -1 || v28 >= *(void *)(a2 + *v4))
            {
              unint64_t v24 = &OBJC_IVAR___SIRINLUEXTERNALUtteranceSpan__endIndex;
              goto LABEL_69;
            }
            char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
            *(void *)(a2 + v27) = v28 + 1;
            v19 |= (unint64_t)(v29 & 0x7F) << v25;
            if (v29 < 0)
            {
              v25 += 7;
              BOOL v23 = v26++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                unint64_t v24 = &OBJC_IVAR___SIRINLUEXTERNALUtteranceSpan__endIndex;
                goto LABEL_72;
              }
              continue;
            }
            break;
          }
          unint64_t v24 = &OBJC_IVAR___SIRINLUEXTERNALUtteranceSpan__endIndex;
          goto LABEL_70;
        case 3u:
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 32) |= 0x20u;
          while (2)
          {
            uint64_t v32 = *v3;
            unint64_t v33 = *(void *)(a2 + v32);
            if (v33 == -1 || v33 >= *(void *)(a2 + *v4))
            {
              unint64_t v24 = &OBJC_IVAR___SIRINLUEXTERNALUtteranceSpan__startUnicodeScalarIndex;
              goto LABEL_69;
            }
            char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
            *(void *)(a2 + v32) = v33 + 1;
            v19 |= (unint64_t)(v34 & 0x7F) << v30;
            if (v34 < 0)
            {
              v30 += 7;
              BOOL v23 = v31++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                unint64_t v24 = &OBJC_IVAR___SIRINLUEXTERNALUtteranceSpan__startUnicodeScalarIndex;
                goto LABEL_72;
              }
              continue;
            }
            break;
          }
          unint64_t v24 = &OBJC_IVAR___SIRINLUEXTERNALUtteranceSpan__startUnicodeScalarIndex;
          goto LABEL_70;
        case 4u:
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 32) |= 4u;
          while (2)
          {
            uint64_t v37 = *v3;
            unint64_t v38 = *(void *)(a2 + v37);
            if (v38 == -1 || v38 >= *(void *)(a2 + *v4))
            {
              unint64_t v24 = &OBJC_IVAR___SIRINLUEXTERNALUtteranceSpan__endUnicodeScalarIndex;
              goto LABEL_69;
            }
            char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
            *(void *)(a2 + v37) = v38 + 1;
            v19 |= (unint64_t)(v39 & 0x7F) << v35;
            if (v39 < 0)
            {
              v35 += 7;
              BOOL v23 = v36++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                unint64_t v24 = &OBJC_IVAR___SIRINLUEXTERNALUtteranceSpan__endUnicodeScalarIndex;
                goto LABEL_72;
              }
              continue;
            }
            break;
          }
          unint64_t v24 = &OBJC_IVAR___SIRINLUEXTERNALUtteranceSpan__endUnicodeScalarIndex;
          goto LABEL_70;
        case 5u:
          char v40 = 0;
          unsigned int v41 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 32) |= 0x10u;
          while (2)
          {
            uint64_t v42 = *v3;
            unint64_t v43 = *(void *)(a2 + v42);
            if (v43 == -1 || v43 >= *(void *)(a2 + *v4))
            {
              unint64_t v24 = &OBJC_IVAR___SIRINLUEXTERNALUtteranceSpan__startMilliSeconds;
              goto LABEL_69;
            }
            char v44 = *(unsigned char *)(*(void *)(a2 + *v7) + v43);
            *(void *)(a2 + v42) = v43 + 1;
            v19 |= (unint64_t)(v44 & 0x7F) << v40;
            if (v44 < 0)
            {
              v40 += 7;
              BOOL v23 = v41++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                unint64_t v24 = &OBJC_IVAR___SIRINLUEXTERNALUtteranceSpan__startMilliSeconds;
                goto LABEL_72;
              }
              continue;
            }
            break;
          }
          unint64_t v24 = &OBJC_IVAR___SIRINLUEXTERNALUtteranceSpan__startMilliSeconds;
          goto LABEL_70;
        case 6u:
          char v45 = 0;
          unsigned int v46 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 32) |= 2u;
          break;
        default:
          if (PBReaderSkipValueWithTag()) {
            continue;
          }
          return 0;
      }
      while (1)
      {
        uint64_t v47 = *v3;
        unint64_t v48 = *(void *)(a2 + v47);
        if (v48 == -1 || v48 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v49 = *(unsigned char *)(*(void *)(a2 + *v7) + v48);
        *(void *)(a2 + v47) = v48 + 1;
        v19 |= (unint64_t)(v49 & 0x7F) << v45;
        if ((v49 & 0x80) == 0)
        {
          unint64_t v24 = &OBJC_IVAR___SIRINLUEXTERNALUtteranceSpan__endMilliSeconds;
          goto LABEL_70;
        }
        v45 += 7;
        BOOL v23 = v46++ > 8;
        if (v23)
        {
          LODWORD(v19) = 0;
          unint64_t v24 = &OBJC_IVAR___SIRINLUEXTERNALUtteranceSpan__endMilliSeconds;
          goto LABEL_72;
        }
      }
      unint64_t v24 = &OBJC_IVAR___SIRINLUEXTERNALUtteranceSpan__endMilliSeconds;
LABEL_69:
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_70:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v19) = 0;
      }
LABEL_72:
      *(_DWORD *)(a1 + *v24) = v19;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL SIRINLUINTERNALPLAN_GENERATIONVariableEventIdPairReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  long long v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 16;
LABEL_22:
        uint64_t v19 = *(void **)(a1 + v18);
        *(void *)(a1 + v18) = v17;

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_24:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v17 = PBReaderReadString();
    uint64_t v18 = 8;
    goto LABEL_22;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t SIRINLUINTERNALRewriteUtteranceReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  long long v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      uint64_t v12 = *(void *)(a2 + v11);
      unint64_t v13 = v12 + 1;
      if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
        break;
      }
      char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v16 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v18 = objc_alloc_init(SIRINLUEXTERNALUUID);
        objc_storeStrong((id *)(a1 + 16), v18);
        if PBReaderPlaceMark() && (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v18, a2)) {
          goto LABEL_33;
        }
        goto LABEL_38;
      case 2u:
        uint64_t v19 = PBReaderReadString();
        uint64_t v20 = *(void **)(a1 + 40);
        *(void *)(a1 + 40) = v19;

        goto LABEL_36;
      case 4u:
        uint64_t v18 = objc_alloc_init(SIRINLUINTERNALRewriteToken);
        [(id)a1 addAsrUtteranceTokens:v18];
        if (!PBReaderPlaceMark() || (SIRINLUINTERNALRewriteTokenReadFrom((uint64_t)v18, a2) & 1) == 0) {
          goto LABEL_38;
        }
        goto LABEL_33;
      case 5u:
        *(unsigned char *)(a1 + 48) |= 1u;
        uint64_t v22 = *v3;
        unint64_t v23 = *(void *)(a2 + v22);
        if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v24 = *(void *)(*(void *)(a2 + *v7) + v23);
          *(void *)(a2 + v22) = v23 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v24 = 0;
        }
        *(void *)(a1 + 8) = v24;
        goto LABEL_36;
      case 6u:
        uint64_t v18 = objc_alloc_init(SIRINLUINTERNALToken);
        [(id)a1 addNluInternalTokens:v18];
        if PBReaderPlaceMark() && (SIRINLUINTERNALTokenReadFrom(v18, a2))
        {
LABEL_33:
          PBReaderRecallMark();

LABEL_36:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_38:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_36;
    }
  }
}

uint64_t sirinluinternalcati::CATIRequest::formatText(sirinluinternalcati::CATIRequest *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "embeddings");
  }
  if (*((void *)this + 2)) {
    PB::TextFormatter::format();
  }
  if (*((void *)this + 3)) {
    PB::TextFormatter::format();
  }
  uint64_t v6 = *((void *)this + 4);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, a2, "request_id");
  }
  uint64_t v7 = *((void *)this + 5);
  if (v7) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "turn_input");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluinternalcati::CATIRequest::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = (void *)this;
  uint64_t v4 = *(const PB::Base **)(this + 8);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  if (v3[3]) {
    this = PB::Writer::write();
  }
  if (v3[2]) {
    this = PB::Writer::write();
  }
  uint64_t v5 = (const PB::Base *)v3[4];
  if (v5) {
    this = PB::Writer::writeSubmessage(a2, v5);
  }
  uint64_t v6 = (const PB::Base *)v3[5];
  if (v6)
  {
    return PB::Writer::writeSubmessage(a2, v6);
  }
  return this;
}

uint64_t sirinluinternalcati::CATIRequest::readFrom(sirinluinternalcati::CATIRequest *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_19;
        }
      }
LABEL_21:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v10 >> 3))
      {
        case 1u:
          operator new();
        case 2u:
          operator new();
        case 3u:
          operator new();
        case 4u:
          operator new();
        case 5u:
          operator new();
        default:
          break;
      }
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_21;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_19;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluinternalcati::CATIRequest::~CATIRequest(sirinluinternalcati::CATIRequest *this)
{
  sirinluinternalcati::CATIRequest::~CATIRequest(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t vars8;

  *(void *)this = &unk_1F232D568;
  unint64_t v2 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4) {
    std::default_delete<std::string>::operator()[abi:ne180100](v4);
  }
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5) {
    std::default_delete<std::string>::operator()[abi:ne180100](v5);
  }
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  PB::Base::~Base(this);
}

double sirinluinternalcati::CATIRequest::CATIRequest(sirinluinternalcati::CATIRequest *this)
{
  *(void *)this = &unk_1F232D568;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 5) = 0;
  return result;
}

{
  double result;

  *(void *)this = &unk_1F232D568;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 5) = 0;
  return result;
}

uint64_t sirinluinternalcati::CATIRequest::CATIRequest(uint64_t this, const sirinluinternalcati::CATIRequest *a2)
{
  *(void *)this = &unk_1F232D568;
  *(_OWORD *)(this + 8) = 0u;
  *(_OWORD *)(this + 24) = 0u;
  *(void *)(this + 40) = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  if (*((void *)a2 + 3)) {
    operator new();
  }
  if (*((void *)a2 + 2)) {
    operator new();
  }
  if (*((void *)a2 + 4)) {
    operator new();
  }
  if (*((void *)a2 + 5)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternalcati::CATIRequest::operator=(uint64_t a1, const sirinluinternalcati::CATIRequest *a2)
{
  if ((const sirinluinternalcati::CATIRequest *)a1 != a2)
  {
    sirinluinternalcati::CATIRequest::CATIRequest((uint64_t)&v7, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v3;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    long long v9 = v4;
    uint64_t v5 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v10;
    uint64_t v10 = v5;
    sirinluinternalcati::CATIRequest::~CATIRequest((sirinluinternalcati::CATIRequest *)&v7);
  }
  return a1;
}

void *sirinluinternalcati::swap(void *this, sirinluinternalcati::CATIRequest *a2, sirinluinternalcati::CATIRequest *a3)
{
  uint64_t v3 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  uint64_t v4 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v4;
  uint64_t v5 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  uint64_t v6 = this[4];
  this[4] = *((void *)a2 + 4);
  *((void *)a2 + 4) = v6;
  uint64_t v7 = this[5];
  this[5] = *((void *)a2 + 5);
  *((void *)a2 + 5) = v7;
  return this;
}

uint64_t sirinluinternalcati::CATIRequest::CATIRequest(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1F232D568;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 40) = 0;
  uint64_t v4 = a2[1];
  a2[1] = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = a2[3];
  a2[3] = 0;
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v6;
  if (v7) {
    std::default_delete<std::string>::operator()[abi:ne180100](v7);
  }
  uint64_t v8 = a2[2];
  a2[2] = 0;
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v8;
  if (v9) {
    std::default_delete<std::string>::operator()[abi:ne180100](v9);
  }
  uint64_t v10 = a2[4];
  a2[4] = 0;
  uint64_t v11 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v10;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = a2[5];
  a2[5] = 0;
  uint64_t v13 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v12;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  return a1;
}

uint64_t sirinluinternalcati::CATIRequest::operator=(uint64_t a1, void *a2)
{
  if ((void *)a1 != a2)
  {
    sirinluinternalcati::CATIRequest::CATIRequest((uint64_t)&v7, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v3;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    long long v9 = v4;
    uint64_t v5 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v10;
    uint64_t v10 = v5;
    sirinluinternalcati::CATIRequest::~CATIRequest((sirinluinternalcati::CATIRequest *)&v7);
  }
  return a1;
}

uint64_t sirinluinternalcati::CATIRequest::operator==(void *a1, void *a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a2[1];
  if (v4)
  {
    if (!v5 || !sirinluinternal::NLv4EmbeddingTensor::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  uint64_t v6 = (unsigned __int8 *)a1[3];
  uint64_t v7 = (unsigned __int8 **)a2[3];
  if (v6)
  {
    if (!v7) {
      return 0;
    }
    uint64_t v8 = v6[23];
    if ((v8 & 0x80u) == 0) {
      long long v9 = (unsigned __int8 *)v6[23];
    }
    else {
      long long v9 = (unsigned __int8 *)*((void *)v6 + 1);
    }
    uint64_t v10 = (unsigned __int8 *)*((unsigned __int8 *)v7 + 23);
    int v11 = (char)v10;
    if ((char)v10 < 0) {
      uint64_t v10 = v7[1];
    }
    if (v9 != v10) {
      return 0;
    }
    if (v11 >= 0) {
      uint64_t v12 = (unsigned __int8 *)a2[3];
    }
    else {
      uint64_t v12 = *v7;
    }
    if ((v8 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v6, v12, *((void *)v6 + 1))) {
        return 0;
      }
    }
    else if (v6[23])
    {
      while (*v6 == *v12)
      {
        ++v6;
        ++v12;
        if (!--v8) {
          goto LABEL_23;
        }
      }
      return 0;
    }
  }
  else if (v7)
  {
    return 0;
  }
LABEL_23:
  uint64_t v13 = (unsigned __int8 *)a1[2];
  char v14 = (unsigned __int8 **)a2[2];
  if (v13)
  {
    if (!v14) {
      return 0;
    }
    uint64_t v15 = v13[23];
    if ((v15 & 0x80u) == 0) {
      unint64_t v16 = (unsigned __int8 *)v13[23];
    }
    else {
      unint64_t v16 = (unsigned __int8 *)*((void *)v13 + 1);
    }
    char v17 = (unsigned __int8 *)*((unsigned __int8 *)v14 + 23);
    int v18 = (char)v17;
    if ((char)v17 < 0) {
      char v17 = v14[1];
    }
    if (v16 != v17) {
      return 0;
    }
    if (v18 >= 0) {
      uint64_t v19 = (unsigned __int8 *)a2[2];
    }
    else {
      uint64_t v19 = *v14;
    }
    if ((v15 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v13, v19, *((void *)v13 + 1))) {
        return 0;
      }
    }
    else if (v13[23])
    {
      while (*v13 == *v19)
      {
        ++v13;
        ++v19;
        if (!--v15) {
          goto LABEL_40;
        }
      }
      return 0;
    }
  }
  else if (v14)
  {
    return 0;
  }
LABEL_40:
  uint64_t v20 = a1[4];
  uint64_t v21 = a2[4];
  if (!v20)
  {
    if (!v21) {
      goto LABEL_47;
    }
    return 0;
  }
  if (!v21 || !sirinluexternal::UUID::operator==(v20, v21)) {
    return 0;
  }
LABEL_47:
  uint64_t v22 = a1[5];
  uint64_t v23 = a2[5];
  uint64_t result = (v22 | v23) == 0;
  if (v22 && v23)
  {
    uint64_t v25 = a1[5];
    return sirinluexternal::TurnInput::operator==(v25, v23);
  }
  return result;
}

unint64_t sirinluinternalcati::CATIRequest::hash_value(sirinluinternalcati::CATIRequest *this)
{
  unint64_t v2 = (sirinluinternal::NLv4EmbeddingTensor *)*((void *)this + 1);
  if (v2) {
    unint64_t v3 = sirinluinternal::NLv4EmbeddingTensor::hash_value(v2);
  }
  else {
    unint64_t v3 = 0;
  }
  uint64_t v4 = *((void *)this + 3);
  if (v4) {
    unint64_t v5 = std::__string_hash<char>::operator()[abi:ne180100](v4);
  }
  else {
    unint64_t v5 = 0;
  }
  uint64_t v6 = *((void *)this + 2);
  if (v6) {
    unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100](v6);
  }
  else {
    unint64_t v7 = 0;
  }
  uint64_t v8 = *((void *)this + 4);
  if (!v8)
  {
    uint64_t v12 = 0;
    goto LABEL_20;
  }
  if ((*(unsigned char *)(v8 + 28) & 1) == 0)
  {
    uint64_t v9 = 0;
    if ((*(unsigned char *)(v8 + 28) & 2) != 0) {
      goto LABEL_13;
    }
LABEL_17:
    uint64_t v10 = 0;
    if ((*(unsigned char *)(v8 + 28) & 4) != 0) {
      goto LABEL_14;
    }
LABEL_18:
    uint64_t v11 = 0;
    goto LABEL_19;
  }
  uint64_t v9 = *(void *)(v8 + 8);
  if ((*(unsigned char *)(v8 + 28) & 2) == 0) {
    goto LABEL_17;
  }
LABEL_13:
  uint64_t v10 = *(void *)(v8 + 16);
  if ((*(unsigned char *)(v8 + 28) & 4) == 0) {
    goto LABEL_18;
  }
LABEL_14:
  uint64_t v11 = *(int *)(v8 + 24);
LABEL_19:
  uint64_t v12 = v10 ^ v9 ^ v11;
LABEL_20:
  unint64_t v13 = *((void *)this + 5);
  if (v13) {
    unint64_t v13 = sirinluexternal::TurnInput::hash_value((sirinluexternal::TurnInput *)v13);
  }
  return v5 ^ v3 ^ v7 ^ v12 ^ v13;
}

uint64_t sirinluinternalcati::CATIRequest::makeEmbeddings(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternalcati::CATIRequest::makeRequestId(uint64_t this)
{
  if (!*(void *)(this + 32)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternalcati::CATIRequest::makeTurnInput(uint64_t this)
{
  if (!*(void *)(this + 40)) {
    operator new();
  }
  return this;
}

BOOL SIRINLUEXTERNALSUBWORD_EMBEDDINGSubwordEmbeddingResponseReadFrom(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  unint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = objc_alloc_init(SIRINLUINTERNALSubwordTokenChain);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || !SIRINLUINTERNALSubwordTokenChainReadFrom(v17, a2)) {
          goto LABEL_30;
        }
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_27:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v17 = objc_alloc_init(SIRINLUINTERNALEMBEDDINGEmbeddingTensorOutput);
    objc_storeStrong((id *)(a1 + 16), v17);
    if (!PBReaderPlaceMark()
      || (SIRINLUINTERNALEMBEDDINGEmbeddingTensorOutputReadFrom((uint64_t)v17, a2) & 1) == 0)
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sirinluinternalcontextual_span_matcher::ContextualSpanMatcherRequest::formatText(sirinluinternalcontextual_span_matcher::ContextualSpanMatcherRequest *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "nl_context");
  }
  uint64_t v6 = *((void *)this + 2);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, a2, "nlu_request_id");
  }
  uint64_t v7 = *((void *)this + 3);
  if (v7) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "request_id");
  }
  uint64_t v8 = *((void *)this + 4);
  if (v8) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v8 + 32))(v8, a2, "token_chain");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluinternalcontextual_span_matcher::ContextualSpanMatcherRequest::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v3 = (void *)this;
  uint64_t v4 = *(const PB::Base **)(this + 24);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  uint64_t v5 = (const PB::Base *)v3[4];
  if (v5) {
    this = PB::Writer::writeSubmessage(a2, v5);
  }
  uint64_t v6 = (const PB::Base *)v3[1];
  if (v6) {
    this = PB::Writer::writeSubmessage(a2, v6);
  }
  uint64_t v7 = (const PB::Base *)v3[2];
  if (v7)
  {
    return PB::Writer::writeSubmessage(a2, v7);
  }
  return this;
}

uint64_t sirinluinternalcontextual_span_matcher::ContextualSpanMatcherRequest::readFrom(sirinluinternalcontextual_span_matcher::ContextualSpanMatcherRequest *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_19;
        }
      }
LABEL_21:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v10 >> 3))
      {
        case 1u:
          operator new();
        case 2u:
          operator new();
        case 3u:
          operator new();
        case 4u:
          operator new();
        default:
          break;
      }
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_21;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_19;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluinternalcontextual_span_matcher::ContextualSpanMatcherRequest::~ContextualSpanMatcherRequest(sirinluinternalcontextual_span_matcher::ContextualSpanMatcherRequest *this)
{
  sirinluinternalcontextual_span_matcher::ContextualSpanMatcherRequest::~ContextualSpanMatcherRequest(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t vars8;

  *(void *)this = &unk_1F232D5B8;
  unint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  PB::Base::~Base(this);
}

double sirinluinternalcontextual_span_matcher::ContextualSpanMatcherRequest::ContextualSpanMatcherRequest(sirinluinternalcontextual_span_matcher::ContextualSpanMatcherRequest *this)
{
  *(void *)this = &unk_1F232D5B8;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

{
  double result;

  *(void *)this = &unk_1F232D5B8;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

uint64_t sirinluinternalcontextual_span_matcher::ContextualSpanMatcherRequest::ContextualSpanMatcherRequest(uint64_t this, const sirinluinternalcontextual_span_matcher::ContextualSpanMatcherRequest *a2)
{
  *(void *)this = &unk_1F232D5B8;
  *(_OWORD *)(this + 8) = 0u;
  *(_OWORD *)(this + 24) = 0u;
  if (*((void *)a2 + 3)) {
    operator new();
  }
  if (*((void *)a2 + 4)) {
    operator new();
  }
  if (*((void *)a2 + 1)) {
    operator new();
  }
  if (*((void *)a2 + 2)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternalcontextual_span_matcher::ContextualSpanMatcherRequest::operator=(uint64_t a1, const sirinluinternalcontextual_span_matcher::ContextualSpanMatcherRequest *a2)
{
  if ((const sirinluinternalcontextual_span_matcher::ContextualSpanMatcherRequest *)a1 != a2)
  {
    sirinluinternalcontextual_span_matcher::ContextualSpanMatcherRequest::ContextualSpanMatcherRequest((uint64_t)v6, a2);
    long long v3 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v8;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v4;
    long long v8 = v3;
    sirinluinternalcontextual_span_matcher::ContextualSpanMatcherRequest::~ContextualSpanMatcherRequest((sirinluinternalcontextual_span_matcher::ContextualSpanMatcherRequest *)v6);
  }
  return a1;
}

void *sirinluinternalcontextual_span_matcher::swap(void *this, sirinluinternalcontextual_span_matcher::ContextualSpanMatcherRequest *a2, sirinluinternalcontextual_span_matcher::ContextualSpanMatcherRequest *a3)
{
  uint64_t v3 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v3;
  uint64_t v4 = this[4];
  this[4] = *((void *)a2 + 4);
  *((void *)a2 + 4) = v4;
  uint64_t v5 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  return this;
}

uint64_t sirinluinternalcontextual_span_matcher::ContextualSpanMatcherRequest::ContextualSpanMatcherRequest(uint64_t a1, void *a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)a1 = &unk_1F232D5B8;
  *(_OWORD *)(a1 + 24) = 0u;
  uint64_t v5 = a2[3];
  a2[3] = 0;
  uint64_t v6 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v5;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = a2[4];
  a2[4] = 0;
  uint64_t v8 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v7;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = a2[1];
  a2[1] = 0;
  uint64_t v10 = *v4;
  *uint64_t v4 = v9;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = a2[2];
  a2[2] = 0;
  uint64_t v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  return a1;
}

uint64_t sirinluinternalcontextual_span_matcher::ContextualSpanMatcherRequest::operator=(uint64_t a1, void *a2)
{
  if ((void *)a1 != a2)
  {
    sirinluinternalcontextual_span_matcher::ContextualSpanMatcherRequest::ContextualSpanMatcherRequest((uint64_t)v6, a2);
    long long v3 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v8;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v4;
    long long v8 = v3;
    sirinluinternalcontextual_span_matcher::ContextualSpanMatcherRequest::~ContextualSpanMatcherRequest((sirinluinternalcontextual_span_matcher::ContextualSpanMatcherRequest *)v6);
  }
  return a1;
}

BOOL sirinluinternalcontextual_span_matcher::ContextualSpanMatcherRequest::operator==(void *a1, void *a2)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = a2[3];
  if (v4)
  {
    if (!v5 || !sirinluexternal::RequestID::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  uint64_t v6 = (void *)a1[4];
  long long v7 = (void *)a2[4];
  if (v6)
  {
    if (!v7 || !sirinluinternal::TokenChain::operator==(v6, v7)) {
      return 0;
    }
  }
  else if (v7)
  {
    return 0;
  }
  long long v8 = (uint64_t *)a1[1];
  uint64_t v9 = a2[1];
  if (!v8)
  {
    if (!v9) {
      goto LABEL_14;
    }
    return 0;
  }
  if (!v9 || (sirinluexternal::NLContext::operator==(v8, v9) & 1) == 0) {
    return 0;
  }
LABEL_14:
  uint64_t v10 = a1[2];
  uint64_t v11 = a2[2];
  BOOL result = (v10 | v11) == 0;
  if (v10 && v11)
  {
    uint64_t v13 = a1[2];
    return sirinluexternal::UUID::operator==(v13, v11);
  }
  return result;
}

unint64_t sirinluinternalcontextual_span_matcher::ContextualSpanMatcherRequest::hash_value(sirinluinternalcontextual_span_matcher::ContextualSpanMatcherRequest *this)
{
  unint64_t v2 = (sirinluexternal::RequestID *)*((void *)this + 3);
  if (v2) {
    unint64_t v3 = sirinluexternal::RequestID::hash_value(v2);
  }
  else {
    unint64_t v3 = 0;
  }
  uint64_t v4 = (sirinluinternal::TokenChain *)*((void *)this + 4);
  if (v4) {
    unint64_t v5 = sirinluinternal::TokenChain::hash_value(v4);
  }
  else {
    unint64_t v5 = 0;
  }
  unint64_t v6 = *((void *)this + 1);
  if (v6) {
    unint64_t v6 = sirinluexternal::NLContext::hash_value((sirinluexternal::NLContext *)v6);
  }
  uint64_t v7 = *((void *)this + 2);
  if (v7)
  {
    if (*(unsigned char *)(v7 + 28))
    {
      uint64_t v8 = *(void *)(v7 + 8);
      if ((*(unsigned char *)(v7 + 28) & 2) != 0)
      {
LABEL_12:
        uint64_t v9 = *(void *)(v7 + 16);
        if ((*(unsigned char *)(v7 + 28) & 4) != 0)
        {
LABEL_13:
          uint64_t v10 = *(int *)(v7 + 24);
LABEL_17:
          uint64_t v7 = v9 ^ v8 ^ v10;
          return v5 ^ v3 ^ v6 ^ v7;
        }
LABEL_16:
        uint64_t v10 = 0;
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v8 = 0;
      if ((*(unsigned char *)(v7 + 28) & 2) != 0) {
        goto LABEL_12;
      }
    }
    uint64_t v9 = 0;
    if ((*(unsigned char *)(v7 + 28) & 4) != 0) {
      goto LABEL_13;
    }
    goto LABEL_16;
  }
  return v5 ^ v3 ^ v6 ^ v7;
}

uint64_t sirinluinternalcontextual_span_matcher::ContextualSpanMatcherRequest::makeRequestId(uint64_t this)
{
  if (!*(void *)(this + 24)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternalcontextual_span_matcher::ContextualSpanMatcherRequest::makeTokenChain(uint64_t this)
{
  if (!*(void *)(this + 32)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternalcontextual_span_matcher::ContextualSpanMatcherRequest::makeNlContext(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternalcontextual_span_matcher::ContextualSpanMatcherRequest::makeNluRequestId(uint64_t this)
{
  if (!*(void *)(this + 16)) {
    operator new();
  }
  return this;
}

BOOL SIRINLUINTERNALCONTEXTUAL_SPAN_MATCHERContextualSpanMatcherRequestReadFrom(id *a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  unint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = objc_alloc_init(SIRINLUEXTERNALRequestID);
        objc_storeStrong(a1 + 3, v17);
        if PBReaderPlaceMark() && (SIRINLUEXTERNALRequestIDReadFrom((uint64_t)v17, a2)) {
          goto LABEL_32;
        }
        goto LABEL_35;
      case 2u:
        char v17 = objc_alloc_init(SIRINLUINTERNALTokenChain);
        objc_storeStrong(a1 + 4, v17);
        if (!PBReaderPlaceMark() || !SIRINLUINTERNALTokenChainReadFrom((char *)v17, a2)) {
          goto LABEL_35;
        }
        goto LABEL_32;
      case 3u:
        char v17 = objc_alloc_init(SIRINLUEXTERNALNLContext);
        objc_storeStrong(a1 + 1, v17);
        if (!PBReaderPlaceMark() || !SIRINLUEXTERNALNLContextReadFrom((id *)&v17->super.super.isa, a2)) {
          goto LABEL_35;
        }
        goto LABEL_32;
      case 4u:
        char v17 = objc_alloc_init(SIRINLUEXTERNALUUID);
        objc_storeStrong(a1 + 2, v17);
        if PBReaderPlaceMark() && (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v17, a2))
        {
LABEL_32:
          PBReaderRecallMark();

LABEL_33:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_35:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_33;
    }
  }
}

uint64_t sirinluinternal::MentionDetectorSpanData::formatText(sirinluinternal::MentionDetectorSpanData *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 16)) {
    PB::TextFormatter::format(a2, "score", *((double *)this + 1));
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluinternal::MentionDetectorSpanData::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(unsigned char *)(this + 16)) {
    return PB::Writer::write(a2, *(double *)(this + 8));
  }
  return this;
}

uint64_t sirinluinternal::MentionDetectorSpanData::readFrom(sirinluinternal::MentionDetectorSpanData *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_25;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 16) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else
      {
LABEL_25:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_25;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluinternal::MentionDetectorSpanData::~MentionDetectorSpanData(sirinluinternal::MentionDetectorSpanData *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x1CB772580);
}

uint64_t sirinluinternal::MentionDetectorSpanData::MentionDetectorSpanData(uint64_t this)
{
  *(void *)this = &unk_1F232D608;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

{
  *(void *)this = &unk_1F232D608;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

double sirinluinternal::MentionDetectorSpanData::MentionDetectorSpanData(sirinluinternal::MentionDetectorSpanData *this, const sirinluinternal::MentionDetectorSpanData *a2)
{
  *(void *)this = &unk_1F232D608;
  *((_DWORD *)this + 4) = 0;
  if (*((unsigned char *)a2 + 16))
  {
    double result = *((double *)a2 + 1);
    *((unsigned char *)this + 16) = 1;
    *((double *)this + 1) = result;
  }
  return result;
}

{
  double result;

  *(void *)this = &unk_1F232D608;
  *((_DWORD *)this + 4) = 0;
  if (*((unsigned char *)a2 + 16))
  {
    double result = *((double *)a2 + 1);
    *((unsigned char *)this + 16) = 1;
    *((double *)this + 1) = result;
  }
  return result;
}

uint64_t sirinluinternal::MentionDetectorSpanData::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v7[0] = &unk_1F232D608;
    uint64_t v3 = *(void *)(a2 + 8);
    int v4 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = *(unsigned char *)(a2 + 16) & 1;
    int v8 = v4;
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v7[1] = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  void v8[2];
  int v9;

  if (a1 != a2)
  {
    v8[0] = &unk_1F232D608;
    uint64_t v3 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = 0;
    int v4 = *(void *)(a2 + 8);
    uint64_t v5 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v3;
    char v9 = v5;
    unint64_t v6 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v8[1] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

double sirinluinternal::swap(sirinluinternal *this, sirinluinternal::MentionDetectorSpanData *a2, sirinluinternal::MentionDetectorSpanData *a3)
{
  int v3 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v3;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double sirinluinternal::MentionDetectorSpanData::MentionDetectorSpanData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F232D608;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(void *)a1 = &unk_1F232D608;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

BOOL sirinluinternal::MentionDetectorSpanData::operator==(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a1 + 16);
  BOOL result = (*(unsigned char *)(a2 + 16) & 1) == 0;
  if (v3) {
    return (*(unsigned char *)(a2 + 16) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  }
  return result;
}

uint64_t sirinluinternal::MentionDetectorSpanData::hash_value(sirinluinternal::MentionDetectorSpanData *this)
{
  if ((*((unsigned char *)this + 16) & 1) == 0) {
    return 0;
  }
  if (*((double *)this + 1) == 0.0) {
    return 0;
  }
  return *((void *)this + 1);
}

void sub_1C8B7812C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  MEMORY[0x1CB772580](v7, 0x1030C40E9F947FBLL);
  apple::aiml::flatbuffers2::FlatBufferBuilder::~FlatBufferBuilder((apple::aiml::flatbuffers2::FlatBufferBuilder *)va);
  _Unwind_Resume(a1);
}

void sub_1C8B785C0(_Unwind_Exception *a1)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(a1);
}

void sub_1C8B78758(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B78808(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B7891C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B78A10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C8B78B80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8B78EA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL SSUMetadata::Verify(SSUMetadata *this, apple::aiml::flatbuffers2::Verifier *a2)
{
  BOOL result = apple::aiml::flatbuffers2::Verifier::VerifyTableStart(a2, this->var0);
  if (!result) {
    return result;
  }
  BOOL result = apple::aiml::flatbuffers2::Table::VerifyOffset((apple::aiml::flatbuffers2::Table *)this, a2, 4u);
  if (!result) {
    return result;
  }
  uint64_t v5 = &this[-*(int *)this->var0];
  if (*(unsigned __int16 *)v5->var0 >= 5u && (uint64_t v6 = *(unsigned __int16 *)v5[4].var0) != 0) {
    uint64_t v7 = &this[v6 + *(unsigned int *)this[v6].var0];
  }
  else {
    uint64_t v7 = 0;
  }
  BOOL result = apple::aiml::flatbuffers2::Verifier::VerifyString(a2, v7->var0);
  if (!result) {
    return result;
  }
  uint64_t v8 = *(int *)this->var0;
  char v9 = &this[-v8];
  unsigned int v10 = *(unsigned __int16 *)this[-v8].var0;
  if (v10 >= 7)
  {
    if (*(_WORD *)v9[6].var0)
    {
      BOOL result = 0;
      unint64_t v11 = *((void *)a2 + 1);
      if (v11 < 9 || v11 - 8 < (unint64_t)this[*(unsigned __int16 *)v9[6].var0 - *(void *)a2].var0) {
        return result;
      }
    }
  }
  BOOL result = apple::aiml::flatbuffers2::Table::VerifyOffset((apple::aiml::flatbuffers2::Table *)this, a2, 8u);
  if (!result) {
    return result;
  }
  if (v10 < 9) {
    goto LABEL_24;
  }
  if (*(_WORD *)v9[8].var0)
  {
    BOOL result = apple::aiml::flatbuffers2::Verifier::VerifyVectorOrString(a2, this[*(unsigned __int16 *)v9[8].var0 + *(unsigned int *)this[*(unsigned __int16 *)v9[8].var0].var0].var0, 4uLL, 0);
    if (!result) {
      return result;
    }
    uint64_t v12 = *(int *)this->var0;
    if (*(unsigned __int16 *)this[-v12].var0 < 9u) {
      goto LABEL_24;
    }
    uint64_t v13 = -v12;
  }
  else
  {
    uint64_t v13 = -v8;
  }
  uint64_t v14 = *(unsigned __int16 *)this[v13 + 8].var0;
  if (!v14 || (char v15 = &this[v14 + *(unsigned int *)this[v14].var0], !*(_DWORD *)v15->var0))
  {
LABEL_24:
    BOOL result = apple::aiml::flatbuffers2::Table::VerifyOffset((apple::aiml::flatbuffers2::Table *)this, a2, 0xAu);
    if (result)
    {
      char v18 = &this[-*(int *)this->var0];
      if (*(unsigned __int16 *)v18->var0 >= 0xBu && (uint64_t v19 = *(unsigned __int16 *)v18[10].var0) != 0) {
        uint64_t v20 = &this[v19 + *(unsigned int *)this[v19].var0];
      }
      else {
        uint64_t v20 = 0;
      }
      BOOL result = apple::aiml::flatbuffers2::Verifier::VerifyString(a2, v20->var0);
      if (result)
      {
        --*((_DWORD *)a2 + 4);
        return 1;
      }
    }
    return result;
  }
  unint64_t v16 = 0;
  unint64_t v17 = v15 + 4;
  while (apple::aiml::flatbuffers2::Verifier::VerifyString(a2, v17[*(unsigned int *)v17->var0].var0))
  {
    ++v16;
    v17 += 4;
    if (v16 >= *(unsigned int *)v15->var0) {
      goto LABEL_24;
    }
  }
  return 0;
}

BOOL apple::aiml::flatbuffers2::Verifier::VerifyVectorOfTables<SSUCategory>(apple::aiml::flatbuffers2::Verifier *a1, SSUCategory *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*(_DWORD *)a2->var0) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 4;
  do
  {
    BOOL result = SSUCategory::Verify(&v5[*(unsigned int *)v5->var0], a1);
    if (!result) {
      break;
    }
    ++v4;
    v5 += 4;
  }
  while (v4 < *(unsigned int *)a2->var0);
  return result;
}

uint64_t sirinluinternalssu::SSUResponse::formatText(sirinluinternalssu::SSUResponse *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = (uint64_t *)*((void *)this + 1);
  uint64_t v6 = (uint64_t *)*((void *)this + 2);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "hypotheses");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluinternalssu::SSUResponse::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base ***)(this + 8);
  for (uint64_t i = *(const PB::Base ***)(this + 16); v2 != i; this = PB::Writer::writeSubmessage(a2, v5))
    uint64_t v5 = *v2++;
  return this;
}

uint64_t sirinluinternalssu::SSUResponse::readFrom(sirinluinternalssu::SSUResponse *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        PB::PtrVector<sirinluexternal::UserParse>::emplace_back<>();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluinternalssu::SSUResponse::~SSUResponse(sirinluinternalssu::SSUResponse *this)
{
  *(void *)this = &unk_1F232D658;
  unint64_t v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
  JUMPOUT(0x1CB772580);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_1F232D658;
  unint64_t v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_1F232D658;
  unint64_t v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
}

void *sirinluinternalssu::SSUResponse::SSUResponse(void *this)
{
  *this = &unk_1F232D658;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = &unk_1F232D658;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

void *sirinluinternalssu::SSUResponse::SSUResponse(void *this, const sirinluinternalssu::SSUResponse *a2)
{
  this[1] = 0;
  *this = &unk_1F232D658;
  this[2] = 0;
  this[3] = 0;
  if (*((void *)a2 + 1) != *((void *)a2 + 2)) {
    PB::PtrVector<sirinluexternal::UserParse>::emplace_back<sirinluexternal::UserParse const&>();
  }
  return this;
}

uint64_t sirinluinternalssu::SSUResponse::operator=(uint64_t a1, const sirinluinternalssu::SSUResponse *a2)
{
  if ((const sirinluinternalssu::SSUResponse *)a1 != a2)
  {
    sirinluinternalssu::SSUResponse::SSUResponse(&v6, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v3;
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v8;
    uint64_t v8 = v4;
    uint64_t v6 = &unk_1F232D658;
    unsigned int v9 = (void **)&v7;
    std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v9);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

void *sirinluinternalssu::swap(void *this, sirinluinternalssu::SSUResponse *a2, sirinluinternalssu::SSUResponse *a3)
{
  uint64_t v3 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  uint64_t v4 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  return this;
}

uint64_t sirinluinternalssu::SSUResponse::SSUResponse(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F232D658;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate((void **)(a1 + 8));
  *uint64_t v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

{
  _OWORD *v4;

  *(void *)a1 = &unk_1F232D658;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate((void **)(a1 + 8));
  *uint64_t v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

uint64_t sirinluinternalssu::SSUResponse::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v9 = &unk_1F232D658;
    long long v10 = 0uLL;
    uint64_t v11 = 0;
    std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate((void **)&v10);
    uint64_t v4 = *(void *)(a2 + 24);
    long long v5 = *(_OWORD *)(a2 + 8);
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    long long v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v5;
    long long v10 = v6;
    uint64_t v7 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v4;
    uint64_t v11 = v7;
    char v12 = (void **)&v10;
    unsigned int v9 = &unk_1F232D658;
    std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v12);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

BOOL sirinluinternalssu::SSUResponse::operator==(uint64_t a1, uint64_t a2)
{
  return PB::PtrVector<sirinluexternal::UserParse>::operator==((uint64_t *)(a1 + 8), *(uint64_t **)(a2 + 8), *(void *)(a2 + 16));
}

uint64_t sirinluinternalssu::SSUResponse::hash_value(sirinluinternalssu::SSUResponse *this)
{
  uint64_t v1 = (sirinluexternal::UserParse **)*((void *)this + 1);
  unint64_t v2 = (sirinluexternal::UserParse **)*((void *)this + 2);
  if (v1 == v2) {
    return 0;
  }
  uint64_t v3 = 0;
  do
  {
    uint64_t v4 = *v1++;
    v3 ^= sirinluexternal::UserParse::hash_value(v4);
  }
  while (v1 != v2);
  return v3;
}

uint64_t SIRINLUEXTERNALSSU_INFERENCESsuInferenceSetupReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  long long v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        char v18 = *(void **)(a1 + 8);
        *(void *)(a1 + 8) = v17;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL SIRINLUINTERNALNluRequestRuleReadFrom(char *a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  long long v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 16;
        goto LABEL_25;
      case 2u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 24;
        goto LABEL_25;
      case 3u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 8;
        goto LABEL_25;
      case 4u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 40;
LABEL_25:
        uint64_t v19 = *(SIRINLUINTERNALTurnInputRule **)&a1[v18];
        *(void *)&a1[v18] = v17;
        goto LABEL_26;
      case 5u:
        uint64_t v19 = objc_alloc_init(SIRINLUINTERNALTurnInputRule);
        [a1 addTurnInputRules:v19];
        if (PBReaderPlaceMark() && SIRINLUINTERNALTurnInputRuleReadFrom((id *)&v19->super.super.isa, a2))
        {
          PBReaderRecallMark();
LABEL_26:

LABEL_27:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_27;
    }
  }
}

uint64_t SIRINLUEXTERNALUUIDReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  long long v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        char v24 = 0;
        unsigned int v25 = 0;
        uint64_t v26 = 0;
        *(unsigned char *)(a1 + 28) |= 4u;
        while (1)
        {
          uint64_t v27 = *v3;
          unint64_t v28 = *(void *)(a2 + v27);
          if (v28 == -1 || v28 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
          *(void *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0) {
            goto LABEL_49;
          }
          v24 += 7;
          BOOL v14 = v25++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_51;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_49:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v26) = 0;
        }
LABEL_51:
        *(_DWORD *)(a1 + 24) = v26;
      }
      else
      {
        if (v17 == 2)
        {
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v20 = 0;
          *(unsigned char *)(a1 + 28) |= 2u;
          while (1)
          {
            uint64_t v32 = *v3;
            unint64_t v33 = *(void *)(a2 + v32);
            if (v33 == -1 || v33 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
            *(void *)(a2 + v32) = v33 + 1;
            v20 |= (unint64_t)(v34 & 0x7F) << v30;
            if ((v34 & 0x80) == 0) {
              goto LABEL_53;
            }
            v30 += 7;
            BOOL v14 = v31++ >= 9;
            if (v14)
            {
              uint64_t v20 = 0;
              goto LABEL_55;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_53:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v20 = 0;
          }
LABEL_55:
          uint64_t v36 = 16;
        }
        else
        {
          if (v17 != 1)
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
            continue;
          }
          char v18 = 0;
          unsigned int v19 = 0;
          uint64_t v20 = 0;
          *(unsigned char *)(a1 + 28) |= 1u;
          while (1)
          {
            uint64_t v21 = *v3;
            unint64_t v22 = *(void *)(a2 + v21);
            if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
            *(void *)(a2 + v21) = v22 + 1;
            v20 |= (unint64_t)(v23 & 0x7F) << v18;
            if ((v23 & 0x80) == 0) {
              goto LABEL_45;
            }
            v18 += 7;
            BOOL v14 = v19++ >= 9;
            if (v14)
            {
              uint64_t v20 = 0;
              goto LABEL_47;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_45:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v20 = 0;
          }
LABEL_47:
          uint64_t v36 = 8;
        }
        *(void *)(a1 + v36) = v20;
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sirinluexternal::ResponseStatus::formatText(sirinluexternal::ResponseStatus *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 20)) {
    PB::TextFormatter::format(a2, "code");
  }
  if (*((void *)this + 1)) {
    PB::TextFormatter::format();
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluexternal::ResponseStatus::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v2 = this;
  if (*(unsigned char *)(this + 20)) {
    this = PB::Writer::writeVarInt(a2);
  }
  if (*(void *)(v2 + 8))
  {
    return PB::Writer::write();
  }
  return this;
}

uint64_t sirinluexternal::ResponseStatus::readFrom(sirinluexternal::ResponseStatus *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_30;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 3) {
        operator new();
      }
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v19 = *((void *)a2 + 1);
        unint64_t v20 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v20)
        {
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v24 = 0;
          if (v20 <= v19) {
            unint64_t v20 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v20 == v19)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_43;
            }
            unint64_t v30 = v19 + 1;
            char v31 = *(unsigned char *)(v21 + v19);
            *((void *)a2 + 1) = v30;
            v24 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            unint64_t v19 = v30;
            BOOL v14 = v29++ > 8;
            if (v14)
            {
LABEL_39:
              LODWORD(v24) = 0;
              goto LABEL_43;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
        }
        else
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            unint64_t v25 = v19 + 1;
            *((void *)a2 + 1) = v19 + 1;
            char v26 = *(unsigned char *)(v21 + v19);
            v24 |= (unint64_t)(v26 & 0x7F) << v22;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            unint64_t v19 = v25;
            BOOL v14 = v23++ > 8;
            if (v14) {
              goto LABEL_39;
            }
          }
        }
LABEL_43:
        *((_DWORD *)this + 4) = v24;
      }
      else
      {
LABEL_30:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_30;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluexternal::ResponseStatus::~ResponseStatus(sirinluexternal::ResponseStatus *this)
{
  sirinluexternal::ResponseStatus::~ResponseStatus(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t vars8;

  unint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1F232D6A8;
  *((void *)this + 1) = 0;
  if (v2) {
    std::default_delete<std::string>::operator()[abi:ne180100](v2);
  }
  PB::Base::~Base(this);
}

void *sirinluexternal::ResponseStatus::ResponseStatus(void *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1F232D6A8;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1F232D6A8;
  return this;
}

uint64_t sirinluexternal::ResponseStatus::ResponseStatus(uint64_t this, const sirinluexternal::ResponseStatus *a2)
{
  *(void *)this = &unk_1F232D6A8;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  if (*((unsigned char *)a2 + 20))
  {
    int v2 = *((_DWORD *)a2 + 4);
    *(unsigned char *)(this + 20) = 1;
    *(_DWORD *)(this + 16) = v2;
  }
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const sirinluexternal::ResponseStatus *sirinluexternal::ResponseStatus::operator=(const sirinluexternal::ResponseStatus *a1, const sirinluexternal::ResponseStatus *a2)
{
  if (a1 != a2)
  {
    sirinluexternal::ResponseStatus::ResponseStatus((uint64_t)v6, a2);
    uint64_t v3 = *((void *)a1 + 2);
    *((void *)a1 + 2) = v8;
    uint64_t v8 = v3;
    uint64_t v4 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v7;
    uint64_t v7 = v4;
    sirinluexternal::ResponseStatus::~ResponseStatus((sirinluexternal::ResponseStatus *)v6);
  }
  return a1;
}

uint64_t sirinluexternal::swap(uint64_t this, sirinluexternal::ResponseStatus *a2, sirinluexternal::ResponseStatus *a3)
{
  int v3 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  int v4 = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  uint64_t v5 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  return this;
}

uint64_t sirinluexternal::ResponseStatus::ResponseStatus(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F232D6A8;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v3;
  if (v4) {
    std::default_delete<std::string>::operator()[abi:ne180100](v4);
  }
  return a1;
}

uint64_t sirinluexternal::ResponseStatus::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sirinluexternal::ResponseStatus::ResponseStatus((uint64_t)v6, a2);
    uint64_t v3 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v8;
    uint64_t v8 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v4;
    sirinluexternal::ResponseStatus::~ResponseStatus((sirinluexternal::ResponseStatus *)v6);
  }
  return a1;
}

uint64_t sirinluexternal::ResponseStatus::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 20))
  {
    if ((*(unsigned char *)(a2 + 20) & 1) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 20))
  {
    return 0;
  }
  int v2 = *(unsigned __int8 **)(a1 + 8);
  uint64_t v3 = *(unsigned __int8 ***)(a2 + 8);
  uint64_t result = v3 == 0;
  if (!v2) {
    return result;
  }
  if (!v3) {
    return 0;
  }
  uint64_t v5 = v2[23];
  if ((v5 & 0x80u) == 0) {
    long long v6 = (unsigned __int8 *)v2[23];
  }
  else {
    long long v6 = (unsigned __int8 *)*((void *)v2 + 1);
  }
  uint64_t v7 = (unsigned __int8 *)*((unsigned __int8 *)v3 + 23);
  int v8 = (char)v7;
  if ((char)v7 < 0) {
    uint64_t v7 = v3[1];
  }
  if (v6 != v7) {
    return 0;
  }
  if (v8 >= 0) {
    char v9 = *(unsigned __int8 **)(a2 + 8);
  }
  else {
    char v9 = *v3;
  }
  if ((v5 & 0x80) != 0) {
    return !memcmp(*(const void **)v2, v9, *((void *)v2 + 1));
  }
  if (!v2[23]) {
    return 1;
  }
  uint64_t v10 = v5 - 1;
  do
  {
    int v12 = *v2++;
    int v11 = v12;
    int v14 = *v9++;
    int v13 = v14;
    BOOL v16 = v10-- != 0;
    uint64_t result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

unint64_t sirinluexternal::ResponseStatus::hash_value(sirinluexternal::ResponseStatus *this)
{
  if (*((unsigned char *)this + 20)) {
    uint64_t v1 = *((int *)this + 4);
  }
  else {
    uint64_t v1 = 0;
  }
  unint64_t v2 = *((void *)this + 1);
  if (v2) {
    unint64_t v2 = std::__string_hash<char>::operator()[abi:ne180100](v2);
  }
  return v2 ^ v1;
}

uint64_t sirinluinternalmention_detector::MentionDetectorRequest::formatText(sirinluinternalmention_detector::MentionDetectorRequest *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "cdm_request_id");
  }
  uint64_t v6 = *((void *)this + 2);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, a2, "embedding_tensor");
  }
  if (*((unsigned char *)this + 72)) {
    PB::TextFormatter::format(a2, "max_candidates");
  }
  uint64_t v7 = *((void *)this + 4);
  if (v7) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "nlu_request_id");
  }
  uint64_t v8 = *((void *)this + 5);
  if (v8) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v8 + 32))(v8, a2, "request_id");
  }
  if (*((void *)this + 6)) {
    PB::TextFormatter::format();
  }
  uint64_t v9 = *((void *)this + 7);
  if (v9) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v9 + 32))(v9, a2, "token_chain");
  }
  if (*((void *)this + 8)) {
    PB::TextFormatter::format();
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluinternalmention_detector::MentionDetectorRequest::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *(const PB::Base **)(this + 40);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  uint64_t v5 = *(const PB::Base **)(v3 + 32);
  if (v5) {
    this = PB::Writer::writeSubmessage(a2, v5);
  }
  if (*(void *)(v3 + 48)) {
    this = PB::Writer::write();
  }
  if (*(void *)(v3 + 64)) {
    this = PB::Writer::write();
  }
  uint64_t v6 = *(const PB::Base **)(v3 + 56);
  if (v6) {
    this = PB::Writer::writeSubmessage(a2, v6);
  }
  uint64_t v7 = *(const PB::Base **)(v3 + 16);
  if (v7) {
    this = PB::Writer::writeSubmessage(a2, v7);
  }
  if (*(unsigned char *)(v3 + 72)) {
    this = PB::Writer::writeVarInt(a2);
  }
  uint64_t v8 = *(const PB::Base **)(v3 + 8);
  if (v8)
  {
    return PB::Writer::writeSubmessage(a2, v8);
  }
  return this;
}

uint64_t sirinluinternalmention_detector::MentionDetectorRequest::readFrom(sirinluinternalmention_detector::MentionDetectorRequest *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
      break;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      int v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        operator new();
      case 2u:
        operator new();
      case 3u:
        operator new();
      case 4u:
        operator new();
      case 5u:
        operator new();
      case 6u:
        operator new();
      case 7u:
        *((unsigned char *)this + 72) |= 1u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v21 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v20 <= 0xFFFFFFFFFFFFFFF5 && v20 + 10 <= v21)
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          do
          {
            unint64_t v26 = v20 + 1;
            *((void *)a2 + 1) = v20 + 1;
            char v27 = *(unsigned char *)(v22 + v20);
            v25 |= (unint64_t)(v27 & 0x7F) << v23;
            if ((v27 & 0x80) == 0) {
              goto LABEL_52;
            }
            v23 += 7;
            unint64_t v20 = v26;
            BOOL v14 = v24++ > 8;
          }
          while (!v14);
LABEL_48:
          uint64_t v25 = 0;
          goto LABEL_52;
        }
        char v29 = 0;
        unsigned int v30 = 0;
        uint64_t v25 = 0;
        if (v21 <= v20) {
          unint64_t v21 = *((void *)a2 + 1);
        }
        break;
      case 8u:
        operator new();
      default:
        goto LABEL_19;
    }
    while (1)
    {
      if (v21 == v20)
      {
        uint64_t v25 = 0;
        *((unsigned char *)a2 + 24) = 1;
        goto LABEL_52;
      }
      unint64_t v31 = v20 + 1;
      char v32 = *(unsigned char *)(v22 + v20);
      *((void *)a2 + 1) = v31;
      v25 |= (unint64_t)(v32 & 0x7F) << v29;
      if ((v32 & 0x80) == 0) {
        break;
      }
      v29 += 7;
      unint64_t v20 = v31;
      BOOL v14 = v30++ > 8;
      if (v14) {
        goto LABEL_48;
      }
    }
    if (*((unsigned char *)a2 + 24)) {
      uint64_t v25 = 0;
    }
LABEL_52:
    *((void *)this + 3) = v25;
LABEL_37:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  char v15 = 0;
  unsigned int v16 = 0;
  unint64_t v11 = 0;
  if (v2 > v3) {
    unint64_t v3 = v2;
  }
  do
  {
    if (v3 == v2)
    {
      int v4 = 1;
      *((unsigned char *)a2 + 24) = 1;
      return v4 == 0;
    }
    unint64_t v17 = v2 + 1;
    char v18 = *(unsigned char *)(v8 + v2);
    *((void *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0) {
      goto LABEL_21;
    }
    v15 += 7;
    unint64_t v2 = v17;
    BOOL v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  uint64_t result = PB::Reader::skip(a2);
  if (result) {
    goto LABEL_37;
  }
  return result;
}

void sirinluinternalmention_detector::MentionDetectorRequest::~MentionDetectorRequest(sirinluinternalmention_detector::MentionDetectorRequest *this)
{
  sirinluinternalmention_detector::MentionDetectorRequest::~MentionDetectorRequest(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t vars8;

  *(void *)this = &unk_1F232D6F8;
  unint64_t v2 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v2) {
    std::default_delete<std::string>::operator()[abi:ne180100](v2);
  }
  unint64_t v3 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v4) {
    std::default_delete<std::string>::operator()[abi:ne180100](v4);
  }
  uint64_t v5 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  PB::Base::~Base(this);
}

double sirinluinternalmention_detector::MentionDetectorRequest::MentionDetectorRequest(sirinluinternalmention_detector::MentionDetectorRequest *this)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1F232D6F8;
  double result = 0.0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)((char *)this + 60) = 0u;
  return result;
}

{
  double result;

  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1F232D6F8;
  double result = 0.0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)((char *)this + 60) = 0u;
  return result;
}

uint64_t sirinluinternalmention_detector::MentionDetectorRequest::MentionDetectorRequest(uint64_t this, const sirinluinternalmention_detector::MentionDetectorRequest *a2)
{
  *(void *)this = &unk_1F232D6F8;
  *(void *)(this + 8) = 0;
  *(_OWORD *)(this + 32) = 0u;
  *(void *)(this + 16) = 0;
  *(_OWORD *)(this + 48) = 0u;
  *(_OWORD *)(this + 60) = 0u;
  if (*((void *)a2 + 5)) {
    operator new();
  }
  if (*((void *)a2 + 4)) {
    operator new();
  }
  if (*((void *)a2 + 6)) {
    operator new();
  }
  if (*((void *)a2 + 8)) {
    operator new();
  }
  if (*((void *)a2 + 7)) {
    operator new();
  }
  if (*((void *)a2 + 2)) {
    operator new();
  }
  if (*((unsigned char *)a2 + 72))
  {
    uint64_t v2 = *((void *)a2 + 3);
    *(unsigned char *)(this + 72) |= 1u;
    *(void *)(this + 24) = v2;
  }
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternalmention_detector::MentionDetectorRequest::operator=(uint64_t a1, const sirinluinternalmention_detector::MentionDetectorRequest *a2)
{
  if ((const sirinluinternalmention_detector::MentionDetectorRequest *)a1 != a2)
  {
    sirinluinternalmention_detector::MentionDetectorRequest::MentionDetectorRequest((uint64_t)&v11, a2);
    long long v3 = v15;
    long long v4 = *(_OWORD *)(a1 + 32);
    long long v5 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(a1 + 32) = v14;
    *(_OWORD *)(a1 + 48) = v3;
    int v6 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v17;
    int v17 = v6;
    uint64_t v7 = *(void *)(a1 + 64);
    *(void *)(a1 + 64) = v16;
    uint64_t v16 = v7;
    long long v14 = v4;
    long long v15 = v5;
    uint64_t v8 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v13;
    uint64_t v13 = v8;
    long long v9 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v12;
    long long v12 = v9;
    sirinluinternalmention_detector::MentionDetectorRequest::~MentionDetectorRequest((sirinluinternalmention_detector::MentionDetectorRequest *)&v11);
  }
  return a1;
}

uint64_t sirinluinternalmention_detector::swap(uint64_t this, sirinluinternalmention_detector::MentionDetectorRequest *a2, sirinluinternalmention_detector::MentionDetectorRequest *a3)
{
  int v3 = *(_DWORD *)(this + 72);
  *(_DWORD *)(this + 72) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v3;
  uint64_t v4 = *(void *)(this + 40);
  *(void *)(this + 40) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v4;
  uint64_t v5 = *(void *)(this + 32);
  *(void *)(this + 32) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v5;
  uint64_t v6 = *(void *)(this + 48);
  *(void *)(this + 48) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v6;
  uint64_t v7 = *(void *)(this + 64);
  *(void *)(this + 64) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v7;
  uint64_t v8 = *(void *)(this + 56);
  *(void *)(this + 56) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v8;
  uint64_t v9 = *(void *)(this + 16);
  uint64_t v10 = *(void *)(this + 24);
  uint64_t v11 = *((void *)a2 + 3);
  *(void *)(this + 16) = *((void *)a2 + 2);
  *(void *)(this + 24) = v11;
  *((void *)a2 + 2) = v9;
  *((void *)a2 + 3) = v10;
  uint64_t v12 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v12;
  return this;
}

uint64_t sirinluinternalmention_detector::MentionDetectorRequest::MentionDetectorRequest(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 32) = 0u;
  uint64_t v4 = (uint64_t *)(a1 + 32);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F232D6F8;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a2 + 72) = 0;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  uint64_t v6 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v5;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  uint64_t v8 = *v4;
  *uint64_t v4 = v7;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  uint64_t v10 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v9;
  if (v10) {
    std::default_delete<std::string>::operator()[abi:ne180100](v10);
  }
  uint64_t v11 = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = 0;
  uint64_t v12 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = v11;
  if (v12) {
    std::default_delete<std::string>::operator()[abi:ne180100](v12);
  }
  uint64_t v13 = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = 0;
  uint64_t v14 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v13;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  uint64_t v15 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  uint64_t v16 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v15;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v17 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v18 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v17;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  return a1;
}

uint64_t sirinluinternalmention_detector::MentionDetectorRequest::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sirinluinternalmention_detector::MentionDetectorRequest::MentionDetectorRequest((uint64_t)&v11, a2);
    long long v3 = v15;
    long long v4 = *(_OWORD *)(a1 + 32);
    long long v5 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(a1 + 32) = v14;
    *(_OWORD *)(a1 + 48) = v3;
    int v6 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v17;
    int v17 = v6;
    uint64_t v7 = *(void *)(a1 + 64);
    *(void *)(a1 + 64) = v16;
    uint64_t v16 = v7;
    long long v14 = v4;
    long long v15 = v5;
    uint64_t v8 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v13;
    uint64_t v13 = v8;
    long long v9 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v12;
    long long v12 = v9;
    sirinluinternalmention_detector::MentionDetectorRequest::~MentionDetectorRequest((sirinluinternalmention_detector::MentionDetectorRequest *)&v11);
  }
  return a1;
}

BOOL sirinluinternalmention_detector::MentionDetectorRequest::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a2 + 40);
  if (v4)
  {
    if (!v5 || !sirinluexternal::UUID::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a2 + 32);
  if (v6)
  {
    if (!v7 || !sirinluexternal::UUID::operator==(v6, v7)) {
      return 0;
    }
  }
  else if (v7)
  {
    return 0;
  }
  uint64_t v8 = *(unsigned __int8 **)(a1 + 48);
  long long v9 = *(unsigned __int8 ***)(a2 + 48);
  if (v8)
  {
    if (!v9) {
      return 0;
    }
    uint64_t v10 = v8[23];
    if ((v10 & 0x80u) == 0) {
      uint64_t v11 = (unsigned __int8 *)v8[23];
    }
    else {
      uint64_t v11 = (unsigned __int8 *)*((void *)v8 + 1);
    }
    long long v12 = (unsigned __int8 *)*((unsigned __int8 *)v9 + 23);
    int v13 = (char)v12;
    if ((char)v12 < 0) {
      long long v12 = v9[1];
    }
    if (v11 != v12) {
      return 0;
    }
    if (v13 >= 0) {
      long long v14 = *(unsigned __int8 **)(a2 + 48);
    }
    else {
      long long v14 = *v9;
    }
    if ((v10 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v8, v14, *((void *)v8 + 1))) {
        return 0;
      }
    }
    else if (v8[23])
    {
      while (*v8 == *v14)
      {
        ++v8;
        ++v14;
        if (!--v10) {
          goto LABEL_28;
        }
      }
      return 0;
    }
  }
  else if (v9)
  {
    return 0;
  }
LABEL_28:
  long long v15 = *(unsigned __int8 **)(a1 + 64);
  uint64_t v16 = *(unsigned __int8 **)(a2 + 64);
  if (v15)
  {
    if (!v16 || !std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(v15, v16)) {
      return 0;
    }
  }
  else if (v16)
  {
    return 0;
  }
  int v17 = *(void **)(a1 + 56);
  uint64_t v18 = *(void **)(a2 + 56);
  if (v17)
  {
    if (!v18 || !sirinluinternal::TokenChain::operator==(v17, v18)) {
      return 0;
    }
  }
  else if (v18)
  {
    return 0;
  }
  uint64_t v19 = *(void *)(a1 + 16);
  uint64_t v20 = *(void *)(a2 + 16);
  if (!v19)
  {
    if (!v20) {
      goto LABEL_45;
    }
    return 0;
  }
  if (!v20 || !sirinluinternal::NLv4EmbeddingTensor::operator==(v19, v20)) {
    return 0;
  }
LABEL_45:
  if (*(unsigned char *)(a1 + 72))
  {
    if ((*(unsigned char *)(a2 + 72) & 1) == 0 || *(void *)(a1 + 24) != *(void *)(a2 + 24)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 72))
  {
    return 0;
  }
  uint64_t v21 = *(void *)(a1 + 8);
  uint64_t v22 = *(void *)(a2 + 8);
  BOOL result = (v21 | v22) == 0;
  if (v21 && v22)
  {
    uint64_t v24 = *(void *)(a1 + 8);
    return sirinluexternal::RequestID::operator==(v24, v22);
  }
  return result;
}

unint64_t sirinluinternalmention_detector::MentionDetectorRequest::hash_value(sirinluinternalmention_detector::MentionDetectorRequest *this)
{
  uint64_t v2 = *((void *)this + 5);
  if (!v2)
  {
    uint64_t v6 = 0;
    goto LABEL_11;
  }
  if ((*(unsigned char *)(v2 + 28) & 1) == 0)
  {
    uint64_t v3 = 0;
    if ((*(unsigned char *)(v2 + 28) & 2) != 0) {
      goto LABEL_4;
    }
LABEL_8:
    uint64_t v4 = 0;
    if ((*(unsigned char *)(v2 + 28) & 4) != 0) {
      goto LABEL_5;
    }
LABEL_9:
    uint64_t v5 = 0;
    goto LABEL_10;
  }
  uint64_t v3 = *(void *)(v2 + 8);
  if ((*(unsigned char *)(v2 + 28) & 2) == 0) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v4 = *(void *)(v2 + 16);
  if ((*(unsigned char *)(v2 + 28) & 4) == 0) {
    goto LABEL_9;
  }
LABEL_5:
  uint64_t v5 = *(int *)(v2 + 24);
LABEL_10:
  uint64_t v6 = v4 ^ v3 ^ v5;
LABEL_11:
  uint64_t v7 = *((void *)this + 4);
  if (!v7)
  {
    uint64_t v11 = 0;
    goto LABEL_21;
  }
  if ((*(unsigned char *)(v7 + 28) & 1) == 0)
  {
    uint64_t v8 = 0;
    if ((*(unsigned char *)(v7 + 28) & 2) != 0) {
      goto LABEL_14;
    }
LABEL_18:
    uint64_t v9 = 0;
    if ((*(unsigned char *)(v7 + 28) & 4) != 0) {
      goto LABEL_15;
    }
LABEL_19:
    uint64_t v10 = 0;
    goto LABEL_20;
  }
  uint64_t v8 = *(void *)(v7 + 8);
  if ((*(unsigned char *)(v7 + 28) & 2) == 0) {
    goto LABEL_18;
  }
LABEL_14:
  uint64_t v9 = *(void *)(v7 + 16);
  if ((*(unsigned char *)(v7 + 28) & 4) == 0) {
    goto LABEL_19;
  }
LABEL_15:
  uint64_t v10 = *(int *)(v7 + 24);
LABEL_20:
  uint64_t v11 = v9 ^ v8 ^ v10;
LABEL_21:
  uint64_t v12 = *((void *)this + 6);
  if (v12) {
    unint64_t v13 = std::__string_hash<char>::operator()[abi:ne180100](v12);
  }
  else {
    unint64_t v13 = 0;
  }
  uint64_t v14 = *((void *)this + 8);
  if (v14) {
    unint64_t v15 = std::__string_hash<char>::operator()[abi:ne180100](v14);
  }
  else {
    unint64_t v15 = 0;
  }
  uint64_t v16 = (sirinluinternal::TokenChain *)*((void *)this + 7);
  if (v16) {
    unint64_t v17 = sirinluinternal::TokenChain::hash_value(v16);
  }
  else {
    unint64_t v17 = 0;
  }
  uint64_t v18 = (sirinluinternal::NLv4EmbeddingTensor *)*((void *)this + 2);
  if (v18) {
    unint64_t v19 = sirinluinternal::NLv4EmbeddingTensor::hash_value(v18);
  }
  else {
    unint64_t v19 = 0;
  }
  if (*((unsigned char *)this + 72)) {
    uint64_t v20 = *((void *)this + 3);
  }
  else {
    uint64_t v20 = 0;
  }
  unint64_t v21 = *((void *)this + 1);
  if (v21) {
    unint64_t v21 = sirinluexternal::RequestID::hash_value((sirinluexternal::RequestID *)v21);
  }
  return v11 ^ v6 ^ v13 ^ v15 ^ v17 ^ v19 ^ v20 ^ v21;
}

uint64_t sirinluinternalmention_detector::MentionDetectorRequest::makeRequestId(uint64_t this)
{
  if (!*(void *)(this + 40)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternalmention_detector::MentionDetectorRequest::makeNluRequestId(uint64_t this)
{
  if (!*(void *)(this + 32)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternalmention_detector::MentionDetectorRequest::makeTokenChain(uint64_t this)
{
  if (!*(void *)(this + 56)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternalmention_detector::MentionDetectorRequest::makeEmbeddingTensor(uint64_t this)
{
  if (!*(void *)(this + 16)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternalmention_detector::MentionDetectorRequest::makeCdmRequestId(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t siricommon::StringValue::formatText(siricommon::StringValue *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((void *)this + 1)) {
    PB::TextFormatter::format();
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t siricommon::StringValue::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(void *)(this + 8)) {
    return PB::Writer::write();
  }
  return this;
}

uint64_t siricommon::StringValue::readFrom(siricommon::StringValue *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void siricommon::StringValue::~StringValue(siricommon::StringValue *this)
{
  siricommon::StringValue::~StringValue(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t vars8;

  unint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1F232D748;
  *((void *)this + 1) = 0;
  if (v2) {
    std::default_delete<std::string>::operator()[abi:ne180100](v2);
  }
  PB::Base::~Base(this);
}

void *siricommon::StringValue::StringValue(void *this)
{
  *this = &unk_1F232D748;
  this[1] = 0;
  return this;
}

{
  *this = &unk_1F232D748;
  this[1] = 0;
  return this;
}

void *siricommon::StringValue::StringValue(void *this, const siricommon::StringValue *a2)
{
  *this = &unk_1F232D748;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const siricommon::StringValue *siricommon::StringValue::operator=(const siricommon::StringValue *a1, const siricommon::StringValue *a2)
{
  if (a1 != a2)
  {
    siricommon::StringValue::StringValue(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    siricommon::StringValue::~StringValue((siricommon::StringValue *)&v5);
  }
  return a1;
}

uint64_t siricommon::swap(uint64_t this, siricommon::StringValue *a2, siricommon::StringValue *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *siricommon::StringValue::StringValue(void *a1, uint64_t a2)
{
  *a1 = &unk_1F232D748;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    std::default_delete<std::string>::operator()[abi:ne180100](v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_1F232D748;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    std::default_delete<std::string>::operator()[abi:ne180100](v4);
  }
  return a1;
}

uint64_t siricommon::StringValue::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = &unk_1F232D748;
    v6[1] = v4;
    siricommon::StringValue::~StringValue((siricommon::StringValue *)v6);
  }
  return a1;
}

uint64_t siricommon::StringValue::operator==(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned __int8 **)(a1 + 8);
  uint64_t v3 = *(unsigned __int8 ***)(a2 + 8);
  uint64_t result = v3 == 0;
  if (!v2) {
    return result;
  }
  if (!v3) {
    return 0;
  }
  uint64_t v5 = v2[23];
  if ((v5 & 0x80u) == 0) {
    uint64_t v6 = (unsigned __int8 *)v2[23];
  }
  else {
    uint64_t v6 = (unsigned __int8 *)*((void *)v2 + 1);
  }
  uint64_t v7 = (unsigned __int8 *)*((unsigned __int8 *)v3 + 23);
  int v8 = (char)v7;
  if ((char)v7 < 0) {
    uint64_t v7 = v3[1];
  }
  if (v6 != v7) {
    return 0;
  }
  if (v8 >= 0) {
    unsigned int v9 = *(unsigned __int8 **)(a2 + 8);
  }
  else {
    unsigned int v9 = *v3;
  }
  if ((v5 & 0x80) != 0) {
    return !memcmp(*(const void **)v2, v9, *((void *)v2 + 1));
  }
  if (!v2[23]) {
    return 1;
  }
  uint64_t v10 = v5 - 1;
  do
  {
    int v12 = *v2++;
    int v11 = v12;
    int v14 = *v9++;
    int v13 = v14;
    BOOL v16 = v10-- != 0;
    uint64_t result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

unint64_t siricommon::StringValue::hash_value(siricommon::StringValue *this)
{
  unint64_t result = *((void *)this + 1);
  if (result) {
    return std::__string_hash<char>::operator()[abi:ne180100](result);
  }
  return result;
}

uint64_t sirinluexternal::UserWantedToProceed::formatText(sirinluexternal::UserWantedToProceed *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "reference");
  }
  uint64_t v6 = *((void *)this + 2);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, a2, "task_id");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluexternal::UserWantedToProceed::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *(const PB::Base **)(this + 16);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  uint64_t v5 = *(const PB::Base **)(v3 + 8);
  if (v5)
  {
    return PB::Writer::writeSubmessage(a2, v5);
  }
  return this;
}

uint64_t sirinluexternal::UserWantedToProceed::readFrom(sirinluexternal::UserWantedToProceed *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_24;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 2) {
        operator new();
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_24:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_24;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluexternal::UserWantedToProceed::~UserWantedToProceed(sirinluexternal::UserWantedToProceed *this)
{
  sirinluexternal::UserWantedToProceed::~UserWantedToProceed(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1F232D798;
  unint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  PB::Base::~Base(this);
}

void *sirinluexternal::UserWantedToProceed::UserWantedToProceed(void *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1F232D798;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1F232D798;
  return this;
}

void *sirinluexternal::UserWantedToProceed::UserWantedToProceed(void *this, const sirinluexternal::UserWantedToProceed *a2)
{
  *this = &unk_1F232D798;
  this[1] = 0;
  this[2] = 0;
  if (*((void *)a2 + 2)) {
    operator new();
  }
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternal::UserWantedToProceed::operator=(uint64_t a1, const sirinluexternal::UserWantedToProceed *a2)
{
  if ((const sirinluexternal::UserWantedToProceed *)a1 != a2)
  {
    sirinluexternal::UserWantedToProceed::UserWantedToProceed(&v5, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    long long v6 = v3;
    sirinluexternal::UserWantedToProceed::~UserWantedToProceed((sirinluexternal::UserWantedToProceed *)&v5);
  }
  return a1;
}

uint64_t sirinluexternal::swap(uint64_t this, sirinluexternal::UserWantedToProceed *a2, sirinluexternal::UserWantedToProceed *a3)
{
  uint64_t v3 = *(void *)(this + 16);
  *(void *)(this + 16) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v3;
  uint64_t v4 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  return this;
}

void *sirinluexternal::UserWantedToProceed::UserWantedToProceed(void *a1, uint64_t a2)
{
  a1[1] = 0;
  uint64_t v4 = a1 + 1;
  *a1 = &unk_1F232D798;
  a1[2] = 0;
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  uint64_t v6 = a1[2];
  a1[2] = v5;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v8 = *v4;
  *uint64_t v4 = v7;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  return a1;
}

uint64_t sirinluexternal::UserWantedToProceed::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sirinluexternal::UserWantedToProceed::UserWantedToProceed(&v5, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    long long v6 = v3;
    sirinluexternal::UserWantedToProceed::~UserWantedToProceed((sirinluexternal::UserWantedToProceed *)&v5);
  }
  return a1;
}

uint64_t sirinluexternal::UserWantedToProceed::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a2 + 16);
  if (v4)
  {
    if (v5 && sirinluexternal::UUID::operator==(v4, v5)) {
      goto LABEL_4;
    }
    return 0;
  }
  if (v5) {
    return 0;
  }
LABEL_4:
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = *(void *)(a2 + 8);
  uint64_t result = (v6 | v7) == 0;
  if (v6) {
    BOOL v9 = v7 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    unint64_t v10 = *(void **)(a1 + 8);
    return sirinluexternal::UsoGraph::operator==(v10, (void *)v7);
  }
  return result;
}

unint64_t sirinluexternal::UserWantedToProceed::hash_value(sirinluexternal::UserWantedToProceed *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (!v1)
  {
    uint64_t v5 = 0;
    goto LABEL_11;
  }
  if ((*(unsigned char *)(v1 + 28) & 1) == 0)
  {
    uint64_t v2 = 0;
    if ((*(unsigned char *)(v1 + 28) & 2) != 0) {
      goto LABEL_4;
    }
LABEL_8:
    uint64_t v3 = 0;
    if ((*(unsigned char *)(v1 + 28) & 4) != 0) {
      goto LABEL_5;
    }
LABEL_9:
    uint64_t v4 = 0;
    goto LABEL_10;
  }
  uint64_t v2 = *(void *)(v1 + 8);
  if ((*(unsigned char *)(v1 + 28) & 2) == 0) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v3 = *(void *)(v1 + 16);
  if ((*(unsigned char *)(v1 + 28) & 4) == 0) {
    goto LABEL_9;
  }
LABEL_5:
  uint64_t v4 = *(int *)(v1 + 24);
LABEL_10:
  uint64_t v5 = v3 ^ v2 ^ v4;
LABEL_11:
  unint64_t v6 = *((void *)this + 1);
  if (v6) {
    unint64_t v6 = sirinluexternal::UsoGraph::hash_value((sirinluexternal::UsoGraph *)v6);
  }
  return v6 ^ v5;
}

uint64_t sirinluexternal::UserWantedToProceed::makeTaskId(uint64_t this)
{
  if (!*(void *)(this + 16)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternal::UserWantedToProceed::makeReference(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternal::UserAccepted::formatText(sirinluexternal::UserAccepted *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "offer_id");
  }
  uint64_t v6 = *((void *)this + 2);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, a2, "reference");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluexternal::UserAccepted::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *(const PB::Base **)(this + 8);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  uint64_t v5 = *(const PB::Base **)(v3 + 16);
  if (v5)
  {
    return PB::Writer::writeSubmessage(a2, v5);
  }
  return this;
}

uint64_t sirinluexternal::UserAccepted::readFrom(sirinluexternal::UserAccepted *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_24;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 2) {
        operator new();
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_24:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_24;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluexternal::UserAccepted::~UserAccepted(sirinluexternal::UserAccepted *this)
{
  sirinluexternal::UserAccepted::~UserAccepted(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1F232D7E8;
  unint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  PB::Base::~Base(this);
}

void *sirinluexternal::UserAccepted::UserAccepted(void *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1F232D7E8;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1F232D7E8;
  return this;
}

void *sirinluexternal::UserAccepted::UserAccepted(void *this, const sirinluexternal::UserAccepted *a2)
{
  *this = &unk_1F232D7E8;
  this[1] = 0;
  this[2] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  if (*((void *)a2 + 2)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternal::UserAccepted::operator=(uint64_t a1, const sirinluexternal::UserAccepted *a2)
{
  if ((const sirinluexternal::UserAccepted *)a1 != a2)
  {
    sirinluexternal::UserAccepted::UserAccepted(&v5, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    long long v6 = v3;
    sirinluexternal::UserAccepted::~UserAccepted((sirinluexternal::UserAccepted *)&v5);
  }
  return a1;
}

uint64_t sirinluexternal::swap(uint64_t this, sirinluexternal::UserAccepted *a2, sirinluexternal::UserAccepted *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  uint64_t v4 = *(void *)(this + 16);
  *(void *)(this + 16) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  return this;
}

void *sirinluexternal::UserAccepted::UserAccepted(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F232D7E8;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v5 = a1[1];
  a1[1] = v4;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  uint64_t v7 = a1[2];
  a1[2] = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  return a1;
}

uint64_t sirinluexternal::UserAccepted::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sirinluexternal::UserAccepted::UserAccepted(&v5, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    long long v6 = v3;
    sirinluexternal::UserAccepted::~UserAccepted((sirinluexternal::UserAccepted *)&v5);
  }
  return a1;
}

uint64_t sirinluexternal::UserAccepted::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v4)
  {
    if (v5 && sirinluexternal::UUID::operator==(v4, v5)) {
      goto LABEL_4;
    }
    return 0;
  }
  if (v5) {
    return 0;
  }
LABEL_4:
  uint64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = *(void *)(a2 + 16);
  uint64_t result = (v6 | v7) == 0;
  if (v6) {
    BOOL v9 = v7 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    unint64_t v10 = *(void **)(a1 + 16);
    return sirinluexternal::UsoGraph::operator==(v10, (void *)v7);
  }
  return result;
}

unint64_t sirinluexternal::UserAccepted::hash_value(sirinluexternal::UserAccepted *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (!v1)
  {
    uint64_t v5 = 0;
    goto LABEL_11;
  }
  if ((*(unsigned char *)(v1 + 28) & 1) == 0)
  {
    uint64_t v2 = 0;
    if ((*(unsigned char *)(v1 + 28) & 2) != 0) {
      goto LABEL_4;
    }
LABEL_8:
    uint64_t v3 = 0;
    if ((*(unsigned char *)(v1 + 28) & 4) != 0) {
      goto LABEL_5;
    }
LABEL_9:
    uint64_t v4 = 0;
    goto LABEL_10;
  }
  uint64_t v2 = *(void *)(v1 + 8);
  if ((*(unsigned char *)(v1 + 28) & 2) == 0) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v3 = *(void *)(v1 + 16);
  if ((*(unsigned char *)(v1 + 28) & 4) == 0) {
    goto LABEL_9;
  }
LABEL_5:
  uint64_t v4 = *(int *)(v1 + 24);
LABEL_10:
  uint64_t v5 = v3 ^ v2 ^ v4;
LABEL_11:
  unint64_t v6 = *((void *)this + 2);
  if (v6) {
    unint64_t v6 = sirinluexternal::UsoGraph::hash_value((sirinluexternal::UsoGraph *)v6);
  }
  return v6 ^ v5;
}

uint64_t sirinluexternal::UserAccepted::makeOfferId(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternal::UserAccepted::makeReference(uint64_t this)
{
  if (!*(void *)(this + 16)) {
    operator new();
  }
  return this;
}

BOOL SIRINLUINTERNALCATICATIRequestReadFrom(id *a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  unint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = objc_alloc_init(SIRINLUINTERNALNLv4EmbeddingTensor);
        objc_storeStrong(a1 + 1, v17);
        if (PBReaderPlaceMark()
          && (SIRINLUINTERNALNLv4EmbeddingTensorReadFrom((uint64_t)v17, a2) & 1) != 0)
        {
          goto LABEL_32;
        }
        goto LABEL_37;
      case 2u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 3;
        goto LABEL_26;
      case 3u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 2;
LABEL_26:
        char v17 = (SIRINLUINTERNALNLv4EmbeddingTensor *)a1[v19];
        a1[v19] = (id)v18;
        goto LABEL_33;
      case 4u:
        char v17 = objc_alloc_init(SIRINLUEXTERNALUUID);
        objc_storeStrong(a1 + 4, v17);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_37;
        }
        goto LABEL_32;
      case 5u:
        char v17 = objc_alloc_init(SIRINLUEXTERNALTurnInput);
        objc_storeStrong(a1 + 5, v17);
        if PBReaderPlaceMark() && (SIRINLUEXTERNALTurnInputReadFrom((uint64_t)v17, a2))
        {
LABEL_32:
          PBReaderRecallMark();
LABEL_33:

LABEL_34:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_37:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_34;
    }
  }
}

uint64_t sirinluinternal::SiriVocabularySpanData::formatText(sirinluinternal::SiriVocabularySpanData *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 28);
  if (v5)
  {
    PB::TextFormatter::format(a2, "match_score", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 28);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*((unsigned char *)this + 28) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "prior_ordinality");
  if ((*((unsigned char *)this + 28) & 2) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(a2, "prior_score", *((double *)this + 2));
LABEL_5:
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluinternal::SiriVocabularySpanData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 28);
  if ((v4 & 4) == 0)
  {
    if ((*(unsigned char *)(this + 28) & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    this = PB::Writer::write(a2, *(double *)(v3 + 16));
    if ((*(unsigned char *)(v3 + 28) & 1) == 0) {
      return this;
    }
    goto LABEL_7;
  }
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 28);
  if ((v4 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v4 & 1) == 0) {
    return this;
  }
LABEL_7:
  double v5 = *(double *)(v3 + 8);
  return PB::Writer::write(a2, v5);
}

uint64_t sirinluinternal::SiriVocabularySpanData::readFrom(sirinluinternal::SiriVocabularySpanData *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  for (int i = *((unsigned __int8 *)a2 + 24); v2 < v3 && i == 0; int i = *((unsigned __int8 *)a2 + 24))
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      while (v3 != v2)
      {
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_20;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
        if (v14) {
          goto LABEL_31;
        }
      }
      int i = 1;
      *((unsigned char *)a2 + 24) = 1;
      return i == 0;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_31;
      }
    }
LABEL_20:
    if ((v11 & 7) == 4)
    {
      int i = 0;
      return i == 0;
    }
    unint64_t v19 = v11 >> 3;
    if ((v11 >> 3) == 3)
    {
      *((unsigned char *)this + 28) |= 1u;
      unint64_t v2 = *((void *)a2 + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
      {
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
LABEL_47:
        unint64_t v2 = *((void *)a2 + 1) + 8;
        *((void *)a2 + 1) = v2;
        goto LABEL_53;
      }
    }
    else
    {
      if (v19 != 2)
      {
        if (v19 == 1)
        {
          *((unsigned char *)this + 28) |= 4u;
          unint64_t v20 = *((void *)a2 + 1);
          unint64_t v2 = *((void *)a2 + 2);
          uint64_t v21 = *(void *)a2;
          if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
          {
            char v27 = 0;
            unsigned int v28 = 0;
            uint64_t v24 = 0;
            if (v2 <= v20) {
              unint64_t v2 = *((void *)a2 + 1);
            }
            while (1)
            {
              if (v2 == v20)
              {
                LODWORD(v24) = 0;
                *((unsigned char *)a2 + 24) = 1;
                goto LABEL_52;
              }
              unint64_t v29 = v20 + 1;
              char v30 = *(unsigned char *)(v21 + v20);
              *((void *)a2 + 1) = v29;
              v24 |= (unint64_t)(v30 & 0x7F) << v27;
              if ((v30 & 0x80) == 0) {
                break;
              }
              v27 += 7;
              unint64_t v20 = v29;
              BOOL v14 = v28++ > 8;
              if (v14)
              {
                LODWORD(v24) = 0;
                goto LABEL_51;
              }
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v24) = 0;
            }
LABEL_51:
            unint64_t v2 = v29;
          }
          else
          {
            char v22 = 0;
            unsigned int v23 = 0;
            uint64_t v24 = 0;
            while (1)
            {
              unint64_t v2 = v20 + 1;
              *((void *)a2 + 1) = v20 + 1;
              char v25 = *(unsigned char *)(v21 + v20);
              v24 |= (unint64_t)(v25 & 0x7F) << v22;
              if ((v25 & 0x80) == 0) {
                break;
              }
              v22 += 7;
              unint64_t v20 = v2;
              BOOL v14 = v23++ > 8;
              if (v14)
              {
                LODWORD(v24) = 0;
                break;
              }
            }
          }
LABEL_52:
          *((_DWORD *)this + 6) = v24;
        }
        else
        {
LABEL_31:
          uint64_t result = PB::Reader::skip(a2);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
        }
        goto LABEL_53;
      }
      *((unsigned char *)this + 28) |= 2u;
      unint64_t v2 = *((void *)a2 + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
      {
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        goto LABEL_47;
      }
    }
    *((unsigned char *)a2 + 24) = 1;
LABEL_53:
    unint64_t v3 = *((void *)a2 + 2);
  }
  return i == 0;
}

void sirinluinternal::SiriVocabularySpanData::~SiriVocabularySpanData(sirinluinternal::SiriVocabularySpanData *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x1CB772580);
}

uint64_t sirinluinternal::SiriVocabularySpanData::SiriVocabularySpanData(uint64_t this)
{
  *(void *)this = &unk_1F232D838;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(void *)this = &unk_1F232D838;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

double sirinluinternal::SiriVocabularySpanData::SiriVocabularySpanData(sirinluinternal::SiriVocabularySpanData *this, const sirinluinternal::SiriVocabularySpanData *a2)
{
  *(void *)this = &unk_1F232D838;
  *((_DWORD *)this + 7) = 0;
  char v2 = *((unsigned char *)a2 + 28);
  if ((v2 & 4) != 0)
  {
    int v4 = *((_DWORD *)a2 + 6);
    char v3 = 4;
    *((unsigned char *)this + 28) = 4;
    *((_DWORD *)this + 6) = v4;
    char v2 = *((unsigned char *)a2 + 28);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 28) & 2) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 2);
    v3 |= 2u;
    *((unsigned char *)this + 28) = v3;
    *((double *)this + 2) = result;
    char v2 = *((unsigned char *)a2 + 28);
  }
LABEL_6:
  if (v2)
  {
    double result = *((double *)a2 + 1);
    *((unsigned char *)this + 28) = v3 | 1;
    *((double *)this + 1) = result;
  }
  return result;
}

uint64_t sirinluinternal::SiriVocabularySpanData::operator=(uint64_t a1, const sirinluinternal::SiriVocabularySpanData *a2)
{
  if ((const sirinluinternal::SiriVocabularySpanData *)a1 != a2)
  {
    sirinluinternal::SiriVocabularySpanData::SiriVocabularySpanData((sirinluinternal::SiriVocabularySpanData *)&v6, a2);
    uint64_t v3 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v8;
    uint64_t v8 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v4;
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

double sirinluinternal::swap(sirinluinternal *this, sirinluinternal::SiriVocabularySpanData *a2, sirinluinternal::SiriVocabularySpanData *a3)
{
  int v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  int v4 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double sirinluinternal::SiriVocabularySpanData::SiriVocabularySpanData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F232D838;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(void *)a1 = &unk_1F232D838;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t sirinluinternal::SiriVocabularySpanData::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v7 = &unk_1F232D838;
    long long v3 = *(_OWORD *)(a2 + 8);
    uint64_t v4 = *(void *)(a2 + 24);
    *(_DWORD *)(a2 + 28) = 0;
    uint64_t v9 = *(void *)(a1 + 24);
    long long v5 = *(_OWORD *)(a1 + 8);
    *(void *)(a1 + 24) = v4;
    *(_OWORD *)(a1 + 8) = v3;
    long long v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

BOOL sirinluinternal::SiriVocabularySpanData::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 28) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 4) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 28) & 1) == 0;
  if (*(unsigned char *)(a1 + 28)) {
    return (*(unsigned char *)(a2 + 28) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  }
  return v2;
}

uint64_t sirinluinternal::SiriVocabularySpanData::hash_value(sirinluinternal::SiriVocabularySpanData *this)
{
  if ((*((unsigned char *)this + 28) & 4) != 0)
  {
    uint64_t v1 = *((unsigned int *)this + 6);
    if ((*((unsigned char *)this + 28) & 2) != 0)
    {
LABEL_3:
      double v2 = *((double *)this + 2);
      if (v2 == 0.0) {
        double v2 = 0.0;
      }
      if (*((unsigned char *)this + 28)) {
        goto LABEL_6;
      }
LABEL_11:
      double v3 = 0.0;
      return *(void *)&v2 ^ v1 ^ *(void *)&v3;
    }
  }
  else
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 28) & 2) != 0) {
      goto LABEL_3;
    }
  }
  double v2 = 0.0;
  if ((*((unsigned char *)this + 28) & 1) == 0) {
    goto LABEL_11;
  }
LABEL_6:
  double v3 = *((double *)this + 1);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  return *(void *)&v2 ^ v1 ^ *(void *)&v3;
}

BOOL SIRINLUEXTERNALTurnContextReadFrom(uint64_t a1, uint64_t a2)
{
  double v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  long long v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    long long v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        unint64_t v17 = objc_alloc_init(SIRINLUEXTERNALNLContext);
        objc_storeStrong((id *)(a1 + 16), v17);
        if (!PBReaderPlaceMark() || !SIRINLUEXTERNALNLContextReadFrom((id *)&v17->super.super.isa, a2)) {
          goto LABEL_30;
        }
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_27:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    unint64_t v17 = objc_alloc_init(SIRINLUEXTERNALLegacyNLContext);
    objc_storeStrong((id *)(a1 + 8), v17);
    if (!PBReaderPlaceMark() || (SIRINLUEXTERNALLegacyNLContextReadFrom((uint64_t)v17, a2) & 1) == 0)
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sirinluexternal::DelegatedUserDialogAct::formatText(sirinluexternal::DelegatedUserDialogAct *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 68)) {
    PB::TextFormatter::format(a2, "asr_hypothesis_index");
  }
  if (*((void *)this + 1)) {
    PB::TextFormatter::format();
  }
  long long v5 = (uint64_t *)*((void *)this + 2);
  uint64_t v6 = (uint64_t *)*((void *)this + 3);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "matching_spans");
  }
  uint64_t v8 = *((void *)this + 5);
  if (v8) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v8 + 32))(v8, a2, "reference_context");
  }
  uint64_t v9 = *((void *)this + 6);
  if (v9) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v9 + 32))(v9, a2, "rewrite");
  }
  uint64_t v10 = *((void *)this + 7);
  if (v10) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v10 + 32))(v10, a2, "rewritten_utterance");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluexternal::DelegatedUserDialogAct::writeTo(uint64_t this, PB::Writer *a2)
{
  double v3 = (void *)this;
  if (*(unsigned char *)(this + 68)) {
    this = PB::Writer::writeVarInt(a2);
  }
  uint64_t v4 = (const PB::Base *)v3[7];
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  if (v3[1]) {
    this = PB::Writer::write();
  }
  long long v5 = (const PB::Base **)v3[2];
  uint64_t v6 = (const PB::Base **)v3[3];
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    this = PB::Writer::writeSubmessage(a2, v7);
  }
  uint64_t v8 = (const PB::Base *)v3[6];
  if (v8) {
    this = PB::Writer::writeSubmessage(a2, v8);
  }
  uint64_t v9 = (const PB::Base *)v3[5];
  if (v9)
  {
    return PB::Writer::writeSubmessage(a2, v9);
  }
  return this;
}

uint64_t sirinluexternal::DelegatedUserDialogAct::readFrom(sirinluexternal::DelegatedUserDialogAct *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
      break;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      int v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 68) |= 1u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v21 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v20 <= 0xFFFFFFFFFFFFFFF5 && v20 + 10 <= v21)
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          do
          {
            unint64_t v26 = v20 + 1;
            *((void *)a2 + 1) = v20 + 1;
            char v27 = *(unsigned char *)(v22 + v20);
            v25 |= (unint64_t)(v27 & 0x7F) << v23;
            if ((v27 & 0x80) == 0) {
              goto LABEL_45;
            }
            v23 += 7;
            unint64_t v20 = v26;
            BOOL v14 = v24++ > 8;
          }
          while (!v14);
LABEL_41:
          LODWORD(v25) = 0;
          goto LABEL_45;
        }
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v25 = 0;
        if (v21 <= v20) {
          unint64_t v21 = *((void *)a2 + 1);
        }
        break;
      case 2u:
        operator new();
      case 3u:
        operator new();
      case 4u:
        PB::PtrVector<sirinluexternal::Span>::emplace_back<>();
      case 5u:
        operator new();
      case 6u:
        operator new();
      default:
        goto LABEL_19;
    }
    while (1)
    {
      if (v21 == v20)
      {
        LODWORD(v25) = 0;
        *((unsigned char *)a2 + 24) = 1;
        goto LABEL_45;
      }
      unint64_t v30 = v20 + 1;
      char v31 = *(unsigned char *)(v22 + v20);
      *((void *)a2 + 1) = v30;
      v25 |= (unint64_t)(v31 & 0x7F) << v28;
      if ((v31 & 0x80) == 0) {
        break;
      }
      v28 += 7;
      unint64_t v20 = v30;
      BOOL v14 = v29++ > 8;
      if (v14) {
        goto LABEL_41;
      }
    }
    if (*((unsigned char *)a2 + 24)) {
      LODWORD(v25) = 0;
    }
LABEL_45:
    *((_DWORD *)this + 16) = v25;
LABEL_46:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  char v15 = 0;
  unsigned int v16 = 0;
  unint64_t v11 = 0;
  if (v2 > v3) {
    unint64_t v3 = v2;
  }
  do
  {
    if (v3 == v2)
    {
      int v4 = 1;
      *((unsigned char *)a2 + 24) = 1;
      return v4 == 0;
    }
    unint64_t v17 = v2 + 1;
    char v18 = *(unsigned char *)(v8 + v2);
    *((void *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0) {
      goto LABEL_21;
    }
    v15 += 7;
    unint64_t v2 = v17;
    BOOL v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  uint64_t result = PB::Reader::skip(a2);
  if (result) {
    goto LABEL_46;
  }
  return result;
}

void sirinluexternal::DelegatedUserDialogAct::~DelegatedUserDialogAct(sirinluexternal::DelegatedUserDialogAct *this)
{
  sirinluexternal::DelegatedUserDialogAct::~DelegatedUserDialogAct(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t vars8;

  *(void *)this = &unk_1F232D888;
  unint64_t v2 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unint64_t v3 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v6 = (void **)((char *)this + 16);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v6);
  long long v5 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v5) {
    std::default_delete<std::string>::operator()[abi:ne180100](v5);
  }
  PB::Base::~Base(this);
}

double sirinluexternal::DelegatedUserDialogAct::DelegatedUserDialogAct(sirinluexternal::DelegatedUserDialogAct *this)
{
  *(void *)this = &unk_1F232D888;
  *((_DWORD *)this + 17) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 7) = 0;
  return result;
}

{
  double result;

  *(void *)this = &unk_1F232D888;
  *((_DWORD *)this + 17) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 7) = 0;
  return result;
}

uint64_t sirinluexternal::DelegatedUserDialogAct::DelegatedUserDialogAct(uint64_t this, const sirinluexternal::DelegatedUserDialogAct *a2)
{
  *(_OWORD *)(this + 8) = 0u;
  *(void *)this = &unk_1F232D888;
  *(_DWORD *)(this + 68) = 0;
  *(_OWORD *)(this + 24) = 0u;
  *(_OWORD *)(this + 40) = 0u;
  *(void *)(this + 56) = 0;
  if (*((unsigned char *)a2 + 68))
  {
    int v2 = *((_DWORD *)a2 + 16);
    *(unsigned char *)(this + 68) = 1;
    *(_DWORD *)(this + 64) = v2;
  }
  if (*((void *)a2 + 7)) {
    operator new();
  }
  if (*((void *)a2 + 1)) {
    operator new();
  }
  if (*((void *)a2 + 2) != *((void *)a2 + 3)) {
    PB::PtrVector<sirinluexternal::Span>::emplace_back<sirinluexternal::Span const&>();
  }
  if (*((void *)a2 + 6)) {
    operator new();
  }
  if (*((void *)a2 + 5)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternal::DelegatedUserDialogAct::operator=(uint64_t a1, const sirinluexternal::DelegatedUserDialogAct *a2)
{
  if ((const sirinluexternal::DelegatedUserDialogAct *)a1 != a2)
  {
    sirinluexternal::DelegatedUserDialogAct::DelegatedUserDialogAct((uint64_t)v9, a2);
    uint64_t v3 = *(void *)(a1 + 64);
    *(void *)(a1 + 64) = v14;
    uint64_t v14 = v3;
    uint64_t v4 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = v13;
    uint64_t v13 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    long long v10 = v5;
    long long v11 = v6;
    long long v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    long long v12 = v7;
    sirinluexternal::DelegatedUserDialogAct::~DelegatedUserDialogAct((sirinluexternal::DelegatedUserDialogAct *)v9);
  }
  return a1;
}

uint64_t sirinluexternal::swap(uint64_t this, sirinluexternal::DelegatedUserDialogAct *a2, sirinluexternal::DelegatedUserDialogAct *a3)
{
  int v3 = *(_DWORD *)(this + 68);
  *(_DWORD *)(this + 68) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v3;
  int v4 = *(_DWORD *)(this + 64);
  *(_DWORD *)(this + 64) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v4;
  uint64_t v5 = *(void *)(this + 56);
  *(void *)(this + 56) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v5;
  uint64_t v6 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v6;
  uint64_t v7 = *(void *)(this + 16);
  *(void *)(this + 16) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v7;
  uint64_t v8 = *(void *)(this + 24);
  *(void *)(this + 24) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v8;
  uint64_t v9 = *(void *)(this + 32);
  *(void *)(this + 32) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v9;
  uint64_t v10 = *(void *)(this + 48);
  *(void *)(this + 48) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v10;
  uint64_t v11 = *(void *)(this + 40);
  *(void *)(this + 40) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v11;
  return this;
}

uint64_t sirinluexternal::DelegatedUserDialogAct::DelegatedUserDialogAct(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F232D888;
  *(_OWORD *)(a1 + 8) = 0u;
  int v4 = (uint64_t *)(a1 + 8);
  uint64_t v5 = (void **)(a1 + 16);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a2 + 68) = 0;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = 0;
  uint64_t v7 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v9 = *v4;
  *int v4 = v8;
  if (v9) {
    std::default_delete<std::string>::operator()[abi:ne180100](v9);
  }
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(v5);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  uint64_t v10 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  uint64_t v11 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v10;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  uint64_t v13 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v12;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  return a1;
}

uint64_t sirinluexternal::DelegatedUserDialogAct::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sirinluexternal::DelegatedUserDialogAct::DelegatedUserDialogAct((uint64_t)v9, a2);
    uint64_t v3 = *(void *)(a1 + 64);
    *(void *)(a1 + 64) = v14;
    uint64_t v14 = v3;
    uint64_t v4 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = v13;
    uint64_t v13 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    long long v10 = v5;
    long long v11 = v6;
    long long v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    long long v12 = v7;
    sirinluexternal::DelegatedUserDialogAct::~DelegatedUserDialogAct((sirinluexternal::DelegatedUserDialogAct *)v9);
  }
  return a1;
}

BOOL sirinluexternal::DelegatedUserDialogAct::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 68))
  {
    if ((*(unsigned char *)(a2 + 68) & 1) == 0 || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 68))
  {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = *(void *)(a2 + 56);
  if (v4)
  {
    if (!v5 || (siricommon::StringValue::operator==(v4, v5) & 1) == 0) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  long long v6 = *(unsigned __int8 **)(a1 + 8);
  long long v7 = *(unsigned __int8 ***)(a2 + 8);
  if (v6)
  {
    if (!v7) {
      return 0;
    }
    uint64_t v8 = v6[23];
    if ((v8 & 0x80u) == 0) {
      uint64_t v9 = (unsigned __int8 *)v6[23];
    }
    else {
      uint64_t v9 = (unsigned __int8 *)*((void *)v6 + 1);
    }
    long long v10 = (unsigned __int8 *)*((unsigned __int8 *)v7 + 23);
    int v11 = (char)v10;
    if ((char)v10 < 0) {
      long long v10 = v7[1];
    }
    if (v9 != v10) {
      return 0;
    }
    if (v11 >= 0) {
      long long v12 = *(unsigned __int8 **)(a2 + 8);
    }
    else {
      long long v12 = *v7;
    }
    if ((v8 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v6, v12, *((void *)v6 + 1))) {
        return 0;
      }
    }
    else if (v6[23])
    {
      while (*v6 == *v12)
      {
        ++v6;
        ++v12;
        if (!--v8) {
          goto LABEL_31;
        }
      }
      return 0;
    }
  }
  else if (v7)
  {
    return 0;
  }
LABEL_31:
  BOOL result = PB::PtrVector<sirinluexternal::Span>::operator==((uint64_t *)(a1 + 16), *(uint64_t **)(a2 + 16), *(void *)(a2 + 24));
  if (!result) {
    return result;
  }
  uint64_t v14 = *(void *)(a1 + 48);
  uint64_t v15 = *(void *)(a2 + 48);
  if (v14)
  {
    if (!v15 || (sirinluexternal::RewriteMessage::operator==(v14, v15) & 1) == 0) {
      return 0;
    }
    goto LABEL_37;
  }
  if (v15) {
    return 0;
  }
LABEL_37:
  uint64_t v16 = *(void *)(a1 + 40);
  unint64_t v17 = *(unsigned __int8 **)(a2 + 40);
  BOOL result = (v16 | (unint64_t)v17) == 0;
  if (v16 && v17)
  {
    char v18 = *(unsigned __int8 **)(a1 + 40);
    return sirinluexternal::ReferenceContext::operator==(v18, v17);
  }
  return result;
}

unint64_t sirinluexternal::DelegatedUserDialogAct::hash_value(sirinluexternal::DelegatedUserDialogAct *this)
{
  if (*((unsigned char *)this + 68)) {
    uint64_t v2 = *((unsigned int *)this + 16);
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = *((void *)this + 7);
  if (v3 && (uint64_t v4 = *(void *)(v3 + 8)) != 0) {
    unint64_t v5 = std::__string_hash<char>::operator()[abi:ne180100](v4);
  }
  else {
    unint64_t v5 = 0;
  }
  uint64_t v6 = *((void *)this + 1);
  if (v6) {
    unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100](v6);
  }
  else {
    unint64_t v7 = 0;
  }
  uint64_t v8 = (sirinluexternal::Span **)*((void *)this + 2);
  uint64_t v9 = (sirinluexternal::Span **)*((void *)this + 3);
  if (v8 == v9)
  {
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = 0;
    do
    {
      int v11 = *v8++;
      v10 ^= sirinluexternal::Span::hash_value(v11);
    }
    while (v8 != v9);
  }
  unint64_t v12 = *((void *)this + 6);
  if (v12)
  {
    if (*(unsigned char *)(v12 + 20)) {
      uint64_t v13 = *(int *)(v12 + 16);
    }
    else {
      uint64_t v13 = 0;
    }
    unint64_t v14 = *(void *)(v12 + 8);
    if (v14) {
      unint64_t v14 = std::__string_hash<char>::operator()[abi:ne180100](v14);
    }
    unint64_t v12 = v14 ^ v13;
  }
  unint64_t v15 = *((void *)this + 5);
  if (v15)
  {
    if (*(unsigned char *)(v15 + 12))
    {
      uint64_t v16 = *(unsigned __int8 *)(v15 + 8);
      if ((*(unsigned char *)(v15 + 12) & 2) != 0) {
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v16 = 0;
      if ((*(unsigned char *)(v15 + 12) & 2) != 0)
      {
LABEL_26:
        uint64_t v17 = *(unsigned __int8 *)(v15 + 9);
LABEL_29:
        unint64_t v15 = v17 ^ v16;
        return v5 ^ v2 ^ v12 ^ v15 ^ v7 ^ v10;
      }
    }
    uint64_t v17 = 0;
    goto LABEL_29;
  }
  return v5 ^ v2 ^ v12 ^ v15 ^ v7 ^ v10;
}

uint64_t sirinluexternal::DelegatedUserDialogAct::makeRewrittenUtterance(uint64_t this)
{
  if (!*(void *)(this + 56)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternal::DelegatedUserDialogAct::makeRewrite(uint64_t this)
{
  if (!*(void *)(this + 48)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternal::DelegatedUserDialogAct::makeReferenceContext(uint64_t this)
{
  if (!*(void *)(this + 40)) {
    operator new();
  }
  return this;
}

BOOL SIRINLUINTERNALAdjacentSpansReadFrom(void *a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  unint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        char v18 = (SIRINLUINTERNALSpanDataForNamedCaptureGroup *)a1[1];
        a1[1] = v17;
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_26:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v18 = objc_alloc_init(SIRINLUINTERNALSpanDataForNamedCaptureGroup);
    [a1 addSpans:v18];
    if (!PBReaderPlaceMark()
      || (SIRINLUINTERNALSpanDataForNamedCaptureGroupReadFrom((uint64_t)v18, a2) & 1) == 0)
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_24;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sirinluexternalnlu_router::NLRouterServiceRequest::formatText(sirinluexternalnlu_router::NLRouterServiceRequest *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  unint64_t v5 = (uint64_t *)*((void *)this + 1);
  uint64_t v6 = (uint64_t *)*((void *)this + 2);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "conversation_history");
  }
  if (*((void *)this + 4)) {
    PB::TextFormatter::format();
  }
  uint64_t v8 = *((void *)this + 5);
  if (v8) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v8 + 32))(v8, a2, "probing_result");
  }
  uint64_t v9 = *((void *)this + 6);
  if (v9) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v9 + 32))(v9, a2, "query_decoration_output");
  }
  if (*((void *)this + 7)) {
    PB::TextFormatter::format();
  }
  if (*((void *)this + 8)) {
    PB::TextFormatter::format();
  }
  uint64_t v10 = *((void *)this + 9);
  if (v10) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v10 + 32))(v10, a2, "turn_context");
  }
  return MEMORY[0x1F4147498](a2);
}

void *sirinluexternalnlu_router::NLRouterServiceRequest::writeTo(void *this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if (this[4]) {
    this = (void *)PB::Writer::write();
  }
  uint64_t v4 = (const PB::Base *)v3[9];
  if (v4) {
    this = (void *)PB::Writer::writeSubmessage(a2, v4);
  }
  unint64_t v5 = (const PB::Base **)v3[1];
  uint64_t v6 = (const PB::Base **)v3[2];
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    this = (void *)PB::Writer::writeSubmessage(a2, v7);
  }
  if (v3[7]) {
    this = (void *)PB::Writer::write();
  }
  if (v3[8]) {
    this = (void *)PB::Writer::write();
  }
  uint64_t v8 = (const PB::Base *)v3[5];
  if (v8) {
    this = (void *)PB::Writer::writeSubmessage(a2, v8);
  }
  uint64_t v9 = (const PB::Base *)v3[6];
  if (v9)
  {
    return (void *)PB::Writer::writeSubmessage(a2, v9);
  }
  return this;
}

uint64_t sirinluexternalnlu_router::NLRouterServiceRequest::readFrom(sirinluexternalnlu_router::NLRouterServiceRequest *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_19;
        }
      }
LABEL_21:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v10 >> 3))
      {
        case 1u:
          operator new();
        case 2u:
          operator new();
        case 3u:
          operator new();
        case 4u:
          operator new();
        case 5u:
          operator new();
        case 6u:
          operator new();
        case 7u:
          operator new();
        default:
          break;
      }
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_21;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_19;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sub_1C8B83054(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sirinluexternalnlu_router::NLRouterServiceRequest::~NLRouterServiceRequest(sirinluexternalnlu_router::NLRouterServiceRequest *this)
{
  sirinluexternalnlu_router::NLRouterServiceRequest::~NLRouterServiceRequest(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t vars8;

  *(void *)this = &unk_1F232D8D8;
  unint64_t v2 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unint64_t v3 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v3) {
    std::default_delete<std::string>::operator()[abi:ne180100](v3);
  }
  int v4 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v4) {
    std::default_delete<std::string>::operator()[abi:ne180100](v4);
  }
  unint64_t v5 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v7) {
    std::default_delete<std::string>::operator()[abi:ne180100](v7);
  }
  if (*((void *)this + 1))
  {
    std::vector<std::unique_ptr<siricommon::StringValue>>::__clear[abi:ne180100]((void *)this + 1);
    operator delete(*((void **)this + 1));
  }
  PB::Base::~Base(this);
}

double sirinluexternalnlu_router::NLRouterServiceRequest::NLRouterServiceRequest(sirinluexternalnlu_router::NLRouterServiceRequest *this)
{
  *(void *)this = &unk_1F232D8D8;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = 0;
  return result;
}

{
  double result;

  *(void *)this = &unk_1F232D8D8;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = 0;
  return result;
}

uint64_t sirinluexternalnlu_router::NLRouterServiceRequest::NLRouterServiceRequest(uint64_t this, const sirinluexternalnlu_router::NLRouterServiceRequest *a2)
{
  *(_OWORD *)(this + 8) = 0u;
  *(void *)this = &unk_1F232D8D8;
  *(_OWORD *)(this + 24) = 0u;
  *(_OWORD *)(this + 40) = 0u;
  *(_OWORD *)(this + 56) = 0u;
  *(void *)(this + 72) = 0;
  if (*((void *)a2 + 4)) {
    operator new();
  }
  if (*((void *)a2 + 9)) {
    operator new();
  }
  if (*((void *)a2 + 1) != *((void *)a2 + 2)) {
    operator new();
  }
  if (*((void *)a2 + 7)) {
    operator new();
  }
  if (*((void *)a2 + 8)) {
    operator new();
  }
  if (*((void *)a2 + 5)) {
    operator new();
  }
  if (*((void *)a2 + 6)) {
    operator new();
  }
  return this;
}

void sub_1C8B8361C(void *a1)
{
}

uint64_t sirinluexternalnlu_router::NLRouterServiceRequest::operator=(uint64_t a1, const sirinluexternalnlu_router::NLRouterServiceRequest *a2)
{
  if ((const sirinluexternalnlu_router::NLRouterServiceRequest *)a1 != a2)
  {
    sirinluexternalnlu_router::NLRouterServiceRequest::NLRouterServiceRequest((uint64_t)&v9, a2);
    uint64_t v3 = *(void *)(a1 + 72);
    *(void *)(a1 + 72) = v14;
    uint64_t v14 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v10 = v4;
    long long v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    long long v11 = v5;
    long long v6 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v13;
    long long v13 = v6;
    long long v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    long long v12 = v7;
    sirinluexternalnlu_router::NLRouterServiceRequest::~NLRouterServiceRequest((sirinluexternalnlu_router::NLRouterServiceRequest *)&v9);
  }
  return a1;
}

void *sirinluexternalnlu_router::swap(void *this, sirinluexternalnlu_router::NLRouterServiceRequest *a2, sirinluexternalnlu_router::NLRouterServiceRequest *a3)
{
  uint64_t v3 = this[4];
  this[4] = *((void *)a2 + 4);
  *((void *)a2 + 4) = v3;
  uint64_t v4 = this[9];
  this[9] = *((void *)a2 + 9);
  *((void *)a2 + 9) = v4;
  uint64_t v5 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  uint64_t v8 = this[7];
  this[7] = *((void *)a2 + 7);
  *((void *)a2 + 7) = v8;
  uint64_t v9 = this[8];
  this[8] = *((void *)a2 + 8);
  *((void *)a2 + 8) = v9;
  uint64_t v10 = this[5];
  this[5] = *((void *)a2 + 5);
  *((void *)a2 + 5) = v10;
  uint64_t v11 = this[6];
  this[6] = *((void *)a2 + 6);
  *((void *)a2 + 6) = v11;
  return this;
}

uint64_t sirinluexternalnlu_router::NLRouterServiceRequest::NLRouterServiceRequest(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F232D8D8;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v4 = (void **)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = 0;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v5;
  if (v6) {
    std::default_delete<std::string>::operator()[abi:ne180100](v6);
  }
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a2 + 72) = 0;
  uint64_t v8 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = v7;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  if (*v4)
  {
    std::vector<std::unique_ptr<siricommon::StringValue>>::__clear[abi:ne180100](v4);
    operator delete(*v4);
    *uint64_t v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  uint64_t v9 = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = 0;
  uint64_t v10 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v9;
  if (v10) {
    std::default_delete<std::string>::operator()[abi:ne180100](v10);
  }
  uint64_t v11 = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = 0;
  uint64_t v12 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = v11;
  if (v12) {
    std::default_delete<std::string>::operator()[abi:ne180100](v12);
  }
  uint64_t v13 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  uint64_t v14 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v13;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  uint64_t v15 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  uint64_t v16 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v15;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  return a1;
}

uint64_t sirinluexternalnlu_router::NLRouterServiceRequest::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sirinluexternalnlu_router::NLRouterServiceRequest::NLRouterServiceRequest((uint64_t)&v9, a2);
    uint64_t v3 = *(void *)(a1 + 72);
    *(void *)(a1 + 72) = v14;
    uint64_t v14 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v10 = v4;
    long long v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    long long v11 = v5;
    long long v6 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v13;
    long long v13 = v6;
    long long v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    long long v12 = v7;
    sirinluexternalnlu_router::NLRouterServiceRequest::~NLRouterServiceRequest((sirinluexternalnlu_router::NLRouterServiceRequest *)&v9);
  }
  return a1;
}

uint64_t sirinluexternalnlu_router::NLRouterServiceRequest::operator==(void *a1, void *a2)
{
  long long v4 = (unsigned __int8 *)a1[4];
  long long v5 = (unsigned __int8 **)a2[4];
  if (v4)
  {
    if (!v5) {
      return 0;
    }
    uint64_t v6 = v4[23];
    if ((v6 & 0x80u) == 0) {
      long long v7 = (unsigned __int8 *)v4[23];
    }
    else {
      long long v7 = (unsigned __int8 *)*((void *)v4 + 1);
    }
    uint64_t v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    int v9 = (char)v8;
    if ((char)v8 < 0) {
      uint64_t v8 = v5[1];
    }
    if (v7 != v8) {
      return 0;
    }
    if (v9 >= 0) {
      long long v10 = (unsigned __int8 *)a2[4];
    }
    else {
      long long v10 = *v5;
    }
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v10, *((void *)v4 + 1))) {
        return 0;
      }
    }
    else if (v4[23])
    {
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6) {
          goto LABEL_18;
        }
      }
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
LABEL_18:
  long long v11 = (uint64_t *)a1[9];
  uint64_t v12 = a2[9];
  if (v11)
  {
    if (!v12 || (sirinluexternalnlu_router::NLRouterTurnContext::operator==(v11, v12) & 1) == 0) {
      return 0;
    }
  }
  else if (v12)
  {
    return 0;
  }
  uint64_t v14 = (char *)a1[1];
  long long v13 = (char *)a1[2];
  uint64_t v15 = (uint64_t *)a2[1];
  if (v13 - v14 != a2[2] - (void)v15) {
    return 0;
  }
  while (v14 != v13)
  {
    uint64_t result = sirinluexternalnlu_router::RequestSummary::operator==(*(void **)v14, *v15);
    if (!result) {
      return result;
    }
    v14 += 8;
    ++v15;
  }
  char v17 = (unsigned __int8 *)a1[7];
  char v18 = (unsigned __int8 **)a2[7];
  if (v17)
  {
    if (!v18) {
      return 0;
    }
    uint64_t v19 = v17[23];
    if ((v19 & 0x80u) == 0) {
      unint64_t v20 = (unsigned __int8 *)v17[23];
    }
    else {
      unint64_t v20 = (unsigned __int8 *)*((void *)v17 + 1);
    }
    unint64_t v21 = (unsigned __int8 *)*((unsigned __int8 *)v18 + 23);
    int v22 = (char)v21;
    if ((char)v21 < 0) {
      unint64_t v21 = v18[1];
    }
    if (v20 != v21) {
      return 0;
    }
    if (v22 >= 0) {
      char v23 = (unsigned __int8 *)a2[7];
    }
    else {
      char v23 = *v18;
    }
    if ((v19 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v17, v23, *((void *)v17 + 1))) {
        return 0;
      }
    }
    else if (v17[23])
    {
      uint64_t v24 = v19 - 1;
      do
      {
        int v26 = *v17++;
        int v25 = v26;
        int v28 = *v23++;
        int v27 = v28;
        BOOL v30 = v24-- != 0;
      }
      while (v25 == v27 && v30);
      if (v25 != v27) {
        return 0;
      }
    }
  }
  else if (v18)
  {
    return 0;
  }
  char v31 = (unsigned __int8 *)a1[8];
  char v32 = (unsigned __int8 *)a2[8];
  if (v31)
  {
    if (!v32 || !std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(v31, v32)) {
      return 0;
    }
  }
  else if (v32)
  {
    return 0;
  }
  uint64_t v33 = a1[5];
  uint64_t v34 = a2[5];
  if (!v33)
  {
    if (!v34) {
      goto LABEL_64;
    }
    return 0;
  }
  if (!v34 || (sirinluexternalnlu_router::NLRouterTurnProbingResult::operator==(v33, v34) & 1) == 0) {
    return 0;
  }
LABEL_64:
  uint64_t v35 = a1[6];
  unint64_t v36 = a2[6];
  uint64_t result = (v35 | v36) == 0;
  if (v35 && v36)
  {
    uint64_t v37 = (void *)a1[6];
    return sirinluexternalnlu_router::QueryDecorationOutput::operator==(v37, (void *)v36);
  }
  return result;
}

unint64_t sirinluexternalnlu_router::NLRouterServiceRequest::hash_value(sirinluexternalnlu_router::NLRouterServiceRequest *this)
{
  uint64_t v2 = *((void *)this + 4);
  if (v2) {
    unint64_t v3 = std::__string_hash<char>::operator()[abi:ne180100](v2);
  }
  else {
    unint64_t v3 = 0;
  }
  long long v4 = (sirinluexternalnlu_router::NLRouterTurnContext *)*((void *)this + 9);
  if (v4) {
    uint64_t v5 = sirinluexternalnlu_router::NLRouterTurnContext::hash_value(v4);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = (sirinluexternalnlu_router::RequestSummary **)*((void *)this + 1);
  long long v7 = (sirinluexternalnlu_router::RequestSummary **)*((void *)this + 2);
  if (v6 == v7)
  {
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = 0;
    do
    {
      int v9 = *v6++;
      v8 ^= sirinluexternalnlu_router::RequestSummary::hash_value(v9);
    }
    while (v6 != v7);
  }
  uint64_t v10 = *((void *)this + 7);
  if (v10) {
    unint64_t v11 = std::__string_hash<char>::operator()[abi:ne180100](v10);
  }
  else {
    unint64_t v11 = 0;
  }
  uint64_t v12 = *((void *)this + 8);
  if (v12) {
    unint64_t v13 = std::__string_hash<char>::operator()[abi:ne180100](v12);
  }
  else {
    unint64_t v13 = 0;
  }
  uint64_t v14 = (sirinluexternalnlu_router::NLRouterTurnProbingResult *)*((void *)this + 5);
  if (v14) {
    unint64_t v15 = sirinluexternalnlu_router::NLRouterTurnProbingResult::hash_value(v14);
  }
  else {
    unint64_t v15 = 0;
  }
  unint64_t v16 = *((void *)this + 6);
  if (v16) {
    unint64_t v16 = sirinluexternalnlu_router::QueryDecorationOutput::hash_value((sirinluexternalnlu_router::QueryDecorationOutput *)v16);
  }
  return v5 ^ v3 ^ v13 ^ v15 ^ v16 ^ v8 ^ v11;
}

uint64_t sirinluexternalnlu_router::NLRouterServiceRequest::makeTurnContext(uint64_t this)
{
  if (!*(void *)(this + 72)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternalnlu_router::NLRouterServiceRequest::makeProbingResult(uint64_t this)
{
  if (!*(void *)(this + 40)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternalnlu_router::NLRouterServiceRequest::makeQueryDecorationOutput(uint64_t this)
{
  if (!*(void *)(this + 48)) {
    operator new();
  }
  return this;
}

BOOL SIRINLUEXTERNALCDM_PLANNERCDMPlannerRequestIdentifierReadFrom(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  long long v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    long long v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3) {
        break;
      }
      if (v17 == 2)
      {
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 16;
        goto LABEL_24;
      }
      if (v17 == 1)
      {
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 24;
LABEL_24:
        unint64_t v20 = *(void **)(a1 + v19);
        *(void *)(a1 + v19) = v18;

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_26:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v18 = PBReaderReadString();
    uint64_t v19 = 8;
    goto LABEL_24;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL SIRINLUINTERNALOverrideValueReadFrom(id *a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  long long v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  long long v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        unint64_t v17 = objc_alloc_init(SIRINLUINTERNALCCQROverrideTemplate);
        objc_storeStrong(a1 + 1, v17);
        if (PBReaderPlaceMark()
          && (SIRINLUINTERNALCCQROverrideTemplateReadFrom((uint64_t)v17, a2) & 1) != 0)
        {
          goto LABEL_32;
        }
        goto LABEL_35;
      case 2u:
        unint64_t v17 = objc_alloc_init(SIRINLUEXTERNALUserParse);
        objc_storeStrong(a1 + 4, v17);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALUserParseReadFrom((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_35;
        }
        goto LABEL_32;
      case 3u:
        unint64_t v17 = objc_alloc_init(SIRINLUINTERNALLVCOverrideValue);
        objc_storeStrong(a1 + 2, v17);
        if (!PBReaderPlaceMark() || (SIRINLUINTERNALLVCOverrideValueReadFrom((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_35;
        }
        goto LABEL_32;
      case 4u:
        unint64_t v17 = objc_alloc_init(SIRINLUINTERNALPlanOverrideValue);
        objc_storeStrong(a1 + 3, v17);
        if PBReaderPlaceMark() && (SIRINLUINTERNALPlanOverrideValueReadFrom((uint64_t)v17, a2))
        {
LABEL_32:
          PBReaderRecallMark();

LABEL_33:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_35:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_33;
    }
  }
}

uint64_t sirinluexternalsubword_embedding::SubwordEmbeddingResponse::formatText(sirinluexternalsubword_embedding::SubwordEmbeddingResponse *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "subword_token_chain");
  }
  uint64_t v6 = *((void *)this + 2);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, a2, "subword_token_embedding");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluexternalsubword_embedding::SubwordEmbeddingResponse::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  long long v4 = *(const PB::Base **)(this + 8);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  uint64_t v5 = *(const PB::Base **)(v3 + 16);
  if (v5)
  {
    return PB::Writer::writeSubmessage(a2, v5);
  }
  return this;
}

uint64_t sirinluexternalsubword_embedding::SubwordEmbeddingResponse::readFrom(sirinluexternalsubword_embedding::SubwordEmbeddingResponse *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_24;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 2) {
        operator new();
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_24:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_24;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluexternalsubword_embedding::SubwordEmbeddingResponse::~SubwordEmbeddingResponse(sirinluexternalsubword_embedding::SubwordEmbeddingResponse *this)
{
  sirinluexternalsubword_embedding::SubwordEmbeddingResponse::~SubwordEmbeddingResponse(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1F232D928;
  unint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  PB::Base::~Base(this);
}

void *sirinluexternalsubword_embedding::SubwordEmbeddingResponse::SubwordEmbeddingResponse(void *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1F232D928;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1F232D928;
  return this;
}

void *sirinluexternalsubword_embedding::SubwordEmbeddingResponse::SubwordEmbeddingResponse(void *this, const sirinluexternalsubword_embedding::SubwordEmbeddingResponse *a2)
{
  *this = &unk_1F232D928;
  this[1] = 0;
  this[2] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  if (*((void *)a2 + 2)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternalsubword_embedding::SubwordEmbeddingResponse::operator=(uint64_t a1, const sirinluexternalsubword_embedding::SubwordEmbeddingResponse *a2)
{
  if ((const sirinluexternalsubword_embedding::SubwordEmbeddingResponse *)a1 != a2)
  {
    sirinluexternalsubword_embedding::SubwordEmbeddingResponse::SubwordEmbeddingResponse(&v5, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    long long v6 = v3;
    sirinluexternalsubword_embedding::SubwordEmbeddingResponse::~SubwordEmbeddingResponse((sirinluexternalsubword_embedding::SubwordEmbeddingResponse *)&v5);
  }
  return a1;
}

uint64_t sirinluexternalsubword_embedding::swap(uint64_t this, sirinluexternalsubword_embedding::SubwordEmbeddingResponse *a2, sirinluexternalsubword_embedding::SubwordEmbeddingResponse *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  uint64_t v4 = *(void *)(this + 16);
  *(void *)(this + 16) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  return this;
}

void *sirinluexternalsubword_embedding::SubwordEmbeddingResponse::SubwordEmbeddingResponse(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F232D928;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v5 = a1[1];
  a1[1] = v4;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  uint64_t v7 = a1[2];
  a1[2] = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  return a1;
}

uint64_t sirinluexternalsubword_embedding::SubwordEmbeddingResponse::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sirinluexternalsubword_embedding::SubwordEmbeddingResponse::SubwordEmbeddingResponse(&v5, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    long long v6 = v3;
    sirinluexternalsubword_embedding::SubwordEmbeddingResponse::~SubwordEmbeddingResponse((sirinluexternalsubword_embedding::SubwordEmbeddingResponse *)&v5);
  }
  return a1;
}

BOOL sirinluexternalsubword_embedding::SubwordEmbeddingResponse::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v4)
  {
    if (v5 && sirinluinternal::SubwordTokenChain::operator==(v4, v5)) {
      goto LABEL_4;
    }
    return 0;
  }
  if (v5) {
    return 0;
  }
LABEL_4:
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a2 + 16);
  BOOL result = (v6 | v7) == 0;
  if (v6) {
    BOOL v9 = v7 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    uint64_t v10 = *(void *)(a1 + 16);
    return sirinluinternalembedding::EmbeddingTensorOutput::operator==(v10, v7);
  }
  return result;
}

unint64_t sirinluexternalsubword_embedding::SubwordEmbeddingResponse::hash_value(sirinluexternalsubword_embedding::SubwordEmbeddingResponse *this)
{
  unint64_t v2 = (sirinluinternal::SubwordTokenChain *)*((void *)this + 1);
  if (v2) {
    unint64_t v3 = sirinluinternal::SubwordTokenChain::hash_value(v2);
  }
  else {
    unint64_t v3 = 0;
  }
  unint64_t v4 = *((void *)this + 2);
  if (v4) {
    unint64_t v4 = sirinluinternalembedding::EmbeddingTensorOutput::hash_value((sirinluinternalembedding::EmbeddingTensorOutput *)v4);
  }
  return v4 ^ v3;
}

uint64_t sirinluexternalsubword_embedding::SubwordEmbeddingResponse::makeSubwordTokenChain(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternalsubword_embedding::SubwordEmbeddingResponse::makeSubwordTokenEmbedding(uint64_t this)
{
  if (!*(void *)(this + 16)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternaloverrides::OverridesRequest::formatText(sirinluinternaloverrides::OverridesRequest *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = (uint64_t *)*((void *)this + 1);
  uint64_t v6 = (uint64_t *)*((void *)this + 2);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "inputs");
  }
  char v8 = (uint64_t *)*((void *)this + 4);
  BOOL v9 = (uint64_t *)*((void *)this + 5);
  while (v8 != v9)
  {
    uint64_t v10 = *v8++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v10 + 32))(v10, a2, "matching_spans");
  }
  unint64_t v11 = (uint64_t *)*((void *)this + 7);
  char v12 = (uint64_t *)*((void *)this + 8);
  while (v11 != v12)
  {
    uint64_t v13 = *v11++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v13 + 32))(v13, a2, "system_dialog_acts");
  }
  uint64_t v14 = *((void *)this + 10);
  if (v14) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v14 + 32))(v14, a2, "token_chain");
  }
  uint64_t v15 = *((void *)this + 11);
  if (v15) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v15 + 32))(v15, a2, "turn_context");
  }
  if (*((void *)this + 12)) {
    PB::TextFormatter::format();
  }
  return MEMORY[0x1F4147498](a2);
}

void *sirinluinternaloverrides::OverridesRequest::writeTo(void *this, PB::Writer *a2)
{
  unint64_t v3 = this;
  if (this[12]) {
    this = (void *)PB::Writer::write();
  }
  unint64_t v4 = (const PB::Base *)v3[10];
  if (v4) {
    this = (void *)PB::Writer::writeSubmessage(a2, v4);
  }
  uint64_t v5 = (const PB::Base **)v3[4];
  uint64_t v6 = (const PB::Base **)v3[5];
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    this = (void *)PB::Writer::writeSubmessage(a2, v7);
  }
  char v8 = (const PB::Base **)v3[7];
  BOOL v9 = (const PB::Base **)v3[8];
  while (v8 != v9)
  {
    uint64_t v10 = *v8++;
    this = (void *)PB::Writer::writeSubmessage(a2, v10);
  }
  unint64_t v11 = (const PB::Base *)v3[11];
  if (v11) {
    this = (void *)PB::Writer::writeSubmessage(a2, v11);
  }
  uint64_t v13 = (const PB::Base **)v3[1];
  char v12 = (const PB::Base **)v3[2];
  while (v13 != v12)
  {
    uint64_t v14 = *v13++;
    this = (void *)PB::Writer::writeSubmessage(a2, v14);
  }
  return this;
}

uint64_t sirinluinternaloverrides::OverridesRequest::readFrom(sirinluinternaloverrides::OverridesRequest *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_19;
        }
      }
LABEL_21:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v10 >> 3))
      {
        case 1u:
          operator new();
        case 2u:
          operator new();
        case 3u:
          PB::PtrVector<sirinluinternal::MatchingSpan>::emplace_back<>();
        case 4u:
          PB::PtrVector<sirinluexternal::SystemDialogAct>::emplace_back<>();
        case 5u:
          operator new();
        case 6u:
          operator new();
        default:
          break;
      }
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_21;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_19;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sub_1C8B86238(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void PB::PtrVector<sirinluexternal::SystemDialogAct>::emplace_back<>()
{
}

void sub_1C8B863AC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sirinluinternaloverrides::OverridesRequest::~OverridesRequest(sirinluinternaloverrides::OverridesRequest *this)
{
  sirinluinternaloverrides::OverridesRequest::~OverridesRequest(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  uint64_t vars8;

  *(void *)this = &unk_1F232D978;
  unint64_t v2 = *((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v2) {
    std::default_delete<std::string>::operator()[abi:ne180100](v2);
  }
  unint64_t v3 = *((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = (void **)((char *)this + 56);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v5 = (void **)((char *)this + 32);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v5);
  if (*((void *)this + 1))
  {
    std::vector<std::unique_ptr<siricommon::StringValue>>::__clear[abi:ne180100]((void *)this + 1);
    operator delete(*((void **)this + 1));
  }
  PB::Base::~Base(this);
}

double sirinluinternaloverrides::OverridesRequest::OverridesRequest(sirinluinternaloverrides::OverridesRequest *this)
{
  *(void *)this = &unk_1F232D978;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  return result;
}

{
  double result;

  *(void *)this = &unk_1F232D978;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  return result;
}

uint64_t sirinluinternaloverrides::OverridesRequest::OverridesRequest(uint64_t this, const sirinluinternaloverrides::OverridesRequest *a2)
{
  *(_OWORD *)(this + 8) = 0u;
  *(_OWORD *)(this + 56) = 0u;
  *(void *)this = &unk_1F232D978;
  *(_OWORD *)(this + 24) = 0u;
  *(_OWORD *)(this + 40) = 0u;
  *(_OWORD *)(this + 72) = 0u;
  *(_OWORD *)(this + 88) = 0u;
  if (*((void *)a2 + 12)) {
    operator new();
  }
  if (*((void *)a2 + 10)) {
    operator new();
  }
  if (*((void *)a2 + 4) != *((void *)a2 + 5)) {
    PB::PtrVector<sirinluinternal::MatchingSpan>::emplace_back<sirinluinternal::MatchingSpan const&>();
  }
  if (*((void *)a2 + 7) != *((void *)a2 + 8)) {
    PB::PtrVector<sirinluexternal::SystemDialogAct>::emplace_back<sirinluexternal::SystemDialogAct const&>();
  }
  if (*((void *)a2 + 11)) {
    operator new();
  }
  if (*((void *)a2 + 1) != *((void *)a2 + 2)) {
    operator new();
  }
  return this;
}

void sub_1C8B86868(void *a1)
{
}

void PB::PtrVector<sirinluexternal::SystemDialogAct>::emplace_back<sirinluexternal::SystemDialogAct const&>()
{
}

void sub_1C8B869B4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

const sirinluinternaloverrides::OverridesRequest *sirinluinternaloverrides::OverridesRequest::operator=(const sirinluinternaloverrides::OverridesRequest *a1, const sirinluinternaloverrides::OverridesRequest *a2)
{
  if (a1 != a2)
  {
    sirinluinternaloverrides::OverridesRequest::OverridesRequest((uint64_t)v5, a2);
    sirinluinternaloverrides::swap(a1, (sirinluinternaloverrides::OverridesRequest *)v5, v3);
    sirinluinternaloverrides::OverridesRequest::~OverridesRequest((sirinluinternaloverrides::OverridesRequest *)v5);
  }
  return a1;
}

void *sirinluinternaloverrides::swap(void *this, sirinluinternaloverrides::OverridesRequest *a2, sirinluinternaloverrides::OverridesRequest *a3)
{
  uint64_t v3 = this[12];
  this[12] = *((void *)a2 + 12);
  *((void *)a2 + 12) = v3;
  uint64_t v4 = this[10];
  this[10] = *((void *)a2 + 10);
  *((void *)a2 + 10) = v4;
  uint64_t v5 = this[4];
  this[4] = *((void *)a2 + 4);
  *((void *)a2 + 4) = v5;
  uint64_t v6 = this[5];
  this[5] = *((void *)a2 + 5);
  *((void *)a2 + 5) = v6;
  uint64_t v7 = this[6];
  this[6] = *((void *)a2 + 6);
  *((void *)a2 + 6) = v7;
  uint64_t v8 = this[7];
  this[7] = *((void *)a2 + 7);
  *((void *)a2 + 7) = v8;
  uint64_t v9 = this[8];
  this[8] = *((void *)a2 + 8);
  *((void *)a2 + 8) = v9;
  uint64_t v10 = this[9];
  this[9] = *((void *)a2 + 9);
  *((void *)a2 + 9) = v10;
  uint64_t v11 = this[11];
  this[11] = *((void *)a2 + 11);
  *((void *)a2 + 11) = v11;
  uint64_t v12 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v12;
  uint64_t v13 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v13;
  uint64_t v14 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v14;
  return this;
}

uint64_t sirinluinternaloverrides::OverridesRequest::OverridesRequest(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F232D978;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v4 = (void **)(a1 + 8);
  uint64_t v5 = (void **)(a1 + 32);
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v6 = (void **)(a1 + 56);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  uint64_t v7 = *(void *)(a2 + 96);
  *(void *)(a2 + 96) = 0;
  uint64_t v8 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = v7;
  if (v8) {
    std::default_delete<std::string>::operator()[abi:ne180100](v8);
  }
  uint64_t v9 = *(void *)(a2 + 80);
  *(void *)(a2 + 80) = 0;
  uint64_t v10 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = v9;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(v5);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(v6);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  uint64_t v11 = *(void *)(a2 + 88);
  *(void *)(a2 + 88) = 0;
  uint64_t v12 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = v11;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  if (*v4)
  {
    std::vector<std::unique_ptr<siricommon::StringValue>>::__clear[abi:ne180100](v4);
    operator delete(*v4);
    *uint64_t v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

void *sirinluinternaloverrides::OverridesRequest::operator=(void *a1, uint64_t a2)
{
  if (a1 != (void *)a2)
  {
    sirinluinternaloverrides::OverridesRequest::OverridesRequest((uint64_t)v5, a2);
    sirinluinternaloverrides::swap(a1, (sirinluinternaloverrides::OverridesRequest *)v5, v3);
    sirinluinternaloverrides::OverridesRequest::~OverridesRequest((sirinluinternaloverrides::OverridesRequest *)v5);
  }
  return a1;
}

uint64_t sirinluinternaloverrides::OverridesRequest::operator==(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = (unsigned __int8 *)a1[12];
  uint64_t v5 = *(unsigned __int8 ***)(a2 + 96);
  if (v4)
  {
    if (!v5) {
      return 0;
    }
    uint64_t v6 = v4[23];
    if ((v6 & 0x80u) == 0) {
      uint64_t v7 = (unsigned __int8 *)v4[23];
    }
    else {
      uint64_t v7 = (unsigned __int8 *)*((void *)v4 + 1);
    }
    uint64_t v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    int v9 = (char)v8;
    if ((char)v8 < 0) {
      uint64_t v8 = v5[1];
    }
    if (v7 != v8) {
      return 0;
    }
    if (v9 >= 0) {
      uint64_t v10 = *(unsigned __int8 **)(a2 + 96);
    }
    else {
      uint64_t v10 = *v5;
    }
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v10, *((void *)v4 + 1))) {
        return 0;
      }
    }
    else if (v4[23])
    {
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6) {
          goto LABEL_18;
        }
      }
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
LABEL_18:
  uint64_t v11 = (void *)a1[10];
  uint64_t v12 = *(void **)(a2 + 80);
  if (v11)
  {
    if (!v12 || !sirinluinternal::TokenChain::operator==(v11, v12)) {
      return 0;
    }
  }
  else if (v12)
  {
    return 0;
  }
  if (!PB::PtrVector<sirinluinternal::MatchingSpan>::operator==(a1 + 4, *(uint64_t **)(a2 + 32), *(void *)(a2 + 40))
    || !PB::PtrVector<sirinluexternal::SystemDialogAct>::operator==(a1 + 7, *(void ***)(a2 + 56), *(void *)(a2 + 64)))
  {
    return 0;
  }
  uint64_t v13 = a1[11];
  uint64_t v14 = *(void *)(a2 + 88);
  if (!v13)
  {
    if (!v14) {
      goto LABEL_32;
    }
    return 0;
  }
  if (!v14 || !sirinluexternal::TurnContext::operator==(v13, v14)) {
    return 0;
  }
LABEL_32:
  unint64_t v16 = *(uint64_t **)(a2 + 8);
  uint64_t v17 = *(void *)(a2 + 16);
  return PB::PtrVector<sirinluinternaloverrides::TurnInputAndPreprocessing>::operator==(a1 + 1, v16, v17);
}

uint64_t PB::PtrVector<sirinluexternal::SystemDialogAct>::operator==(uint64_t *a1, void **a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (v4 - *a1 != a3 - (void)a2) {
    return 0;
  }
  if (v3 == v4) {
    return 1;
  }
  uint64_t v5 = a2;
  uint64_t v6 = v3 + 8;
  do
  {
    uint64_t v7 = *v5++;
    uint64_t result = sirinluexternal::SystemDialogAct::operator==(*(void **)(v6 - 8), v7);
    if (result) {
      BOOL v9 = v6 == v4;
    }
    else {
      BOOL v9 = 1;
    }
    v6 += 8;
  }
  while (!v9);
  return result;
}

uint64_t PB::PtrVector<sirinluinternaloverrides::TurnInputAndPreprocessing>::operator==(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (v4 - *a1 != a3 - (void)a2) {
    return 0;
  }
  if (v3 == v4) {
    return 1;
  }
  uint64_t v5 = a2;
  uint64_t v6 = v3 + 8;
  do
  {
    uint64_t v7 = *v5++;
    uint64_t result = sirinluinternaloverrides::TurnInputAndPreprocessing::operator==(*(uint64_t **)(v6 - 8), v7);
    if (result) {
      BOOL v9 = v6 == v4;
    }
    else {
      BOOL v9 = 1;
    }
    v6 += 8;
  }
  while (!v9);
  return result;
}

unint64_t sirinluinternaloverrides::OverridesRequest::hash_value(sirinluinternaloverrides::OverridesRequest *this)
{
  uint64_t v2 = *((void *)this + 12);
  if (v2) {
    unint64_t v3 = std::__string_hash<char>::operator()[abi:ne180100](v2);
  }
  else {
    unint64_t v3 = 0;
  }
  uint64_t v4 = (sirinluinternal::TokenChain *)*((void *)this + 10);
  if (v4) {
    unint64_t v5 = sirinluinternal::TokenChain::hash_value(v4);
  }
  else {
    unint64_t v5 = 0;
  }
  uint64_t v6 = (sirinluinternal::MatchingSpan **)*((void *)this + 4);
  uint64_t v7 = (sirinluinternal::MatchingSpan **)*((void *)this + 5);
  if (v6 == v7)
  {
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = 0;
    do
    {
      BOOL v9 = *v6++;
      v8 ^= sirinluinternal::MatchingSpan::hash_value(v9);
    }
    while (v6 != v7);
  }
  uint64_t v10 = (sirinluexternal::SystemDialogAct **)*((void *)this + 7);
  uint64_t v11 = (sirinluexternal::SystemDialogAct **)*((void *)this + 8);
  if (v10 == v11)
  {
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = *v10++;
      v12 ^= sirinluexternal::SystemDialogAct::hash_value(v13);
    }
    while (v10 != v11);
  }
  uint64_t v14 = (sirinluexternal::TurnContext *)*((void *)this + 11);
  if (v14) {
    unint64_t v15 = sirinluexternal::TurnContext::hash_value(v14);
  }
  else {
    unint64_t v15 = 0;
  }
  uint64_t v17 = (sirinluinternaloverrides::TurnInputAndPreprocessing **)*((void *)this + 1);
  unint64_t v16 = (sirinluinternaloverrides::TurnInputAndPreprocessing **)*((void *)this + 2);
  if (v17 == v16)
  {
    uint64_t v18 = 0;
  }
  else
  {
    uint64_t v18 = 0;
    do
    {
      uint64_t v19 = *v17++;
      v18 ^= sirinluinternaloverrides::TurnInputAndPreprocessing::hash_value(v19);
    }
    while (v17 != v16);
  }
  return v5 ^ v3 ^ v8 ^ v12 ^ v15 ^ v18;
}

uint64_t sirinluinternaloverrides::OverridesRequest::makeTokenChain(uint64_t this)
{
  if (!*(void *)(this + 80)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternaloverrides::OverridesRequest::makeTurnContext(uint64_t this)
{
  if (!*(void *)(this + 88)) {
    operator new();
  }
  return this;
}

BOOL SIRINLUEXTERNALNLU_ROUTERNLRouterTurnContextReadFrom(void *a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  unint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v17 = objc_alloc_init(SIRINLUEXTERNALTask);
        [a1 addActiveTasks:v17];
        goto LABEL_23;
      case 2u:
        uint64_t v17 = objc_alloc_init(SIRINLUEXTERNALTask);
        [a1 addExecutedTasks:v17];
LABEL_23:
        if (!PBReaderPlaceMark() || !SIRINLUEXTERNALTaskReadFrom((id *)&v17->super.super.isa, a2)) {
          goto LABEL_35;
        }
        goto LABEL_31;
      case 3u:
        uint64_t v17 = objc_alloc_init(SIRINLUEXTERNALSystemDialogAct);
        [a1 addSystemDialogActs:v17];
        if (!PBReaderPlaceMark()
          || !SIRINLUEXTERNALSystemDialogActReadFrom((id *)&v17->super.super.isa, a2))
        {
          goto LABEL_35;
        }
        goto LABEL_31;
      case 4u:
        uint64_t v17 = objc_alloc_init(SIRINLUEXTERNALEntityCandidate);
        [a1 addSalientEntities:v17];
        if (PBReaderPlaceMark()
          && SIRINLUEXTERNALEntityCandidateReadFrom((id *)&v17->super.super.isa, a2))
        {
LABEL_31:
          PBReaderRecallMark();

LABEL_32:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_35:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_32;
    }
  }
}

uint64_t sirinluinternalcati::CATIResponse::formatText(sirinluinternalcati::CATIResponse *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  unint64_t v5 = (uint64_t *)*((void *)this + 1);
  uint64_t v6 = (uint64_t *)*((void *)this + 2);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "hypotheses");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluinternalcati::CATIResponse::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v2 = *(const PB::Base ***)(this + 8);
  for (int i = *(const PB::Base ***)(this + 16); v2 != i; this = PB::Writer::writeSubmessage(a2, v5))
    unint64_t v5 = *v2++;
  return this;
}

uint64_t sirinluinternalcati::CATIResponse::readFrom(sirinluinternalcati::CATIResponse *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        PB::PtrVector<sirinluexternal::UserParse>::emplace_back<>();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluinternalcati::CATIResponse::~CATIResponse(sirinluinternalcati::CATIResponse *this)
{
  *(void *)this = &unk_1F232D9C8;
  unint64_t v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
  JUMPOUT(0x1CB772580);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_1F232D9C8;
  unint64_t v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_1F232D9C8;
  unint64_t v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
}

void *sirinluinternalcati::CATIResponse::CATIResponse(void *this)
{
  *this = &unk_1F232D9C8;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = &unk_1F232D9C8;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

void *sirinluinternalcati::CATIResponse::CATIResponse(void *this, const sirinluinternalcati::CATIResponse *a2)
{
  this[1] = 0;
  *this = &unk_1F232D9C8;
  this[2] = 0;
  this[3] = 0;
  if (*((void *)a2 + 1) != *((void *)a2 + 2)) {
    PB::PtrVector<sirinluexternal::UserParse>::emplace_back<sirinluexternal::UserParse const&>();
  }
  return this;
}

uint64_t sirinluinternalcati::CATIResponse::operator=(uint64_t a1, const sirinluinternalcati::CATIResponse *a2)
{
  if ((const sirinluinternalcati::CATIResponse *)a1 != a2)
  {
    sirinluinternalcati::CATIResponse::CATIResponse(&v6, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v3;
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v8;
    uint64_t v8 = v4;
    uint64_t v6 = &unk_1F232D9C8;
    unsigned int v9 = (void **)&v7;
    std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v9);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

void *sirinluinternalcati::swap(void *this, sirinluinternalcati::CATIResponse *a2, sirinluinternalcati::CATIResponse *a3)
{
  uint64_t v3 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  uint64_t v4 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  return this;
}

uint64_t sirinluinternalcati::CATIResponse::CATIResponse(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F232D9C8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate((void **)(a1 + 8));
  *uint64_t v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

{
  _OWORD *v4;

  *(void *)a1 = &unk_1F232D9C8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate((void **)(a1 + 8));
  *uint64_t v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

uint64_t sirinluinternalcati::CATIResponse::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v9 = &unk_1F232D9C8;
    long long v10 = 0uLL;
    uint64_t v11 = 0;
    std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate((void **)&v10);
    uint64_t v4 = *(void *)(a2 + 24);
    long long v5 = *(_OWORD *)(a2 + 8);
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    long long v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v5;
    long long v10 = v6;
    uint64_t v7 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v4;
    uint64_t v11 = v7;
    char v12 = (void **)&v10;
    unsigned int v9 = &unk_1F232D9C8;
    std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v12);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

BOOL sirinluinternalcati::CATIResponse::operator==(uint64_t a1, uint64_t a2)
{
  return PB::PtrVector<sirinluexternal::UserParse>::operator==((uint64_t *)(a1 + 8), *(uint64_t **)(a2 + 8), *(void *)(a2 + 16));
}

uint64_t sirinluinternalcati::CATIResponse::hash_value(sirinluinternalcati::CATIResponse *this)
{
  uint64_t v1 = (sirinluexternal::UserParse **)*((void *)this + 1);
  unint64_t v2 = (sirinluexternal::UserParse **)*((void *)this + 2);
  if (v1 == v2) {
    return 0;
  }
  uint64_t v3 = 0;
  do
  {
    uint64_t v4 = *v1++;
    v3 ^= sirinluexternal::UserParse::hash_value(v4);
  }
  while (v1 != v2);
  return v3;
}

uint64_t sirinluinternal::ContextRule::formatText(sirinluinternal::ContextRule *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((unsigned char *)this + 48) & 2) != 0) {
    PB::TextFormatter::format(a2, "apply_to_prompt_scenarios");
  }
  long long v5 = (uint64_t *)*((void *)this + 1);
  long long v6 = (uint64_t *)*((void *)this + 2);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "matching_spans");
  }
  if (*((unsigned char *)this + 48)) {
    PB::TextFormatter::format(a2, "sda_comparison_mode");
  }
  uint64_t v8 = *((void *)this + 4);
  if (v8) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v8 + 32))(v8, a2, "turn_context");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluinternal::ContextRule::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *(const PB::Base **)(this + 32);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  long long v5 = *(const PB::Base ***)(v3 + 8);
  long long v6 = *(const PB::Base ***)(v3 + 16);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    this = PB::Writer::writeSubmessage(a2, v7);
  }
  char v8 = *(unsigned char *)(v3 + 48);
  if ((v8 & 2) != 0)
  {
    this = PB::Writer::write(a2);
    char v8 = *(unsigned char *)(v3 + 48);
  }
  if (v8)
  {
    return PB::Writer::writeVarInt(a2);
  }
  return this;
}

uint64_t sirinluinternal::ContextRule::readFrom(sirinluinternal::ContextRule *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
      break;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      int v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        operator new();
      case 2u:
        PB::PtrVector<sirinluinternal::MatchingSpan>::emplace_back<>();
      case 3u:
        *((unsigned char *)this + 48) |= 2u;
        unint64_t v20 = *((void *)a2 + 1);
        if (v20 >= *((void *)a2 + 2))
        {
          BOOL v23 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          unint64_t v21 = v20 + 1;
          int v22 = *(unsigned __int8 *)(*(void *)a2 + v20);
          *((void *)a2 + 1) = v21;
          BOOL v23 = v22 != 0;
        }
        *((unsigned char *)this + 44) = v23;
        goto LABEL_47;
      case 4u:
        *((unsigned char *)this + 48) |= 1u;
        unint64_t v24 = *((void *)a2 + 1);
        unint64_t v25 = *((void *)a2 + 2);
        uint64_t v26 = *(void *)a2;
        if (v24 <= 0xFFFFFFFFFFFFFFF5 && v24 + 10 <= v25)
        {
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v29 = 0;
          do
          {
            unint64_t v30 = v24 + 1;
            *((void *)a2 + 1) = v24 + 1;
            char v31 = *(unsigned char *)(v26 + v24);
            v29 |= (unint64_t)(v31 & 0x7F) << v27;
            if ((v31 & 0x80) == 0) {
              goto LABEL_46;
            }
            v27 += 7;
            unint64_t v24 = v30;
            BOOL v14 = v28++ > 8;
          }
          while (!v14);
LABEL_42:
          LODWORD(v29) = 0;
          goto LABEL_46;
        }
        char v32 = 0;
        unsigned int v33 = 0;
        uint64_t v29 = 0;
        if (v25 <= v24) {
          unint64_t v25 = *((void *)a2 + 1);
        }
        break;
      default:
        goto LABEL_19;
    }
    while (1)
    {
      if (v25 == v24)
      {
        LODWORD(v29) = 0;
        *((unsigned char *)a2 + 24) = 1;
        goto LABEL_46;
      }
      unint64_t v34 = v24 + 1;
      char v35 = *(unsigned char *)(v26 + v24);
      *((void *)a2 + 1) = v34;
      v29 |= (unint64_t)(v35 & 0x7F) << v32;
      if ((v35 & 0x80) == 0) {
        break;
      }
      v32 += 7;
      unint64_t v24 = v34;
      BOOL v14 = v33++ > 8;
      if (v14) {
        goto LABEL_42;
      }
    }
    if (*((unsigned char *)a2 + 24)) {
      LODWORD(v29) = 0;
    }
LABEL_46:
    *((_DWORD *)this + 10) = v29;
LABEL_47:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  char v15 = 0;
  unsigned int v16 = 0;
  unint64_t v11 = 0;
  if (v2 > v3) {
    unint64_t v3 = v2;
  }
  do
  {
    if (v3 == v2)
    {
      int v4 = 1;
      *((unsigned char *)a2 + 24) = 1;
      return v4 == 0;
    }
    unint64_t v17 = v2 + 1;
    char v18 = *(unsigned char *)(v8 + v2);
    *((void *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0) {
      goto LABEL_21;
    }
    v15 += 7;
    unint64_t v2 = v17;
    BOOL v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  uint64_t result = PB::Reader::skip(a2);
  if (result) {
    goto LABEL_47;
  }
  return result;
}

void sirinluinternal::ContextRule::~ContextRule(sirinluinternal::ContextRule *this)
{
  sirinluinternal::ContextRule::~ContextRule(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  void **v3;
  uint64_t vars8;

  *(void *)this = &unk_1F232DA18;
  unint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unint64_t v3 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v3);
  PB::Base::~Base(this);
}

double sirinluinternal::ContextRule::ContextRule(sirinluinternal::ContextRule *this)
{
  *(void *)this = &unk_1F232DA18;
  *((_DWORD *)this + 12) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(void *)((char *)this + 37) = 0;
  return result;
}

{
  double result;

  *(void *)this = &unk_1F232DA18;
  *((_DWORD *)this + 12) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(void *)((char *)this + 37) = 0;
  return result;
}

uint64_t sirinluinternal::ContextRule::ContextRule(uint64_t this, const sirinluinternal::ContextRule *a2)
{
  *(void *)this = &unk_1F232DA18;
  *(_OWORD *)(this + 8) = 0u;
  *(_DWORD *)(this + 48) = 0;
  *(_OWORD *)(this + 24) = 0u;
  *(void *)(this + 37) = 0;
  if (*((void *)a2 + 4)) {
    operator new();
  }
  if (*((void *)a2 + 1) != *((void *)a2 + 2)) {
    PB::PtrVector<sirinluinternal::MatchingSpan>::emplace_back<sirinluinternal::MatchingSpan const&>();
  }
  char v2 = *((unsigned char *)a2 + 48);
  if ((v2 & 2) != 0)
  {
    char v3 = *((unsigned char *)a2 + 44);
    *(unsigned char *)(this + 48) |= 2u;
    *(unsigned char *)(this + 44) = v3;
    char v2 = *((unsigned char *)a2 + 48);
  }
  if (v2)
  {
    int v4 = *((_DWORD *)a2 + 10);
    *(unsigned char *)(this + 48) |= 1u;
    *(_DWORD *)(this + 40) = v4;
  }
  return this;
}

uint64_t sirinluinternal::ContextRule::operator=(uint64_t a1, const sirinluinternal::ContextRule *a2)
{
  if ((const sirinluinternal::ContextRule *)a1 != a2)
  {
    sirinluinternal::ContextRule::ContextRule((uint64_t)v8, a2);
    int v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v13;
    int v13 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    long long v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v10;
    long long v9 = v4;
    long long v10 = v5;
    LOBYTE(v3) = *(unsigned char *)(a1 + 44);
    *(unsigned char *)(a1 + 44) = v12;
    char v12 = v3;
    int v6 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v11;
    int v11 = v6;
    sirinluinternal::ContextRule::~ContextRule((sirinluinternal::ContextRule *)v8);
  }
  return a1;
}

uint64_t sirinluinternal::swap(uint64_t this, sirinluinternal::ContextRule *a2, sirinluinternal::ContextRule *a3)
{
  int v3 = *(_DWORD *)(this + 48);
  *(_DWORD *)(this + 48) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  uint64_t v4 = *(void *)(this + 32);
  *(void *)(this + 32) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v4;
  uint64_t v5 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = *(void *)(this + 16);
  *(void *)(this + 16) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *(void *)(this + 24);
  *(void *)(this + 24) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  LOBYTE(v7) = *(unsigned char *)(this + 44);
  *(unsigned char *)(this + 44) = *((unsigned char *)a2 + 44);
  *((unsigned char *)a2 + 44) = v7;
  LODWORD(v7) = *(_DWORD *)(this + 40);
  *(_DWORD *)(this + 40) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v7;
  return this;
}

uint64_t sirinluinternal::ContextRule::ContextRule(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F232DA18;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v4 = (void **)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 37) = 0;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v5;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(v4);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 44);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return a1;
}

uint64_t sirinluinternal::ContextRule::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sirinluinternal::ContextRule::ContextRule((uint64_t)v8, a2);
    int v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v13;
    int v13 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    long long v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v10;
    long long v9 = v4;
    long long v10 = v5;
    LOBYTE(v3) = *(unsigned char *)(a1 + 44);
    *(unsigned char *)(a1 + 44) = v12;
    char v12 = v3;
    int v6 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v11;
    int v11 = v6;
    sirinluinternal::ContextRule::~ContextRule((sirinluinternal::ContextRule *)v8);
  }
  return a1;
}

BOOL sirinluinternal::ContextRule::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a2 + 32);
  if (v4)
  {
    if (!v5 || !sirinluexternal::TurnContext::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  BOOL result = PB::PtrVector<sirinluinternal::MatchingSpan>::operator==((uint64_t *)(a1 + 8), *(uint64_t **)(a2 + 8), *(void *)(a2 + 16));
  if (!result) {
    return result;
  }
  if ((*(unsigned char *)(a1 + 48) & 2) == 0)
  {
    if ((*(unsigned char *)(a2 + 48) & 2) == 0) {
      goto LABEL_14;
    }
    return 0;
  }
  if ((*(unsigned char *)(a2 + 48) & 2) == 0 || *(unsigned __int8 *)(a1 + 44) != *(unsigned __int8 *)(a2 + 44)) {
    return 0;
  }
LABEL_14:
  BOOL result = (*(unsigned char *)(a2 + 48) & 1) == 0;
  if (*(unsigned char *)(a1 + 48)) {
    return (*(unsigned char *)(a2 + 48) & 1) != 0 && *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40);
  }
  return result;
}

unint64_t sirinluinternal::ContextRule::hash_value(sirinluinternal::ContextRule *this)
{
  char v2 = (sirinluexternal::TurnContext *)*((void *)this + 4);
  if (v2) {
    unint64_t v3 = sirinluexternal::TurnContext::hash_value(v2);
  }
  else {
    unint64_t v3 = 0;
  }
  uint64_t v4 = (sirinluinternal::MatchingSpan **)*((void *)this + 1);
  uint64_t v5 = (sirinluinternal::MatchingSpan **)*((void *)this + 2);
  if (v4 == v5)
  {
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = *v4++;
      v6 ^= sirinluinternal::MatchingSpan::hash_value(v7);
    }
    while (v4 != v5);
  }
  if ((*((unsigned char *)this + 48) & 2) != 0)
  {
    uint64_t v8 = *((unsigned __int8 *)this + 44);
    if (*((unsigned char *)this + 48)) {
      goto LABEL_11;
    }
LABEL_13:
    uint64_t v9 = 0;
    return v6 ^ v3 ^ v8 ^ v9;
  }
  uint64_t v8 = 0;
  if ((*((unsigned char *)this + 48) & 1) == 0) {
    goto LABEL_13;
  }
LABEL_11:
  uint64_t v9 = *((int *)this + 10);
  return v6 ^ v3 ^ v8 ^ v9;
}

uint64_t sirinluinternal::ContextRule::makeTurnContext(uint64_t this)
{
  if (!*(void *)(this + 32)) {
    operator new();
  }
  return this;
}

void sub_1C8B89E18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sirinluexternal::AsrAlternative::formatText(sirinluexternal::AsrAlternative *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((void *)this + 1)) {
    PB::TextFormatter::format();
  }
  uint64_t v5 = *((void *)this + 2);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "probability");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluexternal::AsrAlternative::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if (*(void *)(this + 8)) {
    this = PB::Writer::write();
  }
  uint64_t v4 = *(const PB::Base **)(v3 + 16);
  if (v4)
  {
    return PB::Writer::writeSubmessage(a2, v4);
  }
  return this;
}

uint64_t sirinluexternal::AsrAlternative::readFrom(sirinluexternal::AsrAlternative *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_24;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 2) {
        operator new();
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_24:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_24;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluexternal::AsrAlternative::~AsrAlternative(sirinluexternal::AsrAlternative *this)
{
  sirinluexternal::AsrAlternative::~AsrAlternative(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1F232DA68;
  unint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    std::default_delete<std::string>::operator()[abi:ne180100](v3);
  }
  PB::Base::~Base(this);
}

void *sirinluexternal::AsrAlternative::AsrAlternative(void *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1F232DA68;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1F232DA68;
  return this;
}

void *sirinluexternal::AsrAlternative::AsrAlternative(void *this, const sirinluexternal::AsrAlternative *a2)
{
  *this = &unk_1F232DA68;
  this[1] = 0;
  this[2] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  if (*((void *)a2 + 2)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternal::AsrAlternative::operator=(uint64_t a1, const sirinluexternal::AsrAlternative *a2)
{
  if ((const sirinluexternal::AsrAlternative *)a1 != a2)
  {
    sirinluexternal::AsrAlternative::AsrAlternative(&v5, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    long long v6 = v3;
    sirinluexternal::AsrAlternative::~AsrAlternative((sirinluexternal::AsrAlternative *)&v5);
  }
  return a1;
}

uint64_t sirinluexternal::swap(uint64_t this, sirinluexternal::AsrAlternative *a2, sirinluexternal::AsrAlternative *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  uint64_t v4 = *(void *)(this + 16);
  *(void *)(this + 16) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  return this;
}

void *sirinluexternal::AsrAlternative::AsrAlternative(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F232DA68;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v5 = a1[1];
  a1[1] = v4;
  if (v5) {
    std::default_delete<std::string>::operator()[abi:ne180100](v5);
  }
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  uint64_t v7 = a1[2];
  a1[2] = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  return a1;
}

uint64_t sirinluexternal::AsrAlternative::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sirinluexternal::AsrAlternative::AsrAlternative(&v5, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    long long v6 = v3;
    sirinluexternal::AsrAlternative::~AsrAlternative((sirinluexternal::AsrAlternative *)&v5);
  }
  return a1;
}

BOOL sirinluexternal::AsrAlternative::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned __int8 **)(a1 + 8);
  uint64_t v5 = *(unsigned __int8 ***)(a2 + 8);
  if (v4)
  {
    if (!v5) {
      return 0;
    }
    uint64_t v6 = v4[23];
    if ((v6 & 0x80u) == 0) {
      uint64_t v7 = (unsigned __int8 *)v4[23];
    }
    else {
      uint64_t v7 = (unsigned __int8 *)*((void *)v4 + 1);
    }
    char v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    int v9 = (char)v8;
    if ((char)v8 < 0) {
      char v8 = v5[1];
    }
    if (v7 != v8) {
      return 0;
    }
    if (v9 >= 0) {
      unint64_t v10 = *(unsigned __int8 **)(a2 + 8);
    }
    else {
      unint64_t v10 = *v5;
    }
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v10, *((void *)v4 + 1))) {
        return 0;
      }
    }
    else if (v4[23])
    {
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6) {
          goto LABEL_21;
        }
      }
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
LABEL_21:
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = *(void *)(a2 + 16);
  BOOL result = (v12 | v13) == 0;
  if (v12) {
    BOOL v14 = v13 == 0;
  }
  else {
    BOOL v14 = 1;
  }
  if (!v14)
  {
    if (*(unsigned char *)(v12 + 12))
    {
      if ((*(unsigned char *)(v13 + 12) & 1) != 0 && *(float *)(v12 + 8) == *(float *)(v13 + 8)) {
        return 1;
      }
    }
    else if ((*(unsigned char *)(v13 + 12) & 1) == 0)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

unint64_t sirinluexternal::AsrAlternative::hash_value(sirinluexternal::AsrAlternative *this)
{
  unint64_t v2 = *((void *)this + 1);
  if (v2) {
    unint64_t v2 = std::__string_hash<char>::operator()[abi:ne180100](v2);
  }
  uint64_t v3 = *((void *)this + 2);
  if (v3)
  {
    if (*(unsigned char *)(v3 + 12))
    {
      float v4 = *(float *)(v3 + 8);
      uint64_t v3 = LODWORD(v4);
      if (v4 == 0.0) {
        uint64_t v3 = 0;
      }
    }
    else
    {
      uint64_t v3 = 0;
    }
  }
  return v3 ^ v2;
}

uint64_t sirinluexternal::AsrAlternative::makeProbability(uint64_t this)
{
  if (!*(void *)(this + 16)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternal::RewrittenUtterance::formatText(sirinluexternal::RewrittenUtterance *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "rewritten_utterance");
  }
  if (*((unsigned char *)this + 24)) {
    PB::TextFormatter::format(a2, "score", *((double *)this + 2));
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluexternal::RewrittenUtterance::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  float v4 = *(const PB::Base **)(this + 8);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  if (*(unsigned char *)(v3 + 24))
  {
    double v5 = *(double *)(v3 + 16);
    return PB::Writer::write(a2, v5);
  }
  return this;
}

uint64_t sirinluexternal::RewrittenUtterance::readFrom(sirinluexternal::RewrittenUtterance *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_24;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 24) |= 1u;
        unint64_t v20 = *((void *)a2 + 1);
        if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 2) = *(void *)(*(void *)a2 + v20);
          *((void *)a2 + 1) += 8;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else
      {
        if ((v11 >> 3) == 1) {
          operator new();
        }
LABEL_24:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_24;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluexternal::RewrittenUtterance::~RewrittenUtterance(sirinluexternal::RewrittenUtterance *this)
{
  sirinluexternal::RewrittenUtterance::~RewrittenUtterance(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t vars8;

  unint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1F232DAB8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

uint64_t sirinluexternal::RewrittenUtterance::RewrittenUtterance(uint64_t this)
{
  *(void *)this = &unk_1F232DAB8;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(void *)this = &unk_1F232DAB8;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

uint64_t sirinluexternal::RewrittenUtterance::RewrittenUtterance(uint64_t this, const sirinluexternal::RewrittenUtterance *a2)
{
  *(void *)this = &unk_1F232DAB8;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  if (*((unsigned char *)a2 + 24))
  {
    uint64_t v2 = *((void *)a2 + 2);
    *(unsigned char *)(this + 24) |= 1u;
    *(void *)(this + 16) = v2;
  }
  return this;
}

uint64_t sirinluexternal::RewrittenUtterance::operator=(uint64_t a1, const sirinluexternal::RewrittenUtterance *a2)
{
  if ((const sirinluexternal::RewrittenUtterance *)a1 != a2)
  {
    sirinluexternal::RewrittenUtterance::RewrittenUtterance((uint64_t)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v4;
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v9;
    uint64_t v9 = v5;
    sirinluexternal::RewrittenUtterance::~RewrittenUtterance((sirinluexternal::RewrittenUtterance *)&v7);
  }
  return a1;
}

double sirinluexternal::swap(sirinluexternal *this, sirinluexternal::RewrittenUtterance *a2, sirinluexternal::RewrittenUtterance *a3)
{
  int v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

uint64_t sirinluexternal::RewrittenUtterance::RewrittenUtterance(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F232DAB8;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return a1;
}

uint64_t sirinluexternal::RewrittenUtterance::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sirinluexternal::RewrittenUtterance::RewrittenUtterance((uint64_t)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v4;
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v9;
    uint64_t v9 = v5;
    sirinluexternal::RewrittenUtterance::~RewrittenUtterance((sirinluexternal::RewrittenUtterance *)&v7);
  }
  return a1;
}

BOOL sirinluexternal::RewrittenUtterance::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v4)
  {
    if (!v5 || (siricommon::StringValue::operator==(v4, v5) & 1) == 0) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  BOOL result = (*(unsigned char *)(a2 + 24) & 1) == 0;
  if ((*(unsigned char *)(a1 + 24) & 1) == 0) {
    return result;
  }
  return (*(unsigned char *)(a2 + 24) & 1) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
}

unint64_t sirinluexternal::RewrittenUtterance::hash_value(sirinluexternal::RewrittenUtterance *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    unint64_t v3 = *(void *)(v2 + 8);
    if (v3) {
      unint64_t v3 = std::__string_hash<char>::operator()[abi:ne180100](v3);
    }
  }
  else
  {
    unint64_t v3 = 0;
  }
  if (*((unsigned char *)this + 24))
  {
    double v4 = *((double *)this + 2);
    if (v4 == 0.0) {
      double v4 = 0.0;
    }
  }
  else
  {
    double v4 = 0.0;
  }
  return *(void *)&v4 ^ v3;
}

uint64_t sirinluexternal::RewrittenUtterance::makeRewrittenUtterance(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternalnlu_router::PrimitiveValue::formatText(sirinluexternalnlu_router::PrimitiveValue *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "app");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluexternalnlu_router::PrimitiveValue::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2);
  }
  return this;
}

uint64_t sirinluexternalnlu_router::PrimitiveValue::readFrom(sirinluexternalnlu_router::PrimitiveValue *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 17) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluexternalnlu_router::PrimitiveValue::~PrimitiveValue(sirinluexternalnlu_router::PrimitiveValue *this)
{
  sirinluexternalnlu_router::PrimitiveValue::~PrimitiveValue(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t vars8;

  unint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1F232DB08;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

void *sirinluexternalnlu_router::PrimitiveValue::PrimitiveValue(void *this)
{
  *this = &unk_1F232DB08;
  this[1] = 0;
  return this;
}

{
  *this = &unk_1F232DB08;
  this[1] = 0;
  return this;
}

void *sirinluexternalnlu_router::PrimitiveValue::PrimitiveValue(void *this, const sirinluexternalnlu_router::PrimitiveValue *a2)
{
  *this = &unk_1F232DB08;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const sirinluexternalnlu_router::PrimitiveValue *sirinluexternalnlu_router::PrimitiveValue::operator=(const sirinluexternalnlu_router::PrimitiveValue *a1, const sirinluexternalnlu_router::PrimitiveValue *a2)
{
  if (a1 != a2)
  {
    sirinluexternalnlu_router::PrimitiveValue::PrimitiveValue(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    sirinluexternalnlu_router::PrimitiveValue::~PrimitiveValue((sirinluexternalnlu_router::PrimitiveValue *)&v5);
  }
  return a1;
}

uint64_t sirinluexternalnlu_router::swap(uint64_t this, sirinluexternalnlu_router::PrimitiveValue *a2, sirinluexternalnlu_router::PrimitiveValue *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *sirinluexternalnlu_router::PrimitiveValue::PrimitiveValue(void *a1, uint64_t a2)
{
  *a1 = &unk_1F232DB08;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_1F232DB08;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t sirinluexternalnlu_router::PrimitiveValue::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = &unk_1F232DB08;
    v6[1] = v4;
    sirinluexternalnlu_router::PrimitiveValue::~PrimitiveValue((sirinluexternalnlu_router::PrimitiveValue *)v6);
  }
  return a1;
}

uint64_t sirinluexternalnlu_router::PrimitiveValue::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    return (v2 | v3) == 0;
  }
  else {
    return sirinluexternalnlu_router::App::operator==(v2, v3);
  }
}

unint64_t sirinluexternalnlu_router::PrimitiveValue::hash_value(sirinluexternalnlu_router::PrimitiveValue *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (v1 && (uint64_t v2 = *(void *)(v1 + 8)) != 0) {
    return std::__string_hash<char>::operator()[abi:ne180100](v2);
  }
  else {
    return 0;
  }
}

uint64_t sirinluexternalnlu_router::PrimitiveValue::makeApp(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternalcontextupdate::ContextUpdateResponse::formatText(sirinluinternalcontextupdate::ContextUpdateResponse *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = (uint64_t *)*((void *)this + 1);
  uint64_t v6 = (uint64_t *)*((void *)this + 2);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "reformed_turn_input_bundles");
  }
  uint64_t v8 = *((void *)this + 4);
  if (v8) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v8 + 32))(v8, a2, "request_id");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluinternalcontextupdate::ContextUpdateResponse::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  BOOL v4 = *(const PB::Base ***)(this + 8);
  uint64_t v5 = *(const PB::Base ***)(this + 16);
  while (v4 != v5)
  {
    uint64_t v6 = *v4++;
    this = PB::Writer::writeSubmessage(a2, v6);
  }
  uint64_t v7 = *(const PB::Base **)(v3 + 32);
  if (v7)
  {
    return PB::Writer::writeSubmessage(a2, v7);
  }
  return this;
}

uint64_t sirinluinternalcontextupdate::ContextUpdateResponse::readFrom(sirinluinternalcontextupdate::ContextUpdateResponse *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_24;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 2) {
        operator new();
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_24:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_24;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sub_1C8B8BB8C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sirinluinternalcontextupdate::ContextUpdateResponse::~ContextUpdateResponse(sirinluinternalcontextupdate::ContextUpdateResponse *this)
{
  sirinluinternalcontextupdate::ContextUpdateResponse::~ContextUpdateResponse(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_1F232DB58;
  unint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*((void *)this + 1))
  {
    std::vector<std::unique_ptr<siricommon::StringValue>>::__clear[abi:ne180100]((void *)this + 1);
    operator delete(*((void **)this + 1));
  }
  PB::Base::~Base(this);
}

double sirinluinternalcontextupdate::ContextUpdateResponse::ContextUpdateResponse(sirinluinternalcontextupdate::ContextUpdateResponse *this)
{
  *(void *)this = &unk_1F232DB58;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

{
  double result;

  *(void *)this = &unk_1F232DB58;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

uint64_t sirinluinternalcontextupdate::ContextUpdateResponse::ContextUpdateResponse(uint64_t this, const sirinluinternalcontextupdate::ContextUpdateResponse *a2)
{
  *(void *)this = &unk_1F232DB58;
  *(_OWORD *)(this + 8) = 0u;
  *(_OWORD *)(this + 24) = 0u;
  if (*((void *)a2 + 1) != *((void *)a2 + 2)) {
    operator new();
  }
  if (*((void *)a2 + 4)) {
    operator new();
  }
  return this;
}

void sub_1C8B8BEAC(void *a1)
{
}

uint64_t sirinluinternalcontextupdate::ContextUpdateResponse::operator=(uint64_t a1, const sirinluinternalcontextupdate::ContextUpdateResponse *a2)
{
  if ((const sirinluinternalcontextupdate::ContextUpdateResponse *)a1 != a2)
  {
    sirinluinternalcontextupdate::ContextUpdateResponse::ContextUpdateResponse((uint64_t)v6, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v8;
    long long v7 = v3;
    long long v8 = v4;
    sirinluinternalcontextupdate::ContextUpdateResponse::~ContextUpdateResponse((sirinluinternalcontextupdate::ContextUpdateResponse *)v6);
  }
  return a1;
}

void *sirinluinternalcontextupdate::swap(void *this, sirinluinternalcontextupdate::ContextUpdateResponse *a2, sirinluinternalcontextupdate::ContextUpdateResponse *a3)
{
  uint64_t v3 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  uint64_t v4 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  uint64_t v6 = this[4];
  this[4] = *((void *)a2 + 4);
  *((void *)a2 + 4) = v6;
  return this;
}

uint64_t sirinluinternalcontextupdate::ContextUpdateResponse::ContextUpdateResponse(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F232DB58;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a2 + 8) = 0u;
  uint64_t v3 = *(void *)(a2 + 32);
  *(_OWORD *)(a2 + 24) = 0u;
  uint64_t v4 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t sirinluinternalcontextupdate::ContextUpdateResponse::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sirinluinternalcontextupdate::ContextUpdateResponse::ContextUpdateResponse((uint64_t)v6, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v8;
    long long v7 = v3;
    long long v8 = v4;
    sirinluinternalcontextupdate::ContextUpdateResponse::~ContextUpdateResponse((sirinluinternalcontextupdate::ContextUpdateResponse *)v6);
  }
  return a1;
}

uint64_t sirinluinternalcontextupdate::ContextUpdateResponse::operator==(void *a1, void *a2)
{
  long long v3 = (uint64_t *)a1[1];
  unint64_t v2 = (uint64_t *)a1[2];
  long long v4 = (uint64_t *)a2[1];
  if ((char *)v2 - (char *)v3 != a2[2] - (void)v4) {
    return 0;
  }
  while (v3 != v2)
  {
    uint64_t result = sirinluinternalcontextupdate::ReformedTurnInputBundle::operator==(*v3, *v4);
    if (!result) {
      return result;
    }
    ++v3;
    ++v4;
  }
  uint64_t v8 = a1[4];
  uint64_t v9 = a2[4];
  uint64_t result = (v8 | v9) == 0;
  if (v8 && v9)
  {
    uint64_t v10 = a1[4];
    return sirinluexternal::UUID::operator==(v10, v9);
  }
  return result;
}

uint64_t sirinluinternalcontextupdate::ContextUpdateResponse::hash_value(sirinluinternalcontextupdate::ContextUpdateResponse *this)
{
  unint64_t v2 = (sirinluinternalcontextupdate::ReformedTurnInputBundle **)*((void *)this + 1);
  long long v3 = (sirinluinternalcontextupdate::ReformedTurnInputBundle **)*((void *)this + 2);
  if (v2 == v3)
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = *v2++;
      v4 ^= sirinluinternalcontextupdate::ReformedTurnInputBundle::hash_value(v5);
    }
    while (v2 != v3);
  }
  uint64_t v6 = *((void *)this + 4);
  if (v6)
  {
    if (*(unsigned char *)(v6 + 28))
    {
      uint64_t v7 = *(void *)(v6 + 8);
      if ((*(unsigned char *)(v6 + 28) & 2) != 0)
      {
LABEL_9:
        uint64_t v8 = *(void *)(v6 + 16);
        if ((*(unsigned char *)(v6 + 28) & 4) != 0)
        {
LABEL_10:
          uint64_t v9 = *(int *)(v6 + 24);
LABEL_14:
          uint64_t v6 = v8 ^ v7 ^ v9;
          return v6 ^ v4;
        }
LABEL_13:
        uint64_t v9 = 0;
        goto LABEL_14;
      }
    }
    else
    {
      uint64_t v7 = 0;
      if ((*(unsigned char *)(v6 + 28) & 2) != 0) {
        goto LABEL_9;
      }
    }
    uint64_t v8 = 0;
    if ((*(unsigned char *)(v6 + 28) & 4) != 0) {
      goto LABEL_10;
    }
    goto LABEL_13;
  }
  return v6 ^ v4;
}

uint64_t sirinluinternalcontextupdate::ContextUpdateResponse::makeRequestId(uint64_t this)
{
  if (!*(void *)(this + 32)) {
    operator new();
  }
  return this;
}

BOOL SIRINLUINTERNALInternalSpanDataReadFrom(id *a1, uint64_t a2)
{
  long long v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = objc_alloc_init(SIRINLUINTERNALSiriVocabularySpanData);
        objc_storeStrong(a1 + 5, v17);
        if (PBReaderPlaceMark()
          && (SIRINLUINTERNALSiriVocabularySpanDataReadFrom((uint64_t)v17, a2) & 1) != 0)
        {
          goto LABEL_35;
        }
        goto LABEL_39;
      case 2u:
        char v17 = objc_alloc_init(SIRINLUINTERNALPLUMSpanData);
        objc_storeStrong(a1 + 4, v17);
        if (!PBReaderPlaceMark() || (SIRINLUINTERNALPLUMSpanDataReadFrom((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_39;
        }
        goto LABEL_35;
      case 3u:
        char v17 = objc_alloc_init(SIRINLUINTERNALOvertonKGSpanData);
        objc_storeStrong(a1 + 3, v17);
        if (!PBReaderPlaceMark() || (SIRINLUINTERNALOvertonKGSpanDataReadFrom((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_39;
        }
        goto LABEL_35;
      case 4u:
        char v17 = objc_alloc_init(SIRINLUINTERNALMentionDetectorSpanData);
        objc_storeStrong(a1 + 1, v17);
        if (!PBReaderPlaceMark()
          || (SIRINLUINTERNALMentionDetectorSpanDataReadFrom((uint64_t)v17, a2) & 1) == 0)
        {
          goto LABEL_39;
        }
        goto LABEL_35;
      case 5u:
        char v17 = objc_alloc_init(SIRINLUINTERNALMentionResolverSpanData);
        objc_storeStrong(a1 + 2, v17);
        if (PBReaderPlaceMark() && SIRINLUINTERNALMentionResolverSpanDataReadFrom((uint64_t)v17, a2))
        {
LABEL_35:
          PBReaderRecallMark();

LABEL_36:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_39:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_36;
    }
  }
}

BOOL SIRINLUEXTERNALSUBWORD_EMBEDDINGSubwordEmbeddingSetupReadFrom(uint64_t a1, uint64_t a2)
{
  long long v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 16;
LABEL_22:
        uint64_t v19 = *(void **)(a1 + v18);
        *(void *)(a1 + v18) = v17;

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_24:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v17 = PBReaderReadString();
    uint64_t v18 = 8;
    goto LABEL_22;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sirinluinternalsnlp_intermediate::ITFMContextFeaturizerResponse::formatText(sirinluinternalsnlp_intermediate::ITFMContextFeaturizerResponse *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((void *)this + 1)) {
    PB::TextFormatter::format();
  }
  uint64_t v5 = *((void *)this + 2);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "response");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluinternalsnlp_intermediate::ITFMContextFeaturizerResponse::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *(const PB::Base **)(this + 16);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  if (*(void *)(v3 + 8))
  {
    return PB::Writer::write();
  }
  return this;
}

uint64_t sirinluinternalsnlp_intermediate::ITFMContextFeaturizerResponse::readFrom(sirinluinternalsnlp_intermediate::ITFMContextFeaturizerResponse *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_24;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 2) {
        operator new();
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_24:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_24;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluinternalsnlp_intermediate::ITFMContextFeaturizerResponse::~ITFMContextFeaturizerResponse(sirinluinternalsnlp_intermediate::ITFMContextFeaturizerResponse *this)
{
  sirinluinternalsnlp_intermediate::ITFMContextFeaturizerResponse::~ITFMContextFeaturizerResponse(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1F232DBA8;
  unint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    std::default_delete<std::string>::operator()[abi:ne180100](v3);
  }
  PB::Base::~Base(this);
}

void *sirinluinternalsnlp_intermediate::ITFMContextFeaturizerResponse::ITFMContextFeaturizerResponse(void *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1F232DBA8;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1F232DBA8;
  return this;
}

void *sirinluinternalsnlp_intermediate::ITFMContextFeaturizerResponse::ITFMContextFeaturizerResponse(void *this, const sirinluinternalsnlp_intermediate::ITFMContextFeaturizerResponse *a2)
{
  *this = &unk_1F232DBA8;
  this[1] = 0;
  this[2] = 0;
  if (*((void *)a2 + 2)) {
    operator new();
  }
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternalsnlp_intermediate::ITFMContextFeaturizerResponse::operator=(uint64_t a1, const sirinluinternalsnlp_intermediate::ITFMContextFeaturizerResponse *a2)
{
  if ((const sirinluinternalsnlp_intermediate::ITFMContextFeaturizerResponse *)a1 != a2)
  {
    sirinluinternalsnlp_intermediate::ITFMContextFeaturizerResponse::ITFMContextFeaturizerResponse(&v5, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    long long v6 = v3;
    sirinluinternalsnlp_intermediate::ITFMContextFeaturizerResponse::~ITFMContextFeaturizerResponse((sirinluinternalsnlp_intermediate::ITFMContextFeaturizerResponse *)&v5);
  }
  return a1;
}

uint64_t sirinluinternalsnlp_intermediate::swap(uint64_t this, sirinluinternalsnlp_intermediate::ITFMContextFeaturizerResponse *a2, sirinluinternalsnlp_intermediate::ITFMContextFeaturizerResponse *a3)
{
  uint64_t v3 = *(void *)(this + 16);
  *(void *)(this + 16) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v3;
  uint64_t v4 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  return this;
}

void *sirinluinternalsnlp_intermediate::ITFMContextFeaturizerResponse::ITFMContextFeaturizerResponse(void *a1, uint64_t a2)
{
  a1[1] = 0;
  uint64_t v4 = a1 + 1;
  *a1 = &unk_1F232DBA8;
  a1[2] = 0;
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  uint64_t v6 = a1[2];
  a1[2] = v5;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v8 = *v4;
  *uint64_t v4 = v7;
  if (v8) {
    std::default_delete<std::string>::operator()[abi:ne180100](v8);
  }
  return a1;
}

uint64_t sirinluinternalsnlp_intermediate::ITFMContextFeaturizerResponse::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sirinluinternalsnlp_intermediate::ITFMContextFeaturizerResponse::ITFMContextFeaturizerResponse(&v5, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    long long v6 = v3;
    sirinluinternalsnlp_intermediate::ITFMContextFeaturizerResponse::~ITFMContextFeaturizerResponse((sirinluinternalsnlp_intermediate::ITFMContextFeaturizerResponse *)&v5);
  }
  return a1;
}

uint64_t sirinluinternalsnlp_intermediate::ITFMContextFeaturizerResponse::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a2 + 16);
  if (v4)
  {
    if (!v5 || !sirinluinternalsnlp_intermediate::ContextFeaturizerResponse::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  long long v6 = *(unsigned __int8 **)(a1 + 8);
  uint64_t v7 = *(unsigned __int8 ***)(a2 + 8);
  uint64_t result = v7 == 0;
  if (!v6) {
    return result;
  }
  if (!v7) {
    return 0;
  }
  uint64_t v9 = v6[23];
  if ((v9 & 0x80u) == 0) {
    unint64_t v10 = (unsigned __int8 *)v6[23];
  }
  else {
    unint64_t v10 = (unsigned __int8 *)*((void *)v6 + 1);
  }
  unint64_t v11 = (unsigned __int8 *)*((unsigned __int8 *)v7 + 23);
  int v12 = (char)v11;
  if ((char)v11 < 0) {
    unint64_t v11 = v7[1];
  }
  if (v10 != v11) {
    return 0;
  }
  if (v12 >= 0) {
    BOOL v13 = *(unsigned __int8 **)(a2 + 8);
  }
  else {
    BOOL v13 = *v7;
  }
  if ((v9 & 0x80) != 0) {
    return !memcmp(*(const void **)v6, v13, *((void *)v6 + 1));
  }
  if (!v6[23]) {
    return 1;
  }
  uint64_t v14 = v9 - 1;
  do
  {
    int v16 = *v6++;
    int v15 = v16;
    int v18 = *v13++;
    int v17 = v18;
    BOOL v20 = v14-- != 0;
    uint64_t result = v15 == v17;
  }
  while (v15 == v17 && v20);
  return result;
}

unint64_t sirinluinternalsnlp_intermediate::ITFMContextFeaturizerResponse::hash_value(sirinluinternalsnlp_intermediate::ITFMContextFeaturizerResponse *this)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2 && (long long v3 = *(sirinluinternalsnlp_intermediate::LinearizedTensor **)(v2 + 8)) != 0) {
    uint64_t v4 = sirinluinternalsnlp_intermediate::LinearizedTensor::hash_value(v3);
  }
  else {
    uint64_t v4 = 0;
  }
  unint64_t v5 = *((void *)this + 1);
  if (v5) {
    unint64_t v5 = std::__string_hash<char>::operator()[abi:ne180100](v5);
  }
  return v5 ^ v4;
}

uint64_t sirinluinternalsnlp_intermediate::ITFMContextFeaturizerResponse::makeResponse(uint64_t this)
{
  if (!*(void *)(this + 16)) {
    operator new();
  }
  return this;
}

uint64_t SIRINLUINTERNALNLV4_PARSERNLv4ParserResponseReadFrom(void *a1, uint64_t a2)
{
  long long v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  unint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        int v17 = objc_alloc_init(SIRINLUEXTERNALUserParse);
        [a1 addHypotheses:v17];
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALUserParseReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sirinluinternalsnlc::SNLCParserResponse::formatText(sirinluinternalsnlc::SNLCParserResponse *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 16);
  if (v5)
  {
    PB::TextFormatter::format(a2, "classification_label");
    char v5 = *((unsigned char *)this + 16);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(a2, "classification_probability", *((float *)this + 3));
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluinternalsnlc::SNLCParserResponse::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 16);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2);
    char v4 = *(unsigned char *)(v3 + 16);
  }
  if ((v4 & 2) != 0)
  {
    float v5 = *(float *)(v3 + 12);
    return PB::Writer::write(a2, v5);
  }
  return this;
}

uint64_t sirinluinternalsnlc::SNLCParserResponse::readFrom(sirinluinternalsnlc::SNLCParserResponse *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_30;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 16) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 3) = *(_DWORD *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 4;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 16) |= 1u;
        unint64_t v19 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v20 = *(void *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v2)
        {
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v23 = 0;
          if (v2 <= v19) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v19)
            {
              LODWORD(v23) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_47;
            }
            unint64_t v28 = v19 + 1;
            char v29 = *(unsigned char *)(v20 + v19);
            *((void *)a2 + 1) = v28;
            v23 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0) {
              break;
            }
            v26 += 7;
            unint64_t v19 = v28;
            BOOL v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              goto LABEL_46;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v23) = 0;
          }
LABEL_46:
          unint64_t v2 = v28;
        }
        else
        {
          char v21 = 0;
          unsigned int v22 = 0;
          uint64_t v23 = 0;
          while (1)
          {
            unint64_t v2 = v19 + 1;
            *((void *)a2 + 1) = v19 + 1;
            char v24 = *(unsigned char *)(v20 + v19);
            v23 |= (unint64_t)(v24 & 0x7F) << v21;
            if ((v24 & 0x80) == 0) {
              break;
            }
            v21 += 7;
            unint64_t v19 = v2;
            BOOL v14 = v22++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              break;
            }
          }
        }
LABEL_47:
        *((_DWORD *)this + 2) = v23;
      }
      else
      {
LABEL_30:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_30;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluinternalsnlc::SNLCParserResponse::~SNLCParserResponse(sirinluinternalsnlc::SNLCParserResponse *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x1CB772580);
}

uint64_t sirinluinternalsnlc::SNLCParserResponse::SNLCParserResponse(uint64_t this)
{
  *(void *)this = &unk_1F232DBF8;
  *(_DWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

{
  *(void *)this = &unk_1F232DBF8;
  *(_DWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

float sirinluinternalsnlc::SNLCParserResponse::SNLCParserResponse(sirinluinternalsnlc::SNLCParserResponse *this, const sirinluinternalsnlc::SNLCParserResponse *a2)
{
  *(void *)this = &unk_1F232DBF8;
  *((_DWORD *)this + 2) = 0;
  *((_DWORD *)this + 4) = 0;
  if (*((unsigned char *)a2 + 16))
  {
    int v3 = *((_DWORD *)a2 + 2);
    *((unsigned char *)this + 16) = 1;
    *((_DWORD *)this + 2) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 16) & 2) == 0) {
      return result;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 16) & 2) != 0)
  {
LABEL_5:
    float result = *((float *)a2 + 3);
    *((unsigned char *)this + 16) = v2;
    *((float *)this + 3) = result;
  }
  return result;
}

const sirinluinternalsnlc::SNLCParserResponse *sirinluinternalsnlc::SNLCParserResponse::operator=(const sirinluinternalsnlc::SNLCParserResponse *a1, const sirinluinternalsnlc::SNLCParserResponse *a2)
{
  if (a1 != a2)
  {
    sirinluinternalsnlc::SNLCParserResponse::SNLCParserResponse((sirinluinternalsnlc::SNLCParserResponse *)v7, a2);
    int v3 = *((_DWORD *)a1 + 4);
    *((_DWORD *)a1 + 4) = v10;
    int v10 = v3;
    int v4 = *((_DWORD *)a1 + 2);
    *((_DWORD *)a1 + 2) = v8;
    int v8 = v4;
    int v5 = *((_DWORD *)a1 + 3);
    *((_DWORD *)a1 + 3) = v9;
    int v9 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

float sirinluinternalsnlc::swap(sirinluinternalsnlc *this, sirinluinternalsnlc::SNLCParserResponse *a2, sirinluinternalsnlc::SNLCParserResponse *a3)
{
  int v3 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v3;
  int v4 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  float result = *((float *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((float *)a2 + 3) = result;
  return result;
}

float sirinluinternalsnlc::SNLCParserResponse::SNLCParserResponse(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F232DBF8;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  float result = *(float *)(a2 + 12);
  *(float *)(a1 + 12) = result;
  return result;
}

{
  float result;

  *(void *)a1 = &unk_1F232DBF8;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  float result = *(float *)(a2 + 12);
  *(float *)(a1 + 12) = result;
  return result;
}

_DWORD *sirinluinternalsnlc::SNLCParserResponse::operator=(_DWORD *a1, _DWORD *a2)
{
  if (a1 != a2)
  {
    int v10 = &unk_1F232DBF8;
    int v3 = a2[4];
    a2[4] = 0;
    int v4 = a2[2];
    int v5 = a2[3];
    int v6 = a1[4];
    a1[4] = v3;
    int v13 = v6;
    int v7 = a1[2];
    a1[2] = v4;
    int v11 = v7;
    int v8 = a1[3];
    a1[3] = v5;
    int v12 = v8;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

BOOL sirinluinternalsnlc::SNLCParserResponse::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 16))
  {
    if ((*(unsigned char *)(a2 + 16) & 1) == 0 || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 16))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 16) & 2) == 0;
  if ((*(unsigned char *)(a1 + 16) & 2) != 0) {
    return (*(unsigned char *)(a2 + 16) & 2) != 0 && *(float *)(a1 + 12) == *(float *)(a2 + 12);
  }
  return v2;
}

uint64_t sirinluinternalsnlc::SNLCParserResponse::hash_value(sirinluinternalsnlc::SNLCParserResponse *this)
{
  if ((*((unsigned char *)this + 16) & 1) == 0)
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 16) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v3 = 0;
    return v3 ^ v1;
  }
  uint64_t v1 = *((int *)this + 2);
  if ((*((unsigned char *)this + 16) & 2) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  float v2 = *((float *)this + 3);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  return v3 ^ v1;
}

BOOL SIRINLUINTERNALOVERRIDESTurnInputAndPreprocessingReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  int v4 = (int *)MEMORY[0x1E4F940E0];
  int v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  int v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v17 = PBReaderReadString();
        char v18 = *(SIRINLUINTERNALTokenChain **)(a1 + 32);
        *(void *)(a1 + 32) = v17;
        goto LABEL_31;
      case 2u:
        char v18 = objc_alloc_init(SIRINLUINTERNALTokenChain);
        objc_storeStrong((id *)(a1 + 16), v18);
        if (!PBReaderPlaceMark() || !SIRINLUINTERNALTokenChainReadFrom((char *)v18, a2)) {
          goto LABEL_35;
        }
        goto LABEL_30;
      case 3u:
        char v18 = objc_alloc_init(SIRINLUINTERNALMatchingSpan);
        [(id)a1 addMatchingSpans:v18];
        if (!PBReaderPlaceMark() || (SIRINLUINTERNALMatchingSpanReadFrom((uint64_t)v18, a2) & 1) == 0) {
          goto LABEL_35;
        }
        goto LABEL_30;
      case 4u:
        char v18 = objc_alloc_init(SIRINLUEXTERNALTurnInput);
        objc_storeStrong((id *)(a1 + 24), v18);
        if PBReaderPlaceMark() && (SIRINLUEXTERNALTurnInputReadFrom((uint64_t)v18, a2))
        {
LABEL_30:
          PBReaderRecallMark();
LABEL_31:

LABEL_32:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_35:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_32;
    }
  }
}

uint64_t SIRINLUINTERNALSNLP_INTERMEDIATESpanFeaturizerResponseReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  int v4 = (int *)MEMORY[0x1E4F940E0];
  int v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = objc_alloc_init(SIRINLUINTERNALSNLP_INTERMEDIATELinearizedTensor);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark()
          || (SIRINLUINTERNALSNLP_INTERMEDIATELinearizedTensorReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t SIRICOMMONInt32ValueReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  int v4 = (int *)MEMORY[0x1E4F940E0];
  int v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 12) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_29;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_31;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_29:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v19) = 0;
        }
LABEL_31:
        *(_DWORD *)(a1 + 8) = v19;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t siricommon::Int64Value::formatText(siricommon::Int64Value *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 16)) {
    PB::TextFormatter::format(a2, "value");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t siricommon::Int64Value::writeTo(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(result + 16)) {
    return MEMORY[0x1F4147520](a2, *(void *)(result + 8), 1);
  }
  return result;
}

uint64_t siricommon::Int64Value::readFrom(siricommon::Int64Value *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_29;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 16) |= 1u;
        unint64_t v19 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
        uint64_t v20 = *(void *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v3)
        {
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v23 = 0;
          if (v3 <= v19) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          else {
            unint64_t v2 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v2 == v19)
            {
              uint64_t v23 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_43;
            }
            unint64_t v28 = v19 + 1;
            char v29 = *(unsigned char *)(v20 + v19);
            *((void *)a2 + 1) = v28;
            v23 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0) {
              break;
            }
            v26 += 7;
            unint64_t v19 = v28;
            BOOL v14 = v27++ > 8;
            if (v14)
            {
              uint64_t v23 = 0;
              goto LABEL_42;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v23 = 0;
          }
LABEL_42:
          unint64_t v2 = v28;
        }
        else
        {
          char v21 = 0;
          unsigned int v22 = 0;
          uint64_t v23 = 0;
          while (1)
          {
            unint64_t v2 = v19 + 1;
            *((void *)a2 + 1) = v19 + 1;
            char v24 = *(unsigned char *)(v20 + v19);
            v23 |= (unint64_t)(v24 & 0x7F) << v21;
            if ((v24 & 0x80) == 0) {
              break;
            }
            v21 += 7;
            unint64_t v19 = v2;
            BOOL v14 = v22++ > 8;
            if (v14)
            {
              uint64_t v23 = 0;
              break;
            }
          }
        }
LABEL_43:
        *((void *)this + 1) = v23;
      }
      else
      {
LABEL_29:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
      }
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_29;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void siricommon::Int64Value::~Int64Value(siricommon::Int64Value *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x1CB772580);
}

uint64_t siricommon::Int64Value::Int64Value(uint64_t this)
{
  *(void *)this = &unk_1F232DC48;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

{
  *(void *)this = &unk_1F232DC48;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t siricommon::Int64Value::Int64Value(uint64_t this, const siricommon::Int64Value *a2)
{
  *(void *)this = &unk_1F232DC48;
  *(_DWORD *)(this + 16) = 0;
  if (*((unsigned char *)a2 + 16))
  {
    uint64_t v2 = *((void *)a2 + 1);
    *(unsigned char *)(this + 16) = 1;
    *(void *)(this + 8) = v2;
  }
  return this;
}

{
  uint64_t v2;

  *(void *)this = &unk_1F232DC48;
  *(_DWORD *)(this + 16) = 0;
  if (*((unsigned char *)a2 + 16))
  {
    uint64_t v2 = *((void *)a2 + 1);
    *(unsigned char *)(this + 16) = 1;
    *(void *)(this + 8) = v2;
  }
  return this;
}

uint64_t siricommon::Int64Value::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    int v4 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = *(unsigned char *)(a2 + 16) & 1;
    int v8 = v4;
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v7[0] = &unk_1F232DC48;
    v7[1] = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  void v8[2];
  int v9;

  if (a1 != a2)
  {
    uint64_t v3 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = 0;
    int v4 = *(void *)(a2 + 8);
    uint64_t v5 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v3;
    char v9 = v5;
    int v6 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v8[0] = &unk_1F232DC48;
    v8[1] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t siricommon::swap(uint64_t this, siricommon::Int64Value *a2, siricommon::Int64Value *a3)
{
  int v3 = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v3;
  uint64_t v4 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  return this;
}

uint64_t siricommon::Int64Value::Int64Value(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &unk_1F232DC48;
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  *(void *)(result + 8) = *(void *)(a2 + 8);
  return result;
}

{
  *(void *)uint64_t result = &unk_1F232DC48;
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  *(void *)(result + 8) = *(void *)(a2 + 8);
  return result;
}

BOOL siricommon::Int64Value::operator==(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a1 + 16);
  BOOL result = (*(unsigned char *)(a2 + 16) & 1) == 0;
  if (v3) {
    return (*(unsigned char *)(a2 + 16) & 1) != 0 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  }
  return result;
}

uint64_t siricommon::Int64Value::hash_value(siricommon::Int64Value *this)
{
  if (*((unsigned char *)this + 16)) {
    return *((void *)this + 1);
  }
  else {
    return 0;
  }
}

BOOL SIRINLUEXTERNALNLContextReadFrom(id *a1, uint64_t a2)
{
  char v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  int v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        unint64_t v17 = objc_alloc_init(SIRINLUEXTERNALSystemDialogActGroup);
        objc_storeStrong(a1 + 4, v17);
        if (PBReaderPlaceMark()
          && SIRINLUEXTERNALSystemDialogActGroupReadFrom((id *)&v17->super.super.isa, a2))
        {
          goto LABEL_34;
        }
        goto LABEL_38;
      case 2u:
        unint64_t v17 = objc_alloc_init(SIRINLUEXTERNALTask);
        [a1 addActiveTasks:v17];
        goto LABEL_26;
      case 3u:
        unint64_t v17 = objc_alloc_init(SIRINLUEXTERNALTask);
        [a1 addExecutedTasks:v17];
LABEL_26:
        if (!PBReaderPlaceMark() || !SIRINLUEXTERNALTaskReadFrom((id *)&v17->super.super.isa, a2)) {
          goto LABEL_38;
        }
        goto LABEL_34;
      case 4u:
        unint64_t v17 = objc_alloc_init(SIRINLUEXTERNALEntityCandidate);
        [a1 addSalientEntities:v17];
        if (!PBReaderPlaceMark()
          || !SIRINLUEXTERNALEntityCandidateReadFrom((id *)&v17->super.super.isa, a2))
        {
          goto LABEL_38;
        }
        goto LABEL_34;
      case 5u:
        unint64_t v17 = objc_alloc_init(SIRINLUEXTERNALSystemDialogAct);
        [a1 addSystemDialogActs:v17];
        if (PBReaderPlaceMark()
          && SIRINLUEXTERNALSystemDialogActReadFrom((id *)&v17->super.super.isa, a2))
        {
LABEL_34:
          PBReaderRecallMark();

LABEL_35:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_38:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_35;
    }
  }
}

uint64_t sirinluinternal::MentionResolverSpanData::formatText(sirinluinternal::MentionResolverSpanData *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 24);
  if (v5)
  {
    PB::TextFormatter::format(a2, "joint_score", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 24);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(a2, "model_score", *((double *)this + 2));
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluinternal::MentionResolverSpanData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 24);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    char v4 = *(unsigned char *)(v3 + 24);
  }
  if ((v4 & 2) != 0)
  {
    double v5 = *(double *)(v3 + 16);
    return PB::Writer::write(a2, v5);
  }
  return this;
}

uint64_t sirinluinternal::MentionResolverSpanData::readFrom(sirinluinternal::MentionResolverSpanData *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          BOOL v14 = v16++ > 8;
          if (v14) {
            goto LABEL_26;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_26;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 24) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_30;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
      }
      else
      {
        if ((v11 >> 3) != 1)
        {
LABEL_26:
          uint64_t result = PB::Reader::skip(a2);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          goto LABEL_33;
        }
        *((unsigned char *)this + 24) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2))
        {
LABEL_30:
          *((unsigned char *)a2 + 24) = 1;
          goto LABEL_33;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
      }
      unint64_t v2 = *((void *)a2 + 1) + 8;
      *((void *)a2 + 1) = v2;
LABEL_33:
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((unsigned char *)a2 + 24));
  }
  return v4 == 0;
}

void sirinluinternal::MentionResolverSpanData::~MentionResolverSpanData(sirinluinternal::MentionResolverSpanData *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x1CB772580);
}

uint64_t sirinluinternal::MentionResolverSpanData::MentionResolverSpanData(uint64_t this)
{
  *(void *)this = &unk_1F232DC98;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(void *)this = &unk_1F232DC98;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

double sirinluinternal::MentionResolverSpanData::MentionResolverSpanData(sirinluinternal::MentionResolverSpanData *this, const sirinluinternal::MentionResolverSpanData *a2)
{
  *(void *)this = &unk_1F232DC98;
  *((_DWORD *)this + 6) = 0;
  if (*((unsigned char *)a2 + 24))
  {
    double result = *((double *)a2 + 1);
    *((unsigned char *)this + 24) = 1;
    *((double *)this + 1) = result;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 24) & 2) == 0) {
      return result;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 24) & 2) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 2);
    *((unsigned char *)this + 24) = v2;
    *((double *)this + 2) = result;
  }
  return result;
}

uint64_t sirinluinternal::MentionResolverSpanData::operator=(uint64_t a1, const sirinluinternal::MentionResolverSpanData *a2)
{
  if ((const sirinluinternal::MentionResolverSpanData *)a1 != a2)
  {
    sirinluinternal::MentionResolverSpanData::MentionResolverSpanData((sirinluinternal::MentionResolverSpanData *)&v6, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v8;
    int v8 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v4;
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

double sirinluinternal::swap(sirinluinternal *this, sirinluinternal::MentionResolverSpanData *a2, sirinluinternal::MentionResolverSpanData *a3)
{
  int v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double sirinluinternal::MentionResolverSpanData::MentionResolverSpanData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F232DC98;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

{
  double result;

  *(void *)a1 = &unk_1F232DC98;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t sirinluinternal::MentionResolverSpanData::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v7 = &unk_1F232DC98;
    int v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    int v9 = *(_DWORD *)(a1 + 24);
    long long v4 = *(_OWORD *)(a1 + 8);
    long long v5 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 24) = v3;
    *(_OWORD *)(a1 + 8) = v5;
    long long v8 = v4;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

BOOL sirinluinternal::MentionResolverSpanData::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    if ((*(unsigned char *)(a2 + 24) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 24))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 24) & 2) == 0;
  if ((*(unsigned char *)(a1 + 24) & 2) != 0) {
    return (*(unsigned char *)(a2 + 24) & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  }
  return v2;
}

uint64_t sirinluinternal::MentionResolverSpanData::hash_value(sirinluinternal::MentionResolverSpanData *this)
{
  if (*((unsigned char *)this + 24))
  {
    double v1 = *((double *)this + 1);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 24) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_9:
    double v2 = 0.0;
    return *(void *)&v2 ^ *(void *)&v1;
  }
  double v1 = 0.0;
  if ((*((unsigned char *)this + 24) & 2) == 0) {
    goto LABEL_9;
  }
LABEL_3:
  double v2 = *((double *)this + 2);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  return *(void *)&v2 ^ *(void *)&v1;
}

BOOL SIRINLUEXTERNALUserWantedToRepeatReadFrom(uint64_t a1, uint64_t a2)
{
  int v3 = (int *)MEMORY[0x1E4F940E8];
  long long v4 = (int *)MEMORY[0x1E4F940E0];
  long long v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    long long v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        unint64_t v17 = objc_alloc_init(SIRINLUEXTERNALUUID);
        objc_storeStrong((id *)(a1 + 16), v17);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_30;
        }
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_27:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    unint64_t v17 = objc_alloc_init(SIRINLUEXTERNALUsoGraph);
    objc_storeStrong((id *)(a1 + 8), v17);
    if (!PBReaderPlaceMark() || !SIRINLUEXTERNALUsoGraphReadFrom((id *)&v17->super.super.isa, a2))
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL SIRINLUEXTERNALSystemDialogActReadFrom(id *a1, uint64_t a2)
{
  int v3 = (int *)MEMORY[0x1E4F940E8];
  long long v4 = (int *)MEMORY[0x1E4F940E0];
  long long v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  long long v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        unint64_t v17 = objc_alloc_init(SIRINLUEXTERNALUUID);
        objc_storeStrong(a1 + 2, v17);
        if PBReaderPlaceMark() && (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v17, a2)) {
          goto LABEL_43;
        }
        goto LABEL_50;
      case 2u:
        unint64_t v17 = objc_alloc_init(SIRINLUEXTERNALSystemPrompted);
        objc_storeStrong(a1 + 5, v17);
        if (!PBReaderPlaceMark() || !SIRINLUEXTERNALSystemPromptedReadFrom((uint64_t)v17, a2)) {
          goto LABEL_50;
        }
        goto LABEL_43;
      case 3u:
        unint64_t v17 = objc_alloc_init(SIRINLUEXTERNALSystemOffered);
        objc_storeStrong(a1 + 4, v17);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALSystemOfferedReadFrom((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_50;
        }
        goto LABEL_43;
      case 4u:
        unint64_t v17 = objc_alloc_init(SIRINLUEXTERNALSystemGaveOptions);
        objc_storeStrong(a1 + 1, v17);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALSystemGaveOptionsReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_50;
        }
        goto LABEL_43;
      case 5u:
        unint64_t v17 = objc_alloc_init(SIRINLUEXTERNALSystemInformed);
        objc_storeStrong(a1 + 3, v17);
        if (!PBReaderPlaceMark()
          || !SIRINLUEXTERNALSystemInformedReadFrom((id *)&v17->super.super.isa, a2))
        {
          goto LABEL_50;
        }
        goto LABEL_43;
      case 6u:
        unint64_t v17 = objc_alloc_init(SIRINLUEXTERNALSystemReportedSuccess);
        objc_storeStrong(a1 + 8, v17);
        if (!PBReaderPlaceMark() || !SIRINLUEXTERNALSystemReportedSuccessReadFrom((uint64_t)v17, a2)) {
          goto LABEL_50;
        }
        goto LABEL_43;
      case 7u:
        unint64_t v17 = objc_alloc_init(SIRINLUEXTERNALSystemReportedFailure);
        objc_storeStrong(a1 + 7, v17);
        if (PBReaderPlaceMark() && SIRINLUEXTERNALSystemReportedFailureReadFrom((uint64_t)v17, a2)) {
          goto LABEL_43;
        }
        goto LABEL_50;
      default:
        if ((v10 >> 3) != 101)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            return 0;
          }
LABEL_44:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
        unint64_t v17 = objc_alloc_init(SIRICOMMONStringValue);
        objc_storeStrong(a1 + 6, v17);
        if PBReaderPlaceMark() && (SIRICOMMONStringValueReadFrom((uint64_t)v17, a2))
        {
LABEL_43:
          PBReaderRecallMark();

          goto LABEL_44;
        }
LABEL_50:

        return 0;
    }
  }
}

uint64_t SIRICOMMONInt64ValueReadFrom(uint64_t a1, uint64_t a2)
{
  int v3 = (int *)MEMORY[0x1E4F940E8];
  long long v4 = (int *)MEMORY[0x1E4F940E0];
  long long v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    long long v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 16) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_29;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v19 = 0;
            goto LABEL_31;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_29:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v19 = 0;
        }
LABEL_31:
        *(void *)(a1 + 8) = v19;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL SIRINLUINTERNALEMBEDDINGEmbeddingRequestReadFrom(uint64_t a1, uint64_t a2)
{
  int v3 = (int *)MEMORY[0x1E4F940E8];
  long long v4 = (int *)MEMORY[0x1E4F940E0];
  long long v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    long long v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        unsigned int v18 = *(SIRINLUINTERNALTokenChain **)(a1 + 8);
        *(void *)(a1 + 8) = v17;
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_26:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    unsigned int v18 = objc_alloc_init(SIRINLUINTERNALTokenChain);
    objc_storeStrong((id *)(a1 + 16), v18);
    if (!PBReaderPlaceMark() || !SIRINLUINTERNALTokenChainReadFrom((char *)v18, a2))
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_24;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t SIRINLUEXTERNALSystemGaveOptionsReadFrom(void *a1, uint64_t a2)
{
  int v3 = (int *)MEMORY[0x1E4F940E8];
  long long v4 = (int *)MEMORY[0x1E4F940E0];
  long long v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    long long v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = objc_alloc_init(SIRINLUEXTERNALUserDialogAct);
        [a1 addChoices:v17];
        if (!PBReaderPlaceMark()
          || !SIRINLUEXTERNALUserDialogActReadFrom((id *)&v17->super.super.isa, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sirinluinternal::CompareOptions::formatText(sirinluinternal::CompareOptions *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 12);
  if (v5)
  {
    PB::TextFormatter::format(a2, "case_insensitive");
    char v5 = *((unsigned char *)this + 12);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*((unsigned char *)this + 12) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "diacritic_insensitive");
  if ((*((unsigned char *)this + 12) & 4) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(a2, "width_insensitive");
LABEL_5:
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluinternal::CompareOptions::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 12);
  if ((v4 & 1) == 0)
  {
    if ((*(unsigned char *)(this + 12) & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    this = PB::Writer::write(a2);
    if ((*(unsigned char *)(v3 + 12) & 4) == 0) {
      return this;
    }
    goto LABEL_7;
  }
  this = PB::Writer::write(a2);
  char v4 = *(unsigned char *)(v3 + 12);
  if ((v4 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v4 & 4) == 0) {
    return this;
  }
LABEL_7:
  return PB::Writer::write(a2);
}

uint64_t sirinluinternal::CompareOptions::readFrom(sirinluinternal::CompareOptions *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_26;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v19 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((unsigned char *)this + 12) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
        if (v2 >= v3)
        {
          BOOL v24 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v23 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v24 = v23 != 0;
        }
        *((unsigned char *)this + 10) = v24;
      }
      else if (v19 == 2)
      {
        *((unsigned char *)this + 12) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
        if (v2 >= v3)
        {
          BOOL v26 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v25 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v26 = v25 != 0;
        }
        *((unsigned char *)this + 9) = v26;
      }
      else if (v19 == 1)
      {
        *((unsigned char *)this + 12) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
        if (v2 >= v3)
        {
          BOOL v21 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v20 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v21 = v20 != 0;
        }
        *((unsigned char *)this + 8) = v21;
      }
      else
      {
LABEL_26:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
      }
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_26;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluinternal::CompareOptions::~CompareOptions(sirinluinternal::CompareOptions *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x1CB772580);
}

uint64_t sirinluinternal::CompareOptions::CompareOptions(uint64_t this)
{
  *(void *)this = &unk_1F232DCE8;
  *(_WORD *)(this + 8) = 1;
  *(unsigned char *)(this + 10) = 0;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

{
  *(void *)this = &unk_1F232DCE8;
  *(_WORD *)(this + 8) = 1;
  *(unsigned char *)(this + 10) = 0;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

uint64_t sirinluinternal::CompareOptions::CompareOptions(uint64_t this, const sirinluinternal::CompareOptions *a2)
{
  *(void *)this = &unk_1F232DCE8;
  char v2 = 1;
  *(_WORD *)(this + 8) = 1;
  *(unsigned char *)(this + 10) = 0;
  *(_DWORD *)(this + 12) = 0;
  char v3 = *((unsigned char *)a2 + 12);
  if (v3)
  {
    char v4 = *((unsigned char *)a2 + 8);
    *(unsigned char *)(this + 12) = 1;
    *(unsigned char *)(this + 8) = v4;
    char v3 = *((unsigned char *)a2 + 12);
    if ((v3 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v2 = 0;
  if ((*((unsigned char *)a2 + 12) & 2) != 0)
  {
LABEL_5:
    char v5 = *((unsigned char *)a2 + 9);
    v2 |= 2u;
    *(unsigned char *)(this + 12) = v2;
    *(unsigned char *)(this + 9) = v5;
    char v3 = *((unsigned char *)a2 + 12);
  }
LABEL_6:
  if ((v3 & 4) != 0)
  {
    char v6 = *((unsigned char *)a2 + 10);
    *(unsigned char *)(this + 12) = v2 | 4;
    *(unsigned char *)(this + 10) = v6;
  }
  return this;
}

uint64_t sirinluinternal::CompareOptions::operator=(uint64_t a1, const sirinluinternal::CompareOptions *a2)
{
  if ((const sirinluinternal::CompareOptions *)a1 != a2)
  {
    sirinluinternal::CompareOptions::CompareOptions((uint64_t)&v5, a2);
    int v3 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = v8;
    int v8 = v3;
    LOBYTE(v3) = *(unsigned char *)(a1 + 8);
    *(unsigned char *)(a1 + 8) = v6;
    char v6 = v3;
    LOWORD(v3) = *(_WORD *)(a1 + 9);
    *(_WORD *)(a1 + 9) = v7;
    __int16 v7 = v3;
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t sirinluinternal::swap(uint64_t this, sirinluinternal::CompareOptions *a2, sirinluinternal::CompareOptions *a3)
{
  int v3 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  LOBYTE(v3) = *(unsigned char *)(this + 8);
  *(unsigned char *)(this + 8) = *((unsigned char *)a2 + 8);
  *((unsigned char *)a2 + 8) = v3;
  LOBYTE(v3) = *(unsigned char *)(this + 9);
  *(unsigned char *)(this + 9) = *((unsigned char *)a2 + 9);
  *((unsigned char *)a2 + 9) = v3;
  LOBYTE(v3) = *(unsigned char *)(this + 10);
  *(unsigned char *)(this + 10) = *((unsigned char *)a2 + 10);
  *((unsigned char *)a2 + 10) = v3;
  return this;
}

uint64_t sirinluinternal::CompareOptions::CompareOptions(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &unk_1F232DCE8;
  *(_WORD *)(result + 8) = 1;
  *(unsigned char *)(result + 10) = 0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(unsigned char *)(result + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(result + 9) = *(unsigned char *)(a2 + 9);
  *(unsigned char *)(result + 10) = *(unsigned char *)(a2 + 10);
  return result;
}

{
  *(void *)uint64_t result = &unk_1F232DCE8;
  *(_WORD *)(result + 8) = 1;
  *(unsigned char *)(result + 10) = 0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(unsigned char *)(result + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(result + 9) = *(unsigned char *)(a2 + 9);
  *(unsigned char *)(result + 10) = *(unsigned char *)(a2 + 10);
  return result;
}

uint64_t sirinluinternal::CompareOptions::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v8 = &unk_1F232DCE8;
    int v3 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = 0;
    char v4 = *(unsigned char *)(a2 + 8);
    __int16 v5 = *(_WORD *)(a2 + 9);
    int v6 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = v3;
    int v11 = v6;
    LOBYTE(v3) = *(unsigned char *)(a1 + 8);
    *(unsigned char *)(a1 + 8) = v4;
    char v9 = v3;
    LOWORD(v3) = *(_WORD *)(a1 + 9);
    *(_WORD *)(a1 + 9) = v5;
    __int16 v10 = v3;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

BOOL sirinluinternal::CompareOptions::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1[12])
  {
    if ((a2[12] & 1) == 0 || a1[8] != a2[8]) {
      return 0;
    }
  }
  else if (a2[12])
  {
    return 0;
  }
  if ((a1[12] & 2) != 0)
  {
    if ((a2[12] & 2) == 0 || a1[9] != a2[9]) {
      return 0;
    }
  }
  else if ((a2[12] & 2) != 0)
  {
    return 0;
  }
  BOOL v2 = (a2[12] & 4) == 0;
  if ((a1[12] & 4) != 0) {
    return (a2[12] & 4) != 0 && a1[10] == a2[10];
  }
  return v2;
}

uint64_t sirinluinternal::CompareOptions::hash_value(sirinluinternal::CompareOptions *this)
{
  if ((*((unsigned char *)this + 12) & 1) == 0)
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 12) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v2 = 0;
    if ((*((unsigned char *)this + 12) & 4) != 0) {
      goto LABEL_4;
    }
LABEL_7:
    uint64_t v3 = 0;
    return v2 ^ v1 ^ v3;
  }
  uint64_t v1 = *((unsigned __int8 *)this + 8);
  if ((*((unsigned char *)this + 12) & 2) == 0) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v2 = *((unsigned __int8 *)this + 9);
  if ((*((unsigned char *)this + 12) & 4) == 0) {
    goto LABEL_7;
  }
LABEL_4:
  uint64_t v3 = *((unsigned __int8 *)this + 10);
  return v2 ^ v1 ^ v3;
}

BOOL SIRINLUEXTERNALSemVerReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  char v4 = (int *)MEMORY[0x1E4F940E0];
  __int16 v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    __int16 v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        char v26 = 0;
        unsigned int v27 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 20) |= 4u;
        while (1)
        {
          uint64_t v28 = *v3;
          unint64_t v29 = *(void *)(a2 + v28);
          if (v29 == -1 || v29 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
          *(void *)(a2 + v28) = v29 + 1;
          v20 |= (unint64_t)(v30 & 0x7F) << v26;
          if ((v30 & 0x80) == 0)
          {
            int v25 = &OBJC_IVAR___SIRINLUEXTERNALSemVer__patchVersion;
            goto LABEL_48;
          }
          v26 += 7;
          BOOL v24 = v27++ > 8;
          if (v24)
          {
            LODWORD(v20) = 0;
            int v25 = &OBJC_IVAR___SIRINLUEXTERNALSemVer__patchVersion;
            goto LABEL_50;
          }
        }
        int v25 = &OBJC_IVAR___SIRINLUEXTERNALSemVer__patchVersion;
LABEL_47:
        *(unsigned char *)(a2 + *v5) = 1;
        goto LABEL_48;
      }
      if (v17 == 2) {
        break;
      }
      if (v17 == 1)
      {
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 20) |= 1u;
        while (1)
        {
          uint64_t v21 = *v3;
          unint64_t v22 = *(void *)(a2 + v21);
          if (v22 == -1 || v22 >= *(void *)(a2 + *v4))
          {
            int v25 = &OBJC_IVAR___SIRINLUEXTERNALSemVer__majorVersion;
            goto LABEL_47;
          }
          char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0) {
            break;
          }
          v18 += 7;
          BOOL v24 = v19++ > 8;
          if (v24)
          {
            LODWORD(v20) = 0;
            int v25 = &OBJC_IVAR___SIRINLUEXTERNALSemVer__majorVersion;
            goto LABEL_50;
          }
        }
        int v25 = &OBJC_IVAR___SIRINLUEXTERNALSemVer__majorVersion;
        goto LABEL_48;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_51:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v31 = 0;
    unsigned int v32 = 0;
    uint64_t v20 = 0;
    *(unsigned char *)(a1 + 20) |= 2u;
    while (1)
    {
      uint64_t v33 = *v3;
      unint64_t v34 = *(void *)(a2 + v33);
      if (v34 == -1 || v34 >= *(void *)(a2 + *v4))
      {
        int v25 = &OBJC_IVAR___SIRINLUEXTERNALSemVer__minorVersion;
        goto LABEL_47;
      }
      char v35 = *(unsigned char *)(*(void *)(a2 + *v7) + v34);
      *(void *)(a2 + v33) = v34 + 1;
      v20 |= (unint64_t)(v35 & 0x7F) << v31;
      if ((v35 & 0x80) == 0) {
        break;
      }
      v31 += 7;
      BOOL v24 = v32++ > 8;
      if (v24)
      {
        LODWORD(v20) = 0;
        int v25 = &OBJC_IVAR___SIRINLUEXTERNALSemVer__minorVersion;
        goto LABEL_50;
      }
    }
    int v25 = &OBJC_IVAR___SIRINLUEXTERNALSemVer__minorVersion;
LABEL_48:
    if (*(unsigned char *)(a2 + *v5)) {
      LODWORD(v20) = 0;
    }
LABEL_50:
    *(_DWORD *)(a1 + *v25) = v20;
    goto LABEL_51;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sirinluexternal::UsoOntologyVocabulary::formatText(sirinluexternal::UsoOntologyVocabulary *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  for (uint64_t i = *((void *)this + 2); v5 != i; v5 += 24)
    PB::TextFormatter::format();
  uint64_t v7 = *((void *)this + 4);
  if (v7) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "uso_version");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluexternal::UsoOntologyVocabulary::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(const PB::Base **)(this + 32);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  uint64_t v5 = *(void *)(v3 + 8);
  uint64_t v6 = *(void *)(v3 + 16);
  while (v5 != v6)
  {
    this = PB::Writer::write();
    v5 += 24;
  }
  return this;
}

uint64_t sirinluexternal::UsoOntologyVocabulary::readFrom(sirinluexternal::UsoOntologyVocabulary *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    char v8 = (std::vector<std::string> *)((char *)this + 8);
    unsigned int v9 = (std::allocator<std::string> *)((char *)this + 24);
    while (1)
    {
      uint64_t v10 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v11 = 0;
      unsigned int v12 = 0;
      unint64_t v13 = 0;
      while (1)
      {
        unint64_t v14 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v15 = *(unsigned char *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0) {
          break;
        }
        v11 += 7;
        unint64_t v2 = v14;
        BOOL v16 = v12++ > 8;
        if (v16) {
          goto LABEL_25;
        }
      }
LABEL_21:
      if ((v13 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v13 >> 3) == 2)
      {
        char v23 = (char *)*((void *)this + 2);
        unint64_t v22 = *((void *)this + 3);
        if ((unint64_t)v23 >= v22)
        {
          unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((v23 - (char *)v8->__begin_) >> 3);
          unint64_t v26 = v25 + 1;
          if (v25 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - (unint64_t)v8->__begin_) >> 3);
          if (2 * v27 > v26) {
            unint64_t v26 = 2 * v27;
          }
          if (v27 >= 0x555555555555555) {
            unint64_t v28 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v28 = v26;
          }
          __v.__end_cap_.__value_ = v9;
          if (v28) {
            unint64_t v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v28);
          }
          else {
            uint64_t v29 = 0;
          }
          char v30 = (std::string *)(v28 + 24 * v25);
          __v.__first_ = (std::__split_buffer<std::string>::pointer)v28;
          __v.__begin_ = v30;
          __v.__end_cap_.__value_ = (std::string *)(v28 + 24 * v29);
          v30->__r_.__value_.__r.__words[0] = 0;
          v30->__r_.__value_.__l.__size_ = 0;
          v30->__r_.__value_.__r.__words[2] = 0;
          __v.__end_ = v30 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(v8, &__v);
          BOOL v24 = (void *)*((void *)this + 2);
          std::__split_buffer<std::string>::~__split_buffer(&__v);
        }
        else
        {
          *(void *)char v23 = 0;
          *((void *)v23 + 1) = 0;
          BOOL v24 = v23 + 24;
          *((void *)v23 + 2) = 0;
        }
        *((void *)this + 2) = v24;
        PB::Reader::read();
      }
      else
      {
        if ((v13 >> 3) == 1) {
          operator new();
        }
LABEL_25:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v17 = 0;
    unsigned int v18 = 0;
    unint64_t v13 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v19 = v2 + 1;
      char v20 = *(unsigned char *)(v10 + v2);
      *((void *)a2 + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0) {
        goto LABEL_21;
      }
      v17 += 7;
      unint64_t v2 = v19;
      BOOL v16 = v18++ > 8;
      if (v16) {
        goto LABEL_25;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluexternal::UsoOntologyVocabulary::~UsoOntologyVocabulary(sirinluexternal::UsoOntologyVocabulary *this)
{
  sirinluexternal::UsoOntologyVocabulary::~UsoOntologyVocabulary(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  void **v3;
  uint64_t vars8;

  *(void *)this = &unk_1F232DD38;
  unint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unint64_t v3 = (void **)((char *)this + 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  PB::Base::~Base(this);
}

double sirinluexternal::UsoOntologyVocabulary::UsoOntologyVocabulary(sirinluexternal::UsoOntologyVocabulary *this)
{
  *(void *)this = &unk_1F232DD38;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

{
  double result;

  *(void *)this = &unk_1F232DD38;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

sirinluexternal::UsoOntologyVocabulary *sirinluexternal::UsoOntologyVocabulary::UsoOntologyVocabulary(sirinluexternal::UsoOntologyVocabulary *this, const sirinluexternal::UsoOntologyVocabulary *a2)
{
  *(void *)this = &unk_1F232DD38;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (*((void *)a2 + 4)) {
    operator new();
  }
  if (this != a2) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)((char *)this + 8), *((std::string **)a2 + 1), *((long long **)a2 + 2), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3));
  }
  return this;
}

uint64_t sirinluexternal::UsoOntologyVocabulary::operator=(uint64_t a1, const sirinluexternal::UsoOntologyVocabulary *a2)
{
  if ((const sirinluexternal::UsoOntologyVocabulary *)a1 != a2)
  {
    sirinluexternal::UsoOntologyVocabulary::UsoOntologyVocabulary((sirinluexternal::UsoOntologyVocabulary *)v6, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v8;
    long long v7 = v3;
    long long v8 = v4;
    sirinluexternal::UsoOntologyVocabulary::~UsoOntologyVocabulary((sirinluexternal::UsoOntologyVocabulary *)v6);
  }
  return a1;
}

void *sirinluexternal::swap(void *this, sirinluexternal::UsoOntologyVocabulary *a2, sirinluexternal::UsoOntologyVocabulary *a3)
{
  uint64_t v3 = this[4];
  this[4] = *((void *)a2 + 4);
  *((void *)a2 + 4) = v3;
  uint64_t v4 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  uint64_t v5 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  uint64_t v6 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v6;
  return this;
}

uint64_t sirinluexternal::UsoOntologyVocabulary::UsoOntologyVocabulary(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v4 = (std::vector<std::string> *)(a1 + 8);
  *(void *)a1 = &unk_1F232DD38;
  *(_OWORD *)(a1 + 24) = 0u;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v5;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  std::vector<std::string>::__vdeallocate(v4);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

uint64_t sirinluexternal::UsoOntologyVocabulary::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sirinluexternal::UsoOntologyVocabulary::UsoOntologyVocabulary((uint64_t)v6, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v8;
    long long v7 = v3;
    long long v8 = v4;
    sirinluexternal::UsoOntologyVocabulary::~UsoOntologyVocabulary((sirinluexternal::UsoOntologyVocabulary *)v6);
  }
  return a1;
}

BOOL sirinluexternal::UsoOntologyVocabulary::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a2 + 32);
  if (v4)
  {
    if (!v5 || !sirinluexternal::SemVer::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  uint64_t v8 = a1 + 8;
  uint64_t v6 = *(unsigned __int8 **)(a1 + 8);
  long long v7 = *(unsigned __int8 **)(v8 + 8);
  uint64_t v10 = a2 + 8;
  unsigned int v9 = *(unsigned __int8 **)(a2 + 8);
  if (v7 - v6 != *(void *)(v10 + 8) - (void)v9) {
    return 0;
  }
  if (v6 == v7) {
    return 1;
  }
  do
  {
    BOOL result = std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(v6, v9);
    if (!result) {
      break;
    }
    v6 += 24;
    v9 += 24;
  }
  while (v6 != v7);
  return result;
}

uint64_t sirinluexternal::UsoOntologyVocabulary::hash_value(sirinluexternal::UsoOntologyVocabulary *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (!v1)
  {
    uint64_t v5 = 0;
    goto LABEL_11;
  }
  if ((*(unsigned char *)(v1 + 20) & 1) == 0)
  {
    uint64_t v2 = 0;
    if ((*(unsigned char *)(v1 + 20) & 2) != 0) {
      goto LABEL_4;
    }
LABEL_8:
    uint64_t v3 = 0;
    if ((*(unsigned char *)(v1 + 20) & 4) != 0) {
      goto LABEL_5;
    }
LABEL_9:
    uint64_t v4 = 0;
    goto LABEL_10;
  }
  uint64_t v2 = *(unsigned int *)(v1 + 8);
  if ((*(unsigned char *)(v1 + 20) & 2) == 0) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v3 = *(unsigned int *)(v1 + 12);
  if ((*(unsigned char *)(v1 + 20) & 4) == 0) {
    goto LABEL_9;
  }
LABEL_5:
  uint64_t v4 = *(unsigned int *)(v1 + 16);
LABEL_10:
  uint64_t v5 = v3 ^ v2 ^ v4;
LABEL_11:
  uint64_t v6 = *((void *)this + 1);
  uint64_t v7 = *((void *)this + 2);
  if (v6 == v7)
  {
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = 0;
    do
    {
      v8 ^= std::__string_hash<char>::operator()[abi:ne180100](v6);
      v6 += 24;
    }
    while (v6 != v7);
  }
  return v8 ^ v5;
}

uint64_t sirinluexternal::UsoOntologyVocabulary::makeUsoVersion(uint64_t this)
{
  if (!*(void *)(this + 32)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternalsnlp_intermediate::NLv4AssetVersion::formatText(sirinluinternalsnlp_intermediate::NLv4AssetVersion *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "version");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluinternalsnlp_intermediate::NLv4AssetVersion::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2);
  }
  return this;
}

uint64_t sirinluinternalsnlp_intermediate::NLv4AssetVersion::readFrom(sirinluinternalsnlp_intermediate::NLv4AssetVersion *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluinternalsnlp_intermediate::NLv4AssetVersion::~NLv4AssetVersion(sirinluinternalsnlp_intermediate::NLv4AssetVersion *this)
{
  sirinluinternalsnlp_intermediate::NLv4AssetVersion::~NLv4AssetVersion(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t vars8;

  unint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1F232DD88;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

void *sirinluinternalsnlp_intermediate::NLv4AssetVersion::NLv4AssetVersion(void *this)
{
  *this = &unk_1F232DD88;
  this[1] = 0;
  return this;
}

{
  *this = &unk_1F232DD88;
  this[1] = 0;
  return this;
}

void *sirinluinternalsnlp_intermediate::NLv4AssetVersion::NLv4AssetVersion(void *this, const sirinluinternalsnlp_intermediate::NLv4AssetVersion *a2)
{
  *this = &unk_1F232DD88;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const sirinluinternalsnlp_intermediate::NLv4AssetVersion *sirinluinternalsnlp_intermediate::NLv4AssetVersion::operator=(const sirinluinternalsnlp_intermediate::NLv4AssetVersion *a1, const sirinluinternalsnlp_intermediate::NLv4AssetVersion *a2)
{
  if (a1 != a2)
  {
    sirinluinternalsnlp_intermediate::NLv4AssetVersion::NLv4AssetVersion(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    sirinluinternalsnlp_intermediate::NLv4AssetVersion::~NLv4AssetVersion((sirinluinternalsnlp_intermediate::NLv4AssetVersion *)&v5);
  }
  return a1;
}

uint64_t sirinluinternalsnlp_intermediate::swap(uint64_t this, sirinluinternalsnlp_intermediate::NLv4AssetVersion *a2, sirinluinternalsnlp_intermediate::NLv4AssetVersion *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *sirinluinternalsnlp_intermediate::NLv4AssetVersion::NLv4AssetVersion(void *a1, uint64_t a2)
{
  *a1 = &unk_1F232DD88;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_1F232DD88;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t sirinluinternalsnlp_intermediate::NLv4AssetVersion::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = &unk_1F232DD88;
    v6[1] = v4;
    sirinluinternalsnlp_intermediate::NLv4AssetVersion::~NLv4AssetVersion((sirinluinternalsnlp_intermediate::NLv4AssetVersion *)v6);
  }
  return a1;
}

BOOL sirinluinternalsnlp_intermediate::NLv4AssetVersion::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    return (v2 | v3) == 0;
  }
  else {
    return sirinluinternalsnlp_intermediate::SNLPAssetVersion::operator==(v2, v3);
  }
}

sirinluinternalsnlp_intermediate::SNLPAssetVersion *sirinluinternalsnlp_intermediate::NLv4AssetVersion::hash_value(sirinluinternalsnlp_intermediate::NLv4AssetVersion *this)
{
  uint64_t result = (sirinluinternalsnlp_intermediate::SNLPAssetVersion *)*((void *)this + 1);
  if (result) {
    return (sirinluinternalsnlp_intermediate::SNLPAssetVersion *)sirinluinternalsnlp_intermediate::SNLPAssetVersion::hash_value(result);
  }
  return result;
}

uint64_t sirinluinternalsnlp_intermediate::NLv4AssetVersion::makeVersion(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternalmention_resolver::MentionResolverResponse::formatText(sirinluinternalmention_resolver::MentionResolverResponse *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = (uint64_t *)*((void *)this + 1);
  uint64_t v6 = (uint64_t *)*((void *)this + 2);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "mentions");
  }
  uint64_t v8 = *((void *)this + 4);
  if (v8) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v8 + 32))(v8, a2, "request_id");
  }
  if (*((void *)this + 5)) {
    PB::TextFormatter::format();
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluinternalmention_resolver::MentionResolverResponse::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = (void *)this;
  BOOL v4 = *(const PB::Base **)(this + 32);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  uint64_t v5 = (const PB::Base **)v3[1];
  uint64_t v6 = (const PB::Base **)v3[2];
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    this = PB::Writer::writeSubmessage(a2, v7);
  }
  if (v3[5])
  {
    return PB::Writer::write();
  }
  return this;
}

uint64_t sirinluinternalmention_resolver::MentionResolverResponse::readFrom(sirinluinternalmention_resolver::MentionResolverResponse *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_25;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v18 = v10 >> 3;
      if ((v10 >> 3) == 3) {
        operator new();
      }
      if (v18 == 2) {
        PB::PtrVector<sirinluinternal::MatchingSpan>::emplace_back<>();
      }
      if (v18 == 1) {
        operator new();
      }
LABEL_25:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_25;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluinternalmention_resolver::MentionResolverResponse::~MentionResolverResponse(sirinluinternalmention_resolver::MentionResolverResponse *this)
{
  sirinluinternalmention_resolver::MentionResolverResponse::~MentionResolverResponse(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t v3;
  void **v4;
  uint64_t vars8;

  *(void *)this = &unk_1F232DDD8;
  unint64_t v2 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v2) {
    std::default_delete<std::string>::operator()[abi:ne180100](v2);
  }
  unint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v4);
  PB::Base::~Base(this);
}

double sirinluinternalmention_resolver::MentionResolverResponse::MentionResolverResponse(sirinluinternalmention_resolver::MentionResolverResponse *this)
{
  *(void *)this = &unk_1F232DDD8;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 5) = 0;
  return result;
}

{
  double result;

  *(void *)this = &unk_1F232DDD8;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 5) = 0;
  return result;
}

uint64_t sirinluinternalmention_resolver::MentionResolverResponse::MentionResolverResponse(uint64_t this, const sirinluinternalmention_resolver::MentionResolverResponse *a2)
{
  *(void *)this = &unk_1F232DDD8;
  *(_OWORD *)(this + 8) = 0u;
  *(_OWORD *)(this + 24) = 0u;
  *(void *)(this + 40) = 0;
  if (*((void *)a2 + 4)) {
    operator new();
  }
  if (*((void *)a2 + 1) != *((void *)a2 + 2)) {
    PB::PtrVector<sirinluinternal::MatchingSpan>::emplace_back<sirinluinternal::MatchingSpan const&>();
  }
  if (*((void *)a2 + 5)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternalmention_resolver::MentionResolverResponse::operator=(uint64_t a1, const sirinluinternalmention_resolver::MentionResolverResponse *a2)
{
  if ((const sirinluinternalmention_resolver::MentionResolverResponse *)a1 != a2)
  {
    sirinluinternalmention_resolver::MentionResolverResponse::MentionResolverResponse((uint64_t)&v7, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v3;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    long long v9 = v4;
    uint64_t v5 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v10;
    uint64_t v10 = v5;
    sirinluinternalmention_resolver::MentionResolverResponse::~MentionResolverResponse((sirinluinternalmention_resolver::MentionResolverResponse *)&v7);
  }
  return a1;
}

void *sirinluinternalmention_resolver::swap(void *this, sirinluinternalmention_resolver::MentionResolverResponse *a2, sirinluinternalmention_resolver::MentionResolverResponse *a3)
{
  uint64_t v3 = this[4];
  this[4] = *((void *)a2 + 4);
  *((void *)a2 + 4) = v3;
  uint64_t v4 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  uint64_t v5 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  uint64_t v6 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v6;
  uint64_t v7 = this[5];
  this[5] = *((void *)a2 + 5);
  *((void *)a2 + 5) = v7;
  return this;
}

uint64_t sirinluinternalmention_resolver::MentionResolverResponse::MentionResolverResponse(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F232DDD8;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v4 = (void **)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 40) = 0;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v5;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(v4);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  uint64_t v8 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v7;
  if (v8) {
    std::default_delete<std::string>::operator()[abi:ne180100](v8);
  }
  return a1;
}

uint64_t sirinluinternalmention_resolver::MentionResolverResponse::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sirinluinternalmention_resolver::MentionResolverResponse::MentionResolverResponse((uint64_t)&v7, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v3;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    long long v9 = v4;
    uint64_t v5 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v10;
    uint64_t v10 = v5;
    sirinluinternalmention_resolver::MentionResolverResponse::~MentionResolverResponse((sirinluinternalmention_resolver::MentionResolverResponse *)&v7);
  }
  return a1;
}

uint64_t sirinluinternalmention_resolver::MentionResolverResponse::operator==(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = a1[4];
  uint64_t v5 = *(void *)(a2 + 32);
  if (v4)
  {
    if (!v5 || !sirinluexternal::UUID::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  uint64_t result = PB::PtrVector<sirinluinternal::MatchingSpan>::operator==(a1 + 1, *(uint64_t **)(a2 + 8), *(void *)(a2 + 16));
  if (!result) {
    return result;
  }
  uint64_t v7 = (unsigned __int8 *)a1[5];
  long long v8 = *(unsigned __int8 ***)(a2 + 40);
  uint64_t result = v8 == 0;
  if (!v7) {
    return result;
  }
  if (!v8) {
    return 0;
  }
  uint64_t v9 = v7[23];
  if ((v9 & 0x80u) == 0) {
    uint64_t v10 = (unsigned __int8 *)v7[23];
  }
  else {
    uint64_t v10 = (unsigned __int8 *)*((void *)v7 + 1);
  }
  unint64_t v11 = (unsigned __int8 *)*((unsigned __int8 *)v8 + 23);
  int v12 = (char)v11;
  if ((char)v11 < 0) {
    unint64_t v11 = v8[1];
  }
  if (v10 != v11) {
    return 0;
  }
  if (v12 >= 0) {
    BOOL v13 = *(unsigned __int8 **)(a2 + 40);
  }
  else {
    BOOL v13 = *v8;
  }
  if ((v9 & 0x80) != 0) {
    return !memcmp(*(const void **)v7, v13, *((void *)v7 + 1));
  }
  if (!v7[23]) {
    return 1;
  }
  uint64_t v14 = v9 - 1;
  do
  {
    int v16 = *v7++;
    int v15 = v16;
    int v18 = *v13++;
    int v17 = v18;
    BOOL v20 = v14-- != 0;
    uint64_t result = v15 == v17;
  }
  while (v15 == v17 && v20);
  return result;
}

unint64_t sirinluinternalmention_resolver::MentionResolverResponse::hash_value(sirinluinternalmention_resolver::MentionResolverResponse *this)
{
  uint64_t v2 = *((void *)this + 4);
  if (!v2)
  {
    uint64_t v6 = 0;
    goto LABEL_11;
  }
  if ((*(unsigned char *)(v2 + 28) & 1) == 0)
  {
    uint64_t v3 = 0;
    if ((*(unsigned char *)(v2 + 28) & 2) != 0) {
      goto LABEL_4;
    }
LABEL_8:
    uint64_t v4 = 0;
    if ((*(unsigned char *)(v2 + 28) & 4) != 0) {
      goto LABEL_5;
    }
LABEL_9:
    uint64_t v5 = 0;
    goto LABEL_10;
  }
  uint64_t v3 = *(void *)(v2 + 8);
  if ((*(unsigned char *)(v2 + 28) & 2) == 0) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v4 = *(void *)(v2 + 16);
  if ((*(unsigned char *)(v2 + 28) & 4) == 0) {
    goto LABEL_9;
  }
LABEL_5:
  uint64_t v5 = *(int *)(v2 + 24);
LABEL_10:
  uint64_t v6 = v4 ^ v3 ^ v5;
LABEL_11:
  uint64_t v7 = (sirinluinternal::MatchingSpan **)*((void *)this + 1);
  long long v8 = (sirinluinternal::MatchingSpan **)*((void *)this + 2);
  if (v7 == v8)
  {
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v9 = 0;
    do
    {
      uint64_t v10 = *v7++;
      v9 ^= sirinluinternal::MatchingSpan::hash_value(v10);
    }
    while (v7 != v8);
  }
  unint64_t v11 = *((void *)this + 5);
  if (v11) {
    unint64_t v11 = std::__string_hash<char>::operator()[abi:ne180100](v11);
  }
  return v9 ^ v6 ^ v11;
}

uint64_t sirinluinternalmention_resolver::MentionResolverResponse::makeRequestId(uint64_t this)
{
  if (!*(void *)(this + 32)) {
    operator new();
  }
  return this;
}

uint64_t siricommon::DoubleValue::formatText(siricommon::DoubleValue *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 16)) {
    PB::TextFormatter::format(a2, "value", *((double *)this + 1));
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t siricommon::DoubleValue::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(unsigned char *)(this + 16)) {
    return PB::Writer::write(a2, *(double *)(this + 8));
  }
  return this;
}

uint64_t siricommon::DoubleValue::readFrom(siricommon::DoubleValue *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_25;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 16) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else
      {
LABEL_25:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_25;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void siricommon::DoubleValue::~DoubleValue(siricommon::DoubleValue *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x1CB772580);
}

uint64_t siricommon::DoubleValue::DoubleValue(uint64_t this)
{
  *(void *)this = &unk_1F232DE28;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

{
  *(void *)this = &unk_1F232DE28;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

double siricommon::DoubleValue::DoubleValue(siricommon::DoubleValue *this, const siricommon::DoubleValue *a2)
{
  *(void *)this = &unk_1F232DE28;
  *((_DWORD *)this + 4) = 0;
  if (*((unsigned char *)a2 + 16))
  {
    double result = *((double *)a2 + 1);
    *((unsigned char *)this + 16) = 1;
    *((double *)this + 1) = result;
  }
  return result;
}

{
  double result;

  *(void *)this = &unk_1F232DE28;
  *((_DWORD *)this + 4) = 0;
  if (*((unsigned char *)a2 + 16))
  {
    double result = *((double *)a2 + 1);
    *((unsigned char *)this + 16) = 1;
    *((double *)this + 1) = result;
  }
  return result;
}

uint64_t siricommon::DoubleValue::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v7[0] = &unk_1F232DE28;
    uint64_t v3 = *(void *)(a2 + 8);
    int v4 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = *(unsigned char *)(a2 + 16) & 1;
    int v8 = v4;
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v7[1] = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  void v8[2];
  int v9;

  if (a1 != a2)
  {
    v8[0] = &unk_1F232DE28;
    uint64_t v3 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = 0;
    int v4 = *(void *)(a2 + 8);
    uint64_t v5 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v3;
    char v9 = v5;
    uint64_t v6 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v8[1] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

double siricommon::swap(siricommon *this, siricommon::DoubleValue *a2, siricommon::DoubleValue *a3)
{
  int v3 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v3;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double siricommon::DoubleValue::DoubleValue(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F232DE28;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(void *)a1 = &unk_1F232DE28;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

BOOL siricommon::DoubleValue::operator==(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a1 + 16);
  BOOL result = (*(unsigned char *)(a2 + 16) & 1) == 0;
  if (v3) {
    return (*(unsigned char *)(a2 + 16) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  }
  return result;
}

uint64_t siricommon::DoubleValue::hash_value(siricommon::DoubleValue *this)
{
  if ((*((unsigned char *)this + 16) & 1) == 0) {
    return 0;
  }
  if (*((double *)this + 1) == 0.0) {
    return 0;
  }
  return *((void *)this + 1);
}

uint64_t SIRINLUINTERNALOvertonKGSpanDataReadFrom(uint64_t a1, uint64_t a2)
{
  char v3 = (int *)MEMORY[0x1E4F940E8];
  int v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        uint64_t v21 = PBReaderReadString();
        if (v21) {
          [(id)a1 addFeatures:v21];
        }
      }
      else if ((v10 >> 3) == 1)
      {
        *(unsigned char *)(a1 + 24) |= 1u;
        uint64_t v18 = *v3;
        unint64_t v19 = *(void *)(a2 + v18);
        if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v20 = *(void *)(*(void *)(a2 + *v7) + v19);
          *(void *)(a2 + v18) = v19 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v20 = 0;
        }
        *(void *)(a1 + 8) = v20;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sirinluinternalsnlc::SNLCParserRequest::formatText(sirinluinternalsnlc::SNLCParserRequest *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "embeddings");
  }
  uint64_t v6 = *((void *)this + 2);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, a2, "legacy_context");
  }
  uint64_t v7 = (uint64_t *)*((void *)this + 3);
  char v8 = (uint64_t *)*((void *)this + 4);
  while (v7 != v8)
  {
    uint64_t v9 = *v7++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v9 + 32))(v9, a2, "matching_spans");
  }
  uint64_t v10 = *((void *)this + 6);
  if (v10) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v10 + 32))(v10, a2, "nlu_request_id");
  }
  uint64_t v11 = *((void *)this + 7);
  if (v11) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v11 + 32))(v11, a2, "request_id");
  }
  uint64_t v12 = *((void *)this + 8);
  if (v12) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v12 + 32))(v12, a2, "tokenised_utterance");
  }
  uint64_t v13 = *((void *)this + 9);
  if (v13) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v13 + 32))(v13, a2, "turn_input");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluinternalsnlc::SNLCParserRequest::writeTo(uint64_t this, PB::Writer *a2)
{
  char v3 = (void *)this;
  int v4 = *(const PB::Base **)(this + 56);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  uint64_t v5 = (const PB::Base *)v3[8];
  if (v5) {
    this = PB::Writer::writeSubmessage(a2, v5);
  }
  uint64_t v6 = (const PB::Base *)v3[1];
  if (v6) {
    this = PB::Writer::writeSubmessage(a2, v6);
  }
  uint64_t v7 = (const PB::Base **)v3[3];
  char v8 = (const PB::Base **)v3[4];
  while (v7 != v8)
  {
    uint64_t v9 = *v7++;
    this = PB::Writer::writeSubmessage(a2, v9);
  }
  uint64_t v10 = (const PB::Base *)v3[9];
  if (v10) {
    this = PB::Writer::writeSubmessage(a2, v10);
  }
  uint64_t v11 = (const PB::Base *)v3[2];
  if (v11) {
    this = PB::Writer::writeSubmessage(a2, v11);
  }
  uint64_t v12 = (const PB::Base *)v3[6];
  if (v12)
  {
    return PB::Writer::writeSubmessage(a2, v12);
  }
  return this;
}

uint64_t sirinluinternalsnlc::SNLCParserRequest::readFrom(sirinluinternalsnlc::SNLCParserRequest *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_19;
        }
      }
LABEL_21:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v10 >> 3))
      {
        case 1u:
          operator new();
        case 2u:
          operator new();
        case 3u:
          operator new();
        case 4u:
          PB::PtrVector<sirinluinternal::MatchingSpan>::emplace_back<>();
        case 5u:
          operator new();
        case 6u:
          operator new();
        case 7u:
          operator new();
        default:
          break;
      }
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_21;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_19;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluinternalsnlc::SNLCParserRequest::~SNLCParserRequest(sirinluinternalsnlc::SNLCParserRequest *this)
{
  sirinluinternalsnlc::SNLCParserRequest::~SNLCParserRequest(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  uint64_t vars8;

  *(void *)this = &unk_1F232DE78;
  unint64_t v2 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unint64_t v3 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  char v8 = (void **)((char *)this + 24);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  PB::Base::~Base(this);
}

double sirinluinternalsnlc::SNLCParserRequest::SNLCParserRequest(sirinluinternalsnlc::SNLCParserRequest *this)
{
  *(void *)this = &unk_1F232DE78;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = 0;
  return result;
}

{
  double result;

  *(void *)this = &unk_1F232DE78;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = 0;
  return result;
}

uint64_t sirinluinternalsnlc::SNLCParserRequest::SNLCParserRequest(uint64_t this, const sirinluinternalsnlc::SNLCParserRequest *a2)
{
  *(void *)this = &unk_1F232DE78;
  *(_OWORD *)(this + 8) = 0u;
  *(_OWORD *)(this + 24) = 0u;
  *(_OWORD *)(this + 40) = 0u;
  *(_OWORD *)(this + 56) = 0u;
  *(void *)(this + 72) = 0;
  if (*((void *)a2 + 7)) {
    operator new();
  }
  if (*((void *)a2 + 8)) {
    operator new();
  }
  if (*((void *)a2 + 1)) {
    operator new();
  }
  if (*((void *)a2 + 3) != *((void *)a2 + 4)) {
    PB::PtrVector<sirinluinternal::MatchingSpan>::emplace_back<sirinluinternal::MatchingSpan const&>();
  }
  if (*((void *)a2 + 9)) {
    operator new();
  }
  if (*((void *)a2 + 2)) {
    operator new();
  }
  if (*((void *)a2 + 6)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternalsnlc::SNLCParserRequest::operator=(uint64_t a1, const sirinluinternalsnlc::SNLCParserRequest *a2)
{
  if ((const sirinluinternalsnlc::SNLCParserRequest *)a1 != a2)
  {
    sirinluinternalsnlc::SNLCParserRequest::SNLCParserRequest((uint64_t)&v9, a2);
    long long v3 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v13;
    long long v13 = v3;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    long long v11 = v4;
    uint64_t v5 = *(void *)(a1 + 72);
    *(void *)(a1 + 72) = v14;
    uint64_t v14 = v5;
    long long v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v10 = v6;
    long long v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    long long v12 = v7;
    sirinluinternalsnlc::SNLCParserRequest::~SNLCParserRequest((sirinluinternalsnlc::SNLCParserRequest *)&v9);
  }
  return a1;
}

void *sirinluinternalsnlc::swap(void *this, sirinluinternalsnlc::SNLCParserRequest *a2, sirinluinternalsnlc::SNLCParserRequest *a3)
{
  uint64_t v3 = this[7];
  this[7] = *((void *)a2 + 7);
  *((void *)a2 + 7) = v3;
  uint64_t v4 = this[8];
  this[8] = *((void *)a2 + 8);
  *((void *)a2 + 8) = v4;
  uint64_t v5 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v6;
  uint64_t v7 = this[4];
  this[4] = *((void *)a2 + 4);
  *((void *)a2 + 4) = v7;
  uint64_t v8 = this[5];
  this[5] = *((void *)a2 + 5);
  *((void *)a2 + 5) = v8;
  uint64_t v9 = this[9];
  this[9] = *((void *)a2 + 9);
  *((void *)a2 + 9) = v9;
  uint64_t v10 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v10;
  uint64_t v11 = this[6];
  this[6] = *((void *)a2 + 6);
  *((void *)a2 + 6) = v11;
  return this;
}

uint64_t sirinluinternalsnlc::SNLCParserRequest::SNLCParserRequest(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F232DE78;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  uint64_t v5 = (void **)(a1 + 24);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = 0;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = 0;
  uint64_t v7 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = 0;
  uint64_t v9 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = v8;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v11 = *v4;
  *uint64_t v4 = v10;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(v5);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  uint64_t v12 = *(void *)(a2 + 72);
  *(void *)(a2 + 72) = 0;
  uint64_t v13 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = v12;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t v14 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  uint64_t v15 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  uint64_t v16 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  uint64_t v17 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v16;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  return a1;
}

uint64_t sirinluinternalsnlc::SNLCParserRequest::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sirinluinternalsnlc::SNLCParserRequest::SNLCParserRequest((uint64_t)&v9, a2);
    long long v3 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v13;
    long long v13 = v3;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    long long v11 = v4;
    uint64_t v5 = *(void *)(a1 + 72);
    *(void *)(a1 + 72) = v14;
    uint64_t v14 = v5;
    long long v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v10 = v6;
    long long v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    long long v12 = v7;
    sirinluinternalsnlc::SNLCParserRequest::~SNLCParserRequest((sirinluinternalsnlc::SNLCParserRequest *)&v9);
  }
  return a1;
}

BOOL sirinluinternalsnlc::SNLCParserRequest::operator==(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[7];
  uint64_t v5 = *(void *)(a2 + 56);
  if (v4)
  {
    if (!v5 || !sirinluexternal::UUID::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  long long v6 = (void *)a1[8];
  long long v7 = *(void **)(a2 + 64);
  if (v6)
  {
    if (!v7 || !sirinluinternalnlv4_parser::Tokenisation::operator==(v6, v7)) {
      return 0;
    }
  }
  else if (v7)
  {
    return 0;
  }
  uint64_t v8 = a1[1];
  uint64_t v9 = *(void *)(a2 + 8);
  if (v8)
  {
    if (!v9 || !sirinluinternal::NLv4EmbeddingTensor::operator==(v8, v9)) {
      return 0;
    }
  }
  else if (v9)
  {
    return 0;
  }
  BOOL result = PB::PtrVector<sirinluinternal::MatchingSpan>::operator==(a1 + 3, *(uint64_t **)(a2 + 24), *(void *)(a2 + 32));
  if (!result) {
    return result;
  }
  uint64_t v11 = a1[9];
  uint64_t v12 = *(void *)(a2 + 72);
  if (v11)
  {
    if (!v12 || (sirinluexternal::TurnInput::operator==(v11, v12) & 1) == 0) {
      return 0;
    }
  }
  else if (v12)
  {
    return 0;
  }
  uint64_t v13 = a1[2];
  uint64_t v14 = *(void *)(a2 + 16);
  if (!v13)
  {
    if (!v14) {
      goto LABEL_29;
    }
    return 0;
  }
  if (!v14 || !sirinluexternal::LegacyNLContext::operator==(v13, v14)) {
    return 0;
  }
LABEL_29:
  uint64_t v15 = a1[6];
  uint64_t v16 = *(void *)(a2 + 48);
  BOOL result = (v15 | v16) == 0;
  if (v15 && v16)
  {
    uint64_t v17 = a1[6];
    return sirinluexternal::RequestID::operator==(v17, v16);
  }
  return result;
}

unint64_t sirinluinternalsnlc::SNLCParserRequest::hash_value(sirinluinternalsnlc::SNLCParserRequest *this)
{
  uint64_t v2 = *((void *)this + 7);
  if (!v2)
  {
    uint64_t v6 = 0;
    goto LABEL_11;
  }
  if ((*(unsigned char *)(v2 + 28) & 1) == 0)
  {
    uint64_t v3 = 0;
    if ((*(unsigned char *)(v2 + 28) & 2) != 0) {
      goto LABEL_4;
    }
LABEL_8:
    uint64_t v4 = 0;
    if ((*(unsigned char *)(v2 + 28) & 4) != 0) {
      goto LABEL_5;
    }
LABEL_9:
    uint64_t v5 = 0;
    goto LABEL_10;
  }
  uint64_t v3 = *(void *)(v2 + 8);
  if ((*(unsigned char *)(v2 + 28) & 2) == 0) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v4 = *(void *)(v2 + 16);
  if ((*(unsigned char *)(v2 + 28) & 4) == 0) {
    goto LABEL_9;
  }
LABEL_5:
  uint64_t v5 = *(int *)(v2 + 24);
LABEL_10:
  uint64_t v6 = v4 ^ v3 ^ v5;
LABEL_11:
  long long v7 = (sirinluinternalnlv4_parser::Tokenisation *)*((void *)this + 8);
  if (v7) {
    unint64_t v8 = sirinluinternalnlv4_parser::Tokenisation::hash_value(v7);
  }
  else {
    unint64_t v8 = 0;
  }
  uint64_t v9 = (sirinluinternal::NLv4EmbeddingTensor *)*((void *)this + 1);
  if (v9) {
    unint64_t v10 = sirinluinternal::NLv4EmbeddingTensor::hash_value(v9);
  }
  else {
    unint64_t v10 = 0;
  }
  uint64_t v11 = (sirinluinternal::MatchingSpan **)*((void *)this + 3);
  uint64_t v12 = (sirinluinternal::MatchingSpan **)*((void *)this + 4);
  if (v11 == v12)
  {
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v13 = 0;
    do
    {
      uint64_t v14 = *v11++;
      v13 ^= sirinluinternal::MatchingSpan::hash_value(v14);
    }
    while (v11 != v12);
  }
  uint64_t v15 = (sirinluexternal::TurnInput *)*((void *)this + 9);
  if (v15) {
    unint64_t v16 = sirinluexternal::TurnInput::hash_value(v15);
  }
  else {
    unint64_t v16 = 0;
  }
  uint64_t v17 = (sirinluexternal::LegacyNLContext *)*((void *)this + 2);
  if (v17) {
    unint64_t v18 = sirinluexternal::LegacyNLContext::hash_value(v17);
  }
  else {
    unint64_t v18 = 0;
  }
  unint64_t v19 = *((void *)this + 6);
  if (v19) {
    unint64_t v19 = sirinluexternal::RequestID::hash_value((sirinluexternal::RequestID *)v19);
  }
  return v8 ^ v6 ^ v16 ^ v18 ^ v19 ^ v10 ^ v13;
}

uint64_t sirinluinternalsnlc::SNLCParserRequest::makeRequestId(uint64_t this)
{
  if (!*(void *)(this + 56)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternalsnlc::SNLCParserRequest::makeTokenisedUtterance(uint64_t this)
{
  if (!*(void *)(this + 64)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternalsnlc::SNLCParserRequest::makeEmbeddings(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternalsnlc::SNLCParserRequest::makeTurnInput(uint64_t this)
{
  if (!*(void *)(this + 72)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternalsnlc::SNLCParserRequest::makeLegacyContext(uint64_t this)
{
  if (!*(void *)(this + 16)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternalsnlc::SNLCParserRequest::makeNluRequestId(uint64_t this)
{
  if (!*(void *)(this + 48)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternal::UUID::formatText(sirinluexternal::UUID *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 28);
  if (v5)
  {
    PB::TextFormatter::format(a2, "high_int");
    char v5 = *((unsigned char *)this + 28);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*((unsigned char *)this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "low_int");
  if ((*((unsigned char *)this + 28) & 4) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(a2, "namespace_a");
LABEL_5:
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluexternal::UUID::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 28);
  if ((v4 & 1) == 0)
  {
    if ((*(unsigned char *)(this + 28) & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    this = PB::Writer::writeVarInt(a2);
    if ((*(unsigned char *)(v3 + 28) & 4) == 0) {
      return this;
    }
    goto LABEL_7;
  }
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 28);
  if ((v4 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v4 & 4) == 0) {
    return this;
  }
LABEL_7:
  return PB::Writer::writeVarInt(a2);
}

uint64_t sirinluexternal::UUID::readFrom(sirinluexternal::UUID *this, PB::Reader *a2)
{
  unint64_t v3 = *((void *)a2 + 1);
  unint64_t v2 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v3 + 1;
        *((void *)a2 + 1) = v3 + 1;
        char v13 = *(unsigned char *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v3 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_31;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v19 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((unsigned char *)this + 28) |= 4u;
        unint64_t v27 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v28 = *(void *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          char v43 = 0;
          unsigned int v44 = 0;
          uint64_t v31 = 0;
          if (v2 <= v27) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v27)
            {
              LODWORD(v31) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_83;
            }
            unint64_t v45 = v27 + 1;
            char v46 = *(unsigned char *)(v28 + v27);
            *((void *)a2 + 1) = v45;
            v31 |= (unint64_t)(v46 & 0x7F) << v43;
            if ((v46 & 0x80) == 0) {
              break;
            }
            v43 += 7;
            unint64_t v27 = v45;
            BOOL v14 = v44++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_82;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v31) = 0;
          }
LABEL_82:
          unint64_t v3 = v45;
        }
        else
        {
          char v29 = 0;
          unsigned int v30 = 0;
          uint64_t v31 = 0;
          while (1)
          {
            unint64_t v3 = v27 + 1;
            *((void *)a2 + 1) = v27 + 1;
            char v32 = *(unsigned char *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0) {
              break;
            }
            v29 += 7;
            unint64_t v27 = v3;
            BOOL v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }
LABEL_83:
        *((_DWORD *)this + 6) = v31;
      }
      else if (v19 == 2)
      {
        *((unsigned char *)this + 28) |= 2u;
        unint64_t v33 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v34 = *(void *)a2;
        if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
        {
          char v47 = 0;
          unsigned int v48 = 0;
          uint64_t v37 = 0;
          if (v2 <= v33) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v33)
            {
              uint64_t v37 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_88;
            }
            unint64_t v49 = v33 + 1;
            char v50 = *(unsigned char *)(v34 + v33);
            *((void *)a2 + 1) = v49;
            v37 |= (unint64_t)(v50 & 0x7F) << v47;
            if ((v50 & 0x80) == 0) {
              break;
            }
            v47 += 7;
            unint64_t v33 = v49;
            BOOL v14 = v48++ > 8;
            if (v14)
            {
              uint64_t v37 = 0;
              goto LABEL_87;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v37 = 0;
          }
LABEL_87:
          unint64_t v3 = v49;
        }
        else
        {
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v37 = 0;
          while (1)
          {
            unint64_t v3 = v33 + 1;
            *((void *)a2 + 1) = v33 + 1;
            char v38 = *(unsigned char *)(v34 + v33);
            v37 |= (unint64_t)(v38 & 0x7F) << v35;
            if ((v38 & 0x80) == 0) {
              break;
            }
            v35 += 7;
            unint64_t v33 = v3;
            BOOL v14 = v36++ > 8;
            if (v14)
            {
              uint64_t v37 = 0;
              break;
            }
          }
        }
LABEL_88:
        *((void *)this + 2) = v37;
      }
      else if (v19 == 1)
      {
        *((unsigned char *)this + 28) |= 1u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v39 = 0;
          unsigned int v40 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v20)
            {
              uint64_t v24 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_78;
            }
            unint64_t v41 = v20 + 1;
            char v42 = *(unsigned char *)(v21 + v20);
            *((void *)a2 + 1) = v41;
            v24 |= (unint64_t)(v42 & 0x7F) << v39;
            if ((v42 & 0x80) == 0) {
              break;
            }
            v39 += 7;
            unint64_t v20 = v41;
            BOOL v14 = v40++ > 8;
            if (v14)
            {
              uint64_t v24 = 0;
              goto LABEL_77;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v24 = 0;
          }
LABEL_77:
          unint64_t v3 = v41;
        }
        else
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            unint64_t v3 = v20 + 1;
            *((void *)a2 + 1) = v20 + 1;
            char v25 = *(unsigned char *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            unint64_t v20 = v3;
            BOOL v14 = v23++ > 8;
            if (v14)
            {
              uint64_t v24 = 0;
              break;
            }
          }
        }
LABEL_78:
        *((void *)this + 1) = v24;
      }
      else
      {
LABEL_31:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v3 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
      }
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v3 >= v2 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v3 > v2) {
      unint64_t v2 = v3;
    }
    while (v2 != v3)
    {
      unint64_t v17 = v3 + 1;
      char v18 = *(unsigned char *)(v8 + v3);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v3 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_31;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluexternal::UUID::~UUID(sirinluexternal::UUID *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x1CB772580);
}

void *sirinluexternal::UUID::UUID(void *this)
{
  *this = &unk_1F232DEC8;
  this[3] = 0;
  return this;
}

{
  *this = &unk_1F232DEC8;
  this[3] = 0;
  return this;
}

uint64_t sirinluexternal::UUID::UUID(uint64_t this, const sirinluexternal::UUID *a2)
{
  *(void *)this = &unk_1F232DEC8;
  *(void *)(this + 24) = 0;
  char v2 = *((unsigned char *)a2 + 28);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *(unsigned char *)(this + 28) = 1;
    *(void *)(this + 8) = v4;
    char v2 = *((unsigned char *)a2 + 28);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 28) & 2) != 0)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 2);
    v3 |= 2u;
    *(unsigned char *)(this + 28) = v3;
    *(void *)(this + 16) = v5;
    char v2 = *((unsigned char *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    int v6 = *((_DWORD *)a2 + 6);
    *(unsigned char *)(this + 28) = v3 | 4;
    *(_DWORD *)(this + 24) = v6;
  }
  return this;
}

uint64_t sirinluexternal::UUID::operator=(uint64_t a1, const sirinluexternal::UUID *a2)
{
  if ((const sirinluexternal::UUID *)a1 != a2)
  {
    sirinluexternal::UUID::UUID((uint64_t)&v5, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    long long v6 = v3;
    *(void *)&long long v3 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v7;
    uint64_t v7 = v3;
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t sirinluexternal::swap(uint64_t this, sirinluexternal::UUID *a2, sirinluexternal::UUID *a3)
{
  int v3 = *(_DWORD *)(this + 28);
  *(_DWORD *)(this + 28) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  uint64_t v4 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  uint64_t v5 = *(void *)(this + 16);
  *(void *)(this + 16) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  LODWORD(v5) = *(_DWORD *)(this + 24);
  *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v5;
  return this;
}

uint64_t sirinluexternal::UUID::UUID(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &unk_1F232DEC8;
  *(_DWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(void *)(result + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
  return result;
}

{
  *(void *)uint64_t result = &unk_1F232DEC8;
  *(_DWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(void *)(result + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
  return result;
}

uint64_t sirinluexternal::UUID::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v6 = &unk_1F232DEC8;
    uint64_t v3 = *(void *)(a2 + 24);
    *(_DWORD *)(a2 + 28) = 0;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    long long v7 = v4;
    *(void *)&long long v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v3;
    uint64_t v8 = v4;
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

BOOL sirinluexternal::UUID::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 28))
  {
    if ((*(unsigned char *)(a2 + 28) & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 28))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 2) == 0 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 28) & 4) == 0;
  if ((*(unsigned char *)(a1 + 28) & 4) != 0) {
    return (*(unsigned char *)(a2 + 28) & 4) != 0 && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24);
  }
  return v2;
}

uint64_t sirinluexternal::UUID::hash_value(sirinluexternal::UUID *this)
{
  if ((*((unsigned char *)this + 28) & 1) == 0)
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 28) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v2 = 0;
    if ((*((unsigned char *)this + 28) & 4) != 0) {
      goto LABEL_4;
    }
LABEL_7:
    uint64_t v3 = 0;
    return v2 ^ v1 ^ v3;
  }
  uint64_t v1 = *((void *)this + 1);
  if ((*((unsigned char *)this + 28) & 2) == 0) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v2 = *((void *)this + 2);
  if ((*((unsigned char *)this + 28) & 4) == 0) {
    goto LABEL_7;
  }
LABEL_4:
  uint64_t v3 = *((int *)this + 6);
  return v2 ^ v1 ^ v3;
}

BOOL SIRINLUINTERNALSSUSSURequestReadFrom(id *a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  long long v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  long long v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 6;
        goto LABEL_23;
      case 2u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 2;
LABEL_23:
        unint64_t v19 = (SIRINLUEXTERNALUUID *)a1[v18];
        a1[v18] = (id)v17;
        goto LABEL_36;
      case 3u:
        unint64_t v19 = objc_alloc_init(SIRINLUEXTERNALUUID);
        objc_storeStrong(a1 + 1, v19);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v19, a2) & 1) == 0) {
          goto LABEL_40;
        }
        goto LABEL_35;
      case 4u:
        unint64_t v19 = objc_alloc_init(SIRINLUINTERNALMatchingSpan);
        [a1 addMatchingSpans:v19];
        if (!PBReaderPlaceMark() || (SIRINLUINTERNALMatchingSpanReadFrom((uint64_t)v19, a2) & 1) == 0) {
          goto LABEL_40;
        }
        goto LABEL_35;
      case 5u:
        unint64_t v19 = objc_alloc_init(SIRINLUEXTERNALEntityCandidate);
        [a1 addSalientEntities:v19];
        if (!PBReaderPlaceMark()
          || !SIRINLUEXTERNALEntityCandidateReadFrom((id *)&v19->super.super.isa, a2))
        {
          goto LABEL_40;
        }
        goto LABEL_35;
      case 6u:
        unint64_t v19 = objc_alloc_init(SIRINLUEXTERNALRequestID);
        objc_storeStrong(a1 + 4, v19);
        if PBReaderPlaceMark() && (SIRINLUEXTERNALRequestIDReadFrom((uint64_t)v19, a2))
        {
LABEL_35:
          PBReaderRecallMark();
LABEL_36:

LABEL_37:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_40:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_37;
    }
  }
}

uint64_t sirinluinternal::OverrideMetadata::formatText(sirinluinternal::OverrideMetadata *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  return MEMORY[0x1F4147498](a2);
}

BOOL sirinluinternal::OverrideMetadata::readFrom(sirinluinternal::OverrideMetadata *this, PB::Reader *a2)
{
  while (1)
  {
    unint64_t v3 = *((void *)a2 + 1);
    unint64_t v4 = *((void *)a2 + 2);
    int v5 = *((unsigned __int8 *)a2 + 24);
    if (v3 >= v4 || v5 != 0) {
      return v5 == 0;
    }
    uint64_t v7 = *(void *)a2;
    char v8 = 0;
    unsigned int v9 = 0;
    BOOL v10 = v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v4;
    if (v10)
    {
      uint64_t v13 = 0;
      if (v3 > v4) {
        unint64_t v4 = *((void *)a2 + 1);
      }
      while (v4 != v3)
      {
        unint64_t v11 = v3 + 1;
        char v12 = *(unsigned char *)(v7 + v3);
        *((void *)a2 + 1) = v11;
        v13 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          goto LABEL_22;
        }
        v8 += 7;
        unint64_t v3 = v11;
        BOOL v10 = v9++ > 8;
        if (v10) {
          goto LABEL_23;
        }
      }
      int v5 = 1;
      *((unsigned char *)a2 + 24) = 1;
      return v5 == 0;
    }
    uint64_t v13 = 0;
    while (1)
    {
      unint64_t v14 = v3 + 1;
      *((void *)a2 + 1) = v3 + 1;
      char v15 = *(unsigned char *)(v7 + v3);
      v13 |= (unint64_t)(v15 & 0x7F) << v8;
      if ((v15 & 0x80) == 0) {
        break;
      }
      v8 += 7;
      unint64_t v3 = v14;
      BOOL v10 = v9++ > 8;
      if (v10) {
        goto LABEL_23;
      }
    }
LABEL_22:
    if ((v13 & 7) == 4)
    {
      int v5 = 0;
      return v5 == 0;
    }
LABEL_23:
    if ((PB::Reader::skip(a2) & 1) == 0) {
      return 0;
    }
  }
}

void sirinluinternal::OverrideMetadata::~OverrideMetadata(sirinluinternal::OverrideMetadata *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x1CB772580);
}

void *sirinluinternal::OverrideMetadata::OverrideMetadata(void *this)
{
  *this = &unk_1F232DF18;
  return this;
}

{
  *this = &unk_1F232DF18;
  return this;
}

void *sirinluinternal::OverrideMetadata::OverrideMetadata(void *this, const sirinluinternal::OverrideMetadata *a2)
{
  *this = &unk_1F232DF18;
  return this;
}

{
  *this = &unk_1F232DF18;
  return this;
}

uint64_t sirinluinternal::OverrideMetadata::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unint64_t v4 = &unk_1F232DF18;
    PB::Base::~Base((PB::Base *)&v4);
  }
  return a1;
}

{
  void *v4;

  if (a1 != a2)
  {
    unint64_t v4 = &unk_1F232DF18;
    PB::Base::~Base((PB::Base *)&v4);
  }
  return a1;
}

void *sirinluinternal::OverrideMetadata::OverrideMetadata(void *result)
{
  *uint64_t result = &unk_1F232DF18;
  return result;
}

{
  *uint64_t result = &unk_1F232DF18;
  return result;
}

uint64_t sirinluinternal::OverrideMetadata::operator==()
{
  return 1;
}

uint64_t sirinluinternal::OverrideMetadata::hash_value(sirinluinternal::OverrideMetadata *this)
{
  return 0;
}

uint64_t sirinluexternalssu_inference::SsuInferenceResponse::formatText(sirinluexternalssu_inference::SsuInferenceResponse *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = (uint64_t *)*((void *)this + 1);
  long long v6 = (uint64_t *)*((void *)this + 2);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "parses");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluexternalssu_inference::SsuInferenceResponse::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v2 = *(const PB::Base ***)(this + 8);
  for (uint64_t i = *(const PB::Base ***)(this + 16); v2 != i; this = PB::Writer::writeSubmessage(a2, v5))
    int v5 = *v2++;
  return this;
}

uint64_t sirinluexternalssu_inference::SsuInferenceResponse::readFrom(sirinluexternalssu_inference::SsuInferenceResponse *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        PB::PtrVector<sirinluexternal::UserParse>::emplace_back<>();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluexternalssu_inference::SsuInferenceResponse::~SsuInferenceResponse(sirinluexternalssu_inference::SsuInferenceResponse *this)
{
  *(void *)this = &unk_1F232DF68;
  unint64_t v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
  JUMPOUT(0x1CB772580);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_1F232DF68;
  unint64_t v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_1F232DF68;
  unint64_t v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
}

void *sirinluexternalssu_inference::SsuInferenceResponse::SsuInferenceResponse(void *this)
{
  *this = &unk_1F232DF68;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = &unk_1F232DF68;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

void *sirinluexternalssu_inference::SsuInferenceResponse::SsuInferenceResponse(void *this, const sirinluexternalssu_inference::SsuInferenceResponse *a2)
{
  this[1] = 0;
  *this = &unk_1F232DF68;
  this[2] = 0;
  this[3] = 0;
  if (*((void *)a2 + 1) != *((void *)a2 + 2)) {
    PB::PtrVector<sirinluexternal::UserParse>::emplace_back<sirinluexternal::UserParse const&>();
  }
  return this;
}

uint64_t sirinluexternalssu_inference::SsuInferenceResponse::operator=(uint64_t a1, const sirinluexternalssu_inference::SsuInferenceResponse *a2)
{
  if ((const sirinluexternalssu_inference::SsuInferenceResponse *)a1 != a2)
  {
    sirinluexternalssu_inference::SsuInferenceResponse::SsuInferenceResponse(&v6, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v3;
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v8;
    uint64_t v8 = v4;
    long long v6 = &unk_1F232DF68;
    unsigned int v9 = (void **)&v7;
    std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v9);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

void *sirinluexternalssu_inference::swap(void *this, sirinluexternalssu_inference::SsuInferenceResponse *a2, sirinluexternalssu_inference::SsuInferenceResponse *a3)
{
  uint64_t v3 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  uint64_t v4 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  return this;
}

uint64_t sirinluexternalssu_inference::SsuInferenceResponse::SsuInferenceResponse(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F232DF68;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate((void **)(a1 + 8));
  *uint64_t v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

{
  _OWORD *v4;

  *(void *)a1 = &unk_1F232DF68;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate((void **)(a1 + 8));
  *uint64_t v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

uint64_t sirinluexternalssu_inference::SsuInferenceResponse::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v9 = &unk_1F232DF68;
    long long v10 = 0uLL;
    uint64_t v11 = 0;
    std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate((void **)&v10);
    uint64_t v4 = *(void *)(a2 + 24);
    long long v5 = *(_OWORD *)(a2 + 8);
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    long long v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v5;
    long long v10 = v6;
    uint64_t v7 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v4;
    uint64_t v11 = v7;
    char v12 = (void **)&v10;
    unsigned int v9 = &unk_1F232DF68;
    std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v12);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

BOOL sirinluexternalssu_inference::SsuInferenceResponse::operator==(uint64_t a1, uint64_t a2)
{
  return PB::PtrVector<sirinluexternal::UserParse>::operator==((uint64_t *)(a1 + 8), *(uint64_t **)(a2 + 8), *(void *)(a2 + 16));
}

uint64_t sirinluexternalssu_inference::SsuInferenceResponse::hash_value(sirinluexternalssu_inference::SsuInferenceResponse *this)
{
  uint64_t v1 = (sirinluexternal::UserParse **)*((void *)this + 1);
  unint64_t v2 = (sirinluexternal::UserParse **)*((void *)this + 2);
  if (v1 == v2) {
    return 0;
  }
  uint64_t v3 = 0;
  do
  {
    uint64_t v4 = *v1++;
    v3 ^= sirinluexternal::UserParse::hash_value(v4);
  }
  while (v1 != v2);
  return v3;
}

uint64_t sirinluinternaluaap_parser::UaaPParserResponse::formatText(sirinluinternaluaap_parser::UaaPParserResponse *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  long long v5 = (uint64_t *)*((void *)this + 1);
  long long v6 = (uint64_t *)*((void *)this + 2);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "hypotheses");
  }
  uint64_t v8 = *((void *)this + 4);
  if (v8) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v8 + 32))(v8, a2, "request_id");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluinternaluaap_parser::UaaPParserResponse::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *(const PB::Base **)(this + 32);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  long long v6 = *(const PB::Base ***)(v3 + 8);
  long long v5 = *(const PB::Base ***)(v3 + 16);
  while (v6 != v5)
  {
    uint64_t v7 = *v6++;
    this = PB::Writer::writeSubmessage(a2, v7);
  }
  return this;
}

uint64_t sirinluinternaluaap_parser::UaaPParserResponse::readFrom(sirinluinternaluaap_parser::UaaPParserResponse *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_24;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 2) {
        PB::PtrVector<sirinluexternal::UserParse>::emplace_back<>();
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_24:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_24;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluinternaluaap_parser::UaaPParserResponse::~UaaPParserResponse(sirinluinternaluaap_parser::UaaPParserResponse *this)
{
  sirinluinternaluaap_parser::UaaPParserResponse::~UaaPParserResponse(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  void **v3;
  uint64_t vars8;

  *(void *)this = &unk_1F232DFB8;
  unint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unint64_t v3 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v3);
  PB::Base::~Base(this);
}

double sirinluinternaluaap_parser::UaaPParserResponse::UaaPParserResponse(sirinluinternaluaap_parser::UaaPParserResponse *this)
{
  *(void *)this = &unk_1F232DFB8;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

{
  double result;

  *(void *)this = &unk_1F232DFB8;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

uint64_t sirinluinternaluaap_parser::UaaPParserResponse::UaaPParserResponse(uint64_t this, const sirinluinternaluaap_parser::UaaPParserResponse *a2)
{
  *(void *)this = &unk_1F232DFB8;
  *(_OWORD *)(this + 8) = 0u;
  *(_OWORD *)(this + 24) = 0u;
  if (*((void *)a2 + 4)) {
    operator new();
  }
  if (*((void *)a2 + 1) != *((void *)a2 + 2)) {
    PB::PtrVector<sirinluexternal::UserParse>::emplace_back<sirinluexternal::UserParse const&>();
  }
  return this;
}

uint64_t sirinluinternaluaap_parser::UaaPParserResponse::operator=(uint64_t a1, const sirinluinternaluaap_parser::UaaPParserResponse *a2)
{
  if ((const sirinluinternaluaap_parser::UaaPParserResponse *)a1 != a2)
  {
    sirinluinternaluaap_parser::UaaPParserResponse::UaaPParserResponse((uint64_t)v6, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v8;
    long long v7 = v3;
    long long v8 = v4;
    sirinluinternaluaap_parser::UaaPParserResponse::~UaaPParserResponse((sirinluinternaluaap_parser::UaaPParserResponse *)v6);
  }
  return a1;
}

void *sirinluinternaluaap_parser::swap(void *this, sirinluinternaluaap_parser::UaaPParserResponse *a2, sirinluinternaluaap_parser::UaaPParserResponse *a3)
{
  uint64_t v3 = this[4];
  this[4] = *((void *)a2 + 4);
  *((void *)a2 + 4) = v3;
  uint64_t v4 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  uint64_t v5 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  uint64_t v6 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v6;
  return this;
}

uint64_t sirinluinternaluaap_parser::UaaPParserResponse::UaaPParserResponse(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v4 = (void **)(a1 + 8);
  *(void *)a1 = &unk_1F232DFB8;
  *(_OWORD *)(a1 + 24) = 0u;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v5;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(v4);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

uint64_t sirinluinternaluaap_parser::UaaPParserResponse::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sirinluinternaluaap_parser::UaaPParserResponse::UaaPParserResponse((uint64_t)v6, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v8;
    long long v7 = v3;
    long long v8 = v4;
    sirinluinternaluaap_parser::UaaPParserResponse::~UaaPParserResponse((sirinluinternaluaap_parser::UaaPParserResponse *)v6);
  }
  return a1;
}

BOOL sirinluinternaluaap_parser::UaaPParserResponse::operator==(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = a2[4];
  if (!v4)
  {
    if (!v5) {
      goto LABEL_4;
    }
    return 0;
  }
  if (!v5 || !sirinluexternal::UUID::operator==(v4, v5)) {
    return 0;
  }
LABEL_4:
  uint64_t v6 = (uint64_t *)a2[1];
  uint64_t v7 = a2[2];
  return PB::PtrVector<sirinluexternal::UserParse>::operator==((uint64_t *)(a1 + 8), v6, v7);
}

uint64_t sirinluinternaluaap_parser::UaaPParserResponse::hash_value(sirinluinternaluaap_parser::UaaPParserResponse *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (!v1)
  {
    uint64_t v5 = 0;
    goto LABEL_11;
  }
  if ((*(unsigned char *)(v1 + 28) & 1) == 0)
  {
    uint64_t v2 = 0;
    if ((*(unsigned char *)(v1 + 28) & 2) != 0) {
      goto LABEL_4;
    }
LABEL_8:
    uint64_t v3 = 0;
    if ((*(unsigned char *)(v1 + 28) & 4) != 0) {
      goto LABEL_5;
    }
LABEL_9:
    uint64_t v4 = 0;
    goto LABEL_10;
  }
  uint64_t v2 = *(void *)(v1 + 8);
  if ((*(unsigned char *)(v1 + 28) & 2) == 0) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v3 = *(void *)(v1 + 16);
  if ((*(unsigned char *)(v1 + 28) & 4) == 0) {
    goto LABEL_9;
  }
LABEL_5:
  uint64_t v4 = *(int *)(v1 + 24);
LABEL_10:
  uint64_t v5 = v3 ^ v2 ^ v4;
LABEL_11:
  uint64_t v6 = (sirinluexternal::UserParse **)*((void *)this + 1);
  uint64_t v7 = (sirinluexternal::UserParse **)*((void *)this + 2);
  if (v6 == v7)
  {
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = 0;
    do
    {
      unsigned int v9 = *v6++;
      v8 ^= sirinluexternal::UserParse::hash_value(v9);
    }
    while (v6 != v7);
  }
  return v8 ^ v5;
}

uint64_t sirinluinternaluaap_parser::UaaPParserResponse::makeRequestId(uint64_t this)
{
  if (!*(void *)(this + 32)) {
    operator new();
  }
  return this;
}

uint64_t SIRINLUEXTERNALCorrectionOutcomeReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 12) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_29;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_31;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_29:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v19) = 0;
        }
LABEL_31:
        *(_DWORD *)(a1 + 8) = v19;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sirinluinternal::ComponentOverride::formatText(sirinluinternal::ComponentOverride *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 72);
  if (v5)
  {
    PB::TextFormatter::format(a2, "creation_timestamp_ms_since_unix_epoch");
    char v5 = *((unsigned char *)this + 72);
  }
  if ((v5 & 4) != 0) {
    PB::TextFormatter::format(a2, "enabled");
  }
  if (*((void *)this + 2)) {
    PB::TextFormatter::format();
  }
  uint64_t v6 = (uint64_t *)*((void *)this + 3);
  uint64_t v7 = (uint64_t *)*((void *)this + 4);
  while (v6 != v7)
  {
    uint64_t v8 = *v6++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v8 + 32))(v8, a2, "nlu_request_rules");
  }
  if ((*((unsigned char *)this + 72) & 2) != 0) {
    PB::TextFormatter::format(a2, "override_namespace");
  }
  if (*((void *)this + 6)) {
    PB::TextFormatter::format();
  }
  uint64_t v9 = *((void *)this + 7);
  if (v9) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v9 + 32))(v9, a2, "value");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluinternal::ComponentOverride::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if (*(void *)(this + 16)) {
    this = PB::Writer::write();
  }
  char v4 = *(unsigned char *)(v3 + 72);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    char v4 = *(unsigned char *)(v3 + 72);
    if ((v4 & 4) == 0)
    {
LABEL_5:
      if ((v4 & 1) == 0) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
  }
  else if ((*(unsigned char *)(v3 + 72) & 4) == 0)
  {
    goto LABEL_5;
  }
  this = PB::Writer::write(a2);
  if (*(unsigned char *)(v3 + 72)) {
LABEL_6:
  }
    this = PB::Writer::writeVarInt(a2);
LABEL_7:
  char v5 = *(const PB::Base **)(v3 + 56);
  if (v5) {
    this = PB::Writer::writeSubmessage(a2, v5);
  }
  uint64_t v6 = *(const PB::Base ***)(v3 + 24);
  uint64_t v7 = *(const PB::Base ***)(v3 + 32);
  while (v6 != v7)
  {
    uint64_t v8 = *v6++;
    this = PB::Writer::writeSubmessage(a2, v8);
  }
  if (*(void *)(v3 + 48))
  {
    return PB::Writer::write();
  }
  return this;
}

uint64_t sirinluinternal::ComponentOverride::readFrom(sirinluinternal::ComponentOverride *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_25;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      goto LABEL_20;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_25:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        operator new();
      case 2u:
        *((unsigned char *)this + 72) |= 2u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v22 = *((void *)a2 + 2);
        uint64_t v23 = *(void *)a2;
        if (v21 <= 0xFFFFFFFFFFFFFFF5 && v21 + 10 <= v22)
        {
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          do
          {
            unint64_t v27 = v21 + 1;
            *((void *)a2 + 1) = v21 + 1;
            char v28 = *(unsigned char *)(v23 + v21);
            v26 |= (unint64_t)(v28 & 0x7F) << v24;
            if ((v28 & 0x80) == 0) {
              goto LABEL_66;
            }
            v24 += 7;
            unint64_t v21 = v27;
            BOOL v14 = v25++ > 8;
          }
          while (!v14);
LABEL_53:
          LODWORD(v26) = 0;
          goto LABEL_66;
        }
        char v41 = 0;
        unsigned int v42 = 0;
        uint64_t v26 = 0;
        if (v22 <= v21) {
          unint64_t v22 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v22 == v21)
          {
            LODWORD(v26) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v43 = v21 + 1;
            char v44 = *(unsigned char *)(v23 + v21);
            *((void *)a2 + 1) = v43;
            v26 |= (unint64_t)(v44 & 0x7F) << v41;
            if (v44 < 0)
            {
              v41 += 7;
              unint64_t v21 = v43;
              BOOL v14 = v42++ > 8;
              if (v14) {
                goto LABEL_53;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v26) = 0;
            }
          }
          break;
        }
LABEL_66:
        *((_DWORD *)this + 16) = v26;
        goto LABEL_20;
      case 3u:
        *((unsigned char *)this + 72) |= 4u;
        unint64_t v29 = *((void *)a2 + 1);
        if (v29 >= *((void *)a2 + 2))
        {
          BOOL v32 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          unint64_t v30 = v29 + 1;
          int v31 = *(unsigned __int8 *)(*(void *)a2 + v29);
          *((void *)a2 + 1) = v30;
          BOOL v32 = v31 != 0;
        }
        *((unsigned char *)this + 68) = v32;
        goto LABEL_20;
      case 4u:
        *((unsigned char *)this + 72) |= 1u;
        unint64_t v33 = *((void *)a2 + 1);
        unint64_t v34 = *((void *)a2 + 2);
        uint64_t v35 = *(void *)a2;
        if (v33 <= 0xFFFFFFFFFFFFFFF5 && v33 + 10 <= v34)
        {
          char v36 = 0;
          unsigned int v37 = 0;
          uint64_t v38 = 0;
          do
          {
            unint64_t v39 = v33 + 1;
            *((void *)a2 + 1) = v33 + 1;
            char v40 = *(unsigned char *)(v35 + v33);
            v38 |= (unint64_t)(v40 & 0x7F) << v36;
            if ((v40 & 0x80) == 0) {
              goto LABEL_70;
            }
            v36 += 7;
            unint64_t v33 = v39;
            BOOL v14 = v37++ > 8;
          }
          while (!v14);
LABEL_62:
          uint64_t v38 = 0;
          goto LABEL_70;
        }
        char v45 = 0;
        unsigned int v46 = 0;
        uint64_t v38 = 0;
        if (v34 <= v33) {
          unint64_t v34 = *((void *)a2 + 1);
        }
        break;
      case 5u:
        operator new();
      case 6u:
        PB::PtrVector<sirinluinternal::NluRequestRule>::emplace_back<>();
      case 7u:
        operator new();
      default:
        goto LABEL_19;
    }
    while (1)
    {
      if (v34 == v33)
      {
        uint64_t v38 = 0;
        *((unsigned char *)a2 + 24) = 1;
        goto LABEL_70;
      }
      unint64_t v47 = v33 + 1;
      char v48 = *(unsigned char *)(v35 + v33);
      *((void *)a2 + 1) = v47;
      v38 |= (unint64_t)(v48 & 0x7F) << v45;
      if ((v48 & 0x80) == 0) {
        break;
      }
      v45 += 7;
      unint64_t v33 = v47;
      BOOL v14 = v46++ > 8;
      if (v14) {
        goto LABEL_62;
      }
    }
    if (*((unsigned char *)a2 + 24)) {
      uint64_t v38 = 0;
    }
LABEL_70:
    *((void *)this + 1) = v38;
LABEL_20:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

void sirinluinternal::ComponentOverride::~ComponentOverride(sirinluinternal::ComponentOverride *this)
{
  sirinluinternal::ComponentOverride::~ComponentOverride(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t v3;
  void **v4;
  uint64_t vars8;

  *(void *)this = &unk_1F232E008;
  unint64_t v2 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::unique_ptr<PB::Data>::reset[abi:ne180100]((void ***)this + 6, 0);
  int v4 = (void **)((char *)this + 24);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v4);
  unint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    std::default_delete<std::string>::operator()[abi:ne180100](v3);
  }
  PB::Base::~Base(this);
}

double sirinluinternal::ComponentOverride::ComponentOverride(sirinluinternal::ComponentOverride *this)
{
  *(void *)this = &unk_1F232E008;
  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_DWORD *)this + 16) = 0;
  *((unsigned char *)this + 68) = 1;
  *((_DWORD *)this + 18) = 0;
  return result;
}

{
  double result;

  *(void *)this = &unk_1F232E008;
  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_DWORD *)this + 16) = 0;
  *((unsigned char *)this + 68) = 1;
  *((_DWORD *)this + 18) = 0;
  return result;
}

uint64_t sirinluinternal::ComponentOverride::ComponentOverride(uint64_t this, const sirinluinternal::ComponentOverride *a2)
{
  *(void *)this = &unk_1F232E008;
  *(_OWORD *)(this + 16) = 0u;
  *(_OWORD *)(this + 48) = 0u;
  *(_DWORD *)(this + 64) = 0;
  *(_OWORD *)(this + 32) = 0u;
  *(unsigned char *)(this + 68) = 1;
  *(_DWORD *)(this + 72) = 0;
  if (*((void *)a2 + 2)) {
    operator new();
  }
  char v2 = *((unsigned char *)a2 + 72);
  if ((v2 & 2) != 0)
  {
    int v4 = *((_DWORD *)a2 + 16);
    *(unsigned char *)(this + 72) |= 2u;
    *(_DWORD *)(this + 64) = v4;
    char v2 = *((unsigned char *)a2 + 72);
    if ((v2 & 4) == 0)
    {
LABEL_5:
      if ((v2 & 1) == 0) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
  }
  else if ((*((unsigned char *)a2 + 72) & 4) == 0)
  {
    goto LABEL_5;
  }
  char v5 = *((unsigned char *)a2 + 68);
  *(unsigned char *)(this + 72) |= 4u;
  *(unsigned char *)(this + 68) = v5;
  if (*((unsigned char *)a2 + 72))
  {
LABEL_6:
    uint64_t v3 = *((void *)a2 + 1);
    *(unsigned char *)(this + 72) |= 1u;
    *(void *)(this + 8) = v3;
  }
LABEL_7:
  if (*((void *)a2 + 7)) {
    operator new();
  }
  if (*((void *)a2 + 3) != *((void *)a2 + 4)) {
    PB::PtrVector<sirinluinternal::NluRequestRule>::emplace_back<sirinluinternal::NluRequestRule const&>();
  }
  if (*((void *)a2 + 6)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternal::ComponentOverride::operator=(uint64_t a1, const sirinluinternal::ComponentOverride *a2)
{
  if ((const sirinluinternal::ComponentOverride *)a1 != a2)
  {
    sirinluinternal::ComponentOverride::ComponentOverride((uint64_t)&v11, a2);
    long long v3 = v14;
    long long v4 = *(_OWORD *)(a1 + 16);
    long long v5 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 16) = v13;
    *(_OWORD *)(a1 + 32) = v3;
    int v6 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v18;
    int v18 = v6;
    int v7 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v16;
    int v16 = v7;
    LOBYTE(v7) = *(unsigned char *)(a1 + 68);
    *(unsigned char *)(a1 + 68) = v17;
    char v17 = v7;
    uint64_t v8 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v12;
    uint64_t v12 = v8;
    long long v13 = v4;
    long long v14 = v5;
    long long v9 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(a1 + 48) = v15;
    long long v15 = v9;
    sirinluinternal::ComponentOverride::~ComponentOverride((sirinluinternal::ComponentOverride *)&v11);
  }
  return a1;
}

uint64_t sirinluinternal::swap(uint64_t this, sirinluinternal::ComponentOverride *a2, sirinluinternal::ComponentOverride *a3)
{
  int v3 = *(_DWORD *)(this + 72);
  *(_DWORD *)(this + 72) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v3;
  int v4 = *(_DWORD *)(this + 64);
  *(_DWORD *)(this + 64) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v4;
  LOBYTE(v4) = *(unsigned char *)(this + 68);
  *(unsigned char *)(this + 68) = *((unsigned char *)a2 + 68);
  *((unsigned char *)a2 + 68) = v4;
  uint64_t v6 = *(void *)(this + 8);
  uint64_t v5 = *(void *)(this + 16);
  uint64_t v7 = *((void *)a2 + 2);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *(void *)(this + 16) = v7;
  *((void *)a2 + 1) = v6;
  *((void *)a2 + 2) = v5;
  uint64_t v8 = *(void *)(this + 56);
  *(void *)(this + 56) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v8;
  uint64_t v9 = *(void *)(this + 24);
  *(void *)(this + 24) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v9;
  uint64_t v10 = *(void *)(this + 32);
  *(void *)(this + 32) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v10;
  uint64_t v11 = *(void *)(this + 40);
  *(void *)(this + 40) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v11;
  uint64_t v12 = *(void *)(this + 48);
  *(void *)(this + 48) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v12;
  return this;
}

uint64_t sirinluinternal::ComponentOverride::ComponentOverride(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F232E008;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 68) = 1;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a2 + 72) = 0;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v4;
  if (v5) {
    std::default_delete<std::string>::operator()[abi:ne180100](v5);
  }
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 68) = *(unsigned char *)(a2 + 68);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = 0;
  uint64_t v7 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate((void **)(a1 + 24));
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_OWORD *)(a2 + 24) = 0u;
  uint64_t v8 = *(void ***)(a2 + 48);
  *(_OWORD *)(a2 + 40) = 0u;
  std::unique_ptr<PB::Data>::reset[abi:ne180100]((void ***)(a1 + 48), v8);
  return a1;
}

uint64_t sirinluinternal::ComponentOverride::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sirinluinternal::ComponentOverride::ComponentOverride((uint64_t)&v11, a2);
    long long v3 = v14;
    long long v4 = *(_OWORD *)(a1 + 16);
    long long v5 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 16) = v13;
    *(_OWORD *)(a1 + 32) = v3;
    int v6 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v18;
    int v18 = v6;
    int v7 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v16;
    int v16 = v7;
    LOBYTE(v7) = *(unsigned char *)(a1 + 68);
    *(unsigned char *)(a1 + 68) = v17;
    char v17 = v7;
    uint64_t v8 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v12;
    uint64_t v12 = v8;
    long long v13 = v4;
    long long v14 = v5;
    long long v9 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(a1 + 48) = v15;
    long long v15 = v9;
    sirinluinternal::ComponentOverride::~ComponentOverride((sirinluinternal::ComponentOverride *)&v11);
  }
  return a1;
}

uint64_t sirinluinternal::ComponentOverride::operator==(uint64_t a1, uint64_t a2)
{
  long long v4 = *(unsigned __int8 **)(a1 + 16);
  long long v5 = *(unsigned __int8 ***)(a2 + 16);
  if (v4)
  {
    if (!v5) {
      return 0;
    }
    uint64_t v6 = v4[23];
    if ((v6 & 0x80u) == 0) {
      int v7 = (unsigned __int8 *)v4[23];
    }
    else {
      int v7 = (unsigned __int8 *)*((void *)v4 + 1);
    }
    uint64_t v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    int v9 = (char)v8;
    if ((char)v8 < 0) {
      uint64_t v8 = v5[1];
    }
    if (v7 != v8) {
      return 0;
    }
    if (v9 >= 0) {
      uint64_t v10 = *(unsigned __int8 **)(a2 + 16);
    }
    else {
      uint64_t v10 = *v5;
    }
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v10, *((void *)v4 + 1))) {
        return 0;
      }
    }
    else if (v4[23])
    {
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6) {
          goto LABEL_18;
        }
      }
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
LABEL_18:
  if ((*(unsigned char *)(a1 + 72) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 72) & 2) == 0 || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 72) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 72) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 72) & 4) == 0 || *(unsigned __int8 *)(a1 + 68) != *(unsigned __int8 *)(a2 + 68)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 72) & 4) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 72))
  {
    if ((*(unsigned char *)(a2 + 72) & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 72))
  {
    return 0;
  }
  uint64_t v11 = *(void **)(a1 + 56);
  uint64_t v12 = *(void **)(a2 + 56);
  if (!v11)
  {
    if (!v12) {
      goto LABEL_42;
    }
    return 0;
  }
  if (!v12 || (sirinluinternal::OverrideValue::operator==(v11, v12) & 1) == 0) {
    return 0;
  }
LABEL_42:
  uint64_t result = PB::PtrVector<sirinluinternal::NluRequestRule>::operator==((uint64_t *)(a1 + 24), *(void ***)(a2 + 24), *(void *)(a2 + 32));
  if (result)
  {
    if (!*(void *)(a1 + 48)) {
      return *(void *)(a2 + 48) == 0;
    }
    if (*(void *)(a2 + 48))
    {
      if (PB::Data::operator==()) {
        return 1;
      }
      if (!*(void *)(a1 + 48)) {
        return *(void *)(a2 + 48) == 0;
      }
    }
    return 0;
  }
  return result;
}

unint64_t sirinluinternal::ComponentOverride::hash_value(sirinluinternal::ComponentOverride *this)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    unint64_t v3 = std::__string_hash<char>::operator()[abi:ne180100](v2);
  }
  else {
    unint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 72) & 2) == 0)
  {
    uint64_t v4 = 0;
    if ((*((unsigned char *)this + 72) & 4) != 0) {
      goto LABEL_6;
    }
LABEL_9:
    uint64_t v5 = 0;
    if (*((unsigned char *)this + 72)) {
      goto LABEL_7;
    }
    goto LABEL_10;
  }
  uint64_t v4 = *((int *)this + 16);
  if ((*((unsigned char *)this + 72) & 4) == 0) {
    goto LABEL_9;
  }
LABEL_6:
  uint64_t v5 = *((unsigned __int8 *)this + 68);
  if (*((unsigned char *)this + 72))
  {
LABEL_7:
    uint64_t v6 = *((void *)this + 1);
    goto LABEL_11;
  }
LABEL_10:
  uint64_t v6 = 0;
LABEL_11:
  int v7 = (sirinluinternal::OverrideValue *)*((void *)this + 7);
  if (v7) {
    unint64_t v8 = sirinluinternal::OverrideValue::hash_value(v7);
  }
  else {
    unint64_t v8 = 0;
  }
  int v9 = (sirinluinternal::NluRequestRule **)*((void *)this + 3);
  uint64_t v10 = (sirinluinternal::NluRequestRule **)*((void *)this + 4);
  if (v9 == v10)
  {
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = *v9++;
      v11 ^= sirinluinternal::NluRequestRule::hash_value(v12);
    }
    while (v9 != v10);
  }
  if (*((void *)this + 6)) {
    uint64_t v13 = PBHashBytes();
  }
  else {
    uint64_t v13 = 0;
  }
  return v4 ^ v3 ^ v5 ^ v6 ^ v13 ^ v8 ^ v11;
}

uint64_t sirinluinternal::ComponentOverride::makeValue(uint64_t this)
{
  if (!*(void *)(this + 56)) {
    operator new();
  }
  return this;
}

uint64_t SIRICOMMONDoubleValueReadFrom(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        *(unsigned char *)(a1 + 16) |= 1u;
        uint64_t v18 = *v3;
        unint64_t v19 = *(void *)(a2 + v18);
        if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v20 = *(void *)(*(void *)(a2 + *v7) + v19);
          *(void *)(a2 + v18) = v19 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v20 = 0;
        }
        *(void *)(a1 + 8) = v20;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sirinluinternal::LVCOverrideValue::formatText(sirinluinternal::LVCOverrideValue *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "lvc_value");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluinternal::LVCOverrideValue::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2);
  }
  return this;
}

uint64_t sirinluinternal::LVCOverrideValue::readFrom(sirinluinternal::LVCOverrideValue *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluinternal::LVCOverrideValue::~LVCOverrideValue(sirinluinternal::LVCOverrideValue *this)
{
  sirinluinternal::LVCOverrideValue::~LVCOverrideValue(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t vars8;

  unint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1F232E058;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

void *sirinluinternal::LVCOverrideValue::LVCOverrideValue(void *this)
{
  *this = &unk_1F232E058;
  this[1] = 0;
  return this;
}

{
  *this = &unk_1F232E058;
  this[1] = 0;
  return this;
}

void *sirinluinternal::LVCOverrideValue::LVCOverrideValue(void *this, const sirinluinternal::LVCOverrideValue *a2)
{
  *this = &unk_1F232E058;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const sirinluinternal::LVCOverrideValue *sirinluinternal::LVCOverrideValue::operator=(const sirinluinternal::LVCOverrideValue *a1, const sirinluinternal::LVCOverrideValue *a2)
{
  if (a1 != a2)
  {
    sirinluinternal::LVCOverrideValue::LVCOverrideValue(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    sirinluinternal::LVCOverrideValue::~LVCOverrideValue((sirinluinternal::LVCOverrideValue *)&v5);
  }
  return a1;
}

uint64_t sirinluinternal::swap(uint64_t this, sirinluinternal::LVCOverrideValue *a2, sirinluinternal::LVCOverrideValue *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *sirinluinternal::LVCOverrideValue::LVCOverrideValue(void *a1, uint64_t a2)
{
  *a1 = &unk_1F232E058;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_1F232E058;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t sirinluinternal::LVCOverrideValue::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = &unk_1F232E058;
    v6[1] = v4;
    sirinluinternal::LVCOverrideValue::~LVCOverrideValue((sirinluinternal::LVCOverrideValue *)v6);
  }
  return a1;
}

BOOL sirinluinternal::LVCOverrideValue::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    return (v2 | v3) == 0;
  }
  else {
    return sirinluexternal::MultilingualVariant::operator==(v2, v3);
  }
}

sirinluexternal::MultilingualVariant *sirinluinternal::LVCOverrideValue::hash_value(sirinluinternal::LVCOverrideValue *this)
{
  uint64_t result = (sirinluexternal::MultilingualVariant *)*((void *)this + 1);
  if (result) {
    return (sirinluexternal::MultilingualVariant *)sirinluexternal::MultilingualVariant::hash_value(result);
  }
  return result;
}

uint64_t sirinluinternal::LVCOverrideValue::makeLvcValue(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void sub_1C8BA04B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C8BA0530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C8BA05A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8BA0624(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8BA0690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C8BA0704(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8BA0784(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8BA07F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C8BA0864(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8BA08E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8BA0978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C8BA0A0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C8BA0AF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C8BA0BDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C8BA0C34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8BA0C94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8BA0D14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8BA0DD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8BA0E5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8BA0F30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C8BA0FB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C8BA1030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C8BA10A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8BA1124(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL SIRINLUINTERNALSNLCSNLCParserRequestReadFrom(id *a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  BOOL v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = objc_alloc_init(SIRINLUEXTERNALUUID);
        objc_storeStrong(a1 + 5, v17);
        if PBReaderPlaceMark() && (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v17, a2)) {
          goto LABEL_41;
        }
        goto LABEL_45;
      case 2u:
        char v17 = objc_alloc_init(SIRINLUINTERNALNLV4_PARSERTokenisation);
        objc_storeStrong(a1 + 6, v17);
        if (!PBReaderPlaceMark() || !SIRINLUINTERNALNLV4_PARSERTokenisationReadFrom((uint64_t)v17, a2)) {
          goto LABEL_45;
        }
        goto LABEL_41;
      case 3u:
        char v17 = objc_alloc_init(SIRINLUINTERNALNLv4EmbeddingTensor);
        objc_storeStrong(a1 + 1, v17);
        if (!PBReaderPlaceMark()
          || (SIRINLUINTERNALNLv4EmbeddingTensorReadFrom((uint64_t)v17, a2) & 1) == 0)
        {
          goto LABEL_45;
        }
        goto LABEL_41;
      case 4u:
        char v17 = objc_alloc_init(SIRINLUINTERNALMatchingSpan);
        [a1 addMatchingSpans:v17];
        if (!PBReaderPlaceMark() || (SIRINLUINTERNALMatchingSpanReadFrom((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_45;
        }
        goto LABEL_41;
      case 5u:
        char v17 = objc_alloc_init(SIRINLUEXTERNALTurnInput);
        objc_storeStrong(a1 + 7, v17);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALTurnInputReadFrom((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_45;
        }
        goto LABEL_41;
      case 6u:
        char v17 = objc_alloc_init(SIRINLUEXTERNALLegacyNLContext);
        objc_storeStrong(a1 + 2, v17);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALLegacyNLContextReadFrom((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_45;
        }
        goto LABEL_41;
      case 7u:
        char v17 = objc_alloc_init(SIRINLUEXTERNALRequestID);
        objc_storeStrong(a1 + 4, v17);
        if PBReaderPlaceMark() && (SIRINLUEXTERNALRequestIDReadFrom((uint64_t)v17, a2))
        {
LABEL_41:
          PBReaderRecallMark();

LABEL_42:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_45:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_42;
    }
  }
}

BOOL SIRINLUINTERNALUAAP_PARSERUaaPParserResponseReadFrom(id *a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  BOOL v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = objc_alloc_init(SIRINLUEXTERNALUUID);
        objc_storeStrong(a1 + 2, v17);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_30;
        }
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_27:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v17 = objc_alloc_init(SIRINLUEXTERNALUserParse);
    [a1 addHypotheses:v17];
    if (!PBReaderPlaceMark() || (SIRINLUEXTERNALUserParseReadFrom((uint64_t)v17, a2) & 1) == 0)
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t SIRINLUINTERNALMatchingSpanReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  BOOL v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    int v16 = v10 & 7;
    if (v15 || v16 == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 56;
        goto LABEL_57;
      case 2u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 40;
        goto LABEL_57;
      case 3u:
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v22 = 0;
        *(unsigned char *)(a1 + 88) |= 2u;
        while (2)
        {
          uint64_t v23 = *v3;
          unint64_t v24 = *(void *)(a2 + v23);
          if (v24 == -1 || v24 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v25 = *(unsigned char *)(*(void *)(a2 + *v7) + v24);
            *(void *)(a2 + v23) = v24 + 1;
            v22 |= (unint64_t)(v25 & 0x7F) << v20;
            if (v25 < 0)
            {
              v20 += 7;
              BOOL v14 = v21++ >= 9;
              if (v14)
              {
                LODWORD(v22) = 0;
                goto LABEL_61;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v22) = 0;
        }
LABEL_61:
        uint64_t v40 = 72;
        goto LABEL_66;
      case 4u:
        char v26 = 0;
        unsigned int v27 = 0;
        uint64_t v22 = 0;
        *(unsigned char *)(a1 + 88) |= 1u;
        while (2)
        {
          uint64_t v28 = *v3;
          unint64_t v29 = *(void *)(a2 + v28);
          if (v29 == -1 || v29 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
            *(void *)(a2 + v28) = v29 + 1;
            v22 |= (unint64_t)(v30 & 0x7F) << v26;
            if (v30 < 0)
            {
              v26 += 7;
              BOOL v14 = v27++ >= 9;
              if (v14)
              {
                LODWORD(v22) = 0;
                goto LABEL_65;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v22) = 0;
        }
LABEL_65:
        uint64_t v40 = 32;
LABEL_66:
        *(_DWORD *)(a1 + v40) = v22;
        goto LABEL_77;
      case 5u:
        int v31 = objc_alloc_init(SIRINLUEXTERNALUsoGraph);
        objc_storeStrong((id *)(a1 + 80), v31);
        if (!PBReaderPlaceMark() || !SIRINLUEXTERNALUsoGraphReadFrom((id *)&v31->super.super.isa, a2)) {
          goto LABEL_80;
        }
        goto LABEL_55;
      case 6u:
        if (v16 == 2)
        {
          uint64_t result = PBReaderPlaceMark();
          if (!result) {
            return result;
          }
          while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
          {
            char v33 = 0;
            unsigned int v34 = 0;
            uint64_t v35 = 0;
            while (1)
            {
              uint64_t v36 = *v3;
              unint64_t v37 = *(void *)(a2 + v36);
              if (v37 == -1 || v37 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v38 = *(unsigned char *)(*(void *)(a2 + *v7) + v37);
              *(void *)(a2 + v36) = v37 + 1;
              v35 |= (unint64_t)(v38 & 0x7F) << v33;
              if (v38 < 0)
              {
                v33 += 7;
                BOOL v14 = v34++ >= 9;
                if (!v14) {
                  continue;
                }
              }
              goto LABEL_52;
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_52:
            PBRepeatedInt32Add();
          }
          PBReaderRecallMark();
        }
        else
        {
          char v41 = 0;
          unsigned int v42 = 0;
          uint64_t v43 = 0;
          while (1)
          {
            uint64_t v44 = *v3;
            unint64_t v45 = *(void *)(a2 + v44);
            if (v45 == -1 || v45 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v46 = *(unsigned char *)(*(void *)(a2 + *v7) + v45);
            *(void *)(a2 + v44) = v45 + 1;
            v43 |= (unint64_t)(v46 & 0x7F) << v41;
            if (v46 < 0)
            {
              v41 += 7;
              BOOL v14 = v42++ >= 9;
              if (!v14) {
                continue;
              }
            }
            goto LABEL_76;
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_76:
          PBRepeatedInt32Add();
        }
        goto LABEL_77;
      case 7u:
        int v31 = objc_alloc_init(SIRINLUINTERNALInternalSpanData);
        objc_storeStrong((id *)(a1 + 48), v31);
        if (PBReaderPlaceMark()
          && SIRINLUINTERNALInternalSpanDataReadFrom((id *)&v31->super.super.isa, a2))
        {
LABEL_55:
          PBReaderRecallMark();

LABEL_77:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_80:

        return 0;
      case 8u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 64;
LABEL_57:
        unint64_t v39 = *(void **)(a1 + v19);
        *(void *)(a1 + v19) = v18;

        goto LABEL_77;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_77;
    }
  }
}

BOOL SIRINLUEXTERNALSystemInformedReadFrom(id *a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  BOOL v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = objc_alloc_init(SIRINLUEXTERNALUUID);
        objc_storeStrong(a1 + 2, v17);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_30;
        }
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_27:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v17 = objc_alloc_init(SIRINLUEXTERNALUsoGraph);
    [a1 addEntities:v17];
    if (!PBReaderPlaceMark() || !SIRINLUEXTERNALUsoGraphReadFrom((id *)&v17->super.super.isa, a2))
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sirinluinternal::SubwordToken::formatText(sirinluinternal::SubwordToken *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 24);
  if (v5)
  {
    PB::TextFormatter::format(a2, "subword_token_index");
    char v5 = *((unsigned char *)this + 24);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(a2, "token_index");
  }
  if (*((void *)this + 1)) {
    PB::TextFormatter::format();
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluinternal::SubwordToken::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if (*(void *)(this + 8)) {
    this = PB::Writer::write();
  }
  char v4 = *(unsigned char *)(v3 + 24);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2);
    char v4 = *(unsigned char *)(v3 + 24);
  }
  if ((v4 & 2) != 0)
  {
    return PB::Writer::writeVarInt(a2);
  }
  return this;
}

uint64_t sirinluinternal::SubwordToken::readFrom(sirinluinternal::SubwordToken *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_25;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v19 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((unsigned char *)this + 24) |= 2u;
        unint64_t v22 = *((void *)a2 + 1);
        unint64_t v23 = *((void *)a2 + 2);
        uint64_t v24 = *(void *)a2;
        if (v22 > 0xFFFFFFFFFFFFFFF5 || v22 + 10 > v23)
        {
          char v38 = 0;
          unsigned int v39 = 0;
          uint64_t v27 = 0;
          if (v23 <= v22) {
            unint64_t v23 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v23 == v22)
            {
              LODWORD(v27) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_62;
            }
            unint64_t v40 = v22 + 1;
            char v41 = *(unsigned char *)(v24 + v22);
            *((void *)a2 + 1) = v40;
            v27 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0) {
              break;
            }
            v38 += 7;
            unint64_t v22 = v40;
            BOOL v14 = v39++ > 8;
            if (v14)
            {
LABEL_51:
              LODWORD(v27) = 0;
              goto LABEL_62;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v27) = 0;
          }
        }
        else
        {
          char v25 = 0;
          unsigned int v26 = 0;
          uint64_t v27 = 0;
          while (1)
          {
            unint64_t v28 = v22 + 1;
            *((void *)a2 + 1) = v22 + 1;
            char v29 = *(unsigned char *)(v24 + v22);
            v27 |= (unint64_t)(v29 & 0x7F) << v25;
            if ((v29 & 0x80) == 0) {
              break;
            }
            v25 += 7;
            unint64_t v22 = v28;
            BOOL v14 = v26++ > 8;
            if (v14) {
              goto LABEL_51;
            }
          }
        }
LABEL_62:
        *((_DWORD *)this + 5) = v27;
      }
      else if (v19 == 2)
      {
        *((unsigned char *)this + 24) |= 1u;
        unint64_t v30 = *((void *)a2 + 1);
        unint64_t v31 = *((void *)a2 + 2);
        uint64_t v32 = *(void *)a2;
        if (v30 > 0xFFFFFFFFFFFFFFF5 || v30 + 10 > v31)
        {
          char v42 = 0;
          unsigned int v43 = 0;
          uint64_t v35 = 0;
          if (v31 <= v30) {
            unint64_t v31 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v31 == v30)
            {
              LODWORD(v35) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_66;
            }
            unint64_t v44 = v30 + 1;
            char v45 = *(unsigned char *)(v32 + v30);
            *((void *)a2 + 1) = v44;
            v35 |= (unint64_t)(v45 & 0x7F) << v42;
            if ((v45 & 0x80) == 0) {
              break;
            }
            v42 += 7;
            unint64_t v30 = v44;
            BOOL v14 = v43++ > 8;
            if (v14)
            {
LABEL_58:
              LODWORD(v35) = 0;
              goto LABEL_66;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v35) = 0;
          }
        }
        else
        {
          char v33 = 0;
          unsigned int v34 = 0;
          uint64_t v35 = 0;
          while (1)
          {
            unint64_t v36 = v30 + 1;
            *((void *)a2 + 1) = v30 + 1;
            char v37 = *(unsigned char *)(v32 + v30);
            v35 |= (unint64_t)(v37 & 0x7F) << v33;
            if ((v37 & 0x80) == 0) {
              break;
            }
            v33 += 7;
            unint64_t v30 = v36;
            BOOL v14 = v34++ > 8;
            if (v14) {
              goto LABEL_58;
            }
          }
        }
LABEL_66:
        *((_DWORD *)this + 4) = v35;
      }
      else
      {
        if (v19 == 1) {
          operator new();
        }
LABEL_25:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_25;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sirinluinternal::SubwordToken::operator=(uint64_t a1, const sirinluinternal::SubwordToken *a2)
{
  if ((const sirinluinternal::SubwordToken *)a1 != a2)
  {
    sirinluinternal::SubwordToken::SubwordToken((uint64_t)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v4;
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v9;
    uint64_t v9 = v5;
    sirinluinternal::SubwordToken::~SubwordToken((sirinluinternal::SubwordToken *)&v7);
  }
  return a1;
}

uint64_t sirinluinternal::swap(uint64_t this, sirinluinternal::SubwordToken *a2, sirinluinternal::SubwordToken *a3)
{
  int v3 = *(_DWORD *)(this + 24);
  *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  uint64_t v4 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  return this;
}

uint64_t sirinluinternal::SubwordToken::SubwordToken(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F232E0A8;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  if (v5) {
    std::default_delete<std::string>::operator()[abi:ne180100](v5);
  }
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  return a1;
}

uint64_t sirinluinternal::SubwordToken::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sirinluinternal::SubwordToken::SubwordToken((uint64_t)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v4;
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v9;
    uint64_t v9 = v5;
    sirinluinternal::SubwordToken::~SubwordToken((sirinluinternal::SubwordToken *)&v7);
  }
  return a1;
}

BOOL sirinluinternal::SubwordToken::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned __int8 **)(a1 + 8);
  uint64_t v5 = *(unsigned __int8 ***)(a2 + 8);
  if (v4)
  {
    if (!v5) {
      return 0;
    }
    uint64_t v6 = v4[23];
    if ((v6 & 0x80u) == 0) {
      uint64_t v7 = (unsigned __int8 *)v4[23];
    }
    else {
      uint64_t v7 = (unsigned __int8 *)*((void *)v4 + 1);
    }
    uint64_t v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    int v9 = (char)v8;
    if ((char)v8 < 0) {
      uint64_t v8 = v5[1];
    }
    if (v7 != v8) {
      return 0;
    }
    if (v9 >= 0) {
      int v10 = *(unsigned __int8 **)(a2 + 8);
    }
    else {
      int v10 = *v5;
    }
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v10, *((void *)v4 + 1))) {
        return 0;
      }
    }
    else if (v4[23])
    {
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6) {
          goto LABEL_18;
        }
      }
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
LABEL_18:
  if (*(unsigned char *)(a1 + 24))
  {
    if ((*(unsigned char *)(a2 + 24) & 1) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 24))
  {
    return 0;
  }
  BOOL result = (*(unsigned char *)(a2 + 24) & 2) == 0;
  if ((*(unsigned char *)(a1 + 24) & 2) == 0) {
    return result;
  }
  return (*(unsigned char *)(a2 + 24) & 2) != 0 && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20);
}

unint64_t sirinluinternal::SubwordToken::hash_value(sirinluinternal::SubwordToken *this)
{
  unint64_t v2 = *((void *)this + 1);
  if (v2) {
    unint64_t v2 = std::__string_hash<char>::operator()[abi:ne180100](v2);
  }
  if (*((unsigned char *)this + 24))
  {
    uint64_t v3 = *((int *)this + 4);
    if ((*((unsigned char *)this + 24) & 2) != 0) {
      goto LABEL_5;
    }
LABEL_7:
    uint64_t v4 = 0;
    return v3 ^ v2 ^ v4;
  }
  uint64_t v3 = 0;
  if ((*((unsigned char *)this + 24) & 2) == 0) {
    goto LABEL_7;
  }
LABEL_5:
  uint64_t v4 = *((int *)this + 5);
  return v3 ^ v2 ^ v4;
}

uint64_t sirinluinternalsnlp_intermediate::ITFMAssetVersion::formatText(sirinluinternalsnlp_intermediate::ITFMAssetVersion *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((void *)this + 1)) {
    PB::TextFormatter::format();
  }
  uint64_t v5 = *((void *)this + 2);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "version");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluinternalsnlp_intermediate::ITFMAssetVersion::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *(const PB::Base **)(this + 16);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  if (*(void *)(v3 + 8))
  {
    return PB::Writer::write();
  }
  return this;
}

uint64_t sirinluinternalsnlp_intermediate::ITFMAssetVersion::readFrom(sirinluinternalsnlp_intermediate::ITFMAssetVersion *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_24;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 2) {
        operator new();
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_24:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_24;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluinternalsnlp_intermediate::ITFMAssetVersion::~ITFMAssetVersion(sirinluinternalsnlp_intermediate::ITFMAssetVersion *this)
{
  sirinluinternalsnlp_intermediate::ITFMAssetVersion::~ITFMAssetVersion(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1F232E0F8;
  unint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    std::default_delete<std::string>::operator()[abi:ne180100](v3);
  }
  PB::Base::~Base(this);
}

void *sirinluinternalsnlp_intermediate::ITFMAssetVersion::ITFMAssetVersion(void *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1F232E0F8;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1F232E0F8;
  return this;
}

void *sirinluinternalsnlp_intermediate::ITFMAssetVersion::ITFMAssetVersion(void *this, const sirinluinternalsnlp_intermediate::ITFMAssetVersion *a2)
{
  *this = &unk_1F232E0F8;
  this[1] = 0;
  this[2] = 0;
  if (*((void *)a2 + 2)) {
    operator new();
  }
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternalsnlp_intermediate::ITFMAssetVersion::operator=(uint64_t a1, const sirinluinternalsnlp_intermediate::ITFMAssetVersion *a2)
{
  if ((const sirinluinternalsnlp_intermediate::ITFMAssetVersion *)a1 != a2)
  {
    sirinluinternalsnlp_intermediate::ITFMAssetVersion::ITFMAssetVersion(&v5, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    long long v6 = v3;
    sirinluinternalsnlp_intermediate::ITFMAssetVersion::~ITFMAssetVersion((sirinluinternalsnlp_intermediate::ITFMAssetVersion *)&v5);
  }
  return a1;
}

uint64_t sirinluinternalsnlp_intermediate::swap(uint64_t this, sirinluinternalsnlp_intermediate::ITFMAssetVersion *a2, sirinluinternalsnlp_intermediate::ITFMAssetVersion *a3)
{
  uint64_t v3 = *(void *)(this + 16);
  *(void *)(this + 16) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v3;
  uint64_t v4 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  return this;
}

void *sirinluinternalsnlp_intermediate::ITFMAssetVersion::ITFMAssetVersion(void *a1, uint64_t a2)
{
  a1[1] = 0;
  uint64_t v4 = a1 + 1;
  *a1 = &unk_1F232E0F8;
  a1[2] = 0;
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  uint64_t v6 = a1[2];
  a1[2] = v5;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v8 = *v4;
  *uint64_t v4 = v7;
  if (v8) {
    std::default_delete<std::string>::operator()[abi:ne180100](v8);
  }
  return a1;
}

uint64_t sirinluinternalsnlp_intermediate::ITFMAssetVersion::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sirinluinternalsnlp_intermediate::ITFMAssetVersion::ITFMAssetVersion(&v5, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    long long v6 = v3;
    sirinluinternalsnlp_intermediate::ITFMAssetVersion::~ITFMAssetVersion((sirinluinternalsnlp_intermediate::ITFMAssetVersion *)&v5);
  }
  return a1;
}

uint64_t sirinluinternalsnlp_intermediate::ITFMAssetVersion::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a2 + 16);
  if (v4)
  {
    if (!v5 || !sirinluinternalsnlp_intermediate::SNLPAssetVersion::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  long long v6 = *(unsigned __int8 **)(a1 + 8);
  uint64_t v7 = *(unsigned __int8 ***)(a2 + 8);
  uint64_t result = v7 == 0;
  if (!v6) {
    return result;
  }
  if (!v7) {
    return 0;
  }
  uint64_t v9 = v6[23];
  if ((v9 & 0x80u) == 0) {
    unint64_t v10 = (unsigned __int8 *)v6[23];
  }
  else {
    unint64_t v10 = (unsigned __int8 *)*((void *)v6 + 1);
  }
  unint64_t v11 = (unsigned __int8 *)*((unsigned __int8 *)v7 + 23);
  int v12 = (char)v11;
  if ((char)v11 < 0) {
    unint64_t v11 = v7[1];
  }
  if (v10 != v11) {
    return 0;
  }
  if (v12 >= 0) {
    BOOL v13 = *(unsigned __int8 **)(a2 + 8);
  }
  else {
    BOOL v13 = *v7;
  }
  if ((v9 & 0x80) != 0) {
    return !memcmp(*(const void **)v6, v13, *((void *)v6 + 1));
  }
  if (!v6[23]) {
    return 1;
  }
  uint64_t v14 = v9 - 1;
  do
  {
    int v16 = *v6++;
    int v15 = v16;
    int v18 = *v13++;
    int v17 = v18;
    BOOL v20 = v14-- != 0;
    uint64_t result = v15 == v17;
  }
  while (v15 == v17 && v20);
  return result;
}

unint64_t sirinluinternalsnlp_intermediate::ITFMAssetVersion::hash_value(sirinluinternalsnlp_intermediate::ITFMAssetVersion *this)
{
  unint64_t v2 = (sirinluinternalsnlp_intermediate::SNLPAssetVersion *)*((void *)this + 2);
  if (v2) {
    unint64_t v3 = sirinluinternalsnlp_intermediate::SNLPAssetVersion::hash_value(v2);
  }
  else {
    unint64_t v3 = 0;
  }
  unint64_t v4 = *((void *)this + 1);
  if (v4) {
    unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100](v4);
  }
  return v4 ^ v3;
}

uint64_t sirinluinternalsnlp_intermediate::ITFMAssetVersion::makeVersion(uint64_t this)
{
  if (!*(void *)(this + 16)) {
    operator new();
  }
  return this;
}

uint64_t SIRINLUEXTERNALLegacyNLContextReadFrom(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 44) |= 2u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_57;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v19 = 0;
            goto LABEL_59;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_57:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v19 = 0;
        }
LABEL_59:
        BOOL v45 = v19 != 0;
        uint64_t v46 = 40;
        goto LABEL_68;
      case 2u:
        char v23 = 0;
        unsigned int v24 = 0;
        uint64_t v25 = 0;
        *(unsigned char *)(a1 + 44) |= 8u;
        while (2)
        {
          uint64_t v26 = *v3;
          unint64_t v27 = *(void *)(a2 + v26);
          if (v27 == -1 || v27 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v27);
            *(void *)(a2 + v26) = v27 + 1;
            v25 |= (unint64_t)(v28 & 0x7F) << v23;
            if (v28 < 0)
            {
              v23 += 7;
              BOOL v14 = v24++ >= 9;
              if (v14)
              {
                uint64_t v25 = 0;
                goto LABEL_63;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v25 = 0;
        }
LABEL_63:
        BOOL v45 = v25 != 0;
        uint64_t v46 = 42;
        goto LABEL_68;
      case 3u:
        uint64_t v29 = PBReaderReadString();
        unint64_t v30 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v29;

        goto LABEL_73;
      case 4u:
        char v31 = 0;
        unsigned int v32 = 0;
        uint64_t v33 = 0;
        *(unsigned char *)(a1 + 44) |= 4u;
        while (2)
        {
          uint64_t v34 = *v3;
          unint64_t v35 = *(void *)(a2 + v34);
          if (v35 == -1 || v35 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v36 = *(unsigned char *)(*(void *)(a2 + *v7) + v35);
            *(void *)(a2 + v34) = v35 + 1;
            v33 |= (unint64_t)(v36 & 0x7F) << v31;
            if (v36 < 0)
            {
              v31 += 7;
              BOOL v14 = v32++ >= 9;
              if (v14)
              {
                uint64_t v33 = 0;
                goto LABEL_67;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v33 = 0;
        }
LABEL_67:
        BOOL v45 = v33 != 0;
        uint64_t v46 = 41;
LABEL_68:
        *(unsigned char *)(a1 + v46) = v45;
        goto LABEL_73;
      case 5u:
        char v37 = objc_alloc_init(SIRICOMMONStringValue);
        [(id)a1 addRenderedTexts:v37];
        if PBReaderPlaceMark() && (SIRICOMMONStringValueReadFrom((uint64_t)v37, a2))
        {
          PBReaderRecallMark();
LABEL_55:

LABEL_73:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }

        return 0;
      case 7u:
        char v39 = 0;
        unsigned int v40 = 0;
        uint64_t v41 = 0;
        *(unsigned char *)(a1 + 44) |= 1u;
        while (2)
        {
          uint64_t v42 = *v3;
          unint64_t v43 = *(void *)(a2 + v42);
          if (v43 == -1 || v43 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v44 = *(unsigned char *)(*(void *)(a2 + *v7) + v43);
            *(void *)(a2 + v42) = v43 + 1;
            v41 |= (unint64_t)(v44 & 0x7F) << v39;
            if (v44 < 0)
            {
              v39 += 7;
              BOOL v14 = v40++ >= 9;
              if (v14)
              {
                LODWORD(v41) = 0;
                goto LABEL_72;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v41) = 0;
        }
LABEL_72:
        *(_DWORD *)(a1 + 8) = v41;
        goto LABEL_73;
      case 8u:
        PBReaderReadString();
        char v37 = (SIRICOMMONStringValue *)objc_claimAutoreleasedReturnValue();
        if (v37) {
          [(id)a1 addResponseSemanticValues:v37];
        }
        goto LABEL_55;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_73;
    }
  }
}

uint64_t sirinluexternal::CorrectionOutcome::formatText(sirinluexternal::CorrectionOutcome *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 12)) {
    PB::TextFormatter::format(a2, "type");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluexternal::CorrectionOutcome::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(unsigned char *)(this + 12)) {
    return PB::Writer::writeVarInt(a2);
  }
  return this;
}

uint64_t sirinluexternal::CorrectionOutcome::readFrom(sirinluexternal::CorrectionOutcome *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_29;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 12) |= 1u;
        unint64_t v19 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
        uint64_t v20 = *(void *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v3)
        {
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v23 = 0;
          if (v3 <= v19) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          else {
            unint64_t v2 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v2 == v19)
            {
              LODWORD(v23) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_43;
            }
            unint64_t v28 = v19 + 1;
            char v29 = *(unsigned char *)(v20 + v19);
            *((void *)a2 + 1) = v28;
            v23 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0) {
              break;
            }
            v26 += 7;
            unint64_t v19 = v28;
            BOOL v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              goto LABEL_42;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v23) = 0;
          }
LABEL_42:
          unint64_t v2 = v28;
        }
        else
        {
          char v21 = 0;
          unsigned int v22 = 0;
          uint64_t v23 = 0;
          while (1)
          {
            unint64_t v2 = v19 + 1;
            *((void *)a2 + 1) = v19 + 1;
            char v24 = *(unsigned char *)(v20 + v19);
            v23 |= (unint64_t)(v24 & 0x7F) << v21;
            if ((v24 & 0x80) == 0) {
              break;
            }
            v21 += 7;
            unint64_t v19 = v2;
            BOOL v14 = v22++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              break;
            }
          }
        }
LABEL_43:
        *((_DWORD *)this + 2) = v23;
      }
      else
      {
LABEL_29:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
      }
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_29;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluexternal::CorrectionOutcome::~CorrectionOutcome(sirinluexternal::CorrectionOutcome *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x1CB772580);
}

void *sirinluexternal::CorrectionOutcome::CorrectionOutcome(void *this)
{
  *this = &unk_1F232E148;
  this[1] = 0;
  return this;
}

{
  *this = &unk_1F232E148;
  this[1] = 0;
  return this;
}

uint64_t sirinluexternal::CorrectionOutcome::CorrectionOutcome(uint64_t this, const sirinluexternal::CorrectionOutcome *a2)
{
  *(void *)this = &unk_1F232E148;
  *(void *)(this + 8) = 0;
  if (*((unsigned char *)a2 + 12))
  {
    int v2 = *((_DWORD *)a2 + 2);
    *(unsigned char *)(this + 12) = 1;
    *(_DWORD *)(this + 8) = v2;
  }
  return this;
}

{
  int v2;

  *(void *)this = &unk_1F232E148;
  *(void *)(this + 8) = 0;
  if (*((unsigned char *)a2 + 12))
  {
    int v2 = *((_DWORD *)a2 + 2);
    *(unsigned char *)(this + 12) = 1;
    *(_DWORD *)(this + 8) = v2;
  }
  return this;
}

uint64_t sirinluexternal::CorrectionOutcome::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v6[0] = &unk_1F232E148;
    int v3 = *(unsigned __int8 *)(a2 + 12);
    uint64_t v4 = *(void *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = (v3 << 31 >> 31) & *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 12) = v3 & 1;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  void v6[2];

  if (a1 != a2)
  {
    v6[0] = &unk_1F232E148;
    int v3 = *(void *)(a2 + 8);
    *(_DWORD *)(a2 + 12) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t sirinluexternal::swap(uint64_t this, sirinluexternal::CorrectionOutcome *a2, sirinluexternal::CorrectionOutcome *a3)
{
  int v3 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  int v4 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  return this;
}

uint64_t sirinluexternal::CorrectionOutcome::CorrectionOutcome(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &unk_1F232E148;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

{
  *(void *)uint64_t result = &unk_1F232E148;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

BOOL sirinluexternal::CorrectionOutcome::operator==(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a1 + 12);
  BOOL result = (*(unsigned char *)(a2 + 12) & 1) == 0;
  if (v3) {
    return (*(unsigned char *)(a2 + 12) & 1) != 0 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
  }
  return result;
}

uint64_t sirinluexternal::CorrectionOutcome::hash_value(sirinluexternal::CorrectionOutcome *this)
{
  if (*((unsigned char *)this + 12)) {
    return *((int *)this + 2);
  }
  else {
    return 0;
  }
}

uint64_t sirinluexternal::UserRejected::formatText(sirinluexternal::UserRejected *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "offer_id");
  }
  uint64_t v6 = *((void *)this + 2);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, a2, "reference");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluexternal::UserRejected::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(const PB::Base **)(this + 8);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  uint64_t v5 = *(const PB::Base **)(v3 + 16);
  if (v5)
  {
    return PB::Writer::writeSubmessage(a2, v5);
  }
  return this;
}

uint64_t sirinluexternal::UserRejected::readFrom(sirinluexternal::UserRejected *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_24;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 2) {
        operator new();
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_24:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_24;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluexternal::UserRejected::~UserRejected(sirinluexternal::UserRejected *this)
{
  sirinluexternal::UserRejected::~UserRejected(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1F232E198;
  unint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  PB::Base::~Base(this);
}

void *sirinluexternal::UserRejected::UserRejected(void *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1F232E198;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1F232E198;
  return this;
}

void *sirinluexternal::UserRejected::UserRejected(void *this, const sirinluexternal::UserRejected *a2)
{
  *this = &unk_1F232E198;
  this[1] = 0;
  this[2] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  if (*((void *)a2 + 2)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternal::UserRejected::operator=(uint64_t a1, const sirinluexternal::UserRejected *a2)
{
  if ((const sirinluexternal::UserRejected *)a1 != a2)
  {
    sirinluexternal::UserRejected::UserRejected(&v5, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    long long v6 = v3;
    sirinluexternal::UserRejected::~UserRejected((sirinluexternal::UserRejected *)&v5);
  }
  return a1;
}

uint64_t sirinluexternal::swap(uint64_t this, sirinluexternal::UserRejected *a2, sirinluexternal::UserRejected *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  uint64_t v4 = *(void *)(this + 16);
  *(void *)(this + 16) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  return this;
}

void *sirinluexternal::UserRejected::UserRejected(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F232E198;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v5 = a1[1];
  a1[1] = v4;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  uint64_t v7 = a1[2];
  a1[2] = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  return a1;
}

uint64_t sirinluexternal::UserRejected::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sirinluexternal::UserRejected::UserRejected(&v5, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    long long v6 = v3;
    sirinluexternal::UserRejected::~UserRejected((sirinluexternal::UserRejected *)&v5);
  }
  return a1;
}

uint64_t sirinluexternal::UserRejected::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v4)
  {
    if (v5 && sirinluexternal::UUID::operator==(v4, v5)) {
      goto LABEL_4;
    }
    return 0;
  }
  if (v5) {
    return 0;
  }
LABEL_4:
  uint64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = *(void *)(a2 + 16);
  uint64_t result = (v6 | v7) == 0;
  if (v6) {
    BOOL v9 = v7 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    unint64_t v10 = *(void **)(a1 + 16);
    return sirinluexternal::UsoGraph::operator==(v10, (void *)v7);
  }
  return result;
}

unint64_t sirinluexternal::UserRejected::hash_value(sirinluexternal::UserRejected *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (!v1)
  {
    uint64_t v5 = 0;
    goto LABEL_11;
  }
  if ((*(unsigned char *)(v1 + 28) & 1) == 0)
  {
    uint64_t v2 = 0;
    if ((*(unsigned char *)(v1 + 28) & 2) != 0) {
      goto LABEL_4;
    }
LABEL_8:
    uint64_t v3 = 0;
    if ((*(unsigned char *)(v1 + 28) & 4) != 0) {
      goto LABEL_5;
    }
LABEL_9:
    uint64_t v4 = 0;
    goto LABEL_10;
  }
  uint64_t v2 = *(void *)(v1 + 8);
  if ((*(unsigned char *)(v1 + 28) & 2) == 0) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v3 = *(void *)(v1 + 16);
  if ((*(unsigned char *)(v1 + 28) & 4) == 0) {
    goto LABEL_9;
  }
LABEL_5:
  uint64_t v4 = *(int *)(v1 + 24);
LABEL_10:
  uint64_t v5 = v3 ^ v2 ^ v4;
LABEL_11:
  unint64_t v6 = *((void *)this + 2);
  if (v6) {
    unint64_t v6 = sirinluexternal::UsoGraph::hash_value((sirinluexternal::UsoGraph *)v6);
  }
  return v6 ^ v5;
}

uint64_t sirinluexternal::UserRejected::makeOfferId(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternal::UserRejected::makeReference(uint64_t this)
{
  if (!*(void *)(this + 16)) {
    operator new();
  }
  return this;
}

uint64_t SIRINLUEXTERNALUsoNodeReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  unint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 64) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_44;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_46;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_44:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v19) = 0;
        }
LABEL_46:
        *(_DWORD *)(a1 + 40) = v19;
        goto LABEL_47;
      case 2u:
        char v24 = objc_alloc_init(SIRICOMMONStringValue);
        objc_storeStrong((id *)(a1 + 32), v24);
        if (!PBReaderPlaceMark() || (SIRICOMMONStringValueReadFrom((uint64_t)v24, a2) & 1) == 0) {
          goto LABEL_49;
        }
        goto LABEL_36;
      case 3u:
        char v24 = objc_alloc_init(SIRICOMMONInt64Value);
        objc_storeStrong((id *)(a1 + 16), v24);
        if (!PBReaderPlaceMark() || (SIRICOMMONInt64ValueReadFrom((uint64_t)v24, a2) & 1) == 0) {
          goto LABEL_49;
        }
        goto LABEL_36;
      case 4u:
        char v24 = objc_alloc_init(SIRICOMMONUInt32Value);
        objc_storeStrong((id *)(a1 + 48), v24);
        if PBReaderPlaceMark() && (SIRICOMMONUInt32ValueReadFrom((uint64_t)v24, a2))
        {
LABEL_36:
          PBReaderRecallMark();
LABEL_37:

LABEL_47:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_49:

        return 0;
      case 5u:
        uint64_t v25 = PBReaderReadString();
        uint64_t v26 = 8;
        goto LABEL_40;
      case 6u:
        uint64_t v25 = PBReaderReadString();
        uint64_t v26 = 56;
LABEL_40:
        unsigned int v27 = *(void **)(a1 + v26);
        *(void *)(a1 + v26) = v25;

        goto LABEL_47;
      case 7u:
        PBReaderReadString();
        char v24 = (SIRICOMMONStringValue *)objc_claimAutoreleasedReturnValue();
        if (v24) {
          [(id)a1 addNormalizedStringPayloads:v24];
        }
        goto LABEL_37;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_47;
    }
  }
}

BOOL SIRINLUINTERNALITFMITFMParserRequestReadFrom(id *a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  unint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = objc_alloc_init(SIRINLUEXTERNALUUID);
        objc_storeStrong(a1 + 5, v17);
        if PBReaderPlaceMark() && (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v17, a2)) {
          goto LABEL_41;
        }
        goto LABEL_45;
      case 2u:
        char v17 = objc_alloc_init(SIRINLUINTERNALNLV4_PARSERTokenisation);
        objc_storeStrong(a1 + 6, v17);
        if (!PBReaderPlaceMark() || !SIRINLUINTERNALNLV4_PARSERTokenisationReadFrom((uint64_t)v17, a2)) {
          goto LABEL_45;
        }
        goto LABEL_41;
      case 3u:
        char v17 = objc_alloc_init(SIRINLUINTERNALNLv4EmbeddingTensor);
        objc_storeStrong(a1 + 1, v17);
        if (!PBReaderPlaceMark()
          || (SIRINLUINTERNALNLv4EmbeddingTensorReadFrom((uint64_t)v17, a2) & 1) == 0)
        {
          goto LABEL_45;
        }
        goto LABEL_41;
      case 4u:
        char v17 = objc_alloc_init(SIRINLUINTERNALMatchingSpan);
        [a1 addMatchingSpans:v17];
        if (!PBReaderPlaceMark() || (SIRINLUINTERNALMatchingSpanReadFrom((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_45;
        }
        goto LABEL_41;
      case 5u:
        char v17 = objc_alloc_init(SIRINLUEXTERNALTurnInput);
        objc_storeStrong(a1 + 7, v17);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALTurnInputReadFrom((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_45;
        }
        goto LABEL_41;
      case 6u:
        char v17 = objc_alloc_init(SIRINLUEXTERNALParser);
        objc_storeStrong(a1 + 4, v17);
        if (!PBReaderPlaceMark() || !SIRINLUEXTERNALParserReadFrom((uint64_t)v17, a2)) {
          goto LABEL_45;
        }
        goto LABEL_41;
      case 7u:
        char v17 = objc_alloc_init(SIRINLUEXTERNALRequestID);
        objc_storeStrong(a1 + 3, v17);
        if PBReaderPlaceMark() && (SIRINLUEXTERNALRequestIDReadFrom((uint64_t)v17, a2))
        {
LABEL_41:
          PBReaderRecallMark();

LABEL_42:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_45:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_42;
    }
  }
}

uint64_t SIRINLUEXTERNALMultilingualVariantReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        *(unsigned char *)(a1 + 24) |= 1u;
        uint64_t v20 = *v3;
        unint64_t v21 = *(void *)(a2 + v20);
        if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v22 = *(void *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v22 = 0;
        }
        *(void *)(a1 + 8) = v22;
      }
      else if ((v10 >> 3) == 1)
      {
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v18;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL SIRINLUINTERNALCONTEXTUPDATEContextUpdateRequestReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  unint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = objc_alloc_init(SIRINLUEXTERNALTurnInput);
        objc_storeStrong((id *)(a1 + 8), v17);
        goto LABEL_23;
      case 2u:
        char v17 = objc_alloc_init(SIRINLUEXTERNALTurnInput);
        [(id)a1 addPreviousTurns:v17];
LABEL_23:
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALTurnInputReadFrom((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_39;
        }
        goto LABEL_34;
      case 3u:
        char v17 = objc_alloc_init(SIRINLUINTERNALRewriteHypothesis);
        [(id)a1 addQrHypotheses:v17];
        if (!PBReaderPlaceMark() || (SIRINLUINTERNALRewriteHypothesisReadFrom((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_39;
        }
        goto LABEL_34;
      case 4u:
        char v17 = objc_alloc_init(SIRINLUEXTERNALUUID);
        uint64_t v18 = 40;
        goto LABEL_32;
      case 5u:
        uint64_t v19 = PBReaderReadString();
        char v17 = *(SIRINLUEXTERNALTurnInput **)(a1 + 48);
        *(void *)(a1 + 48) = v19;
        goto LABEL_35;
      case 6u:
        char v17 = objc_alloc_init(SIRINLUEXTERNALUUID);
        uint64_t v18 = 16;
LABEL_32:
        objc_storeStrong((id *)(a1 + v18), v17);
        if PBReaderPlaceMark() && (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v17, a2))
        {
LABEL_34:
          PBReaderRecallMark();
LABEL_35:

LABEL_36:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_39:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_36;
    }
  }
}

BOOL SIRINLUINTERNALCompareOptionsReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        char v26 = 0;
        unsigned int v27 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 12) |= 4u;
        while (1)
        {
          uint64_t v28 = *v3;
          unint64_t v29 = *(void *)(a2 + v28);
          if (v29 == -1 || v29 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
          *(void *)(a2 + v28) = v29 + 1;
          v20 |= (unint64_t)(v30 & 0x7F) << v26;
          if ((v30 & 0x80) == 0)
          {
            uint64_t v25 = &OBJC_IVAR___SIRINLUINTERNALCompareOptions__widthInsensitive;
            goto LABEL_48;
          }
          v26 += 7;
          BOOL v24 = v27++ > 8;
          if (v24)
          {
            uint64_t v20 = 0;
            uint64_t v25 = &OBJC_IVAR___SIRINLUINTERNALCompareOptions__widthInsensitive;
            goto LABEL_50;
          }
        }
        uint64_t v25 = &OBJC_IVAR___SIRINLUINTERNALCompareOptions__widthInsensitive;
LABEL_47:
        *(unsigned char *)(a2 + *v5) = 1;
        goto LABEL_48;
      }
      if (v17 == 2) {
        break;
      }
      if (v17 == 1)
      {
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 12) |= 1u;
        while (1)
        {
          uint64_t v21 = *v3;
          unint64_t v22 = *(void *)(a2 + v21);
          if (v22 == -1 || v22 >= *(void *)(a2 + *v4))
          {
            uint64_t v25 = &OBJC_IVAR___SIRINLUINTERNALCompareOptions__caseInsensitive;
            goto LABEL_47;
          }
          char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0) {
            break;
          }
          v18 += 7;
          BOOL v24 = v19++ > 8;
          if (v24)
          {
            uint64_t v20 = 0;
            uint64_t v25 = &OBJC_IVAR___SIRINLUINTERNALCompareOptions__caseInsensitive;
            goto LABEL_50;
          }
        }
        uint64_t v25 = &OBJC_IVAR___SIRINLUINTERNALCompareOptions__caseInsensitive;
        goto LABEL_48;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_51:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v31 = 0;
    unsigned int v32 = 0;
    uint64_t v20 = 0;
    *(unsigned char *)(a1 + 12) |= 2u;
    while (1)
    {
      uint64_t v33 = *v3;
      unint64_t v34 = *(void *)(a2 + v33);
      if (v34 == -1 || v34 >= *(void *)(a2 + *v4))
      {
        uint64_t v25 = &OBJC_IVAR___SIRINLUINTERNALCompareOptions__diacriticInsensitive;
        goto LABEL_47;
      }
      char v35 = *(unsigned char *)(*(void *)(a2 + *v7) + v34);
      *(void *)(a2 + v33) = v34 + 1;
      v20 |= (unint64_t)(v35 & 0x7F) << v31;
      if ((v35 & 0x80) == 0) {
        break;
      }
      v31 += 7;
      BOOL v24 = v32++ > 8;
      if (v24)
      {
        uint64_t v20 = 0;
        uint64_t v25 = &OBJC_IVAR___SIRINLUINTERNALCompareOptions__diacriticInsensitive;
        goto LABEL_50;
      }
    }
    uint64_t v25 = &OBJC_IVAR___SIRINLUINTERNALCompareOptions__diacriticInsensitive;
LABEL_48:
    if (*(unsigned char *)(a2 + *v5)) {
      uint64_t v20 = 0;
    }
LABEL_50:
    *(unsigned char *)(a1 + *v25) = v20 != 0;
    goto LABEL_51;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1C8BAD950(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8BADB94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8BADDFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8BADFBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8BAE118(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8BAE2A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8BAE36C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8BAE4C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8BAE6A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8BAE728()
{
}

void sub_1C8BAE7C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8BAE930(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8BAEB44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C8BAEC80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8BAEDFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8BAEEFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8BAF088(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8BAF1AC(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1C8BAF3E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8BAF578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C8BAF6FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8BAF848(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8BAF9E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8BAFC68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8BAFDB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8BAFE78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8BB0178(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1C8BB0338(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8BB04CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SIRINLUEXTERNALNLU_ROUTERNLRouterRewriteUtteranceReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  unint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        unint64_t v17 = objc_alloc_init(SIRINLUEXTERNALUUID);
        objc_storeStrong((id *)(a1 + 32), v17);
        if PBReaderPlaceMark() && (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v17, a2)) {
          goto LABEL_34;
        }
        goto LABEL_41;
      case 2u:
        uint64_t v19 = PBReaderReadString();
        uint64_t v20 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v19;

        goto LABEL_39;
      case 3u:
        char v21 = 0;
        unsigned int v22 = 0;
        uint64_t v23 = 0;
        *(unsigned char *)(a1 + 40) |= 1u;
        while (2)
        {
          uint64_t v24 = *v3;
          unint64_t v25 = *(void *)(a2 + v24);
          if (v25 == -1 || v25 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v26 = *(unsigned char *)(*(void *)(a2 + *v7) + v25);
            *(void *)(a2 + v24) = v25 + 1;
            v23 |= (unint64_t)(v26 & 0x7F) << v21;
            if (v26 < 0)
            {
              v21 += 7;
              BOOL v14 = v22++ >= 9;
              if (v14)
              {
                LODWORD(v23) = 0;
                goto LABEL_38;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v23) = 0;
        }
LABEL_38:
        *(_DWORD *)(a1 + 24) = v23;
        goto LABEL_39;
      case 4u:
        unint64_t v17 = objc_alloc_init(SIRINLUEXTERNALCorrectionOutcome);
        objc_storeStrong((id *)(a1 + 8), v17);
        if PBReaderPlaceMark() && (SIRINLUEXTERNALCorrectionOutcomeReadFrom((uint64_t)v17, a2))
        {
LABEL_34:
          PBReaderRecallMark();

LABEL_39:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_41:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_39;
    }
  }
}

uint64_t sirinluexternal::UsoNode::formatText(sirinluexternal::UsoNode *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((void *)this + 1)) {
    PB::TextFormatter::format();
  }
  uint64_t v5 = *((void *)this + 2);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "integer_payload");
  }
  uint64_t v6 = *((void *)this + 3);
  for (uint64_t i = *((void *)this + 4); v6 != i; v6 += 24)
    PB::TextFormatter::format();
  uint64_t v8 = *((void *)this + 6);
  if (v8) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v8 + 32))(v8, a2, "string_payload");
  }
  if (*((unsigned char *)this + 76)) {
    PB::TextFormatter::format(a2, "uso_element_id");
  }
  uint64_t v9 = *((void *)this + 7);
  if (v9) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v9 + 32))(v9, a2, "uso_verb_element_id");
  }
  if (*((void *)this + 8)) {
    PB::TextFormatter::format();
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluexternal::UsoNode::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = (void *)this;
  if (*(unsigned char *)(this + 76)) {
    this = PB::Writer::writeVarInt(a2);
  }
  uint64_t v4 = (const PB::Base *)v3[6];
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  uint64_t v5 = (const PB::Base *)v3[2];
  if (v5) {
    this = PB::Writer::writeSubmessage(a2, v5);
  }
  uint64_t v6 = (const PB::Base *)v3[7];
  if (v6) {
    this = PB::Writer::writeSubmessage(a2, v6);
  }
  if (v3[1]) {
    this = PB::Writer::write();
  }
  if (v3[8]) {
    this = PB::Writer::write();
  }
  uint64_t v8 = v3[3];
  uint64_t v7 = v3[4];
  while (v8 != v7)
  {
    this = PB::Writer::write();
    v8 += 24;
  }
  return this;
}

uint64_t sirinluexternal::UsoNode::readFrom(sirinluexternal::UsoNode *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  uint64_t v8 = (std::vector<std::string> *)((char *)this + 24);
  uint64_t v9 = (std::allocator<std::string> *)((char *)this + 40);
  while (1)
  {
    uint64_t v10 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
      break;
    }
    char v11 = 0;
    unsigned int v12 = 0;
    unint64_t v13 = 0;
    while (1)
    {
      unint64_t v14 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v15 = *(unsigned char *)(v10 + v2);
      v13 |= (unint64_t)(v15 & 0x7F) << v11;
      if ((v15 & 0x80) == 0) {
        break;
      }
      v11 += 7;
      unint64_t v2 = v14;
      BOOL v16 = v12++ > 8;
      if (v16) {
        goto LABEL_20;
      }
    }
LABEL_22:
    if ((v13 & 7) == 4)
    {
      int v4 = 0;
      return v4 == 0;
    }
    switch((v13 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 76) |= 1u;
        unint64_t v22 = *((void *)a2 + 1);
        unint64_t v23 = *((void *)a2 + 2);
        uint64_t v24 = *(void *)a2;
        if (v22 <= 0xFFFFFFFFFFFFFFF5 && v22 + 10 <= v23)
        {
          char v25 = 0;
          unsigned int v26 = 0;
          uint64_t v27 = 0;
          do
          {
            unint64_t v28 = v22 + 1;
            *((void *)a2 + 1) = v22 + 1;
            char v29 = *(unsigned char *)(v24 + v22);
            v27 |= (unint64_t)(v29 & 0x7F) << v25;
            if ((v29 & 0x80) == 0) {
              goto LABEL_59;
            }
            v25 += 7;
            unint64_t v22 = v28;
            BOOL v16 = v26++ > 8;
          }
          while (!v16);
LABEL_44:
          LODWORD(v27) = 0;
          goto LABEL_59;
        }
        char v33 = 0;
        unsigned int v34 = 0;
        uint64_t v27 = 0;
        if (v23 <= v22) {
          unint64_t v23 = *((void *)a2 + 1);
        }
        break;
      case 2u:
        operator new();
      case 3u:
        operator new();
      case 4u:
        operator new();
      case 5u:
        operator new();
      case 6u:
        operator new();
      case 7u:
        char v31 = (char *)*((void *)this + 4);
        unint64_t v30 = *((void *)this + 5);
        if ((unint64_t)v31 >= v30)
        {
          unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((v31 - (char *)v8->__begin_) >> 3);
          unint64_t v38 = v37 + 1;
          if (v37 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - (unint64_t)v8->__begin_) >> 3);
          if (2 * v39 > v38) {
            unint64_t v38 = 2 * v39;
          }
          if (v39 >= 0x555555555555555) {
            unint64_t v40 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v40 = v38;
          }
          __v.__end_cap_.__value_ = v9;
          if (v40) {
            unint64_t v40 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v40);
          }
          else {
            uint64_t v41 = 0;
          }
          uint64_t v42 = (std::string *)(v40 + 24 * v37);
          __v.__first_ = (std::__split_buffer<std::string>::pointer)v40;
          __v.__begin_ = v42;
          __v.__end_cap_.__value_ = (std::string *)(v40 + 24 * v41);
          v42->__r_.__value_.__r.__words[0] = 0;
          v42->__r_.__value_.__l.__size_ = 0;
          v42->__r_.__value_.__r.__words[2] = 0;
          __v.__end_ = v42 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(v8, &__v);
          unsigned int v32 = (void *)*((void *)this + 4);
          std::__split_buffer<std::string>::~__split_buffer(&__v);
        }
        else
        {
          *(void *)char v31 = 0;
          *((void *)v31 + 1) = 0;
          unsigned int v32 = v31 + 24;
          *((void *)v31 + 2) = 0;
        }
        *((void *)this + 4) = v32;
        PB::Reader::read();
        goto LABEL_60;
      default:
        goto LABEL_20;
    }
    while (1)
    {
      if (v23 == v22)
      {
        LODWORD(v27) = 0;
        *((unsigned char *)a2 + 24) = 1;
        goto LABEL_59;
      }
      unint64_t v35 = v22 + 1;
      char v36 = *(unsigned char *)(v24 + v22);
      *((void *)a2 + 1) = v35;
      v27 |= (unint64_t)(v36 & 0x7F) << v33;
      if ((v36 & 0x80) == 0) {
        break;
      }
      v33 += 7;
      unint64_t v22 = v35;
      BOOL v16 = v34++ > 8;
      if (v16) {
        goto LABEL_44;
      }
    }
    if (*((unsigned char *)a2 + 24)) {
      LODWORD(v27) = 0;
    }
LABEL_59:
    *((_DWORD *)this + 18) = v27;
LABEL_60:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  char v17 = 0;
  unsigned int v18 = 0;
  unint64_t v13 = 0;
  if (v2 > v3) {
    unint64_t v3 = v2;
  }
  do
  {
    if (v3 == v2)
    {
      int v4 = 1;
      *((unsigned char *)a2 + 24) = 1;
      return v4 == 0;
    }
    unint64_t v19 = v2 + 1;
    char v20 = *(unsigned char *)(v10 + v2);
    *((void *)a2 + 1) = v19;
    v13 |= (unint64_t)(v20 & 0x7F) << v17;
    if ((v20 & 0x80) == 0) {
      goto LABEL_22;
    }
    v17 += 7;
    unint64_t v2 = v19;
    BOOL v16 = v18++ > 8;
  }
  while (!v16);
LABEL_20:
  uint64_t result = PB::Reader::skip(a2);
  if (result) {
    goto LABEL_60;
  }
  return result;
}

void sirinluexternal::UsoNode::~UsoNode(sirinluexternal::UsoNode *this)
{
  sirinluexternal::UsoNode::~UsoNode(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  uint64_t vars8;

  *(void *)this = &unk_1F232E1E8;
  unint64_t v2 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v2) {
    std::default_delete<std::string>::operator()[abi:ne180100](v2);
  }
  unint64_t v3 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v7 = (void **)((char *)this + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v6) {
    std::default_delete<std::string>::operator()[abi:ne180100](v6);
  }
  PB::Base::~Base(this);
}

double sirinluexternal::UsoNode::UsoNode(sirinluexternal::UsoNode *this)
{
  *(void *)this = &unk_1F232E1E8;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = 0;
  return result;
}

{
  double result;

  *(void *)this = &unk_1F232E1E8;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = 0;
  return result;
}

sirinluexternal::UsoNode *sirinluexternal::UsoNode::UsoNode(sirinluexternal::UsoNode *this, const sirinluexternal::UsoNode *a2)
{
  *(void *)this = &unk_1F232E1E8;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = 0;
  if (*((unsigned char *)a2 + 76))
  {
    int v3 = *((_DWORD *)a2 + 18);
    *((unsigned char *)this + 76) = 1;
    *((_DWORD *)this + 18) = v3;
  }
  if (*((void *)a2 + 6)) {
    operator new();
  }
  if (*((void *)a2 + 2)) {
    operator new();
  }
  if (*((void *)a2 + 7)) {
    operator new();
  }
  if (*((void *)a2 + 1)) {
    operator new();
  }
  if (*((void *)a2 + 8)) {
    operator new();
  }
  if (this != a2) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)this + 1, *((std::string **)a2 + 3), *((long long **)a2 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3));
  }
  return this;
}

uint64_t sirinluexternal::UsoNode::operator=(uint64_t a1, const sirinluexternal::UsoNode *a2)
{
  if ((const sirinluexternal::UsoNode *)a1 != a2)
  {
    sirinluexternal::UsoNode::UsoNode((sirinluexternal::UsoNode *)&v9, a2);
    uint64_t v3 = *(void *)(a1 + 72);
    *(void *)(a1 + 72) = v14;
    uint64_t v14 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v10 = v4;
    long long v5 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v13;
    long long v13 = v5;
    long long v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    long long v11 = v6;
    long long v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    long long v12 = v7;
    sirinluexternal::UsoNode::~UsoNode((sirinluexternal::UsoNode *)&v9);
  }
  return a1;
}

uint64_t sirinluexternal::swap(uint64_t this, sirinluexternal::UsoNode *a2, sirinluexternal::UsoNode *a3)
{
  int v3 = *(_DWORD *)(this + 76);
  *(_DWORD *)(this + 76) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v3;
  int v4 = *(_DWORD *)(this + 72);
  *(_DWORD *)(this + 72) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v4;
  uint64_t v5 = *(void *)(this + 48);
  *(void *)(this + 48) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v5;
  uint64_t v6 = *(void *)(this + 16);
  *(void *)(this + 16) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *(void *)(this + 56);
  *(void *)(this + 56) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v7;
  uint64_t v8 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v8;
  uint64_t v9 = *(void *)(this + 64);
  *(void *)(this + 64) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v9;
  uint64_t v10 = *(void *)(this + 24);
  *(void *)(this + 24) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v10;
  uint64_t v11 = *(void *)(this + 32);
  *(void *)(this + 32) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v11;
  uint64_t v12 = *(void *)(this + 40);
  *(void *)(this + 40) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v12;
  return this;
}

uint64_t sirinluexternal::UsoNode::UsoNode(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F232E1E8;
  *(_OWORD *)(a1 + 8) = 0u;
  int v4 = (uint64_t *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a2 + 76) = 0;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  uint64_t v6 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v5;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  uint64_t v8 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v7;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = 0;
  uint64_t v10 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v9;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v12 = *v4;
  *int v4 = v11;
  if (v12) {
    std::default_delete<std::string>::operator()[abi:ne180100](v12);
  }
  uint64_t v13 = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = 0;
  uint64_t v14 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = v13;
  if (v14) {
    std::default_delete<std::string>::operator()[abi:ne180100](v14);
  }
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a1 + 24));
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  return a1;
}

uint64_t sirinluexternal::UsoNode::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sirinluexternal::UsoNode::UsoNode((uint64_t)&v9, a2);
    uint64_t v3 = *(void *)(a1 + 72);
    *(void *)(a1 + 72) = v14;
    uint64_t v14 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v10 = v4;
    long long v5 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v13;
    long long v13 = v5;
    long long v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    long long v11 = v6;
    long long v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    long long v12 = v7;
    sirinluexternal::UsoNode::~UsoNode((sirinluexternal::UsoNode *)&v9);
  }
  return a1;
}

BOOL sirinluexternal::UsoNode::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 76))
  {
    if ((*(unsigned char *)(a2 + 76) & 1) == 0 || *(_DWORD *)(a1 + 72) != *(_DWORD *)(a2 + 72)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 76))
  {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a2 + 48);
  if (v4)
  {
    if (!v5 || (siricommon::StringValue::operator==(v4, v5) & 1) == 0) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a2 + 16);
  if (v6)
  {
    if (!v7) {
      return 0;
    }
    if (*(unsigned char *)(v6 + 16))
    {
      if ((*(unsigned char *)(v7 + 16) & 1) == 0 || *(void *)(v6 + 8) != *(void *)(v7 + 8)) {
        return 0;
      }
    }
    else if (*(unsigned char *)(v7 + 16))
    {
      return 0;
    }
  }
  else if (v7)
  {
    return 0;
  }
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v9 = *(void *)(a2 + 56);
  if (v8)
  {
    if (!v9) {
      return 0;
    }
    if (*(unsigned char *)(v8 + 12))
    {
      if ((*(unsigned char *)(v9 + 12) & 1) == 0 || *(_DWORD *)(v8 + 8) != *(_DWORD *)(v9 + 8)) {
        return 0;
      }
    }
    else if (*(unsigned char *)(v9 + 12))
    {
      return 0;
    }
  }
  else if (v9)
  {
    return 0;
  }
  long long v10 = *(unsigned __int8 **)(a1 + 8);
  long long v11 = *(unsigned __int8 **)(a2 + 8);
  if (v10)
  {
    if (!v11 || !std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(v10, v11)) {
      return 0;
    }
  }
  else if (v11)
  {
    return 0;
  }
  long long v12 = *(unsigned __int8 **)(a1 + 64);
  long long v13 = *(unsigned __int8 **)(a2 + 64);
  if (!v12)
  {
    if (!v13) {
      goto LABEL_37;
    }
    return 0;
  }
  if (!v13 || !std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(v12, v13)) {
    return 0;
  }
LABEL_37:
  uint64_t v14 = *(unsigned __int8 **)(a1 + 24);
  char v15 = *(unsigned __int8 **)(a1 + 32);
  BOOL v16 = *(unsigned __int8 **)(a2 + 24);
  uint64_t v17 = *(void *)(a2 + 32);
  return std::operator==[abi:ne180100]<std::string,std::allocator<std::string>>(v14, v15, v16, v17);
}

unint64_t sirinluexternal::UsoNode::hash_value(sirinluexternal::UsoNode *this)
{
  if (*((unsigned char *)this + 76)) {
    uint64_t v2 = *((unsigned int *)this + 18);
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = *((void *)this + 6);
  if (v3 && (uint64_t v4 = *(void *)(v3 + 8)) != 0) {
    unint64_t v5 = std::__string_hash<char>::operator()[abi:ne180100](v4);
  }
  else {
    unint64_t v5 = 0;
  }
  uint64_t v6 = *((void *)this + 2);
  if (v6 && (*(unsigned char *)(v6 + 16) & 1) != 0) {
    uint64_t v7 = *(void *)(v6 + 8);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *((void *)this + 7);
  if (v8 && (*(unsigned char *)(v8 + 12) & 1) != 0) {
    uint64_t v9 = *(unsigned int *)(v8 + 8);
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *((void *)this + 1);
  if (v10) {
    unint64_t v11 = std::__string_hash<char>::operator()[abi:ne180100](v10);
  }
  else {
    unint64_t v11 = 0;
  }
  uint64_t v12 = *((void *)this + 8);
  if (v12) {
    unint64_t v13 = std::__string_hash<char>::operator()[abi:ne180100](v12);
  }
  else {
    unint64_t v13 = 0;
  }
  uint64_t v14 = *((void *)this + 3);
  uint64_t v15 = *((void *)this + 4);
  if (v14 == v15)
  {
    uint64_t v16 = 0;
  }
  else
  {
    uint64_t v16 = 0;
    do
    {
      v16 ^= std::__string_hash<char>::operator()[abi:ne180100](v14);
      v14 += 24;
    }
    while (v14 != v15);
  }
  return v5 ^ v2 ^ v7 ^ v9 ^ v11 ^ v13 ^ v16;
}

uint64_t sirinluexternal::UsoNode::makeStringPayload(uint64_t this)
{
  if (!*(void *)(this + 48)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternal::UsoNode::makeIntegerPayload(uint64_t this)
{
  if (!*(void *)(this + 16)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternal::UsoNode::makeUsoVerbElementId(uint64_t this)
{
  if (!*(void *)(this + 56)) {
    operator new();
  }
  return this;
}

uint64_t SIRINLUINTERNALRewriteInteractionReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  unint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v17 = objc_alloc_init(SIRINLUINTERNALRewriteUtterance);
        [(id)a1 addOriginalUtterances:v17];
        if PBReaderPlaceMark() && (SIRINLUINTERNALRewriteUtteranceReadFrom((uint64_t)v17, a2)) {
          goto LABEL_26;
        }
        goto LABEL_52;
      case 2u:
        uint64_t v17 = objc_alloc_init(SIRINLUINTERNALToken);
        [(id)a1 addSiriResponse:v17];
        if PBReaderPlaceMark() && (SIRINLUINTERNALTokenReadFrom(v17, a2))
        {
LABEL_26:
          PBReaderRecallMark();

LABEL_50:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_52:

        return 0;
      case 3u:
        uint64_t v19 = PBReaderReadString();
        char v20 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v19;

        goto LABEL_50;
      case 4u:
        char v21 = 0;
        unsigned int v22 = 0;
        uint64_t v23 = 0;
        *(unsigned char *)(a1 + 44) |= 2u;
        while (2)
        {
          uint64_t v24 = *v3;
          unint64_t v25 = *(void *)(a2 + v24);
          if (v25 == -1 || v25 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v26 = *(unsigned char *)(*(void *)(a2 + *v7) + v25);
            *(void *)(a2 + v24) = v25 + 1;
            v23 |= (unint64_t)(v26 & 0x7F) << v21;
            if (v26 < 0)
            {
              v21 += 7;
              BOOL v14 = v22++ >= 9;
              if (v14)
              {
                uint64_t v23 = 0;
                goto LABEL_45;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v23 = 0;
        }
LABEL_45:
        *(unsigned char *)(a1 + 40) = v23 != 0;
        goto LABEL_50;
      case 5u:
        char v27 = 0;
        unsigned int v28 = 0;
        uint64_t v29 = 0;
        *(unsigned char *)(a1 + 44) |= 1u;
        while (2)
        {
          uint64_t v30 = *v3;
          unint64_t v31 = *(void *)(a2 + v30);
          if (v31 == -1 || v31 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v32 = *(unsigned char *)(*(void *)(a2 + *v7) + v31);
            *(void *)(a2 + v30) = v31 + 1;
            v29 |= (unint64_t)(v32 & 0x7F) << v27;
            if (v32 < 0)
            {
              v27 += 7;
              BOOL v14 = v28++ >= 9;
              if (v14)
              {
                uint64_t v29 = 0;
                goto LABEL_49;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v29 = 0;
        }
LABEL_49:
        *(void *)(a1 + 8) = v29;
        goto LABEL_50;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_50;
    }
  }
}

uint64_t SIRINLUINTERNALParseOverrideReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  unint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 16;
        goto LABEL_50;
      case 2u:
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        *(unsigned char *)(a1 + 60) |= 4u;
        while (2)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              BOOL v14 = v20++ >= 9;
              if (v14)
              {
                uint64_t v21 = 0;
                goto LABEL_54;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v21 = 0;
        }
LABEL_54:
        *(unsigned char *)(a1 + 56) = v21 != 0;
        goto LABEL_63;
      case 3u:
        char v25 = 0;
        unsigned int v26 = 0;
        uint64_t v27 = 0;
        *(unsigned char *)(a1 + 60) |= 1u;
        while (2)
        {
          uint64_t v28 = *v3;
          unint64_t v29 = *(void *)(a2 + v28);
          if (v29 == -1 || v29 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
            *(void *)(a2 + v28) = v29 + 1;
            v27 |= (unint64_t)(v30 & 0x7F) << v25;
            if (v30 < 0)
            {
              v25 += 7;
              BOOL v14 = v26++ >= 9;
              if (v14)
              {
                uint64_t v27 = 0;
                goto LABEL_58;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v27 = 0;
        }
LABEL_58:
        *(void *)(a1 + 8) = v27;
        goto LABEL_63;
      case 4u:
        char v31 = 0;
        unsigned int v32 = 0;
        uint64_t v33 = 0;
        *(unsigned char *)(a1 + 60) |= 2u;
        while (2)
        {
          uint64_t v34 = *v3;
          unint64_t v35 = *(void *)(a2 + v34);
          if (v35 == -1 || v35 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v36 = *(unsigned char *)(*(void *)(a2 + *v7) + v35);
            *(void *)(a2 + v34) = v35 + 1;
            v33 |= (unint64_t)(v36 & 0x7F) << v31;
            if (v36 < 0)
            {
              v31 += 7;
              BOOL v14 = v32++ >= 9;
              if (v14)
              {
                LODWORD(v33) = 0;
                goto LABEL_62;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v33) = 0;
        }
LABEL_62:
        *(_DWORD *)(a1 + 40) = v33;
        goto LABEL_63;
      case 6u:
        unint64_t v38 = objc_alloc_init(SIRINLUEXTERNALUserParse);
        objc_storeStrong((id *)(a1 + 32), v38);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALUserParseReadFrom((uint64_t)v38, a2) & 1) == 0) {
          goto LABEL_65;
        }
        goto LABEL_48;
      case 7u:
        unint64_t v38 = objc_alloc_init(SIRINLUINTERNALNluRequestRule);
        [(id)a1 addNluRequestRules:v38];
        if (PBReaderPlaceMark() && SIRINLUINTERNALNluRequestRuleReadFrom((char *)v38, a2))
        {
LABEL_48:
          PBReaderRecallMark();

LABEL_63:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_65:

        return 0;
      case 8u:
        uint64_t v17 = PBReaderReadData();
        uint64_t v18 = 48;
LABEL_50:
        unint64_t v39 = *(void **)(a1 + v18);
        *(void *)(a1 + v18) = v17;

        goto LABEL_63;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_63;
    }
  }
}

uint64_t sirinluinternal::AdjacentSpans::formatText(sirinluinternal::AdjacentSpans *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((void *)this + 1)) {
    PB::TextFormatter::format();
  }
  unint64_t v5 = (uint64_t *)*((void *)this + 2);
  uint64_t v6 = (uint64_t *)*((void *)this + 3);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "spans");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluinternal::AdjacentSpans::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if (*(void *)(this + 8)) {
    this = PB::Writer::write();
  }
  unint64_t v5 = *(const PB::Base ***)(v3 + 16);
  uint64_t v4 = *(const PB::Base ***)(v3 + 24);
  while (v5 != v4)
  {
    uint64_t v6 = *v5++;
    this = PB::Writer::writeSubmessage(a2, v6);
  }
  return this;
}

uint64_t sirinluinternal::AdjacentSpans::readFrom(sirinluinternal::AdjacentSpans *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_24;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 2) {
        operator new();
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_24:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_24;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sub_1C8BB55DC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sirinluinternal::AdjacentSpans::~AdjacentSpans(sirinluinternal::AdjacentSpans *this)
{
  sirinluinternal::AdjacentSpans::~AdjacentSpans(this);
  JUMPOUT(0x1CB772580);
}

{
  void **v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1F232E238;
  unint64_t v2 = (void **)((char *)this + 16);
  if (*((void *)this + 2))
  {
    std::vector<std::unique_ptr<siricommon::StringValue>>::__clear[abi:ne180100]((void *)this + 2);
    operator delete(*v2);
  }
  unint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    std::default_delete<std::string>::operator()[abi:ne180100](v3);
  }
  PB::Base::~Base(this);
}

double sirinluinternal::AdjacentSpans::AdjacentSpans(sirinluinternal::AdjacentSpans *this)
{
  *(void *)this = &unk_1F232E238;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

{
  double result;

  *(void *)this = &unk_1F232E238;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

uint64_t sirinluinternal::AdjacentSpans::AdjacentSpans(uint64_t this, const sirinluinternal::AdjacentSpans *a2)
{
  *(void *)this = &unk_1F232E238;
  *(_OWORD *)(this + 8) = 0u;
  *(_OWORD *)(this + 24) = 0u;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  if (*((void *)a2 + 2) != *((void *)a2 + 3)) {
    operator new();
  }
  return this;
}

void sub_1C8BB58E4(void *a1)
{
}

uint64_t sirinluinternal::AdjacentSpans::operator=(uint64_t a1, const sirinluinternal::AdjacentSpans *a2)
{
  if ((const sirinluinternal::AdjacentSpans *)a1 != a2)
  {
    sirinluinternal::AdjacentSpans::AdjacentSpans((uint64_t)v6, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v8;
    long long v7 = v3;
    long long v8 = v4;
    sirinluinternal::AdjacentSpans::~AdjacentSpans((sirinluinternal::AdjacentSpans *)v6);
  }
  return a1;
}

void *sirinluinternal::swap(void *this, sirinluinternal::AdjacentSpans *a2, sirinluinternal::AdjacentSpans *a3)
{
  uint64_t v3 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  uint64_t v4 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  uint64_t v6 = this[4];
  this[4] = *((void *)a2 + 4);
  *((void *)a2 + 4) = v6;
  return this;
}

uint64_t sirinluinternal::AdjacentSpans::AdjacentSpans(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F232E238;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  if (v5) {
    std::default_delete<std::string>::operator()[abi:ne180100](v5);
  }
  uint64_t v6 = (void **)(a1 + 16);
  if (*(void *)(a1 + 16))
  {
    std::vector<std::unique_ptr<siricommon::StringValue>>::__clear[abi:ne180100]((void *)(a1 + 16));
    operator delete(*v6);
    *uint64_t v6 = 0;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  return a1;
}

uint64_t sirinluinternal::AdjacentSpans::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sirinluinternal::AdjacentSpans::AdjacentSpans((uint64_t)v6, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v8;
    long long v7 = v3;
    long long v8 = v4;
    sirinluinternal::AdjacentSpans::~AdjacentSpans((sirinluinternal::AdjacentSpans *)v6);
  }
  return a1;
}

BOOL sirinluinternal::AdjacentSpans::operator==(void *a1, uint64_t a2)
{
  long long v4 = (unsigned __int8 *)a1[1];
  uint64_t v5 = *(unsigned __int8 ***)(a2 + 8);
  if (v4)
  {
    if (!v5) {
      return 0;
    }
    uint64_t v6 = v4[23];
    if ((v6 & 0x80u) == 0) {
      long long v7 = (unsigned __int8 *)v4[23];
    }
    else {
      long long v7 = (unsigned __int8 *)*((void *)v4 + 1);
    }
    long long v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    int v9 = (char)v8;
    if ((char)v8 < 0) {
      long long v8 = v5[1];
    }
    if (v7 != v8) {
      return 0;
    }
    if (v9 >= 0) {
      unint64_t v10 = *(unsigned __int8 **)(a2 + 8);
    }
    else {
      unint64_t v10 = *v5;
    }
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v10, *((void *)v4 + 1))) {
        return 0;
      }
    }
    else if (v4[23])
    {
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6) {
          goto LABEL_18;
        }
      }
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
LABEL_18:
  uint64_t v11 = a1[2];
  uint64_t v12 = a1[3];
  uint64_t v14 = a2 + 16;
  BOOL v13 = *(uint64_t **)(a2 + 16);
  if (v12 - v11 != *(void *)(v14 + 8) - (void)v13) {
    return 0;
  }
  if (v11 == v12) {
    return 1;
  }
  uint64_t v15 = v11 + 8;
  do
  {
    uint64_t v16 = *v13++;
    BOOL result = sirinluinternal::SpanDataForNamedCaptureGroup::operator==(*(void *)(v15 - 8), v16);
    BOOL v18 = !result || v15 == v12;
    v15 += 8;
  }
  while (!v18);
  return result;
}

unint64_t sirinluinternal::AdjacentSpans::hash_value(sirinluinternal::AdjacentSpans *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    unint64_t v3 = std::__string_hash<char>::operator()[abi:ne180100](v2);
  }
  else {
    unint64_t v3 = 0;
  }
  uint64_t v5 = (sirinluinternal::SpanDataForNamedCaptureGroup **)*((void *)this + 2);
  long long v4 = (sirinluinternal::SpanDataForNamedCaptureGroup **)*((void *)this + 3);
  if (v5 == v4)
  {
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = 0;
    do
    {
      long long v7 = *v5++;
      v6 ^= sirinluinternal::SpanDataForNamedCaptureGroup::hash_value(v7);
    }
    while (v5 != v4);
  }
  return v6 ^ v3;
}

BOOL SIRINLUINTERNALSNLP_INTERMEDIATEITFMSpanFeaturizerResponseReadFrom(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  long long v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    long long v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = objc_alloc_init(SIRINLUINTERNALSNLP_INTERMEDIATESpanFeaturizerResponse);
        objc_storeStrong((id *)(a1 + 16), v17);
        if (!PBReaderPlaceMark()
          || (SIRINLUINTERNALSNLP_INTERMEDIATESpanFeaturizerResponseReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_26:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v18 = PBReaderReadString();
    char v17 = *(SIRINLUINTERNALSNLP_INTERMEDIATESpanFeaturizerResponse **)(a1 + 8);
    *(void *)(a1 + 8) = v18;
LABEL_24:

    goto LABEL_26;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL SIRINLUEXTERNALCDMNluResponseReadFrom(id *a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  long long v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  long long v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = objc_alloc_init(SIRINLUEXTERNALRequestID);
        objc_storeStrong(a1 + 4, v17);
        if PBReaderPlaceMark() && (SIRINLUEXTERNALRequestIDReadFrom((uint64_t)v17, a2)) {
          goto LABEL_38;
        }
        goto LABEL_42;
      case 2u:
        char v17 = objc_alloc_init(SIRINLUEXTERNALUserParse);
        [a1 addParses:v17];
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALUserParseReadFrom((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_42;
        }
        goto LABEL_38;
      case 3u:
        char v17 = objc_alloc_init(SIRINLUEXTERNALResponseStatus);
        objc_storeStrong(a1 + 5, v17);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALResponseStatusReadFrom((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_42;
        }
        goto LABEL_38;
      case 4u:
        char v17 = objc_alloc_init(SIRINLUEXTERNALRepetitionResult);
        [a1 addRepetitionResults:v17];
        if (!PBReaderPlaceMark() || !SIRINLUEXTERNALRepetitionResultReadFrom((uint64_t)v17, a2)) {
          goto LABEL_42;
        }
        goto LABEL_38;
      case 5u:
        char v17 = objc_alloc_init(SIRINLUEXTERNALLanguageVariantResult);
        objc_storeStrong(a1 + 1, v17);
        if (!PBReaderPlaceMark()
          || !SIRINLUEXTERNALLanguageVariantResultReadFrom((id *)&v17->super.super.isa, a2))
        {
          goto LABEL_42;
        }
        goto LABEL_38;
      case 6u:
        char v17 = objc_alloc_init(SIRINLUEXTERNALNLUSupplementaryOutput);
        objc_storeStrong(a1 + 6, v17);
        if (PBReaderPlaceMark()
          && SIRINLUEXTERNALNLUSupplementaryOutputReadFrom((id *)&v17->super.super.isa, a2))
        {
LABEL_38:
          PBReaderRecallMark();

LABEL_39:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_42:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_39;
    }
  }
}

uint64_t sirinluexternal::RRSurroundingText::formatText(sirinluexternal::RRSurroundingText *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "bounding_box");
  }
  if (*((void *)this + 2)) {
    PB::TextFormatter::format();
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluexternal::RRSurroundingText::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if (*(void *)(this + 16)) {
    this = PB::Writer::write();
  }
  long long v4 = *(const PB::Base **)(v3 + 8);
  if (v4)
  {
    return PB::Writer::writeSubmessage(a2, v4);
  }
  return this;
}

uint64_t sirinluexternal::RRSurroundingText::readFrom(sirinluexternal::RRSurroundingText *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_24;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 2) {
        operator new();
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_24:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_24;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluexternal::RRSurroundingText::~RRSurroundingText(sirinluexternal::RRSurroundingText *this)
{
  sirinluexternal::RRSurroundingText::~RRSurroundingText(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1F232E288;
  unint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    std::default_delete<std::string>::operator()[abi:ne180100](v2);
  }
  unint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  PB::Base::~Base(this);
}

void *sirinluexternal::RRSurroundingText::RRSurroundingText(void *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1F232E288;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1F232E288;
  return this;
}

void *sirinluexternal::RRSurroundingText::RRSurroundingText(void *this, const sirinluexternal::RRSurroundingText *a2)
{
  *this = &unk_1F232E288;
  this[1] = 0;
  this[2] = 0;
  if (*((void *)a2 + 2)) {
    operator new();
  }
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternal::RRSurroundingText::operator=(uint64_t a1, const sirinluexternal::RRSurroundingText *a2)
{
  if ((const sirinluexternal::RRSurroundingText *)a1 != a2)
  {
    sirinluexternal::RRSurroundingText::RRSurroundingText(&v5, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    long long v6 = v3;
    sirinluexternal::RRSurroundingText::~RRSurroundingText((sirinluexternal::RRSurroundingText *)&v5);
  }
  return a1;
}

uint64_t sirinluexternal::swap(uint64_t this, sirinluexternal::RRSurroundingText *a2, sirinluexternal::RRSurroundingText *a3)
{
  uint64_t v3 = *(void *)(this + 16);
  *(void *)(this + 16) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v3;
  uint64_t v4 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  return this;
}

void *sirinluexternal::RRSurroundingText::RRSurroundingText(void *a1, uint64_t a2)
{
  a1[1] = 0;
  uint64_t v4 = a1 + 1;
  *a1 = &unk_1F232E288;
  a1[2] = 0;
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  uint64_t v6 = a1[2];
  a1[2] = v5;
  if (v6) {
    std::default_delete<std::string>::operator()[abi:ne180100](v6);
  }
  uint64_t v7 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v8 = *v4;
  *uint64_t v4 = v7;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  return a1;
}

uint64_t sirinluexternal::RRSurroundingText::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sirinluexternal::RRSurroundingText::RRSurroundingText(&v5, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    long long v6 = v3;
    sirinluexternal::RRSurroundingText::~RRSurroundingText((sirinluexternal::RRSurroundingText *)&v5);
  }
  return a1;
}

BOOL sirinluexternal::RRSurroundingText::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned __int8 **)(a1 + 16);
  uint64_t v5 = *(unsigned __int8 ***)(a2 + 16);
  if (!v4)
  {
    if (!v5) {
      goto LABEL_21;
    }
    return 0;
  }
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v4[23];
  if ((v6 & 0x80u) == 0) {
    uint64_t v7 = (unsigned __int8 *)v4[23];
  }
  else {
    uint64_t v7 = (unsigned __int8 *)*((void *)v4 + 1);
  }
  uint64_t v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
  int v9 = (char)v8;
  if ((char)v8 < 0) {
    uint64_t v8 = v5[1];
  }
  if (v7 != v8) {
    return 0;
  }
  if (v9 >= 0) {
    unint64_t v10 = *(unsigned __int8 **)(a2 + 16);
  }
  else {
    unint64_t v10 = *v5;
  }
  if ((v6 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)v4, v10, *((void *)v4 + 1))) {
      goto LABEL_21;
    }
    return 0;
  }
  if (v4[23])
  {
    while (*v4 == *v10)
    {
      ++v4;
      ++v10;
      if (!--v6) {
        goto LABEL_21;
      }
    }
    return 0;
  }
LABEL_21:
  uint64_t v12 = *(void *)(a1 + 8);
  uint64_t v13 = *(void *)(a2 + 8);
  BOOL result = (v12 | v13) == 0;
  if (v12) {
    BOOL v14 = v13 == 0;
  }
  else {
    BOOL v14 = 1;
  }
  if (!v14)
  {
    uint64_t v15 = *(void *)(a1 + 8);
    return sirinluexternal::RRBoundingBox::operator==(v15, v13);
  }
  return result;
}

unint64_t sirinluexternal::RRSurroundingText::hash_value(sirinluexternal::RRSurroundingText *this)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    unint64_t v3 = std::__string_hash<char>::operator()[abi:ne180100](v2);
  }
  else {
    unint64_t v3 = 0;
  }
  unint64_t v4 = *((void *)this + 1);
  if (v4) {
    unint64_t v4 = sirinluexternal::RRBoundingBox::hash_value((sirinluexternal::RRBoundingBox *)v4);
  }
  return v4 ^ v3;
}

uint64_t sirinluexternal::RRSurroundingText::makeBoundingBox(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t SIRINLUEXTERNALAsrHypothesisReadFrom(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      uint64_t v12 = *(void *)(a2 + v11);
      unint64_t v13 = v12 + 1;
      if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
        break;
      }
      char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v16 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v18 = objc_alloc_init(SIRINLUEXTERNALUUID);
        objc_storeStrong((id *)(a1 + 24), v18);
        if PBReaderPlaceMark() && (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v18, a2)) {
          goto LABEL_33;
        }
        goto LABEL_38;
      case 2u:
        uint64_t v20 = PBReaderReadString();
        uint64_t v21 = *(void **)(a1 + 40);
        *(void *)(a1 + 40) = v20;

        goto LABEL_36;
      case 3u:
        *(unsigned char *)(a1 + 48) |= 1u;
        uint64_t v22 = *v3;
        unint64_t v23 = *(void *)(a2 + v22);
        if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v24 = *(void *)(*(void *)(a2 + *v7) + v23);
          *(void *)(a2 + v22) = v23 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v24 = 0;
        }
        *(void *)(a1 + 8) = v24;
        goto LABEL_36;
      case 4u:
        uint64_t v18 = objc_alloc_init(SIRINLUEXTERNALAsrTokenInformation);
        [(id)a1 addAsrTokens:v18];
        if (!PBReaderPlaceMark()
          || (SIRINLUEXTERNALAsrTokenInformationReadFrom((uint64_t)v18, a2) & 1) == 0)
        {
          goto LABEL_38;
        }
        goto LABEL_33;
      case 5u:
        uint64_t v18 = objc_alloc_init(SIRINLUEXTERNALRewrittenUtterance);
        [(id)a1 addRewrittenUtterances:v18];
        if PBReaderPlaceMark() && (SIRINLUEXTERNALRewrittenUtteranceReadFrom((uint64_t)v18, a2))
        {
LABEL_33:
          PBReaderRecallMark();

LABEL_36:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_38:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_36;
    }
  }
}

uint64_t SIRINLUINTERNALSNLP_INTERMEDIATESNLPAssetVersionReadFrom(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 28) |= 2u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_44;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              LODWORD(v19) = 0;
              goto LABEL_46;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_44:
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v19) = 0;
          }
LABEL_46:
          uint64_t v36 = 20;
          goto LABEL_55;
        case 2u:
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 28) |= 1u;
          while (2)
          {
            uint64_t v26 = *v3;
            unint64_t v27 = *(void *)(a2 + v26);
            if (v27 == -1 || v27 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v27);
              *(void *)(a2 + v26) = v27 + 1;
              v19 |= (unint64_t)(v28 & 0x7F) << v24;
              if (v28 < 0)
              {
                v24 += 7;
                BOOL v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_50;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v19) = 0;
          }
LABEL_50:
          uint64_t v36 = 16;
          goto LABEL_55;
        case 3u:
          char v29 = 0;
          unsigned int v30 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 28) |= 4u;
          break;
        case 4u:
          uint64_t v34 = PBReaderReadString();
          unint64_t v35 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = v34;

          continue;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v31 = *v3;
        unint64_t v32 = *(void *)(a2 + v31);
        if (v32 == -1 || v32 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v33 = *(unsigned char *)(*(void *)(a2 + *v7) + v32);
        *(void *)(a2 + v31) = v32 + 1;
        v19 |= (unint64_t)(v33 & 0x7F) << v29;
        if ((v33 & 0x80) == 0) {
          goto LABEL_52;
        }
        v29 += 7;
        BOOL v14 = v30++ >= 9;
        if (v14)
        {
          LODWORD(v19) = 0;
          goto LABEL_54;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_52:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v19) = 0;
      }
LABEL_54:
      uint64_t v36 = 24;
LABEL_55:
      *(_DWORD *)(a1 + v36) = v19;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL SIRINLUINTERNALTurnInputRuleReadFrom(id *a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3) {
        break;
      }
      if (v17 == 2)
      {
        unsigned int v18 = objc_alloc_init(SIRINLUINTERNALContextRule);
        [a1 addPositiveContextRules:v18];
        goto LABEL_26;
      }
      if (v17 == 1)
      {
        unsigned int v18 = objc_alloc_init(SIRINLUINTERNALUtteranceRule);
        objc_storeStrong(a1 + 3, v18);
        if (!PBReaderPlaceMark() || (SIRINLUINTERNALUtteranceRuleReadFrom((uint64_t)v18, a2) & 1) == 0) {
          goto LABEL_33;
        }
LABEL_28:
        PBReaderRecallMark();

        goto LABEL_30;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_30:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    unsigned int v18 = objc_alloc_init(SIRINLUINTERNALContextRule);
    [a1 addNegativeContextRules:v18];
LABEL_26:
    if (!PBReaderPlaceMark() || (SIRINLUINTERNALContextRuleReadFrom((uint64_t)v18, a2) & 1) == 0)
    {
LABEL_33:

      return 0;
    }
    goto LABEL_28;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sirinluinternalpsc::PSCServiceResponse::formatText(sirinluinternalpsc::PSCServiceResponse *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 12)) {
    PB::TextFormatter::format(a2, "pommes_probability", *((float *)this + 2));
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluinternalpsc::PSCServiceResponse::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(unsigned char *)(this + 12)) {
    return PB::Writer::write(a2, *(float *)(this + 8));
  }
  return this;
}

uint64_t sirinluinternalpsc::PSCServiceResponse::readFrom(sirinluinternalpsc::PSCServiceResponse *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_25;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 12) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 2) = *(_DWORD *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 4;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else
      {
LABEL_25:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_25;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluinternalpsc::PSCServiceResponse::~PSCServiceResponse(sirinluinternalpsc::PSCServiceResponse *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x1CB772580);
}

uint64_t sirinluinternalpsc::PSCServiceResponse::PSCServiceResponse(uint64_t this)
{
  *(void *)this = &unk_1F232E2D8;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

{
  *(void *)this = &unk_1F232E2D8;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

float sirinluinternalpsc::PSCServiceResponse::PSCServiceResponse(sirinluinternalpsc::PSCServiceResponse *this, const sirinluinternalpsc::PSCServiceResponse *a2)
{
  *(void *)this = &unk_1F232E2D8;
  *((_DWORD *)this + 3) = 0;
  if (*((unsigned char *)a2 + 12))
  {
    float result = *((float *)a2 + 2);
    *((unsigned char *)this + 12) = 1;
    *((float *)this + 2) = result;
  }
  return result;
}

{
  float result;

  *(void *)this = &unk_1F232E2D8;
  *((_DWORD *)this + 3) = 0;
  if (*((unsigned char *)a2 + 12))
  {
    float result = *((float *)a2 + 2);
    *((unsigned char *)this + 12) = 1;
    *((float *)this + 2) = result;
  }
  return result;
}

uint64_t sirinluinternalpsc::PSCServiceResponse::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v7 = &unk_1F232E2D8;
    int v3 = *(_DWORD *)(a2 + 8);
    int v4 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = *(unsigned char *)(a2 + 12) & 1;
    int v9 = v4;
    int v5 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = v3;
    int v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

{
  int v3;
  int v4;
  int v5;
  int v6;
  void *v8;
  int v9;
  int v10;

  if (a1 != a2)
  {
    int v8 = &unk_1F232E2D8;
    int v3 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = 0;
    int v4 = *(_DWORD *)(a2 + 8);
    int v5 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = v3;
    unsigned int v10 = v5;
    uint64_t v6 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = v4;
    int v9 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

float sirinluinternalpsc::swap(sirinluinternalpsc *this, sirinluinternalpsc::PSCServiceResponse *a2, sirinluinternalpsc::PSCServiceResponse *a3)
{
  int v3 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  float result = *((float *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((float *)a2 + 2) = result;
  return result;
}

float sirinluinternalpsc::PSCServiceResponse::PSCServiceResponse(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F232E2D8;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  float result = *(float *)(a2 + 8);
  *(float *)(a1 + 8) = result;
  return result;
}

{
  float result;

  *(void *)a1 = &unk_1F232E2D8;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  float result = *(float *)(a2 + 8);
  *(float *)(a1 + 8) = result;
  return result;
}

BOOL sirinluinternalpsc::PSCServiceResponse::operator==(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a1 + 12);
  BOOL result = (*(unsigned char *)(a2 + 12) & 1) == 0;
  if (v3) {
    return (*(unsigned char *)(a2 + 12) & 1) != 0 && *(float *)(a1 + 8) == *(float *)(a2 + 8);
  }
  return result;
}

float sirinluinternalpsc::PSCServiceResponse::hash_value(sirinluinternalpsc::PSCServiceResponse *this)
{
  if (*((unsigned char *)this + 12)) {
    return *((float *)this + 2);
  }
  return result;
}

uint64_t SIRINLUINTERNALOverrideCollectionReadFrom(uint64_t a1, uint64_t a2)
{
  char v3 = (int *)MEMORY[0x1E4F940E8];
  int v4 = (int *)MEMORY[0x1E4F940E0];
  int v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 48) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_38;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v19 = 0;
            goto LABEL_40;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_38:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v19 = 0;
        }
LABEL_40:
        *(void *)(a1 + 8) = v19;
        goto LABEL_41;
      case 2u:
        uint64_t v24 = PBReaderReadString();
        uint64_t v25 = 16;
        goto LABEL_30;
      case 3u:
        uint64_t v24 = PBReaderReadString();
        uint64_t v25 = 40;
LABEL_30:
        uint64_t v26 = *(void **)(a1 + v25);
        *(void *)(a1 + v25) = v24;

        goto LABEL_41;
      case 4u:
        unint64_t v27 = objc_alloc_init(SIRINLUINTERNALParseOverride);
        [(id)a1 addParseOverrides:v27];
        if (!PBReaderPlaceMark() || (SIRINLUINTERNALParseOverrideReadFrom((uint64_t)v27, a2) & 1) == 0) {
          goto LABEL_43;
        }
        goto LABEL_36;
      case 5u:
        unint64_t v27 = objc_alloc_init(SIRINLUINTERNALComponentOverride);
        [(id)a1 addComponentOverrides:v27];
        if PBReaderPlaceMark() && (SIRINLUINTERNALComponentOverrideReadFrom((uint64_t)v27, a2))
        {
LABEL_36:
          PBReaderRecallMark();

LABEL_41:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_43:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_41;
    }
  }
}

uint64_t siricommon::Int32Value::formatText(siricommon::Int32Value *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 12)) {
    PB::TextFormatter::format(a2, "value");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t siricommon::Int32Value::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(unsigned char *)(this + 12)) {
    return PB::Writer::writeVarInt(a2);
  }
  return this;
}

uint64_t siricommon::Int32Value::readFrom(siricommon::Int32Value *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_29;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 12) |= 1u;
        unint64_t v19 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
        uint64_t v20 = *(void *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v3)
        {
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v23 = 0;
          if (v3 <= v19) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          else {
            unint64_t v2 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v2 == v19)
            {
              LODWORD(v23) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_43;
            }
            unint64_t v28 = v19 + 1;
            char v29 = *(unsigned char *)(v20 + v19);
            *((void *)a2 + 1) = v28;
            v23 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0) {
              break;
            }
            v26 += 7;
            unint64_t v19 = v28;
            BOOL v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              goto LABEL_42;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v23) = 0;
          }
LABEL_42:
          unint64_t v2 = v28;
        }
        else
        {
          char v21 = 0;
          unsigned int v22 = 0;
          uint64_t v23 = 0;
          while (1)
          {
            unint64_t v2 = v19 + 1;
            *((void *)a2 + 1) = v19 + 1;
            char v24 = *(unsigned char *)(v20 + v19);
            v23 |= (unint64_t)(v24 & 0x7F) << v21;
            if ((v24 & 0x80) == 0) {
              break;
            }
            v21 += 7;
            unint64_t v19 = v2;
            BOOL v14 = v22++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              break;
            }
          }
        }
LABEL_43:
        *((_DWORD *)this + 2) = v23;
      }
      else
      {
LABEL_29:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
      }
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_29;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void siricommon::Int32Value::~Int32Value(siricommon::Int32Value *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x1CB772580);
}

uint64_t siricommon::Int32Value::Int32Value(uint64_t this)
{
  *(void *)this = &unk_1F232E328;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

{
  *(void *)this = &unk_1F232E328;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

uint64_t siricommon::Int32Value::Int32Value(uint64_t this, const siricommon::Int32Value *a2)
{
  *(void *)this = &unk_1F232E328;
  *(_DWORD *)(this + 12) = 0;
  if (*((unsigned char *)a2 + 12))
  {
    int v2 = *((_DWORD *)a2 + 2);
    *(unsigned char *)(this + 12) = 1;
    *(_DWORD *)(this + 8) = v2;
  }
  return this;
}

{
  int v2;

  *(void *)this = &unk_1F232E328;
  *(_DWORD *)(this + 12) = 0;
  if (*((unsigned char *)a2 + 12))
  {
    int v2 = *((_DWORD *)a2 + 2);
    *(unsigned char *)(this + 12) = 1;
    *(_DWORD *)(this + 8) = v2;
  }
  return this;
}

uint64_t siricommon::Int32Value::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v6[0] = &unk_1F232E328;
    int v3 = *(unsigned char *)(a2 + 12) & 1;
    uint64_t v4 = *(void *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 12) = v3;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  void v6[2];

  if (a1 != a2)
  {
    v6[0] = &unk_1F232E328;
    int v3 = *(void *)(a2 + 8);
    *(_DWORD *)(a2 + 12) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t siricommon::swap(uint64_t this, siricommon::Int32Value *a2, siricommon::Int32Value *a3)
{
  int v3 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  int v4 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  return this;
}

uint64_t siricommon::Int32Value::Int32Value(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &unk_1F232E328;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

{
  *(void *)uint64_t result = &unk_1F232E328;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

BOOL siricommon::Int32Value::operator==(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a1 + 12);
  BOOL result = (*(unsigned char *)(a2 + 12) & 1) == 0;
  if (v3) {
    return (*(unsigned char *)(a2 + 12) & 1) != 0 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
  }
  return result;
}

uint64_t siricommon::Int32Value::hash_value(siricommon::Int32Value *this)
{
  if (*((unsigned char *)this + 12)) {
    return *((int *)this + 2);
  }
  else {
    return 0;
  }
}

uint64_t sirinluexternal::SystemDialogActGroup::formatText(sirinluexternal::SystemDialogActGroup *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = (uint64_t *)*((void *)this + 1);
  uint64_t v6 = (uint64_t *)*((void *)this + 2);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "child_acts");
  }
  uint64_t v8 = *((void *)this + 4);
  if (v8) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v8 + 32))(v8, a2, "system_dialog_act");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluexternal::SystemDialogActGroup::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(const PB::Base **)(this + 32);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  uint64_t v6 = *(const PB::Base ***)(v3 + 8);
  int v5 = *(const PB::Base ***)(v3 + 16);
  while (v6 != v5)
  {
    uint64_t v7 = *v6++;
    this = PB::Writer::writeSubmessage(a2, v7);
  }
  return this;
}

uint64_t sirinluexternal::SystemDialogActGroup::readFrom(sirinluexternal::SystemDialogActGroup *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_24;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 2) {
        operator new();
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_24:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_24;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sub_1C8BBD400(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sirinluexternal::SystemDialogActGroup::~SystemDialogActGroup(sirinluexternal::SystemDialogActGroup *this)
{
  sirinluexternal::SystemDialogActGroup::~SystemDialogActGroup(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_1F232E378;
  unint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*((void *)this + 1))
  {
    std::vector<std::unique_ptr<siricommon::StringValue>>::__clear[abi:ne180100]((void *)this + 1);
    operator delete(*((void **)this + 1));
  }
  PB::Base::~Base(this);
}

double sirinluexternal::SystemDialogActGroup::SystemDialogActGroup(sirinluexternal::SystemDialogActGroup *this)
{
  *(void *)this = &unk_1F232E378;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

{
  double result;

  *(void *)this = &unk_1F232E378;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

uint64_t sirinluexternal::SystemDialogActGroup::SystemDialogActGroup(uint64_t this, const sirinluexternal::SystemDialogActGroup *a2)
{
  *(void *)this = &unk_1F232E378;
  *(_OWORD *)(this + 8) = 0u;
  *(_OWORD *)(this + 24) = 0u;
  if (*((void *)a2 + 4)) {
    operator new();
  }
  if (*((void *)a2 + 1) != *((void *)a2 + 2)) {
    operator new();
  }
  return this;
}

void sub_1C8BBD720(void *a1)
{
}

uint64_t sirinluexternal::SystemDialogActGroup::operator=(uint64_t a1, const sirinluexternal::SystemDialogActGroup *a2)
{
  if ((const sirinluexternal::SystemDialogActGroup *)a1 != a2)
  {
    sirinluexternal::SystemDialogActGroup::SystemDialogActGroup((uint64_t)v6, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v8;
    long long v7 = v3;
    long long v8 = v4;
    sirinluexternal::SystemDialogActGroup::~SystemDialogActGroup((sirinluexternal::SystemDialogActGroup *)v6);
  }
  return a1;
}

void *sirinluexternal::swap(void *this, sirinluexternal::SystemDialogActGroup *a2, sirinluexternal::SystemDialogActGroup *a3)
{
  uint64_t v3 = this[4];
  this[4] = *((void *)a2 + 4);
  *((void *)a2 + 4) = v3;
  uint64_t v4 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  uint64_t v5 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  uint64_t v6 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v6;
  return this;
}

uint64_t sirinluexternal::SystemDialogActGroup::SystemDialogActGroup(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v4 = (void **)(a1 + 8);
  *(void *)a1 = &unk_1F232E378;
  *(_OWORD *)(a1 + 24) = 0u;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v5;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  if (*v4)
  {
    std::vector<std::unique_ptr<siricommon::StringValue>>::__clear[abi:ne180100](v4);
    operator delete(*v4);
    *uint64_t v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

uint64_t sirinluexternal::SystemDialogActGroup::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sirinluexternal::SystemDialogActGroup::SystemDialogActGroup((uint64_t)v6, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v8;
    long long v7 = v3;
    long long v8 = v4;
    sirinluexternal::SystemDialogActGroup::~SystemDialogActGroup((sirinluexternal::SystemDialogActGroup *)v6);
  }
  return a1;
}

uint64_t sirinluexternal::SystemDialogActGroup::operator==(void *a1, uint64_t a2)
{
  long long v4 = (void *)a1[4];
  uint64_t v5 = *(void **)(a2 + 32);
  if (v4)
  {
    if (!v5 || (sirinluexternal::SystemDialogAct::operator==(v4, v5) & 1) == 0) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  uint64_t v6 = a1[1];
  uint64_t v7 = a1[2];
  uint64_t v9 = a2 + 8;
  long long v8 = *(uint64_t **)(a2 + 8);
  if (v7 - v6 != *(void *)(v9 + 8) - (void)v8) {
    return 0;
  }
  if (v6 == v7) {
    return 1;
  }
  uint64_t v10 = v6 + 8;
  do
  {
    uint64_t v11 = *v8++;
    uint64_t result = sirinluexternal::SystemDialogActGroup::operator==(*(void *)(v10 - 8), v11);
    if (result) {
      BOOL v13 = v10 == v7;
    }
    else {
      BOOL v13 = 1;
    }
    v10 += 8;
  }
  while (!v13);
  return result;
}

unint64_t sirinluexternal::SystemDialogActGroup::hash_value(sirinluexternal::SystemDialogActGroup *this)
{
  unint64_t v2 = (sirinluexternal::SystemDialogAct *)*((void *)this + 4);
  if (v2) {
    unint64_t v3 = sirinluexternal::SystemDialogAct::hash_value(v2);
  }
  else {
    unint64_t v3 = 0;
  }
  uint64_t v5 = (sirinluexternal::SystemDialogActGroup **)*((void *)this + 1);
  long long v4 = (sirinluexternal::SystemDialogActGroup **)*((void *)this + 2);
  if (v5 == v4)
  {
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = *v5++;
      v6 ^= sirinluexternal::SystemDialogActGroup::hash_value(v7);
    }
    while (v5 != v4);
  }
  return v6 ^ v3;
}

uint64_t sirinluexternal::SystemDialogActGroup::makeSystemDialogAct(uint64_t this)
{
  if (!*(void *)(this + 32)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternal::MultilingualVariant::formatText(sirinluexternal::MultilingualVariant *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((void *)this + 1)) {
    PB::TextFormatter::format();
  }
  if (*((unsigned char *)this + 24)) {
    PB::TextFormatter::format(a2, "language_variant_score", *((double *)this + 2));
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluexternal::MultilingualVariant::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if (*(void *)(this + 8)) {
    this = PB::Writer::write();
  }
  if (*(unsigned char *)(v3 + 24))
  {
    double v4 = *(double *)(v3 + 16);
    return PB::Writer::write(a2, v4);
  }
  return this;
}

uint64_t sirinluexternal::MultilingualVariant::readFrom(sirinluexternal::MultilingualVariant *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_24;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 24) |= 1u;
        unint64_t v20 = *((void *)a2 + 1);
        if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 2) = *(void *)(*(void *)a2 + v20);
          *((void *)a2 + 1) += 8;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else
      {
        if ((v11 >> 3) == 1) {
          operator new();
        }
LABEL_24:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_24;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluexternal::MultilingualVariant::~MultilingualVariant(sirinluexternal::MultilingualVariant *this)
{
  sirinluexternal::MultilingualVariant::~MultilingualVariant(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t vars8;

  unint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1F232E3C8;
  *((void *)this + 1) = 0;
  if (v2) {
    std::default_delete<std::string>::operator()[abi:ne180100](v2);
  }
  PB::Base::~Base(this);
}

uint64_t sirinluexternal::MultilingualVariant::MultilingualVariant(uint64_t this)
{
  *(void *)this = &unk_1F232E3C8;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(void *)this = &unk_1F232E3C8;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

uint64_t sirinluexternal::MultilingualVariant::MultilingualVariant(uint64_t this, const sirinluexternal::MultilingualVariant *a2)
{
  *(void *)this = &unk_1F232E3C8;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  if (*((unsigned char *)a2 + 24))
  {
    uint64_t v2 = *((void *)a2 + 2);
    *(unsigned char *)(this + 24) |= 1u;
    *(void *)(this + 16) = v2;
  }
  return this;
}

uint64_t sirinluexternal::MultilingualVariant::operator=(uint64_t a1, const sirinluexternal::MultilingualVariant *a2)
{
  if ((const sirinluexternal::MultilingualVariant *)a1 != a2)
  {
    sirinluexternal::MultilingualVariant::MultilingualVariant((uint64_t)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v4;
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v9;
    uint64_t v9 = v5;
    sirinluexternal::MultilingualVariant::~MultilingualVariant((sirinluexternal::MultilingualVariant *)&v7);
  }
  return a1;
}

double sirinluexternal::swap(sirinluexternal *this, sirinluexternal::MultilingualVariant *a2, sirinluexternal::MultilingualVariant *a3)
{
  int v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

uint64_t sirinluexternal::MultilingualVariant::MultilingualVariant(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F232E3C8;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  if (v5) {
    std::default_delete<std::string>::operator()[abi:ne180100](v5);
  }
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return a1;
}

uint64_t sirinluexternal::MultilingualVariant::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sirinluexternal::MultilingualVariant::MultilingualVariant((uint64_t)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v4;
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v9;
    uint64_t v9 = v5;
    sirinluexternal::MultilingualVariant::~MultilingualVariant((sirinluexternal::MultilingualVariant *)&v7);
  }
  return a1;
}

BOOL sirinluexternal::MultilingualVariant::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned __int8 **)(a1 + 8);
  uint64_t v5 = *(unsigned __int8 ***)(a2 + 8);
  if (v4)
  {
    if (!v5) {
      return 0;
    }
    uint64_t v6 = v4[23];
    if ((v6 & 0x80u) == 0) {
      uint64_t v7 = (unsigned __int8 *)v4[23];
    }
    else {
      uint64_t v7 = (unsigned __int8 *)*((void *)v4 + 1);
    }
    uint64_t v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    int v9 = (char)v8;
    if ((char)v8 < 0) {
      uint64_t v8 = v5[1];
    }
    if (v7 != v8) {
      return 0;
    }
    if (v9 >= 0) {
      int v10 = *(unsigned __int8 **)(a2 + 8);
    }
    else {
      int v10 = *v5;
    }
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v10, *((void *)v4 + 1))) {
        return 0;
      }
    }
    else if (v4[23])
    {
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6) {
          goto LABEL_18;
        }
      }
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
LABEL_18:
  BOOL result = (*(unsigned char *)(a2 + 24) & 1) == 0;
  if ((*(unsigned char *)(a1 + 24) & 1) == 0) {
    return result;
  }
  return (*(unsigned char *)(a2 + 24) & 1) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
}

unint64_t sirinluexternal::MultilingualVariant::hash_value(sirinluexternal::MultilingualVariant *this)
{
  unint64_t v2 = *((void *)this + 1);
  if (v2) {
    unint64_t v2 = std::__string_hash<char>::operator()[abi:ne180100](v2);
  }
  if (*((unsigned char *)this + 24))
  {
    double v3 = *((double *)this + 2);
    if (v3 == 0.0) {
      double v3 = 0.0;
    }
  }
  else
  {
    double v3 = 0.0;
  }
  return *(void *)&v3 ^ v2;
}

uint64_t SIRINLUEXTERNALUtteranceAlignmentReadFrom(unsigned char *a1, uint64_t a2)
{
  double v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3) {
        break;
      }
      if (v17 != 2)
      {
        if (v17 != 1)
        {
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          goto LABEL_49;
        }
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        a1[24] |= 1u;
        while (1)
        {
          uint64_t v21 = *v3;
          unint64_t v22 = *(void *)(a2 + v21);
          if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0) {
            goto LABEL_41;
          }
          v18 += 7;
          BOOL v14 = v19++ >= 9;
          if (v14)
          {
            LODWORD(v20) = 0;
            goto LABEL_43;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_41:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v20) = 0;
        }
LABEL_43:
        uint64_t v31 = 8;
        goto LABEL_48;
      }
      char v29 = objc_alloc_init(SIRINLUEXTERNALUtteranceSpan);
      [a1 addSpans:v29];
      if (!PBReaderPlaceMark() || !SIRINLUEXTERNALUtteranceSpanReadFrom((uint64_t)v29, a2))
      {

        return 0;
      }
      PBReaderRecallMark();

LABEL_49:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v24 = 0;
    unsigned int v25 = 0;
    uint64_t v20 = 0;
    a1[24] |= 2u;
    while (1)
    {
      uint64_t v26 = *v3;
      unint64_t v27 = *(void *)(a2 + v26);
      if (v27 == -1 || v27 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v27);
      *(void *)(a2 + v26) = v27 + 1;
      v20 |= (unint64_t)(v28 & 0x7F) << v24;
      if ((v28 & 0x80) == 0) {
        goto LABEL_45;
      }
      v24 += 7;
      BOOL v14 = v25++ >= 9;
      if (v14)
      {
        LODWORD(v20) = 0;
        goto LABEL_47;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_45:
    if (*(unsigned char *)(a2 + *v5)) {
      LODWORD(v20) = 0;
    }
LABEL_47:
    uint64_t v31 = 12;
LABEL_48:
    *(_DWORD *)&a1[v31] = v20;
    goto LABEL_49;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t SIRINLUEXTERNALSSU_INFERENCESsuInferenceResponseReadFrom(void *a1, uint64_t a2)
{
  double v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        unint64_t v17 = objc_alloc_init(SIRINLUEXTERNALUserParse);
        [a1 addParses:v17];
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALUserParseReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL SIRINLUINTERNALPreprocessingWrapperReadFrom(id *a1, uint64_t a2)
{
  double v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        unint64_t v17 = objc_alloc_init(SIRINLUINTERNALTOKENIZERTokenizerResponse);
        objc_storeStrong(a1 + 4, v17);
        if (PBReaderPlaceMark() && SIRINLUINTERNALTOKENIZERTokenizerResponseReadFrom((uint64_t)v17, a2)) {
          goto LABEL_32;
        }
        goto LABEL_35;
      case 2u:
        unint64_t v17 = objc_alloc_init(SIRINLUINTERNALSPANMATCHSpanMatchResponse);
        objc_storeStrong(a1 + 3, v17);
        if (!PBReaderPlaceMark() || (SIRINLUINTERNALSPANMATCHSpanMatchResponseReadFrom(v17, a2) & 1) == 0) {
          goto LABEL_35;
        }
        goto LABEL_32;
      case 3u:
        unint64_t v17 = objc_alloc_init(SIRINLUINTERNALEMBEDDINGEmbeddingResponse);
        objc_storeStrong(a1 + 1, v17);
        if (!PBReaderPlaceMark()
          || (SIRINLUINTERNALEMBEDDINGEmbeddingResponseReadFrom((uint64_t)v17, a2) & 1) == 0)
        {
          goto LABEL_35;
        }
        goto LABEL_32;
      case 4u:
        unint64_t v17 = objc_alloc_init(SIRINLUINTERNALMENTION_RESOLVERMentionResolverResponse);
        objc_storeStrong(a1 + 2, v17);
        if (PBReaderPlaceMark()
          && SIRINLUINTERNALMENTION_RESOLVERMentionResolverResponseReadFrom((uint64_t)v17, a2))
        {
LABEL_32:
          PBReaderRecallMark();

LABEL_33:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_35:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_33;
    }
  }
}

uint64_t SIRINLUEXTERNALRRMetadataReadFrom(uint64_t a1, uint64_t a2)
{
  double v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        *(unsigned char *)(a1 + 32) |= 1u;
        while (1)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
          *(void *)(a2 + v22) = v23 + 1;
          v21 |= (unint64_t)(v24 & 0x7F) << v19;
          if ((v24 & 0x80) == 0) {
            goto LABEL_37;
          }
          v19 += 7;
          BOOL v14 = v20++ >= 9;
          if (v14)
          {
            LODWORD(v21) = 0;
            goto LABEL_39;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_37:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v21) = 0;
        }
LABEL_39:
        *(_DWORD *)(a1 + 16) = v21;
      }
      else
      {
        if (v17 == 2)
        {
          char v18 = objc_alloc_init(SIRINLUEXTERNALRRSurroundingText);
          [(id)a1 addSurroundingTexts:v18];
          if (!PBReaderPlaceMark() || !SIRINLUEXTERNALRRSurroundingTextReadFrom((uint64_t)v18, a2))
          {
LABEL_42:

            return 0;
          }
        }
        else
        {
          if (v17 != 1)
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
            continue;
          }
          char v18 = objc_alloc_init(SIRINLUEXTERNALRRBoundingBox);
          objc_storeStrong((id *)(a1 + 8), v18);
          if (!PBReaderPlaceMark() || !SIRINLUEXTERNALRRBoundingBoxReadFrom((uint64_t)v18, a2)) {
            goto LABEL_42;
          }
        }
        PBReaderRecallMark();
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t sirinluexternalssu_inference::SsuInferenceSetup::formatText(sirinluexternalssu_inference::SsuInferenceSetup *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((void *)this + 1)) {
    PB::TextFormatter::format();
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluexternalssu_inference::SsuInferenceSetup::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(void *)(this + 8)) {
    return PB::Writer::write();
  }
  return this;
}

uint64_t sirinluexternalssu_inference::SsuInferenceSetup::readFrom(sirinluexternalssu_inference::SsuInferenceSetup *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluexternalssu_inference::SsuInferenceSetup::~SsuInferenceSetup(sirinluexternalssu_inference::SsuInferenceSetup *this)
{
  sirinluexternalssu_inference::SsuInferenceSetup::~SsuInferenceSetup(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t vars8;

  unint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1F232E418;
  *((void *)this + 1) = 0;
  if (v2) {
    std::default_delete<std::string>::operator()[abi:ne180100](v2);
  }
  PB::Base::~Base(this);
}

void *sirinluexternalssu_inference::SsuInferenceSetup::SsuInferenceSetup(void *this)
{
  *this = &unk_1F232E418;
  this[1] = 0;
  return this;
}

{
  *this = &unk_1F232E418;
  this[1] = 0;
  return this;
}

void *sirinluexternalssu_inference::SsuInferenceSetup::SsuInferenceSetup(void *this, const sirinluexternalssu_inference::SsuInferenceSetup *a2)
{
  *this = &unk_1F232E418;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const sirinluexternalssu_inference::SsuInferenceSetup *sirinluexternalssu_inference::SsuInferenceSetup::operator=(const sirinluexternalssu_inference::SsuInferenceSetup *a1, const sirinluexternalssu_inference::SsuInferenceSetup *a2)
{
  if (a1 != a2)
  {
    sirinluexternalssu_inference::SsuInferenceSetup::SsuInferenceSetup(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    sirinluexternalssu_inference::SsuInferenceSetup::~SsuInferenceSetup((sirinluexternalssu_inference::SsuInferenceSetup *)&v5);
  }
  return a1;
}

uint64_t sirinluexternalssu_inference::swap(uint64_t this, sirinluexternalssu_inference::SsuInferenceSetup *a2, sirinluexternalssu_inference::SsuInferenceSetup *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *sirinluexternalssu_inference::SsuInferenceSetup::SsuInferenceSetup(void *a1, uint64_t a2)
{
  *a1 = &unk_1F232E418;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    std::default_delete<std::string>::operator()[abi:ne180100](v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_1F232E418;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    std::default_delete<std::string>::operator()[abi:ne180100](v4);
  }
  return a1;
}

uint64_t sirinluexternalssu_inference::SsuInferenceSetup::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = &unk_1F232E418;
    v6[1] = v4;
    sirinluexternalssu_inference::SsuInferenceSetup::~SsuInferenceSetup((sirinluexternalssu_inference::SsuInferenceSetup *)v6);
  }
  return a1;
}

uint64_t sirinluexternalssu_inference::SsuInferenceSetup::operator==(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned __int8 **)(a1 + 8);
  uint64_t v3 = *(unsigned __int8 ***)(a2 + 8);
  uint64_t result = v3 == 0;
  if (!v2) {
    return result;
  }
  if (!v3) {
    return 0;
  }
  uint64_t v5 = v2[23];
  if ((v5 & 0x80u) == 0) {
    uint64_t v6 = (unsigned __int8 *)v2[23];
  }
  else {
    uint64_t v6 = (unsigned __int8 *)*((void *)v2 + 1);
  }
  uint64_t v7 = (unsigned __int8 *)*((unsigned __int8 *)v3 + 23);
  int v8 = (char)v7;
  if ((char)v7 < 0) {
    uint64_t v7 = v3[1];
  }
  if (v6 != v7) {
    return 0;
  }
  if (v8 >= 0) {
    unsigned int v9 = *(unsigned __int8 **)(a2 + 8);
  }
  else {
    unsigned int v9 = *v3;
  }
  if ((v5 & 0x80) != 0) {
    return !memcmp(*(const void **)v2, v9, *((void *)v2 + 1));
  }
  if (!v2[23]) {
    return 1;
  }
  uint64_t v10 = v5 - 1;
  do
  {
    int v12 = *v2++;
    int v11 = v12;
    int v14 = *v9++;
    int v13 = v14;
    BOOL v16 = v10-- != 0;
    uint64_t result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

unint64_t sirinluexternalssu_inference::SsuInferenceSetup::hash_value(sirinluexternalssu_inference::SsuInferenceSetup *this)
{
  unint64_t result = *((void *)this + 1);
  if (result) {
    return std::__string_hash<char>::operator()[abi:ne180100](result);
  }
  return result;
}

uint64_t sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse::formatText(sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((void *)this + 1)) {
    PB::TextFormatter::format();
  }
  uint64_t v5 = *((void *)this + 2);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "response");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *(const PB::Base **)(this + 16);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  if (*(void *)(v3 + 8))
  {
    return PB::Writer::write();
  }
  return this;
}

uint64_t sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse::readFrom(sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_24;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 2) {
        operator new();
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_24:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_24;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse::~ITFMSpanFeaturizerResponse(sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse *this)
{
  sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse::~ITFMSpanFeaturizerResponse(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1F232E468;
  unint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    std::default_delete<std::string>::operator()[abi:ne180100](v3);
  }
  PB::Base::~Base(this);
}

void *sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse::ITFMSpanFeaturizerResponse(void *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1F232E468;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1F232E468;
  return this;
}

void *sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse::ITFMSpanFeaturizerResponse(void *this, const sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse *a2)
{
  *this = &unk_1F232E468;
  this[1] = 0;
  this[2] = 0;
  if (*((void *)a2 + 2)) {
    operator new();
  }
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse::operator=(uint64_t a1, const sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse *a2)
{
  if ((const sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse *)a1 != a2)
  {
    sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse::ITFMSpanFeaturizerResponse(&v5, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    long long v6 = v3;
    sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse::~ITFMSpanFeaturizerResponse((sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse *)&v5);
  }
  return a1;
}

uint64_t sirinluinternalsnlp_intermediate::swap(uint64_t this, sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse *a2, sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse *a3)
{
  uint64_t v3 = *(void *)(this + 16);
  *(void *)(this + 16) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v3;
  uint64_t v4 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  return this;
}

void *sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse::ITFMSpanFeaturizerResponse(void *a1, uint64_t a2)
{
  a1[1] = 0;
  uint64_t v4 = a1 + 1;
  *a1 = &unk_1F232E468;
  a1[2] = 0;
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  uint64_t v6 = a1[2];
  a1[2] = v5;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v8 = *v4;
  *uint64_t v4 = v7;
  if (v8) {
    std::default_delete<std::string>::operator()[abi:ne180100](v8);
  }
  return a1;
}

uint64_t sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse::ITFMSpanFeaturizerResponse(&v5, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    long long v6 = v3;
    sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse::~ITFMSpanFeaturizerResponse((sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse *)&v5);
  }
  return a1;
}

uint64_t sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a2 + 16);
  if (v4)
  {
    if (!v5 || !sirinluinternalsnlp_intermediate::SpanFeaturizerResponse::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  long long v6 = *(unsigned __int8 **)(a1 + 8);
  uint64_t v7 = *(unsigned __int8 ***)(a2 + 8);
  uint64_t result = v7 == 0;
  if (!v6) {
    return result;
  }
  if (!v7) {
    return 0;
  }
  uint64_t v9 = v6[23];
  if ((v9 & 0x80u) == 0) {
    unint64_t v10 = (unsigned __int8 *)v6[23];
  }
  else {
    unint64_t v10 = (unsigned __int8 *)*((void *)v6 + 1);
  }
  unint64_t v11 = (unsigned __int8 *)*((unsigned __int8 *)v7 + 23);
  int v12 = (char)v11;
  if ((char)v11 < 0) {
    unint64_t v11 = v7[1];
  }
  if (v10 != v11) {
    return 0;
  }
  if (v12 >= 0) {
    BOOL v13 = *(unsigned __int8 **)(a2 + 8);
  }
  else {
    BOOL v13 = *v7;
  }
  if ((v9 & 0x80) != 0) {
    return !memcmp(*(const void **)v6, v13, *((void *)v6 + 1));
  }
  if (!v6[23]) {
    return 1;
  }
  uint64_t v14 = v9 - 1;
  do
  {
    int v16 = *v6++;
    int v15 = v16;
    int v18 = *v13++;
    int v17 = v18;
    BOOL v20 = v14-- != 0;
    uint64_t result = v15 == v17;
  }
  while (v15 == v17 && v20);
  return result;
}

unint64_t sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse::hash_value(sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse *this)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2 && (long long v3 = *(sirinluinternalsnlp_intermediate::LinearizedTensor **)(v2 + 8)) != 0) {
    uint64_t v4 = sirinluinternalsnlp_intermediate::LinearizedTensor::hash_value(v3);
  }
  else {
    uint64_t v4 = 0;
  }
  unint64_t v5 = *((void *)this + 1);
  if (v5) {
    unint64_t v5 = std::__string_hash<char>::operator()[abi:ne180100](v5);
  }
  return v5 ^ v4;
}

uint64_t sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse::makeResponse(uint64_t this)
{
  if (!*(void *)(this + 16)) {
    operator new();
  }
  return this;
}

uint64_t siri_nlu_types::ssu_compression_utilities::compressArchiveForSSUFilePath(std::string *this, const std::__fs::filesystem::path *a2, const std::__fs::filesystem::path *a3)
{
  uint64_t v4 = (void *)MEMORY[0x1E4F1CB10];
  unint64_t v5 = NSString;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&pn, this->__r_.__value_.__l.__data_, this->__r_.__value_.__l.__size_);
  }
  else {
    std::string pn = *this;
  }
  if ((pn.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v6 = &pn;
  }
  else {
    long long v6 = (std::string *)pn.__r_.__value_.__r.__words[0];
  }
  uint64_t v7 = [v5 stringWithUTF8String:v6];
  uint64_t v8 = [v4 fileURLWithPath:v7];

  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(pn.__r_.__value_.__l.__data_);
  }
  uint64_t v9 = (void *)MEMORY[0x1E4F1CB10];
  unint64_t v10 = NSString;
  if (SHIBYTE(a2->__pn_.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&pn, a2->__pn_.__r_.__value_.__l.__data_, a2->__pn_.__r_.__value_.__l.__size_);
  }
  else {
    std::string pn = a2->__pn_;
  }
  if ((pn.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_std::string pn = &pn;
  }
  else {
    p_std::string pn = (std::string *)pn.__r_.__value_.__r.__words[0];
  }
  int v12 = [v10 stringWithUTF8String:p_pn];
  BOOL v13 = [v9 fileURLWithPath:v12];

  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(pn.__r_.__value_.__l.__data_);
  }
  id v24 = 0;
  BOOL v14 = +[SSUCompressionUtils compressArchiveForSSUFileURL:v8 outputFileURL:v13 error:&v24];
  id v15 = v24;
  if (!v14)
  {
    int v17 = v15;
    exception = __cxa_allocate_exception(0x10uLL);
    char v19 = exception;
    if (!v17)
    {
      MEMORY[0x1CB772450](exception, "Unable to compress for some unknown reason");
      __cxa_throw(v19, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    BOOL v20 = [v17 localizedDescription];
    std::string::basic_string[abi:ne180100]<0>(&v23, v20);
    uint64_t v21 = std::string::insert(&v23, 0, "Error during compression: ");
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    pn.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&pn.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x1CB772460](v19, &pn);
    __cxa_throw(v19, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }

  return 1;
}

void sub_1C8BC253C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a16 < 0)
  {
    operator delete(a11);

    if ((v27 & 1) == 0) {
      goto LABEL_8;
    }
  }
  else
  {

    if (!v27)
    {
LABEL_8:

      _Unwind_Resume(a1);
    }
  }
  __cxa_free_exception(v25);
  goto LABEL_8;
}

uint64_t siri_nlu_types::ssu_compression_utilities::decompressFromCompressedSSUFilePath(std::string *this, const std::__fs::filesystem::path *a2, const std::__fs::filesystem::path *a3)
{
  uint64_t v4 = (void *)MEMORY[0x1E4F1CB10];
  unint64_t v5 = NSString;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&pn, this->__r_.__value_.__l.__data_, this->__r_.__value_.__l.__size_);
  }
  else {
    std::string pn = *this;
  }
  if ((pn.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v6 = &pn;
  }
  else {
    long long v6 = (std::string *)pn.__r_.__value_.__r.__words[0];
  }
  uint64_t v7 = [v5 stringWithUTF8String:v6];
  uint64_t v8 = [v4 fileURLWithPath:v7];

  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(pn.__r_.__value_.__l.__data_);
  }
  uint64_t v9 = (void *)MEMORY[0x1E4F1CB10];
  unint64_t v10 = NSString;
  if (SHIBYTE(a2->__pn_.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&pn, a2->__pn_.__r_.__value_.__l.__data_, a2->__pn_.__r_.__value_.__l.__size_);
  }
  else {
    std::string pn = a2->__pn_;
  }
  if ((pn.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_std::string pn = &pn;
  }
  else {
    p_std::string pn = (std::string *)pn.__r_.__value_.__r.__words[0];
  }
  int v12 = [v10 stringWithUTF8String:p_pn];
  BOOL v13 = [v9 fileURLWithPath:v12];

  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(pn.__r_.__value_.__l.__data_);
  }
  id v24 = 0;
  BOOL v14 = +[SSUCompressionUtils decompressFromCompressedSSUFilePath:v8 outputFileURL:v13 error:&v24];
  id v15 = v24;
  if (!v14)
  {
    int v17 = v15;
    exception = __cxa_allocate_exception(0x10uLL);
    char v19 = exception;
    if (!v17)
    {
      MEMORY[0x1CB772450](exception, "Unable to decompress for some unknown reason");
      __cxa_throw(v19, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    BOOL v20 = [v17 localizedDescription];
    std::string::basic_string[abi:ne180100]<0>(&v23, v20);
    uint64_t v21 = std::string::insert(&v23, 0, "Error during decompression: ");
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    pn.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&pn.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x1CB772460](v19, &pn);
    __cxa_throw(v19, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }

  return 1;
}

void sub_1C8BC286C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a16 < 0)
  {
    operator delete(a11);

    if ((v27 & 1) == 0) {
      goto LABEL_8;
    }
  }
  else
  {

    if (!v27)
    {
LABEL_8:

      _Unwind_Resume(a1);
    }
  }
  __cxa_free_exception(v25);
  goto LABEL_8;
}

void sub_1C8BC2AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  MEMORY[0x1CB772580](v7, 0x1030C40E9F947FBLL);
  apple::aiml::flatbuffers2::FlatBufferBuilder::~FlatBufferBuilder((apple::aiml::flatbuffers2::FlatBufferBuilder *)va);
  _Unwind_Resume(a1);
}

void sub_1C8BC2D94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

apple::aiml::flatbuffers2::vector_downward *apple::aiml::flatbuffers2::FlatBufferBuilder::AddElement<unsigned long long>(apple::aiml::flatbuffers2::vector_downward *this, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = this;
  if (a3 || *((unsigned char *)this + 80))
  {
    apple::aiml::flatbuffers2::FlatBufferBuilder::Align(this, 8uLL);
    apple::aiml::flatbuffers2::vector_downward::ensure_space(v5, 8uLL);
    uint64_t v6 = *((void *)v5 + 6);
    *(void *)(v6 - 8) = a3;
    v6 -= 8;
    *((void *)v5 + 6) = v6;
    uint64_t v7 = (*((_DWORD *)v5 + 8) - v6 + *((_DWORD *)v5 + 10));
    this = (apple::aiml::flatbuffers2::vector_downward *)apple::aiml::flatbuffers2::vector_downward::ensure_space(v5, 8uLL);
    **((void **)v5 + 7) = v7 | (a2 << 32);
    *((void *)v5 + 7) += 8;
    ++*((_DWORD *)v5 + 16);
    unsigned int v8 = *((unsigned __int16 *)v5 + 34);
    if (v8 <= a2) {
      LOWORD(v8) = a2;
    }
    *((_WORD *)v5 + 34) = v8;
  }
  return this;
}

void sub_1C8BC30EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8BC3278(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sirinluexternal::NLContext::formatText(sirinluexternal::NLContext *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  unint64_t v5 = (uint64_t *)*((void *)this + 1);
  uint64_t v6 = (uint64_t *)*((void *)this + 2);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "active_tasks");
  }
  unsigned int v8 = (uint64_t *)*((void *)this + 4);
  uint64_t v9 = (uint64_t *)*((void *)this + 5);
  while (v8 != v9)
  {
    uint64_t v10 = *v8++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v10 + 32))(v10, a2, "executed_tasks");
  }
  unint64_t v11 = (uint64_t *)*((void *)this + 7);
  int v12 = (uint64_t *)*((void *)this + 8);
  while (v11 != v12)
  {
    uint64_t v13 = *v11++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v13 + 32))(v13, a2, "salient_entities");
  }
  uint64_t v14 = *((void *)this + 10);
  if (v14) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v14 + 32))(v14, a2, "system_dialog_act_group");
  }
  id v15 = (uint64_t *)*((void *)this + 11);
  int v16 = (uint64_t *)*((void *)this + 12);
  while (v15 != v16)
  {
    uint64_t v17 = *v15++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v17 + 32))(v17, a2, "system_dialog_acts");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluexternal::NLContext::writeTo(uint64_t this, PB::Writer *a2)
{
  long long v3 = (void *)this;
  uint64_t v4 = *(const PB::Base **)(this + 80);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  unint64_t v5 = (const PB::Base **)v3[1];
  uint64_t v6 = (const PB::Base **)v3[2];
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    this = PB::Writer::writeSubmessage(a2, v7);
  }
  unsigned int v8 = (const PB::Base **)v3[4];
  uint64_t v9 = (const PB::Base **)v3[5];
  while (v8 != v9)
  {
    uint64_t v10 = *v8++;
    this = PB::Writer::writeSubmessage(a2, v10);
  }
  unint64_t v11 = (const PB::Base **)v3[7];
  int v12 = (const PB::Base **)v3[8];
  while (v11 != v12)
  {
    uint64_t v13 = *v11++;
    this = PB::Writer::writeSubmessage(a2, v13);
  }
  id v15 = (const PB::Base **)v3[11];
  uint64_t v14 = (const PB::Base **)v3[12];
  while (v15 != v14)
  {
    int v16 = *v15++;
    this = PB::Writer::writeSubmessage(a2, v16);
  }
  return this;
}

uint64_t sirinluexternal::NLContext::readFrom(sirinluexternal::NLContext *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_19;
        }
      }
LABEL_21:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v10 >> 3))
      {
        case 1u:
          operator new();
        case 2u:
          PB::PtrVector<sirinluexternal::Task>::emplace_back<>();
        case 3u:
          PB::PtrVector<sirinluexternal::Task>::emplace_back<>();
        case 4u:
          PB::PtrVector<sirinluexternal::EntityCandidate>::emplace_back<>();
        case 5u:
          PB::PtrVector<sirinluexternal::SystemDialogAct>::emplace_back<>();
        default:
          break;
      }
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_21;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_19;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void PB::PtrVector<sirinluexternal::Task>::emplace_back<>()
{
}

void sub_1C8BC3910(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sirinluexternal::NLContext::~NLContext(sirinluexternal::NLContext *this)
{
  sirinluexternal::NLContext::~NLContext(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  void **v3;
  uint64_t vars8;

  *(void *)this = &unk_1F232E4B8;
  unint64_t v3 = (void **)((char *)this + 88);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v3);
  unint64_t v2 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unint64_t v3 = (void **)((char *)this + 56);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v3);
  unint64_t v3 = (void **)((char *)this + 32);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v3);
  unint64_t v3 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v3);
  PB::Base::~Base(this);
}

double sirinluexternal::NLContext::NLContext(sirinluexternal::NLContext *this)
{
  *(void *)this = &unk_1F232E4B8;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((void *)this + 13) = 0;
  return result;
}

{
  double result;

  *(void *)this = &unk_1F232E4B8;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((void *)this + 13) = 0;
  return result;
}

uint64_t sirinluexternal::NLContext::NLContext(uint64_t this, const sirinluexternal::NLContext *a2)
{
  *(_OWORD *)(this + 8) = 0u;
  *(_OWORD *)(this + 56) = 0u;
  *(_OWORD *)(this + 88) = 0u;
  *(void *)this = &unk_1F232E4B8;
  *(_OWORD *)(this + 24) = 0u;
  *(_OWORD *)(this + 40) = 0u;
  *(_OWORD *)(this + 72) = 0u;
  *(void *)(this + 104) = 0;
  if (*((void *)a2 + 10)) {
    operator new();
  }
  if (*((void *)a2 + 1) != *((void *)a2 + 2)) {
    PB::PtrVector<sirinluexternal::Task>::emplace_back<sirinluexternal::Task const&>();
  }
  if (*((void *)a2 + 4) != *((void *)a2 + 5)) {
    PB::PtrVector<sirinluexternal::Task>::emplace_back<sirinluexternal::Task const&>();
  }
  if (*((void *)a2 + 7) != *((void *)a2 + 8)) {
    PB::PtrVector<sirinluexternal::EntityCandidate>::emplace_back<sirinluexternal::EntityCandidate const&>();
  }
  if (*((void *)a2 + 11) != *((void *)a2 + 12)) {
    PB::PtrVector<sirinluexternal::SystemDialogAct>::emplace_back<sirinluexternal::SystemDialogAct const&>();
  }
  return this;
}

void PB::PtrVector<sirinluexternal::Task>::emplace_back<sirinluexternal::Task const&>()
{
}

void sub_1C8BC3D48(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

const sirinluexternal::NLContext *sirinluexternal::NLContext::operator=(const sirinluexternal::NLContext *a1, const sirinluexternal::NLContext *a2)
{
  if (a1 != a2)
  {
    sirinluexternal::NLContext::NLContext((uint64_t)v5, a2);
    sirinluexternal::swap(a1, (sirinluexternal::NLContext *)v5, v3);
    sirinluexternal::NLContext::~NLContext((sirinluexternal::NLContext *)v5);
  }
  return a1;
}

void *sirinluexternal::swap(void *this, sirinluexternal::NLContext *a2, sirinluexternal::NLContext *a3)
{
  uint64_t v3 = this[10];
  this[10] = *((void *)a2 + 10);
  *((void *)a2 + 10) = v3;
  uint64_t v4 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  uint64_t v5 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  uint64_t v6 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v6;
  uint64_t v7 = this[4];
  this[4] = *((void *)a2 + 4);
  *((void *)a2 + 4) = v7;
  uint64_t v8 = this[5];
  this[5] = *((void *)a2 + 5);
  *((void *)a2 + 5) = v8;
  uint64_t v9 = this[6];
  this[6] = *((void *)a2 + 6);
  *((void *)a2 + 6) = v9;
  uint64_t v10 = this[7];
  this[7] = *((void *)a2 + 7);
  *((void *)a2 + 7) = v10;
  uint64_t v11 = this[8];
  this[8] = *((void *)a2 + 8);
  *((void *)a2 + 8) = v11;
  uint64_t v12 = this[9];
  this[9] = *((void *)a2 + 9);
  *((void *)a2 + 9) = v12;
  uint64_t v13 = this[11];
  this[11] = *((void *)a2 + 11);
  *((void *)a2 + 11) = v13;
  uint64_t v14 = this[12];
  this[12] = *((void *)a2 + 12);
  *((void *)a2 + 12) = v14;
  uint64_t v15 = this[13];
  this[13] = *((void *)a2 + 13);
  *((void *)a2 + 13) = v15;
  return this;
}

uint64_t sirinluexternal::NLContext::NLContext(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F232E4B8;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v4 = (void **)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 104) = 0;
  uint64_t v5 = *(void *)(a2 + 80);
  *(void *)(a2 + 80) = 0;
  uint64_t v6 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = v5;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(v4);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate((void **)(a1 + 32));
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate((void **)(a1 + 56));
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate((void **)(a1 + 88));
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  return a1;
}

void *sirinluexternal::NLContext::operator=(void *a1, uint64_t a2)
{
  if (a1 != (void *)a2)
  {
    sirinluexternal::NLContext::NLContext((uint64_t)v5, a2);
    sirinluexternal::swap(a1, (sirinluexternal::NLContext *)v5, v3);
    sirinluexternal::NLContext::~NLContext((sirinluexternal::NLContext *)v5);
  }
  return a1;
}

uint64_t sirinluexternal::NLContext::operator==(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = (void *)a1[10];
  uint64_t v5 = *(void *)(a2 + 80);
  if (v4)
  {
    if (!v5 || (sirinluexternal::SystemDialogActGroup::operator==(v4, v5) & 1) == 0) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  if (!PB::PtrVector<sirinluexternal::Task>::operator==(a1 + 1, *(void ***)(a2 + 8), *(void *)(a2 + 16))
    || !PB::PtrVector<sirinluexternal::Task>::operator==(a1 + 4, *(void ***)(a2 + 32), *(void *)(a2 + 40))
    || !PB::PtrVector<sirinluexternal::EntityCandidate>::operator==(a1 + 7, *(uint64_t **)(a2 + 56), *(void *)(a2 + 64)))
  {
    return 0;
  }
  uint64_t v6 = *(void ***)(a2 + 88);
  uint64_t v7 = *(void *)(a2 + 96);
  return PB::PtrVector<sirinluexternal::SystemDialogAct>::operator==(a1 + 11, v6, v7);
}

BOOL PB::PtrVector<sirinluexternal::Task>::operator==(uint64_t *a1, void **a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (v4 - *a1 != a3 - (void)a2) {
    return 0;
  }
  if (v3 == v4) {
    return 1;
  }
  uint64_t v5 = a2;
  uint64_t v6 = v3 + 8;
  do
  {
    uint64_t v7 = *v5++;
    BOOL result = sirinluexternal::Task::operator==(*(void **)(v6 - 8), v7);
    BOOL v9 = !result || v6 == v4;
    v6 += 8;
  }
  while (!v9);
  return result;
}

unint64_t sirinluexternal::NLContext::hash_value(sirinluexternal::NLContext *this)
{
  unint64_t v2 = (sirinluexternal::SystemDialogActGroup *)*((void *)this + 10);
  if (v2) {
    unint64_t v3 = sirinluexternal::SystemDialogActGroup::hash_value(v2);
  }
  else {
    unint64_t v3 = 0;
  }
  uint64_t v4 = (sirinluexternal::Task **)*((void *)this + 1);
  uint64_t v5 = (sirinluexternal::Task **)*((void *)this + 2);
  if (v4 == v5)
  {
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = *v4++;
      v6 ^= sirinluexternal::Task::hash_value(v7);
    }
    while (v4 != v5);
  }
  uint64_t v8 = (sirinluexternal::Task **)*((void *)this + 4);
  BOOL v9 = (sirinluexternal::Task **)*((void *)this + 5);
  if (v8 == v9)
  {
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = 0;
    do
    {
      uint64_t v11 = *v8++;
      v10 ^= sirinluexternal::Task::hash_value(v11);
    }
    while (v8 != v9);
  }
  uint64_t v12 = (sirinluexternal::EntityCandidate **)*((void *)this + 7);
  uint64_t v13 = (sirinluexternal::EntityCandidate **)*((void *)this + 8);
  if (v12 == v13)
  {
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t v14 = 0;
    do
    {
      uint64_t v15 = *v12++;
      v14 ^= sirinluexternal::EntityCandidate::hash_value(v15);
    }
    while (v12 != v13);
  }
  char v17 = (sirinluexternal::SystemDialogAct **)*((void *)this + 11);
  unint64_t v16 = (sirinluexternal::SystemDialogAct **)*((void *)this + 12);
  if (v17 == v16)
  {
    uint64_t v18 = 0;
  }
  else
  {
    uint64_t v18 = 0;
    do
    {
      char v19 = *v17++;
      v18 ^= sirinluexternal::SystemDialogAct::hash_value(v19);
    }
    while (v17 != v16);
  }
  return v6 ^ v3 ^ v10 ^ v14 ^ v18;
}

uint64_t sirinluexternal::NLContext::makeSystemDialogActGroup(uint64_t this)
{
  if (!*(void *)(this + 80)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternalssu::SSURequest::formatText(sirinluinternalssu::SSURequest *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "asr_id");
  }
  if (*((void *)this + 2)) {
    PB::TextFormatter::format();
  }
  uint64_t v6 = (uint64_t *)*((void *)this + 3);
  uint64_t v7 = (uint64_t *)*((void *)this + 4);
  while (v6 != v7)
  {
    uint64_t v8 = *v6++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v8 + 32))(v8, a2, "matching_spans");
  }
  uint64_t v9 = *((void *)this + 6);
  if (v9) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v9 + 32))(v9, a2, "nlu_request_id");
  }
  uint64_t v10 = (uint64_t *)*((void *)this + 7);
  uint64_t v11 = (uint64_t *)*((void *)this + 8);
  while (v10 != v11)
  {
    uint64_t v12 = *v10++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v12 + 32))(v12, a2, "salient_entities");
  }
  if (*((void *)this + 10)) {
    PB::TextFormatter::format();
  }
  return MEMORY[0x1F4147498](a2);
}

void *sirinluinternalssu::SSURequest::writeTo(void *this, PB::Writer *a2)
{
  unint64_t v3 = this;
  if (this[10]) {
    this = (void *)PB::Writer::write();
  }
  if (v3[2]) {
    this = (void *)PB::Writer::write();
  }
  uint64_t v4 = (const PB::Base *)v3[1];
  if (v4) {
    this = (void *)PB::Writer::writeSubmessage(a2, v4);
  }
  uint64_t v5 = (const PB::Base **)v3[3];
  uint64_t v6 = (const PB::Base **)v3[4];
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    this = (void *)PB::Writer::writeSubmessage(a2, v7);
  }
  uint64_t v8 = (const PB::Base **)v3[7];
  uint64_t v9 = (const PB::Base **)v3[8];
  while (v8 != v9)
  {
    uint64_t v10 = *v8++;
    this = (void *)PB::Writer::writeSubmessage(a2, v10);
  }
  uint64_t v11 = (const PB::Base *)v3[6];
  if (v11)
  {
    return (void *)PB::Writer::writeSubmessage(a2, v11);
  }
  return this;
}

uint64_t sirinluinternalssu::SSURequest::readFrom(sirinluinternalssu::SSURequest *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_19;
        }
      }
LABEL_21:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v10 >> 3))
      {
        case 1u:
          operator new();
        case 2u:
          operator new();
        case 3u:
          operator new();
        case 4u:
          PB::PtrVector<sirinluinternal::MatchingSpan>::emplace_back<>();
        case 5u:
          PB::PtrVector<sirinluexternal::EntityCandidate>::emplace_back<>();
        case 6u:
          operator new();
        default:
          break;
      }
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_21;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_19;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluinternalssu::SSURequest::~SSURequest(sirinluinternalssu::SSURequest *this)
{
  sirinluinternalssu::SSURequest::~SSURequest(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t vars8;

  *(void *)this = &unk_1F232E508;
  unint64_t v2 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v2) {
    std::default_delete<std::string>::operator()[abi:ne180100](v2);
  }
  uint64_t v6 = (void **)((char *)this + 56);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v6);
  unint64_t v3 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v6 = (void **)((char *)this + 24);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v6);
  int v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    std::default_delete<std::string>::operator()[abi:ne180100](v4);
  }
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  PB::Base::~Base(this);
}

double sirinluinternalssu::SSURequest::SSURequest(sirinluinternalssu::SSURequest *this)
{
  *(void *)this = &unk_1F232E508;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  return result;
}

{
  double result;

  *(void *)this = &unk_1F232E508;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  return result;
}

uint64_t sirinluinternalssu::SSURequest::SSURequest(uint64_t this, const sirinluinternalssu::SSURequest *a2)
{
  *(void *)this = &unk_1F232E508;
  *(_OWORD *)(this + 8) = 0u;
  *(_OWORD *)(this + 24) = 0u;
  *(_OWORD *)(this + 56) = 0u;
  *(_OWORD *)(this + 40) = 0u;
  *(_OWORD *)(this + 72) = 0u;
  if (*((void *)a2 + 10)) {
    operator new();
  }
  if (*((void *)a2 + 2)) {
    operator new();
  }
  if (*((void *)a2 + 1)) {
    operator new();
  }
  if (*((void *)a2 + 3) != *((void *)a2 + 4)) {
    PB::PtrVector<sirinluinternal::MatchingSpan>::emplace_back<sirinluinternal::MatchingSpan const&>();
  }
  if (*((void *)a2 + 7) != *((void *)a2 + 8)) {
    PB::PtrVector<sirinluexternal::EntityCandidate>::emplace_back<sirinluexternal::EntityCandidate const&>();
  }
  if (*((void *)a2 + 6)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternalssu::SSURequest::operator=(uint64_t a1, const sirinluinternalssu::SSURequest *a2)
{
  if ((const sirinluinternalssu::SSURequest *)a1 != a2)
  {
    sirinluinternalssu::SSURequest::SSURequest((uint64_t)v9, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    long long v10 = v3;
    long long v11 = v4;
    long long v5 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v13;
    long long v6 = *(_OWORD *)(a1 + 72);
    *(_OWORD *)(a1 + 72) = v14;
    long long v13 = v5;
    long long v14 = v6;
    long long v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    long long v12 = v7;
    sirinluinternalssu::SSURequest::~SSURequest((sirinluinternalssu::SSURequest *)v9);
  }
  return a1;
}

void *sirinluinternalssu::swap(void *this, sirinluinternalssu::SSURequest *a2, sirinluinternalssu::SSURequest *a3)
{
  uint64_t v3 = this[10];
  this[10] = *((void *)a2 + 10);
  *((void *)a2 + 10) = v3;
  uint64_t v4 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v6;
  uint64_t v7 = this[4];
  this[4] = *((void *)a2 + 4);
  *((void *)a2 + 4) = v7;
  uint64_t v8 = this[5];
  this[5] = *((void *)a2 + 5);
  *((void *)a2 + 5) = v8;
  uint64_t v9 = this[7];
  this[7] = *((void *)a2 + 7);
  *((void *)a2 + 7) = v9;
  uint64_t v10 = this[8];
  this[8] = *((void *)a2 + 8);
  *((void *)a2 + 8) = v10;
  uint64_t v11 = this[9];
  this[9] = *((void *)a2 + 9);
  *((void *)a2 + 9) = v11;
  uint64_t v12 = this[6];
  this[6] = *((void *)a2 + 6);
  *((void *)a2 + 6) = v12;
  return this;
}

uint64_t sirinluinternalssu::SSURequest::SSURequest(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F232E508;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  uint64_t v5 = (void **)(a1 + 24);
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v6 = (void **)(a1 + 56);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  uint64_t v7 = *(void *)(a2 + 80);
  *(void *)(a2 + 80) = 0;
  uint64_t v8 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = v7;
  if (v8) {
    std::default_delete<std::string>::operator()[abi:ne180100](v8);
  }
  uint64_t v9 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  uint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v9;
  if (v10) {
    std::default_delete<std::string>::operator()[abi:ne180100](v10);
  }
  uint64_t v11 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v12 = *v4;
  *uint64_t v4 = v11;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(v5);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 24) = 0u;
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(v6);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  uint64_t v13 = *(void *)(a2 + 48);
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  uint64_t v14 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v13;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  return a1;
}

uint64_t sirinluinternalssu::SSURequest::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sirinluinternalssu::SSURequest::SSURequest((uint64_t)v9, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    long long v10 = v3;
    long long v11 = v4;
    long long v5 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v13;
    long long v6 = *(_OWORD *)(a1 + 72);
    *(_OWORD *)(a1 + 72) = v14;
    long long v13 = v5;
    long long v14 = v6;
    long long v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    long long v12 = v7;
    sirinluinternalssu::SSURequest::~SSURequest((sirinluinternalssu::SSURequest *)v9);
  }
  return a1;
}

uint64_t sirinluinternalssu::SSURequest::operator==(void *a1, uint64_t a2)
{
  long long v4 = (unsigned __int8 *)a1[10];
  long long v5 = *(unsigned __int8 ***)(a2 + 80);
  if (v4)
  {
    if (!v5) {
      return 0;
    }
    uint64_t v6 = v4[23];
    if ((v6 & 0x80u) == 0) {
      long long v7 = (unsigned __int8 *)v4[23];
    }
    else {
      long long v7 = (unsigned __int8 *)*((void *)v4 + 1);
    }
    uint64_t v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    int v9 = (char)v8;
    if ((char)v8 < 0) {
      uint64_t v8 = v5[1];
    }
    if (v7 != v8) {
      return 0;
    }
    if (v9 >= 0) {
      long long v10 = *(unsigned __int8 **)(a2 + 80);
    }
    else {
      long long v10 = *v5;
    }
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v10, *((void *)v4 + 1))) {
        return 0;
      }
    }
    else if (v4[23])
    {
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6) {
          goto LABEL_18;
        }
      }
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
LABEL_18:
  long long v11 = (unsigned __int8 *)a1[2];
  long long v12 = *(unsigned __int8 ***)(a2 + 16);
  if (v11)
  {
    if (!v12) {
      return 0;
    }
    uint64_t v13 = v11[23];
    if ((v13 & 0x80u) == 0) {
      long long v14 = (unsigned __int8 *)v11[23];
    }
    else {
      long long v14 = (unsigned __int8 *)*((void *)v11 + 1);
    }
    unsigned int v15 = (unsigned __int8 *)*((unsigned __int8 *)v12 + 23);
    int v16 = (char)v15;
    if ((char)v15 < 0) {
      unsigned int v15 = v12[1];
    }
    if (v14 != v15) {
      return 0;
    }
    if (v16 >= 0) {
      char v17 = *(unsigned __int8 **)(a2 + 16);
    }
    else {
      char v17 = *v12;
    }
    if ((v13 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v11, v17, *((void *)v11 + 1))) {
        return 0;
      }
    }
    else if (v11[23])
    {
      while (*v11 == *v17)
      {
        ++v11;
        ++v17;
        if (!--v13) {
          goto LABEL_35;
        }
      }
      return 0;
    }
  }
  else if (v12)
  {
    return 0;
  }
LABEL_35:
  uint64_t v18 = a1[1];
  uint64_t v19 = *(void *)(a2 + 8);
  if (!v18)
  {
    if (!v19) {
      goto LABEL_42;
    }
    return 0;
  }
  if (!v19 || !sirinluexternal::UUID::operator==(v18, v19)) {
    return 0;
  }
LABEL_42:
  uint64_t result = PB::PtrVector<sirinluinternal::MatchingSpan>::operator==(a1 + 3, *(uint64_t **)(a2 + 24), *(void *)(a2 + 32));
  if (result)
  {
    uint64_t result = PB::PtrVector<sirinluexternal::EntityCandidate>::operator==(a1 + 7, *(uint64_t **)(a2 + 56), *(void *)(a2 + 64));
    if (result)
    {
      uint64_t v21 = a1[6];
      uint64_t v22 = *(void *)(a2 + 48);
      uint64_t result = (v21 | v22) == 0;
      if (v21)
      {
        if (v22)
        {
          uint64_t v23 = a1[6];
          return sirinluexternal::RequestID::operator==(v23, v22);
        }
      }
    }
  }
  return result;
}

unint64_t sirinluinternalssu::SSURequest::hash_value(sirinluinternalssu::SSURequest *this)
{
  uint64_t v2 = *((void *)this + 10);
  if (v2) {
    unint64_t v3 = std::__string_hash<char>::operator()[abi:ne180100](v2);
  }
  else {
    unint64_t v3 = 0;
  }
  uint64_t v4 = *((void *)this + 2);
  if (v4) {
    unint64_t v5 = std::__string_hash<char>::operator()[abi:ne180100](v4);
  }
  else {
    unint64_t v5 = 0;
  }
  uint64_t v6 = *((void *)this + 1);
  if (!v6)
  {
    uint64_t v10 = 0;
    goto LABEL_17;
  }
  if ((*(unsigned char *)(v6 + 28) & 1) == 0)
  {
    uint64_t v7 = 0;
    if ((*(unsigned char *)(v6 + 28) & 2) != 0) {
      goto LABEL_10;
    }
LABEL_14:
    uint64_t v8 = 0;
    if ((*(unsigned char *)(v6 + 28) & 4) != 0) {
      goto LABEL_11;
    }
LABEL_15:
    uint64_t v9 = 0;
    goto LABEL_16;
  }
  uint64_t v7 = *(void *)(v6 + 8);
  if ((*(unsigned char *)(v6 + 28) & 2) == 0) {
    goto LABEL_14;
  }
LABEL_10:
  uint64_t v8 = *(void *)(v6 + 16);
  if ((*(unsigned char *)(v6 + 28) & 4) == 0) {
    goto LABEL_15;
  }
LABEL_11:
  uint64_t v9 = *(int *)(v6 + 24);
LABEL_16:
  uint64_t v10 = v8 ^ v7 ^ v9;
LABEL_17:
  long long v11 = (sirinluinternal::MatchingSpan **)*((void *)this + 3);
  long long v12 = (sirinluinternal::MatchingSpan **)*((void *)this + 4);
  if (v11 == v12)
  {
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v13 = 0;
    do
    {
      long long v14 = *v11++;
      v13 ^= sirinluinternal::MatchingSpan::hash_value(v14);
    }
    while (v11 != v12);
  }
  unsigned int v15 = (sirinluexternal::EntityCandidate **)*((void *)this + 7);
  int v16 = (sirinluexternal::EntityCandidate **)*((void *)this + 8);
  if (v15 == v16)
  {
    uint64_t v17 = 0;
  }
  else
  {
    uint64_t v17 = 0;
    do
    {
      uint64_t v18 = *v15++;
      v17 ^= sirinluexternal::EntityCandidate::hash_value(v18);
    }
    while (v15 != v16);
  }
  unint64_t v19 = *((void *)this + 6);
  if (v19) {
    unint64_t v19 = sirinluexternal::RequestID::hash_value((sirinluexternal::RequestID *)v19);
  }
  return v5 ^ v3 ^ v19 ^ v10 ^ v13 ^ v17;
}

uint64_t sirinluinternalssu::SSURequest::makeAsrId(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternalssu::SSURequest::makeNluRequestId(uint64_t this)
{
  if (!*(void *)(this + 48)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternal::UserStatedTask::formatText(sirinluexternal::UserStatedTask *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "task");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluexternal::UserStatedTask::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2);
  }
  return this;
}

uint64_t sirinluexternal::UserStatedTask::readFrom(sirinluexternal::UserStatedTask *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluexternal::UserStatedTask::~UserStatedTask(sirinluexternal::UserStatedTask *this)
{
  sirinluexternal::UserStatedTask::~UserStatedTask(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t vars8;

  unint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1F232E558;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

void *sirinluexternal::UserStatedTask::UserStatedTask(void *this)
{
  *this = &unk_1F232E558;
  this[1] = 0;
  return this;
}

{
  *this = &unk_1F232E558;
  this[1] = 0;
  return this;
}

void *sirinluexternal::UserStatedTask::UserStatedTask(void *this, const sirinluexternal::UserStatedTask *a2)
{
  *this = &unk_1F232E558;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const sirinluexternal::UserStatedTask *sirinluexternal::UserStatedTask::operator=(const sirinluexternal::UserStatedTask *a1, const sirinluexternal::UserStatedTask *a2)
{
  if (a1 != a2)
  {
    sirinluexternal::UserStatedTask::UserStatedTask(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    sirinluexternal::UserStatedTask::~UserStatedTask((sirinluexternal::UserStatedTask *)&v5);
  }
  return a1;
}

uint64_t sirinluexternal::swap(uint64_t this, sirinluexternal::UserStatedTask *a2, sirinluexternal::UserStatedTask *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *sirinluexternal::UserStatedTask::UserStatedTask(void *a1, uint64_t a2)
{
  *a1 = &unk_1F232E558;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_1F232E558;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t sirinluexternal::UserStatedTask::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = &unk_1F232E558;
    v6[1] = v4;
    sirinluexternal::UserStatedTask::~UserStatedTask((sirinluexternal::UserStatedTask *)v6);
  }
  return a1;
}

uint64_t sirinluexternal::UserStatedTask::operator==(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a2 + 8);
  if (v2) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    return (v2 | v3) == 0;
  }
  else {
    return sirinluexternal::UsoGraph::operator==((void *)v2, (void *)v3);
  }
}

sirinluexternal::UsoGraph *sirinluexternal::UserStatedTask::hash_value(sirinluexternal::UserStatedTask *this)
{
  uint64_t result = (sirinluexternal::UsoGraph *)*((void *)this + 1);
  if (result) {
    return (sirinluexternal::UsoGraph *)sirinluexternal::UsoGraph::hash_value(result);
  }
  return result;
}

uint64_t sirinluexternal::UserStatedTask::makeTask(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t SIRINLUINTERNALNLV4_PARSERNLv4ParserRequestReadFrom(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  BOOL v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = objc_alloc_init(SIRINLUEXTERNALUUID);
        objc_storeStrong((id *)(a1 + 40), v17);
        if PBReaderPlaceMark() && (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v17, a2)) {
          goto LABEL_45;
        }
        goto LABEL_53;
      case 2u:
        char v17 = objc_alloc_init(SIRINLUINTERNALNLV4_PARSERTokenisation);
        objc_storeStrong((id *)(a1 + 48), v17);
        if (!PBReaderPlaceMark() || !SIRINLUINTERNALNLV4_PARSERTokenisationReadFrom((uint64_t)v17, a2)) {
          goto LABEL_53;
        }
        goto LABEL_45;
      case 3u:
        char v17 = objc_alloc_init(SIRINLUINTERNALNLv4EmbeddingTensor);
        objc_storeStrong((id *)(a1 + 16), v17);
        if (!PBReaderPlaceMark()
          || (SIRINLUINTERNALNLv4EmbeddingTensorReadFrom((uint64_t)v17, a2) & 1) == 0)
        {
          goto LABEL_53;
        }
        goto LABEL_45;
      case 4u:
        char v17 = objc_alloc_init(SIRINLUINTERNALMatchingSpan);
        [(id)a1 addMatchingSpans:v17];
        if (!PBReaderPlaceMark() || (SIRINLUINTERNALMatchingSpanReadFrom((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_53;
        }
        goto LABEL_45;
      case 5u:
        char v17 = objc_alloc_init(SIRINLUEXTERNALTurnInput);
        objc_storeStrong((id *)(a1 + 56), v17);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALTurnInputReadFrom((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_53;
        }
        goto LABEL_45;
      case 6u:
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        *(unsigned char *)(a1 + 64) |= 1u;
        while (2)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              BOOL v14 = v20++ >= 9;
              if (v14)
              {
                uint64_t v21 = 0;
                goto LABEL_51;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v21 = 0;
        }
LABEL_51:
        *(void *)(a1 + 8) = v21;
        goto LABEL_46;
      case 7u:
        char v17 = objc_alloc_init(SIRINLUEXTERNALRequestID);
        objc_storeStrong((id *)(a1 + 32), v17);
        if PBReaderPlaceMark() && (SIRINLUEXTERNALRequestIDReadFrom((uint64_t)v17, a2))
        {
LABEL_45:
          PBReaderRecallMark();

LABEL_46:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_53:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_46;
    }
  }
}

uint64_t sirinluexternalnlu_router::NLRouterTurnContext::formatText(sirinluexternalnlu_router::NLRouterTurnContext *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = (uint64_t *)*((void *)this + 1);
  uint64_t v6 = (uint64_t *)*((void *)this + 2);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "active_tasks");
  }
  char v8 = (uint64_t *)*((void *)this + 4);
  unsigned int v9 = (uint64_t *)*((void *)this + 5);
  while (v8 != v9)
  {
    uint64_t v10 = *v8++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v10 + 32))(v10, a2, "executed_tasks");
  }
  uint64_t v11 = (uint64_t *)*((void *)this + 7);
  unint64_t v12 = (uint64_t *)*((void *)this + 8);
  while (v11 != v12)
  {
    uint64_t v13 = *v11++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v13 + 32))(v13, a2, "salient_entities");
  }
  BOOL v14 = (uint64_t *)*((void *)this + 10);
  int v15 = (uint64_t *)*((void *)this + 11);
  while (v14 != v15)
  {
    uint64_t v16 = *v14++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v16 + 32))(v16, a2, "system_dialog_acts");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluexternalnlu_router::NLRouterTurnContext::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v3 = (void *)this;
  BOOL v4 = *(const PB::Base ***)(this + 8);
  uint64_t v5 = *(const PB::Base ***)(this + 16);
  while (v4 != v5)
  {
    uint64_t v6 = *v4++;
    this = PB::Writer::writeSubmessage(a2, v6);
  }
  uint64_t v7 = (const PB::Base **)v3[4];
  char v8 = (const PB::Base **)v3[5];
  while (v7 != v8)
  {
    unsigned int v9 = *v7++;
    this = PB::Writer::writeSubmessage(a2, v9);
  }
  uint64_t v10 = (const PB::Base **)v3[10];
  uint64_t v11 = (const PB::Base **)v3[11];
  while (v10 != v11)
  {
    unint64_t v12 = *v10++;
    this = PB::Writer::writeSubmessage(a2, v12);
  }
  BOOL v14 = (const PB::Base **)v3[7];
  uint64_t v13 = (const PB::Base **)v3[8];
  while (v14 != v13)
  {
    int v15 = *v14++;
    this = PB::Writer::writeSubmessage(a2, v15);
  }
  return this;
}

uint64_t sirinluexternalnlu_router::NLRouterTurnContext::readFrom(sirinluexternalnlu_router::NLRouterTurnContext *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_19;
        }
      }
LABEL_21:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v10 >> 3))
      {
        case 1u:
          PB::PtrVector<sirinluexternal::Task>::emplace_back<>();
        case 2u:
          PB::PtrVector<sirinluexternal::Task>::emplace_back<>();
        case 3u:
          PB::PtrVector<sirinluexternal::SystemDialogAct>::emplace_back<>();
        case 4u:
          PB::PtrVector<sirinluexternal::EntityCandidate>::emplace_back<>();
        default:
          break;
      }
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_21;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_19;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluexternalnlu_router::NLRouterTurnContext::~NLRouterTurnContext(sirinluexternalnlu_router::NLRouterTurnContext *this)
{
  sirinluexternalnlu_router::NLRouterTurnContext::~NLRouterTurnContext(this);
  JUMPOUT(0x1CB772580);
}

{
  void **v2;
  void **v3;
  uint64_t vars8;

  *(void *)this = &unk_1F232E5A8;
  unint64_t v2 = (void **)((char *)this + 8);
  unint64_t v3 = (void **)((char *)this + 80);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v3);
  unint64_t v3 = (void **)((char *)this + 56);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v3);
  unint64_t v3 = (void **)((char *)this + 32);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v3);
  unint64_t v3 = v2;
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v3);
  PB::Base::~Base(this);
}

double sirinluexternalnlu_router::NLRouterTurnContext::NLRouterTurnContext(sirinluexternalnlu_router::NLRouterTurnContext *this)
{
  *(void *)this = &unk_1F232E5A8;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  return result;
}

{
  double result;

  *(void *)this = &unk_1F232E5A8;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  return result;
}

uint64_t sirinluexternalnlu_router::NLRouterTurnContext::NLRouterTurnContext(uint64_t this, const sirinluexternalnlu_router::NLRouterTurnContext *a2)
{
  *(void *)this = &unk_1F232E5A8;
  *(_OWORD *)(this + 8) = 0u;
  *(_OWORD *)(this + 56) = 0u;
  *(_OWORD *)(this + 24) = 0u;
  *(_OWORD *)(this + 40) = 0u;
  *(_OWORD *)(this + 72) = 0u;
  *(_OWORD *)(this + 88) = 0u;
  if (*((void *)a2 + 1) != *((void *)a2 + 2)) {
    PB::PtrVector<sirinluexternal::Task>::emplace_back<sirinluexternal::Task const&>();
  }
  if (*((void *)a2 + 4) != *((void *)a2 + 5)) {
    PB::PtrVector<sirinluexternal::Task>::emplace_back<sirinluexternal::Task const&>();
  }
  if (*((void *)a2 + 10) != *((void *)a2 + 11)) {
    PB::PtrVector<sirinluexternal::SystemDialogAct>::emplace_back<sirinluexternal::SystemDialogAct const&>();
  }
  if (*((void *)a2 + 7) != *((void *)a2 + 8)) {
    PB::PtrVector<sirinluexternal::EntityCandidate>::emplace_back<sirinluexternal::EntityCandidate const&>();
  }
  return this;
}

const sirinluexternalnlu_router::NLRouterTurnContext *sirinluexternalnlu_router::NLRouterTurnContext::operator=(const sirinluexternalnlu_router::NLRouterTurnContext *a1, const sirinluexternalnlu_router::NLRouterTurnContext *a2)
{
  if (a1 != a2)
  {
    sirinluexternalnlu_router::NLRouterTurnContext::NLRouterTurnContext((uint64_t)v5, a2);
    sirinluexternalnlu_router::swap(a1, (sirinluexternalnlu_router::NLRouterTurnContext *)v5, v3);
    sirinluexternalnlu_router::NLRouterTurnContext::~NLRouterTurnContext((sirinluexternalnlu_router::NLRouterTurnContext *)v5);
  }
  return a1;
}

void *sirinluexternalnlu_router::swap(void *this, sirinluexternalnlu_router::NLRouterTurnContext *a2, sirinluexternalnlu_router::NLRouterTurnContext *a3)
{
  uint64_t v3 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  uint64_t v4 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  uint64_t v6 = this[4];
  this[4] = *((void *)a2 + 4);
  *((void *)a2 + 4) = v6;
  uint64_t v7 = this[5];
  this[5] = *((void *)a2 + 5);
  *((void *)a2 + 5) = v7;
  uint64_t v8 = this[6];
  this[6] = *((void *)a2 + 6);
  *((void *)a2 + 6) = v8;
  uint64_t v9 = this[10];
  this[10] = *((void *)a2 + 10);
  *((void *)a2 + 10) = v9;
  uint64_t v10 = this[11];
  this[11] = *((void *)a2 + 11);
  *((void *)a2 + 11) = v10;
  uint64_t v11 = this[12];
  this[12] = *((void *)a2 + 12);
  *((void *)a2 + 12) = v11;
  uint64_t v12 = this[7];
  this[7] = *((void *)a2 + 7);
  *((void *)a2 + 7) = v12;
  uint64_t v13 = this[8];
  this[8] = *((void *)a2 + 8);
  *((void *)a2 + 8) = v13;
  uint64_t v14 = this[9];
  this[9] = *((void *)a2 + 9);
  *((void *)a2 + 9) = v14;
  return this;
}

uint64_t sirinluexternalnlu_router::NLRouterTurnContext::NLRouterTurnContext(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F232E5A8;
  uint64_t v4 = (void **)(a1 + 32);
  uint64_t v5 = (void **)(a1 + 80);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v6 = (void **)(a1 + 56);
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v7 = (_OWORD *)(a1 + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate((void **)(a1 + 8));
  *uint64_t v7 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(v4);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(v5);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(v6);
  *(_OWORD *)uint64_t v6 = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  return a1;
}

void *sirinluexternalnlu_router::NLRouterTurnContext::operator=(void *a1, uint64_t a2)
{
  if (a1 != (void *)a2)
  {
    sirinluexternalnlu_router::NLRouterTurnContext::NLRouterTurnContext((uint64_t)v5, a2);
    sirinluexternalnlu_router::swap(a1, (sirinluexternalnlu_router::NLRouterTurnContext *)v5, v3);
    sirinluexternalnlu_router::NLRouterTurnContext::~NLRouterTurnContext((sirinluexternalnlu_router::NLRouterTurnContext *)v5);
  }
  return a1;
}

uint64_t sirinluexternalnlu_router::NLRouterTurnContext::operator==(uint64_t *a1, uint64_t a2)
{
  if (!PB::PtrVector<sirinluexternal::Task>::operator==(a1 + 1, *(void ***)(a2 + 8), *(void *)(a2 + 16))
    || !PB::PtrVector<sirinluexternal::Task>::operator==(a1 + 4, *(void ***)(a2 + 32), *(void *)(a2 + 40))
    || !PB::PtrVector<sirinluexternal::SystemDialogAct>::operator==(a1 + 10, *(void ***)(a2 + 80), *(void *)(a2 + 88)))
  {
    return 0;
  }
  uint64_t v4 = *(uint64_t **)(a2 + 56);
  uint64_t v5 = *(void *)(a2 + 64);
  return PB::PtrVector<sirinluexternal::EntityCandidate>::operator==(a1 + 7, v4, v5);
}

uint64_t sirinluexternalnlu_router::NLRouterTurnContext::hash_value(sirinluexternalnlu_router::NLRouterTurnContext *this)
{
  unint64_t v2 = (sirinluexternal::Task **)*((void *)this + 1);
  uint64_t v3 = (sirinluexternal::Task **)*((void *)this + 2);
  if (v2 == v3)
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = *v2++;
      v4 ^= sirinluexternal::Task::hash_value(v5);
    }
    while (v2 != v3);
  }
  uint64_t v6 = (sirinluexternal::Task **)*((void *)this + 4);
  uint64_t v7 = (sirinluexternal::Task **)*((void *)this + 5);
  if (v6 == v7)
  {
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = *v6++;
      v8 ^= sirinluexternal::Task::hash_value(v9);
    }
    while (v6 != v7);
  }
  uint64_t v10 = (sirinluexternal::SystemDialogAct **)*((void *)this + 10);
  uint64_t v11 = (sirinluexternal::SystemDialogAct **)*((void *)this + 11);
  if (v10 == v11)
  {
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = *v10++;
      v12 ^= sirinluexternal::SystemDialogAct::hash_value(v13);
    }
    while (v10 != v11);
  }
  unsigned int v15 = (sirinluexternal::EntityCandidate **)*((void *)this + 7);
  uint64_t v14 = (sirinluexternal::EntityCandidate **)*((void *)this + 8);
  if (v15 == v14)
  {
    uint64_t v16 = 0;
  }
  else
  {
    uint64_t v16 = 0;
    do
    {
      char v17 = *v15++;
      v16 ^= sirinluexternal::EntityCandidate::hash_value(v17);
    }
    while (v15 != v14);
  }
  return v8 ^ v4 ^ v12 ^ v16;
}

uint64_t sirinluexternal::UserDialogAct::formatText(sirinluexternal::UserDialogAct *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "accepted");
  }
  uint64_t v6 = *((void *)this + 2);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, a2, "acknowledged");
  }
  uint64_t v7 = *((void *)this + 3);
  if (v7) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "alignment");
  }
  uint64_t v8 = *((void *)this + 4);
  if (v8) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v8 + 32))(v8, a2, "cancelled");
  }
  uint64_t v9 = *((void *)this + 5);
  if (v9) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v9 + 32))(v9, a2, "delegated");
  }
  uint64_t v10 = *((void *)this + 6);
  if (v10) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v10 + 32))(v10, a2, "rejected");
  }
  uint64_t v11 = *((void *)this + 7);
  if (v11) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v11 + 32))(v11, a2, "user_stated_task");
  }
  uint64_t v12 = *((void *)this + 8);
  if (v12) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v12 + 32))(v12, a2, "wanted_to_pause");
  }
  uint64_t v13 = *((void *)this + 9);
  if (v13) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v13 + 32))(v13, a2, "wanted_to_proceed");
  }
  uint64_t v14 = *((void *)this + 10);
  if (v14) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v14 + 32))(v14, a2, "wanted_to_repeat");
  }
  uint64_t v15 = *((void *)this + 11);
  if (v15) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v15 + 32))(v15, a2, "wanted_to_undo");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluexternal::UserDialogAct::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = (void *)this;
  uint64_t v4 = *(const PB::Base **)(this + 8);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  uint64_t v5 = (const PB::Base *)v3[6];
  if (v5) {
    this = PB::Writer::writeSubmessage(a2, v5);
  }
  uint64_t v6 = (const PB::Base *)v3[4];
  if (v6) {
    this = PB::Writer::writeSubmessage(a2, v6);
  }
  uint64_t v7 = (const PB::Base *)v3[10];
  if (v7) {
    this = PB::Writer::writeSubmessage(a2, v7);
  }
  uint64_t v8 = (const PB::Base *)v3[2];
  if (v8) {
    this = PB::Writer::writeSubmessage(a2, v8);
  }
  uint64_t v9 = (const PB::Base *)v3[9];
  if (v9) {
    this = PB::Writer::writeSubmessage(a2, v9);
  }
  uint64_t v10 = (const PB::Base *)v3[8];
  if (v10) {
    this = PB::Writer::writeSubmessage(a2, v10);
  }
  uint64_t v11 = (const PB::Base *)v3[5];
  if (v11) {
    this = PB::Writer::writeSubmessage(a2, v11);
  }
  uint64_t v12 = (const PB::Base *)v3[7];
  if (v12) {
    this = PB::Writer::writeSubmessage(a2, v12);
  }
  uint64_t v13 = (const PB::Base *)v3[11];
  if (v13) {
    this = PB::Writer::writeSubmessage(a2, v13);
  }
  uint64_t v14 = (const PB::Base *)v3[3];
  if (v14)
  {
    return PB::Writer::writeSubmessage(a2, v14);
  }
  return this;
}

uint64_t sirinluexternal::UserDialogAct::readFrom(sirinluexternal::UserDialogAct *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_19;
        }
      }
LABEL_21:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v10 >> 3))
      {
        case 3u:
          operator new();
        case 4u:
          operator new();
        case 5u:
        case 0xBu:
          break;
        case 6u:
          operator new();
        case 7u:
          operator new();
        case 8u:
          operator new();
        case 9u:
          operator new();
        case 0xAu:
          operator new();
        case 0xCu:
          operator new();
        case 0xDu:
          operator new();
        case 0xEu:
          operator new();
        default:
          if ((v10 >> 3) == 101) {
            operator new();
          }
          return result;
      }
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_21;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_19;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sirinluexternal::UserDialogAct::~UserDialogAct(sirinluexternal::UserDialogAct *this)
{
  sirinluexternal::UserDialogAct::~UserDialogAct(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t vars8;

  *(void *)this = &unk_1F232E5F8;
  unint64_t v2 = *((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unint64_t v3 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  char v8 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  unsigned int v9 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  unint64_t v10 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  unint64_t v11 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  char v12 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  PB::Base::~Base(this);
}

double sirinluexternal::UserDialogAct::UserDialogAct(sirinluexternal::UserDialogAct *this)
{
  *(void *)this = &unk_1F232E5F8;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((void *)this + 11) = 0;
  return result;
}

{
  double result;

  *(void *)this = &unk_1F232E5F8;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((void *)this + 11) = 0;
  return result;
}

uint64_t sirinluexternal::UserDialogAct::UserDialogAct(uint64_t this, const sirinluexternal::UserDialogAct *a2)
{
  *(void *)this = &unk_1F232E5F8;
  *(_OWORD *)(this + 8) = 0u;
  *(_OWORD *)(this + 24) = 0u;
  *(_OWORD *)(this + 40) = 0u;
  *(_OWORD *)(this + 56) = 0u;
  *(_OWORD *)(this + 72) = 0u;
  *(void *)(this + 88) = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  if (*((void *)a2 + 6)) {
    operator new();
  }
  if (*((void *)a2 + 4)) {
    operator new();
  }
  if (*((void *)a2 + 10)) {
    operator new();
  }
  if (*((void *)a2 + 2)) {
    operator new();
  }
  if (*((void *)a2 + 9)) {
    operator new();
  }
  if (*((void *)a2 + 8)) {
    operator new();
  }
  if (*((void *)a2 + 5)) {
    operator new();
  }
  if (*((void *)a2 + 7)) {
    operator new();
  }
  if (*((void *)a2 + 11)) {
    operator new();
  }
  if (*((void *)a2 + 3)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternal::UserDialogAct::operator=(uint64_t a1, const sirinluexternal::UserDialogAct *a2)
{
  if ((const sirinluexternal::UserDialogAct *)a1 != a2)
  {
    sirinluexternal::UserDialogAct::UserDialogAct((uint64_t)&v10, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v11;
    long long v11 = v3;
    long long v4 = *(_OWORD *)(a1 + 72);
    *(_OWORD *)(a1 + 72) = v15;
    long long v15 = v4;
    long long v5 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v13;
    long long v13 = v5;
    long long v6 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v14;
    long long v14 = v6;
    uint64_t v7 = *(void *)(a1 + 88);
    *(void *)(a1 + 88) = v16;
    uint64_t v16 = v7;
    long long v8 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v12;
    long long v12 = v8;
    sirinluexternal::UserDialogAct::~UserDialogAct((sirinluexternal::UserDialogAct *)&v10);
  }
  return a1;
}

void *sirinluexternal::swap(void *this, sirinluexternal::UserDialogAct *a2, sirinluexternal::UserDialogAct *a3)
{
  uint64_t v3 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  uint64_t v4 = this[6];
  this[6] = *((void *)a2 + 6);
  *((void *)a2 + 6) = v4;
  uint64_t v5 = this[4];
  this[4] = *((void *)a2 + 4);
  *((void *)a2 + 4) = v5;
  uint64_t v6 = this[10];
  this[10] = *((void *)a2 + 10);
  *((void *)a2 + 10) = v6;
  uint64_t v7 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v7;
  uint64_t v8 = this[9];
  this[9] = *((void *)a2 + 9);
  *((void *)a2 + 9) = v8;
  uint64_t v9 = this[8];
  this[8] = *((void *)a2 + 8);
  *((void *)a2 + 8) = v9;
  uint64_t v10 = this[5];
  this[5] = *((void *)a2 + 5);
  *((void *)a2 + 5) = v10;
  uint64_t v11 = this[7];
  this[7] = *((void *)a2 + 7);
  *((void *)a2 + 7) = v11;
  uint64_t v12 = this[11];
  this[11] = *((void *)a2 + 11);
  *((void *)a2 + 11) = v12;
  uint64_t v13 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v13;
  return this;
}

uint64_t sirinluexternal::UserDialogAct::UserDialogAct(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1F232E5F8;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 88) = 0;
  uint64_t v4 = a2[1];
  a2[1] = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = a2[6];
  a2[6] = 0;
  uint64_t v7 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = a2[4];
  a2[4] = 0;
  uint64_t v9 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v8;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = a2[10];
  a2[10] = 0;
  uint64_t v11 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = v10;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = a2[2];
  a2[2] = 0;
  uint64_t v13 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t v14 = a2[9];
  a2[9] = 0;
  uint64_t v15 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = v14;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  uint64_t v16 = a2[8];
  a2[8] = 0;
  uint64_t v17 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = v16;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  uint64_t v18 = a2[5];
  a2[5] = 0;
  uint64_t v19 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v18;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  uint64_t v20 = a2[7];
  a2[7] = 0;
  uint64_t v21 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v20;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  uint64_t v22 = a2[11];
  a2[11] = 0;
  uint64_t v23 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = v22;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  uint64_t v24 = a2[3];
  a2[3] = 0;
  uint64_t v25 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v24;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  return a1;
}

uint64_t sirinluexternal::UserDialogAct::operator=(uint64_t a1, void *a2)
{
  if ((void *)a1 != a2)
  {
    sirinluexternal::UserDialogAct::UserDialogAct((uint64_t)&v10, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v11;
    long long v11 = v3;
    long long v4 = *(_OWORD *)(a1 + 72);
    *(_OWORD *)(a1 + 72) = v15;
    long long v15 = v4;
    long long v5 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v13;
    long long v13 = v5;
    long long v6 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v14;
    long long v14 = v6;
    uint64_t v7 = *(void *)(a1 + 88);
    *(void *)(a1 + 88) = v16;
    uint64_t v16 = v7;
    long long v8 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v12;
    long long v12 = v8;
    sirinluexternal::UserDialogAct::~UserDialogAct((sirinluexternal::UserDialogAct *)&v10);
  }
  return a1;
}

BOOL sirinluexternal::UserDialogAct::operator==(void *a1, void *a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a2[1];
  if (v4)
  {
    if (!v5 || (sirinluexternal::UserAccepted::operator==(v4, v5) & 1) == 0) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  uint64_t v6 = a1[6];
  uint64_t v7 = a2[6];
  if (v6)
  {
    if (!v7 || (sirinluexternal::UserRejected::operator==(v6, v7) & 1) == 0) {
      return 0;
    }
  }
  else if (v7)
  {
    return 0;
  }
  uint64_t v8 = a1[4];
  uint64_t v9 = a2[4];
  if (v8)
  {
    if (!v9 || (sirinluexternal::UserCancelled::operator==(v8, v9) & 1) == 0) {
      return 0;
    }
  }
  else if (v9)
  {
    return 0;
  }
  uint64_t v10 = a1[10];
  uint64_t v11 = a2[10];
  if (v10)
  {
    if (!v11 || (sirinluexternal::UserWantedToRepeat::operator==(v10, v11) & 1) == 0) {
      return 0;
    }
  }
  else if (v11)
  {
    return 0;
  }
  uint64_t v12 = a1[2];
  uint64_t v13 = a2[2];
  if (v12)
  {
    if (!v13 || (sirinluexternal::UserAcknowledged::operator==(v12, v13) & 1) == 0) {
      return 0;
    }
  }
  else if (v13)
  {
    return 0;
  }
  uint64_t v14 = a1[9];
  uint64_t v15 = a2[9];
  if (v14)
  {
    if (!v15 || (sirinluexternal::UserWantedToProceed::operator==(v14, v15) & 1) == 0) {
      return 0;
    }
  }
  else if (v15)
  {
    return 0;
  }
  uint64_t v16 = a1[8];
  uint64_t v17 = a2[8];
  if (v16)
  {
    if (!v17 || (sirinluexternal::UserWantedToPause::operator==(v16, v17) & 1) == 0) {
      return 0;
    }
  }
  else if (v17)
  {
    return 0;
  }
  uint64_t v18 = a1[5];
  uint64_t v19 = a2[5];
  if (v18)
  {
    if (!v19 || !sirinluexternal::DelegatedUserDialogAct::operator==(v18, v19)) {
      return 0;
    }
  }
  else if (v19)
  {
    return 0;
  }
  uint64_t v20 = a1[7];
  uint64_t v21 = a2[7];
  if (v20)
  {
    if (!v21 || (sirinluexternal::UserStatedTask::operator==(v20, v21) & 1) == 0) {
      return 0;
    }
  }
  else if (v21)
  {
    return 0;
  }
  uint64_t v22 = a1[11];
  uint64_t v23 = a2[11];
  if (!v22)
  {
    if (!v23) {
      goto LABEL_49;
    }
    return 0;
  }
  if (!v23 || (sirinluexternal::UserWantedToUndo::operator==(v22, v23) & 1) == 0) {
    return 0;
  }
LABEL_49:
  uint64_t v24 = a1[3];
  uint64_t v25 = a2[3];
  BOOL result = (v24 | v25) == 0;
  if (v24 && v25)
  {
    uint64_t v27 = a1[3];
    return sirinluexternal::UtteranceAlignment::operator==(v27, v25);
  }
  return result;
}

unint64_t sirinluexternal::UserDialogAct::hash_value(sirinluexternal::UserDialogAct *this)
{
  unint64_t v2 = (sirinluexternal::UserAccepted *)*((void *)this + 1);
  if (v2) {
    unint64_t v3 = sirinluexternal::UserAccepted::hash_value(v2);
  }
  else {
    unint64_t v3 = 0;
  }
  uint64_t v4 = (sirinluexternal::UserRejected *)*((void *)this + 6);
  unint64_t v25 = v3;
  if (v4) {
    unint64_t v5 = sirinluexternal::UserRejected::hash_value(v4);
  }
  else {
    unint64_t v5 = 0;
  }
  uint64_t v6 = (sirinluexternal::UserCancelled *)*((void *)this + 4);
  if (v6) {
    unint64_t v7 = sirinluexternal::UserCancelled::hash_value(v6);
  }
  else {
    unint64_t v7 = 0;
  }
  uint64_t v8 = (sirinluexternal::UserWantedToRepeat *)*((void *)this + 10);
  if (v8) {
    unint64_t v9 = sirinluexternal::UserWantedToRepeat::hash_value(v8);
  }
  else {
    unint64_t v9 = 0;
  }
  uint64_t v10 = (sirinluexternal::UserAcknowledged *)*((void *)this + 2);
  if (v10) {
    unint64_t v11 = sirinluexternal::UserAcknowledged::hash_value(v10);
  }
  else {
    unint64_t v11 = 0;
  }
  uint64_t v12 = (sirinluexternal::UserWantedToProceed *)*((void *)this + 9);
  if (v12) {
    unint64_t v13 = sirinluexternal::UserWantedToProceed::hash_value(v12);
  }
  else {
    unint64_t v13 = 0;
  }
  uint64_t v14 = (sirinluexternal::UserWantedToPause *)*((void *)this + 8);
  if (v14) {
    unint64_t v15 = sirinluexternal::UserWantedToPause::hash_value(v14);
  }
  else {
    unint64_t v15 = 0;
  }
  uint64_t v16 = (sirinluexternal::DelegatedUserDialogAct *)*((void *)this + 5);
  if (v16) {
    unint64_t v17 = sirinluexternal::DelegatedUserDialogAct::hash_value(v16);
  }
  else {
    unint64_t v17 = 0;
  }
  uint64_t v18 = *((void *)this + 7);
  if (v18 && (uint64_t v19 = *(sirinluexternal::UsoGraph **)(v18 + 8)) != 0) {
    uint64_t v20 = sirinluexternal::UsoGraph::hash_value(v19);
  }
  else {
    uint64_t v20 = 0;
  }
  uint64_t v21 = (sirinluexternal::UserWantedToUndo *)*((void *)this + 11);
  if (v21) {
    unint64_t v22 = sirinluexternal::UserWantedToUndo::hash_value(v21);
  }
  else {
    unint64_t v22 = 0;
  }
  unint64_t v23 = *((void *)this + 3);
  if (v23) {
    unint64_t v23 = sirinluexternal::UtteranceAlignment::hash_value((sirinluexternal::UtteranceAlignment *)v23);
  }
  return v5 ^ v25 ^ v7 ^ v9 ^ v11 ^ v13 ^ v15 ^ v17 ^ v20 ^ v22 ^ v23;
}

uint64_t sirinluexternal::UserDialogAct::makeAccepted(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternal::UserDialogAct::makeRejected(uint64_t this)
{
  if (!*(void *)(this + 48)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternal::UserDialogAct::makeCancelled(uint64_t this)
{
  if (!*(void *)(this + 32)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternal::UserDialogAct::makeWantedToRepeat(uint64_t this)
{
  if (!*(void *)(this + 80)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternal::UserDialogAct::makeAcknowledged(uint64_t this)
{
  if (!*(void *)(this + 16)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternal::UserDialogAct::makeWantedToProceed(uint64_t this)
{
  if (!*(void *)(this + 72)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternal::UserDialogAct::makeWantedToPause(uint64_t this)
{
  if (!*(void *)(this + 64)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternal::UserDialogAct::makeDelegated(uint64_t this)
{
  if (!*(void *)(this + 40)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternal::UserDialogAct::makeUserStatedTask(uint64_t this)
{
  if (!*(void *)(this + 56)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternal::UserDialogAct::makeWantedToUndo(uint64_t this)
{
  if (!*(void *)(this + 88)) {
    operator new();
  }
  return this;
}

uint64_t sirinluexternal::UserDialogAct::makeAlignment(uint64_t this)
{
  if (!*(void *)(this + 24)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternal::MatchingSpan::formatText(sirinluinternal::MatchingSpan *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 80)) {
    PB::TextFormatter::format(a2, "end_token_index");
  }
  if (*((void *)this + 4)) {
    PB::TextFormatter::format();
  }
  uint64_t v5 = *((void *)this + 5);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "internal_span_data");
  }
  if (*((void *)this + 6)) {
    PB::TextFormatter::format();
  }
  uint64_t v6 = *((void *)this + 1);
  uint64_t v7 = *((void *)this + 2);
  while (v6 != v7)
  {
    v6 += 4;
    PB::TextFormatter::format(a2, "matcher_names");
  }
  if (*((void *)this + 7)) {
    PB::TextFormatter::format();
  }
  if ((*((unsigned char *)this + 80) & 2) != 0) {
    PB::TextFormatter::format(a2, "start_token_index");
  }
  uint64_t v8 = *((void *)this + 8);
  if (v8) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v8 + 32))(v8, a2, "uso_graph");
  }
  return MEMORY[0x1F4147498](a2);
}

uint64_t sirinluinternal::MatchingSpan::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if (*(void *)(this + 48)) {
    this = PB::Writer::write();
  }
  if (*(void *)(v3 + 32)) {
    this = PB::Writer::write();
  }
  char v4 = *(unsigned char *)(v3 + 80);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    char v4 = *(unsigned char *)(v3 + 80);
  }
  if (v4) {
    this = PB::Writer::writeVarInt(a2);
  }
  uint64_t v5 = *(const PB::Base **)(v3 + 64);
  if (v5) {
    this = PB::Writer::writeSubmessage(a2, v5);
  }
  uint64_t v6 = *(void *)(v3 + 8);
  uint64_t v7 = *(void *)(v3 + 16);
  while (v6 != v7)
  {
    v6 += 4;
    this = PB::Writer::writeVarInt(a2);
  }
  uint64_t v8 = *(const PB::Base **)(v3 + 40);
  if (v8) {
    this = PB::Writer::writeSubmessage(a2, v8);
  }
  if (*(void *)(v3 + 56))
  {
    return PB::Writer::write();
  }
  return this;
}

BOOL sirinluinternal::MatchingSpan::readFrom(sirinluinternal::MatchingSpan *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
      break;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v51 = v10++ > 8;
      if (v51) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      int v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        operator new();
      case 2u:
        operator new();
      case 3u:
        *((unsigned char *)this + 80) |= 2u;
        unint64_t v18 = *((void *)a2 + 1);
        unint64_t v19 = *((void *)a2 + 2);
        uint64_t v20 = *(void *)a2;
        if (v18 <= 0xFFFFFFFFFFFFFFF5 && v18 + 10 <= v19)
        {
          char v21 = 0;
          unsigned int v22 = 0;
          uint64_t v23 = 0;
          do
          {
            unint64_t v24 = v18 + 1;
            *((void *)a2 + 1) = v18 + 1;
            char v25 = *(unsigned char *)(v20 + v18);
            v23 |= (unint64_t)(v25 & 0x7F) << v21;
            if ((v25 & 0x80) == 0) {
              goto LABEL_116;
            }
            v21 += 7;
            unint64_t v18 = v24;
            BOOL v51 = v22++ > 8;
          }
          while (!v51);
LABEL_93:
          LODWORD(v23) = 0;
          goto LABEL_116;
        }
        char v56 = 0;
        unsigned int v57 = 0;
        uint64_t v23 = 0;
        if (v19 <= v18) {
          unint64_t v19 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v19 == v18)
          {
            LODWORD(v23) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v58 = v18 + 1;
            char v59 = *(unsigned char *)(v20 + v18);
            *((void *)a2 + 1) = v58;
            v23 |= (unint64_t)(v59 & 0x7F) << v56;
            if (v59 < 0)
            {
              v56 += 7;
              unint64_t v18 = v58;
              BOOL v51 = v57++ > 8;
              if (v51) {
                goto LABEL_93;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v23) = 0;
            }
          }
          break;
        }
LABEL_116:
        *((_DWORD *)this + 19) = v23;
        break;
      case 4u:
        *((unsigned char *)this + 80) |= 1u;
        unint64_t v26 = *((void *)a2 + 1);
        unint64_t v27 = *((void *)a2 + 2);
        uint64_t v28 = *(void *)a2;
        if (v26 <= 0xFFFFFFFFFFFFFFF5 && v26 + 10 <= v27)
        {
          char v29 = 0;
          unsigned int v30 = 0;
          uint64_t v31 = 0;
          do
          {
            unint64_t v32 = v26 + 1;
            *((void *)a2 + 1) = v26 + 1;
            char v33 = *(unsigned char *)(v28 + v26);
            v31 |= (unint64_t)(v33 & 0x7F) << v29;
            if ((v33 & 0x80) == 0) {
              goto LABEL_119;
            }
            v29 += 7;
            unint64_t v26 = v32;
            BOOL v51 = v30++ > 8;
          }
          while (!v51);
LABEL_100:
          LODWORD(v31) = 0;
          goto LABEL_119;
        }
        char v60 = 0;
        unsigned int v61 = 0;
        uint64_t v31 = 0;
        if (v27 <= v26) {
          unint64_t v27 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v27 == v26)
          {
            LODWORD(v31) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v62 = v26 + 1;
            char v63 = *(unsigned char *)(v28 + v26);
            *((void *)a2 + 1) = v62;
            v31 |= (unint64_t)(v63 & 0x7F) << v60;
            if (v63 < 0)
            {
              v60 += 7;
              unint64_t v26 = v62;
              BOOL v51 = v61++ > 8;
              if (v51) {
                goto LABEL_100;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v31) = 0;
            }
          }
          break;
        }
LABEL_119:
        *((_DWORD *)this + 18) = v31;
        break;
      case 5u:
        operator new();
      case 6u:
        if ((v11 & 7) == 2)
        {
          if (PB::Reader::placeMark()) {
            return 0;
          }
          if (*((void *)a2 + 1) < *((void *)a2 + 2) && !*((unsigned char *)a2 + 24))
          {
            uint64_t v34 = (char *)*((void *)this + 2);
            while (1)
            {
              unint64_t v35 = *((void *)this + 3);
              if ((unint64_t)v34 >= v35)
              {
                uint64_t v36 = (char *)*((void *)this + 1);
                uint64_t v37 = (v34 - v36) >> 2;
                unint64_t v38 = v37 + 1;
                if ((unint64_t)(v37 + 1) >> 62) {
                  goto LABEL_155;
                }
                uint64_t v39 = v35 - (void)v36;
                if (v39 >> 1 > v38) {
                  unint64_t v38 = v39 >> 1;
                }
                if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v40 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v40 = v38;
                }
                if (v40)
                {
                  unint64_t v40 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v40);
                  uint64_t v36 = (char *)*((void *)this + 1);
                  uint64_t v34 = (char *)*((void *)this + 2);
                }
                else
                {
                  uint64_t v41 = 0;
                }
                uint64_t v42 = (_DWORD *)(v40 + 4 * v37);
                *uint64_t v42 = 0;
                unint64_t v43 = (char *)(v42 + 1);
                while (v34 != v36)
                {
                  int v44 = *((_DWORD *)v34 - 1);
                  v34 -= 4;
                  *--uint64_t v42 = v44;
                }
                *((void *)this + 1) = v42;
                *((void *)this + 2) = v43;
                *((void *)this + 3) = v40 + 4 * v41;
                if (v36) {
                  operator delete(v36);
                }
                uint64_t v34 = v43;
              }
              else
              {
                *(_DWORD *)uint64_t v34 = 0;
                v34 += 4;
              }
              *((void *)this + 2) = v34;
              unint64_t v46 = *((void *)a2 + 1);
              unint64_t v45 = *((void *)a2 + 2);
              uint64_t v47 = *(void *)a2;
              char v48 = 0;
              unsigned int v49 = 0;
              uint64_t v50 = 0;
              BOOL v51 = v46 > 0xFFFFFFFFFFFFFFF5 || v46 + 10 > v45;
              if (v51) {
                break;
              }
              while (1)
              {
                unint64_t v53 = v46 + 1;
                *((void *)a2 + 1) = v46 + 1;
                char v55 = *(unsigned char *)(v47 + v46);
                v50 |= (unint64_t)(v55 & 0x7F) << v48;
                if ((v55 & 0x80) == 0) {
                  break;
                }
                v48 += 7;
                unint64_t v46 = v53;
                BOOL v51 = v49++ > 8;
                if (v51) {
                  goto LABEL_78;
                }
              }
LABEL_81:
              *((_DWORD *)v34 - 1) = v50;
              if (v53 >= v45 || *((unsigned char *)a2 + 24)) {
                goto LABEL_85;
              }
            }
            if (v45 <= v46) {
              uint64_t v52 = *((void *)a2 + 1);
            }
            else {
              uint64_t v52 = *((void *)a2 + 2);
            }
            while (v52 != v46)
            {
              unint64_t v53 = v46 + 1;
              char v54 = *(unsigned char *)(v47 + v46);
              *((void *)a2 + 1) = v53;
              v50 |= (unint64_t)(v54 & 0x7F) << v48;
              if ((v54 & 0x80) == 0)
              {
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v50) = 0;
                }
                goto LABEL_81;
              }
              v48 += 7;
              unint64_t v46 = v53;
              BOOL v51 = v49++ > 8;
              if (v51)
              {
LABEL_78:
                LODWORD(v50) = 0;
                goto LABEL_81;
              }
            }
            *((unsigned char *)a2 + 24) = 1;
            *((_DWORD *)v34 - 1) = 0;
          }
LABEL_85:
          PB::Reader::recallMark();
        }
        else
        {
          char v65 = (char *)*((void *)this + 2);
          unint64_t v64 = *((void *)this + 3);
          if ((unint64_t)v65 >= v64)
          {
            unint64_t v67 = (char *)*((void *)this + 1);
            uint64_t v68 = (v65 - v67) >> 2;
            unint64_t v69 = v68 + 1;
            if ((unint64_t)(v68 + 1) >> 62) {
LABEL_155:
            }
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            uint64_t v70 = v64 - (void)v67;
            if (v70 >> 1 > v69) {
              unint64_t v69 = v70 >> 1;
            }
            if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v71 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v71 = v69;
            }
            if (v71)
            {
              unint64_t v71 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v71);
              unint64_t v67 = (char *)*((void *)this + 1);
              char v65 = (char *)*((void *)this + 2);
            }
            else
            {
              uint64_t v72 = 0;
            }
            uint64_t v73 = (_DWORD *)(v71 + 4 * v68);
            *uint64_t v73 = 0;
            unsigned int v66 = v73 + 1;
            while (v65 != v67)
            {
              int v74 = *((_DWORD *)v65 - 1);
              v65 -= 4;
              *--uint64_t v73 = v74;
            }
            *((void *)this + 1) = v73;
            *((void *)this + 2) = v66;
            *((void *)this + 3) = v71 + 4 * v72;
            if (v67) {
              operator delete(v67);
            }
          }
          else
          {
            *(_DWORD *)char v65 = 0;
            unsigned int v66 = v65 + 4;
          }
          *((void *)this + 2) = v66;
          unint64_t v75 = *((void *)a2 + 1);
          unint64_t v76 = *((void *)a2 + 2);
          uint64_t v77 = *(void *)a2;
          char v78 = 0;
          unsigned int v79 = 0;
          if (v75 > 0xFFFFFFFFFFFFFFF5 || v75 + 10 > v76)
          {
            uint64_t v83 = 0;
            if (v76 <= v75) {
              unint64_t v76 = *((void *)a2 + 1);
            }
            while (1)
            {
              if (v76 == v75)
              {
                LODWORD(v83) = 0;
                *((unsigned char *)a2 + 24) = 1;
                goto LABEL_145;
              }
              unint64_t v81 = v75 + 1;
              char v82 = *(unsigned char *)(v77 + v75);
              *((void *)a2 + 1) = v81;
              v83 |= (unint64_t)(v82 & 0x7F) << v78;
              if ((v82 & 0x80) == 0) {
                break;
              }
              v78 += 7;
              unint64_t v75 = v81;
              BOOL v51 = v79++ > 8;
              if (v51)
              {
LABEL_141:
                LODWORD(v83) = 0;
                goto LABEL_145;
              }
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v83) = 0;
            }
          }
          else
          {
            uint64_t v83 = 0;
            while (1)
            {
              unint64_t v84 = v75 + 1;
              *((void *)a2 + 1) = v75 + 1;
              char v85 = *(unsigned char *)(v77 + v75);
              v83 |= (unint64_t)(v85 & 0x7F) << v78;
              if ((v85 & 0x80) == 0) {
                break;
              }
              v78 += 7;
              unint64_t v75 = v84;
              BOOL v51 = v79++ > 8;
              if (v51) {
                goto LABEL_141;
              }
            }
          }
LABEL_145:
          *(v66 - 1) = v83;
        }
        break;
      case 7u:
        operator new();
      case 8u:
        operator new();
      default:
        goto LABEL_19;
    }
LABEL_146:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  char v14 = 0;
  unsigned int v15 = 0;
  unint64_t v11 = 0;
  if (v2 > v3) {
    unint64_t v3 = v2;
  }
  do
  {
    if (v3 == v2)
    {
      int v4 = 1;
      *((unsigned char *)a2 + 24) = 1;
      return v4 == 0;
    }
    unint64_t v16 = v2 + 1;
    char v17 = *(unsigned char *)(v8 + v2);
    *((void *)a2 + 1) = v16;
    v11 |= (unint64_t)(v17 & 0x7F) << v14;
    if ((v17 & 0x80) == 0) {
      goto LABEL_21;
    }
    v14 += 7;
    unint64_t v2 = v16;
    BOOL v51 = v15++ > 8;
  }
  while (!v51);
LABEL_19:
  if (PB::Reader::skip(a2)) {
    goto LABEL_146;
  }
  return 0;
}

void sirinluinternal::MatchingSpan::~MatchingSpan(sirinluinternal::MatchingSpan *this)
{
  sirinluinternal::MatchingSpan::~MatchingSpan(this);
  JUMPOUT(0x1CB772580);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t vars8;

  *(void *)this = &unk_1F232E648;
  unint64_t v2 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unint64_t v3 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v3) {
    std::default_delete<std::string>::operator()[abi:ne180100](v3);
  }
  int v4 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v4) {
    std::default_delete<std::string>::operator()[abi:ne180100](v4);
  }
  uint64_t v5 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v6) {
    std::default_delete<std::string>::operator()[abi:ne180100](v6);
  }
  uint64_t v7 = (void *)*((void *)this + 1);
  if (v7)
  {
    *((void *)this + 2) = v7;
    operator delete(v7);
  }
  PB::Base::~Base(this);
}

double sirinluinternal::MatchingSpan::MatchingSpan(sirinluinternal::MatchingSpan *this)
{
  *(void *)this = &unk_1F232E648;
  *((_DWORD *)this + 20) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  return result;
}

{
  double result;

  *(void *)this = &unk_1F232E648;
  *((_DWORD *)this + 20) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  return result;
}

sirinluinternal::MatchingSpan *sirinluinternal::MatchingSpan::MatchingSpan(sirinluinternal::MatchingSpan *this, const sirinluinternal::MatchingSpan *a2)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  int v4 = (void *)((char *)this + 8);
  *(void *)this = &unk_1F232E648;
  *((_DWORD *)this + 20) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  if (*((void *)a2 + 6)) {
    operator new();
  }
  if (*((void *)a2 + 4)) {
    operator new();
  }
  char v5 = *((unsigned char *)a2 + 80);
  if ((v5 & 2) != 0)
  {
    int v6 = *((_DWORD *)a2 + 19);
    *((unsigned char *)this + 80) |= 2u;
    *((_DWORD *)this + 19) = v6;
    char v5 = *((unsigned char *)a2 + 80);
  }
  if (v5)
  {
    int v7 = *((_DWORD *)a2 + 18);
    *((unsigned char *)this + 80) |= 1u;
    *((_DWORD *)this + 18) = v7;
  }
  if (*((void *)a2 + 8)) {
    operator new();
  }
  if (this != a2)
  {
    uint64_t v8 = (char *)*((void *)a2 + 1);
    char v9 = (unsigned char *)*((void *)a2 + 2);
    size_t v10 = v9 - v8;
    unint64_t v11 = (v9 - v8) >> 2;
    uint64_t v12 = *((void *)this + 3);
    char v13 = (char *)*((void *)this + 1);
    if (v11 <= (v12 - (uint64_t)v13) >> 2)
    {
      unint64_t v16 = (void **)((char *)this + 16);
      unint64_t v18 = (unsigned char *)*((void *)this + 2);
      unint64_t v19 = (v18 - v13) >> 2;
      if (v19 < v11)
      {
        uint64_t v20 = &v8[4 * v19];
        if (v18 != v13)
        {
          memmove(*((void **)this + 1), *((const void **)a2 + 1), v18 - v13);
          char v13 = (char *)*v16;
        }
        size_t v10 = v9 - v20;
        if (v9 == v20) {
          goto LABEL_31;
        }
        char v21 = v13;
        unsigned int v22 = v20;
        goto LABEL_30;
      }
    }
    else
    {
      if (v13)
      {
        *((void *)this + 2) = v13;
        operator delete(v13);
        uint64_t v12 = 0;
        *int v4 = 0;
        v4[1] = 0;
        v4[2] = 0;
      }
      if ((v10 & 0x8000000000000000) != 0) {
        goto LABEL_37;
      }
      uint64_t v14 = v12 >> 1;
      if (v12 >> 1 <= v11) {
        uint64_t v14 = (v9 - v8) >> 2;
      }
      unint64_t v15 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v14;
      if (v15 >> 62) {
LABEL_37:
      }
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      char v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v15);
      *((void *)this + 2) = v13;
      unint64_t v16 = (void **)((char *)this + 16);
      *((void *)this + 1) = v13;
      *((void *)this + 3) = &v13[4 * v17];
    }
    if (v9 == v8)
    {
LABEL_31:
      *unint64_t v16 = &v13[v10];
      goto LABEL_32;
    }
    char v21 = v13;
    unsigned int v22 = v8;
LABEL_30:
    memmove(v21, v22, v10);
    goto LABEL_31;
  }
LABEL_32:
  if (*((void *)a2 + 5)) {
    operator new();
  }
  if (*((void *)a2 + 7)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternal::MatchingSpan::operator=(uint64_t a1, const sirinluinternal::MatchingSpan *a2)
{
  if ((const sirinluinternal::MatchingSpan *)a1 != a2)
  {
    sirinluinternal::MatchingSpan::MatchingSpan((sirinluinternal::MatchingSpan *)v10, a2);
    int v3 = *(_DWORD *)(a1 + 80);
    *(_DWORD *)(a1 + 80) = v16;
    int v16 = v3;
    uint64_t v4 = *(void *)(a1 + 72);
    *(void *)(a1 + 72) = v15;
    uint64_t v15 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v11;
    long long v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v12;
    long long v11 = v5;
    long long v12 = v6;
    long long v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v13;
    long long v8 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v14;
    long long v13 = v7;
    long long v14 = v8;
    sirinluinternal::MatchingSpan::~MatchingSpan((sirinluinternal::MatchingSpan *)v10);
  }
  return a1;
}

uint64_t sirinluinternal::swap(uint64_t this, sirinluinternal::MatchingSpan *a2, sirinluinternal::MatchingSpan *a3)
{
  int v3 = *(_DWORD *)(this + 80);
  *(_DWORD *)(this + 80) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v3;
  uint64_t v4 = *(void *)(this + 48);
  *(void *)(this + 48) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v4;
  uint64_t v5 = *(void *)(this + 32);
  *(void *)(this + 32) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v5;
  LODWORD(v5) = *(_DWORD *)(this + 76);
  *(_DWORD *)(this + 76) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v5;
  LODWORD(v5) = *(_DWORD *)(this + 72);
  *(_DWORD *)(this + 72) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v5;
  uint64_t v6 = *(void *)(this + 64);
  *(void *)(this + 64) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v6;
  uint64_t v7 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v7;
  uint64_t v8 = *(void *)(this + 16);
  *(void *)(this + 16) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v8;
  uint64_t v9 = *(void *)(this + 24);
  *(void *)(this + 24) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v9;
  uint64_t v10 = *(void *)(this + 40);
  *(void *)(this + 40) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v10;
  uint64_t v11 = *(void *)(this + 56);
  *(void *)(this + 56) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v11;
  return this;
}

uint64_t sirinluinternal::MatchingSpan::MatchingSpan(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F232E648;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v4 = a1 + 8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a2 + 80) = 0;
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  uint64_t v6 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v5;
  if (v6) {
    std::default_delete<std::string>::operator()[abi:ne180100](v6);
  }
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  uint64_t v8 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v7;
  if (v8) {
    std::default_delete<std::string>::operator()[abi:ne180100](v8);
  }
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  uint64_t v9 = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = 0;
  uint64_t v10 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = v9;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = *(void **)v4;
  if (*(void *)v4)
  {
    *(void *)(a1 + 16) = v11;
    operator delete(v11);
    *(void *)uint64_t v4 = 0;
    *(void *)(v4 + 8) = 0;
    *(void *)(v4 + 16) = 0;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  uint64_t v12 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  uint64_t v13 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v12;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t v14 = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = 0;
  uint64_t v15 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v14;
  if (v15) {
    std::default_delete<std::string>::operator()[abi:ne180100](v15);
  }
  return a1;
}

uint64_t sirinluinternal::MatchingSpan::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sirinluinternal::MatchingSpan::MatchingSpan((uint64_t)v10, a2);
    int v3 = *(_DWORD *)(a1 + 80);
    *(_DWORD *)(a1 + 80) = v16;
    int v16 = v3;
    uint64_t v4 = *(void *)(a1 + 72);
    *(void *)(a1 + 72) = v15;
    uint64_t v15 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v11;
    long long v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v12;
    long long v11 = v5;
    long long v12 = v6;
    long long v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v13;
    long long v8 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v14;
    long long v13 = v7;
    long long v14 = v8;
    sirinluinternal::MatchingSpan::~MatchingSpan((sirinluinternal::MatchingSpan *)v10);
  }
  return a1;
}

BOOL sirinluinternal::MatchingSpan::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned __int8 **)(a1 + 48);
  long long v5 = *(unsigned __int8 ***)(a2 + 48);
  if (v4)
  {
    if (!v5) {
      return 0;
    }
    uint64_t v6 = v4[23];
    if ((v6 & 0x80u) == 0) {
      long long v7 = (unsigned __int8 *)v4[23];
    }
    else {
      long long v7 = (unsigned __int8 *)*((void *)v4 + 1);
    }
    long long v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    int v9 = (char)v8;
    if ((char)v8 < 0) {
      long long v8 = v5[1];
    }
    if (v7 != v8) {
      return 0;
    }
    if (v9 >= 0) {
      uint64_t v10 = *(unsigned __int8 **)(a2 + 48);
    }
    else {
      uint64_t v10 = *v5;
    }
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v10, *((void *)v4 + 1))) {
        return 0;
      }
    }
    else if (v4[23])
    {
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6) {
          goto LABEL_18;
        }
      }
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
LABEL_18:
  long long v11 = *(unsigned __int8 **)(a1 + 32);
  long long v12 = *(unsigned __int8 ***)(a2 + 32);
  if (v11)
  {
    if (!v12) {
      return 0;
    }
    uint64_t v13 = v11[23];
    if ((v13 & 0x80u) == 0) {
      long long v14 = (unsigned __int8 *)v11[23];
    }
    else {
      long long v14 = (unsigned __int8 *)*((void *)v11 + 1);
    }
    uint64_t v15 = (unsigned __int8 *)*((unsigned __int8 *)v12 + 23);
    int v16 = (char)v15;
    if ((char)v15 < 0) {
      uint64_t v15 = v12[1];
    }
    if (v14 != v15) {
      return 0;
    }
    if (v16 >= 0) {
      uint64_t v17 = *(unsigned __int8 **)(a2 + 32);
    }
    else {
      uint64_t v17 = *v12;
    }
    if ((v13 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v11, v17, *((void *)v11 + 1))) {
        return 0;
      }
    }
    else if (v11[23])
    {
      while (*v11 == *v17)
      {
        ++v11;
        ++v17;
        if (!--v13) {
          goto LABEL_35;
        }
      }
      return 0;
    }
  }
  else if (v12)
  {
    return 0;
  }
LABEL_35:
  if ((*(unsigned char *)(a1 + 80) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 80) & 2) == 0 || *(_DWORD *)(a1 + 76) != *(_DWORD *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 80) & 2) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 80))
  {
    if ((*(unsigned char *)(a2 + 80) & 1) == 0 || *(_DWORD *)(a1 + 72) != *(_DWORD *)(a2 + 72)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 80))
  {
    return 0;
  }
  unint64_t v18 = *(void **)(a1 + 64);
  unint64_t v19 = *(void **)(a2 + 64);
  if (v18)
  {
    if (!v19 || (sirinluexternal::UsoGraph::operator==(v18, v19) & 1) == 0) {
      return 0;
    }
  }
  else if (v19)
  {
    return 0;
  }
  char v21 = *(char **)(a1 + 8);
  uint64_t v20 = *(char **)(a1 + 16);
  unsigned int v22 = *(_DWORD **)(a2 + 8);
  if (v20 - v21 != *(void *)(a2 + 16) - (void)v22) {
    return 0;
  }
  while (v21 != v20)
  {
    if (*(_DWORD *)v21 != *v22) {
      return 0;
    }
    v21 += 4;
    ++v22;
  }
  uint64_t v23 = *(void **)(a1 + 40);
  unint64_t v24 = *(void **)(a2 + 40);
  if (!v23)
  {
    if (!v24) {
      goto LABEL_61;
    }
    return 0;
  }
  if (!v24 || !sirinluinternal::InternalSpanData::operator==(v23, v24)) {
    return 0;
  }
LABEL_61:
  uint64_t v25 = *(void *)(a1 + 56);
  unint64_t v26 = *(unsigned __int8 **)(a2 + 56);
  BOOL result = (v25 | (unint64_t)v26) == 0;
  if (v25 && v26)
  {
    uint64_t v28 = *(unsigned __int8 **)(a1 + 56);
    return std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(v28, v26);
  }
  return result;
}

unint64_t sirinluinternal::MatchingSpan::hash_value(sirinluinternal::MatchingSpan *this)
{
  uint64_t v2 = *((void *)this + 6);
  if (v2) {
    unint64_t v3 = std::__string_hash<char>::operator()[abi:ne180100](v2);
  }
  else {
    unint64_t v3 = 0;
  }
  uint64_t v4 = *((void *)this + 4);
  if (v4) {
    unint64_t v5 = std::__string_hash<char>::operator()[abi:ne180100](v4);
  }
  else {
    unint64_t v5 = 0;
  }
  if ((*((unsigned char *)this + 80) & 2) != 0)
  {
    uint64_t v6 = *((unsigned int *)this + 19);
    if (*((unsigned char *)this + 80)) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v6 = 0;
    if (*((unsigned char *)this + 80))
    {
LABEL_9:
      uint64_t v7 = *((unsigned int *)this + 18);
      goto LABEL_12;
    }
  }
  uint64_t v7 = 0;
LABEL_12:
  long long v8 = (sirinluexternal::UsoGraph *)*((void *)this + 8);
  if (v8) {
    uint64_t v9 = sirinluexternal::UsoGraph::hash_value(v8);
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = PBHashBytes();
  long long v11 = (sirinluinternal::InternalSpanData *)*((void *)this + 5);
  if (v11) {
    unint64_t v12 = sirinluinternal::InternalSpanData::hash_value(v11);
  }
  else {
    unint64_t v12 = 0;
  }
  unint64_t v13 = *((void *)this + 7);
  if (v13) {
    unint64_t v13 = std::__string_hash<char>::operator()[abi:ne180100](v13);
  }
  return v5 ^ v3 ^ v6 ^ v7 ^ v9 ^ v12 ^ v13 ^ v10;
}

uint64_t sirinluinternal::MatchingSpan::makeUsoGraph(uint64_t this)
{
  if (!*(void *)(this + 64)) {
    operator new();
  }
  return this;
}

uint64_t sirinluinternal::MatchingSpan::makeInternalSpanData(uint64_t this)
{
  if (!*(void *)(this + 40)) {
    operator new();
  }
  return this;
}

void sub_1C8BCB5D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  MEMORY[0x1CB772580](v7, 0x1030C40E9F947FBLL);
  apple::aiml::flatbuffers2::FlatBufferBuilder::~FlatBufferBuilder((apple::aiml::flatbuffers2::FlatBufferBuilder *)va);
  _Unwind_Resume(a1);
}

void sub_1C8BCBA8C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C8BCBCB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8BCBD64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8BCBE80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8BCBF78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C8BCC1D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL SIRINLUINTERNALQUERYREWRITEQRRequestReadFrom(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  unint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v17 = objc_alloc_init(SIRINLUEXTERNALUUID);
        uint64_t v18 = 40;
        goto LABEL_30;
      case 2u:
        uint64_t v17 = objc_alloc_init(SIRINLUINTERNALQUERYREWRITEQRInteraction);
        [(id)a1 addInteractions:v17];
        if (!PBReaderPlaceMark()
          || (SIRINLUINTERNALQUERYREWRITEQRInteractionReadFrom((uint64_t)v17, a2) & 1) == 0)
        {
          goto LABEL_40;
        }
        goto LABEL_35;
      case 3u:
        uint64_t v17 = objc_alloc_init(SIRINLUINTERNALRewriteInteraction);
        [(id)a1 addOriginalInteractions:v17];
        if (!PBReaderPlaceMark()
          || (SIRINLUINTERNALRewriteInteractionReadFrom((uint64_t)v17, a2) & 1) == 0)
        {
          goto LABEL_40;
        }
        goto LABEL_35;
      case 4u:
        uint64_t v19 = PBReaderReadString();
        uint64_t v17 = *(SIRINLUEXTERNALUUID **)(a1 + 48);
        *(void *)(a1 + 48) = v19;
        goto LABEL_36;
      case 5u:
        uint64_t v17 = objc_alloc_init(SIRINLUEXTERNALUUID);
        uint64_t v18 = 24;
LABEL_30:
        objc_storeStrong((id *)(a1 + v18), v17);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_40;
        }
        goto LABEL_35;
      case 6u:
        uint64_t v17 = objc_alloc_init(SIRINLUEXTERNALRequestID);
        objc_storeStrong((id *)(a1 + 8), v17);
        if PBReaderPlaceMark() && (SIRINLUEXTERNALRequestIDReadFrom((uint64_t)v17, a2))
        {
LABEL_35:
          PBReaderRecallMark();
LABEL_36:

LABEL_37:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_40:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_37;
    }
  }
}

BOOL SIRINLUEXTERNALCDM_PLANNERCDMTranscriptEventReadFrom(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  unint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3) {
        break;
      }
      if (v17 == 2)
      {
        uint64_t v18 = PBReaderReadData();
        uint64_t v19 = 24;
        goto LABEL_24;
      }
      if (v17 == 1)
      {
        uint64_t v18 = PBReaderReadData();
        uint64_t v19 = 16;
LABEL_24:
        uint64_t v20 = *(void **)(a1 + v19);
        *(void *)(a1 + v19) = v18;

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_26:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v18 = PBReaderReadString();
    uint64_t v19 = 8;
    goto LABEL_24;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}