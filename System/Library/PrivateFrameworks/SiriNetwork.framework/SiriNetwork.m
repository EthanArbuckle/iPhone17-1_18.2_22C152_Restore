uint64_t ZlibDataDecompressor.init()()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  v1 = swift_slowAlloc();
  *(void *)(v0 + 16) = 0;
  *(void *)(v0 + 120) = 0;
  *(void *)(v0 + 128) = v1;
  *(_DWORD *)(v0 + 24) = 0;
  *(void *)(v0 + 32) = 0;
  *(void *)(v0 + 40) = 0;
  *(_DWORD *)(v0 + 48) = 0;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_OWORD *)(v0 + 88) = 0u;
  *(_DWORD *)(v0 + 104) = 0;
  *(void *)(v0 + 112) = 0;
  OUTLINED_FUNCTION_1();
  *(void *)(v0 + 80) = 0;
  *(void *)(v0 + 88) = 0;
  *(void *)(v0 + 96) = 0;
  v2 = inflateInit_((z_streamp)(v0 + 16), "1.2.12", 112);
  swift_endAccess();
  if (v2)
  {
    swift_release();
    return 0;
  }
  return v0;
}

uint64_t ZlibDataDecompressor.deinit()
{
  MEMORY[0x2611B3750](*(void *)(v0 + 128), -1, -1);
  OUTLINED_FUNCTION_1();
  inflateEnd((z_streamp)(v0 + 16));
  swift_endAccess();
  return v0;
}

uint64_t ZlibDataDecompressor.__deallocating_deinit()
{
  ZlibDataDecompressor.deinit();

  return MEMORY[0x270FA0228](v0, 136, 7);
}

uint64_t type metadata accessor for ZlibDataDecompressor()
{
  return self;
}

uint64_t ZlibDataDecompressor.decompressedDataForData(_:)(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 == 15) {
    return 0;
  }
  unint64_t v5 = a2 >> 62;
  uint64_t v7 = (int)a1;
  uint64_t v8 = a1 >> 32;
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v10 = a1 >> 32;
      uint64_t v11 = (int)a1;
      goto LABEL_9;
    case 2uLL:
      uint64_t v11 = *(void *)(a1 + 16);
      uint64_t v10 = *(void *)(a1 + 24);
LABEL_9:
      if (v11 == v10) {
        return 0;
      }
      outlined copy of Data._Representation(a1, a2);
      if (v5 == 2)
      {
        uint64_t v12 = *(void *)(a1 + 16);
        uint64_t v13 = *(void *)(a1 + 24);
        outlined copy of Data?(a1, a2);
        swift_retain();
        swift_retain();
        swift_retain();
        OUTLINED_FUNCTION_0(v12, v13, &v15);
        uint64_t v14 = v3;
        swift_release();
        swift_release();
      }
      else
      {
        if (v8 < (int)a1)
        {
          __break(1u);
          JUMPOUT(0x25D6D216CLL);
        }
        outlined copy of Data?(a1, a2);
        swift_retain();
        OUTLINED_FUNCTION_0(v7, v8, &v15);
        uint64_t v14 = v3;
      }
      uint64_t result = outlined consume of Data?(a1, a2);
      if (v14) {
        return result;
      }
      goto LABEL_5;
    case 3uLL:
      goto LABEL_6;
    default:
      if ((a2 & 0xFF000000000000) == 0)
      {
LABEL_6:
        outlined consume of Data?(a1, a2);
        return 0;
      }
      swift_retain();
      _ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_A13Et_sAC_p10Foundation4DataVSgTg5015_s10Foundation4h18V06InlineB0V15withB33BytesyxxSWKXEKlFxSWKXEfU_ACSg_TG5SWxsAC_pRi_zRi0_zlyAIIsgyrzo_SiTf1nnc_n021_s11SiriNetwork20ZlibH68DecompressorC012decompressedd3ForD0y10Foundation0D0VSgAHKFAHSWKXEfU_0V7Network0xhY0CAHTf1nncn_n(a1, a2 & 0xFFFFFFFFFFFFLL, v2, a1, a2, &v15);
      uint64_t result = outlined consume of Data?(a1, a2);
      if (!v3) {
LABEL_5:
      }
        uint64_t result = v15;
      break;
  }
  return result;
}

void type metadata accessor for WiFiClientType(uint64_t a1)
{
}

void type metadata accessor for CFHTTPMessageRef(uint64_t a1)
{
}

void type metadata accessor for NETSchemaNETProvider(uint64_t a1)
{
}

void type metadata accessor for nw_path_status_t(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for z_stream_s(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

void *__swift_memcpy112_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x70uLL);
}

uint64_t getEnumTagSinglePayload for z_stream_s(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 112))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      unint64_t v3 = *(void *)(a1 + 64);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for z_stream_s(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 112) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 112) = 0;
    }
    if (a2) {
      *(void *)(result + 64) = a2;
    }
  }
  return result;
}

void type metadata accessor for z_stream_s(uint64_t a1)
{
}

void type metadata accessor for CFStringRef(uint64_t a1)
{
}

void type metadata accessor for CTSubscriptionSlot(uint64_t a1)
{
}

uint64_t closure #1 in ZlibDataDecompressor.decompressedDataForData(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, long long *a3@<X8>)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  if (a1)
  {
    swift_beginAccess();
    *(void *)(a2 + 16) = a1;
  }
  unint64_t v6 = Data.count.getter();
  if ((v6 & 0x8000000000000000) != 0) {
    goto LABEL_26;
  }
  int v7 = v6;
  if (HIDWORD(v6)) {
    goto LABEL_26;
  }
  swift_beginAccess();
  *(_DWORD *)(a2 + 24) = v7;
  long long v26 = xmmword_25D7906C0;
  uint64_t v8 = *(const void **)(a2 + 128);
  while (1)
  {
    swift_beginAccess();
    *(void *)(a2 + 40) = v8;
    *(_DWORD *)(a2 + 48) = 0x2000;
    unsigned int v9 = inflate((z_streamp)(a2 + 16), 2);
    swift_endAccess();
    if (v9 > 1) {
      break;
    }
    uint64_t v10 = *(unsigned int *)(a2 + 48);
    if (v10 == 0x2000)
    {
      uint64_t v11 = 0;
      unint64_t v12 = 0xC000000000000000;
    }
    else
    {
      size_t v13 = 0x2000 - v10;
      if (v10 >> 1 >= 0xFF9)
      {
        memset(__dst, 0, sizeof(__dst));
        unsigned __int8 v25 = -(char)v10;
        memcpy(__dst, v8, v13);
        uint64_t v11 = *(void *)__dst;
        unint64_t v12 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v25 << 48);
      }
      else
      {
        type metadata accessor for __DataStorage();
        swift_allocObject();
        uint64_t v11 = v13 << 32;
        unint64_t v12 = __DataStorage.init(bytes:length:)() | 0x4000000000000000;
      }
    }
    if (*((void *)&v26 + 1) >> 60 != 15) {
      Data.append(_:)();
    }
    uint64_t result = outlined consume of Data._Representation(v11, v12);
    if (v9 || *(_DWORD *)(a2 + 48) || !*(_DWORD *)(a2 + 24))
    {
      *a3 = v26;
      return result;
    }
  }
  if (!*(void *)(a2 + 64))
  {
    __break(1u);
LABEL_26:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t v15 = String.init(cString:)();
  unint64_t v17 = v16;
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)static Logger.siriNetwork);
  swift_bridgeObjectRetain();
  v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(void *)__dst = v22;
    *(_DWORD *)uint64_t v21 = 67109378;
    swift_beginAccess();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v21 + 8) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, (uint64_t *)__dst);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_25D6CC000, v19, v20, "DataCompressor - Compression: Inflate finished with unexpected status %d %s", (uint8_t *)v21, 0x12u);
    swift_arrayDestroy();
    MEMORY[0x2611B3750](v22, -1, -1);
    MEMORY[0x2611B3750](v21, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  outlined consume of Data?(v26, *((unint64_t *)&v26 + 1));
  long long v26 = xmmword_25D7906D0;
  swift_beginAccess();
  lazy protocol witness table accessor for type DataCompressorError and conformance DataCompressorError();
  swift_allocError();
  unsigned int *v23 = v9;
  swift_willThrow();
  return outlined consume of Data?(v26, *((unint64_t *)&v26 + 1));
}

uint64_t protocol witness for DataDecompressing.decompressedDataForData(_:) in conformance ZlibDataDecompressor(uint64_t a1, unint64_t a2)
{
  return ZlibDataDecompressor.decompressedDataForData(_:)(a1, a2);
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance CTSubscriptionSlot(uint64_t a1@<X8>)
{
  CTSubscriptionSlot.init(rawValue:)();
  *(void *)a1 = v2;
  *(unsigned char *)(a1 + 8) = v3 & 1;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CTSubscriptionSlot@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = destructiveProjectEnumData for ConnectionConfigurationError(*v1);
  *a1 = result;
  return result;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CFStringRef()
{
  return _CFObject.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CFStringRef()
{
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CFStringRef()
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance WiFiClientType(int *a1, int *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CFStringRef()
{
  swift_getWitnessTable();

  return static _CFObject.== infix(_:_:)();
}

uint64_t base witness table accessor for Equatable in CFStringRef()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef);
}

_DWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance WRMLinkType@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(unsigned char *)(a2 + 4) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance WRMLinkType(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance NSComparisonResult(uint64_t *a1, uint64_t *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

uint64_t base witness table accessor for Hashable in CFStringRef()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef);
}

uint64_t lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CFStringRef(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, unint64_t a5@<X5>, long long *a6@<X8>)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v13 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result)) {
      goto LABEL_7;
    }
    v13 += a1 - result;
  }
  if (!__OFSUB__(a2, a1))
  {
    __DataStorage._length.getter();
    closure #1 in ZlibDataDecompressor.decompressedDataForData(_:)(v13, a3, a6);
    swift_release();
    return outlined consume of Data._Representation(a4, a5);
  }
  __break(1u);
LABEL_7:
  __break(1u);
  return result;
}

{
  uint64_t result;
  uint64_t v13;

  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v13 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result)) {
      goto LABEL_7;
    }
    v13 += a1 - result;
  }
  if (!__OFSUB__(a2, a1))
  {
    __DataStorage._length.getter();
    closure #1 in ZlibDataCompressor.compressedDataForData(_:)(v13, a3, a6);
    swift_release();
    return outlined consume of Data._Representation(a4, a5);
  }
  __break(1u);
LABEL_7:
  __break(1u);
  return result;
}

uint64_t outlined copy of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined copy of Data._Representation(a1, a2);
  }
  return a1;
}

uint64_t outlined consume of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined consume of Data._Representation(a1, a2);
  }
  return a1;
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t _ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_A13Et_sAC_p10Foundation4DataVSgTg5015_s10Foundation4h18V06InlineB0V15withB33BytesyxxSWKXEKlFxSWKXEfU_ACSg_TG5SWxsAC_pRi_zRi0_zlyAIIsgyrzo_SiTf1nnc_n021_s11SiriNetwork20ZlibH68DecompressorC012decompressedd3ForD0y10Foundation0D0VSgAHKFAHSWKXEfU_0V7Network0xhY0CAHTf1nncn_n@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, unint64_t a5@<X5>, long long *a6@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v9 = a1;
  __int16 v10 = a2;
  char v11 = BYTE2(a2);
  char v12 = BYTE3(a2);
  char v13 = BYTE4(a2);
  char v14 = BYTE5(a2);
  closure #1 in ZlibDataDecompressor.decompressedDataForData(_:)((uint64_t)&v9, a3, a6);
  swift_release();
  return outlined consume of Data._Representation(a4, a5);
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

unint64_t lazy protocol witness table accessor for type DataCompressorError and conformance DataCompressorError()
{
  unint64_t result = lazy protocol witness table cache variable for type DataCompressorError and conformance DataCompressorError;
  if (!lazy protocol witness table cache variable for type DataCompressorError and conformance DataCompressorError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DataCompressorError and conformance DataCompressorError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DataCompressorError and conformance DataCompressorError;
  if (!lazy protocol witness table cache variable for type DataCompressorError and conformance DataCompressorError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DataCompressorError and conformance DataCompressorError);
  }
  return result;
}

void *__swift_memcpy408_4(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x198uLL);
}

uint64_t getEnumTagSinglePayload for tcp_info(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 408)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for tcp_info(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 408) = v3;
  return result;
}

void type metadata accessor for tcp_info(uint64_t a1)
{
}

void type metadata accessor for CFDataRef(uint64_t a1)
{
}

void type metadata accessor for WRMLinkType(uint64_t a1)
{
}

void type metadata accessor for WRMApplicationType(uint64_t a1)
{
}

void type metadata accessor for tcp_conn_status(uint64_t a1)
{
}

void type metadata accessor for tcp_conn_status.__Unnamed_union___Anonymous_field0(uint64_t a1)
{
}

void type metadata accessor for WiFiClientType(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t OUTLINED_FUNCTION_0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X8>)
{
  return specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(a1, a2, v3, v4, v5, a3);
}

uint64_t OUTLINED_FUNCTION_1()
{
  return swift_beginAccess();
}

uint64_t ConnectionInterfaceReport.init(interface:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  v24 = a2;
  uint64_t v3 = type metadata accessor for NWInterface();
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for NWInterface.InterfaceType();
  OUTLINED_FUNCTION_0_0();
  uint64_t v11 = v10;
  MEMORY[0x270FA5388](v12);
  char v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s11SiriNetwork24ConnectionTCPInfoMetricsVSgWOi0_(v35);
  v23 = v34;
  outlined init with take of ConnectionTCPInfoMetrics?((uint64_t)v35, (uint64_t)v34);
  uint64_t v15 = NWInterface.name.getter();
  uint64_t v17 = v16;
  *(void *)&long long v31 = v15;
  *((void *)&v31 + 1) = v16;
  *(void *)&v27[0] = 0;
  *((void *)&v27[0] + 1) = 0xE000000000000000;
  swift_bridgeObjectRetain();
  NWInterface.type.getter();
  _print_unlocked<A, B>(_:_:)();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v9);
  long long v18 = v27[0];
  long long v32 = v27[0];
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v3);
  swift_bridgeObjectRetain();
  ConnectionType.init(fromInterface:)((char *)v27);
  char v19 = v27[0];
  char v33 = v27[0];
  unint64_t v20 = NWInterface.index.getter();
  if ((v20 & 0x8000000000000000) != 0 || (int v21 = v20, HIDWORD(v20)))
  {
    OUTLINED_FUNCTION_1_0();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v3);
    outlined init with take of ConnectionTCPInfoMetrics?((uint64_t)v23, (uint64_t)v25);
    outlined release of ConnectionTCPInfoMetrics?(v25);
    *(void *)long long v26 = v15;
    *(void *)&v26[8] = v17;
    *(_OWORD *)&v26[16] = v18;
    v26[32] = v19;
    *(_DWORD *)&v26[36] = v21;
    outlined init with take of ConnectionTCPInfoMetrics?((uint64_t)v35, (uint64_t)&v26[40]);
    outlined retain of ConnectionInterfaceReport((uint64_t)v26);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    memcpy(v24, v26, 0x121uLL);
    v27[0] = v31;
    v27[1] = v32;
    char v28 = v33;
    int v29 = v21;
    outlined init with take of ConnectionTCPInfoMetrics?((uint64_t)v35, (uint64_t)&v30);
    return outlined release of ConnectionInterfaceReport((uint64_t)v27);
  }
  return result;
}

void _s11SiriNetwork24ConnectionTCPInfoMetricsVSgWOi0_(_OWORD *a1)
{
  *a1 = xmmword_25D790AD0;
  bzero(a1 + 1, 0xE9uLL);
}

uint64_t outlined init with take of ConnectionTCPInfoMetrics?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConnectionTCPInfoMetrics?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t *outlined release of ConnectionTCPInfoMetrics?(uint64_t *a1)
{
  return a1;
}

uint64_t outlined consume of ConnectionTCPInfoMetrics?(uint64_t a1, uint64_t a2)
{
  if (a2 != 1)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined retain of ConnectionInterfaceReport(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of ConnectionTCPInfoMetrics?(v4, v3);
  return a1;
}

uint64_t outlined copy of ConnectionTCPInfoMetrics?(uint64_t a1, uint64_t a2)
{
  if (a2 != 1)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined release of ConnectionInterfaceReport(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of ConnectionTCPInfoMetrics?(v4, v3);
  return a1;
}

void NetworkManager.dataServiceDescriptor.setter(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR___SNNetworkManagerInternal_dataServiceDescriptor);
  *(void *)(v1 + OBJC_IVAR___SNNetworkManagerInternal_dataServiceDescriptor) = a1;
}

uint64_t NetworkManager.subscriptionSlotOneStatus.setter(uint64_t a1, uint64_t a2)
{
  return NetworkManager.subscriptionSlotOneStatus.setter(a1, a2, &OBJC_IVAR___SNNetworkManagerInternal_subscriptionSlotOneStatus);
}

uint64_t NetworkManager.subscriptionSlotTwoStatus.setter(uint64_t a1, uint64_t a2)
{
  return NetworkManager.subscriptionSlotOneStatus.setter(a1, a2, &OBJC_IVAR___SNNetworkManagerInternal_subscriptionSlotTwoStatus);
}

uint64_t NetworkManager.carrierName.setter(uint64_t a1, uint64_t a2)
{
  return NetworkManager.subscriptionSlotOneStatus.setter(a1, a2, &OBJC_IVAR___SNNetworkManagerInternal_carrierName);
}

uint64_t NetworkManager.subscriptionSlotOneStatus.setter(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = (void *)(v3 + *a3);
  *uint64_t v4 = a1;
  v4[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t NetworkManager.pathEvaluator.setter(uint64_t a1)
{
  *(void *)(v1 + OBJC_IVAR___SNNetworkManagerInternal_pathEvaluator) = a1;
  return swift_unknownObjectRelease();
}

char *one-time initialization function for shared()
{
  id v0 = objc_allocWithZone((Class)type metadata accessor for NetworkManager());
  uint64_t result = NetworkManager.init(coreTelephonyClient:queue:)(0, 0);
  static NetworkManager.shared = (uint64_t)result;
  return result;
}

id static NetworkManager.shared.getter()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  id v0 = (void *)static NetworkManager.shared;

  return v0;
}

char *NetworkManager.init(coreTelephonyClient:queue:)(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v39 = *(void *)(v4 - 8);
  uint64_t v40 = v4;
  MEMORY[0x270FA5388]();
  OUTLINED_FUNCTION_0_1();
  uint64_t v7 = v6 - v5;
  type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x270FA5388]();
  OUTLINED_FUNCTION_0_1();
  type metadata accessor for DispatchQoS();
  MEMORY[0x270FA5388]();
  OUTLINED_FUNCTION_0_1();
  uint64_t v8 = OBJC_IVAR___SNNetworkManagerInternal_lock;
  id v9 = objc_allocWithZone(MEMORY[0x263F08958]);
  uint64_t v10 = v2;
  *(void *)&v2[v8] = objc_msgSend(v9, sel_init);
  *(void *)&v10[OBJC_IVAR___SNNetworkManagerInternal_observers] = MEMORY[0x263F8EE88];
  *(void *)&v10[OBJC_IVAR___SNNetworkManagerInternal_dataServiceDescriptor] = 0;
  *(void *)&v10[OBJC_IVAR___SNNetworkManagerInternal_lastDataSubscriptionSlot] = 0;
  uint64_t v11 = &v10[OBJC_IVAR___SNNetworkManagerInternal_subscriptionSlotOneStatus];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  uint64_t v12 = &v10[OBJC_IVAR___SNNetworkManagerInternal_subscriptionSlotTwoStatus];
  *(void *)uint64_t v12 = 0;
  *((void *)v12 + 1) = 0;
  uint64_t v13 = &v10[OBJC_IVAR___SNNetworkManagerInternal_lastSuccessfulSymptomsFetch];
  *(void *)uint64_t v13 = 0;
  v13[8] = 1;
  v10[OBJC_IVAR___SNNetworkManagerInternal_lastFetchInProgress] = 0;
  char v14 = &v10[OBJC_IVAR___SNNetworkManagerInternal_lastSignalStrength];
  *(void *)char v14 = 0;
  v14[8] = 1;
  uint64_t v15 = &v10[OBJC_IVAR___SNNetworkManagerInternal_subscriptionCount];
  *(void *)uint64_t v15 = 0;
  v15[8] = 1;
  uint64_t v16 = &v10[OBJC_IVAR___SNNetworkManagerInternal_carrierName];
  *(void *)uint64_t v16 = 0;
  *((void *)v16 + 1) = 0;
  *(void *)&v10[OBJC_IVAR___SNNetworkManagerInternal_pathEvaluator] = 0;
  *(_DWORD *)&v10[OBJC_IVAR___SNNetworkManagerInternal_pathStatus] = 0;
  v10[OBJC_IVAR___SNNetworkManagerInternal_pathUsesCellular] = 0;
  uint64_t v17 = OBJC_IVAR___SNNetworkManagerInternal_networkWiFiManager;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  long long v18 = (void *)static NetworkWiFiManager.shared;
  *(void *)&v10[v17] = static NetworkWiFiManager.shared;
  uint64_t v19 = OBJC_IVAR___SNNetworkManagerInternal_lastTimeSymptomsFetch;
  unint64_t v20 = self;
  id v21 = v18;
  id v22 = objc_msgSend(v20, sel_processInfo);
  objc_msgSend(v22, sel_systemUptime);
  double v24 = v23;

  *(double *)&v10[v19] = v24 + -90.0;
  *(_DWORD *)&v10[OBJC_IVAR___SNNetworkManagerInternal_connectionQualityReport] = 50529027;
  uint64_t v25 = OBJC_IVAR___SNNetworkManagerInternal_lockConnectionQuality;
  *(void *)&v10[v25] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08958]), sel_init);
  if (a2)
  {
    uint64_t v26 = (uint64_t)a2;
  }
  else
  {
    type metadata accessor for OS_dispatch_queue();
    static DispatchQoS.unspecified.getter();
    uint64_t v43 = MEMORY[0x263F8EE78];
    lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
    lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    (*(void (**)(uint64_t, void, uint64_t))(v39 + 104))(v7, *MEMORY[0x263F8F130], v40);
    uint64_t v26 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  }
  uint64_t v27 = OBJC_IVAR___SNNetworkManagerInternal_queue;
  *(void *)&v10[OBJC_IVAR___SNNetworkManagerInternal_queue] = v26;
  if (a1)
  {
    id v28 = a2;
    id v29 = a1;
  }
  else
  {
    id v30 = objc_allocWithZone(MEMORY[0x263F02D30]);
    id v28 = a2;
    id v29 = objc_msgSend(v30, sel_initWithQueue_, v26);
  }
  *(void *)&v10[OBJC_IVAR___SNNetworkManagerInternal_coreTelephonyClient] = v29;
  long long v31 = *(void **)&v10[v27];
  type metadata accessor for NetworkWirelessCoexManager();
  swift_allocObject();
  id v32 = a1;
  id v33 = v31;
  NetworkWirelessCoexManager.init(queue:)();
  *(void *)&v10[OBJC_IVAR___SNNetworkManagerInternal_networkWirelessCoexManager] = v34;

  v42.receiver = v10;
  v42.super_class = (Class)type metadata accessor for NetworkManager();
  v35 = (char *)objc_msgSendSuper2(&v42, (SEL)&selRef_rttSmoothed);
  v36 = *(void **)&v35[OBJC_IVAR___SNNetworkManagerInternal_coreTelephonyClient];
  v37 = v35;
  objc_msgSend(v36, sel_setDelegate_, v37);
  NetworkManager.dataSubscriptionContextUpdate()();
  NetworkManager.dataServiceDescriptorUpdate()();
  NetworkManager.serviceSubscriptionInfoUpdate()();
  NetworkManager.signalStrengthUpdate()();

  return v37;
}

id NetworkManager.__deallocating_deinit()
{
  uint64_t v1 = v0;
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.siriNetwork);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_25D6CC000, v3, v4, "NetworkManager deinit", v5, 2u);
    MEMORY[0x2611B3750](v5, -1, -1);
  }

  if (*(void *)&v1[OBJC_IVAR___SNNetworkManagerInternal_pathEvaluator]) {
    nw_path_evaluator_cancel();
  }
  objc_msgSend(*(id *)&v1[OBJC_IVAR___SNNetworkManagerInternal_coreTelephonyClient], sel_setDelegate_, 0);
  v7.receiver = v1;
  v7.super_class = (Class)type metadata accessor for NetworkManager();
  return objc_msgSendSuper2(&v7, sel_dealloc);
}

id NetworkManager.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void NetworkManager.init()()
{
}

uint64_t type metadata accessor for NetworkManager()
{
  return self;
}

uint64_t serialize(_:at:)(uint64_t result, unsigned char **a2)
{
  uint64_t v2 = *a2;
  *uint64_t v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t method lookup function for NetworkManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for NetworkManager);
}

unint64_t type metadata accessor for OS_dispatch_queue()
{
  unint64_t result = lazy cache variable for type metadata for OS_dispatch_queue;
  if (!lazy cache variable for type metadata for OS_dispatch_queue)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes()
{
  unint64_t result = lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes;
  if (!lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes)
  {
    type metadata accessor for OS_dispatch_queue.Attributes();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A];
  if (!lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A]);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t one-time initialization function for errorDomain()
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static ConnectionConfigurationError.errorDomain = result;
  qword_26A692568 = v1;
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static AceSerializationError.errorDomain = result;
  qword_26A692588 = v1;
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static DataCompressorError.errorDomain = result;
  qword_26A6925A8 = v1;
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static BackgroundConnectionError.errorDomain = result;
  qword_26A693030 = v1;
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static NetworkConnectionError.errorDomain = result;
  qword_26A693108 = v1;
  return result;
}

uint64_t static ConnectionConfigurationError.errorDomain.getter()
{
  if (one-time initialization token for errorDomain != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v0 = static ConnectionConfigurationError.errorDomain;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t static ConnectionConfigurationError.errorDomain.setter(uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for errorDomain != -1) {
    swift_once();
  }
  swift_beginAccess();
  static ConnectionConfigurationError.errorDomain = a1;
  qword_26A692568 = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*static ConnectionConfigurationError.errorDomain.modify())()
{
  if (one-time initialization token for errorDomain != -1) {
    swift_once();
  }
  swift_beginAccess();
  return static ConnectionConfigurationError.errorDomain.modify;
}

uint64_t ConnectionConfigurationError.errorCode.getter()
{
  return *v0;
}

BOOL static ConnectionConfigurationError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void ConnectionConfigurationError.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int ConnectionConfigurationError.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ConnectionConfigurationError()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type ConnectionConfigurationError and conformance ConnectionConfigurationError()
{
  unint64_t result = lazy protocol witness table cache variable for type ConnectionConfigurationError and conformance ConnectionConfigurationError;
  if (!lazy protocol witness table cache variable for type ConnectionConfigurationError and conformance ConnectionConfigurationError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConnectionConfigurationError and conformance ConnectionConfigurationError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ConnectionConfigurationError and conformance ConnectionConfigurationError;
  if (!lazy protocol witness table cache variable for type ConnectionConfigurationError and conformance ConnectionConfigurationError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConnectionConfigurationError and conformance ConnectionConfigurationError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ConnectionConfigurationError and conformance ConnectionConfigurationError;
  if (!lazy protocol witness table cache variable for type ConnectionConfigurationError and conformance ConnectionConfigurationError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConnectionConfigurationError and conformance ConnectionConfigurationError);
  }
  return result;
}

uint64_t protocol witness for Error._domain.getter in conformance ConnectionConfigurationError(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ConnectionConfigurationError and conformance ConnectionConfigurationError();

  return MEMORY[0x270EF2670](a1, v2);
}

uint64_t protocol witness for Error._code.getter in conformance ConnectionConfigurationError(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ConnectionConfigurationError and conformance ConnectionConfigurationError();

  return MEMORY[0x270EF2668](a1, v2);
}

uint64_t protocol witness for Error._userInfo.getter in conformance ConnectionConfigurationError()
{
  return MEMORY[0x270F9FB48]();
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance ConnectionConfigurationError()
{
  return MEMORY[0x270F9FB30]();
}

uint64_t protocol witness for CustomNSError.errorUserInfo.getter in conformance ConnectionConfigurationError()
{
  return MEMORY[0x270EEE440]();
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for ConnectionConfigurationError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 1) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v5 = v6 - 2;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for ConnectionConfigurationError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25D6D469CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t getEnumTag for ConnectionConfigurationError(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *destructiveInjectEnumTag for ConnectionConfigurationError(unsigned char *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ConnectionConfigurationError()
{
  return &type metadata for ConnectionConfigurationError;
}

Swift::Void __swiftcall NetworkManager.registerClient()()
{
}

uint64_t sub_25D6D4758()
{
  swift_unknownObjectWeakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for closure #1 in NetworkManager.registerClient()()
{
  return closure #1 in NetworkManager.registerClient()(v0, (void (*)(uint64_t))NetworkWirelessCoexManager.registerClient());
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable () -> ()(uint64_t a1)
{
  Swift::UInt v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags()
{
  unint64_t result = lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags;
  if (!lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags)
  {
    type metadata accessor for DispatchWorkItemFlags();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A];
  if (!lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A]);
  }
  return result;
}

Swift::Void __swiftcall NetworkManager.unregisterClient()()
{
}

uint64_t partial apply for closure #1 in NetworkManager.unregisterClient()()
{
  return closure #1 in NetworkManager.registerClient()(v0, (void (*)(uint64_t))NetworkWirelessCoexManager.unregisterClient());
}

Swift::Void __swiftcall NetworkManager.resetLinkRecommendationInfo()()
{
}

uint64_t NetworkManager.registerClient()(uint64_t a1, uint64_t a2)
{
  type metadata accessor for DispatchWorkItemFlags();
  OUTLINED_FUNCTION_0_0();
  ((void (*)(void))MEMORY[0x270FA5388])();
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_2();
  uint64_t v8 = *(void **)(v2 + OBJC_IVAR___SNNetworkManagerInternal_queue);
  uint64_t v9 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = a1;
  aBlock[5] = v9;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = a2;
  uint64_t v10 = _Block_copy(aBlock);
  id v11 = v8;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2611B24E0](0, v4, v3, v10);
  _Block_release(v10);

  uint64_t v12 = OUTLINED_FUNCTION_6();
  v13(v12);
  uint64_t v14 = OUTLINED_FUNCTION_3();
  v15(v14);
  swift_release();
  return swift_release();
}

uint64_t closure #1 in NetworkManager.registerClient()(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess();
  uint64_t result = MEMORY[0x2611B37F0](v3);
  if (result)
  {
    uint64_t v5 = (void *)result;
    uint64_t v6 = swift_retain();
    a2(v6);

    return swift_release();
  }
  return result;
}

uint64_t partial apply for closure #1 in NetworkManager.resetLinkRecommendationInfo()()
{
  return closure #1 in NetworkManager.registerClient()(v0, (void (*)(uint64_t))NetworkWirelessCoexManager.resetLinkRecommendationInfo());
}

uint64_t NetworkManager.getSNProximityLinkRecommendation(retry:completion:)(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a2;
  *(void *)(v6 + 24) = a3;
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed LinkRecommendationInfo?) -> ())?(a2);
  NetworkManager.getProximityLinkRecommendation(retry:_:)(a1, (uint64_t)partial apply for closure #1 in NetworkManager.getSNProximityLinkRecommendation(retry:completion:), v6);

  return swift_release();
}

uint64_t NetworkManager.getProximityLinkRecommendation(retry:_:)(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  type metadata accessor for DispatchWorkItemFlags();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_2();
  uint64_t v9 = *(void **)(v4 + OBJC_IVAR___SNNetworkManagerInternal_queue);
  uint64_t v10 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v10;
  *(unsigned char *)(v11 + 24) = a1;
  *(void *)(v11 + 32) = a2;
  *(void *)(v11 + 40) = a3;
  aBlock[4] = partial apply for closure #1 in NetworkManager.getProximityLinkRecommendation(retry:_:);
  aBlock[5] = v11;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_18;
  uint64_t v12 = _Block_copy(aBlock);
  id v13 = v9;
  swift_retain();
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed LinkRecommendationInfo?) -> ())?(a2);
  static DispatchQoS.unspecified.getter();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_5();
  _Block_release(v12);

  uint64_t v14 = OUTLINED_FUNCTION_6();
  v15(v14);
  uint64_t v16 = OUTLINED_FUNCTION_3();
  v17(v16);
  swift_release();
  return swift_release();
}

uint64_t closure #1 in NetworkManager.getProximityLinkRecommendation(retry:_:)(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t result = MEMORY[0x2611B37F0](v1);
  if (result)
  {
    uint64_t v3 = (void *)result;
    swift_retain();
    NetworkWirelessCoexManager.getProximityLinkRecommendation(retry:_:)();

    return swift_release();
  }
  return result;
}

uint64_t sub_25D6D50A8()
{
  swift_release();
  if (*(void *)(v0 + 32)) {
    swift_release();
  }

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t partial apply for closure #1 in NetworkManager.getProximityLinkRecommendation(retry:_:)()
{
  return closure #1 in NetworkManager.getProximityLinkRecommendation(retry:_:)(*(void *)(v0 + 16));
}

uint64_t outlined copy of (@escaping @callee_guaranteed (@in_guaranteed LinkRecommendationInfo?) -> ())?(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t NetworkManager.getSNLinkRecommendationMetrics(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed LinkRecommendationInfo?) -> ())?(a1);
  NetworkManager.getLinkRecommendationMetrics(_:)((uint64_t)partial apply for closure #1 in NetworkManager.getSNLinkRecommendationMetrics(_:), v4);

  return swift_release();
}

void closure #1 in NetworkManager.getSNProximityLinkRecommendation(retry:completion:)(void *a1, void (*a2)(void))
{
  if (a2)
  {
    if (*a1 == 2) {
      uint64_t v3 = 0;
    }
    else {
      LinkRecommendationInfo.snLinkRecommendationInfo()((SNLinkRecommendationInfo *)((*a1 >> 8) & 1));
    }
    id v4 = v3;
    a2();
  }
}

uint64_t objectdestroy_10Tm()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }

  return MEMORY[0x270FA0238](v0, 32, 7);
}

void partial apply for closure #1 in NetworkManager.getSNLinkRecommendationMetrics(_:)(void *a1)
{
  closure #1 in NetworkManager.getSNProximityLinkRecommendation(retry:completion:)(a1, *(void (**)(void))(v1 + 16));
}

uint64_t NetworkManager.getLinkRecommendationMetrics(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  OUTLINED_FUNCTION_0_0();
  uint64_t v18 = v7;
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_2();
  uint64_t v10 = *(void **)(v2 + OBJC_IVAR___SNNetworkManagerInternal_queue);
  uint64_t v11 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = v11;
  v12[3] = a1;
  v12[4] = a2;
  aBlock[4] = partial apply for closure #1 in NetworkManager.getLinkRecommendationMetrics(_:);
  aBlock[5] = v12;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_28;
  id v13 = _Block_copy(aBlock);
  id v14 = v10;
  swift_retain();
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed LinkRecommendationInfo?) -> ())?(a1);
  static DispatchQoS.unspecified.getter();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_5();
  _Block_release(v13);

  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v3, v6);
  uint64_t v15 = OUTLINED_FUNCTION_3();
  v16(v15);
  swift_release();
  return swift_release();
}

uint64_t closure #1 in NetworkManager.getLinkRecommendationMetrics(_:)(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t result = MEMORY[0x2611B37F0](v1);
  if (result)
  {
    uint64_t v3 = (void *)result;
    swift_retain();
    NetworkWirelessCoexManager.getLinkRecommendationMetrics(_:)();

    return swift_release();
  }
  return result;
}

uint64_t sub_25D6D5624()
{
  swift_release();
  if (*(void *)(v0 + 24)) {
    swift_release();
  }

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t partial apply for closure #1 in NetworkManager.getLinkRecommendationMetrics(_:)()
{
  return closure #1 in NetworkManager.getLinkRecommendationMetrics(_:)(*(void *)(v0 + 16));
}

uint64_t outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_25D6D5688()
{
  _Block_release(*(const void **)(v0 + 16));

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned SNLinkRecommendationInfo?) -> ()()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t OUTLINED_FUNCTION_1_1()
{
  return type metadata accessor for DispatchQoS();
}

uint64_t OUTLINED_FUNCTION_3()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_4()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

void OUTLINED_FUNCTION_5()
{
  JUMPOUT(0x2611B24E0);
}

uint64_t OUTLINED_FUNCTION_6()
{
  return v0;
}

uint64_t static AceSerializationError.errorDomain.getter()
{
  if (one-time initialization token for errorDomain != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v0 = static AceSerializationError.errorDomain;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t static AceSerializationError.errorDomain.setter(uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for errorDomain != -1) {
    swift_once();
  }
  swift_beginAccess();
  static AceSerializationError.errorDomain = a1;
  qword_26A692588 = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*static AceSerializationError.errorDomain.modify())()
{
  if (one-time initialization token for errorDomain != -1) {
    swift_once();
  }
  swift_beginAccess();
  return static ConnectionConfigurationError.errorDomain.modify;
}

uint64_t AceSerializationError.errorCode.getter()
{
  uint64_t result = 1;
  switch(*(unsigned char *)(v0 + 16))
  {
    case 1:
      uint64_t result = 4;
      break;
    case 2:
      uint64_t result = 5;
      break;
    case 3:
      uint64_t result = qword_25D790D38[*(void *)v0];
      break;
    default:
      return result;
  }
  return result;
}

uint64_t AceSerializationError.errorUserInfo.getter()
{
  uint64_t v2 = *(void *)v0;
  unint64_t v1 = *(void *)(v0 + 8);
  int v3 = *(unsigned __int8 *)(v0 + 16);
  if (v3 == 2)
  {
    if (v1 >> 60 == 15) {
      goto LABEL_8;
    }
LABEL_11:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_25D790C50;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v10;
    *(void *)(inited + 72) = MEMORY[0x263F06F78];
    *(void *)(inited + 48) = v2;
    *(void *)(inited + 56) = v1;
    outlined copy of Data?(v2, v1);
    return Dictionary.init(dictionaryLiteral:)();
  }
  if (v3 == 1)
  {
    if (v1 >> 60 == 15) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
  if (!*(unsigned char *)(v0 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t v4 = swift_initStackObject();
    *(_OWORD *)(v4 + 16) = xmmword_25D790C60;
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = MEMORY[0x263F8D6C8];
    *(void *)(v4 + 32) = v5;
    *(void *)(v4 + 40) = v7;
    *(void *)(v4 + 72) = v6;
    *(void *)(v4 + 48) = v2;
    *(void *)(v4 + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(v4 + 88) = v8;
    *(void *)(v4 + 120) = v6;
    *(void *)(v4 + 96) = v1;
    return Dictionary.init(dictionaryLiteral:)();
  }
LABEL_8:

  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t protocol witness for Error._domain.getter in conformance AceSerializationError(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AceSerializationError and conformance AceSerializationError();

  return MEMORY[0x270EF2670](a1, v2);
}

uint64_t protocol witness for Error._code.getter in conformance AceSerializationError(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AceSerializationError and conformance AceSerializationError();

  return MEMORY[0x270EF2668](a1, v2);
}

unint64_t lazy protocol witness table accessor for type AceSerializationError and conformance AceSerializationError()
{
  unint64_t result = lazy protocol witness table cache variable for type AceSerializationError and conformance AceSerializationError;
  if (!lazy protocol witness table cache variable for type AceSerializationError and conformance AceSerializationError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AceSerializationError and conformance AceSerializationError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AceSerializationError and conformance AceSerializationError;
  if (!lazy protocol witness table cache variable for type AceSerializationError and conformance AceSerializationError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AceSerializationError and conformance AceSerializationError);
  }
  return result;
}

uint64_t outlined copy of AceSerializationError(uint64_t a1, unint64_t a2, unsigned __int8 a3)
{
  if (a3 - 1 <= 1) {
    return outlined copy of Data?(a1, a2);
  }
  return a1;
}

uint64_t destroy for AceSerializationError(uint64_t a1)
{
  return outlined consume of AceSerializationError(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t outlined consume of AceSerializationError(uint64_t a1, unint64_t a2, unsigned __int8 a3)
{
  if (a3 - 1 <= 1) {
    return outlined consume of Data?(a1, a2);
  }
  return a1;
}

uint64_t initializeBufferWithCopyOfBuffer for AceSerializationError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  outlined copy of AceSerializationError(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for AceSerializationError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  outlined copy of AceSerializationError(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of AceSerializationError(v6, v7, v8);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for AceSerializationError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of AceSerializationError(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for AceSerializationError(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFD && *(unsigned char *)(a1 + 17))
    {
      int v2 = *(_DWORD *)a1 + 252;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 3) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AceSerializationError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 253;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for AceSerializationError(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 2u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 3);
  }
}

uint64_t destructiveInjectEnumTag for AceSerializationError(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(void *)__n128 result = a2 - 3;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 3;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AceSerializationError()
{
  return &type metadata for AceSerializationError;
}

uint64_t static DataCompressorError.errorDomain.getter()
{
  if (one-time initialization token for errorDomain != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v0 = static DataCompressorError.errorDomain;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t static DataCompressorError.errorDomain.setter(uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for errorDomain != -1) {
    swift_once();
  }
  swift_beginAccess();
  static DataCompressorError.errorDomain = a1;
  qword_26A6925A8 = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*static DataCompressorError.errorDomain.modify())()
{
  if (one-time initialization token for errorDomain != -1) {
    swift_once();
  }
  swift_beginAccess();
  return static ConnectionConfigurationError.errorDomain.modify;
}

uint64_t DataCompressorError.errorCode.getter()
{
  return *v0;
}

uint64_t protocol witness for Error._domain.getter in conformance DataCompressorError(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type DataCompressorError and conformance DataCompressorError();

  return MEMORY[0x270EF2670](a1, v2);
}

uint64_t protocol witness for Error._code.getter in conformance DataCompressorError(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type DataCompressorError and conformance DataCompressorError();

  return MEMORY[0x270EF2668](a1, v2);
}

_DWORD *__swift_memcpy4_4(_DWORD *result, _DWORD *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for DataCompressorError(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 4)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for DataCompressorError(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_DWORD *)__n128 result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 4) = v3;
  return result;
}

uint64_t getEnumTag for DataCompressorError()
{
  return 0;
}

ValueMetadata *type metadata accessor for DataCompressorError()
{
  return &type metadata for DataCompressorError;
}

Swift::Void __swiftcall NetworkManager.dataSubscriptionContextUpdate()()
{
}

Swift::Void __swiftcall NetworkManager.dataServiceDescriptorUpdate()()
{
}

Swift::Void __swiftcall NetworkManager.serviceSubscriptionInfoUpdate()()
{
}

Swift::Void __swiftcall NetworkManager.signalStrengthUpdate()()
{
}

uint64_t NetworkManager.dataSubscriptionContextUpdate()(const char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = v3;
  type metadata accessor for DispatchWorkItemFlags();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388]();
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388]();
  OUTLINED_FUNCTION_2();
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = OUTLINED_FUNCTION_7(v10, (uint64_t)static Logger.siriNetwork);
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    id v13 = (uint8_t *)OUTLINED_FUNCTION_2_0();
    *(_WORD *)id v13 = 0;
    _os_log_impl(&dword_25D6CC000, v11, v12, a1, v13, 2u);
    OUTLINED_FUNCTION_1_2();
  }

  id v14 = *(void **)(v9 + OBJC_IVAR___SNNetworkManagerInternal_queue);
  uint64_t v15 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = a2;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = a3;
  uint64_t v16 = _Block_copy(aBlock);
  id v17 = v14;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  OUTLINED_FUNCTION_5_0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2611B24E0](0, v5, v4, v16);
  _Block_release(v16);

  uint64_t v18 = OUTLINED_FUNCTION_4_0();
  v19(v18);
  uint64_t v20 = OUTLINED_FUNCTION_10();
  v21(v20);
  swift_release();
  return swift_release();
}

uint64_t NetworkManager.preferredDataSimChanged(_:)(void *a1)
{
  return NetworkManager.dataSubscriptionContextUpdate()("NetworkManager - CoreTelephony: dataServiceDescriptorUpdate", (uint64_t)partial apply for closure #1 in NetworkManager.dataServiceDescriptorUpdate(), (uint64_t)&block_descriptor_20);
}

uint64_t NetworkManager.dataSubscriptionContextChange(_:)(void *a1)
{
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = (void *)OUTLINED_FUNCTION_7(v2, (uint64_t)static Logger.siriNetwork);
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_9(v4))
  {
    *(_WORD *)OUTLINED_FUNCTION_2_0() = 0;
    OUTLINED_FUNCTION_3_0(&dword_25D6CC000, v5, v6, "NetworkManager - CoreTelephony: dataSubscriptionContextChange");
    OUTLINED_FUNCTION_1_2();
  }

  NetworkManager.subscriptionContextUpdate(_:)(a1);
  return NetworkManager.carrierNameUpdate(_:)(a1, "NetworkManager - CoreTelephony: carrierNameUpdate", (uint64_t)&unk_270A68778, (uint64_t)partial apply for closure #1 in NetworkManager.carrierNameUpdate(_:), (uint64_t)&block_descriptor_33);
}

uint64_t NetworkManager.carrierBundleChange(_:)(void *a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = (void *)OUTLINED_FUNCTION_7(v4, (uint64_t)static Logger.siriNetwork);
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_9(v6))
  {
    *(_WORD *)OUTLINED_FUNCTION_2_0() = 0;
    OUTLINED_FUNCTION_3_0(&dword_25D6CC000, v7, v8, "NetworkManager - CoreTelephony: Carrier bundle changed");
    OUTLINED_FUNCTION_1_2();
  }

  uint64_t v9 = OBJC_IVAR___SNNetworkManagerInternal_lock;
  objc_msgSend(*(id *)(v2 + OBJC_IVAR___SNNetworkManagerInternal_lock), sel_lock);
  id v10 = *(id *)(v2 + OBJC_IVAR___SNNetworkManagerInternal_lastDataSubscriptionSlot);
  objc_msgSend(*(id *)(v2 + v9), sel_unlock);
  if (v10)
  {
    if (objc_msgSend(a1, sel_slotID) == v10) {
      NetworkManager.dataSubscriptionContextChange(_:)(a1);
    }
  }
  else
  {
    NetworkManager.dataSubscriptionContextUpdate()("NetworkManager - CoreTelephony: dataSubscriptionContextUpdate", (uint64_t)partial apply for closure #1 in NetworkManager.dataSubscriptionContextUpdate(), (uint64_t)&block_descriptor_10);
  }
  return NetworkManager.dataSubscriptionContextUpdate()("NetworkManager - CoreTelephony: dataServiceDescriptorUpdate", (uint64_t)partial apply for closure #1 in NetworkManager.dataServiceDescriptorUpdate(), (uint64_t)&block_descriptor_20);
}

id NetworkManager.simStatusDidChange(_:status:)(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.siriNetwork);
  id v9 = a1;
  swift_bridgeObjectRetain_n();
  id v10 = v9;
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  id v13 = &selRef_logNetworkConnectionStateReadySnapshotCaptured_;
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136315394;
    objc_msgSend(v10, sel_slotID);
    type metadata accessor for CTSubscriptionSlot(0);
    uint64_t v15 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    id v13 = &selRef_logNetworkConnectionStateReadySnapshotCaptured_;
    swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 12) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_25D6CC000, v11, v12, "NetworkManager - CoreTelephony: SIM Slot %s - Status: %s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_1_2();
    OUTLINED_FUNCTION_1_2();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v17 = OBJC_IVAR___SNNetworkManagerInternal_lock;
  objc_msgSend(*(id *)(v4 + OBJC_IVAR___SNNetworkManagerInternal_lock), sel_lock);
  if ([v10 v13[230]] == (id)1)
  {
    swift_bridgeObjectRetain();
    NetworkManager.subscriptionSlotOneStatus.setter(a2, a3);
  }
  else if ([v10 v13[230]] == (id)2)
  {
    swift_bridgeObjectRetain();
    NetworkManager.subscriptionSlotTwoStatus.setter(a2, a3);
  }
  return objc_msgSend(*(id *)(v4 + v17), sel_unlock);
}

uint64_t NetworkManager.signalStrengthChanged(_:info:)(void *a1, void *a2)
{
  uint64_t v3 = v2;
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = OUTLINED_FUNCTION_7(v6, (uint64_t)static Logger.siriNetwork);
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    id v9 = (uint8_t *)OUTLINED_FUNCTION_2_0();
    *(_WORD *)id v9 = 0;
    _os_log_impl(&dword_25D6CC000, v7, v8, "NetworkManager - CoreTelephony: Signal strength changed", v9, 2u);
    OUTLINED_FUNCTION_1_2();
  }

  uint64_t v10 = OBJC_IVAR___SNNetworkManagerInternal_lock;
  objc_msgSend(*(id *)&v2[OBJC_IVAR___SNNetworkManagerInternal_lock], sel_lock);
  id v11 = *(id *)&v2[OBJC_IVAR___SNNetworkManagerInternal_lastDataSubscriptionSlot];
  if (v11 == objc_msgSend(a1, sel_slotID))
  {
    id v12 = objc_msgSend(a2, sel_bars);
    if (v12)
    {
      id v13 = v12;
      uint64_t v14 = Int.init(truncating:)();
      uint64_t v15 = &v2[OBJC_IVAR___SNNetworkManagerInternal_lastSignalStrength];
      *(void *)uint64_t v15 = v14;
      v15[8] = 0;
      unint64_t v16 = v2;
      uint64_t v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v19 = (uint8_t *)swift_slowAlloc();
        uint64_t v25 = swift_slowAlloc();
        *(_DWORD *)uint64_t v19 = 136315138;
        if (v15[8])
        {
          unint64_t v20 = 0xE700000000000000;
          uint64_t v21 = 0x6E776F6E6B6E75;
        }
        else
        {
          uint64_t v21 = String.init<A>(describing:)();
          unint64_t v20 = v22;
        }
        uint64_t v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v20, &v25);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_25D6CC000, v17, v18, "NetworkManager - CoreTelephony: Signal strength %s", v19, 0xCu);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_1_2();
        OUTLINED_FUNCTION_1_2();
      }
      else
      {
      }
    }
  }
  objc_msgSend(*(id *)&v3[v10], sel_unlock, v24, v25);
  NetworkManager.dataSubscriptionContextUpdate()("NetworkManager - CoreTelephony: serviceSubscriptionInfoUpdate", (uint64_t)partial apply for closure #1 in NetworkManager.serviceSubscriptionInfoUpdate(), (uint64_t)&block_descriptor_0);
  return NetworkManager.dataSubscriptionContextUpdate()("NetworkManager - CoreTelephony: dataServiceDescriptorUpdate", (uint64_t)partial apply for closure #1 in NetworkManager.dataServiceDescriptorUpdate(), (uint64_t)&block_descriptor_20);
}

id NetworkManager.subscriptionContextUpdate(_:)(void *a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = (void *)OUTLINED_FUNCTION_7(v4, (uint64_t)static Logger.siriNetwork);
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_9(v6))
  {
    *(_WORD *)OUTLINED_FUNCTION_2_0() = 0;
    OUTLINED_FUNCTION_3_0(&dword_25D6CC000, v7, v8, "NetworkManager - CoreTelephony: subscriptionContextUpdate");
    OUTLINED_FUNCTION_1_2();
  }

  uint64_t v9 = OBJC_IVAR___SNNetworkManagerInternal_lock;
  objc_msgSend(*(id *)(v2 + OBJC_IVAR___SNNetworkManagerInternal_lock), sel_lock);
  id v10 = objc_msgSend(a1, sel_slotID);
  *(void *)(v2 + OBJC_IVAR___SNNetworkManagerInternal_lastDataSubscriptionSlot) = v10;
  if (objc_msgSend(a1, sel_slotID) != (id)1)
  {
    if (objc_msgSend(a1, sel_slotID) != (id)2) {
      goto LABEL_11;
    }
    id result = (id)*MEMORY[0x263F030B8];
    if (*MEMORY[0x263F030B8])
    {
      uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      NetworkManager.subscriptionSlotTwoStatus.setter(v14, v15);
      goto LABEL_11;
    }
LABEL_15:
    __break(1u);
    return result;
  }
  id result = (id)*MEMORY[0x263F030B8];
  if (!*MEMORY[0x263F030B8])
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  NetworkManager.subscriptionSlotOneStatus.setter(v12, v13);
LABEL_11:
  objc_msgSend(*(id *)(v2 + v9), sel_unlock);
  unint64_t v16 = *(void **)(v2 + v9);

  return objc_msgSend(v16, sel_unlock);
}

uint64_t NetworkManager.carrierNameUpdate(_:)(void *a1)
{
  return NetworkManager.carrierNameUpdate(_:)(a1, "NetworkManager - CoreTelephony: carrierNameUpdate", (uint64_t)&unk_270A68778, (uint64_t)partial apply for closure #1 in NetworkManager.carrierNameUpdate(_:), (uint64_t)&block_descriptor_33);
}

void closure #1 in NetworkManager.carrierNameUpdate(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x2611B37F0](v3);
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    id v6 = *(id *)(v4 + OBJC_IVAR___SNNetworkManagerInternal_coreTelephonyClient);
    uint64_t v7 = (void *)MEMORY[0x2611B2220](0x4E72656972726143, 0xEB00000000656D61);
    id v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F02C20]), sel_initWithBundleType_, 1);
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = v5;
    aBlock[4] = partial apply for closure #1 in closure #1 in NetworkManager.carrierNameUpdate(_:);
    aBlock[5] = v9;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed NSObject?, @guaranteed Error?) -> ();
    aBlock[3] = &block_descriptor_39;
    id v10 = _Block_copy(aBlock);
    id v11 = v5;
    swift_release();
    objc_msgSend(v6, sel_copyCarrierBundleValue_key_bundleType_completion_, a2, v7, v8, v10);
    _Block_release(v10);
  }
}

uint64_t closure #1 in closure #1 in NetworkManager.carrierNameUpdate(_:)(uint64_t result, uint64_t a2)
{
  if (!a2 && result)
  {
    self;
    id result = swift_dynamicCastObjCClass();
    if (result) {
      return static String._conditionallyBridgeFromObjectiveC(_:result:)();
    }
  }
  return result;
}

void closure #1 in closure #1 in NetworkManager.dataSubscriptionContextUpdate()(void *a1, id a2)
{
  if (a2)
  {
    id v3 = a2;
    if (one-time initialization token for siriNetwork != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.siriNetwork);
    id v5 = a2;
    id v6 = a2;
    oslog = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v7))
    {
      id v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = (void *)swift_slowAlloc();
      *(_DWORD *)id v8 = 138412290;
      id v10 = a2;
      uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v9 = v12;

      _os_log_impl(&dword_25D6CC000, oslog, v7, "NetworkManager - CoreTelephony Error: Data Subscription Context Error: %@", v8, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x2611B3750](v9, -1, -1);
      MEMORY[0x2611B3750](v8, -1, -1);

      return;
    }
  }
  else
  {
    if (!a1) {
      return;
    }
    oslog = a1;
    NetworkManager.dataSubscriptionContextChange(_:)(oslog);
  }
}

void closure #1 in NetworkManager.dataServiceDescriptorUpdate()(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x2611B37F0](v1);
  if (v2)
  {
    id v3 = (void *)v2;
    uint64_t v4 = *(void **)(v2 + OBJC_IVAR___SNNetworkManagerInternal_coreTelephonyClient);
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    aBlock[4] = partial apply for closure #1 in closure #1 in NetworkManager.dataServiceDescriptorUpdate();
    aBlock[5] = v5;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed NSObject?, @guaranteed Error?) -> ();
    aBlock[3] = &block_descriptor_26;
    id v6 = _Block_copy(aBlock);
    id v7 = v4;
    id v8 = v3;
    swift_release();
    objc_msgSend(v7, sel_getCurrentDataServiceDescriptor_, v6);
    _Block_release(v6);
  }
}

void closure #1 in closure #1 in NetworkManager.dataServiceDescriptorUpdate()(void *a1, id a2, uint64_t a3)
{
  if (a2)
  {
    id v4 = a2;
    if (one-time initialization token for siriNetwork != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.siriNetwork);
    id v6 = a2;
    id v7 = a2;
    oslog = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      id v10 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 138412290;
      id v11 = a2;
      uint64_t v18 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v10 = v18;

      _os_log_impl(&dword_25D6CC000, oslog, v8, "NetworkManager - CoreTelephony Error: Data Service Descriptor Error: %@", v9, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x2611B3750](v10, -1, -1);
      MEMORY[0x2611B3750](v9, -1, -1);
    }
    else
    {
    }
  }
  else
  {
    uint64_t v14 = OBJC_IVAR___SNNetworkManagerInternal_lock;
    objc_msgSend(*(id *)(a3 + OBJC_IVAR___SNNetworkManagerInternal_lock), sel_lock);
    id v15 = a1;
    NetworkManager.dataServiceDescriptor.setter((uint64_t)a1);
    unint64_t v16 = *(void **)(a3 + v14);
    objc_msgSend(v16, sel_unlock);
  }
}

void closure #1 in NetworkManager.serviceSubscriptionInfoUpdate()(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x2611B37F0](v1);
  if (v2)
  {
    id v3 = (void *)v2;
    id v4 = *(void **)(v2 + OBJC_IVAR___SNNetworkManagerInternal_coreTelephonyClient);
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    aBlock[4] = partial apply for closure #1 in closure #1 in NetworkManager.serviceSubscriptionInfoUpdate();
    aBlock[5] = v5;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed NSObject?, @guaranteed Error?) -> ();
    aBlock[3] = &block_descriptor_6;
    id v6 = _Block_copy(aBlock);
    id v7 = v4;
    id v8 = v3;
    swift_release();
    objc_msgSend(v7, sel_getSubscriptionInfo_, v6);
    _Block_release(v6);
  }
}

void closure #1 in closure #1 in NetworkManager.serviceSubscriptionInfoUpdate()(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1 && (uint64_t v5 = outlined bridged method (pb) of @objc CTXPCServiceSubscriptionInfo.subscriptions.getter(a1)) != 0)
  {
    unint64_t v6 = v5;
    uint64_t v7 = OBJC_IVAR___SNNetworkManagerInternal_lock;
    objc_msgSend(*(id *)(a3 + OBJC_IVAR___SNNetworkManagerInternal_lock), sel_lock);
    if (!(v6 >> 62))
    {
      a2 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v8 = a3 + OBJC_IVAR___SNNetworkManagerInternal_subscriptionCount;
      *(void *)uint64_t v8 = a2;
      *(unsigned char *)(v8 + 8) = 0;
      uint64_t v9 = *(void **)(a3 + v7);
      objc_msgSend(v9, sel_unlock);
      return;
    }
    swift_bridgeObjectRetain();
    a2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease_n();
    if ((a2 & 0x8000000000000000) == 0) {
      goto LABEL_5;
    }
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (!a2) {
      return;
    }
    id v10 = (id)a2;
    if (one-time initialization token for siriNetwork == -1) {
      goto LABEL_10;
    }
  }
  swift_once();
LABEL_10:
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Logger.siriNetwork);
  id v12 = (id)a2;
  id v13 = (id)a2;
  oslog = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v14))
  {
    id v15 = (uint8_t *)swift_slowAlloc();
    unint64_t v16 = (void *)swift_slowAlloc();
    *(_DWORD *)id v15 = 138412290;
    id v17 = (id)a2;
    uint64_t v19 = _swift_stdlib_bridgeErrorToNSError();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v16 = v19;

    _os_log_impl(&dword_25D6CC000, oslog, v14, "NetworkManager - CoreTelephony Error: Subscription Info Error: %@", v15, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x2611B3750](v16, -1, -1);
    MEMORY[0x2611B3750](v15, -1, -1);
  }
  else
  {
  }
}

void closure #1 in NetworkManager.dataSubscriptionContextUpdate()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a1 + 16;
  swift_beginAccess();
  uint64_t v7 = MEMORY[0x2611B37F0](v6);
  if (v7)
  {
    uint64_t v8 = (void *)v7;
    uint64_t v9 = *(void **)(v7 + OBJC_IVAR___SNNetworkManagerInternal_coreTelephonyClient);
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 16) = v8;
    aBlock[4] = a3;
    aBlock[5] = v10;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed NSObject?, @guaranteed Error?) -> ();
    aBlock[3] = a4;
    uint64_t v11 = _Block_copy(aBlock);
    id v12 = v9;
    id v13 = v8;
    swift_release();
    objc_msgSend(v12, sel_getCurrentDataSubscriptionContext_, v11);
    _Block_release(v11);
  }
}

void closure #1 in closure #1 in NetworkManager.signalStrengthUpdate()(void *a1, id a2)
{
  if (a1)
  {
    os_log_t oslog = a1;
    NetworkManager.carrierNameUpdate(_:)(oslog, "NetworkManager - CoreTelephony: signalStrengthUpdate", (uint64_t)&unk_270A68890, (uint64_t)partial apply for closure #1 in NetworkManager.signalStrengthUpdate(_:), (uint64_t)&block_descriptor_56);
  }
  else
  {
    if (!a2) {
      return;
    }
    id v3 = a2;
    if (one-time initialization token for siriNetwork != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.siriNetwork);
    id v5 = a2;
    id v6 = a2;
    os_log_t oslog = (os_log_t)Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 138412290;
      id v10 = a2;
      uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v9 = v12;

      _os_log_impl(&dword_25D6CC000, oslog, v7, "NetworkManager - CoreTelephony Error: Data Subscription Error: %@", v8, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x2611B3750](v9, -1, -1);
      MEMORY[0x2611B3750](v8, -1, -1);

      return;
    }
  }
}

uint64_t NetworkManager.signalStrengthUpdate(_:)(void *a1)
{
  return NetworkManager.carrierNameUpdate(_:)(a1, "NetworkManager - CoreTelephony: signalStrengthUpdate", (uint64_t)&unk_270A68890, (uint64_t)partial apply for closure #1 in NetworkManager.signalStrengthUpdate(_:), (uint64_t)&block_descriptor_56);
}

uint64_t NetworkManager.carrierNameUpdate(_:)(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = v5;
  type metadata accessor for DispatchWorkItemFlags();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388]();
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388]();
  OUTLINED_FUNCTION_2();
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = OUTLINED_FUNCTION_7(v11, (uint64_t)static Logger.siriNetwork);
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    os_log_type_t v14 = (uint8_t *)OUTLINED_FUNCTION_2_0();
    *(_WORD *)os_log_type_t v14 = 0;
    _os_log_impl(&dword_25D6CC000, v12, v13, a2, v14, 2u);
    OUTLINED_FUNCTION_1_2();
  }

  id v15 = *(void **)(v9 + OBJC_IVAR___SNNetworkManagerInternal_queue);
  uint64_t v16 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v16;
  *(void *)(v17 + 24) = a1;
  aBlock[4] = a4;
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = a5;
  uint64_t v18 = _Block_copy(aBlock);
  id v19 = v15;
  swift_retain();
  id v20 = a1;
  static DispatchQoS.unspecified.getter();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  OUTLINED_FUNCTION_5_0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2611B24E0](0, v7, v6, v18);
  _Block_release(v18);

  uint64_t v21 = OUTLINED_FUNCTION_4_0();
  v22(v21);
  uint64_t v23 = OUTLINED_FUNCTION_10();
  v24(v23);
  swift_release();
  return swift_release();
}

void closure #1 in NetworkManager.signalStrengthUpdate(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x2611B37F0](v3);
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    uint64_t v6 = *(void **)(v4 + OBJC_IVAR___SNNetworkManagerInternal_coreTelephonyClient);
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = v5;
    aBlock[4] = partial apply for closure #1 in closure #1 in NetworkManager.signalStrengthUpdate(_:);
    aBlock[5] = v7;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed NSObject?, @guaranteed Error?) -> ();
    aBlock[3] = &block_descriptor_62;
    uint64_t v8 = _Block_copy(aBlock);
    id v9 = v6;
    id v10 = v5;
    swift_release();
    objc_msgSend(v9, sel_getSignalStrengthInfo_completion_, a2, v8);
    _Block_release(v8);
  }
}

void closure #1 in closure #1 in NetworkManager.signalStrengthUpdate(_:)(void *a1, id a2, uint64_t a3)
{
  if (a2)
  {
    id v4 = a2;
    if (one-time initialization token for siriNetwork != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.siriNetwork);
    id v6 = a2;
    id v7 = a2;
    os_log_t oslog = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v8))
    {
      id v9 = (uint8_t *)swift_slowAlloc();
      id v10 = (void *)swift_slowAlloc();
      *(_DWORD *)id v9 = 138412290;
      id v11 = a2;
      uint64_t v18 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v10 = v18;

      _os_log_impl(&dword_25D6CC000, oslog, v8, "NetworkManager - CoreTelephony Error: Signal Strength Error: %@", v9, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x2611B3750](v10, -1, -1);
      MEMORY[0x2611B3750](v9, -1, -1);

      return;
    }
  }
  else
  {
    if (!a1) {
      return;
    }
    os_log_type_t v13 = objc_msgSend(a1, sel_bars);
    if (!v13) {
      return;
    }
    uint64_t v14 = OBJC_IVAR___SNNetworkManagerInternal_lock;
    os_log_t oslog = v13;
    objc_msgSend(*(id *)(a3 + OBJC_IVAR___SNNetworkManagerInternal_lock), sel_lock);
    uint64_t v15 = Int.init(truncating:)();
    uint64_t v16 = a3 + OBJC_IVAR___SNNetworkManagerInternal_lastSignalStrength;
    *(void *)uint64_t v16 = v15;
    *(unsigned char *)(v16 + 8) = 0;
    objc_msgSend(*(id *)(a3 + v14), sel_unlock);
  }
}

void thunk for @escaping @callee_guaranteed (@guaranteed NSObject?, @guaranteed Error?) -> ()(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  id v7 = a2;
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

SiriNetwork::ConnectionType __swiftcall NetworkManager.connectionTechnologyForCellularInterface()()
{
  uint64_t v2 = v0;
  v21[4] = *(id *)MEMORY[0x263EF8340];
  uint64_t v3 = *(void **)(v1 + OBJC_IVAR___SNNetworkManagerInternal_dataServiceDescriptor);
  if (v3
    && (objc_msgSend(v3, sel_copy),
        _bridgeAnyObjectToAny(_:)(),
        swift_unknownObjectRelease(),
        type metadata accessor for CTServiceDescriptor(0, &lazy cache variable for type metadata for CTServiceDescriptor), (swift_dynamicCast() & 1) != 0))
  {
    id v4 = *(void **)(v1 + OBJC_IVAR___SNNetworkManagerInternal_coreTelephonyClient);
    v21[0] = 0;
    id v5 = objc_msgSend(v4, sel_getCurrentRat_error_, v20, v21);
    id v6 = v21[0];
    if (v5)
    {
      id v7 = v5;
      uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v10 = v9;
      id v11 = v6;

      v12._countAndFlagsBits = v8;
      v12._object = v10;
      ConnectionType.init(fromCoreTelephonyeRATString:)(v12);

      return result;
    }
    id v18 = v21[0];
    id v19 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
  }
  else
  {
    if (one-time initialization token for siriNetwork != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    uint64_t v15 = OUTLINED_FUNCTION_7(v14, (uint64_t)static Logger.siriNetwork);
    os_log_type_t v16 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)OUTLINED_FUNCTION_2_0();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl(&dword_25D6CC000, v15, v16, "NetworkManager - CoreTelephony: No data service descriptor to get cellular interface.", v17, 2u);
      OUTLINED_FUNCTION_1_2();
    }
  }
  *uint64_t v2 = 2;
  return result;
}

uint64_t closure #1 in osLogInternal(_:log:type:)(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

unsigned char **closure #1 in OSLogArguments.append(_:)(unsigned char **result, uint64_t a2, uint64_t a3, char a4)
{
  id v4 = *result;
  *id v4 = a4;
  *SiriNetwork::ConnectionType result = v4 + 1;
  return result;
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t closure #1 in OSLogArguments.append(_:)(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, a3);
  uint64_t v8 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v8;
  return result;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x263F8DBE0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v12);
  return v7;
}

uint64_t sub_25D6D8B04()
{
  swift_unknownObjectWeakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for closure #1 in NetworkManager.serviceSubscriptionInfoUpdate()()
{
  closure #1 in NetworkManager.serviceSubscriptionInfoUpdate()(v0);
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

void partial apply for closure #1 in closure #1 in NetworkManager.serviceSubscriptionInfoUpdate()(void *a1, uint64_t a2)
{
  closure #1 in closure #1 in NetworkManager.serviceSubscriptionInfoUpdate()(a1, a2, *(void *)(v2 + 16));
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(void *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      specialized UnsafeMutableRawPointer.initializeMemory<A>(as:from:count:)((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter();
      uint64_t result = 0;
      *a1 = __dst;
      return result;
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    uint64_t result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v11;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    uint64_t v8 = _StringObject.sharedUTF8.getter();
    if (!v8)
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
  }
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

void *specialized UnsafeMutableRawPointer.initializeMemory<A>(as:from:count:)(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000) != 0 || (&__dst[__n] > __src ? (BOOL v3 = &__src[__n] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, __n);
  }
  return result;
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1, v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v3 > 1), v4 + 1, 1, v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0)
  {
    Swift::Int v2 = String.UTF8View._foreignCount()();
    if (v2) {
      goto LABEL_6;
    }
    return MEMORY[0x263F8EE78];
  }
  if ((a2 & 0x2000000000000000) != 0) {
    Swift::Int v2 = HIBYTE(a2) & 0xF;
  }
  else {
    Swift::Int v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return MEMORY[0x263F8EE78];
  }
LABEL_6:
  unint64_t v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    unint64_t v4 = v3;
    uint64_t v5 = _StringGuts.copyUTF8(into:)();
    if ((v6 & 1) != 0 || v5 != v2) {
      goto LABEL_14;
    }
    return (uint64_t)v4;
  }
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
LABEL_14:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    int64_t v9 = *(void *)(a4 + 16);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  Swift::String v12 = v10 + 32;
  os_log_type_t v13 = (char *)(a4 + 32);
  if (v5)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)(v13, v8, v12);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *specialized UnsafeMutablePointer.initialize(from:count:)(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000) != 0 || (&__dst[__n] > __src ? (BOOL v3 = &__src[__n] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, __n);
  }
  return result;
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000) != 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

uint64_t outlined bridged method (pb) of @objc CTXPCServiceSubscriptionInfo.subscriptions.getter(void *a1)
{
  id v1 = objc_msgSend(a1, sel_subscriptions);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  type metadata accessor for CTServiceDescriptor(0, &lazy cache variable for type metadata for CTXPCServiceSubscriptionContext);
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t type metadata accessor for CTServiceDescriptor(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void partial apply for closure #1 in NetworkManager.dataSubscriptionContextUpdate()()
{
  closure #1 in NetworkManager.dataSubscriptionContextUpdate()(v0, (uint64_t)&unk_270A686B0, (uint64_t)partial apply for closure #1 in closure #1 in NetworkManager.dataSubscriptionContextUpdate(), (uint64_t)&block_descriptor_16);
}

uint64_t sub_25D6D93E4()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for closure #1 in closure #1 in NetworkManager.dataSubscriptionContextUpdate()(void *a1, id a2)
{
}

void partial apply for closure #1 in NetworkManager.dataServiceDescriptorUpdate()()
{
  closure #1 in NetworkManager.dataServiceDescriptorUpdate()(v0);
}

void partial apply for closure #1 in closure #1 in NetworkManager.dataServiceDescriptorUpdate()(void *a1, void *a2)
{
  closure #1 in closure #1 in NetworkManager.dataServiceDescriptorUpdate()(a1, a2, *(void *)(v2 + 16));
}

void partial apply for closure #1 in NetworkManager.carrierNameUpdate(_:)()
{
  closure #1 in NetworkManager.carrierNameUpdate(_:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t partial apply for closure #1 in closure #1 in NetworkManager.carrierNameUpdate(_:)(uint64_t result, uint64_t a2)
{
  return closure #1 in closure #1 in NetworkManager.carrierNameUpdate(_:)(result, a2);
}

void partial apply for closure #1 in NetworkManager.signalStrengthUpdate()()
{
  closure #1 in NetworkManager.dataSubscriptionContextUpdate()(v0, (uint64_t)&unk_270A68840, (uint64_t)partial apply for closure #1 in closure #1 in NetworkManager.signalStrengthUpdate(), (uint64_t)&block_descriptor_49);
}

void partial apply for closure #1 in closure #1 in NetworkManager.signalStrengthUpdate()(void *a1, id a2)
{
}

uint64_t objectdestroy_29Tm()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

void partial apply for closure #1 in NetworkManager.signalStrengthUpdate(_:)()
{
  closure #1 in NetworkManager.signalStrengthUpdate(_:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void partial apply for closure #1 in closure #1 in NetworkManager.signalStrengthUpdate(_:)(void *a1, void *a2)
{
  closure #1 in closure #1 in NetworkManager.signalStrengthUpdate(_:)(a1, a2, *(void *)(v2 + 16));
}

void OUTLINED_FUNCTION_1_2()
{
  JUMPOUT(0x2611B3750);
}

uint64_t OUTLINED_FUNCTION_2_0()
{
  return swift_slowAlloc();
}

void OUTLINED_FUNCTION_3_0(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t OUTLINED_FUNCTION_4_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_5_0()
{
  return v0 - 136;
}

uint64_t OUTLINED_FUNCTION_7(uint64_t a1, uint64_t a2)
{
  __swift_project_value_buffer(a1, a2);
  return Logger.logObject.getter();
}

BOOL OUTLINED_FUNCTION_9(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_10()
{
  return v0;
}

uint64_t dispatch thunk of ConnectionProviderProtocol.connectionIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.connection.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.connectionMetrics.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.connectionMetrics.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.connectionMetrics.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.connectionAnalysisInfo.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.networkManager.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.networkManager.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 80))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.networkManager.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 88))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.connectionProviderState.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 96))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.connectionProviderState.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 104))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.connectionProviderState.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 112))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.delegate.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 120))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.delegate.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 128))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.delegate.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 136))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.connectionConfiguration.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 144))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.connectionQueue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 152))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.primaryInterface.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 160))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.connectionType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 168))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.openCompletion.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 176))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.openCompletion.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 184))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.openCompletion.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 192))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.readWriteCounter.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 200))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.betterPathAvailableNotificationMachTime.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 208))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.betterPathAvailableNotificationMachTime.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 216))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.betterPathAvailableNotificationMachTime.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 224))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.betterPathAvailable.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 232))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.scopeToWiFiOnly.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 240))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.isViable.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 248))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.isCancelled.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 256))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.isCancelled.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 264))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.isCancelled.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 272))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.isMPTCP.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 280))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.isMPTCP.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 288))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.isMPTCP.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 296))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.mostRecentErrorFromConnection.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 304))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.openTimeoutTimer.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 312))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.openTimeoutTimer.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 320))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.openTimeoutTimer.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 328))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.openTimeoutTimerInterval.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 336))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.openSlowTimer.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 344))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.openSlowTimer.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 352))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.openSlowTimer.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 360))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.openSlowTimerInterval.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 368))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.staleConnectionTimer.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 376))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.staleConnectionTimer.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 384))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.staleConnectionTimer.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 392))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.staleConnectionTimerInterval.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 400))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.connectionUnviableTimer.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 408))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.connectionUnviableTimer.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 416))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.connectionUnviableTimer.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 424))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.connectionUnviableTimerInterval.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 432))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.networkAnalytics.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 440))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.init(connectionConfiguration:connectionQueue:networkManager:networkAnalytics:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 448))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.openConnectionWithInitialPayload(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 456))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.openCompletionSetup(completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 464))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.close()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 472))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.cancelConnection()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 480))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.closeWithError(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 488))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.shouldFallBackFromError(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 496))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.send(data:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 504))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.readData(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 512))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.updateConnectionMetricsSnapshotReport()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 520))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.updateConnectionMetrics(with:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 528))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.supportsInitialPayload()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 536))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.shouldFallbackQuickly()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 544))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.headerData(forceReconnect:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 552))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.configureNetworkAnalytics()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 560))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.updateAndEmitConnectionMetricsPreparationReport()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 568))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.updateAndEmitConnectionMetricsReadyEstablishmentReport()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 576))();
}

uint64_t dispatch thunk of ConnectionProviderDelegate.connectionProvider(_:received:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of ConnectionProviderDelegate.connectionProvider(_:receivedIntermediateError:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t dispatch thunk of ConnectionProviderDelegate.connectionProvider(_:receivedViabilityChangeNotification:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

uint64_t dispatch thunk of ConnectionProviderDelegate.connectionProviderReceivedBetterRouteNotification(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

void ConnectionProviderProtocol.connectionAnalysisInfo.getter()
{
  OUTLINED_FUNCTION_22();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v48 = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v5 - 8);
  OUTLINED_FUNCTION_0_1();
  uint64_t v8 = v7 - v6;
  int64_t v9 = *(void (**)(uint64_t))(v1 + 144);
  uint64_t v10 = OUTLINED_FUNCTION_17();
  v9(v10);
  memcpy(v57, v58, 0x204uLL);
  uint64_t v47 = v8;
  ConnectionConfiguration.resolvedURL.getter();
  outlined release of ConnectionConfiguration(v58);
  size_t v11 = *(void (**)(uint64_t))(v1 + 160);
  uint64_t v12 = OUTLINED_FUNCTION_27();
  v11(v12);
  outlined init with take of ConnectionSnapshotReport?((uint64_t)&v56, (uint64_t)v59, (uint64_t *)&demangling cache variable for type metadata for ConnectionInterfaceReport?);
  outlined init with take of ConnectionSnapshotReport?((uint64_t)v59, (uint64_t)v60, (uint64_t *)&demangling cache variable for type metadata for ConnectionInterfaceReport?);
  int v45 = _s11SiriNetwork25ConnectionInterfaceReportVSgWOg((uint64_t)v60);
  if (v45 == 1)
  {
    int v46 = 0;
  }
  else
  {
    outlined release of ConnectionInterfaceReport?(v59);
    int v46 = v60[9];
  }
  uint64_t v13 = OUTLINED_FUNCTION_27();
  v11(v13);
  outlined init with take of ConnectionSnapshotReport?((uint64_t)v57, (uint64_t)v53, (uint64_t *)&demangling cache variable for type metadata for ConnectionInterfaceReport?);
  outlined init with take of ConnectionSnapshotReport?((uint64_t)v53, (uint64_t)v54, (uint64_t *)&demangling cache variable for type metadata for ConnectionInterfaceReport?);
  if (_s11SiriNetwork25ConnectionInterfaceReportVSgWOg((uint64_t)v54) == 1
    || (outlined retain of ConnectionTCPInfoMetrics?((uint64_t)v55),
        outlined release of ConnectionInterfaceReport?(v53),
        outlined init with take of ConnectionSnapshotReport?((uint64_t)v55, (uint64_t)v49 + 1, (uint64_t *)&demangling cache variable for type metadata for ConnectionTCPInfoMetrics?), _s11SiriNetwork24ConnectionTCPInfoMetricsVSgWOg((uint64_t)v49 + 1) == 1))
  {
    uint64_t v44 = 0;
  }
  else
  {
    outlined retain of ConnectionTCPInfoMetrics?((uint64_t)v55);
    if (v52 == 1) {
      uint64_t v44 = 0;
    }
    else {
      uint64_t v44 = v51;
    }
  }
  uint64_t v14 = OUTLINED_FUNCTION_17();
  v9(v14);
  outlined release of ConnectionConfiguration((void *)((char *)v49 + 1));
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v1 + 168))(v49, v3, v1);
  char v43 = v49[0];
  uint64_t v15 = OUTLINED_FUNCTION_17();
  v9(v15);
  uint64_t v16 = v57[41];
  uint64_t v17 = v57[48];
  uint64_t v18 = v57[49];
  uint64_t v40 = v57[48];
  uint64_t v41 = v57[49];
  uint64_t v42 = v57[40];
  OUTLINED_FUNCTION_23();
  outlined copy of ConnectionPolicy?(v19, v20, v21, v22, v23, v24, v25, v26, v40, v41);
  outlined release of ConnectionConfiguration(v57);
  if (v18)
  {
    swift_bridgeObjectRetain();
    uint64_t v27 = v42;
    OUTLINED_FUNCTION_23();
    outlined consume of ConnectionPolicy?(v28, v29, v30, v31, v32, v33, v34, v35, v17, v18);
  }
  else
  {
    uint64_t v27 = 0;
    uint64_t v16 = 0;
  }
  char v36 = v50;
  outlined init with take of ConnectionSnapshotReport?(v47, v48, (uint64_t *)&demangling cache variable for type metadata for URL?);
  v37 = (int *)type metadata accessor for ConnectionAnalysisInfo();
  uint64_t v38 = v48 + v37[5];
  *(_DWORD *)uint64_t v38 = v46;
  *(unsigned char *)(v38 + 4) = v45 == 1;
  *(void *)(v48 + v37[6]) = v44;
  *(unsigned char *)(v48 + v37[7]) = v36;
  *(unsigned char *)(v48 + v37[8]) = v43;
  uint64_t v39 = (void *)(v48 + v37[9]);
  *uint64_t v39 = v27;
  v39[1] = v16;
  __swift_storeEnumTagSinglePayload(v48, 0, 1, (uint64_t)v37);
  OUTLINED_FUNCTION_29();
}

void ConnectionProviderProtocol.primaryInterface.getter()
{
  void (*v7)(_OWORD *__return_ptr);
  char v8;
  void (*v9)(_OWORD *__return_ptr);
  uint64_t v10;
  long long v11;
  uint64_t v12;
  uint64_t v13;
  long long v14;
  int v15;
  uint64_t v16;
  char v17;
  long long v18;
  int v19;
  char v20;
  uint64_t v21;
  long long v22;
  char v23;
  __n128 *v24;
  uint64_t v25;
  __n128 v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  uint64_t v32;
  long long v33;
  long long v34;
  long long v35;
  long long v36;
  char v37;
  long long v38;
  int v39;
  uint64_t v40;
  char v41;
  long long v42;
  uint64_t v43;
  char v44;
  char v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char v58;
  uint64_t v59;
  int v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  char v66;
  uint64_t v67;
  long long v68;
  char v69;
  long long v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  long long v75;
  long long v76;
  long long v77;
  long long v78;
  long long v79;
  long long v80;
  long long v81;
  long long v82;
  uint64_t v83;
  __n128 v84[44];
  unsigned char v85[296];
  unsigned char v86[360];
  __n128 v87[22];
  _OWORD __dst[90];
  _OWORD __src[90];
  __n128 v90[18];
  unsigned char v91[712];
  unsigned char v92[720];

  OUTLINED_FUNCTION_22();
  uint64_t v1 = MEMORY[0x270FA5388](v0);
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v6 = v5;
  uint64_t v7 = *(void (**)(_OWORD *__return_ptr))(v2 + 40);
  v7(__src);
  outlined init with take of ConnectionSnapshotReport?((uint64_t)&__src[35] + 8, (uint64_t)v91, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  outlined init with take of ConnectionSnapshotReport?((uint64_t)v91, (uint64_t)v92, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  OUTLINED_FUNCTION_2_1((uint64_t)v92);
  if (v8)
  {
    v83 = v6;
    int64_t v9 = v7;
    uint64_t v10 = *(void *)&__src[0];
    uint64_t v44 = BYTE8(__src[0]);
    uint64_t v42 = __src[1];
    size_t v11 = __src[2];
    uint64_t v39 = __src[3];
    v37 = BYTE4(__src[3]);
    uint64_t v33 = *(_OWORD *)((char *)&__src[4] + 8);
    uint64_t v35 = *(_OWORD *)((char *)&__src[3] + 8);
    uint64_t v32 = *((void *)&__src[5] + 1);
    outlined init with take of ConnectionSnapshotReport?((uint64_t)&__src[6], (uint64_t)v84, &demangling cache variable for type metadata for ConnectionPreparationReport?);
    OUTLINED_FUNCTION_11();
    uint64_t v12 = *((void *)&__src[34] + 1);
    uint64_t v13 = *(void *)&__src[35];
    v77 = __src[81];
    v79 = __src[80];
    uint64_t v14 = __src[82];
    v73 = __src[83];
    v71 = *((void *)&__src[83] + 1);
    v69 = __src[84];
    v67 = *((void *)&__src[84] + 1);
    v66 = __src[85];
    v62 = *(void *)&__src[86];
    v64 = *((void *)&__src[85] + 1);
    v60 = DWORD2(__src[86]);
    v58 = BYTE12(__src[86]);
    uint64_t v56 = *(void *)&__src[87];
    v54 = BYTE8(__src[87]);
    char v52 = *(void *)&__src[88];
    char v50 = BYTE8(__src[88]);
    uint64_t v48 = *(void *)&__src[89];
    int v46 = BYTE8(__src[89]);
    *(void *)&__dst[0] = v10;
    uint64_t v7 = v9;
    BYTE8(__dst[0]) = v44;
    __dst[1] = v42;
    __dst[2] = v11;
    LODWORD(__dst[3]) = v39;
    BYTE4(__dst[3]) = v37;
    *(_OWORD *)((char *)&__dst[3] + 8) = v35;
    *(_OWORD *)((char *)&__dst[4] + 8) = v33;
    *((void *)&__dst[5] + 1) = v32;
    outlined init with take of ConnectionSnapshotReport?((uint64_t)v84, (uint64_t)&__dst[6], &demangling cache variable for type metadata for ConnectionPreparationReport?);
    OUTLINED_FUNCTION_13((_OWORD *)((char *)&__dst[28] + 8), v26, v27, v28, v29, v30, v31);
    *((void *)&__dst[34] + 1) = v12;
    *(void *)&__dst[35] = v13;
    outlined init with take of ConnectionSnapshotReport?((uint64_t)v91, (uint64_t)&__dst[35] + 8, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
    __dst[80] = v79;
    __dst[81] = v77;
    __dst[82] = v14;
    LOBYTE(__dst[83]) = v73;
    *((void *)&__dst[83] + 1) = v71;
    LOBYTE(__dst[84]) = v69;
    *((void *)&__dst[84] + 1) = v67;
    LOBYTE(__dst[85]) = v66;
    *((void *)&__dst[85] + 1) = v64;
    *(void *)&__dst[86] = v62;
    DWORD2(__dst[86]) = v60;
    BYTE12(__dst[86]) = v58;
    *(void *)&__dst[87] = v56;
    BYTE8(__dst[87]) = v54;
    *(void *)&__dst[88] = v52;
    BYTE8(__dst[88]) = v50;
    *(void *)&__dst[89] = v48;
    BYTE8(__dst[89]) = v46;
    outlined release of ConnectionMetrics((uint64_t)__dst);
    _s11SiriNetwork25ConnectionInterfaceReportVSgWOi0_(v87);
  }
  else
  {
    outlined init with take of ConnectionSnapshotReport?((uint64_t)&__src[59] + 8, (uint64_t)v87, (uint64_t *)&demangling cache variable for type metadata for ConnectionInterfaceReport?);
    memcpy(__dst, __src, 0x599uLL);
    outlined release of ConnectionInterfaceReport?(v87);
    outlined release of ConnectionMetrics((uint64_t)__dst);
    outlined init with take of ConnectionSnapshotReport?((uint64_t)v87, (uint64_t)v84, (uint64_t *)&demangling cache variable for type metadata for ConnectionInterfaceReport?);
    uint64_t v15 = _s11SiriNetwork25ConnectionInterfaceReportVSgWOg((uint64_t)v84);
    if (v15 != 1)
    {
      uint64_t v24 = v87;
      uint64_t v25 = v6;
      goto LABEL_11;
    }
    v83 = v6;
  }
  outlined init with take of ConnectionSnapshotReport?((uint64_t)v87, (uint64_t)v90, (uint64_t *)&demangling cache variable for type metadata for ConnectionInterfaceReport?);
  ((void (*)(_OWORD *__return_ptr, uint64_t, uint64_t))v7)(__src, v4, v3);
  outlined init with take of ConnectionSnapshotReport?((uint64_t)&__src[6], (uint64_t)v86, &demangling cache variable for type metadata for ConnectionPreparationReport?);
  outlined init with take of ConnectionSnapshotReport?((uint64_t)v86, (uint64_t)v87, &demangling cache variable for type metadata for ConnectionPreparationReport?);
  if (_s11SiriNetwork27ConnectionPreparationReportVSgWOg((uint64_t)v87) == 1)
  {
    uint64_t v16 = *(void *)&__src[0];
    uint64_t v17 = BYTE8(__src[0]);
    uint64_t v18 = __src[2];
    uint64_t v19 = __src[3];
    uint64_t v20 = BYTE4(__src[3]);
    char v36 = *(_OWORD *)((char *)&__src[3] + 8);
    uint64_t v38 = __src[1];
    uint64_t v34 = *(_OWORD *)((char *)&__src[4] + 8);
    v81 = *(_OWORD *)((char *)&__src[29] + 8);
    v82 = *(_OWORD *)((char *)&__src[28] + 8);
    v78 = *(_OWORD *)((char *)&__src[31] + 8);
    v80 = *(_OWORD *)((char *)&__src[30] + 8);
    v75 = *(_OWORD *)((char *)&__src[33] + 8);
    v76 = *(_OWORD *)((char *)&__src[32] + 8);
    uint64_t v21 = *((void *)&__src[5] + 1);
    v72 = *(void *)&__src[35];
    v74 = *((void *)&__src[34] + 1);
    outlined init with take of ConnectionSnapshotReport?((uint64_t)&__src[35] + 8, (uint64_t)v84, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
    v68 = __src[81];
    v70 = __src[80];
    uint64_t v22 = __src[82];
    v65 = __src[83];
    v63 = *((void *)&__src[83] + 1);
    v61 = __src[84];
    v59 = *((void *)&__src[84] + 1);
    v57 = __src[85];
    v53 = *(void *)&__src[86];
    v55 = *((void *)&__src[85] + 1);
    uint64_t v51 = DWORD2(__src[86]);
    v49 = BYTE12(__src[86]);
    uint64_t v47 = *(void *)&__src[87];
    int v45 = BYTE8(__src[87]);
    char v43 = *(void *)&__src[88];
    uint64_t v41 = BYTE8(__src[88]);
    uint64_t v40 = *(void *)&__src[89];
    uint64_t v23 = BYTE8(__src[89]);
    *(void *)&__dst[0] = v16;
    BYTE8(__dst[0]) = v17;
    __dst[1] = v38;
    __dst[2] = v18;
    LODWORD(__dst[3]) = v19;
    BYTE4(__dst[3]) = v20;
    *(_OWORD *)((char *)&__dst[3] + 8) = v36;
    *(_OWORD *)((char *)&__dst[4] + 8) = v34;
    *((void *)&__dst[5] + 1) = v21;
    outlined init with take of ConnectionSnapshotReport?((uint64_t)v86, (uint64_t)&__dst[6], &demangling cache variable for type metadata for ConnectionPreparationReport?);
    *(_OWORD *)((char *)&__dst[28] + 8) = v82;
    *(_OWORD *)((char *)&__dst[29] + 8) = v81;
    *(_OWORD *)((char *)&__dst[30] + 8) = v80;
    *(_OWORD *)((char *)&__dst[31] + 8) = v78;
    *(_OWORD *)((char *)&__dst[32] + 8) = v76;
    *(_OWORD *)((char *)&__dst[33] + 8) = v75;
    *((void *)&__dst[34] + 1) = v74;
    *(void *)&__dst[35] = v72;
    outlined init with take of ConnectionSnapshotReport?((uint64_t)v84, (uint64_t)&__dst[35] + 8, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
    __dst[80] = v70;
    __dst[81] = v68;
    __dst[82] = v22;
    LOBYTE(__dst[83]) = v65;
    *((void *)&__dst[83] + 1) = v63;
    LOBYTE(__dst[84]) = v61;
    *((void *)&__dst[84] + 1) = v59;
    LOBYTE(__dst[85]) = v57;
    *((void *)&__dst[85] + 1) = v55;
    *(void *)&__dst[86] = v53;
    DWORD2(__dst[86]) = v51;
    BYTE12(__dst[86]) = v49;
    *(void *)&__dst[87] = v47;
    BYTE8(__dst[87]) = v45;
    *(void *)&__dst[88] = v43;
    BYTE8(__dst[88]) = v41;
    *(void *)&__dst[89] = v40;
    BYTE8(__dst[89]) = v23;
    outlined release of ConnectionMetrics((uint64_t)__dst);
    outlined release of ConnectionInterfaceReport?(v90);
    _s11SiriNetwork25ConnectionInterfaceReportVSgWOi0_(v85);
    uint64_t v24 = (__n128 *)v85;
  }
  else
  {
    outlined init with take of ConnectionSnapshotReport?((uint64_t)&__src[8] + 8, (uint64_t)v84, (uint64_t *)&demangling cache variable for type metadata for ConnectionInterfaceReport?);
    memcpy(__dst, __src, 0x599uLL);
    outlined release of ConnectionInterfaceReport?(v84);
    outlined release of ConnectionMetrics((uint64_t)__dst);
    outlined release of ConnectionInterfaceReport?(v90);
    uint64_t v24 = v84;
  }
  uint64_t v25 = v83;
LABEL_11:
  outlined init with take of ConnectionSnapshotReport?((uint64_t)v24, v25, (uint64_t *)&demangling cache variable for type metadata for ConnectionInterfaceReport?);
  OUTLINED_FUNCTION_29();
}

uint64_t ConnectionProviderProtocol.connectionType.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(a2 + 280))();
  if (result)
  {
    char v7 = 17;
  }
  else
  {
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a2 + 160))(v8, a1, a2);
    outlined init with take of ConnectionSnapshotReport?((uint64_t)v8, (uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for ConnectionInterfaceReport?);
    outlined init with take of ConnectionSnapshotReport?((uint64_t)v9, (uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for ConnectionInterfaceReport?);
    uint64_t result = _s11SiriNetwork25ConnectionInterfaceReportVSgWOg((uint64_t)v10);
    if (result == 1)
    {
      char v7 = 0;
    }
    else
    {
      uint64_t result = outlined release of ConnectionInterfaceReport?(v9);
      char v7 = v10[32];
    }
  }
  *a3 = v7;
  return result;
}

Swift::Void __swiftcall ConnectionProviderProtocol.close()()
{
  OUTLINED_FUNCTION_22();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  OUTLINED_FUNCTION_0_0();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_0_1();
  uint64_t v10 = v9 - v8;
  uint64_t v21 = type metadata accessor for DispatchQoS();
  OUTLINED_FUNCTION_0_0();
  uint64_t v12 = v11;
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_0_1();
  uint64_t v16 = v15 - v14;
  uint64_t v17 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 152))(v3, v1);
  uint64_t v18 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v19 = (void *)swift_allocObject();
  v19[2] = v3;
  v19[3] = v1;
  v19[4] = v18;
  v22[4] = partial apply for closure #1 in ConnectionProviderProtocol.close();
  v22[5] = v19;
  v22[0] = MEMORY[0x263EF8330];
  v22[1] = 1107296256;
  v22[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v22[3] = &block_descriptor_1;
  uint64_t v20 = _Block_copy(v22);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2611B24E0](0, v16, v10, v20);
  _Block_release(v20);

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v10, v4);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v16, v21);
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_29();
}

uint64_t closure #1 in ConnectionProviderProtocol.close()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 16;
  swift_beginAccess();
  uint64_t result = MEMORY[0x2611B37F0](v5);
  if (result)
  {
    (*(void (**)(void, uint64_t, uint64_t))(a3 + 488))(0, a2, a3);
    return swift_unknownObjectRelease();
  }
  return result;
}

void *ConnectionProviderProtocol.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a3 + 144))(__src, a2, a3);
  memcpy(v5, __src, sizeof(v5));
  ConnectionConfiguration.hash(into:)(a1);
  return outlined release of ConnectionConfiguration(__src);
}

uint64_t static ConnectionProviderProtocol.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v6)(void *__return_ptr, uint64_t, uint64_t);
  unsigned char v8[520];
  unsigned char __dst[520];
  void __src[65];
  void v11[65];

  uint64_t v4 = a4;
  uint64_t v6 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(a4 + 144);
  v6(__src, a3, a4);
  memcpy(__dst, __src, 0x204uLL);
  v6(v11, a3, v4);
  memcpy(v8, v11, 0x204uLL);
  LOBYTE(v4) = static ConnectionConfiguration.== infix(_:_:)((uint64_t)__dst, (uint64_t)v8);
  outlined release of ConnectionConfiguration(v11);
  outlined release of ConnectionConfiguration(__src);
  return v4 & 1;
}

void ConnectionProviderProtocol.updateConnectionMetrics(with:completion:)()
{
  OUTLINED_FUNCTION_22();
  uint64_t v1 = MEMORY[0x270FA5388](v0);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  v182 = v6;
  uint64_t v7 = *(void *)(v1 + 16);
  uint64_t v183 = *(void *)(v1 + 24);
  uint64_t v8 = *(int8x16_t **)(v1 + 32);
  int v9 = *(_DWORD *)(v1 + 48);
  char v10 = *(unsigned char *)(v1 + 52);
  outlined init with take of ConnectionSnapshotReport?(v1 + 568, (uint64_t)v333, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  uint64_t v11 = *(void (**)(unint64_t *))(v3 + 56);
  uint64_t v12 = OUTLINED_FUNCTION_18();
  v11(v12);
  *(_DWORD *)(v13 + 48) = v9;
  *(unsigned char *)(v13 + 52) = v10;
  uint64_t v14 = OUTLINED_FUNCTION_12();
  v15(v14);
  swift_bridgeObjectRetain();
  uint64_t v16 = OUTLINED_FUNCTION_18();
  uint64_t v17 = (void (*)(unint64_t *))((uint64_t (*)(unint64_t *))v11)(v16);
  *(void *)(v18 + 16) = v7;
  swift_bridgeObjectRelease();
  uint64_t v19 = OUTLINED_FUNCTION_12();
  v17(v19);
  swift_bridgeObjectRetain();
  uint64_t v20 = (void (*)(unint64_t *))((uint64_t (*)(void *, uint64_t, uint64_t))v11)(v334, v5, v3);
  *(void *)(v21 + 24) = v183;
  *(void *)(v21 + 32) = v8;
  swift_bridgeObjectRelease();
  uint64_t v22 = OUTLINED_FUNCTION_12();
  v20(v22);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v3 + 40))(v334, v5, v3);
  outlined release of ConnectionMetrics((uint64_t)v334);
  outlined init with take of ConnectionSnapshotReport?((uint64_t)&v335, (uint64_t)v336, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  OUTLINED_FUNCTION_2_1((uint64_t)v336);
  if (v51)
  {
    _s11SiriNetwork010ConnectionB6ReportVSgWOi0_(v331);
    uint64_t v23 = OUTLINED_FUNCTION_19();
    _s11SiriNetwork25ConnectionInterfaceReportVSgWOi0_(v23);
    if (one-time initialization token for sharedNetworkAnalytics != -1) {
      swift_once();
    }
    uint64_t v24 = static NetworkAnalytics.sharedNetworkAnalytics;
    LODWORD(v332[0]) = 0;
    v332[1] = 0;
    v332[2] = 0xE000000000000000;
    v332[3] = 0;
    v332[4] = 0xE000000000000000;
    outlined init with take of ConnectionSnapshotReport?((uint64_t)v331, (uint64_t)&v332[5], (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
    v332[46] = 0;
    v332[45] = 0;
    LOBYTE(v332[47]) = 1;
    uint64_t v25 = OUTLINED_FUNCTION_19();
    outlined init with take of ConnectionSnapshotReport?((uint64_t)v25, v26, v27);
    v332[85] = MEMORY[0x263F8EE78];
    v332[86] = MEMORY[0x263F8EE78];
    LODWORD(v332[87]) = 4;
    v332[88] = v24;
    uint64_t v28 = OUTLINED_FUNCTION_20();
    memcpy(v28, v332, 0x2C8uLL);
    uint64_t v29 = OUTLINED_FUNCTION_20();
    destructiveProjectEnumData for ConnectionConfigurationError(v29);
    id v30 = v24;
    uint64_t v31 = OUTLINED_FUNCTION_34();
    uint64_t v32 = (void (*)(unint64_t *, void))((uint64_t (*)(unint64_t *, uint64_t, uint64_t))v11)(v31, v5, v3);
    uint64_t v8 = (int8x16_t *)(v33 + 568);
    outlined init with take of ConnectionSnapshotReport?(v33 + 568, (uint64_t)&v298, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
    uint64_t v34 = OUTLINED_FUNCTION_20();
    outlined init with take of ConnectionSnapshotReport?((uint64_t)v34, (uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
    outlined release of ConnectionSnapshotReport?((uint64_t)&v298);
    uint64_t v35 = OUTLINED_FUNCTION_34();
    v32(v35, 0);
  }
  uint64_t v36 = OUTLINED_FUNCTION_16();
  v37(v36);
  outlined init with take of ConnectionSnapshotReport?((uint64_t)&v312, (uint64_t)v331, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  outlined init with take of ConnectionSnapshotReport?((uint64_t)v331, (uint64_t)v332, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  OUTLINED_FUNCTION_2_1((uint64_t)v332);
  if (v51)
  {
    char v163 = v299;
    uint64_t v8 = (int8x16_t *)&v283;
    long long v162 = v300;
    uint64_t v38 = v298;
    uint64_t v161 = v301;
    unint64_t v47 = v303;
    char v160 = v304;
    long long v158 = v306;
    long long v159 = v305;
    uint64_t v156 = v302;
    uint64_t v157 = v307;
    OUTLINED_FUNCTION_32();
    outlined init with take of ConnectionSnapshotReport?(v39, v40, v41);
    OUTLINED_FUNCTION_11();
    uint64_t v42 = v310;
    uint64_t v43 = v311;
    long long v180 = v313[43];
    long long v181 = v313[42];
    uint64_t v178 = v315;
    uint64_t v179 = v314;
    char v177 = v316;
    uint64_t v176 = v317;
    char v175 = v318;
    uint64_t v174 = v319;
    char v173 = v320;
    uint64_t v171 = v322;
    uint64_t v172 = v321;
    char v169 = v324;
    int v170 = v323;
    uint64_t v168 = v325;
    char v167 = v326;
    uint64_t v166 = v327;
    char v165 = v328;
    uint64_t v164 = v329;
    char v44 = v330;
    char v267 = v163;
    long long v268 = v162;
    uint64_t v266 = v38;
    uint64_t v269 = v161;
    uint64_t v270 = v156;
    int v271 = v47;
    char v272 = v160;
    long long v273 = v159;
    long long v274 = v158;
    uint64_t v275 = v157;
    int v45 = OUTLINED_FUNCTION_19();
    outlined init with take of ConnectionSnapshotReport?((uint64_t)v45, v46, &demangling cache variable for type metadata for ConnectionPreparationReport?);
    OUTLINED_FUNCTION_13(v276, v150, v151, v152, v153, v154, v155);
    uint64_t v277 = v42;
    uint64_t v278 = v43;
    outlined init with take of ConnectionSnapshotReport?((uint64_t)v331, (uint64_t)v279, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
    *(_OWORD *)&v279[712] = v181;
    long long v280 = v180;
    uint64_t v281 = v179;
    uint64_t v282 = v178;
    char v283 = v177;
    uint64_t v284 = v176;
    char v285 = v175;
    uint64_t v286 = v174;
    char v287 = v173;
    uint64_t v288 = v172;
    uint64_t v289 = v171;
    int v290 = v170;
    char v291 = v169;
    uint64_t v292 = v168;
    char v293 = v167;
    uint64_t v294 = v166;
    char v295 = v165;
    uint64_t v296 = v164;
    char v297 = v44;
    outlined release of ConnectionMetrics((uint64_t)&v266);
  }
  else
  {
    unint64_t v47 = (unint64_t)&demangling cache variable for type metadata for ConnectionNetworkReport?;
    outlined init with take of ConnectionSnapshotReport?((uint64_t)v313, (uint64_t)&v227, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
    OUTLINED_FUNCTION_28();
    outlined retain of ConnectionNetworkReport?(&v227);
    outlined release of ConnectionMetrics((uint64_t)&v266);
    OUTLINED_FUNCTION_32();
    outlined init with take of ConnectionSnapshotReport?(v48, v49, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
    char v50 = OUTLINED_FUNCTION_19();
    OUTLINED_FUNCTION_6_0((uint64_t)v50);
    if (!v51)
    {
      outlined retain of ConnectionNetworkReport?(&v227);
      goto LABEL_14;
    }
  }
  OUTLINED_FUNCTION_0_2();
  uint64_t v53 = v52();
  uint64_t v55 = OUTLINED_FUNCTION_4_1(v53, v54);
  OUTLINED_FUNCTION_5_1(v55);
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_2_1((uint64_t)&v298);
  if (!v51)
  {
    v225[0] = 1;
    v223[0] = 1;
    LOBYTE(v219) = 1;
    v217[0] = 1;
    v215[0] = 1;
    v212[0] = 1;
    v210[0] = 1;
    v209[0] = 1;
    v206[0] = 1;
    v204[0] = 1;
    v199[0] = 1;
    v197[0] = 1;
    v196[0] = 1;
    v194[0] = 1;
    v192[0] = 1;
    v227.n128_u32[0] = 0;
    v227.n128_u8[4] = 1;
    uint64_t v228 = 0;
    v227.n128_u64[1] = 0;
    uint64_t v229 = 0;
    char v230 = 1;
    long long v233 = 0u;
    long long v232 = 0u;
    long long v231 = 0u;
    char v235 = 1;
    int v234 = 0;
    int v236 = 0;
    char v237 = 1;
    uint64_t v238 = MEMORY[0x263F8EE80];
    uint64_t v239 = 0;
    uint64_t v240 = 0;
    uint64_t v241 = 0;
    char v242 = 1;
    char v244 = 1;
    uint64_t v243 = 0;
    uint64_t v245 = 0;
    char v246 = 1;
    char v248 = 1;
    uint64_t v247 = 0;
    uint64_t v249 = 0;
    char v250 = 1;
    char v252 = 1;
    uint64_t v251 = 0;
    uint64_t v253 = 0;
    uint64_t v254 = 0;
    uint64_t v255 = 0;
    char v256 = 1;
    char v258 = 1;
    char v259 = 0;
    uint64_t v257 = 0;
    uint64_t v260 = 0;
    char v261 = 1;
    char v263 = 1;
    uint64_t v262 = 0;
    uint64_t v264 = 0;
    char v265 = 1;
    uint64_t v56 = OUTLINED_FUNCTION_34();
    destructiveProjectEnumData for ConnectionConfigurationError(v56);
    v8 += 38;
    OUTLINED_FUNCTION_32();
    outlined init with take of ConnectionSnapshotReport?((uint64_t)v8, v57, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
    v58 = OUTLINED_FUNCTION_34();
    outlined init with take of ConnectionSnapshotReport?((uint64_t)v58, (uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
    v59 = (__n128 *)OUTLINED_FUNCTION_19();
    outlined retain of ConnectionNetworkReport?(v59);
  }
  OUTLINED_FUNCTION_7_0();
  ((void (*)(void))v47)();
LABEL_14:
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_24();
  uint64_t v60 = ((uint64_t (*)(void))v11)();
  uint64_t v62 = OUTLINED_FUNCTION_4_1(v60, v61);
  outlined init with take of ConnectionSnapshotReport?(v62, (uint64_t)&v227, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  OUTLINED_FUNCTION_32();
  outlined init with take of ConnectionSnapshotReport?(v63, v64, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  v65 = OUTLINED_FUNCTION_19();
  uint64_t v66 = OUTLINED_FUNCTION_2_1((uint64_t)v65);
  if (!v51)
  {
    OUTLINED_FUNCTION_3_1(v66, v67, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
    OUTLINED_FUNCTION_2_1((uint64_t)&v298);
    if (v51) {
      unsigned int v68 = 1;
    }
    else {
      unsigned int v68 = 0;
    }
    char v69 = v68 | v309;
    int32x2_t v70 = vdup_n_s32(v68);
    v71.i64[0] = v70.u32[0];
    v71.i64[1] = v70.u32[1];
    v8[58] = vandq_s8(v308, (int8x16_t)vcgezq_s64(vshlq_n_s64(v71, 0x3FuLL)));
    v8[59].i8[0] = v69 & 1;
  }
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_30();
  ((void (*)(void))v47)();
  OUTLINED_FUNCTION_24();
  uint64_t v72 = ((uint64_t (*)(void))v11)();
  uint64_t v74 = OUTLINED_FUNCTION_4_1(v72, v73);
  outlined init with take of ConnectionSnapshotReport?(v74, (uint64_t)v225, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  outlined init with take of ConnectionSnapshotReport?((uint64_t)v225, (uint64_t)v226, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  OUTLINED_FUNCTION_2_1((uint64_t)v226);
  if (v51)
  {
    OUTLINED_FUNCTION_7_0();
    ((void (*)(void))v47)();
  }
  else
  {
    outlined init with take of ConnectionSnapshotReport?((uint64_t)v8[38].i64, (uint64_t)v223, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
    OUTLINED_FUNCTION_5_1((uint64_t)v223);
    uint64_t v76 = OUTLINED_FUNCTION_6_0((uint64_t)&v266);
    if (!v75)
    {
      OUTLINED_FUNCTION_1_3(v76, v77, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
      OUTLINED_FUNCTION_2_1((uint64_t)&v298);
      if (v51
        || (outlined init with take of ConnectionSnapshotReport?((uint64_t)&v218, (uint64_t)&v219, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?), OUTLINED_FUNCTION_6_0((uint64_t)&v219), v51))
      {
        __int32 v78 = 0;
        char v79 = 1;
      }
      else
      {
        __int32 v78 = v219;
        char v79 = v220;
      }
      v8[38].i32[0] = v78;
      v8[38].i8[4] = v79;
    }
    OUTLINED_FUNCTION_15();
    ((void (*)(void))v47)();
  }
  outlined init with take of ConnectionSnapshotReport?((uint64_t)v333, (uint64_t)v223, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  OUTLINED_FUNCTION_2_1((uint64_t)v223);
  if (!v51)
  {
    outlined init with take of ConnectionSnapshotReport?((uint64_t)&v224, (uint64_t)&v219, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
    OUTLINED_FUNCTION_6_0((uint64_t)&v219);
    if (!v51)
    {
      uint64_t v8 = v222;
      if (v222)
      {
        uint64_t v80 = v221;
        swift_bridgeObjectRetain();
        OUTLINED_FUNCTION_24();
        unint64_t v47 = ((uint64_t (*)(void))v11)();
        uint64_t v82 = v81;
        outlined init with take of ConnectionSnapshotReport?(v81 + 568, (uint64_t)&v266, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
        outlined init with take of ConnectionSnapshotReport?((uint64_t)&v266, (uint64_t)&v298, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
        OUTLINED_FUNCTION_2_1((uint64_t)&v298);
        if (v51)
        {
          swift_bridgeObjectRelease();
          ((void (*)(unsigned char *, void))v47)(v212, 0);
        }
        else
        {
          outlined init with take of ConnectionSnapshotReport?(v82 + 608, (uint64_t)v215, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
          outlined init with take of ConnectionSnapshotReport?((uint64_t)v215, (uint64_t)v217, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
          OUTLINED_FUNCTION_6_0((uint64_t)v217);
          if (!v83)
          {
            *(void *)(v82 + 616) = v80;
            *(void *)(v82 + 624) = v8;
          }
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_15();
          ((void (*)(void))v47)();
        }
      }
    }
  }
  OUTLINED_FUNCTION_0_2();
  uint64_t v84 = ((uint64_t (*)(void))v11)();
  uint64_t v86 = OUTLINED_FUNCTION_4_1(v84, v85);
  outlined init with take of ConnectionSnapshotReport?(v86, (uint64_t)v217, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  outlined init with take of ConnectionSnapshotReport?((uint64_t)v217, (uint64_t)&v219, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  OUTLINED_FUNCTION_2_1((uint64_t)&v219);
  if (v51)
  {
    OUTLINED_FUNCTION_7_0();
    ((void (*)(void))v47)();
  }
  else
  {
    outlined init with take of ConnectionSnapshotReport?((uint64_t)v8[38].i64, (uint64_t)v215, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
    OUTLINED_FUNCTION_5_1((uint64_t)v215);
    uint64_t v88 = OUTLINED_FUNCTION_6_0((uint64_t)&v266);
    if (!v87)
    {
      OUTLINED_FUNCTION_1_3(v88, v89, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
      OUTLINED_FUNCTION_2_1((uint64_t)&v298);
      if (v51
        || (outlined init with take of ConnectionSnapshotReport?((uint64_t)&v211, (uint64_t)v212, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?), OUTLINED_FUNCTION_6_0((uint64_t)v212), v51))
      {
        OUTLINED_FUNCTION_21();
      }
      else
      {
        uint64_t v90 = v213;
        __int8 v91 = v214;
      }
      v8[57].i64[0] = v90;
      v8[57].i8[8] = v91;
    }
    OUTLINED_FUNCTION_15();
    ((void (*)(void))v47)();
  }
  outlined init with take of ConnectionSnapshotReport?((uint64_t)v333, (uint64_t)v215, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  OUTLINED_FUNCTION_2_1((uint64_t)v215);
  if (!v51)
  {
    outlined init with take of ConnectionSnapshotReport?((uint64_t)&v216, (uint64_t)v212, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
    OUTLINED_FUNCTION_6_0((uint64_t)v212);
    if (!v51)
    {
      __int8 v92 = v212[265];
      OUTLINED_FUNCTION_0_2();
      uint64_t v94 = v93();
      uint64_t v96 = OUTLINED_FUNCTION_4_1(v94, v95);
      OUTLINED_FUNCTION_5_1(v96);
      OUTLINED_FUNCTION_14();
      OUTLINED_FUNCTION_2_1((uint64_t)&v298);
      if (v51)
      {
        OUTLINED_FUNCTION_30();
        ((void (*)(void))v47)();
      }
      else
      {
        OUTLINED_FUNCTION_26((uint64_t)v8[38].i64);
        outlined init with take of ConnectionSnapshotReport?((uint64_t)v209, (uint64_t)v210, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
        OUTLINED_FUNCTION_6_0((uint64_t)v210);
        if (!v97) {
          v8[54].i8[9] = v92;
        }
        OUTLINED_FUNCTION_15();
        ((void (*)(void))v47)();
      }
    }
  }
  OUTLINED_FUNCTION_0_2();
  uint64_t v98 = ((uint64_t (*)(void))v11)();
  uint64_t v100 = OUTLINED_FUNCTION_4_1(v98, v99);
  outlined init with take of ConnectionSnapshotReport?(v100, (uint64_t)v210, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  outlined init with take of ConnectionSnapshotReport?((uint64_t)v210, (uint64_t)v212, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  OUTLINED_FUNCTION_2_1((uint64_t)v212);
  if (v51)
  {
    OUTLINED_FUNCTION_7_0();
    ((void (*)(void))v47)();
  }
  else
  {
    OUTLINED_FUNCTION_26((uint64_t)v8[38].i64);
    OUTLINED_FUNCTION_5_1((uint64_t)v209);
    uint64_t v102 = OUTLINED_FUNCTION_6_0((uint64_t)&v266);
    if (!v101)
    {
      OUTLINED_FUNCTION_1_3(v102, v103, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
      OUTLINED_FUNCTION_2_1((uint64_t)&v298);
      if (v51
        || (outlined init with take of ConnectionSnapshotReport?((uint64_t)v205, (uint64_t)v206, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?), OUTLINED_FUNCTION_6_0((uint64_t)v206), v51))
      {
        OUTLINED_FUNCTION_21();
      }
      else
      {
        uint64_t v104 = v207;
        __int8 v105 = v208;
      }
      v8[55].i64[0] = v104;
      v8[55].i8[8] = v105;
    }
    OUTLINED_FUNCTION_15();
    ((void (*)(void))v47)();
  }
  OUTLINED_FUNCTION_0_2();
  uint64_t v106 = ((uint64_t (*)(void))v11)();
  uint64_t v108 = OUTLINED_FUNCTION_4_1(v106, v107);
  outlined init with take of ConnectionSnapshotReport?(v108, (uint64_t)v206, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  OUTLINED_FUNCTION_26((uint64_t)v206);
  OUTLINED_FUNCTION_2_1((uint64_t)v209);
  if (v51)
  {
    OUTLINED_FUNCTION_7_0();
    ((void (*)(void))v47)();
  }
  else
  {
    outlined init with take of ConnectionSnapshotReport?((uint64_t)v8[38].i64, (uint64_t)v204, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
    OUTLINED_FUNCTION_5_1((uint64_t)v204);
    uint64_t v110 = OUTLINED_FUNCTION_6_0((uint64_t)&v266);
    if (!v109)
    {
      OUTLINED_FUNCTION_1_3(v110, v111, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
      OUTLINED_FUNCTION_2_1((uint64_t)&v298);
      if (v51
        || (outlined init with take of ConnectionSnapshotReport?((uint64_t)&v198, (uint64_t)v199, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?), OUTLINED_FUNCTION_6_0((uint64_t)v199), v51))
      {
        OUTLINED_FUNCTION_21();
      }
      else
      {
        uint64_t v112 = v202;
        __int8 v113 = v203;
      }
      v8[56].i64[0] = v112;
      v8[56].i8[8] = v113;
    }
    OUTLINED_FUNCTION_15();
    ((void (*)(void))v47)();
  }
  outlined init with take of ConnectionSnapshotReport?((uint64_t)v333, (uint64_t)v204, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  OUTLINED_FUNCTION_2_1((uint64_t)v204);
  if (!v51)
  {
    outlined init with take of ConnectionSnapshotReport?((uint64_t)v205, (uint64_t)v199, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
    OUTLINED_FUNCTION_6_0((uint64_t)v199);
    if (!v51 && (v201 & 1) == 0)
    {
      uint64_t v114 = v200;
      OUTLINED_FUNCTION_0_2();
      uint64_t v116 = v115();
      uint64_t v118 = OUTLINED_FUNCTION_4_1(v116, v117);
      OUTLINED_FUNCTION_5_1(v118);
      OUTLINED_FUNCTION_14();
      OUTLINED_FUNCTION_2_1((uint64_t)&v298);
      if (v51)
      {
        OUTLINED_FUNCTION_30();
        ((void (*)(void))v47)();
      }
      else
      {
        outlined init with take of ConnectionSnapshotReport?((uint64_t)v8[38].i64, (uint64_t)v196, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
        outlined init with take of ConnectionSnapshotReport?((uint64_t)v196, (uint64_t)v197, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
        OUTLINED_FUNCTION_6_0((uint64_t)v197);
        if (!v119)
        {
          v8[39].i64[1] = v114;
          v8[40].i8[0] = 0;
        }
        OUTLINED_FUNCTION_15();
        ((void (*)(void))v47)();
      }
    }
  }
  OUTLINED_FUNCTION_0_2();
  uint64_t v120 = ((uint64_t (*)(void))v11)();
  uint64_t v122 = OUTLINED_FUNCTION_4_1(v120, v121);
  outlined init with take of ConnectionSnapshotReport?(v122, (uint64_t)v197, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  outlined init with take of ConnectionSnapshotReport?((uint64_t)v197, (uint64_t)v199, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  OUTLINED_FUNCTION_2_1((uint64_t)v199);
  if (v51)
  {
    OUTLINED_FUNCTION_7_0();
    ((void (*)(void))v47)();
  }
  else
  {
    outlined init with take of ConnectionSnapshotReport?((uint64_t)v8[38].i64, (uint64_t)v196, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
    OUTLINED_FUNCTION_5_1((uint64_t)v196);
    uint64_t v124 = OUTLINED_FUNCTION_6_0((uint64_t)&v266);
    if (!v123)
    {
      OUTLINED_FUNCTION_1_3(v124, v125, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
      OUTLINED_FUNCTION_2_1((uint64_t)&v298);
      if (v51
        || (outlined init with take of ConnectionSnapshotReport?((uint64_t)&v193, (uint64_t)v194, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?), OUTLINED_FUNCTION_6_0((uint64_t)v194), v51))
      {
        uint64_t v126 = 0;
        uint64_t v127 = 0;
      }
      else
      {
        uint64_t v126 = v195;
        uint64_t v127 = swift_bridgeObjectRetain();
      }
      v8[40].i64[1] = v126;
      v8[41].i64[0] = v127;
      swift_bridgeObjectRelease();
    }
    OUTLINED_FUNCTION_15();
    ((void (*)(void))v47)();
  }
  OUTLINED_FUNCTION_0_2();
  uint64_t v128 = ((uint64_t (*)(void))v11)();
  uint64_t v130 = OUTLINED_FUNCTION_4_1(v128, v129);
  outlined init with take of ConnectionSnapshotReport?(v130, (uint64_t)v194, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  outlined init with take of ConnectionSnapshotReport?((uint64_t)v194, (uint64_t)v196, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  OUTLINED_FUNCTION_2_1((uint64_t)v196);
  if (v51)
  {
    OUTLINED_FUNCTION_7_0();
    ((void (*)(void))v47)();
  }
  else
  {
    outlined init with take of ConnectionSnapshotReport?((uint64_t)v8[38].i64, (uint64_t)v192, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
    OUTLINED_FUNCTION_5_1((uint64_t)v192);
    uint64_t v132 = OUTLINED_FUNCTION_6_0((uint64_t)&v266);
    if (!v131)
    {
      OUTLINED_FUNCTION_1_3(v132, v133, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
      OUTLINED_FUNCTION_2_1((uint64_t)&v298);
      if (v51
        || (outlined init with take of ConnectionSnapshotReport?((uint64_t)&v188, (uint64_t)v189, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?), OUTLINED_FUNCTION_6_0((uint64_t)v189), v51))
      {
        OUTLINED_FUNCTION_21();
      }
      else
      {
        uint64_t v134 = v190;
        __int8 v135 = v191;
      }
      v8[53].i64[0] = v134;
      v8[53].i8[8] = v135;
    }
    OUTLINED_FUNCTION_15();
    ((void (*)(void))v47)();
  }
  OUTLINED_FUNCTION_0_2();
  uint64_t v136 = ((uint64_t (*)(void))v11)();
  uint64_t v138 = OUTLINED_FUNCTION_4_1(v136, v137);
  outlined init with take of ConnectionSnapshotReport?(v138, (uint64_t)v189, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  outlined init with take of ConnectionSnapshotReport?((uint64_t)v189, (uint64_t)v192, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  OUTLINED_FUNCTION_2_1((uint64_t)v192);
  if (v51)
  {
    OUTLINED_FUNCTION_7_0();
    ((void (*)(void))v47)();
  }
  else
  {
    outlined init with take of ConnectionSnapshotReport?((uint64_t)v8[38].i64, (uint64_t)v187, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
    OUTLINED_FUNCTION_5_1((uint64_t)v187);
    uint64_t v140 = OUTLINED_FUNCTION_6_0((uint64_t)&v266);
    if (v139)
    {
      v142 = OUTLINED_FUNCTION_25();
      ((void (*)(unint64_t *))v47)(v142);
    }
    else
    {
      OUTLINED_FUNCTION_3_1(v140, v141, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
      OUTLINED_FUNCTION_2_1((uint64_t)&v298);
      if (v143
        || (outlined init with take of ConnectionSnapshotReport?((uint64_t)&v302, (uint64_t)v184, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?), OUTLINED_FUNCTION_6_0((uint64_t)v184), v51))
      {
        OUTLINED_FUNCTION_21();
      }
      else
      {
        uint64_t v144 = v185;
        __int8 v145 = v186;
      }
      v8[54].i64[0] = v144;
      v8[54].i8[8] = v145;
      v146 = OUTLINED_FUNCTION_25();
      ((void (*)(unint64_t *))v47)(v146);
    }
  }
  if (v182)
  {
    uint64_t v147 = OUTLINED_FUNCTION_16();
    v148(v147);
    OUTLINED_FUNCTION_28();
    v149 = OUTLINED_FUNCTION_20();
    v182(v149);
    outlined release of ConnectionMetrics((uint64_t)&v298);
  }
  OUTLINED_FUNCTION_29();
}

uint64_t outlined release of ConnectionMetrics(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  uint64_t v36 = *(void *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 72);
  uint64_t v4 = *(void *)(a1 + 80);
  uint64_t v5 = *(void **)(a1 + 88);
  uint64_t v66 = *(void *)(a1 + 96);
  uint64_t v65 = *(void *)(a1 + 104);
  uint64_t v64 = *(void *)(a1 + 112);
  uint64_t v63 = *(void *)(a1 + 120);
  uint64_t v62 = *(void *)(a1 + 128);
  uint64_t v61 = *(void *)(a1 + 136);
  uint64_t v60 = *(void *)(a1 + 144);
  uint64_t v59 = *(void *)(a1 + 152);
  uint64_t v6 = *(void **)(a1 + 448);
  uint64_t v46 = *(void *)(a1 + 456);
  uint64_t v45 = *(void *)(a1 + 464);
  uint64_t v44 = *(void *)(a1 + 472);
  uint64_t v43 = *(void *)(a1 + 480);
  uint64_t v42 = *(void *)(a1 + 488);
  uint64_t v41 = *(void *)(a1 + 496);
  uint64_t v40 = *(void *)(a1 + 504);
  uint64_t v39 = *(void *)(a1 + 512);
  long long v33 = *(_OWORD *)(a1 + 520);
  long long v31 = *(_OWORD *)(a1 + 536);
  uint64_t v7 = *(void *)(a1 + 552);
  uint64_t v8 = *(void **)(a1 + 560);
  uint64_t v77 = *(void *)(a1 + 576);
  uint64_t v78 = *(void *)(a1 + 568);
  long long v75 = *(_OWORD *)(a1 + 648);
  long long v76 = *(_OWORD *)(a1 + 632);
  long long v73 = *(_OWORD *)(a1 + 680);
  long long v74 = *(_OWORD *)(a1 + 664);
  long long v71 = *(_OWORD *)(a1 + 712);
  long long v72 = *(_OWORD *)(a1 + 696);
  long long v69 = *(_OWORD *)(a1 + 744);
  long long v70 = *(_OWORD *)(a1 + 728);
  long long v68 = *(_OWORD *)(a1 + 760);
  long long v67 = *(_OWORD *)(a1 + 776);
  long long v58 = *(_OWORD *)(a1 + 792);
  long long v57 = *(_OWORD *)(a1 + 808);
  long long v54 = *(_OWORD *)(a1 + 824);
  long long v50 = *(_OWORD *)(a1 + 840);
  long long v48 = *(_OWORD *)(a1 + 856);
  long long v47 = *(_OWORD *)(a1 + 872);
  long long v38 = *(_OWORD *)(a1 + 888);
  long long v37 = *(_OWORD *)(a1 + 904);
  long long v35 = *(_OWORD *)(a1 + 920);
  long long v34 = *(_OWORD *)(a1 + 936);
  long long v32 = *(_OWORD *)(a1 + 952);
  long long v30 = *(_OWORD *)(a1 + 968);
  long long v29 = *(_OWORD *)(a1 + 984);
  long long v28 = *(_OWORD *)(a1 + 1000);
  uint64_t v49 = *(void *)(a1 + 584);
  uint64_t v51 = *(void *)(a1 + 592);
  uint64_t v52 = *(void *)(a1 + 600);
  uint64_t v53 = *(void *)(a1 + 608);
  uint64_t v55 = *(void *)(a1 + 616);
  uint64_t v56 = *(void *)(a1 + 624);
  long long v26 = *(_OWORD *)(a1 + 176);
  long long v27 = *(_OWORD *)(a1 + 160);
  long long v24 = *(_OWORD *)(a1 + 208);
  long long v25 = *(_OWORD *)(a1 + 192);
  long long v22 = *(_OWORD *)(a1 + 240);
  long long v23 = *(_OWORD *)(a1 + 224);
  long long v20 = *(_OWORD *)(a1 + 272);
  long long v21 = *(_OWORD *)(a1 + 256);
  long long v18 = *(_OWORD *)(a1 + 304);
  long long v19 = *(_OWORD *)(a1 + 288);
  long long v16 = *(_OWORD *)(a1 + 336);
  long long v17 = *(_OWORD *)(a1 + 320);
  long long v14 = *(_OWORD *)(a1 + 368);
  long long v15 = *(_OWORD *)(a1 + 352);
  long long v12 = *(_OWORD *)(a1 + 400);
  long long v13 = *(_OWORD *)(a1 + 384);
  long long v10 = *(_OWORD *)(a1 + 432);
  long long v11 = *(_OWORD *)(a1 + 416);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of ConnectionHTTPHeaderReport?(v36, v2, v3, v4, v5);
  outlined consume of ConnectionPreparationReport?(v66, v65, v64, v63, v62, v61, v60, v59, v27, *((uint64_t *)&v27 + 1), v26, *((uint64_t *)&v26 + 1), v25, *((uint64_t *)&v25 + 1), v24, *((uint64_t *)&v24 + 1), v23, *((uint64_t *)&v23 + 1), v22,
    *((uint64_t *)&v22 + 1),
    v21,
    *((uint64_t *)&v21 + 1),
    v20,
    *((uint64_t *)&v20 + 1),
    v19,
    *((uint64_t *)&v19 + 1),
    v18,
    *((uint64_t *)&v18 + 1),
    v17,
    *((uint64_t *)&v17 + 1),
    v16,
    *((uint64_t *)&v16 + 1),
    v15,
    *((uint64_t *)&v15 + 1),
    v14,
    *((uint64_t *)&v14 + 1),
    v13,
    *((uint64_t *)&v13 + 1),
    v12,
    *((uint64_t *)&v12 + 1),
    v11,
    *((uint64_t *)&v11 + 1),
    v10,
    *((uint64_t *)&v10 + 1),
    v6);
  outlined consume of ConnectionEstablishmentReport?(v46, v45, v44, v43, v42, v41, v40, v39, v33, *((uint64_t *)&v33 + 1), v31, *((uint64_t *)&v31 + 1), v7, v8);
  outlined consume of ConnectionSnapshotReport?(v78, v77, v49, v51, v52, v53, v55, v56, v76, *((uint64_t *)&v76 + 1), v75, *((uint64_t *)&v75 + 1), v74, *((uint64_t *)&v74 + 1), v73, *((uint64_t *)&v73 + 1), v72, *((uint64_t *)&v72 + 1), v71,
    *((uint64_t *)&v71 + 1),
    v70,
    *((uint64_t *)&v70 + 1),
    v69,
    *((uint64_t *)&v69 + 1),
    v68,
    *((uint64_t *)&v68 + 1),
    v67,
    *((uint64_t *)&v67 + 1),
    v58,
    *((uint64_t *)&v58 + 1),
    v57,
    *((uint64_t *)&v57 + 1),
    v54,
    *((uint64_t *)&v54 + 1),
    v50,
    *((uint64_t *)&v50 + 1),
    v48,
    *((uint64_t *)&v48 + 1),
    v47,
    *((uint64_t *)&v47 + 1),
    v38,
    *((uint64_t *)&v38 + 1),
    v37,
    *((uint64_t *)&v37 + 1),
    v35,
    *((uint64_t *)&v35 + 1),
    v34,
    *((uint64_t *)&v34 + 1),
    v32,
    *((uint64_t *)&v32 + 1),
    v30,
    *((uint64_t *)&v30 + 1),
    v29,
    *((uint64_t *)&v29 + 1),
    v28);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined consume of ConnectionHTTPHeaderReport?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a5)
  {

    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined consume of ConnectionPreparationReport?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45)
{
  if (a43)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of ConnectionInterfaceReport?(a6, a7, a8, a9, a10, a11, a12);

    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void outlined consume of ConnectionInterfaceReport?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of ConnectionTCPInfoMetrics?(a6, a7);
  }
}

uint64_t outlined consume of ConnectionEstablishmentReport?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  if (a8)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined consume of ConnectionSnapshotReport?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  if (a3)
  {
    uint64_t v59 = (void *)STACK[0x630];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of ConnectionNetworkReport?(a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19);
    outlined consume of ConnectionInterfaceReport?(a49, a50, a51, a52, a53, a54, a55);

    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined consume of ConnectionNetworkReport?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t result = a14;
  if (a14)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _s11SiriNetwork24ConnectionSnapshotReportVSgWOg(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 16);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

uint64_t outlined copy of ConnectionNetworkReport?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t _s11SiriNetwork010ConnectionB6ReportVSgWOg(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 104);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

uint64_t outlined retain of ConnectionNetworkReport?(__n128 *a1)
{
  OUTLINED_FUNCTION_8(a1);
  OUTLINED_FUNCTION_9_0();
  v2();
  return v1;
}

void _s11SiriNetwork010ConnectionB6ReportVSgWOi0_(void *a1)
{
}

void _s11SiriNetwork25ConnectionInterfaceReportVSgWOi0_(void *a1)
{
}

uint64_t outlined release of ConnectionSnapshotReport?(uint64_t a1)
{
  long long v14 = *(_OWORD *)(a1 + 416);
  long long v12 = *(_OWORD *)(a1 + 384);
  long long v13 = *(_OWORD *)(a1 + 400);
  long long v10 = *(_OWORD *)(a1 + 352);
  long long v11 = *(_OWORD *)(a1 + 368);
  long long v8 = *(_OWORD *)(a1 + 320);
  long long v9 = *(_OWORD *)(a1 + 336);
  long long v6 = *(_OWORD *)(a1 + 288);
  long long v7 = *(_OWORD *)(a1 + 304);
  long long v4 = *(_OWORD *)(a1 + 256);
  long long v5 = *(_OWORD *)(a1 + 272);
  long long v3 = *(_OWORD *)(a1 + 224);
  outlined consume of ConnectionSnapshotReport?(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    v3,
    *((uint64_t *)&v3 + 1),
    *(void *)(a1 + 240),
    *(void *)(a1 + 248),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((uint64_t *)&v5 + 1),
    v6,
    *((uint64_t *)&v6 + 1),
    v7,
    *((uint64_t *)&v7 + 1),
    v8,
    *((uint64_t *)&v8 + 1),
    v9,
    *((uint64_t *)&v9 + 1),
    v10,
    *((uint64_t *)&v10 + 1),
    v11,
    *((uint64_t *)&v11 + 1),
    v12,
    *((uint64_t *)&v12 + 1),
    v13,
    *((uint64_t *)&v13 + 1),
    v14,
    *((uint64_t *)&v14 + 1),
    *(void *)(a1 + 432));
  return a1;
}

uint64_t sub_25D6DD1AC()
{
  swift_unknownObjectWeakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_25D6DD1E4()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t partial apply for closure #1 in ConnectionProviderProtocol.close()()
{
  return closure #1 in ConnectionProviderProtocol.close()(v0[4], v0[2], v0[3]);
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t _s11SiriNetwork25ConnectionInterfaceReportVSgWOg(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

uint64_t outlined release of ConnectionInterfaceReport?(__n128 *a1)
{
  OUTLINED_FUNCTION_8(a1);
  OUTLINED_FUNCTION_9_0();
  v2();
  return v1;
}

void outlined copy of ConnectionInterfaceReport?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of ConnectionTCPInfoMetrics?(a6, a7);
  }
}

uint64_t _s11SiriNetwork27ConnectionPreparationReportVSgWOg(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 336);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *outlined release of ConnectionConfiguration(void *a1)
{
  uint64_t v2 = (void *)a1[13];
  uint64_t v12 = a1[41];
  uint64_t v13 = a1[40];
  uint64_t v10 = a1[43];
  uint64_t v11 = a1[42];
  uint64_t v8 = a1[45];
  uint64_t v9 = a1[44];
  uint64_t v6 = a1[47];
  uint64_t v7 = a1[46];
  uint64_t v3 = a1[49];
  uint64_t v5 = a1[48];
  uint64_t v14 = a1[51];
  uint64_t v15 = a1[50];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of ConnectionPolicy?(v13, v12, v11, v10, v9, v8, v7, v6, v5, v3);
  outlined consume of ConnectionPolicyRoute?(v15, v14);
  return a1;
}

uint64_t outlined consume of ConnectionPolicy?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result = a10;
  if (a10)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined consume of ConnectionPolicyRoute?(uint64_t a1, uint64_t a2)
{
  if (a2 != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined copy of ConnectionPolicy?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t __swift_storeEnumTagSinglePayload(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t outlined init with take of ConnectionSnapshotReport?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t _s11SiriNetwork24ConnectionTCPInfoMetricsVSgWOg(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  int v2 = v1 - 1;
  if (v2 < 0) {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t outlined retain of ConnectionTCPInfoMetrics?(uint64_t a1)
{
  OUTLINED_FUNCTION_9_0();
  v2();
  return a1;
}

uint64_t OUTLINED_FUNCTION_1_3(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return outlined init with take of ConnectionSnapshotReport?((uint64_t)&STACK[0x49D8], (uint64_t)&STACK[0x3EA8], a3);
}

uint64_t OUTLINED_FUNCTION_2_1(uint64_t a1)
{
  return _s11SiriNetwork24ConnectionSnapshotReportVSgWOg(a1);
}

uint64_t OUTLINED_FUNCTION_3_1(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return outlined init with take of ConnectionSnapshotReport?((uint64_t)&STACK[0x49D8], (uint64_t)&STACK[0x3EA8], a3);
}

uint64_t OUTLINED_FUNCTION_4_1(uint64_t a1, uint64_t a2)
{
  return a2 + 568;
}

uint64_t OUTLINED_FUNCTION_5_1(uint64_t a1)
{
  return outlined init with take of ConnectionSnapshotReport?(a1, (uint64_t)&STACK[0x3908], v1);
}

uint64_t OUTLINED_FUNCTION_6_0(uint64_t a1)
{
  return _s11SiriNetwork010ConnectionB6ReportVSgWOg(a1);
}

__n128 OUTLINED_FUNCTION_8(__n128 *a1)
{
  return a1[4];
}

__n128 OUTLINED_FUNCTION_11()
{
  return *(__n128 *)(v0 + 536);
}

unint64_t *OUTLINED_FUNCTION_12()
{
  return &STACK[0x4CA0];
}

__n128 OUTLINED_FUNCTION_13@<Q0>(_OWORD *a1@<X8>, __n128 a2, long long a3, long long a4, long long a5, long long a6, long long a7)
{
  *a1 = a7;
  a1[1] = a6;
  a1[2] = a5;
  a1[3] = a4;
  __n128 result = a2;
  a1[4] = a3;
  a1[5] = a2;
  return result;
}

uint64_t OUTLINED_FUNCTION_14()
{
  return outlined init with take of ConnectionSnapshotReport?((uint64_t)&STACK[0x3908], (uint64_t)&STACK[0x3EA8], v0);
}

uint64_t OUTLINED_FUNCTION_16()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_17()
{
  return v0;
}

unint64_t *OUTLINED_FUNCTION_18()
{
  return &STACK[0x4CA0];
}

unint64_t *OUTLINED_FUNCTION_19()
{
  return &STACK[0x3640];
}

unint64_t *OUTLINED_FUNCTION_20()
{
  return &STACK[0x3908];
}

unint64_t *OUTLINED_FUNCTION_25()
{
  return &STACK[0x410];
}

uint64_t OUTLINED_FUNCTION_26(uint64_t a1)
{
  return outlined init with take of ConnectionSnapshotReport?(a1, (uint64_t)&STACK[0x1A70], v1);
}

uint64_t OUTLINED_FUNCTION_27()
{
  return v0;
}

void *OUTLINED_FUNCTION_28()
{
  return memcpy(&STACK[0x3908], &STACK[0x3EA8], 0x599uLL);
}

uint64_t OUTLINED_FUNCTION_33()
{
  return 1;
}

unint64_t *OUTLINED_FUNCTION_34()
{
  return &STACK[0x3378];
}

uint64_t dispatch thunk of NetworkConnectionProtocol.identifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of NetworkConnectionProtocol.currentPath.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of NetworkConnectionProtocol.parameters.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of NetworkConnectionProtocol.endpoint.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of NetworkConnectionProtocol.stateUpdateHandler.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of NetworkConnectionProtocol.stateUpdateHandler.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

uint64_t dispatch thunk of NetworkConnectionProtocol.stateUpdateHandler.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of NetworkConnectionProtocol.viabilityUpdateHandler.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of NetworkConnectionProtocol.viabilityUpdateHandler.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 72))();
}

uint64_t dispatch thunk of NetworkConnectionProtocol.viabilityUpdateHandler.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 80))();
}

uint64_t dispatch thunk of NetworkConnectionProtocol.betterPathUpdateHandler.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t dispatch thunk of NetworkConnectionProtocol.betterPathUpdateHandler.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 96))();
}

uint64_t dispatch thunk of NetworkConnectionProtocol.betterPathUpdateHandler.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 104))();
}

uint64_t dispatch thunk of NetworkConnectionProtocol.pathUpdateHandler.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 112))();
}

uint64_t dispatch thunk of NetworkConnectionProtocol.pathUpdateHandler.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 120))();
}

uint64_t dispatch thunk of NetworkConnectionProtocol.pathUpdateHandler.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 128))();
}

uint64_t dispatch thunk of NetworkConnectionProtocol.init(endpoint:configuration:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 136))();
}

uint64_t dispatch thunk of NetworkConnectionProtocol.start(queue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 144))();
}

uint64_t dispatch thunk of NetworkConnectionProtocol.cancel()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 152))();
}

uint64_t dispatch thunk of NetworkConnectionProtocol.send(content:contentContext:isComplete:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 160))();
}

uint64_t dispatch thunk of NetworkConnectionProtocol.receive(minimumIncompleteLength:maximumLength:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 168))();
}

uint64_t dispatch thunk of NetworkConnectionProtocol.readyEstablishmentReport(queue:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 176))();
}

uint64_t dispatch thunk of NetworkConnectionProtocol.getAttemptedEndpoints()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 184))();
}

uint64_t dispatch thunk of NetworkConnectionProtocol.getConnectionEdgeID(wasConnected:attemptedEndpoints:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 192))();
}

id ConnectionSnapshotReport.netConnectionSnapshot.getter()
{
  uint64_t v1 = *v0;
  outlined init with take of ConnectionNetworkReport?((uint64_t)(v0 + 10), (uint64_t)v25);
  uint64_t v2 = *((void *)v0 + 85);
  uint64_t v3 = *((void *)v0 + 86);
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F6E4F8]), sel_init);
  objc_msgSend(v4, sel_setSequenceNumber_, v1);
  if (v4)
  {
    type metadata accessor for NetworkAnalytics(0);
    id v5 = v4;
    objc_msgSend(v5, sel_setProvider_, static NetworkAnalytics.netProvider(from:)());

    id v6 = v5;
    objc_msgSend(v6, sel_setSnapshotTriggerReason_, static NetworkAnalytics.netSnapshotState(from:)());
  }
  if (!*(void *)(v2 + 16))
  {
LABEL_19:
    if (v4)
    {
      outlined init with take of ConnectionNetworkReport?((uint64_t)v25, (uint64_t)__src);
      if (_s11SiriNetwork010ConnectionB6ReportVSgWOg((uint64_t)__src) == 1)
      {
        id v19 = v4;
        id v20 = 0;
      }
      else
      {
        memcpy(__dst, __src, 0x139uLL);
        id v21 = v4;
        id v20 = ConnectionNetworkReport.netSessionConnectionNetwork.getter();
      }
      objc_msgSend(v4, sel_setNetwork_, v20);
    }
    return v4;
  }
  __src[0] = MEMORY[0x263F8EE78];
  uint64_t v7 = *(void *)(v3 + 16);
  if (!v7) {
    goto LABEL_17;
  }
  swift_bridgeObjectRetain();
  uint64_t v8 = v7 - 1;
  for (uint64_t i = 32; ; i += 256)
  {
    memcpy(__dst, (const void *)(v3 + i), 0xF9uLL);
    id v10 = objc_allocWithZone(MEMORY[0x263F6E4C0]);
    outlined retain of ConnectionTCPInfoMetrics((uint64_t)__dst);
    id v11 = objc_msgSend(v10, sel_init);
    if (v11) {
      break;
    }
    outlined release of ConnectionTCPInfoMetrics((uint64_t)__dst);
    if (!v8) {
      goto LABEL_16;
    }
LABEL_15:
    --v8;
  }
  uint64_t v12 = v11;
  uint64_t v13 = (void *)__dst[1];
  if (__dst[1])
  {
    uint64_t v14 = __dst[0];
    id v15 = v11;
    uint64_t v13 = (void *)MEMORY[0x2611B2220](v14, v13);
  }
  else
  {
    id v16 = v11;
  }
  uint64_t v17 = SLOBYTE(__dst[4]);
  objc_msgSend(v12, sel_setName_, v13);

  objc_msgSend(v12, sel_setConnectionType_, dword_25D790EBC[v17]);
  outlined release of ConnectionTCPInfoMetrics((uint64_t)__dst);
  id v18 = v12;
  MEMORY[0x2611B2350]();
  if (*(void *)((__src[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((__src[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  if (v8) {
    goto LABEL_15;
  }
LABEL_16:
  swift_bridgeObjectRelease();
LABEL_17:
  if (v4)
  {
    outlined bridged method (mbnn) of @objc NETSchemaNETSessionConnectionSnapshotCaptured.networkInterfaces.setter(__src[0], v4, &lazy cache variable for type metadata for NETSchemaNETNetworkInterface);
    goto LABEL_19;
  }
  swift_bridgeObjectRelease();
  return v4;
}

id ConnectionSnapshotReport.netDebugConnectionSnapshot.getter()
{
  outlined init with take of ConnectionNetworkReport?(v0 + 40, (uint64_t)v25);
  double v1 = *(double *)(v0 + 360);
  unint64_t v2 = *(void *)(v0 + 368);
  char v3 = *(unsigned char *)(v0 + 376);
  uint64_t v4 = *(void *)(v0 + 680);
  uint64_t v5 = *(void *)(v0 + 688);
  unsigned int v6 = *(_DWORD *)(v0 + 696);
  id v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F6E488]), sel_init);
  if (v7)
  {
    if (one-time initialization token for sharedNetworkAnalytics != -1) {
      swift_once();
    }
    objc_msgSend(v7, sel_setSequenceNumber_, NetworkAnalytics.getSequenceNumber()());
    outlined init with take of ConnectionNetworkReport?((uint64_t)v25, (uint64_t)v22);
    if (_s11SiriNetwork010ConnectionB6ReportVSgWOg((uint64_t)v22) == 1)
    {
      id v8 = v7;
      id v9 = 0;
    }
    else
    {
      memcpy(__dst, v22, sizeof(__dst));
      id v10 = v7;
      id v9 = ConnectionNetworkReport.netDebugSessionConnectionNetwork.getter();
    }
    objc_msgSend(v7, sel_setNetwork_, v9);
  }
  if (*(void *)(v4 + 16))
  {
    uint64_t v23 = MEMORY[0x263F8EE78];
    uint64_t v11 = *(void *)(v5 + 16);
    if (v11)
    {
      swift_bridgeObjectRetain();
      uint64_t v12 = 32;
      do
      {
        memcpy(v22, (const void *)(v5 + v12), 0xF9uLL);
        uint64_t v13 = ConnectionTCPInfoMetrics.netDebugNetworkInterface.getter();
        if (v13)
        {
          id v14 = v13;
          MEMORY[0x2611B2350]();
          if (*(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        v12 += 256;
        --v11;
      }
      while (v11);
      swift_bridgeObjectRelease();
    }
    if (!v7)
    {
      swift_bridgeObjectRelease();
      return v7;
    }
    outlined bridged method (mbnn) of @objc NETSchemaNETSessionConnectionSnapshotCaptured.networkInterfaces.setter(v23, v7, &lazy cache variable for type metadata for NETSchemaNETDebugNetworkInterface);
  }
  if (v7)
  {
    id v15 = v7;
    if (v3) {
      id v16 = 0;
    }
    else {
      id v16 = ConnectionPingInfoReport.netPingInfo.getter(v2, v1);
    }
    objc_msgSend(v15, sel_setPingInfo_, v16);

    if (v6 == 4)
    {
      id v17 = v15;
      id v18 = 0;
    }
    else
    {
      type metadata accessor for NetworkAnalytics(0);
      id v19 = v15;
      uint64_t v20 = ConnectionQualityReport.symptomsBasedNetworkQuality.getter(v6);
      id v18 = (void *)static NetworkAnalytics.netDebugSessionConnectionQuality(from:)(v20);
      swift_bridgeObjectRelease();
    }
    objc_msgSend(v15, sel_setQuality_, v18);
  }
  return v7;
}

uint64_t outlined init with take of ConnectionNetworkReport?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void outlined bridged method (mbnn) of @objc NETSchemaNETSessionConnectionSnapshotCaptured.networkInterfaces.setter(uint64_t a1, void *a2, unint64_t *a3)
{
  type metadata accessor for CTServiceDescriptor(0, a3);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(a2, sel_setNetworkInterfaces_, isa);
}

uint64_t outlined retain of ConnectionTCPInfoMetrics(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of ConnectionTCPInfoMetrics(uint64_t a1)
{
  return a1;
}

uint64_t ConnectionAnalysisInfo.connectionURL.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of URL?(v1, a1);
}

uint64_t outlined init with copy of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t ConnectionAnalysisInfo.interfaceIndex.getter()
{
  uint64_t v1 = (unsigned int *)(v0 + *(int *)(type metadata accessor for ConnectionAnalysisInfo() + 20));
  return *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32);
}

uint64_t type metadata accessor for ConnectionAnalysisInfo()
{
  uint64_t result = type metadata singleton initialization cache for ConnectionAnalysisInfo;
  if (!type metadata singleton initialization cache for ConnectionAnalysisInfo) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t ConnectionAnalysisInfo.sendBufferSize.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for ConnectionAnalysisInfo() + 24));
}

uint64_t ConnectionAnalysisInfo.wwanPreferred.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ConnectionAnalysisInfo() + 28));
}

uint64_t ConnectionAnalysisInfo.connectionType.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = type metadata accessor for ConnectionAnalysisInfo();
  *a1 = *(unsigned char *)(v1 + *(int *)(result + 32));
  return result;
}

uint64_t ConnectionAnalysisInfo.policyId.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for ConnectionAnalysisInfo() + 36));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t *initializeBufferWithCopyOfBuffer for ConnectionAnalysisInfo(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v7))
    {
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v7);
    }
    uint64_t v10 = a3[5];
    uint64_t v11 = a3[6];
    uint64_t v12 = (char *)a1 + v10;
    uint64_t v13 = (char *)a2 + v10;
    *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
    v12[4] = v13[4];
    *(uint64_t *)((char *)a1 + v11) = *(uint64_t *)((char *)a2 + v11);
    uint64_t v14 = a3[8];
    *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
    *((unsigned char *)a1 + v14) = *((unsigned char *)a2 + v14);
    uint64_t v15 = a3[9];
    id v16 = (uint64_t *)((char *)a1 + v15);
    id v17 = (uint64_t *)((char *)a2 + v15);
    uint64_t v18 = v17[1];
    *id v16 = *v17;
    v16[1] = v18;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t __swift_getEnumTagSinglePayload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t destroy for ConnectionAnalysisInfo(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();
  if (!__swift_getEnumTagSinglePayload(a1, 1, v2)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  }

  return swift_bridgeObjectRelease();
}

char *initializeWithCopy for ConnectionAnalysisInfo(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = &a1[v8];
  uint64_t v11 = &a2[v8];
  *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
  v10[4] = v11[4];
  *(void *)&a1[v9] = *(void *)&a2[v9];
  uint64_t v12 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  a1[v12] = a2[v12];
  uint64_t v13 = a3[9];
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  uint64_t v16 = *((void *)v15 + 1);
  *(void *)uint64_t v14 = *(void *)v15;
  *((void *)v14 + 1) = v16;
  swift_bridgeObjectRetain();
  return a1;
}

char *assignWithCopy for ConnectionAnalysisInfo(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 1, v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6);
  if (!EnumTagSinglePayload)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = *(_DWORD *)v13;
  v12[4] = v13[4];
  *(_DWORD *)uint64_t v12 = v14;
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  a1[a3[7]] = a2[a3[7]];
  a1[a3[8]] = a2[a3[8]];
  uint64_t v15 = a3[9];
  uint64_t v16 = &a1[v15];
  id v17 = &a2[v15];
  *(void *)uint64_t v16 = *(void *)v17;
  *((void *)v16 + 1) = *((void *)v17 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *initializeWithTake for ConnectionAnalysisInfo(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = &a1[v8];
  uint64_t v11 = &a2[v8];
  *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
  v10[4] = v11[4];
  *(void *)&a1[v9] = *(void *)&a2[v9];
  uint64_t v12 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  a1[v12] = a2[v12];
  *(_OWORD *)&a1[a3[9]] = *(_OWORD *)&a2[a3[9]];
  return a1;
}

char *assignWithTake for ConnectionAnalysisInfo(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 1, v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6);
  if (!EnumTagSinglePayload)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = a3[6];
  uint64_t v13 = &a1[v11];
  int v14 = &a2[v11];
  *(_DWORD *)uint64_t v13 = *(_DWORD *)v14;
  v13[4] = v14[4];
  *(void *)&a1[v12] = *(void *)&a2[v12];
  uint64_t v15 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  a1[v15] = a2[v15];
  uint64_t v16 = a3[9];
  id v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  uint64_t v20 = *(void *)v18;
  uint64_t v19 = *((void *)v18 + 1);
  *(void *)id v17 = v20;
  *((void *)v17 + 1) = v19;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ConnectionAnalysisInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25D6DEE1C);
}

uint64_t sub_25D6DEE1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_0_3();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return __swift_getEnumTagSinglePayload(a1, a2, v6);
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 36) + 8);
    if (v9 >= 0xFFFFFFFF) {
      LODWORD(v9) = -1;
    }
    int v10 = v9 - 1;
    if (v10 < 0) {
      int v10 = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for ConnectionAnalysisInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25D6DEED0);
}

void sub_25D6DEED0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_0_3();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    __swift_storeEnumTagSinglePayload(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 36) + 8) = a2;
  }
}

void type metadata completion function for ConnectionAnalysisInfo()
{
  type metadata accessor for URL?();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata accessor for URL?()
{
  if (!lazy cache variable for type metadata for URL?)
  {
    type metadata accessor for URL();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for URL?);
    }
  }
}

uint64_t (*RPCOspreyConnectionProvider.connection.modify())()
{
  return static ConnectionConfigurationError.errorDomain.modify;
}

uint64_t (*RPCOspreyConnectionProvider.connectionMetrics.modify())()
{
  return RPCOspreyConnectionProvider.connectionMetrics.modify;
}

uint64_t RPCOspreyConnectionProvider.__allocating_init(connectionConfiguration:connectionQueue:networkManager:networkAnalytics:)(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  RPCOspreyConnectionProvider.init(connectionConfiguration:connectionQueue:networkManager:networkAnalytics:)(a1, a2, a3, a4);
  return v8;
}

uint64_t RPCOspreyConnectionProvider.init(connectionConfiguration:connectionQueue:networkManager:networkAnalytics:)(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v22 = a3;
  uint64_t v9 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_0_0();
  uint64_t v11 = v10;
  MEMORY[0x270FA5388](v12);
  int v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  memcpy(v23, a1, sizeof(v23));
  *(void *)(v5 + 1512) = 0;
  *(void *)(v5 + 1528) = 0;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(void *)(v5 + 64) = 0;
  swift_unknownObjectWeakInit();
  *(_WORD *)(v5 + 2168) = 0;
  *(_OWORD *)(v5 + 2080) = 0u;
  *(_OWORD *)(v5 + 2096) = 0u;
  *(void *)(v5 + 2109) = 0;
  *(_OWORD *)(v5 + 2120) = 0u;
  *(_OWORD *)(v5 + 2136) = 0u;
  *(void *)(v5 + 2152) = 0;
  UUID.init()();
  uint64_t v15 = UUID.uuidString.getter();
  uint64_t v17 = v16;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v9);
  *(void *)(v5 + 16) = v15;
  *(void *)(v5 + 24) = v17;
  memcpy((void *)(v5 + 1552), v23, 0x204uLL);
  *(void *)(v5 + 2072) = a2;
  _s11SiriNetwork27ConnectionPreparationReportVSgWOi0_(v24);
  _s11SiriNetwork24ConnectionSnapshotReportVSgWOi0_(v25);
  v26[0] = 0;
  LOBYTE(v26[1]) = 1;
  uint64_t v18 = MEMORY[0x263F8EE78];
  *(_OWORD *)&v26[3] = 0u;
  v26[2] = MEMORY[0x263F8EE78];
  v26[5] = MEMORY[0x263F8EE78];
  LODWORD(v26[6]) = 0;
  BYTE4(v26[6]) = 1;
  memset(&v26[7], 0, 40);
  outlined init with take of ConnectionMetrics?((uint64_t)v24, (uint64_t)&v26[12], &demangling cache variable for type metadata for ConnectionPreparationReport?);
  memset(&v26[57], 0, 112);
  outlined init with take of ConnectionMetrics?((uint64_t)v25, (uint64_t)&v26[71], (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  v26[160] = v18;
  memset(&v26[161], 0, 40);
  LOBYTE(v26[166]) = 1;
  v26[167] = 0;
  LOBYTE(v26[168]) = 1;
  v26[169] = 0;
  LOBYTE(v26[170]) = 1;
  memset(&v26[171], 0, 20);
  BYTE4(v26[173]) = 1;
  v26[174] = 0;
  LOBYTE(v26[175]) = 1;
  v26[176] = 0;
  LOBYTE(v26[177]) = 1;
  v26[178] = 0;
  LOBYTE(v26[179]) = 1;
  memcpy((void *)(v5 + 72), v26, 0x599uLL);
  *(void *)(v5 + 1536) = 0;
  *(unsigned char *)(v5 + 1544) = 2;
  *(void *)(v5 + 2160) = a4;
  uint64_t v19 = *(void **)(v5 + 1512);
  *(void *)(v5 + 1512) = v22;

  return v5;
}

uint64_t RPCOspreyConnectionProvider.deinit()
{
  uint64_t v1 = v0;
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.siriNetwork);
  char v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_25D6CC000, v3, v4, "Provider - RPCOspreyConnectionProvider: Deallocating.", v5, 2u);
    OUTLINED_FUNCTION_1_2();
  }

  RPCOspreyConnectionProvider.configureConnectionHandler(_:)();
  *(void *)(v1 + 1528) = 0;
  swift_unknownObjectWeakAssign();
  OUTLINED_FUNCTION_29_0();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?(v6);
  specialized ConnectionProviderProtocol.cancelOpenTimer()();
  specialized ConnectionProviderProtocol.cancelOpenSlowTimer()();
  specialized ConnectionProviderProtocol.cancelStaleConnectionTimer()();
  specialized ConnectionProviderProtocol.cancelConnectionUnviableTimer()();
  RPCOspreyConnectionProvider.closeWithError(_:)(0);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl(&dword_25D6CC000, v7, v8, "Provider - RPCOspreyConnectionProvider: Deallocated.", v9, 2u);
    OUTLINED_FUNCTION_1_2();
  }

  swift_bridgeObjectRelease();
  outlined destroy of RPCOspreyConnectionProtocol?(v1 + 32, (uint64_t *)&demangling cache variable for type metadata for RPCOspreyConnectionProtocol?);
  memcpy(v11, (const void *)(v1 + 72), 0x599uLL);
  outlined release of ConnectionMetrics((uint64_t)v11);

  outlined destroy of weak ConnectionProviderDelegate?(v1 + 1520);
  outlined consume of ConnectionProviderState(*(id *)(v1 + 1536), *(unsigned char *)(v1 + 1544));
  memcpy(__dst, (const void *)(v1 + 1552), 0x204uLL);
  outlined release of ConnectionConfiguration(__dst);

  outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?(*(void *)(v1 + 2080));
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return v1;
}

uint64_t RPCOspreyConnectionProvider.__deallocating_deinit()
{
  RPCOspreyConnectionProvider.deinit();

  return MEMORY[0x270FA0228](v0, 2170, 7);
}

uint64_t type metadata accessor for RPCOspreyConnectionProvider()
{
  return self;
}

uint64_t RPCOspreyConnectionProvider.openConnectionWithInitialPayload(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v4;
  uint64_t v6 = v3;
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.siriNetwork);
  OUTLINED_FUNCTION_33_0();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v18 = a3;
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = OUTLINED_FUNCTION_10_0();
    *(_DWORD *)uint64_t v12 = 136315138;
    uint64_t v13 = v4;
    uint64_t v14 = *(void *)(v6 + 16);
    unint64_t v15 = *(void *)(v6 + 24);
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v19);
    OUTLINED_FUNCTION_19_0();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    uint64_t v5 = v13;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_25D6CC000, v10, v11, "Provider - RPCOspreyConnectionProvider [%s]: Preparing connection with initial payload.", v12, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_1_2();
    a3 = v18;
    OUTLINED_FUNCTION_1_2();
  }
  else
  {

    swift_release();
  }
  OUTLINED_FUNCTION_29_0();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?(v16);
  specialized ConnectionProviderProtocol.cancelOpenTimer()();
  specialized ConnectionProviderProtocol.cancelOpenSlowTimer()();
  specialized ConnectionProviderProtocol.configureNetworkAnalytics()();
  uint64_t result = specialized RPCOspreyConnectionProvider.createConnectionWithInitialPayload<A>(_:rpcOspreyConnectionProtocolType:)();
  if (!v5)
  {
    RPCOspreyConnectionProvider.configureConnectionHandler(_:)();
    return RPCOspreyConnectionProvider.startConnectionWithOpenTimeoutTimer(completion:)(a2, a3);
  }
  return result;
}

uint64_t specialized RPCOspreyConnectionProvider.createConnectionWithInitialPayload<A>(_:rpcOspreyConnectionProtocolType:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  os_log_type_t v11 = (char *)&v30 - v10;
  uint64_t v12 = (const void *)(v0 + 1552);
  memcpy(v35, v12, 0x204uLL);
  memcpy(v34, v12, 0x204uLL);
  ConnectionConfiguration.resolvedURL.getter();
  if (__swift_getEnumTagSinglePayload((uint64_t)v4, 1, v5) == 1)
  {
    outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for URL?);
    lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
    uint64_t v13 = swift_allocError();
    *(void *)(v14 + 8) = 0;
    *(void *)(v14 + 16) = 0;
    *(void *)uint64_t v14 = 0;
    long long v32 = xmmword_25D790FF0;
    *(_OWORD *)(v14 + 24) = xmmword_25D790FF0;
    unint64_t v15 = *(void **)(v1 + 1536);
    *(void *)(v1 + 1536) = v13;
    LOBYTE(v14) = *(unsigned char *)(v1 + 1544);
    *(unsigned char *)(v1 + 1544) = 1;
    outlined consume of ConnectionProviderState(v15, v14);
    swift_allocError();
    *(void *)(v16 + 8) = 0;
    *(void *)(v16 + 16) = 0;
    *(void *)uint64_t v16 = 0;
    *(_OWORD *)(v16 + 24) = v32;
    return swift_willThrow();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v11, v4, v5);
    siri_kdebug_trace();
    uint64_t v18 = *(void **)(v1 + 1536);
    *(void *)(v1 + 1536) = 0;
    unsigned __int8 v19 = *(unsigned char *)(v1 + 1544);
    *(unsigned char *)(v1 + 1544) = 2;
    outlined consume of ConnectionProviderState(v18, v19);
    uint64_t v20 = type metadata accessor for SiriNetworkOspreyChannel();
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v11, v5);
    memcpy(v34, v35, 0x204uLL);
    v33[3] = v20;
    v33[4] = &protocol witness table for SiriNetworkOspreyChannel;
    outlined retain of ConnectionConfiguration(v35);
    v33[0] = SiriNetworkOspreyChannel.__allocating_init(url:connectionConfiguration:)((uint64_t)v9);
    outlined init with take of ConnectionMetrics?((uint64_t)v33, (uint64_t)v34, (uint64_t *)&demangling cache variable for type metadata for RPCOspreyConnectionProtocol?);
    swift_beginAccess();
    outlined assign with take of RPCOspreyConnectionProtocol?((uint64_t)v34, v1 + 32);
    swift_endAccess();
    uint64_t v22 = RPCOspreyConnectionProvider.connection.modify();
    uint64_t v23 = *(void *)(v21 + 24);
    if (v23)
    {
      uint64_t v24 = *(void *)(v1 + 16);
      uint64_t v25 = *(void *)(v1 + 24);
      uint64_t v26 = *(void *)(v21 + 32);
      uint64_t v27 = v21;
      uint64_t v28 = *(void *)(v21 + 24);
      long long v31 = v22;
      __swift_mutable_project_boxed_opaque_existential_1(v27, v28);
      uint64_t v36 = v11;
      *(void *)&long long v32 = v6;
      long long v29 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 64);
      swift_bridgeObjectRetain();
      v29(v24, v25, v23, v26);
      os_log_type_t v11 = v36;
      uint64_t v6 = v32;
      ((void (*)(unsigned char *, void))v31)(v34, 0);
    }
    else
    {
      ((void (*)(unsigned char *, void))v22)(v34, 0);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  }
}

void RPCOspreyConnectionProvider.configureConnectionHandler(_:)()
{
  uint64_t v1 = *(void **)(v0 + 1536);
  *(void *)(v0 + 1536) = 1;
  unsigned __int8 v2 = *(unsigned char *)(v0 + 1544);
  *(unsigned char *)(v0 + 1544) = 2;
  outlined consume of ConnectionProviderState(v1, v2);
}

uint64_t RPCOspreyConnectionProvider.startConnectionWithOpenTimeoutTimer(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  OUTLINED_FUNCTION_0_0();
  uint64_t v26 = v8;
  MEMORY[0x270FA5388](v9);
  os_log_type_t v11 = (char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for DispatchQoS();
  OUTLINED_FUNCTION_0_0();
  uint64_t v13 = v12;
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_18_0();
  unint64_t v15 = *(void **)(v2 + 1536);
  *(void *)(v2 + 1536) = 0;
  unsigned __int8 v16 = *(unsigned char *)(v2 + 1544);
  *(unsigned char *)(v2 + 1544) = 0;
  outlined consume of ConnectionProviderState(v15, v16);
  swift_beginAccess();
  outlined init with copy of RPCOspreyConnectionProtocol?(v2 + 32, (uint64_t)&aBlock);
  if (v29)
  {
    v24[1] = v3;
    outlined init with take of RPCOspreyConnectionProtocol(&aBlock, (uint64_t)v32);
    specialized ConnectionProviderProtocol.openCompletionSetup(completion:)(a1, a2);
    specialized ConnectionProviderProtocol.setupOpenTimeoutTimer()();
    specialized ConnectionProviderProtocol.setupOpenSlowTimer()();
    objc_msgSend((id)*__swift_project_boxed_opaque_existential_1(v32, v32[3]), sel_preconnect);
    uint64_t v17 = swift_allocObject();
    swift_weakInit();
    uint64_t v30 = partial apply for closure #1 in RPCOspreyConnectionProvider.startConnectionWithOpenTimeoutTimer(completion:);
    uint64_t v31 = v17;
    *(void *)&long long aBlock = MEMORY[0x263EF8330];
    *((void *)&aBlock + 1) = 1107296256;
    uint64_t v28 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    long long v29 = &block_descriptor_141;
    uint64_t v18 = _Block_copy(&aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    v32[6] = MEMORY[0x263F8EE78];
    lazy protocol witness table accessor for type RPCOspreyConnectionProvider and conformance RPCOspreyConnectionProvider((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, 255, MEMORY[0x263F8F030]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x2611B24E0](0, v4, v11, v18);
    _Block_release(v18);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v7);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v4, v25);
    swift_release();
    swift_release();
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)v32);
  }
  else
  {
    outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)&aBlock, (uint64_t *)&demangling cache variable for type metadata for RPCOspreyConnectionProtocol?);
    lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
    uint64_t v20 = OUTLINED_FUNCTION_16_0();
    OUTLINED_FUNCTION_37(v20, v21);
    return OUTLINED_FUNCTION_31((__n128)xmmword_25D790FF0, v22, v23);
  }
}

uint64_t closure #1 in RPCOspreyConnectionProvider.startConnectionWithOpenTimeoutTimer(completion:)()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(void (**)(_OWORD *))(result + 2080);
    if (v2)
    {
      uint64_t v3 = (void *)(result + 2080);
      swift_retain();
      RPCOspreyConnectionProvider.updateAndEmitConnectionMetricsPreparationReport()();
      memset(v5, 0, 41);
      v2(v5);
      outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?((uint64_t)v2);
      uint64_t v4 = *(void *)(v1 + 2080);
      *uint64_t v3 = 0;
      *(void *)(v1 + 2088) = 0;
      outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?(v4);
    }
    return swift_release();
  }
  return result;
}

void RPCOspreyConnectionProvider.closeWithError(_:)(id a1)
{
  if (*(unsigned char *)(v1 + 2115)) {
    return;
  }
  uint64_t v3 = v1;
  *(_WORD *)(v1 + 2114) = 257;
  BOOL v5 = *(unsigned char *)(v1 + 1544) == 2 && *(void *)(v1 + 1536) == 2;
  if (v5)
  {
    *(void *)(v1 + 1536) = 0;
    *(unsigned char *)(v1 + 1544) = 2;
    outlined consume of ConnectionProviderState((id)2, 2u);
  }
  uint64_t v6 = &off_25D790000;
  if (!a1)
  {
    OUTLINED_FUNCTION_25_0();
    if (!v5) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.siriNetwork);
    OUTLINED_FUNCTION_33_0();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (OUTLINED_FUNCTION_24_0(v16))
    {
      OUTLINED_FUNCTION_12_0();
      long long v38 = (void *)OUTLINED_FUNCTION_10_0();
      OUTLINED_FUNCTION_8_0(4.8149e-34);
      uint64_t v6 = &off_25D790000;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)&off_25D790000, v2, (uint64_t *)&v38);
      OUTLINED_FUNCTION_15_0();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v14 = "Provider - RPCOspreyConnectionProvider [%s]: Close and cancel connection with no error";
      goto LABEL_26;
    }
LABEL_35:

    swift_release();
    goto LABEL_36;
  }
  *(void *)&long long v42 = a1;
  id v7 = a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast())
  {
    if ((unint64_t)v40 >> 60 == 10 && !*((void *)&v40 + 1))
    {
      BOOL v8 = (void)v40 == 0xA000000000000000 && v38 == (void *)1;
      if (v8 && v39 == 0)
      {
        OUTLINED_FUNCTION_25_0();
        if (!v5) {
          swift_once();
        }
        uint64_t v9 = type metadata accessor for Logger();
        __swift_project_value_buffer(v9, (uint64_t)static Logger.siriNetwork);
        OUTLINED_FUNCTION_33_0();
        uint64_t v10 = Logger.logObject.getter();
        os_log_type_t v11 = static os_log_type_t.default.getter();
        if (OUTLINED_FUNCTION_24_0(v11))
        {
          OUTLINED_FUNCTION_12_0();
          long long v38 = (void *)OUTLINED_FUNCTION_10_0();
          OUTLINED_FUNCTION_8_0(4.8149e-34);
          uint64_t v6 = &off_25D790000;
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)&off_25D790000, v2, (uint64_t *)&v38);
          OUTLINED_FUNCTION_15_0();
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          swift_bridgeObjectRelease();
          uint64_t v14 = "Provider - RPCOspreyConnectionProvider [%s]: Close and cancel connection after receiving cancellation";
LABEL_26:
          OUTLINED_FUNCTION_35(&dword_25D6CC000, v12, v13, v14);
          swift_arrayDestroy();
          goto LABEL_32;
        }
        goto LABEL_35;
      }
    }
    outlined consume of NetworkConnectionError(v38, v39, *((uint64_t *)&v39 + 1), v40, *((void **)&v40 + 1));
  }
  OUTLINED_FUNCTION_25_0();
  if (!v5) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Logger.siriNetwork);
  id v18 = a1;
  id v19 = a1;
  swift_retain();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v10, v20))
  {
    swift_release();

    goto LABEL_34;
  }
  uint64_t v21 = swift_slowAlloc();
  uint64_t v22 = (void *)swift_slowAlloc();
  long long v38 = (void *)OUTLINED_FUNCTION_10_0();
  *(_DWORD *)uint64_t v21 = 136315394;
  uint64_t v23 = *(void *)(v3 + 16);
  unint64_t v24 = *(void *)(v3 + 24);
  swift_bridgeObjectRetain();
  *(void *)&long long v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, (uint64_t *)&v38);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_release();
  swift_bridgeObjectRelease();
  *(_WORD *)(v21 + 12) = 2112;
  id v25 = a1;
  unint64_t v2 = _swift_stdlib_bridgeErrorToNSError();
  *(void *)&long long v42 = v2;
  uint64_t v6 = &off_25D790000;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *uint64_t v22 = v2;

  _os_log_impl(&dword_25D6CC000, v10, v20, "Provider - RPCOspreyConnectionProvider [%s]: Close and cancel connection for error: %@", (uint8_t *)v21, 0x16u);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
  swift_arrayDestroy();
  OUTLINED_FUNCTION_1_2();
  swift_arrayDestroy();
LABEL_32:
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_1_2();
LABEL_34:

LABEL_36:
  specialized ConnectionProviderProtocol.cancelStaleConnectionTimer()();
  specialized ConnectionProviderProtocol.cancelConnectionUnviableTimer()();
  specialized ConnectionProviderProtocol.cancelOpenTimer()();
  specialized ConnectionProviderProtocol.cancelOpenSlowTimer()();
  OUTLINED_FUNCTION_22_0();
  outlined init with copy of RPCOspreyConnectionProtocol?(v3 + 32, (uint64_t)&v42);
  if (*((void *)&v43 + 1))
  {
    outlined init with take of RPCOspreyConnectionProtocol(&v42, (uint64_t)&v38);
    uint64_t v44 = 0;
    long long v42 = 0u;
    long long v43 = 0u;
    swift_beginAccess();
    outlined assign with take of RPCOspreyConnectionProtocol?((uint64_t)&v42, v3 + 32);
    swift_endAccess();
    id v26 = *(id *)(v3 + 2160);
    NetworkAnalytics.setIsConnectionActive(_:)(0);

    id v27 = *(id *)(v3 + 2160);
    NetworkAnalytics.setNetIdAvailable(_:)(0);

    objc_msgSend((id)*__swift_project_boxed_opaque_existential_1(&v38, v40), sel_cancel);
    OUTLINED_FUNCTION_25_0();
    if (!v5) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    __swift_project_value_buffer(v28, (uint64_t)static Logger.siriNetwork);
    OUTLINED_FUNCTION_33_0();
    long long v29 = (void *)Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.default.getter();
    if (OUTLINED_FUNCTION_24_0(v30))
    {
      OUTLINED_FUNCTION_12_0();
      *(void *)&long long v42 = OUTLINED_FUNCTION_10_0();
      OUTLINED_FUNCTION_8_0(COERCE_FLOAT(*((void *)v6 + 450)));
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v6, v2, (uint64_t *)&v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_35(&dword_25D6CC000, v31, v32, "Provider - RPCOspreyConnectionProvider [%s]: Connection set to nil");
      swift_arrayDestroy();
      OUTLINED_FUNCTION_1_2();
      OUTLINED_FUNCTION_1_2();
    }
    else
    {

      swift_release();
    }
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v38);
  }
  else
  {
    outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)&v42, (uint64_t *)&demangling cache variable for type metadata for RPCOspreyConnectionProtocol?);
  }
  long long v33 = *(void (**)(void **))(v3 + 2080);
  if (v33)
  {
    long long v38 = a1;
    long long v39 = 0u;
    long long v40 = 0u;
    char v41 = 1;
    id v34 = a1;
    outlined copy of (@escaping @callee_guaranteed (@in_guaranteed LinkRecommendationInfo?) -> ())?((uint64_t)v33);
    v33(&v38);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?((uint64_t)v33);

    uint64_t v35 = *(void *)(v3 + 2080);
    *(void *)(v3 + 2080) = 0;
    *(void *)(v3 + 2088) = 0;
    outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?(v35);
  }
  else if (MEMORY[0x2611B37F0](v3 + 1520))
  {
    specialized BackgroundConnection.connectionProvider(_:received:)();
    swift_unknownObjectRelease();
  }
  id v36 = *(id *)(v3 + 2160);
  NetworkAnalytics.setIsConnectionActive(_:)(0);

  id v37 = *(id *)(v3 + 2160);
  NetworkAnalytics.setNetIdAvailable(_:)(0);
}

void RPCOspreyConnectionProvider.send(data:completion:)(uint64_t a1, unint64_t a2, void (*a3)(void, void))
{
  uint64_t v5 = v3;
  v64[5] = *MEMORY[0x263EF8340];
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWError?);
  MEMORY[0x270FA5388](v9 - 8);
  OUTLINED_FUNCTION_18_0();
  if (a2 >> 60 == 15) {
    return;
  }
  if (!*(unsigned char *)(v3 + 1544)) {
    goto LABEL_10;
  }
  uint64_t v10 = *(void **)(v3 + 1536);
  if (*(unsigned char *)(v3 + 1544) == 1)
  {
    outlined copy of Data?(a1, a2);
    outlined copy of ConnectionProviderState(v10, 1u);
    if (one-time initialization token for siriNetwork != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    OUTLINED_FUNCTION_4_2(v11, (uint64_t)static Logger.siriNetwork);
    outlined copy of ConnectionProviderState(v10, 1u);
    outlined copy of Data?(a1, a2);
    swift_retain();
    outlined copy of ConnectionProviderState(v10, 1u);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    uint64_t v61 = v12;
    if (os_log_type_enabled(v12, v13))
    {
      os_log_type_t v59 = v13;
      uint64_t v14 = OUTLINED_FUNCTION_10_0();
      long long v57 = (void *)swift_slowAlloc();
      v64[0] = OUTLINED_FUNCTION_10_0();
      *(_DWORD *)uint64_t v14 = 136315650;
      uint64_t v15 = a1;
      uint64_t v16 = *(void *)(v5 + 16);
      unint64_t v17 = *(void *)(v5 + 24);
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v14 + 12) = 2048;
      uint64_t v18 = Data.count.getter();
      outlined consume of Data?(v15, a2);
      *(void *)&long long v62 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      outlined consume of Data?(v15, a2);
      *(_WORD *)(v14 + 22) = 2112;
      if (v10)
      {
        id v19 = v10;
        uint64_t v20 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)&long long v62 = v20;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
      }
      else
      {
        *(void *)&long long v62 = 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v20 = 0;
      }
      *long long v57 = v20;
      outlined consume of ConnectionProviderState(v10, 1u);
      outlined consume of ConnectionProviderState(v10, 1u);
      _os_log_impl(&dword_25D6CC000, v61, v59, "Provider - RPCOspreyConnectionProvider [%s]: Send data failed. Sending %ld bytes error %@.", (uint8_t *)v14, 0x20u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      OUTLINED_FUNCTION_20_0();
      OUTLINED_FUNCTION_1_2();
      OUTLINED_FUNCTION_20_0();
      OUTLINED_FUNCTION_1_2();
      OUTLINED_FUNCTION_1_2();

      if (!v10) {
        goto LABEL_33;
      }
    }
    else
    {
      OUTLINED_FUNCTION_9_1();
      swift_release_n();
      OUTLINED_FUNCTION_9_1();
      outlined consume of ConnectionProviderState(v10, 1u);
      outlined consume of ConnectionProviderState(v10, 1u);

      if (!v10)
      {
LABEL_33:
        uint64_t v54 = type metadata accessor for NWError();
        __swift_storeEnumTagSinglePayload(v4, 1, 1, v54);
        goto LABEL_34;
      }
    }
    v64[0] = (uint64_t)v10;
    id v32 = v10;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    uint64_t v33 = type metadata accessor for NWError();
    int v34 = swift_dynamicCast();
    __swift_storeEnumTagSinglePayload(v4, v34 ^ 1u, 1, v33);
    if (__swift_getEnumTagSinglePayload(v4, 1, v33) != 1)
    {
      lazy protocol witness table accessor for type RPCOspreyConnectionProvider and conformance RPCOspreyConnectionProvider((unint64_t *)&lazy protocol witness table cache variable for type NWError and conformance NWError, 255, MEMORY[0x263F14320]);
      uint64_t v35 = OUTLINED_FUNCTION_16_0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 32))(v36, v4, v33);
LABEL_35:
      lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
      uint64_t v55 = OUTLINED_FUNCTION_16_0();
      v56[1] = 0;
      v56[2] = 0;
      *uint64_t v56 = v35;
      OUTLINED_FUNCTION_31((__n128)xmmword_25D791000, v55, (uint64_t)v56);
      outlined consume of ConnectionProviderState(v10, 1u);
      goto LABEL_36;
    }
LABEL_34:
    outlined destroy of RPCOspreyConnectionProtocol?(v4, &demangling cache variable for type metadata for NWError?);
    uint64_t v35 = 0;
    goto LABEL_35;
  }
  if ((unint64_t)v10 < 2)
  {
LABEL_10:
    outlined copy of Data._Representation(a1, a2);
    if (one-time initialization token for siriNetwork != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    OUTLINED_FUNCTION_4_2(v21, (uint64_t)static Logger.siriNetwork);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = swift_slowAlloc();
      v64[0] = OUTLINED_FUNCTION_10_0();
      *(_DWORD *)uint64_t v24 = 136315394;
      uint64_t v25 = *(void *)(v5 + 16);
      unint64_t v26 = *(void *)(v5 + 24);
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v24 + 12) = 2048;
      *(void *)&long long v62 = Data.count.getter();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      outlined consume of Data?(a1, a2);
      OUTLINED_FUNCTION_36(&dword_25D6CC000, v27, v28, "Provider - RPCOspreyConnectionProvider [%s]: Send data failed. Sending %ld bytes in a connection during setup, waiting, or preparing state.");
      OUTLINED_FUNCTION_20_0();
      OUTLINED_FUNCTION_1_2();
      OUTLINED_FUNCTION_1_2();
    }
    else
    {
      swift_release();
      OUTLINED_FUNCTION_9_1();
    }

    lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
    uint64_t v29 = OUTLINED_FUNCTION_16_0();
    uint64_t v31 = 4;
LABEL_16:
    v30[1] = 0;
    v30[2] = 0;
    *os_log_type_t v30 = v31;
    OUTLINED_FUNCTION_31((__n128)xmmword_25D790FF0, v29, (uint64_t)v30);
LABEL_36:
    OUTLINED_FUNCTION_9_1();
    return;
  }
  if (v10 != (void *)2)
  {
    outlined copy of Data._Representation(a1, a2);
    if (one-time initialization token for siriNetwork != -1) {
      swift_once();
    }
    uint64_t v46 = type metadata accessor for Logger();
    OUTLINED_FUNCTION_4_2(v46, (uint64_t)static Logger.siriNetwork);
    long long v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v47, v48))
    {
      uint64_t v49 = swift_slowAlloc();
      v64[0] = OUTLINED_FUNCTION_10_0();
      *(_DWORD *)uint64_t v49 = 136315394;
      uint64_t v50 = *(void *)(v5 + 16);
      unint64_t v51 = *(void *)(v5 + 24);
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v51, v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v49 + 12) = 2048;
      *(void *)&long long v62 = Data.count.getter();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      outlined consume of Data?(a1, a2);
      OUTLINED_FUNCTION_36(&dword_25D6CC000, v52, v53, "Provider - RPCOspreyConnectionProvider [%s]: Send data failed. Sending %ld bytes in a cancelled connection.");
      OUTLINED_FUNCTION_20_0();
      OUTLINED_FUNCTION_1_2();
      OUTLINED_FUNCTION_1_2();
    }
    else
    {
      swift_release();
      OUTLINED_FUNCTION_9_1();
    }

    lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
    uint64_t v29 = OUTLINED_FUNCTION_16_0();
    uint64_t v31 = 1;
    goto LABEL_16;
  }
  swift_beginAccess();
  outlined init with copy of RPCOspreyConnectionProtocol?(v3 + 32, (uint64_t)&v62);
  if (!v63)
  {
    outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)&v62, (uint64_t *)&demangling cache variable for type metadata for RPCOspreyConnectionProtocol?);
    return;
  }
  outlined init with take of RPCOspreyConnectionProtocol(&v62, (uint64_t)v64);
  uint64_t v37 = *(void *)(v3 + 2096);
  BOOL v38 = __CFADD__(v37, 1);
  uint64_t v39 = v37 + 1;
  if (v38)
  {
    __break(1u);
    goto LABEL_44;
  }
  *(void *)(v3 + 2096) = v39;
  __swift_project_boxed_opaque_existential_1(v64, v64[3]);
  outlined copy of Data._Representation(a1, a2);
  SiriNetworkOspreyChannel.send(_:)();
  if (one-time initialization token for siriNetwork != -1) {
LABEL_44:
  }
    swift_once();
  uint64_t v40 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_4_2(v40, (uint64_t)static Logger.siriNetwork);
  char v41 = Logger.logObject.getter();
  os_log_type_t v42 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v41, v42))
  {
    os_log_type_t v60 = v42;
    uint64_t v43 = swift_slowAlloc();
    *(void *)&long long v62 = OUTLINED_FUNCTION_10_0();
    *(_DWORD *)uint64_t v43 = 136315394;
    long long v58 = v41;
    uint64_t v45 = *(void *)(v5 + 16);
    unint64_t v44 = *(void *)(v5 + 24);
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v44, (uint64_t *)&v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v43 + 12) = 2048;
    Data.count.getter();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_9_1();
    char v41 = v58;
    _os_log_impl(&dword_25D6CC000, v58, v60, "Provider - RPCOspreyConnectionProvider [%s]: Send data to streamer. %ld bytes in streamer.", (uint8_t *)v43, 0x16u);
    OUTLINED_FUNCTION_20_0();
    OUTLINED_FUNCTION_1_2();
    OUTLINED_FUNCTION_1_2();
  }
  else
  {
    swift_release();
    OUTLINED_FUNCTION_9_1();
  }

  a3(0, 0);
  OUTLINED_FUNCTION_9_1();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v64);
}

uint64_t RPCOspreyConnectionProvider.readData(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.siriNetwork);
  swift_retain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v31 = a1;
    BOOL v8 = (uint8_t *)swift_slowAlloc();
    *(void *)&long long aBlock = OUTLINED_FUNCTION_10_0();
    *(_DWORD *)BOOL v8 = 136315138;
    uint64_t v9 = *(void *)(v3 + 16);
    unint64_t v10 = *(void *)(v3 + 24);
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, (uint64_t *)&aBlock);
    OUTLINED_FUNCTION_19_0();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_25D6CC000, v6, v7, "Provider - RPCOspreyConnectionProvider [%s]: Reader. Ready to receive data.", v8, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_1_2();
    a1 = v31;
    OUTLINED_FUNCTION_1_2();
  }
  else
  {

    swift_release();
  }
  specialized ConnectionProviderProtocol.setupStaleConnectionTimer()();
  swift_beginAccess();
  outlined init with copy of RPCOspreyConnectionProtocol?(v3 + 32, (uint64_t)&aBlock);
  if (v36)
  {
    outlined init with take of RPCOspreyConnectionProtocol(&aBlock, (uint64_t)v39);
    if ((*(unsigned char *)(v3 + 2115) & 1) == 0)
    {
      uint64_t v21 = (void **)__swift_project_boxed_opaque_existential_1(v39, v39[3]);
      uint64_t v22 = swift_allocObject();
      swift_weakInit();
      os_log_type_t v23 = (void *)swift_allocObject();
      v23[2] = v22;
      v23[3] = a1;
      v23[4] = a2;
      uint64_t v24 = swift_allocObject();
      swift_weakInit();
      uint64_t v25 = *v21;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      unint64_t v26 = (void *)MEMORY[0x2611B2220](0xD000000000000015, 0x800000025D794F20);
      uint64_t v37 = partial apply for closure #1 in RPCOspreyConnectionProvider.readData(_:);
      BOOL v38 = (void *)v3;
      *(void *)&long long aBlock = MEMORY[0x263EF8330];
      *((void *)&aBlock + 1) = 1107296256;
      uint64_t v35 = (uint64_t (*)(uint64_t, void *))thunk for @escaping @callee_guaranteed (@guaranteed OspreyConnectionMetrics) -> ();
      uint64_t v36 = &block_descriptor_2;
      uint64_t v27 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      uint64_t v37 = partial apply for closure #2 in RPCOspreyConnectionProvider.readData(_:);
      BOOL v38 = v23;
      *(void *)&long long aBlock = MEMORY[0x263EF8330];
      *((void *)&aBlock + 1) = 1107296256;
      uint64_t v35 = thunk for @escaping @callee_guaranteed (@guaranteed Data) -> ();
      uint64_t v36 = &block_descriptor_122;
      uint64_t v28 = _Block_copy(&aBlock);
      v33[4] = partial apply for closure #3 in RPCOspreyConnectionProvider.readData(_:);
      void v33[5] = v24;
      v33[0] = MEMORY[0x263EF8330];
      v33[1] = 1107296256;
      v33[2] = thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
      v33[3] = &block_descriptor_125;
      uint64_t v29 = _Block_copy(v33);
      swift_retain();
      swift_retain();
      id v30 = objc_msgSend(v25, sel_bidirectionalStreamingRequestWithMethodName_requestBuilder_streamingResponseHandler_completion_, v26, v27, v28, v29);
      _Block_release(v28);
      _Block_release(v27);

      _Block_release(v29);
      swift_release();
      swift_unknownObjectRelease();
      swift_release();
      swift_release();
      swift_release();
      swift_release_n();
      swift_release();
      return __swift_destroy_boxed_opaque_existential_0((uint64_t)v39);
    }
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v39);
  }
  else
  {
    outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)&aBlock, (uint64_t *)&demangling cache variable for type metadata for RPCOspreyConnectionProtocol?);
  }
  swift_retain();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v12))
  {
    os_log_type_t v13 = (uint8_t *)swift_slowAlloc();
    *(void *)&long long aBlock = OUTLINED_FUNCTION_10_0();
    *(_DWORD *)os_log_type_t v13 = 136315138;
    uint64_t v14 = *(void *)(v3 + 16);
    unint64_t v15 = *(void *)(v3 + 24);
    swift_bridgeObjectRetain();
    v33[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_25D6CC000, v11, v12, "Provider - RPCOspreyConnectionProvider [%s]: Reader. Error - Connection does not exist or it was cancelled.", v13, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_1_2();
    OUTLINED_FUNCTION_1_2();
  }
  else
  {

    swift_release();
  }
  lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
  uint64_t v16 = OUTLINED_FUNCTION_16_0();
  OUTLINED_FUNCTION_37(v16, v17);
  return OUTLINED_FUNCTION_31((__n128)xmmword_25D790FF0, v18, v19);
}

void closure #1 in RPCOspreyConnectionProvider.readData(_:)(void *a1, uint64_t a2)
{
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.siriNetwork);
  swift_retain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v17 = v8;
    *(_DWORD *)uint64_t v7 = 136315394;
    uint64_t v9 = *(void *)(a2 + 16);
    unint64_t v10 = *(void *)(a2 + 24);
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2080;
    uint64_t v11 = *(void *)(a2 + 16);
    unint64_t v12 = *(void *)(a2 + 24);
    swift_bridgeObjectRetain();
    uint64_t v16 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_25D6CC000, v5, v6, "Provider - RPCOspreyConnectionProvider [%s]: Trace identifier %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x2611B3750](v8, -1, -1);
    MEMORY[0x2611B3750](v7, -1, -1);
  }
  else
  {

    swift_release();
  }
  objc_msgSend(a1, sel_setEnableDeviceAuthentication_, 1, v16, v17);
  uint64_t v13 = *(void *)(a2 + 16);
  uint64_t v14 = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  unint64_t v15 = (void *)MEMORY[0x2611B2220](v13, v14);
  swift_bridgeObjectRelease();
  objc_msgSend(a1, sel_setClientTraceIdentifier_, v15);
}

uint64_t closure #2 in RPCOspreyConnectionProvider.readData(_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v39 = a4;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v43 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v40 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v41 = *(void *)(v10 - 8);
  uint64_t v42 = v10;
  MEMORY[0x270FA5388](v10);
  unint64_t v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Logger.siriNetwork);
  swift_retain();
  outlined copy of Data._Representation(a1, a2);
  swift_retain();
  outlined copy of Data._Representation(a1, a2);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v36 = a5;
    uint64_t v37 = v12;
    uint64_t v38 = v8;
    uint64_t v16 = swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    v51[0] = v35;
    *(_DWORD *)uint64_t v16 = 136315394;
    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      uint64_t v18 = *(void *)(Strong + 16);
      uint64_t v19 = *(void *)(Strong + 24);
      swift_bridgeObjectRetain();
      swift_release();
      uint64_t aBlock = v18;
      uint64_t v46 = v19;
      uint64_t Strong = String.init<A>(describing:)();
      unint64_t v21 = v20;
    }
    else
    {
      unint64_t v21 = 0xE000000000000000;
    }
    uint64_t aBlock = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(Strong, v21, v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2048;
    uint64_t v22 = Data.count.getter();
    outlined consume of Data._Representation(a1, a2);
    uint64_t aBlock = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    outlined consume of Data._Representation(a1, a2);
    _os_log_impl(&dword_25D6CC000, v14, v15, "Provider - RPCOspreyConnectionProvider [%s]: Reader. Read data. %ld bytes", (uint8_t *)v16, 0x16u);
    uint64_t v23 = v35;
    swift_arrayDestroy();
    MEMORY[0x2611B3750](v23, -1, -1);
    MEMORY[0x2611B3750](v16, -1, -1);

    unint64_t v12 = v37;
    uint64_t v8 = v38;
    a5 = v36;
  }
  else
  {
    outlined consume of Data._Representation(a1, a2);
    swift_release_n();
    outlined consume of Data._Representation(a1, a2);
  }
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    if (*(unsigned char *)(result + 2115) == 1)
    {
      uint64_t v25 = swift_allocObject();
      *(void *)(v25 + 16) = v39;
      *(void *)(v25 + 24) = a5;
      uint64_t v49 = partial apply for closure #1 in closure #2 in RPCOspreyConnectionProvider.readData(_:);
      uint64_t v50 = (void *)v25;
      uint64_t aBlock = MEMORY[0x263EF8330];
      uint64_t v46 = 1107296256;
      long long v47 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      os_log_type_t v48 = &block_descriptor_137;
      unint64_t v26 = _Block_copy(&aBlock);
      swift_retain();
      static DispatchQoS.unspecified.getter();
      uint64_t v44 = MEMORY[0x263F8EE78];
      lazy protocol witness table accessor for type RPCOspreyConnectionProvider and conformance RPCOspreyConnectionProvider((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, 255, MEMORY[0x263F8F030]);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
      uint64_t v27 = v40;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      MEMORY[0x2611B24E0](0, v12, v27, v26);
      _Block_release(v26);
      (*(void (**)(char *, uint64_t))(v43 + 8))(v27, v8);
      (*(void (**)(char *, uint64_t))(v41 + 8))(v12, v42);
      swift_release();
    }
    else
    {
      uint64_t v28 = *(void *)(result + 2096);
      BOOL v29 = __CFADD__(v28, 1);
      uint64_t v30 = v28 + 1;
      if (v29)
      {
        __break(1u);
        return result;
      }
      *(void *)(result + 2096) = v30;
      uint64_t v31 = (void *)swift_allocObject();
      v31[2] = v39;
      v31[3] = a5;
      v31[4] = a1;
      v31[5] = a2;
      uint64_t v49 = partial apply for closure #2 in closure #2 in RPCOspreyConnectionProvider.readData(_:);
      uint64_t v50 = v31;
      uint64_t aBlock = MEMORY[0x263EF8330];
      uint64_t v46 = 1107296256;
      long long v47 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      os_log_type_t v48 = &block_descriptor_131;
      id v32 = _Block_copy(&aBlock);
      outlined copy of Data._Representation(a1, a2);
      swift_retain();
      static DispatchQoS.unspecified.getter();
      uint64_t v44 = MEMORY[0x263F8EE78];
      lazy protocol witness table accessor for type RPCOspreyConnectionProvider and conformance RPCOspreyConnectionProvider((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, 255, MEMORY[0x263F8F030]);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
      uint64_t v33 = v40;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      MEMORY[0x2611B24E0](0, v12, v33, v32);
      _Block_release(v32);
      (*(void (**)(char *, uint64_t))(v43 + 8))(v33, v8);
      (*(void (**)(char *, uint64_t))(v41 + 8))(v12, v42);
      swift_release();
      RPCOspreyConnectionProvider.updateAndEmitConnectionMetricsPreparationReport()();
      RPCOspreyConnectionProvider.updateAndEmitConnectionMetricsReadyEstablishmentReport()();
      RPCOspreyConnectionProvider.updateConnectionMetricsSnapshotReport()();
    }
    return swift_release();
  }
  return result;
}

void closure #1 in closure #2 in RPCOspreyConnectionProvider.readData(_:)(void (*a1)(void, unint64_t, void *, void))
{
  lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
  uint64_t v2 = (void *)swift_allocError();
  *(void *)(v3 + 8) = 0;
  *(void *)(v3 + 16) = 0;
  *(void *)uint64_t v3 = 1;
  *(_OWORD *)(v3 + 24) = xmmword_25D790FF0;
  a1(0, 0xF000000000000000, v2, 0);
}

void closure #3 in RPCOspreyConnectionProvider.readData(_:)(void *a1)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    return;
  }
  uint64_t v3 = Strong;
  uint64_t v4 = *(void **)(Strong + 1536);
  int v5 = *(unsigned __int8 *)(Strong + 1544);
  if (v5 == 2 && v4 == (void *)3)
  {
    if (one-time initialization token for siriNetwork != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Logger.siriNetwork);
    swift_retain();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      uint64_t v33 = v25;
      *(_DWORD *)uint64_t v24 = 136315138;
      uint64_t v26 = *(void *)(v3 + 16);
      unint64_t v27 = *(void *)(v3 + 24);
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v28 = "Provider - RPCOspreyConnectionProvider [%s]: Streamer. Connection cancelled";
LABEL_19:
      _os_log_impl(&dword_25D6CC000, v22, v23, v28, v24, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2611B3750](v25, -1, -1);
      MEMORY[0x2611B3750](v24, -1, -1);
      swift_release();

      return;
    }
LABEL_20:

    swift_release_n();
    return;
  }
  if (!a1)
  {
    if (one-time initialization token for siriNetwork != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    __swift_project_value_buffer(v29, (uint64_t)static Logger.siriNetwork);
    swift_retain();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      uint64_t v33 = v25;
      *(_DWORD *)uint64_t v24 = 136315138;
      uint64_t v30 = *(void *)(v3 + 16);
      unint64_t v31 = *(void *)(v3 + 24);
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v28 = "Provider - RPCOspreyConnectionProvider [%s]: Streamer called.";
      goto LABEL_19;
    }
    goto LABEL_20;
  }
  *(void *)(Strong + 1536) = a1;
  *(unsigned char *)(Strong + 1544) = 1;
  id v7 = a1;
  id v8 = a1;
  outlined consume of ConnectionProviderState(v4, v5);
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.siriNetwork);
  swift_retain();
  id v10 = a1;
  swift_retain();
  id v11 = a1;
  unint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    uint64_t v33 = v15;
    *(_DWORD *)uint64_t v14 = 136315394;
    uint64_t v16 = *(void *)(v3 + 16);
    unint64_t v17 = *(void *)(v3 + 24);
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 12) = 2080;
    id v18 = a1;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    uint64_t v19 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_25D6CC000, v12, v13, "Provider - RPCOspreyConnectionProvider [%s]: Streamer. Connection error: %s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x2611B3750](v15, -1, -1);
    MEMORY[0x2611B3750](v14, -1, -1);
  }
  else
  {
    swift_release_n();
  }
  id v32 = a1;
  RPCOspreyConnectionProvider.closeWithError(_:)(a1);
  swift_release();
}

uint64_t RPCOspreyConnectionProvider.headerData(forceReconnect:)()
{
  return 0;
}

Swift::Void __swiftcall RPCOspreyConnectionProvider.updateConnectionMetricsSnapshotReport()()
{
  ((void (*)())MEMORY[0x270FA5388])();
  uint64_t v1 = v0;
  OUTLINED_FUNCTION_22_0();
  outlined init with copy of RPCOspreyConnectionProtocol?(v0 + 32, (uint64_t)v192);
  if (v192[3])
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RPCOspreyConnectionProtocol);
    type metadata accessor for SiriNetworkOspreyChannel();
    if (swift_dynamicCast())
    {
      uint64_t v2 = (void *)v191[89];
      uint64_t v3 = v0 + 72;
      swift_beginAccess();
      uint64_t v4 = OUTLINED_FUNCTION_30_0();
      memcpy(v4, (const void *)(v0 + 72), 0x599uLL);
      int v5 = OUTLINED_FUNCTION_30_0();
      outlined retain of ConnectionMetrics((uint64_t)v5);
      os_log_type_t v6 = OUTLINED_FUNCTION_6_1();
      id v8 = (_DWORD *)(v7 + 568);
      outlined init with take of ConnectionMetrics?(v7 + 568, (uint64_t)v190, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
      outlined init with take of ConnectionMetrics?((uint64_t)v190, (uint64_t)v191, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
      OUTLINED_FUNCTION_2_1((uint64_t)v191);
      if (!v36) {
        *id v8 = *(_DWORD *)(*(void *)(v1 + 2160) + OBJC_IVAR___SNNetworkAnalyticsInternal_sequenceNumber);
      }
      uint64_t v9 = OUTLINED_FUNCTION_5_2();
      ((void (*)(unint64_t *))v6)(v9);
      id v10 = OUTLINED_FUNCTION_6_1();
      uint64_t v12 = v11;
      outlined init with take of ConnectionMetrics?(v11 + 568, (uint64_t)v188, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
      outlined init with take of ConnectionMetrics?((uint64_t)v188, (uint64_t)v189, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
      OUTLINED_FUNCTION_2_1((uint64_t)v189);
      if (!v36)
      {
        *(void *)(v12 + 592) = 0x6574736575716572;
        *(void *)(v12 + 600) = 0xEA0000000000646ELL;
        swift_bridgeObjectRelease();
      }
      os_log_type_t v13 = OUTLINED_FUNCTION_5_2();
      ((void (*)(unint64_t *))v10)(v13);
      uint64_t v14 = OUTLINED_FUNCTION_6_1();
      uint64_t v16 = v15;
      outlined init with take of ConnectionMetrics?(v15 + 568, (uint64_t)v186, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
      outlined init with take of ConnectionMetrics?((uint64_t)v186, (uint64_t)v187, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
      OUTLINED_FUNCTION_2_1((uint64_t)v187);
      if (!v36)
      {
        *(void *)(v16 + 576) = 0xD00000000000001ELL;
        *(void *)(v16 + 584) = 0x800000025D794F00;
        swift_bridgeObjectRelease();
      }
      unint64_t v17 = OUTLINED_FUNCTION_5_2();
      ((void (*)(unint64_t *))v14)(v17);
      id v18 = OUTLINED_FUNCTION_6_1();
      unint64_t v20 = v19;
      outlined init with take of ConnectionMetrics?((uint64_t)&v19[142], (uint64_t)v184, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
      outlined init with take of ConnectionMetrics?((uint64_t)v184, (uint64_t)v185, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
      OUTLINED_FUNCTION_2_1((uint64_t)v185);
      if (v36)
      {
        uint64_t v21 = OUTLINED_FUNCTION_5_2();
        ((void (*)(unint64_t *))v18)(v21);
      }
      else
      {
        uint64_t v22 = *(void **)(v1 + 1512);
        if (v22)
        {
          id v23 = v22;
          SiriNetwork::ConnectionQualityReport v24 = NetworkManager.currentConnectionQualityReport()();
        }
        else
        {
          SiriNetwork::ConnectionQualityReport v24 = (SiriNetwork::ConnectionQualityReport)4;
        }
        v20[316] = v24;
        OUTLINED_FUNCTION_15();
        v18();
      }
      outlined init with take of ConnectionMetrics?(v1 + 640, (uint64_t)v182, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
      outlined init with take of ConnectionMetrics?((uint64_t)v182, (uint64_t)v183, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
      OUTLINED_FUNCTION_2_1((uint64_t)v183);
      if (v36)
      {
        _s11SiriNetwork010ConnectionB6ReportVSgWOi0_(v181);
        _s11SiriNetwork25ConnectionInterfaceReportVSgWOi0_(v180);
        if (one-time initialization token for sharedNetworkAnalytics != -1) {
          swift_once();
        }
        uint64_t v25 = static NetworkAnalytics.sharedNetworkAnalytics;
        LODWORD(__src[0]) = 0;
        __src[1] = 0;
        void __src[2] = 0xE000000000000000;
        __src[3] = 0;
        __src[4] = 0xE000000000000000;
        outlined init with take of ConnectionMetrics?((uint64_t)v181, (uint64_t)&__src[5], (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
        __src[46] = 0;
        __src[45] = 0;
        LOBYTE(__src[47]) = 1;
        outlined init with take of ConnectionMetrics?((uint64_t)v180, (uint64_t)&__src[48], (uint64_t *)&demangling cache variable for type metadata for ConnectionInterfaceReport?);
        __src[85] = MEMORY[0x263F8EE78];
        __src[86] = MEMORY[0x263F8EE78];
        LODWORD(__src[87]) = 4;
        __src[88] = v25;
        uint64_t v26 = OUTLINED_FUNCTION_14_0();
        memcpy(v26, __src, 0x2C8uLL);
        unint64_t v27 = OUTLINED_FUNCTION_14_0();
        destructiveProjectEnumData for ConnectionConfigurationError(v27);
        outlined init with take of ConnectionMetrics?(v1 + 640, (uint64_t)v178, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
        uint64_t v28 = OUTLINED_FUNCTION_14_0();
        outlined init with take of ConnectionMetrics?((uint64_t)v28, v1 + 640, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
        id v29 = v25;
        uint64_t v30 = OUTLINED_FUNCTION_28_0();
        outlined retain of ConnectionSnapshotReport?(v30);
      }
      unint64_t v31 = RPCOspreyConnectionProvider.connectionMetrics.modify();
      uint64_t v33 = v32;
      outlined init with take of ConnectionMetrics?(v32 + 568, (uint64_t)v180, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
      outlined init with take of ConnectionMetrics?((uint64_t)v180, (uint64_t)v181, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
      OUTLINED_FUNCTION_2_1((uint64_t)v181);
      if (v36)
      {
        ((void (*)(__n128 *, void))v31)(&v121, 0);
      }
      else
      {
        SiriNetworkOspreyChannel.getMetrics()((uint64_t)__src);
        outlined init with take of ConnectionMetrics?((uint64_t)__src, (uint64_t)v177, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
        uint64_t v34 = OUTLINED_FUNCTION_14_0();
        outlined init with take of ConnectionMetrics?((uint64_t)v34, (uint64_t)v178, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
        uint64_t v35 = OUTLINED_FUNCTION_28_0();
        OUTLINED_FUNCTION_2_1((uint64_t)v35);
        if (v36
          || (outlined retain of ConnectionSnapshotReport?(v179),
              uint64_t v37 = OUTLINED_FUNCTION_14_0(),
              outlined release of ConnectionMetrics?((uint64_t)v37),
              outlined init with take of ConnectionMetrics?((uint64_t)v179, (uint64_t)v174, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?), OUTLINED_FUNCTION_2_1((uint64_t)v174), v36))
        {
          _s11SiriNetwork010ConnectionB6ReportVSgWOi0_(v174);
          uint64_t v38 = v174;
        }
        else
        {
          outlined release of ConnectionNetworkReport?(v175);
          outlined retain of ConnectionSnapshotReport?(v179);
          uint64_t v38 = v175;
        }
        outlined init with take of ConnectionMetrics?((uint64_t)v38, (uint64_t)v160, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
        outlined init with take of ConnectionMetrics?(v33 + 608, (uint64_t)v174, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
        outlined init with take of ConnectionMetrics?((uint64_t)v160, v33 + 608, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
        outlined release of ConnectionNetworkReport?(v174);
        OUTLINED_FUNCTION_15();
        v31();
      }
      uint64_t v39 = OUTLINED_FUNCTION_28_0();
      memcpy(v39, (const void *)(v1 + 72), 0x599uLL);
      uint64_t v40 = OUTLINED_FUNCTION_14_0();
      memcpy(v40, (const void *)(v1 + 72), 0x599uLL);
      outlined init with take of ConnectionMetrics?((uint64_t)v179, (uint64_t)v174, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
      OUTLINED_FUNCTION_2_1((uint64_t)v174);
      if (v36
        || (outlined init with take of ConnectionMetrics?((uint64_t)&v177[608], (uint64_t)&v121, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?), memcpy(__src, v177, 0x599uLL), uint64_t v41 = OUTLINED_FUNCTION_28_0(), outlined retain of ConnectionMetrics((uint64_t)v41), outlined release of ConnectionNetworkReport?(&v121), outlined release of ConnectionMetrics((uint64_t)__src), outlined init with take of ConnectionMetrics?((uint64_t)&v121, (uint64_t)v160, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?), _s11SiriNetwork010ConnectionB6ReportVSgWOg((uint64_t)v160) == 1))
      {
        uint64_t v42 = RPCOspreyConnectionProvider.connectionMetrics.modify();
        uint64_t v44 = OUTLINED_FUNCTION_21_0((uint64_t)v42, v43);
        outlined init with take of ConnectionMetrics?(v44, (uint64_t)__src, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
        OUTLINED_FUNCTION_32_0();
        uint64_t v45 = OUTLINED_FUNCTION_2_1((uint64_t)v177);
        if (!v36)
        {
          LOBYTE(v79) = 1;
          v120[0] = 1;
          char v173 = 1;
          char v172 = 1;
          char v171 = 1;
          char v170 = 1;
          char v169 = 1;
          char v168 = 1;
          char v167 = 1;
          char v166 = 1;
          char v165 = 1;
          char v164 = 1;
          char v163 = 1;
          char v162 = 1;
          char v161 = 1;
          v121.n128_u32[0] = 0;
          v121.n128_u8[4] = 1;
          uint64_t v122 = 0;
          v121.n128_u64[1] = 0;
          uint64_t v123 = 0;
          char v124 = 1;
          int v128 = 0;
          long long v127 = 0u;
          long long v126 = 0u;
          long long v125 = 0u;
          char v129 = 1;
          int v130 = 0;
          char v131 = 1;
          uint64_t v132 = MEMORY[0x263F8EE80];
          uint64_t v133 = 0;
          uint64_t v134 = 0;
          uint64_t v135 = 0;
          char v136 = 1;
          uint64_t v137 = 0;
          char v138 = 1;
          uint64_t v139 = 0;
          char v140 = 1;
          uint64_t v141 = 0;
          char v142 = 1;
          uint64_t v143 = 0;
          char v144 = 1;
          uint64_t v145 = 0;
          char v146 = 1;
          uint64_t v148 = 0;
          uint64_t v147 = 0;
          uint64_t v149 = 0;
          char v150 = 1;
          uint64_t v151 = 0;
          char v152 = 1;
          char v153 = 0;
          uint64_t v154 = 0;
          char v155 = 1;
          uint64_t v156 = 0;
          char v157 = 1;
          uint64_t v158 = 0;
          char v159 = 1;
          destructiveProjectEnumData for ConnectionConfigurationError(&v121);
          uint64_t v3 = v1 + 680;
          outlined init with take of ConnectionMetrics?(v1 + 680, (uint64_t)v160, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
          outlined init with take of ConnectionMetrics?((uint64_t)&v121, v1 + 680, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
          uint64_t v45 = outlined release of ConnectionNetworkReport?(v160);
        }
        uint64_t v53 = OUTLINED_FUNCTION_27_0(v45, v46, v47, v48, v49, v50, v51, v52, v78, v79, v80, v81, v82, v83, v84, v85, v86, v87, v88,
                v89,
                v90,
                v91,
                v92,
                v93,
                v94,
                v95,
                v96,
                v97,
                v98,
                v99,
                v100,
                v101,
                v102,
                v103,
                v104,
                v105,
                v106,
                v107,
                v108,
                v109,
                v110,
                v111,
                v112,
                v113,
                v114,
                v115,
                v116,
                v117,
                v118,
                v119[0]);
        ((void (*)(char *))v1)(v53);
      }
      else
      {
        outlined release of ConnectionNetworkReport?(&v121);
      }
      uint64_t v54 = RPCOspreyConnectionProvider.connectionMetrics.modify();
      uint64_t v56 = OUTLINED_FUNCTION_21_0((uint64_t)v54, v55);
      outlined init with take of ConnectionMetrics?(v56, (uint64_t)__src, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
      OUTLINED_FUNCTION_32_0();
      uint64_t v57 = OUTLINED_FUNCTION_2_1((uint64_t)v177);
      if (v36)
      {
        uint64_t v65 = OUTLINED_FUNCTION_27_0(v57, v58, v59, v60, v61, v62, v63, v64, v78, v79, v80, v81, v82, v83, v84, v85, v86, v87, v88,
                v89,
                v90,
                v91,
                v92,
                v93,
                v94,
                v95,
                v96,
                v97,
                v98,
                v99,
                v100,
                v101,
                v102,
                v103,
                v104,
                v105,
                v106,
                v107,
                v108,
                v109,
                v110,
                v111,
                v112,
                v113,
                v114,
                v115,
                v116,
                v117,
                v118,
                v119[0]);
        ((void (*)(char *))v1)(v65);
      }
      else
      {
        outlined init with take of ConnectionMetrics?(v3 + 608, (uint64_t)&v121, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
        outlined init with take of ConnectionMetrics?((uint64_t)&v121, (uint64_t)v160, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
        int v66 = _s11SiriNetwork010ConnectionB6ReportVSgWOg((uint64_t)v160);
        if (v66 != 1)
        {
          uint64_t v67 = *(void *)(v1 + 1512);
          if (v67)
          {
            uint64_t v68 = *(void *)(v67 + OBJC_IVAR___SNNetworkManagerInternal_carrierName);
            uint64_t v69 = swift_bridgeObjectRetain();
          }
          else
          {
            uint64_t v68 = 0;
            uint64_t v69 = 0;
          }
          *(void *)(v3 + 616) = v68;
          *(void *)(v3 + 624) = v69;
          swift_bridgeObjectRelease();
        }
        OUTLINED_FUNCTION_15();
        ((void (*)(void))v1)();
      }
      uint64_t v70 = *(void *)(v1 + 1512);
      if (v70)
      {
        uint64_t v71 = v70 + OBJC_IVAR___SNNetworkManagerInternal_lastSignalStrength;
        if ((*(unsigned char *)(v71 + 8) & 1) == 0)
        {
          uint64_t v72 = *(void *)v71;
          long long v73 = RPCOspreyConnectionProvider.connectionMetrics.modify();
          uint64_t v75 = OUTLINED_FUNCTION_21_0((uint64_t)v73, v74);
          outlined init with take of ConnectionMetrics?(v75, (uint64_t)&v121, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
          outlined init with take of ConnectionMetrics?((uint64_t)&v121, (uint64_t)v160, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
          OUTLINED_FUNCTION_2_1((uint64_t)v160);
          if (v36)
          {
            ((void (*)(char *, void))v1)(v120, 0);
          }
          else
          {
            outlined init with take of ConnectionMetrics?(v3 + 608, (uint64_t)&v79, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
            outlined init with take of ConnectionMetrics?((uint64_t)&v79, (uint64_t)v119, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
            int v76 = _s11SiriNetwork010ConnectionB6ReportVSgWOg((uint64_t)v119);
            if (v76 != 1)
            {
              *(double *)(v3 + 632) = (double)v72;
              *(unsigned char *)(v3 + 640) = 0;
            }
            OUTLINED_FUNCTION_15();
            ((void (*)(void))v1)();
          }
        }
      }
      OUTLINED_FUNCTION_30_0();
      specialized ConnectionProviderProtocol.updateConnectionMetrics(with:completion:)();

      uint64_t v77 = OUTLINED_FUNCTION_30_0();
      outlined release of ConnectionMetrics((uint64_t)v77);
    }
  }
  else
  {
    outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v192, (uint64_t *)&demangling cache variable for type metadata for RPCOspreyConnectionProtocol?);
  }
}

Swift::Void __swiftcall RPCOspreyConnectionProvider.updateAndEmitConnectionMetricsPreparationReport()()
{
  ((void (*)())MEMORY[0x270FA5388])();
  if (*(unsigned char *)(v0 + 2168)) {
    return;
  }
  uint64_t v1 = v0;
  swift_beginAccess();
  outlined init with copy of RPCOspreyConnectionProtocol?(v0 + 32, (uint64_t)v35);
  if (!v36)
  {
    outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v35, (uint64_t *)&demangling cache variable for type metadata for RPCOspreyConnectionProtocol?);
    goto LABEL_8;
  }
  outlined init with copy of RPCOspreyConnectionProtocol((uint64_t)v35, (uint64_t)v31);
  outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v35, (uint64_t *)&demangling cache variable for type metadata for RPCOspreyConnectionProtocol?);
  __swift_project_boxed_opaque_existential_1(v31, v31[3]);
  SiriNetworkOspreyChannel.getMetrics()((uint64_t)v30);
  outlined init with take of ConnectionMetrics?((uint64_t)v30, (uint64_t)v32, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
  outlined init with take of ConnectionMetrics?((uint64_t)v32, (uint64_t)v33, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
  OUTLINED_FUNCTION_2_1((uint64_t)v33);
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v31);
LABEL_8:
    if (one-time initialization token for siriNetwork != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.siriNetwork);
    swift_retain();
    int v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)OUTLINED_FUNCTION_12_0();
      v33[0] = OUTLINED_FUNCTION_10_0();
      *(_DWORD *)uint64_t v7 = 136315138;
      uint64_t v8 = *(void *)(v1 + 16);
      unint64_t v9 = *(void *)(v1 + 24);
      swift_bridgeObjectRetain();
      v32[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_25D6CC000, v5, v6, "Provider - RPCOspreyConnectionProvider [%s]: Metrics, Connection Prepared Report nil.", v7, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_1_2();
      OUTLINED_FUNCTION_1_2();
    }
    else
    {

      swift_release();
    }
    return;
  }
  outlined retain of ConnectionPreparationReport?(v34);
  outlined release of ConnectionMetrics?((uint64_t)v32);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v31);
  outlined init with take of ConnectionMetrics?((uint64_t)v34, (uint64_t)__src, &demangling cache variable for type metadata for ConnectionPreparationReport?);
  int v3 = _s11SiriNetwork27ConnectionPreparationReportVSgWOg((uint64_t)__src);
  if (v3 == 1) {
    goto LABEL_8;
  }
  *(unsigned char *)(v0 + 2168) = 1;
  swift_beginAccess();
  outlined init with take of ConnectionMetrics?(v0 + 168, (uint64_t)v28, &demangling cache variable for type metadata for ConnectionPreparationReport?);
  uint64_t v10 = OUTLINED_FUNCTION_23_0();
  outlined init with take of ConnectionMetrics?(v10, v11, &demangling cache variable for type metadata for ConnectionPreparationReport?);
  outlined retain of ConnectionPreparationReport(__src);
  outlined retain of ConnectionPreparationReport?(v28);
  uint64_t v12 = LOBYTE(__src[4]);
  id v13 = objc_allocWithZone(MEMORY[0x263F6E4B0]);
  outlined retain of ConnectionPreparationReport(__src);
  id v14 = objc_msgSend(v13, sel_init);
  objc_msgSend(v14, sel_setHasDNS_, v12);
  uint64_t v15 = (__n128 *)OUTLINED_FUNCTION_23_0();
  outlined retain of ConnectionPreparationReport?(v15);
  if (v14)
  {
    NetworkAnalytics.logNetworkConnectionStatePreparationSnapshotCaptured(_:)();
  }
  memcpy(__dst, __src, sizeof(__dst));
  uint64_t v16 = ConnectionPreparationReport.netDebugConnectionStatePreparationSnapshot.getter();
  if (v16)
  {
    unint64_t v17 = v16;
    NetworkAnalytics.logDebugNetworkConnectionStatePreparationSnapshotCaptured(_:)();
  }
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)static Logger.siriNetwork);
  outlined init with take of ConnectionMetrics?((uint64_t)v34, (uint64_t)v26, &demangling cache variable for type metadata for ConnectionPreparationReport?);
  outlined init with take of ConnectionMetrics?((uint64_t)v34, (uint64_t)__dst, &demangling cache variable for type metadata for ConnectionPreparationReport?);
  outlined retain of ConnectionPreparationReport(__dst);
  outlined retain of ConnectionPreparationReport(v26);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)OUTLINED_FUNCTION_12_0();
    uint64_t v24 = OUTLINED_FUNCTION_10_0();
    *(_DWORD *)uint64_t v21 = 136315138;
    memcpy(v25, __src, sizeof(v25));
    outlined retain of ConnectionPreparationReport(v26);
    uint64_t v22 = String.init<A>(describing:)();
    v25[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined retain of ConnectionPreparationReport?(v34);
    outlined retain of ConnectionPreparationReport?(v34);
    _os_log_impl(&dword_25D6CC000, v19, v20, "%s", v21, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_1_2();
    OUTLINED_FUNCTION_1_2();

    outlined retain of ConnectionPreparationReport?(v34);
  }
  else
  {
    outlined retain of ConnectionPreparationReport?(v34);
    outlined retain of ConnectionPreparationReport?(v34);
    outlined init with take of ConnectionMetrics?((uint64_t)v34, (uint64_t)v25, &demangling cache variable for type metadata for ConnectionPreparationReport?);
    outlined release of ConnectionPreparationReport(v25);
  }
}

Swift::Void __swiftcall RPCOspreyConnectionProvider.updateAndEmitConnectionMetricsReadyEstablishmentReport()()
{
  ((void (*)())MEMORY[0x270FA5388])();
  if (*(unsigned char *)(v0 + 2169)) {
    return;
  }
  uint64_t v1 = v0;
  swift_beginAccess();
  outlined init with copy of RPCOspreyConnectionProtocol?(v0 + 32, (uint64_t)v82);
  if (v83)
  {
    outlined init with copy of RPCOspreyConnectionProtocol((uint64_t)v82, (uint64_t)__dst);
    outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v82, (uint64_t *)&demangling cache variable for type metadata for RPCOspreyConnectionProtocol?);
    __swift_project_boxed_opaque_existential_1(__dst, __dst[3]);
    SiriNetworkOspreyChannel.getMetrics()((uint64_t)__src);
    outlined init with take of ConnectionMetrics?((uint64_t)__src, (uint64_t)v68, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
    outlined init with take of ConnectionMetrics?((uint64_t)v68, (uint64_t)v69, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
    OUTLINED_FUNCTION_2_1((uint64_t)v69);
    if (v2)
    {
      __swift_destroy_boxed_opaque_existential_0((uint64_t)__dst);
    }
    else
    {
      uint64_t v3 = v77;
      long long v4 = v78;
      uint64_t v5 = v80;
      os_log_type_t v6 = v81;
      long long v62 = v79;
      uint64_t v63 = v75;
      uint64_t v64 = *((void *)&v78 + 1);
      uint64_t v7 = v70;
      uint64_t v8 = v71;
      uint64_t v9 = v72;
      uint64_t v10 = v73;
      uint64_t v11 = v74;
      uint64_t v60 = v76;
      outlined copy of ConnectionEstablishmentReport?(v70, v71, v72, v73, v74, v75, v76, v77, v78, *((uint64_t *)&v78 + 1), v79, *((uint64_t *)&v79 + 1), v80, v81);
      outlined release of ConnectionMetrics?((uint64_t)v68);
      __swift_destroy_boxed_opaque_existential_0((uint64_t)__dst);
      if (v3)
      {
        uint64_t v58 = v5;
        *(void *)&__src[0] = v7;
        *((void *)&__src[0] + 1) = v8;
        uint64_t v61 = v8;
        LODWORD(__src[1]) = v9;
        BYTE4(__src[1]) = BYTE4(v9) & 1;
        *((void *)&__src[1] + 1) = v10;
        LOBYTE(__src[2]) = v11 & 1;
        *((void *)&__src[2] + 1) = v63;
        LOBYTE(__src[3]) = v60 & 1;
        *((void *)&__src[3] + 1) = v3;
        *(void *)&__src[4] = v4;
        WORD4(__src[4]) = v64 & 0x101;
        __src[5] = v62;
        *(unsigned char *)(v1 + 2169) = 1;
        *(void *)&__src[6] = v5;
        *((void *)&__src[6] + 1) = v6;
        swift_beginAccess();
        os_log_t loga = *(os_log_t *)(v1 + 528);
        uint64_t v12 = *(void *)(v1 + 536);
        uint64_t v13 = v10;
        uint64_t v51 = *(void *)(v1 + 544);
        uint64_t type = *(void *)(v1 + 552);
        uint64_t v49 = *(void *)(v1 + 560);
        buf = *(uint8_t **)(v1 + 568);
        uint64_t v47 = *(void *)(v1 + 576);
        uint64_t v46 = *(void *)(v1 + 584);
        long long v44 = *(_OWORD *)(v1 + 608);
        long long v45 = *(_OWORD *)(v1 + 592);
        uint64_t v43 = *(void *)(v1 + 624);
        id v14 = *(void **)(v1 + 632);
        uint64_t v55 = v9;
        *(void *)(v1 + 528) = v7;
        *(void *)(v1 + 536) = v61;
        *(void *)(v1 + 544) = v9;
        uint64_t v56 = v13;
        *(void *)(v1 + 552) = v13;
        uint64_t v59 = v11;
        *(void *)(v1 + 560) = v11;
        *(void *)(v1 + 568) = v63;
        *(void *)(v1 + 576) = v60;
        *(void *)(v1 + 584) = v3;
        *(void *)(v1 + 592) = v4;
        *(void *)(v1 + 600) = v64;
        *(_OWORD *)(v1 + 608) = v62;
        uint64_t v15 = v5;
        *(void *)(v1 + 624) = v5;
        *(void *)(v1 + 632) = v6;
        swift_bridgeObjectRetain();
        uint64_t v16 = v6;
        id v17 = v6;
        swift_bridgeObjectRetain();
        uint64_t v57 = v3;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined consume of ConnectionEstablishmentReport?((uint64_t)loga, v12, v51, type, v49, (uint64_t)buf, v47, v46, v45, *((uint64_t *)&v45 + 1), v44, *((uint64_t *)&v44 + 1), v43, v14);
        ConnectionEstablishmentReport.netConnectionStateReadySnapshot.getter();
        if (v18)
        {
          uint64_t v19 = v18;
          NetworkAnalytics.logNetworkConnectionStateReadySnapshotCaptured(_:)();
        }
        ConnectionEstablishmentReport.netDebugConnectionStateReadySnapshot.getter();
        if (v20)
        {
          uint64_t v21 = v20;
          NetworkAnalytics.logDebugNetworkConnectionStateReadySnapshotCaptured(_:)();
        }
        if (one-time initialization token for siriNetwork != -1) {
          swift_once();
        }
        uint64_t v22 = type metadata accessor for Logger();
        __swift_project_value_buffer(v22, (uint64_t)static Logger.siriNetwork);
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        id v52 = v17;
        unint64_t v23 = Logger.logObject.getter();
        os_log_type_t v24 = static os_log_type_t.default.getter();
        log = v23;
        if (os_log_type_enabled(v23, v24))
        {
          id v29 = (uint8_t *)OUTLINED_FUNCTION_12_0();
          uint64_t v66 = OUTLINED_FUNCTION_10_0();
          *(_DWORD *)id v29 = 136315138;
          memcpy(__dst, __src, sizeof(__dst));
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v30 = v52;
          uint64_t v31 = String.init<A>(describing:)();
          __dst[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, &v66);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          outlined consume of ConnectionEstablishmentReport?(v7, v61, v55, v56, v59, v63, v60, v57, v4, v64, v62, *((uint64_t *)&v62 + 1), v15, v16);
          outlined consume of ConnectionEstablishmentReport?(v7, v61, v55, v56, v59, v63, v60, v57, v4, v64, v62, *((uint64_t *)&v62 + 1), v15, v16);
          _os_log_impl(&dword_25D6CC000, log, v24, "%s", v29, 0xCu);
          swift_arrayDestroy();
          OUTLINED_FUNCTION_1_2();
          OUTLINED_FUNCTION_1_2();

          outlined consume of ConnectionEstablishmentReport?(v7, v61, v55, v56, v59, v63, v60, v57, v4, v64, v62, *((uint64_t *)&v62 + 1), v58, v16);
        }
        else
        {
          OUTLINED_FUNCTION_34_0(v7, v61, v55, v56, v25, v26, v27, v28, v4, v64, v62, *((uint64_t *)&v62 + 1), v15, v16);
          OUTLINED_FUNCTION_34_0(v7, v61, v55, v56, v39, v40, v41, v42, v4, v64, v62, *((uint64_t *)&v62 + 1), v58, v16);

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        return;
      }
    }
  }
  else
  {
    outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v82, (uint64_t *)&demangling cache variable for type metadata for RPCOspreyConnectionProtocol?);
  }
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v33 = type metadata accessor for Logger();
  __swift_project_value_buffer(v33, (uint64_t)static Logger.siriNetwork);
  swift_retain();
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v34, v35))
  {
    uint64_t v36 = (uint8_t *)OUTLINED_FUNCTION_12_0();
    v69[0] = OUTLINED_FUNCTION_10_0();
    *(_DWORD *)uint64_t v36 = 136315138;
    uint64_t v37 = *(void *)(v1 + 16);
    unint64_t v38 = *(void *)(v1 + 24);
    swift_bridgeObjectRetain();
    v68[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_25D6CC000, v34, v35, "Provider - RPCOspreyConnectionProvider [%s]: Metrics, Connection Ready Report nil.", v36, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_1_2();
    OUTLINED_FUNCTION_1_2();
  }
  else
  {

    swift_release();
  }
}

Swift::Int RPCOspreyConnectionProvider.hashValue.getter()
{
  Hasher.init(_seed:)();
  specialized ConnectionProviderProtocol.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for ConnectionProviderProtocol.connectionMetrics.getter in conformance RPCOspreyConnectionProvider()
{
  OUTLINED_FUNCTION_22_0();
  memcpy(__dst, (const void *)(v0 + 72), 0x599uLL);
  uint64_t v1 = (void *)OUTLINED_FUNCTION_23_0();
  memcpy(v1, v2, 0x599uLL);
  return outlined retain of ConnectionMetrics((uint64_t)__dst);
}

uint64_t protocol witness for ConnectionProviderProtocol.delegate.getter in conformance RPCOspreyConnectionProvider()
{
  return MEMORY[0x2611B37F0](v0 + 1520);
}

uint64_t protocol witness for ConnectionProviderProtocol.delegate.setter in conformance RPCOspreyConnectionProvider(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 1528) = a2;
  swift_unknownObjectWeakAssign();

  return swift_unknownObjectRelease();
}

void *protocol witness for ConnectionProviderProtocol.connectionConfiguration.getter in conformance RPCOspreyConnectionProvider()
{
  memcpy(__dst, (const void *)(v0 + 1552), 0x204uLL);
  uint64_t v1 = (void *)OUTLINED_FUNCTION_23_0();
  memcpy(v1, v2, 0x204uLL);
  return outlined retain of ConnectionConfiguration(__dst);
}

id protocol witness for ConnectionProviderProtocol.connectionQueue.getter in conformance RPCOspreyConnectionProvider()
{
  return *(id *)(v0 + 2072);
}

uint64_t protocol witness for ConnectionProviderProtocol.openCompletion.setter in conformance RPCOspreyConnectionProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 2080);
  *(void *)(v2 + 2080) = a1;
  *(void *)(v2 + 2088) = a2;
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?(v3);
}

uint64_t protocol witness for ConnectionProviderProtocol.isMPTCP.getter in conformance RPCOspreyConnectionProvider()
{
  return *(unsigned __int8 *)(v0 + 2116);
}

uint64_t protocol witness for ConnectionProviderProtocol.openConnectionWithInitialPayload(_:completion:) in conformance RPCOspreyConnectionProvider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return RPCOspreyConnectionProvider.openConnectionWithInitialPayload(_:completion:)(a1, a2, a3);
}

void protocol witness for ConnectionProviderProtocol.send(data:completion:) in conformance RPCOspreyConnectionProvider(uint64_t a1, unint64_t a2, void (*a3)(void, void))
{
}

uint64_t protocol witness for ConnectionProviderProtocol.readData(_:) in conformance RPCOspreyConnectionProvider(uint64_t a1, uint64_t a2)
{
  return RPCOspreyConnectionProvider.readData(_:)(a1, a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance RPCOspreyConnectionProvider()
{
  return RPCOspreyConnectionProvider.hashValue.getter();
}

void *protocol witness for Hashable.hash(into:) in conformance RPCOspreyConnectionProvider(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return ConnectionProviderProtocol.hash(into:)(a1, a2, WitnessTable);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RPCOspreyConnectionProvider(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  uint64_t WitnessTable = swift_getWitnessTable();
  ConnectionProviderProtocol.hash(into:)((uint64_t)v5, a2, WitnessTable);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RPCOspreyConnectionProvider(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  uint64_t WitnessTable = swift_getWitnessTable();

  return static ConnectionProviderProtocol.== infix(_:_:)(v4, v5, a3, WitnessTable);
}

uint64_t base witness table accessor for Equatable in RPCOspreyConnectionProvider(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type RPCOspreyConnectionProvider and conformance RPCOspreyConnectionProvider((unint64_t *)&lazy protocol witness table cache variable for type RPCOspreyConnectionProvider and conformance RPCOspreyConnectionProvider, a2, (void (*)(uint64_t))type metadata accessor for RPCOspreyConnectionProvider);
}

uint64_t instantiation function for generic protocol witness table for RPCOspreyConnectionProvider(uint64_t a1, uint64_t a2)
{
  uint64_t result = lazy protocol witness table accessor for type RPCOspreyConnectionProvider and conformance RPCOspreyConnectionProvider(&lazy protocol witness table cache variable for type RPCOspreyConnectionProvider and conformance RPCOspreyConnectionProvider, a2, (void (*)(uint64_t))type metadata accessor for RPCOspreyConnectionProvider);
  *(void *)(a1 + 8) = result;
  return result;
}

void *outlined retain of ConnectionConfiguration(void *a1)
{
  uint64_t v2 = (void *)a1[13];
  uint64_t v13 = a1[41];
  uint64_t v14 = a1[40];
  uint64_t v11 = a1[43];
  uint64_t v12 = a1[42];
  uint64_t v9 = a1[45];
  uint64_t v10 = a1[44];
  uint64_t v3 = a1[48];
  uint64_t v7 = a1[47];
  uint64_t v8 = a1[46];
  uint64_t v4 = a1[49];
  uint64_t v15 = a1[51];
  uint64_t v16 = a1[50];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v5 = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of ConnectionPolicy?(v14, v13, v12, v11, v10, v9, v8, v7, v3, v4);
  outlined copy of ConnectionPolicyRoute?(v16, v15);
  return a1;
}

uint64_t outlined copy of ConnectionPolicyRoute?(uint64_t a1, uint64_t a2)
{
  if (a2 != 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined retain of ConnectionMetrics(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  uint64_t v36 = *(void *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 72);
  uint64_t v4 = *(void *)(a1 + 80);
  id v5 = *(void **)(a1 + 88);
  uint64_t v66 = *(void *)(a1 + 96);
  uint64_t v65 = *(void *)(a1 + 104);
  uint64_t v64 = *(void *)(a1 + 112);
  uint64_t v63 = *(void *)(a1 + 120);
  uint64_t v62 = *(void *)(a1 + 128);
  uint64_t v61 = *(void *)(a1 + 136);
  uint64_t v60 = *(void *)(a1 + 144);
  uint64_t v59 = *(void *)(a1 + 152);
  os_log_type_t v6 = *(void **)(a1 + 448);
  uint64_t v46 = *(void *)(a1 + 456);
  uint64_t v45 = *(void *)(a1 + 464);
  uint64_t v44 = *(void *)(a1 + 472);
  uint64_t v43 = *(void *)(a1 + 480);
  uint64_t v42 = *(void *)(a1 + 488);
  uint64_t v41 = *(void *)(a1 + 496);
  uint64_t v40 = *(void *)(a1 + 504);
  uint64_t v39 = *(void *)(a1 + 512);
  long long v33 = *(_OWORD *)(a1 + 520);
  long long v31 = *(_OWORD *)(a1 + 536);
  uint64_t v7 = *(void *)(a1 + 552);
  uint64_t v8 = *(void **)(a1 + 560);
  uint64_t v77 = *(void *)(a1 + 576);
  uint64_t v78 = *(void *)(a1 + 568);
  long long v75 = *(_OWORD *)(a1 + 648);
  long long v76 = *(_OWORD *)(a1 + 632);
  long long v73 = *(_OWORD *)(a1 + 680);
  long long v74 = *(_OWORD *)(a1 + 664);
  long long v71 = *(_OWORD *)(a1 + 712);
  long long v72 = *(_OWORD *)(a1 + 696);
  long long v69 = *(_OWORD *)(a1 + 744);
  long long v70 = *(_OWORD *)(a1 + 728);
  long long v68 = *(_OWORD *)(a1 + 760);
  long long v67 = *(_OWORD *)(a1 + 776);
  long long v58 = *(_OWORD *)(a1 + 792);
  long long v57 = *(_OWORD *)(a1 + 808);
  long long v54 = *(_OWORD *)(a1 + 824);
  long long v50 = *(_OWORD *)(a1 + 840);
  long long v48 = *(_OWORD *)(a1 + 856);
  long long v47 = *(_OWORD *)(a1 + 872);
  long long v38 = *(_OWORD *)(a1 + 888);
  long long v37 = *(_OWORD *)(a1 + 904);
  long long v35 = *(_OWORD *)(a1 + 920);
  long long v34 = *(_OWORD *)(a1 + 936);
  long long v32 = *(_OWORD *)(a1 + 952);
  long long v30 = *(_OWORD *)(a1 + 968);
  long long v29 = *(_OWORD *)(a1 + 984);
  long long v28 = *(_OWORD *)(a1 + 1000);
  uint64_t v49 = *(void *)(a1 + 584);
  uint64_t v51 = *(void *)(a1 + 592);
  uint64_t v52 = *(void *)(a1 + 600);
  uint64_t v53 = *(void *)(a1 + 608);
  uint64_t v55 = *(void *)(a1 + 616);
  uint64_t v56 = *(void *)(a1 + 624);
  long long v26 = *(_OWORD *)(a1 + 176);
  long long v27 = *(_OWORD *)(a1 + 160);
  long long v24 = *(_OWORD *)(a1 + 208);
  long long v25 = *(_OWORD *)(a1 + 192);
  long long v22 = *(_OWORD *)(a1 + 240);
  long long v23 = *(_OWORD *)(a1 + 224);
  long long v20 = *(_OWORD *)(a1 + 272);
  long long v21 = *(_OWORD *)(a1 + 256);
  long long v18 = *(_OWORD *)(a1 + 304);
  long long v19 = *(_OWORD *)(a1 + 288);
  long long v16 = *(_OWORD *)(a1 + 336);
  long long v17 = *(_OWORD *)(a1 + 320);
  long long v14 = *(_OWORD *)(a1 + 368);
  long long v15 = *(_OWORD *)(a1 + 352);
  long long v12 = *(_OWORD *)(a1 + 400);
  long long v13 = *(_OWORD *)(a1 + 384);
  long long v10 = *(_OWORD *)(a1 + 432);
  long long v11 = *(_OWORD *)(a1 + 416);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of ConnectionHTTPHeaderReport?(v36, v2, v3, v4, v5);
  outlined copy of ConnectionPreparationReport?(v66, v65, v64, v63, v62, v61, v60, v59, v27, *((uint64_t *)&v27 + 1), v26, *((uint64_t *)&v26 + 1), v25, *((uint64_t *)&v25 + 1), v24, *((uint64_t *)&v24 + 1), v23, *((uint64_t *)&v23 + 1), v22,
    *((uint64_t *)&v22 + 1),
    v21,
    *((uint64_t *)&v21 + 1),
    v20,
    *((uint64_t *)&v20 + 1),
    v19,
    *((uint64_t *)&v19 + 1),
    v18,
    *((uint64_t *)&v18 + 1),
    v17,
    *((uint64_t *)&v17 + 1),
    v16,
    *((uint64_t *)&v16 + 1),
    v15,
    *((uint64_t *)&v15 + 1),
    v14,
    *((uint64_t *)&v14 + 1),
    v13,
    *((uint64_t *)&v13 + 1),
    v12,
    *((uint64_t *)&v12 + 1),
    v11,
    *((uint64_t *)&v11 + 1),
    v10,
    *((uint64_t *)&v10 + 1),
    v6);
  outlined copy of ConnectionEstablishmentReport?(v46, v45, v44, v43, v42, v41, v40, v39, v33, *((uint64_t *)&v33 + 1), v31, *((uint64_t *)&v31 + 1), v7, v8);
  outlined copy of ConnectionSnapshotReport?(v78, v77, v49, v51, v52, v53, v55, v56, v76, *((uint64_t *)&v76 + 1), v75, *((uint64_t *)&v75 + 1), v74, *((uint64_t *)&v74 + 1), v73, *((uint64_t *)&v73 + 1), v72, *((uint64_t *)&v72 + 1), v71,
    *((uint64_t *)&v71 + 1),
    v70,
    *((uint64_t *)&v70 + 1),
    v69,
    *((uint64_t *)&v69 + 1),
    v68,
    *((uint64_t *)&v68 + 1),
    v67,
    *((uint64_t *)&v67 + 1),
    v58,
    *((uint64_t *)&v58 + 1),
    v57,
    *((uint64_t *)&v57 + 1),
    v54,
    *((uint64_t *)&v54 + 1),
    v50,
    *((uint64_t *)&v50 + 1),
    v48,
    *((uint64_t *)&v48 + 1),
    v47,
    *((uint64_t *)&v47 + 1),
    v38,
    *((uint64_t *)&v38 + 1),
    v37,
    *((uint64_t *)&v37 + 1),
    v35,
    *((uint64_t *)&v35 + 1),
    v34,
    *((uint64_t *)&v34 + 1),
    v32,
    *((uint64_t *)&v32 + 1),
    v30,
    *((uint64_t *)&v30 + 1),
    v29,
    *((uint64_t *)&v29 + 1),
    v28);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined copy of ConnectionHTTPHeaderReport?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a5)
  {
    swift_bridgeObjectRetain();
    id v6 = a5;
    return swift_bridgeObjectRetain();
  }
  return result;
}

void outlined copy of ConnectionPreparationReport?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45)
{
  if (a43)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of ConnectionInterfaceReport?(a6, a7, a8, a9, a10, a11, a12);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v48 = a45;
  }
}

uint64_t outlined copy of ConnectionEstablishmentReport?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  if (a8)
  {
    swift_bridgeObjectRetain();
    id v14 = a14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

void outlined copy of ConnectionSnapshotReport?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  if (a3)
  {
    uint64_t v59 = (void *)STACK[0x630];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of ConnectionNetworkReport?(a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19);
    outlined copy of ConnectionInterfaceReport?(a49, a50, a51, a52, a53, a54, a55);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v58 = v59;
  }
}

uint64_t outlined init with copy of RPCOspreyConnectionProtocol?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RPCOspreyConnectionProtocol?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of RPCOspreyConnectionProtocol(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t outlined release of ConnectionMetrics?(uint64_t a1)
{
  long long v17 = *(_OWORD *)(a1 + 464);
  long long v18 = *(_OWORD *)(a1 + 480);
  long long v15 = *(_OWORD *)(a1 + 432);
  long long v16 = *(_OWORD *)(a1 + 448);
  long long v13 = *(_OWORD *)(a1 + 400);
  long long v14 = *(_OWORD *)(a1 + 416);
  long long v11 = *(_OWORD *)(a1 + 368);
  long long v12 = *(_OWORD *)(a1 + 384);
  long long v9 = *(_OWORD *)(a1 + 336);
  long long v10 = *(_OWORD *)(a1 + 352);
  long long v7 = *(_OWORD *)(a1 + 304);
  long long v8 = *(_OWORD *)(a1 + 320);
  long long v5 = *(_OWORD *)(a1 + 272);
  long long v6 = *(_OWORD *)(a1 + 288);
  long long v3 = *(_OWORD *)(a1 + 240);
  long long v4 = *(_OWORD *)(a1 + 256);
  outlined consume of ConnectionMetrics?(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void **)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    *(void *)(a1 + 224),
    *(void *)(a1 + 232),
    v3,
    *((uint64_t *)&v3 + 1),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((uint64_t *)&v5 + 1),
    v6,
    *((uint64_t *)&v6 + 1),
    v7,
    *((uint64_t *)&v7 + 1),
    v8,
    *((uint64_t *)&v8 + 1),
    v9,
    *((uint64_t *)&v9 + 1),
    v10,
    *((uint64_t *)&v10 + 1),
    v11,
    *((uint64_t *)&v11 + 1),
    v12,
    *((uint64_t *)&v12 + 1),
    v13,
    *((uint64_t *)&v13 + 1),
    v14,
    *((uint64_t *)&v14 + 1),
    v15,
    *((uint64_t *)&v15 + 1),
    (void *)v16,
    *((uint64_t *)&v16 + 1),
    v17,
    *((uint64_t *)&v17 + 1),
    v18,
    *((uint64_t *)&v18 + 1),
    *(void *)(a1 + 496));
  return a1;
}

uint64_t outlined consume of ConnectionMetrics?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a3)
  {
    uint64_t v124 = STACK[0xB48];
    uint64_t v123 = STACK[0xB40];
    uint64_t v122 = STACK[0xB38];
    uint64_t v121 = STACK[0xB30];
    uint64_t v120 = STACK[0xB28];
    uint64_t v119 = STACK[0xB20];
    uint64_t v118 = STACK[0xB18];
    uint64_t v117 = STACK[0xB10];
    uint64_t v116 = STACK[0xB08];
    uint64_t v115 = STACK[0xB00];
    uint64_t v114 = STACK[0xAF8];
    uint64_t v113 = STACK[0xAF0];
    uint64_t v112 = STACK[0xAE8];
    uint64_t v111 = STACK[0xAE0];
    uint64_t v110 = STACK[0xAD8];
    uint64_t v109 = STACK[0xAD0];
    uint64_t v108 = STACK[0xAC8];
    uint64_t v107 = STACK[0xAC0];
    uint64_t v106 = STACK[0xAB8];
    uint64_t v105 = STACK[0xAB0];
    uint64_t v104 = STACK[0xAA8];
    uint64_t v103 = STACK[0xAA0];
    uint64_t v102 = STACK[0xA98];
    uint64_t v101 = STACK[0xA90];
    uint64_t v100 = STACK[0xA88];
    uint64_t v99 = STACK[0xA80];
    uint64_t v98 = STACK[0xA78];
    uint64_t v97 = STACK[0xA70];
    uint64_t v96 = STACK[0xA68];
    uint64_t v95 = STACK[0xA60];
    uint64_t v94 = STACK[0xA58];
    uint64_t v93 = STACK[0xA50];
    uint64_t v92 = STACK[0xA48];
    uint64_t v91 = STACK[0xA40];
    uint64_t v90 = STACK[0xA38];
    uint64_t v89 = STACK[0xA30];
    uint64_t v88 = STACK[0xA28];
    uint64_t v87 = STACK[0xA20];
    uint64_t v86 = STACK[0xA18];
    uint64_t v85 = STACK[0xA10];
    uint64_t v84 = STACK[0xA08];
    uint64_t v83 = STACK[0xA00];
    uint64_t v82 = STACK[0x9F8];
    uint64_t v81 = STACK[0x9F0];
    uint64_t v80 = STACK[0x9E8];
    uint64_t v79 = STACK[0x9E0];
    uint64_t v78 = STACK[0x9D8];
    uint64_t v126 = STACK[0x9C8];
    uint64_t v127 = STACK[0x9D0];
    uint64_t v125 = STACK[0x9C0];
    uint64_t v77 = STACK[0x9B8];
    uint64_t v76 = STACK[0x9B0];
    uint64_t v75 = STACK[0x9A8];
    uint64_t v74 = STACK[0x9A0];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of ConnectionHTTPHeaderReport?(a8, a9, a10, a11, a12);
    outlined consume of ConnectionPreparationReport?(a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31,
      a32,
      a33,
      a34,
      a35,
      a36,
      a37,
      a38,
      a39,
      a40,
      a41,
      a42,
      a43,
      a44,
      a45,
      a46,
      a47,
      a48,
      a49,
      a50,
      a51,
      a52,
      a53,
      a54,
      a55,
      a56,
      a57);
    outlined consume of ConnectionEstablishmentReport?(a58, a59, a60, a61, a62, a63, a64, a65, a66, a67, a68, a69, a70, a71);
    outlined consume of ConnectionSnapshotReport?(a72, v74, v75, v76, v77, v125, v126, v127, v78, v79, v80, v81, v82, v83, v84, v85, v86, v87, v88,
      v89,
      v90,
      v91,
      v92,
      v93,
      v94,
      v95,
      v96,
      v97,
      v98,
      v99,
      v100,
      v101,
      v102,
      v103,
      v104,
      v105,
      v106,
      v107,
      v108,
      v109,
      v110,
      v111,
      v112,
      v113,
      v114,
      v115,
      v116,
      v117,
      v118,
      v119,
      v120,
      v121,
      v122,
      v123,
      v124);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *outlined retain of ConnectionPreparationReport(void *a1)
{
  uint64_t v10 = a1[6];
  uint64_t v11 = a1[5];
  uint64_t v8 = a1[8];
  uint64_t v9 = a1[7];
  uint64_t v2 = a1[11];
  uint64_t v6 = a1[10];
  uint64_t v7 = a1[9];
  long long v3 = (void *)a1[44];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of ConnectionInterfaceReport?(v11, v10, v9, v8, v7, v6, v2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v4 = v3;
  return a1;
}

uint64_t outlined retain of ConnectionPreparationReport?(__n128 *a1)
{
  OUTLINED_FUNCTION_3_2(a1);
  OUTLINED_FUNCTION_17_0();
  v10(v2, v3, v4, v5, v6, v7, v8, v9, v11, v12, v13, v14, v15, v16, v17, v18);
  return v1;
}

void *outlined release of ConnectionPreparationReport(void *a1)
{
  uint64_t v9 = a1[6];
  uint64_t v10 = a1[5];
  uint64_t v7 = a1[8];
  uint64_t v8 = a1[7];
  uint64_t v2 = a1[11];
  uint64_t v5 = a1[10];
  uint64_t v6 = a1[9];
  uint64_t v3 = (void *)a1[44];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of ConnectionInterfaceReport?(v10, v9, v8, v7, v6, v5, v2);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined release of ConnectionNetworkReport?(__n128 *a1)
{
  __n128 v2 = OUTLINED_FUNCTION_3_2(a1);
  v11(v3, v4, v5, v6, v7, v8, v9, v10, v2.n128_u64[0], v2.n128_u64[1], v12, v13, v14, v15, v16, v17, v18, v19, v20,
    v21,
    v22,
    v23,
    v24,
    v25,
    v26,
    v27,
    v28,
    v29,
    v30,
    v31,
    v32,
    v33);
  return v1;
}

_OWORD *outlined retain of ConnectionSnapshotReport?(_OWORD *a1)
{
  long long v14 = a1[5];
  long long v15 = a1[4];
  long long v12 = a1[7];
  long long v13 = a1[6];
  OUTLINED_FUNCTION_17_0();
  v10(v2, v3, v4, v5, v6, v7, v8, v9, v15, *((void *)&v15 + 1), v14, *((void *)&v14 + 1), v13, *((void *)&v13 + 1), v12, *((void *)&v12 + 1));
  return a1;
}

unint64_t lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError()
{
  unint64_t result = lazy protocol witness table cache variable for type NetworkConnectionError and conformance NetworkConnectionError;
  if (!lazy protocol witness table cache variable for type NetworkConnectionError and conformance NetworkConnectionError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkConnectionError and conformance NetworkConnectionError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NetworkConnectionError and conformance NetworkConnectionError;
  if (!lazy protocol witness table cache variable for type NetworkConnectionError and conformance NetworkConnectionError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkConnectionError and conformance NetworkConnectionError);
  }
  return result;
}

uint64_t outlined init with take of RPCOspreyConnectionProtocol(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

void partial apply for closure #1 in RPCOspreyConnectionProvider.readData(_:)(void *a1)
{
  closure #1 in RPCOspreyConnectionProvider.readData(_:)(a1, v1);
}

uint64_t sub_25D6E6548()
{
  swift_weakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_25D6E6580()
{
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t partial apply for closure #2 in RPCOspreyConnectionProvider.readData(_:)(uint64_t a1, unint64_t a2)
{
  return closure #2 in RPCOspreyConnectionProvider.readData(_:)(a1, a2, v2[2], v2[3], v2[4]);
}

void partial apply for closure #3 in RPCOspreyConnectionProvider.readData(_:)(void *a1)
{
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

void outlined consume of ConnectionProviderState(id a1, unsigned __int8 a2)
{
  if (a2 <= 1u) {
}
  }

uint64_t sub_25D6E6600()
{
  swift_release();
  outlined consume of Data._Representation(*(void *)(v0 + 32), *(void *)(v0 + 40));

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t partial apply for closure #2 in closure #2 in RPCOspreyConnectionProvider.readData(_:)()
{
  return (*(uint64_t (**)(void, void, void, void))(v0 + 16))(*(void *)(v0 + 32), *(void *)(v0 + 40), 0, 0);
}

uint64_t sub_25D6E6678()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

void partial apply for closure #1 in closure #2 in RPCOspreyConnectionProvider.readData(_:)()
{
  closure #1 in closure #2 in RPCOspreyConnectionProvider.readData(_:)(*(void (**)(void, unint64_t, void *, void))(v0 + 16));
}

id outlined copy of ConnectionProviderState(id result, unsigned __int8 a2)
{
  if (a2 <= 1u) {
    return result;
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type RPCOspreyConnectionProvider and conformance RPCOspreyConnectionProvider(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined assign with take of RPCOspreyConnectionProtocol?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RPCOspreyConnectionProtocol?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void outlined consume of NetworkConnectionError(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  if ((a4 >> 60) <= 9)
  {
    if (a4 >> 60 == 3) {
      a1 = a5;
    }
  }
}

uint64_t partial apply for closure #1 in RPCOspreyConnectionProvider.startConnectionWithOpenTimeoutTimer(completion:)()
{
  return closure #1 in RPCOspreyConnectionProvider.startConnectionWithOpenTimeoutTimer(completion:)();
}

uint64_t outlined destroy of RPCOspreyConnectionProtocol?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t siri_kdebug_trace()
{
  return MEMORY[0x270ED9F50](356, 0, 0, 0, 0);
}

uint64_t outlined init with take of ConnectionMetrics?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v4 = OUTLINED_FUNCTION_23_0();
  v5(v4);
  return a2;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

void _s11SiriNetwork27ConnectionPreparationReportVSgWOi0_(void *a1)
{
}

void _s11SiriNetwork24ConnectionSnapshotReportVSgWOi0_(void *a1)
{
}

uint64_t outlined destroy of weak ConnectionProviderDelegate?(uint64_t a1)
{
  return a1;
}

__n128 OUTLINED_FUNCTION_3_2(__n128 *a1)
{
  return a1[4];
}

uint64_t OUTLINED_FUNCTION_4_2(uint64_t a1, uint64_t a2)
{
  __swift_project_value_buffer(a1, a2);
  outlined copy of Data?(v3, v2);
  return swift_retain();
}

unint64_t *OUTLINED_FUNCTION_5_2()
{
  return &STACK[0x16A0];
}

uint64_t (*OUTLINED_FUNCTION_6_1())()
{
  return RPCOspreyConnectionProvider.connectionMetrics.modify();
}

uint64_t OUTLINED_FUNCTION_8_0(float a1)
{
  float *v1 = a1;
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_9_1()
{
  return outlined consume of Data?(v1, v0);
}

uint64_t OUTLINED_FUNCTION_10_0()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_12_0()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_13_0()
{
  return swift_beginAccess();
}

unint64_t *OUTLINED_FUNCTION_14_0()
{
  return &STACK[0x1100];
}

uint64_t OUTLINED_FUNCTION_16_0()
{
  return swift_allocError();
}

uint64_t OUTLINED_FUNCTION_20_0()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_21_0(uint64_t a1, uint64_t a2)
{
  return a2 + 568;
}

uint64_t OUTLINED_FUNCTION_22_0()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_23_0()
{
  return v0;
}

BOOL OUTLINED_FUNCTION_24_0(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

char *OUTLINED_FUNCTION_27_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  return &a50;
}

unint64_t *OUTLINED_FUNCTION_28_0()
{
  return &STACK[0x16A0];
}

double OUTLINED_FUNCTION_29_0()
{
  double result = 0.0;
  *(_OWORD *)(v0 + 2080) = 0u;
  return result;
}

unint64_t *OUTLINED_FUNCTION_30_0()
{
  return &STACK[0x3E00];
}

uint64_t OUTLINED_FUNCTION_31(__n128 a1, uint64_t a2, uint64_t a3)
{
  *(__n128 *)(a3 + 24) = a1;
  return swift_willThrow();
}

uint64_t OUTLINED_FUNCTION_32_0()
{
  return outlined init with take of ConnectionMetrics?((uint64_t)&STACK[0xB60], (uint64_t)&STACK[0x1100], v0);
}

uint64_t OUTLINED_FUNCTION_33_0()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_34_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  return outlined consume of ConnectionEstablishmentReport?(a1, a2, a3, a4, v16, v15, v14, v17, a9, a10, a11, a12, a13, a14);
}

void OUTLINED_FUNCTION_35(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

void OUTLINED_FUNCTION_36(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0x16u);
}

void OUTLINED_FUNCTION_37(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 3;
}

void *ConnectionTCPInfoMetrics.netNetworkInterface.getter()
{
  uint64_t v2 = *v0;
  uint64_t v1 = v0[1];
  int v3 = *((unsigned __int8 *)v0 + 32);
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F6E4C0]), sel_init);
  uint64_t v5 = v4;
  if (v4)
  {
    id v6 = v4;
    if (v1) {
      uint64_t v7 = (void *)MEMORY[0x2611B2220](v2, v1);
    }
    else {
      uint64_t v7 = 0;
    }
    objc_msgSend(v5, sel_setName_, v7);

    if (v3 == 25) {
      uint64_t v8 = 0;
    }
    else {
      uint64_t v8 = ConnectionType.netConnectionType.getter();
    }
    objc_msgSend(v5, sel_setConnectionType_, v8);
  }
  return v5;
}

void *ConnectionTCPInfoMetrics.netDebugNetworkInterface.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  char v56 = *(unsigned char *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 56);
  char v55 = *(unsigned char *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 72);
  char v54 = *(unsigned char *)(v0 + 80);
  uint64_t v4 = *(void *)(v0 + 88);
  char v5 = *(unsigned char *)(v0 + 96);
  uint64_t v6 = *(void *)(v0 + 104);
  char v7 = *(unsigned char *)(v0 + 112);
  uint64_t v40 = *(void *)(v0 + 120);
  char v39 = *(unsigned char *)(v0 + 128);
  uint64_t v53 = *(void *)(v0 + 136);
  char v52 = *(unsigned char *)(v0 + 144);
  uint64_t v51 = *(void *)(v0 + 152);
  unsigned int v49 = *(_DWORD *)(v0 + 164);
  char v50 = *(unsigned char *)(v0 + 160);
  unsigned int v47 = *(_DWORD *)(v0 + 172);
  char v48 = *(unsigned char *)(v0 + 168);
  unsigned int v45 = *(_DWORD *)(v0 + 180);
  char v46 = *(unsigned char *)(v0 + 176);
  unsigned int v43 = *(_DWORD *)(v0 + 188);
  char v44 = *(unsigned char *)(v0 + 184);
  char v42 = *(unsigned char *)(v0 + 192);
  uint64_t v38 = *(void *)(v0 + 200);
  char v37 = *(unsigned char *)(v0 + 208);
  uint64_t v36 = *(void *)(v0 + 216);
  unsigned int v34 = *(_DWORD *)(v0 + 228);
  char v35 = *(unsigned char *)(v0 + 224);
  unsigned int v32 = *(_DWORD *)(v0 + 236);
  char v33 = *(unsigned char *)(v0 + 232);
  char v31 = *(unsigned char *)(v0 + 240);
  unsigned int v41 = *(_DWORD *)(v0 + 244);
  char v8 = *(unsigned char *)(v0 + 248);
  id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F6E468]), sel_init);
  uint64_t v10 = v9;
  if (v9)
  {
    if (v56) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = v1;
    }
    objc_msgSend(v9, sel_setBytesReceived_, v11);
    if (v55) {
      uint64_t v12 = 0;
    }
    else {
      uint64_t v12 = v2;
    }
    objc_msgSend(v10, sel_setBytesRetransmitted_, v12);
    if (v54) {
      uint64_t v13 = 0;
    }
    else {
      uint64_t v13 = v3;
    }
    objc_msgSend(v10, sel_setBytesSent_, v13);
    if (v5) {
      uint64_t v14 = 0;
    }
    else {
      uint64_t v14 = v4;
    }
    objc_msgSend(v10, sel_setBytesUnacked_, v14);
    if (v7) {
      uint64_t v15 = 0;
    }
    else {
      uint64_t v15 = v6;
    }
    objc_msgSend(v10, sel_setDuplicateBytesReceived_, v15);
    if (v39) {
      uint64_t v16 = 0;
    }
    else {
      uint64_t v16 = v40;
    }
    objc_msgSend(v10, sel_setOutOfOrderBytesReceived_, v16);
    if (v52) {
      uint64_t v17 = 0;
    }
    else {
      uint64_t v17 = v53;
    }
    objc_msgSend(v10, sel_setPacketsReceived_, v17);
    if (v50) {
      uint64_t v18 = 0;
    }
    else {
      uint64_t v18 = v51;
    }
    objc_msgSend(v10, sel_setPacketsSent_, v18);
    if (v48) {
      uint64_t v19 = 0;
    }
    else {
      uint64_t v19 = v49;
    }
    objc_msgSend(v10, sel_setRttBest_, v19);
    if (v46) {
      uint64_t v20 = 0;
    }
    else {
      uint64_t v20 = v47;
    }
    objc_msgSend(v10, sel_setRttCurrent_, v20);
    if (v44) {
      uint64_t v21 = 0;
    }
    else {
      uint64_t v21 = v45;
    }
    objc_msgSend(v10, sel_setRttSmoothed_, v21);
    if (v42) {
      uint64_t v22 = 0;
    }
    else {
      uint64_t v22 = v43;
    }
    objc_msgSend(v10, sel_setRttVariance_, v22);
    if (v37) {
      uint64_t v23 = 0;
    }
    else {
      uint64_t v23 = v38;
    }
    objc_msgSend(v10, sel_setSendBandwidth_, v23);
    if (v35) {
      uint64_t v24 = 0;
    }
    else {
      uint64_t v24 = v36;
    }
    objc_msgSend(v10, sel_setSendBufferBytes_, v24);
    if (v8) {
      uint64_t v25 = 0;
    }
    else {
      uint64_t v25 = v41;
    }
    objc_msgSend(v10, sel_setSubflowSwitchCount_, v25);
    if (v33) {
      uint64_t v26 = 0;
    }
    else {
      uint64_t v26 = v34;
    }
    objc_msgSend(v10, sel_setSynRetransmits_, v26);
    if (v31) {
      uint64_t v27 = 0;
    }
    else {
      uint64_t v27 = v32;
    }
    objc_msgSend(v10, sel_setTfoSynDataAcked_, v27);
    id v28 = v10;
    uint64_t v29 = ConnectionTCPInfoMetrics.netNetworkInterface.getter();
    objc_msgSend(v28, sel_setNetworkInterface_, v29);
  }
  return v10;
}

uint64_t ConnectionResolutionReport.durationInMs.getter()
{
  outlined init with take of Double?(v0 + 8, (uint64_t)v3);
  uint64_t result = outlined init with take of Double?((uint64_t)v3, (uint64_t)&v4);
  if ((v5 & 1) != 0 || v4 <= 0.0) {
    return 0;
  }
  double v2 = v4 * 1000.0;
  if (v4 * 1000.0 <= 0.0) {
    return 0;
  }
  if (v2 >= 1.84467441e19) {
    return -1;
  }
  if ((~*(void *)&v2 & 0x7FF0000000000000) != 0)
  {
    if (v2 > -1.0) {
      return (unint64_t)v2;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t outlined init with take of Double?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Double?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t destroy for ConnectionResolutionReport()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ConnectionResolutionReport(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v3;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v4;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ConnectionResolutionReport(uint64_t a1, int *a2)
{
  int v4 = *a2;
  *(unsigned char *)(a1 + 4) = *((unsigned char *)a2 + 4);
  *(_DWORD *)a1 = v4;
  uint64_t v5 = *((void *)a2 + 1);
  *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
  *(void *)(a1 + 8) = v5;
  LODWORD(v5) = a2[5];
  *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
  *(_DWORD *)(a1 + 20) = v5;
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 48) = a2[12];
  *(_DWORD *)(a1 + 52) = a2[13];
  *(void *)(a1 + 56) = *((void *)a2 + 7);
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 72) = a2[18];
  *(_DWORD *)(a1 + 76) = a2[19];
  return a1;
}

void *__swift_memcpy80_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x50uLL);
}

uint64_t assignWithTake for ConnectionResolutionReport(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConnectionResolutionReport(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 80))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      unint64_t v3 = *(void *)(a1 + 40);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConnectionResolutionReport(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 80) = 0;
    }
    if (a2) {
      *(void *)(result + 40) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ConnectionResolutionReport()
{
  return &type metadata for ConnectionResolutionReport;
}

uint64_t ConnectionResolutionReport.debugDescription.getter()
{
  uint64_t v1 = 0x6E776F6E6B6E75;
  unint64_t v2 = 0xE700000000000000;
  strcpy((char *)v47, "source ");
  v47[1] = 0xE700000000000000;
  uint64_t v3 = OUTLINED_FUNCTION_0_4();
  if ((v4 & 1) == 0)
  {
    LODWORD(v49._countAndFlagsBits) = *(_DWORD *)v0;
    uint64_t v3 = String.init<A>(describing:)();
    unint64_t v2 = v5;
  }
  unint64_t v6 = v2;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  uint64_t v8 = v47[0];
  char v7 = (void *)v47[1];
  strcpy((char *)v47, "durationInMs ");
  HIWORD(v47[1]) = -4864;
  uint64_t v9 = ConnectionResolutionReport.durationInMs.getter();
  uint64_t v46 = v8;
  if (v10)
  {
    unint64_t v13 = 0xE700000000000000;
    uint64_t v11 = OUTLINED_FUNCTION_0_4();
  }
  else
  {
    v49._uint64_t countAndFlagsBits = v9;
    uint64_t v11 = String.init<A>(describing:)();
    unint64_t v13 = v12;
  }
  unint64_t v14 = v13;
  String.append(_:)(*(Swift::String *)&v11);
  swift_bridgeObjectRelease();
  uint64_t v15 = v47[0];
  uint64_t v16 = (void *)v47[1];
  OUTLINED_FUNCTION_2_2();
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  strcpy((char *)v47, "endpointCount ");
  HIBYTE(v47[1]) = -18;
  uint64_t v45 = v15;
  if (*(unsigned char *)(v0 + 24))
  {
    unint64_t v17 = 0xE700000000000000;
    uint64_t v18 = OUTLINED_FUNCTION_0_4();
  }
  else
  {
    LODWORD(v49._countAndFlagsBits) = *(_DWORD *)(v0 + 20);
    uint64_t v18 = String.init<A>(describing:)();
    unint64_t v17 = v19;
  }
  unint64_t v20 = v17;
  String.append(_:)(*(Swift::String *)&v18);
  swift_bridgeObjectRelease();
  uint64_t v21 = (void *)v47[1];
  uint64_t v44 = v47[0];
  OUTLINED_FUNCTION_2_2();
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  v49._uint64_t countAndFlagsBits = 0xD000000000000014;
  v49._object = (void *)0x800000025D794FA0;
  uint64_t v22 = *(void *)(v0 + 40);
  if (v22)
  {
    uint64_t v23 = *(void *)(v0 + 48);
    v47[0] = *(void *)(v0 + 32);
    v47[1] = v22;
    uint64_t v48 = v23;
    swift_bridgeObjectRetain();
    uint64_t v24 = String.init<A>(describing:)();
    unint64_t v26 = v25;
  }
  else
  {
    unint64_t v26 = 0xE700000000000000;
    uint64_t v24 = OUTLINED_FUNCTION_0_4();
  }
  unint64_t v27 = v26;
  String.append(_:)(*(Swift::String *)&v24);
  swift_bridgeObjectRelease();
  v28._uint64_t countAndFlagsBits = 93;
  v28._object = (void *)0xE100000000000000;
  String.append(_:)(v28);
  uint64_t countAndFlagsBits = v49._countAndFlagsBits;
  object = v49._object;
  OUTLINED_FUNCTION_2_2();
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  v49._uint64_t countAndFlagsBits = 0xD000000000000013;
  v49._object = (void *)0x800000025D794FC0;
  uint64_t v31 = *(void *)(v0 + 64);
  if (v31)
  {
    uint64_t v32 = *(void *)(v0 + 72);
    v47[0] = *(void *)(v0 + 56);
    v47[1] = v31;
    uint64_t v48 = v32;
    swift_bridgeObjectRetain();
    uint64_t v1 = String.init<A>(describing:)();
    unsigned int v34 = v33;
  }
  else
  {
    unsigned int v34 = (void *)0xE700000000000000;
  }
  v35._uint64_t countAndFlagsBits = v1;
  v35._object = v34;
  String.append(_:)(v35);
  swift_bridgeObjectRelease();
  v36._uint64_t countAndFlagsBits = 93;
  v36._object = (void *)0xE100000000000000;
  String.append(_:)(v36);
  OUTLINED_FUNCTION_2_2();
  _StringGuts.grow(_:)(54);
  v37._uint64_t countAndFlagsBits = 0xD000000000000023;
  v37._object = (void *)0x800000025D794FE0;
  String.append(_:)(v37);
  v38._uint64_t countAndFlagsBits = v46;
  v38._object = v7;
  String.append(_:)(v38);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_1_4();
  v39._uint64_t countAndFlagsBits = v45;
  v39._object = v16;
  String.append(_:)(v39);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_1_4();
  v40._uint64_t countAndFlagsBits = v44;
  v40._object = v21;
  String.append(_:)(v40);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_1_4();
  v41._uint64_t countAndFlagsBits = countAndFlagsBits;
  v41._object = object;
  String.append(_:)(v41);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_1_4();
  String.append(_:)(v49);
  swift_bridgeObjectRelease();
  v42._uint64_t countAndFlagsBits = 93;
  v42._object = (void *)0xE100000000000000;
  String.append(_:)(v42);
  return v47[0];
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ConnectionResolutionReport()
{
  memcpy(v2, v0, sizeof(v2));
  return ConnectionResolutionReport.debugDescription.getter();
}

uint64_t OUTLINED_FUNCTION_0_4()
{
  return 0x6E776F6E6B6E75;
}

void OUTLINED_FUNCTION_1_4()
{
  uint64_t v1 = 8236;
  unint64_t v2 = 0xE200000000000000;
  String.append(_:)(*(Swift::String *)&v1);
}

id static NSURLSessionConfiguration.defaultSessionConfiguration(with:)(char *__src)
{
  memcpy(__dst, __src, sizeof(__dst));
  char v2 = __src[200];
  unsigned __int8 v79 = __src[201];
  unsigned __int8 v3 = v79;
  memcpy(v54, __src + 202, sizeof(v54));
  double v31 = *((double *)__src + 34);
  char v78 = __src[280];
  char v4 = v78;
  unint64_t v5 = *((void *)__src + 42);
  uint64_t v47 = *((void *)__src + 41);
  uint64_t v49 = *((void *)__src + 40);
  long long v44 = *(_OWORD *)(__src + 360);
  long long v45 = *(_OWORD *)(__src + 344);
  uint64_t v6 = *((void *)__src + 49);
  uint64_t v42 = *((void *)__src + 48);
  uint64_t v43 = *((void *)__src + 47);
  uint64_t v7 = *((void *)__src + 51);
  uint64_t v41 = *((void *)__src + 50);
  long long v39 = *((_OWORD *)__src + 27);
  long long v40 = *((_OWORD *)__src + 26);
  long long v38 = *((_OWORD *)__src + 28);
  uint64_t v8 = *((void *)__src + 59);
  uint64_t v37 = *((void *)__src + 58);
  long long v36 = *((_OWORD *)__src + 30);
  uint64_t v34 = *((void *)__src + 63);
  uint64_t v35 = *((void *)__src + 62);
  int v33 = *((_DWORD *)__src + 128);
  id v9 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_defaultSessionConfiguration);
  char v32 = v2;
  char v52 = v2;
  id v10 = v9;
  unsigned __int8 v53 = v3;
  double v55 = v31;
  char v56 = v4;
  long long v11 = *(_OWORD *)(__src + 297);
  long long v57 = *(_OWORD *)(__src + 281);
  *(_OWORD *)id v58 = v11;
  *(void *)&v58[15] = *((void *)__src + 39);
  uint64_t v59 = v49;
  uint64_t v60 = v47;
  unint64_t v61 = v5;
  long long v62 = v45;
  long long v63 = v44;
  uint64_t v64 = v43;
  uint64_t v65 = v42;
  uint64_t v66 = v6;
  uint64_t v67 = v41;
  long long v69 = v40;
  long long v70 = v39;
  long long v71 = v38;
  uint64_t v48 = v7;
  uint64_t v68 = v7;
  uint64_t v72 = v37;
  long long v74 = v36;
  char v46 = v8;
  uint64_t v73 = v8;
  uint64_t v75 = v35;
  uint64_t v76 = v34;
  int v77 = v33;
  ConnectionConfiguration.usingTLS.getter();
  char v13 = v12;
  OUTLINED_FUNCTION_2_3(v12, sel_setAllowsCellularAccess_);
  OUTLINED_FUNCTION_2_3((uint64_t)objc_msgSend(v10, sel_setNetworkServiceType_, 4), sel_set_allowTCPIOConnectionStreamTask_);
  objc_msgSend(v10, sel_setTimeoutIntervalForRequest_, 30.0);
  if ((v78 & 1) == 0) {
    objc_msgSend(v10, sel_setTimeoutIntervalForRequest_, v31);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, Any)>);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_25D790C60;
  __dst[0] = *(id *)MEMORY[0x263EFC6E0];
  id v15 = __dst[0];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CFStringRef?);
  lazy protocol witness table accessor for type CFStringRef? and conformance <A> A?();
  OUTLINED_FUNCTION_1_5();
  uint64_t v16 = MEMORY[0x263F8D4F8];
  *(void *)(v14 + 96) = MEMORY[0x263F8D4F8];
  *(unsigned char *)(v14 + 72) = 1;
  __dst[0] = *(id *)MEMORY[0x263EFC758];
  id v17 = __dst[0];
  OUTLINED_FUNCTION_1_5();
  *(void *)(v14 + 168) = v16;
  *(unsigned char *)(v14 + 144) = 1;
  v50[4] = Dictionary.init(dictionaryLiteral:)();
  if (v6)
  {
    int v18 = v5;
    char v19 = v5 & 1;
    uint64_t v20 = (v5 >> 8) & 1;
    if ((v13 & 1) == 0)
    {
      uint64_t v21 = 0;
      goto LABEL_13;
    }
    uint64_t v21 = HIDWORD(v5) & 1;
  }
  else
  {
    char v19 = 0;
    LODWORD(v20) = 1;
    if ((v13 & 1) == 0)
    {
      uint64_t v21 = 0;
      goto LABEL_13;
    }
    uint64_t v21 = v32 & 1;
    int v18 = v5;
  }
  objc_msgSend(v10, sel_set_allowsTLSSessionTickets_, v79);
  if (v6 && (v18 & 0x10000) != 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef?, Bool)>);
    uint64_t v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_25D790C50;
    uint64_t v23 = (void *)*MEMORY[0x263EFC6D8];
    *(void *)(v22 + 32) = *MEMORY[0x263EFC6D8];
    *(unsigned char *)(v22 + 40) = 1;
    id v24 = v23;
    uint64_t v25 = Dictionary.init(dictionaryLiteral:)();
    unint64_t v26 = (void *)*MEMORY[0x263EFC800];
    type metadata accessor for CFStringRef(0);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef();
    id v27 = v26;
    AnyHashable.init<A>(_:)();
    v50[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CFStringRef? : Bool]);
    v50[0] = v25;
    specialized Dictionary.subscript.setter((uint64_t)v50, (uint64_t)__dst);
  }
LABEL_13:
  OUTLINED_FUNCTION_2_3((uint64_t)objc_msgSend(v10, sel_set_allowsTCPFastOpen_, v21), sel_set_allowsRetryForBackgroundDataTasks_);
  uint64_t v28 = AFIsHorseman();
  if (v28 & 1) == 0 && (v19 & 1) == 0 && (v48 == 1 || (v46))
  {
    OUTLINED_FUNCTION_2_3(v28, sel_set_allowsMultipathTCP_);
    objc_msgSend(v10, sel_setMultipathServiceType_, 2);
  }
  if (v20) {
    objc_msgSend(v10, sel_set_expiredDNSBehavior_, 1);
  }
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v10, sel_set_socketStreamProperties_, isa);

  objc_msgSend(v10, sel_set_timingDataOptions_, 4);
  return v10;
}

uint64_t NSURLSessionConfiguration.rpcDescription.getter()
{
  strcpy((char *)&v29, "Service Type ");
  objc_msgSend(v0, sel_networkServiceType);
  v1._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  uint64_t countAndFlagsBits = v29._countAndFlagsBits;
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  v29._uint64_t countAndFlagsBits = 0x7473696D6974704FLL;
  v29._object = (void *)0xEF20534E44206369;
  id v2 = objc_msgSend(v0, sel__expiredDNSBehavior);
  BOOL v3 = v2 == (id)1;
  if (v2 == (id)1) {
    uint64_t v4 = 0x64656C62616E65;
  }
  else {
    uint64_t v4 = 0x64656C6261736964;
  }
  if (v3) {
    unint64_t v5 = 0xE700000000000000;
  }
  else {
    unint64_t v5 = 0xE800000000000000;
  }
  unint64_t v6 = v5;
  String.append(_:)(*(Swift::String *)&v4);
  swift_bridgeObjectRelease();
  uint64_t v8 = v29._countAndFlagsBits;
  object = v29._object;
  v29._uint64_t countAndFlagsBits = 0x20504354504DLL;
  v29._object = (void *)0xE600000000000000;
  unsigned int v9 = objc_msgSend(v0, sel__allowsMultipathTCP);
  BOOL v10 = v9 == 0;
  if (v9) {
    uint64_t v11 = 0x64656C62616E65;
  }
  else {
    uint64_t v11 = 0x64656C6261736964;
  }
  if (v10) {
    unint64_t v12 = 0xE800000000000000;
  }
  else {
    unint64_t v12 = 0xE700000000000000;
  }
  unint64_t v13 = v12;
  String.append(_:)(*(Swift::String *)&v11);
  swift_bridgeObjectRelease();
  uint64_t v15 = v29._countAndFlagsBits;
  uint64_t v14 = v29._object;
  v29._uint64_t countAndFlagsBits = 542329940;
  v29._object = (void *)0xE400000000000000;
  unsigned int v16 = objc_msgSend(v0, sel__allowsTLSSessionTickets);
  BOOL v17 = v16 == 0;
  if (v16) {
    uint64_t v18 = 0x64656C62616E65;
  }
  else {
    uint64_t v18 = 0x64656C6261736964;
  }
  if (v17) {
    unint64_t v19 = 0xE800000000000000;
  }
  else {
    unint64_t v19 = 0xE700000000000000;
  }
  unint64_t v20 = v19;
  String.append(_:)(*(Swift::String *)&v18);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  objc_msgSend(v0, sel_timeoutIntervalForRequest);
  Double.seconds.getter(v21);
  v22._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._uint64_t countAndFlagsBits = 0x73646E6F63657320;
  v23._object = (void *)0xE90000000000002ELL;
  String.append(_:)(v23);
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_5();
  v24._uint64_t countAndFlagsBits = v8;
  v24._object = object;
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_5();
  v25._uint64_t countAndFlagsBits = v15;
  v25._object = v14;
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_5();
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_5();
  v26._uint64_t countAndFlagsBits = 0xD000000000000015;
  v26._object = (void *)0x800000025D795010;
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  return countAndFlagsBits;
}

unint64_t lazy protocol witness table accessor for type CFStringRef? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type CFStringRef? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type CFStringRef? and conformance <A> A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CFStringRef?);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CFStringRef? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef()
{
  unint64_t result = lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef;
  if (!lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef)
  {
    type metadata accessor for CFStringRef(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef;
  if (!lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef)
  {
    type metadata accessor for CFStringRef(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef);
  }
  return result;
}

void OUTLINED_FUNCTION_0_5()
{
  uint64_t v1 = 8236;
  unint64_t v2 = 0xE200000000000000;
  String.append(_:)(*(Swift::String *)&v1);
}

uint64_t OUTLINED_FUNCTION_1_5()
{
  return AnyHashable.init<A>(_:)();
}

id OUTLINED_FUNCTION_2_3(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, 1);
}

uint64_t dispatch thunk of CommunicationProtocolDelegateProtobuf.didReceiveObject(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

const __CFString *one-time initialization function for httpMethodACE()
{
  CFStringRef result = (id)__CFStringMakeConstantString("ACE");
  static ConnectionConfigurationConstants.httpMethodACE = (uint64_t)result;
  return result;
}

const __CFString *one-time initialization function for httpContentLengthACE()
{
  CFStringRef result = (id)__CFStringMakeConstantString("2000000000");
  static ConnectionConfigurationConstants.httpContentLengthACE = (uint64_t)result;
  return result;
}

unint64_t Logger.Subsystem.rawValue.getter()
{
  return 0xD00000000000001ALL;
}

uint64_t Logger.Category.rawValue.getter()
{
  return 0x6B726F7774654ELL;
}

uint64_t one-time initialization function for siriNetwork()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Logger.siriNetwork);
  __swift_project_value_buffer(v0, (uint64_t)static Logger.siriNetwork);
  type metadata accessor for OS_os_log();
  OS_os_log.init(subsystem:category:)();
  return Logger.init(_:)();
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

unint64_t type metadata accessor for OS_os_log()
{
  unint64_t result = lazy cache variable for type metadata for OS_os_log;
  if (!lazy cache variable for type metadata for OS_os_log)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  }
  return result;
}

uint64_t ConnectionTCPInfoMetrics.interfaceName.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ConnectionTCPInfoMetrics.interfaceName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *unint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*ConnectionTCPInfoMetrics.interfaceName.modify())(void)
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

uint64_t ConnectionTCPInfoMetrics.connectionIdentifier.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ConnectionTCPInfoMetrics.connectionIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*ConnectionTCPInfoMetrics.connectionIdentifier.modify())(void)
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

void ConnectionTCPInfoMetrics.connectionType.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 32);
}

unsigned char *ConnectionTCPInfoMetrics.connectionType.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 32) = *result;
  return result;
}

uint64_t (*ConnectionTCPInfoMetrics.connectionType.modify())(void)
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

uint64_t ConnectionTCPInfoMetrics.bytesReceived.getter()
{
  return *(void *)(v0 + 40);
}

uint64_t ConnectionTCPInfoMetrics.bytesReceived.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 40) = result;
  *(unsigned char *)(v2 + 48) = a2 & 1;
  return result;
}

uint64_t (*ConnectionTCPInfoMetrics.bytesReceived.modify())(void)
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

uint64_t ConnectionTCPInfoMetrics.bytesRetransmitted.getter()
{
  return *(void *)(v0 + 56);
}

uint64_t ConnectionTCPInfoMetrics.bytesRetransmitted.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 56) = result;
  *(unsigned char *)(v2 + 64) = a2 & 1;
  return result;
}

uint64_t (*ConnectionTCPInfoMetrics.bytesRetransmitted.modify())(void)
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

uint64_t ConnectionTCPInfoMetrics.bytesSent.getter()
{
  return *(void *)(v0 + 72);
}

uint64_t ConnectionTCPInfoMetrics.bytesSent.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 72) = result;
  *(unsigned char *)(v2 + 80) = a2 & 1;
  return result;
}

uint64_t (*ConnectionTCPInfoMetrics.bytesSent.modify())(void)
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

uint64_t ConnectionTCPInfoMetrics.bytesUnacked.getter()
{
  return *(void *)(v0 + 88);
}

uint64_t ConnectionTCPInfoMetrics.bytesUnacked.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 88) = result;
  *(unsigned char *)(v2 + 96) = a2 & 1;
  return result;
}

uint64_t (*ConnectionTCPInfoMetrics.bytesUnacked.modify())(void)
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

uint64_t ConnectionTCPInfoMetrics.duplicateBytesReceived.getter()
{
  return *(void *)(v0 + 104);
}

uint64_t ConnectionTCPInfoMetrics.duplicateBytesReceived.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 104) = result;
  *(unsigned char *)(v2 + 112) = a2 & 1;
  return result;
}

uint64_t (*ConnectionTCPInfoMetrics.duplicateBytesReceived.modify())(void)
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

uint64_t ConnectionTCPInfoMetrics.outOfOrderBytesReceived.getter()
{
  return *(void *)(v0 + 120);
}

uint64_t ConnectionTCPInfoMetrics.outOfOrderBytesReceived.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 120) = result;
  *(unsigned char *)(v2 + 128) = a2 & 1;
  return result;
}

uint64_t (*ConnectionTCPInfoMetrics.outOfOrderBytesReceived.modify())(void)
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

uint64_t ConnectionTCPInfoMetrics.packetsReceived.getter()
{
  return *(void *)(v0 + 136);
}

uint64_t ConnectionTCPInfoMetrics.packetsReceived.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 136) = result;
  *(unsigned char *)(v2 + 144) = a2 & 1;
  return result;
}

uint64_t (*ConnectionTCPInfoMetrics.packetsReceived.modify())(void)
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

uint64_t ConnectionTCPInfoMetrics.packetsSent.getter()
{
  return *(void *)(v0 + 152);
}

uint64_t ConnectionTCPInfoMetrics.packetsSent.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 152) = result;
  *(unsigned char *)(v2 + 160) = a2 & 1;
  return result;
}

uint64_t (*ConnectionTCPInfoMetrics.packetsSent.modify())(void)
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

unint64_t ConnectionTCPInfoMetrics.rttBest.getter()
{
  return OUTLINED_FUNCTION_0_6(*(unsigned int *)(v0 + 164));
}

uint64_t ConnectionTCPInfoMetrics.rttBest.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 164) = result;
  *(unsigned char *)(v1 + 168) = BYTE4(result) & 1;
  return result;
}

uint64_t (*ConnectionTCPInfoMetrics.rttBest.modify())(void)
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

unint64_t ConnectionTCPInfoMetrics.rttCurrent.getter()
{
  return OUTLINED_FUNCTION_0_6(*(unsigned int *)(v0 + 172));
}

uint64_t ConnectionTCPInfoMetrics.rttCurrent.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 172) = result;
  *(unsigned char *)(v1 + 176) = BYTE4(result) & 1;
  return result;
}

uint64_t (*ConnectionTCPInfoMetrics.rttCurrent.modify())(void)
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

unint64_t ConnectionTCPInfoMetrics.rttSmoothed.getter()
{
  return OUTLINED_FUNCTION_0_6(*(unsigned int *)(v0 + 180));
}

uint64_t ConnectionTCPInfoMetrics.rttSmoothed.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 180) = result;
  *(unsigned char *)(v1 + 184) = BYTE4(result) & 1;
  return result;
}

uint64_t (*ConnectionTCPInfoMetrics.rttSmoothed.modify())(void)
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

unint64_t ConnectionTCPInfoMetrics.rttVariance.getter()
{
  return OUTLINED_FUNCTION_0_6(*(unsigned int *)(v0 + 188));
}

uint64_t ConnectionTCPInfoMetrics.rttVariance.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 188) = result;
  *(unsigned char *)(v1 + 192) = BYTE4(result) & 1;
  return result;
}

uint64_t (*ConnectionTCPInfoMetrics.rttVariance.modify())(void)
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

uint64_t ConnectionTCPInfoMetrics.sendBandwidth.getter()
{
  return *(void *)(v0 + 200);
}

uint64_t ConnectionTCPInfoMetrics.sendBandwidth.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 200) = result;
  *(unsigned char *)(v2 + 208) = a2 & 1;
  return result;
}

uint64_t (*ConnectionTCPInfoMetrics.sendBandwidth.modify())(void)
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

uint64_t ConnectionTCPInfoMetrics.sendBufferBytes.getter()
{
  return *(void *)(v0 + 216);
}

uint64_t ConnectionTCPInfoMetrics.sendBufferBytes.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 216) = result;
  *(unsigned char *)(v2 + 224) = a2 & 1;
  return result;
}

uint64_t (*ConnectionTCPInfoMetrics.sendBufferBytes.modify())(void)
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

unint64_t ConnectionTCPInfoMetrics.synRetransmits.getter()
{
  return OUTLINED_FUNCTION_0_6(*(unsigned int *)(v0 + 228));
}

uint64_t ConnectionTCPInfoMetrics.synRetransmits.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 228) = result;
  *(unsigned char *)(v1 + 232) = BYTE4(result) & 1;
  return result;
}

uint64_t (*ConnectionTCPInfoMetrics.synRetransmits.modify())(void)
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

unint64_t ConnectionTCPInfoMetrics.tfoSynDataAcked.getter()
{
  return OUTLINED_FUNCTION_0_6(*(unsigned int *)(v0 + 236));
}

uint64_t ConnectionTCPInfoMetrics.tfoSynDataAcked.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 236) = result;
  *(unsigned char *)(v1 + 240) = BYTE4(result) & 1;
  return result;
}

uint64_t (*ConnectionTCPInfoMetrics.tfoSynDataAcked.modify())(void)
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

unint64_t ConnectionTCPInfoMetrics.subflowSwitchCount.getter()
{
  return OUTLINED_FUNCTION_0_6(*(unsigned int *)(v0 + 244));
}

uint64_t ConnectionTCPInfoMetrics.subflowSwitchCount.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 244) = result;
  *(unsigned char *)(v1 + 248) = BYTE4(result) & 1;
  return result;
}

uint64_t (*ConnectionTCPInfoMetrics.subflowSwitchCount.modify())(void)
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

BOOL ConnectionTCPInfoMetrics.isPoorLinkQuality.getter()
{
  memcpy(__dst, v0, 0xF9uLL);
  if (__dst[12] & 1) != 0 || (__dst[22])
  {
    if (one-time initialization token for siriNetwork != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    __swift_project_value_buffer(v1, (uint64_t)static Logger.siriNetwork);
    outlined retain of ConnectionTCPInfoMetrics((uint64_t)__dst);
    outlined retain of ConnectionTCPInfoMetrics((uint64_t)__dst);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      *(_DWORD *)uint64_t v4 = 136315138;
      uint64_t v5 = __dst[1];
      if (__dst[1])
      {
        swift_bridgeObjectRetain();
        uint64_t v5 = String.init<A>(describing:)();
        unint64_t v7 = v6;
      }
      else
      {
        unint64_t v7 = 0xE000000000000000;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v7, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined release of ConnectionTCPInfoMetrics((uint64_t)__dst);
      outlined release of ConnectionTCPInfoMetrics((uint64_t)__dst);
      _os_log_impl(&dword_25D6CC000, v2, v3, "SiriNetwork - Report Link Quality [%s]. Bytes unacked unknown", v4, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_1_2();
      OUTLINED_FUNCTION_1_2();
    }
    else
    {
      outlined release of ConnectionTCPInfoMetrics((uint64_t)__dst);
      outlined release of ConnectionTCPInfoMetrics((uint64_t)__dst);
    }

    return 0;
  }
  else
  {
    uint64_t v8 = __dst[11];
    int v9 = HIDWORD(__dst[21]);
    BOOL v11 = __dst[11] > 0x100uLL || HIDWORD(__dst[21]) > 0x3E8;
    _StringGuts.grow(_:)(87);
    v12._uint64_t countAndFlagsBits = 0x7474727320504354;
    v12._object = (void *)0xEA0000000000203ALL;
    String.append(_:)(v12);
    if (__dst[23])
    {
      uint64_t v13 = 0;
    }
    else
    {
      LODWORD(v33) = HIDWORD(__dst[22]);
      uint64_t v13 = String.init<A>(describing:)();
    }
    OUTLINED_FUNCTION_10_1(v13);
    swift_bridgeObjectRelease();
    v15._uint64_t countAndFlagsBits = 0x727563747472202CLL;
    v15._object = (void *)0xEA0000000000203ALL;
    String.append(_:)(v15);
    LODWORD(v33) = v9;
    v16._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17._uint64_t countAndFlagsBits = 0x726176747472202CLL;
    v17._object = (void *)0xEA0000000000203ALL;
    String.append(_:)(v17);
    if (__dst[24])
    {
      uint64_t v18 = 0;
    }
    else
    {
      LODWORD(v33) = HIDWORD(__dst[23]);
      uint64_t v18 = String.init<A>(describing:)();
    }
    OUTLINED_FUNCTION_10_1(v18);
    swift_bridgeObjectRelease();
    v19._uint64_t countAndFlagsBits = 0x657479626273202CLL;
    v19._object = (void *)0xEB00000000203A73;
    String.append(_:)(v19);
    if (__dst[28])
    {
      uint64_t v20 = 0;
    }
    else
    {
      uint64_t v33 = __dst[27];
      uint64_t v20 = String.init<A>(describing:)();
    }
    OUTLINED_FUNCTION_10_1(v20);
    swift_bridgeObjectRelease();
    v21._uint64_t countAndFlagsBits = 0x63616E757874202CLL;
    v21._object = (void *)0xED0000203A64656BLL;
    String.append(_:)(v21);
    uint64_t v33 = v8;
    v22._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    v23._uint64_t countAndFlagsBits = 0xD000000000000015;
    v23._object = (void *)0x800000025D795060;
    String.append(_:)(v23);
    if (__dst[8])
    {
      uint64_t v24 = 0;
    }
    else
    {
      uint64_t v33 = __dst[7];
      uint64_t v24 = String.init<A>(describing:)();
    }
    OUTLINED_FUNCTION_10_1(v24);
    swift_bridgeObjectRelease();
    if (one-time initialization token for siriNetwork != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Logger.siriNetwork);
    outlined retain of ConnectionTCPInfoMetrics((uint64_t)__dst);
    outlined retain of ConnectionTCPInfoMetrics((uint64_t)__dst);
    swift_bridgeObjectRetain();
    Swift::String v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 136315650;
      uint64_t v29 = __dst[1];
      if (__dst[1])
      {
        swift_bridgeObjectRetain();
        uint64_t v29 = String.init<A>(describing:)();
        unint64_t v31 = v30;
      }
      else
      {
        unint64_t v31 = 0xE000000000000000;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v31, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined release of ConnectionTCPInfoMetrics((uint64_t)__dst);
      outlined release of ConnectionTCPInfoMetrics((uint64_t)__dst);
      char v32 = "Good link quality";
      *(_WORD *)(v28 + 12) = 2080;
      if (v11) {
        char v32 = "Poor link quality";
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000011, (unint64_t)(v32 - 32) | 0x8000000000000000, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v28 + 22) = 2080;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0, 0xE000000000000000, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_25D6CC000, v26, v27, "SiriNetwork - Report Link Quality [%s]. %s. %s", (uint8_t *)v28, 0x20u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_1_2();
      OUTLINED_FUNCTION_1_2();
    }
    else
    {
      outlined release of ConnectionTCPInfoMetrics((uint64_t)__dst);
      outlined release of ConnectionTCPInfoMetrics((uint64_t)__dst);

      swift_bridgeObjectRelease_n();
    }
  }
  return v11;
}

uint64_t ConnectionTCPInfoMetrics.debugDescription.getter()
{
  uint64_t v2 = *(void *)v0;
  uint64_t v1 = *(void **)(v0 + 8);
  uint64_t v4 = *(void *)(v0 + 16);
  os_log_type_t v3 = *(void **)(v0 + 24);
  int v5 = *(unsigned __int8 *)(v0 + 32);
  uint64_t v120 = *(void *)(v0 + 56);
  int v118 = *(unsigned __int8 *)(v0 + 64);
  uint64_t v116 = *(void *)(v0 + 72);
  int v114 = *(unsigned __int8 *)(v0 + 80);
  uint64_t v109 = *(void *)(v0 + 88);
  int v107 = *(unsigned __int8 *)(v0 + 96);
  uint64_t v105 = *(void *)(v0 + 104);
  int v102 = *(unsigned __int8 *)(v0 + 112);
  uint64_t v97 = *(void *)(v0 + 120);
  int v95 = *(unsigned __int8 *)(v0 + 128);
  uint64_t v90 = *(void *)(v0 + 136);
  int v88 = *(unsigned __int8 *)(v0 + 144);
  uint64_t v83 = *(void *)(v0 + 152);
  int v81 = *(unsigned __int8 *)(v0 + 160);
  int v79 = *(_DWORD *)(v0 + 172);
  int v75 = *(unsigned __int8 *)(v0 + 176);
  int v86 = *(_DWORD *)(v0 + 180);
  int v85 = *(unsigned __int8 *)(v0 + 184);
  v133._uint64_t countAndFlagsBits = 0x6361667265746E69;
  if (v1) {
    uint64_t v6 = v2;
  }
  else {
    uint64_t v6 = 0x6E776F6E6B6E75;
  }
  int v92 = *(unsigned __int8 *)(v0 + 192);
  int v93 = *(_DWORD *)(v0 + 188);
  uint64_t v100 = *(void *)(v0 + 200);
  int v99 = *(unsigned __int8 *)(v0 + 208);
  uint64_t v112 = *(void *)(v0 + 216);
  int v111 = *(unsigned __int8 *)(v0 + 224);
  int v122 = *(unsigned __int8 *)(v0 + 232);
  int v123 = *(_DWORD *)(v0 + 228);
  int v128 = *(unsigned __int8 *)(v0 + 240);
  int v129 = *(_DWORD *)(v0 + 236);
  v133._object = (void *)0xEA00000000002065;
  if (v1) {
    unint64_t v7 = v1;
  }
  else {
    unint64_t v7 = (void *)0xE700000000000000;
  }
  swift_bridgeObjectRetain();
  v8._uint64_t countAndFlagsBits = v6;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  Swift::String v132 = v133;
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  v133._uint64_t countAndFlagsBits = 0x697463656E6E6F63;
  v133._object = (void *)0xEF20657079546E6FLL;
  if (v5 == 25)
  {
    uint64_t v9 = 0x6E776F6E6B6E75;
    unint64_t v10 = 0xE700000000000000;
  }
  else
  {
    uint64_t v9 = ConnectionType.stringRawValue.getter();
    unint64_t v10 = v11;
  }
  unint64_t v12 = v10;
  String.append(_:)(*(Swift::String *)&v9);
  swift_bridgeObjectRelease();
  object = v133._object;
  uint64_t countAndFlagsBits = v133._countAndFlagsBits;
  strcpy((char *)&v133, "connection ");
  HIDWORD(v133._object) = -352321536;
  if (v3) {
    uint64_t v13 = v4;
  }
  else {
    uint64_t v13 = 0x6E776F6E6B6E75;
  }
  if (v3) {
    uint64_t v14 = v3;
  }
  else {
    uint64_t v14 = (void *)0xE700000000000000;
  }
  swift_bridgeObjectRetain();
  v15._uint64_t countAndFlagsBits = v13;
  v15._object = v14;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  uint64_t v127 = v133._countAndFlagsBits;
  uint64_t v104 = v133._object;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  strcpy((char *)&v133, "bytesReceived ");
  v134._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  OUTLINED_FUNCTION_4_3(v134);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_5_3();
  uint64_t v125 = v16;
  uint64_t v126 = v17;
  v133._uint64_t countAndFlagsBits = 0;
  v133._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_7_1(0xD000000000000013);
  uint64_t v18 = v120;
  if (v118) {
    uint64_t v18 = 0;
  }
  v135._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_1_6(v18);
  OUTLINED_FUNCTION_4_3(v135);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_5_3();
  uint64_t v119 = v19;
  uint64_t v121 = v20;
  strcpy((char *)&v133, "bytesSent ");
  BYTE3(v133._object) = 0;
  HIDWORD(v133._object) = -369098752;
  uint64_t v21 = v116;
  if (v114) {
    uint64_t v21 = 0;
  }
  v136._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_1_6(v21);
  OUTLINED_FUNCTION_4_3(v136);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_5_3();
  uint64_t v115 = v22;
  uint64_t v117 = v23;
  strcpy((char *)&v133, "bytesUnacked ");
  HIWORD(v133._object) = -4864;
  uint64_t v24 = v109;
  if (v107) {
    uint64_t v24 = 0;
  }
  v137._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_1_6(v24);
  OUTLINED_FUNCTION_4_3(v137);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_5_3();
  uint64_t v108 = v25;
  uint64_t v110 = v26;
  v133._uint64_t countAndFlagsBits = 0;
  v133._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_7_1(0xD000000000000017);
  uint64_t v27 = v105;
  if (v102) {
    uint64_t v27 = 0;
  }
  v138._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_1_6(v27);
  OUTLINED_FUNCTION_4_3(v138);
  swift_bridgeObjectRelease();
  uint64_t v106 = v133._countAndFlagsBits;
  uint64_t v103 = v133._object;
  v133._uint64_t countAndFlagsBits = 0;
  v133._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_7_1(0xD000000000000018);
  uint64_t v28 = v97;
  if (v95) {
    uint64_t v28 = 0;
  }
  v139._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_1_6(v28);
  OUTLINED_FUNCTION_4_3(v139);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_5_3();
  uint64_t v96 = v29;
  uint64_t v98 = v30;
  v133._uint64_t countAndFlagsBits = 0;
  v133._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_6_2((uint64_t)"packetsReceived ");
  uint64_t v31 = v90;
  if (v88) {
    uint64_t v31 = 0;
  }
  v140._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_1_6(v31);
  OUTLINED_FUNCTION_4_3(v140);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_5_3();
  uint64_t v89 = v32;
  uint64_t v91 = v33;
  strcpy((char *)&v133, "packetsSent ");
  BYTE5(v133._object) = 0;
  HIWORD(v133._object) = -5120;
  uint64_t v34 = v83;
  if (v81) {
    uint64_t v34 = 0;
  }
  v141._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_1_6(v34);
  OUTLINED_FUNCTION_4_3(v141);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_5_3();
  uint64_t v82 = v35;
  uint64_t v84 = v36;
  strcpy((char *)&v133, "rttBest ");
  v142._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  OUTLINED_FUNCTION_8_1(v142);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_5_3();
  int v77 = v37;
  uint64_t v78 = v38;
  strcpy((char *)&v133, "rttCurrent ");
  HIDWORD(v133._object) = -352321536;
  int v39 = v79;
  if (v75) {
    int v39 = 0;
  }
  v143._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_3_3(v39);
  OUTLINED_FUNCTION_8_1(v143);
  swift_bridgeObjectRelease();
  uint64_t v80 = v133._countAndFlagsBits;
  uint64_t v76 = v133._object;
  strcpy((char *)&v133, "rttSmoothed ");
  BYTE5(v133._object) = 0;
  HIWORD(v133._object) = -5120;
  int v40 = v86;
  if (v85) {
    int v40 = 0;
  }
  v144._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_3_3(v40);
  OUTLINED_FUNCTION_8_1(v144);
  swift_bridgeObjectRelease();
  uint64_t v41 = v133._object;
  uint64_t v87 = v133._countAndFlagsBits;
  strcpy((char *)&v133, "rttVariance ");
  BYTE5(v133._object) = 0;
  HIWORD(v133._object) = -5120;
  int v42 = v93;
  if (v92) {
    int v42 = 0;
  }
  v145._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_3_3(v42);
  OUTLINED_FUNCTION_8_1(v145);
  swift_bridgeObjectRelease();
  uint64_t v43 = v133._object;
  uint64_t v94 = v133._countAndFlagsBits;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  strcpy((char *)&v133, "sendBandwidth ");
  HIBYTE(v133._object) = -18;
  uint64_t v44 = v100;
  if (v99) {
    uint64_t v44 = 0;
  }
  v146._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_1_6(v44);
  OUTLINED_FUNCTION_8_1(v146);
  swift_bridgeObjectRelease();
  long long v45 = v133._object;
  uint64_t v101 = v133._countAndFlagsBits;
  v133._uint64_t countAndFlagsBits = 0;
  v133._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_6_2((uint64_t)"sendBufferBytes ");
  uint64_t v46 = v112;
  if (v111) {
    uint64_t v46 = 0;
  }
  v47._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_1_6(v46);
  String.append(_:)(v47);
  swift_bridgeObjectRelease();
  uint64_t v48 = v133._object;
  uint64_t v113 = v133._countAndFlagsBits;
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  v133._uint64_t countAndFlagsBits = 0x61727465526E7973;
  v133._object = (void *)0xEF207374696D736ELL;
  int v49 = v123;
  if (v122) {
    int v49 = 0;
  }
  v50._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_3_3(v49);
  String.append(_:)(v50);
  swift_bridgeObjectRelease();
  uint64_t v51 = v133._object;
  uint64_t v124 = v133._countAndFlagsBits;
  v133._uint64_t countAndFlagsBits = 0;
  v133._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_6_2((uint64_t)"tfoSynDataAcked ");
  int v52 = v129;
  if (v128) {
    int v52 = 0;
  }
  v147._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_3_3(v52);
  OUTLINED_FUNCTION_4_3(v147);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(131);
  v53._uint64_t countAndFlagsBits = 0xD000000000000037;
  v53._object = (void *)0x800000025D795180;
  String.append(_:)(v53);
  String.append(_:)(v132);
  swift_bridgeObjectRelease();
  v54._uint64_t countAndFlagsBits = 10272;
  v54._object = (void *)0xE200000000000000;
  String.append(_:)(v54);
  v55._uint64_t countAndFlagsBits = v127;
  v55._object = v104;
  String.append(_:)(v55);
  swift_bridgeObjectRelease();
  v56._uint64_t countAndFlagsBits = 2112041;
  v56._object = (void *)0xE300000000000000;
  String.append(_:)(v56);
  v57._uint64_t countAndFlagsBits = countAndFlagsBits;
  v57._object = object;
  String.append(_:)(v57);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2_4();
  v58._uint64_t countAndFlagsBits = v126;
  v58._object = v125;
  String.append(_:)(v58);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2_4();
  v59._uint64_t countAndFlagsBits = v121;
  v59._object = v119;
  String.append(_:)(v59);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2_4();
  v60._uint64_t countAndFlagsBits = v117;
  v60._object = v115;
  String.append(_:)(v60);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2_4();
  v61._uint64_t countAndFlagsBits = v110;
  v61._object = v108;
  String.append(_:)(v61);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2_4();
  v62._uint64_t countAndFlagsBits = v106;
  v62._object = v103;
  String.append(_:)(v62);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2_4();
  v63._uint64_t countAndFlagsBits = v98;
  v63._object = v96;
  String.append(_:)(v63);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2_4();
  v64._uint64_t countAndFlagsBits = v91;
  v64._object = v89;
  String.append(_:)(v64);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2_4();
  v65._uint64_t countAndFlagsBits = v84;
  v65._object = v82;
  String.append(_:)(v65);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2_4();
  v66._uint64_t countAndFlagsBits = v78;
  v66._object = v77;
  String.append(_:)(v66);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2_4();
  v67._uint64_t countAndFlagsBits = v80;
  v67._object = v76;
  String.append(_:)(v67);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2_4();
  v68._uint64_t countAndFlagsBits = v87;
  v68._object = v41;
  String.append(_:)(v68);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2_4();
  v69._uint64_t countAndFlagsBits = v94;
  v69._object = v43;
  String.append(_:)(v69);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2_4();
  v70._uint64_t countAndFlagsBits = v101;
  v70._object = v45;
  String.append(_:)(v70);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2_4();
  v71._uint64_t countAndFlagsBits = v113;
  v71._object = v48;
  String.append(_:)(v71);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2_4();
  v72._uint64_t countAndFlagsBits = v124;
  v72._object = v51;
  String.append(_:)(v72);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2_4();
  String.append(_:)(v133);
  swift_bridgeObjectRelease();
  v73._uint64_t countAndFlagsBits = 93;
  v73._object = (void *)0xE100000000000000;
  String.append(_:)(v73);
  return 0;
}

uint64_t destroy for ConnectionTCPInfoMetrics()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ConnectionTCPInfoMetrics(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  uint64_t v5 = *(void *)(a2 + 136);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(void *)(a1 + 136) = v5;
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
  LODWORD(v5) = *(_DWORD *)(a2 + 188);
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(_DWORD *)(a1 + 188) = v5;
  uint64_t v6 = *(void *)(a2 + 200);
  *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
  *(void *)(a1 + 200) = v6;
  uint64_t v7 = *(void *)(a2 + 216);
  *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
  *(void *)(a1 + 216) = v7;
  LODWORD(v7) = *(_DWORD *)(a2 + 228);
  *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
  *(_DWORD *)(a1 + 228) = v7;
  LODWORD(v7) = *(_DWORD *)(a2 + 236);
  *(unsigned char *)(a1 + 240) = *(unsigned char *)(a2 + 240);
  *(_DWORD *)(a1 + 236) = v7;
  LODWORD(v7) = *(_DWORD *)(a2 + 244);
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  *(_DWORD *)(a1 + 244) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ConnectionTCPInfoMetrics(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 40) = v4;
  uint64_t v5 = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 56) = v5;
  uint64_t v6 = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 72) = v6;
  uint64_t v7 = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 88) = v7;
  uint64_t v8 = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 104) = v8;
  uint64_t v9 = *(void *)(a2 + 120);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(void *)(a1 + 120) = v9;
  uint64_t v10 = *(void *)(a2 + 136);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(void *)(a1 + 136) = v10;
  uint64_t v11 = *(void *)(a2 + 152);
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(void *)(a1 + 152) = v11;
  LODWORD(v11) = *(_DWORD *)(a2 + 164);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(_DWORD *)(a1 + 164) = v11;
  LODWORD(v11) = *(_DWORD *)(a2 + 172);
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  *(_DWORD *)(a1 + 172) = v11;
  LODWORD(v11) = *(_DWORD *)(a2 + 180);
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(_DWORD *)(a1 + 180) = v11;
  LODWORD(v11) = *(_DWORD *)(a2 + 188);
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(_DWORD *)(a1 + 188) = v11;
  uint64_t v12 = *(void *)(a2 + 200);
  *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
  *(void *)(a1 + 200) = v12;
  uint64_t v13 = *(void *)(a2 + 216);
  *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
  *(void *)(a1 + 216) = v13;
  LODWORD(v13) = *(_DWORD *)(a2 + 228);
  *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
  *(_DWORD *)(a1 + 228) = v13;
  LODWORD(v13) = *(_DWORD *)(a2 + 236);
  *(unsigned char *)(a1 + 240) = *(unsigned char *)(a2 + 240);
  *(_DWORD *)(a1 + 236) = v13;
  LODWORD(v13) = *(_DWORD *)(a2 + 244);
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  *(_DWORD *)(a1 + 244) = v13;
  return a1;
}

void *__swift_memcpy249_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xF9uLL);
}

uint64_t assignWithTake for ConnectionTCPInfoMetrics(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  uint64_t v6 = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 104) = v6;
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  uint64_t v7 = *(void *)(a2 + 216);
  *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
  *(void *)(a1 + 216) = v7;
  LODWORD(v7) = *(_DWORD *)(a2 + 228);
  *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
  *(_DWORD *)(a1 + 228) = v7;
  LODWORD(v7) = *(_DWORD *)(a2 + 236);
  *(unsigned char *)(a1 + 240) = *(unsigned char *)(a2 + 240);
  *(_DWORD *)(a1 + 236) = v7;
  LODWORD(v7) = *(_DWORD *)(a2 + 244);
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  *(_DWORD *)(a1 + 244) = v7;
  return a1;
}

uint64_t getEnumTagSinglePayload for ConnectionTCPInfoMetrics(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 249))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      unint64_t v3 = *(void *)(a1 + 8);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConnectionTCPInfoMetrics(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 248) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 249) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 249) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ConnectionTCPInfoMetrics()
{
  return &type metadata for ConnectionTCPInfoMetrics;
}

unint64_t OUTLINED_FUNCTION_0_6@<X0>(uint64_t a1@<X8>)
{
  return a1 | ((unint64_t)v1 << 32);
}

uint64_t OUTLINED_FUNCTION_1_6@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 112) = a1;
  return dispatch thunk of CustomStringConvertible.description.getter();
}

void OUTLINED_FUNCTION_2_4()
{
  uint64_t v1 = 8236;
  unint64_t v2 = 0xE200000000000000;
  String.append(_:)(*(Swift::String *)&v1);
}

uint64_t OUTLINED_FUNCTION_3_3@<X0>(int a1@<W8>)
{
  *(_DWORD *)(v1 - 112) = a1;
  return dispatch thunk of CustomStringConvertible.description.getter();
}

void OUTLINED_FUNCTION_4_3(Swift::String a1)
{
  String.append(_:)(a1);
}

void OUTLINED_FUNCTION_6_2(uint64_t a1@<X8>)
{
  *(void *)(v2 - 104) = v1;
  *(void *)(v2 - 96) = (a1 - 32) | 0x8000000000000000;
}

void OUTLINED_FUNCTION_7_1(uint64_t a1@<X8>)
{
  *(void *)(v2 - 104) = a1;
  *(void *)(v2 - 96) = (v1 - 32) | 0x8000000000000000;
}

void OUTLINED_FUNCTION_8_1(Swift::String a1)
{
  String.append(_:)(a1);
}

void OUTLINED_FUNCTION_10_1(uint64_t a1)
{
  uint64_t v3 = v1;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t Data.truncateBeginning(removeSize:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = a2;
  switch(a3 >> 62)
  {
    case 1uLL:
      if (!((a2 ^ (unint64_t)(a2 << 32)) >> 32)) {
        goto LABEL_7;
      }
      goto LABEL_12;
    case 2uLL:
      uint64_t v5 = *(void *)(a2 + 16);
      uint64_t v6 = *(void *)(a2 + 24);
      if (v5 == v6) {
        goto LABEL_7;
      }
      if (a3 >> 62 != 2) {
        goto LABEL_12;
      }
      uint64_t v4 = v6 - v5;
      if (__OFSUB__(v6, v5))
      {
        __break(1u);
LABEL_12:
        if (__OFSUB__(HIDWORD(v3), v3))
        {
          __break(1u);
          JUMPOUT(0x25D6EA3FCLL);
        }
        uint64_t v4 = HIDWORD(v3) - (int)v3;
      }
      goto LABEL_14;
    case 3uLL:
      goto LABEL_7;
    default:
      if ((a3 & 0xFF000000000000) != 0)
      {
        uint64_t v4 = BYTE6(a3);
LABEL_14:
        if (v4 <= a1) {
          return 0;
        }
        else {
          return Data.subdata(in:)();
        }
      }
      else
      {
LABEL_7:
        outlined copy of Data._Representation(a2, a3);
      }
      return v3;
  }
}

uint64_t type metadata instantiation function for SafeCallback()
{
  return MEMORY[0x270FA01A0]();
}

uint64_t type metadata completion function for SafeCallback()
{
  return swift_initClassMetadata2();
}

uint64_t SafeCallback.deinit()
{
  swift_unknownObjectWeakDestroy();
  return v0;
}

uint64_t SafeCallback.__deallocating_deinit()
{
  swift_unknownObjectWeakDestroy();

  return MEMORY[0x270FA0228](v0, 24, 7);
}

uint64_t type metadata accessor for SafeCallback()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

uint64_t CWFInterface.channelInfo.getter()
{
  uint64_t v1 = 0x6E776F6E6B6E75;
  id v2 = objc_msgSend(v0, sel_channel);
  if (v2)
  {
    uint64_t v3 = v2;
    if ((uint64_t)objc_msgSend(v2, sel_channel) < 1)
    {
    }
    else
    {
      id v4 = objc_msgSend(v3, sel_channel);
      uint64_t v5 = CWFInterface.frequencyBand.getter();
      objc_msgSend(v3, sel_width);
      uint64_t v1 = static WiFiRecord.channelInfo(channel:frequencyBand:channelInMHz:)((uint64_t)v4, v5, (void *)0xE400000000000000);

      swift_bridgeObjectRelease();
    }
  }
  return v1;
}

uint64_t CWFInterface.frequencyBand.getter()
{
  uint64_t v1 = 2051557183;
  id v2 = objc_msgSend(v0, sel_channel);
  if (v2)
  {
    uint64_t v3 = v2;
    unsigned int v4 = objc_msgSend(v2, sel_band);

    if (v4 - 1 <= 2) {
      return *(void *)&a2ghz[8 * (v4 - 1)];
    }
  }
  return v1;
}

uint64_t NWConnection.getAttemptedEndpoints()()
{
  MEMORY[0x2611B1DD0]();
  uint64_t v0 = nw_connection_copy_attempted_endpoint_array();
  swift_unknownObjectRelease();
  uint64_t v1 = MEMORY[0x263F8EE78];
  if (!v0) {
    return v1;
  }
  uint64_t count = nw_array_get_count();
  uint64_t v22 = v1;
  if (count < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = count;
    if (count)
    {
      uint64_t v4 = 0;
      uint64_t v5 = MEMORY[0x263F8EE78];
      do
      {
        id v6 = (id)nw_array_get_object_at_index();
        v21[3] = (uint64_t)&unk_270A88288;
        if (!swift_dynamicCastObjCProtocolConditional()) {
          swift_unknownObjectRelease();
        }
        nw_endpoint_get_description();
        uint64_t v7 = String.init(cString:)();
        uint64_t v9 = v8;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v5 = v12;
        }
        unint64_t v10 = *(void *)(v5 + 16);
        if (v10 >= *(void *)(v5 + 24) >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v5 = v13;
        }
        ++v4;
        *(void *)(v5 + 16) = v10 + 1;
        uint64_t v11 = v5 + 16 * v10;
        *(void *)(v11 + 32) = v7;
        *(void *)(v11 + 40) = v9;
        swift_unknownObjectRelease();
      }
      while (v3 != v4);
      uint64_t v22 = v5;
    }
    if (one-time initialization token for siriNetwork == -1) {
      goto LABEL_14;
    }
  }
  swift_once();
LABEL_14:
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.siriNetwork);
  swift_bridgeObjectRetain_n();
  Swift::String v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    v21[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 136315138;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    uint64_t v18 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_25D6CC000, v15, v16, "SiriNetwork - Report: Attempted Endpoints: %s", v17, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_1_2();
    OUTLINED_FUNCTION_1_2();
    swift_unknownObjectRelease();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_unknownObjectRelease();
  }
  swift_beginAccess();
  return v22;
}

Swift::String_optional __swiftcall NWConnection.getConnectionEdgeID(wasConnected:attemptedEndpoints:)(Swift::Bool wasConnected, Swift::OpaquePointer attemptedEndpoints)
{
  if (wasConnected
    && (MEMORY[0x2611B1DD0](), uint64_t v3 = nw_connection_copy_connected_remote_endpoint(), swift_unknownObjectRelease(), v3))
  {
    nw_endpoint_get_description();
    uint64_t v4 = String.init(cString:)();
    unint64_t v6 = v5;
    uint64_t v7 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0) {
      uint64_t v7 = v4 & 0xFFFFFFFFFFFFLL;
    }
    if (v7)
    {
      uint64_t v8 = v4;
    }
    else
    {
      swift_bridgeObjectRelease();
      unint64_t v6 = 0x800000025D7951D0;
      uint64_t v8 = 0xD000000000000012;
    }
    if (one-time initialization token for siriNetwork != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.siriNetwork);
    swift_bridgeObjectRetain_n();
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v23 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_25D6CC000, v20, v21, "SiriNetwork - Report: Connection EdgeID: %s", v22, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_1_2();
      OUTLINED_FUNCTION_1_2();
      swift_unknownObjectRelease();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_unknownObjectRelease();
    }
  }
  else
  {
    int64_t v9 = *((void *)attemptedEndpoints._rawValue + 2);
    if (v9)
    {
      uint64_t v29 = MEMORY[0x263F8EE78];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9, 0);
      uint64_t v10 = v29;
      uint64_t v11 = (char *)attemptedEndpoints._rawValue + 40;
      int64_t v28 = v9;
      do
      {
        swift_bridgeObjectRetain();
        uint64_t v12 = String.init<A>(_:)();
        uint64_t v14 = v13;
        uint64_t v29 = v10;
        unint64_t v16 = *(void *)(v10 + 16);
        unint64_t v15 = *(void *)(v10 + 24);
        if (v16 >= v15 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v16 + 1, 1);
          uint64_t v10 = v29;
        }
        v11 += 16;
        *(void *)(v10 + 16) = v16 + 1;
        uint64_t v17 = v10 + 16 * v16;
        *(void *)(v17 + 32) = v12;
        *(void *)(v17 + 40) = v14;
        --v9;
      }
      while (v9);
      int64_t v9 = v28;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    uint64_t v8 = BidirectionalCollection<>.joined(separator:)();
    unint64_t v6 = v18;
    swift_bridgeObjectRelease();
    if (!v9)
    {
      swift_bridgeObjectRelease();
      unint64_t v6 = 0xEF656C62616C6961;
      uint64_t v8 = 0x76616E5572656570;
    }
  }
  uint64_t v25 = v8;
  uint64_t v26 = (void *)v6;
  result.value._object = v26;
  result.value._uint64_t countAndFlagsBits = v25;
  return result;
}

uint64_t NWConnection.startActivity(_:)(uint64_t a1)
{
  return NWConnection.startActivity(_:)(a1, MEMORY[0x263F141D0]);
}

uint64_t NWConnection.endActivity(_:)(uint64_t a1)
{
  return NWConnection.startActivity(_:)(a1, MEMORY[0x263F141C8]);
}

uint64_t NWConnection.startActivity(_:)(uint64_t a1, void (*a2)())
{
  outlined init with copy of Any?(a1, (uint64_t)v4);
  if (!v5) {
    return outlined destroy of Any?((uint64_t)v4);
  }
  type metadata accessor for NWActivity();
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    a2();
    return swift_release();
  }
  return result;
}

BOOL static NWConnection.== infix(_:_:)()
{
  uint64_t v0 = NWConnection.identifier.getter();
  return v0 == NWConnection.identifier.getter();
}

void NWConnection.hash(into:)()
{
  Swift::UInt64 v0 = NWConnection.identifier.getter();
  Hasher._combine(_:)(v0);
}

Swift::Int NWConnection.hashValue.getter()
{
  Hasher.init(_seed:)();
  Swift::UInt64 v0 = NWConnection.identifier.getter();
  Hasher._combine(_:)(v0);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NWConnection()
{
  return NWConnection.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance NWConnection()
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NWConnection()
{
  Hasher.init(_seed:)();
  Swift::UInt64 v0 = NWConnection.identifier.getter();
  Hasher._combine(_:)(v0);
  return Hasher._finalize()();
}

uint64_t instantiation function for generic protocol witness table for NWConnection(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type NWConnection and conformance NWConnection(&lazy protocol witness table cache variable for type NWConnection and conformance NWConnection);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for Equatable in NWConnection()
{
  return lazy protocol witness table accessor for type NWConnection and conformance NWConnection(&lazy protocol witness table cache variable for type NWConnection and conformance NWConnection);
}

uint64_t lazy protocol witness table accessor for type NWConnection and conformance NWConnection(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for NWConnection();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance NWConnection()
{
  return static NWConnection.== infix(_:_:)();
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(void *a1, int64_t a2, char a3)
{
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<String>, (void (*)(uint64_t, uint64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, uint64_t, void *))specialized UnsafeMutablePointer.initialize(from:count:));
  *uint64_t v3 = (uint64_t)result;
  return result;
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
  }
  return result;
}

char *specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char *a1, int64_t a2, char a3)
{
  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  char *result;

  unint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

char *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<ConnectionPolicyRoute>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 120);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = (char *)(a4 + 32);
  if (v5)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)((unint64_t)v13, v8, (unint64_t)v12);
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 32);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = (char *)(a4 + 32);
  if (v5)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)((unint64_t)v13, v8, (unint64_t)v12);
  }
  swift_release();
  return v10;
}

void *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *a1, int64_t a2, char a3, uint64_t a4)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(key: Int, value: [ConnectionPolicyRoute])>, (void (*)(uint64_t, uint64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, uint64_t, void *))specialized UnsafeMutablePointer.initialize(from:count:));
}

void *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, uint64_t a4, uint64_t *a5, void (*a6)(uint64_t, uint64_t, void *), void (*a7)(uint64_t, uint64_t, void *))
{
  char v10 = (char)result;
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    int64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v12 = a2;
      }
    }
  }
  else
  {
    int64_t v12 = a2;
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (v14)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    unint64_t v15 = (void *)swift_allocObject();
    size_t v16 = _swift_stdlib_malloc_size(v15);
    v15[2] = v13;
    v15[3] = 2 * ((uint64_t)(v16 - 32) / 16);
  }
  else
  {
    unint64_t v15 = (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v17 = v15 + 4;
  uint64_t v18 = a4 + 32;
  if (v10)
  {
    a6(v18, v13, v17);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    a7(v18, v13, v17);
  }
  swift_release();
  return v15;
}

uint64_t SiriNetworkOspreyChannel.ospreyClientStreamingContext.setter(uint64_t a1)
{
  *(void *)(v1 + OBJC_IVAR___SNOspreyChannel_ospreyClientStreamingContext) = a1;
  return swift_unknownObjectRelease();
}

uint64_t SiriNetworkOspreyChannel.ospreyRequestBuilder.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(v2 + OBJC_IVAR___SNOspreyChannel_ospreyRequestBuilder);
  uint64_t v4 = *(void *)(v2 + OBJC_IVAR___SNOspreyChannel_ospreyRequestBuilder);
  *uint64_t v3 = a1;
  v3[1] = a2;
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?(v4);
}

uint64_t SiriNetworkOspreyChannel.connectionMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR___SNOspreyChannel_connectionMetrics;
  swift_beginAccess();
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v3, (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v5, a1, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
  return outlined release of ConnectionMetrics?(v5, outlined copy of ConnectionMetrics?);
}

uint64_t (*SiriNetworkOspreyChannel.connectionMetrics.modify())()
{
  return static ConnectionConfigurationError.errorDomain.modify;
}

uint64_t SiriNetworkOspreyChannel.connectionIdentifier.didset(uint64_t a1)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v2 = SiriNetworkOspreyChannel.connectionMetrics.modify();
  uint64_t v4 = v3;
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v3, (uint64_t)v20, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v20, (uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
  if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v21) == 1)
  {
    ((void (*)(unsigned char *, void))v2)(v19, 0);
  }
  else
  {
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v4 + 96, (uint64_t)&v17, &demangling cache variable for type metadata for ConnectionPreparationReport?);
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)&v17, (uint64_t)v18, &demangling cache variable for type metadata for ConnectionPreparationReport?);
    if (_s11SiriNetwork27ConnectionPreparationReportVSgWOg((uint64_t)v18) != 1)
    {
      id v5 = objc_msgSend(v1, sel_description);
      uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v8 = v7;

      *(void *)(v4 + 96) = v6;
      *(void *)(v4 + 104) = v8;
      swift_bridgeObjectRelease();
    }
    ((void (*)(unsigned char *, void))v2)(v19, 0);
  }
  uint64_t v9 = SiriNetworkOspreyChannel.connectionMetrics.modify();
  unint64_t v11 = (void *)v10;
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v10, (uint64_t)&v17, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)&v17, (uint64_t)v18, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
  if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v18) != 1 && v11[64])
  {
    id v12 = objc_msgSend(v1, sel_description);
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v15 = v14;

    v11[57] = v13;
    v11[58] = v15;
    swift_bridgeObjectRelease();
  }
  return ((uint64_t (*)(unsigned char *, void))v9)(v19, 0);
}

uint64_t SiriNetworkOspreyChannel.connectionIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(v2 + OBJC_IVAR___SNOspreyChannel_connectionIdentifier);
  *uint64_t v3 = a1;
  v3[1] = a2;
  uint64_t v4 = swift_bridgeObjectRelease();

  return SiriNetworkOspreyChannel.connectionIdentifier.didset(v4);
}

uint64_t SiriNetworkOspreyChannel.description.getter()
{
  if (*(void *)(v0 + OBJC_IVAR___SNOspreyChannel_connectionIdentifier + 8))
  {
    uint64_t v1 = *(void *)(v0 + OBJC_IVAR___SNOspreyChannel_connectionIdentifier);
    uint64_t v2 = *(void **)(v0 + OBJC_IVAR___SNOspreyChannel_connectionIdentifier + 8);
  }
  else
  {
    uint64_t v2 = (void *)0x800000025D795330;
    uint64_t v1 = 0xD000000000000012;
  }
  swift_bridgeObjectRetain();
  v3._uint64_t countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 32;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  uint64_t v5 = *(void *)(v0 + OBJC_IVAR___SNOspreyChannel_configuration + 8);
  if (v5) {
    uint64_t v6 = *(void *)(v0 + OBJC_IVAR___SNOspreyChannel_configuration);
  }
  else {
    uint64_t v6 = 0;
  }
  if (v5) {
    uint64_t v7 = *(void **)(v0 + OBJC_IVAR___SNOspreyChannel_configuration + 8);
  }
  else {
    uint64_t v7 = (void *)0xE000000000000000;
  }
  swift_bridgeObjectRetain();
  v8._uint64_t countAndFlagsBits = v6;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  return 0;
}

char *SiriNetworkOspreyChannel.__allocating_init(url:connectionConfiguration:)(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1);
  Swift::String v3 = v1;
  uint64_t v5 = v4;
  uint64_t v6 = v2;
  memcpy(v59, v4, sizeof(v59));
  type metadata accessor for NSURLSessionConfiguration();
  memcpy(v58, v5, 0x204uLL);
  id v7 = static NSURLSessionConfiguration.defaultSessionConfiguration(with:)((char *)v58);
  id v8 = objc_allocWithZone(v3);
  URL._bridgeToObjectiveC()(v9);
  unint64_t v11 = v10;
  id v12 = objc_msgSend(v8, sel_initWithURL_configuration_, v10, v7);

  uint64_t v13 = (char *)v12;
  uint64_t v14 = URL.host.getter();
  if (v15) {
    uint64_t v16 = v14;
  }
  else {
    uint64_t v16 = 0;
  }
  if (v15) {
    uint64_t v17 = v15;
  }
  else {
    uint64_t v17 = 0xE000000000000000;
  }
  uint64_t v18 = URL.port.getter();
  if (v19) {
    uint64_t v20 = 443;
  }
  else {
    uint64_t v20 = v18;
  }
  v58[0] = v16;
  v58[1] = v17;
  v21._uint64_t countAndFlagsBits = 58;
  v21._object = (void *)0xE100000000000000;
  String.append(_:)(v21);
  v57[0] = v20;
  v22._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._uint64_t countAndFlagsBits = 8236;
  v23._object = (void *)0xE200000000000000;
  String.append(_:)(v23);
  v24._uint64_t countAndFlagsBits = NSURLSessionConfiguration.rpcDescription.getter();
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  uint64_t v25 = v58[1];
  uint64_t v26 = &v13[OBJC_IVAR___SNOspreyChannel_configuration];
  *(void *)uint64_t v26 = v58[0];
  *((void *)v26 + 1) = v25;
  swift_bridgeObjectRelease();
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v27 = type metadata accessor for Logger();
  __swift_project_value_buffer(v27, (uint64_t)static Logger.siriNetwork);
  id v28 = v7;
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v29, v30))
  {
    Swift::String v50 = v3;
    uint64_t v31 = (uint8_t *)swift_slowAlloc();
    v58[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v31 = 136315138;
    uint64_t v32 = NSURLSessionConfiguration.rpcDescription.getter();
    v57[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_25D6CC000, v29, v30, "Provider - SiriNetworkOspreyChannel: Channel init with configuration: %s", v31, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_1_2();
    Swift::String v3 = v50;
    OUTLINED_FUNCTION_1_2();
  }
  else
  {
  }
  memcpy(__dst, v59, 0x204uLL);
  destructiveProjectEnumData for ConnectionConfigurationError(__dst);
  uint64_t v34 = (uint64_t)&v13[OBJC_IVAR___SNOspreyChannel_connectionConfiguration];
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)&v13[OBJC_IVAR___SNOspreyChannel_connectionConfiguration], (uint64_t)v53, &demangling cache variable for type metadata for ConnectionConfiguration?);
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)__dst, v34, &demangling cache variable for type metadata for ConnectionConfiguration?);
  outlined release of ConnectionConfiguration?((uint64_t)v53);
  _s11SiriNetwork27ConnectionPreparationReportVSgWOi0_(v54);
  _s11SiriNetwork24ConnectionSnapshotReportVSgWOi0_(v55);
  __src[0] = 0;
  uint64_t v35 = MEMORY[0x263F8EE78];
  LOBYTE(__src[1]) = 1;
  *(_OWORD *)&__src[3] = 0u;
  void __src[2] = MEMORY[0x263F8EE78];
  __src[5] = MEMORY[0x263F8EE78];
  LODWORD(__src[6]) = 0;
  BYTE4(__src[6]) = 1;
  memset(&__src[7], 0, 40);
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v54, (uint64_t)&__src[12], &demangling cache variable for type metadata for ConnectionPreparationReport?);
  memset(&__src[57], 0, 112);
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v55, (uint64_t)&__src[71], (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  __src[160] = v35;
  memset(&__src[161], 0, 40);
  LOBYTE(__src[166]) = 1;
  __src[167] = 0;
  LOBYTE(__src[168]) = 1;
  __src[169] = 0;
  LOBYTE(__src[170]) = 1;
  memset(&__src[171], 0, 20);
  BYTE4(__src[173]) = 1;
  __src[174] = 0;
  LOBYTE(__src[175]) = 1;
  __src[176] = 0;
  LOBYTE(__src[177]) = 1;
  __src[178] = 0;
  LOBYTE(__src[179]) = 1;
  memcpy(v57, __src, 0x599uLL);
  destructiveProjectEnumData for ConnectionConfigurationError(v57);
  uint64_t v36 = (uint64_t)&v13[OBJC_IVAR___SNOspreyChannel_connectionMetrics];
  swift_beginAccess();
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v36, (uint64_t)v58, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v57, v36, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
  outlined release of ConnectionMetrics?(v58, outlined consume of ConnectionMetrics?);
  uint64_t v37 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v38 = swift_allocObject();
  *(void *)(v38 + 16) = v37;
  *(void *)(v38 + 24) = v3;
  int v39 = (uint64_t *)&v13[OBJC_IVAR___SNOspreyChannel_ospreyConnectionMetrics];
  uint64_t v40 = *(void *)&v13[OBJC_IVAR___SNOspreyChannel_ospreyConnectionMetrics];
  *int v39 = (uint64_t)partial apply for closure #1 in SiriNetworkOspreyChannel.init(url:connectionConfiguration:);
  v39[1] = v38;
  outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?(v40);
  uint64_t v41 = *v39;
  uint64_t v42 = v39[1];
  if (*v39)
  {
    uint64_t v43 = swift_allocObject();
    *(void *)(v43 + 16) = v41;
    *(void *)(v43 + 24) = v42;
    uint64_t v44 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed OspreyConnectionMetrics) -> ();
  }
  else
  {
    uint64_t v44 = (uint64_t (*)(void *))destructiveProjectEnumData for ConnectionConfigurationError;
    uint64_t v43 = 0;
  }
  uint64_t v45 = swift_allocObject();
  *(void *)(v45 + 16) = v44;
  *(void *)(v45 + 24) = v43;
  aBlock[4] = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed OspreyConnectionMetrics) -> (@out ());
  aBlock[5] = v45;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed OspreyConnectionMetrics) -> ();
  aBlock[3] = &block_descriptor_3;
  uint64_t v46 = _Block_copy(aBlock);
  Swift::String v47 = v13;
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed LinkRecommendationInfo?) -> ())?(v41);
  swift_release();
  objc_msgSend(v47, sel_setConnectionMetricsHandler_, v46);
  _Block_release(v46);

  objc_msgSend(v47, sel_setUseCompression_, 0);
  type metadata accessor for URL();
  OUTLINED_FUNCTION_0_7();
  (*(void (**)(uint64_t))(v48 + 8))(v6);
  return v47;
}

void closure #1 in SiriNetworkOspreyChannel.init(url:connectionConfiguration:)(uint64_t a1)
{
  uint64_t v1 = (void *)MEMORY[0x270FA5388](a1);
  uint64_t v3 = v2 + 16;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x2611B37F0](v3);
  if (v4)
  {
    uint64_t v5 = (char *)v4;
    uint64_t v6 = OBJC_IVAR___SNOspreyChannel_lock;
    objc_msgSend(*(id *)(v4 + OBJC_IVAR___SNOspreyChannel_lock), sel_lock);
    SiriNetworkOspreyChannel.connectionMetrics.getter((uint64_t)v110);
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v110, (uint64_t)v112, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v112, (uint64_t)v113, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
    int v7 = _s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v113);
    uint64_t v8 = MEMORY[0x263F8EE78];
    if (v7 == 1
      || (_s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)&v111, (uint64_t)v107, &demangling cache variable for type metadata for ConnectionPreparationReport?), _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v110, (uint64_t)v109, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?), outlined release of ConnectionMetrics?(v109, outlined consume of ConnectionMetrics?), _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v107, (uint64_t)v108, &demangling cache variable for type metadata for ConnectionPreparationReport?), _s11SiriNetwork27ConnectionPreparationReportVSgWOg((uint64_t)v108) == 1))
    {
      uint64_t v9 = SiriNetworkOspreyChannel.connectionMetrics.modify();
      uint64_t v11 = v10;
      _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v10, (uint64_t)v109, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
      _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v109, (uint64_t)v110, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
      if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v110) == 1)
      {
        ((void (*)(void *, void))v9)(v102, 0);
      }
      else
      {
        _s11SiriNetwork25ConnectionInterfaceReportVSgWOi0_(&v103);
        if (one-time initialization token for sharedNetworkAnalytics != -1) {
          swift_once();
        }
        id v12 = static NetworkAnalytics.sharedNetworkAnalytics;
        v105[0] = 0uLL;
        v105[1] = xmmword_25D791410;
        LODWORD(v105[2]) = 0;
        BYTE4(v105[2]) = 0;
        _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)&v103, (uint64_t)&v105[2] + 8, (uint64_t *)&demangling cache variable for type metadata for ConnectionInterfaceReport?);
        *(void *)&v105[21] = v8;
        *((void *)&v105[21] + 1) = v8;
        *(void *)&v105[22] = v12;
        memcpy(v107, v105, 0x168uLL);
        destructiveProjectEnumData for ConnectionConfigurationError(v107);
        uint64_t v13 = v11 + 96;
        _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v13, (uint64_t)v108, &demangling cache variable for type metadata for ConnectionPreparationReport?);
        _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v107, v13, &demangling cache variable for type metadata for ConnectionPreparationReport?);
        id v14 = v12;
        outlined release of ConnectionPreparationReport?((uint64_t)v108);
        ((void (*)(void *, void))v9)(v102, 0);
      }
    }
    uint64_t v15 = SiriNetworkOspreyChannel.connectionMetrics.modify();
    uint64_t v17 = v16;
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v16, (uint64_t)v109, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v109, (uint64_t)v110, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
    if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v110) != 1)
    {
      _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v17 + 96, (uint64_t)v107, &demangling cache variable for type metadata for ConnectionPreparationReport?);
      _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v107, (uint64_t)v108, &demangling cache variable for type metadata for ConnectionPreparationReport?);
      if (_s11SiriNetwork27ConnectionPreparationReportVSgWOg((uint64_t)v108) != 1)
      {
        uint64_t v103 = 0;
        unint64_t v104 = 0xE000000000000000;
        v102[0] = v5;
        lazy protocol witness table accessor for type SiriNetworkOspreyChannel and conformance NSObject();
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        unint64_t v18 = v104;
        *(void *)(v17 + 96) = v103;
        *(void *)(v17 + 104) = v18;
        swift_bridgeObjectRelease();
      }
    }
    ((void (*)(_OWORD *, void))v15)(v105, 0);
    SiriNetworkOspreyChannel.connectionMetrics.getter((uint64_t)v105);
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v105, (uint64_t)v107, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v107, (uint64_t)v108, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
    if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v108) == 1
      || (uint64_t v19 = v106,
          _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v105, (uint64_t)&v103, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?), outlined release of ConnectionMetrics?(&v103, outlined consume of ConnectionMetrics?), !v19))
    {
      uint64_t v20 = SiriNetworkOspreyChannel.connectionMetrics.modify();
      uint64_t v22 = v21;
      _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v21, (uint64_t)&v103, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
      _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)&v103, (uint64_t)v105, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
      if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v105) == 1)
      {
        ((void (*)(void *, void))v20)(v102, 0);
      }
      else
      {
        int v86 = v20;
        uint64_t v87 = v1;
        uint64_t v88 = v6;
        if (one-time initialization token for sharedNetworkAnalytics != -1) {
          swift_once();
        }
        Swift::String v23 = static NetworkAnalytics.sharedNetworkAnalytics;
        uint64_t v24 = *(void *)(v22 + 456);
        uint64_t v25 = *(void *)(v22 + 464);
        uint64_t v26 = *(void *)(v22 + 472);
        uint64_t v27 = *(void *)(v22 + 480);
        uint64_t v28 = *(void *)(v22 + 488);
        uint64_t v84 = *(void *)(v22 + 504);
        uint64_t v85 = *(void *)(v22 + 496);
        uint64_t v83 = *(void *)(v22 + 512);
        long long v81 = *(_OWORD *)(v22 + 536);
        long long v82 = *(_OWORD *)(v22 + 520);
        uint64_t v29 = *(void *)(v22 + 552);
        os_log_type_t v30 = *(void **)(v22 + 560);
        *(void *)(v22 + 456) = 0;
        *(void *)(v22 + 464) = 0;
        *(_OWORD *)(v22 + 472) = xmmword_25D791420;
        *(_OWORD *)(v22 + 488) = xmmword_25D791430;
        *(void *)(v22 + 504) = 1;
        uint64_t v31 = MEMORY[0x263F8EE78];
        *(void *)(v22 + 512) = MEMORY[0x263F8EE78];
        *(void *)(v22 + 520) = v31;
        *(_OWORD *)(v22 + 528) = 0u;
        *(_OWORD *)(v22 + 544) = 0u;
        *(void *)(v22 + 560) = v23;
        id v32 = v23;
        uint64_t v33 = v26;
        uint64_t v8 = v31;
        outlined consume of ConnectionEstablishmentReport?(v24, v25, v33, v27, v28, v85, v84, v83, v82, *((uint64_t *)&v82 + 1), v81, *((uint64_t *)&v81 + 1), v29, v30);
        ((void (*)(void *, void))v86)(v102, 0);
        uint64_t v1 = v87;
        uint64_t v6 = v88;
      }
    }
    uint64_t v34 = SiriNetworkOspreyChannel.connectionMetrics.modify();
    uint64_t v36 = (void *)v35;
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v35, (uint64_t)&v103, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)&v103, (uint64_t)v105, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
    if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v105) != 1 && v36[64])
    {
      v101[0] = 0;
      v101[1] = 0xE000000000000000;
      v100[0] = v5;
      lazy protocol witness table accessor for type SiriNetworkOspreyChannel and conformance NSObject();
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v36[57] = 0;
      v36[58] = 0xE000000000000000;
      swift_bridgeObjectRelease();
    }
    ((void (*)(void *, void))v34)(v102, 0);
    uint64_t v37 = SiriNetworkOspreyChannel.connectionMetrics.modify();
    uint64_t v39 = v38;
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v38, (uint64_t)v101, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v101, (uint64_t)v102, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
    if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v102) != 1)
    {
      id v40 = v1;
      ConnectionEstablishmentReport.init(ospreyConnectionMetrics:)(v1, (uint64_t)&v114);
      uint64_t v41 = v118;
      uint64_t v42 = v117;
      uint64_t v43 = v119;
      uint64_t v44 = v120;
      uint64_t v45 = v125;
      uint64_t v46 = v126;
      uint64_t v47 = 0x100000000;
      if (!v116) {
        uint64_t v47 = 0;
      }
      uint64_t v48 = v47 | v115;
      uint64_t v49 = 256;
      if (!v123) {
        uint64_t v49 = 0;
      }
      uint64_t v50 = v49 | v122;
      uint64_t v51 = *(void *)(v39 + 456);
      uint64_t v52 = *(void *)(v39 + 464);
      uint64_t v53 = *(void *)(v39 + 472);
      uint64_t v54 = *(void *)(v39 + 480);
      uint64_t v55 = *(void *)(v39 + 488);
      uint64_t v56 = *(void *)(v39 + 496);
      uint64_t v57 = *(void *)(v39 + 504);
      uint64_t v58 = *(void *)(v39 + 512);
      long long v59 = *(_OWORD *)(v39 + 520);
      long long v60 = *(_OWORD *)(v39 + 536);
      uint64_t v61 = *(void *)(v39 + 552);
      Swift::String v62 = *(void **)(v39 + 560);
      *(_OWORD *)(v39 + 456) = v114;
      *(void *)(v39 + 472) = v48;
      *(void *)(v39 + 480) = v42;
      *(void *)(v39 + 488) = v41;
      *(void *)(v39 + 496) = v43;
      *(void *)(v39 + 504) = v44;
      *(_OWORD *)(v39 + 512) = v121;
      *(void *)(v39 + 528) = v50;
      *(_OWORD *)(v39 + 536) = v124;
      *(void *)(v39 + 552) = v45;
      *(void *)(v39 + 560) = v46;
      outlined consume of ConnectionEstablishmentReport?(v51, v52, v53, v54, v55, v56, v57, v58, v59, *((uint64_t *)&v59 + 1), v60, *((uint64_t *)&v60 + 1), v61, v62);
    }
    ((void (*)(void *, void))v37)(v100, 0);
    SiriNetworkOspreyChannel.connectionMetrics.getter((uint64_t)v97);
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v97, (uint64_t)v99, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v99, (uint64_t)v100, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
    if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v100) == 1
      || (_s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)&v98, (uint64_t)v93, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?), _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v97, (uint64_t)v96, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?), outlined release of ConnectionMetrics?(v96, outlined consume of ConnectionMetrics?), _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v93, (uint64_t)v94, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?), _s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v94) == 1))
    {
      Swift::String v63 = SiriNetworkOspreyChannel.connectionMetrics.modify();
      uint64_t v65 = v64;
      _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v64, (uint64_t)v96, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
      _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v96, (uint64_t)v97, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
      if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v97) == 1)
      {
        ((void (*)(unsigned char *, void))v63)(v127, 0);
      }
      else
      {
        _s11SiriNetwork010ConnectionB6ReportVSgWOi0_(__dst);
        _s11SiriNetwork25ConnectionInterfaceReportVSgWOi0_(v89);
        if (one-time initialization token for sharedNetworkAnalytics != -1) {
          swift_once();
        }
        Swift::String v66 = static NetworkAnalytics.sharedNetworkAnalytics;
        LODWORD(__src[0]) = 0;
        __src[1] = 0;
        void __src[2] = 0xE000000000000000;
        __src[3] = 0;
        __src[4] = 0xE000000000000000;
        _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)__dst, (uint64_t)&__src[5], (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
        __src[46] = 0;
        void __src[45] = 0;
        LOBYTE(__src[47]) = 1;
        _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v89, (uint64_t)&__src[48], (uint64_t *)&demangling cache variable for type metadata for ConnectionInterfaceReport?);
        __src[85] = v8;
        __src[86] = v8;
        LODWORD(__src[87]) = 4;
        __src[88] = (uint64_t)v66;
        memcpy(v93, __src, 0x2C8uLL);
        destructiveProjectEnumData for ConnectionConfigurationError(v93);
        _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v65 + 568, (uint64_t)v94, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
        _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v93, v65 + 568, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
        id v67 = v66;
        outlined release of ConnectionSnapshotReport?((uint64_t)v94);
        ((void (*)(unsigned char *, void))v63)(v127, 0);
      }
    }
    ConnectionNetworkReport.init(ospreyConnectionMetrics:)(v1, (uint64_t)v127);
    memcpy(v95, v127, sizeof(v95));
    Swift::String v68 = SiriNetworkOspreyChannel.connectionMetrics.modify();
    uint64_t v70 = v69;
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v69, (uint64_t)v96, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v96, (uint64_t)v97, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
    if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v97) == 1)
    {
      outlined release of ConnectionNetworkReport((uint64_t)v127);
      ((void (*)(unsigned char *, void))v68)(v89, 0);
    }
    else
    {
      _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v70 + 568, (uint64_t)v93, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
      _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v93, (uint64_t)v94, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
      if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v94) == 1)
      {
        outlined release of ConnectionNetworkReport((uint64_t)v127);
      }
      else
      {
        memcpy(__dst, v95, 0x139uLL);
        destructiveProjectEnumData for ConnectionConfigurationError(__dst);
        uint64_t v71 = v70 + 608;
        _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v71, (uint64_t)__src, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
        _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)__dst, v71, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
        outlined release of ConnectionNetworkReport?(__src);
      }
      ((void (*)(unsigned char *, void))v68)(v89, 0);
    }
    if (one-time initialization token for siriNetwork != -1) {
      swift_once();
    }
    uint64_t v72 = type metadata accessor for Logger();
    __swift_project_value_buffer(v72, (uint64_t)static Logger.siriNetwork);
    Swift::String v73 = v5;
    long long v74 = Logger.logObject.getter();
    os_log_type_t v75 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v74, v75))
    {
      uint64_t v76 = (uint8_t *)swift_slowAlloc();
      uint64_t v77 = swift_slowAlloc();
      uint64_t v92 = v77;
      *(_DWORD *)uint64_t v76 = 136315138;
      SiriNetworkOspreyChannel.connectionMetrics.getter((uint64_t)__src);
      _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)__src, (uint64_t)v93, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
      _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v93, (uint64_t)v94, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
      if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v94) == 1)
      {
        unint64_t v78 = 0xE100000000000000;
        uint64_t v79 = 45;
      }
      else
      {
        _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v93, (uint64_t)__dst, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
        memcpy(v89, __dst, 0x599uLL);
        uint64_t v79 = String.init<A>(describing:)();
        unint64_t v78 = v80;
      }
      __src[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v79, v78, &v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_25D6CC000, v74, v75, "Provider - SiriNetworkOspreyChannel: Channel metrics generated. %s", v76, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2611B3750](v77, -1, -1);
      MEMORY[0x2611B3750](v76, -1, -1);
    }
    else
    {
    }
    objc_msgSend(*(id *)&v5[v6], sel_unlock);
  }
}

void SiriNetworkOspreyChannel.send(_:)()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR___SNOspreyChannel_ospreyClientStreamingContext);
  if (v1)
  {
    swift_unknownObjectRetain();
    os_log_t oslog = (os_log_t)Data._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v1, sel_writeFrame_);
    swift_unknownObjectRelease();
  }
  else
  {
    if (one-time initialization token for siriNetwork != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.siriNetwork);
    os_log_t oslog = (os_log_t)Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl(&dword_25D6CC000, oslog, v3, "Provider - SiriNetworkOspreyChannel: Channel streaming context is nil.", v4, 2u);
      OUTLINED_FUNCTION_1_2();
    }
  }
}

id SiriNetworkOspreyChannel.bidirectionalStreamingRequest(withMethodName:requestBuilder:streamingResponseHandler:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.siriNetwork);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl(&dword_25D6CC000, v15, v16, "Provider - SiriNetworkOspreyChannel: Bidirectional streaming created.", v17, 2u);
    OUTLINED_FUNCTION_1_2();
  }

  uint64_t v24 = (void *)MEMORY[0x2611B2220](a1, a2);
  if (a3)
  {
    uint64_t v33 = a3;
    uint64_t v34 = a4;
    uint64_t aBlock = MEMORY[0x263EF8330];
    uint64_t v30 = 1107296256;
    uint64_t v31 = thunk for @escaping @callee_guaranteed (@guaranteed OspreyConnectionMetrics) -> ();
    id v32 = &block_descriptor_67;
    unint64_t v18 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
  }
  else
  {
    unint64_t v18 = 0;
  }
  uint64_t v33 = a5;
  uint64_t v34 = a6;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v30 = 1107296256;
  uint64_t v31 = (uint64_t (*)())thunk for @escaping @callee_guaranteed (@guaranteed Data) -> ();
  id v32 = &block_descriptor_61;
  uint64_t v19 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  uint64_t v33 = a7;
  uint64_t v34 = a8;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v30 = 1107296256;
  uint64_t v31 = (uint64_t (*)())thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  id v32 = &block_descriptor_64;
  uint64_t v20 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  v28.receiver = v26;
  v28.super_class = (Class)type metadata accessor for SiriNetworkOspreyChannel();
  id v21 = objc_msgSendSuper2(&v28, sel_bidirectionalStreamingRequestWithMethodName_requestBuilder_streamingResponseHandler_completion_, v24, v18, v19, v20);
  _Block_release(v20);
  _Block_release(v19);
  _Block_release(v18);

  uint64_t v22 = swift_unknownObjectRetain();
  SiriNetworkOspreyChannel.ospreyClientStreamingContext.setter(v22);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed LinkRecommendationInfo?) -> ())?(a3);
  SiriNetworkOspreyChannel.ospreyRequestBuilder.setter(a3, a4);
  return v21;
}

void thunk for @escaping @callee_guaranteed (@guaranteed OspreyConnectionMetrics) -> ()(uint64_t a1, void *a2)
{
  os_log_type_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed Data) -> ()(uint64_t a1, void *a2)
{
  os_log_type_t v3 = *(void (**)(uint64_t, unint64_t))(a1 + 32);
  swift_retain();
  id v4 = a2;
  uint64_t v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v7 = v6;

  v3(v5, v7);
  outlined consume of Data._Representation(v5, v7);

  return swift_release();
}

void thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ()(uint64_t a1, void *a2)
{
  os_log_type_t v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3(a2);
  swift_release();
}

void thunk for @escaping @callee_unowned @convention(block) (@unowned NSData) -> ()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, objc_class *))(a3 + 16))(a3, isa);
}

id SiriNetworkOspreyChannel.getMetrics()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = OBJC_IVAR___SNOspreyChannel_lock;
  objc_msgSend(*(id *)(v1 + OBJC_IVAR___SNOspreyChannel_lock), sel_lock);
  SiriNetworkOspreyChannel.connectionMetrics.getter((uint64_t)v5);
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v5, (uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v6, a1, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
  return objc_msgSend(*(id *)(v1 + v3), sel_unlock);
}

id SiriNetworkOspreyChannel.init(url:configuration:)(uint64_t a1, void *a2)
{
  uint64_t v5 = (uint64_t)&v2[OBJC_IVAR___SNOspreyChannel_connectionConfiguration];
  _s11SiriNetwork23ConnectionConfigurationVSgWOi0_(v19);
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v19, v5, &demangling cache variable for type metadata for ConnectionConfiguration?);
  *(void *)&v2[OBJC_IVAR___SNOspreyChannel_ospreyClientStreamingContext] = 0;
  OUTLINED_FUNCTION_1_7(OBJC_IVAR___SNOspreyChannel_ospreyRequestBuilder);
  OUTLINED_FUNCTION_1_7(OBJC_IVAR___SNOspreyChannel_ospreyConnectionMetrics);
  uint64_t v6 = (uint64_t)&v2[OBJC_IVAR___SNOspreyChannel_connectionMetrics];
  _s11SiriNetwork17ConnectionMetricsVSgWOi0_(v20);
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v20, v6, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
  uint64_t v7 = OBJC_IVAR___SNOspreyChannel_lock;
  id v8 = objc_allocWithZone(MEMORY[0x263F08958]);
  uint64_t v9 = v2;
  *(void *)&v2[v7] = objc_msgSend(v8, sel_init);
  uint64_t v10 = &v9[OBJC_IVAR___SNOspreyChannel_connectionIdentifier];
  *(void *)uint64_t v10 = 0;
  *((void *)v10 + 1) = 0;
  uint64_t v11 = &v9[OBJC_IVAR___SNOspreyChannel_configuration];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;

  URL._bridgeToObjectiveC()(v12);
  uint64_t v14 = v13;
  v18.receiver = v9;
  v18.super_class = (Class)type metadata accessor for SiriNetworkOspreyChannel();
  id v15 = objc_msgSendSuper2(&v18, sel_initWithURL_configuration_, v14, a2);

  type metadata accessor for URL();
  OUTLINED_FUNCTION_0_7();
  (*(void (**)(uint64_t))(v16 + 8))(a1);
  return v15;
}

id SiriNetworkOspreyChannel.init(url:configuration:useCache:)(uint64_t a1, void *a2, char a3)
{
  uint64_t v7 = (uint64_t)&v3[OBJC_IVAR___SNOspreyChannel_connectionConfiguration];
  _s11SiriNetwork23ConnectionConfigurationVSgWOi0_(v21);
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v21, v7, &demangling cache variable for type metadata for ConnectionConfiguration?);
  *(void *)&v3[OBJC_IVAR___SNOspreyChannel_ospreyClientStreamingContext] = 0;
  OUTLINED_FUNCTION_1_7(OBJC_IVAR___SNOspreyChannel_ospreyRequestBuilder);
  OUTLINED_FUNCTION_1_7(OBJC_IVAR___SNOspreyChannel_ospreyConnectionMetrics);
  uint64_t v8 = (uint64_t)&v3[OBJC_IVAR___SNOspreyChannel_connectionMetrics];
  _s11SiriNetwork17ConnectionMetricsVSgWOi0_(v22);
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v22, v8, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
  uint64_t v9 = OBJC_IVAR___SNOspreyChannel_lock;
  id v10 = objc_allocWithZone(MEMORY[0x263F08958]);
  uint64_t v11 = v3;
  *(void *)&v3[v9] = objc_msgSend(v10, sel_init);
  id v12 = &v11[OBJC_IVAR___SNOspreyChannel_connectionIdentifier];
  *(void *)id v12 = 0;
  *((void *)v12 + 1) = 0;
  uint64_t v13 = &v11[OBJC_IVAR___SNOspreyChannel_configuration];
  *(void *)uint64_t v13 = 0;
  *((void *)v13 + 1) = 0;

  URL._bridgeToObjectiveC()(v14);
  uint64_t v16 = v15;
  v20.receiver = v11;
  v20.super_class = (Class)type metadata accessor for SiriNetworkOspreyChannel();
  id v17 = objc_msgSendSuper2(&v20, sel_initWithURL_configuration_useCache_, v16, a2, a3 & 1);

  type metadata accessor for URL();
  OUTLINED_FUNCTION_0_7();
  (*(void (**)(uint64_t))(v18 + 8))(a1);
  return v17;
}

id SiriNetworkOspreyChannel.init()()
{
  uint64_t v1 = (uint64_t)&v0[OBJC_IVAR___SNOspreyChannel_connectionConfiguration];
  _s11SiriNetwork23ConnectionConfigurationVSgWOi0_(v10);
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v10, v1, &demangling cache variable for type metadata for ConnectionConfiguration?);
  *(void *)&v0[OBJC_IVAR___SNOspreyChannel_ospreyClientStreamingContext] = 0;
  OUTLINED_FUNCTION_1_7(OBJC_IVAR___SNOspreyChannel_ospreyRequestBuilder);
  OUTLINED_FUNCTION_1_7(OBJC_IVAR___SNOspreyChannel_ospreyConnectionMetrics);
  uint64_t v2 = (uint64_t)&v0[OBJC_IVAR___SNOspreyChannel_connectionMetrics];
  _s11SiriNetwork17ConnectionMetricsVSgWOi0_(v11);
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v11, v2, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
  uint64_t v3 = OBJC_IVAR___SNOspreyChannel_lock;
  id v4 = objc_allocWithZone(MEMORY[0x263F08958]);
  uint64_t v5 = v0;
  *(void *)&v0[v3] = objc_msgSend(v4, sel_init);
  uint64_t v6 = &v5[OBJC_IVAR___SNOspreyChannel_connectionIdentifier];
  *(void *)uint64_t v6 = 0;
  *((void *)v6 + 1) = 0;
  uint64_t v7 = &v5[OBJC_IVAR___SNOspreyChannel_configuration];
  *(void *)uint64_t v7 = 0;
  *((void *)v7 + 1) = 0;

  v9.receiver = v5;
  v9.super_class = (Class)type metadata accessor for SiriNetworkOspreyChannel();
  return objc_msgSendSuper2(&v9, sel_init);
}

id SiriNetworkOspreyChannel.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SiriNetworkOspreyChannel();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for SiriNetworkOspreyChannel()
{
  return self;
}

uint64_t protocol witness for RPCOspreyConnectionProtocol.connectionIdentifier.setter in conformance SiriNetworkOspreyChannel(uint64_t a1, uint64_t a2)
{
  return SiriNetworkOspreyChannel.connectionIdentifier.setter(a1, a2);
}

unint64_t type metadata accessor for NSURLSessionConfiguration()
{
  unint64_t result = lazy cache variable for type metadata for NSURLSessionConfiguration;
  if (!lazy cache variable for type metadata for NSURLSessionConfiguration)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSURLSessionConfiguration);
  }
  return result;
}

uint64_t outlined release of ConnectionConfiguration?(uint64_t a1)
{
  long long v13 = *(_OWORD *)(a1 + 400);
  long long v11 = *(_OWORD *)(a1 + 368);
  long long v12 = *(_OWORD *)(a1 + 384);
  long long v9 = *(_OWORD *)(a1 + 336);
  long long v10 = *(_OWORD *)(a1 + 352);
  long long v7 = *(_OWORD *)(a1 + 304);
  long long v8 = *(_OWORD *)(a1 + 320);
  long long v5 = *(_OWORD *)(a1 + 272);
  long long v6 = *(_OWORD *)(a1 + 288);
  long long v3 = *(_OWORD *)(a1 + 240);
  long long v4 = *(_OWORD *)(a1 + 256);
  outlined consume of ConnectionConfiguration?(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void **)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    *(void *)(a1 + 224),
    *(void *)(a1 + 232),
    v3,
    *((uint64_t *)&v3 + 1),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((uint64_t *)&v5 + 1),
    v6,
    *((uint64_t *)&v6 + 1),
    v7,
    *((uint64_t *)&v7 + 1),
    v8,
    *((uint64_t *)&v8 + 1),
    v9,
    *((uint64_t *)&v9 + 1),
    v10,
    *((uint64_t *)&v10 + 1),
    v11,
    *((uint64_t *)&v11 + 1),
    v12,
    *((uint64_t *)&v12 + 1),
    v13,
    *((uint64_t *)&v13 + 1));
  return a1;
}

void outlined consume of ConnectionConfiguration?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  if (a4 != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of ConnectionPolicy?(a41, a42, a43, a44, a45, a46, a47, a48, a49, a50);
    outlined consume of ConnectionPolicyRoute?(a51, a52);
  }
}

uint64_t sub_25D6EE054()
{
  swift_unknownObjectWeakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_25D6EE08C()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

void partial apply for closure #1 in SiriNetworkOspreyChannel.init(url:connectionConfiguration:)(uint64_t a1)
{
}

uint64_t sub_25D6EE0CC()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed OspreyConnectionMetrics) -> (@out ())(uint64_t a1)
{
  objc_super v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  uint64_t v4 = a1;
  return v2(&v4);
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed OspreyConnectionMetrics) -> ()(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

unint64_t lazy protocol witness table accessor for type SiriNetworkOspreyChannel and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type SiriNetworkOspreyChannel and conformance NSObject;
  if (!lazy protocol witness table cache variable for type SiriNetworkOspreyChannel and conformance NSObject)
  {
    type metadata accessor for SiriNetworkOspreyChannel();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriNetworkOspreyChannel and conformance NSObject);
  }
  return result;
}

uint64_t *outlined release of ConnectionNetworkReport?(uint64_t *a1)
{
  return a1;
}

uint64_t outlined release of ConnectionNetworkReport(uint64_t a1)
{
  return a1;
}

uint64_t _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_0_7();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t outlined release of ConnectionPreparationReport?(uint64_t a1)
{
  long long v8 = *(_OWORD *)(a1 + 320);
  long long v9 = *(_OWORD *)(a1 + 336);
  long long v6 = *(_OWORD *)(a1 + 288);
  long long v7 = *(_OWORD *)(a1 + 304);
  long long v4 = *(_OWORD *)(a1 + 256);
  long long v5 = *(_OWORD *)(a1 + 272);
  long long v3 = *(_OWORD *)(a1 + 224);
  outlined consume of ConnectionPreparationReport?(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    v3,
    *((uint64_t *)&v3 + 1),
    *(void *)(a1 + 240),
    *(void *)(a1 + 248),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((uint64_t *)&v5 + 1),
    v6,
    *((uint64_t *)&v6 + 1),
    v7,
    *((uint64_t *)&v7 + 1),
    v8,
    *((uint64_t *)&v8 + 1),
    v9,
    *((uint64_t *)&v9 + 1),
    *(void **)(a1 + 352));
  return a1;
}

#error "25D6EE7F0: call analysis failed (funcsize=271)"

uint64_t outlined copy of ConnectionMetrics?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a3)
  {
    uint64_t v124 = STACK[0xB48];
    uint64_t v123 = STACK[0xB40];
    uint64_t v122 = STACK[0xB38];
    uint64_t v121 = STACK[0xB30];
    uint64_t v120 = STACK[0xB28];
    uint64_t v119 = STACK[0xB20];
    uint64_t v118 = STACK[0xB18];
    uint64_t v117 = STACK[0xB10];
    uint64_t v116 = STACK[0xB08];
    uint64_t v115 = STACK[0xB00];
    uint64_t v114 = STACK[0xAF8];
    uint64_t v113 = STACK[0xAF0];
    uint64_t v112 = STACK[0xAE8];
    uint64_t v111 = STACK[0xAE0];
    uint64_t v110 = STACK[0xAD8];
    uint64_t v109 = STACK[0xAD0];
    uint64_t v108 = STACK[0xAC8];
    uint64_t v107 = STACK[0xAC0];
    uint64_t v106 = STACK[0xAB8];
    uint64_t v105 = STACK[0xAB0];
    uint64_t v104 = STACK[0xAA8];
    uint64_t v103 = STACK[0xAA0];
    uint64_t v102 = STACK[0xA98];
    uint64_t v101 = STACK[0xA90];
    uint64_t v100 = STACK[0xA88];
    uint64_t v99 = STACK[0xA80];
    uint64_t v98 = STACK[0xA78];
    uint64_t v97 = STACK[0xA70];
    uint64_t v96 = STACK[0xA68];
    uint64_t v95 = STACK[0xA60];
    uint64_t v94 = STACK[0xA58];
    uint64_t v93 = STACK[0xA50];
    uint64_t v92 = STACK[0xA48];
    uint64_t v91 = STACK[0xA40];
    uint64_t v90 = STACK[0xA38];
    uint64_t v89 = STACK[0xA30];
    uint64_t v88 = STACK[0xA28];
    uint64_t v87 = STACK[0xA20];
    uint64_t v86 = STACK[0xA18];
    uint64_t v85 = STACK[0xA10];
    uint64_t v84 = STACK[0xA08];
    uint64_t v83 = STACK[0xA00];
    uint64_t v82 = STACK[0x9F8];
    uint64_t v81 = STACK[0x9F0];
    uint64_t v80 = STACK[0x9E8];
    uint64_t v79 = STACK[0x9E0];
    uint64_t v78 = STACK[0x9D8];
    uint64_t v126 = STACK[0x9C8];
    uint64_t v127 = STACK[0x9D0];
    uint64_t v125 = STACK[0x9C0];
    uint64_t v77 = STACK[0x9B8];
    uint64_t v76 = STACK[0x9B0];
    uint64_t v75 = STACK[0x9A8];
    uint64_t v74 = STACK[0x9A0];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of ConnectionHTTPHeaderReport?(a8, a9, a10, a11, a12);
    outlined copy of ConnectionPreparationReport?(a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31,
      a32,
      a33,
      a34,
      a35,
      a36,
      a37,
      a38,
      a39,
      a40,
      a41,
      a42,
      a43,
      a44,
      a45,
      a46,
      a47,
      a48,
      a49,
      a50,
      a51,
      a52,
      a53,
      a54,
      a55,
      a56,
      a57);
    outlined copy of ConnectionEstablishmentReport?(a58, a59, a60, a61, a62, a63, a64, a65, a66, a67, a68, a69, a70, a71);
    outlined copy of ConnectionSnapshotReport?(a72, v74, v75, v76, v77, v125, v126, v127, v78, v79, v80, v81, v82, v83, v84, v85, v86, v87, v88,
      v89,
      v90,
      v91,
      v92,
      v93,
      v94,
      v95,
      v96,
      v97,
      v98,
      v99,
      v100,
      v101,
      v102,
      v103,
      v104,
      v105,
      v106,
      v107,
      v108,
      v109,
      v110,
      v111,
      v112,
      v113,
      v114,
      v115,
      v116,
      v117,
      v118,
      v119,
      v120,
      v121,
      v122,
      v123,
      v124);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

void _s11SiriNetwork23ConnectionConfigurationVSgWOi0_(void *a1)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 1;
  bzero(a1 + 4, 0x1E4uLL);
}

void _s11SiriNetwork17ConnectionMetricsVSgWOi0_(void *a1)
{
}

uint64_t sub_25D6EF0F4()
{
  _Block_release(*(const void **)(v0 + 16));

  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSData) -> ()(uint64_t a1, uint64_t a2)
{
  thunk for @escaping @callee_unowned @convention(block) (@unowned NSData) -> ()(a1, a2, *(void *)(v2 + 16));
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> ()(uint64_t a1)
{
  thunk for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> ()(a1, *(void *)(v1 + 16));
}

void OUTLINED_FUNCTION_1_7(uint64_t a1@<X8>)
{
  uint64_t v2 = (void *)(v1 + a1);
  *uint64_t v2 = 0;
  v2[1] = 0;
}

uint64_t getEnumTagSinglePayload for ConnectionMethod(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFD)
  {
    if (a2 + 3 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 3) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 4;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v5 = v6 - 4;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for ConnectionMethod(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25D6EF2D0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

unsigned char *destructiveInjectEnumTag for ConnectionMethod(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for ConnectionMethod()
{
  return &type metadata for ConnectionMethod;
}

uint64_t ConnectionMethod.nextConnectionMethodSupported(connectionConfiguration:)(uint64_t a1, Swift::Int a2)
{
  char v3 = *(unsigned char *)(a1 + 99);
  uint64_t v4 = *(void *)(a1 + 408);
  int v5 = *(unsigned __int8 *)(a1 + 513);
  uint64_t v15 = MEMORY[0x263F8EE88];
  if (v4 != 1 && v5 != 5 && v5 == 4) {
    char v8 = v3;
  }
  else {
    char v8 = 1;
  }
  while (2)
  {
    char v9 = a2;
    specialized Set._Variant.insert(_:)(&v14, a2);
    LODWORD(a2) = 1;
    switch(v9)
    {
      case 1:
        LODWORD(a2) = 0;
        break;
      case 2:
        a2 = 3;
        if (v8) {
          goto LABEL_14;
        }
        break;
      case 3:
        break;
      default:
        a2 = 2;
        if ((v3 & 1) == 0)
        {
LABEL_14:
          specialized Set.contains(_:)(a2, v15);
          if ((v10 & 1) == 0) {
            continue;
          }
        }
        break;
    }
    break;
  }
  specialized Set.contains(_:)(a2, v15);
  char v12 = v11;
  swift_bridgeObjectRelease();
  if (v12) {
    return 0;
  }
  else {
    return a2;
  }
}

uint64_t ConnectionMethod.providerClass(for:)(uint64_t a1)
{
  if (a1 == 2)
  {
    uint64_t v1 = type metadata accessor for RPCOspreyConnectionProvider();
    int v2 = &lazy protocol witness table cache variable for type RPCOspreyConnectionProvider and conformance RPCOspreyConnectionProvider;
    char v3 = type metadata accessor for RPCOspreyConnectionProvider;
LABEL_5:
    lazy protocol witness table accessor for type RPCOspreyConnectionProvider and conformance RPCOspreyConnectionProvider(v2, (void (*)(uint64_t))v3);
    return v1;
  }
  if (a1 == 1)
  {
    uint64_t v1 = type metadata accessor for NetworkConnectionProvider();
    int v2 = &lazy protocol witness table cache variable for type NetworkConnectionProvider and conformance NetworkConnectionProvider;
    char v3 = type metadata accessor for NetworkConnectionProvider;
    goto LABEL_5;
  }
  uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
  __break(1u);
  return result;
}

uint64_t ConnectionMethod.communicationProtocolClass(for:)(uint64_t a1)
{
  if (a1 == 2) {
    return type metadata accessor for CommunicationProtocolProtobuf();
  }
  if (a1 == 1) {
    return type metadata accessor for CommunicationProtocolAce();
  }
  uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
  __break(1u);
  return result;
}

uint64_t ConnectionMethod.connectionMethodDescription(connectionConfiguration:isMPTCP:)(uint64_t a1, char a2, char a3)
{
  uint64_t v4 = 7365492;
  int v5 = *(unsigned __int8 *)(a1 + 313);
  uint64_t v6 = *(void *)(a1 + 392);
  switch(a3)
  {
    case 1:
      if (*(void *)(a1 + 408) == 1 || *(unsigned char *)(a1 + 513) == 5)
      {
LABEL_7:
        if (v6) {
          int v8 = v5;
        }
        else {
          int v8 = 0;
        }
        uint64_t v9 = 0x706374706DLL;
        if ((a2 & 1) == 0) {
          uint64_t v9 = 7365492;
        }
        unint64_t v10 = 0xD000000000000010;
        if (a2) {
          unint64_t v10 = 0xD000000000000012;
        }
        if (v8 == 1) {
          uint64_t v4 = v10;
        }
        else {
          uint64_t v4 = v9;
        }
      }
      else
      {
        switch(*(unsigned char *)(a1 + 513))
        {
          case 1:
          case 2:
          case 3:
          case 4:
            uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v13 = v12;
            if (v11 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v13 == v14)
            {
              OUTLINED_FUNCTION_0_8();
              swift_bridgeObjectRelease_n();
            }
            else
            {
              char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v16 & 1) == 0) {
                goto LABEL_7;
              }
              OUTLINED_FUNCTION_0_8();
            }
            break;
          default:
            goto LABEL_7;
        }
      }
      break;
    case 2:
      uint64_t v4 = 1919247728;
      break;
    case 3:
      uint64_t v4 = 0x796E6163737574;
      break;
    default:
      return v4;
  }
  return v4;
}

SiriNetwork::ConnectionMethod_optional __swiftcall ConnectionMethod.init(rawValue:)(Swift::Int rawValue)
{
  if ((unint64_t)rawValue >= 4) {
    LOBYTE(rawValue) = 4;
  }
  return (SiriNetwork::ConnectionMethod_optional)rawValue;
}

void *static ConnectionMethod.allCases.getter()
{
  return &outlined read-only object #0 of static ConnectionMethod.allCases.getter;
}

uint64_t ConnectionMethod.rawValue.getter(uint64_t result)
{
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ConnectionMethod(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance ConnectionMethod()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ConnectionMethod(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance ConnectionMethod(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

void protocol witness for static CaseIterable.allCases.getter in conformance ConnectionMethod(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static ConnectionMethod.allCases.getter;
}

SiriNetwork::ConnectionMethod_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ConnectionMethod@<W0>(Swift::Int *a1@<X0>, SiriNetwork::ConnectionMethod_optional *a2@<X8>)
{
  result.value = ConnectionMethod.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ConnectionMethod@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ConnectionMethod.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type [ConnectionMethod] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [ConnectionMethod] and conformance [A];
  if (!lazy protocol witness table cache variable for type [ConnectionMethod] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [ConnectionMethod]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [ConnectionMethod] and conformance [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ConnectionMethod and conformance ConnectionMethod()
{
  unint64_t result = lazy protocol witness table cache variable for type ConnectionMethod and conformance ConnectionMethod;
  if (!lazy protocol witness table cache variable for type ConnectionMethod and conformance ConnectionMethod)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConnectionMethod and conformance ConnectionMethod);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type RPCOspreyConnectionProvider and conformance RPCOspreyConnectionProvider(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t dispatch thunk of ConnectionActivity.identifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ConnectionActivity.startActivity(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of ConnectionActivity.endActivity(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of Activity.domain.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of Activity.label.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of Activity.parent.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of Activity.parent.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of Activity.parent.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of Activity.isRetry.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of Activity.isActivated.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of Activity.isReported.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of Activity.token.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of Activity.init(domain:label:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 80))();
}

uint64_t dispatch thunk of Activity.activate()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t dispatch thunk of Activity.complete(reason:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 96))();
}

uint64_t type metadata completion function for NetworkActivity()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t NWActivity.parent.setter(uint64_t a1)
{
  OUTLINED_FUNCTION_0_9();
  outlined init with copy of Activity?(v2, (uint64_t)v4);
  if (v5)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Activity);
    swift_dynamicCast();
  }
  else
  {
    outlined destroy of Activity?((uint64_t)v4);
  }
  NWActivity.parentActivity.setter();
  return outlined destroy of Activity?(a1);
}

uint64_t NetworkActivity.deinit()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 112);
  uint64_t v2 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t NetworkActivity.__deallocating_deinit()
{
  NetworkActivity.deinit();
  OUTLINED_FUNCTION_0_9();
  uint64_t v2 = *(unsigned int *)(v1 + 48);
  uint64_t v3 = *(unsigned __int16 *)(v1 + 52);

  return MEMORY[0x270FA0228](v0, v2, v3);
}

uint64_t type metadata accessor for NetworkActivity()
{
  return swift_getGenericMetadata();
}

unsigned char *storeEnumTagSinglePayload for NetworkActivityTracingState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25D6EFD60);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NetworkActivityTracingState()
{
  return &type metadata for NetworkActivityTracingState;
}

unint64_t lazy protocol witness table accessor for type NetworkActivityTracingState and conformance NetworkActivityTracingState()
{
  unint64_t result = lazy protocol witness table cache variable for type NetworkActivityTracingState and conformance NetworkActivityTracingState;
  if (!lazy protocol witness table cache variable for type NetworkActivityTracingState and conformance NetworkActivityTracingState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkActivityTracingState and conformance NetworkActivityTracingState);
  }
  return result;
}

uint64_t outlined init with copy of Activity?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Activity?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Activity?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Activity?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

Swift::Bool __swiftcall Error.sn_isNetworkUnreachable()()
{
  return Error.sn_isNetworkUnreachable()(v0, v1, (SEL *)&selRef_sn_isNetworkUnreachable);
}

Swift::Bool __swiftcall Error.sn_isNetworkUnreachableForServerCause()()
{
  return Error.sn_isNetworkUnreachable()(v0, v1, (SEL *)&selRef_sn_isNetworkUnreachableForServerCause);
}

Swift::Bool __swiftcall Error.sn_isNetworkDown()()
{
  return Error.sn_isNetworkUnreachable()(v0, v1, (SEL *)&selRef_sn_isNetworkDown);
}

Swift::Bool __swiftcall Error.sn_isNetworkConnectionRetryable()()
{
  return Error.sn_isNetworkUnreachable()(v0, v1, (SEL *)&selRef_sn_isNetworkConnectionRetryable);
}

Swift::Bool __swiftcall Error.sn_isNetworkConnectionRetryableNow()()
{
  return Error.sn_isNetworkUnreachable()(v0, v1, (SEL *)&selRef_sn_isNetworkConnectionRetryableNow);
}

Swift::Bool __swiftcall Error.sn_isNetworkConnectionRetryableAfterDelay()()
{
  return Error.sn_isNetworkUnreachable()(v0, v1, (SEL *)&selRef_sn_isNetworkConnectionRetryableAfterDelay);
}

Swift::Bool __swiftcall Error.sn_isNetworkOperationRetryable()()
{
  return Error.sn_isNetworkUnreachable()(v0, v1, (SEL *)&selRef_sn_isNetworkOperationRetryable);
}

id Error.sn_isNetworkUnreachable()(uint64_t a1, uint64_t a2, SEL *a3)
{
  OUTLINED_FUNCTION_1_8();
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  uint64_t v14 = OUTLINED_FUNCTION_0_10(v6, v7, v8, v9, v10, v11, v12, v13, v23);
  v15(v14);
  if (_getErrorEmbeddedNSError<A>(_:)())
  {
    uint64_t v16 = OUTLINED_FUNCTION_2_5();
  }
  else
  {
    uint64_t v18 = OUTLINED_FUNCTION_4_4();
    uint64_t v16 = OUTLINED_FUNCTION_3_4(v18, v19);
  }
  v17(v16);
  objc_super v20 = (void *)_convertErrorToNSError(_:)();

  id v21 = [v20 *a3];
  return v21;
}

Swift::Bool __swiftcall Error.isFallbackConnectionMethodRetryable(for:)(SiriNetwork::ConnectionMethod a1)
{
  OUTLINED_FUNCTION_1_8();
  uint64_t v4 = MEMORY[0x270FA5388](v3);
  uint64_t v12 = OUTLINED_FUNCTION_0_10(v4, v5, v6, v7, v8, v9, v10, v11, v21);
  v13(v12);
  if (_getErrorEmbeddedNSError<A>(_:)())
  {
    uint64_t v14 = OUTLINED_FUNCTION_2_5();
  }
  else
  {
    uint64_t v16 = OUTLINED_FUNCTION_4_4();
    uint64_t v14 = OUTLINED_FUNCTION_3_4(v16, v17);
  }
  v15(v14);
  uint64_t v18 = (void *)_convertErrorToNSError(_:)();

  Swift::Bool v19 = NSError.isFallbackConnectionMethodRetryable(for:)(a1);
  return v19;
}

char *OUTLINED_FUNCTION_0_10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (char *)&a9 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_2_5()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_3_4(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t OUTLINED_FUNCTION_4_4()
{
  return swift_allocError();
}

double specialized Dictionary.subscript.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  if (*(void *)(a3 + 16) && (unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2), (v7 & 1) != 0))
  {
    uint64_t v8 = *(void *)(a3 + 56) + 32 * v6;
    outlined init with copy of Any(v8, (uint64_t)a4);
  }
  else
  {
    double result = 0.0;
    *a4 = 0u;
    a4[1] = 0u;
  }
  return result;
}

uint64_t specialized Dictionary.subscript.getter(unsigned __int8 a1, uint64_t a2)
{
  if (*(void *)(a2 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(a1), (v2 & 1) != 0)) {
    return swift_retain();
  }
  else {
    return 0;
  }
}

uint64_t specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16) && (unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2), (v5 & 1) != 0)) {
    return *(void *)(*(void *)(a3 + 56) + 8 * v4);
  }
  else {
    return 0;
  }
}

{
  unint64_t v4;
  char v5;

  if (*(void *)(a3 + 16) && (unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2), (v5 & 1) != 0)) {
    return *(unsigned __int8 *)(*(void *)(a3 + 56) + v4);
  }
  else {
    return 2;
  }
}

Swift::Bool __swiftcall NSError.isFallbackConnectionMethodRetryable(for:)(SiriNetwork::ConnectionMethod a1)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWError?);
  uint64_t v6 = OUTLINED_FUNCTION_19_1(v5);
  MEMORY[0x270FA5388](v6);
  uint64_t v7 = OUTLINED_FUNCTION_23_1();
  OUTLINED_FUNCTION_0_0();
  uint64_t v9 = v8;
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_27_1();
  *(void *)&long long v37 = v1;
  type metadata accessor for NSError();
  id v11 = v1;
  if (swift_dynamicCast())
  {
    Swift::Bool v12 = 1;
    OUTLINED_FUNCTION_34_1(v3, 0);
    OUTLINED_FUNCTION_20_1();
    v13();
    Swift::Bool v14 = NWError.isFallbackConnectionMethodRetryable(for:)(a1);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v2, v7);
    if (v14) {
      return v12;
    }
  }
  else
  {
    OUTLINED_FUNCTION_34_1(v3, 1);
    outlined destroy of RPCOspreyConnectionProtocol?(v3, &demangling cache variable for type metadata for NWError?);
  }
  id v15 = objc_msgSend(v11, sel_domain);
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = v17;

  if (v16 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v18 == v19) {
    goto LABEL_16;
  }
  char v21 = OUTLINED_FUNCTION_25_1();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v21) {
    goto LABEL_17;
  }
  id v22 = objc_msgSend(v11, sel_domain);
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v25 = v24;

  if (v23 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v25 == v26)
  {
LABEL_16:
    OUTLINED_FUNCTION_15_1();
    goto LABEL_17;
  }
  char v28 = OUTLINED_FUNCTION_25_1();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v28 & 1) == 0)
  {
LABEL_23:
    id v31 = objc_msgSend(v11, sel_userInfo);
    uint64_t v32 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    specialized Dictionary.subscript.getter(v33, v34, v32, &v37);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v38)
    {
      outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)&v37, (uint64_t *)&demangling cache variable for type metadata for Any?);
      return 0;
    }
    if ((swift_dynamicCast() & 1) == 0) {
      return 0;
    }
    Swift::Bool v35 = NSError.isFallbackConnectionMethodRetryable(for:)(a1);

    return v35;
  }
LABEL_17:
  id v29 = objc_msgSend(v11, sel_code);
  if (v29 != (id)(int)POSIXErrorCode.rawValue.getter() && v29 != (id)(int)POSIXErrorCode.rawValue.getter())
  {
    if (v29 == (id)(int)POSIXErrorCode.rawValue.getter()) {
      return a1 == SiriNetwork_ConnectionMethod_peer;
    }
    goto LABEL_23;
  }
  return 1;
}

Swift::Bool __swiftcall NSError.sn_isNetworkUnreachable()()
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWError?);
  uint64_t v5 = OUTLINED_FUNCTION_19_1(v4);
  MEMORY[0x270FA5388](v5);
  uint64_t v6 = OUTLINED_FUNCTION_23_1();
  OUTLINED_FUNCTION_0_0();
  uint64_t v8 = v7;
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_27_1();
  *(void *)&long long v46 = isNetwork;
  type metadata accessor for NSError();
  id v10 = isNetwork;
  if (swift_dynamicCast())
  {
    uint64_t v1 = 1;
    OUTLINED_FUNCTION_34_1(v3, 0);
    OUTLINED_FUNCTION_20_1();
    v11();
    id isNetwork = (id)NWError.sn_isNetworkUnreachable()();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v2, v6);
    if (isNetwork) {
      return v1;
    }
  }
  else
  {
    OUTLINED_FUNCTION_34_1(v3, 1);
    outlined destroy of RPCOspreyConnectionProtocol?(v3, &demangling cache variable for type metadata for NWError?);
  }
  id v12 = OUTLINED_FUNCTION_10_2();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_13_1();
  if (v1 == static String._unconditionallyBridgeFromObjectiveC(_:)() && isNetwork == v13)
  {
LABEL_16:
    OUTLINED_FUNCTION_15_1();
    goto LABEL_17;
  }
  OUTLINED_FUNCTION_1_9();
  OUTLINED_FUNCTION_6_3();
  swift_bridgeObjectRelease();
  if ((v1 & 1) == 0)
  {
    id v15 = OUTLINED_FUNCTION_10_2();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_13_1();
    if (v1 != static String._unconditionallyBridgeFromObjectiveC(_:)() || isNetwork != v16)
    {
      OUTLINED_FUNCTION_1_9();
      OUTLINED_FUNCTION_6_3();
      swift_bridgeObjectRelease();
      if ((v1 & 1) == 0) {
        goto LABEL_20;
      }
      goto LABEL_17;
    }
    goto LABEL_16;
  }
LABEL_17:
  id isNetwork = OUTLINED_FUNCTION_28_1();
  if (isNetwork == (id)(int)POSIXErrorCode.rawValue.getter()
    || isNetwork == (id)(int)POSIXErrorCode.rawValue.getter()
    || isNetwork == (id)(int)POSIXErrorCode.rawValue.getter())
  {
    goto LABEL_51;
  }
LABEL_20:
  id v18 = OUTLINED_FUNCTION_10_2();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_13_1();
  if (v1 == static String._unconditionallyBridgeFromObjectiveC(_:)() && isNetwork == v19)
  {
    OUTLINED_FUNCTION_15_1();
  }
  else
  {
    OUTLINED_FUNCTION_1_9();
    OUTLINED_FUNCTION_6_3();
    swift_bridgeObjectRelease();
    if ((v1 & 1) == 0) {
      goto LABEL_31;
    }
  }
  id v21 = OUTLINED_FUNCTION_28_1();
  if (v21 == (id)-65554 || v21 == (id)-65537) {
    goto LABEL_51;
  }
LABEL_31:
  id v23 = OUTLINED_FUNCTION_10_2();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_13_1();
  if (v1 == static String._unconditionallyBridgeFromObjectiveC(_:)() && isNetwork == v24)
  {
    OUTLINED_FUNCTION_15_1();
  }
  else
  {
    OUTLINED_FUNCTION_1_9();
    OUTLINED_FUNCTION_6_3();
    swift_bridgeObjectRelease();
    if ((v1 & 1) == 0) {
      goto LABEL_39;
    }
  }
  if ((char *)OUTLINED_FUNCTION_28_1() - 1 < (char *)2) {
    goto LABEL_51;
  }
LABEL_39:
  id v26 = OUTLINED_FUNCTION_10_2();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_13_1();
  if (v1 == static String._unconditionallyBridgeFromObjectiveC(_:)() && isNetwork == v27)
  {
    OUTLINED_FUNCTION_15_1();
    goto LABEL_51;
  }
  OUTLINED_FUNCTION_1_9();
  OUTLINED_FUNCTION_6_3();
  swift_bridgeObjectRelease();
  if (v1)
  {
LABEL_51:
    LOBYTE(v1) = 1;
    return v1;
  }
  id v29 = OUTLINED_FUNCTION_10_2();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_13_1();
  if (v1 == static String._unconditionallyBridgeFromObjectiveC(_:)() && isNetwork == v30)
  {
    OUTLINED_FUNCTION_15_1();
    goto LABEL_54;
  }
  OUTLINED_FUNCTION_1_9();
  OUTLINED_FUNCTION_6_3();
  swift_bridgeObjectRelease();
  if (v1)
  {
LABEL_54:
    unint64_t v33 = (unint64_t)OUTLINED_FUNCTION_28_1();
    if (v33 >= 0x11 || ((0x1726Bu >> v33) & 1) == 0) {
      goto LABEL_56;
    }
    goto LABEL_51;
  }
LABEL_56:
  id v34 = OUTLINED_FUNCTION_10_2();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_13_1();
  if (v1 == static String._unconditionallyBridgeFromObjectiveC(_:)() && isNetwork == v35)
  {
    OUTLINED_FUNCTION_15_1();
  }
  else
  {
    OUTLINED_FUNCTION_1_9();
    OUTLINED_FUNCTION_6_3();
    swift_bridgeObjectRelease();
    if ((v1 & 1) == 0) {
      goto LABEL_69;
    }
  }
  id v37 = objc_msgSend(v10, sel_userInfo);
  uint64_t v38 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  specialized Dictionary.subscript.getter(v39, v40, v38, &v46);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v47)
  {
    outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)&v46, (uint64_t *)&demangling cache variable for type metadata for Any?);
LABEL_69:
    id v41 = objc_msgSend(v10, sel_userInfo);
    static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_17_1(v42, v43);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v47)
    {
      outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)&v46, (uint64_t *)&demangling cache variable for type metadata for Any?);
LABEL_74:
      LOBYTE(v1) = 0;
      return v1;
    }
    if ((OUTLINED_FUNCTION_4_5() & 1) == 0) {
      goto LABEL_74;
    }
    unsigned __int8 v44 = objc_msgSend(v45, sel_sn_isNetworkUnreachable);

    if ((v44 & 1) == 0) {
      goto LABEL_74;
    }
    goto LABEL_51;
  }
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_69;
  }
  LOBYTE(v1) = 1;
  if (v45 != (void *)406 && v45 != (void *)503) {
    goto LABEL_69;
  }
  return v1;
}

unint64_t type metadata accessor for NSError()
{
  unint64_t result = lazy cache variable for type metadata for NSError;
  if (!lazy cache variable for type metadata for NSError)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSError);
  }
  return result;
}

BOOL @objc NSError.sn_isNetworkUnreachable()(void *a1)
{
  id v1 = a1;
  Swift::Bool isNetwork = NSError.sn_isNetworkUnreachable()();

  return isNetwork;
}

Swift::Bool __swiftcall NSError.sn_isNetworkUnreachableForServerCause()()
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWError?);
  uint64_t v5 = OUTLINED_FUNCTION_19_1(v4);
  MEMORY[0x270FA5388](v5);
  id v6 = (id)OUTLINED_FUNCTION_9_2();
  OUTLINED_FUNCTION_0_0();
  uint64_t v8 = v7;
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_8_2();
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_16_1();
  id v11 = v0;
  if ((OUTLINED_FUNCTION_14_1() & 1) == 0)
  {
    OUTLINED_FUNCTION_21_1();
    outlined destroy of RPCOspreyConnectionProtocol?(v3, &demangling cache variable for type metadata for NWError?);
    goto LABEL_10;
  }
  uint64_t v12 = OUTLINED_FUNCTION_3_5();
  v13(v12);
  uint64_t v14 = OUTLINED_FUNCTION_5_4();
  v15(v14);
  uint64_t v16 = OUTLINED_FUNCTION_11_0();
  if (v17(v16) != *MEMORY[0x263F14318])
  {
    id v22 = *(void (**)(void))(v8 + 8);
    OUTLINED_FUNCTION_7_2();
    v22();
    ((void (*)(uint64_t, id))v22)(v1, v6);
    goto LABEL_10;
  }
  uint64_t v18 = OUTLINED_FUNCTION_12_1();
  v19(v18);
  if (*v2 > 0x3Du || ((1 << *v2) & 0x2060000000000000) == 0)
  {
    OUTLINED_FUNCTION_7_2();
    v34();
LABEL_10:
    id v23 = objc_msgSend(v0, sel_domain);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_22_1();
    if (v1 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v6 != v24)
    {
      OUTLINED_FUNCTION_2_6();
      OUTLINED_FUNCTION_18_1();
      swift_bridgeObjectRelease();
      if (v1)
      {
LABEL_22:
        id v6 = objc_msgSend(v0, sel_code);
        if (v6 == (id)(int)POSIXErrorCode.rawValue.getter()
          || v6 == (id)(int)POSIXErrorCode.rawValue.getter()
          || v6 == (id)(int)POSIXErrorCode.rawValue.getter())
        {
          return 1;
        }
LABEL_25:
        id v29 = objc_msgSend(v0, sel_domain);
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        OUTLINED_FUNCTION_22_1();
        if (v1 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v6 == v30)
        {
          OUTLINED_FUNCTION_32_1();
        }
        else
        {
          OUTLINED_FUNCTION_2_6();
          OUTLINED_FUNCTION_18_1();
          swift_bridgeObjectRelease();
          if ((v1 & 1) == 0) {
            goto LABEL_37;
          }
        }
        unint64_t v32 = (unint64_t)objc_msgSend(v0, sel_code);
        if (v32 <= 7 && ((1 << v32) & 0x8C) != 0) {
          return 1;
        }
LABEL_37:
        id v35 = objc_msgSend(v0, sel_userInfo);
        static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        OUTLINED_FUNCTION_17_1(v36, v37);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v41)
        {
          if (OUTLINED_FUNCTION_4_5())
          {
            unsigned __int8 v38 = objc_msgSend(v39, sel_sn_isNetworkUnreachableForServerCause);

            if (v38) {
              return 1;
            }
          }
        }
        else
        {
          outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v40, (uint64_t *)&demangling cache variable for type metadata for Any?);
        }
        return 0;
      }
      id v26 = objc_msgSend(v0, sel_domain);
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      OUTLINED_FUNCTION_22_1();
      if (v1 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v6 != v27)
      {
        OUTLINED_FUNCTION_2_6();
        OUTLINED_FUNCTION_18_1();
        swift_bridgeObjectRelease();
        if ((v1 & 1) == 0) {
          goto LABEL_25;
        }
        goto LABEL_22;
      }
    }
    OUTLINED_FUNCTION_32_1();
    goto LABEL_22;
  }
  OUTLINED_FUNCTION_7_2();
  v21();
  return 1;
}

BOOL @objc NSError.sn_isNetworkUnreachableForServerCause()(void *a1)
{
  id v1 = a1;
  Swift::Bool isNetworkUnreachableForServer = NSError.sn_isNetworkUnreachableForServerCause()();

  return isNetworkUnreachableForServer;
}

Swift::Bool __swiftcall NSError.sn_isNetworkDown()()
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWError?);
  uint64_t v5 = OUTLINED_FUNCTION_19_1(v4);
  MEMORY[0x270FA5388](v5);
  uint64_t v6 = OUTLINED_FUNCTION_9_2();
  OUTLINED_FUNCTION_0_0();
  uint64_t v8 = v7;
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_8_2();
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_16_1();
  id v11 = v0;
  if (!OUTLINED_FUNCTION_14_1())
  {
    OUTLINED_FUNCTION_21_1();
    outlined destroy of RPCOspreyConnectionProtocol?(v3, &demangling cache variable for type metadata for NWError?);
    id v21 = OUTLINED_FUNCTION_33_1();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_22_1();
    if (v1 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v6 == v22) {
      goto LABEL_15;
    }
    OUTLINED_FUNCTION_2_6();
    OUTLINED_FUNCTION_18_1();
    swift_bridgeObjectRelease();
    if (v1) {
      goto LABEL_16;
    }
    id v24 = OUTLINED_FUNCTION_33_1();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_22_1();
    if (v1 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v6 == v25)
    {
LABEL_15:
      OUTLINED_FUNCTION_32_1();
    }
    else
    {
      OUTLINED_FUNCTION_2_6();
      OUTLINED_FUNCTION_18_1();
      swift_bridgeObjectRelease();
      if ((v1 & 1) == 0)
      {
LABEL_18:
        id v28 = objc_msgSend(v0, sel_userInfo);
        static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        OUTLINED_FUNCTION_17_1(v29, v30);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (!v36)
        {
          outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v35, (uint64_t *)&demangling cache variable for type metadata for Any?);
          return 0;
        }
        if ((OUTLINED_FUNCTION_4_5() & 1) == 0) {
          return 0;
        }
        unsigned __int8 v31 = objc_msgSend(v34, sel_sn_isNetworkDown);

        return (v31 & 1) != 0;
      }
    }
LABEL_16:
    id v27 = objc_msgSend(v0, sel_code);
    if (v27 == (id)(int)POSIXErrorCode.rawValue.getter()) {
      return 1;
    }
    goto LABEL_18;
  }
  uint64_t v12 = OUTLINED_FUNCTION_3_5();
  v13(v12);
  uint64_t v14 = OUTLINED_FUNCTION_5_4();
  v15(v14);
  uint64_t v16 = OUTLINED_FUNCTION_11_0();
  if (v17(v16) == *MEMORY[0x263F14318])
  {
    uint64_t v18 = OUTLINED_FUNCTION_12_1();
    v19(v18);
    Swift::Bool v20 = *v2 == 50;
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v1, v6);
  }
  else
  {
    unint64_t v32 = *(void (**)(void))(v8 + 8);
    OUTLINED_FUNCTION_7_2();
    v32();
    Swift::Bool v20 = 0;
    ((void (*)(uint64_t, uint64_t))v32)(v1, v6);
  }
  return v20;
}

BOOL @objc NSError.sn_isNetworkDown()(void *a1)
{
  id v1 = a1;
  Swift::Bool isNetwork = NSError.sn_isNetworkDown()();

  return isNetwork;
}

Swift::Bool __swiftcall NSError.sn_isNetworkConnectionRetryable()()
{
  return objc_msgSend(v0, sel_sn_isNetworkUnreachable) ^ 1;
}

BOOL @objc NSError.sn_isNetworkConnectionRetryable()(void *a1)
{
  id v1 = a1;
  Swift::Bool isNetworkConnection = NSError.sn_isNetworkConnectionRetryable()();

  return isNetworkConnection;
}

Swift::Bool __swiftcall NSError.sn_isNetworkConnectionRetryableNow()()
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWError?);
  uint64_t v5 = OUTLINED_FUNCTION_19_1(v4);
  MEMORY[0x270FA5388](v5);
  uint64_t v6 = OUTLINED_FUNCTION_9_2();
  OUTLINED_FUNCTION_0_0();
  uint64_t v8 = v7;
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_8_2();
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_16_1();
  id v11 = v0;
  if (OUTLINED_FUNCTION_14_1())
  {
    uint64_t v12 = OUTLINED_FUNCTION_3_5();
    v13(v12);
    uint64_t v14 = OUTLINED_FUNCTION_5_4();
    v15(v14);
    uint64_t v16 = OUTLINED_FUNCTION_11_0();
    if (v17(v16) == *MEMORY[0x263F14318])
    {
      uint64_t v18 = OUTLINED_FUNCTION_12_1();
      v19(v18);
      int v20 = *v2;
      OUTLINED_FUNCTION_7_2();
      v21();
      if (v20 == 54) {
        return 1;
      }
    }
    else
    {
      uint64_t v22 = *(void (**)(void))(v8 + 8);
      OUTLINED_FUNCTION_7_2();
      v22();
      ((void (*)(uint64_t, uint64_t))v22)(v1, v6);
    }
  }
  else
  {
    OUTLINED_FUNCTION_21_1();
    outlined destroy of RPCOspreyConnectionProtocol?(v3, &demangling cache variable for type metadata for NWError?);
  }
  id v23 = OUTLINED_FUNCTION_33_1();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_22_1();
  if (v1 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v6 != v24)
  {
    OUTLINED_FUNCTION_2_6();
    OUTLINED_FUNCTION_18_1();
    swift_bridgeObjectRelease();
    if (v1) {
      goto LABEL_19;
    }
    id v26 = OUTLINED_FUNCTION_33_1();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_22_1();
    if (v1 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v6 != v27)
    {
      OUTLINED_FUNCTION_2_6();
      OUTLINED_FUNCTION_18_1();
      swift_bridgeObjectRelease();
      if ((v1 & 1) == 0) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  OUTLINED_FUNCTION_32_1();
LABEL_19:
  id v29 = objc_msgSend(v0, sel_code);
  if (v29 == (id)(int)POSIXErrorCode.rawValue.getter()) {
    return 1;
  }
LABEL_21:
  id v31 = objc_msgSend(v0, sel_userInfo);
  static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_17_1(v32, v33);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v37)
  {
    if (OUTLINED_FUNCTION_4_5())
    {
      unsigned __int8 v34 = objc_msgSend(v35, sel_sn_isNetworkConnectionRetryableNow);

      if (v34) {
        return 1;
      }
    }
  }
  else
  {
    outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v36, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  return 0;
}

BOOL @objc NSError.sn_isNetworkConnectionRetryableNow()(void *a1)
{
  id v1 = a1;
  Swift::Bool isNetworkConnectionRetryable = NSError.sn_isNetworkConnectionRetryableNow()();

  return isNetworkConnectionRetryable;
}

Swift::Bool __swiftcall NSError.sn_isNetworkConnectionRetryableAfterDelay()()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWError?);
  uint64_t v3 = OUTLINED_FUNCTION_19_1(v2);
  MEMORY[0x270FA5388](v3);
  uint64_t v4 = OUTLINED_FUNCTION_24_1();
  OUTLINED_FUNCTION_0_0();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_2();
  if (objc_msgSend((id)isNetworkConnectionRetryableAfter, sel_sn_isNetworkConnectionRetryableNow)) {
    return 1;
  }
  v24[0] = isNetworkConnectionRetryableAfter;
  type metadata accessor for NSError();
  id v8 = (id)isNetworkConnectionRetryableAfter;
  if (OUTLINED_FUNCTION_29_1())
  {
    Swift::Bool v9 = 1;
    OUTLINED_FUNCTION_31_0();
    OUTLINED_FUNCTION_20_1();
    v10();
    uint64_t isNetworkConnectionRetryableAfter = NWError.sn_isNetworkConnectionRetryableAfterDelay()();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v1, v4);
    if (isNetworkConnectionRetryableAfter) {
      return v9;
    }
  }
  else
  {
    OUTLINED_FUNCTION_30_1();
    outlined destroy of RPCOspreyConnectionProtocol?(isNetworkConnectionRetryableAfter, &demangling cache variable for type metadata for NWError?);
  }
  id v11 = OUTLINED_FUNCTION_10_2();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_13_1();
  if (v4 == static String._unconditionallyBridgeFromObjectiveC(_:)() && isNetworkConnectionRetryableAfter == v12) {
    goto LABEL_17;
  }
  OUTLINED_FUNCTION_1_9();
  OUTLINED_FUNCTION_6_3();
  swift_bridgeObjectRelease();
  if (v4)
  {
LABEL_18:
    id v17 = objc_msgSend(v8, sel_code);
    if (v17 == (id)(int)POSIXErrorCode.rawValue.getter() || v17 == (id)(int)POSIXErrorCode.rawValue.getter()) {
      return 1;
    }
    goto LABEL_22;
  }
  id v14 = OUTLINED_FUNCTION_10_2();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_13_1();
  if (v4 == static String._unconditionallyBridgeFromObjectiveC(_:)() && isNetworkConnectionRetryableAfter == v15)
  {
LABEL_17:
    OUTLINED_FUNCTION_15_1();
    goto LABEL_18;
  }
  OUTLINED_FUNCTION_1_9();
  OUTLINED_FUNCTION_6_3();
  swift_bridgeObjectRelease();
  if (v4) {
    goto LABEL_18;
  }
LABEL_22:
  id v19 = objc_msgSend(v8, sel_userInfo);
  static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_17_1(v20, v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v24[3])
  {
    outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v24, (uint64_t *)&demangling cache variable for type metadata for Any?);
    return 0;
  }
  if ((OUTLINED_FUNCTION_4_5() & 1) == 0) {
    return 0;
  }
  unsigned __int8 v22 = objc_msgSend(v23, sel_sn_isNetworkConnectionRetryableAfterDelay);

  return (v22 & 1) != 0;
}

BOOL @objc NSError.sn_isNetworkConnectionRetryableAfterDelay()(void *a1)
{
  id v1 = a1;
  Swift::Bool isNetworkConnectionRetryableAfter = NSError.sn_isNetworkConnectionRetryableAfterDelay()();

  return isNetworkConnectionRetryableAfter;
}

Swift::Bool __swiftcall NSError.sn_isNetworkOperationRetryable()()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWError?);
  uint64_t v3 = OUTLINED_FUNCTION_19_1(v2);
  MEMORY[0x270FA5388](v3);
  uint64_t v4 = OUTLINED_FUNCTION_24_1();
  OUTLINED_FUNCTION_0_0();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_2();
  unsigned int v8 = objc_msgSend((id)isNetworkOperation, sel_sn_isNetworkConnectionRetryable);
  if (v8)
  {
    *(void *)&long long v25 = isNetworkOperation;
    type metadata accessor for NSError();
    id v9 = (id)isNetworkOperation;
    if (OUTLINED_FUNCTION_29_1())
    {
      OUTLINED_FUNCTION_31_0();
      OUTLINED_FUNCTION_20_1();
      v10();
      uint64_t isNetworkOperation = NWError.sn_isNetworkOperationRetryable()();
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v1, v4);
      LOBYTE(v8) = 0;
      if ((isNetworkOperation & 1) == 0) {
        return v8;
      }
    }
    else
    {
      OUTLINED_FUNCTION_30_1();
      outlined destroy of RPCOspreyConnectionProtocol?(isNetworkOperation, &demangling cache variable for type metadata for NWError?);
    }
    id v11 = OUTLINED_FUNCTION_10_2();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_13_1();
    if (v4 != static String._unconditionallyBridgeFromObjectiveC(_:)() || isNetworkOperation != v12)
    {
      OUTLINED_FUNCTION_1_9();
      OUTLINED_FUNCTION_6_3();
      swift_bridgeObjectRelease();
      if (v4) {
        goto LABEL_18;
      }
      id v14 = OUTLINED_FUNCTION_10_2();
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      OUTLINED_FUNCTION_13_1();
      if (v4 != static String._unconditionallyBridgeFromObjectiveC(_:)() || isNetworkOperation != v15)
      {
        OUTLINED_FUNCTION_1_9();
        OUTLINED_FUNCTION_6_3();
        swift_bridgeObjectRelease();
        if ((v4 & 1) == 0) {
          goto LABEL_20;
        }
        goto LABEL_18;
      }
    }
    OUTLINED_FUNCTION_15_1();
LABEL_18:
    id v17 = objc_msgSend(v9, sel_code);
    if (v17 == (id)(int)POSIXErrorCode.rawValue.getter())
    {
LABEL_19:
      LOBYTE(v8) = 0;
      return v8;
    }
LABEL_20:
    id v18 = objc_msgSend(v9, sel_userInfo);
    uint64_t v19 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    specialized Dictionary.subscript.getter(v20, v21, v19, &v25);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v26)
    {
      outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)&v25, (uint64_t *)&demangling cache variable for type metadata for Any?);
LABEL_25:
      LOBYTE(v8) = 1;
      return v8;
    }
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_25;
    }
    unsigned __int8 v22 = objc_msgSend(v24, sel_sn_isNetworkOperationRetryable);

    if (v22) {
      goto LABEL_25;
    }
    goto LABEL_19;
  }
  return v8;
}

BOOL @objc NSError.sn_isNetworkOperationRetryable()(void *a1)
{
  id v1 = a1;
  Swift::Bool isNetworkOperation = NSError.sn_isNetworkOperationRetryable()();

  return isNetworkOperation;
}

uint64_t OUTLINED_FUNCTION_1_9()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_2_6()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_3_5()
{
  __swift_storeEnumTagSinglePayload(v2, 0, 1, v0);
  return v1;
}

uint64_t OUTLINED_FUNCTION_4_5()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_5_4()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_6_3()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_9_2()
{
  return type metadata accessor for NWError();
}

id OUTLINED_FUNCTION_10_2()
{
  return [v0 (SEL)(v1 + 2968)];
}

uint64_t OUTLINED_FUNCTION_11_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_12_1()
{
  return v0;
}

void OUTLINED_FUNCTION_13_1()
{
}

uint64_t OUTLINED_FUNCTION_14_1()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_15_1()
{
  return swift_bridgeObjectRelease_n();
}

unint64_t OUTLINED_FUNCTION_16_1()
{
  *(void *)(v1 - 96) = v0;
  return type metadata accessor for NSError();
}

double OUTLINED_FUNCTION_17_1(uint64_t a1, uint64_t a2)
{
  return specialized Dictionary.subscript.getter(a1, a2, v2, (_OWORD *)(v3 - 96));
}

uint64_t OUTLINED_FUNCTION_18_1()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_19_1(uint64_t a1)
{
  return a1 - 8;
}

uint64_t OUTLINED_FUNCTION_21_1()
{
  return __swift_storeEnumTagSinglePayload(v1, 1, 1, v0);
}

void OUTLINED_FUNCTION_22_1()
{
}

uint64_t OUTLINED_FUNCTION_23_1()
{
  return type metadata accessor for NWError();
}

uint64_t OUTLINED_FUNCTION_24_1()
{
  return type metadata accessor for NWError();
}

uint64_t OUTLINED_FUNCTION_25_1()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

id OUTLINED_FUNCTION_28_1()
{
  return [v0 (SEL)(v1 + 3119)];
}

uint64_t OUTLINED_FUNCTION_29_1()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_30_1()
{
  return __swift_storeEnumTagSinglePayload(v0, 1, 1, v1);
}

uint64_t OUTLINED_FUNCTION_31_0()
{
  return __swift_storeEnumTagSinglePayload(v0, 0, 1, v1);
}

uint64_t OUTLINED_FUNCTION_32_1()
{
  return swift_bridgeObjectRelease_n();
}

id OUTLINED_FUNCTION_33_1()
{
  return [v0 (SEL)(v1 + 2968)];
}

uint64_t OUTLINED_FUNCTION_34_1(uint64_t a1, uint64_t a2)
{
  return __swift_storeEnumTagSinglePayload(a1, a2, 1, v2);
}

id SNSetRestrictionsThunk.init(thunk:)(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    v5[4] = a1;
    v5[5] = a2;
    v5[0] = MEMORY[0x263EF8330];
    v5[1] = 1107296256;
    v5[2] = thunk for @escaping @callee_guaranteed (@guaranteed AceObject?) -> ();
    _OWORD v5[3] = &block_descriptor_4;
    uint64_t v2 = _Block_copy(v5);
    swift_release();
  }
  else
  {
    uint64_t v2 = 0;
  }
  id v3 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithThunk_, v2);
  _Block_release(v2);
  return v3;
}

void thunk for @escaping @callee_guaranteed (@guaranteed AceObject?) -> ()(uint64_t a1, void *a2)
{
  id v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3(a2);
  swift_release();
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

char *SNSetRestrictionsThunk.init(thunk:)(uint64_t a1, uint64_t a2)
{
  OUTLINED_FUNCTION_1_7(OBJC_IVAR___SNSetRestrictionsThunk_thunk);
  v9.receiver = v2;
  v9.super_class = (Class)SNSetRestrictionsThunk;
  uint64_t v5 = (char *)objc_msgSendSuper2(&v9, sel_init);
  uint64_t v6 = &v5[OBJC_IVAR___SNSetRestrictionsThunk_thunk];
  uint64_t v7 = *(void *)&v5[OBJC_IVAR___SNSetRestrictionsThunk_thunk];
  *(void *)uint64_t v6 = a1;
  *((void *)v6 + 1) = a2;
  outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?(v7);
  return v5;
}

void __swiftcall SNSetRestrictionsThunk.init(coder:)(SNSetRestrictionsThunk_optional *__return_ptr retstr, NSCoder coder)
{
}

id SNSetRestrictionsThunk.init(coder:)(void *a1)
{
  OUTLINED_FUNCTION_1_7(OBJC_IVAR___SNSetRestrictionsThunk_thunk);
  v5.receiver = v1;
  v5.super_class = (Class)SNSetRestrictionsThunk;
  id v3 = objc_msgSendSuper2(&v5, sel_initWithCoder_, a1);

  return v3;
}

id SNSetRestrictionsThunk.init(dictionary:context:)(uint64_t a1, uint64_t a2)
{
  id v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v5 = objc_msgSend(v3, sel_initWithDictionary_context_, isa, a2);

  swift_unknownObjectRelease();
  return v5;
}

void SNSetRestrictionsThunk.init(dictionary:context:)(uint64_t a1, uint64_t a2)
{
  OUTLINED_FUNCTION_1_7(OBJC_IVAR___SNSetRestrictionsThunk_thunk);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v6.receiver = v2;
  v6.super_class = (Class)SNSetRestrictionsThunk;
  id v5 = objc_msgSendSuper2(&v6, sel_initWithDictionary_context_, isa, a2);

  if (v5) {
    swift_unknownObjectRelease();
  }
  else {
    __break(1u);
  }
}

void __swiftcall SNSetRestrictionsThunk.init(dictionary:)(SNSetRestrictionsThunk *__return_ptr retstr, Swift::OpaquePointer dictionary)
{
  id v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_initWithDictionary_, isa);
}

void SNSetRestrictionsThunk.init(dictionary:)()
{
  OUTLINED_FUNCTION_1_7(OBJC_IVAR___SNSetRestrictionsThunk_thunk);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v3.receiver = v0;
  v3.super_class = (Class)SNSetRestrictionsThunk;
  id v2 = objc_msgSendSuper2(&v3, sel_initWithDictionary_, isa);

  if (!v2) {
    __break(1u);
  }
}

Swift::Void __swiftcall SNSetRestrictionsThunk.siriNetwork_invokeThunk()()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR___SNSetRestrictionsThunk_thunk);
  id v2 = *(void (**)())(v0 + OBJC_IVAR___SNSetRestrictionsThunk_thunk);
  if (v2)
  {
    swift_retain();
    v2();
    outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?((uint64_t)v2);
    uint64_t v3 = *v1;
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t *v1 = 0;
  v1[1] = 0;

  outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?(v3);
}

void __swiftcall SNSetRestrictionsThunk.init()(SNSetRestrictionsThunk *__return_ptr retstr)
{
  id v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());

  objc_msgSend(v1, sel_init);
}

void SNSetRestrictionsThunk.init()()
{
}

unint64_t type metadata accessor for SNSetRestrictionsThunk()
{
  unint64_t result = lazy cache variable for type metadata for SNSetRestrictionsThunk;
  if (!lazy cache variable for type metadata for SNSetRestrictionsThunk)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SNSetRestrictionsThunk);
  }
  return result;
}

uint64_t sub_25D6F27E4()
{
  _Block_release(*(const void **)(v0 + 16));

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t specialized ConnectionProviderProtocol.connectionAnalysisInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v4 - 8);
  objc_super v6 = (char *)&v22[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  memcpy(v29, (const void *)(v1 + 1536), 0x204uLL);
  ConnectionConfiguration.resolvedURL.getter();
  specialized ConnectionProviderProtocol.primaryInterface.getter(v7);
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)&v28, (uint64_t)v30, (uint64_t *)&demangling cache variable for type metadata for ConnectionInterfaceReport?);
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v30, (uint64_t)v29, (uint64_t *)&demangling cache variable for type metadata for ConnectionInterfaceReport?);
  uint64_t v8 = _s11SiriNetwork25ConnectionInterfaceReportVSgWOg((uint64_t)v29);
  int v9 = v8;
  if (v8 == 1)
  {
    int v10 = 0;
  }
  else
  {
    uint64_t v8 = outlined release of ConnectionInterfaceReport?(v30);
    int v10 = v29[9];
  }
  specialized ConnectionProviderProtocol.primaryInterface.getter(v8);
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v24, (uint64_t)v25, (uint64_t *)&demangling cache variable for type metadata for ConnectionInterfaceReport?);
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v25, (uint64_t)v26, (uint64_t *)&demangling cache variable for type metadata for ConnectionInterfaceReport?);
  uint64_t v11 = _s11SiriNetwork25ConnectionInterfaceReportVSgWOg((uint64_t)v26);
  if (v11 == 1
    || (outlined retain of ConnectionTCPInfoMetrics?((uint64_t)v27),
        outlined release of ConnectionInterfaceReport?(v25),
        _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v27, (uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for ConnectionTCPInfoMetrics?), uint64_t v11 = _s11SiriNetwork24ConnectionTCPInfoMetricsVSgWOg((uint64_t)v22), v11 == 1)|| (uint64_t v11 = outlined retain of ConnectionTCPInfoMetrics?((uint64_t)v27), (v23 & 1) != 0))
  {
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t v12 = v22[27];
  }
  char v13 = *(unsigned char *)(v1 + 1632);
  specialized ConnectionProviderProtocol.connectionType.getter(v11, v24);
  char v14 = v24[0];
  if (*(void *)(v1 + 1928))
  {
    uint64_t v15 = *(void *)(v1 + 1864);
    uint64_t v16 = *(void *)(v2 + 1856);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v16 = 0;
    uint64_t v15 = 0;
  }
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v6, a1, (uint64_t *)&demangling cache variable for type metadata for URL?);
  id v17 = (int *)type metadata accessor for ConnectionAnalysisInfo();
  uint64_t v18 = a1 + v17[5];
  *(_DWORD *)uint64_t v18 = v10;
  *(unsigned char *)(v18 + 4) = v9 == 1;
  *(void *)(a1 + v17[6]) = v12;
  *(unsigned char *)(a1 + v17[7]) = v13;
  *(unsigned char *)(a1 + v17[8]) = v14;
  uint64_t v19 = (void *)(a1 + v17[9]);
  void *v19 = v16;
  v19[1] = v15;
  return __swift_storeEnumTagSinglePayload(a1, 0, 1, (uint64_t)v17);
}

uint64_t specialized ConnectionProviderProtocol.primaryInterface.getter(uint64_t a1)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v3 = v2;
  uint64_t v4 = (const void *)(v1 + 56);
  swift_beginAccess();
  memcpy(v15, v4, 0x599uLL);
  memcpy(__dst, v4, 0x599uLL);
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)&v15[568], (uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v16) == 1)
  {
    _s11SiriNetwork25ConnectionInterfaceReportVSgWOi0_(__src);
    uint64_t v5 = (__n128 *)__src;
  }
  else
  {
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)&__dst[952], (uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for ConnectionInterfaceReport?);
    memcpy(__src, __dst, 0x599uLL);
    outlined retain of ConnectionMetrics((uint64_t)v15);
    outlined release of ConnectionInterfaceReport?(v11);
    outlined release of ConnectionMetrics((uint64_t)__src);
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v11, (uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for ConnectionInterfaceReport?);
    if (_s11SiriNetwork25ConnectionInterfaceReportVSgWOg((uint64_t)v10) != 1)
    {
      objc_super v6 = v11;
      goto LABEL_9;
    }
    uint64_t v5 = v11;
  }
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v5, (uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for ConnectionInterfaceReport?);
  memcpy(__dst, v4, 0x599uLL);
  memcpy(__src, v4, 0x599uLL);
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)&__dst[96], (uint64_t)v11, &demangling cache variable for type metadata for ConnectionPreparationReport?);
  if (_s11SiriNetwork27ConnectionPreparationReportVSgWOg((uint64_t)v11) == 1)
  {
    outlined release of ConnectionInterfaceReport?(v14);
    _s11SiriNetwork25ConnectionInterfaceReportVSgWOi0_(v10);
    objc_super v6 = (__n128 *)v10;
LABEL_9:
    uint64_t v7 = v3;
    return _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v6, v7, (uint64_t *)&demangling cache variable for type metadata for ConnectionInterfaceReport?);
  }
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)&__src[136], (uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for ConnectionInterfaceReport?);
  memcpy(v10, __src, 0x599uLL);
  outlined retain of ConnectionMetrics((uint64_t)__dst);
  outlined release of ConnectionInterfaceReport?(v9);
  outlined release of ConnectionMetrics((uint64_t)v10);
  outlined release of ConnectionInterfaceReport?(v14);
  objc_super v6 = v9;
  uint64_t v7 = v3;
  return _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v6, v7, (uint64_t *)&demangling cache variable for type metadata for ConnectionInterfaceReport?);
}

uint64_t specialized ConnectionProviderProtocol.connectionType.getter@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  if (*(unsigned char *)(v2 + 2100))
  {
    char v4 = 17;
  }
  else
  {
    specialized ConnectionProviderProtocol.primaryInterface.getter(result);
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v5, (uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for ConnectionInterfaceReport?);
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v6, (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for ConnectionInterfaceReport?);
    unint64_t result = _s11SiriNetwork25ConnectionInterfaceReportVSgWOg((uint64_t)v7);
    if (result == 1)
    {
      char v4 = 0;
    }
    else
    {
      unint64_t result = outlined release of ConnectionInterfaceReport?(v6);
      char v4 = v7[32];
    }
  }
  *a2 = v4;
  return result;
}

void specialized ConnectionProviderProtocol.openTimeoutTimerInterval.getter(uint64_t *a1@<X8>)
{
  double v2 = 15.0;
  if ((*(unsigned char *)(v1 + 1832) & 1) == 0) {
    double v2 = *(double *)(v1 + 1824);
  }
  Double.dispatchTimeInterval.getter(a1, v2);
}

{
  uint64_t v1;
  double v2;

  double v2 = 15.0;
  if ((*(unsigned char *)(v1 + 1816) & 1) == 0) {
    double v2 = *(double *)(v1 + 1808);
  }
  Double.dispatchTimeInterval.getter(a1, v2);
}

void specialized ConnectionProviderProtocol.openSlowTimerInterval.getter(uint64_t *a1@<X8>)
{
  double v2 = 6.0;
  if ((*(unsigned char *)(v1 + 1848) & 1) == 0) {
    double v2 = *(double *)(v1 + 1840);
  }
  Double.dispatchTimeInterval.getter(a1, v2);
}

{
  uint64_t v1;
  double v2;

  double v2 = 6.0;
  if ((*(unsigned char *)(v1 + 1832) & 1) == 0) {
    double v2 = *(double *)(v1 + 1824);
  }
  Double.dispatchTimeInterval.getter(a1, v2);
}

uint64_t specialized ConnectionProviderProtocol.openCompletionSetup(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = OUTLINED_FUNCTION_23_2();
  swift_weakInit();
  objc_super v6 = (void *)swift_allocObject();
  v6[2] = v5;
  v6[3] = a1;
  v6[4] = a2;
  uint64_t v7 = *(void *)(v2 + 2080);
  *(void *)(v2 + 2080) = partial apply for specialized closure #1 in ConnectionProviderProtocol.openCompletionSetup(completion:);
  *(void *)(v2 + 2088) = v6;
  swift_retain();

  return outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?(v7);
}

{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t vars8;

  uint64_t v5 = swift_allocObject();
  swift_weakInit();
  objc_super v6 = (void *)swift_allocObject();
  v6[2] = v5;
  v6[3] = a1;
  v6[4] = a2;
  uint64_t v7 = *(void *)(v2 + 2064);
  *(void *)(v2 + 2064) = partial apply for specialized closure #1 in ConnectionProviderProtocol.openCompletionSetup(completion:);
  *(void *)(v2 + 2072) = v6;
  swift_retain();

  return outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?(v7);
}

uint64_t specialized closure #1 in ConnectionProviderProtocol.openCompletionSetup(completion:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *))
{
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(a1, (uint64_t)v62, &demangling cache variable for type metadata for Result<(), NetworkConnectionError>);
  uint64_t v53 = v62[1];
  uint64_t v54 = (void *)v62[0];
  unint64_t v4 = v62[3];
  uint64_t v52 = v62[2];
  uint64_t v5 = (void *)v62[4];
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v7 = result;
    specialized ConnectionProviderProtocol.cancelOpenTimer()();
    specialized ConnectionProviderProtocol.cancelOpenSlowTimer()();
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(a1, (uint64_t)v63, &demangling cache variable for type metadata for Result<(), NetworkConnectionError>);
    if (v64)
    {
      uint64_t v8 = v63[0];
      uint64_t v9 = v63[1];
      uint64_t v10 = v63[2];
      uint64_t v11 = v63[3];
      uint64_t v12 = v63[4];
      lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
      uint64_t v13 = swift_allocError();
      uint64_t v48 = v9;
      uint64_t v49 = v8;
      *char v14 = v8;
      v14[1] = v9;
      v14[2] = v10;
      v14[3] = v11;
      v14[4] = v12;
      uint64_t v15 = *(void **)(v7 + 1536);
      *(void *)(v7 + 1536) = v13;
      LOBYTE(v9) = *(unsigned char *)(v7 + 1544);
      *(unsigned char *)(v7 + 1544) = 1;
      outlined retain of Result<(), NetworkConnectionError>(a1, (void (*)(void, void, void, void, void, void))outlined copy of Result<(), NetworkConnectionError>);
      uint64_t v50 = v5;
      outlined copy of NetworkConnectionError(v54, v53, v52, v4, v5);
      outlined consume of ConnectionProviderState(v15, v9);
      if (one-time initialization token for siriNetwork != -1) {
        swift_once();
      }
      uint64_t v45 = v12;
      uint64_t v46 = v11;
      uint64_t v47 = v10;
      uint64_t v16 = type metadata accessor for Logger();
      __swift_project_value_buffer(v16, (uint64_t)static Logger.siriNetwork);
      swift_retain_n();
      outlined retain of Result<(), NetworkConnectionError>(a1, (void (*)(void, void, void, void, void, void))outlined copy of Result<(), NetworkConnectionError>);
      swift_retain();
      outlined retain of Result<(), NetworkConnectionError>(a1, (void (*)(void, void, void, void, void, void))outlined copy of Result<(), NetworkConnectionError>);
      id v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v17, v18))
      {
        os_log_type_t type = v18;
        uint64_t v19 = swift_slowAlloc();
        uint64_t v44 = swift_slowAlloc();
        uint64_t v55 = v44;
        *(_DWORD *)uint64_t v19 = 136315650;
        uint64_t v20 = _typeName(_:qualified:)();
        uint64_t v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v55);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v19 + 12) = 2080;
        uint64_t v22 = *(void *)(v7 + 16);
        unint64_t v23 = *(void *)(v7 + 24);
        swift_bridgeObjectRetain();
        uint64_t v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v55);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v19 + 22) = 2080;
        uint64_t v24 = v48;
        uint64_t v56 = v49;
        uint64_t v57 = v48;
        uint64_t v26 = v11;
        uint64_t v25 = v47;
        uint64_t v58 = v47;
        uint64_t v59 = v46;
        uint64_t v27 = v45;
        uint64_t v60 = v45;
        outlined copy of NetworkConnectionError(v54, v53, v52, v4, v50);
        uint64_t v28 = String.init<A>(describing:)();
        uint64_t v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, &v55);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined retain of Result<(), NetworkConnectionError>(a1, (void (*)(void, void, void, void, void, void))outlined consume of Result<(), NetworkConnectionError>);
        outlined retain of Result<(), NetworkConnectionError>(a1, (void (*)(void, void, void, void, void, void))outlined consume of Result<(), NetworkConnectionError>);
        _os_log_impl(&dword_25D6CC000, v17, type, "Provider - %s [%s]: Open Completion error. %s", (uint8_t *)v19, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x2611B3750](v44, -1, -1);
        MEMORY[0x2611B3750](v19, -1, -1);

        uint64_t v31 = v49;
        uint64_t v30 = v50;
      }
      else
      {
        swift_release_n();
        outlined retain of Result<(), NetworkConnectionError>(a1, (void (*)(void, void, void, void, void, void))outlined consume of Result<(), NetworkConnectionError>);
        outlined retain of Result<(), NetworkConnectionError>(a1, (void (*)(void, void, void, void, void, void))outlined consume of Result<(), NetworkConnectionError>);

        uint64_t v31 = v49;
        uint64_t v30 = v5;
        uint64_t v25 = v10;
        uint64_t v24 = v48;
        uint64_t v27 = v12;
        uint64_t v26 = v46;
      }
      uint64_t v56 = v31;
      uint64_t v57 = v24;
      uint64_t v58 = v25;
      uint64_t v59 = v26;
      uint64_t v60 = v27;
      char v61 = 1;
      outlined copy of NetworkConnectionError(v54, v53, v52, v4, v30);
      a3(&v56);
      swift_release();
      outlined retain of Result<(), NetworkConnectionError>(a1, (void (*)(void, void, void, void, void, void))outlined consume of Result<(), NetworkConnectionError>);
      return outlined retain of Result<(), NetworkConnectionError>(a1, (void (*)(void, void, void, void, void, void))outlined consume of Result<(), NetworkConnectionError>);
    }
    else
    {
      uint64_t v32 = *(void **)(v7 + 1536);
      *(void *)(v7 + 1536) = 2;
      unsigned __int8 v33 = *(unsigned char *)(v7 + 1544);
      *(unsigned char *)(v7 + 1544) = 2;
      outlined consume of ConnectionProviderState(v32, v33);
      if (one-time initialization token for siriNetwork != -1) {
        swift_once();
      }
      uint64_t v34 = type metadata accessor for Logger();
      __swift_project_value_buffer(v34, (uint64_t)static Logger.siriNetwork);
      swift_retain_n();
      id v35 = Logger.logObject.getter();
      os_log_type_t v36 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v35, v36))
      {
        uint64_t v37 = swift_slowAlloc();
        uint64_t v38 = swift_slowAlloc();
        uint64_t v56 = v38;
        *(_DWORD *)uint64_t v37 = 136315394;
        uint64_t v39 = _typeName(_:qualified:)();
        uint64_t v55 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v40, &v56);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v37 + 12) = 2080;
        uint64_t v41 = *(void *)(v7 + 16);
        unint64_t v42 = *(void *)(v7 + 24);
        swift_bridgeObjectRetain();
        uint64_t v55 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, &v56);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_25D6CC000, v35, v36, "Provider - %s [%s]: Connection ready.", (uint8_t *)v37, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x2611B3750](v38, -1, -1);
        MEMORY[0x2611B3750](v37, -1, -1);
      }
      else
      {

        swift_release_n();
      }
      _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(a1, (uint64_t)&v56, &demangling cache variable for type metadata for Result<(), NetworkConnectionError>);
      a3(&v56);
      return swift_release();
    }
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  unsigned __int8 v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  NSObject *log;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  void v67[6];
  void v68[5];
  char v69;

  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(a1, (uint64_t)v67, &demangling cache variable for type metadata for Result<(), NetworkConnectionError>);
  unint64_t v4 = v67[1];
  uint64_t v59 = (void *)v67[0];
  uint64_t v5 = v67[2];
  objc_super v6 = v67[3];
  uint64_t v7 = (void *)v67[4];
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v9 = result;
    specialized ConnectionProviderProtocol.cancelOpenTimer()();
    specialized ConnectionProviderProtocol.cancelOpenSlowTimer()();
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(a1, (uint64_t)v68, &demangling cache variable for type metadata for Result<(), NetworkConnectionError>);
    if (v69)
    {
      uint64_t v10 = v68[0];
      uint64_t v11 = v68[1];
      uint64_t v57 = v4;
      uint64_t v12 = a1;
      char v14 = v68[2];
      uint64_t v13 = v68[3];
      uint64_t v15 = v68[4];
      lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
      uint64_t v16 = swift_allocError();
      uint64_t v53 = v11;
      uint64_t v54 = v10;
      *id v17 = v10;
      v17[1] = v11;
      uint64_t v52 = v14;
      v17[2] = v14;
      os_log_type_t v18 = v13;
      uint64_t v19 = v12;
      v17[3] = v18;
      v17[4] = v15;
      uint64_t v20 = *(void **)(v9 + 1520);
      *(void *)(v9 + 1520) = v16;
      LOBYTE(v11) = *(unsigned char *)(v9 + 1528);
      *(unsigned char *)(v9 + 1528) = 1;
      outlined retain of Result<(), NetworkConnectionError>(v12, (void (*)(void, void, void, void, void, void))outlined copy of Result<(), NetworkConnectionError>);
      uint64_t v56 = v5;
      uint64_t v55 = v7;
      outlined copy of NetworkConnectionError(v59, v57, v5, v6, v7);
      outlined consume of ConnectionProviderState(v20, v11);
      if (one-time initialization token for siriNetwork != -1) {
        swift_once();
      }
      unint64_t v21 = type metadata accessor for Logger();
      __swift_project_value_buffer(v21, (uint64_t)static Logger.siriNetwork);
      swift_retain_n();
      outlined retain of Result<(), NetworkConnectionError>(v12, (void (*)(void, void, void, void, void, void))outlined copy of Result<(), NetworkConnectionError>);
      swift_retain();
      outlined retain of Result<(), NetworkConnectionError>(v12, (void (*)(void, void, void, void, void, void))outlined copy of Result<(), NetworkConnectionError>);
      uint64_t v22 = Logger.logObject.getter();
      unint64_t v23 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v22, v23))
      {
        uint64_t v51 = v18;
        uint64_t v24 = swift_slowAlloc();
        uint64_t v50 = swift_slowAlloc();
        uint64_t v60 = v50;
        *(_DWORD *)uint64_t v24 = 136315650;
        uint64_t v25 = _typeName(_:qualified:)();
        char v61 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v60);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v24 + 12) = 2080;
        uint64_t v27 = NetworkConnectionProvider.connectionIdentifier.getter();
        char v61 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v60);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v24 + 22) = 2080;
        uint64_t v30 = v53;
        unint64_t v29 = v54;
        char v61 = v54;
        Swift::String v62 = v53;
        uint64_t v31 = v52;
        Swift::String v63 = v52;
        char v64 = v51;
        uint64_t v65 = v15;
        log = v22;
        uint64_t v32 = v55;
        outlined copy of NetworkConnectionError(v59, v57, v56, v6, v55);
        unsigned __int8 v33 = String.init<A>(describing:)();
        char v61 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, &v60);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined retain of Result<(), NetworkConnectionError>(v19, (void (*)(void, void, void, void, void, void))outlined consume of Result<(), NetworkConnectionError>);
        outlined retain of Result<(), NetworkConnectionError>(v19, (void (*)(void, void, void, void, void, void))outlined consume of Result<(), NetworkConnectionError>);
        _os_log_impl(&dword_25D6CC000, log, v23, "Provider - %s [%s]: Open Completion error. %s", (uint8_t *)v24, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x2611B3750](v50, -1, -1);
        id v35 = v24;
        os_log_type_t v18 = v51;
        MEMORY[0x2611B3750](v35, -1, -1);

        uint64_t v37 = v56;
        os_log_type_t v36 = v57;
      }
      else
      {
        swift_release_n();
        outlined retain of Result<(), NetworkConnectionError>(v12, (void (*)(void, void, void, void, void, void))outlined consume of Result<(), NetworkConnectionError>);
        outlined retain of Result<(), NetworkConnectionError>(v12, (void (*)(void, void, void, void, void, void))outlined consume of Result<(), NetworkConnectionError>);

        uint64_t v37 = v5;
        os_log_type_t v36 = v57;
        uint64_t v32 = v7;
        uint64_t v30 = v53;
        unint64_t v29 = v54;
        uint64_t v31 = v52;
      }
      char v61 = v29;
      Swift::String v62 = v30;
      Swift::String v63 = v31;
      char v64 = v18;
      uint64_t v65 = v15;
      Swift::String v66 = 1;
      outlined copy of NetworkConnectionError(v59, v36, v37, v6, v32);
      a3(&v61);
      swift_release();
      outlined retain of Result<(), NetworkConnectionError>(v19, (void (*)(void, void, void, void, void, void))outlined consume of Result<(), NetworkConnectionError>);
      return outlined retain of Result<(), NetworkConnectionError>(v19, (void (*)(void, void, void, void, void, void))outlined consume of Result<(), NetworkConnectionError>);
    }
    else
    {
      uint64_t v38 = *(void **)(v9 + 1520);
      *(void *)(v9 + 1520) = 2;
      uint64_t v39 = *(unsigned char *)(v9 + 1528);
      *(unsigned char *)(v9 + 1528) = 2;
      outlined consume of ConnectionProviderState(v38, v39);
      if (one-time initialization token for siriNetwork != -1) {
        swift_once();
      }
      unint64_t v40 = type metadata accessor for Logger();
      __swift_project_value_buffer(v40, (uint64_t)static Logger.siriNetwork);
      swift_retain_n();
      uint64_t v41 = Logger.logObject.getter();
      unint64_t v42 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v41, v42))
      {
        uint64_t v43 = swift_slowAlloc();
        uint64_t v44 = swift_slowAlloc();
        char v61 = v44;
        *(_DWORD *)uint64_t v43 = 136315394;
        uint64_t v45 = _typeName(_:qualified:)();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v46, &v61);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v43 + 12) = 2080;
        uint64_t v47 = NetworkConnectionProvider.connectionIdentifier.getter();
        uint64_t v60 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v48, &v61);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_25D6CC000, v41, v42, "Provider - %s [%s]: Connection ready.", (uint8_t *)v43, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x2611B3750](v44, -1, -1);
        MEMORY[0x2611B3750](v43, -1, -1);
      }
      else
      {

        swift_release_n();
      }
      _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(a1, (uint64_t)&v61, &demangling cache variable for type metadata for Result<(), NetworkConnectionError>);
      a3(&v61);
      return swift_release();
    }
  }
  return result;
}

{
  unsigned char v6[48];

  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(a1, (uint64_t)v6, &demangling cache variable for type metadata for Result<(), NetworkConnectionError>);
  return specialized closure #1 in ConnectionProviderProtocol.openCompletionSetup(completion:)((uint64_t)v6, a2, a3);
}

{
  unsigned char v6[48];

  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(a1, (uint64_t)v6, &demangling cache variable for type metadata for Result<(), NetworkConnectionError>);
  return specialized closure #1 in ConnectionProviderProtocol.openCompletionSetup(completion:)((uint64_t)v6, a2, a3);
}

void specialized ConnectionProviderProtocol.cancelOpenTimer()()
{
  if (*(void *)(v0 + 2112))
  {
    uint64_t v1 = v0;
    uint64_t v2 = one-time initialization token for siriNetwork;
    swift_unknownObjectRetain();
    if (v2 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.siriNetwork);
    swift_retain_n();
    unint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = swift_slowAlloc();
      uint64_t v7 = swift_slowAlloc();
      uint64_t v12 = v7;
      *(_DWORD *)uint64_t v6 = 136315394;
      uint64_t v8 = _typeName(_:qualified:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v6 + 12) = 2080;
      uint64_t v10 = NetworkConnectionProvider.connectionIdentifier.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_25D6CC000, v4, v5, "Provider - %s [%s]: Open timer cancelled.", (uint8_t *)v6, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x2611B3750](v7, -1, -1);
      MEMORY[0x2611B3750](v6, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    *(void *)(v1 + 2112) = 0;
    swift_unknownObjectRelease();
    swift_getObjectType();
    OS_dispatch_source.cancel()();
    swift_unknownObjectRelease();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  os_log_type_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_47();
  if (*(void *)(v0 + 2128))
  {
    uint64_t v1 = v0;
    uint64_t v2 = one-time initialization token for siriNetwork;
    swift_unknownObjectRetain();
    if (v2 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    OUTLINED_FUNCTION_46(v3, (uint64_t)static Logger.siriNetwork);
    unint64_t v4 = (void *)Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (OUTLINED_FUNCTION_24_0(v5))
    {
      OUTLINED_FUNCTION_69();
      OUTLINED_FUNCTION_40();
      OUTLINED_FUNCTION_118();
      OUTLINED_FUNCTION_2_7(4.8151e-34);
      uint64_t v6 = _typeName(_:qualified:)();
      OUTLINED_FUNCTION_117(v6, v7, v8);
      OUTLINED_FUNCTION_11_1();
      OUTLINED_FUNCTION_48();
      swift_bridgeObjectRelease();
      unint64_t v9 = OUTLINED_FUNCTION_20_2();
      OUTLINED_FUNCTION_57(v9);
      OUTLINED_FUNCTION_16_2();
      OUTLINED_FUNCTION_48();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_35_0(&dword_25D6CC000, v10, v11, "Provider - %s [%s]: Open timer cancelled.");
      OUTLINED_FUNCTION_37_0();
      OUTLINED_FUNCTION_1_2();
      OUTLINED_FUNCTION_1_2();
    }
    else
    {

      OUTLINED_FUNCTION_123();
    }
    *(void *)(v1 + 2128) = 0;
    swift_unknownObjectRelease();
    swift_getObjectType();
    OS_dispatch_source.cancel()();
    swift_unknownObjectRelease();
  }
  OUTLINED_FUNCTION_42();
}

void specialized ConnectionProviderProtocol.cancelOpenSlowTimer()()
{
  if (*(void *)(v0 + 2120))
  {
    uint64_t v1 = v0;
    uint64_t v2 = one-time initialization token for siriNetwork;
    swift_unknownObjectRetain();
    if (v2 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.siriNetwork);
    swift_retain_n();
    unint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = swift_slowAlloc();
      uint64_t v7 = swift_slowAlloc();
      uint64_t v12 = v7;
      *(_DWORD *)uint64_t v6 = 136315394;
      uint64_t v8 = _typeName(_:qualified:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v6 + 12) = 2080;
      uint64_t v10 = NetworkConnectionProvider.connectionIdentifier.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_25D6CC000, v4, v5, "Provider - %s [%s]: Open slow timer cancelled.", (uint8_t *)v6, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x2611B3750](v7, -1, -1);
      MEMORY[0x2611B3750](v6, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    *(void *)(v1 + 2120) = 0;
    swift_unknownObjectRelease();
    swift_getObjectType();
    OS_dispatch_source.cancel()();
    swift_unknownObjectRelease();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  os_log_type_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_47();
  if (*(void *)(v0 + 2136))
  {
    uint64_t v1 = v0;
    uint64_t v2 = one-time initialization token for siriNetwork;
    swift_unknownObjectRetain();
    if (v2 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    OUTLINED_FUNCTION_46(v3, (uint64_t)static Logger.siriNetwork);
    unint64_t v4 = (void *)Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (OUTLINED_FUNCTION_24_0(v5))
    {
      OUTLINED_FUNCTION_69();
      OUTLINED_FUNCTION_40();
      OUTLINED_FUNCTION_118();
      OUTLINED_FUNCTION_2_7(4.8151e-34);
      uint64_t v6 = _typeName(_:qualified:)();
      OUTLINED_FUNCTION_117(v6, v7, v8);
      OUTLINED_FUNCTION_11_1();
      OUTLINED_FUNCTION_48();
      swift_bridgeObjectRelease();
      unint64_t v9 = OUTLINED_FUNCTION_20_2();
      OUTLINED_FUNCTION_57(v9);
      OUTLINED_FUNCTION_16_2();
      OUTLINED_FUNCTION_48();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_35_0(&dword_25D6CC000, v10, v11, "Provider - %s [%s]: Open slow timer cancelled.");
      OUTLINED_FUNCTION_37_0();
      OUTLINED_FUNCTION_1_2();
      OUTLINED_FUNCTION_1_2();
    }
    else
    {

      OUTLINED_FUNCTION_123();
    }
    *(void *)(v1 + 2136) = 0;
    swift_unknownObjectRelease();
    swift_getObjectType();
    OS_dispatch_source.cancel()();
    swift_unknownObjectRelease();
  }
  OUTLINED_FUNCTION_42();
}

void specialized ConnectionProviderProtocol.setupOpenTimeoutTimer()()
{
  OUTLINED_FUNCTION_22();
  unint64_t v4 = v0;
  type metadata accessor for DispatchTime();
  OUTLINED_FUNCTION_0_0();
  uint64_t v95 = v6;
  uint64_t v96 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v94 = (char *)v82 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_13_2();
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_87(v9, v10, v11, v12, v13, v14, v15, v16, v82[0]);
  OUTLINED_FUNCTION_0_0();
  uint64_t v92 = v17;
  uint64_t v93 = v18;
  MEMORY[0x270FA5388](v17);
  uint64_t v91 = OUTLINED_FUNCTION_52(v19, v82[0]);
  OUTLINED_FUNCTION_0_0();
  uint64_t v90 = v20;
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = OUTLINED_FUNCTION_53(v22, v82[0]);
  OUTLINED_FUNCTION_0_0();
  uint64_t v89 = v24;
  MEMORY[0x270FA5388](v25);
  OUTLINED_FUNCTION_19_2(v26, v82[0]);
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for DispatchTimeInterval?);
  uint64_t v28 = OUTLINED_FUNCTION_19_1(v27);
  MEMORY[0x270FA5388](v28);
  OUTLINED_FUNCTION_66();
  uint64_t v30 = MEMORY[0x270FA5388](v29);
  uint64_t v38 = OUTLINED_FUNCTION_68(v30, v31, v32, v33, v34, v35, v36, v37, v82[0]);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v39);
  uint64_t v98 = (uint64_t *)((char *)v82 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0));
  OUTLINED_FUNCTION_13_2();
  MEMORY[0x270FA5388](v41);
  uint64_t v97 = (uint64_t)v82 - v42;
  OUTLINED_FUNCTION_13_2();
  MEMORY[0x270FA5388](v43);
  OUTLINED_FUNCTION_110();
  MEMORY[0x270FA5388](v44);
  OUTLINED_FUNCTION_116();
  specialized ConnectionProviderProtocol.openTimeoutTimerInterval.getter(v45);
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v46 = type metadata accessor for Logger();
  __swift_project_value_buffer(v46, (uint64_t)static Logger.siriNetwork);
  uint64_t v47 = OUTLINED_FUNCTION_39();
  ((void (*)(uint64_t))v3)(v47);
  swift_retain_n();
  uint64_t v48 = Logger.logObject.getter();
  int v49 = static os_log_type_t.default.getter();
  BOOL v50 = os_log_type_enabled(v48, (os_log_type_t)v49);
  unint64_t v99 = v4;
  uint64_t v88 = v38;
  if (v50)
  {
    int v83 = v49;
    uint64_t v84 = v48;
    uint64_t v86 = v23;
    OUTLINED_FUNCTION_10_0();
    uint64_t v51 = OUTLINED_FUNCTION_78();
    OUTLINED_FUNCTION_77(v51);
    OUTLINED_FUNCTION_21_2(4.8152e-34);
    uint64_t v52 = _typeName(_:qualified:)();
    uint64_t v54 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v53, v101);
    OUTLINED_FUNCTION_56(v54);
    OUTLINED_FUNCTION_115();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_85();
    uint64_t v55 = OUTLINED_FUNCTION_74();
    OUTLINED_FUNCTION_54(v55);
    OUTLINED_FUNCTION_115();
    swift_bridgeObjectRelease();
    *(_WORD *)(v1 + 22) = 2080;
    uint64_t v56 = v87;
    OUTLINED_FUNCTION_28_2();
    v3();
    OUTLINED_FUNCTION_88((uint64_t)v56);
    outlined init with copy of NetworkConnectionProtocol?((uint64_t)v56, v2, (uint64_t *)&demangling cache variable for type metadata for DispatchTimeInterval?);
    OUTLINED_FUNCTION_131(v2);
    if (v57)
    {
      unint64_t v4 = 0xE100000000000000;
      uint64_t v2 = 45;
    }
    else
    {
      uint64_t v60 = OUTLINED_FUNCTION_49();
      v61(v60);
      uint64_t v56 = v98;
      OUTLINED_FUNCTION_28_2();
      v3();
      String.init<A>(describing:)();
      uint64_t v62 = OUTLINED_FUNCTION_58();
      v63(v62);
    }
    OUTLINED_FUNCTION_121();
    outlined destroy of NetworkConnectionProtocol?((uint64_t)v87, (uint64_t)&demangling cache variable for type metadata for DispatchTimeInterval?);
    uint64_t v64 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v2, v4, v101);
    OUTLINED_FUNCTION_71(v64);
    swift_bridgeObjectRelease();
    uint64_t v65 = OUTLINED_FUNCTION_26_0();
    v66(v65);
    OUTLINED_FUNCTION_79(&dword_25D6CC000, v67, (os_log_type_t)v83, "Provider - %s [%s]: Open timer scheduled (%s).");
    OUTLINED_FUNCTION_84();
    OUTLINED_FUNCTION_1_2();
    OUTLINED_FUNCTION_1_2();

    unint64_t v4 = v99;
  }
  else
  {
    swift_release_n();
    uint64_t v58 = OUTLINED_FUNCTION_31_1();
    v59(v58);
  }
  Swift::String v68 = (void (*)(uint64_t))type metadata accessor for OS_dispatch_source();
  v101[0] = MEMORY[0x263F8EE78];
  uint64_t v69 = (void *)lazy protocol witness table accessor for type NetworkConnectionProvider and conformance NetworkConnectionProvider((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_source.TimerFlags and conformance OS_dispatch_source.TimerFlags, 255, MEMORY[0x263F8F148]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_source.TimerFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_source.TimerFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_source.TimerFlags]);
  OUTLINED_FUNCTION_34_2();
  id v70 = *(id *)(v4 + 2072);
  OUTLINED_FUNCTION_127();

  OUTLINED_FUNCTION_12_2();
  v71();
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v73 = OUTLINED_FUNCTION_23_2();
  swift_weakInit();
  v101[4] = (uint64_t)partial apply for specialized closure #1 in ConnectionProviderProtocol.setupOpenTimeoutTimer();
  v101[5] = v73;
  v101[0] = MEMORY[0x263EF8330];
  v101[1] = 1107296256;
  v101[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v101[3] = (uint64_t)&block_descriptor_284;
  uint64_t v74 = _Block_copy(v101);
  swift_retain();
  default argument 0 of OS_dispatch_source.setEventHandler(qos:flags:handler:)(ObjectType);
  default argument 1 of OS_dispatch_source.setEventHandler(qos:flags:handler:)();
  OUTLINED_FUNCTION_62();
  _Block_release(v74);
  OUTLINED_FUNCTION_12_2();
  v75();
  OUTLINED_FUNCTION_12_2();
  v76();
  swift_release();
  swift_release();
  static DispatchTime.now()();
  DispatchTime.advanced(by:)();
  uint64_t v77 = *(void (**)(void))(v95 + 8);
  OUTLINED_FUNCTION_50();
  v77();
  uint64_t v78 = v97;
  default argument 1 of OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v97);
  uint64_t v79 = v98;
  default argument 2 of OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v98);
  OUTLINED_FUNCTION_94();
  uint64_t v80 = OUTLINED_FUNCTION_43();
  v68(v80);
  ((void (*)(uint64_t, void *))v68)(v78, v79);
  OUTLINED_FUNCTION_50();
  v77();
  uint64_t v81 = v85;
  OS_dispatch_source.resume()();
  *(void *)(v99 + 2128) = v81;
  swift_unknownObjectRelease();
  ((void (*)(uint64_t, void *))v68)(v100, v79);
  OUTLINED_FUNCTION_29();
}

uint64_t specialized ConnectionProviderProtocol.setupOpenTimeoutTimer()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchTime();
  uint64_t v86 = *(void *)(v2 - 8);
  uint64_t v87 = v2;
  uint64_t v3 = MEMORY[0x270FA5388](v2);
  uint64_t v85 = (char *)&v67 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v84 = (char *)&v67 - v5;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v82 = *(void *)(v6 - 8);
  uint64_t v83 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v80 = (char *)&v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = type metadata accessor for DispatchQoS();
  uint64_t v79 = *(void *)(v81 - 8);
  MEMORY[0x270FA5388](v81);
  uint64_t v78 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for OS_dispatch_source.TimerFlags();
  uint64_t v77 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v76 = (char *)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for DispatchTimeInterval?);
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  uint64_t v74 = (uint64_t)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v75 = (char *)&v67 - v14;
  uint64_t v15 = type metadata accessor for DispatchTimeInterval();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v88 = (char *)&v67 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  uint64_t v21 = (char *)&v67 - v20;
  uint64_t v22 = MEMORY[0x270FA5388](v19);
  uint64_t v24 = (char *)&v67 - v23;
  MEMORY[0x270FA5388](v22);
  uint64_t v26 = (char *)&v67 - v25;
  specialized ConnectionProviderProtocol.openTimeoutTimerInterval.getter((uint64_t *)((char *)&v67 - v25));
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v27 = type metadata accessor for Logger();
  __swift_project_value_buffer(v27, (uint64_t)static Logger.siriNetwork);
  uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
  uint64_t v90 = v26;
  v28(v24, v26, v15);
  swift_retain_n();
  uint64_t v29 = Logger.logObject.getter();
  int v30 = static os_log_type_t.default.getter();
  BOOL v31 = os_log_type_enabled(v29, (os_log_type_t)v30);
  uint64_t v89 = v15;
  if (v31)
  {
    int v69 = v30;
    os_log_t v70 = v29;
    uint64_t v71 = v9;
    uint64_t v72 = v21;
    uint64_t v32 = swift_slowAlloc();
    uint64_t v68 = swift_slowAlloc();
    aBlock[0] = v68;
    *(_DWORD *)uint64_t v32 = 136315650;
    uint64_t v33 = _typeName(_:qualified:)();
    uint64_t v91 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v32 + 12) = 2080;
    uint64_t v35 = NetworkConnectionProvider.connectionIdentifier.getter();
    uint64_t v91 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, aBlock);
    uint64_t v67 = aBlock;
    uint64_t v37 = v89;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v73 = v1;
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v32 + 22) = 2080;
    uint64_t v38 = (uint64_t)v75;
    v28(v75, v24, v37);
    __swift_storeEnumTagSinglePayload(v38, 0, 1, v37);
    uint64_t v39 = v74;
    outlined init with copy of NetworkConnectionProtocol?(v38, v74, (uint64_t *)&demangling cache variable for type metadata for DispatchTimeInterval?);
    if (__swift_getEnumTagSinglePayload(v39, 1, v37) == 1)
    {
      unint64_t v40 = 0xE100000000000000;
      uint64_t v41 = 45;
      uint64_t v42 = v37;
      uint64_t v21 = v72;
    }
    else
    {
      uint64_t v21 = v72;
      (*(void (**)(char *, uint64_t, uint64_t))(v16 + 32))(v72, v39, v37);
      v28(v88, v21, v37);
      uint64_t v41 = String.init<A>(describing:)();
      unint64_t v40 = v44;
      (*(void (**)(char *, uint64_t))(v16 + 8))(v21, v37);
      uint64_t v42 = v37;
    }
    uint64_t v9 = v71;
    outlined destroy of NetworkConnectionProtocol?(v38, (uint64_t)&demangling cache variable for type metadata for DispatchTimeInterval?);
    uint64_t v91 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v40, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v45 = *(char **)(v16 + 8);
    uint64_t v74 = (v16 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v75 = v45;
    ((void (*)(char *, uint64_t))v45)(v24, v42);
    os_log_t v46 = v70;
    _os_log_impl(&dword_25D6CC000, v70, (os_log_type_t)v69, "Provider - %s [%s]: Open timer scheduled (%s).", (uint8_t *)v32, 0x20u);
    uint64_t v47 = v68;
    swift_arrayDestroy();
    MEMORY[0x2611B3750](v47, -1, -1);
    MEMORY[0x2611B3750](v32, -1, -1);

    uint64_t v1 = v73;
  }
  else
  {
    swift_release_n();
    uint64_t v43 = *(char **)(v16 + 8);
    uint64_t v74 = (v16 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v75 = v43;
    ((void (*)(char *, uint64_t))v43)(v24, v15);
  }
  type metadata accessor for OS_dispatch_source();
  aBlock[0] = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type NetworkConnectionProvider and conformance NetworkConnectionProvider((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_source.TimerFlags and conformance OS_dispatch_source.TimerFlags, 255, MEMORY[0x263F8F148]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_source.TimerFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_source.TimerFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_source.TimerFlags]);
  uint64_t v48 = v76;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  id v49 = *(id *)(v1 + 2056);
  uint64_t v50 = static OS_dispatch_source.makeTimerSource(flags:queue:)();

  (*(void (**)(char *, uint64_t))(v77 + 8))(v48, v9);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v52 = swift_allocObject();
  swift_weakInit();
  aBlock[4] = (uint64_t)partial apply for specialized closure #1 in ConnectionProviderProtocol.setupOpenTimeoutTimer();
  aBlock[5] = v52;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_230;
  unint64_t v53 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v54 = v78;
  default argument 0 of OS_dispatch_source.setEventHandler(qos:flags:handler:)(ObjectType);
  uint64_t v55 = v80;
  default argument 1 of OS_dispatch_source.setEventHandler(qos:flags:handler:)();
  uint64_t v73 = v50;
  OS_dispatch_source.setEventHandler(qos:flags:handler:)();
  _Block_release(v53);
  (*(void (**)(char *, uint64_t))(v82 + 8))(v55, v83);
  (*(void (**)(char *, uint64_t))(v79 + 8))(v54, v81);
  swift_release();
  swift_release();
  uint64_t v56 = v85;
  static DispatchTime.now()();
  char v57 = v84;
  DispatchTime.advanced(by:)();
  uint64_t v58 = v87;
  uint64_t v86 = *(void *)(v86 + 8);
  ((void (*)(char *, uint64_t))v86)(v56, v87);
  default argument 1 of OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)((uint64_t)v21);
  uint64_t v59 = v1;
  uint64_t v60 = v21;
  char v61 = v88;
  default argument 2 of OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v88);
  MEMORY[0x2611B2570](v57, v60, v61, ObjectType);
  uint64_t v62 = v61;
  uint64_t v63 = v89;
  uint64_t v64 = (void (*)(char *, uint64_t))v75;
  ((void (*)(char *, uint64_t))v75)(v62, v89);
  v64(v60, v63);
  ((void (*)(char *, uint64_t))v86)(v57, v58);
  uint64_t v65 = v73;
  OS_dispatch_source.resume()();
  *(void *)(v59 + 2112) = v65;
  swift_unknownObjectRelease();
  return ((uint64_t (*)(char *, uint64_t))v64)(v90, v63);
}

void specialized closure #1 in ConnectionProviderProtocol.setupOpenTimeoutTimer()()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    if (one-time initialization token for siriNetwork != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.siriNetwork);
    swift_retain_n();
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = swift_slowAlloc();
      uint64_t v6 = swift_slowAlloc();
      uint64_t v19 = v6;
      *(_DWORD *)uint64_t v5 = 136315394;
      uint64_t v7 = _typeName(_:qualified:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v5 + 12) = 2080;
      uint64_t v9 = v1[2];
      unint64_t v10 = v1[3];
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_25D6CC000, v3, v4, "Provider - %s [%s]: Open timer fired.", (uint8_t *)v5, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x2611B3750](v6, -1, -1);
      MEMORY[0x2611B3750](v5, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    specialized ConnectionProviderProtocol.cancelOpenTimer()();
    uint64_t v11 = (void *)v1[265];
    id v12 = v11;
    if (AFDeviceSupportsSiriUOD() && MEMORY[0x2611B37F0](v1 + 190))
    {
      lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
      uint64_t v13 = (void *)swift_allocError();
      *(void *)(v14 + 8) = 0;
      *(void *)(v14 + 16) = 0;
      *(void *)uint64_t v14 = v11;
      *(_OWORD *)(v14 + 24) = xmmword_25D791740;
      swift_retain();
      id v15 = v11;
      specialized BackgroundConnection.connectionProvider(_:received:)();
      swift_release();

      swift_unknownObjectRelease();
      swift_release();
    }
    else
    {
      lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
      uint64_t v16 = (void *)swift_allocError();
      *(void *)(v17 + 8) = 0;
      *(void *)(v17 + 16) = 0;
      *(void *)uint64_t v17 = v11;
      *(_OWORD *)(v17 + 24) = xmmword_25D791740;
      id v18 = v11;
      RPCOspreyConnectionProvider.closeWithError(_:)(v16);
      swift_release();
    }
  }
}

{
  uint64_t Strong;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;

  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = Strong;
    if (one-time initialization token for siriNetwork != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.siriNetwork);
    swift_retain_n();
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = swift_slowAlloc();
      uint64_t v6 = swift_slowAlloc();
      uint64_t v19 = v6;
      *(_DWORD *)uint64_t v5 = 136315394;
      uint64_t v7 = _typeName(_:qualified:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v5 + 12) = 2080;
      uint64_t v9 = NetworkConnectionProvider.connectionIdentifier.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_25D6CC000, v3, v4, "Provider - %s [%s]: Open timer fired.", (uint8_t *)v5, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x2611B3750](v6, -1, -1);
      MEMORY[0x2611B3750](v5, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    specialized ConnectionProviderProtocol.cancelOpenTimer()();
    uint64_t v11 = *(void **)(v1 + 2104);
    id v12 = v11;
    if (AFDeviceSupportsSiriUOD() && MEMORY[0x2611B37F0](v1 + 1504))
    {
      lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
      uint64_t v13 = (void *)swift_allocError();
      *(void *)(v14 + 8) = 0;
      *(void *)(v14 + 16) = 0;
      *(void *)uint64_t v14 = v11;
      *(_OWORD *)(v14 + 24) = xmmword_25D791740;
      swift_retain();
      id v15 = v11;
      specialized BackgroundConnection.connectionProvider(_:received:)();
      swift_release();

      swift_unknownObjectRelease();
      swift_release();
    }
    else
    {
      lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
      uint64_t v16 = (void *)swift_allocError();
      *(void *)(v17 + 8) = 0;
      *(void *)(v17 + 16) = 0;
      *(void *)uint64_t v17 = v11;
      *(_OWORD *)(v17 + 24) = xmmword_25D791740;
      id v18 = v11;
      NetworkConnectionProvider.closeWithError(_:)();
      swift_release();
    }
  }
}

uint64_t default argument 1 of OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *MEMORY[0x263F8F010];
  uint64_t v3 = type metadata accessor for DispatchTimeInterval();
  os_log_type_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104);

  return v4(a1, v2, v3);
}

void specialized ConnectionProviderProtocol.setupOpenSlowTimer()()
{
  OUTLINED_FUNCTION_22();
  unint64_t v4 = v0;
  type metadata accessor for DispatchTime();
  OUTLINED_FUNCTION_0_0();
  uint64_t v95 = v6;
  uint64_t v96 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v94 = (char *)v82 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_13_2();
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_87(v9, v10, v11, v12, v13, v14, v15, v16, v82[0]);
  OUTLINED_FUNCTION_0_0();
  uint64_t v92 = v17;
  uint64_t v93 = v18;
  MEMORY[0x270FA5388](v17);
  uint64_t v91 = OUTLINED_FUNCTION_52(v19, v82[0]);
  OUTLINED_FUNCTION_0_0();
  uint64_t v90 = v20;
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = OUTLINED_FUNCTION_53(v22, v82[0]);
  OUTLINED_FUNCTION_0_0();
  uint64_t v89 = v24;
  MEMORY[0x270FA5388](v25);
  OUTLINED_FUNCTION_19_2(v26, v82[0]);
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for DispatchTimeInterval?);
  uint64_t v28 = OUTLINED_FUNCTION_19_1(v27);
  MEMORY[0x270FA5388](v28);
  OUTLINED_FUNCTION_66();
  uint64_t v30 = MEMORY[0x270FA5388](v29);
  uint64_t v38 = OUTLINED_FUNCTION_68(v30, v31, v32, v33, v34, v35, v36, v37, v82[0]);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v39);
  uint64_t v98 = (uint64_t *)((char *)v82 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0));
  OUTLINED_FUNCTION_13_2();
  MEMORY[0x270FA5388](v41);
  uint64_t v97 = (uint64_t)v82 - v42;
  OUTLINED_FUNCTION_13_2();
  MEMORY[0x270FA5388](v43);
  OUTLINED_FUNCTION_110();
  MEMORY[0x270FA5388](v44);
  OUTLINED_FUNCTION_116();
  specialized ConnectionProviderProtocol.openSlowTimerInterval.getter(v45);
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v46 = type metadata accessor for Logger();
  __swift_project_value_buffer(v46, (uint64_t)static Logger.siriNetwork);
  uint64_t v47 = OUTLINED_FUNCTION_39();
  ((void (*)(uint64_t))v3)(v47);
  swift_retain_n();
  uint64_t v48 = Logger.logObject.getter();
  int v49 = static os_log_type_t.default.getter();
  BOOL v50 = os_log_type_enabled(v48, (os_log_type_t)v49);
  unint64_t v99 = v4;
  uint64_t v88 = v38;
  if (v50)
  {
    int v83 = v49;
    uint64_t v84 = v48;
    uint64_t v86 = v23;
    OUTLINED_FUNCTION_10_0();
    uint64_t v51 = OUTLINED_FUNCTION_78();
    OUTLINED_FUNCTION_77(v51);
    OUTLINED_FUNCTION_21_2(4.8152e-34);
    uint64_t v52 = _typeName(_:qualified:)();
    uint64_t v54 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v53, v101);
    OUTLINED_FUNCTION_56(v54);
    OUTLINED_FUNCTION_115();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_85();
    uint64_t v55 = OUTLINED_FUNCTION_74();
    OUTLINED_FUNCTION_54(v55);
    OUTLINED_FUNCTION_115();
    swift_bridgeObjectRelease();
    *(_WORD *)(v1 + 22) = 2080;
    uint64_t v56 = v87;
    OUTLINED_FUNCTION_28_2();
    v3();
    OUTLINED_FUNCTION_88((uint64_t)v56);
    outlined init with copy of NetworkConnectionProtocol?((uint64_t)v56, v2, (uint64_t *)&demangling cache variable for type metadata for DispatchTimeInterval?);
    OUTLINED_FUNCTION_131(v2);
    if (v57)
    {
      unint64_t v4 = 0xE100000000000000;
      uint64_t v2 = 45;
    }
    else
    {
      uint64_t v60 = OUTLINED_FUNCTION_49();
      v61(v60);
      uint64_t v56 = v98;
      OUTLINED_FUNCTION_28_2();
      v3();
      String.init<A>(describing:)();
      uint64_t v62 = OUTLINED_FUNCTION_58();
      v63(v62);
    }
    OUTLINED_FUNCTION_121();
    outlined destroy of NetworkConnectionProtocol?((uint64_t)v87, (uint64_t)&demangling cache variable for type metadata for DispatchTimeInterval?);
    uint64_t v64 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v2, v4, v101);
    OUTLINED_FUNCTION_71(v64);
    swift_bridgeObjectRelease();
    uint64_t v65 = OUTLINED_FUNCTION_26_0();
    v66(v65);
    OUTLINED_FUNCTION_79(&dword_25D6CC000, v67, (os_log_type_t)v83, "Provider - %s [%s]: Open slow timer scheduled (%s).");
    OUTLINED_FUNCTION_84();
    OUTLINED_FUNCTION_1_2();
    OUTLINED_FUNCTION_1_2();

    unint64_t v4 = v99;
  }
  else
  {
    swift_release_n();
    uint64_t v58 = OUTLINED_FUNCTION_31_1();
    v59(v58);
  }
  uint64_t v68 = (void (*)(uint64_t))type metadata accessor for OS_dispatch_source();
  v101[0] = MEMORY[0x263F8EE78];
  int v69 = (void *)lazy protocol witness table accessor for type NetworkConnectionProvider and conformance NetworkConnectionProvider((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_source.TimerFlags and conformance OS_dispatch_source.TimerFlags, 255, MEMORY[0x263F8F148]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_source.TimerFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_source.TimerFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_source.TimerFlags]);
  OUTLINED_FUNCTION_34_2();
  id v70 = *(id *)(v4 + 2072);
  OUTLINED_FUNCTION_127();

  OUTLINED_FUNCTION_12_2();
  v71();
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v73 = OUTLINED_FUNCTION_23_2();
  swift_weakInit();
  v101[4] = (uint64_t)partial apply for specialized closure #1 in ConnectionProviderProtocol.setupOpenSlowTimer();
  v101[5] = v73;
  v101[0] = MEMORY[0x263EF8330];
  v101[1] = 1107296256;
  v101[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v101[3] = (uint64_t)&block_descriptor_272;
  uint64_t v74 = _Block_copy(v101);
  swift_retain();
  default argument 0 of OS_dispatch_source.setEventHandler(qos:flags:handler:)(ObjectType);
  default argument 1 of OS_dispatch_source.setEventHandler(qos:flags:handler:)();
  OUTLINED_FUNCTION_62();
  _Block_release(v74);
  OUTLINED_FUNCTION_12_2();
  v75();
  OUTLINED_FUNCTION_12_2();
  v76();
  swift_release();
  swift_release();
  static DispatchTime.now()();
  DispatchTime.advanced(by:)();
  uint64_t v77 = *(void (**)(void))(v95 + 8);
  OUTLINED_FUNCTION_50();
  v77();
  uint64_t v78 = v97;
  default argument 1 of OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v97);
  uint64_t v79 = v98;
  default argument 2 of OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v98);
  OUTLINED_FUNCTION_94();
  uint64_t v80 = OUTLINED_FUNCTION_43();
  v68(v80);
  ((void (*)(uint64_t, void *))v68)(v78, v79);
  OUTLINED_FUNCTION_50();
  v77();
  uint64_t v81 = v85;
  OS_dispatch_source.resume()();
  *(void *)(v99 + 2136) = v81;
  swift_unknownObjectRelease();
  ((void (*)(uint64_t, void *))v68)(v100, v79);
  OUTLINED_FUNCTION_29();
}

uint64_t specialized ConnectionProviderProtocol.setupOpenSlowTimer()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchTime();
  uint64_t v86 = *(void *)(v2 - 8);
  uint64_t v87 = v2;
  uint64_t v3 = MEMORY[0x270FA5388](v2);
  uint64_t v85 = (char *)&v67 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v84 = (char *)&v67 - v5;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v82 = *(void *)(v6 - 8);
  uint64_t v83 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v80 = (char *)&v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = type metadata accessor for DispatchQoS();
  uint64_t v79 = *(void *)(v81 - 8);
  MEMORY[0x270FA5388](v81);
  uint64_t v78 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for OS_dispatch_source.TimerFlags();
  uint64_t v77 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v76 = (char *)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for DispatchTimeInterval?);
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  uint64_t v74 = (uint64_t)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v75 = (char *)&v67 - v14;
  uint64_t v15 = type metadata accessor for DispatchTimeInterval();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v88 = (char *)&v67 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  uint64_t v21 = (char *)&v67 - v20;
  uint64_t v22 = MEMORY[0x270FA5388](v19);
  uint64_t v24 = (char *)&v67 - v23;
  MEMORY[0x270FA5388](v22);
  uint64_t v26 = (char *)&v67 - v25;
  specialized ConnectionProviderProtocol.openSlowTimerInterval.getter((uint64_t *)((char *)&v67 - v25));
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v27 = type metadata accessor for Logger();
  __swift_project_value_buffer(v27, (uint64_t)static Logger.siriNetwork);
  uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
  uint64_t v90 = v26;
  v28(v24, v26, v15);
  swift_retain_n();
  uint64_t v29 = Logger.logObject.getter();
  int v30 = static os_log_type_t.default.getter();
  BOOL v31 = os_log_type_enabled(v29, (os_log_type_t)v30);
  uint64_t v89 = v15;
  if (v31)
  {
    int v69 = v30;
    os_log_t v70 = v29;
    uint64_t v71 = v9;
    uint64_t v72 = v21;
    uint64_t v32 = swift_slowAlloc();
    uint64_t v68 = swift_slowAlloc();
    aBlock[0] = v68;
    *(_DWORD *)uint64_t v32 = 136315650;
    uint64_t v33 = _typeName(_:qualified:)();
    uint64_t v91 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v32 + 12) = 2080;
    uint64_t v35 = NetworkConnectionProvider.connectionIdentifier.getter();
    uint64_t v91 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, aBlock);
    uint64_t v67 = aBlock;
    uint64_t v37 = v89;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v73 = v1;
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v32 + 22) = 2080;
    uint64_t v38 = (uint64_t)v75;
    v28(v75, v24, v37);
    __swift_storeEnumTagSinglePayload(v38, 0, 1, v37);
    uint64_t v39 = v74;
    outlined init with copy of NetworkConnectionProtocol?(v38, v74, (uint64_t *)&demangling cache variable for type metadata for DispatchTimeInterval?);
    if (__swift_getEnumTagSinglePayload(v39, 1, v37) == 1)
    {
      unint64_t v40 = 0xE100000000000000;
      uint64_t v41 = 45;
      uint64_t v42 = v37;
      uint64_t v21 = v72;
    }
    else
    {
      uint64_t v21 = v72;
      (*(void (**)(char *, uint64_t, uint64_t))(v16 + 32))(v72, v39, v37);
      v28(v88, v21, v37);
      uint64_t v41 = String.init<A>(describing:)();
      unint64_t v40 = v44;
      (*(void (**)(char *, uint64_t))(v16 + 8))(v21, v37);
      uint64_t v42 = v37;
    }
    uint64_t v9 = v71;
    outlined destroy of NetworkConnectionProtocol?(v38, (uint64_t)&demangling cache variable for type metadata for DispatchTimeInterval?);
    uint64_t v91 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v40, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v45 = *(char **)(v16 + 8);
    uint64_t v74 = (v16 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v75 = v45;
    ((void (*)(char *, uint64_t))v45)(v24, v42);
    os_log_t v46 = v70;
    _os_log_impl(&dword_25D6CC000, v70, (os_log_type_t)v69, "Provider - %s [%s]: Open slow timer scheduled (%s).", (uint8_t *)v32, 0x20u);
    uint64_t v47 = v68;
    swift_arrayDestroy();
    MEMORY[0x2611B3750](v47, -1, -1);
    MEMORY[0x2611B3750](v32, -1, -1);

    uint64_t v1 = v73;
  }
  else
  {
    swift_release_n();
    uint64_t v43 = *(char **)(v16 + 8);
    uint64_t v74 = (v16 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v75 = v43;
    ((void (*)(char *, uint64_t))v43)(v24, v15);
  }
  type metadata accessor for OS_dispatch_source();
  aBlock[0] = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type NetworkConnectionProvider and conformance NetworkConnectionProvider((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_source.TimerFlags and conformance OS_dispatch_source.TimerFlags, 255, MEMORY[0x263F8F148]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_source.TimerFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_source.TimerFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_source.TimerFlags]);
  uint64_t v48 = v76;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  id v49 = *(id *)(v1 + 2056);
  uint64_t v50 = static OS_dispatch_source.makeTimerSource(flags:queue:)();

  (*(void (**)(char *, uint64_t))(v77 + 8))(v48, v9);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v52 = swift_allocObject();
  swift_weakInit();
  aBlock[4] = (uint64_t)partial apply for specialized closure #1 in ConnectionProviderProtocol.setupOpenSlowTimer();
  aBlock[5] = v52;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_226;
  unint64_t v53 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v54 = v78;
  default argument 0 of OS_dispatch_source.setEventHandler(qos:flags:handler:)(ObjectType);
  uint64_t v55 = v80;
  default argument 1 of OS_dispatch_source.setEventHandler(qos:flags:handler:)();
  uint64_t v73 = v50;
  OS_dispatch_source.setEventHandler(qos:flags:handler:)();
  _Block_release(v53);
  (*(void (**)(char *, uint64_t))(v82 + 8))(v55, v83);
  (*(void (**)(char *, uint64_t))(v79 + 8))(v54, v81);
  swift_release();
  swift_release();
  uint64_t v56 = v85;
  static DispatchTime.now()();
  char v57 = v84;
  DispatchTime.advanced(by:)();
  uint64_t v58 = v87;
  uint64_t v86 = *(void *)(v86 + 8);
  ((void (*)(char *, uint64_t))v86)(v56, v87);
  default argument 1 of OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)((uint64_t)v21);
  uint64_t v59 = v1;
  uint64_t v60 = v21;
  char v61 = v88;
  default argument 2 of OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v88);
  MEMORY[0x2611B2570](v57, v60, v61, ObjectType);
  uint64_t v62 = v61;
  uint64_t v63 = v89;
  uint64_t v64 = (void (*)(char *, uint64_t))v75;
  ((void (*)(char *, uint64_t))v75)(v62, v89);
  v64(v60, v63);
  ((void (*)(char *, uint64_t))v86)(v57, v58);
  uint64_t v65 = v73;
  OS_dispatch_source.resume()();
  *(void *)(v59 + 2120) = v65;
  swift_unknownObjectRelease();
  return ((uint64_t (*)(char *, uint64_t))v64)(v90, v63);
}

uint64_t specialized closure #1 in ConnectionProviderProtocol.setupOpenSlowTimer()()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = (void *)result;
    if (one-time initialization token for siriNetwork != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.siriNetwork);
    swift_retain_n();
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = swift_slowAlloc();
      uint64_t v6 = swift_slowAlloc();
      uint64_t v16 = v6;
      *(_DWORD *)uint64_t v5 = 136315394;
      uint64_t v7 = _typeName(_:qualified:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v5 + 12) = 2080;
      uint64_t v9 = v1[2];
      unint64_t v10 = v1[3];
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_25D6CC000, v3, v4, "Provider - %s [%s]: Open slow timer fired.", (uint8_t *)v5, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x2611B3750](v6, -1, -1);
      MEMORY[0x2611B3750](v5, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    specialized ConnectionProviderProtocol.cancelOpenSlowTimer()();
    uint64_t v11 = (void *)v1[265];
    if (MEMORY[0x2611B37F0](v1 + 190))
    {
      lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
      uint64_t v12 = (void *)swift_allocError();
      *(void *)(v13 + 8) = 0;
      *(void *)(v13 + 16) = 0;
      *(void *)uint64_t v13 = v11;
      *(_OWORD *)(v13 + 24) = xmmword_25D791750;
      id v14 = v11;
      swift_retain();
      id v15 = v11;
      specialized BackgroundConnection.connectionProvider(_:received:)();
      swift_release();

      swift_unknownObjectRelease();
    }
    return swift_release();
  }
  return result;
}

{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;

  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    if (one-time initialization token for siriNetwork != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.siriNetwork);
    swift_retain_n();
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = swift_slowAlloc();
      uint64_t v6 = swift_slowAlloc();
      uint64_t v16 = v6;
      *(_DWORD *)uint64_t v5 = 136315394;
      uint64_t v7 = _typeName(_:qualified:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v5 + 12) = 2080;
      uint64_t v9 = NetworkConnectionProvider.connectionIdentifier.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_25D6CC000, v3, v4, "Provider - %s [%s]: Open slow timer fired.", (uint8_t *)v5, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x2611B3750](v6, -1, -1);
      MEMORY[0x2611B3750](v5, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    specialized ConnectionProviderProtocol.cancelOpenSlowTimer()();
    uint64_t v11 = *(void **)(v1 + 2104);
    if (MEMORY[0x2611B37F0](v1 + 1504))
    {
      lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
      uint64_t v12 = (void *)swift_allocError();
      *(void *)(v13 + 8) = 0;
      *(void *)(v13 + 16) = 0;
      *(void *)uint64_t v13 = v11;
      *(_OWORD *)(v13 + 24) = xmmword_25D791750;
      id v14 = v11;
      swift_retain();
      id v15 = v11;
      specialized BackgroundConnection.connectionProvider(_:received:)();
      swift_release();

      swift_unknownObjectRelease();
    }
    return swift_release();
  }
  return result;
}

uint64_t specialized ConnectionProviderProtocol.setupConnectionUnviableTimer()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchTime();
  uint64_t v93 = *(void *)(v2 - 8);
  uint64_t v94 = v2;
  uint64_t v3 = MEMORY[0x270FA5388](v2);
  uint64_t v91 = (char *)&v72 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v92 = (char *)&v72 - v5;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v89 = *(void *)(v6 - 8);
  uint64_t v90 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v87 = (char *)&v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = type metadata accessor for DispatchQoS();
  uint64_t v86 = *(void *)(v88 - 8);
  MEMORY[0x270FA5388](v88);
  uint64_t v85 = (char *)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for OS_dispatch_source.TimerFlags();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v83 = (char *)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for DispatchTimeInterval?);
  uint64_t v13 = MEMORY[0x270FA5388](v12 - 8);
  uint64_t v81 = (uint64_t)&v72 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v82 = (uint64_t **)((char *)&v72 - v15);
  uint64_t v16 = type metadata accessor for DispatchTimeInterval();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v79 = (char *)&v72 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  uint64_t v95 = (char *)&v72 - v21;
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  uint64_t v24 = (char *)&v72 - v23;
  MEMORY[0x270FA5388](v22);
  uint64_t v26 = (char *)&v72 - v25;
  Double.dispatchTimeInterval.getter((uint64_t *)((char *)&v72 - v25), 2.0);
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v27 = type metadata accessor for Logger();
  __swift_project_value_buffer(v27, (uint64_t)static Logger.siriNetwork);
  uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
  uint64_t v84 = v26;
  v28(v24, v26, v16);
  swift_retain_n();
  uint64_t v29 = Logger.logObject.getter();
  int v30 = static os_log_type_t.default.getter();
  BOOL v31 = os_log_type_enabled(v29, (os_log_type_t)v30);
  uint64_t v80 = v16;
  if (v31)
  {
    int v74 = v30;
    os_log_t v75 = v29;
    uint64_t v77 = v10;
    uint64_t v78 = v9;
    uint64_t v32 = v16;
    uint64_t v33 = swift_slowAlloc();
    uint64_t v73 = swift_slowAlloc();
    aBlock[0] = v73;
    *(_DWORD *)uint64_t v33 = 136315650;
    uint64_t v34 = _typeName(_:qualified:)();
    uint64_t v96 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v33 + 12) = 2080;
    uint64_t v36 = NetworkConnectionProvider.connectionIdentifier.getter();
    uint64_t v96 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, aBlock);
    uint64_t v72 = aBlock;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v76 = v1;
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v33 + 22) = 2080;
    uint64_t v38 = (void (*)(void, void))v82;
    v28((char *)v82, v24, v32);
    __swift_storeEnumTagSinglePayload((uint64_t)v38, 0, 1, v32);
    uint64_t v39 = (uint64_t)v38;
    uint64_t v40 = v81;
    outlined init with copy of NetworkConnectionProtocol?(v39, v81, (uint64_t *)&demangling cache variable for type metadata for DispatchTimeInterval?);
    if (__swift_getEnumTagSinglePayload(v40, 1, v32) == 1)
    {
      unint64_t v41 = 0xE100000000000000;
      uint64_t v42 = 45;
    }
    else
    {
      unint64_t v44 = v95;
      (*(void (**)(char *, uint64_t, uint64_t))(v17 + 32))(v95, v40, v32);
      v28(v79, v44, v32);
      uint64_t v42 = String.init<A>(describing:)();
      unint64_t v41 = v45;
      (*(void (**)(char *, uint64_t))(v17 + 8))(v44, v32);
    }
    uint64_t v9 = v78;
    outlined destroy of NetworkConnectionProtocol?((uint64_t)v82, (uint64_t)&demangling cache variable for type metadata for DispatchTimeInterval?);
    uint64_t v96 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v41, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    os_log_t v46 = *(uint64_t ***)(v17 + 8);
    uint64_t v81 = (v17 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v82 = v46;
    ((void (*)(char *, uint64_t))v46)(v24, v32);
    os_log_t v47 = v75;
    _os_log_impl(&dword_25D6CC000, v75, (os_log_type_t)v74, "Provider - %s [%s]: Unviable timer scheduled (%s).", (uint8_t *)v33, 0x20u);
    uint64_t v48 = v73;
    swift_arrayDestroy();
    MEMORY[0x2611B3750](v48, -1, -1);
    MEMORY[0x2611B3750](v33, -1, -1);

    uint64_t v1 = v76;
    uint64_t v10 = v77;
  }
  else
  {
    swift_release_n();
    uint64_t v43 = *(uint64_t ***)(v17 + 8);
    uint64_t v81 = (v17 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v82 = v43;
    ((void (*)(char *, uint64_t))v43)(v24, v16);
  }
  specialized ConnectionProviderProtocol.cancelConnectionUnviableTimer()();
  type metadata accessor for OS_dispatch_source();
  aBlock[0] = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type NetworkConnectionProvider and conformance NetworkConnectionProvider((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_source.TimerFlags and conformance OS_dispatch_source.TimerFlags, 255, MEMORY[0x263F8F148]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_source.TimerFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_source.TimerFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_source.TimerFlags]);
  id v49 = v83;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  id v50 = *(id *)(v1 + 2056);
  uint64_t v51 = static OS_dispatch_source.makeTimerSource(flags:queue:)();

  (*(void (**)(char *, uint64_t))(v10 + 8))(v49, v9);
  uint64_t v52 = NetworkConnectionProvider.connectionIdentifier.getter();
  uint64_t v54 = v53;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v56 = swift_allocObject();
  swift_weakInit();
  char v57 = (void *)swift_allocObject();
  v57[2] = v56;
  v57[3] = v52;
  v57[4] = v54;
  aBlock[4] = (uint64_t)partial apply for specialized closure #1 in ConnectionProviderProtocol.setupConnectionUnviableTimer();
  aBlock[5] = (uint64_t)v57;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_180;
  uint64_t v58 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v59 = v85;
  default argument 0 of OS_dispatch_source.setEventHandler(qos:flags:handler:)(ObjectType);
  uint64_t v60 = v87;
  default argument 1 of OS_dispatch_source.setEventHandler(qos:flags:handler:)();
  uint64_t v79 = (char *)v51;
  OS_dispatch_source.setEventHandler(qos:flags:handler:)();
  _Block_release(v58);
  (*(void (**)(char *, uint64_t))(v89 + 8))(v60, v90);
  (*(void (**)(char *, uint64_t))(v86 + 8))(v59, v88);
  swift_release();
  swift_release();
  char v61 = v91;
  static DispatchTime.now()();
  uint64_t v62 = v92;
  uint64_t v63 = v84;
  DispatchTime.advanced(by:)();
  uint64_t v64 = v94;
  uint64_t v65 = *(void (**)(char *, uint64_t))(v93 + 8);
  v65(v61, v94);
  Swift::String v66 = v95;
  uint64_t v83 = (char *)ObjectType;
  default argument 2 of OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v95);
  MEMORY[0x2611B2570](v62, v63, v66, ObjectType);
  uint64_t v67 = v66;
  uint64_t v68 = v80;
  int v69 = (uint64_t (*)(char *, uint64_t))v82;
  ((void (*)(char *, uint64_t))v82)(v67, v80);
  v65(v62, v64);
  os_log_t v70 = v79;
  OS_dispatch_source.resume()();
  *(void *)(v1 + 2136) = v70;
  swift_unknownObjectRelease();
  return v69(v63, v68);
}

void specialized ConnectionProviderProtocol.cancelConnectionUnviableTimer()()
{
  if (*(void *)(v0 + 2136))
  {
    uint64_t v1 = v0;
    uint64_t v2 = one-time initialization token for siriNetwork;
    swift_unknownObjectRetain();
    if (v2 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.siriNetwork);
    swift_retain_n();
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = swift_slowAlloc();
      uint64_t v7 = swift_slowAlloc();
      uint64_t v12 = v7;
      *(_DWORD *)uint64_t v6 = 136315394;
      uint64_t v8 = _typeName(_:qualified:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v6 + 12) = 2080;
      uint64_t v10 = NetworkConnectionProvider.connectionIdentifier.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_25D6CC000, v4, v5, "Provider - %s [%s]: Unviable timer cancelled", (uint8_t *)v6, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x2611B3750](v7, -1, -1);
      MEMORY[0x2611B3750](v6, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    *(void *)(v1 + 2136) = 0;
    swift_unknownObjectRelease();
    swift_getObjectType();
    OS_dispatch_source.cancel()();
    swift_unknownObjectRelease();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  os_log_type_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_47();
  if (*(void *)(v0 + 2152))
  {
    uint64_t v1 = v0;
    uint64_t v2 = one-time initialization token for siriNetwork;
    swift_unknownObjectRetain();
    if (v2 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    OUTLINED_FUNCTION_46(v3, (uint64_t)static Logger.siriNetwork);
    uint64_t v4 = (void *)Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (OUTLINED_FUNCTION_24_0(v5))
    {
      OUTLINED_FUNCTION_69();
      OUTLINED_FUNCTION_40();
      OUTLINED_FUNCTION_118();
      OUTLINED_FUNCTION_2_7(4.8151e-34);
      uint64_t v6 = _typeName(_:qualified:)();
      OUTLINED_FUNCTION_117(v6, v7, v8);
      OUTLINED_FUNCTION_11_1();
      OUTLINED_FUNCTION_48();
      swift_bridgeObjectRelease();
      unint64_t v9 = OUTLINED_FUNCTION_20_2();
      OUTLINED_FUNCTION_57(v9);
      OUTLINED_FUNCTION_16_2();
      OUTLINED_FUNCTION_48();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_35_0(&dword_25D6CC000, v10, v11, "Provider - %s [%s]: Unviable timer cancelled");
      OUTLINED_FUNCTION_37_0();
      OUTLINED_FUNCTION_1_2();
      OUTLINED_FUNCTION_1_2();
    }
    else
    {

      OUTLINED_FUNCTION_123();
    }
    *(void *)(v1 + 2152) = 0;
    swift_unknownObjectRelease();
    swift_getObjectType();
    OS_dispatch_source.cancel()();
    swift_unknownObjectRelease();
  }
  OUTLINED_FUNCTION_42();
}

uint64_t specialized closure #1 in ConnectionProviderProtocol.setupConnectionUnviableTimer()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v6 = result;
    specialized ConnectionProviderProtocol.cancelConnectionUnviableTimer()();
    swift_beginAccess();
    outlined init with copy of NetworkConnectionProtocol?(v6 + 16, (uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
    uint64_t v7 = v14;
    outlined destroy of NetworkConnectionProtocol?((uint64_t)v13, (uint64_t)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
    if (v7)
    {
      if (NetworkConnectionProvider.connectionIdentifier.getter() == a2 && v8 == a3)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v10 & 1) == 0) {
          goto LABEL_11;
        }
      }
      lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
      unint64_t v11 = (void *)swift_allocError();
      *(void *)(v12 + 8) = 0;
      *(void *)(v12 + 16) = 0;
      *(void *)uint64_t v12 = 0;
      *(_OWORD *)(v12 + 24) = xmmword_25D791760;
      NetworkConnectionProvider.closeWithError(_:)();
    }
LABEL_11:
    *(void *)(v6 + 2088) = 0;
    return swift_release();
  }
  return result;
}

void specialized ConnectionProviderProtocol.setupStaleConnectionTimer()()
{
  OUTLINED_FUNCTION_22();
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchTime();
  OUTLINED_FUNCTION_0_0();
  uint64_t v98 = v3;
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_5_5();
  uint64_t v96 = v5;
  OUTLINED_FUNCTION_13_2();
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_67();
  uint64_t v97 = v7;
  type metadata accessor for DispatchWorkItemFlags();
  OUTLINED_FUNCTION_0_0();
  uint64_t v94 = v9;
  uint64_t v95 = v8;
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_109();
  uint64_t v92 = v10;
  uint64_t v93 = type metadata accessor for DispatchQoS();
  OUTLINED_FUNCTION_0_0();
  uint64_t v91 = v11;
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_109();
  uint64_t v90 = v13;
  uint64_t v14 = type metadata accessor for OS_dispatch_source.TimerFlags();
  OUTLINED_FUNCTION_0_0();
  uint64_t v88 = v15;
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_19_2(v17, v80[0]);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for DispatchTimeInterval?);
  uint64_t v19 = OUTLINED_FUNCTION_19_1(v18);
  MEMORY[0x270FA5388](v19);
  OUTLINED_FUNCTION_5_5();
  uint64_t v86 = v20;
  OUTLINED_FUNCTION_13_2();
  MEMORY[0x270FA5388](v21);
  OUTLINED_FUNCTION_67();
  uint64_t v87 = v22;
  uint64_t v23 = type metadata accessor for DispatchTimeInterval();
  OUTLINED_FUNCTION_0_0();
  uint64_t v25 = v24;
  MEMORY[0x270FA5388](v26);
  OUTLINED_FUNCTION_5_5();
  uint64_t v84 = v27;
  OUTLINED_FUNCTION_13_2();
  MEMORY[0x270FA5388](v28);
  unint64_t v99 = (uint64_t *)((char *)v80 - v29);
  OUTLINED_FUNCTION_13_2();
  uint64_t v31 = MEMORY[0x270FA5388](v30);
  MEMORY[0x270FA5388](v31);
  uint64_t v33 = (char *)v80 - v32;
  Double.dispatchTimeInterval.getter((uint64_t *)((char *)v80 - v32), *(double *)(v0 + 1696));
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v34 = type metadata accessor for Logger();
  __swift_project_value_buffer(v34, (uint64_t)static Logger.siriNetwork);
  unint64_t v35 = *(void (**)(void))(v25 + 16);
  OUTLINED_FUNCTION_86();
  OUTLINED_FUNCTION_41();
  v35();
  swift_retain_n();
  uint64_t v36 = Logger.logObject.getter();
  int v85 = static os_log_type_t.default.getter();
  BOOL v37 = os_log_type_enabled(v36, (os_log_type_t)v85);
  uint64_t v101 = v1;
  uint64_t v102 = v25;
  uint64_t v89 = v33;
  uint64_t v100 = v23;
  if (v37)
  {
    os_log_t v81 = v36;
    uint64_t v82 = v14;
    uint64_t v83 = v2;
    uint64_t v38 = OUTLINED_FUNCTION_10_0();
    uint64_t v39 = swift_slowAlloc();
    OUTLINED_FUNCTION_77(v39);
    *(_DWORD *)uint64_t v38 = 136315650;
    uint64_t v40 = _typeName(_:qualified:)();
    uint64_t v103 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v41, v104);
    OUTLINED_FUNCTION_86();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v38 + 12) = 2080;
    uint64_t v43 = *(void *)(v1 + 16);
    unint64_t v42 = *(void *)(v1 + 24);
    swift_bridgeObjectRetain();
    uint64_t v103 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v42, v104);
    v80[1] = (uint64_t)v104;
    OUTLINED_FUNCTION_86();
    uint64_t v44 = v100;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v38 + 22) = 2080;
    uint64_t v45 = (uint64_t)v87;
    OUTLINED_FUNCTION_41();
    v35();
    __swift_storeEnumTagSinglePayload(v45, 0, 1, v44);
    uint64_t v46 = v86;
    outlined init with copy of NetworkConnectionProtocol?(v45, v86, (uint64_t *)&demangling cache variable for type metadata for DispatchTimeInterval?);
    if (__swift_getEnumTagSinglePayload(v46, 1, v44) == 1)
    {
      unint64_t v47 = 0xE100000000000000;
      uint64_t v48 = 45;
      uint64_t v49 = v102;
    }
    else
    {
      uint64_t v49 = v102;
      uint64_t v51 = v99;
      OUTLINED_FUNCTION_86();
      OUTLINED_FUNCTION_20_1();
      v52();
      OUTLINED_FUNCTION_41();
      v35();
      uint64_t v53 = v44;
      uint64_t v48 = String.init<A>(describing:)();
      unint64_t v47 = v54;
      (*(void (**)(void *, uint64_t))(v49 + 8))(v51, v53);
    }
    outlined destroy of NetworkConnectionProtocol?(v45, (uint64_t)&demangling cache variable for type metadata for DispatchTimeInterval?);
    uint64_t v103 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v47, v104);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    id v50 = *(void (**)(void))(v49 + 8);
    OUTLINED_FUNCTION_125();
    v50();
    os_log_t v55 = v81;
    _os_log_impl(&dword_25D6CC000, v81, (os_log_type_t)v85, "Provider - %s [%s]: Stale connection timer scheduled (%s).", (uint8_t *)v38, 0x20u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_1_2();
    OUTLINED_FUNCTION_1_2();

    uint64_t v2 = v83;
    uint64_t v1 = v101;
  }
  else
  {
    swift_release_n();
    id v50 = *(void (**)(void))(v25 + 8);
    OUTLINED_FUNCTION_125();
    v50();
  }
  uint64_t v56 = OUTLINED_FUNCTION_23_2();
  uint64_t v57 = *(void *)(v1 + 2096);
  BOOL v58 = __CFADD__(v57, 1);
  uint64_t v59 = v57 + 1;
  if (v58)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v56 + 16) = v59;
    uint64_t v60 = v56;
    specialized ConnectionProviderProtocol.cancelStaleConnectionTimer()();
    type metadata accessor for OS_dispatch_source();
    uint64_t v61 = v2;
    v104[0] = MEMORY[0x263F8EE78];
    lazy protocol witness table accessor for type NetworkConnectionProvider and conformance NetworkConnectionProvider((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_source.TimerFlags and conformance OS_dispatch_source.TimerFlags, 255, MEMORY[0x263F8F148]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_source.TimerFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_source.TimerFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_source.TimerFlags]);
    uint64_t v87 = v50;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    id v62 = *(id *)(v1 + 2072);
    uint64_t v63 = static OS_dispatch_source.makeTimerSource(flags:queue:)();

    OUTLINED_FUNCTION_12_2();
    v64();
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v66 = OUTLINED_FUNCTION_23_2();
    swift_weakInit();
    uint64_t v67 = swift_allocObject();
    *(void *)(v67 + 16) = v66;
    *(void *)(v67 + 24) = v60;
    uint64_t v86 = v60;
    v104[4] = (uint64_t)partial apply for specialized closure #1 in ConnectionProviderProtocol.setupStaleConnectionTimer();
    v104[5] = v67;
    v104[0] = MEMORY[0x263EF8330];
    v104[1] = 1107296256;
    v104[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v104[3] = (uint64_t)&block_descriptor_260;
    uint64_t v68 = _Block_copy(v104);
    swift_retain();
    swift_retain();
    default argument 0 of OS_dispatch_source.setEventHandler(qos:flags:handler:)(ObjectType);
    default argument 1 of OS_dispatch_source.setEventHandler(qos:flags:handler:)();
    OS_dispatch_source.setEventHandler(qos:flags:handler:)();
    _Block_release(v68);
    OUTLINED_FUNCTION_12_2();
    v69();
    OUTLINED_FUNCTION_12_2();
    v70();
    swift_release();
    swift_release();
    uint64_t v71 = v96;
    static DispatchTime.now()();
    uint64_t v72 = v97;
    uint64_t v73 = v89;
    DispatchTime.advanced(by:)();
    int v74 = *(void (**)(uint64_t, uint64_t))(v98 + 8);
    v74(v71, v61);
    os_log_t v75 = v99;
    default argument 2 of OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v99);
    uint64_t v76 = v63;
    MEMORY[0x2611B2570](v72, v73, v75, ObjectType);
    uint64_t v77 = v75;
    uint64_t v78 = v100;
    uint64_t v79 = v87;
    ((void (*)(void *, uint64_t))v87)(v77, v100);
    v74(v72, v61);
    OS_dispatch_source.resume()();
    *(void *)(v101 + 2144) = v76;
    swift_unknownObjectRelease();
    ((void (*)(char *, uint64_t))v79)(v73, v78);
    swift_release();
    OUTLINED_FUNCTION_29();
  }
}

uint64_t specialized ConnectionProviderProtocol.setupStaleConnectionTimer()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchTime();
  uint64_t v87 = *(void *)(v2 - 8);
  uint64_t v88 = v2;
  uint64_t v3 = MEMORY[0x270FA5388](v2);
  uint64_t v86 = (char *)&v68 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  int v85 = (char *)&v68 - v5;
  uint64_t v84 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v82 = *(void *)(v84 - 8);
  MEMORY[0x270FA5388](v84);
  os_log_t v81 = (char *)&v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = type metadata accessor for DispatchQoS();
  uint64_t v80 = *(void *)(v83 - 8);
  MEMORY[0x270FA5388](v83);
  uint64_t v79 = (char *)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for OS_dispatch_source.TimerFlags();
  uint64_t v78 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v77 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for DispatchTimeInterval?);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v75 = (uint64_t)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v76 = (char *)&v68 - v13;
  uint64_t v14 = type metadata accessor for DispatchTimeInterval();
  uint64_t v91 = *(void *)(v14 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v14);
  int v74 = (char *)&v68 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v89 = (char *)&v68 - v18;
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  uint64_t v21 = (char *)&v68 - v20;
  MEMORY[0x270FA5388](v19);
  uint64_t v23 = (char *)&v68 - v22;
  Double.dispatchTimeInterval.getter((uint64_t *)((char *)&v68 - v22), *(double *)(v0 + 1680));
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v24 = type metadata accessor for Logger();
  __swift_project_value_buffer(v24, (uint64_t)static Logger.siriNetwork);
  uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v91 + 16);
  v25(v21, v23, v14);
  swift_retain_n();
  uint64_t v26 = Logger.logObject.getter();
  int v27 = static os_log_type_t.default.getter();
  BOOL v28 = os_log_type_enabled(v26, (os_log_type_t)v27);
  uint64_t v90 = v1;
  if (v28)
  {
    int v71 = v27;
    os_log_t v72 = v26;
    uint64_t v73 = v8;
    os_log_t v70 = v23;
    uint64_t v29 = swift_slowAlloc();
    uint64_t v69 = swift_slowAlloc();
    aBlock[0] = v69;
    *(_DWORD *)uint64_t v29 = 136315650;
    uint64_t v30 = _typeName(_:qualified:)();
    uint64_t v92 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v29 + 12) = 2080;
    uint64_t v32 = NetworkConnectionProvider.connectionIdentifier.getter();
    uint64_t v92 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, aBlock);
    uint64_t v68 = aBlock;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v29 + 22) = 2080;
    uint64_t v34 = (uint64_t)v76;
    v25(v76, v21, v14);
    __swift_storeEnumTagSinglePayload(v34, 0, 1, v14);
    uint64_t v35 = v75;
    outlined init with copy of NetworkConnectionProtocol?(v34, v75, (uint64_t *)&demangling cache variable for type metadata for DispatchTimeInterval?);
    if (__swift_getEnumTagSinglePayload(v35, 1, v14) == 1)
    {
      unint64_t v36 = 0xE100000000000000;
      uint64_t v37 = 45;
    }
    else
    {
      uint64_t v39 = v91;
      uint64_t v40 = v89;
      (*(void (**)(char *, uint64_t, uint64_t))(v91 + 32))(v89, v35, v14);
      v25(v74, v40, v14);
      uint64_t v37 = String.init<A>(describing:)();
      unint64_t v36 = v41;
      (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v14);
    }
    outlined destroy of NetworkConnectionProtocol?(v34, (uint64_t)&demangling cache variable for type metadata for DispatchTimeInterval?);
    uint64_t v92 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v36, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v38 = *(void (**)(char *, uint64_t))(v91 + 8);
    v38(v21, v14);
    os_log_t v42 = v72;
    _os_log_impl(&dword_25D6CC000, v72, (os_log_type_t)v71, "Provider - %s [%s]: Stale connection timer scheduled (%s).", (uint8_t *)v29, 0x20u);
    uint64_t v43 = v69;
    swift_arrayDestroy();
    MEMORY[0x2611B3750](v43, -1, -1);
    MEMORY[0x2611B3750](v29, -1, -1);

    uint64_t v23 = v70;
    uint64_t v1 = v90;
    uint64_t v8 = v73;
  }
  else
  {
    swift_release_n();
    uint64_t v38 = *(void (**)(char *, uint64_t))(v91 + 8);
    v38(v21, v14);
  }
  uint64_t result = swift_allocObject();
  uint64_t v45 = *(void *)(v1 + 2080);
  BOOL v46 = __CFADD__(v45, 1);
  uint64_t v47 = v45 + 1;
  if (v46)
  {
    __break(1u);
  }
  else
  {
    *(void *)(result + 16) = v47;
    uint64_t v76 = (char *)v38;
    uint64_t v48 = (char *)result;
    specialized ConnectionProviderProtocol.cancelStaleConnectionTimer()();
    type metadata accessor for OS_dispatch_source();
    uint64_t v75 = v14;
    aBlock[0] = MEMORY[0x263F8EE78];
    lazy protocol witness table accessor for type NetworkConnectionProvider and conformance NetworkConnectionProvider((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_source.TimerFlags and conformance OS_dispatch_source.TimerFlags, 255, MEMORY[0x263F8F148]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_source.TimerFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_source.TimerFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_source.TimerFlags]);
    uint64_t v49 = v77;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    id v50 = *(id *)(v1 + 2056);
    uint64_t v51 = static OS_dispatch_source.makeTimerSource(flags:queue:)();

    (*(void (**)(char *, uint64_t))(v78 + 8))(v49, v8);
    uint64_t v73 = v51;
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v53 = swift_allocObject();
    swift_weakInit();
    uint64_t v54 = swift_allocObject();
    *(void *)(v54 + 16) = v53;
    *(void *)(v54 + 24) = v48;
    int v74 = v48;
    aBlock[4] = (uint64_t)partial apply for specialized closure #1 in ConnectionProviderProtocol.setupStaleConnectionTimer();
    aBlock[5] = v54;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> ();
    aBlock[3] = (uint64_t)&block_descriptor_199;
    os_log_t v55 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    uint64_t v56 = v79;
    default argument 0 of OS_dispatch_source.setEventHandler(qos:flags:handler:)(ObjectType);
    uint64_t v57 = v81;
    default argument 1 of OS_dispatch_source.setEventHandler(qos:flags:handler:)();
    OS_dispatch_source.setEventHandler(qos:flags:handler:)();
    _Block_release(v55);
    (*(void (**)(char *, uint64_t))(v82 + 8))(v57, v84);
    (*(void (**)(char *, uint64_t))(v80 + 8))(v56, v83);
    swift_release();
    swift_release();
    BOOL v58 = v86;
    static DispatchTime.now()();
    uint64_t v59 = v85;
    uint64_t v60 = v23;
    DispatchTime.advanced(by:)();
    uint64_t v61 = v88;
    id v62 = *(void (**)(char *, uint64_t))(v87 + 8);
    v62(v58, v88);
    uint64_t v63 = v89;
    default argument 2 of OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v89);
    uint64_t v64 = v73;
    MEMORY[0x2611B2570](v59, v23, v63, ObjectType);
    uint64_t v65 = v63;
    uint64_t v66 = v75;
    uint64_t v67 = (void (*)(char *, uint64_t))v76;
    ((void (*)(char *, uint64_t))v76)(v65, v75);
    v62(v59, v61);
    OS_dispatch_source.resume()();
    *(void *)(v90 + 2128) = v64;
    swift_unknownObjectRelease();
    v67(v60, v66);
    return swift_release();
  }
  return result;
}

void specialized ConnectionProviderProtocol.cancelStaleConnectionTimer()()
{
  if (*(void *)(v0 + 2128))
  {
    uint64_t v1 = v0;
    uint64_t v2 = one-time initialization token for siriNetwork;
    swift_unknownObjectRetain();
    if (v2 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.siriNetwork);
    swift_retain_n();
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = swift_slowAlloc();
      uint64_t v7 = swift_slowAlloc();
      uint64_t v12 = v7;
      *(_DWORD *)uint64_t v6 = 136315394;
      uint64_t v8 = _typeName(_:qualified:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v6 + 12) = 2080;
      uint64_t v10 = NetworkConnectionProvider.connectionIdentifier.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_25D6CC000, v4, v5, "Provider - %s [%s]: Stale connection timer cancelled.", (uint8_t *)v6, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x2611B3750](v7, -1, -1);
      MEMORY[0x2611B3750](v6, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    *(void *)(v1 + 2128) = 0;
    swift_unknownObjectRelease();
    swift_getObjectType();
    OS_dispatch_source.cancel()();
    swift_unknownObjectRelease();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  os_log_type_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_47();
  if (*(void *)(v0 + 2144))
  {
    uint64_t v1 = v0;
    uint64_t v2 = one-time initialization token for siriNetwork;
    swift_unknownObjectRetain();
    if (v2 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    OUTLINED_FUNCTION_46(v3, (uint64_t)static Logger.siriNetwork);
    uint64_t v4 = (void *)Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (OUTLINED_FUNCTION_24_0(v5))
    {
      OUTLINED_FUNCTION_69();
      OUTLINED_FUNCTION_40();
      OUTLINED_FUNCTION_118();
      OUTLINED_FUNCTION_2_7(4.8151e-34);
      uint64_t v6 = _typeName(_:qualified:)();
      OUTLINED_FUNCTION_117(v6, v7, v8);
      OUTLINED_FUNCTION_11_1();
      OUTLINED_FUNCTION_48();
      swift_bridgeObjectRelease();
      unint64_t v9 = OUTLINED_FUNCTION_20_2();
      OUTLINED_FUNCTION_57(v9);
      OUTLINED_FUNCTION_16_2();
      OUTLINED_FUNCTION_48();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_35_0(&dword_25D6CC000, v10, v11, "Provider - %s [%s]: Stale connection timer cancelled.");
      OUTLINED_FUNCTION_37_0();
      OUTLINED_FUNCTION_1_2();
      OUTLINED_FUNCTION_1_2();
    }
    else
    {

      OUTLINED_FUNCTION_123();
    }
    *(void *)(v1 + 2144) = 0;
    swift_unknownObjectRelease();
    swift_getObjectType();
    OS_dispatch_source.cancel()();
    swift_unknownObjectRelease();
  }
  OUTLINED_FUNCTION_42();
}

uint64_t specialized closure #1 in ConnectionProviderProtocol.setupStaleConnectionTimer()(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v4 = (void *)result;
    os_log_type_t v5 = (void *)(a2 + 16);
    swift_beginAccess();
    if (one-time initialization token for siriNetwork != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.siriNetwork);
    swift_retain_n();
    swift_retain_n();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      v18[0] = v17;
      *(_DWORD *)uint64_t v9 = 136316162;
      uint64_t v10 = _typeName(_:qualified:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v9 + 12) = 2080;
      uint64_t v13 = v4[2];
      unint64_t v12 = v4[3];
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v12, v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v9 + 22) = 1024;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v9 + 28) = 2048;
      swift_beginAccess();
      swift_release();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      *(_WORD *)(v9 + 38) = 2048;
      swift_release();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl(&dword_25D6CC000, v7, v8, "Provider - %s [%s]: Stale connection timer check. Connection in stale %{BOOL}d. Last read/write counter value %lu, current %lu", (uint8_t *)v9, 0x30u);
      swift_arrayDestroy();
      MEMORY[0x2611B3750](v17, -1, -1);
      MEMORY[0x2611B3750](v9, -1, -1);
    }
    else
    {

      swift_release_n();
      swift_release_n();
    }
    swift_beginAccess();
    uint64_t v14 = v4[262];
    if (*v5 == v14)
    {
      specialized ConnectionProviderProtocol.cancelStaleConnectionTimer()();
      if (MEMORY[0x2611B37F0](v4 + 190))
      {
        lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
        uint64_t v15 = (void *)swift_allocError();
        *(void *)(v16 + 8) = 0;
        *(void *)(v16 + 16) = 0;
        *(void *)uint64_t v16 = 7;
        *(_OWORD *)(v16 + 24) = xmmword_25D790FF0;
        swift_retain();
        specialized BackgroundConnection.connectionProvider(_:received:)();
        swift_release();

        swift_unknownObjectRelease();
      }
      return swift_release();
    }
    else
    {
      swift_release();
      uint64_t result = swift_beginAccess();
      *os_log_type_t v5 = v14;
    }
  }
  return result;
}

{
  uint64_t result;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18[3];

  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v4 = result;
    os_log_type_t v5 = (void *)(a2 + 16);
    swift_beginAccess();
    if (one-time initialization token for siriNetwork != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.siriNetwork);
    swift_retain_n();
    swift_retain_n();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      v18[0] = v17;
      *(_DWORD *)uint64_t v9 = 136316162;
      uint64_t v10 = _typeName(_:qualified:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v9 + 12) = 2080;
      unint64_t v12 = NetworkConnectionProvider.connectionIdentifier.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v9 + 22) = 1024;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v9 + 28) = 2048;
      swift_beginAccess();
      swift_release();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      *(_WORD *)(v9 + 38) = 2048;
      swift_release();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl(&dword_25D6CC000, v7, v8, "Provider - %s [%s]: Stale connection timer check. Connection in stale %{BOOL}d. Last read/write counter value %lu, current %lu", (uint8_t *)v9, 0x30u);
      swift_arrayDestroy();
      MEMORY[0x2611B3750](v17, -1, -1);
      MEMORY[0x2611B3750](v9, -1, -1);
    }
    else
    {

      swift_release_n();
      swift_release_n();
    }
    swift_beginAccess();
    uint64_t v14 = *(void *)(v4 + 2080);
    if (*v5 == v14)
    {
      specialized ConnectionProviderProtocol.cancelStaleConnectionTimer()();
      if (MEMORY[0x2611B37F0](v4 + 1504))
      {
        lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
        uint64_t v15 = (void *)swift_allocError();
        *(void *)(v16 + 8) = 0;
        *(void *)(v16 + 16) = 0;
        *(void *)uint64_t v16 = 7;
        *(_OWORD *)(v16 + 24) = xmmword_25D790FF0;
        swift_retain();
        specialized BackgroundConnection.connectionProvider(_:received:)();
        swift_release();

        swift_unknownObjectRelease();
      }
      return swift_release();
    }
    else
    {
      swift_release();
      uint64_t result = swift_beginAccess();
      *os_log_type_t v5 = v14;
    }
  }
  return result;
}

void specialized ConnectionProviderProtocol.hash(into:)(uint64_t a1)
{
  memcpy(__dst, (const void *)(v1 + 1552), sizeof(__dst));
  ConnectionConfiguration.hash(into:)(a1);
}

{
  uint64_t v1;
  unsigned char __dst[516];

  memcpy(__dst, (const void *)(v1 + 1536), sizeof(__dst));
  ConnectionConfiguration.hash(into:)(a1);
}

uint64_t specialized ConnectionProviderProtocol.updateConnectionMetrics(with:completion:)(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1);
  os_log_t v70 = v3;
  uint64_t v4 = v2;
  uint64_t v5 = *(void *)(v2 + 16);
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v2 + 24, (uint64_t)v94, &demangling cache variable for type metadata for String?);
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v4 + 48, (uint64_t)&v93, &demangling cache variable for type metadata for UInt32?);
  uint64_t v6 = (const void *)(v1 + 56);
  swift_beginAccess();
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)&v93, v1 + 104, &demangling cache variable for type metadata for UInt32?);
  *(void *)(v1 + 72) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v94, v1 + 80, &demangling cache variable for type metadata for String?);
  outlined retain of String?((uint64_t)v94);
  swift_bridgeObjectRelease();
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v1 + 624, (uint64_t)v148, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v148, (uint64_t)v149, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v149) == 1)
  {
    _s11SiriNetwork010ConnectionB6ReportVSgWOi0_(v115);
    _s11SiriNetwork25ConnectionInterfaceReportVSgWOi0_(v114);
    if (one-time initialization token for sharedNetworkAnalytics != -1) {
      swift_once();
    }
    uint64_t v7 = static NetworkAnalytics.sharedNetworkAnalytics;
    LODWORD(v88[0]) = 0;
    v88[1] = 0;
    v88[2] = 0xE000000000000000;
    v88[3] = 0;
    v88[4] = 0xE000000000000000;
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v115, (uint64_t)&v88[5], (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
    v88[46] = 0;
    v88[45] = 0;
    LOBYTE(v88[47]) = 1;
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v114, (uint64_t)&v88[48], (uint64_t *)&demangling cache variable for type metadata for ConnectionInterfaceReport?);
    v88[85] = MEMORY[0x263F8EE78];
    v88[86] = MEMORY[0x263F8EE78];
    LODWORD(v88[87]) = 4;
    v88[88] = v7;
    memcpy(v89, v88, 0x2C8uLL);
    destructiveProjectEnumData for ConnectionConfigurationError(v89);
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v1 + 624, (uint64_t)v90, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v89, v1 + 624, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
    id v8 = v7;
    outlined release of ConnectionSnapshotReport?((uint64_t)v90);
  }
  memcpy(v90, (const void *)(v1 + 56), 0x599uLL);
  memcpy(v89, (const void *)(v1 + 56), 0x599uLL);
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)&v90[568], (uint64_t)v91, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v91) == 1
    || (_s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)&v89[608], (uint64_t)v114, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?), memcpy(v88, v89, 0x599uLL), outlined retain of ConnectionMetrics((uint64_t)v90), outlined retain of ConnectionNetworkReport?((__n128 *)v114), outlined release of ConnectionMetrics((uint64_t)v88), _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v114, (uint64_t)v115, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?), _s11SiriNetwork010ConnectionB6ReportVSgWOg((uint64_t)v115) == 1))
  {
    type metadata accessor for NetworkConnectionProvider();
    lazy protocol witness table accessor for type NetworkConnectionProvider and conformance NetworkConnectionProvider(&lazy protocol witness table cache variable for type NetworkConnectionProvider and conformance NetworkConnectionProvider, v9, (void (*)(uint64_t))type metadata accessor for NetworkConnectionProvider);
    uint64_t v10 = protocol witness for ConnectionProviderProtocol.connectionMetrics.modify in conformance NetworkConnectionProvider();
    uint64_t v12 = v11;
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v11 + 568, (uint64_t)v88, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v88, (uint64_t)v89, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
    if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v89) != 1)
    {
      v112[0] = 1;
      v111[0] = 1;
      v110[0] = 1;
      v109[0] = 1;
      v108[0] = 1;
      v107[0] = 1;
      v106[0] = 1;
      v105[0] = 1;
      v104[0] = 1;
      v103[0] = 1;
      v102[0] = 1;
      v101[0] = 1;
      v100[0] = 1;
      v99[0] = 1;
      v98[0] = 1;
      *(_DWORD *)uint64_t v114 = 0;
      v114[4] = 1;
      memset(&v114[8], 0, 24);
      v114[32] = 1;
      memset(&v114[40], 0, 52);
      v114[92] = 1;
      *(_DWORD *)&v114[96] = 0;
      v114[100] = 1;
      *(void *)&v114[104] = MEMORY[0x263F8EE80];
      memset(&v114[112], 0, 24);
      v114[136] = 1;
      *(void *)&v114[144] = 0;
      v114[152] = 1;
      v114[168] = 1;
      *(void *)&v114[160] = 0;
      *(void *)&v114[176] = 0;
      v114[184] = 1;
      v114[200] = 1;
      *(void *)&v114[192] = 0;
      *(void *)&v114[208] = 0;
      v114[216] = 1;
      memset(&v114[224], 0, 24);
      v114[248] = 1;
      *(void *)&v114[256] = 0;
      v114[264] = 1;
      v114[265] = 0;
      v114[280] = 1;
      *(void *)&v114[272] = 0;
      *(void *)&v114[288] = 0;
      v114[296] = 1;
      *(void *)&v114[304] = 0;
      v114[312] = 1;
      destructiveProjectEnumData for ConnectionConfigurationError(v114);
      uint64_t v13 = v12 + 608;
      _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v13, (uint64_t)v115, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
      _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v114, v13, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
      outlined retain of ConnectionNetworkReport?((__n128 *)v115);
    }
    ((void (*)(unsigned char *, void))v10)(v113, 0);
  }
  else
  {
    outlined retain of ConnectionNetworkReport?((__n128 *)v114);
  }
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v4 + 568, (uint64_t)v92, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  type metadata accessor for NetworkConnectionProvider();
  lazy protocol witness table accessor for type NetworkConnectionProvider and conformance NetworkConnectionProvider(&lazy protocol witness table cache variable for type NetworkConnectionProvider and conformance NetworkConnectionProvider, v14, (void (*)(uint64_t))type metadata accessor for NetworkConnectionProvider);
  uint64_t v15 = protocol witness for ConnectionProviderProtocol.connectionMetrics.modify in conformance NetworkConnectionProvider();
  uint64_t v17 = v16;
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v16 + 568, (uint64_t)v86, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v86, (uint64_t)v87, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v87) == 1)
  {
    ((void (*)(unsigned char *, void))v15)(v89, 0);
  }
  else
  {
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v92, (uint64_t)v115, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
    if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v115) == 1)
    {
      long long v18 = 0uLL;
      char v19 = 1;
    }
    else
    {
      long long v18 = *(_OWORD *)&v115[45];
      char v19 = v116 & 1;
    }
    *(_OWORD *)(v17 + 928) = v18;
    *(unsigned char *)(v17 + 944) = v19;
    ((void (*)(unsigned char *, void))v15)(v89, 0);
  }
  uint64_t v20 = protocol witness for ConnectionProviderProtocol.connectionMetrics.modify in conformance NetworkConnectionProvider();
  uint64_t v22 = v21;
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v21 + 568, (uint64_t)v84, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v84, (uint64_t)v85, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v85) != 1)
  {
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v22 + 608, (uint64_t)v88, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v88, (uint64_t)v89, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
    if (_s11SiriNetwork010ConnectionB6ReportVSgWOg((uint64_t)v89) != 1)
    {
      _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v92, (uint64_t)v113, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
      if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v113) == 1
        || (memcpy(v114, v113, sizeof(v114)),
            _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)&v114[40], (uint64_t)v117, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?), _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v117, (uint64_t)&v143, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?), _s11SiriNetwork010ConnectionB6ReportVSgWOg((uint64_t)&v143) == 1))
      {
        int v23 = 0;
        char v24 = 1;
      }
      else
      {
        int v23 = v143;
        char v24 = v144 & 1;
      }
      *(_DWORD *)(v22 + 608) = v23;
      *(unsigned char *)(v22 + 612) = v24;
    }
  }
  ((void (*)(unsigned char *, void))v20)(v112, 0);
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v92, (uint64_t)v95, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v95) != 1)
  {
    memcpy(v96, v95, sizeof(v96));
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)&v96[40], (uint64_t)v126, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v126, (uint64_t)v127, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
    if (_s11SiriNetwork010ConnectionB6ReportVSgWOg((uint64_t)v127) != 1)
    {
      uint64_t v25 = v128;
      if (v128)
      {
        uint64_t v26 = v127[1];
        swift_bridgeObjectRetain();
        int v27 = protocol witness for ConnectionProviderProtocol.connectionMetrics.modify in conformance NetworkConnectionProvider();
        uint64_t v29 = v28;
        _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v28 + 568, (uint64_t)v88, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
        _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v88, (uint64_t)v89, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
        if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v89) != 1)
        {
          _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v29 + 608, (uint64_t)v111, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
          _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v111, (uint64_t)v112, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
          if (_s11SiriNetwork010ConnectionB6ReportVSgWOg((uint64_t)v112) != 1)
          {
            *(void *)(v29 + 616) = v26;
            *(void *)(v29 + 624) = v25;
          }
        }
        swift_bridgeObjectRelease();
        ((void (*)(unsigned char *, void))v27)(v110, 0);
      }
    }
  }
  uint64_t v30 = protocol witness for ConnectionProviderProtocol.connectionMetrics.modify in conformance NetworkConnectionProvider();
  uint64_t v32 = v31;
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v31 + 568, (uint64_t)v82, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v82, (uint64_t)v83, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v83) != 1)
  {
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v32 + 608, (uint64_t)v88, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v88, (uint64_t)v89, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
    if (_s11SiriNetwork010ConnectionB6ReportVSgWOg((uint64_t)v89) != 1)
    {
      _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v92, (uint64_t)v111, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
      if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v111) == 1
        || (memcpy(v112, v111, sizeof(v112)),
            _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)&v112[40], (uint64_t)v118, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?), _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v118, (uint64_t)v141, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?), _s11SiriNetwork010ConnectionB6ReportVSgWOg((uint64_t)v141) == 1))
      {
        uint64_t v33 = 0;
        char v34 = 1;
      }
      else
      {
        uint64_t v33 = v141[38];
        char v34 = v142 & 1;
      }
      *(void *)(v32 + 912) = v33;
      *(unsigned char *)(v32 + 920) = v34;
    }
  }
  ((void (*)(unsigned char *, void))v30)(v110, 0);
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v92, (uint64_t)v97, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v97) != 1)
  {
    memcpy(v98, v97, sizeof(v98));
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)&v98[40], (uint64_t)v125, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v125, (uint64_t)v129, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
    if (_s11SiriNetwork010ConnectionB6ReportVSgWOg((uint64_t)v129) != 1)
    {
      char v35 = v129[265];
      unint64_t v36 = protocol witness for ConnectionProviderProtocol.connectionMetrics.modify in conformance NetworkConnectionProvider();
      uint64_t v38 = v37;
      _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v37 + 568, (uint64_t)v88, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
      _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v88, (uint64_t)v89, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
      if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v89) != 1)
      {
        _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v38 + 608, (uint64_t)v109, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
        _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v109, (uint64_t)v110, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
        if (_s11SiriNetwork010ConnectionB6ReportVSgWOg((uint64_t)v110) != 1) {
          *(unsigned char *)(v38 + 873) = v35;
        }
      }
      ((void (*)(unsigned char *, void))v36)(v108, 0);
    }
  }
  uint64_t v39 = protocol witness for ConnectionProviderProtocol.connectionMetrics.modify in conformance NetworkConnectionProvider();
  uint64_t v41 = v40;
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v40 + 568, (uint64_t)v80, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v80, (uint64_t)v81, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v81) != 1)
  {
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v41 + 608, (uint64_t)v88, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v88, (uint64_t)v89, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
    if (_s11SiriNetwork010ConnectionB6ReportVSgWOg((uint64_t)v89) != 1)
    {
      _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v92, (uint64_t)v109, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
      if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v109) == 1
        || (memcpy(v110, v109, sizeof(v110)),
            _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)&v110[40], (uint64_t)v119, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?), _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v119, (uint64_t)v139, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?), _s11SiriNetwork010ConnectionB6ReportVSgWOg((uint64_t)v139) == 1))
      {
        uint64_t v42 = 0;
        char v43 = 1;
      }
      else
      {
        uint64_t v42 = v139[34];
        char v43 = v140 & 1;
      }
      *(void *)(v41 + 880) = v42;
      *(unsigned char *)(v41 + 888) = v43;
    }
  }
  ((void (*)(unsigned char *, void))v39)(v108, 0);
  uint64_t v44 = protocol witness for ConnectionProviderProtocol.connectionMetrics.modify in conformance NetworkConnectionProvider();
  uint64_t v46 = v45;
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v45 + 568, (uint64_t)v78, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v78, (uint64_t)v79, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v79) != 1)
  {
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v46 + 608, (uint64_t)v88, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v88, (uint64_t)v89, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
    if (_s11SiriNetwork010ConnectionB6ReportVSgWOg((uint64_t)v89) != 1)
    {
      _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v92, (uint64_t)v107, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
      if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v107) == 1
        || (memcpy(v108, v107, sizeof(v108)),
            _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)&v108[40], (uint64_t)v120, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?), _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v120, (uint64_t)v137, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?), _s11SiriNetwork010ConnectionB6ReportVSgWOg((uint64_t)v137) == 1))
      {
        uint64_t v47 = 0;
        char v48 = 1;
      }
      else
      {
        uint64_t v47 = v137[36];
        char v48 = v138 & 1;
      }
      *(void *)(v46 + 896) = v47;
      *(unsigned char *)(v46 + 904) = v48;
    }
  }
  ((void (*)(unsigned char *, void))v44)(v106, 0);
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v92, (uint64_t)v99, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v99) != 1)
  {
    memcpy(v100, v99, sizeof(v100));
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)&v100[40], (uint64_t)v124, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v124, (uint64_t)v130, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
    if (_s11SiriNetwork010ConnectionB6ReportVSgWOg((uint64_t)v130) != 1)
    {
      memcpy(v131, v130, 0x139uLL);
      _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)&v131[24], (uint64_t)v145, &demangling cache variable for type metadata for Double?);
      _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v145, (uint64_t)&v146, &demangling cache variable for type metadata for Double?);
      if ((v147 & 1) == 0)
      {
        uint64_t v49 = v146;
        id v50 = protocol witness for ConnectionProviderProtocol.connectionMetrics.modify in conformance NetworkConnectionProvider();
        uint64_t v52 = v51;
        _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v51 + 568, (uint64_t)v88, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
        _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v88, (uint64_t)v89, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
        if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v89) != 1)
        {
          _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v52 + 608, (uint64_t)v105, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
          _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v105, (uint64_t)v106, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
          if (_s11SiriNetwork010ConnectionB6ReportVSgWOg((uint64_t)v106) != 1)
          {
            *(void *)(v52 + 632) = v49;
            *(unsigned char *)(v52 + 640) = 0;
          }
        }
        ((void (*)(unsigned char *, void))v50)(v104, 0);
      }
    }
  }
  uint64_t v53 = protocol witness for ConnectionProviderProtocol.connectionMetrics.modify in conformance NetworkConnectionProvider();
  uint64_t v55 = v54;
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v54 + 568, (uint64_t)v76, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v76, (uint64_t)v77, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v77) != 1)
  {
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v55 + 608, (uint64_t)v88, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v88, (uint64_t)v89, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
    if (_s11SiriNetwork010ConnectionB6ReportVSgWOg((uint64_t)v89) != 1)
    {
      _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v92, (uint64_t)v105, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
      if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v105) == 1
        || (memcpy(v106, v105, sizeof(v106)),
            _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)&v106[40], (uint64_t)v121, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?), _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v121, (uint64_t)v136, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?), _s11SiriNetwork010ConnectionB6ReportVSgWOg((uint64_t)v136) == 1))
      {
        uint64_t v56 = 0;
        uint64_t v57 = 0;
      }
      else
      {
        uint64_t v56 = v136[5];
        uint64_t v57 = swift_bridgeObjectRetain();
      }
      *(void *)(v55 + 648) = v56;
      *(void *)(v55 + 656) = v57;
      swift_bridgeObjectRelease();
    }
  }
  ((void (*)(unsigned char *, void))v53)(v104, 0);
  BOOL v58 = protocol witness for ConnectionProviderProtocol.connectionMetrics.modify in conformance NetworkConnectionProvider();
  uint64_t v60 = v59;
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v59 + 568, (uint64_t)v74, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v74, (uint64_t)v75, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v75) != 1)
  {
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v60 + 608, (uint64_t)v88, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v88, (uint64_t)v89, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
    if (_s11SiriNetwork010ConnectionB6ReportVSgWOg((uint64_t)v89) != 1)
    {
      _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v92, (uint64_t)v103, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
      if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v103) == 1
        || (memcpy(v104, v103, sizeof(v104)),
            _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)&v104[40], (uint64_t)v122, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?), _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v122, (uint64_t)v134, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?), _s11SiriNetwork010ConnectionB6ReportVSgWOg((uint64_t)v134) == 1))
      {
        uint64_t v61 = 0;
        char v62 = 1;
      }
      else
      {
        uint64_t v61 = v134[30];
        char v62 = v135 & 1;
      }
      *(void *)(v60 + 848) = v61;
      *(unsigned char *)(v60 + 856) = v62;
    }
  }
  ((void (*)(unsigned char *, void))v58)(v102, 0);
  uint64_t v63 = protocol witness for ConnectionProviderProtocol.connectionMetrics.modify in conformance NetworkConnectionProvider();
  uint64_t v65 = v64;
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v64 + 568, (uint64_t)v72, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v72, (uint64_t)v73, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v73) == 1
    || (_s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v65 + 608, (uint64_t)v88, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?), _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v88, (uint64_t)v89, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?), _s11SiriNetwork010ConnectionB6ReportVSgWOg((uint64_t)v89) == 1))
  {
    uint64_t result = ((uint64_t (*)(unsigned char *, void))v63)(v71, 0);
    uint64_t v67 = v70;
    if (!v70) {
      return result;
    }
    goto LABEL_82;
  }
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v92, (uint64_t)v101, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v101) == 1
    || (memcpy(v102, v101, sizeof(v102)),
        _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)&v102[40], (uint64_t)v123, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?), _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v123, (uint64_t)v132, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?), _s11SiriNetwork010ConnectionB6ReportVSgWOg((uint64_t)v132) == 1))
  {
    uint64_t v68 = 0;
    char v69 = 1;
  }
  else
  {
    uint64_t v68 = v132[32];
    char v69 = v133 & 1;
  }
  uint64_t v67 = v70;
  *(void *)(v65 + 864) = v68;
  *(unsigned char *)(v65 + 872) = v69;
  uint64_t result = ((uint64_t (*)(unsigned char *, void))v63)(v71, 0);
  if (v70)
  {
LABEL_82:
    memcpy(v89, v6, 0x599uLL);
    memcpy(v88, v6, 0x599uLL);
    outlined retain of ConnectionMetrics((uint64_t)v89);
    v67(v88);
    return outlined release of ConnectionMetrics((uint64_t)v89);
  }
  return result;
}

void specialized ConnectionProviderProtocol.updateConnectionMetrics(with:completion:)()
{
  OUTLINED_FUNCTION_22();
  uint64_t v3 = MEMORY[0x270FA5388](v2);
  int v166 = v5;
  char v168 = v4;
  uint64_t v6 = v3;
  uint64_t v7 = *(void *)(v3 + 16);
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v3 + 24, (uint64_t)v192, &demangling cache variable for type metadata for String?);
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v6 + 48, (uint64_t)&v191, &demangling cache variable for type metadata for UInt32?);
  id v8 = (const void *)(v0 + 72);
  OUTLINED_FUNCTION_128();
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)&v191, v0 + 120, &demangling cache variable for type metadata for UInt32?);
  uint64_t v9 = *(_OWORD **)(v0 + 88);
  *(void *)(v0 + 88) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v192, v0 + 96, &demangling cache variable for type metadata for String?);
  outlined retain of String?((uint64_t)v192);
  swift_bridgeObjectRelease();
  uint64_t v10 = (void (*)(void))&demangling cache variable for type metadata for ConnectionSnapshotReport?;
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v0 + 640, (uint64_t)v237, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v237, (uint64_t)v238, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  OUTLINED_FUNCTION_2_1((uint64_t)v238);
  if (v49)
  {
    uint64_t v11 = OUTLINED_FUNCTION_92();
    _s11SiriNetwork010ConnectionB6ReportVSgWOi0_(v11);
    uint64_t v12 = OUTLINED_FUNCTION_122();
    _s11SiriNetwork25ConnectionInterfaceReportVSgWOi0_(v12);
    if (one-time initialization token for sharedNetworkAnalytics != -1) {
      swift_once();
    }
    uint64_t v1 = static NetworkAnalytics.sharedNetworkAnalytics;
    LODWORD(v185[0]) = 0;
    v185[1] = 0;
    v185[2] = 0xE000000000000000;
    v185[3] = 0;
    v185[4] = 0xE000000000000000;
    uint64_t v13 = OUTLINED_FUNCTION_92();
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v13, v14, v15);
    v185[46] = 0;
    v185[45] = 0;
    LOBYTE(v185[47]) = 1;
    uint64_t v16 = OUTLINED_FUNCTION_122();
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v16, v17, v18);
    v185[85] = MEMORY[0x263F8EE78];
    v185[86] = MEMORY[0x263F8EE78];
    LODWORD(v185[87]) = 4;
    v185[88] = v1;
    OUTLINED_FUNCTION_70();
    OUTLINED_FUNCTION_119();
    memcpy(v19, v20, 0x2C8uLL);
    uint64_t v21 = OUTLINED_FUNCTION_70();
    destructiveProjectEnumData for ConnectionConfigurationError(v21);
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v0 + 640, (uint64_t)v188, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
    uint64_t v22 = OUTLINED_FUNCTION_70();
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v22, v0 + 640, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
    int v23 = v1;
    outlined release of ConnectionSnapshotReport?((uint64_t)v188);
  }
  int v24 = memcpy(v188, (const void *)(v0 + 72), 0x599uLL);
  OUTLINED_FUNCTION_120(v24, v25, v26, v27, v28, v29, v30, v31, v166, SBYTE2(v166), SHIBYTE(v166));
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)&v188[568], (uint64_t)v189, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  OUTLINED_FUNCTION_2_1((uint64_t)v189);
  if (v49) {
    goto LABEL_9;
  }
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)&v187, (uint64_t)v211, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
  uint64_t v32 = OUTLINED_FUNCTION_33_2();
  memcpy(v32, v33, 0x599uLL);
  outlined retain of ConnectionMetrics((uint64_t)v188);
  outlined retain of ConnectionNetworkReport?((__n128 *)v211);
  outlined release of ConnectionMetrics((uint64_t)v185);
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v211, (uint64_t)v212, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
  char v34 = OUTLINED_FUNCTION_92();
  OUTLINED_FUNCTION_6_0((uint64_t)v34);
  if (v49)
  {
LABEL_9:
    type metadata accessor for RPCOspreyConnectionProvider();
    lazy protocol witness table accessor for type NetworkConnectionProvider and conformance NetworkConnectionProvider(&lazy protocol witness table cache variable for type RPCOspreyConnectionProvider and conformance RPCOspreyConnectionProvider, 255, (void (*)(uint64_t))type metadata accessor for RPCOspreyConnectionProvider);
    uint64_t v1 = v210;
    char v35 = RPCOspreyConnectionProvider.connectionMetrics.modify();
    uint64_t v10 = v36;
    uint64_t v9 = &demangling cache variable for type metadata for ConnectionSnapshotReport?;
    OUTLINED_FUNCTION_119();
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v37, v38, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
    uint64_t v39 = OUTLINED_FUNCTION_33_2();
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v39, v40, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
    OUTLINED_FUNCTION_2_1((uint64_t)v186);
    if (!v49)
    {
      v209[0] = 1;
      v208[0] = 1;
      v207[0] = 1;
      v206[0] = 1;
      v205[0] = 1;
      v204[0] = 1;
      v203[0] = 1;
      v202[0] = 1;
      v201[0] = 1;
      v200[0] = 1;
      v199[712] = 1;
      v199[0] = 1;
      v198[0] = 1;
      v197[0] = 1;
      v196[0] = 1;
      *(_DWORD *)uint64_t v211 = 0;
      v211[4] = 1;
      memset(&v211[8], 0, 24);
      v211[32] = 1;
      memset(&v211[40], 0, 52);
      v211[92] = 1;
      *(_DWORD *)&v211[96] = 0;
      v211[100] = 1;
      *(void *)&v211[104] = MEMORY[0x263F8EE80];
      memset(&v211[112], 0, 24);
      v211[136] = 1;
      *(void *)&v211[144] = 0;
      v211[152] = 1;
      v211[168] = 1;
      *(void *)&v211[160] = 0;
      *(void *)&v211[176] = 0;
      v211[184] = 1;
      v211[200] = 1;
      *(void *)&v211[192] = 0;
      *(void *)&v211[208] = 0;
      v211[216] = 1;
      memset(&v211[224], 0, 24);
      v211[248] = 1;
      *(void *)&v211[256] = 0;
      v211[264] = 1;
      v211[265] = 0;
      v211[280] = 1;
      *(void *)&v211[272] = 0;
      *(void *)&v211[288] = 0;
      v211[296] = 1;
      *(void *)&v211[304] = 0;
      v211[312] = 1;
      uint64_t v41 = OUTLINED_FUNCTION_122();
      destructiveProjectEnumData for ConnectionConfigurationError(v41);
      uint64_t v10 = (void (*)(void))((char *)v10 + 608);
      uint64_t v9 = &demangling cache variable for type metadata for ConnectionNetworkReport?;
      _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v10, (uint64_t)v212, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
      uint64_t v42 = OUTLINED_FUNCTION_122();
      _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v42, (uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
      char v43 = (__n128 *)OUTLINED_FUNCTION_92();
      outlined retain of ConnectionNetworkReport?(v43);
    }
    ((void (*)(unsigned char *, void))v35)(v210, 0);
  }
  else
  {
    outlined retain of ConnectionNetworkReport?((__n128 *)v211);
  }
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v6 + 568, (uint64_t)v190, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  type metadata accessor for RPCOspreyConnectionProvider();
  lazy protocol witness table accessor for type NetworkConnectionProvider and conformance NetworkConnectionProvider(&lazy protocol witness table cache variable for type RPCOspreyConnectionProvider and conformance RPCOspreyConnectionProvider, 255, (void (*)(uint64_t))type metadata accessor for RPCOspreyConnectionProvider);
  OUTLINED_FUNCTION_70();
  uint64_t v44 = OUTLINED_FUNCTION_30_2();
  uint64_t v46 = OUTLINED_FUNCTION_108((uint64_t)v44, v45);
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v46, v47 + 1824, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)&v183, (uint64_t)v184, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  OUTLINED_FUNCTION_2_1((uint64_t)v184);
  if (v49)
  {
    OUTLINED_FUNCTION_9_3();
    v10();
  }
  else
  {
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v190, (uint64_t)v212, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
    char v48 = OUTLINED_FUNCTION_92();
    OUTLINED_FUNCTION_2_1((uint64_t)v48);
    if (v49)
    {
      long long v50 = 0uLL;
      char v51 = 1;
    }
    else
    {
      long long v50 = *(_OWORD *)&v212[360];
      char v51 = v212[376] & 1;
    }
    v9[58] = v50;
    *((unsigned char *)v9 + 944) = v51;
    OUTLINED_FUNCTION_15();
    v10();
  }
  OUTLINED_FUNCTION_103();
  OUTLINED_FUNCTION_106();
  uint64_t v52 = OUTLINED_FUNCTION_30_2();
  uint64_t v54 = OUTLINED_FUNCTION_108((uint64_t)v52, v53);
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v54, v55 + 400, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)&v181, (uint64_t)v182, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  OUTLINED_FUNCTION_2_1((uint64_t)v182);
  if (v49)
  {
    OUTLINED_FUNCTION_9_3();
    v10();
  }
  else
  {
    OUTLINED_FUNCTION_17_2((uint64_t)(v9 + 38));
    OUTLINED_FUNCTION_3_6();
    OUTLINED_FUNCTION_6_0((uint64_t)v186);
    if (!v56)
    {
      _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v190, (uint64_t)v210, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
      OUTLINED_FUNCTION_2_1((uint64_t)v210);
      if (v49
        || (memcpy(v211, v210, sizeof(v211)),
            _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)&v211[40], (uint64_t)v213, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?), _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v213, (uint64_t)v234, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?), OUTLINED_FUNCTION_6_0((uint64_t)v234), v49))
      {
        int v57 = 0;
        char v58 = 1;
      }
      else
      {
        int v57 = *((_DWORD *)v1 + 720);
        char v58 = v1[2884] & 1;
      }
      *((_DWORD *)v9 + 152) = v57;
      *((unsigned char *)v9 + 612) = v58;
    }
    OUTLINED_FUNCTION_15();
    v10();
  }
  uint64_t v59 = OUTLINED_FUNCTION_95();
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v59, v60 + 848, v61);
  OUTLINED_FUNCTION_2_1((uint64_t)v193);
  if (!v49)
  {
    memcpy(v194, v193, sizeof(v194));
    uint64_t v10 = (void (*)(void))&demangling cache variable for type metadata for ConnectionNetworkReport?;
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)&v194[40], (uint64_t)v222, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v222, (uint64_t)v223, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
    OUTLINED_FUNCTION_6_0((uint64_t)v223);
    if (!v49)
    {
      uint64_t v9 = v224;
      if (v224)
      {
        uint64_t v1 = (unsigned char *)v223[1];
        swift_bridgeObjectRetain();
        uint64_t v10 = (void (*)(void))OUTLINED_FUNCTION_30_2();
        uint64_t v63 = v62;
        OUTLINED_FUNCTION_119();
        _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v64, v65, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
        uint64_t v66 = OUTLINED_FUNCTION_33_2();
        _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v66, v67, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
        OUTLINED_FUNCTION_2_1((uint64_t)v186);
        if (v49)
        {
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_9_3();
          v10();
        }
        else
        {
          _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v63 + 608, (uint64_t)v208, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
          _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v208, (uint64_t)v209, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
          OUTLINED_FUNCTION_6_0((uint64_t)v209);
          if (!v68)
          {
            *(void *)(v63 + 616) = v1;
            *(void *)(v63 + 624) = v9;
          }
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_15();
          v10();
        }
        OUTLINED_FUNCTION_103();
      }
    }
  }
  char v69 = OUTLINED_FUNCTION_30_2();
  uint64_t v71 = OUTLINED_FUNCTION_18_2((uint64_t)v69, v70);
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v71, (uint64_t)v179, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v179, (uint64_t)v180, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  OUTLINED_FUNCTION_2_1((uint64_t)v180);
  if (v49)
  {
    OUTLINED_FUNCTION_9_3();
    v10();
  }
  else
  {
    OUTLINED_FUNCTION_17_2((uint64_t)(v9 + 38));
    OUTLINED_FUNCTION_3_6();
    OUTLINED_FUNCTION_6_0((uint64_t)v186);
    if (!v72)
    {
      uint64_t v73 = OUTLINED_FUNCTION_96();
      _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v73, v74 + 4048, v75);
      OUTLINED_FUNCTION_2_1((uint64_t)v208);
      if (v49
        || (OUTLINED_FUNCTION_106(),
            memcpy(v76, v208, 0x2C8uLL),
            _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)&v207[40], (uint64_t)v214, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?), _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v214, (uint64_t)v233, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?), OUTLINED_FUNCTION_6_0((uint64_t)v233), v49))
      {
        OUTLINED_FUNCTION_21();
      }
      else
      {
        uint64_t v77 = *((void *)v1 + 358);
        char v78 = v1[2872] & 1;
      }
      *((void *)v9 + 114) = v77;
      *((unsigned char *)v9 + 920) = v78;
    }
    OUTLINED_FUNCTION_15();
    v10();
  }
  uint64_t v79 = OUTLINED_FUNCTION_95();
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v79, v80 + 2272, v81);
  OUTLINED_FUNCTION_2_1((uint64_t)v195);
  if (!v49)
  {
    memcpy(v196, v195, sizeof(v196));
    uint64_t v10 = (void (*)(void))&demangling cache variable for type metadata for ConnectionNetworkReport?;
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)&v196[40], (uint64_t)v221, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v221, (uint64_t)v225, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
    OUTLINED_FUNCTION_6_0((uint64_t)v225);
    if (!v49)
    {
      uint64_t v1 = (unsigned char *)v225[265];
      uint64_t v82 = OUTLINED_FUNCTION_30_2();
      uint64_t v84 = OUTLINED_FUNCTION_18_2((uint64_t)v82, v83);
      OUTLINED_FUNCTION_17_2(v84);
      OUTLINED_FUNCTION_3_6();
      OUTLINED_FUNCTION_2_1((uint64_t)v186);
      if (v49)
      {
        OUTLINED_FUNCTION_9_3();
        ((void (*)(void))demangling cache variable for type metadata for ConnectionNetworkReport?)();
      }
      else
      {
        _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)(v9 + 38), (uint64_t)v206, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
        _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v206, (uint64_t)v207, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
        OUTLINED_FUNCTION_6_0((uint64_t)v207);
        if (!v85) {
          *((unsigned char *)v9 + 873) = (_BYTE)v1;
        }
        OUTLINED_FUNCTION_15();
        ((void (*)(void))demangling cache variable for type metadata for ConnectionNetworkReport?)();
      }
      OUTLINED_FUNCTION_103();
    }
  }
  uint64_t v86 = OUTLINED_FUNCTION_30_2();
  uint64_t v88 = OUTLINED_FUNCTION_18_2((uint64_t)v86, v87);
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v88, (uint64_t)v177, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v177, (uint64_t)v178, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  OUTLINED_FUNCTION_2_1((uint64_t)v178);
  if (v49)
  {
    OUTLINED_FUNCTION_9_3();
    v10();
  }
  else
  {
    OUTLINED_FUNCTION_17_2((uint64_t)(v9 + 38));
    OUTLINED_FUNCTION_3_6();
    OUTLINED_FUNCTION_6_0((uint64_t)v186);
    if (!v89)
    {
      uint64_t v90 = OUTLINED_FUNCTION_96();
      _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v90, v91 + 2624, v92);
      OUTLINED_FUNCTION_2_1((uint64_t)v206);
      if (v49
        || (memcpy(v207, v206, sizeof(v207)),
            uint64_t v93 = OUTLINED_FUNCTION_76(),
            _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v93, v94 + 56, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?), _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)&v215, (uint64_t)v232, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?), OUTLINED_FUNCTION_6_0((uint64_t)v232), v49))
      {
        OUTLINED_FUNCTION_21();
      }
      else
      {
        uint64_t v95 = *((void *)v1 + 314);
        char v96 = v1[2520] & 1;
      }
      *((void *)v9 + 110) = v95;
      *((unsigned char *)v9 + 888) = v96;
    }
    OUTLINED_FUNCTION_15();
    v10();
  }
  OUTLINED_FUNCTION_129();
  uint64_t v97 = OUTLINED_FUNCTION_30_2();
  uint64_t v99 = OUTLINED_FUNCTION_18_2((uint64_t)v97, v98);
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v99, (uint64_t)v175, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v175, (uint64_t)v176, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  OUTLINED_FUNCTION_2_1((uint64_t)v176);
  if (v49)
  {
    OUTLINED_FUNCTION_9_3();
    v10();
  }
  else
  {
    OUTLINED_FUNCTION_17_2((uint64_t)(v9 + 38));
    OUTLINED_FUNCTION_3_6();
    OUTLINED_FUNCTION_6_0((uint64_t)v186);
    if (!v100)
    {
      uint64_t v101 = OUTLINED_FUNCTION_96();
      _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v101, v102 + 1200, v103);
      OUTLINED_FUNCTION_2_1((uint64_t)v204);
      if (v49
        || (memcpy(v205, v204, sizeof(v205)),
            uint64_t v104 = OUTLINED_FUNCTION_76(),
            _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v104, v105 + 376, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?), _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)&v216, (uint64_t)v231, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?), OUTLINED_FUNCTION_6_0((uint64_t)v231), v49))
      {
        OUTLINED_FUNCTION_21();
      }
      else
      {
        uint64_t v106 = *((void *)v1 + 276);
        char v107 = v1[2216] & 1;
      }
      *((void *)v9 + 112) = v106;
      *((unsigned char *)v9 + 904) = v107;
    }
    OUTLINED_FUNCTION_15();
    v10();
  }
  uint64_t v108 = OUTLINED_FUNCTION_95();
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v108, v109 + 3696, v110);
  OUTLINED_FUNCTION_2_1((uint64_t)v197);
  if (!v49)
  {
    memcpy(v198, v197, sizeof(v198));
    uint64_t v10 = (void (*)(void))&demangling cache variable for type metadata for ConnectionNetworkReport?;
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)&v198[40], (uint64_t)v220, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v220, (uint64_t)v226, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
    OUTLINED_FUNCTION_6_0((uint64_t)v226);
    if (!v49)
    {
      memcpy(v227, v226, 0x139uLL);
      uint64_t v10 = (void (*)(void))&demangling cache variable for type metadata for Double?;
      _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)&v227[24], (uint64_t)v235, &demangling cache variable for type metadata for Double?);
      _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v235, (uint64_t)&v236, &demangling cache variable for type metadata for Double?);
      if ((v1[3224] & 1) == 0)
      {
        uint64_t v1 = v236;
        uint64_t v111 = OUTLINED_FUNCTION_30_2();
        uint64_t v113 = OUTLINED_FUNCTION_18_2((uint64_t)v111, v112);
        OUTLINED_FUNCTION_17_2(v113);
        OUTLINED_FUNCTION_3_6();
        OUTLINED_FUNCTION_2_1((uint64_t)v186);
        if (v49)
        {
          OUTLINED_FUNCTION_9_3();
          ((void (*)(void))demangling cache variable for type metadata for Double?)();
        }
        else
        {
          _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)(v9 + 38), (uint64_t)v202, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
          _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v202, (uint64_t)v203, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
          OUTLINED_FUNCTION_6_0((uint64_t)v203);
          if (!v114)
          {
            *((void *)v9 + 79) = v1;
            *((unsigned char *)v9 + 640) = 0;
          }
          OUTLINED_FUNCTION_15();
          ((void (*)(void))demangling cache variable for type metadata for Double?)();
        }
        OUTLINED_FUNCTION_103();
      }
    }
  }
  uint64_t v115 = OUTLINED_FUNCTION_30_2();
  uint64_t v117 = OUTLINED_FUNCTION_18_2((uint64_t)v115, v116);
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v117, (uint64_t)v173, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v173, (uint64_t)v174, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  OUTLINED_FUNCTION_2_1((uint64_t)v174);
  if (v49)
  {
    OUTLINED_FUNCTION_9_3();
    v10();
  }
  else
  {
    OUTLINED_FUNCTION_17_2((uint64_t)(v9 + 38));
    OUTLINED_FUNCTION_3_6();
    OUTLINED_FUNCTION_6_0((uint64_t)v186);
    if (!v118)
    {
      uint64_t v119 = OUTLINED_FUNCTION_97();
      _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v119, v120 + 3872, v121);
      OUTLINED_FUNCTION_2_1((uint64_t)v202);
      if (v49
        || (OUTLINED_FUNCTION_129(),
            memcpy(v122, v202, 0x2C8uLL),
            uint64_t v123 = OUTLINED_FUNCTION_76(),
            _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v123, v124 + 696, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?), _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)&v217, (uint64_t)v230, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?), OUTLINED_FUNCTION_6_0((uint64_t)v230), v49))
      {
        uint64_t v125 = 0;
        uint64_t v126 = 0;
      }
      else
      {
        uint64_t v125 = *((void *)v1 + 205);
        uint64_t v126 = swift_bridgeObjectRetain();
      }
      *((void *)v9 + 81) = v125;
      *((void *)v9 + 82) = v126;
      swift_bridgeObjectRelease();
    }
    OUTLINED_FUNCTION_15();
    v10();
  }
  OUTLINED_FUNCTION_114();
  uint64_t v127 = OUTLINED_FUNCTION_30_2();
  uint64_t v129 = OUTLINED_FUNCTION_18_2((uint64_t)v127, v128);
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v129, (uint64_t)v171, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v171, (uint64_t)v172, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  OUTLINED_FUNCTION_2_1((uint64_t)v172);
  if (v49)
  {
    OUTLINED_FUNCTION_9_3();
    v10();
  }
  else
  {
    OUTLINED_FUNCTION_17_2((uint64_t)(v9 + 38));
    OUTLINED_FUNCTION_3_6();
    OUTLINED_FUNCTION_6_0((uint64_t)v186);
    if (!v130)
    {
      char v131 = OUTLINED_FUNCTION_97();
      _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v131, v132 + 2448, v133);
      OUTLINED_FUNCTION_2_1((uint64_t)v200);
      if (v49
        || (memcpy(v201, v200, sizeof(v201)),
            uint64_t v134 = OUTLINED_FUNCTION_76(),
            _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v134, v135 + 1016, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?), _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)&v218, (uint64_t)v229, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?), OUTLINED_FUNCTION_6_0((uint64_t)v229), v49))
      {
        OUTLINED_FUNCTION_21();
      }
      else
      {
        uint64_t v136 = *((void *)v1 + 190);
        char v137 = v1[1528] & 1;
      }
      *((void *)v9 + 106) = v136;
      *((unsigned char *)v9 + 856) = v137;
    }
    OUTLINED_FUNCTION_15();
    v10();
  }
  char v138 = OUTLINED_FUNCTION_30_2();
  uint64_t v140 = v139;
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v139 + 568, (uint64_t)v169, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v169, (uint64_t)v170, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  OUTLINED_FUNCTION_2_1((uint64_t)v170);
  if (v49)
  {
    OUTLINED_FUNCTION_9_3();
    int v141 = v138();
    goto LABEL_114;
  }
  OUTLINED_FUNCTION_119();
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v149, v150, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
  uint64_t v151 = OUTLINED_FUNCTION_33_2();
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v151, v152, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
  OUTLINED_FUNCTION_6_0((uint64_t)v186);
  if (v153)
  {
    OUTLINED_FUNCTION_15();
    int v141 = v138();
LABEL_114:
    uint64_t v154 = v168;
    if (!v168) {
      goto LABEL_116;
    }
LABEL_115:
    OUTLINED_FUNCTION_120(v141, v142, v143, v144, v145, v146, v147, v148, v167, SBYTE2(v167), SHIBYTE(v167));
    memcpy(v185, v8, 0x599uLL);
    char v155 = OUTLINED_FUNCTION_70();
    outlined retain of ConnectionMetrics((uint64_t)v155);
    v154(v185);
    uint64_t v156 = OUTLINED_FUNCTION_70();
    outlined release of ConnectionMetrics((uint64_t)v156);
    goto LABEL_116;
  }
  char v157 = OUTLINED_FUNCTION_97();
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v157, v158 + 1024, v159);
  OUTLINED_FUNCTION_2_1((uint64_t)v199);
  if (v160
    || (OUTLINED_FUNCTION_114(),
        memcpy(v161, v199, 0x2C8uLL),
        uint64_t v162 = OUTLINED_FUNCTION_76(),
        _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v162, v163 + 1336, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?), _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)&v219, (uint64_t)v228, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?), OUTLINED_FUNCTION_6_0((uint64_t)v228), v49))
  {
    OUTLINED_FUNCTION_21();
  }
  else
  {
    uint64_t v164 = *((void *)v1 + 152);
    char v165 = v1[1224] & 1;
  }
  uint64_t v154 = v168;
  *(void *)(v140 + 864) = v164;
  *(unsigned char *)(v140 + 872) = v165;
  OUTLINED_FUNCTION_15();
  int v141 = v138();
  if (v168) {
    goto LABEL_115;
  }
LABEL_116:
  OUTLINED_FUNCTION_29();
}

void specialized ConnectionProviderProtocol.configureNetworkAnalytics()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v3 = OUTLINED_FUNCTION_19_1(v2);
  MEMORY[0x270FA5388](v3);
  int v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = *(id *)(v0 + 2160);
  NetworkAnalytics.resetSequenceNumber()();

  id v7 = *(id *)(v1 + 2160);
  NetworkAnalytics.setIsConnectionActive(_:)(1);

  id v8 = *(id *)(v1 + 2160);
  NetworkAnalytics.getOrchestratorRequestId()((uint64_t)v5);

  uint64_t v9 = type metadata accessor for UUID();
  LODWORD(v8) = __swift_getEnumTagSinglePayload((uint64_t)v5, 1, v9);
  outlined destroy of NetworkConnectionProtocol?((uint64_t)v5, (uint64_t)&demangling cache variable for type metadata for UUID?);
  if (v8 == 1)
  {
    id v10 = *(id *)(v1 + 2160);
    NetworkAnalytics.resetNetId()();

    id v11 = *(id *)(v1 + 2160);
    NetworkAnalytics.setNetIdAvailable(_:)(1);
  }
  id v12 = *(id *)(v1 + 2160);
  NetworkAnalytics.logRequestLinkBetweenOrchestratorAndNetworkComponent()();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;

  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v5 = *(id *)(v0 + 2144);
  NetworkAnalytics.resetSequenceNumber()();

  id v6 = *(id *)(v1 + 2144);
  NetworkAnalytics.setIsConnectionActive(_:)(1);

  id v7 = *(id *)(v1 + 2144);
  NetworkAnalytics.getOrchestratorRequestId()((uint64_t)v4);

  id v8 = type metadata accessor for UUID();
  LODWORD(v7) = __swift_getEnumTagSinglePayload((uint64_t)v4, 1, v8);
  outlined destroy of NetworkConnectionProtocol?((uint64_t)v4, (uint64_t)&demangling cache variable for type metadata for UUID?);
  if (v7 == 1)
  {
    uint64_t v9 = *(id *)(v1 + 2144);
    NetworkAnalytics.resetNetId()();

    id v10 = *(id *)(v1 + 2144);
    NetworkAnalytics.setNetIdAvailable(_:)(1);
  }
  id v11 = *(id *)(v1 + 2144);
  NetworkAnalytics.logRequestLinkBetweenOrchestratorAndNetworkComponent()();
}

uint64_t specialized SafeCallback.reify(_:)(void (*a1)(void))
{
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    a1();
    return swift_release();
  }
  return result;
}

uint64_t NetworkConnectionProvider.connectionIdentifier.getter()
{
  uint64_t v13 = 0;
  unint64_t v14 = 0xE000000000000000;
  OUTLINED_FUNCTION_24_2();
  outlined init with copy of NetworkConnectionProtocol?(v0 + 16, (uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
  uint64_t v2 = v12;
  if (v12)
  {
    uint64_t v3 = __swift_project_boxed_opaque_existential_1(v11, v12);
    uint64_t v4 = *(void *)(v2 - 8);
    MEMORY[0x270FA5388](v3);
    OUTLINED_FUNCTION_82();
    (*(void (**)(uint64_t))(v4 + 16))(v1);
    outlined destroy of NetworkConnectionProtocol?((uint64_t)v11, (uint64_t)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
    uint64_t v5 = NWConnection.identifier.getter();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v2);
    v11[0] = v5;
    uint64_t v6 = String.init<A>(describing:)();
    unint64_t v8 = v7;
  }
  else
  {
    outlined destroy of NetworkConnectionProtocol?((uint64_t)v11, (uint64_t)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
    uint64_t v6 = 0;
    unint64_t v8 = 0xE000000000000000;
  }
  unint64_t v9 = v8;
  String.append(_:)(*(Swift::String *)&v6);
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t (*NetworkConnectionProvider.connectionMetrics.modify())()
{
  return static ConnectionConfigurationError.errorDomain.modify;
}

uint64_t NetworkConnectionProvider.__allocating_init(connectionConfiguration:connectionQueue:networkManager:networkAnalytics:)(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  NetworkConnectionProvider.init(connectionConfiguration:connectionQueue:networkManager:networkAnalytics:)(a1, a2, a3, a4);
  return v8;
}

uint64_t NetworkConnectionProvider.init(connectionConfiguration:connectionQueue:networkManager:networkAnalytics:)(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 1496) = 0;
  *(void *)(v4 + 1512) = 0;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(void *)(v4 + 48) = 0;
  swift_unknownObjectWeakInit();
  *(_WORD *)(v4 + 2096) = 0;
  *(_OWORD *)(v4 + 2080) = 0u;
  *(_OWORD *)(v4 + 2064) = 0u;
  *(_DWORD *)(v4 + 2098) = 1;
  *(_OWORD *)(v4 + 2104) = 0u;
  *(_OWORD *)(v4 + 2120) = 0u;
  *(void *)(v4 + 2136) = 0;
  *(void *)(v4 + 2152) = 0;
  *(_OWORD *)(v4 + 2160) = 0u;
  memcpy((void *)(v4 + 1536), a1, 0x204uLL);
  *(void *)(v4 + 2056) = a2;
  _s11SiriNetwork27ConnectionPreparationReportVSgWOi0_(v12);
  _s11SiriNetwork24ConnectionSnapshotReportVSgWOi0_(v13);
  __src[0] = 0;
  LOBYTE(__src[1]) = 1;
  uint64_t v9 = MEMORY[0x263F8EE78];
  *(_OWORD *)&__src[3] = 0u;
  void __src[2] = MEMORY[0x263F8EE78];
  __src[5] = MEMORY[0x263F8EE78];
  LODWORD(__src[6]) = 0;
  BYTE4(__src[6]) = 1;
  memset(&__src[7], 0, 40);
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v12, (uint64_t)&__src[12], &demangling cache variable for type metadata for ConnectionPreparationReport?);
  memset(&__src[57], 0, 112);
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v13, (uint64_t)&__src[71], (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  __src[160] = v9;
  memset(&__src[161], 0, 40);
  LOBYTE(__src[166]) = 1;
  __src[167] = 0;
  LOBYTE(__src[168]) = 1;
  __src[169] = 0;
  LOBYTE(__src[170]) = 1;
  memset(&__src[171], 0, 20);
  BYTE4(__src[173]) = 1;
  __src[174] = 0;
  LOBYTE(__src[175]) = 1;
  __src[176] = 0;
  LOBYTE(__src[177]) = 1;
  __src[178] = 0;
  LOBYTE(__src[179]) = 1;
  memcpy((void *)(v4 + 56), __src, 0x599uLL);
  *(void *)(v4 + 1520) = 0;
  *(unsigned char *)(v4 + 1528) = 2;
  *(void *)(v4 + 2144) = a4;
  id v10 = *(void **)(v4 + 1496);
  *(void *)(v4 + 1496) = a3;

  return v4;
}

uint64_t NetworkConnectionProvider.deinit()
{
  uint64_t v1 = v0;
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.siriNetwork);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_25D6CC000, v3, v4, "Provider - NetworkConnectionProvider: Deallocating.", v5, 2u);
    OUTLINED_FUNCTION_1_2();
  }

  NetworkConnectionProvider.configureConnectionHandler(_:)(0);
  *(void *)(v1 + 1512) = 0;
  swift_unknownObjectWeakAssign();
  OUTLINED_FUNCTION_113();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?(v6);
  specialized ConnectionProviderProtocol.cancelOpenTimer()();
  specialized ConnectionProviderProtocol.cancelOpenSlowTimer()();
  specialized ConnectionProviderProtocol.cancelStaleConnectionTimer()();
  specialized ConnectionProviderProtocol.cancelConnectionUnviableTimer()();
  NetworkConnectionProvider.closeWithError(_:)();
  unint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl(&dword_25D6CC000, v7, v8, "Provider - NetworkConnectionProvider: Deallocated.", v9, 2u);
    OUTLINED_FUNCTION_1_2();
  }

  outlined destroy of NetworkConnectionProtocol?(v1 + 16, (uint64_t)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
  memcpy(v11, (const void *)(v1 + 56), 0x599uLL);
  outlined release of ConnectionMetrics((uint64_t)v11);

  outlined destroy of weak ConnectionProviderDelegate?(v1 + 1504);
  outlined consume of ConnectionProviderState(*(id *)(v1 + 1520), *(unsigned char *)(v1 + 1528));
  memcpy(__dst, (const void *)(v1 + 1536), 0x204uLL);
  outlined release of ConnectionConfiguration(__dst);

  outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?(*(void *)(v1 + 2064));
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  swift_release();
  swift_release();
  swift_release();
  return v1;
}

uint64_t NetworkConnectionProvider.__deallocating_deinit()
{
  NetworkConnectionProvider.deinit();

  return MEMORY[0x270FA0228](v0, 2176, 7);
}

uint64_t type metadata accessor for NetworkConnectionProvider()
{
  return self;
}

uint64_t NetworkConnectionProvider.openConnectionWithInitialPayload(_:completion:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.siriNetwork);
  id v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl(&dword_25D6CC000, v10, v11, "Provider - NetworkConnectionProvider: Preparing connection with initial payload.", v12, 2u);
    OUTLINED_FUNCTION_1_2();
  }

  OUTLINED_FUNCTION_113();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?(v13);
  specialized ConnectionProviderProtocol.cancelOpenTimer()();
  specialized ConnectionProviderProtocol.cancelOpenSlowTimer()();
  specialized ConnectionProviderProtocol.configureNetworkAnalytics()();
  uint64_t result = specialized NetworkConnectionProvider.createConnectionWithInitialPayload<A>(_:networkConnectionProtocolType:)(a1);
  if (!v4)
  {
    NetworkConnectionProvider.configureConnectionHandler(_:)(v5);
    return NetworkConnectionProvider.startConnectionWithOpenTimeoutTimer(completion:)(a2, a3);
  }
  return result;
}

uint64_t specialized NetworkConnectionProvider.createConnectionWithInitialPayload<A>(_:networkConnectionProtocolType:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWEndpoint?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = &v19[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for NWEndpoint();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  os_log_type_t v11 = &v19[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = &v19[-v12];
  memcpy(v23, (const void *)(v2 + 1536), 0x204uLL);
  memcpy(v22, (const void *)(v2 + 1536), 0x204uLL);
  outlined retain of ConnectionConfiguration(v23);
  NWEndpoint.init(configuration:)(v22, (uint64_t)v6);
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7) == 1)
  {
    outlined destroy of NetworkConnectionProtocol?((uint64_t)v6, (uint64_t)&demangling cache variable for type metadata for NWEndpoint?);
    lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
    swift_allocError();
    *(void *)(v14 + 8) = 0;
    *(void *)(v14 + 16) = 0;
    *(void *)uint64_t v14 = 0;
    *(_OWORD *)(v14 + 24) = xmmword_25D790FF0;
    return swift_willThrow();
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v8 + 32))(v13, v6, v7);
    siri_kdebug_trace();
    uint64_t v16 = type metadata accessor for NWConnection();
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v8 + 16))(v11, v13, v7);
    memcpy(v22, (const void *)(v2 + 1536), 0x204uLL);
    memcpy(v20, (const void *)(v2 + 1536), 0x204uLL);
    v21[3] = v16;
    uint64_t v21[4] = &protocol witness table for NWConnection;
    outlined retain of ConnectionConfiguration(v22);
    id v17 = a1;
    v21[0] = NWConnection.init(endpoint:configuration:with:)((uint64_t)v11, v20, a1);
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v21, (uint64_t)v20, (uint64_t *)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
    swift_beginAccess();
    outlined assign with take of NetworkConnectionProtocol?((uint64_t)v20, v2 + 16);
    swift_endAccess();
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    outlined init with copy of NetworkConnectionProtocol?(v2 + 16, (uint64_t)v20, (uint64_t *)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
    if (v20[3])
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NetworkConnectionProtocol);
      if (swift_dynamicCast()) {
        uint64_t v18 = v21[0];
      }
      else {
        uint64_t v18 = 0;
      }
    }
    else
    {
      outlined destroy of NetworkConnectionProtocol?((uint64_t)v20, (uint64_t)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
      uint64_t v18 = 0;
    }
    NetworkActivityTracing.addNWConnection(_:completion:)(v18, 0, 0);
    swift_release();
    uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t))(v8 + 8))(v13, v7);
    *(unsigned char *)(v2 + 2101) = 0;
  }
  return result;
}

uint64_t NetworkConnectionProvider.configureConnectionHandler(_:)(uint64_t a1)
{
  OUTLINED_FUNCTION_24_2();
  outlined init with copy of NetworkConnectionProtocol?((uint64_t)(v1 + 2), (uint64_t)&aBlock, (uint64_t *)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
  if (v52)
  {
    outlined init with take of RPCOspreyConnectionProtocol(&aBlock, (uint64_t)v59);
    type metadata accessor for NetworkConnectionProvider.StateUpdateHandler(0);
    OUTLINED_FUNCTION_23_2();
    OUTLINED_FUNCTION_98();
    v1[269] = v2;
    uint64_t v5 = swift_release();
    if (v1[269]) {
      uint64_t v5 = swift_weakAssign();
    }
    uint64_t v18 = OUTLINED_FUNCTION_75(v5, v6, v7, v8, v9, v10, v11, v12, v47, aBlock, *((uint64_t *)&aBlock + 1), (uint64_t)v51, (uint64_t)v52, (uint64_t)v53, v54, v55, v56, v57, v58,
            v59[0],
            v60,
            v61,
            v62);
    char v19 = (void (*)(uint64_t))v3[6];
    swift_retain();
    uint64_t v20 = OUTLINED_FUNCTION_27_2();
    v19(v20);
    type metadata accessor for NetworkConnectionProvider.ViabilityUpdateHandler(0);
    OUTLINED_FUNCTION_23_2();
    OUTLINED_FUNCTION_98();
    v1[270] = v18;
    uint64_t v21 = swift_release();
    if (v1[270]) {
      uint64_t v21 = swift_weakAssign();
    }
    uint64_t v29 = OUTLINED_FUNCTION_75(v21, v22, v23, v24, v25, v26, v27, v28, v48, aBlock, *((uint64_t *)&aBlock + 1), (uint64_t)v51, (uint64_t)v52, (uint64_t)v53, v54, v55, v56, v57, v58,
            v59[0],
            v60,
            v61,
            v62);
    int v30 = (void (*)(uint64_t))v3[9];
    swift_retain();
    uint64_t v31 = OUTLINED_FUNCTION_27_2();
    v30(v31);
    type metadata accessor for NetworkConnectionProvider.BetterPathUpdateHandler(0);
    OUTLINED_FUNCTION_23_2();
    OUTLINED_FUNCTION_98();
    v1[271] = v29;
    uint64_t v32 = swift_release();
    if (v1[271]) {
      uint64_t v32 = swift_weakAssign();
    }
    OUTLINED_FUNCTION_75(v32, v33, v34, v35, v36, v37, v38, v39, v49, aBlock, *((uint64_t *)&aBlock + 1), (uint64_t)v51, (uint64_t)v52, (uint64_t)v53, v54, v55, v56, v57, v58,
      v59[0],
      v60,
      v61,
      v62);
    uint64_t v40 = (void (*)(uint64_t))v3[12];
    swift_retain();
    uint64_t v41 = OUTLINED_FUNCTION_27_2();
    v40(v41);
    if (a1)
    {
      outlined init with copy of RPCOspreyConnectionProtocol((uint64_t)v59, (uint64_t)&aBlock);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NetworkConnectionProtocol);
      type metadata accessor for NWConnection();
      if (swift_dynamicCast())
      {
        MEMORY[0x2611B1DD0]();
        uint64_t v42 = OUTLINED_FUNCTION_23_2();
        swift_weakInit();
        uint64_t v53 = partial apply for closure #1 in NetworkConnectionProvider.configureConnectionHandler(_:);
        uint64_t v54 = v42;
        *(void *)&long long aBlock = MEMORY[0x263EF8330];
        *((void *)&aBlock + 1) = 1107296256;
        char v51 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
        uint64_t v52 = &block_descriptor_238;
        char v43 = _Block_copy(&aBlock);
        swift_release();
        OUTLINED_FUNCTION_112();
        nw_connection_set_read_close_handler();
        _Block_release(v43);
        uint64_t v44 = swift_unknownObjectRelease();
        MEMORY[0x2611B1DD0](v44);
        uint64_t v45 = OUTLINED_FUNCTION_23_2();
        swift_weakInit();
        uint64_t v53 = partial apply for closure #2 in NetworkConnectionProvider.configureConnectionHandler(_:);
        uint64_t v54 = v45;
        *(void *)&long long aBlock = MEMORY[0x263EF8330];
        *((void *)&aBlock + 1) = 1107296256;
        char v51 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
        uint64_t v52 = &block_descriptor_242;
        uint64_t v46 = _Block_copy(&aBlock);
        swift_release();
        nw_connection_set_write_close_handler();
        _Block_release(v46);
        swift_release();
        swift_unknownObjectRelease();
      }
    }
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)v59);
  }
  else
  {
    outlined destroy of NetworkConnectionProtocol?((uint64_t)&aBlock, (uint64_t)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
    lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
    uint64_t v13 = OUTLINED_FUNCTION_16_0();
    OUTLINED_FUNCTION_37(v13, v14);
    return OUTLINED_FUNCTION_31((__n128)xmmword_25D790FF0, v15, v16);
  }
}

uint64_t implicit closure #2 in implicit closure #1 in NetworkConnectionProvider.configureConnectionHandler(_:)()
{
  return specialized SafeCallback.reify(_:)((void (*)(void))partial apply for closure #1 in NetworkConnectionProvider.StateUpdateHandler.handleStateUpdate@Sendable (_:));
}

uint64_t implicit closure #4 in implicit closure #3 in NetworkConnectionProvider.configureConnectionHandler(_:)(char a1, uint64_t a2, void (*a3)(void))
{
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    a3(a1 & 1);
    return swift_release();
  }
  return result;
}

void closure #1 in NetworkConnectionProvider.configureConnectionHandler(_:)()
{
  OUTLINED_FUNCTION_22();
  uint64_t v34 = v1;
  uint64_t v35 = v2;
  uint64_t v36 = type metadata accessor for DispatchWorkItemFlags();
  OUTLINED_FUNCTION_0_0();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_2();
  uint64_t v6 = type metadata accessor for DispatchQoS();
  OUTLINED_FUNCTION_0_0();
  uint64_t v37 = v7;
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_0_1();
  uint64_t v11 = v10 - v9;
  uint64_t v12 = type metadata accessor for DispatchTime();
  OUTLINED_FUNCTION_0_0();
  uint64_t v14 = v13;
  uint64_t v16 = MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_67();
  uint64_t v20 = v19;
  OUTLINED_FUNCTION_24_2();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    id v31 = *(id *)(Strong + 2056);
    swift_release();
    static DispatchTime.now()();
    uint64_t v30 = v20;
    MEMORY[0x2611B2190](v18, 1.0);
    uint64_t v22 = *(void (**)(void, void))(v14 + 8);
    uint64_t v32 = v14 + 8;
    uint64_t v33 = v22;
    v22(v18, v12);
    uint64_t v23 = OUTLINED_FUNCTION_23_2();
    OUTLINED_FUNCTION_24_2();
    swift_weakLoadStrong();
    swift_weakInit();
    swift_release();
    v39[4] = v34;
    v39[5] = v23;
    v39[0] = MEMORY[0x263EF8330];
    v39[1] = 1107296256;
    v39[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v39[3] = v35;
    uint64_t v24 = _Block_copy(v39);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v38 = MEMORY[0x263F8EE78];
    lazy protocol witness table accessor for type NetworkConnectionProvider and conformance NetworkConnectionProvider((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, 255, MEMORY[0x263F8F030]);
    uint64_t v25 = v36;
    uint64_t v26 = v37;
    uint64_t v34 = v6;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    uint64_t v35 = v12;
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    uint64_t v27 = v31;
    uint64_t v28 = OUTLINED_FUNCTION_112();
    MEMORY[0x2611B24C0](v28);
    _Block_release(v24);

    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0, v25);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v11, v34);
    OUTLINED_FUNCTION_12_2();
    v29();
    swift_release();
    swift_release();
  }
  OUTLINED_FUNCTION_29();
}

uint64_t closure #1 in closure #1 in NetworkConnectionProvider.configureConnectionHandler(_:)(uint64_t a1, const char *a2)
{
  OUTLINED_FUNCTION_24_2();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    if (one-time initialization token for siriNetwork != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.siriNetwork);
    swift_retain_n();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)OUTLINED_FUNCTION_12_0();
      uint64_t v11 = OUTLINED_FUNCTION_10_0();
      *(_DWORD *)uint64_t v7 = 136315138;
      OUTLINED_FUNCTION_24_2();
      uint64_t Strong = swift_weakLoadStrong();
      if (Strong)
      {
        NetworkConnectionProvider.connectionIdentifier.getter();
        swift_release();
        uint64_t Strong = String.init<A>(describing:)();
        unint64_t v10 = v9;
      }
      else
      {
        unint64_t v10 = 0xE000000000000000;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(Strong, v10, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_25D6CC000, v5, v6, a2, v7, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_1_2();
      OUTLINED_FUNCTION_1_2();
    }
    else
    {

      swift_release_n();
    }
    NetworkConnectionProvider.closeWithError(_:)();
    return swift_release();
  }
  return result;
}

uint64_t NetworkConnectionProvider.startConnectionWithOpenTimeoutTimer(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_24_2();
  outlined init with copy of NetworkConnectionProtocol?(v3 + 16, (uint64_t)&v17, (uint64_t *)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
  if (v18)
  {
    outlined init with take of RPCOspreyConnectionProtocol(&v17, (uint64_t)v19);
    specialized ConnectionProviderProtocol.openCompletionSetup(completion:)(a1, a2);
    specialized ConnectionProviderProtocol.setupOpenTimeoutTimer()();
    specialized ConnectionProviderProtocol.setupOpenSlowTimer()();
    if (one-time initialization token for siriNetwork != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.siriNetwork);
    swift_retain_n();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      unint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v17 = swift_slowAlloc();
      *(_DWORD *)unint64_t v9 = 136315138;
      uint64_t v10 = NetworkConnectionProvider.connectionIdentifier.getter();
      v19[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, (uint64_t *)&v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_25D6CC000, v7, v8, "Provider - NetworkConnectionProvider [%s]: Connection start", v9, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_1_2();
      OUTLINED_FUNCTION_1_2();
    }
    else
    {

      swift_release_n();
    }
    __swift_project_boxed_opaque_existential_1(v19, v19[3]);
    NWConnection.start(queue:)();
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)v19);
  }
  else
  {
    outlined destroy of NetworkConnectionProtocol?((uint64_t)&v17, (uint64_t)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
    lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
    uint64_t v12 = OUTLINED_FUNCTION_16_0();
    OUTLINED_FUNCTION_37(v12, v13);
    return OUTLINED_FUNCTION_31((__n128)xmmword_25D790FF0, v14, v15);
  }
}

void NetworkConnectionProvider.closeWithError(_:)()
{
  OUTLINED_FUNCTION_22();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  type metadata accessor for DispatchWorkItemFlags();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_0_1();
  if (*(unsigned char *)(v0 + 2099)) {
    goto LABEL_44;
  }
  *(unsigned char *)(v0 + 2099) = 1;
  if (v3)
  {
    v57[0] = v3;
    id v6 = v3;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    if (swift_dynamicCast())
    {
      if ((unint64_t)v58[3] >> 60 == 10 && !v58[4])
      {
        BOOL v7 = v58[3] == 0xA000000000000000 && v58[0] == 1;
        if (v7 && *(_OWORD *)&v58[1] == 0)
        {
          OUTLINED_FUNCTION_107();
          if (!v7) {
            swift_once();
          }
          uint64_t v8 = type metadata accessor for Logger();
          OUTLINED_FUNCTION_45(v8, (uint64_t)static Logger.siriNetwork);
          unint64_t v9 = Logger.logObject.getter();
          os_log_type_t v10 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v9, v10))
          {
            unint64_t v11 = (uint8_t *)OUTLINED_FUNCTION_12_0();
            v58[0] = OUTLINED_FUNCTION_10_0();
            uint64_t v12 = OUTLINED_FUNCTION_104(4.8149e-34);
            uint64_t v14 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, v58);
            OUTLINED_FUNCTION_65(v14);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            OUTLINED_FUNCTION_36_0();
            swift_bridgeObjectRelease();
            uint64_t v15 = "Provider - NetworkConnectionProvider [%s]: Close and cancel connection after receiving cancellation";
LABEL_20:
            _os_log_impl(&dword_25D6CC000, v9, v10, v15, v11, 0xCu);
            swift_arrayDestroy();
            goto LABEL_26;
          }
          goto LABEL_29;
        }
      }
      outlined consume of NetworkConnectionError((void *)v58[0], v58[1], v58[2], v58[3], (void *)v58[4]);
    }
    OUTLINED_FUNCTION_107();
    if (!v7) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.siriNetwork);
    id v21 = v3;
    swift_retain();
    id v22 = v3;
    swift_retain();
    unint64_t v9 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v9, v23))
    {
      OUTLINED_FUNCTION_36_0();

      goto LABEL_28;
    }
    uint64_t v24 = OUTLINED_FUNCTION_69();
    uint64_t v25 = (void *)swift_slowAlloc();
    v58[0] = OUTLINED_FUNCTION_10_0();
    *(_DWORD *)uint64_t v24 = 136315394;
    uint64_t v26 = NetworkConnectionProvider.connectionIdentifier.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_36_0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v24 + 12) = 2112;
    id v28 = v3;
    v57[0] = _swift_stdlib_bridgeErrorToNSError();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v25 = v57[0];

    _os_log_impl(&dword_25D6CC000, v9, v23, "Provider - NetworkConnectionProvider [%s]: Close and cancel connection for error: %@", (uint8_t *)v24, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_1_2();
    swift_arrayDestroy();
LABEL_26:
    OUTLINED_FUNCTION_1_2();
    OUTLINED_FUNCTION_1_2();
LABEL_28:

    goto LABEL_30;
  }
  OUTLINED_FUNCTION_107();
  if (!v7) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_45(v16, (uint64_t)static Logger.siriNetwork);
  unint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    unint64_t v11 = (uint8_t *)OUTLINED_FUNCTION_12_0();
    v58[0] = OUTLINED_FUNCTION_10_0();
    uint64_t v17 = OUTLINED_FUNCTION_104(4.8149e-34);
    uint64_t v19 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, v58);
    OUTLINED_FUNCTION_65(v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_36_0();
    swift_bridgeObjectRelease();
    uint64_t v15 = "Provider - NetworkConnectionProvider [%s]: Close and cancel connection with no error";
    goto LABEL_20;
  }
LABEL_29:

  OUTLINED_FUNCTION_36_0();
LABEL_30:
  specialized ConnectionProviderProtocol.cancelStaleConnectionTimer()();
  specialized ConnectionProviderProtocol.cancelConnectionUnviableTimer()();
  specialized ConnectionProviderProtocol.cancelOpenTimer()();
  specialized ConnectionProviderProtocol.cancelOpenSlowTimer()();
  uint64_t v29 = *(void (**)(void **))(v0 + 2064);
  uint64_t v30 = *(void *)(v0 + 2072);
  uint64_t v31 = OUTLINED_FUNCTION_23_2();
  swift_weakInit();
  uint64_t v32 = (void *)swift_allocObject();
  v32[2] = v31;
  v32[3] = v29;
  v32[4] = v30;
  v32[5] = v3;
  OUTLINED_FUNCTION_24_2();
  outlined init with copy of NetworkConnectionProtocol?(v1 + 16, (uint64_t)&v59, (uint64_t *)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
  if (v60)
  {
    outlined init with take of RPCOspreyConnectionProtocol(&v59, (uint64_t)v61);
    __swift_project_boxed_opaque_existential_1(v61, v61[3]);
    outlined copy of (@escaping @callee_guaranteed (@in_guaranteed LinkRecommendationInfo?) -> ())?((uint64_t)v29);
    id v33 = v3;
    outlined copy of (@escaping @callee_guaranteed (@in_guaranteed LinkRecommendationInfo?) -> ())?((uint64_t)v29);
    uint64_t v49 = NWConnection.identifier.getter();
    NetworkConnectionProvider.updateConnectionMetricsSnapshotReport()();
    OUTLINED_FUNCTION_24_2();
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v1 + 624, (uint64_t)v57, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v57, (uint64_t)v58, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
    OUTLINED_FUNCTION_2_1((uint64_t)v58);
    if (!v7)
    {
      _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v57, (uint64_t)v52, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
      outlined retain of ConnectionSnapshotReport((uint64_t)v52);
      OUTLINED_FUNCTION_107();
      if (!v7) {
        swift_once();
      }
      uint64_t v34 = type metadata accessor for Logger();
      __swift_project_value_buffer(v34, (uint64_t)static Logger.siriNetwork);
      _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v57, (uint64_t)&v53, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
      outlined retain of ConnectionSnapshotReport((uint64_t)&v53);
      outlined retain of ConnectionSnapshotReport((uint64_t)v52);
      uint64_t v35 = Logger.logObject.getter();
      os_log_type_t v36 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v35, v36))
      {
        uint64_t v37 = (uint8_t *)OUTLINED_FUNCTION_12_0();
        uint64_t v50 = OUTLINED_FUNCTION_10_0();
        *(_DWORD *)uint64_t v37 = 136315138;
        memcpy(v51, v58, sizeof(v51));
        outlined retain of ConnectionSnapshotReport((uint64_t)v52);
        uint64_t v38 = String.init<A>(describing:)();
        v51[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, &v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined release of ConnectionSnapshotReport?((uint64_t)v57);
        outlined release of ConnectionSnapshotReport?((uint64_t)v57);
        _os_log_impl(&dword_25D6CC000, v35, v36, "%s", v37, 0xCu);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_1_2();
        OUTLINED_FUNCTION_1_2();

        outlined release of ConnectionSnapshotReport?((uint64_t)v57);
      }
      else
      {
        outlined release of ConnectionSnapshotReport?((uint64_t)v57);
        outlined release of ConnectionSnapshotReport?((uint64_t)v57);
        _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v57, (uint64_t)v51, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
        outlined release of ConnectionSnapshotReport((uint64_t)v51);
      }
    }
    uint64_t v55 = 0;
    long long v53 = 0u;
    long long v54 = 0u;
    swift_beginAccess();
    outlined assign with take of NetworkConnectionProtocol?((uint64_t)&v53, v1 + 16);
    swift_endAccess();
    uint64_t v41 = dispatch_group_create();
    dispatch_group_enter(v41);
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    outlined init with copy of RPCOspreyConnectionProtocol((uint64_t)v61, (uint64_t)&v53);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NetworkConnectionProtocol);
    type metadata accessor for NWConnection();
    if (swift_dynamicCast()) {
      uint64_t v42 = *(void *)&v52[0];
    }
    else {
      uint64_t v42 = 0;
    }
    uint64_t v43 = OUTLINED_FUNCTION_23_2();
    *(void *)(v43 + 16) = v41;
    uint64_t v44 = v41;
    NetworkActivityTracing.removeNWConnection(_:completion:)(v42, (uint64_t (*)(void))partial apply for closure #2 in NetworkConnectionProvider.closeWithError(_:), v43);
    swift_release();
    swift_release();
    outlined init with copy of RPCOspreyConnectionProtocol((uint64_t)v61, (uint64_t)v52);
    uint64_t v45 = (void *)swift_allocObject();
    v45[2] = v49;
    outlined init with take of RPCOspreyConnectionProtocol(v52, (uint64_t)(v45 + 3));
    v45[8] = partial apply for closure #1 in NetworkConnectionProvider.closeWithError(_:);
    v45[9] = v32;
    uint64_t v55 = partial apply for closure #3 in NetworkConnectionProvider.closeWithError(_:);
    uint64_t v56 = v45;
    *(void *)&long long v53 = MEMORY[0x263EF8330];
    *((void *)&v53 + 1) = 1107296256;
    *(void *)&long long v54 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    *((void *)&v54 + 1) = &block_descriptor_219;
    uint64_t v46 = _Block_copy(&v53);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    v51[0] = MEMORY[0x263F8EE78];
    lazy protocol witness table accessor for type NetworkConnectionProvider and conformance NetworkConnectionProvider((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, 255, MEMORY[0x263F8F030]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OUTLINED_FUNCTION_86();
    OS_dispatch_group.notify(qos:flags:queue:execute:)();
    _Block_release(v46);

    swift_release();
    outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?((uint64_t)v29);
    OUTLINED_FUNCTION_12_2();
    v47();
    OUTLINED_FUNCTION_12_2();
    v48();
    swift_release();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v61);
  }
  else
  {
    outlined copy of (@escaping @callee_guaranteed (@in_guaranteed LinkRecommendationInfo?) -> ())?((uint64_t)v29);
    id v40 = v3;
    outlined copy of (@escaping @callee_guaranteed (@in_guaranteed LinkRecommendationInfo?) -> ())?((uint64_t)v29);
    swift_retain();
    outlined destroy of NetworkConnectionProtocol?((uint64_t)&v59, (uint64_t)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
    closure #1 in NetworkConnectionProvider.closeWithError(_:)(v31, v29, v30, v3);
    swift_release();
    outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?((uint64_t)v29);
    swift_release();
  }
LABEL_44:
  OUTLINED_FUNCTION_29();
}

void closure #1 in NetworkConnectionProvider.closeWithError(_:)(uint64_t a1, void (*a2)(void **), uint64_t a3, void *a4)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v7 = Strong;
    if (a2)
    {
      unint64_t v11 = a4;
      long long v12 = 0u;
      long long v13 = 0u;
      char v14 = 1;
      outlined copy of (@escaping @callee_guaranteed (@in_guaranteed LinkRecommendationInfo?) -> ())?((uint64_t)a2);
      id v8 = a4;
      a2(&v11);
      outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?((uint64_t)a2);
    }
    else if (MEMORY[0x2611B37F0](Strong + 1504))
    {
      swift_retain();
      specialized BackgroundConnection.connectionProvider(_:received:)();
      swift_unknownObjectRelease();
      swift_release();
    }
    id v9 = *(id *)(v7 + 2144);
    NetworkAnalytics.setIsConnectionActive(_:)(0);

    id v10 = *(id *)(v7 + 2144);
    NetworkAnalytics.setNetIdAvailable(_:)(0);
    swift_release();
  }
}

uint64_t closure #3 in NetworkConnectionProvider.closeWithError(_:)(uint64_t a1, void *a2, void (*a3)(void))
{
  uint64_t v6 = type metadata accessor for NWConnection.SendCompletion();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  id v9 = (void (**)(uint64_t))&v14[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a1;
  *id v9 = partial apply for closure #1 in closure #3 in NetworkConnectionProvider.closeWithError(_:);
  v9[1] = (void (*)(uint64_t))v10;
  (*(void (**)(void (**)(uint64_t), void, uint64_t))(v7 + 104))(v9, *MEMORY[0x263F141E0], v6);
  outlined init with copy of RPCOspreyConnectionProtocol((uint64_t)a2, (uint64_t)v14);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NetworkConnectionProtocol);
  type metadata accessor for NWConnection();
  if (swift_dynamicCast())
  {
    MEMORY[0x2611B1DD0]();
    nw_connection_set_read_close_handler();
    uint64_t v11 = swift_unknownObjectRelease();
    MEMORY[0x2611B1DD0](v11);
    nw_connection_set_write_close_handler();
    swift_release();
    swift_unknownObjectRelease();
  }
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  type metadata accessor for NWConnection.ContentContext();
  static NWConnection.ContentContext.defaultMessage.getter();
  NWConnection.send(content:contentContext:isComplete:completion:)();
  swift_release();
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  NWConnection.cancel()();
  a3();
  return (*(uint64_t (**)(void (**)(uint64_t), uint64_t))(v7 + 8))(v9, v6);
}

void closure #1 in closure #3 in NetworkConnectionProvider.closeWithError(_:)(uint64_t a1, uint64_t a2)
{
  v18[1] = *MEMORY[0x263EF8340];
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWError?);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  uint64_t v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  id v9 = (char *)v18 - v8;
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.siriNetwork);
  outlined init with copy of NetworkConnectionProtocol?(a1, (uint64_t)v9, &demangling cache variable for type metadata for NWError?);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc();
    char v14 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 134218242;
    v18[0] = a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 12) = 2112;
    outlined init with copy of NetworkConnectionProtocol?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for NWError?);
    uint64_t v15 = type metadata accessor for NWError();
    if (__swift_getEnumTagSinglePayload((uint64_t)v7, 1, v15) == 1)
    {
      outlined destroy of NetworkConnectionProtocol?((uint64_t)v7, (uint64_t)&demangling cache variable for type metadata for NWError?);
      v18[0] = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v16 = 0;
    }
    else
    {
      lazy protocol witness table accessor for type NetworkConnectionProvider and conformance NetworkConnectionProvider((unint64_t *)&lazy protocol witness table cache variable for type NWError and conformance NWError, 255, MEMORY[0x263F14320]);
      swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v17, v7, v15);
      uint64_t v16 = _swift_stdlib_bridgeErrorToNSError();
      v18[0] = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
    }
    *char v14 = v16;
    outlined destroy of NetworkConnectionProtocol?((uint64_t)v9, (uint64_t)&demangling cache variable for type metadata for NWError?);
    _os_log_impl(&dword_25D6CC000, v11, v12, "Provider - NetworkConnectionProvider [%llu]: Close. Nil content sent to close connection. Start cancelling connection. Close error %@", (uint8_t *)v13, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x2611B3750](v14, -1, -1);
    MEMORY[0x2611B3750](v13, -1, -1);
  }
  else
  {
    outlined destroy of NetworkConnectionProtocol?((uint64_t)v9, (uint64_t)&demangling cache variable for type metadata for NWError?);
  }
}

void NetworkConnectionProvider.handleStateUpdate(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  OUTLINED_FUNCTION_22();
  a19 = v21;
  a20 = v22;
  uint64_t v23 = v20;
  uint64_t v162 = v24;
  uint64_t v25 = type metadata accessor for ConnectionAnalysisInfo();
  OUTLINED_FUNCTION_0_7();
  MEMORY[0x270FA5388](v26);
  OUTLINED_FUNCTION_5_5();
  uint64_t v143 = v27;
  OUTLINED_FUNCTION_13_2();
  MEMORY[0x270FA5388](v28);
  OUTLINED_FUNCTION_67();
  uint64_t v144 = v29;
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConnectionAnalysisInfo?);
  uint64_t v31 = OUTLINED_FUNCTION_19_1(v30);
  MEMORY[0x270FA5388](v31);
  OUTLINED_FUNCTION_5_5();
  uint64_t v145 = v32;
  OUTLINED_FUNCTION_13_2();
  MEMORY[0x270FA5388](v33);
  OUTLINED_FUNCTION_67();
  uint64_t v147 = v34;
  uint64_t v151 = type metadata accessor for NWError();
  OUTLINED_FUNCTION_0_0();
  uint64_t v150 = v35;
  MEMORY[0x270FA5388](v36);
  OUTLINED_FUNCTION_5_5();
  uint64_t v148 = v37;
  OUTLINED_FUNCTION_13_2();
  MEMORY[0x270FA5388](v38);
  OUTLINED_FUNCTION_67();
  uint64_t v149 = v39;
  uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NWConnection.State?);
  uint64_t v41 = OUTLINED_FUNCTION_19_1(v40);
  MEMORY[0x270FA5388](v41);
  OUTLINED_FUNCTION_5_5();
  uint64_t v155 = v42;
  OUTLINED_FUNCTION_13_2();
  MEMORY[0x270FA5388](v43);
  uint64_t v45 = (char *)&v139 - v44;
  uint64_t v46 = type metadata accessor for NWConnection.State();
  OUTLINED_FUNCTION_0_0();
  uint64_t v48 = v47;
  MEMORY[0x270FA5388](v49);
  OUTLINED_FUNCTION_5_5();
  uint64_t v153 = v50;
  OUTLINED_FUNCTION_13_2();
  MEMORY[0x270FA5388](v51);
  uint64_t v152 = (char *)&v139 - v52;
  OUTLINED_FUNCTION_13_2();
  MEMORY[0x270FA5388](v53);
  char v161 = (char *)&v139 - v54;
  OUTLINED_FUNCTION_13_2();
  MEMORY[0x270FA5388](v55);
  uint64_t v159 = NetworkConnectionProvider.connectionIdentifier.getter();
  unint64_t v57 = v56;
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v146 = v25;
  uint64_t v58 = type metadata accessor for Logger();
  uint64_t v59 = __swift_project_value_buffer(v58, (uint64_t)static Logger.siriNetwork);
  uint64_t v60 = *(void (**)(void))(v48 + 16);
  OUTLINED_FUNCTION_28_2();
  v60();
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  uint64_t v157 = v59;
  uint64_t v61 = Logger.logObject.getter();
  int v154 = static os_log_type_t.default.getter();
  BOOL v62 = os_log_type_enabled(v61, (os_log_type_t)v154);
  uint64_t v63 = &off_25D790000;
  uint64_t v158 = v48;
  char v160 = v60;
  if (v62)
  {
    int v141 = (uint64_t (*__ptr32 *)())v61;
    uint64_t v156 = v23;
    uint64_t v64 = OUTLINED_FUNCTION_10_0();
    uint64_t v140 = swift_slowAlloc();
    uint64_t v165 = v140;
    *(_DWORD *)uint64_t v64 = 136315650;
    swift_bridgeObjectRetain();
    *(void *)&v166[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v159, v57, &v165);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    unint64_t v142 = v57;
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v64 + 12) = 2080;
    OUTLINED_FUNCTION_28_2();
    v60();
    OUTLINED_FUNCTION_88((uint64_t)v45);
    uint64_t v65 = v155;
    outlined init with copy of NetworkConnectionProtocol?((uint64_t)v45, v155, (uint64_t *)&demangling cache variable for type metadata for NWConnection.State?);
    OUTLINED_FUNCTION_131(v65);
    if (v66)
    {
      unint64_t v74 = 0xE100000000000000;
      uint64_t v72 = 45;
      uint64_t v69 = v158;
    }
    else
    {
      uint64_t v69 = v158;
      uint64_t v70 = v161;
      OUTLINED_FUNCTION_20_1();
      v71();
      OUTLINED_FUNCTION_41();
      v60();
      uint64_t v72 = String.init<A>(describing:)();
      unint64_t v74 = v73;
      (*(void (**)(char *, uint64_t))(v69 + 8))(v70, v46);
    }
    outlined destroy of NetworkConnectionProtocol?((uint64_t)v45, (uint64_t)&demangling cache variable for type metadata for NWConnection.State?);
    *(void *)&v166[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v72, v74, &v165);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v67 = *(void (**)(void))(v69 + 8);
    OUTLINED_FUNCTION_112();
    OUTLINED_FUNCTION_125();
    v67();
    *(_WORD *)(v64 + 22) = 2080;
    uint64_t v75 = v156 + 16;
    OUTLINED_FUNCTION_24_2();
    outlined init with copy of NetworkConnectionProtocol?(v75, (uint64_t)v166, (uint64_t *)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
    outlined init with copy of NetworkConnectionProtocol?((uint64_t)v166, (uint64_t)&v167, (uint64_t *)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
    if (v169)
    {
      outlined init with take of RPCOspreyConnectionProtocol(&v167, (uint64_t)v164);
      outlined init with copy of RPCOspreyConnectionProtocol((uint64_t)v164, (uint64_t)&v163);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NetworkConnectionProtocol);
      uint64_t v76 = String.init<A>(describing:)();
      unint64_t v78 = v77;
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v164);
    }
    else
    {
      unint64_t v78 = 0xE100000000000000;
      uint64_t v76 = 45;
    }
    os_log_type_t v79 = v154;
    outlined destroy of NetworkConnectionProtocol?((uint64_t)v166, (uint64_t)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
    *(void *)&v166[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, v78, &v165);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v23 = v156;
    swift_release_n();
    swift_bridgeObjectRelease();
    uint64_t v63 = v141;
    _os_log_impl(&dword_25D6CC000, (os_log_t)v141, v79, "Provider - NetworkConnectionProvider [%s]: State updated to %s. Info: %s", (uint8_t *)v64, 0x20u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_1_2();
    OUTLINED_FUNCTION_1_2();

    unint64_t v57 = v142;
  }
  else
  {
    swift_bridgeObjectRelease_n();
    uint64_t v67 = *(void (**)(void))(v48 + 8);
    uint64_t v68 = OUTLINED_FUNCTION_112();
    ((void (*)(uint64_t))v67)(v68);

    swift_release_n();
  }
  OUTLINED_FUNCTION_99((uint64_t)&a13);
  uint64_t v80 = v160;
  OUTLINED_FUNCTION_41();
  v80();
  uint64_t v81 = ConnectionProviderState.init(from:)((uint64_t)v63);
  uint64_t v82 = *(void **)(v23 + 1520);
  *(void *)(v23 + 1520) = v81;
  unsigned __int8 v83 = *(unsigned char *)(v23 + 1528);
  *(unsigned char *)(v23 + 1528) = v84;
  outlined consume of ConnectionProviderState(v82, v83);
  uint64_t v85 = v23 + 16;
  OUTLINED_FUNCTION_24_2();
  outlined init with copy of NetworkConnectionProtocol?(v23 + 16, (uint64_t)v166, (uint64_t *)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
  if (!*((void *)&v166[1] + 1))
  {
    outlined destroy of NetworkConnectionProtocol?((uint64_t)v166, (uint64_t)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
LABEL_16:
    swift_bridgeObjectRetain();
    uint64_t v88 = Logger.logObject.getter();
    unint64_t v89 = v57;
    os_log_type_t v90 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v88, v90))
    {
      uint64_t v91 = (uint8_t *)OUTLINED_FUNCTION_12_0();
      *(void *)&v166[0] = OUTLINED_FUNCTION_10_0();
      *(_DWORD *)uint64_t v91 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)&long long v167 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v159, v89, (uint64_t *)v166);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_25D6CC000, v88, v90, "Provider - NetworkConnectionProvider [%s]: Connection state updated, but connection does not exist or was cancelled", v91, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_1_2();
      OUTLINED_FUNCTION_1_2();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    goto LABEL_45;
  }
  uint64_t v86 = v23;
  uint64_t v87 = (unsigned char *)(v23 + 2099);
  outlined init with take of RPCOspreyConnectionProtocol(v166, (uint64_t)&v167);
  if (*v87)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v167);
    goto LABEL_16;
  }
  OUTLINED_FUNCTION_99((uint64_t)&v168);
  OUTLINED_FUNCTION_41();
  v80();
  uint64_t v92 = v158;
  int v93 = (*(uint64_t (**)(uint64_t, uint64_t))(v158 + 88))(v85, v46);
  if (v93 == *MEMORY[0x263F14218])
  {
    swift_bridgeObjectRelease();
    uint64_t v94 = OUTLINED_FUNCTION_80();
    v95(v94);
    uint64_t v96 = v150;
    uint64_t v97 = v149;
    uint64_t v98 = v151;
    OUTLINED_FUNCTION_20_1();
    v99();
    lazy protocol witness table accessor for type NetworkConnectionProvider and conformance NetworkConnectionProvider((unint64_t *)&lazy protocol witness table cache variable for type NWError and conformance NWError, 255, MEMORY[0x263F14320]);
    uint64_t v100 = OUTLINED_FUNCTION_16_0();
    OUTLINED_FUNCTION_105(v100, v101);
    uint64_t v102 = *(void (**)(void))(v96 + 16);
    OUTLINED_FUNCTION_41();
    v102();
    uint64_t v103 = *(void **)(v86 + 2104);
    *(void *)(v86 + 2104) = v85;

    if (MEMORY[0x2611B37F0](v86 + 1504))
    {
      uint64_t v104 = OUTLINED_FUNCTION_16_0();
      OUTLINED_FUNCTION_105(v104, v105);
      OUTLINED_FUNCTION_41();
      v102();
      lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
      uint64_t v106 = (void *)OUTLINED_FUNCTION_16_0();
      *(void *)(v107 + 8) = 0;
      *(void *)(v107 + 16) = 0;
      *(void *)uint64_t v107 = v85;
      *(_OWORD *)(v107 + 24) = xmmword_25D791780;
      specialized BackgroundConnection.connectionProvider(_:received:)();

      swift_unknownObjectRelease();
    }
    (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v97, v98);
  }
  else
  {
    int v108 = v93;
    if (v93 == *MEMORY[0x263F14210])
    {
      swift_bridgeObjectRelease();
      uint64_t v109 = OUTLINED_FUNCTION_80();
      v110(v109);
      uint64_t v111 = v150;
      uint64_t v112 = v148;
      uint64_t v113 = v151;
      OUTLINED_FUNCTION_20_1();
      v114();
      lazy protocol witness table accessor for type NetworkConnectionProvider and conformance NetworkConnectionProvider((unint64_t *)&lazy protocol witness table cache variable for type NWError and conformance NWError, 255, MEMORY[0x263F14320]);
      uint64_t v115 = OUTLINED_FUNCTION_16_0();
      uint64_t v117 = OUTLINED_FUNCTION_105(v115, v116);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v111 + 16))(v117, v112, v113);
      lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
      char v118 = (void *)OUTLINED_FUNCTION_16_0();
      *(void *)(v119 + 8) = 0;
      *(void *)(v119 + 16) = 0;
      *(void *)uint64_t v119 = v85;
      *(_OWORD *)(v119 + 24) = xmmword_25D791770;
      NetworkConnectionProvider.closeWithError(_:)();

      uint64_t v120 = OUTLINED_FUNCTION_73();
      v121(v120);
    }
    else if (v93 == *MEMORY[0x263F14208])
    {
      swift_bridgeObjectRelease();
    }
    else if (v93 == *MEMORY[0x263F14228])
    {
      swift_bridgeObjectRelease();
      __swift_project_boxed_opaque_existential_1(&v167, v169);
      uint64_t v122 = NWConnection.identifier.getter();
      OUTLINED_FUNCTION_128();
      *(void *)(v86 + 56) = v122;
      *(unsigned char *)(v86 + 64) = 0;
      NetworkConnectionProvider.updateAndEmitConnectionMetricsPreparationReport()();
    }
    else if (v93 == *MEMORY[0x263F14200])
    {
      *(unsigned char *)(v86 + 2101) = 1;
      specialized ConnectionProviderProtocol.setupStaleConnectionTimer()();
      NetworkConnectionProvider.updateAndEmitConnectionMetricsReadyEstablishmentReport()();
      outlined init with copy of RPCOspreyConnectionProtocol((uint64_t)&v167, (uint64_t)v166);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NetworkConnectionProtocol);
      type metadata accessor for NWConnection();
      unint64_t v123 = v57;
      if (swift_dynamicCast())
      {
        MEMORY[0x2611B1DD0]();
        char v124 = nw_connection_uses_multipath();
        swift_unknownObjectRelease();
        swift_release();
        *(unsigned char *)(v86 + 2100) = v124;
      }
      NetworkConnectionProvider.updateConnectionMetricsSnapshotReport()();
      uint64_t v125 = *(void (**)(long long *))(v86 + 2064);
      if (v125)
      {
        memset(v166, 0, 41);
        swift_retain();
        v125(v166);
        outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?((uint64_t)v125);
        uint64_t v126 = *(void *)(v86 + 2064);
      }
      else
      {
        uint64_t v126 = 0;
      }
      *(void *)(v86 + 2064) = 0;
      *(void *)(v86 + 2072) = 0;
      outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?(v126);
      swift_retain_n();
      swift_bridgeObjectRetain();
      char v130 = Logger.logObject.getter();
      os_log_type_t v131 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v130, v131))
      {
        swift_slowAlloc();
        *(void *)&v166[0] = OUTLINED_FUNCTION_40();
        *(_DWORD *)uint64_t v92 = 136315650;
        swift_bridgeObjectRetain();
        uint64_t v163 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v159, v123, (uint64_t *)v166);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v92 + 12) = 1024;
        int v132 = v87[1];
        swift_release();
        LODWORD(v163) = v132;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        *(_WORD *)(v92 + 18) = 2080;
        uint64_t v133 = v147;
        specialized ConnectionProviderProtocol.connectionAnalysisInfo.getter(v147);
        uint64_t v134 = v145;
        outlined init with copy of NetworkConnectionProtocol?(v133, v145, &demangling cache variable for type metadata for ConnectionAnalysisInfo?);
        if (__swift_getEnumTagSinglePayload(v134, 1, v146) == 1)
        {
          unint64_t v135 = 0xE700000000000000;
          uint64_t v136 = 0x6E776F6E6B6E75;
        }
        else
        {
          uint64_t v137 = v144;
          outlined init with take of ConnectionAnalysisInfo(v134, v144);
          outlined init with copy of ConnectionAnalysisInfo(v137, v143);
          uint64_t v136 = String.init<A>(describing:)();
          unint64_t v135 = v138;
          outlined destroy of ConnectionAnalysisInfo(v137);
        }
        outlined destroy of NetworkConnectionProtocol?(v147, (uint64_t)&demangling cache variable for type metadata for ConnectionAnalysisInfo?);
        uint64_t v163 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v136, v135, (uint64_t *)v166);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_25D6CC000, v130, v131, "Provider - NetworkConnectionProvider [%s]: isMPTCP %{BOOL}d, Analysis Info - %s", (uint8_t *)v92, 0x1Cu);
        OUTLINED_FUNCTION_37_0();
        OUTLINED_FUNCTION_1_2();
        OUTLINED_FUNCTION_1_2();
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_release_n();
      }
    }
    else
    {
      int v127 = *MEMORY[0x263F14220];
      swift_bridgeObjectRelease();
      if (v108 == v127)
      {
        lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
        uint64_t v128 = (void *)OUTLINED_FUNCTION_16_0();
        *(void *)(v129 + 8) = 0;
        *(void *)(v129 + 16) = 0;
        *(void *)uint64_t v129 = 1;
        *(_OWORD *)(v129 + 24) = xmmword_25D790FF0;
        NetworkConnectionProvider.closeWithError(_:)();
      }
      else
      {
        OUTLINED_FUNCTION_125();
        v67();
      }
    }
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v167);
LABEL_45:
  OUTLINED_FUNCTION_29();
}

void NetworkConnectionProvider.handleViabilityUpdate(_:)()
{
  OUTLINED_FUNCTION_22();
  char v1 = v0;
  type metadata accessor for DispatchWorkItemFlags();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_2();
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_45(v4, (uint64_t)static Logger.siriNetwork);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = OUTLINED_FUNCTION_69();
    v18[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315394;
    uint64_t v8 = NetworkConnectionProvider.connectionIdentifier.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_36_0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2080;
    if (v1) {
      uint64_t v10 = 0x656C62616976;
    }
    else {
      uint64_t v10 = 0x656C626169766E75;
    }
    if (v1) {
      unint64_t v11 = 0xE600000000000000;
    }
    else {
      unint64_t v11 = 0xE800000000000000;
    }
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_25D6CC000, v5, v6, "Provider - NetworkConnectionProvider [%s]: Viability update. Connection %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_1_2();
    OUTLINED_FUNCTION_1_2();
  }
  else
  {

    OUTLINED_FUNCTION_36_0();
  }
  uint64_t v12 = OUTLINED_FUNCTION_23_2();
  swift_weakInit();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v12;
  *(unsigned char *)(v13 + 24) = v1 & 1;
  v18[4] = (uint64_t)partial apply for closure #1 in NetworkConnectionProvider.handleViabilityUpdate(_:);
  v18[5] = v13;
  v18[0] = MEMORY[0x263EF8330];
  OUTLINED_FUNCTION_126(COERCE_DOUBLE(1107296256));
  void v18[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> ();
  uint64_t v18[3] = (uint64_t)&block_descriptor_171;
  char v14 = _Block_copy(v18);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  lazy protocol witness table accessor for type NetworkConnectionProvider and conformance NetworkConnectionProvider((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, 255, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  OUTLINED_FUNCTION_60();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v15 = OUTLINED_FUNCTION_61();
  MEMORY[0x2611B24E0](v15);
  _Block_release(v14);
  OUTLINED_FUNCTION_12_2();
  v16();
  OUTLINED_FUNCTION_12_2();
  v17();
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_29();
}

void closure #1 in NetworkConnectionProvider.handleViabilityUpdate(_:)(uint64_t a1, unsigned __int8 a2)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v4 = Strong;
    uint64_t v5 = Strong + 16;
    swift_beginAccess();
    outlined init with copy of NetworkConnectionProtocol?(v5, (uint64_t)v26, (uint64_t *)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
    uint64_t v6 = v26[3];
    outlined destroy of NetworkConnectionProtocol?((uint64_t)v26, (uint64_t)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
    if (!v6 || (uint64_t v7 = (unsigned char *)(v4 + 2098), (*(unsigned char *)(v4 + 2099) & 1) != 0))
    {
      if (one-time initialization token for siriNetwork != -1) {
        swift_once();
      }
      uint64_t v8 = type metadata accessor for Logger();
      __swift_project_value_buffer(v8, (uint64_t)static Logger.siriNetwork);
      swift_retain_n();
      unint64_t v9 = Logger.logObject.getter();
      os_log_type_t v10 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v9, v10))
      {
        unint64_t v11 = (uint8_t *)swift_slowAlloc();
        uint64_t v12 = swift_slowAlloc();
        v26[0] = v12;
        *(_DWORD *)unint64_t v11 = 136315138;
        uint64_t v13 = NetworkConnectionProvider.connectionIdentifier.getter();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, v26);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_25D6CC000, v9, v10, "Provider - NetworkConnectionProvider [%s]: Viability updated, but connection does not exist or cancelled", v11, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x2611B3750](v12, -1, -1);
        MEMORY[0x2611B3750](v11, -1, -1);
        swift_release();

        return;
      }

      goto LABEL_9;
    }
    if (*v7 != (a2 & 1))
    {
      if (one-time initialization token for siriNetwork != -1) {
        swift_once();
      }
      uint64_t v15 = type metadata accessor for Logger();
      __swift_project_value_buffer(v15, (uint64_t)static Logger.siriNetwork);
      swift_retain_n();
      uint64_t v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v16, v17))
      {
        uint64_t v18 = swift_slowAlloc();
        uint64_t v19 = swift_slowAlloc();
        v26[0] = v19;
        *(_DWORD *)uint64_t v18 = 136315650;
        uint64_t v20 = NetworkConnectionProvider.connectionIdentifier.getter();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, v26);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v18 + 12) = 1024;
        swift_release();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        *(_WORD *)(v18 + 18) = 1024;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_25D6CC000, v16, v17, "Provider - NetworkConnectionProvider [%s]: Viability updated from %{BOOL}d to %{BOOL}d", (uint8_t *)v18, 0x18u);
        swift_arrayDestroy();
        MEMORY[0x2611B3750](v19, -1, -1);
        MEMORY[0x2611B3750](v18, -1, -1);
      }
      else
      {

        swift_release_n();
      }
    }
    if (*(unsigned char *)(v4 + 2100) == 1)
    {
      if ((*v7 ^ a2))
      {
        uint64_t v22 = a2 & 1;
        *(unsigned char *)(v4 + 2098) = a2 & 1;
        uint64_t v23 = MEMORY[0x2611B37F0](v4 + 1504);
        if (v23)
        {
          uint64_t v24 = v23;
          uint64_t v25 = swift_retain();
          specialized BackgroundConnection.connectionProvider(_:receivedViabilityChangeNotification:)(v25, v22, v24);
          swift_unknownObjectRelease();
LABEL_9:
          swift_release_n();
          return;
        }
      }
    }
    else if ((*v7 ^ a2))
    {
      *uint64_t v7 = a2 & 1;
      if (a2)
      {
        specialized ConnectionProviderProtocol.cancelConnectionUnviableTimer()();
      }
      else if (!*(void *)(v4 + 2136))
      {
        specialized ConnectionProviderProtocol.setupConnectionUnviableTimer()();
      }
    }
    swift_release();
  }
}

uint64_t NetworkConnectionProvider.StateUpdateHandler.__deallocating_deinit()
{
  swift_weakDestroy();
  uint64_t v0 = OUTLINED_FUNCTION_90();

  return MEMORY[0x270FA0228](v0, v1, v2);
}

void NetworkConnectionProvider.handleBetterPathUpdate(_:)()
{
  OUTLINED_FUNCTION_22();
  char v1 = v0;
  type metadata accessor for DispatchWorkItemFlags();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_2();
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_45(v4, (uint64_t)static Logger.siriNetwork);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)OUTLINED_FUNCTION_12_0();
    v16[0] = OUTLINED_FUNCTION_10_0();
    *(_DWORD *)uint64_t v7 = 136315138;
    uint64_t v8 = NetworkConnectionProvider.connectionIdentifier.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_36_0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_25D6CC000, v5, v6, "Provider - NetworkConnectionProvider [%s]: handle better path update", v7, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_1_2();
    OUTLINED_FUNCTION_1_2();
  }
  else
  {

    OUTLINED_FUNCTION_36_0();
  }
  uint64_t v10 = OUTLINED_FUNCTION_23_2();
  swift_weakInit();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v10;
  *(unsigned char *)(v11 + 24) = v1 & 1;
  v16[4] = (uint64_t)partial apply for closure #1 in NetworkConnectionProvider.handleBetterPathUpdate(_:);
  v16[5] = v11;
  v16[0] = MEMORY[0x263EF8330];
  OUTLINED_FUNCTION_126(COERCE_DOUBLE(1107296256));
  v16[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v16[3] = (uint64_t)&block_descriptor_5;
  uint64_t v12 = _Block_copy(v16);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  lazy protocol witness table accessor for type NetworkConnectionProvider and conformance NetworkConnectionProvider((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, 255, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  OUTLINED_FUNCTION_60();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v13 = OUTLINED_FUNCTION_61();
  MEMORY[0x2611B24E0](v13);
  _Block_release(v12);
  OUTLINED_FUNCTION_12_2();
  v14();
  OUTLINED_FUNCTION_12_2();
  v15();
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_29();
}

void closure #1 in NetworkConnectionProvider.handleBetterPathUpdate(_:)(uint64_t a1, char a2)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v4 = Strong;
    if (one-time initialization token for siriNetwork != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.siriNetwork);
    swift_retain_n();
    os_log_type_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      v33[0] = v9;
      *(_DWORD *)uint64_t v8 = 136315394;
      uint64_t v10 = NetworkConnectionProvider.connectionIdentifier.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v8 + 12) = 2080;
      if (a2) {
        uint64_t v12 = 5457241;
      }
      else {
        uint64_t v12 = 20302;
      }
      if (a2) {
        unint64_t v13 = 0xE300000000000000;
      }
      else {
        unint64_t v13 = 0xE200000000000000;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_25D6CC000, v6, v7, "Provider - NetworkConnectionProvider [%s]: Better path available updated to: %s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x2611B3750](v9, -1, -1);
      MEMORY[0x2611B3750](v8, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    swift_beginAccess();
    outlined init with copy of NetworkConnectionProtocol?(v4 + 16, (uint64_t)v33, (uint64_t *)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
    uint64_t v14 = v33[3];
    outlined destroy of NetworkConnectionProtocol?((uint64_t)v33, (uint64_t)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
    if (v14 && (*(unsigned char *)(v4 + 2099) & 1) == 0)
    {
      uint64_t v22 = MEMORY[0x2611B37F0](v4 + 1504);
      if (v22)
      {
        uint64_t v23 = v22;
        if (a2)
        {
          swift_retain_n();
          uint64_t v24 = Logger.logObject.getter();
          os_log_type_t v25 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v24, v25))
          {
            uint64_t v26 = (uint8_t *)swift_slowAlloc();
            uint64_t v27 = swift_slowAlloc();
            v33[0] = v27;
            *(_DWORD *)uint64_t v26 = 136315138;
            uint64_t v28 = NetworkConnectionProvider.connectionIdentifier.getter();
            getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, v33);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_25D6CC000, v24, v25, "Provider - NetworkConnectionProvider [%s]: Better path available updated to YES", v26, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x2611B3750](v27, -1, -1);
            MEMORY[0x2611B3750](v26, -1, -1);
          }
          else
          {

            swift_release_n();
          }
          uint64_t v32 = swift_retain();
          specialized BackgroundConnection.connectionProviderReceivedBetterRouteNotification(_:)(v32, v23);
          swift_unknownObjectRelease();
          goto LABEL_26;
        }
        swift_unknownObjectRelease();
      }
      swift_retain_n();
      uint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v15, v16))
      {
        os_log_type_t v17 = (uint8_t *)swift_slowAlloc();
        uint64_t v18 = swift_slowAlloc();
        v33[0] = v18;
        *(_DWORD *)os_log_type_t v17 = 136315138;
        uint64_t v30 = NetworkConnectionProvider.connectionIdentifier.getter();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, v33);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        unint64_t v21 = "Provider - NetworkConnectionProvider [%s]: Better path available updated to NO";
        goto LABEL_24;
      }
    }
    else
    {
      swift_retain_n();
      uint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v15, v16))
      {
        os_log_type_t v17 = (uint8_t *)swift_slowAlloc();
        uint64_t v18 = swift_slowAlloc();
        v33[0] = v18;
        *(_DWORD *)os_log_type_t v17 = 136315138;
        uint64_t v19 = NetworkConnectionProvider.connectionIdentifier.getter();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, v33);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        unint64_t v21 = "Provider - NetworkConnectionProvider [%s]: Better path available updated, but connection does not exist or cancelled";
LABEL_24:
        _os_log_impl(&dword_25D6CC000, v15, v16, v21, v17, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x2611B3750](v18, -1, -1);
        MEMORY[0x2611B3750](v17, -1, -1);
        swift_release();

        return;
      }
    }

LABEL_26:
    swift_release_n();
  }
}

uint64_t NetworkConnectionProvider.send(data:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v25[6] = a2;
  uint64_t v7 = type metadata accessor for NWConnection.SendCompletion();
  OUTLINED_FUNCTION_0_0();
  uint64_t v9 = v8;
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_0_1();
  unint64_t v13 = (void (**)(uint64_t))(v12 - v11);
  OUTLINED_FUNCTION_24_2();
  outlined init with copy of NetworkConnectionProtocol?(v4 + 16, (uint64_t)&v23, (uint64_t *)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
  if (!v24)
  {
    outlined destroy of NetworkConnectionProtocol?((uint64_t)&v23, (uint64_t)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
    goto LABEL_5;
  }
  outlined init with take of RPCOspreyConnectionProtocol(&v23, (uint64_t)v25);
  if (*(unsigned char *)(v4 + 2099))
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v25);
LABEL_5:
    lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
    uint64_t v14 = OUTLINED_FUNCTION_16_0();
    OUTLINED_FUNCTION_37(v14, v15);
    return OUTLINED_FUNCTION_31((__n128)xmmword_25D790FF0, v16, v17);
  }
  uint64_t v19 = OUTLINED_FUNCTION_23_2();
  swift_weakInit();
  unint64_t v20 = (void (*)(uint64_t))swift_allocObject();
  *((void *)v20 + 2) = v19;
  *((void *)v20 + 3) = a3;
  *((void *)v20 + 4) = a4;
  *unint64_t v13 = partial apply for closure #1 in NetworkConnectionProvider.send(data:completion:);
  v13[1] = v20;
  (*(void (**)(void (**)(uint64_t), void, uint64_t))(v9 + 104))(v13, *MEMORY[0x263F141E0], v7);
  __swift_project_boxed_opaque_existential_1(v25, v25[3]);
  type metadata accessor for NWConnection.ContentContext();
  swift_retain();
  static NWConnection.ContentContext.defaultMessage.getter();
  NWConnection.send(content:contentContext:isComplete:completion:)();
  swift_release();
  uint64_t v21 = OUTLINED_FUNCTION_73();
  v22(v21);
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v25);
}

void closure #1 in NetworkConnectionProvider.send(data:completion:)(uint64_t a1, uint64_t a2, void (*a3)(void, void), uint64_t a4)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWError?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = &v57[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = type metadata accessor for NWError();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v14 = &v57[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = &v57[-v15];
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    return;
  }
  uint64_t v18 = Strong;
  if (*(unsigned char *)(Strong + 2099) == 1)
  {
    if (one-time initialization token for siriNetwork != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.siriNetwork);
    swift_retain_n();
    unint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      uint64_t v67 = v23;
      *(_DWORD *)uint64_t v22 = 136315138;
      uint64_t v24 = NetworkConnectionProvider.connectionIdentifier.getter();
      uint64_t v66 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_25D6CC000, v20, v21, "Provider - NetworkConnectionProvider [%s]: Failed to send. Connection was cancelled", v22, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2611B3750](v23, -1, -1);
      MEMORY[0x2611B3750](v22, -1, -1);
      swift_release();
    }
    else
    {

      swift_release_n();
    }
    return;
  }
  outlined init with copy of NetworkConnectionProtocol?(a1, (uint64_t)v9, &demangling cache variable for type metadata for NWError?);
  if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10) == 1)
  {
    outlined destroy of NetworkConnectionProtocol?((uint64_t)v9, (uint64_t)&demangling cache variable for type metadata for NWError?);
    uint64_t v26 = *(void *)(v18 + 2080);
    BOOL v27 = __CFADD__(v26, 1);
    uint64_t v28 = v26 + 1;
    if (v27)
    {
      __break(1u);
    }
    else
    {
      *(void *)(v18 + 2080) = v28;
      if (one-time initialization token for siriNetwork == -1)
      {
LABEL_10:
        uint64_t v29 = type metadata accessor for Logger();
        __swift_project_value_buffer(v29, (uint64_t)static Logger.siriNetwork);
        swift_retain_n();
        uint64_t v30 = Logger.logObject.getter();
        os_log_type_t v31 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v30, v31))
        {
          uint64_t v32 = (uint8_t *)swift_slowAlloc();
          uint64_t v33 = swift_slowAlloc();
          uint64_t v67 = v33;
          *(_DWORD *)uint64_t v32 = 136315138;
          uint64_t v34 = NetworkConnectionProvider.connectionIdentifier.getter();
          uint64_t v66 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, &v67);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_25D6CC000, v30, v31, "Provider - NetworkConnectionProvider [%s]: Sent data successfully", v32, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x2611B3750](v33, -1, -1);
          MEMORY[0x2611B3750](v32, -1, -1);
        }
        else
        {

          swift_release_n();
        }
        a3(0, 0);
        swift_release();
        return;
      }
    }
    swift_once();
    goto LABEL_10;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v11 + 32))(v16, v9, v10);
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v65 = a4;
  uint64_t v36 = type metadata accessor for Logger();
  __swift_project_value_buffer(v36, (uint64_t)static Logger.siriNetwork);
  uint64_t v37 = *(void (**)(uint64_t, unsigned char *, uint64_t))(v11 + 16);
  v37((uint64_t)v14, v16, v10);
  swift_retain_n();
  uint64_t v38 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.error.getter();
  int v40 = v39;
  if (os_log_type_enabled(v38, v39))
  {
    uint64_t v41 = swift_slowAlloc();
    uint64_t v63 = a3;
    uint64_t v42 = v41;
    uint64_t v60 = (void *)swift_slowAlloc();
    uint64_t v62 = swift_slowAlloc();
    uint64_t v67 = v62;
    *(_DWORD *)uint64_t v42 = 136315394;
    uint64_t v64 = v37;
    os_log_t v59 = v38;
    uint64_t v43 = NetworkConnectionProvider.connectionIdentifier.getter();
    int v58 = v40;
    uint64_t v66 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v42 + 12) = 2112;
    lazy protocol witness table accessor for type NetworkConnectionProvider and conformance NetworkConnectionProvider((unint64_t *)&lazy protocol witness table cache variable for type NWError and conformance NWError, 255, MEMORY[0x263F14320]);
    swift_allocError();
    v64(v45, v14, v10);
    uint64_t v46 = _swift_stdlib_bridgeErrorToNSError();
    uint64_t v66 = v46;
    uint64_t v37 = v64;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v61 = v11 + 16;
    uint64_t v47 = v60;
    *uint64_t v60 = v46;
    uint64_t v48 = v14;
    uint64_t v49 = *(void (**)(unsigned char *, uint64_t))(v11 + 8);
    v49(v48, v10);
    uint64_t v38 = v59;
    _os_log_impl(&dword_25D6CC000, v59, (os_log_type_t)v58, "Provider - NetworkConnectionProvider [%s]: Failed to send data with error: %@", (uint8_t *)v42, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x2611B3750](v47, -1, -1);
    uint64_t v50 = v62;
    swift_arrayDestroy();
    MEMORY[0x2611B3750](v50, -1, -1);
    uint64_t v51 = v42;
    a3 = v63;
    MEMORY[0x2611B3750](v51, -1, -1);
  }
  else
  {
    swift_release_n();
    uint64_t v52 = v14;
    uint64_t v49 = *(void (**)(unsigned char *, uint64_t))(v11 + 8);
    v49(v52, v10);
  }

  lazy protocol witness table accessor for type NetworkConnectionProvider and conformance NetworkConnectionProvider((unint64_t *)&lazy protocol witness table cache variable for type NWError and conformance NWError, 255, MEMORY[0x263F14320]);
  uint64_t v53 = swift_allocError();
  v37((uint64_t)v54, v16, v10);
  lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
  uint64_t v55 = (void *)swift_allocError();
  *(void *)(v56 + 8) = 0;
  *(void *)(v56 + 16) = 0;
  *(void *)uint64_t v56 = v53;
  *(_OWORD *)(v56 + 24) = xmmword_25D791000;
  a3(v55, 1);

  swift_release();
  v49(v16, v10);
}

uint64_t NetworkConnectionProvider.readData(_:)(uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.siriNetwork);
  swift_retain_n();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    v21[0] = swift_slowAlloc();
    v21[6] = v3;
    *(_DWORD *)uint64_t v9 = 136315138;
    uint64_t v10 = NetworkConnectionProvider.connectionIdentifier.getter();
    *(void *)&long long v19 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_25D6CC000, v7, v8, "Provider - NetworkConnectionProvider [%s]: Reader. Ready to receive data.", v9, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_1_2();
    OUTLINED_FUNCTION_1_2();
  }
  else
  {

    swift_release_n();
  }
  OUTLINED_FUNCTION_24_2();
  outlined init with copy of NetworkConnectionProtocol?(v2 + 16, (uint64_t)&v19, (uint64_t *)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
  if (!v20)
  {
    outlined destroy of NetworkConnectionProtocol?((uint64_t)&v19, (uint64_t)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
    goto LABEL_10;
  }
  outlined init with take of RPCOspreyConnectionProtocol(&v19, (uint64_t)v21);
  if (*(unsigned char *)(v2 + 2099))
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v21);
LABEL_10:
    lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
    uint64_t v12 = OUTLINED_FUNCTION_16_0();
    OUTLINED_FUNCTION_37(v12, v13);
    return OUTLINED_FUNCTION_31((__n128)xmmword_25D790FF0, v14, v15);
  }
  __swift_project_boxed_opaque_existential_1(v21, v21[3]);
  uint64_t v17 = OUTLINED_FUNCTION_23_2();
  swift_weakInit();
  uint64_t v18 = (void *)swift_allocObject();
  void v18[2] = v17;
  uint64_t v18[3] = a1;
  v18[4] = a2;
  swift_retain();
  swift_retain();
  NWConnection.receive(minimumIncompleteLength:maximumLength:completion:)();
  swift_release();
  swift_release();
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v21);
}

void closure #1 in NetworkConnectionProvider.readData(_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, unint64_t, void *, uint64_t))
{
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWError?);
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  uint64_t v14 = (char *)v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)v35 - v15;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    if (*(unsigned char *)(Strong + 2099))
    {
      if (one-time initialization token for siriNetwork != -1) {
        swift_once();
      }
      uint64_t v18 = type metadata accessor for Logger();
      __swift_project_value_buffer(v18, (uint64_t)static Logger.siriNetwork);
      swift_retain_n();
      long long v19 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v19, v20))
      {
        os_log_type_t v21 = (uint8_t *)swift_slowAlloc();
        uint64_t v22 = swift_slowAlloc();
        uint64_t v36 = v22;
        *(_DWORD *)os_log_type_t v21 = 136315138;
        uint64_t v23 = NetworkConnectionProvider.connectionIdentifier.getter();
        v35[1] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v36);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_25D6CC000, v19, v20, "Provider - NetworkConnectionProvider [%s]: Reader got data, but connection was cancelled", v21, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x2611B3750](v22, -1, -1);
        MEMORY[0x2611B3750](v21, -1, -1);
        swift_release();
      }
      else
      {

        swift_release_n();
      }
    }
    else
    {
      uint64_t v25 = *(void *)(Strong + 2080);
      BOOL v26 = __CFADD__(v25, 1);
      uint64_t v27 = v25 + 1;
      if (v26)
      {
        __break(1u);
      }
      else
      {
        *(void *)(Strong + 2080) = v27;
        outlined init with copy of NetworkConnectionProtocol?(a5, (uint64_t)v16, &demangling cache variable for type metadata for NWError?);
        if (a2 >> 60 == 15
          || (uint64_t v28 = type metadata accessor for NWError(),
              __swift_getEnumTagSinglePayload((uint64_t)v16, 1, v28) != 1))
        {
          outlined destroy of NetworkConnectionProtocol?((uint64_t)v16, (uint64_t)&demangling cache variable for type metadata for NWError?);
          outlined init with copy of NetworkConnectionProtocol?(a5, (uint64_t)v14, &demangling cache variable for type metadata for NWError?);
          uint64_t v31 = type metadata accessor for NWError();
          if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, v31) == 1)
          {
            outlined destroy of NetworkConnectionProtocol?((uint64_t)v14, (uint64_t)&demangling cache variable for type metadata for NWError?);
            lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
            uint64_t v29 = (void *)swift_allocError();
            uint64_t v30 = 0;
            *(void *)(v32 + 16) = 0;
            *(void *)uint64_t v32 = 0;
          }
          else
          {
            lazy protocol witness table accessor for type NetworkConnectionProvider and conformance NetworkConnectionProvider((unint64_t *)&lazy protocol witness table cache variable for type NWError and conformance NWError, 255, MEMORY[0x263F14320]);
            uint64_t v33 = swift_allocError();
            (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v31 - 8) + 32))(v34, v14, v31);
            lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
            uint64_t v29 = (void *)swift_allocError();
            uint64_t v30 = 0;
            *(void *)(v32 + 16) = 0;
            *(void *)uint64_t v32 = v33;
          }
          *(void *)(v32 + 8) = 0;
          *(_OWORD *)(v32 + 24) = xmmword_25D791790;
        }
        else
        {
          outlined destroy of NetworkConnectionProtocol?((uint64_t)v16, (uint64_t)&demangling cache variable for type metadata for NWError?);
          uint64_t v29 = 0;
          uint64_t v30 = 1;
        }
        a7(a1, a2, v29, v30);

        swift_release();
      }
    }
  }
}

Swift::Void __swiftcall NetworkConnectionProvider.updateAndEmitConnectionMetricsPreparationReport()()
{
  OUTLINED_FUNCTION_22();
  MEMORY[0x270FA5388](v2);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWPath?);
  uint64_t v4 = OUTLINED_FUNCTION_19_1(v3);
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_82();
  OUTLINED_FUNCTION_24_2();
  outlined init with copy of NetworkConnectionProtocol?(v0 + 16, (uint64_t)&v39, (uint64_t *)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
  if (v40)
  {
    outlined init with take of RPCOspreyConnectionProtocol(&v39, (uint64_t)v41);
    __swift_project_boxed_opaque_existential_1(v41, v41[3]);
    NWConnection.currentPath.getter();
    ConnectionPreparationReport.init(path:)(v1, v38);
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v38, (uint64_t)v35, &demangling cache variable for type metadata for ConnectionPreparationReport?);
    OUTLINED_FUNCTION_128();
    uint64_t v5 = v0 + 152;
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v0 + 152, (uint64_t)v36, &demangling cache variable for type metadata for ConnectionPreparationReport?);
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v35, v0 + 152, &demangling cache variable for type metadata for ConnectionPreparationReport?);
    outlined release of ConnectionPreparationReport?((uint64_t)v36);
    uint64_t v6 = NetworkConnectionProvider.connectionMetrics.modify();
    uint64_t v8 = v7;
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v7 + 96, (uint64_t)v37, &demangling cache variable for type metadata for ConnectionPreparationReport?);
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v37, (uint64_t)v38, &demangling cache variable for type metadata for ConnectionPreparationReport?);
    if (_s11SiriNetwork27ConnectionPreparationReportVSgWOg((uint64_t)v38) == 1)
    {
      ((void (*)(void *, void))v6)(v29, 0);
    }
    else
    {
      uint64_t v9 = (void *)0xE000000000000000;
      uint64_t v27 = 0;
      unint64_t v28 = 0xE000000000000000;
      outlined init with copy of RPCOspreyConnectionProtocol((uint64_t)v41, (uint64_t)v34);
      outlined init with copy of NetworkConnectionProtocol?((uint64_t)v34, (uint64_t)&v32, (uint64_t *)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
      if (v33)
      {
        outlined init with take of RPCOspreyConnectionProtocol(&v32, (uint64_t)v31);
        outlined init with copy of RPCOspreyConnectionProtocol((uint64_t)v31, (uint64_t)v30);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NetworkConnectionProtocol);
        uint64_t v10 = String.init<A>(describing:)();
        uint64_t v9 = v11;
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v31);
      }
      else
      {
        uint64_t v10 = 0;
      }
      outlined destroy of NetworkConnectionProtocol?((uint64_t)v34, (uint64_t)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
      v12._uint64_t countAndFlagsBits = v10;
      v12._object = v9;
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      unint64_t v13 = v28;
      *(void *)(v8 + 96) = v27;
      *(void *)(v8 + 104) = v13;
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_15();
      v6();
    }
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v5, (uint64_t)&v32, &demangling cache variable for type metadata for ConnectionPreparationReport?);
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)&v32, (uint64_t)v34, &demangling cache variable for type metadata for ConnectionPreparationReport?);
    if (_s11SiriNetwork27ConnectionPreparationReportVSgWOg((uint64_t)v34) != 1)
    {
      _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)&v32, (uint64_t)v30, &demangling cache variable for type metadata for ConnectionPreparationReport?);
      outlined retain of ConnectionPreparationReport(v30);
      if (one-time initialization token for siriNetwork != -1) {
        swift_once();
      }
      uint64_t v14 = type metadata accessor for Logger();
      __swift_project_value_buffer(v14, (uint64_t)static Logger.siriNetwork);
      _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)&v32, (uint64_t)v31, &demangling cache variable for type metadata for ConnectionPreparationReport?);
      outlined retain of ConnectionPreparationReport(v31);
      outlined retain of ConnectionPreparationReport(v30);
      uint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.default.getter();
      if (OUTLINED_FUNCTION_24_0(v16))
      {
        uint64_t v17 = (uint8_t *)OUTLINED_FUNCTION_12_0();
        uint64_t v27 = OUTLINED_FUNCTION_10_0();
        *(_DWORD *)uint64_t v17 = 136315138;
        memcpy(v29, v34, sizeof(v29));
        outlined retain of ConnectionPreparationReport(v30);
        uint64_t v18 = String.init<A>(describing:)();
        v29[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v27);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined release of ConnectionPreparationReport?((uint64_t)&v32);
        outlined release of ConnectionPreparationReport?((uint64_t)&v32);
        _os_log_impl(&dword_25D6CC000, v15, (os_log_type_t)v8, "%s", v17, 0xCu);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_1_2();
        OUTLINED_FUNCTION_1_2();

        outlined release of ConnectionPreparationReport?((uint64_t)&v32);
      }
      else
      {
        outlined release of ConnectionPreparationReport?((uint64_t)&v32);
        outlined release of ConnectionPreparationReport?((uint64_t)&v32);
        _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)&v32, (uint64_t)v29, &demangling cache variable for type metadata for ConnectionPreparationReport?);
        outlined release of ConnectionPreparationReport(v29);
      }
    }
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v5, (uint64_t)v30, &demangling cache variable for type metadata for ConnectionPreparationReport?);
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v30, (uint64_t)v31, &demangling cache variable for type metadata for ConnectionPreparationReport?);
    if (_s11SiriNetwork27ConnectionPreparationReportVSgWOg((uint64_t)v31) != 1)
    {
      _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v30, (uint64_t)v29, &demangling cache variable for type metadata for ConnectionPreparationReport?);
      uint64_t v20 = LOBYTE(v29[4]);
      id v21 = objc_allocWithZone(MEMORY[0x263F6E4B0]);
      outlined retain of ConnectionPreparationReport(v29);
      id v22 = objc_msgSend(v21, sel_init);
      objc_msgSend(v22, sel_setHasDNS_, v20);
      if (v22)
      {
        NetworkAnalytics.logNetworkConnectionStatePreparationSnapshotCaptured(_:)();
      }
      outlined release of ConnectionPreparationReport?((uint64_t)v30);
    }
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v5, (uint64_t)&v27, &demangling cache variable for type metadata for ConnectionPreparationReport?);
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)&v27, (uint64_t)v29, &demangling cache variable for type metadata for ConnectionPreparationReport?);
    if (_s11SiriNetwork27ConnectionPreparationReportVSgWOg((uint64_t)v29) != 1)
    {
      _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)&v27, (uint64_t)v26, &demangling cache variable for type metadata for ConnectionPreparationReport?);
      memcpy(v25, v26, sizeof(v25));
      outlined retain of ConnectionPreparationReport(v26);
      uint64_t v23 = ConnectionPreparationReport.netDebugConnectionStatePreparationSnapshot.getter();
      if (v23)
      {
        unint64_t v24 = v23;
        NetworkAnalytics.logDebugNetworkConnectionStatePreparationSnapshotCaptured(_:)();
      }
      outlined release of ConnectionPreparationReport?((uint64_t)&v27);
    }
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v41);
  }
  else
  {
    outlined destroy of NetworkConnectionProtocol?((uint64_t)&v39, (uint64_t)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
  }
  OUTLINED_FUNCTION_29();
}

Swift::Void __swiftcall NetworkConnectionProvider.updateAndEmitConnectionMetricsReadyEstablishmentReport()()
{
  OUTLINED_FUNCTION_24_2();
  outlined init with copy of NetworkConnectionProtocol?(v0 + 16, (uint64_t)&v4, (uint64_t *)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
  if (v5)
  {
    outlined init with take of RPCOspreyConnectionProtocol(&v4, (uint64_t)v6);
    __swift_project_boxed_opaque_existential_1(v6, v6[3]);
    uint64_t v1 = OUTLINED_FUNCTION_23_2();
    swift_weakInit();
    outlined init with copy of RPCOspreyConnectionProtocol((uint64_t)v6, (uint64_t)&v4);
    uint64_t v2 = swift_allocObject();
    *(void *)(v2 + 16) = v1;
    outlined init with take of RPCOspreyConnectionProtocol(&v4, v2 + 24);
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = partial apply for closure #1 in NetworkConnectionProvider.updateAndEmitConnectionMetricsReadyEstablishmentReport();
    *(void *)(v3 + 24) = v2;
    swift_retain();
    swift_retain();
    NWConnection.requestEstablishmentReport(queue:completion:)();
    swift_release();
    swift_release();
    swift_release();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v6);
  }
  else
  {
    outlined destroy of NetworkConnectionProtocol?((uint64_t)&v4, (uint64_t)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
  }
}

uint64_t closure #1 in NetworkConnectionProvider.updateAndEmitConnectionMetricsReadyEstablishmentReport()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v6 = (uint64_t *)result;
    uint64_t v79 = a3;
    swift_beginAccess();
    uint64_t v7 = v6[65];
    uint64_t v8 = v6[66];
    uint64_t v9 = v6[67];
    uint64_t v10 = v6[68];
    uint64_t v11 = v6[69];
    uint64_t v12 = v6[70];
    uint64_t v91 = v6[71];
    uint64_t v95 = v6[64];
    long long v83 = *((_OWORD *)v6 + 37);
    long long v87 = *((_OWORD *)v6 + 36);
    uint64_t v13 = v6[76];
    uint64_t v14 = (void *)v6[77];
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(a1, (uint64_t)(v6 + 64), &demangling cache variable for type metadata for ConnectionEstablishmentReport?);
    outlined retain of ConnectionEstablishmentReport?(a1);
    outlined consume of ConnectionEstablishmentReport?(v95, v7, v8, v9, v10, v11, v12, v91, v87, *((uint64_t *)&v87 + 1), v83, *((uint64_t *)&v83 + 1), v13, v14);
    os_log_type_t v16 = NetworkConnectionProvider.connectionMetrics.modify();
    if (*(void *)(v15 + 512))
    {
      uint64_t v17 = v15;
      uint64_t v18 = (void *)0xE000000000000000;
      uint64_t v100 = 0;
      unint64_t v101 = 0xE000000000000000;
      outlined init with copy of RPCOspreyConnectionProtocol(v79, (uint64_t)&v117);
      outlined init with copy of NetworkConnectionProtocol?((uint64_t)&v117, (uint64_t)&v103, (uint64_t *)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
      if (v106)
      {
        outlined init with take of RPCOspreyConnectionProtocol(&v103, (uint64_t)v99);
        outlined init with copy of RPCOspreyConnectionProtocol((uint64_t)v99, (uint64_t)v98);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NetworkConnectionProtocol);
        uint64_t v19 = String.init<A>(describing:)();
        uint64_t v18 = v20;
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v99);
      }
      else
      {
        uint64_t v19 = 0;
      }
      outlined destroy of NetworkConnectionProtocol?((uint64_t)&v117, (uint64_t)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
      v21._uint64_t countAndFlagsBits = v19;
      v21._object = v18;
      String.append(_:)(v21);
      swift_bridgeObjectRelease();
      unint64_t v22 = v101;
      *(void *)(v17 + 456) = v100;
      *(void *)(v17 + 464) = v22;
      swift_bridgeObjectRelease();
      ((void (*)(unsigned char *, void))v16)(v102, 0);
    }
    else
    {
      ((void (*)(unsigned char *, void))v16)(v102, 0);
    }
    if (v6[71])
    {
      uint64_t v23 = v6[71];
      uint64_t v24 = v6[64];
      uint64_t v88 = v6[66];
      uint64_t v92 = v6[67];
      uint64_t v73 = v6[68];
      uint64_t v76 = v6[69];
      uint64_t v25 = v6[72];
      uint64_t v71 = v6[73];
      uint64_t v26 = v6[74];
      uint64_t v27 = v6[75];
      uint64_t v80 = v6[70];
      uint64_t v84 = v6[76];
      unint64_t v28 = (void *)v6[77];
      uint64_t v29 = one-time initialization token for siriNetwork;
      uint64_t v30 = v6[65];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v31 = v25;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v32 = v28;
      if (v29 != -1) {
        swift_once();
      }
      uint64_t v33 = type metadata accessor for Logger();
      __swift_project_value_buffer(v33, (uint64_t)static Logger.siriNetwork);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      id v69 = v32;
      uint64_t v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.default.getter();
      log = v34;
      if (os_log_type_enabled(v34, v35))
      {
        uint64_t v36 = (uint8_t *)swift_slowAlloc();
        uint64_t v68 = swift_slowAlloc();
        *(_DWORD *)uint64_t v36 = 136315138;
        *(void *)&long long v103 = v68;
        uint64_t v117 = v24;
        uint64_t v118 = v30;
        int v119 = v88;
        char v120 = BYTE4(v88) & 1;
        uint64_t v121 = v92;
        char v122 = v73 & 1;
        uint64_t v123 = v76;
        char v124 = v80 & 1;
        uint64_t v125 = v23;
        uint64_t v126 = v31;
        __int16 v127 = v71 & 0x101;
        uint64_t v128 = v26;
        uint64_t v129 = v27;
        uint64_t v130 = v84;
        id v131 = v69;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v37 = v69;
        uint64_t v38 = String.init<A>(describing:)();
        uint64_t v117 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, (uint64_t *)&v103);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined consume of ConnectionEstablishmentReport?(v24, v30, v88, v92, v73, v76, v80, v23, v31, v71, v26, v27, v84, v28);
        outlined consume of ConnectionEstablishmentReport?(v24, v30, v88, v92, v73, v76, v80, v23, v31, v71, v26, v27, v84, v28);
        _os_log_impl(&dword_25D6CC000, log, v35, "%s", v36, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x2611B3750](v68, -1, -1);
        MEMORY[0x2611B3750](v36, -1, -1);

        outlined consume of ConnectionEstablishmentReport?(v24, v30, v88, v92, v73, v76, v80, v23, v31, v71, v26, v27, v84, v28);
      }
      else
      {
        outlined consume of ConnectionEstablishmentReport?(v24, v30, v88, v92, v73, v76, v80, v23, v31, v71, v26, v27, v84, v28);
        outlined consume of ConnectionEstablishmentReport?(v24, v30, v88, v92, v73, v76, v80, v23, v31, v71, v26, v27, v84, v28);

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
    }
    uint64_t v40 = v6[71];
    if (v40)
    {
      uint64_t v41 = v6[65];
      uint64_t v42 = v6[66];
      uint64_t v43 = v6[67];
      uint64_t v44 = v6[69];
      uint64_t v45 = v6[70];
      uint64_t v46 = v6[72];
      uint64_t v47 = v6[73];
      uint64_t v48 = v6[74];
      uint64_t v49 = v6[75];
      uint64_t v50 = v6[76];
      uint64_t v51 = (void *)v6[77];
      uint64_t v93 = v6[68];
      uint64_t v96 = v6[64];
      uint64_t v117 = v96;
      uint64_t v118 = v41;
      int v119 = v42;
      char v120 = BYTE4(v42) & 1;
      uint64_t v89 = v43;
      uint64_t v121 = v43;
      char v122 = v93 & 1;
      uint64_t v81 = v44;
      uint64_t v85 = v45;
      uint64_t v123 = v44;
      char v124 = v45 & 1;
      uint64_t v125 = v40;
      uint64_t v126 = v46;
      __int16 v127 = v47 & 0x101;
      uint64_t v74 = v50;
      uint64_t v77 = v48;
      uint64_t v128 = v48;
      uint64_t v129 = v49;
      uint64_t v130 = v50;
      id v131 = v51;
      swift_bridgeObjectRetain();
      v51;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      ConnectionEstablishmentReport.netConnectionStateReadySnapshot.getter();
      if (v52)
      {
        uint64_t v53 = v52;
        NetworkAnalytics.logNetworkConnectionStateReadySnapshotCaptured(_:)();
      }
      outlined consume of ConnectionEstablishmentReport?(v96, v41, v42, v89, v93, v81, v85, v40, v46, v47, v77, v49, v74, v51);
    }
    uint64_t v54 = v6[71];
    if (v54)
    {
      uint64_t v55 = v6[65];
      uint64_t v56 = v6[66];
      uint64_t v57 = v6[68];
      uint64_t v58 = v6[69];
      uint64_t v59 = v6[70];
      uint64_t v60 = v6[72];
      uint64_t v61 = v6[73];
      uint64_t v62 = v6[74];
      uint64_t v63 = v6[75];
      uint64_t v64 = v6[76];
      uint64_t v65 = (void *)v6[77];
      uint64_t v78 = v6[64];
      uint64_t v82 = v6[67];
      *(void *)&long long v103 = v78;
      *((void *)&v103 + 1) = v55;
      int v104 = v56;
      uint64_t v86 = v56;
      char v105 = BYTE4(v56) & 1;
      uint64_t v106 = v82;
      uint64_t v94 = v57;
      uint64_t v97 = v59;
      char v107 = v57 & 1;
      uint64_t v90 = v58;
      uint64_t v108 = v58;
      char v109 = v59 & 1;
      uint64_t v110 = v54;
      uint64_t v111 = v60;
      __int16 v112 = v61 & 0x101;
      uint64_t v72 = v64;
      uint64_t v75 = v62;
      uint64_t v113 = v62;
      uint64_t v114 = v63;
      uint64_t v115 = v64;
      uint64_t v116 = v65;
      swift_bridgeObjectRetain();
      v65;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      ConnectionEstablishmentReport.netDebugConnectionStateReadySnapshot.getter();
      if (v66)
      {
        uint64_t v67 = v66;
        NetworkAnalytics.logDebugNetworkConnectionStateReadySnapshotCaptured(_:)();
        swift_release();
      }
      else
      {
        swift_release();
      }
      return outlined consume of ConnectionEstablishmentReport?(v78, v55, v86, v82, v94, v90, v97, v54, v60, v61, v75, v63, v72, v65);
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

Swift::Void __swiftcall NetworkConnectionProvider.updateConnectionMetricsSnapshotReport()()
{
  ((void (*)())MEMORY[0x270FA5388])();
  uint64_t v1 = v0;
  OUTLINED_FUNCTION_24_2();
  outlined init with copy of NetworkConnectionProtocol?(v0 + 16, (uint64_t)v109, (uint64_t *)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
  if (v109[3])
  {
    uint64_t v2 = (long long *)OUTLINED_FUNCTION_93();
    outlined init with take of RPCOspreyConnectionProtocol(v2, (uint64_t)v107);
    OUTLINED_FUNCTION_128();
    uint64_t v3 = OUTLINED_FUNCTION_93();
    memcpy(v3, (const void *)(v0 + 56), 0x599uLL);
    if (*(void *)(v109[160] + 16))
    {
      outlined retain of ConnectionMetrics((uint64_t)v109);
    }
    else
    {
      __swift_project_boxed_opaque_existential_1(v107, v108);
      outlined retain of ConnectionMetrics((uint64_t)v109);
      *(void *)(v0 + 1336) = NWConnection.getAttemptedEndpoints()();
      swift_bridgeObjectRelease();
    }
    __swift_project_boxed_opaque_existential_1(v107, v108);
    char v6 = *(unsigned char *)(v0 + 2101);
    v7._rawValue = *(void **)(v0 + 1336);
    swift_bridgeObjectRetain();
    Swift::String_optional v8 = NWConnection.getConnectionEdgeID(wasConnected:attemptedEndpoints:)(v6, v7);
    swift_bridgeObjectRelease();
    *(Swift::String_optional *)(v0 + 1344) = v8;
    swift_bridgeObjectRelease();
    uint64_t v9 = OUTLINED_FUNCTION_124();
    memcpy(v9, v10, 0x204uLL);
    uint64_t v11 = OUTLINED_FUNCTION_124();
    uint64_t v13 = ConnectionMethod.connectionMethodDescription(connectionConfiguration:isMPTCP:)((uint64_t)v11, v12, 1);
    uint64_t v15 = v14;
    outlined init with copy of RPCOspreyConnectionProtocol((uint64_t)v107, (uint64_t)v105);
    ConnectionSnapshotReport.init(connection:wasConnected:sequenceNumber:provider:snapshotTriggerReason:connectionMethod:)((uint64_t)v105, *(unsigned __int8 *)(v1 + 2101), *(unsigned int *)(*(void *)(v1 + 2144) + OBJC_IVAR___SNNetworkAnalyticsInternal_sequenceNumber), 0xD000000000000017, 0x800000025D7955E0, 0x6574736575716572, 0xEA0000000000646ELL, v13, v15);
    os_log_type_t v16 = OUTLINED_FUNCTION_124();
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v16, (uint64_t)v103, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v1 + 624, (uint64_t)v104, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v103, v1 + 624, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
    outlined release of ConnectionSnapshotReport?((uint64_t)v104);
    uint64_t v17 = NetworkConnectionProvider.connectionMetrics.modify();
    uint64_t v19 = v18;
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v18 + 568, (uint64_t)v105, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v105, (uint64_t)&v106, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
    uint64_t v20 = OUTLINED_FUNCTION_124();
    uint64_t v21 = OUTLINED_FUNCTION_2_1((uint64_t)v20);
    if (v30)
    {
      uint64_t v29 = OUTLINED_FUNCTION_130(v21, v22, v23, v24, v25, v26, v27, v28, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68,
              v69,
              v70,
              v71,
              v72,
              v73,
              v74,
              v75,
              v76,
              v77,
              v78,
              v79,
              v80,
              v81,
              v82,
              v83,
              v84,
              v85,
              v86,
              v87,
              v88,
              v89,
              v90,
              v91,
              v92,
              v93,
              v94,
              v95,
              v96,
              v97,
              v98,
              v99[0]);
      ((void (*)(char *))v17)(v29);
    }
    else
    {
      _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v19 + 608, (uint64_t)v101, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
      _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v101, (uint64_t)v102, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
      OUTLINED_FUNCTION_6_0((uint64_t)v102);
      if (!v30)
      {
        uint64_t v31 = *(void *)(v1 + 1496);
        if (v31)
        {
          uint64_t v32 = *(void *)(v31 + OBJC_IVAR___SNNetworkManagerInternal_carrierName);
          uint64_t v33 = swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v32 = 0;
          uint64_t v33 = 0;
        }
        *(void *)(v19 + 616) = v32;
        *(void *)(v19 + 624) = v33;
        swift_bridgeObjectRelease();
      }
      OUTLINED_FUNCTION_15();
      v17();
    }
    uint64_t v34 = *(void *)(v1 + 1496);
    if (v34)
    {
      uint64_t v35 = v34 + OBJC_IVAR___SNNetworkManagerInternal_lastSignalStrength;
      if ((*(unsigned char *)(v35 + 8) & 1) == 0)
      {
        uint64_t v36 = *(void *)v35;
        id v37 = NetworkConnectionProvider.connectionMetrics.modify();
        uint64_t v39 = v38;
        _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v38 + 568, (uint64_t)v101, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
        _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v101, (uint64_t)v102, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
        OUTLINED_FUNCTION_2_1((uint64_t)v102);
        if (v30)
        {
          ((void (*)(unsigned char *, void))v37)(v100, 0);
        }
        else
        {
          _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v39 + 608, (uint64_t)&v59, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
          _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)&v59, (uint64_t)v99, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
          OUTLINED_FUNCTION_6_0((uint64_t)v99);
          if (!v40)
          {
            *(double *)(v39 + 632) = (double)v36;
            *(unsigned char *)(v39 + 640) = 0;
          }
          OUTLINED_FUNCTION_15();
          v37();
        }
      }
    }
    uint64_t v41 = NetworkConnectionProvider.connectionMetrics.modify();
    uint64_t v43 = v42;
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)&v42[142], (uint64_t)v101, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v101, (uint64_t)v102, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
    uint64_t v44 = OUTLINED_FUNCTION_2_1((uint64_t)v102);
    if (v30)
    {
      uint64_t v52 = OUTLINED_FUNCTION_130(v44, v45, v46, v47, v48, v49, v50, v51, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68,
              v69,
              v70,
              v71,
              v72,
              v73,
              v74,
              v75,
              v76,
              v77,
              v78,
              v79,
              v80,
              v81,
              v82,
              v83,
              v84,
              v85,
              v86,
              v87,
              v88,
              v89,
              v90,
              v91,
              v92,
              v93,
              v94,
              v95,
              v96,
              v97,
              v98,
              v99[0]);
      ((void (*)(char *))v41)(v52);
    }
    else
    {
      uint64_t v53 = *(void **)(v1 + 1496);
      if (v53)
      {
        id v54 = v53;
        SiriNetwork::ConnectionQualityReport v55 = NetworkManager.currentConnectionQualityReport()();
      }
      else
      {
        SiriNetwork::ConnectionQualityReport v55 = (SiriNetwork::ConnectionQualityReport)4;
      }
      v43[316] = v55;
      OUTLINED_FUNCTION_15();
      v41();
    }
    uint64_t v56 = OUTLINED_FUNCTION_93();
    specialized ConnectionProviderProtocol.updateConnectionMetrics(with:completion:)((uint64_t)v56);
    uint64_t v57 = OUTLINED_FUNCTION_93();
    outlined release of ConnectionMetrics((uint64_t)v57);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v107);
  }
  else
  {
    long long v4 = OUTLINED_FUNCTION_93();
    outlined destroy of NetworkConnectionProtocol?((uint64_t)v4, v5);
  }
}

Swift::Int NetworkConnectionProvider.hashValue.getter()
{
  Hasher.init(_seed:)();
  specialized ConnectionProviderProtocol.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t type metadata accessor for NetworkConnectionProvider.StateUpdateHandler(uint64_t a1)
{
  return type metadata accessor for NetworkConnectionProvider.StateUpdateHandler(a1, &type metadata singleton initialization cache for NetworkConnectionProvider.StateUpdateHandler);
}

uint64_t type metadata accessor for NetworkConnectionProvider.ViabilityUpdateHandler(uint64_t a1)
{
  return type metadata accessor for NetworkConnectionProvider.StateUpdateHandler(a1, &type metadata singleton initialization cache for NetworkConnectionProvider.ViabilityUpdateHandler);
}

uint64_t type metadata accessor for NetworkConnectionProvider.BetterPathUpdateHandler(uint64_t a1)
{
  return type metadata accessor for NetworkConnectionProvider.StateUpdateHandler(a1, type metadata singleton initialization cache for NetworkConnectionProvider.BetterPathUpdateHandler);
}

uint64_t type metadata accessor for NetworkConnectionProvider.StateUpdateHandler(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for NetworkConnectionProvider.StateUpdateHandler()
{
  return swift_initClassMetadata2();
}

uint64_t protocol witness for ConnectionProviderProtocol.connectionMetrics.getter in conformance NetworkConnectionProvider@<X0>(void *a1@<X8>)
{
  uint64_t v3 = (const void *)(v1 + 56);
  swift_beginAccess();
  memcpy(__dst, v3, 0x599uLL);
  memcpy(a1, v3, 0x599uLL);
  return outlined retain of ConnectionMetrics((uint64_t)__dst);
}

uint64_t (*protocol witness for ConnectionProviderProtocol.connectionMetrics.modify in conformance NetworkConnectionProvider())()
{
  return RPCOspreyConnectionProvider.connectionMetrics.modify;
}

uint64_t protocol witness for ConnectionProviderProtocol.delegate.getter in conformance NetworkConnectionProvider()
{
  return MEMORY[0x2611B37F0](v0 + 1504);
}

uint64_t protocol witness for ConnectionProviderProtocol.delegate.setter in conformance NetworkConnectionProvider(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 1512) = a2;
  swift_unknownObjectWeakAssign();

  return swift_unknownObjectRelease();
}

void *protocol witness for ConnectionProviderProtocol.connectionConfiguration.getter in conformance NetworkConnectionProvider@<X0>(void *a1@<X8>)
{
  uint64_t v3 = (const void *)(v1 + 1536);
  memcpy(__dst, v3, 0x204uLL);
  memcpy(a1, v3, 0x204uLL);
  return outlined retain of ConnectionConfiguration(__dst);
}

id protocol witness for ConnectionProviderProtocol.connectionQueue.getter in conformance NetworkConnectionProvider()
{
  return *(id *)(v0 + 2056);
}

uint64_t protocol witness for ConnectionProviderProtocol.openCompletion.setter in conformance NetworkConnectionProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 2064);
  *(void *)(v2 + 2064) = a1;
  *(void *)(v2 + 2072) = a2;
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?(v3);
}

uint64_t protocol witness for ConnectionProviderProtocol.isMPTCP.getter in conformance NetworkConnectionProvider()
{
  return *(unsigned __int8 *)(v0 + 2100);
}

uint64_t protocol witness for ConnectionProviderProtocol.openConnectionWithInitialPayload(_:completion:) in conformance NetworkConnectionProvider(void *a1, uint64_t a2, uint64_t a3)
{
  return NetworkConnectionProvider.openConnectionWithInitialPayload(_:completion:)(a1, a2, a3);
}

uint64_t protocol witness for ConnectionProviderProtocol.send(data:completion:) in conformance NetworkConnectionProvider(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return NetworkConnectionProvider.send(data:completion:)(a1, a2, a3, a4);
}

uint64_t protocol witness for ConnectionProviderProtocol.readData(_:) in conformance NetworkConnectionProvider(uint64_t a1, uint64_t a2)
{
  return NetworkConnectionProvider.readData(_:)(a1, a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NetworkConnectionProvider()
{
  return NetworkConnectionProvider.hashValue.getter();
}

void *protocol witness for Hashable.hash(into:) in conformance NetworkConnectionProvider(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return ConnectionProviderProtocol.hash(into:)(a1, a2, WitnessTable);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NetworkConnectionProvider(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  uint64_t WitnessTable = swift_getWitnessTable();
  ConnectionProviderProtocol.hash(into:)((uint64_t)v5, a2, WitnessTable);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NetworkConnectionProvider(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  uint64_t WitnessTable = swift_getWitnessTable();

  return static ConnectionProviderProtocol.== infix(_:_:)(v4, v5, a3, WitnessTable);
}

uint64_t base witness table accessor for Equatable in NetworkConnectionProvider(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type NetworkConnectionProvider and conformance NetworkConnectionProvider((unint64_t *)&lazy protocol witness table cache variable for type NetworkConnectionProvider and conformance NetworkConnectionProvider, a2, (void (*)(uint64_t))type metadata accessor for NetworkConnectionProvider);
}

uint64_t instantiation function for generic protocol witness table for NetworkConnectionProvider(uint64_t a1, uint64_t a2)
{
  uint64_t result = lazy protocol witness table accessor for type NetworkConnectionProvider and conformance NetworkConnectionProvider((unint64_t *)&lazy protocol witness table cache variable for type NetworkConnectionProvider and conformance NetworkConnectionProvider, a2, (void (*)(uint64_t))type metadata accessor for NetworkConnectionProvider);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t outlined retain of String?(uint64_t a1)
{
  return a1;
}

uint64_t sub_25D704A74()
{
  swift_weakDestroy();
  uint64_t v0 = OUTLINED_FUNCTION_90();

  return MEMORY[0x270FA0238](v0, v1, v2);
}

uint64_t sub_25D704AA4()
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(v0 + 24);

  return MEMORY[0x270FA0238](v0, 64, 7);
}

uint64_t partial apply for closure #1 in NetworkConnectionProvider.updateAndEmitConnectionMetricsReadyEstablishmentReport()(uint64_t a1)
{
  return closure #1 in NetworkConnectionProvider.updateAndEmitConnectionMetricsReadyEstablishmentReport()(a1, *(void *)(v1 + 16), v1 + 24);
}

uint64_t sub_25D704AF0()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #1 in NWConnection.readyEstablishmentReport(queue:completion:)(uint64_t a1)
{
  return closure #1 in NWConnection.readyEstablishmentReport(queue:completion:)(a1, *(void (**)(void *))(v1 + 16));
}

uint64_t outlined retain of ConnectionEstablishmentReport?(uint64_t a1)
{
  return a1;
}

uint64_t sub_25D704B84()
{
  return objectdestroy_155Tm(MEMORY[0x263F8EED8]);
}

void partial apply for closure #1 in NetworkConnectionProvider.readData(_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  closure #1 in NetworkConnectionProvider.readData(_:)(a1, a2, a3, a4, a5, *(void *)(v5 + 16), *(void (**)(uint64_t, unint64_t, void *, uint64_t))(v5 + 24));
}

uint64_t sub_25D704BA8()
{
  return objectdestroy_155Tm(MEMORY[0x263F8EED8]);
}

void partial apply for closure #1 in NetworkConnectionProvider.send(data:completion:)(uint64_t a1)
{
  closure #1 in NetworkConnectionProvider.send(data:completion:)(a1, *(void *)(v1 + 16), *(void (**)(void, void))(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_25D704BCC()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 25, 7);
}

void partial apply for closure #1 in NetworkConnectionProvider.handleBetterPathUpdate(_:)()
{
  closure #1 in NetworkConnectionProvider.handleBetterPathUpdate(_:)(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

void specialized BackgroundConnection.connectionProvider(_:received:)()
{
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t);
  uint64_t v14;
  void (*v15)(uint64_t);
  uint64_t v16;
  void v17[6];

  OUTLINED_FUNCTION_22();
  os_log_type_t v16 = v0;
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  type metadata accessor for DispatchWorkItemFlags();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_2();
  lazy protocol witness table accessor for type NetworkConnectionProvider and conformance NetworkConnectionProvider(&lazy protocol witness table cache variable for type RPCOspreyConnectionProvider and conformance RPCOspreyConnectionProvider, 255, (void (*)(uint64_t))type metadata accessor for RPCOspreyConnectionProvider);
  Swift::OpaquePointer v7 = OUTLINED_FUNCTION_23_2();
  swift_weakInit();
  Swift::String_optional v8 = swift_allocObject();
  *(void *)(v8 + 16) = v7;
  *(void *)(v8 + 24) = v4;
  OUTLINED_FUNCTION_111(v8);
  v17[0] = MEMORY[0x263EF8330];
  OUTLINED_FUNCTION_126(COERCE_DOUBLE(1107296256));
  v17[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v17[3] = v16;
  uint64_t v9 = _Block_copy(v17);
  swift_retain();
  swift_retain();
  uint64_t v10 = v2;
  static DispatchQoS.unspecified.getter();
  lazy protocol witness table accessor for type NetworkConnectionProvider and conformance NetworkConnectionProvider((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, 255, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  OUTLINED_FUNCTION_60();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v11 = OUTLINED_FUNCTION_61();
  MEMORY[0x2611B24E0](v11);
  _Block_release(v9);
  OUTLINED_FUNCTION_12_2();
  v13(v12);
  uint64_t v14 = OUTLINED_FUNCTION_83();
  v15(v14);
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_29();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t);
  uint64_t v15;
  void (*v16)(uint64_t);
  uint64_t v17;
  void v18[6];

  OUTLINED_FUNCTION_22();
  uint64_t v17 = v0;
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  type metadata accessor for DispatchWorkItemFlags();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_2();
  lazy protocol witness table accessor for type NetworkConnectionProvider and conformance NetworkConnectionProvider(&lazy protocol witness table cache variable for type NetworkConnectionProvider and conformance NetworkConnectionProvider, v7, (void (*)(uint64_t))type metadata accessor for NetworkConnectionProvider);
  Swift::String_optional v8 = OUTLINED_FUNCTION_23_2();
  swift_weakInit();
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v8;
  *(void *)(v9 + 24) = v4;
  OUTLINED_FUNCTION_111(v9);
  v18[0] = MEMORY[0x263EF8330];
  OUTLINED_FUNCTION_126(COERCE_DOUBLE(1107296256));
  void v18[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  uint64_t v18[3] = v17;
  uint64_t v10 = _Block_copy(v18);
  swift_retain();
  swift_retain();
  uint64_t v11 = v2;
  static DispatchQoS.unspecified.getter();
  lazy protocol witness table accessor for type NetworkConnectionProvider and conformance NetworkConnectionProvider((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, 255, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  OUTLINED_FUNCTION_60();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  char v12 = OUTLINED_FUNCTION_61();
  MEMORY[0x2611B24E0](v12);
  _Block_release(v10);
  OUTLINED_FUNCTION_12_2();
  v14(v13);
  uint64_t v15 = OUTLINED_FUNCTION_83();
  v16(v15);
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_29();
}

void specialized BackgroundConnection.connectionProvider(_:receivedViabilityChangeNotification:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v4 = a2;
  lazy protocol witness table accessor for type NetworkConnectionProvider and conformance NetworkConnectionProvider(&lazy protocol witness table cache variable for type NetworkConnectionProvider and conformance NetworkConnectionProvider, a2, (void (*)(uint64_t))type metadata accessor for NetworkConnectionProvider);
  uint64_t v6 = *(void *)(a3 + 1080);
  if (v6) {
    BOOL v7 = v6 == a1;
  }
  else {
    BOOL v7 = 0;
  }
  if (!v7 || !MEMORY[0x2611B37F0](a1 + 1504)) {
    return;
  }
  type metadata accessor for BackgroundConnection();
  uint64_t v8 = swift_dynamicCastClass();
  if (!v8) {
    goto LABEL_25;
  }
  uint64_t v9 = v8;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  if (v9 != a3) {
    goto LABEL_25;
  }
  if (*(unsigned char *)(a3 + 1188) != (v4 & 1))
  {
    if ((v4 & 1) == 0)
    {
      lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
      uint64_t v10 = (void *)swift_allocError();
      *(void *)(v11 + 8) = 0;
      *(void *)(v11 + 16) = 0;
      *(void *)uint64_t v11 = 0;
      *(_OWORD *)(v11 + 24) = xmmword_25D7917A0;
      BackgroundConnection.didEncounterError(_:)(v10);

LABEL_25:
      swift_unknownObjectRelease();
      return;
    }
LABEL_15:
    BackgroundConnection.cancelSecondaryConnection()();
    goto LABEL_25;
  }
  if (v4) {
    goto LABEL_15;
  }
  if (*(unsigned char *)(a3 + 1189))
  {
    BackgroundConnection.startSecondaryConnection()();
    goto LABEL_25;
  }
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Logger.siriNetwork);
  os_log_t oslog = (os_log_t)Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(oslog, v13))
  {

    goto LABEL_25;
  }
  uint64_t v14 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)uint64_t v14 = 0;
  _os_log_impl(&dword_25D6CC000, oslog, v13, "Background Connection - Provider: Wait for better route event", v14, 2u);
  MEMORY[0x2611B3750](v14, -1, -1);
  swift_unknownObjectRelease();
}

uint64_t specialized BackgroundConnection.connectionProviderReceivedBetterRouteNotification(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = lazy protocol witness table accessor for type NetworkConnectionProvider and conformance NetworkConnectionProvider(&lazy protocol witness table cache variable for type NetworkConnectionProvider and conformance NetworkConnectionProvider, a2, (void (*)(uint64_t))type metadata accessor for NetworkConnectionProvider);
  uint64_t v5 = *(void *)(a2 + 1080);
  if (v5) {
    BOOL v6 = v5 == a1;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    uint64_t result = MEMORY[0x2611B37F0](a1 + 1504);
    if (result)
    {
      type metadata accessor for BackgroundConnection();
      uint64_t v7 = swift_dynamicCastClass();
      if (v7)
      {
        uint64_t v8 = v7;
        swift_unknownObjectRetain();
        swift_unknownObjectRelease();
        if (v8 == a2)
        {
          *(unsigned char *)(a2 + 1189) = 1;
          if ((*(unsigned char *)(a2 + 1188) & 1) == 0)
          {
            if (one-time initialization token for siriNetwork != -1) {
              swift_once();
            }
            uint64_t v9 = type metadata accessor for Logger();
            __swift_project_value_buffer(v9, (uint64_t)static Logger.siriNetwork);
            uint64_t v10 = Logger.logObject.getter();
            os_log_type_t v11 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v10, v11))
            {
              uint64_t v12 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v12 = 0;
              _os_log_impl(&dword_25D6CC000, v10, v11, "Background Connection - Provider: Starting secondary connection after better route notification received", v12, 2u);
              MEMORY[0x2611B3750](v12, -1, -1);
            }

            BackgroundConnection.startSecondaryConnection()();
          }
        }
      }
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

void partial apply for closure #1 in NetworkConnectionProvider.handleViabilityUpdate(_:)()
{
  closure #1 in NetworkConnectionProvider.handleViabilityUpdate(_:)(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

unint64_t type metadata accessor for OS_dispatch_source()
{
  unint64_t result = lazy cache variable for type metadata for OS_dispatch_source;
  if (!lazy cache variable for type metadata for OS_dispatch_source)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_source);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_25D705690()
{
  return objectdestroy_155Tm(MEMORY[0x263F8EEA0]);
}

uint64_t partial apply for specialized closure #1 in ConnectionProviderProtocol.setupConnectionUnviableTimer()()
{
  return specialized closure #1 in ConnectionProviderProtocol.setupConnectionUnviableTimer()(v0[2], v0[3], v0[4]);
}

uint64_t outlined init with take of ConnectionAnalysisInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ConnectionAnalysisInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of ConnectionAnalysisInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ConnectionAnalysisInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ConnectionAnalysisInfo(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ConnectionAnalysisInfo();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of NetworkConnectionProtocol?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_0_7();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

void partial apply for closure #1 in BackgroundConnection.connectionProvider(_:receivedIntermediateError:)()
{
  closure #1 in BackgroundConnection.connectionProvider(_:receivedIntermediateError:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t partial apply for specialized closure #1 in ConnectionProviderProtocol.setupStaleConnectionTimer()()
{
  return specialized closure #1 in ConnectionProviderProtocol.setupStaleConnectionTimer()(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

{
  uint64_t v0;

  return specialized closure #1 in ConnectionProviderProtocol.setupStaleConnectionTimer()(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void partial apply for closure #1 in BackgroundConnection.connectionProvider(_:received:)()
{
  closure #1 in BackgroundConnection.connectionProvider(_:received:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_25D705864()
{
  swift_release();
  if (*(void *)(v0 + 24)) {
    swift_release();
  }

  return MEMORY[0x270FA0238](v0, 48, 7);
}

void partial apply for closure #1 in NetworkConnectionProvider.closeWithError(_:)()
{
  closure #1 in NetworkConnectionProvider.closeWithError(_:)(*(void *)(v0 + 16), *(void (**)(void **))(v0 + 24), *(void *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t outlined assign with take of NetworkConnectionProtocol?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_25D705928()
{
  uint64_t v1 = OUTLINED_FUNCTION_90();

  return MEMORY[0x270FA0238](v1, v2, v3);
}

void partial apply for closure #2 in NetworkConnectionProvider.closeWithError(_:)()
{
  dispatch_group_leave(*(dispatch_group_t *)(v0 + 16));
}

uint64_t sub_25D705960()
{
  __swift_destroy_boxed_opaque_existential_0(v0 + 24);
  swift_release();

  return MEMORY[0x270FA0238](v0, 80, 7);
}

uint64_t partial apply for closure #3 in NetworkConnectionProvider.closeWithError(_:)()
{
  return closure #3 in NetworkConnectionProvider.closeWithError(_:)(*(void *)(v0 + 16), (void *)(v0 + 24), *(void (**)(void))(v0 + 64));
}

uint64_t outlined retain of ConnectionSnapshotReport(uint64_t a1)
{
  uint64_t v14 = *(void *)(a1 + 48);
  uint64_t v15 = *(void *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 64);
  uint64_t v13 = *(void *)(a1 + 56);
  uint64_t v10 = *(void *)(a1 + 80);
  uint64_t v11 = *(void *)(a1 + 72);
  uint64_t v8 = *(void *)(a1 + 96);
  uint64_t v9 = *(void *)(a1 + 88);
  long long v7 = *(_OWORD *)(a1 + 104);
  long long v6 = *(_OWORD *)(a1 + 120);
  long long v5 = *(_OWORD *)(a1 + 136);
  uint64_t v21 = *(void *)(a1 + 392);
  uint64_t v22 = *(void *)(a1 + 384);
  uint64_t v19 = *(void *)(a1 + 408);
  uint64_t v20 = *(void *)(a1 + 400);
  uint64_t v17 = *(void *)(a1 + 424);
  uint64_t v18 = *(void *)(a1 + 416);
  uint64_t v16 = *(void *)(a1 + 432);
  uint64_t v2 = *(void **)(a1 + 704);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of ConnectionNetworkReport?(v15, v14, v13, v12, v11, v10, v9, v8, v7, *((uint64_t *)&v7 + 1), v6, *((uint64_t *)&v6 + 1), v5, *((uint64_t *)&v5 + 1));
  outlined copy of ConnectionInterfaceReport?(v22, v21, v20, v19, v18, v17, v16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v3 = v2;
  return a1;
}

uint64_t outlined release of ConnectionSnapshotReport(uint64_t a1)
{
  uint64_t v13 = *(void *)(a1 + 48);
  uint64_t v14 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 64);
  uint64_t v12 = *(void *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 80);
  uint64_t v10 = *(void *)(a1 + 72);
  uint64_t v7 = *(void *)(a1 + 96);
  uint64_t v8 = *(void *)(a1 + 88);
  long long v6 = *(_OWORD *)(a1 + 104);
  long long v5 = *(_OWORD *)(a1 + 120);
  long long v4 = *(_OWORD *)(a1 + 136);
  uint64_t v20 = *(void *)(a1 + 392);
  uint64_t v21 = *(void *)(a1 + 384);
  uint64_t v18 = *(void *)(a1 + 408);
  uint64_t v19 = *(void *)(a1 + 400);
  uint64_t v16 = *(void *)(a1 + 424);
  uint64_t v17 = *(void *)(a1 + 416);
  uint64_t v15 = *(void *)(a1 + 432);
  uint64_t v2 = *(void **)(a1 + 704);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of ConnectionNetworkReport?(v14, v13, v12, v11, v10, v9, v8, v7, v6, *((uint64_t *)&v6 + 1), v5, *((uint64_t *)&v5 + 1), v4, *((uint64_t *)&v4 + 1));
  outlined consume of ConnectionInterfaceReport?(v21, v20, v19, v18, v17, v16, v15);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

void partial apply for closure #1 in closure #3 in NetworkConnectionProvider.closeWithError(_:)(uint64_t a1)
{
  closure #1 in closure #3 in NetworkConnectionProvider.closeWithError(_:)(a1, *(void *)(v1 + 16));
}

uint64_t partial apply for specialized closure #1 in ConnectionProviderProtocol.setupOpenSlowTimer()()
{
  return specialized closure #1 in ConnectionProviderProtocol.setupOpenSlowTimer()();
}

{
  return specialized closure #1 in ConnectionProviderProtocol.setupOpenSlowTimer()();
}

void partial apply for specialized closure #1 in ConnectionProviderProtocol.setupOpenTimeoutTimer()()
{
}

{
  specialized closure #1 in ConnectionProviderProtocol.setupOpenTimeoutTimer()();
}

uint64_t sub_25D705F34()
{
  return objectdestroy_155Tm(MEMORY[0x263F8EED8]);
}

uint64_t partial apply for specialized closure #1 in ConnectionProviderProtocol.openCompletionSetup(completion:)(uint64_t a1)
{
  return specialized closure #1 in ConnectionProviderProtocol.openCompletionSetup(completion:)(a1, *(void *)(v1 + 16), *(void (**)(uint64_t *))(v1 + 24));
}

{
  uint64_t v1;

  return specialized closure #1 in ConnectionProviderProtocol.openCompletionSetup(completion:)(a1, *(void *)(v1 + 16), *(void (**)(uint64_t *))(v1 + 24));
}

id outlined copy of Result<(), NetworkConnectionError>(id result, uint64_t a2, uint64_t a3, unint64_t a4, void *a5, char a6)
{
  if (a6) {
    return outlined copy of NetworkConnectionError(result, a2, a3, a4, a5);
  }
  return result;
}

id outlined copy of NetworkConnectionError(id result, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  if ((a4 >> 60) <= 9)
  {
    if (a4 >> 60 == 3) {
      uint64_t result = a5;
    }
    return result;
  }
  return result;
}

uint64_t outlined retain of Result<(), NetworkConnectionError>(uint64_t a1, void (*a2)(void, void, void, void, void, void))
{
  return a1;
}

void outlined consume of Result<(), NetworkConnectionError>(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5, char a6)
{
  if (a6) {
    outlined consume of NetworkConnectionError(a1, a2, a3, a4, a5);
  }
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in NetworkConnectionProvider.configureConnectionHandler(_:)()
{
  return implicit closure #2 in implicit closure #1 in NetworkConnectionProvider.configureConnectionHandler(_:)();
}

uint64_t partial apply for implicit closure #4 in implicit closure #3 in NetworkConnectionProvider.configureConnectionHandler(_:)(char a1)
{
  return implicit closure #4 in implicit closure #3 in NetworkConnectionProvider.configureConnectionHandler(_:)(a1, v1, (void (*)(void))NetworkConnectionProvider.handleViabilityUpdate(_:));
}

uint64_t partial apply for implicit closure #6 in implicit closure #5 in NetworkConnectionProvider.configureConnectionHandler(_:)(char a1)
{
  return implicit closure #4 in implicit closure #3 in NetworkConnectionProvider.configureConnectionHandler(_:)(a1, v1, (void (*)(void))NetworkConnectionProvider.handleBetterPathUpdate(_:));
}

void partial apply for closure #1 in NetworkConnectionProvider.configureConnectionHandler(_:)()
{
}

void partial apply for closure #2 in NetworkConnectionProvider.configureConnectionHandler(_:)()
{
}

uint64_t partial apply for closure #1 in closure #2 in NetworkConnectionProvider.configureConnectionHandler(_:)()
{
  return closure #1 in closure #1 in NetworkConnectionProvider.configureConnectionHandler(_:)(v0, "Provider - NetworkConnectionProvider [%s]: Writter closed");
}

uint64_t partial apply for closure #1 in closure #1 in NetworkConnectionProvider.configureConnectionHandler(_:)()
{
  return closure #1 in closure #1 in NetworkConnectionProvider.configureConnectionHandler(_:)(v0, "Provider - NetworkConnectionProvider [%s]: Reader closed");
}

#error "25D706108: call analysis failed (funcsize=11)"

uint64_t outlined destroy of NetworkConnectionProtocol?(uint64_t a1, uint64_t a2)
{
  id v3 = (uint64_t *)OUTLINED_FUNCTION_105(a1, a2);
  __swift_instantiateConcreteTypeFromMangledName(v3);
  OUTLINED_FUNCTION_0_7();
  OUTLINED_FUNCTION_12_2();
  v4();
  return v2;
}

uint64_t lazy protocol witness table accessor for type NetworkConnectionProvider and conformance NetworkConnectionProvider(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t objectdestroy_195Tm()
{
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t objectdestroy_185Tm()
{
  swift_release();
  swift_unknownObjectRelease();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_25D706258()
{
  return objectdestroy_155Tm(MEMORY[0x263F8EED8]);
}

uint64_t objectdestroy_155Tm(void (*a1)(void))
{
  swift_release();
  a1(*(void *)(v1 + 32));

  return MEMORY[0x270FA0238](v1, 40, 7);
}

void OUTLINED_FUNCTION_2_7(float a1)
{
  float *v1 = a1;
}

uint64_t OUTLINED_FUNCTION_3_6()
{
  return _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)&STACK[0x2CB0], (uint64_t)&STACK[0x3250], v0);
}

uint64_t OUTLINED_FUNCTION_11_1()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_16_2()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_17_2(uint64_t a1)
{
  return _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(a1, (uint64_t)&STACK[0x2CB0], v1);
}

uint64_t OUTLINED_FUNCTION_18_2(uint64_t a1, uint64_t a2)
{
  return a2 + 568;
}

void OUTLINED_FUNCTION_19_2(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 272) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_20_2()
{
  *(_WORD *)(v0 + 12) = 2080;
  return swift_bridgeObjectRetain();
}

void OUTLINED_FUNCTION_21_2(float a1)
{
  float *v1 = a1;
  *(void *)(v3 - 320) = v2;
}

uint64_t OUTLINED_FUNCTION_23_2()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_24_2()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_26_0()
{
  uint64_t v2 = *(void *)(v0 + 8);
  *(void *)(v1 - 296) = (v0 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  uint64_t result = *(void *)(v1 - 304);
  *(void *)(v1 - 288) = v2;
  return result;
}

uint64_t OUTLINED_FUNCTION_27_2()
{
  return v0;
}

uint64_t (*OUTLINED_FUNCTION_30_2())()
{
  return RPCOspreyConnectionProvider.connectionMetrics.modify();
}

uint64_t OUTLINED_FUNCTION_31_1()
{
  uint64_t v3 = *(void *)(v1 + 8);
  *(void *)(v2 - 296) = (v1 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  uint64_t result = v0;
  *(void *)(v2 - 288) = v3;
  return result;
}

unint64_t *OUTLINED_FUNCTION_33_2()
{
  return &STACK[0x2CB0];
}

uint64_t OUTLINED_FUNCTION_34_2()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

void OUTLINED_FUNCTION_35_0(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0x16u);
}

uint64_t OUTLINED_FUNCTION_36_0()
{
  return swift_release_n();
}

uint64_t OUTLINED_FUNCTION_37_0()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_39()
{
  uint64_t result = v1;
  *(void *)(v2 - 152) = v0;
  return result;
}

uint64_t OUTLINED_FUNCTION_40()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_43()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_44()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t OUTLINED_FUNCTION_45(uint64_t a1, uint64_t a2)
{
  __swift_project_value_buffer(a1, a2);
  return swift_retain_n();
}

uint64_t OUTLINED_FUNCTION_46(uint64_t a1, uint64_t a2)
{
  __swift_project_value_buffer(a1, a2);
  return swift_retain_n();
}

uint64_t OUTLINED_FUNCTION_48()
{
  return swift_release_n();
}

uint64_t OUTLINED_FUNCTION_49()
{
  return *(void *)(v0 - 176);
}

uint64_t OUTLINED_FUNCTION_52@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 240) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return type metadata accessor for DispatchQoS();
}

uint64_t OUTLINED_FUNCTION_53@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 256) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return type metadata accessor for OS_dispatch_source.TimerFlags();
}

uint64_t OUTLINED_FUNCTION_54(uint64_t a1)
{
  *(void *)(v2 - 144) = a1;
  *(void *)(v2 - 344) = v1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_56(uint64_t a1)
{
  *(void *)(v1 - 144) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_57(uint64_t a1, ...)
{
  va_start(va, a1);
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v1, v2, (uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_58()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_60()
{
  return v0 - 136;
}

uint64_t OUTLINED_FUNCTION_61()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_62()
{
  *(void *)(v1 - 304) = v0;
  return OS_dispatch_source.setEventHandler(qos:flags:handler:)();
}

uint64_t OUTLINED_FUNCTION_65(uint64_t a1)
{
  *(void *)(v1 + 2264) = a1;
  return v1 + 2264;
}

uint64_t OUTLINED_FUNCTION_68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v10 - 288) = (char *)&a9 - v9;
  return type metadata accessor for DispatchTimeInterval();
}

uint64_t OUTLINED_FUNCTION_69()
{
  return swift_slowAlloc();
}

unint64_t *OUTLINED_FUNCTION_70()
{
  return &STACK[0x3250];
}

uint64_t OUTLINED_FUNCTION_71(uint64_t a1)
{
  *(void *)(v1 - 144) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_73()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_74()
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v1, v0, (uint64_t *)(v2 - 136));
}

uint64_t OUTLINED_FUNCTION_75(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v24 = a23;
  return __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&a20, v24);
}

uint64_t OUTLINED_FUNCTION_76()
{
  return v0 + 40;
}

uint64_t OUTLINED_FUNCTION_77(uint64_t result)
{
  *(void *)(v1 - 336) = result;
  *(void *)(v1 - 136) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_78()
{
  *(void *)(v1 - 304) = v0;
  return swift_slowAlloc();
}

void OUTLINED_FUNCTION_79(void *a1, uint64_t a2, os_log_type_t a3, const char *a4)
{
  uint64_t v7 = *(NSObject **)(v5 - 312);
  _os_log_impl(a1, v7, a3, a4, v4, 0x20u);
}

uint64_t OUTLINED_FUNCTION_80()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_83()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_84()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_85()
{
  *(_WORD *)(v0 + 12) = 2080;
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_87(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v10 - 200) = (char *)&a9 - v9;
  return type metadata accessor for DispatchWorkItemFlags();
}

uint64_t OUTLINED_FUNCTION_88(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(a1, 0, 1, v1);
}

uint64_t OUTLINED_FUNCTION_90()
{
  return v0;
}

unint64_t *OUTLINED_FUNCTION_92()
{
  return &STACK[0x7AF0];
}

unint64_t *OUTLINED_FUNCTION_93()
{
  return &STACK[0x13B0];
}

void OUTLINED_FUNCTION_94()
{
  JUMPOUT(0x2611B2570);
}

unint64_t *OUTLINED_FUNCTION_95()
{
  return &STACK[0x4070];
}

unint64_t *OUTLINED_FUNCTION_96()
{
  return &STACK[0x4070];
}

unint64_t *OUTLINED_FUNCTION_97()
{
  return &STACK[0x4070];
}

uint64_t OUTLINED_FUNCTION_98()
{
  return swift_weakInit();
}

uint64_t OUTLINED_FUNCTION_99@<X0>(uint64_t a1@<X8>)
{
  return *(void *)(a1 - 256);
}

uint64_t OUTLINED_FUNCTION_104(float a1)
{
  float *v1 = a1;
  return NetworkConnectionProvider.connectionIdentifier.getter();
}

uint64_t OUTLINED_FUNCTION_105(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t OUTLINED_FUNCTION_108(uint64_t a1, uint64_t a2)
{
  return a2 + 568;
}

uint64_t OUTLINED_FUNCTION_111(uint64_t result)
{
  *(void *)(result + 32) = v2;
  *(void *)(result + 40) = v1;
  *(void *)(v3 - 96) = *(void *)(v3 - 176);
  *(void *)(v3 - 88) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_112()
{
  return v0;
}

double OUTLINED_FUNCTION_113()
{
  double result = 0.0;
  *(_OWORD *)(v0 + 2064) = 0u;
  return result;
}

uint64_t OUTLINED_FUNCTION_115()
{
  return swift_release_n();
}

uint64_t OUTLINED_FUNCTION_117(uint64_t a1, unint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)va);
}

void *OUTLINED_FUNCTION_120(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int16 a9, char a10, char a11)
{
  return memcpy(&STACK[0x3250], v11, 0x599uLL);
}

unint64_t *OUTLINED_FUNCTION_122()
{
  return &STACK[0x7828];
}

uint64_t OUTLINED_FUNCTION_123()
{
  return swift_release_n();
}

unint64_t *OUTLINED_FUNCTION_124()
{
  return &STACK[0x1090];
}

void OUTLINED_FUNCTION_126(double a1)
{
  *(double *)(v1 - 120) = a1;
}

uint64_t OUTLINED_FUNCTION_127()
{
  return static OS_dispatch_source.makeTimerSource(flags:queue:)();
}

uint64_t OUTLINED_FUNCTION_128()
{
  return swift_beginAccess();
}

char *OUTLINED_FUNCTION_130(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  return &a50;
}

uint64_t OUTLINED_FUNCTION_131(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(a1, 1, v1);
}

uint64_t dispatch thunk of RPCOspreyConnectionProtocol.connectionConfiguration.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of RPCOspreyConnectionProtocol.connectionConfiguration.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of RPCOspreyConnectionProtocol.connectionConfiguration.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of RPCOspreyConnectionProtocol.enableDeviceAuthentication.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of RPCOspreyConnectionProtocol.enableDeviceAuthentication.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of RPCOspreyConnectionProtocol.enableDeviceAuthentication.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of RPCOspreyConnectionProtocol.connectionIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of RPCOspreyConnectionProtocol.connectionIdentifier.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 64))();
}

uint64_t dispatch thunk of RPCOspreyConnectionProtocol.connectionIdentifier.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of RPCOspreyConnectionProtocol.ospreyRequestBuilder.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of RPCOspreyConnectionProtocol.ospreyRequestBuilder.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 88))();
}

uint64_t dispatch thunk of RPCOspreyConnectionProtocol.ospreyRequestBuilder.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 96))();
}

uint64_t dispatch thunk of RPCOspreyConnectionProtocol.connectionMetrics.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 104))();
}

uint64_t dispatch thunk of RPCOspreyConnectionProtocol.connectionMetrics.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 112))();
}

uint64_t dispatch thunk of RPCOspreyConnectionProtocol.connectionMetrics.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 120))();
}

uint64_t dispatch thunk of RPCOspreyConnectionProtocol.init(url:connectionConfiguration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 128))();
}

uint64_t dispatch thunk of RPCOspreyConnectionProtocol.serverStreamingRequest(withMethodName:request:requestBuilder:streamingResponseHandler:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return (*(uint64_t (**)(void))(a12 + 136))();
}

uint64_t dispatch thunk of RPCOspreyConnectionProtocol.bidirectionalStreamingRequest(withMethodName:requestBuilder:streamingResponseHandler:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return (*(uint64_t (**)(void))(a10 + 144))();
}

uint64_t dispatch thunk of RPCOspreyConnectionProtocol.send(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 152))();
}

uint64_t dispatch thunk of RPCOspreyConnectionProtocol.preconnect()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 160))();
}

uint64_t dispatch thunk of RPCOspreyConnectionProtocol.close()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 168))();
}

uint64_t dispatch thunk of RPCOspreyConnectionProtocol.cancel()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 176))();
}

uint64_t dispatch thunk of RPCOspreyConnectionProtocol.getMetrics()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 184))();
}

id ConnectionNetworkReport.netSessionConnectionNetwork.getter()
{
  uint64_t v2 = v0;
  id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F6E4F0]), sel_init);
  if (v3)
  {
    long long v4 = (unsigned __int8 *)v0 + 265;
    outlined init with take of String?((uint64_t)(v0 + 2), (uint64_t)v23);
    outlined init with take of String?((uint64_t)v23, (uint64_t)&v24);
    uint64_t v5 = v25;
    if (v25)
    {
      uint64_t v6 = v24;
      id v7 = v3;
      uint64_t v5 = (void *)MEMORY[0x2611B2220](v6, v5);
    }
    else
    {
      id v8 = v3;
    }
    objc_msgSend(v3, sel_setCarrierName_, v5);

    if (*((unsigned char *)v2 + 4)) {
      uint64_t v9 = 0;
    }
    else {
      uint64_t v9 = *v2;
    }
    objc_msgSend(v3, sel_setAttempCount_, v9);
    double v10 = *((double *)v2 + 38);
    if (*((unsigned char *)v2 + 312)) {
      double v10 = 0.0;
    }
    objc_msgSend(v3, sel_setClearChannelAssessmentScore_, v10);
    OUTLINED_FUNCTION_0_11();
    objc_msgSend(v3, sel_setDnsResolutionTime_);
    OUTLINED_FUNCTION_0_11();
    objc_msgSend(v3, sel_setStartToDNSResolution_);
    OUTLINED_FUNCTION_0_11();
    objc_msgSend(v3, sel_setConnectionStartToEstablishmentTime_);
    OUTLINED_FUNCTION_0_11();
    objc_msgSend(v3, sel_setConnectionStartToTLSHandshake_);
    OUTLINED_FUNCTION_0_11();
    objc_msgSend(v3, sel_setTlsHandshakeTime_);
    OUTLINED_FUNCTION_0_11();
    objc_msgSend(v3, sel_setConnectionEstablishmentTime_);
    uint64_t v11 = ConnectionNetworkReport.firstByteTimeInMs.getter();
    if (v12) {
      uint64_t v13 = 0;
    }
    else {
      uint64_t v13 = v11;
    }
    objc_msgSend(v3, sel_setFirstByteTime_, v13);
    objc_msgSend(v3, sel_setIsCaptive_, *v4);
    double v14 = *((double *)v2 + 34);
    if (*((unsigned char *)v2 + 280)) {
      double v14 = 0.0;
    }
    objc_msgSend(v3, sel_setRssi_, v14);
    double v15 = *((double *)v2 + 36);
    if (*((unsigned char *)v2 + 296)) {
      double v15 = 0.0;
    }
    objc_msgSend(v3, sel_setSnr_, v15);
    if (*((void *)v2 + 10))
    {
      uint64_t v16 = *((void *)v2 + 9);
      uint64_t v17 = *((void *)v2 + 10);
    }
    else
    {
      uint64_t v16 = 0;
      uint64_t v17 = 0xE000000000000000;
    }
    swift_bridgeObjectRetain();
    outlined bridged method (mbnn) of @objc NETSchemaNETSessionConnectionNetwork.primarySubflowInterfaceName.setter(v16, v17, v3);
  }
  outlined init with take of String?((uint64_t)(v2 + 28), (uint64_t)v22);
  outlined init with take of String?((uint64_t)v22, (uint64_t)v26);
  if (v3 && v26[1])
  {
    type metadata accessor for NetworkAnalytics(0);
    id v18 = v3;
    OUTLINED_FUNCTION_1_10();
    objc_msgSend(v1, sel_setConnectionMethod_, static NetworkAnalytics.netConnectionMethod(from:)());
  }
  outlined init with take of String?((uint64_t)(v2 + 56), (uint64_t)v21);
  outlined init with take of String?((uint64_t)v21, (uint64_t)v27);
  if (v3 && v27[1])
  {
    type metadata accessor for NetworkAnalytics(0);
    id v19 = v3;
    objc_msgSend(v19, sel_setTlsVersion_, static NetworkAnalytics.netTLSVersion(from:)());
  }
  return v3;
}

id ConnectionNetworkReport.netDebugSessionConnectionNetwork.getter()
{
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F6E470]), sel_init);
  outlined init with take of String?(v0 + 40, (uint64_t)v9);
  outlined init with take of String?((uint64_t)v9, (uint64_t)v10);
  if (v10[1])
  {
    if (!v2) {
      return v2;
    }
    type metadata accessor for NetworkAnalytics(0);
    id v3 = v2;
    OUTLINED_FUNCTION_1_10();
    objc_msgSend(v1, sel_setWiFiPhyMode_, static NetworkAnalytics.netWiFiPhyMode(from:)());
  }
  else if (!v2)
  {
    return v2;
  }
  double v4 = *(double *)(v0 + 24);
  if (*(unsigned char *)(v0 + 32)) {
    double v4 = 0.0;
  }
  objc_msgSend(v2, sel_setSignalStrengthBars_, v4);
  double v5 = COERCE_DOUBLE(ConnectionNetworkReport.openTimeInMs.getter());
  if (v6) {
    double v5 = 0.0;
  }
  objc_msgSend(v2, sel_setOpenTimeInMs_, v5);
  if (*(unsigned char *)(v0 + 100)) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = *(unsigned int *)(v0 + 96);
  }
  objc_msgSend(v2, sel_setConnectedSubflowCount_, v7);
  return v2;
}

uint64_t outlined init with take of String?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void outlined bridged method (mbnn) of @objc NETSchemaNETSessionConnectionNetwork.primarySubflowInterfaceName.setter(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = (id)MEMORY[0x2611B2220]();
  swift_bridgeObjectRelease();
  objc_msgSend(a3, sel_setPrimarySubflowInterfaceName_, v4);
}

uint64_t OUTLINED_FUNCTION_1_10()
{
  return v0;
}

void ConnectionEstablishmentReport.init(ospreyConnectionMetrics:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (one-time initialization token for sharedNetworkAnalytics != -1) {
    swift_once();
  }
  id v4 = static NetworkAnalytics.sharedNetworkAnalytics;
  if (a1)
  {
    id v5 = static NetworkAnalytics.sharedNetworkAnalytics;
    id v6 = a1;
    objc_msgSend(v6, sel_fetchStartToDomainLookupStartTime);
    double v8 = v7;
    objc_msgSend(v6, sel_dnsResolutionTime);
    double v10 = v9;
    objc_msgSend(v6, sel_connectionEstablishmentTime);
    double v12 = v11;
    objc_msgSend(v6, sel_tcpConnectTime);
    uint64_t v14 = v13;
    objc_msgSend(v6, sel_secureConnectionTime);
    uint64_t v16 = v15;
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v18 = v17;
    unint64_t v20 = *(void *)(v17 + 16);
    unint64_t v19 = *(void *)(v17 + 24);
    unint64_t v21 = v19 >> 1;
    unint64_t v22 = v20 + 1;
    if (v19 >> 1 <= v20)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v18 = v36;
      unint64_t v19 = *(void *)(v36 + 24);
      unint64_t v21 = v19 >> 1;
    }
    *(void *)(v18 + 16) = v22;
    uint64_t v23 = v18 + 48 * v20;
    *(_OWORD *)(v23 + 32) = xmmword_25D7919C0;
    *(void *)(v23 + 48) = v14;
    *(unsigned char *)(v23 + 56) = 0;
    *(void *)(v23 + 64) = 0;
    *(unsigned char *)(v23 + 72) = 1;
    if (v21 <= v22)
    {
      OUTLINED_FUNCTION_0_12(v19);
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v18 = v37;
    }
    double v24 = v8 + v10;
    *(void *)(v18 + 16) = v20 + 2;
    uint64_t v25 = v18 + 48 * v22;
    *(_OWORD *)(v25 + 32) = xmmword_25D7919D0;
    *(void *)(v25 + 48) = v16;
    *(unsigned char *)(v25 + 56) = 0;
    *(void *)(v25 + 64) = 0;
    *(unsigned char *)(v25 + 72) = 1;
    objc_msgSend(v6, sel_dnsResolutionTime);
    uint64_t v27 = v26;
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v29 = v28;
    unint64_t v31 = *(void *)(v28 + 16);
    unint64_t v30 = *(void *)(v28 + 24);
    if (v31 >= v30 >> 1)
    {
      OUTLINED_FUNCTION_0_12(v30);
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v29 = v38;
    }
    *(void *)(v29 + 16) = v31 + 1;
    uint64_t v32 = v29 + 80 * v31;
    *(_DWORD *)(v32 + 32) = 0;
    double v33 = v24 + v12;
    *(unsigned char *)(v32 + 36) = 1;
    *(void *)(v32 + 40) = v27;
    *(unsigned char *)(v32 + 48) = 0;
    *(_DWORD *)(v32 + 52) = 0;
    *(unsigned char *)(v32 + 56) = 1;
    *(_OWORD *)(v32 + 64) = 0u;
    *(_OWORD *)(v32 + 80) = 0u;
    *(_OWORD *)(v32 + 96) = 0u;

    char v34 = 0;
  }
  else
  {
    id v35 = static NetworkAnalytics.sharedNetworkAnalytics;
    uint64_t v18 = MEMORY[0x263F8EE78];
    double v33 = 0.0;
    char v34 = 1;
    uint64_t v29 = MEMORY[0x263F8EE78];
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(unsigned char *)(a2 + 20) = 1;
  *(void *)(a2 + 24) = 0;
  *(unsigned char *)(a2 + 32) = 1;
  *(double *)(a2 + 40) = v33;
  *(unsigned char *)(a2 + 48) = v34;
  *(void *)(a2 + 56) = v18;
  *(void *)(a2 + 64) = v29;
  *(unsigned char *)(a2 + 72) = 0;
  *(unsigned char *)(a2 + 73) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = v4;
}

BOOL OUTLINED_FUNCTION_0_12@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

void destroy for ConnectionSnapshotReport(void *a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (a1[18])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[49])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (a1[54] != 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v2 = (void *)a1[88];
}

uint64_t initializeWithCopy for ConnectionSnapshotReport(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  id v6 = (unsigned char *)(a2 + 40);
  uint64_t v7 = *(void *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v7)
  {
    *(_DWORD *)(a1 + 40) = *(_DWORD *)v6;
    *(unsigned char *)(a1 + 44) = v6[4];
    uint64_t v8 = *(void *)(a2 + 56);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = v8;
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
    uint64_t v9 = *(void *)(a2 + 88);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = v9;
    uint64_t v10 = *(void *)(a2 + 104);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(void *)(a1 + 104) = v10;
    uint64_t v11 = *(void *)(a2 + 120);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(void *)(a1 + 120) = v11;
    *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
    *(unsigned char *)(a1 + 132) = *(unsigned char *)(a2 + 132);
    *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
    *(unsigned char *)(a1 + 140) = *(unsigned char *)(a2 + 140);
    uint64_t v12 = *(void *)(a2 + 152);
    uint64_t v13 = *(void *)(a2 + 160);
    *(void *)(a1 + 144) = v7;
    *(void *)(a1 + 152) = v12;
    *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
    uint64_t v14 = *(void *)(a2 + 168);
    *(void *)(a1 + 160) = v13;
    *(void *)(a1 + 168) = v14;
    *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
    *(void *)(a1 + 184) = *(void *)(a2 + 184);
    *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
    *(void *)(a1 + 200) = *(void *)(a2 + 200);
    *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
    *(void *)(a1 + 216) = *(void *)(a2 + 216);
    uint64_t v15 = *(void *)(a2 + 232);
    *(unsigned char *)(a1 + 240) = *(unsigned char *)(a2 + 240);
    *(void *)(a1 + 232) = v15;
    uint64_t v16 = *(void *)(a2 + 248);
    *(unsigned char *)(a1 + 256) = *(unsigned char *)(a2 + 256);
    *(void *)(a1 + 248) = v16;
    uint64_t v17 = *(void *)(a2 + 272);
    *(void *)(a1 + 264) = *(void *)(a2 + 264);
    *(void *)(a1 + 272) = v17;
    uint64_t v18 = *(void *)(a2 + 280);
    *(unsigned char *)(a1 + 288) = *(unsigned char *)(a2 + 288);
    *(void *)(a1 + 280) = v18;
    uint64_t v19 = *(void *)(a2 + 296);
    *(unsigned char *)(a1 + 304) = *(unsigned char *)(a2 + 304);
    *(void *)(a1 + 296) = v19;
    *(unsigned char *)(a1 + 305) = *(unsigned char *)(a2 + 305);
    uint64_t v20 = *(void *)(a2 + 312);
    *(unsigned char *)(a1 + 320) = *(unsigned char *)(a2 + 320);
    *(void *)(a1 + 312) = v20;
    uint64_t v21 = *(void *)(a2 + 328);
    *(unsigned char *)(a1 + 336) = *(unsigned char *)(a2 + 336);
    *(void *)(a1 + 328) = v21;
    uint64_t v22 = *(void *)(a2 + 344);
    *(unsigned char *)(a1 + 352) = *(unsigned char *)(a2 + 352);
    *(void *)(a1 + 344) = v22;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    memcpy((void *)(a1 + 40), v6, 0x139uLL);
  }
  *(unsigned char *)(a1 + 376) = *(unsigned char *)(a2 + 376);
  *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
  uint64_t v23 = *(void *)(a2 + 392);
  if (v23)
  {
    *(void *)(a1 + 384) = *(void *)(a2 + 384);
    *(void *)(a1 + 392) = v23;
    uint64_t v24 = *(void *)(a2 + 408);
    *(void *)(a1 + 400) = *(void *)(a2 + 400);
    *(void *)(a1 + 408) = v24;
    *(unsigned char *)(a1 + 416) = *(unsigned char *)(a2 + 416);
    *(_DWORD *)(a1 + 420) = *(_DWORD *)(a2 + 420);
    uint64_t v25 = *(void *)(a2 + 432);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v25 != 1)
    {
      *(void *)(a1 + 424) = *(void *)(a2 + 424);
      *(void *)(a1 + 432) = v25;
      uint64_t v29 = *(void *)(a2 + 448);
      *(void *)(a1 + 440) = *(void *)(a2 + 440);
      *(void *)(a1 + 448) = v29;
      *(unsigned char *)(a1 + 456) = *(unsigned char *)(a2 + 456);
      *(void *)(a1 + 464) = *(void *)(a2 + 464);
      *(unsigned char *)(a1 + 472) = *(unsigned char *)(a2 + 472);
      *(void *)(a1 + 480) = *(void *)(a2 + 480);
      *(unsigned char *)(a1 + 488) = *(unsigned char *)(a2 + 488);
      uint64_t v30 = *(void *)(a2 + 496);
      *(unsigned char *)(a1 + 504) = *(unsigned char *)(a2 + 504);
      *(void *)(a1 + 496) = v30;
      *(void *)(a1 + 512) = *(void *)(a2 + 512);
      *(unsigned char *)(a1 + 520) = *(unsigned char *)(a2 + 520);
      *(void *)(a1 + 528) = *(void *)(a2 + 528);
      *(unsigned char *)(a1 + 536) = *(unsigned char *)(a2 + 536);
      *(void *)(a1 + 544) = *(void *)(a2 + 544);
      *(unsigned char *)(a1 + 552) = *(unsigned char *)(a2 + 552);
      *(unsigned char *)(a1 + 568) = *(unsigned char *)(a2 + 568);
      *(void *)(a1 + 560) = *(void *)(a2 + 560);
      *(unsigned char *)(a1 + 584) = *(unsigned char *)(a2 + 584);
      *(void *)(a1 + 576) = *(void *)(a2 + 576);
      *(unsigned char *)(a1 + 592) = *(unsigned char *)(a2 + 592);
      *(_DWORD *)(a1 + 588) = *(_DWORD *)(a2 + 588);
      *(unsigned char *)(a1 + 600) = *(unsigned char *)(a2 + 600);
      *(_DWORD *)(a1 + 596) = *(_DWORD *)(a2 + 596);
      *(unsigned char *)(a1 + 608) = *(unsigned char *)(a2 + 608);
      *(_DWORD *)(a1 + 604) = *(_DWORD *)(a2 + 604);
      LODWORD(v30) = *(_DWORD *)(a2 + 612);
      *(unsigned char *)(a1 + 616) = *(unsigned char *)(a2 + 616);
      *(_DWORD *)(a1 + 612) = v30;
      uint64_t v31 = *(void *)(a2 + 624);
      *(unsigned char *)(a1 + 632) = *(unsigned char *)(a2 + 632);
      *(void *)(a1 + 624) = v31;
      uint64_t v32 = *(void *)(a2 + 640);
      *(unsigned char *)(a1 + 648) = *(unsigned char *)(a2 + 648);
      *(void *)(a1 + 640) = v32;
      LODWORD(v32) = *(_DWORD *)(a2 + 652);
      *(unsigned char *)(a1 + 656) = *(unsigned char *)(a2 + 656);
      *(_DWORD *)(a1 + 652) = v32;
      LODWORD(v32) = *(_DWORD *)(a2 + 660);
      *(unsigned char *)(a1 + 664) = *(unsigned char *)(a2 + 664);
      *(_DWORD *)(a1 + 660) = v32;
      LODWORD(v32) = *(_DWORD *)(a2 + 668);
      *(unsigned char *)(a1 + 672) = *(unsigned char *)(a2 + 672);
      *(_DWORD *)(a1 + 668) = v32;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_10;
    }
    uint64_t v26 = (void *)(a1 + 424);
    uint64_t v27 = (const void *)(a2 + 424);
    size_t v28 = 249;
  }
  else
  {
    uint64_t v26 = (void *)(a1 + 384);
    uint64_t v27 = (const void *)(a2 + 384);
    size_t v28 = 289;
  }
  memcpy(v26, v27, v28);
LABEL_10:
  *(void *)(a1 + 680) = *(void *)(a2 + 680);
  *(void *)(a1 + 688) = *(void *)(a2 + 688);
  *(_DWORD *)(a1 + 696) = *(_DWORD *)(a2 + 696);
  double v33 = *(void **)(a2 + 704);
  *(void *)(a1 + 704) = v33;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v34 = v33;
  return a1;
}

uint64_t assignWithCopy for ConnectionSnapshotReport(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (_DWORD *)(a1 + 40);
  uint64_t v5 = (int *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 144);
  if (*(void *)(a1 + 144))
  {
    if (v6)
    {
      int v7 = *v5;
      *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 44);
      *uint64_t v4 = v7;
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v8 = *(void *)(a2 + 64);
      *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
      *(void *)(a1 + 64) = v8;
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      int v9 = *(_DWORD *)(a2 + 128);
      *(unsigned char *)(a1 + 132) = *(unsigned char *)(a2 + 132);
      *(_DWORD *)(a1 + 128) = v9;
      LOBYTE(v9) = *(unsigned char *)(a2 + 140);
      *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
      *(unsigned char *)(a1 + 140) = v9;
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      *(void *)(a1 + 160) = *(void *)(a2 + 160);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v10 = *(void *)(a2 + 168);
      *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
      *(void *)(a1 + 168) = v10;
      uint64_t v11 = *(void *)(a2 + 184);
      *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
      *(void *)(a1 + 184) = v11;
      uint64_t v12 = *(void *)(a2 + 200);
      *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
      *(void *)(a1 + 200) = v12;
      uint64_t v13 = *(void *)(a2 + 216);
      *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
      *(void *)(a1 + 216) = v13;
      uint64_t v14 = *(void *)(a2 + 232);
      *(unsigned char *)(a1 + 240) = *(unsigned char *)(a2 + 240);
      *(void *)(a1 + 232) = v14;
      uint64_t v15 = *(void *)(a2 + 248);
      *(unsigned char *)(a1 + 256) = *(unsigned char *)(a2 + 256);
      *(void *)(a1 + 248) = v15;
      *(void *)(a1 + 264) = *(void *)(a2 + 264);
      *(void *)(a1 + 272) = *(void *)(a2 + 272);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v16 = *(void *)(a2 + 280);
      *(unsigned char *)(a1 + 288) = *(unsigned char *)(a2 + 288);
      *(void *)(a1 + 280) = v16;
      uint64_t v17 = *(void *)(a2 + 296);
      *(unsigned char *)(a1 + 304) = *(unsigned char *)(a2 + 304);
      *(void *)(a1 + 296) = v17;
      *(unsigned char *)(a1 + 305) = *(unsigned char *)(a2 + 305);
      uint64_t v18 = *(void *)(a2 + 312);
      *(unsigned char *)(a1 + 320) = *(unsigned char *)(a2 + 320);
      *(void *)(a1 + 312) = v18;
      uint64_t v19 = *(void *)(a2 + 328);
      *(unsigned char *)(a1 + 336) = *(unsigned char *)(a2 + 336);
      *(void *)(a1 + 328) = v19;
      uint64_t v20 = *(void *)(a2 + 344);
      *(unsigned char *)(a1 + 352) = *(unsigned char *)(a2 + 352);
      *(void *)(a1 + 344) = v20;
      goto LABEL_8;
    }
    outlined destroy of ConnectionNetworkReport(a1 + 40);
  }
  else if (v6)
  {
    int v21 = *v5;
    *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 44);
    *uint64_t v4 = v21;
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    uint64_t v22 = *(void *)(a2 + 64);
    *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
    *(void *)(a1 + 64) = v22;
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    LODWORD(v22) = *(_DWORD *)(a2 + 128);
    *(unsigned char *)(a1 + 132) = *(unsigned char *)(a2 + 132);
    *(_DWORD *)(a1 + 128) = v22;
    LODWORD(v22) = *(_DWORD *)(a2 + 136);
    *(unsigned char *)(a1 + 140) = *(unsigned char *)(a2 + 140);
    *(_DWORD *)(a1 + 136) = v22;
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    uint64_t v23 = *(void *)(a2 + 168);
    *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
    *(void *)(a1 + 168) = v23;
    uint64_t v24 = *(void *)(a2 + 184);
    *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
    *(void *)(a1 + 184) = v24;
    uint64_t v25 = *(void *)(a2 + 200);
    *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
    *(void *)(a1 + 200) = v25;
    uint64_t v26 = *(void *)(a2 + 216);
    *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
    *(void *)(a1 + 216) = v26;
    uint64_t v27 = *(void *)(a2 + 232);
    *(unsigned char *)(a1 + 240) = *(unsigned char *)(a2 + 240);
    *(void *)(a1 + 232) = v27;
    uint64_t v28 = *(void *)(a2 + 248);
    *(unsigned char *)(a1 + 256) = *(unsigned char *)(a2 + 256);
    *(void *)(a1 + 248) = v28;
    *(void *)(a1 + 264) = *(void *)(a2 + 264);
    *(void *)(a1 + 272) = *(void *)(a2 + 272);
    uint64_t v29 = *(void *)(a2 + 280);
    *(unsigned char *)(a1 + 288) = *(unsigned char *)(a2 + 288);
    *(void *)(a1 + 280) = v29;
    uint64_t v30 = *(void *)(a2 + 296);
    *(unsigned char *)(a1 + 304) = *(unsigned char *)(a2 + 304);
    *(void *)(a1 + 296) = v30;
    *(unsigned char *)(a1 + 305) = *(unsigned char *)(a2 + 305);
    uint64_t v31 = *(void *)(a2 + 312);
    *(unsigned char *)(a1 + 320) = *(unsigned char *)(a2 + 320);
    *(void *)(a1 + 312) = v31;
    uint64_t v32 = *(void *)(a2 + 328);
    *(unsigned char *)(a1 + 336) = *(unsigned char *)(a2 + 336);
    *(void *)(a1 + 328) = v32;
    uint64_t v33 = *(void *)(a2 + 344);
    *(unsigned char *)(a1 + 352) = *(unsigned char *)(a2 + 352);
    *(void *)(a1 + 344) = v33;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_8;
  }
  memcpy((void *)(a1 + 40), (const void *)(a2 + 40), 0x139uLL);
LABEL_8:
  long long v34 = *(_OWORD *)(a2 + 360);
  *(unsigned char *)(a1 + 376) = *(unsigned char *)(a2 + 376);
  *(_OWORD *)(a1 + 360) = v34;
  uint64_t v35 = *(void *)(a2 + 392);
  if (!*(void *)(a1 + 392))
  {
    if (v35)
    {
      *(void *)(a1 + 384) = *(void *)(a2 + 384);
      *(void *)(a1 + 392) = *(void *)(a2 + 392);
      *(void *)(a1 + 400) = *(void *)(a2 + 400);
      *(void *)(a1 + 408) = *(void *)(a2 + 408);
      *(unsigned char *)(a1 + 416) = *(unsigned char *)(a2 + 416);
      *(_DWORD *)(a1 + 420) = *(_DWORD *)(a2 + 420);
      uint64_t v37 = *(void *)(a2 + 432);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v37 == 1)
      {
        uint64_t v38 = (void *)(a1 + 424);
        uint64_t v39 = (const void *)(a2 + 424);
LABEL_22:
        size_t v40 = 249;
        goto LABEL_23;
      }
      goto LABEL_18;
    }
LABEL_17:
    uint64_t v38 = (void *)(a1 + 384);
    uint64_t v39 = (const void *)(a2 + 384);
    size_t v40 = 289;
LABEL_23:
    memcpy(v38, v39, v40);
    goto LABEL_24;
  }
  if (!v35)
  {
    outlined destroy of ConnectionInterfaceReport(a1 + 384);
    goto LABEL_17;
  }
  *(void *)(a1 + 384) = *(void *)(a2 + 384);
  *(void *)(a1 + 392) = *(void *)(a2 + 392);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 400) = *(void *)(a2 + 400);
  *(void *)(a1 + 408) = *(void *)(a2 + 408);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 416) = *(unsigned char *)(a2 + 416);
  *(_DWORD *)(a1 + 420) = *(_DWORD *)(a2 + 420);
  uint64_t v36 = *(void *)(a2 + 432);
  if (*(void *)(a1 + 432) != 1)
  {
    if (v36 != 1)
    {
      *(void *)(a1 + 424) = *(void *)(a2 + 424);
      *(void *)(a1 + 432) = *(void *)(a2 + 432);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 440) = *(void *)(a2 + 440);
      *(void *)(a1 + 448) = *(void *)(a2 + 448);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(unsigned char *)(a1 + 456) = *(unsigned char *)(a2 + 456);
      uint64_t v55 = *(void *)(a2 + 464);
      *(unsigned char *)(a1 + 472) = *(unsigned char *)(a2 + 472);
      *(void *)(a1 + 464) = v55;
      uint64_t v56 = *(void *)(a2 + 480);
      *(unsigned char *)(a1 + 488) = *(unsigned char *)(a2 + 488);
      *(void *)(a1 + 480) = v56;
      uint64_t v57 = *(void *)(a2 + 496);
      *(unsigned char *)(a1 + 504) = *(unsigned char *)(a2 + 504);
      *(void *)(a1 + 496) = v57;
      uint64_t v58 = *(void *)(a2 + 512);
      *(unsigned char *)(a1 + 520) = *(unsigned char *)(a2 + 520);
      *(void *)(a1 + 512) = v58;
      uint64_t v59 = *(void *)(a2 + 528);
      *(unsigned char *)(a1 + 536) = *(unsigned char *)(a2 + 536);
      *(void *)(a1 + 528) = v59;
      uint64_t v60 = *(void *)(a2 + 544);
      *(unsigned char *)(a1 + 552) = *(unsigned char *)(a2 + 552);
      *(void *)(a1 + 544) = v60;
      uint64_t v61 = *(void *)(a2 + 560);
      *(unsigned char *)(a1 + 568) = *(unsigned char *)(a2 + 568);
      *(void *)(a1 + 560) = v61;
      uint64_t v62 = *(void *)(a2 + 576);
      *(unsigned char *)(a1 + 584) = *(unsigned char *)(a2 + 584);
      *(void *)(a1 + 576) = v62;
      LODWORD(v62) = *(_DWORD *)(a2 + 588);
      *(unsigned char *)(a1 + 592) = *(unsigned char *)(a2 + 592);
      *(_DWORD *)(a1 + 588) = v62;
      LODWORD(v62) = *(_DWORD *)(a2 + 596);
      *(unsigned char *)(a1 + 600) = *(unsigned char *)(a2 + 600);
      *(_DWORD *)(a1 + 596) = v62;
      LODWORD(v62) = *(_DWORD *)(a2 + 604);
      *(unsigned char *)(a1 + 608) = *(unsigned char *)(a2 + 608);
      *(_DWORD *)(a1 + 604) = v62;
      LODWORD(v62) = *(_DWORD *)(a2 + 612);
      *(unsigned char *)(a1 + 616) = *(unsigned char *)(a2 + 616);
      *(_DWORD *)(a1 + 612) = v62;
      uint64_t v63 = *(void *)(a2 + 624);
      *(unsigned char *)(a1 + 632) = *(unsigned char *)(a2 + 632);
      *(void *)(a1 + 624) = v63;
      uint64_t v64 = *(void *)(a2 + 640);
      *(unsigned char *)(a1 + 648) = *(unsigned char *)(a2 + 648);
      *(void *)(a1 + 640) = v64;
      LODWORD(v64) = *(_DWORD *)(a2 + 652);
      *(unsigned char *)(a1 + 656) = *(unsigned char *)(a2 + 656);
      *(_DWORD *)(a1 + 652) = v64;
      LODWORD(v64) = *(_DWORD *)(a2 + 660);
      *(unsigned char *)(a1 + 664) = *(unsigned char *)(a2 + 664);
      *(_DWORD *)(a1 + 660) = v64;
      LODWORD(v64) = *(_DWORD *)(a2 + 668);
      *(unsigned char *)(a1 + 672) = *(unsigned char *)(a2 + 672);
      *(_DWORD *)(a1 + 668) = v64;
      goto LABEL_24;
    }
    outlined destroy of ConnectionTCPInfoMetrics(a1 + 424);
    goto LABEL_21;
  }
  if (v36 == 1)
  {
LABEL_21:
    uint64_t v38 = (void *)(a1 + 424);
    uint64_t v39 = (const void *)(a2 + 424);
    goto LABEL_22;
  }
LABEL_18:
  *(void *)(a1 + 424) = *(void *)(a2 + 424);
  *(void *)(a1 + 432) = *(void *)(a2 + 432);
  *(void *)(a1 + 440) = *(void *)(a2 + 440);
  *(void *)(a1 + 448) = *(void *)(a2 + 448);
  *(unsigned char *)(a1 + 456) = *(unsigned char *)(a2 + 456);
  uint64_t v41 = *(void *)(a2 + 464);
  *(unsigned char *)(a1 + 472) = *(unsigned char *)(a2 + 472);
  *(void *)(a1 + 464) = v41;
  uint64_t v42 = *(void *)(a2 + 480);
  *(unsigned char *)(a1 + 488) = *(unsigned char *)(a2 + 488);
  *(void *)(a1 + 480) = v42;
  uint64_t v43 = *(void *)(a2 + 496);
  *(unsigned char *)(a1 + 504) = *(unsigned char *)(a2 + 504);
  *(void *)(a1 + 496) = v43;
  uint64_t v44 = *(void *)(a2 + 512);
  *(unsigned char *)(a1 + 520) = *(unsigned char *)(a2 + 520);
  *(void *)(a1 + 512) = v44;
  uint64_t v45 = *(void *)(a2 + 528);
  *(unsigned char *)(a1 + 536) = *(unsigned char *)(a2 + 536);
  *(void *)(a1 + 528) = v45;
  uint64_t v46 = *(void *)(a2 + 544);
  *(unsigned char *)(a1 + 552) = *(unsigned char *)(a2 + 552);
  *(void *)(a1 + 544) = v46;
  uint64_t v47 = *(void *)(a2 + 560);
  *(unsigned char *)(a1 + 568) = *(unsigned char *)(a2 + 568);
  *(void *)(a1 + 560) = v47;
  uint64_t v48 = *(void *)(a2 + 576);
  *(unsigned char *)(a1 + 584) = *(unsigned char *)(a2 + 584);
  *(void *)(a1 + 576) = v48;
  LODWORD(v48) = *(_DWORD *)(a2 + 588);
  *(unsigned char *)(a1 + 592) = *(unsigned char *)(a2 + 592);
  *(_DWORD *)(a1 + 588) = v48;
  LODWORD(v48) = *(_DWORD *)(a2 + 596);
  *(unsigned char *)(a1 + 600) = *(unsigned char *)(a2 + 600);
  *(_DWORD *)(a1 + 596) = v48;
  LODWORD(v48) = *(_DWORD *)(a2 + 604);
  *(unsigned char *)(a1 + 608) = *(unsigned char *)(a2 + 608);
  *(_DWORD *)(a1 + 604) = v48;
  LODWORD(v48) = *(_DWORD *)(a2 + 612);
  *(unsigned char *)(a1 + 616) = *(unsigned char *)(a2 + 616);
  *(_DWORD *)(a1 + 612) = v48;
  uint64_t v49 = *(void *)(a2 + 624);
  *(unsigned char *)(a1 + 632) = *(unsigned char *)(a2 + 632);
  *(void *)(a1 + 624) = v49;
  uint64_t v50 = *(void *)(a2 + 640);
  *(unsigned char *)(a1 + 648) = *(unsigned char *)(a2 + 648);
  *(void *)(a1 + 640) = v50;
  LODWORD(v50) = *(_DWORD *)(a2 + 652);
  *(unsigned char *)(a1 + 656) = *(unsigned char *)(a2 + 656);
  *(_DWORD *)(a1 + 652) = v50;
  LODWORD(v50) = *(_DWORD *)(a2 + 660);
  *(unsigned char *)(a1 + 664) = *(unsigned char *)(a2 + 664);
  *(_DWORD *)(a1 + 660) = v50;
  LODWORD(v50) = *(_DWORD *)(a2 + 668);
  *(unsigned char *)(a1 + 672) = *(unsigned char *)(a2 + 672);
  *(_DWORD *)(a1 + 668) = v50;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
LABEL_24:
  *(void *)(a1 + 680) = *(void *)(a2 + 680);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 688) = *(void *)(a2 + 688);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 696) = *(_DWORD *)(a2 + 696);
  uint64_t v51 = *(void **)(a2 + 704);
  uint64_t v52 = *(void **)(a1 + 704);
  *(void *)(a1 + 704) = v51;
  id v53 = v51;

  return a1;
}

uint64_t outlined destroy of ConnectionNetworkReport(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of ConnectionTCPInfoMetrics(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of ConnectionInterfaceReport(uint64_t a1)
{
  return a1;
}

void *__swift_memcpy712_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x2C8uLL);
}

void *assignWithTake for ConnectionSnapshotReport(void *a1, void *a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[4];
  a1[3] = a2[3];
  a1[4] = v5;
  swift_bridgeObjectRelease();
  if (a1[18])
  {
    if (a2[18])
    {
      *((_DWORD *)a1 + 10) = *((_DWORD *)a2 + 10);
      *((unsigned char *)a1 + 44) = *((unsigned char *)a2 + 44);
      uint64_t v6 = a2[7];
      a1[6] = a2[6];
      a1[7] = v6;
      swift_bridgeObjectRelease();
      a1[8] = a2[8];
      *((unsigned char *)a1 + 72) = *((unsigned char *)a2 + 72);
      uint64_t v7 = a2[11];
      a1[10] = a2[10];
      a1[11] = v7;
      swift_bridgeObjectRelease();
      uint64_t v8 = a2[13];
      a1[12] = a2[12];
      a1[13] = v8;
      swift_bridgeObjectRelease();
      uint64_t v9 = a2[15];
      a1[14] = a2[14];
      a1[15] = v9;
      swift_bridgeObjectRelease();
      *((_DWORD *)a1 + 32) = *((_DWORD *)a2 + 32);
      *((unsigned char *)a1 + 132) = *((unsigned char *)a2 + 132);
      *((_DWORD *)a1 + 34) = *((_DWORD *)a2 + 34);
      *((unsigned char *)a1 + 140) = *((unsigned char *)a2 + 140);
      a1[18] = a2[18];
      swift_bridgeObjectRelease();
      uint64_t v10 = a2[20];
      a1[19] = a2[19];
      a1[20] = v10;
      swift_bridgeObjectRelease();
      a1[21] = a2[21];
      *((unsigned char *)a1 + 176) = *((unsigned char *)a2 + 176);
      a1[23] = a2[23];
      *((unsigned char *)a1 + 192) = *((unsigned char *)a2 + 192);
      a1[25] = a2[25];
      *((unsigned char *)a1 + 208) = *((unsigned char *)a2 + 208);
      *((unsigned char *)a1 + 224) = *((unsigned char *)a2 + 224);
      a1[27] = a2[27];
      uint64_t v11 = a2[29];
      *((unsigned char *)a1 + 240) = *((unsigned char *)a2 + 240);
      a1[29] = v11;
      a1[31] = a2[31];
      *((unsigned char *)a1 + 256) = *((unsigned char *)a2 + 256);
      uint64_t v12 = a2[34];
      a1[33] = a2[33];
      a1[34] = v12;
      swift_bridgeObjectRelease();
      a1[35] = a2[35];
      *((unsigned char *)a1 + 288) = *((unsigned char *)a2 + 288);
      a1[37] = a2[37];
      *((unsigned char *)a1 + 304) = *((unsigned char *)a2 + 304);
      *((unsigned char *)a1 + 305) = *((unsigned char *)a2 + 305);
      a1[39] = a2[39];
      *((unsigned char *)a1 + 320) = *((unsigned char *)a2 + 320);
      *((unsigned char *)a1 + 336) = *((unsigned char *)a2 + 336);
      a1[41] = a2[41];
      a1[43] = a2[43];
      *((unsigned char *)a1 + 352) = *((unsigned char *)a2 + 352);
      goto LABEL_6;
    }
    outlined destroy of ConnectionNetworkReport((uint64_t)(a1 + 5));
  }
  memcpy(a1 + 5, a2 + 5, 0x139uLL);
LABEL_6:
  *((unsigned char *)a1 + 376) = *((unsigned char *)a2 + 376);
  *(_OWORD *)(a1 + 45) = *(_OWORD *)(a2 + 45);
  if (!a1[49])
  {
LABEL_13:
    uint64_t v16 = a1 + 48;
    uint64_t v17 = a2 + 48;
    size_t v18 = 289;
    goto LABEL_14;
  }
  uint64_t v13 = a2[49];
  if (!v13)
  {
    outlined destroy of ConnectionInterfaceReport((uint64_t)(a1 + 48));
    goto LABEL_13;
  }
  a1[48] = a2[48];
  a1[49] = v13;
  swift_bridgeObjectRelease();
  uint64_t v14 = a2[51];
  a1[50] = a2[50];
  a1[51] = v14;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 416) = *((unsigned char *)a2 + 416);
  *((_DWORD *)a1 + 105) = *((_DWORD *)a2 + 105);
  if (a1[54] != 1)
  {
    uint64_t v15 = a2[54];
    if (v15 != 1)
    {
      a1[53] = a2[53];
      a1[54] = v15;
      swift_bridgeObjectRelease();
      uint64_t v21 = a2[56];
      a1[55] = a2[55];
      a1[56] = v21;
      swift_bridgeObjectRelease();
      *((unsigned char *)a1 + 456) = *((unsigned char *)a2 + 456);
      a1[58] = a2[58];
      *((unsigned char *)a1 + 472) = *((unsigned char *)a2 + 472);
      a1[60] = a2[60];
      *((unsigned char *)a1 + 488) = *((unsigned char *)a2 + 488);
      a1[62] = a2[62];
      *((unsigned char *)a1 + 504) = *((unsigned char *)a2 + 504);
      *((unsigned char *)a1 + 520) = *((unsigned char *)a2 + 520);
      a1[64] = a2[64];
      uint64_t v22 = a2[66];
      *((unsigned char *)a1 + 536) = *((unsigned char *)a2 + 536);
      a1[66] = v22;
      a1[68] = a2[68];
      *((unsigned char *)a1 + 552) = *((unsigned char *)a2 + 552);
      a1[70] = a2[70];
      *((unsigned char *)a1 + 568) = *((unsigned char *)a2 + 568);
      a1[72] = a2[72];
      *((unsigned char *)a1 + 584) = *((unsigned char *)a2 + 584);
      *((unsigned char *)a1 + 592) = *((unsigned char *)a2 + 592);
      *((_DWORD *)a1 + 147) = *((_DWORD *)a2 + 147);
      *((unsigned char *)a1 + 600) = *((unsigned char *)a2 + 600);
      *((_DWORD *)a1 + 149) = *((_DWORD *)a2 + 149);
      *((unsigned char *)a1 + 608) = *((unsigned char *)a2 + 608);
      *((_DWORD *)a1 + 151) = *((_DWORD *)a2 + 151);
      *((unsigned char *)a1 + 616) = *((unsigned char *)a2 + 616);
      *((_DWORD *)a1 + 153) = *((_DWORD *)a2 + 153);
      *((unsigned char *)a1 + 632) = *((unsigned char *)a2 + 632);
      a1[78] = a2[78];
      uint64_t v23 = a2[80];
      *((unsigned char *)a1 + 648) = *((unsigned char *)a2 + 648);
      a1[80] = v23;
      LODWORD(v23) = *((_DWORD *)a2 + 163);
      *((unsigned char *)a1 + 656) = *((unsigned char *)a2 + 656);
      *((_DWORD *)a1 + 163) = v23;
      LODWORD(v23) = *((_DWORD *)a2 + 165);
      *((unsigned char *)a1 + 664) = *((unsigned char *)a2 + 664);
      *((_DWORD *)a1 + 165) = v23;
      LODWORD(v23) = *((_DWORD *)a2 + 167);
      *((unsigned char *)a1 + 672) = *((unsigned char *)a2 + 672);
      *((_DWORD *)a1 + 167) = v23;
      goto LABEL_15;
    }
    outlined destroy of ConnectionTCPInfoMetrics((uint64_t)(a1 + 53));
  }
  uint64_t v16 = a1 + 53;
  uint64_t v17 = a2 + 53;
  size_t v18 = 249;
LABEL_14:
  memcpy(v16, v17, v18);
LABEL_15:
  a1[85] = a2[85];
  swift_bridgeObjectRelease();
  a1[86] = a2[86];
  swift_bridgeObjectRelease();
  *((_DWORD *)a1 + 174) = *((_DWORD *)a2 + 174);
  uint64_t v19 = (void *)a1[88];
  a1[88] = a2[88];

  return a1;
}

uint64_t getEnumTagSinglePayload for ConnectionSnapshotReport(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 712))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConnectionSnapshotReport(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)double result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 712) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 712) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ConnectionSnapshotReport()
{
  return &type metadata for ConnectionSnapshotReport;
}

void *ConnectionSnapshotReport.flowNetworkInterfaceType.getter()
{
  uint64_t v1 = *(void *)(v0 + 680);
  uint64_t v2 = *(void *)(v1 + 16);
  if (!v2) {
    return (void *)MEMORY[0x263F8EE80];
  }
  id v3 = (const void *)(v1 + 32);
  uint64_t v29 = v1;
  swift_bridgeObjectRetain();
  memcpy(__dst, v3, 0x121uLL);
  uint64_t v4 = v2 - 1;
  uint64_t v5 = (void *)MEMORY[0x263F8EE80];
  for (uint64_t i = 328; ; i += 296)
  {
    unint64_t v6 = 0xE700000000000000;
    uint64_t v7 = 0x6E776F6E6B6E55;
    switch(LOBYTE(__dst[4]))
    {
      case 1:
        unint64_t v6 = 0xE500000000000000;
        uint64_t v7 = 0x69462D6957;
        break;
      case 2:
        unint64_t v6 = 0xE400000000000000;
        uint64_t v7 = 1312905047;
        break;
      case 3:
        unint64_t v6 = 0xE500000000000000;
        uint64_t v7 = 0x4E41525455;
        break;
      case 4:
        unint64_t v6 = 0xE900000000000078;
        uint64_t v7 = 0x31414D4443204732;
        break;
      case 5:
        uint64_t v7 = 0x53525047204732;
        break;
      case 6:
        uint64_t v7 = 0x65676445204732;
        break;
      case 7:
        unint64_t v6 = 0xE800000000000000;
        uint64_t v7 = 0x414D444357204733;
        break;
      case 8:
        unint64_t v6 = 0xE800000000000000;
        uint64_t v9 = 0x445348204733;
        goto LABEL_19;
      case 9:
        unint64_t v6 = 0xE800000000000000;
        uint64_t v9 = 0x555348204733;
LABEL_19:
        uint64_t v7 = v9 & 0xFFFFFFFFFFFFLL | 0x4150000000000000;
        break;
      case 0xA:
        uint64_t v8 = 0x307665524FLL;
        goto LABEL_21;
      case 0xB:
        uint64_t v8 = 0x417665524FLL;
        goto LABEL_21;
      case 0xC:
        uint64_t v8 = 0x427665524FLL;
LABEL_21:
        unint64_t v6 = v8 & 0xFFFFFFFFFFFFLL | 0xED00000000000000;
        uint64_t v7 = 0x44564520414D4443;
        break;
      case 0xD:
        unint64_t v6 = 0xE400000000000000;
        uint64_t v7 = 1146114632;
        break;
      case 0xE:
        unint64_t v6 = 0xE300000000000000;
        uint64_t v7 = 4543564;
        break;
      case 0xF:
        unint64_t v6 = 0xE800000000000000;
        uint64_t v7 = 0x41534E524E204735;
        break;
      case 0x10:
        unint64_t v6 = 0xE500000000000000;
        uint64_t v7 = 0x524E204735;
        break;
      case 0x11:
        unint64_t v6 = 0xE500000000000000;
        uint64_t v7 = 0x504354504DLL;
        break;
      case 0x12:
        unint64_t v6 = 0xE800000000000000;
        uint64_t v7 = 0x796C6C654264654CLL;
        break;
      case 0x13:
        unint64_t v6 = 0xE300000000000000;
        uint64_t v7 = 5456969;
        break;
      case 0x14:
        unint64_t v6 = 0xE300000000000000;
        uint64_t v7 = 5263184;
        break;
      case 0x15:
        unint64_t v6 = 0xE800000000000000;
        uint64_t v7 = 0x65636E65726F6C46;
        break;
      case 0x16:
        unint64_t v6 = 0xE500000000000000;
        uint64_t v7 = 0x6C61636F4CLL;
        break;
      case 0x17:
        uint64_t v7 = 0x504354504D574ELL;
        break;
      case 0x18:
        unint64_t v6 = 0xE500000000000000;
        uint64_t v7 = 0x6365737069;
        break;
      default:
        break;
    }
    uint64_t v11 = __dst[0];
    uint64_t v10 = __dst[1];
    outlined retain of ConnectionInterfaceReport((uint64_t)__dst);
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v10);
    uint64_t v15 = v5[2];
    BOOL v16 = (v14 & 1) == 0;
    Swift::Int v17 = v15 + v16;
    if (__OFADD__(v15, v16))
    {
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      JUMPOUT(0x25D708F58);
    }
    unint64_t v18 = v13;
    char v19 = v14;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, String>);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v17))
    {
      unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v10);
      if ((v19 & 1) != (v21 & 1)) {
        goto LABEL_45;
      }
      unint64_t v18 = v20;
    }
    if (v19)
    {
      uint64_t v22 = (uint64_t *)(v5[7] + 16 * v18);
      swift_bridgeObjectRelease();
      *uint64_t v22 = v7;
      v22[1] = v6;
    }
    else
    {
      v5[(v18 >> 6) + 8] |= 1 << v18;
      uint64_t v23 = (uint64_t *)(v5[6] + 16 * v18);
      uint64_t *v23 = v11;
      v23[1] = v10;
      uint64_t v24 = (uint64_t *)(v5[7] + 16 * v18);
      uint64_t *v24 = v7;
      v24[1] = v6;
      uint64_t v25 = v5[2];
      BOOL v26 = __OFADD__(v25, 1);
      uint64_t v27 = v25 + 1;
      if (v26) {
        goto LABEL_44;
      }
      v5[2] = v27;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined release of ConnectionInterfaceReport((uint64_t)__dst);
    if (!v4) {
      break;
    }
    memcpy(__dst, (const void *)(v29 + i), 0x121uLL);
    --v4;
  }
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t ConnectionSnapshotReport.tcpInfoMetricsByInterfaceName.getter()
{
  uint64_t v1 = *(void *)(v0 + 688);
  uint64_t v2 = *(void *)(v1 + 16);
  if (!v2) {
    return MEMORY[0x263F8EE80];
  }
  swift_bridgeObjectRetain();
  id v3 = (void *)(v1 + 48);
  uint64_t v4 = MEMORY[0x263F8EE80];
  do
  {
    uint64_t v5 = *(v3 - 1);
    if (v5)
    {
      uint64_t v6 = *(v3 - 2);
      memcpy(v10, v3, sizeof(v10));
      swift_bridgeObjectRetain();
      id v7 = ConnectionTCPInfoMetrics.snConnectionTCPInfoMetrics.getter();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v7, v6, v5, isUniquelyReferenced_nonNull_native);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    v3 += 32;
    --v2;
  }
  while (v2);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t ConnectionSnapshotReport.isPoorLinkQuality.getter()
{
  memcpy(__dst, v0, sizeof(__dst));
  uint64_t v1 = __dst[86];
  uint64_t v2 = *(void *)(__dst[86] + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = v2 - 1;
    char v4 = 1;
    for (uint64_t i = 32; ; i += 256)
    {
      memcpy(v27, (const void *)(v1 + i), sizeof(v27));
      memcpy(v26, (const void *)(v1 + i), 0xF9uLL);
      outlined retain of ConnectionTCPInfoMetrics((uint64_t)v27);
      if (ConnectionTCPInfoMetrics.isPoorLinkQuality.getter())
      {
LABEL_4:
        outlined release of ConnectionTCPInfoMetrics((uint64_t)v27);
        goto LABEL_20;
      }
      outlined init with take of ConnectionSnapshotReport?((uint64_t)&__dst[48], (uint64_t)v26, (uint64_t *)&demangling cache variable for type metadata for ConnectionInterfaceReport?);
      if (_s11SiriNetwork25ConnectionInterfaceReportVSgWOg((uint64_t)v26) == 1)
      {
        uint64_t v6 = 0;
        uint64_t v7 = 0;
      }
      else
      {
        uint64_t v6 = v26[0];
        uint64_t v7 = v26[1];
        swift_bridgeObjectRetain();
      }
      if (!*(void *)&v27[8]) {
        break;
      }
      if (!v7) {
        goto LABEL_4;
      }
      if (*(void *)v27 == v6 && *(void *)&v27[8] == v7)
      {
        swift_bridgeObjectRetain_n();
        outlined release of ConnectionTCPInfoMetrics((uint64_t)v27);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
LABEL_19:
        char v4 = 0;
        goto LABEL_20;
      }
      char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRetain_n();
      outlined release of ConnectionTCPInfoMetrics((uint64_t)v27);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      if (v9) {
        goto LABEL_19;
      }
LABEL_20:
      if (!v3)
      {
        swift_bridgeObjectRelease();
        unsigned __int8 v28 = v4 & 1;
        if (one-time initialization token for siriNetwork != -1) {
          swift_once();
        }
        uint64_t v10 = type metadata accessor for Logger();
        __swift_project_value_buffer(v10, (uint64_t)static Logger.siriNetwork);
        int v11 = v28;
        outlined retain of ConnectionSnapshotReport((uint64_t)__dst);
        outlined retain of ConnectionSnapshotReport((uint64_t)__dst);
        uint64_t v12 = Logger.logObject.getter();
        os_log_type_t v13 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v12, v13))
        {
          uint64_t v14 = swift_slowAlloc();
          uint64_t v15 = swift_slowAlloc();
          uint64_t v25 = v15;
          *(_DWORD *)uint64_t v14 = 136315394;
          outlined init with take of ConnectionSnapshotReport?((uint64_t)&__dst[48], (uint64_t)v26, (uint64_t *)&demangling cache variable for type metadata for ConnectionInterfaceReport?);
          if (_s11SiriNetwork25ConnectionInterfaceReportVSgWOg((uint64_t)v26) == 1)
          {
            uint64_t v16 = 0;
            unint64_t v17 = 0xE000000000000000;
          }
          else
          {
            swift_bridgeObjectRetain();
            uint64_t v16 = String.init<A>(describing:)();
            unint64_t v17 = v23;
          }
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v25);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          outlined release of ConnectionSnapshotReport((uint64_t)__dst);
          outlined release of ConnectionSnapshotReport((uint64_t)__dst);
          *(_WORD *)(v14 + 12) = 2080;
          if (v11) {
            uint64_t v24 = "Poor link quality";
          }
          else {
            uint64_t v24 = "Good link quality";
          }
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000011, (unint64_t)(v24 - 32) | 0x8000000000000000, &v25);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_25D6CC000, v12, v13, "SiriNetwork - Report Link Quality for primary interface [%s]. %s", (uint8_t *)v14, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x2611B3750](v15, -1, -1);
          MEMORY[0x2611B3750](v14, -1, -1);
        }
        else
        {
          outlined release of ConnectionSnapshotReport((uint64_t)__dst);
          outlined release of ConnectionSnapshotReport((uint64_t)__dst);
        }

        swift_beginAccess();
        return v28;
      }
      --v3;
    }
    outlined release of ConnectionTCPInfoMetrics((uint64_t)v27);
    if (v7)
    {
      swift_bridgeObjectRelease();
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)static Logger.siriNetwork);
  char v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    char v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v21 = 0;
    _os_log_impl(&dword_25D6CC000, v19, v20, "SiriNetwork - Report Link Quality. Unavailable", v21, 2u);
    MEMORY[0x2611B3750](v21, -1, -1);
  }

  return 0;
}

uint64_t ConnectionSnapshotReport.debugDescription.getter()
{
  int v1 = *v0;
  uint64_t v3 = *((void *)v0 + 1);
  uint64_t v2 = (void *)*((void *)v0 + 2);
  uint64_t v5 = *((void *)v0 + 3);
  char v4 = (void *)*((void *)v0 + 4);
  uint64_t v6 = &demangling cache variable for type metadata for ConnectionNetworkReport?;
  outlined init with take of ConnectionSnapshotReport?((uint64_t)(v0 + 10), (uint64_t)v73, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
  uint64_t v7 = *((void *)v0 + 45);
  uint64_t v54 = *((void *)v0 + 46);
  char v56 = *((unsigned char *)v0 + 376);
  outlined init with take of ConnectionSnapshotReport?((uint64_t)(v0 + 96), (uint64_t)v74, (uint64_t *)&demangling cache variable for type metadata for ConnectionInterfaceReport?);
  int v60 = v0[174];
  OUTLINED_FUNCTION_2_8();
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  uint64_t v75 = 0x65636E6575716573;
  unint64_t v76 = 0xEF207265626D754ELL;
  LODWORD(__src[0]) = v1;
  v8._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  uint64_t v63 = v75;
  uint64_t v65 = (void *)v76;
  uint64_t v75 = 0x72656469766F7270;
  unint64_t v76 = 0xE900000000000020;
  swift_bridgeObjectRetain();
  v9._uint64_t countAndFlagsBits = v3;
  v9._object = v2;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  uint64_t v62 = v75;
  uint64_t v64 = (void *)v76;
  OUTLINED_FUNCTION_2_8();
  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_3_7();
  uint64_t v75 = v10;
  unint64_t v76 = v11;
  swift_bridgeObjectRetain();
  v12._uint64_t countAndFlagsBits = v5;
  v12._object = v4;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  uint64_t v59 = v75;
  uint64_t v61 = (void *)v76;
  OUTLINED_FUNCTION_2_8();
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_3_7();
  *(void *)uint64_t v68 = v13;
  *(void *)&v68[8] = v14;
  outlined init with take of ConnectionSnapshotReport?((uint64_t)v73, (uint64_t)&v75, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
  if (_s11SiriNetwork010ConnectionB6ReportVSgWOg((uint64_t)&v75) == 1)
  {
    uint64_t v15 = OUTLINED_FUNCTION_1_11();
  }
  else
  {
    outlined init with take of ConnectionSnapshotReport?((uint64_t)v73, (uint64_t)__src, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
    memcpy(__dst, __src, 0x139uLL);
    outlined retain of ConnectionNetworkReport((uint64_t)__src);
    uint64_t v15 = String.init<A>(describing:)();
    uint64_t v6 = v16;
  }
  unint64_t v17 = v6;
  String.append(_:)(*(Swift::String *)&v15);
  swift_bridgeObjectRelease();
  Swift::String v58 = *(Swift::String *)v68;
  __src[0] = 0;
  __src[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  unint64_t v71 = 0xD000000000000019;
  unint64_t v72 = 0x800000025D795640;
  if (v56)
  {
    uint64_t v18 = OUTLINED_FUNCTION_1_11();
  }
  else
  {
    __src[0] = v7;
    __src[1] = v54;
    uint64_t v18 = String.init<A>(describing:)();
    uint64_t v6 = v19;
  }
  os_log_type_t v20 = v6;
  String.append(_:)(*(Swift::String *)&v18);
  swift_bridgeObjectRelease();
  uint64_t v57 = v71;
  char v21 = (void *)v72;
  __src[0] = 0;
  __src[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_3_7();
  uint64_t v69 = v22;
  uint64_t v70 = v23;
  outlined init with take of ConnectionSnapshotReport?((uint64_t)v74, (uint64_t)__src, (uint64_t *)&demangling cache variable for type metadata for ConnectionInterfaceReport?);
  if (_s11SiriNetwork25ConnectionInterfaceReportVSgWOg((uint64_t)__src) == 1)
  {
    uint64_t v24 = OUTLINED_FUNCTION_1_11();
  }
  else
  {
    outlined init with take of ConnectionSnapshotReport?((uint64_t)v74, (uint64_t)__dst, (uint64_t *)&demangling cache variable for type metadata for ConnectionInterfaceReport?);
    memcpy(v68, __dst, sizeof(v68));
    outlined retain of ConnectionInterfaceReport((uint64_t)__dst);
    uint64_t v24 = String.init<A>(describing:)();
    uint64_t v6 = v25;
  }
  BOOL v26 = v6;
  String.append(_:)(*(Swift::String *)&v24);
  swift_bridgeObjectRelease();
  uint64_t v55 = v69;
  uint64_t v27 = v70;
  __dst[0] = 0;
  __dst[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(29);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_3_7();
  __dst[0] = v28;
  __dst[1] = v29;
  uint64_t v30 = swift_bridgeObjectRetain();
  v31._uint64_t countAndFlagsBits = MEMORY[0x2611B2390](v30, &type metadata for ConnectionInterfaceReport);
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v32 = __dst[0];
  uint64_t v33 = (void *)__dst[1];
  __dst[0] = 0;
  __dst[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  __dst[0] = 0xD000000000000019;
  __dst[1] = 0x800000025D7956A0;
  uint64_t v34 = swift_bridgeObjectRetain();
  v35._uint64_t countAndFlagsBits = MEMORY[0x2611B2390](v34, &type metadata for ConnectionTCPInfoMetrics);
  object = v35._object;
  String.append(_:)(v35);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v37 = __dst[0];
  uint64_t v38 = (void *)__dst[1];
  __dst[0] = 0;
  __dst[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  __dst[0] = 0x516B726F7774656ELL;
  __dst[1] = 0xEF207974696C6175;
  if (v60 == 4)
  {
    uint64_t v39 = OUTLINED_FUNCTION_1_11();
  }
  else
  {
    *(_DWORD *)uint64_t v68 = v60;
    uint64_t v39 = String.init<A>(describing:)();
    object = v40;
  }
  uint64_t v41 = object;
  String.append(_:)(*(Swift::String *)&v39);
  swift_bridgeObjectRelease();
  uint64_t v42 = __dst[0];
  uint64_t v43 = (void *)__dst[1];
  __dst[0] = 0;
  __dst[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(77);
  v44._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
  v44._object = (void *)0x800000025D7956C0;
  String.append(_:)(v44);
  v45._uint64_t countAndFlagsBits = v63;
  v45._object = v65;
  String.append(_:)(v45);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_13();
  v46._uint64_t countAndFlagsBits = v62;
  v46._object = v64;
  String.append(_:)(v46);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_13();
  v47._uint64_t countAndFlagsBits = v59;
  v47._object = v61;
  String.append(_:)(v47);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_13();
  String.append(_:)(v58);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_13();
  v48._uint64_t countAndFlagsBits = v57;
  v48._object = v21;
  String.append(_:)(v48);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_13();
  v49._uint64_t countAndFlagsBits = v55;
  v49._object = v27;
  String.append(_:)(v49);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_13();
  v50._uint64_t countAndFlagsBits = v32;
  v50._object = v33;
  String.append(_:)(v50);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_13();
  v51._uint64_t countAndFlagsBits = v37;
  v51._object = v38;
  String.append(_:)(v51);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_13();
  v52._uint64_t countAndFlagsBits = v42;
  v52._object = v43;
  String.append(_:)(v52);
  swift_bridgeObjectRelease();
  return __dst[0];
}

uint64_t outlined retain of ConnectionNetworkReport(uint64_t a1)
{
  return a1;
}

void OUTLINED_FUNCTION_0_13()
{
  uint64_t v1 = 8236;
  unint64_t v2 = 0xE200000000000000;
  String.append(_:)(*(Swift::String *)&v1);
}

uint64_t OUTLINED_FUNCTION_1_11()
{
  return 0x6E776F6E6B6E75;
}

void OUTLINED_FUNCTION_2_8()
{
  STACK[0x698] = 0;
  STACK[0x6A0] = v0;
}

double static ConnectionPolicy.maxGlobalTimeout.getter()
{
  return *(double *)&static ConnectionPolicy.maxGlobalTimeout;
}

uint64_t static ConnectionPolicy.maxGlobalTimeout.setter(double a1)
{
  uint64_t result = swift_beginAccess();
  static ConnectionPolicy.maxGlobalTimeout = *(void *)&a1;
  return result;
}

uint64_t (*static ConnectionPolicy.maxGlobalTimeout.modify())()
{
  return static ConnectionConfigurationError.errorDomain.modify;
}

uint64_t ConnectionPolicy.policyId.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ConnectionPolicy.policyId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *unint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*ConnectionPolicy.policyId.modify())(void)
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

uint64_t ConnectionPolicy.disableMPTCP.getter()
{
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t ConnectionPolicy.disableMPTCP.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 16) = result;
  return result;
}

uint64_t (*ConnectionPolicy.disableMPTCP.modify())(void)
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

uint64_t ConnectionPolicy.enableOptimisticDNS.getter()
{
  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t ConnectionPolicy.enableOptimisticDNS.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 17) = result;
  return result;
}

uint64_t (*ConnectionPolicy.enableOptimisticDNS.modify())(void)
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

uint64_t ConnectionPolicy.enableTLS13.getter()
{
  return *(unsigned __int8 *)(v0 + 18);
}

uint64_t ConnectionPolicy.enableTLS13.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 18) = result;
  return result;
}

uint64_t (*ConnectionPolicy.enableTLS13.modify())(void)
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

uint64_t ConnectionPolicy.enableTLS13ZeroRTT.getter()
{
  return *(unsigned __int8 *)(v0 + 19);
}

uint64_t ConnectionPolicy.enableTLS13ZeroRTT.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 19) = result;
  return result;
}

uint64_t (*ConnectionPolicy.enableTLS13ZeroRTT.modify())(void)
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

uint64_t ConnectionPolicy.enableTcpFastOpen.getter()
{
  return *(unsigned __int8 *)(v0 + 20);
}

uint64_t ConnectionPolicy.enableTcpFastOpen.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 20) = result;
  return result;
}

uint64_t (*ConnectionPolicy.enableTcpFastOpen.modify())(void)
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

uint64_t ConnectionPolicy.enabled.getter()
{
  return *(unsigned __int8 *)(v0 + 21);
}

uint64_t ConnectionPolicy.enabled.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 21) = result;
  return result;
}

uint64_t (*ConnectionPolicy.enabled.modify())(void)
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

uint64_t ConnectionPolicy.globalTimeout.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t ConnectionPolicy.globalTimeout.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 24) = result;
  *(unsigned char *)(v2 + 32) = a2 & 1;
  return result;
}

uint64_t (*ConnectionPolicy.globalTimeout.modify())(void)
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

double ConnectionPolicy.maxRoutesTimeout.getter()
{
  if (*(unsigned char *)(v0 + 32))
  {
    OUTLINED_FUNCTION_0_14();
    return *(double *)&static ConnectionPolicy.maxGlobalTimeout;
  }
  else
  {
    double v1 = *(double *)(v0 + 24);
    OUTLINED_FUNCTION_0_14();
    if (*(double *)&static ConnectionPolicy.maxGlobalTimeout < v1) {
      return *(double *)&static ConnectionPolicy.maxGlobalTimeout;
    }
  }
  return v1;
}

double ConnectionPolicy.delayBetweenScheduledRoutes.getter()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  specialized Sequence.filter(_:)(v0);
  static ConnectionPolicyRoute.maxTimeoutFromRoutes(_:)(v1);
  double v3 = v2;
  swift_bridgeObjectRelease();
  return fmin(v3, 5.0);
}

uint64_t ConnectionPolicy.mptcpFallbackPort.getter()
{
  return *(void *)(v0 + 40);
}

uint64_t ConnectionPolicy.mptcpFallbackPort.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 40) = result;
  *(unsigned char *)(v2 + 48) = a2 & 1;
  return result;
}

uint64_t (*ConnectionPolicy.mptcpFallbackPort.modify())(void)
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

uint64_t ConnectionPolicy.timeToLive.getter()
{
  return *(void *)(v0 + 56);
}

uint64_t ConnectionPolicy.timeToLive.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 56) = result;
  *(unsigned char *)(v2 + 64) = a2 & 1;
  return result;
}

uint64_t (*ConnectionPolicy.timeToLive.modify())(void)
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

uint64_t ConnectionPolicy.routes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ConnectionPolicy.routes.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 72) = a1;
  return result;
}

uint64_t (*ConnectionPolicy.routes.modify())(void)
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

unint64_t ConnectionPolicy.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!a1)
  {
    swift_bridgeObjectRelease();
    unint64_t result = swift_bridgeObjectRelease();
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    return result;
  }
  id v4 = a1;
  uint64_t v5 = outlined bridged method (pb) of @objc SAConnectionPolicy.policyId.getter(v4);
  uint64_t v7 = v6;
  swift_bridgeObjectRetain();
  id v8 = objc_msgSend(v4, sel_disableMPTCP);
  if (v8)
  {
    unsigned __int8 v9 = OUTLINED_FUNCTION_2_9(v8);
  }
  else
  {
    unsigned __int8 v9 = 0;
  }
  id v11 = objc_msgSend(v4, sel_enableOptimisticDNS);
  if (v11)
  {
    unsigned __int8 v33 = OUTLINED_FUNCTION_2_9(v11);
  }
  else
  {
    unsigned __int8 v33 = 0;
  }
  id v12 = objc_msgSend(v4, sel_enableTLS13);
  if (v12)
  {
    unsigned __int8 v32 = OUTLINED_FUNCTION_2_9(v12);
  }
  else
  {
    unsigned __int8 v32 = 0;
  }
  id v13 = objc_msgSend(v4, sel_enableTLS13ZeroRTT);
  if (v13)
  {
    unsigned __int8 v31 = OUTLINED_FUNCTION_2_9(v13);
  }
  else
  {
    unsigned __int8 v31 = 0;
  }
  id v14 = objc_msgSend(v4, sel_enableTcpFastOpen);
  if (v14)
  {
    unsigned __int8 v15 = OUTLINED_FUNCTION_2_9(v14);
  }
  else
  {
    unsigned __int8 v15 = 0;
  }
  unsigned __int8 v16 = objc_msgSend(v4, sel_enabled);
  if (objc_msgSend(v4, sel_globalTimeout))
  {
    OUTLINED_FUNCTION_4_6(1);

    uint64_t v29 = v48;
    char v30 = v49;
  }
  else
  {
    char v30 = 1;
    uint64_t v29 = 0;
  }
  id v17 = objc_msgSend(v4, sel_mptcpFallbackPort);
  if (v17)
  {
    uint64_t v2 = v17;
    uint64_t v48 = 0;
    LOBYTE(v49) = 1;
    static Int._conditionallyBridgeFromObjectiveC(_:result:)();
  }
  unsigned __int8 v34 = v16;
  if (objc_msgSend(v4, sel_timeToLive))
  {
    OUTLINED_FUNCTION_4_6(1);

    uint64_t v27 = v48;
    char v28 = v49;
  }
  else
  {
    char v28 = 1;
    uint64_t v27 = 0;
  }
  uint64_t v47 = MEMORY[0x263F8EE88];
  unint64_t result = outlined bridged method (pb) of @objc SAConnectionPolicy.routes.getter(v4);
  if (!result)
  {

    uint64_t v24 = MEMORY[0x263F8EE88];
    goto LABEL_42;
  }
  unint64_t v18 = result;
  unsigned __int8 v26 = v9;
  if (result >> 62)
  {
    unint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v19 = result;
    if (result) {
      goto LABEL_29;
    }
LABEL_41:
    swift_bridgeObjectRelease();

    uint64_t v24 = MEMORY[0x263F8EE88];
    unsigned __int8 v9 = v26;
    goto LABEL_42;
  }
  uint64_t v19 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v19) {
    goto LABEL_41;
  }
LABEL_29:
  if (v19 < 1)
  {
    __break(1u);
    return result;
  }
  uint64_t v25 = v5;
  for (uint64_t i = 0; i != v19; ++i)
  {
    if ((v18 & 0xC000000000000001) != 0) {
      id v21 = (id)MEMORY[0x2611B2780](i, v18);
    }
    else {
      id v21 = *(id *)(v18 + 8 * i + 32);
    }
    uint64_t v22 = v21;
    id v23 = v21;
    ConnectionPolicyRoute.init(from:)(v22, (uint64_t)&v35);
    if (v36 == 1)
    {
    }
    else
    {
      uint64_t v48 = v35;
      uint64_t v49 = v36;
      long long v50 = v37;
      long long v51 = v38;
      long long v52 = v39;
      uint64_t v53 = v40;
      char v54 = v41 & 1;
      long long v55 = v42;
      char v56 = v43;
      uint64_t v57 = v44;
      char v58 = v45 & 1;
      char v59 = v46;
      specialized Set._Variant.insert(_:)((char *)&v35, &v48);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();

  uint64_t v24 = v47;
  uint64_t v5 = v25;
  unsigned __int8 v9 = v26;
LABEL_42:
  *(void *)a2 = v5;
  *(void *)(a2 + 8) = v7;
  *(unsigned char *)(a2 + 16) = v9;
  *(unsigned char *)(a2 + 17) = v33;
  *(unsigned char *)(a2 + 18) = v32;
  *(unsigned char *)(a2 + 19) = v31;
  *(unsigned char *)(a2 + 20) = v15;
  *(unsigned char *)(a2 + 21) = v34;
  *(void *)(a2 + 24) = v29;
  *(unsigned char *)(a2 + 32) = v30;
  *(void *)(a2 + 40) = 0;
  *(unsigned char *)(a2 + 48) = 1;
  *(void *)(a2 + 56) = v27;
  *(unsigned char *)(a2 + 64) = v28;
  *(void *)(a2 + 72) = v24;

  return swift_bridgeObjectRelease();
}

void specialized Sequence.filter(_:)(uint64_t a1)
{
  uint64_t v1 = 0;
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v2 = a1 + 56;
  uint64_t v3 = v4;
  uint64_t v5 = 1 << *(unsigned char *)(v2 - 24);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & v3;
  uint64_t v37 = v2;
  int64_t v38 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v36 = MEMORY[0x263F8EE78];
  while (1)
  {
    if (v7)
    {
      unint64_t v8 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      int64_t v46 = v1;
      unint64_t v9 = v8 | (v1 << 6);
      goto LABEL_26;
    }
    int64_t v10 = v1 + 1;
    if (__OFADD__(v1, 1))
    {
      __break(1u);
      goto LABEL_45;
    }
    if (v10 >= v38) {
      goto LABEL_43;
    }
    unint64_t v11 = *(void *)(v37 + 8 * v10);
    int64_t v12 = v1 + 1;
    if (!v11)
    {
      OUTLINED_FUNCTION_5_6();
      if (v13 == v14) {
        goto LABEL_43;
      }
      OUTLINED_FUNCTION_3_8();
      if (!v11)
      {
        OUTLINED_FUNCTION_5_6();
        if (v13 == v14) {
          goto LABEL_43;
        }
        OUTLINED_FUNCTION_3_8();
        if (!v11)
        {
          OUTLINED_FUNCTION_5_6();
          if (v13 == v14) {
            goto LABEL_43;
          }
          OUTLINED_FUNCTION_3_8();
          if (!v11) {
            break;
          }
        }
      }
    }
LABEL_25:
    unint64_t v7 = (v11 - 1) & v11;
    int64_t v46 = v12;
    unint64_t v9 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_26:
    uint64_t v18 = *(void *)(a1 + 48) + 120 * v9;
    uint64_t v19 = *(void *)v18;
    uint64_t v20 = *(void *)(v18 + 40);
    uint64_t v21 = *(void *)(v18 + 48);
    uint64_t v23 = *(void *)(v18 + 56);
    uint64_t v22 = *(void *)(v18 + 64);
    long long v48 = *(_OWORD *)(v18 + 24);
    long long v47 = *(_OWORD *)(v18 + 8);
    char v45 = *(unsigned char *)(v18 + 72);
    uint64_t v44 = *(void *)(v18 + 80);
    char v43 = *(unsigned char *)(v18 + 96);
    uint64_t v42 = *(void *)(v18 + 104);
    char v40 = *(unsigned char *)(v18 + 113);
    char v41 = *(unsigned char *)(v18 + 112);
    if (!v21)
    {
      uint64_t v24 = *(void *)(v18 + 88);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (!v22) {
        goto LABEL_35;
      }
      goto LABEL_32;
    }
    uint64_t v24 = *(void *)(v18 + 88);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v25._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_1_12();
    if (String.hasSuffix(_:)(v25))
    {
      swift_bridgeObjectRelease();
      goto LABEL_38;
    }
    v26._uint64_t countAndFlagsBits = 3028785;
    v26._object = (void *)0xE300000000000000;
    Swift::Bool v27 = String.hasPrefix(_:)(v26);
    swift_bridgeObjectRelease();
    if (v27) {
      goto LABEL_38;
    }
    if (v22)
    {
LABEL_32:
      swift_bridgeObjectRetain();
      v28._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_1_12();
      if (!String.hasSuffix(_:)(v28))
      {
        v29._uint64_t countAndFlagsBits = 3028785;
        v29._object = (void *)0xE300000000000000;
        if (!String.hasPrefix(_:)(v29))
        {
          swift_bridgeObjectRelease();
          goto LABEL_35;
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_38:
      uint64_t v30 = v36;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v36 + 16) + 1, 1);
        uint64_t v30 = v36;
      }
      long long v31 = v48;
      long long v32 = v47;
      unint64_t v34 = *(void *)(v30 + 16);
      unint64_t v33 = *(void *)(v30 + 24);
      if (v34 >= v33 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v33 > 1), v34 + 1, 1);
        long long v32 = v47;
        long long v31 = v48;
        uint64_t v30 = v36;
      }
      *(void *)(v30 + 16) = v34 + 1;
      uint64_t v36 = v30;
      uint64_t v35 = v30 + 120 * v34;
      *(void *)(v35 + 32) = v19;
      *(_OWORD *)(v35 + 40) = v32;
      *(_OWORD *)(v35 + 56) = v31;
      *(void *)(v35 + 72) = v20;
      *(void *)(v35 + 80) = v21;
      *(void *)(v35 + 88) = v23;
      *(void *)(v35 + 96) = v22;
      *(unsigned char *)(v35 + 104) = v45;
      *(void *)(v35 + 112) = v44;
      *(void *)(v35 + 120) = v24;
      *(unsigned char *)(v35 + 128) = v43;
      *(void *)(v35 + 136) = v42;
      *(unsigned char *)(v35 + 144) = v41;
      *(unsigned char *)(v35 + 145) = v40;
      uint64_t v1 = v46;
    }
    else
    {
LABEL_35:
      uint64_t v1 = v46;
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  int64_t v16 = v15 + 4;
  if (v16 >= v38)
  {
LABEL_43:
    swift_release();
    return;
  }
  unint64_t v11 = *(void *)(v37 + 8 * v16);
  if (v11)
  {
    int64_t v12 = v16;
    goto LABEL_25;
  }
  while (!__OFADD__(v16, 1))
  {
    OUTLINED_FUNCTION_5_6();
    if (v13 == v14) {
      goto LABEL_43;
    }
    OUTLINED_FUNCTION_3_8();
    int64_t v16 = v17 + 1;
    if (v11) {
      goto LABEL_25;
    }
  }
LABEL_45:
  __break(1u);
}

uint64_t destroy for ConnectionPolicy()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ConnectionPolicy(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 20);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 56) = v4;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ConnectionPolicy(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(unsigned char *)(a1 + 18) = *(unsigned char *)(a2 + 18);
  *(unsigned char *)(a1 + 19) = *(unsigned char *)(a2 + 19);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  *(unsigned char *)(a1 + 21) = *(unsigned char *)(a2 + 21);
  uint64_t v4 = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 56) = v6;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ConnectionPolicy(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(unsigned char *)(a1 + 18) = *(unsigned char *)(a2 + 18);
  *(unsigned char *)(a1 + 19) = *(unsigned char *)(a2 + 19);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  *(unsigned char *)(a1 + 21) = *(unsigned char *)(a2 + 21);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ConnectionPolicy(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 80))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 72);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConnectionPolicy(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 72) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ConnectionPolicy()
{
  return &type metadata for ConnectionPolicy;
}

uint64_t outlined bridged method (pb) of @objc SAConnectionPolicy.policyId.getter(void *a1)
{
  id v1 = objc_msgSend(a1, sel_policyId);
  if (!v1) {
    return 0;
  }
  unint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t outlined bridged method (pb) of @objc SAConnectionPolicy.routes.getter(void *a1)
{
  id v1 = objc_msgSend(a1, sel_routes);
  if (!v1) {
    return 0;
  }
  unint64_t v2 = v1;
  type metadata accessor for SAConnectionPolicyRoute();
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

unint64_t type metadata accessor for SAConnectionPolicyRoute()
{
  unint64_t result = lazy cache variable for type metadata for SAConnectionPolicyRoute;
  if (!lazy cache variable for type metadata for SAConnectionPolicyRoute)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SAConnectionPolicyRoute);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_14()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_1_12()
{
  return 0x6F632E656C707061;
}

id OUTLINED_FUNCTION_2_9(void *a1)
{
  return [a1 (SEL)(v1 + 3864)];
}

void OUTLINED_FUNCTION_4_6(char a1@<W8>)
{
  *(void *)(v1 - 208) = 0;
  *(unsigned char *)(v1 - 200) = a1;
  JUMPOUT(0x2611B2400);
}

void Double.dispatchTimeInterval.getter(uint64_t *a1@<X8>, double a2@<D0>)
{
  double v3 = a2 * 1000.0;
  if (a2 * 1000.0 <= -9.22337204e18)
  {
    uint64_t v4 = 0x8000000000000000;
    goto LABEL_12;
  }
  if (v3 >= 9.22337204e18) {
    goto LABEL_6;
  }
  if ((~*(void *)&v3 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  if (v3 <= -9.22337204e18)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v4 = (uint64_t)v3;
  if ((uint64_t)v3 == 0x7FFFFFFFFFFFFFFFLL)
  {
LABEL_6:
    double v5 = round(a2);
    if (v5 <= -9.22337204e18)
    {
      uint64_t v6 = 0x8000000000000000;
      goto LABEL_15;
    }
    if (v5 >= 9.22337204e18)
    {
      uint64_t v6 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_15;
    }
    if ((~*(void *)&v5 & 0x7FF0000000000000) != 0)
    {
      if (v5 > -9.22337204e18)
      {
        uint64_t v6 = (uint64_t)v5;
LABEL_15:
        *a1 = v6;
        unint64_t v7 = (unsigned int *)MEMORY[0x263F8F018];
        goto LABEL_16;
      }
LABEL_22:
      __break(1u);
      return;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
LABEL_12:
  *a1 = v4;
  unint64_t v7 = (unsigned int *)MEMORY[0x263F8F000];
LABEL_16:
  uint64_t v8 = *v7;
  uint64_t v9 = type metadata accessor for DispatchTimeInterval();
  int64_t v10 = *(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 104);

  v10(a1, v8, v9);
}

uint64_t Double.seconds.getter(double a1)
{
  double v1 = round(a1);
  if (v1 <= -9.22337204e18) {
    return 0x8000000000000000;
  }
  if (v1 >= 9.22337204e18) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  if ((~*(void *)&v1 & 0x7FF0000000000000) != 0)
  {
    if (v1 > -9.22337204e18) {
      return (uint64_t)v1;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t Double.milliseconds.getter(double a1)
{
  double v1 = a1 * 1000.0;
  if (v1 <= -9.22337204e18) {
    return 0x8000000000000000;
  }
  if (v1 >= 9.22337204e18) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  if ((~*(void *)&v1 & 0x7FF0000000000000) != 0)
  {
    if (v1 > -9.22337204e18) {
      return (uint64_t)v1;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

BOOL static ConnectionConfiguration.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v176 = *(void *)(a1 + 32);
  uint64_t v179 = *(void *)(a1 + 40);
  uint64_t v174 = *(void *)(a1 + 48);
  uint64_t v178 = *(void *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 72);
  uint64_t v170 = *(void *)(a1 + 64);
  uint64_t v156 = *(void *)(a1 + 80);
  uint64_t v168 = *(void *)(a1 + 88);
  int v166 = *(unsigned __int8 *)(a1 + 96);
  int v164 = *(unsigned __int8 *)(a1 + 97);
  int v162 = *(unsigned __int8 *)(a1 + 98);
  int v160 = *(unsigned __int8 *)(a1 + 113);
  int v158 = *(unsigned __int8 *)(a1 + 114);
  double v4 = *(double *)(a1 + 120);
  char v154 = *(unsigned char *)(a1 + 128);
  int v152 = *(unsigned __int8 *)(a1 + 201);
  double v5 = *(double *)(a1 + 208);
  char v151 = *(unsigned char *)(a1 + 216);
  double v145 = *(double *)(a1 + 224);
  char v149 = *(unsigned char *)(a1 + 232);
  uint64_t v143 = *(void *)(a1 + 240);
  char v146 = *(unsigned char *)(a1 + 248);
  double v139 = *(double *)(a1 + 256);
  char v144 = *(unsigned char *)(a1 + 264);
  double v135 = *(double *)(a1 + 272);
  char v140 = *(unsigned char *)(a1 + 280);
  uint64_t v104 = *(uint64_t *)(a1 + 304);
  char v136 = *(unsigned char *)(a1 + 312);
  HIDWORD(v131) = *(unsigned __int8 *)(a1 + 313);
  unint64_t v132 = *(void *)(a1 + 328);
  unint64_t v129 = *(void *)(a1 + 320);
  unint64_t v130 = *(void *)(a1 + 336);
  double v6 = *(double *)(a2 + 120);
  double v7 = *(double *)(a2 + 208);
  double v8 = *(double *)(a2 + 224);
  double v9 = *(double *)(a2 + 256);
  double v10 = *(double *)(a2 + 272);
  int v138 = *(unsigned __int8 *)(a2 + 280);
  double v11 = *(double *)(a2 + 304);
  int v134 = *(unsigned __int8 *)(a2 + 312);
  LODWORD(v131) = *(unsigned __int8 *)(a2 + 313);
  unint64_t v125 = *(void *)(a1 + 352);
  unint64_t v126 = *(void *)(a1 + 360);
  unint64_t v127 = *(void *)(a1 + 368);
  unint64_t v128 = *(void *)(a1 + 376);
  uint64_t v123 = *(void *)(a1 + 384);
  uint64_t v137 = *(void *)(a1 + 392);
  uint64_t v12 = *(void *)(a1 + 408);
  uint64_t v13 = *(void *)(a1 + 424);
  uint64_t v172 = *(void *)(a1 + 416);
  unint64_t v95 = *(void *)(a1 + 400);
  unint64_t v96 = *(void *)(a1 + 432);
  unint64_t v97 = *(void *)(a1 + 440);
  unint64_t v98 = *(void *)(a1 + 456);
  unint64_t v99 = *(void *)(a1 + 472);
  unint64_t v100 = *(void *)(a1 + 480);
  unint64_t v101 = *(void *)(a1 + 496);
  unint64_t v102 = *(void *)(a1 + 504);
  HIDWORD(v103) = *(unsigned __int16 *)(a1 + 512);
  uint64_t v14 = *(void *)(a2 + 24);
  uint64_t v15 = *(void *)(a2 + 32);
  uint64_t v16 = *(void *)(a2 + 40);
  uint64_t v171 = *(void *)(a2 + 48);
  uint64_t v177 = *(void *)(a2 + 56);
  uint64_t v169 = *(void *)(a2 + 64);
  uint64_t v173 = *(void *)(a2 + 72);
  uint64_t v155 = *(void *)(a2 + 80);
  uint64_t v167 = *(void *)(a2 + 88);
  int v165 = *(unsigned __int8 *)(a2 + 96);
  int v163 = *(unsigned __int8 *)(a2 + 97);
  int v161 = *(unsigned __int8 *)(a2 + 98);
  int v159 = *(unsigned __int8 *)(a2 + 113);
  int v157 = *(unsigned __int8 *)(a2 + 114);
  int v153 = *(unsigned __int8 *)(a2 + 128);
  int v150 = *(unsigned __int8 *)(a2 + 216);
  int v148 = *(unsigned __int8 *)(a2 + 232);
  uint64_t v141 = *(void *)(a2 + 240);
  int v147 = *(unsigned __int8 *)(a2 + 248);
  int v142 = *(unsigned __int8 *)(a2 + 264);
  uint64_t v105 = *(void *)(a2 + 320);
  uint64_t v107 = *(void *)(a2 + 328);
  unint64_t v109 = *(void *)(a2 + 336);
  uint64_t v111 = *(void *)(a2 + 344);
  uint64_t v113 = *(void *)(a2 + 352);
  uint64_t v115 = *(void *)(a2 + 360);
  uint64_t v119 = *(void *)(a2 + 368);
  uint64_t v121 = *(void *)(a2 + 376);
  uint64_t v117 = *(void *)(a2 + 384);
  uint64_t v133 = *(void *)(a2 + 392);
  uint64_t v17 = *(void *)(a2 + 424);
  uint64_t v18 = *(void *)(a2 + 432);
  uint64_t v19 = *(void *)(a2 + 440);
  uint64_t v20 = *(void *)(a2 + 448);
  uint64_t v21 = *(void *)(a2 + 456);
  uint64_t v175 = *(void *)(a2 + 408);
  if (!v2)
  {
    HIDWORD(v92) = *(unsigned __int8 *)(a2 + 201);
    unint64_t v90 = *(void *)(a1 + 488);
    unint64_t v91 = *(void *)(a1 + 344);
    uint64_t v72 = *(void *)(a2 + 400);
    HIDWORD(v74) = *(unsigned __int16 *)(a2 + 512);
    uint64_t v76 = *(void *)(a2 + 464);
    uint64_t v78 = *(void *)(a2 + 504);
    uint64_t v93 = *(void *)(a2 + 416);
    uint64_t v80 = *(void *)(a2 + 488);
    uint64_t v82 = *(void *)(a2 + 472);
    uint64_t v84 = *(void *)(a2 + 496);
    uint64_t v86 = *(void *)(a2 + 480);
    unint64_t v88 = *(void *)(a1 + 448);
    unint64_t v89 = *(void *)(a1 + 464);
    if (v14) {
      return 0;
    }
    goto LABEL_12;
  }
  if (!v14) {
    return 0;
  }
  HIDWORD(v92) = *(unsigned __int8 *)(a2 + 201);
  unint64_t v90 = *(void *)(a1 + 488);
  unint64_t v91 = *(void *)(a1 + 344);
  uint64_t v72 = *(void *)(a2 + 400);
  HIDWORD(v74) = *(unsigned __int16 *)(a2 + 512);
  uint64_t v76 = *(void *)(a2 + 464);
  uint64_t v78 = *(void *)(a2 + 504);
  uint64_t v93 = *(void *)(a2 + 416);
  uint64_t v80 = *(void *)(a2 + 488);
  uint64_t v82 = *(void *)(a2 + 472);
  uint64_t v84 = *(void *)(a2 + 496);
  uint64_t v86 = *(void *)(a2 + 480);
  unint64_t v88 = *(void *)(a1 + 448);
  unint64_t v89 = *(void *)(a1 + 464);
  if (*(void *)(a1 + 16) == *(void *)(a2 + 16) && v2 == v14) {
    goto LABEL_12;
  }
  uint64_t v23 = *(void *)(a1 + 424);
  uint64_t v24 = *(void *)(a2 + 432);
  uint64_t v25 = *(void *)(a2 + 440);
  uint64_t v26 = *(void *)(a2 + 448);
  uint64_t v27 = *(void *)(a2 + 456);
  uint64_t v28 = *(void *)(a1 + 408);
  char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t v12 = v28;
  uint64_t v21 = v27;
  uint64_t v20 = v26;
  uint64_t v19 = v25;
  uint64_t v18 = v24;
  uint64_t v13 = v23;
  BOOL v30 = 0;
  if (v29)
  {
LABEL_12:
    if (v179)
    {
      if (!v16) {
        return 0;
      }
      if (v176 != v15 || v179 != v16)
      {
        uint64_t v32 = v13;
        uint64_t v33 = v18;
        uint64_t v34 = v21;
        uint64_t v35 = v12;
        char v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v12 = v35;
        uint64_t v21 = v34;
        uint64_t v18 = v33;
        uint64_t v13 = v32;
        BOOL v30 = 0;
        if ((v36 & 1) == 0) {
          return v30;
        }
      }
    }
    else if (v16)
    {
      return 0;
    }
    uint64_t v37 = v12;
    if (v12 == 1 || !v13)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v38 = v19;
      uint64_t v39 = v13;
      swift_bridgeObjectRetain();
      uint64_t v174 = v172;
      uint64_t v178 = v39;
      uint64_t v19 = v38;
    }
    if (v175 == 1 || !v17)
    {
      swift_bridgeObjectRetain();
      uint64_t v40 = swift_bridgeObjectRelease();
      uint64_t v47 = v177;
      uint64_t v46 = v171;
    }
    else
    {
      uint64_t v40 = swift_bridgeObjectRetain();
      uint64_t v46 = v93;
      uint64_t v47 = v17;
    }
    if (v178)
    {
      if (v47)
      {
        uint64_t v180 = v17;
        if (v174 == v46 && v178 == v47)
        {
          swift_bridgeObjectRelease();
          uint64_t v40 = swift_bridgeObjectRelease();
          uint64_t v50 = v3;
        }
        else
        {
          char v49 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          uint64_t v40 = swift_bridgeObjectRelease();
          BOOL v30 = 0;
          uint64_t v50 = v3;
          if ((v49 & 1) == 0) {
            return v30;
          }
        }
LABEL_42:
        if (v50)
        {
          if (!v173) {
            return 0;
          }
          if (v170 != v169 || v50 != v173)
          {
            uint64_t v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
            BOOL v30 = 0;
            if ((v40 & 1) == 0) {
              return v30;
            }
          }
        }
        else if (v173)
        {
          return 0;
        }
        uint64_t v53 = v168;
        if (v168)
        {
          uint64_t v41 = v167;
          if (!v167) {
            return 0;
          }
          uint64_t v40 = v156;
          uint64_t v46 = v155;
          if (v156 != v155 || v168 != v167)
          {
            uint64_t v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
            BOOL v30 = 0;
            if (v40 & 1) == 0 || ((v166 ^ v165)) {
              return v30;
            }
LABEL_62:
            if (((v164 ^ v163) & 1) != 0
              || ((v162 ^ v161) & 1) != 0
              || ((v160 ^ v159) & 1) != 0
              || ((v158 ^ v157) & 1) != 0)
            {
              return v30;
            }
            if (v154)
            {
              BOOL v30 = 0;
              if (!v153) {
                return v30;
              }
            }
            else
            {
              if (v153) {
                return 0;
              }
              BOOL v30 = 0;
              if (v4 != v6) {
                return v30;
              }
            }
            if ((v152 ^ HIDWORD(v92))) {
              return v30;
            }
            if (v151)
            {
              if (!v150) {
                return 0;
              }
            }
            else
            {
              char v55 = v150;
              if (v5 != v7) {
                char v55 = 1;
              }
              if (v55) {
                return 0;
              }
            }
            if (v149)
            {
              if (!v148) {
                return 0;
              }
            }
            else
            {
              char v56 = v148;
              if (v145 != v8) {
                char v56 = 1;
              }
              if (v56) {
                return 0;
              }
            }
            if (v146)
            {
              if (!v147) {
                return 0;
              }
            }
            else
            {
              char v57 = v147;
              if (v143 != v141) {
                char v57 = 1;
              }
              if (v57) {
                return 0;
              }
            }
            if (v144)
            {
              if (!v142) {
                return 0;
              }
            }
            else
            {
              char v58 = v142;
              if (v139 != v9) {
                char v58 = 1;
              }
              if (v58) {
                return 0;
              }
            }
            if (v140)
            {
              if (!v138) {
                return 0;
              }
            }
            else
            {
              char v59 = v138;
              if (v135 != v10) {
                char v59 = 1;
              }
              if (v59) {
                return 0;
              }
            }
            if (v136)
            {
              BOOL v30 = 0;
              if (!v134) {
                return v30;
              }
            }
            else
            {
              if (v134) {
                return 0;
              }
              BOOL v30 = 0;
              if (*(double *)&v104 != v11) {
                return v30;
              }
            }
            if ((HIDWORD(v131) ^ v131)) {
              return v30;
            }
            if (v137)
            {
              OUTLINED_FUNCTION_1_13(v40, v53, v46, v41, v42, v43, v44, v45, v64, v65, v66, v67, v68, v69, v70, v71, v72, v74, v76,
                v78,
                v80,
                v82,
                v84,
                v86,
                v88,
                v89,
                v90,
                v91,
                v92,
                v93,
                v95,
                v96,
                v97,
                v98,
                v99,
                v100,
                v101,
                v102,
                v103,
                v104,
                v105,
                v107,
                v109,
                v111,
                v113,
                v115,
                v117,
                v119,
                v121,
                v123,
                v125,
                v126,
                v127,
                v128,
                v129,
                v130,
                v131,
                v132);
              uint64_t v198 = v123;
              uint64_t v199 = v137;
              if (v133)
              {
                uint64_t v181 = v105;
                uint64_t v182 = v107;
                LOBYTE(v183) = v109 & 1;
                uint64x2_t v60 = (uint64x2_t)vdupq_n_s64(v109);
                *(_DWORD *)((char *)&v183 + 1) = OUTLINED_FUNCTION_4_7(v60, (int32x4_t)vshlq_u64(v60, (uint64x2_t)xmmword_25D791AA0), (uint64x2_t)xmmword_25D791AB0).u32[0];
                BYTE5(v183) = v61 & 1;
                uint64_t v184 = v111;
                LOBYTE(v185) = v113 & 1;
                uint64_t v186 = v115;
                LOBYTE(v187) = v119 & 1;
                uint64_t v188 = v121;
                LOBYTE(v189) = v117 & 1;
                uint64_t v190 = v133;
                swift_bridgeObjectRetain_n();
                swift_bridgeObjectRetain_n();
                static ConnectionPolicy.== infix(_:_:)((uint64_t)&v197, (uint64_t)&v181);
                char v63 = v62;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v40 = outlined consume of ConnectionPolicy?(v129, v132, v130, v91, v125, v126, v127, v128, v123, v137);
                if (v63) {
                  goto LABEL_113;
                }
                return 0;
              }
              swift_bridgeObjectRetain();
              uint64_t v40 = swift_bridgeObjectRetain();
            }
            else if (!v133)
            {
LABEL_113:
              if (v37 == 1)
              {
                if (v175 == 1) {
                  return 1;
                }
              }
              else
              {
                OUTLINED_FUNCTION_0_15(v40, v53, v46, v41, v42, v43, v44, v45, v64, v65, v66, v67, v68, v69, v70, v71, v72, v74, v76,
                  v78,
                  v80,
                  v82,
                  v84,
                  v86,
                  v88,
                  v89,
                  v90,
                  v91,
                  v92,
                  v93,
                  v95,
                  v96,
                  v97,
                  v98,
                  v99,
                  v100,
                  v101,
                  v102,
                  v103,
                  SWORD2(v103));
                if (v175 != 1)
                {
                  uint64_t v181 = v72;
                  uint64_t v182 = v175;
                  uint64_t v183 = v93;
                  uint64_t v184 = v180;
                  uint64_t v185 = v18;
                  uint64_t v186 = v19;
                  uint64_t v187 = v20;
                  uint64_t v188 = v21;
                  uint64_t v189 = v76;
                  LOBYTE(v190) = v82 & 1;
                  uint64_t v191 = v86;
                  uint64_t v192 = v80;
                  char v193 = v84;
                  uint64_t v194 = v78;
                  char v195 = BYTE4(v74) & 1;
                  char v196 = BYTE5(v74);
                  BOOL v30 = static ConnectionPolicyRoute.== infix(_:_:)((uint64_t)&v197, (uint64_t)&v181);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  return v30;
                }
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                uint64_t v40 = swift_bridgeObjectRetain();
              }
              OUTLINED_FUNCTION_0_15(v40, v53, v46, v41, v42, v43, v44, v45, v64, v65, v66, v67, v68, v69, v70, v71, v72, v74, v76,
                v78,
                v80,
                v82,
                v84,
                v86,
                v88,
                v89,
                v90,
                v91,
                v92,
                v93,
                v95,
                v96,
                v97,
                v98,
                v99,
                v100,
                v101,
                v102,
                v103,
                SWORD2(v103));
              uint64_t v205 = v73;
              uint64_t v206 = v175;
              uint64_t v207 = v94;
              uint64_t v208 = v180;
              uint64_t v209 = v18;
              uint64_t v210 = v19;
              uint64_t v211 = v20;
              uint64_t v212 = v21;
              uint64_t v213 = v77;
              uint64_t v214 = v83;
              uint64_t v215 = v87;
              uint64_t v216 = v81;
              uint64_t v217 = v85;
              uint64_t v218 = v79;
              __int16 v219 = v75;
              outlined copy of ConnectionPolicyRoute?(v73, v175);
              outlined release of (ConnectionPolicyRoute?, ConnectionPolicyRoute?)(&v197);
              return 0;
            }
            OUTLINED_FUNCTION_1_13(v40, v53, v46, v41, v42, v43, v44, v45, v64, v65, v66, v67, v68, v69, v70, v71, v72, v74, v76,
              v78,
              v80,
              v82,
              v84,
              v86,
              v88,
              v89,
              v90,
              v91,
              v92,
              v93,
              v95,
              v96,
              v97,
              v98,
              v99,
              v100,
              v101,
              v102,
              v103,
              v104,
              v105,
              v107,
              v109,
              v111,
              v113,
              v115,
              v117,
              v119,
              v121,
              v123,
              v125,
              v126,
              v127,
              v128,
              v129,
              v130,
              v131,
              v132);
            uint64_t v198 = v124;
            uint64_t v199 = v137;
            uint64_t v200 = v106;
            uint64_t v201 = v108;
            uint64_t v202 = v110;
            uint64_t v203 = v112;
            uint64_t v204 = v114;
            uint64_t v205 = v116;
            uint64_t v206 = v120;
            uint64_t v207 = v122;
            uint64_t v208 = v118;
            uint64_t v209 = v133;
            outlined copy of ConnectionPolicy?(v106, v108, v110, v112, v114, v116, v120, v122, v118, v133);
            outlined release of (ConnectionPolicy?, ConnectionPolicy?)(&v197);
            return 0;
          }
        }
        else if (v167)
        {
          return 0;
        }
        BOOL v30 = 0;
        if (v166 != v165) {
          return v30;
        }
        goto LABEL_62;
      }
    }
    else
    {
      uint64_t v50 = v3;
      uint64_t v180 = v17;
      if (!v47) {
        goto LABEL_42;
      }
    }
    swift_bridgeObjectRelease();
    return 0;
  }
  return v30;
}

void specialized RawRepresentable<>.hash(into:)(int a1, Swift::UInt a2)
{
}

void specialized RawRepresentable<>.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

{
  Hasher._combine(_:)(a2);
}

uint64_t specialized RawRepresentable<>.hash(into:)()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

void specialized RawRepresentable<>.hash(into:)(uint64_t a1, char a2)
{
}

void specialized RawRepresentable<>.hash(into:)()
{
}

void ConnectionConfiguration.hash(into:)(uint64_t a1)
{
  Swift::UInt v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(v1 + 40);
  uint64_t v6 = *(void *)(v1 + 56);
  uint64_t v32 = *(void *)(v1 + 72);
  uint64_t v38 = *(void *)(v1 + 88);
  Swift::UInt8 v33 = *(unsigned char *)(v1 + 96);
  Swift::UInt8 v39 = *(unsigned char *)(v1 + 97);
  Swift::UInt8 v40 = *(unsigned char *)(v1 + 98);
  Swift::UInt8 v41 = *(unsigned char *)(v1 + 113);
  Swift::UInt8 v42 = *(unsigned char *)(v1 + 114);
  Swift::UInt64 v24 = *(void *)(v1 + 120);
  int v43 = *(unsigned __int8 *)(v1 + 128);
  Swift::UInt8 v44 = *(unsigned char *)(v1 + 201);
  Swift::UInt64 v25 = *(void *)(v1 + 208);
  int v45 = *(unsigned __int8 *)(v1 + 216);
  Swift::UInt64 v26 = *(void *)(v1 + 224);
  int v46 = *(unsigned __int8 *)(v1 + 232);
  Swift::UInt v27 = *(void *)(v1 + 240);
  int v47 = *(unsigned __int8 *)(v1 + 248);
  int v34 = *(unsigned __int8 *)(v1 + 280);
  int v35 = *(unsigned __int8 *)(v1 + 312);
  Swift::UInt8 v7 = *(unsigned char *)(v1 + 313);
  Swift::UInt64 v28 = *(void *)(v1 + 256);
  int v48 = *(unsigned __int8 *)(v1 + 264);
  Swift::UInt64 v29 = *(void *)(v1 + 272);
  Swift::UInt64 v30 = *(void *)(v1 + 304);
  unint64_t v31 = *(void *)(v1 + 336);
  uint64_t v37 = *(void *)(v1 + 392);
  uint64_t v8 = *(void *)(v1 + 408);
  uint64_t v9 = *(void *)(v1 + 424);
  Hasher._combine(_:)(*(void *)v1);
  Hasher._combine(_:)(v3);
  if (v4)
  {
    OUTLINED_FUNCTION_3_9();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_2_10();
  }
  uint64_t v10 = v9;
  Swift::UInt8 v11 = v7;
  int v12 = v34;
  if (v5)
  {
    OUTLINED_FUNCTION_3_9();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_2_10();
  }
  int v13 = v35;
  if (v8 != 1 && v10)
  {
    uint64_t v36 = v8;
    int v14 = v13;
    int v15 = v34;
    Swift::UInt8 v16 = v7;
    swift_bridgeObjectRetain();
LABEL_12:
    OUTLINED_FUNCTION_3_9();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease_n();
    Swift::UInt8 v11 = v16;
    int v12 = v15;
    int v13 = v14;
    uint64_t v8 = v36;
    goto LABEL_14;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v6)
  {
    uint64_t v36 = v8;
    int v14 = v13;
    int v15 = v34;
    Swift::UInt8 v16 = v7;
    goto LABEL_12;
  }
  OUTLINED_FUNCTION_2_10();
LABEL_14:
  if (v32)
  {
    OUTLINED_FUNCTION_3_9();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_2_10();
  }
  if (v38)
  {
    OUTLINED_FUNCTION_3_9();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_2_10();
  }
  Hasher._combine(_:)(v33);
  Hasher._combine(_:)(v39);
  Hasher._combine(_:)(v40);
  Hasher._combine(_:)(v41);
  Hasher._combine(_:)(v42);
  if (v43)
  {
    OUTLINED_FUNCTION_2_10();
  }
  else
  {
    OUTLINED_FUNCTION_3_9();
    if ((v24 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v17 = v24;
    }
    else {
      Swift::UInt64 v17 = 0;
    }
    Hasher._combine(_:)(v17);
  }
  Hasher._combine(_:)(v44);
  if (v45)
  {
    OUTLINED_FUNCTION_2_10();
  }
  else
  {
    OUTLINED_FUNCTION_3_9();
    if ((v25 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v18 = v25;
    }
    else {
      Swift::UInt64 v18 = 0;
    }
    Hasher._combine(_:)(v18);
  }
  if (v46)
  {
    OUTLINED_FUNCTION_2_10();
  }
  else
  {
    OUTLINED_FUNCTION_3_9();
    if ((v26 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v19 = v26;
    }
    else {
      Swift::UInt64 v19 = 0;
    }
    Hasher._combine(_:)(v19);
  }
  if (v47)
  {
    OUTLINED_FUNCTION_2_10();
  }
  else
  {
    OUTLINED_FUNCTION_3_9();
    Hasher._combine(_:)(v27);
  }
  if (v48)
  {
    OUTLINED_FUNCTION_2_10();
    if (!v12) {
      goto LABEL_43;
    }
  }
  else
  {
    OUTLINED_FUNCTION_3_9();
    if ((v28 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v22 = v28;
    }
    else {
      Swift::UInt64 v22 = 0;
    }
    Hasher._combine(_:)(v22);
    if (!v12)
    {
LABEL_43:
      OUTLINED_FUNCTION_3_9();
      if ((v29 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v20 = v29;
      }
      else {
        Swift::UInt64 v20 = 0;
      }
      Hasher._combine(_:)(v20);
      if (!v13) {
        goto LABEL_47;
      }
LABEL_56:
      OUTLINED_FUNCTION_2_10();
      goto LABEL_57;
    }
  }
  OUTLINED_FUNCTION_2_10();
  if (v13) {
    goto LABEL_56;
  }
LABEL_47:
  OUTLINED_FUNCTION_3_9();
  if ((v30 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v21 = v30;
  }
  else {
    Swift::UInt64 v21 = 0;
  }
  Hasher._combine(_:)(v21);
LABEL_57:
  Hasher._combine(_:)(v11);
  if (v37)
  {
    uint64x2_t v23 = (uint64x2_t)vdupq_n_s64(v31);
    OUTLINED_FUNCTION_4_7(v23, (int32x4_t)vshlq_u64(v23, (uint64x2_t)xmmword_25D791AA0), (uint64x2_t)xmmword_25D791AB0);
    OUTLINED_FUNCTION_3_9();
    ConnectionPolicy.hash(into:)(a1);
  }
  else
  {
    OUTLINED_FUNCTION_2_10();
  }
  if (v8 == 1)
  {
    OUTLINED_FUNCTION_2_10();
  }
  else
  {
    OUTLINED_FUNCTION_3_9();
    ConnectionPolicyRoute.hash(into:)();
  }
}

Swift::Int ConnectionConfiguration.hashValue.getter()
{
  Hasher.init(_seed:)();
  ConnectionConfiguration.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ConnectionConfiguration()
{
  Hasher.init(_seed:)();
  ConnectionConfiguration.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t *outlined release of (ConnectionPolicy?, ConnectionPolicy?)(uint64_t *a1)
{
  uint64_t v12 = a1[10];
  uint64_t v2 = a1[11];
  uint64_t v3 = a1[12];
  uint64_t v4 = a1[13];
  uint64_t v5 = a1[14];
  uint64_t v6 = a1[15];
  uint64_t v7 = a1[16];
  uint64_t v8 = a1[17];
  uint64_t v9 = a1[18];
  uint64_t v10 = a1[19];
  outlined consume of ConnectionPolicy?(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9]);
  outlined consume of ConnectionPolicy?(v12, v2, v3, v4, v5, v6, v7, v8, v9, v10);
  return a1;
}

uint64_t *outlined release of (ConnectionPolicyRoute?, ConnectionPolicyRoute?)(uint64_t *a1)
{
  uint64_t v4 = a1[15];
  uint64_t v3 = a1[16];
  outlined consume of ConnectionPolicyRoute?(*a1, a1[1]);
  outlined consume of ConnectionPolicyRoute?(v4, v3);
  return a1;
}

unint64_t lazy protocol witness table accessor for type ConnectionConfiguration and conformance ConnectionConfiguration()
{
  unint64_t result = lazy protocol witness table cache variable for type ConnectionConfiguration and conformance ConnectionConfiguration;
  if (!lazy protocol witness table cache variable for type ConnectionConfiguration and conformance ConnectionConfiguration)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConnectionConfiguration and conformance ConnectionConfiguration);
  }
  return result;
}

void OUTLINED_FUNCTION_0_15(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,unint64_t a25,unint64_t a26,unint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,unint64_t a31,unint64_t a32,unint64_t a33,unint64_t a34,unint64_t a35,unint64_t a36,unint64_t a37,unint64_t a38,int a39,__int16 a40)
{
  STACK[0x338] = a31;
  STACK[0x340] = v41;
  STACK[0x348] = STACK[0x280];
  STACK[0x350] = v40;
  STACK[0x358] = a32;
  STACK[0x360] = a33;
  STACK[0x368] = a25;
  STACK[0x370] = a34;
  STACK[0x378] = a26;
  STACK[0x380] = a35;
  STACK[0x388] = a36;
  STACK[0x390] = a27;
  STACK[0x398] = a37;
  STACK[0x3A0] = a38;
  LOWORD(STACK[0x3A8]) = a40;
}

void OUTLINED_FUNCTION_1_13(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,unint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,unint64_t a51,unint64_t a52,unint64_t a53,unint64_t a54,unint64_t a55,unint64_t a56,uint64_t a57,unint64_t a58)
{
  STACK[0x338] = a55;
  STACK[0x340] = a58;
  STACK[0x348] = a56;
  STACK[0x350] = a28;
  STACK[0x358] = a51;
  STACK[0x360] = a52;
  STACK[0x368] = a53;
  STACK[0x370] = a54;
}

void OUTLINED_FUNCTION_2_10()
{
  Hasher._combine(_:)(0);
}

void OUTLINED_FUNCTION_3_9()
{
  Hasher._combine(_:)(1u);
}

int8x8_t OUTLINED_FUNCTION_4_7(uint64x2_t a1, int32x4_t a2, uint64x2_t a3)
{
  int16x8_t v3 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(a1, a3), a2);
  *(int8x8_t *)v3.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v3), (int8x8_t)0x1000100010001);
  return vmovn_s16(v3);
}

uint64_t ConnectionPingInfoReport.init(pingInfo:)(uint64_t result)
{
  uint64_t v1 = result;
  if (*(double *)&result != 0.0)
  {
    uint64_t v2 = Double.milliseconds.getter(*(double *)(result + 24));
    unint64_t v3 = *(void *)(v1 + 16);
    if ((v3 & 0x8000000000000000) != 0
      || HIDWORD(v3)
      || (v4 = v2, unint64_t v5 = PingInfo.numberOfUnacknowledgedPings()(), swift_release(), (v5 & 0x8000000000000000) != 0)
      || HIDWORD(v5))
    {
      OUTLINED_FUNCTION_1_0();
      *(double *)&unint64_t result = COERCE_DOUBLE(_assertionFailure(_:_:file:line:flags:)());
      __break(1u);
    }
    else
    {
      *(double *)&unint64_t result = (double)v4;
    }
  }
  return result;
}

id one-time initialization function for sharedNetworkAnalytics()
{
  default argument 0 of NetworkAnalytics.init(queue:siriAnalyticsMessageStream:)();
  uint64_t v1 = v0;
  id v2 = objc_msgSend(self, sel_sharedStream);
  id v3 = objc_allocWithZone((Class)type metadata accessor for NetworkAnalytics(0));
  id result = NetworkAnalytics.init(queue:siriAnalyticsMessageStream:)(v1, (uint64_t)v2);
  static NetworkAnalytics.sharedNetworkAnalytics = result;
  return result;
}

void default argument 0 of NetworkAnalytics.init(queue:siriAnalyticsMessageStream:)()
{
  OUTLINED_FUNCTION_22();
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  OUTLINED_FUNCTION_0_0();
  uint64_t v2 = v1;
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_0_1();
  uint64_t v6 = v5 - v4;
  type metadata accessor for OS_dispatch_queue.Attributes();
  OUTLINED_FUNCTION_42_0();
  MEMORY[0x270FA5388](v7);
  uint64_t v8 = OUTLINED_FUNCTION_1_1();
  uint64_t v9 = OUTLINED_FUNCTION_19_1(v8);
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_2();
  type metadata accessor for CTServiceDescriptor(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  static DispatchQoS.utility.getter();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, MEMORY[0x263F8F0F8]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], &demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v6, *MEMORY[0x263F8F130], v0);
  OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  OUTLINED_FUNCTION_29();
}

id static NetworkAnalytics.sharedNetworkAnalytics.getter()
{
  if (one-time initialization token for sharedNetworkAnalytics != -1) {
    swift_once();
  }
  uint64_t v0 = static NetworkAnalytics.sharedNetworkAnalytics;

  return v0;
}

id NetworkAnalytics.init(queue:siriAnalyticsMessageStream:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t)&v2[OBJC_IVAR___SNNetworkAnalyticsInternal_netId];
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_25_2(v5);
  OUTLINED_FUNCTION_25_2((uint64_t)&v2[OBJC_IVAR___SNNetworkAnalyticsInternal_networkConnectionId]);
  uint64_t v6 = &v2[OBJC_IVAR___SNNetworkAnalyticsInternal_connectionProvider];
  *(_DWORD *)uint64_t v6 = 0;
  v6[4] = 1;
  OUTLINED_FUNCTION_25_2((uint64_t)&v2[OBJC_IVAR___SNNetworkAnalyticsInternal_orchestratorRequestId]);
  OUTLINED_FUNCTION_25_2((uint64_t)&v2[OBJC_IVAR___SNNetworkAnalyticsInternal_netIdForRequestLink]);
  uint64_t v7 = &v2[OBJC_IVAR___SNNetworkAnalyticsInternal_httpHeaderEvent];
  OUTLINED_FUNCTION_25_2((uint64_t)&v2[OBJC_IVAR___SNNetworkAnalyticsInternal_httpHeaderEvent]);
  uint64_t v8 = type metadata accessor for NetworkAnalyticsEventMessage(0);
  *(void *)&v7[*(int *)(v8 + 20)] = 0;
  uint64_t v9 = &v7[*(int *)(v8 + 24)];
  *(void *)uint64_t v9 = 0;
  v9[8] = 1;
  OUTLINED_FUNCTION_1_14(OBJC_IVAR___SNNetworkAnalyticsInternal_preparationSnapshotEvent);
  OUTLINED_FUNCTION_1_14(OBJC_IVAR___SNNetworkAnalyticsInternal_debugPreparationSnapshotEvent);
  OUTLINED_FUNCTION_1_14(OBJC_IVAR___SNNetworkAnalyticsInternal_readySnapshotEvent);
  OUTLINED_FUNCTION_1_14(OBJC_IVAR___SNNetworkAnalyticsInternal_debugReadySnapshotEvent);
  OUTLINED_FUNCTION_1_14(OBJC_IVAR___SNNetworkAnalyticsInternal_sessionConnectionSnapthotEvent);
  OUTLINED_FUNCTION_1_14(OBJC_IVAR___SNNetworkAnalyticsInternal_debugSessionConnectionSnapthotEvent);
  OUTLINED_FUNCTION_1_14(OBJC_IVAR___SNNetworkAnalyticsInternal_sessionConnectionFailedEvent);
  OUTLINED_FUNCTION_1_14(OBJC_IVAR___SNNetworkAnalyticsInternal_peerConnectionFailedEvent);
  *(void *)&v2[OBJC_IVAR___SNNetworkAnalyticsInternal_queue] = a1;
  v2[OBJC_IVAR___SNNetworkAnalyticsInternal_isConnectionActive] = 0;
  v2[OBJC_IVAR___SNNetworkAnalyticsInternal_netIdAvailable] = 0;
  *(_DWORD *)&v2[OBJC_IVAR___SNNetworkAnalyticsInternal_sequenceNumber] = 0;
  *(void *)&v2[OBJC_IVAR___SNNetworkAnalyticsInternal_siriAnalyticsMessageStream] = a2;
  v11.receiver = v2;
  v11.super_class = (Class)type metadata accessor for NetworkAnalytics(0);
  return objc_msgSendSuper2(&v11, sel_init);
}

Swift::Void __swiftcall NetworkAnalytics.reset()()
{
  NetworkAnalytics.resetNetId()();

  NetworkAnalytics.resetSequenceNumber()();
}

Swift::Void __swiftcall NetworkAnalytics.resetNetId()()
{
  OUTLINED_FUNCTION_22();
  type metadata accessor for DispatchWorkItemFlags();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_2();
  uint64_t v4 = *(void **)(v0 + OBJC_IVAR___SNNetworkAnalyticsInternal_queue);
  OUTLINED_FUNCTION_23_2();
  OUTLINED_FUNCTION_30_3();
  v11[4] = partial apply for closure #1 in NetworkAnalytics.resetNetId();
  uint64_t v12 = v1;
  v11[0] = MEMORY[0x263EF8330];
  OUTLINED_FUNCTION_126(COERCE_DOUBLE(1107296256));
  v11[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  void v11[3] = &block_descriptor_6;
  uint64_t v5 = _Block_copy(v11);
  id v6 = v4;
  OUTLINED_FUNCTION_35_1();
  static DispatchQoS.unspecified.getter();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  OUTLINED_FUNCTION_3_10();
  OUTLINED_FUNCTION_9_4();
  _Block_release(v5);

  uint64_t v7 = OUTLINED_FUNCTION_4_0();
  v8(v7);
  uint64_t v9 = OUTLINED_FUNCTION_10();
  v10(v9);
  OUTLINED_FUNCTION_29_2();
  swift_release();
  OUTLINED_FUNCTION_29();
}

void closure #1 in NetworkAnalytics.resetNetId()(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  id v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v31 - v7;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  uint64_t v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v10);
  int v15 = (char *)&v31 - v14;
  MEMORY[0x270FA5388](v13);
  Swift::UInt64 v17 = (char *)&v31 - v16;
  swift_beginAccess();
  uint64_t v18 = MEMORY[0x2611B37F0](a1 + 16);
  if (v18)
  {
    Swift::UInt64 v19 = (void *)v18;
    uint64_t v33 = v3;
    UUID.init()();
    __swift_storeEnumTagSinglePayload((uint64_t)v17, 0, 1, v2);
    uint64_t v20 = (uint64_t)v19 + OBJC_IVAR___SNNetworkAnalyticsInternal_netId;
    swift_beginAccess();
    outlined assign with take of UUID?((uint64_t)v17, v20);
    swift_endAccess();
    if (one-time initialization token for siriNetwork != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Logger.siriNetwork);
    id v22 = v19;
    uint64x2_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      Swift::UInt64 v25 = (uint8_t *)swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      v35[0] = v32;
      *(_DWORD *)Swift::UInt64 v25 = 136315138;
      outlined init with copy of UUID?(v20, (uint64_t)v15);
      outlined init with copy of UUID?((uint64_t)v15, (uint64_t)v12);
      if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v2) == 1)
      {
        unint64_t v26 = 0xE400000000000000;
        uint64_t v27 = 1819047278;
      }
      else
      {
        uint64_t v28 = v33;
        (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v8, v12, v2);
        (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v6, v8, v2);
        uint64_t v27 = String.init<A>(describing:)();
        unint64_t v26 = v29;
        (*(void (**)(char *, uint64_t))(v28 + 8))(v8, v2);
      }
      outlined destroy of UUID?((uint64_t)v15, &demangling cache variable for type metadata for UUID?);
      uint64_t v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v26, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_25D6CC000, v23, v24, "Network Analytics: NetId reset: %s", v25, 0xCu);
      uint64_t v30 = v32;
      swift_arrayDestroy();
      MEMORY[0x2611B3750](v30, -1, -1);
      MEMORY[0x2611B3750](v25, -1, -1);
    }
    else
    {
    }
  }
}

Swift::Void __swiftcall NetworkAnalytics.setNetId(_:)(Swift::String_optional a1)
{
}

uint64_t NetworkAnalytics.getNetId()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v5 = OUTLINED_FUNCTION_19_1(v4);
  MEMORY[0x270FA5388](v5);
  uint64_t v6 = OUTLINED_FUNCTION_39_0();
  OUTLINED_FUNCTION_50_0(v6);
  uint64_t v7 = *(void **)&v1[OBJC_IVAR___SNNetworkAnalyticsInternal_queue];
  uint64_t v8 = OUTLINED_FUNCTION_15_2();
  *(void *)(v8 + 16) = v2;
  *(void *)(v8 + 24) = v1;
  uint64_t v9 = OUTLINED_FUNCTION_15_2();
  *(void *)(v9 + 16) = partial apply for closure #1 in NetworkAnalytics.getNetId();
  *(void *)(v9 + 24) = v8;
  aBlock[4] = partial apply for thunk for @callee_guaranteed () -> ();
  aBlock[5] = v9;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_16_0;
  uint64_t v10 = _Block_copy(aBlock);
  uint64_t v11 = v7;
  uint64_t v12 = v1;
  swift_retain();
  swift_release();
  dispatch_sync(v11, v10);

  _Block_release(v10);
  char v13 = OUTLINED_FUNCTION_40_0();
  uint64_t result = swift_release();
  if (v13)
  {
    __break(1u);
  }
  else
  {
    outlined init with take of UUID?(v2, a1);
    return swift_release();
  }
  return result;
}

uint64_t thunk for @callee_guaranteed () -> ()(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

void NetworkAnalytics.setNetworkConnectionId(_:)()
{
  OUTLINED_FUNCTION_22();
  uint64_t v2 = v0;
  uint64_t v4 = v3;
  type metadata accessor for DispatchWorkItemFlags();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_2();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v8 = OUTLINED_FUNCTION_19_3(v7);
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_48_0();
  uint64_t v9 = *(void **)&v2[OBJC_IVAR___SNNetworkAnalyticsInternal_queue];
  uint64_t v10 = OUTLINED_FUNCTION_23_2();
  swift_unknownObjectWeakInit();
  outlined init with copy of UUID?(v4, v1);
  OUTLINED_FUNCTION_58_0();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v10;
  outlined init with take of UUID?(v1, (uint64_t)&v2[v11]);
  v17[4] = partial apply for closure #1 in NetworkAnalytics.setNetworkConnectionId(_:);
  v17[5] = v11;
  v17[0] = MEMORY[0x263EF8330];
  OUTLINED_FUNCTION_126(COERCE_DOUBLE(1107296256));
  v17[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v17[3] = &block_descriptor_23;
  uint64_t v12 = _Block_copy(v17);
  id v13 = v9;
  OUTLINED_FUNCTION_35_1();
  static DispatchQoS.unspecified.getter();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  OUTLINED_FUNCTION_3_10();
  OUTLINED_FUNCTION_9_4();
  _Block_release(v12);

  uint64_t v14 = OUTLINED_FUNCTION_4_0();
  v15(v14);
  OUTLINED_FUNCTION_12_2();
  v16();
  OUTLINED_FUNCTION_29_2();
  swift_release();
  OUTLINED_FUNCTION_29();
}

void closure #1 in NetworkAnalytics.setNetworkConnectionId(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v33 - v9;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  uint64_t v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v12);
  Swift::UInt64 v17 = (char *)&v33 - v16;
  MEMORY[0x270FA5388](v15);
  Swift::UInt64 v19 = (char *)&v33 - v18;
  swift_beginAccess();
  uint64_t v20 = MEMORY[0x2611B37F0](a1 + 16);
  if (v20)
  {
    uint64_t v21 = (void *)v20;
    uint64_t v35 = v5;
    outlined init with copy of UUID?(a2, (uint64_t)v19);
    uint64_t v22 = (uint64_t)v21 + OBJC_IVAR___SNNetworkAnalyticsInternal_networkConnectionId;
    swift_beginAccess();
    outlined assign with take of UUID?((uint64_t)v19, v22);
    swift_endAccess();
    if (one-time initialization token for siriNetwork != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Logger.siriNetwork);
    id v24 = v21;
    Swift::UInt64 v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      v37[0] = v34;
      *(_DWORD *)uint64_t v27 = 136315138;
      outlined init with copy of UUID?(v22, (uint64_t)v17);
      outlined init with copy of UUID?((uint64_t)v17, (uint64_t)v14);
      if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, v4) == 1)
      {
        unint64_t v28 = 0xE300000000000000;
        uint64_t v29 = 7104878;
      }
      else
      {
        uint64_t v30 = v35;
        (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v10, v14, v4);
        (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v8, v10, v4);
        uint64_t v29 = String.init<A>(describing:)();
        unint64_t v28 = v31;
        (*(void (**)(char *, uint64_t))(v30 + 8))(v10, v4);
      }
      outlined destroy of UUID?((uint64_t)v17, &demangling cache variable for type metadata for UUID?);
      uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v28, v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_25D6CC000, v25, v26, "Network Analytics: NetworkConnectionId set: %s", v27, 0xCu);
      uint64_t v32 = v34;
      swift_arrayDestroy();
      MEMORY[0x2611B3750](v32, -1, -1);
      MEMORY[0x2611B3750](v27, -1, -1);
    }
    else
    {
    }
  }
}

Swift::Void __swiftcall NetworkAnalytics.setConnectionProvider(_:)(Swift::String_optional a1)
{
}

void NetworkAnalytics.setNetId(_:)()
{
  OUTLINED_FUNCTION_22();
  uint64_t v20 = v4;
  uint64_t v21 = v5;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  type metadata accessor for DispatchWorkItemFlags();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v10);
  uint64_t v22 = OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_0();
  uint64_t v12 = v11;
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_2();
  uint64_t v14 = *(void **)(v0 + OBJC_IVAR___SNNetworkAnalyticsInternal_queue);
  OUTLINED_FUNCTION_23_2();
  OUTLINED_FUNCTION_30_3();
  uint64_t v15 = (void *)swift_allocObject();
  v15[2] = v3;
  v15[3] = v9;
  v15[4] = v7;
  v23[4] = v20;
  v23[5] = v15;
  v23[0] = MEMORY[0x263EF8330];
  OUTLINED_FUNCTION_126(COERCE_DOUBLE(1107296256));
  v23[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v23[3] = v21;
  uint64_t v16 = _Block_copy(v23);
  swift_bridgeObjectRetain();
  id v17 = v14;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  OUTLINED_FUNCTION_14_2();
  MEMORY[0x2611B24E0](0, v2, v1, v16);
  _Block_release(v16);

  uint64_t v18 = OUTLINED_FUNCTION_4_0();
  v19(v18);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v2, v22);
  OUTLINED_FUNCTION_29_2();
  swift_release();
  OUTLINED_FUNCTION_29();
}

void closure #1 in NetworkAnalytics.setConnectionProvider(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + 16;
  swift_beginAccess();
  uint64_t v5 = MEMORY[0x2611B37F0](v4);
  if (v5)
  {
    uint64_t v6 = (char *)v5;
    if (a3)
    {
      type metadata accessor for NetworkAnalytics(0);
      int v7 = static NetworkAnalytics.netProvider(from:)();
    }
    else
    {
      int v7 = 0;
    }
    uint64_t v8 = &v6[OBJC_IVAR___SNNetworkAnalyticsInternal_connectionProvider];
    *(_DWORD *)uint64_t v8 = v7;
    v8[4] = a3 == 0;
    if (one-time initialization token for siriNetwork != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.siriNetwork);
    uint64_t v10 = v6;
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      uint64_t v18 = v14;
      *(_DWORD *)uint64_t v13 = 136315138;
      if (v10[OBJC_IVAR___SNNetworkAnalyticsInternal_connectionProvider + 4])
      {
        unint64_t v15 = 0xE300000000000000;
        uint64_t v16 = 7104878;
      }
      else
      {
        type metadata accessor for NETSchemaNETProvider(0);
        uint64_t v16 = String.init<A>(describing:)();
        unint64_t v15 = v17;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v15, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_25D6CC000, v11, v12, "Network Analytics: ConnectionProvider set: %s", v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2611B3750](v14, -1, -1);
      MEMORY[0x2611B3750](v13, -1, -1);
    }
    else
    {
    }
  }
}

Swift::UInt32 __swiftcall NetworkAnalytics.getSequenceNumber()()
{
  Swift::UInt32 v11 = 0;
  uint64_t v1 = *(void **)&v0[OBJC_IVAR___SNNetworkAnalyticsInternal_queue];
  uint64_t v2 = OUTLINED_FUNCTION_15_2();
  *(void *)(v2 + 16) = &v11;
  *(void *)(v2 + 24) = v0;
  uint64_t v3 = OUTLINED_FUNCTION_15_2();
  *(void *)(v3 + 16) = partial apply for closure #1 in NetworkAnalytics.getSequenceNumber();
  *(void *)(v3 + 24) = v2;
  aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
  aBlock[5] = v3;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_40;
  uint64_t v4 = _Block_copy(aBlock);
  uint64_t v5 = v1;
  uint64_t v6 = v0;
  swift_retain();
  swift_release();
  dispatch_sync(v5, v4);

  _Block_release(v4);
  char v7 = OUTLINED_FUNCTION_40_0();
  Swift::UInt32 result = swift_release();
  if (v7)
  {
    __break(1u);
  }
  else
  {
    Swift::UInt32 v9 = v11;
    swift_release();
    return v9;
  }
  return result;
}

Swift::Void __swiftcall NetworkAnalytics.setIsConnectionActive(_:)(Swift::Bool a1)
{
}

Swift::Bool __swiftcall NetworkAnalytics.getIsConnectionActive()()
{
  Swift::Bool v11 = 0;
  uint64_t v1 = *(void **)&v0[OBJC_IVAR___SNNetworkAnalyticsInternal_queue];
  uint64_t v2 = OUTLINED_FUNCTION_15_2();
  *(void *)(v2 + 16) = &v11;
  *(void *)(v2 + 24) = v0;
  uint64_t v3 = OUTLINED_FUNCTION_15_2();
  *(void *)(v3 + 16) = partial apply for closure #1 in NetworkAnalytics.getIsConnectionActive();
  *(void *)(v3 + 24) = v2;
  aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
  aBlock[5] = v3;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_56_0;
  uint64_t v4 = _Block_copy(aBlock);
  uint64_t v5 = v1;
  uint64_t v6 = v0;
  swift_retain();
  swift_release();
  dispatch_sync(v5, v4);

  _Block_release(v4);
  char v7 = OUTLINED_FUNCTION_40_0();
  Swift::Bool result = swift_release();
  if (v7)
  {
    __break(1u);
  }
  else
  {
    Swift::Bool v9 = v11;
    swift_release();
    return v9;
  }
  return result;
}

Swift::Void __swiftcall NetworkAnalytics.setNetIdAvailable(_:)(Swift::Bool a1)
{
}

void NetworkAnalytics.setIsConnectionActive(_:)()
{
  OUTLINED_FUNCTION_22();
  uint64_t v16 = v1;
  uint64_t v3 = v2;
  char v5 = v4;
  type metadata accessor for DispatchWorkItemFlags();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_2();
  uint64_t v8 = *(void **)&v0[OBJC_IVAR___SNNetworkAnalyticsInternal_queue];
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v0;
  *(unsigned char *)(v9 + 24) = v5;
  v17[4] = v3;
  v17[5] = v9;
  v17[0] = MEMORY[0x263EF8330];
  OUTLINED_FUNCTION_126(COERCE_DOUBLE(1107296256));
  v17[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v17[3] = v16;
  uint64_t v10 = _Block_copy(v17);
  id v11 = v8;
  os_log_type_t v12 = v0;
  static DispatchQoS.unspecified.getter();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  OUTLINED_FUNCTION_14_2();
  OUTLINED_FUNCTION_47_0();
  _Block_release(v10);

  uint64_t v13 = OUTLINED_FUNCTION_6();
  v14(v13);
  OUTLINED_FUNCTION_27_3();
  v15();
  swift_release();
  OUTLINED_FUNCTION_29();
}

void closure #1 in NetworkAnalytics.setNetIdAvailable(_:)(uint64_t a1, char a2)
{
  *(unsigned char *)(a1 + OBJC_IVAR___SNNetworkAnalyticsInternal_netIdAvailable) = a2;
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.siriNetwork);
  os_log_t oslog = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v3))
  {
    char v4 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)char v4 = 67109120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_25D6CC000, oslog, v3, "Network Analytics: NetId available: %{BOOL}d", v4, 8u);
    MEMORY[0x2611B3750](v4, -1, -1);
  }
  else
  {
  }
}

Swift::Bool __swiftcall NetworkAnalytics.isNetIdAvailable()()
{
  Swift::Bool v11 = 0;
  uint64_t v1 = *(void **)&v0[OBJC_IVAR___SNNetworkAnalyticsInternal_queue];
  uint64_t v2 = OUTLINED_FUNCTION_15_2();
  *(void *)(v2 + 16) = &v11;
  *(void *)(v2 + 24) = v0;
  uint64_t v3 = OUTLINED_FUNCTION_15_2();
  *(void *)(v3 + 16) = partial apply for closure #1 in NetworkAnalytics.isNetIdAvailable();
  *(void *)(v3 + 24) = v2;
  aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
  aBlock[5] = v3;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_72;
  char v4 = _Block_copy(aBlock);
  char v5 = v1;
  uint64_t v6 = v0;
  swift_retain();
  swift_release();
  dispatch_sync(v5, v4);

  _Block_release(v4);
  char v7 = OUTLINED_FUNCTION_40_0();
  Swift::Bool result = swift_release();
  if (v7)
  {
    __break(1u);
  }
  else
  {
    Swift::Bool v9 = v11;
    swift_release();
    return v9;
  }
  return result;
}

Swift::Void __swiftcall NetworkAnalytics.increaseSequenceNumber()()
{
}

Swift::Void __swiftcall NetworkAnalytics.resetSequenceNumber()()
{
}

void NetworkAnalytics.increaseSequenceNumber()()
{
  OUTLINED_FUNCTION_22();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  type metadata accessor for DispatchWorkItemFlags();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_2();
  char v7 = *(void **)&v0[OBJC_IVAR___SNNetworkAnalyticsInternal_queue];
  uint64_t v8 = OUTLINED_FUNCTION_23_2();
  *(void *)(v8 + 16) = v0;
  v15[4] = v4;
  v15[5] = v8;
  v15[0] = MEMORY[0x263EF8330];
  OUTLINED_FUNCTION_126(COERCE_DOUBLE(1107296256));
  v15[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v15[3] = v2;
  Swift::Bool v9 = _Block_copy(v15);
  id v10 = v7;
  Swift::Bool v11 = v0;
  static DispatchQoS.unspecified.getter();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  OUTLINED_FUNCTION_14_2();
  OUTLINED_FUNCTION_47_0();
  _Block_release(v9);

  uint64_t v12 = OUTLINED_FUNCTION_6();
  v13(v12);
  OUTLINED_FUNCTION_27_3();
  v14();
  swift_release();
  OUTLINED_FUNCTION_29();
}

uint64_t sub_25D70EAEC()
{
  swift_unknownObjectWeakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for closure #1 in NetworkAnalytics.resetNetId()()
{
  closure #1 in NetworkAnalytics.resetNetId()(v0);
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

void partial apply for closure #1 in NetworkAnalytics.setNetId(_:)()
{
}

uint64_t partial apply for closure #1 in NetworkAnalytics.getNetId()()
{
  return closure #1 in NetworkAnalytics.getNetId()(*(void *)(v0 + 16), *(void *)(v0 + 24), &OBJC_IVAR___SNNetworkAnalyticsInternal_netId);
}

uint64_t partial apply for thunk for @callee_guaranteed () -> ()()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t outlined init with take of UUID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of UUID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_25D70EC94()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_19_3(v2);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 24) & ~v4;
  uint64_t v7 = *(void *)(v6 + 64);
  swift_release();
  uint64_t v8 = type metadata accessor for UUID();
  if (!OUTLINED_FUNCTION_49_0(v8))
  {
    OUTLINED_FUNCTION_42_0();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v0 + v5, v1);
  }

  return MEMORY[0x270FA0238](v0, v5 + v7, v4 | 7);
}

void partial apply for closure #1 in NetworkAnalytics.setNetworkConnectionId(_:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_23_3(v0);
  uint64_t v1 = OUTLINED_FUNCTION_57_0();

  closure #1 in NetworkAnalytics.setNetworkConnectionId(_:)(v1, v2);
}

void partial apply for closure #1 in NetworkAnalytics.setConnectionProvider(_:)()
{
  uint64_t v0 = OUTLINED_FUNCTION_26_1();
  closure #1 in NetworkAnalytics.setConnectionProvider(_:)(v0, v1, v2);
}

uint64_t sub_25D70EDA8()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

void partial apply for closure #1 in NetworkAnalytics.getSequenceNumber()()
{
  **(_DWORD **)(v0 + 16) = *(_DWORD *)(*(void *)(v0 + 24) + OBJC_IVAR___SNNetworkAnalyticsInternal_sequenceNumber);
}

uint64_t sub_25D70EDFC()
{
  return MEMORY[0x270FA0238](v0, 25, 7);
}

void partial apply for closure #1 in NetworkAnalytics.setIsConnectionActive(_:)()
{
  *(unsigned char *)(*(void *)(v0 + 16) + OBJC_IVAR___SNNetworkAnalyticsInternal_isConnectionActive) = *(unsigned char *)(v0 + 24);
}

void partial apply for closure #1 in NetworkAnalytics.getIsConnectionActive()()
{
  OUTLINED_FUNCTION_59(*(unsigned char **)(v0 + 16));
}

void partial apply for closure #1 in NetworkAnalytics.setNetIdAvailable(_:)()
{
  closure #1 in NetworkAnalytics.setNetIdAvailable(_:)(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

void partial apply for closure #1 in NetworkAnalytics.isNetIdAvailable()()
{
  OUTLINED_FUNCTION_59(*(unsigned char **)(v0 + 16));
}

uint64_t sub_25D70EE80()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for closure #1 in NetworkAnalytics.increaseSequenceNumber()()
{
  uint64_t v1 = *(void *)(v0 + 16);
  unsigned int v2 = *(_DWORD *)(v1 + OBJC_IVAR___SNNetworkAnalyticsInternal_sequenceNumber);
  if (v2 <= 0x3E8) {
    int v3 = v2 + 1;
  }
  else {
    int v3 = 1;
  }
  *(_DWORD *)(v1 + OBJC_IVAR___SNNetworkAnalyticsInternal_sequenceNumber) = v3;
}

void partial apply for closure #1 in NetworkAnalytics.resetSequenceNumber()()
{
  *(_DWORD *)(*(void *)(v0 + 16) + OBJC_IVAR___SNNetworkAnalyticsInternal_sequenceNumber) = 1;
}

Swift::Void __swiftcall NetworkAnalytics.setOrchestatorRequestId(_:)(Swift::String_optional a1)
{
}

void closure #1 in NetworkAnalytics.setNetId(_:)()
{
  OUTLINED_FUNCTION_22();
  Swift::UInt8 v39 = v3;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v10 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_0_0();
  uint64_t v12 = v11;
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_8_2();
  MEMORY[0x270FA5388](v14);
  uint64_t v38 = &v35[-v15];
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v17 = OUTLINED_FUNCTION_19_1(v16);
  MEMORY[0x270FA5388](v17);
  OUTLINED_FUNCTION_38();
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_55();
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = &v35[-v20];
  OUTLINED_FUNCTION_24_2();
  uint64_t v22 = MEMORY[0x2611B37F0](v9 + 16);
  if (v22)
  {
    uint64_t v23 = (void *)v22;
    if (v7)
    {
      OUTLINED_FUNCTION_52_0();
      UUID.init(uuidString:)();
    }
    else
    {
      __swift_storeEnumTagSinglePayload((uint64_t)v21, 1, 1, v10);
    }
    uint64_t v24 = (uint64_t)v23 + *v5;
    swift_beginAccess();
    outlined assign with take of UUID?((uint64_t)v21, v24);
    swift_endAccess();
    if (one-time initialization token for siriNetwork != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Logger.siriNetwork);
    id v26 = v23;
    uint64_t v27 = Logger.logObject.getter();
    LODWORD(v23) = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, (os_log_type_t)v23))
    {
      unint64_t v28 = (uint8_t *)swift_slowAlloc();
      uint64_t v37 = OUTLINED_FUNCTION_10_0();
      uint64_t v41 = v37;
      *(_DWORD *)unint64_t v28 = 136315138;
      uint64_t v29 = (uint64_t)v26 + *v5;
      OUTLINED_FUNCTION_24_2();
      outlined init with copy of UUID?(v29, v1);
      outlined init with copy of UUID?(v1, v2);
      if (__swift_getEnumTagSinglePayload(v2, 1, v10) == 1)
      {
        unint64_t v30 = 0xE400000000000000;
        uint64_t v31 = 1819047278;
      }
      else
      {
        uint64_t v32 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v12 + 32);
        int v36 = (int)v23;
        uint64_t v23 = v38;
        v32(v38, v2, v10);
        (*(void (**)(uint64_t, void *, uint64_t))(v12 + 16))(v0, v23, v10);
        uint64_t v31 = String.init<A>(describing:)();
        unint64_t v30 = v33;
        uint64_t v34 = v23;
        LOBYTE(v23) = v36;
        (*(void (**)(void *, uint64_t))(v12 + 8))(v34, v10);
      }
      outlined destroy of UUID?(v1, &demangling cache variable for type metadata for UUID?);
      uint64_t v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v30, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_25D6CC000, v27, (os_log_type_t)v23, v39, v28, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_1_2();
      OUTLINED_FUNCTION_1_2();
    }
    else
    {
    }
  }
  OUTLINED_FUNCTION_29();
}

uint64_t objectdestroy_3Tm()
{
  swift_release();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

void partial apply for closure #1 in NetworkAnalytics.setOrchestatorRequestId(_:)()
{
}

uint64_t @objc NetworkAnalytics.setNetId(_:)(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  if (a3)
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
  id v9 = a1;
  a4(v6, v8);

  return swift_bridgeObjectRelease();
}

uint64_t NetworkAnalytics.getOrchestratorRequestId()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v5 = OUTLINED_FUNCTION_19_1(v4);
  MEMORY[0x270FA5388](v5);
  uint64_t v6 = OUTLINED_FUNCTION_39_0();
  OUTLINED_FUNCTION_50_0(v6);
  uint64_t v7 = *(void **)&v1[OBJC_IVAR___SNNetworkAnalyticsInternal_queue];
  uint64_t v8 = OUTLINED_FUNCTION_15_2();
  *(void *)(v8 + 16) = v2;
  *(void *)(v8 + 24) = v1;
  uint64_t v9 = OUTLINED_FUNCTION_15_2();
  *(void *)(v9 + 16) = partial apply for closure #1 in NetworkAnalytics.getOrchestratorRequestId();
  *(void *)(v9 + 24) = v8;
  aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
  aBlock[5] = v9;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_101;
  uint64_t v10 = _Block_copy(aBlock);
  uint64_t v11 = v7;
  uint64_t v12 = v1;
  swift_retain();
  swift_release();
  dispatch_sync(v11, v10);

  _Block_release(v10);
  char v13 = OUTLINED_FUNCTION_40_0();
  uint64_t result = swift_release();
  if (v13)
  {
    __break(1u);
  }
  else
  {
    outlined init with take of UUID?(v2, a1);
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in NetworkAnalytics.getNetId()(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v7 = OUTLINED_FUNCTION_19_1(v6);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a2 + *a3;
  OUTLINED_FUNCTION_24_2();
  outlined init with copy of UUID?(v10, (uint64_t)v9);
  return outlined assign with take of UUID?((uint64_t)v9, a1);
}

uint64_t partial apply for closure #1 in NetworkAnalytics.getOrchestratorRequestId()()
{
  return closure #1 in NetworkAnalytics.getNetId()(*(void *)(v0 + 16), *(void *)(v0 + 24), &OBJC_IVAR___SNNetworkAnalyticsInternal_orchestratorRequestId);
}

Class @objc NetworkAnalytics.getNetId()(void *a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v6 = OUTLINED_FUNCTION_19_1(v5);
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_0_1();
  uint64_t v9 = v8 - v7;
  id v10 = a1;
  a3();

  uint64_t v11 = type metadata accessor for UUID();
  Class isa = 0;
  if (OUTLINED_FUNCTION_49_0(v11) != 1)
  {
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    OUTLINED_FUNCTION_42_0();
    (*(void (**)(uint64_t, void (*)(void)))(v13 + 8))(v9, a3);
  }

  return isa;
}

Swift::Bool __swiftcall NetworkAnalytics.emitLogDebug()()
{
  if (specialized RandomNumberGenerator.next<A>(upperBound:)(10)) {
    return AFIsInternalInstall();
  }
  else {
    return 1;
  }
}

void *NetworkAnalytics.createRequestLinkInfo(from:component:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v6 = OUTLINED_FUNCTION_19_1(v5);
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_0_1();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_0_0();
  uint64_t v12 = v11;
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_8_2();
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v25 - v15;
  outlined init with copy of UUID?(a1, v9);
  if (__swift_getEnumTagSinglePayload(v9, 1, v10) == 1)
  {
    outlined destroy of UUID?(v9, &demangling cache variable for type metadata for UUID?);
    return 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v16, v9, v10);
    type metadata accessor for CTServiceDescriptor(0, &lazy cache variable for type metadata for SISchemaUUID);
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 16))(v2, v16, v10);
    id v18 = SISchemaUUID.__allocating_init(nsuuid:)(v2);
    id v19 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F6EDC0]), sel_init);
    uint64_t v17 = v19;
    if (v19)
    {
      objc_msgSend(v19, sel_setUuid_, v18);
      objc_msgSend(v17, sel_setComponent_, a2);

      uint64_t v20 = OUTLINED_FUNCTION_45_0();
      v21(v20);
    }
    else
    {
      uint64_t v22 = OUTLINED_FUNCTION_45_0();
      v23(v22);
    }
  }
  return v17;
}

id SISchemaUUID.__allocating_init(nsuuid:)(uint64_t a1)
{
  id v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  id v4 = objc_msgSend(v2, sel_initWithNSUUID_, isa);

  uint64_t v5 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return v4;
}

void NetworkAnalytics.createSchemaClientEventFrom(netId:networkConnectionId:connectionProvider:)()
{
  OUTLINED_FUNCTION_22();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v9 = OUTLINED_FUNCTION_19_1(v8);
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_38();
  MEMORY[0x270FA5388](v10);
  uint64_t v11 = OUTLINED_FUNCTION_60_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v13 = v12;
  uint64_t v15 = MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  uint64_t v20 = (char *)&v48 - v19;
  MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v48 - v21;
  outlined init with copy of UUID?(v7, v0);
  OUTLINED_FUNCTION_10_3(v0);
  if (!v23)
  {
    uint64_t v50 = v3;
    uint64_t v51 = v5;
    char v49 = v17;
    uint64_t v24 = (void (*)(char *, uint64_t, uint64_t))v13[4];
    uint64_t v53 = v22;
    int v48 = v24;
    v24(v22, v0, v11);
    id v25 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F6E448]), sel_init);
    id v26 = v25;
    if (v25)
    {
      id v27 = objc_allocWithZone(MEMORY[0x263F6E450]);
      id v28 = v26;
      id v29 = objc_msgSend(v27, sel_init);
      objc_msgSend(v28, sel_setEventMetadata_, v29);
    }
    type metadata accessor for CTServiceDescriptor(0, &lazy cache variable for type metadata for SISchemaUUID);
    unint64_t v30 = (void (*)(char *, char *, uint64_t))v13[2];
    v30(v20, v53, v11);
    id v52 = SISchemaUUID.__allocating_init(nsuuid:)((uint64_t)v20);
    if (v26)
    {
      id v31 = objc_msgSend(v26, sel_eventMetadata);
      if (v31)
      {
        uint64_t v32 = v31;
        objc_msgSend(v31, sel_setNetId_, v52);
      }
    }
    outlined init with copy of UUID?(v51, v1);
    OUTLINED_FUNCTION_10_3(v1);
    if (v23)
    {
      outlined destroy of UUID?(v1, &demangling cache variable for type metadata for UUID?);
    }
    else
    {
      unint64_t v33 = v49;
      v48(v49, v1, v11);
      v30(v20, v33, v11);
      id v34 = SISchemaUUID.__allocating_init(nsuuid:)((uint64_t)v20);
      if (!v26)
      {
        Swift::UInt8 v39 = (void (*)(void))v13[1];
        OUTLINED_FUNCTION_12_3();
        v39();

        uint64_t v40 = v53;
        if ((v50 & 0x100000000) == 0) {
          goto LABEL_27;
        }
        goto LABEL_23;
      }
      id v35 = objc_msgSend(v26, sel_eventMetadata);
      if (v35)
      {
        int v36 = v35;
        objc_msgSend(v35, sel_setNetworkConnectionId_, v34);

        uint64_t v37 = OUTLINED_FUNCTION_34_3();
        v38(v37);
      }
      else
      {
        uint64_t v41 = OUTLINED_FUNCTION_34_3();
        v42(v41);
      }
    }
    uint64_t v43 = v50;
    uint64_t v40 = v53;
    if ((v50 & 0x100000000) == 0)
    {
      if (v26)
      {
        id v44 = objc_msgSend(v26, sel_eventMetadata);
        if (v44)
        {
          int v45 = v44;
          objc_msgSend(v44, sel_setProvider_, v43);

          OUTLINED_FUNCTION_12_3();
          v46();
          goto LABEL_25;
        }
        OUTLINED_FUNCTION_12_3();
        v47();
LABEL_24:

        goto LABEL_25;
      }
      Swift::UInt8 v39 = (void (*)(void))v13[1];
LABEL_27:
      ((void (*)(char *, uint64_t))v39)(v40, v11);

      goto LABEL_25;
    }
    Swift::UInt8 v39 = (void (*)(void))v13[1];
LABEL_23:
    ((void (*)(char *, uint64_t))v39)(v40, v11);
    goto LABEL_24;
  }
  outlined destroy of UUID?(v0, &demangling cache variable for type metadata for UUID?);
LABEL_25:
  OUTLINED_FUNCTION_29();
}

void NetworkAnalytics.emitAllCachedMessagesFor(_:)()
{
  OUTLINED_FUNCTION_22();
  uint64_t v2 = v0;
  uint64_t v4 = v3;
  type metadata accessor for DispatchWorkItemFlags();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_2();
  uint64_t v7 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_0_0();
  uint64_t v9 = v8;
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_48_0();
  uint64_t v18 = *(void **)&v2[OBJC_IVAR___SNNetworkAnalyticsInternal_queue];
  uint64_t v11 = OUTLINED_FUNCTION_23_2();
  swift_unknownObjectWeakInit();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v1, v4, v7);
  OUTLINED_FUNCTION_58_0();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 32))(&v2[v12], v1, v7);
  v19[4] = partial apply for closure #1 in NetworkAnalytics.emitAllCachedMessagesFor(_:);
  v19[5] = v12;
  v19[0] = MEMORY[0x263EF8330];
  OUTLINED_FUNCTION_126(COERCE_DOUBLE(1107296256));
  v19[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v19[3] = &block_descriptor_238_0;
  uint64_t v13 = _Block_copy(v19);
  id v14 = v18;
  OUTLINED_FUNCTION_35_1();
  static DispatchQoS.unspecified.getter();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  OUTLINED_FUNCTION_3_10();
  OUTLINED_FUNCTION_9_4();
  _Block_release(v13);

  uint64_t v15 = OUTLINED_FUNCTION_4_0();
  v16(v15);
  OUTLINED_FUNCTION_12_2();
  v17();
  OUTLINED_FUNCTION_29_2();
  swift_release();
  OUTLINED_FUNCTION_29();
}

void closure #1 in NetworkAnalytics.emitAllCachedMessagesFor(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v607 = a2;
  uint64_t v611 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v611 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v611);
  v569 = (char *)&v549 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  v604 = (char *)&v549 - v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  uint64_t v8 = MEMORY[0x270FA5388](v7);
  uint64_t v584 = (uint64_t)&v549 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v583 = (uint64_t)&v549 - v11;
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v582 = (uint64_t)&v549 - v13;
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v581 = (uint64_t)&v549 - v15;
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v580 = (uint64_t)&v549 - v17;
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v578 = (uint64_t)&v549 - v19;
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  uint64_t v577 = (uint64_t)&v549 - v21;
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  uint64_t v597 = (uint64_t)&v549 - v23;
  MEMORY[0x270FA5388](v22);
  id v25 = (char *)&v549 - v24;
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v27 = MEMORY[0x270FA5388](v26 - 8);
  uint64_t v560 = (uint64_t)&v549 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = MEMORY[0x270FA5388](v27);
  uint64_t v568 = (uint64_t)&v549 - v30;
  uint64_t v31 = MEMORY[0x270FA5388](v29);
  v574 = (char *)&v549 - v32;
  uint64_t v33 = MEMORY[0x270FA5388](v31);
  uint64_t v598 = (uint64_t)&v549 - v34;
  uint64_t v35 = MEMORY[0x270FA5388](v33);
  v591 = (char *)&v549 - v36;
  uint64_t v37 = MEMORY[0x270FA5388](v35);
  uint64_t v559 = (uint64_t)&v549 - v38;
  uint64_t v39 = MEMORY[0x270FA5388](v37);
  uint64_t v567 = (uint64_t)&v549 - v40;
  uint64_t v41 = MEMORY[0x270FA5388](v39);
  uint64_t v573 = (uint64_t)&v549 - v42;
  uint64_t v43 = MEMORY[0x270FA5388](v41);
  v600 = (char *)&v549 - v44;
  uint64_t v45 = MEMORY[0x270FA5388](v43);
  v596 = (char *)&v549 - v46;
  uint64_t v47 = MEMORY[0x270FA5388](v45);
  uint64_t v558 = (uint64_t)&v549 - v48;
  uint64_t v49 = MEMORY[0x270FA5388](v47);
  uint64_t v566 = (uint64_t)&v549 - v50;
  uint64_t v51 = MEMORY[0x270FA5388](v49);
  uint64_t v572 = (uint64_t)&v549 - v52;
  uint64_t v53 = MEMORY[0x270FA5388](v51);
  v595 = (char *)&v549 - v54;
  uint64_t v55 = MEMORY[0x270FA5388](v53);
  v590 = (char *)&v549 - v56;
  uint64_t v57 = MEMORY[0x270FA5388](v55);
  uint64_t v557 = (uint64_t)&v549 - v58;
  uint64_t v59 = MEMORY[0x270FA5388](v57);
  uint64_t v565 = (uint64_t)&v549 - v60;
  uint64_t v61 = MEMORY[0x270FA5388](v59);
  v594 = (char *)&v549 - v62;
  uint64_t v63 = MEMORY[0x270FA5388](v61);
  v593 = (char *)&v549 - v64;
  uint64_t v65 = MEMORY[0x270FA5388](v63);
  v601 = (uint8_t *)&v549 - v66;
  uint64_t v67 = MEMORY[0x270FA5388](v65);
  uint64_t v556 = (uint64_t)&v549 - v68;
  uint64_t v69 = MEMORY[0x270FA5388](v67);
  uint64_t v564 = (uint64_t)&v549 - v70;
  uint64_t v71 = MEMORY[0x270FA5388](v69);
  uint64_t v571 = (uint64_t)&v549 - v72;
  uint64_t v73 = MEMORY[0x270FA5388](v71);
  uint64_t v579 = (uint64_t)&v549 - v74;
  uint64_t v75 = MEMORY[0x270FA5388](v73);
  v603 = (char *)&v549 - v76;
  uint64_t v77 = MEMORY[0x270FA5388](v75);
  uint64_t v555 = (uint64_t)&v549 - v78;
  uint64_t v79 = MEMORY[0x270FA5388](v77);
  uint64_t v563 = (uint64_t)&v549 - v80;
  uint64_t v81 = MEMORY[0x270FA5388](v79);
  uint64_t v83 = (char *)&v549 - v82;
  uint64_t v84 = MEMORY[0x270FA5388](v81);
  v599 = ((char *)&v549 - v85);
  uint64_t v86 = MEMORY[0x270FA5388](v84);
  v589 = (char *)&v549 - v87;
  uint64_t v88 = MEMORY[0x270FA5388](v86);
  uint64_t v554 = (uint64_t)&v549 - v89;
  uint64_t v90 = MEMORY[0x270FA5388](v88);
  uint64_t v562 = (uint64_t)&v549 - v91;
  uint64_t v92 = MEMORY[0x270FA5388](v90);
  v592 = (char *)&v549 - v93;
  uint64_t v94 = MEMORY[0x270FA5388](v92);
  uint64_t v602 = (uint64_t)&v549 - v95;
  uint64_t v96 = MEMORY[0x270FA5388](v94);
  v588 = (char *)&v549 - v97;
  uint64_t v98 = MEMORY[0x270FA5388](v96);
  uint64_t v553 = (uint64_t)&v549 - v99;
  uint64_t v100 = MEMORY[0x270FA5388](v98);
  uint64_t v561 = (uint64_t)&v549 - v101;
  uint64_t v102 = MEMORY[0x270FA5388](v100);
  uint64_t v570 = (uint64_t)&v549 - v103;
  uint64_t v104 = MEMORY[0x270FA5388](v102);
  uint64_t v575 = (uint64_t)&v549 - v105;
  uint64_t v106 = MEMORY[0x270FA5388](v104);
  v576 = (char *)&v549 - v107;
  uint64_t v108 = MEMORY[0x270FA5388](v106);
  uint64_t v552 = (uint64_t)&v549 - v109;
  uint64_t v110 = MEMORY[0x270FA5388](v108);
  v585 = (char *)&v549 - v111;
  uint64_t v112 = MEMORY[0x270FA5388](v110);
  uint64_t v114 = (char *)&v549 - v113;
  uint64_t v115 = MEMORY[0x270FA5388](v112);
  uint64_t v117 = (char *)&v549 - v116;
  MEMORY[0x270FA5388](v115);
  uint64_t v119 = (char *)&v549 - v118;
  swift_beginAccess();
  uint64_t v587 = a1 + 16;
  uint64_t v120 = MEMORY[0x2611B37F0](a1 + 16);
  if (v120)
  {
    uint64_t v121 = (char *)v120;
    v551 = v83;
    uint64_t v122 = v3 + 16;
    uint64_t v123 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
    uint64_t v124 = (uint64_t)v25;
    uint64_t v125 = v3;
    uint64_t v126 = v611;
    v608 = v123;
    uint64_t v609 = v122;
    v123(v119, (char *)v607, v611);
    __swift_storeEnumTagSinglePayload((uint64_t)v119, 0, 1, v126);
    uint64_t v127 = (uint64_t)&v121[OBJC_IVAR___SNNetworkAnalyticsInternal_httpHeaderEvent];
    swift_beginAccess();
    uint64_t v586 = v127;
    outlined init with copy of UUID?(v127, (uint64_t)v117);
    uint64_t v128 = v124 + *(int *)(v7 + 48);
    outlined init with copy of UUID?((uint64_t)v119, v124);
    outlined init with copy of UUID?((uint64_t)v117, v128);
    int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v124, 1, v126);
    uint64_t v605 = v125;
    uint64_t v606 = v7;
    v610 = v121;
    if (EnumTagSinglePayload == 1)
    {
      outlined destroy of UUID?((uint64_t)v117, &demangling cache variable for type metadata for UUID?);
      outlined destroy of UUID?((uint64_t)v119, &demangling cache variable for type metadata for UUID?);
      if (__swift_getEnumTagSinglePayload(v128, 1, v611) == 1)
      {
        outlined destroy of UUID?(v124, &demangling cache variable for type metadata for UUID?);
        uint64_t v130 = v607;
LABEL_9:
        uint64_t v134 = type metadata accessor for NetworkAnalyticsEventMessage(0);
        double v135 = *(void **)(v586 + *(int *)(v134 + 20));
        if (v135)
        {
          uint64_t v136 = v586 + *(int *)(v134 + 24);
          if ((*(unsigned char *)(v136 + 8) & 1) == 0)
          {
            uint64_t v137 = *(void *)v136;
            uint64_t v138 = v587;
            swift_beginAccess();
            uint64_t v139 = MEMORY[0x2611B37F0](v138);
            if (v139)
            {
              char v140 = (void *)v139;
              uint64_t v141 = *(void **)(v139 + OBJC_IVAR___SNNetworkAnalyticsInternal_siriAnalyticsMessageStream);
              id v142 = v135;
              swift_unknownObjectRetain();

              objc_msgSend(v141, sel_emitMessage_timestamp_, v142, v137);
              swift_unknownObjectRelease();
            }
            if (one-time initialization token for siriNetwork != -1) {
              swift_once();
            }
            uint64_t v143 = type metadata accessor for Logger();
            __swift_project_value_buffer(v143, (uint64_t)static Logger.siriNetwork);
            char v144 = v610;
            double v145 = Logger.logObject.getter();
            os_log_type_t v146 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v145, v146))
            {
              int v147 = (uint8_t *)swift_slowAlloc();
              uint64_t v148 = swift_slowAlloc();
              v621[0] = v148;
              *(_DWORD *)int v147 = 136315138;
              uint64_t v149 = (uint64_t)&v144[OBJC_IVAR___SNNetworkAnalyticsInternal_netId];
              swift_beginAccess();
              uint64_t v150 = (uint64_t)v585;
              outlined init with copy of UUID?(v149, (uint64_t)v585);
              uint64_t v151 = v150;
              uint64_t v152 = v552;
              outlined init with copy of UUID?(v151, v552);
              int v153 = __swift_getEnumTagSinglePayload(v152, 1, v611);
              uint64_t v154 = v605;
              if (v153 == 1)
              {
                uint64_t v155 = 1819047278;
                unint64_t v156 = 0xE400000000000000;
              }
              else
              {
                int v157 = *(void (**)(char *, uint64_t, uint64_t))(v605 + 32);
                uint64_t v550 = v148;
                int v158 = v604;
                uint64_t v159 = v152;
                uint64_t v160 = v611;
                v157(v604, v159, v611);
                v608(v569, v158, v160);
                uint64_t v155 = String.init<A>(describing:)();
                unint64_t v156 = v161;
                int v162 = v158;
                uint64_t v148 = v550;
                (*(void (**)(char *, uint64_t))(v154 + 8))(v162, v160);
              }
              outlined destroy of UUID?((uint64_t)v585, &demangling cache variable for type metadata for UUID?);
              v620[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v155, v156, v621);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();

              swift_bridgeObjectRelease();
              _os_log_impl(&dword_25D6CC000, v145, v146, "Network Analytics: Event httpHeaderEvent emitted: %s", v147, 0xCu);
              swift_arrayDestroy();
              MEMORY[0x2611B3750](v148, -1, -1);
              MEMORY[0x2611B3750](v147, -1, -1);

              uint64_t v7 = v606;
              uint64_t v130 = v607;
            }
            else
            {
            }
          }
        }
LABEL_21:
        uint64_t v163 = (uint64_t)v576;
        uint64_t v164 = v611;
        v608(v576, (char *)v130, v611);
        __swift_storeEnumTagSinglePayload(v163, 0, 1, v164);
        int v165 = &v610[OBJC_IVAR___SNNetworkAnalyticsInternal_preparationSnapshotEvent];
        swift_beginAccess();
        v585 = v165;
        uint64_t v166 = v575;
        outlined init with copy of UUID?((uint64_t)v165, v575);
        uint64_t v167 = v597;
        uint64_t v168 = v597 + *(int *)(v7 + 48);
        outlined init with copy of UUID?(v163, v597);
        outlined init with copy of UUID?(v166, v168);
        if (__swift_getEnumTagSinglePayload(v167, 1, v164) == 1)
        {
          outlined destroy of UUID?(v166, &demangling cache variable for type metadata for UUID?);
          outlined destroy of UUID?(v163, &demangling cache variable for type metadata for UUID?);
          int v169 = __swift_getEnumTagSinglePayload(v168, 1, v611);
          uint64_t v170 = v605;
          uint64_t v171 = v130;
          uint64_t v172 = (uint64_t)v592;
          uint64_t v173 = (uint64_t)v588;
          if (v169 == 1)
          {
            outlined destroy of UUID?(v167, &demangling cache variable for type metadata for UUID?);
            id v174 = v610;
            uint64_t v175 = v602;
LABEL_35:
            uint64_t v193 = type metadata accessor for NetworkAnalyticsEventMessage(0);
            uint64_t v194 = *(void **)&v585[*(int *)(v193 + 20)];
            if (v194)
            {
              char v195 = &v585[*(int *)(v193 + 24)];
              if ((v195[8] & 1) == 0)
              {
                uint64_t v196 = *(void *)v195;
                uint64_t v197 = v587;
                swift_beginAccess();
                uint64_t v198 = MEMORY[0x2611B37F0](v197);
                if (v198)
                {
                  uint64_t v199 = (void *)v198;
                  uint64_t v200 = *(void **)(v198 + OBJC_IVAR___SNNetworkAnalyticsInternal_siriAnalyticsMessageStream);
                  id v201 = v194;
                  swift_unknownObjectRetain();

                  objc_msgSend(v200, sel_emitMessage_timestamp_, v201, v196);
                  swift_unknownObjectRelease();
                }
                if (one-time initialization token for siriNetwork != -1) {
                  swift_once();
                }
                uint64_t v202 = type metadata accessor for Logger();
                __swift_project_value_buffer(v202, (uint64_t)static Logger.siriNetwork);
                id v203 = v174;
                uint64_t v204 = Logger.logObject.getter();
                os_log_type_t v205 = static os_log_type_t.default.getter();
                if (os_log_type_enabled(v204, v205))
                {
                  uint64_t v206 = (uint8_t *)swift_slowAlloc();
                  uint64_t v597 = swift_slowAlloc();
                  v620[0] = v597;
                  *(_DWORD *)uint64_t v206 = 136315138;
                  uint64_t v207 = (uint64_t)v203 + OBJC_IVAR___SNNetworkAnalyticsInternal_netId;
                  swift_beginAccess();
                  uint64_t v208 = v561;
                  outlined init with copy of UUID?(v207, v561);
                  uint64_t v209 = v553;
                  outlined init with copy of UUID?(v208, v553);
                  if (__swift_getEnumTagSinglePayload(v209, 1, v611) == 1)
                  {
                    uint64_t v210 = 1819047278;
                    unint64_t v211 = 0xE400000000000000;
                  }
                  else
                  {
                    char v242 = *(void (**)(char *, uint64_t, uint64_t))(v170 + 32);
                    uint64_t v243 = v604;
                    uint64_t v244 = v170;
                    uint64_t v245 = v611;
                    v242(v604, v209, v611);
                    v608(v569, v243, v245);
                    uint64_t v246 = String.init<A>(describing:)();
                    uint64_t v247 = v244;
                    uint64_t v210 = v246;
                    unint64_t v211 = v248;
                    (*(void (**)(char *, uint64_t))(v247 + 8))(v243, v245);
                  }
                  outlined destroy of UUID?(v561, &demangling cache variable for type metadata for UUID?);
                  v619[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v210, v211, v620);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();

                  swift_bridgeObjectRelease();
                  _os_log_impl(&dword_25D6CC000, v204, v205, "Network Analytics: Event preparationSnapshotEvent emitted: %s", v206, 0xCu);
                  uint64_t v249 = v597;
                  swift_arrayDestroy();
                  MEMORY[0x2611B3750](v249, -1, -1);
                  MEMORY[0x2611B3750](v206, -1, -1);

                  uint64_t v170 = v605;
                  uint64_t v7 = v606;
                  id v174 = v610;
                  uint64_t v171 = v607;
                  uint64_t v172 = (uint64_t)v592;
                  uint64_t v173 = (uint64_t)v588;
                }
                else
                {

                  uint64_t v172 = (uint64_t)v592;
                }
                goto LABEL_27;
              }
            }
LABEL_28:
            uint64_t v178 = v170;
            uint64_t v179 = v611;
            v608((char *)v173, (char *)v171, v611);
            __swift_storeEnumTagSinglePayload(v173, 0, 1, v179);
            uint64_t v180 = (uint64_t)v174 + OBJC_IVAR___SNNetworkAnalyticsInternal_debugPreparationSnapshotEvent;
            swift_beginAccess();
            outlined init with copy of UUID?(v180, v175);
            uint64_t v181 = v577;
            uint64_t v182 = v577 + *(int *)(v7 + 48);
            outlined init with copy of UUID?(v173, v577);
            outlined init with copy of UUID?(v175, v182);
            int v183 = __swift_getEnumTagSinglePayload(v181, 1, v179);
            uint64_t v597 = v180;
            if (v183 == 1)
            {
              outlined destroy of UUID?(v175, &demangling cache variable for type metadata for UUID?);
              outlined destroy of UUID?(v173, &demangling cache variable for type metadata for UUID?);
              int v184 = __swift_getEnumTagSinglePayload(v182, 1, v611);
              uint64_t v185 = (uint64_t)v599;
              if (v184 == 1)
              {
                outlined destroy of UUID?(v181, &demangling cache variable for type metadata for UUID?);
                uint64_t v186 = v607;
                uint64_t v187 = (uint64_t)v589;
LABEL_45:
                uint64_t v219 = type metadata accessor for NetworkAnalyticsEventMessage(0);
                char v220 = *(void **)(v180 + *(int *)(v219 + 20));
                if (v220)
                {
                  uint64_t v221 = v180 + *(int *)(v219 + 24);
                  if ((*(unsigned char *)(v221 + 8) & 1) == 0)
                  {
                    uint64_t v222 = v186;
                    uint64_t v223 = *(void *)v221;
                    uint64_t v224 = v587;
                    swift_beginAccess();
                    uint64_t v225 = MEMORY[0x2611B37F0](v224);
                    if (v225)
                    {
                      v226 = (void *)v225;
                      __n128 v227 = *(void **)(v225 + OBJC_IVAR___SNNetworkAnalyticsInternal_siriAnalyticsMessageStream);
                      id v228 = v220;
                      swift_unknownObjectRetain();

                      objc_msgSend(v227, sel_emitMessage_timestamp_, v228, v223);
                      swift_unknownObjectRelease();
                    }
                    if (one-time initialization token for siriNetwork != -1) {
                      swift_once();
                    }
                    uint64_t v229 = type metadata accessor for Logger();
                    __swift_project_value_buffer(v229, (uint64_t)static Logger.siriNetwork);
                    char v230 = v610;
                    long long v231 = Logger.logObject.getter();
                    os_log_type_t v232 = static os_log_type_t.default.getter();
                    if (os_log_type_enabled(v231, v232))
                    {
                      long long v233 = (uint8_t *)swift_slowAlloc();
                      uint64_t v234 = swift_slowAlloc();
                      v619[0] = v234;
                      *(_DWORD *)long long v233 = 136315138;
                      uint64_t v235 = (uint64_t)&v230[OBJC_IVAR___SNNetworkAnalyticsInternal_netId];
                      swift_beginAccess();
                      uint64_t v236 = v562;
                      outlined init with copy of UUID?(v235, v562);
                      uint64_t v237 = v554;
                      outlined init with copy of UUID?(v236, v554);
                      int v238 = __swift_getEnumTagSinglePayload(v237, 1, v611);
                      uint64_t v239 = v605;
                      if (v238 == 1)
                      {
                        uint64_t v240 = 1819047278;
                        unint64_t v241 = 0xE400000000000000;
                      }
                      else
                      {
                        char v250 = v604;
                        uint64_t v251 = v234;
                        uint64_t v252 = v611;
                        (*(void (**)(char *, uint64_t, uint64_t))(v605 + 32))(v604, v237, v611);
                        v608(v569, v250, v252);
                        uint64_t v253 = String.init<A>(describing:)();
                        uint64_t v254 = v239;
                        uint64_t v240 = v253;
                        unint64_t v241 = v255;
                        uint64_t v256 = v252;
                        uint64_t v234 = v251;
                        (*(void (**)(char *, uint64_t))(v254 + 8))(v250, v256);
                      }
                      outlined destroy of UUID?(v562, &demangling cache variable for type metadata for UUID?);
                      v618[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v240, v241, v619);
                      UnsafeMutableRawBufferPointer.copyMemory(from:)();

                      swift_bridgeObjectRelease();
                      _os_log_impl(&dword_25D6CC000, v231, v232, "Network Analytics: Event debugPreparationSnapshotEvent emitted: %s", v233, 0xCu);
                      swift_arrayDestroy();
                      MEMORY[0x2611B3750](v234, -1, -1);
                      MEMORY[0x2611B3750](v233, -1, -1);

                      uint64_t v7 = v606;
                      uint64_t v186 = v607;
                      uint64_t v187 = (uint64_t)v589;
                    }
                    else
                    {
                      uint64_t v186 = v222;
                    }
                    uint64_t v185 = (uint64_t)v599;
                  }
                }
LABEL_61:
                uint64_t v257 = v611;
                v608((char *)v187, (char *)v186, v611);
                __swift_storeEnumTagSinglePayload(v187, 0, 1, v257);
                char v258 = &v610[OBJC_IVAR___SNNetworkAnalyticsInternal_readySnapshotEvent];
                swift_beginAccess();
                outlined init with copy of UUID?((uint64_t)v258, v185);
                uint64_t v259 = v578;
                uint64_t v260 = v578 + *(int *)(v7 + 48);
                outlined init with copy of UUID?(v187, v578);
                outlined init with copy of UUID?(v185, v260);
                int v261 = __swift_getEnumTagSinglePayload(v259, 1, v257);
                v592 = v258;
                if (v261 == 1)
                {
                  outlined destroy of UUID?(v185, &demangling cache variable for type metadata for UUID?);
                  outlined destroy of UUID?(v187, &demangling cache variable for type metadata for UUID?);
                  if (__swift_getEnumTagSinglePayload(v260, 1, v611) == 1)
                  {
                    outlined destroy of UUID?(v259, &demangling cache variable for type metadata for UUID?);
LABEL_68:
                    uint64_t v272 = type metadata accessor for NetworkAnalyticsEventMessage(0);
                    long long v273 = *(void **)&v258[*(int *)(v272 + 20)];
                    if (v273)
                    {
                      long long v274 = &v258[*(int *)(v272 + 24)];
                      if ((v274[8] & 1) == 0)
                      {
                        uint64_t v275 = v186;
                        uint64_t v276 = *(void *)v274;
                        uint64_t v277 = v587;
                        swift_beginAccess();
                        uint64_t v278 = MEMORY[0x2611B37F0](v277);
                        if (v278)
                        {
                          v279 = (void *)v278;
                          long long v280 = *(void **)(v278 + OBJC_IVAR___SNNetworkAnalyticsInternal_siriAnalyticsMessageStream);
                          id v281 = v273;
                          swift_unknownObjectRetain();

                          objc_msgSend(v280, sel_emitMessage_timestamp_, v281, v276);
                          swift_unknownObjectRelease();
                        }
                        if (one-time initialization token for siriNetwork != -1) {
                          swift_once();
                        }
                        uint64_t v282 = type metadata accessor for Logger();
                        __swift_project_value_buffer(v282, (uint64_t)static Logger.siriNetwork);
                        char v283 = v610;
                        uint64_t v284 = Logger.logObject.getter();
                        os_log_type_t v285 = static os_log_type_t.default.getter();
                        if (os_log_type_enabled(v284, v285))
                        {
                          uint64_t v286 = (uint8_t *)swift_slowAlloc();
                          uint64_t v287 = swift_slowAlloc();
                          v618[0] = v287;
                          *(_DWORD *)uint64_t v286 = 136315138;
                          uint64_t v288 = (uint64_t)&v283[OBJC_IVAR___SNNetworkAnalyticsInternal_netId];
                          swift_beginAccess();
                          uint64_t v289 = v563;
                          outlined init with copy of UUID?(v288, v563);
                          uint64_t v290 = v555;
                          outlined init with copy of UUID?(v289, v555);
                          int v291 = __swift_getEnumTagSinglePayload(v290, 1, v611);
                          uint64_t v292 = v605;
                          if (v291 == 1)
                          {
                            uint64_t v293 = 1819047278;
                            unint64_t v294 = 0xE400000000000000;
                          }
                          else
                          {
                            char v295 = v604;
                            uint64_t v296 = v287;
                            uint64_t v297 = v611;
                            (*(void (**)(char *, uint64_t, uint64_t))(v605 + 32))(v604, v290, v611);
                            v608(v569, v295, v297);
                            uint64_t v298 = String.init<A>(describing:)();
                            uint64_t v299 = v292;
                            uint64_t v293 = v298;
                            unint64_t v294 = v300;
                            uint64_t v301 = v297;
                            uint64_t v287 = v296;
                            (*(void (**)(char *, uint64_t))(v299 + 8))(v295, v301);
                          }
                          outlined destroy of UUID?(v563, &demangling cache variable for type metadata for UUID?);
                          v617[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v293, v294, v618);
                          UnsafeMutableRawBufferPointer.copyMemory(from:)();

                          swift_bridgeObjectRelease();
                          _os_log_impl(&dword_25D6CC000, v284, v285, "Network Analytics: Event readySnapshotEvent emitted: %s", v286, 0xCu);
                          swift_arrayDestroy();
                          MEMORY[0x2611B3750](v287, -1, -1);
                          MEMORY[0x2611B3750](v286, -1, -1);

                          uint64_t v7 = v606;
                          uint64_t v186 = v607;
                        }
                        else
                        {
                          uint64_t v186 = v275;
                        }
                      }
                    }
LABEL_80:
                    uint64_t v302 = (uint64_t)v603;
                    uint64_t v303 = v611;
                    v608(v603, (char *)v186, v611);
                    __swift_storeEnumTagSinglePayload(v302, 0, 1, v303);
                    char v304 = &v610[OBJC_IVAR___SNNetworkAnalyticsInternal_debugReadySnapshotEvent];
                    swift_beginAccess();
                    uint64_t v602 = (uint64_t)v304;
                    uint64_t v305 = v579;
                    outlined init with copy of UUID?((uint64_t)v304, v579);
                    uint64_t v306 = v580;
                    uint64_t v307 = v580 + *(int *)(v7 + 48);
                    outlined init with copy of UUID?(v302, v580);
                    outlined init with copy of UUID?(v305, v307);
                    if (__swift_getEnumTagSinglePayload(v306, 1, v303) == 1)
                    {
                      outlined destroy of UUID?(v305, &demangling cache variable for type metadata for UUID?);
                      outlined destroy of UUID?((uint64_t)v603, &demangling cache variable for type metadata for UUID?);
                      int v308 = __swift_getEnumTagSinglePayload(v307, 1, v611);
                      uint64_t v309 = (uint64_t)v594;
                      if (v308 == 1)
                      {
                        outlined destroy of UUID?(v306, &demangling cache variable for type metadata for UUID?);
                        uint64_t v310 = (uint64_t)v595;
                        uint64_t v311 = (uint64_t)v593;
LABEL_87:
                        uint64_t v320 = type metadata accessor for NetworkAnalyticsEventMessage(0);
                        uint64_t v321 = *(void **)(v602 + *(int *)(v320 + 20));
                        if (v321)
                        {
                          uint64_t v322 = (uint64_t *)(v602 + *(int *)(v320 + 24));
                          if ((v322[1] & 1) == 0)
                          {
                            uint64_t v323 = v186;
                            uint64_t v324 = *v322;
                            uint64_t v325 = v587;
                            swift_beginAccess();
                            uint64_t v326 = MEMORY[0x2611B37F0](v325);
                            if (v326)
                            {
                              uint64_t v327 = (void *)v326;
                              char v328 = *(void **)(v326 + OBJC_IVAR___SNNetworkAnalyticsInternal_siriAnalyticsMessageStream);
                              id v329 = v321;
                              swift_unknownObjectRetain();

                              objc_msgSend(v328, sel_emitMessage_timestamp_, v329, v324);
                              swift_unknownObjectRelease();
                            }
                            if (one-time initialization token for siriNetwork != -1) {
                              swift_once();
                            }
                            uint64_t v330 = type metadata accessor for Logger();
                            __swift_project_value_buffer(v330, (uint64_t)static Logger.siriNetwork);
                            v331 = v610;
                            v332 = Logger.logObject.getter();
                            os_log_type_t v333 = static os_log_type_t.default.getter();
                            if (os_log_type_enabled(v332, v333))
                            {
                              v334 = (uint8_t *)swift_slowAlloc();
                              uint64_t v335 = swift_slowAlloc();
                              v617[0] = v335;
                              *(_DWORD *)v334 = 136315138;
                              v336 = &v331[OBJC_IVAR___SNNetworkAnalyticsInternal_netId];
                              swift_beginAccess();
                              uint64_t v337 = (uint64_t)v336;
                              uint64_t v338 = v564;
                              outlined init with copy of UUID?(v337, v564);
                              uint64_t v339 = v338;
                              uint64_t v340 = v556;
                              outlined init with copy of UUID?(v339, v556);
                              if (__swift_getEnumTagSinglePayload(v340, 1, v611) == 1)
                              {
                                uint64_t v341 = 1819047278;
                                unint64_t v342 = 0xE400000000000000;
                              }
                              else
                              {
                                v343 = v604;
                                uint64_t v344 = v605;
                                uint64_t v345 = v335;
                                uint64_t v346 = v611;
                                (*(void (**)(char *, uint64_t, uint64_t))(v605 + 32))(v604, v340, v611);
                                v608(v569, v343, v346);
                                uint64_t v347 = String.init<A>(describing:)();
                                uint64_t v348 = v344;
                                uint64_t v341 = v347;
                                unint64_t v342 = v349;
                                uint64_t v350 = v346;
                                uint64_t v335 = v345;
                                (*(void (**)(char *, uint64_t))(v348 + 8))(v343, v350);
                              }
                              outlined destroy of UUID?(v564, &demangling cache variable for type metadata for UUID?);
                              v616[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v341, v342, v617);
                              UnsafeMutableRawBufferPointer.copyMemory(from:)();

                              swift_bridgeObjectRelease();
                              _os_log_impl(&dword_25D6CC000, v332, v333, "Network Analytics: Event debugReadySnapshotEvent emitted: %s", v334, 0xCu);
                              swift_arrayDestroy();
                              MEMORY[0x2611B3750](v335, -1, -1);
                              MEMORY[0x2611B3750](v334, -1, -1);

                              uint64_t v186 = v607;
                              uint64_t v310 = (uint64_t)v595;
                            }
                            else
                            {
                              uint64_t v186 = v323;
                            }
                            uint64_t v311 = (uint64_t)v593;
                            uint64_t v309 = (uint64_t)v594;
                          }
                        }
LABEL_100:
                        uint64_t v351 = (uint64_t)v601;
                        uint64_t v352 = v611;
                        v608((char *)v601, (char *)v186, v611);
                        __swift_storeEnumTagSinglePayload(v351, 0, 1, v352);
                        v353 = &v610[OBJC_IVAR___SNNetworkAnalyticsInternal_sessionConnectionSnapthotEvent];
                        swift_beginAccess();
                        v603 = v353;
                        outlined init with copy of UUID?((uint64_t)v353, v311);
                        uint64_t v354 = v581;
                        uint64_t v355 = v581 + *(int *)(v606 + 48);
                        outlined init with copy of UUID?(v351, v581);
                        outlined init with copy of UUID?(v311, v355);
                        if (__swift_getEnumTagSinglePayload(v354, 1, v352) == 1)
                        {
                          outlined destroy of UUID?(v311, &demangling cache variable for type metadata for UUID?);
                          outlined destroy of UUID?(v351, &demangling cache variable for type metadata for UUID?);
                          int v356 = __swift_getEnumTagSinglePayload(v355, 1, v611);
                          v357 = v600;
                          uint64_t v358 = (uint64_t)v590;
                          if (v356 == 1)
                          {
                            outlined destroy of UUID?(v354, &demangling cache variable for type metadata for UUID?);
                            uint64_t v359 = (uint64_t)v357;
LABEL_107:
                            uint64_t v368 = type metadata accessor for NetworkAnalyticsEventMessage(0);
                            v369 = *(void **)&v603[*(int *)(v368 + 20)];
                            if (v369)
                            {
                              v370 = &v603[*(int *)(v368 + 24)];
                              if ((v370[8] & 1) == 0)
                              {
                                uint64_t v371 = v186;
                                uint64_t v372 = *(void *)v370;
                                uint64_t v373 = v587;
                                swift_beginAccess();
                                uint64_t v374 = MEMORY[0x2611B37F0](v373);
                                if (v374)
                                {
                                  v375 = (void *)v374;
                                  v376 = *(void **)(v374
                                                  + OBJC_IVAR___SNNetworkAnalyticsInternal_siriAnalyticsMessageStream);
                                  id v377 = v369;
                                  swift_unknownObjectRetain();

                                  objc_msgSend(v376, sel_emitMessage_timestamp_, v377, v372);
                                  swift_unknownObjectRelease();
                                }
                                if (one-time initialization token for siriNetwork != -1) {
                                  swift_once();
                                }
                                uint64_t v378 = type metadata accessor for Logger();
                                __swift_project_value_buffer(v378, (uint64_t)static Logger.siriNetwork);
                                v379 = v610;
                                v380 = Logger.logObject.getter();
                                os_log_type_t v381 = static os_log_type_t.default.getter();
                                if (os_log_type_enabled(v380, v381))
                                {
                                  v382 = (uint8_t *)swift_slowAlloc();
                                  uint64_t v383 = swift_slowAlloc();
                                  v616[0] = v383;
                                  *(_DWORD *)v382 = 136315138;
                                  uint64_t v384 = (uint64_t)&v379[OBJC_IVAR___SNNetworkAnalyticsInternal_netId];
                                  swift_beginAccess();
                                  uint64_t v385 = v565;
                                  outlined init with copy of UUID?(v384, v565);
                                  uint64_t v386 = v557;
                                  outlined init with copy of UUID?(v385, v557);
                                  if (__swift_getEnumTagSinglePayload(v386, 1, v611) == 1)
                                  {
                                    uint64_t v387 = 1819047278;
                                    unint64_t v388 = 0xE400000000000000;
                                  }
                                  else
                                  {
                                    v389 = v604;
                                    uint64_t v390 = v605;
                                    uint64_t v391 = v611;
                                    (*(void (**)(char *, uint64_t, uint64_t))(v605 + 32))(v604, v386, v611);
                                    v608(v569, v389, v391);
                                    uint64_t v392 = String.init<A>(describing:)();
                                    uint64_t v393 = v390;
                                    uint64_t v387 = v392;
                                    unint64_t v388 = v394;
                                    (*(void (**)(char *, uint64_t))(v393 + 8))(v389, v391);
                                  }
                                  outlined destroy of UUID?(v565, &demangling cache variable for type metadata for UUID?);
                                  v615[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v387, v388, v616);
                                  UnsafeMutableRawBufferPointer.copyMemory(from:)();

                                  swift_bridgeObjectRelease();
                                  _os_log_impl(&dword_25D6CC000, v380, v381, "Network Analytics: Event sessionConnectionSnapthotEvent emitted: %s", v382, 0xCu);
                                  swift_arrayDestroy();
                                  MEMORY[0x2611B3750](v383, -1, -1);
                                  MEMORY[0x2611B3750](v382, -1, -1);

                                  uint64_t v186 = v607;
                                  uint64_t v359 = (uint64_t)v600;
                                  uint64_t v310 = (uint64_t)v595;
                                  uint64_t v358 = (uint64_t)v590;
                                }
                                else
                                {

                                  uint64_t v359 = (uint64_t)v600;
                                  uint64_t v186 = v371;
                                }
                              }
                            }
LABEL_119:
                            uint64_t v395 = v611;
                            v608((char *)v358, (char *)v186, v611);
                            __swift_storeEnumTagSinglePayload(v358, 0, 1, v395);
                            v396 = &v610[OBJC_IVAR___SNNetworkAnalyticsInternal_debugSessionConnectionSnapthotEvent];
                            swift_beginAccess();
                            outlined init with copy of UUID?((uint64_t)v396, v310);
                            uint64_t v397 = v582;
                            uint64_t v398 = v582 + *(int *)(v606 + 48);
                            outlined init with copy of UUID?(v358, v582);
                            outlined init with copy of UUID?(v310, v398);
                            if (__swift_getEnumTagSinglePayload(v397, 1, v395) == 1)
                            {
                              outlined destroy of UUID?(v310, &demangling cache variable for type metadata for UUID?);
                              outlined destroy of UUID?(v358, &demangling cache variable for type metadata for UUID?);
                              if (__swift_getEnumTagSinglePayload(v398, 1, v611) == 1)
                              {
                                outlined destroy of UUID?(v397, &demangling cache variable for type metadata for UUID?);
                                uint64_t v399 = (uint64_t)v596;
LABEL_126:
                                uint64_t v405 = type metadata accessor for NetworkAnalyticsEventMessage(0);
                                v406 = *(void **)&v396[*(int *)(v405 + 20)];
                                if (v406)
                                {
                                  v407 = &v396[*(int *)(v405 + 24)];
                                  if ((v407[8] & 1) == 0)
                                  {
                                    uint64_t v408 = *(void *)v407;
                                    uint64_t v409 = v587;
                                    swift_beginAccess();
                                    uint64_t v410 = MEMORY[0x2611B37F0](v409);
                                    if (v410)
                                    {
                                      v411 = (void *)v410;
                                      v412 = *(void **)(v410
                                                      + OBJC_IVAR___SNNetworkAnalyticsInternal_siriAnalyticsMessageStream);
                                      id v413 = v406;
                                      swift_unknownObjectRetain();

                                      objc_msgSend(v412, sel_emitMessage_timestamp_, v413, v408);
                                      swift_unknownObjectRelease();
                                    }
                                    if (one-time initialization token for siriNetwork != -1) {
                                      swift_once();
                                    }
                                    uint64_t v414 = type metadata accessor for Logger();
                                    __swift_project_value_buffer(v414, (uint64_t)static Logger.siriNetwork);
                                    v415 = v610;
                                    v416 = Logger.logObject.getter();
                                    LODWORD(v417) = static os_log_type_t.default.getter();
                                    if (os_log_type_enabled(v416, (os_log_type_t)v417))
                                    {
                                      v418 = (uint8_t *)swift_slowAlloc();
                                      uint64_t v419 = swift_slowAlloc();
                                      v615[0] = v419;
                                      *(_DWORD *)v418 = 136315138;
                                      uint64_t v420 = (uint64_t)&v415[OBJC_IVAR___SNNetworkAnalyticsInternal_netId];
                                      swift_beginAccess();
                                      uint64_t v421 = v566;
                                      outlined init with copy of UUID?(v420, v566);
                                      uint64_t v422 = v558;
                                      outlined init with copy of UUID?(v421, v558);
                                      if (__swift_getEnumTagSinglePayload(v422, 1, v611) == 1)
                                      {
                                        uint64_t v423 = 1819047278;
                                        unint64_t v424 = 0xE400000000000000;
                                      }
                                      else
                                      {
                                        uint64_t v425 = v419;
                                        v426 = v396;
                                        v428 = v604;
                                        uint64_t v427 = v605;
                                        v429 = *(void (**)(char *, uint64_t, uint64_t))(v605 + 32);
                                        LODWORD(v601) = v417;
                                        uint64_t v417 = v611;
                                        v429(v604, v422, v611);
                                        v608(v569, v428, v417);
                                        uint64_t v423 = String.init<A>(describing:)();
                                        uint64_t v430 = v427;
                                        v396 = v426;
                                        uint64_t v419 = v425;
                                        unint64_t v424 = v431;
                                        uint64_t v432 = v417;
                                        LOBYTE(v417) = (_BYTE)v601;
                                        (*(void (**)(char *, uint64_t))(v430 + 8))(v428, v432);
                                      }
                                      outlined destroy of UUID?(v566, &demangling cache variable for type metadata for UUID?);
                                      v614[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v423, v424, v615);
                                      UnsafeMutableRawBufferPointer.copyMemory(from:)();

                                      swift_bridgeObjectRelease();
                                      _os_log_impl(&dword_25D6CC000, v416, (os_log_type_t)v417, "Network Analytics: Event debugSessionConnectionSnapthotEvent emitted: %s", v418, 0xCu);
                                      swift_arrayDestroy();
                                      MEMORY[0x2611B3750](v419, -1, -1);
                                      MEMORY[0x2611B3750](v418, -1, -1);

                                      uint64_t v186 = v607;
                                    }
                                    else
                                    {
                                    }
                                    uint64_t v399 = (uint64_t)v596;
                                    uint64_t v359 = (uint64_t)v600;
                                  }
                                }
LABEL_139:
                                uint64_t v433 = v611;
                                v608((char *)v399, (char *)v186, v611);
                                __swift_storeEnumTagSinglePayload(v399, 0, 1, v433);
                                id v434 = v610;
                                v435 = &v610[OBJC_IVAR___SNNetworkAnalyticsInternal_sessionConnectionFailedEvent];
                                swift_beginAccess();
                                outlined init with copy of UUID?((uint64_t)v435, v359);
                                uint64_t v436 = v583;
                                uint64_t v437 = v583 + *(int *)(v606 + 48);
                                outlined init with copy of UUID?(v399, v583);
                                outlined init with copy of UUID?(v359, v437);
                                if (__swift_getEnumTagSinglePayload(v436, 1, v433) == 1)
                                {
                                  outlined destroy of UUID?(v359, &demangling cache variable for type metadata for UUID?);
                                  outlined destroy of UUID?(v399, &demangling cache variable for type metadata for UUID?);
                                  int v438 = __swift_getEnumTagSinglePayload(v437, 1, v611);
                                  uint64_t v439 = (uint64_t)v574;
                                  if (v438 == 1)
                                  {
                                    outlined destroy of UUID?(v436, &demangling cache variable for type metadata for UUID?);
                                    uint64_t v440 = (uint64_t)v591;
                                    uint64_t v441 = v598;
LABEL_147:
                                    uint64_t v453 = type metadata accessor for NetworkAnalyticsEventMessage(0);
                                    v454 = *(void **)&v435[*(int *)(v453 + 20)];
                                    if (v454)
                                    {
                                      v455 = &v435[*(int *)(v453 + 24)];
                                      if ((v455[8] & 1) == 0)
                                      {
                                        v601 = (uint8_t *)v435;
                                        uint64_t v456 = *(void *)v455;
                                        uint64_t v457 = v587;
                                        swift_beginAccess();
                                        uint64_t v458 = MEMORY[0x2611B37F0](v457);
                                        if (v458)
                                        {
                                          v459 = (void *)v458;
                                          v460 = *(void **)(v458
                                                          + OBJC_IVAR___SNNetworkAnalyticsInternal_siriAnalyticsMessageStream);
                                          id v461 = v454;
                                          swift_unknownObjectRetain();

                                          objc_msgSend(v460, sel_emitMessage_timestamp_, v461, v456);
                                          id v434 = v610;
                                          swift_unknownObjectRelease();
                                        }
                                        if (one-time initialization token for siriNetwork != -1) {
                                          swift_once();
                                        }
                                        uint64_t v462 = type metadata accessor for Logger();
                                        __swift_project_value_buffer(v462, (uint64_t)static Logger.siriNetwork);
                                        id v463 = v434;
                                        v464 = Logger.logObject.getter();
                                        int v465 = static os_log_type_t.default.getter();
                                        if (os_log_type_enabled(v464, (os_log_type_t)v465))
                                        {
                                          LODWORD(v600) = v465;
                                          v466 = (uint8_t *)swift_slowAlloc();
                                          uint64_t v467 = swift_slowAlloc();
                                          v614[0] = v467;
                                          *(_DWORD *)v466 = 136315138;
                                          uint64_t v468 = (uint64_t)v463 + OBJC_IVAR___SNNetworkAnalyticsInternal_netId;
                                          swift_beginAccess();
                                          uint64_t v469 = v567;
                                          outlined init with copy of UUID?(v468, v567);
                                          uint64_t v470 = v559;
                                          outlined init with copy of UUID?(v469, v559);
                                          if (__swift_getEnumTagSinglePayload(v470, 1, v611) == 1)
                                          {
                                            uint64_t v471 = 1819047278;
                                            unint64_t v472 = 0xE400000000000000;
                                          }
                                          else
                                          {
                                            uint64_t v512 = v467;
                                            v513 = v396;
                                            v514 = v604;
                                            uint64_t v515 = v605;
                                            v516 = *(void (**)(char *, uint64_t, uint64_t))(v605 + 32);
                                            v599 = v464;
                                            uint64_t v517 = v439;
                                            uint64_t v518 = v611;
                                            v516(v604, v470, v611);
                                            v608(v569, v514, v518);
                                            uint64_t v471 = String.init<A>(describing:)();
                                            uint64_t v519 = v515;
                                            v396 = v513;
                                            uint64_t v467 = v512;
                                            unint64_t v472 = v520;
                                            uint64_t v521 = v518;
                                            uint64_t v439 = v517;
                                            v464 = v599;
                                            (*(void (**)(char *, uint64_t))(v519 + 8))(v514, v521);
                                          }
                                          outlined destroy of UUID?(v567, &demangling cache variable for type metadata for UUID?);
                                          v613[1] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v471, v472, v614);
                                          UnsafeMutableRawBufferPointer.copyMemory(from:)();

                                          swift_bridgeObjectRelease();
                                          _os_log_impl(&dword_25D6CC000, v464, (os_log_type_t)v600, "Network Analytics: Event sessionConnectionFailedEvent emitted: %s", v466, 0xCu);
                                          swift_arrayDestroy();
                                          MEMORY[0x2611B3750](v467, -1, -1);
                                          MEMORY[0x2611B3750](v466, -1, -1);

                                          id v434 = v610;
                                          uint64_t v440 = (uint64_t)v591;
                                          v435 = (char *)v601;
                                          goto LABEL_145;
                                        }

                                        v435 = (char *)v601;
                                      }
                                    }
LABEL_157:
                                    uint64_t v473 = v611;
                                    v608((char *)v440, (char *)v607, v611);
                                    __swift_storeEnumTagSinglePayload(v440, 0, 1, v473);
                                    uint64_t v474 = (uint64_t)v434
                                         + OBJC_IVAR___SNNetworkAnalyticsInternal_peerConnectionFailedEvent;
                                    swift_beginAccess();
                                    uint64_t v607 = v474;
                                    outlined init with copy of UUID?(v474, v441);
                                    uint64_t v475 = v584;
                                    uint64_t v476 = v584 + *(int *)(v606 + 48);
                                    outlined init with copy of UUID?(v440, v584);
                                    outlined init with copy of UUID?(v441, v476);
                                    if (__swift_getEnumTagSinglePayload(v475, 1, v473) == 1)
                                    {
                                      outlined destroy of UUID?(v441, &demangling cache variable for type metadata for UUID?);
                                      id v434 = v610;
                                      outlined destroy of UUID?(v440, &demangling cache variable for type metadata for UUID?);
                                      if (__swift_getEnumTagSinglePayload(v476, 1, v611) == 1)
                                      {
                                        outlined destroy of UUID?(v475, &demangling cache variable for type metadata for UUID?);
                                        uint64_t v477 = v607;
LABEL_164:
                                        uint64_t v488 = type metadata accessor for NetworkAnalyticsEventMessage(0);
                                        v489 = *(void **)(v477 + *(int *)(v488 + 20));
                                        if (v489)
                                        {
                                          v490 = (uint64_t *)(v477 + *(int *)(v488 + 24));
                                          if ((v490[1] & 1) == 0)
                                          {
                                            v491 = v396;
                                            uint64_t v492 = *v490;
                                            uint64_t v493 = v587;
                                            swift_beginAccess();
                                            uint64_t v494 = MEMORY[0x2611B37F0](v493);
                                            if (v494)
                                            {
                                              v495 = (void *)v494;
                                              v496 = *(void **)(v494
                                                              + OBJC_IVAR___SNNetworkAnalyticsInternal_siriAnalyticsMessageStream);
                                              id v497 = v489;
                                              swift_unknownObjectRetain();

                                              objc_msgSend(v496, sel_emitMessage_timestamp_, v497, v492);
                                              swift_unknownObjectRelease();
                                            }
                                            if (one-time initialization token for siriNetwork != -1) {
                                              swift_once();
                                            }
                                            uint64_t v498 = type metadata accessor for Logger();
                                            __swift_project_value_buffer(v498, (uint64_t)static Logger.siriNetwork);
                                            v499 = v610;
                                            v500 = Logger.logObject.getter();
                                            int v501 = static os_log_type_t.default.getter();
                                            BOOL v502 = os_log_type_enabled(v500, (os_log_type_t)v501);
                                            uint64_t v503 = v605;
                                            v396 = v491;
                                            if (v502)
                                            {
                                              LODWORD(v607) = v501;
                                              v504 = (uint8_t *)swift_slowAlloc();
                                              uint64_t v606 = swift_slowAlloc();
                                              v613[0] = v606;
                                              *(_DWORD *)v504 = 136315138;
                                              v505 = &v499[OBJC_IVAR___SNNetworkAnalyticsInternal_netId];
                                              swift_beginAccess();
                                              uint64_t v506 = (uint64_t)v505;
                                              uint64_t v507 = v568;
                                              outlined init with copy of UUID?(v506, v568);
                                              uint64_t v508 = v507;
                                              uint64_t v509 = v560;
                                              outlined init with copy of UUID?(v508, v560);
                                              if (__swift_getEnumTagSinglePayload(v509, 1, v611) == 1)
                                              {
                                                uint64_t v510 = 1819047278;
                                                unint64_t v511 = 0xE400000000000000;
                                              }
                                              else
                                              {
                                                v522 = *(void (**)(char *, uint64_t, uint64_t))(v503 + 32);
                                                v601 = v504;
                                                v523 = v500;
                                                v524 = v604;
                                                uint64_t v525 = v611;
                                                v522(v604, v509, v611);
                                                v608(v569, v524, v525);
                                                uint64_t v510 = String.init<A>(describing:)();
                                                uint64_t v526 = v503;
                                                unint64_t v511 = v527;
                                                v528 = v524;
                                                v500 = v523;
                                                v504 = v601;
                                                (*(void (**)(char *, uint64_t))(v526 + 8))(v528, v525);
                                              }
                                              outlined destroy of UUID?(v568, &demangling cache variable for type metadata for UUID?);
                                              uint64_t v612 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v510, v511, v613);
                                              UnsafeMutableRawBufferPointer.copyMemory(from:)();

                                              swift_bridgeObjectRelease();
                                              _os_log_impl(&dword_25D6CC000, v500, (os_log_type_t)v607, "Network Analytics: Event peerConnectionFailedEvent emitted: %s", v504, 0xCu);
                                              uint64_t v529 = v606;
                                              swift_arrayDestroy();
                                              MEMORY[0x2611B3750](v529, -1, -1);
                                              MEMORY[0x2611B3750](v504, -1, -1);
                                            }
                                            else
                                            {
                                            }
                                            id v434 = v610;
                                          }
                                        }
                                        goto LABEL_179;
                                      }
                                    }
                                    else
                                    {
                                      outlined init with copy of UUID?(v475, v439);
                                      if (__swift_getEnumTagSinglePayload(v476, 1, v611) != 1)
                                      {
                                        v478 = v604;
                                        uint64_t v479 = v605;
                                        uint64_t v480 = v476;
                                        uint64_t v481 = v611;
                                        (*(void (**)(char *, uint64_t, uint64_t))(v605 + 32))(v604, v480, v611);
                                        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
                                        LODWORD(v606) = dispatch thunk of static Equatable.== infix(_:_:)();
                                        uint64_t v482 = v439;
                                        v483 = v435;
                                        v484 = v396;
                                        uint64_t v485 = v482;
                                        v486 = *(void (**)(char *, uint64_t))(v479 + 8);
                                        v486(v478, v481);
                                        outlined destroy of UUID?(v598, &demangling cache variable for type metadata for UUID?);
                                        outlined destroy of UUID?(v440, &demangling cache variable for type metadata for UUID?);
                                        uint64_t v487 = v485;
                                        v396 = v484;
                                        v435 = v483;
                                        v486((char *)v487, v481);
                                        id v434 = v610;
                                        outlined destroy of UUID?(v475, &demangling cache variable for type metadata for UUID?);
                                        uint64_t v477 = v607;
                                        if (v606) {
                                          goto LABEL_164;
                                        }
LABEL_179:
                                        uint64_t v530 = type metadata accessor for NetworkAnalyticsEventMessage(0);
                                        uint64_t v531 = *(int *)(v530 + 20);
                                        v532 = *(void **)(v586 + v531);
                                        *(void *)(v586 + v531) = 0;

                                        uint64_t v533 = *(int *)(v530 + 20);
                                        v534 = *(void **)&v585[v533];
                                        *(void *)&v585[v533] = 0;

                                        uint64_t v535 = *(int *)(v530 + 20);
                                        v536 = *(void **)(v597 + v535);
                                        *(void *)(v597 + v535) = 0;

                                        uint64_t v537 = *(int *)(v530 + 20);
                                        v538 = *(void **)&v592[v537];
                                        *(void *)&v592[v537] = 0;

                                        uint64_t v539 = *(int *)(v530 + 20);
                                        v540 = *(void **)(v602 + v539);
                                        *(void *)(v602 + v539) = 0;

                                        uint64_t v541 = *(int *)(v530 + 20);
                                        v542 = *(void **)&v603[v541];
                                        *(void *)&v603[v541] = 0;

                                        uint64_t v543 = *(int *)(v530 + 20);
                                        v544 = *(void **)&v396[v543];
                                        *(void *)&v396[v543] = 0;

                                        uint64_t v545 = *(int *)(v530 + 20);
                                        v546 = *(void **)&v435[v545];
                                        *(void *)&v435[v545] = 0;

                                        uint64_t v547 = *(int *)(v530 + 20);
                                        v548 = *(void **)(v477 + v547);
                                        *(void *)(v477 + v547) = 0;

                                        return;
                                      }
                                      outlined destroy of UUID?(v441, &demangling cache variable for type metadata for UUID?);
                                      outlined destroy of UUID?(v440, &demangling cache variable for type metadata for UUID?);
                                      (*(void (**)(uint64_t, uint64_t))(v605 + 8))(v439, v611);
                                    }
                                    outlined destroy of UUID?(v475, &demangling cache variable for type metadata for (UUID?, UUID?));
                                    uint64_t v477 = v607;
                                    goto LABEL_179;
                                  }
                                }
                                else
                                {
                                  uint64_t v442 = v573;
                                  outlined init with copy of UUID?(v436, v573);
                                  if (__swift_getEnumTagSinglePayload(v437, 1, v611) != 1)
                                  {
                                    uint64_t v443 = v605;
                                    v444 = *(void (**)(char *, uint64_t, uint64_t))(v605 + 32);
                                    v601 = (uint8_t *)v435;
                                    v445 = v604;
                                    uint64_t v446 = v611;
                                    v444(v604, v437, v611);
                                    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
                                    LODWORD(v599) = dispatch thunk of static Equatable.== infix(_:_:)();
                                    v447 = v396;
                                    uint64_t v448 = v442;
                                    uint64_t v449 = v359;
                                    uint64_t v450 = v436;
                                    v451 = *(void (**)(char *, uint64_t))(v443 + 8);
                                    v451(v445, v446);
                                    outlined destroy of UUID?(v449, &demangling cache variable for type metadata for UUID?);
                                    outlined destroy of UUID?(v399, &demangling cache variable for type metadata for UUID?);
                                    uint64_t v452 = v448;
                                    v396 = v447;
                                    v451((char *)v452, v446);
                                    id v434 = v610;
                                    v435 = (char *)v601;
                                    outlined destroy of UUID?(v450, &demangling cache variable for type metadata for UUID?);
                                    uint64_t v439 = (uint64_t)v574;
                                    uint64_t v440 = (uint64_t)v591;
                                    uint64_t v441 = v598;
                                    if ((v599 & 1) == 0) {
                                      goto LABEL_157;
                                    }
                                    goto LABEL_147;
                                  }
                                  outlined destroy of UUID?(v359, &demangling cache variable for type metadata for UUID?);
                                  outlined destroy of UUID?(v399, &demangling cache variable for type metadata for UUID?);
                                  (*(void (**)(uint64_t, uint64_t))(v605 + 8))(v442, v611);
                                  uint64_t v439 = (uint64_t)v574;
                                }
                                outlined destroy of UUID?(v436, &demangling cache variable for type metadata for (UUID?, UUID?));
                                uint64_t v440 = (uint64_t)v591;
LABEL_145:
                                uint64_t v441 = v598;
                                goto LABEL_157;
                              }
                            }
                            else
                            {
                              uint64_t v400 = v572;
                              outlined init with copy of UUID?(v397, v572);
                              if (__swift_getEnumTagSinglePayload(v398, 1, v611) != 1)
                              {
                                v402 = v604;
                                uint64_t v401 = v605;
                                uint64_t v403 = v611;
                                (*(void (**)(char *, uint64_t, uint64_t))(v605 + 32))(v604, v398, v611);
                                lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
                                LODWORD(v601) = dispatch thunk of static Equatable.== infix(_:_:)();
                                v404 = *(void (**)(char *, uint64_t))(v401 + 8);
                                v404(v402, v403);
                                outlined destroy of UUID?(v310, &demangling cache variable for type metadata for UUID?);
                                outlined destroy of UUID?(v358, &demangling cache variable for type metadata for UUID?);
                                uint64_t v186 = v607;
                                v404((char *)v400, v403);
                                uint64_t v359 = (uint64_t)v600;
                                outlined destroy of UUID?(v397, &demangling cache variable for type metadata for UUID?);
                                uint64_t v399 = (uint64_t)v596;
                                if ((v601 & 1) == 0) {
                                  goto LABEL_139;
                                }
                                goto LABEL_126;
                              }
                              outlined destroy of UUID?(v310, &demangling cache variable for type metadata for UUID?);
                              outlined destroy of UUID?(v358, &demangling cache variable for type metadata for UUID?);
                              (*(void (**)(uint64_t, uint64_t))(v605 + 8))(v400, v611);
                            }
                            outlined destroy of UUID?(v397, &demangling cache variable for type metadata for (UUID?, UUID?));
                            uint64_t v399 = (uint64_t)v596;
                            goto LABEL_139;
                          }
                        }
                        else
                        {
                          outlined init with copy of UUID?(v354, v309);
                          if (__swift_getEnumTagSinglePayload(v355, 1, v611) != 1)
                          {
                            uint64_t v360 = v310;
                            uint64_t v361 = v309;
                            v363 = v604;
                            uint64_t v362 = v605;
                            uint64_t v364 = v611;
                            (*(void (**)(char *, uint64_t, uint64_t))(v605 + 32))(v604, v355, v611);
                            lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
                            LODWORD(v599) = dispatch thunk of static Equatable.== infix(_:_:)();
                            uint64_t v365 = v360;
                            uint64_t v366 = v361;
                            v367 = *(void (**)(char *, uint64_t))(v362 + 8);
                            v367(v363, v364);
                            outlined destroy of UUID?(v311, &demangling cache variable for type metadata for UUID?);
                            uint64_t v310 = v365;
                            outlined destroy of UUID?((uint64_t)v601, &demangling cache variable for type metadata for UUID?);
                            v367((char *)v366, v364);
                            uint64_t v186 = v607;
                            outlined destroy of UUID?(v354, &demangling cache variable for type metadata for UUID?);
                            uint64_t v359 = (uint64_t)v600;
                            uint64_t v358 = (uint64_t)v590;
                            if ((v599 & 1) == 0) {
                              goto LABEL_119;
                            }
                            goto LABEL_107;
                          }
                          outlined destroy of UUID?(v311, &demangling cache variable for type metadata for UUID?);
                          outlined destroy of UUID?((uint64_t)v601, &demangling cache variable for type metadata for UUID?);
                          (*(void (**)(uint64_t, uint64_t))(v605 + 8))(v309, v611);
                          v357 = v600;
                          uint64_t v358 = (uint64_t)v590;
                        }
                        outlined destroy of UUID?(v354, &demangling cache variable for type metadata for (UUID?, UUID?));
                        uint64_t v359 = (uint64_t)v357;
                        goto LABEL_119;
                      }
                    }
                    else
                    {
                      uint64_t v312 = v571;
                      outlined init with copy of UUID?(v306, v571);
                      if (__swift_getEnumTagSinglePayload(v307, 1, v611) != 1)
                      {
                        uint64_t v313 = v305;
                        uint64_t v314 = v604;
                        uint64_t v315 = v605;
                        uint64_t v316 = v307;
                        uint64_t v317 = v611;
                        (*(void (**)(char *, uint64_t, uint64_t))(v605 + 32))(v604, v316, v611);
                        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
                        LODWORD(v599) = dispatch thunk of static Equatable.== infix(_:_:)();
                        uint64_t v318 = v306;
                        uint64_t v319 = *(void (**)(char *, uint64_t))(v315 + 8);
                        v319(v314, v317);
                        outlined destroy of UUID?(v313, &demangling cache variable for type metadata for UUID?);
                        outlined destroy of UUID?((uint64_t)v603, &demangling cache variable for type metadata for UUID?);
                        v319((char *)v312, v317);
                        uint64_t v186 = v607;
                        outlined destroy of UUID?(v318, &demangling cache variable for type metadata for UUID?);
                        uint64_t v309 = (uint64_t)v594;
                        uint64_t v310 = (uint64_t)v595;
                        uint64_t v311 = (uint64_t)v593;
                        if ((v599 & 1) == 0) {
                          goto LABEL_100;
                        }
                        goto LABEL_87;
                      }
                      outlined destroy of UUID?(v305, &demangling cache variable for type metadata for UUID?);
                      outlined destroy of UUID?((uint64_t)v603, &demangling cache variable for type metadata for UUID?);
                      (*(void (**)(uint64_t, uint64_t))(v605 + 8))(v312, v611);
                      uint64_t v309 = (uint64_t)v594;
                    }
                    outlined destroy of UUID?(v306, &demangling cache variable for type metadata for (UUID?, UUID?));
                    uint64_t v310 = (uint64_t)v595;
                    uint64_t v311 = (uint64_t)v593;
                    goto LABEL_100;
                  }
                }
                else
                {
                  uint64_t v262 = v7;
                  uint64_t v263 = v187;
                  uint64_t v264 = (uint64_t)v551;
                  outlined init with copy of UUID?(v259, (uint64_t)v551);
                  if (__swift_getEnumTagSinglePayload(v260, 1, v611) != 1)
                  {
                    uint64_t v265 = v186;
                    uint64_t v266 = v604;
                    uint64_t v267 = v605;
                    uint64_t v268 = v260;
                    uint64_t v269 = v611;
                    (*(void (**)(char *, uint64_t, uint64_t))(v605 + 32))(v604, v268, v611);
                    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
                    LODWORD(v602) = dispatch thunk of static Equatable.== infix(_:_:)();
                    uint64_t v270 = v259;
                    int v271 = *(void (**)(char *, uint64_t))(v267 + 8);
                    v271(v266, v269);
                    outlined destroy of UUID?((uint64_t)v599, &demangling cache variable for type metadata for UUID?);
                    outlined destroy of UUID?(v263, &demangling cache variable for type metadata for UUID?);
                    v271((char *)v264, v269);
                    uint64_t v186 = v265;
                    uint64_t v7 = v606;
                    outlined destroy of UUID?(v270, &demangling cache variable for type metadata for UUID?);
                    if ((v602 & 1) == 0) {
                      goto LABEL_80;
                    }
                    goto LABEL_68;
                  }
                  outlined destroy of UUID?(v185, &demangling cache variable for type metadata for UUID?);
                  outlined destroy of UUID?(v263, &demangling cache variable for type metadata for UUID?);
                  (*(void (**)(uint64_t, uint64_t))(v605 + 8))(v264, v611);
                  uint64_t v7 = v262;
                }
                outlined destroy of UUID?(v259, &demangling cache variable for type metadata for (UUID?, UUID?));
                goto LABEL_80;
              }
            }
            else
            {
              outlined init with copy of UUID?(v181, v172);
              if (__swift_getEnumTagSinglePayload(v182, 1, v611) != 1)
              {
                uint64_t v212 = v173;
                uint64_t v213 = v172;
                uint64_t v214 = v604;
                uint64_t v215 = v611;
                (*(void (**)(char *, uint64_t, uint64_t))(v178 + 32))(v604, v182, v611);
                lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
                LODWORD(v592) = dispatch thunk of static Equatable.== infix(_:_:)();
                uint64_t v216 = v181;
                uint64_t v217 = *(void (**)(char *, uint64_t))(v178 + 8);
                v217(v214, v215);
                outlined destroy of UUID?(v602, &demangling cache variable for type metadata for UUID?);
                outlined destroy of UUID?(v212, &demangling cache variable for type metadata for UUID?);
                v217((char *)v213, v215);
                uint64_t v186 = v607;
                uint64_t v187 = (uint64_t)v589;
                uint64_t v218 = v216;
                uint64_t v7 = v606;
                outlined destroy of UUID?(v218, &demangling cache variable for type metadata for UUID?);
                uint64_t v185 = (uint64_t)v599;
                if ((v592 & 1) == 0) {
                  goto LABEL_61;
                }
                goto LABEL_45;
              }
              outlined destroy of UUID?(v602, &demangling cache variable for type metadata for UUID?);
              outlined destroy of UUID?(v173, &demangling cache variable for type metadata for UUID?);
              (*(void (**)(uint64_t, uint64_t))(v178 + 8))(v172, v611);
              uint64_t v185 = (uint64_t)v599;
            }
            outlined destroy of UUID?(v181, &demangling cache variable for type metadata for (UUID?, UUID?));
            uint64_t v186 = v607;
            uint64_t v187 = (uint64_t)v589;
            goto LABEL_61;
          }
        }
        else
        {
          uint64_t v176 = v570;
          outlined init with copy of UUID?(v167, v570);
          int v177 = __swift_getEnumTagSinglePayload(v168, 1, v611);
          uint64_t v170 = v605;
          if (v177 != 1)
          {
            uint64_t v188 = v604;
            uint64_t v189 = v611;
            (*(void (**)(char *, uint64_t, uint64_t))(v605 + 32))(v604, v168, v611);
            lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
            LODWORD(v552) = dispatch thunk of static Equatable.== infix(_:_:)();
            uint64_t v190 = v166;
            uint64_t v191 = v605;
            uint64_t v192 = *(void (**)(char *, uint64_t))(v605 + 8);
            v192(v188, v189);
            outlined destroy of UUID?(v190, &demangling cache variable for type metadata for UUID?);
            outlined destroy of UUID?(v163, &demangling cache variable for type metadata for UUID?);
            v192((char *)v176, v189);
            uint64_t v171 = v130;
            id v174 = v610;
            uint64_t v170 = v191;
            uint64_t v7 = v606;
            outlined destroy of UUID?(v597, &demangling cache variable for type metadata for UUID?);
            uint64_t v172 = (uint64_t)v592;
            uint64_t v173 = (uint64_t)v588;
            uint64_t v175 = v602;
            if ((v552 & 1) == 0) {
              goto LABEL_28;
            }
            goto LABEL_35;
          }
          outlined destroy of UUID?(v166, &demangling cache variable for type metadata for UUID?);
          outlined destroy of UUID?(v163, &demangling cache variable for type metadata for UUID?);
          (*(void (**)(uint64_t, uint64_t))(v170 + 8))(v176, v611);
          uint64_t v171 = v130;
          uint64_t v172 = (uint64_t)v592;
          uint64_t v173 = (uint64_t)v588;
        }
        outlined destroy of UUID?(v167, &demangling cache variable for type metadata for (UUID?, UUID?));
        id v174 = v610;
LABEL_27:
        uint64_t v175 = v602;
        goto LABEL_28;
      }
    }
    else
    {
      outlined init with copy of UUID?(v124, (uint64_t)v114);
      if (__swift_getEnumTagSinglePayload(v128, 1, v611) != 1)
      {
        uint64_t v131 = v604;
        uint64_t v132 = v611;
        (*(void (**)(char *, uint64_t, uint64_t))(v125 + 32))(v604, v128, v611);
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
        LODWORD(v550) = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v133 = *(void (**)(char *, uint64_t))(v125 + 8);
        v133(v131, v132);
        outlined destroy of UUID?((uint64_t)v117, &demangling cache variable for type metadata for UUID?);
        outlined destroy of UUID?((uint64_t)v119, &demangling cache variable for type metadata for UUID?);
        v133(v114, v132);
        uint64_t v7 = v606;
        outlined destroy of UUID?(v124, &demangling cache variable for type metadata for UUID?);
        uint64_t v130 = v607;
        if ((v550 & 1) == 0) {
          goto LABEL_21;
        }
        goto LABEL_9;
      }
      outlined destroy of UUID?((uint64_t)v117, &demangling cache variable for type metadata for UUID?);
      outlined destroy of UUID?((uint64_t)v119, &demangling cache variable for type metadata for UUID?);
      (*(void (**)(char *, uint64_t))(v125 + 8))(v114, v611);
    }
    outlined destroy of UUID?(v124, &demangling cache variable for type metadata for (UUID?, UUID?));
    uint64_t v130 = v607;
    goto LABEL_21;
  }
}

Swift::Void __swiftcall NetworkAnalytics.logRequestLinkBetweenOrchestratorAndNetworkComponent()()
{
  OUTLINED_FUNCTION_22();
  type metadata accessor for DispatchWorkItemFlags();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v3);
  uint64_t v4 = (void *)OUTLINED_FUNCTION_44_0();
  uint64_t v5 = *(void **)(v0 + OBJC_IVAR___SNNetworkAnalyticsInternal_queue);
  OUTLINED_FUNCTION_23_2();
  OUTLINED_FUNCTION_30_3();
  uint64_t v6 = OUTLINED_FUNCTION_15_2();
  *(void *)(v6 + 16) = v1;
  *(void *)(v6 + 24) = v4;
  v13[4] = partial apply for closure #1 in NetworkAnalytics.logRequestLinkBetweenOrchestratorAndNetworkComponent();
  v13[5] = v6;
  v13[0] = MEMORY[0x263EF8330];
  OUTLINED_FUNCTION_126(COERCE_DOUBLE(1107296256));
  v13[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v13[3] = &block_descriptor_108;
  uint64_t v7 = _Block_copy(v13);
  id v8 = v5;
  OUTLINED_FUNCTION_35_1();
  static DispatchQoS.unspecified.getter();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  OUTLINED_FUNCTION_3_10();
  OUTLINED_FUNCTION_9_4();
  _Block_release(v7);

  uint64_t v9 = OUTLINED_FUNCTION_4_0();
  v10(v9);
  uint64_t v11 = OUTLINED_FUNCTION_10();
  v12(v11);
  OUTLINED_FUNCTION_29_2();
  swift_release();
  OUTLINED_FUNCTION_29();
}

void closure #1 in NetworkAnalytics.logRequestLinkBetweenOrchestratorAndNetworkComponent()(uint64_t a1, uint64_t a2)
{
  uint64_t v115 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = &v107[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v7 = MEMORY[0x270FA5388](v6 - 8);
  uint64_t v116 = &v107[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v120 = &v107[-v10];
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v119 = &v107[-v12];
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = &v107[-v14];
  uint64_t v16 = MEMORY[0x270FA5388](v13);
  uint64_t v18 = &v107[-v17];
  MEMORY[0x270FA5388](v16);
  uint64_t v20 = &v107[-v19];
  uint64_t v21 = type metadata accessor for UUID();
  os_log_t v122 = *(os_log_t *)(v21 - 8);
  uint64_t v22 = MEMORY[0x270FA5388](v21);
  uint64_t v118 = &v107[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v24 = MEMORY[0x270FA5388](v22);
  uint64_t v26 = &v107[-v25];
  uint64_t v27 = MEMORY[0x270FA5388](v24);
  uint64_t v117 = &v107[-v28];
  uint64_t v29 = MEMORY[0x270FA5388](v27);
  uint64_t v31 = &v107[-v30];
  uint64_t v32 = MEMORY[0x270FA5388](v29);
  uint64_t v34 = &v107[-v33];
  MEMORY[0x270FA5388](v32);
  uint64_t v121 = &v107[-v35];
  swift_beginAccess();
  uint64_t v36 = MEMORY[0x2611B37F0](a1 + 16);
  if (!v36) {
    return;
  }
  uint64_t v114 = v26;
  uint64_t v37 = (char *)v36;
  uint64_t v38 = v36 + OBJC_IVAR___SNNetworkAnalyticsInternal_netId;
  swift_beginAccess();
  outlined init with copy of UUID?(v38, (uint64_t)v20);
  if (__swift_getEnumTagSinglePayload((uint64_t)v20, 1, v21) == 1)
  {
    outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for UUID?);
    if (one-time initialization token for siriNetwork != -1) {
      swift_once();
    }
    uint64_t v39 = type metadata accessor for Logger();
    __swift_project_value_buffer(v39, (uint64_t)static Logger.siriNetwork);
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.default.getter();
    uint64_t v42 = v37;
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v43 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v43 = 0;
      _os_log_impl(&dword_25D6CC000, v40, v41, "Network Analytics: Event link. No netId generated", v43, 2u);
      MEMORY[0x2611B3750](v43, -1, -1);
    }

    return;
  }
  uint64_t v112 = v31;
  uint64_t v45 = v121;
  os_log_t v44 = v122;
  Class isa = v122[4].isa;
  os_log_t v111 = v122 + 4;
  uint64_t v110 = (void (*)(void, void, void))isa;
  ((void (*)(unsigned char *, unsigned char *, uint64_t))isa)(v121, v20, v21);
  uint64_t v113 = v37;
  uint64_t v47 = (uint64_t)&v37[OBJC_IVAR___SNNetworkAnalyticsInternal_netIdForRequestLink];
  swift_beginAccess();
  outlined init with copy of UUID?(v47, (uint64_t)v18);
  uint64_t v48 = (void (*)(void, void, void))v44[2].isa;
  v48(v15, v45, v21);
  __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v21);
  uint64_t v49 = (uint64_t)&v5[*(int *)(v3 + 48)];
  outlined init with copy of UUID?((uint64_t)v18, (uint64_t)v5);
  outlined init with copy of UUID?((uint64_t)v15, v49);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v5, 1, v21);
  uint64_t v109 = v47;
  if (EnumTagSinglePayload == 1)
  {
    outlined destroy of UUID?((uint64_t)v15, &demangling cache variable for type metadata for UUID?);
    outlined destroy of UUID?((uint64_t)v18, &demangling cache variable for type metadata for UUID?);
    int v51 = __swift_getEnumTagSinglePayload(v49, 1, v21);
    uint64_t v52 = v21;
    uint64_t v53 = v121;
    if (v51 == 1)
    {
      outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for UUID?);
      uint64_t v54 = (void (*)(unsigned char *, unsigned char *, uint64_t))v48;
LABEL_28:
      if (one-time initialization token for siriNetwork != -1) {
        swift_once();
      }
      uint64_t v90 = type metadata accessor for Logger();
      __swift_project_value_buffer(v90, (uint64_t)static Logger.siriNetwork);
      uint64_t v56 = v118;
      v54(v118, v53, v52);
      uint64_t v91 = Logger.logObject.getter();
      os_log_type_t v92 = static os_log_type_t.default.getter();
      BOOL v93 = os_log_type_enabled(v91, v92);
      uint64_t v94 = v113;
      if (v93)
      {
        uint64_t v95 = (uint8_t *)swift_slowAlloc();
        uint64_t v96 = swift_slowAlloc();
        v125[0] = v96;
        *(_DWORD *)uint64_t v95 = 136315138;
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
        uint64_t v97 = dispatch thunk of CustomStringConvertible.description.getter();
        v124[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v97, v98, v125);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        Class v99 = v122[1].isa;
        ((void (*)(unsigned char *, uint64_t))v99)(v56, v52);
        _os_log_impl(&dword_25D6CC000, v91, v92, "Network Analytics: Event link. Request Link already sent for netId: %s", v95, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x2611B3750](v96, -1, -1);
        MEMORY[0x2611B3750](v95, -1, -1);

        ((void (*)(unsigned char *, uint64_t))v99)(v121, v52);
        return;
      }

      goto LABEL_38;
    }
    goto LABEL_13;
  }
  uint64_t v55 = v119;
  outlined init with copy of UUID?((uint64_t)v5, (uint64_t)v119);
  if (__swift_getEnumTagSinglePayload(v49, 1, v21) == 1)
  {
    outlined destroy of UUID?((uint64_t)v15, &demangling cache variable for type metadata for UUID?);
    outlined destroy of UUID?((uint64_t)v18, &demangling cache variable for type metadata for UUID?);
    ((void (*)(unsigned char *, uint64_t))v122[1].isa)(v55, v21);
    uint64_t v52 = v21;
    uint64_t v53 = v121;
LABEL_13:
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for (UUID?, UUID?));
    uint64_t v56 = v112;
    uint64_t v57 = v114;
    uint64_t v54 = (void (*)(unsigned char *, unsigned char *, uint64_t))v48;
    goto LABEL_14;
  }
  v110(v34, v49, v21);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  int v108 = dispatch thunk of static Equatable.== infix(_:_:)();
  Class v89 = v122[1].isa;
  ((void (*)(unsigned char *, uint64_t))v89)(v34, v21);
  outlined destroy of UUID?((uint64_t)v15, &demangling cache variable for type metadata for UUID?);
  outlined destroy of UUID?((uint64_t)v18, &demangling cache variable for type metadata for UUID?);
  ((void (*)(unsigned char *, uint64_t))v89)(v55, v21);
  outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for UUID?);
  uint64_t v52 = v21;
  uint64_t v53 = v121;
  uint64_t v56 = v112;
  uint64_t v57 = v114;
  uint64_t v54 = (void (*)(unsigned char *, unsigned char *, uint64_t))v48;
  if (v108) {
    goto LABEL_28;
  }
LABEL_14:
  uint64_t v58 = v113;
  uint64_t v59 = (uint64_t)&v113[OBJC_IVAR___SNNetworkAnalyticsInternal_orchestratorRequestId];
  swift_beginAccess();
  uint64_t v60 = v59;
  uint64_t v61 = (uint64_t)v120;
  outlined init with copy of UUID?(v60, (uint64_t)v120);
  if (__swift_getEnumTagSinglePayload(v61, 1, v52) == 1)
  {
    outlined destroy of UUID?(v61, &demangling cache variable for type metadata for UUID?);
    if (one-time initialization token for siriNetwork != -1) {
      swift_once();
    }
    uint64_t v62 = type metadata accessor for Logger();
    __swift_project_value_buffer(v62, (uint64_t)static Logger.siriNetwork);
    uint64_t v63 = Logger.logObject.getter();
    os_log_type_t v64 = static os_log_type_t.default.getter();
    BOOL v65 = os_log_type_enabled(v63, v64);
    uint64_t v66 = v113;
    if (v65)
    {
      uint64_t v67 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v67 = 0;
      _os_log_impl(&dword_25D6CC000, v63, v64, "Network Analytics: Event link. No orchestrator requestId", v67, 2u);
      MEMORY[0x2611B3750](v67, -1, -1);
    }

    ((void (*)(unsigned char *, uint64_t))v122[1].isa)(v53, v52);
  }
  else
  {
    v110(v56, v61, v52);
    if (*((unsigned char *)v58 + OBJC_IVAR___SNNetworkAnalyticsInternal_isConnectionActive) != 1)
    {
      if (one-time initialization token for siriNetwork != -1) {
        swift_once();
      }
      uint64_t v100 = type metadata accessor for Logger();
      __swift_project_value_buffer(v100, (uint64_t)static Logger.siriNetwork);
      uint64_t v101 = Logger.logObject.getter();
      os_log_type_t v102 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v101, v102))
      {
        uint64_t v103 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v103 = 0;
        _os_log_impl(&dword_25D6CC000, v101, v102, "Network Analytics: Event link. No active connection", v103, 2u);
        MEMORY[0x2611B3750](v103, -1, -1);
      }

LABEL_38:
      Class v104 = v122[1].isa;
      ((void (*)(unsigned char *, uint64_t))v104)(v56, v52);
      ((void (*)(unsigned char *, uint64_t))v104)(v53, v52);
      return;
    }
    uint64_t v68 = (uint64_t)v116;
    v54(v116, v53, v52);
    __swift_storeEnumTagSinglePayload(v68, 0, 1, v52);
    uint64_t v69 = NetworkAnalytics.createRequestLinkInfo(from:component:)(v68, 18);
    outlined destroy of UUID?(v68, &demangling cache variable for type metadata for UUID?);
    v54((unsigned char *)v68, v56, v52);
    __swift_storeEnumTagSinglePayload(v68, 0, 1, v52);
    uint64_t v70 = NetworkAnalytics.createRequestLinkInfo(from:component:)(v68, 1);
    outlined destroy of UUID?(v68, &demangling cache variable for type metadata for UUID?);
    id v71 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F6EDB8]), sel_init);
    if (v71)
    {
      uint64_t v72 = v71;
      objc_msgSend(v71, sel_setSource_, v69);
      objc_msgSend(v72, sel_setTarget_, v70);
      objc_msgSend(*(id *)&v113[OBJC_IVAR___SNNetworkAnalyticsInternal_siriAnalyticsMessageStream], sel_emitMessage_timestamp_, v72, v115);
    }
    uint64_t v119 = v70;
    uint64_t v120 = v69;
    v54((unsigned char *)v68, v53, v52);
    __swift_storeEnumTagSinglePayload(v68, 0, 1, v52);
    uint64_t v73 = v109;
    swift_beginAccess();
    outlined assign with take of UUID?(v68, v73);
    swift_endAccess();
    if (one-time initialization token for siriNetwork != -1) {
      swift_once();
    }
    uint64_t v74 = type metadata accessor for Logger();
    __swift_project_value_buffer(v74, (uint64_t)static Logger.siriNetwork);
    uint64_t v75 = v117;
    v54(v117, v53, v52);
    v54(v57, v56, v52);
    uint64_t v76 = Logger.logObject.getter();
    os_log_type_t v77 = static os_log_type_t.default.getter();
    int v78 = v77;
    BOOL v79 = os_log_type_enabled(v76, v77);
    uint64_t v80 = v113;
    if (v79)
    {
      uint64_t v81 = swift_slowAlloc();
      uint64_t v118 = (unsigned char *)swift_slowAlloc();
      v124[0] = (uint64_t)v118;
      *(_DWORD *)uint64_t v81 = 136315394;
      LODWORD(v116) = v78;
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
      uint64_t v82 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v123 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v82, v83, v124);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      Class v84 = v122[1].isa;
      ((void (*)(unsigned char *, uint64_t))v84)(v75, v52);
      *(_WORD *)(v81 + 12) = 2080;
      os_log_t v122 = v76;
      uint64_t v85 = v114;
      uint64_t v86 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v123 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v86, v87, v124);
      uint64_t v80 = v113;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      ((void (*)(unsigned char *, uint64_t))v84)(v85, v52);
      uint64_t v76 = v122;
      _os_log_impl(&dword_25D6CC000, v122, (os_log_type_t)v116, "Network Analytics: Event link emitted. netId: %s, orchestratorRequestId: %s", (uint8_t *)v81, 0x16u);
      uint64_t v88 = v118;
      swift_arrayDestroy();
      MEMORY[0x2611B3750](v88, -1, -1);
      MEMORY[0x2611B3750](v81, -1, -1);
    }
    else
    {
      Class v84 = v122[1].isa;
      ((void (*)(unsigned char *, uint64_t))v84)(v75, v52);
      ((void (*)(unsigned char *, uint64_t))v84)(v57, v52);
    }

    uint64_t v105 = v119;
    uint64_t v106 = v121;
    NetworkAnalytics.emitAllCachedMessagesFor(_:)();

    ((void (*)(unsigned char *, uint64_t))v84)(v112, v52);
    ((void (*)(unsigned char *, uint64_t))v84)(v106, v52);
  }
}

void NetworkAnalytics.logSessionConnectionHttpHeaderCreated(_:)()
{
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  void (*v16)(uint64_t);
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;
  void v21[6];

  OUTLINED_FUNCTION_22();
  uint64_t v19 = v1;
  uint64_t v20 = v2;
  uint64_t v3 = v0;
  uint64_t v5 = v4;
  type metadata accessor for DispatchWorkItemFlags();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v7);
  uint64_t v8 = (void *)OUTLINED_FUNCTION_44_0();
  uint64_t v9 = *(void **)(v3 + OBJC_IVAR___SNNetworkAnalyticsInternal_queue);
  uint64_t v10 = OUTLINED_FUNCTION_23_2();
  swift_unknownObjectWeakInit();
  uint64_t v11 = (void *)swift_allocObject();
  v11[2] = v10;
  void v11[3] = v5;
  v11[4] = v8;
  uint64_t v21[4] = v19;
  void v21[5] = v11;
  v21[0] = MEMORY[0x263EF8330];
  OUTLINED_FUNCTION_126(COERCE_DOUBLE(1107296256));
  v21[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v21[3] = v20;
  uint64_t v12 = _Block_copy(v21);
  uint64_t v13 = v9;
  OUTLINED_FUNCTION_35_1();
  uint64_t v14 = v5;
  static DispatchQoS.unspecified.getter();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  OUTLINED_FUNCTION_3_10();
  OUTLINED_FUNCTION_9_4();
  _Block_release(v12);

  uint64_t v15 = OUTLINED_FUNCTION_4_0();
  v16(v15);
  uint64_t v17 = OUTLINED_FUNCTION_10();
  v18(v17);
  OUTLINED_FUNCTION_29_2();
  swift_release();
  OUTLINED_FUNCTION_29();
}

void closure #1 in NetworkAnalytics.logSessionConnectionHttpHeaderCreated(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v123 = a3;
  uint64_t v119 = a2;
  uint64_t v122 = type metadata accessor for NetworkAnalyticsEventMessage(0);
  MEMORY[0x270FA5388](v122);
  uint64_t v5 = (char *)&v113 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v7 = MEMORY[0x270FA5388](v6 - 8);
  uint64_t v120 = (uint64_t)&v113 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v113 - v10;
  uint64_t v12 = MEMORY[0x270FA5388](v9);
  uint64_t v14 = (char *)&v113 - v13;
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v113 - v15;
  uint64_t v17 = type metadata accessor for UUID();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  uint64_t v21 = (char *)&v113 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x270FA5388](v19);
  uint64_t v121 = (char *)&v113 - v23;
  uint64_t v24 = MEMORY[0x270FA5388](v22);
  uint64_t v118 = (char *)&v113 - v25;
  uint64_t v26 = MEMORY[0x270FA5388](v24);
  uint64_t v28 = (char *)&v113 - v27;
  MEMORY[0x270FA5388](v26);
  uint64_t v30 = (char *)&v113 - v29;
  swift_beginAccess();
  uint64_t v31 = MEMORY[0x2611B37F0](a1 + 16);
  if (!v31) {
    return;
  }
  uint64_t v124 = v30;
  uint64_t v32 = v17;
  uint64_t v33 = (char *)v31;
  uint64_t v34 = v31 + OBJC_IVAR___SNNetworkAnalyticsInternal_netId;
  swift_beginAccess();
  outlined init with copy of UUID?(v34, (uint64_t)v16);
  if (__swift_getEnumTagSinglePayload((uint64_t)v16, 1, v32) == 1)
  {
    outlined destroy of UUID?((uint64_t)v16, &demangling cache variable for type metadata for UUID?);
    if (one-time initialization token for siriNetwork != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    __swift_project_value_buffer(v35, (uint64_t)static Logger.siriNetwork);
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v38 = 0;
      _os_log_impl(&dword_25D6CC000, v36, v37, "Network Analytics: Event Header. No netId generated", v38, 2u);
      MEMORY[0x2611B3750](v38, -1, -1);
    }

    return;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v124, v16, v32);
  uint64_t v117 = v33;
  uint64_t v39 = (uint64_t)&v33[OBJC_IVAR___SNNetworkAnalyticsInternal_httpHeaderEvent];
  swift_beginAccess();
  uint64_t v116 = v39;
  outlined init with copy of NetworkAnalyticsEventMessage(v39, (uint64_t)v5);
  uint64_t v40 = v32;
  if (__swift_getEnumTagSinglePayload((uint64_t)v5, 1, v32))
  {
    uint64_t v41 = v18;
    outlined destroy of NetworkAnalyticsEventMessage((uint64_t)v5);
    uint64_t v42 = 0;
    uint64_t v43 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v28, v5, v32);
    outlined destroy of NetworkAnalyticsEventMessage((uint64_t)v5);
    uint64_t v44 = UUID.uuidString.getter();
    uint64_t v45 = v18;
    uint64_t v42 = v44;
    uint64_t v43 = v46;
    uint64_t v41 = v45;
    (*(void (**)(char *, uint64_t))(v45 + 8))(v28, v32);
  }
  uint64_t v47 = v124;
  uint64_t v48 = UUID.uuidString.getter();
  if (!v43)
  {
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  if (v42 != v48 || v43 != v49)
  {
    char v51 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v51) {
      goto LABEL_23;
    }
LABEL_19:
    uint64_t v52 = v41;
    uint64_t v53 = *(void (**)(char *, char *, uint64_t))(v41 + 16);
    v53(v14, v47, v40);
    __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v40);
    uint64_t v54 = v116;
    swift_beginAccess();
    outlined assign with take of UUID?((uint64_t)v14, v54);
    swift_endAccess();
    uint64_t v115 = v53;
    v53(v14, v47, v40);
    __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v40);
    uint64_t v55 = v117;
    uint64_t v56 = &v117[OBJC_IVAR___SNNetworkAnalyticsInternal_networkConnectionId];
    swift_beginAccess();
    outlined init with copy of UUID?((uint64_t)v56, (uint64_t)v11);
    LOBYTE(v127) = v55[OBJC_IVAR___SNNetworkAnalyticsInternal_connectionProvider + 4];
    NetworkAnalytics.createSchemaClientEventFrom(netId:networkConnectionId:connectionProvider:)();
    uint64_t v58 = v57;
    outlined destroy of UUID?((uint64_t)v11, &demangling cache variable for type metadata for UUID?);
    outlined destroy of UUID?((uint64_t)v14, &demangling cache variable for type metadata for UUID?);
    if (!v58)
    {
      (*(void (**)(char *, uint64_t))(v52 + 8))(v47, v40);

      return;
    }
    uint64_t v113 = v52;
    id v114 = v58;
    objc_msgSend(v58, sel_setSessionConnectionHttpHeaderCreated_, v119);
    uint64_t v59 = &v55[OBJC_IVAR___SNNetworkAnalyticsInternal_netIdForRequestLink];
    swift_beginAccess();
    uint64_t v60 = (uint64_t)v59;
    uint64_t v61 = v120;
    outlined init with copy of UUID?(v60, v120);
    if (__swift_getEnumTagSinglePayload(v61, 1, v40))
    {
      outlined destroy of UUID?(v61, &demangling cache variable for type metadata for UUID?);
      uint64_t v62 = 0;
      uint64_t v63 = 0;
      os_log_type_t v64 = v121;
      BOOL v65 = v115;
    }
    else
    {
      BOOL v65 = v115;
      v115(v28, (char *)v61, v40);
      outlined destroy of UUID?(v61, &demangling cache variable for type metadata for UUID?);
      uint64_t v62 = UUID.uuidString.getter();
      uint64_t v63 = v77;
      (*(void (**)(char *, uint64_t))(v113 + 8))(v28, v40);
      os_log_type_t v64 = v121;
    }
    uint64_t v78 = UUID.uuidString.getter();
    if (v63)
    {
      if (v62 == v78 && v63 == v79)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_43:
        uint64_t v98 = *(int *)(v122 + 20);
        Class v99 = *(void **)(v116 + v98);
        *(void *)(v116 + v98) = 0;

        id v100 = v117;
        objc_msgSend(*(id *)&v117[OBJC_IVAR___SNNetworkAnalyticsInternal_siriAnalyticsMessageStream], sel_emitMessage_timestamp_, v114, v123);
        if (one-time initialization token for siriNetwork != -1) {
          swift_once();
        }
        uint64_t v101 = type metadata accessor for Logger();
        __swift_project_value_buffer(v101, (uint64_t)static Logger.siriNetwork);
        os_log_type_t v102 = v118;
        uint64_t v103 = v124;
        v65(v118, v124, v40);
        uint64_t v82 = v40;
        Class v104 = Logger.logObject.getter();
        os_log_type_t v105 = static os_log_type_t.default.getter();
        if (!os_log_type_enabled(v104, v105))
        {

          uint64_t v97 = *(void (**)(char *, uint64_t))(v113 + 8);
          v97(v102, v82);

          os_log_t v111 = v103;
          goto LABEL_50;
        }
        uint64_t v106 = v102;
        uint64_t v107 = (uint8_t *)swift_slowAlloc();
        uint64_t v108 = swift_slowAlloc();
        uint64_t v126 = v108;
        *(_DWORD *)uint64_t v107 = 136315138;
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
        uint64_t v109 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v125 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v109, v110, &v126);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v97 = *(void (**)(char *, uint64_t))(v113 + 8);
        v97(v106, v82);
        _os_log_impl(&dword_25D6CC000, v104, v105, "Network Analytics: Event Header. httpHeaderEvent emitted: %s", v107, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x2611B3750](v108, -1, -1);
        MEMORY[0x2611B3750](v107, -1, -1);

LABEL_47:
        os_log_t v111 = v124;
LABEL_50:
        v97(v111, v82);
        return;
      }
      char v81 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v81) {
        goto LABEL_43;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    uint64_t v82 = v40;
    uint64_t v83 = v122;
    uint64_t v84 = *(int *)(v122 + 20);
    uint64_t v85 = v116;
    uint64_t v86 = *(void **)(v116 + v84);
    id v87 = v114;
    *(void *)(v116 + v84) = v114;
    id v88 = v87;

    uint64_t v89 = v85 + *(int *)(v83 + 24);
    *(void *)uint64_t v89 = v123;
    *(unsigned char *)(v89 + 8) = 0;
    if (one-time initialization token for siriNetwork != -1) {
      swift_once();
    }
    uint64_t v90 = type metadata accessor for Logger();
    __swift_project_value_buffer(v90, (uint64_t)static Logger.siriNetwork);
    v65(v64, v47, v82);
    uint64_t v91 = Logger.logObject.getter();
    os_log_type_t v92 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v91, v92))
    {

      uint64_t v112 = *(void (**)(char *, uint64_t))(v113 + 8);
      v112(v64, v82);

      v112(v47, v82);
      return;
    }
    BOOL v93 = (uint8_t *)swift_slowAlloc();
    uint64_t v94 = swift_slowAlloc();
    uint64_t v126 = v94;
    *(_DWORD *)BOOL v93 = 136315138;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    uint64_t v95 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v125 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v95, v96, &v126);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v97 = *(void (**)(char *, uint64_t))(v113 + 8);
    v97(v64, v82);
    _os_log_impl(&dword_25D6CC000, v91, v92, "Network Analytics: Event Header. No netIdForRequestLink for netId: %s", v93, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2611B3750](v94, -1, -1);
    MEMORY[0x2611B3750](v93, -1, -1);

    goto LABEL_47;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_23:
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v66 = type metadata accessor for Logger();
  __swift_project_value_buffer(v66, (uint64_t)static Logger.siriNetwork);
  uint64_t v67 = v41;
  (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v21, v47, v40);
  uint64_t v68 = v40;
  uint64_t v69 = Logger.logObject.getter();
  os_log_type_t v70 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v69, v70))
  {
    id v71 = (uint8_t *)swift_slowAlloc();
    uint64_t v72 = swift_slowAlloc();
    v128[0] = v72;
    *(_DWORD *)id v71 = 136315138;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    uint64_t v73 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v127 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v73, v74, v128);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v75 = *(void (**)(char *, uint64_t))(v67 + 8);
    v75(v21, v68);
    _os_log_impl(&dword_25D6CC000, v69, v70, "Network Analytics: Event Header. Http header already sent for netId: %s", v71, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2611B3750](v72, -1, -1);
    MEMORY[0x2611B3750](v71, -1, -1);

    v75(v124, v68);
  }
  else
  {

    uint64_t v76 = *(void (**)(char *, uint64_t))(v41 + 8);
    v76(v21, v68);
    v76(v47, v68);
  }
}

void NetworkAnalytics.logNetworkConnectionStatePreparationSnapshotCaptured(_:)()
{
}

void NetworkAnalytics.logDebugNetworkConnectionStatePreparationSnapshotCaptured(_:)()
{
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  void (*v14)(void);
  void (*v15)(void);
  void *v16;
  uint64_t v17;
  void v18[6];

  OUTLINED_FUNCTION_22();
  uint64_t v17 = v1;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  type metadata accessor for DispatchWorkItemFlags();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v6);
  uint64_t v7 = OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_2();
  if (NetworkAnalytics.emitLogDebug()())
  {
    uint64_t v9 = (void *)mach_absolute_time();
    uint64_t v16 = *(void **)(v0 + OBJC_IVAR___SNNetworkAnalyticsInternal_queue);
    OUTLINED_FUNCTION_23_2();
    OUTLINED_FUNCTION_30_3();
    uint64_t v10 = (void *)swift_allocObject();
    void v10[2] = v7;
    v10[3] = v5;
    v10[4] = v9;
    v18[4] = v3;
    v18[5] = v10;
    v18[0] = MEMORY[0x263EF8330];
    OUTLINED_FUNCTION_126(COERCE_DOUBLE(1107296256));
    void v18[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    uint64_t v18[3] = v17;
    uint64_t v11 = _Block_copy(v18);
    uint64_t v12 = v16;
    OUTLINED_FUNCTION_35_1();
    uint64_t v13 = v5;
    static DispatchQoS.unspecified.getter();
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    OUTLINED_FUNCTION_3_10();
    OUTLINED_FUNCTION_9_4();
    _Block_release(v11);

    OUTLINED_FUNCTION_27_3();
    v14();
    OUTLINED_FUNCTION_12_2();
    v15();
    OUTLINED_FUNCTION_29_2();
    swift_release();
  }
  OUTLINED_FUNCTION_29();
}

void closure #1 in NetworkAnalytics.logNetworkConnectionStatePreparationSnapshotCaptured(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,const char *a21)
{
  OUTLINED_FUNCTION_22();
  uint64_t v155 = v23;
  uint64_t v25 = v24;
  int v153 = v26;
  int v158 = v27;
  int v165 = v28;
  uint64_t v162 = v29;
  uint64_t v159 = v30;
  uint64_t v32 = v31;
  uint64_t v167 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  OUTLINED_FUNCTION_42_0();
  MEMORY[0x270FA5388](v33);
  OUTLINED_FUNCTION_5_5();
  OUTLINED_FUNCTION_11_2();
  MEMORY[0x270FA5388](v34);
  uint64_t v36 = &v146[-v35];
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v38 = OUTLINED_FUNCTION_19_1(v37);
  MEMORY[0x270FA5388](v38);
  OUTLINED_FUNCTION_5_5();
  OUTLINED_FUNCTION_11_2();
  MEMORY[0x270FA5388](v39);
  OUTLINED_FUNCTION_36_1();
  OUTLINED_FUNCTION_11_2();
  MEMORY[0x270FA5388](v40);
  OUTLINED_FUNCTION_36_1();
  OUTLINED_FUNCTION_11_2();
  MEMORY[0x270FA5388](v41);
  OUTLINED_FUNCTION_36_1();
  OUTLINED_FUNCTION_11_2();
  uint64_t v43 = MEMORY[0x270FA5388](v42);
  uint64_t v45 = &v146[-v44];
  MEMORY[0x270FA5388](v43);
  OUTLINED_FUNCTION_55();
  uint64_t v47 = MEMORY[0x270FA5388](v46);
  uint64_t v49 = &v146[-v48];
  uint64_t v50 = MEMORY[0x270FA5388](v47);
  uint64_t v52 = &v146[-v51];
  MEMORY[0x270FA5388](v50);
  uint64_t v53 = OUTLINED_FUNCTION_60_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v168 = v54;
  MEMORY[0x270FA5388](v55);
  OUTLINED_FUNCTION_5_5();
  OUTLINED_FUNCTION_11_2();
  MEMORY[0x270FA5388](v56);
  OUTLINED_FUNCTION_36_1();
  OUTLINED_FUNCTION_11_2();
  MEMORY[0x270FA5388](v57);
  OUTLINED_FUNCTION_36_1();
  OUTLINED_FUNCTION_11_2();
  MEMORY[0x270FA5388](v58);
  OUTLINED_FUNCTION_36_1();
  OUTLINED_FUNCTION_11_2();
  MEMORY[0x270FA5388](v59);
  uint64_t v61 = &v146[-v60];
  OUTLINED_FUNCTION_24_2();
  uint64_t v62 = MEMORY[0x2611B37F0](v32 + 16);
  if (!v62) {
    goto LABEL_47;
  }
  uint64_t v151 = v25;
  uint64_t v166 = v61;
  uint64_t v63 = (char *)v62;
  uint64_t v64 = v62 + OBJC_IVAR___SNNetworkAnalyticsInternal_netId;
  OUTLINED_FUNCTION_24_2();
  outlined init with copy of UUID?(v64, v21);
  if (__swift_getEnumTagSinglePayload(v21, 1, v53) == 1)
  {
    outlined destroy of UUID?(v21, &demangling cache variable for type metadata for UUID?);
    if (one-time initialization token for siriNetwork != -1) {
      swift_once();
    }
    uint64_t v65 = type metadata accessor for Logger();
    __swift_project_value_buffer(v65, (uint64_t)static Logger.siriNetwork);
    uint64_t v66 = Logger.logObject.getter();
    os_log_type_t v67 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v66, v67))
    {
      uint64_t v68 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v68 = 0;
      _os_log_impl(&dword_25D6CC000, v66, v67, a21, v68, 2u);
      OUTLINED_FUNCTION_1_2();
    }

    goto LABEL_47;
  }
  uint64_t v69 = v168;
  os_log_type_t v70 = *(void (**)(void, void, void))(v168 + 32);
  uint64_t v150 = v168 + 32;
  uint64_t v149 = v70;
  v70(v166, v21, v53);
  uint64_t v71 = *v165;
  uint64_t v152 = v63;
  uint64_t v72 = (uint64_t)&v63[v71];
  uint64_t v73 = v53;
  swift_beginAccess();
  int v165 = (void *)v72;
  outlined init with copy of UUID?(v72, (uint64_t)v52);
  uint64_t v74 = v69 + 16;
  uint64_t v75 = OUTLINED_FUNCTION_52_0();
  uint64_t v77 = v76;
  ((void (*)(uint64_t))v76)(v75);
  __swift_storeEnumTagSinglePayload((uint64_t)v49, 0, 1, v73);
  uint64_t v78 = (uint64_t)&v36[*(int *)(v167 + 48)];
  outlined init with copy of UUID?((uint64_t)v52, (uint64_t)v36);
  uint64_t v79 = OUTLINED_FUNCTION_52_0();
  outlined init with copy of UUID?(v79, v80);
  OUTLINED_FUNCTION_10_3((uint64_t)v36);
  if (v83)
  {
    outlined destroy of UUID?((uint64_t)v49, &demangling cache variable for type metadata for UUID?);
    outlined destroy of UUID?((uint64_t)v52, &demangling cache variable for type metadata for UUID?);
    OUTLINED_FUNCTION_10_3(v78);
    char v81 = v152;
    if (v83)
    {
      outlined destroy of UUID?((uint64_t)v36, &demangling cache variable for type metadata for UUID?);
      uint64_t v82 = v77;
LABEL_24:
      uint64_t v101 = v166;
      if (one-time initialization token for siriNetwork != -1) {
        swift_once();
      }
      uint64_t v102 = type metadata accessor for Logger();
      __swift_project_value_buffer(v102, (uint64_t)static Logger.siriNetwork);
      ((void (*)(id, unsigned char *, uint64_t))v82)(v157, v101, v73);
      uint64_t v103 = Logger.logObject.getter();
      os_log_type_t v104 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v103, v104))
      {
        os_log_type_t v105 = (uint8_t *)OUTLINED_FUNCTION_41_0();
        uint64_t v171 = OUTLINED_FUNCTION_10_0();
        *(_DWORD *)os_log_type_t v105 = 136315138;
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
        uint64_t v106 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v108 = (void (*)(void))v107;
        uint64_t v170 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v106, v107, &v171);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v109 = OUTLINED_FUNCTION_33_3();
        ((void (*)(uint64_t))v108)(v109);
        _os_log_impl(&dword_25D6CC000, v103, v104, v155, v105, 0xCu);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_1_2();
        OUTLINED_FUNCTION_1_2();

        OUTLINED_FUNCTION_54_0();
      }
      else
      {

        uint64_t v108 = *(void (**)(void))(v168 + 8);
        OUTLINED_FUNCTION_27_3();
        v108();
      }
      ((void (*)(unsigned char *, uint64_t))v108)(v101, v73);
      goto LABEL_47;
    }
    goto LABEL_16;
  }
  outlined init with copy of UUID?((uint64_t)v36, v22);
  OUTLINED_FUNCTION_10_3(v78);
  if (v83)
  {
    uint64_t v84 = OUTLINED_FUNCTION_52_0();
    outlined destroy of UUID?(v84, v85);
    outlined destroy of UUID?((uint64_t)v52, &demangling cache variable for type metadata for UUID?);
    (*(void (**)(uint64_t, uint64_t))(v168 + 8))(v22, v73);
    char v81 = v152;
LABEL_16:
    outlined destroy of UUID?((uint64_t)v36, &demangling cache variable for type metadata for (UUID?, UUID?));
    uint64_t v82 = v77;
    goto LABEL_17;
  }
  uint64_t v148 = v69 + 16;
  uint64_t v98 = OUTLINED_FUNCTION_16_3();
  v99(v98);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  int v147 = dispatch thunk of static Equatable.== infix(_:_:)();
  id v100 = *(void (**)(uint64_t, uint64_t))(v168 + 8);
  v100(v74, v73);
  outlined destroy of UUID?((uint64_t)v49, &demangling cache variable for type metadata for UUID?);
  outlined destroy of UUID?((uint64_t)v52, &demangling cache variable for type metadata for UUID?);
  v100(v22, v73);
  outlined destroy of UUID?((uint64_t)v36, &demangling cache variable for type metadata for UUID?);
  char v81 = v152;
  uint64_t v82 = v77;
  if (v147) {
    goto LABEL_24;
  }
LABEL_17:
  uint64_t v86 = v166;
  OUTLINED_FUNCTION_13_3();
  v82();
  OUTLINED_FUNCTION_51();
  uint64_t v87 = (uint64_t)v165;
  swift_beginAccess();
  outlined assign with take of UUID?((uint64_t)v45, v87);
  swift_endAccess();
  OUTLINED_FUNCTION_13_3();
  v82();
  OUTLINED_FUNCTION_51();
  uint64_t v88 = (uint64_t)&v81[OBJC_IVAR___SNNetworkAnalyticsInternal_networkConnectionId];
  OUTLINED_FUNCTION_24_2();
  uint64_t v89 = v164;
  outlined init with copy of UUID?(v88, v164);
  LOBYTE(v170) = v81[OBJC_IVAR___SNNetworkAnalyticsInternal_connectionProvider + 4];
  NetworkAnalytics.createSchemaClientEventFrom(netId:networkConnectionId:connectionProvider:)();
  uint64_t v91 = v90;
  outlined destroy of UUID?(v89, &demangling cache variable for type metadata for UUID?);
  outlined destroy of UUID?((uint64_t)v45, &demangling cache variable for type metadata for UUID?);
  if (!v91)
  {
    OUTLINED_FUNCTION_12_2();
    v110();

    goto LABEL_47;
  }
  os_log_type_t v92 = *v158;
  id v157 = v91;
  objc_msgSend(v91, v92, v159);
  uint64_t v93 = (uint64_t)&v81[OBJC_IVAR___SNNetworkAnalyticsInternal_netIdForRequestLink];
  OUTLINED_FUNCTION_24_2();
  uint64_t v94 = v160;
  outlined init with copy of UUID?(v93, v160);
  uint64_t v95 = v163;
  OUTLINED_FUNCTION_13_3();
  v82();
  __swift_storeEnumTagSinglePayload(v95, 0, 1, v73);
  uint64_t v96 = v161;
  uint64_t v97 = v161 + *(int *)(v167 + 48);
  outlined init with copy of UUID?(v94, v161);
  outlined init with copy of UUID?(v95, v97);
  OUTLINED_FUNCTION_10_3(v96);
  if (v83)
  {
    outlined destroy of UUID?(v95, &demangling cache variable for type metadata for UUID?);
    outlined destroy of UUID?(v94, &demangling cache variable for type metadata for UUID?);
    OUTLINED_FUNCTION_10_3(v97);
    if (v83)
    {
      outlined destroy of UUID?(v96, &demangling cache variable for type metadata for UUID?);
LABEL_36:
      uint64_t v117 = *(int *)(type metadata accessor for NetworkAnalyticsEventMessage(0) + 20);
      uint64_t v118 = *(void **)((char *)v165 + v117);
      *(void *)((char *)v165 + v117) = 0;

      id v119 = v157;
      objc_msgSend(*(id *)&v81[OBJC_IVAR___SNNetworkAnalyticsInternal_siriAnalyticsMessageStream], sel_emitMessage_timestamp_, v157, v162);
      if (one-time initialization token for siriNetwork != -1) {
        swift_once();
      }
      uint64_t v120 = type metadata accessor for Logger();
      __swift_project_value_buffer(v120, (uint64_t)static Logger.siriNetwork);
      uint64_t v121 = v154;
      OUTLINED_FUNCTION_13_3();
      v82();
      uint64_t v122 = Logger.logObject.getter();
      os_log_type_t v123 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v122, v123))
      {
        uint64_t v124 = (uint8_t *)OUTLINED_FUNCTION_41_0();
        uint64_t v169 = OUTLINED_FUNCTION_10_0();
        *(_DWORD *)uint64_t v124 = 136315138;
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
        uint64_t v125 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v127 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v125, v126, &v169);
        OUTLINED_FUNCTION_56_0(v127);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v128 = *(void (**)(void))(v168 + 8);
        ((void (*)(uint64_t, uint64_t))v128)(v121, v73);
        _os_log_impl(&dword_25D6CC000, v122, v123, v153, v124, 0xCu);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_1_2();
        OUTLINED_FUNCTION_1_2();

        OUTLINED_FUNCTION_54_0();
      }
      else
      {

        uint64_t v128 = *(void (**)(void))(v168 + 8);
        OUTLINED_FUNCTION_27_3();
        v128();
      }
      ((void (*)(unsigned char *, uint64_t))v128)(v86, v73);
      goto LABEL_47;
    }
    goto LABEL_33;
  }
  uint64_t v111 = v156;
  outlined init with copy of UUID?(v96, v156);
  OUTLINED_FUNCTION_10_3(v97);
  if (v112)
  {
    outlined destroy of UUID?(v163, &demangling cache variable for type metadata for UUID?);
    outlined destroy of UUID?(v94, &demangling cache variable for type metadata for UUID?);
    (*(void (**)(uint64_t, uint64_t))(v168 + 8))(v111, v73);
LABEL_33:
    outlined destroy of UUID?(v96, &demangling cache variable for type metadata for (UUID?, UUID?));
    goto LABEL_41;
  }
  uint64_t v113 = OUTLINED_FUNCTION_16_3();
  v114(v113);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  LODWORD(v167) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v115 = v94;
  uint64_t v116 = *(void (**)(void))(v168 + 8);
  OUTLINED_FUNCTION_12_3();
  v116();
  outlined destroy of UUID?(v163, &demangling cache variable for type metadata for UUID?);
  outlined destroy of UUID?(v115, &demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_12_3();
  v116();
  uint64_t v86 = v166;
  char v81 = v152;
  outlined destroy of UUID?(v96, &demangling cache variable for type metadata for UUID?);
  if (v167) {
    goto LABEL_36;
  }
LABEL_41:
  uint64_t v129 = type metadata accessor for NetworkAnalyticsEventMessage(0);
  uint64_t v130 = *(int *)(v129 + 20);
  uint64_t v131 = v165;
  uint64_t v132 = *(void **)((char *)v165 + v130);
  id v133 = v157;
  *(void *)((char *)v165 + v130) = v157;
  id v134 = v133;

  double v135 = (char *)v131 + *(int *)(v129 + 24);
  *(void *)double v135 = v162;
  v135[8] = 0;
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v136 = type metadata accessor for Logger();
  __swift_project_value_buffer(v136, (uint64_t)static Logger.siriNetwork);
  OUTLINED_FUNCTION_13_3();
  v82();
  uint64_t v137 = Logger.logObject.getter();
  os_log_type_t v138 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v137, v138))
  {
    uint64_t v139 = (uint8_t *)OUTLINED_FUNCTION_41_0();
    uint64_t v169 = OUTLINED_FUNCTION_10_0();
    *(_DWORD *)uint64_t v139 = 136315138;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    uint64_t v140 = dispatch thunk of CustomStringConvertible.description.getter();
    id v142 = (void (*)(uint64_t))v141;
    uint64_t v143 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v140, v141, &v169);
    OUTLINED_FUNCTION_56_0(v143);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v144 = OUTLINED_FUNCTION_33_3();
    v142(v144);
    _os_log_impl(&dword_25D6CC000, v137, v138, v151, v139, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_1_2();
    OUTLINED_FUNCTION_1_2();

    OUTLINED_FUNCTION_54_0();
    ((void (*)(unsigned char *, uint64_t))v142)(v166, v73);
  }
  else
  {

    OUTLINED_FUNCTION_54_0();
    double v145 = *(void (**)(void))(v168 + 8);
    OUTLINED_FUNCTION_12_3();
    v145();

    OUTLINED_FUNCTION_12_3();
    v145();
  }
LABEL_47:
  OUTLINED_FUNCTION_29();
}

void NetworkAnalytics.logNetworkConnectionStateReadySnapshotCaptured(_:)()
{
}

void NetworkAnalytics.logDebugNetworkConnectionStateReadySnapshotCaptured(_:)()
{
}

void NetworkAnalytics.logSessionConnectionSnapshotCaptured(_:)()
{
}

void NetworkAnalytics.logDebugSessionConnectionSnapshotCaptured(_:)()
{
}

void NetworkAnalytics.logSessionConnectionFailed(_:)()
{
}

void NetworkAnalytics.logPeerConnectionFailed(_:)()
{
}

id NetworkAnalytics.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void NetworkAnalytics.init()()
{
}

id NetworkAnalytics.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for NetworkAnalytics(0);
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t specialized RandomNumberGenerator.next<A>(upperBound:)(uint64_t result)
{
  if ((_BYTE)result)
  {
    v6[3] = v1;
    v6[4] = v2;
    unsigned __int8 v3 = result;
    v6[0] = 0;
    MEMORY[0x2611B3760](v6, 8);
    int v4 = v3;
    uint64_t result = (LOBYTE(v6[0]) * v3) >> 8;
    if (v3 > (LOBYTE(v6[0]) * v3)
      && -v3 % v3 > (LOBYTE(v6[0]) * v3))
    {
      unsigned int v5 = (-v3 % v3);
      do
      {
        v6[0] = 0;
        MEMORY[0x2611B3760](v6, 8);
      }
      while (v5 > (LOBYTE(v6[0]) * v4));
      return (LOBYTE(v6[0]) * v4) >> 8;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_25D717700()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

void partial apply for closure #1 in NetworkAnalytics.logRequestLinkBetweenOrchestratorAndNetworkComponent()()
{
  closure #1 in NetworkAnalytics.logRequestLinkBetweenOrchestratorAndNetworkComponent()(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void partial apply for closure #1 in NetworkAnalytics.logSessionConnectionHttpHeaderCreated(_:)()
{
  uint64_t v0 = OUTLINED_FUNCTION_26_1();
  closure #1 in NetworkAnalytics.logSessionConnectionHttpHeaderCreated(_:)(v0, v1, v2);
}

#error "25D7177A0: call analysis failed (funcsize=16)"

#error "25D7177FC: call analysis failed (funcsize=16)"

#error "25D717858: call analysis failed (funcsize=16)"

#error "25D7178B4: call analysis failed (funcsize=16)"

#error "25D717910: call analysis failed (funcsize=16)"

#error "25D71796C: call analysis failed (funcsize=16)"

#error "25D7179C8: call analysis failed (funcsize=16)"

uint64_t objectdestroy_111Tm()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

#error "25D717A64: call analysis failed (funcsize=16)"

uint64_t type metadata accessor for NetworkAnalytics(uint64_t a1)
{
  return type metadata accessor for NetworkConnectionProvider.StateUpdateHandler(a1, type metadata singleton initialization cache for NetworkAnalytics);
}

uint64_t ObjC metadata update function for NetworkAnalytics()
{
  return type metadata accessor for NetworkAnalytics(0);
}

void type metadata completion function for NetworkAnalytics()
{
  type metadata accessor for UUID?();
  if (v0 <= 0x3F)
  {
    type metadata accessor for NetworkAnalyticsEventMessage(319);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t method lookup function for NetworkAnalytics(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for NetworkAnalytics);
}

uint64_t dispatch thunk of NetworkAnalytics.reset()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2B8))();
}

uint64_t dispatch thunk of NetworkAnalytics.resetNetId()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2C0))();
}

uint64_t dispatch thunk of NetworkAnalytics.setNetId(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2C8))();
}

uint64_t dispatch thunk of NetworkAnalytics.getNetId()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2D0))();
}

uint64_t dispatch thunk of NetworkAnalytics.setNetworkConnectionId(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2D8))();
}

uint64_t dispatch thunk of NetworkAnalytics.setConnectionProvider(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2E0))();
}

uint64_t dispatch thunk of NetworkAnalytics.getSequenceNumber()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2E8))();
}

uint64_t dispatch thunk of NetworkAnalytics.setIsConnectionActive(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2F0))();
}

uint64_t dispatch thunk of NetworkAnalytics.getIsConnectionActive()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2F8))();
}

uint64_t dispatch thunk of NetworkAnalytics.setNetIdAvailable(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x300))();
}

uint64_t dispatch thunk of NetworkAnalytics.isNetIdAvailable()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x308))();
}

uint64_t dispatch thunk of NetworkAnalytics.increaseSequenceNumber()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x310))();
}

uint64_t dispatch thunk of NetworkAnalytics.resetSequenceNumber()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x318))();
}

uint64_t dispatch thunk of NetworkAnalytics.setOrchestatorRequestId(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x320))();
}

uint64_t dispatch thunk of NetworkAnalytics.getOrchestratorRequestId()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x328))();
}

uint64_t dispatch thunk of NetworkAnalytics.emitLogDebug()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x330))();
}

uint64_t dispatch thunk of NetworkAnalytics.logRequestLinkBetweenOrchestratorAndNetworkComponent()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x350))();
}

uint64_t dispatch thunk of NetworkAnalytics.logSessionConnectionHttpHeaderCreated(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x358))();
}

uint64_t dispatch thunk of NetworkAnalytics.logNetworkConnectionStatePreparationSnapshotCaptured(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x360))();
}

uint64_t dispatch thunk of NetworkAnalytics.logDebugNetworkConnectionStatePreparationSnapshotCaptured(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x368))();
}

uint64_t dispatch thunk of NetworkAnalytics.logNetworkConnectionStateReadySnapshotCaptured(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x370))();
}

uint64_t dispatch thunk of NetworkAnalytics.logDebugNetworkConnectionStateReadySnapshotCaptured(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x378))();
}

uint64_t dispatch thunk of NetworkAnalytics.logSessionConnectionSnapshotCaptured(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x380))();
}

uint64_t dispatch thunk of NetworkAnalytics.logDebugSessionConnectionSnapshotCaptured(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x388))();
}

uint64_t dispatch thunk of NetworkAnalytics.logSessionConnectionFailed(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x390))();
}

uint64_t dispatch thunk of NetworkAnalytics.logPeerConnectionFailed(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x398))();
}

void type metadata accessor for UUID?()
{
  if (!lazy cache variable for type metadata for UUID?)
  {
    type metadata accessor for UUID();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UUID?);
    }
  }
}

uint64_t type metadata accessor for NetworkAnalyticsEventMessage(uint64_t a1)
{
  return type metadata accessor for NetworkConnectionProvider.StateUpdateHandler(a1, (uint64_t *)&type metadata singleton initialization cache for NetworkAnalyticsEventMessage);
}

uint64_t *initializeBufferWithCopyOfBuffer for NetworkAnalyticsEventMessage(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v7))
    {
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v7);
    }
    uint64_t v10 = *(int *)(a3 + 20);
    uint64_t v11 = *(int *)(a3 + 24);
    uint64_t v12 = *(void **)((char *)a2 + v10);
    *(uint64_t *)((char *)a1 + v10) = (uint64_t)v12;
    uint64_t v13 = (char *)a1 + v11;
    uint64_t v14 = (char *)a2 + v11;
    *(void *)uint64_t v13 = *(void *)v14;
    v13[8] = v14[8];
    id v15 = v12;
  }
  return a1;
}

void destroy for NetworkAnalyticsEventMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  if (!__swift_getEnumTagSinglePayload(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  int v5 = *(void **)(a1 + *(int *)(a2 + 20));
}

char *initializeWithCopy for NetworkAnalyticsEventMessage(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = *(void **)&a2[v8];
  *(void *)&a1[v8] = v10;
  uint64_t v11 = &a1[v9];
  uint64_t v12 = &a2[v9];
  *(void *)uint64_t v11 = *(void *)v12;
  v11[8] = v12[8];
  id v13 = v10;
  return a1;
}

char *assignWithCopy for NetworkAnalyticsEventMessage(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 1, v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6);
  if (!EnumTagSinglePayload)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
LABEL_7:
  uint64_t v11 = *(int *)(a3 + 20);
  uint64_t v12 = *(void **)&a1[v11];
  id v13 = *(void **)&a2[v11];
  *(void *)&a1[v11] = v13;
  id v14 = v13;

  uint64_t v15 = *(int *)(a3 + 24);
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  uint64_t v18 = *(void *)v17;
  v16[8] = v17[8];
  *(void *)uint64_t v16 = v18;
  return a1;
}

char *initializeWithTake for NetworkAnalyticsEventMessage(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = *(int *)(a3 + 24);
  *(void *)&a1[*(int *)(a3 + 20)] = *(void *)&a2[*(int *)(a3 + 20)];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  *(void *)uint64_t v9 = *(void *)v10;
  v9[8] = v10[8];
  return a1;
}

char *assignWithTake for NetworkAnalyticsEventMessage(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 1, v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6);
  if (!EnumTagSinglePayload)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
LABEL_7:
  uint64_t v11 = *(int *)(a3 + 20);
  uint64_t v12 = *(void **)&a1[v11];
  *(void *)&a1[v11] = *(void *)&a2[v11];

  uint64_t v13 = *(int *)(a3 + 24);
  id v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  *(void *)id v14 = *(void *)v15;
  v14[8] = v15[8];
  return a1;
}

uint64_t getEnumTagSinglePayload for NetworkAnalyticsEventMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25D718938);
}

uint64_t sub_25D718938(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_0_3();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return __swift_getEnumTagSinglePayload(a1, a2, v6);
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v9 >= 0xFFFFFFFF) {
      LODWORD(v9) = -1;
    }
    int v10 = v9 - 1;
    if (v10 < 0) {
      int v10 = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for NetworkAnalyticsEventMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25D7189E8);
}

void sub_25D7189E8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_0_3();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    __swift_storeEnumTagSinglePayload(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = a2;
  }
}

void type metadata completion function for NetworkAnalyticsEventMessage()
{
  type metadata accessor for UUID?();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_25D718B14()
{
  uint64_t v1 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = (v6 + 24) & ~v6;
  uint64_t v8 = v7 + *(void *)(v5 + 64);
  uint64_t v9 = v6 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0 + v7, v1);

  return MEMORY[0x270FA0238](v0, v8, v9);
}

void partial apply for closure #1 in NetworkAnalytics.emitAllCachedMessagesFor(_:)()
{
  uint64_t v0 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_23_3(v0);
  uint64_t v1 = OUTLINED_FUNCTION_57_0();

  closure #1 in NetworkAnalytics.emitAllCachedMessagesFor(_:)(v1, v2);
}

uint64_t outlined destroy of UUID?(uint64_t a1, uint64_t *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_42_0();
  OUTLINED_FUNCTION_12_2();
  v3();
  return a1;
}

uint64_t outlined destroy of NetworkAnalyticsEventMessage(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NetworkAnalyticsEventMessage(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined assign with take of UUID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of NetworkAnalyticsEventMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NetworkAnalyticsEventMessage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_1_14@<X0>(uint64_t a1@<X8>)
{
  uint64_t v5 = v1 + a1;
  uint64_t result = __swift_storeEnumTagSinglePayload(v1 + a1, 1, 1, v2);
  *(void *)(v5 + *(int *)(v3 + 20)) = 0;
  uint64_t v7 = v5 + *(int *)(v3 + 24);
  *(void *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 8) = v4;
  return result;
}

uint64_t OUTLINED_FUNCTION_3_10()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_6_4()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

void OUTLINED_FUNCTION_9_4()
{
  JUMPOUT(0x2611B24E0);
}

uint64_t OUTLINED_FUNCTION_10_3(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(a1, 1, v1);
}

void OUTLINED_FUNCTION_11_2()
{
  *(void *)(v1 - 256) = v0;
}

uint64_t OUTLINED_FUNCTION_14_2()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_15_2()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_16_3()
{
  return *(void *)(v0 - 336);
}

uint64_t OUTLINED_FUNCTION_19_3(uint64_t a1)
{
  return a1 - 8;
}

uint64_t OUTLINED_FUNCTION_23_3(uint64_t a1)
{
  return a1 - 8;
}

uint64_t OUTLINED_FUNCTION_25_2(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(a1, 1, 1, v1);
}

uint64_t OUTLINED_FUNCTION_26_1()
{
  return *(void *)(v0 + 16);
}

uint64_t OUTLINED_FUNCTION_29_2()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_30_3()
{
  return swift_unknownObjectWeakInit();
}

uint64_t OUTLINED_FUNCTION_33_3()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_34_3()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_35_1()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_39_0()
{
  return type metadata accessor for UUID();
}

uint64_t OUTLINED_FUNCTION_40_0()
{
  return swift_isEscapingClosureAtFileLocation();
}

uint64_t OUTLINED_FUNCTION_41_0()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_44_0()
{
  return mach_absolute_time();
}

uint64_t OUTLINED_FUNCTION_45_0()
{
  return v0;
}

void OUTLINED_FUNCTION_47_0()
{
  JUMPOUT(0x2611B24E0);
}

uint64_t OUTLINED_FUNCTION_49_0(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(v1, 1, a1);
}

uint64_t OUTLINED_FUNCTION_50_0(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(v1, 1, 1, a1);
}

uint64_t OUTLINED_FUNCTION_51()
{
  return __swift_storeEnumTagSinglePayload(v1, 0, 1, v0);
}

uint64_t OUTLINED_FUNCTION_52_0()
{
  return v0;
}

void OUTLINED_FUNCTION_54_0()
{
  uint64_t v2 = *(void **)(v0 - 376);
}

uint64_t OUTLINED_FUNCTION_56_0(uint64_t a1)
{
  *(void *)(v1 - 224) = a1;
  return v1 - 224;
}

uint64_t OUTLINED_FUNCTION_57_0()
{
  return *(void *)(v0 + 16);
}

void OUTLINED_FUNCTION_59(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + v2);
}

uint64_t OUTLINED_FUNCTION_60_0()
{
  return type metadata accessor for UUID();
}

uint64_t destroy for ConnectionEndpointReport()
{
  return swift_bridgeObjectRelease();
}

void *initializeBufferWithCopyOfBuffer for ConnectionEndpointReport(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ConnectionEndpointReport(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

void *assignWithTake for ConnectionEndpointReport(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

uint64_t getEnumTagSinglePayload for ConnectionEndpointReport(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConnectionEndpointReport(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ConnectionEndpointReport()
{
  return &type metadata for ConnectionEndpointReport;
}

uint64_t ConnectionEndpointReport.debugDescription.getter(uint64_t a1, void *a2)
{
  swift_bridgeObjectRetain();
  v4._uint64_t countAndFlagsBits = a1;
  v4._object = a2;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(55);
  v7._object = (void *)0x800000025D7959B0;
  v7._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  String.append(_:)(v7);
  v8._uint64_t countAndFlagsBits = 0x2074736F68;
  v8._object = (void *)0xE500000000000000;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 8236;
  v9._object = (void *)0xE200000000000000;
  String.append(_:)(v9);
  v10._uint64_t countAndFlagsBits = 0x2074726F70;
  v10._object = (void *)0xE500000000000000;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = 8236;
  v11._object = (void *)0xE200000000000000;
  String.append(_:)(v11);
  v12._uint64_t countAndFlagsBits = 0x2065707974;
  v12._object = (void *)0xE500000000000000;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._uint64_t countAndFlagsBits = 93;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  return 0;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ConnectionEndpointReport()
{
  return ConnectionEndpointReport.debugDescription.getter(*(void *)v0, *(void **)(v0 + 8));
}

uint64_t initializeBufferWithCopyOfBuffer for ConnectionProviderState(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  unsigned __int8 v4 = *(unsigned char *)(a2 + 8);
  outlined copy of ConnectionProviderState(*(id *)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

void destroy for ConnectionProviderState(uint64_t a1)
{
}

uint64_t assignWithCopy for ConnectionProviderState(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  unsigned __int8 v4 = *(unsigned char *)(a2 + 8);
  outlined copy of ConnectionProviderState(*(id *)a2, v4);
  Swift::String v5 = *(void **)a1;
  *(void *)a1 = v3;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v4;
  outlined consume of ConnectionProviderState(v5, v6);
  return a1;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)__n128 result = v2;
  return result;
}

uint64_t assignWithTake for ConnectionProviderState(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  unsigned __int8 v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  unsigned __int8 v5 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v3;
  outlined consume of ConnectionProviderState(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConnectionProviderState(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFE && *(unsigned char *)(a1 + 9))
    {
      int v2 = *(_DWORD *)a1 + 253;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
      if (v3 <= 2) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConnectionProviderState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for ConnectionProviderState(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u) {
    return *(unsigned __int8 *)(a1 + 8);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t destructiveInjectEnumTag for ConnectionProviderState(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)__n128 result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ConnectionProviderState()
{
  return &type metadata for ConnectionProviderState;
}

uint64_t ConnectionProviderState.init(from:)(uint64_t a1)
{
  type metadata accessor for NWError();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  MEMORY[0x270FA5388](v4);
  uint64_t v5 = type metadata accessor for NWConnection.State();
  OUTLINED_FUNCTION_0_0();
  uint64_t v7 = v6;
  MEMORY[0x270FA5388](v8);
  Swift::String v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a1, v5);
  int v11 = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v10, v5);
  if (v11 == *MEMORY[0x263F14218] || (int v18 = v11, v11 == *MEMORY[0x263F14210]))
  {
    uint64_t v12 = OUTLINED_FUNCTION_3_11();
    v13(v12);
    id v14 = *(void (**)(void))(v3 + 32);
    OUTLINED_FUNCTION_2_11();
    v14();
    lazy protocol witness table accessor for type NWError and conformance NWError();
    uint64_t v15 = OUTLINED_FUNCTION_4_8();
    OUTLINED_FUNCTION_2_11();
    v14();
    uint64_t v16 = OUTLINED_FUNCTION_0_16();
    v17(v16);
  }
  else
  {
    if (v11 == *MEMORY[0x263F14208])
    {
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v5);
    }
    else
    {
      if (v11 == *MEMORY[0x263F14228])
      {
        uint64_t v19 = OUTLINED_FUNCTION_0_16();
        v20(v19);
        return 1;
      }
      if (v11 == *MEMORY[0x263F14200])
      {
        uint64_t v21 = OUTLINED_FUNCTION_0_16();
        v22(v21);
        return 2;
      }
      int v23 = *MEMORY[0x263F14220];
      uint64_t v24 = *(void (**)(uint64_t))(v7 + 8);
      uint64_t v25 = OUTLINED_FUNCTION_0_16();
      v24(v25);
      if (v18 == v23) {
        return 3;
      }
      ((void (*)(char *, uint64_t))v24)(v10, v5);
    }
    return 0;
  }
  return v15;
}

unint64_t lazy protocol witness table accessor for type NWError and conformance NWError()
{
  unint64_t result = lazy protocol witness table cache variable for type NWError and conformance NWError;
  if (!lazy protocol witness table cache variable for type NWError and conformance NWError)
  {
    type metadata accessor for NWError();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NWError and conformance NWError);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_16()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_3_11()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_4_8()
{
  return swift_allocError();
}

BOOL NetworkWiFiManager.registerOneShotPowerStateDidChangeForWiFiInterface(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  OUTLINED_FUNCTION_0_0();
  uint64_t v8 = v7;
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_2();
  type metadata accessor for DispatchQoS();
  OUTLINED_FUNCTION_0_0();
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  id v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    uint64_t v15 = *(void **)(v2 + OBJC_IVAR___SNNetworkWiFiManagerInternal_queue);
    uint64_t v22 = v12;
    uint64_t v23 = v11;
    uint64_t v16 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v17 = (void *)swift_allocObject();
    v17[2] = v16;
    v17[3] = a1;
    v17[4] = a2;
    aBlock[4] = partial apply for closure #1 in NetworkWiFiManager.registerOneShotPowerStateDidChangeForWiFiInterface(_:);
    aBlock[5] = v17;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    aBlock[3] = &block_descriptor_7;
    int v18 = _Block_copy(aBlock);
    id v19 = v15;
    swift_retain();
    outlined copy of (@escaping @callee_guaranteed (@in_guaranteed LinkRecommendationInfo?) -> ())?(a1);
    static DispatchQoS.unspecified.getter();
    uint64_t v24 = MEMORY[0x263F8EE78];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x2611B24E0](0, v14, v3, v18);
    _Block_release(v18);

    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v3, v6);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v14, v23);
    swift_release();
    swift_release();
  }
  return a1 != 0;
}

uint64_t sub_25D719DD8()
{
  swift_unknownObjectWeakDestroy();
  uint64_t v0 = OUTLINED_FUNCTION_90();

  return MEMORY[0x270FA0238](v0, v1, v2);
}

void closure #1 in NetworkWiFiManager.registerOneShotPowerStateDidChangeForWiFiInterface(_:)(uint64_t a1, void (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  MEMORY[0x270FA5388](v6);
  swift_beginAccess();
  uint64_t v7 = MEMORY[0x2611B37F0](a1 + 16);
  if (!v7) {
    return;
  }
  uint64_t v8 = (char *)v7;
  if (NetworkWiFiManager.isWiFiEnabled()())
  {
    if (a2)
    {
      uint64_t v9 = swift_retain();
      a2(v9);

      outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?((uint64_t)a2);
      return;
    }
    goto LABEL_15;
  }
  uint64_t v10 = OBJC_IVAR___SNNetworkWiFiManagerInternal_queueGroup;
  uint64_t v11 = &off_25D790000;
  if (*(void *)&v8[OBJC_IVAR___SNNetworkWiFiManagerInternal_queueGroup])
  {
LABEL_6:
    if (a2)
    {
      uint64_t v12 = swift_allocObject();
      *(void *)(v12 + 16) = a2;
      *(void *)(v12 + 24) = a3;
      uint64_t v42 = partial apply for thunk for @callee_guaranteed () -> ();
      uint64_t v43 = v12;
      id aBlock = (id)MEMORY[0x263EF8330];
      uint64_t v39 = *((void *)v11 + 393);
      uint64_t v40 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      uint64_t v41 = &block_descriptor_16_1;
      _Block_copy(&aBlock);
      outlined copy of (@escaping @callee_guaranteed (@in_guaranteed LinkRecommendationInfo?) -> ())?((uint64_t)a2);
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
      dispatch thunk of SetAlgebra.init<A>(_:)();
      type metadata accessor for DispatchWorkItem();
      swift_allocObject();
      DispatchWorkItem.init(flags:block:)();
      swift_release();
      uint64_t v13 = *(void **)&v8[v10];
      if (v13)
      {
        id v14 = *(void **)&v8[OBJC_IVAR___SNNetworkWiFiManagerInternal_queue];
        id v15 = v13;
        id v16 = v14;
        OS_dispatch_group.notify(queue:work:)();
        outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?((uint64_t)a2);
      }
      else
      {
        outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?((uint64_t)a2);
      }

      swift_release();
      return;
    }
LABEL_15:

    return;
  }
  uint64_t v17 = OBJC_IVAR___SNNetworkWiFiManagerInternal_interface;
  int v18 = *(void **)&v8[OBJC_IVAR___SNNetworkWiFiManagerInternal_interface];
  if (!v18) {
    goto LABEL_13;
  }
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v8;
  uint64_t v42 = partial apply for closure #1 in closure #1 in NetworkWiFiManager.registerOneShotPowerStateDidChangeForWiFiInterface(_:);
  uint64_t v43 = v19;
  id aBlock = (id)MEMORY[0x263EF8330];
  uint64_t v39 = 1107296256;
  uint64_t v40 = thunk for @escaping @callee_guaranteed (@guaranteed OspreyConnectionMetrics) -> ();
  uint64_t v41 = &block_descriptor_22;
  uint64_t v20 = _Block_copy(&aBlock);
  id v21 = v18;
  uint64_t v37 = v8;
  uint64_t v11 = &off_25D790000;
  swift_release();
  objc_msgSend(v21, sel_setEventHandler_, v20);
  _Block_release(v20);

  uint64_t v22 = *(void **)&v8[v17];
  if (!v22)
  {
LABEL_13:
    dispatch_group_t v24 = dispatch_group_create();
    NetworkWiFiManager.queueGroup.setter((uint64_t)v24);
    uint64_t v25 = *(NSObject **)&v8[v10];
    if (!v25) {
      goto LABEL_15;
    }
    dispatch_group_enter(v25);
    if (!*(void *)&v8[v10]) {
      goto LABEL_15;
    }
    goto LABEL_6;
  }
  id aBlock = 0;
  if (objc_msgSend(v22, sel_startMonitoringEventType_error_, 1, &aBlock))
  {
    id v23 = aBlock;
    goto LABEL_13;
  }
  id v26 = aBlock;
  uint64_t v27 = (void *)_convertNSErrorToError(_:)();

  swift_willThrow();
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v28 = type metadata accessor for Logger();
  __swift_project_value_buffer(v28, (uint64_t)static Logger.siriNetwork);
  id v29 = v27;
  id v30 = v27;
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = (uint8_t *)swift_slowAlloc();
    uint64_t v34 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v33 = 138412290;
    id v35 = v27;
    uint64_t v36 = (void *)_swift_stdlib_bridgeErrorToNSError();
    id aBlock = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v34 = v36;

    _os_log_impl(&dword_25D6CC000, v31, v32, "NetworkWiFiManager - PowerNotification: Failed registering for power notifications, error: %@", v33, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x2611B3750](v34, -1, -1);
    MEMORY[0x2611B3750](v33, -1, -1);
  }
  else
  {
  }
}

uint64_t sub_25D71A384()
{
  swift_release();
  if (*(void *)(v0 + 24)) {
    swift_release();
  }

  return MEMORY[0x270FA0238](v0, 40, 7);
}

void partial apply for closure #1 in NetworkWiFiManager.registerOneShotPowerStateDidChangeForWiFiInterface(_:)()
{
  closure #1 in NetworkWiFiManager.registerOneShotPowerStateDidChangeForWiFiInterface(_:)(*(void *)(v0 + 16), *(void (**)(uint64_t))(v0 + 24), *(void *)(v0 + 32));
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_7()
{
  return swift_release();
}

void closure #1 in closure #1 in NetworkWiFiManager.registerOneShotPowerStateDidChangeForWiFiInterface(_:)(void *a1, char *a2)
{
  if (objc_msgSend(a1, sel_type) == (id)1)
  {
    uint64_t v3 = *(void **)&a2[OBJC_IVAR___SNNetworkWiFiManagerInternal_interface];
    if (v3 && (id v4 = objc_msgSend(v3, sel_interfaceName)) != 0)
    {
      uint64_t v5 = v4;
      uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v8 = v7;
    }
    else
    {
      uint64_t v6 = 0;
      unint64_t v8 = 0xE000000000000000;
    }
    id v9 = (id)MEMORY[0x2611B2220](v6, v8);
    swift_bridgeObjectRelease();
    objc_msgSend(a2, sel_powerStateDidChangeForWiFiInterfaceWithName_, v9);
  }
}

Swift::Void __swiftcall NetworkWiFiManager.powerStateDidChangeForWiFiInterface(withName:)(Swift::String withName)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v6);
  unint64_t v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  OUTLINED_FUNCTION_0_0();
  uint64_t v11 = v10;
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_2();
  if (NetworkWiFiManager.isWiFiEnabled()())
  {
    uint64_t v13 = *(void **)(v1 + OBJC_IVAR___SNNetworkWiFiManagerInternal_queue);
    uint64_t v14 = swift_allocObject();
    v18[0] = v9;
    uint64_t v15 = v14;
    swift_unknownObjectWeakInit();
    aBlock[4] = partial apply for closure #1 in NetworkWiFiManager.powerStateDidChangeForWiFiInterface(withName:);
    aBlock[5] = v15;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    aBlock[3] = &block_descriptor_7_0;
    id v16 = _Block_copy(aBlock);
    id v17 = v13;
    swift_retain();
    static DispatchQoS.unspecified.getter();
    v18[1] = MEMORY[0x263F8EE78];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x2611B24E0](0, v2, v8, v16);
    _Block_release(v16);

    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v3);
    (*(void (**)(uint64_t, void))(v11 + 8))(v2, v18[0]);
    swift_release();
    swift_release();
  }
}

void closure #1 in NetworkWiFiManager.powerStateDidChangeForWiFiInterface(withName:)(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x2611B37F0](v1);
  if (v2)
  {
    uint64_t v3 = (char *)v2;
    uint64_t v4 = *(NSObject **)(v2 + OBJC_IVAR___SNNetworkWiFiManagerInternal_queueGroup);
    if (v4)
    {
      dispatch_group_leave(v4);
      uint64_t v5 = OBJC_IVAR___SNNetworkWiFiManagerInternal_interface;
      uint64_t v6 = *(void **)&v3[OBJC_IVAR___SNNetworkWiFiManagerInternal_interface];
      if (v6)
      {
        objc_msgSend(v6, sel_setEventHandler_, 0);
        uint64_t v7 = *(void **)&v3[v5];
        if (v7) {
          objc_msgSend(v7, sel_stopMonitoringEventType_, 1);
        }
      }
      NetworkWiFiManager.queueGroup.setter(0);
    }
  }
}

void partial apply for closure #1 in NetworkWiFiManager.powerStateDidChangeForWiFiInterface(withName:)()
{
  closure #1 in NetworkWiFiManager.powerStateDidChangeForWiFiInterface(withName:)(v0);
}

uint64_t sub_25D71A8C0()
{
  _Block_release(*(const void **)(v0 + 16));
  uint64_t v1 = OUTLINED_FUNCTION_90();

  return MEMORY[0x270FA0238](v1, v2, v3);
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) () -> ()()
{
  return thunk for @escaping @callee_unowned @convention(block) () -> ()(*(void *)(v0 + 16));
}

uint64_t sub_25D71A8F8()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_25D71A930()
{
  uint64_t v1 = OUTLINED_FUNCTION_90();

  return MEMORY[0x270FA0238](v1, v2, v3);
}

void partial apply for closure #1 in closure #1 in NetworkWiFiManager.registerOneShotPowerStateDidChangeForWiFiInterface(_:)(void *a1)
{
  closure #1 in closure #1 in NetworkWiFiManager.registerOneShotPowerStateDidChangeForWiFiInterface(_:)(a1, *(char **)(v1 + 16));
}

uint64_t ConnectionMetrics.connectionIdentifier.getter()
{
  return *(void *)v0;
}

uint64_t ConnectionMetrics.connectionIdentifier.setter(uint64_t result, char a2)
{
  *(void *)uint64_t v2 = result;
  *(unsigned char *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t (*ConnectionMetrics.connectionIdentifier.modify())(void)
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

uint64_t ConnectionMetrics.connectionMethodHistory.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ConnectionMetrics.connectionMethodHistory.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*ConnectionMetrics.connectionMethodHistory.modify())(void)
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

uint64_t ConnectionMetrics.policyId.getter()
{
  return OUTLINED_FUNCTION_23_0();
}

uint64_t ConnectionMetrics.policyId.setter()
{
  OUTLINED_FUNCTION_2_12();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 24) = v2;
  *(void *)(v1 + 32) = v0;
  return result;
}

uint64_t (*ConnectionMetrics.policyId.modify())(void)
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

uint64_t ConnectionMetrics.remoteMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 40);
  if (*(void *)(v3 + 16))
  {
    memcpy(v7, (const void *)(v3 + 32), 0x599uLL);
    uint64_t v4 = (void *)OUTLINED_FUNCTION_23_0();
    memmove(v4, v5, 0x599uLL);
    destructiveProjectEnumData for ConnectionConfigurationError(a1);
    return outlined retain of ConnectionMetrics((uint64_t)v7);
  }
  else
  {
    _s11SiriNetwork17ConnectionMetricsVSgWOi0_(v7);
    return outlined init with take of ConnectionMetrics?((uint64_t)v7, a1);
  }
}

uint64_t outlined init with take of ConnectionMetrics?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t key path getter for ConnectionMetrics.remoteMetrics : ConnectionMetrics@<X0>(uint64_t a1@<X8>)
{
  ConnectionMetrics.remoteMetrics.getter((uint64_t)v3);
  outlined init with take of ConnectionMetrics?((uint64_t)v3, (uint64_t)v4);
  return outlined init with take of ConnectionMetrics?((uint64_t)v4, a1);
}

uint64_t key path setter for ConnectionMetrics.remoteMetrics : ConnectionMetrics(uint64_t a1)
{
  outlined init with take of ConnectionMetrics?(a1, (uint64_t)v3);
  outlined init with take of ConnectionMetrics?((uint64_t)v3, (uint64_t)v2);
  outlined release of ConnectionMetrics?(v3, outlined copy of ConnectionMetrics?);
  return ConnectionMetrics.remoteMetrics.setter((uint64_t)v2);
}

uint64_t ConnectionMetrics.remoteMetrics.setter(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1);
  outlined init with take of ConnectionMetrics?(v2, (uint64_t)v8);
  outlined init with take of ConnectionMetrics?((uint64_t)v8, (uint64_t)__src);
  if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)__src) == 1)
  {
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v1 + 40) = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v4 = (uint64_t *)(v1 + 40);
    swift_bridgeObjectRelease();
    *uint64_t v4 = MEMORY[0x263F8EE78];
    outlined init with take of ConnectionMetrics?((uint64_t)v8, (uint64_t)v7);
    outlined retain of ConnectionMetrics((uint64_t)v7);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
    uint64_t v5 = *(void *)(*v4 + 16);
    specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v5, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
    uint64_t v6 = *v4;
    *(void *)(v6 + 16) = v5 + 1;
    memcpy((void *)(v6 + 1440 * v5 + 32), __src, 0x599uLL);
    uint64_t result = outlined release of ConnectionMetrics?(v8, outlined consume of ConnectionMetrics?);
    *uint64_t v4 = v6;
  }
  return result;
}

void (*ConnectionMetrics.remoteMetrics.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = (char *)malloc(0x1688uLL);
  uint64_t v4 = v3;
  *a1 = v3;
  uint64_t v5 = (uint64_t)(v3 + 1440);
  *((void *)v3 + 720) = v1;
  uint64_t v6 = *(void *)(v1 + 40);
  if (*(void *)(v6 + 16))
  {
    uint64_t v7 = (const void *)(v6 + 32);
    memcpy(v3 + 1440, (const void *)(v6 + 32), 0x599uLL);
    memmove(v4, v7, 0x599uLL);
    destructiveProjectEnumData for ConnectionConfigurationError(v4);
    outlined retain of ConnectionMetrics(v5);
  }
  else
  {
    _s11SiriNetwork17ConnectionMetricsVSgWOi0_(v3 + 1440);
    outlined init with take of ConnectionMetrics?(v5, (uint64_t)v4);
  }
  return ConnectionMetrics.remoteMetrics.modify;
}

void ConnectionMetrics.remoteMetrics.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = (void *)*a1;
  uint64_t v4 = (const void *)(*a1 + 1440);
  uint64_t v5 = *a1 + 2880;
  uint64_t v6 = *a1 + 4320;
  outlined init with take of ConnectionMetrics?(*a1, v5);
  outlined init with take of ConnectionMetrics?(v5, (uint64_t)v4);
  int v7 = _s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v4);
  uint64_t v8 = v3[720] + 40;
  if (a2)
  {
    if (v7 == 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v10 = MEMORY[0x263F8EE78];
    }
    else
    {
      outlined init with take of ConnectionMetrics?(v5, v6);
      outlined retain of ConnectionMetrics(v6);
      swift_bridgeObjectRelease();
      *(void *)uint64_t v8 = MEMORY[0x263F8EE78];
      outlined retain of ConnectionMetrics(v6);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
      uint64_t v9 = *(void *)(*(void *)v8 + 16);
      specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v9, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
      uint64_t v10 = *(void *)v8;
      *(void *)(v10 + 16) = v9 + 1;
      memcpy((void *)(v10 + 1440 * v9 + 32), v4, 0x599uLL);
      outlined release of ConnectionMetrics?(v5, outlined consume of ConnectionMetrics?);
    }
    *(void *)(v3[720] + 40) = v10;
    outlined init with take of ConnectionMetrics?((uint64_t)v3, v6);
    outlined release of ConnectionMetrics?(v6, outlined consume of ConnectionMetrics?);
  }
  else
  {
    if (v7 == 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v12 = MEMORY[0x263F8EE78];
    }
    else
    {
      swift_bridgeObjectRelease();
      *(void *)uint64_t v8 = MEMORY[0x263F8EE78];
      outlined init with take of ConnectionMetrics?(v5, v6);
      outlined retain of ConnectionMetrics(v6);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
      uint64_t v11 = *(void *)(*(void *)v8 + 16);
      specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v11, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
      uint64_t v12 = *(void *)v8;
      *(void *)(v12 + 16) = v11 + 1;
      memcpy((void *)(v12 + 1440 * v11 + 32), v4, 0x599uLL);
      outlined release of ConnectionMetrics?(v5, outlined consume of ConnectionMetrics?);
    }
    *(void *)(v3[720] + 40) = v12;
  }

  free(v3);
}

unint64_t ConnectionMetrics.metricsCount.getter()
{
  return *(unsigned int *)(v0 + 48) | ((unint64_t)*(unsigned __int8 *)(v0 + 52) << 32);
}

uint64_t ConnectionMetrics.metricsCount.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 48) = result;
  *(unsigned char *)(v1 + 52) = BYTE4(result) & 1;
  return result;
}

uint64_t (*ConnectionMetrics.metricsCount.modify())(void)
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

uint64_t ConnectionMetrics.attemptedEndpoints.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ConnectionMetrics.attemptedEndpoints.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 1280) = a1;
  return result;
}

uint64_t (*ConnectionMetrics.attemptedEndpoints.modify())(void)
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

uint64_t ConnectionMetrics.connectionEdgeID.getter()
{
  return OUTLINED_FUNCTION_23_0();
}

uint64_t ConnectionMetrics.connectionEdgeID.setter()
{
  OUTLINED_FUNCTION_2_12();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 1288) = v2;
  *(void *)(v1 + 1296) = v0;
  return result;
}

uint64_t (*ConnectionMetrics.connectionEdgeID.modify())(void)
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

uint64_t ConnectionMetrics.connectionEdgeType.getter()
{
  return OUTLINED_FUNCTION_23_0();
}

uint64_t ConnectionMetrics.connectionEdgeType.setter()
{
  OUTLINED_FUNCTION_2_12();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 1304) = v2;
  *(void *)(v1 + 1312) = v0;
  return result;
}

uint64_t (*ConnectionMetrics.connectionEdgeType.modify())(void)
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

void ConnectionMetrics.connectionFallbackReason.getter()
{
}

uint64_t ConnectionMetrics.connectionFallbackReason.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 1320) = result;
  *(unsigned char *)(v2 + 1328) = a2 & 1;
  return result;
}

uint64_t (*ConnectionMetrics.connectionFallbackReason.modify())(void)
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

void ConnectionMetrics.connectionDelay.getter()
{
}

uint64_t ConnectionMetrics.connectionDelay.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 1336) = result;
  *(unsigned char *)(v2 + 1344) = a2 & 1;
  return result;
}

uint64_t (*ConnectionMetrics.connectionDelay.modify())(void)
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

void ConnectionMetrics.firstTxByteDelay.getter()
{
}

uint64_t ConnectionMetrics.firstTxByteDelay.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 1352) = result;
  *(unsigned char *)(v2 + 1360) = a2 & 1;
  return result;
}

uint64_t (*ConnectionMetrics.firstTxByteDelay.modify())(void)
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

uint64_t ConnectionMetrics.wifiChannelInfo.getter()
{
  return OUTLINED_FUNCTION_23_0();
}

uint64_t ConnectionMetrics.wifiChannelInfo.setter()
{
  OUTLINED_FUNCTION_2_12();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 1368) = v2;
  *(void *)(v1 + 1376) = v0;
  return result;
}

uint64_t (*ConnectionMetrics.wifiChannelInfo.modify())(void)
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

unint64_t ConnectionMetrics.simSubscriptions.getter()
{
  return *(unsigned int *)(v0 + 1384) | ((unint64_t)*(unsigned __int8 *)(v0 + 1388) << 32);
}

uint64_t ConnectionMetrics.simSubscriptions.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 1384) = result;
  *(unsigned char *)(v1 + 1388) = BYTE4(result) & 1;
  return result;
}

uint64_t (*ConnectionMetrics.simSubscriptions.modify())(void)
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

void ConnectionMetrics.idsLastMessageDelay.getter()
{
}

uint64_t ConnectionMetrics.idsLastMessageDelay.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 1392) = result;
  *(unsigned char *)(v2 + 1400) = a2 & 1;
  return result;
}

uint64_t (*ConnectionMetrics.idsLastMessageDelay.modify())(void)
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

void ConnectionMetrics.idsLastSocketDelay.getter()
{
}

uint64_t ConnectionMetrics.idsLastSocketDelay.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 1408) = result;
  *(unsigned char *)(v2 + 1416) = a2 & 1;
  return result;
}

uint64_t (*ConnectionMetrics.idsLastSocketDelay.modify())(void)
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

void ConnectionMetrics.idsLastSocketOpenError.getter()
{
}

uint64_t ConnectionMetrics.idsLastSocketOpenError.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 1424) = result;
  *(unsigned char *)(v2 + 1432) = a2 & 1;
  return result;
}

uint64_t (*ConnectionMetrics.idsLastSocketOpenError.modify())(void)
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return MEMORY[0x270F9DBA0]();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  uint64_t *v1 = v3;
  if (!result)
  {
    uint64_t result = a1(result, *(void *)(v3 + 16) + 1, 1, v3);
    uint64_t *v1 = result;
  }
  return result;
}

uint64_t specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t a1)
{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t result, uint64_t (*a2)(BOOL))
{
  unint64_t v3 = *(void *)(*(void *)v2 + 24);
  if (result + 1 > (uint64_t)(v3 >> 1))
  {
    uint64_t result = a2(v3 > 1);
    *(void *)uint64_t v2 = result;
  }
  return result;
}

uint64_t destroy for ConnectionMetrics(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(a1 + 88);
  if (v2)
  {
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
  }
  if (*(void *)(a1 + 432))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(void *)(a1 + 144))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*(void *)(a1 + 184) != 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(void *)(a1 + 512))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(void *)(a1 + 584))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(void *)(a1 + 712))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (*(void *)(a1 + 960))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*(void *)(a1 + 1000) != 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for ConnectionMetrics(void *a1, void *a2)
{
  *a1 = *a2;
  *((unsigned char *)a1 + 8) = *((unsigned char *)a2 + 8);
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  *((_DWORD *)a1 + 12) = *((_DWORD *)a2 + 12);
  *((unsigned char *)a1 + 52) = *((unsigned char *)a2 + 52);
  uint64_t v6 = (void *)a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6)
  {
    uint64_t v7 = a2[8];
    a1[7] = a2[7];
    a1[8] = v7;
    uint64_t v8 = a2[10];
    a1[9] = a2[9];
    a1[10] = v8;
    a1[11] = v6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v9 = v6;
  }
  else
  {
    long long v10 = *(_OWORD *)(a2 + 9);
    *(_OWORD *)(a1 + 7) = *(_OWORD *)(a2 + 7);
    *(_OWORD *)(a1 + 9) = v10;
    a1[11] = a2[11];
  }
  uint64_t v11 = a2[54];
  if (!v11)
  {
    memcpy(a1 + 12, a2 + 12, 0x168uLL);
    goto LABEL_13;
  }
  uint64_t v12 = a2[13];
  a1[12] = a2[12];
  a1[13] = v12;
  uint64_t v13 = a2[15];
  a1[14] = a2[14];
  a1[15] = v13;
  *((_DWORD *)a1 + 32) = *((_DWORD *)a2 + 32);
  *((unsigned char *)a1 + 132) = *((unsigned char *)a2 + 132);
  uint64_t v14 = a2[18];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v14)
  {
    a1[17] = a2[17];
    a1[18] = v14;
    uint64_t v15 = a2[20];
    a1[19] = a2[19];
    a1[20] = v15;
    *((unsigned char *)a1 + 168) = *((unsigned char *)a2 + 168);
    *((_DWORD *)a1 + 43) = *((_DWORD *)a2 + 43);
    uint64_t v16 = a2[23];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v16 != 1)
    {
      a1[22] = a2[22];
      a1[23] = v16;
      uint64_t v20 = a2[25];
      a1[24] = a2[24];
      a1[25] = v20;
      *((unsigned char *)a1 + 208) = *((unsigned char *)a2 + 208);
      a1[27] = a2[27];
      *((unsigned char *)a1 + 224) = *((unsigned char *)a2 + 224);
      a1[29] = a2[29];
      *((unsigned char *)a1 + 240) = *((unsigned char *)a2 + 240);
      uint64_t v21 = a2[31];
      *((unsigned char *)a1 + 256) = *((unsigned char *)a2 + 256);
      a1[31] = v21;
      a1[33] = a2[33];
      *((unsigned char *)a1 + 272) = *((unsigned char *)a2 + 272);
      a1[35] = a2[35];
      *((unsigned char *)a1 + 288) = *((unsigned char *)a2 + 288);
      a1[37] = a2[37];
      *((unsigned char *)a1 + 304) = *((unsigned char *)a2 + 304);
      *((unsigned char *)a1 + 320) = *((unsigned char *)a2 + 320);
      a1[39] = a2[39];
      *((unsigned char *)a1 + 336) = *((unsigned char *)a2 + 336);
      a1[41] = a2[41];
      *((unsigned char *)a1 + 344) = *((unsigned char *)a2 + 344);
      *((_DWORD *)a1 + 85) = *((_DWORD *)a2 + 85);
      *((unsigned char *)a1 + 352) = *((unsigned char *)a2 + 352);
      *((_DWORD *)a1 + 87) = *((_DWORD *)a2 + 87);
      *((unsigned char *)a1 + 360) = *((unsigned char *)a2 + 360);
      *((_DWORD *)a1 + 89) = *((_DWORD *)a2 + 89);
      LODWORD(v21) = *((_DWORD *)a2 + 91);
      *((unsigned char *)a1 + 368) = *((unsigned char *)a2 + 368);
      *((_DWORD *)a1 + 91) = v21;
      uint64_t v22 = a2[47];
      *((unsigned char *)a1 + 384) = *((unsigned char *)a2 + 384);
      a1[47] = v22;
      uint64_t v23 = a2[49];
      *((unsigned char *)a1 + 400) = *((unsigned char *)a2 + 400);
      a1[49] = v23;
      LODWORD(v23) = *((_DWORD *)a2 + 101);
      *((unsigned char *)a1 + 408) = *((unsigned char *)a2 + 408);
      *((_DWORD *)a1 + 101) = v23;
      LODWORD(v23) = *((_DWORD *)a2 + 103);
      *((unsigned char *)a1 + 416) = *((unsigned char *)a2 + 416);
      *((_DWORD *)a1 + 103) = v23;
      LODWORD(v23) = *((_DWORD *)a2 + 105);
      *((unsigned char *)a1 + 424) = *((unsigned char *)a2 + 424);
      *((_DWORD *)a1 + 105) = v23;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_12;
    }
    id v17 = a1 + 22;
    int v18 = a2 + 22;
    size_t v19 = 249;
  }
  else
  {
    id v17 = a1 + 17;
    int v18 = a2 + 17;
    size_t v19 = 289;
  }
  memcpy(v17, v18, v19);
LABEL_12:
  uint64_t v24 = a2[55];
  uint64_t v25 = (void *)a2[56];
  a1[54] = v11;
  a1[55] = v24;
  a1[56] = v25;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v26 = v25;
LABEL_13:
  uint64_t v27 = a2[64];
  if (v27)
  {
    uint64_t v28 = a2[58];
    a1[57] = a2[57];
    a1[58] = v28;
    *((_DWORD *)a1 + 118) = *((_DWORD *)a2 + 118);
    *((unsigned char *)a1 + 476) = *((unsigned char *)a2 + 476);
    a1[60] = a2[60];
    *((unsigned char *)a1 + 488) = *((unsigned char *)a2 + 488);
    a1[62] = a2[62];
    *((unsigned char *)a1 + 504) = *((unsigned char *)a2 + 504);
    a1[64] = v27;
    a1[65] = a2[65];
    *((_WORD *)a1 + 264) = *((_WORD *)a2 + 264);
    a1[67] = a2[67];
    a1[68] = a2[68];
    a1[69] = a2[69];
    id v29 = (void *)a2[70];
    a1[70] = v29;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v30 = v29;
  }
  else
  {
    memcpy(a1 + 57, a2 + 57, 0x70uLL);
  }
  uint64_t v31 = a2[73];
  if (v31)
  {
    *((_DWORD *)a1 + 142) = *((_DWORD *)a2 + 142);
    a1[72] = a2[72];
    a1[73] = v31;
    a1[74] = a2[74];
    a1[75] = a2[75];
    uint64_t v32 = a2[89];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v32)
    {
      *((_DWORD *)a1 + 152) = *((_DWORD *)a2 + 152);
      *((unsigned char *)a1 + 612) = *((unsigned char *)a2 + 612);
      a1[77] = a2[77];
      a1[78] = a2[78];
      a1[79] = a2[79];
      *((unsigned char *)a1 + 640) = *((unsigned char *)a2 + 640);
      a1[81] = a2[81];
      a1[82] = a2[82];
      a1[83] = a2[83];
      a1[84] = a2[84];
      a1[85] = a2[85];
      a1[86] = a2[86];
      *((_DWORD *)a1 + 174) = *((_DWORD *)a2 + 174);
      *((unsigned char *)a1 + 700) = *((unsigned char *)a2 + 700);
      *((_DWORD *)a1 + 176) = *((_DWORD *)a2 + 176);
      *((unsigned char *)a1 + 708) = *((unsigned char *)a2 + 708);
      a1[89] = v32;
      a1[90] = a2[90];
      a1[91] = a2[91];
      *((unsigned char *)a1 + 744) = *((unsigned char *)a2 + 744);
      a1[92] = a2[92];
      *((unsigned char *)a1 + 760) = *((unsigned char *)a2 + 760);
      a1[94] = a2[94];
      *((unsigned char *)a1 + 776) = *((unsigned char *)a2 + 776);
      a1[96] = a2[96];
      *((unsigned char *)a1 + 792) = *((unsigned char *)a2 + 792);
      a1[98] = a2[98];
      uint64_t v33 = a2[100];
      *((unsigned char *)a1 + 808) = *((unsigned char *)a2 + 808);
      a1[100] = v33;
      uint64_t v34 = a2[102];
      *((unsigned char *)a1 + 824) = *((unsigned char *)a2 + 824);
      a1[102] = v34;
      a1[104] = a2[104];
      a1[105] = a2[105];
      uint64_t v35 = a2[106];
      *((unsigned char *)a1 + 856) = *((unsigned char *)a2 + 856);
      a1[106] = v35;
      uint64_t v36 = a2[108];
      *((unsigned char *)a1 + 872) = *((unsigned char *)a2 + 872);
      a1[108] = v36;
      *((unsigned char *)a1 + 873) = *((unsigned char *)a2 + 873);
      uint64_t v37 = a2[110];
      *((unsigned char *)a1 + 888) = *((unsigned char *)a2 + 888);
      a1[110] = v37;
      uint64_t v38 = a2[112];
      *((unsigned char *)a1 + 904) = *((unsigned char *)a2 + 904);
      a1[112] = v38;
      uint64_t v39 = a2[114];
      *((unsigned char *)a1 + 920) = *((unsigned char *)a2 + 920);
      a1[114] = v39;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      memcpy(a1 + 76, a2 + 76, 0x139uLL);
    }
    *((_OWORD *)a1 + 58) = *((_OWORD *)a2 + 58);
    *((unsigned char *)a1 + 944) = *((unsigned char *)a2 + 944);
    uint64_t v40 = a2[120];
    if (v40)
    {
      a1[119] = a2[119];
      a1[120] = v40;
      a1[121] = a2[121];
      a1[122] = a2[122];
      *((unsigned char *)a1 + 984) = *((unsigned char *)a2 + 984);
      *((_DWORD *)a1 + 247) = *((_DWORD *)a2 + 247);
      uint64_t v41 = a2[125];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v41 != 1)
      {
        a1[124] = a2[124];
        a1[125] = v41;
        a1[126] = a2[126];
        a1[127] = a2[127];
        *((unsigned char *)a1 + 1024) = *((unsigned char *)a2 + 1024);
        a1[129] = a2[129];
        *((unsigned char *)a1 + 1040) = *((unsigned char *)a2 + 1040);
        a1[131] = a2[131];
        *((unsigned char *)a1 + 1056) = *((unsigned char *)a2 + 1056);
        uint64_t v45 = a2[133];
        *((unsigned char *)a1 + 1072) = *((unsigned char *)a2 + 1072);
        a1[133] = v45;
        a1[135] = a2[135];
        *((unsigned char *)a1 + 1088) = *((unsigned char *)a2 + 1088);
        a1[137] = a2[137];
        *((unsigned char *)a1 + 1104) = *((unsigned char *)a2 + 1104);
        a1[139] = a2[139];
        *((unsigned char *)a1 + 1120) = *((unsigned char *)a2 + 1120);
        *((unsigned char *)a1 + 1136) = *((unsigned char *)a2 + 1136);
        a1[141] = a2[141];
        *((unsigned char *)a1 + 1152) = *((unsigned char *)a2 + 1152);
        a1[143] = a2[143];
        *((unsigned char *)a1 + 1160) = *((unsigned char *)a2 + 1160);
        *((_DWORD *)a1 + 289) = *((_DWORD *)a2 + 289);
        *((unsigned char *)a1 + 1168) = *((unsigned char *)a2 + 1168);
        *((_DWORD *)a1 + 291) = *((_DWORD *)a2 + 291);
        *((unsigned char *)a1 + 1176) = *((unsigned char *)a2 + 1176);
        *((_DWORD *)a1 + 293) = *((_DWORD *)a2 + 293);
        LODWORD(v45) = *((_DWORD *)a2 + 295);
        *((unsigned char *)a1 + 1184) = *((unsigned char *)a2 + 1184);
        *((_DWORD *)a1 + 295) = v45;
        uint64_t v46 = a2[149];
        *((unsigned char *)a1 + 1200) = *((unsigned char *)a2 + 1200);
        a1[149] = v46;
        uint64_t v47 = a2[151];
        *((unsigned char *)a1 + 1216) = *((unsigned char *)a2 + 1216);
        a1[151] = v47;
        LODWORD(v47) = *((_DWORD *)a2 + 305);
        *((unsigned char *)a1 + 1224) = *((unsigned char *)a2 + 1224);
        *((_DWORD *)a1 + 305) = v47;
        LODWORD(v47) = *((_DWORD *)a2 + 307);
        *((unsigned char *)a1 + 1232) = *((unsigned char *)a2 + 1232);
        *((_DWORD *)a1 + 307) = v47;
        LODWORD(v47) = *((_DWORD *)a2 + 309);
        *((unsigned char *)a1 + 1240) = *((unsigned char *)a2 + 1240);
        *((_DWORD *)a1 + 309) = v47;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_27;
      }
      uint64_t v42 = a1 + 124;
      uint64_t v43 = a2 + 124;
      size_t v44 = 249;
    }
    else
    {
      uint64_t v42 = a1 + 119;
      uint64_t v43 = a2 + 119;
      size_t v44 = 289;
    }
    memcpy(v42, v43, v44);
LABEL_27:
    a1[156] = a2[156];
    a1[157] = a2[157];
    *((_DWORD *)a1 + 316) = *((_DWORD *)a2 + 316);
    uint64_t v48 = (void *)a2[159];
    a1[159] = v48;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v49 = v48;
    goto LABEL_28;
  }
  memcpy(a1 + 71, a2 + 71, 0x2C8uLL);
LABEL_28:
  a1[160] = a2[160];
  a1[161] = a2[161];
  a1[162] = a2[162];
  a1[163] = a2[163];
  a1[164] = a2[164];
  a1[165] = a2[165];
  *((unsigned char *)a1 + 1328) = *((unsigned char *)a2 + 1328);
  a1[167] = a2[167];
  *((unsigned char *)a1 + 1344) = *((unsigned char *)a2 + 1344);
  *((unsigned char *)a1 + 1360) = *((unsigned char *)a2 + 1360);
  a1[169] = a2[169];
  a1[171] = a2[171];
  a1[172] = a2[172];
  *((unsigned char *)a1 + 1388) = *((unsigned char *)a2 + 1388);
  *((_DWORD *)a1 + 346) = *((_DWORD *)a2 + 346);
  *((unsigned char *)a1 + 1400) = *((unsigned char *)a2 + 1400);
  a1[174] = a2[174];
  uint64_t v50 = a2[176];
  *((unsigned char *)a1 + 1416) = *((unsigned char *)a2 + 1416);
  a1[176] = v50;
  uint64_t v51 = a2[178];
  *((unsigned char *)a1 + 1432) = *((unsigned char *)a2 + 1432);
  a1[178] = v51;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ConnectionMetrics(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 16) = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = a2[3];
  *(void *)(a1 + 32) = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  int v5 = *((_DWORD *)a2 + 12);
  *(unsigned char *)(a1 + 52) = *((unsigned char *)a2 + 52);
  *(_DWORD *)(a1 + 48) = v5;
  uint64_t v6 = (_OWORD *)(a1 + 56);
  uint64_t v7 = a2 + 7;
  uint64_t v8 = a2[11];
  if (*(void *)(a1 + 88))
  {
    if (v8)
    {
      *(void *)(a1 + 56) = a2[7];
      *(void *)(a1 + 64) = a2[8];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 72) = a2[9];
      *(void *)(a1 + 80) = a2[10];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      id v9 = (void *)a2[11];
      long long v10 = *(void **)(a1 + 88);
      *(void *)(a1 + 88) = v9;
      id v11 = v9;
    }
    else
    {
      outlined destroy of ConnectionHTTPHeaderReport(a1 + 56);
      uint64_t v14 = a2[11];
      long long v15 = *(_OWORD *)(a2 + 9);
      *uint64_t v6 = *v7;
      *(_OWORD *)(a1 + 72) = v15;
      *(void *)(a1 + 88) = v14;
    }
  }
  else if (v8)
  {
    *(void *)(a1 + 56) = a2[7];
    *(void *)(a1 + 64) = a2[8];
    *(void *)(a1 + 72) = a2[9];
    *(void *)(a1 + 80) = a2[10];
    uint64_t v12 = (void *)a2[11];
    *(void *)(a1 + 88) = v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v13 = v12;
  }
  else
  {
    long long v16 = *v7;
    long long v17 = *(_OWORD *)(a2 + 9);
    *(void *)(a1 + 88) = a2[11];
    *uint64_t v6 = v16;
    *(_OWORD *)(a1 + 72) = v17;
  }
  uint64_t v18 = a2[54];
  if (*(void *)(a1 + 432))
  {
    if (v18)
    {
      *(void *)(a1 + 96) = a2[12];
      *(void *)(a1 + 104) = a2[13];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 112) = a2[14];
      *(void *)(a1 + 120) = a2[15];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(unsigned char *)(a1 + 128) = *((unsigned char *)a2 + 128);
      *(unsigned char *)(a1 + 129) = *((unsigned char *)a2 + 129);
      *(unsigned char *)(a1 + 130) = *((unsigned char *)a2 + 130);
      *(unsigned char *)(a1 + 131) = *((unsigned char *)a2 + 131);
      *(unsigned char *)(a1 + 132) = *((unsigned char *)a2 + 132);
      uint64_t v19 = a2[18];
      if (*(void *)(a1 + 144))
      {
        if (v19)
        {
          *(void *)(a1 + 136) = a2[17];
          *(void *)(a1 + 144) = a2[18];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(void *)(a1 + 152) = a2[19];
          *(void *)(a1 + 160) = a2[20];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(unsigned char *)(a1 + 168) = *((unsigned char *)a2 + 168);
          *(_DWORD *)(a1 + 172) = *((_DWORD *)a2 + 43);
          uint64_t v20 = a2[23];
          if (*(void *)(a1 + 184) != 1)
          {
            if (v20 != 1)
            {
              *(void *)(a1 + 176) = a2[22];
              *(void *)(a1 + 184) = a2[23];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              *(void *)(a1 + 192) = a2[24];
              *(void *)(a1 + 200) = a2[25];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              *(unsigned char *)(a1 + 208) = *((unsigned char *)a2 + 208);
              uint64_t v157 = a2[27];
              *(unsigned char *)(a1 + 224) = *((unsigned char *)a2 + 224);
              *(void *)(a1 + 216) = v157;
              uint64_t v158 = a2[29];
              *(unsigned char *)(a1 + 240) = *((unsigned char *)a2 + 240);
              *(void *)(a1 + 232) = v158;
              uint64_t v159 = a2[31];
              *(unsigned char *)(a1 + 256) = *((unsigned char *)a2 + 256);
              *(void *)(a1 + 248) = v159;
              uint64_t v160 = a2[33];
              *(unsigned char *)(a1 + 272) = *((unsigned char *)a2 + 272);
              *(void *)(a1 + 264) = v160;
              uint64_t v161 = a2[35];
              *(unsigned char *)(a1 + 288) = *((unsigned char *)a2 + 288);
              *(void *)(a1 + 280) = v161;
              uint64_t v162 = a2[37];
              *(unsigned char *)(a1 + 304) = *((unsigned char *)a2 + 304);
              *(void *)(a1 + 296) = v162;
              uint64_t v163 = a2[39];
              *(unsigned char *)(a1 + 320) = *((unsigned char *)a2 + 320);
              *(void *)(a1 + 312) = v163;
              uint64_t v164 = a2[41];
              *(unsigned char *)(a1 + 336) = *((unsigned char *)a2 + 336);
              *(void *)(a1 + 328) = v164;
              LODWORD(v164) = *((_DWORD *)a2 + 85);
              *(unsigned char *)(a1 + 344) = *((unsigned char *)a2 + 344);
              *(_DWORD *)(a1 + 340) = v164;
              LODWORD(v164) = *((_DWORD *)a2 + 87);
              *(unsigned char *)(a1 + 352) = *((unsigned char *)a2 + 352);
              *(_DWORD *)(a1 + 348) = v164;
              LODWORD(v164) = *((_DWORD *)a2 + 89);
              *(unsigned char *)(a1 + 360) = *((unsigned char *)a2 + 360);
              *(_DWORD *)(a1 + 356) = v164;
              LODWORD(v164) = *((_DWORD *)a2 + 91);
              *(unsigned char *)(a1 + 368) = *((unsigned char *)a2 + 368);
              *(_DWORD *)(a1 + 364) = v164;
              uint64_t v165 = a2[47];
              *(unsigned char *)(a1 + 384) = *((unsigned char *)a2 + 384);
              *(void *)(a1 + 376) = v165;
              uint64_t v166 = a2[49];
              *(unsigned char *)(a1 + 400) = *((unsigned char *)a2 + 400);
              *(void *)(a1 + 392) = v166;
              LODWORD(v166) = *((_DWORD *)a2 + 101);
              *(unsigned char *)(a1 + 408) = *((unsigned char *)a2 + 408);
              *(_DWORD *)(a1 + 404) = v166;
              LODWORD(v166) = *((_DWORD *)a2 + 103);
              *(unsigned char *)(a1 + 416) = *((unsigned char *)a2 + 416);
              *(_DWORD *)(a1 + 412) = v166;
              LODWORD(v166) = *((_DWORD *)a2 + 105);
              *(unsigned char *)(a1 + 424) = *((unsigned char *)a2 + 424);
              *(_DWORD *)(a1 + 420) = v166;
              goto LABEL_34;
            }
            outlined destroy of ConnectionTCPInfoMetrics(a1 + 176);
            goto LABEL_31;
          }
          if (v20 == 1)
          {
LABEL_31:
            uint64_t v27 = (void *)(a1 + 176);
            uint64_t v28 = a2 + 22;
            goto LABEL_32;
          }
LABEL_28:
          *(void *)(a1 + 176) = a2[22];
          *(void *)(a1 + 184) = a2[23];
          *(void *)(a1 + 192) = a2[24];
          *(void *)(a1 + 200) = a2[25];
          *(unsigned char *)(a1 + 208) = *((unsigned char *)a2 + 208);
          uint64_t v30 = a2[27];
          *(unsigned char *)(a1 + 224) = *((unsigned char *)a2 + 224);
          *(void *)(a1 + 216) = v30;
          uint64_t v31 = a2[29];
          *(unsigned char *)(a1 + 240) = *((unsigned char *)a2 + 240);
          *(void *)(a1 + 232) = v31;
          uint64_t v32 = a2[31];
          *(unsigned char *)(a1 + 256) = *((unsigned char *)a2 + 256);
          *(void *)(a1 + 248) = v32;
          uint64_t v33 = a2[33];
          *(unsigned char *)(a1 + 272) = *((unsigned char *)a2 + 272);
          *(void *)(a1 + 264) = v33;
          uint64_t v34 = a2[35];
          *(unsigned char *)(a1 + 288) = *((unsigned char *)a2 + 288);
          *(void *)(a1 + 280) = v34;
          uint64_t v35 = a2[37];
          *(unsigned char *)(a1 + 304) = *((unsigned char *)a2 + 304);
          *(void *)(a1 + 296) = v35;
          uint64_t v36 = a2[39];
          *(unsigned char *)(a1 + 320) = *((unsigned char *)a2 + 320);
          *(void *)(a1 + 312) = v36;
          uint64_t v37 = a2[41];
          *(unsigned char *)(a1 + 336) = *((unsigned char *)a2 + 336);
          *(void *)(a1 + 328) = v37;
          LODWORD(v37) = *((_DWORD *)a2 + 85);
          *(unsigned char *)(a1 + 344) = *((unsigned char *)a2 + 344);
          *(_DWORD *)(a1 + 340) = v37;
          LODWORD(v37) = *((_DWORD *)a2 + 87);
          *(unsigned char *)(a1 + 352) = *((unsigned char *)a2 + 352);
          *(_DWORD *)(a1 + 348) = v37;
          LODWORD(v37) = *((_DWORD *)a2 + 89);
          *(unsigned char *)(a1 + 360) = *((unsigned char *)a2 + 360);
          *(_DWORD *)(a1 + 356) = v37;
          LODWORD(v37) = *((_DWORD *)a2 + 91);
          *(unsigned char *)(a1 + 368) = *((unsigned char *)a2 + 368);
          *(_DWORD *)(a1 + 364) = v37;
          uint64_t v38 = a2[47];
          *(unsigned char *)(a1 + 384) = *((unsigned char *)a2 + 384);
          *(void *)(a1 + 376) = v38;
          uint64_t v39 = a2[49];
          *(unsigned char *)(a1 + 400) = *((unsigned char *)a2 + 400);
          *(void *)(a1 + 392) = v39;
          LODWORD(v39) = *((_DWORD *)a2 + 101);
          *(unsigned char *)(a1 + 408) = *((unsigned char *)a2 + 408);
          *(_DWORD *)(a1 + 404) = v39;
          LODWORD(v39) = *((_DWORD *)a2 + 103);
          *(unsigned char *)(a1 + 416) = *((unsigned char *)a2 + 416);
          *(_DWORD *)(a1 + 412) = v39;
          LODWORD(v39) = *((_DWORD *)a2 + 105);
          *(unsigned char *)(a1 + 424) = *((unsigned char *)a2 + 424);
          *(_DWORD *)(a1 + 420) = v39;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
LABEL_34:
          *(void *)(a1 + 432) = a2[54];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(void *)(a1 + 440) = a2[55];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          uint64_t v40 = (void *)a2[56];
          uint64_t v41 = *(void **)(a1 + 448);
          *(void *)(a1 + 448) = v40;
          id v42 = v40;

          goto LABEL_37;
        }
        outlined destroy of ConnectionInterfaceReport(a1 + 136);
      }
      else if (v19)
      {
        *(void *)(a1 + 136) = a2[17];
        *(void *)(a1 + 144) = a2[18];
        *(void *)(a1 + 152) = a2[19];
        *(void *)(a1 + 160) = a2[20];
        *(unsigned char *)(a1 + 168) = *((unsigned char *)a2 + 168);
        *(_DWORD *)(a1 + 172) = *((_DWORD *)a2 + 43);
        uint64_t v26 = a2[23];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v26 == 1)
        {
          uint64_t v27 = (void *)(a1 + 176);
          uint64_t v28 = a2 + 22;
LABEL_32:
          size_t v29 = 249;
          goto LABEL_33;
        }
        goto LABEL_28;
      }
      uint64_t v27 = (void *)(a1 + 136);
      uint64_t v28 = a2 + 17;
      size_t v29 = 289;
LABEL_33:
      memcpy(v27, v28, v29);
      goto LABEL_34;
    }
    outlined destroy of ConnectionPreparationReport(a1 + 96);
LABEL_20:
    memcpy((void *)(a1 + 96), a2 + 12, 0x168uLL);
    goto LABEL_37;
  }
  if (!v18) {
    goto LABEL_20;
  }
  *(void *)(a1 + 96) = a2[12];
  *(void *)(a1 + 104) = a2[13];
  *(void *)(a1 + 112) = a2[14];
  *(void *)(a1 + 120) = a2[15];
  *(unsigned char *)(a1 + 128) = *((unsigned char *)a2 + 128);
  *(unsigned char *)(a1 + 129) = *((unsigned char *)a2 + 129);
  *(unsigned char *)(a1 + 130) = *((unsigned char *)a2 + 130);
  *(unsigned char *)(a1 + 131) = *((unsigned char *)a2 + 131);
  *(unsigned char *)(a1 + 132) = *((unsigned char *)a2 + 132);
  uint64_t v21 = a2[18];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v21)
  {
    *(void *)(a1 + 136) = a2[17];
    *(void *)(a1 + 144) = a2[18];
    *(void *)(a1 + 152) = a2[19];
    *(void *)(a1 + 160) = a2[20];
    *(unsigned char *)(a1 + 168) = *((unsigned char *)a2 + 168);
    *(_DWORD *)(a1 + 172) = *((_DWORD *)a2 + 43);
    uint64_t v22 = a2[23];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v22 != 1)
    {
      *(void *)(a1 + 176) = a2[22];
      *(void *)(a1 + 184) = a2[23];
      *(void *)(a1 + 192) = a2[24];
      *(void *)(a1 + 200) = a2[25];
      *(unsigned char *)(a1 + 208) = *((unsigned char *)a2 + 208);
      uint64_t v43 = a2[27];
      *(unsigned char *)(a1 + 224) = *((unsigned char *)a2 + 224);
      *(void *)(a1 + 216) = v43;
      uint64_t v44 = a2[29];
      *(unsigned char *)(a1 + 240) = *((unsigned char *)a2 + 240);
      *(void *)(a1 + 232) = v44;
      uint64_t v45 = a2[31];
      *(unsigned char *)(a1 + 256) = *((unsigned char *)a2 + 256);
      *(void *)(a1 + 248) = v45;
      uint64_t v46 = a2[33];
      *(unsigned char *)(a1 + 272) = *((unsigned char *)a2 + 272);
      *(void *)(a1 + 264) = v46;
      uint64_t v47 = a2[35];
      *(unsigned char *)(a1 + 288) = *((unsigned char *)a2 + 288);
      *(void *)(a1 + 280) = v47;
      uint64_t v48 = a2[37];
      *(unsigned char *)(a1 + 304) = *((unsigned char *)a2 + 304);
      *(void *)(a1 + 296) = v48;
      uint64_t v49 = a2[39];
      *(unsigned char *)(a1 + 320) = *((unsigned char *)a2 + 320);
      *(void *)(a1 + 312) = v49;
      uint64_t v50 = a2[41];
      *(unsigned char *)(a1 + 336) = *((unsigned char *)a2 + 336);
      *(void *)(a1 + 328) = v50;
      LODWORD(v50) = *((_DWORD *)a2 + 85);
      *(unsigned char *)(a1 + 344) = *((unsigned char *)a2 + 344);
      *(_DWORD *)(a1 + 340) = v50;
      LODWORD(v50) = *((_DWORD *)a2 + 87);
      *(unsigned char *)(a1 + 352) = *((unsigned char *)a2 + 352);
      *(_DWORD *)(a1 + 348) = v50;
      LODWORD(v50) = *((_DWORD *)a2 + 89);
      *(unsigned char *)(a1 + 360) = *((unsigned char *)a2 + 360);
      *(_DWORD *)(a1 + 356) = v50;
      LODWORD(v50) = *((_DWORD *)a2 + 91);
      *(unsigned char *)(a1 + 368) = *((unsigned char *)a2 + 368);
      *(_DWORD *)(a1 + 364) = v50;
      uint64_t v51 = a2[47];
      *(unsigned char *)(a1 + 384) = *((unsigned char *)a2 + 384);
      *(void *)(a1 + 376) = v51;
      uint64_t v52 = a2[49];
      *(unsigned char *)(a1 + 400) = *((unsigned char *)a2 + 400);
      *(void *)(a1 + 392) = v52;
      LODWORD(v52) = *((_DWORD *)a2 + 101);
      *(unsigned char *)(a1 + 408) = *((unsigned char *)a2 + 408);
      *(_DWORD *)(a1 + 404) = v52;
      LODWORD(v52) = *((_DWORD *)a2 + 103);
      *(unsigned char *)(a1 + 416) = *((unsigned char *)a2 + 416);
      *(_DWORD *)(a1 + 412) = v52;
      LODWORD(v52) = *((_DWORD *)a2 + 105);
      *(unsigned char *)(a1 + 424) = *((unsigned char *)a2 + 424);
      *(_DWORD *)(a1 + 420) = v52;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_36;
    }
    uint64_t v23 = (void *)(a1 + 176);
    uint64_t v24 = a2 + 22;
    size_t v25 = 249;
  }
  else
  {
    uint64_t v23 = (void *)(a1 + 136);
    uint64_t v24 = a2 + 17;
    size_t v25 = 289;
  }
  memcpy(v23, v24, v25);
LABEL_36:
  *(void *)(a1 + 432) = a2[54];
  *(void *)(a1 + 440) = a2[55];
  uint64_t v53 = (void *)a2[56];
  *(void *)(a1 + 448) = v53;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v54 = v53;
LABEL_37:
  uint64_t v55 = a2[64];
  if (*(void *)(a1 + 512))
  {
    if (v55)
    {
      *(void *)(a1 + 456) = a2[57];
      *(void *)(a1 + 464) = a2[58];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      int v56 = *((_DWORD *)a2 + 118);
      *(unsigned char *)(a1 + 476) = *((unsigned char *)a2 + 476);
      *(_DWORD *)(a1 + 472) = v56;
      uint64_t v57 = a2[60];
      *(unsigned char *)(a1 + 488) = *((unsigned char *)a2 + 488);
      *(void *)(a1 + 480) = v57;
      uint64_t v58 = a2[62];
      *(unsigned char *)(a1 + 504) = *((unsigned char *)a2 + 504);
      *(void *)(a1 + 496) = v58;
      *(void *)(a1 + 512) = a2[64];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 520) = a2[65];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(unsigned char *)(a1 + 528) = *((unsigned char *)a2 + 528);
      *(unsigned char *)(a1 + 529) = *((unsigned char *)a2 + 529);
      *(void *)(a1 + 536) = a2[67];
      *(void *)(a1 + 544) = a2[68];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(a1 + 552) = *((_DWORD *)a2 + 138);
      *(_DWORD *)(a1 + 556) = *((_DWORD *)a2 + 139);
      uint64_t v59 = (void *)a2[70];
      uint64_t v60 = *(void **)(a1 + 560);
      *(void *)(a1 + 560) = v59;
      id v61 = v59;

      goto LABEL_44;
    }
    outlined destroy of ConnectionEstablishmentReport(a1 + 456);
  }
  else if (v55)
  {
    *(void *)(a1 + 456) = a2[57];
    *(void *)(a1 + 464) = a2[58];
    int v62 = *((_DWORD *)a2 + 118);
    *(unsigned char *)(a1 + 476) = *((unsigned char *)a2 + 476);
    *(_DWORD *)(a1 + 472) = v62;
    uint64_t v63 = a2[60];
    *(unsigned char *)(a1 + 488) = *((unsigned char *)a2 + 488);
    *(void *)(a1 + 480) = v63;
    uint64_t v64 = a2[62];
    *(unsigned char *)(a1 + 504) = *((unsigned char *)a2 + 504);
    *(void *)(a1 + 496) = v64;
    *(void *)(a1 + 512) = a2[64];
    *(void *)(a1 + 520) = a2[65];
    *(unsigned char *)(a1 + 528) = *((unsigned char *)a2 + 528);
    *(unsigned char *)(a1 + 529) = *((unsigned char *)a2 + 529);
    *(void *)(a1 + 536) = a2[67];
    *(void *)(a1 + 544) = a2[68];
    *(_DWORD *)(a1 + 552) = *((_DWORD *)a2 + 138);
    *(_DWORD *)(a1 + 556) = *((_DWORD *)a2 + 139);
    uint64_t v65 = (void *)a2[70];
    *(void *)(a1 + 560) = v65;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v66 = v65;
    goto LABEL_44;
  }
  memcpy((void *)(a1 + 456), a2 + 57, 0x70uLL);
LABEL_44:
  uint64_t v67 = a2[73];
  if (!*(void *)(a1 + 584))
  {
    if (!v67) {
      goto LABEL_53;
    }
    *(_DWORD *)(a1 + 568) = *((_DWORD *)a2 + 142);
    *(void *)(a1 + 576) = a2[72];
    *(void *)(a1 + 584) = a2[73];
    *(void *)(a1 + 592) = a2[74];
    *(void *)(a1 + 600) = a2[75];
    uint64_t v85 = a2[89];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v85)
    {
      int v86 = *((_DWORD *)a2 + 152);
      *(unsigned char *)(a1 + 612) = *((unsigned char *)a2 + 612);
      *(_DWORD *)(a1 + 608) = v86;
      *(void *)(a1 + 616) = a2[77];
      *(void *)(a1 + 624) = a2[78];
      uint64_t v87 = a2[79];
      *(unsigned char *)(a1 + 640) = *((unsigned char *)a2 + 640);
      *(void *)(a1 + 632) = v87;
      *(void *)(a1 + 648) = a2[81];
      *(void *)(a1 + 656) = a2[82];
      *(void *)(a1 + 664) = a2[83];
      *(void *)(a1 + 672) = a2[84];
      *(void *)(a1 + 680) = a2[85];
      *(void *)(a1 + 688) = a2[86];
      LODWORD(v87) = *((_DWORD *)a2 + 174);
      *(unsigned char *)(a1 + 700) = *((unsigned char *)a2 + 700);
      *(_DWORD *)(a1 + 696) = v87;
      LODWORD(v87) = *((_DWORD *)a2 + 176);
      *(unsigned char *)(a1 + 708) = *((unsigned char *)a2 + 708);
      *(_DWORD *)(a1 + 704) = v87;
      *(void *)(a1 + 712) = a2[89];
      *(void *)(a1 + 720) = a2[90];
      *(void *)(a1 + 728) = a2[91];
      uint64_t v88 = a2[92];
      *(unsigned char *)(a1 + 744) = *((unsigned char *)a2 + 744);
      *(void *)(a1 + 736) = v88;
      uint64_t v89 = a2[94];
      *(unsigned char *)(a1 + 760) = *((unsigned char *)a2 + 760);
      *(void *)(a1 + 752) = v89;
      uint64_t v90 = a2[96];
      *(unsigned char *)(a1 + 776) = *((unsigned char *)a2 + 776);
      *(void *)(a1 + 768) = v90;
      uint64_t v91 = a2[98];
      *(unsigned char *)(a1 + 792) = *((unsigned char *)a2 + 792);
      *(void *)(a1 + 784) = v91;
      uint64_t v92 = a2[100];
      *(unsigned char *)(a1 + 808) = *((unsigned char *)a2 + 808);
      *(void *)(a1 + 800) = v92;
      uint64_t v93 = a2[102];
      *(unsigned char *)(a1 + 824) = *((unsigned char *)a2 + 824);
      *(void *)(a1 + 816) = v93;
      *(void *)(a1 + 832) = a2[104];
      *(void *)(a1 + 840) = a2[105];
      uint64_t v94 = a2[106];
      *(unsigned char *)(a1 + 856) = *((unsigned char *)a2 + 856);
      *(void *)(a1 + 848) = v94;
      uint64_t v95 = a2[108];
      *(unsigned char *)(a1 + 872) = *((unsigned char *)a2 + 872);
      *(void *)(a1 + 864) = v95;
      *(unsigned char *)(a1 + 873) = *((unsigned char *)a2 + 873);
      uint64_t v96 = a2[110];
      *(unsigned char *)(a1 + 888) = *((unsigned char *)a2 + 888);
      *(void *)(a1 + 880) = v96;
      uint64_t v97 = a2[112];
      *(unsigned char *)(a1 + 904) = *((unsigned char *)a2 + 904);
      *(void *)(a1 + 896) = v97;
      uint64_t v98 = a2[114];
      *(unsigned char *)(a1 + 920) = *((unsigned char *)a2 + 920);
      *(void *)(a1 + 912) = v98;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      memcpy((void *)(a1 + 608), a2 + 76, 0x139uLL);
    }
    long long v119 = *((_OWORD *)a2 + 58);
    *(unsigned char *)(a1 + 944) = *((unsigned char *)a2 + 944);
    *(_OWORD *)(a1 + 928) = v119;
    if (a2[120])
    {
      *(void *)(a1 + 952) = a2[119];
      *(void *)(a1 + 960) = a2[120];
      *(void *)(a1 + 968) = a2[121];
      *(void *)(a1 + 976) = a2[122];
      *(unsigned char *)(a1 + 984) = *((unsigned char *)a2 + 984);
      *(_DWORD *)(a1 + 988) = *((_DWORD *)a2 + 247);
      uint64_t v120 = a2[125];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v120 != 1)
      {
        *(void *)(a1 + 992) = a2[124];
        *(void *)(a1 + 1000) = a2[125];
        *(void *)(a1 + 1008) = a2[126];
        *(void *)(a1 + 1016) = a2[127];
        *(unsigned char *)(a1 + 1024) = *((unsigned char *)a2 + 1024);
        uint64_t v137 = a2[129];
        *(unsigned char *)(a1 + 1040) = *((unsigned char *)a2 + 1040);
        *(void *)(a1 + 1032) = v137;
        uint64_t v138 = a2[131];
        *(unsigned char *)(a1 + 1056) = *((unsigned char *)a2 + 1056);
        *(void *)(a1 + 1048) = v138;
        uint64_t v139 = a2[133];
        *(unsigned char *)(a1 + 1072) = *((unsigned char *)a2 + 1072);
        *(void *)(a1 + 1064) = v139;
        uint64_t v140 = a2[135];
        *(unsigned char *)(a1 + 1088) = *((unsigned char *)a2 + 1088);
        *(void *)(a1 + 1080) = v140;
        uint64_t v141 = a2[137];
        *(unsigned char *)(a1 + 1104) = *((unsigned char *)a2 + 1104);
        *(void *)(a1 + 1096) = v141;
        uint64_t v142 = a2[139];
        *(unsigned char *)(a1 + 1120) = *((unsigned char *)a2 + 1120);
        *(void *)(a1 + 1112) = v142;
        uint64_t v143 = a2[141];
        *(unsigned char *)(a1 + 1136) = *((unsigned char *)a2 + 1136);
        *(void *)(a1 + 1128) = v143;
        uint64_t v144 = a2[143];
        *(unsigned char *)(a1 + 1152) = *((unsigned char *)a2 + 1152);
        *(void *)(a1 + 1144) = v144;
        LODWORD(v144) = *((_DWORD *)a2 + 289);
        *(unsigned char *)(a1 + 1160) = *((unsigned char *)a2 + 1160);
        *(_DWORD *)(a1 + 1156) = v144;
        LODWORD(v144) = *((_DWORD *)a2 + 291);
        *(unsigned char *)(a1 + 1168) = *((unsigned char *)a2 + 1168);
        *(_DWORD *)(a1 + 1164) = v144;
        LODWORD(v144) = *((_DWORD *)a2 + 293);
        *(unsigned char *)(a1 + 1176) = *((unsigned char *)a2 + 1176);
        *(_DWORD *)(a1 + 1172) = v144;
        LODWORD(v144) = *((_DWORD *)a2 + 295);
        *(unsigned char *)(a1 + 1184) = *((unsigned char *)a2 + 1184);
        *(_DWORD *)(a1 + 1180) = v144;
        uint64_t v145 = a2[149];
        *(unsigned char *)(a1 + 1200) = *((unsigned char *)a2 + 1200);
        *(void *)(a1 + 1192) = v145;
        uint64_t v146 = a2[151];
        *(unsigned char *)(a1 + 1216) = *((unsigned char *)a2 + 1216);
        *(void *)(a1 + 1208) = v146;
        LODWORD(v146) = *((_DWORD *)a2 + 305);
        *(unsigned char *)(a1 + 1224) = *((unsigned char *)a2 + 1224);
        *(_DWORD *)(a1 + 1220) = v146;
        LODWORD(v146) = *((_DWORD *)a2 + 307);
        *(unsigned char *)(a1 + 1232) = *((unsigned char *)a2 + 1232);
        *(_DWORD *)(a1 + 1228) = v146;
        LODWORD(v146) = *((_DWORD *)a2 + 309);
        *(unsigned char *)(a1 + 1240) = *((unsigned char *)a2 + 1240);
        *(_DWORD *)(a1 + 1236) = v146;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_82;
      }
      uint64_t v121 = (void *)(a1 + 992);
      uint64_t v122 = a2 + 124;
      size_t v123 = 249;
    }
    else
    {
      uint64_t v121 = (void *)(a1 + 952);
      uint64_t v122 = a2 + 119;
      size_t v123 = 289;
    }
    memcpy(v121, v122, v123);
LABEL_82:
    *(void *)(a1 + 1248) = a2[156];
    *(void *)(a1 + 1256) = a2[157];
    *(_DWORD *)(a1 + 1264) = *((_DWORD *)a2 + 316);
    int v147 = (void *)a2[159];
    *(void *)(a1 + 1272) = v147;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v148 = v147;
    goto LABEL_83;
  }
  if (v67)
  {
    *(_DWORD *)(a1 + 568) = *((_DWORD *)a2 + 142);
    *(void *)(a1 + 576) = a2[72];
    *(void *)(a1 + 584) = a2[73];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 592) = a2[74];
    *(void *)(a1 + 600) = a2[75];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v68 = (_DWORD *)(a1 + 608);
    uint64_t v69 = (int *)(a2 + 76);
    uint64_t v70 = a2[89];
    if (*(void *)(a1 + 712))
    {
      if (v70)
      {
        int v71 = *v69;
        *(unsigned char *)(a1 + 612) = *((unsigned char *)a2 + 612);
        *uint64_t v68 = v71;
        *(void *)(a1 + 616) = a2[77];
        *(void *)(a1 + 624) = a2[78];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v72 = a2[79];
        *(unsigned char *)(a1 + 640) = *((unsigned char *)a2 + 640);
        *(void *)(a1 + 632) = v72;
        *(void *)(a1 + 648) = a2[81];
        *(void *)(a1 + 656) = a2[82];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(void *)(a1 + 664) = a2[83];
        *(void *)(a1 + 672) = a2[84];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(void *)(a1 + 680) = a2[85];
        *(void *)(a1 + 688) = a2[86];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        int v73 = *((_DWORD *)a2 + 174);
        *(unsigned char *)(a1 + 700) = *((unsigned char *)a2 + 700);
        *(_DWORD *)(a1 + 696) = v73;
        LOBYTE(v73) = *((unsigned char *)a2 + 708);
        *(_DWORD *)(a1 + 704) = *((_DWORD *)a2 + 176);
        *(unsigned char *)(a1 + 708) = v73;
        *(void *)(a1 + 712) = a2[89];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(void *)(a1 + 720) = a2[90];
        *(void *)(a1 + 728) = a2[91];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v74 = a2[92];
        *(unsigned char *)(a1 + 744) = *((unsigned char *)a2 + 744);
        *(void *)(a1 + 736) = v74;
        uint64_t v75 = a2[94];
        *(unsigned char *)(a1 + 760) = *((unsigned char *)a2 + 760);
        *(void *)(a1 + 752) = v75;
        uint64_t v76 = a2[96];
        *(unsigned char *)(a1 + 776) = *((unsigned char *)a2 + 776);
        *(void *)(a1 + 768) = v76;
        uint64_t v77 = a2[98];
        *(unsigned char *)(a1 + 792) = *((unsigned char *)a2 + 792);
        *(void *)(a1 + 784) = v77;
        uint64_t v78 = a2[100];
        *(unsigned char *)(a1 + 808) = *((unsigned char *)a2 + 808);
        *(void *)(a1 + 800) = v78;
        uint64_t v79 = a2[102];
        *(unsigned char *)(a1 + 824) = *((unsigned char *)a2 + 824);
        *(void *)(a1 + 816) = v79;
        *(void *)(a1 + 832) = a2[104];
        *(void *)(a1 + 840) = a2[105];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v80 = a2[106];
        *(unsigned char *)(a1 + 856) = *((unsigned char *)a2 + 856);
        *(void *)(a1 + 848) = v80;
        uint64_t v81 = a2[108];
        *(unsigned char *)(a1 + 872) = *((unsigned char *)a2 + 872);
        *(void *)(a1 + 864) = v81;
        *(unsigned char *)(a1 + 873) = *((unsigned char *)a2 + 873);
        uint64_t v82 = a2[110];
        *(unsigned char *)(a1 + 888) = *((unsigned char *)a2 + 888);
        *(void *)(a1 + 880) = v82;
        uint64_t v83 = a2[112];
        *(unsigned char *)(a1 + 904) = *((unsigned char *)a2 + 904);
        *(void *)(a1 + 896) = v83;
        uint64_t v84 = a2[114];
        *(unsigned char *)(a1 + 920) = *((unsigned char *)a2 + 920);
        *(void *)(a1 + 912) = v84;
        goto LABEL_58;
      }
      outlined destroy of ConnectionNetworkReport(a1 + 608);
    }
    else if (v70)
    {
      int v99 = *v69;
      *(unsigned char *)(a1 + 612) = *((unsigned char *)a2 + 612);
      *uint64_t v68 = v99;
      *(void *)(a1 + 616) = a2[77];
      *(void *)(a1 + 624) = a2[78];
      uint64_t v100 = a2[79];
      *(unsigned char *)(a1 + 640) = *((unsigned char *)a2 + 640);
      *(void *)(a1 + 632) = v100;
      *(void *)(a1 + 648) = a2[81];
      *(void *)(a1 + 656) = a2[82];
      *(void *)(a1 + 664) = a2[83];
      *(void *)(a1 + 672) = a2[84];
      *(void *)(a1 + 680) = a2[85];
      *(void *)(a1 + 688) = a2[86];
      LODWORD(v100) = *((_DWORD *)a2 + 174);
      *(unsigned char *)(a1 + 700) = *((unsigned char *)a2 + 700);
      *(_DWORD *)(a1 + 696) = v100;
      LODWORD(v100) = *((_DWORD *)a2 + 176);
      *(unsigned char *)(a1 + 708) = *((unsigned char *)a2 + 708);
      *(_DWORD *)(a1 + 704) = v100;
      *(void *)(a1 + 712) = a2[89];
      *(void *)(a1 + 720) = a2[90];
      *(void *)(a1 + 728) = a2[91];
      uint64_t v101 = a2[92];
      *(unsigned char *)(a1 + 744) = *((unsigned char *)a2 + 744);
      *(void *)(a1 + 736) = v101;
      uint64_t v102 = a2[94];
      *(unsigned char *)(a1 + 760) = *((unsigned char *)a2 + 760);
      *(void *)(a1 + 752) = v102;
      uint64_t v103 = a2[96];
      *(unsigned char *)(a1 + 776) = *((unsigned char *)a2 + 776);
      *(void *)(a1 + 768) = v103;
      uint64_t v104 = a2[98];
      *(unsigned char *)(a1 + 792) = *((unsigned char *)a2 + 792);
      *(void *)(a1 + 784) = v104;
      uint64_t v105 = a2[100];
      *(unsigned char *)(a1 + 808) = *((unsigned char *)a2 + 808);
      *(void *)(a1 + 800) = v105;
      uint64_t v106 = a2[102];
      *(unsigned char *)(a1 + 824) = *((unsigned char *)a2 + 824);
      *(void *)(a1 + 816) = v106;
      *(void *)(a1 + 832) = a2[104];
      *(void *)(a1 + 840) = a2[105];
      uint64_t v107 = a2[106];
      *(unsigned char *)(a1 + 856) = *((unsigned char *)a2 + 856);
      *(void *)(a1 + 848) = v107;
      uint64_t v108 = a2[108];
      *(unsigned char *)(a1 + 872) = *((unsigned char *)a2 + 872);
      *(void *)(a1 + 864) = v108;
      *(unsigned char *)(a1 + 873) = *((unsigned char *)a2 + 873);
      uint64_t v109 = a2[110];
      *(unsigned char *)(a1 + 888) = *((unsigned char *)a2 + 888);
      *(void *)(a1 + 880) = v109;
      uint64_t v110 = a2[112];
      *(unsigned char *)(a1 + 904) = *((unsigned char *)a2 + 904);
      *(void *)(a1 + 896) = v110;
      uint64_t v111 = a2[114];
      *(unsigned char *)(a1 + 920) = *((unsigned char *)a2 + 920);
      *(void *)(a1 + 912) = v111;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_58;
    }
    memcpy((void *)(a1 + 608), a2 + 76, 0x139uLL);
LABEL_58:
    long long v112 = *((_OWORD *)a2 + 58);
    *(unsigned char *)(a1 + 944) = *((unsigned char *)a2 + 944);
    *(_OWORD *)(a1 + 928) = v112;
    uint64_t v113 = a2[120];
    if (*(void *)(a1 + 960))
    {
      if (v113)
      {
        *(void *)(a1 + 952) = a2[119];
        *(void *)(a1 + 960) = a2[120];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(void *)(a1 + 968) = a2[121];
        *(void *)(a1 + 976) = a2[122];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(unsigned char *)(a1 + 984) = *((unsigned char *)a2 + 984);
        *(_DWORD *)(a1 + 988) = *((_DWORD *)a2 + 247);
        uint64_t v114 = a2[125];
        if (*(void *)(a1 + 1000) != 1)
        {
          if (v114 != 1)
          {
            *(void *)(a1 + 992) = a2[124];
            *(void *)(a1 + 1000) = a2[125];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            *(void *)(a1 + 1008) = a2[126];
            *(void *)(a1 + 1016) = a2[127];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            *(unsigned char *)(a1 + 1024) = *((unsigned char *)a2 + 1024);
            uint64_t v167 = a2[129];
            *(unsigned char *)(a1 + 1040) = *((unsigned char *)a2 + 1040);
            *(void *)(a1 + 1032) = v167;
            uint64_t v168 = a2[131];
            *(unsigned char *)(a1 + 1056) = *((unsigned char *)a2 + 1056);
            *(void *)(a1 + 1048) = v168;
            uint64_t v169 = a2[133];
            *(unsigned char *)(a1 + 1072) = *((unsigned char *)a2 + 1072);
            *(void *)(a1 + 1064) = v169;
            uint64_t v170 = a2[135];
            *(unsigned char *)(a1 + 1088) = *((unsigned char *)a2 + 1088);
            *(void *)(a1 + 1080) = v170;
            uint64_t v171 = a2[137];
            *(unsigned char *)(a1 + 1104) = *((unsigned char *)a2 + 1104);
            *(void *)(a1 + 1096) = v171;
            uint64_t v172 = a2[139];
            *(unsigned char *)(a1 + 1120) = *((unsigned char *)a2 + 1120);
            *(void *)(a1 + 1112) = v172;
            uint64_t v173 = a2[141];
            *(unsigned char *)(a1 + 1136) = *((unsigned char *)a2 + 1136);
            *(void *)(a1 + 1128) = v173;
            uint64_t v174 = a2[143];
            *(unsigned char *)(a1 + 1152) = *((unsigned char *)a2 + 1152);
            *(void *)(a1 + 1144) = v174;
            LODWORD(v174) = *((_DWORD *)a2 + 289);
            *(unsigned char *)(a1 + 1160) = *((unsigned char *)a2 + 1160);
            *(_DWORD *)(a1 + 1156) = v174;
            LODWORD(v174) = *((_DWORD *)a2 + 291);
            *(unsigned char *)(a1 + 1168) = *((unsigned char *)a2 + 1168);
            *(_DWORD *)(a1 + 1164) = v174;
            LODWORD(v174) = *((_DWORD *)a2 + 293);
            *(unsigned char *)(a1 + 1176) = *((unsigned char *)a2 + 1176);
            *(_DWORD *)(a1 + 1172) = v174;
            LODWORD(v174) = *((_DWORD *)a2 + 295);
            *(unsigned char *)(a1 + 1184) = *((unsigned char *)a2 + 1184);
            *(_DWORD *)(a1 + 1180) = v174;
            uint64_t v175 = a2[149];
            *(unsigned char *)(a1 + 1200) = *((unsigned char *)a2 + 1200);
            *(void *)(a1 + 1192) = v175;
            uint64_t v176 = a2[151];
            *(unsigned char *)(a1 + 1216) = *((unsigned char *)a2 + 1216);
            *(void *)(a1 + 1208) = v176;
            LODWORD(v176) = *((_DWORD *)a2 + 305);
            *(unsigned char *)(a1 + 1224) = *((unsigned char *)a2 + 1224);
            *(_DWORD *)(a1 + 1220) = v176;
            LODWORD(v176) = *((_DWORD *)a2 + 307);
            *(unsigned char *)(a1 + 1232) = *((unsigned char *)a2 + 1232);
            *(_DWORD *)(a1 + 1228) = v176;
            LODWORD(v176) = *((_DWORD *)a2 + 309);
            *(unsigned char *)(a1 + 1240) = *((unsigned char *)a2 + 1240);
            *(_DWORD *)(a1 + 1236) = v176;
            goto LABEL_80;
          }
          outlined destroy of ConnectionTCPInfoMetrics(a1 + 992);
          goto LABEL_77;
        }
        if (v114 == 1)
        {
LABEL_77:
          uint64_t v116 = (void *)(a1 + 992);
          uint64_t v117 = a2 + 124;
          goto LABEL_78;
        }
LABEL_74:
        *(void *)(a1 + 992) = a2[124];
        *(void *)(a1 + 1000) = a2[125];
        *(void *)(a1 + 1008) = a2[126];
        *(void *)(a1 + 1016) = a2[127];
        *(unsigned char *)(a1 + 1024) = *((unsigned char *)a2 + 1024);
        uint64_t v124 = a2[129];
        *(unsigned char *)(a1 + 1040) = *((unsigned char *)a2 + 1040);
        *(void *)(a1 + 1032) = v124;
        uint64_t v125 = a2[131];
        *(unsigned char *)(a1 + 1056) = *((unsigned char *)a2 + 1056);
        *(void *)(a1 + 1048) = v125;
        uint64_t v126 = a2[133];
        *(unsigned char *)(a1 + 1072) = *((unsigned char *)a2 + 1072);
        *(void *)(a1 + 1064) = v126;
        uint64_t v127 = a2[135];
        *(unsigned char *)(a1 + 1088) = *((unsigned char *)a2 + 1088);
        *(void *)(a1 + 1080) = v127;
        uint64_t v128 = a2[137];
        *(unsigned char *)(a1 + 1104) = *((unsigned char *)a2 + 1104);
        *(void *)(a1 + 1096) = v128;
        uint64_t v129 = a2[139];
        *(unsigned char *)(a1 + 1120) = *((unsigned char *)a2 + 1120);
        *(void *)(a1 + 1112) = v129;
        uint64_t v130 = a2[141];
        *(unsigned char *)(a1 + 1136) = *((unsigned char *)a2 + 1136);
        *(void *)(a1 + 1128) = v130;
        uint64_t v131 = a2[143];
        *(unsigned char *)(a1 + 1152) = *((unsigned char *)a2 + 1152);
        *(void *)(a1 + 1144) = v131;
        LODWORD(v131) = *((_DWORD *)a2 + 289);
        *(unsigned char *)(a1 + 1160) = *((unsigned char *)a2 + 1160);
        *(_DWORD *)(a1 + 1156) = v131;
        LODWORD(v131) = *((_DWORD *)a2 + 291);
        *(unsigned char *)(a1 + 1168) = *((unsigned char *)a2 + 1168);
        *(_DWORD *)(a1 + 1164) = v131;
        LODWORD(v131) = *((_DWORD *)a2 + 293);
        *(unsigned char *)(a1 + 1176) = *((unsigned char *)a2 + 1176);
        *(_DWORD *)(a1 + 1172) = v131;
        LODWORD(v131) = *((_DWORD *)a2 + 295);
        *(unsigned char *)(a1 + 1184) = *((unsigned char *)a2 + 1184);
        *(_DWORD *)(a1 + 1180) = v131;
        uint64_t v132 = a2[149];
        *(unsigned char *)(a1 + 1200) = *((unsigned char *)a2 + 1200);
        *(void *)(a1 + 1192) = v132;
        uint64_t v133 = a2[151];
        *(unsigned char *)(a1 + 1216) = *((unsigned char *)a2 + 1216);
        *(void *)(a1 + 1208) = v133;
        LODWORD(v133) = *((_DWORD *)a2 + 305);
        *(unsigned char *)(a1 + 1224) = *((unsigned char *)a2 + 1224);
        *(_DWORD *)(a1 + 1220) = v133;
        LODWORD(v133) = *((_DWORD *)a2 + 307);
        *(unsigned char *)(a1 + 1232) = *((unsigned char *)a2 + 1232);
        *(_DWORD *)(a1 + 1228) = v133;
        LODWORD(v133) = *((_DWORD *)a2 + 309);
        *(unsigned char *)(a1 + 1240) = *((unsigned char *)a2 + 1240);
        *(_DWORD *)(a1 + 1236) = v133;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
LABEL_80:
        *(void *)(a1 + 1248) = a2[156];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(void *)(a1 + 1256) = a2[157];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(_DWORD *)(a1 + 1264) = *((_DWORD *)a2 + 316);
        id v134 = (void *)a2[159];
        double v135 = *(void **)(a1 + 1272);
        *(void *)(a1 + 1272) = v134;
        id v136 = v134;

        goto LABEL_83;
      }
      outlined destroy of ConnectionInterfaceReport(a1 + 952);
    }
    else if (v113)
    {
      *(void *)(a1 + 952) = a2[119];
      *(void *)(a1 + 960) = a2[120];
      *(void *)(a1 + 968) = a2[121];
      *(void *)(a1 + 976) = a2[122];
      *(unsigned char *)(a1 + 984) = *((unsigned char *)a2 + 984);
      *(_DWORD *)(a1 + 988) = *((_DWORD *)a2 + 247);
      uint64_t v115 = a2[125];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v115 == 1)
      {
        uint64_t v116 = (void *)(a1 + 992);
        uint64_t v117 = a2 + 124;
LABEL_78:
        size_t v118 = 249;
        goto LABEL_79;
      }
      goto LABEL_74;
    }
    uint64_t v116 = (void *)(a1 + 952);
    uint64_t v117 = a2 + 119;
    size_t v118 = 289;
LABEL_79:
    memcpy(v116, v117, v118);
    goto LABEL_80;
  }
  outlined destroy of ConnectionSnapshotReport(a1 + 568);
LABEL_53:
  memcpy((void *)(a1 + 568), a2 + 71, 0x2C8uLL);
LABEL_83:
  *(void *)(a1 + 1280) = a2[160];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1288) = a2[161];
  *(void *)(a1 + 1296) = a2[162];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1304) = a2[163];
  *(void *)(a1 + 1312) = a2[164];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v149 = a2[165];
  *(unsigned char *)(a1 + 1328) = *((unsigned char *)a2 + 1328);
  *(void *)(a1 + 1320) = v149;
  uint64_t v150 = a2[167];
  *(unsigned char *)(a1 + 1344) = *((unsigned char *)a2 + 1344);
  *(void *)(a1 + 1336) = v150;
  uint64_t v151 = a2[169];
  *(unsigned char *)(a1 + 1360) = *((unsigned char *)a2 + 1360);
  *(void *)(a1 + 1352) = v151;
  *(void *)(a1 + 1368) = a2[171];
  *(void *)(a1 + 1376) = a2[172];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  int v152 = *((_DWORD *)a2 + 346);
  *(unsigned char *)(a1 + 1388) = *((unsigned char *)a2 + 1388);
  *(_DWORD *)(a1 + 1384) = v152;
  uint64_t v153 = a2[174];
  *(unsigned char *)(a1 + 1400) = *((unsigned char *)a2 + 1400);
  *(void *)(a1 + 1392) = v153;
  uint64_t v154 = a2[176];
  *(unsigned char *)(a1 + 1416) = *((unsigned char *)a2 + 1416);
  *(void *)(a1 + 1408) = v154;
  uint64_t v155 = a2[178];
  *(unsigned char *)(a1 + 1432) = *((unsigned char *)a2 + 1432);
  *(void *)(a1 + 1424) = v155;
  return a1;
}

uint64_t outlined destroy of ConnectionHTTPHeaderReport(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of ConnectionPreparationReport(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of ConnectionEstablishmentReport(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of ConnectionSnapshotReport(uint64_t a1)
{
  return a1;
}

void *__swift_memcpy1433_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x599uLL);
}

void *assignWithTake for ConnectionMetrics(void *a1, void *a2)
{
  *a1 = *a2;
  *((unsigned char *)a1 + 8) = *((unsigned char *)a2 + 8);
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[4];
  a1[3] = a2[3];
  a1[4] = v4;
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRelease();
  *((_DWORD *)a1 + 12) = *((_DWORD *)a2 + 12);
  *((unsigned char *)a1 + 52) = *((unsigned char *)a2 + 52);
  if (a1[11])
  {
    if (a2[11])
    {
      uint64_t v5 = a2[8];
      a1[7] = a2[7];
      a1[8] = v5;
      swift_bridgeObjectRelease();
      uint64_t v6 = a2[10];
      a1[9] = a2[9];
      a1[10] = v6;
      swift_bridgeObjectRelease();
      uint64_t v7 = (void *)a1[11];
      a1[11] = a2[11];

      goto LABEL_6;
    }
    outlined destroy of ConnectionHTTPHeaderReport((uint64_t)(a1 + 7));
  }
  long long v8 = *(_OWORD *)(a2 + 9);
  *(_OWORD *)(a1 + 7) = *(_OWORD *)(a2 + 7);
  *(_OWORD *)(a1 + 9) = v8;
  a1[11] = a2[11];
LABEL_6:
  if (!a1[54])
  {
LABEL_15:
    memcpy(a1 + 12, a2 + 12, 0x168uLL);
    goto LABEL_20;
  }
  if (!a2[54])
  {
    outlined destroy of ConnectionPreparationReport((uint64_t)(a1 + 12));
    goto LABEL_15;
  }
  uint64_t v9 = a2[13];
  a1[12] = a2[12];
  a1[13] = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = a2[15];
  a1[14] = a2[14];
  a1[15] = v10;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 128) = *((unsigned char *)a2 + 128);
  *((unsigned char *)a1 + 129) = *((unsigned char *)a2 + 129);
  *((unsigned char *)a1 + 130) = *((unsigned char *)a2 + 130);
  *((unsigned char *)a1 + 131) = *((unsigned char *)a2 + 131);
  *((unsigned char *)a1 + 132) = *((unsigned char *)a2 + 132);
  if (!a1[18])
  {
LABEL_17:
    uint64_t v14 = a1 + 17;
    long long v15 = a2 + 17;
    size_t v16 = 289;
    goto LABEL_18;
  }
  uint64_t v11 = a2[18];
  if (!v11)
  {
    outlined destroy of ConnectionInterfaceReport((uint64_t)(a1 + 17));
    goto LABEL_17;
  }
  a1[17] = a2[17];
  a1[18] = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = a2[20];
  a1[19] = a2[19];
  a1[20] = v12;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + 168) = *((unsigned char *)a2 + 168);
  *((_DWORD *)a1 + 43) = *((_DWORD *)a2 + 43);
  if (a1[23] != 1)
  {
    uint64_t v13 = a2[23];
    if (v13 != 1)
    {
      a1[22] = a2[22];
      a1[23] = v13;
      swift_bridgeObjectRelease();
      uint64_t v29 = a2[25];
      a1[24] = a2[24];
      a1[25] = v29;
      swift_bridgeObjectRelease();
      *((unsigned char *)a1 + 208) = *((unsigned char *)a2 + 208);
      a1[27] = a2[27];
      *((unsigned char *)a1 + 224) = *((unsigned char *)a2 + 224);
      a1[29] = a2[29];
      *((unsigned char *)a1 + 240) = *((unsigned char *)a2 + 240);
      a1[31] = a2[31];
      *((unsigned char *)a1 + 256) = *((unsigned char *)a2 + 256);
      *((unsigned char *)a1 + 272) = *((unsigned char *)a2 + 272);
      a1[33] = a2[33];
      uint64_t v30 = a2[35];
      *((unsigned char *)a1 + 288) = *((unsigned char *)a2 + 288);
      a1[35] = v30;
      a1[37] = a2[37];
      *((unsigned char *)a1 + 304) = *((unsigned char *)a2 + 304);
      a1[39] = a2[39];
      *((unsigned char *)a1 + 320) = *((unsigned char *)a2 + 320);
      a1[41] = a2[41];
      *((unsigned char *)a1 + 336) = *((unsigned char *)a2 + 336);
      *((unsigned char *)a1 + 344) = *((unsigned char *)a2 + 344);
      *((_DWORD *)a1 + 85) = *((_DWORD *)a2 + 85);
      *((unsigned char *)a1 + 352) = *((unsigned char *)a2 + 352);
      *((_DWORD *)a1 + 87) = *((_DWORD *)a2 + 87);
      *((unsigned char *)a1 + 360) = *((unsigned char *)a2 + 360);
      *((_DWORD *)a1 + 89) = *((_DWORD *)a2 + 89);
      *((unsigned char *)a1 + 368) = *((unsigned char *)a2 + 368);
      *((_DWORD *)a1 + 91) = *((_DWORD *)a2 + 91);
      *((unsigned char *)a1 + 384) = *((unsigned char *)a2 + 384);
      a1[47] = a2[47];
      uint64_t v31 = a2[49];
      *((unsigned char *)a1 + 400) = *((unsigned char *)a2 + 400);
      a1[49] = v31;
      LODWORD(v31) = *((_DWORD *)a2 + 101);
      *((unsigned char *)a1 + 408) = *((unsigned char *)a2 + 408);
      *((_DWORD *)a1 + 101) = v31;
      LODWORD(v31) = *((_DWORD *)a2 + 103);
      *((unsigned char *)a1 + 416) = *((unsigned char *)a2 + 416);
      *((_DWORD *)a1 + 103) = v31;
      LODWORD(v31) = *((_DWORD *)a2 + 105);
      *((unsigned char *)a1 + 424) = *((unsigned char *)a2 + 424);
      *((_DWORD *)a1 + 105) = v31;
      goto LABEL_19;
    }
    outlined destroy of ConnectionTCPInfoMetrics((uint64_t)(a1 + 22));
  }
  uint64_t v14 = a1 + 22;
  long long v15 = a2 + 22;
  size_t v16 = 249;
LABEL_18:
  memcpy(v14, v15, v16);
LABEL_19:
  a1[54] = a2[54];
  swift_bridgeObjectRelease();
  a1[55] = a2[55];
  swift_bridgeObjectRelease();
  long long v17 = (void *)a1[56];
  a1[56] = a2[56];

LABEL_20:
  if (a1[64])
  {
    if (a2[64])
    {
      uint64_t v18 = a2[58];
      a1[57] = a2[57];
      a1[58] = v18;
      swift_bridgeObjectRelease();
      *((_DWORD *)a1 + 118) = *((_DWORD *)a2 + 118);
      *((unsigned char *)a1 + 476) = *((unsigned char *)a2 + 476);
      a1[60] = a2[60];
      *((unsigned char *)a1 + 488) = *((unsigned char *)a2 + 488);
      a1[62] = a2[62];
      *((unsigned char *)a1 + 504) = *((unsigned char *)a2 + 504);
      a1[64] = a2[64];
      swift_bridgeObjectRelease();
      a1[65] = a2[65];
      swift_bridgeObjectRelease();
      *((unsigned char *)a1 + 528) = *((unsigned char *)a2 + 528);
      *((unsigned char *)a1 + 529) = *((unsigned char *)a2 + 529);
      a1[67] = a2[67];
      a1[68] = a2[68];
      swift_bridgeObjectRelease();
      a1[69] = a2[69];
      uint64_t v19 = (void *)a1[70];
      a1[70] = a2[70];

      goto LABEL_25;
    }
    outlined destroy of ConnectionEstablishmentReport((uint64_t)(a1 + 57));
  }
  memcpy(a1 + 57, a2 + 57, 0x70uLL);
LABEL_25:
  if (a1[73])
  {
    uint64_t v20 = a2[73];
    if (v20)
    {
      *((_DWORD *)a1 + 142) = *((_DWORD *)a2 + 142);
      a1[72] = a2[72];
      a1[73] = v20;
      swift_bridgeObjectRelease();
      a1[74] = a2[74];
      a1[75] = a2[75];
      swift_bridgeObjectRelease();
      if (a1[89])
      {
        if (a2[89])
        {
          *((_DWORD *)a1 + 152) = *((_DWORD *)a2 + 152);
          *((unsigned char *)a1 + 612) = *((unsigned char *)a2 + 612);
          a1[77] = a2[77];
          a1[78] = a2[78];
          swift_bridgeObjectRelease();
          a1[79] = a2[79];
          *((unsigned char *)a1 + 640) = *((unsigned char *)a2 + 640);
          a1[81] = a2[81];
          a1[82] = a2[82];
          swift_bridgeObjectRelease();
          a1[83] = a2[83];
          a1[84] = a2[84];
          swift_bridgeObjectRelease();
          a1[85] = a2[85];
          a1[86] = a2[86];
          swift_bridgeObjectRelease();
          *((_DWORD *)a1 + 174) = *((_DWORD *)a2 + 174);
          *((unsigned char *)a1 + 700) = *((unsigned char *)a2 + 700);
          *((_DWORD *)a1 + 176) = *((_DWORD *)a2 + 176);
          *((unsigned char *)a1 + 708) = *((unsigned char *)a2 + 708);
          a1[89] = a2[89];
          swift_bridgeObjectRelease();
          a1[90] = a2[90];
          a1[91] = a2[91];
          swift_bridgeObjectRelease();
          a1[92] = a2[92];
          *((unsigned char *)a1 + 744) = *((unsigned char *)a2 + 744);
          a1[94] = a2[94];
          *((unsigned char *)a1 + 760) = *((unsigned char *)a2 + 760);
          a1[96] = a2[96];
          *((unsigned char *)a1 + 776) = *((unsigned char *)a2 + 776);
          *((unsigned char *)a1 + 792) = *((unsigned char *)a2 + 792);
          a1[98] = a2[98];
          uint64_t v21 = a2[100];
          *((unsigned char *)a1 + 808) = *((unsigned char *)a2 + 808);
          a1[100] = v21;
          a1[102] = a2[102];
          *((unsigned char *)a1 + 824) = *((unsigned char *)a2 + 824);
          a1[104] = a2[104];
          a1[105] = a2[105];
          swift_bridgeObjectRelease();
          a1[106] = a2[106];
          *((unsigned char *)a1 + 856) = *((unsigned char *)a2 + 856);
          a1[108] = a2[108];
          *((unsigned char *)a1 + 872) = *((unsigned char *)a2 + 872);
          *((unsigned char *)a1 + 873) = *((unsigned char *)a2 + 873);
          a1[110] = a2[110];
          *((unsigned char *)a1 + 888) = *((unsigned char *)a2 + 888);
          *((unsigned char *)a1 + 904) = *((unsigned char *)a2 + 904);
          a1[112] = a2[112];
          a1[114] = a2[114];
          *((unsigned char *)a1 + 920) = *((unsigned char *)a2 + 920);
          goto LABEL_34;
        }
        outlined destroy of ConnectionNetworkReport((uint64_t)(a1 + 76));
      }
      memcpy(a1 + 76, a2 + 76, 0x139uLL);
LABEL_34:
      *((_OWORD *)a1 + 58) = *((_OWORD *)a2 + 58);
      *((unsigned char *)a1 + 944) = *((unsigned char *)a2 + 944);
      if (a1[120])
      {
        uint64_t v22 = a2[120];
        if (v22)
        {
          a1[119] = a2[119];
          a1[120] = v22;
          swift_bridgeObjectRelease();
          a1[121] = a2[121];
          a1[122] = a2[122];
          swift_bridgeObjectRelease();
          *((unsigned char *)a1 + 984) = *((unsigned char *)a2 + 984);
          *((_DWORD *)a1 + 247) = *((_DWORD *)a2 + 247);
          if (a1[125] != 1)
          {
            uint64_t v23 = a2[125];
            if (v23 != 1)
            {
              a1[124] = a2[124];
              a1[125] = v23;
              swift_bridgeObjectRelease();
              a1[126] = a2[126];
              a1[127] = a2[127];
              swift_bridgeObjectRelease();
              *((unsigned char *)a1 + 1024) = *((unsigned char *)a2 + 1024);
              a1[129] = a2[129];
              *((unsigned char *)a1 + 1040) = *((unsigned char *)a2 + 1040);
              a1[131] = a2[131];
              *((unsigned char *)a1 + 1056) = *((unsigned char *)a2 + 1056);
              a1[133] = a2[133];
              *((unsigned char *)a1 + 1072) = *((unsigned char *)a2 + 1072);
              *((unsigned char *)a1 + 1088) = *((unsigned char *)a2 + 1088);
              a1[135] = a2[135];
              uint64_t v32 = a2[137];
              *((unsigned char *)a1 + 1104) = *((unsigned char *)a2 + 1104);
              a1[137] = v32;
              a1[139] = a2[139];
              *((unsigned char *)a1 + 1120) = *((unsigned char *)a2 + 1120);
              a1[141] = a2[141];
              *((unsigned char *)a1 + 1136) = *((unsigned char *)a2 + 1136);
              a1[143] = a2[143];
              *((unsigned char *)a1 + 1152) = *((unsigned char *)a2 + 1152);
              *((unsigned char *)a1 + 1160) = *((unsigned char *)a2 + 1160);
              *((_DWORD *)a1 + 289) = *((_DWORD *)a2 + 289);
              *((unsigned char *)a1 + 1168) = *((unsigned char *)a2 + 1168);
              *((_DWORD *)a1 + 291) = *((_DWORD *)a2 + 291);
              *((unsigned char *)a1 + 1176) = *((unsigned char *)a2 + 1176);
              *((_DWORD *)a1 + 293) = *((_DWORD *)a2 + 293);
              *((unsigned char *)a1 + 1184) = *((unsigned char *)a2 + 1184);
              *((_DWORD *)a1 + 295) = *((_DWORD *)a2 + 295);
              *((unsigned char *)a1 + 1200) = *((unsigned char *)a2 + 1200);
              a1[149] = a2[149];
              uint64_t v33 = a2[151];
              *((unsigned char *)a1 + 1216) = *((unsigned char *)a2 + 1216);
              a1[151] = v33;
              LODWORD(v33) = *((_DWORD *)a2 + 305);
              *((unsigned char *)a1 + 1224) = *((unsigned char *)a2 + 1224);
              *((_DWORD *)a1 + 305) = v33;
              LODWORD(v33) = *((_DWORD *)a2 + 307);
              *((unsigned char *)a1 + 1232) = *((unsigned char *)a2 + 1232);
              *((_DWORD *)a1 + 307) = v33;
              LODWORD(v33) = *((_DWORD *)a2 + 309);
              *((unsigned char *)a1 + 1240) = *((unsigned char *)a2 + 1240);
              *((_DWORD *)a1 + 309) = v33;
              goto LABEL_43;
            }
            outlined destroy of ConnectionTCPInfoMetrics((uint64_t)(a1 + 124));
          }
          uint64_t v24 = a1 + 124;
          size_t v25 = a2 + 124;
          size_t v26 = 249;
LABEL_42:
          memcpy(v24, v25, v26);
LABEL_43:
          a1[156] = a2[156];
          swift_bridgeObjectRelease();
          a1[157] = a2[157];
          swift_bridgeObjectRelease();
          *((_DWORD *)a1 + 316) = *((_DWORD *)a2 + 316);
          uint64_t v27 = (void *)a1[159];
          a1[159] = a2[159];

          goto LABEL_44;
        }
        outlined destroy of ConnectionInterfaceReport((uint64_t)(a1 + 119));
      }
      uint64_t v24 = a1 + 119;
      size_t v25 = a2 + 119;
      size_t v26 = 289;
      goto LABEL_42;
    }
    outlined destroy of ConnectionSnapshotReport((uint64_t)(a1 + 71));
  }
  memcpy(a1 + 71, a2 + 71, 0x2C8uLL);
LABEL_44:
  a1[160] = a2[160];
  swift_bridgeObjectRelease();
  a1[161] = a2[161];
  a1[162] = a2[162];
  swift_bridgeObjectRelease();
  a1[163] = a2[163];
  a1[164] = a2[164];
  swift_bridgeObjectRelease();
  a1[165] = a2[165];
  *((unsigned char *)a1 + 1328) = *((unsigned char *)a2 + 1328);
  a1[167] = a2[167];
  *((unsigned char *)a1 + 1344) = *((unsigned char *)a2 + 1344);
  a1[169] = a2[169];
  *((unsigned char *)a1 + 1360) = *((unsigned char *)a2 + 1360);
  a1[171] = a2[171];
  a1[172] = a2[172];
  swift_bridgeObjectRelease();
  *((_DWORD *)a1 + 346) = *((_DWORD *)a2 + 346);
  *((unsigned char *)a1 + 1388) = *((unsigned char *)a2 + 1388);
  a1[174] = a2[174];
  *((unsigned char *)a1 + 1400) = *((unsigned char *)a2 + 1400);
  a1[176] = a2[176];
  *((unsigned char *)a1 + 1416) = *((unsigned char *)a2 + 1416);
  *((unsigned char *)a1 + 1432) = *((unsigned char *)a2 + 1432);
  a1[178] = a2[178];
  return a1;
}

uint64_t getEnumTagSinglePayload for ConnectionMetrics(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 1433))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConnectionMetrics(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 1432) = 0;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 1433) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 1433) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ConnectionMetrics()
{
  return &type metadata for ConnectionMetrics;
}

uint64_t NoneDataDecompressor.decompressedDataForData(_:)(uint64_t a1, unint64_t a2)
{
  return a1;
}

uint64_t NoneDataDecompressor.__deallocating_deinit()
{
  return MEMORY[0x270FA0228](v0, 16, 7);
}

uint64_t type metadata accessor for NoneDataDecompressor()
{
  return self;
}

uint64_t protocol witness for DataDecompressing.decompressedDataForData(_:) in conformance NoneDataDecompressor(uint64_t a1, unint64_t a2)
{
  return NoneDataDecompressor.decompressedDataForData(_:)(a1, a2);
}

BOOL specialized == infix<A>(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

BOOL specialized == infix<A>(_:_:)(int a1, int a2)
{
  return a1 == a2;
}

{
  return ((a2 ^ a1) & 1) == 0;
}

BOOL specialized == infix<A>(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

{
  return qword_25D791F90[a1] == qword_25D791F90[a2];
}

{
  return (0x70403020100FFuLL >> (8 * a1)) == (0x70403020100FFuLL >> (8 * a2));
}

uint64_t specialized == infix<A>(_:_:)(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 1685024615;
  unint64_t v3 = 0xE400000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 1685024615;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE300000000000000;
      uint64_t v5 = 6578530;
      break;
    case 2:
      uint64_t v5 = 0x616C696176616E75;
      unint64_t v3 = 0xEB00000000656C62;
      break;
    case 3:
      unint64_t v3 = 0xE700000000000000;
      uint64_t v5 = OUTLINED_FUNCTION_0_4();
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE400000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE300000000000000;
      uint64_t v2 = 6578530;
      break;
    case 2:
      uint64_t v2 = 0x616C696176616E75;
      unint64_t v6 = 0xEB00000000656C62;
      break;
    case 3:
      unint64_t v6 = 0xE700000000000000;
      uint64_t v2 = 0x6E776F6E6B6E75;
      break;
    default:
      break;
  }
  if (v5 == v2 && v3 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t ConnectionType.rawValue.getter()
{
  return OUTLINED_FUNCTION_3_12(*v0);
}

uint64_t ConnectionType.stringRawValue.getter()
{
  uint64_t result = 0x6E776F6E6B6E55;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x69462D6957;
      break;
    case 2:
      uint64_t result = 1312905047;
      break;
    case 3:
      uint64_t result = 0x4E41525455;
      break;
    case 4:
      uint64_t result = 0x31414D4443204732;
      break;
    case 5:
      uint64_t result = 0x53525047204732;
      break;
    case 6:
      uint64_t result = 0x65676445204732;
      break;
    case 7:
      uint64_t result = 0x414D444357204733;
      break;
    case 8:
      uint64_t v2 = 0x445348204733;
      goto LABEL_11;
    case 9:
      uint64_t v2 = 0x555348204733;
LABEL_11:
      uint64_t result = v2 & 0xFFFFFFFFFFFFLL | 0x4150000000000000;
      break;
    case 0xA:
    case 0xB:
    case 0xC:
      uint64_t result = 0x44564520414D4443;
      break;
    case 0xD:
      uint64_t result = 1146114632;
      break;
    case 0xE:
      uint64_t result = 4543564;
      break;
    case 0xF:
      uint64_t result = 0x41534E524E204735;
      break;
    case 0x10:
      uint64_t result = 0x524E204735;
      break;
    case 0x11:
      uint64_t result = 0x504354504DLL;
      break;
    case 0x12:
      uint64_t result = 0x796C6C654264654CLL;
      break;
    case 0x13:
      uint64_t result = 5456969;
      break;
    case 0x14:
      uint64_t result = 5263184;
      break;
    case 0x15:
      uint64_t result = 0x65636E65726F6C46;
      break;
    case 0x16:
      uint64_t result = 0x6C61636F4CLL;
      break;
    case 0x17:
      uint64_t result = 0x504354504D574ELL;
      break;
    case 0x18:
      uint64_t result = 0x6365737069;
      break;
    default:
      return result;
  }
  return result;
}

SiriNetwork::ConnectionType_optional __swiftcall ConnectionType.init(fromStringValue:)(Swift::String fromStringValue)
{
  uint64_t v2 = v1;
  Swift::String v3 = String.lowercased()();
  swift_bridgeObjectRelease();
  BOOL v4 = v3._countAndFlagsBits == 0x6E776F6E6B6E75 && v3._object == (void *)0xE700000000000000;
  if (v4 || (OUTLINED_FUNCTION_0_4(), (OUTLINED_FUNCTION_0_18() & 1) != 0))
  {
    result.value = swift_bridgeObjectRelease();
    char v6 = 0;
  }
  else
  {
    BOOL v7 = v3._countAndFlagsBits == 0x69662D6977 && v3._object == (void *)0xE500000000000000;
    if (v7 || (OUTLINED_FUNCTION_0_18() & 1) != 0)
    {
      result.value = swift_bridgeObjectRelease();
      char v6 = 1;
    }
    else
    {
      BOOL v8 = v3._countAndFlagsBits == 1851881335 && v3._object == (void *)0xE400000000000000;
      if (v8 || (OUTLINED_FUNCTION_0_18() & 1) != 0)
      {
        result.value = swift_bridgeObjectRelease();
        char v6 = 2;
      }
      else
      {
        BOOL v9 = v3._countAndFlagsBits == 0x6E61727475 && v3._object == (void *)0xE500000000000000;
        if (v9 || (OUTLINED_FUNCTION_0_18() & 1) != 0)
        {
          result.value = swift_bridgeObjectRelease();
          char v6 = 3;
        }
        else
        {
          BOOL v10 = v3._countAndFlagsBits == 0x31616D6463206732 && v3._object == (void *)0xE900000000000078;
          if (v10 || (OUTLINED_FUNCTION_0_18() & 1) != 0)
          {
            result.value = swift_bridgeObjectRelease();
            char v6 = 4;
          }
          else
          {
            BOOL v11 = v3._countAndFlagsBits == 0x73727067206732 && v3._object == (void *)0xE700000000000000;
            if (v11 || (OUTLINED_FUNCTION_0_18() & 1) != 0)
            {
              result.value = swift_bridgeObjectRelease();
              char v6 = 5;
            }
            else
            {
              BOOL v12 = v3._countAndFlagsBits == 0x65676465206732 && v3._object == (void *)0xE700000000000000;
              if (v12 || (OUTLINED_FUNCTION_0_18() & 1) != 0)
              {
                result.value = swift_bridgeObjectRelease();
                char v6 = 6;
              }
              else
              {
                BOOL v13 = v3._countAndFlagsBits == 0x616D646377206733 && v3._object == (void *)0xE800000000000000;
                if (v13 || (OUTLINED_FUNCTION_0_18() & 1) != 0)
                {
                  result.value = swift_bridgeObjectRelease();
                  char v6 = 7;
                }
                else
                {
                  BOOL v14 = v3._countAndFlagsBits == 0x6170647368206733 && v3._object == (void *)0xE800000000000000;
                  if (v14 || (OUTLINED_FUNCTION_0_18() & 1) != 0)
                  {
                    result.value = swift_bridgeObjectRelease();
                    char v6 = 8;
                  }
                  else
                  {
                    BOOL v15 = v3._countAndFlagsBits == 0x6170757368206733 && v3._object == (void *)0xE800000000000000;
                    if (v15 || (OUTLINED_FUNCTION_0_18() & 1) != 0)
                    {
                      result.value = swift_bridgeObjectRelease();
                      char v6 = 9;
                    }
                    else
                    {
                      BOOL v16 = v3._countAndFlagsBits == 0x64766520616D6463 && v3._object == (void *)0xED0000307665726FLL;
                      if (v16 || (OUTLINED_FUNCTION_1_15(), (OUTLINED_FUNCTION_0_18() & 1) != 0))
                      {
                        result.value = swift_bridgeObjectRelease();
                        char v6 = 10;
                      }
                      else
                      {
                        BOOL v17 = v3._countAndFlagsBits == 0x64766520616D6463
                           && v3._object == (void *)0xED0000617665726FLL;
                        if (v17 || (OUTLINED_FUNCTION_1_15(), (OUTLINED_FUNCTION_0_18() & 1) != 0))
                        {
                          result.value = swift_bridgeObjectRelease();
                          char v6 = 11;
                        }
                        else
                        {
                          BOOL v18 = v3._countAndFlagsBits == 0x64766520616D6463
                             && v3._object == (void *)0xED0000627665726FLL;
                          if (v18 || (OUTLINED_FUNCTION_1_15(), (OUTLINED_FUNCTION_0_18() & 1) != 0))
                          {
                            result.value = swift_bridgeObjectRelease();
                            char v6 = 12;
                          }
                          else
                          {
                            BOOL v19 = v3._countAndFlagsBits == 1685090920 && v3._object == (void *)0xE400000000000000;
                            if (v19 || (OUTLINED_FUNCTION_0_18() & 1) != 0)
                            {
                              result.value = swift_bridgeObjectRelease();
                              char v6 = 13;
                            }
                            else
                            {
                              BOOL v20 = v3._countAndFlagsBits == 6648940 && v3._object == (void *)0xE300000000000000;
                              if (v20 || (OUTLINED_FUNCTION_0_18() & 1) != 0)
                              {
                                result.value = swift_bridgeObjectRelease();
                                char v6 = 14;
                              }
                              else
                              {
                                BOOL v21 = v3._countAndFlagsBits == 0x61736E726E206735
                                   && v3._object == (void *)0xE800000000000000;
                                if (v21 || (OUTLINED_FUNCTION_0_18() & 1) != 0)
                                {
                                  result.value = swift_bridgeObjectRelease();
                                  char v6 = 15;
                                }
                                else
                                {
                                  BOOL v22 = v3._countAndFlagsBits == 0x726E206735
                                     && v3._object == (void *)0xE500000000000000;
                                  if (v22 || (OUTLINED_FUNCTION_0_18() & 1) != 0)
                                  {
                                    result.value = swift_bridgeObjectRelease();
                                    char v6 = 16;
                                  }
                                  else
                                  {
                                    BOOL v23 = v3._countAndFlagsBits == 0x706374706DLL
                                       && v3._object == (void *)0xE500000000000000;
                                    if (v23 || (OUTLINED_FUNCTION_0_18() & 1) != 0)
                                    {
                                      result.value = swift_bridgeObjectRelease();
                                      char v6 = 17;
                                    }
                                    else
                                    {
                                      BOOL v24 = v3._countAndFlagsBits == 0x796C6C656264656CLL
                                         && v3._object == (void *)0xE800000000000000;
                                      if (v24 || (OUTLINED_FUNCTION_0_18() & 1) != 0)
                                      {
                                        result.value = swift_bridgeObjectRelease();
                                        char v6 = 18;
                                      }
                                      else
                                      {
                                        BOOL v25 = v3._countAndFlagsBits == 7562345
                                           && v3._object == (void *)0xE300000000000000;
                                        if (v25 || (OUTLINED_FUNCTION_0_18() & 1) != 0)
                                        {
                                          result.value = swift_bridgeObjectRelease();
                                          char v6 = 19;
                                        }
                                        else
                                        {
                                          BOOL v26 = v3._countAndFlagsBits == 7368560
                                             && v3._object == (void *)0xE300000000000000;
                                          if (v26 || (OUTLINED_FUNCTION_0_18() & 1) != 0)
                                          {
                                            result.value = swift_bridgeObjectRelease();
                                            char v6 = 20;
                                          }
                                          else
                                          {
                                            BOOL v27 = v3._countAndFlagsBits == 0x65636E65726F6C66
                                               && v3._object == (void *)0xE800000000000000;
                                            if (v27 || (OUTLINED_FUNCTION_0_18() & 1) != 0)
                                            {
                                              result.value = swift_bridgeObjectRelease();
                                              char v6 = 21;
                                            }
                                            else
                                            {
                                              BOOL v28 = v3._countAndFlagsBits == 0x6C61636F6CLL
                                                 && v3._object == (void *)0xE500000000000000;
                                              if (v28 || (OUTLINED_FUNCTION_0_18() & 1) != 0)
                                              {
                                                result.value = swift_bridgeObjectRelease();
                                                char v6 = 22;
                                              }
                                              else
                                              {
                                                BOOL v29 = v3._countAndFlagsBits == 0x706374706D776ELL
                                                   && v3._object == (void *)0xE700000000000000;
                                                if (v29 || (OUTLINED_FUNCTION_0_18() & 1) != 0)
                                                {
                                                  result.value = swift_bridgeObjectRelease();
                                                  char v6 = 23;
                                                }
                                                else if (v3._countAndFlagsBits == 0x6365737069 {
                                                       && v3._object == (void *)0xE500000000000000)
                                                }
                                                {
                                                  result.value = swift_bridgeObjectRelease();
                                                  char v6 = 24;
                                                }
                                                else
                                                {
                                                  char v31 = OUTLINED_FUNCTION_0_18();
                                                  result.value = swift_bridgeObjectRelease();
                                                  if (v31) {
                                                    char v6 = 24;
                                                  }
                                                  else {
                                                    char v6 = 25;
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  *uint64_t v2 = v6;
  return result;
}

Swift::Bool __swiftcall ConnectionType.isWWAN()()
{
  return *v0 - 2 < 0xF;
}

Swift::Bool __swiftcall ConnectionType.isEdge()()
{
  return OUTLINED_FUNCTION_2_13(*v0);
}

Swift::Bool __swiftcall ConnectionType.canUseWifiDirectly()()
{
  return OUTLINED_FUNCTION_2_13(*v0);
}

uint64_t ConnectionType.diagnosticConnectionType()()
{
  uint64_t result = 2;
  int v2 = 1 << *v0;
  if ((v2 & 0x1FFFC) == 0) {
    return (v2 & 0x1FE0001) == 0;
  }
  return result;
}

uint64_t ConnectionType.aggregatorConnectionType()()
{
  return OUTLINED_FUNCTION_3_12(*v0);
}

SiriNetwork::ConnectionType_optional __swiftcall ConnectionType.init(rawValue:)(Swift::Int rawValue)
{
  char v2 = 7;
  switch(rawValue)
  {
    case 2000:
      char v2 = 2;
      break;
    case 2001:
      char v2 = 3;
      break;
    case 2002:
      char v2 = 4;
      break;
    case 2003:
      char v2 = 5;
      break;
    case 2004:
      char v2 = 6;
      break;
    case 2005:
      break;
    case 2006:
      char v2 = 8;
      break;
    case 2007:
      char v2 = 9;
      break;
    case 2008:
      char v2 = 10;
      break;
    case 2009:
      char v2 = 11;
      break;
    case 2010:
      char v2 = 12;
      break;
    case 2011:
      char v2 = 13;
      break;
    case 2012:
      char v2 = 14;
      break;
    case 2013:
      char v2 = 15;
      break;
    case 2014:
      char v2 = 16;
      break;
    default:
      switch(rawValue)
      {
        case 3000:
          char v2 = 17;
          break;
        case 3001:
          char v2 = 18;
          break;
        case 3002:
          char v2 = 19;
          break;
        case 3003:
          char v2 = 20;
          break;
        case 3004:
          char v2 = 21;
          break;
        case 3005:
          char v2 = 22;
          break;
        case 3006:
          char v2 = 23;
          break;
        default:
          if (rawValue)
          {
            if (rawValue == 4000)
            {
              char v2 = 24;
            }
            else if (rawValue == 1000)
            {
              char v2 = 1;
            }
            else
            {
              char v2 = 25;
            }
          }
          else
          {
            char v2 = 0;
          }
          break;
      }
      break;
  }
  char *v1 = v2;
  return (SiriNetwork::ConnectionType_optional)rawValue;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ConnectionType(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ConnectionType()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance ConnectionType(uint64_t a1)
{
  specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ConnectionType(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

SiriNetwork::ConnectionType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ConnectionType(Swift::Int *a1)
{
  return ConnectionType.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ConnectionType@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ConnectionType.rawValue.getter();
  *a1 = result;
  return result;
}

void ConnectionTypeWrapper.connectionType.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + OBJC_IVAR___SNConnectionTypeInternal_connectionType);
}

id ConnectionTypeWrapper.__allocating_init(_:)(Swift::Int a1)
{
  id v3 = objc_allocWithZone(v1);
  return ConnectionTypeWrapper.init(_:)(a1);
}

id ConnectionTypeWrapper.init(_:)(Swift::Int a1)
{
  ConnectionType.init(rawValue:)(a1);
  char v2 = v5;
  if (v5 == 25) {
    char v2 = 0;
  }
  v1[OBJC_IVAR___SNConnectionTypeInternal_connectionType] = v2;
  v4.receiver = v1;
  v4.super_class = (Class)type metadata accessor for ConnectionTypeWrapper();
  return objc_msgSendSuper2(&v4, sel_init);
}

uint64_t type metadata accessor for ConnectionTypeWrapper()
{
  return self;
}

Swift::Int __swiftcall ConnectionTypeWrapper.connectionTypeRawValue()()
{
  return OUTLINED_FUNCTION_3_12(*(char *)(v0 + OBJC_IVAR___SNConnectionTypeInternal_connectionType));
}

Swift::String __swiftcall ConnectionTypeWrapper.connectionTypeStringRawValue()()
{
  uint64_t v0 = ConnectionType.stringRawValue.getter();
  result._object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

Swift::Bool __swiftcall ConnectionTypeWrapper.isWWAN()()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR___SNConnectionTypeInternal_connectionType) - 2 < 0xF;
}

Swift::Bool __swiftcall ConnectionTypeWrapper.isEdge()()
{
  return OUTLINED_FUNCTION_2_13(*(unsigned char *)(v0 + OBJC_IVAR___SNConnectionTypeInternal_connectionType));
}

Swift::Bool __swiftcall ConnectionTypeWrapper.canUseWiFiDirectly()()
{
  return OUTLINED_FUNCTION_2_13(*(unsigned char *)(v0 + OBJC_IVAR___SNConnectionTypeInternal_connectionType));
}

uint64_t ConnectionTypeWrapper.diagnosticConnectionType()()
{
  uint64_t result = 2;
  int v2 = 1 << *(unsigned char *)(v0 + OBJC_IVAR___SNConnectionTypeInternal_connectionType);
  if ((v2 & 0x1FFFC) == 0) {
    return (v2 & 0x1FE0001) == 0;
  }
  return result;
}

uint64_t ConnectionTypeWrapper.aggregatorConnectionType()()
{
  return OUTLINED_FUNCTION_3_12(*(char *)(v0 + OBJC_IVAR___SNConnectionTypeInternal_connectionType));
}

id ConnectionTypeWrapper.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void ConnectionTypeWrapper.init()()
{
}

id ConnectionTypeWrapper.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ConnectionTypeWrapper();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t lazy protocol witness table accessor for type ConnectionType and conformance ConnectionType()
{
  unint64_t result = lazy protocol witness table cache variable for type ConnectionType and conformance ConnectionType;
  if (!lazy protocol witness table cache variable for type ConnectionType and conformance ConnectionType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConnectionType and conformance ConnectionType);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ConnectionType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xE8)
  {
    if (a2 + 24 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 24) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 25;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x19;
  int v5 = v6 - 25;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for ConnectionType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 24 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 24) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xE8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xE7)
  {
    unsigned int v6 = ((a2 - 232) >> 8) + 1;
    *unint64_t result = a2 + 24;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25D71F7FCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 24;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ConnectionType()
{
  return &type metadata for ConnectionType;
}

uint64_t method lookup function for ConnectionTypeWrapper(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ConnectionTypeWrapper);
}

uint64_t dispatch thunk of ConnectionTypeWrapper.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of ConnectionTypeWrapper.connectionTypeRawValue()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x60))();
}

uint64_t dispatch thunk of ConnectionTypeWrapper.connectionTypeStringRawValue()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x68))();
}

uint64_t dispatch thunk of ConnectionTypeWrapper.isWWAN()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x70))();
}

uint64_t dispatch thunk of ConnectionTypeWrapper.isEdge()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x78))();
}

uint64_t dispatch thunk of ConnectionTypeWrapper.canUseWiFiDirectly()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x80))();
}

uint64_t dispatch thunk of ConnectionTypeWrapper.diagnosticConnectionType()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x88))();
}

uint64_t dispatch thunk of ConnectionTypeWrapper.aggregatorConnectionType()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x90))();
}

uint64_t OUTLINED_FUNCTION_0_18()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_1_15()
{
  return 0x64766520616D6463;
}

uint64_t OUTLINED_FUNCTION_2_13@<X0>(char a1@<W8>)
{
  return v1 & (v2 >> a1);
}

uint64_t OUTLINED_FUNCTION_3_12@<X0>(uint64_t a1@<X8>)
{
  return *(void *)(v1 + 8 * a1);
}

uint64_t AceObject.internalAceId.getter()
{
  return outlined bridged method (pb) of @objc AceObject.aceId.getter(v0, (SEL *)&selRef_aceId);
}

void AceObject.internalAceId.setter(uint64_t a1, uint64_t a2)
{
}

uint64_t (*AceObject.internalAceId.modify(uint64_t *a1))(uint64_t a1, char a2)
{
  a1[2] = (uint64_t)v1;
  *a1 = outlined bridged method (pb) of @objc AceObject.aceId.getter(v1, (SEL *)&selRef_aceId);
  a1[1] = v3;
  return AceObject.internalAceId.modify;
}

uint64_t AceObject.internalAceId.modify(uint64_t a1, char a2)
{
  return AceObject.internalAceId.modify(a1, a2, (void (*)(uint64_t))AceObject.internalAceId.setter);
}

uint64_t AceObject.internalRefId.getter()
{
  return outlined bridged method (pb) of @objc AceObject.aceId.getter(v0, (SEL *)&selRef_refId);
}

uint64_t key path setter for AceObject.internalAceId : AceObject(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  swift_bridgeObjectRetain();
  uint64_t v6 = OUTLINED_FUNCTION_1_16();
  return a5(v6);
}

void AceObject.internalRefId.setter(uint64_t a1, uint64_t a2)
{
}

void AceObject.internalAceId.setter(uint64_t a1, uint64_t a2, SEL *a3)
{
  if (a2)
  {
    id v5 = (id)MEMORY[0x2611B2220]();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v5 = 0;
  }
  objc_msgSend(v3, *a3, v5);
}

uint64_t (*AceObject.internalRefId.modify(uint64_t *a1))(uint64_t a1, char a2)
{
  a1[2] = (uint64_t)v1;
  *a1 = outlined bridged method (pb) of @objc AceObject.aceId.getter(v1, (SEL *)&selRef_refId);
  a1[1] = v3;
  return AceObject.internalRefId.modify;
}

uint64_t AceObject.internalRefId.modify(uint64_t a1, char a2)
{
  return AceObject.internalAceId.modify(a1, a2, (void (*)(uint64_t))AceObject.internalRefId.setter);
}

uint64_t AceObject.internalAceId.modify(uint64_t a1, char a2, void (*a3)(uint64_t))
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = OUTLINED_FUNCTION_1_16();
    a3(v4);
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = OUTLINED_FUNCTION_1_16();
    return ((uint64_t (*)(uint64_t))a3)(v6);
  }
}

uint64_t AceObject.serializedAceData()()
{
  int64_t v3 = (int64_t)static AceSerialization.aceDataForObject(_:)(v0);
  if (v1) {
    return v2;
  }
  if (v4 >> 60 == 15)
  {
    lazy protocol witness table accessor for type AceSerializationError and conformance AceSerializationError();
    swift_allocError();
    *(_OWORD *)uint64_t v5 = xmmword_25D792120;
    *(unsigned char *)(v5 + 16) = 3;
    swift_willThrow();
    return v2;
  }
  uint64_t v7 = v3;
  switch(v4 >> 62)
  {
    case 1uLL:
      if (v3 >> 32 < (int)v3)
      {
        __break(1u);
        swift_release();
        swift_release();
        __break(1u);
        OUTLINED_FUNCTION_3_13();
        __break(1u);
        JUMPOUT(0x25D71FE1CLL);
      }
      swift_retain();
      uint64_t v2 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v7, v7 >> 32);
      OUTLINED_FUNCTION_3_13();
      goto LABEL_12;
    case 2uLL:
      uint64_t v10 = *(void *)(v3 + 16);
      uint64_t v11 = *(void *)(v3 + 24);
      swift_retain();
      swift_retain();
      uint64_t v2 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v10, v11);
      swift_release();
      swift_release();
LABEL_12:
      OUTLINED_FUNCTION_3_13();
      return v2;
    case 3uLL:
      int64_t v3 = 0;
      unint64_t v9 = 0;
      uint64_t v8 = 0;
      goto LABEL_9;
    default:
      uint64_t v8 = BYTE6(v4);
      unint64_t v9 = v4 & 0xFFFFFFFFFFFFLL;
LABEL_9:
      uint64_t v12 = _ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_A13Et_sAC_pSo16OS_dispatch_dataCTg5037_s10Foundation4DataV06InlineB0V15withb29BytesyxxSWKXEKlFxSWKXEfU_So16g1_h1_I5C_TG5SWxsAC_pRi_zRi0_zlyAGIsgyrzo_SiTf1nc_n044_sSo9AceObjectC11SiriNetworkE010serializedA4lug1_h1_I13CyKFAFSWXEfU_Tf1ncn_n(v3, v9, v8);
      OUTLINED_FUNCTION_3_13();
      uint64_t result = v12;
      break;
  }
  return result;
}

id @objc AceObject.serializedAceData()(void *a1)
{
  id v1 = a1;
  uint64_t v2 = (void *)AceObject.serializedAceData()();

  return v2;
}

uint64_t @objc AceObject.bufferingAllowedDuringActiveSession()()
{
  return 1;
}

uint64_t @objc AceObject.isRetryable()()
{
  return 1;
}

Swift::Bool __swiftcall AceObject.isRestartable()()
{
  return objc_msgSend(v0, sel_isRetryable);
}

BOOL @objc AceObject.isRestartable()(void *a1)
{
  id v1 = a1;
  Swift::Bool v2 = AceObject.isRestartable()();

  return v2;
}

uint64_t @objc AceObject.isProvisional()()
{
  return 0;
}

Swift::String_optional __swiftcall AceObject.sessionRequestId()()
{
  uint64_t v0 = 0;
  id v1 = 0;
  result.value._object = v1;
  result.value._uint64_t countAndFlagsBits = v0;
  return result;
}

id @objc AceObject.sessionRequestId()()
{
  return 0;
}

uint64_t @objc AceObject.setSessionRequestId(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else if (((v3 ^ (2 * v3)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  return swift_bridgeObjectRelease();
}

uint64_t @objc AceObject.supportedByLocalSession()()
{
  return 1;
}

uint64_t @objc AceObject.supportedByRemoteLimitedSession()()
{
  return 1;
}

uint64_t protocol witness for SessionObject.internalAceId.getter in conformance AceObject()
{
  return AceObject.internalAceId.getter();
}

void protocol witness for SessionObject.internalAceId.setter in conformance AceObject(uint64_t a1, uint64_t a2)
{
}

uint64_t (*protocol witness for SessionObject.internalAceId.modify in conformance AceObject(uint64_t *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = *v1;
  a1[2] = (uint64_t)*v1;
  *a1 = outlined bridged method (pb) of @objc AceObject.aceId.getter(v3, (SEL *)&selRef_aceId);
  a1[1] = v4;
  return AceObject.internalAceId.modify;
}

uint64_t protocol witness for SessionObject.internalRefId.getter in conformance AceObject()
{
  return AceObject.internalRefId.getter();
}

void protocol witness for SessionObject.internalRefId.setter in conformance AceObject(uint64_t a1, uint64_t a2)
{
}

uint64_t (*protocol witness for SessionObject.internalRefId.modify in conformance AceObject(uint64_t *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = *v1;
  a1[2] = (uint64_t)*v1;
  *a1 = outlined bridged method (pb) of @objc AceObject.aceId.getter(v3, (SEL *)&selRef_refId);
  a1[1] = v4;
  return AceObject.internalRefId.modify;
}

id protocol witness for SessionObject.serializedAceData() in conformance AceObject()
{
  v6[1] = *(id *)MEMORY[0x263EF8340];
  id v1 = *v0;
  v6[0] = 0;
  id v2 = objc_msgSend(v1, sel_serializedAceDataAndReturnError_, v6);
  if (v2)
  {
    id v3 = v6[0];
  }
  else
  {
    id v4 = v6[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v2;
}

id protocol witness for SessionObject.bufferingAllowedDuringActiveSession() in conformance AceObject()
{
  return objc_msgSend(*v0, sel_bufferingAllowedDuringActiveSession);
}

id protocol witness for SessionObject.isRetryable() in conformance AceObject()
{
  return objc_msgSend(*v0, sel_isRetryable);
}

id protocol witness for SessionObject.isRestartable() in conformance AceObject()
{
  return objc_msgSend(*v0, sel_isRestartable);
}

id protocol witness for SessionObject.isProvisional() in conformance AceObject()
{
  return objc_msgSend(*v0, sel_isProvisional);
}

id protocol witness for SessionObject.logDiagnostics() in conformance AceObject()
{
  return objc_msgSend(*v0, sel_logDiagnostics);
}

uint64_t protocol witness for SessionObject.sessionRequestId() in conformance AceObject()
{
  return outlined bridged method (pb) of @objc AceObject.aceId.getter(*v0, (SEL *)&selRef_sessionRequestId);
}

void protocol witness for SessionObject.setSessionRequestId(_:) in conformance AceObject(uint64_t a1, uint64_t a2)
{
  id v3 = *v2;
  if (a2) {
    uint64_t v4 = MEMORY[0x2611B2220]();
  }
  else {
    uint64_t v4 = 0;
  }
  id v5 = (id)v4;
  objc_msgSend(v3, sel_setSessionRequestId_);
}

id protocol witness for SessionObject.supportedByLocalSession() in conformance AceObject()
{
  return objc_msgSend(*v0, sel_supportedByLocalSession);
}

id protocol witness for SessionObject.supportedByRemoteLimitedSession() in conformance AceObject()
{
  return objc_msgSend(*v0, sel_supportedByRemoteLimitedSession);
}

uint64_t @objc SASyncGetAnchors.bufferingAllowedDuringActiveSession()()
{
  return 0;
}

uint64_t @objc SASyncGetAnchors.isRetryable()()
{
  return 0;
}

uint64_t @objc SASyncChunk.bufferingAllowedDuringActiveSession()()
{
  return 0;
}

uint64_t @objc SASyncChunk.isRetryable()()
{
  return 0;
}

uint64_t @objc SASyncFinished.bufferingAllowedDuringActiveSession()()
{
  return 0;
}

uint64_t @objc SASyncFinished.isRetryable()()
{
  return 0;
}

uint64_t @objc SACFFetchScriptCommand.bufferingAllowedDuringActiveSession()()
{
  return 0;
}

uint64_t @objc SACFFetchScriptCommand.isRetryable()()
{
  return 0;
}

uint64_t @objc SACFFetchScriptCommand.supportedByLocalSession()()
{
  return 0;
}

uint64_t @objc SAMetrics.isRetryable()()
{
  return 0;
}

uint64_t @objc SAMetrics.supportedByLocalSession()()
{
  return 0;
}

uint64_t @objc SASStartSpeech.isRestartable()()
{
  return 0;
}

uint64_t @objc SASSpeechPacket.supportedByRemoteLimitedSession()()
{
  return 0;
}

uint64_t @objc SASUpdateAudioInfo.isRestartable()()
{
  return 0;
}

uint64_t @objc SASEnableServerEndpointer.isRestartable()()
{
  return 0;
}

uint64_t @objc SASEnableServerEndpointer.supportedByLocalSession()()
{
  return 0;
}

uint64_t @objc SASEnableServerEndpointer.supportedByRemoteLimitedSession()()
{
  return 0;
}

uint64_t @objc SASFinishSpeech.isRestartable()()
{
  return 0;
}

uint64_t @objc SASFinishSpeech.supportedByLocalSession()()
{
  return 0;
}

uint64_t @objc SASFinishSpeech.supportedByRemoteLimitedSession()()
{
  return 0;
}

uint64_t @objc SASCancelSpeech.isRestartable()()
{
  return 0;
}

uint64_t @objc SASCancelSpeech.supportedByRemoteLimitedSession()()
{
  return 0;
}

Swift::String_optional __swiftcall SARollbackRequest.sessionRequestId()()
{
  uint64_t v1 = outlined bridged method (pb) of @objc AceObject.aceId.getter(v0, (SEL *)&selRef_requestId);
  result.value._object = v2;
  result.value._uint64_t countAndFlagsBits = v1;
  return result;
}

id @objc SARollbackRequest.sessionRequestId()(void *a1, uint64_t a2)
{
  return @objc SARollbackRequest.sessionRequestId()(a1, a2, (uint64_t (*)(void))SARollbackRequest.sessionRequestId());
}

Swift::Void __swiftcall SARollbackRequest.setSessionRequestId(_:)(Swift::String_optional a1)
{
}

uint64_t @objc SARollbackRequest.setSessionRequestId(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  return @objc SARollbackRequest.setSessionRequestId(_:)(a1, a2, a3, (void (*)(uint64_t, uint64_t))SARollbackRequest.setSessionRequestId(_:));
}

id @objc SAUIGetResponseAlternatives.sessionRequestId()(void *a1, uint64_t a2)
{
  return @objc SARollbackRequest.sessionRequestId()(a1, a2, (uint64_t (*)(void))SAUIGetResponseAlternatives.sessionRequestId());
}

Swift::Void __swiftcall SAUIGetResponseAlternatives.setSessionRequestId(_:)(Swift::String_optional a1)
{
}

uint64_t @objc SAUIGetResponseAlternatives.setSessionRequestId(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  return @objc SARollbackRequest.setSessionRequestId(_:)(a1, a2, a3, (void (*)(uint64_t, uint64_t))SAUIGetResponseAlternatives.setSessionRequestId(_:));
}

uint64_t @objc SARollbackRequest.setSessionRequestId(_:)(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  if (a3)
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
  id v9 = a1;
  a4(v6, v8);

  return swift_bridgeObjectRelease();
}

uint64_t @objc SASServerBoundConfusionNetwork.supportedByLocalSession()()
{
  return 0;
}

uint64_t @objc SASServerBoundConfusionNetwork.supportedByRemoteLimitedSession()()
{
  return 0;
}

uint64_t @objc SASDisableServerEndpointer.supportedByLocalSession()()
{
  return 0;
}

uint64_t @objc SASDisableServerEndpointer.supportedByRemoteLimitedSession()()
{
  return 0;
}

uint64_t @objc SASSpeechCorrectionStatistics.supportedByLocalSession()()
{
  return 0;
}

uint64_t @objc SASSpeechCorrectionStatistics.supportedByRemoteLimitedSession()()
{
  return 0;
}

Swift::String_optional __swiftcall SASSpeechCorrectionStatistics.sessionRequestId()()
{
  uint64_t v1 = outlined bridged method (pb) of @objc AceObject.aceId.getter(v0, (SEL *)&selRef_interactionId);
  result.value._object = v2;
  result.value._uint64_t countAndFlagsBits = v1;
  return result;
}

id @objc SASSpeechCorrectionStatistics.sessionRequestId()(void *a1, uint64_t a2)
{
  return @objc SARollbackRequest.sessionRequestId()(a1, a2, (uint64_t (*)(void))SASSpeechCorrectionStatistics.sessionRequestId());
}

Swift::Void __swiftcall SASSpeechCorrectionStatistics.setSessionRequestId(_:)(Swift::String_optional a1)
{
}

uint64_t @objc SASSpeechCorrectionStatistics.setSessionRequestId(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  return @objc SARollbackRequest.setSessionRequestId(_:)(a1, a2, a3, (void (*)(uint64_t, uint64_t))SASSpeechCorrectionStatistics.setSessionRequestId(_:));
}

uint64_t @objc SASSpeechEndpointIdentified.supportedByLocalSession()()
{
  return 0;
}

uint64_t @objc SASSpeechEndpointIdentified.supportedByRemoteLimitedSession()()
{
  return 0;
}

id @objc SASStartCorrectedSpeechRequest.sessionRequestId()(void *a1, uint64_t a2)
{
  return @objc SARollbackRequest.sessionRequestId()(a1, a2, (uint64_t (*)(void))SASStartCorrectedSpeechRequest.sessionRequestId());
}

id @objc SARollbackRequest.sessionRequestId()(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  id v4 = a1;
  uint64_t v5 = a3();
  uint64_t v7 = v6;

  if (v7)
  {
    uint64_t v8 = (void *)MEMORY[0x2611B2220](v5, v7);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = 0;
  }

  return v8;
}

Swift::Void __swiftcall SASStartCorrectedSpeechRequest.setSessionRequestId(_:)(Swift::String_optional a1)
{
}

void SARollbackRequest.setSessionRequestId(_:)(uint64_t a1, uint64_t a2, SEL *a3)
{
  if (a2) {
    uint64_t v5 = MEMORY[0x2611B2220]();
  }
  else {
    uint64_t v5 = 0;
  }
  id v6 = (id)v5;
  [v3 *a3];
}

uint64_t @objc SASStartCorrectedSpeechRequest.setSessionRequestId(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  return @objc SARollbackRequest.setSessionRequestId(_:)(a1, a2, a3, (void (*)(uint64_t, uint64_t))SASStartCorrectedSpeechRequest.setSessionRequestId(_:));
}

uint64_t @objc SAStartBackgroundActionRequest.supportedByLocalSession()()
{
  return 0;
}

uint64_t @objc SASetClientFlowState.supportedByLocalSession()()
{
  return 0;
}

uint64_t @objc SAGetResultObjects.isRetryable()()
{
  return 0;
}

uint64_t @objc SAGetResultObjects.isProvisional()()
{
  return 1;
}

uint64_t @objc SAResultSelected.isRetryable()()
{
  return 0;
}

uint64_t @objc SAResultSelected.isProvisional()()
{
  return 1;
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchData();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __DataStorage._bytes.getter();
  if (!result || (uint64_t result = __DataStorage._offset.getter(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      __DataStorage._length.getter();
      DispatchData.init(bytes:)();
      uint64_t v9 = DispatchData._bridgeToObjectiveC()();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      return v9;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  uint64_t v4 = type metadata accessor for DispatchData();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __DataStorage._bytes.getter();
  if (!result || (uint64_t result = __DataStorage._offset.getter(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      __DataStorage._length.getter();
      DispatchData.init(bytes:)();
      uint64_t v9 = DispatchData._bridgeToObjectiveC()();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      return v9;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  uint64_t v4 = type metadata accessor for DispatchData();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __DataStorage._bytes.getter();
  if (!result || (uint64_t result = __DataStorage._offset.getter(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      __DataStorage._length.getter();
      DispatchData.init(bytes:)();
      uint64_t v9 = DispatchData._bridgeToObjectiveC()();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      return v9;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t _ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_A13Et_sAC_pSo16OS_dispatch_dataCTg5037_s10Foundation4DataV06InlineB0V15withb29BytesyxxSWKXEKlFxSWKXEfU_So16g1_h1_I5C_TG5SWxsAC_pRi_zRi0_zlyAGIsgyrzo_SiTf1nc_n044_sSo9AceObjectC11SiriNetworkE010serializedA4lug1_h1_I13CyKFAFSWXEfU_Tf1ncn_n(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v24 = a3;
  char v3 = a2;
  char v4 = a1;
  unint64_t v5 = a1 >> 8;
  unint64_t v6 = a1 >> 16;
  unint64_t v7 = a1 >> 24;
  unint64_t v8 = HIDWORD(a1);
  uint64_t v39 = *MEMORY[0x263EF8340];
  unint64_t v16 = a1 >> 40;
  unint64_t v17 = HIWORD(a1);
  unint64_t v18 = HIBYTE(a1);
  unint64_t v19 = a2 >> 8;
  unint64_t v20 = a2 >> 16;
  unint64_t v21 = a2 >> 24;
  unint64_t v22 = HIDWORD(a2);
  unint64_t v23 = a2 >> 40;
  uint64_t v9 = type metadata accessor for DispatchData();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v25 = v4;
  char v26 = v5;
  char v27 = v6;
  char v28 = v7;
  char v29 = v8;
  char v30 = v16;
  char v31 = v17;
  char v32 = v18;
  char v33 = v3;
  char v34 = v19;
  char v35 = v20;
  char v36 = v21;
  char v37 = v22;
  char v38 = v23;
  DispatchData.init(bytes:)();
  uint64_t v13 = DispatchData._bridgeToObjectiveC()();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return v13;
}

uint64_t outlined bridged method (pb) of @objc AceObject.aceId.getter(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (!v2) {
    return 0;
  }
  char v3 = v2;
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

uint64_t sub_25D720AD8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = AceObject.internalAceId.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_25D720B04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AceObject.internalAceId : AceObject(a1, a2, a3, a4, (uint64_t (*)(uint64_t))AceObject.internalAceId.setter);
}

uint64_t sub_25D720B30@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = AceObject.internalRefId.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_25D720B5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AceObject.internalAceId : AceObject(a1, a2, a3, a4, (uint64_t (*)(uint64_t))AceObject.internalRefId.setter);
}

uint64_t OUTLINED_FUNCTION_1_16()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_3_13()
{
  return outlined consume of Data?(v0, v1);
}

double *PingInfo.init(pingAcknowledgedCount:avgPingTime:)(uint64_t a1, double a2)
{
  v2[3] = 0.0;
  *((void *)v2 + 4) = Dictionary.init(dictionaryLiteral:)();
  *((void *)v2 + 2) = a1;
  v2[3] = a2;
  return v2;
}

Swift::Void __swiftcall PingInfo.markPingSent(withIndex:)(Swift::UInt32 withIndex)
{
  id v2 = objc_msgSend(self, sel_processInfo);
  objc_msgSend(v2, sel_systemUptime);
  double v4 = v3;

  swift_beginAccess();
  specialized Dictionary._Variant.setValue(_:forKey:)(withIndex, v4);
  swift_endAccess();
}

Swift::Void __swiftcall PingInfo.markPongReceived(withIndex:)(Swift::UInt32 withIndex)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)&withIndex;
  swift_beginAccess();
  uint64_t v4 = *(void *)(v1 + 32);
  if (*(void *)(v4 + 16))
  {
    unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(v3);
    if (v6)
    {
      double v7 = *(double *)(*(void *)(v4 + 56) + 8 * v5);
      swift_beginAccess();
      specialized Dictionary._Variant.removeValue(forKey:)(v3);
      swift_endAccess();
      id v8 = objc_msgSend(self, sel_processInfo);
      objc_msgSend(v8, sel_systemUptime);
      double v10 = v9;

      uint64_t v11 = *(void *)(v2 + 16);
      BOOL v12 = __OFADD__(v11, 1);
      uint64_t v13 = v11 + 1;
      if (v12)
      {
        __break(1u);
      }
      else
      {
        *(void *)(v2 + 16) = v13;
        double v14 = (v10 - v7 - *(double *)(v2 + 24)) / (double)v13;
        if (v14 > 0.0) {
          *(double *)(v2 + 24) = v14;
        }
      }
    }
  }
}

Swift::Int __swiftcall PingInfo.numberOfUnacknowledgedPings()()
{
  OUTLINED_FUNCTION_0_19();
  return *(void *)(*(void *)(v0 + 32) + 16);
}

Swift::Int __swiftcall PingInfo.totalPingCount()()
{
  OUTLINED_FUNCTION_0_19();
  uint64_t v1 = *(void *)(*(void *)(v0 + 32) + 16);
  uint64_t v2 = *(void *)(v0 + 16);
  Swift::Int result = v1 + v2;
  if (__OFADD__(v1, v2)) {
    __break(1u);
  }
  return result;
}

uint64_t PingInfo.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0228](v0, 40, 7);
}

uint64_t type metadata accessor for PingInfo()
{
  return self;
}

uint64_t OUTLINED_FUNCTION_0_19()
{
  return swift_beginAccess();
}

uint64_t type metadata accessor for NoneDataCompressor()
{
  return self;
}

Swift::Void __swiftcall NetworkManager.acquireWiFiAssertion(wifiAssertionTypeRawValue:)(Swift::Int wifiAssertionTypeRawValue)
{
  uint64_t v2 = v1;
  type metadata accessor for DispatchWorkItemFlags();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_2();
  char v6 = *(void **)(v2 + OBJC_IVAR___SNNetworkManagerInternal_queue);
  uint64_t v7 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v7;
  *(void *)(v8 + 24) = wifiAssertionTypeRawValue;
  aBlock[4] = partial apply for closure #1 in NetworkManager.acquireWiFiAssertion(wifiAssertionTypeRawValue:);
  aBlock[5] = v8;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_8;
  double v9 = _Block_copy(aBlock);
  id v10 = v6;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  OUTLINED_FUNCTION_1_17();
  OUTLINED_FUNCTION_4_9();
  _Block_release(v9);

  uint64_t v11 = OUTLINED_FUNCTION_6();
  v12(v11);
  uint64_t v13 = OUTLINED_FUNCTION_3();
  v14(v13);
  swift_release();
  swift_release();
}

uint64_t sub_25D7210AC()
{
  swift_unknownObjectWeakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

void closure #1 in NetworkManager.acquireWiFiAssertion(wifiAssertionTypeRawValue:)(uint64_t a1, Swift::Int a2)
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x2611B37F0](v3);
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    id v6 = *(id *)(v4 + OBJC_IVAR___SNNetworkManagerInternal_networkWiFiManager);
    NetworkWiFiManager.acquireWiFiAssertion(wifiAssertionTypeRawValue:)(a2);
  }
}

uint64_t sub_25D721164()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

void partial apply for closure #1 in NetworkManager.acquireWiFiAssertion(wifiAssertionTypeRawValue:)()
{
  closure #1 in NetworkManager.acquireWiFiAssertion(wifiAssertionTypeRawValue:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t block_copy_helper_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_8()
{
  return swift_release();
}

Swift::Void __swiftcall NetworkManager.acquireWiFiAssertion(wifiAssertionType:)(SiriNetwork::WiFiAssertionType wifiAssertionType)
{
  uint64_t v2 = (char *)wifiAssertionType;
  type metadata accessor for DispatchWorkItemFlags();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_2();
  char v5 = *v2;
  id v6 = *(void **)(v1 + OBJC_IVAR___SNNetworkManagerInternal_queue);
  uint64_t v7 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v7;
  *(unsigned char *)(v8 + 24) = v5;
  aBlock[4] = partial apply for closure #1 in NetworkManager.acquireWiFiAssertion(wifiAssertionType:);
  aBlock[5] = v8;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_10_0;
  double v9 = _Block_copy(aBlock);
  id v10 = v6;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  OUTLINED_FUNCTION_1_17();
  OUTLINED_FUNCTION_4_9();
  _Block_release(v9);

  uint64_t v11 = OUTLINED_FUNCTION_6();
  v12(v11);
  uint64_t v13 = OUTLINED_FUNCTION_3();
  v14(v13);
  swift_release();
  swift_release();
}

void closure #1 in NetworkManager.acquireWiFiAssertion(wifiAssertionType:)(uint64_t a1, char a2)
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x2611B37F0](v3);
  if (v4)
  {
    char v5 = (void *)v4;
    id v6 = *(void **)(v4 + OBJC_IVAR___SNNetworkManagerInternal_networkWiFiManager);
    char v8 = a2;
    id v7 = v6;
    NetworkWiFiManager.acquireWiFiAssertion(wifiAssertionType:)((SiriNetwork::WiFiAssertionType)&v8);
  }
}

uint64_t sub_25D721484()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 25, 7);
}

void partial apply for closure #1 in NetworkManager.acquireWiFiAssertion(wifiAssertionType:)()
{
  closure #1 in NetworkManager.acquireWiFiAssertion(wifiAssertionType:)(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

Swift::Void __swiftcall NetworkManager.releaseWiFiAssertion()()
{
  type metadata accessor for DispatchWorkItemFlags();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_2();
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR___SNNetworkManagerInternal_queue);
  uint64_t v4 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = partial apply for closure #1 in NetworkManager.releaseWiFiAssertion();
  aBlock[5] = v4;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_14;
  char v5 = _Block_copy(aBlock);
  id v6 = v3;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  OUTLINED_FUNCTION_1_17();
  OUTLINED_FUNCTION_4_9();
  _Block_release(v5);

  uint64_t v7 = OUTLINED_FUNCTION_6();
  v8(v7);
  uint64_t v9 = OUTLINED_FUNCTION_3();
  v10(v9);
  swift_release();
  swift_release();
}

void closure #1 in NetworkManager.releaseWiFiAssertion()(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x2611B37F0](v1);
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    id v4 = *(id *)(v2 + OBJC_IVAR___SNNetworkManagerInternal_networkWiFiManager);
    NetworkWiFiManager.releaseWiFiAssertion()();
  }
}

void partial apply for closure #1 in NetworkManager.releaseWiFiAssertion()()
{
  closure #1 in NetworkManager.releaseWiFiAssertion()(v0);
}

uint64_t OUTLINED_FUNCTION_1_17()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

void OUTLINED_FUNCTION_4_9()
{
  JUMPOUT(0x2611B24E0);
}

SiriNetwork::ConnectionQualityReport __swiftcall NetworkManager.currentConnectionQualityReport()()
{
  uint64_t v1 = OBJC_IVAR___SNNetworkManagerInternal_lockConnectionQuality;
  objc_msgSend(*(id *)(v0 + OBJC_IVAR___SNNetworkManagerInternal_lockConnectionQuality), sel_lock);
  int v2 = *(unsigned __int8 *)(v0 + OBJC_IVAR___SNNetworkManagerInternal_connectionQualityReport);
  int v3 = *(unsigned __int8 *)(v0 + OBJC_IVAR___SNNetworkManagerInternal_connectionQualityReport + 1);
  int v4 = *(unsigned __int8 *)(v0 + OBJC_IVAR___SNNetworkManagerInternal_connectionQualityReport + 2);
  int v5 = *(unsigned __int8 *)(v0 + OBJC_IVAR___SNNetworkManagerInternal_connectionQualityReport + 3);
  objc_msgSend(*(id *)(v0 + v1), sel_unlock);
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.siriNetwork);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315138;
    uint64_t v14 = v10;
    uint64_t v11 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_25D6CC000, v7, v8, "NetworkManager - PerformanceFeed: Current connection quality report: %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2611B3750](v10, -1, -1);
    MEMORY[0x2611B3750](v9, -1, -1);
  }

  return (SiriNetwork::ConnectionQualityReport)(v2 | (v3 << 8) | (v4 << 16) | (v5 << 24));
}

Swift::Void __swiftcall NetworkManager.updateNetworkPerformanceFeed()()
{
  uint64_t v1 = v0;
  int v2 = self;
  id v3 = objc_msgSend(v2, sel_processInfo);
  objc_msgSend(v3, sel_systemUptime);
  double v5 = v4;

  uint64_t v6 = OBJC_IVAR___SNNetworkManagerInternal_lastTimeSymptomsFetch;
  if (v5 - *(double *)(v1 + OBJC_IVAR___SNNetworkManagerInternal_lastTimeSymptomsFetch) > 90.0)
  {
    id v7 = objc_msgSend(v2, sel_processInfo);
    objc_msgSend(v7, sel_systemUptime);
    uint64_t v9 = v8;

    *(void *)(v1 + v6) = v9;
    uint64_t v10 = OBJC_IVAR___SNNetworkManagerInternal_lockConnectionQuality;
    objc_msgSend(*(id *)(v1 + OBJC_IVAR___SNNetworkManagerInternal_lockConnectionQuality), sel_lock);
    *(_DWORD *)(v1 + OBJC_IVAR___SNNetworkManagerInternal_connectionQualityReport) = 50529027;
    objc_msgSend(*(id *)(v1 + v10), sel_unlock);
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v13 = v12;
    id v14 = objc_allocWithZone(MEMORY[0x263F7C1B8]);
    id v37 = @nonobjc AnalyticsWorkspace.init(workspaceWithService:)(v11, v13);
    id v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F7C1E8]), sel_initWithWorkspace_, v37);
    if (v15)
    {
      unint64_t v16 = v15;
      objc_msgSend(v15, sel_setQueue_, *(void *)(v1 + OBJC_IVAR___SNNetworkManagerInternal_queue));
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_25D790C50;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(inited + 40) = v18;
      *(void *)(inited + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(inited + 56) = v19;
      uint64_t v20 = Dictionary.init(dictionaryLiteral:)();
      uint64_t v21 = swift_initStackObject();
      *(_OWORD *)(v21 + 16) = xmmword_25D790C50;
      *(void *)(v21 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(v21 + 40) = v22;
      *(void *)(v21 + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(v21 + 56) = v23;
      uint64_t v24 = Dictionary.init(dictionaryLiteral:)();
      specialized _dictionaryUpCast<A, B, C, D>(_:)(v20);
      uint64_t v26 = v25;
      uint64_t v27 = swift_allocObject();
      swift_unknownObjectWeakInit();
      char v28 = (void *)swift_allocObject();
      v28[2] = v27;
      v28[3] = v16;
      v28[4] = v24;
      id v42 = partial apply for closure #1 in NetworkManager.updateNetworkPerformanceFeed();
      uint64_t v43 = v28;
      uint64_t aBlock = MEMORY[0x263EF8330];
      uint64_t v39 = 1107296256;
      uint64_t v40 = thunk for @escaping @callee_guaranteed (@guaranteed [AnyHashable : Any]?, @guaranteed Error?) -> ();
      uint64_t v41 = &block_descriptor_9;
      char v29 = _Block_copy(&aBlock);
      id v30 = v16;
      swift_bridgeObjectRetain();
      swift_release();
      outlined bridged method (mnbnnn) of @objc NetworkPerformanceFeed.fullScorecard(for:options:reply:)(1, v26, (uint64_t)v29, v30);
      _Block_release(v29);
      specialized _dictionaryUpCast<A, B, C, D>(_:)(v20);
      uint64_t v32 = v31;
      swift_bridgeObjectRelease();
      uint64_t v33 = swift_allocObject();
      swift_unknownObjectWeakInit();
      char v34 = (void *)swift_allocObject();
      v34[2] = v33;
      v34[3] = v30;
      v34[4] = v24;
      id v42 = partial apply for closure #2 in NetworkManager.updateNetworkPerformanceFeed();
      uint64_t v43 = v34;
      uint64_t aBlock = MEMORY[0x263EF8330];
      uint64_t v39 = 1107296256;
      uint64_t v40 = thunk for @escaping @callee_guaranteed (@guaranteed [AnyHashable : Any]?, @guaranteed Error?) -> ();
      uint64_t v41 = &block_descriptor_10_1;
      char v35 = _Block_copy(&aBlock);
      id v36 = v30;
      swift_release();
      outlined bridged method (mnbnnn) of @objc NetworkPerformanceFeed.fullScorecard(for:options:reply:)(2, v32, (uint64_t)v35, v36);

      _Block_release(v35);
    }
    else
    {
      __break(1u);
    }
  }
}

void specialized _dictionaryUpCast<A, B, C, D>(_:)(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
    uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = MEMORY[0x263F8EE80];
  }
  OUTLINED_FUNCTION_3_14();
  uint64_t v5 = -(-1 << v4);
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & v3;
  OUTLINED_FUNCTION_2_14();
  uint64_t v8 = v2 + 64;
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v9 = 0;
  if (!v7) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v10 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  unint64_t v11 = v10 | (v9 << 6);
  while (1)
  {
    uint64_t v19 = (void *)(*(void *)(a1 + 48) + 16 * v11);
    uint64_t v20 = v19[1];
    *(void *)&v39[0] = *v19;
    *((void *)&v39[0] + 1) = v20;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    swift_dynamicCast();
    long long v35 = v31;
    long long v36 = v32;
    uint64_t v37 = v33;
    outlined init with take of Any(&v34, v38);
    long long v31 = v35;
    long long v32 = v36;
    uint64_t v33 = v37;
    outlined init with take of Any(v38, v39);
    outlined init with take of Any(v39, &v35);
    unint64_t v21 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40)) & ~(-1 << *(unsigned char *)(v2 + 32));
    if (((-1 << v21) & ~*(void *)(v8 + 8 * (v21 >> 6))) == 0)
    {
      OUTLINED_FUNCTION_7_3();
      while (++v23 != v24 || (v22 & 1) == 0)
      {
        BOOL v25 = v23 == v24;
        if (v23 == v24) {
          uint64_t v23 = 0;
        }
        v22 |= v25;
        if (*(void *)(v8 + 8 * v23) != -1)
        {
          OUTLINED_FUNCTION_6_5();
          goto LABEL_40;
        }
      }
      __break(1u);
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
    OUTLINED_FUNCTION_9_5();
LABEL_40:
    OUTLINED_FUNCTION_5_7();
    *(void *)(v8 + v26) |= v27;
    uint64_t v29 = *(void *)(v2 + 48) + 40 * v28;
    *(_OWORD *)uint64_t v29 = v31;
    *(_OWORD *)(v29 + 16) = v32;
    *(void *)(v29 + 32) = v33;
    outlined init with take of Any(&v35, (_OWORD *)(*(void *)(v2 + 56) + 32 * v28));
    ++*(void *)(v2 + 16);
    if (v7) {
      goto LABEL_8;
    }
LABEL_9:
    if (__OFADD__(v9, 1)) {
      goto LABEL_44;
    }
    OUTLINED_FUNCTION_8_3();
    if (v13 == v14) {
      goto LABEL_42;
    }
    unint64_t v15 = *(void *)(v30 + 8 * v12);
    uint64_t v16 = v12;
    if (!v15)
    {
      OUTLINED_FUNCTION_0_20();
      if (v13 == v14) {
        goto LABEL_42;
      }
      OUTLINED_FUNCTION_1_18();
      if (!v15)
      {
        OUTLINED_FUNCTION_0_20();
        if (v13 == v14) {
          goto LABEL_42;
        }
        OUTLINED_FUNCTION_1_18();
        if (!v15)
        {
          OUTLINED_FUNCTION_0_20();
          if (v13 == v14) {
            goto LABEL_42;
          }
          OUTLINED_FUNCTION_1_18();
          if (!v15) {
            break;
          }
        }
      }
    }
LABEL_30:
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v11 = __clz(__rbit64(v15)) + (v16 << 6);
    uint64_t v9 = v16;
  }
  OUTLINED_FUNCTION_8_3();
  if (v13 == v14)
  {
LABEL_42:
    swift_release();
    OUTLINED_FUNCTION_4_10();
    return;
  }
  unint64_t v15 = *(void *)(v30 + 8 * v17);
  if (v15)
  {
    uint64_t v16 = v17;
    goto LABEL_30;
  }
  while (!__OFADD__(v17, 1))
  {
    OUTLINED_FUNCTION_0_20();
    if (v13 == v14) {
      goto LABEL_42;
    }
    unint64_t v15 = *(void *)(v30 + 8 * v16);
    uint64_t v17 = v18 + 1;
    if (v15) {
      goto LABEL_30;
    }
  }
LABEL_45:
  __break(1u);
}

{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  long long v31;
  long long v32;
  uint64_t v33;
  long long v34;
  long long v35;
  long long v36;
  uint64_t v37;
  _OWORD v38[2];
  _OWORD v39[2];

  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
    uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = MEMORY[0x263F8EE80];
  }
  OUTLINED_FUNCTION_3_14();
  uint64_t v5 = -(-1 << v4);
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & v3;
  OUTLINED_FUNCTION_2_14();
  uint64_t v8 = v2 + 64;
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v9 = 0;
  if (!v7) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v10 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  unint64_t v11 = v10 | (v9 << 6);
  while (1)
  {
    uint64_t v19 = (void *)(*(void *)(a1 + 48) + 16 * v11);
    uint64_t v20 = v19[1];
    *(void *)&v39[0] = *v19;
    *((void *)&v39[0] + 1) = v20;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    swift_dynamicCast();
    long long v35 = v31;
    long long v36 = v32;
    uint64_t v37 = v33;
    outlined init with take of Any(&v34, v38);
    long long v31 = v35;
    long long v32 = v36;
    uint64_t v33 = v37;
    outlined init with take of Any(v38, v39);
    outlined init with take of Any(v39, &v35);
    unint64_t v21 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40)) & ~(-1 << *(unsigned char *)(v2 + 32));
    if (((-1 << v21) & ~*(void *)(v8 + 8 * (v21 >> 6))) == 0)
    {
      OUTLINED_FUNCTION_7_3();
      while (++v23 != v24 || (v22 & 1) == 0)
      {
        BOOL v25 = v23 == v24;
        if (v23 == v24) {
          uint64_t v23 = 0;
        }
        v22 |= v25;
        if (*(void *)(v8 + 8 * v23) != -1)
        {
          OUTLINED_FUNCTION_6_5();
          goto LABEL_40;
        }
      }
      __break(1u);
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
    OUTLINED_FUNCTION_9_5();
LABEL_40:
    OUTLINED_FUNCTION_5_7();
    *(void *)(v8 + v26) |= v27;
    uint64_t v29 = *(void *)(v2 + 48) + 40 * v28;
    *(_OWORD *)uint64_t v29 = v31;
    *(_OWORD *)(v29 + 16) = v32;
    *(void *)(v29 + 32) = v33;
    outlined init with take of Any(&v35, (_OWORD *)(*(void *)(v2 + 56) + 32 * v28));
    ++*(void *)(v2 + 16);
    if (v7) {
      goto LABEL_8;
    }
LABEL_9:
    if (__OFADD__(v9, 1)) {
      goto LABEL_44;
    }
    OUTLINED_FUNCTION_8_3();
    if (v13 == v14) {
      goto LABEL_42;
    }
    unint64_t v15 = *(void *)(v30 + 8 * v12);
    uint64_t v16 = v12;
    if (!v15)
    {
      OUTLINED_FUNCTION_0_20();
      if (v13 == v14) {
        goto LABEL_42;
      }
      OUTLINED_FUNCTION_1_18();
      if (!v15)
      {
        OUTLINED_FUNCTION_0_20();
        if (v13 == v14) {
          goto LABEL_42;
        }
        OUTLINED_FUNCTION_1_18();
        if (!v15)
        {
          OUTLINED_FUNCTION_0_20();
          if (v13 == v14) {
            goto LABEL_42;
          }
          OUTLINED_FUNCTION_1_18();
          if (!v15) {
            break;
          }
        }
      }
    }
LABEL_30:
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v11 = __clz(__rbit64(v15)) + (v16 << 6);
    uint64_t v9 = v16;
  }
  OUTLINED_FUNCTION_8_3();
  if (v13 == v14)
  {
LABEL_42:
    swift_release();
    OUTLINED_FUNCTION_4_10();
    return;
  }
  unint64_t v15 = *(void *)(v30 + 8 * v17);
  if (v15)
  {
    uint64_t v16 = v17;
    goto LABEL_30;
  }
  while (!__OFADD__(v17, 1))
  {
    OUTLINED_FUNCTION_0_20();
    if (v13 == v14) {
      goto LABEL_42;
    }
    unint64_t v15 = *(void *)(v30 + 8 * v16);
    uint64_t v17 = v18 + 1;
    if (v15) {
      goto LABEL_30;
    }
  }
LABEL_45:
  __break(1u);
}

void closure #1 in NetworkManager.updateNetworkPerformanceFeed()(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v9 = a3 + 16;
  swift_beginAccess();
  uint64_t v10 = MEMORY[0x2611B37F0](v9);
  if (v10)
  {
    unint64_t v11 = (unsigned char *)v10;
    uint64_t v37 = v9;
    if (one-time initialization token for siriNetwork != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.siriNetwork);
    id v13 = a2;
    id v14 = a2;
    unint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v35 = a5;
      long long v36 = a4;
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      *(void *)&long long aBlock = v18;
      *(_DWORD *)uint64_t v17 = 136315138;
      if (a2)
      {
        uint64_t v42 = (uint64_t)a2;
        id v19 = a2;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
        uint64_t v20 = String.init<A>(describing:)();
        unint64_t v22 = v21;
      }
      else
      {
        unint64_t v22 = 0xE300000000000000;
        uint64_t v20 = 7104878;
      }
      uint64_t v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v22, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_25D6CC000, v15, v16, "NetworkManager - PerformanceFeed: Instant data for WiFi. Error: %s", v17, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2611B3750](v18, -1, -1);
      MEMORY[0x2611B3750](v17, -1, -1);

      a5 = v35;
      a4 = v36;
    }
    else
    {
    }
    unsigned __int8 v43 = 0;
    if (a1)
    {
      *((void *)&v39 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]);
      *(void *)&long long aBlock = a1;
    }
    else
    {
      long long aBlock = 0u;
      long long v39 = 0u;
    }
    swift_bridgeObjectRetain();
    char v23 = NetworkManager.acceptableSuccessRate(fullScorecard:hasMetrics:)((uint64_t)&aBlock, &v43);
    outlined destroy of Any?((uint64_t)&aBlock);
    int v24 = v43;
    uint64_t v25 = OBJC_IVAR___SNNetworkManagerInternal_lockConnectionQuality;
    objc_msgSend(*(id *)&v11[OBJC_IVAR___SNNetworkManagerInternal_lockConnectionQuality], sel_lock);
    if (v24 == 1)
    {
      v11[OBJC_IVAR___SNNetworkManagerInternal_connectionQualityReport] = (v23 & 1) == 0;
      objc_msgSend(*(id *)&v11[v25], sel_unlock);
      uint64_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v28 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v28 = 67109120;
        LODWORD(aBlock) = v23 & 1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_25D6CC000, v26, v27, "NetworkManager - PerformanceFeed: Symptoms WiFi Instant: %{BOOL}d", v28, 8u);
        MEMORY[0x2611B3750](v28, -1, -1);
      }

      if ((v23 & 1) == 0)
      {
        specialized _dictionaryUpCast<A, B, C, D>(_:)(a5);
        uint64_t v30 = v29;
        uint64_t v31 = swift_allocObject();
        swift_beginAccess();
        long long v32 = (void *)MEMORY[0x2611B37F0](v37);
        swift_unknownObjectWeakInit();

        uint64_t v40 = partial apply for closure #1 in closure #1 in NetworkManager.updateNetworkPerformanceFeed();
        uint64_t v41 = v31;
        *(void *)&long long aBlock = MEMORY[0x263EF8330];
        *((void *)&aBlock + 1) = 1107296256;
        *(void *)&long long v39 = thunk for @escaping @callee_guaranteed (@guaranteed [AnyHashable : Any]?, @guaranteed Error?) -> ();
        *((void *)&v39 + 1) = &block_descriptor_18_0;
        uint64_t v33 = _Block_copy(&aBlock);
        swift_release();
        outlined bridged method (mnbnnn) of @objc NetworkPerformanceFeed.fullScorecard(for:options:reply:)(1, v30, (uint64_t)v33, a4);

        _Block_release(v33);
        return;
      }
    }
    else
    {
      v11[OBJC_IVAR___SNNetworkManagerInternal_connectionQualityReport] = 2;
      id v34 = *(id *)&v11[v25];
      objc_msgSend(v34, sel_unlock);
    }
  }
}

uint64_t NetworkManager.acceptableSuccessRate(fullScorecard:hasMetrics:)(uint64_t a1, unsigned char *a2)
{
  BOOL v29 = 0;
  outlined init with copy of Any?(a1, (uint64_t)v27);
  if (!v28) {
    goto LABEL_34;
  }
  id v6 = (id)type metadata accessor for NSDictionary();
  uint64_t v7 = MEMORY[0x263F8EE58];
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_38:
    swift_beginAccess();
    return v29;
  }
  id v8 = v25[0];
  if ((uint64_t)objc_msgSend(v25[0], sel_count) < 1) {
    goto LABEL_37;
  }
  uint64_t v9 = &selRef_logNetworkConnectionStateReadySnapshotCaptured_;
  id v10 = objc_msgSend(v25[0], sel_allValues);
  id v11 = (id)(v7 + 8);
  uint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(void *)(v12 + 16))
  {
    __break(1u);
    goto LABEL_40;
  }
  outlined init with copy of Any(v12 + 32, (uint64_t)v27);
  swift_bridgeObjectRelease();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_37:

    goto LABEL_38;
  }
  id v11 = v25[0];
  if ((uint64_t)objc_msgSend(v25[0], sel_count) < 1)
  {

    goto LABEL_38;
  }
  id v13 = objc_msgSend(v25[0], sel_allValues);
  uint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(void *)(v14 + 16))
  {
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  outlined init with copy of Any(v14 + 32, (uint64_t)v27);
  swift_bridgeObjectRelease();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_36:

    goto LABEL_37;
  }
  id v6 = v25[0];
  v25[0] = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
  v25[1] = v15;
  swift_bridgeObjectRetain();
  id v16 = objc_msgSend(v6, sel___swift_objectForKeyedSubscript_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
  swift_unknownObjectRelease();
  if (v16)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    *(_OWORD *)uint64_t v25 = 0u;
    long long v26 = 0u;
  }
  outlined init with take of Any?((uint64_t)v25, (uint64_t)v27);
  if (!v28)
  {
LABEL_33:
    swift_bridgeObjectRelease();

LABEL_34:
    outlined destroy of Any?((uint64_t)v27);
    goto LABEL_38;
  }
  if ((OUTLINED_FUNCTION_11_3() & 1) == 0)
  {
LABEL_35:
    swift_bridgeObjectRelease();

    goto LABEL_36;
  }
  double v4 = v24;
  swift_bridgeObjectRelease();
  if ((~*(void *)&v24 & 0x7FF0000000000000) == 0) {
    goto LABEL_41;
  }
  double v2 = -9.22337204e18;
  if (v24 <= -9.22337204e18)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  if (v24 < 9.22337204e18)
  {
    uint64_t v9 = (char **)(uint64_t)v24;
    if ((uint64_t)v24 < 7)
    {

LABEL_32:
      goto LABEL_38;
    }
    v25[0] = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
    v25[1] = v17;
    swift_bridgeObjectRetain();
    id v18 = objc_msgSend(v6, sel___swift_objectForKeyedSubscript_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
    swift_unknownObjectRelease();
    if (v18)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      *(_OWORD *)uint64_t v25 = 0u;
      long long v26 = 0u;
    }
    outlined init with take of Any?((uint64_t)v25, (uint64_t)v27);
    if (v28)
    {
      if (OUTLINED_FUNCTION_11_3())
      {
        double v3 = v24;
        swift_bridgeObjectRelease();
        *a2 = 1;
        double v4 = v24 / v24;
        BOOL v29 = v24 / v24 > 0.5;
        if (one-time initialization token for siriNetwork == -1) {
          goto LABEL_26;
        }
        goto LABEL_44;
      }
      goto LABEL_35;
    }
    goto LABEL_33;
  }
LABEL_43:
  __break(1u);
LABEL_44:
  swift_once();
LABEL_26:
  uint64_t v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Logger.siriNetwork);
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v20, v21))
  {
LABEL_31:

    goto LABEL_32;
  }
  uint64_t v22 = swift_slowAlloc();
  *(_DWORD *)uint64_t v22 = 134219008;
  *(double *)os_log_type_t v27 = v4;
  OUTLINED_FUNCTION_10_4();
  *(_WORD *)(v22 + 12) = 1024;
  LODWORD(v27[0]) = v4 > 0.5;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *(_WORD *)(v22 + 18) = 2048;
  v27[0] = 0x3FE0000000000000;
  uint64_t result = OUTLINED_FUNCTION_10_4();
  *(_WORD *)(v22 + 28) = 2048;
  if ((~*(void *)&v3 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_46;
  }
  if (v3 <= v2)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  if (v3 < 9.22337204e18)
  {
    v27[0] = (uint64_t)v3;
    OUTLINED_FUNCTION_10_4();
    *(_WORD *)(v22 + 38) = 2048;
    v27[0] = v9;
    OUTLINED_FUNCTION_10_4();
    _os_log_impl(&dword_25D6CC000, v20, v21, "NetworkManager - PerformanceFeed: Success rate %f is acceptable: %{BOOL}d (success rate higher than %f). successes = %ld attempts = %ld", (uint8_t *)v22, 0x30u);
    MEMORY[0x2611B3750](v22, -1, -1);
    goto LABEL_31;
  }
LABEL_47:
  __break(1u);
  return result;
}

void closure #1 in closure #1 in NetworkManager.updateNetworkPerformanceFeed()(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a3 + 16;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x2611B37F0](v5);
  if (v6)
  {
    uint64_t v7 = (unsigned char *)v6;
    if (one-time initialization token for siriNetwork != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.siriNetwork);
    id v9 = a2;
    id v10 = a2;
    id v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v11, v12))
    {
      id v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      *(void *)&long long v26 = v14;
      *(_DWORD *)id v13 = 136315138;
      if (a2)
      {
        uint64_t v25 = (uint64_t)a2;
        id v15 = a2;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
        uint64_t v16 = String.init<A>(describing:)();
        unint64_t v18 = v17;
      }
      else
      {
        unint64_t v18 = 0xE300000000000000;
        uint64_t v16 = 7104878;
      }
      uint64_t v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v18, (uint64_t *)&v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_25D6CC000, v11, v12, "NetworkManager - PerformanceFeed: Historical data for WiFi. Error: %s", v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2611B3750](v14, -1, -1);
      MEMORY[0x2611B3750](v13, -1, -1);
    }
    else
    {
    }
    LOBYTE(v25) = 0;
    if (a1)
    {
      *((void *)&v27 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]);
      *(void *)&long long v26 = a1;
    }
    else
    {
      long long v26 = 0u;
      long long v27 = 0u;
    }
    swift_bridgeObjectRetain();
    char v19 = NetworkManager.acceptableSuccessRate(fullScorecard:hasMetrics:)((uint64_t)&v26, &v25);
    outlined destroy of Any?((uint64_t)&v26);
    int v20 = v25;
    uint64_t v21 = OBJC_IVAR___SNNetworkManagerInternal_lockConnectionQuality;
    objc_msgSend(*(id *)&v7[OBJC_IVAR___SNNetworkManagerInternal_lockConnectionQuality], sel_lock);
    if (v20 == 1)
    {
      v7[OBJC_IVAR___SNNetworkManagerInternal_connectionQualityReport + 2] = (v19 & 1) == 0;
      objc_msgSend(*(id *)&v7[v21], sel_unlock);
      uint64_t v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v22, v23))
      {
        double v24 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)double v24 = 67109120;
        LODWORD(v26) = v19 & 1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_25D6CC000, v22, v23, "NetworkManager - PerformanceFeed: Symptoms WiFi Historical: %{BOOL}d", v24, 8u);
        MEMORY[0x2611B3750](v24, -1, -1);
      }
    }
    else
    {
      v7[OBJC_IVAR___SNNetworkManagerInternal_connectionQualityReport + 2] = 2;
      uint64_t v22 = *(id *)&v7[v21];
      [v22 unlock];
    }
  }
}

void closure #2 in NetworkManager.updateNetworkPerformanceFeed()(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v9 = a3 + 16;
  swift_beginAccess();
  uint64_t v10 = MEMORY[0x2611B37F0](v9);
  if (v10)
  {
    id v11 = (unsigned char *)v10;
    uint64_t v37 = v9;
    if (one-time initialization token for siriNetwork != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.siriNetwork);
    id v13 = a2;
    id v14 = a2;
    id v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v35 = a5;
      long long v36 = a4;
      unint64_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      *(void *)&long long aBlock = v18;
      *(_DWORD *)unint64_t v17 = 136315138;
      if (a2)
      {
        uint64_t v42 = (uint64_t)a2;
        id v19 = a2;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
        uint64_t v20 = String.init<A>(describing:)();
        unint64_t v22 = v21;
      }
      else
      {
        unint64_t v22 = 0xE300000000000000;
        uint64_t v20 = 7104878;
      }
      uint64_t v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v22, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_25D6CC000, v15, v16, "NetworkManager - PerformanceFeed: Instant data for Cell. Error: %s", v17, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2611B3750](v18, -1, -1);
      MEMORY[0x2611B3750](v17, -1, -1);

      a5 = v35;
      a4 = v36;
    }
    else
    {
    }
    unsigned __int8 v43 = 0;
    if (a1)
    {
      *((void *)&v39 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]);
      *(void *)&long long aBlock = a1;
    }
    else
    {
      long long aBlock = 0u;
      long long v39 = 0u;
    }
    swift_bridgeObjectRetain();
    char v23 = NetworkManager.acceptableSuccessRate(fullScorecard:hasMetrics:)((uint64_t)&aBlock, &v43);
    outlined destroy of Any?((uint64_t)&aBlock);
    int v24 = v43;
    uint64_t v25 = OBJC_IVAR___SNNetworkManagerInternal_lockConnectionQuality;
    objc_msgSend(*(id *)&v11[OBJC_IVAR___SNNetworkManagerInternal_lockConnectionQuality], sel_lock);
    if (v24 == 1)
    {
      v11[OBJC_IVAR___SNNetworkManagerInternal_connectionQualityReport + 1] = (v23 & 1) == 0;
      objc_msgSend(*(id *)&v11[v25], sel_unlock);
      long long v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v28 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v28 = 67109120;
        LODWORD(aBlock) = v23 & 1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_25D6CC000, v26, v27, "NetworkManager - PerformanceFeed: Symptoms Cellular Instant: %{BOOL}d", v28, 8u);
        MEMORY[0x2611B3750](v28, -1, -1);
      }

      if ((v23 & 1) == 0)
      {
        specialized _dictionaryUpCast<A, B, C, D>(_:)(a5);
        uint64_t v30 = v29;
        uint64_t v31 = swift_allocObject();
        swift_beginAccess();
        long long v32 = (void *)MEMORY[0x2611B37F0](v37);
        swift_unknownObjectWeakInit();

        uint64_t v40 = partial apply for closure #1 in closure #2 in NetworkManager.updateNetworkPerformanceFeed();
        uint64_t v41 = v31;
        *(void *)&long long aBlock = MEMORY[0x263EF8330];
        *((void *)&aBlock + 1) = 1107296256;
        *(void *)&long long v39 = thunk for @escaping @callee_guaranteed (@guaranteed [AnyHashable : Any]?, @guaranteed Error?) -> ();
        *((void *)&v39 + 1) = &block_descriptor_14_0;
        uint64_t v33 = _Block_copy(&aBlock);
        swift_release();
        outlined bridged method (mnbnnn) of @objc NetworkPerformanceFeed.fullScorecard(for:options:reply:)(2, v30, (uint64_t)v33, a4);

        _Block_release(v33);
        return;
      }
    }
    else
    {
      v11[OBJC_IVAR___SNNetworkManagerInternal_connectionQualityReport + 1] = 2;
      id v34 = *(id *)&v11[v25];
      objc_msgSend(v34, sel_unlock);
    }
  }
}

void closure #1 in closure #2 in NetworkManager.updateNetworkPerformanceFeed()(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a3 + 16;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x2611B37F0](v5);
  if (v6)
  {
    uint64_t v7 = (unsigned char *)v6;
    if (one-time initialization token for siriNetwork != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.siriNetwork);
    id v9 = a2;
    id v10 = a2;
    id v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v11, v12))
    {
      id v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      *(void *)&long long v26 = v14;
      *(_DWORD *)id v13 = 136315138;
      if (a2)
      {
        uint64_t v25 = (uint64_t)a2;
        id v15 = a2;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
        uint64_t v16 = String.init<A>(describing:)();
        unint64_t v18 = v17;
      }
      else
      {
        unint64_t v18 = 0xE300000000000000;
        uint64_t v16 = 7104878;
      }
      uint64_t v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v18, (uint64_t *)&v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_25D6CC000, v11, v12, "NetworkManager - PerformanceFeed: Historical data for Cell. Error: %s", v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2611B3750](v14, -1, -1);
      MEMORY[0x2611B3750](v13, -1, -1);
    }
    else
    {
    }
    LOBYTE(v25) = 0;
    if (a1)
    {
      *((void *)&v27 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]);
      *(void *)&long long v26 = a1;
    }
    else
    {
      long long v26 = 0u;
      long long v27 = 0u;
    }
    swift_bridgeObjectRetain();
    char v19 = NetworkManager.acceptableSuccessRate(fullScorecard:hasMetrics:)((uint64_t)&v26, &v25);
    outlined destroy of Any?((uint64_t)&v26);
    int v20 = v25;
    uint64_t v21 = OBJC_IVAR___SNNetworkManagerInternal_lockConnectionQuality;
    objc_msgSend(*(id *)&v7[OBJC_IVAR___SNNetworkManagerInternal_lockConnectionQuality], sel_lock);
    if (v20 == 1)
    {
      v7[OBJC_IVAR___SNNetworkManagerInternal_connectionQualityReport + 3] = (v19 & 1) == 0;
      objc_msgSend(*(id *)&v7[v21], sel_unlock);
      unint64_t v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v22, v23))
      {
        int v24 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)int v24 = 67109120;
        LODWORD(v26) = v19 & 1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_25D6CC000, v22, v23, "NetworkManager - PerformanceFeed: Symptoms Cellular Historical: %{BOOL}d", v24, 8u);
        MEMORY[0x2611B3750](v24, -1, -1);
      }
    }
    else
    {
      v7[OBJC_IVAR___SNNetworkManagerInternal_connectionQualityReport + 3] = 2;
      unint64_t v22 = *(id *)&v7[v21];
      [v22 unlock];
    }
  }
}

uint64_t NetworkManager.networkQuality(networkType:)(uint64_t a1)
{
  unsigned int v2 = NetworkManager.currentConnectionQualityReport()();
  unsigned int v3 = v2;
  if (!a1) {
    return qword_25D7921C8[(char)v3];
  }
  if (a1 == 1)
  {
    unsigned int v3 = v2 >> 8;
    return qword_25D7921C8[(char)v3];
  }
  if (a1 != 2) {
    return 0;
  }
  uint64_t result = 1;
  if ((_BYTE)v3)
  {
    unsigned int v5 = v3 >> 8;
    BOOL v6 = BYTE1(v3) == 1 || v3 == 1;
    uint64_t v7 = 2;
    if (!v6) {
      uint64_t v7 = 0;
    }
    if ((_BYTE)v5) {
      return v7;
    }
  }
  return result;
}

id @nonobjc AnalyticsWorkspace.init(workspaceWithService:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    unsigned int v3 = (void *)MEMORY[0x2611B2220]();
    swift_bridgeObjectRelease();
  }
  else
  {
    unsigned int v3 = 0;
  }
  id v4 = objc_msgSend(v2, sel_initWorkspaceWithService_, v3);

  return v4;
}

uint64_t sub_25D723BE4()
{
  swift_unknownObjectWeakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for closure #1 in NetworkManager.updateNetworkPerformanceFeed()(uint64_t a1, void *a2)
{
  closure #1 in NetworkManager.updateNetworkPerformanceFeed()(a1, a2, *(void *)(v2 + 16), *(void **)(v2 + 24), *(void *)(v2 + 32));
}

uint64_t block_copy_helper_9(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_9()
{
  return swift_release();
}

id outlined bridged method (mnbnnn) of @objc NetworkPerformanceFeed.fullScorecard(for:options:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v8 = objc_msgSend(a4, sel_fullScorecardFor_options_reply_, a1, isa, a3);

  return v8;
}

uint64_t objectdestroy_2Tm()
{
  swift_release();

  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

void partial apply for closure #2 in NetworkManager.updateNetworkPerformanceFeed()(uint64_t a1, void *a2)
{
  closure #2 in NetworkManager.updateNetworkPerformanceFeed()(a1, a2, *(void *)(v2 + 16), *(void **)(v2 + 24), *(void *)(v2 + 32));
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

void partial apply for closure #1 in closure #2 in NetworkManager.updateNetworkPerformanceFeed()(uint64_t a1, void *a2)
{
  closure #1 in closure #2 in NetworkManager.updateNetworkPerformanceFeed()(a1, a2, v2);
}

unint64_t type metadata accessor for NSDictionary()
{
  unint64_t result = lazy cache variable for type metadata for NSDictionary;
  if (!lazy cache variable for type metadata for NSDictionary)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSDictionary);
  }
  return result;
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void partial apply for closure #1 in closure #1 in NetworkManager.updateNetworkPerformanceFeed()(uint64_t a1, void *a2)
{
  closure #1 in closure #1 in NetworkManager.updateNetworkPerformanceFeed()(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_4_10()
{
  outlined consume of [String : UInt64].Iterator._Variant();
  return v0;
}

uint64_t OUTLINED_FUNCTION_10_4()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_11_3()
{
  return swift_dynamicCast();
}

uint64_t NWConnection.init(endpoint:configuration:with:)(uint64_t a1, const void *a2, void *a3)
{
  uint64_t v6 = type metadata accessor for NWEndpoint();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  id v9 = &v14[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  memcpy(v14, a2, 0x204uLL);
  type metadata accessor for NWParameters();
  id v10 = a3;
  NWParameters.init(configuration:with:)(v14, a3);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  uint64_t v11 = dispatch thunk of NWConnection.__allocating_init(to:using:)();

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
  return v11;
}

uint64_t closure #1 in NWConnection.readyEstablishmentReport(queue:completion:)(uint64_t a1, void (*a2)(void *))
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWConnection.EstablishmentReport?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of NWConnection.EstablishmentReport?(a1, (uint64_t)v6);
  ConnectionEstablishmentReport.init(report:)((uint64_t)v6, v8);
  a2(v8);
  return outlined release of ConnectionEstablishmentReport?((uint64_t)v8);
}

uint64_t protocol witness for NetworkConnectionProtocol.stateUpdateHandler.setter in conformance NWConnection()
{
  return NWConnection.stateUpdateHandler.setter();
}

uint64_t protocol witness for NetworkConnectionProtocol.viabilityUpdateHandler.setter in conformance NWConnection()
{
  return NWConnection.viabilityUpdateHandler.setter();
}

uint64_t protocol witness for NetworkConnectionProtocol.betterPathUpdateHandler.setter in conformance NWConnection()
{
  return NWConnection.betterPathUpdateHandler.setter();
}

uint64_t outlined init with copy of NWConnection.EstablishmentReport?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWConnection.EstablishmentReport?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined release of ConnectionEstablishmentReport?(uint64_t a1)
{
  return a1;
}

uint64_t static ConnectionTCPInfoMetrics.connectionTCPInfoMetrics(from:wasConnected:)(void (*a1)(void, void), char a2)
{
  uint64_t v4 = type metadata accessor for NWInterface.InterfaceType();
  OUTLINED_FUNCTION_0_0();
  uint64_t v117 = v5;
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_0_1();
  uint64_t v7 = type metadata accessor for NWInterface();
  OUTLINED_FUNCTION_0_0();
  uint64_t countAndFlagsBits = v8;
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  MEMORY[0x270FA5388](v11);
  id v13 = (char *)v93 - v12;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NWInterface?);
  uint64_t v15 = OUTLINED_FUNCTION_19_1(v14);
  MEMORY[0x270FA5388](v15);
  OUTLINED_FUNCTION_0_1();
  uint64_t v18 = v17 - v16;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWPath?);
  uint64_t v20 = OUTLINED_FUNCTION_19_1(v19);
  MEMORY[0x270FA5388](v20);
  OUTLINED_FUNCTION_0_1();
  uint64_t v23 = v22 - v21;
  if (!a1 || (a2 & 1) == 0) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t v115 = v4;
  swift_retain();
  aBlock._uint64_t countAndFlagsBits = NWConnection.identifier.getter();
  uint64_t v114 = dispatch thunk of CustomStringConvertible.description.getter();
  unint64_t v116 = v24;
  MEMORY[0x2611B1DD0]();
  uint64_t v25 = (void *)nw_connection_copy_tcp_info();
  swift_unknownObjectRelease();
  if (!v25)
  {
LABEL_6:
    if (one-time initialization token for siriNetwork != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    __swift_project_value_buffer(v27, (uint64_t)static Logger.siriNetwork);
    unint64_t v28 = v116;
    swift_bridgeObjectRetain();
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      aBlock._uint64_t countAndFlagsBits = swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v118 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v114, v28, &aBlock._countAndFlagsBits);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_25D6CC000, v29, v30, "NetworkMetrics: TCP Info not reachable for connection %s because path doesn't exist", v31, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_1_2();
      OUTLINED_FUNCTION_1_2();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    swift_release();
    return MEMORY[0x263F8EE78];
  }
  uint64_t v26 = MEMORY[0x2611B38C0](v25);
  if (v26 != XPC_TYPE_DICTIONARY.getter() || (uint64_t)xpc_dictionary_get_count(v25) < 1)
  {
    swift_unknownObjectRelease();
    goto LABEL_6;
  }
  uint64_t v107 = a1;
  uint64_t v125 = MEMORY[0x263F8EE80];
  uint64_t v33 = swift_allocObject();
  *(void *)(v33 + 16) = &v125;
  uint64_t v34 = swift_allocObject();
  xpc_object_t v100 = v25;
  *(void *)(v34 + 16) = partial apply for closure #1 in static ConnectionTCPInfoMetrics.connectionTCPInfoMetrics(from:wasConnected:);
  *(void *)(v34 + 24) = v33;
  uint64_t v99 = v33;
  size_t v123 = partial apply for thunk for @callee_guaranteed (@unowned UnsafePointer<Int8>, @guaranteed OS_xpc_object) -> (@unowned Bool);
  uint64_t v124 = v34;
  aBlock._uint64_t countAndFlagsBits = MEMORY[0x263EF8330];
  aBlock._object = (void *)1107296256;
  uint64_t v121 = thunk for @escaping @callee_guaranteed (@unowned UnsafePointer<Int8>, @guaranteed OS_xpc_object) -> (@unowned Bool);
  uint64_t v122 = &block_descriptor_10;
  uint64_t v35 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  xpc_dictionary_apply(v100, v35);
  _Block_release(v35);
  LOBYTE(v35) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v35)
  {
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  long long v36 = v107;
  if (!*(void *)(v125 + 16))
  {
    swift_unknownObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  NWConnection.currentPath.getter();
  uint64_t v37 = type metadata accessor for NWPath();
  if (__swift_getEnumTagSinglePayload(v23, 1, v37) == 1)
  {
    outlined destroy of NWPath?(v23);
    goto LABEL_55;
  }
  uint64_t v38 = NWPath.availableInterfaces.getter();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v37 - 8) + 8))(v23, v37);
  uint64_t v39 = *(void *)(v38 + 16);
  uint64_t v96 = v38;
  if (!v39)
  {
LABEL_52:
    __swift_storeEnumTagSinglePayload(v18, 1, 1, v7);
LABEL_54:
    swift_bridgeObjectRelease();
LABEL_55:
    swift_bridgeObjectRelease();
    uint64_t v7 = v116;
    swift_retain();
    uint64_t v84 = swift_bridgeObjectRetain();
    uint64_t countAndFlagsBits = static ConnectionTCPInfoMetrics.setConnectionMetricsTCPInfo(_:from:)(v84, v36);
    swift_bridgeObjectRelease();
    swift_release();
    if (one-time initialization token for siriNetwork == -1)
    {
LABEL_56:
      uint64_t v85 = type metadata accessor for Logger();
      __swift_project_value_buffer(v85, (uint64_t)static Logger.siriNetwork);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      int v86 = Logger.logObject.getter();
      os_log_type_t v87 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v86, v87))
      {
        uint64_t v88 = swift_slowAlloc();
        aBlock._uint64_t countAndFlagsBits = swift_slowAlloc();
        *(_DWORD *)uint64_t v88 = 136315394;
        swift_bridgeObjectRetain();
        uint64_t v118 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v114, v7, &aBlock._countAndFlagsBits);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v88 + 12) = 2080;
        uint64_t v89 = swift_bridgeObjectRetain();
        uint64_t v90 = MEMORY[0x2611B2390](v89, &type metadata for ConnectionTCPInfoMetrics);
        unint64_t v92 = v91;
        swift_bridgeObjectRelease();
        uint64_t v118 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v90, v92, &aBlock._countAndFlagsBits);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_25D6CC000, v86, v87, "NetworkMetrics: TCP Info by interface for connection %s: %s", (uint8_t *)v88, 0x16u);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_1_2();
        OUTLINED_FUNCTION_1_2();
        swift_release();

        swift_unknownObjectRelease();
      }
      else
      {

        swift_unknownObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_release();
      }
      swift_release();
      swift_bridgeObjectRelease();
      return countAndFlagsBits;
    }
LABEL_63:
    swift_once();
    goto LABEL_56;
  }
  uint64_t v41 = countAndFlagsBits + 16;
  uint64_t v40 = *(void (**)(void))(countAndFlagsBits + 16);
  unint64_t v42 = v38
      + ((*(unsigned __int8 *)(countAndFlagsBits + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(countAndFlagsBits + 80));
  uint64_t v101 = *(void *)(countAndFlagsBits + 72);
  uint64_t v106 = (void (**)(char *, uint64_t, uint64_t))(countAndFlagsBits + 32);
  uint64_t v105 = v117 + 88;
  int v104 = *MEMORY[0x263F141A0];
  int v98 = *MEMORY[0x263F14198];
  int v97 = *MEMORY[0x263F141A8];
  int v95 = *MEMORY[0x263F14190];
  int v94 = *MEMORY[0x263F141B0];
  uint64_t v112 = countAndFlagsBits + 8;
  v93[1] = v117 + 8;
  uint64_t countAndFlagsBits = MEMORY[0x263F8EE80];
  uint64_t v103 = v41;
  uint64_t v102 = v40;
  while (1)
  {
    unsigned __int8 v43 = v36;
    unint64_t v110 = v42;
    uint64_t v111 = v39;
    uint64_t v44 = v40;
    OUTLINED_FUNCTION_41();
    v45();
    __swift_storeEnumTagSinglePayload(v18, 0, 1, v7);
    if (__swift_getEnumTagSinglePayload(v18, 1, v7) == 1)
    {
      long long v36 = v43;
      goto LABEL_54;
    }
    (*v106)(v13, v18, v7);
    uint64_t v113 = NWInterface.name.getter();
    uint64_t v117 = v46;
    OUTLINED_FUNCTION_41();
    v44();
    NWInterface.type.getter();
    uint64_t v47 = OUTLINED_FUNCTION_6_6();
    v48(v47);
    OUTLINED_FUNCTION_5_8();
    if (v54)
    {
LABEL_25:
      NWInterface.name.getter();
      Swift::String v49 = String.lowercased()();
      swift_bridgeObjectRelease();
      Swift::String aBlock = v49;
      uint64_t v118 = 0x6365737069;
      unint64_t v119 = 0xE500000000000000;
      lazy protocol witness table accessor for type String and conformance String();
      char v50 = StringProtocol.contains<A>(_:)();
      uint64_t v51 = OUTLINED_FUNCTION_1_19();
      v52(v51);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v50) {
        int countAndFlagsBits_low = 24;
      }
      else {
        int countAndFlagsBits_low = 0;
      }
      goto LABEL_39;
    }
    OUTLINED_FUNCTION_5_8();
    if (v54)
    {
      uint64_t v55 = OUTLINED_FUNCTION_1_19();
      v56(v55);
      int countAndFlagsBits_low = 1;
LABEL_39:
      int v109 = countAndFlagsBits_low;
      goto LABEL_40;
    }
    OUTLINED_FUNCTION_5_8();
    if (v57)
    {
      if (one-time initialization token for shared != -1) {
        swift_once();
      }
      NetworkManager.connectionTechnologyForCellularInterface()();
      uint64_t v58 = OUTLINED_FUNCTION_1_19();
      v59(v58);
      int countAndFlagsBits_low = LOBYTE(aBlock._countAndFlagsBits);
      goto LABEL_39;
    }
    OUTLINED_FUNCTION_5_8();
    if (v60)
    {
      uint64_t v61 = OUTLINED_FUNCTION_1_19();
      v62(v61);
      int countAndFlagsBits_low = 23;
      goto LABEL_39;
    }
    OUTLINED_FUNCTION_5_8();
    if (v79) {
      goto LABEL_25;
    }
    uint64_t v80 = OUTLINED_FUNCTION_1_19();
    v81(v80);
    uint64_t v82 = OUTLINED_FUNCTION_6_6();
    v83(v82);
    int v109 = 0;
LABEL_40:
    uint64_t v63 = v117;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    aBlock._uint64_t countAndFlagsBits = countAndFlagsBits;
    unint64_t v65 = specialized __RawDictionaryStorage.find<A>(_:)(v113, v63);
    uint64_t v67 = *(void *)(countAndFlagsBits + 16);
    BOOL v68 = (v66 & 1) == 0;
    uint64_t countAndFlagsBits = v67 + v68;
    if (__OFADD__(v67, v68))
    {
      __break(1u);
LABEL_61:
      __break(1u);
      goto LABEL_62;
    }
    unint64_t v69 = v65;
    char v70 = v66;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, ConnectionType>);
    Swift::Bool v71 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, countAndFlagsBits);
    long long v36 = v107;
    if (v71) {
      break;
    }
LABEL_44:
    uint64_t countAndFlagsBits = aBlock._countAndFlagsBits;
    if (v70)
    {
      *(unsigned char *)(*(void *)(aBlock._countAndFlagsBits + 56) + v69) = v109;
    }
    else
    {
      *(void *)(aBlock._countAndFlagsBits + 8 * (v69 >> 6) + 64) |= 1 << v69;
      uint64_t v74 = (void *)(*(void *)(countAndFlagsBits + 48) + 16 * v69);
      uint64_t v75 = v117;
      *uint64_t v74 = v113;
      v74[1] = v75;
      *(unsigned char *)(*(void *)(countAndFlagsBits + 56) + v69) = v109;
      uint64_t v76 = *(void *)(countAndFlagsBits + 16);
      BOOL v77 = __OFADD__(v76, 1);
      uint64_t v78 = v76 + 1;
      if (v77) {
        goto LABEL_61;
      }
      *(void *)(countAndFlagsBits + 16) = v78;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v108(v13, v7);
    unint64_t v42 = v110 + v101;
    uint64_t v39 = v111 - 1;
    uint64_t v40 = v102;
    if (v111 == 1) {
      goto LABEL_52;
    }
  }
  unint64_t v72 = specialized __RawDictionaryStorage.find<A>(_:)(v113, v117);
  if ((v70 & 1) == (v73 & 1))
  {
    unint64_t v69 = v72;
    goto LABEL_44;
  }
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in static ConnectionTCPInfoMetrics.connectionTCPInfoMetrics(from:wasConnected:)(int a1, xpc_object_t xdata)
{
  uint64_t result = (uint64_t)xpc_data_get_bytes_ptr(xdata);
  if (result)
  {
    uint64_t v4 = result;
    if (xpc_data_get_length(xdata) == 408 && (uint64_t v5 = MEMORY[0x2611B38C0](xdata), v5 == XPC_TYPE_DATA.getter()))
    {
      uint64_t v6 = String.init(cString:)();
      uint64_t v8 = v7;
      uint64_t v9 = MEMORY[0x2611B18D0](v4, 408);
      unint64_t v11 = v10;
      outlined copy of Data._Representation(v9, v10);
      specialized Dictionary._Variant.setValue(_:forKey:)(v9, v11, v6, v8);
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(v9, v11);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t static ConnectionTCPInfoMetrics.setConnectionMetricsTCPInfo(_:from:)(uint64_t a1, void (*a2)(void, void))
{
  uint64_t v133 = a1;
  uint64_t v3 = type metadata accessor for NWInterface.InterfaceType();
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_0_1();
  uint64_t v126 = (void *)(v8 - v7);
  uint64_t v9 = type metadata accessor for NWInterface();
  OUTLINED_FUNCTION_0_0();
  uint64_t v11 = v10;
  uint64_t v13 = MEMORY[0x270FA5388](v12);
  uint64_t v127 = (char *)&v108 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v131 = (char *)&v108 - v15;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NWInterface?);
  uint64_t v17 = OUTLINED_FUNCTION_19_1(v16);
  MEMORY[0x270FA5388](v17);
  OUTLINED_FUNCTION_0_1();
  uint64_t v20 = v19 - v18;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWPath?);
  uint64_t v22 = OUTLINED_FUNCTION_19_1(v21);
  MEMORY[0x270FA5388](v22);
  OUTLINED_FUNCTION_0_1();
  uint64_t v25 = v24 - v23;
  if (!a2) {
    return MEMORY[0x263F8EE78];
  }
  swift_retain();
  v136[0]._char countAndFlagsBits = NWConnection.identifier.getter();
  uint64_t v113 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v115 = v26;
  NWConnection.currentPath.getter();
  uint64_t v27 = type metadata accessor for NWPath();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v25, 1, v27);
  uint64_t v114 = a2;
  if (EnumTagSinglePayload != 1)
  {
    uint64_t v30 = NWPath.availableInterfaces.getter();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v27 - 8) + 8))(v25, v27);
    uint64_t v31 = *(void *)(v30 + 16);
    uint64_t v111 = v30;
    if (!v31)
    {
      uint64_t v129 = MEMORY[0x263F8EE80];
LABEL_33:
      __swift_storeEnumTagSinglePayload(v20, 1, 1, v9);
LABEL_34:
      swift_bridgeObjectRelease();
      goto LABEL_35;
    }
    uint64_t v33 = v11 + 16;
    long long v32 = *(void (**)(void))(v11 + 16);
    unint64_t v34 = v30 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    uint64_t v117 = *(void *)(v33 + 56);
    uint64_t v124 = (void (**)(char *, uint64_t, uint64_t))(v33 + 16);
    size_t v123 = (uint64_t (**)(void *, uint64_t))(v5 + 88);
    int v122 = *MEMORY[0x263F141A0];
    LODWORD(v116) = *MEMORY[0x263F14198];
    LODWORD(v112) = *MEMORY[0x263F141A8];
    int v35 = *MEMORY[0x263F14190];
    int v109 = *MEMORY[0x263F141B0];
    LODWORD(v110) = v35;
    uint64_t v130 = v33 - 8;
    uint64_t v108 = (void (**)(void *, uint64_t))(v5 + 8);
    uint64_t v129 = MEMORY[0x263F8EE80];
    uint64_t v125 = v3;
    long long v36 = v32;
    uint64_t v119 = v20;
    uint64_t v120 = v9;
    uint64_t v118 = v32;
    uint64_t v121 = v33;
    while (1)
    {
      OUTLINED_FUNCTION_41();
      v36();
      __swift_storeEnumTagSinglePayload(v20, 0, 1, v9);
      if (__swift_getEnumTagSinglePayload(v20, 1, v9) == 1) {
        goto LABEL_34;
      }
      (*v124)(v131, v20, v9);
      uint64_t v132 = NWInterface.name.getter();
      uint64_t v38 = v37;
      OUTLINED_FUNCTION_41();
      v36();
      uint64_t v39 = v126;
      NWInterface.type.getter();
      int v40 = (*v123)(v39, v125);
      uint64_t v128 = v31;
      if (v40 == v122) {
        break;
      }
      if (v40 == v116)
      {
        uint64_t v46 = OUTLINED_FUNCTION_2_15();
        v47(v46);
        char countAndFlagsBits = 1;
      }
      else
      {
        if (v40 == v112)
        {
          if (one-time initialization token for shared != -1) {
            swift_once();
          }
          NetworkManager.connectionTechnologyForCellularInterface()();
          uint64_t v48 = OUTLINED_FUNCTION_2_15();
          v49(v48);
          char countAndFlagsBits = v136[0]._countAndFlagsBits;
          goto LABEL_22;
        }
        if (v40 == v110)
        {
          uint64_t v50 = OUTLINED_FUNCTION_2_15();
          v51(v50);
          char countAndFlagsBits = 23;
        }
        else
        {
          if (v40 == v109) {
            break;
          }
          uint64_t v52 = OUTLINED_FUNCTION_2_15();
          v53(v52);
          (*v108)(v126, v125);
          char countAndFlagsBits = 0;
        }
      }
LABEL_22:
      uint64_t v54 = v129;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v136[0]._char countAndFlagsBits = v54;
      unint64_t v56 = specialized __RawDictionaryStorage.find<A>(_:)(v132, v38);
      uint64_t v58 = *(void *)(v54 + 16);
      BOOL v59 = (v57 & 1) == 0;
      Swift::Int v60 = v58 + v59;
      if (__OFADD__(v58, v59)) {
        goto LABEL_93;
      }
      unint64_t v61 = v56;
      char v62 = v57;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, ConnectionType>);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v60))
      {
        unint64_t v63 = specialized __RawDictionaryStorage.find<A>(_:)(v132, v38);
        if ((v62 & 1) != (v64 & 1)) {
          goto LABEL_96;
        }
        unint64_t v61 = v63;
      }
      unint64_t v65 = (void *)v136[0]._countAndFlagsBits;
      uint64_t v129 = v136[0]._countAndFlagsBits;
      if (v62)
      {
        *(unsigned char *)(*(void *)(v136[0]._countAndFlagsBits + 56) + v61) = countAndFlagsBits;
      }
      else
      {
        *(void *)(v136[0]._countAndFlagsBits + 8 * (v61 >> 6) + 64) |= 1 << v61;
        char v66 = (void *)(v65[6] + 16 * v61);
        *char v66 = v132;
        v66[1] = v38;
        *(unsigned char *)(v65[7] + v61) = countAndFlagsBits;
        uint64_t v67 = v65[2];
        BOOL v68 = __OFADD__(v67, 1);
        uint64_t v69 = v67 + 1;
        if (v68) {
          goto LABEL_95;
        }
        v65[2] = v69;
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v9 = v120;
      a2(v131, v120);
      long long v36 = v118;
      v34 += v117;
      uint64_t v31 = v128 - 1;
      uint64_t v20 = v119;
      if (v128 == 1) {
        goto LABEL_33;
      }
    }
    NWInterface.name.getter();
    Swift::String v41 = String.lowercased()();
    swift_bridgeObjectRelease();
    v136[0] = v41;
    *(void *)&v135[0] = 0x6365737069;
    *((void *)&v135[0] + 1) = 0xE500000000000000;
    lazy protocol witness table accessor for type String and conformance String();
    char v42 = StringProtocol.contains<A>(_:)();
    uint64_t v43 = OUTLINED_FUNCTION_2_15();
    v44(v43);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v42) {
      char countAndFlagsBits = 24;
    }
    else {
      char countAndFlagsBits = 0;
    }
    goto LABEL_22;
  }
  outlined destroy of NWPath?(v25);
  uint64_t v129 = MEMORY[0x263F8EE80];
LABEL_35:
  uint64_t v70 = *(void *)(v133 + 64);
  uint64_t v131 = (char *)(v133 + 64);
  uint64_t v71 = 1 << *(unsigned char *)(v133 + 32);
  uint64_t v72 = -1;
  if (v71 < 64) {
    uint64_t v72 = ~(-1 << v71);
  }
  unint64_t v73 = v72 & v70;
  uint64_t v132 = (unint64_t)(v71 + 63) >> 6;
  uint64_t v126 = &v134[284];
  uint64_t v127 = (char *)&v135[17] + 12;
  swift_bridgeObjectRetain();
  uint64_t v74 = 0;
  uint64_t v128 = MEMORY[0x263F8EE78];
  while (v73)
  {
    unint64_t v75 = __clz(__rbit64(v73));
    v73 &= v73 - 1;
    unint64_t v76 = v75 | (v74 << 6);
LABEL_54:
    uint64_t v80 = (uint64_t *)(*(void *)(v133 + 48) + 16 * v76);
    uint64_t v81 = v80[1];
    uint64_t v82 = (uint64_t *)(*(void *)(v133 + 56) + 16 * v76);
    uint64_t v84 = *v82;
    unint64_t v83 = v82[1];
    switch(v83 >> 62)
    {
      case 1uLL:
        if (v84 >> 32 < (int)v84) {
          goto LABEL_89;
        }
        uint64_t v130 = *v80;
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v84, v83);
        uint64_t v85 = (char *)__DataStorage._bytes.getter();
        if (!v85) {
          goto LABEL_60;
        }
        uint64_t v86 = __DataStorage._offset.getter();
        if (__OFSUB__((int)v84, v86)) {
          goto LABEL_92;
        }
        v85 += (int)v84 - v86;
LABEL_60:
        uint64_t v87 = __DataStorage._length.getter();
        if (!v85) {
          goto LABEL_75;
        }
        uint64_t v88 = (v84 >> 32) - (int)v84;
        if (v87 < v88) {
          uint64_t v88 = v87;
        }
        if (v88 != 408) {
          goto LABEL_75;
        }
        memmove(v135, v85, 0x198uLL);
        goto LABEL_77;
      case 2uLL:
        uint64_t v130 = *v80;
        uint64_t v89 = *(void *)(v84 + 16);
        uint64_t v90 = *(void *)(v84 + 24);
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v84, v83);
        swift_retain();
        swift_retain();
        unint64_t v91 = (char *)__DataStorage._bytes.getter();
        if (!v91) {
          goto LABEL_68;
        }
        uint64_t v92 = __DataStorage._offset.getter();
        if (__OFSUB__(v89, v92)) {
          goto LABEL_91;
        }
        v91 += v89 - v92;
LABEL_68:
        BOOL v68 = __OFSUB__(v90, v89);
        uint64_t v93 = v90 - v89;
        if (v68) {
          goto LABEL_90;
        }
        uint64_t v94 = __DataStorage._length.getter();
        if (v94 >= v93) {
          uint64_t v95 = v93;
        }
        else {
          uint64_t v95 = v94;
        }
        if (v91 && v95 == 408)
        {
          memcpy(v134, v91, sizeof(v134));
          swift_release();
          swift_release();
          memcpy(v135, v134, 0x198uLL);
LABEL_77:
          _sSo8tcp_infoVSgWOi_((uint64_t)v135);
          outlined init with take of tcp_info?((uint64_t)v135, (uint64_t)v136);
          outlined init with take of tcp_info?((uint64_t)v136, (uint64_t)v135);
          uint64_t v96 = *(void *)v127;
          int v97 = DWORD1(v135[18]);
          uint64_t v98 = *(void *)&v135[25];
          int v99 = DWORD1(v135[1]);
          *(_DWORD *)id v134 = v135[0];
          *(_OWORD *)&v134[4] = *(_OWORD *)((char *)v135 + 4);
          *(void *)&v134[20] = *(void *)((char *)&v135[1] + 4);
          int v122 = DWORD2(v135[1]);
          long long v110 = *(_OWORD *)((char *)&v135[1] + 12);
          *(_OWORD *)&v134[28] = *(_OWORD *)((char *)&v135[1] + 12);
          *(_OWORD *)&v134[44] = *(_OWORD *)((char *)&v135[2] + 12);
          *(_DWORD *)&v134[60] = HIDWORD(v135[3]);
          uint64_t v125 = LODWORD(v135[4]);
          *(_DWORD *)&v134[64] = v135[4];
          uint64_t v120 = *(void *)((char *)&v135[6] + 4);
          uint64_t v121 = *(void *)((char *)&v135[4] + 4);
          *(void *)&v134[68] = *(void *)((char *)&v135[4] + 4);
          uint64_t v116 = *(void *)((char *)&v135[4] + 12);
          uint64_t v117 = *(void *)((char *)&v135[5] + 12);
          *(void *)&v134[76] = *(void *)((char *)&v135[4] + 12);
          uint64_t v111 = *(void *)((char *)&v135[6] + 12);
          uint64_t v112 = *(void *)((char *)&v135[5] + 4);
          *(void *)&v134[84] = *(void *)((char *)&v135[5] + 4);
          *(void *)&v134[92] = *(void *)((char *)&v135[5] + 12);
          *(void *)&v134[100] = *(void *)((char *)&v135[6] + 4);
          *(void *)&v134[108] = *(void *)((char *)&v135[6] + 12);
          uint64_t v118 = *(void (**)(void))((char *)&v135[7] + 4);
          uint64_t v119 = *(void *)((char *)&v135[7] + 12);
          *(void *)&v134[116] = *(void *)((char *)&v135[7] + 4);
          *(void *)&v134[124] = *(void *)((char *)&v135[7] + 12);
          size_t v123 = *(uint64_t (***)(void *, uint64_t))((char *)&v135[8] + 4);
          *(void *)&v134[132] = *(void *)((char *)&v135[8] + 4);
          LODWORD(v124) = BYTE12(v135[8]);
          *(_DWORD *)&v134[140] = HIDWORD(v135[8]);
          *(_OWORD *)&v134[144] = v135[9];
          *(_OWORD *)&v134[160] = v135[10];
          *(_OWORD *)&v134[176] = v135[11];
          *(_OWORD *)&v134[192] = v135[12];
          *(_OWORD *)&v134[208] = v135[13];
          *(_OWORD *)&v134[224] = v135[14];
          *(_OWORD *)&v134[240] = v135[15];
          *(_OWORD *)&v134[256] = v135[16];
          *(void *)&v134[272] = *(void *)&v135[17];
          *(_DWORD *)&v134[280] = DWORD2(v135[17]);
          *uint64_t v126 = v96;
          *(_DWORD *)&v134[292] = v97;
          *(void *)&v134[296] = *((void *)&v135[18] + 1);
          *(_OWORD *)&v134[304] = v135[19];
          *(_OWORD *)&v134[320] = v135[20];
          *(_OWORD *)&v134[336] = v135[21];
          *(_OWORD *)&v134[352] = v135[22];
          *(_OWORD *)&v134[368] = v135[23];
          *(_OWORD *)&v134[384] = v135[24];
          *(void *)&v134[400] = v98;
          int v109 = _So8tcp_infoV_tcpi_tfo_syn_data_acked_getter((uint64_t)v134);
          uint64_t v100 = v129;
          uint64_t v101 = *(void *)(v129 + 16);
          swift_bridgeObjectRetain();
          uint64_t v102 = v130;
          if (v101 && (unint64_t v103 = specialized __RawDictionaryStorage.find<A>(_:)(v130, v81), (v104 & 1) != 0)) {
            char v105 = *(unsigned char *)(*(void *)(v100 + 56) + v103);
          }
          else {
            char v105 = 25;
          }
          *(void *)id v134 = v102;
          *(void *)&v134[8] = v81;
          *(void *)&v134[16] = v113;
          *(void *)&v134[24] = v115;
          v134[32] = v105;
          *(void *)&v134[40] = v111;
          v134[48] = 0;
          *(void *)&v134[56] = v112;
          v134[64] = 0;
          *(void *)&v134[72] = v116;
          v134[80] = 0;
          *(void *)&v134[88] = v117;
          v134[96] = 0;
          *(void *)&v134[104] = v118;
          v134[112] = 0;
          *(void *)&v134[120] = v119;
          v134[128] = 0;
          *(void *)&v134[136] = v120;
          v134[144] = 0;
          *(void *)&v134[152] = v121;
          *(_DWORD *)&v134[164] = DWORD1(v110);
          v134[160] = 0;
          v134[168] = 0;
          *(_DWORD *)&v134[172] = v99;
          v134[176] = 0;
          *(_DWORD *)&v134[180] = v122;
          v134[184] = 0;
          *(_DWORD *)&v134[188] = v110;
          v134[192] = 0;
          *(void *)&v134[200] = v123;
          v134[208] = 0;
          *(void *)&v134[216] = v125;
          v134[224] = 0;
          *(_DWORD *)&v134[228] = v124;
          v134[232] = 0;
          *(_DWORD *)&v134[236] = v109;
          v134[240] = 0;
          *(_DWORD *)&v134[244] = 0;
          v134[248] = 1;
          swift_bridgeObjectRetain();
          outlined retain of ConnectionTCPInfoMetrics((uint64_t)v134);
          swift_bridgeObjectRelease();
          if (swift_isUniquelyReferenced_nonNull_native()) {
            uint64_t v106 = v128;
          }
          else {
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          unint64_t v107 = *(void *)(v106 + 16);
          if (v107 >= *(void *)(v106 + 24) >> 1) {
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          *(void *)(v106 + 16) = v107 + 1;
          uint64_t v128 = v106;
          memcpy((void *)(v106 + (v107 << 8) + 32), v134, 0xF9uLL);
          outlined consume of Data._Representation(v84, v83);
          outlined release of ConnectionTCPInfoMetrics((uint64_t)v134);
        }
        else
        {
          swift_release();
          swift_release();
LABEL_75:
          outlined consume of Data._Representation(v84, v83);
          swift_bridgeObjectRelease();
        }
        break;
      default:
        swift_bridgeObjectRetain();
        goto LABEL_75;
    }
  }
  uint64_t v77 = v74 + 1;
  if (__OFADD__(v74, 1))
  {
    __break(1u);
LABEL_89:
    __break(1u);
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }
  if (v77 >= v132) {
    goto LABEL_87;
  }
  unint64_t v78 = *(void *)&v131[8 * v77];
  ++v74;
  if (v78) {
    goto LABEL_53;
  }
  uint64_t v74 = v77 + 1;
  if (v77 + 1 >= v132) {
    goto LABEL_87;
  }
  unint64_t v78 = *(void *)&v131[8 * v74];
  if (v78) {
    goto LABEL_53;
  }
  uint64_t v74 = v77 + 2;
  if (v77 + 2 >= v132) {
    goto LABEL_87;
  }
  unint64_t v78 = *(void *)&v131[8 * v74];
  if (v78)
  {
LABEL_53:
    unint64_t v73 = (v78 - 1) & v78;
    unint64_t v76 = __clz(__rbit64(v78)) + (v74 << 6);
    goto LABEL_54;
  }
  uint64_t v79 = v77 + 3;
  if (v79 < v132)
  {
    unint64_t v78 = *(void *)&v131[8 * v79];
    if (!v78)
    {
      while (1)
      {
        uint64_t v74 = v79 + 1;
        if (__OFADD__(v79, 1)) {
          break;
        }
        if (v74 >= v132) {
          goto LABEL_87;
        }
        unint64_t v78 = *(void *)&v131[8 * v74];
        ++v79;
        if (v78) {
          goto LABEL_53;
        }
      }
LABEL_94:
      __break(1u);
LABEL_95:
      __break(1u);
LABEL_96:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      JUMPOUT(0x25D725C2CLL);
    }
    uint64_t v74 = v79;
    goto LABEL_53;
  }
LABEL_87:
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v128;
}

uint64_t sub_25D725C3C()
{
  return OUTLINED_FUNCTION_4_11(v0, 24);
}

uint64_t partial apply for closure #1 in static ConnectionTCPInfoMetrics.connectionTCPInfoMetrics(from:wasConnected:)(int a1, void *a2)
{
  return closure #1 in static ConnectionTCPInfoMetrics.connectionTCPInfoMetrics(from:wasConnected:)(a1, a2);
}

uint64_t sub_25D725C50()
{
  return OUTLINED_FUNCTION_4_11(v0, 32);
}

uint64_t partial apply for thunk for @callee_guaranteed (@unowned UnsafePointer<Int8>, @guaranteed OS_xpc_object) -> (@unowned Bool)(uint64_t a1, uint64_t a2)
{
  return thunk for @callee_guaranteed (@unowned UnsafePointer<Int8>, @guaranteed OS_xpc_object) -> (@unowned Bool)(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

uint64_t block_copy_helper_10(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_10()
{
  return swift_release();
}

uint64_t outlined destroy of NWPath?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWPath?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

uint64_t _sSo8tcp_infoVSgWOi_(uint64_t result)
{
  *(unsigned char *)(result + 408) = 0;
  return result;
}

uint64_t outlined init with take of tcp_info?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for tcp_info?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t _So8tcp_infoV_tcpi_tfo_syn_data_acked_getter(uint64_t a1)
{
  return (*(unsigned __int16 *)(a1 + 244) >> 4) & 1;
}

uint64_t OUTLINED_FUNCTION_1_19()
{
  uint64_t result = v0;
  *(void *)(v1 - 240) = **(void **)(v1 - 208);
  return result;
}

uint64_t OUTLINED_FUNCTION_2_15()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_4_11(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA0238](a1, a2, 7);
}

uint64_t OUTLINED_FUNCTION_6_6()
{
  return v0;
}

uint64_t SpeechPacket.internalAceId.getter()
{
  return SpeechPacket.internalAceId.getter();
}

{
  uint64_t *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_2_16();
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SpeechPacket.internalAceId.setter(uint64_t a1, uint64_t a2)
{
  return SpeechPacket.internalAceId.setter(a1, a2);
}

{
  void *v2;

  OUTLINED_FUNCTION_1_20();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*SpeechPacket.internalAceId.modify())()
{
  return RPCOspreyConnectionProvider.connectionMetrics.modify;
}

id @objc SpeechPacket.internalAceId.getter(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = a3();
  if (v4)
  {
    uint64_t v5 = (void *)MEMORY[0x2611B2220](v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t SpeechPacket.internalRefId.getter()
{
  return SpeechPacket.internalAceId.getter();
}

void @objc SpeechPacket.internalAceId.setter(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  if (a3)
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
  id v9 = a1;
  a4(v6, v8);
}

uint64_t SpeechPacket.internalRefId.setter(uint64_t a1, uint64_t a2)
{
  return SpeechPacket.internalAceId.setter(a1, a2);
}

uint64_t key path setter for SpeechPacket.internalAceId : SpeechPacket(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  swift_bridgeObjectRetain();
  return a5(v7, v6);
}

uint64_t (*SpeechPacket.internalRefId.modify())()
{
  return RPCOspreyConnectionProvider.connectionMetrics.modify;
}

uint64_t SpeechPacket.packets.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SpeechPacket.packets.setter(uint64_t a1)
{
  OUTLINED_FUNCTION_1_20();
  void *v1 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t key path setter for SpeechPacket.packets : SpeechPacket()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  return SpeechPacket.packets.setter(v0);
}

uint64_t (*SpeechPacket.packets.modify())()
{
  return RPCOspreyConnectionProvider.connectionMetrics.modify;
}

uint64_t SpeechPacket.packetNumber.getter()
{
  OUTLINED_FUNCTION_2_16();
  return *(void *)v0;
}

uint64_t SpeechPacket.packetNumber.setter(uint64_t a1)
{
  uint64_t result = OUTLINED_FUNCTION_1_20();
  void *v1 = a1;
  return result;
}

uint64_t (*SpeechPacket.packetNumber.modify())()
{
  return static ConnectionConfigurationError.errorDomain.modify;
}

id SpeechPacket.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

id SpeechPacket.init()()
{
  id v1 = &v0[OBJC_IVAR___SNSpeechPacketInternal_internalAceId];
  *(void *)id v1 = 0;
  *((void *)v1 + 1) = 0;
  uint64_t v2 = &v0[OBJC_IVAR___SNSpeechPacketInternal_internalRefId];
  *(void *)uint64_t v2 = 0;
  *((void *)v2 + 1) = 0;
  *(void *)&v0[OBJC_IVAR___SNSpeechPacketInternal_packets] = MEMORY[0x263F8EE78];
  *(void *)&v0[OBJC_IVAR___SNSpeechPacketInternal_packetNumber] = 0;
  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for SpeechPacket();
  return objc_msgSendSuper2(&v4, sel_init);
}

uint64_t type metadata accessor for SpeechPacket()
{
  return self;
}

id SpeechPacket.__allocating_init(aceId:refId:packets:packetNumber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v13 = objc_allocWithZone(v6);
  return SpeechPacket.init(aceId:refId:packets:packetNumber:)(a1, a2, a3, a4, a5, a6);
}

id SpeechPacket.init(aceId:refId:packets:packetNumber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = &v6[OBJC_IVAR___SNSpeechPacketInternal_internalAceId];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  uint64_t v12 = &v6[OBJC_IVAR___SNSpeechPacketInternal_internalRefId];
  *(void *)uint64_t v12 = 0;
  *((void *)v12 + 1) = 0;
  id v13 = &v6[OBJC_IVAR___SNSpeechPacketInternal_packets];
  *(void *)&v6[OBJC_IVAR___SNSpeechPacketInternal_packets] = MEMORY[0x263F8EE78];
  uint64_t v14 = &v6[OBJC_IVAR___SNSpeechPacketInternal_packetNumber];
  *(void *)&v6[OBJC_IVAR___SNSpeechPacketInternal_packetNumber] = 0;
  OUTLINED_FUNCTION_128();
  *(void *)uint64_t v11 = a1;
  *((void *)v11 + 1) = a2;
  uint64_t v15 = v6;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_128();
  *(void *)uint64_t v12 = a3;
  *((void *)v12 + 1) = a4;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_128();
  *(void *)id v13 = a5;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_128();
  *(void *)uint64_t v14 = a6;

  v19.receiver = v15;
  v19.super_class = (Class)type metadata accessor for SpeechPacket();
  return objc_msgSendSuper2(&v19, sel_init);
}

uint64_t SpeechPacket.serializedAceData()()
{
  int64_t v3 = static AceSerialization.aceDataForSpeechPacket(_:)(v0);
  if (v1) {
    return v2;
  }
  if (v4 >> 60 == 15)
  {
    lazy protocol witness table accessor for type AceSerializationError and conformance AceSerializationError();
    swift_allocError();
    *(_OWORD *)uint64_t v5 = xmmword_25D792120;
    *(unsigned char *)(v5 + 16) = 3;
    swift_willThrow();
    return v2;
  }
  uint64_t v7 = v3;
  switch(v4 >> 62)
  {
    case 1uLL:
      if (v3 >> 32 < (int)v3)
      {
        __break(1u);
        swift_release();
        swift_release();
        __break(1u);
        OUTLINED_FUNCTION_3_13();
        __break(1u);
        JUMPOUT(0x25D7267D0);
      }
      swift_retain();
      uint64_t v2 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v7, v7 >> 32);
      OUTLINED_FUNCTION_3_13();
      goto LABEL_12;
    case 2uLL:
      uint64_t v10 = *(void *)(v3 + 16);
      uint64_t v11 = *(void *)(v3 + 24);
      swift_retain();
      swift_retain();
      uint64_t v2 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v10, v11);
      swift_release();
      swift_release();
LABEL_12:
      OUTLINED_FUNCTION_3_13();
      return v2;
    case 3uLL:
      int64_t v3 = 0;
      unint64_t v9 = 0;
      uint64_t v8 = 0;
      goto LABEL_9;
    default:
      uint64_t v8 = BYTE6(v4);
      unint64_t v9 = v4 & 0xFFFFFFFFFFFFLL;
LABEL_9:
      uint64_t v12 = _ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_A13Et_sAC_pSo16OS_dispatch_dataCTg5037_s10Foundation4DataV06InlineB0V15withb29BytesyxxSWKXEKlFxSWKXEfU_So16g1_h1_I5C_TG5SWxsAC_pRi_zRi0_zlyAGIsgyrzo_SiTf1nc_n045_s11SiriNetwork12SpeechPacketC17serializedAcelug1_h1_I13CyKFAFSWXEfU_Tf1ncn_n(v3, v9, v8);
      OUTLINED_FUNCTION_3_13();
      uint64_t result = v12;
      break;
  }
  return result;
}

Swift::String_optional __swiftcall SpeechPacket.sessionRequestId()()
{
  uint64_t v0 = 0;
  uint64_t v1 = 0;
  result.value._object = v1;
  result.value._char countAndFlagsBits = v0;
  return result;
}

id SpeechPacket.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SpeechPacket();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for SessionObject.internalAceId.getter in conformance SpeechPacket()
{
  return SpeechPacket.internalAceId.getter();
}

uint64_t protocol witness for SessionObject.internalAceId.setter in conformance SpeechPacket(uint64_t a1, uint64_t a2)
{
  return SpeechPacket.internalAceId.setter(a1, a2);
}

uint64_t (*protocol witness for SessionObject.internalAceId.modify in conformance SpeechPacket())()
{
  return RPCOspreyConnectionProvider.connectionMetrics.modify;
}

uint64_t protocol witness for SessionObject.internalRefId.getter in conformance SpeechPacket()
{
  return SpeechPacket.internalRefId.getter();
}

uint64_t protocol witness for SessionObject.internalRefId.setter in conformance SpeechPacket(uint64_t a1, uint64_t a2)
{
  return SpeechPacket.internalRefId.setter(a1, a2);
}

uint64_t (*protocol witness for SessionObject.internalRefId.modify in conformance SpeechPacket())()
{
  return RPCOspreyConnectionProvider.connectionMetrics.modify;
}

uint64_t protocol witness for SessionObject.serializedAceData() in conformance SpeechPacket()
{
  return SpeechPacket.serializedAceData()();
}

uint64_t _ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_A13Et_sAC_pSo16OS_dispatch_dataCTg5037_s10Foundation4DataV06InlineB0V15withb29BytesyxxSWKXEKlFxSWKXEfU_So16g1_h1_I5C_TG5SWxsAC_pRi_zRi0_zlyAGIsgyrzo_SiTf1nc_n045_s11SiriNetwork12SpeechPacketC17serializedAcelug1_h1_I13CyKFAFSWXEfU_Tf1ncn_n(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v24 = a3;
  char v3 = a2;
  char v4 = a1;
  unint64_t v5 = a1 >> 8;
  unint64_t v6 = a1 >> 16;
  unint64_t v7 = a1 >> 24;
  unint64_t v8 = HIDWORD(a1);
  uint64_t v39 = *MEMORY[0x263EF8340];
  unint64_t v16 = a1 >> 40;
  unint64_t v17 = HIWORD(a1);
  unint64_t v18 = HIBYTE(a1);
  unint64_t v19 = a2 >> 8;
  unint64_t v20 = a2 >> 16;
  unint64_t v21 = a2 >> 24;
  unint64_t v22 = HIDWORD(a2);
  unint64_t v23 = a2 >> 40;
  uint64_t v9 = type metadata accessor for DispatchData();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v25 = v4;
  char v26 = v5;
  char v27 = v6;
  char v28 = v7;
  char v29 = v8;
  char v30 = v16;
  char v31 = v17;
  char v32 = v18;
  char v33 = v3;
  char v34 = v19;
  char v35 = v20;
  char v36 = v21;
  char v37 = v22;
  char v38 = v23;
  DispatchData.init(bytes:)();
  uint64_t v13 = DispatchData._bridgeToObjectiveC()();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return v13;
}

uint64_t sub_25D726E2C()
{
  OUTLINED_FUNCTION_5_9();
  uint64_t result = SpeechPacket.internalAceId.getter();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_25D726E54(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for SpeechPacket.internalAceId : SpeechPacket(a1, a2, a3, a4, SpeechPacket.internalAceId.setter);
}

uint64_t sub_25D726E80()
{
  OUTLINED_FUNCTION_5_9();
  uint64_t result = SpeechPacket.internalRefId.getter();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_25D726EA8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for SpeechPacket.internalAceId : SpeechPacket(a1, a2, a3, a4, SpeechPacket.internalRefId.setter);
}

uint64_t sub_25D726ED4()
{
  OUTLINED_FUNCTION_5_9();
  uint64_t result = SpeechPacket.packets.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_25D726F00()
{
  OUTLINED_FUNCTION_5_9();
  uint64_t result = SpeechPacket.packetNumber.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_25D726F28(uint64_t *a1)
{
  return SpeechPacket.packetNumber.setter(*a1);
}

uint64_t method lookup function for SpeechPacket(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SpeechPacket);
}

uint64_t dispatch thunk of SpeechPacket.internalAceId.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x70))();
}

uint64_t dispatch thunk of SpeechPacket.internalAceId.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x78))();
}

uint64_t dispatch thunk of SpeechPacket.internalAceId.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x80))();
}

uint64_t dispatch thunk of SpeechPacket.internalRefId.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x88))();
}

uint64_t dispatch thunk of SpeechPacket.internalRefId.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x90))();
}

uint64_t dispatch thunk of SpeechPacket.internalRefId.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x98))();
}

uint64_t dispatch thunk of SpeechPacket.packets.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of SpeechPacket.packets.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of SpeechPacket.packets.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of SpeechPacket.packetNumber.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of SpeechPacket.packetNumber.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of SpeechPacket.packetNumber.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of SpeechPacket.__allocating_init(aceId:refId:packets:packetNumber:)()
{
  return (*(uint64_t (**)(void))(v0 + 208))();
}

uint64_t dispatch thunk of SpeechPacket.serializedAceData()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of SpeechPacket.bufferingAllowedDuringActiveSession()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of SpeechPacket.isRetryable()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of SpeechPacket.isRestartable()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of SpeechPacket.isProvisional()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of SpeechPacket.logDiagnostics()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x100))();
}

uint64_t dispatch thunk of SpeechPacket.sessionRequestId()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x108))();
}

uint64_t dispatch thunk of SpeechPacket.setSessionRequestId(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x110))();
}

uint64_t dispatch thunk of SpeechPacket.supportedByLocalSession()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x118))();
}

uint64_t dispatch thunk of SpeechPacket.supportedByRemoteLimitedSession()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x120))();
}

unint64_t type metadata accessor for NSData()
{
  unint64_t result = lazy cache variable for type metadata for NSData;
  if (!lazy cache variable for type metadata for NSData)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSData);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_21()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_1_20()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_2_16()
{
  return swift_beginAccess();
}

uint64_t NWParameters.init(configuration:with:)(const void *a1, void *a2)
{
  v130[65] = *MEMORY[0x263EF8340];
  uint64_t v4 = type metadata accessor for NWParameters.ServiceClass();
  uint64_t v120 = *(void *)(v4 - 8);
  uint64_t v121 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v119 = (char *)&v114 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  memcpy(v130, a1, 0x204uLL);
  uint64_t v6 = LOBYTE(v130[25]);
  memcpy(v129, a1, sizeof(v129));
  ConnectionConfiguration.usingTLS.getter();
  int v8 = v7;
  uint64_t v9 = (void *)&unk_26B36E000;
  if ((v7 & 1) != 0 && (v130[14] & 1) == 0)
  {
    OUTLINED_FUNCTION_3_15();
    if (!v10) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.siriNetwork);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)OUTLINED_FUNCTION_2_0();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl(&dword_25D6CC000, v12, v13, "Provider - Network setup: TLS enabled", v14, 2u);
      OUTLINED_FUNCTION_1_2();
    }

    type metadata accessor for NWProtocolTLS.Options();
    swift_allocObject();
    uint64_t v15 = NWProtocolTLS.Options.init()();
    swift_retain();
    unint64_t v16 = dispatch thunk of NWProtocolTLS.Options.securityProtocolOptions.getter();
    uint64_t v125 = v15;
    swift_release();
    sec_protocol_options_set_tls_tickets_enabled(v16, SBYTE1(v130[25]));
    if (v130[49] && (v130[42] & 0x1010000) != 0)
    {
      unint64_t v17 = (void *)Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.default.getter();
      if (OUTLINED_FUNCTION_2_17(v18))
      {
        unint64_t v19 = (_WORD *)OUTLINED_FUNCTION_2_0();
        OUTLINED_FUNCTION_5_10(v19);
        OUTLINED_FUNCTION_1_21(&dword_25D6CC000, v20, v21, "Provider - Network setup: TLS13 enabled");
        OUTLINED_FUNCTION_1_2();
      }

      sec_protocol_options_set_max_tls_protocol_version(v16, tls_protocol_version_TLSv13);
      sec_protocol_options_set_tls_resumption_enabled(v16, 1);
      sec_protocol_options_set_tls_false_start_enabled(v16, 1);
      sec_protocol_options_add_tls_application_protocol(v16, "http/1.1");
    }
    swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v125 = 0;
  }
  type metadata accessor for NWProtocolTCP.Options();
  swift_allocObject();
  uint64_t v22 = NWProtocolTCP.Options.init()();
  LODWORD(v116) = v8;
  if (v130[49])
  {
    int v117 = v130[42] & 1;
    uint64_t v123 = (v130[42] >> 8) & 1;
    uint64_t v6 = HIDWORD(v130[42]) & 1;
  }
  else
  {
    int v117 = 0;
    uint64_t v123 = 1;
  }
  dispatch thunk of NWProtocolTCP.Options.noDelay.setter();
  uint64_t v122 = v6;
  dispatch thunk of NWProtocolTCP.Options.enableFastOpen.setter();
  double v23 = *(double *)&v130[26];
  char v24 = v130[27];
  double v25 = *(double *)&v130[28];
  LOBYTE(v26) = v130[30];
  uint64_t v124 = a2;
  if (LOBYTE(v130[27]) != 1 || !LOBYTE(v130[29]) || (v130[31] & 1) == 0)
  {
    int v115 = LOBYTE(v130[29]);
    dispatch thunk of NWProtocolTCP.Options.enableKeepalive.setter();
    dispatch thunk of NWProtocolTCP.Options.keepaliveCount.setter();
    OUTLINED_FUNCTION_3_15();
    if (!v10) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    __swift_project_value_buffer(v27, (uint64_t)static Logger.siriNetwork);
    swift_retain();
    char v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v28, v29))
    {
      char v30 = (float *)OUTLINED_FUNCTION_12_0();
      OUTLINED_FUNCTION_11_4(v30, 3.852e-34);
      uint64_t v31 = dispatch thunk of NWProtocolTCP.Options.keepaliveCount.getter();
      OUTLINED_FUNCTION_6_7(v31);
      swift_release();
      OUTLINED_FUNCTION_8_4(&dword_25D6CC000, v28, v32, "Provider - Network setup: keepaliveCount (number of keepalive probes to send before terminating): %ld");
      OUTLINED_FUNCTION_1_2();

      if (v24)
      {
LABEL_26:
        dispatch thunk of NWProtocolTCP.Options.keepaliveIdle.setter();
        swift_retain();
        char v33 = Logger.logObject.getter();
        os_log_type_t v34 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v33, v34))
        {
          char v35 = (float *)OUTLINED_FUNCTION_12_0();
          OUTLINED_FUNCTION_11_4(v35, 3.852e-34);
          uint64_t v36 = dispatch thunk of NWProtocolTCP.Options.keepaliveIdle.getter();
          OUTLINED_FUNCTION_6_7(v36);
          swift_release();
          OUTLINED_FUNCTION_8_4(&dword_25D6CC000, v33, v37, "Provider - Network setup: keepaliveIdle (number of seconds of idleness to wait before keepalive): %ld");
          OUTLINED_FUNCTION_1_2();
        }
        else
        {

          swift_release();
        }
        a2 = v124;
        if ((v115 & 1) == 0) {
          Double.seconds.getter(v25);
        }
        dispatch thunk of NWProtocolTCP.Options.keepaliveInterval.setter();
        swift_retain();
        char v26 = Logger.logObject.getter();
        os_log_type_t v38 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v26, v38))
        {
          uint64_t v39 = (uint8_t *)OUTLINED_FUNCTION_12_0();
          *(_DWORD *)uint64_t v39 = 134217984;
          uint64_t v40 = dispatch thunk of NWProtocolTCP.Options.keepaliveInterval.getter();
          OUTLINED_FUNCTION_10_5(v40);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          _os_log_impl(&dword_25D6CC000, v26, v38, "Provider - Network setup: keepaliveInterval (number of seconds to wait before resending TCP): %ld", v39, 0xCu);
          OUTLINED_FUNCTION_1_2();
        }
        else
        {

          swift_release();
        }
        uint64_t v9 = (void *)&unk_26B36E000;
        goto LABEL_35;
      }
    }
    else
    {

      swift_release();
      if (v24) {
        goto LABEL_26;
      }
    }
    Double.seconds.getter(v23);
    goto LABEL_26;
  }
LABEL_35:
  char v41 = (char)v116;
  if ((v130[33] & 1) == 0)
  {
    double v42 = *(double *)&v130[32];
    OUTLINED_FUNCTION_3_15();
    if (!v10) {
      swift_once();
    }
    uint64_t v43 = type metadata accessor for Logger();
    uint64_t v44 = OUTLINED_FUNCTION_7(v43, (uint64_t)static Logger.siriNetwork);
    os_log_type_t v45 = static os_log_type_t.default.getter();
    if (OUTLINED_FUNCTION_2_17(v45))
    {
      uint64_t v46 = (uint8_t *)OUTLINED_FUNCTION_12_0();
      *(_DWORD *)uint64_t v46 = 134217984;
      uint64_t v47 = Double.seconds.getter(v42);
      OUTLINED_FUNCTION_10_5(v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_25D6CC000, v44, (os_log_type_t)v26, "Provider - Network setup: Connection drop time (timeout for TCP retransmission attempts, in seconds): %ld", v46, 0xCu);
      OUTLINED_FUNCTION_1_2();
    }

    Double.seconds.getter(v42);
    dispatch thunk of NWProtocolTCP.Options.connectionDropTime.setter();
  }
  if (v41)
  {
    uint64_t v48 = v125;
    swift_retain();
  }
  else
  {
    uint64_t v48 = 0;
  }
  swift_retain();
  uint64_t v49 = MEMORY[0x2611B1E80](v48, v22);
  uint64_t v50 = &off_25D790000;
  if (v41 & 1) == 0 || (v130[14])
  {
    swift_retain();
    goto LABEL_47;
  }
  memcpy(v129, v130, sizeof(v129));
  swift_retain();
  ConnectionConfiguration.resolvedHost.getter();
  if (v69)
  {
    uint64_t v70 = v68;
    unint64_t v71 = v69;
    uint64_t v72 = String.utf8CString.getter();
    unint64_t v73 = strdup((const char *)(v72 + 32));
    swift_release();
    if (v73)
    {
      size_t v74 = strlen(v73);
      xpc_object_t v75 = xpc_data_create(v73, v74);
      NWParameters.nw.getter();
      nw_parameters_set_tls_session_id();
      swift_unknownObjectRelease();
      OUTLINED_FUNCTION_3_15();
      if (!v10) {
        swift_once();
      }
      uint64_t v76 = type metadata accessor for Logger();
      __swift_project_value_buffer(v76, (uint64_t)static Logger.siriNetwork);
      swift_bridgeObjectRetain();
      uint64_t v77 = Logger.logObject.getter();
      os_log_type_t v78 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v77, v78))
      {
        uint64_t v79 = OUTLINED_FUNCTION_12_0();
        uint64_t v118 = (uint64_t)v75;
        uint64_t v80 = (uint8_t *)v79;
        *(void *)uint64_t v129 = swift_slowAlloc();
        *(_DWORD *)uint64_t v80 = 136315138;
        uint64_t v116 = v80 + 4;
        swift_bridgeObjectRetain();
        uint64_t v81 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v70, v71, (uint64_t *)v129);
        OUTLINED_FUNCTION_12_4(v81);
        a2 = v124;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_25D6CC000, v77, v78, "Provider - Network setup: session set %s", v80, 0xCu);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_1_2();
        uint64_t v50 = &off_25D790000;
        OUTLINED_FUNCTION_1_2();
        swift_unknownObjectRelease();

        uint64_t v9 = (void *)&unk_26B36E000;
        goto LABEL_47;
      }

      swift_bridgeObjectRelease_n();
      swift_unknownObjectRelease();
      uint64_t v9 = (void *)&unk_26B36E000;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    uint64_t v50 = &off_25D790000;
  }
LABEL_47:
  uint64_t v51 = nw_context_create();
  nw_context_set_scheduling_mode();
  nw_context_set_isolate_protocol_stack();
  nw_context_set_privacy_level();
  nw_context_set_isolate_protocol_cache();
  NWParameters.nw.getter();
  uint64_t v118 = v51;
  nw_parameters_set_context();
  swift_unknownObjectRelease();
  NWParameters.nw.getter();
  nw_parameters_set_data_mode();
  swift_unknownObjectRelease();
  (*(void (**)(char *, void, uint64_t))(v120 + 104))(v119, *MEMORY[0x263F14248], v121);
  NWParameters.serviceClass.setter();
  NWParameters.nw.getter();
  nw_parameters_set_traffic_class();
  swift_unknownObjectRelease();
  if (((AFIsHorseman() | v117) & 1) == 0)
  {
    OUTLINED_FUNCTION_3_15();
    if (!v10) {
      swift_once();
    }
    uint64_t v59 = type metadata accessor for Logger();
    Swift::Int v60 = (void *)OUTLINED_FUNCTION_7(v59, (uint64_t)static Logger.siriNetwork);
    os_log_type_t v61 = static os_log_type_t.default.getter();
    if (OUTLINED_FUNCTION_2_17(v61))
    {
      char v62 = (_WORD *)OUTLINED_FUNCTION_2_0();
      OUTLINED_FUNCTION_5_10(v62);
      OUTLINED_FUNCTION_1_21(&dword_25D6CC000, v63, v64, "Provider - Network setup: Multipath service interactive");
      uint64_t v9 = (void *)&unk_26B36E000;
      OUTLINED_FUNCTION_1_2();
    }

    unint64_t v65 = NWParameters.nw.getter();
    nw_parameters_set_multipath_service(v65, nw_multipath_service_interactive);
    goto LABEL_64;
  }
  if (LOBYTE(v130[12]) == 1 && AFHasCellularData())
  {
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    if ((*(unsigned char *)(static NetworkManager.shared + OBJC_IVAR___SNNetworkManagerInternal_lastSignalStrength + 8) & 1) == 0
      && *(uint64_t *)(static NetworkManager.shared + OBJC_IVAR___SNNetworkManagerInternal_lastSignalStrength) >= 2)
    {
      OUTLINED_FUNCTION_3_15();
      if (!v10) {
        swift_once();
      }
      uint64_t v52 = type metadata accessor for Logger();
      uint64_t v53 = (void *)OUTLINED_FUNCTION_7(v52, (uint64_t)static Logger.siriNetwork);
      os_log_type_t v54 = static os_log_type_t.default.getter();
      if (OUTLINED_FUNCTION_2_17(v54))
      {
        uint64_t v55 = (_WORD *)OUTLINED_FUNCTION_2_0();
        OUTLINED_FUNCTION_5_10(v55);
        OUTLINED_FUNCTION_1_21(&dword_25D6CC000, v56, v57, "Provider - Network setup: Force to use cellular interface");
        uint64_t v9 = (void *)&unk_26B36E000;
        OUTLINED_FUNCTION_1_2();
      }

      uint64_t v58 = NWParameters.nw.getter();
      nw_parameters_set_required_interface_type(v58, nw_interface_type_cellular);
LABEL_64:
      swift_unknownObjectRelease();
    }
  }
  NWParameters.nw.getter();
  nw_parameters_set_indefinite();
  swift_unknownObjectRelease();
  NWParameters.nw.getter();
  nw_parameters_set_tfo();
  swift_unknownObjectRelease();
  if (LOBYTE(v130[14]) != 1)
  {
    outlined release of ConnectionConfiguration(v130);
    goto LABEL_83;
  }
  if (v130[51] == 1 || (unint64_t v66 = v130[53]) == 0)
  {
    uint64_t v67 = v130[6];
    unint64_t v66 = v130[7];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    outlined release of ConnectionConfiguration(v130);
    if (!v66) {
      goto LABEL_83;
    }
  }
  else
  {
    uint64_t v67 = v130[52];
    swift_bridgeObjectRetain();
    outlined release of ConnectionConfiguration(v130);
  }
  OUTLINED_FUNCTION_3_15();
  if (!v10) {
    swift_once();
  }
  uint64_t v82 = type metadata accessor for Logger();
  __swift_project_value_buffer(v82, (uint64_t)static Logger.siriNetwork);
  swift_bridgeObjectRetain_n();
  unint64_t v83 = Logger.logObject.getter();
  os_log_type_t v84 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v83, v84))
  {
    uint64_t v85 = OUTLINED_FUNCTION_12_0();
    uint64_t v122 = v67;
    uint64_t v86 = (_DWORD *)v85;
    *(void *)uint64_t v129 = swift_slowAlloc();
    *uint64_t v86 = *((void *)v50 + 450);
    swift_bridgeObjectRetain();
    uint64_t v87 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v122, v66, (uint64_t *)v129);
    OUTLINED_FUNCTION_12_4(v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    OUTLINED_FUNCTION_8_4(&dword_25D6CC000, v83, v88, "Provider - Network setup: Service proxy enabled for %s");
    swift_arrayDestroy();
    a2 = v124;
    OUTLINED_FUNCTION_1_2();
    uint64_t v67 = v122;
    OUTLINED_FUNCTION_1_2();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  NWParameters.nw.getter();
  NetworkServiceProxyEnableInParameters();
  swift_unknownObjectRelease();
  NWParameters.nw.getter();
  uint64_t v89 = (void *)MEMORY[0x2611B2220](v67, v66);
  swift_bridgeObjectRelease();
  NetworkServiceProxySetServiceNameInParameters();
  swift_unknownObjectRelease();

  uint64_t v9 = &unk_26B36E000;
LABEL_83:
  if (a2)
  {
    uint64_t v90 = v9[96];
    id v91 = a2;
    if (v90 != -1) {
      swift_once();
    }
    uint64_t v92 = type metadata accessor for Logger();
    uint64_t v93 = OUTLINED_FUNCTION_7(v92, (uint64_t)static Logger.siriNetwork);
    os_log_type_t v94 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v93, v94))
    {
      uint64_t v95 = (uint8_t *)OUTLINED_FUNCTION_2_0();
      *(_WORD *)uint64_t v95 = 0;
      _os_log_impl(&dword_25D6CC000, v93, v94, "Provider - Network setup: Connection with initial payload", v95, 2u);
      OUTLINED_FUNCTION_1_2();
    }

    NWParameters.nw.getter();
    nw_parameters_set_initial_data_payload();

    swift_unknownObjectRelease();
  }
  if (v123)
  {
    OUTLINED_FUNCTION_3_15();
    if (!v10) {
      swift_once();
    }
    uint64_t v96 = type metadata accessor for Logger();
    int v97 = (void *)OUTLINED_FUNCTION_7(v96, (uint64_t)static Logger.siriNetwork);
    os_log_type_t v98 = static os_log_type_t.default.getter();
    if (OUTLINED_FUNCTION_2_17(v98))
    {
      int v99 = (_WORD *)OUTLINED_FUNCTION_2_0();
      OUTLINED_FUNCTION_5_10(v99);
      OUTLINED_FUNCTION_1_21(&dword_25D6CC000, v100, v101, "Provider - Network setup: Optimistic DNS enabled");
      OUTLINED_FUNCTION_1_2();
    }

    uint64_t v102 = NWParameters.nw.getter();
    nw_parameters_set_expired_dns_behavior(v102, nw_parameters_expired_dns_behavior_allow);
    swift_unknownObjectRelease();
  }
  memset(v129, 0, 32);
  mach_msg_type_number_t v128 = 8;
  if (!task_info(*MEMORY[0x263EF8960], 0xFu, (task_info_t)v129, &v128))
  {
    NWParameters.nw.getter();
    long long v126 = *(_OWORD *)v129;
    long long v127 = *(_OWORD *)&v129[16];
    nw_parameters_set_source_application();
    swift_unknownObjectRelease();
    OUTLINED_FUNCTION_3_15();
    if (!v10) {
      swift_once();
    }
    uint64_t v110 = type metadata accessor for Logger();
    char v104 = (void *)OUTLINED_FUNCTION_7(v110, (uint64_t)static Logger.siriNetwork);
    os_log_type_t v111 = static os_log_type_t.default.getter();
    if (OUTLINED_FUNCTION_2_17(v111))
    {
      uint64_t v112 = (_WORD *)OUTLINED_FUNCTION_2_0();
      OUTLINED_FUNCTION_5_10(v112);
      int v109 = "Provider - Network setup: Source application assigned (audit_token_t).";
      goto LABEL_104;
    }
LABEL_105:

    swift_release();
    swift_unknownObjectRelease();
    goto LABEL_106;
  }
  OUTLINED_FUNCTION_3_15();
  if (!v10) {
    swift_once();
  }
  uint64_t v103 = type metadata accessor for Logger();
  char v104 = (void *)OUTLINED_FUNCTION_7(v103, (uint64_t)static Logger.siriNetwork);
  os_log_type_t v105 = static os_log_type_t.error.getter();
  if (!OUTLINED_FUNCTION_2_17(v105)) {
    goto LABEL_105;
  }
  uint64_t v106 = (_WORD *)OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_5_10(v106);
  int v109 = "Provider - Network setup: Failed to get audit_token_t for current task.";
LABEL_104:
  OUTLINED_FUNCTION_1_21(&dword_25D6CC000, v107, v108, v109);
  OUTLINED_FUNCTION_1_2();
  swift_release();
  swift_unknownObjectRelease();

LABEL_106:
  swift_release();

  swift_release();
  return v49;
}

void OUTLINED_FUNCTION_1_21(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

BOOL OUTLINED_FUNCTION_2_17(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

_WORD *OUTLINED_FUNCTION_5_10(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_6_7(uint64_t a1)
{
  *(void *)(v1 + 144) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void OUTLINED_FUNCTION_8_4(void *a1, NSObject *a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, a2, v5, a4, v4, 0xCu);
}

uint64_t OUTLINED_FUNCTION_10_5(uint64_t a1)
{
  *(void *)(v1 + 144) = a1;
  return v1 + 144;
}

float *OUTLINED_FUNCTION_11_4(float *result, float a2)
{
  *unint64_t result = a2;
  return result;
}

uint64_t OUTLINED_FUNCTION_12_4(uint64_t a1)
{
  *(void *)(v1 + 96) = a1;
  return v1 + 96;
}

void default argument 1 of OS_dispatch_source.setEventHandler(qos:flags:handler:)()
{
}

uint64_t default argument 2 of OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  uint64_t v2 = *MEMORY[0x263F8EFE0];
  type metadata accessor for DispatchTimeInterval();
  OUTLINED_FUNCTION_0_7();
  os_log_type_t v5 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v4 + 104);

  return v5(a1, v2, v3);
}

uint64_t CommunicationProtocolAce.aceDelegate.getter()
{
  uint64_t result = MEMORY[0x2611B37F0](v0 + 16);
  if (result)
  {
    uint64_t v2 = result;
    swift_getObjectType();
    uint64_t result = dynamic_cast_existential_1_conditional(v2);
    if (!result)
    {
      swift_unknownObjectRelease();
      return 0;
    }
  }
  return result;
}

uint64_t (*CommunicationProtocolAce.bufferedInputData.modify())()
{
  return RPCOspreyConnectionProvider.connectionMetrics.modify;
}

uint64_t (*CommunicationProtocolAce.bufferedGeneralOutputData.modify())()
{
  return RPCOspreyConnectionProvider.connectionMetrics.modify;
}

uint64_t (*CommunicationProtocolAce.bufferedUncompressedData.modify())()
{
  return RPCOspreyConnectionProvider.connectionMetrics.modify;
}

uint64_t (*CommunicationProtocolAce.safetyNetBuffer.modify())()
{
  return static ConnectionConfigurationError.errorDomain.modify;
}

uint64_t CommunicationProtocolAce.__allocating_init(withDelegate:connectionQueue:)()
{
  uint64_t v0 = swift_allocObject();
  CommunicationProtocolAce.init(withDelegate:connectionQueue:)();
  return v0;
}

void CommunicationProtocolAce.init(withDelegate:connectionQueue:)()
{
  OUTLINED_FUNCTION_26_2();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  *(void *)(v0 + 24) = 0;
  swift_unknownObjectWeakInit();
  *(_OWORD *)(v0 + 40) = xmmword_25D7906D0;
  *(_OWORD *)(v0 + 56) = xmmword_25D7906C0;
  *(_OWORD *)(v0 + 72) = xmmword_25D7906D0;
  *(_OWORD *)(v0 + 88) = xmmword_25D7906D0;
  *(_OWORD *)(v0 + 104) = 0u;
  *(_OWORD *)(v0 + 120) = 0u;
  *(_OWORD *)(v0 + 136) = 0u;
  *(_OWORD *)(v0 + 152) = 0u;
  *(_OWORD *)(v0 + 168) = 0u;
  *(_OWORD *)(v0 + 184) = 0u;
  *(void *)(v0 + 200) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
  *(void *)(v0 + 208) = Dictionary.init(dictionaryLiteral:)();
  *(_DWORD *)(v0 + 216) = -100000;
  *(void *)(v0 + 224) = 0;
  *(_DWORD *)(v0 + 232) = 0;
  *(void *)(v0 + 240) = 0;
  *(unsigned char *)(v0 + 248) = 0;
  *(_OWORD *)(v0 + 256) = xmmword_25D7906D0;
  *(_OWORD *)(v0 + 272) = 0u;
  *(_OWORD *)(v0 + 288) = 0u;
  *(_OWORD *)(v0 + 304) = 0u;
  *(void *)(v0 + 320) = 0;
  *(void *)(v0 + 328) = 0xF000000000000000;
  swift_getObjectType();
  if (dynamic_cast_existential_1_conditional(v4))
  {
    uint64_t v6 = *(void *)(v5 + 8);
  }
  else
  {
    swift_unknownObjectRelease();
    uint64_t v6 = 0;
  }
  *(void *)(v0 + 24) = v6;
  swift_unknownObjectWeakAssign();
  swift_unknownObjectRelease();
  *(void *)(v0 + 32) = v2;
  OUTLINED_FUNCTION_16_4();
}

uint64_t CommunicationProtocolAce.deinit()
{
  CommunicationProtocolAce.closeConnection(prepareForReconnect:)(0);
  CommunicationProtocolAce.cancelAceHeaderTimeoutTimer()();
  CommunicationProtocolAce.cancelPingTimer()();
  outlined destroy of weak ConnectionProviderDelegate?(v0 + 16);

  outlined consume of Data?(*(void *)(v0 + 40), *(void *)(v0 + 48));
  outlined consume of Data._Representation(*(void *)(v0 + 56), *(void *)(v0 + 64));
  outlined consume of Data?(*(void *)(v0 + 72), *(void *)(v0 + 80));
  outlined consume of Data?(*(void *)(v0 + 88), *(void *)(v0 + 96));
  outlined destroy of DataCompressing?(v0 + 112, &demangling cache variable for type metadata for DataDecompressing?);
  outlined destroy of DataCompressing?(v0 + 152, &demangling cache variable for type metadata for DataCompressing?);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  outlined consume of Data?(*(void *)(v0 + 256), *(void *)(v0 + 264));
  outlined consume of Data?(*(void *)(v0 + 320), *(void *)(v0 + 328));
  return v0;
}

uint64_t CommunicationProtocolAce.__deallocating_deinit()
{
  CommunicationProtocolAce.deinit();

  return MEMORY[0x270FA0228](v0, 336, 7);
}

uint64_t type metadata accessor for CommunicationProtocolAce()
{
  return self;
}

Swift::Void __swiftcall CommunicationProtocolAce.connectionStarted(fallingBack:)(Swift::Bool fallingBack)
{
  uint64_t v2 = v1;
  if (fallingBack)
  {
    if (one-time initialization token for siriNetwork != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.siriNetwork);
    swift_retain();
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (OUTLINED_FUNCTION_93_0(v5))
    {
      uint64_t v6 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 134218240;
      OUTLINED_FUNCTION_24_2();
      uint64_t v7 = 0;
      if (v2[41] >> 60 != 15)
      {
        uint64_t v8 = OUTLINED_FUNCTION_89();
        outlined copy of Data._Representation(v8, v9);
        OUTLINED_FUNCTION_89();
        uint64_t v7 = Data.count.getter();
        uint64_t v10 = OUTLINED_FUNCTION_89();
        outlined consume of Data?(v10, v11);
      }
      v30[0] = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v6 + 12) = 2048;
      OUTLINED_FUNCTION_24_2();
      uint64_t v12 = 0;
      if (v2[10] >> 60 != 15)
      {
        uint64_t v13 = OUTLINED_FUNCTION_29_3();
        outlined copy of Data._Representation(v13, v14);
        OUTLINED_FUNCTION_29_3();
        uint64_t v12 = Data.count.getter();
        uint64_t v15 = OUTLINED_FUNCTION_29_3();
        outlined consume of Data?(v15, v16);
      }
      v30[0] = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl(&dword_25D6CC000, v4, v5, "CommunicationProtocol - Ace: safety net has %ld bytes, output buffer has %ld bytes", (uint8_t *)v6, 0x16u);
      OUTLINED_FUNCTION_1_2();
    }
    else
    {

      swift_release();
    }
    OUTLINED_FUNCTION_128();
    unint64_t v17 = v2[10];
    if (v17 >> 60 != 15 && !specialized Collection.isEmpty.getter(v2[9], v17))
    {
      OUTLINED_FUNCTION_24_2();
      OUTLINED_FUNCTION_22_2();
      if (!(!v19 & v18))
      {
        uint64_t v20 = CommunicationProtocolAce.safetyNetBuffer.modify();
        OUTLINED_FUNCTION_22_2();
        if (!(!v19 & v18))
        {
          OUTLINED_FUNCTION_24_2();
          unint64_t v21 = v2[10];
          if (v21 >> 60 == 15) {
            uint64_t v22 = 0;
          }
          else {
            uint64_t v22 = v2[9];
          }
          if (v21 >> 60 == 15) {
            unint64_t v23 = 0xC000000000000000;
          }
          else {
            unint64_t v23 = v2[10];
          }
          outlined copy of Data?(v2[9], v21);
          Data.append(_:)();
          outlined consume of Data._Representation(v22, v23);
        }
        ((void (*)(uint64_t *, void))v20)(v30, 0);
      }
    }
    OUTLINED_FUNCTION_24_2();
    unint64_t v24 = v2[41];
    if (v24 >> 60 == 15 || (uint64_t v25 = v2[40], specialized Collection.isEmpty.getter(v25, v2[41])))
    {
      uint64_t v25 = 0;
      unint64_t v24 = 0xF000000000000000;
    }
    else
    {
      outlined copy of Data._Representation(v25, v24);
    }
    uint64_t v26 = v2[9];
    unint64_t v27 = v2[10];
    v2[9] = v25;
    v2[10] = v24;
    outlined consume of Data?(v26, v27);
  }
  OUTLINED_FUNCTION_128();
  uint64_t v28 = v2[40];
  unint64_t v29 = v2[41];
  *((_OWORD *)v2 + 20) = xmmword_25D7906C0;
  outlined consume of Data?(v28, v29);
}

uint64_t CommunicationProtocolAce.initialPayload(withBufferedInitialLength:forceReconnect:)(uint64_t *a1)
{
  long long v25 = xmmword_25D7906D0;
  if (!CommunicationProtocolAce.aceDelegate.getter()) {
    return 0;
  }
  if (BackgroundConnection.isUsingPop()())
  {
    long long v25 = xmmword_25D7906C0;
    OUTLINED_FUNCTION_24_2();
    if (*(void *)(v1 + 80) >> 60 == 15)
    {
      CommunicationProtocolAce.httpHeaderData()();
      if (v4 >> 60 == 15) {
        uint64_t v5 = 0;
      }
      else {
        uint64_t v5 = v3;
      }
      if (v4 >> 60 == 15) {
        unint64_t v6 = 0xC000000000000000;
      }
      else {
        unint64_t v6 = v4;
      }
      Data.append(_:)();
      outlined consume of Data._Representation(v5, v6);
      OUTLINED_FUNCTION_22_2();
      if (!v8 & v7) {
        goto LABEL_16;
      }
      if (one-time initialization token for aceHeaderMagic != -1) {
        swift_once();
      }
      static AceStreamHeader.createAceStreamHeaderData(withMagic:compressionType:)(static AceSerialization.aceHeaderMagic, 1);
      OUTLINED_FUNCTION_108_0();
      Data.append(_:)();
      outlined consume of Data._Representation(v5, v6);
    }
    else
    {
      uint64_t v9 = OUTLINED_FUNCTION_81();
      outlined copy of Data._Representation(v9, v10);
      OUTLINED_FUNCTION_81();
      Data.append(_:)();
      OUTLINED_FUNCTION_81();
      uint64_t v11 = Data.count.getter();
      uint64_t v12 = OUTLINED_FUNCTION_81();
      outlined consume of Data?(v12, v13);
      *a1 = v11;
    }
  }
  if (*((void *)&v25 + 1) >> 60 == 15)
  {
LABEL_16:
    swift_unknownObjectRelease();
    return 0;
  }
  switch(*((void *)&v25 + 1) >> 62)
  {
    case 1:
      if ((uint64_t)v25 >> 32 < (int)v25)
      {
        __break(1u);
        JUMPOUT(0x25D729118);
      }
      uint64_t v18 = OUTLINED_FUNCTION_80_0();
      outlined copy of Data._Representation(v18, v19);
      swift_retain();
      uint64_t v14 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v25, (uint64_t)v25 >> 32);
      outlined consume of Data?(v25, *((unint64_t *)&v25 + 1));
      break;
    case 2:
      uint64_t v20 = *(void *)(v25 + 16);
      uint64_t v21 = *(void *)(v25 + 24);
      uint64_t v22 = OUTLINED_FUNCTION_80_0();
      outlined copy of Data?(v22, v23);
      swift_retain();
      swift_retain();
      uint64_t v14 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v20, v21);
      swift_release();
      swift_release();
      break;
    case 3:
      unint64_t v17 = OUTLINED_FUNCTION_41_1();
      goto LABEL_24;
    default:
      uint64_t v15 = BYTE14(v25);
      unint64_t v16 = *((void *)&v25 + 1) & 0xFFFFFFFFFFFFLL;
      unint64_t v17 = v25;
LABEL_24:
      uint64_t v14 = _ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_A13Et_sAC_pSo16OS_dispatch_dataCTg5037_s10Foundation4DataV06InlineB0V15withb29BytesyxxSWKXEKlFxSWKXEfU_So16g1_h1_I5C_TG5SWxsAC_pRi_zRi0_zlyAGIsgyrzo_SiTf1nc_n0101_s11SiriNetwork24CommunicationProtocolAceC14initialPayload25withBufferedInitialLength14forceReconnectug1_h1_I20CSgSiz_SbtFAHSWXEfU_Tf1ncn_n(v17, v16, v15);
      break;
  }
  outlined consume of Data?(v25, *((unint64_t *)&v25 + 1));
  swift_unknownObjectRelease();
  outlined consume of Data?(v25, *((unint64_t *)&v25 + 1));
  return v14;
}

void CommunicationProtocolAce.updateBuffers(forInitialPayload:bufferedLength:forceReconnect:)()
{
  OUTLINED_FUNCTION_22();
  uint64_t v3 = v0;
  char v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DispatchData?);
  MEMORY[0x270FA5388](v10 - 8);
  OUTLINED_FUNCTION_73_0();
  *(void *)(v0 + 104) = CFHTTPMessageCreateEmpty(0, 0);
  if (v9)
  {
    static DispatchData._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = type metadata accessor for DispatchData();
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t v11 = type metadata accessor for DispatchData();
    uint64_t v12 = 1;
  }
  __swift_storeEnumTagSinglePayload(v0, v12, 1, v11);
  Data.init(copying:)(v0);
  OUTLINED_FUNCTION_108_0();
  if (v13 >> 60 == 15)
  {
    if (one-time initialization token for siriNetwork != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    uint64_t v15 = OUTLINED_FUNCTION_7(v14, (uint64_t)static Logger.siriNetwork);
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (OUTLINED_FUNCTION_24_0(v16))
    {
      unint64_t v17 = (uint8_t *)OUTLINED_FUNCTION_2_0();
      *(_WORD *)unint64_t v17 = 0;
      _os_log_impl(&dword_25D6CC000, v15, v2, "CommunicationProtocol - Ace: No initial payload", v17, 2u);
      OUTLINED_FUNCTION_1_2();
    }

    CommunicationProtocolAce.prepareProviderHeader(withForceReconnect:)(v5 & 1);
    BOOL v18 = 0;
  }
  else
  {
    outlined copy of Data._Representation(v9, v1);
    if (one-time initialization token for siriNetwork != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.siriNetwork);
    uint64_t v20 = OUTLINED_FUNCTION_74_0();
    outlined copy of Data?(v20, v21);
    swift_retain();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    if (OUTLINED_FUNCTION_93_0(v23))
    {
      uint64_t v40 = v7;
      uint64_t v24 = swift_slowAlloc();
      *(_DWORD *)uint64_t v24 = 134218240;
      OUTLINED_FUNCTION_74_0();
      uint64_t v41 = Data.count.getter();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_33_4();
      *(_WORD *)(v24 + 12) = 2048;
      OUTLINED_FUNCTION_24_2();
      uint64_t v25 = 0;
      unint64_t v26 = *(void *)(v3 + 80);
      if (v26 >> 60 != 15)
      {
        uint64_t v27 = *(void *)(v3 + 72);
        outlined copy of Data._Representation(v27, *(void *)(v3 + 80));
        uint64_t v25 = Data.count.getter();
        outlined consume of Data?(v27, v26);
      }
      uint64_t v41 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl(&dword_25D6CC000, v22, v23, "CommunicationProtocol - Ace: Stream opened with initial payload length %ld, buffered general output length %ld", (uint8_t *)v24, 0x16u);
      OUTLINED_FUNCTION_1_2();

      uint64_t v7 = v40;
    }
    else
    {
      OUTLINED_FUNCTION_33_4();

      swift_release();
    }
    OUTLINED_FUNCTION_24_2();
    OUTLINED_FUNCTION_22_2();
    if (!(!v29 & v28))
    {
      char v30 = CommunicationProtocolAce.safetyNetBuffer.modify();
      OUTLINED_FUNCTION_22_2();
      if (!(!v29 & v28)) {
        Data.append(_:)();
      }
      ((void (*)(uint64_t *, void))v30)(&v41, 0);
    }
    OUTLINED_FUNCTION_128();
    uint64_t v31 = *(void *)(v3 + 72);
    unint64_t v32 = *(void *)(v3 + 80);
    if (v32 >> 60 == 15)
    {
      OUTLINED_FUNCTION_33_4();
    }
    else
    {
      outlined copy of Data._Representation(*(void *)(v3 + 72), *(void *)(v3 + 80));
      uint64_t v33 = Data.truncateBeginning(removeSize:)(v7, v31, v32);
      unint64_t v35 = v34;
      OUTLINED_FUNCTION_33_4();
      outlined consume of Data?(v31, v32);
      uint64_t v31 = v33;
      unint64_t v32 = v35;
    }
    uint64_t v36 = *(void *)(v3 + 72);
    unint64_t v37 = *(void *)(v3 + 80);
    *(void *)(v3 + 72) = v31;
    *(void *)(v3 + 80) = v32;
    outlined consume of Data?(v36, v37);
    uint64_t v38 = OUTLINED_FUNCTION_74_0();
    BOOL v18 = !specialized Collection.isEmpty.getter(v38, v39);
  }
  CommunicationProtocolAce.initializeBufferedGeneralOutputData(hasInitialPayload:)(v18);
  OUTLINED_FUNCTION_33_4();
  OUTLINED_FUNCTION_29();
}

uint64_t CommunicationProtocolAce.bufferGeneralData(data:)(uint64_t a1, uint64_t a2)
{
  return CommunicationProtocolAce.bufferGeneralData(data:)(a1, a2, (uint64_t (*)(unsigned char *))CommunicationProtocolAce.bufferedGeneralOutputData.modify);
}

uint64_t CommunicationProtocolAce.bufferUncompressedData(data:)(uint64_t a1, uint64_t a2)
{
  return CommunicationProtocolAce.bufferGeneralData(data:)(a1, a2, (uint64_t (*)(unsigned char *))CommunicationProtocolAce.bufferedUncompressedData.modify);
}

uint64_t CommunicationProtocolAce.bufferGeneralData(data:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(unsigned char *))
{
  uint64_t v3 = (uint64_t (*)(unsigned char *, void))a3(v7);
  OUTLINED_FUNCTION_22_2();
  if (!(!v5 & v4))
  {
    OUTLINED_FUNCTION_82_0();
    Data.append(_:)();
  }
  return v3(v7, 0);
}

uint64_t CommunicationProtocolAce.getBufferedUncompressedDataToWrite()()
{
  OUTLINED_FUNCTION_128();
  unint64_t v1 = *(void *)(v0 + 96);
  OUTLINED_FUNCTION_45_1();
  if (!v3 & v2) {
    return 0;
  }
  uint64_t v4 = *(void *)(v0 + 88);
  switch(v1 >> 62)
  {
    case 1uLL:
      uint64_t v7 = (int)v4;
      uint64_t v8 = v4 >> 32;
      goto LABEL_7;
    case 2uLL:
      uint64_t v7 = *(void *)(v4 + 16);
      uint64_t v8 = *(void *)(v4 + 24);
LABEL_7:
      if (v7 == v8) {
        return 0;
      }
      outlined copy of Data._Representation(*(void *)(v0 + 88), v1);
      uint64_t v6 = *(void *)(v0 + 88);
      unint64_t v5 = *(void *)(v0 + 96);
      goto LABEL_10;
    case 3uLL:
      goto LABEL_4;
    default:
      unint64_t v5 = v1;
      uint64_t v6 = *(void *)(v0 + 88);
      if ((v1 & 0xFF000000000000) == 0)
      {
LABEL_4:
        OUTLINED_FUNCTION_9_1();
        return 0;
      }
LABEL_10:
      *(_OWORD *)(v0 + 88) = xmmword_25D7906C0;
      outlined consume of Data?(v6, v5);
      break;
  }
  return v4;
}

uint64_t CommunicationProtocolAce.getBufferedOutputDataToWrite()()
{
  unint64_t v1 = v0;
  OUTLINED_FUNCTION_128();
  uint64_t v3 = v0[7];
  unint64_t v2 = v0[8];
  switch(v2 >> 62)
  {
    case 1uLL:
      uint64_t v5 = (int)v3;
      uint64_t v6 = v3 >> 32;
      goto LABEL_6;
    case 2uLL:
      uint64_t v5 = *(void *)(v3 + 16);
      uint64_t v6 = *(void *)(v3 + 24);
LABEL_6:
      if (v5 == v6) {
        goto LABEL_7;
      }
      goto LABEL_3;
    case 3uLL:
      goto LABEL_7;
    default:
      if ((v2 & 0xFF000000000000) != 0)
      {
LABEL_3:
        OUTLINED_FUNCTION_101();
        OUTLINED_FUNCTION_101();
        char v4 = 0;
      }
      else
      {
LABEL_7:
        OUTLINED_FUNCTION_24_2();
        unint64_t v2 = v0[10];
        OUTLINED_FUNCTION_45_1();
        if (!v8 & v7) {
          return OUTLINED_FUNCTION_100();
        }
        uint64_t v3 = v0[9];
        OUTLINED_FUNCTION_101();
        OUTLINED_FUNCTION_101();
        char v4 = 1;
      }
      uint64_t v9 = OUTLINED_FUNCTION_100();
      if (specialized Collection.isEmpty.getter(v9, v10))
      {
        outlined consume of Data?(v3, v2);
        uint64_t v11 = OUTLINED_FUNCTION_100();
        outlined consume of Data._Representation(v11, v12);
      }
      else if (v4)
      {
        outlined consume of Data?(v3, v2);
        OUTLINED_FUNCTION_128();
        uint64_t v13 = v1[9];
        unint64_t v14 = v1[10];
        *(_OWORD *)(v1 + 9) = xmmword_25D7906C0;
        outlined consume of Data?(v13, v14);
      }
      else
      {
        OUTLINED_FUNCTION_24_2();
        OUTLINED_FUNCTION_22_2();
        if (!(!v8 & v7))
        {
          uint64_t v15 = CommunicationProtocolAce.safetyNetBuffer.modify();
          OUTLINED_FUNCTION_22_2();
          if (!(!v8 & v7))
          {
            OUTLINED_FUNCTION_100();
            Data.append(_:)();
          }
          ((void (*)(unsigned char *, void))v15)(v19, 0);
        }
        outlined consume of Data?(v3, v2);
        uint64_t v16 = v1[7];
        unint64_t v17 = v1[8];
        *(_OWORD *)(v1 + 7) = xmmword_25D7906C0;
        outlined consume of Data._Representation(v16, v17);
      }
      return OUTLINED_FUNCTION_100();
  }
}

Swift::Void __swiftcall CommunicationProtocolAce.closeConnection(prepareForReconnect:)(Swift::Bool prepareForReconnect)
{
  OUTLINED_FUNCTION_128();
  uint64_t v3 = v1[5];
  unint64_t v4 = v1[6];
  *(_OWORD *)(v1 + 5) = xmmword_25D7906D0;
  outlined consume of Data?(v3, v4);
  OUTLINED_FUNCTION_28_3();
  OUTLINED_FUNCTION_9_6();
  outlined assign with take of DataCompressing?((uint64_t)v10, (uint64_t)(v1 + 14), &demangling cache variable for type metadata for DataDecompressing?);
  swift_endAccess();
  if (!prepareForReconnect)
  {
    OUTLINED_FUNCTION_128();
    uint64_t v5 = v1[9];
    unint64_t v6 = v1[10];
    *(_OWORD *)(v1 + 9) = xmmword_25D7906D0;
    outlined consume of Data?(v5, v6);
    OUTLINED_FUNCTION_28_3();
    OUTLINED_FUNCTION_9_6();
    outlined assign with take of DataCompressing?((uint64_t)v10, (uint64_t)(v1 + 19), &demangling cache variable for type metadata for DataCompressing?);
    swift_endAccess();
    OUTLINED_FUNCTION_128();
    uint64_t v7 = v1[11];
    unint64_t v8 = v1[12];
    *(_OWORD *)(v1 + 11) = xmmword_25D7906D0;
    outlined consume of Data?(v7, v8);
    CommunicationProtocolAce.cancelOutstandingBarriers()();
  }
  uint64_t v9 = (void *)v1[13];
  if (v9)
  {

    v1[13] = 0;
  }
}

Swift::Void __swiftcall CommunicationProtocolAce.setSendPings(_:)(Swift::Bool a1)
{
  uint64_t v3 = CommunicationProtocolAce.aceDelegate.getter();
  if (v3)
  {
    *(unsigned char *)(v1 + 248) = a1;
    if (a1)
    {
      if (*(unsigned char *)(v3 + 1185) == 1 && !*(void *)(v1 + 224)) {
        CommunicationProtocolAce.resumePingTimer()();
      }
    }
    else if (*(void *)(v1 + 224))
    {
      if (one-time initialization token for siriNetwork != -1) {
        swift_once();
      }
      uint64_t v4 = type metadata accessor for Logger();
      uint64_t v5 = (void *)OUTLINED_FUNCTION_7(v4, (uint64_t)static Logger.siriNetwork);
      os_log_type_t v6 = static os_log_type_t.default.getter();
      if (OUTLINED_FUNCTION_9(v6))
      {
        uint64_t v7 = (_WORD *)OUTLINED_FUNCTION_2_0();
        OUTLINED_FUNCTION_55_0(v7);
        OUTLINED_FUNCTION_3_0(&dword_25D6CC000, v8, v9, "CommunicationProtocol - Ace pings: Stop sending pings");
        OUTLINED_FUNCTION_1_2();
      }

      CommunicationProtocolAce.cancelPingTimer()();
    }
    swift_unknownObjectRelease();
  }
}

Swift::Void __swiftcall CommunicationProtocolAce.resumePingTimer()()
{
  OUTLINED_FUNCTION_22();
  uint64_t v1 = type metadata accessor for DispatchTime();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_32_2(v5, v72);
  uint64_t v7 = MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_106_0(v7, v8, v9, v10, v11, v12, v13, v14, v72);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for DispatchTimeInterval?);
  MEMORY[0x270FA5388](v15 - 8);
  OUTLINED_FUNCTION_5_5();
  uint64_t v79 = v16;
  OUTLINED_FUNCTION_13_2();
  MEMORY[0x270FA5388](v17);
  uint64_t v82 = (uint64_t)&v72 - v18;
  uint64_t v86 = type metadata accessor for DispatchTimeInterval();
  OUTLINED_FUNCTION_0_0();
  uint64_t v83 = v19;
  MEMORY[0x270FA5388](v20);
  OUTLINED_FUNCTION_5_5();
  uint64_t v78 = v21;
  OUTLINED_FUNCTION_13_2();
  MEMORY[0x270FA5388](v22);
  uint64_t v87 = (uint64_t *)((char *)&v72 - v23);
  OUTLINED_FUNCTION_13_2();
  MEMORY[0x270FA5388](v24);
  uint64_t v88 = (char *)&v72 - v25;
  OUTLINED_FUNCTION_13_2();
  MEMORY[0x270FA5388](v26);
  uint64_t v89 = (uint64_t *)((char *)&v72 - v27);
  type metadata accessor for DispatchWorkItemFlags();
  OUTLINED_FUNCTION_0_0();
  uint64_t v81 = v28;
  MEMORY[0x270FA5388](v29);
  OUTLINED_FUNCTION_51_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v80 = v30;
  MEMORY[0x270FA5388](v31);
  OUTLINED_FUNCTION_0_1();
  uint64_t v32 = type metadata accessor for OS_dispatch_source.TimerFlags();
  OUTLINED_FUNCTION_0_0();
  uint64_t v34 = v33;
  MEMORY[0x270FA5388](v35);
  OUTLINED_FUNCTION_0_1();
  uint64_t v38 = v37 - v36;
  if (*(unsigned char *)(v0 + 248) == 1 && !*(void *)(v0 + 224))
  {
    uint64_t v75 = v3;
    uint64_t v76 = v1;
    *(void *)(v0 + 240) = 0;
    swift_release();
    uint64_t v74 = type metadata accessor for CTServiceDescriptor(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_source);
    v91[0] = MEMORY[0x263F8EE78];
    lazy protocol witness table accessor for type OS_dispatch_source.TimerFlags and conformance OS_dispatch_source.TimerFlags((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_source.TimerFlags and conformance OS_dispatch_source.TimerFlags, MEMORY[0x263F8F148]);
    uint64_t v77 = v0;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_source.TimerFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_source.TimerFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_source.TimerFlags]);
    uint64_t v39 = v77;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    id v40 = *(id *)(v39 + 32);
    OUTLINED_FUNCTION_80_0();
    uint64_t v41 = static OS_dispatch_source.makeTimerSource(flags:queue:)();

    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v38, v32);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v43 = swift_allocObject();
    swift_weakInit();
    v91[4] = partial apply for closure #1 in CommunicationProtocolAce.resumePingTimer();
    v91[5] = v43;
    v91[0] = MEMORY[0x263EF8330];
    v91[1] = 1107296256;
    v91[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v91[3] = &block_descriptor_101_0;
    uint64_t v44 = _Block_copy(v91);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    default argument 1 of OS_dispatch_source.setEventHandler(qos:flags:handler:)();
    uint64_t v73 = ObjectType;
    uint64_t v74 = v41;
    OS_dispatch_source.setEventHandler(qos:flags:handler:)();
    _Block_release(v44);
    OUTLINED_FUNCTION_29_3();
    OUTLINED_FUNCTION_12_2();
    v45();
    OUTLINED_FUNCTION_12_2();
    v46();
    swift_release();
    swift_release();
    uint64_t v47 = v89;
    Double.dispatchTimeInterval.getter(v89, 1.0);
    if (one-time initialization token for siriNetwork != -1) {
      swift_once();
    }
    uint64_t v48 = type metadata accessor for Logger();
    __swift_project_value_buffer(v48, (uint64_t)static Logger.siriNetwork);
    uint64_t v49 = v83;
    uint64_t v50 = *(void (**)(void))(v83 + 16);
    uint64_t v51 = v88;
    uint64_t v52 = v86;
    OUTLINED_FUNCTION_69_0();
    v50();
    uint64_t v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.default.getter();
    if (OUTLINED_FUNCTION_93_0(v54))
    {
      uint64_t v55 = (uint8_t *)OUTLINED_FUNCTION_12_0();
      v91[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v55 = 136315138;
      uint64_t v56 = v82;
      OUTLINED_FUNCTION_69_0();
      v50();
      __swift_storeEnumTagSinglePayload(v56, 0, 1, v52);
      uint64_t v57 = v79;
      outlined init with copy of DataCompressing?(v56, v79, (uint64_t *)&demangling cache variable for type metadata for DispatchTimeInterval?);
      if (__swift_getEnumTagSinglePayload(v57, 1, v52) != 1)
      {
        uint64_t v59 = v87;
        (*(void (**)(void *, uint64_t, uint64_t))(v49 + 32))(v87, v57, v52);
        OUTLINED_FUNCTION_69_0();
        v50();
        String.init<A>(describing:)();
        (*(void (**)(void *, uint64_t))(v49 + 8))(v59, v52);
      }
      outlined destroy of DataCompressing?(v82, (uint64_t *)&demangling cache variable for type metadata for DispatchTimeInterval?);
      uint64_t v60 = OUTLINED_FUNCTION_82_0();
      uint64_t v90 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, v61, v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v58 = *(void (**)(char *, uint64_t))(v49 + 8);
      v58(v88, v52);
      _os_log_impl(&dword_25D6CC000, v53, v54, "CommunicationProtocol - Ace pings: Start sending pings with interval %s", v55, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_1_2();
      OUTLINED_FUNCTION_1_2();

      uint64_t v47 = v89;
    }
    else
    {
      uint64_t v58 = *(void (**)(char *, uint64_t))(v49 + 8);
      v58(v51, v52);
    }
    uint64_t v63 = v84;
    static DispatchTime.now()();
    uint64_t v64 = v85;
    DispatchTime.advanced(by:)();
    unint64_t v65 = *(void (**)(uint64_t, uint64_t))(v75 + 8);
    uint64_t v66 = v76;
    v65(v63, v76);
    uint64_t v67 = (char *)v87;
    uint64_t v68 = v73;
    default argument 2 of OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v87);
    uint64_t v69 = v68;
    uint64_t v70 = v74;
    MEMORY[0x2611B2570](v64, v47, v67, v69);
    v58(v67, v52);
    v65(v64, v66);
    uint64_t v71 = v77;
    *(void *)(v77 + 224) = v70;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    if (*(void *)(v71 + 224))
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      OS_dispatch_source.resume()();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v58((char *)v47, v52);
    }
    else
    {
      v58((char *)v47, v52);
      swift_unknownObjectRelease();
    }
  }
  OUTLINED_FUNCTION_29();
}

uint64_t closure #1 in CommunicationProtocolAce.resumePingTimer()()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    CommunicationProtocolAce.pingTimerFired()();
    return swift_release();
  }
  return result;
}

void CommunicationProtocolAce.bytesAvailable(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_128();
  unint64_t v6 = v2[41];
  if (v6 >> 60 != 15)
  {
    uint64_t v7 = v2[40];
    *((_OWORD *)v2 + 20) = xmmword_25D7906D0;
    outlined consume of Data?(v7, v6);
    if (CommunicationProtocolAce.aceDelegate.getter())
    {
      BackgroundConnection.updateFirstByteReadTime()();
      swift_unknownObjectRelease();
    }
  }
  uint64_t v8 = (uint64_t)(v2 + 14);
  OUTLINED_FUNCTION_24_2();
  outlined init with copy of DataCompressing?((uint64_t)(v2 + 14), (uint64_t)v76, &demangling cache variable for type metadata for DataDecompressing?);
  if (!v77)
  {
    outlined destroy of DataCompressing?((uint64_t)v76, &demangling cache variable for type metadata for DataDecompressing?);
    uint64_t v44 = 0;
    unint64_t v46 = 0xF000000000000000;
LABEL_7:
    uint64_t v11 = OUTLINED_FUNCTION_66_0();
    outlined copy of Data._Representation(v11, v12);
    outlined consume of Data?(v44, v46);
    uint64_t v44 = a1;
    unint64_t v46 = a2;
    goto LABEL_8;
  }
  outlined init with copy of RPCOspreyConnectionProtocol((uint64_t)v76, (uint64_t)v72);
  outlined destroy of DataCompressing?((uint64_t)v76, &demangling cache variable for type metadata for DataDecompressing?);
  __swift_project_boxed_opaque_existential_1(v72, v73);
  uint64_t v9 = OUTLINED_FUNCTION_66_0();
  uint64_t v44 = v10(v9);
  unint64_t v46 = v45;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v72);
  if (v46 >> 60 == 15) {
    goto LABEL_7;
  }
LABEL_8:
  uint64_t v13 = v2 + 5;
  OUTLINED_FUNCTION_128();
  unint64_t v14 = v2[6];
  if (v14 >> 60 == 15)
  {
    uint64_t v15 = v3[5];
    v3[5] = v44;
    v3[6] = v46;
    outlined copy of Data._Representation(v44, v46);
    outlined consume of Data?(v15, v14);
  }
  else
  {
    uint64_t v16 = CommunicationProtocolAce.bufferedInputData.modify();
    OUTLINED_FUNCTION_22_2();
    if (!(!v18 & v17)) {
      Data.append(_:)();
    }
    ((void (*)(void *, void))v16)(v76, 0);
  }
  unint64_t v19 = v3[6];
  if (v19 >> 60 != 15)
  {
    v75[0] = *v13;
    v75[1] = v19;
    outlined copy of Data._Representation(v75[0], v19);
    if (one-time initialization token for siriNetwork != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.siriNetwork);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v26))
    {
      *(_DWORD *)OUTLINED_FUNCTION_12_0() = 134217984;
      OUTLINED_FUNCTION_109_0();
      uint64_t v27 = Data.count.getter();
      swift_endAccess();
      v76[0] = v27;
      OUTLINED_FUNCTION_84_0();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_104_0();
      _os_log_impl(v28, v29, v30, v31, v32, v33);
      uint64_t v8 = (uint64_t)(v3 + 14);
      OUTLINED_FUNCTION_1_2();
    }

    if (v3[13])
    {
      OUTLINED_FUNCTION_9_6();
      CFStringRef v34 = CommunicationProtocolAce.consumeHttpHeader(withData:)(v75);
      swift_endAccess();
      uint64_t v35 = v8;
      uint64_t v36 = Logger.logObject.getter();
      os_log_type_t v37 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v36, v37))
      {
        *(_DWORD *)OUTLINED_FUNCTION_12_0() = 134217984;
        v76[0] = v34;
        OUTLINED_FUNCTION_42_1();
        OUTLINED_FUNCTION_79_0(&dword_25D6CC000, v36, v37, "CommunicationProtocol - Ace bytes available (!hasReadHttpHeader): Consumed %ld bytes");
        OUTLINED_FUNCTION_1_2();
      }

      uint64_t v8 = v35;
    }
    outlined init with copy of DataCompressing?(v8, (uint64_t)v76, &demangling cache variable for type metadata for DataDecompressing?);
    uint64_t v38 = v77;
    outlined destroy of DataCompressing?((uint64_t)v76, &demangling cache variable for type metadata for DataDecompressing?);
    if (!v38)
    {
      OUTLINED_FUNCTION_9_6();
      uint64_t v47 = CommunicationProtocolAce.consumeAceHeader(withData:)(v75);
      swift_endAccess();
      uint64_t v71 = v8;
      uint64_t v50 = Logger.logObject.getter();
      os_log_type_t v51 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v50, v51))
      {
        *(_DWORD *)OUTLINED_FUNCTION_12_0() = 134217984;
        v76[0] = v47;
        OUTLINED_FUNCTION_42_1();
        OUTLINED_FUNCTION_79_0(&dword_25D6CC000, v50, v51, "CommunicationProtocol - Ace bytes available (!hasReadAceHeader): Consumed %ld bytes");
        OUTLINED_FUNCTION_1_2();
      }

      uint64_t v8 = v71;
      outlined init with copy of DataCompressing?(v71, (uint64_t)v76, &demangling cache variable for type metadata for DataDecompressing?);
      if (v77)
      {
        outlined init with copy of RPCOspreyConnectionProtocol((uint64_t)v76, (uint64_t)v72);
        outlined destroy of DataCompressing?((uint64_t)v76, &demangling cache variable for type metadata for DataDecompressing?);
        uint64_t v53 = v73;
        uint64_t v54 = v74;
        __swift_project_boxed_opaque_existential_1(v72, v73);
        unint64_t v55 = v75[1];
        uint64_t v56 = v75[0];
        os_log_type_t v57 = v54 + 16;
        uint64_t v58 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v54 + 16);
        outlined copy of Data._Representation(v75[0], v75[1]);
        uint64_t v59 = v58(v56, v55, v53, v54);
        unint64_t v61 = v60;
        unint64_t v62 = v55;
        uint64_t v8 = v71;
        outlined consume of Data._Representation(v56, v62);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v72);
        if (v61 >> 60 != 15)
        {
          uint64_t v63 = Logger.logObject.getter();
          os_log_type_t v64 = static os_log_type_t.default.getter();
          if (OUTLINED_FUNCTION_24_0(v64))
          {
            unint64_t v65 = (uint8_t *)OUTLINED_FUNCTION_12_0();
            *(_DWORD *)unint64_t v65 = 134217984;
            OUTLINED_FUNCTION_109_0();
            uint64_t v66 = Data.count.getter();
            swift_endAccess();
            v76[0] = v66;
            uint64_t v8 = v71;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl(&dword_25D6CC000, v63, v57, "CommunicationProtocol - Ace bytes available: Still have %ld after Ace Header, decompressing", v65, 0xCu);
            OUTLINED_FUNCTION_1_2();
          }

          long long v67 = *(_OWORD *)v75;
          v75[0] = v59;
          v75[1] = v61;
          outlined copy of Data._Representation(v59, v61);
          outlined consume of Data._Representation(v67, *((unint64_t *)&v67 + 1));
          outlined copy of Data._Representation(v59, v61);
          uint64_t v68 = Logger.logObject.getter();
          os_log_type_t v69 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v68, v69))
          {
            uint64_t v70 = (uint8_t *)OUTLINED_FUNCTION_12_0();
            *(_DWORD *)uint64_t v70 = 134217984;
            v76[0] = Data.count.getter();
            OUTLINED_FUNCTION_84_0();
            uint64_t v8 = v71;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            OUTLINED_FUNCTION_92_0();
            _os_log_impl(&dword_25D6CC000, v68, v69, "CommunicationProtocol - Ace bytes available: Decompressed %ld bytes", v70, 0xCu);
            OUTLINED_FUNCTION_1_2();

            OUTLINED_FUNCTION_92_0();
          }
          else
          {
            OUTLINED_FUNCTION_92_0();
            OUTLINED_FUNCTION_92_0();
          }
        }
      }
      else
      {
        outlined destroy of DataCompressing?((uint64_t)v76, &demangling cache variable for type metadata for DataDecompressing?);
      }
    }
    outlined init with copy of DataCompressing?(v8, (uint64_t)v76, &demangling cache variable for type metadata for DataDecompressing?);
    uint64_t v39 = v77;
    outlined destroy of DataCompressing?((uint64_t)v76, &demangling cache variable for type metadata for DataDecompressing?);
    if (v39)
    {
      OUTLINED_FUNCTION_9_6();
      id v40 = CommunicationProtocolAce.consumeAceData(withData:)(v75);
      swift_endAccess();
      uint64_t v41 = Logger.logObject.getter();
      os_log_type_t v42 = static os_log_type_t.default.getter();
      if (!OUTLINED_FUNCTION_2_17(v42))
      {
        OUTLINED_FUNCTION_48_1();

        goto LABEL_35;
      }
      uint64_t v43 = (uint8_t *)OUTLINED_FUNCTION_12_0();
      *(_DWORD *)uint64_t v43 = 134217984;
      v76[0] = v40;
      OUTLINED_FUNCTION_42_1();
      _os_log_impl(&dword_25D6CC000, v41, OS_LOG_TYPE_DEFAULT, "CommunicationProtocol - Ace bytes available (hasReadAceHeader): Consumed %ld bytes", v43, 0xCu);
      OUTLINED_FUNCTION_1_2();
    }
    OUTLINED_FUNCTION_48_1();
LABEL_35:
    OUTLINED_FUNCTION_24_2();
    uint64_t v48 = v3[5];
    unint64_t v49 = v3[6];
    *(_OWORD *)(v3 + 5) = *(_OWORD *)v75;
    outlined consume of Data?(v48, v49);
    return;
  }
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  uint64_t v21 = OUTLINED_FUNCTION_7(v20, (uint64_t)static Logger.siriNetwork);
  os_log_type_t v22 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)OUTLINED_FUNCTION_2_0();
    *(_WORD *)uint64_t v23 = 0;
    _os_log_impl(&dword_25D6CC000, v21, v22, "CommunicationProtocol - Ace bytes available: Unexpected nil input data", v23, 2u);
    OUTLINED_FUNCTION_1_2();

    OUTLINED_FUNCTION_48_1();
  }
  else
  {
    OUTLINED_FUNCTION_48_1();
  }
}

Swift::Void __swiftcall CommunicationProtocolAce.scheduleAceHeaderTimeout(withInterval:)(Swift::Double withInterval)
{
  uint64_t v3 = v1;
  type metadata accessor for DispatchTime();
  OUTLINED_FUNCTION_0_0();
  uint64_t v66 = v6;
  uint64_t v67 = v5;
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_32_2(v7, v54);
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_106_0(v9, v10, v11, v12, v13, v14, v15, v16, v54);
  type metadata accessor for DispatchWorkItemFlags();
  OUTLINED_FUNCTION_0_0();
  uint64_t v56 = v18;
  uint64_t v57 = v17;
  MEMORY[0x270FA5388](v17);
  OUTLINED_FUNCTION_51_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v61 = v19;
  MEMORY[0x270FA5388](v20);
  OUTLINED_FUNCTION_0_1();
  uint64_t v59 = v22 - v21;
  type metadata accessor for OS_dispatch_source.TimerFlags();
  OUTLINED_FUNCTION_0_0();
  uint64_t v58 = v23;
  MEMORY[0x270FA5388](v24);
  OUTLINED_FUNCTION_0_1();
  type metadata accessor for DispatchTimeInterval();
  OUTLINED_FUNCTION_0_0();
  uint64_t v62 = v26;
  uint64_t v63 = v25;
  MEMORY[0x270FA5388](v25);
  OUTLINED_FUNCTION_5_5();
  unint64_t v60 = v27;
  OUTLINED_FUNCTION_13_2();
  MEMORY[0x270FA5388](v28);
  uint64_t v68 = (uint64_t *)((char *)&v54 - v29);
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v30 = type metadata accessor for Logger();
  uint64_t v31 = OUTLINED_FUNCTION_7(v30, (uint64_t)static Logger.siriNetwork);
  os_log_type_t v32 = static os_log_type_t.default.getter();
  if (OUTLINED_FUNCTION_9(v32))
  {
    uint32_t v33 = (float *)OUTLINED_FUNCTION_12_0();
    OUTLINED_FUNCTION_72(v33, 3.852e-34);
    *(Swift::Double *)Swift::String aBlock = withInterval;
    OUTLINED_FUNCTION_42_1();
    _os_log_impl(&dword_25D6CC000, v31, v2, "CommunicationProtocol - Ace header: Scheduling Ace header timeout for %f seconds", (uint8_t *)v33, 0xCu);
    OUTLINED_FUNCTION_1_2();
  }

  if (*(void *)(v3 + 192)) {
    CommunicationProtocolAce.cancelAceHeaderTimeoutTimer()();
  }
  if (withInterval > 0.0)
  {
    Double.dispatchTimeInterval.getter(v68, withInterval);
    type metadata accessor for CTServiceDescriptor(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_source);
    aBlock[0] = MEMORY[0x263F8EE78];
    lazy protocol witness table accessor for type OS_dispatch_source.TimerFlags and conformance OS_dispatch_source.TimerFlags((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_source.TimerFlags and conformance OS_dispatch_source.TimerFlags, MEMORY[0x263F8F148]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_source.TimerFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_source.TimerFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_source.TimerFlags]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    uint64_t v55 = v3;
    id v34 = *(id *)(v3 + 32);
    uint64_t v35 = static OS_dispatch_source.makeTimerSource(flags:queue:)();

    OUTLINED_FUNCTION_12_2();
    v36();
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v38 = swift_allocObject();
    swift_weakInit();
    uint64_t v39 = swift_allocObject();
    *(void *)(v39 + 16) = v35;
    *(void *)(v39 + 24) = v38;
    *(Swift::Double *)(v39 + 32) = withInterval;
    aBlock[4] = partial apply for closure #1 in CommunicationProtocolAce.scheduleAceHeaderTimeout(withInterval:);
    aBlock[5] = v39;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    aBlock[3] = &block_descriptor_11;
    id v40 = _Block_copy(aBlock);
    swift_unknownObjectRetain();
    swift_retain();
    static DispatchQoS.unspecified.getter();
    default argument 1 of OS_dispatch_source.setEventHandler(qos:flags:handler:)();
    uint64_t v41 = v35;
    OS_dispatch_source.setEventHandler(qos:flags:handler:)();
    _Block_release(v40);
    OUTLINED_FUNCTION_12_2();
    v42();
    OUTLINED_FUNCTION_12_2();
    v43();
    swift_release();
    swift_release();
    uint64_t v44 = v64;
    static DispatchTime.now()();
    uint64_t v45 = v65;
    unint64_t v46 = v68;
    DispatchTime.advanced(by:)();
    uint64_t v47 = v67;
    uint64_t v48 = *(void (**)(uint64_t, uint64_t))(v66 + 8);
    v48(v44, v67);
    unint64_t v49 = v60;
    default argument 2 of OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v60);
    uint64_t v50 = v46;
    MEMORY[0x2611B2570](v45, v46, v49, ObjectType);
    os_log_type_t v51 = *(void (**)(uint64_t *, uint64_t))(v62 + 8);
    uint64_t v52 = v49;
    uint64_t v53 = v63;
    v51(v52, v63);
    v48(v45, v47);
    OS_dispatch_source.resume()();
    v51(v50, v53);
    *(void *)(v55 + 192) = v41;
    swift_unknownObjectRelease();
  }
}

uint64_t closure #1 in CommunicationProtocolAce.scheduleAceHeaderTimeout(withInterval:)(uint64_t a1, double a2)
{
  swift_getObjectType();
  OS_dispatch_source.cancel()();
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    CommunicationProtocolAce.aceHeaderTimeoutFired(fromTimer:afterTimeout:)(a1, a2);
    return swift_release();
  }
  return result;
}

uint64_t CommunicationProtocolAce.barrier(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  CommunicationProtocolAce.sendAcePing(withId:)(*(unsigned int *)(v2 + 216));
  unsigned int v6 = *(_DWORD *)(v2 + 216);
  if (a1)
  {
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = a1;
    *(void *)(v7 + 24) = a2;
    uint64_t v8 = partial apply for thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v7 = 0;
  }
  OUTLINED_FUNCTION_9_6();
  if (a1)
  {
    uint64_t v9 = OUTLINED_FUNCTION_97_0();
    outlined copy of (@escaping @callee_guaranteed (@in_guaranteed LinkRecommendationInfo?) -> ())?(v9);
    specialized Dictionary._Variant.setValue(_:forKey:)((uint64_t)v8, v7, v6);
  }
  else
  {
    outlined copy of (@escaping @callee_guaranteed (@in_guaranteed LinkRecommendationInfo?) -> ())?(0);
    uint64_t v10 = specialized Dictionary._Variant.removeValue(forKey:)(v6);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?(v10);
  }
  uint64_t result = swift_endAccess();
  int v12 = *(_DWORD *)(v3 + 216);
  if (v12 == -1) {
    int v13 = -100000;
  }
  else {
    int v13 = v12 + 1;
  }
  *(_DWORD *)(v3 + 216) = v13;
  return result;
}

void CommunicationProtocolAce.compressData(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,int a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  OUTLINED_FUNCTION_83_0();
  a34 = v38;
  a35 = v39;
  uint64_t v41 = v40;
  uint64_t v43 = v42;
  OUTLINED_FUNCTION_110_0();
  outlined init with copy of DataCompressing?(v35 + 152, (uint64_t)&a18, &demangling cache variable for type metadata for DataCompressing?);
  if (a21)
  {
    outlined init with copy of RPCOspreyConnectionProtocol((uint64_t)&a18, (uint64_t)&a10);
    outlined destroy of DataCompressing?((uint64_t)&a18, &demangling cache variable for type metadata for DataCompressing?);
    __swift_project_boxed_opaque_existential_1(&a10, a13);
    uint64_t v44 = OUTLINED_FUNCTION_29_3();
    v45(v44);
    unint64_t v47 = v46;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&a10);
    if (v36) {
      goto LABEL_14;
    }
    if (v47 >> 60 != 15)
    {
      uint64_t v48 = OUTLINED_FUNCTION_75_0();
      outlined copy of Data._Representation(v48, v49);
      if (one-time initialization token for siriNetwork != -1) {
        swift_once();
      }
      uint64_t v50 = type metadata accessor for Logger();
      __swift_project_value_buffer(v50, (uint64_t)static Logger.siriNetwork);
      uint64_t v51 = OUTLINED_FUNCTION_75_0();
      outlined copy of Data?(v51, v52);
      uint64_t v53 = OUTLINED_FUNCTION_29_3();
      outlined copy of Data._Representation(v53, v54);
      uint64_t v55 = Logger.logObject.getter();
      os_log_type_t v56 = static os_log_type_t.default.getter();
      if (OUTLINED_FUNCTION_10_6(v56))
      {
        uint64_t v57 = swift_slowAlloc();
        *(_DWORD *)uint64_t v57 = 134218240;
        OUTLINED_FUNCTION_29_3();
        a18 = Data.count.getter();
        a25 = v37;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        outlined consume of Data._Representation(v43, (unint64_t)v41);
        *(_WORD *)(v57 + 12) = 2048;
        OUTLINED_FUNCTION_75_0();
        a18 = Data.count.getter();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        OUTLINED_FUNCTION_76_0();
        _os_log_impl(&dword_25D6CC000, v55, (os_log_type_t)a25, "CommunicationProtocol - Compress Data: Compression from %ld to %ld bytes", (uint8_t *)v57, 0x16u);
        OUTLINED_FUNCTION_1_2();

        OUTLINED_FUNCTION_76_0();
      }
      else
      {
        OUTLINED_FUNCTION_76_0();
        outlined consume of Data._Representation(v43, (unint64_t)v41);
        OUTLINED_FUNCTION_76_0();
      }
      goto LABEL_14;
    }
  }
  else
  {
    outlined destroy of DataCompressing?((uint64_t)&a18, &demangling cache variable for type metadata for DataCompressing?);
  }
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v58 = type metadata accessor for Logger();
  uint64_t v59 = OUTLINED_FUNCTION_7(v58, (uint64_t)static Logger.siriNetwork);
  os_log_type_t v60 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v59, v60))
  {
    uint64_t v61 = (_WORD *)swift_slowAlloc();
    OUTLINED_FUNCTION_47_1(v61);
    _os_log_impl(&dword_25D6CC000, v59, v60, "CommunicationProtocol - Compress Data: Empty result", v41, 2u);
    OUTLINED_FUNCTION_1_2();
  }

  lazy protocol witness table accessor for type BackgroundConnectionError and conformance BackgroundConnectionError();
  uint64_t v62 = OUTLINED_FUNCTION_16_0();
  OUTLINED_FUNCTION_43_0(v62, v63);
  OUTLINED_FUNCTION_76_0();
LABEL_14:
  OUTLINED_FUNCTION_75_0();
  OUTLINED_FUNCTION_57_1();
}

uint64_t CommunicationProtocolAce.initializeBufferedGeneralOutputData(hasInitialPayload:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (uint64_t *)(v1 + 72);
  OUTLINED_FUNCTION_128();
  unint64_t v5 = *(void *)(v2 + 80);
  if (v5 >> 60 == 15)
  {
    uint64_t v6 = *v4;
    *(_OWORD *)uint64_t v4 = xmmword_25D7906C0;
    outlined consume of Data?(v6, v5);
    if ((a1 & 1) == 0)
    {
      if (one-time initialization token for siriNetwork != -1) {
        swift_once();
      }
      uint64_t v7 = type metadata accessor for Logger();
      __swift_project_value_buffer(v7, (uint64_t)static Logger.siriNetwork);
      uint64_t v8 = (void *)Logger.logObject.getter();
      os_log_type_t v9 = static os_log_type_t.default.getter();
      if (OUTLINED_FUNCTION_24_0(v9))
      {
        uint64_t v10 = (_WORD *)OUTLINED_FUNCTION_2_0();
        OUTLINED_FUNCTION_47_1(v10);
        OUTLINED_FUNCTION_20_3(&dword_25D6CC000, v11, v12, "CommunicationProtocol - Ace header: Buffering HTTP Header");
        OUTLINED_FUNCTION_1_2();
      }

      CommunicationProtocolAce.httpHeaderData()();
      if (v14 >> 60 == 15)
      {
        uint64_t v15 = (void *)Logger.logObject.getter();
        os_log_type_t v16 = static os_log_type_t.error.getter();
        if (OUTLINED_FUNCTION_9(v16))
        {
          uint64_t v17 = (_WORD *)OUTLINED_FUNCTION_2_0();
          OUTLINED_FUNCTION_55_0(v17);
          OUTLINED_FUNCTION_3_0(&dword_25D6CC000, v18, v19, "CommunicationProtocol - Ace header: Unable to initialize HTTP Header");
          OUTLINED_FUNCTION_1_2();
        }
      }
      else
      {
        uint64_t v20 = v13;
        unint64_t v21 = v14;
        CommunicationProtocolAce.bufferGeneralData(data:)(v13, v14);
        outlined consume of Data?(v20, v21);
      }
    }
    uint64_t v22 = type metadata accessor for ZlibDataCompressor();
    swift_allocObject();
    uint64_t v23 = ZlibDataCompressor.init()();
    if (v23)
    {
      uint64_t v37[3] = v22;
      v37[4] = &protocol witness table for ZlibDataCompressor;
      v37[0] = v23;
    }
    else
    {
      OUTLINED_FUNCTION_28_3();
    }
    outlined init with take of SessionObject?((uint64_t)v37, (uint64_t)v36, &demangling cache variable for type metadata for DataCompressing?);
    OUTLINED_FUNCTION_9_6();
    outlined assign with take of DataCompressing?((uint64_t)v36, v2 + 152, &demangling cache variable for type metadata for DataCompressing?);
    swift_endAccess();
    if ((a1 & 1) == 0)
    {
      if (one-time initialization token for siriNetwork != -1) {
        swift_once();
      }
      uint64_t v24 = type metadata accessor for Logger();
      uint64_t v25 = (void *)OUTLINED_FUNCTION_7(v24, (uint64_t)static Logger.siriNetwork);
      os_log_type_t v26 = static os_log_type_t.default.getter();
      if (OUTLINED_FUNCTION_2_17(v26))
      {
        uint64_t v27 = (_WORD *)OUTLINED_FUNCTION_2_0();
        OUTLINED_FUNCTION_5_10(v27);
        OUTLINED_FUNCTION_1_21(&dword_25D6CC000, v28, v29, "CommunicationProtocol - Ace header: Buffering ACE Header");
        OUTLINED_FUNCTION_1_2();
      }

      if (one-time initialization token for aceHeaderMagic != -1) {
        swift_once();
      }
      static AceStreamHeader.createAceStreamHeaderData(withMagic:compressionType:)(static AceSerialization.aceHeaderMagic, 1);
      OUTLINED_FUNCTION_108_0();
      CommunicationProtocolAce.bufferGeneralData(data:)(v30, v31);
      outlined consume of Data._Representation(a1, v2 + 152);
    }
  }
  os_log_type_t v32 = (uint64_t *)(v2 + 88);
  uint64_t result = OUTLINED_FUNCTION_128();
  unint64_t v34 = *(void *)(v2 + 96);
  if (v34 >> 60 == 15)
  {
    uint64_t v35 = *v32;
    *(_OWORD *)os_log_type_t v32 = xmmword_25D7906C0;
    return outlined consume of Data?(v35, v34);
  }
  return result;
}

void CommunicationProtocolAce.httpHeaderData()()
{
  OUTLINED_FUNCTION_22();
  uint64_t v1 = type metadata accessor for URL.DirectoryHint();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_0_1();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v8 - 8);
  OUTLINED_FUNCTION_0_1();
  uint64_t v11 = v10 - v9;
  uint64_t v12 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0_0();
  uint64_t v14 = v13;
  uint64_t v16 = MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v27[-1] - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&v27[-1] - v19;
  uint64_t v26 = v0;
  uint64_t v21 = CommunicationProtocolAce.aceDelegate.getter();
  if (v21)
  {
    memcpy(v28, (const void *)(v21 + 40), 0x204uLL);
    outlined retain of ConnectionConfiguration(v28);
    swift_unknownObjectRelease();
    memcpy(v27, v28, 0x204uLL);
    ConnectionConfiguration.resolvedURL.getter();
    if (__swift_getEnumTagSinglePayload(v11, 1, v12) == 1)
    {
      outlined release of ConnectionConfiguration(v28);
      outlined destroy of DataCompressing?(v11, (uint64_t *)&demangling cache variable for type metadata for URL?);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v14 + 32))(v20, v11, v12);
      v27[0] = 1701011759;
      v27[1] = 0xE400000000000000;
      (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v7, *MEMORY[0x263F06E50], v1);
      lazy protocol witness table accessor for type String and conformance String();
      URL.appending<A>(path:directoryHint:)();
      uint64_t v22 = OUTLINED_FUNCTION_66_0();
      v23(v22);
      swift_bridgeObjectRelease();
      CommunicationProtocolAce.headerData(forURL:aceHost:languageCode:syncAssistantId:)();
      outlined release of ConnectionConfiguration(v28);
      uint64_t v24 = *(void (**)(char *, uint64_t))(v14 + 8);
      v24(v18, v12);
      uint64_t v25 = OUTLINED_FUNCTION_97_0();
      ((void (*)(uint64_t))v24)(v25);
    }
  }
  OUTLINED_FUNCTION_29();
}

void CommunicationProtocolAce.headerData(forURL:aceHost:languageCode:syncAssistantId:)()
{
  OUTLINED_FUNCTION_22();
  uint64_t v122 = v0;
  uint64_t v123 = v1;
  unint64_t v3 = v2;
  int64_t v5 = v4;
  unint64_t v7 = v6;
  int64_t v9 = v8;
  void __dst[65] = *MEMORY[0x263EF8340];
  uint64_t v10 = CommunicationProtocolAce.aceDelegate.getter();
  if (!v10) {
    goto LABEL_103;
  }
  memcpy(__dst, (const void *)(v10 + 40), 0x204uLL);
  outlined retain of ConnectionConfiguration(__dst);
  if (one-time initialization token for httpMethodACE == -1) {
    goto LABEL_3;
  }
  while (1)
  {
    swift_once();
LABEL_3:
    uint64_t v11 = (void *)static ConnectionConfigurationConstants.httpMethodACE;
    unint64_t v117 = v3;
    if (static ConnectionConfigurationConstants.httpMethodACE)
    {
      uint64_t v12 = (__CFString *)static ConnectionConfigurationConstants.httpMethodACE;
    }
    else
    {
      uint64_t v12 = (__CFString *)MEMORY[0x2611B2220](4539201, 0xE300000000000000);
      uint64_t v11 = 0;
    }
    id v13 = v11;
    URL._bridgeToObjectiveC()(v14);
    CFURLRef v16 = v15;
    Request = CFHTTPMessageCreateRequest(0, v12, v15, (CFStringRef)*MEMORY[0x263EFC700]);

    Swift::String_optional v18 = URL.host(percentEncoded:)(1);
    if (v18.value._object) {
      uint64_t countAndFlagsBits = v18.value._countAndFlagsBits;
    }
    else {
      uint64_t countAndFlagsBits = 0;
    }
    if (v18.value._object) {
      object = v18.value._object;
    }
    else {
      object = (void *)0xE000000000000000;
    }
    uint64_t v21 = (void *)MEMORY[0x2611B2220](1953722184, 0xE400000000000000);
    uint64_t v22 = (__CFString *)MEMORY[0x2611B2220](countAndFlagsBits, object);
    swift_bridgeObjectRelease();
    message = Request;
    uint64_t v23 = (__CFHTTPMessage *)OUTLINED_FUNCTION_75_0();
    CFHTTPMessageSetHeaderFieldValue(v23, v24, v22);

    uint64_t v25 = __dst[20];
    if (__dst[20])
    {
      uint64_t v26 = __dst[19];
      swift_bridgeObjectRetain();
      uint64_t v27 = (void *)MEMORY[0x2611B2220](v26, v25);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v27 = 0;
    }
    uint64_t v28 = (__CFString *)objc_msgSend(self, sel_createUserAgentStringFromProductTypePrefix_, v27);

    uint64_t v29 = v28;
    if (!v28)
    {
      uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v29 = (__CFString *)MEMORY[0x2611B2220](v30);
      swift_bridgeObjectRelease();
    }
    uint64_t v116 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v121 = v31;
    os_log_type_t v32 = (void *)MEMORY[0x2611B2220](0x6567412D72657355, 0xEA0000000000746ELL);
    uint32_t v33 = (__CFHTTPMessage *)OUTLINED_FUNCTION_82_0();
    CFHTTPMessageSetHeaderFieldValue(v33, v34, v29);

    if (v9)
    {
      uint64_t v35 = (void *)MEMORY[0x2611B2220](0x6F482D6563412D58, 0xEA00000000007473);
      uint64_t v36 = (__CFString *)MEMORY[0x2611B2220](v122, v9);
      int v37 = (__CFHTTPMessage *)OUTLINED_FUNCTION_80_0();
      CFHTTPMessageSetHeaderFieldValue(v37, v38, v36);
    }
    if (v5)
    {
      uint64_t v39 = (__CFString *)MEMORY[0x2611B2220](0x4C2D747065636341, 0xEF65676175676E61);
      id v40 = (__CFString *)MEMORY[0x2611B2220](v7, v5);
      CFHTTPMessageSetHeaderFieldValue(Request, v39, v40);
    }
    if (one-time initialization token for httpContentLengthACE != -1) {
      swift_once();
    }
    CFStringRef v41 = (const __CFString *)static ConnectionConfigurationConstants.httpContentLengthACE;
    uint64_t v42 = (__CFString *)MEMORY[0x2611B2220](0x2D746E65746E6F43, 0xEE006874676E654CLL);
    unint64_t v7 = (unint64_t)Request;
    CFHTTPMessageSetHeaderFieldValue(Request, v42, v41);

    CFUUIDRef v119 = CFUUIDCreate(0);
    uint64_t v43 = (__CFString *)CFUUIDCreateString(0, v119);
    OUTLINED_FUNCTION_46_0();
    uint64_t v45 = (__CFString *)v44;
    uint64_t v120 = v43;
    CFHTTPMessageSetHeaderFieldValue(Request, v44, v43);

    if (BYTE3(__dst[64]) == 1)
    {
      uint64_t v46 = __dst[22];
      if (__dst[22])
      {
        uint64_t v47 = __dst[21];
        swift_bridgeObjectRetain();
        OUTLINED_FUNCTION_94_0();
        unint64_t v49 = v48;
        uint64_t v43 = (__CFString *)MEMORY[0x2611B2220](v47, v46);
        swift_bridgeObjectRelease();
        CFHTTPMessageSetHeaderFieldValue(Request, v49, v43);
      }
      uint64_t v45 = (__CFString *)__dst[24];
      if (__dst[24])
      {
        uint64_t v50 = __dst[23];
        swift_bridgeObjectRetain();
        OUTLINED_FUNCTION_62_0();
        OUTLINED_FUNCTION_46_0();
        unint64_t v52 = v51;
        uint64_t v43 = (__CFString *)MEMORY[0x2611B2220](v50, v45);
        swift_bridgeObjectRelease();
        CFHTTPMessageSetHeaderFieldValue(Request, v52, v43);
      }
    }
    if (!AFIsInternalInstall()) {
      break;
    }
    if (BYTE2(__dst[64]) == 1)
    {
      OUTLINED_FUNCTION_94_0();
      OUTLINED_FUNCTION_40_1();
      OUTLINED_FUNCTION_21_3(v53);
    }
    id v54 = objc_msgSend(self, sel_sharedPreferences);
    uint64_t v55 = outlined bridged method (ob) of @objc AFPreferences.configOverrides()(v54);
    if (v55)
    {
      uint64_t v56 = v55;
      int64_t v57 = v9;
    }
    else
    {
      int64_t v57 = v9;
      uint64_t v56 = Dictionary.init(dictionaryLiteral:)();
    }
    int64_t v5 = 0;
    unint64_t v3 = v56 + 64;
    OUTLINED_FUNCTION_44_1();
    unint64_t v7 = v59 & v58;
    int64_t v9 = (unint64_t)(v60 + 63) >> 6;
    if ((v59 & v58) != 0)
    {
LABEL_36:
      unint64_t v61 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v62 = v61 | (v5 << 6);
      goto LABEL_51;
    }
    while (1)
    {
      int64_t v63 = v5 + 1;
      if (__OFADD__(v5, 1))
      {
LABEL_105:
        __break(1u);
LABEL_106:
        __break(1u);
        goto LABEL_107;
      }
      unint64_t v7 = (unint64_t)message;
      if (v63 >= v9) {
        goto LABEL_53;
      }
      ++v5;
      if (!*(void *)(v3 + 8 * v63))
      {
        int64_t v5 = v63 + 1;
        if (v63 + 1 >= v9) {
          goto LABEL_53;
        }
        if (!*(void *)(v3 + 8 * v5))
        {
          int64_t v5 = v63 + 2;
          if (v63 + 2 >= v9) {
            goto LABEL_53;
          }
          if (!*(void *)(v3 + 8 * v5)) {
            break;
          }
        }
      }
LABEL_50:
      OUTLINED_FUNCTION_58_1();
      unint64_t v7 = v66 & v65;
      unint64_t v62 = v67 + (v5 << 6);
LABEL_51:
      uint64_t v68 = (uint64_t *)(*(void *)(v56 + 56) + 16 * v62);
      uint64_t v69 = *v68;
      uint64_t v70 = v68[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v71 = OUTLINED_FUNCTION_74_0();
      uint64_t v72 = (__CFString *)MEMORY[0x2611B2220](v71);
      swift_bridgeObjectRelease();
      uint64_t v73 = (__CFString *)MEMORY[0x2611B2220](v69, v70);
      swift_bridgeObjectRelease();
      CFHTTPMessageSetHeaderFieldValue(message, v72, v73);

      if (v7) {
        goto LABEL_36;
      }
    }
    int64_t v64 = v63 + 3;
    if (v64 >= v9)
    {
LABEL_53:
      swift_release();
      int64_t v9 = v57;
      break;
    }
    if (*(void *)(v3 + 8 * v64))
    {
      int64_t v5 = v64;
      goto LABEL_50;
    }
    while (1)
    {
      int64_t v5 = v64 + 1;
      if (__OFADD__(v64, 1)) {
        break;
      }
      if (v5 >= v9) {
        goto LABEL_53;
      }
      ++v64;
      if (*(void *)(v3 + 8 * v5)) {
        goto LABEL_50;
      }
    }
LABEL_107:
    __break(1u);
  }
  int64_t v118 = v9;
  uint64_t v74 = (__CFString *)objc_msgSend(self, sel_featureFlags);
  uint64_t v75 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  int64_t v76 = 0;
  uint64_t v77 = 1 << *(unsigned char *)(v75 + 32);
  uint64_t v78 = -1;
  if (v77 < 64) {
    uint64_t v78 = ~(-1 << v77);
  }
  uint64_t v124 = v75 + 64;
  unint64_t v3 = v78 & *(void *)(v75 + 64);
  int64_t v9 = (unint64_t)(v77 + 63) >> 6;
  while (2)
  {
    if (v3)
    {
      unint64_t v79 = __clz(__rbit64(v3));
      v3 &= v3 - 1;
      unint64_t v80 = v79 | (v76 << 6);
LABEL_73:
      uint64_t v86 = *(void *)(v75 + 48) + 16 * v80;
      uint64_t v74 = *(__CFString **)v86;
      int64_t v5 = *(void *)(v86 + 8);
      uint64_t v87 = (uint64_t *)(*(void *)(v75 + 56) + 16 * v80);
      uint64_t v89 = *v87;
      uint64_t v88 = v87[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((AFIsInternalInstall() & 1) != 0
        || (v90._uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(),
            Swift::Bool v91 = String.hasPrefix(_:)(v90),
            unint64_t v7 = (unint64_t)message,
            swift_bridgeObjectRelease(),
            !v91))
      {
        uint64_t v74 = (__CFString *)MEMORY[0x2611B2220](v74, v5);
        swift_bridgeObjectRelease();
        uint64_t v92 = (__CFString *)MEMORY[0x2611B2220](v89, v88);
        swift_bridgeObjectRelease();
        CFHTTPMessageSetHeaderFieldValue((CFHTTPMessageRef)v7, v74, v92);
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      continue;
    }
    break;
  }
  int64_t v81 = v76 + 1;
  if (__OFADD__(v76, 1))
  {
    __break(1u);
    goto LABEL_105;
  }
  if (v81 >= v9) {
    goto LABEL_77;
  }
  ++v76;
  if (*(void *)(v124 + 8 * v81)) {
    goto LABEL_72;
  }
  int64_t v76 = v81 + 1;
  if (v81 + 1 >= v9) {
    goto LABEL_77;
  }
  if (*(void *)(v124 + 8 * v76)) {
    goto LABEL_72;
  }
  int64_t v76 = v81 + 2;
  if (v81 + 2 >= v9) {
    goto LABEL_77;
  }
  if (*(void *)(v124 + 8 * v76))
  {
LABEL_72:
    OUTLINED_FUNCTION_58_1();
    unint64_t v3 = v84 & v83;
    unint64_t v80 = v85 + (v76 << 6);
    goto LABEL_73;
  }
  int64_t v82 = v81 + 3;
  if (v82 < v9)
  {
    if (!*(void *)(v124 + 8 * v82))
    {
      while (1)
      {
        int64_t v76 = v82 + 1;
        if (__OFADD__(v82, 1)) {
          goto LABEL_106;
        }
        if (v76 >= v9) {
          goto LABEL_77;
        }
        ++v82;
        if (*(void *)(v124 + 8 * v76)) {
          goto LABEL_72;
        }
      }
    }
    int64_t v76 = v82;
    goto LABEL_72;
  }
LABEL_77:
  swift_release();
  if ((__dst[14] & 0x10000) != 0)
  {
    OUTLINED_FUNCTION_62_0();
    OUTLINED_FUNCTION_46_0();
    OUTLINED_FUNCTION_40_1();
    OUTLINED_FUNCTION_21_3(v93);
  }
  if (AFIsInternalInstall() && _AFPreferencesShowAllDialogVariantsEnabled())
  {
    OUTLINED_FUNCTION_62_0();
    OUTLINED_FUNCTION_46_0();
    OUTLINED_FUNCTION_40_1();
    OUTLINED_FUNCTION_21_3(v94);
  }
  if (v123)
  {
    OUTLINED_FUNCTION_62_0();
    OUTLINED_FUNCTION_46_0();
    uint64_t v96 = v95;
    CFStringRef v97 = (const __CFString *)MEMORY[0x2611B2220](v117, v123);
    OUTLINED_FUNCTION_21_3(v97);
  }
  CFDictionaryRef v98 = CFHTTPMessageCopyAllHeaderFields((CFHTTPMessageRef)v7);
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v99 = type metadata accessor for Logger();
  __swift_project_value_buffer(v99, (uint64_t)static Logger.siriNetwork);
  CFDictionaryRef v100 = v98;
  uint64_t v101 = Logger.logObject.getter();
  os_log_type_t v102 = static os_log_type_t.default.getter();
  if (OUTLINED_FUNCTION_93_0(v102))
  {
    uint64_t v103 = (_DWORD *)OUTLINED_FUNCTION_12_0();
    char v104 = (void *)swift_slowAlloc();
    *uint64_t v103 = 138412290;
    if (v100) {
      CFDictionaryRef v105 = v100;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *char v104 = v98;

    OUTLINED_FUNCTION_79_0(&dword_25D6CC000, v101, v102, "CommunicationProtocol - Ace header: Connection Header %@");
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_1_2();
    OUTLINED_FUNCTION_1_2();
    unint64_t v7 = (unint64_t)message;
  }
  else
  {

    uint64_t v101 = v100;
  }

  if (v100)
  {
    CFDictionaryRef v106 = v100;
    static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)();
  }
  uint64_t v107 = (__CFString *)(id)AFDeviceRegionCode();
  if (v107)
  {
    uint64_t v108 = v107;
    OUTLINED_FUNCTION_62_0();
    OUTLINED_FUNCTION_46_0();
    uint64_t v110 = (__CFString *)v109;
    CFHTTPMessageSetHeaderFieldValue((CFHTTPMessageRef)v7, v109, v108);
  }
  CFDataRef v111 = CFHTTPMessageCopySerializedMessage((CFHTTPMessageRef)v7);
  CFDataRef v112 = v111;
  Data.init(fromCFData:)(v111);
  if (AFIsInternalInstall()
    && (id v113 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F6E4E8]), sel_init)) != 0)
  {
    uint64_t v114 = v113;
    outlined bridged method (mbnn) of @objc NETSchemaNETSessionConnectionHttpHeaderCreated.userAgent.setter(v116, v121, v113);
    if (v118) {
      int v115 = (void *)MEMORY[0x2611B2220](v122, v118);
    }
    else {
      int v115 = 0;
    }
    objc_msgSend(v114, sel_setAceHost_, v115);

    BackgroundConnection.logSessionConnectionHttpHeaderCreated(httpHeader:)();
    outlined release of ConnectionConfiguration(__dst);
  }
  else
  {
    swift_bridgeObjectRelease();

    outlined release of ConnectionConfiguration(__dst);
  }
  swift_unknownObjectRelease();
LABEL_103:
  OUTLINED_FUNCTION_29();
}

uint64_t CommunicationProtocolAce.prepareProviderHeader(withForceReconnect:)(uint64_t a1)
{
  OUTLINED_FUNCTION_128();
  uint64_t v4 = *(void *)(v1 + 56);
  unint64_t v5 = *(void *)(v1 + 64);
  *(_OWORD *)(v1 + 56) = xmmword_25D7906C0;
  outlined consume of Data._Representation(v4, v5);
  uint64_t result = CommunicationProtocolAce.aceDelegate.getter();
  if (result)
  {
    BackgroundConnection.providerHeaderData(forceReconnect:)(a1 & 1);
    OUTLINED_FUNCTION_108_0();
    uint64_t result = swift_unknownObjectRelease();
    if (v2 >> 60 != 15)
    {
      outlined copy of Data._Representation(a1, v2);
      if (one-time initialization token for siriNetwork != -1) {
        swift_once();
      }
      uint64_t v7 = type metadata accessor for Logger();
      int64_t v8 = (void *)OUTLINED_FUNCTION_7(v7, (uint64_t)static Logger.siriNetwork);
      os_log_type_t v9 = static os_log_type_t.default.getter();
      if (OUTLINED_FUNCTION_24_0(v9))
      {
        uint64_t v10 = (_WORD *)OUTLINED_FUNCTION_2_0();
        OUTLINED_FUNCTION_47_1(v10);
        OUTLINED_FUNCTION_20_3(&dword_25D6CC000, v11, v12, "CommunicationProtocol - Ace header: Preparing Provider Header");
        OUTLINED_FUNCTION_1_2();
      }

      OUTLINED_FUNCTION_9_6();
      OUTLINED_FUNCTION_74_0();
      Data.append(_:)();
      swift_endAccess();
      OUTLINED_FUNCTION_33_4();
      return OUTLINED_FUNCTION_33_4();
    }
  }
  return result;
}

const __CFString *CommunicationProtocolAce.consumeHttpHeader(withData:)(uint64_t *a1)
{
  uint64_t v7 = v2;
  uint64_t v8 = v1;
  os_log_type_t v9 = *(void **)(v1 + 104);
  if (!v9)
  {
    OUTLINED_FUNCTION_70_0();
    if (!v33) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    uint64_t v20 = OUTLINED_FUNCTION_7(v19, (uint64_t)static Logger.siriNetwork);
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (_WORD *)swift_slowAlloc();
      OUTLINED_FUNCTION_55_0(v22);
      _os_log_impl(&dword_25D6CC000, v20, v21, "CommunicationProtocol - Ace header: We shouldn't be trying to handle http header if we're not expecting it", v3, 2u);
      OUTLINED_FUNCTION_1_2();
    }

    return 0;
  }
  id v11 = v9;
  CFIndex v12 = CommunicationProtocolAce.parseHttpHeaderData(_:partialMessage:)(a1, v11);
  if (v2)
  {
LABEL_21:
    uint64_t v57 = (uint64_t)v7;
    id v32 = v7;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    if (swift_dynamicCast())
    {
      BOOL v33 = v56 == 4 && v52 == 4;
      if (v33 && !(v54 | v53 | v55))
      {
        OUTLINED_FUNCTION_70_0();
        if (!v33) {
          swift_once();
        }
        uint64_t v43 = type metadata accessor for Logger();
        CFStringRef v44 = OUTLINED_FUNCTION_7(v43, (uint64_t)static Logger.siriNetwork);
        os_log_type_t v45 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v44, v45))
        {
          uint64_t v46 = (_DWORD *)OUTLINED_FUNCTION_12_0();
          uint64_t v47 = (void *)OUTLINED_FUNCTION_36_2();
          *uint64_t v46 = 138412290;
          lazy protocol witness table accessor for type BackgroundConnectionError and conformance BackgroundConnectionError();
          OUTLINED_FUNCTION_16_0();
          *(void *)uint64_t v48 = 4;
          *(void *)(v48 + 8) = 0;
          *(void *)(v48 + 16) = 0;
          *(void *)(v48 + 24) = 0;
          *(unsigned char *)(v48 + 32) = 4;
          _swift_stdlib_bridgeErrorToNSError();
          OUTLINED_FUNCTION_35_2();
          *uint64_t v47 = v6;
          OUTLINED_FUNCTION_102(&dword_25D6CC000, v49, v50, "CommunicationProtocol - Ace header: Need more data to read Http Header %@");
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          swift_arrayDestroy();
          OUTLINED_FUNCTION_1_2();
          OUTLINED_FUNCTION_1_2();
        }
        else
        {
        }
        return 0;
      }
      outlined consume of BackgroundConnectionError(v52, (void *)v53, v54, v55, v56);
    }
    OUTLINED_FUNCTION_70_0();
    if (!v33) {
      swift_once();
    }
    uint64_t v34 = type metadata accessor for Logger();
    __swift_project_value_buffer(v34, (uint64_t)static Logger.siriNetwork);
    id v35 = v7;
    id v36 = v7;
    int v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = (_DWORD *)OUTLINED_FUNCTION_12_0();
      uint64_t v4 = (void *)OUTLINED_FUNCTION_36_2();
      *uint64_t v39 = 138412290;
      id v40 = v7;
      _swift_stdlib_bridgeErrorToNSError();
      OUTLINED_FUNCTION_35_2();
      *uint64_t v4 = v6;

      OUTLINED_FUNCTION_102(&dword_25D6CC000, v41, v42, "CommunicationProtocol - Ace header: Error reading http header %@");
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_1_2();
      OUTLINED_FUNCTION_1_2();
    }
    else
    {
    }
    swift_willThrow();

    return (const __CFString *)v4;
  }
  CFIndex v14 = v12;
  if (v12 == 200)
  {
    uint64_t v4 = v13;
    OUTLINED_FUNCTION_70_0();
    if (!v33) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    CFURLRef v16 = OUTLINED_FUNCTION_7(v15, (uint64_t)static Logger.siriNetwork);
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      Swift::String_optional v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Swift::String_optional v18 = 0;
      _os_log_impl(&dword_25D6CC000, v16, v17, "CommunicationProtocol - Ace header: HTTP header is complete", v18, 2u);
      OUTLINED_FUNCTION_1_2();
    }

    *(void *)(v8 + 104) = 0;
    return (const __CFString *)v4;
  }
  id v23 = objc_msgSend(self, sel_localizedStringForStatusCode_, v12);
  uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v6 = v24;

  OUTLINED_FUNCTION_70_0();
  if (!v33) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  __swift_project_value_buffer(v25, (uint64_t)static Logger.siriNetwork);
  swift_bridgeObjectRetain_n();
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_10_6(v27))
  {
    uint64_t v28 = swift_slowAlloc();
    uint64_t v52 = swift_slowAlloc();
    *(_DWORD *)uint64_t v28 = 134218242;
    uint64_t v57 = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v28 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v57 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v6, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_25D6CC000, v26, v5, "CommunicationProtocol - Ace header: HTTP status code %ld %s", (uint8_t *)v28, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_1_2();
    OUTLINED_FUNCTION_1_2();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  CFStringRef result = (id)__CFStringMakeConstantString("Location");
  if (result)
  {
    uint64_t v30 = (__CFString *)result;
    uint64_t v4 = CFHTTPMessageCopyHeaderFieldValue((CFHTTPMessageRef)v11, result);

    lazy protocol witness table accessor for type BackgroundConnectionError and conformance BackgroundConnectionError();
    uint64_t v7 = (void *)OUTLINED_FUNCTION_16_0();
    *(void *)uint64_t v31 = v14;
    *(void *)(v31 + 8) = v4;
    *(void *)(v31 + 16) = v51;
    *(void *)(v31 + 24) = v6;
    *(unsigned char *)(v31 + 32) = 0;
    swift_willThrow();
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

CFIndex CommunicationProtocolAce.parseHttpHeaderData(_:partialMessage:)(uint64_t *a1, id a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = 0;
  uint64_t v7 = *a1;
  unint64_t v8 = a1[1];
  OUTLINED_FUNCTION_91();
  CFIndex v9 = Data.count.getter();
  switch(v8 >> 62)
  {
    case 1uLL:
      if (v7 >> 32 < (int)v7)
      {
        __break(1u);
        JUMPOUT(0x25D72D37CLL);
      }
      v37[1] = v8 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v38 = (int)v7;
      a2 = a2;
      swift_retain();
      uint64_t v17 = OUTLINED_FUNCTION_91();
      outlined copy of Data._Representation(v17, v18);
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v7, v7 >> 32, v8 & 0x3FFFFFFFFFFFFFFFLL, (__CFHTTPMessage *)a2, v9, v6, &v39);
      OUTLINED_FUNCTION_87_0();
      uint64_t v19 = OUTLINED_FUNCTION_91();
      outlined consume of Data._Representation(v19, v20);
      if (!v2) {
        goto LABEL_15;
      }
      goto LABEL_9;
    case 2uLL:
      uint64_t v21 = *(void *)(v7 + 24);
      uint64_t v38 = *(void *)(v7 + 16);
      uint64_t v22 = (__CFHTTPMessage *)a2;
      swift_retain();
      swift_retain();
      swift_retain();
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v38, v21, v8 & 0x3FFFFFFFFFFFFFFFLL, v22, v9, v6, &v39);
      if (!v3)
      {
        OUTLINED_FUNCTION_87_0();
        swift_release();
        swift_release();
        goto LABEL_15;
      }
      swift_release();
      swift_release();
LABEL_9:
      swift_release();
      return v9;
    case 3uLL:
      id v23 = a2;
      swift_retain();
      uint64_t v24 = OUTLINED_FUNCTION_41_1();
      OUTLINED_FUNCTION_105_0(v24, v25, v26, v27, v28, v29, v30);
      if (v23)
      {
        swift_release();
        return v9;
      }
      OUTLINED_FUNCTION_87_0();
      goto LABEL_15;
    default:
      uint64_t v38 = (uint64_t)v37;
      id v10 = a2;
      swift_retain();
      uint64_t v11 = OUTLINED_FUNCTION_91();
      OUTLINED_FUNCTION_105_0(v11, v12, BYTE6(v8), v13, v14, v15, v16);
      if (v10)
      {
        swift_release();
      }
      else
      {
        OUTLINED_FUNCTION_87_0();
LABEL_15:
        swift_beginAccess();
        *(void *)(v6 + 16) = a2;
        uint64_t v31 = *a1;
        unint64_t v32 = a1[1];
        uint64_t v33 = Data.advanced(by:)();
        uint64_t v35 = v34;
        outlined consume of Data._Representation(v31, v32);
        swift_release();
        *a1 = v33;
        a1[1] = v35;
      }
      return v9;
  }
}

void closure #1 in CommunicationProtocolAce.parseHttpHeaderData(_:partialMessage:)(UInt8 *newBytes@<X0>, CFHTTPMessageRef message@<X2>, CFIndex numBytes@<X3>, uint64_t a4@<X4>, CFIndex *a5@<X5>, CFIndex *a6@<X8>)
{
  if (!newBytes || !CFHTTPMessageAppendBytes(message, newBytes, numBytes))
  {
    lazy protocol witness table accessor for type BackgroundConnectionError and conformance BackgroundConnectionError();
    swift_allocError();
    *(_OWORD *)uint64_t v20 = 0u;
    *(_OWORD *)(v20 + 16) = 0u;
    *(unsigned char *)(v20 + 32) = 4;
LABEL_11:
    swift_willThrow();
    return;
  }
  uint64_t v11 = (CFIndex *)(a4 + 16);
  swift_beginAccess();
  *(void *)(a4 + 16) = numBytes;
  if (!CFHTTPMessageIsHeaderComplete(message))
  {
    lazy protocol witness table accessor for type BackgroundConnectionError and conformance BackgroundConnectionError();
    swift_allocError();
    *(void *)uint64_t v21 = 4;
    *(void *)(v21 + 8) = 0;
    *(void *)(v21 + 16) = 0;
    *(void *)(v21 + 24) = 0;
    *(unsigned char *)(v21 + 32) = 4;
    goto LABEL_11;
  }
  CFDataRef v12 = CFHTTPMessageCopyBody(message);
  CFDataRef v13 = v12;
  if (!v12)
  {
LABEL_21:
    CFIndex ResponseStatusCode = CFHTTPMessageGetResponseStatusCode(message);

    *a5 = ResponseStatusCode;
    *a6 = ResponseStatusCode;
    swift_beginAccess();
    a6[1] = *v11;
    return;
  }
  CFDataRef v14 = v12;
  CFIndex Length = CFDataGetLength(v14);
  swift_beginAccess();
  uint64_t v29 = v14;
  if (Length < *v11)
  {
    swift_beginAccess();
    if (__OFSUB__(*v11, Length))
    {
      __break(1u);
    }
    else
    {
      *v11 -= Length;
      if (one-time initialization token for siriNetwork == -1)
      {
LABEL_8:
        uint64_t v16 = type metadata accessor for Logger();
        __swift_project_value_buffer(v16, (uint64_t)static Logger.siriNetwork);
        swift_retain();
        uint64_t v17 = Logger.logObject.getter();
        os_log_type_t v18 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v17, v18))
        {
          uint64_t v19 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)uint64_t v19 = 134217984;
          buf = v19;
          swift_beginAccess();
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          _os_log_impl(&dword_25D6CC000, v17, v18, "CommunicationProtocol - Ace header: Header is complete. Bytes read %ld", buf, 0xCu);
          MEMORY[0x2611B3750](buf, -1, -1);
        }
        else
        {

          swift_release();
          uint64_t v17 = v29;
        }

        goto LABEL_21;
      }
    }
    swift_once();
    goto LABEL_8;
  }
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  __swift_project_value_buffer(v22, (uint64_t)static Logger.siriNetwork);
  swift_retain();
  id v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = swift_slowAlloc();
    *(_DWORD *)uint64_t v25 = 134218240;
    swift_beginAccess();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v25 + 12) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_25D6CC000, v23, v24, "CommunicationProtocol - Ace header: Something has gone terribly wrong. bytesRead: %ld bodyLength: %ld", (uint8_t *)v25, 0x16u);
    MEMORY[0x2611B3750](v25, -1, -1);
  }
  else
  {

    swift_release();
  }
  swift_beginAccess();
  *uint64_t v11 = 0;
  *a5 = CFHTTPMessageGetResponseStatusCode(message);
  lazy protocol witness table accessor for type BackgroundConnectionError and conformance BackgroundConnectionError();
  swift_allocError();
  *(void *)uint64_t v26 = 2;
  *(void *)(v26 + 8) = 0;
  *(void *)(v26 + 16) = 0;
  *(void *)(v26 + 24) = 0;
  *(unsigned char *)(v26 + 32) = 4;
  swift_willThrow();
}

#error "25D72D8A8: call analysis failed (funcsize=310)"

char *CommunicationProtocolAce.consumeAceData(withData:)(uint64_t *a1)
{
  v72[5] = *MEMORY[0x263EF8340];
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v6 = v1;
  uint64_t v7 = a1;
  unint64_t v8 = 0;
  switch(v5 >> 62)
  {
    case 1uLL:
      BOOL v10 = __OFSUB__(HIDWORD(v4), v4);
      int v11 = HIDWORD(v4) - v4;
      if (v10) {
        goto LABEL_64;
      }
      uint64_t v9 = v11;
LABEL_6:
      if (v9 < 1) {
        return 0;
      }
      unint64_t v8 = 0;
      uint64_t v58 = a1;
      break;
    case 2uLL:
      uint64_t v14 = v4 + 16;
      uint64_t v12 = *(void *)(v4 + 16);
      uint64_t v13 = *(void *)(v14 + 8);
      uint64_t v9 = v13 - v12;
      if (!__OFSUB__(v13, v12)) {
        goto LABEL_6;
      }
      goto LABEL_65;
    case 3uLL:
      return v8;
    default:
      uint64_t v9 = BYTE6(v5);
      goto LABEL_6;
  }
  while (2)
  {
    uint64_t v15 = *v7;
    unint64_t v16 = v7[1];
    unint64_t v60 = v9;
    switch(v16 >> 62)
    {
      case 1uLL:
        if (v15 >> 32 < (int)v15) {
          goto LABEL_60;
        }
        uint64_t v2 = (int)v15;
        outlined copy of Data._Representation(v15, v16);
        if (__DataStorage._bytes.getter() && __OFSUB__((int)v15, __DataStorage._offset.getter())) {
          goto LABEL_63;
        }
        uint64_t v18 = __DataStorage._length.getter();
        uint64_t v19 = (v15 >> 32) - (int)v15;
        if (v18 < v19) {
          uint64_t v19 = v18;
        }
        OUTLINED_FUNCTION_53_0(v19, (uint64_t)v58, v59, v9, v63, *((uint64_t *)&v63 + 1), v64, v65, v66);
        uint64_t v6 = v1;
        if (!v1)
        {
          outlined consume of Data._Representation(v15, v16);
          goto LABEL_28;
        }
        outlined consume of Data._Representation(v15, v16);
        goto LABEL_42;
      case 2uLL:
        uint64_t v20 = *(void *)(v15 + 16);
        uint64_t v2 = *(void *)(v15 + 24);
        swift_retain();
        swift_retain();
        if (__DataStorage._bytes.getter() && __OFSUB__(v20, __DataStorage._offset.getter())) {
          goto LABEL_62;
        }
        BOOL v10 = __OFSUB__(v2, v20);
        uint64_t v21 = v2 - v20;
        if (v10) {
          goto LABEL_61;
        }
        uint64_t v22 = __DataStorage._length.getter();
        if (v22 >= v21) {
          uint64_t v23 = v21;
        }
        else {
          uint64_t v23 = v22;
        }
        OUTLINED_FUNCTION_53_0(v23, (uint64_t)v58, v59, v9, v63, *((uint64_t *)&v63 + 1), v64, v65, v66);
        uint64_t v6 = v1;
        if (!v1)
        {
          swift_release();
          swift_release();
LABEL_28:
          char v24 = v69;
          char v3 = v70;
          uint64_t v25 = v71;
          outlined init with take of SessionObject?((uint64_t)v67, (uint64_t)v72, &demangling cache variable for type metadata for SessionObject?);
          uint64_t v26 = Data.advanced(by:)();
          uint64_t v2 = v27;
          outlined consume of Data._Representation(v15, v16);
          uint64_t v7 = v58;
          uint64_t *v58 = v26;
          v58[1] = v2;
          BOOL v10 = __OFADD__(v8, v25);
          v8 += v25;
          if (v10)
          {
            __break(1u);
LABEL_60:
            __break(1u);
LABEL_61:
            __break(1u);
LABEL_62:
            __break(1u);
LABEL_63:
            __break(1u);
LABEL_64:
            __break(1u);
LABEL_65:
            __break(1u);
LABEL_66:
            swift_once();
LABEL_46:
            uint64_t v29 = type metadata accessor for Logger();
            __swift_project_value_buffer(v29, (uint64_t)static Logger.siriNetwork);
            OUTLINED_FUNCTION_60_1();
            OUTLINED_FUNCTION_60_1();
            uint64_t v30 = Logger.logObject.getter();
            os_log_type_t v31 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v30, v31))
            {
              unint64_t v32 = (uint8_t *)OUTLINED_FUNCTION_12_0();
              uint64_t v61 = OUTLINED_FUNCTION_36_2();
              *(_DWORD *)unint64_t v32 = 138412290;
              lazy protocol witness table accessor for type AceSerializationError and conformance AceSerializationError();
              OUTLINED_FUNCTION_16_0();
              *(void *)uint64_t v33 = v6;
              *(void *)(v33 + 8) = v2;
              *(unsigned char *)(v33 + 16) = v3;
              OUTLINED_FUNCTION_60_1();
              uint64_t v34 = _swift_stdlib_bridgeErrorToNSError();
              OUTLINED_FUNCTION_59_0(v34, v35, v36, v37, v38, v39, v40, v41, (uint64_t)v58, (uint64_t)(v32 + 4), v61, v63, *((uint64_t *)&v63 + 1), v64, v65, v66, v34);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *unint64_t v62 = v34;
              OUTLINED_FUNCTION_61_0();
              _os_log_impl(&dword_25D6CC000, v30, v31, "CommunicationProtocol - Ace Data: Error reading Ace data %@", v32, 0xCu);
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
              OUTLINED_FUNCTION_107_0();
              OUTLINED_FUNCTION_1_2();
              OUTLINED_FUNCTION_1_2();
            }
            else
            {
              OUTLINED_FUNCTION_61_0();
            }

            lazy protocol witness table accessor for type AceSerializationError and conformance AceSerializationError();
            OUTLINED_FUNCTION_16_0();
            *(void *)uint64_t v57 = v6;
            *(void *)(v57 + 8) = v2;
            *(unsigned char *)(v57 + 16) = v3;
            swift_willThrow();

            return v8;
          }
          if (v25 <= 0)
          {
            outlined destroy of DataCompressing?((uint64_t)v72, &demangling cache variable for type metadata for SessionObject?);
            return v8;
          }
          uint64_t v9 = v60 - v25;
          if (v60 >= v25) {
            uint64_t v2 = v60 - v25;
          }
          else {
            uint64_t v2 = 0;
          }
          outlined init with copy of DataCompressing?((uint64_t)v72, (uint64_t)&v63, &demangling cache variable for type metadata for SessionObject?);
          if (v65)
          {
            outlined init with take of RPCOspreyConnectionProtocol(&v63, (uint64_t)v67);
            outlined init with copy of RPCOspreyConnectionProtocol((uint64_t)v67, (uint64_t)&v63);
            CommunicationProtocolAce.handleAceObject(_:)();
            outlined destroy of DataCompressing?((uint64_t)&v63, &demangling cache variable for type metadata for SessionObject?);
            __swift_destroy_boxed_opaque_existential_0((uint64_t)v67);
          }
          else
          {
            outlined destroy of DataCompressing?((uint64_t)&v63, &demangling cache variable for type metadata for SessionObject?);
            CommunicationProtocolAce.handlePacket(_:)(v24);
          }
          outlined destroy of DataCompressing?((uint64_t)v72, &demangling cache variable for type metadata for SessionObject?);
          if (v2 <= 0) {
            return v8;
          }
          continue;
        }
        swift_release();
        swift_release();
LABEL_42:
        unint64_t v8 = v6;
LABEL_43:
        v72[0] = v8;
        uint64_t v28 = v8;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
        if (swift_dynamicCast())
        {
          uint64_t v6 = (char *)v67[0];
          uint64_t v2 = v67[1];
          char v3 = v68;
          if (v68)
          {
            if (one-time initialization token for siriNetwork != -1) {
              goto LABEL_66;
            }
            goto LABEL_46;
          }
          if (one-time initialization token for siriNetwork != -1) {
            swift_once();
          }
          uint64_t v43 = type metadata accessor for Logger();
          CFStringRef v44 = OUTLINED_FUNCTION_7(v43, (uint64_t)static Logger.siriNetwork);
          os_log_type_t v45 = static os_log_type_t.default.getter();
          if (OUTLINED_FUNCTION_10_6(v45))
          {
            uint64_t v46 = (uint8_t *)OUTLINED_FUNCTION_12_0();
            uint64_t v47 = (void *)OUTLINED_FUNCTION_36_2();
            *(_DWORD *)uint64_t v46 = 138412290;
            lazy protocol witness table accessor for type AceSerializationError and conformance AceSerializationError();
            OUTLINED_FUNCTION_16_0();
            *(void *)uint64_t v48 = v6;
            *(void *)(v48 + 8) = v2;
            *(unsigned char *)(v48 + 16) = 0;
            uint64_t v49 = _swift_stdlib_bridgeErrorToNSError();
            OUTLINED_FUNCTION_59_0(v49, v50, v51, v52, v53, v54, v55, v56, (uint64_t)v58, v59, (uint64_t)(v46 + 4), v63, *((uint64_t *)&v63 + 1), v64, v65, v66, v49);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *uint64_t v47 = v49;
            _os_log_impl(&dword_25D6CC000, v44, (os_log_type_t)v15, "CommunicationProtocol - Ace Data: Need more data to read Ace object %@", v46, 0xCu);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            swift_arrayDestroy();
            OUTLINED_FUNCTION_1_2();
            OUTLINED_FUNCTION_1_2();
          }
          else
          {
          }
          return 0;
        }
        else
        {

          return 0;
        }
      case 3uLL:
        *(void *)((char *)&v63 + 6) = 0;
        *(void *)&long long v63 = 0;
        uint64_t v17 = &v63;
        goto LABEL_26;
      default:
        *(void *)&long long v63 = v15;
        WORD4(v63) = v16;
        BYTE10(v63) = BYTE2(v16);
        BYTE11(v63) = BYTE3(v16);
        BYTE12(v63) = BYTE4(v16);
        BYTE13(v63) = BYTE5(v16);
        uint64_t v17 = (long long *)((char *)&v63 + BYTE6(v16));
LABEL_26:
        uint64_t v1 = v6;
        closure #1 in static AceSerialization.parsePacket(data:)((uint64_t)&v63, (uint64_t)v17, (uint64_t)v67);
        if (v6)
        {
          unint64_t v8 = v6;
          goto LABEL_43;
        }
        uint64_t v6 = 0;
        goto LABEL_28;
    }
  }
}

void CommunicationProtocolAce.handlePacket(_:)(char a1)
{
  switch(a1)
  {
    case 1:
      CommunicationProtocolAce.handleAceNop()();
      break;
    case 2:
      CommunicationProtocolAce.handleAcePing(_:)();
      break;
    case 3:
      CommunicationProtocolAce.handleAcePong(_:)();
      break;
    case 4:
      CommunicationProtocolAce.handleAceEnd()();
      break;
    default:
      return;
  }
}

void CommunicationProtocolAce.handleAceObject(_:)()
{
  OUTLINED_FUNCTION_22();
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_73_0();
  outlined init with copy of DataCompressing?(v2, (uint64_t)v21, &demangling cache variable for type metadata for SessionObject?);
  if (!v21[3])
  {
    outlined destroy of DataCompressing?((uint64_t)v21, &demangling cache variable for type metadata for SessionObject?);
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionObject);
  type metadata accessor for CTServiceDescriptor(0, (unint64_t *)&lazy cache variable for type metadata for AceObject);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_9:
    if (one-time initialization token for siriNetwork != -1) {
      swift_once();
    }
    unint64_t v8 = (AceObject *)OUTLINED_FUNCTION_7(v3, (uint64_t)static Logger.siriNetwork);
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(&v8->super, v16))
    {
      uint64_t v17 = (uint8_t *)OUTLINED_FUNCTION_2_0();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl(&dword_25D6CC000, &v8->super, v16, "CommunicationProtocol - Ace object: Received SessionObject could not be cast to AceObject", v17, 2u);
      OUTLINED_FUNCTION_1_2();
    }
    goto LABEL_16;
  }
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v7 = __swift_project_value_buffer(v3, (uint64_t)static Logger.siriNetwork);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v0, v7, v3);
  unint64_t v8 = v20;
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v9, v10))
  {

    uint64_t v18 = OUTLINED_FUNCTION_95_0();
    v19(v18);
LABEL_14:
    if (CommunicationProtocolAce.aceDelegate.getter())
    {
      BackgroundConnection.didReceiveAceObject(aceObject:)(v8);
      swift_unknownObjectRelease();
    }
LABEL_16:

    OUTLINED_FUNCTION_29();
    return;
  }
  int v11 = (_DWORD *)OUTLINED_FUNCTION_12_0();
  v21[0] = swift_slowAlloc();
  *int v11 = 136315138;
  uint64_t v12 = outlined bridged method (pb) of @objc AceObject.encodedClassName()(v8);
  if (v13)
  {
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_79_0(&dword_25D6CC000, v9, v10, "CommunicationProtocol - Ace object: Connection got AceObject %s");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_1_2();
    OUTLINED_FUNCTION_1_2();

    uint64_t v14 = OUTLINED_FUNCTION_95_0();
    v15(v14);
    goto LABEL_14;
  }

  __break(1u);
}

void CommunicationProtocolAce.handleAcePing(_:)()
{
  OUTLINED_FUNCTION_26_2();
  uint64_t v1 = v0;
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = (void *)OUTLINED_FUNCTION_7(v2, (uint64_t)static Logger.siriNetwork);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (OUTLINED_FUNCTION_9(v4))
  {
    uint64_t v5 = (float *)OUTLINED_FUNCTION_65_0();
    OUTLINED_FUNCTION_71_0(v5, 1.5047e-36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_34_4(&dword_25D6CC000, v6, v7, "CommunicationProtocol - Ace pings: Connection got ping %u");
    OUTLINED_FUNCTION_1_2();
  }

  CommunicationProtocolAce.sendAcePong(withId:)(v1);
  OUTLINED_FUNCTION_16_4();
}

void CommunicationProtocolAce.handleAcePong(_:)()
{
  OUTLINED_FUNCTION_26_2();
  uint64_t v1 = v0;
  Swift::UInt32 v3 = v2;
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = (void *)OUTLINED_FUNCTION_7(v4, (uint64_t)static Logger.siriNetwork);
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (OUTLINED_FUNCTION_9(v6))
  {
    uint64_t v7 = (float *)OUTLINED_FUNCTION_65_0();
    OUTLINED_FUNCTION_71_0(v7, 1.5047e-36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_34_4(&dword_25D6CC000, v8, v9, "CommunicationProtocol - Ace pings: Connection got pong %u");
    OUTLINED_FUNCTION_1_2();
  }

  if (v3 <= 0xFFFE795F)
  {
    if (*(void *)(v1 + 240))
    {
      swift_retain();
      PingInfo.markPongReceived(withIndex:)(v3);
      swift_release();
    }
  }
  else
  {
    CommunicationProtocolAce.handleBarrierReply(barrierValue:)(v3);
  }
  OUTLINED_FUNCTION_16_4();
}

uint64_t CommunicationProtocolAce.handleAceEnd()()
{
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  Swift::UInt32 v3 = OUTLINED_FUNCTION_7(v2, (uint64_t)static Logger.siriNetwork);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (_WORD *)OUTLINED_FUNCTION_2_0();
    OUTLINED_FUNCTION_55_0(v5);
    _os_log_impl(&dword_25D6CC000, v3, v4, "CommunicationProtocol - Ace object: Connection got Ace end. Terminating connection", v1, 2u);
    OUTLINED_FUNCTION_1_2();
  }

  OUTLINED_FUNCTION_24_2();
  unint64_t v6 = v0[6];
  if (v6 >> 60 != 15)
  {
    uint64_t v7 = v0[5];
    outlined copy of Data._Representation(v7, v0[6]);
    uint64_t v8 = Data.count.getter();
    outlined consume of Data?(v7, v6);
    if (v8 > 0) {
      goto LABEL_10;
    }
  }
  if ((OUTLINED_FUNCTION_24_2(), unint64_t v9 = v0[10], v9 >> 60 != 15)
    && (uint64_t v10 = v0[9],
        outlined copy of Data._Representation(v10, v0[10]),
        uint64_t v11 = Data.count.getter(),
        outlined consume of Data?(v10, v9),
        v11 > 0)
    || v0[28])
  {
LABEL_10:
    uint64_t v12 = (void *)Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_2_17(v13))
    {
      uint64_t v14 = (_WORD *)OUTLINED_FUNCTION_2_0();
      OUTLINED_FUNCTION_5_10(v14);
      OUTLINED_FUNCTION_1_21(&dword_25D6CC000, v15, v16, "CommunicationProtocol - Ace object: Ace end is unexpected, returning error");
      OUTLINED_FUNCTION_1_2();
    }

    if (CommunicationProtocolAce.aceDelegate.getter())
    {
      lazy protocol witness table accessor for type BackgroundConnectionError and conformance BackgroundConnectionError();
      uint64_t v17 = (void *)OUTLINED_FUNCTION_16_0();
      *(void *)uint64_t v18 = 1;
      *(void *)(v18 + 8) = 0;
      *(void *)(v18 + 16) = 0;
      *(void *)(v18 + 24) = 0;
      *(unsigned char *)(v18 + 32) = 4;
      BackgroundConnection.didEncounterError(_:)(v17);
      swift_unknownObjectRelease();
    }
  }
  uint64_t result = CommunicationProtocolAce.aceDelegate.getter();
  if (result)
  {
    BackgroundConnection.cancel()();
    return swift_unknownObjectRelease();
  }
  return result;
}

void CommunicationProtocolAce.handleAceNop()()
{
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  os_log_t oslog = OUTLINED_FUNCTION_7(v0, (uint64_t)static Logger.siriNetwork);
  os_log_type_t v1 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    uint64_t v2 = (uint8_t *)OUTLINED_FUNCTION_2_0();
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl(&dword_25D6CC000, oslog, v1, "CommunicationProtocol - Ace object: Connection got nop", v2, 2u);
    OUTLINED_FUNCTION_1_2();
  }
}

void CommunicationProtocolAce.aceHeaderTimeoutFired(fromTimer:afterTimeout:)(uint64_t a1, double a2)
{
  uint64_t v5 = *(void *)(v2 + 192);
  if (v5) {
    BOOL v6 = v5 == a1;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    uint64_t v7 = v2;
    uint64_t v9 = CommunicationProtocolAce.aceDelegate.getter();
    if (v9)
    {
      uint64_t v10 = v9;
      *(void *)(v2 + 192) = 0;
      swift_unknownObjectRelease();
      uint64_t v11 = *(void *)(v2 + 200);
      BOOL v12 = __CFADD__(v11, 1);
      uint64_t v13 = v11 + 1;
      if (v12)
      {
        __break(1u);
        goto LABEL_48;
      }
      *(void *)(v2 + 200) = v13;
      OUTLINED_FUNCTION_24_2();
      outlined init with copy of DataCompressing?(v2 + 112, (uint64_t)v46, &demangling cache variable for type metadata for DataDecompressing?);
      uint64_t v14 = v47;
      outlined destroy of DataCompressing?((uint64_t)v46, &demangling cache variable for type metadata for DataDecompressing?);
      if (v14)
      {
LABEL_34:
        swift_unknownObjectRelease();
        return;
      }
      if (*(unsigned char *)(v10 + 1185) != 1 || *(void *)(v7 + 200) > 1uLL)
      {
        uint64_t v3 = 0;
        int v4 = 0;
        goto LABEL_24;
      }
      if (BackgroundConnection.isUsingPop()())
      {
        OUTLINED_FUNCTION_85_0();
        if (!v6) {
          swift_once();
        }
        uint64_t v15 = type metadata accessor for Logger();
        uint64_t v16 = OUTLINED_FUNCTION_7(v15, (uint64_t)static Logger.siriNetwork);
        os_log_type_t v17 = static os_log_type_t.error.getter();
        if (!OUTLINED_FUNCTION_9(v17)) {
          goto LABEL_23;
        }
        uint64_t v18 = (uint8_t *)OUTLINED_FUNCTION_2_0();
        *(_WORD *)uint64_t v18 = 0;
        uint64_t v19 = "CommunicationProtocol - Ace header: Ace header timeout while using POP Connection Method";
LABEL_22:
        _os_log_impl(&dword_25D6CC000, v16, (os_log_type_t)&demangling cache variable for type metadata for DataDecompressing?, v19, v18, 2u);
        OUTLINED_FUNCTION_1_2();
LABEL_23:

        uint64_t v3 = 0;
        int v4 = 1;
        goto LABEL_24;
      }
      if (BackgroundConnection.isUsingFlorence()())
      {
        OUTLINED_FUNCTION_85_0();
        if (!v6) {
          swift_once();
        }
        uint64_t v20 = type metadata accessor for Logger();
        uint64_t v16 = OUTLINED_FUNCTION_7(v20, (uint64_t)static Logger.siriNetwork);
        os_log_type_t v21 = static os_log_type_t.error.getter();
        if (!OUTLINED_FUNCTION_9(v21)) {
          goto LABEL_23;
        }
        uint64_t v18 = (uint8_t *)OUTLINED_FUNCTION_2_0();
        *(_WORD *)uint64_t v18 = 0;
        uint64_t v19 = "CommunicationProtocol - Ace header: Ace header timeout while using Florence";
        goto LABEL_22;
      }
      if (BackgroundConnection.isUsingPeer()() && BackgroundConnection.isWifiOrCellularMaybeBetterThanCurrentStream()())
      {
        int v4 = 0;
        uint64_t v3 = 1;
LABEL_24:
        OUTLINED_FUNCTION_85_0();
        if (v6)
        {
LABEL_26:
          uint64_t v22 = type metadata accessor for Logger();
          uint64_t v23 = (void *)OUTLINED_FUNCTION_7(v22, (uint64_t)static Logger.siriNetwork);
          os_log_type_t v24 = static os_log_type_t.error.getter();
          if (OUTLINED_FUNCTION_2_17(v24))
          {
            uint64_t v25 = (_WORD *)OUTLINED_FUNCTION_2_0();
            OUTLINED_FUNCTION_5_10(v25);
            OUTLINED_FUNCTION_1_21(&dword_25D6CC000, v26, v27, "CommunicationProtocol - Ace header: Ace header timeout error");
            OUTLINED_FUNCTION_1_2();
          }

          lazy protocol witness table accessor for type BackgroundConnectionError and conformance BackgroundConnectionError();
          uint64_t v28 = (void *)OUTLINED_FUNCTION_16_0();
          uint64_t v30 = v28;
          uint64_t v31 = 256;
          if (!v4) {
            uint64_t v31 = v3;
          }
          *(void *)uint64_t v29 = v31;
          *(void *)(v29 + 8) = 0;
          if (v4) {
            char v32 = 3;
          }
          else {
            char v32 = 1;
          }
          *(void *)(v29 + 16) = 0;
          *(void *)(v29 + 24) = 0;
          *(unsigned char *)(v29 + 32) = v32;
          BackgroundConnection.fallbackToNextConnectionMethod(error:)(v28);

          goto LABEL_34;
        }
LABEL_48:
        swift_once();
        goto LABEL_26;
      }
      OUTLINED_FUNCTION_85_0();
      if (!v6) {
        swift_once();
      }
      uint64_t v33 = type metadata accessor for Logger();
      __swift_project_value_buffer(v33, (uint64_t)static Logger.siriNetwork);
      uint64_t v34 = (void *)Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.error.getter();
      if (OUTLINED_FUNCTION_24_0(v35))
      {
        uint64_t v36 = (_WORD *)OUTLINED_FUNCTION_2_0();
        OUTLINED_FUNCTION_47_1(v36);
        OUTLINED_FUNCTION_20_3(&dword_25D6CC000, v37, v38, "CommunicationProtocol - Ace header: Rescheduling aceheader timeout since wifi isn't available or bt link is ok");
        OUTLINED_FUNCTION_1_2();
      }

      CommunicationProtocolAce.scheduleAceHeaderTimeout(withInterval:)(30.0 - a2);
      if ((*(unsigned char *)(v10 + 1185) & 1) == 0) {
        goto LABEL_34;
      }
      uint64_t v39 = (void *)Logger.logObject.getter();
      os_log_type_t v40 = static os_log_type_t.error.getter();
      if (OUTLINED_FUNCTION_2_17(v40))
      {
        uint64_t v41 = (_WORD *)OUTLINED_FUNCTION_2_0();
        OUTLINED_FUNCTION_5_10(v41);
        OUTLINED_FUNCTION_1_21(&dword_25D6CC000, v42, v43, "CommunicationProtocol - Ace header: Ace header timeout Intermediate error");
        OUTLINED_FUNCTION_1_2();
      }

      lazy protocol witness table accessor for type BackgroundConnectionError and conformance BackgroundConnectionError();
      CFStringRef v44 = (void *)OUTLINED_FUNCTION_16_0();
      *(_OWORD *)uint64_t v45 = 0u;
      *(_OWORD *)(v45 + 16) = 0u;
      *(unsigned char *)(v45 + 32) = 1;
      BackgroundConnection.didEncounterIntermediateError(_:)();
      swift_unknownObjectRelease();
    }
  }
}

void CommunicationProtocolAce.pingTimerFired()()
{
  uint64_t v2 = v0;
  uint64_t v3 = v0 + 5;
  OUTLINED_FUNCTION_24_2();
  unint64_t v4 = v2[6];
  OUTLINED_FUNCTION_45_1();
  if (!(!v6 & v5))
  {
    uint64_t v7 = *v3;
    outlined copy of Data._Representation(v7, v4);
    uint64_t v8 = Data.count.getter();
    outlined consume of Data?(v7, v4);
    if (v8 > 0) {
      goto LABEL_5;
    }
  }
  OUTLINED_FUNCTION_24_2();
  unint64_t v9 = v2[10];
  OUTLINED_FUNCTION_45_1();
  if (!v6 & v5
    || (uint64_t v10 = v2[9],
        outlined copy of Data._Representation(v10, v9),
        uint64_t v11 = Data.count.getter(),
        outlined consume of Data?(v10, v9),
        v11 < 1))
  {
    CommunicationProtocolAce.checkPings()();
  }
  else
  {
LABEL_5:
    uint64_t v12 = CommunicationProtocolAce.checkForProgressOnReadingData()();
  }
  unint64_t v13 = v12;
  if (CommunicationProtocolAce.aceDelegate.getter())
  {
    if (((v13 & 2) == 0 || !BackgroundConnection.shouldFallbackQuickly()()) && (v13 & 4) == 0)
    {
      if (v13 >= 8)
      {
        int v14 = 0;
        if ((v13 & 1) == 0) {
          goto LABEL_33;
        }
        goto LABEL_24;
      }
      goto LABEL_25;
    }
    if (!BackgroundConnection.isUsingPeer()())
    {
      if (BackgroundConnection.isUsingPop()() || BackgroundConnection.isUsingFlorence()())
      {
        if (one-time initialization token for siriNetwork != -1) {
          swift_once();
        }
        uint64_t v16 = type metadata accessor for Logger();
        os_log_type_t v17 = (void *)OUTLINED_FUNCTION_7(v16, (uint64_t)static Logger.siriNetwork);
        os_log_type_t v18 = static os_log_type_t.default.getter();
        if (OUTLINED_FUNCTION_24_0(v18))
        {
          uint64_t v19 = (_WORD *)OUTLINED_FUNCTION_2_0();
          OUTLINED_FUNCTION_47_1(v19);
          OUTLINED_FUNCTION_20_3(&dword_25D6CC000, v20, v21, "CommunicationProtocol - Ace pings: Ping timeout while using POP or Florence method");
          OUTLINED_FUNCTION_1_2();
        }

        int v14 = 1;
        if ((v13 & 1) == 0) {
          goto LABEL_33;
        }
LABEL_24:
        char v22 = 1;
        goto LABEL_27;
      }
LABEL_25:
      if ((v13 & 1) == 0) {
        goto LABEL_48;
      }
      int v14 = 0;
      char v22 = 0;
LABEL_27:
      if ((!BackgroundConnection.isUsingPop()() || BackgroundConnection.isUsingPeer()())
        && BackgroundConnection.logTcpInfoIndicatesPoorLinkQuality()())
      {
        uint64_t v23 = v2[30];
        if (v23)
        {
          Swift::Int v24 = PingInfo.totalPingCount()();
          Swift::Int v25 = PingInfo.numberOfUnacknowledgedPings()();
        }
        else
        {
          Swift::Int v25 = 0;
          Swift::Int v24 = 0;
        }
        BOOL v46 = v23 == 0;
        lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
        os_log_type_t v1 = (void *)OUTLINED_FUNCTION_16_0();
        *uint64_t v47 = v24;
        v47[1] = v46;
        void v47[2] = v25;
        v47[3] = v46 | 0x3000000000000000;
        v47[4] = 0;
        BackgroundConnection.didEncounterIntermediateError(_:)();

        uint64_t v15 = 0;
        if (v22) {
          goto LABEL_34;
        }
      }
      else if (v22)
      {
LABEL_33:
        uint64_t v15 = 0;
        goto LABEL_34;
      }
LABEL_48:
      swift_unknownObjectRelease();
      return;
    }
    if (BackgroundConnection.isWifiOrCellularMaybeBetterThanCurrentStream()())
    {
      int v14 = 0;
      uint64_t v15 = 1;
LABEL_34:
      if (one-time initialization token for siriNetwork != -1) {
        swift_once();
      }
      uint64_t v26 = type metadata accessor for Logger();
      uint64_t v27 = OUTLINED_FUNCTION_7(v26, (uint64_t)static Logger.siriNetwork);
      os_log_type_t v28 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v27, v28))
      {
        uint64_t v29 = (_WORD *)OUTLINED_FUNCTION_2_0();
        OUTLINED_FUNCTION_47_1(v29);
        _os_log_impl(&dword_25D6CC000, v27, v28, "CommunicationProtocol - Ace pings: Ping timeout", (uint8_t *)v1, 2u);
        OUTLINED_FUNCTION_1_2();
      }

      if (v2[13])
      {
        uint64_t v30 = (void *)Logger.logObject.getter();
        os_log_type_t v31 = static os_log_type_t.default.getter();
        if (OUTLINED_FUNCTION_2_17(v31))
        {
          char v32 = (_WORD *)OUTLINED_FUNCTION_2_0();
          OUTLINED_FUNCTION_5_10(v32);
          OUTLINED_FUNCTION_1_21(&dword_25D6CC000, v33, v34, "CommunicationProtocol - Ace pings: Overriding ping error since we haven't read our http header yet");
          OUTLINED_FUNCTION_1_2();
        }

        lazy protocol witness table accessor for type BackgroundConnectionError and conformance BackgroundConnectionError();
        uint64_t v36 = (void *)OUTLINED_FUNCTION_16_0();
        if (v14)
        {
          *(void *)uint64_t v35 = v15 | 0x100;
          char v37 = 3;
        }
        else
        {
          *(void *)uint64_t v35 = v15;
          char v37 = 1;
        }
      }
      else
      {
        uint64_t v38 = 256;
        if (!v14) {
          uint64_t v38 = 0;
        }
        uint64_t v39 = v38 | v15;
        lazy protocol witness table accessor for type BackgroundConnectionError and conformance BackgroundConnectionError();
        uint64_t v36 = (void *)OUTLINED_FUNCTION_16_0();
        *(void *)uint64_t v35 = v39;
        char v37 = 2;
      }
      *(void *)(v35 + 8) = 0;
      *(void *)(v35 + 16) = 0;
      *(void *)(v35 + 24) = 0;
      *(unsigned char *)(v35 + 32) = v37;
      BackgroundConnection.fallbackToNextConnectionMethod(error:)(v36);

      goto LABEL_48;
    }
    if (one-time initialization token for siriNetwork != -1) {
      swift_once();
    }
    uint64_t v40 = type metadata accessor for Logger();
    uint64_t v41 = (void *)OUTLINED_FUNCTION_7(v40, (uint64_t)static Logger.siriNetwork);
    os_log_type_t v42 = static os_log_type_t.default.getter();
    if (OUTLINED_FUNCTION_2_17(v42))
    {
      uint64_t v43 = (_WORD *)OUTLINED_FUNCTION_2_0();
      OUTLINED_FUNCTION_5_10(v43);
      OUTLINED_FUNCTION_1_21(&dword_25D6CC000, v44, v45, "CommunicationProtocol - Ace pings: Ignoring Ping timeout since wifi isn't available to fallback to");
      OUTLINED_FUNCTION_1_2();
    }
    swift_unknownObjectRelease();
  }
}

void CommunicationProtocolAce.checkPings()()
{
  OUTLINED_FUNCTION_26_2();
  int v3 = *(_DWORD *)(v1 + 232);
  BOOL v4 = __CFADD__(v3, 1);
  unsigned int v5 = v3 + 1;
  if (v4)
  {
    __break(1u);
    swift_once();
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.siriNetwork);
    swift_retain();
    uint64_t v8 = (void *)Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_9(v9))
    {
      uint64_t v10 = (float *)OUTLINED_FUNCTION_65_0();
      OUTLINED_FUNCTION_71_0(v10, 1.5047e-36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      OUTLINED_FUNCTION_34_4(&dword_25D6CC000, v11, v12, "CommunicationProtocol - Ace pings: Error sending Ace Ping %u");
      OUTLINED_FUNCTION_1_2();
    }
    else
    {
      swift_release();
    }
  }
  else
  {
    uint64_t v0 = v1;
    if (v5 <= 0xFFFE795F) {
      unsigned int v6 = v5;
    }
    else {
      unsigned int v6 = 0;
    }
    *(_DWORD *)(v1 + 232) = v6;
    CommunicationProtocolAce.sendAcePing(withId:)();
  }
  if (*(void *)(v0 + 240)
    || (type metadata accessor for PingInfo(),
        swift_allocObject(),
        *(void *)(v0 + 240) = PingInfo.init(pingAcknowledgedCount:avgPingTime:)(0, 0.0),
        swift_release(),
        *(void *)(v0 + 240)))
  {
    Swift::UInt32 v13 = *(_DWORD *)(v0 + 232);
    swift_retain();
    PingInfo.markPingSent(withIndex:)(v13);
    swift_release();
    if (*(void *)(v0 + 240)) {
      PingInfo.numberOfUnacknowledgedPings()();
    }
  }
  OUTLINED_FUNCTION_16_4();
}

uint64_t CommunicationProtocolAce.checkForProgressOnReadingData()()
{
  void (*v5)(unsigned __int8 *__return_ptr, uint64_t *, char *, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void (*v19)(unsigned __int8 *__return_ptr, uint64_t *, char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t result;
  uint64_t v36;

  OUTLINED_FUNCTION_24_2();
  unint64_t v2 = v0[6];
  OUTLINED_FUNCTION_45_1();
  if (!(!v34 & v3))
  {
    uint64_t v4 = v0[5];
    OUTLINED_FUNCTION_54_1();
    switch(v2 >> 62)
    {
      case 1uLL:
        if (v4 >> 32 < (int)v4) {
          goto LABEL_38;
        }
        uint64_t v1 = (int)v4;
        OUTLINED_FUNCTION_54_1();
        outlined copy of Data?(v4, v2);
        swift_retain();
        Swift::UInt32 v13 = outlined copy of Data?(v4, v2);
        OUTLINED_FUNCTION_90_0(v13, v14, v15, v16, (void (*)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))closure #1 in CommunicationProtocolAce.checkForProgressOnReadingData());
        OUTLINED_FUNCTION_9_1();
        break;
      case 2uLL:
        uint64_t v1 = *(void *)(v4 + 16);
        OUTLINED_FUNCTION_54_1();
        outlined copy of Data?(v4, v2);
        swift_retain();
        os_log_type_t v9 = swift_retain();
        OUTLINED_FUNCTION_88_0(v9, v10, v11, v12, (void (*)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))closure #1 in CommunicationProtocolAce.checkForProgressOnReadingData());
        swift_release();
        swift_release();
        OUTLINED_FUNCTION_9_1();
        goto LABEL_10;
      case 3uLL:
        swift_retain_n();
        unsigned int v6 = OUTLINED_FUNCTION_41_1();
        goto LABEL_6;
      default:
        OUTLINED_FUNCTION_99_0();
        unsigned int v5 = (void (*)(unsigned __int8 *__return_ptr, uint64_t *, char *, uint64_t))closure #1 in CommunicationProtocolAce.checkForProgressOnReadingData();
        unsigned int v6 = v4;
        uint64_t v7 = v1;
        uint64_t v8 = v2 >> 62;
LABEL_6:
        _ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_A13Et_sAC_pytSgTg5037_s10Foundation4DataV06InlineB0V15withB33BytesyxxSWKXEKlFxSWKXEfU_ytSg_TG5SWxsAC_pRi_zRi0_zlyAFIsgyrzo_SiTf1nc_n0129_s11SiriNetwork24CommunicationProtocolAceC29checkForProgressOnReadingData33_66EA1B3E09C1242C99E70AFFE1E0A77ALLAA10PingStatusVyFytS8SWXEfU0_0V7Network0xyZ0CTf1ncn_nTm(v6, v7, v8, (uint64_t)v0, v5);
        break;
    }
    outlined consume of Data?(v4, v2);
    swift_release();
LABEL_10:
    swift_release_n();
  }
  OUTLINED_FUNCTION_24_2();
  os_log_type_t v17 = v0[10];
  OUTLINED_FUNCTION_45_1();
  if (!(!v34 & v3))
  {
    os_log_type_t v18 = v0[9];
    OUTLINED_FUNCTION_54_1();
    switch(v17 >> 62)
    {
      case 1uLL:
        if (v18 >> 32 < (int)v18) {
          goto LABEL_39;
        }
        OUTLINED_FUNCTION_54_1();
        outlined copy of Data?(v18, v17);
        swift_retain();
        uint64_t v27 = outlined copy of Data?(v18, v17);
        OUTLINED_FUNCTION_90_0(v27, v28, v29, v30, (void (*)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))closure #2 in CommunicationProtocolAce.checkForProgressOnReadingData());
        OUTLINED_FUNCTION_9_1();
        break;
      case 2uLL:
        OUTLINED_FUNCTION_54_1();
        outlined copy of Data?(v18, v17);
        swift_retain();
        uint64_t v23 = swift_retain();
        OUTLINED_FUNCTION_88_0(v23, v24, v25, v26, (void (*)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))closure #2 in CommunicationProtocolAce.checkForProgressOnReadingData());
        swift_release();
        swift_release();
        OUTLINED_FUNCTION_9_1();
        goto LABEL_20;
      case 3uLL:
        swift_retain_n();
        uint64_t v20 = OUTLINED_FUNCTION_41_1();
        goto LABEL_16;
      default:
        OUTLINED_FUNCTION_99_0();
        uint64_t v19 = (void (*)(unsigned __int8 *__return_ptr, uint64_t *, char *, uint64_t))closure #2 in CommunicationProtocolAce.checkForProgressOnReadingData();
        uint64_t v20 = v18;
        uint64_t v21 = v1;
        char v22 = v17 >> 62;
LABEL_16:
        _ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_A13Et_sAC_pytSgTg5037_s10Foundation4DataV06InlineB0V15withB33BytesyxxSWKXEKlFxSWKXEfU_ytSg_TG5SWxsAC_pRi_zRi0_zlyAFIsgyrzo_SiTf1nc_n0129_s11SiriNetwork24CommunicationProtocolAceC29checkForProgressOnReadingData33_66EA1B3E09C1242C99E70AFFE1E0A77ALLAA10PingStatusVyFytS8SWXEfU0_0V7Network0xyZ0CTf1ncn_nTm(v20, v21, v22, (uint64_t)v0, v19);
        break;
    }
    outlined consume of Data?(v18, v17);
    swift_release();
LABEL_20:
    swift_release_n();
  }
  os_log_type_t v31 = v0[36];
  char v32 = v0[39];
  uint64_t v33 = v31 + v32;
  if (__OFADD__(v31, v32))
  {
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
    swift_release_n();
    __break(1u);
    swift_release_n();
    OUTLINED_FUNCTION_9_1();
    __break(1u);
    JUMPOUT(0x25D72FB3CLL);
  }
  uint64_t v34 = v33 == 1;
  if (v33 < 1)
  {
    if (v31 <= 9 && v32 < 10) {
      return 0;
    }
    else {
      return 12;
    }
  }
  else
  {
    uint64_t result = v33 != 1;
    uint64_t v36 = 12;
    if (!v34) {
      uint64_t v36 = 13;
    }
    if (v31 > 9 || v32 >= 10) {
      return v36;
    }
  }
  return result;
}

void closure #1 in CommunicationProtocolAce.checkForProgressOnReadingData()(uint64_t a1@<X0>, void *a2@<X2>, unsigned char *a3@<X8>)
{
  if (!a1) {
    goto LABEL_24;
  }
  uint64_t v34 = a3;
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.siriNetwork);
  swift_retain_n();
  unsigned int v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    v35[0] = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    uint64_t v36 = a2[34];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsafeRawPointer?);
    uint64_t v10 = Optional.debugDescription.getter();
    uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_25D6CC000, v6, v7, "CommunicationProtocol - Ace objects: lastInputDataPointer %s", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2611B3750](v9, -1, -1);
    MEMORY[0x2611B3750](v8, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    int v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    v35[0] = v15;
    *(_DWORD *)int v14 = 136315138;
    uint64_t v36 = a1;
    uint64_t v16 = _Pointer.debugDescription.getter();
    uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_25D6CC000, v12, v13, "CommunicationProtocol - Ace objects: baseAddress %s", v14, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2611B3750](v15, -1, -1);
    MEMORY[0x2611B3750](v14, -1, -1);
  }

  uint64_t v18 = a2[34];
  if (!v18 || v18 != a1)
  {
    a2[35] = 0;
    a2[36] = 0;
    a2[34] = a1;
LABEL_23:
    a3 = v34;
LABEL_24:
    *a3 = 0;
    return;
  }
  swift_beginAccess();
  uint64_t v19 = 0;
  unint64_t v20 = a2[6];
  if (v20 >> 60 == 15
    || (uint64_t v21 = a2[5],
        outlined copy of Data._Representation(v21, a2[6]),
        uint64_t v19 = Data.count.getter(),
        outlined consume of Data?(v21, v20),
        v19 < 1)
    || v19 != a2[35])
  {
    a2[36] = 0;
    Swift::Int v25 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v25, v33))
    {
LABEL_21:

LABEL_22:
      a2[35] = v19;
      goto LABEL_23;
    }
    uint64_t v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v27 = 0;
    os_log_type_t v28 = "CommunicationProtocol - Ace objects: Reset Input Unchanged Counter to 0";
    uint64_t v29 = v25;
    os_log_type_t v30 = v33;
    os_log_type_t v31 = v27;
    uint32_t v32 = 2;
LABEL_20:
    _os_log_impl(&dword_25D6CC000, v29, v30, v28, v31, v32);
    MEMORY[0x2611B3750](v27, -1, -1);
    goto LABEL_21;
  }
  uint64_t v22 = a2[36];
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (!v23)
  {
    a2[36] = v24;
    swift_retain();
    Swift::Int v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v25, v26))
    {

      swift_release();
      goto LABEL_22;
    }
    uint64_t v27 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v27 = 134217984;
    uint64_t v36 = a2[36];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    os_log_type_t v28 = "CommunicationProtocol - Ace objects: Incremented Input Unchanged Counter to %ld";
    uint64_t v29 = v25;
    os_log_type_t v30 = v26;
    os_log_type_t v31 = v27;
    uint32_t v32 = 12;
    goto LABEL_20;
  }
  __break(1u);
}

void closure #2 in CommunicationProtocolAce.checkForProgressOnReadingData()(uint64_t a1@<X0>, void *a2@<X2>, unsigned char *a3@<X8>)
{
  if (a1)
  {
    uint64_t v5 = a2[37];
    if (v5) {
      BOOL v6 = v5 == a1;
    }
    else {
      BOOL v6 = 0;
    }
    if (!v6)
    {
      a2[38] = 0;
      a2[39] = 0;
      a2[37] = a1;
      goto LABEL_21;
    }
    swift_beginAccess();
    uint64_t v7 = 0;
    unint64_t v8 = a2[10];
    if (v8 >> 60 == 15
      || (uint64_t v9 = a2[9],
          outlined copy of Data._Representation(v9, a2[10]),
          uint64_t v7 = Data.count.getter(),
          outlined consume of Data?(v9, v8),
          v7 < 1)
      || v7 != a2[38])
    {
      a2[39] = 0;
      if (one-time initialization token for siriNetwork != -1) {
        swift_once();
      }
      uint64_t v22 = type metadata accessor for Logger();
      __swift_project_value_buffer(v22, (uint64_t)static Logger.siriNetwork);
      int v14 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v14, v23)) {
        goto LABEL_19;
      }
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      unint64_t v17 = "CommunicationProtocol - Ace objects: Reset Output Unchanged Counter to 0";
      uint64_t v18 = v14;
      os_log_type_t v19 = v23;
      unint64_t v20 = v16;
      uint32_t v21 = 2;
LABEL_18:
      _os_log_impl(&dword_25D6CC000, v18, v19, v17, v20, v21);
      MEMORY[0x2611B3750](v16, -1, -1);
LABEL_19:

LABEL_20:
      a2[38] = v7;
      goto LABEL_21;
    }
    uint64_t v10 = a2[39];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11)
    {
      __break(1u);
    }
    else
    {
      a2[39] = v12;
      if (one-time initialization token for siriNetwork == -1)
      {
LABEL_12:
        uint64_t v13 = type metadata accessor for Logger();
        __swift_project_value_buffer(v13, (uint64_t)static Logger.siriNetwork);
        swift_retain();
        int v14 = Logger.logObject.getter();
        os_log_type_t v15 = static os_log_type_t.default.getter();
        if (!os_log_type_enabled(v14, v15))
        {

          swift_release();
          goto LABEL_20;
        }
        uint64_t v16 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v16 = 134217984;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        unint64_t v17 = "CommunicationProtocol - Ace objects: Incremented Output Unchanged Counter to %ld";
        uint64_t v18 = v14;
        os_log_type_t v19 = v15;
        unint64_t v20 = v16;
        uint32_t v21 = 12;
        goto LABEL_18;
      }
    }
    swift_once();
    goto LABEL_12;
  }
LABEL_21:
  *a3 = 0;
}

#error "25D7302C8: call analysis failed (funcsize=8)"

#error "25D7302EC: call analysis failed (funcsize=8)"

void CommunicationProtocolAce.sendAcePing(withId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  OUTLINED_FUNCTION_83_0();
  a33 = v37;
  a34 = v38;
  char v40 = v39;
  os_log_type_t v42 = v41;
  uint64_t v43 = v34;
  uint64_t v45 = v44;
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v46 = type metadata accessor for Logger();
  uint64_t v47 = OUTLINED_FUNCTION_7(v46, (uint64_t)static Logger.siriNetwork);
  os_log_type_t v48 = static os_log_type_t.default.getter();
  if (OUTLINED_FUNCTION_10_6(v48))
  {
    uint64_t v49 = (float *)OUTLINED_FUNCTION_36_2();
    OUTLINED_FUNCTION_72(v49, 1.5047e-36);
    a18 = v45;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_25D6CC000, v47, v36, v42, (uint8_t *)v49, 8u);
    OUTLINED_FUNCTION_1_2();
  }

  uint64_t v50 = static AceDataHeader.createHeaderData(forType:lengthOrIdentifier:)(v40, v45);
  unint64_t v52 = v51;
  OUTLINED_FUNCTION_110_0();
  outlined init with copy of DataCompressing?(v43 + 152, (uint64_t)&a18, &demangling cache variable for type metadata for DataCompressing?);
  if (!a21)
  {
    outlined destroy of DataCompressing?((uint64_t)&a18, &demangling cache variable for type metadata for DataCompressing?);
    uint64_t v57 = 0;
    unint64_t v58 = 0xF000000000000000;
    goto LABEL_10;
  }
  outlined init with copy of RPCOspreyConnectionProtocol((uint64_t)&a18, (uint64_t)&a10);
  outlined destroy of DataCompressing?((uint64_t)&a18, &demangling cache variable for type metadata for DataCompressing?);
  __swift_project_boxed_opaque_existential_1(&a10, a13);
  uint64_t v53 = OUTLINED_FUNCTION_97_0();
  uint64_t v55 = v54(v53);
  if (!v35)
  {
    uint64_t v57 = v55;
    unint64_t v58 = v56;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&a10);
    if (v58 >> 60 != 15)
    {
      uint64_t v61 = OUTLINED_FUNCTION_66_0();
      outlined copy of Data._Representation(v61, v62);
      if (CommunicationProtocolAce.aceDelegate.getter())
      {
        uint64_t v63 = OUTLINED_FUNCTION_66_0();
        BackgroundConnection.connectionSendData(_:)(v63, v64);
        outlined consume of Data?(v57, v58);
        swift_unknownObjectRelease();
      }
      else
      {
        outlined consume of Data?(v57, v58);
      }
      goto LABEL_11;
    }
LABEL_10:
    lazy protocol witness table accessor for type BackgroundConnectionError and conformance BackgroundConnectionError();
    uint64_t v59 = OUTLINED_FUNCTION_16_0();
    OUTLINED_FUNCTION_43_0(v59, v60);
LABEL_11:
    outlined consume of Data?(v57, v58);
    outlined consume of Data?(v50, v52);
    goto LABEL_12;
  }
  outlined consume of Data?(v50, v52);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&a10);
LABEL_12:
  OUTLINED_FUNCTION_57_1();
}

void CommunicationProtocolAce.cancelPingTimer()()
{
  if (*(void *)(v0 + 224))
  {
    uint64_t v1 = v0;
    uint64_t v2 = one-time initialization token for siriNetwork;
    swift_unknownObjectRetain();
    if (v2 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    uint64_t v4 = (void *)OUTLINED_FUNCTION_7(v3, (uint64_t)static Logger.siriNetwork);
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (OUTLINED_FUNCTION_9(v5))
    {
      BOOL v6 = (_WORD *)OUTLINED_FUNCTION_2_0();
      OUTLINED_FUNCTION_55_0(v6);
      OUTLINED_FUNCTION_3_0(&dword_25D6CC000, v7, v8, "CommunicationProtocol - Ping: Ping timer cancelled.");
      OUTLINED_FUNCTION_1_2();
    }

    swift_getObjectType();
    OS_dispatch_source.cancel()();
    swift_unknownObjectRelease();
    *(void *)(v1 + 224) = 0;
    swift_unknownObjectRelease();
  }
}

void CommunicationProtocolAce.cancelAceHeaderTimeoutTimer()()
{
  if (*(void *)(v0 + 192))
  {
    uint64_t v1 = v0;
    uint64_t v2 = one-time initialization token for siriNetwork;
    swift_unknownObjectRetain();
    if (v2 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    uint64_t v4 = (void *)OUTLINED_FUNCTION_7(v3, (uint64_t)static Logger.siriNetwork);
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (OUTLINED_FUNCTION_9(v5))
    {
      BOOL v6 = (_WORD *)OUTLINED_FUNCTION_2_0();
      OUTLINED_FUNCTION_55_0(v6);
      OUTLINED_FUNCTION_3_0(&dword_25D6CC000, v7, v8, "CommunicationProtocol - Ace header: Ace header timeout timer cancelled.");
      OUTLINED_FUNCTION_1_2();
    }

    swift_getObjectType();
    OS_dispatch_source.cancel()();
    swift_unknownObjectRelease();
    *(void *)(v1 + 192) = 0;
    swift_unknownObjectRelease();
  }
}

uint64_t CommunicationProtocolAce.handleBarrierReply(barrierValue:)(unsigned int a1)
{
  uint64_t result = OUTLINED_FUNCTION_24_2();
  uint64_t v4 = *(void *)(v1 + 208);
  if (*(void *)(v4 + 16))
  {
    uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if (v5)
    {
      BOOL v6 = *(void (**)(char *))(*(void *)(v4 + 56) + 16 * result);
      v8[0] = 1;
      swift_retain();
      v6(v8);
      swift_release();
      OUTLINED_FUNCTION_9_6();
      uint64_t v7 = specialized Dictionary._Variant.removeValue(forKey:)(a1);
      swift_endAccess();
      return outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?(v7);
    }
  }
  return result;
}

uint64_t CommunicationProtocolAce.cancelOutstandingBarriers()()
{
  OUTLINED_FUNCTION_24_2();
  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v2 = v1 + 64;
  OUTLINED_FUNCTION_44_1();
  unint64_t v5 = v4 & v3;
  int64_t v7 = (unint64_t)(v6 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v9 = 0;
  if (!v5) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v10 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (unint64_t i = v10 | (v9 << 6); ; unint64_t i = v16 + (v9 << 6))
  {
    unint64_t v17 = *(void (**)(unsigned char *))(*(void *)(v1 + 56) + 16 * i);
    v18[0] = 0;
    swift_retain();
    v17(v18);
    uint64_t result = swift_release();
    if (v5) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v12 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_21;
    }
    if (v12 >= v7) {
      goto LABEL_19;
    }
    ++v9;
    if (!*(void *)(v2 + 8 * v12))
    {
      int64_t v9 = v12 + 1;
      if (v12 + 1 >= v7) {
        goto LABEL_19;
      }
      if (!*(void *)(v2 + 8 * v9))
      {
        int64_t v9 = v12 + 2;
        if (v12 + 2 >= v7) {
          goto LABEL_19;
        }
        if (!*(void *)(v2 + 8 * v9)) {
          break;
        }
      }
    }
LABEL_16:
    OUTLINED_FUNCTION_58_1();
    unint64_t v5 = v15 & v14;
  }
  int64_t v13 = v12 + 3;
  if (v13 >= v7)
  {
LABEL_19:
    swift_release();
    OUTLINED_FUNCTION_9_6();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : (_:)]._Variant);
    Dictionary._Variant.removeAll(keepingCapacity:)(0);
    return swift_endAccess();
  }
  if (*(void *)(v2 + 8 * v13))
  {
    int64_t v9 = v13;
    goto LABEL_16;
  }
  while (1)
  {
    int64_t v9 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v9 >= v7) {
      goto LABEL_19;
    }
    ++v13;
    if (*(void *)(v2 + 8 * v9)) {
      goto LABEL_16;
    }
  }
LABEL_21:
  __break(1u);
  return result;
}

uint64_t protocol witness for CommunicationProtocol.init(withDelegate:connectionQueue:) in conformance CommunicationProtocolAce@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CommunicationProtocolAce.__allocating_init(withDelegate:connectionQueue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CommunicationProtocol.safetyNetBuffer.getter in conformance CommunicationProtocolAce()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 320);
  outlined copy of Data?(v2, *(void *)(v1 + 328));
  return v2;
}

uint64_t protocol witness for CommunicationProtocol.safetyNetBuffer.setter in conformance CommunicationProtocolAce(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  swift_beginAccess();
  uint64_t v6 = *(void *)(v5 + 320);
  unint64_t v7 = *(void *)(v5 + 328);
  *(void *)(v5 + 320) = a1;
  *(void *)(v5 + 328) = a2;
  return outlined consume of Data?(v6, v7);
}

uint64_t protocol witness for CommunicationProtocol.pingInfo.getter in conformance CommunicationProtocolAce()
{
  return swift_retain();
}

void protocol witness for CommunicationProtocol.connectionStarted(fallingBack:) in conformance CommunicationProtocolAce(Swift::Bool a1)
{
}

uint64_t protocol witness for CommunicationProtocol.initialPayload(withBufferedInitialLength:forceReconnect:) in conformance CommunicationProtocolAce(uint64_t *a1)
{
  return CommunicationProtocolAce.initialPayload(withBufferedInitialLength:forceReconnect:)(a1);
}

void protocol witness for CommunicationProtocol.updateBuffers(forInitialPayload:bufferedLength:forceReconnect:) in conformance CommunicationProtocolAce()
{
}

uint64_t protocol witness for CommunicationProtocol.bufferGeneralData(data:) in conformance CommunicationProtocolAce(uint64_t a1, uint64_t a2)
{
  return CommunicationProtocolAce.bufferGeneralData(data:)(a1, a2);
}

uint64_t protocol witness for CommunicationProtocol.getBufferedOutputDataToWrite() in conformance CommunicationProtocolAce()
{
  return CommunicationProtocolAce.getBufferedOutputDataToWrite()();
}

uint64_t protocol witness for CommunicationProtocol.bufferUncompressedData(data:) in conformance CommunicationProtocolAce(uint64_t a1, uint64_t a2)
{
  return CommunicationProtocolAce.bufferUncompressedData(data:)(a1, a2);
}

uint64_t protocol witness for CommunicationProtocol.getBufferedUncompressedDataToWrite() in conformance CommunicationProtocolAce()
{
  return CommunicationProtocolAce.getBufferedUncompressedDataToWrite()();
}

void protocol witness for CommunicationProtocol.closeConnection(prepareForReconnect:) in conformance CommunicationProtocolAce(Swift::Bool a1)
{
}

void protocol witness for CommunicationProtocol.setSendPings(_:) in conformance CommunicationProtocolAce(Swift::Bool a1)
{
}

void protocol witness for CommunicationProtocol.checkPing() in conformance CommunicationProtocolAce()
{
}

void protocol witness for CommunicationProtocol.resumePingTimer() in conformance CommunicationProtocolAce()
{
}

void protocol witness for CommunicationProtocol.bytesAvailable(_:) in conformance CommunicationProtocolAce(uint64_t a1, unint64_t a2)
{
}

uint64_t protocol witness for CommunicationProtocol.hasBufferedDataOrOutstandPings() in conformance CommunicationProtocolAce()
{
  uint64_t v1 = (void *)*v0;
  swift_beginAccess();
  unint64_t v2 = v1[6];
  if (v2 >> 60 == 15)
  {
LABEL_8:
    swift_beginAccess();
    unint64_t v9 = v1[10];
    if (v9 >> 60 != 15)
    {
      uint64_t v10 = v1[9];
      switch(v9 >> 62)
      {
        case 1uLL:
          LODWORD(v11) = HIDWORD(v10) - v10;
          if (__OFSUB__(HIDWORD(v10), v10)) {
            goto LABEL_20;
          }
          uint64_t v11 = (int)v11;
LABEL_14:
          if (v11 > 0) {
            goto LABEL_15;
          }
          return v1[28] != 0;
        case 2uLL:
          uint64_t v14 = v10 + 16;
          uint64_t v13 = *(void *)(v10 + 16);
          uint64_t v12 = *(void *)(v14 + 8);
          BOOL v8 = __OFSUB__(v12, v13);
          uint64_t v11 = v12 - v13;
          if (!v8) {
            goto LABEL_14;
          }
          goto LABEL_21;
        case 3uLL:
          return v1[28] != 0;
        default:
          uint64_t v11 = BYTE6(v9);
          goto LABEL_14;
      }
    }
    return v1[28] != 0;
  }
  else
  {
    uint64_t v3 = v1[5];
    switch(v2 >> 62)
    {
      case 1uLL:
        LODWORD(v4) = HIDWORD(v3) - v3;
        if (__OFSUB__(HIDWORD(v3), v3))
        {
          __break(1u);
LABEL_19:
          __break(1u);
LABEL_20:
          __break(1u);
LABEL_21:
          __break(1u);
          JUMPOUT(0x25D730D6CLL);
        }
        uint64_t v4 = (int)v4;
LABEL_7:
        if (v4 <= 0) {
          goto LABEL_8;
        }
LABEL_15:
        uint64_t result = 1;
        break;
      case 2uLL:
        uint64_t v7 = v3 + 16;
        uint64_t v6 = *(void *)(v3 + 16);
        uint64_t v5 = *(void *)(v7 + 8);
        BOOL v8 = __OFSUB__(v5, v6);
        uint64_t v4 = v5 - v6;
        if (!v8) {
          goto LABEL_7;
        }
        goto LABEL_19;
      case 3uLL:
        goto LABEL_8;
      default:
        uint64_t v4 = BYTE6(v2);
        goto LABEL_7;
    }
  }
  return result;
}

#error "25D730DA0: call analysis failed (funcsize=9)"

uint64_t specialized OptionSet.intersection(_:)(uint64_t a1, uint64_t a2)
{
  return a2 & a1;
}

uint64_t specialized OptionSet<>.formUnion(_:)(uint64_t result)
{
  *v1 |= result;
  return result;
}

uint64_t specialized OptionSet<>.formIntersection(_:)(uint64_t result)
{
  *v1 &= result;
  return result;
}

BOOL specialized SetAlgebra.isSubset(of:)(uint64_t a1, uint64_t a2)
{
  return (a2 & ~a1) == 0;
}

BOOL specialized SetAlgebra.isSuperset(of:)(uint64_t a1, uint64_t a2)
{
  return (a1 & ~a2) == 0;
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned UInt32)@<X0>(uint64_t (*a1)(void)@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  BOOL v12 = __OFSUB__(a2, a1);
  uint64_t v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v14 = __DataStorage._length.getter();
  if (v14 >= v13) {
    uint64_t v15 = v13;
  }
  else {
    uint64_t v15 = v14;
  }
  uint64_t v16 = v11 + v15;
  if (v11) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0;
  }
  a5(&v18, v11, v17, a4);
  uint64_t result = swift_release();
  if (!v5) {
    return v18;
  }
  return result;
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, uint64_t a3, __CFHTTPMessage *a4, CFIndex a5, uint64_t a6, CFIndex *a7)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v15 = (UInt8 *)result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_10:
      __break(1u);
      return result;
    }
    v15 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_10;
  }
  __DataStorage._length.getter();
  closure #1 in CommunicationProtocolAce.parseHttpHeaderData(_:partialMessage:)(v15, a4, a5, a6, a7, (CFIndex *)&v16);
  if (v7)
  {
    swift_release();
  }
  else
  {

    a4 = v16;
    swift_release();
  }
  return (uint64_t)a4;
}

uint64_t _ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_A13Et_sAC_pSo16OS_dispatch_dataCTg5037_s10Foundation4DataV06InlineB0V15withb29BytesyxxSWKXEKlFxSWKXEfU_So16g1_h1_I5C_TG5SWxsAC_pRi_zRi0_zlyAGIsgyrzo_SiTf1nc_n0101_s11SiriNetwork24CommunicationProtocolAceC14initialPayload25withBufferedInitialLength14forceReconnectug1_h1_I20CSgSiz_SbtFAHSWXEfU_Tf1ncn_n(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v24 = a3;
  char v3 = a2;
  char v4 = a1;
  unint64_t v5 = a1 >> 8;
  unint64_t v6 = a1 >> 16;
  unint64_t v7 = a1 >> 24;
  unint64_t v8 = HIDWORD(a1);
  uint64_t v39 = *MEMORY[0x263EF8340];
  unint64_t v16 = a1 >> 40;
  unint64_t v17 = HIWORD(a1);
  unint64_t v18 = HIBYTE(a1);
  unint64_t v19 = a2 >> 8;
  unint64_t v20 = a2 >> 16;
  unint64_t v21 = a2 >> 24;
  unint64_t v22 = HIDWORD(a2);
  unint64_t v23 = a2 >> 40;
  uint64_t v9 = type metadata accessor for DispatchData();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  BOOL v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v25 = v4;
  char v26 = v5;
  char v27 = v6;
  char v28 = v7;
  char v29 = v8;
  char v30 = v16;
  char v31 = v17;
  char v32 = v18;
  char v33 = v3;
  char v34 = v19;
  char v35 = v20;
  char v36 = v21;
  char v37 = v22;
  char v38 = v23;
  DispatchData.init(bytes:)();
  uint64_t v13 = DispatchData._bridgeToObjectiveC()();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return v13;
}

uint64_t _ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_A13Et_sAC_pytSgTg5037_s10Foundation4DataV06InlineB0V15withB33BytesyxxSWKXEKlFxSWKXEfU_ytSg_TG5SWxsAC_pRi_zRi0_zlyAFIsgyrzo_SiTf1nc_n0129_s11SiriNetwork24CommunicationProtocolAceC29checkForProgressOnReadingData33_66EA1B3E09C1242C99E70AFFE1E0A77ALLAA10PingStatusVyFytS8SWXEfU0_0V7Network0xyZ0CTf1ncn_nTm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(unsigned __int8 *__return_ptr, uint64_t *, char *, uint64_t))
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v7 = a1;
  __int16 v8 = a2;
  char v9 = BYTE2(a2);
  char v10 = BYTE3(a2);
  char v11 = BYTE4(a2);
  char v12 = BYTE5(a2);
  a5(&v13, &v7, (char *)&v7 + a3, a4);
  uint64_t result = swift_release();
  if (!v5) {
    return v13;
  }
  return result;
}

CFHTTPMessageRef _ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_A13Et_sAC_pSi_SitTg5037_s10Foundation4DataV06InlineB0V15withB35BytesyxxSWKXEKlFxSWKXEfU_Si_Sit_TG5SWxsAC_pRi_zRi0_zlySi_SitIsgyrzo_SiTf1nc_n0117_s11SiriNetwork24CommunicationProtocolAceC19parseHttpHeaderData33_66EA1B3E09C1242C99E70AFFE1E0A77ALL_14partialMessager49_Sit10Foundation0I0Vz_So16CFHTTPMessageRefatKFSi_sQ2U_So16CFHTTPMessageRefaS2iz_XxSiTf1ncn_n(uint64_t a1, uint64_t a2, int a3, CFHTTPMessageRef message, CFIndex numBytes, uint64_t a6, CFIndex *a7)
{
  CFHTTPMessageRef v8 = message;
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t newBytes = a1;
  __int16 v12 = a2;
  char v13 = BYTE2(a2);
  char v14 = BYTE3(a2);
  char v15 = BYTE4(a2);
  char v16 = BYTE5(a2);
  closure #1 in CommunicationProtocolAce.parseHttpHeaderData(_:partialMessage:)((UInt8 *)&newBytes, message, numBytes, a6, a7, (CFIndex *)&v10);
  if (v7)
  {
    swift_release();
  }
  else
  {

    CFHTTPMessageRef v8 = v10;
    swift_release();
  }
  return v8;
}

#error "25D73156C: call analysis failed (funcsize=63)"

#error "25D731660: call analysis failed (funcsize=47)"

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(unsigned int a1)
{
  unint64_t v2 = v1;
  unint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v4 & 1) == 0) {
    return 0;
  }
  unint64_t v5 = v3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = *v1;
  uint64_t v7 = *v1;
  void *v1 = 0x8000000000000000;
  Swift::Int v8 = *(void *)(v7 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<UInt32, (_:)>);
  _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v8);
  uint64_t v9 = *(void *)(*(void *)(v11 + 56) + 16 * v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
  _NativeDictionary._delete(at:)();
  *unint64_t v2 = v11;
  swift_bridgeObjectRelease();
  return v9;
}

#error "25D731814: call analysis failed (funcsize=64)"

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)(uint64_t a1, uint64_t a2)
{
  swift_isUniquelyReferenced_nonNull_native();
  unint64_t v3 = (_OWORD *)OUTLINED_FUNCTION_39_1();
  unint64_t v5 = specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v3, a2, v4);
  OUTLINED_FUNCTION_17_3((uint64_t)v5, v6, v7, v8, v9, v10, v11, v12, v14, v15);

  return swift_bridgeObjectRelease();
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)(unsigned int a1, double a2)
{
  swift_isUniquelyReferenced_nonNull_native();
  OUTLINED_FUNCTION_63();
  unint64_t v5 = specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, v4, a2);
  OUTLINED_FUNCTION_17_3(v5, v6, v7, v8, v9, v10, v11, v12, v14, v15);

  return swift_bridgeObjectRelease();
}

#error "25D7319C8: call analysis failed (funcsize=29)"

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)(uint64_t a1, uint64_t a2, unsigned int a3)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v3;
  *unint64_t v3 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, isUniquelyReferenced_nonNull_native);
  *unint64_t v3 = v9;

  return swift_bridgeObjectRelease();
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)(uint64_t a1, char a2)
{
  swift_isUniquelyReferenced_nonNull_native();
  uint64_t v3 = OUTLINED_FUNCTION_39_1();
  unint64_t v5 = specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v3, a2, v4);
  OUTLINED_FUNCTION_17_3(v5, v6, v7, v8, v9, v10, v11, v12, v14, v15);

  return swift_bridgeObjectRelease();
}

#error "25D731B04: call analysis failed (funcsize=19)"

#error "25D731B50: call analysis failed (funcsize=19)"

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)()
{
  OUTLINED_FUNCTION_22();
  uint64_t v1 = v0;
  char v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  Swift::Int v12 = *v0;
  specialized __RawDictionaryStorage.find<A>(_:)(v6, v4);
  OUTLINED_FUNCTION_96_0();
  if (v15)
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v16 = v13;
  char v17 = v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, String>);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(v3 & 1, v12)) {
    goto LABEL_5;
  }
  uint64_t v18 = OUTLINED_FUNCTION_97_0();
  unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v19);
  if ((v17 & 1) != (v21 & 1))
  {
LABEL_11:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v16 = v20;
LABEL_5:
  unint64_t v22 = (void *)*v1;
  if (v17)
  {
    unint64_t v23 = (uint64_t *)(v22[7] + 16 * v16);
    swift_bridgeObjectRelease();
    uint64_t *v23 = v11;
    v23[1] = v9;
    OUTLINED_FUNCTION_29();
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v16, v7, v5, v11, v9, v22);
    OUTLINED_FUNCTION_29();
    swift_bridgeObjectRetain();
  }
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v10 & 1) == 0;
  Swift::Int v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v14 = v9;
  char v15 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<AnyHashable, Any>);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v13)) {
    goto LABEL_5;
  }
  unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_11:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v16;
LABEL_5:
  uint64_t v18 = *v4;
  if (v15)
  {
    uint64_t v19 = (_OWORD *)(v18[7] + 32 * v14);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v19);
    return outlined init with take of Any(a1, v19);
  }
  else
  {
    outlined init with copy of AnyHashable(a2, (uint64_t)v21);
    return specialized _NativeDictionary._insert(at:key:value:)(v14, (uint64_t)v21, a1, v18);
  }
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  Swift::Int v10 = *v4;
  specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  OUTLINED_FUNCTION_96_0();
  if (v13)
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v14 = v11;
  char v15 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, SNConnectionTCPInfoMetrics>);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v10)) {
    goto LABEL_5;
  }
  uint64_t v16 = OUTLINED_FUNCTION_82_0();
  unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v17);
  if ((v15 & 1) != (v19 & 1))
  {
LABEL_11:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v14 = v18;
LABEL_5:
  unint64_t v20 = (void *)*v5;
  if (v15)
  {
    uint64_t v21 = v20[7];

    *(void *)(v21 + 8 * v14) = a1;
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v14, a2, a3, a1, v20);
    swift_bridgeObjectRetain();
  }
}

unint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(unsigned int a1, char a2, double a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  uint64_t v11 = v8[2];
  BOOL v12 = (v10 & 1) == 0;
  Swift::Int v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v14 = v9;
  char v15 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<UInt32, Double>);
  unint64_t result = _NativeDictionary.ensureUnique(isUnique:capacity:)(a2 & 1, v13);
  if ((result & 1) == 0) {
    goto LABEL_5;
  }
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_11:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = result;
LABEL_5:
  unint64_t v18 = *v4;
  if (v15)
  {
    *(double *)(v18[7] + 8 * v14) = a3;
  }
  else
  {
    return specialized _NativeDictionary._insert(at:key:value:)(v14, a1, v18, a3);
  }
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = (void **)v5;
  BOOL v12 = (void *)*v5;
  unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  uint64_t v15 = v12[2];
  BOOL v16 = (v14 & 1) == 0;
  Swift::Int v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v18 = v13;
  char v19 = v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Data>);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a5 & 1, v17)) {
    goto LABEL_5;
  }
  unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  if ((v19 & 1) != (v21 & 1))
  {
LABEL_11:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v18 = v20;
LABEL_5:
  unint64_t v22 = *v6;
  if (v19)
  {
    uint64_t v23 = v22[7] + 16 * v18;
    uint64_t result = outlined consume of Data._Representation(*(void *)v23, *(void *)(v23 + 8));
    *(void *)uint64_t v23 = a1;
    *(void *)(v23 + 8) = a2;
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v18, a3, a4, a1, a2, v22);
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, unsigned int a3, char a4)
{
  uint64_t v5 = (void **)v4;
  char v10 = (void *)*v4;
  unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v12 & 1) == 0;
  Swift::Int v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v16 = v11;
  char v17 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<UInt32, (_:)>);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15)) {
    goto LABEL_5;
  }
  unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_11:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = v18;
LABEL_5:
  unint64_t v20 = *v5;
  if (v17)
  {
    char v21 = (uint64_t *)(v20[7] + 16 * v16);
    unint64_t result = swift_release();
    *char v21 = a1;
    v21[1] = a2;
  }
  else
  {
    return specialized _NativeDictionary._insert(at:key:value:)(v16, a3, a1, a2, v20);
  }
  return result;
}

unint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, char a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v10 & 1) == 0;
  Swift::Int v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v14 = v9;
  char v15 = v10;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _NativeDictionary<NetworkActivityLabel, NetworkActivity<NWConnection, NWActivity>>);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v13)) {
    goto LABEL_5;
  }
  unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_11:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v16;
LABEL_5:
  unint64_t v18 = *v4;
  if (v15)
  {
    uint64_t v19 = v18[7];
    unint64_t result = swift_release();
    *(void *)(v19 + 8 * v14) = a1;
  }
  else
  {
    return specialized _NativeDictionary._insert(at:key:value:)(v14, a2, a1, v18);
  }
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  char v10 = (void *)*v4;
  unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v12 & 1) == 0;
  Swift::Int v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v16 = v11;
  char v17 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, UInt64>);
  uint64_t result = _NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15);
  if ((result & 1) == 0) {
    goto LABEL_5;
  }
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_11:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = result;
LABEL_5:
  unint64_t v20 = *v5;
  if (v17)
  {
    *(void *)(v20[7] + 8 * v16) = a1;
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v16, a2, a3, a1, v20);
    return swift_bridgeObjectRetain();
  }
  return result;
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  char v10 = (void *)*v4;
  unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v12 & 1) == 0;
  Swift::Int v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_13;
  }
  unint64_t v16 = v11;
  char v17 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Any>);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15)) {
    goto LABEL_5;
  }
  unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_13:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = v18;
LABEL_5:
  unint64_t v20 = *v5;
  if (v17)
  {
    char v21 = (_OWORD *)(v20[7] + 32 * v16);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v21);
    return outlined init with take of Any(a1, v21);
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v16, a2, a3, a1, v20);
    return (_OWORD *)swift_bridgeObjectRetain();
  }
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1 << result;
  uint64_t v6 = (void *)(a6[6] + 16 * result);
  *uint64_t v6 = a2;
  v6[1] = a3;
  uint64_t v7 = (void *)(a6[7] + 16 * result);
  *uint64_t v7 = a4;
  v7[1] = a5;
  uint64_t v8 = a6[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a6[2] = v10;
  }
  return result;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v5 = a4[6] + 40 * a1;
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(void *)(v5 + 32) = *(void *)(a2 + 32);
  uint64_t result = outlined init with take of Any(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v8 = a4[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a4[2] = v10;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  uint64_t v5 = (void *)(a5[6] + 16 * result);
  *uint64_t v5 = a2;
  v5[1] = a3;
  *(void *)(a5[7] + 8 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, int a2, void *a3, double a4)
{
  a3[(result >> 6) + 8] |= 1 << result;
  *(_DWORD *)(a3[6] + 4 * result) = a2;
  *(double *)(a3[7] + 8 * result) = a4;
  uint64_t v4 = a3[2];
  BOOL v5 = __OFADD__(v4, 1);
  uint64_t v6 = v4 + 1;
  if (v5) {
    __break(1u);
  }
  else {
    a3[2] = v6;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  *(_DWORD *)(a5[6] + 4 * result) = a2;
  BOOL v5 = (void *)(a5[7] + 16 * result);
  *BOOL v5 = a3;
  v5[1] = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, char a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  *(unsigned char *)(a4[6] + result) = a2;
  *(void *)(a4[7] + 8 * result) = a3;
  uint64_t v4 = a4[2];
  BOOL v5 = __OFADD__(v4, 1);
  uint64_t v6 = v4 + 1;
  if (v5) {
    __break(1u);
  }
  else {
    a4[2] = v6;
  }
  return result;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  *uint64_t v6 = a2;
  v6[1] = a3;
  uint64_t result = outlined init with take of Any(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type BackgroundConnectionError and conformance BackgroundConnectionError()
{
  unint64_t result = lazy protocol witness table cache variable for type BackgroundConnectionError and conformance BackgroundConnectionError;
  if (!lazy protocol witness table cache variable for type BackgroundConnectionError and conformance BackgroundConnectionError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BackgroundConnectionError and conformance BackgroundConnectionError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BackgroundConnectionError and conformance BackgroundConnectionError;
  if (!lazy protocol witness table cache variable for type BackgroundConnectionError and conformance BackgroundConnectionError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BackgroundConnectionError and conformance BackgroundConnectionError);
  }
  return result;
}

void outlined bridged method (mbnn) of @objc NETSchemaNETSessionConnectionHttpHeaderCreated.userAgent.setter(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = (id)MEMORY[0x2611B2220]();
  swift_bridgeObjectRelease();
  objc_msgSend(a3, sel_setUserAgent_, v4);
}

uint64_t outlined bridged method (ob) of @objc AFPreferences.configOverrides()(void *a1)
{
  id v2 = objc_msgSend(a1, sel_configOverrides);

  if (!v2) {
    return 0;
  }
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t outlined bridged method (pb) of @objc AceObject.encodedClassName()(void *a1)
{
  id v1 = objc_msgSend(a1, sel_encodedClassName);
  if (!v1) {
    return 0;
  }
  id v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t outlined assign with copy of DataDecompressing?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataDecompressing?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_25D7329E8()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t outlined consume of BackgroundConnectionError(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, char a5)
{
  if (!a5)
  {

    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined init with take of SessionObject?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  OUTLINED_FUNCTION_78_0(a1, a2, a3);
  OUTLINED_FUNCTION_0_7();
  uint64_t v4 = OUTLINED_FUNCTION_77_0();
  v5(v4);
  return v3;
}

uint64_t sub_25D732A84()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@unowned Bool) -> ()(unsigned __int8 *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t sub_25D732AE8()
{
  swift_weakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_25D732B20()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t partial apply for closure #1 in CommunicationProtocolAce.scheduleAceHeaderTimeout(withInterval:)()
{
  return closure #1 in CommunicationProtocolAce.scheduleAceHeaderTimeout(withInterval:)(*(void *)(v0 + 16), *(double *)(v0 + 32));
}

uint64_t block_copy_helper_11(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_11()
{
  return swift_release();
}

uint64_t lazy protocol witness table accessor for type OS_dispatch_source.TimerFlags and conformance OS_dispatch_source.TimerFlags(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in CommunicationProtocolAce.resumePingTimer()()
{
  return closure #1 in CommunicationProtocolAce.resumePingTimer()();
}

uint64_t outlined init with copy of DataCompressing?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  OUTLINED_FUNCTION_78_0(a1, a2, a3);
  OUTLINED_FUNCTION_0_7();
  uint64_t v4 = OUTLINED_FUNCTION_77_0();
  v5(v4);
  return v3;
}

uint64_t outlined destroy of DataCompressing?(uint64_t a1, uint64_t *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_0_7();
  OUTLINED_FUNCTION_12_2();
  v3();
  return a1;
}

uint64_t outlined assign with take of DataCompressing?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  OUTLINED_FUNCTION_78_0(a1, a2, a3);
  OUTLINED_FUNCTION_0_7();
  uint64_t v4 = OUTLINED_FUNCTION_77_0();
  v5(v4);
  return v3;
}

uint64_t dynamic_cast_existential_1_conditional(uint64_t a1)
{
  if (swift_conformsToProtocol2()) {
    return a1;
  }
  else {
    return 0;
  }
}

uint64_t outlined init with copy of AnyHashable(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of AnyHashable(uint64_t a1)
{
  return a1;
}

uint64_t OUTLINED_FUNCTION_9_6()
{
  return swift_beginAccess();
}

BOOL OUTLINED_FUNCTION_10_6(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_17_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result = *v10;
  *uint64_t v10 = a10;
  return result;
}

void OUTLINED_FUNCTION_20_3(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

void OUTLINED_FUNCTION_21_3(CFStringRef value)
{
  CFHTTPMessageSetHeaderFieldValue(v2, v1, value);
}

uint64_t OUTLINED_FUNCTION_25_3()
{
  *uint64_t v0 = 0x8000000000000000;
  return v1;
}

double OUTLINED_FUNCTION_28_3()
{
  return 0.0;
}

uint64_t OUTLINED_FUNCTION_29_3()
{
  return v0;
}

void OUTLINED_FUNCTION_32_2(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 192) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_33_4()
{
  return outlined consume of Data?(v0, v1);
}

void OUTLINED_FUNCTION_34_4(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 8u);
}

uint64_t OUTLINED_FUNCTION_35_2()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_36_2()
{
  return swift_slowAlloc();
}

BOOL OUTLINED_FUNCTION_38_0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v10, v11);
}

uint64_t OUTLINED_FUNCTION_39_1()
{
  *uint64_t v0 = 0x8000000000000000;
  return v1;
}

void OUTLINED_FUNCTION_40_1()
{
  JUMPOUT(0x2611B2220);
}

uint64_t OUTLINED_FUNCTION_41_1()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_42_1()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_43_0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = 3;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(unsigned char *)(a2 + 32) = 4;
  return swift_willThrow();
}

void OUTLINED_FUNCTION_46_0()
{
  JUMPOUT(0x2611B2220);
}

_WORD *OUTLINED_FUNCTION_47_1(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_48_1()
{
  return outlined consume of Data._Representation(v1, v0);
}

void OUTLINED_FUNCTION_49_1()
{
  *unint64_t v0 = 0x8000000000000000;
}

uint64_t OUTLINED_FUNCTION_51_0()
{
  return type metadata accessor for DispatchQoS();
}

uint64_t OUTLINED_FUNCTION_53_0@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  uint64_t v11 = v9 + a1;
  if (v9) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  return closure #1 in static AceSerialization.parsePacket(data:)(v9, v12, (uint64_t)va);
}

uint64_t OUTLINED_FUNCTION_54_1()
{
  return swift_retain_n();
}

_WORD *OUTLINED_FUNCTION_55_0(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

char *OUTLINED_FUNCTION_59_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  return &a17;
}

uint64_t OUTLINED_FUNCTION_60_1()
{
  return outlined copy of AceSerializationError(v1, v0, v2);
}

uint64_t OUTLINED_FUNCTION_61_0()
{
  outlined consume of AceSerializationError(v1, v0, v2);
  return outlined consume of AceSerializationError(v1, v0, v2);
}

void OUTLINED_FUNCTION_63()
{
  *unint64_t v0 = 0x8000000000000000;
}

uint64_t OUTLINED_FUNCTION_64()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_65_0()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_66_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_67_0()
{
  return outlined copy of AceSerializationError(v1, v0, v2);
}

uint64_t OUTLINED_FUNCTION_68_0()
{
  outlined consume of AceSerializationError(v1, v0, v2);
  return outlined consume of AceSerializationError(v1, v0, v2);
}

float *OUTLINED_FUNCTION_71_0(float *result, float a2)
{
  *uint64_t result = a2;
  return result;
}

float *OUTLINED_FUNCTION_72(float *result, float a2)
{
  *uint64_t result = a2;
  return result;
}

uint64_t OUTLINED_FUNCTION_74_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_75_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_76_0()
{
  return outlined consume of Data?(v0, v1);
}

uint64_t OUTLINED_FUNCTION_77_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_78_0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return __swift_instantiateConcreteTypeFromMangledName(a3);
}

void OUTLINED_FUNCTION_79_0(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, a2, a3, a4, v4, 0xCu);
}

uint64_t OUTLINED_FUNCTION_80_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_81()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_82_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_84_0()
{
  return v0 - 152;
}

uint64_t OUTLINED_FUNCTION_88_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))
{
  return specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v7, v8, v6, v5, a5);
}

uint64_t OUTLINED_FUNCTION_89()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_90_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))
{
  return specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v7, v6, v8, v5, a5);
}

uint64_t OUTLINED_FUNCTION_91()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_92_0()
{
  return outlined consume of Data?(v0, v1);
}

BOOL OUTLINED_FUNCTION_93_0(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

void OUTLINED_FUNCTION_94_0()
{
  JUMPOUT(0x2611B2220);
}

uint64_t OUTLINED_FUNCTION_95_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_97_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_99_0()
{
  return swift_retain_n();
}

uint64_t OUTLINED_FUNCTION_100()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_101()
{
  return outlined copy of Data._Representation(v1, v0);
}

void OUTLINED_FUNCTION_102(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

void OUTLINED_FUNCTION_103_0(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

CFHTTPMessageRef OUTLINED_FUNCTION_105_0(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, CFIndex *a7)
{
  return _ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_A13Et_sAC_pSi_SitTg5037_s10Foundation4DataV06InlineB0V15withB35BytesyxxSWKXEKlFxSWKXEfU_Si_Sit_TG5SWxsAC_pRi_zRi0_zlySi_SitIsgyrzo_SiTf1nc_n0117_s11SiriNetwork24CommunicationProtocolAceC19parseHttpHeaderData33_66EA1B3E09C1242C99E70AFFE1E0A77ALL_14partialMessager49_Sit10Foundation0I0Vz_So16CFHTTPMessageRefatKFSi_sQ2U_So16CFHTTPMessageRefaS2iz_XxSiTf1ncn_n(a1, a2, a3, v8, v9, v7, a7);
}

void OUTLINED_FUNCTION_106_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v10 - 184) = (char *)&a9 - v9;
}

uint64_t OUTLINED_FUNCTION_107_0()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_109_0()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_110_0()
{
  return swift_beginAccess();
}

uint64_t dispatch thunk of CommunicationProtocolDelegateAce.connectionConfiguration.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of CommunicationProtocolDelegateAce.primaryConnectionViable.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of CommunicationProtocolDelegateAce.betterPathAvailable.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of CommunicationProtocolDelegateAce.isOpened.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of CommunicationProtocolDelegateAce.isUsingPeer()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of CommunicationProtocolDelegateAce.isUsingPop()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of CommunicationProtocolDelegateAce.isUsingFlorence()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of CommunicationProtocolDelegateAce.isWifiOrCellularMaybeBetterThanCurrentStream()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of CommunicationProtocolDelegateAce.shouldFallbackQuickly()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of CommunicationProtocolDelegateAce.providerHeaderData(forceReconnect:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 88))();
}

uint64_t dispatch thunk of CommunicationProtocolDelegateAce.logTcpInfoIndicatesPoorLinkQuality()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 96))();
}

uint64_t dispatch thunk of CommunicationProtocolDelegateAce.willStartConnection(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 104))();
}

uint64_t dispatch thunk of CommunicationProtocolDelegateAce.fallbackToNextConnectionMethod(error:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 112))();
}

uint64_t dispatch thunk of CommunicationProtocolDelegateAce.connectionDidEncounterError(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 120))();
}

uint64_t dispatch thunk of CommunicationProtocolDelegateAce.connectionDidEncounterIntermediateError(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 128))();
}

uint64_t dispatch thunk of CommunicationProtocolDelegateAce.cancelConnection()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 136))();
}

uint64_t dispatch thunk of CommunicationProtocolDelegateAce.logSessionConnectionHttpHeaderCreated(httpHeader:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 144))();
}

uint64_t dispatch thunk of CommunicationProtocolDelegateAce.didReceiveAceObject(aceObject:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 152))();
}

_DWORD *__swift_memcpy4_1(_DWORD *result, _DWORD *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for ConnectionQualityReport(unsigned __int8 *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFD && a1[4])
    {
      int v2 = *(_DWORD *)a1 + 252;
    }
    else
    {
      unsigned int v3 = *a1;
      BOOL v4 = v3 >= 4;
      int v2 = v3 - 4;
      if (!v4) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConnectionQualityReport(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_DWORD *)uint64_t result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 4) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 4) = 0;
    }
    if (a2) {
      *(unsigned char *)uint64_t result = a2 + 3;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ConnectionQualityReport()
{
  return &type metadata for ConnectionQualityReport;
}

uint64_t ConnectionQualityReport.symptomsBasedNetworkQuality.getter(unsigned int a1)
{
  switch((char)a1)
  {
    case 1:
      OUTLINED_FUNCTION_7_4();
      break;
    case 2:
      OUTLINED_FUNCTION_0_22();
      break;
    case 3:
      OUTLINED_FUNCTION_1_22();
      break;
    default:
      break;
  }
  swift_isUniquelyReferenced_nonNull_native();
  OUTLINED_FUNCTION_4_12();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
  swift_bridgeObjectRelease();
  switch(BYTE1(a1))
  {
    case 1:
      OUTLINED_FUNCTION_7_4();
      break;
    case 2:
      OUTLINED_FUNCTION_0_22();
      break;
    case 3:
      OUTLINED_FUNCTION_1_22();
      break;
    default:
      break;
  }
  swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
  swift_bridgeObjectRelease();
  switch(BYTE2(a1))
  {
    case 1:
      OUTLINED_FUNCTION_7_4();
      break;
    case 2:
      OUTLINED_FUNCTION_0_22();
      break;
    case 3:
      OUTLINED_FUNCTION_1_22();
      break;
    default:
      break;
  }
  swift_isUniquelyReferenced_nonNull_native();
  OUTLINED_FUNCTION_4_12();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
  swift_bridgeObjectRelease();
  switch(HIBYTE(a1))
  {
    case 2u:
      OUTLINED_FUNCTION_9_7();
      break;
    case 3u:
      OUTLINED_FUNCTION_8_5();
      break;
    default:
      break;
  }
  swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
  swift_bridgeObjectRelease();
  return v3;
}

SiriNetwork::ConnectionQuality_optional __swiftcall ConnectionQuality.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ConnectionQuality.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return (SiriNetwork::ConnectionQuality_optional)4;
  }
  else {
    return (SiriNetwork::ConnectionQuality_optional)v3;
  }
}

uint64_t ConnectionQuality.rawValue.getter(char a1)
{
  uint64_t result = 1685024615;
  switch(a1)
  {
    case 1:
      uint64_t result = 6578530;
      break;
    case 2:
      uint64_t result = OUTLINED_FUNCTION_3_16();
      break;
    case 3:
      uint64_t result = OUTLINED_FUNCTION_0_4();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ConnectionQuality(unsigned __int8 *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ConnectionQuality()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ConnectionQuality()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ConnectionQuality()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriNetwork::ConnectionQuality_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ConnectionQuality@<W0>(Swift::String *a1@<X0>, SiriNetwork::ConnectionQuality_optional *a2@<X8>)
{
  result.value = ConnectionQuality.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ConnectionQuality@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ConnectionQuality.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t ConnectionQualityReport.debugDescription.getter(unsigned int a1)
{
  uint64_t v2 = 1685024615;
  OUTLINED_FUNCTION_5_11();
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  unint64_t v3 = 0xE400000000000000;
  uint64_t v4 = 1685024615;
  switch((char)a1)
  {
    case 1:
      unint64_t v3 = 0xE300000000000000;
      uint64_t v4 = 6578530;
      break;
    case 2:
      uint64_t v4 = OUTLINED_FUNCTION_3_16();
      unint64_t v3 = 0xEB00000000656C62;
      break;
    case 3:
      unint64_t v3 = 0xE700000000000000;
      uint64_t v4 = OUTLINED_FUNCTION_0_4();
      break;
    default:
      break;
  }
  unint64_t v5 = v3;
  String.append(_:)(*(Swift::String *)&v4);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease();
  unint64_t v6 = 0xE400000000000000;
  uint64_t v7 = 1685024615;
  switch(BYTE1(a1))
  {
    case 1:
      unint64_t v6 = 0xE300000000000000;
      uint64_t v7 = 6578530;
      break;
    case 2:
      uint64_t v7 = OUTLINED_FUNCTION_3_16();
      unint64_t v6 = 0xEB00000000656C62;
      break;
    case 3:
      unint64_t v6 = 0xE700000000000000;
      uint64_t v7 = OUTLINED_FUNCTION_0_4();
      break;
    default:
      break;
  }
  unint64_t v8 = v6;
  String.append(_:)(*(Swift::String *)&v7);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_5_11();
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease();
  unint64_t v9 = 0xE400000000000000;
  uint64_t v10 = 1685024615;
  switch(BYTE2(a1))
  {
    case 1:
      unint64_t v9 = 0xE300000000000000;
      uint64_t v10 = 6578530;
      break;
    case 2:
      uint64_t v10 = OUTLINED_FUNCTION_3_16();
      unint64_t v9 = 0xEB00000000656C62;
      break;
    case 3:
      unint64_t v9 = 0xE700000000000000;
      uint64_t v10 = OUTLINED_FUNCTION_0_4();
      break;
    default:
      break;
  }
  unint64_t v11 = v9;
  String.append(_:)(*(Swift::String *)&v10);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_5_11();
  _StringGuts.grow(_:)(29);
  swift_bridgeObjectRelease();
  uint64_t v12 = (void *)0xE400000000000000;
  switch(HIBYTE(a1))
  {
    case 1u:
      uint64_t v12 = (void *)0xE300000000000000;
      uint64_t v2 = 6578530;
      break;
    case 2u:
      OUTLINED_FUNCTION_9_7();
      uint64_t v12 = (void *)0xEB00000000656C62;
      break;
    case 3u:
      uint64_t v12 = (void *)0xE700000000000000;
      OUTLINED_FUNCTION_8_5();
      break;
    default:
      break;
  }
  v13._uint64_t countAndFlagsBits = v2;
  v13._object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_5_11();
  _StringGuts.grow(_:)(58);
  v14._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
  v14._object = (void *)0x800000025D796110;
  String.append(_:)(v14);
  v15._uint64_t countAndFlagsBits = 0xD000000000000014;
  v15._object = (void *)0x800000025D796090;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_6_8();
  v16._uint64_t countAndFlagsBits = 0xD000000000000018;
  v16._object = (void *)0x800000025D7960B0;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_6_8();
  v17._uint64_t countAndFlagsBits = 0xD000000000000017;
  v17._object = (void *)0x800000025D7960D0;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_6_8();
  v18._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  v18._object = (void *)0x800000025D7960F0;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19._uint64_t countAndFlagsBits = 93;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  return 0xD00000000000001BLL;
}

unint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ConnectionQualityReport()
{
  return ConnectionQualityReport.debugDescription.getter(*v0);
}

unsigned char *storeEnumTagSinglePayload for ConnectionQuality(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25D73404CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ConnectionQuality()
{
  return &type metadata for ConnectionQuality;
}

unint64_t lazy protocol witness table accessor for type ConnectionQuality and conformance ConnectionQuality()
{
  unint64_t result = lazy protocol witness table cache variable for type ConnectionQuality and conformance ConnectionQuality;
  if (!lazy protocol witness table cache variable for type ConnectionQuality and conformance ConnectionQuality)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConnectionQuality and conformance ConnectionQuality);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_3_16()
{
  return 0x616C696176616E75;
}

uint64_t OUTLINED_FUNCTION_4_12()
{
  return v0;
}

void OUTLINED_FUNCTION_6_8()
{
  uint64_t v1 = 8236;
  unint64_t v2 = 0xE200000000000000;
  String.append(_:)(*(Swift::String *)&v1);
}

uint64_t ConnectionType.init(fromInterface:)@<X0>(char *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for NWInterface.InterfaceType();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  NWInterface.type.getter();
  int v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == *MEMORY[0x263F141A0])
  {
LABEL_2:
    NWInterface.name.getter();
    Swift::String v7 = String.lowercased()();
    swift_bridgeObjectRelease();
    Swift::String v22 = v7;
    v21[0] = 0x6365737069;
    v21[1] = 0xE500000000000000;
    lazy protocol witness table accessor for type String and conformance String();
    char v8 = StringProtocol.contains<A>(_:)();
    type metadata accessor for NWInterface();
    OUTLINED_FUNCTION_0_23();
    uint64_t v9 = OUTLINED_FUNCTION_1_23();
    v10(v9);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v8) {
      char countAndFlagsBits = 24;
    }
    else {
      char countAndFlagsBits = 0;
    }
    goto LABEL_15;
  }
  if (v6 == *MEMORY[0x263F14198])
  {
    type metadata accessor for NWInterface();
    OUTLINED_FUNCTION_0_23();
    uint64_t v13 = OUTLINED_FUNCTION_1_23();
    uint64_t result = v14(v13);
    char countAndFlagsBits = 1;
    goto LABEL_15;
  }
  if (v6 != *MEMORY[0x263F141A8])
  {
    if (v6 == *MEMORY[0x263F14190])
    {
      type metadata accessor for NWInterface();
      OUTLINED_FUNCTION_0_23();
      uint64_t v17 = OUTLINED_FUNCTION_1_23();
      uint64_t result = v18(v17);
      char countAndFlagsBits = 23;
      goto LABEL_15;
    }
    if (v6 != *MEMORY[0x263F141B0])
    {
      type metadata accessor for NWInterface();
      OUTLINED_FUNCTION_0_23();
      uint64_t v19 = OUTLINED_FUNCTION_1_23();
      v20(v19);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      char countAndFlagsBits = 0;
      goto LABEL_15;
    }
    goto LABEL_2;
  }
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  NetworkManager.connectionTechnologyForCellularInterface()();
  type metadata accessor for NWInterface();
  OUTLINED_FUNCTION_0_23();
  uint64_t v15 = OUTLINED_FUNCTION_1_23();
  uint64_t result = v16(v15);
  char countAndFlagsBits = v22._countAndFlagsBits;
LABEL_15:
  *a1 = countAndFlagsBits;
  return result;
}

uint64_t OUTLINED_FUNCTION_1_23()
{
  return v0;
}

void NetworkWiFiManager.queueGroup.setter(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR___SNNetworkWiFiManagerInternal_queueGroup);
  *(void *)(v1 + OBJC_IVAR___SNNetworkWiFiManagerInternal_queueGroup) = a1;
}

id one-time initialization function for shared()
{
  id result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for NetworkWiFiManager()), sel_init);
  static NetworkWiFiManager.shared = (uint64_t)result;
  return result;
}

{
  id result;

  id result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for NetworkActivityTracing()), sel_init);
  static NetworkActivityTracing.shared = (uint64_t)result;
  return result;
}

id static NetworkWiFiManager.shared.getter()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static NetworkWiFiManager.shared;

  return v0;
}

id NetworkWiFiManager.init()()
{
  uint64_t v13 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_0_1();
  uint64_t v4 = v3 - v2;
  type metadata accessor for OS_dispatch_queue.Attributes();
  OUTLINED_FUNCTION_0_7();
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_0_1();
  uint64_t v6 = type metadata accessor for DispatchQoS();
  MEMORY[0x270FA5388](v6 - 8);
  OUTLINED_FUNCTION_0_1();
  uint64_t v14 = OBJC_IVAR___SNNetworkWiFiManagerInternal_wifiManager;
  *(void *)&v0[OBJC_IVAR___SNNetworkWiFiManagerInternal_wifiManager] = 0;
  *(void *)&v0[OBJC_IVAR___SNNetworkWiFiManagerInternal_wifiDevice] = 0;
  *(_DWORD *)&v0[OBJC_IVAR___SNNetworkWiFiManagerInternal_wifiClientType] = 0;
  uint64_t v7 = OBJC_IVAR___SNNetworkWiFiManagerInternal_interface;
  *(void *)&v0[OBJC_IVAR___SNNetworkWiFiManagerInternal_interface] = 0;
  *(void *)&v0[OBJC_IVAR___SNNetworkWiFiManagerInternal_queueGroup] = 0;
  type metadata accessor for OS_dispatch_queue();
  char v8 = v0;
  static DispatchQoS.unspecified.getter();
  uint64_t v16 = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(uint64_t, void, uint64_t))(v1 + 104))(v4, *MEMORY[0x263F8F130], v13);
  *(void *)&v8[OBJC_IVAR___SNNetworkWiFiManagerInternal_queue] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F386E0]), sel_initWithServiceType_, 3);
  uint64_t v10 = *(void **)&v0[v7];
  *(void *)&v0[v7] = v9;

  unint64_t v11 = *(void **)&v0[v7];
  if (v11) {
    objc_msgSend(v11, sel_resume);
  }
  *(void *)&v0[v14] = WiFiManagerClientCreate();

  v15.receiver = v8;
  v15.super_class = (Class)type metadata accessor for NetworkWiFiManager();
  return objc_msgSendSuper2(&v15, sel_init);
}

id NetworkWiFiManager.__deallocating_deinit()
{
  uint64_t v1 = *(void **)&v0[OBJC_IVAR___SNNetworkWiFiManagerInternal_interface];
  if (v1) {
    objc_msgSend(v1, sel_invalidate);
  }
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for NetworkWiFiManager();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t type metadata accessor for NetworkWiFiManager()
{
  return self;
}

void NetworkWiFiManager.currentNetwork()()
{
  uint64_t v0 = WiFiManagerClientCopyDevices();
  if (v0)
  {
    uint64_t v1 = (void *)v0;
    static Array._conditionallyBridgeFromObjectiveC(_:result:)();
  }
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  objc_super v3 = OUTLINED_FUNCTION_7(v2, (uint64_t)static Logger.siriNetwork);
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_25D6CC000, v3, v4, "NetworkWiFiManager - CurrentNetwork: Not available device to get WiFiRecord", v5, 2u);
    OUTLINED_FUNCTION_1_2();
  }
}

id NetworkWiFiManager.getWiFiRecordRepresentation()()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WiFiRecord?);
  MEMORY[0x270FA5388](v0 - 8);
  OUTLINED_FUNCTION_0_1();
  uint64_t v3 = v2 - v1;
  uint64_t v4 = type metadata accessor for WiFiRecord(0);
  OUTLINED_FUNCTION_0_7();
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_0_1();
  uint64_t v8 = v7 - v6;
  NetworkWiFiManager.getWiFiRecord()(v3);
  if (__swift_getEnumTagSinglePayload(v3, 1, v4) == 1)
  {
    outlined destroy of WiFiRecord?(v3);
    return 0;
  }
  else
  {
    outlined init with take of WiFiRecord(v3, v8);
    type metadata accessor for WiFiRecordRepresentation(0);
    id v9 = static WiFiRecordRepresentation.wiFiRecordRepresentation(from:)(v8);
    outlined destroy of WiFiRecord(v8);
  }
  return v9;
}

uint64_t NetworkWiFiManager.getWiFiRecord()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = type metadata accessor for WiFiRecord(0);
  OUTLINED_FUNCTION_0_7();
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v62 - v9;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WiFiRecord?);
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  uint64_t v67 = (uint64_t)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v70 = (uint64_t)&v62 - v15;
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  Swift::String v18 = (char *)&v62 - v17;
  MEMORY[0x270FA5388](v16);
  unint64_t v20 = (char *)&v62 - v19;
  __swift_storeEnumTagSinglePayload((uint64_t)&v62 - v19, 1, 1, v4);
  NetworkWiFiManager.currentNetwork()();
  uint64_t v66 = v8;
  if (!v21)
  {
    uint64_t v24 = 0;
    BOOL v68 = 0;
    uint64_t v69 = 0;
    unint64_t v29 = 0xE700000000000000;
    uint64_t v27 = 0x6E776F6E6B6E75;
LABEL_6:
    char v30 = *(void **)(v1 + OBJC_IVAR___SNNetworkWiFiManagerInternal_interface);
    if (v30)
    {
      unint64_t v64 = v10;
      id v31 = v30;
      uint64_t v32 = outlined bridged method (pb) of @objc CWFInterface.ssid()(v31);
      unint64_t v34 = v33;
      outlined consume of Data?(v32, v33);
      if (v34 >> 60 != 15)
      {
        uint64_t v65 = a1;
        id v63 = objc_msgSend(v31, sel_RSSI);
        id v39 = objc_msgSend(v31, sel_CCA);
        uint64_t v40 = static WiFiPhyModeApple80211.wifiPhyMode(_:)((int)objc_msgSend(v31, sel_PHYMode));
        unint64_t v42 = v41;
        if (v39) {
          uint64_t v43 = (uint64_t)v39;
        }
        else {
          uint64_t v43 = v24;
        }
        uint64_t v62 = v43;
        uint64_t v44 = CWFInterface.channelInfo.getter();
        uint64_t v46 = v45;
        BOOL v47 = v40 == 0x6E776F6E6B6E75 && v42 == 0xE700000000000000;
        if (v47 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          uint64_t v27 = v40;
          unint64_t v29 = v42;
        }
        uint64_t v48 = v65;
        Date.init()();
        uint64_t v49 = v69;
        *(void *)Swift::String v18 = v63;
        *((void *)v18 + 1) = v49;
        *((void *)v18 + 2) = v62;
        *((void *)v18 + 3) = v44;
        *((void *)v18 + 4) = v46;
        *((void *)v18 + 5) = v27;
        *((void *)v18 + 6) = v29;
        v18[56] = v68;
        __swift_storeEnumTagSinglePayload((uint64_t)v18, 0, 1, v4);
        outlined assign with take of WiFiRecord?((uint64_t)v18, (uint64_t)v20);
        if (one-time initialization token for siriNetwork != -1) {
          swift_once();
        }
        uint64_t v50 = type metadata accessor for Logger();
        unint64_t v51 = OUTLINED_FUNCTION_7(v50, (uint64_t)static Logger.siriNetwork);
        os_log_type_t v52 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v51, v52))
        {
          uint64_t v53 = (uint8_t *)swift_slowAlloc();
          v72[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v53 = 136315138;
          swift_beginAccess();
          uint64_t v54 = v70;
          outlined init with copy of WiFiRecord?((uint64_t)v20, v70);
          uint64_t v55 = v54;
          uint64_t v56 = v67;
          outlined init with copy of WiFiRecord?(v55, v67);
          if (__swift_getEnumTagSinglePayload(v56, 1, v4) == 1)
          {
            unint64_t v57 = 0xEB00000000656C62;
            uint64_t v58 = 0x616C696176616E75;
          }
          else
          {
            uint64_t v59 = (uint64_t)v64;
            outlined init with take of WiFiRecord(v56, (uint64_t)v64);
            outlined init with copy of WiFiRecord(v59, (uint64_t)v66);
            uint64_t v58 = String.init<A>(describing:)();
            unint64_t v57 = v60;
            outlined destroy of WiFiRecord(v59);
          }
          outlined destroy of WiFiRecord?(v70);
          uint64_t v71 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58, v57, v72);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_25D6CC000, v51, v52, "NetworkWiFiManager - WiFiRecord: %s", v53, 0xCu);
          swift_arrayDestroy();
          OUTLINED_FUNCTION_1_2();
          OUTLINED_FUNCTION_1_2();

          uint64_t v48 = v65;
        }
        else
        {
        }
        swift_beginAccess();
        outlined init with copy of WiFiRecord?((uint64_t)v20, v48);
        return outlined destroy of WiFiRecord?((uint64_t)v20);
      }
    }
    swift_bridgeObjectRelease();
    if (one-time initialization token for siriNetwork != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    char v36 = OUTLINED_FUNCTION_7(v35, (uint64_t)static Logger.siriNetwork);
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      char v38 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v38 = 0;
      _os_log_impl(&dword_25D6CC000, v36, v37, "NetworkWiFiManager - WiFiRecord: Not available device to get WiFiRecord", v38, 2u);
      OUTLINED_FUNCTION_1_2();
    }

    __swift_storeEnumTagSinglePayload(a1, 1, 1, v4);
    return outlined destroy of WiFiRecord?((uint64_t)v20);
  }
  uint64_t v22 = MEMORY[0x2611B2220](5394003, 0xE300000000000000);
  uint64_t v69 = OUTLINED_FUNCTION_3_17(v22);

  BOOL v68 = WiFiNetworkIsCaptive() != 0;
  uint64_t v23 = MEMORY[0x2611B2220](4277059, 0xE300000000000000);
  uint64_t v24 = OUTLINED_FUNCTION_3_17(v23);

  uint64_t v25 = MEMORY[0x2611B2220](0x45444F4D5F594850, 0xE800000000000000);
  unint64_t v26 = OUTLINED_FUNCTION_3_17(v25);

  if ((v26 & 0x8000000000000000) == 0 && !HIDWORD(v26))
  {
    uint64_t v27 = static WiFiPhyModeApple80211.wifiPhyMode(_:)(v26);
    unint64_t v29 = v28;
    goto LABEL_6;
  }
  OUTLINED_FUNCTION_1_0();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined destroy of WiFiRecord?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WiFiRecord?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of WiFiRecord(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for WiFiRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of WiFiRecord(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for WiFiRecord(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

Swift::Bool __swiftcall NetworkWiFiManager.isWiFiEnabled()()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR___SNNetworkWiFiManagerInternal_interface);
  if (!v1) {
    return 0;
  }
  id v2 = v1;
  unsigned __int8 v3 = objc_msgSend(v2, sel_powerOn);
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = OUTLINED_FUNCTION_7(v4, (uint64_t)static Logger.siriNetwork);
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 67109120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_25D6CC000, v5, v6, "NetworkWiFiManager - WiFiEnabled: %{BOOL}d", v7, 8u);
    OUTLINED_FUNCTION_1_2();
  }

  return v3;
}

uint64_t NetworkWiFiManager.setWiFiManagerClientType(_:)(uint64_t result)
{
  if (*(_DWORD *)(v1 + OBJC_IVAR___SNNetworkWiFiManagerInternal_wifiClientType) != result)
  {
    *(_DWORD *)(v1 + OBJC_IVAR___SNNetworkWiFiManagerInternal_wifiClientType) = result;
    return MEMORY[0x270F4B688](*(void *)(v1 + OBJC_IVAR___SNNetworkWiFiManagerInternal_wifiManager), result);
  }
  return result;
}

Swift::Void __swiftcall NetworkWiFiManager.acquireWiFiAssertion(wifiAssertionTypeRawValue:)(Swift::Int wifiAssertionTypeRawValue)
{
  char v1 = wifiAssertionTypeRawValue == 2;
  if (wifiAssertionTypeRawValue == 3) {
    char v1 = 2;
  }
  char v2 = v1;
  NetworkWiFiManager.acquireWiFiAssertion(wifiAssertionType:)((SiriNetwork::WiFiAssertionType)&v2);
}

Swift::Void __swiftcall NetworkWiFiManager.acquireWiFiAssertion(wifiAssertionType:)(SiriNetwork::WiFiAssertionType wifiAssertionType)
{
  uint64_t v1 = *(char *)wifiAssertionType;
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  unsigned __int8 v3 = OUTLINED_FUNCTION_7(v2, (uint64_t)static Logger.siriNetwork);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    uint64_t v6 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_25D6CC000, v3, v4, "NetworkWiFiManager - Assertion: acquireWiFiAssertion: %s", v5, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_1_2();
    OUTLINED_FUNCTION_1_2();
  }

  NetworkWiFiManager.setWiFiManagerClientType(_:)(dword_25D7924FC[v1]);
}

Swift::Void __swiftcall NetworkWiFiManager.releaseWiFiAssertion()()
{
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = OUTLINED_FUNCTION_7(v0, (uint64_t)static Logger.siriNetwork);
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    unsigned __int8 v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unsigned __int8 v3 = 0;
    _os_log_impl(&dword_25D6CC000, v1, v2, "NetworkWiFiManager - Assertion: releaseWiFiAssertion", v3, 2u);
    OUTLINED_FUNCTION_1_2();
  }

  NetworkWiFiManager.setWiFiManagerClientType(_:)(0);
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned Int32)@<X0>(uint64_t (*a1)(void)@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

uint64_t closure #1 in serialize<A>(_:at:)()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:)(uint64_t (*a1)(void))
{
  return a1() & 1;
}

{
  return a1();
}

uint64_t outlined bridged method (pb) of @objc CWFInterface.ssid()(void *a1)
{
  id v1 = objc_msgSend(a1, sel_SSID);
  if (!v1) {
    return 0;
  }
  os_log_type_t v2 = v1;
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t outlined assign with take of WiFiRecord?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WiFiRecord?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of WiFiRecord?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WiFiRecord?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of WiFiRecord(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for WiFiRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t method lookup function for NetworkWiFiManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for NetworkWiFiManager);
}

uint64_t dispatch thunk of NetworkWiFiManager.getWiFiRecordRepresentation()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x120))();
}

uint64_t dispatch thunk of NetworkWiFiManager.getWiFiRecord()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x128))();
}

uint64_t dispatch thunk of NetworkWiFiManager.isWiFiEnabled()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x130))();
}

uint64_t dispatch thunk of NetworkWiFiManager.acquireWiFiAssertion(wifiAssertionTypeRawValue:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x140))();
}

uint64_t dispatch thunk of NetworkWiFiManager.acquireWiFiAssertion(wifiAssertionType:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x148))();
}

uint64_t dispatch thunk of NetworkWiFiManager.releaseWiFiAssertion()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x150))();
}

uint64_t OUTLINED_FUNCTION_3_17(uint64_t a1)
{
  return MEMORY[0x270F4B738](v1, a1);
}

uint64_t ConnectionNetworkReport.init(ospreyConnectionMetrics:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  char v40 = 1;
  char v38 = 1;
  char v36 = 1;
  char v33 = 1;
  char v31 = 1;
  objc_msgSend(a1, sel_fetchStartToFirstByteTime);
  uint64_t v5 = v4;
  objc_msgSend(a1, sel_fetchStartToDomainLookupStartTime);
  if (Double.milliseconds.getter(v6) < 1)
  {
    uint64_t v9 = 0;
  }
  else
  {
    objc_msgSend(a1, sel_fetchStartToDomainLookupStartTime);
    uint64_t v8 = Double.milliseconds.getter(v7);
    if (v8 < 0) {
      goto LABEL_22;
    }
    uint64_t v9 = v8;
    char v38 = 0;
  }
  objc_msgSend(a1, sel_dnsResolutionTime);
  if (Double.milliseconds.getter(v10) < 1)
  {
    uint64_t v13 = 0;
  }
  else
  {
    objc_msgSend(a1, sel_dnsResolutionTime);
    uint64_t v12 = Double.milliseconds.getter(v11);
    if (v12 < 0) {
      goto LABEL_22;
    }
    uint64_t v13 = v12;
    char v40 = 0;
  }
  objc_msgSend(a1, sel_tcpConnectTime);
  if (Double.milliseconds.getter(v14) < 1)
  {
    uint64_t v17 = 0;
  }
  else
  {
    objc_msgSend(a1, sel_tcpConnectTime);
    uint64_t v16 = Double.milliseconds.getter(v15);
    if (v16 < 0) {
      goto LABEL_22;
    }
    uint64_t v17 = v16;
    char v33 = 0;
  }
  objc_msgSend(a1, sel_connectionEstablishmentTime);
  if (Double.milliseconds.getter(v18) < 1)
  {
    uint64_t v21 = 0;
  }
  else
  {
    objc_msgSend(a1, sel_connectionEstablishmentTime);
    uint64_t v20 = Double.milliseconds.getter(v19);
    if (v20 < 0) {
      goto LABEL_22;
    }
    uint64_t v21 = v20;
    char v36 = 0;
  }
  objc_msgSend(a1, sel_secureConnectionTime);
  if (Double.milliseconds.getter(v22) < 1)
  {

    uint64_t result = 0;
    goto LABEL_21;
  }
  objc_msgSend(a1, sel_secureConnectionTime);
  double v24 = v23;

  uint64_t result = Double.milliseconds.getter(v24);
  if ((result & 0x8000000000000000) == 0)
  {
    char v31 = 0;
LABEL_21:
    *(_WORD *)(a2 + 5) = v46;
    *(unsigned char *)(a2 + 7) = v47;
    *(_DWORD *)(a2 + 33) = *(_DWORD *)v45;
    *(_DWORD *)(a2 + 36) = *(_DWORD *)&v45[3];
    *(_WORD *)(a2 + 93) = v43;
    *(unsigned char *)(a2 + 95) = v44;
    *(unsigned char *)(a2 + 103) = v42;
    *(_WORD *)(a2 + 101) = v41;
    *(_DWORD *)(a2 + 137) = *(_DWORD *)v39;
    *(_DWORD *)(a2 + 140) = *(_DWORD *)&v39[3];
    *(_DWORD *)(a2 + 153) = *(_DWORD *)v37;
    *(_DWORD *)(a2 + 156) = *(_DWORD *)&v37[3];
    *(_DWORD *)(a2 + 172) = *(_DWORD *)&v35[3];
    *(_DWORD *)(a2 + 169) = *(_DWORD *)v35;
    *(_DWORD *)(a2 + 188) = *(_DWORD *)&v34[3];
    *(_DWORD *)(a2 + 185) = *(_DWORD *)v34;
    *(_DWORD *)(a2 + 204) = *(_DWORD *)&v32[3];
    *(_DWORD *)(a2 + 201) = *(_DWORD *)v32;
    *(_DWORD *)(a2 + 220) = *(_DWORD *)&v30[3];
    *(_DWORD *)(a2 + 217) = *(_DWORD *)v30;
    *(_DWORD *)(a2 + 249) = *(_DWORD *)v29;
    *(_DWORD *)(a2 + 252) = *(_DWORD *)&v29[3];
    *(_WORD *)(a2 + 270) = v28;
    *(_DWORD *)(a2 + 266) = v27;
    *(_DWORD *)(a2 + 284) = *(_DWORD *)&v26[3];
    *(_DWORD *)(a2 + 281) = *(_DWORD *)v26;
    *(_DWORD *)a2 = 0;
    *(unsigned char *)(a2 + 4) = 1;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(unsigned char *)(a2 + 32) = 1;
    *(_DWORD *)(a2 + 88) = 0;
    *(_OWORD *)(a2 + 72) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(unsigned char *)(a2 + 92) = 1;
    *(_DWORD *)(a2 + 96) = 0;
    *(unsigned char *)(a2 + 100) = 1;
    *(void *)(a2 + 104) = MEMORY[0x263F8EE80];
    *(void *)(a2 + 112) = 0;
    *(void *)(a2 + 120) = 0;
    *(void *)(a2 + 128) = v13;
    *(unsigned char *)(a2 + 136) = v40;
    *(void *)(a2 + 144) = v9;
    *(unsigned char *)(a2 + 152) = v38;
    *(void *)(a2 + 160) = v21;
    *(unsigned char *)(a2 + 168) = v36;
    *(void *)(a2 + 176) = 0;
    *(unsigned char *)(a2 + 184) = 1;
    *(void *)(a2 + 192) = v17;
    *(unsigned char *)(a2 + 200) = v33;
    *(void *)(a2 + 208) = result;
    *(unsigned char *)(a2 + 216) = v31;
    *(void *)(a2 + 224) = 0;
    *(void *)(a2 + 232) = 0;
    *(void *)(a2 + 240) = 0;
    *(unsigned char *)(a2 + 248) = 1;
    *(void *)(a2 + 256) = v5;
    *(_WORD *)(a2 + 264) = 0;
    *(void *)(a2 + 272) = 0;
    *(unsigned char *)(a2 + 280) = 1;
    *(void *)(a2 + 288) = 0;
    *(unsigned char *)(a2 + 296) = 1;
    *(void *)(a2 + 304) = 0;
    *(unsigned char *)(a2 + 312) = 1;
    return result;
  }
LABEL_22:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

id static AceSerialization.aceDataForObject(_:)(void *a1)
{
  v19[2] = *(id *)MEMORY[0x263EF8340];
  if (!a1) {
    goto LABEL_10;
  }
  uint64_t v1 = outlined bridged method (pb) of @objc AceObject._serializedData()(a1);
  unint64_t v4 = v3;
  uint64_t v5 = v1;
  unint64_t v6 = v3;
  if (v3 >> 60 != 15) {
    goto LABEL_6;
  }
  id v7 = objc_msgSend(a1, sel_dictionary);
  if (!v7)
  {
LABEL_10:
    lazy protocol witness table accessor for type AceSerializationError and conformance AceSerializationError();
    OUTLINED_FUNCTION_16_0();
    *double v15 = xmmword_25D791430;
    OUTLINED_FUNCTION_5_12((uint64_t)v15, 3);
    return (id)v1;
  }
  uint64_t v8 = v7;
  v19[0] = 0;
  id v9 = objc_msgSend(self, sel_dataWithPropertyList_format_options_error_, v7, 200, 0, v19);
  id v10 = v19[0];
  if (!v9)
  {
    uint64_t v17 = v10;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return (id)v1;
  }
  uint64_t v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v6 = v11;

  outlined copy of Data._Representation(v5, v6);
LABEL_6:
  outlined copy of Data?(v1, v4);
  uint64_t v12 = Data.count.getter();
  if (v12 > 4294967294)
  {
    lazy protocol witness table accessor for type AceSerializationError and conformance AceSerializationError();
    OUTLINED_FUNCTION_16_0();
    *uint64_t v16 = xmmword_25D792120;
    OUTLINED_FUNCTION_5_12((uint64_t)v16, 3);
    OUTLINED_FUNCTION_3_18();
    outlined consume of Data?(v5, v6);
    return (id)v1;
  }
  if ((v12 & 0x8000000000000000) == 0)
  {
    uint64_t v13 = (void *)static AceDataHeader.createHeaderData(forType:lengthOrIdentifier:)(3, v12);
    v19[0] = v13;
    v19[1] = (id)v14;
    if (v14 >> 60 == 15)
    {
      uint64_t v1 = (uint64_t)v13;
      outlined consume of Data?(v5, v6);
      OUTLINED_FUNCTION_3_18();
    }
    else
    {
      Data.append(_:)();
      OUTLINED_FUNCTION_3_18();
      outlined consume of Data?(v5, v6);
      return v19[0];
    }
    return (id)v1;
  }
  OUTLINED_FUNCTION_1_0();
  id result = (id)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t static AceSerialization.aceDataForSpeechPacket(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Data.Deallocator();
  OUTLINED_FUNCTION_0_0();
  unint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_0_1();
  size_t v10 = v9 - v8;
  unint64_t v11 = (uint64_t *)(a1 + OBJC_IVAR___SNSpeechPacketInternal_internalRefId);
  OUTLINED_FUNCTION_4_13();
  uint64_t v12 = v11[1];
  if (!v12) {
    goto LABEL_6;
  }
  uint64_t v13 = *v11;
  swift_bridgeObjectRetain();
  unint64_t v14 = (void *)MEMORY[0x2611B2220](v13, v12);
  swift_bridgeObjectRelease();
  uint64_t v12 = (uint64_t)objc_msgSend(v14, sel_UTF8String);
  id v15 = v14;
  if (!v12) {
    goto LABEL_6;
  }
  int64_t v16 = strlen((const char *)v12);
  if (v16 > 127)
  {
LABEL_12:
    lazy protocol witness table accessor for type AceSerializationError and conformance AceSerializationError();
    OUTLINED_FUNCTION_16_0();
    _OWORD *v23 = xmmword_25D7906D0;
    return OUTLINED_FUNCTION_5_12((uint64_t)v23, 2);
  }
  uint64_t v17 = v16;
  if (v16 < -128)
  {
    __break(1u);
LABEL_6:
    uint64_t v17 = 0;
  }
  double v18 = (void *)(a1 + OBJC_IVAR___SNSpeechPacketInternal_packetNumber);
  OUTLINED_FUNCTION_4_13();
  if (*v18 != (__int16)*v18) {
    goto LABEL_12;
  }
  LOWORD(v48) = *v18;
  double v19 = (uint64_t *)(a1 + OBJC_IVAR___SNSpeechPacketInternal_packets);
  OUTLINED_FUNCTION_4_13();
  uint64_t v20 = *v19;
  uint64_t v21 = (unint64_t)*v19 >> 62;
  if (v21) {
    goto LABEL_59;
  }
  uint64_t v22 = *(void *)((*v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (1)
  {
    if (v22 >= 0x8000)
    {
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
    uint64_t v46 = v17;
    if (v22 < (uint64_t)0xC000000000000000)
    {
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
      goto LABEL_66;
    }
    uint64_t v17 = 2 * v22;
    if (v22 < -32768 || v17 < (uint64_t)0xFFFFFFFF80000000) {
      goto LABEL_61;
    }
    if (v17 > 0x7FFFFFFF) {
      goto LABEL_62;
    }
    uint64_t v42 = v4;
    char v44 = (const void *)v12;
    if (v21)
    {
      swift_bridgeObjectRetain();
      uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    }
    else
    {
      uint64_t v4 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
    }
    size_t v40 = v10;
    __int16 v41 = v6;
    __int16 v43 = v22;
    if (v4)
    {
      if (v4 < 1) {
        __break(1u);
      }
      size_t v10 = 0;
      uint64_t v21 = v20 & 0xC000000000000001;
      unint64_t v6 = (char *)0xFFFFFFFF80000000;
      uint64_t v12 = 0x7FFFFFFFLL;
      while (1)
      {
        id v26 = v21 ? (id)MEMORY[0x2611B2780](v10, v20) : *(id *)(v20 + 8 * v10 + 32);
        uint64_t v22 = (uint64_t)v26;
        uint64_t v2 = (uint64_t)objc_msgSend(v26, sel_length, v40, v41);

        if (v2 < (uint64_t)0xFFFFFFFF80000000) {
          break;
        }
        if (v2 > 0x7FFFFFFF) {
          goto LABEL_56;
        }
        BOOL v27 = __OFADD__(v17, v2);
        uint64_t v17 = (v17 + v2);
        if (v27) {
          goto LABEL_57;
        }
        if (v4 == ++v10) {
          goto LABEL_32;
        }
      }
      __break(1u);
LABEL_56:
      __break(1u);
LABEL_57:
      __break(1u);
      goto LABEL_58;
    }
LABEL_32:
    swift_bridgeObjectRelease();
    int v28 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      goto LABEL_63;
    }
    uint64_t v22 = v46;
    BOOL v27 = __OFADD__(v28, (char)v46);
    int v29 = v28 + (char)v46;
    if (v27) {
      goto LABEL_64;
    }
    size_t v10 = (v29 + 4);
    if (__OFADD__(v29, 4)) {
      goto LABEL_65;
    }
    uint64_t v2 = (int)v10;
    uint64_t v30 = swift_slowAlloc();
    if ((v10 & 0x80000000) != 0) {
      goto LABEL_69;
    }
    unint64_t v6 = (char *)v30;
    uint64_t v49 = static AceDataHeader.createHeaderData(forType:lengthOrIdentifier:)(6, v10);
    unint64_t v50 = v31;
    *unint64_t v6 = v46;
    size_t v10 = (size_t)(v6 + 1);
    if ((char)v46 >= 1)
    {
      memmove(v6 + 1, v44, v46);
      v10 += v46;
    }
    uint64_t v22 = (__int16)v48;
    if (one-time initialization token for htons == -1)
    {
      if ((v22 & 0x80000000) != 0) {
        goto LABEL_69;
      }
      goto LABEL_40;
    }
LABEL_66:
    swift_once();
    if ((v22 & 0x80000000) != 0)
    {
LABEL_69:
      OUTLINED_FUNCTION_1_0();
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
LABEL_40:
    uint64_t v45 = v6;
    uint64_t v47 = v2;
    uint64_t v32 = static Endian.htons;
    *(_WORD *)size_t v10 = static Endian.htons(v22);
    if (v43 < 0) {
      goto LABEL_69;
    }
    *(_WORD *)(v10 + 2) = v32(v43);
    if (!v4) {
      break;
    }
    unint64_t v6 = (char *)(v10 + 4);
    unint64_t v48 = v20 & 0xC000000000000001;
    uint64_t v21 = 4;
    while (1)
    {
      uint64_t v12 = v21 - 4;
      id v33 = v48 ? (id)MEMORY[0x2611B2780](v21 - 4, v20) : *(id *)(v20 + 8 * v21);
      uint64_t v17 = (uint64_t)v33;
      uint64_t v2 = v21 - 3;
      if (__OFADD__(v12, 1)) {
        break;
      }
      uint64_t v34 = (uint64_t)objc_msgSend(v33, sel_length);
      if (v34 >= 0x10000)
      {
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type AceSerializationError and conformance AceSerializationError();
        OUTLINED_FUNCTION_16_0();
        *id v39 = xmmword_25D7906D0;
        OUTLINED_FUNCTION_5_12((uint64_t)v39, 2);

        return outlined consume of Data?(v49, v50);
      }
      size_t v10 = v34;
      uint64_t v35 = (uint64_t (*)(void))static Endian.htons;
      unint64_t v36 = (unint64_t)objc_msgSend((id)v17, (SEL)&selRef_setInternalRefId_);
      if ((v36 & 0x8000000000000000) != 0 || v36 >= 0x10000) {
        goto LABEL_69;
      }
      *(_WORD *)unint64_t v6 = v35();
      os_log_type_t v37 = v6 + 2;
      id v38 = (id) v17;
      memmove(v37, objc_msgSend(v38, sel_bytes), v10);

      unint64_t v6 = &v37[v10];
      ++v21;
      if (v2 == v4) {
        goto LABEL_51;
      }
    }
LABEL_58:
    __break(1u);
LABEL_59:
    swift_bridgeObjectRetain_n();
    uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
LABEL_51:
  swift_bridgeObjectRelease();
  (*((void (**)(size_t, void, uint64_t))v41 + 13))(v40, *MEMORY[0x263F06EF0], v42);
  MEMORY[0x2611B1890](v45, v47, v40);
  if (v50 >> 60 != 15) {
    Data.append(_:)();
  }
  OUTLINED_FUNCTION_3_18();
  return v49;
}

int64_t static AceSerialization.parseAceStreamHeader(data:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for aceHeaderMagic != -1) {
    swift_once();
  }
  int64_t v4 = *(void *)(static AceSerialization.aceHeaderMagic + 16);
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  if (Data.count.getter() <= v4)
  {
    uint64_t v8 = Data.count.getter();
    lazy protocol witness table accessor for type AceSerializationError and conformance AceSerializationError();
    OUTLINED_FUNCTION_16_0();
    *(void *)uint64_t v9 = v4 + 1;
    *(void *)(v9 + 8) = v8;
    *(unsigned char *)(v9 + 16) = 0;
    swift_willThrow();
  }
  else
  {
    switch(v6 >> 62)
    {
      case 1uLL:
        if (v5 >> 32 < (int)v5)
        {
          __break(1u);
          JUMPOUT(0x25D736B90);
        }
        swift_retain();
        int64_t v4 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((char *)(int)v5, v5 >> 32, v6 & 0x3FFFFFFFFFFFFFFFLL, v4);
        outlined consume of Data._Representation(v5, v6);
        if (!v1) {
          goto LABEL_16;
        }
        break;
      case 2uLL:
        unint64_t v11 = *(char **)(v5 + 16);
        uint64_t v12 = *(void *)(v5 + 24);
        swift_retain();
        swift_retain();
        int64_t v4 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v11, v12, v6 & 0x3FFFFFFFFFFFFFFFLL, v4);
        swift_release();
        swift_release();
        if (!v2) {
          goto LABEL_16;
        }
        break;
      case 3uLL:
        uint64_t v7 = _ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_A13Et_sAC_p11SiriNetwork24AceStreamCompressionTypeOSgTg5037_s10Foundation4DataV06InlineB0V15withb27BytesyxxSWKXEKlFxSWKXEfU_11g9Network24ijkL7OSg_TG5SWxsAC_pRi_zRi0_zlyAIIsgyrzo_SiTf1nc_n04_s11g9Network16i24SerializationO05parseC12j18Header4dataAA0cF15kly6_Sit10nO17Vz_tKFZAHSWKXEfU_AF0I13SerializationOXMtSiTf1ncn_n(0, 0, 0, v4);
        if (!v1) {
          goto LABEL_15;
        }
        break;
      default:
        uint64_t v7 = _ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_A13Et_sAC_p11SiriNetwork24AceStreamCompressionTypeOSgTg5037_s10Foundation4DataV06InlineB0V15withb27BytesyxxSWKXEKlFxSWKXEfU_11g9Network24ijkL7OSg_TG5SWxsAC_pRi_zRi0_zlyAIIsgyrzo_SiTf1nc_n04_s11g9Network16i24SerializationO05parseC12j18Header4dataAA0cF15kly6_Sit10nO17Vz_tKFZAHSWKXEfU_AF0I13SerializationOXMtSiTf1ncn_n(v5, v6 & 0xFFFFFFFFFFFFLL, BYTE6(v6), v4);
        if (!v1)
        {
LABEL_15:
          int64_t v4 = v7;
LABEL_16:
          uint64_t v13 = *a1;
          unint64_t v14 = a1[1];
          uint64_t v15 = Data.advanced(by:)();
          uint64_t v17 = v16;
          outlined consume of Data._Representation(v13, v14);
          *a1 = v15;
          a1[1] = v17;
        }
        break;
    }
  }
  return v4;
}

void one-time initialization function for isLittleEndian()
{
  static Endian.isLittleEndian = 1;
}

uint64_t one-time initialization function for htons()
{
  if (one-time initialization token for isLittleEndian != -1) {
    uint64_t result = swift_once();
  }
  uint64_t v0 = (uint64_t (*)(unsigned __int16))destructiveProjectEnumData for ConnectionConfigurationError;
  if (static Endian.isLittleEndian) {
    uint64_t v0 = @nonobjc _OSSwapInt16(_:);
  }
  static Endian.htons = (uint64_t)v0;
  unk_26A695F90 = 0;
  return result;
}

uint64_t @nonobjc _OSSwapInt16(_:)(unsigned __int16 a1)
{
  return _OSSwapInt16(a1);
}

uint64_t one-time initialization function for htonl()
{
  if (one-time initialization token for isLittleEndian != -1) {
    uint64_t result = swift_once();
  }
  uint64_t v0 = (uint64_t (*)())destructiveProjectEnumData for ConnectionConfigurationError;
  if (static Endian.isLittleEndian) {
    uint64_t v0 = @nonobjc _OSSwapInt32(_:);
  }
  static Endian.htonl = (uint64_t)v0;
  unk_26A695FA0 = 0;
  return result;
}

uint64_t one-time initialization function for ntohs()
{
  if (one-time initialization token for isLittleEndian != -1) {
    uint64_t result = swift_once();
  }
  uint64_t v0 = (uint64_t (*)(unsigned __int16))destructiveProjectEnumData for ConnectionConfigurationError;
  if (static Endian.isLittleEndian) {
    uint64_t v0 = @nonobjc _OSSwapInt16(_:);
  }
  static Endian.ntohs = (uint64_t)v0;
  unk_26A695FB0 = 0;
  return result;
}

uint64_t one-time initialization function for ntohl()
{
  if (one-time initialization token for isLittleEndian != -1) {
    uint64_t result = swift_once();
  }
  uint64_t v0 = (uint64_t (*)())destructiveProjectEnumData for ConnectionConfigurationError;
  if (static Endian.isLittleEndian) {
    uint64_t v0 = @nonobjc _OSSwapInt32(_:);
  }
  static Endian.ntohl = (uint64_t)v0;
  unk_26A695FC0 = 0;
  return result;
}

uint64_t AceStreamCompressionType.init(rawValue:)(char a1)
{
  if (a1 == 2) {
    unsigned int v1 = 1;
  }
  else {
    unsigned int v1 = 2;
  }
  if (a1 == 1) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t AceStreamCompressionType.rawValue.getter(char a1)
{
  return (a1 & 1u) + 1;
}

uint64_t AceDataType.init(rawValue:)(char a1)
{
  if ((a1 + 1) > 8u) {
    return 7;
  }
  else {
    return byte_25D792508[(char)(a1 + 1)];
  }
}

unint64_t AceDataType.rawValue.getter(char a1)
{
  return 0x70403020100FFuLL >> (8 * a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AceStreamCompressionType(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AceStreamCompressionType@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = AceStreamCompressionType.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AceDataType@<X0>(unsigned char *a1@<X8>)
{
  unint64_t result = AceDataType.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t static AceStreamHeader.createAceStreamHeaderData(withMagic:compressionType:)(uint64_t a1, char a2)
{
  uint64_t v4 = type metadata accessor for Data.Deallocator();
  OUTLINED_FUNCTION_0_0();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_0_1();
  uint64_t v10 = v9 - v8;
  size_t v11 = *(void *)(a1 + 16);
  char v12 = a2 & 1;
  uint64_t v13 = (void *)swift_slowAlloc();
  memcpy(v13, (const void *)(a1 + 32), v11);
  *((unsigned char *)v13 + v11) = v12 + 1;
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v10, *MEMORY[0x263F06EF0], v4);
  return MEMORY[0x2611B1890](v13, v11 + 1, v10);
}

uint64_t static AceDataHeader.createHeaderData(forType:lengthOrIdentifier:)(char a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Data.Deallocator();
  OUTLINED_FUNCTION_0_0();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_0_1();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = swift_slowAlloc();
  *(unsigned char *)uint64_t v11 = 0x70403020100FFuLL >> (8 * a1);
  if (one-time initialization token for htonl != -1) {
    swift_once();
  }
  *(_DWORD *)(v11 + 1) = static Endian.htonl(a2);
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v10, *MEMORY[0x263F06EF0], v4);
  Data.Deallocator._deallocator.getter();
  type metadata accessor for __DataStorage();
  swift_allocObject();
  swift_retain();
  uint64_t v12 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
  uint64_t v13 = MEMORY[0x2611B18A0](v12, 5);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v10, v4);
  return v13;
}

void one-time initialization function for aceHeaderMagic()
{
  static AceSerialization.aceHeaderMagic = (uint64_t)&outlined read-only object #0 of one-time initialization function for aceHeaderMagic;
}

uint64_t closure #1 in static AceSerialization.parsePacket(data:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v38 = 0;
  memset(v37, 0, sizeof(v37));
  if (!a1)
  {
    lazy protocol witness table accessor for type AceSerializationError and conformance AceSerializationError();
    OUTLINED_FUNCTION_16_0();
    *(_OWORD *)uint64_t v7 = xmmword_25D7906D0;
    char v8 = 1;
LABEL_6:
    *(unsigned char *)(v7 + 16) = v8;
LABEL_7:
    swift_willThrow();
    return outlined destroy of SessionObject?((uint64_t)v37);
  }
  uint64_t v4 = a2 - a1;
  unint64_t v5 = a2 - a1 - 5;
  if (a2 - a1 < 5)
  {
    lazy protocol witness table accessor for type AceSerializationError and conformance AceSerializationError();
    OUTLINED_FUNCTION_16_0();
    *(void *)uint64_t v6 = 5;
    *(void *)(v6 + 8) = v4;
LABEL_4:
    *(unsigned char *)(v6 + 16) = 0;
    goto LABEL_7;
  }
  unsigned __int8 v11 = AceDataType.init(rawValue:)(*(unsigned char *)a1);
  int v12 = 0;
  switch(v11)
  {
    case 2u:
    case 3u:
      goto LABEL_15;
    case 6u:
      int v12 = 1;
LABEL_15:
      if (one-time initialization token for ntohl != -1) {
        swift_once();
      }
      unint64_t v16 = static Endian.ntohl(*(unsigned int *)(a1 + 1));
      if (v5 < v16)
      {
        lazy protocol witness table accessor for type AceSerializationError and conformance AceSerializationError();
        OUTLINED_FUNCTION_16_0();
        *(void *)uint64_t v6 = v16;
        *(void *)(v6 + 8) = v5;
        goto LABEL_4;
      }
      uint64_t v17 = a1 + 5;
      double v18 = (unsigned __int8 *)(a1 + 5);
      if (v12)
      {
        id v19 = static AceSerialization.parseSpeechPacket(withBytes:length:)(v18, v16);
        if (!v19)
        {
          uint64_t v27 = MEMORY[0x2611B18D0](a1 + 5, v16);
          uint64_t v29 = v28;
          lazy protocol witness table accessor for type AceSerializationError and conformance AceSerializationError();
          OUTLINED_FUNCTION_16_0();
          *(void *)uint64_t v7 = v27;
          *(void *)(v7 + 8) = v29;
          char v8 = 2;
          goto LABEL_6;
        }
        id v20 = v19;
        uint64_t v35 = type metadata accessor for SpeechPacket();
        unint64_t v36 = &protocol witness table for SpeechPacket;
        v34[0] = v20;
      }
      else
      {
        uint64_t v21 = MEMORY[0x2611B18D0](v18, v16);
        unint64_t v23 = v22;
        unint64_t v24 = type metadata accessor for AceObject();
        outlined copy of Data._Representation(v21, v23);
        id v25 = @nonobjc AceObject.__allocating_init(plistData:)(v21, v23);
        if (!v25)
        {
          uint64_t v30 = MEMORY[0x2611B18D0](v17, v16);
          uint64_t v32 = v31;
          lazy protocol witness table accessor for type AceSerializationError and conformance AceSerializationError();
          OUTLINED_FUNCTION_16_0();
          *id v33 = v30;
          v33[1] = v32;
          OUTLINED_FUNCTION_5_12((uint64_t)v33, 1);
          outlined consume of Data._Representation(v21, v23);
          return outlined destroy of SessionObject?((uint64_t)v37);
        }
        id v26 = v25;
        uint64_t v35 = v24;
        unint64_t v36 = &protocol witness table for AceObject;
        outlined consume of Data._Representation(v21, v23);
        v34[0] = v26;
      }
      outlined destroy of SessionObject?((uint64_t)v37);
      outlined init with take of SessionObject?((uint64_t)v34, (uint64_t)v37);
      char v13 = 0;
      int v14 = 0;
      uint64_t v15 = v16 + 5;
LABEL_13:
      uint64_t result = outlined init with take of SessionObject?((uint64_t)v37, a3);
      *(unsigned char *)(a3 + 40) = v13;
      *(_DWORD *)(a3 + 44) = v14;
      *(void *)(a3 + 48) = v15;
      break;
    case 7u:
      lazy protocol witness table accessor for type AceSerializationError and conformance AceSerializationError();
      OUTLINED_FUNCTION_16_0();
      *(void *)uint64_t v7 = 0;
      *(void *)(v7 + 8) = 0;
      char v8 = 3;
      goto LABEL_6;
    default:
      char v13 = static AceSerialization.rawPacketType(fromDataType:)(v11);
      if (one-time initialization token for ntohl != -1) {
        swift_once();
      }
      int v14 = static Endian.ntohl(*(unsigned int *)(a1 + 1));
      uint64_t v15 = 5;
      goto LABEL_13;
  }
  return result;
}

id static AceSerialization.parseSpeechPacket(withBytes:length:)(unsigned __int8 *a1, int a2)
{
  uint64_t v4 = type metadata accessor for String.Encoding();
  MEMORY[0x270FA5388](v4 - 8);
  if (!a2) {
    return 0;
  }
  unsigned int v5 = *a1;
  LODWORD(v6) = a2 - 1 - v5;
  if (a2 - 1 < v5) {
    return 0;
  }
  uint64_t v7 = a1 + 1;
  uint64_t v8 = MEMORY[0x2611B18D0](a1 + 1, *a1);
  unint64_t v10 = v9;
  static String.Encoding.utf8.getter();
  uint64_t v11 = String.init(data:encoding:)();
  if (!v12)
  {
    outlined consume of Data._Representation(v8, v10);
    return 0;
  }
  uint64_t v13 = v12;
  if (v6 < 2)
  {
LABEL_8:
    outlined consume of Data._Representation(v8, v10);
LABEL_9:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v14 = v11;
  unint64_t v15 = (unint64_t)&v7[v5];
  uint64_t v16 = *(unsigned __int16 *)v15;
  if (one-time initialization token for ntohs != -1) {
    goto LABEL_36;
  }
LABEL_6:
  uint64_t v17 = static Endian.ntohs;
  unsigned __int16 v18 = static Endian.ntohs(v16);
  if ((v18 & 0x8000) != 0)
  {
    __break(1u);
LABEL_38:
    __break(1u);
  }
  if ((v6 & 0xFFFFFFFE) == 2) {
    goto LABEL_8;
  }
  unsigned __int16 v21 = v18;
  uint64_t v33 = v13;
  __int16 v22 = v17(*(unsigned __int16 *)(v15 + 2));
  if (v22 < 0) {
    goto LABEL_38;
  }
  int v23 = v22;
  uint64_t v24 = MEMORY[0x263F8EE78];
  uint64_t v34 = MEMORY[0x263F8EE78];
  if (!v22) {
    goto LABEL_32;
  }
  unsigned __int16 v31 = v21;
  uint64_t v32 = v14;
  uint64_t v16 = 0;
  id v25 = (unsigned __int16 *)(v15 + 4);
  uint64_t v14 = (v6 - 4);
  do
  {
    if (v23 <= (__int16)v16)
    {
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      swift_once();
      goto LABEL_6;
    }
    uint64_t v13 = (v14 - 2);
    if (v14 < 2) {
      goto LABEL_31;
    }
    uint64_t v6 = (unsigned __int16 *)*v25;
    unint64_t v15 = (unint64_t)static Endian.ntohs;
    if ((static Endian.ntohs(v6) & 0x8000) != 0) {
      goto LABEL_31;
    }
    unsigned __int16 v26 = ((uint64_t (*)(unsigned __int16 *))v15)(v6);
    if ((v26 & 0x8000) != 0) {
      goto LABEL_34;
    }
    unint64_t v15 = (__int16)v26;
    unsigned int v27 = v26;
    BOOL v28 = !v26 || v13 >= v26;
    if (!v28)
    {
LABEL_31:
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(v8, v10);
      goto LABEL_9;
    }
    uint64_t v6 = v25 + 1;
    id v29 = objc_msgSend(objc_allocWithZone(MEMORY[0x263EFF8F8]), sel_initWithBytes_length_, v25 + 1, v26);
    BOOL v28 = v13 >= v27;
    uint64_t v14 = v13 - v27;
    if (!v28) {
      goto LABEL_35;
    }
    uint64_t v13 = (uint64_t)v29;
    MEMORY[0x2611B2350]();
    if (*(void *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    uint64_t v16 = (v16 + 1);
    id v25 = (unsigned __int16 *)((char *)v6 + (unsigned __int16)v15);
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  while ((unsigned __int16)v16 != (unsigned __int16)v23);
  uint64_t v24 = v34;
  uint64_t v14 = v32;
  unsigned __int16 v21 = v31;
LABEL_32:
  id v30 = objc_allocWithZone((Class)type metadata accessor for SpeechPacket());
  id v19 = SpeechPacket.init(aceId:refId:packets:packetNumber:)(0, 0, v14, v33, v24, v21);
  outlined consume of Data._Representation(v8, v10);
  return v19;
}

id @nonobjc AceObject.__allocating_init(plistData:)(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 == 15)
  {
    Class isa = 0;
  }
  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data?(a1, a2);
  }
  id v5 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_aceObjectWithPlistData_, isa);

  return v5;
}

uint64_t static AceSerialization.rawPacketType(fromDataType:)(unsigned __int8 a1)
{
  if (a1 >= 6u) {
    return 0;
  }
  else {
    return (0x30200000104uLL >> (8 * a1));
  }
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(char *a1, uint64_t a2, uint64_t a3, size_t a4)
{
  uint64_t v6 = __DataStorage._bytes.getter();
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = __DataStorage._offset.getter();
    if (__OFSUB__(a1, v8))
    {
      __break(1u);
LABEL_16:
      swift_once();
      goto LABEL_7;
    }
    a1 = &a1[v7 - v8];
  }
  else
  {
    a1 = 0;
  }
  __DataStorage._length.getter();
  if (!a1)
  {
LABEL_8:
    lazy protocol witness table accessor for type AceSerializationError and conformance AceSerializationError();
    swift_allocError();
    *(void *)uint64_t v9 = 0;
    *(void *)(v9 + 8) = 0;
    *(unsigned char *)(v9 + 16) = 3;
    return swift_willThrow();
  }
  if (one-time initialization token for aceHeaderMagic != -1) {
    goto LABEL_16;
  }
LABEL_7:
  if (memcmp(a1, (const void *)(static AceSerialization.aceHeaderMagic + 32), a4)) {
    goto LABEL_8;
  }
  int v11 = a1[a4];
  if (v11 == 2) {
    unsigned int v12 = 1;
  }
  else {
    unsigned int v12 = 2;
  }
  if (v11 == 1) {
    return 0;
  }
  else {
    return v12;
  }
}

uint64_t _ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_A13Et_sAC_p11SiriNetwork24AceStreamCompressionTypeOSgTg5037_s10Foundation4DataV06InlineB0V15withb27BytesyxxSWKXEKlFxSWKXEfU_11g9Network24ijkL7OSg_TG5SWxsAC_pRi_zRi0_zlyAIIsgyrzo_SiTf1nc_n04_s11g9Network16i24SerializationO05parseC12j18Header4dataAA0cF15kly6_Sit10nO17Vz_tKFZAHSWKXEfU_AF0I13SerializationOXMtSiTf1ncn_n(uint64_t a1, uint64_t a2, int a3, size_t __n)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t __s1 = a1;
  __int16 v10 = a2;
  char v11 = BYTE2(a2);
  char v12 = BYTE3(a2);
  char v13 = BYTE4(a2);
  char v14 = BYTE5(a2);
  if (one-time initialization token for aceHeaderMagic != -1) {
    swift_once();
  }
  if (!memcmp(&__s1, (const void *)(static AceSerialization.aceHeaderMagic + 32), __n))
  {
    int v7 = *((unsigned __int8 *)&__s1 + __n);
    if (v7 == 2) {
      unsigned int v8 = 1;
    }
    else {
      unsigned int v8 = 2;
    }
    if (v7 == 1) {
      return 0;
    }
    else {
      return v8;
    }
  }
  else
  {
    lazy protocol witness table accessor for type AceSerializationError and conformance AceSerializationError();
    swift_allocError();
    *(void *)uint64_t v5 = 0;
    *(void *)(v5 + 8) = 0;
    *(unsigned char *)(v5 + 16) = 3;
    return swift_willThrow();
  }
}

uint64_t _OSSwapInt32(unsigned int a1)
{
  return bswap32(a1);
}

uint64_t outlined destroy of SessionObject?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionObject?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of SessionObject?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionObject?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t type metadata accessor for AceObject()
{
  unint64_t result = lazy cache variable for type metadata for AceObject;
  if (!lazy cache variable for type metadata for AceObject)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for AceObject);
  }
  return result;
}

uint64_t _OSSwapInt16(unsigned int a1)
{
  return __rev16(a1);
}

uint64_t outlined bridged method (pb) of @objc AceObject._serializedData()(void *a1)
{
  id v1 = objc_msgSend(a1, sel__serializedData);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t OUTLINED_FUNCTION_3_18()
{
  return outlined consume of Data._Representation(v1, v0);
}

uint64_t OUTLINED_FUNCTION_4_13()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_5_12@<X0>(uint64_t a1@<X1>, char a2@<W8>)
{
  *(unsigned char *)(a1 + 16) = a2;
  return swift_willThrow();
}

uint64_t dispatch thunk of BackgroundConnectionProtocol.delegate.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of BackgroundConnectionProtocol.delegate.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of BackgroundConnectionProtocol.delegate.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of BackgroundConnectionProtocol.connectionConfiguration.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of BackgroundConnectionProtocol.connectionAnalysisInfo.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of BackgroundConnectionProtocol.start()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of BackgroundConnectionProtocol.setSendPings(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of BackgroundConnectionProtocol.sendData(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 72))();
}

uint64_t dispatch thunk of BackgroundConnectionProtocol.sendCommand(_:moreComing:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 80))();
}

uint64_t dispatch thunk of BackgroundConnectionProtocol.sendCommands(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 88))();
}

uint64_t dispatch thunk of BackgroundConnectionProtocol.cancel()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 96))();
}

uint64_t dispatch thunk of BackgroundConnectionProtocol.updateActiveBackgroundConnectionWithSecondary()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 104))();
}

uint64_t dispatch thunk of BackgroundConnectionProtocol.probeConnection()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 112))();
}

uint64_t dispatch thunk of BackgroundConnectionProtocol.barrier(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 120))();
}

uint64_t dispatch thunk of BackgroundConnectionDelegate.willStartConnection(_:type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of BackgroundConnectionDelegate.willStartConnection(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t dispatch thunk of BackgroundConnectionDelegate.didOpenConnectionType(_:type:routeId:delay:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 24))();
}

uint64_t dispatch thunk of BackgroundConnectionDelegate.didReceiveObject(_:object:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 32))();
}

uint64_t dispatch thunk of BackgroundConnectionDelegate.didReceiveAceObject(_:object:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 40))();
}

uint64_t dispatch thunk of BackgroundConnectionDelegate.didClose(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

uint64_t dispatch thunk of BackgroundConnectionDelegate.didEncounterError(_:error:analysisInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 56))();
}

uint64_t dispatch thunk of BackgroundConnectionDelegate.didEncounterIntermediateError(_:error:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 64))();
}

void *BackgroundConnectionProtocol.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a3 + 40))(__src, a2, a3);
  memcpy(v5, __src, sizeof(v5));
  ConnectionConfiguration.hash(into:)(a1);
  return outlined release of ConnectionConfiguration(__src);
}

uint64_t static BackgroundConnectionProtocol.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v6)(void *__return_ptr, uint64_t, uint64_t);
  unsigned char v8[520];
  unsigned char __dst[520];
  void __src[65];
  void v11[65];

  uint64_t v4 = a4;
  uint64_t v6 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(a4 + 40);
  v6(__src, a3, a4);
  memcpy(__dst, __src, 0x204uLL);
  v6(v11, a3, v4);
  memcpy(v8, v11, 0x204uLL);
  LOBYTE(v4) = static ConnectionConfiguration.== infix(_:_:)((uint64_t)__dst, (uint64_t)v8);
  outlined release of ConnectionConfiguration(v11);
  outlined release of ConnectionConfiguration(__src);
  return v4 & 1;
}

uint64_t specialized NetworkActivity.token.getter@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  if (*(void *)(v1 + 16)
    && (swift_retain(), char v3 = NWActivity.isActivated.getter(), swift_release(), (v3 & 1) != 0)
    && *(void *)(v1 + 16))
  {
    swift_retain();
    NWActivity.token.getter();
    swift_release();
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = 1;
  }
  uint64_t v5 = type metadata accessor for UUID();
  return __swift_storeEnumTagSinglePayload(a1, v4, 1, v5);
}

uint64_t specialized NetworkActivity.init(label:parentActivity:)(char a1, uint64_t a2)
{
  uint64_t v3 = v2;
  *(void *)(v2 + 16) = 0;
  uint64_t v6 = (uint64_t *)(v2 + 16);
  if ((MEMORY[0x263F8EE78] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
    unint64_t v7 = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x263F8EE78]);
  }
  else {
    unint64_t v7 = MEMORY[0x263F8EE88];
  }
  *(void *)(v2 + 24) = v7;
  *(_WORD *)(v2 + 32) = 11;
  *(unsigned char *)(v2 + 34) = 0;
  if (a1)
  {
    uint64_t v8 = type metadata accessor for NWActivity();
    swift_allocObject();
    uint64_t v9 = NWActivity.init(domain:label:)();
    swift_beginAccess();
    swift_release();
    *uint64_t v6 = v9;
    if (a2)
    {
      *((void *)&v13 + 1) = v8;
      char v14 = &protocol witness table for NWActivity;
      *(void *)&long long v12 = a2;
    }
    else
    {
      char v14 = 0;
      long long v12 = 0u;
      long long v13 = 0u;
    }
    swift_retain();
    NWActivity.parent.setter((uint64_t)&v12);
    swift_endAccess();
    if (a2)
    {
      Swift::Int v10 = NWActivity.label.getter();
      swift_release();
      NetworkActivityLabel.init(rawValue:)(v10);
      *(unsigned char *)(v3 + 32) = v12;
    }
  }
  else
  {
    swift_release();
  }
  *(unsigned char *)(v3 + 35) = a1;
  return v3;
}

uint64_t NetworkActivityLabel.rawValue.getter()
{
  return *v0;
}

SiriNetwork::NetworkActivityLabel_optional __swiftcall NetworkActivityLabel.init(rawValue:)(Swift::Int rawValue)
{
  char v2 = 11;
  if ((unint64_t)rawValue < 0xB) {
    char v2 = rawValue;
  }
  char *v1 = v2;
  return (SiriNetwork::NetworkActivityLabel_optional)rawValue;
}

void specialized NetworkActivity.activate()()
{
  if (!*(unsigned char *)(v0 + 33))
  {
    specialized NetworkActivity.moveTo(_:)(1u);
    if (*(unsigned char *)(v0 + 33) == 1)
    {
      swift_beginAccess();
      if (*(void *)(v0 + 16))
      {
        swift_retain();
        NWActivity.activate()();
        swift_release();
      }
    }
  }
}

uint64_t specialized NetworkActivity.addConnection(_:)(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  uint64_t v4 = *(void *)(v1 + 16);
  if (v4)
  {
    unsigned int v5 = *(unsigned __int8 *)(v1 + 33);
    if (v5 > 1)
    {
      if (v5 != 2) {
        return result;
      }
      uint64_t v14 = type metadata accessor for NWActivity();
      v13[0] = v4;
      swift_retain_n();
    }
    else
    {
      swift_retain();
      specialized NetworkActivity.moveTo(_:)(2u);
      if (*(unsigned char *)(v1 + 33) != 2) {
        return swift_release();
      }
      uint64_t v14 = type metadata accessor for NWActivity();
      v13[0] = v4;
      swift_retain();
    }
    NWConnection.startActivity(_:)((uint64_t)v13);
    outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for Any?);
    swift_beginAccess();
    swift_retain();
    specialized Set._Variant.insert(_:)((uint64_t)&v12, a1, v6, v7, v8, v9, v10, v11, v12);
    swift_endAccess();
    swift_release();
    return swift_release();
  }
  return result;
}

void specialized NetworkActivity.removeConnection(_:)()
{
  if (*(unsigned char *)(v0 + 33) == 2)
  {
    swift_beginAccess();
    uint64_t v1 = *(void *)(v0 + 16);
    if (v1)
    {
      v2[3] = type metadata accessor for NWActivity();
      v2[0] = v1;
      swift_retain_n();
      NWConnection.endActivity(_:)((uint64_t)v2);
      outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v2, (uint64_t *)&demangling cache variable for type metadata for Any?);
      swift_beginAccess();
      specialized Set._Variant.remove(_:)();
      swift_endAccess();
      swift_release();
      swift_release();
    }
  }
}

void specialized NetworkActivity.stop(completionReason:error:)(uint64_t a1, void *a2)
{
  id v47 = a2;
  uint64_t v4 = type metadata accessor for NWActivity.CompletionReason();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (uint64_t *)((char *)&v40 - v9);
  specialized NetworkActivity.moveTo(_:)(3u);
  uint64_t v11 = (uint64_t *)(v2 + 24);
  swift_beginAccess();
  uint64_t v12 = swift_bridgeObjectRetain();
  char v13 = specialized Set.isEmpty.getter(v12);
  swift_bridgeObjectRelease();
  if ((v13 & 1) == 0)
  {
    swift_beginAccess();
    uint64_t v14 = *(void *)(v2 + 16);
    if (v14)
    {
      uint64_t v46 = v5;
      uint64_t v15 = *v11;
      BOOL v16 = (*v11 & 0xC000000000000001) == 0;
      uint64_t v43 = v4;
      uint64_t v42 = v2;
      __int16 v41 = v10;
      uint64_t v44 = a1;
      uint64_t v45 = v8;
      if (v16)
      {
        uint64_t v20 = -1 << *(unsigned char *)(v15 + 32);
        uint64_t v21 = *(void *)(v15 + 56);
        uint64_t v48 = v15 + 56;
        uint64_t v17 = ~v20;
        uint64_t v22 = -v20;
        if (v22 < 64) {
          uint64_t v23 = ~(-1 << v22);
        }
        else {
          uint64_t v23 = -1;
        }
        uint64_t v19 = v23 & v21;
        swift_retain();
        swift_bridgeObjectRetain();
        int64_t v18 = 0;
      }
      else
      {
        swift_retain();
        swift_bridgeObjectRetain();
        __CocoaSet.makeIterator()();
        type metadata accessor for NWConnection();
        _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_0(&lazy protocol witness table cache variable for type NWConnection and conformance NWConnection, MEMORY[0x263F14240]);
        Set.Iterator.init(_cocoa:)();
        uint64_t v15 = v52;
        uint64_t v48 = v53;
        uint64_t v17 = v54;
        int64_t v18 = v55;
        uint64_t v19 = v56;
      }
      uint64_t v40 = v17;
      int64_t v24 = (unint64_t)(v17 + 64) >> 6;
      if (v15 < 0) {
        goto LABEL_12;
      }
      while (1)
      {
        if (v19)
        {
          v19 &= v19 - 1;
        }
        else
        {
          int64_t v26 = v18 + 1;
          if (__OFADD__(v18, 1))
          {
            __break(1u);
            return;
          }
          if (v26 >= v24) {
            goto LABEL_31;
          }
          uint64_t v27 = *(void *)(v48 + 8 * v26);
          int64_t v28 = v18 + 1;
          if (!v27)
          {
            int64_t v28 = v18 + 2;
            if (v18 + 2 >= v24) {
              goto LABEL_31;
            }
            uint64_t v27 = *(void *)(v48 + 8 * v28);
            if (!v27)
            {
              int64_t v28 = v18 + 3;
              if (v18 + 3 >= v24) {
                goto LABEL_31;
              }
              uint64_t v27 = *(void *)(v48 + 8 * v28);
              if (!v27)
              {
                int64_t v28 = v18 + 4;
                if (v18 + 4 >= v24) {
                  goto LABEL_31;
                }
                uint64_t v27 = *(void *)(v48 + 8 * v28);
                if (!v27)
                {
                  int64_t v29 = v18 + 5;
                  while (v29 < v24)
                  {
                    uint64_t v27 = *(void *)(v48 + 8 * v29++);
                    if (v27)
                    {
                      int64_t v28 = v29 - 1;
                      goto LABEL_27;
                    }
                  }
LABEL_31:
                  uint64_t v4 = v43;
                  uint64_t v2 = v42;
                  uint64_t v10 = v41;
                  outlined consume of [String : UInt64].Iterator._Variant();
                  swift_release();
                  uint64_t v8 = v45;
                  uint64_t v5 = v46;
                  LOBYTE(a1) = v44;
                  break;
                }
              }
            }
          }
LABEL_27:
          uint64_t v19 = (v27 - 1) & v27;
          int64_t v18 = v28;
        }
        swift_retain();
        while (1)
        {
          uint64_t v50 = type metadata accessor for NWActivity();
          *(void *)&long long v49 = v14;
          swift_retain();
          NWConnection.endActivity(_:)((uint64_t)&v49);
          swift_release();
          outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)&v49, (uint64_t *)&demangling cache variable for type metadata for Any?);
          if ((v15 & 0x8000000000000000) == 0) {
            break;
          }
LABEL_12:
          id v25 = (void *)__CocoaSet.Iterator.next()();
          if (!v25) {
            goto LABEL_31;
          }
          id v51 = v25;
          type metadata accessor for NWConnection();
          swift_unknownObjectRetain();
          swift_dynamicCast();
          swift_unknownObjectRelease();
        }
      }
    }
  }
  if (v47)
  {
    *(void *)&long long v49 = v47;
    id v30 = v47;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    type metadata accessor for CTServiceDescriptor(0, (unint64_t *)&lazy cache variable for type metadata for NSError);
    if (swift_dynamicCast())
    {
      uint64_t v31 = v2;
      id v32 = v51;
      id v33 = objc_msgSend(v51, sel_code);
      id v34 = objc_msgSend(v32, sel_userInfo);
      uint64_t v35 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      specialized Dictionary.subscript.getter(v36, v37, v35, &v49);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v50)
      {
        if (swift_dynamicCast())
        {
          id v38 = v51;
          uint64_t v39 = (uint64_t)objc_msgSend(v51, sel_code);

          goto LABEL_41;
        }
      }
      else
      {
        outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)&v49, (uint64_t *)&demangling cache variable for type metadata for Any?);
      }
      uint64_t v39 = -1;
LABEL_41:
      *uint64_t v10 = v33;
      v10[1] = v39;
      (*(void (**)(void *, void, uint64_t))(v5 + 104))(v10, *MEMORY[0x263F140C8], v4);
      swift_beginAccess();
      if (*(void *)(v31 + 16))
      {
        swift_retain();
        NWActivity.complete(reason:)();
        swift_release();

        (*(void (**)(void *, uint64_t))(v5 + 8))(v10, v4);
      }
      else
      {
        (*(void (**)(void *, uint64_t))(v5 + 8))(v10, v4);
      }
      return;
    }
  }
  swift_beginAccess();
  if (*(void *)(v2 + 16))
  {
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v8, **((unsigned int **)&unk_26550B878 + (char)a1), v4);
    swift_retain();
    NWActivity.complete(reason:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    swift_release();
  }
}

void specialized NetworkActivity.moveTo(_:)(unsigned __int8 a1)
{
  uint64_t v2 = v1;
  unsigned int v3 = a1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v36 - v9;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  uint64_t v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  BOOL v16 = (char *)&v36 - v15;
  uint64_t v17 = *(unsigned __int8 *)(v1 + 33);
  switch(*(unsigned char *)(v1 + 33))
  {
    case 1:
      if (v3 - 1 >= 2)
      {
        int64_t v18 = "NetworkActivity: Network Activity %s %s Abort";
        goto LABEL_13;
      }
      break;
    case 2:
      if (v3 >= 2)
      {
        if (v3 == 2)
        {
          int64_t v18 = "NetworkActivity: Network Activity %s %s Restart";
LABEL_13:
          specialized NetworkActivity.abort()(v18);
          LOBYTE(v3) = 0;
        }
      }
      else
      {
        specialized NetworkActivity.abort()("NetworkActivity: Network Activity %s %s Abort");
      }
      break;
    case 3:
      if (v3 < 2) {
        LOBYTE(v3) = 0;
      }
      break;
    default:
      if (v3 >= 2) {
        LOBYTE(v3) = 0;
      }
      break;
  }
  *(unsigned char *)(v1 + 33) = v3;
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Logger.siriNetwork);
  swift_retain_n();
  uint64_t v20 = Logger.logObject.getter();
  int v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, (os_log_type_t)v21))
  {
    int v40 = v21;
    uint64_t v38 = v5;
    uint64_t v22 = swift_slowAlloc();
    uint64_t v39 = swift_slowAlloc();
    uint64_t v43 = v39;
    *(_DWORD *)uint64_t v22 = 136315906;
    uint64_t v23 = *(unsigned __int8 *)(v2 + 35);
    unint64_t v24 = 0xE700000000000000;
    unint64_t v25 = 0x64696C61766E69;
    uint64_t v37 = v8;
    uint64_t v41 = v17;
    switch(v23)
    {
      case 1:
        unint64_t v24 = 0xE900000000000074;
        unint64_t v25 = 0x7365757165526975;
        break;
      case 2:
        unint64_t v24 = 0xED0000746E617473;
        unint64_t v25 = 0x6973734164616F6CLL;
        break;
      case 3:
        unint64_t v24 = 0xEE00676E696D6165;
        unint64_t v25 = 0x7274536F69647561;
        break;
      case 4:
        unint64_t v24 = 0xE600000000000000;
        unint64_t v25 = 0x686365657073;
        break;
      case 5:
        unint64_t v25 = 0x73746C75736572;
        break;
      case 6:
        unint64_t v24 = 0xE500000000000000;
        unint64_t v25 = 0x7972746572;
        break;
      case 7:
        unint64_t v24 = 0x800000025D796220;
        unint64_t v25 = 0xD000000000000016;
        break;
      case 8:
        unsigned int v26 = 2003790950;
        goto LABEL_28;
      case 9:
        unsigned int v26 = 1668184435;
LABEL_28:
        unint64_t v25 = v26 | 0x6D6D6F4300000000;
        unint64_t v24 = 0xEB00000000646E61;
        break;
      case 10:
        unint64_t v24 = 0xE400000000000000;
        unint64_t v25 = 1953718636;
        break;
      default:
        break;
    }
    uint64_t v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v24, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 12) = 2080;
    specialized NetworkActivity.token.getter((uint64_t)v16);
    outlined init with copy of UUID?((uint64_t)v16, (uint64_t)v14);
    if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, v4) == 1)
    {
      uint64_t v27 = 0;
      unint64_t v28 = 0xE000000000000000;
    }
    else
    {
      uint64_t v29 = v38;
      (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v10, v14, v4);
      (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v37, v10, v4);
      uint64_t v27 = String.init<A>(describing:)();
      unint64_t v28 = v30;
      (*(void (**)(char *, uint64_t))(v29 + 8))(v10, v4);
    }
    outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v16, &demangling cache variable for type metadata for UUID?);
    uint64_t v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 22) = 2080;
    LOBYTE(v42) = v41;
    uint64_t v31 = String.init<A>(describing:)();
    uint64_t v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 32) = 2080;
    LOBYTE(v42) = *(unsigned char *)(v2 + 33);
    uint64_t v33 = String.init<A>(describing:)();
    uint64_t v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_25D6CC000, v20, (os_log_type_t)v40, "NetworkActivity: Network Activity %s %s moved from %s to %s", (uint8_t *)v22, 0x2Au);
    uint64_t v35 = v39;
    swift_arrayDestroy();
    MEMORY[0x2611B3750](v35, -1, -1);
    MEMORY[0x2611B3750](v22, -1, -1);
  }
  else
  {

    swift_release_n();
  }
}

void specialized NetworkActivity.abort()(const char *a1)
{
  uint64_t v3 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_0_0();
  uint64_t v6 = v5;
  uint64_t v8 = MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v32 - v11;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v14 = MEMORY[0x270FA5388](v13 - 8);
  BOOL v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  int64_t v18 = (char *)&v32 - v17;
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Logger.siriNetwork);
  swift_retain_n();
  uint64_t v20 = Logger.logObject.getter();
  int v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, (os_log_type_t)v21))
  {
    int v36 = v21;
    uint64_t v34 = v6;
    uint64_t v22 = swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    uint64_t v39 = v35;
    *(_DWORD *)uint64_t v22 = 136315394;
    uint64_t v23 = *(unsigned __int8 *)(v3 + 35);
    unint64_t v24 = 0xE700000000000000;
    unint64_t v25 = 0x64696C61766E69;
    uint64_t v33 = v10;
    uint64_t v37 = a1;
    switch(v23)
    {
      case 1:
        unint64_t v24 = 0xE900000000000074;
        unint64_t v25 = 0x7365757165526975;
        break;
      case 2:
        unint64_t v24 = 0xED0000746E617473;
        unint64_t v25 = 0x6973734164616F6CLL;
        break;
      case 3:
        unint64_t v24 = 0xEE00676E696D6165;
        unint64_t v25 = 0x7274536F69647561;
        break;
      case 4:
        unint64_t v24 = 0xE600000000000000;
        unint64_t v25 = 0x686365657073;
        break;
      case 5:
        unint64_t v25 = 0x73746C75736572;
        break;
      case 6:
        unint64_t v24 = 0xE500000000000000;
        unint64_t v25 = 0x7972746572;
        break;
      case 7:
        unint64_t v24 = 0x800000025D796220;
        unint64_t v25 = 0xD000000000000016;
        break;
      case 8:
        unsigned int v26 = 2003790950;
        goto LABEL_15;
      case 9:
        unsigned int v26 = 1668184435;
LABEL_15:
        unint64_t v25 = v26 | 0x6D6D6F4300000000;
        unint64_t v24 = 0xEB00000000646E61;
        break;
      case 10:
        unint64_t v24 = 0xE400000000000000;
        unint64_t v25 = 1953718636;
        break;
      default:
        break;
    }
    uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v24, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 12) = 2080;
    specialized NetworkActivity.token.getter((uint64_t)v18);
    outlined init with copy of UUID?((uint64_t)v18, (uint64_t)v16);
    if (__swift_getEnumTagSinglePayload((uint64_t)v16, 1, v4) == 1)
    {
      uint64_t v27 = 0;
      unint64_t v28 = 0xE000000000000000;
    }
    else
    {
      uint64_t v29 = v34;
      (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v12, v16, v4);
      (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v33, v12, v4);
      uint64_t v27 = String.init<A>(describing:)();
      unint64_t v28 = v30;
      (*(void (**)(char *, uint64_t))(v29 + 8))(v12, v4);
    }
    outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v18, &demangling cache variable for type metadata for UUID?);
    uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_25D6CC000, v20, (os_log_type_t)v36, v37, (uint8_t *)v22, 0x16u);
    uint64_t v31 = v35;
    swift_arrayDestroy();
    MEMORY[0x2611B3750](v31, -1, -1);
    MEMORY[0x2611B3750](v22, -1, -1);
  }
  else
  {

    swift_release_n();
  }
}

uint64_t NetworkActivityParentLabel.rawValue.getter()
{
  return 1;
}

uint64_t NetworkActivityLabel.description.getter()
{
  uint64_t result = 0x64696C61766E69;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x7365757165526975;
      break;
    case 2:
      uint64_t result = 0x6973734164616F6CLL;
      break;
    case 3:
      uint64_t result = 0x7274536F69647561;
      break;
    case 4:
      uint64_t result = 0x686365657073;
      break;
    case 5:
      uint64_t result = 0x73746C75736572;
      break;
    case 6:
      uint64_t result = 0x7972746572;
      break;
    case 7:
      uint64_t result = 0xD000000000000016;
      break;
    case 8:
      unsigned int v2 = 2003790950;
      goto LABEL_12;
    case 9:
      unsigned int v2 = 1668184435;
LABEL_12:
      uint64_t result = v2 | 0x6D6D6F4300000000;
      break;
    case 0xA:
      uint64_t result = 1953718636;
      break;
    default:
      return result;
  }
  return result;
}

void protocol witness for Hashable.hash(into:) in conformance NetworkActivityLabel(uint64_t a1)
{
  specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

SiriNetwork::NetworkActivityLabel_optional protocol witness for RawRepresentable.init(rawValue:) in conformance NetworkActivityLabel(Swift::Int *a1)
{
  return NetworkActivityLabel.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance NetworkActivityLabel@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = NetworkActivityLabel.rawValue.getter();
  *a1 = result;
  return result;
}

unint64_t NetworkActivityCompletionReason.description.getter()
{
  unint64_t result = 0xD00000000000001ALL;
  switch(*v0)
  {
    case 2:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 3:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 4:
      unint64_t result = 0xD000000000000019;
      break;
    case 5:
      unint64_t result = 0xD00000000000001CLL;
      break;
    default:
      return result;
  }
  return result;
}

SiriNetwork::NetworkActivityCompletionReason_optional __swiftcall NetworkActivityCompletionReason.init(rawValue:)(Swift::Int rawValue)
{
  char v2 = 6;
  if ((unint64_t)rawValue < 6) {
    char v2 = rawValue;
  }
  char *v1 = v2;
  return (SiriNetwork::NetworkActivityCompletionReason_optional)rawValue;
}

SiriNetwork::NetworkActivityCompletionReason_optional protocol witness for RawRepresentable.init(rawValue:) in conformance NetworkActivityCompletionReason(Swift::Int *a1)
{
  return NetworkActivityCompletionReason.init(rawValue:)(*a1);
}

uint64_t NetworkActivityParentLabel.init(rawValue:)@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = result != 1;
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance NetworkActivityParentLabel@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  return NetworkActivityParentLabel.init(rawValue:)(*a1, a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance NetworkActivityParentLabel(void *a1@<X8>)
{
  *a1 = 1;
}

id static NetworkActivityTracing.shared.getter()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static NetworkActivityTracing.shared;

  return v0;
}

id NetworkActivityTracing.init()()
{
  uint64_t v1 = OBJC_IVAR___SNNetworkActivityTracingInternal_networkActivityTracing;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NetworkActivityTracingInternal<NWConnection, NWActivity>);
  swift_allocObject();
  char v2 = v0;
  *(void *)&v0[v1] = specialized NetworkActivityTracingInternal.init()();

  v4.receiver = v2;
  v4.super_class = (Class)type metadata accessor for NetworkActivityTracing();
  return objc_msgSendSuper2(&v4, sel_init);
}

uint64_t NetworkActivityTracing.start(label:activate:completion:)(uint64_t a1)
{
  uint64_t v1 = (char *)OUTLINED_FUNCTION_1_24(a1);
  return NetworkActivityTracing.start(label:activate:completion:)(v1, v2, v3, v4);
}

uint64_t NetworkActivityTracing.start(label:activate:completion:)(char *a1, int a2, uint64_t a3, uint64_t a4)
{
  char v7 = *a1;
  swift_retain();
  specialized NetworkActivityTracingInternal.start(label:activate:completion:)(v7, a2, a3, a4);

  return swift_release();
}

uint64_t NetworkActivityTracing.activate(label:completion:)(uint64_t a1)
{
  uint64_t v1 = (unsigned __int8 *)OUTLINED_FUNCTION_1_24(a1);
  return NetworkActivityTracing.activate(label:completion:)(v1, v2, v3);
}

uint64_t NetworkActivityTracing.activate(label:completion:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = *a1;
  swift_retain();
  specialized NetworkActivityTracingInternal.activate(label:completion:)(v5, a2, a3);

  return swift_release();
}

uint64_t NetworkActivityTracing.stop(label:reason:error:completion:)(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  if ((unint64_t)(a1 - 1) < 0xA) {
    char v5 = a1;
  }
  else {
    char v5 = 0;
  }
  char v9 = v5;
  if (a2 >= 6) {
    unsigned __int8 v6 = 1;
  }
  else {
    unsigned __int8 v6 = a2;
  }
  unsigned __int8 v8 = v6;
  return NetworkActivityTracing.stop(label:reason:error:completion:)(&v9, &v8, a3, a4, a5);
}

uint64_t NetworkActivityTracing.stop(label:reason:error:completion:)(char *a1, unsigned __int8 *a2, void *a3, uint64_t a4, uint64_t a5)
{
  int v8 = *a2;
  char v9 = *a1;
  swift_retain();
  specialized NetworkActivityTracingInternal.stop(label:reason:error:completion:)(v9, v8, a3, a4, a5);

  return swift_release();
}

uint64_t NetworkActivityTracing.tracingCancel(completion:)(uint64_t a1, uint64_t a2)
{
  return NetworkActivityTracing.tracingCancel(completion:)(a1, a2, (void (*)(uint64_t, uint64_t))specialized NetworkActivityTracingInternal.tracingCancel(completion:));
}

uint64_t NetworkActivityTracing.addNWConnection(_:completion:)(uint64_t a1, uint64_t (*a2)(void), uint64_t a3)
{
  return NetworkActivityTracing.addNWConnection(_:completion:)(a1, a2, a3, "NetworkActivity Tracing: Add connection %llu to activities", (uint64_t)&unk_270A6B0F8, (uint64_t)partial apply for specialized closure #1 in NetworkActivityTracingInternal.addConnection(_:completion:), (uint64_t)&block_descriptor_29);
}

uint64_t NetworkActivityTracing.removeNWConnection(_:completion:)(uint64_t a1, uint64_t (*a2)(void), uint64_t a3)
{
  return NetworkActivityTracing.addNWConnection(_:completion:)(a1, a2, a3, "NetworkActivity Tracing: Remove connection %llu from activities", (uint64_t)&unk_270A6B0A8, (uint64_t)partial apply for specialized closure #1 in NetworkActivityTracingInternal.removeConnection(_:completion:), (uint64_t)&block_descriptor_12);
}

uint64_t NetworkActivityTracing.addNWConnection(_:completion:)(uint64_t result, uint64_t (*a2)(void), uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (result)
  {
    uint64_t v13 = result;
    swift_retain();
    swift_retain();
    specialized NetworkActivityTracingInternal.addConnection(_:completion:)(v13, (uint64_t)a2, a3, a4, a5, a6, a7);
    swift_release();
    return swift_release();
  }
  else if (a2)
  {
    return a2();
  }
  return result;
}

uint64_t NetworkActivityTracing.currentNetworkActivityToken(_:)(uint64_t a1, uint64_t a2)
{
  return NetworkActivityTracing.tracingCancel(completion:)(a1, a2, (void (*)(uint64_t, uint64_t))specialized NetworkActivityTracingInternal.currentNetworkActivityToken(_:));
}

uint64_t NetworkActivityTracing.tracingCancel(completion:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  swift_retain();
  a3(a1, a2);

  return swift_release();
}

void thunk for @escaping @callee_unowned @convention(block) (@unowned NSUUID?) -> ()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v4 - 8);
  unsigned __int8 v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of UUID?(a1, (uint64_t)v6);
  uint64_t v7 = type metadata accessor for UUID();
  Class isa = 0;
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7) != 1)
  {
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  (*(void (**)(uint64_t, Class))(a2 + 16))(a2, isa);
}

id NetworkActivityTracing.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for NetworkActivityTracing();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void *specialized NetworkActivityTracingInternal.init()()
{
  uint64_t v1 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x270FA5388](v5);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  MEMORY[0x270FA5388](v6 - 8);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NetworkActivity<NWConnection, NWActivity>);
  lazy protocol witness table accessor for type NetworkActivityLabel and conformance NetworkActivityLabel();
  uint64_t v7 = MEMORY[0x263F8EE78];
  v0[2] = Dictionary.init(dictionaryLiteral:)();
  v10[0] = v1;
  if ((v7 & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
    unint64_t v8 = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x263F8EE78]);
  }
  else {
    unint64_t v8 = MEMORY[0x263F8EE88];
  }
  v0[3] = v8;
  type metadata accessor for CTServiceDescriptor(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  static DispatchQoS.default.getter();
  v10[1] = v7;
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, MEMORY[0x263F8F0F8]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], &demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, void))(v2 + 104))(v4, *MEMORY[0x263F8F130], v10[0]);
  v0[4] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  return v0;
}

uint64_t specialized NetworkActivityTracingInternal.start(label:activate:completion:)(char a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  int v22 = a2;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v24 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = &v21[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v23 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  uint64_t v14 = &v21[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = *(void **)(v5 + 32);
  uint64_t v16 = swift_allocObject();
  swift_weakInit();
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v16;
  *(unsigned char *)(v17 + 24) = a1;
  *(void *)(v17 + 32) = a3;
  *(void *)(v17 + 40) = a4;
  *(unsigned char *)(v17 + 48) = v22;
  aBlock[4] = partial apply for specialized closure #1 in NetworkActivityTracingInternal.start(label:activate:completion:);
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_82;
  int64_t v18 = _Block_copy(aBlock);
  id v19 = v15;
  swift_retain();
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed LinkRecommendationInfo?) -> ())?(a3);
  static DispatchQoS.unspecified.getter();
  uint64_t v25 = MEMORY[0x263F8EE78];
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2611B24E0](0, v14, v11, v18);
  _Block_release(v18);

  (*(void (**)(unsigned char *, uint64_t))(v24 + 8))(v11, v9);
  (*(void (**)(unsigned char *, uint64_t))(v12 + 8))(v14, v23);
  swift_release();
  return swift_release();
}

uint64_t specialized closure #1 in NetworkActivityTracingInternal.start(label:activate:completion:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, char a5)
{
  LOBYTE(v5) = a5;
  LOBYTE(v7) = a2;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v9 = result;
    unint64_t v10 = result + 16;
    swift_beginAccess();
    if (specialized Dictionary.subscript.getter(v7, *(void *)(v9 + 16)))
    {
      if (a3) {
        ((void (*)(void))a3)();
      }
      swift_release();
      return swift_release();
    }
    if (one-time initialization token for siriNetwork == -1) {
      goto LABEL_7;
    }
LABEL_67:
    swift_once();
LABEL_7:
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.siriNetwork);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = swift_slowAlloc();
      uint64_t v40 = swift_slowAlloc();
      v43[0] = v40;
      *(_DWORD *)uint64_t v14 = 136315394;
      unint64_t v15 = 0xE700000000000000;
      unint64_t v16 = 0x64696C61766E69;
      switch((char)v7)
      {
        case 1:
          unint64_t v15 = 0xE900000000000074;
          unint64_t v16 = 0x7365757165526975;
          break;
        case 2:
          unint64_t v15 = 0xED0000746E617473;
          unint64_t v16 = 0x6973734164616F6CLL;
          break;
        case 3:
          unint64_t v15 = 0xEE00676E696D6165;
          unint64_t v16 = 0x7274536F69647561;
          break;
        case 4:
          unint64_t v15 = 0xE600000000000000;
          unint64_t v16 = 0x686365657073;
          break;
        case 5:
          unint64_t v16 = 0x73746C75736572;
          break;
        case 6:
          unint64_t v15 = 0xE500000000000000;
          unint64_t v16 = 0x7972746572;
          break;
        case 7:
          unint64_t v15 = 0x800000025D796220;
          unint64_t v16 = 0xD000000000000016;
          break;
        case 8:
          unsigned int v17 = 2003790950;
          goto LABEL_19;
        case 9:
          unsigned int v17 = 1668184435;
LABEL_19:
          unint64_t v16 = v17 | 0x6D6D6F4300000000;
          unint64_t v15 = 0xEB00000000646E61;
          break;
        case 10:
          unint64_t v15 = 0xE400000000000000;
          unint64_t v16 = 1953718636;
          break;
        default:
          break;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v15, v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v14 + 12) = 1024;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_25D6CC000, v12, v13, "NetworkActivity Tracing: Start %s activity. Activate: %{BOOL}d", (uint8_t *)v14, 0x12u);
      swift_arrayDestroy();
      MEMORY[0x2611B3750](v40, -1, -1);
      MEMORY[0x2611B3750](v14, -1, -1);
    }
    else
    {
    }
    if (v7 == 1)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NetworkActivity<NWConnection, NWActivity>);
      swift_allocObject();
      char v18 = 1;
      uint64_t v19 = 0;
    }
    else
    {
      uint64_t v20 = specialized Dictionary.subscript.getter(1u, *(void *)v10);
      if (!v20 || (uint64_t v21 = v20, swift_beginAccess(), v22 = *(void *)(v21 + 16), swift_retain(), swift_release(), !v22))
      {
        if (a3)
        {
LABEL_63:
          ((void (*)(void))a3)();
          swift_release();
          return swift_release();
        }
LABEL_33:
        swift_release();
        return swift_release();
      }
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NetworkActivity<NWConnection, NWActivity>);
      swift_allocObject();
      char v18 = v7;
      uint64_t v19 = v22;
    }
    uint64_t v23 = specialized NetworkActivity.init(label:parentActivity:)(v18, v19);
    swift_beginAccess();
    uint64_t v24 = swift_retain_n();
    specialized Dictionary._Variant.setValue(_:forKey:)(v24, v7);
    swift_endAccess();
    if (v5) {
      specialized NetworkActivity.activate()();
    }
    uint64_t v25 = (uint64_t *)(v9 + 24);
    swift_beginAccess();
    uint64_t v26 = swift_bridgeObjectRetain();
    char v27 = specialized Set.isEmpty.getter(v26);
    swift_bridgeObjectRelease();
    if ((v27 & 1) == 0)
    {
      uint64_t v5 = *v25;
      uint64_t v39 = (void (*)(void))a3;
      if ((*v25 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        __CocoaSet.makeIterator()();
        type metadata accessor for NWConnection();
        _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_0(&lazy protocol witness table cache variable for type NWConnection and conformance NWConnection, MEMORY[0x263F14240]);
        Set.Iterator.init(_cocoa:)();
        uint64_t v5 = v43[0];
        uint64_t v41 = v43[1];
        uint64_t v28 = v43[2];
        uint64_t v29 = v43[3];
        unint64_t v10 = v43[4];
      }
      else
      {
        uint64_t v30 = -1 << *(unsigned char *)(v5 + 32);
        uint64_t v41 = v5 + 56;
        uint64_t v28 = ~v30;
        uint64_t v31 = -v30;
        if (v31 < 64) {
          uint64_t v32 = ~(-1 << v31);
        }
        else {
          uint64_t v32 = -1;
        }
        unint64_t v10 = v32 & *(void *)(v5 + 56);
        swift_bridgeObjectRetain();
        uint64_t v29 = 0;
      }
      int64_t v7 = (unint64_t)(v28 + 64) >> 6;
      while ((v5 & 0x8000000000000000) == 0)
      {
        if (v10)
        {
          uint64_t v34 = (v10 - 1) & v10;
          unint64_t v35 = __clz(__rbit64(v10)) | (v29 << 6);
          a3 = v29;
        }
        else
        {
          int64_t v36 = v29 + 1;
          if (__OFADD__(v29, 1))
          {
            __break(1u);
            goto LABEL_67;
          }
          if (v36 >= v7) {
            goto LABEL_61;
          }
          unint64_t v37 = *(void *)(v41 + 8 * v36);
          a3 = v29 + 1;
          if (!v37)
          {
            a3 = v29 + 2;
            if (v29 + 2 >= v7) {
              goto LABEL_61;
            }
            unint64_t v37 = *(void *)(v41 + 8 * a3);
            if (!v37)
            {
              a3 = v29 + 3;
              if (v29 + 3 >= v7) {
                goto LABEL_61;
              }
              unint64_t v37 = *(void *)(v41 + 8 * a3);
              if (!v37)
              {
                a3 = v29 + 4;
                if (v29 + 4 >= v7) {
                  goto LABEL_61;
                }
                unint64_t v37 = *(void *)(v41 + 8 * a3);
                if (!v37)
                {
                  int64_t v38 = v29 + 5;
                  while (v38 < v7)
                  {
                    unint64_t v37 = *(void *)(v41 + 8 * v38++);
                    if (v37)
                    {
                      a3 = v38 - 1;
                      goto LABEL_58;
                    }
                  }
                  goto LABEL_61;
                }
              }
            }
          }
LABEL_58:
          uint64_t v34 = (v37 - 1) & v37;
          unint64_t v35 = __clz(__rbit64(v37)) + (a3 << 6);
        }
        uint64_t v33 = *(void *)(*(void *)(v5 + 48) + 8 * v35);
        swift_retain();
LABEL_60:
        if (!v33) {
          goto LABEL_61;
        }
        specialized NetworkActivity.addConnection(_:)(v33);
        swift_release();
        uint64_t v29 = a3;
        unint64_t v10 = v34;
      }
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for NWConnection();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        uint64_t v33 = v42;
        swift_unknownObjectRelease();
        a3 = v29;
        uint64_t v34 = v10;
        goto LABEL_60;
      }
LABEL_61:
      outlined consume of [String : UInt64].Iterator._Variant();
      a3 = (uint64_t)v39;
    }
    *(unsigned char *)(v23 + 34) = 1;
    swift_release();
    if (a3) {
      goto LABEL_63;
    }
    goto LABEL_33;
  }
  return result;
}

uint64_t specialized NetworkActivityTracingInternal.activate(label:completion:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v33 = a2;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  unint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v34 = *(void *)(v11 - 8);
  uint64_t v35 = v11;
  MEMORY[0x270FA5388](v11);
  os_log_type_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.siriNetwork);
  unint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v32 = v8;
    unsigned int v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    aBlock[0] = v18;
    *(_DWORD *)unsigned int v17 = 136315138;
    unint64_t v19 = a1;
    a1 = 0xE700000000000000;
    unint64_t v20 = 0x64696C61766E69;
    unint64_t v30 = v19;
    uint64_t v31 = a3;
    switch((char)v19)
    {
      case 1:
        a1 = 0xE900000000000074;
        unint64_t v20 = 0x7365757165526975;
        break;
      case 2:
        a1 = 0xED0000746E617473;
        unint64_t v20 = 0x6973734164616F6CLL;
        break;
      case 3:
        a1 = 0xEE00676E696D6165;
        unint64_t v20 = 0x7274536F69647561;
        break;
      case 4:
        a1 = 0xE600000000000000;
        unint64_t v20 = 0x686365657073;
        break;
      case 5:
        unint64_t v20 = 0x73746C75736572;
        break;
      case 6:
        a1 = 0xE500000000000000;
        unint64_t v20 = 0x7972746572;
        break;
      case 7:
        a1 = 0x800000025D796220;
        unint64_t v20 = 0xD000000000000016;
        break;
      case 8:
        unsigned int v21 = 2003790950;
        goto LABEL_15;
      case 9:
        unsigned int v21 = 1668184435;
LABEL_15:
        unint64_t v20 = v21 | 0x6D6D6F4300000000;
        a1 = 0xEB00000000646E61;
        break;
      case 10:
        a1 = 0xE400000000000000;
        unint64_t v20 = 1953718636;
        break;
      default:
        break;
    }
    uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, a1, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_25D6CC000, v15, v16, "NetworkActivity Tracing: Activate %s activity", v17, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2611B3750](v18, -1, -1);
    MEMORY[0x2611B3750](v17, -1, -1);

    a3 = v31;
    uint64_t v8 = v32;
    LOBYTE(a1) = v30;
  }
  else
  {
  }
  uint64_t v22 = *(void **)(v4 + 32);
  uint64_t v23 = swift_allocObject();
  swift_weakInit();
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = v23;
  *(unsigned char *)(v24 + 24) = a1;
  uint64_t v25 = v33;
  *(void *)(v24 + 32) = v33;
  *(void *)(v24 + 40) = a3;
  aBlock[4] = (uint64_t)partial apply for specialized closure #1 in NetworkActivityTracingInternal.activate(label:completion:);
  aBlock[5] = v24;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_75;
  uint64_t v26 = _Block_copy(aBlock);
  id v27 = v22;
  swift_retain();
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed LinkRecommendationInfo?) -> ())?(v25);
  static DispatchQoS.unspecified.getter();
  uint64_t v36 = MEMORY[0x263F8EE78];
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2611B24E0](0, v13, v10, v26);
  _Block_release(v26);

  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v13, v35);
  swift_release();
  return swift_release();
}

uint64_t specialized closure #1 in NetworkActivityTracingInternal.activate(label:completion:)(uint64_t a1, unsigned __int8 a2, void (*a3)(unint64_t))
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v6 = result;
    unint64_t v7 = swift_beginAccess();
    if (*(void *)(*(void *)(v6 + 16) + 16))
    {
      unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
      if (v8)
      {
        swift_retain();
        specialized NetworkActivity.activate()();
        unint64_t v7 = swift_release();
      }
    }
    if (a3) {
      a3(v7);
    }
    return swift_release();
  }
  return result;
}

uint64_t specialized NetworkActivityTracingInternal.stop(label:reason:error:completion:)(char a1, int a2, void *a3, uint64_t a4, uint64_t a5)
{
  int v24 = a2;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v27 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = &v23[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = type metadata accessor for DispatchQoS();
  uint64_t v25 = *(void *)(v13 - 8);
  uint64_t v26 = v13;
  MEMORY[0x270FA5388](v13);
  unint64_t v15 = &v23[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  os_log_type_t v16 = *(void **)(v5 + 32);
  uint64_t v17 = swift_allocObject();
  swift_weakInit();
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v17;
  *(unsigned char *)(v18 + 24) = a1;
  *(unsigned char *)(v18 + 25) = v24;
  *(void *)(v18 + 32) = a3;
  *(void *)(v18 + 40) = a4;
  *(void *)(v18 + 48) = a5;
  aBlock[4] = partial apply for specialized closure #1 in NetworkActivityTracingInternal.stop(label:reason:error:completion:);
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_68;
  unint64_t v19 = _Block_copy(aBlock);
  id v20 = v16;
  swift_retain();
  id v21 = a3;
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed LinkRecommendationInfo?) -> ())?(a4);
  static DispatchQoS.unspecified.getter();
  uint64_t v28 = MEMORY[0x263F8EE78];
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2611B24E0](0, v15, v12, v19);
  _Block_release(v19);

  (*(void (**)(unsigned char *, uint64_t))(v27 + 8))(v12, v10);
  (*(void (**)(unsigned char *, uint64_t))(v25 + 8))(v15, v26);
  swift_release();
  return swift_release();
}

uint64_t specialized closure #1 in NetworkActivityTracingInternal.stop(label:reason:error:completion:)(uint64_t a1, int a2, uint64_t a3, void *a4, int64_t a5, uint64_t a6)
{
  uint64_t v101 = a6;
  LODWORD(v9) = a2;
  v125[6] = *MEMORY[0x263EF8340];
  uint64_t v115 = type metadata accessor for UUID();
  uint64_t v100 = *(void *)(v115 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v115);
  uint64_t v103 = (char *)v93 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  char v104 = (char *)v93 - v12;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v14 = MEMORY[0x270FA5388](v13 - 8);
  uint64_t v95 = (uint64_t)v93 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v96 = (uint64_t)v93 - v17;
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v114 = (uint64_t)v93 - v19;
  MEMORY[0x270FA5388](v18);
  uint64_t v119 = (uint64_t)v93 - v20;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  uint64_t v113 = result;
  if (result)
  {
    if (v9 == 1)
    {
      int64_t v94 = a5;
      uint64_t v22 = v113;
      swift_beginAccess();
      uint64_t v23 = *(void *)(v22 + 16);
      int v24 = (void *)(v23 + 64);
      uint64_t v25 = 1 << *(unsigned char *)(v23 + 32);
      uint64_t v26 = -1;
      if (v25 < 64) {
        uint64_t v26 = ~(-1 << v25);
      }
      unint64_t v27 = v26 & *(void *)(v23 + 64);
      int64_t v28 = (unint64_t)(v25 + 63) >> 6;
      uint64_t v99 = (void (**)(char *, uint64_t, uint64_t))(v100 + 32);
      CFDictionaryRef v98 = (void (**)(char *, char *, uint64_t))(v100 + 16);
      CFStringRef v97 = (void (**)(char *, uint64_t))(v100 + 8);
      os_log_type_t v102 = v125;
      swift_bridgeObjectRetain();
      a5 = 0;
      *(void *)&long long v29 = 136315906;
      long long v108 = v29;
      unint64_t v107 = (unint64_t)"SiriNetworkActivityUnknown";
      uint64_t v106 = a3;
      uint64_t v105 = MEMORY[0x263F8EE58] + 8;
      v93[5] = "SiriNetworkActivitySucceeded";
      v93[4] = "SiriNetworkActivityTimedOut";
      v93[3] = "SiriNetworkActivityFailed";
      void v93[2] = "SiriNetworkActivityCancelled";
      v93[1] = "remoteRequestExecution";
      uint64_t v111 = a3;
      id v112 = a4;
      int v110 = (int)v9;
      uint64_t v109 = v23;
      int64_t v117 = v28;
      int64_t v118 = (void *)(v23 + 64);
      while (1)
      {
        if (v27)
        {
          unint64_t v30 = __clz(__rbit64(v27));
          v27 &= v27 - 1;
          unint64_t v31 = v30 | (a5 << 6);
        }
        else
        {
          int64_t v32 = a5 + 1;
          if (__OFADD__(a5, 1))
          {
            __break(1u);
            goto LABEL_70;
          }
          if (v32 >= v28) {
            goto LABEL_43;
          }
          unint64_t v33 = v24[v32];
          ++a5;
          if (!v33)
          {
            a5 = v32 + 1;
            if (v32 + 1 >= v28) {
              goto LABEL_43;
            }
            unint64_t v33 = v24[a5];
            if (!v33)
            {
              a5 = v32 + 2;
              if (v32 + 2 >= v28) {
                goto LABEL_43;
              }
              unint64_t v33 = v24[a5];
              if (!v33)
              {
                int64_t v34 = v32 + 3;
                if (v34 >= v28)
                {
LABEL_43:
                  swift_release();
                  a5 = v94;
                  break;
                }
                unint64_t v33 = v24[v34];
                if (!v33)
                {
                  while (1)
                  {
                    a5 = v34 + 1;
                    if (__OFADD__(v34, 1)) {
                      break;
                    }
                    if (a5 >= v28) {
                      goto LABEL_43;
                    }
                    unint64_t v33 = v24[a5];
                    ++v34;
                    if (v33) {
                      goto LABEL_21;
                    }
                  }
LABEL_70:
                  __break(1u);
LABEL_71:
                  swift_once();
LABEL_47:
                  uint64_t v63 = type metadata accessor for Logger();
                  __swift_project_value_buffer(v63, (uint64_t)static Logger.siriNetwork);
                  swift_retain_n();
                  id v64 = a4;
                  swift_retain();
                  id v65 = a4;
                  swift_retain();
                  id v66 = a4;
                  uint64_t v67 = Logger.logObject.getter();
                  int v68 = static os_log_type_t.default.getter();
                  if (os_log_type_enabled(v67, (os_log_type_t)v68))
                  {
                    LODWORD(v119) = v68;
                    id v112 = v66;
                    int64_t v94 = a5;
                    uint64_t v69 = swift_slowAlloc();
                    int64_t v118 = (void *)swift_slowAlloc();
                    uint64_t v70 = swift_slowAlloc();
                    uint64_t v124 = v70;
                    *(_DWORD *)uint64_t v69 = 136315906;
                    LOBYTE(v120) = *(unsigned char *)(v23 + 35);
                    uint64_t v71 = String.init<A>(describing:)();
                    uint64_t v120 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v71, v72, &v124);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    swift_release_n();
                    swift_bridgeObjectRelease();
                    *(_WORD *)(v69 + 12) = 2080;
                    uint64_t v73 = v96;
                    specialized NetworkActivity.token.getter(v96);
                    uint64_t v74 = v73;
                    uint64_t v75 = v95;
                    outlined init with copy of UUID?(v74, v95);
                    uint64_t v76 = v115;
                    int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v75, 1, v115);
                    uint64_t v111 = a3;
                    if (EnumTagSinglePayload == 1)
                    {
                      uint64_t v78 = 0;
                      unint64_t v79 = 0xE000000000000000;
                    }
                    else
                    {
                      uint64_t v80 = v75;
                      uint64_t v81 = v100;
                      int64_t v82 = v67;
                      uint64_t v83 = v70;
                      uint64_t v84 = v104;
                      (*(void (**)(char *, uint64_t, uint64_t))(v100 + 32))(v104, v80, v76);
                      (*(void (**)(char *, char *, uint64_t))(v81 + 16))(v103, v84, v76);
                      uint64_t v78 = String.init<A>(describing:)();
                      unint64_t v79 = v85;
                      uint64_t v86 = v84;
                      uint64_t v70 = v83;
                      uint64_t v67 = v82;
                      (*(void (**)(char *, uint64_t))(v81 + 8))(v86, v76);
                    }
                    uint64_t v87 = 0xD00000000000001ALL;
                    outlined destroy of RPCOspreyConnectionProtocol?(v96, &demangling cache variable for type metadata for UUID?);
                    uint64_t v120 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v78, v79, &v124);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    swift_release_n();
                    swift_bridgeObjectRelease();
                    *(_WORD *)(v69 + 22) = 2080;
                    unint64_t v88 = 0x800000025D7962E0;
                    a3 = v111;
                    a5 = v94;
                    switch((char)v111)
                    {
                      case 1:
                        uint64_t v89 = "SiriNetworkActivityUnknown";
                        goto LABEL_58;
                      case 2:
                        uint64_t v87 = 0xD00000000000001CLL;
                        uint64_t v89 = "SiriNetworkActivitySucceeded";
                        goto LABEL_58;
                      case 3:
                        uint64_t v87 = 0xD00000000000001BLL;
                        uint64_t v89 = "SiriNetworkActivityTimedOut";
                        goto LABEL_58;
                      case 4:
                        uint64_t v87 = 0xD000000000000019;
                        uint64_t v89 = "SiriNetworkActivityFailed";
                        goto LABEL_58;
                      case 5:
                        uint64_t v87 = 0xD00000000000001CLL;
                        uint64_t v89 = "SiriNetworkActivityCancelled";
LABEL_58:
                        unint64_t v88 = (unint64_t)(v89 - 32) | 0x8000000000000000;
                        break;
                      default:
                        break;
                    }
                    uint64_t v120 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v87, v88, &v124);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    swift_bridgeObjectRelease();
                    *(_WORD *)(v69 + 32) = 2112;
                    id v66 = v112;
                    if (v112)
                    {
                      id v90 = v112;
                      uint64_t v91 = _swift_stdlib_bridgeErrorToNSError();
                      uint64_t v120 = v91;
                      UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    }
                    else
                    {
                      uint64_t v120 = 0;
                      UnsafeMutableRawBufferPointer.copyMemory(from:)();
                      uint64_t v91 = 0;
                    }
                    uint64_t v92 = v118;
                    *int64_t v118 = v91;

                    _os_log_impl(&dword_25D6CC000, v67, (os_log_type_t)v119, "NetworkActivity Tracing: Stopping network activity %s %s with reason %s and error: %@", (uint8_t *)v69, 0x2Au);
                    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
                    swift_arrayDestroy();
                    MEMORY[0x2611B3750](v92, -1, -1);
                    swift_arrayDestroy();
                    MEMORY[0x2611B3750](v70, -1, -1);
                    MEMORY[0x2611B3750](v69, -1, -1);
                  }
                  else
                  {
                    swift_release_n();
                  }
                  *(unsigned char *)(v23 + 34) = 0;
                  specialized NetworkActivity.stop(completionReason:error:)(a3, v66);
                  goto LABEL_64;
                }
                a5 = v34;
              }
            }
          }
LABEL_21:
          unint64_t v27 = (v33 - 1) & v33;
          unint64_t v31 = __clz(__rbit64(v33)) + (a5 << 6);
        }
        uint64_t v35 = *(unsigned char **)(*(void *)(v23 + 56) + 8 * v31);
        if (v35[32] == 1 && v35[34] == 1)
        {
          uint64_t v36 = one-time initialization token for siriNetwork;
          swift_retain();
          if (v36 != -1) {
            swift_once();
          }
          uint64_t v37 = type metadata accessor for Logger();
          __swift_project_value_buffer(v37, (uint64_t)static Logger.siriNetwork);
          swift_retain_n();
          id v38 = a4;
          swift_retain();
          id v39 = a4;
          uint64_t v40 = Logger.logObject.getter();
          os_log_type_t v41 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v40, v41))
          {
            uint64_t v42 = swift_slowAlloc();
            uint64_t v9 = (void *)swift_slowAlloc();
            uint64_t v116 = swift_slowAlloc();
            v125[0] = v116;
            *(_DWORD *)uint64_t v42 = v108;
            LOBYTE(v124) = v35[35];
            uint64_t v43 = String.init<A>(describing:)();
            *(void *)(v42 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, v125);
            swift_release_n();
            swift_bridgeObjectRelease();
            *(_WORD *)(v42 + 12) = 2080;
            uint64_t v45 = v119;
            specialized NetworkActivity.token.getter(v119);
            uint64_t v46 = v114;
            outlined init with copy of UUID?(v45, v114);
            uint64_t v47 = v115;
            if (__swift_getEnumTagSinglePayload(v46, 1, v115) == 1)
            {
              uint64_t v48 = 0;
              unint64_t v49 = 0xE000000000000000;
            }
            else
            {
              uint64_t v50 = v104;
              (*v99)(v104, v46, v47);
              (*v98)(v103, v50, v47);
              uint64_t v51 = String.init<A>(describing:)();
              uint64_t v52 = v47;
              uint64_t v48 = v51;
              unint64_t v49 = v53;
              (*v97)(v50, v52);
            }
            outlined destroy of RPCOspreyConnectionProtocol?(v119, &demangling cache variable for type metadata for UUID?);
            *(void *)(v42 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v49, v125);
            swift_release_n();
            swift_bridgeObjectRelease();
            *(_WORD *)(v42 + 22) = 2080;
            unint64_t v54 = v107 | 0x8000000000000000;
            uint64_t v55 = 0xD00000000000001ALL;
            id v56 = v112;
            switch(v106)
            {
              case 1:
                unint64_t v57 = &v124;
                goto LABEL_37;
              case 2:
                uint64_t v55 = 0xD00000000000001CLL;
                unint64_t v57 = (uint64_t *)&v123;
                goto LABEL_37;
              case 3:
                uint64_t v55 = 0xD00000000000001BLL;
                unint64_t v57 = (uint64_t *)&v122;
                goto LABEL_37;
              case 4:
                uint64_t v55 = 0xD000000000000019;
                unint64_t v57 = (uint64_t *)&v121;
                goto LABEL_37;
              case 5:
                uint64_t v55 = 0xD00000000000001CLL;
                unint64_t v57 = &v120;
LABEL_37:
                unint64_t v54 = *(v57 - 32) | 0x8000000000000000;
                break;
              default:
                break;
            }
            *(void *)(v42 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v54, v125);
            swift_bridgeObjectRelease();
            *(_WORD *)(v42 + 32) = 2112;
            if (v56)
            {
              id v58 = v56;
              uint64_t v59 = _swift_stdlib_bridgeErrorToNSError();
              uint64_t v124 = v59;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
            }
            else
            {
              uint64_t v59 = 0;
              *(void *)(v42 + 34) = 0;
            }
            *uint64_t v9 = v59;

            _os_log_impl(&dword_25D6CC000, v40, v41, "NetworkActivity Tracing: Stopping network sub-activity %s %s with reason %s and error: %@", (uint8_t *)v42, 0x2Au);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            swift_arrayDestroy();
            MEMORY[0x2611B3750](v9, -1, -1);
            uint64_t v60 = v116;
            swift_arrayDestroy();
            MEMORY[0x2611B3750](v60, -1, -1);
            MEMORY[0x2611B3750](v42, -1, -1);

            a4 = v56;
            a3 = v111;
            LOBYTE(v9) = v110;
            uint64_t v23 = v109;
          }
          else
          {
            swift_release_n();
          }
          v35[34] = 0;
          specialized NetworkActivity.stop(completionReason:error:)(a3, a4);
          swift_release();
          int64_t v28 = v117;
          int v24 = v118;
        }
      }
    }
    uint64_t v61 = v113;
    swift_beginAccess();
    uint64_t v62 = specialized Dictionary.subscript.getter(v9, *(void *)(v61 + 16));
    if (v62)
    {
      uint64_t v23 = v62;
      if (*(unsigned char *)(v62 + 34) == 1)
      {
        if (one-time initialization token for siriNetwork != -1) {
          goto LABEL_71;
        }
        goto LABEL_47;
      }
LABEL_64:
      uint64_t v62 = swift_release();
    }
    if (a5) {
      ((void (*)(uint64_t))a5)(v62);
    }
    return swift_release();
  }
  return result;
}

uint64_t specialized NetworkActivityTracingInternal.tracingCancel(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v24 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  char v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Logger.siriNetwork);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl(&dword_25D6CC000, v13, v14, "NetworkActivity Tracing: Remove all activities, and connections.", v15, 2u);
    MEMORY[0x2611B3750](v15, -1, -1);
  }

  uint64_t v16 = *(void **)(v3 + 32);
  uint64_t v17 = swift_allocObject();
  swift_weakInit();
  uint64_t v18 = (void *)swift_allocObject();
  void v18[2] = v17;
  uint64_t v18[3] = a1;
  v18[4] = a2;
  aBlock[4] = partial apply for specialized closure #1 in NetworkActivityTracingInternal.tracingCancel(completion:);
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_61_0;
  uint64_t v19 = _Block_copy(aBlock);
  id v20 = v16;
  swift_retain();
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed LinkRecommendationInfo?) -> ())?(a1);
  static DispatchQoS.unspecified.getter();
  uint64_t v25 = MEMORY[0x263F8EE78];
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2611B24E0](0, v11, v8, v19);
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v24 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v23);
  swift_release();
  return swift_release();
}

uint64_t specialized closure #1 in NetworkActivityTracingInternal.tracingCancel(completion:)(uint64_t a1, void (*a2)(uint64_t))
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v4 = result;
    swift_beginAccess();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [NetworkActivityLabel : NetworkActivity<NWConnection, NWActivity>]._Variant);
    Dictionary._Variant.removeAll(keepingCapacity:)(0);
    swift_endAccess();
    swift_beginAccess();
    *(void *)(v4 + 24) = MEMORY[0x263F8EE88];
    uint64_t v5 = swift_bridgeObjectRelease();
    if (a2) {
      a2(v5);
    }
    return swift_release();
  }
  return result;
}

uint64_t specialized closure #1 in NetworkActivityTracingInternal.addConnection(_:completion:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (!result) {
    return result;
  }
  uint64_t v6 = result;
  swift_beginAccess();
  uint64_t v7 = *(void *)(v6 + 24);
  swift_bridgeObjectRetain();
  specialized Set.contains(_:)(a2, v7);
  char v9 = v8;
  uint64_t v10 = swift_bridgeObjectRelease();
  if (v9)
  {
LABEL_24:
    if (a3) {
      a3(v10);
    }
    return swift_release();
  }
  swift_beginAccess();
  swift_retain();
  specialized Set._Variant.insert(_:)((uint64_t)&v30, a2, v11, v12, v13, v14, v15, v16, v29);
  swift_endAccess();
  swift_release();
  swift_beginAccess();
  uint64_t v17 = *(void *)(v6 + 16);
  uint64_t v20 = *(void *)(v17 + 64);
  uint64_t v19 = v17 + 64;
  uint64_t v18 = v20;
  uint64_t v21 = 1 << *(unsigned char *)(*(void *)(v6 + 16) + 32);
  uint64_t v22 = -1;
  if (v21 < 64) {
    uint64_t v22 = ~(-1 << v21);
  }
  uint64_t v23 = v22 & v18;
  int64_t v24 = (unint64_t)(v21 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v25 = 0;
  if (!v23) {
    goto LABEL_7;
  }
LABEL_6:
  for (v23 &= v23 - 1; ; uint64_t v23 = (v27 - 1) & v27)
  {
    swift_retain();
    specialized NetworkActivity.addConnection(_:)(a2);
    uint64_t result = swift_release();
    if (v23) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v26 = v25 + 1;
    if (__OFADD__(v25, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v26 >= v24) {
      goto LABEL_23;
    }
    uint64_t v27 = *(void *)(v19 + 8 * v26);
    ++v25;
    if (!v27)
    {
      int64_t v25 = v26 + 1;
      if (v26 + 1 >= v24) {
        goto LABEL_23;
      }
      uint64_t v27 = *(void *)(v19 + 8 * v25);
      if (!v27)
      {
        int64_t v25 = v26 + 2;
        if (v26 + 2 >= v24) {
          goto LABEL_23;
        }
        uint64_t v27 = *(void *)(v19 + 8 * v25);
        if (!v27) {
          break;
        }
      }
    }
LABEL_20:
    ;
  }
  int64_t v28 = v26 + 3;
  if (v28 >= v24)
  {
LABEL_23:
    uint64_t v10 = swift_release();
    goto LABEL_24;
  }
  uint64_t v27 = *(void *)(v19 + 8 * v28);
  if (v27)
  {
    int64_t v25 = v28;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v25 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v25 >= v24) {
      goto LABEL_23;
    }
    uint64_t v27 = *(void *)(v19 + 8 * v25);
    ++v28;
    if (v27) {
      goto LABEL_20;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t specialized NetworkActivityTracingInternal.addConnection(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v38 = a5;
  uint64_t v39 = a6;
  uint64_t v36 = a4;
  uint64_t v40 = a2;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  OUTLINED_FUNCTION_0_0();
  uint64_t v12 = v11;
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DispatchQoS();
  OUTLINED_FUNCTION_0_0();
  uint64_t v41 = v17;
  uint64_t v42 = v16;
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Logger.siriNetwork);
  swift_retain();
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    uint64_t v34 = v12;
    uint64_t v35 = v10;
    int64_t v24 = v23;
    *(_DWORD *)uint64_t v23 = 134217984;
    aBlock[0] = NWConnection.identifier.getter();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_25D6CC000, v21, v22, v36, v24, 0xCu);
    int64_t v25 = v24;
    uint64_t v12 = v34;
    uint64_t v10 = v35;
    MEMORY[0x2611B3750](v25, -1, -1);
  }
  else
  {

    swift_release();
  }
  int64_t v26 = *(void **)(v37 + 32);
  uint64_t v27 = swift_allocObject();
  swift_weakInit();
  int64_t v28 = (void *)swift_allocObject();
  v28[2] = v27;
  v28[3] = a1;
  uint64_t v29 = v39;
  uint64_t v30 = v40;
  v28[4] = v40;
  v28[5] = a3;
  aBlock[4] = v29;
  aBlock[5] = v28;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = a7;
  unint64_t v31 = _Block_copy(aBlock);
  swift_retain();
  id v32 = v26;
  swift_retain();
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed LinkRecommendationInfo?) -> ())?(v30);
  static DispatchQoS.unspecified.getter();
  uint64_t v43 = MEMORY[0x263F8EE78];
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2611B24E0](0, v19, v15, v31);
  _Block_release(v31);

  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v10);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v19, v42);
  swift_release();
  return swift_release();
}

uint64_t specialized closure #1 in NetworkActivityTracingInternal.removeConnection(_:completion:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (!result) {
    return result;
  }
  uint64_t v5 = result;
  swift_beginAccess();
  uint64_t v6 = specialized Set._Variant.remove(_:)();
  swift_endAccess();
  uint64_t v7 = swift_release();
  if (!v6)
  {
LABEL_24:
    if (a3) {
      a3(v7);
    }
    return swift_release();
  }
  swift_beginAccess();
  uint64_t v8 = *(void *)(v5 + 16);
  uint64_t v11 = *(void *)(v8 + 64);
  uint64_t v10 = v8 + 64;
  uint64_t v9 = v11;
  uint64_t v12 = 1 << *(unsigned char *)(*(void *)(v5 + 16) + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  uint64_t v14 = v13 & v9;
  int64_t v15 = (unint64_t)(v12 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v16 = 0;
  if (!v14) {
    goto LABEL_7;
  }
LABEL_6:
  for (v14 &= v14 - 1; ; uint64_t v14 = (v18 - 1) & v18)
  {
    swift_retain();
    specialized NetworkActivity.removeConnection(_:)();
    uint64_t result = swift_release();
    if (v14) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v17 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v17 >= v15) {
      goto LABEL_23;
    }
    uint64_t v18 = *(void *)(v10 + 8 * v17);
    ++v16;
    if (!v18)
    {
      int64_t v16 = v17 + 1;
      if (v17 + 1 >= v15) {
        goto LABEL_23;
      }
      uint64_t v18 = *(void *)(v10 + 8 * v16);
      if (!v18)
      {
        int64_t v16 = v17 + 2;
        if (v17 + 2 >= v15) {
          goto LABEL_23;
        }
        uint64_t v18 = *(void *)(v10 + 8 * v16);
        if (!v18) {
          break;
        }
      }
    }
LABEL_20:
    ;
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v15)
  {
LABEL_23:
    uint64_t v7 = swift_release();
    goto LABEL_24;
  }
  uint64_t v18 = *(void *)(v10 + 8 * v19);
  if (v18)
  {
    int64_t v16 = v19;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v16 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v16 >= v15) {
      goto LABEL_23;
    }
    uint64_t v18 = *(void *)(v10 + 8 * v16);
    ++v19;
    if (v18) {
      goto LABEL_20;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t specialized NetworkActivityTracingInternal.currentNetworkActivityToken(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v20 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void **)(v3 + 32);
  uint64_t v13 = swift_allocObject();
  swift_weakInit();
  uint64_t v14 = (void *)swift_allocObject();
  v14[2] = v13;
  v14[3] = a1;
  v14[4] = a2;
  aBlock[4] = partial apply for specialized closure #1 in NetworkActivityTracingInternal.currentNetworkActivityToken(_:);
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_54;
  int64_t v15 = _Block_copy(aBlock);
  id v16 = v12;
  swift_retain();
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed LinkRecommendationInfo?) -> ())?(a1);
  static DispatchQoS.unspecified.getter();
  uint64_t v21 = MEMORY[0x263F8EE78];
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2611B24E0](0, v11, v8, v15);
  _Block_release(v15);

  (*(void (**)(char *, uint64_t))(v20 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v19);
  swift_release();
  return swift_release();
}

uint64_t type metadata accessor for NetworkActivityTracing()
{
  return self;
}

unint64_t lazy protocol witness table accessor for type NetworkActivityLabel and conformance NetworkActivityLabel()
{
  unint64_t result = lazy protocol witness table cache variable for type NetworkActivityLabel and conformance NetworkActivityLabel;
  if (!lazy protocol witness table cache variable for type NetworkActivityLabel and conformance NetworkActivityLabel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkActivityLabel and conformance NetworkActivityLabel);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NetworkActivityLabel and conformance NetworkActivityLabel;
  if (!lazy protocol witness table cache variable for type NetworkActivityLabel and conformance NetworkActivityLabel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkActivityLabel and conformance NetworkActivityLabel);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NetworkActivityCompletionReason and conformance NetworkActivityCompletionReason()
{
  unint64_t result = lazy protocol witness table cache variable for type NetworkActivityCompletionReason and conformance NetworkActivityCompletionReason;
  if (!lazy protocol witness table cache variable for type NetworkActivityCompletionReason and conformance NetworkActivityCompletionReason)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkActivityCompletionReason and conformance NetworkActivityCompletionReason);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NetworkActivityParentLabel and conformance NetworkActivityParentLabel()
{
  unint64_t result = lazy protocol witness table cache variable for type NetworkActivityParentLabel and conformance NetworkActivityParentLabel;
  if (!lazy protocol witness table cache variable for type NetworkActivityParentLabel and conformance NetworkActivityParentLabel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkActivityParentLabel and conformance NetworkActivityParentLabel);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for NetworkActivityLabel(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF6)
  {
    if (a2 + 10 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 10) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 11;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xB;
  int v5 = v6 - 11;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for NetworkActivityLabel(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF5)
  {
    unsigned int v6 = ((a2 - 246) >> 8) + 1;
    *unint64_t result = a2 + 10;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25D73D9C8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 10;
        break;
    }
  }
  return result;
}

void type metadata accessor for NetworkActivityLabel()
{
}

uint64_t getEnumTagSinglePayload for NetworkActivityCompletionReason(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFB)
  {
    if (a2 + 5 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 5) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 6;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v5 = v6 - 6;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for NetworkActivityCompletionReason(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25D73DB50);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

void type metadata accessor for NetworkActivityCompletionReason()
{
}

uint64_t getEnumTagSinglePayload for NetworkActivityParentLabel(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for NetworkActivityParentLabel(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x25D73DC74);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void type metadata accessor for NetworkActivityParentLabel()
{
}

uint64_t method lookup function for NetworkActivityTracing(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for NetworkActivityTracing);
}

uint64_t dispatch thunk of NetworkActivityTracing.start(label:activate:completion:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x70))();
}

{
  void *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x78))();
}

uint64_t dispatch thunk of NetworkActivityTracing.activate(label:completion:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x80))();
}

{
  void *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x88))();
}

uint64_t dispatch thunk of NetworkActivityTracing.stop(label:reason:error:completion:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x90))();
}

{
  void *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x98))();
}

uint64_t dispatch thunk of NetworkActivityTracing.tracingCancel(completion:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of NetworkActivityTracing.currentNetworkActivityToken(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xB8))();
}

uint64_t type metadata completion function for NetworkActivityTracingInternal()
{
  return swift_initClassMetadata2();
}

uint64_t specialized closure #1 in NetworkActivityTracingInternal.currentNetworkActivityToken(_:)(uint64_t a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v9 = &v32[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v7);
  uint64_t v36 = &v32[-v10];
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  uint64_t v14 = &v32[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = MEMORY[0x270FA5388](v12);
  int64_t v17 = &v32[-v16];
  MEMORY[0x270FA5388](v15);
  uint64_t v19 = &v32[-v18];
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v21 = result;
    uint64_t v37 = a3;
    swift_beginAccess();
    if (specialized Dictionary.subscript.getter(1u, *(void *)(v21 + 16)))
    {
      specialized NetworkActivity.token.getter((uint64_t)v19);
      swift_release();
    }
    else
    {
      __swift_storeEnumTagSinglePayload((uint64_t)v19, 1, 1, v5);
    }
    if (one-time initialization token for siriNetwork != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Logger.siriNetwork);
    outlined init with copy of UUID?((uint64_t)v19, (uint64_t)v17);
    uint64_t v23 = Logger.logObject.getter();
    LODWORD(v24) = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, (os_log_type_t)v24))
    {
      uint64_t v35 = a2;
      int64_t v25 = (uint8_t *)swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      uint64_t v39 = v34;
      *(_DWORD *)int64_t v25 = 136315138;
      outlined init with copy of UUID?((uint64_t)v17, (uint64_t)v14);
      if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, v5) == 1)
      {
        unint64_t v26 = 0xE100000000000000;
        uint64_t v27 = 45;
      }
      else
      {
        int64_t v28 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v6 + 32);
        int v33 = (int)v24;
        int64_t v24 = v36;
        v28(v36, v14, v5);
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v6 + 16))(v9, v24, v5);
        uint64_t v27 = String.init<A>(describing:)();
        unint64_t v26 = v29;
        uint64_t v30 = v24;
        LOBYTE(v24) = v33;
        (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v30, v5);
      }
      uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v26, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v17, &demangling cache variable for type metadata for UUID?);
      _os_log_impl(&dword_25D6CC000, v23, (os_log_type_t)v24, "NetworkActivity Tracing: Current Network Activity Token: %s", v25, 0xCu);
      uint64_t v31 = v34;
      swift_arrayDestroy();
      MEMORY[0x2611B3750](v31, -1, -1);
      MEMORY[0x2611B3750](v25, -1, -1);

      a2 = v35;
    }
    else
    {
      outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v17, &demangling cache variable for type metadata for UUID?);
    }
    if (a2)
    {
      a2(v19);
      swift_release();
      return outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v19, &demangling cache variable for type metadata for UUID?);
    }
    else
    {
      outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v19, &demangling cache variable for type metadata for UUID?);
      return swift_release();
    }
  }
  return result;
}

uint64_t NetworkActivityTracingInternal.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t NetworkActivityTracingInternal.__deallocating_deinit()
{
  NetworkActivityTracingInternal.deinit();

  return MEMORY[0x270FA0228](v0, 40, 7);
}

uint64_t type metadata accessor for NetworkActivityTracingInternal()
{
  return swift_getGenericMetadata();
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned UInt64)@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

uint64_t sub_25D73E3B4()
{
  swift_weakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

unint64_t specialized Set.init(_nonEmptyArrayLiteral:)(unint64_t result)
{
  unint64_t v1 = result;
  unint64_t v2 = result >> 62;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v4) {
      goto LABEL_3;
    }
LABEL_5:
    unint64_t v3 = MEMORY[0x263F8EE88];
    goto LABEL_6;
  }
  if (!*(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_5;
  }
LABEL_3:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NWConnection>);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  unint64_t v3 = result;
LABEL_6:
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v5)
    {
LABEL_26:
      swift_bridgeObjectRelease();
      return v3;
    }
  }
  else
  {
    uint64_t v5 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v5) {
      goto LABEL_26;
    }
  }
  unint64_t v6 = 0;
  unint64_t v7 = v3 + 56;
  uint64_t v23 = v5;
  while (1)
  {
    if ((v1 & 0xC000000000000001) != 0)
    {
      uint64_t result = MEMORY[0x2611B2780](v6, v1);
      unint64_t v8 = result;
    }
    else
    {
      if (v6 >= *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_29;
      }
      unint64_t v8 = *(void *)(v1 + 32 + 8 * v6);
      uint64_t result = swift_retain();
    }
    BOOL v9 = __OFADD__(v6++, 1);
    if (v9) {
      break;
    }
    Hasher.init(_seed:)();
    Swift::UInt64 v10 = NWConnection.identifier.getter();
    Hasher._combine(_:)(v10);
    uint64_t result = Hasher._finalize()();
    uint64_t v11 = -1 << *(unsigned char *)(v3 + 32);
    unint64_t v12 = result & ~v11;
    unint64_t v13 = v12 >> 6;
    uint64_t v14 = *(void *)(v7 + 8 * (v12 >> 6));
    uint64_t v15 = 1 << v12;
    if (((1 << v12) & v14) != 0)
    {
      swift_retain();
      uint64_t v16 = NWConnection.identifier.getter();
      uint64_t v17 = NWConnection.identifier.getter();
      uint64_t result = swift_release();
      if (v16 == v17)
      {
LABEL_21:
        uint64_t result = swift_release();
        uint64_t v5 = v23;
        goto LABEL_25;
      }
      uint64_t v18 = ~v11;
      while (1)
      {
        unint64_t v12 = (v12 + 1) & v18;
        unint64_t v13 = v12 >> 6;
        uint64_t v14 = *(void *)(v7 + 8 * (v12 >> 6));
        uint64_t v15 = 1 << v12;
        if ((v14 & (1 << v12)) == 0) {
          break;
        }
        swift_retain();
        uint64_t v19 = NWConnection.identifier.getter();
        uint64_t v20 = NWConnection.identifier.getter();
        uint64_t result = swift_release();
        if (v19 == v20) {
          goto LABEL_21;
        }
      }
      uint64_t v5 = v23;
    }
    *(void *)(v7 + 8 * v13) = v15 | v14;
    *(void *)(*(void *)(v3 + 48) + 8 * v12) = v8;
    uint64_t v21 = *(void *)(v3 + 16);
    BOOL v9 = __OFADD__(v21, 1);
    uint64_t v22 = v21 + 1;
    if (v9) {
      goto LABEL_28;
    }
    *(void *)(v3 + 16) = v22;
LABEL_25:
    if (v6 == v5) {
      goto LABEL_26;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in NetworkActivityTracingInternal.removeConnection(_:completion:)(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t))
{
  return specialized closure #1 in NetworkActivityTracingInternal.removeConnection(_:completion:)(a1, *a2, a3);
}

uint64_t partial apply for specialized closure #1 in NetworkActivityTracingInternal.removeConnection(_:completion:)()
{
  return specialized closure #1 in NetworkActivityTracingInternal.removeConnection(_:completion:)(*(void *)(v0 + 16), (uint64_t *)(v0 + 24), *(void (**)(uint64_t))(v0 + 32));
}

uint64_t block_copy_helper_12(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_12()
{
  return swift_release();
}

uint64_t specialized closure #1 in NetworkActivityTracingInternal.addConnection(_:completion:)(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t))
{
  return specialized closure #1 in NetworkActivityTracingInternal.addConnection(_:completion:)(a1, *a2, a3);
}

uint64_t objectdestroy_21Tm()
{
  swift_release();
  swift_release();
  if (*(void *)(v0 + 32)) {
    swift_release();
  }

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t partial apply for specialized closure #1 in NetworkActivityTracingInternal.addConnection(_:completion:)()
{
  return specialized closure #1 in NetworkActivityTracingInternal.addConnection(_:completion:)(*(void *)(v0 + 16), (uint64_t *)(v0 + 24), *(void (**)(uint64_t))(v0 + 32));
}

uint64_t sub_25D73E718()
{
  _Block_release(*(const void **)(v0 + 16));

  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSUUID?) -> ()(uint64_t a1)
{
  thunk for @escaping @callee_unowned @convention(block) (@unowned NSUUID?) -> ()(a1, *(void *)(v1 + 16));
}

uint64_t partial apply for specialized closure #1 in NetworkActivityTracingInternal.currentNetworkActivityToken(_:)()
{
  return specialized closure #1 in NetworkActivityTracingInternal.currentNetworkActivityToken(_:)(*(void *)(v0 + 16), *(void (**)(void))(v0 + 24), *(void *)(v0 + 32));
}

uint64_t objectdestroy_50Tm()
{
  swift_release();
  if (*(void *)(v0 + 24)) {
    swift_release();
  }

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t partial apply for specialized closure #1 in NetworkActivityTracingInternal.tracingCancel(completion:)()
{
  return specialized closure #1 in NetworkActivityTracingInternal.tracingCancel(completion:)(*(void *)(v0 + 16), *(void (**)(uint64_t))(v0 + 24));
}

uint64_t sub_25D73E80C()
{
  swift_release();

  if (*(void *)(v0 + 40)) {
    swift_release();
  }

  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t partial apply for specialized closure #1 in NetworkActivityTracingInternal.stop(label:reason:error:completion:)()
{
  return specialized closure #1 in NetworkActivityTracingInternal.stop(label:reason:error:completion:)(*(void *)(v0 + 16), *(unsigned __int8 *)(v0 + 24), *(unsigned __int8 *)(v0 + 25), *(void **)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48));
}

uint64_t _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_25D73E8BC()
{
  return objectdestroy_71Tm(48);
}

uint64_t partial apply for specialized closure #1 in NetworkActivityTracingInternal.activate(label:completion:)()
{
  return specialized closure #1 in NetworkActivityTracingInternal.activate(label:completion:)(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24), *(void (**)(unint64_t))(v0 + 32));
}

uint64_t sub_25D73E8D4()
{
  return objectdestroy_71Tm(49);
}

uint64_t objectdestroy_71Tm(uint64_t a1)
{
  swift_release();
  if (*(void *)(v1 + 32)) {
    swift_release();
  }

  return MEMORY[0x270FA0238](v1, a1, 7);
}

uint64_t partial apply for specialized closure #1 in NetworkActivityTracingInternal.start(label:activate:completion:)()
{
  return specialized closure #1 in NetworkActivityTracingInternal.start(label:activate:completion:)(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(unsigned char *)(v0 + 48));
}

uint64_t OUTLINED_FUNCTION_1_24(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) < 0xA) {
    char v2 = a1;
  }
  else {
    char v2 = 0;
  }
  *(unsigned char *)(v1 - 1) = v2;
  return v1 - 1;
}

id ConnectionTCPInfoMetrics.snConnectionTCPInfoMetrics.getter()
{
  uint64_t v32 = *(void *)(v0 + 88);
  int v31 = *(unsigned __int8 *)(v0 + 96);
  uint64_t v35 = *(void *)(v0 + 104);
  int v34 = *(unsigned __int8 *)(v0 + 112);
  uint64_t v41 = *(void *)(v0 + 120);
  int v39 = *(unsigned __int8 *)(v0 + 128);
  unsigned int v36 = *(_DWORD *)(v0 + 164);
  int v1 = *(unsigned __int8 *)(v0 + 168);
  unsigned int v2 = *(_DWORD *)(v0 + 180);
  int v3 = *(unsigned __int8 *)(v0 + 184);
  unsigned int v4 = *(_DWORD *)(v0 + 188);
  int v5 = *(unsigned __int8 *)(v0 + 192);
  uint64_t v44 = *(void *)(v0 + 200);
  int v43 = *(unsigned __int8 *)(v0 + 208);
  uint64_t v40 = *(void *)(v0 + 216);
  int v38 = *(unsigned __int8 *)(v0 + 224);
  int v46 = *(unsigned __int8 *)(v0 + 232);
  unsigned int v47 = *(_DWORD *)(v0 + 228);
  int v49 = *(unsigned __int8 *)(v0 + 240);
  unsigned int v50 = *(_DWORD *)(v0 + 236);
  if (*(void *)(v0 + 8))
  {
    uint64_t v51 = *(void *)(v0 + 8);
    uint64_t v52 = *(void *)v0;
  }
  else
  {
    uint64_t v51 = 0xE000000000000000;
    uint64_t v52 = 0;
  }
  if (*(unsigned char *)(v0 + 176)) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = *(unsigned int *)(v0 + 172);
  }
  id v7 = objc_allocWithZone(NSNumber);
  swift_bridgeObjectRetain();
  id v48 = objc_msgSend(v7, sel_initWithUnsignedInt_, v6);
  if (v3) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = v2;
  }
  id v45 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithUnsignedInt_, v8);
  if (v5) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = v4;
  }
  id v42 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithUnsignedInt_, v9);
  if (v1) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = v36;
  }
  id v37 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithUnsignedInt_, v10);
  id v33 = OUTLINED_FUNCTION_0_24(objc_allocWithZone(NSNumber));
  id v30 = OUTLINED_FUNCTION_0_24(objc_allocWithZone(NSNumber));
  id v28 = OUTLINED_FUNCTION_0_24(objc_allocWithZone(NSNumber));
  id v29 = OUTLINED_FUNCTION_0_24(objc_allocWithZone(NSNumber));
  id v11 = OUTLINED_FUNCTION_0_24(objc_allocWithZone(NSNumber));
  if (v31) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = v32;
  }
  id v13 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithUnsignedLongLong_, v12);
  if (v34) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = v35;
  }
  id v15 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithUnsignedLongLong_, v14);
  if (v39) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = v41;
  }
  id v17 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithUnsignedLongLong_, v16);
  if (v38) {
    uint64_t v18 = 0;
  }
  else {
    uint64_t v18 = v40;
  }
  id v19 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithUnsignedLongLong_, v18);
  if (v43) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = v44;
  }
  id v21 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithUnsignedLongLong_, v20);
  if (v46) {
    uint64_t v22 = 0;
  }
  else {
    uint64_t v22 = v47;
  }
  id v23 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithUnsignedInt_, v22);
  if (v49) {
    uint64_t v24 = 0;
  }
  else {
    uint64_t v24 = v50;
  }
  id v25 = objc_msgSend(objc_allocWithZone(NSNumber), (SEL)&selRef_setDuplicateBytesReceived_, v24);
  id v26 = objc_allocWithZone((Class)SNConnectionTCPInfoMetrics);
  return @nonobjc SNConnectionTCPInfoMetrics.init(interfaceName:rttCurrent:rttSmoothed:rttVariance:rttBest:packetsSent:packetsReceived:bytesSent:bytesReceived:bytesRetransmitted:bytesUnacked:duplicateBytesReceived:outOfOrderBytesReceived:sendBufferBytes:sendBandwidth:synRetransmits:tfoSynDataAcked:)(v52, v51, v48, v45, v42, v37, v33, v30, v28, v29, v11, v13, v15, v17, v19, v21, v23, v25);
}

id @nonobjc SNConnectionTCPInfoMetrics.init(interfaceName:rttCurrent:rttSmoothed:rttVariance:rttBest:packetsSent:packetsReceived:bytesSent:bytesReceived:bytesRetransmitted:bytesUnacked:duplicateBytesReceived:outOfOrderBytesReceived:sendBufferBytes:sendBandwidth:synRetransmits:tfoSynDataAcked:)(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18)
{
  uint64_t v20 = (void *)MEMORY[0x2611B2220]();
  swift_bridgeObjectRelease();
  id v27 = objc_msgSend(v26, sel_initWithInterfaceName_rttCurrent_rttSmoothed_rttVariance_rttBest_packetsSent_packetsReceived_bytesSent_bytesReceived_bytesRetransmitted_bytesUnacked_duplicateBytesReceived_outOfOrderBytesReceived_sendBufferBytes_sendBandwidth_synRetransmits_tfoSynDataAcked_, v20, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);

  return v27;
}

id OUTLINED_FUNCTION_0_24(void *a1)
{
  return objc_msgSend(a1, (SEL)(v2 + 2072), v1);
}

uint64_t QueueMonitorManager.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t QueueMonitorManager.__deallocating_deinit()
{
  QueueMonitorManager.deinit();

  return MEMORY[0x270FA0228](v0, 32, 7);
}

uint64_t type metadata accessor for QueueMonitorManager()
{
  return self;
}

uint64_t QueueObserver.deinit()
{
  swift_release();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t QueueObserver.__deallocating_deinit()
{
  QueueObserver.deinit();

  return MEMORY[0x270FA0228](v0, 32, 7);
}

uint64_t type metadata accessor for QueueObserver()
{
  return self;
}

uint64_t QueueMonitor.deinit()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC11SiriNetwork12QueueMonitor_initialWaitingTime;
  uint64_t v2 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?(*(void *)(v0 + OBJC_IVAR____TtC11SiriNetwork12QueueMonitor_handler));
  return v0;
}

uint64_t QueueMonitor.__deallocating_deinit()
{
  QueueMonitor.deinit();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x270FA0228](v0, v1, v2);
}

uint64_t ObjC metadata update function for QueueMonitor()
{
  return type metadata accessor for QueueMonitor();
}

uint64_t type metadata accessor for QueueMonitor()
{
  uint64_t result = type metadata singleton initialization cache for QueueMonitor;
  if (!type metadata singleton initialization cache for QueueMonitor) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for QueueMonitor()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t destroy for ConnectionNetworkReport()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ConnectionNetworkReport(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 + 4);
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  uint64_t v6 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v6;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(unsigned char *)(a1 + 92) = *(unsigned char *)(a2 + 92);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(unsigned char *)(a1 + 100) = *(unsigned char *)(a2 + 100);
  uint64_t v7 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v7;
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  uint64_t v8 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v8;
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  uint64_t v9 = *(void *)(a2 + 192);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  *(void *)(a1 + 192) = v9;
  uint64_t v10 = *(void *)(a2 + 208);
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  *(void *)(a1 + 208) = v10;
  uint64_t v11 = *(void *)(a2 + 232);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = v11;
  uint64_t v12 = *(void *)(a2 + 240);
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  *(void *)(a1 + 240) = v12;
  uint64_t v13 = *(void *)(a2 + 256);
  *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
  *(void *)(a1 + 256) = v13;
  *(unsigned char *)(a1 + 265) = *(unsigned char *)(a2 + 265);
  uint64_t v14 = *(void *)(a2 + 272);
  *(unsigned char *)(a1 + 280) = *(unsigned char *)(a2 + 280);
  *(void *)(a1 + 272) = v14;
  uint64_t v15 = *(void *)(a2 + 288);
  *(unsigned char *)(a1 + 296) = *(unsigned char *)(a2 + 296);
  *(void *)(a1 + 288) = v15;
  uint64_t v16 = *(void *)(a2 + 304);
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a2 + 312);
  *(void *)(a1 + 304) = v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ConnectionNetworkReport(uint64_t a1, int *a2)
{
  int v4 = *a2;
  *(unsigned char *)(a1 + 4) = *((unsigned char *)a2 + 4);
  *(_DWORD *)a1 = v4;
  *(void *)(a1 + 8) = *((void *)a2 + 1);
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = *((void *)a2 + 3);
  *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *((void *)a2 + 7);
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *((void *)a2 + 9);
  *(void *)(a1 + 80) = *((void *)a2 + 10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  int v6 = a2[22];
  *(unsigned char *)(a1 + 92) = *((unsigned char *)a2 + 92);
  *(_DWORD *)(a1 + 88) = v6;
  LOBYTE(v6) = *((unsigned char *)a2 + 100);
  *(_DWORD *)(a1 + 96) = a2[24];
  *(unsigned char *)(a1 + 100) = v6;
  *(void *)(a1 + 104) = *((void *)a2 + 13);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = *((void *)a2 + 14);
  *(void *)(a1 + 120) = *((void *)a2 + 15);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = *((void *)a2 + 16);
  *(unsigned char *)(a1 + 136) = *((unsigned char *)a2 + 136);
  *(void *)(a1 + 128) = v7;
  uint64_t v8 = *((void *)a2 + 18);
  *(unsigned char *)(a1 + 152) = *((unsigned char *)a2 + 152);
  *(void *)(a1 + 144) = v8;
  uint64_t v9 = *((void *)a2 + 20);
  *(unsigned char *)(a1 + 168) = *((unsigned char *)a2 + 168);
  *(void *)(a1 + 160) = v9;
  uint64_t v10 = *((void *)a2 + 22);
  *(unsigned char *)(a1 + 184) = *((unsigned char *)a2 + 184);
  *(void *)(a1 + 176) = v10;
  uint64_t v11 = *((void *)a2 + 24);
  *(unsigned char *)(a1 + 200) = *((unsigned char *)a2 + 200);
  *(void *)(a1 + 192) = v11;
  uint64_t v12 = *((void *)a2 + 26);
  *(unsigned char *)(a1 + 216) = *((unsigned char *)a2 + 216);
  *(void *)(a1 + 208) = v12;
  *(void *)(a1 + 224) = *((void *)a2 + 28);
  *(void *)(a1 + 232) = *((void *)a2 + 29);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v13 = *((void *)a2 + 30);
  *(unsigned char *)(a1 + 248) = *((unsigned char *)a2 + 248);
  *(void *)(a1 + 240) = v13;
  uint64_t v14 = *((void *)a2 + 32);
  *(unsigned char *)(a1 + 264) = *((unsigned char *)a2 + 264);
  *(void *)(a1 + 256) = v14;
  *(unsigned char *)(a1 + 265) = *((unsigned char *)a2 + 265);
  uint64_t v15 = *((void *)a2 + 34);
  *(unsigned char *)(a1 + 280) = *((unsigned char *)a2 + 280);
  *(void *)(a1 + 272) = v15;
  uint64_t v16 = *((void *)a2 + 36);
  *(unsigned char *)(a1 + 296) = *((unsigned char *)a2 + 296);
  *(void *)(a1 + 288) = v16;
  uint64_t v17 = *((void *)a2 + 38);
  *(unsigned char *)(a1 + 312) = *((unsigned char *)a2 + 312);
  *(void *)(a1 + 304) = v17;
  return a1;
}

void *__swift_memcpy313_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x139uLL);
}

uint64_t assignWithTake for ConnectionNetworkReport(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 + 4);
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v7;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(unsigned char *)(a1 + 92) = *(unsigned char *)(a2 + 92);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(unsigned char *)(a1 + 100) = *(unsigned char *)(a2 + 100);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v8;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  uint64_t v9 = *(void *)(a2 + 192);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  *(void *)(a1 + 192) = v9;
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  uint64_t v10 = *(void *)(a2 + 232);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = v10;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
  *(unsigned char *)(a1 + 265) = *(unsigned char *)(a2 + 265);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(unsigned char *)(a1 + 280) = *(unsigned char *)(a2 + 280);
  *(unsigned char *)(a1 + 296) = *(unsigned char *)(a2 + 296);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a2 + 312);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConnectionNetworkReport(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 313))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 104);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConnectionNetworkReport(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 312) = 0;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 313) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 104) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 313) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ConnectionNetworkReport()
{
  return &type metadata for ConnectionNetworkReport;
}

uint64_t ConnectionNetworkReport.firstByteTimeInMs.getter()
{
  outlined init with take of Double?(v0 + 256, (uint64_t)v3);
  uint64_t result = outlined init with take of Double?((uint64_t)v3, (uint64_t)&v4);
  if ((v5 & 1) != 0 || v4 <= 0.0) {
    return 0;
  }
  double v2 = v4 * 1000.0;
  if (v4 * 1000.0 <= 0.0) {
    return 0;
  }
  if (v2 >= 1.84467441e19) {
    return -1;
  }
  if ((~*(void *)&v2 & 0x7FF0000000000000) != 0)
  {
    if (v2 > -1.0) {
      return (unint64_t)v2;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t ConnectionNetworkReport.openTimeInMs.getter()
{
  uint64_t result = *(uint64_t *)(v0 + 240);
  if ((*(unsigned char *)(v0 + 248) & 1) == 0)
  {
    double v2 = *(double *)&result * 1000.0;
    *(double *)&uint64_t result = -9.22337204e18;
    if (v2 > -9.22337204e18)
    {
      *(double *)&uint64_t result = 9.22337204e18;
      if (v2 < 9.22337204e18)
      {
        if ((~*(void *)&v2 & 0x7FF0000000000000) != 0)
        {
          if (v2 > -9.22337204e18)
          {
            *(double *)&uint64_t result = (double)(uint64_t)v2;
            return result;
          }
        }
        else
        {
          __break(1u);
        }
        __break(1u);
      }
    }
  }
  return result;
}

uint64_t ConnectionNetworkReport.debugDescription.getter()
{
  uint64_t v1 = 0x6E776F6E6B6E75;
  OUTLINED_FUNCTION_9_8(*(_DWORD *)v0);
  v2._char countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_3_19();
  v77._char countAndFlagsBits = v4;
  v77._object = v3;
  if (!*(void *)(v0 + 16)) {
    OUTLINED_FUNCTION_2_19();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_8_6();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_3_19();
  v76._char countAndFlagsBits = v6;
  v76._object = v5;
  _StringGuts.grow(_:)(21);
  v7._char countAndFlagsBits = 0xD000000000000013;
  v7._object = (void *)0x800000025D796560;
  String.append(_:)(v7);
  Double.write<A>(to:)();
  if (!*(void *)(v0 + 48)) {
    OUTLINED_FUNCTION_2_19();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_8_6();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_3_19();
  v75._char countAndFlagsBits = v9;
  v75._object = v8;
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  if (!*(void *)(v0 + 64)) {
    OUTLINED_FUNCTION_2_19();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_8_6();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_3_19();
  v74._char countAndFlagsBits = v11;
  v74._object = v10;
  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_7((uint64_t)"primarySubflowInterfaceName ");
  if (!*(void *)(v0 + 80)) {
    OUTLINED_FUNCTION_2_19();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_8_6();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_3_19();
  v73._char countAndFlagsBits = v13;
  v73._object = v12;
  OUTLINED_FUNCTION_9_8(*(_DWORD *)(v0 + 88));
  v78._char countAndFlagsBits = OUTLINED_FUNCTION_4_14();
  OUTLINED_FUNCTION_7_5(v78);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_3_19();
  v72._char countAndFlagsBits = v15;
  v72._object = v14;
  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_5_13(0xD000000000000016);
  OUTLINED_FUNCTION_9_8(*(_DWORD *)(v0 + 96));
  v16._char countAndFlagsBits = OUTLINED_FUNCTION_4_14();
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_3_19();
  v71._char countAndFlagsBits = v18;
  v71._object = v17;
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_7((uint64_t)"subflowSwitchCounts ");
  swift_bridgeObjectRetain();
  v19._char countAndFlagsBits = Dictionary.description.getter();
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_7((uint64_t)"connectionMethod ");
  if (!*(void *)(v0 + 120)) {
    OUTLINED_FUNCTION_2_19();
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_8_6();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_3_19();
  v70._char countAndFlagsBits = v21;
  v70._object = v20;
  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_5_13(0xD000000000000016);
  v79._char countAndFlagsBits = OUTLINED_FUNCTION_4_14();
  OUTLINED_FUNCTION_7_5(v79);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_3_19();
  v69._char countAndFlagsBits = v23;
  v69._object = v22;
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_5_13(0xD000000000000019);
  v80._char countAndFlagsBits = OUTLINED_FUNCTION_1_25(*(void *)(v0 + 144));
  OUTLINED_FUNCTION_7_5(v80);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_3_19();
  v68._char countAndFlagsBits = v25;
  v68._object = v24;
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_5_13(0xD000000000000020);
  v81._char countAndFlagsBits = OUTLINED_FUNCTION_1_25(*(void *)(v0 + 160));
  OUTLINED_FUNCTION_7_5(v81);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_3_19();
  v67._char countAndFlagsBits = v27;
  v67._object = v26;
  _StringGuts.grow(_:)(41);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_5_13(0xD000000000000027);
  v82._char countAndFlagsBits = OUTLINED_FUNCTION_1_25(*(void *)(v0 + 176));
  OUTLINED_FUNCTION_7_5(v82);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_3_19();
  v66._char countAndFlagsBits = v29;
  v66._object = v28;
  _StringGuts.grow(_:)(36);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_5_13(0xD000000000000022);
  v83._char countAndFlagsBits = OUTLINED_FUNCTION_1_25(*(void *)(v0 + 192));
  OUTLINED_FUNCTION_7_5(v83);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_3_19();
  v65._char countAndFlagsBits = v31;
  v65._object = v30;
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  v32._char countAndFlagsBits = OUTLINED_FUNCTION_1_25(*(void *)(v0 + 208));
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_3_19();
  v64._char countAndFlagsBits = v34;
  v64._object = v33;
  if (*(void *)(v0 + 232))
  {
    uint64_t v1 = *(void *)(v0 + 224);
    uint64_t v35 = *(void **)(v0 + 232);
  }
  else
  {
    uint64_t v35 = (void *)0xE700000000000000;
  }
  swift_bridgeObjectRetain();
  v36._char countAndFlagsBits = v1;
  v36._object = v35;
  String.append(_:)(v36);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_3_19();
  uint64_t v62 = v37;
  uint64_t v63 = v38;
  v39._char countAndFlagsBits = 0x656D69546E65706FLL;
  v39._object = (void *)0xED000020734D6E49;
  String.append(_:)(v39);
  ConnectionNetworkReport.openTimeInMs.getter();
  Double.write<A>(to:)();
  OUTLINED_FUNCTION_3_19();
  uint64_t v60 = v40;
  uint64_t v61 = v41;
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_5_13(0xD000000000000012);
  ConnectionNetworkReport.firstByteTimeInMs.getter();
  v42._char countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v42);
  swift_bridgeObjectRelease();
  if (*(unsigned char *)(v0 + 265)) {
    uint64_t v43 = 1702195828;
  }
  else {
    uint64_t v43 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + 265)) {
    unint64_t v44 = 0xE400000000000000;
  }
  else {
    unint64_t v44 = 0xE500000000000000;
  }
  unint64_t v45 = v44;
  String.append(_:)(*(Swift::String *)&v43);
  swift_bridgeObjectRelease();
  v46._char countAndFlagsBits = 0x2069737372;
  v46._object = (void *)0xE500000000000000;
  String.append(_:)(v46);
  OUTLINED_FUNCTION_6_9();
  v47._char countAndFlagsBits = 544370291;
  v47._object = (void *)0xE400000000000000;
  String.append(_:)(v47);
  OUTLINED_FUNCTION_6_9();
  _StringGuts.grow(_:)(30);
  v48._char countAndFlagsBits = 0xD00000000000001CLL;
  v48._object = (void *)0x800000025D796730;
  String.append(_:)(v48);
  OUTLINED_FUNCTION_6_9();
  _StringGuts.grow(_:)(132);
  v49._char countAndFlagsBits = 0xD00000000000002ALL;
  v49._object = (void *)0x800000025D796750;
  String.append(_:)(v49);
  String.append(_:)(v77);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2_4();
  String.append(_:)(v76);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2_4();
  v50._char countAndFlagsBits = 0;
  v50._object = (void *)0xE000000000000000;
  String.append(_:)(v50);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2_4();
  String.append(_:)(v75);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2_4();
  String.append(_:)(v74);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2_4();
  String.append(_:)(v73);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2_4();
  String.append(_:)(v72);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2_4();
  String.append(_:)(v71);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2_4();
  v51._char countAndFlagsBits = 0;
  v51._object = (void *)0xE000000000000000;
  String.append(_:)(v51);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2_4();
  String.append(_:)(v70);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2_4();
  String.append(_:)(v69);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2_4();
  String.append(_:)(v68);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2_4();
  String.append(_:)(v67);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2_4();
  String.append(_:)(v66);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2_4();
  String.append(_:)(v65);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2_4();
  String.append(_:)(v64);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2_4();
  v52._char countAndFlagsBits = v63;
  v52._object = v62;
  String.append(_:)(v52);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2_4();
  v53._char countAndFlagsBits = v61;
  v53._object = v60;
  String.append(_:)(v53);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2_4();
  v54._char countAndFlagsBits = 0;
  v54._object = (void *)0xE000000000000000;
  String.append(_:)(v54);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2_4();
  v55._char countAndFlagsBits = 0x7669747061437369;
  v55._object = (void *)0xEA00000000002065;
  String.append(_:)(v55);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2_4();
  v56._char countAndFlagsBits = 0;
  v56._object = (void *)0xE000000000000000;
  String.append(_:)(v56);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2_4();
  v57._char countAndFlagsBits = 0;
  v57._object = (void *)0xE000000000000000;
  String.append(_:)(v57);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2_4();
  v58._char countAndFlagsBits = 0;
  v58._object = (void *)0xE000000000000000;
  String.append(_:)(v58);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ConnectionNetworkReport()
{
  memcpy(v2, v0, sizeof(v2));
  return ConnectionNetworkReport.debugDescription.getter();
}

uint64_t OUTLINED_FUNCTION_1_25@<X0>(uint64_t a1@<X8>)
{
  if (v1) {
    a1 = 0;
  }
  *(void *)(v2 - 128) = a1;
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t OUTLINED_FUNCTION_4_14()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

void OUTLINED_FUNCTION_5_13(uint64_t a1@<X8>)
{
  *(void *)(v2 - 120) = a1;
  *(void *)(v2 - 112) = (v1 - 32) | 0x8000000000000000;
}

uint64_t OUTLINED_FUNCTION_6_9()
{
  return Double.write<A>(to:)();
}

void OUTLINED_FUNCTION_7_5(Swift::String a1)
{
  String.append(_:)(a1);
}

void OUTLINED_FUNCTION_8_6()
{
  uint64_t v3 = v1;
  uint64_t v4 = v0;
  String.append(_:)(*(Swift::String *)&v3);
}

void OUTLINED_FUNCTION_9_8(int a1@<W8>)
{
  if (v1) {
    a1 = 0;
  }
  *(_DWORD *)(v2 - 128) = a1;
}

void OUTLINED_FUNCTION_10_7(uint64_t a1@<X8>)
{
  *(void *)(v2 - 120) = v1;
  *(void *)(v2 - 112) = (a1 - 32) | 0x8000000000000000;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for ConnectionPingInfoReport(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ConnectionPingInfoReport(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ConnectionPingInfoReport()
{
  return &type metadata for ConnectionPingInfoReport;
}

unint64_t ConnectionPingInfoReport.debugDescription.getter()
{
  v0._char countAndFlagsBits = 0x676E69506E61656DLL;
  v0._object = (void *)0xED000020734D6E49;
  String.append(_:)(v0);
  Double.write<A>(to:)();
  v1._char countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease();
  v2._char countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(45);
  swift_bridgeObjectRelease();
  v3._char countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._char countAndFlagsBits = 8236;
  v4._object = (void *)0xE200000000000000;
  String.append(_:)(v4);
  v5._char countAndFlagsBits = 0x6E756F43676E6970;
  v5._object = (void *)0xEA00000000002074;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._char countAndFlagsBits = 8236;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  v7._char countAndFlagsBits = 0xD000000000000018;
  v7._object = (void *)0x800000025D796780;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._char countAndFlagsBits = 93;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  return 0xD000000000000022;
}

unint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ConnectionPingInfoReport()
{
  return ConnectionPingInfoReport.debugDescription.getter();
}

uint64_t ConnectionSnapshotReport.init(connection:wasConnected:sequenceNumber:provider:snapshotTriggerReason:connectionMethod:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = MEMORY[0x270FA5388](a1);
  uint64_t v169 = v10;
  uint64_t v12 = v11;
  uint64_t v165 = v13;
  uint64_t v166 = v14;
  uint64_t v16 = v15;
  LODWORD(v164) = v17;
  LODWORD(v170) = v18;
  uint64_t v19 = v9;
  uint64_t v174 = v20;
  v252[37] = *MEMORY[0x263EF8340];
  uint64_t v21 = (unsigned char *)type metadata accessor for NWInterface();
  OUTLINED_FUNCTION_0_0();
  uint64_t v158 = v22;
  MEMORY[0x270FA5388](v23);
  OUTLINED_FUNCTION_5_5();
  uint64_t v161 = v24;
  OUTLINED_FUNCTION_13_2();
  MEMORY[0x270FA5388](v25);
  uint64_t v171 = (uint64_t)v149 - v26;
  OUTLINED_FUNCTION_13_2();
  MEMORY[0x270FA5388](v27);
  uint64_t v29 = (char *)v149 - v28;
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NWInterface?);
  MEMORY[0x270FA5388](v30 - 8);
  OUTLINED_FUNCTION_5_5();
  uint64_t v168 = v31;
  OUTLINED_FUNCTION_13_2();
  MEMORY[0x270FA5388](v32);
  uint64_t v172 = (char *)v149 - v33;
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWPath?);
  MEMORY[0x270FA5388](v34 - 8);
  OUTLINED_FUNCTION_5_5();
  uint64_t v159 = v35;
  OUTLINED_FUNCTION_13_2();
  MEMORY[0x270FA5388](v36);
  uint64_t v38 = (char *)v149 - v37;
  uint64_t v163 = type metadata accessor for NWPath();
  OUTLINED_FUNCTION_0_0();
  uint64_t v160 = v39;
  MEMORY[0x270FA5388](v40);
  uint64_t v162 = (char *)v149 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_DWORD *)char v250 = 0;
  *(void *)&v250[8] = 0;
  *(void *)&v250[16] = 0xE000000000000000;
  *(void *)&v250[24] = 0;
  *(void *)&v250[32] = 0xE000000000000000;
  _s11SiriNetwork010ConnectionB6ReportVSgWOi0_(v251);
  uint64_t v175 = &v250[40];
  outlined init with take of ConnectionSnapshotReport?((uint64_t)v251, (uint64_t)&v250[40], (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
  *(void *)&v250[368] = 0;
  *(void *)&v250[360] = 0;
  v250[376] = 1;
  _s11SiriNetwork25ConnectionInterfaceReportVSgWOi0_(v252);
  uint64_t v167 = &v250[384];
  outlined init with take of ConnectionSnapshotReport?((uint64_t)v252, (uint64_t)&v250[384], (uint64_t *)&demangling cache variable for type metadata for ConnectionInterfaceReport?);
  uint64_t v42 = MEMORY[0x263F8EE78];
  *(void *)&v250[680] = MEMORY[0x263F8EE78];
  *(void *)&v250[688] = MEMORY[0x263F8EE78];
  *(_DWORD *)&v250[696] = 4;
  if (one-time initialization token for sharedNetworkAnalytics != -1) {
    swift_once();
  }
  uint64_t v43 = static NetworkAnalytics.sharedNetworkAnalytics;
  *(void *)&v250[704] = static NetworkAnalytics.sharedNetworkAnalytics;
  uint64_t v173 = v19;
  outlined init with copy of NetworkConnectionProtocol?(v19, (uint64_t)v249);
  if (v249[3])
  {
    id v44 = v43;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NetworkConnectionProtocol);
    type metadata accessor for NWConnection();
    if (swift_dynamicCast())
    {
      uint64_t v45 = v194;
      *(_DWORD *)char v250 = v164;
      swift_bridgeObjectRelease();
      *(void *)&v250[8] = v165;
      *(void *)&v250[16] = v16;
      uint64_t v46 = v45;
      swift_bridgeObjectRelease();
      *(void *)&v250[24] = v166;
      *(void *)&v250[32] = v12;
      Swift::String v47 = (void (*)(void, void))swift_retain();
      char v48 = v170;
      uint64_t v49 = static ConnectionTCPInfoMetrics.connectionTCPInfoMetrics(from:wasConnected:)(v47, v170 & 1);
      swift_release();
      swift_bridgeObjectRelease();
      *(void *)&v250[688] = v49;
      char v190 = 1;
      char v189 = 1;
      char v188 = 1;
      char v187 = 1;
      char v186 = 1;
      char v185 = 1;
      char v184 = 1;
      char v183 = 1;
      char v182 = 1;
      char v181 = 1;
      char v180 = 1;
      char v179 = 1;
      char v178 = 1;
      char v177 = 1;
      char v176 = 1;
      int v206 = 0;
      char v207 = 1;
      uint64_t v209 = 0;
      uint64_t v208 = 0;
      uint64_t v210 = 0;
      char v211 = 1;
      long long v212 = 0u;
      long long v213 = 0u;
      long long v214 = 0u;
      int v215 = 0;
      char v216 = 1;
      int v217 = 0;
      char v218 = 1;
      uint64_t v219 = MEMORY[0x263F8EE80];
      uint64_t v220 = 0;
      uint64_t v222 = 0;
      uint64_t v221 = 0;
      char v223 = 1;
      uint64_t v224 = 0;
      char v225 = 1;
      uint64_t v226 = 0;
      char v227 = 1;
      uint64_t v228 = 0;
      char v229 = 1;
      uint64_t v230 = 0;
      char v231 = 1;
      uint64_t v232 = 0;
      char v233 = 1;
      uint64_t v235 = 0;
      uint64_t v234 = 0;
      uint64_t v236 = 0;
      char v237 = 1;
      uint64_t v238 = 0;
      char v239 = 1;
      char v240 = 0;
      uint64_t v241 = 0;
      char v242 = 1;
      uint64_t v243 = 0;
      char v244 = 1;
      uint64_t v245 = 0;
      char v246 = 1;
      destructiveProjectEnumData for ConnectionConfigurationError(&v206);
      Swift::String v50 = v175;
      outlined init with take of ConnectionSnapshotReport?((uint64_t)v175, (uint64_t)v247, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
      outlined release of ConnectionNetworkReport?(v247);
      outlined init with take of ConnectionSnapshotReport?((uint64_t)&v206, (uint64_t)v50, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
      swift_bridgeObjectRelease();
      *(void *)&v250[152] = v169;
      *(void *)&v250[160] = a9;
      swift_bridgeObjectRelease();
      *(void *)&v250[680] = v42;
      if ((v48 & 1) == 0)
      {
        outlined destroy of RPCOspreyConnectionProtocol?(v173, (uint64_t *)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
        swift_release();
LABEL_111:
        uint64_t v145 = v174;
        uint64_t v146 = (void *)OUTLINED_FUNCTION_6_10();
        memcpy(v146, v250, 0x2C8uLL);
        uint64_t v147 = OUTLINED_FUNCTION_6_10();
        destructiveProjectEnumData for ConnectionConfigurationError(v147);
        Swift::String v58 = (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?;
        Swift::String v57 = v248;
        uint64_t v59 = v145;
        return outlined init with take of ConnectionSnapshotReport?((uint64_t)v57, v59, v58);
      }
      NWConnection.currentPath.getter();
      uint64_t v51 = v163;
      int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v38, 1, v163);
      v149[1] = v46;
      if (EnumTagSinglePayload == 1)
      {
        uint64_t v53 = outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v38, &demangling cache variable for type metadata for NWPath?);
        uint64_t v54 = v51;
LABEL_47:
        MEMORY[0x2611B1DD0](v53);
        int v98 = nw_connection_uses_multipath();
        uint64_t v99 = swift_unknownObjectRelease();
        if (!v98) {
          goto LABEL_70;
        }
        OUTLINED_FUNCTION_5_14(v99, (uint64_t)v205);
        OUTLINED_FUNCTION_14_3();
        uint64_t v100 = OUTLINED_FUNCTION_0_25();
        if (!v77)
        {
          uint64_t v100 = swift_bridgeObjectRelease();
          *(_OWORD *)&v250[96] = xmmword_25D792A90;
        }
        MEMORY[0x2611B1DD0](v100);
        subflow_uint64_t count = nw_connection_multipath_get_subflow_count();
        swift_unknownObjectRelease();
        outlined init with take of ConnectionSnapshotReport?((uint64_t)v175, (uint64_t)v203, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
        outlined init with take of ConnectionSnapshotReport?((uint64_t)v203, (uint64_t)v204, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
        OUTLINED_FUNCTION_6_0((uint64_t)v204);
        if (!v77)
        {
          *(_DWORD *)&v250[128] = subflow_count;
          v250[132] = 0;
        }
        outlined init with take of ConnectionSnapshotReport?((uint64_t)v175, (uint64_t)v201, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
        outlined init with take of ConnectionSnapshotReport?((uint64_t)v201, (uint64_t)v202, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
        uint64_t v102 = OUTLINED_FUNCTION_6_0((uint64_t)v202);
        if (!v77)
        {
          *(_DWORD *)&v250[136] = subflow_count;
          v250[140] = 0;
        }
        MEMORY[0x2611B1DD0](v102);
        primary_subflow_interface_uint32_t index = nw_connection_multipath_get_primary_subflow_interface_index();
        swift_unknownObjectRelease();
        uint64_t v104 = v159;
        NWConnection.currentPath.getter();
        if (__swift_getEnumTagSinglePayload(v104, 1, v54) == 1)
        {
          uint64_t v105 = outlined destroy of RPCOspreyConnectionProtocol?(v104, &demangling cache variable for type metadata for NWPath?);
LABEL_67:
          MEMORY[0x2611B1DD0](v105);
          uint64_t v120 = (void *)nw_connection_multipath_copy_subflow_counts();
          uint64_t v99 = swift_unknownObjectRelease();
          if (v120)
          {
            uint64_t v121 = MEMORY[0x2611B38C0](v120);
            if (v121 == XPC_TYPE_DICTIONARY.getter())
            {
              v198[0] = MEMORY[0x263F8EE80];
              uint64_t v139 = swift_allocObject();
              *(void *)(v139 + 16) = v198;
              uint64_t v140 = swift_allocObject();
              *(void *)(v140 + 16) = partial apply for closure #2 in ConnectionSnapshotReport.init(connection:wasConnected:sequenceNumber:provider:snapshotTriggerReason:connectionMethod:);
              *(void *)(v140 + 24) = v139;
              v200[4] = _sSPys4Int8VGSo13OS_xpc_object_pSbIgygd_ACSoAD_pSbIegygd_TRTA_0;
              v200[5] = v140;
              v200[0] = MEMORY[0x263EF8330];
              v200[1] = 1107296256;
              v200[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafePointer<Int8>, @guaranteed OS_xpc_object) -> (@unowned Bool);
              v200[3] = &block_descriptor_13;
              uint64_t v141 = _Block_copy(v200);
              swift_retain();
              swift_release();
              xpc_dictionary_apply(v120, v141);
              swift_unknownObjectRelease();
              _Block_release(v141);
              char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
              uint64_t v143 = swift_release();
              if (isEscapingClosureAtFileLocation) {
                __break(1u);
              }
              OUTLINED_FUNCTION_5_14(v143, (uint64_t)v199);
              OUTLINED_FUNCTION_10_8();
              OUTLINED_FUNCTION_6_0((uint64_t)v200);
              if (!v77)
              {
                uint64_t v144 = v198[0];
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                *(void *)&v250[144] = v144;
              }
              uint64_t v99 = swift_bridgeObjectRelease();
            }
            else
            {
              uint64_t v99 = swift_unknownObjectRelease();
            }
          }
LABEL_70:
          uint64_t v21 = &v250[256];
          uint64_t v191 = 0;
          uint64_t v192 = 0;
          uint64_t v193 = 0;
          MEMORY[0x2611B1DD0](v99);
          int v122 = nw_connection_fillout_tcp_statistics();
          uint64_t v123 = swift_unknownObjectRelease();
          if (v122)
          {
            OUTLINED_FUNCTION_5_14(v123, (uint64_t)v205);
            OUTLINED_FUNCTION_14_3();
            uint64_t v124 = OUTLINED_FUNCTION_0_25();
            if (!v77)
            {
              *(void *)&v250[168] = v191;
              v250[176] = 0;
            }
            OUTLINED_FUNCTION_5_14(v124, (uint64_t)v203);
            outlined init with take of ConnectionSnapshotReport?((uint64_t)v203, (uint64_t)v204, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
            uint64_t v125 = OUTLINED_FUNCTION_6_0((uint64_t)v204);
            if (!v77)
            {
              *(void *)&v250[184] = HIDWORD(v191);
              v250[192] = 0;
            }
            OUTLINED_FUNCTION_5_14(v125, (uint64_t)v201);
            outlined init with take of ConnectionSnapshotReport?((uint64_t)v201, (uint64_t)v202, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
            uint64_t v126 = OUTLINED_FUNCTION_6_0((uint64_t)v202);
            if (!v77)
            {
              *(void *)&v250[200] = v192;
              v250[208] = 0;
            }
            OUTLINED_FUNCTION_5_14(v126, (uint64_t)v199);
            OUTLINED_FUNCTION_10_8();
            uint64_t v127 = OUTLINED_FUNCTION_6_0((uint64_t)v200);
            if (!v77)
            {
              *(void *)&v250[216] = HIDWORD(v192);
              v250[224] = 0;
            }
            OUTLINED_FUNCTION_5_14(v127, (uint64_t)v197);
            outlined init with take of ConnectionSnapshotReport?((uint64_t)v197, (uint64_t)v198, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
            uint64_t v128 = OUTLINED_FUNCTION_6_0((uint64_t)v198);
            if (!v77)
            {
              *(void *)&v250[248] = v193;
              v250[256] = 0;
            }
            OUTLINED_FUNCTION_5_14(v128, (uint64_t)v195);
            outlined init with take of ConnectionSnapshotReport?((uint64_t)v195, (uint64_t)v196, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
            uint64_t v129 = OUTLINED_FUNCTION_6_0((uint64_t)v196);
            if (!v77)
            {
              *(void *)&v250[232] = HIDWORD(v193);
              v250[240] = 0;
            }
          }
          else
          {
            if (one-time initialization token for siriNetwork != -1) {
LABEL_113:
            }
              swift_once();
            uint64_t v130 = type metadata accessor for Logger();
            __swift_project_value_buffer(v130, (uint64_t)static Logger.siriNetwork);
            uint64_t v131 = Logger.logObject.getter();
            os_log_type_t v132 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v131, v132))
            {
              uint64_t v133 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v133 = 0;
              _os_log_impl(&dword_25D6CC000, v131, v132, "NetworkMetrics: Establishment report is not ready to extract TCP statistics for ConnectionSnapshotReport (connectionNetworkReport)", v133, 2u);
              MEMORY[0x2611B3750](v133, -1, -1);
            }
          }
          id v134 = MEMORY[0x2611B1DD0](v129);
          double v135 = MEMORY[0x2611B3090]();
          nw_protocol_metadata_t v136 = nw_connection_copy_protocol_metadata(v134, v135);
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          if (!v136)
          {
            outlined destroy of RPCOspreyConnectionProtocol?(v173, (uint64_t *)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
LABEL_109:
            swift_release();
            OUTLINED_FUNCTION_8_7();
            goto LABEL_111;
          }
          int negotiated_tls_protocol_version = sec_protocol_metadata_get_negotiated_tls_protocol_version(v136);
          switch(negotiated_tls_protocol_version)
          {
            case 769:
              OUTLINED_FUNCTION_3_20();
              OUTLINED_FUNCTION_1_26();
              OUTLINED_FUNCTION_0_25();
              if (v77) {
                goto LABEL_108;
              }
              swift_release();
              swift_unknownObjectRelease();
              swift_unknownObjectRelease();
              outlined destroy of RPCOspreyConnectionProtocol?(v173, (uint64_t *)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
              swift_bridgeObjectRelease();
              OUTLINED_FUNCTION_8_7();
              long long v138 = xmmword_25D792AC0;
              goto LABEL_110;
            case 770:
              OUTLINED_FUNCTION_3_20();
              OUTLINED_FUNCTION_1_26();
              OUTLINED_FUNCTION_0_25();
              if (v77) {
                goto LABEL_108;
              }
              swift_release();
              swift_unknownObjectRelease();
              swift_unknownObjectRelease();
              outlined destroy of RPCOspreyConnectionProtocol?(v173, (uint64_t *)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
              swift_bridgeObjectRelease();
              OUTLINED_FUNCTION_8_7();
              long long v138 = xmmword_25D792AB0;
              goto LABEL_110;
            case 771:
              OUTLINED_FUNCTION_3_20();
              OUTLINED_FUNCTION_1_26();
              OUTLINED_FUNCTION_0_25();
              if (v77) {
                goto LABEL_108;
              }
              swift_release();
              swift_unknownObjectRelease();
              swift_unknownObjectRelease();
              outlined destroy of RPCOspreyConnectionProtocol?(v173, (uint64_t *)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
              swift_bridgeObjectRelease();
              OUTLINED_FUNCTION_8_7();
              long long v138 = xmmword_25D792AE0;
              goto LABEL_110;
            case 772:
              OUTLINED_FUNCTION_3_20();
              OUTLINED_FUNCTION_1_26();
              OUTLINED_FUNCTION_0_25();
              if (v77) {
                goto LABEL_108;
              }
              swift_release();
              swift_unknownObjectRelease();
              swift_unknownObjectRelease();
              outlined destroy of RPCOspreyConnectionProtocol?(v173, (uint64_t *)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
              swift_bridgeObjectRelease();
              OUTLINED_FUNCTION_8_7();
              long long v138 = xmmword_25D792AD0;
              goto LABEL_110;
            default:
              if (negotiated_tls_protocol_version == 65277)
              {
                OUTLINED_FUNCTION_3_20();
                OUTLINED_FUNCTION_1_26();
                OUTLINED_FUNCTION_0_25();
                if (!v77)
                {
                  swift_release();
                  swift_unknownObjectRelease();
                  swift_unknownObjectRelease();
                  outlined destroy of RPCOspreyConnectionProtocol?(v173, (uint64_t *)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
                  swift_bridgeObjectRelease();
                  OUTLINED_FUNCTION_8_7();
                  long long v138 = xmmword_25D792AF0;
                  goto LABEL_110;
                }
              }
              else if (negotiated_tls_protocol_version == 65279)
              {
                OUTLINED_FUNCTION_3_20();
                OUTLINED_FUNCTION_1_26();
                OUTLINED_FUNCTION_0_25();
                if (!v77)
                {
                  swift_release();
                  swift_unknownObjectRelease();
                  swift_unknownObjectRelease();
                  outlined destroy of RPCOspreyConnectionProtocol?(v173, (uint64_t *)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
                  swift_bridgeObjectRelease();
                  OUTLINED_FUNCTION_8_7();
                  long long v138 = xmmword_25D792AA0;
LABEL_110:
                  *(_OWORD *)(v21 + 8) = v138;
                  goto LABEL_111;
                }
              }
LABEL_108:
              outlined destroy of RPCOspreyConnectionProtocol?(v173, (uint64_t *)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
              swift_unknownObjectRelease();
              swift_unknownObjectRelease();
              goto LABEL_109;
          }
        }
        uint64_t v106 = NWPath.availableInterfaces.getter();
        (*(void (**)(uint64_t, uint64_t))(v160 + 8))(v104, v54);
        uint64_t v169 = v106;
        uint64_t v107 = *(void *)(v106 + 16);
        uint64_t v108 = v161;
        if (!v107)
        {
LABEL_65:
          OUTLINED_FUNCTION_13_4(v168, 1);
LABEL_66:
          uint64_t v105 = swift_bridgeObjectRelease();
          goto LABEL_67;
        }
        uint64_t v109 = *(char **)(v158 + 16);
        uint64_t v110 = v169 + ((*(unsigned __int8 *)(v158 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v158 + 80));
        uint64_t v171 = *(void *)(v158 + 72);
        uint64_t v172 = v109;
        uint64_t v111 = (void (**)(uint64_t, uint64_t, unsigned char *))(v158 + 32);
        *(void *)&long long v170 = primary_subflow_interface_index;
        while (1)
        {
          uint64_t v112 = v168;
          ((void (*)(uint64_t, uint64_t, unsigned char *))v172)(v168, v110, v21);
          OUTLINED_FUNCTION_13_4(v112, 0);
          if (__swift_getEnumTagSinglePayload(v112, 1, (uint64_t)v21) == 1) {
            goto LABEL_66;
          }
          (*v111)(v108, v112, v21);
          if (NWInterface.index.getter() != (void)v170) {
            goto LABEL_63;
          }
          outlined init with take of ConnectionSnapshotReport?((uint64_t)v175, (uint64_t)v199, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
          OUTLINED_FUNCTION_10_8();
          OUTLINED_FUNCTION_6_0((uint64_t)v200);
          if (v77) {
            break;
          }
          uint64_t v108 = v161;
          uint64_t v115 = NWInterface.name.getter();
          uint64_t v117 = v116;
          uint64_t v118 = OUTLINED_FUNCTION_12_5();
          v119(v118);
          swift_bridgeObjectRelease();
          *(void *)&v250[112] = v115;
          *(void *)&v250[120] = v117;
LABEL_64:
          v110 += v171;
          if (!--v107) {
            goto LABEL_65;
          }
        }
        uint64_t v108 = v161;
LABEL_63:
        uint64_t v113 = OUTLINED_FUNCTION_12_5();
        v114(v113);
        goto LABEL_64;
      }
      (*(void (**)(char *, char *, uint64_t))(v160 + 32))(v162, v38, v51);
      NWPath.nw.getter();
      uint64_t v60 = nw_path_copy_interface();
      swift_unknownObjectRelease();
      if (v60)
      {
        uint32_t index = nw_interface_get_index(v60);
        swift_unknownObjectRelease();
      }
      else
      {
        uint32_t index = 0;
      }
      uint64_t v62 = (uint64_t)v172;
      uint64_t v63 = NWPath.availableInterfaces.getter();
      uint64_t v165 = *(void *)(v63 + 16);
      uint64_t v166 = v63;
      if (!v165)
      {
LABEL_45:
        OUTLINED_FUNCTION_13_4(v62, 1);
LABEL_46:
        swift_bridgeObjectRelease();
        uint64_t v54 = v163;
        uint64_t v53 = (*(uint64_t (**)(char *, uint64_t))(v160 + 8))(v162, v163);
        goto LABEL_47;
      }
      unint64_t v64 = 0;
      Swift::String v65 = *(void (**)(void, void, void))(v158 + 16);
      unint64_t v164 = v166 + ((*(unsigned __int8 *)(v158 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v158 + 80));
      uint64_t v66 = *(void *)(v158 + 72);
      uint64_t v156 = (void (**)(char *, uint64_t, unsigned char *))(v158 + 32);
      uint64_t v157 = v66;
      uint64_t v169 = (uint64_t)&v204[2] + 8;
      v149[0] = (uint64_t)&v201[2] + 8;
      uint64_t v154 = v21;
      uint64_t v155 = (uint64_t)&v248[2] + 8;
      uint64_t v152 = v158 + 16;
      uint64_t v153 = (void (**)(char *, unsigned char *))(v158 + 8);
      uint32_t v150 = index;
      uint64_t v151 = v65;
LABEL_17:
      v65(v62, v164 + v157 * v64, v21);
      OUTLINED_FUNCTION_13_4(v62, 0);
      if (__swift_getEnumTagSinglePayload(v62, 1, (uint64_t)v21) == 1) {
        goto LABEL_46;
      }
      (*v156)(v29, v62, v21);
      uint64_t v67 = v171;
      v65(v171, v29, v21);
      ConnectionInterfaceReport.init(interface:)(v67, v204);
      uint64_t v68 = *(void *)&v250[688];
      uint64_t v69 = *(void *)(*(void *)&v250[688] + 16);
      if (!v69) {
        goto LABEL_34;
      }
      swift_bridgeObjectRetain_n();
      memcpy(v248, (const void *)(v68 + 32), 0xF9uLL);
      uint64_t v70 = *((void *)&v248[0] + 1);
      uint64_t v71 = v69 - 1;
      for (uint64_t i = 288; ; i += 256)
      {
        uint64_t v73 = *(void *)&v248[0];
        uint64_t v74 = OUTLINED_FUNCTION_6_10();
        outlined retain of ConnectionTCPInfoMetrics(v74);
        swift_bridgeObjectRetain();
        uint64_t v75 = NWInterface.name.getter();
        if (v70)
        {
          BOOL v77 = v73 == v75 && v70 == v76;
          if (v77)
          {
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
LABEL_32:
            memcpy(v203, v248, 0xF9uLL);
            destructiveProjectEnumData for ConnectionConfigurationError(v203);
            uint64_t v82 = v169;
            outlined init with take of ConnectionSnapshotReport?(v169, (uint64_t)v205, (uint64_t *)&demangling cache variable for type metadata for ConnectionTCPInfoMetrics?);
            outlined release of ConnectionTCPInfoMetrics?(v205);
            outlined init with take of ConnectionSnapshotReport?((uint64_t)v203, v82, (uint64_t *)&demangling cache variable for type metadata for ConnectionTCPInfoMetrics?);
LABEL_33:
            uint64_t v62 = (uint64_t)v172;
            uint32_t index = v150;
LABEL_34:
            int v83 = DWORD1(v204[2]);
            if (DWORD1(v204[2]) == index)
            {
              long long v170 = v204[0];
              long long v84 = v204[1];
              char v85 = v204[2];
              outlined init with take of ConnectionSnapshotReport?(v169, (uint64_t)v200, (uint64_t *)&demangling cache variable for type metadata for ConnectionTCPInfoMetrics?);
              v201[0] = v170;
              v201[1] = v84;
              LOBYTE(v201[2]) = v85;
              DWORD1(v201[2]) = index;
              outlined init with take of ConnectionSnapshotReport?((uint64_t)v200, v149[0], (uint64_t *)&demangling cache variable for type metadata for ConnectionTCPInfoMetrics?);
              memcpy(v202, v201, 0x121uLL);
              destructiveProjectEnumData for ConnectionConfigurationError(v202);
              uint64_t v86 = v167;
              outlined init with take of ConnectionSnapshotReport?((uint64_t)v167, (uint64_t)v203, (uint64_t *)&demangling cache variable for type metadata for ConnectionInterfaceReport?);
              outlined init with take of ConnectionSnapshotReport?((uint64_t)v202, (uint64_t)v86, (uint64_t *)&demangling cache variable for type metadata for ConnectionInterfaceReport?);
              outlined retain of ConnectionInterfaceReport((uint64_t)v201);
              outlined release of ConnectionInterfaceReport?(v203);
              outlined init with take of ConnectionSnapshotReport?((uint64_t)v175, (uint64_t)v205, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
              outlined init with take of ConnectionSnapshotReport?((uint64_t)v205, (uint64_t)v248, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
              OUTLINED_FUNCTION_0_25();
              if (!v77)
              {
                v199[0] = v85;
                uint64_t v87 = ConnectionType.stringRawValue.getter();
                uint64_t v89 = v88;
                swift_bridgeObjectRelease();
                *(void *)&v250[96] = v87;
                *(void *)&v250[104] = v89;
              }
              uint64_t v62 = (uint64_t)v172;
            }
            long long v170 = v204[0];
            unint64_t v91 = *((void *)&v204[1] + 1);
            unint64_t v90 = *(void *)&v204[1];
            char v92 = v204[2];
            outlined init with take of ConnectionSnapshotReport?(v169, (uint64_t)v203, (uint64_t *)&demangling cache variable for type metadata for ConnectionTCPInfoMetrics?);
            v248[0] = v170;
            v248[1] = __PAIR128__(v91, v90);
            LOBYTE(v248[2]) = v92;
            DWORD1(v248[2]) = v83;
            outlined init with take of ConnectionSnapshotReport?((uint64_t)v203, v155, (uint64_t *)&demangling cache variable for type metadata for ConnectionTCPInfoMetrics?);
            uint64_t v93 = *(void *)&v250[680];
            uint64_t v94 = OUTLINED_FUNCTION_6_10();
            outlined retain of ConnectionInterfaceReport(v94);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
              uint64_t v93 = v96;
            }
            unint64_t v95 = *(void *)(v93 + 16);
            uint64_t v21 = v154;
            if (v95 >= *(void *)(v93 + 24) >> 1)
            {
              specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
              uint64_t v93 = v97;
            }
            ++v64;
            *(void *)(v93 + 16) = v95 + 1;
            memcpy((void *)(v93 + 296 * v95 + 32), v248, 0x121uLL);
            *(void *)&v250[680] = v93;
            (*v153)(v29, v21);
            memcpy(v205, v204, 0x121uLL);
            outlined release of ConnectionInterfaceReport((uint64_t)v205);
            if (v64 == v165) {
              goto LABEL_45;
            }
            Swift::String v65 = v151;
            if (v64 >= *(void *)(v166 + 16))
            {
              __break(1u);
              goto LABEL_113;
            }
            goto LABEL_17;
          }
          char v78 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v78)
          {
            swift_bridgeObjectRelease_n();
            goto LABEL_32;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        uint64_t v79 = OUTLINED_FUNCTION_6_10();
        outlined release of ConnectionTCPInfoMetrics(v79);
        if (!v71)
        {
          swift_bridgeObjectRelease_n();
          goto LABEL_33;
        }
        Swift::String v80 = (void *)OUTLINED_FUNCTION_6_10();
        memcpy(v80, v81, 0xF9uLL);
        uint64_t v70 = *((void *)&v248[0] + 1);
        --v71;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v55 = v43;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v249, (uint64_t *)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
  }
  outlined destroy of RPCOspreyConnectionProtocol?(v173, (uint64_t *)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
  memcpy(v247, v250, sizeof(v247));
  outlined release of ConnectionSnapshotReport((uint64_t)v247);
  Swift::String v56 = (void *)OUTLINED_FUNCTION_6_10();
  _s11SiriNetwork24ConnectionSnapshotReportVSgWOi0_(v56);
  Swift::String v57 = (_OWORD *)OUTLINED_FUNCTION_6_10();
  uint64_t v59 = v174;
  return outlined init with take of ConnectionSnapshotReport?((uint64_t)v57, v59, v58);
}

uint64_t outlined init with copy of NetworkConnectionProtocol?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t thunk for @callee_guaranteed (@unowned UnsafePointer<Int8>, @guaranteed OS_xpc_object) -> (@unowned Bool)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3() & 1;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned UnsafePointer<Int8>, @guaranteed OS_xpc_object) -> (@unowned Bool)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::String v5 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 32);
  swift_unknownObjectRetain();
  char v6 = v5(a2, a3);
  swift_unknownObjectRelease();
  return v6 & 1;
}

uint64_t closure #2 in ConnectionSnapshotReport.init(connection:wasConnected:sequenceNumber:provider:snapshotTriggerReason:connectionMethod:)(int a1, xpc_object_t xuint)
{
  uint64_t value = xpc_uint64_get_value(xuint);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UnsafePointer<Int8>);
  _print_unlocked<A, B>(_:_:)();
  specialized Dictionary._Variant.setValue(_:forKey:)(value, 0, 0xE000000000000000);
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t sub_25D741ECC()
{
  return OUTLINED_FUNCTION_4_11(v0, 24);
}

uint64_t partial apply for closure #2 in ConnectionSnapshotReport.init(connection:wasConnected:sequenceNumber:provider:snapshotTriggerReason:connectionMethod:)(int a1, void *a2)
{
  return closure #2 in ConnectionSnapshotReport.init(connection:wasConnected:sequenceNumber:provider:snapshotTriggerReason:connectionMethod:)(a1, a2);
}

uint64_t sub_25D741EE0()
{
  return OUTLINED_FUNCTION_4_11(v0, 32);
}

uint64_t _sSPys4Int8VGSo13OS_xpc_object_pSbIgygd_ACSoAD_pSbIegygd_TRTA_0()
{
  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

uint64_t block_copy_helper_13(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_13()
{
  return swift_release();
}

uint64_t *outlined release of ConnectionInterfaceReport?(uint64_t *a1)
{
  return a1;
}

uint64_t OUTLINED_FUNCTION_0_25()
{
  return _s11SiriNetwork010ConnectionB6ReportVSgWOg(v0 + 4928);
}

uint64_t OUTLINED_FUNCTION_1_26()
{
  return outlined init with take of ConnectionSnapshotReport?(v0 + 3576, v0 + 4928, v1);
}

uint64_t OUTLINED_FUNCTION_3_20()
{
  uint64_t v3 = *(void *)(v0 + 232);
  return outlined init with take of ConnectionSnapshotReport?(v3, v0 + 3576, v1);
}

uint64_t OUTLINED_FUNCTION_5_14(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 232);
  return outlined init with take of ConnectionSnapshotReport?(v5, a2, v3);
}

uint64_t OUTLINED_FUNCTION_6_10()
{
  return v0 + 4928;
}

uint64_t OUTLINED_FUNCTION_8_7()
{
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?(v0);
}

uint64_t OUTLINED_FUNCTION_10_8()
{
  return outlined init with take of ConnectionSnapshotReport?(v0 + 1656, v0 + 1976, v1);
}

uint64_t OUTLINED_FUNCTION_12_5()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_13_4(uint64_t a1, uint64_t a2)
{
  return __swift_storeEnumTagSinglePayload(a1, a2, 1, v2);
}

uint64_t OUTLINED_FUNCTION_14_3()
{
  return outlined init with take of ConnectionSnapshotReport?(v0 + 3576, v0 + 4928, v1);
}

void ConnectionPolicyRoute.hash(into:)()
{
  uint64_t v1 = *(void *)(v0 + 24);
  Swift::UInt v10 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 64);
  Swift::UInt8 v11 = *(unsigned char *)(v0 + 72);
  uint64_t v4 = *(void *)(v0 + 88);
  Swift::UInt v5 = *(unsigned __int8 *)(v0 + 96);
  Swift::UInt64 v8 = *(void *)(v0 + 104);
  int v9 = *(unsigned __int8 *)(v0 + 112);
  Swift::UInt v6 = *(unsigned __int8 *)(v0 + 113);
  if (*(void *)(v0 + 8))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v1)
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v1) {
      goto LABEL_3;
    }
  }
  Hasher._combine(_:)(0);
LABEL_6:
  Hasher._combine(_:)(v10);
  if (v2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v3)
    {
LABEL_8:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v3) {
      goto LABEL_8;
    }
  }
  Hasher._combine(_:)(0);
LABEL_11:
  Hasher._combine(_:)(v11);
  if (v4)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  if (v5 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5);
  }
  if (v9)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    if ((v8 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v7 = v8;
    }
    else {
      Swift::UInt64 v7 = 0;
    }
    Hasher._combine(_:)(v7);
  }
  if (v6 == 5)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v6);
  }
}

BOOL static ConnectionPolicyRoute.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v10 = *(void *)(a1 + 64);
  int v11 = *(unsigned __int8 *)(a1 + 72);
  uint64_t v13 = *(void *)(a1 + 80);
  uint64_t v12 = *(void *)(a1 + 88);
  int v14 = *(unsigned __int8 *)(a1 + 96);
  double v15 = *(double *)(a1 + 104);
  char v16 = *(unsigned char *)(a1 + 112);
  int v17 = *(unsigned __int8 *)(a1 + 113);
  uint64_t v18 = *(void *)(a2 + 8);
  uint64_t v19 = *(void *)(a2 + 24);
  uint64_t v100 = *(void *)(a2 + 32);
  uint64_t v21 = *(void *)(a2 + 40);
  uint64_t v20 = *(void *)(a2 + 48);
  uint64_t v23 = *(void *)(a2 + 56);
  uint64_t v22 = *(void *)(a2 + 64);
  int v24 = *(unsigned __int8 *)(a2 + 72);
  uint64_t v25 = *(void *)(a2 + 80);
  uint64_t v26 = *(void *)(a2 + 88);
  int v27 = *(unsigned __int8 *)(a2 + 96);
  double v28 = *(double *)(a2 + 104);
  int v29 = *(unsigned __int8 *)(a2 + 112);
  int v30 = *(unsigned __int8 *)(a2 + 113);
  if (!v3)
  {
    uint64_t v99 = *(void *)(a2 + 16);
    if (v18) {
      return 0;
    }
    goto LABEL_10;
  }
  if (!v18) {
    return 0;
  }
  uint64_t v99 = *(void *)(a2 + 16);
  if (*(void *)a1 == *(void *)a2 && v3 == v18) {
    goto LABEL_10;
  }
  uint64_t v91 = *(void *)(a1 + 48);
  uint64_t v93 = *(void *)(a2 + 56);
  uint64_t v77 = *(void *)(a1 + 80);
  int v74 = *(unsigned __int8 *)(a2 + 96);
  int v83 = *(unsigned __int8 *)(a2 + 112);
  int v71 = *(unsigned __int8 *)(a1 + 96);
  int v68 = *(unsigned __int8 *)(a2 + 113);
  char v65 = *(unsigned char *)(a1 + 112);
  int v32 = *(unsigned __int8 *)(a1 + 113);
  uint64_t v66 = *(void *)(a2 + 88);
  uint64_t v33 = *(void *)(a1 + 88);
  uint64_t v34 = *(void *)(a2 + 80);
  int v97 = *(unsigned __int8 *)(a1 + 72);
  uint64_t v35 = *(void *)(a1 + 56);
  uint64_t v95 = *(void *)(a1 + 64);
  uint64_t v36 = *(void *)(a2 + 64);
  uint64_t v37 = *(void *)(a1 + 40);
  uint64_t v87 = *(void *)(a1 + 32);
  uint64_t v89 = *(void *)(a2 + 48);
  uint64_t v38 = *(void *)(a2 + 40);
  char v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t v5 = v87;
  uint64_t v20 = v89;
  uint64_t v21 = v38;
  uint64_t v7 = v91;
  uint64_t v23 = v93;
  uint64_t v8 = v37;
  uint64_t v22 = v36;
  uint64_t v10 = v95;
  uint64_t v9 = v35;
  int v11 = v97;
  uint64_t v25 = v34;
  uint64_t v12 = v33;
  uint64_t v26 = v66;
  int v17 = v32;
  char v16 = v65;
  int v30 = v68;
  int v14 = v71;
  int v29 = v83;
  int v27 = v74;
  uint64_t v13 = v77;
  char v40 = v39;
  BOOL result = 0;
  if (v40)
  {
LABEL_10:
    if (v6)
    {
      if (!v19) {
        return 0;
      }
      if (v4 == v99 && v6 == v19)
      {
        if (v5 != v100) {
          return 0;
        }
      }
      else
      {
        uint64_t v88 = v5;
        uint64_t v90 = v20;
        uint64_t v67 = v21;
        uint64_t v69 = v22;
        uint64_t v92 = v7;
        uint64_t v94 = v23;
        uint64_t v78 = v25;
        uint64_t v81 = v8;
        uint64_t v96 = v10;
        uint64_t v72 = v9;
        int v98 = v11;
        uint64_t v84 = v12;
        int v75 = v17;
        char v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
        BOOL result = 0;
        if ((v43 & 1) == 0) {
          return result;
        }
        uint64_t v12 = v84;
        int v17 = v75;
        uint64_t v25 = v78;
        uint64_t v8 = v81;
        int v11 = v98;
        uint64_t v22 = v69;
        uint64_t v9 = v72;
        uint64_t v23 = v94;
        uint64_t v10 = v96;
        uint64_t v20 = v90;
        uint64_t v7 = v92;
        uint64_t v21 = v67;
        if (v88 != v100) {
          return result;
        }
      }
    }
    else
    {
      BOOL result = 0;
      if (v19 || v5 != v100) {
        return result;
      }
    }
    if (v7)
    {
      if (!v20) {
        return 0;
      }
      if (v8 != v21 || v7 != v20)
      {
        int v85 = v29;
        int v76 = v17;
        uint64_t v45 = v12;
        int v82 = v24;
        uint64_t v79 = v25;
        int v46 = v11;
        uint64_t v70 = v22;
        uint64_t v73 = v9;
        uint64_t v47 = v10;
        uint64_t v48 = v23;
        char v49 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v23 = v48;
        uint64_t v22 = v70;
        uint64_t v9 = v73;
        uint64_t v10 = v47;
        int v11 = v46;
        uint64_t v25 = v79;
        int v24 = v82;
        uint64_t v12 = v45;
        int v17 = v76;
        int v29 = v85;
        char v50 = v49;
        BOOL result = 0;
        if ((v50 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v20)
    {
      return 0;
    }
    if (v10)
    {
      if (!v22) {
        return 0;
      }
      if (v9 == v23 && v10 == v22)
      {
        if (v11 != v24) {
          return 0;
        }
      }
      else
      {
        int v52 = v24;
        int v53 = v11;
        uint64_t v80 = v25;
        uint64_t v86 = v12;
        int v54 = v29;
        int v55 = v17;
        char v56 = _stringCompareWithSmolCheck(_:_:expecting:)();
        BOOL result = 0;
        if ((v56 & 1) == 0) {
          return result;
        }
        int v17 = v55;
        int v29 = v54;
        uint64_t v12 = v86;
        uint64_t v25 = v80;
        if ((v53 ^ v52)) {
          return result;
        }
      }
    }
    else
    {
      BOOL result = 0;
      if (v22 || ((v11 ^ v24) & 1) != 0) {
        return result;
      }
    }
    if (v12)
    {
      if (v26)
      {
        if (v13 != v25 || v12 != v26)
        {
          int v58 = v29;
          int v59 = v17;
          char v60 = _stringCompareWithSmolCheck(_:_:expecting:)();
          int v17 = v59;
          int v29 = v58;
          char v61 = v60;
          BOOL result = 0;
          if ((v61 & 1) == 0) {
            return result;
          }
        }
LABEL_54:
        if (v14 == 3)
        {
          if (v27 != 3) {
            return 0;
          }
        }
        else if (v27 == 3 || v14 != v27)
        {
          return 0;
        }
        if (v16)
        {
          if (!v29) {
            return 0;
          }
        }
        else
        {
          if (v15 == v28) {
            char v63 = v29;
          }
          else {
            char v63 = 1;
          }
          if (v63) {
            return 0;
          }
        }
        if (v17 == 5) {
          return v30 == 5;
        }
        else {
          return v30 != 5 && v17 == v30;
        }
      }
    }
    else if (!v26)
    {
      goto LABEL_54;
    }
    return 0;
  }
  return result;
}

Swift::Int ConnectionPolicyRoute.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ConnectionPolicyRoute()
{
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type ConnectionPolicyRoute and conformance ConnectionPolicyRoute()
{
  unint64_t result = lazy protocol witness table cache variable for type ConnectionPolicyRoute and conformance ConnectionPolicyRoute;
  if (!lazy protocol witness table cache variable for type ConnectionPolicyRoute and conformance ConnectionPolicyRoute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConnectionPolicyRoute and conformance ConnectionPolicyRoute);
  }
  return result;
}

__n128 OUTLINED_FUNCTION_0_26()
{
  return v0[5];
}

uint64_t static WiFiRecord.channelInfo(channel:frequencyBand:channelInMHz:)(uint64_t a1, uint64_t a2, void *a3)
{
  if (a1 < 1) {
    return 0x6E776F6E6B6E75;
  }
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  v5._char countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._char countAndFlagsBits = 10272;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  v7._char countAndFlagsBits = a2;
  v7._object = a3;
  String.append(_:)(v7);
  OUTLINED_FUNCTION_2_4();
  v8._char countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._char countAndFlagsBits = 695879757;
  v9._object = (void *)0xE400000000000000;
  String.append(_:)(v9);
  return 0x206C656E6E616843;
}

uint64_t static WiFiPhyModeApple80211.wifiPhyMode(_:)(int a1)
{
  OUTLINED_FUNCTION_9_9();
  BOOL v6 = (v4 & 0x22) == 0;
  if ((v4 & 0x22) != 0) {
    uint64_t v7 = v1;
  }
  else {
    uint64_t v7 = v5;
  }
  if ((v4 & 4) != 0)
  {
    OUTLINED_FUNCTION_5_15();
    uint64_t v7 = v7 & 0xFFFFFFFFFFFFLL | 0x62000000000000;
    swift_bridgeObjectRelease();
    if ((a1 & 8) == 0)
    {
LABEL_6:
      if ((a1 & 0x40) == 0) {
        goto LABEL_7;
      }
      goto LABEL_13;
    }
  }
  else if ((a1 & 8) == 0)
  {
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_8_8();
  if ((a1 & 0x40) == 0)
  {
LABEL_7:
    if ((a1 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_14;
  }
LABEL_13:
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_8_8();
  if ((a1 & 0x10) == 0)
  {
LABEL_8:
    if ((a1 & 0x80) == 0) {
      goto LABEL_9;
    }
LABEL_15:
    OUTLINED_FUNCTION_5_15();
    uint64_t v7 = v7 & 0xFFFFFFFFFFFFLL | 0x6361000000000000;
    swift_bridgeObjectRelease();
    if ((a1 & 0x100) == 0) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
LABEL_14:
  OUTLINED_FUNCTION_5_15();
  uint64_t v7 = v7 & 0xFFFFFFFFFFFFLL | 0x6E000000000000;
  swift_bridgeObjectRelease();
  if ((a1 & 0x80) != 0) {
    goto LABEL_15;
  }
LABEL_9:
  if ((a1 & 0x100) != 0)
  {
LABEL_16:
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_3_21();
  }
LABEL_17:
  if ((a1 & 0x400) != 0)
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_3_21();
  }
  else
  {
    if (!(!v6 & v3))
    {
      uint64_t v1 = 0x6E776F6E6B6E75;
      switch(a1)
      {
        case 0:
          goto LABEL_36;
        case 1:
        case 3:
        case 5:
        case 6:
        case 7:
          goto LABEL_27;
        case 2:
          OUTLINED_FUNCTION_9_9();
          goto LABEL_36;
        case 4:
          OUTLINED_FUNCTION_0_27();
          uint64_t v1 = 0x62776F6E6B6E75;
          goto LABEL_36;
        case 8:
          goto LABEL_34;
        default:
          JUMPOUT(0);
      }
    }
    switch(a1)
    {
      case 16:
        OUTLINED_FUNCTION_0_27();
        uint64_t v1 = v1 & 0xFFFFFFFFFFFFLL | 0x6E000000000000;
        goto LABEL_36;
      case 32:
        goto LABEL_36;
      case 64:
LABEL_34:
        OUTLINED_FUNCTION_0_27();
        uint64_t v1 = v1 & 0xFFFFFFFFFFFFLL | 0x67000000000000;
        goto LABEL_36;
      case 128:
        OUTLINED_FUNCTION_0_27();
        uint64_t v1 = v1 & 0xFFFFFFFFFFFFLL | 0x6361000000000000;
        goto LABEL_36;
      case 256:
LABEL_28:
        OUTLINED_FUNCTION_0_27();
        uint64_t v1 = v1 & 0xFFFFFFFFFFFFLL | 0x7861000000000000;
LABEL_36:
        swift_bridgeObjectRelease();
        return v1;
    }
  }
LABEL_27:
  if (a1 == 1024) {
    goto LABEL_28;
  }
  return v7;
}

id static WiFiRecordRepresentation.wiFiRecordRepresentation(from:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v16 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  HIDWORD(v15) = *(unsigned __int8 *)(a1 + 56);
  uint64_t v12 = type metadata accessor for WiFiRecord(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1 + *(int *)(v12 + 40), v2);
  id v13 = objc_allocWithZone((Class)type metadata accessor for WiFiRecordRepresentation(0));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return WiFiRecordRepresentation.init(rssi:snr:cca:channelInfo:phyMode:isCaptive:timestamp:)(v16, v6, v7, v8, v9, v10, v11, SBYTE4(v15), (uint64_t)v5);
}

SiriNetwork::WiFiAssertionType_optional __swiftcall WiFiAssertionType.init(rawValue:)(Swift::Int rawValue)
{
  unsigned int v2 = 0x2010003u >> (8 * rawValue);
  if ((unint64_t)rawValue >= 4) {
    LOBYTE(v2) = 3;
  }
  unsigned char *v1 = v2;
  return (SiriNetwork::WiFiAssertionType_optional)rawValue;
}

uint64_t WiFiAssertionType.rawValue.getter()
{
  return *v0 + 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance WiFiAssertionType()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance WiFiAssertionType(uint64_t a1)
{
  specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance WiFiAssertionType(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

SiriNetwork::WiFiAssertionType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance WiFiAssertionType(Swift::Int *a1)
{
  return WiFiAssertionType.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance WiFiAssertionType@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = WiFiAssertionType.rawValue.getter();
  *a1 = result;
  return result;
}

uint64_t WiFiRecord.rssi.getter()
{
  return *(void *)v0;
}

uint64_t WiFiRecord.snr.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t WiFiRecord.cca.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t WiFiRecord.channelInfo.getter()
{
  return OUTLINED_FUNCTION_23_0();
}

uint64_t WiFiRecord.phyMode.getter()
{
  return OUTLINED_FUNCTION_23_0();
}

uint64_t WiFiRecord.isCaptive.getter()
{
  return *(unsigned __int8 *)(v0 + 56);
}

uint64_t WiFiRecord.timestamp.getter()
{
  type metadata accessor for WiFiRecord(0);
  type metadata accessor for Date();
  OUTLINED_FUNCTION_0_7();
  uint64_t v0 = OUTLINED_FUNCTION_23_0();

  return v1(v0);
}

uint64_t type metadata accessor for WiFiRecord(uint64_t a1)
{
  return type metadata accessor for NetworkConnectionProvider.StateUpdateHandler(a1, (uint64_t *)&type metadata singleton initialization cache for WiFiRecord);
}

uint64_t WiFiRecord.debugDescription.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v36 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44[0] = 0x203A69737372;
  v44[1] = 0xE600000000000000;
  uint64_t v43 = *v0;
  v4._char countAndFlagsBits = OUTLINED_FUNCTION_6_11();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  uint64_t v41 = (void *)v44[1];
  uint64_t v42 = v44[0];
  v44[0] = 0x203A726E73;
  v44[1] = 0xE500000000000000;
  uint64_t v43 = v0[1];
  v5._char countAndFlagsBits = OUTLINED_FUNCTION_6_11();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  uint64_t v6 = (void *)v44[1];
  uint64_t v40 = v44[0];
  v44[0] = 0x203A616363;
  v44[1] = 0xE500000000000000;
  uint64_t v43 = v0[2];
  v7._char countAndFlagsBits = OUTLINED_FUNCTION_6_11();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  uint64_t v8 = (void *)v44[1];
  uint64_t v39 = v44[0];
  strcpy((char *)v44, "channelInfo: ");
  HIWORD(v44[1]) = -4864;
  uint64_t v9 = v0[3];
  uint64_t v10 = (void *)v0[4];
  swift_bridgeObjectRetain();
  v11._char countAndFlagsBits = v9;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  uint64_t v12 = (void *)v44[1];
  uint64_t v38 = v44[0];
  strcpy((char *)v44, "phyMode: ");
  WORD1(v44[1]) = 0;
  HIDWORD(v44[1]) = -385875968;
  uint64_t v13 = v0[5];
  int v14 = (void *)v0[6];
  swift_bridgeObjectRetain();
  v15._char countAndFlagsBits = v13;
  v15._object = v14;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  uint64_t v16 = (void *)v44[1];
  uint64_t v37 = v44[0];
  strcpy((char *)v44, "isCaptive: ");
  HIDWORD(v44[1]) = -352321536;
  if (*((unsigned char *)v0 + 56)) {
    uint64_t v17 = 1702195828;
  }
  else {
    uint64_t v17 = 0x65736C6166;
  }
  if (*((unsigned char *)v0 + 56)) {
    unint64_t v18 = 0xE400000000000000;
  }
  else {
    unint64_t v18 = 0xE500000000000000;
  }
  unint64_t v19 = v18;
  String.append(_:)(*(Swift::String *)&v17);
  swift_bridgeObjectRelease();
  uint64_t v20 = (void *)v44[1];
  uint64_t v36 = v44[0];
  strcpy((char *)v44, "timestamp: ");
  HIDWORD(v44[1]) = -352321536;
  type metadata accessor for WiFiRecord(0);
  static Locale.current.getter();
  uint64_t v21 = type metadata accessor for Locale();
  __swift_storeEnumTagSinglePayload((uint64_t)v3, 0, 1, v21);
  uint64_t v22 = Date.description(with:)();
  int v24 = v23;
  outlined destroy of Locale?((uint64_t)v3);
  v25._char countAndFlagsBits = v22;
  v25._object = v24;
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  uint64_t v27 = v44[0];
  uint64_t v26 = (void *)v44[1];
  v44[0] = 0;
  v44[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(38);
  swift_bridgeObjectRelease();
  strcpy((char *)v44, "WiFiRecord: ");
  BYTE5(v44[1]) = 0;
  HIWORD(v44[1]) = -5120;
  v28._char countAndFlagsBits = v42;
  v28._object = v41;
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2_4();
  v29._char countAndFlagsBits = v40;
  v29._object = v6;
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2_4();
  v30._char countAndFlagsBits = v39;
  v30._object = v8;
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2_4();
  v31._char countAndFlagsBits = v38;
  v31._object = v12;
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2_4();
  v32._char countAndFlagsBits = v37;
  v32._object = v16;
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2_4();
  v33._char countAndFlagsBits = v36;
  v33._object = v20;
  String.append(_:)(v33);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2_4();
  v34._char countAndFlagsBits = v27;
  v34._object = v26;
  String.append(_:)(v34);
  swift_bridgeObjectRelease();
  return v44[0];
}

uint64_t outlined destroy of Locale?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t WiFiRecordRepresentation.rssi.getter()
{
  return OUTLINED_FUNCTION_7_6(OBJC_IVAR___SNWiFiRecordInternal_rssi);
}

uint64_t WiFiRecordRepresentation.snr.getter()
{
  return OUTLINED_FUNCTION_7_6(OBJC_IVAR___SNWiFiRecordInternal_snr);
}

uint64_t WiFiRecordRepresentation.cca.getter()
{
  return OUTLINED_FUNCTION_7_6(OBJC_IVAR___SNWiFiRecordInternal_cca);
}

uint64_t WiFiRecordRepresentation.channelInfo.getter()
{
  return OUTLINED_FUNCTION_23_0();
}

id @objc WiFiRecordRepresentation.channelInfo.getter(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = a3();
  Swift::String v4 = (void *)MEMORY[0x2611B2220](v3);
  swift_bridgeObjectRelease();

  return v4;
}

uint64_t WiFiRecordRepresentation.phyMode.getter()
{
  return OUTLINED_FUNCTION_23_0();
}

uint64_t WiFiRecordRepresentation.isCaptive.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR___SNWiFiRecordInternal_isCaptive);
}

uint64_t WiFiRecordRepresentation.timestamp.getter()
{
  type metadata accessor for Date();
  OUTLINED_FUNCTION_0_7();
  uint64_t v0 = OUTLINED_FUNCTION_23_0();

  return v1(v0);
}

id WiFiRecordRepresentation.__allocating_init(rssi:snr:cca:channelInfo:phyMode:isCaptive:timestamp:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9)
{
  id v18 = objc_allocWithZone(v9);
  return WiFiRecordRepresentation.init(rssi:snr:cca:channelInfo:phyMode:isCaptive:timestamp:)(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

id WiFiRecordRepresentation.init(rssi:snr:cca:channelInfo:phyMode:isCaptive:timestamp:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9)
{
  *(void *)&v9[OBJC_IVAR___SNWiFiRecordInternal_rssi] = a1;
  *(void *)&v9[OBJC_IVAR___SNWiFiRecordInternal_snr] = a2;
  *(void *)&v9[OBJC_IVAR___SNWiFiRecordInternal_cca] = a3;
  uint64_t v10 = &v9[OBJC_IVAR___SNWiFiRecordInternal_channelInfo];
  *uint64_t v10 = a4;
  v10[1] = a5;
  Swift::String v11 = &v9[OBJC_IVAR___SNWiFiRecordInternal_phyMode];
  *Swift::String v11 = a6;
  v11[1] = a7;
  v9[OBJC_IVAR___SNWiFiRecordInternal_isCaptive] = a8;
  uint64_t v12 = &v9[OBJC_IVAR___SNWiFiRecordInternal_timestamp];
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void *)(v13 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v12, a9, v13);
  v17.receiver = v9;
  v17.super_class = (Class)type metadata accessor for WiFiRecordRepresentation(0);
  id v15 = objc_msgSendSuper2(&v17, sel_init);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a9, v13);
  return v15;
}

uint64_t type metadata accessor for WiFiRecordRepresentation(uint64_t a1)
{
  return type metadata accessor for NetworkConnectionProvider.StateUpdateHandler(a1, type metadata singleton initialization cache for WiFiRecordRepresentation);
}

id WiFiRecordRepresentation.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void WiFiRecordRepresentation.init()()
{
}

id WiFiRecordRepresentation.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for WiFiRecordRepresentation(0);
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t lazy protocol witness table accessor for type WiFiAssertionType and conformance WiFiAssertionType()
{
  unint64_t result = lazy protocol witness table cache variable for type WiFiAssertionType and conformance WiFiAssertionType;
  if (!lazy protocol witness table cache variable for type WiFiAssertionType and conformance WiFiAssertionType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WiFiAssertionType and conformance WiFiAssertionType);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for WiFiAssertionType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFE)
  {
    if (a2 + 2 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 2) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 3;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v5 = v6 - 3;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for WiFiAssertionType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25D743A38);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WiFiAssertionType()
{
  return &type metadata for WiFiAssertionType;
}

void *initializeBufferWithCopyOfBuffer for WiFiRecord(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *int v3 = *a2;
    int v3 = (void *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    long long v5 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    uint64_t v6 = a2[5];
    *(void *)(a1 + 32) = a2[4];
    *(void *)(a1 + 40) = v6;
    *(void *)(a1 + 48) = a2[6];
    uint64_t v7 = *(int *)(a3 + 40);
    uint64_t v8 = (uint64_t)a2 + v7;
    uint64_t v9 = a1 + v7;
    *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
    uint64_t v10 = type metadata accessor for Date();
    Swift::String v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v9, v8, v10);
  }
  return v3;
}

uint64_t destroy for WiFiRecord(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 40);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t initializeWithCopy for WiFiRecord(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v6 = *(int *)(a3 + 40);
  uint64_t v7 = a2 + v6;
  uint64_t v8 = a1 + v6;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v8, v7, v9);
  return a1;
}

uint64_t assignWithCopy for WiFiRecord(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v6 = *(int *)(a3 + 40);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for WiFiRecord(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v4 = *(int *)(a3 + 40);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for WiFiRecord(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v7;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v8 = *(int *)(a3 + 40);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for WiFiRecord(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25D743EE8);
}

uint64_t sub_25D743EE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 32);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for Date();
    uint64_t v9 = a1 + *(int *)(a3 + 40);
    return __swift_getEnumTagSinglePayload(v9, a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for WiFiRecord(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25D743F84);
}

uint64_t sub_25D743F84(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 32) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = v5 + *(int *)(a4 + 40);
    return __swift_storeEnumTagSinglePayload(v8, a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for WiFiRecord()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t ObjC metadata update function for WiFiRecordRepresentation()
{
  return type metadata accessor for WiFiRecordRepresentation(0);
}

uint64_t type metadata completion function for WiFiRecordRepresentation()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for WiFiRecordRepresentation(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for WiFiRecordRepresentation);
}

uint64_t dispatch thunk of WiFiRecordRepresentation.__allocating_init(rssi:snr:cca:channelInfo:phyMode:isCaptive:timestamp:)()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t OUTLINED_FUNCTION_6_11()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t OUTLINED_FUNCTION_7_6@<X0>(uint64_t a1@<X8>)
{
  return *(void *)(v1 + a1);
}

void destroy for ConnectionHTTPHeaderReport(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  int v2 = *(void **)(a1 + 32);
}

void *initializeWithCopy for ConnectionHTTPHeaderReport(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = (void *)a2[4];
  a1[4] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v6 = v5;
  return a1;
}

void *assignWithCopy for ConnectionHTTPHeaderReport(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)a2[4];
  uint64_t v5 = (void *)a1[4];
  a1[4] = v4;
  id v6 = v4;

  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ConnectionHTTPHeaderReport(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);

  return a1;
}

uint64_t getEnumTagSinglePayload for ConnectionHTTPHeaderReport(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 32);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConnectionHTTPHeaderReport(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ConnectionHTTPHeaderReport()
{
  return &type metadata for ConnectionHTTPHeaderReport;
}

uint64_t ConnectionHTTPHeaderReport.debugDescription.getter()
{
  if (v0[1])
  {
    uint64_t v1 = *v0;
    unint64_t v2 = (void *)v0[1];
  }
  else
  {
    uint64_t v1 = 0x6E776F6E6B6E75;
    unint64_t v2 = (void *)0xE700000000000000;
  }
  swift_bridgeObjectRetain();
  v3._char countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  if (v0[3])
  {
    uint64_t v4 = v0[2];
    uint64_t v5 = (void *)v0[3];
  }
  else
  {
    uint64_t v4 = 0x6E776F6E6B6E75;
    uint64_t v5 = (void *)0xE700000000000000;
  }
  swift_bridgeObjectRetain();
  v6._char countAndFlagsBits = v4;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(52);
  v7._object = (void *)0x800000025D7968D0;
  v7._char countAndFlagsBits = 0xD00000000000002ELL;
  String.append(_:)(v7);
  v8._char countAndFlagsBits = 0x2074736F48656361;
  v8._object = (void *)0xE800000000000000;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._char countAndFlagsBits = 8236;
  v9._object = (void *)0xE200000000000000;
  String.append(_:)(v9);
  v10._char countAndFlagsBits = 0x6E65674172657375;
  v10._object = (void *)0xEA00000000002074;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t ConnectionType.netConnectionType.getter()
{
  return dword_25D792D54[*v0];
}

uint64_t destroy for ConnectionInterfaceReport(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = *(void *)(a1 + 48);
  if (result != 1)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for ConnectionInterfaceReport(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  uint64_t v6 = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6 == 1)
  {
    memcpy((void *)(a1 + 40), (const void *)(a2 + 40), 0xF9uLL);
  }
  else
  {
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = v6;
    uint64_t v7 = *(void *)(a2 + 64);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(void *)(a1 + 64) = v7;
    *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
    uint64_t v8 = *(void *)(a2 + 112);
    *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
    *(void *)(a1 + 112) = v8;
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
    *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
    *(void *)(a1 + 176) = *(void *)(a2 + 176);
    *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
    *(_DWORD *)(a1 + 204) = *(_DWORD *)(a2 + 204);
    *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
    *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 212);
    *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
    *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
    LODWORD(v8) = *(_DWORD *)(a2 + 228);
    *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
    *(_DWORD *)(a1 + 228) = v8;
    uint64_t v9 = *(void *)(a2 + 240);
    *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
    *(void *)(a1 + 240) = v9;
    uint64_t v10 = *(void *)(a2 + 256);
    *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
    *(void *)(a1 + 256) = v10;
    LODWORD(v10) = *(_DWORD *)(a2 + 268);
    *(unsigned char *)(a1 + 272) = *(unsigned char *)(a2 + 272);
    *(_DWORD *)(a1 + 268) = v10;
    LODWORD(v10) = *(_DWORD *)(a2 + 276);
    *(unsigned char *)(a1 + 280) = *(unsigned char *)(a2 + 280);
    *(_DWORD *)(a1 + 276) = v10;
    LODWORD(v10) = *(_DWORD *)(a2 + 284);
    *(unsigned char *)(a1 + 288) = *(unsigned char *)(a2 + 288);
    *(_DWORD *)(a1 + 284) = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for ConnectionInterfaceReport(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  uint64_t v4 = *(void *)(a2 + 48);
  if (*(void *)(a1 + 48) != 1)
  {
    if (v4 != 1)
    {
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
      uint64_t v15 = *(void *)(a2 + 80);
      *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
      *(void *)(a1 + 80) = v15;
      uint64_t v16 = *(void *)(a2 + 96);
      *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
      *(void *)(a1 + 96) = v16;
      uint64_t v17 = *(void *)(a2 + 112);
      *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
      *(void *)(a1 + 112) = v17;
      uint64_t v18 = *(void *)(a2 + 128);
      *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
      *(void *)(a1 + 128) = v18;
      uint64_t v19 = *(void *)(a2 + 144);
      *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
      *(void *)(a1 + 144) = v19;
      uint64_t v20 = *(void *)(a2 + 160);
      *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
      *(void *)(a1 + 160) = v20;
      uint64_t v21 = *(void *)(a2 + 176);
      *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
      *(void *)(a1 + 176) = v21;
      uint64_t v22 = *(void *)(a2 + 192);
      *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
      *(void *)(a1 + 192) = v22;
      LODWORD(v22) = *(_DWORD *)(a2 + 204);
      *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
      *(_DWORD *)(a1 + 204) = v22;
      LODWORD(v22) = *(_DWORD *)(a2 + 212);
      *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
      *(_DWORD *)(a1 + 212) = v22;
      LODWORD(v22) = *(_DWORD *)(a2 + 220);
      *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
      *(_DWORD *)(a1 + 220) = v22;
      LODWORD(v22) = *(_DWORD *)(a2 + 228);
      *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
      *(_DWORD *)(a1 + 228) = v22;
      uint64_t v23 = *(void *)(a2 + 240);
      *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
      *(void *)(a1 + 240) = v23;
      uint64_t v24 = *(void *)(a2 + 256);
      *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
      *(void *)(a1 + 256) = v24;
      LODWORD(v24) = *(_DWORD *)(a2 + 268);
      *(unsigned char *)(a1 + 272) = *(unsigned char *)(a2 + 272);
      *(_DWORD *)(a1 + 268) = v24;
      LODWORD(v24) = *(_DWORD *)(a2 + 276);
      *(unsigned char *)(a1 + 280) = *(unsigned char *)(a2 + 280);
      *(_DWORD *)(a1 + 276) = v24;
      LODWORD(v24) = *(_DWORD *)(a2 + 284);
      *(unsigned char *)(a1 + 288) = *(unsigned char *)(a2 + 288);
      *(_DWORD *)(a1 + 284) = v24;
      return a1;
    }
    outlined destroy of ConnectionTCPInfoMetrics(a1 + 40);
    goto LABEL_6;
  }
  if (v4 == 1)
  {
LABEL_6:
    memcpy((void *)(a1 + 40), (const void *)(a2 + 40), 0xF9uLL);
    return a1;
  }
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  uint64_t v5 = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 80) = v5;
  uint64_t v6 = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 96) = v6;
  uint64_t v7 = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 112) = v7;
  uint64_t v8 = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(void *)(a1 + 128) = v8;
  uint64_t v9 = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(void *)(a1 + 144) = v9;
  uint64_t v10 = *(void *)(a2 + 160);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(void *)(a1 + 160) = v10;
  uint64_t v11 = *(void *)(a2 + 176);
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(void *)(a1 + 176) = v11;
  uint64_t v12 = *(void *)(a2 + 192);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  *(void *)(a1 + 192) = v12;
  LODWORD(v12) = *(_DWORD *)(a2 + 204);
  *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
  *(_DWORD *)(a1 + 204) = v12;
  LODWORD(v12) = *(_DWORD *)(a2 + 212);
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  *(_DWORD *)(a1 + 212) = v12;
  LODWORD(v12) = *(_DWORD *)(a2 + 220);
  *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
  *(_DWORD *)(a1 + 220) = v12;
  LODWORD(v12) = *(_DWORD *)(a2 + 228);
  *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
  *(_DWORD *)(a1 + 228) = v12;
  uint64_t v13 = *(void *)(a2 + 240);
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  *(void *)(a1 + 240) = v13;
  uint64_t v14 = *(void *)(a2 + 256);
  *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
  *(void *)(a1 + 256) = v14;
  LODWORD(v14) = *(_DWORD *)(a2 + 268);
  *(unsigned char *)(a1 + 272) = *(unsigned char *)(a2 + 272);
  *(_DWORD *)(a1 + 268) = v14;
  LODWORD(v14) = *(_DWORD *)(a2 + 276);
  *(unsigned char *)(a1 + 280) = *(unsigned char *)(a2 + 280);
  *(_DWORD *)(a1 + 276) = v14;
  LODWORD(v14) = *(_DWORD *)(a2 + 284);
  *(unsigned char *)(a1 + 288) = *(unsigned char *)(a2 + 288);
  *(_DWORD *)(a1 + 284) = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *__swift_memcpy289_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x121uLL);
}

uint64_t assignWithTake for ConnectionInterfaceReport(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  if (*(void *)(a1 + 48) != 1)
  {
    uint64_t v6 = *(void *)(a2 + 48);
    if (v6 != 1)
    {
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = v6;
      swift_bridgeObjectRelease();
      uint64_t v7 = *(void *)(a2 + 64);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(void *)(a1 + 64) = v7;
      swift_bridgeObjectRelease();
      *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
      *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      uint64_t v8 = *(void *)(a2 + 144);
      *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
      *(void *)(a1 + 144) = v8;
      *(void *)(a1 + 160) = *(void *)(a2 + 160);
      *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
      *(void *)(a1 + 176) = *(void *)(a2 + 176);
      *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
      *(void *)(a1 + 192) = *(void *)(a2 + 192);
      *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
      *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
      *(_DWORD *)(a1 + 204) = *(_DWORD *)(a2 + 204);
      *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
      *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 212);
      *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
      *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
      *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
      *(_DWORD *)(a1 + 228) = *(_DWORD *)(a2 + 228);
      *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
      *(void *)(a1 + 240) = *(void *)(a2 + 240);
      uint64_t v9 = *(void *)(a2 + 256);
      *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
      *(void *)(a1 + 256) = v9;
      LODWORD(v9) = *(_DWORD *)(a2 + 268);
      *(unsigned char *)(a1 + 272) = *(unsigned char *)(a2 + 272);
      *(_DWORD *)(a1 + 268) = v9;
      LODWORD(v9) = *(_DWORD *)(a2 + 276);
      *(unsigned char *)(a1 + 280) = *(unsigned char *)(a2 + 280);
      *(_DWORD *)(a1 + 276) = v9;
      LODWORD(v9) = *(_DWORD *)(a2 + 284);
      *(unsigned char *)(a1 + 288) = *(unsigned char *)(a2 + 288);
      *(_DWORD *)(a1 + 284) = v9;
      return a1;
    }
    outlined destroy of ConnectionTCPInfoMetrics(a1 + 40);
  }
  memcpy((void *)(a1 + 40), (const void *)(a2 + 40), 0xF9uLL);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConnectionInterfaceReport(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 289))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConnectionInterfaceReport(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 280) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(unsigned char *)(result + 288) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 289) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 289) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ConnectionInterfaceReport()
{
  return &type metadata for ConnectionInterfaceReport;
}

uint64_t ConnectionInterfaceReport.debugDescription.getter()
{
  uint64_t v1 = *(void *)v0;
  unint64_t v2 = *(void **)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void **)(v0 + 24);
  int v5 = *(_DWORD *)(v0 + 36);
  outlined init with take of ConnectionTCPInfoMetrics?(v0 + 40, (uint64_t)v36);
  uint64_t v37 = 0x20656D616ELL;
  unint64_t v38 = 0xE500000000000000;
  swift_bridgeObjectRetain();
  v6._char countAndFlagsBits = v1;
  v6._object = v2;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  uint64_t v31 = v37;
  uint64_t v7 = (void *)v38;
  uint64_t v37 = 0x2065707974;
  unint64_t v38 = 0xE500000000000000;
  swift_bridgeObjectRetain();
  v8._char countAndFlagsBits = v3;
  v8._object = v4;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  uint64_t v30 = v37;
  uint64_t v9 = (void *)v38;
  uint64_t v37 = 0;
  unint64_t v38 = 0xE000000000000000;
  _StringGuts.grow(_:)(17);
  v10._char countAndFlagsBits = 0x697463656E6E6F63;
  v10._object = (void *)0xEF20657079546E6FLL;
  String.append(_:)(v10);
  _print_unlocked<A, B>(_:_:)();
  uint64_t v11 = v37;
  uint64_t v12 = (void *)v38;
  uint64_t v37 = 0x207865646E69;
  unint64_t v38 = 0xE600000000000000;
  LODWORD(__src[0]) = v5;
  v13._char countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  uint64_t v14 = v37;
  uint64_t v15 = (void *)v38;
  uint64_t v37 = 0;
  unint64_t v38 = 0xE000000000000000;
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  unint64_t v34 = 0xD000000000000019;
  unint64_t v35 = 0x800000025D7956A0;
  outlined init with take of ConnectionTCPInfoMetrics?((uint64_t)v36, (uint64_t)&v37);
  if (_s11SiriNetwork24ConnectionTCPInfoMetricsVSgWOg((uint64_t)&v37) == 1)
  {
    unint64_t v16 = 0xE700000000000000;
    uint64_t v17 = 0x6E776F6E6B6E75;
  }
  else
  {
    outlined init with take of ConnectionTCPInfoMetrics?((uint64_t)v36, (uint64_t)__src);
    memcpy(v32, __src, sizeof(v32));
    outlined retain of ConnectionTCPInfoMetrics((uint64_t)__src);
    uint64_t v17 = String.init<A>(describing:)();
    unint64_t v16 = v18;
  }
  unint64_t v19 = v16;
  String.append(_:)(*(Swift::String *)&v17);
  swift_bridgeObjectRelease();
  uint64_t v20 = v34;
  uint64_t v21 = (void *)v35;
  __src[0] = 0;
  __src[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(64);
  v22._char countAndFlagsBits = 0xD00000000000002DLL;
  v22._object = (void *)0x800000025D796900;
  String.append(_:)(v22);
  v23._char countAndFlagsBits = v31;
  v23._object = v7;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_28();
  v24._char countAndFlagsBits = v30;
  v24._object = v9;
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_28();
  v25._char countAndFlagsBits = v11;
  v25._object = v12;
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_28();
  v26._char countAndFlagsBits = v14;
  v26._object = v15;
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_28();
  v27._char countAndFlagsBits = v20;
  v27._object = v21;
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  v28._char countAndFlagsBits = 93;
  v28._object = (void *)0xE100000000000000;
  String.append(_:)(v28);
  return __src[0];
}

void OUTLINED_FUNCTION_0_28()
{
  uint64_t v1 = 8236;
  unint64_t v2 = 0xE200000000000000;
  String.append(_:)(*(Swift::String *)&v1);
}

uint64_t dispatch thunk of CommunicationProtocol.init(withDelegate:connectionQueue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of CommunicationProtocol.safetyNetBuffer.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of CommunicationProtocol.safetyNetBuffer.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of CommunicationProtocol.safetyNetBuffer.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of CommunicationProtocol.pingInfo.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of CommunicationProtocol.pingInfo.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of CommunicationProtocol.pingInfo.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of CommunicationProtocol.queue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of CommunicationProtocol.queue.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of CommunicationProtocol.queue.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 80))();
}

uint64_t dispatch thunk of CommunicationProtocol.connectionStarted(fallingBack:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 88))();
}

uint64_t dispatch thunk of CommunicationProtocol.initialPayload(withBufferedInitialLength:forceReconnect:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 96))();
}

uint64_t dispatch thunk of CommunicationProtocol.updateBuffers(forInitialPayload:bufferedLength:forceReconnect:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 104))();
}

uint64_t dispatch thunk of CommunicationProtocol.bufferGeneralData(data:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 112))();
}

uint64_t dispatch thunk of CommunicationProtocol.getBufferedOutputDataToWrite()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 120))();
}

uint64_t dispatch thunk of CommunicationProtocol.bufferUncompressedData(data:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 128))();
}

uint64_t dispatch thunk of CommunicationProtocol.getBufferedUncompressedDataToWrite()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 136))();
}

uint64_t dispatch thunk of CommunicationProtocol.closeConnection(prepareForReconnect:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 144))();
}

uint64_t dispatch thunk of CommunicationProtocol.setSendPings(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 152))();
}

uint64_t dispatch thunk of CommunicationProtocol.checkPing()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 160))();
}

uint64_t dispatch thunk of CommunicationProtocol.resumePingTimer()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 168))();
}

uint64_t dispatch thunk of CommunicationProtocol.bytesAvailable(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 176))();
}

uint64_t dispatch thunk of CommunicationProtocol.hasBufferedDataOrOutstandPings()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 184))();
}

uint64_t dispatch thunk of CommunicationProtocol.compressData(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 192))();
}

uint64_t dispatch thunk of CommunicationProtocolDelegate.updateFirstByteReadTime()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of CommunicationProtocolDelegate.connectionSendData(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

void thunk for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> ()(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v3 = 0;
  }
  id v4 = (id)v3;
  (*(void (**)(uint64_t))(a2 + 16))(a2);
}

BOOL specialized Set.isEmpty.getter(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) != 0) {
    uint64_t v1 = __CocoaSet.count.getter();
  }
  else {
    uint64_t v1 = *(void *)(a1 + 16);
  }
  return v1 == 0;
}

uint64_t specialized Collection.first.getter(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v2 = __CocoaSet.startIndex.getter();
    uint64_t v4 = v3;
    char v5 = 1;
  }
  else
  {
    uint64_t v2 = specialized _NativeSet.startIndex.getter(a1);
    uint64_t v4 = v6;
    char v5 = v7 & 1;
  }
  uint64_t v8 = specialized Set.endIndex.getter(a1);
  uint64_t v10 = v9;
  char v12 = v11 & 1;
  BOOL v13 = specialized static Set.Index.== infix(_:_:)(v2, v4, v5, v8, v9, v11 & 1);
  outlined consume of Set<BackgroundConnection>.Index._Variant(v8, v10, v12);
  if (v13)
  {
    outlined consume of Set<BackgroundConnection>.Index._Variant(v2, v4, v5);
    return 0;
  }
  else
  {
    uint64_t v14 = specialized Set.subscript.getter(v2, v4, v5, a1);
    outlined consume of Set<BackgroundConnection>.Index._Variant(v2, v4, v5);
  }
  return v14;
}

uint64_t Connection.delegate.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR___SNConnectionInternal_delegate;
  OUTLINED_FUNCTION_24_2();
  return MEMORY[0x2611B37F0](v1);
}

uint64_t Connection.delegate.setter()
{
  return swift_unknownObjectRelease();
}

uint64_t key path setter for Connection.delegate : Connection()
{
  return Connection.delegate.setter();
}

uint64_t (*Connection.delegate.modify(void *a1))()
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR___SNConnectionInternal_delegate;
  v3[4] = v1;
  v3[5] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  v3[3] = MEMORY[0x2611B37F0](v5);
  return Connection.delegate.modify;
}

void *Connection.connectionConfiguration.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = (const void *)(v1 + OBJC_IVAR___SNConnectionInternal_connectionConfiguration);
  memcpy(__dst, v3, 0x204uLL);
  memcpy(a1, v3, 0x204uLL);
  return outlined retain of ConnectionConfiguration(__dst);
}

id Connection.connectionQueue.getter()
{
  return *(id *)(v0 + OBJC_IVAR___SNConnectionInternal_connectionQueue);
}

uint64_t Connection.activeBackgroundConnection.setter(uint64_t a1)
{
  *(void *)(v1 + OBJC_IVAR___SNConnectionInternal_activeBackgroundConnection) = a1;
  return swift_release();
}

uint64_t Connection.activeRoute.setter(uint64_t a1)
{
  __int16 v2 = *(_WORD *)(a1 + 112);
  uint64_t v3 = v1 + OBJC_IVAR___SNConnectionInternal_activeRoute;
  uint64_t v5 = *(void *)(v1 + OBJC_IVAR___SNConnectionInternal_activeRoute);
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR___SNConnectionInternal_activeRoute + 8);
  long long v6 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v3 = *(_OWORD *)a1;
  *(_OWORD *)(v3 + 16) = v6;
  long long v7 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v3 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v3 + 48) = v7;
  long long v8 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v3 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v3 + 80) = v8;
  *(_OWORD *)(v3 + 96) = *(_OWORD *)(a1 + 96);
  *(_WORD *)(v3 + 112) = v2;
  return outlined consume of ConnectionPolicyRoute?(v5, v4);
}

id Connection.__allocating_init(connectionConfiguration:connectionQueue:)(void *__src, void *a2)
{
  memcpy(__dst, __src, 0x204uLL);
  id v3 = objc_allocWithZone((Class)type metadata accessor for ConnectionInfo());
  id v4 = ConnectionInfo.init(connectionConfiguration:)(__dst);
  id v5 = objc_allocWithZone((Class)type metadata accessor for Connection());
  return Connection.init(connectionInfo:connectionQueue:)(v4, a2);
}

id Connection.__allocating_init(connectionInfo:connectionQueue:)()
{
  OUTLINED_FUNCTION_2_12();
  id v3 = objc_allocWithZone(v1);
  return Connection.init(connectionInfo:connectionQueue:)(v2, v0);
}

id Connection.init(connectionInfo:connectionQueue:)(void *a1, void *a2)
{
  id v3 = v2;
  swift_unknownObjectWeakInit();
  *(void *)&v3[OBJC_IVAR___SNConnectionInternal_activeBackgroundConnection] = 0;
  OUTLINED_FUNCTION_51_1((uint64_t)&v3[OBJC_IVAR___SNConnectionInternal_activeRoute], (__n128)xmmword_25D790AD0);
  v3[OBJC_IVAR___SNConnectionInternal_isCanceled] = 0;
  v3[OBJC_IVAR___SNConnectionInternal_isCanceledInternal] = 0;
  *(void *)&v3[OBJC_IVAR___SNConnectionInternal_connectionMethodUsedHistory] = MEMORY[0x263F8EE78];
  uint64_t v6 = OBJC_IVAR___SNConnectionInternal_networkManager;
  *(void *)&v3[OBJC_IVAR___SNConnectionInternal_networkManager] = 0;
  ConnectionInfo.connectionConfiguration.getter(__src);
  memcpy(&v3[OBJC_IVAR___SNConnectionInternal_connectionConfiguration], __src, 0x204uLL);
  *(void *)&v3[OBJC_IVAR___SNConnectionInternal_connectionQueue] = a2;
  uint64_t v7 = MEMORY[0x263F8EE88];
  *(void *)&v3[OBJC_IVAR___SNConnectionInternal_pendingBackgroundConnections] = MEMORY[0x263F8EE88];
  *(void *)&v3[OBJC_IVAR___SNConnectionInternal_pendingRoutes] = v7;
  *(void *)&v3[OBJC_IVAR___SNConnectionInternal_comatoseBackgroundConnections] = v7;
  *(void *)&v3[OBJC_IVAR___SNConnectionInternal_comatoseRoutes] = v7;
  *(void *)&v3[OBJC_IVAR___SNConnectionInternal_scheduledRoutes] = v7;
  long long v8 = v3;
  id v9 = a2;
  uint64_t v10 = dispatch_group_create();
  *(void *)&v8[OBJC_IVAR___SNConnectionInternal_activeConnectionGroup] = v10;
  dispatch_group_enter(v10);
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  char v11 = (void *)static NetworkManager.shared;
  char v12 = *(void **)&v3[v6];
  *(void *)&v3[v6] = static NetworkManager.shared;
  id v13 = v11;

  if (one-time initialization token for sharedNetworkAnalytics != -1) {
    swift_once();
  }
  uint64_t v14 = static NetworkAnalytics.sharedNetworkAnalytics;
  *(void *)&v8[OBJC_IVAR___SNConnectionInternal_networkAnalytics] = static NetworkAnalytics.sharedNetworkAnalytics;
  id v15 = v14;

  v18.receiver = v8;
  v18.super_class = (Class)type metadata accessor for Connection();
  id v16 = objc_msgSendSuper2(&v18, sel_init);

  return v16;
}

void Connection.init(connectionInfo:connectionQueue:networkManager:networkAnalytics:)()
{
  OUTLINED_FUNCTION_22();
  uint64_t v1 = v0;
  id v3 = v2;
  id v5 = v4;
  uint64_t v7 = v6;
  id v9 = v8;
  swift_unknownObjectWeakInit();
  *(void *)&v1[OBJC_IVAR___SNConnectionInternal_activeBackgroundConnection] = 0;
  OUTLINED_FUNCTION_51_1((uint64_t)&v1[OBJC_IVAR___SNConnectionInternal_activeRoute], (__n128)xmmword_25D790AD0);
  v1[OBJC_IVAR___SNConnectionInternal_isCanceled] = 0;
  v1[OBJC_IVAR___SNConnectionInternal_isCanceledInternal] = 0;
  *(void *)&v1[OBJC_IVAR___SNConnectionInternal_connectionMethodUsedHistory] = MEMORY[0x263F8EE78];
  uint64_t v10 = OBJC_IVAR___SNConnectionInternal_networkManager;
  *(void *)&v1[OBJC_IVAR___SNConnectionInternal_networkManager] = 0;
  ConnectionInfo.connectionConfiguration.getter(__src);
  memcpy(&v1[OBJC_IVAR___SNConnectionInternal_connectionConfiguration], __src, 0x204uLL);
  *(void *)&v1[OBJC_IVAR___SNConnectionInternal_connectionQueue] = v7;
  uint64_t v11 = MEMORY[0x263F8EE88];
  *(void *)&v1[OBJC_IVAR___SNConnectionInternal_pendingBackgroundConnections] = MEMORY[0x263F8EE88];
  *(void *)&v1[OBJC_IVAR___SNConnectionInternal_pendingRoutes] = v11;
  *(void *)&v1[OBJC_IVAR___SNConnectionInternal_comatoseBackgroundConnections] = v11;
  *(void *)&v1[OBJC_IVAR___SNConnectionInternal_comatoseRoutes] = v11;
  *(void *)&v1[OBJC_IVAR___SNConnectionInternal_scheduledRoutes] = v11;
  char v12 = v1;
  id v13 = v7;
  uint64_t v14 = dispatch_group_create();
  *(void *)&v12[OBJC_IVAR___SNConnectionInternal_activeConnectionGroup] = v14;
  dispatch_group_enter(v14);
  id v15 = *(void **)&v1[v10];
  *(void *)&v1[v10] = v5;
  id v16 = v5;

  *(void *)&v12[OBJC_IVAR___SNConnectionInternal_networkAnalytics] = v3;
  id v17 = v3;

  v18.receiver = v12;
  v18.super_class = (Class)type metadata accessor for Connection();
  objc_msgSendSuper2(&v18, sel_init);

  OUTLINED_FUNCTION_29();
}

id Connection.__deallocating_deinit()
{
  __int16 v2 = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v4 = OUTLINED_FUNCTION_19_1(v3);
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_82();
  if (!*(void *)&v0[OBJC_IVAR___SNConnectionInternal_activeBackgroundConnection]) {
    dispatch_group_leave(*(dispatch_group_t *)&v0[OBJC_IVAR___SNConnectionInternal_activeConnectionGroup]);
  }
  uint64_t v5 = OBJC_IVAR___SNConnectionInternal_networkAnalytics;
  uint64_t v6 = *(void **)&v0[OBJC_IVAR___SNConnectionInternal_networkAnalytics];
  uint64_t v7 = type metadata accessor for UUID();
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v7);
  id v8 = v6;
  NetworkAnalytics.setNetworkConnectionId(_:)();

  outlined destroy of DataCompressing?(v1, &demangling cache variable for type metadata for UUID?);
  id v9 = *(id *)&v2[v5];
  NetworkAnalytics.setConnectionProvider(_:)((Swift::String_optional)0);

  v11.receiver = v2;
  v11.super_class = (Class)type metadata accessor for Connection();
  return objc_msgSendSuper2(&v11, sel_dealloc);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Connection.start()()
{
  uint64_t v3 = v0;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v5 = OUTLINED_FUNCTION_19_1(v4);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v221 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = __swift_project_value_buffer(v8, (uint64_t)static Logger.siriNetwork);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (OUTLINED_FUNCTION_72_0(v11))
  {
    char v12 = (uint8_t *)OUTLINED_FUNCTION_2_0();
    *(_WORD *)char v12 = 0;
    _os_log_impl(&dword_25D6CC000, v10, v2, "Connection - Start: Starting connection", v12, 2u);
    OUTLINED_FUNCTION_69_1();
  }

  if (*(void *)((char *)v3 + OBJC_IVAR___SNConnectionInternal_activeBackgroundConnection))
  {
    id v13 = (void *)Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_9(v14))
    {
      id v15 = (_WORD *)OUTLINED_FUNCTION_2_0();
      OUTLINED_FUNCTION_55_0(v15);
      OUTLINED_FUNCTION_3_0(&dword_25D6CC000, v16, v17, "Connection - Start: Not starting connection because we already have an active one");
      OUTLINED_FUNCTION_23_4();
    }

    lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
    OUTLINED_FUNCTION_16_0();
    uint64_t v19 = 2;
LABEL_13:
    *(void *)(v18 + 8) = 0;
    *(void *)(v18 + 16) = 0;
    *(void *)uint64_t v18 = v19;
    *(_OWORD *)(v18 + 24) = xmmword_25D790FF0;
LABEL_14:
    swift_willThrow();
    return;
  }
  if (*((unsigned char *)v3 + OBJC_IVAR___SNConnectionInternal_isCanceledInternal))
  {
    uint64_t v20 = (void *)Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_9(v21))
    {
      Swift::String v22 = (_WORD *)OUTLINED_FUNCTION_2_0();
      OUTLINED_FUNCTION_55_0(v22);
      OUTLINED_FUNCTION_3_0(&dword_25D6CC000, v23, v24, "Connection - Start: Not starting connection because it was canceled");
      OUTLINED_FUNCTION_23_4();
    }

    lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
    OUTLINED_FUNCTION_16_0();
    uint64_t v19 = 1;
    goto LABEL_13;
  }
  id v25 = objc_msgSend(self, sel_sharedPreferences);
  unsigned __int8 v26 = objc_msgSend(v25, sel_isDictationHIPAACompliant);

  if (v26)
  {
    Swift::String v27 = (void *)Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_9(v28))
    {
      Swift::String v29 = (_WORD *)OUTLINED_FUNCTION_2_0();
      OUTLINED_FUNCTION_55_0(v29);
      OUTLINED_FUNCTION_3_0(&dword_25D6CC000, v30, v31, "Connection - Start: Not starting connection because we have HIPAA On-Device Dictation enabled");
      OUTLINED_FUNCTION_23_4();
    }

    lazy protocol witness table accessor for type ConnectionConfigurationError and conformance ConnectionConfigurationError();
    OUTLINED_FUNCTION_16_0();
    *Swift::String v32 = 1;
    goto LABEL_14;
  }
  Swift::String v33 = (void *)((char *)v3 + OBJC_IVAR___SNConnectionInternal_connectionConfiguration);
  uint64_t v34 = *(void *)((char *)v3 + OBJC_IVAR___SNConnectionInternal_connectionConfiguration + 392);
  if (!v34)
  {
LABEL_30:
    lazy protocol witness table accessor for type ConnectionConfigurationError and conformance ConnectionConfigurationError();
    OUTLINED_FUNCTION_16_0();
    *uint64_t v86 = 0;
    goto LABEL_14;
  }
  uint64_t v35 = v33[40];
  uint64_t v36 = v33[41];
  uint64_t v37 = v33[42];
  uint64_t v38 = v33[43];
  uint64_t v39 = v33[44];
  uint64_t v40 = v33[45];
  uint64_t v41 = v33[46];
  uint64_t v42 = v33[47];
  uint64_t v220 = *(void *)((char *)v3 + OBJC_IVAR___SNConnectionInternal_connectionConfiguration + 392);
  uint64_t v319 = v33[48];
  uint64_t v320 = v35;
  uint64_t v321 = v36;
  uint64_t v322 = v37;
  double v328 = *(double *)&v38;
  uint64_t v336 = v39;
  uint64_t v329 = v40;
  uint64_t v330 = v41;
  uint64_t v331 = v42;
  uint64_t v43 = (char *)v3 + OBJC_IVAR___SNConnectionInternal_connectionConfiguration;
  outlined copy of ConnectionPolicy?(v35, v36, v37, v38, v39, v40, v41, v42, v319, v220);
  uint64_t v44 = swift_bridgeObjectRetain();
  specialized Sequence.filter(_:)(v44);
  uint64_t v46 = *(void *)(v45 + 16);
  uint64_t v47 = swift_bridgeObjectRelease();
  if (!v46 && *((void *)v43 + 51) == 1)
  {
    OUTLINED_FUNCTION_16_5(v47, v48, v49, v50, v51, v52, v53, v54, v221, v222);
    goto LABEL_30;
  }
  char v233 = (uint64_t *)v43;
  uint64_t v55 = swift_bridgeObjectRetain();
  specialized Sequence.filter(_:)(v55);
  uint64_t v57 = static ConnectionPolicyRoute.policyTypePOPVerification(_:)(v56);
  swift_bridgeObjectRelease();
  if (!*(void *)(v57 + 16))
  {
    uint64_t v73 = swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_16_5(v73, v74, v75, v76, v77, v78, v79, v80, v221, v222);
    uint64_t v81 = (void *)Logger.logObject.getter();
    os_log_type_t v82 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_9(v82))
    {
      int v83 = (_WORD *)OUTLINED_FUNCTION_2_0();
      OUTLINED_FUNCTION_55_0(v83);
      OUTLINED_FUNCTION_3_0(&dword_25D6CC000, v84, v85, "Connection - Start: Not starting connection because we don't have acceptable routes");
      OUTLINED_FUNCTION_23_4();
    }

    goto LABEL_30;
  }
  uint64_t v318 = v34;
  uint64_t v221 = v1;
  uint64_t v58 = OBJC_IVAR___SNConnectionInternal_networkAnalytics;
  id v59 = *(id *)((char *)v3 + OBJC_IVAR___SNConnectionInternal_networkAnalytics);
  UUID.init()();
  uint64_t v60 = type metadata accessor for UUID();
  __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v60);
  NetworkAnalytics.setNetworkConnectionId(_:)();

  outlined destroy of DataCompressing?((uint64_t)v7, &demangling cache variable for type metadata for UUID?);
  uint64_t v61 = *v233;
  id v62 = *(id *)((char *)v3 + v58);
  uint64_t v292 = v61;
  Swift::String v63 = ConnectionProtocolTechnology.provider()();
  NetworkAnalytics.setConnectionProvider(_:)((Swift::String_optional)v63);

  swift_bridgeObjectRelease();
  unint64_t v64 = static ConnectionPolicyRoute.groupedRoutesAndSortedByPriority(_:)(v57);
  swift_bridgeObjectRelease();
  id v65 = (id)v336;
  if (v336)
  {
    OUTLINED_FUNCTION_85_1();
    double v68 = *(double *)&static ConnectionPolicy.maxGlobalTimeout;
    uint64_t v87 = OUTLINED_FUNCTION_27_4();
    OUTLINED_FUNCTION_32_3(v87, v88, v89, v90, (uint64_t)v65, v91, v92, v93, v221, v222);
  }
  else
  {
    uint64_t v66 = *(void *)&v328;
    double v67 = v328;
    OUTLINED_FUNCTION_85_1();
    double v68 = *(double *)&static ConnectionPolicy.maxGlobalTimeout;
    OUTLINED_FUNCTION_32_3(v320, v321, v322, v66, (uint64_t)v65, v69, v70, v71, v319, v318);
    if (v68 >= v67) {
      double v68 = v67;
    }
  }
  uint64_t v232 = &v334[264];
  double v335 = 0.0;
  uint64_t v94 = &OBJC_IVAR___SNConnectionTCPInfoMetrics__duplicateBytesReceived;
  uint64_t v237 = v64[2];
  if (v237)
  {
    unint64_t v95 = 0;
    uint64_t v240 = OBJC_IVAR___SNConnectionInternal_networkManager;
    uint64_t v241 = &v333[33];
    uint64_t v234 = v64 + 4;
    uint64_t v230 = (unsigned __int8 *)(v233 + 33);
    uint64_t v231 = OBJC_IVAR___SNConnectionInternal_connectionQueue;
    uint64_t v228 = (unsigned __int8 *)(v233 + 37);
    char v229 = (unsigned __int8 *)(v233 + 35);
    uint64_t v226 = (unsigned __int8 *)v233 + 313;
    char v227 = (unsigned __int8 *)(v233 + 39);
    uint64_t v224 = (unsigned __int8 *)v233 + 515;
    char v225 = (unsigned __int8 *)v233 + 514;
    *(void *)&long long v72 = 134218242;
    long long v223 = v72;
    uint64_t v222 = MEMORY[0x263F8EE58] + 8;
    char v242 = v3;
    uint64_t v235 = v64;
    uint64_t v236 = v9;
    while (1)
    {
      if (v95 >= v64[2])
      {
        __break(1u);
        goto LABEL_80;
      }
      unint64_t v239 = v95;
      uint64_t v96 = &v234[2 * v95];
      uint64_t v98 = *v96;
      uint64_t v97 = v96[1];
      swift_bridgeObjectRetain_n();
      uint64_t v99 = Logger.logObject.getter();
      os_log_type_t v100 = static os_log_type_t.default.getter();
      if (OUTLINED_FUNCTION_72_0(v100))
      {
        uint64_t v101 = swift_slowAlloc();
        *(void *)v334 = swift_slowAlloc();
        *(_DWORD *)uint64_t v101 = v223;
        *(void *)(v101 + 4) = v98;
        *(_WORD *)(v101 + 12) = 2080;
        uint64_t v102 = swift_bridgeObjectRetain();
        uint64_t v103 = MEMORY[0x2611B2390](v102, &type metadata for ConnectionPolicyRoute);
        unint64_t v105 = v104;
        swift_bridgeObjectRelease();
        *(void *)(v101 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v103, v105, (uint64_t *)v334);
        OUTLINED_FUNCTION_81_0();
        uint64_t v3 = v242;
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_25D6CC000, v99, (os_log_type_t)v64, "Connection - Start: Acceptable Routes for priority %ld: %s", (uint8_t *)v101, 0x16u);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_69_1();
        OUTLINED_FUNCTION_23_4();
      }
      else
      {

        OUTLINED_FUNCTION_81_0();
      }
      uint64_t v106 = *(void *)(v97 + 16);
      if (v106)
      {
        swift_bridgeObjectRetain();
        uint64_t v107 = (unsigned char *)(v97 + 144);
        uint64_t v108 = MEMORY[0x263F8EE78];
        do
        {
          if ((*v107 & 1) == 0)
          {
            uint64_t v109 = *((void *)v107 - 1);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
              uint64_t v108 = v111;
            }
            unint64_t v110 = *(void *)(v108 + 16);
            if (v110 >= *(void *)(v108 + 24) >> 1)
            {
              specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
              uint64_t v108 = v112;
            }
            *(void *)(v108 + 16) = v110 + 1;
            *(void *)(v108 + 8 * v110 + 32) = v109;
          }
          v107 += 120;
          --v106;
        }
        while (v106);
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v108 = MEMORY[0x263F8EE78];
      }
      uint64_t v113 = *(void *)(v108 + 16);
      if (v113)
      {
        double v114 = *(double *)(v108 + 32);
        uint64_t v115 = v113 - 1;
        if (v115)
        {
          uint64_t v116 = (double *)(v108 + 40);
          do
          {
            double v117 = *v116++;
            double v118 = v117;
            if (v114 < v117) {
              double v114 = v118;
            }
            --v115;
          }
          while (v115);
        }
        swift_bridgeObjectRelease();
        double v119 = v335;
        if (v114 > 5.0) {
          double v114 = 5.0;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        double v119 = v335;
        double v114 = 0.0;
      }
      if (v119 != 0.0 && v68 <= v119) {
        break;
      }
      uint64_t v94 = (int *)static ConnectionPolicyRoute.prioritizedPOPRoutes(_:)(v97);
      swift_bridgeObjectRelease();
      uint64_t v121 = *((void *)v94 + 2);
      if (v121)
      {
        int v122 = v233;
        uint64_t v296 = v233[1];
        uint64_t v295 = v233[2];
        uint64_t v324 = v233[3];
        uint64_t v294 = v233[4];
        uint64_t v323 = v233[5];
        uint64_t v123 = v233[7];
        uint64_t v293 = v233[6];
        uint64_t v125 = v233[8];
        uint64_t v124 = v233[9];
        uint64_t v126 = v233[10];
        uint64_t v127 = v233[11];
        int v128 = *((unsigned __int8 *)v233 + 96);
        int v129 = *((unsigned __int8 *)v233 + 97);
        int v130 = *((unsigned __int8 *)v233 + 98);
        int v131 = *((unsigned __int8 *)v233 + 99);
        os_log_type_t v132 = (void *)v233[13];
        int v133 = *((unsigned __int8 *)v233 + 112);
        int v134 = *((unsigned __int8 *)v233 + 113);
        int v135 = *((unsigned __int8 *)v233 + 114);
        uint64_t v136 = v233[15];
        int v137 = *((unsigned __int8 *)v233 + 128);
        uint64_t v138 = v233[17];
        uint64_t v139 = v233[18];
        uint64_t v140 = v233[19];
        uint64_t v141 = v233[20];
        uint64_t v143 = v233[21];
        uint64_t v142 = v233[22];
        uint64_t v326 = v121;
        uint64_t v145 = v233[23];
        uint64_t v144 = v233[24];
        int v146 = *((unsigned __int8 *)v233 + 200);
        int v147 = *((unsigned __int8 *)v233 + 201);
        uint64_t v148 = v233[26];
        *(void *)v334 = v292;
        *(void *)&v334[8] = v296;
        *(void *)&v334[16] = v295;
        *(void *)&v334[24] = v324;
        *(void *)&v334[32] = v294;
        *(void *)&v334[40] = v323;
        *(void *)&v334[48] = v293;
        uint64_t v317 = v123;
        *(void *)&v334[56] = v123;
        uint64_t v290 = v126;
        uint64_t v291 = v125;
        *(void *)&v334[64] = v125;
        uint64_t v316 = v124;
        *(void *)&v334[72] = v124;
        *(void *)&v334[80] = v126;
        uint64_t v315 = v127;
        *(void *)&v334[88] = v127;
        int v289 = v128;
        v334[96] = v128;
        int v288 = v129;
        v334[97] = v129;
        int v287 = v130;
        v334[98] = v130;
        int v286 = v131;
        v334[99] = v131;
        id v314 = v132;
        *(void *)&v334[104] = v132;
        int v285 = v133;
        v334[112] = v133;
        int v284 = v134;
        v334[113] = v134;
        int v283 = v135;
        v334[114] = v135;
        uint64_t v282 = v136;
        *(void *)&v334[120] = v136;
        int v281 = v137;
        v334[128] = v137;
        *(void *)&v334[136] = v138;
        *(void *)&v334[144] = v139;
        uint64_t v279 = v143;
        uint64_t v280 = v140;
        *(void *)&v334[152] = v140;
        uint64_t v313 = v141;
        *(void *)&v334[160] = v141;
        *(void *)&v334[168] = v143;
        uint64_t v312 = v142;
        *(void *)&v334[176] = v142;
        uint64_t v278 = v145;
        *(void *)&v334[184] = v145;
        uint64_t v327 = v144;
        *(void *)&v334[192] = v144;
        int v277 = v146;
        v334[200] = v146;
        int v276 = v147;
        v334[201] = v147;
        uint64_t v275 = v148;
        *(void *)&v334[208] = v148;
        int v274 = *((unsigned __int8 *)v233 + 216);
        v334[216] = v274;
        uint64_t v273 = v233[28];
        *(void *)&v334[224] = v273;
        int v272 = *((unsigned __int8 *)v233 + 232);
        v334[232] = v272;
        uint64_t v271 = v233[30];
        *(void *)&v334[240] = v271;
        int v270 = *((unsigned __int8 *)v233 + 248);
        v334[248] = v270;
        uint64_t v149 = v232;
        int v269 = *v230;
        *uint64_t v232 = v269;
        uint64_t v150 = v122[32];
        uint64_t v267 = v122[34];
        uint64_t v268 = v150;
        *(void *)&v334[256] = v150;
        *(void *)&v334[272] = v267;
        int v266 = *v229;
        v149[16] = v266;
        int v265 = *v228;
        v149[32] = v265;
        uint64_t v151 = v122[36];
        uint64_t v263 = v122[38];
        uint64_t v264 = v151;
        *(void *)&v334[288] = v151;
        *(void *)&v334[304] = v263;
        int v262 = *v227;
        v149[48] = v262;
        int v261 = *v226;
        v334[313] = v261;
        *(void *)&v334[320] = v320;
        *(void *)&v334[328] = v321;
        *(void *)&v334[336] = v322;
        *(double *)&v334[344] = v328;
        *(void *)&v334[352] = v336;
        *(void *)&v334[360] = v329;
        *(void *)&v334[368] = v330;
        *(void *)&v334[376] = v331;
        *(void *)&v334[384] = v319;
        *(void *)&v334[392] = v318;
        uint64_t v152 = v122[50];
        uint64_t v259 = v122[51];
        uint64_t v260 = v152;
        *(void *)&v334[400] = v152;
        *(void *)&v334[408] = v259;
        uint64_t v153 = v122[52];
        uint64_t v257 = v122[53];
        uint64_t v258 = v153;
        *(void *)&v334[416] = v153;
        *(void *)&v334[424] = v257;
        uint64_t v154 = v122[54];
        uint64_t v255 = v122[55];
        uint64_t v256 = v154;
        *(void *)&v334[432] = v154;
        *(void *)&v334[440] = v255;
        uint64_t v155 = v122[56];
        uint64_t v253 = v122[57];
        uint64_t v254 = v155;
        *(void *)&v334[448] = v155;
        *(void *)&v334[456] = v253;
        uint64_t v156 = v122[58];
        uint64_t v251 = v122[59];
        uint64_t v252 = v156;
        *(void *)&v334[464] = v156;
        *(void *)&v334[472] = v251;
        uint64_t v157 = v122[60];
        uint64_t v249 = v122[61];
        uint64_t v250 = v157;
        *(void *)&v334[480] = v157;
        *(void *)&v334[488] = v249;
        uint64_t v158 = v122[62];
        uint64_t v247 = v122[63];
        uint64_t v248 = v158;
        *(void *)&v334[496] = v158;
        *(void *)&v334[504] = v247;
        int v246 = *((unsigned __int16 *)v122 + 256);
        *(_WORD *)&v334[512] = v246;
        int v245 = *v225;
        v334[514] = v245;
        uint64_t v298 = v326 - 1;
        int v244 = *v224;
        v334[515] = v244;
        uint64_t v238 = v94;
        uint64_t v159 = v94 + 18;
        id v243 = *(id *)((char *)v3 + v231);
        while (1)
        {
          uint64_t v160 = *((void *)v159 - 4);
          uint64_t v311 = *((void *)v159 - 5);
          uint64_t v161 = *((void *)v159 - 2);
          uint64_t v310 = *((void *)v159 - 3);
          uint64_t v309 = *((void *)v159 - 1);
          uint64_t v162 = *((void *)v159 + 1);
          uint64_t v308 = *(void *)v159;
          uint64_t v163 = *((void *)v159 + 3);
          uint64_t v307 = *((void *)v159 + 2);
          uint64_t v306 = *((unsigned __int8 *)v159 + 32);
          uint64_t v164 = *((void *)v159 + 6);
          uint64_t v305 = *((void *)v159 + 5);
          uint64_t v304 = *((unsigned __int8 *)v159 + 56);
          int v303 = *((unsigned __int8 *)v159 + 72) | (*((unsigned __int8 *)v159 + 73) << 8);
          uint64_t v297 = v159;
          uint64_t v302 = *((void *)v159 + 8);
          uint64_t v300 = v164;
          swift_bridgeObjectRetain();
          uint64_t v301 = v160;
          swift_bridgeObjectRetain();
          uint64_t v299 = v161;
          swift_bridgeObjectRetain();
          uint64_t v326 = v162;
          swift_bridgeObjectRetain();
          uint64_t v325 = v163;
          swift_bridgeObjectRetain();
          uint64_t v165 = OUTLINED_FUNCTION_27_4();
          outlined copy of ConnectionPolicy?(v165, v166, v167, v168, v336, v329, v330, v331, v223, *((uint64_t *)&v223 + 1));
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          outlined retain of ConnectionConfiguration(v334);
          uint64_t v169 = v324;
          swift_bridgeObjectRetain();
          uint64_t v170 = v323;
          swift_bridgeObjectRetain();
          uint64_t v171 = v317;
          swift_bridgeObjectRetain();
          uint64_t v172 = v316;
          swift_bridgeObjectRetain();
          uint64_t v173 = v315;
          swift_bridgeObjectRetain();
          id v174 = v314;
          id v175 = v314;
          swift_bridgeObjectRetain();
          uint64_t v176 = v312;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          LOWORD(v223) = v246;
          uint64_t v222 = v247;
          uint64_t v221 = v248;
          outlined consume of ConnectionPolicyRoute?(v260, v259);
          v333[50] = v311;
          v333[52] = v310;
          v333[54] = v309;
          v333[55] = v308;
          v333[57] = v307;
          v333[59] = v306;
          v333[60] = v305;
          v333[62] = v304;
          v333[63] = v302;
          LOWORD(v333[64]) = v303;
          v333[56] = v326;
          v333[58] = v325;
          v333[0] = v292;
          v333[1] = v296;
          v333[2] = v295;
          v333[3] = v169;
          v333[4] = v294;
          v333[5] = v170;
          v333[6] = v293;
          v333[7] = v171;
          v333[8] = v291;
          v333[9] = v172;
          v333[10] = v290;
          v333[11] = v173;
          LOBYTE(v333[12]) = v289;
          BYTE1(v333[12]) = v288;
          BYTE2(v333[12]) = v287;
          BYTE3(v333[12]) = v286;
          v333[13] = v174;
          LOBYTE(v333[14]) = v285;
          BYTE1(v333[14]) = v284;
          BYTE2(v333[14]) = v283;
          v333[15] = v282;
          LOBYTE(v333[16]) = v281;
          v333[17] = v138;
          v333[18] = v139;
          v333[19] = v280;
          v333[20] = v313;
          v333[21] = v279;
          v333[22] = v176;
          v333[23] = v278;
          v333[24] = v327;
          LOBYTE(v333[25]) = v277;
          BYTE1(v333[25]) = v276;
          v333[26] = v275;
          LOBYTE(v333[27]) = v274;
          v333[28] = v273;
          LOBYTE(v333[29]) = v272;
          v333[30] = v271;
          LOBYTE(v333[31]) = v270;
          char v177 = v241;
          *uint64_t v241 = v269;
          v333[32] = v268;
          v333[34] = v267;
          v177[16] = v266;
          v177[32] = v265;
          v333[36] = v264;
          v333[38] = v263;
          v177[48] = v262;
          BYTE1(v333[39]) = v261;
          uint64_t v178 = v320;
          v333[40] = v320;
          uint64_t v179 = v321;
          v333[41] = v321;
          uint64_t v180 = v322;
          v333[42] = v322;
          *(double *)&v333[43] = v328;
          v333[44] = v336;
          v333[45] = v329;
          v333[46] = v330;
          v333[47] = v331;
          uint64_t v181 = v319;
          v333[48] = v319;
          uint64_t v182 = v318;
          v333[49] = v318;
          v333[51] = v301;
          v333[53] = v299;
          v333[61] = v300;
          BYTE2(v333[64]) = v245;
          BYTE3(v333[64]) = v244;
          outlined retain of ConnectionConfiguration(v333);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_32_3(v178, v179, v180, *(uint64_t *)&v328, v336, v183, v184, v185, v181, v182);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          memcpy(v332, v333, 0x204uLL);
          uint64_t v3 = v242;
          char v186 = *(void **)((char *)v242 + v240);
          uint64_t v187 = one-time initialization token for sharedNetworkAnalytics;
          id v188 = v243;
          id v189 = v186;
          if (v187 != -1) {
            swift_once();
          }
          char v190 = static NetworkAnalytics.sharedNetworkAnalytics;
          type metadata accessor for BackgroundConnection();
          swift_allocObject();
          uint64_t v191 = BackgroundConnection.init(connectionConfiguration:connectionQueue:networkManager:networkAnalytics:)(v332, (uint64_t)v188, (uint64_t)v186, (uint64_t)v190);
          uint64_t v94 = v3;
          Connection.scheduleBackgroundConnection(_:after:)(v191, v119);
          swift_release();
          outlined release of ConnectionConfiguration(v333);
          if (!v298) {
            break;
          }
          --v298;
          uint64_t v159 = v297 + 30;
        }
      }
      swift_bridgeObjectRelease();
      id v65 = (id)v336;
      unint64_t v95 = v239 + 1;
      double v335 = v114 + v119;
      unint64_t v64 = v235;
      if (v239 + 1 == v237) {
        goto LABEL_71;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v192 = Logger.logObject.getter();
    os_log_type_t v193 = static os_log_type_t.default.getter();
    if (OUTLINED_FUNCTION_72_0(v193))
    {
      uint64_t v195 = swift_slowAlloc();
      *(void *)v334 = swift_slowAlloc();
      *(_DWORD *)uint64_t v195 = 134218754;
      v333[0] = v98;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v195 + 12) = 2048;
      swift_beginAccess();
      *(double *)os_log_type_t v333 = v335;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v195 + 22) = 2048;
      *(double *)os_log_type_t v333 = v68;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v195 + 32) = 2080;
      v333[0] = v97;
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ConnectionPolicyRoute]);
      uint64_t v196 = String.init<A>(describing:)();
      v333[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v196, v197, (uint64_t *)v334);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_81_0();
      uint64_t v3 = v242;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_25D6CC000, v192, OS_LOG_TYPE_DEFAULT, "Connection - Start: Skipping routes with priority %ld because it would take too long %f >= %f: %s", (uint8_t *)v195, 0x2Au);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_69_1();
      OUTLINED_FUNCTION_23_4();
    }
    else
    {

      OUTLINED_FUNCTION_81_0();
    }
    id v65 = (id)v336;
  }
  else
  {
LABEL_71:
    swift_bridgeObjectRelease();
  }
  uint64_t v198 = v232;
  uint64_t v199 = v233;
  *uint64_t v232 = *((unsigned char *)v233 + 264);
  v198[16] = *((unsigned char *)v199 + 280);
  v198[32] = *((unsigned char *)v199 + 296);
  v198[48] = *((unsigned char *)v199 + 312);
  uint64_t v200 = v199[11];
  *(void *)v334 = v292;
  *(void *)&v334[88] = v200;
  v334[96] = *((unsigned char *)v199 + 96);
  v334[97] = *((unsigned char *)v199 + 97);
  v334[98] = *((unsigned char *)v199 + 98);
  v334[99] = *((unsigned char *)v199 + 99);
  *(void *)&v334[104] = v199[13];
  v334[112] = *((unsigned char *)v199 + 112);
  v334[113] = *((unsigned char *)v199 + 113);
  v334[114] = *((unsigned char *)v199 + 114);
  *(void *)&v334[120] = v199[15];
  v334[128] = *((unsigned char *)v199 + 128);
  LOBYTE(v200) = *((unsigned char *)v199 + 200);
  *(_OWORD *)&v334[8] = *(_OWORD *)(v199 + 1);
  *(_OWORD *)&v334[24] = *(_OWORD *)(v199 + 3);
  *(_OWORD *)&v334[40] = *(_OWORD *)(v199 + 5);
  *(_OWORD *)&v334[56] = *(_OWORD *)(v199 + 7);
  *(_OWORD *)&v334[72] = *(_OWORD *)(v199 + 9);
  *(_OWORD *)&v334[136] = *(_OWORD *)(v199 + 17);
  *(_OWORD *)&v334[152] = *(_OWORD *)(v199 + 19);
  *(_OWORD *)&v334[168] = *(_OWORD *)(v199 + 21);
  *(_OWORD *)&v334[184] = *(_OWORD *)(v199 + 23);
  LOBYTE(v198) = *((unsigned char *)v199 + 201);
  v334[200] = v200;
  uint64_t v201 = v199[26];
  v334[201] = (_BYTE)v198;
  LOBYTE(v198) = *((unsigned char *)v199 + 216);
  *(void *)&v334[208] = v201;
  uint64_t v202 = v199[28];
  v334[216] = (_BYTE)v198;
  LOBYTE(v198) = *((unsigned char *)v199 + 232);
  *(void *)&v334[224] = v202;
  uint64_t v203 = v199[30];
  v334[232] = (_BYTE)v198;
  LOBYTE(v198) = *((unsigned char *)v199 + 248);
  *(void *)&v334[240] = v203;
  uint64_t v204 = v199[32];
  v334[248] = (_BYTE)v198;
  uint64_t v205 = v199[34];
  *(void *)&v334[256] = v204;
  uint64_t v206 = v199[36];
  *(void *)&v334[272] = v205;
  uint64_t v207 = v199[38];
  *(void *)&v334[288] = v206;
  *(void *)&v334[304] = v207;
  v334[313] = *((unsigned char *)v199 + 313);
  *(void *)&v334[320] = v320;
  *(void *)&v334[328] = v321;
  *(void *)&v334[336] = v322;
  *(double *)&v334[344] = v328;
  *(void *)&v334[352] = v65;
  *(void *)&v334[360] = v329;
  *(void *)&v334[368] = v330;
  *(void *)&v334[376] = v331;
  *(void *)&v334[384] = v319;
  *(void *)&v334[392] = v318;
  *(_WORD *)&v334[512] = *((_WORD *)v199 + 256);
  v334[514] = *((unsigned char *)v199 + 514);
  long long v208 = *((_OWORD *)v199 + 25);
  long long v209 = *((_OWORD *)v199 + 26);
  long long v210 = *((_OWORD *)v199 + 27);
  long long v211 = *((_OWORD *)v199 + 28);
  long long v212 = *((_OWORD *)v199 + 29);
  long long v213 = *((_OWORD *)v199 + 30);
  long long v214 = *((_OWORD *)v199 + 31);
  v334[515] = *((unsigned char *)v199 + 515);
  *(_OWORD *)&v334[400] = v208;
  *(_OWORD *)&v334[416] = v209;
  *(_OWORD *)&v334[432] = v210;
  *(_OWORD *)&v334[448] = v211;
  *(_OWORD *)&v334[464] = v212;
  *(_OWORD *)&v334[480] = v213;
  *(_OWORD *)&v334[496] = v214;
  memcpy(v333, v334, 0x204uLL);
  int v215 = *(void **)((char *)v3 + OBJC_IVAR___SNConnectionInternal_connectionQueue);
  uint64_t v94 = *(int **)((char *)v3 + OBJC_IVAR___SNConnectionInternal_networkManager);
  outlined retain of ConnectionConfiguration(v334);
  uint64_t v216 = one-time initialization token for sharedNetworkAnalytics;
  id v65 = v215;
  int v217 = v94;
  if (v216 != -1) {
LABEL_80:
  }
    swift_once();
  char v218 = static NetworkAnalytics.sharedNetworkAnalytics;
  type metadata accessor for BackgroundConnection();
  swift_allocObject();
  uint64_t v219 = BackgroundConnection.init(connectionConfiguration:connectionQueue:networkManager:networkAnalytics:)(v333, (uint64_t)v65, (uint64_t)v94, (uint64_t)v218);
  swift_beginAccess();
  Connection.scheduleBackgroundConnection(_:after:)(v219, v335);
  swift_release();
}

void Connection.sendData(_:with:)()
{
  OUTLINED_FUNCTION_22();
  OUTLINED_FUNCTION_34_5();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v5);
  uint64_t v14 = OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_0();
  uint64_t v7 = v6;
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_23_2();
  OUTLINED_FUNCTION_60_2();
  outlined init with copy of Any(v4, (uint64_t)v16);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v2;
  outlined init with take of Any(v16, (_OWORD *)(v9 + 24));
  *(void *)(v9 + 56) = v3;
  *(void *)(v9 + 64) = v0;
  v15[4] = partial apply for closure #1 in Connection.sendData(_:with:);
  v15[5] = v9;
  v15[0] = MEMORY[0x263EF8330];
  v15[1] = 1107296256;
  v15[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v15[3] = &block_descriptor_14;
  uint64_t v10 = _Block_copy(v15);
  swift_retain();
  OUTLINED_FUNCTION_40_2();
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v11 = OUTLINED_FUNCTION_94_1();
  MEMORY[0x2611B24E0](v11);
  _Block_release(v10);
  uint64_t v12 = OUTLINED_FUNCTION_29_4();
  v13(v12);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v1, v14);
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_29();
}

void closure #1 in Connection.sendData(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a1 + 16;
  swift_beginAccess();
  uint64_t v8 = MEMORY[0x2611B37F0](v7);
  if (v8)
  {
    uint64_t v9 = (void *)v8;
    outlined init with copy of Any(a2, (uint64_t)v11);
    uint64_t v10 = swift_allocObject();
    outlined init with take of Any(v11, (_OWORD *)(v10 + 16));
    *(void *)(v10 + 48) = a3;
    *(void *)(v10 + 56) = a4;
    outlined copy of (@escaping @callee_guaranteed (@in_guaranteed LinkRecommendationInfo?) -> ())?(a3);
    Connection.accessPotentiallyActiveConnections(_:)(partial apply for closure #1 in closure #1 in Connection.sendData(_:with:));
    swift_release();
  }
}

void closure #1 in closure #1 in Connection.sendData(_:with:)(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  if (a1)
  {
    swift_retain();
    BackgroundConnection.sendData(_:with:)(a2, a3, a4);
    swift_release();
  }
  else if (a3)
  {
    lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
    uint64_t v7 = (void *)swift_allocError();
    *(void *)(v8 + 8) = 0;
    *(void *)(v8 + 16) = 0;
    *(void *)uint64_t v8 = 3;
    *(_OWORD *)(v8 + 24) = xmmword_25D790FF0;
    a3();
  }
}

void Connection.sendCommand(_:with:)()
{
  OUTLINED_FUNCTION_22();
  OUTLINED_FUNCTION_34_5();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_23_2();
  OUTLINED_FUNCTION_60_2();
  uint64_t v6 = (void *)swift_allocObject();
  id v6[2] = v1;
  v6[3] = v3;
  v6[4] = v2;
  void v6[5] = v0;
  v12[4] = partial apply for closure #1 in Connection.sendCommand(_:with:);
  v12[5] = v6;
  v12[0] = MEMORY[0x263EF8330];
  OUTLINED_FUNCTION_126(COERCE_DOUBLE(1107296256));
  v12[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  void v12[3] = &block_descriptor_10_2;
  uint64_t v7 = _Block_copy(v12);
  swift_retain();
  swift_unknownObjectRetain();
  OUTLINED_FUNCTION_40_2();
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  OUTLINED_FUNCTION_8_9();
  OUTLINED_FUNCTION_67_1();
  _Block_release(v7);
  uint64_t v8 = OUTLINED_FUNCTION_29_4();
  v9(v8);
  uint64_t v10 = OUTLINED_FUNCTION_3();
  v11(v10);
  OUTLINED_FUNCTION_29_2();
  swift_release();
  OUTLINED_FUNCTION_29();
}

void Connection.sendCommands(_:with:)()
{
  OUTLINED_FUNCTION_22();
  OUTLINED_FUNCTION_34_5();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_23_2();
  OUTLINED_FUNCTION_60_2();
  uint64_t v6 = (void *)swift_allocObject();
  id v6[2] = v1;
  v6[3] = v3;
  v6[4] = v2;
  void v6[5] = v0;
  v12[4] = partial apply for closure #1 in Connection.sendCommands(_:with:);
  v12[5] = v6;
  v12[0] = MEMORY[0x263EF8330];
  OUTLINED_FUNCTION_126(COERCE_DOUBLE(1107296256));
  v12[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  void v12[3] = &block_descriptor_17;
  uint64_t v7 = _Block_copy(v12);
  swift_retain();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_40_2();
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  OUTLINED_FUNCTION_8_9();
  OUTLINED_FUNCTION_67_1();
  _Block_release(v7);
  uint64_t v8 = OUTLINED_FUNCTION_29_4();
  v9(v8);
  uint64_t v10 = OUTLINED_FUNCTION_3();
  v11(v10);
  OUTLINED_FUNCTION_29_2();
  swift_release();
  OUTLINED_FUNCTION_29();
}

void closure #1 in Connection.sendCommand(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t), void (*a6)(uint64_t, uint64_t), void (*a7)(void *, uint64_t, uint64_t, uint64_t))
{
  uint64_t v13 = a1 + 16;
  OUTLINED_FUNCTION_24_2();
  uint64_t v14 = MEMORY[0x2611B37F0](v13);
  if (v14)
  {
    id v15 = (void *)v14;
    a5(a2);
    a6(a3, a4);
    a7(v15, a2, a3, a4);
  }
}

uint64_t closure #1 in closure #1 in Connection.sendCommands(_:with:)(uint64_t a1, unint64_t a2, void (*a3)(uint64_t, void *))
{
  if (a1)
  {
    swift_retain();
    BackgroundConnection.sendCommands(_:with:)();
    return swift_release();
  }
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v6 = result;
    if (result) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v6 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v6)
    {
LABEL_7:
      if (v6 < 1)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = 0;
      while ((a2 & 0xC000000000000001) != 0)
      {
        uint64_t v8 = MEMORY[0x2611B2780](v7, a2);
        if (a3) {
          goto LABEL_11;
        }
LABEL_12:
        ++v7;
        swift_unknownObjectRelease();
        if (v6 == v7) {
          goto LABEL_17;
        }
      }
      uint64_t v8 = *(void *)(a2 + 8 * v7 + 32);
      swift_unknownObjectRetain();
      if (!a3) {
        goto LABEL_12;
      }
LABEL_11:
      lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
      uint64_t v9 = (void *)swift_allocError();
      *(void *)(v10 + 8) = 0;
      *(void *)(v10 + 16) = 0;
      *(void *)uint64_t v10 = 3;
      *(_OWORD *)(v10 + 24) = xmmword_25D790FF0;
      a3(v8, v9);

      goto LABEL_12;
    }
  }
LABEL_17:

  return swift_bridgeObjectRelease();
}

void thunk for @escaping @callee_unowned @convention(block) (@unowned SNSessionObject?, @unowned NSError?) -> ()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v5 = 0;
  }
  id v6 = (id)v5;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);
}

Swift::Void __swiftcall Connection.setSendPings(_:)(Swift::Bool a1)
{
  uint64_t v2 = OUTLINED_FUNCTION_23_2();
  swift_unknownObjectWeakInit();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v2;
  *(unsigned char *)(v3 + 24) = a1;
  swift_retain();
  Connection.waitForActiveConnectionToExecute(_:)();
  swift_release();

  swift_release();
}

void closure #1 in Connection.setSendPings(_:)(uint64_t a1, char a2)
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess();
  uint64_t v4 = (char *)MEMORY[0x2611B37F0](v3);
  if (v4)
  {
    uint64_t v5 = v4;
    if (*(void *)&v4[OBJC_IVAR___SNConnectionInternal_activeBackgroundConnection]
      && (v4[OBJC_IVAR___SNConnectionInternal_isCanceledInternal] & 1) == 0)
    {
      swift_retain();
      BackgroundConnection.setSendPings(_:)(a2 & 1);

      swift_release();
    }
    else
    {
    }
  }
}

void Connection.cancelSynchronously(_:isOnConnectionQueue:with:)()
{
  OUTLINED_FUNCTION_22();
  uint64_t v2 = v0;
  uint64_t v4 = v3;
  id v6 = v5;
  char v8 = v7;
  char v10 = v9;
  type metadata accessor for DispatchWorkItemFlags();
  OUTLINED_FUNCTION_0_0();
  v56[2] = v11;
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DispatchQoS();
  OUTLINED_FUNCTION_0_0();
  v56[1] = v15;
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_49_2();
  uint64_t v17 = type metadata accessor for String.Encoding();
  uint64_t v18 = OUTLINED_FUNCTION_19_1(v17);
  uint64_t v19 = MEMORY[0x270FA5388](v18);
  os_log_type_t v21 = (char *)v56 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v2[OBJC_IVAR___SNConnectionInternal_isCanceled])
  {
    if (v6) {
      v6(v19);
    }
    goto LABEL_33;
  }
  v56[0] = v4;
  v2[OBJC_IVAR___SNConnectionInternal_isCanceled] = 1;
  dispatch_queue_get_label(0);
  static String.Encoding.utf8.getter();
  uint64_t v22 = String.init(cString:encoding:)();
  uint64_t v24 = v23;
  if (v8)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for siriNetwork != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Logger.siriNetwork);
    unsigned __int8 v26 = (void *)Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.default.getter();
    BOOL v28 = OUTLINED_FUNCTION_78_1(v27);
    uint64_t v29 = v56[0];
    if (v28)
    {
      uint64_t v30 = (_WORD *)OUTLINED_FUNCTION_2_0();
      OUTLINED_FUNCTION_55_0(v30);
      OUTLINED_FUNCTION_97_1(&dword_25D6CC000, v31, v32, "Connection - Cancel: on connection queue");
      OUTLINED_FUNCTION_1_2();
    }

    Connection.cancelSynchronously(_:)(v6, v29);
    goto LABEL_33;
  }
  if ((v10 & 1) == 0) {
    goto LABEL_27;
  }
  os_log_type_t v21 = (char *)v22;
  Swift::String v33 = *(NSObject **)&v2[OBJC_IVAR___SNConnectionInternal_connectionQueue];
  uint64_t v34 = OS_dispatch_queue.label.getter();
  if (v24)
  {
    if (v21 == (char *)v34 && v24 == v35) {
      goto LABEL_26;
    }
    LOBYTE(v21) = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v37 = v56[0];
    if (v21) {
      goto LABEL_28;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v37 = v56[0];
  }
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v38 = type metadata accessor for Logger();
  __swift_project_value_buffer(v38, (uint64_t)static Logger.siriNetwork);
  uint64_t v39 = (void *)Logger.logObject.getter();
  os_log_type_t v40 = static os_log_type_t.default.getter();
  if (OUTLINED_FUNCTION_78_1(v40))
  {
    uint64_t v41 = (_WORD *)OUTLINED_FUNCTION_2_0();
    OUTLINED_FUNCTION_55_0(v41);
    OUTLINED_FUNCTION_97_1(&dword_25D6CC000, v42, v43, "Connection - Cancel: synchronously");
    OUTLINED_FUNCTION_1_2();
  }

  uint64_t v44 = (void *)OUTLINED_FUNCTION_55_1();
  void v44[2] = v2;
  v44[3] = v6;
  v44[4] = v37;
  uint64_t v45 = OUTLINED_FUNCTION_15_2();
  *(void *)(v45 + 16) = partial apply for closure #1 in Connection.cancelSynchronously(_:isOnConnectionQueue:with:);
  *(void *)(v45 + 24) = v44;
  uint64_t v60 = _sIg_Ieg_TRTA_0;
  uint64_t v61 = (void *)v45;
  v57[0] = MEMORY[0x263EF8330];
  OUTLINED_FUNCTION_126(COERCE_DOUBLE(1107296256));
  uint64_t v58 = thunk for @escaping @callee_guaranteed () -> ();
  id v59 = &block_descriptor_37;
  os_log_type_t v21 = (char *)_Block_copy(v57);
  uint64_t v46 = v2;
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed LinkRecommendationInfo?) -> ())?((uint64_t)v6);
  swift_retain();
  swift_release();
  dispatch_sync(v33, v21);
  _Block_release(v21);
  LOBYTE(v21) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if (v21)
  {
    __break(1u);
LABEL_26:
    swift_bridgeObjectRelease();
LABEL_27:
    swift_bridgeObjectRelease();
LABEL_28:
    if (one-time initialization token for siriNetwork != -1) {
      swift_once();
    }
    uint64_t v47 = type metadata accessor for Logger();
    __swift_project_value_buffer(v47, (uint64_t)static Logger.siriNetwork);
    uint64_t v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.default.getter();
    if (OUTLINED_FUNCTION_78_1(v49))
    {
      uint64_t v50 = (uint8_t *)OUTLINED_FUNCTION_2_0();
      *(_WORD *)uint64_t v50 = 0;
      _os_log_impl(&dword_25D6CC000, v48, (os_log_type_t)v21, "Connection - Cancel: async", v50, 2u);
      OUTLINED_FUNCTION_1_2();
    }

    uint64_t v51 = OUTLINED_FUNCTION_23_2();
    swift_unknownObjectWeakInit();
    uint64_t v52 = (void *)OUTLINED_FUNCTION_55_1();
    v52[2] = v51;
    v52[3] = v6;
    v52[4] = v56[0];
    uint64_t v60 = partial apply for closure #2 in Connection.cancelSynchronously(_:isOnConnectionQueue:with:);
    uint64_t v61 = v52;
    v57[0] = MEMORY[0x263EF8330];
    OUTLINED_FUNCTION_126(COERCE_DOUBLE(1107296256));
    uint64_t v58 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    id v59 = &block_descriptor_28_0;
    uint64_t v53 = _Block_copy(v57);
    OUTLINED_FUNCTION_92_1();
    swift_retain();
    static DispatchQoS.unspecified.getter();
    v56[3] = MEMORY[0x263F8EE78];
    _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x2611B24E0](0, v1, v14, v53);
    _Block_release(v53);
    OUTLINED_FUNCTION_12_2();
    v54();
    OUTLINED_FUNCTION_12_2();
    v55();
    swift_release();
    swift_release();
  }
LABEL_33:
  OUTLINED_FUNCTION_29();
}

void closure #2 in Connection.cancelSynchronously(_:isOnConnectionQueue:with:)(uint64_t a1, void (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v5 = a1 + 16;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x2611B37F0](v5);
  if (v6)
  {
    char v7 = (void *)v6;
    Connection.cancelSynchronously(_:)(a2, a3);
  }
}

void Connection.getConnectionMetrics(_:with:)()
{
  OUTLINED_FUNCTION_22();
  uint64_t v3 = v0;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  char v9 = v8;
  type metadata accessor for DispatchWorkItemFlags();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_49_2();
  type metadata accessor for DispatchQoS();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_2();
  uint64_t v12 = type metadata accessor for String.Encoding();
  uint64_t v13 = OUTLINED_FUNCTION_19_1(v12);
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_82();
  dispatch_queue_get_label(0);
  static String.Encoding.utf8.getter();
  uint64_t v14 = String.init(cString:encoding:)();
  uint64_t v16 = v15;
  if ((v9 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v25 = (void *)OUTLINED_FUNCTION_55_1();
    id v25[2] = v3;
    v25[3] = v7;
    v25[4] = v5;
    uint64_t v48 = partial apply for closure #2 in Connection.getConnectionMetrics(_:with:);
    os_log_type_t v49 = v25;
    uint64_t v44 = MEMORY[0x263EF8330];
    uint64_t v45 = 1107296256;
    uint64_t v46 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    uint64_t v47 = &block_descriptor_43_0;
    unsigned __int8 v26 = _Block_copy(&v44);
    os_log_type_t v27 = v3;
    outlined copy of (@escaping @callee_guaranteed (@in_guaranteed LinkRecommendationInfo?) -> ())?(v7);
    static DispatchQoS.unspecified.getter();
    v43[0] = MEMORY[0x263F8EE78];
    _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x2611B24E0](0, v1, v2, v26);
    _Block_release(v26);
    OUTLINED_FUNCTION_12_2();
    v28();
    OUTLINED_FUNCTION_12_2();
    v29();
    swift_release();
    goto LABEL_26;
  }
  uint64_t v17 = v14;
  uint64_t v18 = *(NSObject **)&v3[OBJC_IVAR___SNConnectionInternal_connectionQueue];
  uint64_t v19 = OS_dispatch_queue.label.getter();
  if (v16)
  {
    BOOL v21 = v17 == v19 && v16 == v20;
    uint64_t v22 = v5;
    uint64_t v23 = (void (*)(void *))v7;
    if (v21) {
      goto LABEL_17;
    }
    char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v24) {
      goto LABEL_18;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v22 = v5;
    uint64_t v23 = (void (*)(void *))v7;
  }
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v30 = type metadata accessor for Logger();
  __swift_project_value_buffer(v30, (uint64_t)static Logger.siriNetwork);
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v31, v32))
  {
    Swift::String v33 = (uint8_t *)OUTLINED_FUNCTION_2_0();
    *(_WORD *)Swift::String v33 = 0;
    _os_log_impl(&dword_25D6CC000, v31, v32, "Connection - Get Connection Metrics: synchronously", v33, 2u);
    OUTLINED_FUNCTION_1_2();
  }

  uint64_t v34 = (void *)OUTLINED_FUNCTION_55_1();
  v34[2] = v3;
  id v34[3] = v23;
  v34[4] = v22;
  uint64_t v35 = OUTLINED_FUNCTION_15_2();
  *(void *)(v35 + 16) = partial apply for closure #1 in Connection.getConnectionMetrics(_:with:);
  *(void *)(v35 + 24) = v34;
  uint64_t v48 = thunk for @callee_guaranteed () -> ()partial apply;
  os_log_type_t v49 = (void *)v35;
  uint64_t v44 = MEMORY[0x263EF8330];
  uint64_t v45 = 1107296256;
  uint64_t v46 = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t v47 = &block_descriptor_53;
  uint64_t v36 = _Block_copy(&v44);
  uint64_t v37 = v3;
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed LinkRecommendationInfo?) -> ())?((uint64_t)v23);
  swift_retain();
  swift_release();
  dispatch_sync(v18, v36);
  _Block_release(v36);
  LOBYTE(v36) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if (v36)
  {
    __break(1u);
LABEL_17:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_18:
    if (one-time initialization token for siriNetwork != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    __swift_project_value_buffer(v38, (uint64_t)static Logger.siriNetwork);
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = (uint8_t *)OUTLINED_FUNCTION_2_0();
      *(_WORD *)uint64_t v41 = 0;
      _os_log_impl(&dword_25D6CC000, v39, v40, "Connection - Get Connection Metrics: on connection queue", v41, 2u);
      OUTLINED_FUNCTION_1_2();
    }

    if (Connection.activeOrAnyPendingConnection()())
    {
      OUTLINED_FUNCTION_24_2();
      uint64_t v42 = swift_bridgeObjectRetain();
      BackgroundConnection.getConnectionMetrics(connectionMethodHistory:with:)(v42);
      swift_release();
      swift_bridgeObjectRelease();
    }
    else if (v23)
    {
      _s11SiriNetwork17ConnectionMetricsVSgWOi0_(&v44);
      _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)&v44, (uint64_t)v43, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
      v23(v43);
    }
  }
LABEL_26:
  OUTLINED_FUNCTION_29();
}

uint64_t closure #1 in Connection.getConnectionMetrics(_:with:)(uint64_t a1, uint64_t (*a2)(unsigned char *))
{
  uint64_t result = Connection.activeOrAnyPendingConnection()();
  if (result)
  {
    swift_beginAccess();
    uint64_t v4 = swift_bridgeObjectRetain();
    BackgroundConnection.getConnectionMetrics(connectionMethodHistory:with:)(v4);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else if (a2)
  {
    _s11SiriNetwork17ConnectionMetricsVSgWOi0_(v6);
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v6, (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
    return a2(v5);
  }
  return result;
}

uint64_t closure #2 in Connection.getConnectionMetrics(_:with:)(uint64_t a1, uint64_t (*a2)(unsigned char *))
{
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.siriNetwork);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl(&dword_25D6CC000, v4, v5, "Connection - Get Connection Metrics: async", v6, 2u);
    MEMORY[0x2611B3750](v6, -1, -1);
  }

  uint64_t result = Connection.activeOrAnyPendingConnection()();
  if (result)
  {
    swift_beginAccess();
    uint64_t v8 = swift_bridgeObjectRetain();
    BackgroundConnection.getConnectionMetrics(connectionMethodHistory:with:)(v8);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else if (a2)
  {
    _s11SiriNetwork17ConnectionMetricsVSgWOi0_(v10);
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v10, (uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
    return a2(v9);
  }
  return result;
}

uint64_t Connection.getSNConnectionMetrics(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = OUTLINED_FUNCTION_15_2();
  *(void *)(v5 + 16) = a2;
  *(void *)(v5 + 24) = a3;
  OUTLINED_FUNCTION_92_1();
  Connection.getConnectionMetrics(_:with:)();

  return swift_release();
}

void closure #1 in Connection.getSNConnectionMetrics(_:with:)(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  uint64_t v3 = v2;
  _s11SiriNetwork17ConnectionMetricsVSgWObTm_0(v1, (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
  if (v3)
  {
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)v7, (uint64_t)__src, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
    if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)__src) == 1)
    {
      id v4 = 0;
    }
    else
    {
      memcpy(v5, __src, sizeof(v5));
      id v4 = ConnectionMetrics.snConnectionMetrics.getter();
    }
    v3(v4);
  }
}

void Connection.getConnectionAnalysisInfo(_:)()
{
  OUTLINED_FUNCTION_22();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  type metadata accessor for DispatchWorkItemFlags();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_2();
  uint64_t v6 = OUTLINED_FUNCTION_23_2();
  swift_unknownObjectWeakInit();
  uint64_t v7 = (void *)OUTLINED_FUNCTION_55_1();
  v7[2] = v6;
  v7[3] = v3;
  v7[4] = v1;
  v14[4] = partial apply for closure #1 in Connection.getConnectionAnalysisInfo(_:);
  v14[5] = v7;
  v14[0] = MEMORY[0x263EF8330];
  OUTLINED_FUNCTION_126(COERCE_DOUBLE(1107296256));
  v14[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v14[3] = &block_descriptor_63;
  uint64_t v8 = _Block_copy(v14);
  swift_retain();
  OUTLINED_FUNCTION_40_2();
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  OUTLINED_FUNCTION_8_9();
  uint64_t v9 = OUTLINED_FUNCTION_94_1();
  MEMORY[0x2611B24E0](v9);
  _Block_release(v8);
  uint64_t v10 = OUTLINED_FUNCTION_6();
  v11(v10);
  uint64_t v12 = OUTLINED_FUNCTION_64_0();
  v13(v12);
  OUTLINED_FUNCTION_29_2();
  swift_release();
  OUTLINED_FUNCTION_29();
}

void closure #1 in Connection.getConnectionAnalysisInfo(_:)(uint64_t a1, void (*a2)(char *))
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConnectionAnalysisInfo?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v7 = MEMORY[0x2611B37F0](a1 + 16);
  if (v7)
  {
    uint64_t v8 = (void *)v7;
    if (Connection.activeOrAnyPendingConnection()())
    {
      if (a2)
      {
        BackgroundConnection.connectionAnalysisInfo.getter();
        a2(v6);

        swift_release();
LABEL_7:
        outlined destroy of DataCompressing?((uint64_t)v6, &demangling cache variable for type metadata for ConnectionAnalysisInfo?);
        return;
      }

      swift_release();
    }
    else
    {
      if (a2)
      {
        uint64_t v9 = type metadata accessor for ConnectionAnalysisInfo();
        __swift_storeEnumTagSinglePayload((uint64_t)v6, 1, 1, v9);
        a2(v6);

        goto LABEL_7;
      }
    }
  }
}

uint64_t Connection.getSNConnectionAnalysisInfo(_:)()
{
  OUTLINED_FUNCTION_2_12();
  uint64_t v2 = OUTLINED_FUNCTION_15_2();
  *(void *)(v2 + 16) = v1;
  *(void *)(v2 + 24) = v0;
  OUTLINED_FUNCTION_92_1();
  Connection.getConnectionAnalysisInfo(_:)();

  return swift_release();
}

void closure #1 in Connection.getSNConnectionAnalysisInfo(_:)(uint64_t a1, void (*a2)(id))
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConnectionAnalysisInfo?);
  MEMORY[0x270FA5388](v7 - 8);
  unint64_t v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (char *)&v20 - v9;
  if (a2)
  {
    outlined init with copy of NetworkConnectionProtocol?(a1, (uint64_t)&v20 - v9, &demangling cache variable for type metadata for ConnectionAnalysisInfo?);
    uint64_t v11 = (int *)type metadata accessor for ConnectionAnalysisInfo();
    if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, (uint64_t)v11) == 1)
    {
      outlined destroy of DataCompressing?((uint64_t)v10, &demangling cache variable for type metadata for ConnectionAnalysisInfo?);
      id v12 = 0;
    }
    else
    {
      id v13 = objc_msgSend(objc_allocWithZone((Class)SNConnectionType), sel_initWithTechnology_, qword_25D792ED0[v10[v11[8]]]);
      outlined init with copy of NetworkConnectionProtocol?((uint64_t)v10, (uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for URL?);
      uint64_t v14 = &v10[v11[5]];
      if (v14[4]) {
        uint64_t v15 = 0;
      }
      else {
        uint64_t v15 = *(unsigned int *)v14;
      }
      if ((v15 & 0x80000000) != 0)
      {
        __break(1u);
        return;
      }
      Class isa = UInt64._bridgeToObjectiveC()().super.super.isa;
      char v16 = v10[v11[7]];
      uint64_t v17 = (uint64_t *)&v10[v11[9]];
      uint64_t v18 = *v17;
      uint64_t v19 = v17[1];
      objc_allocWithZone((Class)SNConnectionAnalysisInfo);
      swift_bridgeObjectRetain();
      id v12 = @nonobjc SNConnectionAnalysisInfo.init(connectionURL:interfaceIndex:sendBufferSize:wwanPreferred:connectionType:policyId:)((uint64_t)v6, v15, isa, v16, v13, v18, v19);
      outlined destroy of ConnectionAnalysisInfo((uint64_t)v10);
    }
    a2(v12);
  }
}

Swift::Void __swiftcall Connection.probeConnection()()
{
  OUTLINED_FUNCTION_22();
  type metadata accessor for DispatchWorkItemFlags();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_2();
  uint64_t v4 = OUTLINED_FUNCTION_23_2();
  swift_unknownObjectWeakInit();
  v10[4] = partial apply for closure #1 in Connection.probeConnection();
  v10[5] = v4;
  v10[0] = MEMORY[0x263EF8330];
  OUTLINED_FUNCTION_126(COERCE_DOUBLE(1107296256));
  void v10[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v10[3] = &block_descriptor_70;
  uint64_t v5 = _Block_copy(v10);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  OUTLINED_FUNCTION_86_0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2611B24E0](0, v1, v0, v5);
  _Block_release(v5);
  uint64_t v6 = OUTLINED_FUNCTION_6();
  v7(v6);
  uint64_t v8 = OUTLINED_FUNCTION_64_0();
  v9(v8);
  OUTLINED_FUNCTION_29_2();
  swift_release();
  OUTLINED_FUNCTION_29();
}

void closure #1 in Connection.probeConnection()(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x2611B37F0](v1);
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    if (Connection.activeOrAnyPendingConnection()())
    {
      BackgroundConnection.probeConnection()();

      swift_release();
    }
    else
    {
    }
  }
}

uint64_t Connection.barrier(with:)()
{
  OUTLINED_FUNCTION_2_12();
  uint64_t v2 = OUTLINED_FUNCTION_23_2();
  swift_unknownObjectWeakInit();
  uint64_t v3 = (void *)OUTLINED_FUNCTION_55_1();
  v3[2] = v2;
  v3[3] = v1;
  v3[4] = v0;
  swift_retain();
  OUTLINED_FUNCTION_92_1();
  Connection.waitForActiveConnectionToExecute(_:)();
  swift_release();

  return swift_release();
}

void closure #1 in Connection.barrier(with:)(uint64_t a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v5 = a1 + 16;
  swift_beginAccess();
  uint64_t v6 = (char *)MEMORY[0x2611B37F0](v5);
  if (v6)
  {
    uint64_t v7 = v6;
    if (*(void *)&v6[OBJC_IVAR___SNConnectionInternal_activeBackgroundConnection]
      && (v6[OBJC_IVAR___SNConnectionInternal_isCanceledInternal] & 1) == 0)
    {
      swift_retain();
      BackgroundConnection.barrier(with:)((uint64_t)a2, a3);

      swift_release();
      return;
    }
  }
  if (a2) {
    a2(0);
  }
}

void closure #1 in Connection.willStartConnection(_:type:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v6 = a1 + 16;
  OUTLINED_FUNCTION_24_2();
  uint64_t v7 = MEMORY[0x2611B37F0](v6);
  if (v7)
  {
    uint64_t v8 = (char *)v7;
    if (one-time initialization token for siriNetwork != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.siriNetwork);
    swift_unknownObjectRetain_n();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (OUTLINED_FUNCTION_93_0(v11))
    {
      id v12 = (uint8_t *)OUTLINED_FUNCTION_12_0();
      uint64_t v24 = OUTLINED_FUNCTION_10_0();
      *(_DWORD *)id v12 = 136315138;
      uint64_t v13 = OUTLINED_FUNCTION_88_1();
      if (v14)
      {
        uint64_t v25 = *(void *)(a2 + 440);
        uint64_t v26 = v13;
        swift_bridgeObjectRetain();
        uint64_t v16 = String.init<A>(describing:)();
        unint64_t v15 = v17;
      }
      else
      {
        swift_bridgeObjectRelease();
        unint64_t v15 = 0xE700000000000000;
        uint64_t v16 = OUTLINED_FUNCTION_0_4();
      }
      uint64_t v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v15, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_80_1();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_25D6CC000, v10, v11, "Connection - Start: Background Connection. Connection route %s will start.", v12, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_1_2();
      OUTLINED_FUNCTION_1_2();
    }
    else
    {

      OUTLINED_FUNCTION_80_1();
    }
    uint64_t v18 = &v8[OBJC_IVAR___SNConnectionInternal_delegate];
    OUTLINED_FUNCTION_24_2();
    uint64_t v19 = MEMORY[0x2611B37F0](v18);
    if (v19)
    {
      uint64_t v20 = (void *)v19;
      Swift::Int v21 = qword_25D792ED0[a4];
      id v22 = objc_allocWithZone((Class)type metadata accessor for ConnectionTypeWrapper());
      id v23 = ConnectionTypeWrapper.init(_:)(v21);
      objc_msgSend(v20, sel_willStartConnection_type_, v8, v23);
      swift_unknownObjectRelease();
    }
  }
}

void closure #1 in Connection.willStartConnection(_:with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 16;
  OUTLINED_FUNCTION_24_2();
  uint64_t v4 = MEMORY[0x2611B37F0](v3);
  if (v4)
  {
    uint64_t v5 = (char *)v4;
    if (one-time initialization token for siriNetwork != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.siriNetwork);
    swift_unknownObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (OUTLINED_FUNCTION_93_0(v8))
    {
      uint64_t v9 = OUTLINED_FUNCTION_69();
      uint64_t v22 = OUTLINED_FUNCTION_62_1();
      *(_DWORD *)uint64_t v9 = 136315394;
      uint64_t v10 = OUTLINED_FUNCTION_88_1();
      if (v11)
      {
        uint64_t v23 = *(void *)(a2 + 440);
        uint64_t v24 = v10;
        swift_bridgeObjectRetain();
        uint64_t v13 = String.init<A>(describing:)();
        unint64_t v12 = v14;
      }
      else
      {
        swift_bridgeObjectRelease();
        unint64_t v12 = 0xE700000000000000;
        uint64_t v13 = OUTLINED_FUNCTION_0_4();
      }
      uint64_t v23 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v12, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_80_1();
      swift_bridgeObjectRelease();
      *(_WORD *)(v9 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v15 = Dictionary.description.getter();
      unint64_t v17 = v16;
      swift_bridgeObjectRelease();
      uint64_t v23 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_25D6CC000, v7, v8, "Connection - Start: Background Connection. Connection route %s will start, HTTP Header %s.", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_1_2();
      OUTLINED_FUNCTION_1_2();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      OUTLINED_FUNCTION_80_1();
    }
    uint64_t v18 = &v5[OBJC_IVAR___SNConnectionInternal_delegate];
    OUTLINED_FUNCTION_24_2();
    uint64_t v19 = MEMORY[0x2611B37F0](v18);
    if (v19)
    {
      uint64_t v20 = (void *)v19;
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v20, sel_willStartConnection_with_, v5, isa);
      swift_unknownObjectRelease();
    }
  }
}

void closure #1 in Connection.didOpenConnectionType(_:type:routeId:delay:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v11 = a1 + 16;
  OUTLINED_FUNCTION_24_2();
  uint64_t v12 = MEMORY[0x2611B37F0](v11);
  if (v12)
  {
    uint64_t v13 = (char *)v12;
    Swift::String v14 = BackgroundConnection.getConnectionMethod()();
    uint64_t v15 = *(void *)&v13[OBJC_IVAR___SNConnectionInternal_activeBackgroundConnection];
    if (v15)
    {
      if (v15 != a2)
      {
        if (one-time initialization token for siriNetwork != -1) {
          swift_once();
        }
        uint64_t v16 = type metadata accessor for Logger();
        __swift_project_value_buffer(v16, (uint64_t)static Logger.siriNetwork);
        OUTLINED_FUNCTION_66_1();
        swift_bridgeObjectRetain();
        unint64_t v17 = Logger.logObject.getter();
        os_log_type_t v18 = static os_log_type_t.default.getter();
        if (OUTLINED_FUNCTION_93_0(v18))
        {
          uint64_t v19 = OUTLINED_FUNCTION_69();
          v78[0] = OUTLINED_FUNCTION_62_1();
          *(_DWORD *)uint64_t v19 = 136315394;
          unint64_t v20 = *(void *)(a2 + 448);
          if (v20 >= 2)
          {
            uint64_t __src = *(void *)(a2 + 440);
            unint64_t v80 = v20;
            swift_bridgeObjectRetain();
            uint64_t v22 = String.init<A>(describing:)();
            unint64_t v21 = v37;
          }
          else
          {
            swift_bridgeObjectRelease();
            unint64_t v21 = 0xE700000000000000;
            uint64_t v22 = OUTLINED_FUNCTION_0_4();
          }
          uint64_t __src = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v21, v78);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          OUTLINED_FUNCTION_48();
          swift_bridgeObjectRelease();
          *(_WORD *)(v19 + 12) = 2080;
          swift_bridgeObjectRetain();
          uint64_t __src = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14._countAndFlagsBits, (unint64_t)v14._object, v78);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_25D6CC000, v17, v18, "Connection - Status: Background Connection. Connection route %s race lost. Cancelling background connection. Method used %s", (uint8_t *)v19, 0x16u);
          swift_arrayDestroy();
          OUTLINED_FUNCTION_1_2();
          OUTLINED_FUNCTION_1_2();
        }
        else
        {

          swift_bridgeObjectRelease_n();
          OUTLINED_FUNCTION_48();
        }
        BackgroundConnection.cancel()();
        OUTLINED_FUNCTION_75_1();
        specialized Set._Variant.remove(_:)(a2);
        swift_endAccess();
        swift_release();
        uint64_t v38 = *(void *)(a2 + 448);
        if (v38 != 1)
        {
          uint64_t v67 = *(void *)(a2 + 544);
          uint64_t v68 = *(void *)(a2 + 536);
          uint64_t v39 = *(void *)(a2 + 528);
          uint64_t v40 = *(void *)(a2 + 504);
          uint64_t v69 = *(void *)(a2 + 520);
          uint64_t v70 = *(void *)(a2 + 512);
          uint64_t v41 = *(void *)(a2 + 488);
          uint64_t v76 = *(void *)(a2 + 480);
          uint64_t v77 = *(void *)(a2 + 496);
          uint64_t v42 = *(void *)(a2 + 464);
          uint64_t v72 = *(void *)(a2 + 456);
          uint64_t v74 = *(void *)(a2 + 472);
          __int16 v66 = *(_WORD *)(a2 + 552);
          uint64_t __src = *(void *)(a2 + 440);
          uint64_t v71 = __src;
          unint64_t v80 = v38;
          uint64_t v81 = v72;
          *(void *)&long long v82 = v42;
          *((void *)&v82 + 1) = v74;
          uint64_t v83 = v76;
          *(void *)&long long v84 = v41;
          *((void *)&v84 + 1) = v77;
          *(void *)&long long v85 = v40;
          BYTE8(v85) = v70 & 1;
          uint64_t v86 = v69;
          *(void *)&long long v87 = v39;
          BYTE8(v87) = v68;
          uint64_t v88 = v67;
          __int16 v89 = v66 & 0xFF01;
          OUTLINED_FUNCTION_75_1();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          specialized Set._Variant.remove(_:)(&__src, (uint64_t)v78);
          uint64_t v43 = v78[1];
          uint64_t v65 = v78[0];
          swift_endAccess();
          outlined consume of ConnectionPolicyRoute?(v65, v43);

          outlined consume of ConnectionPolicyRoute?(v71, v38);
          return;
        }
        goto LABEL_39;
      }
      swift_bridgeObjectRelease();
      if (one-time initialization token for siriNetwork != -1) {
        swift_once();
      }
      uint64_t v30 = type metadata accessor for Logger();
      __swift_project_value_buffer(v30, (uint64_t)static Logger.siriNetwork);
      OUTLINED_FUNCTION_66_1();
      uint64_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.default.getter();
      if (!OUTLINED_FUNCTION_93_0(v32))
      {

        OUTLINED_FUNCTION_48();
        return;
      }
      Swift::String v33 = (uint8_t *)OUTLINED_FUNCTION_12_0();
      v78[0] = OUTLINED_FUNCTION_10_0();
      *(_DWORD *)Swift::String v33 = 136315138;
      unint64_t v34 = *(void *)(a2 + 448);
      if (v34 >= 2)
      {
        uint64_t __src = *(void *)(a2 + 440);
        unint64_t v80 = v34;
        swift_bridgeObjectRetain();
        uint64_t v36 = String.init<A>(describing:)();
        unint64_t v35 = v64;
      }
      else
      {
        swift_bridgeObjectRelease();
        unint64_t v35 = 0xE700000000000000;
        uint64_t v36 = OUTLINED_FUNCTION_0_4();
      }
      uint64_t __src = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v35, v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_48();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_25D6CC000, v31, v32, "Connection - Status: Background Connection. Connection route %s open twice or became viable again.", v33, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_1_2();
      OUTLINED_FUNCTION_1_2();
    }
    else
    {
      if (one-time initialization token for siriNetwork != -1) {
        swift_once();
      }
      uint64_t v23 = type metadata accessor for Logger();
      __swift_project_value_buffer(v23, (uint64_t)static Logger.siriNetwork);
      OUTLINED_FUNCTION_66_1();
      swift_bridgeObjectRetain_n();
      uint64_t v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.default.getter();
      if (OUTLINED_FUNCTION_93_0(v25))
      {
        uint64_t v73 = a4;
        uint64_t v75 = a5;
        uint64_t v26 = OUTLINED_FUNCTION_69();
        v78[0] = OUTLINED_FUNCTION_62_1();
        *(_DWORD *)uint64_t v26 = 136315394;
        unint64_t v27 = *(void *)(a2 + 448);
        if (v27 >= 2)
        {
          uint64_t __src = *(void *)(a2 + 440);
          unint64_t v80 = v27;
          swift_bridgeObjectRetain();
          uint64_t v29 = String.init<A>(describing:)();
          unint64_t v28 = v44;
        }
        else
        {
          swift_bridgeObjectRelease();
          unint64_t v28 = 0xE700000000000000;
          uint64_t v29 = OUTLINED_FUNCTION_0_4();
        }
        uint64_t __src = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v28, v78);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        OUTLINED_FUNCTION_48();
        swift_bridgeObjectRelease();
        *(_WORD *)(v26 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t __src = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14._countAndFlagsBits, (unint64_t)v14._object, v78);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_25D6CC000, v24, v25, "Connection - Status: Background Connection. Connection route %s ready. Method %s", (uint8_t *)v26, 0x16u);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_1_2();
        OUTLINED_FUNCTION_1_2();

        a4 = v73;
        a5 = v75;
      }
      else
      {

        swift_bridgeObjectRelease_n();
        OUTLINED_FUNCTION_48();
      }
      uint64_t v45 = swift_retain();
      Connection.activeBackgroundConnection.setter(v45);
      unint64_t v46 = *(void *)(a2 + 448);
      if (v46 != 1)
      {
        __int16 v47 = *(_WORD *)(a2 + 552);
        uint64_t v48 = *(void *)(a2 + 544);
        uint64_t v49 = *(void *)(a2 + 520);
        uint64_t v50 = *(void *)(a2 + 480);
        uint64_t v51 = *(void *)(a2 + 456);
        uint64_t __src = *(void *)(a2 + 440);
        unint64_t v80 = v46;
        long long v82 = *(_OWORD *)(a2 + 464);
        uint64_t v81 = v51;
        uint64_t v83 = v50;
        long long v52 = *(_OWORD *)(a2 + 504);
        long long v84 = *(_OWORD *)(a2 + 488);
        long long v85 = v52;
        long long v87 = *(_OWORD *)(a2 + 528);
        uint64_t v86 = v49;
        uint64_t v88 = v48;
        __int16 v89 = v47;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        Connection.activeRoute.setter((uint64_t)&__src);
      }
      uint64_t v53 = &v13[OBJC_IVAR___SNConnectionInternal_delegate];
      OUTLINED_FUNCTION_24_2();
      uint64_t v54 = MEMORY[0x2611B37F0](v53);
      if (v54)
      {
        uint64_t v55 = (void *)v54;
        Swift::Int v56 = qword_25D792ED0[a3];
        id v57 = objc_allocWithZone((Class)type metadata accessor for ConnectionTypeWrapper());
        id v58 = ConnectionTypeWrapper.init(_:)(v56);
        if (a5) {
          id v59 = (void *)MEMORY[0x2611B2220](a4, a5);
        }
        else {
          id v59 = 0;
        }
        uint64_t v60 = (void *)MEMORY[0x2611B2220](v14._countAndFlagsBits, v14._object);
        objc_msgSend(v55, sel_didOpenConnectionType_type_routeId_delay_method_, v13, v58, v59, v60, a6);
        swift_unknownObjectRelease();
      }
      uint64_t v61 = &v13[OBJC_IVAR___SNConnectionInternal_connectionMethodUsedHistory];
      OUTLINED_FUNCTION_75_1();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      uint64_t v62 = *(void *)(*(void *)v61 + 16);
      specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v62);
      uint64_t v63 = *(void *)v61;
      *(void *)(v63 + 16) = v62 + 1;
      *(Swift::String *)(v63 + 16 * v62 + 32) = v14;
      swift_endAccess();
      uint64_t v31 = *(id *)&v13[OBJC_IVAR___SNConnectionInternal_activeConnectionGroup];
      dispatch_group_leave(v31);
    }

LABEL_39:
  }
}

void closure #1 in Connection.didReceiveObject(_:object:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v6 = a1 + 16;
  OUTLINED_FUNCTION_24_2();
  uint64_t v7 = MEMORY[0x2611B37F0](v6);
  if (!v7) {
    return;
  }
  os_log_type_t v8 = (char *)v7;
  type metadata accessor for BackgroundConnection();
  uint64_t v9 = swift_dynamicCastClass();
  if (!v9)
  {
LABEL_22:

    return;
  }
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)&v8[OBJC_IVAR___SNConnectionInternal_activeBackgroundConnection];
  if (v11) {
    BOOL v12 = v9 == v11;
  }
  else {
    BOOL v12 = 0;
  }
  if (!v12
    || (uint64_t v13 = &v8[OBJC_IVAR___SNConnectionInternal_delegate],
        OUTLINED_FUNCTION_24_2(),
        (uint64_t v14 = MEMORY[0x2611B37F0](v13)) == 0))
  {
    uint64_t v23 = one-time initialization token for siriNetwork;
    swift_unknownObjectRetain();
    if (v23 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.siriNetwork);
    OUTLINED_FUNCTION_101_0();
    os_log_type_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.default.getter();
    if (OUTLINED_FUNCTION_93_0(v26))
    {
      unint64_t v27 = (uint8_t *)OUTLINED_FUNCTION_12_0();
      uint64_t v34 = OUTLINED_FUNCTION_10_0();
      *(_DWORD *)unint64_t v27 = 136315138;
      if (*(void *)(v10 + 448) >= 2uLL)
      {
        swift_bridgeObjectRetain();
        uint64_t v29 = String.init<A>(describing:)();
        unint64_t v28 = v30;
      }
      else
      {
        swift_bridgeObjectRelease();
        unint64_t v28 = 0xE700000000000000;
        uint64_t v29 = OUTLINED_FUNCTION_0_4();
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v28, &v34);
      OUTLINED_FUNCTION_87_1();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_56_1();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_25D6CC000, v25, v26, "Connection - Reader: Background Connection. Ignoring object from inactive background connection route %s", v27, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_1_2();
      OUTLINED_FUNCTION_1_2();
      swift_unknownObjectRelease();
    }
    else
    {

      swift_unknownObjectRelease_n();
    }
    goto LABEL_22;
  }
  uint64_t v15 = (void *)v14;
  uint64_t v16 = one-time initialization token for siriNetwork;
  swift_unknownObjectRetain();
  if (v16 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Logger.siriNetwork);
  OUTLINED_FUNCTION_101_0();
  os_log_type_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (OUTLINED_FUNCTION_93_0(v19))
  {
    unint64_t v20 = (uint8_t *)OUTLINED_FUNCTION_12_0();
    uint64_t v33 = OUTLINED_FUNCTION_10_0();
    uint64_t v34 = v33;
    *(_DWORD *)unint64_t v20 = 136315138;
    if (*(void *)(v10 + 448) >= 2uLL)
    {
      swift_bridgeObjectRetain();
      uint64_t v22 = String.init<A>(describing:)();
      unint64_t v21 = v31;
    }
    else
    {
      swift_bridgeObjectRelease();
      unint64_t v21 = 0xE700000000000000;
      uint64_t v22 = OUTLINED_FUNCTION_0_4();
    }
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v21, &v34);
    OUTLINED_FUNCTION_87_1();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_56_1();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_25D6CC000, v18, v19, "Connection - Reader: Background Connection. Received object from active background connection route %s", v20, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_1_2();
    OUTLINED_FUNCTION_1_2();
  }
  else
  {

    OUTLINED_FUNCTION_56_1();
  }
  if (a5 >> 60 == 15) {
    Class isa = 0;
  }
  else {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
  }
  objc_msgSend(v15, sel_didReceiveObject_object_, v8, isa, v33);
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
}

void closure #1 in Connection.didReceiveAceObject(_:object:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a1 + 16;
  OUTLINED_FUNCTION_24_2();
  uint64_t v6 = MEMORY[0x2611B37F0](v5);
  if (!v6) {
    goto LABEL_23;
  }
  uint64_t v7 = (char *)v6;
  type metadata accessor for BackgroundConnection();
  uint64_t v8 = swift_dynamicCastClass();
  if (!v8)
  {
LABEL_22:

    goto LABEL_23;
  }
  uint64_t v9 = *(void *)&v7[OBJC_IVAR___SNConnectionInternal_activeBackgroundConnection];
  if (v9) {
    BOOL v10 = v8 == v9;
  }
  else {
    BOOL v10 = 0;
  }
  if (!v10
    || (uint64_t v11 = &v7[OBJC_IVAR___SNConnectionInternal_delegate],
        OUTLINED_FUNCTION_24_2(),
        (uint64_t v12 = MEMORY[0x2611B37F0](v11)) == 0))
  {
    uint64_t v28 = one-time initialization token for siriNetwork;
    swift_unknownObjectRetain();
    if (v28 != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    __swift_project_value_buffer(v29, (uint64_t)static Logger.siriNetwork);
    OUTLINED_FUNCTION_101_0();
    id v30 = a4;
    unint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.default.getter();
    if (OUTLINED_FUNCTION_93_0(v32))
    {
      os_log_type_t v45 = v32;
      uint64_t v33 = OUTLINED_FUNCTION_69();
      uint64_t v46 = OUTLINED_FUNCTION_62_1();
      *(_DWORD *)uint64_t v33 = 136315394;
      id v34 = v30;
      id v35 = objc_msgSend(v34, sel_description);
      uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v38 = v37;

      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v38, &v46);
      OUTLINED_FUNCTION_83_1();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v33 + 12) = 2080;
      OUTLINED_FUNCTION_88_1();
      if (v25)
      {
        swift_bridgeObjectRetain();
        uint64_t v40 = String.init<A>(describing:)();
        unint64_t v39 = v41;
      }
      else
      {
        swift_bridgeObjectRelease();
        unint64_t v39 = 0xE700000000000000;
        uint64_t v40 = OUTLINED_FUNCTION_0_4();
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v39, &v46);
      OUTLINED_FUNCTION_61_1();
      OUTLINED_FUNCTION_56_1();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_25D6CC000, v31, v45, "Connection - Reader: Background Connection. Ignoring ace object %s from inactive background connection route %s", (uint8_t *)v33, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_1_2();
      OUTLINED_FUNCTION_1_2();
      swift_unknownObjectRelease();
    }
    else
    {

      swift_unknownObjectRelease_n();
    }
    goto LABEL_22;
  }
  uint64_t v13 = (void *)v12;
  uint64_t v14 = one-time initialization token for siriNetwork;
  swift_unknownObjectRetain();
  if (v14 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.siriNetwork);
  OUTLINED_FUNCTION_101_0();
  id v16 = a4;
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (OUTLINED_FUNCTION_93_0(v18))
  {
    os_log_type_t v43 = v18;
    uint64_t v19 = OUTLINED_FUNCTION_69();
    uint64_t v46 = OUTLINED_FUNCTION_62_1();
    *(_DWORD *)uint64_t v19 = 136315394;
    id v44 = v16;
    id v20 = v16;
    id v21 = objc_msgSend(v20, sel_description);
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v24 = v23;

    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v24, &v46);
    OUTLINED_FUNCTION_83_1();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 12) = 2080;
    OUTLINED_FUNCTION_88_1();
    if (v25)
    {
      swift_bridgeObjectRetain();
      uint64_t v27 = String.init<A>(describing:)();
      unint64_t v26 = v42;
    }
    else
    {
      swift_bridgeObjectRelease();
      unint64_t v26 = 0xE700000000000000;
      uint64_t v27 = OUTLINED_FUNCTION_0_4();
    }
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v26, &v46);
    OUTLINED_FUNCTION_61_1();
    OUTLINED_FUNCTION_56_1();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_25D6CC000, v17, v43, "Connection - Reader: Background Connection. Received ace object %s from active background connection route %s", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_1_2();
    OUTLINED_FUNCTION_1_2();

    id v16 = v44;
  }
  else
  {

    OUTLINED_FUNCTION_56_1();
  }
  objc_msgSend(v13, sel_didReceiveAceObject_object_, v7, v16);
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
LABEL_23:
  OUTLINED_FUNCTION_58_2();
}

uint64_t closure #1 in Connection.didClose(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 16;
  OUTLINED_FUNCTION_24_2();
  uint64_t result = MEMORY[0x2611B37F0](v3);
  if (result)
  {
    uint64_t v5 = (void *)result;
    *(void *)(OUTLINED_FUNCTION_23_2() + 16) = result;
    swift_retain();
    swift_retain();
    id v6 = v5;
    specialized Connection.handleCloseAndErrorEventsFromBackgroundConnection(_:completion:)(a2, (uint64_t)v6, a2, (void (*)(uint64_t))partial apply for closure #1 in closure #1 in Connection.didClose(_:));

    return swift_release();
  }
  return result;
}

void *closure #1 in closure #1 in Connection.didClose(_:)(uint64_t a1)
{
  uint64_t v2 = a1 + OBJC_IVAR___SNConnectionInternal_delegate;
  swift_beginAccess();
  uint64_t result = (void *)MEMORY[0x2611B37F0](v2);
  if (result)
  {
    objc_msgSend(result, sel_didCloseConnection_, a1);
    return (void *)swift_unknownObjectRelease();
  }
  return result;
}

void closure #2 in closure #1 in Connection.didClose(_:)(char a1, char a2, uint64_t a3, void (*a4)(uint64_t))
{
  if (a1)
  {
    if (one-time initialization token for siriNetwork != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.siriNetwork);
    swift_retain_n();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v7, v8))
    {

      uint64_t v15 = swift_release_n();
LABEL_24:
      a4(v15);
      return;
    }
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    uint64_t v21 = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    if (*(void *)(a3 + 448) >= 2uLL)
    {
      swift_bridgeObjectRetain();
      uint64_t v12 = String.init<A>(describing:)();
      unint64_t v11 = v19;
    }
    else
    {
      swift_bridgeObjectRelease();
      unint64_t v11 = 0xE700000000000000;
      uint64_t v12 = 0x6E776F6E6B6E75;
    }
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v11, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_25D6CC000, v7, v8, "Connection - Status: Background connection. Closing active background connection route %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2611B3750](v10, -1, -1);
    goto LABEL_22;
  }
  if (a2)
  {
    if (one-time initialization token for siriNetwork != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.siriNetwork);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v7, v14)) {
      goto LABEL_23;
    }
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl(&dword_25D6CC000, v7, v14, "Connection - Status: Background connection. Ran out of pending connections; forwarding close from last background connection",
      v9,
      2u);
LABEL_22:
    MEMORY[0x2611B3750](v9, -1, -1);
LABEL_23:

    goto LABEL_24;
  }
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.siriNetwork);
  os_log_t oslog = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v17))
  {
    os_log_type_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v18 = 0;
    _os_log_impl(&dword_25D6CC000, oslog, v17, "Connection - Status: Background connection. Ignoring connection close from inactive backgrund connection", v18, 2u);
    MEMORY[0x2611B3750](v18, -1, -1);
  }
}

void closure #1 in Connection.didEncounterError(_:error:analysisInfo:)()
{
  OUTLINED_FUNCTION_22();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConnectionAnalysisInfo?);
  uint64_t v13 = OUTLINED_FUNCTION_19_3(v12);
  uint64_t v15 = v14;
  uint64_t v17 = *(void *)(v16 + 64);
  MEMORY[0x270FA5388](v13);
  OUTLINED_FUNCTION_24_2();
  uint64_t v18 = MEMORY[0x2611B37F0](v11 + 16);
  if (v18)
  {
    unint64_t v19 = (void *)v18;
    outlined init with copy of NetworkConnectionProtocol?(v7, (uint64_t)&v25[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)], &demangling cache variable for type metadata for ConnectionAnalysisInfo?);
    unint64_t v20 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = v19;
    *(void *)(v21 + 24) = v9;
    _s11SiriNetwork17ConnectionMetricsVSgWObTm_0((uint64_t)&v25[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)], v21 + v20, &demangling cache variable for type metadata for ConnectionAnalysisInfo?);
    id v22 = v9;
    id v23 = v19;
    id v24 = v9;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    specialized Connection.handleCloseAndErrorEventsFromBackgroundConnection(_:completion:)(v5, (uint64_t)v23, v5, v9, (void (*)(uint64_t))partial apply for closure #1 in closure #1 in Connection.didEncounterError(_:error:analysisInfo:), v21, (uint64_t)v23, v3, v1);

    swift_release();
  }
  OUTLINED_FUNCTION_29();
}

void closure #1 in closure #1 in Connection.didEncounterError(_:error:analysisInfo:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = &v27[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConnectionAnalysisInfo?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = &v27[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = a1 + OBJC_IVAR___SNConnectionInternal_delegate;
  swift_beginAccess();
  uint64_t v12 = MEMORY[0x2611B37F0](v11);
  if (v12)
  {
    uint64_t v13 = (void *)v12;
    uint64_t v14 = (void *)_convertErrorToNSError(_:)();
    outlined init with copy of NetworkConnectionProtocol?(a3, (uint64_t)v10, &demangling cache variable for type metadata for ConnectionAnalysisInfo?);
    uint64_t v15 = (int *)type metadata accessor for ConnectionAnalysisInfo();
    if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, (uint64_t)v15) == 1)
    {
      outlined destroy of DataCompressing?((uint64_t)v10, &demangling cache variable for type metadata for ConnectionAnalysisInfo?);
      id v16 = 0;
    }
    else
    {
      id v17 = objc_msgSend(objc_allocWithZone((Class)SNConnectionType), sel_initWithTechnology_, qword_25D792ED0[(char)v10[v15[8]]]);
      outlined init with copy of NetworkConnectionProtocol?((uint64_t)v10, (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for URL?);
      uint64_t v18 = (unsigned int *)&v10[v15[5]];
      if (*((unsigned char *)v18 + 4)) {
        uint64_t v19 = 0;
      }
      else {
        uint64_t v19 = *v18;
      }
      if ((v19 & 0x80000000) != 0)
      {
        __break(1u);
        return;
      }
      v20.super.super.Class isa = UInt64._bridgeToObjectiveC()().super.super.isa;
      uint64_t v29 = v14;
      uint64_t v21 = a1;
      Class isa = v20.super.super.isa;
      int v28 = v10[v15[7]];
      id v23 = (uint64_t *)&v10[v15[9]];
      uint64_t v24 = *v23;
      uint64_t v25 = v23[1];
      objc_allocWithZone((Class)SNConnectionAnalysisInfo);
      swift_bridgeObjectRetain();
      Class v26 = isa;
      a1 = v21;
      uint64_t v14 = v29;
      id v16 = @nonobjc SNConnectionAnalysisInfo.init(connectionURL:interfaceIndex:sendBufferSize:wwanPreferred:connectionType:policyId:)((uint64_t)v7, v19, v26, v28, v17, v24, v25);
      outlined destroy of ConnectionAnalysisInfo((uint64_t)v10);
    }
    objc_msgSend(v13, sel_didEncounterError_error_analysisInfo_, a1, v14, v16);
    swift_unknownObjectRelease();
  }
}

void closure #2 in closure #1 in Connection.didEncounterError(_:error:analysisInfo:)(char a1, char a2, uint64_t a3, void *a4, void (*a5)(uint64_t), uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a1)
  {
    if (one-time initialization token for siriNetwork != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.siriNetwork);
    swift_retain();
    id v13 = a4;
    swift_retain();
    id v14 = a4;
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = swift_slowAlloc();
      uint64_t v18 = (void *)swift_slowAlloc();
      uint64_t v19 = (void *)swift_slowAlloc();
      id v71 = v19;
      *(_DWORD *)uint64_t v17 = 136315394;
      if (*(void *)(a3 + 448) >= 2uLL)
      {
        uint64_t v67 = *(void *)(a3 + 448);
        swift_bridgeObjectRetain();
        uint64_t v21 = String.init<A>(describing:)();
        unint64_t v20 = v44;
      }
      else
      {
        swift_bridgeObjectRelease();
        unint64_t v20 = 0xE700000000000000;
        uint64_t v21 = 0x6E776F6E6B6E75;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v20, (uint64_t *)&v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v17 + 12) = 2112;
      id v45 = a4;
      unint64_t v64 = (void *)_swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v18 = v64;

      _os_log_impl(&dword_25D6CC000, v15, v16, "Connection - Error: Background Connection. Got an error from active background connection route %s. Error: %@", (uint8_t *)v17, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x2611B3750](v18, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x2611B3750](v19, -1, -1);
      MEMORY[0x2611B3750](v17, -1, -1);
    }
    else
    {
      swift_release_n();
    }
    id v71 = a4;
    id v46 = a4;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    if (swift_dynamicCast())
    {
      outlined consume of NetworkConnectionError(v64, v67, v68, v69, v70);
      if (v69 >> 60 == 5) {
        BackgroundConnection.updateActiveBackgroundConnectionWithSecondary()();
      }
    }

LABEL_31:
    a5(v47);
    return;
  }
  if (a2)
  {
    if (one-time initialization token for siriNetwork != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.siriNetwork);
    swift_retain();
    id v25 = a4;
    swift_retain();
    id v26 = a4;
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v60 = a7;
      uint64_t v61 = a8;
      uint64_t v63 = a5;
      uint64_t v29 = swift_slowAlloc();
      id v30 = (void *)swift_slowAlloc();
      unint64_t v31 = (void *)swift_slowAlloc();
      id v71 = v31;
      *(_DWORD *)uint64_t v29 = 136315394;
      if (*(void *)(a3 + 448) >= 2uLL)
      {
        swift_bridgeObjectRetain();
        uint64_t v33 = String.init<A>(describing:)();
        unint64_t v32 = v48;
      }
      else
      {
        swift_bridgeObjectRelease();
        unint64_t v32 = 0xE700000000000000;
        uint64_t v33 = 0x6E776F6E6B6E75;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v32, (uint64_t *)&v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v29 + 12) = 2112;
      id v49 = a4;
      uint64_t v65 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v30 = v65;

      _os_log_impl(&dword_25D6CC000, v27, v28, "Connection - Error: Background Connection. Ran out of pending connections; forwarding error from last background"
        " connection route %s. Error: %@",
        (uint8_t *)v29,
        0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x2611B3750](v30, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x2611B3750](v31, -1, -1);
      MEMORY[0x2611B3750](v29, -1, -1);

      a5 = v63;
      a8 = v61;
      a7 = v60;
    }
    else
    {
      swift_release_n();
    }
    if (!*(void *)(a7 + OBJC_IVAR___SNConnectionInternal_activeBackgroundConnection))
    {
      uint64_t v50 = (uint64_t *)(a7 + OBJC_IVAR___SNConnectionInternal_connectionMethodUsedHistory);
      swift_beginAccess();
      swift_bridgeObjectRetain();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      uint64_t v51 = *(void *)(*v50 + 16);
      specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v51);
      uint64_t v52 = *v50;
      *(void *)(v52 + 16) = v51 + 1;
      uint64_t v53 = v52 + 16 * v51;
      *(void *)(v53 + 32) = a8;
      *(void *)(v53 + 40) = a9;
      uint64_t v47 = swift_endAccess();
    }
    goto LABEL_31;
  }
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v34 = type metadata accessor for Logger();
  __swift_project_value_buffer(v34, (uint64_t)static Logger.siriNetwork);
  swift_retain();
  id v35 = a4;
  swift_retain();
  id v36 = a4;
  unint64_t v37 = Logger.logObject.getter();
  os_log_type_t v38 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v37, v38))
  {
    uint64_t v62 = a8;
    uint64_t v39 = swift_slowAlloc();
    uint64_t v40 = (void *)swift_slowAlloc();
    unint64_t v41 = (void *)swift_slowAlloc();
    id v71 = v41;
    *(_DWORD *)uint64_t v39 = 136315394;
    if (*(void *)(a3 + 448) >= 2uLL)
    {
      swift_bridgeObjectRetain();
      uint64_t v43 = String.init<A>(describing:)();
      unint64_t v42 = v54;
    }
    else
    {
      swift_bridgeObjectRelease();
      unint64_t v42 = 0xE700000000000000;
      uint64_t v43 = 0x6E776F6E6B6E75;
    }
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v42, (uint64_t *)&v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v39 + 12) = 2112;
    id v55 = a4;
    uint64_t v66 = _swift_stdlib_bridgeErrorToNSError();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v40 = v66;

    _os_log_impl(&dword_25D6CC000, v37, v38, "Connection - Error: Background Connection. Ignoring error from inactive background connection route %s. Error: %@", (uint8_t *)v39, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x2611B3750](v40, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x2611B3750](v41, -1, -1);
    MEMORY[0x2611B3750](v39, -1, -1);

    a8 = v62;
  }
  else
  {
    swift_release_n();
  }
  if (!*(void *)(a7 + OBJC_IVAR___SNConnectionInternal_activeBackgroundConnection))
  {
    Swift::Int v56 = (uint64_t *)(a7 + OBJC_IVAR___SNConnectionInternal_connectionMethodUsedHistory);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    uint64_t v57 = *(void *)(*v56 + 16);
    specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v57);
    uint64_t v58 = *v56;
    *(void *)(v58 + 16) = v57 + 1;
    uint64_t v59 = v58 + 16 * v57;
    *(void *)(v59 + 32) = a8;
    *(void *)(v59 + 40) = a9;
    swift_endAccess();
  }
}

uint64_t implicit closure #4 in implicit closure #3 in Connection.didEncounterIntermediateError(_:error:)()
{
  return OUTLINED_FUNCTION_0_4();
}

void closure #1 in Connection.didEncounterIntermediateError(_:error:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  OUTLINED_FUNCTION_77_1();
  a31 = v32;
  a32 = v33;
  id v35 = v34;
  uint64_t v37 = v36;
  uint64_t v39 = v38 + 16;
  OUTLINED_FUNCTION_24_2();
  uint64_t v40 = MEMORY[0x2611B37F0](v39);
  if (v40)
  {
    unint64_t v41 = (void *)v40;
    uint64_t v42 = v40 + OBJC_IVAR___SNConnectionInternal_delegate;
    OUTLINED_FUNCTION_24_2();
    uint64_t v43 = MEMORY[0x2611B37F0](v42);
    if (v43)
    {
      unint64_t v44 = (void *)v43;
      if (one-time initialization token for siriNetwork != -1) {
        swift_once();
      }
      uint64_t v45 = type metadata accessor for Logger();
      __swift_project_value_buffer(v45, (uint64_t)static Logger.siriNetwork);
      swift_unknownObjectRetain();
      id v46 = v35;
      swift_unknownObjectRetain();
      id v47 = v35;
      unint64_t v48 = Logger.logObject.getter();
      os_log_type_t v49 = static os_log_type_t.error.getter();
      if (OUTLINED_FUNCTION_93_0(v49))
      {
        uint64_t v50 = OUTLINED_FUNCTION_69();
        Swift::Int v56 = (void *)swift_slowAlloc();
        a14 = OUTLINED_FUNCTION_10_0();
        *(_DWORD *)uint64_t v50 = 136315394;
        if (*(void *)(v37 + 448) >= 2uLL)
        {
          swift_bridgeObjectRetain();
          uint64_t v52 = String.init<A>(describing:)();
          unint64_t v51 = v53;
        }
        else
        {
          swift_bridgeObjectRelease();
          unint64_t v51 = 0xE700000000000000;
          uint64_t v52 = OUTLINED_FUNCTION_0_4();
        }
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v51, &a14);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v50 + 12) = 2112;
        id v54 = v35;
        uint64_t v57 = _swift_stdlib_bridgeErrorToNSError();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *Swift::Int v56 = v57;

        _os_log_impl(&dword_25D6CC000, v48, v49, "Connection - Intermediate Error: Background Connection. Got an intermediate error from active background connection route %s. Error: %@", (uint8_t *)v50, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_1_2();
        swift_arrayDestroy();
        OUTLINED_FUNCTION_1_2();
        OUTLINED_FUNCTION_1_2();
      }
      else
      {
        swift_unknownObjectRelease_n();
      }
      uint64_t v55 = _convertErrorToNSError(_:)();
      objc_msgSend(v44, sel_didEncounterIntermediateError_error_, v41, v55);

      swift_unknownObjectRelease();
      unint64_t v41 = (void *)v55;
    }
  }
  OUTLINED_FUNCTION_73_1();
}

void Connection.scheduleBackgroundConnection(_:after:)(uint64_t a1, double a2)
{
  type metadata accessor for DispatchWorkItemFlags();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_2();
  if (!*(void *)(v2 + OBJC_IVAR___SNConnectionInternal_activeBackgroundConnection)
    && (*(unsigned char *)(v2 + OBJC_IVAR___SNConnectionInternal_isCanceledInternal) & 1) == 0)
  {
    uint64_t v9 = *(void *)(a1 + 448);
    if (v9 != 1)
    {
      uint64_t v50 = *(void *)(a1 + 440);
      uint64_t v10 = *(void *)(a1 + 464);
      uint64_t v49 = *(void *)(a1 + 456);
      uint64_t v47 = *(void *)(a1 + 472);
      uint64_t v11 = *(void *)(a1 + 488);
      uint64_t v46 = *(void *)(a1 + 480);
      uint64_t v12 = *(void *)(a1 + 504);
      uint64_t v45 = *(void *)(a1 + 496);
      uint64_t v53 = *(void *)(a1 + 520);
      uint64_t v13 = *(void *)(a1 + 528);
      uint64_t v55 = *(void *)(a1 + 544);
      char v51 = *(unsigned char *)(a1 + 536);
      char v43 = *(unsigned char *)(a1 + 512) & 1;
      unsigned int v41 = *(unsigned __int16 *)(a1 + 552);
      char v70 = v41 & 1;
      uint64_t v39 = one-time initialization token for siriNetwork;
      uint64_t v54 = v9;
      swift_bridgeObjectRetain();
      uint64_t v48 = v10;
      uint64_t v14 = v11;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v44 = v12;
      swift_bridgeObjectRetain();
      uint64_t v52 = v13;
      swift_bridgeObjectRetain();
      if (v39 != -1) {
        swift_once();
      }
      unsigned int v42 = v41 >> 8;
      uint64_t v15 = type metadata accessor for Logger();
      __swift_project_value_buffer(v15, (uint64_t)static Logger.siriNetwork);
      swift_retain_n();
      os_log_type_t v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.default.getter();
      if (OUTLINED_FUNCTION_93_0(v17))
      {
        os_log_type_t v38 = v17;
        uint64_t v40 = v16;
        uint64_t v18 = OUTLINED_FUNCTION_69();
        uint64_t v69 = OUTLINED_FUNCTION_10_0();
        *(_DWORD *)uint64_t v18 = 134218242;
        uint64_t aBlock = *(void *)&a2;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v19 = (uint8_t *)v18;
        *(_WORD *)(v18 + 12) = 2080;
        uint64_t v20 = *(void *)(a1 + 448);
        if (v20 == 1)
        {
          unint64_t v21 = 0xE100000000000000;
          uint64_t v22 = 45;
        }
        else
        {
          __int16 v23 = *(_WORD *)(a1 + 552);
          uint64_t v24 = *(void *)(a1 + 544);
          uint64_t v25 = *(void *)(a1 + 536);
          uint64_t v26 = *(void *)(a1 + 528);
          uint64_t v27 = *(void *)(a1 + 520);
          char v28 = *(unsigned char *)(a1 + 512);
          uint64_t v29 = *(void *)(a1 + 504);
          uint64_t v30 = *(void *)(a1 + 480);
          unint64_t v31 = *(uint64_t (**)(uint64_t))(a1 + 456);
          uint64_t aBlock = *(void *)(a1 + 440);
          uint64_t v57 = v20;
          uint64_t v58 = v31;
          long long v59 = *(_OWORD *)(a1 + 464);
          uint64_t v60 = v30;
          long long v61 = *(_OWORD *)(a1 + 488);
          uint64_t v62 = v29;
          char v63 = v28 & 1;
          uint64_t v64 = v27;
          uint64_t v65 = v26;
          char v66 = v25;
          uint64_t v67 = v24;
          __int16 v68 = v23 & 0xFF01;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v22 = String.init<A>(describing:)();
          unint64_t v21 = v32;
        }
        uint64_t aBlock = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v21, &v69);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_25D6CC000, v40, v38, "Connection - Start: Background Connection. Scheduling route after delay %f: %s", v19, 0x16u);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_1_2();
        OUTLINED_FUNCTION_1_2();
      }
      else
      {

        swift_release_n();
      }
      uint64_t v33 = OUTLINED_FUNCTION_23_2();
      swift_unknownObjectWeakInit();
      uint64_t v34 = swift_allocObject();
      *(void *)(v34 + 16) = v33;
      *(void *)(v34 + 24) = v50;
      *(void *)(v34 + 32) = v54;
      *(void *)(v34 + 40) = v49;
      *(void *)(v34 + 48) = v48;
      *(void *)(v34 + 56) = v47;
      *(void *)(v34 + 64) = v46;
      *(void *)(v34 + 72) = v14;
      *(void *)(v34 + 80) = v45;
      *(void *)(v34 + 88) = v44;
      *(unsigned char *)(v34 + 96) = v43;
      *(_DWORD *)(v34 + 97) = *(_DWORD *)v72;
      *(_DWORD *)(v34 + 100) = *(_DWORD *)&v72[3];
      *(void *)(v34 + 104) = v53;
      *(void *)(v34 + 112) = v52;
      *(unsigned char *)(v34 + 120) = v51;
      *(_DWORD *)(v34 + 121) = *(_DWORD *)v71;
      *(_DWORD *)(v34 + 124) = *(_DWORD *)&v71[3];
      *(void *)(v34 + 128) = v55;
      *(unsigned char *)(v34 + 136) = v70;
      *(unsigned char *)(v34 + 137) = v42;
      *(void *)(v34 + 144) = a1;
      *(double *)(v34 + 152) = a2;
      *((void *)&v59 + 1) = partial apply for closure #1 in Connection.scheduleBackgroundConnection(_:after:);
      uint64_t v60 = v34;
      uint64_t aBlock = MEMORY[0x263EF8330];
      uint64_t v57 = 1107296256;
      uint64_t v58 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      *(void *)&long long v59 = &block_descriptor_172;
      id v35 = _Block_copy(&aBlock);
      swift_retain();
      swift_retain();
      static DispatchQoS.unspecified.getter();
      uint64_t v69 = MEMORY[0x263F8EE78];
      _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
      OUTLINED_FUNCTION_86_0();
      dispatch thunk of SetAlgebra.init<A>(_:)();
      MEMORY[0x2611B24E0](0, v4, v3, v35);
      _Block_release(v35);
      OUTLINED_FUNCTION_12_2();
      v36();
      OUTLINED_FUNCTION_12_2();
      v37();
      swift_release();
      swift_release();
    }
  }
}

uint64_t closure #1 in Connection.scheduleBackgroundConnection(_:after:)(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v49 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = type metadata accessor for DispatchTime();
  uint64_t v47 = *(void *)(v48 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v48);
  uint64_t v45 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v46 = (char *)&v38 - v17;
  swift_beginAccess();
  uint64_t result = MEMORY[0x2611B37F0](a1 + 16);
  if (result)
  {
    uint64_t v19 = (char *)result;
    uint64_t v40 = v13;
    unsigned int v41 = v11;
    uint64_t v42 = v12;
    uint64_t v43 = v9;
    uint64_t v44 = v8;
    swift_beginAccess();
    outlined retain of ConnectionPolicyRoute((uint64_t)a2);
    specialized Set._Variant.insert(_:)((char *)&aBlock, a2);
    swift_endAccess();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    swift_retain();
    specialized Set._Variant.insert(_:)();
    swift_endAccess();
    swift_release();
    swift_beginAccess();
    outlined retain of ConnectionPolicyRoute((uint64_t)a2);
    specialized Set._Variant.insert(_:)((char *)&aBlock, a2);
    swift_endAccess();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (one-time initialization token for siriNetwork != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.siriNetwork);
    outlined retain of ConnectionPolicyRoute((uint64_t)a2);
    outlined retain of ConnectionPolicyRoute((uint64_t)a2);
    unint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      __int16 v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      v50[0] = v24;
      *(_DWORD *)__int16 v23 = 136315138;
      uint64_t v25 = a2[1];
      if (v25)
      {
        uint64_t aBlock = *a2;
        uint64_t v52 = v25;
        swift_bridgeObjectRetain();
        uint64_t v26 = String.init<A>(describing:)();
        unint64_t v28 = v27;
      }
      else
      {
        unint64_t v28 = 0xE700000000000000;
        uint64_t v26 = 0x6E776F6E6B6E75;
      }
      uint64_t aBlock = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v28, v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined release of ConnectionPolicyRoute((uint64_t)a2);
      outlined release of ConnectionPolicyRoute((uint64_t)a2);
      _os_log_impl(&dword_25D6CC000, v21, v22, "Connection - Start: Background Connection. Scheduled route %s", v23, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2611B3750](v24, -1, -1);
      MEMORY[0x2611B3750](v23, -1, -1);
    }
    else
    {
      outlined release of ConnectionPolicyRoute((uint64_t)a2);
      outlined release of ConnectionPolicyRoute((uint64_t)a2);
    }

    uint64_t v29 = (void *)swift_allocObject();
    v29[2] = v19;
    memcpy(v29 + 3, a2, 0x72uLL);
    v29[18] = a3;
    v29[19] = a1;
    if (a4 <= 0.0)
    {
      outlined retain of ConnectionPolicyRoute((uint64_t)a2);
      swift_retain();
      uint64_t v37 = v19;
      swift_retain();
      closure #1 in closure #1 in Connection.scheduleBackgroundConnection(_:after:)((uint64_t)v37, a2, a3, a1);
    }
    else
    {
      uint64_t v38 = *(void *)&v19[OBJC_IVAR___SNConnectionInternal_connectionQueue];
      outlined retain of ConnectionPolicyRoute((uint64_t)a2);
      swift_retain();
      uint64_t v39 = v19;
      swift_retain();
      uint64_t v30 = v45;
      static DispatchTime.now()();
      unint64_t v31 = v46;
      MEMORY[0x2611B2190](v30, a4);
      uint64_t v47 = *(void *)(v47 + 8);
      uint64_t v32 = v48;
      ((void (*)(char *, uint64_t))v47)(v30, v48);
      uint64_t v55 = partial apply for closure #1 in closure #1 in Connection.scheduleBackgroundConnection(_:after:);
      Swift::Int v56 = v29;
      uint64_t aBlock = MEMORY[0x263EF8330];
      uint64_t v52 = 1107296256;
      uint64_t v53 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      uint64_t v54 = &block_descriptor_178;
      uint64_t v33 = _Block_copy(&aBlock);
      swift_retain();
      uint64_t v34 = v49;
      static DispatchQoS.unspecified.getter();
      v50[0] = MEMORY[0x263F8EE78];
      _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
      id v35 = v41;
      uint64_t v36 = v44;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      MEMORY[0x2611B24C0](v31, v34, v35, v33);
      _Block_release(v33);
      swift_release();
      (*(void (**)(char *, uint64_t))(v43 + 8))(v35, v36);
      (*(void (**)(char *, uint64_t))(v40 + 8))(v34, v42);
      ((void (*)(char *, uint64_t))v47)(v31, v32);
    }
    return swift_release();
  }
  return result;
}

void closure #1 in closure #1 in Connection.scheduleBackgroundConnection(_:after:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(a1 + OBJC_IVAR___SNConnectionInternal_activeBackgroundConnection))
  {
    if (one-time initialization token for siriNetwork != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.siriNetwork);
    outlined retain of ConnectionPolicyRoute((uint64_t)a2);
    outlined retain of ConnectionPolicyRoute((uint64_t)a2);
    os_log_t oslog = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = swift_slowAlloc();
      v32[0] = v8;
      *(_DWORD *)uint64_t v7 = 136315138;
      uint64_t v9 = a2[1];
      if (v9)
      {
        __dst[0] = *a2;
        __dst[1] = v9;
        swift_bridgeObjectRetain();
        uint64_t v10 = String.init<A>(describing:)();
        unint64_t v12 = v11;
      }
      else
      {
        uint64_t v10 = 0x6E776F6E6B6E75;
        unint64_t v12 = 0xE700000000000000;
      }
      __dst[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v12, v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined release of ConnectionPolicyRoute((uint64_t)a2);
      outlined release of ConnectionPolicyRoute((uint64_t)a2);
      _os_log_impl(&dword_25D6CC000, oslog, v6, "Connection - Start: Background Connection. Starting route %s cancelled. Race lost", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2611B3750](v8, -1, -1);
      MEMORY[0x2611B3750](v7, -1, -1);
    }
    else
    {
      outlined release of ConnectionPolicyRoute((uint64_t)a2);
      outlined release of ConnectionPolicyRoute((uint64_t)a2);
    }
  }
  else
  {
    uint64_t v29 = a4 + 16;
    swift_beginAccess();
    specialized Set._Variant.remove(_:)(a2, (uint64_t)__dst);
    uint64_t v28 = __dst[0];
    uint64_t v13 = __dst[1];
    swift_endAccess();
    outlined consume of ConnectionPolicyRoute?(v28, v13);
    if (one-time initialization token for siriNetwork != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.siriNetwork);
    outlined retain of ConnectionPolicyRoute((uint64_t)a2);
    swift_retain();
    outlined retain of ConnectionPolicyRoute((uint64_t)a2);
    swift_retain();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      v34[0] = v18;
      *(_DWORD *)uint64_t v17 = 136315394;
      uint64_t v19 = a2[1];
      if (v19)
      {
        __dst[0] = *a2;
        __dst[1] = v19;
        swift_bridgeObjectRetain();
        uint64_t v20 = String.init<A>(describing:)();
        unint64_t v22 = v21;
      }
      else
      {
        uint64_t v20 = 0x6E776F6E6B6E75;
        unint64_t v22 = 0xE700000000000000;
      }
      __dst[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v22, v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined release of ConnectionPolicyRoute((uint64_t)a2);
      outlined release of ConnectionPolicyRoute((uint64_t)a2);
      *(_WORD *)(v17 + 12) = 2080;
      memcpy(__dst, (const void *)(a3 + 40), 0x204uLL);
      memcpy(v32, (const void *)(a3 + 40), 0x204uLL);
      outlined retain of ConnectionConfiguration(__dst);
      uint64_t v23 = String.init<A>(describing:)();
      v32[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_25D6CC000, v15, v16, "Connection - Start: Background Connection. Starting route %s with connection configuration: %s", (uint8_t *)v17, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x2611B3750](v18, -1, -1);
      MEMORY[0x2611B3750](v17, -1, -1);
    }
    else
    {
      outlined release of ConnectionPolicyRoute((uint64_t)a2);
      outlined release of ConnectionPolicyRoute((uint64_t)a2);

      swift_release_n();
    }
    swift_beginAccess();
    uint64_t v25 = (void *)MEMORY[0x2611B37F0](v29);
    uint64_t v26 = &protocol witness table for Connection;
    if (!v25) {
      uint64_t v26 = 0;
    }
    *(void *)(a3 + 24) = v26;
    swift_unknownObjectWeakAssign();

    BackgroundConnection.start()();
    if (v27) {
  }
    }
}

void Connection.waitForActiveConnectionToExecute(_:)()
{
  OUTLINED_FUNCTION_22();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  type metadata accessor for DispatchWorkItemFlags();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v6);
  uint64_t v15 = OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_0();
  uint64_t v8 = v7;
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_2();
  uint64_t v10 = *(void **)(v0 + OBJC_IVAR___SNConnectionInternal_activeConnectionGroup);
  v16[4] = v5;
  v16[5] = v3;
  v16[0] = MEMORY[0x263EF8330];
  OUTLINED_FUNCTION_126(COERCE_DOUBLE(1107296256));
  _OWORD v16[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v16[3] = &block_descriptor_162;
  unint64_t v11 = _Block_copy(v16);
  id v12 = v10;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  OUTLINED_FUNCTION_8_9();
  OS_dispatch_group.notify(qos:flags:queue:execute:)();
  _Block_release(v11);

  uint64_t v13 = OUTLINED_FUNCTION_6();
  v14(v13);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v1, v15);
  swift_release();
  OUTLINED_FUNCTION_29();
}

uint64_t specialized Connection.accessPotentiallyActiveConnections(_:)(uint64_t a1, void *a2, void (*a3)(void), uint64_t a4)
{
  if (*(unsigned char *)(a1 + OBJC_IVAR___SNConnectionInternal_isCanceledInternal) == 1)
  {
    if (!a3)
    {
LABEL_39:
      swift_unknownObjectRelease();
      return outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?((uint64_t)a3);
    }
LABEL_3:
    lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
    uint64_t v7 = (void *)swift_allocError();
    *(void *)(v8 + 8) = 0;
    *(void *)(v8 + 16) = 0;
    *(void *)uint64_t v8 = 3;
    *(_OWORD *)(v8 + 24) = xmmword_25D790FF0;
    a3();

    goto LABEL_39;
  }
  if (*(void *)(a1 + OBJC_IVAR___SNConnectionInternal_activeBackgroundConnection))
  {
    swift_retain();
    BackgroundConnection.sendCommand(_:moreComing:with:)(a2, 0, a3, a4);
    swift_unknownObjectRelease();
    swift_release();
    return outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?((uint64_t)a3);
  }
  uint64_t v9 = (uint64_t *)(a1 + OBJC_IVAR___SNConnectionInternal_pendingBackgroundConnections);
  swift_beginAccess();
  uint64_t v10 = *v9;
  uint64_t v11 = swift_bridgeObjectRetain();
  uint64_t result = specialized Set.isEmpty.getter(v11);
  if (result)
  {
    swift_bridgeObjectRelease();
    if (!a3) {
      goto LABEL_39;
    }
    goto LABEL_3;
  }
  if ((v10 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    type metadata accessor for BackgroundConnection();
    _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1(&lazy protocol witness table cache variable for type BackgroundConnection and conformance BackgroundConnection, (void (*)(uint64_t))type metadata accessor for BackgroundConnection);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v10 = v29;
    uint64_t v27 = v30;
    uint64_t v13 = v31;
    int64_t v14 = v32;
    unint64_t v15 = v33;
  }
  else
  {
    int64_t v14 = 0;
    uint64_t v16 = -1 << *(unsigned char *)(v10 + 32);
    uint64_t v27 = v10 + 56;
    uint64_t v13 = ~v16;
    uint64_t v17 = -v16;
    if (v17 < 64) {
      uint64_t v18 = ~(-1 << v17);
    }
    else {
      uint64_t v18 = -1;
    }
    unint64_t v15 = v18 & *(void *)(v10 + 56);
  }
  int64_t v19 = (unint64_t)(v13 + 64) >> 6;
  if (v10 < 0) {
    goto LABEL_18;
  }
LABEL_16:
  if (v15)
  {
    uint64_t v20 = (v15 - 1) & v15;
    unint64_t v21 = __clz(__rbit64(v15)) | (v14 << 6);
    int64_t v22 = v14;
    goto LABEL_34;
  }
  int64_t v24 = v14 + 1;
  if (!__OFADD__(v14, 1))
  {
    if (v24 < v19)
    {
      unint64_t v25 = *(void *)(v27 + 8 * v24);
      int64_t v22 = v14 + 1;
      if (v25) {
        goto LABEL_33;
      }
      int64_t v22 = v14 + 2;
      if (v14 + 2 >= v19) {
        goto LABEL_38;
      }
      unint64_t v25 = *(void *)(v27 + 8 * v22);
      if (v25) {
        goto LABEL_33;
      }
      int64_t v22 = v14 + 3;
      if (v14 + 3 >= v19) {
        goto LABEL_38;
      }
      unint64_t v25 = *(void *)(v27 + 8 * v22);
      if (v25)
      {
LABEL_33:
        uint64_t v20 = (v25 - 1) & v25;
        unint64_t v21 = __clz(__rbit64(v25)) + (v22 << 6);
LABEL_34:
        uint64_t v23 = *(void *)(*(void *)(v10 + 48) + 8 * v21);
        swift_retain();
        while (v23)
        {
          swift_retain();
          BackgroundConnection.sendCommand(_:moreComing:with:)(a2, 0, a3, a4);
          uint64_t result = swift_release_n();
          int64_t v14 = v22;
          unint64_t v15 = v20;
          if ((v10 & 0x8000000000000000) == 0) {
            goto LABEL_16;
          }
LABEL_18:
          if (!__CocoaSet.Iterator.next()()) {
            goto LABEL_38;
          }
          type metadata accessor for BackgroundConnection();
          swift_unknownObjectRetain();
          swift_dynamicCast();
          uint64_t v23 = v28;
          swift_unknownObjectRelease();
          int64_t v22 = v14;
          uint64_t v20 = v15;
        }
        goto LABEL_38;
      }
      int64_t v22 = v14 + 4;
      if (v14 + 4 < v19)
      {
        unint64_t v25 = *(void *)(v27 + 8 * v22);
        if (!v25)
        {
          int64_t v26 = v14 + 5;
          while (v26 < v19)
          {
            unint64_t v25 = *(void *)(v27 + 8 * v26++);
            if (v25)
            {
              int64_t v22 = v26 - 1;
              goto LABEL_33;
            }
          }
          goto LABEL_38;
        }
        goto LABEL_33;
      }
    }
LABEL_38:
    outlined consume of [String : UInt64].Iterator._Variant();
    goto LABEL_39;
  }
  __break(1u);
  return result;
}

uint64_t specialized Connection.accessPotentiallyActiveConnections(_:)(uint64_t a1, unint64_t a2, void (*a3)(uint64_t, void *))
{
  if (*(unsigned char *)(a1 + OBJC_IVAR___SNConnectionInternal_isCanceledInternal) == 1) {
    goto LABEL_2;
  }
  if (*(void *)(a1 + OBJC_IVAR___SNConnectionInternal_activeBackgroundConnection))
  {
    uint64_t v5 = swift_retain();
    closure #1 in closure #1 in Connection.sendCommands(_:with:)(v5, a2, a3);
    swift_bridgeObjectRelease();
    swift_release();
    return outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?((uint64_t)a3);
  }
  uint64_t v7 = (uint64_t *)(a1 + OBJC_IVAR___SNConnectionInternal_pendingBackgroundConnections);
  swift_beginAccess();
  uint64_t v8 = *v7;
  uint64_t v9 = swift_bridgeObjectRetain();
  uint64_t result = specialized Set.isEmpty.getter(v9);
  if (result)
  {
    swift_bridgeObjectRelease();
LABEL_2:
    closure #1 in closure #1 in Connection.sendCommands(_:with:)(0, a2, a3);
LABEL_3:
    swift_bridgeObjectRelease();
    return outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?((uint64_t)a3);
  }
  if ((v8 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    type metadata accessor for BackgroundConnection();
    _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1(&lazy protocol witness table cache variable for type BackgroundConnection and conformance BackgroundConnection, (void (*)(uint64_t))type metadata accessor for BackgroundConnection);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v8 = v26;
    uint64_t v24 = v27;
    uint64_t v10 = v28;
    int64_t v11 = v29;
    unint64_t v12 = v30;
  }
  else
  {
    int64_t v11 = 0;
    uint64_t v13 = -1 << *(unsigned char *)(v8 + 32);
    uint64_t v24 = v8 + 56;
    uint64_t v10 = ~v13;
    uint64_t v14 = -v13;
    if (v14 < 64) {
      uint64_t v15 = ~(-1 << v14);
    }
    else {
      uint64_t v15 = -1;
    }
    unint64_t v12 = v15 & *(void *)(v8 + 56);
  }
  int64_t v16 = (unint64_t)(v10 + 64) >> 6;
  if (v8 < 0) {
    goto LABEL_18;
  }
LABEL_16:
  if (v12)
  {
    uint64_t v17 = (v12 - 1) & v12;
    unint64_t v18 = __clz(__rbit64(v12)) | (v11 << 6);
    int64_t v19 = v11;
    goto LABEL_34;
  }
  int64_t v21 = v11 + 1;
  if (!__OFADD__(v11, 1))
  {
    if (v21 < v16)
    {
      unint64_t v22 = *(void *)(v24 + 8 * v21);
      int64_t v19 = v11 + 1;
      if (v22) {
        goto LABEL_33;
      }
      int64_t v19 = v11 + 2;
      if (v11 + 2 >= v16) {
        goto LABEL_38;
      }
      unint64_t v22 = *(void *)(v24 + 8 * v19);
      if (v22) {
        goto LABEL_33;
      }
      int64_t v19 = v11 + 3;
      if (v11 + 3 >= v16) {
        goto LABEL_38;
      }
      unint64_t v22 = *(void *)(v24 + 8 * v19);
      if (v22)
      {
LABEL_33:
        uint64_t v17 = (v22 - 1) & v22;
        unint64_t v18 = __clz(__rbit64(v22)) + (v19 << 6);
LABEL_34:
        uint64_t v20 = *(void *)(*(void *)(v8 + 48) + 8 * v18);
        swift_retain();
        while (v20)
        {
          swift_retain();
          BackgroundConnection.sendCommands(_:with:)();
          uint64_t result = swift_release_n();
          int64_t v11 = v19;
          unint64_t v12 = v17;
          if ((v8 & 0x8000000000000000) == 0) {
            goto LABEL_16;
          }
LABEL_18:
          if (!__CocoaSet.Iterator.next()()) {
            goto LABEL_38;
          }
          type metadata accessor for BackgroundConnection();
          swift_unknownObjectRetain();
          swift_dynamicCast();
          uint64_t v20 = v25;
          swift_unknownObjectRelease();
          int64_t v19 = v11;
          uint64_t v17 = v12;
        }
        goto LABEL_38;
      }
      int64_t v19 = v11 + 4;
      if (v11 + 4 < v16)
      {
        unint64_t v22 = *(void *)(v24 + 8 * v19);
        if (!v22)
        {
          int64_t v23 = v11 + 5;
          while (v23 < v16)
          {
            unint64_t v22 = *(void *)(v24 + 8 * v23++);
            if (v22)
            {
              int64_t v19 = v23 - 1;
              goto LABEL_33;
            }
          }
          goto LABEL_38;
        }
        goto LABEL_33;
      }
    }
LABEL_38:
    outlined consume of [String : UInt64].Iterator._Variant();
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

void Connection.accessPotentiallyActiveConnections(_:)(void (*a1)(uint64_t))
{
  if (*(unsigned char *)(v1 + OBJC_IVAR___SNConnectionInternal_isCanceledInternal)) {
    goto LABEL_2;
  }
  if (!*(void *)(v1 + OBJC_IVAR___SNConnectionInternal_activeBackgroundConnection))
  {
    uint64_t v5 = (uint64_t *)(v1 + OBJC_IVAR___SNConnectionInternal_pendingBackgroundConnections);
    OUTLINED_FUNCTION_24_2();
    uint64_t v6 = *v5;
    uint64_t v7 = swift_bridgeObjectRetain();
    if (specialized Set.isEmpty.getter(v7))
    {
      swift_bridgeObjectRelease();
LABEL_2:
      a1(0);
LABEL_3:
      OUTLINED_FUNCTION_58_2();
      return;
    }
    if ((v6 & 0xC000000000000001) != 0)
    {
      __CocoaSet.makeIterator()();
      type metadata accessor for BackgroundConnection();
      _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1(&lazy protocol witness table cache variable for type BackgroundConnection and conformance BackgroundConnection, (void (*)(uint64_t))type metadata accessor for BackgroundConnection);
      Set.Iterator.init(_cocoa:)();
      uint64_t v6 = v25;
      uint64_t v23 = v26;
      uint64_t v8 = v27;
      int64_t v9 = v28;
      unint64_t v10 = v29;
    }
    else
    {
      int64_t v9 = 0;
      uint64_t v11 = -1 << *(unsigned char *)(v6 + 32);
      uint64_t v23 = v6 + 56;
      uint64_t v8 = ~v11;
      uint64_t v12 = -v11;
      if (v12 < 64) {
        uint64_t v13 = ~(-1 << v12);
      }
      else {
        uint64_t v13 = -1;
      }
      unint64_t v10 = v13 & *(void *)(v6 + 56);
    }
    int64_t v14 = (unint64_t)(v8 + 64) >> 6;
    if (v6 < 0) {
      goto LABEL_19;
    }
LABEL_17:
    if (v10)
    {
      uint64_t v15 = (v10 - 1) & v10;
      unint64_t v16 = __clz(__rbit64(v10)) | (v9 << 6);
      int64_t v17 = v9;
      goto LABEL_35;
    }
    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      return;
    }
    if (v19 < v14)
    {
      unint64_t v20 = *(void *)(v23 + 8 * v19);
      int64_t v17 = v9 + 1;
      if (v20) {
        goto LABEL_34;
      }
      int64_t v17 = v9 + 2;
      if (v9 + 2 >= v14) {
        goto LABEL_39;
      }
      unint64_t v20 = *(void *)(v23 + 8 * v17);
      if (v20) {
        goto LABEL_34;
      }
      int64_t v17 = v9 + 3;
      if (v9 + 3 >= v14) {
        goto LABEL_39;
      }
      unint64_t v20 = *(void *)(v23 + 8 * v17);
      if (v20)
      {
LABEL_34:
        uint64_t v15 = (v20 - 1) & v20;
        unint64_t v16 = __clz(__rbit64(v20)) + (v17 << 6);
LABEL_35:
        uint64_t v18 = *(void *)(*(void *)(v6 + 48) + 8 * v16);
        swift_retain();
        while (v18)
        {
          uint64_t v22 = swift_retain();
          a1(v22);
          swift_release_n();
          int64_t v9 = v17;
          unint64_t v10 = v15;
          if ((v6 & 0x8000000000000000) == 0) {
            goto LABEL_17;
          }
LABEL_19:
          if (!__CocoaSet.Iterator.next()()) {
            goto LABEL_39;
          }
          type metadata accessor for BackgroundConnection();
          swift_unknownObjectRetain();
          swift_dynamicCast();
          uint64_t v18 = v24;
          swift_unknownObjectRelease();
          int64_t v17 = v9;
          uint64_t v15 = v10;
        }
        goto LABEL_39;
      }
      int64_t v17 = v9 + 4;
      if (v9 + 4 < v14)
      {
        unint64_t v20 = *(void *)(v23 + 8 * v17);
        if (!v20)
        {
          int64_t v21 = v9 + 5;
          while (v21 < v14)
          {
            unint64_t v20 = *(void *)(v23 + 8 * v21++);
            if (v20)
            {
              int64_t v17 = v21 - 1;
              goto LABEL_34;
            }
          }
          goto LABEL_39;
        }
        goto LABEL_34;
      }
    }
LABEL_39:
    outlined consume of [String : UInt64].Iterator._Variant();
    goto LABEL_3;
  }
  uint64_t v3 = swift_retain();
  a1(v3);
  OUTLINED_FUNCTION_58_2();
  swift_release();
}

uint64_t Connection.activeOrAnyPendingConnection()()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___SNConnectionInternal_activeBackgroundConnection);
  if (!v1)
  {
    OUTLINED_FUNCTION_24_2();
    uint64_t v2 = swift_bridgeObjectRetain();
    uint64_t v1 = specialized Collection.first.getter(v2);
    swift_bridgeObjectRelease();
    if (!v1)
    {
      OUTLINED_FUNCTION_24_2();
      uint64_t v3 = swift_bridgeObjectRetain();
      uint64_t v1 = specialized Collection.first.getter(v3);
      swift_bridgeObjectRelease();
    }
  }
  swift_retain();
  return v1;
}

void Connection.cancelSynchronously(_:)(void (*a1)(uint64_t), uint64_t a2)
{
  uint64_t v5 = v2;
  if (*(void *)(v2 + OBJC_IVAR___SNConnectionInternal_activeBackgroundConnection))
  {
    swift_retain();
    BackgroundConnection.cancel()();
    swift_release();
  }
  uint64_t v8 = v2 + OBJC_IVAR___SNConnectionInternal_pendingBackgroundConnections;
  OUTLINED_FUNCTION_24_2();
  uint64_t v9 = *(void *)v8;
  uint64_t v25 = v2;
  if ((*(void *)v8 & 0xC000000000000001) != 0)
  {
    OUTLINED_FUNCTION_98_1();
    __CocoaSet.makeIterator()();
    type metadata accessor for BackgroundConnection();
    _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1(&lazy protocol witness table cache variable for type BackgroundConnection and conformance BackgroundConnection, (void (*)(uint64_t))type metadata accessor for BackgroundConnection);
    Set.Iterator.init(_cocoa:)();
    uint64_t v9 = v27;
    uint64_t v5 = v28;
    uint64_t v8 = v29;
    uint64_t v10 = v30;
    uint64_t v3 = v31;
  }
  else
  {
    OUTLINED_FUNCTION_19_4();
    uint64_t v10 = 0;
  }
  OUTLINED_FUNCTION_96_1();
  if (v9 < 0) {
    goto LABEL_9;
  }
  while (1)
  {
    if (v3)
    {
      OUTLINED_FUNCTION_54_2();
      goto LABEL_26;
    }
    uint64_t v12 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
LABEL_60:
      __break(1u);
      return;
    }
    if (v12 >= a2) {
      goto LABEL_29;
    }
    uint64_t v8 = v10 + 1;
    if (!*(void *)(v5 + 8 * v12))
    {
      uint64_t v8 = v10 + 2;
      if (v10 + 2 >= a2) {
        goto LABEL_29;
      }
      if (!*(void *)(v5 + 8 * v8))
      {
        uint64_t v8 = v10 + 3;
        if (v10 + 3 >= a2) {
          goto LABEL_29;
        }
        if (!*(void *)(v5 + 8 * v8))
        {
          uint64_t v8 = v10 + 4;
          if (v10 + 4 >= a2) {
            goto LABEL_29;
          }
          if (!*(void *)(v5 + 8 * v8)) {
            break;
          }
        }
      }
    }
LABEL_25:
    OUTLINED_FUNCTION_76_1();
LABEL_26:
    uint64_t v15 = *(void *)(*(void *)(v9 + 48) + 8 * v11);
    swift_retain();
    if (!v15) {
      goto LABEL_30;
    }
    while (1)
    {
      BackgroundConnection.cancel()();
      swift_release();
      uint64_t v10 = v8;
      uint64_t v3 = v4;
      if ((v9 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_9:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for BackgroundConnection();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        swift_unknownObjectRelease();
        uint64_t v8 = v10;
        uint64_t v4 = v3;
        if (v32) {
          continue;
        }
      }
      goto LABEL_30;
    }
  }
  uint64_t v13 = v10 + 5;
  while (v13 < a2)
  {
    if (*(void *)(v5 + 8 * v13++))
    {
      uint64_t v8 = v13 - 1;
      goto LABEL_25;
    }
  }
LABEL_29:
  uint64_t v3 = 0;
LABEL_30:
  OUTLINED_FUNCTION_68_1();
  uint64_t v16 = v25 + OBJC_IVAR___SNConnectionInternal_comatoseBackgroundConnections;
  OUTLINED_FUNCTION_24_2();
  uint64_t v17 = *(void *)v16;
  if ((*(void *)v16 & 0xC000000000000001) != 0)
  {
    OUTLINED_FUNCTION_98_1();
    __CocoaSet.makeIterator()();
    type metadata accessor for BackgroundConnection();
    _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1(&lazy protocol witness table cache variable for type BackgroundConnection and conformance BackgroundConnection, (void (*)(uint64_t))type metadata accessor for BackgroundConnection);
    Set.Iterator.init(_cocoa:)();
    uint64_t v17 = v32;
    uint64_t v5 = v33;
    uint64_t v16 = v34;
    uint64_t v18 = v35;
    uint64_t v3 = v36;
  }
  else
  {
    OUTLINED_FUNCTION_19_4();
    uint64_t v18 = 0;
  }
  OUTLINED_FUNCTION_96_1();
  if (v17 < 0) {
    goto LABEL_36;
  }
LABEL_34:
  if (v3)
  {
    OUTLINED_FUNCTION_54_2();
LABEL_53:
    uint64_t v23 = *(void *)(*(void *)(v17 + 48) + 8 * v19);
    swift_retain();
    if (!v23) {
      goto LABEL_56;
    }
    while (1)
    {
      BackgroundConnection.cancel()();
      swift_release();
      uint64_t v18 = v16;
      uint64_t v3 = v4;
      if ((v17 & 0x8000000000000000) == 0) {
        goto LABEL_34;
      }
LABEL_36:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for BackgroundConnection();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        swift_unknownObjectRelease();
        uint64_t v16 = v18;
        uint64_t v4 = v3;
        if (v26) {
          continue;
        }
      }
      goto LABEL_56;
    }
  }
  uint64_t v20 = v18 + 1;
  if (__OFADD__(v18, 1)) {
    goto LABEL_60;
  }
  if (v20 >= a2) {
    goto LABEL_56;
  }
  uint64_t v16 = v18 + 1;
  if (*(void *)(v5 + 8 * v20)) {
    goto LABEL_52;
  }
  uint64_t v16 = v18 + 2;
  if (v18 + 2 >= a2) {
    goto LABEL_56;
  }
  if (*(void *)(v5 + 8 * v16)) {
    goto LABEL_52;
  }
  uint64_t v16 = v18 + 3;
  if (v18 + 3 >= a2) {
    goto LABEL_56;
  }
  if (*(void *)(v5 + 8 * v16)) {
    goto LABEL_52;
  }
  uint64_t v16 = v18 + 4;
  if (v18 + 4 >= a2) {
    goto LABEL_56;
  }
  if (*(void *)(v5 + 8 * v16))
  {
LABEL_52:
    OUTLINED_FUNCTION_76_1();
    goto LABEL_53;
  }
  uint64_t v21 = v18 + 5;
  while (v21 < a2)
  {
    if (*(void *)(v5 + 8 * v21++))
    {
      uint64_t v16 = v21 - 1;
      goto LABEL_52;
    }
  }
LABEL_56:
  uint64_t v24 = OUTLINED_FUNCTION_68_1();
  *(unsigned char *)(v25 + OBJC_IVAR___SNConnectionInternal_isCanceledInternal) = 1;
  if (a1) {
    a1(v24);
  }
}

uint64_t specialized Connection.handleCloseAndErrorEventsFromBackgroundConnection(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4 = a4;
  uint64_t v5 = OBJC_IVAR___SNConnectionInternal_activeBackgroundConnection;
  uint64_t v6 = *(void *)(a2 + OBJC_IVAR___SNConnectionInternal_activeBackgroundConnection);
  if (v6) {
    BOOL v7 = v6 == a1;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    closure #2 in closure #1 in Connection.didClose(_:)(1, 0, a3, a4);
LABEL_9:
    swift_release();
    return swift_release();
  }
  uint64_t v8 = a2;
  uint64_t v10 = (uint64_t *)(a2 + OBJC_IVAR___SNConnectionInternal_pendingBackgroundConnections);
  swift_beginAccess();
  uint64_t v11 = *v10;
  if ((*v10 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    char v12 = __CocoaSet.contains(_:)();
    swift_bridgeObjectRelease();
    swift_release();
    if ((v12 & 1) == 0) {
      goto LABEL_17;
    }
    goto LABEL_7;
  }
  if (*(void *)(v11 + 16))
  {
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    specialized BackgroundConnectionProtocol.hash(into:)((uint64_t)__dst);
    Swift::Int v13 = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v11 + 32);
    unint64_t v15 = v13 & ~v14;
    if ((*(void *)(v11 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15))
    {
      uint64_t v53 = v4;
      uint64_t v16 = ~v14;
      while (1)
      {
        memcpy(__dst, (const void *)(*(void *)(*(void *)(v11 + 48) + 8 * v15) + 40), 0x204uLL);
        memcpy(v60, (const void *)(a1 + 40), sizeof(v60));
        if (static ConnectionConfiguration.== infix(_:_:)((uint64_t)__dst, (uint64_t)v60)) {
          break;
        }
        unint64_t v15 = (v15 + 1) & v16;
        if (((*(void *)(v11 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
        {
          swift_bridgeObjectRelease();
          uint64_t v4 = v53;
          goto LABEL_17;
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v4 = v53;
LABEL_7:
      swift_beginAccess();
      swift_retain();
      specialized Set._Variant.insert(_:)();
      swift_endAccess();
      swift_release();
      swift_beginAccess();
      specialized Set._Variant.remove(_:)(a1);
      swift_endAccess();
      swift_release();
      goto LABEL_17;
    }
    swift_bridgeObjectRelease();
  }
LABEL_17:
  uint64_t v17 = *(void *)(a1 + 448);
  if (v17 != 1)
  {
    uint64_t v54 = v4;
    uint64_t v18 = v8;
    uint64_t v55 = *(void *)(a1 + 440);
    uint64_t v56 = *(void *)(a1 + 456);
    uint64_t v19 = *(void *)(a1 + 472);
    uint64_t v57 = *(void *)(a1 + 480);
    uint64_t v50 = v5;
    uint64_t v51 = *(void *)(a1 + 488);
    uint64_t v58 = *(void *)(a1 + 496);
    uint64_t v59 = *(void *)(a1 + 464);
    uint64_t v20 = *(void *)(a1 + 504);
    uint64_t v21 = *(void *)(a1 + 512);
    uint64_t v22 = *(void *)(a1 + 520);
    uint64_t v23 = *(void *)(a1 + 528);
    uint64_t v24 = *(void *)(a1 + 536);
    uint64_t v25 = *(void *)(a1 + 544);
    __int16 v26 = *(_WORD *)(a1 + 552);
    __dst[0] = v55;
    __dst[1] = v17;
    __dst[2] = v56;
    __dst[3] = v59;
    __dst[4] = v19;
    __dst[5] = v57;
    __dst[6] = v51;
    __dst[7] = v58;
    __dst[8] = v20;
    LOBYTE(__dst[9]) = v21 & 1;
    __dst[10] = v22;
    __dst[11] = v23;
    LOBYTE(__dst[12]) = v24;
    __dst[13] = v25;
    LOWORD(__dst[14]) = v26 & 0xFF01;
    uint64_t v52 = v18;
    uint64_t v27 = (uint64_t *)(v18 + OBJC_IVAR___SNConnectionInternal_pendingRoutes);
    swift_beginAccess();
    uint64_t v28 = *v27;
    outlined copy of ConnectionPolicyRoute?(v55, v17);
    swift_bridgeObjectRetain();
    LOBYTE(v22) = specialized Set.contains(_:)(__dst, v28);
    swift_bridgeObjectRelease();
    if (v22)
    {
      swift_beginAccess();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)(v60, __dst);
      swift_endAccess();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_beginAccess();
      specialized Set._Variant.remove(_:)(__dst, (uint64_t)v60);
      uint64_t v48 = *(void *)&v60[8];
      uint64_t v49 = *(void *)v60;
      swift_endAccess();
      uint64_t v5 = v50;
      uint64_t v4 = v54;
      outlined consume of ConnectionPolicyRoute?(v49, v48);
      outlined consume of ConnectionPolicyRoute?(v55, v17);
      uint64_t v8 = v52;
    }
    else
    {
      outlined consume of ConnectionPolicyRoute?(v55, v17);
      uint64_t v4 = v54;
      uint64_t v8 = v52;
      uint64_t v5 = v50;
    }
  }
  if (!*(void *)(v8 + v5))
  {
    uint64_t v29 = swift_bridgeObjectRetain();
    BOOL v30 = specialized Set.isEmpty.getter(v29);
    swift_bridgeObjectRelease();
    if (v30)
    {
      uint64_t v31 = v8 + OBJC_IVAR___SNConnectionInternal_scheduledRoutes;
      swift_beginAccess();
      if (!*(void *)(*(void *)v31 + 16))
      {
        if (one-time initialization token for siriNetwork != -1) {
          swift_once();
        }
        uint64_t v37 = type metadata accessor for Logger();
        __swift_project_value_buffer(v37, (uint64_t)static Logger.siriNetwork);
        uint64_t v38 = Logger.logObject.getter();
        os_log_type_t v39 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v38, v39))
        {
          uint64_t v40 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v40 = 0;
          _os_log_impl(&dword_25D6CC000, v38, v39, "Connection - Status: Background connection. Ran out of pending connections; forwarding close from last backg"
            "round connection",
            v40,
            2u);
          MEMORY[0x2611B3750](v40, -1, -1);
        }

        ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v4)(v41, v42, v43, v44, v45, v46, v47);
        goto LABEL_9;
      }
    }
  }
  if (one-time initialization token for siriNetwork != -1) {
    swift_once();
  }
  uint64_t v32 = type metadata accessor for Logger();
  __swift_project_value_buffer(v32, (uint64_t)static Logger.siriNetwork);
  uint64_t v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v33, v34))
  {
    uint64_t v35 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v35 = 0;
    _os_log_impl(&dword_25D6CC000, v33, v34, "Connection - Status: Background connection. Ignoring connection close from inactive backgrund connection", v35, 2u);
    MEMORY[0x2611B3750](v35, -1, -1);
  }
  swift_release();

  return swift_release();
}

uint64_t specialized Connection.handleCloseAndErrorEventsFromBackgroundConnection(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void (*a5)(uint64_t), uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = (void *)a7;
  uint64_t v10 = a6;
  uint64_t v11 = a4;
  uint64_t v12 = a3;
  uint64_t v13 = a9;
  uint64_t v14 = OBJC_IVAR___SNConnectionInternal_activeBackgroundConnection;
  uint64_t v15 = *(void *)(a2 + OBJC_IVAR___SNConnectionInternal_activeBackgroundConnection);
  if (v15) {
    BOOL v16 = v15 == a1;
  }
  else {
    BOOL v16 = 0;
  }
  if (v16)
  {
    closure #2 in closure #1 in Connection.didEncounterError(_:error:analysisInfo:)(1, 0, a3, a4, a5, a6, a7, a8, a9);
    goto LABEL_26;
  }
  uint64_t v17 = a2;
  uint64_t v19 = (uint64_t *)(a2 + OBJC_IVAR___SNConnectionInternal_pendingBackgroundConnections);
  swift_beginAccess();
  uint64_t v20 = *v19;
  if ((*v19 & 0xC000000000000001) == 0)
  {
    if (!*(void *)(v20 + 16)) {
      goto LABEL_17;
    }
    uint64_t v22 = v9;
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    specialized BackgroundConnectionProtocol.hash(into:)((uint64_t)__dst);
    Swift::Int v23 = Hasher._finalize()();
    uint64_t v24 = -1 << *(unsigned char *)(v20 + 32);
    unint64_t v25 = v23 & ~v24;
    if (((*(void *)(v20 + 56 + ((v25 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v25) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      uint64_t v9 = v22;
LABEL_16:
      uint64_t v13 = a9;
      goto LABEL_17;
    }
    uint64_t v54 = v11;
    uint64_t v26 = v10;
    uint64_t v27 = ~v24;
    while (1)
    {
      memcpy(__dst, (const void *)(*(void *)(*(void *)(v20 + 48) + 8 * v25) + 40), 0x204uLL);
      memcpy(v66, (const void *)(a1 + 40), sizeof(v66));
      if (static ConnectionConfiguration.== infix(_:_:)((uint64_t)__dst, (uint64_t)v66)) {
        break;
      }
      unint64_t v25 = (v25 + 1) & v27;
      if (((*(void *)(v20 + 56 + ((v25 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v25) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v10 = v26;
        uint64_t v9 = v22;
        uint64_t v11 = v54;
        goto LABEL_16;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v10 = v26;
    uint64_t v9 = v22;
    uint64_t v11 = v54;
    uint64_t v13 = a9;
    goto LABEL_7;
  }
  swift_bridgeObjectRetain();
  swift_retain();
  char v21 = __CocoaSet.contains(_:)();
  swift_bridgeObjectRelease();
  swift_release();
  if (v21)
  {
LABEL_7:
    swift_beginAccess();
    swift_retain();
    specialized Set._Variant.insert(_:)();
    swift_endAccess();
    swift_release();
    swift_beginAccess();
    specialized Set._Variant.remove(_:)(a1);
    swift_endAccess();
    swift_release();
  }
LABEL_17:
  uint64_t v28 = *(void *)(a1 + 448);
  if (v28 != 1)
  {
    uint64_t v56 = v14;
    uint64_t v57 = v13;
    uint64_t v51 = v9;
    uint64_t v52 = v10;
    uint64_t v50 = v12;
    uint64_t v55 = v11;
    uint64_t v58 = *(void *)(a1 + 456);
    uint64_t v59 = *(void *)(a1 + 464);
    uint64_t v30 = v17;
    uint64_t v60 = *(void *)(a1 + 472);
    uint64_t v61 = *(void *)(a1 + 480);
    uint64_t v62 = *(void *)(a1 + 496);
    uint64_t v63 = *(void *)(a1 + 488);
    uint64_t v31 = *(void *)(a1 + 504);
    uint64_t v32 = *(void *)(a1 + 512);
    uint64_t v33 = *(void *)(a1 + 520);
    uint64_t v34 = *(void *)(a1 + 528);
    uint64_t v35 = *(void *)(a1 + 536);
    uint64_t v36 = *(void *)(a1 + 544);
    __int16 v37 = *(_WORD *)(a1 + 552);
    __dst[0] = *(void *)(a1 + 440);
    uint64_t v29 = __dst[0];
    __dst[1] = v28;
    __dst[2] = v58;
    __dst[3] = v59;
    __dst[4] = v60;
    __dst[5] = v61;
    __dst[6] = v63;
    __dst[7] = v62;
    __dst[8] = v31;
    LOBYTE(__dst[9]) = v32 & 1;
    __dst[10] = v33;
    __dst[11] = v34;
    LOBYTE(__dst[12]) = v35;
    __dst[13] = v36;
    LOWORD(__dst[14]) = v37 & 0xFF01;
    uint64_t v53 = v30;
    uint64_t v38 = (uint64_t *)(v30 + OBJC_IVAR___SNConnectionInternal_pendingRoutes);
    uint64_t v39 = v28;
    swift_beginAccess();
    uint64_t v40 = *v38;
    uint64_t v49 = v29;
    outlined copy of ConnectionPolicyRoute?(v29, v39);
    swift_bridgeObjectRetain();
    LOBYTE(v37) = specialized Set.contains(_:)(__dst, v40);
    swift_bridgeObjectRelease();
    if (v37)
    {
      swift_beginAccess();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)(v66, __dst);
      swift_endAccess();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_beginAccess();
      specialized Set._Variant.remove(_:)(__dst, (uint64_t)v66);
      uint64_t v47 = *(void *)&v66[8];
      uint64_t v48 = *(void *)v66;
      swift_endAccess();
      uint64_t v14 = v56;
      uint64_t v9 = v51;
      uint64_t v10 = v52;
      outlined consume of ConnectionPolicyRoute?(v48, v47);
      outlined consume of ConnectionPolicyRoute?(v49, v39);
      uint64_t v17 = v53;
      uint64_t v11 = v55;
      uint64_t v13 = v57;
      uint64_t v12 = v50;
    }
    else
    {
      outlined consume of ConnectionPolicyRoute?(v29, v39);
      uint64_t v17 = v53;
      uint64_t v11 = v55;
      uint64_t v14 = v56;
      uint64_t v13 = v57;
      uint64_t v12 = v50;
      uint64_t v9 = v51;
      uint64_t v10 = v52;
    }
  }
  if (*(void *)(v17 + v14)
    || (v41 = swift_bridgeObjectRetain(), BOOL v42 = specialized Set.isEmpty.getter(v41), swift_bridgeObjectRelease(), !v42)
    || (uint64_t v43 = v17 + OBJC_IVAR___SNConnectionInternal_scheduledRoutes,
        swift_beginAccess(),
        *(void *)(*(void *)v43 + 16)))
  {
    uint64_t v46 = v13;
    char v44 = 0;
  }
  else
  {
    uint64_t v46 = v13;
    char v44 = 1;
  }
  closure #2 in closure #1 in Connection.didEncounterError(_:error:analysisInfo:)(0, v44, v12, v11, a5, v10, (uint64_t)v9, a8, v46);
LABEL_26:
  swift_release();

  swift_bridgeObjectRelease();
  return swift_release();
}

id Connection.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void Connection.init()()
{
}

void Connection.delegate.modify(void **a1, char a2)
{
  uint64_t v3 = *a1;
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }

  free(v3);
}

void protocol witness for ConnectionProtocol.start() in conformance Connection()
{
}

uint64_t specialized Sequence<>.max()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  double v2 = *(double *)(a1 + 32);
  uint64_t v3 = v1 - 1;
  if (v1 != 1)
  {
    uint64_t v4 = (double *)(a1 + 40);
    do
    {
      double v5 = *v4++;
      double v6 = v5;
      if (v2 < v5) {
        double v2 = v6;
      }
      --v3;
    }
    while (v3);
  }
  return *(void *)&v2;
}

uint64_t type metadata accessor for Connection()
{
  return self;
}

id @nonobjc SNConnectionAnalysisInfo.init(connectionURL:interfaceIndex:sendBufferSize:wwanPreferred:connectionType:policyId:)(uint64_t a1, uint64_t a2, void *a3, char a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  uint64_t v16 = type metadata accessor for URL();
  uint64_t v18 = 0;
  if (__swift_getEnumTagSinglePayload(a1, 1, v16) != 1)
  {
    URL._bridgeToObjectiveC()(v17);
    uint64_t v18 = v19;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(a1, v16);
  }
  if (a7)
  {
    uint64_t v20 = (void *)MEMORY[0x2611B2220](a6, a7);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v20 = 0;
  }
  id v21 = objc_msgSend(v8, sel_initWithConnectionURL_interfaceIndex_sendBufferSize_wwanPreferred_connectionType_policyId_, v18, a2, a3, a4 & 1, a5, v20);

  return v21;
}

void specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  OUTLINED_FUNCTION_28_4();
  if (v2)
  {
    OUTLINED_FUNCTION_13_5();
    if (v3 != v4)
    {
      OUTLINED_FUNCTION_33_5();
      if (v3)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_12_6();
    }
  }
  OUTLINED_FUNCTION_11_5();
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    double v5 = (const void *)swift_allocObject();
    size_t v6 = _swift_stdlib_malloc_size(v5);
    OUTLINED_FUNCTION_65_1(v6 - 32);
  }
  if (v0)
  {
    BOOL v7 = (char *)OUTLINED_FUNCTION_31_2();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v7, v8, v9);
    OUTLINED_FUNCTION_30_4();
  }
  else
  {
    uint64_t v10 = OUTLINED_FUNCTION_14_4();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v10, v11, v12, v13);
  }
}

{
  char v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  const void *v5;
  size_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  OUTLINED_FUNCTION_28_4();
  if (v2)
  {
    OUTLINED_FUNCTION_13_5();
    if (v3 != v4)
    {
      OUTLINED_FUNCTION_33_5();
      if (v3)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_12_6();
    }
  }
  OUTLINED_FUNCTION_11_5();
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ConnectionTCPInfoMetrics>);
    double v5 = (const void *)swift_allocObject();
    size_t v6 = _swift_stdlib_malloc_size(v5);
    OUTLINED_FUNCTION_65_1(v6 - 32);
  }
  if (v0)
  {
    BOOL v7 = (char *)OUTLINED_FUNCTION_31_2();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v7, v8, v9);
    OUTLINED_FUNCTION_30_4();
  }
  else
  {
    uint64_t v10 = OUTLINED_FUNCTION_14_4();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v10, v11, v12, v13);
  }
}

{
  char v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  void *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_28_4();
  if (v2)
  {
    OUTLINED_FUNCTION_13_5();
    if (v3 != v4)
    {
      OUTLINED_FUNCTION_33_5();
      if (v3)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_12_6();
    }
  }
  OUTLINED_FUNCTION_11_5();
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ConnectionInterfaceReport>);
    double v5 = (void *)OUTLINED_FUNCTION_21_4();
    OUTLINED_FUNCTION_6_12(v5);
  }
  if (v0)
  {
    size_t v6 = (char *)OUTLINED_FUNCTION_31_2();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v6, v7, v8);
    OUTLINED_FUNCTION_30_4();
  }
  else
  {
    uint64_t v9 = OUTLINED_FUNCTION_14_4();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v9, v10, v11, v12);
  }
}

{
  char v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  void *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_28_4();
  if (v2)
  {
    OUTLINED_FUNCTION_13_5();
    if (v3 != v4)
    {
      OUTLINED_FUNCTION_33_5();
      if (v3)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_12_6();
    }
  }
  OUTLINED_FUNCTION_11_5();
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ConnectionResolutionReport>);
    double v5 = (void *)OUTLINED_FUNCTION_21_4();
    OUTLINED_FUNCTION_6_12(v5);
  }
  if (v0)
  {
    size_t v6 = (char *)OUTLINED_FUNCTION_31_2();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v6, v7, v8);
    OUTLINED_FUNCTION_30_4();
  }
  else
  {
    uint64_t v9 = OUTLINED_FUNCTION_14_4();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v9, v10, v11, v12);
  }
}

{
  char v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  void *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_28_4();
  if (v2)
  {
    OUTLINED_FUNCTION_13_5();
    if (v3 != v4)
    {
      OUTLINED_FUNCTION_33_5();
      if (v3)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_12_6();
    }
  }
  OUTLINED_FUNCTION_11_5();
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ConnectionHandshakeReport>);
    double v5 = (void *)OUTLINED_FUNCTION_21_4();
    OUTLINED_FUNCTION_6_12(v5);
  }
  if (v0)
  {
    size_t v6 = (char *)OUTLINED_FUNCTION_31_2();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v6, v7, v8);
    OUTLINED_FUNCTION_30_4();
  }
  else
  {
    uint64_t v9 = OUTLINED_FUNCTION_14_4();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v9, v10, v11, v12);
  }
}

{
  char v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  void *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_28_4();
  if (v2)
  {
    OUTLINED_FUNCTION_13_5();
    if (v3 != v4)
    {
      OUTLINED_FUNCTION_33_5();
      if (v3)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_12_6();
    }
  }
  OUTLINED_FUNCTION_11_5();
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ConnectionEndpointReport>);
    double v5 = (void *)OUTLINED_FUNCTION_21_4();
    OUTLINED_FUNCTION_6_12(v5);
  }
  if (v0)
  {
    size_t v6 = (char *)OUTLINED_FUNCTION_31_2();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v6, v7, v8);
    OUTLINED_FUNCTION_30_4();
  }
  else
  {
    uint64_t v9 = OUTLINED_FUNCTION_14_4();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v9, v10, v11, v12);
  }
}

{
  char v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  const void *v5;
  size_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;

  OUTLINED_FUNCTION_28_4();
  if (v2)
  {
    OUTLINED_FUNCTION_13_5();
    if (v3 != v4)
    {
      OUTLINED_FUNCTION_33_5();
      if (v3)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_12_6();
    }
  }
  OUTLINED_FUNCTION_11_5();
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Double>);
    double v5 = (const void *)swift_allocObject();
    size_t v6 = _swift_stdlib_malloc_size(v5);
    OUTLINED_FUNCTION_65_1(v6 - 32);
  }
  if (v0)
  {
    BOOL v7 = (char *)OUTLINED_FUNCTION_31_2();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v7, v8, v9);
    OUTLINED_FUNCTION_30_4();
  }
  else
  {
    uint64_t v10 = OUTLINED_FUNCTION_14_4();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v10, v11, v12, v13);
  }
}

{
  char v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  void *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_28_4();
  if (v2)
  {
    OUTLINED_FUNCTION_13_5();
    if (v3 != v4)
    {
      OUTLINED_FUNCTION_33_5();
      if (v3)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_12_6();
    }
  }
  OUTLINED_FUNCTION_11_5();
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<ConnectionMetrics>);
    double v5 = (void *)OUTLINED_FUNCTION_21_4();
    OUTLINED_FUNCTION_6_12(v5);
  }
  if (v0)
  {
    size_t v6 = (char *)OUTLINED_FUNCTION_31_2();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v6, v7, v8);
    OUTLINED_FUNCTION_30_4();
  }
  else
  {
    uint64_t v9 = OUTLINED_FUNCTION_14_4();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v9, v10, v11, v12);
  }
}

{
  char v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  void *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_28_4();
  if (v2)
  {
    OUTLINED_FUNCTION_13_5();
    if (v3 != v4)
    {
      OUTLINED_FUNCTION_33_5();
      if (v3)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_12_6();
    }
  }
  OUTLINED_FUNCTION_11_5();
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<ConnectionPolicyRoute>);
    double v5 = (void *)OUTLINED_FUNCTION_21_4();
    OUTLINED_FUNCTION_6_12(v5);
  }
  if (v0)
  {
    size_t v6 = (char *)OUTLINED_FUNCTION_31_2();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v6, v7, v8);
    OUTLINED_FUNCTION_30_4();
  }
  else
  {
    uint64_t v9 = OUTLINED_FUNCTION_14_4();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v9, v10, v11, v12);
  }
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + (a1 << 8) + 32;
    unint64_t v6 = a3 + (v4 << 8);
    if (v5 >= v6 || v5 + (v4 << 8) <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 296 * a1 + 32;
    unint64_t v6 = a3 + 296 * v4;
    if (v5 >= v6 || v5 + 296 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 80 * a1 + 32;
    unint64_t v6 = a3 + 80 * v4;
    if (v5 >= v6 || v5 + 80 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 48 * a1 + 32;
    unint64_t v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 1440 * a1 + 32;
    unint64_t v6 = a3 + 1440 * v4;
    if (v5 >= v6 || v5 + 1440 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 120 * a1 + 32;
    unint64_t v6 = a3 + 120 * v4;
    if (v5 >= v6 || v5 + 120 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    unint64_t v6 = &__dst[8 * v4];
    if (v5 >= v6 || &v5[8 * v4] <= __dst)
    {
      memcpy(__dst, v5, 8 * v4);
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_1_0();
    uint64_t result = (char *)OUTLINED_FUNCTION_15_3();
    __break(1u);
  }
  else if (a3 != result || &result[16 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_20_4(a3, result);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_1_0();
    uint64_t result = (char *)OUTLINED_FUNCTION_15_3();
    __break(1u);
  }
  else if (a3 != result || &result[32 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_20_4(a3, result);
  }
  return result;
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    uint64_t __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[256 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, a2 << 8);
  }
  return __src;
}

{
  uint64_t v3;

  if (a2 < 0)
  {
    uint64_t __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[296 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 296 * a2);
  }
  return __src;
}

{
  uint64_t v3;

  if (a2 < 0)
  {
    uint64_t __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[80 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 80 * a2);
  }
  return __src;
}

{
  uint64_t v3;

  if (a2 < 0)
  {
    uint64_t __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[48 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 48 * a2);
  }
  return __src;
}

{
  uint64_t v3;

  if (a2 < 0)
  {
    uint64_t __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[24 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 24 * a2);
  }
  return __src;
}

{
  uint64_t v3;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_1_0();
    uint64_t __src = (char *)OUTLINED_FUNCTION_15_3();
    __break(1u);
  }
  else if (__dst != __src || &__src[120 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 120 * a2);
  }
  return __src;
}

{
  uint64_t v3;

  if (a2 < 0)
  {
    uint64_t __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[8 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 8 * a2);
  }
  return __src;
}

{
  uint64_t v3;

  if (a2 < 0)
  {
    uint64_t __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[1440 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 1440 * a2);
  }
  return __src;
}

uint64_t specialized UnsafeMutablePointer.initialize(from:count:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_1_0();
    OUTLINED_FUNCTION_43_1();
LABEL_11:
    uint64_t result = OUTLINED_FUNCTION_38_1();
    __break(1u);
    return result;
  }
  if (a3 + 16 * a2 > a1 && a1 + 16 * a2 > a3)
  {
    OUTLINED_FUNCTION_1_0();
    OUTLINED_FUNCTION_42_2();
    goto LABEL_11;
  }

  return swift_arrayInitWithCopy();
}

{
  uint64_t result;
  uint64_t vars8;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_1_0();
    OUTLINED_FUNCTION_43_1();
LABEL_11:
    uint64_t result = OUTLINED_FUNCTION_38_1();
    __break(1u);
    return result;
  }
  if (a3 + 120 * a2 > a1 && a1 + 120 * a2 > a3)
  {
    OUTLINED_FUNCTION_1_0();
    OUTLINED_FUNCTION_42_2();
    goto LABEL_11;
  }

  return swift_arrayInitWithCopy();
}

{
  uint64_t result;
  uint64_t vars8;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_1_0();
    OUTLINED_FUNCTION_43_1();
LABEL_11:
    uint64_t result = OUTLINED_FUNCTION_38_1();
    __break(1u);
    return result;
  }
  if (a3 + 32 * a2 > a1 && a1 + 32 * a2 > a3)
  {
    OUTLINED_FUNCTION_1_0();
    OUTLINED_FUNCTION_42_2();
    goto LABEL_11;
  }

  return swift_arrayInitWithCopy();
}

uint64_t specialized UnsafeMutablePointer.initialize(from:count:)(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_1_0();
    OUTLINED_FUNCTION_43_1();
LABEL_11:
    uint64_t result = OUTLINED_FUNCTION_38_1();
    __break(1u);
    return result;
  }
  OUTLINED_FUNCTION_2_12();
  if (v4 + 16 * v3 > v2 && v2 + 16 * v3 > v4)
  {
    OUTLINED_FUNCTION_1_0();
    OUTLINED_FUNCTION_42_2();
    goto LABEL_11;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: Int, value: [ConnectionPolicyRoute]));

  return swift_arrayInitWithCopy();
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned Int)@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:align:privacy:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t closure #1 in OSLogArguments.append(_:)(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  a4();
  uint64_t v5 = *a1 + 8;
  uint64_t result = UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v5;
  return result;
}

uint64_t sub_25D751A68()
{
  swift_unknownObjectWeakDestroy();
  uint64_t v0 = OUTLINED_FUNCTION_90();

  return MEMORY[0x270FA0238](v0, v1, v2);
}

uint64_t sub_25D751A98()
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(v0 + 24);
  if (*(void *)(v0 + 56)) {
    swift_release();
  }

  return MEMORY[0x270FA0238](v0, 72, 7);
}

void partial apply for closure #1 in Connection.sendData(_:with:)()
{
  closure #1 in Connection.sendData(_:with:)(v0[2], (uint64_t)(v0 + 3), v0[7], v0[8]);
}

uint64_t block_copy_helper_14(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_14()
{
  return swift_release();
}

uint64_t sub_25D751B10()
{
  return objectdestroy_6Tm(MEMORY[0x263F8EEE8]);
}

void partial apply for closure #1 in Connection.sendCommand(_:with:)()
{
  closure #1 in Connection.sendCommand(_:with:)(v0[2], v0[3], v0[4], v0[5], MEMORY[0x263F8EEF0], (void (*)(uint64_t, uint64_t))outlined copy of (@escaping @callee_guaranteed (@guaranteed Error?) -> ())?, (void (*)(void *, uint64_t, uint64_t, uint64_t))specialized Connection.accessPotentiallyActiveConnections(_:));
}

uint64_t sub_25D751B84()
{
  return objectdestroy_6Tm(MEMORY[0x263F8EEA0]);
}

uint64_t objectdestroy_6Tm(void (*a1)(void))
{
  swift_release();
  a1(*(void *)(v1 + 24));
  if (*(void *)(v1 + 32)) {
    swift_release();
  }

  return MEMORY[0x270FA0238](v1, 48, 7);
}

void partial apply for closure #1 in Connection.sendCommands(_:with:)()
{
  closure #1 in Connection.sendCommand(_:with:)(v0[2], v0[3], v0[4], v0[5], MEMORY[0x263F8EEA8], (void (*)(uint64_t, uint64_t))outlined copy of (@escaping @callee_guaranteed (@guaranteed Error?) -> ())?, (void (*)(void *, uint64_t, uint64_t, uint64_t))specialized Connection.accessPotentiallyActiveConnections(_:));
}

uint64_t sub_25D751C58()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 25, 7);
}

void partial apply for closure #1 in Connection.setSendPings(_:)()
{
  closure #1 in Connection.setSendPings(_:)(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

void partial apply for closure #2 in Connection.cancelSynchronously(_:isOnConnectionQueue:with:)()
{
  closure #2 in Connection.cancelSynchronously(_:isOnConnectionQueue:with:)(*(void *)(v0 + 16), *(void (**)(uint64_t))(v0 + 24), *(void *)(v0 + 32));
}

void partial apply for closure #1 in Connection.cancelSynchronously(_:isOnConnectionQueue:with:)()
{
  Connection.cancelSynchronously(_:)(*(void (**)(uint64_t))(v0 + 24), *(void *)(v0 + 32));
}

uint64_t _sIg_Ieg_TRTA_0()
{
  return thunk for @callee_guaranteed () -> ()(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t partial apply for closure #2 in Connection.getConnectionMetrics(_:with:)()
{
  return closure #2 in Connection.getConnectionMetrics(_:with:)(*(void *)(v0 + 16), *(uint64_t (**)(unsigned char *))(v0 + 24));
}

uint64_t objectdestroy_30Tm()
{
  if (*(void *)(v0 + 24)) {
    swift_release();
  }

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t partial apply for closure #1 in Connection.getConnectionMetrics(_:with:)()
{
  return closure #1 in Connection.getConnectionMetrics(_:with:)(*(void *)(v0 + 16), *(uint64_t (**)(unsigned char *))(v0 + 24));
}

void partial apply for closure #1 in Connection.getSNConnectionMetrics(_:with:)(uint64_t a1)
{
}

void partial apply for closure #1 in Connection.getConnectionAnalysisInfo(_:)()
{
  closure #1 in Connection.getConnectionAnalysisInfo(_:)(*(void *)(v0 + 16), *(void (**)(char *))(v0 + 24));
}

void partial apply for closure #1 in Connection.getSNConnectionAnalysisInfo(_:)(uint64_t a1)
{
  closure #1 in Connection.getSNConnectionAnalysisInfo(_:)(a1, *(void (**)(id))(v1 + 16));
}

void partial apply for closure #1 in Connection.probeConnection()()
{
  closure #1 in Connection.probeConnection()(v0);
}

void partial apply for closure #1 in Connection.barrier(with:)()
{
  closure #1 in Connection.barrier(with:)(*(void *)(v0 + 16), *(void (**)(void))(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_25D751D94@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Connection.delegate.getter();
  *a1 = result;
  return result;
}

uint64_t method lookup function for Connection(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for Connection);
}

uint64_t dispatch thunk of Connection.delegate.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of Connection.delegate.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of Connection.delegate.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of Connection.__allocating_init(connectionInfo:connectionQueue:)()
{
  return (*(uint64_t (**)(void))(v0 + 552))();
}

uint64_t dispatch thunk of Connection.start()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x238))();
}

uint64_t dispatch thunk of Connection.sendData(_:with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x240))();
}

uint64_t dispatch thunk of Connection.sendCommand(_:with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x248))();
}

uint64_t dispatch thunk of Connection.sendCommands(_:with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x250))();
}

uint64_t dispatch thunk of Connection.setSendPings(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x258))();
}

uint64_t dispatch thunk of Connection.cancelSynchronously(_:isOnConnectionQueue:with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x260))();
}

uint64_t dispatch thunk of Connection.getConnectionMetrics(_:with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x268))();
}

uint64_t dispatch thunk of Connection.getSNConnectionMetrics(_:with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x270))();
}

uint64_t dispatch thunk of Connection.getConnectionAnalysisInfo(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x278))();
}

uint64_t dispatch thunk of Connection.getSNConnectionAnalysisInfo(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x280))();
}

uint64_t dispatch thunk of Connection.probeConnection()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x288))();
}

uint64_t dispatch thunk of Connection.barrier(with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x290))();
}

uint64_t sub_25D752170()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConnectionAnalysisInfo?);
  OUTLINED_FUNCTION_19_3(v1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v6 = *(void *)(v5 + 64);

  uint64_t v7 = type metadata accessor for ConnectionAnalysisInfo();
  if (!__swift_getEnumTagSinglePayload(v0 + v4, 1, v7))
  {
    uint64_t v8 = type metadata accessor for URL();
    if (!__swift_getEnumTagSinglePayload(v0 + v4, 1, v8)) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v0 + v4, v8);
    }
    swift_bridgeObjectRelease();
  }

  return MEMORY[0x270FA0238](v0, v4 + v6, v3 | 7);
}

void partial apply for closure #1 in closure #1 in Connection.didEncounterError(_:error:analysisInfo:)()
{
  uint64_t v1 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConnectionAnalysisInfo?)
                 - 8);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  closure #1 in closure #1 in Connection.didEncounterError(_:error:analysisInfo:)(v2, v3, v4);
}

void specialized _NativeSet.init(_:capacity:)()
{
  OUTLINED_FUNCTION_77_1();
  if (!v1)
  {
    swift_unknownObjectRelease();
    goto LABEL_18;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NWConnection>);
  uint64_t v11 = OUTLINED_FUNCTION_93_1();
  __CocoaSet.makeIterator()();
  if (!__CocoaSet.Iterator.next()())
  {
LABEL_16:
    swift_release();
LABEL_18:
    OUTLINED_FUNCTION_73_1();
    return;
  }
  type metadata accessor for NWConnection();
  OUTLINED_FUNCTION_95_1();
  while (1)
  {
    OUTLINED_FUNCTION_53_1();
    if (*(void *)(v11 + 24) <= *(void *)(v11 + 16)) {
      specialized _NativeSet.resize(capacity:)();
    }
    Hasher.init(_seed:)();
    Swift::UInt64 v2 = NWConnection.identifier.getter();
    Hasher._combine(_:)(v2);
    Hasher._finalize()();
    OUTLINED_FUNCTION_37_1();
    if (v6) {
      break;
    }
    OUTLINED_FUNCTION_91_0();
LABEL_15:
    if (!OUTLINED_FUNCTION_18_3(v7)) {
      goto LABEL_16;
    }
  }
  char v8 = 0;
  unint64_t v9 = (unint64_t)(v0 - v5) >> 6;
  while (++v4 != v9 || (v8 & 1) == 0)
  {
    BOOL v10 = v4 == v9;
    if (v4 == v9) {
      uint64_t v4 = 0;
    }
    v8 |= v10;
    if (*(void *)(v3 + 8 * v4) != -1)
    {
      OUTLINED_FUNCTION_90_1();
      goto LABEL_15;
    }
  }
  __break(1u);
}

#error "25D7524C8: call analysis failed (funcsize=81)"

unint64_t specialized _NativeSet._unsafeInsertNew(_:)()
{
  OUTLINED_FUNCTION_103_1();
  Swift::UInt64 v0 = NWConnection.identifier.getter();
  Hasher._combine(_:)(v0);
  Hasher._finalize()();
  unint64_t v1 = OUTLINED_FUNCTION_45_2();
  return OUTLINED_FUNCTION_17_4(v1);
}

{
  unint64_t v0;
  unsigned char v2[72];

  OUTLINED_FUNCTION_103_1();
  specialized BackgroundConnectionProtocol.hash(into:)((uint64_t)v2);
  Hasher._finalize()();
  Swift::UInt64 v0 = OUTLINED_FUNCTION_45_2();
  return OUTLINED_FUNCTION_17_4(v0);
}

uint64_t specialized Set._Variant.remove(_:)()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  if ((*v0 & 0xC000000000000001) == 0)
  {
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    Swift::UInt64 v5 = NWConnection.identifier.getter();
    Hasher._combine(_:)(v5);
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1 << *(unsigned char *)(v2 + 32);
    unint64_t v8 = v6 & ~v7;
    OUTLINED_FUNCTION_84_1();
    if (v9)
    {
      swift_retain();
      uint64_t v10 = NWConnection.identifier.getter();
      uint64_t v11 = NWConnection.identifier.getter();
      swift_release();
      if (v10 == v11)
      {
LABEL_9:
        swift_bridgeObjectRelease();
        int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v17 = *v1;
        uint64_t v19 = *v1;
        uint64_t *v1 = 0x8000000000000000;
        if (!isUniquelyReferenced_nonNull_native)
        {
          specialized _NativeSet.copy()();
          uint64_t v17 = v19;
        }
        uint64_t v4 = *(void *)(*(void *)(v17 + 48) + 8 * v8);
        specialized _NativeSet._delete(at:)(v8);
        uint64_t *v1 = v19;
        goto LABEL_12;
      }
      uint64_t v12 = ~v7;
      while (1)
      {
        unint64_t v8 = (v8 + 1) & v12;
        OUTLINED_FUNCTION_84_1();
        if ((v13 & 1) == 0) {
          break;
        }
        swift_retain();
        uint64_t v14 = NWConnection.identifier.getter();
        uint64_t v15 = NWConnection.identifier.getter();
        swift_release();
        if (v14 == v15) {
          goto LABEL_9;
        }
      }
    }
LABEL_13:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  swift_retain();
  char v3 = __CocoaSet.contains(_:)();
  swift_release();
  if ((v3 & 1) == 0) {
    goto LABEL_13;
  }
  uint64_t v4 = specialized Set._Variant._migrateToNative(_:removing:)();
LABEL_12:
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t specialized Set._Variant.remove(_:)@<X0>(void *__src@<X0>, uint64_t a2@<X8>)
{
  char v3 = v2;
  memcpy(__dst, __src, 0x72uLL);
  uint64_t v6 = *v3;
  memcpy(v33, __src, sizeof(v33));
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  ConnectionPolicyRoute.hash(into:)();
  Swift::Int v7 = Hasher._finalize()();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if ((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    uint64_t v11 = *(void *)(v6 + 48);
    while (1)
    {
      uint64_t v12 = v11 + 120 * v9;
      uint64_t v13 = *(void *)(v12 + 64);
      char v14 = *(unsigned char *)(v12 + 72);
      char v15 = *(unsigned char *)(v12 + 96);
      uint64_t v16 = *(void *)(v12 + 104);
      char v17 = *(unsigned char *)(v12 + 112);
      char v18 = *(unsigned char *)(v12 + 113);
      long long v19 = *(_OWORD *)(v12 + 16);
      *(_OWORD *)uint64_t v33 = *(_OWORD *)v12;
      *(_OWORD *)&v33[16] = v19;
      long long v20 = *(_OWORD *)(v12 + 48);
      *(_OWORD *)&v33[32] = *(_OWORD *)(v12 + 32);
      *(_OWORD *)&v33[48] = v20;
      *(void *)&v33[64] = v13;
      v33[72] = v14;
      *(_OWORD *)&v33[80] = *(_OWORD *)(v12 + 80);
      v33[96] = v15;
      *(void *)&v33[104] = v16;
      v33[112] = v17;
      v33[113] = v18;
      if (static ConnectionPolicyRoute.== infix(_:_:)((uint64_t)v33, (uint64_t)__dst)) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v10;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_5;
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v23 = *v3;
    *(void *)uint64_t v33 = *v3;
    *char v3 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeSet.copy()();
      uint64_t v23 = *(void *)v33;
    }
    uint64_t v24 = *(void *)(v23 + 48) + 120 * v9;
    uint64_t v25 = *(void *)(v24 + 64);
    char v26 = *(unsigned char *)(v24 + 72);
    char v27 = *(unsigned char *)(v24 + 96);
    uint64_t v28 = *(void *)(v24 + 104);
    char v29 = *(unsigned char *)(v24 + 112);
    char v30 = *(unsigned char *)(v24 + 113);
    long long v31 = *(_OWORD *)(v24 + 16);
    *(_OWORD *)a2 = *(_OWORD *)v24;
    *(_OWORD *)(a2 + 16) = v31;
    long long v32 = *(_OWORD *)(v24 + 48);
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(v24 + 32);
    *(_OWORD *)(a2 + 48) = v32;
    *(void *)(a2 + 64) = v25;
    *(unsigned char *)(a2 + 72) = v26;
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(v24 + 80);
    *(unsigned char *)(a2 + 96) = v27;
    *(void *)(a2 + 104) = v28;
    *(unsigned char *)(a2 + 112) = v29;
    *(unsigned char *)(a2 + 113) = v30;
    specialized _NativeSet._delete(at:)(v9);
    *char v3 = *(void *)v33;
    return swift_bridgeObjectRelease();
  }
  else
  {
LABEL_5:
    uint64_t result = swift_bridgeObjectRelease();
    *(_OWORD *)a2 = xmmword_25D790AD0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_WORD *)(a2 + 112) = 0;
  }
  return result;
}

uint64_t specialized Set._Variant.remove(_:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  if ((*v1 & 0xC000000000000001) != 0)
  {
    if (v3 < 0) {
      uint64_t v4 = *v1;
    }
    else {
      uint64_t v4 = v3 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    char v5 = __CocoaSet.contains(_:)();
    swift_release();
    if (v5)
    {
      uint64_t v6 = specialized Set._Variant._migrateToNative(_:removing:)(v4, a1);
LABEL_15:
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  else
  {
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    specialized BackgroundConnectionProtocol.hash(into:)((uint64_t)__dst);
    Swift::Int v7 = Hasher._finalize()();
    uint64_t v8 = -1 << *(unsigned char *)(v3 + 32);
    unint64_t v9 = v7 & ~v8;
    if ((*(void *)(v3 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
    {
      uint64_t v10 = ~v8;
      while (1)
      {
        memcpy(__dst, (const void *)(*(void *)(*(void *)(v3 + 48) + 8 * v9) + 40), 0x204uLL);
        memcpy(v14, (const void *)(a1 + 40), 0x204uLL);
        if (static ConnectionConfiguration.== infix(_:_:)((uint64_t)__dst, (uint64_t)v14)) {
          break;
        }
        unint64_t v9 = (v9 + 1) & v10;
        if (((*(void *)(v3 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
          goto LABEL_11;
        }
      }
      swift_bridgeObjectRelease();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v12 = *v1;
      __dst[0] = *v1;
      uint64_t *v1 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized _NativeSet.copy()();
        uint64_t v12 = __dst[0];
      }
      uint64_t v6 = *(void *)(*(void *)(v12 + 48) + 8 * v9);
      specialized _NativeSet._delete(at:)(v9);
      uint64_t *v1 = __dst[0];
      goto LABEL_15;
    }
  }
LABEL_11:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized Set._Variant.remove(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v3;
  Swift::Int v7 = *(void *)(*v3 + 40);
  swift_bridgeObjectRetain();
  Swift::Int v8 = AnyHashable._rawHashValue(seed:)(v7);
  uint64_t v9 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = ~v9;
    while (1)
    {
      outlined init with copy of AnyHashable(*(void *)(v6 + 48) + 40 * v10, (uint64_t)v18);
      char v12 = MEMORY[0x2611B2700](v18, a1);
      outlined destroy of AnyHashable((uint64_t)v18);
      if (v12) {
        break;
      }
      unint64_t v10 = (v10 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        goto LABEL_5;
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v15 = *v3;
    v18[0] = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeSet.copy()();
      uint64_t v15 = v18[0];
    }
    uint64_t v16 = *(void *)(v15 + 48) + 40 * v10;
    long long v17 = *(_OWORD *)(v16 + 16);
    *(_OWORD *)a2 = *(_OWORD *)v16;
    *(_OWORD *)(a2 + 16) = v17;
    *(void *)(a2 + 32) = *(void *)(v16 + 32);
    specialized _NativeSet._delete(at:)(v10);
    *uint64_t v3 = v18[0];
    return swift_bridgeObjectRelease();
  }
  else
  {
LABEL_5:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t specialized Set._Variant._migrateToNative(_:removing:)()
{
  unint64_t v1 = v0;
  swift_bridgeObjectRelease();
  __CocoaSet.count.getter();
  swift_unknownObjectRetain();
  specialized _NativeSet.init(_:capacity:)();
  uint64_t v3 = v2;
  uint64_t v17 = v2;
  Hasher.init(_seed:)();
  swift_retain();
  Swift::UInt64 v4 = NWConnection.identifier.getter();
  Hasher._combine(_:)(v4);
  Swift::Int v5 = Hasher._finalize()();
  uint64_t v6 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v7 = v5 & ~v6;
  if ((*(void *)(v3 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7))
  {
    swift_retain();
    uint64_t v8 = NWConnection.identifier.getter();
    uint64_t v9 = NWConnection.identifier.getter();
    swift_release();
    if (v8 == v9)
    {
LABEL_6:
      swift_release();
      uint64_t v13 = *(void *)(*(void *)(v3 + 48) + 8 * v7);
      specialized _NativeSet._delete(at:)(v7);
      swift_retain();
      swift_retain();
      uint64_t v14 = NWConnection.identifier.getter();
      uint64_t v15 = NWConnection.identifier.getter();
      swift_release();
      swift_release();
      if (v14 == v15)
      {
        void *v1 = v17;
        return v13;
      }
      __break(1u);
    }
    else
    {
      uint64_t v10 = ~v6;
      while (1)
      {
        unint64_t v7 = (v7 + 1) & v10;
        if (((*(void *)(v3 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
          break;
        }
        swift_retain();
        uint64_t v11 = NWConnection.identifier.getter();
        uint64_t v12 = NWConnection.identifier.getter();
        swift_release();
        if (v11 == v12) {
          goto LABEL_6;
        }
      }
    }
    swift_release();
    __break(1u);
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t specialized Set._Variant._migrateToNative(_:removing:)(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = __CocoaSet.count.getter();
  uint64_t v5 = swift_unknownObjectRetain();
  uint64_t v6 = specialized _NativeSet.init(_:capacity:)(v5, v4);
  uint64_t v16 = v6;
  Hasher.init(_seed:)();
  swift_retain();
  specialized BackgroundConnectionProtocol.hash(into:)((uint64_t)__dst);
  Swift::Int v7 = Hasher._finalize()();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if ((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    uint64_t v11 = (const void *)(a2 + 40);
    while (1)
    {
      memcpy(__dst, (const void *)(*(void *)(*(void *)(v6 + 48) + 8 * v9) + 40), 0x204uLL);
      memcpy(v14, v11, 0x204uLL);
      if (static ConnectionConfiguration.== infix(_:_:)((uint64_t)__dst, (uint64_t)v14)) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v10;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
      {
        swift_release();
        __break(1u);
        break;
      }
    }
    swift_release();
    uint64_t v12 = *(void *)(*(void *)(v6 + 48) + 8 * v9);
    specialized _NativeSet._delete(at:)(v9);
    memcpy(__dst, v11, 0x204uLL);
    memcpy(v14, (const void *)(v12 + 40), 0x204uLL);
    if (static ConnectionConfiguration.== infix(_:_:)((uint64_t)__dst, (uint64_t)v14))
    {
      *uint64_t v2 = v16;
      return v12;
    }
    __break(1u);
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

unint64_t specialized _NativeSet._delete(at:)(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_retain();
        Swift::UInt64 v10 = NWConnection.identifier.getter();
        Hasher._combine(_:)(v10);
        Swift::Int v11 = Hasher._finalize()();
        swift_release();
        Swift::Int v12 = v11 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v12 >= v9 && v2 >= v12)
          {
LABEL_15:
            uint64_t v15 = *(void *)(v3 + 48);
            uint64_t v16 = (void *)(v15 + 8 * v2);
            uint64_t v17 = (void *)(v15 + 8 * v6);
            BOOL v18 = v2 != v6 || v16 >= v17 + 1;
            int64_t v2 = v6;
            if (v18)
            {
              *uint64_t v16 = *v17;
              int64_t v2 = v6;
            }
          }
        }
        else if (v12 >= v9 || v2 >= v12)
        {
          goto LABEL_15;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v19 = *(void *)(v3 + 16);
  BOOL v20 = __OFSUB__(v19, 1);
  uint64_t v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v21;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::Int v10;
  Swift::Int v11;
  uint64_t v13;
  void *v14;
  const void *v15;
  unint64_t v16;
  BOOL v18;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      uint64_t v23 = v3;
      uint64_t v24 = v4;
      do
      {
        uint64_t v25 = 120 * v6;
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        ConnectionPolicyRoute.hash(into:)();
        Swift::UInt64 v10 = Hasher._finalize()();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        Swift::Int v11 = v10 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 >= v9 && v2 >= v11)
          {
LABEL_9:
            uint64_t v3 = v23;
            uint64_t v4 = v24;
            uint64_t v13 = *(void *)(v23 + 48);
            uint64_t v14 = (void *)(v13 + 120 * v2);
            uint64_t v15 = (const void *)(v13 + v25);
            uint64_t v16 = v13 + v25 + 120;
            BOOL v18 = 120 * v2 >= v25 && (unint64_t)v14 < v16 && v2 == v6;
            int64_t v2 = v6;
            if (!v18)
            {
              memmove(v14, v15, 0x78uLL);
              int64_t v2 = v6;
            }
            goto LABEL_23;
          }
        }
        else if (v11 >= v9 || v2 >= v11)
        {
          goto LABEL_9;
        }
        uint64_t v3 = v23;
        uint64_t v4 = v24;
LABEL_23:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  BOOL v20 = *(void *)(v3 + 16);
  uint64_t v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v22;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::Int v10;
  Swift::Int v11;
  uint64_t v14;
  void *v15;
  void *v16;
  BOOL v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  unsigned char v21[72];

  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_retain();
        specialized BackgroundConnectionProtocol.hash(into:)((uint64_t)v21);
        Swift::UInt64 v10 = Hasher._finalize()();
        swift_release();
        Swift::Int v11 = v10 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 >= v9 && v2 >= v11)
          {
LABEL_15:
            uint64_t v14 = *(void *)(v3 + 48);
            uint64_t v15 = (void *)(v14 + 8 * v2);
            uint64_t v16 = (void *)(v14 + 8 * v6);
            uint64_t v17 = v2 != v6 || v15 >= v16 + 1;
            int64_t v2 = v6;
            if (v17)
            {
              *uint64_t v15 = *v16;
              int64_t v2 = v6;
            }
          }
        }
        else if (v11 >= v9 || v2 >= v11)
        {
          goto LABEL_15;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  BOOL v18 = *(void *)(v3 + 16);
  uint64_t v19 = __OFSUB__(v18, 1);
  BOOL v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

{
  uint64_t *v1;
  uint64_t *v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  Swift::Int v11;
  Swift::Int v12;
  uint64_t v15;
  unint64_t v16;
  long long *v17;
  BOOL v18;
  long long v19;
  long long v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  unsigned char v25[40];

  int64_t v2 = v1;
  uint64_t v3 = result;
  uint64_t v4 = *v1;
  uint64_t v5 = *v1 + 56;
  unint64_t v6 = -1 << *(unsigned char *)(*v1 + 32);
  uint64_t v7 = (result + 1) & ~v6;
  if (((1 << v7) & *(void *)(v5 + 8 * (v7 >> 6))) != 0)
  {
    uint64_t v8 = ~v6;
    swift_retain();
    unint64_t v9 = _HashTable.previousHole(before:)();
    if ((*(void *)(v5 + 8 * (v7 >> 6)) & (1 << v7)) != 0)
    {
      Swift::UInt64 v10 = (v9 + 1) & v8;
      do
      {
        outlined init with copy of AnyHashable(*(void *)(v4 + 48) + 40 * v7, (uint64_t)v25);
        Swift::Int v11 = AnyHashable._rawHashValue(seed:)(*(void *)(v4 + 40));
        outlined destroy of AnyHashable((uint64_t)v25);
        Swift::Int v12 = v11 & v8;
        if (v3 >= (uint64_t)v10)
        {
          if (v12 >= v10 && v3 >= v12)
          {
LABEL_15:
            uint64_t v15 = *(void *)(v4 + 48);
            uint64_t v16 = v15 + 40 * v3;
            uint64_t v17 = (long long *)(v15 + 40 * v7);
            BOOL v18 = v3 != v7 || v16 >= (unint64_t)v17 + 40;
            uint64_t v3 = v7;
            if (v18)
            {
              uint64_t v19 = *v17;
              BOOL v20 = v17[1];
              *(void *)(v16 + 32) = *((void *)v17 + 4);
              *(_OWORD *)uint64_t v16 = v19;
              *(_OWORD *)(v16 + 16) = v20;
              uint64_t v3 = v7;
            }
          }
        }
        else if (v12 >= v10 || v3 >= v12)
        {
          goto LABEL_15;
        }
        uint64_t v7 = (v7 + 1) & v8;
      }
      while (((*(void *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) != 0);
    }
    *(void *)(v5 + (((unint64_t)v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v3) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v21 = *v2;
  uint64_t v22 = *(void *)(*v2 + 16);
  uint64_t v23 = __OFSUB__(v22, 1);
  uint64_t v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v21 + 16) = v24;
    ++*(_DWORD *)(v21 + 36);
  }
  return result;
}

uint64_t sub_25D753704()
{
  uint64_t v1 = OUTLINED_FUNCTION_90();

  return MEMORY[0x270FA0238](v1, v2, v3);
}

void *partial apply for closure #1 in closure #1 in Connection.didClose(_:)()
{
  return closure #1 in closure #1 in Connection.didClose(_:)(*(void *)(v0 + 16));
}

uint64_t _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_25D753784()
{
  _Block_release(*(const void **)(v0 + 16));
  uint64_t v1 = OUTLINED_FUNCTION_90();

  return MEMORY[0x270FA0238](v1, v2, v3);
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned ObjCBool) -> ()(char a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(v1 + 16) + 16))(*(void *)(v1 + 16), a1 & 1);
}

uint64_t _sIeyB_Ieg_TRTA_0()
{
  return OUTLINED_FUNCTION_36_3(*(void *)(v0 + 16));
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned SNSessionObject?, @unowned NSError?) -> ()(uint64_t a1, uint64_t a2)
{
  thunk for @escaping @callee_unowned @convention(block) (@unowned SNSessionObject?, @unowned NSError?) -> ()(a1, a2, *(void *)(v2 + 16));
}

uint64_t specialized Set.endIndex.getter(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) != 0) {
    return __CocoaSet.endIndex.getter();
  }
  else {
    return 1 << *(unsigned char *)(a1 + 32);
  }
}

uint64_t specialized Set.subscript.getter(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  unint64_t v5 = result;
  if ((a4 & 0xC000000000000001) == 0)
  {
    if ((a3 & 1) == 0)
    {
      if (result < 0 || 1 << *(unsigned char *)(a4 + 32) <= result)
      {
        __break(1u);
      }
      else if ((*(void *)(a4 + 8 * ((unint64_t)result >> 6) + 56) >> result))
      {
        if (*(_DWORD *)(a4 + 36) == a2)
        {
LABEL_20:
          uint64_t v7 = *(void *)(*(void *)(a4 + 48) + 8 * v5);
          swift_retain();
          return v7;
        }
        __break(1u);
        goto LABEL_13;
      }
      __break(1u);
      goto LABEL_24;
    }
LABEL_13:
    uint64_t result = __CocoaSet.Index.age.getter();
    if (result == *(_DWORD *)(a4 + 36))
    {
      v12[0] = __CocoaSet.Index.element.getter();
      type metadata accessor for BackgroundConnection();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      uint64_t v8 = __dst[0];
      swift_unknownObjectRelease();
      Hasher.init(_seed:)();
      specialized BackgroundConnectionProtocol.hash(into:)((uint64_t)__dst);
      Swift::Int v9 = Hasher._finalize()();
      uint64_t v10 = -1 << *(unsigned char *)(a4 + 32);
      unint64_t v5 = v9 & ~v10;
      if ((*(void *)(a4 + 56 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        uint64_t v11 = ~v10;
        while (1)
        {
          memcpy(__dst, (const void *)(*(void *)(*(void *)(a4 + 48) + 8 * v5) + 40), 0x204uLL);
          memcpy(v12, (const void *)(v8 + 40), 0x204uLL);
          if (static ConnectionConfiguration.== infix(_:_:)((uint64_t)__dst, (uint64_t)v12)) {
            break;
          }
          unint64_t v5 = (v5 + 1) & v11;
          if (((*(void *)(a4 + 56 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5) & 1) == 0) {
            goto LABEL_18;
          }
        }
      }
      else
      {
LABEL_18:
        swift_release();
        __break(1u);
      }
      swift_release();
      goto LABEL_20;
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (a3)
  {
    if (a4 < 0) {
      uint64_t v6 = a4;
    }
    else {
      uint64_t v6 = a4 & 0xFFFFFFFFFFFFFF8;
    }
    v12[0] = MEMORY[0x2611B26B0](result, a2, v6);
    type metadata accessor for BackgroundConnection();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v7 = __dst[0];
    swift_unknownObjectRelease();
    return v7;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  uint64_t v2 = 64;
  for (uint64_t i = 9; i - 7 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    unint64_t v1 = *(void *)(a1 + 8 * i);
    v2 += 64;
    if (v1) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

BOOL specialized static Set.Index.== infix(_:_:)(uint64_t a1, int a2, char a3, uint64_t a4, int a5, char a6)
{
  if (a3)
  {
    if (a6) {
LABEL_9:
    }
      JUMPOUT(0x2611B2660);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (a6) {
    goto LABEL_8;
  }
  if (a2 != a5)
  {
    __break(1u);
    goto LABEL_8;
  }
  return a1 == a4;
}

uint64_t outlined consume of Set<BackgroundConnection>.Index._Variant(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_25D753CF0()
{
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  if (*(void *)(v0 + 48)) {
    swift_release();
  }

  return MEMORY[0x270FA0238](v0, 64, 7);
}

void partial apply for closure #1 in closure #1 in Connection.sendData(_:with:)(uint64_t a1)
{
  closure #1 in closure #1 in Connection.sendData(_:with:)(a1, v1 + 16, *(void (**)(void))(v1 + 48), *(void *)(v1 + 56));
}

uint64_t sub_25D753D44()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return MEMORY[0x270FA0238](v0, 160, 7);
}

uint64_t partial apply for closure #1 in Connection.scheduleBackgroundConnection(_:after:)()
{
  return closure #1 in Connection.scheduleBackgroundConnection(_:after:)(*(void *)(v0 + 16), (void *)(v0 + 24), *(void *)(v0 + 144), *(double *)(v0 + 152));
}

uint64_t outlined retain of ConnectionPolicyRoute(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of ConnectionPolicyRoute(uint64_t a1)
{
  return a1;
}

uint64_t sub_25D753E98()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 160, 7);
}

void partial apply for closure #1 in closure #1 in Connection.scheduleBackgroundConnection(_:after:)()
{
  closure #1 in closure #1 in Connection.scheduleBackgroundConnection(_:after:)(v0[2], v0 + 3, v0[18], v0[19]);
}

size_t OUTLINED_FUNCTION_6_12(void *a1)
{
  size_t result = _swift_stdlib_malloc_size(a1);
  a1[2] = v1;
  a1[3] = 2 * ((uint64_t)(result - 32) / v2);
  return result;
}

uint64_t OUTLINED_FUNCTION_8_9()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_14_4()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_15_3()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t OUTLINED_FUNCTION_16_5(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v13 = v10[92];
  uint64_t v14 = v10[93];
  uint64_t v15 = v10[94];
  uint64_t v16 = v10[100];
  uint64_t v17 = *(void *)(v11 - 72);
  uint64_t v18 = v10[101];
  uint64_t v19 = v10[102];
  uint64_t v20 = v10[103];
  return outlined consume of ConnectionPolicy?(v13, v14, v15, v16, v17, v18, v19, v20, a9, a10);
}

unint64_t OUTLINED_FUNCTION_17_4(unint64_t result)
{
  *(void *)(v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(void *)(*(void *)(v1 + 48) + 8 * result) = v3;
  ++*(void *)(v1 + 16);
  return result;
}

uint64_t OUTLINED_FUNCTION_18_3@<X0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + ((v1 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= v4 << v1;
  *(void *)(*(void *)(v2 + 48) + 8 * v1) = v3;
  ++*(void *)(v2 + 16);
  return __CocoaSet.Iterator.next()();
}

uint64_t OUTLINED_FUNCTION_19_4()
{
  return swift_bridgeObjectRetain();
}

void *OUTLINED_FUNCTION_20_4@<X0>(void *__dst@<X2>, const void *a2@<X8>)
{
  return memmove(__dst, a2, v2);
}

uint64_t OUTLINED_FUNCTION_21_4()
{
  return swift_allocObject();
}

void OUTLINED_FUNCTION_23_4()
{
  JUMPOUT(0x2611B3750);
}

uint64_t OUTLINED_FUNCTION_27_4()
{
  return *(void *)(v0 + 736);
}

uint64_t OUTLINED_FUNCTION_29_4()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_30_4()
{
  *(void *)(v0 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_31_2()
{
  return v0 + 32;
}

uint64_t OUTLINED_FUNCTION_32_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12 = v10[101];
  uint64_t v13 = v10[102];
  uint64_t v14 = v10[103];
  return outlined consume of ConnectionPolicy?(a1, a2, a3, a4, a5, v12, v13, v14, a9, a10);
}

uint64_t OUTLINED_FUNCTION_34_5()
{
  return type metadata accessor for DispatchWorkItemFlags();
}

uint64_t OUTLINED_FUNCTION_36_3(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t OUTLINED_FUNCTION_38_1()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t OUTLINED_FUNCTION_40_2()
{
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed LinkRecommendationInfo?) -> ())?(v0);
  return static DispatchQoS.unspecified.getter();
}

uint64_t OUTLINED_FUNCTION_45_2()
{
  return _HashTable.nextHole(atOrAfter:)();
}

uint64_t OUTLINED_FUNCTION_49_2()
{
  return 0;
}

void OUTLINED_FUNCTION_51_1(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  *(__n128 *)a1 = a2;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_WORD *)(a1 + 112) = 0;
}

uint64_t OUTLINED_FUNCTION_53_1()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_55_1()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_56_1()
{
  return swift_unknownObjectRelease_n();
}

uint64_t OUTLINED_FUNCTION_60_2()
{
  return swift_unknownObjectWeakInit();
}

uint64_t OUTLINED_FUNCTION_61_1()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_62_1()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_64_0()
{
  return v0;
}

void OUTLINED_FUNCTION_65_1(uint64_t a1@<X8>)
{
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = 2 * (a1 / v1);
}

uint64_t OUTLINED_FUNCTION_66_1()
{
  return swift_retain_n();
}

void OUTLINED_FUNCTION_67_1()
{
  JUMPOUT(0x2611B24E0);
}

uint64_t OUTLINED_FUNCTION_68_1()
{
  return outlined consume of [String : UInt64].Iterator._Variant();
}

void OUTLINED_FUNCTION_69_1()
{
  JUMPOUT(0x2611B3750);
}

BOOL OUTLINED_FUNCTION_72_0(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_75_1()
{
  return swift_beginAccess();
}

BOOL OUTLINED_FUNCTION_78_1(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_80_1()
{
  return swift_unknownObjectRelease_n();
}

uint64_t OUTLINED_FUNCTION_81_0()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t OUTLINED_FUNCTION_85_1()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_88_1()
{
  return *(void *)(v0 + 448);
}

uint64_t OUTLINED_FUNCTION_92_1()
{
  return outlined copy of (@escaping @callee_guaranteed (@in_guaranteed LinkRecommendationInfo?) -> ())?(v0);
}

uint64_t OUTLINED_FUNCTION_93_1()
{
  return MEMORY[0x270F9E968](v0, v1);
}

uint64_t OUTLINED_FUNCTION_94_1()
{
  return 0;
}

void OUTLINED_FUNCTION_97_1(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v5, v4, a4, v6, 2u);
}

uint64_t OUTLINED_FUNCTION_98_1()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_101_0()
{
  return swift_unknownObjectRetain_n();
}

uint64_t OUTLINED_FUNCTION_103_1()
{
  return Hasher.init(_seed:)();
}

void *ConnectionPingInfoReport.netPingInfo.getter(unint64_t a1, double a2)
{
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F6E478]), sel_init);
  uint64_t v5 = v4;
  if (v4)
  {
    objc_msgSend(v4, sel_setPingCount_, a1);
    objc_msgSend(v5, sel_setMeanPingInMs_, a2);
    objc_msgSend(v5, sel_setUnacknowledgedPingCount_, HIDWORD(a1));
  }
  return v5;
}

void destroy for ConnectionEstablishmentReport(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(a1 + 104);
}

uint64_t initializeWithCopy for ConnectionEstablishmentReport(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v4;
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  uint64_t v5 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v5;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  unsigned int v6 = *(void **)(a2 + 104);
  *(void *)(a1 + 104) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v7 = v6;
  return a1;
}

uint64_t assignWithCopy for ConnectionEstablishmentReport(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  int v4 = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 40) = v6;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(unsigned char *)(a1 + 73) = *(unsigned char *)(a2 + 73);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  id v7 = *(void **)(a2 + 104);
  uint64_t v8 = *(void **)(a1 + 104);
  *(void *)(a1 + 104) = v7;
  id v9 = v7;

  return a1;
}

uint64_t assignWithTake for ConnectionEstablishmentReport(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(unsigned char *)(a1 + 73) = *(unsigned char *)(a2 + 73);
  uint64_t v5 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  uint64_t v6 = *(void **)(a1 + 104);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);

  return a1;
}

uint64_t getEnumTagSinglePayload for ConnectionEstablishmentReport(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 112))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 56);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConnectionEstablishmentReport(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)size_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 112) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 56) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 112) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ConnectionEstablishmentReport()
{
  return &type metadata for ConnectionEstablishmentReport;
}

unint64_t ConnectionEstablishmentReport.attemptDelayInMs.getter()
{
  outlined init with take of Double?(v0 + 24, (uint64_t)v5);
  unint64_t result = outlined init with take of Double?((uint64_t)v5, (uint64_t)&v6);
  if ((v7 & 1) != 0 || v6 <= 0.0)
  {
    uint64_t v4 = 0;
    unsigned __int8 v3 = 1;
    goto LABEL_10;
  }
  double v2 = v6 * 1000.0;
  if (v6 * 1000.0 <= 0.0)
  {
    uint64_t v4 = 0;
    unsigned __int8 v3 = 0;
    goto LABEL_10;
  }
  if (v2 >= 4294967300.0)
  {
    unsigned __int8 v3 = 0;
    uint64_t v4 = 0xFFFFFFFFLL;
    goto LABEL_10;
  }
  if ((~*(void *)&v2 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (v2 <= -1.0)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v2 < 4294967300.0)
  {
    unsigned __int8 v3 = 0;
    uint64_t v4 = v2;
LABEL_10:
    LOBYTE(v6) = v3;
    return v4 | ((unint64_t)v3 << 32);
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t ConnectionEstablishmentReport.durationInMs.getter()
{
  outlined init with take of Double?(v0 + 40, (uint64_t)v3);
  uint64_t result = outlined init with take of Double?((uint64_t)v3, (uint64_t)&v4);
  if ((v5 & 1) != 0 || v4 <= 0.0) {
    return 0;
  }
  double v2 = v4 * 1000.0;
  if (v4 * 1000.0 <= 0.0) {
    return 0;
  }
  if (v2 >= 1.84467441e19) {
    return -1;
  }
  if ((~*(void *)&v2 & 0x7FF0000000000000) != 0)
  {
    if (v2 > -1.0) {
      return (unint64_t)v2;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t ConnectionEstablishmentReport.debugDescription.getter()
{
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  v42._uint64_t countAndFlagsBits = 0xD000000000000015;
  v42._object = (void *)0x800000025D796B50;
  if (*(unsigned char *)(v0 + 20))
  {
    uint64_t v1 = OUTLINED_FUNCTION_0_4();
  }
  else
  {
    LODWORD(v44._countAndFlagsBits) = *(_DWORD *)(v0 + 16);
    uint64_t v1 = String.init<A>(describing:)();
  }
  OUTLINED_FUNCTION_2_20(v1);
  swift_bridgeObjectRelease();
  uint64_t countAndFlagsBits = v42._countAndFlagsBits;
  object = v42._object;
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  v42._uint64_t countAndFlagsBits = 0xD000000000000011;
  v42._object = (void *)0x800000025D796B70;
  unint64_t v4 = ConnectionEstablishmentReport.attemptDelayInMs.getter();
  v41._object = object;
  if ((v4 & 0x100000000) != 0)
  {
    uint64_t v5 = OUTLINED_FUNCTION_0_4();
  }
  else
  {
    LODWORD(v44._countAndFlagsBits) = v4;
    uint64_t v5 = String.init<A>(describing:)();
  }
  OUTLINED_FUNCTION_2_20(v5);
  swift_bridgeObjectRelease();
  uint64_t v7 = v42._countAndFlagsBits;
  double v6 = v42._object;
  strcpy((char *)&v42, "durationInMs ");
  HIWORD(v42._object) = -4864;
  uint64_t v8 = ConnectionEstablishmentReport.durationInMs.getter();
  v40._object = v6;
  v41._uint64_t countAndFlagsBits = countAndFlagsBits;
  v40._uint64_t countAndFlagsBits = v7;
  if (v9)
  {
    uint64_t v10 = OUTLINED_FUNCTION_0_4();
  }
  else
  {
    v44._uint64_t countAndFlagsBits = v8;
    uint64_t v10 = String.init<A>(describing:)();
  }
  OUTLINED_FUNCTION_2_20(v10);
  swift_bridgeObjectRelease();
  Swift::String v39 = v42;
  _StringGuts.grow(_:)(29);
  swift_bridgeObjectRelease();
  uint64_t v11 = swift_bridgeObjectRetain();
  v12._uint64_t countAndFlagsBits = MEMORY[0x2611B2390](v11, &type metadata for ConnectionHandshakeReport);
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease();
  uint64_t v13 = swift_bridgeObjectRetain();
  v14._uint64_t countAndFlagsBits = MEMORY[0x2611B2390](v13, &type metadata for ConnectionResolutionReport);
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  v42._uint64_t countAndFlagsBits = 0xD000000000000010;
  v42._object = (void *)0x800000025D796BD0;
  if (*(unsigned char *)(v0 + 72)) {
    uint64_t v15 = 1702195828;
  }
  else {
    uint64_t v15 = 0x65736C6166;
  }
  OUTLINED_FUNCTION_2_20(v15);
  swift_bridgeObjectRelease();
  uint64_t v16 = v42._object;
  uint64_t v38 = v42._countAndFlagsBits;
  strcpy((char *)&v42, "usedProxy ");
  BYTE3(v42._object) = 0;
  HIDWORD(v42._object) = -369098752;
  if (*(unsigned char *)(v0 + 73)) {
    uint64_t v17 = 1702195828;
  }
  else {
    uint64_t v17 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + 73)) {
    unint64_t v18 = 0xE400000000000000;
  }
  else {
    unint64_t v18 = 0xE500000000000000;
  }
  unint64_t v19 = v18;
  String.append(_:)(*(Swift::String *)&v17);
  swift_bridgeObjectRelease();
  uint64_t v20 = v42._object;
  uint64_t v37 = v42._countAndFlagsBits;
  v42._uint64_t countAndFlagsBits = 0;
  v42._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  strcpy((char *)&v44, "proxyEndpoint ");
  HIBYTE(v44._object) = -18;
  uint64_t v21 = *(void **)(v0 + 88);
  if (v21)
  {
    uint64_t v22 = *(void *)(v0 + 96);
    v42._uint64_t countAndFlagsBits = *(void *)(v0 + 80);
    v42._object = v21;
    uint64_t v43 = v22;
    swift_bridgeObjectRetain();
    uint64_t v23 = String.init<A>(describing:)();
    unint64_t v25 = v24;
  }
  else
  {
    unint64_t v25 = 0xE700000000000000;
    uint64_t v23 = OUTLINED_FUNCTION_0_4();
  }
  unint64_t v26 = v25;
  String.append(_:)(*(Swift::String *)&v23);
  swift_bridgeObjectRelease();
  v27._uint64_t countAndFlagsBits = 41;
  v27._object = (void *)0xE100000000000000;
  String.append(_:)(v27);
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  v42._uint64_t countAndFlagsBits = 0x697463656E6E6F63;
  v42._object = (void *)0xEF206F666E496E6FLL;
  if (*(void *)(v0 + 8))
  {
    uint64_t v28 = *(void *)v0;
    char v29 = *(void **)(v0 + 8);
  }
  else
  {
    char v29 = (void *)0xE700000000000000;
    uint64_t v28 = 0x6E776F6E6B6E75;
  }
  swift_bridgeObjectRetain();
  v30._uint64_t countAndFlagsBits = v28;
  v30._object = v29;
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(82);
  v31._uint64_t countAndFlagsBits = 0xD000000000000030;
  v31._object = (void *)0x800000025D796BF0;
  String.append(_:)(v31);
  String.append(_:)(v41);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_29();
  String.append(_:)(v40);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_29();
  String.append(_:)(v39);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_29();
  v32._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  v32._object = (void *)0x800000025D796B90;
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_29();
  v33._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
  v33._object = (void *)0x800000025D796BB0;
  String.append(_:)(v33);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_29();
  v34._uint64_t countAndFlagsBits = v38;
  v34._object = v16;
  String.append(_:)(v34);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_29();
  v35._uint64_t countAndFlagsBits = v37;
  v35._object = v20;
  String.append(_:)(v35);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_29();
  String.append(_:)(v44);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_29();
  String.append(_:)(v42);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ConnectionEstablishmentReport()
{
  memcpy(v2, v0, sizeof(v2));
  return ConnectionEstablishmentReport.debugDescription.getter();
}

void OUTLINED_FUNCTION_0_29()
{
  uint64_t v1 = 8236;
  unint64_t v2 = 0xE200000000000000;
  String.append(_:)(*(Swift::String *)&v1);
}

void OUTLINED_FUNCTION_2_20(uint64_t a1)
{
  uint64_t v3 = v1;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t dispatch thunk of ConnectionProtocol.connectionConfiguration.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ConnectionProtocol.delegate.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ConnectionProtocol.delegate.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of ConnectionProtocol.delegate.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of ConnectionProtocol.start()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of ConnectionProtocol.sendData(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 48))();
}

uint64_t dispatch thunk of ConnectionProtocol.sendCommand(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 56))();
}

uint64_t dispatch thunk of ConnectionProtocol.sendCommands(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 64))();
}

uint64_t dispatch thunk of ConnectionProtocol.setSendPings(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of ConnectionProtocol.cancelSynchronously(_:isOnConnectionQueue:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 80))();
}

uint64_t dispatch thunk of ConnectionProtocol.getConnectionMetrics(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 88))();
}

uint64_t dispatch thunk of ConnectionProtocol.getConnectionAnalysisInfo(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 96))();
}

uint64_t dispatch thunk of ConnectionProtocol.barrier(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 104))();
}

uint64_t dispatch thunk of ConnectionProtocol.probeConnection()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 112))();
}

SiriNetwork::ConnectionType __swiftcall ConnectionType.init(fromCoreTelephonyeRATString:)(Swift::String fromCoreTelephonyeRATString)
{
  object = fromCoreTelephonyeRATString._object;
  uint64_t countAndFlagsBits = fromCoreTelephonyeRATString._countAndFlagsBits;
  uint64_t v5 = v1;
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == fromCoreTelephonyeRATString._countAndFlagsBits
    && v6 == object)
  {
    SiriNetwork::ConnectionType result = OUTLINED_FUNCTION_15_1();
    goto LABEL_8;
  }
  OUTLINED_FUNCTION_0_30();
  OUTLINED_FUNCTION_2_21();
  if (v2)
  {
    SiriNetwork::ConnectionType result = swift_bridgeObjectRelease();
LABEL_8:
    char v9 = 5;
    goto LABEL_9;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v10 == object)
  {
    SiriNetwork::ConnectionType result = OUTLINED_FUNCTION_15_1();
    goto LABEL_17;
  }
  OUTLINED_FUNCTION_0_30();
  OUTLINED_FUNCTION_2_21();
  if (v2)
  {
    SiriNetwork::ConnectionType result = swift_bridgeObjectRelease();
LABEL_17:
    char v9 = 6;
    goto LABEL_9;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v12 == object)
  {
    SiriNetwork::ConnectionType result = OUTLINED_FUNCTION_15_1();
    goto LABEL_25;
  }
  OUTLINED_FUNCTION_0_30();
  OUTLINED_FUNCTION_2_21();
  if (v2)
  {
    SiriNetwork::ConnectionType result = swift_bridgeObjectRelease();
LABEL_25:
    char v9 = 7;
    goto LABEL_9;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v14 == object)
  {
    SiriNetwork::ConnectionType result = OUTLINED_FUNCTION_15_1();
    goto LABEL_33;
  }
  OUTLINED_FUNCTION_0_30();
  OUTLINED_FUNCTION_2_21();
  if (v2)
  {
    SiriNetwork::ConnectionType result = swift_bridgeObjectRelease();
LABEL_33:
    char v9 = 8;
    goto LABEL_9;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v16 == object)
  {
    SiriNetwork::ConnectionType result = OUTLINED_FUNCTION_15_1();
    goto LABEL_41;
  }
  OUTLINED_FUNCTION_0_30();
  OUTLINED_FUNCTION_2_21();
  if (v2)
  {
    SiriNetwork::ConnectionType result = swift_bridgeObjectRelease();
LABEL_41:
    char v9 = 9;
    goto LABEL_9;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v18 == object)
  {
    SiriNetwork::ConnectionType result = OUTLINED_FUNCTION_15_1();
    goto LABEL_49;
  }
  OUTLINED_FUNCTION_0_30();
  OUTLINED_FUNCTION_2_21();
  if (v2)
  {
    SiriNetwork::ConnectionType result = swift_bridgeObjectRelease();
LABEL_49:
    char v9 = 4;
    goto LABEL_9;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v20 == object)
  {
    SiriNetwork::ConnectionType result = OUTLINED_FUNCTION_15_1();
    goto LABEL_57;
  }
  OUTLINED_FUNCTION_0_30();
  OUTLINED_FUNCTION_2_21();
  if (v2)
  {
    SiriNetwork::ConnectionType result = swift_bridgeObjectRelease();
LABEL_57:
    char v9 = 10;
    goto LABEL_9;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v22 == object)
  {
    SiriNetwork::ConnectionType result = OUTLINED_FUNCTION_15_1();
    goto LABEL_65;
  }
  OUTLINED_FUNCTION_0_30();
  OUTLINED_FUNCTION_2_21();
  if (v2)
  {
    SiriNetwork::ConnectionType result = swift_bridgeObjectRelease();
LABEL_65:
    char v9 = 11;
    goto LABEL_9;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v24 == object)
  {
    SiriNetwork::ConnectionType result = OUTLINED_FUNCTION_15_1();
    goto LABEL_73;
  }
  OUTLINED_FUNCTION_0_30();
  OUTLINED_FUNCTION_2_21();
  if (v2)
  {
    SiriNetwork::ConnectionType result = swift_bridgeObjectRelease();
LABEL_73:
    char v9 = 12;
    goto LABEL_9;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v26 == object)
  {
    SiriNetwork::ConnectionType result = OUTLINED_FUNCTION_15_1();
    goto LABEL_81;
  }
  OUTLINED_FUNCTION_0_30();
  OUTLINED_FUNCTION_2_21();
  if (v2)
  {
    SiriNetwork::ConnectionType result = swift_bridgeObjectRelease();
LABEL_81:
    char v9 = 13;
    goto LABEL_9;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v28 == object)
  {
    SiriNetwork::ConnectionType result = OUTLINED_FUNCTION_15_1();
    goto LABEL_89;
  }
  OUTLINED_FUNCTION_0_30();
  OUTLINED_FUNCTION_2_21();
  if (v2)
  {
    SiriNetwork::ConnectionType result = swift_bridgeObjectRelease();
LABEL_89:
    char v9 = 14;
    goto LABEL_9;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v30 == object)
  {
    SiriNetwork::ConnectionType result = OUTLINED_FUNCTION_15_1();
    goto LABEL_97;
  }
  OUTLINED_FUNCTION_0_30();
  OUTLINED_FUNCTION_2_21();
  if (v2)
  {
    SiriNetwork::ConnectionType result = swift_bridgeObjectRelease();
LABEL_97:
    char v9 = 15;
    goto LABEL_9;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v32 == object)
  {
    SiriNetwork::ConnectionType result = OUTLINED_FUNCTION_15_1();
    char v9 = 16;
  }
  else
  {
    char v34 = OUTLINED_FUNCTION_0_30();
    swift_bridgeObjectRelease();
    SiriNetwork::ConnectionType result = swift_bridgeObjectRelease();
    if (v34) {
      char v9 = 16;
    }
    else {
      char v9 = 0;
    }
  }
LABEL_9:
  *uint64_t v5 = v9;
  return result;
}

uint64_t OUTLINED_FUNCTION_0_30()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_2_21()
{
  return swift_bridgeObjectRelease();
}

Swift::Bool __swiftcall NWError.sn_isNetworkUnreachable()()
{
  OUTLINED_FUNCTION_7_7();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  uint64_t v3 = OUTLINED_FUNCTION_1_27(v2, v19);
  v4(v3);
  uint64_t v5 = OUTLINED_FUNCTION_3_22();
  int v7 = v6(v5);
  if (v7 == *MEMORY[0x263F14318])
  {
    uint64_t v8 = OUTLINED_FUNCTION_2_22();
    v9(v8);
    return (*v0 - 49) < 3;
  }
  else if (v7 == *MEMORY[0x263F14310])
  {
    uint64_t v11 = OUTLINED_FUNCTION_2_22();
    v12(v11);
    OUTLINED_FUNCTION_12_7();
    unsigned int v15 = v14 | 0xFFFE0000;
    return v16 || v13 == v15;
  }
  else
  {
    uint64_t v17 = OUTLINED_FUNCTION_4_15();
    v18(v17);
    return 0;
  }
}

Swift::Bool __swiftcall NWError.sn_isNetworkUnreachableForServerCause()()
{
  uint64_t v1 = OUTLINED_FUNCTION_7_7();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  MEMORY[0x270FA5388](v4);
  double v6 = OUTLINED_FUNCTION_1_27(v5, v14);
  v7(v6);
  uint64_t v8 = OUTLINED_FUNCTION_3_22();
  if (v9(v8) != *MEMORY[0x263F14318])
  {
    (*(void (**)(_DWORD *, uint64_t))(v3 + 8))(v0, v1);
    goto LABEL_5;
  }
  uint64_t v10 = OUTLINED_FUNCTION_2_22();
  v11(v10);
  if (*v0 >= 0x3Eu)
  {
LABEL_5:
    LOBYTE(v12) = 0;
    return v12;
  }
  return (0x2060000000000000uLL >> *v0) & 1;
}

Swift::Bool __swiftcall NWError.sn_isNetworkDown()()
{
  OUTLINED_FUNCTION_7_7();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  uint64_t v3 = OUTLINED_FUNCTION_1_27(v2, v12);
  v4(v3);
  uint64_t v5 = OUTLINED_FUNCTION_3_22();
  if (v6(v5) == *MEMORY[0x263F14318])
  {
    uint64_t v7 = OUTLINED_FUNCTION_2_22();
    v8(v7);
    return *v0 == 50;
  }
  else
  {
    uint64_t v10 = OUTLINED_FUNCTION_4_15();
    v11(v10);
    return 0;
  }
}

Swift::Bool __swiftcall NWError.sn_isNetworkConnectionRetryableNow()()
{
  OUTLINED_FUNCTION_7_7();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  uint64_t v3 = OUTLINED_FUNCTION_1_27(v2, v12);
  v4(v3);
  uint64_t v5 = OUTLINED_FUNCTION_3_22();
  if (v6(v5) == *MEMORY[0x263F14318])
  {
    uint64_t v7 = OUTLINED_FUNCTION_2_22();
    v8(v7);
    return *v0 == 54;
  }
  else
  {
    uint64_t v10 = OUTLINED_FUNCTION_4_15();
    v11(v10);
    return 0;
  }
}

Swift::Bool __swiftcall NWError.sn_isNetworkConnectionRetryableAfterDelay()()
{
  OUTLINED_FUNCTION_7_7();
  OUTLINED_FUNCTION_0_0();
  uint64_t v2 = v1;
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_9_10();
  MEMORY[0x270FA5388](v4);
  double v6 = (_DWORD *)((char *)&v21 - v5);
  uint64_t v7 = *(void (**)(void))(v2 + 16);
  OUTLINED_FUNCTION_5_16();
  v7();
  uint64_t v8 = *(uint64_t (**)(void))(v2 + 88);
  OUTLINED_FUNCTION_8_10();
  int v9 = v8();
  int v10 = *MEMORY[0x263F14318];
  if (v9 == *MEMORY[0x263F14318])
  {
    uint64_t v11 = OUTLINED_FUNCTION_6_13();
    v12(v11);
    if (*v6 == 54) {
      return 1;
    }
  }
  else
  {
    uint64_t v14 = OUTLINED_FUNCTION_13_6();
    v15(v14);
  }
  OUTLINED_FUNCTION_5_16();
  v7();
  OUTLINED_FUNCTION_8_10();
  if (v8() == v10)
  {
    uint64_t v16 = OUTLINED_FUNCTION_11_6();
    v17(v16);
    return *v0 == 50 || *v0 == 55;
  }
  else
  {
    uint64_t v19 = OUTLINED_FUNCTION_10_9();
    v20(v19);
    return 0;
  }
}

Swift::Bool __swiftcall NWError.sn_isNetworkOperationRetryable()()
{
  OUTLINED_FUNCTION_7_7();
  OUTLINED_FUNCTION_0_0();
  uint64_t v2 = v1;
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_9_10();
  MEMORY[0x270FA5388](v4);
  double v6 = (int *)((char *)&v24 - v5);
  uint64_t v7 = *(void (**)(void))(v2 + 16);
  OUTLINED_FUNCTION_5_16();
  v7();
  uint64_t v8 = *(uint64_t (**)(void))(v2 + 88);
  OUTLINED_FUNCTION_8_10();
  int v9 = v8();
  int v10 = *MEMORY[0x263F14318];
  if (v9 != *MEMORY[0x263F14318])
  {
    if (v9 != *MEMORY[0x263F14310])
    {
      uint64_t v18 = OUTLINED_FUNCTION_13_6();
      v19(v18);
      goto LABEL_12;
    }
    uint64_t v13 = OUTLINED_FUNCTION_6_13();
    v14(v13);
    uint64_t v15 = *v6;
    if (v15 != -65554 && v15 != -65537) {
      goto LABEL_12;
    }
    return 0;
  }
  uint64_t v11 = OUTLINED_FUNCTION_6_13();
  v12(v11);
  if ((*v6 - 49) < 3) {
    return 0;
  }
LABEL_12:
  OUTLINED_FUNCTION_5_16();
  v7();
  OUTLINED_FUNCTION_8_10();
  if (v8() == v10)
  {
    uint64_t v20 = OUTLINED_FUNCTION_11_6();
    v21(v20);
    return *v0 != 60;
  }
  else
  {
    uint64_t v22 = OUTLINED_FUNCTION_10_9();
    v23(v22);
    return 1;
  }
}

Swift::Bool __swiftcall NWError.isFallbackConnectionMethodRetryable(for:)(SiriNetwork::ConnectionMethod a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for NWError();
  OUTLINED_FUNCTION_0_0();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  int v9 = (int *)((char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(int *, uint64_t, uint64_t))(v6 + 16))(v9, v2, v4);
  if ((*(unsigned int (**)(int *, uint64_t))(v6 + 88))(v9, v4) != *MEMORY[0x263F14318])
  {
    (*(void (**)(int *, uint64_t))(v6 + 8))(v9, v4);
    return 0;
  }
  (*(void (**)(int *, uint64_t))(v6 + 96))(v9, v4);
  int v10 = *v9;
  Swift::Bool result = 1;
  if (*v9 != 9 && v10 != 57)
  {
    if (v10 == 54) {
      return a1 == SiriNetwork_ConnectionMethod_peer;
    }
    return 0;
  }
  return result;
}

Swift::Bool __swiftcall NWError.sn_isNetworkConnectionRetryable()()
{
  OUTLINED_FUNCTION_7_7();
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  uint64_t v3 = OUTLINED_FUNCTION_1_27(v2, v19);
  v4(v3);
  uint64_t v5 = OUTLINED_FUNCTION_3_22();
  int v7 = v6(v5);
  if (v7 == *MEMORY[0x263F14318])
  {
    uint64_t v8 = OUTLINED_FUNCTION_2_22();
    v9(v8);
    return (*v0 - 52) < 0xFFFFFFFD;
  }
  else if (v7 == *MEMORY[0x263F14310])
  {
    uint64_t v11 = OUTLINED_FUNCTION_2_22();
    v12(v11);
    OUTLINED_FUNCTION_12_7();
    unsigned int v15 = v14 | 0xFFFE0000;
    BOOL v16 = v16 || v13 == v15;
    return !v16;
  }
  else
  {
    uint64_t v17 = OUTLINED_FUNCTION_4_15();
    v18(v17);
    return 1;
  }
}

char *OUTLINED_FUNCTION_1_27@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  return (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_2_22()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_3_22()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_4_15()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_6_13()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_7_7()
{
  return type metadata accessor for NWError();
}

uint64_t OUTLINED_FUNCTION_10_9()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_11_6()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_13_6()
{
  return v0;
}

uint64_t ConnectionPolicyType.stringRawValue.getter()
{
  uint64_t result = *v0;
  switch(*v0)
  {
    case 1:
    case 2:
    case 3:
    case 4:
      uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t static ConnectionPolicyRoute.maxTimeoutFromRoutes(_:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = (unsigned char *)(swift_bridgeObjectRetain() + 144);
    uint64_t v3 = MEMORY[0x263F8EE78];
    do
    {
      if ((*v2 & 1) == 0)
      {
        uint64_t v4 = *((void *)v2 - 1);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          OUTLINED_FUNCTION_7_8();
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v3 = v7;
        }
        unint64_t v6 = *(void *)(v3 + 16);
        unint64_t v5 = *(void *)(v3 + 24);
        if (v6 >= v5 >> 1)
        {
          OUTLINED_FUNCTION_11_7(v5);
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v3 = v8;
        }
        *(void *)(v3 + 16) = v6 + 1;
        *(void *)(v3 + 8 * v6 + 32) = v4;
      }
      v2 += 120;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = MEMORY[0x263F8EE78];
  }
  specialized Sequence<>.max()(v3);
  return swift_bridgeObjectRelease();
}

void *ConnectionPolicyRoute.init(from:)@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  if (!result)
  {
    *(_OWORD *)a2 = xmmword_25D790AD0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_WORD *)(a2 + 112) = 0;
    return result;
  }
  id v3 = result;
  uint64_t v4 = outlined bridged method (pb) of @objc SAConnectionPolicyRoute.routeId.getter(v3, (SEL *)&selRef_routeId);
  uint64_t v6 = v5;
  swift_bridgeObjectRetain();
  uint64_t v7 = outlined bridged method (pb) of @objc SAConnectionPolicyRoute.routeId.getter(v3, (SEL *)&selRef_connectionId);
  uint64_t v9 = v8;
  swift_bridgeObjectRetain();
  id v10 = objc_msgSend(v3, sel_priority);
  uint64_t v40 = outlined bridged method (pb) of @objc SAConnectionPolicyRoute.routeId.getter(v3, (SEL *)&selRef_cname);
  uint64_t v12 = v11;
  swift_bridgeObjectRetain();
  uint64_t v39 = outlined bridged method (pb) of @objc SAConnectionPolicyRoute.routeId.getter(v3, (SEL *)&selRef_host);
  uint64_t v14 = v13;
  swift_bridgeObjectRetain();
  id v15 = objc_msgSend(v3, sel_mptcp);
  uint64_t v36 = v4;
  id v41 = v10;
  uint64_t v42 = v7;
  if (v15)
  {
    BOOL v16 = v15;
    unsigned __int8 v17 = objc_msgSend(v15, sel_BOOLValue);
  }
  else
  {
    unsigned __int8 v17 = 1;
  }
  uint64_t v37 = outlined bridged method (pb) of @objc SAConnectionPolicyRoute.routeId.getter(v3, (SEL *)&selRef_resolver);
  uint64_t v19 = v18;
  swift_bridgeObjectRetain();
  uint64_t v20 = outlined bridged method (pb) of @objc SAConnectionPolicyRoute.routeId.getter(v3, (SEL *)&selRef_resolverProtocol);
  unsigned __int8 v38 = v17;
  if (v21)
  {
    uint64_t v22 = v20;
    uint64_t v23 = v21;
    uint64_t v35 = v6;
    if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v20 && v23 == v24)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v26 = OUTLINED_FUNCTION_10_10();
      swift_bridgeObjectRelease();
      if ((v26 & 1) == 0)
      {
        if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v22 && v23 == v32)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          char v27 = 2;
        }
        else
        {
          char v34 = OUTLINED_FUNCTION_10_10();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v34) {
            char v27 = 2;
          }
          else {
            char v27 = 0;
          }
        }
        goto LABEL_16;
      }
    }
    swift_bridgeObjectRelease();
    char v27 = 1;
  }
  else
  {
    char v27 = 0;
  }
LABEL_16:
  id v28 = objc_msgSend(v3, sel_timeout, v35);
  char v29 = v28;
  if (v28)
  {
    uint64_t v43 = 0;
    char v44 = 1;
    MEMORY[0x2611B2400](v28, &v43);

    if (v44) {
      char v29 = 0;
    }
    else {
      char v29 = v43;
    }
  }
  v30.value._uint64_t countAndFlagsBits = outlined bridged method (pb) of @objc SAConnectionPolicyRoute.routeId.getter(v3, (SEL *)&selRef_type);
  ConnectionPolicyType.init(fromRawValue:)(v30);

  char v31 = v45;
  *(void *)a2 = v36;
  *(void *)(a2 + 8) = v6;
  *(void *)(a2 + 16) = v42;
  *(void *)(a2 + 24) = v9;
  *(void *)(a2 + 32) = v41;
  *(void *)(a2 + 40) = v40;
  *(void *)(a2 + 48) = v12;
  *(void *)(a2 + 56) = v39;
  *(void *)(a2 + 64) = v14;
  *(unsigned char *)(a2 + 72) = v38;
  *(void *)(a2 + 80) = v37;
  *(void *)(a2 + 88) = v19;
  *(unsigned char *)(a2 + 96) = v27;
  *(void *)(a2 + 104) = v29;
  *(unsigned char *)(a2 + 112) = 0;
  *(unsigned char *)(a2 + 113) = v31;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return (void *)swift_bridgeObjectRelease();
}

uint64_t static ConnectionPolicyRoute.policyTypePOPVerification(_:)(uint64_t a1)
{
  if (AFIsInternalInstall()) {
    int v30 = _AFPreferencesGetTuscanyStatus() ^ 1;
  }
  else {
    LOBYTE(v30) = 0;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = swift_bridgeObjectRetain();
  if (v2)
  {
    unint64_t v4 = 0;
    uint64_t v5 = a1 + 145;
    unint64_t v27 = v2 - 1;
    uint64_t v6 = MEMORY[0x263F8EE78];
    unint64_t v37 = v2;
    uint64_t v28 = a1 + 145;
    while (1)
    {
      uint64_t v29 = v6;
      uint64_t v7 = (unsigned __int8 *)(v5 + 120 * v4);
      unint64_t v8 = v4;
      while (1)
      {
        if (v8 >= v2)
        {
          __break(1u);
          return result;
        }
        uint64_t v36 = *(void *)(v7 - 113);
        uint64_t v9 = *(void *)(v7 - 73);
        uint64_t v10 = *(void *)(v7 - 65);
        uint64_t v11 = *(void *)(v7 - 57);
        uint64_t v12 = *(void *)(v7 - 49);
        char v35 = *(v7 - 41);
        uint64_t v34 = *(void *)(v7 - 33);
        uint64_t v13 = *(void *)(v7 - 25);
        char v33 = *(v7 - 17);
        uint64_t v32 = *(void *)(v7 - 9);
        char v31 = *(v7 - 1);
        int v14 = *v7;
        long long v38 = *(_OWORD *)(v7 - 105);
        long long v39 = *(_OWORD *)(v7 - 89);
        if (!v10)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
LABEL_13:
          if (!v12) {
            goto LABEL_24;
          }
          swift_bridgeObjectRetain();
          v18._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_1_12();
          if (!String.hasSuffix(_:)(v18))
          {
            v19._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_5_17();
            if (!String.hasPrefix(_:)(v19))
            {
              swift_bridgeObjectRelease();
LABEL_24:
              swift_bridgeObjectRelease_n();
              goto LABEL_25;
            }
          }
          swift_bridgeObjectRelease();
          goto LABEL_17;
        }
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v15._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_1_12();
        if (!String.hasSuffix(_:)(v15))
        {
          v16._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_5_17();
          Swift::Bool v17 = String.hasPrefix(_:)(v16);
          swift_bridgeObjectRelease();
          if (v17) {
            goto LABEL_18;
          }
          goto LABEL_13;
        }
LABEL_17:
        swift_bridgeObjectRelease();
LABEL_18:
        char v20 = v30;
        if (v14 != 4) {
          char v20 = 1;
        }
        if (v20) {
          break;
        }
        swift_bridgeObjectRelease();
LABEL_25:
        ++v8;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        v7 += 120;
        unint64_t v2 = v37;
        if (v37 == v8)
        {
          uint64_t v6 = v29;
          goto LABEL_34;
        }
      }
      uint64_t v6 = v29;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v29 + 16) + 1, 1);
        uint64_t v6 = v29;
      }
      long long v22 = v38;
      long long v21 = v39;
      unint64_t v24 = *(void *)(v6 + 16);
      unint64_t v23 = *(void *)(v6 + 24);
      if (v24 >= v23 >> 1)
      {
        BOOL v26 = OUTLINED_FUNCTION_11_7(v23);
        uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)v26, v24 + 1, 1);
        long long v22 = v38;
        long long v21 = v39;
        uint64_t v6 = v29;
      }
      *(void *)(v6 + 16) = v24 + 1;
      uint64_t v25 = v6 + 120 * v24;
      *(void *)(v25 + 32) = v36;
      unint64_t v4 = v8 + 1;
      *(_OWORD *)(v25 + 40) = v22;
      *(_OWORD *)(v25 + 56) = v21;
      *(void *)(v25 + 72) = v9;
      *(void *)(v25 + 80) = v10;
      *(void *)(v25 + 88) = v11;
      *(void *)(v25 + 96) = v12;
      *(unsigned char *)(v25 + 104) = v35;
      *(void *)(v25 + 112) = v34;
      *(void *)(v25 + 120) = v13;
      *(unsigned char *)(v25 + 128) = v33;
      *(void *)(v25 + 136) = v32;
      *(unsigned char *)(v25 + 144) = v31;
      *(unsigned char *)(v25 + 145) = v14;
      unint64_t v2 = v37;
      uint64_t v5 = v28;
      if (v27 == v8) {
        goto LABEL_34;
      }
    }
  }
  uint64_t v6 = MEMORY[0x263F8EE78];
LABEL_34:
  swift_bridgeObjectRelease();
  return v6;
}

void *static ConnectionPolicyRoute.groupedRoutesAndSortedByPriority(_:)(uint64_t a1)
{
  uint64_t v1 = (void *)MEMORY[0x263F8EE80];
  uint64_t v55 = (void *)MEMORY[0x263F8EE80];
  if (*(void *)(a1 + 16))
  {
    uint64_t v53 = *(void *)(a1 + 16);
    uint64_t v2 = swift_bridgeObjectRetain() + 72;
    while (1)
    {
      uint64_t v3 = *(void *)(v2 - 32);
      uint64_t v4 = *(void *)(v2 - 16);
      uint64_t v43 = *(void *)(v2 - 40);
      uint64_t v44 = *(void *)(v2 - 24);
      uint64_t v5 = *(void *)(v2 + 8);
      uint64_t v45 = *(void *)v2;
      uint64_t v46 = *(void *)(v2 + 16);
      uint64_t v6 = *(void *)(v2 + 24);
      char v47 = *(unsigned char *)(v2 + 32);
      uint64_t v7 = *(void *)(v2 + 48);
      uint64_t v48 = *(void *)(v2 + 40);
      char v49 = *(unsigned char *)(v2 + 56);
      uint64_t v50 = *(void *)(v2 + 64);
      char v51 = *(unsigned char *)(v2 + 72);
      char v52 = *(unsigned char *)(v2 + 73);
      uint64_t v42 = *(void *)(v2 - 8);
      unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v42);
      uint64_t v10 = v1[2];
      BOOL v11 = (v9 & 1) == 0;
      uint64_t v12 = v10 + v11;
      if (__OFADD__(v10, v11)) {
        break;
      }
      unint64_t v13 = v8;
      char v14 = v9;
      uint64_t v54 = v1;
      uint64_t v15 = v1[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v15 < v12)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v12, 1);
        uint64_t v54 = v55;
        unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v42);
        if ((v14 & 1) != (v17 & 1)) {
          goto LABEL_20;
        }
        unint64_t v13 = v16;
      }
      if (v14)
      {
        uint64_t v18 = v54[7];
        uint64_t v19 = *(void *)(v18 + 8 * v13);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v18 + 8 * v13) = v19;
        uint64_t v21 = v53;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          OUTLINED_FUNCTION_7_8();
          uint64_t v32 = v31;
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v21 = v32;
          uint64_t v19 = v33;
          *(void *)(v18 + 8 * v13) = v33;
        }
        unint64_t v23 = *(void *)(v19 + 16);
        unint64_t v22 = *(void *)(v19 + 24);
        unint64_t v24 = v23 + 1;
        uint64_t v25 = v7;
        if (v23 >= v22 >> 1)
        {
          OUTLINED_FUNCTION_11_7(v22);
          unint64_t v41 = v34;
          uint64_t v36 = v35;
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          unint64_t v24 = v41;
          uint64_t v21 = v36;
          uint64_t v19 = v37;
          uint64_t v25 = v7;
          *(void *)(v18 + 8 * v13) = v37;
        }
        *(void *)(v19 + 16) = v24;
        uint64_t v26 = v19 + 120 * v23;
        *(void *)(v26 + 32) = v43;
        *(void *)(v26 + 40) = v3;
        *(void *)(v26 + 48) = v44;
        *(void *)(v26 + 56) = v4;
        *(void *)(v26 + 64) = v42;
        *(void *)(v26 + 72) = v45;
        *(void *)(v26 + 80) = v5;
        *(void *)(v26 + 88) = v46;
        *(void *)(v26 + 96) = v6;
        *(unsigned char *)(v26 + 104) = v47;
        *(void *)(v26 + 112) = v48;
        *(void *)(v26 + 120) = v25;
        *(unsigned char *)(v26 + 128) = v49;
        *(void *)(v26 + 136) = v50;
        *(unsigned char *)(v26 + 144) = v51;
        *(unsigned char *)(v26 + 145) = v52;
        uint64_t v1 = v54;
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<ConnectionPolicyRoute>);
        uint64_t v27 = swift_allocObject();
        *(_OWORD *)(v27 + 16) = xmmword_25D790C50;
        *(void *)(v27 + 32) = v43;
        *(void *)(v27 + 40) = v3;
        *(void *)(v27 + 48) = v44;
        *(void *)(v27 + 56) = v4;
        *(void *)(v27 + 64) = v42;
        *(void *)(v27 + 72) = v45;
        *(void *)(v27 + 80) = v5;
        *(void *)(v27 + 88) = v46;
        *(void *)(v27 + 96) = v6;
        *(unsigned char *)(v27 + 104) = v47;
        *(void *)(v27 + 112) = v48;
        *(void *)(v27 + 120) = v7;
        *(unsigned char *)(v27 + 128) = v49;
        *(void *)(v27 + 136) = v50;
        *(unsigned char *)(v27 + 144) = v51;
        *(unsigned char *)(v27 + 145) = v52;
        uint64_t v1 = v54;
        v54[(v13 >> 6) + 8] |= 1 << v13;
        *(void *)(v54[6] + 8 * v13) = v42;
        *(void *)(v54[7] + 8 * v13) = v27;
        uint64_t v28 = v54[2];
        BOOL v29 = __OFADD__(v28, 1);
        uint64_t v30 = v28 + 1;
        uint64_t v21 = v53;
        if (v29) {
          goto LABEL_19;
        }
        v54[2] = v30;
      }
      v2 += 120;
      uint64_t v53 = v21 - 1;
      if (v21 == 1)
      {
        swift_bridgeObjectRelease();
        goto LABEL_17;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    uint64_t result = (void *)swift_release();
    __break(1u);
  }
  else
  {
LABEL_17:
    uint64_t v38 = swift_bridgeObjectRetain();
    long long v39 = specialized _copyCollectionToContiguousArray<A>(_:)(v38);
    swift_release();
    uint64_t v55 = v39;
    specialized MutableCollection<>.sort(by:)(&v55);
    swift_release();
    return v55;
  }
  return result;
}

uint64_t static ConnectionPolicyRoute.prioritizedPOPRoutes(_:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t v2 = swift_bridgeObjectRetain() + 72;
  uint64_t v3 = MEMORY[0x263F8EE78];
  do
  {
    uint64_t v4 = *(void *)(v2 - 32);
    uint64_t v5 = *(void *)(v2 - 16);
    uint64_t v18 = *(void *)(v2 - 40);
    uint64_t v19 = *(void *)(v2 - 24);
    uint64_t v6 = *(void *)(v2 + 8);
    uint64_t v20 = *(void *)(v2 - 8);
    uint64_t v21 = *(void *)v2;
    uint64_t v7 = *(void *)(v2 + 24);
    uint64_t v22 = *(void *)(v2 + 16);
    char v23 = *(unsigned char *)(v2 + 32);
    uint64_t v24 = *(void *)(v2 + 40);
    char v26 = *(unsigned char *)(v2 + 56);
    uint64_t v27 = *(void *)(v2 + 64);
    char v28 = *(unsigned char *)(v2 + 72);
    int v8 = *(unsigned __int8 *)(v2 + 73);
    uint64_t v25 = *(void *)(v2 + 48);
    if (v8 == 4)
    {
      unint64_t v9 = *(void *)(v3 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (!swift_isUniquelyReferenced_nonNull_native() || v9 >= *(void *)(v3 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v3 = v10;
      }
      swift_arrayDestroy();
      uint64_t v11 = *(void *)(v3 + 16);
      memmove((void *)(v3 + 152), (const void *)(v3 + 32), 120 * v11);
      *(void *)(v3 + 16) = v11 + 1;
      *(void *)(v3 + 32) = v18;
      *(void *)(v3 + 40) = v4;
      *(void *)(v3 + 48) = v19;
      *(void *)(v3 + 56) = v5;
      *(void *)(v3 + 64) = v20;
      *(void *)(v3 + 72) = v21;
      *(void *)(v3 + 80) = v6;
      *(void *)(v3 + 88) = v22;
      *(void *)(v3 + 96) = v7;
      *(unsigned char *)(v3 + 104) = v23;
      *(void *)(v3 + 112) = v24;
      *(void *)(v3 + 120) = v25;
      *(unsigned char *)(v3 + 128) = v26;
      *(void *)(v3 + 136) = v27;
      *(unsigned char *)(v3 + 144) = v28;
      *(unsigned char *)(v3 + 145) = 4;
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v3 = v15;
      }
      unint64_t v13 = *(void *)(v3 + 16);
      unint64_t v12 = *(void *)(v3 + 24);
      if (v13 >= v12 >> 1)
      {
        OUTLINED_FUNCTION_11_7(v12);
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v3 = v16;
      }
      *(void *)(v3 + 16) = v13 + 1;
      uint64_t v14 = v3 + 120 * v13;
      *(void *)(v14 + 32) = v18;
      *(void *)(v14 + 40) = v4;
      *(void *)(v14 + 48) = v19;
      *(void *)(v14 + 56) = v5;
      *(void *)(v14 + 64) = v20;
      *(void *)(v14 + 72) = v21;
      *(void *)(v14 + 80) = v6;
      *(void *)(v14 + 88) = v22;
      *(void *)(v14 + 96) = v7;
      *(unsigned char *)(v14 + 104) = v23;
      *(void *)(v14 + 112) = v24;
      *(void *)(v14 + 120) = v25;
      *(unsigned char *)(v14 + 128) = v26;
      *(void *)(v14 + 136) = v27;
      *(unsigned char *)(v14 + 144) = v28;
      *(unsigned char *)(v14 + 145) = v8;
    }
    v2 += 120;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease();
  return v3;
}

SiriNetwork::ConnectionPolicyType __swiftcall ConnectionPolicyType.init(fromRawValue:)(Swift::String_optional fromRawValue)
{
  uint64_t v2 = v1;
  if (fromRawValue.value._object)
  {
    object = fromRawValue.value._object;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_13_7();
    BOOL v5 = v5 && v4 == object;
    if (v5)
    {
      swift_bridgeObjectRelease();
LABEL_10:
      LOBYTE(fromRawValue.value._countAndFlagsBits) = swift_bridgeObjectRelease();
      char v7 = 1;
      goto LABEL_11;
    }
    char v6 = OUTLINED_FUNCTION_3_23();
    swift_bridgeObjectRelease();
    if (v6) {
      goto LABEL_10;
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_13_7();
    if (v5 && v8 == object)
    {
      swift_bridgeObjectRelease();
LABEL_19:
      LOBYTE(fromRawValue.value._countAndFlagsBits) = swift_bridgeObjectRelease();
      char v7 = 2;
      goto LABEL_11;
    }
    char v10 = OUTLINED_FUNCTION_3_23();
    swift_bridgeObjectRelease();
    if (v10) {
      goto LABEL_19;
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_13_7();
    if (v5 && v11 == object)
    {
      swift_bridgeObjectRelease();
LABEL_27:
      LOBYTE(fromRawValue.value._countAndFlagsBits) = swift_bridgeObjectRelease();
      char v7 = 3;
      goto LABEL_11;
    }
    char v13 = OUTLINED_FUNCTION_3_23();
    swift_bridgeObjectRelease();
    if (v13) {
      goto LABEL_27;
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_13_7();
    if (v5 && v14 == object)
    {
      swift_bridgeObjectRelease();
      LOBYTE(fromRawValue.value._countAndFlagsBits) = swift_bridgeObjectRelease();
      char v7 = 4;
    }
    else
    {
      char v16 = OUTLINED_FUNCTION_3_23();
      swift_bridgeObjectRelease();
      LOBYTE(fromRawValue.value._countAndFlagsBits) = swift_bridgeObjectRelease();
      if (v16) {
        char v7 = 4;
      }
      else {
        char v7 = 0;
      }
    }
  }
  else
  {
    char v7 = 0;
  }
LABEL_11:
  *uint64_t v2 = v7;
  return fromRawValue.value._countAndFlagsBits;
}

SiriNetwork::ConnectionPolicyType_optional __swiftcall ConnectionPolicyType.init(rawValue:)(Swift::Int rawValue)
{
  char v2 = 5;
  if ((unint64_t)rawValue < 5) {
    char v2 = rawValue;
  }
  char *v1 = v2;
  return (SiriNetwork::ConnectionPolicyType_optional)rawValue;
}

uint64_t ConnectionPolicyType.rawValue.getter()
{
  return *v0;
}

SiriNetwork::ConnectionPolicyType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ConnectionPolicyType(Swift::Int *a1)
{
  return ConnectionPolicyType.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ConnectionPolicyType@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ConnectionPolicyType.rawValue.getter();
  *a1 = result;
  return result;
}

uint64_t ConnectionPolicyProtocol.stringRawValue.getter()
{
  uint64_t result = *v0;
  if (*v0) {
    return static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  return result;
}

SiriNetwork::ConnectionPolicyProtocol_optional __swiftcall ConnectionPolicyProtocol.init(rawValue:)(Swift::Int rawValue)
{
  char v2 = 3;
  if ((unint64_t)rawValue < 3) {
    char v2 = rawValue;
  }
  char *v1 = v2;
  return (SiriNetwork::ConnectionPolicyProtocol_optional)rawValue;
}

SiriNetwork::ConnectionPolicyProtocol_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ConnectionPolicyProtocol(Swift::Int *a1)
{
  return ConnectionPolicyProtocol.init(rawValue:)(*a1);
}

double static ConnectionPolicyRoute.maxTimeoutBetweenScheduledRoute.getter()
{
  return 5.0;
}

uint64_t ConnectionPolicyRoute.routeId.getter()
{
  return OUTLINED_FUNCTION_23_0();
}

uint64_t ConnectionPolicyRoute.routeId.setter()
{
  OUTLINED_FUNCTION_2_12();
  uint64_t result = swift_bridgeObjectRelease();
  void *v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*ConnectionPolicyRoute.routeId.modify())(void)
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

uint64_t ConnectionPolicyRoute.connectionId.getter()
{
  return OUTLINED_FUNCTION_23_0();
}

uint64_t ConnectionPolicyRoute.connectionId.setter()
{
  OUTLINED_FUNCTION_2_12();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 16) = v2;
  *(void *)(v1 + 24) = v0;
  return result;
}

uint64_t (*ConnectionPolicyRoute.connectionId.modify())(void)
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

uint64_t ConnectionPolicyRoute.priority.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t ConnectionPolicyRoute.priority.setter(uint64_t result)
{
  *(void *)(v1 + 32) = result;
  return result;
}

uint64_t (*ConnectionPolicyRoute.priority.modify())(void)
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

uint64_t ConnectionPolicyRoute.routeHost.getter()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[8];
  if (v0[6])
  {
    uint64_t v3 = v0[5];
    swift_bridgeObjectRetain();
    v4._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_1_12();
    if (String.hasSuffix(_:)(v4)) {
      return v3;
    }
    v5._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_5_17();
    if (String.hasPrefix(_:)(v5)) {
      return v3;
    }
    swift_bridgeObjectRelease();
  }
  if (v2 && (swift_bridgeObjectRetain(), v6._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_1_12(), !String.hasSuffix(_:)(v6)))
  {
    v8._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_5_17();
    Swift::Bool v9 = String.hasPrefix(_:)(v8);
    swift_bridgeObjectRelease();
    if (!v9)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return v1;
}

uint64_t ConnectionPolicyRoute.cname.getter()
{
  return OUTLINED_FUNCTION_23_0();
}

uint64_t ConnectionPolicyRoute.cname.setter()
{
  OUTLINED_FUNCTION_2_12();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 40) = v2;
  *(void *)(v1 + 48) = v0;
  return result;
}

uint64_t (*ConnectionPolicyRoute.cname.modify())(void)
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

uint64_t ConnectionPolicyRoute.host.getter()
{
  return OUTLINED_FUNCTION_23_0();
}

uint64_t ConnectionPolicyRoute.host.setter()
{
  OUTLINED_FUNCTION_2_12();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 56) = v2;
  *(void *)(v1 + 64) = v0;
  return result;
}

uint64_t (*ConnectionPolicyRoute.host.modify())(void)
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

uint64_t ConnectionPolicyRoute.mptcp.getter()
{
  return *(unsigned __int8 *)(v0 + 72);
}

uint64_t ConnectionPolicyRoute.mptcp.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 72) = result;
  return result;
}

uint64_t (*ConnectionPolicyRoute.mptcp.modify())(void)
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

uint64_t ConnectionPolicyRoute.resolver.getter()
{
  return OUTLINED_FUNCTION_23_0();
}

uint64_t ConnectionPolicyRoute.resolver.setter()
{
  OUTLINED_FUNCTION_2_12();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 80) = v2;
  *(void *)(v1 + 88) = v0;
  return result;
}

uint64_t (*ConnectionPolicyRoute.resolver.modify())(void)
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

void ConnectionPolicyRoute.resolverProtocol.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 96);
}

unsigned char *ConnectionPolicyRoute.resolverProtocol.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 96) = *result;
  return result;
}

uint64_t (*ConnectionPolicyRoute.resolverProtocol.modify())(void)
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

uint64_t ConnectionPolicyRoute.timeout.getter()
{
  return *(void *)(v0 + 104);
}

uint64_t ConnectionPolicyRoute.timeout.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 104) = result;
  *(unsigned char *)(v2 + 112) = a2 & 1;
  return result;
}

uint64_t (*ConnectionPolicyRoute.timeout.modify())(void)
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

void ConnectionPolicyRoute.type.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 113);
}

unsigned char *ConnectionPolicyRoute.type.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 113) = *result;
  return result;
}

uint64_t (*ConnectionPolicyRoute.type.modify())(void)
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

void __swiftcall ConnectionPolicyRoute.init()(SiriNetwork::ConnectionPolicyRoute *__return_ptr retstr)
{
  retstr->host.value._object = 0;
  *(_OWORD *)&retstr->priority = 0u;
  *(_OWORD *)&retstr->cname.value._object = 0u;
  retstr->routeId = 0u;
  retstr->connectionId = 0u;
  retstr->mptcp = 1;
  retstr->resolver.value._uint64_t countAndFlagsBits = 0;
  retstr->resolver.value._object = 0;
  retstr->resolverProtocol.uint64_t value = SiriNetwork_ConnectionPolicyProtocol_unknownDefault;
  retstr->timeout.uint64_t value = 0.0;
  *(_WORD *)&retstr->timeout.is_nil = 1281;
}

id ConnectionPolicyRoute.connectionPolicyRouteObject()()
{
  uint64_t v1 = *((void *)v0 + 2);
  uint64_t v2 = *((void *)v0 + 3);
  double v28 = *v0;
  uint64_t v29 = *((void *)v0 + 4);
  uint64_t v4 = *((void *)v0 + 5);
  uint64_t v3 = (void *)*((void *)v0 + 6);
  uint64_t v6 = *((void *)v0 + 7);
  uint64_t v5 = *((void *)v0 + 8);
  uint64_t v7 = *((void *)v0 + 11);
  uint64_t v27 = *((void *)v0 + 10);
  uint64_t v30 = *((unsigned __int8 *)v0 + 96);
  uint64_t v31 = *((void *)v0 + 1);
  double v8 = v0[13];
  char v32 = *((unsigned char *)v0 + 112);
  uint64_t v33 = *((unsigned __int8 *)v0 + 113);
  id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F64838]), sel_init);
  if (v3) {
    uint64_t v3 = (void *)MEMORY[0x2611B2220](v4, v3);
  }
  objc_msgSend(v9, sel_setCname_, v3);

  if (v2)
  {
    uint64_t v10 = MEMORY[0x2611B2220](v1, v2);
    uint64_t v11 = (void *)v10;
  }
  else
  {
    uint64_t v11 = 0;
  }
  OUTLINED_FUNCTION_4_16(v10, sel_setConnectionId_);

  if (v5)
  {
    uint64_t v12 = MEMORY[0x2611B2220](v6, v5);
    char v13 = (void *)v12;
  }
  else
  {
    char v13 = 0;
  }
  OUTLINED_FUNCTION_4_16(v12, sel_setHost_);

  Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
  OUTLINED_FUNCTION_4_16((uint64_t)isa, sel_setMptcp_);

  id v15 = objc_msgSend(v9, sel_setPriority_, v29);
  if (v7)
  {
    id v15 = (id)MEMORY[0x2611B2220](v27, v7);
    char v16 = v15;
  }
  else
  {
    char v16 = 0;
  }
  OUTLINED_FUNCTION_4_16((uint64_t)v15, sel_setResolver_);

  uint64_t v18 = 0;
  switch(v30)
  {
    case 1:
    case 2:
      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v18 = (void *)MEMORY[0x2611B2220](v19);
      uint64_t v17 = swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  OUTLINED_FUNCTION_4_16(v17, sel_setResolverProtocol_);

  if (v31)
  {
    uint64_t v20 = MEMORY[0x2611B2220](*(void *)&v28);
    uint64_t v21 = (void *)v20;
  }
  else
  {
    uint64_t v21 = 0;
  }
  OUTLINED_FUNCTION_4_16(v20, sel_setRouteId_);

  if ((v32 & 1) == 0)
  {
    char v23 = (void *)MEMORY[0x2611B23F0](v8);
    OUTLINED_FUNCTION_4_16((uint64_t)v23, sel_setTimeout_);
  }
  uint64_t v24 = 0;
  switch(v33)
  {
    case 1:
    case 2:
    case 3:
    case 4:
      uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v24 = (void *)MEMORY[0x2611B2220](v25);
      uint64_t v22 = swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  OUTLINED_FUNCTION_4_16(v22, sel_setType_);

  return v9;
}

uint64_t ConnectionPolicyRoute.debugDescription.getter()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void **)(v0 + 8);
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v5 = *(void *)(v0 + 32);
  uint64_t v48 = *(void *)(v0 + 40);
  uint64_t v6 = *(void **)(v0 + 48);
  uint64_t v7 = *(void **)(v0 + 64);
  int v60 = *(unsigned __int8 *)(v0 + 72);
  double v8 = *(void **)(v0 + 88);
  uint64_t v57 = *(void *)(v0 + 56);
  uint64_t v59 = *(void *)(v0 + 80);
  int v52 = *(unsigned __int8 *)(v0 + 96);
  uint64_t v53 = *(void *)(v0 + 104);
  char v61 = *(unsigned char *)(v0 + 112);
  int v55 = *(unsigned __int8 *)(v0 + 113);
  v62._uint64_t countAndFlagsBits = 0x3A64496574756F72;
  v62._object = (void *)0xE900000000000020;
  uint64_t v51 = *(void *)v0;
  if (v2)
  {
    v77._uint64_t countAndFlagsBits = v1;
    v77._object = v2;
    swift_bridgeObjectRetain();
    uint64_t v9 = String.init<A>(describing:)();
    unint64_t v11 = v10;
  }
  else
  {
    unint64_t v11 = 0xE700000000000000;
    uint64_t v9 = OUTLINED_FUNCTION_0_4();
  }
  unint64_t v12 = v11;
  String.append(_:)(*(Swift::String *)&v9);
  swift_bridgeObjectRelease();
  uint64_t countAndFlagsBits = v62._countAndFlagsBits;
  OUTLINED_FUNCTION_8_11();
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  strcpy((char *)&v62, "connectionId: ");
  HIBYTE(v62._object) = -18;
  if (v3)
  {
    v77._uint64_t countAndFlagsBits = v4;
    v77._object = v3;
    swift_bridgeObjectRetain();
    uint64_t v13 = String.init<A>(describing:)();
    unint64_t v15 = v14;
  }
  else
  {
    unint64_t v15 = 0xE700000000000000;
    uint64_t v13 = OUTLINED_FUNCTION_0_4();
  }
  unint64_t v16 = v15;
  String.append(_:)(*(Swift::String *)&v13);
  swift_bridgeObjectRelease();
  Swift::String v54 = v62;
  v17._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v77._uint64_t countAndFlagsBits = 0x736F486574756F72;
  v77._object = (void *)0xEB00000000203A74;
  v62._uint64_t countAndFlagsBits = v51;
  v62._object = v2;
  uint64_t v63 = v4;
  uint64_t v64 = v3;
  uint64_t v65 = v5;
  uint64_t v66 = v48;
  uint64_t v67 = v6;
  uint64_t v68 = v57;
  uint64_t v69 = v7;
  char v70 = v60;
  uint64_t v71 = v59;
  uint64_t v72 = v8;
  char v73 = v52;
  uint64_t v74 = v53;
  char v75 = v61;
  char v76 = v55;
  uint64_t v18 = ConnectionPolicyRoute.routeHost.getter();
  unint64_t v20 = 0xE700000000000000;
  if (v19)
  {
    v62._uint64_t countAndFlagsBits = v18;
    v62._object = v19;
    uint64_t v21 = String.init<A>(describing:)();
    unint64_t v23 = v22;
  }
  else
  {
    uint64_t v21 = OUTLINED_FUNCTION_0_4();
    unint64_t v23 = 0xE700000000000000;
  }
  unint64_t v24 = v23;
  String.append(_:)(*(Swift::String *)&v21);
  swift_bridgeObjectRelease();
  Swift::String v50 = v77;
  v62._uint64_t countAndFlagsBits = 0x203A656D616E63;
  v62._object = (void *)0xE700000000000000;
  if (v6)
  {
    v77._uint64_t countAndFlagsBits = v48;
    v77._object = v6;
    swift_bridgeObjectRetain();
    uint64_t v25 = String.init<A>(describing:)();
    unint64_t v20 = v26;
  }
  else
  {
    uint64_t v25 = OUTLINED_FUNCTION_0_4();
  }
  unint64_t v27 = v20;
  String.append(_:)(*(Swift::String *)&v25);
  swift_bridgeObjectRelease();
  Swift::String v28 = v62;
  v62._uint64_t countAndFlagsBits = 0x203A74736F68;
  v62._object = (void *)0xE600000000000000;
  unint64_t v29 = 0xE700000000000000;
  if (v7)
  {
    v77._uint64_t countAndFlagsBits = v57;
    v77._object = v7;
    swift_bridgeObjectRetain();
    uint64_t v30 = String.init<A>(describing:)();
  }
  else
  {
    uint64_t v30 = OUTLINED_FUNCTION_0_4();
  }
  OUTLINED_FUNCTION_12_8(v30);
  swift_bridgeObjectRelease();
  object = v62._object;
  uint64_t v58 = v62._countAndFlagsBits;
  v62._uint64_t countAndFlagsBits = 0x203A706374706DLL;
  v62._object = (void *)0xE700000000000000;
  if (v60) {
    uint64_t v32 = 1702195828;
  }
  else {
    uint64_t v32 = 0x65736C6166;
  }
  OUTLINED_FUNCTION_12_8(v32);
  swift_bridgeObjectRelease();
  uint64_t v33 = v62._object;
  uint64_t v49 = v62._countAndFlagsBits;
  v62._uint64_t countAndFlagsBits = 0x7265766C6F736572;
  v62._object = (void *)0xEA0000000000203ALL;
  if (v8)
  {
    v77._uint64_t countAndFlagsBits = v59;
    v77._object = v8;
    swift_bridgeObjectRetain();
    uint64_t v34 = String.init<A>(describing:)();
    unint64_t v29 = v35;
  }
  else
  {
    uint64_t v34 = OUTLINED_FUNCTION_0_4();
  }
  unint64_t v36 = v29;
  String.append(_:)(*(Swift::String *)&v34);
  swift_bridgeObjectRelease();
  Swift::String v37 = v62;
  OUTLINED_FUNCTION_8_11();
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease();
  v62._uint64_t countAndFlagsBits = 0xD000000000000012;
  v62._object = (void *)0x800000025D796C30;
  if (v52 == 3)
  {
    uint64_t v38 = OUTLINED_FUNCTION_0_4();
  }
  else
  {
    LOBYTE(v77._countAndFlagsBits) = v52;
    uint64_t v38 = String.init<A>(describing:)();
  }
  OUTLINED_FUNCTION_12_8(v38);
  swift_bridgeObjectRelease();
  Swift::String v39 = v62;
  v62._uint64_t countAndFlagsBits = 0x3A74756F656D6974;
  v62._object = (void *)0xE900000000000020;
  if (v61)
  {
    uint64_t v40 = OUTLINED_FUNCTION_0_4();
  }
  else
  {
    v77._uint64_t countAndFlagsBits = v53;
    uint64_t v40 = String.init<A>(describing:)();
  }
  OUTLINED_FUNCTION_12_8(v40);
  swift_bridgeObjectRelease();
  Swift::String v41 = v62;
  v62._uint64_t countAndFlagsBits = 0x203A65707974;
  v62._object = (void *)0xE600000000000000;
  if (v55 == 5)
  {
    uint64_t v42 = OUTLINED_FUNCTION_0_4();
  }
  else
  {
    LOBYTE(v77._countAndFlagsBits) = v55;
    uint64_t v42 = String.init<A>(describing:)();
  }
  uint64_t v43 = v37._countAndFlagsBits;
  String.append(_:)(*(Swift::String *)&v42);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_8_11();
  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_1_28();
  String.append(_:)(v54);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_1_28();
  v44._uint64_t countAndFlagsBits = 0x797469726F697270;
  v44._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v44);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_1_28();
  String.append(_:)(v50);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_1_28();
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_1_28();
  v45._uint64_t countAndFlagsBits = v58;
  v45._object = object;
  String.append(_:)(v45);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_1_28();
  v46._uint64_t countAndFlagsBits = v49;
  v46._object = v33;
  String.append(_:)(v46);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_1_28();
  String.append(_:)(v37);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_1_28();
  String.append(_:)(v39);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_1_28();
  String.append(_:)(v41);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_1_28();
  String.append(_:)(v62);
  swift_bridgeObjectRelease();
  return countAndFlagsBits;
}

uint64_t specialized static Array._allocateUninitialized(_:)(uint64_t a1)
{
  if (a1 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (a1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: Int, value: [ConnectionPolicyRoute]));
    uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(result + 16) = a1;
  }
  else
  {
    return MEMORY[0x263F8EE78];
  }
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, [ConnectionPolicyRoute]>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    unint64_t v10 = (uint64_t *)(v5 + 64);
    uint64_t v9 = *(void *)(v5 + 64);
    uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v30 = -1 << v11;
    uint64_t v31 = v11;
    if (v11 < 64) {
      uint64_t v12 = ~(-1 << v11);
    }
    else {
      uint64_t v12 = -1;
    }
    unint64_t v13 = v12 & v9;
    int64_t v32 = (unint64_t)(v11 + 63) >> 6;
    uint64_t v14 = result + 64;
    if ((v12 & v9) == 0) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v15 = __clz(__rbit64(v13));
    v13 &= v13 - 1;
    for (unint64_t i = v15 | (v8 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v8 << 6))
    {
      uint64_t v20 = *(void *)(*(void *)(v5 + 48) + 8 * i);
      uint64_t v21 = *(void *)(*(void *)(v5 + 56) + 8 * i);
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v22 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v14 + 8 * (v23 >> 6))) == 0)
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v22) >> 6;
        while (++v24 != v27 || (v26 & 1) == 0)
        {
          BOOL v28 = v24 == v27;
          if (v24 == v27) {
            unint64_t v24 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v14 + 8 * v24);
          if (v29 != -1)
          {
            unint64_t v25 = __clz(__rbit64(~v29)) + (v24 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
        return result;
      }
      unint64_t v25 = __clz(__rbit64((-1 << v23) & ~*(void *)(v14 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(void *)(v14 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
      *(void *)(*(void *)(v7 + 48) + 8 * v25) = v20;
      *(void *)(*(void *)(v7 + 56) + 8 * v25) = v21;
      ++*(void *)(v7 + 16);
      if (v13) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v17 = v8 + 1;
      if (__OFADD__(v8, 1)) {
        goto LABEL_40;
      }
      if (v17 >= v32) {
        goto LABEL_32;
      }
      unint64_t v18 = v10[v17];
      ++v8;
      if (!v18)
      {
        int64_t v8 = v17 + 1;
        if (v17 + 1 >= v32) {
          goto LABEL_32;
        }
        unint64_t v18 = v10[v8];
        if (!v18)
        {
          int64_t v19 = v17 + 2;
          if (v19 >= v32)
          {
LABEL_32:
            if (a2)
            {
              if (v31 >= 64) {
                specialized UnsafeMutablePointer.assign(repeating:count:)(0, v32, (void *)(v5 + 64));
              }
              else {
                *unint64_t v10 = v30;
              }
              *(void *)(v5 + 16) = 0;
            }
            break;
          }
          unint64_t v18 = v10[v19];
          if (!v18)
          {
            while (1)
            {
              int64_t v8 = v19 + 1;
              if (__OFADD__(v19, 1)) {
                goto LABEL_41;
              }
              if (v8 >= v32) {
                goto LABEL_32;
              }
              unint64_t v18 = v10[v8];
              ++v19;
              if (v18) {
                goto LABEL_18;
              }
            }
          }
          int64_t v8 = v19;
        }
      }
LABEL_18:
      unint64_t v13 = (v18 - 1) & v18;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(key: Int, value: [ConnectionPolicyRoute])>);
  uint64_t v3 = (void *)swift_allocObject();
  size_t v4 = _swift_stdlib_malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 16);
  uint64_t v5 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v7, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [String : UInt64].Iterator._Variant();
  if (v5 != v1)
  {
    __break(1u);
    return (void *)MEMORY[0x263F8EE78];
  }
  return v3;
}

uint64_t specialized MutableCollection<>.sort(by:)(void **a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()((uint64_t)v2);
  }
  uint64_t v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  uint64_t result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

uint64_t specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  uint64_t result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3) {
        return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, a1);
      }
      return result;
    }
    goto LABEL_124;
  }
  uint64_t v5 = result;
  uint64_t result = specialized static Array._allocateUninitialized(_:)(v3 / 2);
  __int16 v89 = a1;
  uint64_t v90 = result;
  uint64_t v94 = v6;
  uint64_t v92 = v3;
  if (v3 <= 0)
  {
    uint64_t v9 = MEMORY[0x263F8EE78];
    unint64_t v32 = *(void *)(MEMORY[0x263F8EE78] + 16);
LABEL_90:
    if (v32 < 2)
    {
LABEL_101:
      uint64_t result = swift_bridgeObjectRelease();
      if (v92 >= -1)
      {
        *(void *)(v90 + 16) = 0;
        return swift_bridgeObjectRelease();
      }
      goto LABEL_129;
    }
    uint64_t v81 = *v89;
    while (1)
    {
      unint64_t v82 = v32 - 2;
      if (v32 < 2) {
        break;
      }
      if (!v81) {
        goto LABEL_133;
      }
      uint64_t v83 = *(void *)(v9 + 32 + 16 * v82);
      uint64_t v84 = *(void *)(v9 + 32 + 16 * (v32 - 1) + 8);
      uint64_t result = specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v81 + 16 * v83), (char *)(v81 + 16 * *(void *)(v9 + 32 + 16 * (v32 - 1))), v81 + 16 * v84, v94);
      if (v1) {
        goto LABEL_86;
      }
      if (v84 < v83) {
        goto LABEL_119;
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v9);
        uint64_t v9 = result;
      }
      if (v82 >= *(void *)(v9 + 16)) {
        goto LABEL_120;
      }
      long long v85 = (void *)(v9 + 32 + 16 * v82);
      *long long v85 = v83;
      v85[1] = v84;
      unint64_t v86 = *(void *)(v9 + 16);
      if (v32 > v86) {
        goto LABEL_121;
      }
      uint64_t result = (uint64_t)memmove((void *)(v9 + 32 + 16 * (v32 - 1)), (const void *)(v9 + 32 + 16 * v32), 16 * (v86 - v32));
      *(void *)(v9 + 16) = v86 - 1;
      unint64_t v32 = v86 - 1;
      if (v86 <= 2) {
        goto LABEL_101;
      }
    }
LABEL_118:
    __break(1u);
LABEL_119:
    __break(1u);
LABEL_120:
    __break(1u);
LABEL_121:
    __break(1u);
LABEL_122:
    __break(1u);
LABEL_123:
    __break(1u);
LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
LABEL_129:
    __break(1u);
LABEL_130:
    __break(1u);
LABEL_131:
    __break(1u);
LABEL_132:
    __break(1u);
LABEL_133:
    __break(1u);
    return result;
  }
  Swift::Int v7 = 0;
  uint64_t v8 = *a1;
  uint64_t v87 = *a1 - 16;
  uint64_t v88 = *a1 + 32;
  uint64_t v9 = MEMORY[0x263F8EE78];
  uint64_t v91 = v5;
  uint64_t v93 = *a1;
  while (1)
  {
    Swift::Int v10 = v7++;
    if (v7 < v3)
    {
      uint64_t v11 = *(void *)(v8 + 16 * v7);
      uint64_t v12 = 16 * v10;
      uint64_t v13 = *(void *)(v8 + 16 * v10);
      Swift::Int v7 = v10 + 2;
      if (v10 + 2 < v3)
      {
        uint64_t v14 = (uint64_t *)(v88 + 16 * v10);
        uint64_t v15 = v11;
        while (1)
        {
          uint64_t v17 = *v14;
          v14 += 2;
          uint64_t v16 = v17;
          if (v13 < v11 == v15 >= v17) {
            break;
          }
          ++v7;
          uint64_t v15 = v16;
          if (v7 >= v3)
          {
            Swift::Int v7 = v3;
            break;
          }
        }
      }
      if (v13 < v11)
      {
        if (v7 < v10) {
          goto LABEL_126;
        }
        if (v10 < v7)
        {
          uint64_t v18 = 16 * v7;
          Swift::Int v19 = v7;
          Swift::Int v20 = v10;
          do
          {
            if (v20 != --v19)
            {
              if (!v8) {
                goto LABEL_132;
              }
              uint64_t v21 = v8 + v18;
              uint64_t v22 = *(void *)(v8 + v12);
              uint64_t v23 = *(void *)(v8 + v12 + 8);
              *(_OWORD *)(v8 + v12) = *(_OWORD *)(v8 + v18 - 16);
              *(void *)(v21 - 16) = v22;
              *(void *)(v21 - 8) = v23;
            }
            ++v20;
            v18 -= 16;
            v12 += 16;
          }
          while (v20 < v19);
        }
      }
    }
    if (v7 < v3)
    {
      if (__OFSUB__(v7, v10)) {
        goto LABEL_123;
      }
      if (v7 - v10 < v5)
      {
        Swift::Int v24 = v10 + v5;
        if (__OFADD__(v10, v5)) {
          goto LABEL_127;
        }
        if (v24 >= v3) {
          Swift::Int v24 = v3;
        }
        if (v24 < v10) {
          goto LABEL_128;
        }
        if (v7 != v24)
        {
          uint64_t v25 = v87 + 16 * v7;
          do
          {
            uint64_t v26 = *(void *)(v8 + 16 * v7);
            Swift::Int v27 = v10;
            uint64_t v28 = v25;
            do
            {
              if (*(void *)v28 >= v26) {
                break;
              }
              if (!v8) {
                goto LABEL_130;
              }
              uint64_t v29 = *(void *)(v28 + 24);
              *(_OWORD *)(v28 + 16) = *(_OWORD *)v28;
              *(void *)uint64_t v28 = v26;
              *(void *)(v28 + 8) = v29;
              v28 -= 16;
              ++v27;
            }
            while (v7 != v27);
            ++v7;
            v25 += 16;
          }
          while (v7 != v24);
          Swift::Int v7 = v24;
        }
      }
    }
    if (v7 < v10) {
      goto LABEL_122;
    }
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v9 + 16) + 1, 1, (char *)v9);
      uint64_t v9 = result;
    }
    unint64_t v31 = *(void *)(v9 + 16);
    unint64_t v30 = *(void *)(v9 + 24);
    unint64_t v32 = v31 + 1;
    uint64_t v8 = v93;
    if (v31 >= v30 >> 1)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v30 > 1), v31 + 1, 1, (char *)v9);
      uint64_t v8 = v93;
      uint64_t v9 = result;
    }
    *(void *)(v9 + 16) = v32;
    uint64_t v33 = v9 + 32;
    uint64_t v34 = (Swift::Int *)(v9 + 32 + 16 * v31);
    *uint64_t v34 = v10;
    v34[1] = v7;
    if (v31) {
      break;
    }
    unint64_t v32 = 1;
LABEL_81:
    uint64_t v5 = v91;
    Swift::Int v3 = v92;
    if (v7 >= v92) {
      goto LABEL_90;
    }
  }
  while (1)
  {
    unint64_t v35 = v32 - 1;
    if (v32 >= 4)
    {
      unint64_t v40 = v33 + 16 * v32;
      uint64_t v41 = *(void *)(v40 - 64);
      uint64_t v42 = *(void *)(v40 - 56);
      BOOL v46 = __OFSUB__(v42, v41);
      uint64_t v43 = v42 - v41;
      if (v46) {
        goto LABEL_107;
      }
      uint64_t v45 = *(void *)(v40 - 48);
      uint64_t v44 = *(void *)(v40 - 40);
      BOOL v46 = __OFSUB__(v44, v45);
      uint64_t v38 = v44 - v45;
      char v39 = v46;
      if (v46) {
        goto LABEL_108;
      }
      unint64_t v47 = v32 - 2;
      uint64_t v48 = (uint64_t *)(v33 + 16 * (v32 - 2));
      uint64_t v50 = *v48;
      uint64_t v49 = v48[1];
      BOOL v46 = __OFSUB__(v49, v50);
      uint64_t v51 = v49 - v50;
      if (v46) {
        goto LABEL_109;
      }
      BOOL v46 = __OFADD__(v38, v51);
      uint64_t v52 = v38 + v51;
      if (v46) {
        goto LABEL_111;
      }
      if (v52 >= v43)
      {
        char v70 = (uint64_t *)(v33 + 16 * v35);
        uint64_t v72 = *v70;
        uint64_t v71 = v70[1];
        BOOL v46 = __OFSUB__(v71, v72);
        uint64_t v73 = v71 - v72;
        if (v46) {
          goto LABEL_117;
        }
        BOOL v63 = v38 < v73;
        goto LABEL_70;
      }
    }
    else
    {
      if (v32 != 3)
      {
        uint64_t v64 = *(void *)(v9 + 32);
        uint64_t v65 = *(void *)(v9 + 40);
        BOOL v46 = __OFSUB__(v65, v64);
        uint64_t v57 = v65 - v64;
        char v58 = v46;
        goto LABEL_64;
      }
      uint64_t v37 = *(void *)(v9 + 32);
      uint64_t v36 = *(void *)(v9 + 40);
      BOOL v46 = __OFSUB__(v36, v37);
      uint64_t v38 = v36 - v37;
      char v39 = v46;
    }
    if (v39) {
      goto LABEL_110;
    }
    unint64_t v47 = v32 - 2;
    uint64_t v53 = (uint64_t *)(v33 + 16 * (v32 - 2));
    uint64_t v55 = *v53;
    uint64_t v54 = v53[1];
    BOOL v56 = __OFSUB__(v54, v55);
    uint64_t v57 = v54 - v55;
    char v58 = v56;
    if (v56) {
      goto LABEL_112;
    }
    uint64_t v59 = (uint64_t *)(v33 + 16 * v35);
    uint64_t v61 = *v59;
    uint64_t v60 = v59[1];
    BOOL v46 = __OFSUB__(v60, v61);
    uint64_t v62 = v60 - v61;
    if (v46) {
      goto LABEL_114;
    }
    if (__OFADD__(v57, v62)) {
      goto LABEL_116;
    }
    if (v57 + v62 >= v38)
    {
      BOOL v63 = v38 < v62;
LABEL_70:
      if (v63) {
        unint64_t v35 = v47;
      }
      goto LABEL_72;
    }
LABEL_64:
    if (v58) {
      goto LABEL_113;
    }
    uint64_t v66 = (uint64_t *)(v33 + 16 * v35);
    uint64_t v68 = *v66;
    uint64_t v67 = v66[1];
    BOOL v46 = __OFSUB__(v67, v68);
    uint64_t v69 = v67 - v68;
    if (v46) {
      goto LABEL_115;
    }
    if (v69 < v57) {
      goto LABEL_81;
    }
LABEL_72:
    uint64_t v74 = v9;
    unint64_t v75 = v35 - 1;
    if (v35 - 1 >= v32)
    {
      __break(1u);
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      __break(1u);
LABEL_107:
      __break(1u);
LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
      goto LABEL_118;
    }
    if (!v8) {
      goto LABEL_131;
    }
    char v76 = (uint64_t *)(v33 + 16 * v75);
    uint64_t v77 = *v76;
    uint64_t v78 = (void *)(v33 + 16 * v35);
    uint64_t v79 = v78[1];
    uint64_t result = specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v8 + 16 * *v76), (char *)(v8 + 16 * *v78), v8 + 16 * v79, v94);
    if (v1) {
      break;
    }
    if (v79 < v77) {
      goto LABEL_104;
    }
    if (v35 > *(void *)(v74 + 16)) {
      goto LABEL_105;
    }
    *char v76 = v77;
    *(void *)(v33 + 16 * v75 + 8) = v79;
    unint64_t v80 = *(void *)(v74 + 16);
    if (v35 >= v80) {
      goto LABEL_106;
    }
    uint64_t v9 = v74;
    unint64_t v32 = v80 - 1;
    uint64_t result = (uint64_t)memmove((void *)(v33 + 16 * v35), v78 + 2, 16 * (v80 - 1 - v35));
    *(void *)(v74 + 16) = v80 - 1;
    uint64_t v8 = v93;
    if (v80 <= 2) {
      goto LABEL_81;
    }
  }
LABEL_86:
  uint64_t result = swift_bridgeObjectRelease();
  if (v92 < -1) {
    goto LABEL_125;
  }
  *(void *)(v90 + 16) = 0;
  return swift_bridgeObjectRelease();
}