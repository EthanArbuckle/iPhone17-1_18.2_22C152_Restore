uint64_t sub_19E1F7248(uint64_t a1, int a2, int a3, int a4, int a5, int a6, uint64_t a7, char a8, uint64_t a9)
{
  int v15;
  void *__p[2];
  char v18;

  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF0A76B8;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = a2;
  *(_DWORD *)(a1 + 100) = a3;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(unsigned char *)(a1 + 232) = 0;
  *(void *)(a1 + 416) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 160) = 0;
  *(void *)(a1 + 400) = 0;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  sub_19E3030A0(a1 + 432);
  *(_DWORD *)(a1 + 504) = a5;
  *(_DWORD *)(a1 + 112) = a6;
  (*(void (**)(uint64_t))(*(void *)a1 + 192))(a1);
  *(unsigned char *)(a1 + 41) = 0;
  *(_DWORD *)(a1 + 408) = a4;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a7 + 68);
  *(void *)(a1 + 528) = a9;
  if (a9)
  {
    nullsub_171("FullLayer constructor");
    a8 = *(unsigned char *)(*(void *)(a1 + 528) + 376);
  }
  *(unsigned char *)(a1 + 40) = a8;
  *(unsigned char *)(a1 + 520) = 0;
  *(_WORD *)(a1 + 116) = *(_WORD *)(a7 + 45);
  v18 = 9;
  strcpy((char *)__p, "FullLayer");
  (*(void (**)(uint64_t, void **, void, float))(*(void *)a1 + 400))(a1, __p, 0, -0.44);
  if (v18 < 0)
  {
    operator delete(__p[0]);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a7 + 16);
    *(void *)(a1 + 424) = 0;
    if (*(unsigned char *)(a1 + 116)) {
      return a1;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a7 + 16);
    *(void *)(a1 + 424) = 0;
    if (*(unsigned char *)(a1 + 116)) {
      return a1;
    }
  }
  v15 = *(_DWORD *)(a7 + 32);
  switch(v15)
  {
    case 2:
      operator new();
    case 1:
      operator new();
    case 0:
      operator new();
  }
  return a1;
}

void sub_19E1F761C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  operator delete(v24);
  sub_19E3030E8(v23);
  v27 = *(void **)(v20 + 384);
  if (v27)
  {
    *(void *)(v20 + 392) = v27;
    operator delete(v27);
    sub_19E14315C((void **)(v20 + 360));
    v28 = *(void **)(v20 + 336);
    if (!v28)
    {
LABEL_5:
      v29 = *(void **)(v20 + 312);
      if (!v29) {
        goto LABEL_6;
      }
      goto LABEL_14;
    }
  }
  else
  {
    sub_19E14315C((void **)(v20 + 360));
    v28 = *(void **)(v20 + 336);
    if (!v28) {
      goto LABEL_5;
    }
  }
  *(void *)(v20 + 344) = v28;
  operator delete(v28);
  v29 = *(void **)(v20 + 312);
  if (!v29)
  {
LABEL_6:
    v30 = *(void **)(v20 + 288);
    if (!v30) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  *(void *)(v20 + 320) = v29;
  operator delete(v29);
  v30 = *(void **)(v20 + 288);
  if (!v30)
  {
LABEL_7:
    v31 = *(void **)(v20 + 264);
    if (!v31) {
      goto LABEL_8;
    }
    goto LABEL_16;
  }
LABEL_15:
  *(void *)(v20 + 296) = v30;
  operator delete(v30);
  v31 = *(void **)(v20 + 264);
  if (!v31)
  {
LABEL_8:
    sub_19E1C6038(v22);
    v32 = *(void **)(v20 + 72);
    if (!v32) {
      goto LABEL_9;
    }
    goto LABEL_17;
  }
LABEL_16:
  *(void *)(v20 + 272) = v31;
  operator delete(v31);
  sub_19E1C6038(v22);
  v32 = *(void **)(v20 + 72);
  if (!v32)
  {
LABEL_9:
    v33 = *v25;
    if (!*v25) {
      goto LABEL_10;
    }
    goto LABEL_18;
  }
LABEL_17:
  *(void *)(v20 + 80) = v32;
  operator delete(v32);
  v33 = *v25;
  if (!*v25)
  {
LABEL_10:
    *(void *)uint64_t v20 = v21;
    v34 = *(void **)(v20 + 8);
    if (!v34) {
      goto LABEL_11;
    }
    goto LABEL_19;
  }
LABEL_18:
  *(void *)(v20 + 56) = v33;
  operator delete(v33);
  *(void *)uint64_t v20 = v21;
  v34 = *(void **)(v20 + 8);
  if (!v34) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_19:
  *(void *)(v20 + 16) = v34;
  operator delete(v34);
  _Unwind_Resume(a1);
}

void sub_19E1F7760()
{
}

uint64_t sub_19E1F7774(uint64_t a1)
{
  return a1 + 264;
}

uint64_t sub_19E1F777C(uint64_t a1)
{
  return a1 + 288;
}

uint64_t sub_19E1F7784(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 376))();
}

uint64_t sub_19E1F77B0(uint64_t a1)
{
  return a1 + 312;
}

uint64_t sub_19E1F77B8()
{
  return 0;
}

unsigned char *sub_19E1F77C0(uint64_t a1, uint64_t a2, int *a3, int a4)
{
  if (!a2) {
LABEL_17:
  }
    sub_19E2F6320(3);
  int v6 = *(_DWORD *)(a2 + 72);
  uint64_t v7 = *(void *)a2;
  v8 = (int *)(*(void *)a2 + v6);
  unint64_t v9 = *(void *)a2 + *(void *)(a2 + 8) - 4;
  if ((unint64_t)v8 > v9)
  {
    int v10 = 0;
    v11 = (int *)(v7 + v6);
    if ((unint64_t)v11 <= v9) {
      goto LABEL_4;
    }
LABEL_7:
    int v12 = 0;
    if (a4 < 1) {
      goto LABEL_12;
    }
    goto LABEL_8;
  }
  int v10 = *v8;
  v6 += 4;
  *(_DWORD *)(a2 + 72) = v6;
  v11 = (int *)(v7 + v6);
  if ((unint64_t)v11 > v9) {
    goto LABEL_7;
  }
LABEL_4:
  int v12 = *v11;
  v6 += 4;
  *(_DWORD *)(a2 + 72) = v6;
  if (a4 < 1) {
    goto LABEL_12;
  }
LABEL_8:
  v13 = (int *)(v7 + v6);
  if ((unint64_t)v13 <= v9)
  {
    int v14 = *v13;
    *(_DWORD *)(a2 + 72) = v6 + 4;
  }
  else
  {
    int v14 = 0;
  }
  *(_DWORD *)(a1 + 408) = v14;
LABEL_12:
  if (*(_DWORD *)(a1 + 100) != v10 || *(_DWORD *)(a1 + 104) != v12) {
    goto LABEL_17;
  }
  v15 = *(unsigned char **)(a1 + 512);
  int v16 = *a3;
  int v17 = *(unsigned __int8 *)(a1 + 117);
  int v18 = sub_19E2F6300();
  int v19 = *(_DWORD *)(a1 + 100);
  int v20 = *(_DWORD *)(a1 + 104);

  return sub_19E1C632C(v15, (uint64_t *)a2, v16, v17, v18, v19, v20);
}

uint64_t sub_19E1F78E8(uint64_t a1, FILE *__stream, int *a3, int a4, unsigned int a5)
{
  if (!__stream) {
    sub_19E2F6320(3);
  }
  int v10 = *(_DWORD *)(a1 + 104);
  sub_19E2F6788(__stream, a3, *(_DWORD *)(a1 + 100));
  sub_19E2F6788(__stream, a3, v10);
  if (a4 >= 1) {
    sub_19E2F6788(__stream, a3, *(_DWORD *)(a1 + 408));
  }
  uint64_t v11 = *(void *)(a1 + 512);
  int v12 = sub_19E2F6300();

  return sub_19E1F3EB8(v11, __stream, a3, 3, v12, a5);
}

void *sub_19E1F79A4(uint64_t a1, void *lpsrc, const void *a3)
{
  if (lpsrc)
  {
    v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3F18, 0);
    if (a3) {
      goto LABEL_3;
    }
  }
  else
  {
    v5 = 0;
    if (a3)
    {
LABEL_3:
      result = __dynamic_cast(a3, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3F18, 0);
      uint64_t v7 = (*(_DWORD *)(a1 + 104) * *(_DWORD *)(a1 + 100));
      if ((int)v7 < 1) {
        return result;
      }
      goto LABEL_7;
    }
  }
  result = 0;
  uint64_t v7 = (*(_DWORD *)(a1 + 104) * *(_DWORD *)(a1 + 100));
  if ((int)v7 < 1) {
    return result;
  }
LABEL_7:
  uint64_t v8 = 0;
  unint64_t v9 = *(void **)(a1 + 512);
  do
  {
    *(unsigned char *)(*v9 + v8) = *(unsigned char *)(result[16] + v8) - *(unsigned char *)(v5[16] + v8);
    ++v8;
  }
  while (v7 != v8);
  return result;
}

void sub_19E1F7AC8(int a1, void *lpsrc, const void *a3)
{
  if (lpsrc) {
    __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3F18, 0);
  }
  if (a3)
  {
    __dynamic_cast(a3, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3F18, 0);
  }
}

void *sub_19E1F7B94(uint64_t a1, void *lpsrc)
{
  if (lpsrc)
  {
    result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3F18, 0);
    uint64_t v4 = (*(_DWORD *)(a1 + 104) * *(_DWORD *)(a1 + 100));
    if ((int)v4 < 1) {
      return result;
    }
  }
  else
  {
    result = 0;
    uint64_t v4 = (*(_DWORD *)(a1 + 104) * *(_DWORD *)(a1 + 100));
    if ((int)v4 < 1) {
      return result;
    }
  }
  uint64_t v5 = 0;
  int v6 = *(void **)(a1 + 512);
  do
  {
    *(unsigned char *)(*v6 + v5) += *(unsigned char *)(result[16] + v5);
    ++v5;
  }
  while (v4 != v5);
  return result;
}

void sub_19E1F7C54(uint64_t a1, void *lpsrc)
{
  if (lpsrc) {
    __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3F30, 0);
  }
  (*(void (**)(void))(**(void **)(a1 + 424) + 64))(*(void *)(a1 + 424));
  sub_19E2F6320(23);
}

uint64_t sub_19E1F7CE4(uint64_t result, float a2, double a3, double a4)
{
  uint64_t v4 = *(unsigned int *)(result + 108);
  if ((int)v4 >= 1)
  {
    uint64_t v5 = 0;
    int v6 = *(void **)(result + 512);
    do
    {
      LOBYTE(a4) = *(unsigned char *)(*v6 + v5);
      *(void *)&a4 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a4)).u64[0];
      float v7 = (float)SLODWORD(a4);
      BOOL v8 = (float)SLODWORD(a4) < (float)-a2;
      *(float *)&a4 = -a2;
      if (v8 || (*(float *)&a4 = a2, v7 > a2)) {
        *(unsigned char *)(*v6 + v5) = (int)*(float *)&a4;
      }
      ++v5;
    }
    while (v4 != v5);
  }
  return result;
}

uint64_t sub_19E1F7D48(uint64_t result, float a2, double a3)
{
  uint64_t v3 = *(unsigned int *)(result + 108);
  if ((int)v3 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void **)(result + 512);
    do
    {
      LOBYTE(a3) = *(unsigned char *)(*v5 + v4);
      *(void *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
      *(float *)&a3 = (float)SLODWORD(a3) * a2;
      *(unsigned char *)(*v5 + v4++) = (int)*(float *)&a3;
    }
    while (v3 != v4);
  }
  return result;
}

uint64_t sub_19E1F7D9C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 424) + 16))();
}

void sub_19E1F7DC4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = **(void **)(a1 + 512);
  int v5 = *(_DWORD *)(a1 + 100);
  int v4 = *(_DWORD *)(a1 + 104);
  float v7 = *(void **)(a2 + 8);
  unint64_t v6 = *(void *)(a2 + 16);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = *(void **)a2;
    uint64_t v10 = (uint64_t)v7 - *(void *)a2;
    unint64_t v11 = (v10 >> 4) + 1;
    if (v11 >> 60) {
      sub_19E13D694();
    }
    uint64_t v12 = v6 - (void)v9;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    BOOL v13 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
    if (!v13) {
      unint64_t v14 = v11;
    }
    if (v14 >> 60) {
      sub_19E13C418();
    }
    uint64_t v15 = 16 * v14;
    int v16 = (char *)operator new(16 * v14);
    int v17 = &v16[16 * (v10 >> 4)];
    int v18 = &v16[v15];
    *(void *)int v17 = v3;
    BOOL v8 = v17 + 16;
    int v19 = &v16[v10];
    *((_DWORD *)v19 + 2) = v5;
    for (*((_DWORD *)v19 + 3) = v4; v7 != v9; *((void *)v17 + 1) = v7[1])
    {
      uint64_t v20 = *(v7 - 2);
      v7 -= 2;
      *((void *)v17 - 2) = v20;
      v17 -= 16;
    }
    *(void *)a2 = v17;
    *(void *)(a2 + 8) = v8;
    *(void *)(a2 + 16) = v18;
    if (v9) {
      operator delete(v9);
    }
  }
  else
  {
    *float v7 = v3;
    BOOL v8 = v7 + 2;
    *((_DWORD *)v7 + 2) = v5;
    *((_DWORD *)v7 + 3) = v4;
  }
  *(void *)(a2 + 8) = v8;
}

uint64_t sub_19E1F7ED4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(v2 - 16);
  *(void *)(a2 + 8) = v2 - 16;
  *(void *)(a1 + 128) = v3;
  uint64_t result = a1 + 128;
  *(void *)(result + 384) = result;
  return result;
}

uint64_t sub_19E1F7EEC(uint64_t result)
{
  *(unsigned char *)(result + 42) = 1;
  return result;
}

uint64_t sub_19E1F7EF8(uint64_t result)
{
  *(unsigned char *)(result + 42) = 0;
  return result;
}

void sub_19E1F7F00(uint64_t a1)
{
  __p = operator new(0x20uLL);
  long long v3 = xmmword_19E351400;
  strcpy((char *)__p, "FullLayer, from allocAll");
  (*(void (**)(uint64_t, void **, void, float))(*(void *)a1 + 400))(a1, &__p, 0, -0.44);
  if (SHIBYTE(v3) < 0) {
    operator delete(__p);
  }
}

void sub_19E1F7FCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E1F7FE8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 56);
  if (v3 == v2)
  {
    uint64_t v2 = *(void *)(a1 + 56);
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      int v5 = *(void **)(v2 + 8 * v4);
      if (v5)
      {
        operator delete[](v5);
        uint64_t v2 = *(void *)(a1 + 48);
        uint64_t v3 = *(void *)(a1 + 56);
      }
      ++v4;
    }
    while (v4 < (v3 - v2) >> 3);
  }
  uint64_t v6 = *(void *)(a1 + 72);
  uint64_t v7 = *(void *)(a1 + 80);
  if (v7 != v6)
  {
    unint64_t v8 = 0;
    do
    {
      unint64_t v9 = *(void **)(v6 + 8 * v8);
      if (v9)
      {
        operator delete[](v9);
        uint64_t v6 = *(void *)(a1 + 72);
        uint64_t v7 = *(void *)(a1 + 80);
      }
      ++v8;
    }
    while (v8 < (v7 - v6) >> 3);
    *(void *)(a1 + 56) = *(void *)(a1 + 48);
    *(void *)(a1 + 80) = v6;
    uint64_t v11 = *(void *)(a1 + 240);
    uint64_t v10 = *(void *)(a1 + 248);
    if (v10 != v11) {
      goto LABEL_13;
    }
LABEL_18:
    uint64_t v11 = v10;
    goto LABEL_19;
  }
  *(void *)(a1 + 56) = v2;
  *(void *)(a1 + 80) = v7;
  uint64_t v11 = *(void *)(a1 + 240);
  uint64_t v10 = *(void *)(a1 + 248);
  if (v10 == v11) {
    goto LABEL_18;
  }
LABEL_13:
  unint64_t v12 = 0;
  do
  {
    BOOL v13 = *(void **)(v11 + 8 * v12);
    if (v13)
    {
      operator delete[](v13);
      uint64_t v11 = *(void *)(a1 + 240);
      uint64_t v10 = *(void *)(a1 + 248);
    }
    ++v12;
  }
  while (v12 < (v10 - v11) >> 3);
LABEL_19:
  *(void *)(a1 + 248) = v11;
  unint64_t v14 = *(void **)(a1 + 224);
  if (v14)
  {
    operator delete(v14);
    *(void *)(a1 + 224) = 0;
  }
  uint64_t v15 = *(void **)(a1 + 216);
  if (v15)
  {
    operator delete(v15);
    *(void *)(a1 + 216) = 0;
  }
  *(void *)(a1 + 272) = *(void *)(a1 + 264);
  *(void *)(a1 + 296) = *(void *)(a1 + 288);
  *(void *)(a1 + 392) = *(void *)(a1 + 384);
  uint64_t v17 = *(void *)(a1 + 360);
  uint64_t v16 = *(void *)(a1 + 368);
  if (v16 != v17)
  {
    uint64_t v18 = *(void *)(a1 + 368);
    do
    {
      uint64_t v20 = *(void **)(v18 - 24);
      v18 -= 24;
      int v19 = v20;
      if (v20)
      {
        *(void *)(v16 - 16) = v19;
        operator delete(v19);
      }
      uint64_t v16 = v18;
    }
    while (v18 != v17);
  }
  *(void *)(a1 + 368) = v17;
  if (!*(unsigned char *)(a1 + 116))
  {
    *(void *)(a1 + 320) = *(void *)(a1 + 312);
    *(void *)(a1 + 344) = *(void *)(a1 + 336);
  }
}

float sub_19E1F8180(uint64_t a1, void *a2, float *a3, int a4)
{
  uint64_t v5 = *(unsigned int *)(a1 + 100);
  if ((int)v5 < 1)
  {
    uint64_t v10 = 0;
  }
  else
  {
    int v6 = 0;
    uint64_t v7 = 0;
    float v8 = 1.1755e-38;
    do
    {
      float v9 = *(float *)(*(void *)(*a2 + 8 * a4) + 4 * v7);
      if (v9 > v8) {
        int v6 = v7;
      }
      float v8 = fmaxf(v9, v8);
      ++v7;
    }
    while (v5 != v7);
    uint64_t v10 = v6;
  }
  float v11 = *(float *)(*(void *)(*(void *)(a1 + 288) + 8 * a4) + 4 * v10);
  if (v11 <= 1.0e-10)
  {
    float result = 99.0;
    *a3 = 99.0;
  }
  else
  {
    float result = -log2f(v11);
    *a3 = result;
  }
  return result;
}

float32_t sub_19E1F8234(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4, _DWORD *a5, float32x4_t a6)
{
  uint64_t v6 = *(void *)(a1 + 288);
  uint64_t v7 = *(unsigned int *)(a1 + 100);
  if ((int)v7 <= 0)
  {
    uint64_t v14 = *a2;
    uint64_t v15 = (float32x4_t **)(*a2 + 8 * a4);
    uint64_t v17 = *a3;
    if (a4 >= (unint64_t)((a3[1] - *a3) >> 3)) {
      return a6.f32[0];
    }
  }
  else
  {
    int v8 = 0;
    uint64_t v9 = 0;
    float v10 = 1.1755e-38;
    do
    {
      float v11 = *(float *)(*(void *)(v6 + 8 * a4) + 4 * v9);
      if (v11 > v10) {
        int v8 = v9;
      }
      float v10 = fmaxf(v11, v10);
      ++v9;
    }
    while (v7 != v9);
    int v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = *a2;
    uint64_t v15 = (float32x4_t **)(*a2 + 8 * a4);
    a6.i32[0] = 0x800000;
    do
    {
      float v16 = (*v15)->f32[v13];
      if (v16 > a6.f32[0]) {
        int v12 = v13;
      }
      a6.f32[0] = fmaxf(v16, a6.f32[0]);
      ++v13;
    }
    while (v7 != v13);
    if (v8 != v12) {
      ++*a5;
    }
    uint64_t v17 = *a3;
    if (a4 >= (unint64_t)((a3[1] - *a3) >> 3)) {
      return a6.f32[0];
    }
  }
  if (a4 < (unint64_t)((a2[1] - v14) >> 3) && a4 < (unint64_t)((*(void *)(a1 + 296) - v6) >> 3))
  {
    uint64_t v18 = *(unsigned int *)(a1 + 100);
    if ((int)v18 >= 1)
    {
      int v19 = *v15;
      uint64_t v20 = *(float32x4_t **)(v6 + 8 * a4);
      uint64_t v21 = *(float32x4_t **)(v17 + 8 * a4);
      if (v18 >= 8)
      {
        uint64_t v22 = 0;
        if ((unint64_t)((char *)v21 - (char *)v19) >= 0x20
          && (unint64_t)((char *)v21 - (char *)v20) >= 0x20)
        {
          uint64_t v22 = v18 & 0x7FFFFFF8;
          uint64_t v23 = v19 + 1;
          v24 = v20 + 1;
          v25 = v21 + 1;
          uint64_t v26 = v18 & 0xFFFFFFF8;
          do
          {
            a6 = vsubq_f32(v23[-1], v24[-1]);
            float32x4_t v27 = vsubq_f32(*v23, *v24);
            v25[-1] = a6;
            float32x4_t *v25 = v27;
            v23 += 2;
            v24 += 2;
            v25 += 2;
            v26 -= 8;
          }
          while (v26);
          if (v22 == v18) {
            return a6.f32[0];
          }
        }
      }
      else
      {
        uint64_t v22 = 0;
      }
      v28 = &v21->i32[v22];
      v29 = &v20->f32[v22];
      v30 = &v19->f32[v22];
      uint64_t v31 = v18 - v22;
      do
      {
        float v32 = *v30++;
        float v33 = v32;
        float v34 = *v29++;
        a6.f32[0] = v33 - v34;
        *v28++ = a6.i32[0];
        --v31;
      }
      while (v31);
    }
  }
  return a6.f32[0];
}

void sub_19E1F83CC(uint64_t a1, uint64_t *a2, void *a3, int a4)
{
  if (((**(uint64_t (***)(uint64_t))a1)(a1) & 1) == 0)
  {
    uint64_t v9 = 8 * a4;
    sub_19E1D0E88((void **)(a1 + 416), (float32x4_t **)(*(void *)(a1 + 384) + v9), (const void **)(*a2 + v9), *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 408), v8);
    sub_19E1F4438((float **)(*(void *)(a1 + 312) + v9), (void *)(a1 + 416), *(void **)(a1 + 512), *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), 0.0);
    uint64_t v10 = *(unsigned int *)(a1 + 104);
    if ((int)v10 >= 1)
    {
      float v11 = *(int **)(*(void *)(a1 + 312) + 8 * a4);
      do
      {
        int v12 = -1035468800;
        if (*(float *)v11 < -50.0 || (int v12 = 1112014848, *(float *)v11 > 50.0)) {
          int *v11 = v12;
        }
        ++v11;
        --v10;
      }
      while (v10);
    }
  }
  if (a3[1] == *a3 || *(int *)(a1 + 112) < 1 || !(**(unsigned int (***)(uint64_t))a1)(a1))
  {
    uint64_t v20 = *(void *)(a1 + 264) + 8 * a4;
    uint64_t v21 = a1 + 416;
    int v22 = *(_DWORD *)(a1 + 104);
    size_t v23 = *(int *)(a1 + 100);
    uint64_t v24 = *(void *)(a1 + 136);
    global_queue = dispatch_get_global_queue(0, 0);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = sub_19E1C7E74;
    block[3] = &unk_1E599D040;
    int v41 = v22;
    block[4] = v24;
    block[5] = v21;
    block[6] = v20;
    dispatch_apply(v23, global_queue, block);
    return;
  }
  uint64_t v13 = *a2;
  uint64_t v14 = *(void *)(a1 + 360) + 24 * a4;
  float v16 = *(unsigned char **)v14;
  uint64_t v15 = *(unsigned char **)(v14 + 8);
  size_t v17 = v15 - v16;
  if (v15 == v16)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *(unsigned int *)(a1 + 100);
    if ((int)v19 < 1) {
      goto LABEL_26;
    }
    goto LABEL_19;
  }
  if ((v17 & 0x8000000000000000) != 0) {
    sub_19E13D694();
  }
  uint64_t v18 = operator new(v15 - v16);
  memcpy(v18, v16, v17);
  uint64_t v19 = *(unsigned int *)(a1 + 100);
  if ((int)v19 >= 1)
  {
LABEL_19:
    uint64_t v26 = 0;
    uint64_t v27 = *(void *)(v13 + 8 * a4);
    uint64_t v28 = *(void *)(*(void *)(a1 + 168) + 8 * *(int *)(a1 + 160));
    if (v19 < 8) {
      goto LABEL_24;
    }
    if ((unint64_t)(v28 - v27) < 0x20) {
      goto LABEL_24;
    }
    uint64_t v26 = v19 & 0x7FFFFFF8;
    v29 = (long long *)(v27 + 16);
    v30 = (_OWORD *)(v28 + 16);
    uint64_t v31 = v19 & 0xFFFFFFF8;
    do
    {
      long long v32 = *v29;
      *(v30 - 1) = *(v29 - 1);
      _OWORD *v30 = v32;
      v29 += 2;
      v30 += 2;
      v31 -= 8;
    }
    while (v31);
    if (v26 != v19)
    {
LABEL_24:
      uint64_t v33 = v19 - v26;
      uint64_t v34 = 4 * v26;
      v35 = (_DWORD *)(v28 + 4 * v26);
      v36 = (int *)(v27 + v34);
      do
      {
        int v37 = *v36++;
        *v35++ = v37;
        --v33;
      }
      while (v33);
    }
  }
LABEL_26:
  if (*(int *)(a1 + 156) < 1)
  {
    ++*(_DWORD *)(a1 + 160);
    if (!v18) {
      return;
    }
  }
  else
  {
    uint64_t v38 = 0;
    uint64_t v39 = *(void *)(a1 + 192);
    do
    {
      *(_DWORD *)(*(void *)(v39 + 24 * *(int *)(a1 + 160)) + 4 * v38) = *((_DWORD *)v18 + v38);
      ++v38;
    }
    while (v38 < *(int *)(a1 + 156));
    ++*(_DWORD *)(a1 + 160);
  }

  operator delete(v18);
}

void sub_19E1F8710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E1F872C(uint64_t a1, int a2)
{
  if (!*(unsigned char *)(a1 + 116))
  {
    if (!*(_DWORD *)(a1 + 112))
    {
      bzero(*(void **)(a1 + 136), 4 * *(int *)(a1 + 108));
      uint64_t v4 = *(void *)(a1 + 264);
      if (*(void *)(a1 + 272) == v4) {
        goto LABEL_7;
      }
      goto LABEL_5;
    }
    *(_DWORD *)(a1 + 160) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 264);
  if (*(void *)(a1 + 272) == v4) {
    goto LABEL_7;
  }
LABEL_5:
  unint64_t v5 = 0;
  do
  {
    bzero(*(void **)(v4 + 8 * v5++), 4 * *(int *)(a1 + 104));
    uint64_t v4 = *(void *)(a1 + 264);
  }
  while (v5 < (*(void *)(a1 + 272) - v4) >> 3);
LABEL_7:
  uint64_t v6 = *(void *)(a1 + 288);
  if (*(void *)(a1 + 296) != v6)
  {
    unint64_t v7 = 0;
    do
    {
      bzero(*(void **)(v6 + 8 * v7++), 4 * *(int *)(a1 + 100));
      uint64_t v6 = *(void *)(a1 + 288);
    }
    while (v7 < (*(void *)(a1 + 296) - v6) >> 3);
  }
  if (a2 >= 1 && !*(unsigned char *)(a1 + 116))
  {
    uint64_t v8 = 0;
    uint64_t v9 = 8 * a2 - 8;
LABEL_14:
    bzero(*(void **)(*(void *)(a1 + 312) + v8), 4 * *(int *)(a1 + 104));
    bzero(*(void **)(*(void *)(a1 + 336) + v8), 4 * *(int *)(a1 + 100));
    while (v9 != v8)
    {
      v8 += 8;
      if (!*(unsigned char *)(a1 + 116)) {
        goto LABEL_14;
      }
    }
  }
}

uint64_t sub_19E1F8854(uint64_t a1)
{
  return *(unsigned int *)(a1 + 104);
}

uint64_t sub_19E1F885C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 100);
}

void sub_19E1F8868(uint64_t a1)
{
  if (*(int *)(a1 + 112) >= 1) {
    sub_19E2F6320(33);
  }
  sub_19E2F6320(23);
}

void sub_19E1F8890(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  if (*(int *)(a1 + 112) < 1)
  {
    bzero(*(void **)(a1 + 136), 4 * *(int *)(a1 + 108));
    BOOL v10 = __OFSUB__(a5, 1);
    int v9 = a5 - 1;
    if (v9 < 0 != v10) {
      return;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 160) = 0;
    int v9 = a5 - 1;
    if (a5 < 1) {
      return;
    }
  }
  unsigned int v11 = 0;
  do
  {
    if (*(unsigned char *)(a1 + 520)) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = v9;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 248))(a1, a4, a3, v12, 0xFFFFFFFFLL, 0xFFFFFFFFLL);
    --v9;
    ++v11;
  }
  while (v9 != -1);
}

void sub_19E1F8958(uint64_t a1, void *a2, void *a3, int a4, uint64_t a5)
{
  unint64_t v7 = a3;
  if (a3[1] == *a3 || *(int *)(a1 + 112) < 1)
  {
    uint64_t v9 = 0;
    if (!a5) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v9 = (**(uint64_t (***)(uint64_t))a1)(a1);
    if (!a5) {
      goto LABEL_7;
    }
  }
  if (*(unsigned char *)(a1 + 520)) {
    sub_19E2F6320(34);
  }
LABEL_7:
  uint64_t v10 = a4 & 0xFFFFFF;
  unsigned int v11 = a5 != 0;
  if (v10 > v11)
  {
    while (1)
    {
      int v12 = *(unsigned char *)(a1 + 520) ? v10 + ~v11 : v11;
      uint64_t v13 = v12;
      int v14 = *(unsigned char *)(a1 + 42) ? 1 : v12;
      uint64_t v15 = ((*(unsigned char *)(a1 + 42) != 0) & v9) != 0 ? 1 : v12;
      uint64_t v16 = *(void *)(a1 + 264);
      if (v9) {
        break;
      }
      memmove(*(void **)(v16 + 8 * v15), *(const void **)(*a2 + 8 * v15), 4 * *(int *)(a1 + 96));
      int v17 = *(unsigned __int8 *)(a1 + 40);
      if (*(unsigned char *)(a1 + 40)) {
        goto LABEL_23;
      }
LABEL_24:
      if (v9)
      {
        uint64_t v36 = v13;
        uint64_t v18 = *(void *)(a1 + 360);
        uint64_t v19 = (void *)(v18 + 24 * v13);
        uint64_t v20 = (_DWORD *)*v19;
        *(_DWORD *)*uint64_t v19 = **(_DWORD **)(*v7 + 24 * v13);
        if (v17) {
          v20[1] = *(_DWORD *)(a1 + 104) - 1;
        }
        uint64_t v21 = *(void *)(a1 + 384);
        uint64_t v38 = 0;
        uint64_t v39 = 0;
        int v37 = 0;
        int v22 = (_DWORD *)*v19;
        uint64_t v23 = *(void *)(v18 + 24 * (int)v36 + 8);
        int64_t v24 = v23 - *v19;
        if (v23 != *v19)
        {
          if (v24 < 0) {
            sub_19E13D694();
          }
          uint64_t v25 = v9;
          uint64_t v26 = v10;
          uint64_t v27 = v7;
          int v37 = (int *)operator new(v23 - *v19);
          uint64_t v38 = v37;
          uint64_t v28 = &v37[v24 >> 2];
          uint64_t v39 = v28;
          memcpy(v37, v22, v24);
          uint64_t v38 = v28;
          unint64_t v7 = v27;
          uint64_t v10 = v26;
          uint64_t v9 = v25;
        }
        sub_19E1F5C80((float **)(v21 + 8 * v14), &v37, *(uint64_t **)(a1 + 512), *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104));
        uint64_t v29 = v14;
        uint64_t v13 = v36;
        if (v37)
        {
          uint64_t v38 = v37;
          operator delete(v37);
        }
      }
      else
      {
        uint64_t v29 = v14;
        sub_19E1F4438((float **)(*(void *)(a1 + 384) + 8 * v14), (void *)(*(void *)(a1 + 264) + 8 * v15), *(void **)(a1 + 512), *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), 0.0);
      }
      v30 = (const float **)(*(void *)(a1 + 384) + 8 * v29);
      int v31 = *(_DWORD *)(a1 + 100);
      if (v31 >= 1)
      {
        long long v32 = (float *)*v30;
        uint64_t v33 = *(unsigned int *)(a1 + 100);
        do
        {
          int v34 = -1035468800;
          if (*v32 < -50.0 || (int v34 = 1112014848, *v32 > 50.0)) {
            *(_DWORD *)long long v32 = v34;
          }
          ++v32;
          --v33;
        }
        while (v33);
      }
      sub_19E1C7520((float **)(*(void *)(a1 + 288) + 8 * v13), v30, v31, *(_DWORD *)(a1 + 408));
      if (++v11 == v10) {
        return;
      }
    }
    bzero(*(void **)(v16 + 8 * v15), 4 * *(int *)(a1 + 104));
    *(_DWORD *)(*(void *)(*(void *)(a1 + 264) + 8 * v15) + 4 * **(int **)(*v7 + 24 * (int)v13)) = 1065353216;
    int v17 = *(unsigned __int8 *)(a1 + 40);
    if (!*(unsigned char *)(a1 + 40)) {
      goto LABEL_24;
    }
LABEL_23:
    *(_DWORD *)(*(void *)(*(void *)(a1 + 264) + 8 * v15) + 4 * *(int *)(a1 + 104) - 4) = 1065353216;
    goto LABEL_24;
  }
}

void sub_19E1F8C60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E1F8C80(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  a1[520] = 1;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9457D08, memory_order_acquire) & 1) == 0)
  {
    uint64_t v13 = a6;
    uint64_t v12 = a5;
    unsigned int v11 = a4;
    uint64_t v9 = a2;
    uint64_t v10 = a3;
    int v8 = __cxa_guard_acquire(&qword_1E9457D08);
    a2 = v9;
    a3 = v10;
    a4 = v11;
    a5 = v12;
    a6 = v13;
    if (v8)
    {
      qword_1E94584F8 = 0;
      unk_1E9458500 = 0;
      qword_1E9458508 = 0;
      __cxa_atexit((void (*)(void *))sub_19E142EEC, &qword_1E94584F8, &dword_19E138000);
      __cxa_guard_release(&qword_1E9457D08);
      a2 = v9;
      a3 = v10;
      a4 = v11;
      a5 = v12;
      a6 = v13;
    }
  }
  uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 304))(a1, a2, a3, a4, a5, a6, &qword_1E94584F8);
  a1[520] = 0;
  return result;
}

uint64_t sub_19E1F8D78(unsigned char *a1)
{
  a1[520] = 1;
  uint64_t result = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 296))(a1);
  a1[520] = 0;
  return result;
}

char *sub_19E1F8DD0(uint64_t a1, void *lpsrc)
{
  if (*(_DWORD *)(a1 + 504) != 1) {
    sub_19E2F6320(1);
  }
  uint64_t result = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3F18, 0);
  if (!result) {
    __cxa_bad_cast();
  }
  *(void *)(a1 + 512) = result + 128;
  return result;
}

void sub_19E1F8E5C(uint64_t a1, void *lpsrc)
{
  if (!*(_DWORD *)(a1 + 504))
  {
    if (!__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3F18, 0))__cxa_bad_cast(); {
    sub_19E303188(a1 + 432);
    }
    if (!*(_DWORD *)(a1 + 112)) {
      sub_19E2F6320(23);
    }
    sub_19E2F6320(33);
  }
  sub_19E2F6320(1);
}

_DWORD *sub_19E1F8EF0(_DWORD *result)
{
  if (!result[30]) {
    return (_DWORD *)(*(uint64_t (**)(void))(*(void *)result + 392))();
  }
  return result;
}

float sub_19E1F8F28(uint64_t a1, uint64_t *a2, int a3)
{
  if (a3 < 1) {
    return 0.0;
  }
  uint64_t v3 = *(unsigned int *)(a1 + 100);
  uint64_t v4 = *(float ***)(a1 + 288);
  uint64_t v5 = a3;
  if ((int)v3 <= 0)
  {
    float v8 = 0.0;
    do
    {
      while (1)
      {
        float v14 = **v4;
        if (v14 <= 1.0e-10) {
          break;
        }
        float v8 = v8 - log2f(v14);
        ++v4;
        if (!--v5) {
          return v8;
        }
      }
      float v8 = v8 + 99.0;
      ++v4;
      --v5;
    }
    while (v5);
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a2;
    float v8 = 0.0;
    do
    {
      while (1)
      {
        int v9 = 0;
        uint64_t v10 = 0;
        float v11 = 1.1755e-38;
        do
        {
          float v12 = *(float *)(*(void *)(v7 + 8 * v6) + 4 * v10);
          if (v12 > v11) {
            int v9 = v10;
          }
          float v11 = fmaxf(v12, v11);
          ++v10;
        }
        while (v3 != v10);
        float v13 = v4[v6][v9];
        if (v13 <= 1.0e-10) {
          break;
        }
        float v8 = v8 - log2f(v13);
        if (++v6 == v5) {
          return v8;
        }
      }
      float v8 = v8 + 99.0;
      ++v6;
    }
    while (v6 != v5);
  }
  return v8;
}

void sub_19E1F906C(void *a1)
{
  v1 = sub_19E1FA2C4(a1);

  operator delete(v1);
}

uint64_t sub_19E1F9094(uint64_t a1)
{
  return a1 + 336;
}

float sub_19E1F909C(uint64_t a1, int a2, int a3)
{
  return *(float *)(*(void *)(*(void *)(a1 + 288) + 8 * a2) + 4 * a3);
}

uint64_t sub_19E1F90AC(uint64_t result, uint64_t *a2, uint64_t *a3, int a4, int *a5)
{
  uint64_t v5 = (a4 - 1);
  if (a4 >= 1)
  {
    unint64_t v6 = *(unsigned int *)(result + 100);
    if ((int)v6 >= 1)
    {
      uint64_t v7 = *(void *)(result + 288);
      uint64_t v8 = *a2;
      uint64_t v9 = *a3;
      int v10 = *a5;
      do
      {
        if ((int)v6 >= 1)
        {
          int v12 = 0;
          uint64_t v13 = 0;
          float v14 = 1.1755e-38;
          do
          {
            float v15 = *(float *)(*(void *)(v7 + 8 * v5) + 4 * v13);
            if (v15 > v14) {
              int v12 = v13;
            }
            float v14 = fmaxf(v15, v14);
            ++v13;
          }
          while (v6 != v13);
          int v16 = 0;
          uint64_t v17 = 0;
          float v18 = 1.1755e-38;
          do
          {
            float v19 = *(float *)(*(void *)(v8 + 8 * v5) + 4 * v17);
            if (v19 > v18) {
              int v16 = v17;
            }
            float v18 = fmaxf(v19, v18);
            ++v17;
          }
          while (v6 != v17);
          if (v12 == v16)
          {
            unint64_t v6 = v6;
          }
          else
          {
            *a5 = ++v10;
            unint64_t v6 = *(unsigned int *)(result + 100);
            if ((int)v6 < 1) {
              continue;
            }
          }
          uint64_t v20 = *(float32x4_t **)(v8 + 8 * v5);
          uint64_t v21 = *(float32x4_t **)(v7 + 8 * v5);
          int v22 = *(float32x4_t **)(v9 + 8 * v5);
          if (v6 >= 8)
          {
            unint64_t v23 = 0;
            if ((unint64_t)((char *)v22 - (char *)v20) >= 0x20
              && (unint64_t)((char *)v22 - (char *)v21) >= 0x20)
            {
              unint64_t v23 = v6 & 0x7FFFFFF8;
              int64_t v24 = v20 + 1;
              uint64_t v25 = v21 + 1;
              uint64_t v26 = v22 + 1;
              uint64_t v27 = v6 & 0xFFFFFFF8;
              do
              {
                float32x4_t v28 = vsubq_f32(*v24, *v25);
                v26[-1] = vsubq_f32(v24[-1], v25[-1]);
                *uint64_t v26 = v28;
                v24 += 2;
                v25 += 2;
                v26 += 2;
                v27 -= 8;
              }
              while (v27);
              if (v23 == v6) {
                continue;
              }
            }
          }
          else
          {
            unint64_t v23 = 0;
          }
          uint64_t v29 = &v22->f32[v23];
          v30 = &v21->f32[v23];
          int v31 = &v20->f32[v23];
          unint64_t v32 = v6 - v23;
          do
          {
            float v33 = *v31++;
            float v34 = v33;
            float v35 = *v30++;
            *v29++ = v34 - v35;
            --v32;
          }
          while (v32);
        }
      }
      while (v5-- > 0);
    }
  }
  return result;
}

void sub_19E1F922C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 528);
  if (v2)
  {
    int v3 = *(unsigned __int8 *)(v2 + 376);
    if (*(unsigned char *)(a1 + 40)) {
      goto LABEL_3;
    }
  }
  else
  {
    int v3 = 0;
    if (*(unsigned char *)(a1 + 40))
    {
LABEL_3:
      int v4 = *(_DWORD *)(a1 + 96) + (v3 ^ 1);
      int v5 = *(_DWORD *)(a1 + 100) * v4;
      *(_DWORD *)(a1 + 104) = v4;
      *(_DWORD *)(a1 + 108) = v5;
      if (*(_DWORD *)(a1 + 504)) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  int v7 = *(_DWORD *)(a1 + 96);
  int v8 = *(_DWORD *)(a1 + 100) * v7;
  *(_DWORD *)(a1 + 104) = v7;
  *(_DWORD *)(a1 + 108) = v8;
  if (*(_DWORD *)(a1 + 504))
  {
LABEL_4:
    if (*(unsigned char *)(a1 + 116)) {
      goto LABEL_5;
    }
LABEL_15:
    operator new[]();
  }
LABEL_9:
  if (!*(unsigned char *)(a1 + 117))
  {
    if (!v2 || *(_DWORD *)(v2 + 40) != 1) {
      operator new[]();
    }
    *(void *)(a1 + 128) = *(void *)(v2 + 112);
  }
  *(void *)(a1 + 512) = a1 + 128;
  if (!*(unsigned char *)(a1 + 116)) {
    goto LABEL_15;
  }
LABEL_5:
  if (*(int *)(a1 + 112) < 1) {
    unsigned __int8 v6 = 0;
  }
  else {
    unsigned __int8 v6 = (**(uint64_t (***)(uint64_t))a1)(a1);
  }
  if (*(unsigned char *)(a1 + 42)) {
    int v9 = 2;
  }
  else {
    int v9 = dword_1E9457D98;
  }
  int v32 = v9;
  if (((*(unsigned char *)(a1 + 42) != 0) & v6) != 0) {
    int v10 = 2;
  }
  else {
    int v10 = dword_1E9457D98;
  }
  unint64_t v11 = v10;
  uint64_t v12 = *(void *)(a1 + 264);
  unint64_t v13 = (*(void *)(a1 + 272) - v12) >> 3;
  if (v11 <= v13)
  {
    if (v11 < v13) {
      *(void *)(a1 + 272) = v12 + 8 * v11;
    }
  }
  else
  {
    sub_19E1599BC((void **)(a1 + 264), v11 - v13);
  }
  uint64_t v14 = *(void *)(a1 + 384);
  unint64_t v15 = (*(void *)(a1 + 392) - v14) >> 3;
  if (v32 <= v15)
  {
    if (v32 < v15) {
      *(void *)(a1 + 392) = v14 + 8 * v32;
    }
  }
  else
  {
    sub_19E1599BC((void **)(a1 + 384), v32 - v15);
  }
  int v16 = dword_1E9457D98;
  uint64_t v17 = *(void *)(a1 + 288);
  unint64_t v18 = (*(void *)(a1 + 296) - v17) >> 3;
  if (dword_1E9457D98 <= v18)
  {
    if (dword_1E9457D98 < v18) {
      *(void *)(a1 + 296) = v17 + 8 * dword_1E9457D98;
    }
  }
  else
  {
    sub_19E1599BC((void **)(a1 + 288), dword_1E9457D98 - v18);
    int v16 = dword_1E9457D98;
  }
  if (!*(unsigned char *)(a1 + 116))
  {
    unint64_t v19 = v16;
    uint64_t v20 = *(void *)(a1 + 312);
    unint64_t v21 = (*(void *)(a1 + 320) - v20) >> 3;
    if (v16 <= v21)
    {
      if (v16 < v21) {
        *(void *)(a1 + 320) = v20 + 8 * v16;
      }
    }
    else
    {
      sub_19E1599BC((void **)(a1 + 312), v16 - v21);
      int v16 = dword_1E9457D98;
      unint64_t v19 = dword_1E9457D98;
    }
    uint64_t v22 = *(void *)(a1 + 336);
    unint64_t v23 = (*(void *)(a1 + 344) - v22) >> 3;
    if (v19 <= v23)
    {
      if (v19 < v23) {
        *(void *)(a1 + 344) = v22 + 8 * v19;
      }
    }
    else
    {
      sub_19E1599BC((void **)(a1 + 336), v19 - v23);
      int v16 = dword_1E9457D98;
    }
  }
  unint64_t v24 = v16;
  uint64_t v26 = *(void *)(a1 + 360);
  uint64_t v25 = *(void *)(a1 + 368);
  unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((v25 - v26) >> 3);
  if (v24 <= v27)
  {
    if (v24 < v27)
    {
      uint64_t v28 = v26 + 24 * (int)v24;
      if (v25 != v28)
      {
        uint64_t v29 = *(void *)(a1 + 368);
        do
        {
          int v31 = *(void **)(v29 - 24);
          v29 -= 24;
          v30 = v31;
          if (v31)
          {
            *(void *)(v25 - 16) = v30;
            operator delete(v30);
          }
          uint64_t v25 = v29;
        }
        while (v29 != v28);
      }
      *(void *)(a1 + 368) = v28;
    }
  }
  else
  {
    sub_19E232360(a1 + 360, v24 - v27);
  }
  if ((int)v11 >= 1) {
    operator new[]();
  }
  if (v32 >= 1) {
    operator new[]();
  }
  if (dword_1E9457D98 >= 1)
  {
    if (!*(unsigned char *)(a1 + 116)) {
      operator new[]();
    }
    operator new[]();
  }
}

void sub_19E1FA2B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_19E1C6038((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E1FA2C4(void *a1)
{
  *a1 = &unk_1EF0A76B8;
  sub_19E1F7FE8((uint64_t)a1);
  uint64_t v2 = a1[53];
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 80))(v2);
    a1[53] = 0;
  }
  sub_19E3030E8((uint64_t)(a1 + 54));
  int v3 = (void *)a1[48];
  if (v3)
  {
    a1[49] = v3;
    operator delete(v3);
  }
  uint64_t v4 = a1[45];
  if (v4)
  {
    uint64_t v5 = a1[46];
    unsigned __int8 v6 = (void *)a1[45];
    if (v5 != v4)
    {
      uint64_t v7 = a1[46];
      do
      {
        int v9 = *(void **)(v7 - 24);
        v7 -= 24;
        int v8 = v9;
        if (v9)
        {
          *(void *)(v5 - 16) = v8;
          operator delete(v8);
        }
        uint64_t v5 = v7;
      }
      while (v7 != v4);
      unsigned __int8 v6 = (void *)a1[45];
    }
    a1[46] = v4;
    operator delete(v6);
  }
  int v10 = (void *)a1[42];
  if (v10)
  {
    a1[43] = v10;
    operator delete(v10);
  }
  unint64_t v11 = (void *)a1[39];
  if (v11)
  {
    a1[40] = v11;
    operator delete(v11);
  }
  uint64_t v12 = (void *)a1[36];
  if (v12)
  {
    a1[37] = v12;
    operator delete(v12);
  }
  unint64_t v13 = (void *)a1[33];
  if (v13)
  {
    a1[34] = v13;
    operator delete(v13);
  }
  sub_19E1C6038(a1 + 18);
  uint64_t v14 = (void *)a1[9];
  if (v14)
  {
    a1[10] = v14;
    operator delete(v14);
  }
  unint64_t v15 = (void *)a1[6];
  if (v15)
  {
    a1[7] = v15;
    operator delete(v15);
  }
  *a1 = &unk_1EF0A50F8;
  int v16 = (void *)a1[1];
  if (v16)
  {
    a1[2] = v16;
    operator delete(v16);
  }
  return a1;
}

uint64_t sub_19E1FA438(uint64_t a1, int a2, int a3, int a4, int a5, char a6, char a7, char a8, uint64_t a9)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF0A52A8;
  *(_DWORD *)(a1 + 44) = a2;
  *(_DWORD *)(a1 + 48) = a3;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  sub_19E3030A0(a1 + 296);
  *(_DWORD *)(a1 + 368) = a5;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 376) = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 192))(a1);
  *(unsigned char *)(a1 + 232) = 0;
  *(unsigned char *)(a1 + 41) = 0;
  *(_DWORD *)(a1 + 208) = a4;
  *(void *)(a1 + 240) = a9;
  *(unsigned char *)(a1 + 40) = a8;
  *(unsigned char *)(a1 + 60) = a6;
  *(unsigned char *)(a1 + 61) = a7;
  __p = operator new(0x20uLL);
  long long v17 = xmmword_19E351410;
  strcpy((char *)__p, "RecurrentLayer from Constructor");
  (*(void (**)(uint64_t, void **, void, float))(*(void *)a1 + 392))(a1, &__p, 0, -0.44);
  if (SHIBYTE(v17) < 0) {
    operator delete(__p);
  }
  return a1;
}

void sub_19E1FA5EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_19E3030E8(v17);
  uint64_t v20 = (void *)v15[34];
  if (v20)
  {
    v15[35] = v20;
    operator delete(v20);
    unint64_t v21 = *v18;
    if (!*v18)
    {
LABEL_5:
      uint64_t v22 = (void *)v15[23];
      if (!v22) {
        goto LABEL_6;
      }
      goto LABEL_14;
    }
  }
  else
  {
    unint64_t v21 = *v18;
    if (!*v18) {
      goto LABEL_5;
    }
  }
  v15[32] = v21;
  operator delete(v21);
  uint64_t v22 = (void *)v15[23];
  if (!v22)
  {
LABEL_6:
    unint64_t v23 = (void *)v15[20];
    if (!v23) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  v15[24] = v22;
  operator delete(v22);
  unint64_t v23 = (void *)v15[20];
  if (!v23)
  {
LABEL_7:
    unint64_t v24 = (void *)v15[17];
    if (!v24) {
      goto LABEL_8;
    }
    goto LABEL_16;
  }
LABEL_15:
  v15[21] = v23;
  operator delete(v23);
  unint64_t v24 = (void *)v15[17];
  if (!v24)
  {
LABEL_8:
    uint64_t v25 = (void *)v15[14];
    if (!v25) {
      goto LABEL_9;
    }
    goto LABEL_17;
  }
LABEL_16:
  v15[18] = v24;
  operator delete(v24);
  uint64_t v25 = (void *)v15[14];
  if (!v25)
  {
LABEL_9:
    uint64_t v26 = (void *)v15[11];
    if (!v26) {
      goto LABEL_10;
    }
    goto LABEL_18;
  }
LABEL_17:
  v15[15] = v25;
  operator delete(v25);
  uint64_t v26 = (void *)v15[11];
  if (!v26)
  {
LABEL_10:
    void *v15 = v16;
    unint64_t v27 = (void *)v15[1];
    if (!v27) {
      goto LABEL_11;
    }
    goto LABEL_19;
  }
LABEL_18:
  v15[12] = v26;
  operator delete(v26);
  void *v15 = v16;
  unint64_t v27 = (void *)v15[1];
  if (!v27) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_19:
  v15[2] = v27;
  operator delete(v27);
  _Unwind_Resume(a1);
}

void sub_19E1FA6EC()
{
}

uint64_t sub_19E1FA700(uint64_t a1)
{
  return a1 + 88;
}

uint64_t sub_19E1FA708(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_19E1FA710(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 376))();
}

uint64_t sub_19E1FA73C(uint64_t a1)
{
  return a1 + 136;
}

uint64_t sub_19E1FA744()
{
  return 0;
}

unsigned char *sub_19E1FA74C(uint64_t a1, uint64_t a2, int *a3, int a4)
{
  if (!a2) {
LABEL_17:
  }
    sub_19E2F6320(3);
  int v6 = *(_DWORD *)(a2 + 72);
  uint64_t v7 = *(void *)a2;
  int v8 = (int *)(*(void *)a2 + v6);
  unint64_t v9 = *(void *)a2 + *(void *)(a2 + 8) - 4;
  if ((unint64_t)v8 > v9)
  {
    int v10 = 0;
    unint64_t v11 = (int *)(v7 + v6);
    if ((unint64_t)v11 <= v9) {
      goto LABEL_4;
    }
LABEL_7:
    int v12 = 0;
    if (a4 < 1) {
      goto LABEL_12;
    }
    goto LABEL_8;
  }
  int v10 = *v8;
  v6 += 4;
  *(_DWORD *)(a2 + 72) = v6;
  unint64_t v11 = (int *)(v7 + v6);
  if ((unint64_t)v11 > v9) {
    goto LABEL_7;
  }
LABEL_4:
  int v12 = *v11;
  v6 += 4;
  *(_DWORD *)(a2 + 72) = v6;
  if (a4 < 1) {
    goto LABEL_12;
  }
LABEL_8:
  unint64_t v13 = (int *)(v7 + v6);
  if ((unint64_t)v13 <= v9)
  {
    int v14 = *v13;
    *(_DWORD *)(a2 + 72) = v6 + 4;
  }
  else
  {
    int v14 = 0;
  }
  *(_DWORD *)(a1 + 208) = v14;
LABEL_12:
  if (*(_DWORD *)(a1 + 48) != v10 || *(_DWORD *)(a1 + 52) != v12) {
    goto LABEL_17;
  }
  unint64_t v15 = *(unsigned char **)(a1 + 376);
  int v16 = *a3;
  int v17 = *(unsigned __int8 *)(a1 + 61);
  int v18 = sub_19E2F6300();
  int v19 = *(_DWORD *)(a1 + 48);
  int v20 = *(_DWORD *)(a1 + 52);

  return sub_19E1C632C(v15, (uint64_t *)a2, v16, v17, v18, v19, v20);
}

uint64_t sub_19E1FA874(uint64_t a1, FILE *__stream, int *a3, int a4, unsigned int a5)
{
  if (!__stream) {
    sub_19E2F6320(3);
  }
  int v10 = *(_DWORD *)(a1 + 52);
  sub_19E2F6788(__stream, a3, *(_DWORD *)(a1 + 48));
  sub_19E2F6788(__stream, a3, v10);
  if (a4 >= 1) {
    sub_19E2F6788(__stream, a3, *(_DWORD *)(a1 + 208));
  }
  uint64_t v11 = *(void *)(a1 + 376);
  int v12 = sub_19E2F6300();

  return sub_19E1F3EB8(v11, __stream, a3, 3, v12, a5);
}

void *sub_19E1FA930(uint64_t a1, void *lpsrc, const void *a3)
{
  if (lpsrc)
  {
    uint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3C58, 0);
    if (a3) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v5 = 0;
    if (a3)
    {
LABEL_3:
      uint64_t result = __dynamic_cast(a3, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3C58, 0);
      uint64_t v7 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 48));
      if ((int)v7 < 1) {
        return result;
      }
      goto LABEL_7;
    }
  }
  uint64_t result = 0;
  uint64_t v7 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 48));
  if ((int)v7 < 1) {
    return result;
  }
LABEL_7:
  uint64_t v8 = 0;
  unint64_t v9 = *(void **)(a1 + 376);
  do
  {
    *(unsigned char *)(*v9 + v8) = *(unsigned char *)(result[8] + v8) - *(unsigned char *)(v5[8] + v8);
    ++v8;
  }
  while (v7 != v8);
  return result;
}

void sub_19E1FAA54(int a1, void *lpsrc, const void *a3)
{
  if (lpsrc) {
    __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3C58, 0);
  }
  if (a3)
  {
    __dynamic_cast(a3, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3C58, 0);
  }
}

void *sub_19E1FAB20(uint64_t a1, void *lpsrc)
{
  if (lpsrc)
  {
    uint64_t result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3C58, 0);
    uint64_t v4 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 48));
    if ((int)v4 < 1) {
      return result;
    }
  }
  else
  {
    uint64_t result = 0;
    uint64_t v4 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 48));
    if ((int)v4 < 1) {
      return result;
    }
  }
  uint64_t v5 = 0;
  int v6 = *(void **)(a1 + 376);
  do
  {
    *(unsigned char *)(*v6 + v5) += *(unsigned char *)(result[8] + v5);
    ++v5;
  }
  while (v4 != v5);
  return result;
}

void sub_19E1FABEC()
{
}

void sub_19E1FAD64(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_19E1FAD78(uint64_t a1, uint64_t *a2, int a3, int *a4)
{
  uint64_t v5 = *(int *)(a1 + 48);
  uint64_t v6 = *a2;
  *(_DWORD *)(v6 + 16 * *a4) = v5;
  uint64_t result = memmove(**(void ***)(v6 + 16 * *a4 + 8), *(const void **)(*(void *)(a1 + 112) + 8 * a3), 4 * v5);
  ++*a4;
  return result;
}

void *sub_19E1FADDC(uint64_t a1, void *a2, int a3, int *a4)
{
  uint64_t v4 = *(void *)(a1 + 112);
  uint64_t v5 = *a4;
  *a4 = v5 + 1;
  return memmove(*(void **)(v4 + 8 * a3), **(const void ***)(*a2 + 16 * v5 + 8), 4 * *(int *)(a1 + 48));
}

void sub_19E1FAE10(uint64_t a1, void *a2, int *a3)
{
  uint64_t v4 = (int *)(*a2 + 16 * *a3);
  bzero(**((void ***)v4 + 1), 4 * *v4);
  ++*a3;
}

void sub_19E1FAE60(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = **(void **)(a1 + 376);
  int v5 = *(_DWORD *)(a1 + 48);
  int v4 = *(_DWORD *)(a1 + 52);
  uint64_t v7 = *(void **)(a2 + 8);
  unint64_t v6 = *(void *)(a2 + 16);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = *(void **)a2;
    uint64_t v10 = (uint64_t)v7 - *(void *)a2;
    unint64_t v11 = (v10 >> 4) + 1;
    if (v11 >> 60) {
      sub_19E13D694();
    }
    uint64_t v12 = v6 - (void)v9;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    BOOL v13 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
    if (!v13) {
      unint64_t v14 = v11;
    }
    if (v14 >> 60) {
      sub_19E13C418();
    }
    uint64_t v15 = 16 * v14;
    int v16 = (char *)operator new(16 * v14);
    int v17 = &v16[16 * (v10 >> 4)];
    int v18 = &v16[v15];
    *(void *)int v17 = v3;
    uint64_t v8 = v17 + 16;
    int v19 = &v16[v10];
    *((_DWORD *)v19 + 2) = v5;
    for (*((_DWORD *)v19 + 3) = v4; v7 != v9; *((void *)v17 + 1) = v7[1])
    {
      uint64_t v20 = *(v7 - 2);
      v7 -= 2;
      *((void *)v17 - 2) = v20;
      v17 -= 16;
    }
    *(void *)a2 = v17;
    *(void *)(a2 + 8) = v8;
    *(void *)(a2 + 16) = v18;
    if (v9) {
      operator delete(v9);
    }
  }
  else
  {
    *uint64_t v7 = v3;
    uint64_t v8 = v7 + 2;
    *((_DWORD *)v7 + 2) = v5;
    *((_DWORD *)v7 + 3) = v4;
  }
  *(void *)(a2 + 8) = v8;
}

uint64_t sub_19E1FAF70(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(v2 - 16);
  *(void *)(a2 + 8) = v2 - 16;
  *(void *)(a1 + 64) = v3;
  uint64_t result = a1 + 64;
  *(void *)(result + 312) = result;
  return result;
}

uint64_t sub_19E1FAF88(uint64_t result)
{
  *(unsigned char *)(result + 42) = 1;
  return result;
}

uint64_t sub_19E1FAF94(uint64_t result)
{
  *(unsigned char *)(result + 42) = 0;
  return result;
}

void sub_19E1FAF9C(uint64_t a1)
{
  __p = operator new(0x20uLL);
  long long v3 = xmmword_19E3513E0;
  strcpy((char *)__p, "RecurrentLayer from allocAll");
  (*(void (**)(uint64_t, void **, void, float))(*(void *)a1 + 392))(a1, &__p, 0, -0.44);
  if (SHIBYTE(v3) < 0) {
    operator delete(__p);
  }
}

void sub_19E1FB068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E1FB084(void *a1)
{
  uint64_t v2 = a1[31];
  uint64_t v3 = a1[32];
  if (v3 == v2)
  {
    uint64_t v2 = a1[32];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      int v5 = *(void **)(v2 + 8 * v4);
      if (v5)
      {
        operator delete[](v5);
        uint64_t v2 = a1[31];
        uint64_t v3 = a1[32];
      }
      ++v4;
    }
    while (v4 < (v3 - v2) >> 3);
  }
  uint64_t v6 = a1[34];
  uint64_t v7 = a1[35];
  if (v7 == v6)
  {
    a1[32] = v2;
    a1[35] = v7;
  }
  else
  {
    unint64_t v8 = 0;
    do
    {
      unint64_t v9 = *(void **)(v6 + 8 * v8);
      if (v9)
      {
        operator delete[](v9);
        uint64_t v6 = a1[34];
        uint64_t v7 = a1[35];
      }
      ++v8;
    }
    while (v8 < (v7 - v6) >> 3);
    a1[32] = a1[31];
    a1[35] = v6;
  }
}

uint64_t sub_19E1FB138(uint64_t a1)
{
  return *(_DWORD *)(a1 + 44) + *(unsigned __int8 *)(a1 + 40);
}

uint64_t sub_19E1FB148(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_19E1FB154(uint64_t result, float a2, double a3)
{
  uint64_t v3 = *(unsigned int *)(result + 56);
  if ((int)v3 >= 1)
  {
    uint64_t v4 = 0;
    float v5 = truncf(a2);
    do
    {
      uint64_t v6 = *(void *)(result + 64);
      LOBYTE(a3) = *(unsigned char *)(v6 + v4);
      *(void *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
      *(float *)&a3 = (float)SLODWORD(a3) + (float)(*(float *)(*(void *)(result + 80) + 4 * v4) * v5);
      *(unsigned char *)(v6 + v4++) = (int)*(float *)&a3;
    }
    while (v3 != v4);
  }
  return result;
}

void sub_19E1FB1A0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, int a5)
{
  char v8 = (**(uint64_t (***)(uint64_t))a1)(a1);
  if (a5 >= 1 && (v8 & 1) == 0)
  {
    int v10 = a5 - 1;
    do
    {
      if (*(unsigned char *)(a1 + 232)) {
        int v12 = a5 - 1 - v10;
      }
      else {
        int v12 = v10;
      }
      uint64_t v13 = 8 * v12;
      sub_19E1D0E88((void **)(a1 + 216), (float32x4_t **)(*(void *)(a1 + 184) + v13), (const void **)(*a4 + v13), *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 208), v9);
      sub_19E1F4438((float **)(*(void *)(a1 + 136) + v13), (void *)(a1 + 216), *(void **)(a1 + 376), *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52), 0.0);
      uint64_t v14 = *(unsigned int *)(a1 + 52);
      if ((int)v14 >= 1)
      {
        uint64_t v15 = *(float **)(*(void *)(a1 + 136) + 8 * v12);
        do
        {
          v9.i32[0] = -1035468800;
          if (*v15 < -50.0 || (v9.i32[0] = 1112014848, *v15 > 50.0)) {
            float *v15 = v9.f32[0];
          }
          ++v15;
          --v14;
        }
        while (v14);
      }
    }
    while (v10-- > 0);
  }
  bzero(*(void **)(a1 + 80), 4 * *(int *)(a1 + 56));
  if (a5 >= 1)
  {
    global_queue = dispatch_get_global_queue(0, 0);
    int v17 = 0;
    uint64_t v18 = MEMORY[0x1E4F143A8];
    do
    {
      --a5;
      if (*(unsigned char *)(a1 + 232)) {
        int v19 = v17;
      }
      else {
        int v19 = a5;
      }
      uint64_t v20 = 8 * v19;
      uint64_t v21 = *(void *)(a1 + 80);
      uint64_t v22 = *(void *)(a1 + 88) + v20;
      uint64_t v23 = *a4 + v20;
      int v24 = *(_DWORD *)(a1 + 52);
      size_t v25 = *(int *)(a1 + 48);
      v26[0] = v18;
      v26[1] = 0x40000000;
      v26[2] = sub_19E1C7E74;
      v26[3] = &unk_1E599D040;
      int v27 = v24;
      v26[4] = v21;
      v26[5] = v23;
      v26[6] = v22;
      dispatch_apply(v25, global_queue, v26);
      if (*(unsigned char *)(a1 + 40)) {
        *(_DWORD *)(*(void *)(*(void *)(a1 + 136) + 8 * v19) + 4 * *(int *)(a1 + 52) - 4) = 1065353216;
      }
      ++v17;
    }
    while (a5 > 0);
  }
}

uint64_t sub_19E1FB3E0(uint64_t result, void *a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(result + 240);
  if (v5)
  {
    if (*(unsigned char *)(v5 + 20) || *(_DWORD *)(v5 + 40) != 1)
    {
      BOOL v6 = 0;
      int v7 = *(unsigned __int8 *)(result + 232);
      if (!a5) {
        goto LABEL_10;
      }
    }
    else
    {
      BOOL v6 = *(_DWORD *)(v5 + 44) == 1;
      int v7 = *(unsigned __int8 *)(result + 232);
      if (!a5) {
        goto LABEL_10;
      }
    }
  }
  else
  {
    BOOL v6 = 1;
    int v7 = *(unsigned __int8 *)(result + 232);
    if (!a5) {
      goto LABEL_10;
    }
  }
  if (v7) {
    sub_19E2F6320(34);
  }
LABEL_10:
  int v8 = a4 & 0xFFFFFF;
  unsigned int v9 = a5 != 0;
  if ((a4 & 0xFFFFFFu) > v9)
  {
    BOOL v46 = v6;
    if (v7) {
      signed int v11 = v8 + ~v9;
    }
    else {
      signed int v11 = a5 != 0;
    }
    BOOL v12 = v11 < v8 - 1;
    if (v7) {
      int v13 = 1;
    }
    else {
      int v13 = -1;
    }
    if (v7) {
      BOOL v14 = v12;
    }
    else {
      BOOL v14 = a5 != 0;
    }
    uint64_t v15 = 8 * v11;
    uint64_t v16 = result;
    bzero(*(void **)(*(void *)(result + 88) + v15), 4 * *(int *)(result + 52));
    int v17 = (uint64_t *)(*(void *)(v16 + 88) + v15);
    uint64_t v18 = *(unsigned int *)(v16 + 44);
    if ((int)v18 >= 1)
    {
      uint64_t v19 = 0;
      uint64_t v20 = *(void *)(*a2 + 8 * v11);
      uint64_t v21 = *v17;
      if (v18 < 8) {
        goto LABEL_28;
      }
      if ((unint64_t)(v21 - v20) < 0x20) {
        goto LABEL_28;
      }
      uint64_t v19 = v18 & 0x7FFFFFF8;
      uint64_t v22 = (long long *)(v20 + 16);
      uint64_t v23 = (_OWORD *)(v21 + 16);
      uint64_t v24 = v18 & 0xFFFFFFF8;
      do
      {
        long long v25 = *v22;
        *(v23 - 1) = *(v22 - 1);
        *uint64_t v23 = v25;
        v22 += 2;
        v23 += 2;
        v24 -= 8;
      }
      while (v24);
      if (v19 != v18)
      {
LABEL_28:
        uint64_t v26 = v18 - v19;
        uint64_t v27 = 4 * v19;
        uint64_t v28 = (_DWORD *)(v21 + 4 * v19);
        uint64_t v29 = (int *)(v20 + v27);
        do
        {
          int v30 = *v29++;
          *v28++ = v30;
          --v26;
        }
        while (v26);
      }
    }
    int v31 = v11 + v13;
    if (v46 && v14)
    {
      uint64_t v32 = *(unsigned int *)(v16 + 48);
      if ((int)v32 >= 1)
      {
        uint64_t v33 = *(void *)(*(void *)(v16 + 112) + 8 * v31);
        uint64_t v34 = *v17;
        if (v32 < 8 || (uint64_t v35 = 4 * (int)v18 + v34, (unint64_t)(v35 - v33) < 0x20))
        {
          uint64_t v36 = 0;
LABEL_35:
          uint64_t v37 = v32 - v36;
          uint64_t v38 = (_DWORD *)(v34 + 4 * (v36 + (int)v18));
          uint64_t v39 = (int *)(v33 + 4 * v36);
          do
          {
            int v40 = *v39++;
            *v38++ = v40;
            --v37;
          }
          while (v37);
          goto LABEL_37;
        }
        uint64_t v36 = v32 & 0x7FFFFFF8;
        v42 = (long long *)(v33 + 16);
        v43 = (_OWORD *)(v35 + 16);
        uint64_t v44 = v32 & 0xFFFFFFF8;
        do
        {
          long long v45 = *v42;
          *(v43 - 1) = *(v42 - 1);
          _OWORD *v43 = v45;
          v42 += 2;
          v43 += 2;
          v44 -= 8;
        }
        while (v44);
        if (v36 != v32) {
          goto LABEL_35;
        }
      }
    }
LABEL_37:
    uint64_t v41 = *(int *)(v16 + 52);
    if (*(unsigned char *)(v16 + 40)) {
      *(_DWORD *)(*v17 + 4 * v41 - 4) = 1065353216;
    }
    sub_19E1F4438((float **)(v16 + 216), v17, *(void **)(v16 + 376), *(_DWORD *)(v16 + 48), v41, 0.0);
    if (!v46 && v14) {
      sub_19E1F4438((float **)(v16 + 216), (void *)(*(void *)(v16 + 112) + 8 * v31), *(void **)(v16 + 384), *(_DWORD *)(v16 + 48), *(_DWORD *)(v16 + 48), 1.0);
    }
    sub_19E2F6320(76);
  }
  return result;
}

char *sub_19E1FB69C(uint64_t a1, void *lpsrc)
{
  if (*(_DWORD *)(a1 + 368) != 1) {
    sub_19E2F6320(1);
  }
  uint64_t result = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3C58, 0);
  if (!result) {
    __cxa_bad_cast();
  }
  *(void *)(a1 + 376) = result + 64;
  return result;
}

uint64_t sub_19E1FB728(uint64_t a1, void *lpsrc, float a3)
{
  if (*(_DWORD *)(a1 + 368)) {
    sub_19E2F6320(1);
  }
  uint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3C58, 0);
  if (!v5) {
    __cxa_bad_cast();
  }
  BOOL v6 = v5;
  sub_19E303188(a1 + 296);
  uint64_t v8 = *(unsigned int *)(a1 + 56);
  if ((int)v8 >= 1)
  {
    uint64_t v9 = 0;
    float v10 = truncf(a3);
    do
    {
      uint64_t v11 = *(void *)(a1 + 64);
      v7.i8[0] = *(unsigned char *)(v11 + v9);
      int8x8_t v7 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v7)).u64[0];
      *(float *)v7.i32 = (float)v7.i32[0] + (float)(*(float *)(v6[10] + 4 * v9) * v10);
      *(unsigned char *)(v11 + v9++) = (int)*(float *)v7.i32;
    }
    while (v8 != v9);
  }

  return sub_19E303190(a1 + 296);
}

uint64_t sub_19E1FB828(uint64_t result, uint64_t *a2, uint64_t *a3, int a4, int *a5)
{
  uint64_t v5 = (a4 - 1);
  if (a4 >= 1)
  {
    unint64_t v6 = *(unsigned int *)(result + 48);
    if ((int)v6 >= 1)
    {
      uint64_t v7 = *(void *)(result + 112);
      uint64_t v8 = *a2;
      uint64_t v9 = *a3;
      int v10 = *a5;
      do
      {
        if ((int)v6 >= 1)
        {
          int v12 = 0;
          uint64_t v13 = 0;
          float v14 = 1.1755e-38;
          do
          {
            float v15 = *(float *)(*(void *)(v7 + 8 * v5) + 4 * v13);
            if (v15 > v14) {
              int v12 = v13;
            }
            float v14 = fmaxf(v15, v14);
            ++v13;
          }
          while (v6 != v13);
          int v16 = 0;
          uint64_t v17 = 0;
          float v18 = 1.1755e-38;
          do
          {
            float v19 = *(float *)(*(void *)(v8 + 8 * v5) + 4 * v17);
            if (v19 > v18) {
              int v16 = v17;
            }
            float v18 = fmaxf(v19, v18);
            ++v17;
          }
          while (v6 != v17);
          if (v12 == v16)
          {
            unint64_t v6 = v6;
          }
          else
          {
            *a5 = ++v10;
            unint64_t v6 = *(unsigned int *)(result + 48);
            if ((int)v6 < 1) {
              continue;
            }
          }
          uint64_t v20 = *(float32x4_t **)(v8 + 8 * v5);
          uint64_t v21 = *(float32x4_t **)(v7 + 8 * v5);
          uint64_t v22 = *(float32x4_t **)(v9 + 8 * v5);
          if (v6 >= 8)
          {
            unint64_t v23 = 0;
            if ((unint64_t)((char *)v22 - (char *)v20) >= 0x20
              && (unint64_t)((char *)v22 - (char *)v21) >= 0x20)
            {
              unint64_t v23 = v6 & 0x7FFFFFF8;
              uint64_t v24 = v20 + 1;
              long long v25 = v21 + 1;
              uint64_t v26 = v22 + 1;
              uint64_t v27 = v6 & 0xFFFFFFF8;
              do
              {
                float32x4_t v28 = vsubq_f32(*v24, *v25);
                v26[-1] = vsubq_f32(v24[-1], v25[-1]);
                *uint64_t v26 = v28;
                v24 += 2;
                v25 += 2;
                v26 += 2;
                v27 -= 8;
              }
              while (v27);
              if (v23 == v6) {
                continue;
              }
            }
          }
          else
          {
            unint64_t v23 = 0;
          }
          uint64_t v29 = &v22->f32[v23];
          int v30 = &v21->f32[v23];
          int v31 = &v20->f32[v23];
          unint64_t v32 = v6 - v23;
          do
          {
            float v33 = *v31++;
            float v34 = v33;
            float v35 = *v30++;
            *v29++ = v34 - v35;
            --v32;
          }
          while (v32);
        }
      }
      while (v5-- > 0);
    }
  }
  return result;
}

float sub_19E1FB9A8(uint64_t a1, uint64_t *a2, int a3)
{
  if (a3 < 1) {
    return 0.0;
  }
  uint64_t v3 = *(unsigned int *)(a1 + 48);
  uint64_t v4 = *(float ***)(a1 + 112);
  uint64_t v5 = a3;
  if ((int)v3 <= 0)
  {
    float v8 = 0.0;
    do
    {
      while (1)
      {
        float v14 = **v4;
        if (v14 <= 1.0e-10) {
          break;
        }
        float v8 = v8 - log2f(v14);
        ++v4;
        if (!--v5) {
          return v8;
        }
      }
      float v8 = v8 + 99.0;
      ++v4;
      --v5;
    }
    while (v5);
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a2;
    float v8 = 0.0;
    do
    {
      while (1)
      {
        int v9 = 0;
        uint64_t v10 = 0;
        float v11 = 1.1755e-38;
        do
        {
          float v12 = *(float *)(*(void *)(v7 + 8 * v6) + 4 * v10);
          if (v12 > v11) {
            int v9 = v10;
          }
          float v11 = fmaxf(v12, v11);
          ++v10;
        }
        while (v3 != v10);
        float v13 = v4[v6][v9];
        if (v13 <= 1.0e-10) {
          break;
        }
        float v8 = v8 - log2f(v13);
        if (++v6 == v5) {
          return v8;
        }
      }
      float v8 = v8 + 99.0;
      ++v6;
    }
    while (v6 != v5);
  }
  return v8;
}

void sub_19E1FBAEC(void *a1)
{
  v1 = sub_19E1FCA30(a1);

  operator delete(v1);
}

uint64_t sub_19E1FBB14(uint64_t a1)
{
  return a1 + 160;
}

float sub_19E1FBB1C(uint64_t a1, int a2, int a3)
{
  return *(float *)(*(void *)(*(void *)(a1 + 112) + 8 * a2) + 4 * a3);
}

void sub_19E1FBB2C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 240);
  if (v1)
  {
    if (*(unsigned char *)(v1 + 20) || *(_DWORD *)(v1 + 40) != 1)
    {
      BOOL v2 = 0;
      if (!*(unsigned char *)(a1 + 42)) {
        goto LABEL_11;
      }
    }
    else
    {
      BOOL v2 = *(_DWORD *)(v1 + 44) == 1;
      if (!*(unsigned char *)(a1 + 42))
      {
LABEL_11:
        int v3 = *(_DWORD *)(a1 + 48);
        int v4 = *(_DWORD *)(a1 + 44) + *(unsigned __int8 *)(a1 + 40);
        *(_DWORD *)(a1 + 52) = v4;
        if (!v2)
        {
LABEL_9:
          *(_DWORD *)(a1 + 56) = v3 * v4;
          operator new[]();
        }
LABEL_8:
        v4 += v3;
        *(_DWORD *)(a1 + 52) = v4;
        goto LABEL_9;
      }
    }
  }
  else
  {
    BOOL v2 = 1;
    if (!*(unsigned char *)(a1 + 42)) {
      goto LABEL_11;
    }
  }
  int v3 = *(_DWORD *)(a1 + 48);
  int v4 = *(_DWORD *)(a1 + 44) + *(unsigned __int8 *)(a1 + 40);
  *(_DWORD *)(a1 + 52) = v4;
  if (!v2) {
    goto LABEL_9;
  }
  goto LABEL_8;
}

void *sub_19E1FCA30(void *a1)
{
  *a1 = &unk_1EF0A52A8;
  uint64_t v2 = a1[31];
  uint64_t v3 = a1[32];
  if (v3 == v2)
  {
    uint64_t v2 = a1[32];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void **)(v2 + 8 * v4);
      if (v5)
      {
        operator delete[](v5);
        uint64_t v2 = a1[31];
        uint64_t v3 = a1[32];
      }
      ++v4;
    }
    while (v4 < (v3 - v2) >> 3);
  }
  uint64_t v6 = a1[34];
  uint64_t v7 = a1[35];
  if (v7 == v6)
  {
    a1[32] = v2;
    a1[35] = v7;
    sub_19E3030E8((uint64_t)(a1 + 37));
    uint64_t v10 = (void *)a1[34];
    if (v10)
    {
LABEL_13:
      a1[35] = v10;
      operator delete(v10);
    }
  }
  else
  {
    unint64_t v8 = 0;
    do
    {
      int v9 = *(void **)(v6 + 8 * v8);
      if (v9)
      {
        operator delete[](v9);
        uint64_t v6 = a1[34];
        uint64_t v7 = a1[35];
      }
      ++v8;
    }
    while (v8 < (v7 - v6) >> 3);
    a1[32] = a1[31];
    a1[35] = v6;
    sub_19E3030E8((uint64_t)(a1 + 37));
    uint64_t v10 = (void *)a1[34];
    if (v10) {
      goto LABEL_13;
    }
  }
  float v11 = (void *)a1[31];
  if (v11)
  {
    a1[32] = v11;
    operator delete(v11);
  }
  float v12 = (void *)a1[23];
  if (v12)
  {
    a1[24] = v12;
    operator delete(v12);
  }
  float v13 = (void *)a1[20];
  if (v13)
  {
    a1[21] = v13;
    operator delete(v13);
  }
  float v14 = (void *)a1[17];
  if (v14)
  {
    a1[18] = v14;
    operator delete(v14);
  }
  float v15 = (void *)a1[14];
  if (v15)
  {
    a1[15] = v15;
    operator delete(v15);
  }
  int v16 = (void *)a1[11];
  if (v16)
  {
    a1[12] = v16;
    operator delete(v16);
  }
  *a1 = &unk_1EF0A50F8;
  uint64_t v17 = (void *)a1[1];
  if (v17)
  {
    a1[2] = v17;
    operator delete(v17);
  }
  return a1;
}

uint64_t sub_19E1FCBB0(uint64_t a1, int a2, int a3, int a4, int a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v15 = sub_19E1FCF24(a1, a5);
  *(void *)uint64_t v15 = &unk_1EF0A6EA8;
  *(_WORD *)(v15 + 41) = 0;
  *(_DWORD *)(v15 + 112) = 0;
  *(_DWORD *)(v15 + 408) = a4;
  *(void *)(v15 + 528) = a8;
  *(_DWORD *)(v15 + 120) = *(_DWORD *)(a6 + 68);
  if (a8) {
    a7 = *(unsigned char *)(a8 + 376);
  }
  *(unsigned char *)(a1 + 40) = a7;
  *(_DWORD *)(a1 + 96) = a2;
  *(_DWORD *)(a1 + 100) = a3;
  *(void *)(a1 + 104) = 0;
  *(_WORD *)(a1 + 116) = *(_WORD *)(a6 + 45);
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 528) = a8;
  if (a2 < 1 || a3 <= 0) {
    sub_19E2F6320(34);
  }
  char v19 = 7;
  strcpy(__p, "SoftMax");
  sub_19E1F922C(a1);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a6 + 16);
  *(void *)(a1 + 424) = 0;
  if (!*(unsigned char *)(a1 + 116))
  {
    int v16 = *(_DWORD *)(a6 + 32);
    switch(v16)
    {
      case 2:
        operator new();
      case 1:
        operator new();
      case 0:
        operator new();
    }
  }
  return a1;
}

void sub_19E1FCEBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  operator delete(v15);
  sub_19E1FA2C4(v14);
  _Unwind_Resume(a1);
}

void sub_19E1FCEE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_19E1FA2C4(v17);
  _Unwind_Resume(a1);
}

uint64_t sub_19E1FCF24(uint64_t a1, int a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF0A76B8;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(unsigned char *)(a1 + 232) = 0;
  *(void *)(a1 + 416) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(void *)(a1 + 400) = 0;
  sub_19E3030A0(a1 + 432);
  *(_DWORD *)(a1 + 504) = a2;
  *(_WORD *)(a1 + 40) = 0;
  *(void *)(a1 + 424) = 0;
  *(unsigned char *)(a1 + 520) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 110) = 0;
  *(_DWORD *)(a1 + 408) = 1;
  *(void *)(a1 + 528) = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 192))(a1);
  return a1;
}

void sub_19E1FD044(_Unwind_Exception *a1)
{
  uint64_t v6 = v4;
  sub_19E3030E8(v6);
  unint64_t v8 = *(void **)(v1 + 384);
  if (v8)
  {
    *(void *)(v1 + 392) = v8;
    operator delete(v8);
    sub_19E14315C((void **)(v1 + 360));
    int v9 = *(void **)(v1 + 336);
    if (!v9)
    {
LABEL_3:
      uint64_t v10 = *(void **)(v1 + 312);
      if (!v10) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else
  {
    sub_19E14315C((void **)(v1 + 360));
    int v9 = *(void **)(v1 + 336);
    if (!v9) {
      goto LABEL_3;
    }
  }
  *(void *)(v1 + 344) = v9;
  operator delete(v9);
  uint64_t v10 = *(void **)(v1 + 312);
  if (!v10)
  {
LABEL_4:
    float v11 = *(void **)(v1 + 288);
    if (!v11) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  *(void *)(v1 + 320) = v10;
  operator delete(v10);
  float v11 = *(void **)(v1 + 288);
  if (!v11)
  {
LABEL_5:
    float v12 = *(void **)(v1 + 264);
    if (!v12) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
LABEL_13:
  *(void *)(v1 + 296) = v11;
  operator delete(v11);
  float v12 = *(void **)(v1 + 264);
  if (!v12)
  {
LABEL_6:
    sub_19E1C6038(v3);
    float v13 = *(void **)(v1 + 72);
    if (!v13) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  *(void *)(v1 + 272) = v12;
  operator delete(v12);
  sub_19E1C6038(v3);
  float v13 = *(void **)(v1 + 72);
  if (!v13)
  {
LABEL_7:
    float v14 = *v5;
    if (!*v5) {
      goto LABEL_8;
    }
    goto LABEL_16;
  }
LABEL_15:
  *(void *)(v1 + 80) = v13;
  operator delete(v13);
  float v14 = *v5;
  if (!*v5)
  {
LABEL_8:
    *(void *)uint64_t v1 = v2;
    uint64_t v15 = *(void **)(v1 + 8);
    if (!v15) {
      goto LABEL_9;
    }
    goto LABEL_17;
  }
LABEL_16:
  *(void *)(v1 + 56) = v14;
  operator delete(v14);
  *(void *)uint64_t v1 = v2;
  uint64_t v15 = *(void **)(v1 + 8);
  if (!v15) {
LABEL_9:
  }
    _Unwind_Resume(a1);
LABEL_17:
  *(void *)(v1 + 16) = v15;
  operator delete(v15);
  _Unwind_Resume(a1);
}

void sub_19E1FD150()
{
}

uint64_t sub_19E1FD164(uint64_t a1)
{
  return a1 + 264;
}

uint64_t sub_19E1FD16C(uint64_t a1)
{
  return a1 + 288;
}

void sub_19E1FD174(uint64_t a1)
{
  strcpy((char *)__p, "SoftMax, from allocAll");
  sub_19E1F922C(a1);
}

void sub_19E1FD1F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E1FD20C(uint64_t a1, void *a2, uint64_t a3, int a4, char **a5)
{
  int v9 = *(unsigned __int8 *)(a1 + 42);
  uint64_t v10 = a4;
  uint64_t v11 = *(unsigned int *)(a1 + 100);
  uint64_t v12 = *(int *)(a1 + 96);
  float v13 = *(uint64_t **)(a1 + 512);
  uint64_t v14 = *(int *)(a1 + 104);
  uint64_t v15 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  memmove(*(void **)(*v15 + 8 * a4), *(const void **)(*a2 + 8 * a4), 4 * v12);
  if (*(unsigned char *)(a1 + 40)) {
    *(_DWORD *)(*(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1) + 8 * v10)
  }
              + 4 * v14
              - 4) = 1065353216;
  int v16 = *a5;
  uint64_t v17 = a5[1];
  if (v9) {
    uint64_t v18 = 1;
  }
  else {
    uint64_t v18 = v10;
  }
  char v19 = (void **)(*(void *)(a1 + 384) + 8 * v18);
  uint64_t v20 = (uint64_t *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1) + 8 * v10);
  if (v17 != v16)
  {
    sub_19E1FD79C((uint64_t)v19, v19, a5, v20, v13, v11, v14);
    if ((int)v11 >= 1)
    {
      uint64_t v21 = *(int **)(*(void *)(a1 + 384) + 8 * v18);
      uint64_t v22 = v11;
      do
      {
        int v23 = -1035468800;
        if (*(float *)v21 < -50.0 || (int v23 = 1112014848, *(float *)v21 > 50.0)) {
          *uint64_t v21 = v23;
        }
        ++v21;
        --v22;
      }
      while (v22);
    }
    uint64_t v24 = *(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
    uint64_t v25 = *(void *)(a1 + 384);
    uint64_t v26 = *a5;
    int64_t v27 = a5[1] - *a5;
    if (v27)
    {
      if (v27 < 0) {
        sub_19E13D694();
      }
      float32x4_t v28 = (int *)operator new(v27);
      memcpy(v28, v26, v27);
      bzero(*(void **)(v24 + 8 * v10), 4 * (int)v11);
      if (&v28[v27 >> 2] != v28)
      {
        uint64_t v29 = *(void *)(v25 + 8 * v18);
        uint64_t v30 = *(void *)(v24 + 8 * v10);
        if ((unint64_t)((4 * (v27 >> 2)) >> 2) <= 1) {
          uint64_t v31 = 1;
        }
        else {
          uint64_t v31 = (4 * (v27 >> 2)) >> 2;
        }
        float v32 = 0.0;
        float v33 = v28;
        uint64_t v34 = v31;
        do
        {
          uint64_t v35 = *v33++;
          float v36 = expf(*(float *)(v29 + 4 * v35));
          *(float *)(v30 + 4 * v35) = v36;
          float v32 = v36 + v32;
          --v34;
        }
        while (v34);
        float v37 = 1.0 / (float)(v32 + 0.001);
        if (v32 <= 0.0) {
          float v37 = 1000.0;
        }
        uint64_t v38 = v28;
        do
        {
          uint64_t v39 = *v38++;
          *(float *)(v30 + 4 * v39) = *(float *)(v30 + 4 * v39) * v37;
          --v31;
        }
        while (v31);
LABEL_46:
        operator delete(v28);
        return;
      }
    }
    else
    {
      float32x4_t v28 = 0;
      bzero(*(void **)(v24 + 8 * v10), 4 * (int)v11);
    }
    if (!v28) {
      return;
    }
    goto LABEL_46;
  }
  sub_19E1F4438((float **)v19, v20, v13, v11, v14, 0.0);
  if ((int)v11 >= 1)
  {
    int v40 = *(int **)(*(void *)(a1 + 384) + 8 * v18);
    uint64_t v41 = v11;
    do
    {
      int v42 = -1035468800;
      if (*(float *)v40 < -50.0 || (int v42 = 1112014848, *(float *)v40 > 50.0)) {
        *int v40 = v42;
      }
      ++v40;
      --v41;
    }
    while (v41);
  }
  uint64_t v43 = *(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t v44 = *(void *)(a1 + 384);
  float __C = 0.0;
  LODWORD(__N) = v11;
  vvexpf(*(float **)(v43 + 8 * v10), *(const float **)(v44 + 8 * v18), (const int *)&__N);
  vDSP_sve(*(const float **)(v43 + 8 * v10), 1, &__C, (int)__N);
  if (__C <= 0.0) {
    float v45 = 0.001;
  }
  else {
    float v45 = __C + 0.001;
  }
  float __B = v45;
  vDSP_vsdiv(*(const float **)(v43 + 8 * v10), 1, &__B, *(float **)(v43 + 8 * v10), 1, (int)__N);
  BOOL v46 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  if ((int)v11 >= 1)
  {
    v47 = *(float **)(*v46 + 8 * v10);
    do
    {
      float v48 = -5.0;
      if (*v47 < -5.0 || (float v48 = 5.0, *v47 > 5.0)) {
        float *v47 = v48;
      }
      ++v47;
      --v11;
    }
    while (v11);
  }
}

void sub_19E1FD6AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E1FD6C8(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = result;
  if (a5 && *(unsigned char *)(result + 520)) {
    sub_19E2F6320(34);
  }
  int v11 = a4 & 0xFFFFFF;
  uint64_t v12 = a5 != 0;
  if ((a4 & 0xFFFFFFu) > v12)
  {
    do
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v10 + 224))(v10, a2, a3, v12, a7);
      uint64_t v12 = (v12 + 1);
    }
    while (v11 != v12);
  }
  return result;
}

void sub_19E1FD774(void *a1)
{
  uint64_t v1 = sub_19E1FA2C4(a1);

  operator delete(v1);
}

void sub_19E1FD79C(uint64_t a1, void **a2, char **a3, uint64_t *a4, uint64_t *a5, int a6, int a7)
{
  bzero(*a2, 4 * a6);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9457D10, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1E9457D10))
  {
    float v65 = sub_19E2F6308();
    *(float *)&dword_1E9457D18 = sub_19E2F6308() * v65;
    __cxa_guard_release(&qword_1E9457D10);
  }
  if (a7)
  {
    if (a7 < 0) {
      sub_19E13D694();
    }
    uint64_t v12 = (int8x16_t *)operator new(a7);
    bzero(v12, a7);
    uint64_t v13 = 0;
    uint64_t v14 = *a4;
    do
    {
      float v16 = *(float *)(v14 + 4 * v13);
      if (v16 <= -5.0)
      {
        LOBYTE(v15) = -127;
      }
      else if (v16 < 5.0 && (int v15 = llroundf(v16 * 25.6), v15 <= 127))
      {
        if (v15 <= -127) {
          LOBYTE(v15) = -127;
        }
      }
      else
      {
        LOBYTE(v15) = 127;
      }
      v12->i8[v13++] = v15;
    }
    while (a7 != v13);
  }
  else
  {
    uint64_t v12 = 0;
  }
  uint64_t v17 = *a3;
  uint64_t v18 = a3[1] - *a3;
  if (!v18) {
    goto LABEL_42;
  }
  unint64_t v19 = v18 >> 2;
  uint64_t v20 = *a5;
  if (a7 >= 0) {
    int v21 = a7;
  }
  else {
    int v21 = a7 + 15;
  }
  uint64_t v22 = a7 - (v21 & 0xFFFFFFF0);
  uint64_t v23 = (int)(v21 & 0xFFFFFFF0);
  uint64_t v24 = (float *)*a2;
  if (a7 < 16)
  {
    int v52 = vpadalq_s32(vdupq_laneq_s64(vpaddlq_s32((int32x4_t)0), 1), (int32x4_t)0).u32[0];
    if ((int)v22 >= 1)
    {
      uint64_t v53 = 0;
      if (v19 <= 1) {
        unint64_t v19 = 1;
      }
      uint64_t v54 = v20 + v23;
      do
      {
        int v55 = 0;
        uint64_t v56 = *(int *)&v17[4 * v53];
        v57 = (char *)(v54 + (int)v56 * (uint64_t)a7);
        v58 = &v12->i8[v23];
        uint64_t v59 = v22;
        do
        {
          int v61 = *v57++;
          int v60 = v61;
          int v62 = *v58++;
          v55 += v62 * v60;
          --v59;
        }
        while (v59);
        v24[v56] = *(float *)&dword_1E9457D18 * (float)(v55 + v52);
        ++v53;
      }
      while (v53 != v19);
      goto LABEL_43;
    }
    if (v19 <= 1) {
      uint64_t v63 = 1;
    }
    else {
      uint64_t v63 = v19;
    }
    do
    {
      uint64_t v64 = *(int *)v17;
      v17 += 4;
      v24[v64] = *(float *)&dword_1E9457D18 * (float)v52;
      --v63;
    }
    while (v63);
LABEL_42:
    if (!v12) {
      return;
    }
    goto LABEL_43;
  }
  uint64_t v25 = 0;
  uint64_t v26 = (v21 >> 4);
  if (v19 <= 1) {
    unint64_t v19 = 1;
  }
  int64_t v27 = &v12->i8[v23];
  uint64_t v28 = v20 + v23;
  do
  {
    uint64_t v31 = *(int *)&v17[4 * v25];
    float v32 = (int8x16_t *)(v20 + (int)v31 * (uint64_t)a7);
    int32x4_t v33 = 0uLL;
    uint64_t v34 = v12;
    uint64_t v35 = v26;
    int32x4_t v36 = 0uLL;
    int32x4_t v37 = 0uLL;
    int32x4_t v38 = 0uLL;
    do
    {
      int8x16_t v39 = *v32++;
      int8x16_t v40 = v39;
      int8x16_t v41 = *v34++;
      int16x8_t v42 = vmovl_high_s8(v40);
      int16x8_t v43 = vmovl_high_s8(v41);
      int32x4_t v33 = vmlal_high_s16(v33, v42, v43);
      int32x4_t v36 = vmlal_s16(v36, *(int16x4_t *)v42.i8, *(int16x4_t *)v43.i8);
      int16x8_t v44 = vmovl_s8(*(int8x8_t *)v40.i8);
      int16x8_t v45 = vmovl_s8(*(int8x8_t *)v41.i8);
      int32x4_t v37 = vmlal_high_s16(v37, v44, v45);
      int32x4_t v38 = vmlal_s16(v38, *(int16x4_t *)v44.i8, *(int16x4_t *)v45.i8);
      --v35;
    }
    while (v35);
    if ((int)v22 < 1)
    {
      int v29 = 0;
    }
    else
    {
      int v29 = 0;
      BOOL v46 = (char *)(v28 + (int)v31 * (uint64_t)a7);
      v47 = v27;
      uint64_t v48 = v22;
      do
      {
        int v50 = *v46++;
        int v49 = v50;
        int v51 = *v47++;
        v29 += v51 * v49;
        --v48;
      }
      while (v48);
    }
    int32x4_t v30 = vaddq_s32(vaddq_s32(vaddq_s32(v37, v38), v36), v33);
    v24[v31] = *(float *)&dword_1E9457D18
             * (float)(int)(v29 + vpadalq_s32(vdupq_laneq_s64(vpaddlq_s32(v30), 1), v30).u32[0]);
    ++v25;
  }
  while (v25 != v19);
LABEL_43:

  operator delete(v12);
}

void sub_19E1FDAF8(_Unwind_Exception *a1)
{
}

void sub_19E1FDB10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E1FDB2C(uint64_t a1, int a2, int a3, _DWORD **a4, int a5, int a6, uint64_t a7, int a8, uint64_t a9, char a10)
{
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_1EF0A6240;
  *(_DWORD *)(a1 + 44) = a2;
  *(_DWORD *)(a1 + 52) = a3;
  *(_DWORD *)(a1 + 56) = a6;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(unsigned char *)(a1 + 800) = 0;
  *(unsigned char *)(a1 + 920) = 0;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(unsigned char *)(a1 + 1040) = 0;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_DWORD *)(a1 + 728) = 0;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 836) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 956) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(void *)(a1 + 1112) = 0;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(void *)(a1 + 1184) = 0;
  *(_OWORD *)(a1 + 1168) = 0u;
  sub_19E3030A0(a1 + 1192);
  sub_19E3030A0(a1 + 1264);
  sub_19E3030A0(a1 + 1336);
  sub_19E3030A0(a1 + 1408);
  sub_19E3030A0(a1 + 1480);
  sub_19E3030A0(a1 + 1552);
  sub_19E3030A0(a1 + 1624);
  sub_19E3030A0(a1 + 1696);
  sub_19E3030A0(a1 + 1768);
  sub_19E3030A0(a1 + 1840);
  sub_19E3030A0(a1 + 1912);
  *(_DWORD *)(a1 + 1988) = a5;
  *(_OWORD *)(a1 + 1992) = 0u;
  *(_OWORD *)(a1 + 2008) = 0u;
  *(_OWORD *)(a1 + 2024) = 0u;
  (*(void (**)(uint64_t))(*(void *)a1 + 192))(a1);
  *(unsigned char *)(a1 + 2040) = 0;
  *(unsigned char *)(a1 + 41) = 0;
  *(void *)(a1 + 2048) = a9;
  if (a9)
  {
    int v15 = *(unsigned __int8 *)(a9 + 376);
    nullsub_171("GRU constructor");
    int v16 = v15 ^ 1;
    a8 = *(unsigned __int8 *)(*(void *)(a1 + 2048) + 376);
  }
  else
  {
    int v16 = 1;
  }
  *(unsigned char *)(a1 + 40) = a8;
  *(_WORD *)(a1 + 1984) = *(_WORD *)(a7 + 45);
  uint64_t v17 = *a4;
  *(_DWORD *)(a1 + 520) = **a4;
  *(_DWORD *)(a1 + 524) = v17[1];
  *(_DWORD *)(a1 + 528) = v17[2];
  if (!a8) {
    int v16 = 0;
  }
  *(_DWORD *)(a1 + 48) = v16 + *(_DWORD *)(a1 + 44);
  if (a10)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
    *(unsigned char *)(a1 + 2040) = 1;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a7 + 16);
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_OWORD *)(a1 + 1152) = 0u;
  strcpy((char *)operator new(0x20uLL), "GRU alloc, from constructor");
  sub_19E1FE1B0(a1);
}

void sub_19E1FDE78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void **a19, void **a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
  {
    operator delete(__p);
    uint64_t v35 = (void *)v27[252];
    if (!v35)
    {
LABEL_3:
      int32x4_t v36 = *v32;
      if (!*v32) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v35 = (void *)v27[252];
    if (!v35) {
      goto LABEL_3;
    }
  }
  v27[253] = v35;
  operator delete(v35);
  int32x4_t v36 = *v32;
  if (!*v32)
  {
LABEL_5:
    sub_19E3030E8(v33);
    sub_19E3030E8(v29);
    sub_19E3030E8(a9);
    sub_19E3030E8(a10);
    sub_19E3030E8(a11);
    sub_19E3030E8(a12);
    sub_19E3030E8(a13);
    sub_19E3030E8(a14);
    sub_19E3030E8(a15);
    sub_19E3030E8(a16);
    sub_19E3030E8(a17);
    sub_19E1C6038(v31);
    sub_19E1C6038(v30);
    sub_19E1C6038(a18);
    int32x4_t v37 = (void *)v27[85];
    if (v37)
    {
      v27[86] = v37;
      operator delete(v37);
      int32x4_t v38 = (void *)v27[82];
      if (!v38)
      {
LABEL_7:
        int8x16_t v39 = (void *)v27[79];
        if (!v39) {
          goto LABEL_8;
        }
        goto LABEL_27;
      }
    }
    else
    {
      int32x4_t v38 = (void *)v27[82];
      if (!v38) {
        goto LABEL_7;
      }
    }
    v27[83] = v38;
    operator delete(v38);
    int8x16_t v39 = (void *)v27[79];
    if (!v39)
    {
LABEL_8:
      int8x16_t v40 = (void *)v27[76];
      if (!v40) {
        goto LABEL_9;
      }
      goto LABEL_28;
    }
LABEL_27:
    v27[80] = v39;
    operator delete(v39);
    int8x16_t v40 = (void *)v27[76];
    if (!v40)
    {
LABEL_9:
      int8x16_t v41 = (void *)v27[73];
      if (!v41) {
        goto LABEL_10;
      }
      goto LABEL_29;
    }
LABEL_28:
    v27[77] = v40;
    operator delete(v40);
    int8x16_t v41 = (void *)v27[73];
    if (!v41)
    {
LABEL_10:
      int16x8_t v42 = (void *)v27[70];
      if (!v42) {
        goto LABEL_11;
      }
      goto LABEL_30;
    }
LABEL_29:
    v27[74] = v41;
    operator delete(v41);
    int16x8_t v42 = (void *)v27[70];
    if (!v42)
    {
LABEL_11:
      int16x8_t v43 = (void *)v27[62];
      if (!v43) {
        goto LABEL_12;
      }
      goto LABEL_31;
    }
LABEL_30:
    v27[71] = v42;
    operator delete(v42);
    int16x8_t v43 = (void *)v27[62];
    if (!v43)
    {
LABEL_12:
      int16x8_t v44 = (void *)v27[59];
      if (!v44) {
        goto LABEL_13;
      }
      goto LABEL_32;
    }
LABEL_31:
    v27[63] = v43;
    operator delete(v43);
    int16x8_t v44 = (void *)v27[59];
    if (!v44)
    {
LABEL_13:
      int16x8_t v45 = (void *)v27[56];
      if (!v45) {
        goto LABEL_14;
      }
      goto LABEL_33;
    }
LABEL_32:
    v27[60] = v44;
    operator delete(v44);
    int16x8_t v45 = (void *)v27[56];
    if (!v45)
    {
LABEL_14:
      BOOL v46 = (void *)v27[53];
      if (!v46) {
        goto LABEL_15;
      }
      goto LABEL_34;
    }
LABEL_33:
    v27[57] = v45;
    operator delete(v45);
    BOOL v46 = (void *)v27[53];
    if (!v46)
    {
LABEL_15:
      v47 = (void *)v27[50];
      if (!v47) {
        goto LABEL_16;
      }
      goto LABEL_35;
    }
LABEL_34:
    v27[54] = v46;
    operator delete(v46);
    v47 = (void *)v27[50];
    if (!v47)
    {
LABEL_16:
      uint64_t v48 = *v28;
      if (!*v28) {
        goto LABEL_17;
      }
      goto LABEL_36;
    }
LABEL_35:
    v27[51] = v47;
    operator delete(v47);
    uint64_t v48 = *v28;
    if (!*v28)
    {
LABEL_17:
      sub_19E14315C(a19);
      int v49 = (void *)v27[23];
      if (!v49) {
        goto LABEL_18;
      }
      goto LABEL_37;
    }
LABEL_36:
    v27[48] = v48;
    operator delete(v48);
    sub_19E14315C(a19);
    int v49 = (void *)v27[23];
    if (!v49)
    {
LABEL_18:
      int v50 = (void *)v27[20];
      if (!v50) {
        goto LABEL_19;
      }
      goto LABEL_38;
    }
LABEL_37:
    v27[24] = v49;
    operator delete(v49);
    int v50 = (void *)v27[20];
    if (!v50)
    {
LABEL_19:
      int v51 = (void *)v27[17];
      if (!v51) {
        goto LABEL_20;
      }
      goto LABEL_39;
    }
LABEL_38:
    v27[21] = v50;
    operator delete(v50);
    int v51 = (void *)v27[17];
    if (!v51)
    {
LABEL_20:
      int v52 = (void *)v27[14];
      if (!v52) {
        goto LABEL_21;
      }
      goto LABEL_40;
    }
LABEL_39:
    v27[18] = v51;
    operator delete(v51);
    int v52 = (void *)v27[14];
    if (!v52)
    {
LABEL_21:
      uint64_t v53 = (void *)v27[11];
      if (!v53) {
        goto LABEL_22;
      }
      goto LABEL_41;
    }
LABEL_40:
    v27[15] = v52;
    operator delete(v52);
    uint64_t v53 = (void *)v27[11];
    if (!v53)
    {
LABEL_22:
      uint64_t v54 = *a20;
      if (!*a20) {
        goto LABEL_23;
      }
      goto LABEL_42;
    }
LABEL_41:
    v27[12] = v53;
    operator delete(v53);
    uint64_t v54 = *a20;
    if (!*a20)
    {
LABEL_23:
      void *v27 = a21;
      int v55 = (void *)v27[1];
      if (!v55) {
        goto LABEL_24;
      }
      goto LABEL_43;
    }
LABEL_42:
    v27[9] = v54;
    operator delete(v54);
    void *v27 = a21;
    int v55 = (void *)v27[1];
    if (!v55) {
LABEL_24:
    }
      _Unwind_Resume(a1);
LABEL_43:
    v27[2] = v55;
    operator delete(v55);
    _Unwind_Resume(a1);
  }
LABEL_4:
  v27[250] = v36;
  operator delete(v36);
  goto LABEL_5;
}

void sub_19E1FE1B0(uint64_t a1)
{
  unsigned int v1 = 3;
  unsigned int v2 = 6;
  if (*(unsigned char *)(a1 + 42))
  {
    if (*(_DWORD *)(a1 + 1988)) {
      goto LABEL_22;
    }
  }
  else
  {
    if (*(unsigned char *)(a1 + 2040)) {
      unsigned int v2 = 6;
    }
    else {
      unsigned int v2 = 0;
    }
    if (*(unsigned char *)(a1 + 2040)) {
      unsigned int v1 = 3;
    }
    else {
      unsigned int v1 = 0;
    }
    if (*(_DWORD *)(a1 + 1988)) {
      goto LABEL_22;
    }
  }
  uint64_t v3 = *(void *)(a1 + 2048);
  if (v3 && (int v4 = *(_DWORD *)(v3 + 40), v4 >= 1))
  {
    uint64_t v5 = (void *)(v3 + 8 * v2);
    if (v4 == 6)
    {
      *(void *)(a1 + 232) = v5[14];
      *(void *)(a1 + 240) = v5[15];
      *(void *)(a1 + 248) = v5[16];
    }
    else
    {
      if (v4 != 4) {
        sub_19E2F6320(45);
      }
      *(void *)(a1 + 232) = v5[14];
    }
    *(void *)(a1 + 256) = v5[17];
    *(void *)(a1 + 264) = v5[18];
    *(void *)(a1 + 272) = v5[19];
  }
  else if (!*(unsigned char *)(a1 + 1985))
  {
    operator new[]();
  }
  if (!*(unsigned char *)(a1 + 1985))
  {
    uint64_t v6 = *(void *)(a1 + 2048);
    if (v6)
    {
      if (!*(unsigned char *)(v6 + 244)) {
        operator new[]();
      }
      uint64_t v7 = (void *)(v6 + 8 * v1);
      *(void *)(a1 + 280) = v7[31];
      *(void *)(a1 + 288) = v7[32];
      *(void *)(a1 + 296) = v7[33];
    }
  }
  *(void *)(a1 + 304) = a1 + 232;
  *(void *)(a1 + 312) = a1 + 240;
  *(void *)(a1 + 320) = a1 + 248;
  *(void *)(a1 + 328) = a1 + 256;
  *(void *)(a1 + 336) = a1 + 264;
  *(void *)(a1 + 344) = a1 + 272;
  *(void *)(a1 + 352) = a1 + 280;
  *(void *)(a1 + 360) = a1 + 288;
  *(void *)(a1 + 368) = a1 + 296;
LABEL_22:
  operator new[]();
}

void sub_19E200478()
{
}

uint64_t sub_19E20048C(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_19E200494(uint64_t a1)
{
  return a1 + 112;
}

void sub_19E20049C()
{
}

uint64_t sub_19E2004B0(uint64_t a1)
{
  return a1 + 560;
}

uint64_t sub_19E2004B8()
{
  return 0;
}

unsigned char *sub_19E2004C0(uint64_t a1, uint64_t a2, int *a3, int a4)
{
  if (!a2) {
LABEL_21:
  }
    sub_19E2F6320(3);
  int v7 = *(_DWORD *)(a2 + 72);
  uint64_t v8 = *(void *)a2;
  int v9 = (int *)(*(void *)a2 + v7);
  unint64_t v10 = *(void *)a2 + *(void *)(a2 + 8) - 4;
  if ((unint64_t)v9 <= v10)
  {
    int v11 = *v9;
    v7 += 4;
    *(_DWORD *)(a2 + 72) = v7;
    uint64_t v12 = (int *)(v8 + v7);
    if ((unint64_t)v12 <= v10)
    {
LABEL_4:
      int v13 = *v12;
      v7 += 4;
      *(_DWORD *)(a2 + 72) = v7;
      if (a4 < 1) {
        goto LABEL_16;
      }
LABEL_8:
      uint64_t v14 = v7;
      int v15 = (int *)(v8 + v7);
      if ((unint64_t)v15 <= v10)
      {
        int v19 = *v15;
        v7 += 4;
        *(_DWORD *)(a2 + 72) = v7;
        uint64_t v14 = v7;
        *(_DWORD *)(a1 + 520) = v19;
        uint64_t v20 = (int *)(v8 + v7);
        if ((unint64_t)v20 <= v10)
        {
          int v16 = *v20;
          v7 += 4;
          *(_DWORD *)(a2 + 72) = v7;
          *(_DWORD *)(a1 + 524) = v16;
          uint64_t v17 = (int *)(v8 + v7);
          if ((unint64_t)v17 > v10)
          {
LABEL_14:
            int v18 = 0;
            goto LABEL_15;
          }
LABEL_11:
          int v18 = *v17;
          *(_DWORD *)(a2 + 72) = v7 + 4;
LABEL_15:
          *(_DWORD *)(a1 + 528) = v18;
          goto LABEL_16;
        }
      }
      else
      {
        *(_DWORD *)(a1 + 520) = 0;
      }
      *(_DWORD *)(a1 + 524) = 0;
      uint64_t v17 = (int *)(v8 + v14);
      if ((unint64_t)v17 > v10) {
        goto LABEL_14;
      }
      goto LABEL_11;
    }
  }
  else
  {
    int v11 = 0;
    uint64_t v12 = (int *)(v8 + v7);
    if ((unint64_t)v12 <= v10) {
      goto LABEL_4;
    }
  }
  int v13 = 0;
  if (a4 >= 1) {
    goto LABEL_8;
  }
LABEL_16:
  if (*(_DWORD *)(a1 + 52) != v11 || *(_DWORD *)(a1 + 48) != v13) {
    goto LABEL_21;
  }
  int v21 = *(unsigned char **)(a1 + 312);
  int v22 = *a3;
  int v23 = *(unsigned __int8 *)(a1 + 1985);
  int v24 = sub_19E2F6300();
  sub_19E1C632C(v21, (uint64_t *)a2, v22, v23, v24, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
  uint64_t v25 = *(unsigned char **)(a1 + 304);
  int v26 = *a3;
  int v27 = *(unsigned __int8 *)(a1 + 1985);
  int v28 = sub_19E2F6300();
  sub_19E1C632C(v25, (uint64_t *)a2, v26, v27, v28, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
  uint64_t v29 = *(unsigned char **)(a1 + 320);
  int v30 = *a3;
  int v31 = *(unsigned __int8 *)(a1 + 1985);
  int v32 = sub_19E2F6300();
  sub_19E1C632C(v29, (uint64_t *)a2, v30, v31, v32, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
  uint64_t v33 = *(unsigned char **)(a1 + 336);
  int v34 = *a3;
  int v35 = *(unsigned __int8 *)(a1 + 1985);
  int v36 = sub_19E2F6300();
  sub_19E1C632C(v33, (uint64_t *)a2, v34, v35, v36, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52));
  int32x4_t v37 = *(unsigned char **)(a1 + 328);
  int v38 = *a3;
  int v39 = *(unsigned __int8 *)(a1 + 1985);
  int v40 = sub_19E2F6300();
  sub_19E1C632C(v37, (uint64_t *)a2, v38, v39, v40, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52));
  int8x16_t v41 = *(unsigned char **)(a1 + 344);
  int v42 = *a3;
  int v43 = *(unsigned __int8 *)(a1 + 1985);
  int v44 = sub_19E2F6300();
  int v45 = *(_DWORD *)(a1 + 52);

  return sub_19E1C632C(v41, (uint64_t *)a2, v42, v43, v44, v45, v45);
}

uint64_t sub_19E200754(uint64_t a1, FILE *__stream, int *a3, int a4, unsigned int a5)
{
  if (!__stream) {
    sub_19E2F6320(3);
  }
  int v10 = *(_DWORD *)(a1 + 48);
  sub_19E2F6788(__stream, a3, *(_DWORD *)(a1 + 52));
  sub_19E2F6788(__stream, a3, v10);
  if (a4 >= 1)
  {
    int __ptr = *(_DWORD *)(a1 + 520);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    int __ptr = *(_DWORD *)(a1 + 524);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    int __ptr = *(_DWORD *)(a1 + 528);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    *a3 += 12;
  }
  uint64_t v11 = *(void *)(a1 + 312);
  int v12 = sub_19E2F6300();
  sub_19E1F3EB8(v11, __stream, a3, 3, v12, a5);
  uint64_t v13 = *(void *)(a1 + 304);
  int v14 = sub_19E2F6300();
  sub_19E1F3EB8(v13, __stream, a3, 3, v14, a5);
  uint64_t v15 = *(void *)(a1 + 320);
  int v16 = sub_19E2F6300();
  sub_19E1F3EB8(v15, __stream, a3, 3, v16, a5);
  uint64_t v17 = *(void *)(a1 + 336);
  int v18 = sub_19E2F6300();
  sub_19E1F3EB8(v17, __stream, a3, 3, v18, a5);
  uint64_t v19 = *(void *)(a1 + 328);
  int v20 = sub_19E2F6300();
  sub_19E1F3EB8(v19, __stream, a3, 3, v20, a5);
  uint64_t v21 = *(void *)(a1 + 344);
  int v22 = sub_19E2F6300();
  return sub_19E1F3EB8(v21, __stream, a3, 3, v22, a5);
}

void *sub_19E200944(uint64_t a1, void *lpsrc, const void *a3)
{
  if (lpsrc)
  {
    uint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3DB0, 0);
    if (a3) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = 0;
    int v7 = *(_DWORD *)(a1 + 52);
    uint64_t v8 = (*(_DWORD *)(a1 + 48) * v7);
    if ((int)v8 < 1) {
      goto LABEL_16;
    }
    goto LABEL_7;
  }
  uint64_t v5 = 0;
  if (!a3) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t result = __dynamic_cast(a3, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3DB0, 0);
  int v7 = *(_DWORD *)(a1 + 52);
  uint64_t v8 = (*(_DWORD *)(a1 + 48) * v7);
  if ((int)v8 < 1) {
    goto LABEL_16;
  }
LABEL_7:
  uint64_t v9 = 0;
  int v10 = *(void **)(a1 + 312);
  uint64_t v11 = (void *)result[39];
  int v12 = (void *)v5[39];
  do
  {
    *(unsigned char *)(*v10 + v9) = *(unsigned char *)(*v11 + v9) - *(unsigned char *)(*v12 + v9);
    ++v9;
  }
  while (v8 != v9);
  int v7 = *(_DWORD *)(a1 + 52);
  uint64_t v13 = (*(_DWORD *)(a1 + 48) * v7);
  if ((int)v13 >= 1)
  {
    uint64_t v14 = 0;
    uint64_t v15 = *(void **)(a1 + 320);
    int v16 = (void *)result[40];
    uint64_t v17 = (void *)v5[40];
    do
    {
      *(unsigned char *)(*v15 + v14) = *(unsigned char *)(*v16 + v14) - *(unsigned char *)(*v17 + v14);
      ++v14;
    }
    while (v13 != v14);
    int v7 = *(_DWORD *)(a1 + 52);
    uint64_t v18 = (*(_DWORD *)(a1 + 48) * v7);
    if ((int)v18 >= 1)
    {
      uint64_t v19 = 0;
      int v20 = *(void **)(a1 + 304);
      uint64_t v21 = (void *)result[38];
      int v22 = (void *)v5[38];
      do
      {
        *(unsigned char *)(*v20 + v19) = *(unsigned char *)(*v21 + v19) - *(unsigned char *)(*v22 + v19);
        ++v19;
      }
      while (v18 != v19);
      int v7 = *(_DWORD *)(a1 + 52);
    }
  }
LABEL_16:
  if (v7)
  {
    uint64_t v23 = 0;
    int v24 = *(void **)(a1 + 336);
    uint64_t v25 = (void *)result[42];
    uint64_t v26 = (v7 * v7);
    int v27 = (void *)v5[42];
    do
    {
      *(unsigned char *)(*v24 + v23) = *(unsigned char *)(*v25 + v23) - *(unsigned char *)(*v27 + v23);
      ++v23;
    }
    while (v26 != v23);
    int v28 = *(_DWORD *)(a1 + 52);
    if (v28)
    {
      uint64_t v29 = 0;
      int v30 = *(void **)(a1 + 344);
      int v31 = (void *)result[43];
      uint64_t v32 = (v28 * v28);
      uint64_t v33 = (void *)v5[43];
      do
      {
        *(unsigned char *)(*v30 + v29) = *(unsigned char *)(*v31 + v29) - *(unsigned char *)(*v33 + v29);
        ++v29;
      }
      while (v32 != v29);
      int v34 = *(_DWORD *)(a1 + 52);
      if (v34)
      {
        uint64_t v35 = 0;
        int v36 = *(void **)(a1 + 328);
        int32x4_t v37 = (void *)result[41];
        uint64_t v38 = (v34 * v34);
        int v39 = (void *)v5[41];
        do
        {
          *(unsigned char *)(*v36 + v35) = *(unsigned char *)(*v37 + v35) - *(unsigned char *)(*v39 + v35);
          ++v35;
        }
        while (v38 != v35);
      }
    }
  }
  return result;
}

void sub_19E200BCC(int a1, void *lpsrc, const void *a3)
{
  if (lpsrc) {
    __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3DB0, 0);
  }
  if (a3)
  {
    __dynamic_cast(a3, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3DB0, 0);
  }
}

void *sub_19E200C98(uint64_t a1, void *lpsrc)
{
  if (lpsrc)
  {
    uint64_t result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3DB0, 0);
    int v4 = *(_DWORD *)(a1 + 52);
    uint64_t v5 = (*(_DWORD *)(a1 + 48) * v4);
    if ((int)v5 < 1) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t result = 0;
    int v4 = *(_DWORD *)(a1 + 52);
    uint64_t v5 = (*(_DWORD *)(a1 + 48) * v4);
    if ((int)v5 < 1) {
      goto LABEL_14;
    }
  }
  uint64_t v6 = 0;
  int v7 = *(void **)(a1 + 312);
  uint64_t v8 = (void *)result[39];
  do
  {
    *(unsigned char *)(*v7 + v6) += *(unsigned char *)(*v8 + v6);
    ++v6;
  }
  while (v5 != v6);
  int v4 = *(_DWORD *)(a1 + 52);
  uint64_t v9 = (*(_DWORD *)(a1 + 48) * v4);
  if ((int)v9 >= 1)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *(void **)(a1 + 304);
    int v12 = (void *)result[38];
    do
    {
      *(unsigned char *)(*v11 + v10) += *(unsigned char *)(*v12 + v10);
      ++v10;
    }
    while (v9 != v10);
    int v4 = *(_DWORD *)(a1 + 52);
    uint64_t v13 = (*(_DWORD *)(a1 + 48) * v4);
    if ((int)v13 >= 1)
    {
      uint64_t v14 = 0;
      uint64_t v15 = *(void **)(a1 + 320);
      int v16 = (void *)result[40];
      do
      {
        *(unsigned char *)(*v15 + v14) += *(unsigned char *)(*v16 + v14);
        ++v14;
      }
      while (v13 != v14);
      int v4 = *(_DWORD *)(a1 + 52);
    }
  }
LABEL_14:
  if (v4)
  {
    uint64_t v17 = 0;
    uint64_t v18 = *(void **)(a1 + 336);
    uint64_t v19 = (void *)result[42];
    uint64_t v20 = (v4 * v4);
    do
    {
      *(unsigned char *)(*v18 + v17) += *(unsigned char *)(*v19 + v17);
      ++v17;
    }
    while (v20 != v17);
    int v21 = *(_DWORD *)(a1 + 52);
    if (v21)
    {
      uint64_t v22 = 0;
      uint64_t v23 = *(void **)(a1 + 328);
      int v24 = (void *)result[41];
      uint64_t v25 = (v21 * v21);
      do
      {
        *(unsigned char *)(*v23 + v22) += *(unsigned char *)(*v24 + v22);
        ++v22;
      }
      while (v25 != v22);
      int v26 = *(_DWORD *)(a1 + 52);
      if (v26)
      {
        uint64_t v27 = 0;
        int v28 = *(void **)(a1 + 344);
        uint64_t v29 = (void *)result[43];
        uint64_t v30 = (v26 * v26);
        do
        {
          *(unsigned char *)(*v28 + v27) += *(unsigned char *)(*v29 + v27);
          ++v27;
        }
        while (v30 != v27);
      }
    }
  }
  return result;
}

void sub_19E200E90(uint64_t a1, void *lpsrc)
{
  if (lpsrc) {
    __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3DC8, 0);
  }
  (*(void (**)(void))(**(void **)(a1 + 1128) + 64))(*(void *)(a1 + 1128));
  sub_19E2F6320(23);
}

uint64_t sub_19E200F20(uint64_t result, float a2, double a3, double a4)
{
  float v4 = -a2;
  int v5 = *(_DWORD *)(result + 52);
  uint64_t v6 = (*(_DWORD *)(result + 48) * v5);
  if ((int)v6 >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void **)(result + 312);
    do
    {
      LOBYTE(a4) = *(unsigned char *)(*v8 + v7);
      *(void *)&a4 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a4)).u64[0];
      float v9 = (float)SLODWORD(a4);
      BOOL v10 = (float)SLODWORD(a4) < v4;
      *(float *)&a4 = -a2;
      if (v10 || (*(float *)&a4 = a2, v9 > a2)) {
        *(unsigned char *)(*v8 + v7) = (int)*(float *)&a4;
      }
      ++v7;
    }
    while (v6 != v7);
    int v5 = *(_DWORD *)(result + 52);
    uint64_t v11 = (*(_DWORD *)(result + 48) * v5);
    if ((int)v11 >= 1)
    {
      uint64_t v12 = 0;
      uint64_t v13 = *(void **)(result + 304);
      do
      {
        LOBYTE(a4) = *(unsigned char *)(*v13 + v12);
        *(void *)&a4 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a4)).u64[0];
        float v14 = (float)SLODWORD(a4);
        BOOL v10 = (float)SLODWORD(a4) < v4;
        *(float *)&a4 = -a2;
        if (v10 || (*(float *)&a4 = a2, v14 > a2)) {
          *(unsigned char *)(*v13 + v12) = (int)*(float *)&a4;
        }
        ++v12;
      }
      while (v11 != v12);
      int v5 = *(_DWORD *)(result + 52);
      uint64_t v15 = (*(_DWORD *)(result + 48) * v5);
      if ((int)v15 >= 1)
      {
        uint64_t v16 = 0;
        uint64_t v17 = *(void **)(result + 320);
        do
        {
          LOBYTE(a4) = *(unsigned char *)(*v17 + v16);
          *(void *)&a4 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a4)).u64[0];
          float v18 = (float)SLODWORD(a4);
          BOOL v10 = (float)SLODWORD(a4) < v4;
          *(float *)&a4 = -a2;
          if (v10 || (*(float *)&a4 = a2, v18 > a2)) {
            *(unsigned char *)(*v17 + v16) = (int)*(float *)&a4;
          }
          ++v16;
        }
        while (v15 != v16);
        int v5 = *(_DWORD *)(result + 52);
      }
    }
  }
  if (v5)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *(void **)(result + 336);
    uint64_t v21 = (v5 * v5);
    do
    {
      LOBYTE(a4) = *(unsigned char *)(*v20 + v19);
      *(void *)&a4 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a4)).u64[0];
      float v22 = (float)SLODWORD(a4);
      BOOL v10 = (float)SLODWORD(a4) < v4;
      *(float *)&a4 = -a2;
      if (v10 || (*(float *)&a4 = a2, v22 > a2)) {
        *(unsigned char *)(*v20 + v19) = (int)*(float *)&a4;
      }
      ++v19;
    }
    while (v21 != v19);
    int v23 = *(_DWORD *)(result + 52);
    if (v23)
    {
      uint64_t v24 = 0;
      uint64_t v25 = *(void **)(result + 328);
      uint64_t v26 = (v23 * v23);
      do
      {
        LOBYTE(a4) = *(unsigned char *)(*v25 + v24);
        *(void *)&a4 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a4)).u64[0];
        float v27 = (float)SLODWORD(a4);
        BOOL v10 = (float)SLODWORD(a4) < v4;
        *(float *)&a4 = -a2;
        if (v10 || (*(float *)&a4 = a2, v27 > a2)) {
          *(unsigned char *)(*v25 + v24) = (int)*(float *)&a4;
        }
        ++v24;
      }
      while (v26 != v24);
      int v28 = *(_DWORD *)(result + 52);
      if (v28)
      {
        uint64_t v29 = 0;
        uint64_t v30 = *(void **)(result + 344);
        uint64_t v31 = (v28 * v28);
        do
        {
          LOBYTE(a4) = *(unsigned char *)(*v30 + v29);
          *(void *)&a4 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a4)).u64[0];
          float v32 = (float)SLODWORD(a4);
          BOOL v10 = (float)SLODWORD(a4) < v4;
          *(float *)&a4 = -a2;
          if (v10 || (*(float *)&a4 = a2, v32 > a2)) {
            *(unsigned char *)(*v30 + v29) = (int)*(float *)&a4;
          }
          ++v29;
        }
        while (v31 != v29);
      }
    }
  }
  return result;
}

uint64_t sub_19E20115C(uint64_t result, float a2, double a3)
{
  int v3 = *(_DWORD *)(result + 52);
  uint64_t v4 = (*(_DWORD *)(result + 48) * v3);
  if ((int)v4 >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = *(void **)(result + 312);
    do
    {
      LOBYTE(a3) = *(unsigned char *)(*v6 + v5);
      *(void *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
      *(float *)&a3 = (float)SLODWORD(a3) * a2;
      *(unsigned char *)(*v6 + v5++) = (int)*(float *)&a3;
    }
    while (v4 != v5);
    int v3 = *(_DWORD *)(result + 52);
    uint64_t v7 = (*(_DWORD *)(result + 48) * v3);
    if ((int)v7 >= 1)
    {
      uint64_t v8 = 0;
      float v9 = *(void **)(result + 312);
      do
      {
        LOBYTE(a3) = *(unsigned char *)(*v9 + v8);
        *(void *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
        *(float *)&a3 = (float)SLODWORD(a3) * a2;
        *(unsigned char *)(*v9 + v8++) = (int)*(float *)&a3;
      }
      while (v7 != v8);
      int v3 = *(_DWORD *)(result + 52);
      uint64_t v10 = (*(_DWORD *)(result + 48) * v3);
      if ((int)v10 >= 1)
      {
        uint64_t v11 = 0;
        uint64_t v12 = *(void **)(result + 320);
        do
        {
          LOBYTE(a3) = *(unsigned char *)(*v12 + v11);
          *(void *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
          *(float *)&a3 = (float)SLODWORD(a3) * a2;
          *(unsigned char *)(*v12 + v11++) = (int)*(float *)&a3;
        }
        while (v10 != v11);
        int v3 = *(_DWORD *)(result + 52);
      }
    }
  }
  if (v3)
  {
    uint64_t v13 = 0;
    float v14 = *(void **)(result + 336);
    uint64_t v15 = (v3 * v3);
    do
    {
      LOBYTE(a3) = *(unsigned char *)(*v14 + v13);
      *(void *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
      *(float *)&a3 = (float)SLODWORD(a3) * a2;
      *(unsigned char *)(*v14 + v13++) = (int)*(float *)&a3;
    }
    while (v15 != v13);
    int v16 = *(_DWORD *)(result + 52);
    if (v16)
    {
      uint64_t v17 = 0;
      float v18 = *(void **)(result + 328);
      uint64_t v19 = (v16 * v16);
      do
      {
        LOBYTE(a3) = *(unsigned char *)(*v18 + v17);
        *(void *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
        *(float *)&a3 = (float)SLODWORD(a3) * a2;
        *(unsigned char *)(*v18 + v17++) = (int)*(float *)&a3;
      }
      while (v19 != v17);
      int v20 = *(_DWORD *)(result + 52);
      if (v20)
      {
        uint64_t v21 = 0;
        float v22 = *(void **)(result + 344);
        uint64_t v23 = (v20 * v20);
        do
        {
          LOBYTE(a3) = *(unsigned char *)(*v22 + v21);
          *(void *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
          *(float *)&a3 = (float)SLODWORD(a3) * a2;
          *(unsigned char *)(*v22 + v21++) = (int)*(float *)&a3;
        }
        while (v23 != v21);
      }
    }
  }
  return result;
}

void sub_19E2012EC()
{
}

void sub_19E201594(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E2015A8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_19E2015BC(uint64_t a1, uint64_t *a2, int a3, int *a4)
{
  uint64_t v7 = *(int *)(a1 + 52);
  uint64_t v8 = *a2;
  *(_DWORD *)(v8 + 16 * *a4) = v7;
  uint64_t v9 = 8 * a3;
  memmove(**(void ***)(v8 + 16 * *a4 + 8), *(const void **)(*(void *)(a1 + 112) + v9), 4 * v7);
  uint64_t v10 = *a4;
  *a4 = v10 + 1;
  uint64_t v11 = *(int *)(a1 + 52);
  uint64_t v12 = *a2;
  *(_DWORD *)(*a2 + 16 * v10 + 16) = v11;
  uint64_t result = memmove(**(void ***)(v12 + 16 * *a4 + 8), *(const void **)(*(void *)(a1 + 88) + v9), 4 * v11);
  ++*a4;
  return result;
}

void *sub_19E20166C(uint64_t a1, void *a2, int a3, int *a4)
{
  uint64_t v7 = *(void *)(a1 + 112);
  uint64_t v8 = 8 * a3;
  uint64_t v9 = *a4;
  *a4 = v9 + 1;
  memmove(*(void **)(v7 + v8), **(const void ***)(*a2 + 16 * v9 + 8), 4 * *(int *)(a1 + 52));
  uint64_t v10 = *(void *)(a1 + 88);
  uint64_t v11 = *a4;
  *a4 = v11 + 1;
  size_t v12 = 4 * *(int *)(a1 + 52);
  uint64_t v13 = *(void **)(v10 + v8);
  float v14 = **(const void ***)(*a2 + 16 * v11 + 8);

  return memmove(v13, v14, v12);
}

void sub_19E20170C(uint64_t a1, void *a2, int *a3)
{
  uint64_t v5 = (int *)(*a2 + 16 * *a3);
  bzero(**((void ***)v5 + 1), 4 * *v5);
  uint64_t v6 = *a3;
  *a3 = v6 + 1;
  bzero(**(void ***)(*a2 + 16 * v6 + 24), 4 * *(int *)(*a2 + 16 * v6 + 16));
  ++*a3;
}

void sub_19E201784(void *a1)
{
  uint64_t v2 = a1[140];
  BYTE7(v14[2]) = 17;
  strcpy((char *)v14, "GRU before resetGRU before reset ");
  (*(void (**)(uint64_t, _OWORD *))(*(void *)v2 + 40))(v2, &v14[1]);
  if (SBYTE7(v14[2]) < 0) {
    operator delete(*(void **)&v14[1]);
  }
  uint64_t v3 = a1[141];
  BYTE7(v14[2]) = 17;
  strcpy((char *)&v14[2], " ");
  v14[1] = v14[0];
  (*(void (**)(uint64_t, _OWORD *))(*(void *)v3 + 40))(v3, &v14[1]);
  if (SBYTE7(v14[2]) < 0) {
    operator delete(*(void **)&v14[1]);
  }
  uint64_t v4 = a1[142];
  BYTE7(v14[2]) = 17;
  strcpy((char *)&v14[2], " ");
  v14[1] = v14[0];
  (*(void (**)(uint64_t, _OWORD *))(*(void *)v4 + 40))(v4, &v14[1]);
  if (SBYTE7(v14[2]) < 0) {
    operator delete(*(void **)&v14[1]);
  }
  uint64_t v5 = a1[143];
  BYTE7(v14[2]) = 17;
  strcpy((char *)&v14[2], " ");
  v14[1] = v14[0];
  (*(void (**)(uint64_t, _OWORD *))(*(void *)v5 + 40))(v5, &v14[1]);
  if (SBYTE7(v14[2]) < 0) {
    operator delete(*(void **)&v14[1]);
  }
  uint64_t v6 = a1[144];
  BYTE7(v14[2]) = 17;
  strcpy((char *)&v14[2], " ");
  v14[1] = v14[0];
  (*(void (**)(uint64_t, _OWORD *))(*(void *)v6 + 40))(v6, &v14[1]);
  if (SBYTE7(v14[2]) < 0) {
    operator delete(*(void **)&v14[1]);
  }
  uint64_t v7 = a1[145];
  BYTE7(v14[2]) = 17;
  strcpy((char *)&v14[2], " ");
  v14[1] = v14[0];
  (*(void (**)(uint64_t, _OWORD *))(*(void *)v7 + 40))(v7, &v14[1]);
  if (SBYTE7(v14[2]) < 0) {
    operator delete(*(void **)&v14[1]);
  }
  (*(void (**)(void))(*(void *)a1[140] + 16))(a1[140]);
  (*(void (**)(void))(*(void *)a1[141] + 16))(a1[141]);
  (*(void (**)(void))(*(void *)a1[142] + 16))(a1[142]);
  (*(void (**)(void))(*(void *)a1[143] + 16))(a1[143]);
  (*(void (**)(void))(*(void *)a1[144] + 16))(a1[144]);
  (*(void (**)(void))(*(void *)a1[145] + 16))(a1[145]);
  uint64_t v8 = a1[140];
  BYTE7(v14[2]) = 16;
  strcpy((char *)v14, "GRU AFTER reset GRU AFTER reset ");
  (*(void (**)(uint64_t, _OWORD *))(*(void *)v8 + 40))(v8, &v14[1]);
  if (SBYTE7(v14[2]) < 0) {
    operator delete(*(void **)&v14[1]);
  }
  uint64_t v9 = a1[141];
  BYTE7(v14[2]) = 16;
  v14[1] = v14[0];
  LOBYTE(v14[2]) = 0;
  (*(void (**)(uint64_t, _OWORD *))(*(void *)v9 + 40))(v9, &v14[1]);
  if (SBYTE7(v14[2]) < 0) {
    operator delete(*(void **)&v14[1]);
  }
  uint64_t v10 = a1[142];
  BYTE7(v14[2]) = 16;
  v14[1] = v14[0];
  LOBYTE(v14[2]) = 0;
  (*(void (**)(uint64_t, _OWORD *))(*(void *)v10 + 40))(v10, &v14[1]);
  if (SBYTE7(v14[2]) < 0) {
    operator delete(*(void **)&v14[1]);
  }
  uint64_t v11 = a1[143];
  BYTE7(v14[2]) = 16;
  v14[1] = v14[0];
  LOBYTE(v14[2]) = 0;
  (*(void (**)(uint64_t, _OWORD *))(*(void *)v11 + 40))(v11, &v14[1]);
  if (SBYTE7(v14[2]) < 0) {
    operator delete(*(void **)&v14[1]);
  }
  uint64_t v12 = a1[144];
  BYTE7(v14[2]) = 16;
  v14[1] = v14[0];
  LOBYTE(v14[2]) = 0;
  (*(void (**)(uint64_t, _OWORD *))(*(void *)v12 + 40))(v12, &v14[1]);
  if (SBYTE7(v14[2]) < 0) {
    operator delete(*(void **)&v14[1]);
  }
  uint64_t v13 = a1[145];
  BYTE7(v14[2]) = 16;
  v14[1] = v14[0];
  LOBYTE(v14[2]) = 0;
  (*(void (**)(uint64_t, _OWORD *))(*(void *)v13 + 40))(v13, &v14[1]);
  if (SBYTE7(v14[2]) < 0) {
    operator delete(*(void **)&v14[1]);
  }
}

void sub_19E201C94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E201CDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = **(void **)(a1 + 304);
  int v6 = *(_DWORD *)(a1 + 48);
  unsigned int v5 = *(_DWORD *)(a1 + 52);
  uint64_t v8 = *(void **)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  if ((unint64_t)v8 >= v7)
  {
    uint64_t v10 = *(void **)a2;
    uint64_t v11 = (uint64_t)v8 - *(void *)a2;
    unint64_t v12 = (v11 >> 4) + 1;
    if (v12 >> 60) {
      goto LABEL_74;
    }
    uint64_t v13 = v7 - (void)v10;
    if (v13 >> 3 > v12) {
      unint64_t v12 = v13 >> 3;
    }
    BOOL v14 = (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14) {
      unint64_t v15 = v12;
    }
    if (v15 >> 60) {
      goto LABEL_75;
    }
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (char *)operator new(16 * v15);
    float v18 = &v17[16 * (v11 >> 4)];
    *(void *)float v18 = v4;
    uint64_t v9 = v18 + 16;
    uint64_t v19 = &v17[v11];
    *((_DWORD *)v19 + 2) = v5;
    for (*((_DWORD *)v19 + 3) = v6; v8 != v10; *((void *)v18 + 1) = v8[1])
    {
      uint64_t v20 = *(v8 - 2);
      v8 -= 2;
      *((void *)v18 - 2) = v20;
      v18 -= 16;
    }
    *(void *)a2 = v18;
    *(void *)(a2 + 8) = v9;
    *(void *)(a2 + 16) = &v17[v16];
    if (v10)
    {
      operator delete(v10);
      int v6 = *(_DWORD *)(a1 + 48);
      unsigned int v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    void *v8 = v4;
    uint64_t v9 = v8 + 2;
    *((_DWORD *)v8 + 2) = v5;
    *((_DWORD *)v8 + 3) = v6;
  }
  *(void *)(a2 + 8) = v9;
  uint64_t v21 = **(void **)(a1 + 312);
  unint64_t v22 = *(void *)(a2 + 16);
  if ((unint64_t)v9 >= v22)
  {
    uint64_t v24 = *(void **)a2;
    uint64_t v25 = (uint64_t)v9 - *(void *)a2;
    unint64_t v26 = (v25 >> 4) + 1;
    if (v26 >> 60) {
      goto LABEL_74;
    }
    uint64_t v27 = v22 - (void)v24;
    if (v27 >> 3 > v26) {
      unint64_t v26 = v27 >> 3;
    }
    BOOL v14 = (unint64_t)v27 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v28 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14) {
      unint64_t v28 = v26;
    }
    if (v28 >> 60) {
      goto LABEL_75;
    }
    uint64_t v29 = 16 * v28;
    uint64_t v30 = (char *)operator new(16 * v28);
    uint64_t v31 = &v30[16 * (v25 >> 4)];
    *(void *)uint64_t v31 = v21;
    uint64_t v23 = v31 + 16;
    float v32 = &v30[v25];
    *((_DWORD *)v32 + 2) = v5;
    for (*((_DWORD *)v32 + 3) = v6; v9 != v24; *((void *)v31 + 1) = v9[1])
    {
      uint64_t v33 = *(v9 - 2);
      v9 -= 2;
      *((void *)v31 - 2) = v33;
      v31 -= 16;
    }
    *(void *)a2 = v31;
    *(void *)(a2 + 8) = v23;
    *(void *)(a2 + 16) = &v30[v29];
    if (v24)
    {
      operator delete(v24);
      int v6 = *(_DWORD *)(a1 + 48);
      unsigned int v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    *uint64_t v9 = v21;
    uint64_t v23 = v9 + 2;
    *((_DWORD *)v9 + 2) = v5;
    *((_DWORD *)v9 + 3) = v6;
  }
  *(void *)(a2 + 8) = v23;
  uint64_t v34 = **(void **)(a1 + 320);
  unint64_t v35 = *(void *)(a2 + 16);
  if ((unint64_t)v23 >= v35)
  {
    int32x4_t v37 = *(void **)a2;
    uint64_t v38 = (uint64_t)v23 - *(void *)a2;
    unint64_t v39 = (v38 >> 4) + 1;
    if (v39 >> 60) {
      goto LABEL_74;
    }
    uint64_t v40 = v35 - (void)v37;
    if (v40 >> 3 > v39) {
      unint64_t v39 = v40 >> 3;
    }
    BOOL v14 = (unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v41 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14) {
      unint64_t v41 = v39;
    }
    if (v41 >> 60) {
      goto LABEL_75;
    }
    uint64_t v42 = 16 * v41;
    int v43 = (char *)operator new(16 * v41);
    int v44 = &v43[16 * (v38 >> 4)];
    *(void *)int v44 = v34;
    int v36 = v44 + 16;
    int v45 = &v43[v38];
    *((_DWORD *)v45 + 2) = v5;
    for (*((_DWORD *)v45 + 3) = v6; v23 != v37; *((void *)v44 + 1) = v23[1])
    {
      uint64_t v46 = *(v23 - 2);
      v23 -= 2;
      *((void *)v44 - 2) = v46;
      v44 -= 16;
    }
    *(void *)a2 = v44;
    *(void *)(a2 + 8) = v36;
    *(void *)(a2 + 16) = &v43[v42];
    if (v37)
    {
      operator delete(v37);
      unsigned int v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    *uint64_t v23 = v34;
    int v36 = v23 + 2;
    *((_DWORD *)v23 + 2) = v5;
    *((_DWORD *)v23 + 3) = v6;
  }
  *(void *)(a2 + 8) = v36;
  uint64_t v47 = **(void **)(a1 + 328);
  unint64_t v48 = *(void *)(a2 + 16);
  if ((unint64_t)v36 >= v48)
  {
    int v50 = *(void **)a2;
    uint64_t v51 = (uint64_t)v36 - *(void *)a2;
    unint64_t v52 = (v51 >> 4) + 1;
    if (v52 >> 60) {
      goto LABEL_74;
    }
    uint64_t v53 = v48 - (void)v50;
    if (v53 >> 3 > v52) {
      unint64_t v52 = v53 >> 3;
    }
    BOOL v14 = (unint64_t)v53 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v54 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14) {
      unint64_t v54 = v52;
    }
    if (v54 >> 60) {
      goto LABEL_75;
    }
    uint64_t v55 = 16 * v54;
    uint64_t v56 = (char *)operator new(16 * v54);
    v57 = &v56[16 * (v51 >> 4)];
    *(void *)v57 = v47;
    int v49 = v57 + 16;
    for (*(int32x2_t *)&v56[v51 + 8] = vdup_n_s32(v5); v36 != v50; *((void *)v57 + 1) = v36[1])
    {
      uint64_t v58 = *(v36 - 2);
      v36 -= 2;
      *((void *)v57 - 2) = v58;
      v57 -= 16;
    }
    *(void *)a2 = v57;
    *(void *)(a2 + 8) = v49;
    *(void *)(a2 + 16) = &v56[v55];
    if (v50)
    {
      operator delete(v50);
      unsigned int v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    void *v36 = v47;
    int v49 = v36 + 2;
    *((_DWORD *)v36 + 2) = v5;
    *((_DWORD *)v36 + 3) = v5;
  }
  *(void *)(a2 + 8) = v49;
  uint64_t v59 = **(void **)(a1 + 336);
  unint64_t v60 = *(void *)(a2 + 16);
  if ((unint64_t)v49 < v60)
  {
    *int v49 = v59;
    int v61 = v49 + 2;
    *((_DWORD *)v49 + 2) = v5;
    *((_DWORD *)v49 + 3) = v5;
    goto LABEL_61;
  }
  int v62 = *(void **)a2;
  uint64_t v63 = (uint64_t)v49 - *(void *)a2;
  unint64_t v64 = (v63 >> 4) + 1;
  if (v64 >> 60) {
    goto LABEL_74;
  }
  uint64_t v65 = v60 - (void)v62;
  if (v65 >> 3 > v64) {
    unint64_t v64 = v65 >> 3;
  }
  BOOL v14 = (unint64_t)v65 >= 0x7FFFFFFFFFFFFFF0;
  unint64_t v66 = 0xFFFFFFFFFFFFFFFLL;
  if (!v14) {
    unint64_t v66 = v64;
  }
  if (v66 >> 60) {
LABEL_75:
  }
    sub_19E13C418();
  uint64_t v67 = 16 * v66;
  v68 = (char *)operator new(16 * v66);
  v69 = &v68[16 * (v63 >> 4)];
  *(void *)v69 = v59;
  int v61 = v69 + 16;
  for (*(int32x2_t *)&v68[v63 + 8] = vdup_n_s32(v5); v49 != v62; *((void *)v69 + 1) = v49[1])
  {
    uint64_t v70 = *(v49 - 2);
    v49 -= 2;
    *((void *)v69 - 2) = v70;
    v69 -= 16;
  }
  *(void *)a2 = v69;
  *(void *)(a2 + 8) = v61;
  *(void *)(a2 + 16) = &v68[v67];
  if (v62)
  {
    operator delete(v62);
    unsigned int v5 = *(_DWORD *)(a1 + 52);
  }
LABEL_61:
  *(void *)(a2 + 8) = v61;
  uint64_t v71 = **(void **)(a1 + 344);
  unint64_t v72 = *(void *)(a2 + 16);
  if ((unint64_t)v61 < v72)
  {
    *int v61 = v71;
    v73 = v61 + 2;
    *((_DWORD *)v61 + 2) = v5;
    *((_DWORD *)v61 + 3) = v5;
    goto LABEL_73;
  }
  v74 = *(void **)a2;
  uint64_t v75 = (uint64_t)v61 - *(void *)a2;
  unint64_t v76 = (v75 >> 4) + 1;
  if (v76 >> 60) {
LABEL_74:
  }
    sub_19E13D694();
  uint64_t v77 = v72 - (void)v74;
  if (v77 >> 3 > v76) {
    unint64_t v76 = v77 >> 3;
  }
  BOOL v14 = (unint64_t)v77 >= 0x7FFFFFFFFFFFFFF0;
  unint64_t v78 = 0xFFFFFFFFFFFFFFFLL;
  if (!v14) {
    unint64_t v78 = v76;
  }
  if (v78 >> 60) {
    goto LABEL_75;
  }
  uint64_t v79 = 16 * v78;
  v80 = (char *)operator new(16 * v78);
  v81 = &v80[16 * (v75 >> 4)];
  *(void *)v81 = v71;
  v73 = v81 + 16;
  for (*(int32x2_t *)&v80[v75 + 8] = vdup_n_s32(v5); v61 != v74; *((void *)v81 + 1) = v61[1])
  {
    uint64_t v82 = *(v61 - 2);
    v61 -= 2;
    *((void *)v81 - 2) = v82;
    v81 -= 16;
  }
  *(void *)a2 = v81;
  *(void *)(a2 + 8) = v73;
  *(void *)(a2 + 16) = &v80[v79];
  if (v74) {
    operator delete(v74);
  }
LABEL_73:
  *(void *)(a2 + 8) = v73;
}

uint64_t sub_19E2021D0(uint64_t result)
{
  *(unsigned char *)(result + 42) = 1;
  return result;
}

uint64_t sub_19E2021DC(uint64_t result)
{
  *(unsigned char *)(result + 42) = 0;
  return result;
}

void sub_19E2021E4(uint64_t a1)
{
}

void sub_19E20226C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E202288(void *a1)
{
  uint64_t v2 = a1[250];
  uint64_t v3 = a1[249];
  if (v2 == v3)
  {
    uint64_t v3 = a1[250];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      unsigned int v5 = *(void **)(v3 + 8 * v4);
      if (v5)
      {
        operator delete[](v5);
        uint64_t v2 = a1[250];
        uint64_t v3 = a1[249];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  uint64_t v6 = a1[253];
  uint64_t v7 = a1[252];
  if (v6 != v7)
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(void **)(v7 + 8 * v8);
      if (v9)
      {
        operator delete[](v9);
        uint64_t v6 = a1[253];
        uint64_t v7 = a1[252];
      }
      ++v8;
    }
    while (v8 < (v6 - v7) >> 3);
    a1[250] = a1[249];
    a1[253] = v7;
    uint64_t v10 = a1[102];
    uint64_t v11 = a1[101];
    if (v10 != v11) {
      goto LABEL_13;
    }
LABEL_18:
    uint64_t v11 = v10;
    goto LABEL_19;
  }
  a1[250] = v3;
  a1[253] = v6;
  uint64_t v10 = a1[102];
  uint64_t v11 = a1[101];
  if (v10 == v11) {
    goto LABEL_18;
  }
LABEL_13:
  unint64_t v12 = 0;
  do
  {
    uint64_t v13 = *(void **)(v11 + 8 * v12);
    if (v13)
    {
      operator delete[](v13);
      uint64_t v10 = a1[102];
      uint64_t v11 = a1[101];
    }
    ++v12;
  }
  while (v12 < (v10 - v11) >> 3);
LABEL_19:
  a1[102] = v11;
  BOOL v14 = (void *)a1[99];
  if (v14)
  {
    operator delete(v14);
    a1[99] = 0;
  }
  unint64_t v15 = (void *)a1[98];
  if (v15)
  {
    operator delete(v15);
    a1[98] = 0;
  }
  uint64_t v16 = a1[132];
  uint64_t v17 = a1[131];
  if (v16 == v17)
  {
    uint64_t v17 = a1[132];
  }
  else
  {
    unint64_t v18 = 0;
    do
    {
      uint64_t v19 = *(void **)(v17 + 8 * v18);
      if (v19)
      {
        operator delete[](v19);
        uint64_t v16 = a1[132];
        uint64_t v17 = a1[131];
      }
      ++v18;
    }
    while (v18 < (v16 - v17) >> 3);
  }
  a1[132] = v17;
  uint64_t v20 = (void *)a1[129];
  if (v20)
  {
    operator delete(v20);
    a1[129] = 0;
  }
  uint64_t v21 = (void *)a1[128];
  if (v21)
  {
    operator delete(v21);
    a1[128] = 0;
  }
  uint64_t v22 = a1[117];
  uint64_t v23 = a1[116];
  if (v22 == v23)
  {
    uint64_t v23 = a1[117];
  }
  else
  {
    unint64_t v24 = 0;
    do
    {
      uint64_t v25 = *(void **)(v23 + 8 * v24);
      if (v25)
      {
        operator delete[](v25);
        uint64_t v22 = a1[117];
        uint64_t v23 = a1[116];
      }
      ++v24;
    }
    while (v24 < (v22 - v23) >> 3);
  }
  a1[117] = v23;
  unint64_t v26 = (void *)a1[114];
  if (v26)
  {
    operator delete(v26);
    a1[114] = 0;
  }
  uint64_t v27 = (void *)a1[113];
  if (v27)
  {
    operator delete(v27);
    a1[113] = 0;
  }
}

uint64_t sub_19E20248C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_19E202494(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

uint64_t sub_19E2024A0(uint64_t result, float a2, double a3)
{
  uint64_t v3 = result;
  unsigned int v4 = *(_DWORD *)(result + 52);
  int v5 = (int)a2;
  if (*(int *)(result + 56) < 1)
  {
    uint64_t v6 = v4 * *(_DWORD *)(result + 48);
    if ((int)v6 >= 1)
    {
      uint64_t v7 = 0;
      float v8 = (float)v5;
      do
      {
        uint64_t v9 = *(void *)(result + 240);
        LOBYTE(a3) = *(unsigned char *)(v9 + v7);
        *(void *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
        *(float *)&a3 = (float)SLODWORD(a3) + (float)(*(float *)(*(void *)(result + 1072) + 4 * v7) * v8);
        *(unsigned char *)(v9 + v7++) = (int)*(float *)&a3;
      }
      while (v6 != v7);
      for (uint64_t i = 0; i != v6; ++i)
      {
        uint64_t v11 = *(void *)(result + 248);
        LOBYTE(a3) = *(unsigned char *)(v11 + i);
        *(void *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
        *(float *)&a3 = (float)SLODWORD(a3) + (float)(*(float *)(*(void *)(result + 1088) + 4 * i) * v8);
        *(unsigned char *)(v11 + i) = (int)*(float *)&a3;
      }
      for (uint64_t j = 0; j != v6; ++j)
      {
        uint64_t v13 = *(void *)(result + 232);
        LOBYTE(a3) = *(unsigned char *)(v13 + j);
        *(void *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
        *(float *)&a3 = (float)SLODWORD(a3) + (float)(*(float *)(*(void *)(result + 1080) + 4 * j) * v8);
        *(unsigned char *)(v13 + j) = (int)*(float *)&a3;
      }
    }
  }
  else
  {
    sub_19E1F4230(result + 712, (float)v5, result + 240, v4);
    sub_19E1F4230(v3 + 952, (float)v5, v3 + 248, *(_DWORD *)(v3 + 52));
    uint64_t result = sub_19E1F4230(v3 + 832, (float)v5, v3 + 232, *(_DWORD *)(v3 + 52));
  }
  if (v4)
  {
    uint64_t v14 = 0;
    uint64_t v15 = v4 * v4;
    float v16 = (float)v5;
    do
    {
      uint64_t v17 = *(void *)(v3 + 264);
      LOBYTE(a3) = *(unsigned char *)(v17 + v14);
      *(void *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
      *(float *)&a3 = (float)SLODWORD(a3) + (float)(*(float *)(*(void *)(v3 + 1096) + 4 * v14) * v16);
      *(unsigned char *)(v17 + v14++) = (int)*(float *)&a3;
    }
    while (v15 != v14);
    uint64_t v18 = 0;
    do
    {
      uint64_t v19 = *(void *)(v3 + 272);
      LOBYTE(a3) = *(unsigned char *)(v19 + v18);
      *(void *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
      *(float *)&a3 = (float)SLODWORD(a3) + (float)(*(float *)(*(void *)(v3 + 1112) + 4 * v18) * v16);
      *(unsigned char *)(v19 + v18++) = (int)*(float *)&a3;
    }
    while (v15 != v18);
    uint64_t v20 = 0;
    do
    {
      uint64_t v21 = *(void *)(v3 + 256);
      LOBYTE(a3) = *(unsigned char *)(v21 + v20);
      *(void *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
      *(float *)&a3 = (float)SLODWORD(a3) + (float)(*(float *)(*(void *)(v3 + 1104) + 4 * v20) * v16);
      *(unsigned char *)(v21 + v20++) = (int)*(float *)&a3;
    }
    while (v15 != v20);
  }
  return result;
}

void sub_19E202694(uint64_t a1, uint64_t a2, void *a3, void *a4, int a5)
{
  int v368 = a5 - 1;
  if (a5 >= 1)
  {
    v362 = (float **)(a1 + 704);
    v366 = (void **)(a1 + 1168);
    v364 = (void **)(a1 + 1184);
    uint64_t v6 = (float32x4_t **)(a1 + 1176);
    int v7 = a5 - 1;
    while (1)
    {
      int v9 = *(unsigned __int8 *)(a1 + 2040);
      if (*(unsigned char *)(a1 + 2040)) {
        int v10 = v368 - v7;
      }
      else {
        int v10 = v7;
      }
      if (*(unsigned char *)(a1 + 2040)) {
        BOOL v11 = v10 < v368;
      }
      else {
        BOOL v11 = v10 > 0;
      }
      if (*(unsigned char *)(a1 + 2040)) {
        BOOL v12 = v10 > 0;
      }
      else {
        BOOL v12 = v10 < v368;
      }
      int v13 = v10 - 1;
      if (*(unsigned char *)(a1 + 2040)) {
        int v14 = v10 + 1;
      }
      else {
        int v14 = v10 - 1;
      }
      int v365 = v14;
      memmove(*(void **)(*(void *)(a1 + 584) + 8 * v10), *(const void **)(*a4 + 8 * v10), 4 * *(int *)(a1 + 52));
      uint64_t v15 = 8 * v10;
      if (v12)
      {
        if (!v9) {
          int v13 = v10 + 1;
        }
        bzero(*(void **)(a1 + 704), 4 * *(int *)(a1 + 52));
        sub_19E1F4438(v362, (void *)(*(void *)(a1 + 608) + 8 * v13), *(void **)(a1 + 344), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 0.0);
        uint64_t v16 = *(void *)(a1 + 584);
        uint64_t v17 = *(void *)(a1 + 472);
        uint64_t v18 = *(int *)(a1 + 52);
        int v19 = (int)v18 / 8;
        if ((int)v18 >= 8)
        {
          uint64_t v20 = *(float32x4_t **)(v16 + 8 * v10);
          uint64_t v21 = *(float32x4_t **)(v17 + 8 * v13);
          int v22 = (int)v18 / 8;
          uint64_t v23 = *v362;
          do
          {
            float32x4_t v25 = *(float32x4_t *)v23;
            float32x4_t v24 = *(float32x4_t *)(v23 + 4);
            v23 += 8;
            float32x4_t v27 = *v21;
            float32x4_t v26 = v21[1];
            v21 += 2;
            float32x4_t v28 = vmlaq_f32(v20[1], v26, v24);
            *uint64_t v20 = vmlaq_f32(*v20, v27, v25);
            v20[1] = v28;
            v20 += 2;
            --v22;
          }
          while (v22);
        }
        int v29 = 8 * v19;
        if (8 * v19 < (int)v18)
        {
          uint64_t v30 = *(void *)(v17 + 8 * v13);
          uint64_t v31 = *v362;
          uint64_t v32 = *(void *)(v16 + 8 * v10);
          uint64_t v33 = v29;
          unint64_t v34 = v18 - v29;
          if (v34 < 8) {
            goto LABEL_39;
          }
          uint64_t v35 = 4 * v29;
          unint64_t v36 = v32 + 4 * v18;
          BOOL v37 = v32 + v35 >= (unint64_t)(v30 + 4 * v18) || v30 + 4 * v29 >= v36;
          BOOL v38 = !v37;
          if ((unint64_t)&v31[(unint64_t)v35 / 4] < v36 && v32 + v35 < (unint64_t)&v31[v18]) {
            goto LABEL_39;
          }
          if (v38) {
            goto LABEL_39;
          }
          uint64_t v40 = v34 - (v18 & 7) + v33;
          uint64_t v41 = v33 + (v18 & 7) - v18;
          uint64_t v42 = (float32x4_t *)(v32 + v35 + 16);
          int v43 = (float32x4_t *)&v31[(unint64_t)v35 / 4 + 4];
          int v44 = (float32x4_t *)(v30 + v35 + 16);
          do
          {
            float32x4_t v45 = vmlaq_f32(*v42, *v44, *v43);
            v42[-1] = vmlaq_f32(v42[-1], v44[-1], v43[-1]);
            float32x4_t *v42 = v45;
            v42 += 2;
            v43 += 2;
            v44 += 2;
            v41 += 8;
          }
          while (v41);
          uint64_t v33 = v40;
          if ((v18 & 7) != 0)
          {
LABEL_39:
            uint64_t v46 = v18 - v33;
            uint64_t v47 = (float *)(v32 + 4 * v33);
            unint64_t v48 = (float *)(v30 + 4 * v33);
            int v49 = &v31[v33];
            do
            {
              float v50 = *v49++;
              float v51 = v50;
              float v52 = *v48++;
              float *v47 = *v47 + (float)(v52 * v51);
              ++v47;
              --v46;
            }
            while (v46);
          }
        }
        sub_19E1F4438((float **)(*(void *)(a1 + 584) + v15), (void *)(*(void *)(a1 + 632) + 8 * v13), *(void **)(a1 + 328), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1.0);
        sub_19E1F4438((float **)(*(void *)(a1 + 584) + v15), (void *)(*(void *)(a1 + 656) + 8 * v13), *(void **)(a1 + 336), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1.0);
      }
      sub_19E1C7244(v366, (const void **)(*(void *)(a1 + 424) + v15), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 528));
      sub_19E1C7244(v364, (const void **)(*(void *)(a1 + 400) + v15), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 524));
      sub_19E1C7244((void **)(a1 + 1176), (const void **)(*(void *)(a1 + 376) + v15), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 520));
      bzero(*(void **)(*(void *)(a1 + 608) + 8 * v10), 4 * *(int *)(a1 + 52));
      uint64_t v53 = *(void *)(a1 + 608);
      uint64_t v54 = *(unsigned int *)(a1 + 52);
      uint64_t v55 = (int)v54;
      if ((int)v54 <= 0)
      {
        int v74 = -8 * (-(int)v54 >> 3);
        if (v74 >= (int)v55) {
          goto LABEL_61;
        }
LABEL_53:
        uint64_t v75 = *(void *)(v53 + 8 * v10);
        unint64_t v76 = (char *)*v366;
        unint64_t v77 = v74;
        unint64_t v78 = v55 - v74;
        if (v78 < 8) {
          goto LABEL_59;
        }
        unint64_t v79 = v75 + 4 * v74;
        unint64_t v80 = (unint64_t)&v76[4 * v74];
        if (v79 < (unint64_t)&v76[4 * v55] && v80 < v75 + 4 * v55) {
          goto LABEL_59;
        }
        unint64_t v81 = v78 - (v55 & 7) + v74;
        uint64_t v82 = v74 + (unint64_t)(v55 & 7) - v55;
        v83 = (float32x4_t *)(v79 + 16);
        v84 = (float32x4_t *)(v80 + 16);
        do
        {
          float32x4_t v85 = vmulq_f32(*v84, *v83);
          v83[-1] = vmulq_f32(v84[-1], v83[-1]);
          float32x4_t *v83 = v85;
          v83 += 2;
          v84 += 2;
          v82 += 8;
        }
        while (v82);
        unint64_t v77 = v81;
        if ((v55 & 7) != 0)
        {
LABEL_59:
          uint64_t v86 = v55 - v77;
          v87 = (float *)&v76[4 * v77];
          v88 = (float *)(v75 + 4 * v77);
          do
          {
            float v89 = *v87++;
            float *v88 = v89 * *v88;
            ++v88;
            --v86;
          }
          while (v86);
        }
        goto LABEL_61;
      }
      uint64_t v56 = *(float32x4_t **)(*(void *)(a1 + 584) + 8 * v10);
      v57 = *(float32x4_t **)(*(void *)(a1 + 448) + 8 * v10);
      unint64_t v58 = *(void *)(v53 + 8 * v10);
      if (v54 < 8) {
        break;
      }
      uint64_t v59 = 0;
      unint64_t v118 = v58 + 4 * v54;
      BOOL v120 = v58 < (unint64_t)v57->u64 + 4 * v54 && (unint64_t)v57 < v118;
      if ((unint64_t)v56 < v118 && v58 < (unint64_t)v56->u64 + 4 * v54) {
        goto LABEL_45;
      }
      if (v120) {
        goto LABEL_45;
      }
      uint64_t v59 = v54 & 0x7FFFFFF8;
      v122 = v56 + 1;
      v123 = v57 + 1;
      v124 = (float32x4_t *)(v58 + 16);
      uint64_t v125 = v54 & 0xFFFFFFF8;
      do
      {
        float32x4_t v126 = vaddq_f32(vmlsq_f32(*v122, *v122, *v123), *v124);
        v124[-1] = vaddq_f32(vmlsq_f32(v122[-1], v122[-1], v123[-1]), v124[-1]);
        float32x4_t *v124 = v126;
        v122 += 2;
        v123 += 2;
        v124 += 2;
        v125 -= 8;
      }
      while (v125);
      if (v59 != v54) {
        goto LABEL_45;
      }
LABEL_47:
      int v68 = (int)v54 / 8;
      if ((int)v54 > 7)
      {
        uint64_t v69 = 0;
        uint64_t v70 = (char *)*v366;
        do
        {
          uint64_t v71 = (float32x4_t *)(v58 + 32 * v69);
          unint64_t v72 = (float32x4_t *)&v70[32 * v69];
          float32x4_t v73 = vmulq_f32(v72[1], v71[1]);
          *uint64_t v71 = vmulq_f32(*v72, *v71);
          v71[1] = v73;
          ++v69;
        }
        while (v68 != v69);
      }
      int v74 = 8 * v68;
      if (8 * v68 < (int)v55) {
        goto LABEL_53;
      }
LABEL_61:
      uint64_t v90 = *(void *)(a1 + 632);
      if (!v11)
      {
        memmove(*(void **)(v90 + 8 * v10), *(const void **)(*(void *)(a1 + 496) + 8 * v10), 4 * *(int *)(a1 + 52));
        uint64_t v113 = *(void *)(a1 + 632);
        uint64_t v114 = *(unsigned int *)(a1 + 52);
        uint64_t v115 = (int)v114;
        if ((int)v114 <= 0)
        {
          v169 = (uint64_t *)(*(void *)(a1 + 584) + 8 * v10);
          int v170 = -(-(int)v114 >> 3);
        }
        else
        {
          v116 = *(float32x4_t **)(v113 + 8 * v10);
          if (v114 < 8)
          {
            uint64_t v117 = 0;
            goto LABEL_129;
          }
          uint64_t v117 = v114 & 0x7FFFFFF8;
          v176 = v116 + 1;
          uint64_t v177 = v114 & 0xFFFFFFF8;
          do
          {
            float32x4_t v178 = vnegq_f32(*v176);
            v176[-1] = vnegq_f32(v176[-1]);
            float32x4_t *v176 = v178;
            v176 += 2;
            v177 -= 8;
          }
          while (v177);
          if (v117 != v114)
          {
LABEL_129:
            uint64_t v179 = v114 - v117;
            v180 = &v116->f32[v117];
            do
            {
              float *v180 = -*v180;
              ++v180;
              --v179;
            }
            while (v179);
          }
          v169 = (uint64_t *)(*(void *)(a1 + 584) + 8 * v10);
          int v170 = (int)v114 / 8;
          if ((int)v114 > 7)
          {
            uint64_t v181 = 0;
            uint64_t v182 = *v169;
            do
            {
              v183 = &v116[2 * v181];
              v184 = (float32x4_t *)(v182 + 32 * v181);
              float32x4_t v185 = vmulq_f32(v183[1], v184[1]);
              float32x4_t *v183 = vmulq_f32(*v183, *v184);
              v183[1] = v185;
              ++v181;
            }
            while (v170 != v181);
          }
        }
        int v186 = 8 * v170;
        if (8 * v170 < (int)v115)
        {
          uint64_t v187 = *v169;
          uint64_t v188 = *(void *)(v113 + 8 * v10);
          unint64_t v189 = v186;
          unint64_t v190 = v115 - v186;
          if (v190 < 8) {
            goto LABEL_141;
          }
          unint64_t v191 = v188 + 4 * v186;
          unint64_t v192 = v187 + 4 * v186;
          if (v191 < v187 + 4 * v115 && v192 < v188 + 4 * v115) {
            goto LABEL_141;
          }
          unint64_t v193 = v190 - (v115 & 7) + v186;
          uint64_t v194 = v186 + (unint64_t)(v115 & 7) - v115;
          v195 = (float32x4_t *)(v192 + 16);
          v196 = (float32x4_t *)(v191 + 16);
          do
          {
            float32x4_t v197 = vmulq_f32(*v196, *v195);
            v196[-1] = vmulq_f32(v196[-1], v195[-1]);
            float32x4_t *v196 = v197;
            v195 += 2;
            v196 += 2;
            v194 += 8;
          }
          while (v194);
          unint64_t v189 = v193;
          if ((v115 & 7) != 0)
          {
LABEL_141:
            uint64_t v198 = v115 - v189;
            v199 = (float *)(v188 + 4 * v189);
            v200 = (float *)(v187 + 4 * v189);
            do
            {
              float v201 = *v200++;
              float *v199 = *v199 * v201;
              ++v199;
              --v198;
            }
            while (v198);
          }
        }
        uint64_t v202 = *(void *)(a1 + 632);
        uint64_t v203 = *(int *)(a1 + 52);
        int v204 = (int)v203 / 8;
        if ((int)v203 >= 8)
        {
          v205 = *(float32x4_t **)(v202 + 8 * v10);
          v206 = *v6;
          int v207 = (int)v203 / 8;
          do
          {
            float32x4_t v208 = *v206;
            float32x4_t v209 = v206[1];
            v206 += 2;
            float32x4_t v210 = vmulq_f32(v209, v205[1]);
            float32x4_t *v205 = vmulq_f32(v208, *v205);
            v205[1] = v210;
            v205 += 2;
            --v207;
          }
          while (v207);
        }
        int v211 = 8 * v204;
        if (8 * v204 < (int)v203)
        {
          uint64_t v212 = *(void *)(v202 + 8 * v10);
          v213 = *v6;
          unint64_t v214 = v211;
          unint64_t v215 = v203 - v211;
          if (v215 < 8) {
            goto LABEL_156;
          }
          unint64_t v216 = v212 + 4 * v211;
          unint64_t v217 = (unint64_t)&v213[v211 / 4u];
          if (v216 < (unint64_t)v213->u64 + 4 * v203 && v217 < v212 + 4 * v203) {
            goto LABEL_156;
          }
          unint64_t v219 = v215 - (v203 & 7) + v211;
          uint64_t v220 = v211 + (unint64_t)(v203 & 7) - v203;
          v221 = (float32x4_t *)(v216 + 16);
          v222 = (float32x4_t *)(v217 + 16);
          do
          {
            float32x4_t v223 = vmulq_f32(*v222, *v221);
            v221[-1] = vmulq_f32(v222[-1], v221[-1]);
            float32x4_t *v221 = v223;
            v221 += 2;
            v222 += 2;
            v220 += 8;
          }
          while (v220);
          unint64_t v214 = v219;
          if ((v203 & 7) != 0)
          {
LABEL_156:
            uint64_t v224 = v203 - v214;
            v225 = &v213->f32[v214];
            v226 = (float *)(v212 + 4 * v214);
            do
            {
              float v227 = *v225++;
              float *v226 = v227 * *v226;
              ++v226;
              --v224;
            }
            while (v224);
          }
        }
        goto LABEL_158;
      }
      uint64_t v91 = *(unsigned int *)(a1 + 52);
      uint64_t v92 = (int)v91;
      if ((int)v91 > 0)
      {
        v93 = *(float32x4_t **)(*(void *)(a1 + 112) + 8 * v365);
        v94 = *(float32x4_t **)(*(void *)(a1 + 496) + 8 * v10);
        v95 = *(float32x4_t **)(v90 + 8 * v10);
        if (v91 < 8)
        {
          uint64_t v96 = 0;
          goto LABEL_65;
        }
        uint64_t v96 = 0;
        if ((unint64_t)((char *)v95 - (char *)v93) < 0x20) {
          goto LABEL_65;
        }
        if ((unint64_t)((char *)v95 - (char *)v94) < 0x20) {
          goto LABEL_65;
        }
        uint64_t v96 = v91 & 0x7FFFFFF8;
        v171 = v93 + 1;
        v172 = v94 + 1;
        v173 = v95 + 1;
        uint64_t v174 = v91 & 0xFFFFFFF8;
        do
        {
          float32x4_t v175 = vsubq_f32(*v171, *v172);
          v173[-1] = vsubq_f32(v171[-1], v172[-1]);
          float32x4_t *v173 = v175;
          v171 += 2;
          v172 += 2;
          v173 += 2;
          v174 -= 8;
        }
        while (v174);
        if (v96 != v91)
        {
LABEL_65:
          uint64_t v97 = v91 - v96;
          uint64_t v98 = v96;
          v99 = &v95->f32[v96];
          v100 = &v94->f32[v98];
          v101 = &v93->f32[v98];
          do
          {
            float v102 = *v101++;
            float v103 = v102;
            float v104 = *v100++;
            *v99++ = v103 - v104;
            --v97;
          }
          while (v97);
        }
        v105 = (uint64_t *)(*(void *)(a1 + 584) + 8 * v10);
        int v106 = (int)v91 / 8;
        if ((int)v91 > 7)
        {
          uint64_t v107 = 0;
          uint64_t v108 = *v105;
          do
          {
            v109 = &v95[2 * v107];
            v110 = (float32x4_t *)(v108 + 32 * v107);
            float32x4_t v111 = vmulq_f32(v109[1], v110[1]);
            float32x4_t *v109 = vmulq_f32(*v109, *v110);
            v109[1] = v111;
            ++v107;
          }
          while (v106 != v107);
        }
        int v112 = 8 * v106;
        if (8 * v106 >= (int)v92) {
          goto LABEL_103;
        }
LABEL_92:
        uint64_t v127 = *v105;
        uint64_t v128 = *(void *)(v90 + 8 * v10);
        unint64_t v129 = v112;
        unint64_t v130 = v92 - v112;
        if (v130 < 8) {
          goto LABEL_101;
        }
        unint64_t v131 = v128 + 4 * v112;
        unint64_t v132 = v127 + 4 * v112;
        if (v131 < v127 + 4 * v92 && v132 < v128 + 4 * v92) {
          goto LABEL_101;
        }
        unint64_t v134 = v130 - (v92 & 7) + v112;
        uint64_t v135 = v112 + (unint64_t)(v92 & 7) - v92;
        v136 = (float32x4_t *)(v132 + 16);
        v137 = (float32x4_t *)(v131 + 16);
        do
        {
          float32x4_t v138 = vmulq_f32(*v137, *v136);
          v137[-1] = vmulq_f32(v137[-1], v136[-1]);
          float32x4_t *v137 = v138;
          v136 += 2;
          v137 += 2;
          v135 += 8;
        }
        while (v135);
        unint64_t v129 = v134;
        if ((v92 & 7) != 0)
        {
LABEL_101:
          uint64_t v139 = v92 - v129;
          v140 = (float *)(v128 + 4 * v129);
          v141 = (float *)(v127 + 4 * v129);
          do
          {
            float v142 = *v141++;
            float *v140 = *v140 * v142;
            ++v140;
            --v139;
          }
          while (v139);
        }
        goto LABEL_103;
      }
      v105 = (uint64_t *)(*(void *)(a1 + 584) + 8 * v10);
      int v112 = -8 * (-(int)v91 >> 3);
      if (v112 < (int)v92) {
        goto LABEL_92;
      }
LABEL_103:
      uint64_t v143 = *(void *)(a1 + 632);
      uint64_t v144 = *(int *)(a1 + 52);
      int v145 = (int)v144 / 8;
      if ((int)v144 >= 8)
      {
        v146 = *(float32x4_t **)(v143 + 8 * v10);
        v147 = *v6;
        int v148 = (int)v144 / 8;
        do
        {
          float32x4_t v149 = *v147;
          float32x4_t v150 = v147[1];
          v147 += 2;
          float32x4_t v151 = vmulq_f32(v150, v146[1]);
          float32x4_t *v146 = vmulq_f32(v149, *v146);
          v146[1] = v151;
          v146 += 2;
          --v148;
        }
        while (v148);
      }
      int v152 = 8 * v145;
      if (8 * v145 < (int)v144)
      {
        uint64_t v153 = *(void *)(v143 + 8 * v10);
        v154 = *v6;
        unint64_t v155 = v152;
        unint64_t v156 = v144 - v152;
        if (v156 < 8) {
          goto LABEL_116;
        }
        unint64_t v157 = v153 + 4 * v152;
        unint64_t v158 = (unint64_t)&v154[v152 / 4u];
        if (v157 < (unint64_t)v154->u64 + 4 * v144 && v158 < v153 + 4 * v144) {
          goto LABEL_116;
        }
        unint64_t v160 = v156 - (v144 & 7) + v152;
        uint64_t v161 = v152 + (unint64_t)(v144 & 7) - v144;
        v162 = (float32x4_t *)(v157 + 16);
        v163 = (float32x4_t *)(v158 + 16);
        do
        {
          float32x4_t v164 = vmulq_f32(*v163, *v162);
          v162[-1] = vmulq_f32(v163[-1], v162[-1]);
          float32x4_t *v162 = v164;
          v162 += 2;
          v163 += 2;
          v161 += 8;
        }
        while (v161);
        unint64_t v155 = v160;
        if ((v144 & 7) != 0)
        {
LABEL_116:
          uint64_t v165 = v144 - v155;
          v166 = &v154->f32[v155];
          v167 = (float *)(v153 + 4 * v155);
          do
          {
            float v168 = *v166++;
            float *v167 = v168 * *v167;
            ++v167;
            --v165;
          }
          while (v165);
        }
      }
LABEL_158:
      v228 = (float **)(*(void *)(a1 + 656) + 8 * v10);
      if (v11)
      {
        sub_19E1F4438(v228, (void *)(*(void *)(a1 + 608) + 8 * v10), *(void **)(a1 + 344), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 0.0);
        uint64_t v229 = *(void *)(a1 + 656);
        uint64_t v230 = *(void *)(a1 + 112);
        uint64_t v231 = *(int *)(a1 + 52);
        if ((int)v231 >= 8)
        {
          v232 = *(float32x4_t **)(v229 + 8 * v10);
          v233 = *(float32x4_t **)(v230 + 8 * v365);
          int v234 = (int)v231 / 8;
          do
          {
            float32x4_t v235 = *v233;
            float32x4_t v236 = v233[1];
            v233 += 2;
            float32x4_t v237 = vmulq_f32(v236, v232[1]);
            float32x4_t *v232 = vmulq_f32(v235, *v232);
            v232[1] = v237;
            v232 += 2;
            --v234;
          }
          while (v234);
        }
        int v238 = 8 * ((int)v231 / 8);
        if (v238 < (int)v231)
        {
          uint64_t v239 = *(void *)(v229 + 8 * v10);
          uint64_t v240 = *(void *)(v230 + 8 * v365);
          uint64_t v241 = v238;
          unint64_t v242 = v231 - v238;
          if (v242 < 8) {
            goto LABEL_172;
          }
          unint64_t v243 = v239 + 4 * v241;
          unint64_t v244 = v240 + 4 * v241;
          if (v243 < v240 + 4 * v231 && v244 < v239 + 4 * v231) {
            goto LABEL_172;
          }
          uint64_t v246 = v242 - (v231 & 7) + v241;
          uint64_t v247 = v241 + (v231 & 7) - v231;
          v248 = (float32x4_t *)(v243 + 16);
          v249 = (float32x4_t *)(v244 + 16);
          do
          {
            float32x4_t v250 = vmulq_f32(*v249, *v248);
            v248[-1] = vmulq_f32(v249[-1], v248[-1]);
            float32x4_t *v248 = v250;
            v248 += 2;
            v249 += 2;
            v247 += 8;
          }
          while (v247);
          uint64_t v241 = v246;
          if ((v231 & 7) != 0)
          {
LABEL_172:
            uint64_t v251 = v231 - v241;
            v252 = (float *)(v240 + 4 * v241);
            v253 = (float *)(v239 + 4 * v241);
            do
            {
              float v254 = *v252++;
              float *v253 = v254 * *v253;
              ++v253;
              --v251;
            }
            while (v251);
          }
        }
        uint64_t v255 = *(void *)(a1 + 656);
        uint64_t v256 = *(int *)(a1 + 52);
        int v257 = (int)v256 / 8;
        if ((int)v256 >= 8)
        {
          v258 = *(float32x4_t **)(v255 + 8 * v10);
          v259 = (float32x4_t *)*v364;
          int v260 = (int)v256 / 8;
          do
          {
            float32x4_t v261 = *v259;
            float32x4_t v262 = v259[1];
            v259 += 2;
            float32x4_t v263 = vmulq_f32(v262, v258[1]);
            float32x4_t *v258 = vmulq_f32(v261, *v258);
            v258[1] = v263;
            v258 += 2;
            --v260;
          }
          while (v260);
        }
        int v264 = 8 * v257;
        if (8 * v257 < (int)v256)
        {
          uint64_t v265 = *(void *)(v255 + 8 * v10);
          v266 = (char *)*v364;
          unint64_t v267 = v264;
          unint64_t v268 = v256 - v264;
          if (v268 < 8) {
            goto LABEL_187;
          }
          unint64_t v269 = v265 + 4 * v264;
          unint64_t v270 = (unint64_t)&v266[4 * v264];
          if (v269 < (unint64_t)&v266[4 * v256] && v270 < v265 + 4 * v256) {
            goto LABEL_187;
          }
          unint64_t v272 = v268 - (v256 & 7) + v264;
          uint64_t v273 = v264 + (unint64_t)(v256 & 7) - v256;
          v274 = (float32x4_t *)(v269 + 16);
          v275 = (float32x4_t *)(v270 + 16);
          do
          {
            float32x4_t v276 = vmulq_f32(*v275, *v274);
            v274[-1] = vmulq_f32(v275[-1], v274[-1]);
            float32x4_t *v274 = v276;
            v274 += 2;
            v275 += 2;
            v273 += 8;
          }
          while (v273);
          unint64_t v267 = v272;
          if ((v256 & 7) != 0)
          {
LABEL_187:
            uint64_t v277 = v256 - v267;
            v278 = (float *)&v266[4 * v267];
            v279 = (float *)(v265 + 4 * v267);
            do
            {
              float v280 = *v278++;
              float *v279 = v280 * *v279;
              ++v279;
              --v277;
            }
            while (v277);
          }
        }
      }
      else
      {
        bzero(*v228, 4 * *(int *)(a1 + 52));
      }
      if (((**(uint64_t (***)(uint64_t))a1)(a1) & 1) == 0)
      {
        bzero(*(void **)(*(void *)(a1 + 560) + 8 * v10), 4 * *(int *)(a1 + 48));
        sub_19E1F4438((float **)(*(void *)(a1 + 560) + v15), (void *)(*(void *)(a1 + 632) + v15), *(void **)(a1 + 304), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1.0);
        sub_19E1F4438((float **)(*(void *)(a1 + 560) + v15), (void *)(*(void *)(a1 + 608) + v15), *(void **)(a1 + 320), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1.0);
        sub_19E1F4438((float **)(*(void *)(a1 + 560) + v15), (void *)(*(void *)(a1 + 656) + v15), *(void **)(a1 + 312), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1.0);
      }
      if (v7-- <= 0) {
        goto LABEL_193;
      }
    }
    uint64_t v59 = 0;
LABEL_45:
    uint64_t v60 = v54 - v59;
    uint64_t v61 = v59;
    int v62 = (float *)(v58 + 4 * v59);
    uint64_t v63 = &v57->f32[v61];
    unint64_t v64 = &v56->f32[v61];
    do
    {
      float v65 = *v64++;
      float v66 = v65;
      float v67 = *v63++;
      *int v62 = (float)(v66 - (float)(v67 * v66)) + *v62;
      ++v62;
      --v60;
    }
    while (v60);
    goto LABEL_47;
  }
LABEL_193:
  if (*(int *)(a1 + 56) > 0)
  {
    *(_DWORD *)(a1 + 728) = 0;
    *(_DWORD *)(a1 + 968) = 0;
    *(_DWORD *)(a1 + 848) = 0;
  }
  if (a5 > 1)
  {
    int v281 = 1;
    int v282 = a5 - 2;
    do
    {
      if (*(unsigned char *)(a1 + 2040)) {
        int v283 = v282;
      }
      else {
        int v283 = v281;
      }
      if (*(unsigned char *)(a1 + 2040)) {
        int v284 = 1;
      }
      else {
        int v284 = -1;
      }
      int v285 = v283 + v284;
      if (*(unsigned char *)(a1 + 2040)) {
        int v286 = a5 - 2;
      }
      else {
        int v286 = 1;
      }
      BOOL v287 = v283 == v286;
      uint64_t v288 = 8 * v283;
      uint64_t v289 = 8 * v285;
      sub_19E1C7984(*(void *)(a1 + 64) + v288, *(void *)(a1 + 632) + v288, *(void *)(a1 + 112) + v289, (void **)(a1 + 1104), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v287);
      sub_19E1C7984(*(void *)(a1 + 64) + v288, *(void *)(a1 + 656) + v288, *(void *)(a1 + 112) + v289, (void **)(a1 + 1096), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v287);
      sub_19E1C7984(*(void *)(a1 + 64) + v288, *(void *)(a1 + 608) + v288, *(void *)(a1 + 112) + v289, (void **)(a1 + 1112), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v287);
      ++v281;
      --v282;
    }
    while (v282 != -1);
  }
  int v290 = a5;
  v291 = a3;
  if (a5 >= 1)
  {
    int v292 = 0;
    while (1)
    {
      if (*(unsigned char *)(a1 + 2040)) {
        int v296 = v368 - v292;
      }
      else {
        int v296 = v292;
      }
      if (*(unsigned char *)(a1 + 2040)) {
        int v297 = v368;
      }
      else {
        int v297 = 0;
      }
      if (v291[1] == *v291)
      {
        uint64_t v293 = *(void *)(a1 + 656);
LABEL_210:
        BOOL v294 = v296 == v297;
        uint64_t v295 = 8 * v296;
        sub_19E1C7984(*(void *)(a1 + 64) + v295, v293 + v295, *(void *)(a1 + 64) + v295, (void **)(a1 + 1072), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v294);
        sub_19E1C7984(*(void *)(a1 + 64) + v295, *(void *)(a1 + 632) + v295, *(void *)(a1 + 64) + v295, (void **)(a1 + 1080), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v294);
        sub_19E1C7984(*(void *)(a1 + 64) + v295, *(void *)(a1 + 608) + v295, *(void *)(a1 + 64) + v295, (void **)(a1 + 1088), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v294);
        goto LABEL_211;
      }
      uint64_t v293 = *(void *)(a1 + 656);
      if (*(int *)(a1 + 56) < 1) {
        goto LABEL_210;
      }
      int v367 = v292;
      uint64_t v298 = v296;
      uint64_t v299 = *(void *)(a1 + 208);
      uint64_t v300 = 24 * v296;
      v302 = *(unsigned char **)(v299 + v300);
      v301 = *(unsigned char **)(v299 + v300 + 8);
      size_t v303 = v301 - v302;
      if (v301 == v302) {
        break;
      }
      if ((v303 & 0x8000000000000000) != 0) {
        sub_19E13D694();
      }
      v304 = operator new(v301 - v302);
      memcpy(v304, v302, v303);
      uint64_t v305 = *(unsigned int *)(a1 + 52);
      if ((int)v305 >= 1) {
        goto LABEL_225;
      }
LABEL_232:
      if (*(int *)(a1 + 724) < 1)
      {
        ++*(_DWORD *)(a1 + 728);
        if (!v304) {
          goto LABEL_238;
        }
      }
      else
      {
        uint64_t v318 = 0;
        uint64_t v319 = *(void *)(a1 + 760);
        do
        {
          *(_DWORD *)(*(void *)(v319 + 24 * *(int *)(a1 + 728)) + 4 * v318) = *((_DWORD *)v304 + v318);
          ++v318;
        }
        while (v318 < *(int *)(a1 + 724));
        ++*(_DWORD *)(a1 + 728);
      }
      operator delete(v304);
      uint64_t v299 = *(void *)(a1 + 208);
LABEL_238:
      uint64_t v320 = *(void *)(a1 + 632);
      v321 = *(unsigned char **)(v299 + 24 * (int)v298);
      v322 = *(unsigned char **)(v299 + v300 + 8);
      size_t v323 = v322 - v321;
      if (v322 == v321)
      {
        v324 = 0;
        uint64_t v325 = *(unsigned int *)(a1 + 52);
        if ((int)v325 < 1) {
          goto LABEL_250;
        }
LABEL_243:
        uint64_t v326 = 0;
        uint64_t v327 = *(void *)(v320 + 8 * v298);
        uint64_t v328 = *(void *)(*(void *)(a1 + 856) + 8 * *(int *)(a1 + 848));
        if (v325 < 8) {
          goto LABEL_248;
        }
        if ((unint64_t)(v328 - v327) < 0x20) {
          goto LABEL_248;
        }
        uint64_t v326 = v325 & 0x7FFFFFF8;
        v329 = (long long *)(v327 + 16);
        v330 = (_OWORD *)(v328 + 16);
        uint64_t v331 = v325 & 0xFFFFFFF8;
        do
        {
          long long v332 = *v329;
          *(v330 - 1) = *(v329 - 1);
          _OWORD *v330 = v332;
          v329 += 2;
          v330 += 2;
          v331 -= 8;
        }
        while (v331);
        if (v326 != v325)
        {
LABEL_248:
          uint64_t v333 = v325 - v326;
          uint64_t v334 = 4 * v326;
          v335 = (_DWORD *)(v328 + 4 * v326);
          v336 = (int *)(v327 + v334);
          do
          {
            int v337 = *v336++;
            *v335++ = v337;
            --v333;
          }
          while (v333);
        }
        goto LABEL_250;
      }
      if ((v323 & 0x8000000000000000) != 0) {
        sub_19E13D694();
      }
      v324 = operator new(v322 - v321);
      memcpy(v324, v321, v323);
      uint64_t v325 = *(unsigned int *)(a1 + 52);
      if ((int)v325 >= 1) {
        goto LABEL_243;
      }
LABEL_250:
      if (*(int *)(a1 + 844) < 1)
      {
        ++*(_DWORD *)(a1 + 848);
        if (!v324) {
          goto LABEL_256;
        }
      }
      else
      {
        uint64_t v338 = 0;
        uint64_t v339 = *(void *)(a1 + 880);
        do
        {
          *(_DWORD *)(*(void *)(v339 + 24 * *(int *)(a1 + 848)) + 4 * v338) = *((_DWORD *)v324 + v338);
          ++v338;
        }
        while (v338 < *(int *)(a1 + 844));
        ++*(_DWORD *)(a1 + 848);
      }
      operator delete(v324);
      uint64_t v299 = *(void *)(a1 + 208);
LABEL_256:
      uint64_t v340 = *(void *)(a1 + 608);
      v341 = *(unsigned char **)(v299 + 24 * (int)v298);
      v342 = *(unsigned char **)(v299 + v300 + 8);
      size_t v343 = v342 - v341;
      if (v342 != v341)
      {
        if ((v343 & 0x8000000000000000) != 0) {
          sub_19E13D694();
        }
        v344 = operator new(v342 - v341);
        memcpy(v344, v341, v343);
        uint64_t v345 = *(unsigned int *)(a1 + 52);
        int v290 = a5;
        v291 = a3;
        int v292 = v367;
        if ((int)v345 < 1) {
          goto LABEL_268;
        }
LABEL_261:
        uint64_t v346 = 0;
        uint64_t v347 = *(void *)(v340 + 8 * v298);
        uint64_t v348 = *(void *)(*(void *)(a1 + 976) + 8 * *(int *)(a1 + 968));
        if (v345 < 8) {
          goto LABEL_266;
        }
        if ((unint64_t)(v348 - v347) < 0x20) {
          goto LABEL_266;
        }
        uint64_t v346 = v345 & 0x7FFFFFF8;
        v349 = (long long *)(v347 + 16);
        v350 = (_OWORD *)(v348 + 16);
        uint64_t v351 = v345 & 0xFFFFFFF8;
        do
        {
          long long v352 = *v349;
          *(v350 - 1) = *(v349 - 1);
          _OWORD *v350 = v352;
          v349 += 2;
          v350 += 2;
          v351 -= 8;
        }
        while (v351);
        if (v346 != v345)
        {
LABEL_266:
          uint64_t v353 = v345 - v346;
          uint64_t v354 = 4 * v346;
          v355 = (_DWORD *)(v348 + 4 * v346);
          v356 = (int *)(v347 + v354);
          do
          {
            int v357 = *v356++;
            *v355++ = v357;
            --v353;
          }
          while (v353);
        }
        goto LABEL_268;
      }
      v344 = 0;
      uint64_t v345 = *(unsigned int *)(a1 + 52);
      int v290 = a5;
      v291 = a3;
      int v292 = v367;
      if ((int)v345 >= 1) {
        goto LABEL_261;
      }
LABEL_268:
      if (*(int *)(a1 + 964) >= 1)
      {
        uint64_t v358 = 0;
        uint64_t v359 = *(void *)(a1 + 1000);
        do
        {
          *(_DWORD *)(*(void *)(v359 + 24 * *(int *)(a1 + 968)) + 4 * v358) = *((_DWORD *)v344 + v358);
          ++v358;
        }
        while (v358 < *(int *)(a1 + 964));
        ++*(_DWORD *)(a1 + 968);
LABEL_273:
        operator delete(v344);
        goto LABEL_211;
      }
      ++*(_DWORD *)(a1 + 968);
      if (v344) {
        goto LABEL_273;
      }
LABEL_211:
      if (++v292 == v290) {
        return;
      }
    }
    v304 = 0;
    uint64_t v305 = *(unsigned int *)(a1 + 52);
    if ((int)v305 < 1) {
      goto LABEL_232;
    }
LABEL_225:
    uint64_t v306 = 0;
    uint64_t v307 = *(void *)(v293 + 8 * v298);
    uint64_t v308 = *(void *)(*(void *)(a1 + 736) + 8 * *(int *)(a1 + 728));
    if (v305 < 8) {
      goto LABEL_230;
    }
    if ((unint64_t)(v308 - v307) < 0x20) {
      goto LABEL_230;
    }
    uint64_t v306 = v305 & 0x7FFFFFF8;
    v309 = (long long *)(v307 + 16);
    v310 = (_OWORD *)(v308 + 16);
    uint64_t v311 = v305 & 0xFFFFFFF8;
    do
    {
      long long v312 = *v309;
      *(v310 - 1) = *(v309 - 1);
      _OWORD *v310 = v312;
      v309 += 2;
      v310 += 2;
      v311 -= 8;
    }
    while (v311);
    if (v306 != v305)
    {
LABEL_230:
      uint64_t v313 = v305 - v306;
      uint64_t v314 = 4 * v306;
      v315 = (_DWORD *)(v308 + 4 * v306);
      v316 = (int *)(v307 + v314);
      do
      {
        int v317 = *v316++;
        *v315++ = v317;
        --v313;
      }
      while (v313);
    }
    goto LABEL_232;
  }
}

void sub_19E203AF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E203B40(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  a1[2040] = 1;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9458528, memory_order_acquire) & 1) == 0)
  {
    uint64_t v13 = a6;
    uint64_t v12 = a5;
    unsigned int v11 = a4;
    uint64_t v9 = a2;
    uint64_t v10 = a3;
    int v8 = __cxa_guard_acquire(&qword_1E9458528);
    a2 = v9;
    a3 = v10;
    a4 = v11;
    a5 = v12;
    a6 = v13;
    if (v8)
    {
      qword_1E9458510 = 0;
      *(void *)algn_1E9458518 = 0;
      qword_1E9458520 = 0;
      __cxa_atexit((void (*)(void *))sub_19E142EEC, &qword_1E9458510, &dword_19E138000);
      __cxa_guard_release(&qword_1E9458528);
      a2 = v9;
      a3 = v10;
      a4 = v11;
      a5 = v12;
      a6 = v13;
    }
  }
  uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 304))(a1, a2, a3, a4, a5, a6, &qword_1E9458510);
  a1[2040] = 0;
  return result;
}

uint64_t sub_19E203C38(unsigned char *a1)
{
  a1[2040] = 1;
  uint64_t result = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 296))(a1);
  a1[2040] = 0;
  return result;
}

char *sub_19E203C90(uint64_t a1, void *lpsrc)
{
  if (*(_DWORD *)(a1 + 1988) != 1) {
    sub_19E2F6320(1);
  }
  uint64_t result = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3DB0, 0);
  if (!result) {
    __cxa_bad_cast();
  }
  *(void *)(a1 + 304) = result + 232;
  *(void *)(a1 + 312) = result + 240;
  *(void *)(a1 + 320) = result + 248;
  *(void *)(a1 + 328) = result + 256;
  *(void *)(a1 + 336) = result + 264;
  *(void *)(a1 + 344) = result + 272;
  *(void *)(a1 + 352) = result + 280;
  *(void *)(a1 + 360) = result + 288;
  *(void *)(a1 + 368) = result + 296;
  return result;
}

void sub_19E203D4C(uint64_t a1, void *lpsrc)
{
  if (!*(_DWORD *)(a1 + 1988))
  {
    if (!__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3DB0, 0))__cxa_bad_cast(); {
    sub_19E2F6320(34);
    }
  }
  sub_19E2F6320(1);
}

void sub_19E203DC0()
{
}

void sub_19E203DD4()
{
}

void sub_19E203DEC(void *a1)
{
  unsigned int v1 = sub_19E20558C(a1);

  operator delete(v1);
}

void sub_19E203E14(uint64_t a1, void *a2, void *a3, int a4, uint64_t a5)
{
  if (a3[1] != *a3 && *(int *)(a1 + 56) >= 1)
  {
    int v8 = (**(uint64_t (***)(uint64_t))a1)(a1);
    unsigned int v9 = a4 & 0xFFFFFF;
    uint64_t v10 = *(void *)(a1 + 2048);
    if (!v10) {
      goto LABEL_7;
    }
LABEL_6:
    float v11 = *(float *)(v10 + 468);
    if (v11 > 0.0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  int v8 = 0;
  unsigned int v9 = a4 & 0xFFFFFF;
  uint64_t v10 = *(void *)(a1 + 2048);
  if (v10) {
    goto LABEL_6;
  }
LABEL_7:
  float v11 = 50.0;
LABEL_8:
  unsigned int v12 = a5 != 0;
  if (v9 > v12)
  {
    unsigned int v189 = v9;
    signed int v190 = v9 - 1;
    float v13 = -v11;
    int v186 = v8;
    while (1)
    {
      unsigned int v192 = v12;
      if (*(unsigned char *)(a1 + 2040)) {
        signed int v14 = v9 + ~v12;
      }
      else {
        signed int v14 = v12;
      }
      if (*(unsigned char *)(a1 + 2040)) {
        int v15 = 1;
      }
      else {
        int v15 = -1;
      }
      if (*(unsigned char *)(a1 + 2040)) {
        BOOL v16 = v14 < v190;
      }
      else {
        BOOL v16 = v14 > 0;
      }
      BOOL v195 = v16;
      memmove(*(void **)(*(void *)(a1 + 64) + 8 * v14), *(const void **)(*a2 + 8 * v14), 4 * *(int *)(a1 + 44));
      int v17 = *(unsigned __int8 *)(a1 + 40);
      if (*(unsigned char *)(a1 + 40)) {
        *(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 8 * v14) + 4 * *(int *)(a1 + 48) - 4) = 1065353216;
      }
      if (v8)
      {
        int v18 = *(_DWORD *)(a1 + 48);
        int v19 = *(_DWORD **)(*(void *)(a1 + 208) + 24 * v14);
        *int v19 = **(_DWORD **)(*a3 + 24 * v14);
        if (v17) {
          v19[1] = v18 - 1;
        }
      }
      uint64_t v20 = 8 * v14;
      bzero(*(void **)(*(void *)(a1 + 376) + v20), 4 * *(int *)(a1 + 52));
      bzero(*(void **)(*(void *)(a1 + 400) + v20), 4 * *(int *)(a1 + 52));
      bzero(*(void **)(*(void *)(a1 + 424) + v20), 4 * *(int *)(a1 + 52));
      uint64_t v21 = *(void *)(a1 + 2048);
      uint64_t v193 = v14;
      if (v21)
      {
        if (!*(unsigned char *)(v21 + 20))
        {
          int v173 = *(_DWORD *)(v21 + 40);
          if ((v173 == 4 || v173 == 2) && *(_DWORD *)(v21 + 44) == 3) {
            break;
          }
        }
      }
      uint64_t v22 = *(void *)(a1 + 376);
      uint64_t v23 = *(void *)(a1 + 64);
      float32x4_t v24 = *(uint64_t **)(a1 + 304);
      uint64_t v25 = *(void *)(a1 + 208) + 24 * v14;
      uint64_t v203 = 0;
      int v204 = 0;
      __p = 0;
      float32x4_t v27 = *(unsigned char **)v25;
      float32x4_t v26 = *(unsigned char **)(v25 + 8);
      int64_t v28 = v26 - v27;
      if (v26 != v27)
      {
        if (v28 < 0) {
          sub_19E13D694();
        }
        __p = operator new(v26 - v27);
        uint64_t v203 = __p;
        int v29 = (char *)__p + 4 * (v28 >> 2);
        int v204 = v29;
        memcpy(__p, v27, v28);
        uint64_t v203 = v29;
        int v8 = v186;
      }
      sub_19E205274(a1, v8, (float **)(v22 + v20), (void *)(v23 + v20), v24, (uint64_t)&__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1);
      uint64_t v30 = __p;
      uint64_t v31 = v14;
      char v32 = 0;
      if (__p)
      {
        uint64_t v203 = __p;
LABEL_32:
        operator delete(v30);
      }
      uint64_t v33 = *(void *)(a1 + 2048);
      if (!v33) {
        goto LABEL_35;
      }
LABEL_34:
      if (*(unsigned char *)(v33 + 244)) {
        goto LABEL_162;
      }
LABEL_35:
      int v34 = v14 + v15;
      uint64_t v35 = *(void *)(a1 + 376);
      int v36 = *(_DWORD *)(a1 + 52);
      BOOL v37 = v195;
      if (v195)
      {
        sub_19E1F4438((float **)(v35 + 8 * v31), (void *)(*(void *)(a1 + 112) + 8 * v34), *(void **)(a1 + 328), *(_DWORD *)(a1 + 52), v36, 1.0);
        uint64_t v35 = *(void *)(a1 + 376);
        int v36 = *(_DWORD *)(a1 + 52);
      }
      BOOL v38 = (const float **)(v35 + 8 * v31);
      if (v36 >= 1)
      {
        unint64_t v39 = (float *)*v38;
        uint64_t v40 = v36;
        do
        {
          float v41 = -v11;
          if (*v39 < v13 || (float v41 = v11, *v39 > v11)) {
            *unint64_t v39 = v41;
          }
          ++v39;
          --v40;
        }
        while (v40);
      }
      sub_19E1C7520((float **)(*(void *)(a1 + 448) + 8 * v31), v38, v36, *(_DWORD *)(a1 + 520));
      if ((v32 & 1) == 0)
      {
        char v187 = v32;
        int v42 = v34;
        uint64_t v43 = *(void *)(a1 + 400);
        uint64_t v44 = *(void *)(a1 + 64);
        float32x4_t v45 = *(uint64_t **)(a1 + 312);
        uint64_t v46 = *(void *)(a1 + 208) + 24 * (int)v31;
        v200 = 0;
        float v201 = 0;
        v199 = 0;
        unint64_t v48 = *(unsigned char **)v46;
        uint64_t v47 = *(unsigned char **)(v46 + 8);
        int64_t v49 = v47 - v48;
        if (v47 != v48)
        {
          if (v49 < 0) {
            sub_19E13D694();
          }
          v199 = operator new(v47 - v48);
          v200 = v199;
          float v50 = (char *)v199 + 4 * (v49 >> 2);
          float v201 = v50;
          memcpy(v199, v48, v49);
          v200 = v50;
          int v8 = v186;
        }
        sub_19E205274(a1, v8, (float **)(v43 + v20), (void *)(v44 + v20), v45, (uint64_t)&v199, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1);
        BOOL v37 = v195;
        int v34 = v42;
        char v32 = v187;
        uint64_t v31 = v193;
        if (v199)
        {
          v200 = v199;
          operator delete(v199);
        }
      }
      uint64_t v51 = *(void *)(a1 + 2048);
      if (v51 && *(unsigned char *)(v51 + 244)) {
        goto LABEL_162;
      }
      uint64_t v52 = *(void *)(a1 + 400);
      int v53 = *(_DWORD *)(a1 + 52);
      if (v37)
      {
        sub_19E1F4438((float **)(v52 + 8 * v31), (void *)(*(void *)(a1 + 112) + 8 * v34), *(void **)(a1 + 336), *(_DWORD *)(a1 + 52), v53, 1.0);
        uint64_t v52 = *(void *)(a1 + 400);
        int v53 = *(_DWORD *)(a1 + 52);
      }
      uint64_t v54 = (const float **)(v52 + 8 * v31);
      if (v53 >= 1)
      {
        uint64_t v55 = (float *)*v54;
        uint64_t v56 = v53;
        do
        {
          float v57 = -v11;
          if (*v55 < v13 || (float v57 = v11, *v55 > v11)) {
            *uint64_t v55 = v57;
          }
          ++v55;
          --v56;
        }
        while (v56);
      }
      sub_19E1C7520((float **)(*(void *)(a1 + 472) + v20), v54, v53, *(_DWORD *)(a1 + 524));
      bzero(*(void **)(*(void *)(a1 + 88) + v20), 4 * *(int *)(a1 + 52));
      if (v37)
      {
        uint64_t v58 = *(void *)(a1 + 88);
        uint64_t v59 = *(void *)(a1 + 112);
        uint64_t v60 = *(void *)(a1 + 472);
        uint64_t v61 = *(int *)(a1 + 52);
        if ((int)v61 >= 8)
        {
          int v62 = *(float32x4_t **)(v58 + v20);
          uint64_t v63 = *(float32x4_t **)(v60 + v20);
          int v64 = (int)v61 / 8;
          float v65 = *(float32x4_t **)(v59 + 8 * v34);
          do
          {
            float32x4_t v67 = *v65;
            float32x4_t v66 = v65[1];
            v65 += 2;
            float32x4_t v69 = *v63;
            float32x4_t v68 = v63[1];
            v63 += 2;
            float32x4_t v70 = vmlaq_f32(v62[1], v68, v66);
            *int v62 = vmlaq_f32(*v62, v69, v67);
            v62[1] = v70;
            v62 += 2;
            --v64;
          }
          while (v64);
        }
        int v71 = 8 * ((int)v61 / 8);
        if (v71 < (int)v61)
        {
          uint64_t v72 = *(void *)(v59 + 8 * v34);
          uint64_t v73 = *(void *)(v60 + v20);
          uint64_t v74 = *(void *)(v58 + v20);
          uint64_t v75 = v71;
          unint64_t v76 = v61 - v71;
          if (v76 < 8) {
            goto LABEL_82;
          }
          uint64_t v77 = 4 * v75;
          unint64_t v78 = v74 + 4 * v75;
          unint64_t v79 = v74 + 4 * v61;
          BOOL v80 = v78 >= v73 + 4 * v61 || v73 + 4 * v75 >= v79;
          BOOL v81 = !v80;
          if (v72 + 4 * v75 < v79 && v78 < v72 + 4 * v61) {
            goto LABEL_82;
          }
          if (v81) {
            goto LABEL_82;
          }
          uint64_t v83 = v76 - (v61 & 7) + v75;
          uint64_t v84 = v75 + (v61 & 7) - v61;
          float32x4_t v85 = (float32x4_t *)(v74 + v77 + 16);
          uint64_t v86 = (float32x4_t *)(v72 + v77 + 16);
          v87 = (float32x4_t *)(v73 + v77 + 16);
          do
          {
            float32x4_t v88 = vmlaq_f32(*v85, *v87, *v86);
            v85[-1] = vmlaq_f32(v85[-1], v87[-1], v86[-1]);
            *float32x4_t v85 = v88;
            v85 += 2;
            v86 += 2;
            v87 += 2;
            v84 += 8;
          }
          while (v84);
          uint64_t v75 = v83;
          if ((v61 & 7) != 0)
          {
LABEL_82:
            uint64_t v89 = v61 - v75;
            uint64_t v90 = (float *)(v74 + 4 * v75);
            uint64_t v91 = (float *)(v73 + 4 * v75);
            uint64_t v92 = (float *)(v72 + 4 * v75);
            do
            {
              float v93 = *v92++;
              float v94 = v93;
              float v95 = *v91++;
              *uint64_t v90 = *v90 + (float)(v95 * v94);
              ++v90;
              --v89;
            }
            while (v89);
          }
        }
      }
      int v96 = *(_DWORD *)(a1 + 52);
      if (v96 >= 1)
      {
        uint64_t v97 = *(float **)(*(void *)(a1 + 88) + 8 * v31);
        uint64_t v98 = *(unsigned int *)(a1 + 52);
        do
        {
          float v99 = -v11;
          if (*v97 < v13 || (float v99 = v11, *v97 > v11)) {
            *uint64_t v97 = v99;
          }
          ++v97;
          --v98;
        }
        while (v98);
      }
      if ((v32 & 1) == 0)
      {
        int v194 = v34;
        uint64_t v100 = *(void *)(a1 + 424);
        uint64_t v101 = *(void *)(a1 + 64);
        float v102 = *(uint64_t **)(a1 + 320);
        uint64_t v103 = *(void *)(a1 + 208) + 24 * (int)v31;
        float32x4_t v197 = 0;
        uint64_t v198 = 0;
        v196 = 0;
        v105 = *(unsigned char **)v103;
        float v104 = *(unsigned char **)(v103 + 8);
        int64_t v106 = v104 - v105;
        if (v104 != v105)
        {
          if (v106 < 0) {
            sub_19E13D694();
          }
          v196 = operator new(v104 - v105);
          float32x4_t v197 = v196;
          uint64_t v107 = (char *)v196 + 4 * (v106 >> 2);
          uint64_t v198 = v107;
          memcpy(v196, v105, v106);
          float32x4_t v197 = v107;
          BOOL v37 = v195;
        }
        sub_19E205274(a1, v8, (float **)(v100 + v20), (void *)(v101 + v20), v102, (uint64_t)&v196, v96, *(_DWORD *)(a1 + 48), 1);
        int v34 = v194;
        if (v196)
        {
          float32x4_t v197 = v196;
          operator delete(v196);
        }
      }
      uint64_t v108 = *(void *)(a1 + 2048);
      if (v108)
      {
        if (*(unsigned char *)(v108 + 244)) {
LABEL_162:
        }
          sub_19E2F6320(76);
      }
      sub_19E1F4438((float **)(*(void *)(a1 + 424) + v20), (void *)(*(void *)(a1 + 88) + v20), *(void **)(a1 + 344), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1.0);
      v109 = (const float **)(*(void *)(a1 + 424) + v20);
      int v110 = *(_DWORD *)(a1 + 52);
      if (v110 >= 1)
      {
        float32x4_t v111 = (float *)*v109;
        uint64_t v112 = *(unsigned int *)(a1 + 52);
        do
        {
          float v113 = -v11;
          if (*v111 < v13 || (float v113 = v11, *v111 > v11)) {
            *float32x4_t v111 = v113;
          }
          ++v111;
          --v112;
        }
        while (v112);
      }
      sub_19E1C7520((float **)(*(void *)(a1 + 496) + v20), v109, v110, *(_DWORD *)(a1 + 528));
      bzero(*(void **)(*(void *)(a1 + 112) + v20), 4 * *(int *)(a1 + 52));
      uint64_t v114 = *(void *)(a1 + 112);
      uint64_t v115 = *(void *)(a1 + 448);
      uint64_t v116 = *(unsigned int *)(a1 + 52);
      if ((int)v116 < 1) {
        goto LABEL_111;
      }
      uint64_t v117 = *(float32x4_t **)(*(void *)(a1 + 496) + v20);
      unint64_t v118 = *(float32x4_t **)(v115 + v20);
      unint64_t v119 = *(void *)(v114 + v20);
      if (v116 >= 8)
      {
        uint64_t v120 = 0;
        unint64_t v164 = v119 + 4 * v116;
        BOOL v166 = v119 < (unint64_t)v118->u64 + 4 * v116 && (unint64_t)v118 < v164;
        if (((unint64_t)v117 >= v164 || v119 >= (unint64_t)v117->u64 + 4 * v116) && !v166)
        {
          uint64_t v120 = v116 & 0x7FFFFFF8;
          float v168 = v117 + 1;
          v169 = v118 + 1;
          int v170 = (float32x4_t *)(v119 + 16);
          uint64_t v171 = v116 & 0xFFFFFFF8;
          do
          {
            float32x4_t v172 = vaddq_f32(vmlsq_f32(*v168, *v168, *v169), *v170);
            v170[-1] = vaddq_f32(vmlsq_f32(v168[-1], v168[-1], v169[-1]), v170[-1]);
            *int v170 = v172;
            v168 += 2;
            v169 += 2;
            v170 += 2;
            v171 -= 8;
          }
          while (v171);
          if (v120 == v116) {
            goto LABEL_111;
          }
        }
      }
      else
      {
        uint64_t v120 = 0;
      }
      uint64_t v121 = v116 - v120;
      uint64_t v122 = v120;
      v123 = (float *)(v119 + v122 * 4);
      v124 = &v118->f32[v122];
      uint64_t v125 = &v117->f32[v122];
      do
      {
        float v126 = *v125++;
        float v127 = v126;
        float v128 = *v124++;
        float *v123 = (float)(v127 - (float)(v128 * v127)) + *v123;
        ++v123;
        --v121;
      }
      while (v121);
LABEL_111:
      if (v37)
      {
        uint64_t v129 = (int)v116;
        if ((int)v116 >= 8)
        {
          unint64_t v130 = *(float32x4_t **)(v114 + v20);
          unint64_t v131 = *(float32x4_t **)(v114 + 8 * v34);
          int v132 = (int)v116 / 8;
          v133 = *(float32x4_t **)(v115 + v20);
          do
          {
            float32x4_t v135 = *v133;
            float32x4_t v134 = v133[1];
            v133 += 2;
            float32x4_t v137 = *v131;
            float32x4_t v136 = v131[1];
            v131 += 2;
            float32x4_t v138 = vmlaq_f32(v130[1], v136, v134);
            *unint64_t v130 = vmlaq_f32(*v130, v137, v135);
            v130[1] = v138;
            v130 += 2;
            --v132;
          }
          while (v132);
        }
        int v139 = 8 * ((int)v116 / 8);
        if (v139 < (int)v116)
        {
          uint64_t v140 = *(void *)(v115 + v20);
          uint64_t v141 = *(void *)(v114 + 8 * v34);
          uint64_t v142 = *(void *)(v114 + v20);
          uint64_t v143 = v139;
          unint64_t v144 = v129 - v139;
          if (v144 < 8) {
            goto LABEL_132;
          }
          uint64_t v145 = 4 * v143;
          unint64_t v146 = v142 + 4 * v143;
          unint64_t v147 = v142 + 4 * v129;
          BOOL v148 = v146 >= v141 + 4 * v129 || v141 + 4 * v143 >= v147;
          BOOL v149 = !v148;
          if (v140 + 4 * v143 < v147 && v146 < v140 + 4 * v129) {
            goto LABEL_132;
          }
          if (v149) {
            goto LABEL_132;
          }
          uint64_t v151 = v144 - (v129 & 7) + v143;
          uint64_t v152 = v143 + (v129 & 7) - v129;
          uint64_t v153 = (float32x4_t *)(v142 + v145 + 16);
          v154 = (float32x4_t *)(v140 + v145 + 16);
          unint64_t v155 = (float32x4_t *)(v141 + v145 + 16);
          do
          {
            float32x4_t v156 = vmlaq_f32(*v153, *v155, *v154);
            v153[-1] = vmlaq_f32(v153[-1], v155[-1], v154[-1]);
            *uint64_t v153 = v156;
            v153 += 2;
            v154 += 2;
            v155 += 2;
            v152 += 8;
          }
          while (v152);
          uint64_t v143 = v151;
          if ((v129 & 7) != 0)
          {
LABEL_132:
            uint64_t v157 = v129 - v143;
            unint64_t v158 = (float *)(v142 + 4 * v143);
            v159 = (float *)(v141 + 4 * v143);
            unint64_t v160 = (float *)(v140 + 4 * v143);
            do
            {
              float v161 = *v160++;
              float v162 = v161;
              float v163 = *v159++;
              *unint64_t v158 = *v158 + (float)(v163 * v162);
              ++v158;
              --v157;
            }
            while (v157);
          }
        }
      }
      unsigned int v12 = v192 + 1;
      unsigned int v9 = v189;
      if (v192 + 1 == v189) {
        return;
      }
    }
    uint64_t v174 = *(void *)(a1 + 376);
    uint64_t v175 = *(void *)(a1 + 400);
    uint64_t v176 = *(void *)(a1 + 424);
    uint64_t v177 = *(void *)(a1 + 64);
    float32x4_t v178 = *(void **)(a1 + 304);
    uint64_t v179 = *(void *)(a1 + 208) + 24 * v14;
    v206 = 0;
    int v207 = 0;
    v205 = 0;
    uint64_t v181 = *(unsigned char **)v179;
    v180 = *(unsigned char **)(v179 + 8);
    int64_t v182 = v180 - v181;
    if (v180 != v181)
    {
      uint64_t v184 = v174;
      uint64_t v188 = v175;
      if (v182 < 0) {
        sub_19E13D694();
      }
      v205 = (char *)operator new(v180 - v181);
      v206 = v205;
      v183 = &v205[4 * (v182 >> 2)];
      int v207 = v183;
      memcpy(v205, v181, v182);
      v206 = v183;
      uint64_t v175 = v188;
      uint64_t v174 = v184;
    }
    sub_19E2049B8(a1, 0, (float32x4_t **)(v174 + v20), (float32x4_t **)(v175 + v20), (float32x4_t **)(v176 + v20), (void *)(v177 + v20), v178, (uint64_t)&v205, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1);
    uint64_t v30 = v205;
    uint64_t v31 = v14;
    int v8 = v186;
    if (!v205)
    {
      char v32 = 1;
      uint64_t v33 = *(void *)(a1 + 2048);
      if (!v33) {
        goto LABEL_35;
      }
      goto LABEL_34;
    }
    v206 = v205;
    char v32 = 1;
    goto LABEL_32;
  }
}

void sub_19E20492C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  int v29 = *(void **)(v27 - 128);
  if (v29)
  {
    *(void *)(v27 - 120) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(exception_object);
}

float32x4_t sub_19E2049B8(uint64_t a1, int a2, float32x4_t **a3, float32x4_t **a4, float32x4_t **a5, void *a6, void *a7, uint64_t a8, int a9, int a10, char a11)
{
  if (a2) {
    sub_19E2F6320(545);
  }
  if (!*(void *)(a1 + 552)) {
    operator new[]();
  }
  int v15 = (float32x4_t **)(a1 + 552);
  sub_19E1F4438((float **)(a1 + 552), a6, a7, 3 * a9, a10, 0.0);
  if (!a11)
  {
    if (a9 < 1) {
      return result;
    }
    uint64_t v39 = 0;
    uint64_t v40 = *v15;
    float v41 = *a3;
    if (a9 < 8) {
      goto LABEL_24;
    }
    if ((unint64_t)((char *)v41 - (char *)v40) < 0x20) {
      goto LABEL_24;
    }
    uint64_t v39 = a9 & 0xFFFFFFF8;
    int v42 = v40 + 1;
    uint64_t v43 = v41 + 1;
    uint64_t v44 = v39;
    do
    {
      float32x4_t result = v42[-1];
      float32x4_t v45 = *v42;
      v43[-1] = result;
      float32x4_t *v43 = v45;
      v42 += 2;
      v43 += 2;
      v44 -= 8;
    }
    while (v44);
    if (v39 != a9)
    {
LABEL_24:
      uint64_t v46 = a9 - v39;
      uint64_t v47 = 4 * v39;
      unint64_t v48 = (__int32 *)((char *)v41 + v47);
      int64_t v49 = (__int32 *)((char *)v40 + v47);
      do
      {
        int v50 = *v49++;
        *v48++ = v50;
        --v46;
      }
      while (v46);
    }
    uint64_t v51 = *a4;
    if (a9 >= 8
      && (uint64_t v52 = (float32x4_t *)((char *)v40 + 4 * a9),
          (unint64_t)((char *)v51 - (char *)v52) >= 0x20))
    {
      uint64_t v53 = a9 & 0xFFFFFFF8;
      int v139 = v52 + 1;
      uint64_t v140 = v51 + 1;
      uint64_t v141 = v53;
      do
      {
        float32x4_t result = v139[-1];
        float32x4_t v142 = *v139;
        v140[-1] = result;
        float32x4_t *v140 = v142;
        v139 += 2;
        v140 += 2;
        v141 -= 8;
      }
      while (v141);
      if (v53 == a9)
      {
LABEL_31:
        uint64_t v58 = *a5;
        uint64_t v59 = 2 * a9;
        if (a9 >= 8
          && (uint64_t v60 = (float32x4_t *)((char *)v40 + 4 * v59), (unint64_t)((char *)v58 - (char *)v60) >= 0x20))
        {
          uint64_t v61 = a9 & 0xFFFFFFF8;
          uint64_t v143 = v60 + 1;
          unint64_t v144 = v58 + 1;
          uint64_t v145 = v61;
          do
          {
            float32x4_t result = v143[-1];
            float32x4_t v146 = *v143;
            v144[-1] = result;
            *unint64_t v144 = v146;
            v143 += 2;
            v144 += 2;
            v145 -= 8;
          }
          while (v145);
          if (v61 == a9) {
            return result;
          }
        }
        else
        {
          uint64_t v61 = 0;
        }
        uint64_t v62 = a9 - v61;
        uint64_t v63 = &v58->i32[v61];
        int v64 = &v40->i32[v61 + v59];
        do
        {
          __int32 v65 = *v64++;
          result.i32[0] = v65;
          *v63++ = v65;
          --v62;
        }
        while (v62);
        return result;
      }
    }
    else
    {
      uint64_t v53 = 0;
    }
    uint64_t v54 = a9 - v53;
    uint64_t v55 = &v51->i32[v53];
    uint64_t v56 = &v40->i32[v53 + a9];
    do
    {
      __int32 v57 = *v56++;
      *v55++ = v57;
      --v54;
    }
    while (v54);
    goto LABEL_31;
  }
  int v17 = (float **)(a1 + 536);
  if (a9 <= 0)
  {
    sub_19E1DF2C8(v17, "outvec0/gzx", a9);
    int v37 = 0;
    int v30 = -(-a9 >> 3);
    int v38 = -8 * (-a9 >> 3);
    if (v38 >= a9) {
      goto LABEL_48;
    }
  }
  else
  {
    uint64_t v18 = 0;
    int v19 = *v15;
    uint64_t v20 = *v17;
    if (a9 < 8) {
      goto LABEL_11;
    }
    if ((unint64_t)((char *)v20 - (char *)v19) < 0x20) {
      goto LABEL_11;
    }
    uint64_t v18 = a9 & 0x7FFFFFF8;
    uint64_t v21 = (long long *)&v19[1];
    uint64_t v22 = v20 + 4;
    uint64_t v23 = a9 & 0xFFFFFFF8;
    do
    {
      long long v24 = *v21;
      *(v22 - 1) = *(v21 - 1);
      _OWORD *v22 = v24;
      v21 += 2;
      v22 += 2;
      v23 -= 8;
    }
    while (v23);
    if (v18 != a9)
    {
LABEL_11:
      uint64_t v25 = a9 - v18;
      uint64_t v26 = v18;
      uint64_t v27 = &v20[v26];
      int64_t v28 = (int *)((char *)v19 + v26 * 4);
      do
      {
        int v29 = *v28++;
        *(_DWORD *)v27++ = v29;
        --v25;
      }
      while (v25);
    }
    sub_19E1DF2C8(v17, "outvec0/gzx", a9);
    int v30 = a9 >> 3;
    if (a9 <= 7)
    {
      int v37 = 0;
      int v38 = 8 * v30;
      if (8 * v30 >= a9) {
        goto LABEL_48;
      }
    }
    else
    {
      uint64_t v31 = 0;
      char v32 = *a3;
      uint64_t v33 = *v17;
      do
      {
        int v34 = &v32[2 * v31];
        uint64_t v35 = (float32x4_t *)&v33[8 * v31];
        float32x4_t v36 = vaddq_f32(v34[1], v35[1]);
        float32x4_t *v34 = vaddq_f32(*v34, *v35);
        v34[1] = v36;
        ++v31;
      }
      while (v30 != v31);
      int v37 = 1;
      int v38 = 8 * v30;
      if (8 * v30 >= a9) {
        goto LABEL_48;
      }
    }
  }
  float32x4_t v66 = *v17;
  float32x4_t v67 = *a3;
  uint64_t v68 = v38;
  unint64_t v69 = a9 - (uint64_t)v38;
  if (v69 < 8) {
    goto LABEL_46;
  }
  uint64_t v70 = v38;
  if ((char *)v67 + v70 * 4 < (char *)&v66[a9] && &v66[v70] < &v67->f32[a9]) {
    goto LABEL_46;
  }
  uint64_t v71 = v69 - (a9 & 7) + v38;
  uint64_t v72 = v38 + (a9 & 7) - a9;
  uint64_t v73 = v70 * 4 + 16;
  uint64_t v74 = (float32x4_t *)&v66[v70 + 4];
  uint64_t v75 = (float32x4_t *)((char *)v67 + v73);
  do
  {
    float32x4_t v76 = vaddq_f32(*v75, *v74);
    v75[-1] = vaddq_f32(v75[-1], v74[-1]);
    *uint64_t v75 = v76;
    v74 += 2;
    v75 += 2;
    v72 += 8;
  }
  while (v72);
  uint64_t v68 = v71;
  if ((a9 & 7) != 0)
  {
LABEL_46:
    uint64_t v77 = a9 - v68;
    unint64_t v78 = &v67->f32[v68];
    unint64_t v79 = &v66[v68];
    do
    {
      float v80 = *v79++;
      *unint64_t v78 = *v78 + v80;
      ++v78;
      --v77;
    }
    while (v77);
  }
LABEL_48:
  if (a9 < 1) {
    goto LABEL_54;
  }
  BOOL v81 = *v15;
  uint64_t v82 = *v17;
  if (a9 < 8 || (uint64_t v83 = (uint64_t)v81->i64 + 4 * a9, (unint64_t)v82 - v83 < 0x20))
  {
    uint64_t v84 = 0;
LABEL_52:
    uint64_t v85 = a9 - v84;
    uint64_t v86 = &v82[v84];
    v87 = &v81->i32[v84 + a9];
    do
    {
      int v88 = *v87++;
      *(_DWORD *)v86++ = v88;
      --v85;
    }
    while (v85);
    goto LABEL_54;
  }
  uint64_t v84 = a9 & 0xFFFFFFF8;
  unint64_t v147 = (long long *)(v83 + 16);
  BOOL v148 = v82 + 4;
  uint64_t v149 = v84;
  do
  {
    long long v150 = *v147;
    *(v148 - 1) = *(v147 - 1);
    *BOOL v148 = v150;
    v147 += 2;
    v148 += 2;
    v149 -= 8;
  }
  while (v149);
  if (v84 != a9) {
    goto LABEL_52;
  }
LABEL_54:
  sub_19E1DF2C8(v17, "outvec1/grx", a9);
  if (v37)
  {
    uint64_t v89 = *a4;
    uint64_t v90 = *v17;
    int v91 = v30;
    do
    {
      float32x4_t v92 = *(float32x4_t *)v90;
      float32x4_t v93 = *(float32x4_t *)(v90 + 4);
      v90 += 8;
      float32x4_t v94 = vaddq_f32(v89[1], v93);
      *uint64_t v89 = vaddq_f32(*v89, v92);
      v89[1] = v94;
      v89 += 2;
      --v91;
    }
    while (v91);
  }
  if (v38 < a9)
  {
    float v95 = *v17;
    int v96 = *a4;
    uint64_t v97 = v38;
    unint64_t v98 = a9 - (uint64_t)v38;
    if (v98 < 8) {
      goto LABEL_64;
    }
    uint64_t v99 = v38;
    if ((char *)v96 + v99 * 4 < (char *)&v95[a9] && &v95[v99] < &v96->f32[a9]) {
      goto LABEL_64;
    }
    uint64_t v100 = v98 - (a9 & 7) + v38;
    uint64_t v101 = v38 + (a9 & 7) - a9;
    uint64_t v102 = v99 * 4 + 16;
    uint64_t v103 = (float32x4_t *)&v95[v99 + 4];
    float v104 = (float32x4_t *)((char *)v96 + v102);
    do
    {
      float32x4_t v105 = vaddq_f32(*v104, *v103);
      v104[-1] = vaddq_f32(v104[-1], v103[-1]);
      *float v104 = v105;
      v103 += 2;
      v104 += 2;
      v101 += 8;
    }
    while (v101);
    uint64_t v97 = v100;
    if ((a9 & 7) != 0)
    {
LABEL_64:
      uint64_t v106 = a9 - v97;
      uint64_t v107 = &v96->f32[v97];
      uint64_t v108 = &v95[v97];
      do
      {
        float v109 = *v108++;
        *uint64_t v107 = *v107 + v109;
        ++v107;
        --v106;
      }
      while (v106);
    }
  }
  if (a9 < 1) {
    goto LABEL_72;
  }
  uint64_t v110 = (2 * a9);
  float32x4_t v111 = *v15;
  uint64_t v112 = *v17;
  if (a9 >= 8 && (uint64_t v113 = (uint64_t)v111->i64 + 4 * v110, (unint64_t)v112 - v113 >= 0x20))
  {
    uint64_t v114 = a9 & 0xFFFFFFF8;
    uint64_t v151 = (long long *)(v113 + 16);
    uint64_t v152 = v112 + 4;
    uint64_t v153 = v114;
    do
    {
      long long v154 = *v151;
      *(v152 - 1) = *(v151 - 1);
      *uint64_t v152 = v154;
      v151 += 2;
      v152 += 2;
      v153 -= 8;
    }
    while (v153);
    if (v114 == a9) {
      goto LABEL_72;
    }
  }
  else
  {
    uint64_t v114 = 0;
  }
  uint64_t v115 = a9 - v114;
  uint64_t v116 = &v112[v114];
  uint64_t v117 = &v111->i32[v114 + v110];
  do
  {
    int v118 = *v117++;
    *(_DWORD *)v116++ = v118;
    --v115;
  }
  while (v115);
LABEL_72:
  sub_19E1DF2C8(v17, "outvec2/gox", a9);
  if (v37)
  {
    unint64_t v119 = *a5;
    uint64_t v120 = *v17;
    do
    {
      float32x4_t v121 = *(float32x4_t *)v120;
      float32x4_t v122 = *(float32x4_t *)(v120 + 4);
      v120 += 8;
      float32x4_t v123 = vaddq_f32(v119[1], v122);
      float32x4_t result = vaddq_f32(*v119, v121);
      *unint64_t v119 = result;
      v119[1] = v123;
      v119 += 2;
      --v30;
    }
    while (v30);
  }
  if (v38 < a9)
  {
    v124 = *v17;
    uint64_t v125 = *a5;
    uint64_t v126 = v38;
    unint64_t v127 = a9 - (uint64_t)v38;
    if (v127 < 8) {
      goto LABEL_82;
    }
    uint64_t v128 = v38;
    if ((char *)v125 + v128 * 4 < (char *)&v124[a9] && &v124[v128] < &v125->f32[a9]) {
      goto LABEL_82;
    }
    uint64_t v129 = v127 - (a9 & 7) + v38;
    uint64_t v130 = v38 + (a9 & 7) - a9;
    uint64_t v131 = v128 * 4 + 16;
    int v132 = (float32x4_t *)&v124[v128 + 4];
    v133 = (float32x4_t *)((char *)v125 + v131);
    do
    {
      float32x4_t result = vaddq_f32(v133[-1], v132[-1]);
      float32x4_t v134 = vaddq_f32(*v133, *v132);
      v133[-1] = result;
      float32x4_t *v133 = v134;
      v132 += 2;
      v133 += 2;
      v130 += 8;
    }
    while (v130);
    uint64_t v126 = v129;
    if ((a9 & 7) != 0)
    {
LABEL_82:
      uint64_t v135 = a9 - v126;
      float32x4_t v136 = &v125->f32[v126];
      float32x4_t v137 = &v124[v126];
      do
      {
        float v138 = *v137++;
        result.f32[0] = *v136 + v138;
        *v136++ = result.f32[0];
        --v135;
      }
      while (v135);
    }
  }
  return result;
}

void sub_19E205274(uint64_t a1, int a2, float **a3, void *a4, uint64_t *a5, uint64_t a6, int a7, int a8, char a9)
{
  if (a9)
  {
    float v13 = (float **)(a1 + 536);
    if (a2)
    {
      __p = 0;
      uint64_t v46 = 0;
      uint64_t v47 = 0;
      int v15 = *(const void **)a6;
      uint64_t v14 = *(void *)(a6 + 8);
      int64_t v16 = v14 - *(void *)a6;
      if (v14 != *(void *)a6)
      {
        if (v16 < 0) {
          sub_19E13D694();
        }
        int v17 = (char *)operator new(v14 - *(void *)a6);
        uint64_t v18 = &v17[4 * (v16 >> 2)];
        __p = v17;
        uint64_t v47 = v18;
        memcpy(v17, v15, v16);
        uint64_t v46 = v18;
      }
      sub_19E1F5C80(v13, (int **)&__p, a5, a7, a8);
      if (__p)
      {
        uint64_t v46 = __p;
        operator delete(__p);
      }
      int v19 = a7 / 8;
      if (a7 < 8) {
        goto LABEL_19;
      }
    }
    else
    {
      sub_19E1F4438((float **)(a1 + 536), a4, a5, a7, a8, 0.0);
      int v19 = a7 / 8;
      if (a7 < 8)
      {
LABEL_19:
        int v31 = 8 * v19;
        if (8 * v19 < a7)
        {
          char v32 = *v13;
          uint64_t v33 = *a3;
          uint64_t v34 = v31;
          if ((unint64_t)(a7 - (uint64_t)v31) < 8) {
            goto LABEL_26;
          }
          uint64_t v35 = v31;
          if (&v33[v35] < &v32[a7] && &v32[v35] < &v33[a7]) {
            goto LABEL_26;
          }
          uint64_t v36 = v31 + (a7 & 7) - a7;
          uint64_t v37 = v35 * 4 + 16;
          int v38 = (float32x4_t *)&v32[v35 + 4];
          uint64_t v39 = (float32x4_t *)((char *)v33 + v37);
          do
          {
            float32x4_t v40 = vaddq_f32(*v39, *v38);
            v39[-1] = vaddq_f32(v39[-1], v38[-1]);
            *uint64_t v39 = v40;
            v38 += 2;
            v39 += 2;
            v36 += 8;
          }
          while (v36);
          uint64_t v34 = a7 - (a7 & 7);
          if ((a7 & 7) != 0)
          {
LABEL_26:
            uint64_t v41 = a7 - v34;
            int v42 = &v33[v34];
            uint64_t v43 = &v32[v34];
            do
            {
              float v44 = *v43++;
              float *v42 = *v42 + v44;
              ++v42;
              --v41;
            }
            while (v41);
          }
        }
        return;
      }
    }
    uint64_t v25 = (float32x4_t *)*a3;
    uint64_t v26 = *v13;
    int v27 = v19;
    do
    {
      float32x4_t v28 = *(float32x4_t *)v26;
      float32x4_t v29 = *(float32x4_t *)(v26 + 4);
      v26 += 8;
      float32x4_t v30 = vaddq_f32(v25[1], v29);
      float32x4_t *v25 = vaddq_f32(*v25, v28);
      v25[1] = v30;
      v25 += 2;
      --v27;
    }
    while (v27);
    goto LABEL_19;
  }
  if (a2)
  {
    unint64_t v48 = 0;
    int64_t v49 = 0;
    int v50 = 0;
    uint64_t v21 = *(const void **)a6;
    uint64_t v20 = *(void *)(a6 + 8);
    int64_t v22 = v20 - *(void *)a6;
    if (v20 != *(void *)a6)
    {
      if (v22 < 0) {
        sub_19E13D694();
      }
      uint64_t v23 = (char *)operator new(v20 - *(void *)a6);
      long long v24 = &v23[4 * (v22 >> 2)];
      unint64_t v48 = v23;
      int v50 = v24;
      memcpy(v23, v21, v22);
      int64_t v49 = v24;
    }
    sub_19E1F5C80(a3, (int **)&v48, a5, a7, a8);
    if (v48)
    {
      int64_t v49 = v48;
      operator delete(v48);
    }
  }
  else
  {
    sub_19E1F4438(a3, a4, a5, a7, a8, 0.0);
  }
}

void sub_19E205548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_19E20558C(void *a1)
{
  *a1 = &unk_1EF0A6240;
  sub_19E202288(a1);
  uint64_t v2 = (void *)a1[252];
  if (v2)
  {
    a1[253] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[249];
  if (v3)
  {
    a1[250] = v3;
    operator delete(v3);
  }
  sub_19E3030E8((uint64_t)(a1 + 239));
  sub_19E3030E8((uint64_t)(a1 + 230));
  sub_19E3030E8((uint64_t)(a1 + 221));
  sub_19E3030E8((uint64_t)(a1 + 212));
  sub_19E3030E8((uint64_t)(a1 + 203));
  sub_19E3030E8((uint64_t)(a1 + 194));
  sub_19E3030E8((uint64_t)(a1 + 185));
  sub_19E3030E8((uint64_t)(a1 + 176));
  sub_19E3030E8((uint64_t)(a1 + 167));
  sub_19E3030E8((uint64_t)(a1 + 158));
  sub_19E3030E8((uint64_t)(a1 + 149));
  sub_19E1C6038(a1 + 119);
  sub_19E1C6038(a1 + 104);
  sub_19E1C6038(a1 + 89);
  unsigned int v4 = (void *)a1[85];
  if (v4)
  {
    a1[86] = v4;
    operator delete(v4);
  }
  int v5 = (void *)a1[82];
  if (v5)
  {
    a1[83] = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)a1[79];
  if (v6)
  {
    a1[80] = v6;
    operator delete(v6);
  }
  int v7 = (void *)a1[76];
  if (v7)
  {
    a1[77] = v7;
    operator delete(v7);
  }
  int v8 = (void *)a1[73];
  if (v8)
  {
    a1[74] = v8;
    operator delete(v8);
  }
  unsigned int v9 = (void *)a1[70];
  if (v9)
  {
    a1[71] = v9;
    operator delete(v9);
  }
  uint64_t v10 = (void *)a1[62];
  if (v10)
  {
    a1[63] = v10;
    operator delete(v10);
  }
  float v11 = (void *)a1[59];
  if (v11)
  {
    a1[60] = v11;
    operator delete(v11);
  }
  unsigned int v12 = (void *)a1[56];
  if (v12)
  {
    a1[57] = v12;
    operator delete(v12);
  }
  float v13 = (void *)a1[53];
  if (v13)
  {
    a1[54] = v13;
    operator delete(v13);
  }
  uint64_t v14 = (void *)a1[50];
  if (v14)
  {
    a1[51] = v14;
    operator delete(v14);
  }
  int v15 = (void *)a1[47];
  if (v15)
  {
    a1[48] = v15;
    operator delete(v15);
  }
  uint64_t v16 = a1[26];
  if (v16)
  {
    uint64_t v17 = a1[27];
    uint64_t v18 = (void *)a1[26];
    if (v17 != v16)
    {
      uint64_t v19 = a1[27];
      do
      {
        uint64_t v21 = *(void **)(v19 - 24);
        v19 -= 24;
        uint64_t v20 = v21;
        if (v21)
        {
          *(void *)(v17 - 16) = v20;
          operator delete(v20);
        }
        uint64_t v17 = v19;
      }
      while (v19 != v16);
      uint64_t v18 = (void *)a1[26];
    }
    a1[27] = v16;
    operator delete(v18);
  }
  int64_t v22 = (void *)a1[23];
  if (v22)
  {
    a1[24] = v22;
    operator delete(v22);
  }
  uint64_t v23 = (void *)a1[20];
  if (v23)
  {
    a1[21] = v23;
    operator delete(v23);
  }
  long long v24 = (void *)a1[17];
  if (v24)
  {
    a1[18] = v24;
    operator delete(v24);
  }
  uint64_t v25 = (void *)a1[14];
  if (v25)
  {
    a1[15] = v25;
    operator delete(v25);
  }
  uint64_t v26 = (void *)a1[11];
  if (v26)
  {
    a1[12] = v26;
    operator delete(v26);
  }
  int v27 = (void *)a1[8];
  if (v27)
  {
    a1[9] = v27;
    operator delete(v27);
  }
  *a1 = &unk_1EF0A50F8;
  float32x4_t v28 = (void *)a1[1];
  if (v28)
  {
    a1[2] = v28;
    operator delete(v28);
  }
  return a1;
}

uint64_t sub_19E205800(uint64_t a1, int a2, uint64_t a3, float a4)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF0A5D08;
  *(_DWORD *)(a1 + 44) = a2;
  *(float *)(a1 + 48) = a4;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)a3;
  long long v5 = *(_OWORD *)(a3 + 16);
  long long v6 = *(_OWORD *)(a3 + 32);
  long long v7 = *(_OWORD *)(a3 + 48);
  *(void *)(a1 + 120) = *(void *)(a3 + 64);
  *(_OWORD *)(a1 + 104) = v7;
  *(_OWORD *)(a1 + 88) = v6;
  *(_OWORD *)(a1 + 72) = v5;
  *(_OWORD *)(a1 + 168) = 0u;
  uint64_t v16 = (void **)(a1 + 168);
  int v15 = (void **)(a1 + 192);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  sub_19E3030A0(a1 + 216);
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(unsigned char *)(a1 + 41) = 0;
  int v8 = dword_1E9457D98;
  unint64_t v9 = dword_1E9457D98;
  uint64_t v10 = *(void *)(a1 + 168);
  unint64_t v11 = (*(void *)(a1 + 176) - v10) >> 3;
  if (dword_1E9457D98 <= v11)
  {
    if (dword_1E9457D98 < v11) {
      *(void *)(a1 + 176) = v10 + 8 * dword_1E9457D98;
    }
  }
  else
  {
    sub_19E1599BC(v16, dword_1E9457D98 - v11);
    int v8 = dword_1E9457D98;
    unint64_t v9 = dword_1E9457D98;
  }
  uint64_t v12 = *(void *)(a1 + 192);
  unint64_t v13 = (*(void *)(a1 + 200) - v12) >> 3;
  if (v9 <= v13)
  {
    if (v9 < v13) {
      *(void *)(a1 + 200) = v12 + 8 * v9;
    }
  }
  else
  {
    sub_19E1599BC(v15, v9 - v13);
    int v8 = dword_1E9457D98;
  }
  *(_WORD *)(a1 + 160) = *(_WORD *)(a1 + 101);
  if (v8 >= 1) {
    operator new[]();
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 200))(a1);
  return a1;
}

void sub_19E205D44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, void **a13, uint64_t a14)
{
  uint64_t v16 = *a12;
  if (*a12)
  {
    v14[25] = v16;
    operator delete(v16);
    uint64_t v17 = *a13;
    if (!*a13)
    {
LABEL_3:
      *uint64_t v14 = a11;
      uint64_t v18 = (void *)v14[1];
      if (!v18) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v17 = *a13;
    if (!*a13) {
      goto LABEL_3;
    }
  }
  v14[22] = v17;
  operator delete(v17);
  *uint64_t v14 = a11;
  uint64_t v18 = (void *)v14[1];
  if (!v18) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  v14[2] = v18;
  operator delete(v18);
  _Unwind_Resume(exception_object);
}

void sub_19E205DF0()
{
}

uint64_t sub_19E205E04(uint64_t a1)
{
  return a1 + 168;
}

uint64_t sub_19E205E0C(uint64_t a1)
{
  return a1 + 192;
}

void sub_19E205E14()
{
}

void sub_19E205E28()
{
}

uint64_t sub_19E205E3C()
{
  return 0;
}

unsigned char *sub_19E205E44(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(int *)(a2 + 72);
  long long v7 = (int *)(*(void *)a2 + v6);
  if ((unint64_t)v7 <= *(void *)a2 + *(void *)(a2 + 8) - 4)
  {
    int v8 = *v7;
    *(_DWORD *)(a2 + 72) = v6 + 4;
  }
  else
  {
    int v8 = 0;
  }
  if (*(_DWORD *)(a1 + 44) != v8) {
    sub_19E2F6320(3);
  }
  int v9 = *a3;
  int v10 = *(unsigned __int8 *)(a1 + 161);
  int v11 = sub_19E2F6300();
  sub_19E1C6130((unsigned char *)(a1 + 128), (uint64_t *)a2, v9, v10, v11, *(_DWORD *)(a1 + 44));
  int v12 = *a3;
  int v13 = *(unsigned __int8 *)(a1 + 161);
  int v14 = sub_19E2F6300();
  sub_19E1C6130((unsigned char *)(a1 + 136), (uint64_t *)a2, v12, v13, v14, *(_DWORD *)(a1 + 44));
  int v15 = *a3;
  int v16 = *(unsigned __int8 *)(a1 + 161);
  int v17 = sub_19E2F6300();
  sub_19E1C6130((unsigned char *)(a1 + 144), (uint64_t *)a2, v15, v16, v17, *(_DWORD *)(a1 + 44));
  int v18 = *a3;
  int v19 = *(unsigned __int8 *)(a1 + 161);
  int v20 = sub_19E2F6300();
  int v21 = *(_DWORD *)(a1 + 44);

  return sub_19E1C6130((unsigned char *)(a1 + 152), (uint64_t *)a2, v18, v19, v20, v21);
}

uint64_t sub_19E205F8C(uint64_t a1, FILE *__stream, int *a3, uint64_t a4, unsigned int a5)
{
  sub_19E2F6788(__stream, a3, *(_DWORD *)(a1 + 44));
  int v9 = sub_19E2F6300();
  sub_19E1E0BD4(a1 + 128, __stream, a3, 3, v9, a5);
  int v10 = sub_19E2F6300();
  sub_19E1E0BD4(a1 + 136, __stream, a3, 3, v10, a5);
  int v11 = sub_19E2F6300();
  sub_19E1E0BD4(a1 + 144, __stream, a3, 3, v11, a5);
  int v12 = sub_19E2F6300();

  return sub_19E1E0BD4(a1 + 152, __stream, a3, 3, v12, a5);
}

void sub_19E2060CC(uint64_t a1)
{
  __p = (char *)operator new(0x28uLL);
  strcpy(__p, "BatchNormalization, from allocAll");
  sub_19E1E105C(a1);
  operator delete(__p);
}

void sub_19E206160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E20617C(void *a1)
{
  uint64_t v3 = a1[36];
  uint64_t v2 = a1[37];
  if (v2 == v3)
  {
    uint64_t v3 = a1[37];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      long long v5 = *(void **)(v3 + 8 * v4);
      if (v5)
      {
        operator delete[](v5);
        uint64_t v3 = a1[36];
        uint64_t v2 = a1[37];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  a1[37] = v3;
  a1[22] = a1[21];
  a1[25] = a1[24];
}

uint64_t sub_19E2061EC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t sub_19E2061F4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

void sub_19E206204()
{
}

int *sub_19E206218(int *result, void *a2, uint64_t a3, int a4)
{
  uint64_t v4 = a4 & 0xFFFFFF;
  if ((a4 & 0xFFFFFF) != 0)
  {
    uint64_t v6 = result;
    for (uint64_t i = 0; i != v4; ++i)
    {
      memmove(*(void **)(*((void *)v6 + 21) + 8 * i), *(const void **)(*a2 + 8 * i), 4 * v6[11]);
      uint64_t v9 = v6[11];
      int v10 = *(float32x4_t **)(*((void *)v6 + 21) + 8 * i);
      if ((int)v9 >= 1)
      {
        v8.i32[0] = v6[12];
        int v11 = (float32x4_t *)*((void *)v6 + 16);
        int v12 = (float32x4_t *)*((void *)v6 + 17);
        int v13 = (float32x4_t *)*((void *)v6 + 18);
        int v14 = (float32x4_t *)*((void *)v6 + 19);
        if (v9 >= 8)
        {
          uint64_t v15 = 0;
          int v16 = (float32x4_t *)((char *)v10 + 4 * v9);
          BOOL v18 = v10 < (float32x4_t *)&v12->f32[v9] && v12 < v16;
          BOOL v20 = v10 < (float32x4_t *)&v13->f32[v9] && v13 < v16;
          BOOL v22 = v10 < (float32x4_t *)&v14->f32[v9] && v14 < v16;
          if ((v11 >= v16 || v10 >= (float32x4_t *)&v11->f32[v9]) && !v18 && !v20 && !v22)
          {
            uint64_t v15 = v9 & 0x7FFFFFF8;
            long long v24 = v11 + 1;
            uint64_t v25 = v10 + 1;
            float32x4_t v26 = (float32x4_t)vdupq_lane_s32(v8, 0);
            int v27 = v12 + 1;
            float32x4_t v28 = v14 + 1;
            float32x4_t v29 = v13 + 1;
            uint64_t v30 = v9 & 0xFFFFFFF8;
            do
            {
              float32x4_t v31 = vaddq_f32(vdivq_f32(vmulq_f32(vsubq_f32(*v25, *v24), *v29), vsqrtq_f32(vaddq_f32(*v27, v26))), *v28);
              v25[-1] = vaddq_f32(vdivq_f32(vmulq_f32(vsubq_f32(v25[-1], v24[-1]), v29[-1]), vsqrtq_f32(vaddq_f32(v27[-1], v26))), v28[-1]);
              float32x4_t *v25 = v31;
              v24 += 2;
              v25 += 2;
              v27 += 2;
              v28 += 2;
              v29 += 2;
              v30 -= 8;
            }
            while (v30);
            if (v15 == v9) {
              goto LABEL_3;
            }
          }
        }
        else
        {
          uint64_t v15 = 0;
        }
        uint64_t v32 = v9 - v15;
        uint64_t v33 = v15;
        uint64_t v34 = &v10->f32[v15];
        uint64_t v35 = &v14->f32[v33];
        uint64_t v36 = &v13->f32[v33];
        uint64_t v37 = &v12->f32[v33];
        int v38 = &v11->f32[v33];
        do
        {
          float v39 = *v38++;
          float v40 = v39;
          float v41 = *v37++;
          float v42 = sqrtf(v41 + *(float *)v8.i32);
          float v43 = *v36++;
          float v44 = v43;
          float v45 = *v35++;
          float *v34 = (float)((float)((float)(*v34 - v40) * v44) / v42) + v45;
          ++v34;
          --v32;
        }
        while (v32);
      }
LABEL_3:
      float32x4_t result = (int *)memmove(*(void **)(*((void *)v6 + 24) + 8 * i), v10, 4 * (int)v9);
    }
  }
  return result;
}

void *sub_19E206408(void *a1, void *lpsrc)
{
  float32x4_t result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3D18, 0);
  if (!result) {
    __cxa_bad_cast();
  }
  a1[18] = result[18];
  a1[19] = result[19];
  a1[16] = result[16];
  a1[17] = result[17];
  return result;
}

void sub_19E20649C()
{
}

void sub_19E2064B0()
{
}

void sub_19E2064C8(void *a1)
{
  unsigned int v1 = sub_19E2064F0(a1);

  operator delete(v1);
}

void *sub_19E2064F0(void *a1)
{
  *a1 = &unk_1EF0A5D08;
  uint64_t v4 = a1 + 36;
  uint64_t v2 = (void **)a1[36];
  uint64_t v3 = (void **)v4[1];
  if (v3 == v2)
  {
    uint64_t v2 = v3;
  }
  else
  {
    unint64_t v5 = 0;
    do
    {
      if (v2[v5])
      {
        operator delete[](v2[v5]);
        uint64_t v2 = (void **)a1[36];
        uint64_t v3 = (void **)a1[37];
      }
      ++v5;
    }
    while (v5 < v3 - v2);
  }
  if (v2)
  {
    a1[37] = v2;
    operator delete(v2);
  }
  sub_19E3030E8((uint64_t)(a1 + 27));
  uint64_t v6 = (void *)a1[24];
  if (v6)
  {
    a1[25] = v6;
    operator delete(v6);
  }
  long long v7 = (void *)a1[21];
  if (v7)
  {
    a1[22] = v7;
    operator delete(v7);
  }
  *a1 = &unk_1EF0A50F8;
  int32x2_t v8 = (void *)a1[1];
  if (v8)
  {
    a1[2] = v8;
    operator delete(v8);
  }
  return a1;
}

uint64_t sub_19E2065D0(uint64_t a1, char **a2, uint64_t a3, uint64_t a4, int a5, char a6)
{
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  int32x2_t v8 = (char **)(a1 + 80);
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(void *)a1 = &unk_1EF0A5858;
  uint64_t v70 = (void **)(a1 + 352);
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(void *)(a1 + 496) = a4;
  *(void *)(a1 + 520) = 0;
  *(_OWORD *)(a1 + 504) = 0u;
  *(void *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 536) = 0u;
  *(unsigned char *)(a1 + 41) = 0;
  *(unsigned char *)(a1 + 529) = a6;
  *(_OWORD *)(a1 + 332) = xmmword_19E351440;
  *(_DWORD *)(a1 + 328) = a5;
  *(unsigned char *)(a1 + 528) = 0;
  if (v8 != a2) {
    sub_19E1E5B9C(v8, *a2, a2[1], (a2[1] - *a2) >> 3);
  }
  *(void *)(a1 + 224) = a3;
  char v72 = 16;
  strcpy(__p, "From constructor");
  sub_19E1E22E4(a1);
  *(void *)(a1 + 264) = *(void *)(a1 + 256);
  *(void *)(a1 + 240) = *(void *)(a1 + 232);
  *(void *)(a1 + 360) = *(void *)(a1 + 352);
  uint64_t v9 = *(void *)(a1 + 80);
  if (*(void *)(a1 + 88) != v9)
  {
    unint64_t v10 = 0;
    int v11 = (void **)(a1 + 256);
    while (1)
    {
      int v13 = (*(uint64_t (**)(void))(**(void **)(v9 + 8 * v10) + 272))(*(void *)(v9 + 8 * v10));
      int v14 = v13;
      int v16 = *(char **)(a1 + 264);
      unint64_t v15 = *(void *)(a1 + 272);
      if ((unint64_t)v16 < v15)
      {
        *(_DWORD *)int v16 = v13;
        uint64_t v17 = (uint64_t)(v16 + 4);
        goto LABEL_29;
      }
      BOOL v18 = (char *)*v11;
      uint64_t v19 = v16 - (unsigned char *)*v11;
      uint64_t v20 = v19 >> 2;
      unint64_t v21 = (v19 >> 2) + 1;
      if (v21 >> 62) {
        goto LABEL_73;
      }
      uint64_t v22 = v15 - (void)v18;
      if (v22 >> 1 > v21) {
        unint64_t v21 = v22 >> 1;
      }
      unint64_t v23 = (unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v21;
      if (v23) {
        break;
      }
      long long v24 = 0;
      uint64_t v25 = (_DWORD *)(4 * v20);
      *(_DWORD *)(4 * v20) = v14;
      uint64_t v17 = 4 * v20 + 4;
      if (v16 != v18) {
        goto LABEL_21;
      }
LABEL_27:
      *(void *)(a1 + 256) = v25;
      *(void *)(a1 + 264) = v17;
      *(void *)(a1 + 272) = &v24[4 * v23];
      if (v18) {
        operator delete(v18);
      }
LABEL_29:
      *(void *)(a1 + 264) = v17;
      if (!v10) {
        goto LABEL_7;
      }
      uint64_t v36 = *(char **)(a1 + 360);
      unint64_t v35 = *(void *)(a1 + 368);
      if ((unint64_t)v36 >= v35)
      {
        uint64_t v37 = (char *)*v70;
        uint64_t v38 = v36 - (unsigned char *)*v70;
        uint64_t v39 = v38 >> 2;
        unint64_t v40 = (v38 >> 2) + 1;
        if (v40 >> 62) {
LABEL_73:
        }
          sub_19E13D694();
        uint64_t v41 = v35 - (void)v37;
        if (v41 >> 1 > v40) {
          unint64_t v40 = v41 >> 1;
        }
        if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v42 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v42 = v40;
        }
        if (v42)
        {
          if (v42 >> 62) {
LABEL_72:
          }
            sub_19E13C418();
          float v43 = operator new(4 * v42);
          float v44 = &v43[4 * v39];
          *float v44 = v10;
          uint64_t v12 = (uint64_t)(v44 + 1);
          if (v36 == v37) {
            goto LABEL_48;
          }
LABEL_42:
          unint64_t v45 = v36 - 4 - v37;
          if (v45 < 0x2C) {
            goto LABEL_76;
          }
          if ((unint64_t)(v36 - &v43[v38]) < 0x20) {
            goto LABEL_76;
          }
          uint64_t v46 = (v45 >> 2) + 1;
          uint64_t v47 = 4 * (v46 & 0x7FFFFFFFFFFFFFF8);
          unint64_t v48 = &v36[-v47];
          float v44 = (_DWORD *)((char *)v44 - v47);
          int64_t v49 = &v43[4 * v39 - 16];
          int v50 = v36 - 16;
          uint64_t v51 = v46 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v52 = *(_OWORD *)v50;
            *(v49 - 1) = *((_OWORD *)v50 - 1);
            *int64_t v49 = v52;
            v49 -= 2;
            v50 -= 32;
            v51 -= 8;
          }
          while (v51);
          uint64_t v36 = v48;
          if (v46 != (v46 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_76:
            do
            {
              int v53 = *((_DWORD *)v36 - 1);
              v36 -= 4;
              *--float v44 = v53;
            }
            while (v36 != v37);
          }
        }
        else
        {
          float v43 = 0;
          float v44 = (_DWORD *)(4 * v39);
          *(_DWORD *)(4 * v39) = v10;
          uint64_t v12 = 4 * v39 + 4;
          if (v36 != v37) {
            goto LABEL_42;
          }
        }
LABEL_48:
        *(void *)(a1 + 352) = v44;
        *(void *)(a1 + 360) = v12;
        *(void *)(a1 + 368) = &v43[4 * v42];
        if (v37) {
          operator delete(v37);
        }
        goto LABEL_6;
      }
      *(_DWORD *)uint64_t v36 = v10;
      uint64_t v12 = (uint64_t)(v36 + 4);
LABEL_6:
      *(void *)(a1 + 360) = v12;
LABEL_7:
      ++v10;
      uint64_t v9 = *(void *)(a1 + 80);
      if (v10 >= (*(void *)(a1 + 88) - v9) >> 3) {
        goto LABEL_50;
      }
    }
    if (v23 >> 62) {
      goto LABEL_72;
    }
    long long v24 = operator new(4 * v23);
    uint64_t v25 = &v24[4 * v20];
    _DWORD *v25 = v14;
    uint64_t v17 = (uint64_t)(v25 + 1);
    if (v16 == v18) {
      goto LABEL_27;
    }
LABEL_21:
    unint64_t v26 = v16 - 4 - v18;
    if (v26 < 0x2C) {
      goto LABEL_77;
    }
    if ((unint64_t)(v16 - &v24[v19]) < 0x20) {
      goto LABEL_77;
    }
    uint64_t v27 = (v26 >> 2) + 1;
    uint64_t v28 = 4 * (v27 & 0x7FFFFFFFFFFFFFF8);
    float32x4_t v29 = &v16[-v28];
    uint64_t v25 = (_DWORD *)((char *)v25 - v28);
    uint64_t v30 = &v24[4 * v20 - 16];
    float32x4_t v31 = v16 - 16;
    uint64_t v32 = v27 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v33 = *(_OWORD *)v31;
      *(v30 - 1) = *((_OWORD *)v31 - 1);
      _OWORD *v30 = v33;
      v30 -= 2;
      v31 -= 32;
      v32 -= 8;
    }
    while (v32);
    int v16 = v29;
    if (v27 != (v27 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_77:
      do
      {
        int v34 = *((_DWORD *)v16 - 1);
        v16 -= 4;
        *--uint64_t v25 = v34;
      }
      while (v16 != v18);
    }
    goto LABEL_27;
  }
LABEL_50:
  unint64_t v54 = dword_1E9457D98;
  uint64_t v55 = *(void *)(a1 + 376);
  unint64_t v56 = (*(void *)(a1 + 384) - v55) >> 2;
  if (dword_1E9457D98 <= v56)
  {
    if (dword_1E9457D98 < v56) {
      *(void *)(a1 + 384) = v55 + 4 * dword_1E9457D98;
    }
  }
  else
  {
    sub_19E1C5E88(a1 + 376, dword_1E9457D98 - v56);
    unint64_t v54 = dword_1E9457D98;
  }
  uint64_t v57 = *(void *)(a1 + 400);
  unint64_t v58 = (*(void *)(a1 + 408) - v57) >> 2;
  if (v54 <= v58)
  {
    if (v54 < v58) {
      *(void *)(a1 + 408) = v57 + 4 * v54;
    }
  }
  else
  {
    sub_19E1C5E88(a1 + 400, v54 - v58);
    unint64_t v54 = dword_1E9457D98;
  }
  uint64_t v59 = *(void *)(a1 + 424);
  unint64_t v60 = (*(void *)(a1 + 432) - v59) >> 2;
  if (v54 <= v60)
  {
    if (v54 < v60) {
      *(void *)(a1 + 432) = v59 + 4 * v54;
    }
  }
  else
  {
    sub_19E1C5E88(a1 + 424, v54 - v60);
  }
  unint64_t v61 = (uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 3;
  uint64_t v62 = *(void *)(a1 + 544);
  uint64_t v63 = *(void *)(a1 + 536);
  unint64_t v64 = 0xAAAAAAAAAAAAAAABLL * ((v62 - v63) >> 3);
  if (v61 <= v64)
  {
    if (v61 < v64)
    {
      uint64_t v65 = v63 + 24 * v61;
      if (v62 != v65)
      {
        uint64_t v66 = *(void *)(a1 + 544);
        do
        {
          uint64_t v68 = *(void **)(v66 - 24);
          v66 -= 24;
          float32x4_t v67 = v68;
          if (v68)
          {
            *(void *)(v62 - 16) = v67;
            operator delete(v67);
          }
          uint64_t v62 = v66;
        }
        while (v66 != v65);
      }
      *(void *)(a1 + 544) = v65;
    }
  }
  else
  {
    sub_19E232360(a1 + 536, v61 - v64);
  }
  return a1;
}

void sub_19E206B58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
  {
    operator delete(__p);
    long long v24 = (void **)(v22 + 59);
    sub_19E14315C(a12);
    uint64_t v25 = *a10;
    if (!*a10)
    {
LABEL_3:
      sub_19E14315C(v24);
      unint64_t v26 = (void *)v22[56];
      if (!v26) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else
  {
    long long v24 = (void **)(v22 + 59);
    sub_19E14315C(a12);
    uint64_t v25 = *a10;
    if (!*a10) {
      goto LABEL_3;
    }
  }
  v22[64] = v25;
  operator delete(v25);
  sub_19E14315C(v24);
  unint64_t v26 = (void *)v22[56];
  if (!v26)
  {
LABEL_4:
    uint64_t v27 = *a13;
    if (!*a13) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  v22[57] = v26;
  operator delete(v26);
  uint64_t v27 = *a13;
  if (!*a13)
  {
LABEL_5:
    uint64_t v28 = *a14;
    if (!*a14) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  v22[54] = v27;
  operator delete(v27);
  uint64_t v28 = *a14;
  if (!*a14)
  {
LABEL_6:
    float32x4_t v29 = *a15;
    if (!*a15) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  v22[51] = v28;
  operator delete(v28);
  float32x4_t v29 = *a15;
  if (!*a15)
  {
LABEL_7:
    uint64_t v30 = *a16;
    if (!*a16) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  v22[48] = v29;
  operator delete(v29);
  uint64_t v30 = *a16;
  if (!*a16)
  {
LABEL_8:
    float32x4_t v31 = (void *)v22[38];
    if (!v31) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
LABEL_17:
  v22[45] = v30;
  operator delete(v30);
  float32x4_t v31 = (void *)v22[38];
  if (!v31)
  {
LABEL_9:
    uint64_t v32 = *a11;
    if (!*a11) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  v22[39] = v31;
  operator delete(v31);
  uint64_t v32 = *a11;
  if (!*a11)
  {
LABEL_10:
    sub_19E1CDA54(v22);
    _Unwind_Resume(a1);
  }
LABEL_19:
  v22[36] = v32;
  operator delete(v32);
  sub_19E1CDA54(v22);
  _Unwind_Resume(a1);
}

uint64_t sub_19E206CCC(uint64_t a1)
{
  return a1 + 104;
}

uint64_t sub_19E206CD4(uint64_t a1)
{
  return a1 + 448;
}

uint64_t sub_19E206CDC(uint64_t a1)
{
  return a1 + 504;
}

uint64_t sub_19E206CE4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 80);
  if (*(void *)(a1 + 88) == v1) {
    return 0;
  }
  unint64_t v3 = 0;
  do
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(v1 + 8 * v3) + 56))(*(void *)(v1 + 8 * v3));
    if (result) {
      break;
    }
    ++v3;
    uint64_t v1 = *(void *)(a1 + 80);
  }
  while (v3 < (*(void *)(a1 + 88) - v1) >> 3);
  return result;
}

uint64_t sub_19E206D64(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(result + 80);
  if (*(void *)(result + 88) != v4)
  {
    uint64_t v8 = result;
    unint64_t v9 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(v4 + 8 * v9) + 64))(*(void *)(v4 + 8 * v9), a2, a3, a4);
      ++v9;
      uint64_t v4 = *(void *)(v8 + 80);
    }
    while (v9 < (*(void *)(v8 + 88) - v4) >> 3);
  }
  return result;
}

uint64_t sub_19E206DF8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(result + 80);
  if (*(void *)(result + 88) != v5)
  {
    uint64_t v10 = result;
    unint64_t v11 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(v5 + 8 * v11) + 72))(*(void *)(v5 + 8 * v11), a2, a3, a4, a5);
      ++v11;
      uint64_t v5 = *(void *)(v10 + 80);
    }
    while (v11 < (*(void *)(v10 + 88) - v5) >> 3);
  }
  return result;
}

void *sub_19E206E94(void *result, void *lpsrc, void *a3)
{
  unint64_t v3 = a3;
  uint64_t v4 = (uint64_t)result;
  if (lpsrc)
  {
    uint64_t result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3CD0, 0);
    uint64_t v5 = (uint64_t)result;
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v5 = 0;
  if (a3)
  {
LABEL_3:
    uint64_t result = __dynamic_cast(v3, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3CD0, 0);
    unint64_t v3 = result;
  }
LABEL_4:
  uint64_t v6 = *(void *)(v4 + 80);
  if (*(void *)(v4 + 88) != v6)
  {
    unint64_t v7 = 0;
    do
    {
      uint64_t result = (void *)(*(uint64_t (**)(void, void, void))(**(void **)(v6 + 8 * v7) + 80))(*(void *)(v6 + 8 * v7), *(void *)(*(void *)(v5 + 80) + 8 * v7), *(void *)(v3[10] + 8 * v7));
      ++v7;
      uint64_t v6 = *(void *)(v4 + 80);
    }
    while (v7 < (*(void *)(v4 + 88) - v6) >> 3);
  }
  return result;
}

void *sub_19E206FC8(void *result, void *lpsrc, void *a3)
{
  unint64_t v3 = a3;
  uint64_t v4 = (uint64_t)result;
  if (lpsrc)
  {
    uint64_t result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3CD0, 0);
    uint64_t v5 = (uint64_t)result;
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v5 = 0;
  if (a3)
  {
LABEL_3:
    uint64_t result = __dynamic_cast(v3, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3CD0, 0);
    unint64_t v3 = result;
  }
LABEL_4:
  uint64_t v6 = *(void *)(v4 + 80);
  if (*(void *)(v4 + 88) != v6)
  {
    unint64_t v7 = 0;
    do
    {
      uint64_t result = (void *)(*(uint64_t (**)(void, void, void))(**(void **)(v6 + 8 * v7) + 88))(*(void *)(v6 + 8 * v7), *(void *)(*(void *)(v5 + 80) + 8 * v7), *(void *)(v3[10] + 8 * v7));
      ++v7;
      uint64_t v6 = *(void *)(v4 + 80);
    }
    while (v7 < (*(void *)(v4 + 88) - v6) >> 3);
  }
  return result;
}

void *sub_19E2070FC(void *result, void *lpsrc)
{
  uint64_t v2 = result;
  if (lpsrc)
  {
    uint64_t result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3CD0, 0);
    unint64_t v3 = result;
    uint64_t v4 = v2[10];
    if (v2[11] == v4) {
      return result;
    }
  }
  else
  {
    unint64_t v3 = 0;
    uint64_t v4 = result[10];
    if (result[11] == v4) {
      return result;
    }
  }
  unint64_t v5 = 0;
  do
  {
    uint64_t result = (void *)(*(uint64_t (**)(void, void))(**(void **)(v4 + 8 * v5) + 96))(*(void *)(v4 + 8 * v5), *(void *)(v3[10] + 8 * v5));
    ++v5;
    uint64_t v4 = v2[10];
  }
  while (v5 < (v2[11] - v4) >> 3);
  return result;
}

void *sub_19E2071E0(void *result, void *lpsrc)
{
  uint64_t v2 = result;
  if (lpsrc)
  {
    uint64_t result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3CD0, 0);
    unint64_t v3 = result;
    uint64_t v4 = v2[10];
    if (v2[11] == v4) {
      return result;
    }
  }
  else
  {
    unint64_t v3 = 0;
    uint64_t v4 = result[10];
    if (result[11] == v4) {
      return result;
    }
  }
  unint64_t v5 = 0;
  do
  {
    uint64_t result = (void *)(*(uint64_t (**)(void, void))(**(void **)(v4 + 8 * v5) + 104))(*(void *)(v4 + 8 * v5), *(void *)(v3[10] + 8 * v5));
    ++v5;
    uint64_t v4 = v2[10];
  }
  while (v5 < (v2[11] - v4) >> 3);
  return result;
}

uint64_t sub_19E2072C4(uint64_t result, float a2)
{
  uint64_t v2 = *(void *)(result + 80);
  if (*(void *)(result + 88) != v2)
  {
    uint64_t v4 = result;
    unint64_t v5 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(void, float))(**(void **)(v2 + 8 * v5) + 112))(*(void *)(v2 + 8 * v5), a2);
      ++v5;
      uint64_t v2 = *(void *)(v4 + 80);
    }
    while (v5 < (*(void *)(v4 + 88) - v2) >> 3);
  }
  return result;
}

uint64_t sub_19E207340(uint64_t result, float a2)
{
  uint64_t v2 = *(void *)(result + 80);
  if (*(void *)(result + 88) != v2)
  {
    uint64_t v4 = result;
    unint64_t v5 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(void, float))(**(void **)(v2 + 8 * v5) + 120))(*(void *)(v2 + 8 * v5), a2);
      ++v5;
      uint64_t v2 = *(void *)(v4 + 80);
    }
    while (v5 < (*(void *)(v4 + 88) - v2) >> 3);
  }
  return result;
}

uint64_t sub_19E2073CC(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 80);
  if (*(void *)(result + 88) != v1)
  {
    uint64_t v2 = result;
    unint64_t v3 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(void))(**(void **)(v1 + 8 * v3) + 160))(*(void *)(v1 + 8 * v3));
      ++v3;
      uint64_t v1 = *(void *)(v2 + 80);
    }
    while (v3 < (*(void *)(v2 + 88) - v1) >> 3);
  }
  return result;
}

void sub_19E207438(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  if (*(void *)(a1 + 88) != v2)
  {
    unint64_t v3 = 0;
    do
    {
      (*(void (**)(void))(**(void **)(v2 + 8 * v3) + 200))(*(void *)(v2 + 8 * v3));
      ++v3;
      uint64_t v2 = *(void *)(a1 + 80);
    }
    while (v3 < (*(void *)(a1 + 88) - v2) >> 3);
  }
  strcpy(__p, "From allocAllBuffers");
  sub_19E1E22E4(a1);
}

void sub_19E207500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E20751C(void *a1)
{
  uint64_t v3 = a1[35];
  uint64_t v2 = a1[36];
  if (v2 == v3)
  {
    uint64_t v3 = a1[36];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      unint64_t v5 = *(void ***)(v3 + 8 * v4);
      if (*v5)
      {
        operator delete[](*v5);
        void *v5 = 0;
        uint64_t v3 = a1[35];
        uint64_t v2 = a1[36];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  a1[36] = v3;
  uint64_t v6 = a1[10];
  if (a1[11] != v6)
  {
    unint64_t v7 = 0;
    do
    {
      (*(void (**)(void))(**(void **)(v6 + 8 * v7) + 208))(*(void *)(v6 + 8 * v7));
      ++v7;
      uint64_t v6 = a1[10];
    }
    while (v7 < (a1[11] - v6) >> 3);
  }
  a1[14] = a1[13];
  a1[57] = a1[56];
  a1[64] = a1[63];
  uint64_t v9 = a1[25];
  uint64_t v8 = a1[26];
  if (v8 != v9)
  {
    uint64_t v10 = a1[26];
    do
    {
      uint64_t v12 = *(void **)(v10 - 24);
      v10 -= 24;
      unint64_t v11 = v12;
      if (v12)
      {
        *(void *)(v8 - 16) = v11;
        operator delete(v11);
      }
      uint64_t v8 = v10;
    }
    while (v10 != v9);
  }
  a1[26] = v9;
  uint64_t v14 = a1[59];
  uint64_t v13 = a1[60];
  if (v13 != v14)
  {
    uint64_t v15 = a1[60];
    do
    {
      uint64_t v17 = *(void **)(v15 - 24);
      v15 -= 24;
      int v16 = v17;
      if (v17)
      {
        *(void *)(v13 - 16) = v16;
        operator delete(v16);
      }
      uint64_t v13 = v15;
    }
    while (v15 != v14);
  }
  a1[60] = v14;
  a1[39] = a1[38];
}

void sub_19E207668(uint64_t a1, void *a2, void *a3, int a4, char a5)
{
  int v44 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 272))(a1);
  if (a4 >= 1)
  {
    unint64_t v8 = 0;
    while ((a5 & 1) != 0)
    {
      if (a3[1] == *a3)
      {
        if (v44 >= 1)
        {
          int v16 = 0;
          uint64_t v23 = 0;
          float v24 = 1.1755e-38;
          do
          {
            float v25 = *(float *)(*(void *)(*a2 + 8 * v8) + 4 * v23);
            if (v25 > v24) {
              int v16 = v23;
            }
            float v24 = fmaxf(v25, v24);
            ++v23;
          }
          while (v44 != v23);
          goto LABEL_21;
        }
LABEL_24:
        int v16 = 0;
        uint64_t v17 = *(void *)(a1 + 376);
        *(_DWORD *)(v17 + 4 * v8) = 0;
        BOOL v18 = *(void **)(a1 + 496);
        uint64_t v19 = v18[8];
        if (v19) {
          goto LABEL_22;
        }
        goto LABEL_25;
      }
      if (v8 >= (a4 - 1))
      {
        int v16 = 2;
        uint64_t v17 = *(void *)(a1 + 376);
        *(_DWORD *)(v17 + 4 * v8) = 2;
        BOOL v18 = *(void **)(a1 + 496);
        uint64_t v19 = v18[8];
        if (v19)
        {
LABEL_22:
          unint64_t v26 = (int *)(v19 + 8 * v16 + 4);
LABEL_23:
          int v27 = *v26;
          goto LABEL_36;
        }
      }
      else
      {
        int v16 = **(_DWORD **)(*a3 + 24 * v8 + 24);
        uint64_t v17 = *(void *)(a1 + 376);
        *(_DWORD *)(v17 + 4 * v8) = v16;
        BOOL v18 = *(void **)(a1 + 496);
        uint64_t v19 = v18[8];
        if (v19) {
          goto LABEL_22;
        }
      }
LABEL_25:
      uint64_t v28 = v18[6];
      if (v28)
      {
        float32x4_t v29 = v18 + 6;
        do
        {
          int v30 = *(_DWORD *)(v28 + 28);
          BOOL v31 = v30 < v16;
          if (v30 >= v16) {
            uint64_t v32 = (uint64_t *)v28;
          }
          else {
            uint64_t v32 = (uint64_t *)(v28 + 8);
          }
          if (!v31) {
            float32x4_t v29 = (void *)v28;
          }
          uint64_t v28 = *v32;
        }
        while (*v32);
        if (v29 != v18 + 6 && *((_DWORD *)v29 + 7) <= v16)
        {
          unint64_t v26 = (int *)(v29 + 4);
          goto LABEL_23;
        }
      }
      int v27 = -1;
LABEL_36:
      *(_DWORD *)(*(void *)(a1 + 400) + 4 * v8) = v27 + 1;
      uint64_t v33 = *(int *)(v17 + 4 * v8);
      uint64_t v34 = v18[13];
      if (v34)
      {
        unint64_t v35 = (int *)(v34 + 8 * v33 + 4);
LABEL_38:
        int v9 = *v35;
        goto LABEL_4;
      }
      uint64_t v38 = v18[11];
      uint64_t v36 = v18 + 11;
      uint64_t v37 = v38;
      if (v38)
      {
        uint64_t v39 = v36;
        do
        {
          int v40 = *(_DWORD *)(v37 + 28);
          BOOL v41 = v40 < (int)v33;
          if (v40 >= (int)v33) {
            unint64_t v42 = (uint64_t *)v37;
          }
          else {
            unint64_t v42 = (uint64_t *)(v37 + 8);
          }
          if (!v41) {
            uint64_t v39 = (void *)v37;
          }
          uint64_t v37 = *v42;
        }
        while (*v42);
        if (v39 != v36 && *((_DWORD *)v39 + 7) <= (int)v33)
        {
          unint64_t v35 = (int *)(v39 + 4);
          goto LABEL_38;
        }
      }
      int v9 = -1;
LABEL_4:
      *(_DWORD *)(*(void *)(a1 + 424) + 4 * v8) = v9;
      uint64_t v10 = **(void **)(a1 + 200);
      int v11 = (*(uint64_t (**)(void))(***(void ***)(a1 + 80) + 272))(**(void **)(a1 + 80));
      bzero(*(void **)(v10 + 8 * v8), 4 * v11);
      uint64_t v12 = *(void **)(a1 + 200);
      uint64_t v13 = *(int *)(*(void *)(a1 + 400) + 4 * v8);
      *(_DWORD *)(*(void *)(*v12 + 8 * v8) + 4 * v13 - 4) = 1065353216;
      uint64_t v14 = v12[3 * (int)v13];
      int v15 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 80) + 8 * v13) + 272))();
      bzero(*(void **)(v14 + 8 * v8), 4 * v15);
      *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 200) + 24 * *(int *)(*(void *)(a1 + 400) + 4 * v8))
                            + 8 * v8)
                + 4 * *(int *)(*(void *)(a1 + 424) + 4 * v8)) = 1065353216;
      if (++v8 == a4) {
        return;
      }
    }
    if (v44 >= 1)
    {
      int v16 = 0;
      uint64_t v20 = 0;
      float v21 = 1.1755e-38;
      do
      {
        float v22 = *(float *)(*(void *)(*a2 + 8 * v8) + 4 * v20);
        if (v22 > v21) {
          int v16 = v20;
        }
        float v21 = fmaxf(v22, v21);
        ++v20;
      }
      while (v44 != v20);
LABEL_21:
      uint64_t v17 = *(void *)(a1 + 376);
      *(_DWORD *)(v17 + 4 * v8) = v16;
      BOOL v18 = *(void **)(a1 + 496);
      uint64_t v19 = v18[8];
      if (v19) {
        goto LABEL_22;
      }
      goto LABEL_25;
    }
    goto LABEL_24;
  }
}

uint64_t sub_19E207A00(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 80);
  if ((unint64_t)(*(void *)(a1 + 88) - v1) < 9) {
    return 0;
  }
  LODWORD(v3) = 0;
  unint64_t v4 = 1;
  do
  {
    uint64_t v3 = (*(unsigned int (**)(void))(**(void **)(v1 + 8 * v4) + 272))(*(void *)(v1 + 8 * v4))
       + v3;
    ++v4;
    uint64_t v1 = *(void *)(a1 + 80);
  }
  while (v4 < (*(void *)(a1 + 88) - v1) >> 3);
  return v3;
}

uint64_t sub_19E207AA4(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(result + 528) = a2;
  uint64_t v2 = *(void *)(result + 80);
  if (*(void *)(result + 88) != v2)
  {
    uint64_t v4 = result;
    unint64_t v5 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 8 * v5) + 280))(*(void *)(v2 + 8 * v5), a2);
      ++v5;
      uint64_t v2 = *(void *)(v4 + 80);
    }
    while (v5 < (*(void *)(v4 + 88) - v2) >> 3);
  }
  return result;
}

void sub_19E207B2C()
{
}

void sub_19E207B40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  if (a5 >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 8 * a5;
    uint64_t v9 = a5;
    do
    {
      uint64_t v10 = *(void *)(a1 + 504);
      int v11 = (*(uint64_t (**)(void))(***(void ***)(a1 + 80) + 264))(**(void **)(a1 + 80));
      bzero(*(void **)(v10 + v7), 4 * v11);
      v7 += 8;
    }
    while (v8 != v7);
    for (uint64_t i = 0; i != v9; ++i)
    {
      uint64_t v13 = *(int *)(a1 + 332);
      uint64_t v14 = *(void *)(*(void *)(a1 + 80) + 8 * v13);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void))(*(void *)v14 + 248))(v14, *(void *)(a1 + 472) + 24 * (int)v13, a3, i, *(unsigned int *)(*(void *)(a1 + 256) + 4 * v13), *(unsigned int *)(*(void *)(a1 + 256) + 4 * v13));
      uint64_t v15 = *(void *)(*(void *)(a1 + 80) + 8 * v13);
      uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 48))(v15);
      BOOL v18 = *(const void **)v16;
      uint64_t v17 = *(void *)(v16 + 8);
      uint64_t v19 = v17 - *(void *)v16;
      if (v17 == *(void *)v16)
      {
        uint64_t v20 = 0;
      }
      else
      {
        if (v19 < 0) {
          sub_19E13D694();
        }
        uint64_t v20 = operator new(v17 - *(void *)v16);
        memcpy(v20, v18, v19 & 0xFFFFFFFFFFFFFFF8);
      }
      uint64_t v21 = *(void *)(a1 + 504);
      uint64_t v22 = *(void *)(*(void *)(a1 + 80) + 8 * v13);
      int v23 = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 264))(v22);
      int v24 = v23 / 8;
      if (v23 >= 8)
      {
        float v25 = *(float32x4_t **)(v21 + 8 * i);
        unint64_t v26 = (float32x4_t *)*((void *)v20 + i);
        int v27 = v23 / 8;
        do
        {
          float32x4_t v28 = *v26;
          float32x4_t v29 = v26[1];
          v26 += 2;
          float32x4_t v30 = vaddq_f32(v25[1], v29);
          float32x4_t *v25 = vaddq_f32(*v25, v28);
          v25[1] = v30;
          v25 += 2;
          --v27;
        }
        while (v27);
      }
      int v31 = 8 * v24;
      if (8 * v24 < v23)
      {
        uint64_t v32 = *((void *)v20 + i);
        uint64_t v33 = *(void *)(v21 + 8 * i);
        uint64_t v34 = v31;
        if ((unint64_t)(v23 - (uint64_t)v31) < 8) {
          goto LABEL_23;
        }
        unint64_t v35 = v33 + 4 * v31;
        unint64_t v36 = v32 + 4 * v31;
        if (v35 < v32 + 4 * v23 && v36 < v33 + 4 * v23) {
          goto LABEL_23;
        }
        uint64_t v38 = v31 + (v23 & 7) - v23;
        uint64_t v39 = (float32x4_t *)(v36 + 16);
        int v40 = (float32x4_t *)(v35 + 16);
        do
        {
          float32x4_t v41 = vaddq_f32(*v40, *v39);
          v40[-1] = vaddq_f32(v40[-1], v39[-1]);
          *int v40 = v41;
          v39 += 2;
          v40 += 2;
          v38 += 8;
        }
        while (v38);
        uint64_t v34 = v23 - (v23 & 7);
        if ((v23 & 7) != 0)
        {
LABEL_23:
          uint64_t v42 = v23 - v34;
          float v43 = (float *)(v33 + 4 * v34);
          int v44 = (float *)(v32 + 4 * v34);
          do
          {
            float v45 = *v44++;
            float *v43 = *v43 + v45;
            ++v43;
            --v42;
          }
          while (v42);
        }
      }
      uint64_t v46 = *(int *)(*(void *)(a1 + 400) + 4 * i);
      uint64_t v47 = *(void *)(*(void *)(a1 + 80) + 8 * v46);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void))(*(void *)v47 + 248))(v47, *(void *)(a1 + 472) + 24 * *(int *)(a1 + 336), a3, i, *(unsigned int *)(a1 + 344), *(unsigned int *)(*(void *)(a1 + 256) + 4 * v46));
      uint64_t v48 = *(void *)(*(void *)(a1 + 80) + 8 * v46);
      uint64_t v49 = (*(uint64_t (**)(uint64_t))(*(void *)v48 + 48))(v48);
      uint64_t v51 = *(const void **)v49;
      uint64_t v50 = *(void *)(v49 + 8);
      uint64_t v52 = v50 - *(void *)v49;
      if (v50 == *(void *)v49)
      {
        int v53 = 0;
      }
      else
      {
        if (v52 < 0) {
          sub_19E13D694();
        }
        int v53 = operator new(v50 - *(void *)v49);
        memcpy(v53, v51, v52 & 0xFFFFFFFFFFFFFFF8);
      }
      uint64_t v54 = *(void *)(a1 + 504);
      uint64_t v55 = *(void *)(*(void *)(a1 + 80) + 8 * v46);
      int v56 = (*(uint64_t (**)(uint64_t))(*(void *)v55 + 264))(v55);
      int v57 = v56 / 8;
      if (v56 >= 8)
      {
        unint64_t v58 = *(float32x4_t **)(v54 + 8 * i);
        uint64_t v59 = (float32x4_t *)*((void *)v53 + i);
        int v60 = v56 / 8;
        do
        {
          float32x4_t v61 = *v59;
          float32x4_t v62 = v59[1];
          v59 += 2;
          float32x4_t v63 = vaddq_f32(v58[1], v62);
          float32x4_t *v58 = vaddq_f32(*v58, v61);
          v58[1] = v63;
          v58 += 2;
          --v60;
        }
        while (v60);
      }
      int v64 = 8 * v57;
      if (8 * v57 < v56)
      {
        uint64_t v65 = *((void *)v53 + i);
        uint64_t v66 = *(void *)(v54 + 8 * i);
        uint64_t v67 = v64;
        if ((unint64_t)(v56 - (uint64_t)v64) < 8) {
          goto LABEL_42;
        }
        unint64_t v68 = v66 + 4 * v64;
        unint64_t v69 = v65 + 4 * v64;
        if (v68 < v65 + 4 * v56 && v69 < v66 + 4 * v56) {
          goto LABEL_42;
        }
        uint64_t v71 = v64 + (v56 & 7) - v56;
        char v72 = (float32x4_t *)(v69 + 16);
        uint64_t v73 = (float32x4_t *)(v68 + 16);
        do
        {
          float32x4_t v74 = vaddq_f32(*v73, *v72);
          v73[-1] = vaddq_f32(v73[-1], v72[-1]);
          float32x4_t *v73 = v74;
          v72 += 2;
          v73 += 2;
          v71 += 8;
        }
        while (v71);
        uint64_t v67 = v56 - (v56 & 7);
        if ((v56 & 7) != 0)
        {
LABEL_42:
          uint64_t v75 = v56 - v67;
          float32x4_t v76 = (float *)(v66 + 4 * v67);
          uint64_t v77 = (float *)(v65 + 4 * v67);
          do
          {
            float v78 = *v77++;
            *float32x4_t v76 = *v76 + v78;
            ++v76;
            --v75;
          }
          while (v75);
        }
      }
      if (v53) {
        operator delete(v53);
      }
      if (v20) {
        operator delete(v20);
      }
    }
  }
}

void sub_19E208040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (v13) {
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E20809C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v240 = 0;
  uint64_t v241 = 0;
  unint64_t v242 = 0;
  if ((*(_DWORD *)(a1 + 340) & 0x80000000) == 0)
  {
    uint64_t v13 = 0;
    uint64_t v14 = *(void *)(a1 + 304);
    do
    {
      *(_DWORD *)(v14 + 4 * v13) = 0;
      BOOL v84 = v13++ < *(int *)(a1 + 340);
    }
    while (v84);
  }
  uint64_t v15 = *(void *)(a1 + 224);
  if (v15) {
    a2 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 32))(v15);
  }
  uint64_t v16 = a4 & 0xFFFFFF;
  if (v16 > (a5 != 0))
  {
    uint64_t v17 = a5 != 0;
    uint64_t v227 = a2;
    uint64_t v228 = a3;
    uint64_t v229 = v16;
    do
    {
      uint64_t v18 = *(int *)(a1 + 332);
      uint64_t v19 = *(void *)(*(void *)(a1 + 80) + 8 * v18);
      (*(void (**)(uint64_t))(*(void *)v19 + 272))(v19);
      uint64_t v20 = *(void *)(*(void *)(a1 + 80) + 8 * v18);
      (*(void (**)(uint64_t))(*(void *)v20 + 264))(v20);
      uint64_t v21 = *(void *)(a1 + 304);
      if (!*(_DWORD *)(v21 + 4 * v18))
      {
        *(_DWORD *)(v21 + 4 * v18) = 1;
        uint64_t v22 = *(void *)(*(void *)(a1 + 80) + 8 * v18);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v22 + 256))(v22, v229);
      }
      float32x4_t v237 = 0;
      int v238 = 0;
      uint64_t v239 = 0;
      uint64_t v23 = *(void *)(*(void *)(a1 + 80) + 8 * v18);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void **))(*(void *)v23 + 224))(v23, a2, a3, v17, &v237);
      uint64_t v24 = *(void *)(*(void *)(a1 + 80) + 8 * v18);
      v233 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v24 + 32))(v24);
      __p = 0;
      float32x4_t v235 = 0;
      float32x4_t v236 = 0;
      int v25 = *(_DWORD *)(a1 + 328);
      if (v25 == 1)
      {
        int v42 = *(_DWORD *)(*(void *)(a1 + 400) + 4 * v17);
        float v43 = (int *)operator new(4uLL);
        int *v43 = v42;
        float32x4_t v235 = v43 + 1;
        float32x4_t v236 = (char *)(v43 + 1);
        __p = v43;
        goto LABEL_212;
      }
      if (v25 == 2)
      {
        uint64_t v31 = *v233;
        uint64_t v32 = *(void *)(*(void *)(a1 + 80) + 8 * *(int *)(a1 + 332));
        int v33 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 272))(v32);
        if (v33 < 1)
        {
          int v38 = 1;
          int v40 = v235;
          uint64_t v39 = v236;
          if (v235 < (int *)v236) {
            goto LABEL_25;
          }
        }
        else
        {
          int v34 = 0;
          uint64_t v35 = 0;
          float v36 = 1.1755e-38;
          do
          {
            float v37 = *(float *)(*(void *)(v31 + 8 * v17) + 4 * v35);
            if (v37 > v36) {
              int v34 = v35;
            }
            float v36 = fmaxf(v37, v36);
            ++v35;
          }
          while (v33 != v35);
          int v38 = v34 + 1;
          int v40 = v235;
          uint64_t v39 = v236;
          if (v235 < (int *)v236)
          {
LABEL_25:
            *int v40 = v38;
            uint64_t v41 = (uint64_t)(v40 + 1);
LABEL_182:
            float32x4_t v235 = (int *)v41;
            p_p = &__p;
            goto LABEL_213;
          }
        }
        float v45 = (int *)__p;
        int64_t v46 = (char *)v40 - (unsigned char *)__p;
        uint64_t v47 = ((char *)v40 - (unsigned char *)__p) >> 2;
        unint64_t v48 = v47 + 1;
        if ((unint64_t)(v47 + 1) >> 62) {
          sub_19E13D694();
        }
        uint64_t v49 = v39 - (unsigned char *)__p;
        if (v49 >> 1 > v48) {
          unint64_t v48 = v49 >> 1;
        }
        if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v50 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v50 = v48;
        }
        if (v50)
        {
          if (v50 >> 62) {
            sub_19E13C418();
          }
          uint64_t v51 = operator new(4 * v50);
          uint64_t v52 = (int *)&v51[4 * v47];
          *uint64_t v52 = v38;
          uint64_t v41 = (uint64_t)(v52 + 1);
          if (v40 == v45) {
            goto LABEL_180;
          }
LABEL_174:
          unint64_t v161 = (char *)(v40 - 1) - (char *)v45;
          if (v161 < 0x2C) {
            goto LABEL_259;
          }
          if ((unint64_t)((char *)v40 - &v51[v46]) < 0x20) {
            goto LABEL_259;
          }
          uint64_t v162 = (v161 >> 2) + 1;
          uint64_t v163 = 4 * (v162 & 0x7FFFFFFFFFFFFFF8);
          unint64_t v164 = &v40[v163 / 0xFFFFFFFFFFFFFFFCLL];
          uint64_t v52 = (int *)((char *)v52 - v163);
          uint64_t v165 = &v51[4 * v47 - 16];
          BOOL v166 = v40 - 4;
          uint64_t v167 = v162 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v168 = *(_OWORD *)v166;
            *(v165 - 1) = *((_OWORD *)v166 - 1);
            *uint64_t v165 = v168;
            v165 -= 2;
            v166 -= 8;
            v167 -= 8;
          }
          while (v167);
          int v40 = v164;
          if (v162 != (v162 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_259:
            do
            {
              int v169 = *--v40;
              *--uint64_t v52 = v169;
            }
            while (v40 != v45);
          }
        }
        else
        {
          uint64_t v51 = 0;
          uint64_t v52 = (int *)(4 * v47);
          *(_DWORD *)(4 * v47) = v38;
          uint64_t v41 = 4 * v47 + 4;
          if (v40 != v45) {
            goto LABEL_174;
          }
        }
LABEL_180:
        __p = v52;
        float32x4_t v235 = (int *)v41;
        float32x4_t v236 = &v51[4 * v50];
        if (v45) {
          operator delete(v45);
        }
        goto LABEL_182;
      }
      if (v25 != 4)
      {
        p_p = &__p;
        sub_19E1E5CE4(*v233 + 8 * v17, (float32x4_t **)(*v233 + 8 * v17), *(_DWORD *)(a1 + 340), (unint64_t *)&__p, *(_DWORD *)(*(void *)(a1 + 496) + 8), 1u);
        goto LABEL_213;
      }
      unint64_t v26 = v240;
      uint64_t v241 = v240;
      uint64_t v27 = *(void *)(a1 + 536);
      uint64_t v28 = *(void *)(a1 + 544) - v27;
      if (!v28) {
        goto LABEL_44;
      }
      unint64_t v29 = v28 / 24;
      if (v29 <= 1) {
        unint64_t v29 = 1;
      }
      if (v29 >= 2)
      {
        unint64_t v30 = v29 & 0xFFFFFFFFFFFFFFFELL;
        int v53 = (void *)(v27 + 32);
        unint64_t v54 = v29 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          uint64_t v55 = *(v53 - 1);
          *(v53 - 3) = *(v53 - 4);
          *int v53 = v55;
          v53 += 6;
          v54 -= 2;
        }
        while (v54);
        if (v29 == v30) {
          goto LABEL_44;
        }
      }
      else
      {
        unint64_t v30 = 0;
      }
      int v56 = (void *)(v27 + 24 * v30 + 8);
      unint64_t v57 = v29 - v30;
      do
      {
        *int v56 = *(v56 - 1);
        v56 += 3;
        --v57;
      }
      while (v57);
LABEL_44:
      uint64_t v59 = *(_DWORD **)a7;
      uint64_t v58 = *(void *)(a7 + 8);
      p_p = (void **)(a1 + 352);
      unint64_t v60 = v58 - *(void *)a7;
      if (v58 == *(void *)a7) {
        goto LABEL_213;
      }
      if (v60 < 5)
      {
        uint64_t v241 = v26;
        if (v60 != 4) {
          goto LABEL_212;
        }
        v133 = operator new(4uLL);
        _DWORD *v133 = *v59;
        float32x4_t v62 = (char *)(v133 + 1);
        float32x4_t v134 = v133;
        if (*v133 != -1) {
          goto LABEL_145;
        }
LABEL_184:
        uint64_t v170 = *(void *)(a1 + 544);
        uint64_t v171 = *(void *)(a1 + 536);
        if (v170 == v171)
        {
LABEL_211:
          operator delete(v134);
          goto LABEL_212;
        }
        unint64_t v172 = 0;
        v232 = v134;
        while (2)
        {
          uint64_t v174 = *(void *)(v171 + 24 * v172);
          uint64_t v175 = *(void *)(v171 + 24 * v172++ + 8);
          if (v175 == v174) {
            goto LABEL_188;
          }
          uint64_t v176 = (char *)v235;
          if (v235 < (int *)v236)
          {
            *float32x4_t v235 = v172;
            uint64_t v173 = (uint64_t)(v176 + 4);
            goto LABEL_187;
          }
          uint64_t v177 = (char *)__p;
          int64_t v178 = (char *)v235 - (unsigned char *)__p;
          uint64_t v179 = ((char *)v235 - (unsigned char *)__p) >> 2;
          unint64_t v180 = v179 + 1;
          if ((unint64_t)(v179 + 1) >> 62) {
            sub_19E13D694();
          }
          uint64_t v181 = v236 - (unsigned char *)__p;
          if ((v236 - (unsigned char *)__p) >> 1 > v180) {
            unint64_t v180 = v181 >> 1;
          }
          if ((unint64_t)v181 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v182 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v182 = v180;
          }
          if (v182)
          {
            int64_t v226 = (char *)v235 - (unsigned char *)__p;
            if (v182 >> 62) {
              sub_19E13C418();
            }
            uint64_t v183 = ((char *)v235 - (unsigned char *)__p) >> 2;
            uint64_t v184 = v171;
            unint64_t v185 = v182;
            int v186 = (char *)operator new(4 * v182);
            uint64_t v171 = v184;
            unint64_t v182 = v185;
            uint64_t v179 = v183;
            int64_t v178 = v226;
            char v187 = &v186[4 * v183];
            *(_DWORD *)char v187 = v172;
            uint64_t v173 = (uint64_t)(v187 + 4);
            if (v176 != v177)
            {
LABEL_200:
              unint64_t v188 = v176 - 4 - v177;
              if (v188 < 0x2C)
              {
                float32x4_t v134 = v232;
                goto LABEL_208;
              }
              float32x4_t v134 = v232;
              if ((unint64_t)(v176 - &v186[v178]) < 0x20) {
                goto LABEL_260;
              }
              uint64_t v189 = (v188 >> 2) + 1;
              uint64_t v190 = 4 * (v189 & 0x7FFFFFFFFFFFFFF8);
              unint64_t v191 = &v176[-v190];
              v187 -= v190;
              unsigned int v192 = &v186[4 * v179 - 16];
              uint64_t v193 = v176 - 16;
              uint64_t v194 = v189 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v195 = *(_OWORD *)v193;
                *((_OWORD *)v192 - 1) = *((_OWORD *)v193 - 1);
                *(_OWORD *)unsigned int v192 = v195;
                v192 -= 32;
                v193 -= 32;
                v194 -= 8;
              }
              while (v194);
              uint64_t v176 = v191;
              if (v189 != (v189 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_260:
                do
                {
LABEL_208:
                  int v196 = *((_DWORD *)v176 - 1);
                  v176 -= 4;
                  *((_DWORD *)v187 - 1) = v196;
                  v187 -= 4;
                }
                while (v176 != v177);
              }
LABEL_209:
              __p = v187;
              float32x4_t v235 = (int *)v173;
              float32x4_t v236 = &v186[4 * v182];
              if (v177)
              {
                operator delete(v177);
                uint64_t v170 = *(void *)(a1 + 544);
                uint64_t v171 = *(void *)(a1 + 536);
              }
LABEL_187:
              float32x4_t v235 = (int *)v173;
LABEL_188:
              if (0xAAAAAAAAAAAAAAABLL * ((v170 - v171) >> 3) <= v172) {
                goto LABEL_171;
              }
              continue;
            }
          }
          else
          {
            int v186 = 0;
            char v187 = (char *)(4 * v179);
            *(_DWORD *)(4 * v179) = v172;
            uint64_t v173 = 4 * v179 + 4;
            if (v176 != v177) {
              goto LABEL_200;
            }
          }
          break;
        }
        float32x4_t v134 = v232;
        goto LABEL_209;
      }
      float32x4_t v61 = operator new(4uLL);
      uint64_t v230 = v61;
      *float32x4_t v61 = *v59;
      float32x4_t v62 = (char *)(v61 + 1);
      if (v59[1] != -1) {
        sub_19E2F6320(900);
      }
      if (v60 < 9)
      {
        float32x4_t v134 = v61;
        if (*v61 == -1) {
          goto LABEL_184;
        }
        goto LABEL_145;
      }
      unint64_t v63 = 2;
      v225 = (char *)(v61 + 1);
      do
      {
        uint64_t v65 = (int)v59[v63];
        uint64_t v66 = *(void *)(a1 + 496);
        uint64_t v67 = *(void *)(v66 + 104);
        if (*v59 != -1)
        {
          if (v67)
          {
            int v68 = *(_DWORD *)(v67 + 8 * v65 + 4);
            uint64_t v70 = v241;
            unint64_t v69 = v242;
            if (v241 >= (int *)v242) {
              goto LABEL_74;
            }
LABEL_49:
            *uint64_t v70 = v68;
            uint64_t v64 = (uint64_t)(v70 + 1);
LABEL_50:
            uint64_t v241 = (int *)v64;
            goto LABEL_51;
          }
          uint64_t v81 = *(void *)(v66 + 88);
          uint64_t v79 = v66 + 88;
          uint64_t v80 = v81;
          if (!v81) {
            goto LABEL_73;
          }
          uint64_t v82 = v79;
          do
          {
            int v83 = *(_DWORD *)(v80 + 28);
            BOOL v84 = v83 < (int)v65;
            if (v83 >= (int)v65) {
              uint64_t v85 = (uint64_t *)v80;
            }
            else {
              uint64_t v85 = (uint64_t *)(v80 + 8);
            }
            if (!v84) {
              uint64_t v82 = v80;
            }
            uint64_t v80 = *v85;
          }
          while (*v85);
          if (v82 == v79 || *(_DWORD *)(v82 + 28) > (int)v65)
          {
LABEL_73:
            int v68 = -1;
            uint64_t v70 = v241;
            unint64_t v69 = v242;
            if (v241 >= (int *)v242) {
              goto LABEL_74;
            }
            goto LABEL_49;
          }
          int v68 = *(_DWORD *)(v82 + 32);
          uint64_t v70 = v241;
          unint64_t v69 = v242;
          if (v241 < (int *)v242) {
            goto LABEL_49;
          }
LABEL_74:
          uint64_t v86 = v240;
          uint64_t v87 = v70 - v240;
          unint64_t v88 = v87 + 1;
          if ((unint64_t)(v87 + 1) >> 62) {
            sub_19E13D694();
          }
          uint64_t v89 = v69 - (char *)v240;
          if (v89 >> 1 > v88) {
            unint64_t v88 = v89 >> 1;
          }
          if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v90 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v90 = v88;
          }
          if (v90)
          {
            if (v90 >> 62) {
              sub_19E13C418();
            }
            unint64_t v91 = v90;
            float32x4_t v92 = operator new(4 * v90);
            unint64_t v90 = v91;
            float32x4_t v93 = (int *)&v92[4 * v87];
            int *v93 = v68;
            uint64_t v64 = (uint64_t)(v93 + 1);
            if (v70 != v86)
            {
LABEL_83:
              unint64_t v94 = (char *)(v70 - 1) - (char *)v86;
              if (v94 < 0x2C)
              {
                float32x4_t v62 = v225;
                goto LABEL_93;
              }
              float32x4_t v62 = v225;
              if ((unint64_t)((char *)v86 - v92) < 0x20) {
                goto LABEL_261;
              }
              uint64_t v95 = (v94 >> 2) + 1;
              uint64_t v96 = 4 * (v95 & 0x7FFFFFFFFFFFFFF8);
              uint64_t v97 = &v70[v96 / 0xFFFFFFFFFFFFFFFCLL];
              float32x4_t v93 = (int *)((char *)v93 - v96);
              unint64_t v98 = &v92[4 * v87 - 16];
              uint64_t v99 = v70 - 4;
              uint64_t v100 = v95 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v101 = *(_OWORD *)v99;
                *(v98 - 1) = *((_OWORD *)v99 - 1);
                *unint64_t v98 = v101;
                v98 -= 2;
                v99 -= 8;
                v100 -= 8;
              }
              while (v100);
              uint64_t v70 = v97;
              if (v95 != (v95 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_261:
                do
                {
LABEL_93:
                  int v102 = *--v70;
                  *--float32x4_t v93 = v102;
                }
                while (v70 != v86);
              }
LABEL_94:
              uint64_t v240 = v93;
              uint64_t v241 = (int *)v64;
              unint64_t v242 = &v92[4 * v90];
              if (v86) {
                operator delete(v86);
              }
              goto LABEL_50;
            }
          }
          else
          {
            float32x4_t v92 = 0;
            float32x4_t v93 = (int *)(4 * v87);
            *(_DWORD *)(4 * v87) = v68;
            uint64_t v64 = 4 * v87 + 4;
            if (v70 != v86) {
              goto LABEL_83;
            }
          }
          float32x4_t v62 = v225;
          goto LABEL_94;
        }
        if (v67)
        {
          if ((int)v65 >= *(_DWORD *)(v66 + 112)) {
            goto LABEL_86;
          }
        }
        else if ((int)v65 >= *(_DWORD *)(v66 + 96))
        {
LABEL_86:
          fprintf((FILE *)*MEMORY[0x1E4F143D8], "WARNING: Invalid (too large) Montreal id (%d) - IGNORE\n", v59[v63]);
          goto LABEL_51;
        }
        uint64_t v71 = *(void *)(v66 + 64);
        if (v71)
        {
          int v72 = *(_DWORD *)(v71 + 8 * v65 + 4);
          if (v67) {
            goto LABEL_60;
          }
        }
        else
        {
          uint64_t v103 = *(void *)(v66 + 48);
          if (!v103) {
            goto LABEL_106;
          }
          uint64_t v104 = v66 + 48;
          do
          {
            int v105 = *(_DWORD *)(v103 + 28);
            BOOL v106 = v105 < (int)v65;
            if (v105 >= (int)v65) {
              uint64_t v107 = (uint64_t *)v103;
            }
            else {
              uint64_t v107 = (uint64_t *)(v103 + 8);
            }
            if (!v106) {
              uint64_t v104 = v103;
            }
            uint64_t v103 = *v107;
          }
          while (*v107);
          if (v104 != v66 + 48 && *(_DWORD *)(v104 + 28) <= (int)v65)
          {
            int v72 = *(_DWORD *)(v104 + 32);
            if (v67)
            {
LABEL_60:
              uint64_t v73 = (int *)(v67 + 8 * v65 + 4);
              goto LABEL_61;
            }
          }
          else
          {
LABEL_106:
            int v72 = -1;
            if (v67) {
              goto LABEL_60;
            }
          }
        }
        uint64_t v110 = *(void *)(v66 + 88);
        uint64_t v108 = v66 + 88;
        uint64_t v109 = v110;
        if (v110)
        {
          uint64_t v111 = v108;
          do
          {
            int v112 = *(_DWORD *)(v109 + 28);
            BOOL v113 = v112 < (int)v65;
            if (v112 >= (int)v65) {
              uint64_t v114 = (uint64_t *)v109;
            }
            else {
              uint64_t v114 = (uint64_t *)(v109 + 8);
            }
            if (!v113) {
              uint64_t v111 = v109;
            }
            uint64_t v109 = *v114;
          }
          while (*v114);
          if (v111 != v108 && *(_DWORD *)(v111 + 28) <= (int)v65)
          {
            uint64_t v73 = (int *)(v111 + 32);
LABEL_61:
            int v74 = *v73;
            uint64_t v75 = *(void *)(a1 + 536) + 24 * v72;
            uint64_t v77 = *(char **)(v75 + 8);
            unint64_t v76 = *(void *)(v75 + 16);
            if ((unint64_t)v77 >= v76) {
              goto LABEL_118;
            }
            goto LABEL_62;
          }
        }
        int v74 = -1;
        uint64_t v75 = *(void *)(a1 + 536) + 24 * v72;
        uint64_t v77 = *(char **)(v75 + 8);
        unint64_t v76 = *(void *)(v75 + 16);
        if ((unint64_t)v77 >= v76)
        {
LABEL_118:
          uint64_t v115 = *(char **)v75;
          uint64_t v116 = (uint64_t)&v77[-*(void *)v75];
          uint64_t v117 = v116 >> 2;
          unint64_t v118 = (v116 >> 2) + 1;
          if (v118 >> 62) {
            sub_19E13D694();
          }
          uint64_t v119 = v76 - (void)v115;
          if (v119 >> 1 > v118) {
            unint64_t v118 = v119 >> 1;
          }
          if ((unint64_t)v119 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v120 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v120 = v118;
          }
          if (v120)
          {
            float32x4_t v223 = &v77[-*(void *)v75];
            if (v120 >> 62) {
              sub_19E13C418();
            }
            unint64_t v121 = v120;
            float32x4_t v122 = operator new(4 * v120);
            unint64_t v120 = v121;
            uint64_t v116 = (uint64_t)v223;
            float32x4_t v123 = (int *)&v122[4 * v117];
            int *v123 = v74;
            uint64_t v78 = (uint64_t)(v123 + 1);
            if (v77 == v115) {
              goto LABEL_137;
            }
LABEL_131:
            unint64_t v124 = v77 - 4 - v115;
            if (v124 < 0x2C) {
              goto LABEL_262;
            }
            if ((unint64_t)(v77 - &v122[v116]) < 0x20) {
              goto LABEL_262;
            }
            uint64_t v125 = (v124 >> 2) + 1;
            uint64_t v126 = 4 * (v125 & 0x7FFFFFFFFFFFFFF8);
            unint64_t v127 = &v77[-v126];
            float32x4_t v123 = (int *)((char *)v123 - v126);
            uint64_t v128 = &v122[4 * v117 - 16];
            uint64_t v129 = v77 - 16;
            uint64_t v130 = v125 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v131 = *(_OWORD *)v129;
              *(v128 - 1) = *((_OWORD *)v129 - 1);
              *uint64_t v128 = v131;
              v128 -= 2;
              v129 -= 32;
              v130 -= 8;
            }
            while (v130);
            uint64_t v77 = v127;
            if (v125 != (v125 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_262:
              do
              {
                int v132 = *((_DWORD *)v77 - 1);
                v77 -= 4;
                *--float32x4_t v123 = v132;
              }
              while (v77 != v115);
            }
          }
          else
          {
            float32x4_t v122 = 0;
            float32x4_t v123 = (int *)(4 * v117);
            *(_DWORD *)(4 * v117) = v74;
            uint64_t v78 = 4 * v117 + 4;
            if (v77 != v115) {
              goto LABEL_131;
            }
          }
LABEL_137:
          *(void *)uint64_t v75 = v123;
          *(void *)(v75 + 8) = v78;
          *(void *)(v75 + 16) = &v122[4 * v120];
          if (v115) {
            operator delete(v115);
          }
          goto LABEL_139;
        }
LABEL_62:
        *(_DWORD *)uint64_t v77 = v74;
        uint64_t v78 = (uint64_t)(v77 + 4);
LABEL_139:
        *(void *)(v75 + 8) = v78;
        float32x4_t v62 = v225;
LABEL_51:
        ++v63;
        uint64_t v59 = *(_DWORD **)a7;
      }
      while (v63 < (uint64_t)(*(void *)(a7 + 8) - *(void *)a7) >> 2);
      float32x4_t v134 = v230;
      if (*v230 == -1) {
        goto LABEL_184;
      }
LABEL_145:
      uint64_t v135 = 0;
      uint64_t v224 = v17;
      while (1)
      {
LABEL_147:
        uint64_t v136 = v134[v135];
        if ((v136 & 0x80000000) != 0
          || (int v137 = v136 + 1,
              (uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 3 <= (unint64_t)(v136 + 1)))
        {
          sub_19E2F6320(45);
        }
        float v138 = v235;
        if (v235 >= (int *)v236) {
          break;
        }
        *float32x4_t v235 = v137;
        float32x4_t v235 = v138 + 1;
        if (++v135 >= (unint64_t)((v62 - (char *)v134) >> 2)) {
          goto LABEL_171;
        }
      }
      uint64_t v139 = a7;
      uint64_t v140 = v62;
      uint64_t v231 = v134;
      uint64_t v141 = (int *)__p;
      int64_t v142 = (char *)v235 - (unsigned char *)__p;
      uint64_t v143 = ((char *)v235 - (unsigned char *)__p) >> 2;
      unint64_t v144 = v143 + 1;
      if ((unint64_t)(v143 + 1) >> 62) {
        sub_19E13D694();
      }
      uint64_t v145 = v236 - (unsigned char *)__p;
      if ((v236 - (unsigned char *)__p) >> 1 > v144) {
        unint64_t v144 = v145 >> 1;
      }
      if ((unint64_t)v145 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v146 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v146 = v144;
      }
      if (!v146)
      {
        BOOL v148 = 0;
        uint64_t v149 = (char *)(4 * v143);
        *(_DWORD *)(4 * v143) = v137;
        uint64_t v150 = 4 * v143 + 4;
        if (v138 != v141) {
          goto LABEL_159;
        }
LABEL_162:
        float32x4_t v62 = v140;
        a7 = v139;
        uint64_t v17 = v224;
        goto LABEL_168;
      }
      if (v146 >> 62) {
        sub_19E13C418();
      }
      unint64_t v147 = v146;
      BOOL v148 = (char *)operator new(4 * v146);
      unint64_t v146 = v147;
      uint64_t v149 = &v148[4 * v143];
      *(_DWORD *)uint64_t v149 = v137;
      uint64_t v150 = (uint64_t)(v149 + 4);
      if (v138 == v141) {
        goto LABEL_162;
      }
LABEL_159:
      unint64_t v151 = (char *)(v138 - 1) - (char *)v141;
      if (v151 < 0x2C)
      {
        float32x4_t v62 = v140;
        a7 = v139;
        uint64_t v17 = v224;
        goto LABEL_167;
      }
      unint64_t v152 = (char *)v138 - &v148[v142];
      float32x4_t v62 = v140;
      a7 = v139;
      uint64_t v17 = v224;
      if (v152 < 0x20) {
        goto LABEL_263;
      }
      uint64_t v153 = (v151 >> 2) + 1;
      uint64_t v154 = 4 * (v153 & 0x7FFFFFFFFFFFFFF8);
      unint64_t v155 = &v138[v154 / 0xFFFFFFFFFFFFFFFCLL];
      v149 -= v154;
      float32x4_t v156 = &v148[4 * v143 - 16];
      uint64_t v157 = (long long *)(v138 - 4);
      uint64_t v158 = v153 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v159 = *v157;
        *((_OWORD *)v156 - 1) = *(v157 - 1);
        *(_OWORD *)float32x4_t v156 = v159;
        v156 -= 32;
        v157 -= 2;
        v158 -= 8;
      }
      while (v158);
      float v138 = v155;
      if (v153 != (v153 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_263:
        do
        {
LABEL_167:
          int v160 = *--v138;
          *((_DWORD *)v149 - 1) = v160;
          v149 -= 4;
        }
        while (v138 != v141);
      }
LABEL_168:
      __p = v149;
      float32x4_t v235 = (int *)v150;
      float32x4_t v236 = &v148[4 * v146];
      if (v141) {
        operator delete(v141);
      }
      float32x4_t v134 = v231;
      float32x4_t v235 = (int *)v150;
      if (++v135 < (unint64_t)((v62 - (char *)v231) >> 2)) {
        goto LABEL_147;
      }
LABEL_171:
      if (v134) {
        goto LABEL_211;
      }
LABEL_212:
      p_p = &__p;
LABEL_213:
      bzero(*(void **)(*(void *)(a1 + 104) + 8 * v17), 4 * *(int *)(a1 + 348));
      float32x4_t v197 = (int *)*p_p;
      a2 = v227;
      a3 = v228;
      if (p_p[1] != *p_p)
      {
        unint64_t v198 = 0;
        while (1)
        {
          uint64_t v199 = v197[v198];
          uint64_t v200 = *(void *)(a1 + 304);
          if (!*(_DWORD *)(v200 + 4 * v199))
          {
            *(_DWORD *)(v200 + 4 * v199) = 1;
            uint64_t v201 = *(void *)(*(void *)(a1 + 80) + 8 * v199);
            (*(void (**)(uint64_t, uint64_t))(*(void *)v201 + 256))(v201, v229);
          }
          uint64_t v202 = *(void *)(a7 + 8) != *(void *)a7 && **(_DWORD **)a7 == -1
               ? (void **)(*(void *)(a1 + 536) + 24 * (int)v199 - 24)
               : (void **)&v240;
          uint64_t v203 = *(void *)(*(void *)(a1 + 80) + 8 * v199);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void **))(*(void *)v203 + 224))(v203, v227, v228, v17, v202);
          uint64_t v204 = *(void *)(*(void *)(a1 + 80) + 8 * v199);
          v205 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v204 + 32))(v204);
          uint64_t v206 = *(void *)(a1 + 256);
          if ((*(_DWORD *)(a1 + 328) - 3) >= 2) {
            break;
          }
          unint64_t v207 = *(unsigned int *)(v206 + 4 * v199);
          if ((int)v207 >= 1)
          {
            float v208 = *(float *)(*(void *)(*v233 + 8 * v17) + 4 * v199 - 4);
            float32x4_t v209 = *(float32x4_t **)(*v205 + 8 * v17);
            if (v207 < 8)
            {
              unint64_t v210 = 0;
              goto LABEL_230;
            }
            unint64_t v210 = v207 & 0x7FFFFFF8;
            int v211 = v209 + 1;
            uint64_t v212 = v207 & 0xFFFFFFF8;
            do
            {
              float32x4_t v213 = vmulq_n_f32(*v211, v208);
              v211[-1] = vmulq_n_f32(v211[-1], v208);
              *int v211 = v213;
              v211 += 2;
              v212 -= 8;
            }
            while (v212);
            if (v210 != v207)
            {
LABEL_230:
              unint64_t v214 = v207 - v210;
              unint64_t v215 = &v209->f32[v210];
              do
              {
                *unint64_t v215 = *v215 * v208;
                ++v215;
                --v214;
              }
              while (v214);
            }
LABEL_232:
            if ((int)v207 >= 1)
            {
              unint64_t v216 = *(int **)(*(void *)(*(void *)(a1 + 496) + 120) + 24 * (int)v199 - 24);
              unint64_t v217 = *(_DWORD **)(*v205 + 8 * v17);
              uint64_t v218 = *(void *)(*(void *)(a1 + 104) + 8 * v17);
              do
              {
                uint64_t v220 = *v216++;
                uint64_t v219 = v220;
                LODWORD(v220) = *v217++;
                *(_DWORD *)(v218 + 4 * v219) = v220;
                --v207;
              }
              while (v207);
            }
          }
          ++v198;
          float32x4_t v197 = (int *)*p_p;
          if (v198 >= ((unsigned char *)p_p[1] - (unsigned char *)*p_p) >> 2) {
            goto LABEL_236;
          }
        }
        unint64_t v207 = *(unsigned int *)(v206 + 4 * v199);
        goto LABEL_232;
      }
LABEL_236:
      uint64_t v221 = *(void *)(a1 + 104);
      vDSP_Length v222 = *(int *)(a1 + 348);
      __C[0] = 0.0;
      vDSP_sve(*(const float **)(v221 + 8 * v17), 1, __C, v222);
      if (__p)
      {
        float32x4_t v235 = (int *)__p;
        operator delete(__p);
      }
      if (v237)
      {
        int v238 = v237;
        operator delete(v237);
      }
      ++v17;
    }
    while (v17 != v229);
  }
  if (v240)
  {
    uint64_t v241 = v240;
    operator delete(v240);
  }
}

void sub_19E209130(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  unint64_t v26 = *(void **)(v24 - 120);
  if (!v26) {
    _Unwind_Resume(exception_object);
  }
  *(void *)(v24 - 112) = v26;
  operator delete(v26);
  _Unwind_Resume(exception_object);
}

void *sub_19E209228(uint64_t a1, void *lpsrc, uint64_t a3, float a4, float a5)
{
  uint64_t result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3CD0, 0);
  if (!result) {
    __cxa_bad_cast();
  }
  int v10 = *(_DWORD *)(a1 + 340);
  if ((v10 & 0x80000000) == 0)
  {
    uint64_t v11 = (uint64_t)result;
    uint64_t v12 = 0;
    do
    {
      if (*(int *)(*(void *)(v11 + 304) + 4 * v12) >= 1)
      {
        uint64_t v14 = *(void *)(*(void *)(a1 + 80) + 8 * v12);
        uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void, uint64_t, float, float))(*(void *)v14 + 336))(v14, *(void *)(*(void *)(v11 + 80) + 8 * v12), a3, a4, a5);
        int v10 = *(_DWORD *)(a1 + 340);
      }
    }
    while (v12++ < v10);
  }
  return result;
}

uint64_t sub_19E209338(uint64_t result, uint64_t a2, uint64_t a3, int a4, _DWORD *a5, uint64_t a6)
{
  if (a4 >= 1)
  {
    uint64_t v19 = v6;
    uint64_t v20 = v7;
    uint64_t v10 = result;
    uint64_t v11 = 0;
    uint64_t v12 = a4;
    do
    {
      int v18 = 0;
      uint64_t v13 = *(int *)(v10 + 332);
      uint64_t v14 = *(void *)(*(void *)(v10 + 80) + 8 * v13);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, int *, uint64_t))(*(void *)v14 + 240))(v14, *(void *)(v10 + 200) + 24 * v13, *(void *)(v10 + 472) + 24 * v13, v11, &v18, a6);
      int v17 = 0;
      uint64_t v15 = *(int *)(*(void *)(v10 + 400) + 4 * v11);
      uint64_t v16 = *(void *)(*(void *)(v10 + 80) + 8 * v15);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, int *, uint64_t))(*(void *)v16 + 240))(v16, *(void *)(v10 + 200) + 24 * (int)v15, *(void *)(v10 + 472) + 24 * *(int *)(v10 + 336), v11, &v17, a6);
      if (v18 == 1 || v17 == 1) {
        ++*a5;
      }
      ++v11;
    }
    while (v12 != v11);
  }
  return result;
}

float sub_19E209478(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v13 = 0;
  if (a3 < 1) {
    return 0.0;
  }
  uint64_t v4 = 0;
  uint64_t v5 = a3;
  float v6 = 0.0;
  do
  {
    uint64_t v7 = *(int *)(a1 + 332);
    uint64_t v8 = *(void *)(*(void *)(a1 + 80) + 8 * v7);
    (*(void (**)(uint64_t, uint64_t, char *, uint64_t))(*(void *)v8 + 232))(v8, *(void *)(a1 + 200) + 24 * (int)v7, (char *)&v13 + 4, v4);
    uint64_t v9 = *(int *)(*(void *)(a1 + 400) + 4 * v4);
    uint64_t v10 = *(void *)(*(void *)(a1 + 80) + 8 * v9);
    (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(*(void *)v10 + 232))(v10, *(void *)(a1 + 200) + 24 * (int)v9, &v13, v4);
    float v11 = *((float *)&v13 + 1);
    if ((*(_DWORD *)(a1 + 328) - 3) < 2) {
      float v11 = -0.0;
    }
    float v6 = (float)(*(float *)&v13 + v6) + v11;
    ++v4;
  }
  while (v5 != v4);
  return v6;
}

void sub_19E20958C(void *a1)
{
  uint64_t v1 = sub_19E2095B4(a1);

  operator delete(v1);
}

void *sub_19E2095B4(void *a1)
{
  *a1 = &unk_1EF0A5858;
  uint64_t v3 = a1[35];
  uint64_t v2 = a1[36];
  if (v2 == v3)
  {
    uint64_t v3 = a1[36];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void ***)(v3 + 8 * v4);
      if (*v5)
      {
        operator delete[](*v5);
        void *v5 = 0;
        uint64_t v3 = a1[35];
        uint64_t v2 = a1[36];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  a1[36] = v3;
  uint64_t v6 = a1[67];
  if (v6)
  {
    uint64_t v7 = a1[68];
    uint64_t v8 = (void *)a1[67];
    if (v7 != v6)
    {
      uint64_t v9 = a1[68];
      do
      {
        float v11 = *(void **)(v9 - 24);
        v9 -= 24;
        uint64_t v10 = v11;
        if (v11)
        {
          *(void *)(v7 - 16) = v10;
          operator delete(v10);
        }
        uint64_t v7 = v9;
      }
      while (v9 != v6);
      uint64_t v8 = (void *)a1[67];
    }
    a1[68] = v6;
    operator delete(v8);
  }
  uint64_t v12 = (void *)a1[63];
  if (v12)
  {
    a1[64] = v12;
    operator delete(v12);
  }
  uint64_t v13 = a1[59];
  if (v13)
  {
    uint64_t v14 = a1[60];
    uint64_t v15 = (void *)a1[59];
    if (v14 != v13)
    {
      uint64_t v16 = a1[60];
      do
      {
        int v18 = *(void **)(v16 - 24);
        v16 -= 24;
        int v17 = v18;
        if (v18)
        {
          *(void *)(v14 - 16) = v17;
          operator delete(v17);
        }
        uint64_t v14 = v16;
      }
      while (v16 != v13);
      uint64_t v15 = (void *)a1[59];
    }
    a1[60] = v13;
    operator delete(v15);
  }
  uint64_t v19 = (void *)a1[56];
  if (v19)
  {
    a1[57] = v19;
    operator delete(v19);
  }
  uint64_t v20 = (void *)a1[53];
  if (v20)
  {
    a1[54] = v20;
    operator delete(v20);
  }
  uint64_t v21 = (void *)a1[50];
  if (v21)
  {
    a1[51] = v21;
    operator delete(v21);
  }
  uint64_t v22 = (void *)a1[47];
  if (v22)
  {
    a1[48] = v22;
    operator delete(v22);
  }
  uint64_t v23 = (void *)a1[44];
  if (v23)
  {
    a1[45] = v23;
    operator delete(v23);
  }
  uint64_t v24 = (void *)a1[38];
  if (v24)
  {
    a1[39] = v24;
    operator delete(v24);
  }
  int v25 = (void *)a1[35];
  if (v25)
  {
    a1[36] = v25;
    operator delete(v25);
  }

  return sub_19E1CDA54(a1);
}

void sub_19E20976C(uint64_t a1, int a2, int a3, _DWORD **a4, int a5, int a6, uint64_t a7, int a8, uint64_t a9, char a10)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF0A6860;
  *(_DWORD *)(a1 + 44) = a2;
  *(_DWORD *)(a1 + 52) = a3;
  *(_DWORD *)(a1 + 56) = a6;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(unsigned char *)(a1 + 1072) = 0;
  *(unsigned char *)(a1 + 1192) = 0;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(unsigned char *)(a1 + 1312) = 0;
  *(_OWORD *)(a1 + 1296) = 0u;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1368) = 0u;
  *(_OWORD *)(a1 + 1384) = 0u;
  *(_OWORD *)(a1 + 1400) = 0u;
  *(_OWORD *)(a1 + 1416) = 0u;
  *(unsigned char *)(a1 + 1432) = 0;
  bzero((void *)(a1 + 64), 0x2A0uLL);
  *(_OWORD *)(a1 + 988) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1108) = 0u;
  *(_OWORD *)(a1 + 1228) = 0u;
  *(_OWORD *)(a1 + 1216) = 0u;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(_OWORD *)(a1 + 1348) = 0u;
  *(_OWORD *)(a1 + 1320) = 0u;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_OWORD *)(a1 + 1536) = 0u;
  *(_OWORD *)(a1 + 1520) = 0u;
  *(_OWORD *)(a1 + 1504) = 0u;
  *(_OWORD *)(a1 + 1488) = 0u;
  *(_OWORD *)(a1 + 1472) = 0u;
  *(_OWORD *)(a1 + 1456) = 0u;
  *(_OWORD *)(a1 + 1440) = 0u;
  *(_OWORD *)(a1 + 1640) = 0u;
  *(_OWORD *)(a1 + 1656) = 0u;
  *(_OWORD *)(a1 + 1672) = 0u;
  *(void *)(a1 + 1688) = 0;
  sub_19E3030A0(a1 + 1704);
  sub_19E3030A0(a1 + 1776);
  sub_19E3030A0(a1 + 1848);
  sub_19E3030A0(a1 + 1920);
  sub_19E3030A0(a1 + 1992);
  sub_19E3030A0(a1 + 2064);
  sub_19E3030A0(a1 + 2136);
  sub_19E3030A0(a1 + 2208);
  sub_19E3030A0(a1 + 2280);
  sub_19E3030A0(a1 + 2352);
  sub_19E3030A0(a1 + 2424);
  *(_DWORD *)(a1 + 2496) = a5;
  *(_OWORD *)(a1 + 2624) = 0u;
  *(_OWORD *)(a1 + 2640) = 0u;
  *(_OWORD *)(a1 + 2656) = 0u;
  (*(void (**)(uint64_t))(*(void *)a1 + 192))(a1);
  int v14 = *(unsigned __int8 *)(a7 + 45);
  *(unsigned char *)(a1 + 2692) = v14 ^ 1;
  *(unsigned char *)(a1 + 2672) = 0;
  *(unsigned char *)(a1 + 41) = 0;
  *(void *)(a1 + 2680) = a9;
  if (a9)
  {
    int v15 = *(unsigned __int8 *)(a9 + 376);
    *(_DWORD *)(a1 + 2688) = *(_DWORD *)(a9 + 28);
    nullsub_171("LSTM constructor");
    int v16 = v15 ^ 1;
    a8 = *(unsigned __int8 *)(*(void *)(a1 + 2680) + 376);
    *(unsigned char *)(a1 + 40) = a8;
    int v14 = *(unsigned __int8 *)(a7 + 45);
  }
  else
  {
    int v16 = 1;
    *(_DWORD *)(a1 + 2688) = 1;
    *(unsigned char *)(a1 + 40) = a8;
  }
  *(unsigned char *)(a1 + 1696) = v14;
  *(unsigned char *)(a1 + 1697) = *(unsigned char *)(a7 + 46);
  int v17 = *a4;
  *(_DWORD *)(a1 + 736) = **a4;
  *(_DWORD *)(a1 + 740) = v17[1];
  *(_DWORD *)(a1 + 744) = v17[2];
  if (!a8) {
    int v16 = 0;
  }
  *(_DWORD *)(a1 + 48) = v16 + *(_DWORD *)(a1 + 44);
  if (a10)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
    *(unsigned char *)(a1 + 2672) = 1;
    int v14 = *(unsigned __int8 *)(a1 + 1696);
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a7 + 16);
  *(_OWORD *)(a1 + 1552) = 0u;
  *(_OWORD *)(a1 + 1568) = 0u;
  *(_OWORD *)(a1 + 1584) = 0u;
  *(_OWORD *)(a1 + 1600) = 0u;
  *(_OWORD *)(a1 + 1616) = 0u;
  *(void *)(a1 + 1632) = 0;
  if (!v14)
  {
    int v18 = *(_DWORD *)(a7 + 32);
    switch(v18)
    {
      case 2:
        operator new();
      case 1:
        operator new();
      case 0:
        operator new();
    }
  }
  strcpy((char *)operator new(0x20uLL), "LSTM alloc, from constructor");
  sub_19E20AAB4();
}

void sub_19E20A57C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, void **a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  operator delete(v57);
  unint64_t v98 = (void **)(v56 + 328);
  uint64_t v99 = (void *)v56[331];
  if (v99)
  {
    v56[332] = v99;
    operator delete(v99);
    uint64_t v65 = *v98;
    if (!*v98)
    {
LABEL_6:
      sub_19E3030E8(v62);
      sub_19E3030E8(v58);
      sub_19E3030E8(a9);
      sub_19E3030E8(a10);
      sub_19E3030E8(a11);
      sub_19E3030E8(a12);
      sub_19E3030E8(v63);
      sub_19E3030E8(v61);
      sub_19E3030E8(v60);
      sub_19E3030E8(v59);
      sub_19E3030E8(a13);
      sub_19E1C6038(a15);
      sub_19E1C6038(a16);
      sub_19E1C6038(a14);
      sub_19E1C6038(a17);
      uint64_t v66 = (void *)v56[120];
      if (v66)
      {
        v56[121] = v66;
        operator delete(v66);
        uint64_t v67 = (void *)v56[117];
        if (!v67)
        {
LABEL_8:
          int v68 = (void *)v56[114];
          if (!v68) {
            goto LABEL_9;
          }
          goto LABEL_40;
        }
      }
      else
      {
        uint64_t v67 = (void *)v56[117];
        if (!v67) {
          goto LABEL_8;
        }
      }
      v56[118] = v67;
      operator delete(v67);
      int v68 = (void *)v56[114];
      if (!v68)
      {
LABEL_9:
        unint64_t v69 = (void *)v56[111];
        if (!v69) {
          goto LABEL_10;
        }
        goto LABEL_41;
      }
LABEL_40:
      v56[115] = v68;
      operator delete(v68);
      unint64_t v69 = (void *)v56[111];
      if (!v69)
      {
LABEL_10:
        uint64_t v70 = (void *)v56[108];
        if (!v70) {
          goto LABEL_11;
        }
        goto LABEL_42;
      }
LABEL_41:
      v56[112] = v69;
      operator delete(v69);
      uint64_t v70 = (void *)v56[108];
      if (!v70)
      {
LABEL_11:
        uint64_t v71 = (void *)v56[105];
        if (!v71) {
          goto LABEL_12;
        }
        goto LABEL_43;
      }
LABEL_42:
      v56[109] = v70;
      operator delete(v70);
      uint64_t v71 = (void *)v56[105];
      if (!v71)
      {
LABEL_12:
        int v72 = (void *)v56[102];
        if (!v72) {
          goto LABEL_13;
        }
        goto LABEL_44;
      }
LABEL_43:
      v56[106] = v71;
      operator delete(v71);
      int v72 = (void *)v56[102];
      if (!v72)
      {
LABEL_13:
        uint64_t v73 = (void *)v56[99];
        if (!v73) {
          goto LABEL_14;
        }
        goto LABEL_45;
      }
LABEL_44:
      v56[103] = v72;
      operator delete(v72);
      uint64_t v73 = (void *)v56[99];
      if (!v73)
      {
LABEL_14:
        int v74 = (void *)v56[89];
        if (!v74) {
          goto LABEL_15;
        }
        goto LABEL_46;
      }
LABEL_45:
      v56[100] = v73;
      operator delete(v73);
      int v74 = (void *)v56[89];
      if (!v74)
      {
LABEL_15:
        uint64_t v75 = (void *)v56[86];
        if (!v75) {
          goto LABEL_16;
        }
        goto LABEL_47;
      }
LABEL_46:
      v56[90] = v74;
      operator delete(v74);
      uint64_t v75 = (void *)v56[86];
      if (!v75)
      {
LABEL_16:
        unint64_t v76 = (void *)v56[83];
        if (!v76) {
          goto LABEL_17;
        }
        goto LABEL_48;
      }
LABEL_47:
      v56[87] = v75;
      operator delete(v75);
      unint64_t v76 = (void *)v56[83];
      if (!v76)
      {
LABEL_17:
        uint64_t v77 = (void *)v56[80];
        if (!v77) {
          goto LABEL_18;
        }
        goto LABEL_49;
      }
LABEL_48:
      v56[84] = v76;
      operator delete(v76);
      uint64_t v77 = (void *)v56[80];
      if (!v77)
      {
LABEL_18:
        uint64_t v78 = (void *)v56[77];
        if (!v78) {
          goto LABEL_19;
        }
        goto LABEL_50;
      }
LABEL_49:
      v56[81] = v77;
      operator delete(v77);
      uint64_t v78 = (void *)v56[77];
      if (!v78)
      {
LABEL_19:
        uint64_t v79 = (void *)v56[74];
        if (!v79) {
          goto LABEL_20;
        }
        goto LABEL_51;
      }
LABEL_50:
      v56[78] = v78;
      operator delete(v78);
      uint64_t v79 = (void *)v56[74];
      if (!v79)
      {
LABEL_20:
        uint64_t v80 = (void *)v56[71];
        if (!v80) {
          goto LABEL_21;
        }
        goto LABEL_52;
      }
LABEL_51:
      v56[75] = v79;
      operator delete(v79);
      uint64_t v80 = (void *)v56[71];
      if (!v80)
      {
LABEL_21:
        uint64_t v81 = (void *)v56[68];
        if (!v81) {
          goto LABEL_22;
        }
        goto LABEL_53;
      }
LABEL_52:
      v56[72] = v80;
      operator delete(v80);
      uint64_t v81 = (void *)v56[68];
      if (!v81)
      {
LABEL_22:
        uint64_t v82 = (void *)v56[65];
        if (!v82) {
          goto LABEL_23;
        }
        goto LABEL_54;
      }
LABEL_53:
      v56[69] = v81;
      operator delete(v81);
      uint64_t v82 = (void *)v56[65];
      if (!v82)
      {
LABEL_23:
        int v83 = (void *)v56[62];
        if (!v83) {
          goto LABEL_24;
        }
        goto LABEL_55;
      }
LABEL_54:
      v56[66] = v82;
      operator delete(v82);
      int v83 = (void *)v56[62];
      if (!v83)
      {
LABEL_24:
        BOOL v84 = (void *)v56[59];
        if (!v84) {
          goto LABEL_25;
        }
        goto LABEL_56;
      }
LABEL_55:
      v56[63] = v83;
      operator delete(v83);
      BOOL v84 = (void *)v56[59];
      if (!v84)
      {
LABEL_25:
        uint64_t v85 = (void *)v56[56];
        if (!v85) {
          goto LABEL_26;
        }
        goto LABEL_57;
      }
LABEL_56:
      v56[60] = v84;
      operator delete(v84);
      uint64_t v85 = (void *)v56[56];
      if (!v85)
      {
LABEL_26:
        uint64_t v86 = (void *)v56[53];
        if (!v86) {
          goto LABEL_27;
        }
        goto LABEL_58;
      }
LABEL_57:
      v56[57] = v85;
      operator delete(v85);
      uint64_t v86 = (void *)v56[53];
      if (!v86)
      {
LABEL_27:
        uint64_t v87 = (void *)v56[50];
        if (!v87) {
          goto LABEL_28;
        }
        goto LABEL_59;
      }
LABEL_58:
      v56[54] = v86;
      operator delete(v86);
      uint64_t v87 = (void *)v56[50];
      if (!v87)
      {
LABEL_28:
        unint64_t v88 = (void **)(v56 + 26);
        uint64_t v89 = (void *)v56[47];
        if (!v89) {
          goto LABEL_29;
        }
        goto LABEL_60;
      }
LABEL_59:
      v56[51] = v87;
      operator delete(v87);
      unint64_t v88 = (void **)(v56 + 26);
      uint64_t v89 = (void *)v56[47];
      if (!v89)
      {
LABEL_29:
        unint64_t v90 = (void *)v56[44];
        if (!v90) {
          goto LABEL_30;
        }
        goto LABEL_61;
      }
LABEL_60:
      v56[48] = v89;
      operator delete(v89);
      unint64_t v90 = (void *)v56[44];
      if (!v90)
      {
LABEL_30:
        sub_19E14315C(v88);
        unint64_t v91 = (void *)v56[23];
        if (!v91) {
          goto LABEL_31;
        }
        goto LABEL_62;
      }
LABEL_61:
      v56[45] = v90;
      operator delete(v90);
      sub_19E14315C(v88);
      unint64_t v91 = (void *)v56[23];
      if (!v91)
      {
LABEL_31:
        float32x4_t v92 = (void *)v56[20];
        if (!v92) {
          goto LABEL_32;
        }
        goto LABEL_63;
      }
LABEL_62:
      v56[24] = v91;
      operator delete(v91);
      float32x4_t v92 = (void *)v56[20];
      if (!v92)
      {
LABEL_32:
        float32x4_t v93 = (void *)v56[17];
        if (!v93) {
          goto LABEL_33;
        }
        goto LABEL_64;
      }
LABEL_63:
      v56[21] = v92;
      operator delete(v92);
      float32x4_t v93 = (void *)v56[17];
      if (!v93)
      {
LABEL_33:
        unint64_t v94 = (void *)v56[14];
        if (!v94) {
          goto LABEL_34;
        }
        goto LABEL_65;
      }
LABEL_64:
      v56[18] = v93;
      operator delete(v93);
      unint64_t v94 = (void *)v56[14];
      if (!v94)
      {
LABEL_34:
        uint64_t v95 = (void *)v56[11];
        if (!v95) {
          goto LABEL_35;
        }
        goto LABEL_66;
      }
LABEL_65:
      v56[15] = v94;
      operator delete(v94);
      uint64_t v95 = (void *)v56[11];
      if (!v95)
      {
LABEL_35:
        uint64_t v96 = *a18;
        if (!*a18) {
          goto LABEL_36;
        }
        goto LABEL_67;
      }
LABEL_66:
      v56[12] = v95;
      operator delete(v95);
      uint64_t v96 = *a18;
      if (!*a18)
      {
LABEL_36:
        *int v56 = a19;
        uint64_t v97 = (void *)v56[1];
        if (!v97) {
          goto LABEL_37;
        }
        goto LABEL_68;
      }
LABEL_67:
      v56[9] = v96;
      operator delete(v96);
      *int v56 = a19;
      uint64_t v97 = (void *)v56[1];
      if (!v97) {
LABEL_37:
      }
        _Unwind_Resume(a1);
LABEL_68:
      v56[2] = v97;
      operator delete(v97);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v65 = *v98;
    if (!*v98) {
      goto LABEL_6;
    }
  }
  v56[329] = v65;
  operator delete(v65);
  goto LABEL_6;
}

void sub_19E20AAB4()
{
}

void sub_19E211B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_19E1C6038((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19E211B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_19E1C6038((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19E211B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_19E1C6038((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19E211B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_19E1C6038((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19E211B5C()
{
}

uint64_t sub_19E211B70(uint64_t a1)
{
  return a1 + 64;
}

uint64_t *sub_19E211B78(void *a1)
{
  uint64_t v2 = a1 + 99;
  uint64_t v3 = a1[20];
  uint64_t v4 = a1[21];
  unint64_t v5 = (v4 - v3) >> 3;
  uint64_t v6 = a1[99];
  unint64_t v7 = (a1[100] - v6) >> 3;
  if (v5 <= v7)
  {
    if (v5 < v7) {
      a1[100] = v6 + 8 * v5;
    }
  }
  else
  {
    sub_19E1599BC((void **)a1 + 99, v5 - v7);
    uint64_t v3 = a1[20];
    uint64_t v4 = a1[21];
    unint64_t v5 = (v4 - v3) >> 3;
  }
  if (v4 != v3)
  {
    uint64_t v8 = *v2;
    if (v5 <= 1) {
      unint64_t v9 = 1;
    }
    else {
      unint64_t v9 = v5;
    }
    if (v9 < 4)
    {
      unint64_t v10 = 0;
LABEL_14:
      int v15 = (void *)(v8 + 8 * v10);
      int v16 = (uint64_t *)(v3 + 8 * v10);
      unint64_t v17 = v9 - v10;
      do
      {
        uint64_t v18 = *v16++;
        *v15++ = v18;
        --v17;
      }
      while (v17);
      return v2;
    }
    unint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFCLL;
    float v11 = (long long *)(v3 + 16);
    uint64_t v12 = (_OWORD *)(v8 + 16);
    unint64_t v13 = v9 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      long long v14 = *v11;
      *(v12 - 1) = *(v11 - 1);
      *uint64_t v12 = v14;
      v11 += 2;
      v12 += 2;
      v13 -= 4;
    }
    while (v13);
    if (v9 != v10) {
      goto LABEL_14;
    }
  }
  return v2;
}

void sub_19E211C5C()
{
}

uint64_t sub_19E211C70(uint64_t a1)
{
  return a1 + 816;
}

uint64_t sub_19E211C78()
{
  return 0;
}

unsigned char *sub_19E211C80(uint64_t a1, uint64_t a2, int *a3, int a4)
{
  if (!a2) {
LABEL_21:
  }
    sub_19E2F6320(3);
  int v7 = *(_DWORD *)(a2 + 72);
  uint64_t v8 = *(void *)a2;
  unint64_t v9 = (int *)(*(void *)a2 + v7);
  unint64_t v10 = *(void *)a2 + *(void *)(a2 + 8) - 4;
  if ((unint64_t)v9 <= v10)
  {
    int v11 = *v9;
    v7 += 4;
    *(_DWORD *)(a2 + 72) = v7;
    uint64_t v12 = (int *)(v8 + v7);
    if ((unint64_t)v12 <= v10)
    {
LABEL_4:
      int v13 = *v12;
      v7 += 4;
      *(_DWORD *)(a2 + 72) = v7;
      if (a4 < 1) {
        goto LABEL_16;
      }
LABEL_8:
      uint64_t v14 = v7;
      int v15 = (int *)(v8 + v7);
      if ((unint64_t)v15 <= v10)
      {
        int v19 = *v15;
        v7 += 4;
        *(_DWORD *)(a2 + 72) = v7;
        uint64_t v14 = v7;
        *(_DWORD *)(a1 + 736) = v19;
        uint64_t v20 = (int *)(v8 + v7);
        if ((unint64_t)v20 <= v10)
        {
          int v16 = *v20;
          v7 += 4;
          *(_DWORD *)(a2 + 72) = v7;
          *(_DWORD *)(a1 + 740) = v16;
          unint64_t v17 = (int *)(v8 + v7);
          if ((unint64_t)v17 > v10)
          {
LABEL_14:
            int v18 = 0;
            goto LABEL_15;
          }
LABEL_11:
          int v18 = *v17;
          *(_DWORD *)(a2 + 72) = v7 + 4;
LABEL_15:
          *(_DWORD *)(a1 + 744) = v18;
          goto LABEL_16;
        }
      }
      else
      {
        *(_DWORD *)(a1 + 736) = 0;
      }
      *(_DWORD *)(a1 + 740) = 0;
      unint64_t v17 = (int *)(v8 + v14);
      if ((unint64_t)v17 > v10) {
        goto LABEL_14;
      }
      goto LABEL_11;
    }
  }
  else
  {
    int v11 = 0;
    uint64_t v12 = (int *)(v8 + v7);
    if ((unint64_t)v12 <= v10) {
      goto LABEL_4;
    }
  }
  int v13 = 0;
  if (a4 >= 1) {
    goto LABEL_8;
  }
LABEL_16:
  if (*(_DWORD *)(a1 + 52) != v11 || *(_DWORD *)(a1 + 48) != v13) {
    goto LABEL_21;
  }
  uint64_t v21 = *(unsigned char **)(a1 + 2568);
  int v22 = *a3;
  int v23 = *(unsigned __int8 *)(a1 + 1697);
  int v24 = sub_19E2F62F0();
  sub_19E1C6130(v21, (uint64_t *)a2, v22, v23, v24, *(_DWORD *)(a1 + 52));
  int v25 = *(unsigned char **)(a1 + 2576);
  int v26 = *a3;
  int v27 = *(unsigned __int8 *)(a1 + 1697);
  int v28 = sub_19E2F62F0();
  sub_19E1C6130(v25, (uint64_t *)a2, v26, v27, v28, *(_DWORD *)(a1 + 52));
  unint64_t v29 = *(unsigned char **)(a1 + 2584);
  int v30 = *a3;
  int v31 = *(unsigned __int8 *)(a1 + 1697);
  int v32 = sub_19E2F62F0();
  sub_19E1C6130(v29, (uint64_t *)a2, v30, v31, v32, *(_DWORD *)(a1 + 52));
  int v33 = *(unsigned char **)(a1 + 2504);
  int v34 = *a3;
  int v35 = *(unsigned __int8 *)(a1 + 1697);
  int v36 = sub_19E2F62F0();
  sub_19E1C632C(v33, (uint64_t *)a2, v34, v35, v36, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
  float v37 = *(unsigned char **)(a1 + 2512);
  int v38 = *a3;
  int v39 = *(unsigned __int8 *)(a1 + 1697);
  int v40 = sub_19E2F62F0();
  sub_19E1C632C(v37, (uint64_t *)a2, v38, v39, v40, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
  uint64_t v41 = *(unsigned char **)(a1 + 2520);
  int v42 = *a3;
  int v43 = *(unsigned __int8 *)(a1 + 1697);
  int v44 = sub_19E2F62F0();
  sub_19E1C632C(v41, (uint64_t *)a2, v42, v43, v44, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
  float v45 = *(unsigned char **)(a1 + 2528);
  int v46 = *a3;
  int v47 = *(unsigned __int8 *)(a1 + 1697);
  int v48 = sub_19E2F62F0();
  sub_19E1C632C(v45, (uint64_t *)a2, v46, v47, v48, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
  uint64_t v49 = *(unsigned char **)(a1 + 2536);
  int v50 = *a3;
  int v51 = *(unsigned __int8 *)(a1 + 1697);
  int v52 = sub_19E2F62F0();
  sub_19E1C632C(v49, (uint64_t *)a2, v50, v51, v52, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52));
  int v53 = *(unsigned char **)(a1 + 2544);
  int v54 = *a3;
  int v55 = *(unsigned __int8 *)(a1 + 1697);
  int v56 = sub_19E2F62F0();
  sub_19E1C632C(v53, (uint64_t *)a2, v54, v55, v56, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52));
  unint64_t v57 = *(unsigned char **)(a1 + 2552);
  int v58 = *a3;
  int v59 = *(unsigned __int8 *)(a1 + 1697);
  int v60 = sub_19E2F62F0();
  sub_19E1C632C(v57, (uint64_t *)a2, v58, v59, v60, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52));
  uint64_t v61 = *(unsigned char **)(a1 + 2560);
  int v62 = *a3;
  int v63 = *(unsigned __int8 *)(a1 + 1697);
  int v64 = sub_19E2F62F0();
  int v65 = *(_DWORD *)(a1 + 52);

  return sub_19E1C632C(v61, (uint64_t *)a2, v62, v63, v64, v65, v65);
}

uint64_t sub_19E212008(uint64_t a1, FILE *__stream, int *a3, int a4, unsigned int a5)
{
  if (!__stream) {
    sub_19E2F6320(3);
  }
  int v10 = *(_DWORD *)(a1 + 48);
  sub_19E2F6788(__stream, a3, *(_DWORD *)(a1 + 52));
  sub_19E2F6788(__stream, a3, v10);
  if (a4 >= 1)
  {
    int __ptr = *(_DWORD *)(a1 + 736);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    int __ptr = *(_DWORD *)(a1 + 740);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    int __ptr = *(_DWORD *)(a1 + 744);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    *a3 += 12;
  }
  uint64_t v11 = *(void *)(a1 + 2568);
  int v12 = sub_19E2F62F0();
  sub_19E1E0BD4(v11, __stream, a3, 3, v12, a5);
  uint64_t v13 = *(void *)(a1 + 2576);
  int v14 = sub_19E2F62F0();
  sub_19E1E0BD4(v13, __stream, a3, 3, v14, a5);
  uint64_t v15 = *(void *)(a1 + 2584);
  int v16 = sub_19E2F62F0();
  sub_19E1E0BD4(v15, __stream, a3, 3, v16, a5);
  uint64_t v17 = *(void *)(a1 + 2504);
  int v18 = sub_19E2F62F0();
  sub_19E218654(v17, __stream, a3, 3, v18, a5);
  uint64_t v19 = *(void *)(a1 + 2512);
  int v20 = sub_19E2F62F0();
  sub_19E218654(v19, __stream, a3, 3, v20, a5);
  uint64_t v21 = *(void *)(a1 + 2520);
  int v22 = sub_19E2F62F0();
  sub_19E218654(v21, __stream, a3, 3, v22, a5);
  uint64_t v23 = *(void *)(a1 + 2528);
  int v24 = sub_19E2F62F0();
  sub_19E218654(v23, __stream, a3, 3, v24, a5);
  uint64_t v25 = *(void *)(a1 + 2536);
  int v26 = sub_19E2F62F0();
  sub_19E218654(v25, __stream, a3, 3, v26, a5);
  uint64_t v27 = *(void *)(a1 + 2544);
  int v28 = sub_19E2F62F0();
  sub_19E218654(v27, __stream, a3, 3, v28, a5);
  uint64_t v29 = *(void *)(a1 + 2552);
  int v30 = sub_19E2F62F0();
  sub_19E218654(v29, __stream, a3, 3, v30, a5);
  uint64_t v31 = *(void *)(a1 + 2560);
  int v32 = sub_19E2F62F0();
  return sub_19E218654(v31, __stream, a3, 3, v32, a5);
}

float32_t sub_19E2122D8(uint64_t a1, void *lpsrc, const void *a3)
{
  if (lpsrc)
  {
    unint64_t v5 = (void **)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3E10, 0);
    if (a3) {
      goto LABEL_3;
    }
LABEL_6:
    int v7 = 0;
    uint64_t v8 = *(unsigned int *)(a1 + 52);
    if ((int)v8 < 1) {
      goto LABEL_34;
    }
    goto LABEL_7;
  }
  unint64_t v5 = 0;
  if (!a3) {
    goto LABEL_6;
  }
LABEL_3:
  int v7 = (void **)__dynamic_cast(a3, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3E10, 0);
  uint64_t v8 = *(unsigned int *)(a1 + 52);
  if ((int)v8 < 1) {
    goto LABEL_34;
  }
LABEL_7:
  unint64_t v9 = (float32x4_t *)*v7[321];
  int v10 = (float32x4_t *)*v5[321];
  uint64_t v11 = **(float32x4_t ***)(a1 + 2568);
  if (v8 < 8)
  {
    uint64_t v12 = 0;
LABEL_14:
    uint64_t v18 = v8 - v12;
    uint64_t v19 = v12;
    int v20 = &v11->f32[v19];
    uint64_t v21 = &v10->f32[v19];
    int v22 = &v9->f32[v19];
    do
    {
      float v23 = *v22++;
      float v24 = v23;
      float v25 = *v21++;
      *v20++ = v24 - v25;
      --v18;
    }
    while (v18);
    goto LABEL_16;
  }
  uint64_t v12 = 0;
  if ((unint64_t)((char *)v11 - (char *)v9) < 0x20) {
    goto LABEL_14;
  }
  if ((unint64_t)((char *)v11 - (char *)v10) < 0x20) {
    goto LABEL_14;
  }
  uint64_t v12 = v8 & 0x7FFFFFF8;
  uint64_t v13 = v9 + 1;
  int v14 = v10 + 1;
  uint64_t v15 = v11 + 1;
  uint64_t v16 = v8 & 0xFFFFFFF8;
  do
  {
    float32x4_t v17 = vsubq_f32(*v13, *v14);
    v15[-1] = vsubq_f32(v13[-1], v14[-1]);
    float32x4_t *v15 = v17;
    v13 += 2;
    v14 += 2;
    v15 += 2;
    v16 -= 8;
  }
  while (v16);
  if (v12 != v8) {
    goto LABEL_14;
  }
LABEL_16:
  int v26 = (float32x4_t *)*v7[322];
  uint64_t v27 = (float32x4_t *)*v5[322];
  int v28 = **(float32x4_t ***)(a1 + 2576);
  if (v8 < 8)
  {
    uint64_t v29 = 0;
LABEL_23:
    uint64_t v35 = v8 - v29;
    uint64_t v36 = v29;
    float v37 = &v28->f32[v36];
    int v38 = &v27->f32[v36];
    int v39 = &v26->f32[v36];
    do
    {
      float v40 = *v39++;
      float v41 = v40;
      float v42 = *v38++;
      *v37++ = v41 - v42;
      --v35;
    }
    while (v35);
    goto LABEL_25;
  }
  uint64_t v29 = 0;
  if ((unint64_t)((char *)v28 - (char *)v26) < 0x20) {
    goto LABEL_23;
  }
  if ((unint64_t)((char *)v28 - (char *)v27) < 0x20) {
    goto LABEL_23;
  }
  uint64_t v29 = v8 & 0x7FFFFFF8;
  int v30 = v26 + 1;
  uint64_t v31 = v27 + 1;
  int v32 = v28 + 1;
  uint64_t v33 = v8 & 0xFFFFFFF8;
  do
  {
    float32x4_t v34 = vsubq_f32(*v30, *v31);
    v32[-1] = vsubq_f32(v30[-1], v31[-1]);
    float32x4_t *v32 = v34;
    v30 += 2;
    v31 += 2;
    v32 += 2;
    v33 -= 8;
  }
  while (v33);
  if (v29 != v8) {
    goto LABEL_23;
  }
LABEL_25:
  int v43 = (float32x4_t *)*v7[323];
  int v44 = (float32x4_t *)*v5[323];
  float v45 = **(float32x4_t ***)(a1 + 2584);
  if (v8 < 8)
  {
    uint64_t v46 = 0;
LABEL_32:
    uint64_t v52 = v8 - v46;
    uint64_t v53 = v46;
    int v54 = (__int32 *)((char *)v45 + v53 * 4);
    int v55 = &v44->f32[v53];
    int v56 = &v43->f32[v53];
    do
    {
      float v57 = *v56++;
      float v58 = v57;
      float v59 = *v55++;
      v6.f32[0] = v58 - v59;
      *v54++ = v6.i32[0];
      --v52;
    }
    while (v52);
    goto LABEL_34;
  }
  uint64_t v46 = 0;
  if ((unint64_t)((char *)v45 - (char *)v43) < 0x20) {
    goto LABEL_32;
  }
  if ((unint64_t)((char *)v45 - (char *)v44) < 0x20) {
    goto LABEL_32;
  }
  uint64_t v46 = v8 & 0x7FFFFFF8;
  int v47 = v43 + 1;
  int v48 = v44 + 1;
  uint64_t v49 = v45 + 1;
  uint64_t v50 = v8 & 0xFFFFFFF8;
  do
  {
    float32x4_t v6 = vsubq_f32(v47[-1], v48[-1]);
    float32x4_t v51 = vsubq_f32(*v47, *v48);
    v49[-1] = v6;
    *uint64_t v49 = v51;
    v47 += 2;
    v48 += 2;
    v49 += 2;
    v50 -= 8;
  }
  while (v50);
  if (v46 != v8) {
    goto LABEL_32;
  }
LABEL_34:
  uint64_t v60 = (*(_DWORD *)(a1 + 48) * v8);
  if ((int)v60 < 1) {
    goto LABEL_71;
  }
  uint64_t v61 = (float32x4_t *)*v7[313];
  int v62 = (float32x4_t *)*v5[313];
  int v63 = **(float32x4_t ***)(a1 + 2504);
  if (v60 < 8)
  {
    uint64_t v64 = 0;
LABEL_42:
    uint64_t v70 = v60 - v64;
    uint64_t v71 = v64;
    int v72 = &v63->f32[v71];
    uint64_t v73 = &v62->f32[v71];
    int v74 = &v61->f32[v71];
    do
    {
      float v75 = *v74++;
      float v76 = v75;
      float v77 = *v73++;
      *v72++ = v76 - v77;
      --v70;
    }
    while (v70);
    goto LABEL_44;
  }
  uint64_t v64 = 0;
  if ((unint64_t)((char *)v63 - (char *)v61) < 0x20) {
    goto LABEL_42;
  }
  if ((unint64_t)((char *)v63 - (char *)v62) < 0x20) {
    goto LABEL_42;
  }
  uint64_t v64 = v60 & 0x7FFFFFF8;
  int v65 = v61 + 1;
  uint64_t v66 = v62 + 1;
  uint64_t v67 = v63 + 1;
  uint64_t v68 = v60 & 0xFFFFFFF8;
  do
  {
    float32x4_t v69 = vsubq_f32(*v65, *v66);
    v67[-1] = vsubq_f32(v65[-1], v66[-1]);
    *uint64_t v67 = v69;
    v65 += 2;
    v66 += 2;
    v67 += 2;
    v68 -= 8;
  }
  while (v68);
  if (v64 != v60) {
    goto LABEL_42;
  }
LABEL_44:
  uint64_t v78 = (float32x4_t *)*v7[315];
  uint64_t v79 = (float32x4_t *)*v5[315];
  uint64_t v80 = **(float32x4_t ***)(a1 + 2520);
  if (v60 < 8)
  {
    uint64_t v81 = 0;
LABEL_51:
    uint64_t v87 = v60 - v81;
    uint64_t v88 = v81;
    uint64_t v89 = &v80->f32[v88];
    unint64_t v90 = &v79->f32[v88];
    unint64_t v91 = &v78->f32[v88];
    do
    {
      float v92 = *v91++;
      float v93 = v92;
      float v94 = *v90++;
      *v89++ = v93 - v94;
      --v87;
    }
    while (v87);
    goto LABEL_53;
  }
  uint64_t v81 = 0;
  if ((unint64_t)((char *)v80 - (char *)v78) < 0x20) {
    goto LABEL_51;
  }
  if ((unint64_t)((char *)v80 - (char *)v79) < 0x20) {
    goto LABEL_51;
  }
  uint64_t v81 = v60 & 0x7FFFFFF8;
  uint64_t v82 = v78 + 1;
  int v83 = v79 + 1;
  BOOL v84 = v80 + 1;
  uint64_t v85 = v60 & 0xFFFFFFF8;
  do
  {
    float32x4_t v86 = vsubq_f32(*v82, *v83);
    v84[-1] = vsubq_f32(v82[-1], v83[-1]);
    float32x4_t *v84 = v86;
    v82 += 2;
    v83 += 2;
    v84 += 2;
    v85 -= 8;
  }
  while (v85);
  if (v81 != v60) {
    goto LABEL_51;
  }
LABEL_53:
  uint64_t v95 = (float32x4_t *)*v7[314];
  uint64_t v96 = (float32x4_t *)*v5[314];
  uint64_t v97 = **(float32x4_t ***)(a1 + 2512);
  if (v60 < 8)
  {
    uint64_t v98 = 0;
LABEL_60:
    uint64_t v104 = v60 - v98;
    uint64_t v105 = v98;
    BOOL v106 = &v97->f32[v105];
    uint64_t v107 = &v96->f32[v105];
    uint64_t v108 = &v95->f32[v105];
    do
    {
      float v109 = *v108++;
      float v110 = v109;
      float v111 = *v107++;
      *v106++ = v110 - v111;
      --v104;
    }
    while (v104);
    goto LABEL_62;
  }
  uint64_t v98 = 0;
  if ((unint64_t)((char *)v97 - (char *)v95) < 0x20) {
    goto LABEL_60;
  }
  if ((unint64_t)((char *)v97 - (char *)v96) < 0x20) {
    goto LABEL_60;
  }
  uint64_t v98 = v60 & 0x7FFFFFF8;
  uint64_t v99 = v95 + 1;
  uint64_t v100 = v96 + 1;
  long long v101 = v97 + 1;
  uint64_t v102 = v60 & 0xFFFFFFF8;
  do
  {
    float32x4_t v103 = vsubq_f32(*v99, *v100);
    v101[-1] = vsubq_f32(v99[-1], v100[-1]);
    float32x4_t *v101 = v103;
    v99 += 2;
    v100 += 2;
    v101 += 2;
    v102 -= 8;
  }
  while (v102);
  if (v98 != v60) {
    goto LABEL_60;
  }
LABEL_62:
  int v112 = (float32x4_t *)*v7[316];
  BOOL v113 = (float32x4_t *)*v5[316];
  uint64_t v114 = **(float32x4_t ***)(a1 + 2528);
  if (v60 < 8)
  {
    uint64_t v115 = 0;
LABEL_69:
    uint64_t v121 = v60 - v115;
    uint64_t v122 = v115;
    float32x4_t v123 = (__int32 *)((char *)v114 + v122 * 4);
    unint64_t v124 = &v113->f32[v122];
    uint64_t v125 = &v112->f32[v122];
    do
    {
      float v126 = *v125++;
      float v127 = v126;
      float v128 = *v124++;
      v6.f32[0] = v127 - v128;
      *v123++ = v6.i32[0];
      --v121;
    }
    while (v121);
    goto LABEL_71;
  }
  uint64_t v115 = 0;
  if ((unint64_t)((char *)v114 - (char *)v112) < 0x20) {
    goto LABEL_69;
  }
  if ((unint64_t)((char *)v114 - (char *)v113) < 0x20) {
    goto LABEL_69;
  }
  uint64_t v115 = v60 & 0x7FFFFFF8;
  uint64_t v116 = v112 + 1;
  uint64_t v117 = v113 + 1;
  unint64_t v118 = v114 + 1;
  uint64_t v119 = v60 & 0xFFFFFFF8;
  do
  {
    float32x4_t v6 = vsubq_f32(v116[-1], v117[-1]);
    float32x4_t v120 = vsubq_f32(*v116, *v117);
    v118[-1] = v6;
    *unint64_t v118 = v120;
    v116 += 2;
    v117 += 2;
    v118 += 2;
    v119 -= 8;
  }
  while (v119);
  if (v115 != v60) {
    goto LABEL_69;
  }
LABEL_71:
  if (!v8) {
    return v6.f32[0];
  }
  uint64_t v129 = (v8 * v8);
  uint64_t v130 = (float32x4_t *)*v7[317];
  long long v131 = (float32x4_t *)*v5[317];
  int v132 = **(float32x4_t ***)(a1 + 2536);
  if (v129 < 8)
  {
    uint64_t v133 = 0;
LABEL_79:
    uint64_t v139 = v129 - v133;
    uint64_t v140 = v133;
    uint64_t v141 = &v132->f32[v140];
    int64_t v142 = &v131->f32[v140];
    uint64_t v143 = &v130->f32[v140];
    do
    {
      float v144 = *v143++;
      float v145 = v144;
      float v146 = *v142++;
      *v141++ = v145 - v146;
      --v139;
    }
    while (v139);
    goto LABEL_81;
  }
  uint64_t v133 = 0;
  if ((unint64_t)((char *)v132 - (char *)v130) < 0x20) {
    goto LABEL_79;
  }
  if ((unint64_t)((char *)v132 - (char *)v131) < 0x20) {
    goto LABEL_79;
  }
  uint64_t v133 = v129 & 0x7FFFFFF8;
  float32x4_t v134 = v130 + 1;
  uint64_t v135 = v131 + 1;
  uint64_t v136 = v132 + 1;
  uint64_t v137 = v133;
  do
  {
    float32x4_t v138 = vsubq_f32(*v134, *v135);
    v136[-1] = vsubq_f32(v134[-1], v135[-1]);
    float32x4_t *v136 = v138;
    v134 += 2;
    v135 += 2;
    v136 += 2;
    v137 -= 8;
  }
  while (v137);
  if (v133 != v129) {
    goto LABEL_79;
  }
LABEL_81:
  unint64_t v147 = (float32x4_t *)*v7[319];
  BOOL v148 = (float32x4_t *)*v5[319];
  uint64_t v149 = **(float32x4_t ***)(a1 + 2552);
  if (v129 < 8)
  {
    uint64_t v150 = 0;
LABEL_88:
    uint64_t v156 = v129 - v150;
    uint64_t v157 = v150;
    uint64_t v158 = &v149->f32[v157];
    long long v159 = &v148->f32[v157];
    int v160 = &v147->f32[v157];
    do
    {
      float v161 = *v160++;
      float v162 = v161;
      float v163 = *v159++;
      *v158++ = v162 - v163;
      --v156;
    }
    while (v156);
    goto LABEL_90;
  }
  uint64_t v150 = 0;
  if ((unint64_t)((char *)v149 - (char *)v147) < 0x20) {
    goto LABEL_88;
  }
  if ((unint64_t)((char *)v149 - (char *)v148) < 0x20) {
    goto LABEL_88;
  }
  uint64_t v150 = v129 & 0x7FFFFFF8;
  unint64_t v151 = v147 + 1;
  unint64_t v152 = v148 + 1;
  uint64_t v153 = v149 + 1;
  uint64_t v154 = v150;
  do
  {
    float32x4_t v155 = vsubq_f32(*v151, *v152);
    v153[-1] = vsubq_f32(v151[-1], v152[-1]);
    *uint64_t v153 = v155;
    v151 += 2;
    v152 += 2;
    v153 += 2;
    v154 -= 8;
  }
  while (v154);
  if (v150 != v129) {
    goto LABEL_88;
  }
LABEL_90:
  unint64_t v164 = (float32x4_t *)*v7[318];
  uint64_t v165 = (float32x4_t *)*v5[318];
  BOOL v166 = **(float32x4_t ***)(a1 + 2544);
  if (v129 < 8)
  {
    uint64_t v167 = 0;
LABEL_97:
    uint64_t v173 = v129 - v167;
    uint64_t v174 = v167;
    uint64_t v175 = &v166->f32[v174];
    uint64_t v176 = &v165->f32[v174];
    uint64_t v177 = &v164->f32[v174];
    do
    {
      float v178 = *v177++;
      float v179 = v178;
      float v180 = *v176++;
      *v175++ = v179 - v180;
      --v173;
    }
    while (v173);
    goto LABEL_99;
  }
  uint64_t v167 = 0;
  if ((unint64_t)((char *)v166 - (char *)v164) < 0x20) {
    goto LABEL_97;
  }
  if ((unint64_t)((char *)v166 - (char *)v165) < 0x20) {
    goto LABEL_97;
  }
  uint64_t v167 = v129 & 0x7FFFFFF8;
  long long v168 = v164 + 1;
  int v169 = v165 + 1;
  uint64_t v170 = v166 + 1;
  uint64_t v171 = v167;
  do
  {
    float32x4_t v172 = vsubq_f32(*v168, *v169);
    v170[-1] = vsubq_f32(v168[-1], v169[-1]);
    *uint64_t v170 = v172;
    v168 += 2;
    v169 += 2;
    v170 += 2;
    v171 -= 8;
  }
  while (v171);
  if (v167 != v129) {
    goto LABEL_97;
  }
LABEL_99:
  uint64_t v181 = (float32x4_t *)*v7[320];
  unint64_t v182 = (float32x4_t *)*v5[320];
  uint64_t v183 = **(float32x4_t ***)(a1 + 2560);
  if (v129 < 8)
  {
    uint64_t v184 = 0;
LABEL_106:
    uint64_t v190 = v129 - v184;
    uint64_t v191 = v184;
    unsigned int v192 = (__int32 *)((char *)v183 + v191 * 4);
    uint64_t v193 = &v182->f32[v191];
    uint64_t v194 = &v181->f32[v191];
    do
    {
      float v195 = *v194++;
      float v196 = v195;
      float v197 = *v193++;
      v6.f32[0] = v196 - v197;
      *v192++ = v6.i32[0];
      --v190;
    }
    while (v190);
    return v6.f32[0];
  }
  uint64_t v184 = 0;
  if ((unint64_t)((char *)v183 - (char *)v181) < 0x20) {
    goto LABEL_106;
  }
  if ((unint64_t)((char *)v183 - (char *)v182) < 0x20) {
    goto LABEL_106;
  }
  uint64_t v184 = v129 & 0x7FFFFFF8;
  unint64_t v185 = v181 + 1;
  int v186 = v182 + 1;
  char v187 = v183 + 1;
  uint64_t v188 = v184;
  do
  {
    float32x4_t v6 = vsubq_f32(v185[-1], v186[-1]);
    float32x4_t v189 = vsubq_f32(*v185, *v186);
    v187[-1] = v6;
    *char v187 = v189;
    v185 += 2;
    v186 += 2;
    v187 += 2;
    v188 -= 8;
  }
  while (v188);
  if (v184 != v129) {
    goto LABEL_106;
  }
  return v6.f32[0];
}

void sub_19E212B98(int a1, void *lpsrc, const void *a3)
{
  if (lpsrc) {
    __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3E10, 0);
  }
  if (a3)
  {
    __dynamic_cast(a3, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3E10, 0);
  }
}

void sub_19E212C64(uint64_t a1, void *lpsrc)
{
  if (lpsrc) {
    uint64_t v3 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3E10, 0);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(float32x4_t ***)(a1 + 2568);
  unint64_t v5 = (float32x4_t **)v3[321];
  uint64_t v6 = *(int *)(a1 + 52);
  if ((int)v6 >= 8)
  {
    int v7 = *v4;
    uint64_t v8 = *v5;
    int v9 = (int)v6 / 8;
    do
    {
      float32x4_t v10 = *v8;
      float32x4_t v11 = v8[1];
      v8 += 2;
      float32x4_t v12 = vaddq_f32(v7[1], v11);
      *int v7 = vaddq_f32(*v7, v10);
      v7[1] = v12;
      v7 += 2;
      --v9;
    }
    while (v9);
  }
  int v13 = 8 * ((int)v6 / 8);
  if (v13 < (int)v6)
  {
    int v14 = *v5;
    uint64_t v15 = *v4;
    unint64_t v16 = v13;
    unint64_t v17 = v6 - v13;
    if (v17 < 8) {
      goto LABEL_14;
    }
    uint64_t v18 = 4 * v13;
    if ((char *)v15 + v18 < (char *)&v14->f32[v6] && (char *)v14 + v18 < (char *)&v15->f32[v6]) {
      goto LABEL_14;
    }
    unint64_t v19 = v17 - (v6 & 7) + v13;
    uint64_t v20 = v13 + (unint64_t)(v6 & 7) - v6;
    uint64_t v21 = v18 + 16;
    int v22 = (float32x4_t *)((char *)v14 + v18 + 16);
    float v23 = (float32x4_t *)((char *)v15 + v21);
    do
    {
      float32x4_t v24 = vaddq_f32(*v23, *v22);
      v23[-1] = vaddq_f32(v23[-1], v22[-1]);
      *float v23 = v24;
      v22 += 2;
      v23 += 2;
      v20 += 8;
    }
    while (v20);
    unint64_t v16 = v19;
    if ((v6 & 7) != 0)
    {
LABEL_14:
      uint64_t v25 = v6 - v16;
      int v26 = &v15->f32[v16];
      uint64_t v27 = &v14->f32[v16];
      do
      {
        float v28 = *v27++;
        *int v26 = *v26 + v28;
        ++v26;
        --v25;
      }
      while (v25);
    }
  }
  uint64_t v29 = *(float32x4_t ***)(a1 + 2576);
  int v30 = (float32x4_t **)v3[322];
  uint64_t v31 = *(int *)(a1 + 52);
  if ((int)v31 >= 8)
  {
    int v32 = *v29;
    uint64_t v33 = *v30;
    int v34 = (int)v31 / 8;
    do
    {
      float32x4_t v35 = *v33;
      float32x4_t v36 = v33[1];
      v33 += 2;
      float32x4_t v37 = vaddq_f32(v32[1], v36);
      float32x4_t *v32 = vaddq_f32(*v32, v35);
      v32[1] = v37;
      v32 += 2;
      --v34;
    }
    while (v34);
  }
  int v38 = 8 * ((int)v31 / 8);
  if (v38 < (int)v31)
  {
    int v39 = *v30;
    float v40 = *v29;
    unint64_t v41 = v38;
    unint64_t v42 = v31 - v38;
    if (v42 < 8) {
      goto LABEL_26;
    }
    uint64_t v43 = 4 * v38;
    if ((char *)v40 + v43 < (char *)&v39->f32[v31] && (char *)v39 + v43 < (char *)&v40->f32[v31]) {
      goto LABEL_26;
    }
    unint64_t v44 = v42 - (v31 & 7) + v38;
    uint64_t v45 = v38 + (unint64_t)(v31 & 7) - v31;
    uint64_t v46 = v43 + 16;
    int v47 = (float32x4_t *)((char *)v39 + v43 + 16);
    int v48 = (float32x4_t *)((char *)v40 + v46);
    do
    {
      float32x4_t v49 = vaddq_f32(*v48, *v47);
      v48[-1] = vaddq_f32(v48[-1], v47[-1]);
      *int v48 = v49;
      v47 += 2;
      v48 += 2;
      v45 += 8;
    }
    while (v45);
    unint64_t v41 = v44;
    if ((v31 & 7) != 0)
    {
LABEL_26:
      uint64_t v50 = v31 - v41;
      float32x4_t v51 = &v40->f32[v41];
      uint64_t v52 = &v39->f32[v41];
      do
      {
        float v53 = *v52++;
        *float32x4_t v51 = *v51 + v53;
        ++v51;
        --v50;
      }
      while (v50);
    }
  }
  int v54 = *(float32x4_t ***)(a1 + 2584);
  int v55 = (float32x4_t **)v3[323];
  uint64_t v56 = *(int *)(a1 + 52);
  if ((int)v56 >= 8)
  {
    float v57 = *v54;
    float v58 = *v55;
    int v59 = (int)v56 / 8;
    do
    {
      float32x4_t v60 = *v58;
      float32x4_t v61 = v58[1];
      v58 += 2;
      float32x4_t v62 = vaddq_f32(v57[1], v61);
      float32x4_t *v57 = vaddq_f32(*v57, v60);
      v57[1] = v62;
      v57 += 2;
      --v59;
    }
    while (v59);
  }
  int v63 = 8 * ((int)v56 / 8);
  if (v63 < (int)v56)
  {
    uint64_t v64 = *v55;
    int v65 = *v54;
    unint64_t v66 = v63;
    unint64_t v67 = v56 - v63;
    if (v67 < 8) {
      goto LABEL_38;
    }
    uint64_t v68 = 4 * v63;
    if ((char *)v65 + v68 < (char *)&v64->f32[v56] && (char *)v64 + v68 < (char *)&v65->f32[v56]) {
      goto LABEL_38;
    }
    unint64_t v69 = v67 - (v56 & 7) + v63;
    uint64_t v70 = v63 + (unint64_t)(v56 & 7) - v56;
    uint64_t v71 = v68 + 16;
    int v72 = (float32x4_t *)((char *)v64 + v68 + 16);
    uint64_t v73 = (float32x4_t *)((char *)v65 + v71);
    do
    {
      float32x4_t v74 = vaddq_f32(*v73, *v72);
      v73[-1] = vaddq_f32(v73[-1], v72[-1]);
      float32x4_t *v73 = v74;
      v72 += 2;
      v73 += 2;
      v70 += 8;
    }
    while (v70);
    unint64_t v66 = v69;
    if ((v56 & 7) != 0)
    {
LABEL_38:
      uint64_t v75 = v56 - v66;
      float v76 = &v65->f32[v66];
      float v77 = &v64->f32[v66];
      do
      {
        float v78 = *v77++;
        *float v76 = *v76 + v78;
        ++v76;
        --v75;
      }
      while (v75);
    }
  }
  uint64_t v79 = *(const float ***)(a1 + 2504);
  uint64_t v80 = (const float **)v3[313];
  vDSP_Length v81 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  float __B = 1.0;
  vDSP_vsma(*v80, 1, &__B, *v79, 1, (float *)*v79, 1, v81);
  uint64_t v82 = *(const float ***)(a1 + 2512);
  int v83 = (const float **)v3[314];
  vDSP_Length v84 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  float __B = 1.0;
  vDSP_vsma(*v83, 1, &__B, *v82, 1, (float *)*v82, 1, v84);
  uint64_t v85 = *(const float ***)(a1 + 2520);
  float32x4_t v86 = (const float **)v3[315];
  vDSP_Length v87 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  float __B = 1.0;
  vDSP_vsma(*v86, 1, &__B, *v85, 1, (float *)*v85, 1, v87);
  uint64_t v88 = *(const float ***)(a1 + 2528);
  uint64_t v89 = (const float **)v3[316];
  vDSP_Length v90 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  float __B = 1.0;
  vDSP_vsma(*v89, 1, &__B, *v88, 1, (float *)*v88, 1, v90);
  unint64_t v91 = *(const float ***)(a1 + 2536);
  float v92 = (const float **)v3[317];
  vDSP_Length v93 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  float __B = 1.0;
  vDSP_vsma(*v92, 1, &__B, *v91, 1, (float *)*v91, 1, v93);
  float v94 = *(const float ***)(a1 + 2544);
  uint64_t v95 = (const float **)v3[318];
  vDSP_Length v96 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  float __B = 1.0;
  vDSP_vsma(*v95, 1, &__B, *v94, 1, (float *)*v94, 1, v96);
  uint64_t v97 = *(const float ***)(a1 + 2552);
  uint64_t v98 = (const float **)v3[319];
  vDSP_Length v99 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  float __B = 1.0;
  vDSP_vsma(*v98, 1, &__B, *v97, 1, (float *)*v97, 1, v99);
  uint64_t v100 = *(const float ***)(a1 + 2560);
  long long v101 = (const float **)v3[320];
  vDSP_Length v102 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  float __B = 1.0;
  vDSP_vsma(*v101, 1, &__B, *v100, 1, (float *)*v100, 1, v102);
}

void sub_19E2131B4(uint64_t a1, void *lpsrc)
{
  if (lpsrc) {
    uint64_t v3 = (void **)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3E10, 0);
  }
  else {
    uint64_t v3 = 0;
  }
  float v4 = (*(float (**)(void))(**(void **)(a1 + 1552) + 64))(*(void *)(a1 + 1552));
  LODWORD(v67) = COERCE_UNSIGNED_INT64((*(double (**)(void))(**(void **)(a1 + 1552) + 64))(*(void *)(a1 + 1552)));
  (***(void (****)(float))(a1 + 1552))(v4);
  (***(void (****)(float))(a1 + 1560))(v4);
  (***(void (****)(float))(a1 + 1568))(v4);
  (***(void (****)(float))(a1 + 1576))(v4);
  (***(void (****)(float))(a1 + 1584))(v4);
  (***(void (****)(float))(a1 + 1592))(v4);
  (***(void (****)(float))(a1 + 1600))(v4);
  (***(void (****)(float))(a1 + 1608))(v4);
  unint64_t v5 = *(float ***)(a1 + 2568);
  uint64_t v6 = *(unsigned int *)(a1 + 52);
  vDSP_Length v7 = (int)v6;
  if ((int)v6 <= 0)
  {
    int v9 = *v5;
    goto LABEL_39;
  }
  unint64_t v8 = *v3[321];
  int v9 = *v5;
  if (v6 >= 8 && ((unint64_t)v9 >= v8 + 4 * v6 || v8 >= (unint64_t)&v9[v6]))
  {
    uint64_t v10 = v6 & 0x7FFFFFF8;
    int v63 = (float32x4_t *)(v8 + 16);
    uint64_t v64 = (float32x4_t *)(v9 + 4);
    uint64_t v65 = v6 & 0xFFFFFFF8;
    float v11 = v67;
    do
    {
      float32x4_t v66 = vmlaq_n_f32(*v64, *v63, v67);
      v64[-1] = vmlaq_n_f32(v64[-1], v63[-1], v67);
      *uint64_t v64 = v66;
      v63 += 2;
      v64 += 2;
      v65 -= 8;
    }
    while (v65);
    if (v10 == v6) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v10 = 0;
    float v11 = v67;
  }
  uint64_t v12 = v6 - v10;
  uint64_t v13 = 4 * v10;
  int v14 = &v9[v10];
  uint64_t v15 = (float *)(v8 + v13);
  do
  {
    float v16 = *v15++;
    *int v14 = *v14 + (float)(v16 * v11);
    ++v14;
    --v12;
  }
  while (v12);
LABEL_11:
  unint64_t v17 = *v3[322];
  unint64_t v18 = **(void **)(a1 + 2576);
  if (v6 >= 8 && (v18 < v17 + 4 * v6 ? (BOOL v19 = v17 >= v18 + 4 * v6) : (BOOL v19 = 1), v19))
  {
    uint64_t v20 = v6 & 0x7FFFFFF8;
    uint64_t v21 = (float32x4_t *)(v17 + 16);
    int v22 = (float32x4_t *)(v18 + 16);
    uint64_t v23 = v6 & 0xFFFFFFF8;
    do
    {
      float32x4_t v24 = vmlaq_n_f32(*v22, *v21, v11);
      v22[-1] = vmlaq_n_f32(v22[-1], v21[-1], v11);
      float32x4_t *v22 = v24;
      v21 += 2;
      v22 += 2;
      v23 -= 8;
    }
    while (v23);
    if (v20 == v6) {
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v20 = 0;
  }
  uint64_t v25 = v6 - v20;
  uint64_t v26 = 4 * v20;
  uint64_t v27 = (float *)(v18 + v26);
  float v28 = (float *)(v17 + v26);
  do
  {
    float v29 = *v28++;
    float *v27 = *v27 + (float)(v29 * v11);
    ++v27;
    --v25;
  }
  while (v25);
LABEL_24:
  unint64_t v30 = *v3[323];
  unint64_t v31 = **(void **)(a1 + 2584);
  if (v6 < 8 || (v31 < v30 + 4 * v6 ? (BOOL v32 = v30 >= v31 + 4 * v6) : (BOOL v32 = 1), !v32))
  {
    uint64_t v33 = 0;
LABEL_35:
    uint64_t v38 = v6 - v33;
    uint64_t v39 = 4 * v33;
    float v40 = (float *)(v31 + v39);
    unint64_t v41 = (float *)(v30 + v39);
    do
    {
      float v42 = *v41++;
      *float v40 = *v40 + (float)(v42 * v11);
      ++v40;
      --v38;
    }
    while (v38);
    goto LABEL_39;
  }
  uint64_t v33 = v6 & 0x7FFFFFF8;
  int v34 = (float32x4_t *)(v30 + 16);
  float32x4_t v35 = (float32x4_t *)(v31 + 16);
  uint64_t v36 = v6 & 0xFFFFFFF8;
  do
  {
    float32x4_t v37 = vmlaq_n_f32(*v35, *v34, v11);
    v35[-1] = vmlaq_n_f32(v35[-1], v34[-1], v11);
    float32x4_t *v35 = v37;
    v34 += 2;
    v35 += 2;
    v36 -= 8;
  }
  while (v36);
  if (v33 != v6) {
    goto LABEL_35;
  }
LABEL_39:
  float __C = 2.0;
  float __B = -2.0;
  vDSP_vclip(v9, 1, &__B, &__C, v9, 1, v7);
  uint64_t v43 = *(const float ***)(a1 + 2576);
  vDSP_Length v44 = *(int *)(a1 + 52);
  float __C = 2.0;
  float __B = -2.0;
  vDSP_vclip(*v43, 1, &__B, &__C, (float *)*v43, 1, v44);
  uint64_t v45 = *(const float ***)(a1 + 2584);
  vDSP_Length v46 = *(int *)(a1 + 52);
  float __C = 2.0;
  float __B = -2.0;
  vDSP_vclip(*v45, 1, &__B, &__C, (float *)*v45, 1, v46);
  int v47 = *(const float ***)(a1 + 2504);
  vDSP_Length v48 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  float __C = 2.0;
  float __B = -2.0;
  vDSP_vclip(*v47, 1, &__B, &__C, (float *)*v47, 1, v48);
  float32x4_t v49 = *(const float ***)(a1 + 2512);
  vDSP_Length v50 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  float __C = 2.0;
  float __B = -2.0;
  vDSP_vclip(*v49, 1, &__B, &__C, (float *)*v49, 1, v50);
  float32x4_t v51 = *(const float ***)(a1 + 2520);
  vDSP_Length v52 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  float __C = 2.0;
  float __B = -2.0;
  vDSP_vclip(*v51, 1, &__B, &__C, (float *)*v51, 1, v52);
  float v53 = *(const float ***)(a1 + 2528);
  vDSP_Length v54 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  float __C = 2.0;
  float __B = -2.0;
  vDSP_vclip(*v53, 1, &__B, &__C, (float *)*v53, 1, v54);
  int v55 = *(const float ***)(a1 + 2536);
  vDSP_Length v56 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  float __C = 2.0;
  float __B = -2.0;
  vDSP_vclip(*v55, 1, &__B, &__C, (float *)*v55, 1, v56);
  float v57 = *(const float ***)(a1 + 2544);
  vDSP_Length v58 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  float __C = 2.0;
  float __B = -2.0;
  vDSP_vclip(*v57, 1, &__B, &__C, (float *)*v57, 1, v58);
  int v59 = *(const float ***)(a1 + 2552);
  vDSP_Length v60 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  float __C = 2.0;
  float __B = -2.0;
  vDSP_vclip(*v59, 1, &__B, &__C, (float *)*v59, 1, v60);
  float32x4_t v61 = *(const float ***)(a1 + 2560);
  vDSP_Length v62 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  float __C = 2.0;
  float __B = -2.0;
  vDSP_vclip(*v61, 1, &__B, &__C, (float *)*v61, 1, v62);
}

void sub_19E2138A8(uint64_t a1, float a2)
{
  float v4 = *(const float ***)(a1 + 2568);
  float v5 = -a2;
  vDSP_Length v6 = *(int *)(a1 + 52);
  float __C = a2;
  float __B = -a2;
  vDSP_vclip(*v4, 1, &__B, &__C, (float *)*v4, 1, v6);
  vDSP_Length v7 = *(const float ***)(a1 + 2576);
  vDSP_Length v8 = *(int *)(a1 + 52);
  float __C = a2;
  float __B = v5;
  vDSP_vclip(*v7, 1, &__B, &__C, (float *)*v7, 1, v8);
  int v9 = *(const float ***)(a1 + 2584);
  vDSP_Length v10 = *(int *)(a1 + 52);
  float __C = a2;
  float __B = v5;
  vDSP_vclip(*v9, 1, &__B, &__C, (float *)*v9, 1, v10);
  float v11 = *(const float ***)(a1 + 2504);
  vDSP_Length v12 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  float __C = a2;
  float __B = v5;
  vDSP_vclip(*v11, 1, &__B, &__C, (float *)*v11, 1, v12);
  uint64_t v13 = *(const float ***)(a1 + 2512);
  vDSP_Length v14 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  float __C = a2;
  float __B = v5;
  vDSP_vclip(*v13, 1, &__B, &__C, (float *)*v13, 1, v14);
  uint64_t v15 = *(const float ***)(a1 + 2520);
  vDSP_Length v16 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  float __C = a2;
  float __B = v5;
  vDSP_vclip(*v15, 1, &__B, &__C, (float *)*v15, 1, v16);
  unint64_t v17 = *(const float ***)(a1 + 2528);
  vDSP_Length v18 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  float __C = a2;
  float __B = v5;
  vDSP_vclip(*v17, 1, &__B, &__C, (float *)*v17, 1, v18);
  BOOL v19 = *(const float ***)(a1 + 2536);
  vDSP_Length v20 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  float __C = a2;
  float __B = v5;
  vDSP_vclip(*v19, 1, &__B, &__C, (float *)*v19, 1, v20);
  uint64_t v21 = *(const float ***)(a1 + 2544);
  vDSP_Length v22 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  float __C = a2;
  float __B = v5;
  vDSP_vclip(*v21, 1, &__B, &__C, (float *)*v21, 1, v22);
  uint64_t v23 = *(const float ***)(a1 + 2552);
  vDSP_Length v24 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  float __C = a2;
  float __B = v5;
  vDSP_vclip(*v23, 1, &__B, &__C, (float *)*v23, 1, v24);
  uint64_t v25 = *(const float ***)(a1 + 2560);
  vDSP_Length v26 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  float __C = a2;
  float __B = v5;
  vDSP_vclip(*v25, 1, &__B, &__C, (float *)*v25, 1, v26);
}

uint64_t sub_19E213AB8(uint64_t result, float a2)
{
  uint64_t v2 = *(unsigned int *)(result + 52);
  if ((int)v2 < 1) {
    goto LABEL_23;
  }
  uint64_t v3 = **(float32x4_t ***)(result + 2568);
  if (v2 < 8)
  {
    uint64_t v4 = 0;
LABEL_7:
    uint64_t v8 = v2 - v4;
    int v9 = &v3->f32[v4];
    do
    {
      *int v9 = *v9 * a2;
      ++v9;
      --v8;
    }
    while (v8);
    goto LABEL_9;
  }
  uint64_t v4 = v2 & 0x7FFFFFF8;
  float v5 = v3 + 1;
  uint64_t v6 = v2 & 0xFFFFFFF8;
  do
  {
    float32x4_t v7 = vmulq_n_f32(*v5, a2);
    v5[-1] = vmulq_n_f32(v5[-1], a2);
    float32x4_t *v5 = v7;
    v5 += 2;
    v6 -= 8;
  }
  while (v6);
  if (v4 != v2) {
    goto LABEL_7;
  }
LABEL_9:
  vDSP_Length v10 = **(float32x4_t ***)(result + 2576);
  if (v2 >= 8)
  {
    uint64_t v11 = v2 & 0x7FFFFFF8;
    vDSP_Length v12 = v10 + 1;
    uint64_t v13 = v2 & 0xFFFFFFF8;
    do
    {
      float32x4_t v14 = vmulq_n_f32(*v12, a2);
      v12[-1] = vmulq_n_f32(v12[-1], a2);
      *vDSP_Length v12 = v14;
      v12 += 2;
      v13 -= 8;
    }
    while (v13);
    if (v11 == v2) {
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v15 = v2 - v11;
  vDSP_Length v16 = &v10->f32[v11];
  do
  {
    *vDSP_Length v16 = *v16 * a2;
    ++v16;
    --v15;
  }
  while (v15);
LABEL_16:
  unint64_t v17 = **(float32x4_t ***)(result + 2584);
  if (v2 < 8)
  {
    uint64_t v18 = 0;
LABEL_21:
    uint64_t v22 = v2 - v18;
    uint64_t v23 = &v17->f32[v18];
    do
    {
      *uint64_t v23 = *v23 * a2;
      ++v23;
      --v22;
    }
    while (v22);
    goto LABEL_23;
  }
  uint64_t v18 = v2 & 0x7FFFFFF8;
  BOOL v19 = v17 + 1;
  uint64_t v20 = v2 & 0xFFFFFFF8;
  do
  {
    float32x4_t v21 = vmulq_n_f32(*v19, a2);
    v19[-1] = vmulq_n_f32(v19[-1], a2);
    *BOOL v19 = v21;
    v19 += 2;
    v20 -= 8;
  }
  while (v20);
  if (v18 != v2) {
    goto LABEL_21;
  }
LABEL_23:
  uint64_t v24 = (*(_DWORD *)(result + 48) * v2);
  if ((int)v24 < 1) {
    goto LABEL_52;
  }
  uint64_t v25 = **(float32x4_t ***)(result + 2504);
  if (v24 < 8)
  {
    uint64_t v26 = 0;
LABEL_29:
    uint64_t v30 = v24 - v26;
    unint64_t v31 = &v25->f32[v26];
    do
    {
      float *v31 = *v31 * a2;
      ++v31;
      --v30;
    }
    while (v30);
    goto LABEL_31;
  }
  uint64_t v26 = v24 & 0x7FFFFFF8;
  uint64_t v27 = v25 + 1;
  uint64_t v28 = v24 & 0xFFFFFFF8;
  do
  {
    float32x4_t v29 = vmulq_n_f32(*v27, a2);
    v27[-1] = vmulq_n_f32(v27[-1], a2);
    float32x4_t *v27 = v29;
    v27 += 2;
    v28 -= 8;
  }
  while (v28);
  if (v26 != v24) {
    goto LABEL_29;
  }
LABEL_31:
  BOOL v32 = **(float32x4_t ***)(result + 2512);
  if (v24 < 8)
  {
    uint64_t v33 = 0;
LABEL_36:
    uint64_t v37 = v24 - v33;
    uint64_t v38 = &v32->f32[v33];
    do
    {
      *uint64_t v38 = *v38 * a2;
      ++v38;
      --v37;
    }
    while (v37);
    goto LABEL_38;
  }
  uint64_t v33 = v24 & 0x7FFFFFF8;
  int v34 = v32 + 1;
  uint64_t v35 = v24 & 0xFFFFFFF8;
  do
  {
    float32x4_t v36 = vmulq_n_f32(*v34, a2);
    v34[-1] = vmulq_n_f32(v34[-1], a2);
    float32x4_t *v34 = v36;
    v34 += 2;
    v35 -= 8;
  }
  while (v35);
  if (v33 != v24) {
    goto LABEL_36;
  }
LABEL_38:
  uint64_t v39 = **(float32x4_t ***)(result + 2520);
  if (v24 < 8)
  {
    uint64_t v40 = 0;
LABEL_43:
    uint64_t v44 = v24 - v40;
    uint64_t v45 = &v39->f32[v40];
    do
    {
      *uint64_t v45 = *v45 * a2;
      ++v45;
      --v44;
    }
    while (v44);
    goto LABEL_45;
  }
  uint64_t v40 = v24 & 0x7FFFFFF8;
  unint64_t v41 = v39 + 1;
  uint64_t v42 = v24 & 0xFFFFFFF8;
  do
  {
    float32x4_t v43 = vmulq_n_f32(*v41, a2);
    v41[-1] = vmulq_n_f32(v41[-1], a2);
    *unint64_t v41 = v43;
    v41 += 2;
    v42 -= 8;
  }
  while (v42);
  if (v40 != v24) {
    goto LABEL_43;
  }
LABEL_45:
  vDSP_Length v46 = **(float32x4_t ***)(result + 2528);
  if (v24 < 8)
  {
    uint64_t v47 = 0;
LABEL_50:
    uint64_t v51 = v24 - v47;
    vDSP_Length v52 = &v46->f32[v47];
    do
    {
      *vDSP_Length v52 = *v52 * a2;
      ++v52;
      --v51;
    }
    while (v51);
    goto LABEL_52;
  }
  uint64_t v47 = v24 & 0x7FFFFFF8;
  vDSP_Length v48 = v46 + 1;
  uint64_t v49 = v24 & 0xFFFFFFF8;
  do
  {
    float32x4_t v50 = vmulq_n_f32(*v48, a2);
    v48[-1] = vmulq_n_f32(v48[-1], a2);
    *vDSP_Length v48 = v50;
    v48 += 2;
    v49 -= 8;
  }
  while (v49);
  if (v47 != v24) {
    goto LABEL_50;
  }
LABEL_52:
  if (!v2) {
    return result;
  }
  uint64_t v53 = (v2 * v2);
  vDSP_Length v54 = **(float32x4_t ***)(result + 2536);
  if (v53 < 8)
  {
    uint64_t v55 = 0;
LABEL_58:
    uint64_t v59 = v53 - v55;
    vDSP_Length v60 = &v54->f32[v55];
    do
    {
      *vDSP_Length v60 = *v60 * a2;
      ++v60;
      --v59;
    }
    while (v59);
    goto LABEL_60;
  }
  uint64_t v55 = v53 & 0x7FFFFFF8;
  vDSP_Length v56 = v54 + 1;
  uint64_t v57 = v55;
  do
  {
    float32x4_t v58 = vmulq_n_f32(*v56, a2);
    v56[-1] = vmulq_n_f32(v56[-1], a2);
    *vDSP_Length v56 = v58;
    v56 += 2;
    v57 -= 8;
  }
  while (v57);
  if (v55 != v53) {
    goto LABEL_58;
  }
LABEL_60:
  float32x4_t v61 = **(float32x4_t ***)(result + 2544);
  if (v53 < 8)
  {
    uint64_t v62 = 0;
LABEL_65:
    uint64_t v66 = v53 - v62;
    float v67 = &v61->f32[v62];
    do
    {
      *float v67 = *v67 * a2;
      ++v67;
      --v66;
    }
    while (v66);
    goto LABEL_67;
  }
  uint64_t v62 = v53 & 0x7FFFFFF8;
  int v63 = v61 + 1;
  uint64_t v64 = v62;
  do
  {
    float32x4_t v65 = vmulq_n_f32(*v63, a2);
    v63[-1] = vmulq_n_f32(v63[-1], a2);
    *int v63 = v65;
    v63 += 2;
    v64 -= 8;
  }
  while (v64);
  if (v62 != v53) {
    goto LABEL_65;
  }
LABEL_67:
  uint64_t v68 = **(float32x4_t ***)(result + 2552);
  if (v53 < 8)
  {
    uint64_t v69 = 0;
LABEL_72:
    uint64_t v73 = v53 - v69;
    float32x4_t v74 = &v68->f32[v69];
    do
    {
      float *v74 = *v74 * a2;
      ++v74;
      --v73;
    }
    while (v73);
    goto LABEL_74;
  }
  uint64_t v69 = v53 & 0x7FFFFFF8;
  uint64_t v70 = v68 + 1;
  uint64_t v71 = v69;
  do
  {
    float32x4_t v72 = vmulq_n_f32(*v70, a2);
    v70[-1] = vmulq_n_f32(v70[-1], a2);
    *uint64_t v70 = v72;
    v70 += 2;
    v71 -= 8;
  }
  while (v71);
  if (v69 != v53) {
    goto LABEL_72;
  }
LABEL_74:
  uint64_t v75 = **(float32x4_t ***)(result + 2560);
  if (v53 < 8)
  {
    uint64_t v76 = 0;
LABEL_79:
    uint64_t v80 = v53 - v76;
    vDSP_Length v81 = &v75->f32[v76];
    do
    {
      float *v81 = *v81 * a2;
      ++v81;
      --v80;
    }
    while (v80);
    return result;
  }
  uint64_t v76 = v53 & 0x7FFFFFF8;
  float v77 = v75 + 1;
  uint64_t v78 = v76;
  do
  {
    float32x4_t v79 = vmulq_n_f32(*v77, a2);
    v77[-1] = vmulq_n_f32(v77[-1], a2);
    *float v77 = v79;
    v77 += 2;
    v78 -= 8;
  }
  while (v78);
  if (v76 != v53) {
    goto LABEL_79;
  }
  return result;
}

uint64_t sub_19E213F2C(uint64_t result)
{
  if (*(int *)(result + 2688) >= 1) {
    operator new();
  }
  return result;
}

void sub_19E214234(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E214248(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

int *sub_19E21425C(int *result, uint64_t *a2, int a3, int *a4)
{
  if (result[672] >= 1)
  {
    uint64_t v6 = result;
    int v7 = 0;
    int v8 = *a4;
    uint64_t v9 = 8 * a3;
    do
    {
      uint64_t v10 = v6[13];
      uint64_t v11 = *(void *)(*((void *)v6 + 20) + v9);
      uint64_t v12 = 4 * (int)v10 * v7;
      uint64_t v13 = *a2;
      *(_DWORD *)(v13 + 16 * v8) = v10;
      memmove(**(void ***)(v13 + 16 * *a4 + 8), (const void *)(v11 + v12), 4 * v10);
      uint64_t v14 = *a4;
      *a4 = v14 + 1;
      uint64_t v15 = (const void *)(*(void *)(*((void *)v6 + 23) + v9) + v12);
      uint64_t v16 = v6[13];
      uint64_t v17 = *a2;
      *(_DWORD *)(*a2 + 16 * v14 + 16) = v16;
      uint64_t result = (int *)memmove(**(void ***)(v17 + 16 * *a4 + 8), v15, 4 * v16);
      int v8 = *a4 + 1;
      *a4 = v8;
      ++v7;
    }
    while (v7 < v6[672]);
  }
  return result;
}

int *sub_19E214348(int *result, void *a2, int a3, int *a4)
{
  if (result[672] >= 1)
  {
    uint64_t v6 = result;
    int v7 = 0;
    uint64_t v8 = 8 * a3;
    do
    {
      uint64_t v9 = 4 * v6[13] * v7;
      uint64_t v10 = (void *)(*(void *)(*((void *)v6 + 20) + v8) + v9);
      uint64_t v11 = (void *)(*(void *)(*((void *)v6 + 23) + v8) + v9);
      uint64_t v12 = *a4;
      *a4 = v12 + 1;
      memmove(v10, **(const void ***)(*a2 + 16 * v12 + 8), 4 * v6[13]);
      uint64_t v13 = *a4;
      *a4 = v13 + 1;
      uint64_t result = (int *)memmove(v11, **(const void ***)(*a2 + 16 * v13 + 8), 4 * v6[13]);
      ++v7;
    }
    while (v7 < v6[672]);
  }
  return result;
}

void sub_19E214420(uint64_t a1, void *a2, int *a3)
{
  if (*(int *)(a1 + 2688) >= 1)
  {
    int v6 = 0;
    int v7 = *a3;
    do
    {
      bzero(**(void ***)(*a2 + 16 * v7 + 8), 4 * *(int *)(*a2 + 16 * v7));
      uint64_t v8 = *a3;
      *a3 = v8 + 1;
      bzero(**(void ***)(*a2 + 16 * v8 + 24), 4 * *(int *)(*a2 + 16 * v8 + 16));
      int v7 = *a3 + 1;
      *a3 = v7;
      ++v6;
    }
    while (v6 < *(_DWORD *)(a1 + 2688));
  }
}

void sub_19E2144C4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 2692))
  {
    uint64_t v2 = *(void *)(a1 + 1552);
    BYTE7(v18[2]) = 18;
    strcpy((char *)v18, "LSTM before reseLSTM before reset ");
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v2 + 40))(v2, &v18[1]);
    if (SBYTE7(v18[2]) < 0) {
      operator delete(*(void **)&v18[1]);
    }
    uint64_t v3 = *(void *)(a1 + 1560);
    BYTE7(v18[2]) = 18;
    strcpy((char *)&v18[2], "t ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v3 + 40))(v3, &v18[1]);
    if (SBYTE7(v18[2]) < 0) {
      operator delete(*(void **)&v18[1]);
    }
    uint64_t v4 = *(void *)(a1 + 1568);
    BYTE7(v18[2]) = 18;
    strcpy((char *)&v18[2], "t ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v4 + 40))(v4, &v18[1]);
    if (SBYTE7(v18[2]) < 0) {
      operator delete(*(void **)&v18[1]);
    }
    uint64_t v5 = *(void *)(a1 + 1576);
    BYTE7(v18[2]) = 18;
    strcpy((char *)&v18[2], "t ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v5 + 40))(v5, &v18[1]);
    if (SBYTE7(v18[2]) < 0) {
      operator delete(*(void **)&v18[1]);
    }
    uint64_t v6 = *(void *)(a1 + 1584);
    BYTE7(v18[2]) = 18;
    strcpy((char *)&v18[2], "t ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v6 + 40))(v6, &v18[1]);
    if (SBYTE7(v18[2]) < 0) {
      operator delete(*(void **)&v18[1]);
    }
    uint64_t v7 = *(void *)(a1 + 1592);
    BYTE7(v18[2]) = 18;
    strcpy((char *)&v18[2], "t ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v7 + 40))(v7, &v18[1]);
    if (SBYTE7(v18[2]) < 0) {
      operator delete(*(void **)&v18[1]);
    }
    uint64_t v8 = *(void *)(a1 + 1600);
    BYTE7(v18[2]) = 18;
    strcpy((char *)&v18[2], "t ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v8 + 40))(v8, &v18[1]);
    if (SBYTE7(v18[2]) < 0) {
      operator delete(*(void **)&v18[1]);
    }
    uint64_t v9 = *(void *)(a1 + 1608);
    BYTE7(v18[2]) = 18;
    strcpy((char *)&v18[2], "t ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v9 + 40))(v9, &v18[1]);
    if (SBYTE7(v18[2]) < 0) {
      operator delete(*(void **)&v18[1]);
    }
    (*(void (**)(void))(**(void **)(a1 + 1552) + 16))(*(void *)(a1 + 1552));
    (*(void (**)(void))(**(void **)(a1 + 1560) + 16))(*(void *)(a1 + 1560));
    (*(void (**)(void))(**(void **)(a1 + 1568) + 16))(*(void *)(a1 + 1568));
    (*(void (**)(void))(**(void **)(a1 + 1576) + 16))(*(void *)(a1 + 1576));
    (*(void (**)(void))(**(void **)(a1 + 1584) + 16))(*(void *)(a1 + 1584));
    (*(void (**)(void))(**(void **)(a1 + 1592) + 16))(*(void *)(a1 + 1592));
    (*(void (**)(void))(**(void **)(a1 + 1600) + 16))(*(void *)(a1 + 1600));
    (*(void (**)(void))(**(void **)(a1 + 1608) + 16))(*(void *)(a1 + 1608));
    uint64_t v10 = *(void *)(a1 + 1552);
    BYTE7(v18[2]) = 17;
    strcpy((char *)v18, "LSTM AFTER resetLSTM AFTER reset ");
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v10 + 40))(v10, &v18[1]);
    if (SBYTE7(v18[2]) < 0) {
      operator delete(*(void **)&v18[1]);
    }
    uint64_t v11 = *(void *)(a1 + 1560);
    BYTE7(v18[2]) = 17;
    strcpy((char *)&v18[2], " ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v11 + 40))(v11, &v18[1]);
    if (SBYTE7(v18[2]) < 0) {
      operator delete(*(void **)&v18[1]);
    }
    uint64_t v12 = *(void *)(a1 + 1568);
    BYTE7(v18[2]) = 17;
    strcpy((char *)&v18[2], " ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v12 + 40))(v12, &v18[1]);
    if (SBYTE7(v18[2]) < 0) {
      operator delete(*(void **)&v18[1]);
    }
    uint64_t v13 = *(void *)(a1 + 1576);
    BYTE7(v18[2]) = 17;
    strcpy((char *)&v18[2], " ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v13 + 40))(v13, &v18[1]);
    if (SBYTE7(v18[2]) < 0) {
      operator delete(*(void **)&v18[1]);
    }
    uint64_t v14 = *(void *)(a1 + 1584);
    BYTE7(v18[2]) = 17;
    strcpy((char *)&v18[2], " ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v14 + 40))(v14, &v18[1]);
    if (SBYTE7(v18[2]) < 0) {
      operator delete(*(void **)&v18[1]);
    }
    uint64_t v15 = *(void *)(a1 + 1592);
    BYTE7(v18[2]) = 17;
    strcpy((char *)&v18[2], " ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v15 + 40))(v15, &v18[1]);
    if (SBYTE7(v18[2]) < 0) {
      operator delete(*(void **)&v18[1]);
    }
    uint64_t v16 = *(void *)(a1 + 1600);
    BYTE7(v18[2]) = 17;
    strcpy((char *)&v18[2], " ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v16 + 40))(v16, &v18[1]);
    if (SBYTE7(v18[2]) < 0) {
      operator delete(*(void **)&v18[1]);
    }
    uint64_t v17 = *(void *)(a1 + 1608);
    BYTE7(v18[2]) = 17;
    strcpy((char *)&v18[2], " ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v17 + 40))(v17, &v18[1]);
    if (SBYTE7(v18[2]) < 0) {
      operator delete(*(void **)&v18[1]);
    }
  }
}

void sub_19E214BB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E214C0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = **(void **)(a1 + 2504);
  int v6 = *(_DWORD *)(a1 + 48);
  unsigned int v5 = *(_DWORD *)(a1 + 52);
  uint64_t v8 = *(void **)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  if ((unint64_t)v8 >= v7)
  {
    uint64_t v10 = *(void **)a2;
    uint64_t v11 = (uint64_t)v8 - *(void *)a2;
    unint64_t v12 = (v11 >> 4) + 1;
    if (v12 >> 60) {
      goto LABEL_134;
    }
    uint64_t v13 = v7 - (void)v10;
    if (v13 >> 3 > v12) {
      unint64_t v12 = v13 >> 3;
    }
    BOOL v14 = (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14) {
      unint64_t v15 = v12;
    }
    if (v15 >> 60) {
      goto LABEL_135;
    }
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (char *)operator new(16 * v15);
    uint64_t v18 = &v17[16 * (v11 >> 4)];
    *(void *)uint64_t v18 = v4;
    uint64_t v9 = v18 + 16;
    BOOL v19 = &v17[v11];
    *((_DWORD *)v19 + 2) = v5;
    for (*((_DWORD *)v19 + 3) = v6; v8 != v10; *((void *)v18 + 1) = v8[1])
    {
      uint64_t v20 = *(v8 - 2);
      v8 -= 2;
      *((void *)v18 - 2) = v20;
      v18 -= 16;
    }
    *(void *)a2 = v18;
    *(void *)(a2 + 8) = v9;
    *(void *)(a2 + 16) = &v17[v16];
    if (v10)
    {
      operator delete(v10);
      int v6 = *(_DWORD *)(a1 + 48);
      unsigned int v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    void *v8 = v4;
    uint64_t v9 = v8 + 2;
    *((_DWORD *)v8 + 2) = v5;
    *((_DWORD *)v8 + 3) = v6;
  }
  *(void *)(a2 + 8) = v9;
  uint64_t v21 = **(void **)(a1 + 2512);
  unint64_t v22 = *(void *)(a2 + 16);
  if ((unint64_t)v9 >= v22)
  {
    uint64_t v24 = *(void **)a2;
    uint64_t v25 = (uint64_t)v9 - *(void *)a2;
    unint64_t v26 = (v25 >> 4) + 1;
    if (v26 >> 60) {
      goto LABEL_134;
    }
    uint64_t v27 = v22 - (void)v24;
    if (v27 >> 3 > v26) {
      unint64_t v26 = v27 >> 3;
    }
    BOOL v14 = (unint64_t)v27 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v28 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14) {
      unint64_t v28 = v26;
    }
    if (v28 >> 60) {
      goto LABEL_135;
    }
    uint64_t v29 = 16 * v28;
    uint64_t v30 = (char *)operator new(16 * v28);
    unint64_t v31 = &v30[16 * (v25 >> 4)];
    *(void *)unint64_t v31 = v21;
    uint64_t v23 = v31 + 16;
    BOOL v32 = &v30[v25];
    *((_DWORD *)v32 + 2) = v5;
    for (*((_DWORD *)v32 + 3) = v6; v9 != v24; *((void *)v31 + 1) = v9[1])
    {
      uint64_t v33 = *(v9 - 2);
      v9 -= 2;
      *((void *)v31 - 2) = v33;
      v31 -= 16;
    }
    *(void *)a2 = v31;
    *(void *)(a2 + 8) = v23;
    *(void *)(a2 + 16) = &v30[v29];
    if (v24)
    {
      operator delete(v24);
      int v6 = *(_DWORD *)(a1 + 48);
      unsigned int v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    *uint64_t v9 = v21;
    uint64_t v23 = v9 + 2;
    *((_DWORD *)v9 + 2) = v5;
    *((_DWORD *)v9 + 3) = v6;
  }
  *(void *)(a2 + 8) = v23;
  uint64_t v34 = **(void **)(a1 + 2528);
  unint64_t v35 = *(void *)(a2 + 16);
  if ((unint64_t)v23 >= v35)
  {
    uint64_t v37 = *(void **)a2;
    uint64_t v38 = (uint64_t)v23 - *(void *)a2;
    unint64_t v39 = (v38 >> 4) + 1;
    if (v39 >> 60) {
      goto LABEL_134;
    }
    uint64_t v40 = v35 - (void)v37;
    if (v40 >> 3 > v39) {
      unint64_t v39 = v40 >> 3;
    }
    BOOL v14 = (unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v41 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14) {
      unint64_t v41 = v39;
    }
    if (v41 >> 60) {
      goto LABEL_135;
    }
    uint64_t v42 = 16 * v41;
    float32x4_t v43 = (char *)operator new(16 * v41);
    uint64_t v44 = &v43[16 * (v38 >> 4)];
    *(void *)uint64_t v44 = v34;
    float32x4_t v36 = v44 + 16;
    uint64_t v45 = &v43[v38];
    *((_DWORD *)v45 + 2) = v5;
    for (*((_DWORD *)v45 + 3) = v6; v23 != v37; *((void *)v44 + 1) = v23[1])
    {
      uint64_t v46 = *(v23 - 2);
      v23 -= 2;
      *((void *)v44 - 2) = v46;
      v44 -= 16;
    }
    *(void *)a2 = v44;
    *(void *)(a2 + 8) = v36;
    *(void *)(a2 + 16) = &v43[v42];
    if (v37)
    {
      operator delete(v37);
      int v6 = *(_DWORD *)(a1 + 48);
      unsigned int v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    *uint64_t v23 = v34;
    float32x4_t v36 = v23 + 2;
    *((_DWORD *)v23 + 2) = v5;
    *((_DWORD *)v23 + 3) = v6;
  }
  *(void *)(a2 + 8) = v36;
  uint64_t v47 = **(void **)(a1 + 2520);
  unint64_t v48 = *(void *)(a2 + 16);
  if ((unint64_t)v36 >= v48)
  {
    float32x4_t v50 = *(void **)a2;
    uint64_t v51 = (uint64_t)v36 - *(void *)a2;
    unint64_t v52 = (v51 >> 4) + 1;
    if (v52 >> 60) {
      goto LABEL_134;
    }
    uint64_t v53 = v48 - (void)v50;
    if (v53 >> 3 > v52) {
      unint64_t v52 = v53 >> 3;
    }
    BOOL v14 = (unint64_t)v53 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v54 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14) {
      unint64_t v54 = v52;
    }
    if (v54 >> 60) {
      goto LABEL_135;
    }
    uint64_t v55 = 16 * v54;
    vDSP_Length v56 = (char *)operator new(16 * v54);
    uint64_t v57 = &v56[16 * (v51 >> 4)];
    *(void *)uint64_t v57 = v47;
    uint64_t v49 = v57 + 16;
    float32x4_t v58 = &v56[v51];
    *((_DWORD *)v58 + 2) = v5;
    for (*((_DWORD *)v58 + 3) = v6; v36 != v50; *((void *)v57 + 1) = v36[1])
    {
      uint64_t v59 = *(v36 - 2);
      v36 -= 2;
      *((void *)v57 - 2) = v59;
      v57 -= 16;
    }
    *(void *)a2 = v57;
    *(void *)(a2 + 8) = v49;
    *(void *)(a2 + 16) = &v56[v55];
    if (v50)
    {
      operator delete(v50);
      unsigned int v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    void *v36 = v47;
    uint64_t v49 = v36 + 2;
    *((_DWORD *)v36 + 2) = v5;
    *((_DWORD *)v36 + 3) = v6;
  }
  *(void *)(a2 + 8) = v49;
  uint64_t v60 = **(void **)(a1 + 2536);
  unint64_t v61 = *(void *)(a2 + 16);
  if ((unint64_t)v49 >= v61)
  {
    int v63 = *(void **)a2;
    uint64_t v64 = (uint64_t)v49 - *(void *)a2;
    unint64_t v65 = (v64 >> 4) + 1;
    if (v65 >> 60) {
      goto LABEL_134;
    }
    uint64_t v66 = v61 - (void)v63;
    if (v66 >> 3 > v65) {
      unint64_t v65 = v66 >> 3;
    }
    BOOL v14 = (unint64_t)v66 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v67 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14) {
      unint64_t v67 = v65;
    }
    if (v67 >> 60) {
      goto LABEL_135;
    }
    uint64_t v68 = 16 * v67;
    uint64_t v69 = (char *)operator new(16 * v67);
    uint64_t v70 = &v69[16 * (v64 >> 4)];
    *(void *)uint64_t v70 = v60;
    uint64_t v62 = v70 + 16;
    for (*(int32x2_t *)&v69[v64 + 8] = vdup_n_s32(v5); v49 != v63; *((void *)v70 + 1) = v49[1])
    {
      uint64_t v71 = *(v49 - 2);
      v49 -= 2;
      *((void *)v70 - 2) = v71;
      v70 -= 16;
    }
    *(void *)a2 = v70;
    *(void *)(a2 + 8) = v62;
    *(void *)(a2 + 16) = &v69[v68];
    if (v63)
    {
      operator delete(v63);
      unsigned int v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    *uint64_t v49 = v60;
    uint64_t v62 = v49 + 2;
    *((_DWORD *)v49 + 2) = v5;
    *((_DWORD *)v49 + 3) = v5;
  }
  *(void *)(a2 + 8) = v62;
  uint64_t v72 = **(void **)(a1 + 2544);
  unint64_t v73 = *(void *)(a2 + 16);
  if ((unint64_t)v62 >= v73)
  {
    uint64_t v75 = *(void **)a2;
    uint64_t v76 = (uint64_t)v62 - *(void *)a2;
    unint64_t v77 = (v76 >> 4) + 1;
    if (v77 >> 60) {
      goto LABEL_134;
    }
    uint64_t v78 = v73 - (void)v75;
    if (v78 >> 3 > v77) {
      unint64_t v77 = v78 >> 3;
    }
    BOOL v14 = (unint64_t)v78 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v79 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14) {
      unint64_t v79 = v77;
    }
    if (v79 >> 60) {
      goto LABEL_135;
    }
    uint64_t v80 = 16 * v79;
    vDSP_Length v81 = (char *)operator new(16 * v79);
    uint64_t v82 = &v81[16 * (v76 >> 4)];
    *(void *)uint64_t v82 = v72;
    float32x4_t v74 = v82 + 16;
    for (*(int32x2_t *)&v81[v76 + 8] = vdup_n_s32(v5); v62 != v75; *((void *)v82 + 1) = v62[1])
    {
      uint64_t v83 = *(v62 - 2);
      v62 -= 2;
      *((void *)v82 - 2) = v83;
      v82 -= 16;
    }
    *(void *)a2 = v82;
    *(void *)(a2 + 8) = v74;
    *(void *)(a2 + 16) = &v81[v80];
    if (v75)
    {
      operator delete(v75);
      unsigned int v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    *uint64_t v62 = v72;
    float32x4_t v74 = v62 + 2;
    *((_DWORD *)v62 + 2) = v5;
    *((_DWORD *)v62 + 3) = v5;
  }
  *(void *)(a2 + 8) = v74;
  uint64_t v84 = **(void **)(a1 + 2560);
  unint64_t v85 = *(void *)(a2 + 16);
  if ((unint64_t)v74 >= v85)
  {
    vDSP_Length v87 = *(void **)a2;
    uint64_t v88 = (uint64_t)v74 - *(void *)a2;
    unint64_t v89 = (v88 >> 4) + 1;
    if (v89 >> 60) {
      goto LABEL_134;
    }
    uint64_t v90 = v85 - (void)v87;
    if (v90 >> 3 > v89) {
      unint64_t v89 = v90 >> 3;
    }
    BOOL v14 = (unint64_t)v90 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v91 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14) {
      unint64_t v91 = v89;
    }
    if (v91 >> 60) {
      goto LABEL_135;
    }
    uint64_t v92 = 16 * v91;
    vDSP_Length v93 = (char *)operator new(16 * v91);
    float v94 = &v93[16 * (v88 >> 4)];
    *(void *)float v94 = v84;
    float32x4_t v86 = v94 + 16;
    for (*(int32x2_t *)&v93[v88 + 8] = vdup_n_s32(v5); v74 != v87; *((void *)v94 + 1) = v74[1])
    {
      uint64_t v95 = *(v74 - 2);
      v74 -= 2;
      *((void *)v94 - 2) = v95;
      v94 -= 16;
    }
    *(void *)a2 = v94;
    *(void *)(a2 + 8) = v86;
    *(void *)(a2 + 16) = &v93[v92];
    if (v87)
    {
      operator delete(v87);
      unsigned int v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    void *v74 = v84;
    float32x4_t v86 = v74 + 2;
    *((_DWORD *)v74 + 2) = v5;
    *((_DWORD *)v74 + 3) = v5;
  }
  *(void *)(a2 + 8) = v86;
  uint64_t v96 = **(void **)(a1 + 2552);
  unint64_t v97 = *(void *)(a2 + 16);
  if ((unint64_t)v86 >= v97)
  {
    vDSP_Length v99 = *(void **)a2;
    uint64_t v100 = (uint64_t)v86 - *(void *)a2;
    unint64_t v101 = (v100 >> 4) + 1;
    if (v101 >> 60) {
      goto LABEL_134;
    }
    uint64_t v102 = v97 - (void)v99;
    if (v102 >> 3 > v101) {
      unint64_t v101 = v102 >> 3;
    }
    BOOL v14 = (unint64_t)v102 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v103 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14) {
      unint64_t v103 = v101;
    }
    if (v103 >> 60) {
      goto LABEL_135;
    }
    uint64_t v104 = 16 * v103;
    uint64_t v105 = (char *)operator new(16 * v103);
    BOOL v106 = &v105[16 * (v100 >> 4)];
    *(void *)BOOL v106 = v96;
    uint64_t v98 = v106 + 16;
    for (*(int32x2_t *)&v105[v100 + 8] = vdup_n_s32(v5); v86 != v99; *((void *)v106 + 1) = v86[1])
    {
      uint64_t v107 = *(v86 - 2);
      v86 -= 2;
      *((void *)v106 - 2) = v107;
      v106 -= 16;
    }
    *(void *)a2 = v106;
    *(void *)(a2 + 8) = v98;
    *(void *)(a2 + 16) = &v105[v104];
    if (v99)
    {
      operator delete(v99);
      unsigned int v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    *float32x4_t v86 = v96;
    uint64_t v98 = v86 + 2;
    *((_DWORD *)v86 + 2) = v5;
    *((_DWORD *)v86 + 3) = v5;
  }
  *(void *)(a2 + 8) = v98;
  uint64_t v108 = **(void **)(a1 + 2568);
  unint64_t v109 = *(void *)(a2 + 16);
  if ((unint64_t)v98 >= v109)
  {
    float v111 = *(void **)a2;
    uint64_t v112 = (uint64_t)v98 - *(void *)a2;
    unint64_t v113 = (v112 >> 4) + 1;
    if (v113 >> 60) {
      goto LABEL_134;
    }
    uint64_t v114 = v109 - (void)v111;
    if (v114 >> 3 > v113) {
      unint64_t v113 = v114 >> 3;
    }
    BOOL v14 = (unint64_t)v114 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v115 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14) {
      unint64_t v115 = v113;
    }
    if (v115 >> 60) {
      goto LABEL_135;
    }
    uint64_t v116 = 16 * v115;
    uint64_t v117 = (char *)operator new(16 * v115);
    unint64_t v118 = &v117[16 * (v112 >> 4)];
    *(void *)unint64_t v118 = v108;
    float v110 = v118 + 16;
    uint64_t v119 = &v117[v112];
    *((_DWORD *)v119 + 2) = v5;
    for (*((_DWORD *)v119 + 3) = 0; v98 != v111; *((void *)v118 + 1) = v98[1])
    {
      uint64_t v120 = *(v98 - 2);
      v98 -= 2;
      *((void *)v118 - 2) = v120;
      v118 -= 16;
    }
    *(void *)a2 = v118;
    *(void *)(a2 + 8) = v110;
    *(void *)(a2 + 16) = &v117[v116];
    if (v111)
    {
      operator delete(v111);
      unsigned int v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    *uint64_t v98 = v108;
    float v110 = v98 + 2;
    *((_DWORD *)v98 + 2) = v5;
    *((_DWORD *)v98 + 3) = 0;
  }
  *(void *)(a2 + 8) = v110;
  uint64_t v121 = **(void **)(a1 + 2576);
  unint64_t v122 = *(void *)(a2 + 16);
  if ((unint64_t)v110 < v122)
  {
    void *v110 = v121;
    float32x4_t v123 = v110 + 2;
    *((_DWORD *)v110 + 2) = v5;
    *((_DWORD *)v110 + 3) = 0;
    goto LABEL_121;
  }
  unint64_t v124 = *(void **)a2;
  uint64_t v125 = (uint64_t)v110 - *(void *)a2;
  unint64_t v126 = (v125 >> 4) + 1;
  if (v126 >> 60) {
    goto LABEL_134;
  }
  uint64_t v127 = v122 - (void)v124;
  if (v127 >> 3 > v126) {
    unint64_t v126 = v127 >> 3;
  }
  BOOL v14 = (unint64_t)v127 >= 0x7FFFFFFFFFFFFFF0;
  unint64_t v128 = 0xFFFFFFFFFFFFFFFLL;
  if (!v14) {
    unint64_t v128 = v126;
  }
  if (v128 >> 60) {
LABEL_135:
  }
    sub_19E13C418();
  uint64_t v129 = 16 * v128;
  uint64_t v130 = (char *)operator new(16 * v128);
  long long v131 = &v130[16 * (v125 >> 4)];
  int v132 = &v130[v129];
  *(void *)long long v131 = v121;
  float32x4_t v123 = v131 + 16;
  uint64_t v133 = &v130[v125];
  *((_DWORD *)v133 + 2) = v5;
  for (*((_DWORD *)v133 + 3) = 0; v110 != v124; *((void *)v131 + 1) = v110[1])
  {
    uint64_t v134 = *(v110 - 2);
    v110 -= 2;
    *((void *)v131 - 2) = v134;
    v131 -= 16;
  }
  *(void *)a2 = v131;
  *(void *)(a2 + 8) = v123;
  *(void *)(a2 + 16) = v132;
  if (v124)
  {
    operator delete(v124);
    unsigned int v5 = *(_DWORD *)(a1 + 52);
  }
LABEL_121:
  *(void *)(a2 + 8) = v123;
  uint64_t v135 = **(void **)(a1 + 2584);
  unint64_t v136 = *(void *)(a2 + 16);
  if ((unint64_t)v123 < v136)
  {
    void *v123 = v135;
    uint64_t v137 = v123 + 2;
    *((_DWORD *)v123 + 2) = v5;
    *((_DWORD *)v123 + 3) = 0;
    goto LABEL_133;
  }
  float32x4_t v138 = *(void **)a2;
  uint64_t v139 = (uint64_t)v123 - *(void *)a2;
  unint64_t v140 = (v139 >> 4) + 1;
  if (v140 >> 60) {
LABEL_134:
  }
    sub_19E13D694();
  uint64_t v141 = v136 - (void)v138;
  if (v141 >> 3 > v140) {
    unint64_t v140 = v141 >> 3;
  }
  BOOL v14 = (unint64_t)v141 >= 0x7FFFFFFFFFFFFFF0;
  unint64_t v142 = 0xFFFFFFFFFFFFFFFLL;
  if (!v14) {
    unint64_t v142 = v140;
  }
  if (v142 >> 60) {
    goto LABEL_135;
  }
  uint64_t v143 = 16 * v142;
  float v144 = (char *)operator new(16 * v142);
  float v145 = &v144[16 * (v139 >> 4)];
  float v146 = &v144[v143];
  *(void *)float v145 = v135;
  uint64_t v137 = v145 + 16;
  unint64_t v147 = &v144[v139];
  *((_DWORD *)v147 + 2) = v5;
  for (*((_DWORD *)v147 + 3) = 0; v123 != v138; *((void *)v145 + 1) = v123[1])
  {
    uint64_t v148 = *(v123 - 2);
    v123 -= 2;
    *((void *)v145 - 2) = v148;
    v145 -= 16;
  }
  *(void *)a2 = v145;
  *(void *)(a2 + 8) = v137;
  *(void *)(a2 + 16) = v146;
  if (v138) {
    operator delete(v138);
  }
LABEL_133:
  *(void *)(a2 + 8) = v137;
}

__n128 sub_19E2154D8(void *a1, uint64_t a2)
{
  uint64_t v2 = *(_OWORD **)(a2 + 8);
  uint64_t v3 = *((void *)v2-- - 2);
  a1[29] = v3;
  a1[313] = a1 + 29;
  *(void *)(a2 + 8) = v2;
  *uint64_t v2 = *(v2 - 1);
  a1[30] = *(void *)v2;
  a1[314] = a1 + 30;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v4 - 16;
  *uint64_t v2 = *(_OWORD *)(v4 - 32);
  a1[32] = *(void *)v2;
  a1[316] = a1 + 32;
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v5 - 16;
  *uint64_t v2 = *(_OWORD *)(v5 - 32);
  a1[31] = *(void *)v2;
  int v6 = a1 + 31;
  v6[284] = v6;
  uint64_t v7 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v7 - 16;
  *uint64_t v2 = *(_OWORD *)(v7 - 32);
  v6[2] = *(void *)v2;
  v6[286] = v6 + 2;
  uint64_t v8 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v8 - 16;
  *uint64_t v2 = *(_OWORD *)(v8 - 32);
  v6[3] = *(void *)v2;
  v6[287] = v6 + 3;
  uint64_t v9 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v9 - 16;
  *uint64_t v2 = *(_OWORD *)(v9 - 32);
  v6[5] = *(void *)v2;
  v6[289] = v6 + 5;
  uint64_t v10 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v10 - 16;
  *uint64_t v2 = *(_OWORD *)(v10 - 32);
  v6[4] = *(void *)v2;
  v6[288] = v6 + 4;
  uint64_t v11 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v11 - 16;
  *uint64_t v2 = *(_OWORD *)(v11 - 32);
  v6[6] = *(void *)v2;
  v6[290] = v6 + 6;
  uint64_t v12 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v12 - 16;
  *uint64_t v2 = *(_OWORD *)(v12 - 32);
  v6[7] = *(void *)v2;
  v6[291] = v6 + 7;
  uint64_t v13 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v13 - 16;
  __n128 result = *(__n128 *)(v13 - 32);
  *uint64_t v2 = result;
  v6[8] = *(void *)v2;
  v6[292] = v6 + 8;
  *(void *)(a2 + 8) -= 16;
  return result;
}

uint64_t sub_19E215658(uint64_t result)
{
  *(unsigned char *)(result + 42) = 1;
  return result;
}

uint64_t sub_19E215664(uint64_t result)
{
  *(unsigned char *)(result + 42) = 0;
  return result;
}

void sub_19E21566C()
{
}

void sub_19E2156F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E215710(void *a1)
{
  uint64_t v2 = a1[329];
  uint64_t v3 = a1[328];
  if (v2 == v3)
  {
    uint64_t v3 = a1[329];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void **)(v3 + 8 * v4);
      if (v5)
      {
        operator delete[](v5);
        uint64_t v2 = a1[329];
        uint64_t v3 = a1[328];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  uint64_t v6 = a1[332];
  uint64_t v7 = a1[331];
  if (v6 != v7)
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(void **)(v7 + 8 * v8);
      if (v9)
      {
        operator delete[](v9);
        uint64_t v6 = a1[332];
        uint64_t v7 = a1[331];
      }
      ++v8;
    }
    while (v8 < (v6 - v7) >> 3);
    a1[329] = a1[328];
    a1[332] = v7;
    uint64_t v10 = a1[136];
    uint64_t v11 = a1[135];
    if (v10 != v11) {
      goto LABEL_13;
    }
LABEL_18:
    uint64_t v11 = v10;
    goto LABEL_19;
  }
  a1[329] = v3;
  a1[332] = v6;
  uint64_t v10 = a1[136];
  uint64_t v11 = a1[135];
  if (v10 == v11) {
    goto LABEL_18;
  }
LABEL_13:
  unint64_t v12 = 0;
  do
  {
    uint64_t v13 = *(void **)(v11 + 8 * v12);
    if (v13)
    {
      operator delete[](v13);
      uint64_t v10 = a1[136];
      uint64_t v11 = a1[135];
    }
    ++v12;
  }
  while (v12 < (v10 - v11) >> 3);
LABEL_19:
  a1[136] = v11;
  BOOL v14 = (void *)a1[133];
  if (v14)
  {
    operator delete(v14);
    a1[133] = 0;
  }
  unint64_t v15 = (void *)a1[132];
  if (v15)
  {
    operator delete(v15);
    a1[132] = 0;
  }
  uint64_t v16 = a1[166];
  uint64_t v17 = a1[165];
  if (v16 == v17)
  {
    uint64_t v17 = a1[166];
  }
  else
  {
    unint64_t v18 = 0;
    do
    {
      BOOL v19 = *(void **)(v17 + 8 * v18);
      if (v19)
      {
        operator delete[](v19);
        uint64_t v16 = a1[166];
        uint64_t v17 = a1[165];
      }
      ++v18;
    }
    while (v18 < (v16 - v17) >> 3);
  }
  a1[166] = v17;
  uint64_t v20 = (void *)a1[163];
  if (v20)
  {
    operator delete(v20);
    a1[163] = 0;
  }
  uint64_t v21 = (void *)a1[162];
  if (v21)
  {
    operator delete(v21);
    a1[162] = 0;
  }
  uint64_t v22 = a1[151];
  uint64_t v23 = a1[150];
  if (v22 == v23)
  {
    uint64_t v23 = a1[151];
  }
  else
  {
    unint64_t v24 = 0;
    do
    {
      uint64_t v25 = *(void **)(v23 + 8 * v24);
      if (v25)
      {
        operator delete[](v25);
        uint64_t v22 = a1[151];
        uint64_t v23 = a1[150];
      }
      ++v24;
    }
    while (v24 < (v22 - v23) >> 3);
  }
  a1[151] = v23;
  unint64_t v26 = (void *)a1[148];
  if (v26)
  {
    operator delete(v26);
    a1[148] = 0;
  }
  uint64_t v27 = (void *)a1[147];
  if (v27)
  {
    operator delete(v27);
    a1[147] = 0;
  }
  uint64_t v28 = a1[181];
  uint64_t v29 = a1[180];
  if (v28 == v29)
  {
    uint64_t v29 = a1[181];
  }
  else
  {
    unint64_t v30 = 0;
    do
    {
      unint64_t v31 = *(void **)(v29 + 8 * v30);
      if (v31)
      {
        operator delete[](v31);
        uint64_t v28 = a1[181];
        uint64_t v29 = a1[180];
      }
      ++v30;
    }
    while (v30 < (v28 - v29) >> 3);
  }
  a1[181] = v29;
  BOOL v32 = (void *)a1[178];
  if (v32)
  {
    operator delete(v32);
    a1[178] = 0;
  }
  uint64_t v33 = (void *)a1[177];
  if (v33)
  {
    operator delete(v33);
    a1[177] = 0;
  }
}

uint64_t sub_19E21597C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_19E215984(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

float32_t sub_19E215990(uint64_t a1, float a2)
{
  int v3 = *(_DWORD *)(a1 + 48);
  unsigned int v4 = *(_DWORD *)(a1 + 52);
  if (*(int *)(a1 + 56) < 1)
  {
    float __B = a2;
    vDSP_Length v5 = (int)(v4 * v3);
    vDSP_vsma(*(const float **)(a1 + 1464), 1, &__B, *(const float **)(a1 + 232), 1, *(float **)(a1 + 232), 1, v5);
    float __B = a2;
    vDSP_vsma(*(const float **)(a1 + 1480), 1, &__B, *(const float **)(a1 + 248), 1, *(float **)(a1 + 248), 1, v5);
    float __B = a2;
    vDSP_vsma(*(const float **)(a1 + 1472), 1, &__B, *(const float **)(a1 + 240), 1, *(float **)(a1 + 240), 1, v5);
    float __B = a2;
    vDSP_vsma(*(const float **)(a1 + 1488), 1, &__B, *(const float **)(a1 + 256), 1, *(float **)(a1 + 256), 1, v5);
  }
  else
  {
    sub_19E218AE4(a1 + 984, (uint64_t *)(a1 + 232), v4, v3, a2);
    sub_19E218AE4(a1 + 1224, (uint64_t *)(a1 + 248), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), a2);
    sub_19E218AE4(a1 + 1104, (uint64_t *)(a1 + 240), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), a2);
    sub_19E218AE4(a1 + 1344, (uint64_t *)(a1 + 256), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), a2);
  }
  vDSP_Length v6 = v4 * v4;
  float __B = a2;
  vDSP_vsma(*(const float **)(a1 + 1496), 1, &__B, *(const float **)(a1 + 264), 1, *(float **)(a1 + 264), 1, v6);
  float __B = a2;
  vDSP_vsma(*(const float **)(a1 + 1512), 1, &__B, *(const float **)(a1 + 280), 1, *(float **)(a1 + 280), 1, v6);
  float __B = a2;
  vDSP_vsma(*(const float **)(a1 + 1504), 1, &__B, *(const float **)(a1 + 272), 1, *(float **)(a1 + 272), 1, v6);
  float __B = a2;
  vDSP_vsma(*(const float **)(a1 + 1520), 1, &__B, *(const float **)(a1 + 288), 1, *(float **)(a1 + 288), 1, v6);
  uint64_t v8 = *(unsigned int *)(a1 + 52);
  if ((int)v8 < 1) {
    return v7.f32[0];
  }
  uint64_t v9 = *(float32x4_t **)(a1 + 1528);
  uint64_t v10 = *(float32x4_t **)(a1 + 296);
  uint64_t v11 = 4 * v8;
  if (v8 >= 8 && (v10 >= (float32x4_t *)((char *)v9 + v11) || v9 >= (float32x4_t *)((char *)v10 + v11)))
  {
    uint64_t v12 = v8 & 0x7FFFFFF8;
    uint64_t v44 = v9 + 1;
    uint64_t v45 = v10 + 1;
    uint64_t v46 = v8 & 0xFFFFFFF8;
    do
    {
      float32x4_t v47 = vmlaq_n_f32(*v45, *v44, a2);
      v45[-1] = vmlaq_n_f32(v45[-1], v44[-1], a2);
      *uint64_t v45 = v47;
      v44 += 2;
      v45 += 2;
      v46 -= 8;
    }
    while (v46);
    if (v12 == v8) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  uint64_t v13 = v8 - v12;
  uint64_t v14 = v12;
  unint64_t v15 = &v10->f32[v14];
  uint64_t v16 = &v9->f32[v14];
  do
  {
    float v17 = *v16++;
    float *v15 = *v15 + (float)(v17 * a2);
    ++v15;
    --v13;
  }
  while (v13);
LABEL_11:
  unint64_t v18 = *(float32x4_t **)(a1 + 1544);
  BOOL v19 = *(float32x4_t **)(a1 + 312);
  if (v8 < 8
    || (v19 < (float32x4_t *)((char *)v18 + v11) ? (BOOL v20 = v18 >= (float32x4_t *)((char *)v19 + v11)) : (BOOL v20 = 1), !v20))
  {
    uint64_t v21 = 0;
LABEL_22:
    uint64_t v26 = v8 - v21;
    uint64_t v27 = v21;
    uint64_t v28 = &v19->f32[v27];
    uint64_t v29 = &v18->f32[v27];
    do
    {
      float v30 = *v29++;
      float *v28 = *v28 + (float)(v30 * a2);
      ++v28;
      --v26;
    }
    while (v26);
    goto LABEL_24;
  }
  uint64_t v21 = v8 & 0x7FFFFFF8;
  uint64_t v22 = v18 + 1;
  uint64_t v23 = v19 + 1;
  uint64_t v24 = v8 & 0xFFFFFFF8;
  do
  {
    float32x4_t v25 = vmlaq_n_f32(*v23, *v22, a2);
    v23[-1] = vmlaq_n_f32(v23[-1], v22[-1], a2);
    *uint64_t v23 = v25;
    v22 += 2;
    v23 += 2;
    v24 -= 8;
  }
  while (v24);
  if (v21 != v8) {
    goto LABEL_22;
  }
LABEL_24:
  unint64_t v31 = *(float32x4_t **)(a1 + 1536);
  BOOL v32 = *(float32x4_t **)(a1 + 304);
  if (v8 < 8
    || (v32 < (float32x4_t *)((char *)v31 + v11) ? (BOOL v33 = v31 >= (float32x4_t *)((char *)v32 + v11)) : (BOOL v33 = 1), !v33))
  {
    uint64_t v34 = 0;
LABEL_35:
    uint64_t v39 = v8 - v34;
    uint64_t v40 = v34;
    unint64_t v41 = &v32->f32[v34];
    uint64_t v42 = &v31->f32[v40];
    do
    {
      float v43 = *v42++;
      v7.f32[0] = *v41 + (float)(v43 * a2);
      *v41++ = v7.f32[0];
      --v39;
    }
    while (v39);
    return v7.f32[0];
  }
  uint64_t v34 = v8 & 0x7FFFFFF8;
  unint64_t v35 = v31 + 1;
  float32x4_t v36 = v32 + 1;
  uint64_t v37 = v8 & 0xFFFFFFF8;
  do
  {
    float32x4_t v7 = v35[-1];
    float32x4_t v38 = vmlaq_n_f32(*v36, *v35, a2);
    v36[-1] = vmlaq_n_f32(v36[-1], v7, a2);
    float32x4_t *v36 = v38;
    v35 += 2;
    v36 += 2;
    v37 -= 8;
  }
  while (v37);
  if (v34 != v8) {
    goto LABEL_35;
  }
  return v7.f32[0];
}

void sub_19E215D54(uint64_t a1, uint64_t a2, void *a3, void *a4, int a5)
{
  int v652 = a5 - 1;
  if (a5 >= 1)
  {
    v638 = (void **)(a1 + 1648);
    vDSP_Length v6 = (void **)(a1 + 1656);
    v646 = (float **)(a1 + 1672);
    v647 = (void **)(a1 + 1640);
    v643 = (float **)(a1 + 1680);
    v645 = (void **)(a1 + 1664);
    v642 = (void **)(a1 + 1688);
    int v7 = a5 - 1;
    v634 = (void **)(a1 + 1656);
    do
    {
      int v9 = v652 - v7;
      if (*(unsigned char *)(a1 + 2672))
      {
        BOOL v10 = v9 < v652;
      }
      else
      {
        int v9 = v7;
        BOOL v10 = v7 > 0;
      }
      BOOL v649 = v10;
      if (*(unsigned char *)(a1 + 2672)) {
        BOOL v11 = v9 > 0;
      }
      else {
        BOOL v11 = v9 < v652;
      }
      if (*(unsigned char *)(a1 + 2672)) {
        int v12 = v9 - 1;
      }
      else {
        int v12 = v9 + 1;
      }
      int v640 = v12;
      if (*(unsigned char *)(a1 + 2672)) {
        int v13 = v9 + 1;
      }
      else {
        int v13 = v9 - 1;
      }
      int v637 = v13;
      uint64_t v14 = v9;
      memmove(*(void **)(*(void *)(a1 + 840) + 8 * v9), *(const void **)(*a4 + 8 * v9), 4 * *(int *)(a1 + 52));
      uint64_t v15 = 8 * v14;
      if (v11)
      {
        cblas_sgemv_NEWLAPACK();
        cblas_sgemv_NEWLAPACK();
        cblas_sgemv_NEWLAPACK();
        cblas_sgemv_NEWLAPACK();
      }
      v656 = *(const void **)(*(void *)(a1 + 352) + 8 * v14);
      v655 = *(const void **)(*(void *)(a1 + 376) + 8 * v14);
      v654 = *(const void **)(*(void *)(a1 + 424) + 8 * v14);
      v653 = *(const void **)(*(void *)(a1 + 400) + 8 * v14);
      v641 = *(float32x4_t **)(*(void *)(a1 + 448) + 8 * v14);
      uint64_t v16 = *(float32x4_t **)(*(void *)(a1 + 496) + 8 * v14);
      sub_19E1C7244(v647, &v653, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 736));
      sub_19E1C7244(v638, &v655, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 736));
      sub_19E1C7244(v6, &v656, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 736));
      sub_19E1C7520(v646, (const float **)&v654, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 740));
      sub_19E1C7244(v645, &v654, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 740));
      sub_19E1C7520(v643, (const float **)(*(void *)(a1 + 88) + v15), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 744));
      sub_19E1C7244(v642, (const void **)(*(void *)(a1 + 88) + v15), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 744));
      uint64_t v17 = *(void *)(a1 + 864);
      uint64_t v18 = *(void *)(a1 + 840);
      uint64_t v19 = *(int *)(a1 + 52);
      uint64_t v20 = 4 * v19;
      bzero(*(void **)(v17 + 8 * v14), 4 * v19);
      int v21 = (int)v19 / 8;
      if ((int)v19 >= 8)
      {
        uint64_t v22 = *(float32x4_t **)(v17 + 8 * v14);
        uint64_t v23 = *(float32x4_t **)(v18 + 8 * v14);
        uint64_t v24 = *v643;
        int v25 = (int)v19 / 8;
        uint64_t v26 = (float32x4_t *)*v647;
        do
        {
          float32x4_t v27 = *v26;
          float32x4_t v28 = v26[1];
          v26 += 2;
          float32x4_t v29 = *(float32x4_t *)v24;
          float32x4_t v30 = *(float32x4_t *)(v24 + 4);
          v24 += 8;
          float32x4_t v31 = vmulq_f32(v30, v28);
          float32x4_t v32 = vmulq_f32(v29, v27);
          float32x4_t v34 = *v23;
          float32x4_t v33 = v23[1];
          v23 += 2;
          float32x4_t v35 = vmlaq_f32(v22[1], v31, v33);
          float32x4_t *v22 = vmlaq_f32(*v22, v32, v34);
          v22[1] = v35;
          v22 += 2;
          --v25;
        }
        while (v25);
      }
      int v36 = 8 * v21;
      if (8 * v21 < (int)v19)
      {
        uint64_t v37 = (char *)*v647;
        uint64_t v38 = *(void *)(v18 + 8 * v14);
        uint64_t v39 = *v643;
        uint64_t v40 = *(void *)(v17 + 8 * v14);
        uint64_t v41 = v36;
        unint64_t v42 = v19 - v36;
        if (v42 < 8) {
          goto LABEL_46;
        }
        uint64_t v43 = 4 * v36;
        unint64_t v44 = v40 + v43;
        unint64_t v45 = v40 + v20;
        BOOL v46 = v40 + v43 >= (unint64_t)&v39[(unint64_t)v20 / 4]
           || (unint64_t)&v39[(unint64_t)v43 / 4] >= v45;
        BOOL v47 = !v46;
        BOOL v48 = v44 >= v38 + v20 || v38 + 4 * v41 >= v45;
        BOOL v49 = !v48;
        if ((unint64_t)&v37[v43] < v45 && v44 < (unint64_t)&v37[v20]) {
          goto LABEL_46;
        }
        if (v47) {
          goto LABEL_46;
        }
        if (v49) {
          goto LABEL_46;
        }
        uint64_t v51 = v42 - (v19 & 7) + v41;
        uint64_t v52 = v41 + (v19 & 7) - v19;
        uint64_t v53 = (float32x4_t *)(v40 + v43 + 16);
        unint64_t v54 = (float32x4_t *)&v37[v43 + 16];
        uint64_t v55 = (float32x4_t *)(v38 + v43 + 16);
        vDSP_Length v56 = (float32x4_t *)&v39[(unint64_t)v43 / 4 + 4];
        do
        {
          float32x4_t v57 = vmlaq_f32(*v53, vmulq_f32(*v56, *v54), *v55);
          v53[-1] = vmlaq_f32(v53[-1], vmulq_f32(v56[-1], v54[-1]), v55[-1]);
          *uint64_t v53 = v57;
          v53 += 2;
          v54 += 2;
          v55 += 2;
          v56 += 2;
          v52 += 8;
        }
        while (v52);
        uint64_t v41 = v51;
        if ((v19 & 7) != 0)
        {
LABEL_46:
          uint64_t v58 = v19 - v41;
          uint64_t v59 = (float *)(v40 + 4 * v41);
          uint64_t v60 = (float *)(v38 + 4 * v41);
          unint64_t v61 = &v39[v41];
          uint64_t v62 = (float *)&v37[4 * v41];
          do
          {
            float v63 = *v62++;
            float v64 = v63;
            float v65 = *v61++;
            float v66 = v65;
            float v67 = *v60++;
            *uint64_t v59 = *v59 + (float)((float)(v66 * v64) * v67);
            ++v59;
            --v58;
          }
          while (v58);
        }
      }
      uint64_t v68 = *(void *)(a1 + 960);
      uint64_t v69 = *(void *)(a1 + 840);
      uint64_t v70 = *(int *)(a1 + 52);
      uint64_t v71 = 4 * v70;
      bzero(*(void **)(v68 + 8 * v14), 4 * v70);
      int v72 = (int)v70 / 8;
      if ((int)v70 >= 8)
      {
        unint64_t v73 = *(float32x4_t **)(v68 + 8 * v14);
        float32x4_t v74 = *(float32x4_t **)(v69 + 8 * v14);
        int v75 = (int)v70 / 8;
        uint64_t v76 = v16;
        unint64_t v77 = (float32x4_t *)*v642;
        do
        {
          float32x4_t v78 = *v77;
          float32x4_t v79 = v77[1];
          v77 += 2;
          float32x4_t v80 = *v76;
          float32x4_t v81 = v76[1];
          v76 += 2;
          float32x4_t v82 = vmulq_f32(v81, v79);
          float32x4_t v83 = vmulq_f32(v80, v78);
          float32x4_t v85 = *v74;
          float32x4_t v84 = v74[1];
          v74 += 2;
          float32x4_t v86 = vmlaq_f32(v73[1], v82, v84);
          float32x4_t *v73 = vmlaq_f32(*v73, v83, v85);
          v73[1] = v86;
          v73 += 2;
          --v75;
        }
        while (v75);
      }
      int v87 = 8 * v72;
      if (8 * v72 < (int)v70)
      {
        uint64_t v88 = *(void *)(v69 + 8 * v14);
        unint64_t v89 = (char *)*v642;
        uint64_t v90 = *(void *)(v68 + 8 * v14);
        uint64_t v91 = v87;
        unint64_t v92 = v70 - v87;
        if (v92 < 8) {
          goto LABEL_75;
        }
        uint64_t v93 = 4 * v87;
        unint64_t v94 = v90 + v93;
        unint64_t v95 = v90 + v71;
        BOOL v96 = v90 + v93 >= (unint64_t)v16 + v71 || (unint64_t)v16 + v93 >= v95;
        BOOL v97 = !v96;
        BOOL v98 = v94 >= v88 + v71 || v88 + 4 * v91 >= v95;
        BOOL v99 = !v98;
        if ((unint64_t)&v89[v93] < v95 && v94 < (unint64_t)&v89[v71]) {
          goto LABEL_75;
        }
        if (v97) {
          goto LABEL_75;
        }
        if (v99) {
          goto LABEL_75;
        }
        uint64_t v101 = v92 - (v70 & 7) + v91;
        uint64_t v102 = v91 + (v70 & 7) - v70;
        unint64_t v103 = (float32x4_t *)(v90 + v93 + 16);
        uint64_t v104 = (float32x4_t *)&v89[v93 + 16];
        uint64_t v105 = (float32x4_t *)(v88 + v93 + 16);
        BOOL v106 = (float32x4_t *)((char *)v16 + v93 + 16);
        do
        {
          float32x4_t v107 = vmlaq_f32(*v103, vmulq_f32(*v106, *v104), *v105);
          v103[-1] = vmlaq_f32(v103[-1], vmulq_f32(v106[-1], v104[-1]), v105[-1]);
          *unint64_t v103 = v107;
          v103 += 2;
          v104 += 2;
          v105 += 2;
          v106 += 2;
          v102 += 8;
        }
        while (v102);
        uint64_t v91 = v101;
        if ((v70 & 7) != 0)
        {
LABEL_75:
          uint64_t v108 = v70 - v91;
          uint64_t v109 = 4 * v91;
          float v110 = (float *)(v90 + v109);
          float v111 = (float *)(v88 + v109);
          uint64_t v112 = &v16->f32[(unint64_t)v109 / 4];
          unint64_t v113 = (float *)&v89[v109];
          do
          {
            float v114 = *v113++;
            float v115 = v114;
            float v116 = *v112++;
            float v117 = v116;
            float v118 = *v111++;
            float *v110 = *v110 + (float)((float)(v117 * v115) * v118);
            ++v110;
            --v108;
          }
          while (v108);
        }
      }
      uint64_t v119 = *(void *)(a1 + 960);
      uint64_t v120 = *(void *)(a1 + 864);
      uint64_t v121 = *(float32x4_t ***)(a1 + 2584);
      uint64_t v122 = *(int *)(a1 + 52);
      if ((int)v122 >= 8)
      {
        float32x4_t v123 = *(float32x4_t **)(v119 + 8 * v14);
        unint64_t v124 = *v121;
        int v125 = (int)v122 / 8;
        unint64_t v126 = *(float32x4_t **)(v120 + 8 * v14);
        do
        {
          float32x4_t v128 = *v126;
          float32x4_t v127 = v126[1];
          v126 += 2;
          float32x4_t v130 = *v124;
          float32x4_t v129 = v124[1];
          v124 += 2;
          float32x4_t v131 = vmlaq_f32(v123[1], v129, v127);
          float32x4_t *v123 = vmlaq_f32(*v123, v130, v128);
          v123[1] = v131;
          v123 += 2;
          --v125;
        }
        while (v125);
      }
      int v132 = 8 * ((int)v122 / 8);
      if (v132 < (int)v122)
      {
        uint64_t v133 = *(void *)(v120 + 8 * v14);
        uint64_t v134 = *v121;
        uint64_t v135 = *(void *)(v119 + 8 * v14);
        uint64_t v136 = v132;
        unint64_t v137 = v122 - v132;
        if (v137 < 8) {
          goto LABEL_97;
        }
        uint64_t v138 = 4 * v132;
        unint64_t v139 = v135 + 4 * v122;
        BOOL v140 = v135 + v138 >= (unint64_t)v134->u64 + 4 * v122 || (unint64_t)&v134[v132 / 4u] >= v139;
        BOOL v141 = !v140;
        if (v133 + v138 < v139 && v135 + v138 < (unint64_t)(v133 + 4 * v122)) {
          goto LABEL_97;
        }
        if (v141) {
          goto LABEL_97;
        }
        uint64_t v143 = v137 - (v122 & 7) + v136;
        uint64_t v144 = v136 + (v122 & 7) - v122;
        float v145 = (float32x4_t *)(v135 + v138 + 16);
        float v146 = (float32x4_t *)(v133 + v138 + 16);
        unint64_t v147 = (float32x4_t *)((char *)v134 + v138 + 16);
        do
        {
          float32x4_t v148 = vmlaq_f32(*v145, *v147, *v146);
          v145[-1] = vmlaq_f32(v145[-1], v147[-1], v146[-1]);
          *float v145 = v148;
          v145 += 2;
          v146 += 2;
          v147 += 2;
          v144 += 8;
        }
        while (v144);
        uint64_t v136 = v143;
        if ((v122 & 7) != 0)
        {
LABEL_97:
          uint64_t v149 = v122 - v136;
          uint64_t v150 = (float *)(v135 + 4 * v136);
          unint64_t v151 = &v134->f32[v136];
          unint64_t v152 = (float *)(v133 + 4 * v136);
          do
          {
            float v153 = *v152++;
            float v154 = v153;
            float v155 = *v151++;
            *uint64_t v150 = *v150 + (float)(v155 * v154);
            ++v150;
            --v149;
          }
          while (v149);
        }
      }
      if (v11)
      {
        uint64_t v156 = *(float32x4_t **)(*(void *)(a1 + 472) + 8 * v640);
        uint64_t v157 = *(void *)(a1 + 960);
        uint64_t v158 = *(void *)(a1 + 888);
        long long v159 = *(float32x4_t ***)(a1 + 2576);
        uint64_t v160 = *(int *)(a1 + 52);
        if ((int)v160 >= 8)
        {
          float v161 = *(float32x4_t **)(v157 + 8 * v14);
          float v162 = *v159;
          int v163 = (int)v160 / 8;
          unint64_t v164 = *(float32x4_t **)(v158 + 8 * v640);
          do
          {
            float32x4_t v166 = *v164;
            float32x4_t v165 = v164[1];
            v164 += 2;
            float32x4_t v168 = *v162;
            float32x4_t v167 = v162[1];
            v162 += 2;
            float32x4_t v169 = vmlaq_f32(v161[1], v167, v165);
            *float v161 = vmlaq_f32(*v161, v168, v166);
            v161[1] = v169;
            v161 += 2;
            --v163;
          }
          while (v163);
        }
        int v170 = 8 * ((int)v160 / 8);
        if (v170 < (int)v160)
        {
          uint64_t v171 = *(void *)(v158 + 8 * v640);
          float32x4_t v172 = *v159;
          uint64_t v173 = *(void *)(v157 + 8 * v14);
          uint64_t v174 = v170;
          unint64_t v175 = v160 - v170;
          if (v175 < 8) {
            goto LABEL_120;
          }
          uint64_t v176 = 4 * v170;
          unint64_t v177 = v173 + 4 * v160;
          BOOL v178 = v173 + v176 >= (unint64_t)v172->u64 + 4 * v160 || (unint64_t)&v172[v170 / 4u] >= v177;
          BOOL v179 = !v178;
          if (v171 + v176 < v177 && v173 + v176 < (unint64_t)(v171 + 4 * v160)) {
            goto LABEL_120;
          }
          if (v179) {
            goto LABEL_120;
          }
          uint64_t v181 = v175 - (v160 & 7) + v174;
          uint64_t v182 = v174 + (v160 & 7) - v160;
          uint64_t v183 = (float32x4_t *)(v173 + v176 + 16);
          uint64_t v184 = (float32x4_t *)(v171 + v176 + 16);
          unint64_t v185 = (float32x4_t *)((char *)v172 + v176 + 16);
          do
          {
            float32x4_t v186 = vmlaq_f32(*v183, *v185, *v184);
            v183[-1] = vmlaq_f32(v183[-1], v185[-1], v184[-1]);
            float32x4_t *v183 = v186;
            v183 += 2;
            v184 += 2;
            v185 += 2;
            v182 += 8;
          }
          while (v182);
          uint64_t v174 = v181;
          if ((v160 & 7) != 0)
          {
LABEL_120:
            uint64_t v187 = v160 - v174;
            uint64_t v188 = (float *)(v173 + 4 * v174);
            float32x4_t v189 = &v172->f32[v174];
            uint64_t v190 = (float *)(v171 + 4 * v174);
            do
            {
              float v191 = *v190++;
              float v192 = v191;
              float v193 = *v189++;
              *uint64_t v188 = *v188 + (float)(v193 * v192);
              ++v188;
              --v187;
            }
            while (v187);
          }
        }
        uint64_t v194 = *(void *)(a1 + 960);
        uint64_t v195 = *(void *)(a1 + 912);
        float v196 = *(float32x4_t ***)(a1 + 2568);
        uint64_t v197 = *(int *)(a1 + 52);
        if ((int)v197 >= 8)
        {
          unint64_t v198 = *(float32x4_t **)(v194 + 8 * v14);
          uint64_t v199 = *v196;
          int v200 = (int)v197 / 8;
          uint64_t v201 = *(float32x4_t **)(v195 + 8 * v640);
          do
          {
            float32x4_t v203 = *v201;
            float32x4_t v202 = v201[1];
            v201 += 2;
            float32x4_t v205 = *v199;
            float32x4_t v204 = v199[1];
            v199 += 2;
            float32x4_t v206 = vmlaq_f32(v198[1], v204, v202);
            *unint64_t v198 = vmlaq_f32(*v198, v205, v203);
            v198[1] = v206;
            v198 += 2;
            --v200;
          }
          while (v200);
        }
        int v207 = 8 * ((int)v197 / 8);
        if (v207 < (int)v197)
        {
          uint64_t v208 = *(void *)(v195 + 8 * v640);
          float32x4_t v209 = *v196;
          uint64_t v210 = *(void *)(v194 + 8 * v14);
          uint64_t v211 = v207;
          unint64_t v212 = v197 - v207;
          if (v212 < 8) {
            goto LABEL_142;
          }
          uint64_t v213 = 4 * v207;
          unint64_t v214 = v210 + 4 * v197;
          BOOL v215 = v210 + v213 >= (unint64_t)v209->u64 + 4 * v197 || (unint64_t)&v209[v207 / 4u] >= v214;
          BOOL v216 = !v215;
          if (v208 + v213 < v214 && v210 + v213 < (unint64_t)(v208 + 4 * v197)) {
            goto LABEL_142;
          }
          if (v216) {
            goto LABEL_142;
          }
          uint64_t v218 = v212 - (v197 & 7) + v211;
          uint64_t v219 = v211 + (v197 & 7) - v197;
          uint64_t v220 = (float32x4_t *)(v210 + v213 + 16);
          uint64_t v221 = (float32x4_t *)(v208 + v213 + 16);
          vDSP_Length v222 = (float32x4_t *)((char *)v209 + v213 + 16);
          do
          {
            float32x4_t v223 = vmlaq_f32(*v220, *v222, *v221);
            v220[-1] = vmlaq_f32(v220[-1], v222[-1], v221[-1]);
            *uint64_t v220 = v223;
            v220 += 2;
            v221 += 2;
            v222 += 2;
            v219 += 8;
          }
          while (v219);
          uint64_t v211 = v218;
          if ((v197 & 7) != 0)
          {
LABEL_142:
            uint64_t v224 = v197 - v211;
            v225 = (float *)(v210 + 4 * v211);
            int64_t v226 = &v209->f32[v211];
            uint64_t v227 = (float *)(v208 + 4 * v211);
            do
            {
              float v228 = *v227++;
              float v229 = v228;
              float v230 = *v226++;
              float *v225 = *v225 + (float)(v230 * v229);
              ++v225;
              --v224;
            }
            while (v224);
          }
        }
        uint64_t v231 = *(void *)(a1 + 960);
        uint64_t v232 = *(int *)(a1 + 52);
        if ((int)v232 >= 8)
        {
          v233 = *(float32x4_t **)(v231 + 8 * v14);
          int v234 = *(float32x4_t **)(v231 + 8 * v640);
          int v235 = (int)v232 / 8;
          float32x4_t v236 = v156;
          do
          {
            float32x4_t v238 = *v234;
            float32x4_t v237 = v234[1];
            v234 += 2;
            float32x4_t v240 = *v236;
            float32x4_t v239 = v236[1];
            v236 += 2;
            float32x4_t v241 = vmlaq_f32(v233[1], v239, v237);
            float32x4_t *v233 = vmlaq_f32(*v233, v240, v238);
            v233[1] = v241;
            v233 += 2;
            --v235;
          }
          while (v235);
        }
        int v242 = 8 * ((int)v232 / 8);
        if (v242 < (int)v232)
        {
          uint64_t v243 = *(void *)(v231 + 8 * v640);
          uint64_t v244 = *(void *)(v231 + 8 * v14);
          uint64_t v245 = v242;
          unint64_t v246 = v232 - v242;
          if (v246 < 8) {
            goto LABEL_164;
          }
          uint64_t v247 = 4 * v242;
          unint64_t v248 = v244 + 4 * v232;
          BOOL v249 = v244 + v247 >= (unint64_t)v156->u64 + 4 * v232 || (unint64_t)&v156[v242 / 4u] >= v248;
          BOOL v250 = !v249;
          if (v243 + v247 < v248 && v244 + v247 < (unint64_t)(v243 + 4 * v232)) {
            goto LABEL_164;
          }
          if (v250) {
            goto LABEL_164;
          }
          uint64_t v252 = v246 - (v232 & 7) + v245;
          uint64_t v253 = v245 + (v232 & 7) - v232;
          float v254 = (float32x4_t *)(v244 + v247 + 16);
          uint64_t v255 = (float32x4_t *)(v243 + v247 + 16);
          uint64_t v256 = (float32x4_t *)((char *)v156 + v247 + 16);
          do
          {
            float32x4_t v257 = vmlaq_f32(*v254, *v256, *v255);
            v254[-1] = vmlaq_f32(v254[-1], v256[-1], v255[-1]);
            *float v254 = v257;
            v254 += 2;
            v255 += 2;
            v256 += 2;
            v253 += 8;
          }
          while (v253);
          uint64_t v245 = v252;
          if ((v232 & 7) != 0)
          {
LABEL_164:
            uint64_t v258 = v232 - v245;
            v259 = (float *)(v244 + 4 * v245);
            int v260 = &v156->f32[v245];
            float32x4_t v261 = (float *)(v243 + 4 * v245);
            do
            {
              float v262 = *v261++;
              float v263 = v262;
              float v264 = *v260++;
              float *v259 = *v259 + (float)(v264 * v263);
              ++v259;
              --v258;
            }
            while (v258);
          }
        }
      }
      uint64_t v265 = *(void *)(a1 + 936);
      uint64_t v266 = *(void *)(a1 + 960);
      uint64_t v267 = *(int *)(a1 + 52);
      uint64_t v268 = 4 * v267;
      bzero(*(void **)(v265 + 8 * v14), 4 * v267);
      int v269 = (int)v267 / 8;
      if ((int)v267 >= 8)
      {
        unint64_t v270 = *(float32x4_t **)(v265 + 8 * v14);
        v271 = *(float32x4_t **)(v266 + 8 * v14);
        int v272 = (int)v267 / 8;
        uint64_t v273 = v641;
        v274 = (float32x4_t *)*v645;
        do
        {
          float32x4_t v275 = *v274;
          float32x4_t v276 = v274[1];
          v274 += 2;
          float32x4_t v277 = *v271;
          float32x4_t v278 = v271[1];
          v271 += 2;
          float32x4_t v279 = vmulq_f32(v278, v276);
          float32x4_t v280 = vmulq_f32(v277, v275);
          float32x4_t v282 = *v273;
          float32x4_t v281 = v273[1];
          v273 += 2;
          float32x4_t v283 = vmlaq_f32(v270[1], v279, v281);
          *unint64_t v270 = vmlaq_f32(*v270, v280, v282);
          v270[1] = v283;
          v270 += 2;
          --v272;
        }
        while (v272);
      }
      int v284 = 8 * v269;
      if (8 * v269 < (int)v267)
      {
        uint64_t v285 = *(void *)(v266 + 8 * v14);
        int v286 = (char *)*v645;
        uint64_t v287 = *(void *)(v265 + 8 * v14);
        uint64_t v288 = v284;
        unint64_t v289 = v267 - v284;
        if (v289 < 8) {
          goto LABEL_193;
        }
        uint64_t v290 = 4 * v284;
        unint64_t v291 = v287 + v290;
        unint64_t v292 = v287 + v268;
        BOOL v293 = v287 + v290 >= (unint64_t)(v285 + v268) || v285 + v290 >= v292;
        BOOL v294 = !v293;
        BOOL v295 = v291 >= (unint64_t)v641 + v268 || (unint64_t)v641->u64 + 4 * v288 >= v292;
        BOOL v296 = !v295;
        if ((unint64_t)&v286[v290] < v292 && v291 < (unint64_t)&v286[v268]) {
          goto LABEL_193;
        }
        if (v294) {
          goto LABEL_193;
        }
        if (v296) {
          goto LABEL_193;
        }
        uint64_t v298 = v289 - (v267 & 7) + v288;
        uint64_t v299 = v288 + (v267 & 7) - v267;
        uint64_t v300 = (float32x4_t *)(v287 + v290 + 16);
        v301 = (float32x4_t *)&v286[v290 + 16];
        v302 = (float32x4_t *)((char *)v641 + v290 + 16);
        size_t v303 = (float32x4_t *)(v285 + v290 + 16);
        do
        {
          float32x4_t v304 = vmlaq_f32(*v300, vmulq_f32(*v303, *v301), *v302);
          v300[-1] = vmlaq_f32(v300[-1], vmulq_f32(v303[-1], v301[-1]), v302[-1]);
          *uint64_t v300 = v304;
          v300 += 2;
          v301 += 2;
          v302 += 2;
          v303 += 2;
          v299 += 8;
        }
        while (v299);
        uint64_t v288 = v298;
        if ((v267 & 7) != 0)
        {
LABEL_193:
          uint64_t v305 = v267 - v288;
          uint64_t v306 = 4 * v288;
          uint64_t v307 = (float *)(v287 + v306);
          uint64_t v308 = &v641->f32[(unint64_t)v306 / 4];
          v309 = (float *)(v285 + v306);
          v310 = (float *)&v286[v306];
          do
          {
            float v311 = *v310++;
            float v312 = v311;
            float v313 = *v309++;
            float v314 = v313;
            float v315 = *v308++;
            *uint64_t v307 = *v307 + (float)((float)(v314 * v312) * v315);
            ++v307;
            --v305;
          }
          while (v305);
        }
      }
      if (v649)
      {
        uint64_t v316 = *(void *)(a1 + 888);
        uint64_t v317 = *(void *)(a1 + 960);
        uint64_t v318 = *(void *)(a1 + 88);
        uint64_t v319 = *(int *)(a1 + 52);
        uint64_t v320 = 4 * v319;
        bzero(*(void **)(v316 + 8 * v14), 4 * v319);
        int v321 = (int)v319 / 8;
        if ((int)v319 >= 8)
        {
          v322 = *(float32x4_t **)(v316 + 8 * v14);
          size_t v323 = *(float32x4_t **)(v318 + 8 * v637);
          int v324 = (int)v319 / 8;
          uint64_t v325 = *(float32x4_t **)(v317 + 8 * v14);
          uint64_t v326 = (float32x4_t *)*v638;
          do
          {
            float32x4_t v327 = *v326;
            float32x4_t v328 = v326[1];
            v326 += 2;
            float32x4_t v329 = *v325;
            float32x4_t v330 = v325[1];
            v325 += 2;
            float32x4_t v331 = vmulq_f32(v330, v328);
            float32x4_t v332 = vmulq_f32(v329, v327);
            float32x4_t v334 = *v323;
            float32x4_t v333 = v323[1];
            v323 += 2;
            float32x4_t v335 = vmlaq_f32(v322[1], v331, v333);
            float32x4_t *v322 = vmlaq_f32(*v322, v332, v334);
            v322[1] = v335;
            v322 += 2;
            --v324;
          }
          while (v324);
        }
        int v336 = 8 * v321;
        if (8 * v321 < (int)v319)
        {
          uint64_t v337 = *(void *)(v317 + 8 * v14);
          uint64_t v338 = *(void *)(v318 + 8 * v637);
          uint64_t v339 = (char *)*v638;
          uint64_t v340 = *(void *)(v316 + 8 * v14);
          uint64_t v341 = v336;
          unint64_t v342 = v319 - v336;
          if (v342 < 8) {
            goto LABEL_223;
          }
          uint64_t v343 = 4 * v336;
          unint64_t v344 = v340 + v343;
          unint64_t v345 = v340 + v320;
          BOOL v346 = v340 + v343 >= (unint64_t)(v337 + v320) || v337 + v343 >= v345;
          BOOL v347 = !v346;
          BOOL v348 = v344 >= v338 + v320 || v338 + 4 * v341 >= v345;
          BOOL v349 = !v348;
          if ((unint64_t)&v339[v343] < v345 && v344 < (unint64_t)&v339[v320]) {
            goto LABEL_223;
          }
          if (v347) {
            goto LABEL_223;
          }
          if (v349) {
            goto LABEL_223;
          }
          uint64_t v351 = v342 - (v319 & 7) + v341;
          uint64_t v352 = v341 + (v319 & 7) - v319;
          uint64_t v353 = (float32x4_t *)(v340 + v343 + 16);
          uint64_t v354 = (float32x4_t *)&v339[v343 + 16];
          v355 = (float32x4_t *)(v338 + v343 + 16);
          v356 = (float32x4_t *)(v337 + v343 + 16);
          do
          {
            float32x4_t v357 = vmlaq_f32(*v353, vmulq_f32(*v356, *v354), *v355);
            v353[-1] = vmlaq_f32(v353[-1], vmulq_f32(v356[-1], v354[-1]), v355[-1]);
            *uint64_t v353 = v357;
            v353 += 2;
            v354 += 2;
            v355 += 2;
            v356 += 2;
            v352 += 8;
          }
          while (v352);
          uint64_t v341 = v351;
          if ((v319 & 7) != 0)
          {
LABEL_223:
            uint64_t v358 = v319 - v341;
            uint64_t v359 = (float *)(v340 + 4 * v341);
            v360 = (float *)(v338 + 4 * v341);
            v361 = (float *)(v337 + 4 * v341);
            v362 = (float *)&v339[4 * v341];
            do
            {
              float v363 = *v362++;
              float v364 = v363;
              float v365 = *v361++;
              float v366 = v365;
              float v367 = *v360++;
              *uint64_t v359 = *v359 + (float)((float)(v366 * v364) * v367);
              ++v359;
              --v358;
            }
            while (v358);
          }
        }
      }
      uint64_t v368 = *(void *)(a1 + 912);
      uint64_t v369 = *(void *)(a1 + 960);
      uint64_t v370 = *(int *)(a1 + 52);
      uint64_t v371 = 4 * v370;
      bzero(*(void **)(v368 + 8 * v14), 4 * v370);
      int v372 = (int)v370 / 8;
      vDSP_Length v6 = v634;
      if ((int)v370 >= 8)
      {
        v373 = *(float32x4_t **)(v368 + 8 * v14);
        v374 = *v646;
        v375 = *(float32x4_t **)(v369 + 8 * v14);
        int v376 = (int)v370 / 8;
        v377 = (float32x4_t *)*v634;
        do
        {
          float32x4_t v378 = *v377;
          float32x4_t v379 = v377[1];
          v377 += 2;
          float32x4_t v380 = *v375;
          float32x4_t v381 = v375[1];
          v375 += 2;
          float32x4_t v382 = vmulq_f32(v381, v379);
          float32x4_t v383 = vmulq_f32(v380, v378);
          float32x4_t v385 = *(float32x4_t *)v374;
          float32x4_t v384 = *(float32x4_t *)(v374 + 4);
          v374 += 8;
          float32x4_t v386 = vmlaq_f32(v373[1], v382, v384);
          float32x4_t *v373 = vmlaq_f32(*v373, v383, v385);
          v373[1] = v386;
          v373 += 2;
          --v376;
        }
        while (v376);
      }
      int v387 = 8 * v372;
      if (8 * v372 < (int)v370)
      {
        v388 = (char *)*v634;
        uint64_t v389 = *(void *)(v369 + 8 * v14);
        v390 = *v646;
        uint64_t v391 = *(void *)(v368 + 8 * v14);
        uint64_t v392 = v387;
        unint64_t v393 = v370 - v387;
        if (v393 < 8) {
          goto LABEL_252;
        }
        uint64_t v394 = 4 * v387;
        unint64_t v395 = v391 + v394;
        unint64_t v396 = v391 + v371;
        BOOL v397 = v391 + v394 >= (unint64_t)(v389 + v371) || v389 + v394 >= v396;
        BOOL v398 = !v397;
        BOOL v399 = v395 >= (unint64_t)&v390[(unint64_t)v371 / 4] || (unint64_t)&v390[v392] >= v396;
        BOOL v400 = !v399;
        if ((unint64_t)&v388[v394] < v396 && v395 < (unint64_t)&v388[v371]) {
          goto LABEL_252;
        }
        if (v398) {
          goto LABEL_252;
        }
        if (v400) {
          goto LABEL_252;
        }
        uint64_t v402 = v393 - (v370 & 7) + v392;
        uint64_t v403 = v392 + (v370 & 7) - v370;
        v404 = (float32x4_t *)(v391 + v394 + 16);
        v405 = (float32x4_t *)&v388[v394 + 16];
        v406 = (float32x4_t *)&v390[(unint64_t)v394 / 4 + 4];
        v407 = (float32x4_t *)(v389 + v394 + 16);
        do
        {
          float32x4_t v408 = vmlaq_f32(*v404, vmulq_f32(*v407, *v405), *v406);
          v404[-1] = vmlaq_f32(v404[-1], vmulq_f32(v407[-1], v405[-1]), v406[-1]);
          float32x4_t *v404 = v408;
          v404 += 2;
          v405 += 2;
          v406 += 2;
          v407 += 2;
          v403 += 8;
        }
        while (v403);
        uint64_t v392 = v402;
        if ((v370 & 7) != 0)
        {
LABEL_252:
          uint64_t v409 = v370 - v392;
          v410 = (float *)(v391 + 4 * v392);
          v411 = &v390[v392];
          v412 = (float *)(v389 + 4 * v392);
          v413 = (float *)&v388[4 * v392];
          do
          {
            float v414 = *v413++;
            float v415 = v414;
            float v416 = *v412++;
            float v417 = v416;
            float v418 = *v411++;
            float *v410 = *v410 + (float)((float)(v417 * v415) * v418);
            ++v410;
            --v409;
          }
          while (v409);
        }
      }
      if (((**(uint64_t (***)(uint64_t))a1)(a1) & 1) == 0)
      {
        bzero(*(void **)(*(void *)(a1 + 816) + 8 * v14), 4 * *(int *)(a1 + 48));
        cblas_sgemv_NEWLAPACK();
        if (v649) {
          cblas_sgemv_NEWLAPACK();
        }
        cblas_sgemv_NEWLAPACK();
        cblas_sgemv_NEWLAPACK();
      }
    }
    while (v7-- > 0);
  }
  uint64_t v419 = *(unsigned int *)(a1 + 52);
  if ((int)v419 > 0)
  {
    size_t v420 = 4 * v419;
    bzero(*(void **)(a1 + 1528), 4 * v419);
    v648 = (float32x4_t **)(a1 + 1536);
    bzero(*(void **)(a1 + 1536), v420);
    bzero(*(void **)(a1 + 1544), v420);
    v644 = (float32x4_t **)(a1 + 1544);
    int v421 = a5;
    if (*(int *)(a1 + 56) <= 0) {
      goto LABEL_260;
    }
    goto LABEL_259;
  }
  v648 = (float32x4_t **)(a1 + 1536);
  v644 = (float32x4_t **)(a1 + 1544);
  int v421 = a5;
  if (*(int *)(a1 + 56) > 0)
  {
LABEL_259:
    *(_DWORD *)(a1 + 1000) = 0;
    *(_DWORD *)(a1 + 1240) = 0;
    *(_DWORD *)(a1 + 1120) = 0;
    *(_DWORD *)(a1 + 1360) = 0;
  }
LABEL_260:
  if (v421 > 1)
  {
    int v650 = v421 - 2;
    for (int i = 1; i != v421; ++i)
    {
      int v426 = v421 - 2;
      int v427 = v652 - i;
      if (*(unsigned char *)(a1 + 2672))
      {
        uint64_t v428 = v427 + 1;
      }
      else
      {
        int v427 = i;
        int v426 = 1;
        uint64_t v428 = i - 1;
      }
      uint64_t v429 = *(void *)(a1 + 912);
      uint64_t v430 = *(void *)(a1 + 88);
      uint64_t v431 = *(int *)(a1 + 52);
      int v432 = (int)v431 / 8;
      if ((int)v431 >= 8)
      {
        v433 = *(float32x4_t **)(a1 + 1528);
        v434 = *(float32x4_t **)(v430 + 8 * v428);
        int v435 = (int)v431 / 8;
        v436 = *(float32x4_t **)(v429 + 8 * v427);
        do
        {
          float32x4_t v438 = *v436;
          float32x4_t v437 = v436[1];
          v436 += 2;
          float32x4_t v440 = *v434;
          float32x4_t v439 = v434[1];
          v434 += 2;
          float32x4_t v441 = vmlaq_f32(v433[1], v439, v437);
          float32x4_t *v433 = vmlaq_f32(*v433, v440, v438);
          v433[1] = v441;
          v433 += 2;
          --v435;
        }
        while (v435);
      }
      int v442 = 8 * v432;
      if (8 * v432 < (int)v431)
      {
        uint64_t v443 = *(void *)(v429 + 8 * v427);
        uint64_t v444 = *(void *)(v430 + 8 * v428);
        uint64_t v445 = *(void *)(a1 + 1528);
        uint64_t v446 = v442;
        unint64_t v447 = v431 - v442;
        if (v447 < 8) {
          goto LABEL_286;
        }
        uint64_t v448 = 4 * v442;
        unint64_t v449 = v445 + 4 * v431;
        BOOL v450 = v445 + v448 >= (unint64_t)(v444 + 4 * v431) || v444 + 4 * v442 >= v449;
        BOOL v451 = !v450;
        if (v443 + v448 < v449 && v445 + v448 < (unint64_t)(v443 + 4 * v431)) {
          goto LABEL_286;
        }
        if (v451) {
          goto LABEL_286;
        }
        uint64_t v453 = v447 - (v431 & 7) + v446;
        uint64_t v454 = v446 + (v431 & 7) - v431;
        v455 = (float32x4_t *)(v445 + v448 + 16);
        v456 = (float32x4_t *)(v443 + v448 + 16);
        v457 = (float32x4_t *)(v444 + v448 + 16);
        do
        {
          float32x4_t v458 = vmlaq_f32(*v455, *v457, *v456);
          v455[-1] = vmlaq_f32(v455[-1], v457[-1], v456[-1]);
          float32x4_t *v455 = v458;
          v455 += 2;
          v456 += 2;
          v457 += 2;
          v454 += 8;
        }
        while (v454);
        uint64_t v446 = v453;
        if ((v431 & 7) != 0)
        {
LABEL_286:
          uint64_t v459 = v431 - v446;
          v460 = (float *)(v445 + 4 * v446);
          v461 = (float *)(v444 + 4 * v446);
          v462 = (float *)(v443 + 4 * v446);
          do
          {
            float v463 = *v462++;
            float v464 = v463;
            float v465 = *v461++;
            float *v460 = *v460 + (float)(v465 * v464);
            ++v460;
            --v459;
          }
          while (v459);
        }
      }
      uint64_t v466 = *(void *)(a1 + 888);
      uint64_t v467 = *(void *)(a1 + 88);
      uint64_t v468 = *(int *)(a1 + 52);
      int v469 = (int)v468 / 8;
      if ((int)v468 >= 8)
      {
        v470 = *v648;
        v471 = *(float32x4_t **)(v467 + 8 * v428);
        int v472 = (int)v468 / 8;
        v473 = *(float32x4_t **)(v466 + 8 * v427);
        do
        {
          float32x4_t v475 = *v473;
          float32x4_t v474 = v473[1];
          v473 += 2;
          float32x4_t v477 = *v471;
          float32x4_t v476 = v471[1];
          v471 += 2;
          float32x4_t v478 = vmlaq_f32(v470[1], v476, v474);
          float32x4_t *v470 = vmlaq_f32(*v470, v477, v475);
          v470[1] = v478;
          v470 += 2;
          --v472;
        }
        while (v472);
      }
      int v479 = 8 * v469;
      if (8 * v469 < (int)v468)
      {
        uint64_t v480 = *(void *)(v466 + 8 * v427);
        uint64_t v481 = *(void *)(v467 + 8 * v428);
        v482 = *v648;
        uint64_t v483 = v479;
        unint64_t v484 = v468 - v479;
        if (v484 < 8) {
          goto LABEL_308;
        }
        uint64_t v485 = 4 * v479;
        unint64_t v486 = (unint64_t)v482->u64 + 4 * v468;
        BOOL v487 = (unint64_t)v482 + v485 >= v481 + 4 * v468 || v481 + 4 * v479 >= v486;
        BOOL v488 = !v487;
        if (v480 + v485 < v486 && (unint64_t)v482 + v485 < v480 + 4 * v468) {
          goto LABEL_308;
        }
        if (v488) {
          goto LABEL_308;
        }
        uint64_t v490 = v484 - (v468 & 7) + v483;
        uint64_t v491 = v483 + (v468 & 7) - v468;
        v492 = (float32x4_t *)((char *)v482 + v485 + 16);
        v493 = (float32x4_t *)(v480 + v485 + 16);
        v494 = (float32x4_t *)(v481 + v485 + 16);
        do
        {
          float32x4_t v495 = vmlaq_f32(*v492, *v494, *v493);
          v492[-1] = vmlaq_f32(v492[-1], v494[-1], v493[-1]);
          float32x4_t *v492 = v495;
          v492 += 2;
          v493 += 2;
          v494 += 2;
          v491 += 8;
        }
        while (v491);
        uint64_t v483 = v490;
        if ((v468 & 7) != 0)
        {
LABEL_308:
          uint64_t v496 = v468 - v483;
          v497 = &v482->f32[v483];
          v498 = (float *)(v481 + 4 * v483);
          v499 = (float *)(v480 + 4 * v483);
          do
          {
            float v500 = *v499++;
            float v501 = v500;
            float v502 = *v498++;
            float *v497 = *v497 + (float)(v502 * v501);
            ++v497;
            --v496;
          }
          while (v496);
        }
      }
      BOOL v423 = v427 == v426;
      uint64_t v424 = 8 * v427;
      uint64_t v425 = 8 * v428;
      sub_19E1C7984(*(void *)(a1 + 64) + v424, *(void *)(a1 + 912) + v424, *(void *)(a1 + 112) + 8 * v428, (void **)(a1 + 1496), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v423);
      sub_19E1C7984(*(void *)(a1 + 64) + v424, *(void *)(a1 + 888) + v424, *(void *)(a1 + 112) + v425, (void **)(a1 + 1504), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v423);
      sub_19E1C7984(*(void *)(a1 + 64) + v424, *(void *)(a1 + 864) + v424, *(void *)(a1 + 112) + v425, (void **)(a1 + 1512), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v423);
      sub_19E1C7984(*(void *)(a1 + 64) + v424, *(void *)(a1 + 936) + v424, *(void *)(a1 + 112) + v425, (void **)(a1 + 1520), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v423);
    }
    int v503 = 1;
    while (1)
    {
      if (*(unsigned char *)(a1 + 2672)) {
        int v504 = v652 - v503;
      }
      else {
        int v504 = v503;
      }
      if (*(unsigned char *)(a1 + 2672)) {
        int v505 = v650;
      }
      else {
        int v505 = 1;
      }
      if (a3[1] == *a3 || *(int *)(a1 + 56) < 1 || !(**(unsigned int (***)(uint64_t))a1)(a1))
      {
        sub_19E1C7984(*(void *)(a1 + 64) + 8 * v504, *(void *)(a1 + 888) + 8 * v504, *(void *)(a1 + 64) + 8 * v504, (void **)(a1 + 1472), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v504 == v505);
        goto LABEL_313;
      }
      uint64_t v506 = *(void *)(a1 + 888);
      uint64_t v507 = *(void *)(a1 + 208) + 24 * v504;
      v509 = *(unsigned char **)v507;
      v508 = *(unsigned char **)(v507 + 8);
      size_t v510 = v508 - v509;
      if (v508 != v509) {
        break;
      }
      v511 = 0;
      uint64_t v512 = *(unsigned int *)(a1 + 52);
      if ((int)v512 >= 1) {
        goto LABEL_328;
      }
LABEL_335:
      if (*(int *)(a1 + 1116) >= 1)
      {
        uint64_t v525 = 0;
        uint64_t v526 = *(void *)(a1 + 1152);
        do
        {
          *(_DWORD *)(*(void *)(v526 + 24 * *(int *)(a1 + 1120)) + 4 * v525) = v511[v525];
          ++v525;
        }
        while (v525 < *(int *)(a1 + 1116));
        ++*(_DWORD *)(a1 + 1120);
LABEL_340:
        operator delete(v511);
        goto LABEL_313;
      }
      ++*(_DWORD *)(a1 + 1120);
      if (v511) {
        goto LABEL_340;
      }
LABEL_313:
      if (++v503 == v421) {
        goto LABEL_341;
      }
    }
    if ((v510 & 0x8000000000000000) != 0) {
      sub_19E13D694();
    }
    v511 = operator new(v508 - v509);
    memcpy(v511, v509, v510);
    int v421 = a5;
    uint64_t v512 = *(unsigned int *)(a1 + 52);
    if ((int)v512 < 1) {
      goto LABEL_335;
    }
LABEL_328:
    uint64_t v513 = 0;
    uint64_t v514 = *(void *)(v506 + 8 * v504);
    uint64_t v515 = *(void *)(*(void *)(a1 + 1128) + 8 * *(int *)(a1 + 1120));
    if (v512 < 8) {
      goto LABEL_333;
    }
    if ((unint64_t)(v515 - v514) < 0x20) {
      goto LABEL_333;
    }
    uint64_t v513 = v512 & 0x7FFFFFF8;
    v516 = (long long *)(v514 + 16);
    v517 = (_OWORD *)(v515 + 16);
    uint64_t v518 = v512 & 0xFFFFFFF8;
    do
    {
      long long v519 = *v516;
      *(v517 - 1) = *(v516 - 1);
      _OWORD *v517 = v519;
      v516 += 2;
      v517 += 2;
      v518 -= 8;
    }
    while (v518);
    if (v513 != v512)
    {
LABEL_333:
      uint64_t v520 = v512 - v513;
      uint64_t v521 = 4 * v513;
      v522 = (_DWORD *)(v515 + 4 * v513);
      v523 = (int *)(v514 + v521);
      do
      {
        int v524 = *v523++;
        *v522++ = v524;
        --v520;
      }
      while (v520);
    }
    goto LABEL_335;
  }
LABEL_341:
  v527 = v644;
  if (v421 >= 1)
  {
    int v528 = 0;
    while (1)
    {
      int v531 = v652 - v528;
      if (*(unsigned char *)(a1 + 2672))
      {
        int v532 = v652;
      }
      else
      {
        int v531 = v528;
        int v532 = 0;
      }
      uint64_t v533 = v531;
      uint64_t v534 = *(void *)(a1 + 864);
      uint64_t v535 = *(void *)(a1 + 88);
      uint64_t v536 = *(int *)(a1 + 52);
      int v537 = (int)v536 / 8;
      uint64_t v538 = 8 * v533;
      if ((int)v536 >= 8)
      {
        v539 = *v527;
        v540 = *(float32x4_t **)(v535 + 8 * v533);
        int v541 = (int)v536 / 8;
        v542 = *(float32x4_t **)(v534 + 8 * v533);
        do
        {
          float32x4_t v544 = *v542;
          float32x4_t v543 = v542[1];
          v542 += 2;
          float32x4_t v546 = *v540;
          float32x4_t v545 = v540[1];
          v540 += 2;
          float32x4_t v547 = vmlaq_f32(v539[1], v545, v543);
          float32x4_t *v539 = vmlaq_f32(*v539, v546, v544);
          v539[1] = v547;
          v539 += 2;
          --v541;
        }
        while (v541);
      }
      int v548 = 8 * v537;
      if (8 * v537 < (int)v536)
      {
        uint64_t v549 = *(void *)(v534 + 8 * v533);
        uint64_t v550 = *(void *)(v535 + 8 * v533);
        v551 = *v527;
        uint64_t v552 = v548;
        unint64_t v553 = v536 - v548;
        if (v553 < 8) {
          goto LABEL_369;
        }
        uint64_t v554 = 4 * v548;
        unint64_t v555 = (unint64_t)v551->u64 + 4 * v536;
        BOOL v556 = (unint64_t)v551 + v554 >= v550 + 4 * v536 || v550 + 4 * v548 >= v555;
        BOOL v557 = !v556;
        if (v549 + v554 < v555 && (unint64_t)v551 + v554 < v549 + 4 * v536) {
          goto LABEL_369;
        }
        if (v557) {
          goto LABEL_369;
        }
        uint64_t v559 = v553 - (v536 & 7) + v552;
        uint64_t v560 = v552 + (v536 & 7) - v536;
        v561 = (float32x4_t *)((char *)v551 + v554 + 16);
        v562 = (float32x4_t *)(v549 + v554 + 16);
        v563 = (float32x4_t *)(v550 + v554 + 16);
        do
        {
          float32x4_t v564 = vmlaq_f32(*v561, *v563, *v562);
          v561[-1] = vmlaq_f32(v561[-1], v563[-1], v562[-1]);
          float32x4_t *v561 = v564;
          v561 += 2;
          v562 += 2;
          v563 += 2;
          v560 += 8;
        }
        while (v560);
        uint64_t v552 = v559;
        if ((v536 & 7) != 0)
        {
LABEL_369:
          uint64_t v565 = v536 - v552;
          v566 = &v551->f32[v552];
          v567 = (float *)(v550 + 4 * v552);
          v568 = (float *)(v549 + 4 * v552);
          do
          {
            float v569 = *v568++;
            float v570 = v569;
            float v571 = *v567++;
            float *v566 = *v566 + (float)(v571 * v570);
            ++v566;
            --v565;
          }
          while (v565);
        }
      }
      if (a3[1] == *a3)
      {
        uint64_t v529 = *(void *)(a1 + 912);
LABEL_344:
        BOOL v530 = v533 == v532;
        sub_19E1C7984(*(void *)(a1 + 64) + v538, v529 + v538, *(void *)(a1 + 64) + v538, (void **)(a1 + 1464), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v530);
        sub_19E1C7984(*(void *)(a1 + 64) + v538, *(void *)(a1 + 864) + v538, *(void *)(a1 + 64) + v538, (void **)(a1 + 1480), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v530);
        sub_19E1C7984(*(void *)(a1 + 64) + v538, *(void *)(a1 + 936) + v538, *(void *)(a1 + 64) + v538, (void **)(a1 + 1488), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v530);
        goto LABEL_345;
      }
      uint64_t v529 = *(void *)(a1 + 912);
      if (*(int *)(a1 + 56) < 1) {
        goto LABEL_344;
      }
      int v651 = v528;
      uint64_t v572 = *(void *)(a1 + 208);
      uint64_t v573 = 24 * v533;
      uint64_t v574 = v572 + 24 * v533;
      v576 = *(unsigned char **)v574;
      v575 = *(unsigned char **)(v574 + 8);
      size_t v577 = v575 - v576;
      if (v575 == v576) {
        break;
      }
      if ((v577 & 0x8000000000000000) != 0) {
        sub_19E13D694();
      }
      v578 = operator new(v575 - v576);
      memcpy(v578, v576, v577);
      uint64_t v573 = 24 * v533;
      uint64_t v579 = *(unsigned int *)(a1 + 52);
      if ((int)v579 >= 1) {
        goto LABEL_378;
      }
LABEL_385:
      if (*(int *)(a1 + 996) < 1)
      {
        ++*(_DWORD *)(a1 + 1000);
        if (!v578) {
          goto LABEL_391;
        }
      }
      else
      {
        uint64_t v592 = 0;
        uint64_t v593 = *(void *)(a1 + 1032);
        do
        {
          *(_DWORD *)(*(void *)(v593 + 24 * *(int *)(a1 + 1000)) + 4 * v592) = *((_DWORD *)v578 + v592);
          ++v592;
        }
        while (v592 < *(int *)(a1 + 996));
        ++*(_DWORD *)(a1 + 1000);
      }
      operator delete(v578);
      uint64_t v572 = *(void *)(a1 + 208);
LABEL_391:
      uint64_t v594 = *(void *)(a1 + 864);
      v595 = *(unsigned char **)(v572 + 24 * (int)v533);
      v596 = *(unsigned char **)(v572 + v573 + 8);
      size_t v597 = v596 - v595;
      if (v596 == v595)
      {
        v598 = 0;
        uint64_t v599 = *(unsigned int *)(a1 + 52);
        if ((int)v599 < 1) {
          goto LABEL_403;
        }
LABEL_396:
        uint64_t v600 = 0;
        uint64_t v601 = *(void *)(v594 + 8 * v533);
        uint64_t v602 = *(void *)(*(void *)(a1 + 1248) + 8 * *(int *)(a1 + 1240));
        if (v599 < 8) {
          goto LABEL_401;
        }
        if ((unint64_t)(v602 - v601) < 0x20) {
          goto LABEL_401;
        }
        uint64_t v600 = v599 & 0x7FFFFFF8;
        v603 = (long long *)(v601 + 16);
        v604 = (_OWORD *)(v602 + 16);
        uint64_t v605 = v599 & 0xFFFFFFF8;
        do
        {
          long long v606 = *v603;
          *(v604 - 1) = *(v603 - 1);
          _OWORD *v604 = v606;
          v603 += 2;
          v604 += 2;
          v605 -= 8;
        }
        while (v605);
        if (v600 != v599)
        {
LABEL_401:
          uint64_t v607 = v599 - v600;
          uint64_t v608 = 4 * v600;
          v609 = (_DWORD *)(v602 + 4 * v600);
          v610 = (int *)(v601 + v608);
          do
          {
            int v611 = *v610++;
            *v609++ = v611;
            --v607;
          }
          while (v607);
        }
        goto LABEL_403;
      }
      if ((v597 & 0x8000000000000000) != 0) {
        sub_19E13D694();
      }
      v598 = operator new(v596 - v595);
      memcpy(v598, v595, v597);
      uint64_t v599 = *(unsigned int *)(a1 + 52);
      if ((int)v599 >= 1) {
        goto LABEL_396;
      }
LABEL_403:
      if (*(int *)(a1 + 1236) < 1)
      {
        ++*(_DWORD *)(a1 + 1240);
        if (!v598) {
          goto LABEL_409;
        }
      }
      else
      {
        uint64_t v612 = 0;
        uint64_t v613 = *(void *)(a1 + 1272);
        do
        {
          *(_DWORD *)(*(void *)(v613 + 24 * *(int *)(a1 + 1240)) + 4 * v612) = *((_DWORD *)v598 + v612);
          ++v612;
        }
        while (v612 < *(int *)(a1 + 1236));
        ++*(_DWORD *)(a1 + 1240);
      }
      operator delete(v598);
      uint64_t v572 = *(void *)(a1 + 208);
LABEL_409:
      uint64_t v614 = *(void *)(a1 + 936);
      v615 = *(unsigned char **)(v572 + 24 * (int)v533);
      v616 = *(unsigned char **)(v572 + v573 + 8);
      size_t v617 = v616 - v615;
      if (v616 != v615)
      {
        if ((v617 & 0x8000000000000000) != 0) {
          sub_19E13D694();
        }
        v618 = operator new(v616 - v615);
        memcpy(v618, v615, v617);
        uint64_t v619 = *(unsigned int *)(a1 + 52);
        v527 = v644;
        int v528 = v651;
        if ((int)v619 < 1) {
          goto LABEL_421;
        }
LABEL_414:
        uint64_t v620 = 0;
        uint64_t v621 = *(void *)(v614 + 8 * v533);
        uint64_t v622 = *(void *)(*(void *)(a1 + 1368) + 8 * *(int *)(a1 + 1360));
        if (v619 < 8) {
          goto LABEL_419;
        }
        if ((unint64_t)(v622 - v621) < 0x20) {
          goto LABEL_419;
        }
        uint64_t v620 = v619 & 0x7FFFFFF8;
        v623 = (long long *)(v621 + 16);
        v624 = (_OWORD *)(v622 + 16);
        uint64_t v625 = v619 & 0xFFFFFFF8;
        do
        {
          long long v626 = *v623;
          *(v624 - 1) = *(v623 - 1);
          _OWORD *v624 = v626;
          v623 += 2;
          v624 += 2;
          v625 -= 8;
        }
        while (v625);
        if (v620 != v619)
        {
LABEL_419:
          uint64_t v627 = v619 - v620;
          uint64_t v628 = 4 * v620;
          v629 = (_DWORD *)(v622 + 4 * v620);
          v630 = (int *)(v621 + v628);
          do
          {
            int v631 = *v630++;
            *v629++ = v631;
            --v627;
          }
          while (v627);
        }
        goto LABEL_421;
      }
      v618 = 0;
      uint64_t v619 = *(unsigned int *)(a1 + 52);
      v527 = v644;
      int v528 = v651;
      if ((int)v619 >= 1) {
        goto LABEL_414;
      }
LABEL_421:
      if (*(int *)(a1 + 1356) >= 1)
      {
        uint64_t v632 = 0;
        uint64_t v633 = *(void *)(a1 + 1392);
        do
        {
          *(_DWORD *)(*(void *)(v633 + 24 * *(int *)(a1 + 1360)) + 4 * v632) = *((_DWORD *)v618 + v632);
          ++v632;
        }
        while (v632 < *(int *)(a1 + 1356));
        ++*(_DWORD *)(a1 + 1360);
LABEL_426:
        operator delete(v618);
        goto LABEL_345;
      }
      ++*(_DWORD *)(a1 + 1360);
      if (v618) {
        goto LABEL_426;
      }
LABEL_345:
      if (++v528 == a5) {
        return;
      }
    }
    v578 = 0;
    uint64_t v579 = *(unsigned int *)(a1 + 52);
    if ((int)v579 < 1) {
      goto LABEL_385;
    }
LABEL_378:
    uint64_t v580 = 0;
    uint64_t v581 = *(void *)(v529 + 8 * v533);
    uint64_t v582 = *(void *)(*(void *)(a1 + 1008) + 8 * *(int *)(a1 + 1000));
    if (v579 < 8) {
      goto LABEL_383;
    }
    if ((unint64_t)(v582 - v581) < 0x20) {
      goto LABEL_383;
    }
    uint64_t v580 = v579 & 0x7FFFFFF8;
    v583 = (long long *)(v581 + 16);
    v584 = (_OWORD *)(v582 + 16);
    uint64_t v585 = v579 & 0xFFFFFFF8;
    do
    {
      long long v586 = *v583;
      *(v584 - 1) = *(v583 - 1);
      _OWORD *v584 = v586;
      v583 += 2;
      v584 += 2;
      v585 -= 8;
    }
    while (v585);
    if (v580 != v579)
    {
LABEL_383:
      uint64_t v587 = v579 - v580;
      uint64_t v588 = 4 * v580;
      v589 = (_DWORD *)(v582 + 4 * v580);
      v590 = (int *)(v581 + v588);
      do
      {
        int v591 = *v590++;
        *v589++ = v591;
        --v587;
      }
      while (v587);
    }
    goto LABEL_385;
  }
}

void sub_19E217C5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  float32x4_t v32 = *(void **)(v30 - 144);
  if (v32)
  {
    *(void *)(v30 - 136) = v32;
    operator delete(v32);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E217CB8(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  a1[2672] = 1;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9457D90, memory_order_acquire) & 1) == 0)
  {
    uint64_t v13 = a6;
    uint64_t v12 = a5;
    unsigned int v11 = a4;
    uint64_t v9 = a2;
    uint64_t v10 = a3;
    int v8 = __cxa_guard_acquire(&qword_1E9457D90);
    a2 = v9;
    a3 = v10;
    a4 = v11;
    a5 = v12;
    a6 = v13;
    if (v8)
    {
      qword_1E9458530 = 0;
      *(void *)algn_1E9458538 = 0;
      qword_1E9458540 = 0;
      __cxa_atexit((void (*)(void *))sub_19E142EEC, &qword_1E9458530, &dword_19E138000);
      __cxa_guard_release(&qword_1E9457D90);
      a2 = v9;
      a3 = v10;
      a4 = v11;
      a5 = v12;
      a6 = v13;
    }
  }
  uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 304))(a1, a2, a3, a4, a5, a6, &qword_1E9458530);
  a1[2672] = 0;
  return result;
}

uint64_t sub_19E217DB0(unsigned char *a1)
{
  a1[2672] = 1;
  uint64_t result = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 296))(a1);
  a1[2672] = 0;
  return result;
}

char *sub_19E217E08(uint64_t a1, void *lpsrc)
{
  if (*(_DWORD *)(a1 + 2496) != 1) {
    sub_19E2F6320(1);
  }
  uint64_t result = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3E10, 0);
  if (!result) {
    __cxa_bad_cast();
  }
  *(void *)(a1 + 2504) = result + 232;
  *(void *)(a1 + 2520) = result + 248;
  *(void *)(a1 + 2512) = result + 240;
  *(void *)(a1 + 2528) = result + 256;
  *(void *)(a1 + 2536) = result + 264;
  *(void *)(a1 + 2552) = result + 280;
  *(void *)(a1 + 2544) = result + 272;
  *(void *)(a1 + 2560) = result + 288;
  *(void *)(a1 + 2568) = result + 296;
  *(void *)(a1 + 2576) = result + 304;
  *(void *)(a1 + 2584) = result + 312;
  *(void *)(a1 + 2592) = result + 320;
  *(void *)(a1 + 2600) = result + 328;
  *(void *)(a1 + 2608) = result + 336;
  *(void *)(a1 + 2616) = result + 344;
  return result;
}

uint64_t sub_19E217F04(uint64_t a1, void *lpsrc, double a3)
{
  v57.n128_f64[0] = a3;
  if (*(_DWORD *)(a1 + 2496)) {
    sub_19E2F6320(1);
  }
  unsigned int v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3E10, 0);
  if (!v4) {
    __cxa_bad_cast();
  }
  vDSP_Length v5 = v4;
  sub_19E21B538(a1, (const float **)(a1 + 232), (uint64_t)(v4 + 366), v4 + 246, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), *(void *)(a1 + 1552), a1 + 1704, v57.n128_f32[0]);
  sub_19E21B538(a1, (const float **)(a1 + 248), (uint64_t)(v5 + 370), v5 + 306, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), *(void *)(a1 + 1568), a1 + 1776, v57.n128_f32[0]);
  sub_19E21B538(a1, (const float **)(a1 + 240), (uint64_t)(v5 + 368), v5 + 276, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), *(void *)(a1 + 1560), a1 + 1848, v57.n128_f32[0]);
  sub_19E21B538(a1, (const float **)(a1 + 256), (uint64_t)(v5 + 372), v5 + 336, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), *(void *)(a1 + 1576), a1 + 1920, v57.n128_f32[0]);
  int v6 = *(_DWORD *)(a1 + 52);
  int v7 = *(void (****)(void, uint64_t, uint64_t, __n128))(a1 + 1584);
  sub_19E303188(a1 + 1992);
  if (*(_DWORD *)(a1 + 56))
  {
    (**v7)(v7, a1 + 264, (uint64_t)(v5 + 374), v57);
  }
  else
  {
    (**v7)(v7, a1 + 264, (uint64_t)(v5 + 374), v57);
    float __C = 2.0;
    float __B = -2.0;
    vDSP_vclip(*(const float **)(a1 + 264), 1, &__B, &__C, *(float **)(a1 + 264), 1, (v6 * v6));
  }
  sub_19E303190(a1 + 1992);
  int v8 = *(_DWORD *)(a1 + 52);
  uint64_t v9 = *(void (****)(void, uint64_t, uint64_t, __n128))(a1 + 1600);
  sub_19E303188(a1 + 2064);
  if (*(_DWORD *)(a1 + 56))
  {
    (**v9)(v9, a1 + 280, (uint64_t)(v5 + 378), v57);
  }
  else
  {
    (**v9)(v9, a1 + 280, (uint64_t)(v5 + 378), v57);
    float __C = 2.0;
    float __B = -2.0;
    vDSP_vclip(*(const float **)(a1 + 280), 1, &__B, &__C, *(float **)(a1 + 280), 1, (v8 * v8));
  }
  sub_19E303190(a1 + 2064);
  int v10 = *(_DWORD *)(a1 + 52);
  unsigned int v11 = *(void (****)(void, uint64_t, uint64_t, __n128))(a1 + 1592);
  sub_19E303188(a1 + 2136);
  if (*(_DWORD *)(a1 + 56))
  {
    (**v11)(v11, a1 + 272, (uint64_t)(v5 + 376), v57);
  }
  else
  {
    (**v11)(v11, a1 + 272, (uint64_t)(v5 + 376), v57);
    float __C = 2.0;
    float __B = -2.0;
    vDSP_vclip(*(const float **)(a1 + 272), 1, &__B, &__C, *(float **)(a1 + 272), 1, (v10 * v10));
  }
  sub_19E303190(a1 + 2136);
  int v12 = *(_DWORD *)(a1 + 52);
  uint64_t v13 = *(void (****)(void, uint64_t, uint64_t, __n128))(a1 + 1608);
  sub_19E303188(a1 + 2208);
  if (*(_DWORD *)(a1 + 56))
  {
    (**v13)(v13, a1 + 288, (uint64_t)(v5 + 380), v57);
  }
  else
  {
    (**v13)(v13, a1 + 288, (uint64_t)(v5 + 380), v57);
    float __C = 2.0;
    float __B = -2.0;
    vDSP_vclip(*(const float **)(a1 + 288), 1, &__B, &__C, *(float **)(a1 + 288), 1, (v12 * v12));
  }
  sub_19E303190(a1 + 2208);
  sub_19E303188(a1 + 2280);
  uint64_t v14 = *(unsigned int *)(a1 + 52);
  vDSP_Length v15 = (int)v14;
  uint64_t v16 = *(float **)(a1 + 296);
  if ((int)v14 >= 1)
  {
    unint64_t v17 = *((void *)v5 + 191);
    if (v14 < 8 || (unint64_t)v16 < v17 + 4 * v14 && v17 < (unint64_t)&v16[v14])
    {
      uint64_t v18 = 0;
LABEL_20:
      uint64_t v19 = v14 - v18;
      uint64_t v20 = 4 * v18;
      int v21 = &v16[v18];
      uint64_t v22 = (float *)(v17 + v20);
      do
      {
        float v23 = *v22++;
        *int v21 = *v21 + (float)(v23 * v57.n128_f32[0]);
        ++v21;
        --v19;
      }
      while (v19);
      goto LABEL_22;
    }
    uint64_t v18 = v14 & 0x7FFFFFF8;
    unint64_t v45 = (float32x4_t *)(v17 + 16);
    BOOL v46 = (float32x4_t *)(v16 + 4);
    uint64_t v47 = v14 & 0xFFFFFFF8;
    do
    {
      float32x4_t v48 = vmlaq_n_f32(*v46, *v45, v57.n128_f32[0]);
      v46[-1] = vmlaq_n_f32(v46[-1], v45[-1], v57.n128_f32[0]);
      *BOOL v46 = v48;
      v45 += 2;
      v46 += 2;
      v47 -= 8;
    }
    while (v47);
    if (v18 != v14) {
      goto LABEL_20;
    }
  }
LABEL_22:
  float __C = 2.0;
  float __B = -2.0;
  vDSP_vclip(v16, 1, &__B, &__C, v16, 1, v15);
  sub_19E303190(a1 + 2280);
  sub_19E303188(a1 + 2352);
  uint64_t v24 = *(unsigned int *)(a1 + 52);
  vDSP_Length v25 = (int)v24;
  uint64_t v26 = *(float **)(a1 + 312);
  if ((int)v24 < 1) {
    goto LABEL_29;
  }
  unint64_t v27 = *((void *)v5 + 193);
  if (v24 < 8 || (unint64_t)v26 < v27 + 4 * v24 && v27 < (unint64_t)&v26[v24])
  {
    uint64_t v28 = 0;
LABEL_27:
    uint64_t v29 = v24 - v28;
    uint64_t v30 = 4 * v28;
    float32x4_t v31 = &v26[v28];
    float32x4_t v32 = (float *)(v27 + v30);
    do
    {
      float v33 = *v32++;
      float *v31 = *v31 + (float)(v33 * v57.n128_f32[0]);
      ++v31;
      --v29;
    }
    while (v29);
    goto LABEL_29;
  }
  uint64_t v28 = v24 & 0x7FFFFFF8;
  BOOL v49 = (float32x4_t *)(v27 + 16);
  float32x4_t v50 = (float32x4_t *)(v26 + 4);
  uint64_t v51 = v24 & 0xFFFFFFF8;
  do
  {
    float32x4_t v52 = vmlaq_n_f32(*v50, *v49, v57.n128_f32[0]);
    v50[-1] = vmlaq_n_f32(v50[-1], v49[-1], v57.n128_f32[0]);
    *float32x4_t v50 = v52;
    v49 += 2;
    v50 += 2;
    v51 -= 8;
  }
  while (v51);
  if (v28 != v24) {
    goto LABEL_27;
  }
LABEL_29:
  float __C = 2.0;
  float __B = -2.0;
  vDSP_vclip(v26, 1, &__B, &__C, v26, 1, v25);
  sub_19E303190(a1 + 2352);
  sub_19E303188(a1 + 2424);
  uint64_t v34 = *(unsigned int *)(a1 + 52);
  vDSP_Length v35 = (int)v34;
  int v36 = *(float **)(a1 + 304);
  if ((int)v34 < 1) {
    goto LABEL_36;
  }
  unint64_t v37 = *((void *)v5 + 192);
  if (v34 < 8 || (unint64_t)v36 < v37 + 4 * v34 && v37 < (unint64_t)&v36[v34])
  {
    uint64_t v38 = 0;
LABEL_34:
    uint64_t v39 = v34 - v38;
    uint64_t v40 = 4 * v38;
    uint64_t v41 = &v36[v38];
    unint64_t v42 = (float *)(v37 + v40);
    do
    {
      float v43 = *v42++;
      *uint64_t v41 = *v41 + (float)(v43 * v57.n128_f32[0]);
      ++v41;
      --v39;
    }
    while (v39);
    goto LABEL_36;
  }
  uint64_t v38 = v34 & 0x7FFFFFF8;
  uint64_t v53 = (float32x4_t *)(v37 + 16);
  unint64_t v54 = (float32x4_t *)(v36 + 4);
  uint64_t v55 = v34 & 0xFFFFFFF8;
  do
  {
    float32x4_t v56 = vmlaq_n_f32(*v54, *v53, v57.n128_f32[0]);
    v54[-1] = vmlaq_n_f32(v54[-1], v53[-1], v57.n128_f32[0]);
    *unint64_t v54 = v56;
    v53 += 2;
    v54 += 2;
    v55 -= 8;
  }
  while (v55);
  if (v38 != v34) {
    goto LABEL_34;
  }
LABEL_36:
  float __C = 2.0;
  float __B = -2.0;
  vDSP_vclip(v36, 1, &__B, &__C, v36, 1, v35);
  return sub_19E303190(a1 + 2424);
}

void sub_19E218600()
{
}

void sub_19E218614()
{
}

void sub_19E21862C(void *a1)
{
  uint64_t v1 = sub_19E21B6B0(a1);

  operator delete(v1);
}

uint64_t sub_19E218654(uint64_t result, FILE *a2, int *a3, int a4, int a5, unsigned int a6)
{
  if (a6 > 0x20 || ((1 << a6) & 0x100010100) == 0) {
    sub_19E2F6320(23);
  }
  switch(a5)
  {
    case 8:
      if (a6 == 32)
      {
LABEL_9:
        sub_19E218780(result, a2, a3, a4);
      }
LABEL_27:
      sub_19E2F6320(45);
    case 16:
      if (a6 == 32)
      {
        goto LABEL_9;
      }
      goto LABEL_27;
    case 32:
      switch(a6)
      {
        case 0x20u:
          goto LABEL_9;
        case 8u:
          sub_19E2189C8(result, a2, a3, a4);
        case 0x10u:
          sub_19E2188A4(result, a2, a3, a4);
      }
      break;
  }
  return result;
}

void sub_19E218780(int a1, FILE *__stream, int *a3, int a4)
{
  if (__stream)
  {
    if (a4 == 3)
    {
      int v6 = *a3 & 0xF;
      if (*a3 <= 0) {
        int v6 = -(-*a3 & 0xF);
      }
      if (v6 >= 15) {
        int v7 = 16;
      }
      else {
        int v7 = 15 - v6;
      }
      sub_19E2F673C(__stream, a3, v7);
      sub_19E2F67D4((size_t)__stream, a3, 85, v7);
      if ((*(unsigned char *)a3 & 0xF) != 0) {
        sub_19E2F6320(18);
      }
    }
    operator new[]();
  }
  sub_19E2F6320(9);
}

void sub_19E2188A4(int a1, FILE *__stream, int *a3, int a4)
{
  if (__stream)
  {
    if (a4 == 3)
    {
      int v6 = *a3 & 0xF;
      if (*a3 <= 0) {
        int v6 = -(-*a3 & 0xF);
      }
      if (v6 >= 15) {
        int v7 = 16;
      }
      else {
        int v7 = 15 - v6;
      }
      sub_19E2F673C(__stream, a3, v7);
      sub_19E2F67D4((size_t)__stream, a3, 85, v7);
      if ((*(unsigned char *)a3 & 0xF) != 0) {
        sub_19E2F6320(18);
      }
    }
    operator new[]();
  }
  sub_19E2F6320(9);
}

void sub_19E2189C8(int a1, FILE *__stream, int *a3, int a4)
{
  if (__stream)
  {
    if (a4 == 3)
    {
      int v6 = *a3 & 0xF;
      if (*a3 <= 0) {
        int v6 = -(-*a3 & 0xF);
      }
      if (v6 >= 15) {
        int v7 = 16;
      }
      else {
        int v7 = 15 - v6;
      }
      sub_19E2F673C(__stream, a3, v7);
      sub_19E2F67D4((size_t)__stream, a3, 85, v7);
      if ((*(unsigned char *)a3 & 0xF) != 0) {
        sub_19E2F6320(18);
      }
    }
    operator new[]();
  }
  sub_19E2F6320(9);
}

void sub_19E218AE4(uint64_t a1, uint64_t *a2, unsigned int a3, int a4, float a5)
{
  uint64_t v5 = *(unsigned int *)(a1 + 16);
  if ((int)v5 >= 1)
  {
    if ((int)a3 > 0)
    {
      uint64_t v7 = a3;
      int v8 = *(float ***)(a1 + 24);
      if (a3 > 7)
      {
        unint64_t v17 = a3 - (unint64_t)(a3 & 0xFFFFFFF8);
        if (a3 == (unint64_t)(a3 & 0xFFFFFFF8))
        {
          do
          {
            uint64_t v18 = (float32x4_t *)(v8[v17] + 4);
            uint64_t v19 = a3 & 0xFFFFFFF8;
            do
            {
              float32x4_t v20 = vmulq_n_f32(*v18, a5);
              v18[-1] = vmulq_n_f32(v18[-1], a5);
              *uint64_t v18 = v20;
              v18 += 2;
              v19 -= 8;
            }
            while (v19);
            ++v17;
          }
          while (v17 != v5);
        }
        else
        {
          for (uint64_t i = 0; i != v5; ++i)
          {
            uint64_t v22 = (float32x4_t *)v8[i];
            float v23 = v22 + 1;
            uint64_t v24 = a3 & 0xFFFFFFF8;
            do
            {
              float32x4_t v25 = vmulq_n_f32(*v23, a5);
              v23[-1] = vmulq_n_f32(v23[-1], a5);
              *float v23 = v25;
              v23 += 2;
              v24 -= 8;
            }
            while (v24);
            uint64_t v26 = (float *)((char *)v22->f32 + ((4 * a3) & 0x3FFFFFFE0));
            unint64_t v27 = a3 - (unint64_t)(a3 & 0xFFFFFFF8);
            do
            {
              *uint64_t v26 = *v26 * a5;
              ++v26;
              --v27;
            }
            while (v27);
          }
        }
      }
      else
      {
        uint64_t v9 = *(unsigned int *)(a1 + 16);
        do
        {
          int v10 = *v8;
          *void *v8 = **v8 * a5;
          if (a3 != 1)
          {
            v10[1] = v10[1] * a5;
            if (a3 != 2)
            {
              v10[2] = v10[2] * a5;
              if (a3 != 3)
              {
                v10[3] = v10[3] * a5;
                if (a3 != 4)
                {
                  v10[4] = v10[4] * a5;
                  if (a3 != 5)
                  {
                    v10[5] = v10[5] * a5;
                    if (a3 != 6) {
                      v10[6] = v10[6] * a5;
                    }
                  }
                }
              }
            }
          }
          ++v8;
          --v9;
        }
        while (v9);
      }
      uint64_t v28 = 0;
      uint64_t v29 = a4;
      while (1)
      {
        uint64_t v30 = *(void *)(a1 + 24);
        uint64_t v31 = *(void *)(a1 + 48) + 24 * v28;
        float v33 = *(unsigned char **)v31;
        float32x4_t v32 = *(unsigned char **)(v31 + 8);
        int64_t v34 = v32 - v33;
        if (v32 != v33)
        {
          if (v34 < 0) {
            goto LABEL_18;
          }
          vDSP_Length v35 = (int *)operator new(v32 - v33);
          memcpy(v35, v33, v34);
          uint64_t v36 = 0;
          uint64_t v37 = *(void *)(v30 + 8 * v28);
          uint64_t v38 = *a2;
          if ((unint64_t)(v34 >> 2) <= 1) {
            uint64_t v39 = 1;
          }
          else {
            uint64_t v39 = v34 >> 2;
          }
          do
          {
            uint64_t v40 = 0;
            do
            {
              uint64_t v41 = v36 * v29 + v35[v40];
              float v42 = *(float *)(v38 + 4 * v41) + *(float *)(v37 + 4 * v36);
              *(float *)(v38 + 4 * v41) = v42;
              float v43 = 2.0;
              if (v42 > 2.0 || (float v43 = -2.0, v42 < -2.0)) {
                *(float *)(v38 + 4 * v41) = v43;
              }
              ++v40;
            }
            while (v39 != v40);
            ++v36;
          }
          while (v36 != v7);
          operator delete(v35);
          LODWORD(v5) = *(_DWORD *)(a1 + 16);
        }
        if (++v28 >= (int)v5) {
          return;
        }
      }
    }
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = (uint64_t *)(*(void *)(a1 + 48) + v11);
      uint64_t v15 = *v13;
      uint64_t v14 = v13[1];
      size_t v16 = v14 - v15;
      if (v14 != v15)
      {
        if ((v16 & 0x8000000000000000) != 0) {
LABEL_18:
        }
          sub_19E13D694();
        unint64_t v45 = operator new(v16);
        operator delete(v45);
        LODWORD(v5) = *(_DWORD *)(a1 + 16);
      }
      ++v12;
      v11 += 24;
    }
    while (v12 < (int)v5);
  }
}

void sub_19E218DEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E218E08(uint64_t a1, void *a2, void *a3, int a4, uint64_t a5)
{
  if (a4 < 0x2000000) {
    int v8 = 1;
  }
  else {
    int v8 = HIBYTE(a4);
  }
  uint64_t v9 = *(void *)(a1 + 2680);
  if (v9)
  {
    BOOL v189 = *(unsigned char *)(v9 + 464) != 0;
    if (a3[1] == *a3) {
      goto LABEL_11;
    }
  }
  else
  {
    BOOL v189 = 0;
    if (a3[1] == *a3) {
      goto LABEL_11;
    }
  }
  if (*(int *)(a1 + 56) >= 1)
  {
    int v195 = (**(uint64_t (***)(uint64_t))a1)(a1);
    uint64_t v9 = *(void *)(a1 + 2680);
    if (!v9) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_11:
  int v195 = 0;
  if (!v9)
  {
LABEL_13:
    float v10 = 50.0;
    goto LABEL_14;
  }
LABEL_12:
  float v10 = *(float *)(v9 + 468);
  if (v10 <= 0.0) {
    goto LABEL_13;
  }
LABEL_14:
  if (a5 && *(unsigned char *)(a1 + 2672)) {
    sub_19E2F6320(34);
  }
  unsigned int v11 = a4 & 0xFFFFFF;
  if (a5) {
    _ZF = *(unsigned char *)(a1 + 42) == 0;
  }
  else {
    _ZF = 0;
  }
  unsigned int v13 = _ZF;
  int v14 = v195;
  if (v11 > v13)
  {
    int v191 = a4 & 0xFFFFFF;
    signed int v192 = v11 - 1;
    __asm { FMOV            V4.4S, #1.0 }
    uint64_t v190 = (float32x2_t **)(a1 + 752);
    float32x4_t v198 = _Q4;
    while (1)
    {
      signed int v18 = v11 + ~v13;
      unsigned int v197 = v13;
      if (!*(unsigned char *)(a1 + 2672)) {
        signed int v18 = v13;
      }
      uint64_t v19 = v18;
      BOOL v20 = *(unsigned char *)(a1 + 2672) ? v18 < v192 : v18 > 0;
      uint64_t v21 = *(unsigned char *)(a1 + 2672) ? v18 + 1 : v18 - 1;
      uint64_t v199 = v21;
      int v22 = *(unsigned __int8 *)(a1 + 42);
      uint64_t v23 = ((*(unsigned char *)(a1 + 42) != 0) & v14) != 0 ? 1 : v18;
      uint64_t v24 = *(void *)(a1 + 64);
      if (v14) {
        break;
      }
      memmove(*(void **)(v24 + 8 * v23), *(const void **)(*a2 + 8 * v23), 4 * *(int *)(a1 + 44));
      int v25 = *(unsigned __int8 *)(a1 + 40);
      if (*(unsigned char *)(a1 + 40)) {
        goto LABEL_40;
      }
LABEL_41:
      if (v14)
      {
        int v26 = *(_DWORD *)(a1 + 48);
        unint64_t v27 = *(_DWORD **)(*(void *)(a1 + 208) + 24 * v19);
        _DWORD *v27 = **(_DWORD **)(*a3 + 24 * v19);
        if (v25) {
          v27[1] = v26 - 1;
        }
      }
      uint64_t v28 = *(void *)(a1 + 136);
      if (v8 == 1) {
        memcpy(*(void **)(v28 + 8 * v23), *(const void **)(*(void *)(a1 + 64) + 8 * v23), 4 * *(int *)(a1 + 48));
      }
      else {
        memmove(*(void **)(v28 + 8 * v23), *(const void **)(*a2 + 8 * v23), 4 * *(_DWORD *)(a1 + 44) * v8);
      }
      if (v8 > *(_DWORD *)(a1 + 2688)) {
        sub_19E2F6320(83724);
      }
      if (v22) {
        uint64_t v29 = 1;
      }
      else {
        uint64_t v29 = v19;
      }
      uint64_t v30 = 8 * v29;
      if (*(unsigned char *)(a1 + 2692))
      {
        bzero(*(void **)(*(void *)(a1 + 544) + 8 * v29), 4 * *(int *)(a1 + 52));
        bzero(*(void **)(*(void *)(a1 + 568) + 8 * v29), 4 * *(int *)(a1 + 52));
        bzero(*(void **)(*(void *)(a1 + 616) + 8 * v29), 4 * *(int *)(a1 + 52));
        bzero(*(void **)(*(void *)(a1 + 592) + 8 * v29), 4 * *(int *)(a1 + 52));
      }
      bzero(*(void **)(*(void *)(a1 + 352) + 8 * v29), 4 * *(_DWORD *)(a1 + 52) * v8);
      bzero(*(void **)(*(void *)(a1 + 376) + 8 * v29), 4 * *(_DWORD *)(a1 + 52) * v8);
      bzero(*(void **)(*(void *)(a1 + 400) + 8 * v29), 4 * *(_DWORD *)(a1 + 52) * v8);
      bzero(*(void **)(*(void *)(a1 + 424) + 8 * v29), 4 * *(_DWORD *)(a1 + 52) * v8);
      uint64_t v31 = *(void *)(a1 + 2680);
      uint64_t v200 = v19;
      if (!v31)
      {
LABEL_74:
        uint64_t v36 = v23;
        BOOL v35 = 0;
        BOOL v37 = !v20;
LABEL_75:
        sub_19E21A95C(a1, v195, (float **)(*(void *)(a1 + 424) + 8 * v29), (const void **)(*(void *)(a1 + 136) + 8 * v36), *(uint64_t **)(a1 + 2528), *(void *)(a1 + 208) + 24 * (int)v200, v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1);
        char v201 = 0;
LABEL_76:
        char v40 = 1;
        if (!v37 && !v35)
        {
          sub_19E21B34C((float **)(*(void *)(a1 + 424) + 8 * v29), (const void **)(*(void *)(a1 + 160) + 8 * (int)v199), *(uint64_t **)(a1 + 2560), v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 111, 1.0);
          char v40 = 0;
        }
        goto LABEL_79;
      }
      int v32 = *(_DWORD *)(v31 + 40);
      if (!*(unsigned char *)(v31 + 20) && (v32 == 5 || v32 == 2))
      {
        BOOL v33 = *(_DWORD *)(v31 + 44) == 6;
        if (v32 == 5) {
          goto LABEL_61;
        }
      }
      else
      {
        BOOL v33 = 0;
        if (v32 == 5) {
          goto LABEL_61;
        }
      }
      if (v32 != 2)
      {
        if (!v33) {
          goto LABEL_74;
        }
        BOOL v35 = 0;
LABEL_69:
        uint64_t v36 = v23;
        char v39 = 1;
        sub_19E219FB8(a1, 0, (float **)(*(void *)(a1 + 352) + v30), (float **)(*(void *)(a1 + 376) + v30), (float **)(*(void *)(a1 + 424) + v30), (void **)(*(void *)(a1 + 400) + v30), (const void **)(*(void *)(a1 + 136) + 8 * v23), *(uint64_t **)(a1 + 2504), *(void *)(a1 + 208) + 24 * (int)v200, v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1u);
        BOOL v37 = !v20;
        char v201 = 1;
        if (!v20 || !v35) {
          goto LABEL_76;
        }
        goto LABEL_70;
      }
LABEL_61:
      int v34 = *(_DWORD *)(v31 + 60);
      BOOL v35 = v34 == 22;
      if (v33) {
        goto LABEL_69;
      }
      uint64_t v36 = v23;
      BOOL v37 = !v20;
      if (v34 != 22 || !v20) {
        goto LABEL_75;
      }
      char v39 = 0;
LABEL_70:
      float __B = 0;
      float32x4_t v203 = 0;
      uint64_t v204 = 0;
      sub_19E219FB8(a1, 0, (float **)(*(void *)(a1 + 352) + v30), (float **)(*(void *)(a1 + 376) + v30), (float **)(*(void *)(a1 + 424) + v30), (void **)(*(void *)(a1 + 400) + v30), (const void **)(*(void *)(a1 + 160) + 8 * (int)v199), *(uint64_t **)(a1 + 2536), (uint64_t)&__B, v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1u);
      if (__B)
      {
        float32x4_t v203 = __B;
        operator delete(__B);
      }
      BOOL v35 = 1;
      char v40 = 1;
      char v201 = 1;
      if ((v39 & 1) == 0) {
        goto LABEL_75;
      }
LABEL_79:
      char v196 = v40;
      sub_19E21ABD4(a1, *(void *)(a1 + 2680), (uint64_t *)(*(void *)(a1 + 424) + 8 * v29), *(float32x4_t ***)(a1 + 2608), v8, *(_DWORD *)(a1 + 52));
      uint64_t v41 = v36;
      uint64_t v42 = *(void *)(a1 + 424);
      vDSP_Length v43 = *(int *)(a1 + 52) * (uint64_t)v8;
      LODWORD(__B) = -1035468800;
      __C[0] = 50.0;
      vDSP_vclip(*(const float **)(v42 + 8 * v29), 1, (const float *)&__B, __C, *(float **)(v42 + 8 * v29), 1, v43);
      sub_19E1655C4((float32x2_t **)(*(void *)(a1 + 520) + v30), (uint64_t *)(*(void *)(a1 + 424) + v30), v8, *(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 740));
      int v44 = v195;
      if ((v201 & 1) == 0) {
        sub_19E21A95C(a1, v195, (float **)(*(void *)(a1 + 352) + 8 * v29), (const void **)(*(void *)(a1 + 136) + 8 * v41), *(uint64_t **)(a1 + 2504), *(void *)(a1 + 208) + 24 * (int)v200, v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1);
      }
      sub_19E21ABD4(a1, *(void *)(a1 + 2680), (uint64_t *)(*(void *)(a1 + 352) + 8 * v29), *(float32x4_t ***)(a1 + 2592), v8, *(_DWORD *)(a1 + 52));
      if (v20)
      {
        if (v35)
        {
          uint64_t v45 = (int)v199;
        }
        else
        {
          sub_19E21B34C((float **)(*(void *)(a1 + 352) + 8 * v29), (const void **)(*(void *)(a1 + 160) + 8 * v199), *(uint64_t **)(a1 + 2536), v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 111, 1.0);
          uint64_t v45 = v199;
          int v44 = v195;
        }
        sub_19E21AEC0(a1, *(void *)(a1 + 2680), (uint64_t *)(*(void *)(a1 + 352) + 8 * v29), *(float32x4_t ***)(a1 + 2568), (uint64_t *)(*(void *)(a1 + 184) + 8 * v45), v8, *(_DWORD *)(a1 + 52));
      }
      uint64_t v46 = *(void *)(a1 + 352);
      vDSP_Length v47 = *(int *)(a1 + 52) * (uint64_t)v8;
      LODWORD(__B) = -1035468800;
      __C[0] = 50.0;
      vDSP_vclip(*(const float **)(v46 + 8 * v29), 1, (const float *)&__B, __C, *(float **)(v46 + 8 * v29), 1, v47);
      sub_19E1655C4((float32x2_t **)(*(void *)(a1 + 448) + v30), (uint64_t *)(*(void *)(a1 + 352) + v30), v8, *(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 736));
      int v14 = v44;
      if ((v201 & 1) == 0) {
        sub_19E21A95C(a1, v44, (float **)(*(void *)(a1 + 376) + 8 * v29), (const void **)(*(void *)(a1 + 136) + 8 * v41), *(uint64_t **)(a1 + 2512), *(void *)(a1 + 208) + 24 * (int)v200, v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1);
      }
      sub_19E21ABD4(a1, *(void *)(a1 + 2680), (uint64_t *)(*(void *)(a1 + 376) + 8 * v29), *(float32x4_t ***)(a1 + 2600), v8, *(_DWORD *)(a1 + 52));
      float32x4_t v48 = v198;
      if (v20)
      {
        if (!v35) {
          sub_19E21B34C((float **)(*(void *)(a1 + 376) + 8 * v29), (const void **)(*(void *)(a1 + 160) + 8 * (int)v199), *(uint64_t **)(a1 + 2544), v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 111, 1.0);
        }
        sub_19E21AEC0(a1, *(void *)(a1 + 2680), (uint64_t *)(*(void *)(a1 + 376) + 8 * v29), *(float32x4_t ***)(a1 + 2576), (uint64_t *)(*(void *)(a1 + 184) + 8 * (int)v199), v8, *(_DWORD *)(a1 + 52));
        float32x4_t v48 = v198;
      }
      uint64_t v49 = *(void *)(a1 + 2680);
      if (!v49)
      {
        int v51 = *(_DWORD *)(a1 + 52);
        uint64_t v52 = v200;
        goto LABEL_103;
      }
      int v50 = *(unsigned __int8 *)(v49 + 465);
      int v51 = *(_DWORD *)(a1 + 52);
      uint64_t v52 = v200;
      if (v50)
      {
        uint64_t v53 = (v51 * v8);
        if ((int)v53 >= 1)
        {
          unint64_t v54 = *(float32x4_t **)(*(void *)(a1 + 376) + 8 * v29);
          if (v53 < 8)
          {
            uint64_t v55 = 0;
LABEL_101:
            uint64_t v59 = v53 - v55;
            uint64_t v60 = &v54->f32[v55];
            do
            {
              *uint64_t v60 = *v60 + 1.0;
              ++v60;
              --v59;
            }
            while (v59);
            goto LABEL_103;
          }
          uint64_t v55 = v53 & 0x7FFFFFF8;
          float32x4_t v56 = v54 + 1;
          uint64_t v57 = v53 & 0xFFFFFFF8;
          do
          {
            float32x4_t v58 = vaddq_f32(*v56, v48);
            v56[-1] = vaddq_f32(v56[-1], v48);
            *float32x4_t v56 = v58;
            v56 += 2;
            v57 -= 8;
          }
          while (v57);
          if (v55 != v53) {
            goto LABEL_101;
          }
        }
      }
LABEL_103:
      uint64_t v61 = *(void *)(a1 + 376);
      LODWORD(__B) = -1035468800;
      __C[0] = 50.0;
      vDSP_vclip(*(const float **)(v61 + 8 * v29), 1, (const float *)&__B, __C, *(float **)(v61 + 8 * v29), 1, v51 * v8);
      sub_19E1655C4((float32x2_t **)(*(void *)(a1 + 472) + v30), (uint64_t *)(*(void *)(a1 + 376) + v30), v8, *(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 736));
      uint64_t v62 = *(void *)(a1 + 184);
      uint64_t v63 = *(void *)(a1 + 520);
      uint64_t v64 = *(void *)(a1 + 448);
      uint64_t v65 = *(int *)(a1 + 52) * (uint64_t)v8;
      if ((int)v65 >= 8)
      {
        float v66 = *(float32x4_t **)(v62 + 8 * v52);
        float v67 = *(float32x4_t **)(v64 + 8 * v29);
        int v68 = (int)v65 / 8;
        uint64_t v69 = *(float32x4_t **)(v63 + 8 * v29);
        do
        {
          float32x4_t v71 = *v69;
          float32x4_t v70 = v69[1];
          v69 += 2;
          float32x4_t v73 = *v67;
          float32x4_t v72 = v67[1];
          v67 += 2;
          *float v66 = vmulq_f32(v73, v71);
          v66[1] = vmulq_f32(v72, v70);
          v66 += 2;
          --v68;
        }
        while (v68);
      }
      int v74 = 8 * ((int)v65 / 8);
      if (v74 < (int)v65)
      {
        uint64_t v75 = *(void *)(v63 + 8 * v29);
        uint64_t v76 = *(void *)(v64 + 8 * v29);
        uint64_t v77 = *(void *)(v62 + 8 * v52);
        unint64_t v78 = v74;
        unint64_t v79 = v65 - v74;
        if (v79 < 0xC) {
          goto LABEL_113;
        }
        uint64_t v80 = 4 * v74;
        if ((unint64_t)(v77 - v75) < 0x20) {
          goto LABEL_113;
        }
        if ((unint64_t)(v77 - v76) < 0x20) {
          goto LABEL_113;
        }
        unint64_t v81 = v79 - (v65 & 7) + v74;
        unint64_t v82 = v74 + (unint64_t)(v65 & 7) - v65;
        float32x4_t v83 = (float32x4_t *)(v77 + v80 + 16);
        float32x4_t v84 = (float32x4_t *)(v75 + v80 + 16);
        float32x4_t v85 = (float32x4_t *)(v76 + v80 + 16);
        do
        {
          float32x4_t v86 = vmulq_f32(*v85, *v84);
          v83[-1] = vmulq_f32(v85[-1], v84[-1]);
          float32x4_t *v83 = v86;
          v83 += 2;
          v84 += 2;
          v85 += 2;
          v82 += 8;
        }
        while (v82);
        unint64_t v78 = v81;
        if ((v65 & 7) != 0)
        {
LABEL_113:
          unint64_t v87 = v65 - v78;
          uint64_t v88 = (float *)(v77 + 4 * v78);
          unint64_t v89 = (float *)(v76 + 4 * v78);
          uint64_t v90 = (float *)(v75 + 4 * v78);
          do
          {
            float v91 = *v90++;
            float v92 = v91;
            float v93 = *v89++;
            *v88++ = v93 * v92;
            --v87;
          }
          while (v87);
        }
      }
      if (!v20) {
        goto LABEL_160;
      }
      if (!v189)
      {
        uint64_t v100 = *(void *)(a1 + 184);
        uint64_t v101 = *(void *)(a1 + 472);
        uint64_t v102 = *(int *)(a1 + 52) * (uint64_t)v8;
        if ((int)v102 >= 8)
        {
          unint64_t v103 = *(float32x4_t **)(v100 + 8 * v52);
          uint64_t v104 = *(float32x4_t **)(v100 + 8 * (int)v199);
          int v105 = (int)v102 / 8;
          BOOL v106 = *(float32x4_t **)(v101 + 8 * v29);
          do
          {
            float32x4_t v108 = *v106;
            float32x4_t v107 = v106[1];
            v106 += 2;
            float32x4_t v110 = *v104;
            float32x4_t v109 = v104[1];
            v104 += 2;
            float32x4_t v111 = vmlaq_f32(v103[1], v109, v107);
            *unint64_t v103 = vmlaq_f32(*v103, v110, v108);
            v103[1] = v111;
            v103 += 2;
            --v105;
          }
          while (v105);
        }
        int v112 = 8 * ((int)v102 / 8);
        if (v112 < (int)v102)
        {
          uint64_t v113 = *(void *)(v101 + 8 * v29);
          uint64_t v114 = *(void *)(v100 + 8 * (int)v199);
          uint64_t v115 = *(void *)(v100 + 8 * v52);
          uint64_t v116 = v112;
          unint64_t v117 = v102 - v112;
          if (v117 < 8) {
            goto LABEL_140;
          }
          uint64_t v118 = 4 * v112;
          unint64_t v119 = v115 + 4 * v102;
          _CF = v115 + v118 >= (unint64_t)(v114 + 4 * v102) || v114 + 4 * v112 >= v119;
          BOOL v121 = !_CF;
          if (v113 + v118 < v119 && v115 + v118 < (unint64_t)(v113 + 4 * v102)) {
            goto LABEL_140;
          }
          if (v121) {
            goto LABEL_140;
          }
          uint64_t v123 = v117 - (v102 & 7) + v116;
          uint64_t v124 = v116 + (v102 & 7) - v102;
          int v125 = (float32x4_t *)(v115 + v118 + 16);
          unint64_t v126 = (float32x4_t *)(v113 + v118 + 16);
          float32x4_t v127 = (float32x4_t *)(v114 + v118 + 16);
          do
          {
            float32x4_t v128 = vmlaq_f32(*v125, *v127, *v126);
            v125[-1] = vmlaq_f32(v125[-1], v127[-1], v126[-1]);
            *int v125 = v128;
            v125 += 2;
            v126 += 2;
            v127 += 2;
            v124 += 8;
          }
          while (v124);
          uint64_t v116 = v123;
          if ((v102 & 7) != 0)
          {
LABEL_140:
            uint64_t v129 = v102 - v116;
            float32x4_t v130 = (float *)(v115 + 4 * v116);
            float32x4_t v131 = (float *)(v114 + 4 * v116);
            int v132 = (float *)(v113 + 4 * v116);
            do
            {
              float v133 = *v132++;
              float v134 = v133;
              float v135 = *v131++;
              *float32x4_t v130 = *v130 + (float)(v135 * v134);
              ++v130;
              --v129;
            }
            while (v129);
          }
        }
        goto LABEL_160;
      }
      uint64_t v94 = (*(_DWORD *)(a1 + 52) * v8);
      if ((int)v94 >= 1)
      {
        uint64_t v95 = *(void *)(a1 + 184);
        BOOL v96 = *(float32x4_t **)(v95 + 8 * (int)v199);
        BOOL v97 = *(float32x4_t **)(*(void *)(a1 + 448) + 8 * v29);
        unint64_t v98 = *(void *)(v95 + 8 * v52);
        if (v94 >= 8)
        {
          uint64_t v99 = 0;
          unint64_t v136 = v98 + 4 * v94;
          BOOL v138 = v98 < (unint64_t)v97->u64 + 4 * v94 && (unint64_t)v97 < v136;
          if (((unint64_t)v96 >= v136 || v98 >= (unint64_t)v96->u64 + 4 * v94) && !v138)
          {
            uint64_t v99 = v94 & 0x7FFFFFF8;
            BOOL v140 = v96 + 1;
            BOOL v141 = v97 + 1;
            unint64_t v142 = (float32x4_t *)(v98 + 16);
            uint64_t v143 = v94 & 0xFFFFFFF8;
            do
            {
              float32x4_t v144 = vaddq_f32(vmlsq_f32(*v140, *v140, *v141), *v142);
              v142[-1] = vaddq_f32(vmlsq_f32(v140[-1], v140[-1], v141[-1]), v142[-1]);
              *unint64_t v142 = v144;
              v140 += 2;
              v141 += 2;
              v142 += 2;
              v143 -= 8;
            }
            while (v143);
            if (v99 == v94) {
              goto LABEL_160;
            }
          }
        }
        else
        {
          uint64_t v99 = 0;
        }
        uint64_t v145 = v94 - v99;
        uint64_t v146 = v99;
        unint64_t v147 = (float *)(v98 + v146 * 4);
        float32x4_t v148 = &v97->f32[v146];
        uint64_t v149 = &v96->f32[v146];
        do
        {
          float v150 = *v149++;
          float v151 = v150;
          float v152 = *v148++;
          float *v147 = (float)(v151 - (float)(v152 * v151)) + *v147;
          ++v147;
          --v145;
        }
        while (v145);
      }
LABEL_160:
      uint64_t v153 = *(void *)(a1 + 184);
      vDSP_Length v154 = *(int *)(a1 + 52) * (uint64_t)v8;
      *(float *)&float __B = -v10;
      __C[0] = v10;
      vDSP_vclip(*(const float **)(v153 + 8 * v52), 1, (const float *)&__B, __C, *(float **)(v153 + 8 * v52), 1, v154);
      if ((v201 & 1) == 0) {
        sub_19E21A95C(a1, v44, (float **)(*(void *)(a1 + 400) + 8 * v29), (const void **)(*(void *)(a1 + 136) + 8 * v41), *(uint64_t **)(a1 + 2520), *(void *)(a1 + 208) + 24 * (int)v52, v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1);
      }
      sub_19E21ABD4(a1, *(void *)(a1 + 2680), (uint64_t *)(*(void *)(a1 + 400) + 8 * v29), *(float32x4_t ***)(a1 + 2616), v8, *(_DWORD *)(a1 + 52));
      if ((v196 & 1) == 0) {
        sub_19E21B34C((float **)(*(void *)(a1 + 400) + 8 * v29), (const void **)(*(void *)(a1 + 160) + 8 * (int)v199), *(uint64_t **)(a1 + 2552), v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 111, 1.0);
      }
      sub_19E21AEC0(a1, *(void *)(a1 + 2680), (uint64_t *)(*(void *)(a1 + 400) + 8 * v29), *(float32x4_t ***)(a1 + 2584), (uint64_t *)(*(void *)(a1 + 184) + 8 * v52), v8, *(_DWORD *)(a1 + 52));
      uint64_t v155 = *(void *)(a1 + 400);
      vDSP_Length v156 = *(int *)(a1 + 52) * (uint64_t)v8;
      LODWORD(__B) = -1035468800;
      __C[0] = 50.0;
      vDSP_vclip(*(const float **)(v155 + 8 * v29), 1, (const float *)&__B, __C, *(float **)(v155 + 8 * v29), 1, v156);
      sub_19E1655C4((float32x2_t **)(*(void *)(a1 + 496) + v30), (uint64_t *)(*(void *)(a1 + 400) + v30), v8, *(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 736));
      sub_19E1655C4(v190, (uint64_t *)(*(void *)(a1 + 184) + 8 * v52), v8, *(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 744));
      uint64_t v157 = *(void *)(a1 + 160);
      uint64_t v158 = *(void *)(a1 + 496);
      uint64_t v159 = *(int *)(a1 + 52) * (uint64_t)v8;
      int v160 = (int)v159 / 8;
      if ((int)v159 >= 8)
      {
        float v161 = *(float32x4_t **)(v157 + 8 * v52);
        float v162 = *(float32x4_t **)(v158 + 8 * v29);
        int v163 = (int)v159 / 8;
        unint64_t v164 = *v190;
        do
        {
          float32x4_t v166 = *(float32x4_t *)v164->f32;
          float32x4_t v165 = *(float32x4_t *)v164[2].f32;
          v164 += 4;
          float32x4_t v168 = *v162;
          float32x4_t v167 = v162[1];
          v162 += 2;
          *float v161 = vmulq_f32(v168, v166);
          v161[1] = vmulq_f32(v167, v165);
          v161 += 2;
          --v163;
        }
        while (v163);
      }
      int v169 = 8 * v160;
      if (8 * v160 < (int)v159)
      {
        uint64_t v170 = *(void *)(v158 + 8 * v29);
        uint64_t v171 = *v190;
        uint64_t v172 = *(void *)(v157 + 8 * v52);
        unint64_t v173 = v169;
        unint64_t v174 = v159 - v169;
        if (v174 < 0xC) {
          goto LABEL_174;
        }
        uint64_t v175 = 4 * v169;
        if ((unint64_t)(v172 - (void)v171) < 0x20) {
          goto LABEL_174;
        }
        if ((unint64_t)(v172 - v170) < 0x20) {
          goto LABEL_174;
        }
        unint64_t v176 = v174 - (v159 & 7) + v169;
        unint64_t v177 = v169 + (unint64_t)(v159 & 7) - v159;
        BOOL v178 = (float32x4_t *)(v172 + v175 + 16);
        BOOL v179 = (float32x4_t *)((char *)&v171[2] + v175);
        float v180 = (float32x4_t *)(v170 + v175 + 16);
        do
        {
          float32x4_t v181 = vmulq_f32(*v180, *v179);
          v178[-1] = vmulq_f32(v180[-1], v179[-1]);
          *BOOL v178 = v181;
          v178 += 2;
          v179 += 2;
          v180 += 2;
          v177 += 8;
        }
        while (v177);
        unint64_t v173 = v176;
        if ((v159 & 7) != 0)
        {
LABEL_174:
          unint64_t v182 = v159 - v173;
          uint64_t v183 = (float *)(v172 + 4 * v173);
          uint64_t v184 = (float *)(v170 + 4 * v173);
          unint64_t v185 = (float *)v171 + v173;
          do
          {
            float v186 = *v185++;
            float v187 = v186;
            float v188 = *v184++;
            *v183++ = v188 * v187;
            --v182;
          }
          while (v182);
        }
      }
      if (*(unsigned char *)(a1 + 2692))
      {
        memcpy(*(void **)(*(void *)(a1 + 112) + 8 * v52), *(const void **)(*(void *)(a1 + 160) + 8 * v52), 4 * *(int *)(a1 + 52));
        memcpy(*(void **)(*(void *)(a1 + 88) + 8 * v52), *(const void **)(*(void *)(a1 + 184) + 8 * v52), 4 * *(int *)(a1 + 52));
      }
      unsigned int v13 = v197 + 1;
      unsigned int v11 = v191;
      if (v197 + 1 == v191) {
        return;
      }
    }
    bzero(*(void **)(v24 + 8 * v23), 4 * *(int *)(a1 + 48));
    *(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 8 * v23) + 4 * **(int **)(*a3 + 24 * (int)v19)) = 1065353216;
    int v25 = *(unsigned __int8 *)(a1 + 40);
    if (!*(unsigned char *)(a1 + 40)) {
      goto LABEL_41;
    }
LABEL_40:
    *(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 8 * v23) + 4 * *(int *)(a1 + 48) - 4) = 1065353216;
    goto LABEL_41;
  }
}

void sub_19E219F10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  float32x4_t v56 = *(void **)(v54 - 152);
  if (v56)
  {
    *(void *)(v54 - 144) = v56;
    operator delete(v56);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E219FB8(uint64_t a1, int a2, float **a3, float **a4, float **a5, void **a6, const void **a7, uint64_t *a8, uint64_t a9, int a10, int a11, int a12, unsigned __int8 a13)
{
  if (a2) {
    sub_19E2F6320(545);
  }
  int v18 = 4 * a11;
  if (!*(void *)(a1 + 784)) {
    operator new[]();
  }
  sub_19E21B34C((float **)(a1 + 784), a7, a8, a10, a12, 4 * a11, 111, 0.0);
  uint64_t v19 = *a3;
  BOOL v20 = *a4;
  uint64_t v21 = *a5;
  int v22 = (float *)*a6;
  int v23 = a11 * a10;
  vDSP_Length __N = a11 * a10;
  size_t v24 = 4 * __N;
  if (a10 >= 1)
  {
    float __C = v21;
    bzero(*(void **)(a1 + 752), 4 * v23);
    uint64_t v25 = 4 * a11;
    uint64_t v26 = 4 * v18;
    if (a11 <= 0)
    {
LABEL_28:
      if (a13)
      {
        vDSP_vadd(*(const float **)(a1 + 752), 1, v19, 1, v19, 1, __N);
        bzero(*(void **)(a1 + 752), v24);
        int v50 = a13;
        if (a11 < 1) {
          goto LABEL_52;
        }
      }
      else
      {
        memmove(v19, *(const void **)(a1 + 752), v24);
        bzero(*(void **)(a1 + 752), v24);
        int v50 = a13;
        if (a11 < 1)
        {
LABEL_52:
          if (v50)
          {
            vDSP_vadd(*(const float **)(a1 + 752), 1, v20, 1, v20, 1, __N);
            bzero(*(void **)(a1 + 752), v24);
            if (a11 < 1) {
              goto LABEL_68;
            }
          }
          else
          {
            memmove(v20, *(const void **)(a1 + 752), v24);
            bzero(*(void **)(a1 + 752), v24);
            if (a11 < 1)
            {
LABEL_68:
              if (v50)
              {
                vDSP_vadd(*(const float **)(a1 + 752), 1, __C, 1, __C, 1, __N);
                bzero(*(void **)(a1 + 752), v24);
                if (a11 < 1)
                {
LABEL_84:
                  int v105 = *(const void **)(a1 + 752);
                  if (v50)
                  {
                    int v32 = *(const float **)(a1 + 752);
                    BOOL v33 = v22;
                    vDSP_Length v35 = a11 * a10;
                    int v34 = v22;
                    goto LABEL_86;
                  }
                  goto LABEL_91;
                }
              }
              else
              {
                memmove(__C, *(const void **)(a1 + 752), v24);
                bzero(*(void **)(a1 + 752), v24);
                if (a11 < 1) {
                  goto LABEL_84;
                }
              }
              uint64_t v88 = 0;
              uint64_t v89 = 0;
              uint64_t v90 = 3 * a11;
              uint64_t v91 = *(void *)(a1 + 784);
              uint64_t v92 = *(void *)(a1 + 752);
              uint64_t v93 = v91 + 12 * a11;
              uint64_t v94 = (long long *)(v93 + 16);
              uint64_t v95 = (_OWORD *)(v92 + 16);
              while (1)
              {
                if (a11 >= 8 && (unint64_t)(v92 + v25 * v89 - (v93 + v26 * v89)) >= 0x20)
                {
                  uint64_t v101 = v95;
                  uint64_t v102 = v94;
                  uint64_t v103 = a11 & 0xFFFFFFF8;
                  do
                  {
                    long long v104 = *v102;
                    *(v101 - 1) = *(v102 - 1);
                    _OWORD *v101 = v104;
                    v102 += 2;
                    v101 += 2;
                    v103 -= 8;
                  }
                  while (v103);
                  uint64_t v96 = a11 & 0x7FFFFFF8;
                  if ((a11 & 0xFFFFFFF8) == (unint64_t)a11) {
                    goto LABEL_73;
                  }
                }
                else
                {
                  uint64_t v96 = 0;
                }
                uint64_t v97 = a11 - v96;
                unint64_t v98 = (_DWORD *)(v92 + 4 * (v96 + v88));
                uint64_t v99 = (int *)(v91 + 4 * (v96 + v90));
                do
                {
                  int v100 = *v99++;
                  *v98++ = v100;
                  --v97;
                }
                while (v97);
LABEL_73:
                ++v89;
                uint64_t v94 = (long long *)((char *)v94 + v26);
                uint64_t v95 = (_OWORD *)((char *)v95 + v25);
                v88 += a11;
                v90 += v18;
                if (v89 == a10) {
                  goto LABEL_84;
                }
              }
            }
          }
          uint64_t v71 = 0;
          uint64_t v72 = 0;
          uint64_t v73 = 2 * a11;
          uint64_t v74 = *(void *)(a1 + 784);
          uint64_t v75 = *(void *)(a1 + 752);
          uint64_t v76 = v74 + 8 * a11;
          uint64_t v77 = (long long *)(v76 + 16);
          unint64_t v78 = (_OWORD *)(v75 + 16);
          while (1)
          {
            if (a11 >= 8 && (unint64_t)(v75 + v25 * v72 - (v76 + v26 * v72)) >= 0x20)
            {
              float32x4_t v84 = v78;
              float32x4_t v85 = v77;
              uint64_t v86 = a11 & 0xFFFFFFF8;
              do
              {
                long long v87 = *v85;
                *(v84 - 1) = *(v85 - 1);
                _OWORD *v84 = v87;
                v85 += 2;
                v84 += 2;
                v86 -= 8;
              }
              while (v86);
              uint64_t v79 = a11 & 0x7FFFFFF8;
              if ((a11 & 0xFFFFFFF8) == (unint64_t)a11) {
                goto LABEL_57;
              }
            }
            else
            {
              uint64_t v79 = 0;
            }
            uint64_t v80 = a11 - v79;
            unint64_t v81 = (_DWORD *)(v75 + 4 * (v79 + v71));
            unint64_t v82 = (int *)(v74 + 4 * (v79 + v73));
            do
            {
              int v83 = *v82++;
              *v81++ = v83;
              --v80;
            }
            while (v80);
LABEL_57:
            ++v72;
            uint64_t v77 = (long long *)((char *)v77 + v26);
            unint64_t v78 = (_OWORD *)((char *)v78 + v25);
            v71 += a11;
            v73 += v18;
            if (v72 == a10) {
              goto LABEL_68;
            }
          }
        }
      }
      uint64_t v51 = *(void *)(a1 + 784);
      uint64_t v52 = *(void *)(a1 + 752);
      uint64_t v53 = v25 + v51;
      if (a11 < 8)
      {
        uint64_t v54 = (_DWORD *)(v52 + 12);
        uint64_t v55 = (_DWORD *)(v53 + 12);
        uint64_t v56 = a10;
        do
        {
          *(v54 - 3) = *(v55 - 3);
          if (a11 != 1)
          {
            *(v54 - 2) = *(v55 - 2);
            if (a11 != 2)
            {
              *(v54 - 1) = *(v55 - 1);
              if (a11 != 3)
              {
                *uint64_t v54 = *v55;
                if (a11 != 4)
                {
                  v54[1] = v55[1];
                  if (a11 != 5)
                  {
                    v54[2] = v55[2];
                    if (a11 != 6) {
                      v54[3] = v55[3];
                    }
                  }
                }
              }
            }
          }
          uint64_t v54 = (_DWORD *)((char *)v54 + v25);
          uint64_t v55 = (_DWORD *)((char *)v55 + v26);
          --v56;
        }
        while (v56);
        goto LABEL_52;
      }
      uint64_t v57 = 0;
      uint64_t v58 = 0;
      uint64_t v59 = (long long *)(v53 + 16);
      uint64_t v60 = (_OWORD *)(v52 + 16);
      uint64_t v61 = a11;
      while (1)
      {
        if ((unint64_t)(v52 + v25 * v58 - (v53 + v26 * v58)) >= 0x20)
        {
          uint64_t v63 = v60;
          uint64_t v64 = v59;
          uint64_t v65 = a11 & 0xFFFFFFF8;
          do
          {
            long long v66 = *v64;
            *(v63 - 1) = *(v64 - 1);
            *uint64_t v63 = v66;
            v64 += 2;
            v63 += 2;
            v65 -= 8;
          }
          while (v65);
          uint64_t v62 = a11 & 0x7FFFFFF8;
          if ((a11 & 0xFFFFFFF8) == (unint64_t)a11) {
            goto LABEL_43;
          }
        }
        else
        {
          uint64_t v62 = 0;
        }
        uint64_t v67 = a11 - v62;
        int v68 = (_DWORD *)(v52 + 4 * (v62 + v57));
        uint64_t v69 = (int *)(v51 + 4 * (v62 + v61));
        do
        {
          int v70 = *v69++;
          *v68++ = v70;
          --v67;
        }
        while (v67);
LABEL_43:
        ++v58;
        uint64_t v59 = (long long *)((char *)v59 + v26);
        uint64_t v60 = (_OWORD *)((char *)v60 + v25);
        v57 += a11;
        v61 += v18;
        if (v58 == a10) {
          goto LABEL_52;
        }
      }
    }
    uint64_t v27 = *(void *)(a1 + 784);
    uint64_t v28 = *(void *)(a1 + 752);
    if (a11 < 8)
    {
      uint64_t v29 = (_DWORD *)(v28 + 12);
      uint64_t v30 = (_DWORD *)(v27 + 12);
      uint64_t v31 = a10;
      do
      {
        *(v29 - 3) = *(v30 - 3);
        if (a11 != 1)
        {
          *(v29 - 2) = *(v30 - 2);
          if (a11 != 2)
          {
            *(v29 - 1) = *(v30 - 1);
            if (a11 != 3)
            {
              _DWORD *v29 = *v30;
              if (a11 != 4)
              {
                v29[1] = v30[1];
                if (a11 != 5)
                {
                  v29[2] = v30[2];
                  if (a11 != 6) {
                    v29[3] = v30[3];
                  }
                }
              }
            }
          }
        }
        uint64_t v29 = (_DWORD *)((char *)v29 + v25);
        uint64_t v30 = (_DWORD *)((char *)v30 + v26);
        --v31;
      }
      while (v31);
      goto LABEL_28;
    }
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    char v39 = (long long *)(v27 + 16);
    char v40 = (_OWORD *)(v28 + 16);
    while (1)
    {
      if ((unint64_t)(v28 + v25 * v38 - (v27 + v26 * v38)) >= 0x20)
      {
        uint64_t v42 = a11 & 0x7FFFFFF8;
        vDSP_Length v43 = v40;
        int v44 = v39;
        do
        {
          long long v45 = *v44;
          *(v43 - 1) = *(v44 - 1);
          _OWORD *v43 = v45;
          v44 += 2;
          v43 += 2;
          v42 -= 8;
        }
        while (v42);
        uint64_t v41 = a11 & 0xFFFFFFF8;
        if (v41 == a11) {
          goto LABEL_19;
        }
      }
      else
      {
        uint64_t v41 = 0;
      }
      uint64_t v46 = a11 - v41;
      vDSP_Length v47 = (_DWORD *)(v28 + 4 * (v41 + v36));
      float32x4_t v48 = (int *)(v27 + 4 * (v41 + v37));
      do
      {
        int v49 = *v48++;
        *v47++ = v49;
        --v46;
      }
      while (v46);
LABEL_19:
      v37 += v18;
      ++v38;
      char v39 = (long long *)((char *)v39 + v26);
      char v40 = (_OWORD *)((char *)v40 + v25);
      v36 += a11;
      if (v38 == a10) {
        goto LABEL_28;
      }
    }
  }
  bzero(*(void **)(a1 + 752), 4 * v23);
  if (a13)
  {
    vDSP_vadd(*(const float **)(a1 + 752), 1, v19, 1, v19, 1, __N);
    bzero(*(void **)(a1 + 752), v24);
    vDSP_vadd(*(const float **)(a1 + 752), 1, v20, 1, v20, 1, __N);
    bzero(*(void **)(a1 + 752), v24);
    vDSP_vadd(*(const float **)(a1 + 752), 1, v21, 1, v21, 1, __N);
    bzero(*(void **)(a1 + 752), v24);
    int v32 = *(const float **)(a1 + 752);
    BOOL v33 = v22;
    int v34 = v22;
    vDSP_Length v35 = a11 * a10;
LABEL_86:
    vDSP_vadd(v32, 1, v33, 1, v34, 1, v35);
    return;
  }
  memmove(v19, *(const void **)(a1 + 752), v24);
  bzero(*(void **)(a1 + 752), v24);
  memmove(v20, *(const void **)(a1 + 752), v24);
  bzero(*(void **)(a1 + 752), v24);
  memmove(v21, *(const void **)(a1 + 752), v24);
  bzero(*(void **)(a1 + 752), v24);
  int v105 = *(const void **)(a1 + 752);
LABEL_91:

  memmove(v22, v105, v24);
}

void sub_19E21A95C(uint64_t a1, int a2, float **a3, const void **a4, uint64_t *a5, uint64_t a6, int a7, int a8, int a9, char a10)
{
  if (a10)
  {
    if (!a2)
    {
      sub_19E21B34C((float **)(a1 + 752), a4, a5, a7, a9, a8, 111, 0.0);
      uint64_t v26 = *(const float **)(a1 + 752);
      uint64_t v27 = *a3;
      vDSP_Length v28 = a8 * a7;
LABEL_29:
      vDSP_vadd(v26, 1, v27, 1, v27, 1, v28);
      return;
    }
    if (a7 != 1) {
      sub_19E2F6320(502);
    }
    size_t v16 = *(const void **)a6;
    uint64_t v15 = *(void *)(a6 + 8);
    int64_t v17 = v15 - *(void *)a6;
    if (v15 == *(void *)a6)
    {
      int v18 = 0;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
    }
    else
    {
      if (v17 < 0) {
        sub_19E13D694();
      }
      int v18 = (int *)operator new(v15 - *(void *)a6);
      uint64_t v19 = &v18[v17 >> 2];
      memcpy(v18, v16, v17);
      uint64_t v20 = 4 * (v17 >> 2);
      if (v20 == 8)
      {
        if (a8 >= 1)
        {
          uint64_t v22 = *v18;
          uint64_t v21 = v18[1];
          uint64_t v23 = *a5;
          uint64_t v24 = a8;
          uint64_t v25 = *(float **)(a1 + 760);
          do
          {
            *v25++ = *(float *)(v23 + 4 * v21) + *(float *)(v23 + 4 * v22);
            v23 += 4 * a9;
            --v24;
          }
          while (v24);
        }
        goto LABEL_26;
      }
    }
    if (a8 >= 1)
    {
      uint64_t v29 = *(_DWORD **)(a1 + 760);
      if (v19 != v18)
      {
        uint64_t v30 = 0;
        unint64_t v31 = v20 >> 2;
        uint64_t v32 = *a5;
        if (v31 <= 1) {
          unint64_t v31 = 1;
        }
        do
        {
          v29[v30] = 0;
          float v33 = 0.0;
          int v34 = v18;
          unint64_t v35 = v31;
          do
          {
            uint64_t v36 = *v34++;
            float v33 = *(float *)(v32 + 4 * (v30 * a9 + v36)) + v33;
            *(float *)&v29[v30] = v33;
            --v35;
          }
          while (v35);
          ++v30;
        }
        while (v30 != a8);
        goto LABEL_27;
      }
      bzero(v29, 4 * a8);
    }
LABEL_26:
    if (!v18)
    {
LABEL_28:
      uint64_t v26 = *(const float **)(a1 + 760);
      uint64_t v27 = *a3;
      vDSP_Length v28 = a8;
      goto LABEL_29;
    }
LABEL_27:
    operator delete(v18);
    goto LABEL_28;
  }
  if (a2) {
    sub_19E2F6320(456);
  }

  sub_19E21B34C(a3, a4, a5, a7, a9, a8, 111, 0.0);
}

void sub_19E21ABB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E21ABD4(uint64_t a1, uint64_t a2, uint64_t *a3, float32x4_t **a4, int a5, int a6)
{
  if (a2)
  {
    if (*(unsigned char *)(a2 + 244) && a5 >= 1)
    {
      if (a6 >= 0) {
        int v7 = a6;
      }
      else {
        int v7 = a6 + 7;
      }
      uint64_t v8 = (int)(v7 & 0xFFFFFFF8);
      uint64_t v9 = a6;
      if (a6 < 8)
      {
        if ((int)v8 < a6)
        {
          uint64_t v33 = *a3;
          int v34 = *a4;
          uint64_t v35 = a5;
          uint64_t v36 = 4 * v8;
          uint64_t v37 = 4 * a6;
          unint64_t v38 = (unint64_t)(*a4)->u64 + 4 * v8;
          unint64_t v39 = a6 - v8;
          if (v39 >= 8)
          {
            uint64_t v53 = 0;
            uint64_t v54 = a6 - (a6 & 7);
            uint64_t v55 = (float32x4_t *)((char *)v34 + v36 + 16);
            uint64_t v56 = (float32x4_t *)(v33 + v36 + 16);
            uint64_t v57 = v33 + v36;
            uint64_t v58 = v33;
            do
            {
              BOOL v59 = v57 + v37 * v53 >= (unint64_t)v34 + v37 || v38 >= v33 + v37 + v37 * v53;
              uint64_t v60 = v8;
              if (!v59) {
                goto LABEL_49;
              }
              uint64_t v61 = v56;
              uint64_t v62 = v55;
              uint64_t v63 = v8 + (v9 & 7) - v9;
              do
              {
                float32x4_t v64 = vaddq_f32(*v61, *v62);
                v61[-1] = vaddq_f32(v61[-1], v62[-1]);
                *uint64_t v61 = v64;
                v62 += 2;
                v61 += 2;
                v63 += 8;
              }
              while (v63);
              uint64_t v60 = v54;
              if ((v9 & 7) != 0)
              {
LABEL_49:
                uint64_t v65 = v9 - v60;
                uint64_t v66 = v60;
                uint64_t v67 = (float *)(v58 + 4 * v60);
                int v68 = &v34->f32[v66];
                do
                {
                  float v69 = *v68++;
                  *uint64_t v67 = *v67 + v69;
                  ++v67;
                  --v65;
                }
                while (v65);
              }
              ++v53;
              uint64_t v56 = (float32x4_t *)((char *)v56 + v37);
              v58 += v37;
            }
            while (v53 != v35);
          }
          else
          {
            uint64_t v40 = 0;
            uint64_t v41 = (float *)(v33 + v36);
            do
            {
              uint64_t v42 = (float *)v38;
              vDSP_Length v43 = v41;
              unint64_t v44 = v39;
              do
              {
                float v45 = *v42++;
                float *v43 = *v43 + v45;
                ++v43;
                --v44;
              }
              while (v44);
              ++v40;
              uint64_t v41 = (float *)((char *)v41 + v37);
            }
            while (v40 != v35);
          }
        }
      }
      else
      {
        int v10 = v7 >> 3;
        if ((int)v8 >= a6)
        {
          uint64_t v46 = 0;
          do
          {
            vDSP_Length v47 = (float32x4_t *)(*a3 + 4 * v46 * a6);
            float32x4_t v48 = *a4;
            int v49 = v10;
            do
            {
              float32x4_t v50 = *v48;
              float32x4_t v51 = v48[1];
              v48 += 2;
              float32x4_t v52 = vaddq_f32(v47[1], v51);
              float32x4_t *v47 = vaddq_f32(*v47, v50);
              v47[1] = v52;
              v47 += 2;
              --v49;
            }
            while (v49);
            ++v46;
          }
          while (v46 != a5);
        }
        else
        {
          uint64_t v11 = 0;
          uint64_t v12 = 0;
          unsigned int v13 = *a4;
          uint64_t v14 = 4 * v8;
          uint64_t v15 = 4 * v9;
          uint64_t v16 = 4 * v8 + 16;
          do
          {
            uint64_t v17 = *a3;
            int v18 = (float32x4_t *)(*a3 + 4 * v12 * v9);
            int v19 = v10;
            do
            {
              float32x4_t v20 = *v13;
              float32x4_t v21 = v13[1];
              v13 += 2;
              float32x4_t v22 = vaddq_f32(v18[1], v21);
              *int v18 = vaddq_f32(*v18, v20);
              v18[1] = v22;
              v18 += 2;
              --v19;
            }
            while (v19);
            unsigned int v13 = *a4;
            uint64_t v23 = v8;
            if ((unint64_t)(v9 - v8) < 8) {
              goto LABEL_24;
            }
            BOOL v24 = v17 + v14 + v15 * v12 >= (unint64_t)v13 + v15
               || (unint64_t)v13 + v14 >= v17 + v15 + v15 * v12;
            uint64_t v23 = v8;
            if (!v24) {
              goto LABEL_24;
            }
            uint64_t v25 = (float32x4_t *)((char *)v13 + 4 * v8 + 16);
            uint64_t v26 = (float32x4_t *)(v17 + v16);
            uint64_t v27 = v8 + (v9 & 7) - v9;
            do
            {
              float32x4_t v28 = vaddq_f32(*v26, *v25);
              v26[-1] = vaddq_f32(v26[-1], v25[-1]);
              *uint64_t v26 = v28;
              v25 += 2;
              v26 += 2;
              v27 += 8;
            }
            while (v27);
            uint64_t v23 = v9 - (v9 & 7);
            if ((v9 & 7) != 0)
            {
LABEL_24:
              uint64_t v29 = v9 - v23;
              uint64_t v30 = (float *)(v17 + v11 + 4 * v23);
              unint64_t v31 = &v13->f32[v23];
              do
              {
                float v32 = *v31++;
                float *v30 = *v30 + v32;
                ++v30;
                --v29;
              }
              while (v29);
            }
            ++v12;
            v16 += v15;
            v11 += v15;
          }
          while (v12 != a5);
        }
      }
    }
  }
}

uint64_t sub_19E21AEC0(uint64_t result, uint64_t a2, uint64_t *a3, float32x4_t **a4, uint64_t *a5, int a6, int a7)
{
  if (a2)
  {
    if (*(unsigned char *)(a2 + 384)) {
      BOOL v7 = a6 <= 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (v7) {
      return result;
    }
  }
  else if (a6 < 1)
  {
    return result;
  }
  int v8 = *(_DWORD *)(result + 52);
  if (v8 < 8)
  {
    int v53 = v8 + 7;
    if (v8 >= 0) {
      int v53 = *(_DWORD *)(result + 52);
    }
    signed int v54 = v53 & 0xFFFFFFF8;
    if (v54 < v8)
    {
      uint64_t v55 = *a3;
      uint64_t v56 = *a5;
      uint64_t result = v54;
      uint64_t v57 = v8;
      uint64_t v58 = *a4;
      uint64_t v59 = a6;
      uint64_t v60 = 4 * v54;
      uint64_t v61 = &(*a4)->f32[(unint64_t)v60 / 4];
      uint64_t v62 = v57 - result;
      if ((unint64_t)(v57 - result) > 7)
      {
        uint64_t v73 = 4 * a7;
        uint64_t v74 = 4 * v57;
        uint64_t v75 = &v58->i8[4 * v57];
        uint64_t v76 = 0;
        uint64_t v77 = v57 & 7;
        if ((v57 & 7) != 0)
        {
          uint64_t v78 = v57 - v77;
          uint64_t v79 = result + v77 - v57;
          uint64_t v80 = (float32x4_t *)(v55 + v60 + 16);
          unint64_t v81 = (float32x4_t *)(v56 + v60 + 16);
          uint64_t v82 = v56;
          uint64_t v83 = v55;
          do
          {
            uint64_t v84 = v74 + v73 * v76;
            unint64_t v85 = v56 + v84;
            uint64_t v86 = v60 + v73 * v76;
            unint64_t v87 = v55 + v84;
            unint64_t v88 = v55 + v86;
            BOOL v90 = v55 + v86 < v85 && v56 + v86 < v87;
            BOOL v91 = (unint64_t)v61 >= v87 || v88 >= (unint64_t)v75;
            uint64_t v92 = result;
            if (v91)
            {
              uint64_t v92 = result;
              if (!v90)
              {
                uint64_t v93 = v81;
                uint64_t v94 = (float32x4_t *)((char *)v58 + v60 + 16);
                uint64_t v95 = v80;
                uint64_t v96 = v79;
                do
                {
                  float32x4_t v97 = vmlaq_f32(*v95, *v93, *v94);
                  v95[-1] = vmlaq_f32(v95[-1], v93[-1], v94[-1]);
                  float32x4_t *v95 = v97;
                  v95 += 2;
                  v94 += 2;
                  v93 += 2;
                  v96 += 8;
                }
                while (v96);
                uint64_t v92 = v78;
              }
            }
            uint64_t v98 = v57 - v92;
            uint64_t v99 = v92;
            int v100 = (float *)(v83 + 4 * v92);
            uint64_t v101 = (float *)(v82 + v99 * 4);
            uint64_t v102 = &v58->f32[v99];
            do
            {
              float v103 = *v102++;
              float v104 = v103;
              float v105 = *v101++;
              float *v100 = *v100 + (float)(v105 * v104);
              ++v100;
              --v98;
            }
            while (v98);
            ++v76;
            uint64_t v80 = (float32x4_t *)((char *)v80 + v73);
            unint64_t v81 = (float32x4_t *)((char *)v81 + v73);
            v83 += v73;
            v82 += v73;
          }
          while (v76 != a6);
        }
        else
        {
          result -= v57;
          BOOL v106 = (float32x4_t *)((char *)v58 + v60 + 16);
          float32x4_t v107 = (float32x4_t *)(v55 + v60 + 16);
          uint64_t v108 = 4 * a7;
          float32x4_t v109 = (float32x4_t *)(v56 + v60 + 16);
          float32x4_t v110 = (float *)(v55 + v60);
          float32x4_t v111 = (float *)(v56 + v60);
          int v112 = &v58->f32[(unint64_t)v60 / 4];
          do
          {
            uint64_t v113 = v74 + v73 * v76;
            unint64_t v114 = v56 + v113;
            uint64_t v115 = v60 + v73 * v76;
            unint64_t v116 = v56 + v115;
            unint64_t v117 = v55 + v113;
            unint64_t v118 = v55 + v115;
            BOOL v120 = v118 < v114 && v116 < v117;
            BOOL v121 = (unint64_t)v61 >= v117 || v118 >= (unint64_t)v75;
            uint64_t v122 = v112;
            uint64_t v123 = v111;
            uint64_t v124 = v110;
            uint64_t v125 = v62;
            if (!v121) {
              goto LABEL_85;
            }
            unint64_t v126 = v109;
            float32x4_t v127 = v107;
            float32x4_t v128 = v106;
            uint64_t v129 = result;
            uint64_t v122 = v112;
            uint64_t v123 = v111;
            uint64_t v124 = v110;
            uint64_t v125 = v62;
            if (v120)
            {
LABEL_85:
              do
              {
                float v131 = *v122++;
                float v132 = v131;
                float v133 = *v123++;
                float *v124 = *v124 + (float)(v133 * v132);
                ++v124;
                --v125;
              }
              while (v125);
            }
            else
            {
              do
              {
                float32x4_t v130 = vmlaq_f32(*v127, *v126, *v128);
                v127[-1] = vmlaq_f32(v127[-1], v126[-1], v128[-1]);
                *float32x4_t v127 = v130;
                v128 += 2;
                v127 += 2;
                v126 += 2;
                v129 += 8;
              }
              while (v129);
            }
            ++v76;
            float32x4_t v107 = (float32x4_t *)((char *)v107 + v108);
            float32x4_t v109 = (float32x4_t *)((char *)v109 + v108);
            float32x4_t v110 = (float *)((char *)v110 + v108);
            float32x4_t v111 = (float *)((char *)v111 + v108);
          }
          while (v76 != v59);
        }
      }
      else
      {
        uint64_t v63 = 0;
        float32x4_t v64 = (float *)(v55 + v60);
        uint64_t v65 = 4 * a7;
        uint64_t v66 = (float *)(v56 + v60);
        do
        {
          uint64_t v67 = v61;
          int v68 = v66;
          float v69 = v64;
          uint64_t result = v62;
          do
          {
            float v70 = *v67++;
            float v71 = v70;
            float v72 = *v68++;
            float *v69 = *v69 + (float)(v72 * v71);
            ++v69;
            --result;
          }
          while (result);
          ++v63;
          float32x4_t v64 = (float *)((char *)v64 + v65);
          uint64_t v66 = (float *)((char *)v66 + v65);
        }
        while (v63 != a6);
      }
    }
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = a7;
    uint64_t v12 = a6;
    uint64_t v13 = 4 * a7;
    uint64_t v14 = 16;
    do
    {
      uint64_t v15 = *a3;
      uint64_t v16 = *a5;
      uint64_t v17 = *(int *)(result + 52);
      int v18 = (int)v17 / 8;
      if ((int)v17 >= 8)
      {
        uint64_t v19 = 4 * v10 * v11;
        float32x4_t v20 = (float32x4_t *)(v15 + v19);
        float32x4_t v21 = (float32x4_t *)(v16 + v19);
        float32x4_t v22 = *a4;
        int v23 = (int)v17 / 8;
        do
        {
          float32x4_t v25 = *v22;
          float32x4_t v24 = v22[1];
          v22 += 2;
          float32x4_t v27 = *v21;
          float32x4_t v26 = v21[1];
          v21 += 2;
          float32x4_t v28 = vmlaq_f32(v20[1], v26, v24);
          *float32x4_t v20 = vmlaq_f32(*v20, v27, v25);
          v20[1] = v28;
          v20 += 2;
          --v23;
        }
        while (v23);
      }
      int v29 = 8 * v18;
      if (8 * v18 < (int)v17)
      {
        uint64_t v30 = *a4;
        uint64_t v31 = v29;
        unint64_t v32 = v17 - v29;
        if (v32 < 0xC) {
          goto LABEL_32;
        }
        uint64_t v33 = 4 * v29;
        uint64_t v34 = v13 * v10 + v33;
        unint64_t v35 = v15 + v34;
        uint64_t v36 = v13 * v10 + 4 * v17;
        unint64_t v37 = v15 + v36;
        unint64_t v38 = v16 + v34;
        BOOL v39 = v35 >= v16 + v36 || v38 >= v37;
        BOOL v40 = !v39;
        if ((unint64_t)v30->u64 + 4 * v31 < v37 && v35 < (unint64_t)v30->u64 + 4 * v17) {
          goto LABEL_32;
        }
        if (v40) {
          goto LABEL_32;
        }
        uint64_t v42 = v32 - (v17 & 7) + v31;
        uint64_t v43 = v31 + (v17 & 7) - v17;
        unint64_t v44 = (float32x4_t *)(v15 + v9 + v33);
        float v45 = (float32x4_t *)((char *)v30 + v33 + 16);
        uint64_t v46 = (float32x4_t *)(v16 + v14 + v33);
        do
        {
          float32x4_t v47 = vmlaq_f32(v44[1], *v46, *v45);
          *unint64_t v44 = vmlaq_f32(*v44, v46[-1], v45[-1]);
          v44[1] = v47;
          v44 += 2;
          v45 += 2;
          v46 += 2;
          v43 += 8;
        }
        while (v43);
        uint64_t v31 = v42;
        if ((v17 & 7) != 0)
        {
LABEL_32:
          uint64_t v48 = v17 - v31;
          uint64_t v49 = v15 + 4 * v31;
          uint64_t v50 = v16 + 4 * v31;
          float32x4_t v51 = &v30->f32[v31];
          do
          {
            float v52 = *v51++;
            *(float *)(v49 + v9) = *(float *)(v49 + v9) + (float)(*(float *)(v50 + v9) * v52);
            v49 += 4;
            v50 += 4;
            --v48;
          }
          while (v48);
        }
      }
      ++v10;
      v9 += v13;
      v14 += v13;
    }
    while (v10 != v12);
  }
  return result;
}

void sub_19E21B34C(float **a1, const void **a2, uint64_t *a3, int a4, int a5, int a6, int a7, float a8)
{
  if (a7 != 111)
  {
    cblas_sgemm_NEWLAPACK();
    return;
  }
  vDSP_Length v15 = a6 * a4;
  unint64_t v16 = (qword_1EB2206C0 - qword_1EB2206B8) >> 2;
  if (v15 <= v16)
  {
    if (v15 < v16) {
      qword_1EB2206C0 = qword_1EB2206B8 + 4 * v15;
    }
  }
  else
  {
    sub_19E164E6C((uint64_t)&qword_1EB2206B8, v15 - v16);
  }
  uint64_t v17 = *a3;
  size_t v18 = a5;
  v30[2] = 0;
  v31[0] = a5;
  v31[1] = 0x3F80000000010020;
  v31[2] = 0;
  v30[0] = a6;
  v30[1] = 0x3F80000000010020;
  v24[0] = a5;
  v24[1] = a6;
  v24[2] = v17;
  v24[3] = 0x3F80000000010020;
  v24[4] = 0;
  v24[5] = 0;
  long long v25 = xmmword_19E351628;
  long long v26 = unk_19E351638;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  bzero(v23, 0x20uLL);
  v23[0] = 1;
  uint64_t v19 = (void *)MEMORY[0x19F3BB0D0](v31, v30, v24, v23);
  if (!v19) {
    sub_19E2F6320(1011);
  }
  float32x4_t v20 = v19;
  int v21 = BNNSFilterApplyBatch(v19, a4, *a2, v18, (void *)qword_1EB2206B8, a6);
  float32x4_t v22 = *a1;
  if (a8 != 0.0)
  {
    vDSP_vadd(v22, 1, (const float *)qword_1EB2206B8, 1, *a1, 1, v15);
    if (!v21) {
      goto LABEL_10;
    }
LABEL_12:
    sub_19E2F6320(346);
  }
  memcpy(v22, (const void *)qword_1EB2206B8, 4 * v15);
  if (v21) {
    goto LABEL_12;
  }
LABEL_10:
  BNNSFilterDestroy(v20);
}

void sub_19E21B538(uint64_t a1, const float **a2, uint64_t a3, _DWORD *a4, int a5, int a6, uint64_t a7, uint64_t a8, float a9)
{
  if (a8) {
    sub_19E303188(a8);
  }
  if (*(_DWORD *)(a1 + 56))
  {
    if (a4 && a4[1] * *a4 >= 1)
    {
      (*(void (**)(uint64_t, const float **, _DWORD *, float))(*(void *)a7 + 8))(a7, a2, a4, a9);
      if (!a8) {
        return;
      }
    }
    else
    {
      (**(void (***)(uint64_t, const float **, uint64_t, float))a7)(a7, a2, a3, a9);
      if (!a8) {
        return;
      }
    }
LABEL_11:
    sub_19E303190(a8);
    return;
  }
  (**(void (***)(uint64_t, const float **, uint64_t, float))a7)(a7, a2, a3, a9);
  float __C = 2.0;
  float __B = -2.0;
  vDSP_vclip(*a2, 1, &__B, &__C, (float *)*a2, 1, a6 * a5);
  if (a8) {
    goto LABEL_11;
  }
}

void *sub_19E21B6B0(void *a1)
{
  *a1 = &unk_1EF0A6860;
  sub_19E215710(a1);
  uint64_t v2 = a1[194];
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 80))(v2);
    a1[194] = 0;
    uint64_t v3 = a1[195];
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 80))(v3);
    }
    a1[195] = 0;
    uint64_t v4 = a1[196];
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 80))(v4);
    }
    a1[196] = 0;
    uint64_t v5 = a1[197];
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 80))(v5);
    }
    a1[197] = 0;
    uint64_t v6 = a1[198];
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 80))(v6);
    }
    a1[198] = 0;
    uint64_t v7 = a1[199];
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 80))(v7);
    }
    a1[199] = 0;
    uint64_t v8 = a1[200];
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 80))(v8);
    }
    a1[200] = 0;
    uint64_t v9 = a1[201];
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 80))(v9);
    }
    a1[201] = 0;
  }
  uint64_t v10 = (void *)a1[331];
  if (v10)
  {
    a1[332] = v10;
    operator delete(v10);
  }
  uint64_t v11 = (void *)a1[328];
  if (v11)
  {
    a1[329] = v11;
    operator delete(v11);
  }
  sub_19E3030E8((uint64_t)(a1 + 303));
  sub_19E3030E8((uint64_t)(a1 + 294));
  sub_19E3030E8((uint64_t)(a1 + 285));
  sub_19E3030E8((uint64_t)(a1 + 276));
  sub_19E3030E8((uint64_t)(a1 + 267));
  sub_19E3030E8((uint64_t)(a1 + 258));
  sub_19E3030E8((uint64_t)(a1 + 249));
  sub_19E3030E8((uint64_t)(a1 + 240));
  sub_19E3030E8((uint64_t)(a1 + 231));
  sub_19E3030E8((uint64_t)(a1 + 222));
  sub_19E3030E8((uint64_t)(a1 + 213));
  sub_19E1C6038(a1 + 168);
  sub_19E1C6038(a1 + 153);
  sub_19E1C6038(a1 + 138);
  sub_19E1C6038(a1 + 123);
  uint64_t v12 = (void *)a1[120];
  if (v12)
  {
    a1[121] = v12;
    operator delete(v12);
  }
  uint64_t v13 = (void *)a1[117];
  if (v13)
  {
    a1[118] = v13;
    operator delete(v13);
  }
  uint64_t v14 = (void *)a1[114];
  if (v14)
  {
    a1[115] = v14;
    operator delete(v14);
  }
  vDSP_Length v15 = (void *)a1[111];
  if (v15)
  {
    a1[112] = v15;
    operator delete(v15);
  }
  unint64_t v16 = (void *)a1[108];
  if (v16)
  {
    a1[109] = v16;
    operator delete(v16);
  }
  uint64_t v17 = (void *)a1[105];
  if (v17)
  {
    a1[106] = v17;
    operator delete(v17);
  }
  size_t v18 = (void *)a1[102];
  if (v18)
  {
    a1[103] = v18;
    operator delete(v18);
  }
  uint64_t v19 = (void *)a1[99];
  if (v19)
  {
    a1[100] = v19;
    operator delete(v19);
  }
  float32x4_t v20 = (void *)a1[89];
  if (v20)
  {
    a1[90] = v20;
    operator delete(v20);
  }
  int v21 = (void *)a1[86];
  if (v21)
  {
    a1[87] = v21;
    operator delete(v21);
  }
  float32x4_t v22 = (void *)a1[83];
  if (v22)
  {
    a1[84] = v22;
    operator delete(v22);
  }
  int v23 = (void *)a1[80];
  if (v23)
  {
    a1[81] = v23;
    operator delete(v23);
  }
  float32x4_t v24 = (void *)a1[77];
  if (v24)
  {
    a1[78] = v24;
    operator delete(v24);
  }
  long long v25 = (void *)a1[74];
  if (v25)
  {
    a1[75] = v25;
    operator delete(v25);
  }
  long long v26 = (void *)a1[71];
  if (v26)
  {
    a1[72] = v26;
    operator delete(v26);
  }
  long long v27 = (void *)a1[68];
  if (v27)
  {
    a1[69] = v27;
    operator delete(v27);
  }
  long long v28 = (void *)a1[65];
  if (v28)
  {
    a1[66] = v28;
    operator delete(v28);
  }
  long long v29 = (void *)a1[62];
  if (v29)
  {
    a1[63] = v29;
    operator delete(v29);
  }
  uint64_t v30 = (void *)a1[59];
  if (v30)
  {
    a1[60] = v30;
    operator delete(v30);
  }
  uint64_t v31 = (void *)a1[56];
  if (v31)
  {
    a1[57] = v31;
    operator delete(v31);
  }
  unint64_t v32 = (void *)a1[53];
  if (v32)
  {
    a1[54] = v32;
    operator delete(v32);
  }
  uint64_t v33 = (void *)a1[50];
  if (v33)
  {
    a1[51] = v33;
    operator delete(v33);
  }
  uint64_t v34 = (void *)a1[47];
  if (v34)
  {
    a1[48] = v34;
    operator delete(v34);
  }
  unint64_t v35 = (void *)a1[44];
  if (v35)
  {
    a1[45] = v35;
    operator delete(v35);
  }
  uint64_t v36 = a1[26];
  if (v36)
  {
    uint64_t v37 = a1[27];
    unint64_t v38 = (void *)a1[26];
    if (v37 != v36)
    {
      uint64_t v39 = a1[27];
      do
      {
        uint64_t v41 = *(void **)(v39 - 24);
        v39 -= 24;
        BOOL v40 = v41;
        if (v41)
        {
          *(void *)(v37 - 16) = v40;
          operator delete(v40);
        }
        uint64_t v37 = v39;
      }
      while (v39 != v36);
      unint64_t v38 = (void *)a1[26];
    }
    a1[27] = v36;
    operator delete(v38);
  }
  uint64_t v42 = (void *)a1[23];
  if (v42)
  {
    a1[24] = v42;
    operator delete(v42);
  }
  uint64_t v43 = (void *)a1[20];
  if (v43)
  {
    a1[21] = v43;
    operator delete(v43);
  }
  unint64_t v44 = (void *)a1[17];
  if (v44)
  {
    a1[18] = v44;
    operator delete(v44);
  }
  float v45 = (void *)a1[14];
  if (v45)
  {
    a1[15] = v45;
    operator delete(v45);
  }
  uint64_t v46 = (void *)a1[11];
  if (v46)
  {
    a1[12] = v46;
    operator delete(v46);
  }
  float32x4_t v47 = (void *)a1[8];
  if (v47)
  {
    a1[9] = v47;
    operator delete(v47);
  }
  *a1 = &unk_1EF0A50F8;
  uint64_t v48 = (void *)a1[1];
  if (v48)
  {
    a1[2] = v48;
    operator delete(v48);
  }
  return a1;
}

uint64_t sub_19E21BB6C(uint64_t a1, int a2, int a3, int a4, int a5, int a6, uint64_t a7, char a8, uint64_t a9)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF0A7860;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = a2;
  *(_DWORD *)(a1 + 100) = a3;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(unsigned char *)(a1 + 232) = 0;
  *(void *)(a1 + 416) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 160) = 0;
  *(void *)(a1 + 400) = 0;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  sub_19E3030A0(a1 + 432);
  *(_DWORD *)(a1 + 504) = a5;
  *(_DWORD *)(a1 + 112) = a6;
  (*(void (**)(uint64_t))(*(void *)a1 + 192))(a1);
  *(unsigned char *)(a1 + 41) = 0;
  *(_DWORD *)(a1 + 408) = a4;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a7 + 68);
  *(void *)(a1 + 528) = a9;
  if (a9)
  {
    nullsub_171("FullLayer constructor");
    a8 = *(unsigned char *)(*(void *)(a1 + 528) + 376);
  }
  *(unsigned char *)(a1 + 40) = a8;
  *(unsigned char *)(a1 + 520) = 0;
  *(_WORD *)(a1 + 116) = *(_WORD *)(a7 + 45);
  char v18 = 9;
  strcpy((char *)__p, "FullLayer");
  (*(void (**)(uint64_t, void **, void, float))(*(void *)a1 + 400))(a1, __p, 0, -0.44);
  if (v18 < 0)
  {
    operator delete(__p[0]);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a7 + 16);
    *(void *)(a1 + 424) = 0;
    if (*(unsigned char *)(a1 + 116)) {
      return a1;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a7 + 16);
    *(void *)(a1 + 424) = 0;
    if (*(unsigned char *)(a1 + 116)) {
      return a1;
    }
  }
  int v15 = *(_DWORD *)(a7 + 32);
  switch(v15)
  {
    case 2:
      operator new();
    case 1:
      operator new();
    case 0:
      operator new();
  }
  return a1;
}

void sub_19E21BF40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  operator delete(v24);
  sub_19E3030E8(v23);
  long long v27 = *(void **)(v20 + 384);
  if (v27)
  {
    *(void *)(v20 + 392) = v27;
    operator delete(v27);
    sub_19E14315C((void **)(v20 + 360));
    long long v28 = *(void **)(v20 + 336);
    if (!v28)
    {
LABEL_5:
      long long v29 = *(void **)(v20 + 312);
      if (!v29) {
        goto LABEL_6;
      }
      goto LABEL_14;
    }
  }
  else
  {
    sub_19E14315C((void **)(v20 + 360));
    long long v28 = *(void **)(v20 + 336);
    if (!v28) {
      goto LABEL_5;
    }
  }
  *(void *)(v20 + 344) = v28;
  operator delete(v28);
  long long v29 = *(void **)(v20 + 312);
  if (!v29)
  {
LABEL_6:
    uint64_t v30 = *(void **)(v20 + 288);
    if (!v30) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  *(void *)(v20 + 320) = v29;
  operator delete(v29);
  uint64_t v30 = *(void **)(v20 + 288);
  if (!v30)
  {
LABEL_7:
    uint64_t v31 = *(void **)(v20 + 264);
    if (!v31) {
      goto LABEL_8;
    }
    goto LABEL_16;
  }
LABEL_15:
  *(void *)(v20 + 296) = v30;
  operator delete(v30);
  uint64_t v31 = *(void **)(v20 + 264);
  if (!v31)
  {
LABEL_8:
    sub_19E1C6038(v22);
    unint64_t v32 = *(void **)(v20 + 72);
    if (!v32) {
      goto LABEL_9;
    }
    goto LABEL_17;
  }
LABEL_16:
  *(void *)(v20 + 272) = v31;
  operator delete(v31);
  sub_19E1C6038(v22);
  unint64_t v32 = *(void **)(v20 + 72);
  if (!v32)
  {
LABEL_9:
    uint64_t v33 = *v25;
    if (!*v25) {
      goto LABEL_10;
    }
    goto LABEL_18;
  }
LABEL_17:
  *(void *)(v20 + 80) = v32;
  operator delete(v32);
  uint64_t v33 = *v25;
  if (!*v25)
  {
LABEL_10:
    *(void *)uint64_t v20 = v21;
    uint64_t v34 = *(void **)(v20 + 8);
    if (!v34) {
      goto LABEL_11;
    }
    goto LABEL_19;
  }
LABEL_18:
  *(void *)(v20 + 56) = v33;
  operator delete(v33);
  *(void *)uint64_t v20 = v21;
  uint64_t v34 = *(void **)(v20 + 8);
  if (!v34) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_19:
  *(void *)(v20 + 16) = v34;
  operator delete(v34);
  _Unwind_Resume(a1);
}

void sub_19E21C084()
{
}

uint64_t sub_19E21C098(uint64_t a1)
{
  return a1 + 264;
}

uint64_t sub_19E21C0A0(uint64_t a1)
{
  return a1 + 288;
}

uint64_t sub_19E21C0A8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 376))();
}

uint64_t sub_19E21C0D4(uint64_t a1)
{
  return a1 + 312;
}

uint64_t sub_19E21C0DC()
{
  return 0;
}

unsigned char *sub_19E21C0E4(uint64_t a1, uint64_t a2, int *a3, int a4)
{
  if (!a2) {
LABEL_17:
  }
    sub_19E2F6320(3);
  int v6 = *(_DWORD *)(a2 + 72);
  uint64_t v7 = *(void *)a2;
  uint64_t v8 = (int *)(*(void *)a2 + v6);
  unint64_t v9 = *(void *)a2 + *(void *)(a2 + 8) - 4;
  if ((unint64_t)v8 > v9)
  {
    int v10 = 0;
    uint64_t v11 = (int *)(v7 + v6);
    if ((unint64_t)v11 <= v9) {
      goto LABEL_4;
    }
LABEL_7:
    int v12 = 0;
    if (a4 < 1) {
      goto LABEL_12;
    }
    goto LABEL_8;
  }
  int v10 = *v8;
  v6 += 4;
  *(_DWORD *)(a2 + 72) = v6;
  uint64_t v11 = (int *)(v7 + v6);
  if ((unint64_t)v11 > v9) {
    goto LABEL_7;
  }
LABEL_4:
  int v12 = *v11;
  v6 += 4;
  *(_DWORD *)(a2 + 72) = v6;
  if (a4 < 1) {
    goto LABEL_12;
  }
LABEL_8:
  uint64_t v13 = (int *)(v7 + v6);
  if ((unint64_t)v13 <= v9)
  {
    int v14 = *v13;
    *(_DWORD *)(a2 + 72) = v6 + 4;
  }
  else
  {
    int v14 = 0;
  }
  *(_DWORD *)(a1 + 408) = v14;
LABEL_12:
  if (*(_DWORD *)(a1 + 100) != v10 || *(_DWORD *)(a1 + 104) != v12) {
    goto LABEL_17;
  }
  int v15 = *(unsigned char **)(a1 + 512);
  int v16 = *a3;
  int v17 = *(unsigned __int8 *)(a1 + 117);
  int v18 = sub_19E2F62F0();
  int v19 = *(_DWORD *)(a1 + 100);
  int v20 = *(_DWORD *)(a1 + 104);

  return sub_19E1C632C(v15, (uint64_t *)a2, v16, v17, v18, v19, v20);
}

uint64_t sub_19E21C20C(uint64_t a1, FILE *__stream, int *a3, int a4, unsigned int a5)
{
  if (!__stream) {
    sub_19E2F6320(3);
  }
  int v10 = *(_DWORD *)(a1 + 104);
  sub_19E2F6788(__stream, a3, *(_DWORD *)(a1 + 100));
  sub_19E2F6788(__stream, a3, v10);
  if (a4 >= 1) {
    sub_19E2F6788(__stream, a3, *(_DWORD *)(a1 + 408));
  }
  uint64_t v11 = *(void *)(a1 + 512);
  int v12 = sub_19E2F62F0();

  return sub_19E218654(v11, __stream, a3, 3, v12, a5);
}

float32_t sub_19E21C2C8(uint64_t a1, void *lpsrc, const void *a3)
{
  if (lpsrc)
  {
    uint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3F30, 0);
    if (a3) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v5 = 0;
    if (a3)
    {
LABEL_3:
      uint64_t v7 = __dynamic_cast(a3, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3F30, 0);
      uint64_t v8 = (*(_DWORD *)(a1 + 104) * *(_DWORD *)(a1 + 100));
      if ((int)v8 < 1) {
        return v6.f32[0];
      }
      goto LABEL_7;
    }
  }
  uint64_t v7 = 0;
  uint64_t v8 = (*(_DWORD *)(a1 + 104) * *(_DWORD *)(a1 + 100));
  if ((int)v8 < 1) {
    return v6.f32[0];
  }
LABEL_7:
  unint64_t v9 = (float32x4_t *)v7[16];
  int v10 = (float32x4_t *)v5[16];
  uint64_t v11 = **(float32x4_t ***)(a1 + 512);
  if (v8 < 8)
  {
    uint64_t v12 = 0;
LABEL_14:
    uint64_t v18 = v8 - v12;
    uint64_t v19 = v12;
    int v20 = (__int32 *)((char *)v11 + v19 * 4);
    uint64_t v21 = &v10->f32[v19];
    float32x4_t v22 = &v9->f32[v19];
    do
    {
      float v23 = *v22++;
      float v24 = v23;
      float v25 = *v21++;
      v6.f32[0] = v24 - v25;
      *v20++ = v6.i32[0];
      --v18;
    }
    while (v18);
    return v6.f32[0];
  }
  uint64_t v12 = 0;
  if ((unint64_t)((char *)v11 - (char *)v9) < 0x20) {
    goto LABEL_14;
  }
  if ((unint64_t)((char *)v11 - (char *)v10) < 0x20) {
    goto LABEL_14;
  }
  uint64_t v12 = v8 & 0x7FFFFFF8;
  uint64_t v13 = v9 + 1;
  int v14 = v10 + 1;
  int v15 = v11 + 1;
  uint64_t v16 = v8 & 0xFFFFFFF8;
  do
  {
    float32x4_t v6 = vsubq_f32(v13[-1], v14[-1]);
    float32x4_t v17 = vsubq_f32(*v13, *v14);
    v15[-1] = v6;
    float32x4_t *v15 = v17;
    v13 += 2;
    v14 += 2;
    v15 += 2;
    v16 -= 8;
  }
  while (v16);
  if (v12 != v8) {
    goto LABEL_14;
  }
  return v6.f32[0];
}

void sub_19E21C468(int a1, void *lpsrc, const void *a3)
{
  if (lpsrc) {
    __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3F30, 0);
  }
  if (a3)
  {
    __dynamic_cast(a3, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3F30, 0);
  }
}

void sub_19E21C534(uint64_t a1, void *lpsrc)
{
  uint64_t v3 = (const float **)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3F30, 0);
  uint64_t v4 = *(const float ***)(a1 + 512);
  vDSP_Length v5 = *(int *)(a1 + 104) * (uint64_t)*(int *)(a1 + 100);
  float __B = 1.0;
  vDSP_vsma(v3[16], 1, &__B, *v4, 1, (float *)*v4, 1, v5);
}

void sub_19E21C5D8(uint64_t a1, void *lpsrc)
{
  if (lpsrc) {
    uint64_t v3 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3F30, 0);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(void *)(a1 + 424);
  uint64_t v5 = *(void *)(a1 + 512);
  float32x4_t v6 = v3 + 128;
  (*(void (**)(uint64_t))(*(void *)v4 + 64))(v4);
  (**(void (***)(uint64_t, uint64_t, char *))v4)(v4, v5, v6);
  uint64_t v7 = *(const float ***)(a1 + 512);
  vDSP_Length v8 = *(int *)(a1 + 108);
  float __C = 2.0;
  float __B = -2.0;
  vDSP_vclip(*v7, 1, &__B, &__C, (float *)*v7, 1, v8);
}

void sub_19E21C6F0(uint64_t a1, float a2)
{
  uint64_t v2 = *(const float ***)(a1 + 512);
  vDSP_Length v3 = *(int *)(a1 + 108);
  float __B = -a2;
  float __C = a2;
  vDSP_vclip(*v2, 1, &__B, &__C, (float *)*v2, 1, v3);
}

uint64_t sub_19E21C73C(uint64_t result, float a2)
{
  uint64_t v2 = *(unsigned int *)(result + 108);
  if ((int)v2 >= 1)
  {
    vDSP_Length v3 = **(float32x4_t ***)(result + 512);
    if (v2 < 8)
    {
      uint64_t v4 = 0;
LABEL_7:
      uint64_t v8 = v2 - v4;
      unint64_t v9 = &v3->f32[v4];
      do
      {
        *unint64_t v9 = *v9 * a2;
        ++v9;
        --v8;
      }
      while (v8);
      return result;
    }
    uint64_t v4 = v2 & 0x7FFFFFF8;
    uint64_t v5 = v3 + 1;
    uint64_t v6 = v2 & 0xFFFFFFF8;
    do
    {
      float32x4_t v7 = vmulq_n_f32(*v5, a2);
      v5[-1] = vmulq_n_f32(v5[-1], a2);
      float32x4_t *v5 = v7;
      v5 += 2;
      v6 -= 8;
    }
    while (v6);
    if (v4 != v2) {
      goto LABEL_7;
    }
  }
  return result;
}

uint64_t sub_19E21C7C0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 424) + 16))();
}

void sub_19E21C7E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = **(void **)(a1 + 512);
  int v5 = *(_DWORD *)(a1 + 100);
  int v4 = *(_DWORD *)(a1 + 104);
  float32x4_t v7 = *(void **)(a2 + 8);
  unint64_t v6 = *(void *)(a2 + 16);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = *(void **)a2;
    uint64_t v10 = (uint64_t)v7 - *(void *)a2;
    unint64_t v11 = (v10 >> 4) + 1;
    if (v11 >> 60) {
      sub_19E13D694();
    }
    uint64_t v12 = v6 - (void)v9;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    BOOL v13 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
    if (!v13) {
      unint64_t v14 = v11;
    }
    if (v14 >> 60) {
      sub_19E13C418();
    }
    uint64_t v15 = 16 * v14;
    uint64_t v16 = (char *)operator new(16 * v14);
    float32x4_t v17 = &v16[16 * (v10 >> 4)];
    uint64_t v18 = &v16[v15];
    *(void *)float32x4_t v17 = v3;
    uint64_t v8 = v17 + 16;
    uint64_t v19 = &v16[v10];
    *((_DWORD *)v19 + 2) = v5;
    for (*((_DWORD *)v19 + 3) = v4; v7 != v9; *((void *)v17 + 1) = v7[1])
    {
      uint64_t v20 = *(v7 - 2);
      v7 -= 2;
      *((void *)v17 - 2) = v20;
      v17 -= 16;
    }
    *(void *)a2 = v17;
    *(void *)(a2 + 8) = v8;
    *(void *)(a2 + 16) = v18;
    if (v9) {
      operator delete(v9);
    }
  }
  else
  {
    *float32x4_t v7 = v3;
    uint64_t v8 = v7 + 2;
    *((_DWORD *)v7 + 2) = v5;
    *((_DWORD *)v7 + 3) = v4;
  }
  *(void *)(a2 + 8) = v8;
}

uint64_t sub_19E21C8F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(v2 - 16);
  *(void *)(a2 + 8) = v2 - 16;
  *(void *)(a1 + 128) = v3;
  uint64_t result = a1 + 128;
  *(void *)(result + 384) = result;
  return result;
}

uint64_t sub_19E21C910(uint64_t result)
{
  *(unsigned char *)(result + 42) = 1;
  return result;
}

uint64_t sub_19E21C91C(uint64_t result)
{
  *(unsigned char *)(result + 42) = 0;
  return result;
}

void sub_19E21C924(uint64_t a1)
{
  __p = operator new(0x20uLL);
  long long v3 = xmmword_19E351400;
  strcpy((char *)__p, "FullLayer, from allocAll");
  (*(void (**)(uint64_t, void **, void, float))(*(void *)a1 + 400))(a1, &__p, 0, -0.44);
  if (SHIBYTE(v3) < 0) {
    operator delete(__p);
  }
}

void sub_19E21C9F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E21CA0C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 56);
  if (v3 == v2)
  {
    uint64_t v2 = *(void *)(a1 + 56);
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      int v5 = *(void **)(v2 + 8 * v4);
      if (v5)
      {
        operator delete[](v5);
        uint64_t v2 = *(void *)(a1 + 48);
        uint64_t v3 = *(void *)(a1 + 56);
      }
      ++v4;
    }
    while (v4 < (v3 - v2) >> 3);
  }
  uint64_t v6 = *(void *)(a1 + 72);
  uint64_t v7 = *(void *)(a1 + 80);
  if (v7 != v6)
  {
    unint64_t v8 = 0;
    do
    {
      unint64_t v9 = *(void **)(v6 + 8 * v8);
      if (v9)
      {
        operator delete[](v9);
        uint64_t v6 = *(void *)(a1 + 72);
        uint64_t v7 = *(void *)(a1 + 80);
      }
      ++v8;
    }
    while (v8 < (v7 - v6) >> 3);
    *(void *)(a1 + 56) = *(void *)(a1 + 48);
    *(void *)(a1 + 80) = v6;
    uint64_t v11 = *(void *)(a1 + 240);
    uint64_t v10 = *(void *)(a1 + 248);
    if (v10 != v11) {
      goto LABEL_13;
    }
LABEL_18:
    uint64_t v11 = v10;
    goto LABEL_19;
  }
  *(void *)(a1 + 56) = v2;
  *(void *)(a1 + 80) = v7;
  uint64_t v11 = *(void *)(a1 + 240);
  uint64_t v10 = *(void *)(a1 + 248);
  if (v10 == v11) {
    goto LABEL_18;
  }
LABEL_13:
  unint64_t v12 = 0;
  do
  {
    BOOL v13 = *(void **)(v11 + 8 * v12);
    if (v13)
    {
      operator delete[](v13);
      uint64_t v11 = *(void *)(a1 + 240);
      uint64_t v10 = *(void *)(a1 + 248);
    }
    ++v12;
  }
  while (v12 < (v10 - v11) >> 3);
LABEL_19:
  *(void *)(a1 + 248) = v11;
  unint64_t v14 = *(void **)(a1 + 224);
  if (v14)
  {
    operator delete(v14);
    *(void *)(a1 + 224) = 0;
  }
  uint64_t v15 = *(void **)(a1 + 216);
  if (v15)
  {
    operator delete(v15);
    *(void *)(a1 + 216) = 0;
  }
  *(void *)(a1 + 272) = *(void *)(a1 + 264);
  *(void *)(a1 + 296) = *(void *)(a1 + 288);
  *(void *)(a1 + 392) = *(void *)(a1 + 384);
  uint64_t v17 = *(void *)(a1 + 360);
  uint64_t v16 = *(void *)(a1 + 368);
  if (v16 != v17)
  {
    uint64_t v18 = *(void *)(a1 + 368);
    do
    {
      uint64_t v20 = *(void **)(v18 - 24);
      v18 -= 24;
      uint64_t v19 = v20;
      if (v20)
      {
        *(void *)(v16 - 16) = v19;
        operator delete(v19);
      }
      uint64_t v16 = v18;
    }
    while (v18 != v17);
  }
  *(void *)(a1 + 368) = v17;
  if (!*(unsigned char *)(a1 + 116))
  {
    *(void *)(a1 + 320) = *(void *)(a1 + 312);
    *(void *)(a1 + 344) = *(void *)(a1 + 336);
  }
}

float sub_19E21CBA4(uint64_t a1, void *a2, float *a3, int a4)
{
  uint64_t v5 = *(unsigned int *)(a1 + 100);
  if ((int)v5 < 1)
  {
    uint64_t v10 = 0;
  }
  else
  {
    int v6 = 0;
    uint64_t v7 = 0;
    float v8 = 1.1755e-38;
    do
    {
      float v9 = *(float *)(*(void *)(*a2 + 8 * a4) + 4 * v7);
      if (v9 > v8) {
        int v6 = v7;
      }
      float v8 = fmaxf(v9, v8);
      ++v7;
    }
    while (v5 != v7);
    uint64_t v10 = v6;
  }
  float v11 = *(float *)(*(void *)(*(void *)(a1 + 288) + 8 * a4) + 4 * v10);
  if (v11 <= 1.0e-10)
  {
    float result = 99.0;
    *a3 = 99.0;
  }
  else
  {
    float result = -log2f(v11);
    *a3 = result;
  }
  return result;
}

float32_t sub_19E21CC58(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4, _DWORD *a5, float32x4_t a6)
{
  uint64_t v6 = *(void *)(a1 + 288);
  uint64_t v7 = *(unsigned int *)(a1 + 100);
  if ((int)v7 <= 0)
  {
    uint64_t v14 = *a2;
    uint64_t v15 = (float32x4_t **)(*a2 + 8 * a4);
    uint64_t v17 = *a3;
    if (a4 >= (unint64_t)((a3[1] - *a3) >> 3)) {
      return a6.f32[0];
    }
  }
  else
  {
    int v8 = 0;
    uint64_t v9 = 0;
    float v10 = 1.1755e-38;
    do
    {
      float v11 = *(float *)(*(void *)(v6 + 8 * a4) + 4 * v9);
      if (v11 > v10) {
        int v8 = v9;
      }
      float v10 = fmaxf(v11, v10);
      ++v9;
    }
    while (v7 != v9);
    int v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = *a2;
    uint64_t v15 = (float32x4_t **)(*a2 + 8 * a4);
    a6.i32[0] = 0x800000;
    do
    {
      float v16 = (*v15)->f32[v13];
      if (v16 > a6.f32[0]) {
        int v12 = v13;
      }
      a6.f32[0] = fmaxf(v16, a6.f32[0]);
      ++v13;
    }
    while (v7 != v13);
    if (v8 != v12) {
      ++*a5;
    }
    uint64_t v17 = *a3;
    if (a4 >= (unint64_t)((a3[1] - *a3) >> 3)) {
      return a6.f32[0];
    }
  }
  if (a4 < (unint64_t)((a2[1] - v14) >> 3) && a4 < (unint64_t)((*(void *)(a1 + 296) - v6) >> 3))
  {
    uint64_t v18 = *(unsigned int *)(a1 + 100);
    if ((int)v18 >= 1)
    {
      uint64_t v19 = *v15;
      uint64_t v20 = *(float32x4_t **)(v6 + 8 * a4);
      uint64_t v21 = *(float32x4_t **)(v17 + 8 * a4);
      if (v18 >= 8)
      {
        uint64_t v22 = 0;
        if ((unint64_t)((char *)v21 - (char *)v19) >= 0x20
          && (unint64_t)((char *)v21 - (char *)v20) >= 0x20)
        {
          uint64_t v22 = v18 & 0x7FFFFFF8;
          float v23 = v19 + 1;
          float v24 = v20 + 1;
          float v25 = v21 + 1;
          uint64_t v26 = v18 & 0xFFFFFFF8;
          do
          {
            a6 = vsubq_f32(v23[-1], v24[-1]);
            float32x4_t v27 = vsubq_f32(*v23, *v24);
            v25[-1] = a6;
            float32x4_t *v25 = v27;
            v23 += 2;
            v24 += 2;
            v25 += 2;
            v26 -= 8;
          }
          while (v26);
          if (v22 == v18) {
            return a6.f32[0];
          }
        }
      }
      else
      {
        uint64_t v22 = 0;
      }
      long long v28 = &v21->i32[v22];
      long long v29 = &v20->f32[v22];
      uint64_t v30 = &v19->f32[v22];
      uint64_t v31 = v18 - v22;
      do
      {
        float v32 = *v30++;
        float v33 = v32;
        float v34 = *v29++;
        a6.f32[0] = v33 - v34;
        *v28++ = a6.i32[0];
        --v31;
      }
      while (v31);
    }
  }
  return a6.f32[0];
}

void sub_19E21CDF0(uint64_t a1, uint64_t *a2, void *a3, int a4)
{
  if (((**(uint64_t (***)(uint64_t))a1)(a1) & 1) == 0)
  {
    sub_19E1D0E88((void **)(a1 + 416), (float32x4_t **)(*(void *)(a1 + 384) + 8 * a4), (const void **)(*a2 + 8 * a4), *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 408), v8);
    cblas_sgemv_NEWLAPACK();
    uint64_t v9 = *(void *)(a1 + 312);
    vDSP_Length v10 = *(int *)(a1 + 104);
    float __C = 50.0;
    LODWORD(__B[0]) = -1035468800;
    vDSP_vclip(*(const float **)(v9 + 8 * a4), 1, (const float *)__B, &__C, *(float **)(v9 + 8 * a4), 1, v10);
  }
  if (a3[1] == *a3 || *(int *)(a1 + 112) < 1 || !(**(unsigned int (***)(uint64_t))a1)(a1))
  {
    uint64_t v18 = *(void *)(a1 + 264) + 8 * a4;
    uint64_t v19 = a1 + 416;
    int v20 = *(_DWORD *)(a1 + 104);
    size_t v21 = *(int *)(a1 + 100);
    uint64_t v22 = *(void *)(a1 + 136);
    global_queue = dispatch_get_global_queue(0, 0);
    __B[0] = MEMORY[0x1E4F143A8];
    __B[1] = 0x40000000;
    __B[2] = sub_19E1C7E74;
    __B[3] = &unk_1E599D040;
    int v40 = v20;
    __B[4] = v22;
    __B[5] = v19;
    __B[6] = v18;
    dispatch_apply(v21, global_queue, __B);
    return;
  }
  uint64_t v11 = *a2;
  uint64_t v12 = *(void *)(a1 + 360) + 24 * a4;
  uint64_t v14 = *(unsigned char **)v12;
  uint64_t v13 = *(unsigned char **)(v12 + 8);
  size_t v15 = v13 - v14;
  if (v13 != v14)
  {
    if ((v15 & 0x8000000000000000) != 0) {
      sub_19E13D694();
    }
    float v16 = operator new(v13 - v14);
    memcpy(v16, v14, v15);
    uint64_t v17 = *(unsigned int *)(a1 + 100);
    if ((int)v17 < 1) {
      goto LABEL_20;
    }
    goto LABEL_13;
  }
  float v16 = 0;
  uint64_t v17 = *(unsigned int *)(a1 + 100);
  if ((int)v17 >= 1)
  {
LABEL_13:
    uint64_t v24 = 0;
    uint64_t v25 = *(void *)(v11 + 8 * a4);
    uint64_t v26 = *(void *)(*(void *)(a1 + 168) + 8 * *(int *)(a1 + 160));
    if (v17 < 8) {
      goto LABEL_18;
    }
    if ((unint64_t)(v26 - v25) < 0x20) {
      goto LABEL_18;
    }
    uint64_t v24 = v17 & 0x7FFFFFF8;
    float32x4_t v27 = (long long *)(v25 + 16);
    long long v28 = (_OWORD *)(v26 + 16);
    uint64_t v29 = v17 & 0xFFFFFFF8;
    do
    {
      long long v30 = *v27;
      *(v28 - 1) = *(v27 - 1);
      _OWORD *v28 = v30;
      v27 += 2;
      v28 += 2;
      v29 -= 8;
    }
    while (v29);
    if (v24 != v17)
    {
LABEL_18:
      uint64_t v31 = v17 - v24;
      uint64_t v32 = 4 * v24;
      float v33 = (_DWORD *)(v26 + 4 * v24);
      float v34 = (int *)(v25 + v32);
      do
      {
        int v35 = *v34++;
        *v33++ = v35;
        --v31;
      }
      while (v31);
    }
  }
LABEL_20:
  if (*(int *)(a1 + 156) >= 1)
  {
    uint64_t v36 = 0;
    uint64_t v37 = *(void *)(a1 + 192);
    do
    {
      *(_DWORD *)(*(void *)(v37 + 24 * *(int *)(a1 + 160)) + 4 * v36) = *((_DWORD *)v16 + v36);
      ++v36;
    }
    while (v36 < *(int *)(a1 + 156));
    ++*(_DWORD *)(a1 + 160);
    goto LABEL_25;
  }
  ++*(_DWORD *)(a1 + 160);
  if (v16) {
LABEL_25:
  }
    operator delete(v16);
}

void sub_19E21D120(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E21D13C(uint64_t a1, int a2)
{
  if (!*(unsigned char *)(a1 + 116))
  {
    if (!*(_DWORD *)(a1 + 112))
    {
      bzero(*(void **)(a1 + 136), 4 * *(int *)(a1 + 108));
      uint64_t v4 = *(void *)(a1 + 264);
      if (*(void *)(a1 + 272) == v4) {
        goto LABEL_7;
      }
      goto LABEL_5;
    }
    *(_DWORD *)(a1 + 160) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 264);
  if (*(void *)(a1 + 272) == v4) {
    goto LABEL_7;
  }
LABEL_5:
  unint64_t v5 = 0;
  do
  {
    bzero(*(void **)(v4 + 8 * v5++), 4 * *(int *)(a1 + 104));
    uint64_t v4 = *(void *)(a1 + 264);
  }
  while (v5 < (*(void *)(a1 + 272) - v4) >> 3);
LABEL_7:
  uint64_t v6 = *(void *)(a1 + 288);
  if (*(void *)(a1 + 296) != v6)
  {
    unint64_t v7 = 0;
    do
    {
      bzero(*(void **)(v6 + 8 * v7++), 4 * *(int *)(a1 + 100));
      uint64_t v6 = *(void *)(a1 + 288);
    }
    while (v7 < (*(void *)(a1 + 296) - v6) >> 3);
  }
  if (a2 >= 1 && !*(unsigned char *)(a1 + 116))
  {
    uint64_t v8 = 0;
    uint64_t v9 = 8 * a2 - 8;
LABEL_14:
    bzero(*(void **)(*(void *)(a1 + 312) + v8), 4 * *(int *)(a1 + 104));
    bzero(*(void **)(*(void *)(a1 + 336) + v8), 4 * *(int *)(a1 + 100));
    while (v9 != v8)
    {
      v8 += 8;
      if (!*(unsigned char *)(a1 + 116)) {
        goto LABEL_14;
      }
    }
  }
}

uint64_t sub_19E21D264(uint64_t a1)
{
  return *(unsigned int *)(a1 + 104);
}

uint64_t sub_19E21D26C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 100);
}

uint64_t sub_19E21D278(uint64_t a1)
{
  if (*(int *)(a1 + 112) < 1) {
    return (***(uint64_t (****)(void))(a1 + 424))();
  }
  else {
    return (*(uint64_t (**)(void))(**(void **)(a1 + 424) + 8))();
  }
}

void sub_19E21D2E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  if (*(int *)(a1 + 112) < 1)
  {
    bzero(*(void **)(a1 + 136), 4 * *(int *)(a1 + 108));
    BOOL v10 = __OFSUB__(a5, 1);
    int v9 = a5 - 1;
    if (v9 < 0 != v10) {
      return;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 160) = 0;
    int v9 = a5 - 1;
    if (a5 < 1) {
      return;
    }
  }
  unsigned int v11 = 0;
  do
  {
    if (*(unsigned char *)(a1 + 520)) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = v9;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 248))(a1, a4, a3, v12, 0xFFFFFFFFLL, 0xFFFFFFFFLL);
    --v9;
    ++v11;
  }
  while (v9 != -1);
}

void sub_19E21D3A8(uint64_t a1, void *a2, void *a3, int a4, uint64_t a5)
{
  unint64_t v7 = a3;
  if (a3[1] == *a3 || *(int *)(a1 + 112) < 1)
  {
    int v9 = 0;
    if (!a5) {
      goto LABEL_7;
    }
  }
  else
  {
    int v9 = (**(uint64_t (***)(uint64_t))a1)(a1);
    if (!a5) {
      goto LABEL_7;
    }
  }
  if (*(unsigned char *)(a1 + 520)) {
    sub_19E2F6320(34);
  }
LABEL_7:
  int v10 = a4 & 0xFFFFFF;
  unsigned int v11 = a5 != 0;
  if ((a4 & 0xFFFFFFu) > v11)
  {
    float v45 = v7;
    int v44 = a4 & 0xFFFFFF;
    while (1)
    {
      int v15 = *(unsigned char *)(a1 + 520) ? v10 + ~v11 : v11;
      uint64_t v16 = v15;
      int v17 = *(unsigned char *)(a1 + 42) ? 1 : v15;
      uint64_t v18 = ((*(unsigned char *)(a1 + 42) != 0) & v9) != 0 ? 1 : v15;
      uint64_t v19 = *(void *)(a1 + 264);
      if (!v9) {
        break;
      }
      bzero(*(void **)(v19 + 8 * v18), 4 * *(int *)(a1 + 104));
      *(_DWORD *)(*(void *)(*(void *)(a1 + 264) + 8 * v18) + 4 * **(int **)(*v7 + 24 * (int)v16)) = 1065353216;
      int v20 = *(unsigned __int8 *)(a1 + 40);
      if (*(unsigned char *)(a1 + 40)) {
        goto LABEL_24;
      }
LABEL_25:
      if (v9)
      {
        uint64_t v21 = *(void *)(a1 + 360);
        uint64_t v22 = *(char **)(v21 + 24 * v16);
        *(_DWORD *)uint64_t v22 = **(_DWORD **)(*v7 + 24 * v16);
        if (v20) {
          *((_DWORD *)v22 + 1) = *(_DWORD *)(a1 + 104) - 1;
        }
        uint64_t v23 = *(void *)(a1 + 384);
        uint64_t v24 = *(char **)(v21 + 24 * (int)v16 + 8);
        int64_t v25 = v24 - v22;
        if (v24 == v22)
        {
          uint64_t v26 = 0;
          float32x4_t v27 = 0;
        }
        else
        {
          if (v25 < 0) {
            sub_19E13D694();
          }
          uint64_t v26 = (int *)operator new(v24 - v22);
          float32x4_t v27 = &v26[v25 >> 2];
          memcpy(v26, v22, v25);
        }
        uint64_t v12 = v17;
        long long v28 = *(uint64_t **)(a1 + 512);
        uint64_t v29 = *(unsigned int *)(a1 + 100);
        uint64_t v30 = *(int *)(a1 + 104);
        if ((char *)v27 - (char *)v26 == 8)
        {
          if ((int)v29 >= 1)
          {
            uint64_t v32 = *v26;
            uint64_t v31 = v26[1];
            uint64_t v33 = 4 * v30;
            uint64_t v34 = *v28;
            int v35 = *(float **)(v23 + 8 * v17);
            do
            {
              *v35++ = *(float *)(v34 + 4 * v31) + *(float *)(v34 + 4 * v32);
              v34 += v33;
              --v29;
            }
            while (v29);
          }
        }
        else if ((int)v29 >= 1)
        {
          uint64_t v36 = *(_DWORD **)(v23 + 8 * v17);
          if (v27 != v26)
          {
            uint64_t v37 = 0;
            unint64_t v38 = v27 - v26;
            uint64_t v39 = *v28;
            if (v38 <= 1) {
              unint64_t v38 = 1;
            }
            unint64_t v7 = v45;
            int v10 = v44;
            do
            {
              v36[v37] = 0;
              float v40 = 0.0;
              uint64_t v41 = v26;
              unint64_t v42 = v38;
              do
              {
                uint64_t v43 = *v41++;
                float v40 = *(float *)(v39 + 4 * (v37 * v30 + v43)) + v40;
                *(float *)&v36[v37] = v40;
                --v42;
              }
              while (v42);
              ++v37;
            }
            while (v37 != v29);
LABEL_48:
            operator delete(v26);
            goto LABEL_10;
          }
          bzero(v36, 4 * v29);
        }
        unint64_t v7 = v45;
        int v10 = v44;
        if (v26) {
          goto LABEL_48;
        }
      }
      else
      {
        uint64_t v12 = v17;
        cblas_sgemv_NEWLAPACK();
      }
LABEL_10:
      uint64_t v13 = *(void *)(a1 + 384);
      vDSP_Length v14 = *(int *)(a1 + 100);
      float __C = 50.0;
      float __B = -50.0;
      vDSP_vclip(*(const float **)(v13 + 8 * v12), 1, &__B, &__C, *(float **)(v13 + 8 * v12), 1, v14);
      sub_19E1C7520((float **)(*(void *)(a1 + 288) + 8 * v16), (const float **)(*(void *)(a1 + 384) + 8 * v12), *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 408));
      if (++v11 == v10) {
        return;
      }
    }
    memmove(*(void **)(v19 + 8 * v18), *(const void **)(*a2 + 8 * v18), 4 * *(int *)(a1 + 96));
    int v20 = *(unsigned __int8 *)(a1 + 40);
    if (!*(unsigned char *)(a1 + 40)) {
      goto LABEL_25;
    }
LABEL_24:
    *(_DWORD *)(*(void *)(*(void *)(a1 + 264) + 8 * v18) + 4 * *(int *)(a1 + 104) - 4) = 1065353216;
    goto LABEL_25;
  }
}

void sub_19E21D768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E21D784(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  a1[520] = 1;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9458560, memory_order_acquire) & 1) == 0)
  {
    uint64_t v13 = a6;
    uint64_t v12 = a5;
    unsigned int v11 = a4;
    uint64_t v9 = a2;
    uint64_t v10 = a3;
    int v8 = __cxa_guard_acquire(&qword_1E9458560);
    a2 = v9;
    a3 = v10;
    a4 = v11;
    a5 = v12;
    a6 = v13;
    if (v8)
    {
      qword_1E9458548 = 0;
      unk_1E9458550 = 0;
      qword_1E9458558 = 0;
      __cxa_atexit((void (*)(void *))sub_19E142EEC, &qword_1E9458548, &dword_19E138000);
      __cxa_guard_release(&qword_1E9458560);
      a2 = v9;
      a3 = v10;
      a4 = v11;
      a5 = v12;
      a6 = v13;
    }
  }
  uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 304))(a1, a2, a3, a4, a5, a6, &qword_1E9458548);
  a1[520] = 0;
  return result;
}

uint64_t sub_19E21D87C(unsigned char *a1)
{
  a1[520] = 1;
  uint64_t result = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 296))(a1);
  a1[520] = 0;
  return result;
}

char *sub_19E21D8D4(uint64_t a1, void *lpsrc)
{
  if (*(_DWORD *)(a1 + 504) != 1) {
    sub_19E2F6320(1);
  }
  uint64_t result = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3F30, 0);
  if (!result) {
    __cxa_bad_cast();
  }
  *(void *)(a1 + 512) = result + 128;
  return result;
}

uint64_t sub_19E21D960(uint64_t a1, void *lpsrc, float a3)
{
  if (*(_DWORD *)(a1 + 504)) {
    sub_19E2F6320(1);
  }
  if (!__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3F30, 0))__cxa_bad_cast(); {
  sub_19E303188(a1 + 432);
  }
  unint64_t v5 = **(void (****)(float))(a1 + 424);
  if (*(_DWORD *)(a1 + 112))
  {
    v5[1](a3);
  }
  else
  {
    (*v5)(a3);
    uint64_t v6 = *(const float ***)(a1 + 512);
    vDSP_Length v7 = *(int *)(a1 + 108);
    float __C = 2.0;
    float __B = -2.0;
    vDSP_vclip(*v6, 1, &__B, &__C, (float *)*v6, 1, v7);
  }
  return sub_19E303190(a1 + 432);
}

_DWORD *sub_19E21DAB0(_DWORD *result)
{
  if (!result[30]) {
    return (_DWORD *)(*(uint64_t (**)(void))(*(void *)result + 392))();
  }
  return result;
}

float sub_19E21DAE8(uint64_t a1, uint64_t *a2, int a3)
{
  if (a3 < 1) {
    return 0.0;
  }
  uint64_t v3 = *(unsigned int *)(a1 + 100);
  uint64_t v4 = *(float ***)(a1 + 288);
  uint64_t v5 = a3;
  if ((int)v3 <= 0)
  {
    float v8 = 0.0;
    do
    {
      while (1)
      {
        float v14 = **v4;
        if (v14 <= 1.0e-10) {
          break;
        }
        float v8 = v8 - log2f(v14);
        ++v4;
        if (!--v5) {
          return v8;
        }
      }
      float v8 = v8 + 99.0;
      ++v4;
      --v5;
    }
    while (v5);
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a2;
    float v8 = 0.0;
    do
    {
      while (1)
      {
        int v9 = 0;
        uint64_t v10 = 0;
        float v11 = 1.1755e-38;
        do
        {
          float v12 = *(float *)(*(void *)(v7 + 8 * v6) + 4 * v10);
          if (v12 > v11) {
            int v9 = v10;
          }
          float v11 = fmaxf(v12, v11);
          ++v10;
        }
        while (v3 != v10);
        float v13 = v4[v6][v9];
        if (v13 <= 1.0e-10) {
          break;
        }
        float v8 = v8 - log2f(v13);
        if (++v6 == v5) {
          return v8;
        }
      }
      float v8 = v8 + 99.0;
      ++v6;
    }
    while (v6 != v5);
  }
  return v8;
}

void sub_19E21DC2C(void *a1)
{
  uint64_t v1 = sub_19E21EE80(a1);

  operator delete(v1);
}

uint64_t sub_19E21DC54(uint64_t a1)
{
  return a1 + 336;
}

float sub_19E21DC5C(uint64_t a1, int a2, int a3)
{
  return *(float *)(*(void *)(*(void *)(a1 + 288) + 8 * a2) + 4 * a3);
}

uint64_t sub_19E21DC6C(uint64_t result, uint64_t *a2, uint64_t *a3, int a4, int *a5)
{
  uint64_t v5 = (a4 - 1);
  if (a4 >= 1)
  {
    unint64_t v6 = *(unsigned int *)(result + 100);
    if ((int)v6 >= 1)
    {
      uint64_t v7 = *(void *)(result + 288);
      uint64_t v8 = *a2;
      uint64_t v9 = *a3;
      int v10 = *a5;
      do
      {
        if ((int)v6 >= 1)
        {
          int v12 = 0;
          uint64_t v13 = 0;
          float v14 = 1.1755e-38;
          do
          {
            float v15 = *(float *)(*(void *)(v7 + 8 * v5) + 4 * v13);
            if (v15 > v14) {
              int v12 = v13;
            }
            float v14 = fmaxf(v15, v14);
            ++v13;
          }
          while (v6 != v13);
          int v16 = 0;
          uint64_t v17 = 0;
          float v18 = 1.1755e-38;
          do
          {
            float v19 = *(float *)(*(void *)(v8 + 8 * v5) + 4 * v17);
            if (v19 > v18) {
              int v16 = v17;
            }
            float v18 = fmaxf(v19, v18);
            ++v17;
          }
          while (v6 != v17);
          if (v12 == v16)
          {
            unint64_t v6 = v6;
          }
          else
          {
            *a5 = ++v10;
            unint64_t v6 = *(unsigned int *)(result + 100);
            if ((int)v6 < 1) {
              continue;
            }
          }
          int v20 = *(float32x4_t **)(v8 + 8 * v5);
          uint64_t v21 = *(float32x4_t **)(v7 + 8 * v5);
          uint64_t v22 = *(float32x4_t **)(v9 + 8 * v5);
          if (v6 >= 8)
          {
            unint64_t v23 = 0;
            if ((unint64_t)((char *)v22 - (char *)v20) >= 0x20
              && (unint64_t)((char *)v22 - (char *)v21) >= 0x20)
            {
              unint64_t v23 = v6 & 0x7FFFFFF8;
              uint64_t v24 = v20 + 1;
              int64_t v25 = v21 + 1;
              uint64_t v26 = v22 + 1;
              uint64_t v27 = v6 & 0xFFFFFFF8;
              do
              {
                float32x4_t v28 = vsubq_f32(*v24, *v25);
                v26[-1] = vsubq_f32(v24[-1], v25[-1]);
                *uint64_t v26 = v28;
                v24 += 2;
                v25 += 2;
                v26 += 2;
                v27 -= 8;
              }
              while (v27);
              if (v23 == v6) {
                continue;
              }
            }
          }
          else
          {
            unint64_t v23 = 0;
          }
          uint64_t v29 = &v22->f32[v23];
          uint64_t v30 = &v21->f32[v23];
          uint64_t v31 = &v20->f32[v23];
          unint64_t v32 = v6 - v23;
          do
          {
            float v33 = *v31++;
            float v34 = v33;
            float v35 = *v30++;
            *v29++ = v34 - v35;
            --v32;
          }
          while (v32);
        }
      }
      while (v5-- > 0);
    }
  }
  return result;
}

void sub_19E21DDEC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 528);
  if (v2)
  {
    int v3 = *(unsigned __int8 *)(v2 + 376);
    if (*(unsigned char *)(a1 + 40)) {
      goto LABEL_3;
    }
  }
  else
  {
    int v3 = 0;
    if (*(unsigned char *)(a1 + 40))
    {
LABEL_3:
      int v4 = *(_DWORD *)(a1 + 96) + (v3 ^ 1);
      int v5 = *(_DWORD *)(a1 + 100) * v4;
      *(_DWORD *)(a1 + 104) = v4;
      *(_DWORD *)(a1 + 108) = v5;
      if (*(_DWORD *)(a1 + 504)) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  int v7 = *(_DWORD *)(a1 + 96);
  int v8 = *(_DWORD *)(a1 + 100) * v7;
  *(_DWORD *)(a1 + 104) = v7;
  *(_DWORD *)(a1 + 108) = v8;
  if (*(_DWORD *)(a1 + 504))
  {
LABEL_4:
    if (*(unsigned char *)(a1 + 116)) {
      goto LABEL_5;
    }
LABEL_15:
    operator new[]();
  }
LABEL_9:
  if (!*(unsigned char *)(a1 + 117))
  {
    if (!v2 || *(_DWORD *)(v2 + 40) != 1) {
      operator new[]();
    }
    *(void *)(a1 + 128) = *(void *)(v2 + 112);
  }
  *(void *)(a1 + 512) = a1 + 128;
  if (!*(unsigned char *)(a1 + 116)) {
    goto LABEL_15;
  }
LABEL_5:
  if (*(int *)(a1 + 112) < 1) {
    unsigned __int8 v6 = 0;
  }
  else {
    unsigned __int8 v6 = (**(uint64_t (***)(uint64_t))a1)(a1);
  }
  if (*(unsigned char *)(a1 + 42)) {
    int v9 = 2;
  }
  else {
    int v9 = dword_1E9457D98;
  }
  int v32 = v9;
  if (((*(unsigned char *)(a1 + 42) != 0) & v6) != 0) {
    int v10 = 2;
  }
  else {
    int v10 = dword_1E9457D98;
  }
  unint64_t v11 = v10;
  uint64_t v12 = *(void *)(a1 + 264);
  unint64_t v13 = (*(void *)(a1 + 272) - v12) >> 3;
  if (v11 <= v13)
  {
    if (v11 < v13) {
      *(void *)(a1 + 272) = v12 + 8 * v11;
    }
  }
  else
  {
    sub_19E1599BC((void **)(a1 + 264), v11 - v13);
  }
  uint64_t v14 = *(void *)(a1 + 384);
  unint64_t v15 = (*(void *)(a1 + 392) - v14) >> 3;
  if (v32 <= v15)
  {
    if (v32 < v15) {
      *(void *)(a1 + 392) = v14 + 8 * v32;
    }
  }
  else
  {
    sub_19E1599BC((void **)(a1 + 384), v32 - v15);
  }
  int v16 = dword_1E9457D98;
  uint64_t v17 = *(void *)(a1 + 288);
  unint64_t v18 = (*(void *)(a1 + 296) - v17) >> 3;
  if (dword_1E9457D98 <= v18)
  {
    if (dword_1E9457D98 < v18) {
      *(void *)(a1 + 296) = v17 + 8 * dword_1E9457D98;
    }
  }
  else
  {
    sub_19E1599BC((void **)(a1 + 288), dword_1E9457D98 - v18);
    int v16 = dword_1E9457D98;
  }
  if (!*(unsigned char *)(a1 + 116))
  {
    unint64_t v19 = v16;
    uint64_t v20 = *(void *)(a1 + 312);
    unint64_t v21 = (*(void *)(a1 + 320) - v20) >> 3;
    if (v16 <= v21)
    {
      if (v16 < v21) {
        *(void *)(a1 + 320) = v20 + 8 * v16;
      }
    }
    else
    {
      sub_19E1599BC((void **)(a1 + 312), v16 - v21);
      int v16 = dword_1E9457D98;
      unint64_t v19 = dword_1E9457D98;
    }
    uint64_t v22 = *(void *)(a1 + 336);
    unint64_t v23 = (*(void *)(a1 + 344) - v22) >> 3;
    if (v19 <= v23)
    {
      if (v19 < v23) {
        *(void *)(a1 + 344) = v22 + 8 * v19;
      }
    }
    else
    {
      sub_19E1599BC((void **)(a1 + 336), v19 - v23);
      int v16 = dword_1E9457D98;
    }
  }
  unint64_t v24 = v16;
  uint64_t v26 = *(void *)(a1 + 360);
  uint64_t v25 = *(void *)(a1 + 368);
  unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((v25 - v26) >> 3);
  if (v24 <= v27)
  {
    if (v24 < v27)
    {
      uint64_t v28 = v26 + 24 * (int)v24;
      if (v25 != v28)
      {
        uint64_t v29 = *(void *)(a1 + 368);
        do
        {
          uint64_t v31 = *(void **)(v29 - 24);
          v29 -= 24;
          uint64_t v30 = v31;
          if (v31)
          {
            *(void *)(v25 - 16) = v30;
            operator delete(v30);
          }
          uint64_t v25 = v29;
        }
        while (v29 != v28);
      }
      *(void *)(a1 + 368) = v28;
    }
  }
  else
  {
    sub_19E232360(a1 + 360, v24 - v27);
  }
  if ((int)v11 >= 1) {
    operator new[]();
  }
  if (v32 >= 1) {
    operator new[]();
  }
  if (dword_1E9457D98 >= 1)
  {
    if (!*(unsigned char *)(a1 + 116)) {
      operator new[]();
    }
    operator new[]();
  }
}

void sub_19E21EE6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_19E1C6038((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E21EE80(void *a1)
{
  *a1 = &unk_1EF0A7860;
  sub_19E21CA0C((uint64_t)a1);
  uint64_t v2 = a1[53];
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 80))(v2);
    a1[53] = 0;
  }
  sub_19E3030E8((uint64_t)(a1 + 54));
  int v3 = (void *)a1[48];
  if (v3)
  {
    a1[49] = v3;
    operator delete(v3);
  }
  uint64_t v4 = a1[45];
  if (v4)
  {
    uint64_t v5 = a1[46];
    unsigned __int8 v6 = (void *)a1[45];
    if (v5 != v4)
    {
      uint64_t v7 = a1[46];
      do
      {
        int v9 = *(void **)(v7 - 24);
        v7 -= 24;
        int v8 = v9;
        if (v9)
        {
          *(void *)(v5 - 16) = v8;
          operator delete(v8);
        }
        uint64_t v5 = v7;
      }
      while (v7 != v4);
      unsigned __int8 v6 = (void *)a1[45];
    }
    a1[46] = v4;
    operator delete(v6);
  }
  int v10 = (void *)a1[42];
  if (v10)
  {
    a1[43] = v10;
    operator delete(v10);
  }
  unint64_t v11 = (void *)a1[39];
  if (v11)
  {
    a1[40] = v11;
    operator delete(v11);
  }
  uint64_t v12 = (void *)a1[36];
  if (v12)
  {
    a1[37] = v12;
    operator delete(v12);
  }
  unint64_t v13 = (void *)a1[33];
  if (v13)
  {
    a1[34] = v13;
    operator delete(v13);
  }
  sub_19E1C6038(a1 + 18);
  uint64_t v14 = (void *)a1[9];
  if (v14)
  {
    a1[10] = v14;
    operator delete(v14);
  }
  unint64_t v15 = (void *)a1[6];
  if (v15)
  {
    a1[7] = v15;
    operator delete(v15);
  }
  *a1 = &unk_1EF0A50F8;
  int v16 = (void *)a1[1];
  if (v16)
  {
    a1[2] = v16;
    operator delete(v16);
  }
  return a1;
}

uint64_t sub_19E21EFF4(uint64_t a1, int a2, int a3, int a4, int a5, char a6, char a7, char a8, uint64_t a9)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF0A5448;
  *(_DWORD *)(a1 + 44) = a2;
  *(_DWORD *)(a1 + 48) = a3;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  sub_19E3030A0(a1 + 296);
  *(_DWORD *)(a1 + 368) = a5;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 376) = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 192))(a1);
  *(unsigned char *)(a1 + 232) = 0;
  *(unsigned char *)(a1 + 41) = 0;
  *(_DWORD *)(a1 + 208) = a4;
  *(void *)(a1 + 240) = a9;
  *(unsigned char *)(a1 + 40) = a8;
  *(unsigned char *)(a1 + 60) = a6;
  *(unsigned char *)(a1 + 61) = a7;
  __p = operator new(0x20uLL);
  long long v17 = xmmword_19E351410;
  strcpy((char *)__p, "RecurrentLayer from Constructor");
  (*(void (**)(uint64_t, void **, void, float))(*(void *)a1 + 392))(a1, &__p, 0, -0.44);
  if (SHIBYTE(v17) < 0) {
    operator delete(__p);
  }
  return a1;
}

void sub_19E21F1A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_19E3030E8(v17);
  uint64_t v20 = (void *)v15[34];
  if (v20)
  {
    v15[35] = v20;
    operator delete(v20);
    unint64_t v21 = *v18;
    if (!*v18)
    {
LABEL_5:
      uint64_t v22 = (void *)v15[23];
      if (!v22) {
        goto LABEL_6;
      }
      goto LABEL_14;
    }
  }
  else
  {
    unint64_t v21 = *v18;
    if (!*v18) {
      goto LABEL_5;
    }
  }
  v15[32] = v21;
  operator delete(v21);
  uint64_t v22 = (void *)v15[23];
  if (!v22)
  {
LABEL_6:
    unint64_t v23 = (void *)v15[20];
    if (!v23) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  v15[24] = v22;
  operator delete(v22);
  unint64_t v23 = (void *)v15[20];
  if (!v23)
  {
LABEL_7:
    unint64_t v24 = (void *)v15[17];
    if (!v24) {
      goto LABEL_8;
    }
    goto LABEL_16;
  }
LABEL_15:
  v15[21] = v23;
  operator delete(v23);
  unint64_t v24 = (void *)v15[17];
  if (!v24)
  {
LABEL_8:
    uint64_t v25 = (void *)v15[14];
    if (!v25) {
      goto LABEL_9;
    }
    goto LABEL_17;
  }
LABEL_16:
  v15[18] = v24;
  operator delete(v24);
  uint64_t v25 = (void *)v15[14];
  if (!v25)
  {
LABEL_9:
    uint64_t v26 = (void *)v15[11];
    if (!v26) {
      goto LABEL_10;
    }
    goto LABEL_18;
  }
LABEL_17:
  v15[15] = v25;
  operator delete(v25);
  uint64_t v26 = (void *)v15[11];
  if (!v26)
  {
LABEL_10:
    void *v15 = v16;
    unint64_t v27 = (void *)v15[1];
    if (!v27) {
      goto LABEL_11;
    }
    goto LABEL_19;
  }
LABEL_18:
  v15[12] = v26;
  operator delete(v26);
  void *v15 = v16;
  unint64_t v27 = (void *)v15[1];
  if (!v27) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_19:
  v15[2] = v27;
  operator delete(v27);
  _Unwind_Resume(a1);
}

void sub_19E21F2A8()
{
}

uint64_t sub_19E21F2BC(uint64_t a1)
{
  return a1 + 88;
}

uint64_t sub_19E21F2C4(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_19E21F2CC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 376))();
}

uint64_t sub_19E21F2F8(uint64_t a1)
{
  return a1 + 136;
}

uint64_t sub_19E21F300()
{
  return 0;
}

unsigned char *sub_19E21F308(uint64_t a1, uint64_t a2, int *a3, int a4)
{
  if (!a2) {
LABEL_17:
  }
    sub_19E2F6320(3);
  int v6 = *(_DWORD *)(a2 + 72);
  uint64_t v7 = *(void *)a2;
  int v8 = (int *)(*(void *)a2 + v6);
  unint64_t v9 = *(void *)a2 + *(void *)(a2 + 8) - 4;
  if ((unint64_t)v8 > v9)
  {
    int v10 = 0;
    unint64_t v11 = (int *)(v7 + v6);
    if ((unint64_t)v11 <= v9) {
      goto LABEL_4;
    }
LABEL_7:
    int v12 = 0;
    if (a4 < 1) {
      goto LABEL_12;
    }
    goto LABEL_8;
  }
  int v10 = *v8;
  v6 += 4;
  *(_DWORD *)(a2 + 72) = v6;
  unint64_t v11 = (int *)(v7 + v6);
  if ((unint64_t)v11 > v9) {
    goto LABEL_7;
  }
LABEL_4:
  int v12 = *v11;
  v6 += 4;
  *(_DWORD *)(a2 + 72) = v6;
  if (a4 < 1) {
    goto LABEL_12;
  }
LABEL_8:
  unint64_t v13 = (int *)(v7 + v6);
  if ((unint64_t)v13 <= v9)
  {
    int v14 = *v13;
    *(_DWORD *)(a2 + 72) = v6 + 4;
  }
  else
  {
    int v14 = 0;
  }
  *(_DWORD *)(a1 + 208) = v14;
LABEL_12:
  if (*(_DWORD *)(a1 + 48) != v10 || *(_DWORD *)(a1 + 52) != v12) {
    goto LABEL_17;
  }
  unint64_t v15 = *(unsigned char **)(a1 + 376);
  int v16 = *a3;
  int v17 = *(unsigned __int8 *)(a1 + 61);
  int v18 = sub_19E2F62F0();
  int v19 = *(_DWORD *)(a1 + 48);
  int v20 = *(_DWORD *)(a1 + 52);

  return sub_19E1C632C(v15, (uint64_t *)a2, v16, v17, v18, v19, v20);
}

uint64_t sub_19E21F430(uint64_t a1, FILE *__stream, int *a3, int a4, unsigned int a5)
{
  if (!__stream) {
    sub_19E2F6320(3);
  }
  int v10 = *(_DWORD *)(a1 + 52);
  sub_19E2F6788(__stream, a3, *(_DWORD *)(a1 + 48));
  sub_19E2F6788(__stream, a3, v10);
  if (a4 >= 1) {
    sub_19E2F6788(__stream, a3, *(_DWORD *)(a1 + 208));
  }
  uint64_t v11 = *(void *)(a1 + 376);
  int v12 = sub_19E2F62F0();

  return sub_19E218654(v11, __stream, a3, 3, v12, a5);
}

float32_t sub_19E21F4EC(uint64_t a1, void *lpsrc, const void *a3)
{
  if (lpsrc)
  {
    uint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3C70, 0);
    if (a3) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v5 = 0;
    if (a3)
    {
LABEL_3:
      uint64_t v7 = __dynamic_cast(a3, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3C70, 0);
      uint64_t v8 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 48));
      if ((int)v8 < 1) {
        return v6.f32[0];
      }
      goto LABEL_7;
    }
  }
  uint64_t v7 = 0;
  uint64_t v8 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 48));
  if ((int)v8 < 1) {
    return v6.f32[0];
  }
LABEL_7:
  unint64_t v9 = (float32x4_t *)v7[8];
  int v10 = (float32x4_t *)v5[8];
  uint64_t v11 = **(float32x4_t ***)(a1 + 376);
  if (v8 < 8)
  {
    uint64_t v12 = 0;
LABEL_14:
    uint64_t v18 = v8 - v12;
    uint64_t v19 = v12;
    int v20 = (__int32 *)((char *)v11 + v19 * 4);
    unint64_t v21 = &v10->f32[v19];
    uint64_t v22 = &v9->f32[v19];
    do
    {
      float v23 = *v22++;
      float v24 = v23;
      float v25 = *v21++;
      v6.f32[0] = v24 - v25;
      *v20++ = v6.i32[0];
      --v18;
    }
    while (v18);
    return v6.f32[0];
  }
  uint64_t v12 = 0;
  if ((unint64_t)((char *)v11 - (char *)v9) < 0x20) {
    goto LABEL_14;
  }
  if ((unint64_t)((char *)v11 - (char *)v10) < 0x20) {
    goto LABEL_14;
  }
  uint64_t v12 = v8 & 0x7FFFFFF8;
  unint64_t v13 = v9 + 1;
  int v14 = v10 + 1;
  unint64_t v15 = v11 + 1;
  uint64_t v16 = v8 & 0xFFFFFFF8;
  do
  {
    float32x4_t v6 = vsubq_f32(v13[-1], v14[-1]);
    float32x4_t v17 = vsubq_f32(*v13, *v14);
    v15[-1] = v6;
    float32x4_t *v15 = v17;
    v13 += 2;
    v14 += 2;
    v15 += 2;
    v16 -= 8;
  }
  while (v16);
  if (v12 != v8) {
    goto LABEL_14;
  }
  return v6.f32[0];
}

void sub_19E21F68C(int a1, void *lpsrc, const void *a3)
{
  if (lpsrc) {
    __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3C70, 0);
  }
  if (a3)
  {
    __dynamic_cast(a3, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3C70, 0);
  }
}

void sub_19E21F758(uint64_t a1, void *lpsrc)
{
  int v3 = (const float **)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3C70, 0);
  uint64_t v4 = *(const float ***)(a1 + 376);
  vDSP_Length v5 = *(int *)(a1 + 52) * (uint64_t)*(int *)(a1 + 48);
  float __B = 1.0;
  vDSP_vsma(v3[8], 1, &__B, *v4, 1, (float *)*v4, 1, v5);
}

void sub_19E21F808()
{
}

void sub_19E21F980(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_19E21F994(uint64_t a1, uint64_t *a2, int a3, int *a4)
{
  uint64_t v5 = *(int *)(a1 + 48);
  uint64_t v6 = *a2;
  *(_DWORD *)(v6 + 16 * *a4) = v5;
  uint64_t result = memmove(**(void ***)(v6 + 16 * *a4 + 8), *(const void **)(*(void *)(a1 + 112) + 8 * a3), 4 * v5);
  ++*a4;
  return result;
}

void *sub_19E21F9F8(uint64_t a1, void *a2, int a3, int *a4)
{
  uint64_t v4 = *(void *)(a1 + 112);
  uint64_t v5 = *a4;
  *a4 = v5 + 1;
  return memmove(*(void **)(v4 + 8 * a3), **(const void ***)(*a2 + 16 * v5 + 8), 4 * *(int *)(a1 + 48));
}

void sub_19E21FA2C(uint64_t a1, void *a2, int *a3)
{
  uint64_t v4 = (int *)(*a2 + 16 * *a3);
  bzero(**((void ***)v4 + 1), 4 * *v4);
  ++*a3;
}

void sub_19E21FA7C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = **(void **)(a1 + 376);
  int v5 = *(_DWORD *)(a1 + 48);
  int v4 = *(_DWORD *)(a1 + 52);
  uint64_t v7 = *(void **)(a2 + 8);
  unint64_t v6 = *(void *)(a2 + 16);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = *(void **)a2;
    uint64_t v10 = (uint64_t)v7 - *(void *)a2;
    unint64_t v11 = (v10 >> 4) + 1;
    if (v11 >> 60) {
      sub_19E13D694();
    }
    uint64_t v12 = v6 - (void)v9;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    BOOL v13 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
    if (!v13) {
      unint64_t v14 = v11;
    }
    if (v14 >> 60) {
      sub_19E13C418();
    }
    uint64_t v15 = 16 * v14;
    uint64_t v16 = (char *)operator new(16 * v14);
    float32x4_t v17 = &v16[16 * (v10 >> 4)];
    uint64_t v18 = &v16[v15];
    *(void *)float32x4_t v17 = v3;
    uint64_t v8 = v17 + 16;
    uint64_t v19 = &v16[v10];
    *((_DWORD *)v19 + 2) = v5;
    for (*((_DWORD *)v19 + 3) = v4; v7 != v9; *((void *)v17 + 1) = v7[1])
    {
      uint64_t v20 = *(v7 - 2);
      v7 -= 2;
      *((void *)v17 - 2) = v20;
      v17 -= 16;
    }
    *(void *)a2 = v17;
    *(void *)(a2 + 8) = v8;
    *(void *)(a2 + 16) = v18;
    if (v9) {
      operator delete(v9);
    }
  }
  else
  {
    *uint64_t v7 = v3;
    uint64_t v8 = v7 + 2;
    *((_DWORD *)v7 + 2) = v5;
    *((_DWORD *)v7 + 3) = v4;
  }
  *(void *)(a2 + 8) = v8;
}

uint64_t sub_19E21FB8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(v2 - 16);
  *(void *)(a2 + 8) = v2 - 16;
  *(void *)(a1 + 64) = v3;
  uint64_t result = a1 + 64;
  *(void *)(result + 312) = result;
  return result;
}

uint64_t sub_19E21FBA4(uint64_t result)
{
  *(unsigned char *)(result + 42) = 1;
  return result;
}

uint64_t sub_19E21FBB0(uint64_t result)
{
  *(unsigned char *)(result + 42) = 0;
  return result;
}

void sub_19E21FBB8(uint64_t a1)
{
  __p = operator new(0x20uLL);
  long long v3 = xmmword_19E3513E0;
  strcpy((char *)__p, "RecurrentLayer from allocAll");
  (*(void (**)(uint64_t, void **, void, float))(*(void *)a1 + 392))(a1, &__p, 0, -0.44);
  if (SHIBYTE(v3) < 0) {
    operator delete(__p);
  }
}

void sub_19E21FC84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E21FCA0(void *a1)
{
  uint64_t v2 = a1[31];
  uint64_t v3 = a1[32];
  if (v3 == v2)
  {
    uint64_t v2 = a1[32];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      int v5 = *(void **)(v2 + 8 * v4);
      if (v5)
      {
        operator delete[](v5);
        uint64_t v2 = a1[31];
        uint64_t v3 = a1[32];
      }
      ++v4;
    }
    while (v4 < (v3 - v2) >> 3);
  }
  uint64_t v6 = a1[34];
  uint64_t v7 = a1[35];
  if (v7 == v6)
  {
    a1[32] = v2;
    a1[35] = v7;
  }
  else
  {
    unint64_t v8 = 0;
    do
    {
      unint64_t v9 = *(void **)(v6 + 8 * v8);
      if (v9)
      {
        operator delete[](v9);
        uint64_t v6 = a1[34];
        uint64_t v7 = a1[35];
      }
      ++v8;
    }
    while (v8 < (v7 - v6) >> 3);
    a1[32] = a1[31];
    a1[35] = v6;
  }
}

uint64_t sub_19E21FD54(uint64_t a1)
{
  return *(_DWORD *)(a1 + 44) + *(unsigned __int8 *)(a1 + 40);
}

uint64_t sub_19E21FD64(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

void sub_19E21FD70(uint64_t a1, float a2)
{
  vDSP_Length v2 = *(int *)(a1 + 56);
  float __B = a2;
  vDSP_vsma(*(const float **)(a1 + 80), 1, &__B, *(const float **)(a1 + 64), 1, *(float **)(a1 + 64), 1, v2);
}

void sub_19E21FDB8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, int a5)
{
  char v8 = (**(uint64_t (***)(uint64_t))a1)(a1);
  int v10 = a5 - 1;
  if (a5 >= 1 && (v8 & 1) == 0)
  {
    int v11 = 0;
    do
    {
      if (*(unsigned char *)(a1 + 232)) {
        int v12 = v11;
      }
      else {
        int v12 = v10;
      }
      uint64_t v13 = 8 * v12;
      sub_19E1D0E88((void **)(a1 + 216), (float32x4_t **)(*(void *)(a1 + 184) + v13), (const void **)(*a4 + v13), *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 208), v9);
      cblas_sgemv_NEWLAPACK();
      uint64_t v14 = *(void *)(a1 + 136);
      vDSP_Length v15 = *(int *)(a1 + 52);
      float __C = 50.0;
      LODWORD(__B[0]) = -1035468800;
      vDSP_vclip(*(const float **)(v14 + v13), 1, (const float *)__B, &__C, *(float **)(v14 + v13), 1, v15);
      --v10;
      ++v11;
    }
    while (v10 != -1);
  }
  bzero(*(void **)(a1 + 80), 4 * *(int *)(a1 + 56));
  if (a5 >= 1)
  {
    global_queue = dispatch_get_global_queue(0, 0);
    int v17 = 0;
    uint64_t v18 = MEMORY[0x1E4F143A8];
    do
    {
      --a5;
      if (*(unsigned char *)(a1 + 232)) {
        int v19 = v17;
      }
      else {
        int v19 = a5;
      }
      uint64_t v20 = 8 * v19;
      uint64_t v21 = *(void *)(a1 + 80);
      uint64_t v22 = *(void *)(a1 + 88) + v20;
      uint64_t v23 = *a4 + v20;
      int v24 = *(_DWORD *)(a1 + 52);
      size_t v25 = *(int *)(a1 + 48);
      __B[0] = v18;
      __B[1] = 0x40000000;
      __B[2] = sub_19E1C7E74;
      __B[3] = &unk_1E599D040;
      int v28 = v24;
      __B[4] = v21;
      __B[5] = v23;
      __B[6] = v22;
      dispatch_apply(v25, global_queue, __B);
      if (*(unsigned char *)(a1 + 40)) {
        *(_DWORD *)(*(void *)(*(void *)(a1 + 136) + 8 * v19) + 4 * *(int *)(a1 + 52) - 4) = 1065353216;
      }
      ++v17;
    }
    while (a5 > 0);
  }
}

void sub_19E21FFEC(uint64_t a1, void *a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v6 = *(void *)(a1 + 240);
  if (v6)
  {
    if (*(float *)(v6 + 468) <= 0.0) {
      float v7 = 50.0;
    }
    else {
      float v7 = *(float *)(v6 + 468);
    }
    if (*(unsigned char *)(v6 + 20) || *(_DWORD *)(v6 + 40) != 1)
    {
      BOOL v71 = 0;
      if (!a5) {
        goto LABEL_13;
      }
    }
    else
    {
      BOOL v71 = *(_DWORD *)(v6 + 44) == 1;
      if (!a5) {
        goto LABEL_13;
      }
    }
  }
  else
  {
    BOOL v71 = 1;
    float v7 = 50.0;
    if (!a5) {
      goto LABEL_13;
    }
  }
  if (*(unsigned char *)(a1 + 232)) {
    sub_19E2F6320(34);
  }
LABEL_13:
  int v8 = a4 & 0xFFFFFF;
  unsigned int v9 = a5 != 0;
  if ((a4 & 0xFFFFFFu) > v9)
  {
    int v10 = (float32x4_t **)(a1 + 216);
    do
    {
      if (*(unsigned char *)(a1 + 232)) {
        int v12 = v8 + ~v9;
      }
      else {
        int v12 = v9;
      }
      if (*(unsigned char *)(a1 + 232)) {
        int v13 = 1;
      }
      else {
        int v13 = -1;
      }
      if (*(unsigned char *)(a1 + 232)) {
        BOOL v14 = v12 >= v8 - 1;
      }
      else {
        BOOL v14 = v12 < 1;
      }
      uint64_t v15 = v12;
      bzero(*(void **)(*(void *)(a1 + 88) + 8 * v12), 4 * *(int *)(a1 + 52));
      uint64_t v16 = *(void *)(a1 + 88);
      uint64_t v17 = *(unsigned int *)(a1 + 44);
      uint64_t v18 = 8 * v12;
      if ((int)v17 >= 1)
      {
        uint64_t v19 = 0;
        uint64_t v20 = *(void *)(*a2 + 8 * v12);
        uint64_t v21 = *(void *)(v16 + 8 * v12);
        if (v17 < 8) {
          goto LABEL_31;
        }
        if ((unint64_t)(v21 - v20) < 0x20) {
          goto LABEL_31;
        }
        uint64_t v19 = v17 & 0x7FFFFFF8;
        uint64_t v22 = (long long *)(v20 + 16);
        uint64_t v23 = (_OWORD *)(v21 + 16);
        uint64_t v24 = v17 & 0xFFFFFFF8;
        do
        {
          long long v25 = *v22;
          *(v23 - 1) = *(v22 - 1);
          *uint64_t v23 = v25;
          v22 += 2;
          v23 += 2;
          v24 -= 8;
        }
        while (v24);
        if (v19 != v17)
        {
LABEL_31:
          uint64_t v26 = v17 - v19;
          uint64_t v27 = 4 * v19;
          int v28 = (_DWORD *)(v21 + 4 * v19);
          uint64_t v29 = (int *)(v20 + v27);
          do
          {
            int v30 = *v29++;
            *v28++ = v30;
            --v26;
          }
          while (v26);
        }
      }
      int v31 = v12 + v13;
      if (!v71 || v14)
      {
        uint64_t v32 = *(void *)(v16 + 8 * v15);
      }
      else
      {
        uint64_t v33 = *(unsigned int *)(a1 + 48);
        uint64_t v32 = *(void *)(v16 + 8 * v15);
        if ((int)v33 >= 1)
        {
          uint64_t v34 = *(void *)(*(void *)(a1 + 112) + 8 * v31);
          if (v33 >= 8 && (unint64_t)(4 * (int)v17 + v32 - v34) >= 0x20)
          {
            uint64_t v35 = v33 & 0x7FFFFFF8;
            uint64_t v66 = (long long *)(v34 + 16);
            uint64_t v67 = (_OWORD *)(v32 + 4 * (int)v17 + 16);
            uint64_t v68 = v33 & 0xFFFFFFF8;
            do
            {
              long long v69 = *v66;
              *(v67 - 1) = *(v66 - 1);
              *uint64_t v67 = v69;
              v66 += 2;
              v67 += 2;
              v68 -= 8;
            }
            while (v68);
            if (v35 == v33) {
              goto LABEL_41;
            }
          }
          else
          {
            uint64_t v35 = 0;
          }
          uint64_t v36 = v33 - v35;
          uint64_t v37 = 4 * (v35 + (int)v17);
          unint64_t v38 = (int *)(v34 + 4 * v35);
          do
          {
            int v39 = *v38++;
            *(_DWORD *)(v32 + v37) = v39;
            v37 += 4;
            --v36;
          }
          while (v36);
        }
      }
LABEL_41:
      if (*(unsigned char *)(a1 + 40)) {
        *(_DWORD *)(v32 + 4 * *(int *)(a1 + 52) - 4) = 1065353216;
      }
      cblas_sgemv_NEWLAPACK();
      if (!v71 && !v14) {
        cblas_sgemv_NEWLAPACK();
      }
      uint64_t v40 = *(void *)(a1 + 240);
      if (v40 && *(unsigned char *)(v40 + 244))
      {
        uint64_t v41 = *(float32x4_t ***)(a1 + 392);
        uint64_t v42 = *(int *)(a1 + 48);
        int v43 = (int)v42 / 8;
        if ((int)v42 >= 8)
        {
          int v44 = *v10;
          float v45 = *v41;
          int v46 = (int)v42 / 8;
          do
          {
            float32x4_t v47 = *v45;
            float32x4_t v48 = v45[1];
            v45 += 2;
            float32x4_t v49 = vaddq_f32(v44[1], v48);
            *int v44 = vaddq_f32(*v44, v47);
            v44[1] = v49;
            v44 += 2;
            --v46;
          }
          while (v46);
        }
        int v50 = 8 * v43;
        if (8 * v43 < (int)v42)
        {
          float32x4_t v51 = *v41;
          float v52 = *v10;
          unint64_t v53 = v50;
          unint64_t v54 = v42 - v50;
          if (v54 < 8) {
            goto LABEL_57;
          }
          unint64_t v55 = (unint64_t)&v52[v50 / 4u];
          unint64_t v56 = (unint64_t)&v51[v50 / 4u];
          if (v55 < (unint64_t)v51->u64 + 4 * v42 && v56 < (unint64_t)v52->u64 + 4 * v42) {
            goto LABEL_57;
          }
          unint64_t v57 = v54 - (v42 & 7) + v50;
          uint64_t v58 = v50 + (unint64_t)(v42 & 7) - v42;
          uint64_t v59 = (float32x4_t *)(v56 + 16);
          uint64_t v60 = (float32x4_t *)(v55 + 16);
          do
          {
            float32x4_t v61 = vaddq_f32(*v60, *v59);
            v60[-1] = vaddq_f32(v60[-1], v59[-1]);
            *uint64_t v60 = v61;
            v59 += 2;
            v60 += 2;
            v58 += 8;
          }
          while (v58);
          unint64_t v53 = v57;
          if ((v42 & 7) != 0)
          {
LABEL_57:
            uint64_t v62 = v42 - v53;
            uint64_t v63 = &v52->f32[v53];
            float32x4_t v64 = &v51->f32[v53];
            do
            {
              float v65 = *v64++;
              *uint64_t v63 = *v63 + v65;
              ++v63;
              --v62;
            }
            while (v62);
          }
        }
      }
      vDSP_Length v11 = *(int *)(a1 + 48);
      float __C = v7;
      float __B = -v7;
      vDSP_vclip(*(const float **)(a1 + 216), 1, &__B, &__C, *(float **)(a1 + 216), 1, v11);
      memmove(*(void **)(*(void *)(a1 + 184) + 8 * v15), *(const void **)(a1 + 216), 4 * *(int *)(a1 + 48));
      sub_19E1C7520((float **)(*(void *)(a1 + 112) + v18), (const float **)(a1 + 216), *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 208));
      ++v9;
    }
    while (v9 != v8);
  }
}

char *sub_19E22048C(uint64_t a1, void *lpsrc)
{
  if (*(_DWORD *)(a1 + 368) != 1) {
    sub_19E2F6320(1);
  }
  uint64_t result = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3C70, 0);
  if (!result) {
    __cxa_bad_cast();
  }
  *(void *)(a1 + 376) = result + 64;
  return result;
}

uint64_t sub_19E220518(uint64_t a1, void *lpsrc, float a3)
{
  if (*(_DWORD *)(a1 + 368)) {
    sub_19E2F6320(1);
  }
  int v5 = (const float **)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3C70, 0);
  if (!v5) {
    __cxa_bad_cast();
  }
  uint64_t v6 = v5;
  sub_19E303188(a1 + 296);
  vDSP_Length v7 = *(int *)(a1 + 56);
  float __B = a3;
  vDSP_vsma(v6[10], 1, &__B, *(const float **)(a1 + 64), 1, *(float **)(a1 + 64), 1, v7);
  return sub_19E303190(a1 + 296);
}

uint64_t sub_19E2205F4(uint64_t result, uint64_t *a2, uint64_t *a3, int a4, int *a5)
{
  uint64_t v5 = (a4 - 1);
  if (a4 >= 1)
  {
    unint64_t v6 = *(unsigned int *)(result + 48);
    if ((int)v6 >= 1)
    {
      uint64_t v7 = *(void *)(result + 112);
      uint64_t v8 = *a2;
      uint64_t v9 = *a3;
      int v10 = *a5;
      do
      {
        if ((int)v6 >= 1)
        {
          int v12 = 0;
          uint64_t v13 = 0;
          float v14 = 1.1755e-38;
          do
          {
            float v15 = *(float *)(*(void *)(v7 + 8 * v5) + 4 * v13);
            if (v15 > v14) {
              int v12 = v13;
            }
            float v14 = fmaxf(v15, v14);
            ++v13;
          }
          while (v6 != v13);
          int v16 = 0;
          uint64_t v17 = 0;
          float v18 = 1.1755e-38;
          do
          {
            float v19 = *(float *)(*(void *)(v8 + 8 * v5) + 4 * v17);
            if (v19 > v18) {
              int v16 = v17;
            }
            float v18 = fmaxf(v19, v18);
            ++v17;
          }
          while (v6 != v17);
          if (v12 == v16)
          {
            unint64_t v6 = v6;
          }
          else
          {
            *a5 = ++v10;
            unint64_t v6 = *(unsigned int *)(result + 48);
            if ((int)v6 < 1) {
              continue;
            }
          }
          uint64_t v20 = *(float32x4_t **)(v8 + 8 * v5);
          uint64_t v21 = *(float32x4_t **)(v7 + 8 * v5);
          uint64_t v22 = *(float32x4_t **)(v9 + 8 * v5);
          if (v6 >= 8)
          {
            unint64_t v23 = 0;
            if ((unint64_t)((char *)v22 - (char *)v20) >= 0x20
              && (unint64_t)((char *)v22 - (char *)v21) >= 0x20)
            {
              unint64_t v23 = v6 & 0x7FFFFFF8;
              uint64_t v24 = v20 + 1;
              long long v25 = v21 + 1;
              uint64_t v26 = v22 + 1;
              uint64_t v27 = v6 & 0xFFFFFFF8;
              do
              {
                float32x4_t v28 = vsubq_f32(*v24, *v25);
                v26[-1] = vsubq_f32(v24[-1], v25[-1]);
                *uint64_t v26 = v28;
                v24 += 2;
                v25 += 2;
                v26 += 2;
                v27 -= 8;
              }
              while (v27);
              if (v23 == v6) {
                continue;
              }
            }
          }
          else
          {
            unint64_t v23 = 0;
          }
          uint64_t v29 = &v22->f32[v23];
          int v30 = &v21->f32[v23];
          int v31 = &v20->f32[v23];
          unint64_t v32 = v6 - v23;
          do
          {
            float v33 = *v31++;
            float v34 = v33;
            float v35 = *v30++;
            *v29++ = v34 - v35;
            --v32;
          }
          while (v32);
        }
      }
      while (v5-- > 0);
    }
  }
  return result;
}

float sub_19E220774(uint64_t a1, uint64_t *a2, int a3)
{
  if (a3 < 1) {
    return 0.0;
  }
  uint64_t v3 = *(unsigned int *)(a1 + 48);
  unint64_t v4 = *(float ***)(a1 + 112);
  uint64_t v5 = a3;
  if ((int)v3 <= 0)
  {
    float v8 = 0.0;
    do
    {
      while (1)
      {
        float v14 = **v4;
        if (v14 <= 1.0e-10) {
          break;
        }
        float v8 = v8 - log2f(v14);
        ++v4;
        if (!--v5) {
          return v8;
        }
      }
      float v8 = v8 + 99.0;
      ++v4;
      --v5;
    }
    while (v5);
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a2;
    float v8 = 0.0;
    do
    {
      while (1)
      {
        int v9 = 0;
        uint64_t v10 = 0;
        float v11 = 1.1755e-38;
        do
        {
          float v12 = *(float *)(*(void *)(v7 + 8 * v6) + 4 * v10);
          if (v12 > v11) {
            int v9 = v10;
          }
          float v11 = fmaxf(v12, v11);
          ++v10;
        }
        while (v3 != v10);
        float v13 = v4[v6][v9];
        if (v13 <= 1.0e-10) {
          break;
        }
        float v8 = v8 - log2f(v13);
        if (++v6 == v5) {
          return v8;
        }
      }
      float v8 = v8 + 99.0;
      ++v6;
    }
    while (v6 != v5);
  }
  return v8;
}

void sub_19E2208B8(void *a1)
{
  uint64_t v1 = sub_19E221804(a1);

  operator delete(v1);
}

uint64_t sub_19E2208E0(uint64_t a1)
{
  return a1 + 160;
}

float sub_19E2208E8(uint64_t a1, int a2, int a3)
{
  return *(float *)(*(void *)(*(void *)(a1 + 112) + 8 * a2) + 4 * a3);
}

void sub_19E2208F8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 240);
  if (v1)
  {
    if (*(unsigned char *)(v1 + 20) || *(_DWORD *)(v1 + 40) != 1)
    {
      BOOL v2 = 0;
      if (!*(unsigned char *)(a1 + 42)) {
        goto LABEL_11;
      }
    }
    else
    {
      BOOL v2 = *(_DWORD *)(v1 + 44) == 1;
      if (!*(unsigned char *)(a1 + 42))
      {
LABEL_11:
        int v3 = *(_DWORD *)(a1 + 48);
        int v4 = *(_DWORD *)(a1 + 44) + *(unsigned __int8 *)(a1 + 40);
        *(_DWORD *)(a1 + 52) = v4;
        if (!v2)
        {
LABEL_9:
          *(_DWORD *)(a1 + 56) = v3 * v4;
          operator new[]();
        }
LABEL_8:
        v4 += v3;
        *(_DWORD *)(a1 + 52) = v4;
        goto LABEL_9;
      }
    }
  }
  else
  {
    BOOL v2 = 1;
    if (!*(unsigned char *)(a1 + 42)) {
      goto LABEL_11;
    }
  }
  int v3 = *(_DWORD *)(a1 + 48);
  int v4 = *(_DWORD *)(a1 + 44) + *(unsigned __int8 *)(a1 + 40);
  *(_DWORD *)(a1 + 52) = v4;
  if (!v2) {
    goto LABEL_9;
  }
  goto LABEL_8;
}

void *sub_19E221804(void *a1)
{
  *a1 = &unk_1EF0A5448;
  uint64_t v2 = a1[31];
  uint64_t v3 = a1[32];
  if (v3 == v2)
  {
    uint64_t v2 = a1[32];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void **)(v2 + 8 * v4);
      if (v5)
      {
        operator delete[](v5);
        uint64_t v2 = a1[31];
        uint64_t v3 = a1[32];
      }
      ++v4;
    }
    while (v4 < (v3 - v2) >> 3);
  }
  uint64_t v6 = a1[34];
  uint64_t v7 = a1[35];
  if (v7 == v6)
  {
    a1[32] = v2;
    a1[35] = v7;
    sub_19E3030E8((uint64_t)(a1 + 37));
    uint64_t v10 = (void *)a1[34];
    if (v10)
    {
LABEL_13:
      a1[35] = v10;
      operator delete(v10);
    }
  }
  else
  {
    unint64_t v8 = 0;
    do
    {
      int v9 = *(void **)(v6 + 8 * v8);
      if (v9)
      {
        operator delete[](v9);
        uint64_t v6 = a1[34];
        uint64_t v7 = a1[35];
      }
      ++v8;
    }
    while (v8 < (v7 - v6) >> 3);
    a1[32] = a1[31];
    a1[35] = v6;
    sub_19E3030E8((uint64_t)(a1 + 37));
    uint64_t v10 = (void *)a1[34];
    if (v10) {
      goto LABEL_13;
    }
  }
  float v11 = (void *)a1[31];
  if (v11)
  {
    a1[32] = v11;
    operator delete(v11);
  }
  float v12 = (void *)a1[23];
  if (v12)
  {
    a1[24] = v12;
    operator delete(v12);
  }
  float v13 = (void *)a1[20];
  if (v13)
  {
    a1[21] = v13;
    operator delete(v13);
  }
  float v14 = (void *)a1[17];
  if (v14)
  {
    a1[18] = v14;
    operator delete(v14);
  }
  float v15 = (void *)a1[14];
  if (v15)
  {
    a1[15] = v15;
    operator delete(v15);
  }
  int v16 = (void *)a1[11];
  if (v16)
  {
    a1[12] = v16;
    operator delete(v16);
  }
  *a1 = &unk_1EF0A50F8;
  uint64_t v17 = (void *)a1[1];
  if (v17)
  {
    a1[2] = v17;
    operator delete(v17);
  }
  return a1;
}

uint64_t sub_19E221984(uint64_t a1, int a2, int a3, int a4, int a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v15 = sub_19E221CF8(a1, a5);
  *(void *)uint64_t v15 = &unk_1EF0A7050;
  *(_WORD *)(v15 + 41) = 0;
  *(_DWORD *)(v15 + 112) = 0;
  *(_DWORD *)(v15 + 408) = a4;
  *(void *)(v15 + 528) = a8;
  *(_DWORD *)(v15 + 120) = *(_DWORD *)(a6 + 68);
  if (a8) {
    a7 = *(unsigned char *)(a8 + 376);
  }
  *(unsigned char *)(a1 + 40) = a7;
  *(_DWORD *)(a1 + 96) = a2;
  *(_DWORD *)(a1 + 100) = a3;
  *(void *)(a1 + 104) = 0;
  *(_WORD *)(a1 + 116) = *(_WORD *)(a6 + 45);
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 528) = a8;
  if (a2 < 1 || a3 <= 0) {
    sub_19E2F6320(34);
  }
  char v19 = 7;
  strcpy(__p, "SoftMax");
  sub_19E21DDEC(a1);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a6 + 16);
  *(void *)(a1 + 424) = 0;
  if (!*(unsigned char *)(a1 + 116))
  {
    int v16 = *(_DWORD *)(a6 + 32);
    switch(v16)
    {
      case 2:
        operator new();
      case 1:
        operator new();
      case 0:
        operator new();
    }
  }
  return a1;
}

void sub_19E221C90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  operator delete(v15);
  sub_19E21EE80(v14);
  _Unwind_Resume(a1);
}

void sub_19E221CBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_19E21EE80(v17);
  _Unwind_Resume(a1);
}

uint64_t sub_19E221CF8(uint64_t a1, int a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF0A7860;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(unsigned char *)(a1 + 232) = 0;
  *(void *)(a1 + 416) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(void *)(a1 + 400) = 0;
  sub_19E3030A0(a1 + 432);
  *(_DWORD *)(a1 + 504) = a2;
  *(_WORD *)(a1 + 40) = 0;
  *(void *)(a1 + 424) = 0;
  *(unsigned char *)(a1 + 520) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 110) = 0;
  *(_DWORD *)(a1 + 408) = 1;
  *(void *)(a1 + 528) = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 192))(a1);
  return a1;
}

void sub_19E221E18(_Unwind_Exception *a1)
{
  uint64_t v6 = v4;
  sub_19E3030E8(v6);
  unint64_t v8 = *(void **)(v1 + 384);
  if (v8)
  {
    *(void *)(v1 + 392) = v8;
    operator delete(v8);
    sub_19E14315C((void **)(v1 + 360));
    int v9 = *(void **)(v1 + 336);
    if (!v9)
    {
LABEL_3:
      uint64_t v10 = *(void **)(v1 + 312);
      if (!v10) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else
  {
    sub_19E14315C((void **)(v1 + 360));
    int v9 = *(void **)(v1 + 336);
    if (!v9) {
      goto LABEL_3;
    }
  }
  *(void *)(v1 + 344) = v9;
  operator delete(v9);
  uint64_t v10 = *(void **)(v1 + 312);
  if (!v10)
  {
LABEL_4:
    float v11 = *(void **)(v1 + 288);
    if (!v11) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  *(void *)(v1 + 320) = v10;
  operator delete(v10);
  float v11 = *(void **)(v1 + 288);
  if (!v11)
  {
LABEL_5:
    float v12 = *(void **)(v1 + 264);
    if (!v12) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
LABEL_13:
  *(void *)(v1 + 296) = v11;
  operator delete(v11);
  float v12 = *(void **)(v1 + 264);
  if (!v12)
  {
LABEL_6:
    sub_19E1C6038(v3);
    float v13 = *(void **)(v1 + 72);
    if (!v13) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  *(void *)(v1 + 272) = v12;
  operator delete(v12);
  sub_19E1C6038(v3);
  float v13 = *(void **)(v1 + 72);
  if (!v13)
  {
LABEL_7:
    float v14 = *v5;
    if (!*v5) {
      goto LABEL_8;
    }
    goto LABEL_16;
  }
LABEL_15:
  *(void *)(v1 + 80) = v13;
  operator delete(v13);
  float v14 = *v5;
  if (!*v5)
  {
LABEL_8:
    *(void *)uint64_t v1 = v2;
    uint64_t v15 = *(void **)(v1 + 8);
    if (!v15) {
      goto LABEL_9;
    }
    goto LABEL_17;
  }
LABEL_16:
  *(void *)(v1 + 56) = v14;
  operator delete(v14);
  *(void *)uint64_t v1 = v2;
  uint64_t v15 = *(void **)(v1 + 8);
  if (!v15) {
LABEL_9:
  }
    _Unwind_Resume(a1);
LABEL_17:
  *(void *)(v1 + 16) = v15;
  operator delete(v15);
  _Unwind_Resume(a1);
}

void sub_19E221F24()
{
}

uint64_t sub_19E221F38(uint64_t a1)
{
  return a1 + 264;
}

uint64_t sub_19E221F40(uint64_t a1)
{
  return a1 + 288;
}

void sub_19E221F48(uint64_t a1)
{
  strcpy((char *)__p, "SoftMax, from allocAll");
  sub_19E21DDEC(a1);
}

void sub_19E221FC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E221FE0(uint64_t a1, void *a2, uint64_t a3, int a4, const void **a5)
{
  int v9 = *(unsigned __int8 *)(a1 + 42);
  uint64_t v10 = a4;
  int v11 = *(_DWORD *)(a1 + 100);
  uint64_t v12 = *(int *)(a1 + 96);
  float v13 = *(void **)(a1 + 512);
  vDSP_Length v14 = *(int *)(a1 + 104);
  uint64_t v15 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  memmove(*(void **)(*v15 + 8 * a4), *(const void **)(*a2 + 8 * a4), 4 * v12);
  if (*(unsigned char *)(a1 + 40)) {
    *(_DWORD *)(*(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1) + 8 * v10)
  }
              + 4 * v14
              - 4) = 1065353216;
  int v46 = v11;
  vDSP_Length __N = v11;
  uint64_t v17 = *a5;
  int v16 = a5[1];
  if (v9) {
    uint64_t v18 = 1;
  }
  else {
    uint64_t v18 = v10;
  }
  uint64_t v19 = *(void *)(a1 + 384);
  uint64_t v20 = *(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (v16 == v17)
  {
    cblas_sgemv_NEWLAPACK();
    uint64_t v41 = *(void *)(a1 + 384);
    float __C = 50.0;
    int __B = -1035468800;
    vDSP_vclip(*(const float **)(v41 + 8 * v18), 1, (const float *)&__B, &__C, *(float **)(v41 + 8 * v18), 1, __N);
    uint64_t v42 = *(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
    uint64_t v43 = *(void *)(a1 + 384);
    float __C = 0.0;
    int __B = v46;
    vvexpf(*(float **)(v42 + 8 * v10), *(const float **)(v43 + 8 * v18), &__B);
    vDSP_sve(*(const float **)(v42 + 8 * v10), 1, &__C, __B);
    if (__C <= 0.0) {
      float v44 = 0.001;
    }
    else {
      float v44 = __C + 0.001;
    }
    float v49 = v44;
    vDSP_vsdiv(*(const float **)(v42 + 8 * v10), 1, &v49, *(float **)(v42 + 8 * v10), 1, __B);
    uint64_t v45 = *(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
    float __C = 5.0;
    int __B = -1063256064;
    vDSP_vclip(*(const float **)(v45 + 8 * v10), 1, (const float *)&__B, &__C, *(float **)(v45 + 8 * v10), 1, __N);
  }
  else
  {
    uint64_t v47 = 4 * __N;
    bzero(*(void **)(v19 + 8 * v18), 4 * __N);
    uint64_t v21 = (int *)*a5;
    if (a5[1] != *a5)
    {
      unint64_t v22 = 0;
      do
      {
        vDSP_dotpr(*(const float **)(v20 + 8 * v10), 1, (const float *)(*v13 + 4 * v21[v22] * (int)v14), 1, (float *)(*(void *)(v19 + 8 * v18) + 4 * v21[v22]), v14);
        ++v22;
        uint64_t v21 = (int *)*a5;
      }
      while (v22 < ((unsigned char *)a5[1] - (unsigned char *)*a5) >> 2);
    }
    uint64_t v23 = *(void *)(a1 + 384);
    float __C = 50.0;
    int __B = -1035468800;
    vDSP_vclip(*(const float **)(v23 + 8 * v18), 1, (const float *)&__B, &__C, *(float **)(v23 + 8 * v18), 1, __N);
    uint64_t v24 = *(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
    uint64_t v25 = *(void *)(a1 + 384);
    uint64_t v27 = *a5;
    uint64_t v26 = a5[1];
    int64_t v28 = v26 - (unsigned char *)*a5;
    if (v26 == *a5)
    {
      bzero(*(void **)(v24 + 8 * v10), v47);
    }
    else
    {
      if (v28 < 0) {
        sub_19E13D694();
      }
      uint64_t v29 = (int *)operator new(v26 - (unsigned char *)*a5);
      memcpy(v29, v27, v28);
      bzero(*(void **)(v24 + 8 * v10), v47);
      uint64_t v30 = 0;
      uint64_t v31 = *(void *)(v25 + 8 * v18);
      unint64_t v32 = v28 >> 2;
      uint64_t v33 = *(void *)(v24 + 8 * v10);
      if (v32 <= 1) {
        uint64_t v34 = 1;
      }
      else {
        uint64_t v34 = v32;
      }
      float v35 = 0.0;
      do
      {
        uint64_t v36 = 4 * v29[v30];
        float v37 = expf(*(float *)(v31 + v36));
        *(float *)(v33 + v36) = v37;
        float v35 = v37 + v35;
        ++v30;
      }
      while (v34 != v30);
      uint64_t v38 = 0;
      float v39 = 1.0 / (float)(v35 + 0.001);
      if (v35 <= 0.0) {
        float v39 = 1000.0;
      }
      do
      {
        uint64_t v40 = 4 * v29[v38];
        *(float *)(v33 + v40) = *(float *)(v33 + v40) * v39;
        ++v38;
      }
      while (v34 != v38);
      operator delete(v29);
    }
  }
}

void sub_19E222448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E222464(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = result;
  if (a5 && *(unsigned char *)(result + 520)) {
    sub_19E2F6320(34);
  }
  int v11 = a4 & 0xFFFFFF;
  uint64_t v12 = a5 != 0;
  if ((a4 & 0xFFFFFFu) > v12)
  {
    do
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v10 + 224))(v10, a2, a3, v12, a7);
      uint64_t v12 = (v12 + 1);
    }
    while (v11 != v12);
  }
  return result;
}

void sub_19E222510(void *a1)
{
  uint64_t v1 = sub_19E21EE80(a1);

  operator delete(v1);
}

void sub_19E222538(uint64_t a1, int a2, int a3, _DWORD **a4, int a5, int a6, uint64_t a7, int a8, uint64_t a9, char a10)
{
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_1EF0A63C8;
  *(_DWORD *)(a1 + 44) = a2;
  *(_DWORD *)(a1 + 52) = a3;
  *(_DWORD *)(a1 + 56) = a6;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(unsigned char *)(a1 + 800) = 0;
  *(unsigned char *)(a1 + 920) = 0;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(unsigned char *)(a1 + 1040) = 0;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_DWORD *)(a1 + 728) = 0;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 836) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 956) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(void *)(a1 + 1112) = 0;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(void *)(a1 + 1184) = 0;
  *(_OWORD *)(a1 + 1168) = 0u;
  sub_19E3030A0(a1 + 1192);
  sub_19E3030A0(a1 + 1264);
  sub_19E3030A0(a1 + 1336);
  sub_19E3030A0(a1 + 1408);
  sub_19E3030A0(a1 + 1480);
  sub_19E3030A0(a1 + 1552);
  sub_19E3030A0(a1 + 1624);
  sub_19E3030A0(a1 + 1696);
  sub_19E3030A0(a1 + 1768);
  sub_19E3030A0(a1 + 1840);
  sub_19E3030A0(a1 + 1912);
  *(_DWORD *)(a1 + 1988) = a5;
  *(_OWORD *)(a1 + 1992) = 0u;
  *(_OWORD *)(a1 + 2008) = 0u;
  *(_OWORD *)(a1 + 2024) = 0u;
  (*(void (**)(uint64_t))(*(void *)a1 + 192))(a1);
  *(unsigned char *)(a1 + 2040) = 0;
  *(unsigned char *)(a1 + 41) = 0;
  *(void *)(a1 + 2048) = a9;
  if (a9)
  {
    int v15 = *(unsigned __int8 *)(a9 + 376);
    nullsub_171("GRU constructor");
    int v16 = v15 ^ 1;
    a8 = *(unsigned __int8 *)(*(void *)(a1 + 2048) + 376);
  }
  else
  {
    int v16 = 1;
  }
  *(unsigned char *)(a1 + 40) = a8;
  *(_WORD *)(a1 + 1984) = *(_WORD *)(a7 + 45);
  uint64_t v17 = *a4;
  *(_DWORD *)(a1 + 520) = **a4;
  *(_DWORD *)(a1 + 524) = v17[1];
  *(_DWORD *)(a1 + 528) = v17[2];
  if (!a8) {
    int v16 = 0;
  }
  *(_DWORD *)(a1 + 48) = v16 + *(_DWORD *)(a1 + 44);
  if (a10)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
    *(unsigned char *)(a1 + 2040) = 1;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a7 + 16);
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_OWORD *)(a1 + 1152) = 0u;
  strcpy((char *)operator new(0x20uLL), "GRU alloc, from constructor");
  sub_19E222BBC(a1);
}

void sub_19E222884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void **a19, void **a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
  {
    operator delete(__p);
    float v35 = (void *)v27[252];
    if (!v35)
    {
LABEL_3:
      uint64_t v36 = *v32;
      if (!*v32) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else
  {
    float v35 = (void *)v27[252];
    if (!v35) {
      goto LABEL_3;
    }
  }
  v27[253] = v35;
  operator delete(v35);
  uint64_t v36 = *v32;
  if (!*v32)
  {
LABEL_5:
    sub_19E3030E8(v33);
    sub_19E3030E8(v29);
    sub_19E3030E8(a9);
    sub_19E3030E8(a10);
    sub_19E3030E8(a11);
    sub_19E3030E8(a12);
    sub_19E3030E8(a13);
    sub_19E3030E8(a14);
    sub_19E3030E8(a15);
    sub_19E3030E8(a16);
    sub_19E3030E8(a17);
    sub_19E1C6038(v31);
    sub_19E1C6038(v30);
    sub_19E1C6038(a18);
    float v37 = (void *)v27[85];
    if (v37)
    {
      v27[86] = v37;
      operator delete(v37);
      uint64_t v38 = (void *)v27[82];
      if (!v38)
      {
LABEL_7:
        float v39 = (void *)v27[79];
        if (!v39) {
          goto LABEL_8;
        }
        goto LABEL_27;
      }
    }
    else
    {
      uint64_t v38 = (void *)v27[82];
      if (!v38) {
        goto LABEL_7;
      }
    }
    v27[83] = v38;
    operator delete(v38);
    float v39 = (void *)v27[79];
    if (!v39)
    {
LABEL_8:
      uint64_t v40 = (void *)v27[76];
      if (!v40) {
        goto LABEL_9;
      }
      goto LABEL_28;
    }
LABEL_27:
    v27[80] = v39;
    operator delete(v39);
    uint64_t v40 = (void *)v27[76];
    if (!v40)
    {
LABEL_9:
      uint64_t v41 = (void *)v27[73];
      if (!v41) {
        goto LABEL_10;
      }
      goto LABEL_29;
    }
LABEL_28:
    v27[77] = v40;
    operator delete(v40);
    uint64_t v41 = (void *)v27[73];
    if (!v41)
    {
LABEL_10:
      uint64_t v42 = (void *)v27[70];
      if (!v42) {
        goto LABEL_11;
      }
      goto LABEL_30;
    }
LABEL_29:
    v27[74] = v41;
    operator delete(v41);
    uint64_t v42 = (void *)v27[70];
    if (!v42)
    {
LABEL_11:
      uint64_t v43 = (void *)v27[62];
      if (!v43) {
        goto LABEL_12;
      }
      goto LABEL_31;
    }
LABEL_30:
    v27[71] = v42;
    operator delete(v42);
    uint64_t v43 = (void *)v27[62];
    if (!v43)
    {
LABEL_12:
      float v44 = (void *)v27[59];
      if (!v44) {
        goto LABEL_13;
      }
      goto LABEL_32;
    }
LABEL_31:
    v27[63] = v43;
    operator delete(v43);
    float v44 = (void *)v27[59];
    if (!v44)
    {
LABEL_13:
      uint64_t v45 = (void *)v27[56];
      if (!v45) {
        goto LABEL_14;
      }
      goto LABEL_33;
    }
LABEL_32:
    v27[60] = v44;
    operator delete(v44);
    uint64_t v45 = (void *)v27[56];
    if (!v45)
    {
LABEL_14:
      int v46 = (void *)v27[53];
      if (!v46) {
        goto LABEL_15;
      }
      goto LABEL_34;
    }
LABEL_33:
    v27[57] = v45;
    operator delete(v45);
    int v46 = (void *)v27[53];
    if (!v46)
    {
LABEL_15:
      uint64_t v47 = (void *)v27[50];
      if (!v47) {
        goto LABEL_16;
      }
      goto LABEL_35;
    }
LABEL_34:
    v27[54] = v46;
    operator delete(v46);
    uint64_t v47 = (void *)v27[50];
    if (!v47)
    {
LABEL_16:
      float32x4_t v48 = *v28;
      if (!*v28) {
        goto LABEL_17;
      }
      goto LABEL_36;
    }
LABEL_35:
    v27[51] = v47;
    operator delete(v47);
    float32x4_t v48 = *v28;
    if (!*v28)
    {
LABEL_17:
      sub_19E14315C(a19);
      float v49 = (void *)v27[23];
      if (!v49) {
        goto LABEL_18;
      }
      goto LABEL_37;
    }
LABEL_36:
    v27[48] = v48;
    operator delete(v48);
    sub_19E14315C(a19);
    float v49 = (void *)v27[23];
    if (!v49)
    {
LABEL_18:
      int v50 = (void *)v27[20];
      if (!v50) {
        goto LABEL_19;
      }
      goto LABEL_38;
    }
LABEL_37:
    v27[24] = v49;
    operator delete(v49);
    int v50 = (void *)v27[20];
    if (!v50)
    {
LABEL_19:
      float32x4_t v51 = (void *)v27[17];
      if (!v51) {
        goto LABEL_20;
      }
      goto LABEL_39;
    }
LABEL_38:
    v27[21] = v50;
    operator delete(v50);
    float32x4_t v51 = (void *)v27[17];
    if (!v51)
    {
LABEL_20:
      float v52 = (void *)v27[14];
      if (!v52) {
        goto LABEL_21;
      }
      goto LABEL_40;
    }
LABEL_39:
    v27[18] = v51;
    operator delete(v51);
    float v52 = (void *)v27[14];
    if (!v52)
    {
LABEL_21:
      unint64_t v53 = (void *)v27[11];
      if (!v53) {
        goto LABEL_22;
      }
      goto LABEL_41;
    }
LABEL_40:
    v27[15] = v52;
    operator delete(v52);
    unint64_t v53 = (void *)v27[11];
    if (!v53)
    {
LABEL_22:
      unint64_t v54 = *a20;
      if (!*a20) {
        goto LABEL_23;
      }
      goto LABEL_42;
    }
LABEL_41:
    v27[12] = v53;
    operator delete(v53);
    unint64_t v54 = *a20;
    if (!*a20)
    {
LABEL_23:
      void *v27 = a21;
      unint64_t v55 = (void *)v27[1];
      if (!v55) {
        goto LABEL_24;
      }
      goto LABEL_43;
    }
LABEL_42:
    v27[9] = v54;
    operator delete(v54);
    void *v27 = a21;
    unint64_t v55 = (void *)v27[1];
    if (!v55) {
LABEL_24:
    }
      _Unwind_Resume(a1);
LABEL_43:
    v27[2] = v55;
    operator delete(v55);
    _Unwind_Resume(a1);
  }
LABEL_4:
  v27[250] = v36;
  operator delete(v36);
  goto LABEL_5;
}

void sub_19E222BBC(uint64_t a1)
{
  unsigned int v1 = 3;
  unsigned int v2 = 6;
  if (*(unsigned char *)(a1 + 42))
  {
    if (*(_DWORD *)(a1 + 1988)) {
      goto LABEL_22;
    }
  }
  else
  {
    if (*(unsigned char *)(a1 + 2040)) {
      unsigned int v2 = 6;
    }
    else {
      unsigned int v2 = 0;
    }
    if (*(unsigned char *)(a1 + 2040)) {
      unsigned int v1 = 3;
    }
    else {
      unsigned int v1 = 0;
    }
    if (*(_DWORD *)(a1 + 1988)) {
      goto LABEL_22;
    }
  }
  uint64_t v3 = *(void *)(a1 + 2048);
  if (v3 && (int v4 = *(_DWORD *)(v3 + 40), v4 >= 1))
  {
    uint64_t v5 = (void *)(v3 + 8 * v2);
    if (v4 == 6)
    {
      *(void *)(a1 + 232) = v5[14];
      *(void *)(a1 + 240) = v5[15];
      *(void *)(a1 + 248) = v5[16];
    }
    else
    {
      if (v4 != 4) {
        sub_19E2F6320(45);
      }
      *(void *)(a1 + 232) = v5[14];
    }
    *(void *)(a1 + 256) = v5[17];
    *(void *)(a1 + 264) = v5[18];
    *(void *)(a1 + 272) = v5[19];
  }
  else if (!*(unsigned char *)(a1 + 1985))
  {
    operator new[]();
  }
  if (!*(unsigned char *)(a1 + 1985))
  {
    uint64_t v6 = *(void *)(a1 + 2048);
    if (v6)
    {
      if (!*(unsigned char *)(v6 + 244)) {
        operator new[]();
      }
      uint64_t v7 = (void *)(v6 + 8 * v1);
      *(void *)(a1 + 280) = v7[31];
      *(void *)(a1 + 288) = v7[32];
      *(void *)(a1 + 296) = v7[33];
    }
  }
  *(void *)(a1 + 304) = a1 + 232;
  *(void *)(a1 + 312) = a1 + 240;
  *(void *)(a1 + 320) = a1 + 248;
  *(void *)(a1 + 328) = a1 + 256;
  *(void *)(a1 + 336) = a1 + 264;
  *(void *)(a1 + 344) = a1 + 272;
  *(void *)(a1 + 352) = a1 + 280;
  *(void *)(a1 + 360) = a1 + 288;
  *(void *)(a1 + 368) = a1 + 296;
LABEL_22:
  operator new[]();
}

void sub_19E224EC4()
{
}

uint64_t sub_19E224ED8(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_19E224EE0(uint64_t a1)
{
  return a1 + 112;
}

void sub_19E224EE8()
{
}

uint64_t sub_19E224EFC(uint64_t a1)
{
  return a1 + 560;
}

uint64_t sub_19E224F04()
{
  return 0;
}

unsigned char *sub_19E224F0C(uint64_t a1, uint64_t a2, int *a3, int a4)
{
  if (!a2) {
LABEL_21:
  }
    sub_19E2F6320(3);
  int v7 = *(_DWORD *)(a2 + 72);
  uint64_t v8 = *(void *)a2;
  int v9 = (int *)(*(void *)a2 + v7);
  unint64_t v10 = *(void *)a2 + *(void *)(a2 + 8) - 4;
  if ((unint64_t)v9 <= v10)
  {
    int v11 = *v9;
    v7 += 4;
    *(_DWORD *)(a2 + 72) = v7;
    uint64_t v12 = (int *)(v8 + v7);
    if ((unint64_t)v12 <= v10)
    {
LABEL_4:
      int v13 = *v12;
      v7 += 4;
      *(_DWORD *)(a2 + 72) = v7;
      if (a4 < 1) {
        goto LABEL_16;
      }
LABEL_8:
      uint64_t v14 = v7;
      int v15 = (int *)(v8 + v7);
      if ((unint64_t)v15 <= v10)
      {
        int v19 = *v15;
        v7 += 4;
        *(_DWORD *)(a2 + 72) = v7;
        uint64_t v14 = v7;
        *(_DWORD *)(a1 + 520) = v19;
        uint64_t v20 = (int *)(v8 + v7);
        if ((unint64_t)v20 <= v10)
        {
          int v16 = *v20;
          v7 += 4;
          *(_DWORD *)(a2 + 72) = v7;
          *(_DWORD *)(a1 + 524) = v16;
          uint64_t v17 = (int *)(v8 + v7);
          if ((unint64_t)v17 > v10)
          {
LABEL_14:
            int v18 = 0;
            goto LABEL_15;
          }
LABEL_11:
          int v18 = *v17;
          *(_DWORD *)(a2 + 72) = v7 + 4;
LABEL_15:
          *(_DWORD *)(a1 + 528) = v18;
          goto LABEL_16;
        }
      }
      else
      {
        *(_DWORD *)(a1 + 520) = 0;
      }
      *(_DWORD *)(a1 + 524) = 0;
      uint64_t v17 = (int *)(v8 + v14);
      if ((unint64_t)v17 > v10) {
        goto LABEL_14;
      }
      goto LABEL_11;
    }
  }
  else
  {
    int v11 = 0;
    uint64_t v12 = (int *)(v8 + v7);
    if ((unint64_t)v12 <= v10) {
      goto LABEL_4;
    }
  }
  int v13 = 0;
  if (a4 >= 1) {
    goto LABEL_8;
  }
LABEL_16:
  if (*(_DWORD *)(a1 + 52) != v11 || *(_DWORD *)(a1 + 48) != v13) {
    goto LABEL_21;
  }
  uint64_t v21 = *(unsigned char **)(a1 + 312);
  int v22 = *a3;
  int v23 = *(unsigned __int8 *)(a1 + 1985);
  int v24 = sub_19E2F62F0();
  sub_19E1C632C(v21, (uint64_t *)a2, v22, v23, v24, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
  uint64_t v25 = *(unsigned char **)(a1 + 304);
  int v26 = *a3;
  int v27 = *(unsigned __int8 *)(a1 + 1985);
  int v28 = sub_19E2F62F0();
  sub_19E1C632C(v25, (uint64_t *)a2, v26, v27, v28, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
  uint64_t v29 = *(unsigned char **)(a1 + 320);
  int v30 = *a3;
  int v31 = *(unsigned __int8 *)(a1 + 1985);
  int v32 = sub_19E2F62F0();
  sub_19E1C632C(v29, (uint64_t *)a2, v30, v31, v32, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
  uint64_t v33 = *(unsigned char **)(a1 + 336);
  int v34 = *a3;
  int v35 = *(unsigned __int8 *)(a1 + 1985);
  int v36 = sub_19E2F62F0();
  sub_19E1C632C(v33, (uint64_t *)a2, v34, v35, v36, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52));
  float v37 = *(unsigned char **)(a1 + 328);
  int v38 = *a3;
  int v39 = *(unsigned __int8 *)(a1 + 1985);
  int v40 = sub_19E2F62F0();
  sub_19E1C632C(v37, (uint64_t *)a2, v38, v39, v40, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52));
  uint64_t v41 = *(unsigned char **)(a1 + 344);
  int v42 = *a3;
  int v43 = *(unsigned __int8 *)(a1 + 1985);
  int v44 = sub_19E2F62F0();
  int v45 = *(_DWORD *)(a1 + 52);

  return sub_19E1C632C(v41, (uint64_t *)a2, v42, v43, v44, v45, v45);
}

uint64_t sub_19E2251A0(uint64_t a1, FILE *__stream, int *a3, int a4, unsigned int a5)
{
  if (!__stream) {
    sub_19E2F6320(3);
  }
  int v10 = *(_DWORD *)(a1 + 48);
  sub_19E2F6788(__stream, a3, *(_DWORD *)(a1 + 52));
  sub_19E2F6788(__stream, a3, v10);
  if (a4 >= 1)
  {
    int __ptr = *(_DWORD *)(a1 + 520);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    int __ptr = *(_DWORD *)(a1 + 524);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    int __ptr = *(_DWORD *)(a1 + 528);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    *a3 += 12;
  }
  uint64_t v11 = *(void *)(a1 + 312);
  int v12 = sub_19E2F62F0();
  sub_19E218654(v11, __stream, a3, 3, v12, a5);
  uint64_t v13 = *(void *)(a1 + 304);
  int v14 = sub_19E2F62F0();
  sub_19E218654(v13, __stream, a3, 3, v14, a5);
  uint64_t v15 = *(void *)(a1 + 320);
  int v16 = sub_19E2F62F0();
  sub_19E218654(v15, __stream, a3, 3, v16, a5);
  uint64_t v17 = *(void *)(a1 + 336);
  int v18 = sub_19E2F62F0();
  sub_19E218654(v17, __stream, a3, 3, v18, a5);
  uint64_t v19 = *(void *)(a1 + 328);
  int v20 = sub_19E2F62F0();
  sub_19E218654(v19, __stream, a3, 3, v20, a5);
  uint64_t v21 = *(void *)(a1 + 344);
  int v22 = sub_19E2F62F0();
  return sub_19E218654(v21, __stream, a3, 3, v22, a5);
}

float32_t sub_19E225390(uint64_t a1, void *lpsrc, const void *a3)
{
  if (lpsrc)
  {
    uint64_t v5 = (void **)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3DC8, 0);
    if (a3) {
      goto LABEL_3;
    }
LABEL_6:
    int v7 = 0;
    int v8 = *(_DWORD *)(a1 + 52);
    uint64_t v9 = (*(_DWORD *)(a1 + 48) * v8);
    if ((int)v9 < 1) {
      goto LABEL_34;
    }
    goto LABEL_7;
  }
  uint64_t v5 = 0;
  if (!a3) {
    goto LABEL_6;
  }
LABEL_3:
  int v7 = (void **)__dynamic_cast(a3, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3DC8, 0);
  int v8 = *(_DWORD *)(a1 + 52);
  uint64_t v9 = (*(_DWORD *)(a1 + 48) * v8);
  if ((int)v9 < 1) {
    goto LABEL_34;
  }
LABEL_7:
  int v10 = (float32x4_t *)*v7[39];
  uint64_t v11 = (float32x4_t *)*v5[39];
  int v12 = **(float32x4_t ***)(a1 + 312);
  if (v9 < 8)
  {
    uint64_t v13 = 0;
LABEL_14:
    uint64_t v19 = v9 - v13;
    uint64_t v20 = v13;
    uint64_t v21 = &v12->f32[v20];
    int v22 = &v11->f32[v20];
    int v23 = &v10->f32[v20];
    do
    {
      float v24 = *v23++;
      float v25 = v24;
      float v26 = *v22++;
      *v21++ = v25 - v26;
      --v19;
    }
    while (v19);
    goto LABEL_16;
  }
  uint64_t v13 = 0;
  if ((unint64_t)((char *)v12 - (char *)v10) < 0x20) {
    goto LABEL_14;
  }
  if ((unint64_t)((char *)v12 - (char *)v11) < 0x20) {
    goto LABEL_14;
  }
  uint64_t v13 = v9 & 0x7FFFFFF8;
  int v14 = v10 + 1;
  uint64_t v15 = v11 + 1;
  int v16 = v12 + 1;
  uint64_t v17 = v9 & 0xFFFFFFF8;
  do
  {
    float32x4_t v18 = vsubq_f32(*v14, *v15);
    v16[-1] = vsubq_f32(v14[-1], v15[-1]);
    *int v16 = v18;
    v14 += 2;
    v15 += 2;
    v16 += 2;
    v17 -= 8;
  }
  while (v17);
  if (v13 != v9) {
    goto LABEL_14;
  }
LABEL_16:
  int v27 = (float32x4_t *)*v7[40];
  int v28 = (float32x4_t *)*v5[40];
  uint64_t v29 = **(float32x4_t ***)(a1 + 320);
  if (v9 < 8)
  {
    uint64_t v30 = 0;
LABEL_23:
    uint64_t v36 = v9 - v30;
    uint64_t v37 = v30;
    int v38 = &v29->f32[v37];
    int v39 = &v28->f32[v37];
    int v40 = &v27->f32[v37];
    do
    {
      float v41 = *v40++;
      float v42 = v41;
      float v43 = *v39++;
      *v38++ = v42 - v43;
      --v36;
    }
    while (v36);
    goto LABEL_25;
  }
  uint64_t v30 = 0;
  if ((unint64_t)((char *)v29 - (char *)v27) < 0x20) {
    goto LABEL_23;
  }
  if ((unint64_t)((char *)v29 - (char *)v28) < 0x20) {
    goto LABEL_23;
  }
  uint64_t v30 = v9 & 0x7FFFFFF8;
  int v31 = v27 + 1;
  int v32 = v28 + 1;
  uint64_t v33 = v29 + 1;
  uint64_t v34 = v9 & 0xFFFFFFF8;
  do
  {
    float32x4_t v35 = vsubq_f32(*v31, *v32);
    v33[-1] = vsubq_f32(v31[-1], v32[-1]);
    float32x4_t *v33 = v35;
    v31 += 2;
    v32 += 2;
    v33 += 2;
    v34 -= 8;
  }
  while (v34);
  if (v30 != v9) {
    goto LABEL_23;
  }
LABEL_25:
  int v44 = (float32x4_t *)*v7[38];
  int v45 = (float32x4_t *)*v5[38];
  int v46 = **(float32x4_t ***)(a1 + 304);
  if (v9 < 8)
  {
    uint64_t v47 = 0;
LABEL_32:
    uint64_t v53 = v9 - v47;
    uint64_t v54 = v47;
    unint64_t v55 = (__int32 *)((char *)v46 + v54 * 4);
    unint64_t v56 = &v45->f32[v54];
    unint64_t v57 = &v44->f32[v54];
    do
    {
      float v58 = *v57++;
      float v59 = v58;
      float v60 = *v56++;
      v6.f32[0] = v59 - v60;
      *v55++ = v6.i32[0];
      --v53;
    }
    while (v53);
    goto LABEL_34;
  }
  uint64_t v47 = 0;
  if ((unint64_t)((char *)v46 - (char *)v44) < 0x20) {
    goto LABEL_32;
  }
  if ((unint64_t)((char *)v46 - (char *)v45) < 0x20) {
    goto LABEL_32;
  }
  uint64_t v47 = v9 & 0x7FFFFFF8;
  float32x4_t v48 = v44 + 1;
  float v49 = v45 + 1;
  int v50 = v46 + 1;
  uint64_t v51 = v9 & 0xFFFFFFF8;
  do
  {
    float32x4_t v6 = vsubq_f32(v48[-1], v49[-1]);
    float32x4_t v52 = vsubq_f32(*v48, *v49);
    v50[-1] = v6;
    *int v50 = v52;
    v48 += 2;
    v49 += 2;
    v50 += 2;
    v51 -= 8;
  }
  while (v51);
  if (v47 != v9) {
    goto LABEL_32;
  }
LABEL_34:
  if (!v8) {
    return v6.f32[0];
  }
  uint64_t v61 = (v8 * v8);
  uint64_t v62 = (float32x4_t *)*v7[42];
  uint64_t v63 = (float32x4_t *)*v5[42];
  float32x4_t v64 = **(float32x4_t ***)(a1 + 336);
  if (v61 < 8)
  {
    uint64_t v65 = 0;
LABEL_42:
    uint64_t v71 = v61 - v65;
    uint64_t v72 = v65;
    uint64_t v73 = &v64->f32[v72];
    uint64_t v74 = &v63->f32[v72];
    uint64_t v75 = &v62->f32[v72];
    do
    {
      float v76 = *v75++;
      float v77 = v76;
      float v78 = *v74++;
      *v73++ = v77 - v78;
      --v71;
    }
    while (v71);
    goto LABEL_44;
  }
  uint64_t v65 = 0;
  if ((unint64_t)((char *)v64 - (char *)v62) < 0x20) {
    goto LABEL_42;
  }
  if ((unint64_t)((char *)v64 - (char *)v63) < 0x20) {
    goto LABEL_42;
  }
  uint64_t v65 = v61 & 0x7FFFFFF8;
  uint64_t v66 = v62 + 1;
  uint64_t v67 = v63 + 1;
  uint64_t v68 = v64 + 1;
  uint64_t v69 = v65;
  do
  {
    float32x4_t v70 = vsubq_f32(*v66, *v67);
    v68[-1] = vsubq_f32(v66[-1], v67[-1]);
    float32x4_t *v68 = v70;
    v66 += 2;
    v67 += 2;
    v68 += 2;
    v69 -= 8;
  }
  while (v69);
  if (v65 != v61) {
    goto LABEL_42;
  }
LABEL_44:
  uint64_t v79 = (float32x4_t *)*v7[43];
  uint64_t v80 = (float32x4_t *)*v5[43];
  unint64_t v81 = **(float32x4_t ***)(a1 + 344);
  if (v61 < 8)
  {
    uint64_t v82 = 0;
LABEL_51:
    uint64_t v88 = v61 - v82;
    uint64_t v89 = v82;
    BOOL v90 = &v81->f32[v89];
    BOOL v91 = &v80->f32[v89];
    uint64_t v92 = &v79->f32[v89];
    do
    {
      float v93 = *v92++;
      float v94 = v93;
      float v95 = *v91++;
      *v90++ = v94 - v95;
      --v88;
    }
    while (v88);
    goto LABEL_53;
  }
  uint64_t v82 = 0;
  if ((unint64_t)((char *)v81 - (char *)v79) < 0x20) {
    goto LABEL_51;
  }
  if ((unint64_t)((char *)v81 - (char *)v80) < 0x20) {
    goto LABEL_51;
  }
  uint64_t v82 = v61 & 0x7FFFFFF8;
  uint64_t v83 = v79 + 1;
  uint64_t v84 = v80 + 1;
  unint64_t v85 = v81 + 1;
  uint64_t v86 = v82;
  do
  {
    float32x4_t v87 = vsubq_f32(*v83, *v84);
    v85[-1] = vsubq_f32(v83[-1], v84[-1]);
    *unint64_t v85 = v87;
    v83 += 2;
    v84 += 2;
    v85 += 2;
    v86 -= 8;
  }
  while (v86);
  if (v82 != v61) {
    goto LABEL_51;
  }
LABEL_53:
  uint64_t v96 = (float32x4_t *)*v7[41];
  float32x4_t v97 = (float32x4_t *)*v5[41];
  uint64_t v98 = **(float32x4_t ***)(a1 + 328);
  if (v61 < 8)
  {
    uint64_t v99 = 0;
LABEL_60:
    uint64_t v105 = v61 - v99;
    uint64_t v106 = v99;
    float32x4_t v107 = (__int32 *)((char *)v98 + v106 * 4);
    uint64_t v108 = &v97->f32[v106];
    float32x4_t v109 = &v96->f32[v106];
    do
    {
      float v110 = *v109++;
      float v111 = v110;
      float v112 = *v108++;
      v6.f32[0] = v111 - v112;
      *v107++ = v6.i32[0];
      --v105;
    }
    while (v105);
    return v6.f32[0];
  }
  uint64_t v99 = 0;
  if ((unint64_t)((char *)v98 - (char *)v96) < 0x20) {
    goto LABEL_60;
  }
  if ((unint64_t)((char *)v98 - (char *)v97) < 0x20) {
    goto LABEL_60;
  }
  uint64_t v99 = v61 & 0x7FFFFFF8;
  int v100 = v96 + 1;
  uint64_t v101 = v97 + 1;
  uint64_t v102 = v98 + 1;
  uint64_t v103 = v99;
  do
  {
    float32x4_t v6 = vsubq_f32(v100[-1], v101[-1]);
    float32x4_t v104 = vsubq_f32(*v100, *v101);
    v102[-1] = v6;
    *uint64_t v102 = v104;
    v100 += 2;
    v101 += 2;
    v102 += 2;
    v103 -= 8;
  }
  while (v103);
  if (v99 != v61) {
    goto LABEL_60;
  }
  return v6.f32[0];
}

void sub_19E2258C4(int a1, void *lpsrc, const void *a3)
{
  if (lpsrc) {
    __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3DC8, 0);
  }
  if (a3)
  {
    __dynamic_cast(a3, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3DC8, 0);
  }
}

void sub_19E225990(uint64_t a1, void *lpsrc)
{
  if (lpsrc) {
    uint64_t v3 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3DC8, 0);
  }
  else {
    uint64_t v3 = 0;
  }
  int v4 = *(const float ***)(a1 + 312);
  uint64_t v5 = (const float **)v3[39];
  vDSP_Length v6 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  float __B = 1.0;
  vDSP_vsma(*v5, 1, &__B, *v4, 1, (float *)*v4, 1, v6);
  int v7 = *(const float ***)(a1 + 304);
  int v8 = (const float **)v3[38];
  vDSP_Length v9 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  float __B = 1.0;
  vDSP_vsma(*v8, 1, &__B, *v7, 1, (float *)*v7, 1, v9);
  int v10 = *(const float ***)(a1 + 320);
  uint64_t v11 = (const float **)v3[40];
  vDSP_Length v12 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  float __B = 1.0;
  vDSP_vsma(*v11, 1, &__B, *v10, 1, (float *)*v10, 1, v12);
  uint64_t v13 = *(const float ***)(a1 + 336);
  int v14 = (const float **)v3[42];
  vDSP_Length v15 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  float __B = 1.0;
  vDSP_vsma(*v14, 1, &__B, *v13, 1, (float *)*v13, 1, v15);
  int v16 = *(const float ***)(a1 + 328);
  uint64_t v17 = (const float **)v3[41];
  vDSP_Length v18 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  float __B = 1.0;
  vDSP_vsma(*v17, 1, &__B, *v16, 1, (float *)*v16, 1, v18);
  uint64_t v19 = *(const float ***)(a1 + 344);
  uint64_t v20 = (const float **)v3[43];
  vDSP_Length v21 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  float __B = 1.0;
  vDSP_vsma(*v20, 1, &__B, *v19, 1, (float *)*v19, 1, v21);
}

void sub_19E225B54(uint64_t a1, void *lpsrc)
{
  if (lpsrc) {
    uint64_t v3 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3DC8, 0);
  }
  else {
    uint64_t v3 = 0;
  }
  float v4 = (*(float (**)(void))(**(void **)(a1 + 1128) + 64))(*(void *)(a1 + 1128));
  (***(void (****)(void, void, uint64_t))(a1 + 1128))(*(void *)(a1 + 1128), *(void *)(a1 + 304), (uint64_t)v3 + 232);
  (***(void (****)(float))(a1 + 1120))(v4);
  (***(void (****)(float))(a1 + 1136))(v4);
  (***(void (****)(float))(a1 + 1152))(v4);
  (***(void (****)(float))(a1 + 1144))(v4);
  (***(void (****)(float))(a1 + 1160))(v4);
  uint64_t v5 = *(const float ***)(a1 + 304);
  vDSP_Length v6 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  float __C = 2.0;
  float __B = -2.0;
  vDSP_vclip(*v5, 1, &__B, &__C, (float *)*v5, 1, v6);
  int v7 = *(const float ***)(a1 + 312);
  vDSP_Length v8 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  float __C = 2.0;
  float __B = -2.0;
  vDSP_vclip(*v7, 1, &__B, &__C, (float *)*v7, 1, v8);
  vDSP_Length v9 = *(const float ***)(a1 + 320);
  vDSP_Length v10 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  float __C = 2.0;
  float __B = -2.0;
  vDSP_vclip(*v9, 1, &__B, &__C, (float *)*v9, 1, v10);
  uint64_t v11 = *(const float ***)(a1 + 328);
  vDSP_Length v12 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  float __C = 2.0;
  float __B = -2.0;
  vDSP_vclip(*v11, 1, &__B, &__C, (float *)*v11, 1, v12);
  uint64_t v13 = *(const float ***)(a1 + 336);
  vDSP_Length v14 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  float __C = 2.0;
  float __B = -2.0;
  vDSP_vclip(*v13, 1, &__B, &__C, (float *)*v13, 1, v14);
  vDSP_Length v15 = *(const float ***)(a1 + 344);
  vDSP_Length v16 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  float __C = 2.0;
  float __B = -2.0;
  vDSP_vclip(*v15, 1, &__B, &__C, (float *)*v15, 1, v16);
}

void sub_19E225EB8(uint64_t a1, float a2)
{
  float v4 = *(const float ***)(a1 + 312);
  float v5 = -a2;
  vDSP_Length v6 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  float __C = a2;
  float __B = -a2;
  vDSP_vclip(*v4, 1, &__B, &__C, (float *)*v4, 1, v6);
  int v7 = *(const float ***)(a1 + 304);
  vDSP_Length v8 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  float __C = a2;
  float __B = v5;
  vDSP_vclip(*v7, 1, &__B, &__C, (float *)*v7, 1, v8);
  vDSP_Length v9 = *(const float ***)(a1 + 320);
  vDSP_Length v10 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  float __C = a2;
  float __B = v5;
  vDSP_vclip(*v9, 1, &__B, &__C, (float *)*v9, 1, v10);
  uint64_t v11 = *(const float ***)(a1 + 336);
  vDSP_Length v12 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  float __C = a2;
  float __B = v5;
  vDSP_vclip(*v11, 1, &__B, &__C, (float *)*v11, 1, v12);
  uint64_t v13 = *(const float ***)(a1 + 328);
  vDSP_Length v14 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  float __C = a2;
  float __B = v5;
  vDSP_vclip(*v13, 1, &__B, &__C, (float *)*v13, 1, v14);
  vDSP_Length v15 = *(const float ***)(a1 + 344);
  vDSP_Length v16 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  float __C = a2;
  float __B = v5;
  vDSP_vclip(*v15, 1, &__B, &__C, (float *)*v15, 1, v16);
}

uint64_t sub_19E225FF8(uint64_t result, float a2)
{
  int v2 = *(_DWORD *)(result + 52);
  uint64_t v3 = (*(_DWORD *)(result + 48) * v2);
  if ((int)v3 < 1) {
    goto LABEL_23;
  }
  float v4 = **(float32x4_t ***)(result + 312);
  if (v3 < 8)
  {
    uint64_t v5 = 0;
LABEL_7:
    uint64_t v9 = v3 - v5;
    vDSP_Length v10 = &v4->f32[v5];
    do
    {
      *vDSP_Length v10 = *v10 * a2;
      ++v10;
      --v9;
    }
    while (v9);
    goto LABEL_9;
  }
  uint64_t v5 = v3 & 0x7FFFFFF8;
  vDSP_Length v6 = v4 + 1;
  uint64_t v7 = v3 & 0xFFFFFFF8;
  do
  {
    float32x4_t v8 = vmulq_n_f32(*v6, a2);
    v6[-1] = vmulq_n_f32(v6[-1], a2);
    *vDSP_Length v6 = v8;
    v6 += 2;
    v7 -= 8;
  }
  while (v7);
  if (v5 != v3) {
    goto LABEL_7;
  }
LABEL_9:
  if (v3 >= 8)
  {
    uint64_t v11 = v3 & 0x7FFFFFF8;
    vDSP_Length v12 = v4 + 1;
    uint64_t v13 = v3 & 0xFFFFFFF8;
    do
    {
      float32x4_t v14 = vmulq_n_f32(*v12, a2);
      v12[-1] = vmulq_n_f32(v12[-1], a2);
      *vDSP_Length v12 = v14;
      v12 += 2;
      v13 -= 8;
    }
    while (v13);
    if (v11 == v3) {
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v15 = v3 - v11;
  vDSP_Length v16 = &v4->f32[v11];
  do
  {
    *vDSP_Length v16 = *v16 * a2;
    ++v16;
    --v15;
  }
  while (v15);
LABEL_16:
  uint64_t v17 = **(float32x4_t ***)(result + 320);
  if (v3 < 8)
  {
    uint64_t v18 = 0;
LABEL_21:
    uint64_t v22 = v3 - v18;
    int v23 = &v17->f32[v18];
    do
    {
      *int v23 = *v23 * a2;
      ++v23;
      --v22;
    }
    while (v22);
    goto LABEL_23;
  }
  uint64_t v18 = v3 & 0x7FFFFFF8;
  uint64_t v19 = v17 + 1;
  uint64_t v20 = v3 & 0xFFFFFFF8;
  do
  {
    float32x4_t v21 = vmulq_n_f32(*v19, a2);
    v19[-1] = vmulq_n_f32(v19[-1], a2);
    *uint64_t v19 = v21;
    v19 += 2;
    v20 -= 8;
  }
  while (v20);
  if (v18 != v3) {
    goto LABEL_21;
  }
LABEL_23:
  if (!v2) {
    return result;
  }
  uint64_t v24 = (v2 * v2);
  float v25 = **(float32x4_t ***)(result + 336);
  if (v24 < 8)
  {
    uint64_t v26 = 0;
LABEL_29:
    uint64_t v30 = v24 - v26;
    int v31 = &v25->f32[v26];
    do
    {
      float *v31 = *v31 * a2;
      ++v31;
      --v30;
    }
    while (v30);
    goto LABEL_31;
  }
  uint64_t v26 = v24 & 0x7FFFFFF8;
  int v27 = v25 + 1;
  uint64_t v28 = v26;
  do
  {
    float32x4_t v29 = vmulq_n_f32(*v27, a2);
    v27[-1] = vmulq_n_f32(v27[-1], a2);
    float32x4_t *v27 = v29;
    v27 += 2;
    v28 -= 8;
  }
  while (v28);
  if (v26 != v24) {
    goto LABEL_29;
  }
LABEL_31:
  int v32 = **(float32x4_t ***)(result + 328);
  if (v24 < 8)
  {
    uint64_t v33 = 0;
LABEL_36:
    uint64_t v37 = v24 - v33;
    int v38 = &v32->f32[v33];
    do
    {
      *int v38 = *v38 * a2;
      ++v38;
      --v37;
    }
    while (v37);
    goto LABEL_38;
  }
  uint64_t v33 = v24 & 0x7FFFFFF8;
  uint64_t v34 = v32 + 1;
  uint64_t v35 = v33;
  do
  {
    float32x4_t v36 = vmulq_n_f32(*v34, a2);
    v34[-1] = vmulq_n_f32(v34[-1], a2);
    float32x4_t *v34 = v36;
    v34 += 2;
    v35 -= 8;
  }
  while (v35);
  if (v33 != v24) {
    goto LABEL_36;
  }
LABEL_38:
  int v39 = **(float32x4_t ***)(result + 344);
  if (v24 < 8)
  {
    uint64_t v40 = 0;
LABEL_43:
    uint64_t v44 = v24 - v40;
    int v45 = &v39->f32[v40];
    do
    {
      *int v45 = *v45 * a2;
      ++v45;
      --v44;
    }
    while (v44);
    return result;
  }
  uint64_t v40 = v24 & 0x7FFFFFF8;
  float v41 = v39 + 1;
  uint64_t v42 = v40;
  do
  {
    float32x4_t v43 = vmulq_n_f32(*v41, a2);
    v41[-1] = vmulq_n_f32(v41[-1], a2);
    *float v41 = v43;
    v41 += 2;
    v42 -= 8;
  }
  while (v42);
  if (v40 != v24) {
    goto LABEL_43;
  }
  return result;
}

void sub_19E226264()
{
}

void sub_19E22650C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E226520(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_19E226534(uint64_t a1, uint64_t *a2, int a3, int *a4)
{
  uint64_t v7 = *(int *)(a1 + 52);
  uint64_t v8 = *a2;
  *(_DWORD *)(v8 + 16 * *a4) = v7;
  uint64_t v9 = 8 * a3;
  memmove(**(void ***)(v8 + 16 * *a4 + 8), *(const void **)(*(void *)(a1 + 112) + v9), 4 * v7);
  uint64_t v10 = *a4;
  *a4 = v10 + 1;
  uint64_t v11 = *(int *)(a1 + 52);
  uint64_t v12 = *a2;
  *(_DWORD *)(*a2 + 16 * v10 + 16) = v11;
  uint64_t result = memmove(**(void ***)(v12 + 16 * *a4 + 8), *(const void **)(*(void *)(a1 + 88) + v9), 4 * v11);
  ++*a4;
  return result;
}

void *sub_19E2265E4(uint64_t a1, void *a2, int a3, int *a4)
{
  uint64_t v7 = *(void *)(a1 + 112);
  uint64_t v8 = 8 * a3;
  uint64_t v9 = *a4;
  *a4 = v9 + 1;
  memmove(*(void **)(v7 + v8), **(const void ***)(*a2 + 16 * v9 + 8), 4 * *(int *)(a1 + 52));
  uint64_t v10 = *(void *)(a1 + 88);
  uint64_t v11 = *a4;
  *a4 = v11 + 1;
  size_t v12 = 4 * *(int *)(a1 + 52);
  uint64_t v13 = *(void **)(v10 + v8);
  float32x4_t v14 = **(const void ***)(*a2 + 16 * v11 + 8);

  return memmove(v13, v14, v12);
}

void sub_19E226684(uint64_t a1, void *a2, int *a3)
{
  uint64_t v5 = (int *)(*a2 + 16 * *a3);
  bzero(**((void ***)v5 + 1), 4 * *v5);
  uint64_t v6 = *a3;
  *a3 = v6 + 1;
  bzero(**(void ***)(*a2 + 16 * v6 + 24), 4 * *(int *)(*a2 + 16 * v6 + 16));
  ++*a3;
}

void sub_19E2266FC(void *a1)
{
  uint64_t v2 = a1[140];
  BYTE7(v14[2]) = 17;
  strcpy((char *)v14, "GRU before resetGRU before reset ");
  (*(void (**)(uint64_t, _OWORD *))(*(void *)v2 + 40))(v2, &v14[1]);
  if (SBYTE7(v14[2]) < 0) {
    operator delete(*(void **)&v14[1]);
  }
  uint64_t v3 = a1[141];
  BYTE7(v14[2]) = 17;
  strcpy((char *)&v14[2], " ");
  v14[1] = v14[0];
  (*(void (**)(uint64_t, _OWORD *))(*(void *)v3 + 40))(v3, &v14[1]);
  if (SBYTE7(v14[2]) < 0) {
    operator delete(*(void **)&v14[1]);
  }
  uint64_t v4 = a1[142];
  BYTE7(v14[2]) = 17;
  strcpy((char *)&v14[2], " ");
  v14[1] = v14[0];
  (*(void (**)(uint64_t, _OWORD *))(*(void *)v4 + 40))(v4, &v14[1]);
  if (SBYTE7(v14[2]) < 0) {
    operator delete(*(void **)&v14[1]);
  }
  uint64_t v5 = a1[143];
  BYTE7(v14[2]) = 17;
  strcpy((char *)&v14[2], " ");
  v14[1] = v14[0];
  (*(void (**)(uint64_t, _OWORD *))(*(void *)v5 + 40))(v5, &v14[1]);
  if (SBYTE7(v14[2]) < 0) {
    operator delete(*(void **)&v14[1]);
  }
  uint64_t v6 = a1[144];
  BYTE7(v14[2]) = 17;
  strcpy((char *)&v14[2], " ");
  v14[1] = v14[0];
  (*(void (**)(uint64_t, _OWORD *))(*(void *)v6 + 40))(v6, &v14[1]);
  if (SBYTE7(v14[2]) < 0) {
    operator delete(*(void **)&v14[1]);
  }
  uint64_t v7 = a1[145];
  BYTE7(v14[2]) = 17;
  strcpy((char *)&v14[2], " ");
  v14[1] = v14[0];
  (*(void (**)(uint64_t, _OWORD *))(*(void *)v7 + 40))(v7, &v14[1]);
  if (SBYTE7(v14[2]) < 0) {
    operator delete(*(void **)&v14[1]);
  }
  (*(void (**)(void))(*(void *)a1[140] + 16))(a1[140]);
  (*(void (**)(void))(*(void *)a1[141] + 16))(a1[141]);
  (*(void (**)(void))(*(void *)a1[142] + 16))(a1[142]);
  (*(void (**)(void))(*(void *)a1[143] + 16))(a1[143]);
  (*(void (**)(void))(*(void *)a1[144] + 16))(a1[144]);
  (*(void (**)(void))(*(void *)a1[145] + 16))(a1[145]);
  uint64_t v8 = a1[140];
  BYTE7(v14[2]) = 16;
  strcpy((char *)v14, "GRU AFTER reset GRU AFTER reset ");
  (*(void (**)(uint64_t, _OWORD *))(*(void *)v8 + 40))(v8, &v14[1]);
  if (SBYTE7(v14[2]) < 0) {
    operator delete(*(void **)&v14[1]);
  }
  uint64_t v9 = a1[141];
  BYTE7(v14[2]) = 16;
  v14[1] = v14[0];
  LOBYTE(v14[2]) = 0;
  (*(void (**)(uint64_t, _OWORD *))(*(void *)v9 + 40))(v9, &v14[1]);
  if (SBYTE7(v14[2]) < 0) {
    operator delete(*(void **)&v14[1]);
  }
  uint64_t v10 = a1[142];
  BYTE7(v14[2]) = 16;
  v14[1] = v14[0];
  LOBYTE(v14[2]) = 0;
  (*(void (**)(uint64_t, _OWORD *))(*(void *)v10 + 40))(v10, &v14[1]);
  if (SBYTE7(v14[2]) < 0) {
    operator delete(*(void **)&v14[1]);
  }
  uint64_t v11 = a1[143];
  BYTE7(v14[2]) = 16;
  v14[1] = v14[0];
  LOBYTE(v14[2]) = 0;
  (*(void (**)(uint64_t, _OWORD *))(*(void *)v11 + 40))(v11, &v14[1]);
  if (SBYTE7(v14[2]) < 0) {
    operator delete(*(void **)&v14[1]);
  }
  uint64_t v12 = a1[144];
  BYTE7(v14[2]) = 16;
  v14[1] = v14[0];
  LOBYTE(v14[2]) = 0;
  (*(void (**)(uint64_t, _OWORD *))(*(void *)v12 + 40))(v12, &v14[1]);
  if (SBYTE7(v14[2]) < 0) {
    operator delete(*(void **)&v14[1]);
  }
  uint64_t v13 = a1[145];
  BYTE7(v14[2]) = 16;
  v14[1] = v14[0];
  LOBYTE(v14[2]) = 0;
  (*(void (**)(uint64_t, _OWORD *))(*(void *)v13 + 40))(v13, &v14[1]);
  if (SBYTE7(v14[2]) < 0) {
    operator delete(*(void **)&v14[1]);
  }
}

void sub_19E226C0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E226C54(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = **(void **)(a1 + 304);
  int v6 = *(_DWORD *)(a1 + 48);
  unsigned int v5 = *(_DWORD *)(a1 + 52);
  uint64_t v8 = *(void **)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  if ((unint64_t)v8 >= v7)
  {
    uint64_t v10 = *(void **)a2;
    uint64_t v11 = (uint64_t)v8 - *(void *)a2;
    unint64_t v12 = (v11 >> 4) + 1;
    if (v12 >> 60) {
      goto LABEL_74;
    }
    uint64_t v13 = v7 - (void)v10;
    if (v13 >> 3 > v12) {
      unint64_t v12 = v13 >> 3;
    }
    BOOL v14 = (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14) {
      unint64_t v15 = v12;
    }
    if (v15 >> 60) {
      goto LABEL_75;
    }
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (char *)operator new(16 * v15);
    uint64_t v18 = &v17[16 * (v11 >> 4)];
    *(void *)uint64_t v18 = v4;
    uint64_t v9 = v18 + 16;
    uint64_t v19 = &v17[v11];
    *((_DWORD *)v19 + 2) = v5;
    for (*((_DWORD *)v19 + 3) = v6; v8 != v10; *((void *)v18 + 1) = v8[1])
    {
      uint64_t v20 = *(v8 - 2);
      v8 -= 2;
      *((void *)v18 - 2) = v20;
      v18 -= 16;
    }
    *(void *)a2 = v18;
    *(void *)(a2 + 8) = v9;
    *(void *)(a2 + 16) = &v17[v16];
    if (v10)
    {
      operator delete(v10);
      int v6 = *(_DWORD *)(a1 + 48);
      unsigned int v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    void *v8 = v4;
    uint64_t v9 = v8 + 2;
    *((_DWORD *)v8 + 2) = v5;
    *((_DWORD *)v8 + 3) = v6;
  }
  *(void *)(a2 + 8) = v9;
  uint64_t v21 = **(void **)(a1 + 312);
  unint64_t v22 = *(void *)(a2 + 16);
  if ((unint64_t)v9 >= v22)
  {
    uint64_t v24 = *(void **)a2;
    uint64_t v25 = (uint64_t)v9 - *(void *)a2;
    unint64_t v26 = (v25 >> 4) + 1;
    if (v26 >> 60) {
      goto LABEL_74;
    }
    uint64_t v27 = v22 - (void)v24;
    if (v27 >> 3 > v26) {
      unint64_t v26 = v27 >> 3;
    }
    BOOL v14 = (unint64_t)v27 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v28 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14) {
      unint64_t v28 = v26;
    }
    if (v28 >> 60) {
      goto LABEL_75;
    }
    uint64_t v29 = 16 * v28;
    uint64_t v30 = (char *)operator new(16 * v28);
    int v31 = &v30[16 * (v25 >> 4)];
    *(void *)int v31 = v21;
    int v23 = v31 + 16;
    int v32 = &v30[v25];
    *((_DWORD *)v32 + 2) = v5;
    for (*((_DWORD *)v32 + 3) = v6; v9 != v24; *((void *)v31 + 1) = v9[1])
    {
      uint64_t v33 = *(v9 - 2);
      v9 -= 2;
      *((void *)v31 - 2) = v33;
      v31 -= 16;
    }
    *(void *)a2 = v31;
    *(void *)(a2 + 8) = v23;
    *(void *)(a2 + 16) = &v30[v29];
    if (v24)
    {
      operator delete(v24);
      int v6 = *(_DWORD *)(a1 + 48);
      unsigned int v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    *uint64_t v9 = v21;
    int v23 = v9 + 2;
    *((_DWORD *)v9 + 2) = v5;
    *((_DWORD *)v9 + 3) = v6;
  }
  *(void *)(a2 + 8) = v23;
  uint64_t v34 = **(void **)(a1 + 320);
  unint64_t v35 = *(void *)(a2 + 16);
  if ((unint64_t)v23 >= v35)
  {
    uint64_t v37 = *(void **)a2;
    uint64_t v38 = (uint64_t)v23 - *(void *)a2;
    unint64_t v39 = (v38 >> 4) + 1;
    if (v39 >> 60) {
      goto LABEL_74;
    }
    uint64_t v40 = v35 - (void)v37;
    if (v40 >> 3 > v39) {
      unint64_t v39 = v40 >> 3;
    }
    BOOL v14 = (unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v41 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14) {
      unint64_t v41 = v39;
    }
    if (v41 >> 60) {
      goto LABEL_75;
    }
    uint64_t v42 = 16 * v41;
    float32x4_t v43 = (char *)operator new(16 * v41);
    uint64_t v44 = &v43[16 * (v38 >> 4)];
    *(void *)uint64_t v44 = v34;
    float32x4_t v36 = v44 + 16;
    int v45 = &v43[v38];
    *((_DWORD *)v45 + 2) = v5;
    for (*((_DWORD *)v45 + 3) = v6; v23 != v37; *((void *)v44 + 1) = v23[1])
    {
      uint64_t v46 = *(v23 - 2);
      v23 -= 2;
      *((void *)v44 - 2) = v46;
      v44 -= 16;
    }
    *(void *)a2 = v44;
    *(void *)(a2 + 8) = v36;
    *(void *)(a2 + 16) = &v43[v42];
    if (v37)
    {
      operator delete(v37);
      unsigned int v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    *int v23 = v34;
    float32x4_t v36 = v23 + 2;
    *((_DWORD *)v23 + 2) = v5;
    *((_DWORD *)v23 + 3) = v6;
  }
  *(void *)(a2 + 8) = v36;
  uint64_t v47 = **(void **)(a1 + 328);
  unint64_t v48 = *(void *)(a2 + 16);
  if ((unint64_t)v36 >= v48)
  {
    int v50 = *(void **)a2;
    uint64_t v51 = (uint64_t)v36 - *(void *)a2;
    unint64_t v52 = (v51 >> 4) + 1;
    if (v52 >> 60) {
      goto LABEL_74;
    }
    uint64_t v53 = v48 - (void)v50;
    if (v53 >> 3 > v52) {
      unint64_t v52 = v53 >> 3;
    }
    BOOL v14 = (unint64_t)v53 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v54 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14) {
      unint64_t v54 = v52;
    }
    if (v54 >> 60) {
      goto LABEL_75;
    }
    uint64_t v55 = 16 * v54;
    unint64_t v56 = (char *)operator new(16 * v54);
    unint64_t v57 = &v56[16 * (v51 >> 4)];
    *(void *)unint64_t v57 = v47;
    float v49 = v57 + 16;
    for (*(int32x2_t *)&v56[v51 + 8] = vdup_n_s32(v5); v36 != v50; *((void *)v57 + 1) = v36[1])
    {
      uint64_t v58 = *(v36 - 2);
      v36 -= 2;
      *((void *)v57 - 2) = v58;
      v57 -= 16;
    }
    *(void *)a2 = v57;
    *(void *)(a2 + 8) = v49;
    *(void *)(a2 + 16) = &v56[v55];
    if (v50)
    {
      operator delete(v50);
      unsigned int v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    void *v36 = v47;
    float v49 = v36 + 2;
    *((_DWORD *)v36 + 2) = v5;
    *((_DWORD *)v36 + 3) = v5;
  }
  *(void *)(a2 + 8) = v49;
  uint64_t v59 = **(void **)(a1 + 336);
  unint64_t v60 = *(void *)(a2 + 16);
  if ((unint64_t)v49 < v60)
  {
    *float v49 = v59;
    uint64_t v61 = v49 + 2;
    *((_DWORD *)v49 + 2) = v5;
    *((_DWORD *)v49 + 3) = v5;
    goto LABEL_61;
  }
  uint64_t v62 = *(void **)a2;
  uint64_t v63 = (uint64_t)v49 - *(void *)a2;
  unint64_t v64 = (v63 >> 4) + 1;
  if (v64 >> 60) {
    goto LABEL_74;
  }
  uint64_t v65 = v60 - (void)v62;
  if (v65 >> 3 > v64) {
    unint64_t v64 = v65 >> 3;
  }
  BOOL v14 = (unint64_t)v65 >= 0x7FFFFFFFFFFFFFF0;
  unint64_t v66 = 0xFFFFFFFFFFFFFFFLL;
  if (!v14) {
    unint64_t v66 = v64;
  }
  if (v66 >> 60) {
LABEL_75:
  }
    sub_19E13C418();
  uint64_t v67 = 16 * v66;
  uint64_t v68 = (char *)operator new(16 * v66);
  uint64_t v69 = &v68[16 * (v63 >> 4)];
  *(void *)uint64_t v69 = v59;
  uint64_t v61 = v69 + 16;
  for (*(int32x2_t *)&v68[v63 + 8] = vdup_n_s32(v5); v49 != v62; *((void *)v69 + 1) = v49[1])
  {
    uint64_t v70 = *(v49 - 2);
    v49 -= 2;
    *((void *)v69 - 2) = v70;
    v69 -= 16;
  }
  *(void *)a2 = v69;
  *(void *)(a2 + 8) = v61;
  *(void *)(a2 + 16) = &v68[v67];
  if (v62)
  {
    operator delete(v62);
    unsigned int v5 = *(_DWORD *)(a1 + 52);
  }
LABEL_61:
  *(void *)(a2 + 8) = v61;
  uint64_t v71 = **(void **)(a1 + 344);
  unint64_t v72 = *(void *)(a2 + 16);
  if ((unint64_t)v61 < v72)
  {
    *uint64_t v61 = v71;
    uint64_t v73 = v61 + 2;
    *((_DWORD *)v61 + 2) = v5;
    *((_DWORD *)v61 + 3) = v5;
    goto LABEL_73;
  }
  uint64_t v74 = *(void **)a2;
  uint64_t v75 = (uint64_t)v61 - *(void *)a2;
  unint64_t v76 = (v75 >> 4) + 1;
  if (v76 >> 60) {
LABEL_74:
  }
    sub_19E13D694();
  uint64_t v77 = v72 - (void)v74;
  if (v77 >> 3 > v76) {
    unint64_t v76 = v77 >> 3;
  }
  BOOL v14 = (unint64_t)v77 >= 0x7FFFFFFFFFFFFFF0;
  unint64_t v78 = 0xFFFFFFFFFFFFFFFLL;
  if (!v14) {
    unint64_t v78 = v76;
  }
  if (v78 >> 60) {
    goto LABEL_75;
  }
  uint64_t v79 = 16 * v78;
  uint64_t v80 = (char *)operator new(16 * v78);
  unint64_t v81 = &v80[16 * (v75 >> 4)];
  *(void *)unint64_t v81 = v71;
  uint64_t v73 = v81 + 16;
  for (*(int32x2_t *)&v80[v75 + 8] = vdup_n_s32(v5); v61 != v74; *((void *)v81 + 1) = v61[1])
  {
    uint64_t v82 = *(v61 - 2);
    v61 -= 2;
    *((void *)v81 - 2) = v82;
    v81 -= 16;
  }
  *(void *)a2 = v81;
  *(void *)(a2 + 8) = v73;
  *(void *)(a2 + 16) = &v80[v79];
  if (v74) {
    operator delete(v74);
  }
LABEL_73:
  *(void *)(a2 + 8) = v73;
}

uint64_t sub_19E227148(uint64_t result)
{
  *(unsigned char *)(result + 42) = 1;
  return result;
}

uint64_t sub_19E227154(uint64_t result)
{
  *(unsigned char *)(result + 42) = 0;
  return result;
}

void sub_19E22715C(uint64_t a1)
{
}

void sub_19E2271E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E227200(void *a1)
{
  uint64_t v2 = a1[250];
  uint64_t v3 = a1[249];
  if (v2 == v3)
  {
    uint64_t v3 = a1[250];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      unsigned int v5 = *(void **)(v3 + 8 * v4);
      if (v5)
      {
        operator delete[](v5);
        uint64_t v2 = a1[250];
        uint64_t v3 = a1[249];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  uint64_t v6 = a1[253];
  uint64_t v7 = a1[252];
  if (v6 != v7)
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(void **)(v7 + 8 * v8);
      if (v9)
      {
        operator delete[](v9);
        uint64_t v6 = a1[253];
        uint64_t v7 = a1[252];
      }
      ++v8;
    }
    while (v8 < (v6 - v7) >> 3);
    a1[250] = a1[249];
    a1[253] = v7;
    uint64_t v10 = a1[102];
    uint64_t v11 = a1[101];
    if (v10 != v11) {
      goto LABEL_13;
    }
LABEL_18:
    uint64_t v11 = v10;
    goto LABEL_19;
  }
  a1[250] = v3;
  a1[253] = v6;
  uint64_t v10 = a1[102];
  uint64_t v11 = a1[101];
  if (v10 == v11) {
    goto LABEL_18;
  }
LABEL_13:
  unint64_t v12 = 0;
  do
  {
    uint64_t v13 = *(void **)(v11 + 8 * v12);
    if (v13)
    {
      operator delete[](v13);
      uint64_t v10 = a1[102];
      uint64_t v11 = a1[101];
    }
    ++v12;
  }
  while (v12 < (v10 - v11) >> 3);
LABEL_19:
  a1[102] = v11;
  BOOL v14 = (void *)a1[99];
  if (v14)
  {
    operator delete(v14);
    a1[99] = 0;
  }
  unint64_t v15 = (void *)a1[98];
  if (v15)
  {
    operator delete(v15);
    a1[98] = 0;
  }
  uint64_t v16 = a1[132];
  uint64_t v17 = a1[131];
  if (v16 == v17)
  {
    uint64_t v17 = a1[132];
  }
  else
  {
    unint64_t v18 = 0;
    do
    {
      uint64_t v19 = *(void **)(v17 + 8 * v18);
      if (v19)
      {
        operator delete[](v19);
        uint64_t v16 = a1[132];
        uint64_t v17 = a1[131];
      }
      ++v18;
    }
    while (v18 < (v16 - v17) >> 3);
  }
  a1[132] = v17;
  uint64_t v20 = (void *)a1[129];
  if (v20)
  {
    operator delete(v20);
    a1[129] = 0;
  }
  uint64_t v21 = (void *)a1[128];
  if (v21)
  {
    operator delete(v21);
    a1[128] = 0;
  }
  uint64_t v22 = a1[117];
  uint64_t v23 = a1[116];
  if (v22 == v23)
  {
    uint64_t v23 = a1[117];
  }
  else
  {
    unint64_t v24 = 0;
    do
    {
      uint64_t v25 = *(void **)(v23 + 8 * v24);
      if (v25)
      {
        operator delete[](v25);
        uint64_t v22 = a1[117];
        uint64_t v23 = a1[116];
      }
      ++v24;
    }
    while (v24 < (v22 - v23) >> 3);
  }
  a1[117] = v23;
  unint64_t v26 = (void *)a1[114];
  if (v26)
  {
    operator delete(v26);
    a1[114] = 0;
  }
  uint64_t v27 = (void *)a1[113];
  if (v27)
  {
    operator delete(v27);
    a1[113] = 0;
  }
}

uint64_t sub_19E227404(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_19E22740C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

void sub_19E227418(uint64_t a1, float a2)
{
  int v4 = *(_DWORD *)(a1 + 48);
  unsigned int v5 = *(_DWORD *)(a1 + 52);
  if (*(int *)(a1 + 56) < 1)
  {
    float __B = a2;
    vDSP_Length v6 = (int)(v5 * v4);
    vDSP_vsma(*(const float **)(a1 + 1072), 1, &__B, *(const float **)(a1 + 240), 1, *(float **)(a1 + 240), 1, v6);
    float __B = a2;
    vDSP_vsma(*(const float **)(a1 + 1088), 1, &__B, *(const float **)(a1 + 248), 1, *(float **)(a1 + 248), 1, v6);
    float __B = a2;
    vDSP_vsma(*(const float **)(a1 + 1080), 1, &__B, *(const float **)(a1 + 232), 1, *(float **)(a1 + 232), 1, v6);
  }
  else
  {
    sub_19E218AE4(a1 + 712, (uint64_t *)(a1 + 240), v5, v4, a2);
    sub_19E218AE4(a1 + 952, (uint64_t *)(a1 + 248), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), a2);
    sub_19E218AE4(a1 + 832, (uint64_t *)(a1 + 232), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), a2);
  }
  vDSP_Length v7 = v5 * v5;
  float __B = a2;
  vDSP_vsma(*(const float **)(a1 + 1096), 1, &__B, *(const float **)(a1 + 264), 1, *(float **)(a1 + 264), 1, v7);
  float __B = a2;
  vDSP_vsma(*(const float **)(a1 + 1112), 1, &__B, *(const float **)(a1 + 272), 1, *(float **)(a1 + 272), 1, v7);
  float __B = a2;
  vDSP_vsma(*(const float **)(a1 + 1104), 1, &__B, *(const float **)(a1 + 256), 1, *(float **)(a1 + 256), 1, v7);
}

void sub_19E2275A0(uint64_t a1, uint64_t a2, void *a3, void *a4, int a5)
{
  int v366 = a5 - 1;
  if (a5 >= 1)
  {
    float v364 = (void **)(a1 + 1168);
    v362 = (void **)(a1 + 1184);
    vDSP_Length v6 = (float32x4_t **)(a1 + 1176);
    int v7 = a5 - 1;
    while (1)
    {
      int v9 = *(unsigned __int8 *)(a1 + 2040);
      if (*(unsigned char *)(a1 + 2040)) {
        int v10 = v366 - v7;
      }
      else {
        int v10 = v7;
      }
      if (*(unsigned char *)(a1 + 2040)) {
        BOOL v11 = v10 < v366;
      }
      else {
        BOOL v11 = v10 > 0;
      }
      if (*(unsigned char *)(a1 + 2040)) {
        BOOL v12 = v10 > 0;
      }
      else {
        BOOL v12 = v10 < v366;
      }
      int v13 = v10 - 1;
      if (*(unsigned char *)(a1 + 2040)) {
        int v14 = v10 + 1;
      }
      else {
        int v14 = v10 - 1;
      }
      int v363 = v14;
      memmove(*(void **)(*(void *)(a1 + 584) + 8 * v10), *(const void **)(*a4 + 8 * v10), 4 * *(int *)(a1 + 52));
      uint64_t v15 = 8 * v10;
      if (v12)
      {
        if (!v9) {
          int v13 = v10 + 1;
        }
        bzero(*(void **)(a1 + 704), 4 * *(int *)(a1 + 52));
        cblas_sgemv_NEWLAPACK();
        uint64_t v16 = *(void *)(a1 + 584);
        uint64_t v17 = *(void *)(a1 + 472);
        uint64_t v18 = *(int *)(a1 + 52);
        int v19 = (int)v18 / 8;
        if ((int)v18 >= 8)
        {
          uint64_t v20 = *(float32x4_t **)(v16 + 8 * v10);
          uint64_t v21 = *(float32x4_t **)(v17 + 8 * v13);
          int v22 = (int)v18 / 8;
          uint64_t v23 = *(float32x4_t **)(a1 + 704);
          do
          {
            float32x4_t v25 = *v23;
            float32x4_t v24 = v23[1];
            v23 += 2;
            float32x4_t v27 = *v21;
            float32x4_t v26 = v21[1];
            v21 += 2;
            float32x4_t v28 = vmlaq_f32(v20[1], v26, v24);
            *uint64_t v20 = vmlaq_f32(*v20, v27, v25);
            v20[1] = v28;
            v20 += 2;
            --v22;
          }
          while (v22);
        }
        int v29 = 8 * v19;
        if (8 * v19 < (int)v18)
        {
          uint64_t v30 = *(void *)(v17 + 8 * v13);
          uint64_t v31 = *(void *)(a1 + 704);
          uint64_t v32 = *(void *)(v16 + 8 * v10);
          uint64_t v33 = v29;
          unint64_t v34 = v18 - v29;
          if (v34 < 8) {
            goto LABEL_39;
          }
          uint64_t v35 = 4 * v29;
          unint64_t v36 = v32 + 4 * v18;
          BOOL v37 = v32 + v35 >= (unint64_t)(v30 + 4 * v18) || v30 + 4 * v29 >= v36;
          BOOL v38 = !v37;
          if (v31 + v35 < v36 && v32 + v35 < (unint64_t)(v31 + 4 * v18)) {
            goto LABEL_39;
          }
          if (v38) {
            goto LABEL_39;
          }
          uint64_t v40 = v34 - (v18 & 7) + v33;
          uint64_t v41 = v33 + (v18 & 7) - v18;
          uint64_t v42 = (float32x4_t *)(v32 + v35 + 16);
          float32x4_t v43 = (float32x4_t *)(v31 + v35 + 16);
          uint64_t v44 = (float32x4_t *)(v30 + v35 + 16);
          do
          {
            float32x4_t v45 = vmlaq_f32(*v42, *v44, *v43);
            v42[-1] = vmlaq_f32(v42[-1], v44[-1], v43[-1]);
            float32x4_t *v42 = v45;
            v42 += 2;
            v43 += 2;
            v44 += 2;
            v41 += 8;
          }
          while (v41);
          uint64_t v33 = v40;
          if ((v18 & 7) != 0)
          {
LABEL_39:
            uint64_t v46 = v18 - v33;
            uint64_t v47 = (float *)(v32 + 4 * v33);
            unint64_t v48 = (float *)(v30 + 4 * v33);
            float v49 = (float *)(v31 + 4 * v33);
            do
            {
              float v50 = *v49++;
              float v51 = v50;
              float v52 = *v48++;
              float *v47 = *v47 + (float)(v52 * v51);
              ++v47;
              --v46;
            }
            while (v46);
          }
        }
        cblas_sgemv_NEWLAPACK();
        cblas_sgemv_NEWLAPACK();
      }
      sub_19E1C7244(v364, (const void **)(*(void *)(a1 + 424) + v15), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 528));
      sub_19E1C7244(v362, (const void **)(*(void *)(a1 + 400) + v15), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 524));
      sub_19E1C7244((void **)(a1 + 1176), (const void **)(*(void *)(a1 + 376) + v15), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 520));
      bzero(*(void **)(*(void *)(a1 + 608) + 8 * v10), 4 * *(int *)(a1 + 52));
      uint64_t v53 = *(void *)(a1 + 608);
      uint64_t v54 = *(unsigned int *)(a1 + 52);
      uint64_t v55 = (int)v54;
      if ((int)v54 <= 0)
      {
        int v74 = -8 * (-(int)v54 >> 3);
        if (v74 >= (int)v55) {
          goto LABEL_61;
        }
LABEL_53:
        uint64_t v75 = *(void *)(v53 + 8 * v10);
        unint64_t v76 = (char *)*v364;
        unint64_t v77 = v74;
        unint64_t v78 = v55 - v74;
        if (v78 < 8) {
          goto LABEL_59;
        }
        unint64_t v79 = v75 + 4 * v74;
        unint64_t v80 = (unint64_t)&v76[4 * v74];
        if (v79 < (unint64_t)&v76[4 * v55] && v80 < v75 + 4 * v55) {
          goto LABEL_59;
        }
        unint64_t v81 = v78 - (v55 & 7) + v74;
        uint64_t v82 = v74 + (unint64_t)(v55 & 7) - v55;
        uint64_t v83 = (float32x4_t *)(v79 + 16);
        uint64_t v84 = (float32x4_t *)(v80 + 16);
        do
        {
          float32x4_t v85 = vmulq_f32(*v84, *v83);
          v83[-1] = vmulq_f32(v84[-1], v83[-1]);
          float32x4_t *v83 = v85;
          v83 += 2;
          v84 += 2;
          v82 += 8;
        }
        while (v82);
        unint64_t v77 = v81;
        if ((v55 & 7) != 0)
        {
LABEL_59:
          uint64_t v86 = v55 - v77;
          float32x4_t v87 = (float *)&v76[4 * v77];
          uint64_t v88 = (float *)(v75 + 4 * v77);
          do
          {
            float v89 = *v87++;
            float *v88 = v89 * *v88;
            ++v88;
            --v86;
          }
          while (v86);
        }
        goto LABEL_61;
      }
      unint64_t v56 = *(float32x4_t **)(*(void *)(a1 + 584) + 8 * v10);
      unint64_t v57 = *(float32x4_t **)(*(void *)(a1 + 448) + 8 * v10);
      unint64_t v58 = *(void *)(v53 + 8 * v10);
      if (v54 < 8) {
        break;
      }
      uint64_t v59 = 0;
      unint64_t v118 = v58 + 4 * v54;
      BOOL v120 = v58 < (unint64_t)v57->u64 + 4 * v54 && (unint64_t)v57 < v118;
      if ((unint64_t)v56 < v118 && v58 < (unint64_t)v56->u64 + 4 * v54) {
        goto LABEL_45;
      }
      if (v120) {
        goto LABEL_45;
      }
      uint64_t v59 = v54 & 0x7FFFFFF8;
      uint64_t v122 = v56 + 1;
      uint64_t v123 = v57 + 1;
      uint64_t v124 = (float32x4_t *)(v58 + 16);
      uint64_t v125 = v54 & 0xFFFFFFF8;
      do
      {
        float32x4_t v126 = vaddq_f32(vmlsq_f32(*v122, *v122, *v123), *v124);
        v124[-1] = vaddq_f32(vmlsq_f32(v122[-1], v122[-1], v123[-1]), v124[-1]);
        float32x4_t *v124 = v126;
        v122 += 2;
        v123 += 2;
        v124 += 2;
        v125 -= 8;
      }
      while (v125);
      if (v59 != v54) {
        goto LABEL_45;
      }
LABEL_47:
      int v68 = (int)v54 / 8;
      if ((int)v54 > 7)
      {
        uint64_t v69 = 0;
        uint64_t v70 = (char *)*v364;
        do
        {
          uint64_t v71 = (float32x4_t *)(v58 + 32 * v69);
          unint64_t v72 = (float32x4_t *)&v70[32 * v69];
          float32x4_t v73 = vmulq_f32(v72[1], v71[1]);
          *uint64_t v71 = vmulq_f32(*v72, *v71);
          v71[1] = v73;
          ++v69;
        }
        while (v68 != v69);
      }
      int v74 = 8 * v68;
      if (8 * v68 < (int)v55) {
        goto LABEL_53;
      }
LABEL_61:
      uint64_t v90 = *(void *)(a1 + 632);
      if (!v11)
      {
        memmove(*(void **)(v90 + 8 * v10), *(const void **)(*(void *)(a1 + 496) + 8 * v10), 4 * *(int *)(a1 + 52));
        uint64_t v113 = *(void *)(a1 + 632);
        uint64_t v114 = *(unsigned int *)(a1 + 52);
        uint64_t v115 = (int)v114;
        if ((int)v114 <= 0)
        {
          int v169 = (uint64_t *)(*(void *)(a1 + 584) + 8 * v10);
          int v170 = -(-(int)v114 >> 3);
        }
        else
        {
          unint64_t v116 = *(float32x4_t **)(v113 + 8 * v10);
          if (v114 < 8)
          {
            uint64_t v117 = 0;
            goto LABEL_129;
          }
          uint64_t v117 = v114 & 0x7FFFFFF8;
          unint64_t v176 = v116 + 1;
          uint64_t v177 = v114 & 0xFFFFFFF8;
          do
          {
            float32x4_t v178 = vnegq_f32(*v176);
            v176[-1] = vnegq_f32(v176[-1]);
            float32x4_t *v176 = v178;
            v176 += 2;
            v177 -= 8;
          }
          while (v177);
          if (v117 != v114)
          {
LABEL_129:
            uint64_t v179 = v114 - v117;
            float v180 = &v116->f32[v117];
            do
            {
              float *v180 = -*v180;
              ++v180;
              --v179;
            }
            while (v179);
          }
          int v169 = (uint64_t *)(*(void *)(a1 + 584) + 8 * v10);
          int v170 = (int)v114 / 8;
          if ((int)v114 > 7)
          {
            uint64_t v181 = 0;
            uint64_t v182 = *v169;
            do
            {
              uint64_t v183 = &v116[2 * v181];
              uint64_t v184 = (float32x4_t *)(v182 + 32 * v181);
              float32x4_t v185 = vmulq_f32(v183[1], v184[1]);
              float32x4_t *v183 = vmulq_f32(*v183, *v184);
              v183[1] = v185;
              ++v181;
            }
            while (v170 != v181);
          }
        }
        int v186 = 8 * v170;
        if (8 * v170 < (int)v115)
        {
          uint64_t v187 = *v169;
          uint64_t v188 = *(void *)(v113 + 8 * v10);
          unint64_t v189 = v186;
          unint64_t v190 = v115 - v186;
          if (v190 < 8) {
            goto LABEL_141;
          }
          unint64_t v191 = v188 + 4 * v186;
          unint64_t v192 = v187 + 4 * v186;
          if (v191 < v187 + 4 * v115 && v192 < v188 + 4 * v115) {
            goto LABEL_141;
          }
          unint64_t v193 = v190 - (v115 & 7) + v186;
          uint64_t v194 = v186 + (unint64_t)(v115 & 7) - v115;
          int v195 = (float32x4_t *)(v192 + 16);
          char v196 = (float32x4_t *)(v191 + 16);
          do
          {
            float32x4_t v197 = vmulq_f32(*v196, *v195);
            v196[-1] = vmulq_f32(v196[-1], v195[-1]);
            float32x4_t *v196 = v197;
            v195 += 2;
            v196 += 2;
            v194 += 8;
          }
          while (v194);
          unint64_t v189 = v193;
          if ((v115 & 7) != 0)
          {
LABEL_141:
            uint64_t v198 = v115 - v189;
            uint64_t v199 = (float *)(v188 + 4 * v189);
            uint64_t v200 = (float *)(v187 + 4 * v189);
            do
            {
              float v201 = *v200++;
              float *v199 = *v199 * v201;
              ++v199;
              --v198;
            }
            while (v198);
          }
        }
        uint64_t v202 = *(void *)(a1 + 632);
        uint64_t v203 = *(int *)(a1 + 52);
        int v204 = (int)v203 / 8;
        if ((int)v203 >= 8)
        {
          float32x4_t v205 = *(float32x4_t **)(v202 + 8 * v10);
          float32x4_t v206 = *v6;
          int v207 = (int)v203 / 8;
          do
          {
            float32x4_t v208 = *v206;
            float32x4_t v209 = v206[1];
            v206 += 2;
            float32x4_t v210 = vmulq_f32(v209, v205[1]);
            float32x4_t *v205 = vmulq_f32(v208, *v205);
            v205[1] = v210;
            v205 += 2;
            --v207;
          }
          while (v207);
        }
        int v211 = 8 * v204;
        if (8 * v204 < (int)v203)
        {
          uint64_t v212 = *(void *)(v202 + 8 * v10);
          uint64_t v213 = *v6;
          unint64_t v214 = v211;
          unint64_t v215 = v203 - v211;
          if (v215 < 8) {
            goto LABEL_156;
          }
          unint64_t v216 = v212 + 4 * v211;
          unint64_t v217 = (unint64_t)&v213[v211 / 4u];
          if (v216 < (unint64_t)v213->u64 + 4 * v203 && v217 < v212 + 4 * v203) {
            goto LABEL_156;
          }
          unint64_t v219 = v215 - (v203 & 7) + v211;
          uint64_t v220 = v211 + (unint64_t)(v203 & 7) - v203;
          uint64_t v221 = (float32x4_t *)(v216 + 16);
          vDSP_Length v222 = (float32x4_t *)(v217 + 16);
          do
          {
            float32x4_t v223 = vmulq_f32(*v222, *v221);
            v221[-1] = vmulq_f32(v222[-1], v221[-1]);
            float32x4_t *v221 = v223;
            v221 += 2;
            v222 += 2;
            v220 += 8;
          }
          while (v220);
          unint64_t v214 = v219;
          if ((v203 & 7) != 0)
          {
LABEL_156:
            uint64_t v224 = v203 - v214;
            v225 = &v213->f32[v214];
            int64_t v226 = (float *)(v212 + 4 * v214);
            do
            {
              float v227 = *v225++;
              float *v226 = v227 * *v226;
              ++v226;
              --v224;
            }
            while (v224);
          }
        }
        goto LABEL_158;
      }
      uint64_t v91 = *(unsigned int *)(a1 + 52);
      uint64_t v92 = (int)v91;
      if ((int)v91 > 0)
      {
        float v93 = *(float32x4_t **)(*(void *)(a1 + 112) + 8 * v363);
        float v94 = *(float32x4_t **)(*(void *)(a1 + 496) + 8 * v10);
        float v95 = *(float32x4_t **)(v90 + 8 * v10);
        if (v91 < 8)
        {
          uint64_t v96 = 0;
          goto LABEL_65;
        }
        uint64_t v96 = 0;
        if ((unint64_t)((char *)v95 - (char *)v93) < 0x20) {
          goto LABEL_65;
        }
        if ((unint64_t)((char *)v95 - (char *)v94) < 0x20) {
          goto LABEL_65;
        }
        uint64_t v96 = v91 & 0x7FFFFFF8;
        uint64_t v171 = v93 + 1;
        uint64_t v172 = v94 + 1;
        unint64_t v173 = v95 + 1;
        uint64_t v174 = v91 & 0xFFFFFFF8;
        do
        {
          float32x4_t v175 = vsubq_f32(*v171, *v172);
          v173[-1] = vsubq_f32(v171[-1], v172[-1]);
          float32x4_t *v173 = v175;
          v171 += 2;
          v172 += 2;
          v173 += 2;
          v174 -= 8;
        }
        while (v174);
        if (v96 != v91)
        {
LABEL_65:
          uint64_t v97 = v91 - v96;
          uint64_t v98 = v96;
          uint64_t v99 = &v95->f32[v96];
          int v100 = &v94->f32[v98];
          uint64_t v101 = &v93->f32[v98];
          do
          {
            float v102 = *v101++;
            float v103 = v102;
            float v104 = *v100++;
            *v99++ = v103 - v104;
            --v97;
          }
          while (v97);
        }
        uint64_t v105 = (uint64_t *)(*(void *)(a1 + 584) + 8 * v10);
        int v106 = (int)v91 / 8;
        if ((int)v91 > 7)
        {
          uint64_t v107 = 0;
          uint64_t v108 = *v105;
          do
          {
            float32x4_t v109 = &v95[2 * v107];
            float v110 = (float32x4_t *)(v108 + 32 * v107);
            float32x4_t v111 = vmulq_f32(v109[1], v110[1]);
            float32x4_t *v109 = vmulq_f32(*v109, *v110);
            v109[1] = v111;
            ++v107;
          }
          while (v106 != v107);
        }
        int v112 = 8 * v106;
        if (8 * v106 >= (int)v92) {
          goto LABEL_103;
        }
LABEL_92:
        uint64_t v127 = *v105;
        uint64_t v128 = *(void *)(v90 + 8 * v10);
        unint64_t v129 = v112;
        unint64_t v130 = v92 - v112;
        if (v130 < 8) {
          goto LABEL_101;
        }
        unint64_t v131 = v128 + 4 * v112;
        unint64_t v132 = v127 + 4 * v112;
        if (v131 < v127 + 4 * v92 && v132 < v128 + 4 * v92) {
          goto LABEL_101;
        }
        unint64_t v134 = v130 - (v92 & 7) + v112;
        uint64_t v135 = v112 + (unint64_t)(v92 & 7) - v92;
        unint64_t v136 = (float32x4_t *)(v132 + 16);
        unint64_t v137 = (float32x4_t *)(v131 + 16);
        do
        {
          float32x4_t v138 = vmulq_f32(*v137, *v136);
          v137[-1] = vmulq_f32(v137[-1], v136[-1]);
          float32x4_t *v137 = v138;
          v136 += 2;
          v137 += 2;
          v135 += 8;
        }
        while (v135);
        unint64_t v129 = v134;
        if ((v92 & 7) != 0)
        {
LABEL_101:
          uint64_t v139 = v92 - v129;
          BOOL v140 = (float *)(v128 + 4 * v129);
          BOOL v141 = (float *)(v127 + 4 * v129);
          do
          {
            float v142 = *v141++;
            float *v140 = *v140 * v142;
            ++v140;
            --v139;
          }
          while (v139);
        }
        goto LABEL_103;
      }
      uint64_t v105 = (uint64_t *)(*(void *)(a1 + 584) + 8 * v10);
      int v112 = -8 * (-(int)v91 >> 3);
      if (v112 < (int)v92) {
        goto LABEL_92;
      }
LABEL_103:
      uint64_t v143 = *(void *)(a1 + 632);
      uint64_t v144 = *(int *)(a1 + 52);
      int v145 = (int)v144 / 8;
      if ((int)v144 >= 8)
      {
        uint64_t v146 = *(float32x4_t **)(v143 + 8 * v10);
        unint64_t v147 = *v6;
        int v148 = (int)v144 / 8;
        do
        {
          float32x4_t v149 = *v147;
          float32x4_t v150 = v147[1];
          v147 += 2;
          float32x4_t v151 = vmulq_f32(v150, v146[1]);
          float32x4_t *v146 = vmulq_f32(v149, *v146);
          v146[1] = v151;
          v146 += 2;
          --v148;
        }
        while (v148);
      }
      int v152 = 8 * v145;
      if (8 * v145 < (int)v144)
      {
        uint64_t v153 = *(void *)(v143 + 8 * v10);
        vDSP_Length v154 = *v6;
        unint64_t v155 = v152;
        unint64_t v156 = v144 - v152;
        if (v156 < 8) {
          goto LABEL_116;
        }
        unint64_t v157 = v153 + 4 * v152;
        unint64_t v158 = (unint64_t)&v154[v152 / 4u];
        if (v157 < (unint64_t)v154->u64 + 4 * v144 && v158 < v153 + 4 * v144) {
          goto LABEL_116;
        }
        unint64_t v160 = v156 - (v144 & 7) + v152;
        uint64_t v161 = v152 + (unint64_t)(v144 & 7) - v144;
        float v162 = (float32x4_t *)(v157 + 16);
        int v163 = (float32x4_t *)(v158 + 16);
        do
        {
          float32x4_t v164 = vmulq_f32(*v163, *v162);
          v162[-1] = vmulq_f32(v163[-1], v162[-1]);
          float32x4_t *v162 = v164;
          v162 += 2;
          v163 += 2;
          v161 += 8;
        }
        while (v161);
        unint64_t v155 = v160;
        if ((v144 & 7) != 0)
        {
LABEL_116:
          uint64_t v165 = v144 - v155;
          float32x4_t v166 = &v154->f32[v155];
          float32x4_t v167 = (float *)(v153 + 4 * v155);
          do
          {
            float v168 = *v166++;
            float *v167 = v168 * *v167;
            ++v167;
            --v165;
          }
          while (v165);
        }
      }
LABEL_158:
      if (v11)
      {
        cblas_sgemv_NEWLAPACK();
        uint64_t v228 = *(void *)(a1 + 656);
        uint64_t v229 = *(void *)(a1 + 112);
        uint64_t v230 = *(int *)(a1 + 52);
        if ((int)v230 >= 8)
        {
          uint64_t v231 = *(float32x4_t **)(v228 + 8 * v10);
          uint64_t v232 = *(float32x4_t **)(v229 + 8 * v363);
          int v233 = (int)v230 / 8;
          do
          {
            float32x4_t v234 = *v232;
            float32x4_t v235 = v232[1];
            v232 += 2;
            float32x4_t v236 = vmulq_f32(v235, v231[1]);
            *uint64_t v231 = vmulq_f32(v234, *v231);
            v231[1] = v236;
            v231 += 2;
            --v233;
          }
          while (v233);
        }
        int v237 = 8 * ((int)v230 / 8);
        if (v237 < (int)v230)
        {
          uint64_t v238 = *(void *)(v228 + 8 * v10);
          uint64_t v239 = *(void *)(v229 + 8 * v363);
          uint64_t v240 = v237;
          unint64_t v241 = v230 - v237;
          if (v241 < 8) {
            goto LABEL_172;
          }
          unint64_t v242 = v238 + 4 * v240;
          unint64_t v243 = v239 + 4 * v240;
          if (v242 < v239 + 4 * v230 && v243 < v238 + 4 * v230) {
            goto LABEL_172;
          }
          uint64_t v245 = v241 - (v230 & 7) + v240;
          uint64_t v246 = v240 + (v230 & 7) - v230;
          uint64_t v247 = (float32x4_t *)(v242 + 16);
          unint64_t v248 = (float32x4_t *)(v243 + 16);
          do
          {
            float32x4_t v249 = vmulq_f32(*v248, *v247);
            v247[-1] = vmulq_f32(v248[-1], v247[-1]);
            *uint64_t v247 = v249;
            v247 += 2;
            v248 += 2;
            v246 += 8;
          }
          while (v246);
          uint64_t v240 = v245;
          if ((v230 & 7) != 0)
          {
LABEL_172:
            uint64_t v250 = v230 - v240;
            uint64_t v251 = (float *)(v239 + 4 * v240);
            uint64_t v252 = (float *)(v238 + 4 * v240);
            do
            {
              float v253 = *v251++;
              float *v252 = v253 * *v252;
              ++v252;
              --v250;
            }
            while (v250);
          }
        }
        uint64_t v254 = *(void *)(a1 + 656);
        uint64_t v255 = *(int *)(a1 + 52);
        int v256 = (int)v255 / 8;
        if ((int)v255 >= 8)
        {
          float32x4_t v257 = *(float32x4_t **)(v254 + 8 * v10);
          uint64_t v258 = (float32x4_t *)*v362;
          int v259 = (int)v255 / 8;
          do
          {
            float32x4_t v260 = *v258;
            float32x4_t v261 = v258[1];
            v258 += 2;
            float32x4_t v262 = vmulq_f32(v261, v257[1]);
            *float32x4_t v257 = vmulq_f32(v260, *v257);
            v257[1] = v262;
            v257 += 2;
            --v259;
          }
          while (v259);
        }
        int v263 = 8 * v256;
        if (8 * v256 < (int)v255)
        {
          uint64_t v264 = *(void *)(v254 + 8 * v10);
          uint64_t v265 = (char *)*v362;
          unint64_t v266 = v263;
          unint64_t v267 = v255 - v263;
          if (v267 < 8) {
            goto LABEL_187;
          }
          unint64_t v268 = v264 + 4 * v263;
          unint64_t v269 = (unint64_t)&v265[4 * v263];
          if (v268 < (unint64_t)&v265[4 * v255] && v269 < v264 + 4 * v255) {
            goto LABEL_187;
          }
          unint64_t v271 = v267 - (v255 & 7) + v263;
          uint64_t v272 = v263 + (unint64_t)(v255 & 7) - v255;
          uint64_t v273 = (float32x4_t *)(v268 + 16);
          v274 = (float32x4_t *)(v269 + 16);
          do
          {
            float32x4_t v275 = vmulq_f32(*v274, *v273);
            v273[-1] = vmulq_f32(v274[-1], v273[-1]);
            *uint64_t v273 = v275;
            v273 += 2;
            v274 += 2;
            v272 += 8;
          }
          while (v272);
          unint64_t v266 = v271;
          if ((v255 & 7) != 0)
          {
LABEL_187:
            uint64_t v276 = v255 - v266;
            float32x4_t v277 = (float *)&v265[4 * v266];
            float32x4_t v278 = (float *)(v264 + 4 * v266);
            do
            {
              float v279 = *v277++;
              float *v278 = v279 * *v278;
              ++v278;
              --v276;
            }
            while (v276);
          }
        }
      }
      else
      {
        bzero(*(void **)(*(void *)(a1 + 656) + 8 * v10), 4 * *(int *)(a1 + 52));
      }
      if (((**(uint64_t (***)(uint64_t))a1)(a1) & 1) == 0)
      {
        bzero(*(void **)(*(void *)(a1 + 560) + 8 * v10), 4 * *(int *)(a1 + 48));
        cblas_sgemv_NEWLAPACK();
        cblas_sgemv_NEWLAPACK();
        cblas_sgemv_NEWLAPACK();
      }
      if (v7-- <= 0) {
        goto LABEL_193;
      }
    }
    uint64_t v59 = 0;
LABEL_45:
    uint64_t v60 = v54 - v59;
    uint64_t v61 = v59;
    uint64_t v62 = (float *)(v58 + 4 * v59);
    uint64_t v63 = &v57->f32[v61];
    unint64_t v64 = &v56->f32[v61];
    do
    {
      float v65 = *v64++;
      float v66 = v65;
      float v67 = *v63++;
      *uint64_t v62 = (float)(v66 - (float)(v67 * v66)) + *v62;
      ++v62;
      --v60;
    }
    while (v60);
    goto LABEL_47;
  }
LABEL_193:
  if (*(int *)(a1 + 56) > 0)
  {
    *(_DWORD *)(a1 + 728) = 0;
    *(_DWORD *)(a1 + 968) = 0;
    *(_DWORD *)(a1 + 848) = 0;
  }
  if (a5 > 1)
  {
    int v280 = 1;
    int v281 = a5 - 2;
    do
    {
      if (*(unsigned char *)(a1 + 2040)) {
        int v282 = v281;
      }
      else {
        int v282 = v280;
      }
      if (*(unsigned char *)(a1 + 2040)) {
        int v283 = 1;
      }
      else {
        int v283 = -1;
      }
      int v284 = v282 + v283;
      if (*(unsigned char *)(a1 + 2040)) {
        int v285 = a5 - 2;
      }
      else {
        int v285 = 1;
      }
      BOOL v286 = v282 == v285;
      uint64_t v287 = 8 * v282;
      uint64_t v288 = 8 * v284;
      sub_19E1C7984(*(void *)(a1 + 64) + v287, *(void *)(a1 + 632) + v287, *(void *)(a1 + 112) + v288, (void **)(a1 + 1104), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v286);
      sub_19E1C7984(*(void *)(a1 + 64) + v287, *(void *)(a1 + 656) + v287, *(void *)(a1 + 112) + v288, (void **)(a1 + 1096), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v286);
      sub_19E1C7984(*(void *)(a1 + 64) + v287, *(void *)(a1 + 608) + v287, *(void *)(a1 + 112) + v288, (void **)(a1 + 1112), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v286);
      ++v280;
      --v281;
    }
    while (v281 != -1);
  }
  int v289 = a5;
  uint64_t v290 = a3;
  if (a5 >= 1)
  {
    int v291 = 0;
    while (1)
    {
      if (*(unsigned char *)(a1 + 2040)) {
        int v295 = v366 - v291;
      }
      else {
        int v295 = v291;
      }
      if (*(unsigned char *)(a1 + 2040)) {
        int v296 = v366;
      }
      else {
        int v296 = 0;
      }
      if (v290[1] == *v290)
      {
        uint64_t v292 = *(void *)(a1 + 656);
LABEL_210:
        BOOL v293 = v295 == v296;
        uint64_t v294 = 8 * v295;
        sub_19E1C7984(*(void *)(a1 + 64) + v294, v292 + v294, *(void *)(a1 + 64) + v294, (void **)(a1 + 1072), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v293);
        sub_19E1C7984(*(void *)(a1 + 64) + v294, *(void *)(a1 + 632) + v294, *(void *)(a1 + 64) + v294, (void **)(a1 + 1080), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v293);
        sub_19E1C7984(*(void *)(a1 + 64) + v294, *(void *)(a1 + 608) + v294, *(void *)(a1 + 64) + v294, (void **)(a1 + 1088), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v293);
        goto LABEL_211;
      }
      uint64_t v292 = *(void *)(a1 + 656);
      if (*(int *)(a1 + 56) < 1) {
        goto LABEL_210;
      }
      int v365 = v291;
      uint64_t v297 = v295;
      uint64_t v298 = *(void *)(a1 + 208);
      uint64_t v299 = 24 * v295;
      v301 = *(unsigned char **)(v298 + v299);
      uint64_t v300 = *(unsigned char **)(v298 + v299 + 8);
      size_t v302 = v300 - v301;
      if (v300 == v301) {
        break;
      }
      if ((v302 & 0x8000000000000000) != 0) {
        sub_19E13D694();
      }
      size_t v303 = operator new(v300 - v301);
      memcpy(v303, v301, v302);
      uint64_t v304 = *(unsigned int *)(a1 + 52);
      if ((int)v304 >= 1) {
        goto LABEL_225;
      }
LABEL_232:
      if (*(int *)(a1 + 724) < 1)
      {
        ++*(_DWORD *)(a1 + 728);
        if (!v303) {
          goto LABEL_238;
        }
      }
      else
      {
        uint64_t v317 = 0;
        uint64_t v318 = *(void *)(a1 + 760);
        do
        {
          *(_DWORD *)(*(void *)(v318 + 24 * *(int *)(a1 + 728)) + 4 * v317) = *((_DWORD *)v303 + v317);
          ++v317;
        }
        while (v317 < *(int *)(a1 + 724));
        ++*(_DWORD *)(a1 + 728);
      }
      operator delete(v303);
      uint64_t v298 = *(void *)(a1 + 208);
LABEL_238:
      uint64_t v319 = *(void *)(a1 + 632);
      uint64_t v320 = *(unsigned char **)(v298 + 24 * (int)v297);
      int v321 = *(unsigned char **)(v298 + v299 + 8);
      size_t v322 = v321 - v320;
      if (v321 == v320)
      {
        size_t v323 = 0;
        uint64_t v324 = *(unsigned int *)(a1 + 52);
        if ((int)v324 < 1) {
          goto LABEL_250;
        }
LABEL_243:
        uint64_t v325 = 0;
        uint64_t v326 = *(void *)(v319 + 8 * v297);
        uint64_t v327 = *(void *)(*(void *)(a1 + 856) + 8 * *(int *)(a1 + 848));
        if (v324 < 8) {
          goto LABEL_248;
        }
        if ((unint64_t)(v327 - v326) < 0x20) {
          goto LABEL_248;
        }
        uint64_t v325 = v324 & 0x7FFFFFF8;
        float32x4_t v328 = (long long *)(v326 + 16);
        float32x4_t v329 = (_OWORD *)(v327 + 16);
        uint64_t v330 = v324 & 0xFFFFFFF8;
        do
        {
          long long v331 = *v328;
          *(v329 - 1) = *(v328 - 1);
          _OWORD *v329 = v331;
          v328 += 2;
          v329 += 2;
          v330 -= 8;
        }
        while (v330);
        if (v325 != v324)
        {
LABEL_248:
          uint64_t v332 = v324 - v325;
          uint64_t v333 = 4 * v325;
          float32x4_t v334 = (_DWORD *)(v327 + 4 * v325);
          float32x4_t v335 = (int *)(v326 + v333);
          do
          {
            int v336 = *v335++;
            *v334++ = v336;
            --v332;
          }
          while (v332);
        }
        goto LABEL_250;
      }
      if ((v322 & 0x8000000000000000) != 0) {
        sub_19E13D694();
      }
      size_t v323 = operator new(v321 - v320);
      memcpy(v323, v320, v322);
      uint64_t v324 = *(unsigned int *)(a1 + 52);
      if ((int)v324 >= 1) {
        goto LABEL_243;
      }
LABEL_250:
      if (*(int *)(a1 + 844) < 1)
      {
        ++*(_DWORD *)(a1 + 848);
        if (!v323) {
          goto LABEL_256;
        }
      }
      else
      {
        uint64_t v337 = 0;
        uint64_t v338 = *(void *)(a1 + 880);
        do
        {
          *(_DWORD *)(*(void *)(v338 + 24 * *(int *)(a1 + 848)) + 4 * v337) = *((_DWORD *)v323 + v337);
          ++v337;
        }
        while (v337 < *(int *)(a1 + 844));
        ++*(_DWORD *)(a1 + 848);
      }
      operator delete(v323);
      uint64_t v298 = *(void *)(a1 + 208);
LABEL_256:
      uint64_t v339 = *(void *)(a1 + 608);
      uint64_t v340 = *(unsigned char **)(v298 + 24 * (int)v297);
      uint64_t v341 = *(unsigned char **)(v298 + v299 + 8);
      size_t v342 = v341 - v340;
      if (v341 != v340)
      {
        if ((v342 & 0x8000000000000000) != 0) {
          sub_19E13D694();
        }
        uint64_t v343 = operator new(v341 - v340);
        memcpy(v343, v340, v342);
        uint64_t v344 = *(unsigned int *)(a1 + 52);
        int v289 = a5;
        uint64_t v290 = a3;
        int v291 = v365;
        if ((int)v344 < 1) {
          goto LABEL_268;
        }
LABEL_261:
        uint64_t v345 = 0;
        uint64_t v346 = *(void *)(v339 + 8 * v297);
        uint64_t v347 = *(void *)(*(void *)(a1 + 976) + 8 * *(int *)(a1 + 968));
        if (v344 < 8) {
          goto LABEL_266;
        }
        if ((unint64_t)(v347 - v346) < 0x20) {
          goto LABEL_266;
        }
        uint64_t v345 = v344 & 0x7FFFFFF8;
        BOOL v348 = (long long *)(v346 + 16);
        BOOL v349 = (_OWORD *)(v347 + 16);
        uint64_t v350 = v344 & 0xFFFFFFF8;
        do
        {
          long long v351 = *v348;
          *(v349 - 1) = *(v348 - 1);
          _OWORD *v349 = v351;
          v348 += 2;
          v349 += 2;
          v350 -= 8;
        }
        while (v350);
        if (v345 != v344)
        {
LABEL_266:
          uint64_t v352 = v344 - v345;
          uint64_t v353 = 4 * v345;
          uint64_t v354 = (_DWORD *)(v347 + 4 * v345);
          v355 = (int *)(v346 + v353);
          do
          {
            int v356 = *v355++;
            *v354++ = v356;
            --v352;
          }
          while (v352);
        }
        goto LABEL_268;
      }
      uint64_t v343 = 0;
      uint64_t v344 = *(unsigned int *)(a1 + 52);
      int v289 = a5;
      uint64_t v290 = a3;
      int v291 = v365;
      if ((int)v344 >= 1) {
        goto LABEL_261;
      }
LABEL_268:
      if (*(int *)(a1 + 964) >= 1)
      {
        uint64_t v357 = 0;
        uint64_t v358 = *(void *)(a1 + 1000);
        do
        {
          *(_DWORD *)(*(void *)(v358 + 24 * *(int *)(a1 + 968)) + 4 * v357) = *((_DWORD *)v343 + v357);
          ++v357;
        }
        while (v357 < *(int *)(a1 + 964));
        ++*(_DWORD *)(a1 + 968);
LABEL_273:
        operator delete(v343);
        goto LABEL_211;
      }
      ++*(_DWORD *)(a1 + 968);
      if (v343) {
        goto LABEL_273;
      }
LABEL_211:
      if (++v291 == v289) {
        return;
      }
    }
    size_t v303 = 0;
    uint64_t v304 = *(unsigned int *)(a1 + 52);
    if ((int)v304 < 1) {
      goto LABEL_232;
    }
LABEL_225:
    uint64_t v305 = 0;
    uint64_t v306 = *(void *)(v292 + 8 * v297);
    uint64_t v307 = *(void *)(*(void *)(a1 + 736) + 8 * *(int *)(a1 + 728));
    if (v304 < 8) {
      goto LABEL_230;
    }
    if ((unint64_t)(v307 - v306) < 0x20) {
      goto LABEL_230;
    }
    uint64_t v305 = v304 & 0x7FFFFFF8;
    uint64_t v308 = (long long *)(v306 + 16);
    v309 = (_OWORD *)(v307 + 16);
    uint64_t v310 = v304 & 0xFFFFFFF8;
    do
    {
      long long v311 = *v308;
      *(v309 - 1) = *(v308 - 1);
      _OWORD *v309 = v311;
      v308 += 2;
      v309 += 2;
      v310 -= 8;
    }
    while (v310);
    if (v305 != v304)
    {
LABEL_230:
      uint64_t v312 = v304 - v305;
      uint64_t v313 = 4 * v305;
      float v314 = (_DWORD *)(v307 + 4 * v305);
      float v315 = (int *)(v306 + v313);
      do
      {
        int v316 = *v315++;
        *v314++ = v316;
        --v312;
      }
      while (v312);
    }
    goto LABEL_232;
  }
}

void sub_19E228ABC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E228B04(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  a1[2040] = 1;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9458580, memory_order_acquire) & 1) == 0)
  {
    uint64_t v13 = a6;
    uint64_t v12 = a5;
    unsigned int v11 = a4;
    uint64_t v9 = a2;
    uint64_t v10 = a3;
    int v8 = __cxa_guard_acquire(&qword_1E9458580);
    a2 = v9;
    a3 = v10;
    a4 = v11;
    a5 = v12;
    a6 = v13;
    if (v8)
    {
      qword_1E9458568 = 0;
      unk_1E9458570 = 0;
      qword_1E9458578 = 0;
      __cxa_atexit((void (*)(void *))sub_19E142EEC, &qword_1E9458568, &dword_19E138000);
      __cxa_guard_release(&qword_1E9458580);
      a2 = v9;
      a3 = v10;
      a4 = v11;
      a5 = v12;
      a6 = v13;
    }
  }
  uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 304))(a1, a2, a3, a4, a5, a6, &qword_1E9458568);
  a1[2040] = 0;
  return result;
}

uint64_t sub_19E228BFC(unsigned char *a1)
{
  a1[2040] = 1;
  uint64_t result = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 296))(a1);
  a1[2040] = 0;
  return result;
}

char *sub_19E228C54(uint64_t a1, void *lpsrc)
{
  if (*(_DWORD *)(a1 + 1988) != 1) {
    sub_19E2F6320(1);
  }
  uint64_t result = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3DC8, 0);
  if (!result) {
    __cxa_bad_cast();
  }
  *(void *)(a1 + 304) = result + 232;
  *(void *)(a1 + 312) = result + 240;
  *(void *)(a1 + 320) = result + 248;
  *(void *)(a1 + 328) = result + 256;
  *(void *)(a1 + 336) = result + 264;
  *(void *)(a1 + 344) = result + 272;
  *(void *)(a1 + 352) = result + 280;
  *(void *)(a1 + 360) = result + 288;
  *(void *)(a1 + 368) = result + 296;
  return result;
}

uint64_t sub_19E228D10(uint64_t a1, void *lpsrc, float a3)
{
  if (*(_DWORD *)(a1 + 1988)) {
    sub_19E2F6320(1);
  }
  unsigned int v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3DC8, 0);
  if (!v5) {
    __cxa_bad_cast();
  }
  vDSP_Length v6 = v5;
  sub_19E21B538(a1, (const float **)(a1 + 240), (uint64_t)(v5 + 268), v5 + 178, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), *(void *)(a1 + 1120), a1 + 1192, a3);
  sub_19E21B538(a1, (const float **)(a1 + 248), (uint64_t)(v6 + 272), v6 + 238, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), *(void *)(a1 + 1136), a1 + 1264, a3);
  sub_19E21B538(a1, (const float **)(a1 + 232), (uint64_t)(v6 + 270), v6 + 208, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), *(void *)(a1 + 1128), a1 + 1336, a3);
  int v7 = *(_DWORD *)(a1 + 52);
  int v8 = *(void (****)(void, uint64_t, uint64_t, float))(a1 + 1144);
  sub_19E303188(a1 + 1408);
  if (*(_DWORD *)(a1 + 56))
  {
    (**v8)(v8, a1 + 264, (uint64_t)(v6 + 274), a3);
  }
  else
  {
    (**v8)(v8, a1 + 264, (uint64_t)(v6 + 274), a3);
    float __C = 2.0;
    float __B = -2.0;
    vDSP_vclip(*(const float **)(a1 + 264), 1, &__B, &__C, *(float **)(a1 + 264), 1, (v7 * v7));
  }
  sub_19E303190(a1 + 1408);
  int v9 = *(_DWORD *)(a1 + 52);
  uint64_t v10 = *(void (****)(void, uint64_t, uint64_t, float))(a1 + 1160);
  sub_19E303188(a1 + 1480);
  if (*(_DWORD *)(a1 + 56))
  {
    (**v10)(v10, a1 + 272, (uint64_t)(v6 + 278), a3);
  }
  else
  {
    (**v10)(v10, a1 + 272, (uint64_t)(v6 + 278), a3);
    float __C = 2.0;
    float __B = -2.0;
    vDSP_vclip(*(const float **)(a1 + 272), 1, &__B, &__C, *(float **)(a1 + 272), 1, (v9 * v9));
  }
  sub_19E303190(a1 + 1480);
  int v11 = *(_DWORD *)(a1 + 52);
  uint64_t v12 = *(void (****)(void, uint64_t, uint64_t, float))(a1 + 1152);
  sub_19E303188(a1 + 1552);
  if (*(_DWORD *)(a1 + 56))
  {
    (**v12)(v12, a1 + 256, (uint64_t)(v6 + 276), a3);
  }
  else
  {
    (**v12)(v12, a1 + 256, (uint64_t)(v6 + 276), a3);
    float __C = 2.0;
    float __B = -2.0;
    vDSP_vclip(*(const float **)(a1 + 256), 1, &__B, &__C, *(float **)(a1 + 256), 1, (v11 * v11));
  }
  return sub_19E303190(a1 + 1552);
}

void sub_19E229084()
{
}

void sub_19E229098()
{
}

void sub_19E2290B0(void *a1)
{
  unsigned int v1 = sub_19E22ACD8(a1);

  operator delete(v1);
}

void sub_19E2290D8(uint64_t a1, void *a2, void *a3, int a4, uint64_t a5)
{
  if (a3[1] != *a3 && *(int *)(a1 + 56) >= 1)
  {
    int v8 = (**(uint64_t (***)(uint64_t))a1)(a1);
    unsigned int v9 = a4 & 0xFFFFFF;
    uint64_t v10 = *(void *)(a1 + 2048);
    if (!v10) {
      goto LABEL_7;
    }
LABEL_6:
    float v11 = *(float *)(v10 + 468);
    if (v11 > 0.0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  int v8 = 0;
  unsigned int v9 = a4 & 0xFFFFFF;
  uint64_t v10 = *(void *)(a1 + 2048);
  if (v10) {
    goto LABEL_6;
  }
LABEL_7:
  float v11 = 50.0;
LABEL_8:
  unsigned int v12 = a5 != 0;
  if (v9 > v12)
  {
    unsigned int v252 = v9;
    signed int v253 = v9 - 1;
    int v251 = v8;
    do
    {
      if (*(unsigned char *)(a1 + 2040)) {
        signed int v13 = v9 + ~v12;
      }
      else {
        signed int v13 = v12;
      }
      if (*(unsigned char *)(a1 + 2040)) {
        int v14 = 1;
      }
      else {
        int v14 = -1;
      }
      unsigned int v255 = v12;
      int v256 = v14;
      if (*(unsigned char *)(a1 + 2040)) {
        BOOL v15 = v13 < v253;
      }
      else {
        BOOL v15 = v13 > 0;
      }
      BOOL v259 = v15;
      uint64_t v16 = v13;
      memmove(*(void **)(*(void *)(a1 + 64) + 8 * v13), *(const void **)(*a2 + 8 * v13), 4 * *(int *)(a1 + 44));
      int v17 = *(unsigned __int8 *)(a1 + 40);
      if (*(unsigned char *)(a1 + 40)) {
        *(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 8 * v13) + 4 * *(int *)(a1 + 48) - 4) = 1065353216;
      }
      if (v8)
      {
        int v18 = *(_DWORD *)(a1 + 48);
        int v19 = *(_DWORD **)(*(void *)(a1 + 208) + 24 * v13);
        *int v19 = **(_DWORD **)(*a3 + 24 * v13);
        if (v17) {
          v19[1] = v18 - 1;
        }
      }
      uint64_t v20 = 8 * v13;
      bzero(*(void **)(*(void *)(a1 + 376) + v20), 4 * *(int *)(a1 + 52));
      bzero(*(void **)(*(void *)(a1 + 400) + v20), 4 * *(int *)(a1 + 52));
      bzero(*(void **)(*(void *)(a1 + 424) + v20), 4 * *(int *)(a1 + 52));
      uint64_t v21 = *(void *)(a1 + 2048);
      if (v21
        && !*(unsigned char *)(v21 + 20)
        && ((int v236 = *(_DWORD *)(v21 + 40), v236 == 4) || v236 == 2)
        && *(_DWORD *)(v21 + 44) == 3)
      {
        uint64_t v237 = *(void *)(a1 + 376);
        uint64_t v238 = *(void *)(a1 + 400);
        uint64_t v239 = *(void *)(a1 + 424);
        uint64_t v240 = *(void *)(a1 + 64);
        uint64_t v241 = *(void *)(a1 + 304);
        uint64_t v242 = *(void *)(a1 + 208) + 24 * v13;
        unint64_t v270 = 0;
        unint64_t v271 = 0;
        unint64_t v269 = 0;
        uint64_t v244 = *(unsigned char **)v242;
        unint64_t v243 = *(unsigned char **)(v242 + 8);
        int64_t v245 = v243 - v244;
        if (v243 != v244)
        {
          uint64_t v248 = v237;
          uint64_t v249 = v238;
          if (v245 < 0) {
            sub_19E13D694();
          }
          uint64_t v246 = v239;
          unint64_t v269 = (char *)operator new(v243 - v244);
          unint64_t v270 = v269;
          uint64_t v247 = &v269[4 * (v245 >> 2)];
          unint64_t v271 = v247;
          memcpy(v269, v244, v245);
          unint64_t v270 = v247;
          uint64_t v239 = v246;
          int v8 = v251;
          uint64_t v237 = v248;
          uint64_t v238 = v249;
        }
        sub_19E229F70(a1, 0, (float32x4_t **)(v237 + v20), (float32x4_t **)(v238 + v20), (float32x4_t **)(v239 + v20), v240 + v20, v241, (uint64_t)&v269, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1);
        if (v269)
        {
          unint64_t v270 = v269;
          char v30 = 1;
          operator delete(v269);
          uint64_t v31 = *(void *)(a1 + 2048);
          if (!v31) {
            goto LABEL_50;
          }
        }
        else
        {
          char v30 = 1;
          uint64_t v31 = *(void *)(a1 + 2048);
          if (!v31) {
            goto LABEL_50;
          }
        }
      }
      else
      {
        uint64_t v22 = *(void *)(a1 + 376);
        uint64_t v23 = *(void *)(a1 + 64);
        float32x4_t v24 = *(uint64_t **)(a1 + 304);
        uint64_t v25 = *(void *)(a1 + 208) + 24 * v13;
        unint64_t v267 = 0;
        unint64_t v268 = 0;
        __p = 0;
        float32x4_t v27 = *(unsigned char **)v25;
        float32x4_t v26 = *(unsigned char **)(v25 + 8);
        int64_t v28 = v26 - v27;
        if (v26 != v27)
        {
          if (v28 < 0) {
            sub_19E13D694();
          }
          __p = operator new(v26 - v27);
          unint64_t v267 = __p;
          int v29 = (char *)__p + 4 * (v28 >> 2);
          unint64_t v268 = v29;
          memcpy(__p, v27, v28);
          unint64_t v267 = v29;
          int v8 = v251;
        }
        sub_19E22A844(a1, v8, (float32x4_t **)(v22 + v20), v23 + v20, v24, (uint64_t)&__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1);
        if (__p)
        {
          char v30 = 0;
          unint64_t v267 = __p;
          operator delete(__p);
          uint64_t v31 = *(void *)(a1 + 2048);
          if (!v31) {
            goto LABEL_50;
          }
        }
        else
        {
          char v30 = 0;
          uint64_t v31 = *(void *)(a1 + 2048);
          if (!v31) {
            goto LABEL_50;
          }
        }
      }
      if (*(unsigned char *)(v31 + 244))
      {
        uint64_t v32 = *(void *)(a1 + 376);
        uint64_t v33 = *(float32x4_t ***)(a1 + 352);
        uint64_t v34 = *(int *)(a1 + 52);
        if ((int)v34 >= 8)
        {
          uint64_t v35 = *(float32x4_t **)(v32 + 8 * v13);
          unint64_t v36 = *v33;
          int v37 = (int)v34 / 8;
          do
          {
            float32x4_t v38 = *v36;
            float32x4_t v39 = v36[1];
            v36 += 2;
            float32x4_t v40 = vaddq_f32(v35[1], v39);
            float32x4_t *v35 = vaddq_f32(*v35, v38);
            v35[1] = v40;
            v35 += 2;
            --v37;
          }
          while (v37);
        }
        int v41 = 8 * ((int)v34 / 8);
        if (v41 < (int)v34)
        {
          uint64_t v42 = *v33;
          uint64_t v43 = *(void *)(v32 + 8 * v13);
          unint64_t v44 = v41;
          unint64_t v45 = v34 - v41;
          if (v45 < 8) {
            goto LABEL_48;
          }
          unint64_t v46 = v43 + 4 * v41;
          unint64_t v47 = (unint64_t)&v42[v41 / 4u];
          if (v46 < (unint64_t)v42->u64 + 4 * v34 && v47 < v43 + 4 * v34) {
            goto LABEL_48;
          }
          unint64_t v49 = v45 - (v34 & 7) + v41;
          uint64_t v50 = v41 + (unint64_t)(v34 & 7) - v34;
          float v51 = (float32x4_t *)(v47 + 16);
          float v52 = (float32x4_t *)(v46 + 16);
          do
          {
            float32x4_t v53 = vaddq_f32(*v52, *v51);
            v52[-1] = vaddq_f32(v52[-1], v51[-1]);
            *float v52 = v53;
            v51 += 2;
            v52 += 2;
            v50 += 8;
          }
          while (v50);
          unint64_t v44 = v49;
          if ((v34 & 7) != 0)
          {
LABEL_48:
            uint64_t v54 = v34 - v44;
            uint64_t v55 = (float *)(v43 + 4 * v44);
            unint64_t v56 = &v42->f32[v44];
            do
            {
              float v57 = *v56++;
              *uint64_t v55 = *v55 + v57;
              ++v55;
              --v54;
            }
            while (v54);
          }
        }
      }
LABEL_50:
      int v58 = v13 + v256;
      uint64_t v59 = *(void *)(a1 + 376);
      int v60 = *(_DWORD *)(a1 + 52);
      BOOL v61 = v259;
      if (v259)
      {
        cblas_sgemv_NEWLAPACK();
        uint64_t v59 = *(void *)(a1 + 376);
        int v60 = *(_DWORD *)(a1 + 52);
      }
      float __C = v11;
      __B[0] = -v11;
      vDSP_vclip(*(const float **)(v59 + 8 * v16), 1, __B, &__C, *(float **)(v59 + 8 * v16), 1, v60);
      sub_19E1C7520((float **)(*(void *)(a1 + 448) + v20), (const float **)(*(void *)(a1 + 376) + v20), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 520));
      if ((v30 & 1) == 0)
      {
        char v257 = v30;
        int v62 = v58;
        uint64_t v63 = *(void *)(a1 + 400);
        uint64_t v64 = *(void *)(a1 + 64);
        float v65 = *(uint64_t **)(a1 + 312);
        uint64_t v66 = *(void *)(a1 + 208) + 24 * (int)v16;
        uint64_t v264 = 0;
        uint64_t v265 = 0;
        int v263 = 0;
        int v68 = *(unsigned char **)v66;
        float v67 = *(unsigned char **)(v66 + 8);
        int64_t v69 = v67 - v68;
        if (v67 != v68)
        {
          if (v69 < 0) {
            sub_19E13D694();
          }
          int v263 = operator new(v67 - v68);
          uint64_t v264 = v263;
          uint64_t v70 = (char *)v263 + 4 * (v69 >> 2);
          uint64_t v265 = v70;
          memcpy(v263, v68, v69);
          uint64_t v264 = v70;
          int v8 = v251;
        }
        sub_19E22A844(a1, v8, (float32x4_t **)(v63 + v20), v64 + v20, v65, (uint64_t)&v263, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1);
        BOOL v61 = v259;
        int v58 = v62;
        char v30 = v257;
        if (v263)
        {
          uint64_t v264 = v263;
          operator delete(v263);
        }
      }
      uint64_t v71 = *(void *)(a1 + 2048);
      if (v71 && *(unsigned char *)(v71 + 244))
      {
        uint64_t v72 = *(void *)(a1 + 400);
        float32x4_t v73 = *(float32x4_t ***)(a1 + 360);
        uint64_t v74 = *(int *)(a1 + 52);
        if ((int)v74 >= 8)
        {
          uint64_t v75 = *(float32x4_t **)(v72 + 8 * v16);
          unint64_t v76 = *v73;
          int v77 = (int)v74 / 8;
          do
          {
            float32x4_t v78 = *v76;
            float32x4_t v79 = v76[1];
            v76 += 2;
            float32x4_t v80 = vaddq_f32(v75[1], v79);
            *uint64_t v75 = vaddq_f32(*v75, v78);
            v75[1] = v80;
            v75 += 2;
            --v77;
          }
          while (v77);
        }
        int v81 = 8 * ((int)v74 / 8);
        if (v81 < (int)v74)
        {
          uint64_t v82 = *v73;
          uint64_t v83 = *(void *)(v72 + 8 * v16);
          unint64_t v84 = v81;
          unint64_t v85 = v74 - v81;
          if (v85 < 8) {
            goto LABEL_73;
          }
          unint64_t v86 = v83 + 4 * v81;
          unint64_t v87 = (unint64_t)&v82[v81 / 4u];
          if (v86 < (unint64_t)v82->u64 + 4 * v74 && v87 < v83 + 4 * v74) {
            goto LABEL_73;
          }
          unint64_t v89 = v85 - (v74 & 7) + v81;
          uint64_t v90 = v81 + (unint64_t)(v74 & 7) - v74;
          uint64_t v91 = (float32x4_t *)(v87 + 16);
          uint64_t v92 = (float32x4_t *)(v86 + 16);
          do
          {
            float32x4_t v93 = vaddq_f32(*v92, *v91);
            v92[-1] = vaddq_f32(v92[-1], v91[-1]);
            *uint64_t v92 = v93;
            v91 += 2;
            v92 += 2;
            v90 += 8;
          }
          while (v90);
          unint64_t v84 = v89;
          if ((v74 & 7) != 0)
          {
LABEL_73:
            uint64_t v94 = v74 - v84;
            float v95 = (float *)(v83 + 4 * v84);
            uint64_t v96 = &v82->f32[v84];
            do
            {
              float v97 = *v96++;
              float *v95 = *v95 + v97;
              ++v95;
              --v94;
            }
            while (v94);
          }
        }
      }
      uint64_t v98 = *(void *)(a1 + 400);
      int v99 = *(_DWORD *)(a1 + 52);
      if (v61)
      {
        cblas_sgemv_NEWLAPACK();
        uint64_t v98 = *(void *)(a1 + 400);
        int v99 = *(_DWORD *)(a1 + 52);
      }
      float __C = v11;
      __B[0] = -v11;
      vDSP_vclip(*(const float **)(v98 + 8 * v16), 1, __B, &__C, *(float **)(v98 + 8 * v16), 1, v99);
      sub_19E1C7520((float **)(*(void *)(a1 + 472) + v20), (const float **)(*(void *)(a1 + 400) + v20), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 524));
      bzero(*(void **)(*(void *)(a1 + 88) + 8 * v16), 4 * *(int *)(a1 + 52));
      if (v61)
      {
        uint64_t v100 = *(void *)(a1 + 88);
        uint64_t v101 = *(void *)(a1 + 112);
        uint64_t v102 = *(void *)(a1 + 472);
        uint64_t v103 = *(int *)(a1 + 52);
        if ((int)v103 >= 8)
        {
          float v104 = *(float32x4_t **)(v100 + 8 * v16);
          uint64_t v105 = *(float32x4_t **)(v102 + 8 * v16);
          int v106 = (int)v103 / 8;
          uint64_t v107 = *(float32x4_t **)(v101 + 8 * v58);
          do
          {
            float32x4_t v109 = *v107;
            float32x4_t v108 = v107[1];
            v107 += 2;
            float32x4_t v111 = *v105;
            float32x4_t v110 = v105[1];
            v105 += 2;
            float32x4_t v112 = vmlaq_f32(v104[1], v110, v108);
            *float v104 = vmlaq_f32(*v104, v111, v109);
            v104[1] = v112;
            v104 += 2;
            --v106;
          }
          while (v106);
        }
        int v113 = 8 * ((int)v103 / 8);
        if (v113 < (int)v103)
        {
          uint64_t v114 = *(void *)(v101 + 8 * v58);
          uint64_t v115 = *(void *)(v102 + 8 * v16);
          uint64_t v116 = *(void *)(v100 + 8 * v16);
          uint64_t v117 = v113;
          unint64_t v118 = v103 - v113;
          if (v118 < 8) {
            goto LABEL_98;
          }
          uint64_t v119 = 4 * v117;
          unint64_t v120 = v116 + 4 * v117;
          unint64_t v121 = v116 + 4 * v103;
          BOOL v122 = v120 >= v115 + 4 * v103 || v115 + 4 * v117 >= v121;
          BOOL v123 = !v122;
          if (v114 + 4 * v117 < v121 && v120 < v114 + 4 * v103) {
            goto LABEL_98;
          }
          if (v123) {
            goto LABEL_98;
          }
          uint64_t v125 = v118 - (v103 & 7) + v117;
          uint64_t v126 = v117 + (v103 & 7) - v103;
          uint64_t v127 = (float32x4_t *)(v116 + v119 + 16);
          uint64_t v128 = (float32x4_t *)(v114 + v119 + 16);
          unint64_t v129 = (float32x4_t *)(v115 + v119 + 16);
          do
          {
            float32x4_t v130 = vmlaq_f32(*v127, *v129, *v128);
            v127[-1] = vmlaq_f32(v127[-1], v129[-1], v128[-1]);
            *uint64_t v127 = v130;
            v127 += 2;
            v128 += 2;
            v129 += 2;
            v126 += 8;
          }
          while (v126);
          uint64_t v117 = v125;
          if ((v103 & 7) != 0)
          {
LABEL_98:
            uint64_t v131 = v103 - v117;
            unint64_t v132 = (float *)(v116 + 4 * v117);
            float v133 = (float *)(v115 + 4 * v117);
            unint64_t v134 = (float *)(v114 + 4 * v117);
            do
            {
              float v135 = *v134++;
              float v136 = v135;
              float v137 = *v133++;
              *unint64_t v132 = *v132 + (float)(v137 * v136);
              ++v132;
              --v131;
            }
            while (v131);
          }
        }
      }
      uint64_t v138 = *(void *)(a1 + 88);
      vDSP_Length v139 = *(int *)(a1 + 52);
      float __C = v11;
      __B[0] = -v11;
      vDSP_vclip(*(const float **)(v138 + 8 * v16), 1, __B, &__C, *(float **)(v138 + 8 * v16), 1, v139);
      if ((v30 & 1) == 0)
      {
        int v258 = v58;
        uint64_t v140 = *(void *)(a1 + 424);
        uint64_t v141 = *(void *)(a1 + 64);
        float v142 = *(uint64_t **)(a1 + 320);
        uint64_t v143 = *(void *)(a1 + 208) + 24 * (int)v16;
        float32x4_t v261 = 0;
        float32x4_t v262 = 0;
        float32x4_t v260 = 0;
        int v145 = *(unsigned char **)v143;
        uint64_t v144 = *(unsigned char **)(v143 + 8);
        int64_t v146 = v144 - v145;
        if (v144 != v145)
        {
          if (v146 < 0) {
            sub_19E13D694();
          }
          float32x4_t v260 = operator new(v144 - v145);
          float32x4_t v261 = v260;
          unint64_t v147 = (char *)v260 + 4 * (v146 >> 2);
          float32x4_t v262 = v147;
          memcpy(v260, v145, v146);
          float32x4_t v261 = v147;
          BOOL v61 = v259;
        }
        sub_19E22A844(a1, v8, (float32x4_t **)(v140 + v20), v141 + v20, v142, (uint64_t)&v260, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1);
        int v58 = v258;
        if (v260)
        {
          float32x4_t v261 = v260;
          operator delete(v260);
        }
      }
      uint64_t v148 = *(void *)(a1 + 2048);
      if (v148 && *(unsigned char *)(v148 + 244))
      {
        uint64_t v149 = *(void *)(a1 + 424);
        float32x4_t v150 = *(float32x4_t ***)(a1 + 368);
        uint64_t v151 = *(int *)(a1 + 52);
        if ((int)v151 >= 8)
        {
          int v152 = *(float32x4_t **)(v149 + 8 * v16);
          uint64_t v153 = *v150;
          int v154 = (int)v151 / 8;
          do
          {
            float32x4_t v155 = *v153;
            float32x4_t v156 = v153[1];
            v153 += 2;
            float32x4_t v157 = vaddq_f32(v152[1], v156);
            *int v152 = vaddq_f32(*v152, v155);
            v152[1] = v157;
            v152 += 2;
            --v154;
          }
          while (v154);
        }
        int v158 = 8 * ((int)v151 / 8);
        if (v158 < (int)v151)
        {
          uint64_t v159 = *v150;
          uint64_t v160 = *(void *)(v149 + 8 * v16);
          unint64_t v161 = v158;
          unint64_t v162 = v151 - v158;
          if (v162 < 8) {
            goto LABEL_121;
          }
          unint64_t v163 = v160 + 4 * v158;
          unint64_t v164 = (unint64_t)&v159[v158 / 4u];
          if (v163 < (unint64_t)v159->u64 + 4 * v151 && v164 < v160 + 4 * v151) {
            goto LABEL_121;
          }
          unint64_t v166 = v162 - (v151 & 7) + v158;
          uint64_t v167 = v158 + (unint64_t)(v151 & 7) - v151;
          float v168 = (float32x4_t *)(v164 + 16);
          int v169 = (float32x4_t *)(v163 + 16);
          do
          {
            float32x4_t v170 = vaddq_f32(*v169, *v168);
            v169[-1] = vaddq_f32(v169[-1], v168[-1]);
            float32x4_t *v169 = v170;
            v168 += 2;
            v169 += 2;
            v167 += 8;
          }
          while (v167);
          unint64_t v161 = v166;
          if ((v151 & 7) != 0)
          {
LABEL_121:
            uint64_t v171 = v151 - v161;
            uint64_t v172 = (float *)(v160 + 4 * v161);
            unint64_t v173 = &v159->f32[v161];
            do
            {
              float v174 = *v173++;
              float *v172 = *v172 + v174;
              ++v172;
              --v171;
            }
            while (v171);
          }
        }
      }
      cblas_sgemv_NEWLAPACK();
      uint64_t v175 = *(void *)(a1 + 424);
      vDSP_Length v176 = *(int *)(a1 + 52);
      float __C = v11;
      __B[0] = -v11;
      vDSP_vclip(*(const float **)(v175 + 8 * v16), 1, __B, &__C, *(float **)(v175 + 8 * v16), 1, v176);
      sub_19E1C7520((float **)(*(void *)(a1 + 496) + v20), (const float **)(*(void *)(a1 + 424) + v20), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 528));
      bzero(*(void **)(*(void *)(a1 + 112) + 8 * v16), 4 * *(int *)(a1 + 52));
      uint64_t v177 = *(void *)(a1 + 112);
      uint64_t v178 = *(void *)(a1 + 448);
      uint64_t v179 = *(unsigned int *)(a1 + 52);
      if ((int)v179 < 1) {
        goto LABEL_128;
      }
      float v180 = *(float32x4_t **)(*(void *)(a1 + 496) + 8 * v16);
      uint64_t v181 = *(float32x4_t **)(v178 + 8 * v16);
      unint64_t v182 = *(void *)(v177 + 8 * v16);
      if (v179 >= 8)
      {
        uint64_t v183 = 0;
        unint64_t v227 = v182 + 4 * v179;
        BOOL v229 = v182 < (unint64_t)v181->u64 + 4 * v179 && (unint64_t)v181 < v227;
        if (((unint64_t)v180 >= v227 || v182 >= (unint64_t)v180->u64 + 4 * v179) && !v229)
        {
          uint64_t v183 = v179 & 0x7FFFFFF8;
          uint64_t v231 = v180 + 1;
          uint64_t v232 = v181 + 1;
          int v233 = (float32x4_t *)(v182 + 16);
          uint64_t v234 = v179 & 0xFFFFFFF8;
          do
          {
            float32x4_t v235 = vaddq_f32(vmlsq_f32(*v231, *v231, *v232), *v233);
            v233[-1] = vaddq_f32(vmlsq_f32(v231[-1], v231[-1], v232[-1]), v233[-1]);
            float32x4_t *v233 = v235;
            v231 += 2;
            v232 += 2;
            v233 += 2;
            v234 -= 8;
          }
          while (v234);
          if (v183 == v179) {
            goto LABEL_128;
          }
        }
      }
      else
      {
        uint64_t v183 = 0;
      }
      uint64_t v184 = v179 - v183;
      uint64_t v185 = v183;
      int v186 = (float *)(v182 + v185 * 4);
      uint64_t v187 = &v181->f32[v185];
      uint64_t v188 = &v180->f32[v185];
      do
      {
        float v189 = *v188++;
        float v190 = v189;
        float v191 = *v187++;
        *int v186 = (float)(v190 - (float)(v191 * v190)) + *v186;
        ++v186;
        --v184;
      }
      while (v184);
LABEL_128:
      if (v61)
      {
        uint64_t v192 = (int)v179;
        if ((int)v179 >= 8)
        {
          unint64_t v193 = *(float32x4_t **)(v177 + 8 * v16);
          uint64_t v194 = *(float32x4_t **)(v177 + 8 * v58);
          int v195 = (int)v179 / 8;
          char v196 = *(float32x4_t **)(v178 + 8 * v16);
          do
          {
            float32x4_t v198 = *v196;
            float32x4_t v197 = v196[1];
            v196 += 2;
            float32x4_t v200 = *v194;
            float32x4_t v199 = v194[1];
            v194 += 2;
            float32x4_t v201 = vmlaq_f32(v193[1], v199, v197);
            *unint64_t v193 = vmlaq_f32(*v193, v200, v198);
            v193[1] = v201;
            v193 += 2;
            --v195;
          }
          while (v195);
        }
        int v202 = 8 * ((int)v179 / 8);
        if (v202 < (int)v179)
        {
          uint64_t v203 = *(void *)(v178 + 8 * v16);
          uint64_t v204 = *(void *)(v177 + 8 * v58);
          uint64_t v205 = *(void *)(v177 + 8 * v16);
          uint64_t v206 = v202;
          unint64_t v207 = v192 - v202;
          if (v207 < 8) {
            goto LABEL_149;
          }
          uint64_t v208 = 4 * v206;
          unint64_t v209 = v205 + 4 * v206;
          unint64_t v210 = v205 + 4 * v192;
          BOOL v211 = v209 >= v204 + 4 * v192 || v204 + 4 * v206 >= v210;
          BOOL v212 = !v211;
          if (v203 + 4 * v206 < v210 && v209 < v203 + 4 * v192) {
            goto LABEL_149;
          }
          if (v212) {
            goto LABEL_149;
          }
          uint64_t v214 = v207 - (v192 & 7) + v206;
          uint64_t v215 = v206 + (v192 & 7) - v192;
          unint64_t v216 = (float32x4_t *)(v205 + v208 + 16);
          unint64_t v217 = (float32x4_t *)(v203 + v208 + 16);
          uint64_t v218 = (float32x4_t *)(v204 + v208 + 16);
          do
          {
            float32x4_t v219 = vmlaq_f32(*v216, *v218, *v217);
            v216[-1] = vmlaq_f32(v216[-1], v218[-1], v217[-1]);
            *unint64_t v216 = v219;
            v216 += 2;
            v217 += 2;
            v218 += 2;
            v215 += 8;
          }
          while (v215);
          uint64_t v206 = v214;
          if ((v192 & 7) != 0)
          {
LABEL_149:
            uint64_t v220 = v192 - v206;
            uint64_t v221 = (float *)(v205 + 4 * v206);
            vDSP_Length v222 = (float *)(v204 + 4 * v206);
            float32x4_t v223 = (float *)(v203 + 4 * v206);
            do
            {
              float v224 = *v223++;
              float v225 = v224;
              float v226 = *v222++;
              float *v221 = *v221 + (float)(v226 * v225);
              ++v221;
              --v220;
            }
            while (v220);
          }
        }
      }
      unsigned int v12 = v255 + 1;
      unsigned int v9 = v252;
    }
    while (v255 + 1 != v252);
  }
}

void sub_19E229EE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  char v30 = *(void **)(v28 - 136);
  if (v30)
  {
    *(void *)(v28 - 128) = v30;
    operator delete(v30);
  }
  _Unwind_Resume(exception_object);
}

float32x4_t sub_19E229F70(uint64_t a1, int a2, float32x4_t **a3, float32x4_t **a4, float32x4_t **a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, char a11)
{
  if (a2) {
    sub_19E2F6320(545);
  }
  if (!*(void *)(a1 + 552)) {
    operator new[]();
  }
  cblas_sgemv_NEWLAPACK();
  if (!a11)
  {
    if (a9 < 1) {
      return result;
    }
    uint64_t v38 = 0;
    float32x4_t v39 = *(float32x4_t **)(a1 + 552);
    float32x4_t v40 = *a3;
    if (a9 < 8) {
      goto LABEL_24;
    }
    if ((unint64_t)((char *)v40 - (char *)v39) < 0x20) {
      goto LABEL_24;
    }
    uint64_t v38 = a9 & 0xFFFFFFF8;
    int v41 = v39 + 1;
    uint64_t v42 = v40 + 1;
    uint64_t v43 = v38;
    do
    {
      float32x4_t result = v41[-1];
      float32x4_t v44 = *v41;
      v42[-1] = result;
      float32x4_t *v42 = v44;
      v41 += 2;
      v42 += 2;
      v43 -= 8;
    }
    while (v43);
    if (v38 != a9)
    {
LABEL_24:
      uint64_t v45 = a9 - v38;
      uint64_t v46 = 4 * v38;
      unint64_t v47 = (__int32 *)((char *)v40 + v46);
      unint64_t v48 = (__int32 *)((char *)v39 + v46);
      do
      {
        int v49 = *v48++;
        *v47++ = v49;
        --v45;
      }
      while (v45);
    }
    uint64_t v50 = *a4;
    if (a9 >= 8
      && (float v51 = (float32x4_t *)((char *)v39 + 4 * a9),
          (unint64_t)((char *)v50 - (char *)v51) >= 0x20))
    {
      uint64_t v52 = a9 & 0xFFFFFFF8;
      uint64_t v138 = v51 + 1;
      vDSP_Length v139 = v50 + 1;
      uint64_t v140 = v52;
      do
      {
        float32x4_t result = v138[-1];
        float32x4_t v141 = *v138;
        v139[-1] = result;
        *vDSP_Length v139 = v141;
        v138 += 2;
        v139 += 2;
        v140 -= 8;
      }
      while (v140);
      if (v52 == a9)
      {
LABEL_31:
        float v57 = *a5;
        uint64_t v58 = 2 * a9;
        if (a9 >= 8
          && (uint64_t v59 = (float32x4_t *)((char *)v39 + 4 * v58), (unint64_t)((char *)v57 - (char *)v59) >= 0x20))
        {
          uint64_t v60 = a9 & 0xFFFFFFF8;
          float v142 = v59 + 1;
          uint64_t v143 = v57 + 1;
          uint64_t v144 = v60;
          do
          {
            float32x4_t result = v142[-1];
            float32x4_t v145 = *v142;
            v143[-1] = result;
            *uint64_t v143 = v145;
            v142 += 2;
            v143 += 2;
            v144 -= 8;
          }
          while (v144);
          if (v60 == a9) {
            return result;
          }
        }
        else
        {
          uint64_t v60 = 0;
        }
        uint64_t v61 = a9 - v60;
        int v62 = &v57->i32[v60];
        uint64_t v63 = &v39->i32[v60 + v58];
        do
        {
          __int32 v64 = *v63++;
          result.i32[0] = v64;
          *v62++ = v64;
          --v61;
        }
        while (v61);
        return result;
      }
    }
    else
    {
      uint64_t v52 = 0;
    }
    uint64_t v53 = a9 - v52;
    uint64_t v54 = &v50->i32[v52];
    uint64_t v55 = &v39->i32[v52 + a9];
    do
    {
      __int32 v56 = *v55++;
      *v54++ = v56;
      --v53;
    }
    while (v53);
    goto LABEL_31;
  }
  uint64_t v16 = (float32x4_t **)(a1 + 536);
  if (a9 <= 0)
  {
    sub_19E1DF2C8((float **)(a1 + 536), "outvec0/gzx", a9);
    int v36 = 0;
    int v29 = -(-a9 >> 3);
    int v37 = -8 * (-a9 >> 3);
    if (v37 >= a9) {
      goto LABEL_48;
    }
  }
  else
  {
    uint64_t v17 = 0;
    uint64_t v18 = *(void *)(a1 + 552);
    uint64_t v19 = *(void *)(a1 + 536);
    if (a9 < 8) {
      goto LABEL_11;
    }
    if ((unint64_t)(v19 - v18) < 0x20) {
      goto LABEL_11;
    }
    uint64_t v17 = a9 & 0x7FFFFFF8;
    uint64_t v20 = (long long *)(v18 + 16);
    uint64_t v21 = (_OWORD *)(v19 + 16);
    uint64_t v22 = a9 & 0xFFFFFFF8;
    do
    {
      long long v23 = *v20;
      *(v21 - 1) = *(v20 - 1);
      *uint64_t v21 = v23;
      v20 += 2;
      v21 += 2;
      v22 -= 8;
    }
    while (v22);
    if (v17 != a9)
    {
LABEL_11:
      uint64_t v24 = a9 - v17;
      uint64_t v25 = 4 * v17;
      float32x4_t v26 = (_DWORD *)(v19 + v25);
      float32x4_t v27 = (int *)(v18 + v25);
      do
      {
        int v28 = *v27++;
        *v26++ = v28;
        --v24;
      }
      while (v24);
    }
    sub_19E1DF2C8((float **)(a1 + 536), "outvec0/gzx", a9);
    int v29 = a9 >> 3;
    if (a9 <= 7)
    {
      int v36 = 0;
      int v37 = 8 * v29;
      if (8 * v29 >= a9) {
        goto LABEL_48;
      }
    }
    else
    {
      uint64_t v30 = 0;
      uint64_t v31 = *a3;
      uint64_t v32 = *v16;
      do
      {
        uint64_t v33 = &v31[2 * v30];
        uint64_t v34 = &v32[2 * v30];
        float32x4_t v35 = vaddq_f32(v33[1], v34[1]);
        float32x4_t *v33 = vaddq_f32(*v33, *v34);
        v33[1] = v35;
        ++v30;
      }
      while (v29 != v30);
      int v36 = 1;
      int v37 = 8 * v29;
      if (8 * v29 >= a9) {
        goto LABEL_48;
      }
    }
  }
  float v65 = *v16;
  uint64_t v66 = *a3;
  uint64_t v67 = v37;
  unint64_t v68 = a9 - (uint64_t)v37;
  if (v68 < 8) {
    goto LABEL_46;
  }
  uint64_t v69 = 4 * v37;
  if ((char *)v66 + v69 < (char *)&v65->f32[a9] && (char *)v65 + v69 < (char *)&v66->f32[a9]) {
    goto LABEL_46;
  }
  uint64_t v70 = v68 - (a9 & 7) + v37;
  uint64_t v71 = v37 + (a9 & 7) - a9;
  uint64_t v72 = v69 + 16;
  float32x4_t v73 = (float32x4_t *)((char *)v65 + v69 + 16);
  uint64_t v74 = (float32x4_t *)((char *)v66 + v72);
  do
  {
    float32x4_t v75 = vaddq_f32(*v74, *v73);
    v74[-1] = vaddq_f32(v74[-1], v73[-1]);
    float32x4_t *v74 = v75;
    v73 += 2;
    v74 += 2;
    v71 += 8;
  }
  while (v71);
  uint64_t v67 = v70;
  if ((a9 & 7) != 0)
  {
LABEL_46:
    uint64_t v76 = a9 - v67;
    int v77 = &v66->f32[v67];
    float32x4_t v78 = &v65->f32[v67];
    do
    {
      float v79 = *v78++;
      *int v77 = *v77 + v79;
      ++v77;
      --v76;
    }
    while (v76);
  }
LABEL_48:
  if (a9 < 1) {
    goto LABEL_54;
  }
  uint64_t v80 = *(void *)(a1 + 552);
  uint64_t v81 = *(void *)(a1 + 536);
  if (a9 < 8 || (uint64_t v82 = 4 * a9 + v80, (unint64_t)(v81 - v82) < 0x20))
  {
    uint64_t v83 = 0;
LABEL_52:
    uint64_t v84 = a9 - v83;
    unint64_t v85 = (_DWORD *)(v81 + 4 * v83);
    unint64_t v86 = (int *)(v80 + 4 * (v83 + a9));
    do
    {
      int v87 = *v86++;
      *v85++ = v87;
      --v84;
    }
    while (v84);
    goto LABEL_54;
  }
  uint64_t v83 = a9 & 0xFFFFFFF8;
  int64_t v146 = (long long *)(v82 + 16);
  unint64_t v147 = (_OWORD *)(v81 + 16);
  uint64_t v148 = v83;
  do
  {
    long long v149 = *v146;
    *(v147 - 1) = *(v146 - 1);
    _OWORD *v147 = v149;
    v146 += 2;
    v147 += 2;
    v148 -= 8;
  }
  while (v148);
  if (v83 != a9) {
    goto LABEL_52;
  }
LABEL_54:
  sub_19E1DF2C8((float **)(a1 + 536), "outvec1/grx", a9);
  if (v36)
  {
    uint64_t v88 = *a4;
    unint64_t v89 = *v16;
    int v90 = v29;
    do
    {
      float32x4_t v91 = *v89;
      float32x4_t v92 = v89[1];
      v89 += 2;
      float32x4_t v93 = vaddq_f32(v88[1], v92);
      float32x4_t *v88 = vaddq_f32(*v88, v91);
      v88[1] = v93;
      v88 += 2;
      --v90;
    }
    while (v90);
  }
  if (v37 < a9)
  {
    uint64_t v94 = *v16;
    float v95 = *a4;
    uint64_t v96 = v37;
    unint64_t v97 = a9 - (uint64_t)v37;
    if (v97 < 8) {
      goto LABEL_64;
    }
    uint64_t v98 = 4 * v37;
    if ((char *)v95 + v98 < (char *)&v94->f32[a9] && (char *)v94 + v98 < (char *)&v95->f32[a9]) {
      goto LABEL_64;
    }
    uint64_t v99 = v97 - (a9 & 7) + v37;
    uint64_t v100 = v37 + (a9 & 7) - a9;
    uint64_t v101 = v98 + 16;
    uint64_t v102 = (float32x4_t *)((char *)v94 + v98 + 16);
    uint64_t v103 = (float32x4_t *)((char *)v95 + v101);
    do
    {
      float32x4_t v104 = vaddq_f32(*v103, *v102);
      v103[-1] = vaddq_f32(v103[-1], v102[-1]);
      *uint64_t v103 = v104;
      v102 += 2;
      v103 += 2;
      v100 += 8;
    }
    while (v100);
    uint64_t v96 = v99;
    if ((a9 & 7) != 0)
    {
LABEL_64:
      uint64_t v105 = a9 - v96;
      int v106 = &v95->f32[v96];
      uint64_t v107 = &v94->f32[v96];
      do
      {
        float v108 = *v107++;
        *int v106 = *v106 + v108;
        ++v106;
        --v105;
      }
      while (v105);
    }
  }
  if (a9 < 1) {
    goto LABEL_72;
  }
  uint64_t v109 = (2 * a9);
  uint64_t v110 = *(void *)(a1 + 552);
  uint64_t v111 = *(void *)(a1 + 536);
  if (a9 >= 8 && (uint64_t v112 = 4 * v109 + v110, (unint64_t)(v111 - v112) >= 0x20))
  {
    uint64_t v113 = a9 & 0xFFFFFFF8;
    float32x4_t v150 = (long long *)(v112 + 16);
    uint64_t v151 = (_OWORD *)(v111 + 16);
    uint64_t v152 = v113;
    do
    {
      long long v153 = *v150;
      *(v151 - 1) = *(v150 - 1);
      *uint64_t v151 = v153;
      v150 += 2;
      v151 += 2;
      v152 -= 8;
    }
    while (v152);
    if (v113 == a9) {
      goto LABEL_72;
    }
  }
  else
  {
    uint64_t v113 = 0;
  }
  uint64_t v114 = a9 - v113;
  uint64_t v115 = (_DWORD *)(v111 + 4 * v113);
  uint64_t v116 = (int *)(v110 + 4 * (v113 + v109));
  do
  {
    int v117 = *v116++;
    *v115++ = v117;
    --v114;
  }
  while (v114);
LABEL_72:
  sub_19E1DF2C8((float **)(a1 + 536), "outvec2/gox", a9);
  if (v36)
  {
    unint64_t v118 = *a5;
    uint64_t v119 = *v16;
    do
    {
      float32x4_t v120 = *v119;
      float32x4_t v121 = v119[1];
      v119 += 2;
      float32x4_t v122 = vaddq_f32(v118[1], v121);
      float32x4_t result = vaddq_f32(*v118, v120);
      *unint64_t v118 = result;
      v118[1] = v122;
      v118 += 2;
      --v29;
    }
    while (v29);
  }
  if (v37 < a9)
  {
    BOOL v123 = *v16;
    uint64_t v124 = *a5;
    uint64_t v125 = v37;
    unint64_t v126 = a9 - (uint64_t)v37;
    if (v126 < 8) {
      goto LABEL_82;
    }
    uint64_t v127 = 4 * v37;
    if ((char *)v124 + v127 < (char *)&v123->f32[a9] && (char *)v123 + v127 < (char *)&v124->f32[a9]) {
      goto LABEL_82;
    }
    uint64_t v128 = v126 - (a9 & 7) + v37;
    uint64_t v129 = v37 + (a9 & 7) - a9;
    uint64_t v130 = v127 + 16;
    uint64_t v131 = (float32x4_t *)((char *)v123 + v127 + 16);
    unint64_t v132 = (float32x4_t *)((char *)v124 + v130);
    do
    {
      float32x4_t result = vaddq_f32(v132[-1], v131[-1]);
      float32x4_t v133 = vaddq_f32(*v132, *v131);
      v132[-1] = result;
      *unint64_t v132 = v133;
      v131 += 2;
      v132 += 2;
      v129 += 8;
    }
    while (v129);
    uint64_t v125 = v128;
    if ((a9 & 7) != 0)
    {
LABEL_82:
      uint64_t v134 = a9 - v125;
      float v135 = &v124->f32[v125];
      float v136 = &v123->f32[v125];
      do
      {
        float v137 = *v136++;
        result.f32[0] = *v135 + v137;
        *v135++ = result.f32[0];
        --v134;
      }
      while (v134);
    }
  }
  return result;
}

void sub_19E22A844(uint64_t a1, int a2, float32x4_t **a3, uint64_t a4, uint64_t *a5, uint64_t a6, int a7, int a8, char a9)
{
  if (a9)
  {
    if (!a2)
    {
      cblas_sgemv_NEWLAPACK();
      goto LABEL_41;
    }
    BOOL v15 = *(const void **)a6;
    uint64_t v14 = *(void *)(a6 + 8);
    int64_t v16 = v14 - *(void *)a6;
    if (v14 == *(void *)a6)
    {
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
    }
    else
    {
      if (v16 < 0) {
        sub_19E13D694();
      }
      uint64_t v17 = (int *)operator new(v14 - *(void *)a6);
      uint64_t v18 = &v17[v16 >> 2];
      memcpy(v17, v15, v16);
      uint64_t v19 = 4 * (v16 >> 2);
      if (v19 == 8)
      {
        if (a7 >= 1)
        {
          uint64_t v21 = *v17;
          uint64_t v20 = v17[1];
          uint64_t v22 = *a5;
          long long v23 = *(float **)(a1 + 536);
          uint64_t v24 = a7;
          do
          {
            *v23++ = *(float *)(v22 + 4 * v20) + *(float *)(v22 + 4 * v21);
            v22 += 4 * a8;
            --v24;
          }
          while (v24);
        }
LABEL_39:
        if (v17) {
LABEL_40:
        }
          operator delete(v17);
LABEL_41:
        int v52 = a7 / 8;
        if (a7 >= 8)
        {
          uint64_t v53 = *a3;
          uint64_t v54 = *(float32x4_t **)(a1 + 536);
          int v55 = a7 / 8;
          do
          {
            float32x4_t v56 = *v54;
            float32x4_t v57 = v54[1];
            v54 += 2;
            float32x4_t v58 = vaddq_f32(v53[1], v57);
            *uint64_t v53 = vaddq_f32(*v53, v56);
            v53[1] = v58;
            v53 += 2;
            --v55;
          }
          while (v55);
        }
        int v59 = 8 * v52;
        if (8 * v52 < a7)
        {
          uint64_t v60 = *(void *)(a1 + 536);
          uint64_t v61 = *a3;
          uint64_t v62 = v59;
          if ((unint64_t)(a7 - (uint64_t)v59) < 8) {
            goto LABEL_51;
          }
          uint64_t v63 = 4 * v59;
          if ((unint64_t)v61 + v63 < v60 + 4 * a7 && v60 + v63 < (unint64_t)v61->u64 + 4 * a7) {
            goto LABEL_51;
          }
          uint64_t v64 = v59 + (a7 & 7) - a7;
          uint64_t v65 = v63 + 16;
          uint64_t v66 = (float32x4_t *)(v60 + v63 + 16);
          uint64_t v67 = (float32x4_t *)((char *)v61 + v65);
          do
          {
            float32x4_t v68 = vaddq_f32(*v67, *v66);
            v67[-1] = vaddq_f32(v67[-1], v66[-1]);
            *uint64_t v67 = v68;
            v66 += 2;
            v67 += 2;
            v64 += 8;
          }
          while (v64);
          uint64_t v62 = a7 - (a7 & 7);
          if ((a7 & 7) != 0)
          {
LABEL_51:
            uint64_t v69 = a7 - v62;
            uint64_t v70 = &v61->f32[v62];
            uint64_t v71 = (float *)(v60 + 4 * v62);
            do
            {
              float v72 = *v71++;
              *uint64_t v70 = *v70 + v72;
              ++v70;
              --v69;
            }
            while (v69);
          }
        }
        return;
      }
    }
    if (a7 >= 1)
    {
      int v36 = *(_DWORD **)(a1 + 536);
      if (v18 != v17)
      {
        uint64_t v37 = 0;
        unint64_t v38 = v19 >> 2;
        uint64_t v39 = *a5;
        if (v38 <= 1) {
          unint64_t v38 = 1;
        }
        do
        {
          v36[v37] = 0;
          float v40 = 0.0;
          int v41 = v17;
          unint64_t v42 = v38;
          do
          {
            uint64_t v43 = *v41++;
            float v40 = *(float *)(v39 + 4 * (v37 * a8 + v43)) + v40;
            *(float *)&v36[v37] = v40;
            --v42;
          }
          while (v42);
          ++v37;
        }
        while (v37 != a7);
        goto LABEL_40;
      }
      bzero(v36, 4 * a7);
    }
    goto LABEL_39;
  }
  if (!a2)
  {
    cblas_sgemv_NEWLAPACK();
    return;
  }
  float32x4_t v26 = *(const void **)a6;
  uint64_t v25 = *(void *)(a6 + 8);
  int64_t v27 = v25 - *(void *)a6;
  if (v25 == *(void *)a6)
  {
    int v28 = 0;
    int v29 = 0;
    uint64_t v30 = 0;
  }
  else
  {
    if (v27 < 0) {
      sub_19E13D694();
    }
    int v28 = (int *)operator new(v25 - *(void *)a6);
    int v29 = &v28[v27 >> 2];
    memcpy(v28, v26, v27);
    uint64_t v30 = 4 * (v27 >> 2);
    if (v30 == 8)
    {
      if (a7 >= 1)
      {
        uint64_t v32 = *v28;
        uint64_t v31 = v28[1];
        uint64_t v33 = *a5;
        uint64_t v34 = (float *)*a3;
        uint64_t v35 = a7;
        do
        {
          *v34++ = *(float *)(v33 + 4 * v31) + *(float *)(v33 + 4 * v32);
          v33 += 4 * a8;
          --v35;
        }
        while (v35);
      }
LABEL_55:
      if (!v28) {
        return;
      }
      goto LABEL_56;
    }
  }
  if (a7 < 1) {
    goto LABEL_55;
  }
  float32x4_t v44 = *a3;
  if (v29 == v28)
  {
    bzero(v44, 4 * a7);
    goto LABEL_55;
  }
  uint64_t v45 = 0;
  unint64_t v46 = v30 >> 2;
  uint64_t v47 = *a5;
  if (v46 <= 1) {
    unint64_t v46 = 1;
  }
  do
  {
    v44->i32[v45] = 0;
    float v48 = 0.0;
    int v49 = v28;
    unint64_t v50 = v46;
    do
    {
      uint64_t v51 = *v49++;
      float v48 = *(float *)(v47 + 4 * (v45 * a8 + v51)) + v48;
      v44->f32[v45] = v48;
      --v50;
    }
    while (v50);
    ++v45;
  }
  while (v45 != a7);
LABEL_56:

  operator delete(v28);
}

void sub_19E22ACA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_19E22ACD8(void *a1)
{
  *a1 = &unk_1EF0A63C8;
  sub_19E227200(a1);
  uint64_t v2 = (void *)a1[252];
  if (v2)
  {
    a1[253] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[249];
  if (v3)
  {
    a1[250] = v3;
    operator delete(v3);
  }
  sub_19E3030E8((uint64_t)(a1 + 239));
  sub_19E3030E8((uint64_t)(a1 + 230));
  sub_19E3030E8((uint64_t)(a1 + 221));
  sub_19E3030E8((uint64_t)(a1 + 212));
  sub_19E3030E8((uint64_t)(a1 + 203));
  sub_19E3030E8((uint64_t)(a1 + 194));
  sub_19E3030E8((uint64_t)(a1 + 185));
  sub_19E3030E8((uint64_t)(a1 + 176));
  sub_19E3030E8((uint64_t)(a1 + 167));
  sub_19E3030E8((uint64_t)(a1 + 158));
  sub_19E3030E8((uint64_t)(a1 + 149));
  sub_19E1C6038(a1 + 119);
  sub_19E1C6038(a1 + 104);
  sub_19E1C6038(a1 + 89);
  int v4 = (void *)a1[85];
  if (v4)
  {
    a1[86] = v4;
    operator delete(v4);
  }
  unsigned int v5 = (void *)a1[82];
  if (v5)
  {
    a1[83] = v5;
    operator delete(v5);
  }
  vDSP_Length v6 = (void *)a1[79];
  if (v6)
  {
    a1[80] = v6;
    operator delete(v6);
  }
  int v7 = (void *)a1[76];
  if (v7)
  {
    a1[77] = v7;
    operator delete(v7);
  }
  int v8 = (void *)a1[73];
  if (v8)
  {
    a1[74] = v8;
    operator delete(v8);
  }
  unsigned int v9 = (void *)a1[70];
  if (v9)
  {
    a1[71] = v9;
    operator delete(v9);
  }
  uint64_t v10 = (void *)a1[62];
  if (v10)
  {
    a1[63] = v10;
    operator delete(v10);
  }
  float v11 = (void *)a1[59];
  if (v11)
  {
    a1[60] = v11;
    operator delete(v11);
  }
  unsigned int v12 = (void *)a1[56];
  if (v12)
  {
    a1[57] = v12;
    operator delete(v12);
  }
  signed int v13 = (void *)a1[53];
  if (v13)
  {
    a1[54] = v13;
    operator delete(v13);
  }
  uint64_t v14 = (void *)a1[50];
  if (v14)
  {
    a1[51] = v14;
    operator delete(v14);
  }
  BOOL v15 = (void *)a1[47];
  if (v15)
  {
    a1[48] = v15;
    operator delete(v15);
  }
  uint64_t v16 = a1[26];
  if (v16)
  {
    uint64_t v17 = a1[27];
    uint64_t v18 = (void *)a1[26];
    if (v17 != v16)
    {
      uint64_t v19 = a1[27];
      do
      {
        uint64_t v21 = *(void **)(v19 - 24);
        v19 -= 24;
        uint64_t v20 = v21;
        if (v21)
        {
          *(void *)(v17 - 16) = v20;
          operator delete(v20);
        }
        uint64_t v17 = v19;
      }
      while (v19 != v16);
      uint64_t v18 = (void *)a1[26];
    }
    a1[27] = v16;
    operator delete(v18);
  }
  uint64_t v22 = (void *)a1[23];
  if (v22)
  {
    a1[24] = v22;
    operator delete(v22);
  }
  long long v23 = (void *)a1[20];
  if (v23)
  {
    a1[21] = v23;
    operator delete(v23);
  }
  uint64_t v24 = (void *)a1[17];
  if (v24)
  {
    a1[18] = v24;
    operator delete(v24);
  }
  uint64_t v25 = (void *)a1[14];
  if (v25)
  {
    a1[15] = v25;
    operator delete(v25);
  }
  float32x4_t v26 = (void *)a1[11];
  if (v26)
  {
    a1[12] = v26;
    operator delete(v26);
  }
  int64_t v27 = (void *)a1[8];
  if (v27)
  {
    a1[9] = v27;
    operator delete(v27);
  }
  *a1 = &unk_1EF0A50F8;
  int v28 = (void *)a1[1];
  if (v28)
  {
    a1[2] = v28;
    operator delete(v28);
  }
  return a1;
}

uint64_t sub_19E22AF4C(uint64_t a1, int a2, uint64_t a3, float a4)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF0A5E90;
  *(_DWORD *)(a1 + 44) = a2;
  *(float *)(a1 + 48) = a4;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)a3;
  long long v5 = *(_OWORD *)(a3 + 16);
  long long v6 = *(_OWORD *)(a3 + 32);
  long long v7 = *(_OWORD *)(a3 + 48);
  *(void *)(a1 + 120) = *(void *)(a3 + 64);
  *(_OWORD *)(a1 + 104) = v7;
  *(_OWORD *)(a1 + 88) = v6;
  *(_OWORD *)(a1 + 72) = v5;
  *(_OWORD *)(a1 + 168) = 0u;
  uint64_t v16 = (void **)(a1 + 168);
  BOOL v15 = (void **)(a1 + 192);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  sub_19E3030A0(a1 + 216);
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(unsigned char *)(a1 + 41) = 0;
  int v8 = dword_1E9457D98;
  unint64_t v9 = dword_1E9457D98;
  uint64_t v10 = *(void *)(a1 + 168);
  unint64_t v11 = (*(void *)(a1 + 176) - v10) >> 3;
  if (dword_1E9457D98 <= v11)
  {
    if (dword_1E9457D98 < v11) {
      *(void *)(a1 + 176) = v10 + 8 * dword_1E9457D98;
    }
  }
  else
  {
    sub_19E1599BC(v16, dword_1E9457D98 - v11);
    int v8 = dword_1E9457D98;
    unint64_t v9 = dword_1E9457D98;
  }
  uint64_t v12 = *(void *)(a1 + 192);
  unint64_t v13 = (*(void *)(a1 + 200) - v12) >> 3;
  if (v9 <= v13)
  {
    if (v9 < v13) {
      *(void *)(a1 + 200) = v12 + 8 * v9;
    }
  }
  else
  {
    sub_19E1599BC(v15, v9 - v13);
    int v8 = dword_1E9457D98;
  }
  *(_WORD *)(a1 + 160) = *(_WORD *)(a1 + 101);
  if (v8 >= 1) {
    operator new[]();
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 200))(a1);
  return a1;
}

void sub_19E22B490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, void **a13, uint64_t a14)
{
  uint64_t v16 = *a12;
  if (*a12)
  {
    v14[25] = v16;
    operator delete(v16);
    uint64_t v17 = *a13;
    if (!*a13)
    {
LABEL_3:
      *uint64_t v14 = a11;
      uint64_t v18 = (void *)v14[1];
      if (!v18) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v17 = *a13;
    if (!*a13) {
      goto LABEL_3;
    }
  }
  v14[22] = v17;
  operator delete(v17);
  *uint64_t v14 = a11;
  uint64_t v18 = (void *)v14[1];
  if (!v18) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  v14[2] = v18;
  operator delete(v18);
  _Unwind_Resume(exception_object);
}

void sub_19E22B53C()
{
}

uint64_t sub_19E22B550(uint64_t a1)
{
  return a1 + 168;
}

uint64_t sub_19E22B558(uint64_t a1)
{
  return a1 + 192;
}

void sub_19E22B560()
{
}

void sub_19E22B574()
{
}

uint64_t sub_19E22B588()
{
  return 0;
}

unsigned char *sub_19E22B590(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(int *)(a2 + 72);
  long long v7 = (int *)(*(void *)a2 + v6);
  if ((unint64_t)v7 <= *(void *)a2 + *(void *)(a2 + 8) - 4)
  {
    int v8 = *v7;
    *(_DWORD *)(a2 + 72) = v6 + 4;
  }
  else
  {
    int v8 = 0;
  }
  if (*(_DWORD *)(a1 + 44) != v8) {
    sub_19E2F6320(3);
  }
  int v9 = *a3;
  int v10 = *(unsigned __int8 *)(a1 + 161);
  int v11 = sub_19E2F62F0();
  sub_19E1C6130((unsigned char *)(a1 + 128), (uint64_t *)a2, v9, v10, v11, *(_DWORD *)(a1 + 44));
  int v12 = *a3;
  int v13 = *(unsigned __int8 *)(a1 + 161);
  int v14 = sub_19E2F62F0();
  sub_19E1C6130((unsigned char *)(a1 + 136), (uint64_t *)a2, v12, v13, v14, *(_DWORD *)(a1 + 44));
  int v15 = *a3;
  int v16 = *(unsigned __int8 *)(a1 + 161);
  int v17 = sub_19E2F62F0();
  sub_19E1C6130((unsigned char *)(a1 + 144), (uint64_t *)a2, v15, v16, v17, *(_DWORD *)(a1 + 44));
  int v18 = *a3;
  int v19 = *(unsigned __int8 *)(a1 + 161);
  int v20 = sub_19E2F62F0();
  int v21 = *(_DWORD *)(a1 + 44);

  return sub_19E1C6130((unsigned char *)(a1 + 152), (uint64_t *)a2, v18, v19, v20, v21);
}

uint64_t sub_19E22B6D8(uint64_t a1, FILE *__stream, int *a3, uint64_t a4, unsigned int a5)
{
  sub_19E2F6788(__stream, a3, *(_DWORD *)(a1 + 44));
  int v9 = sub_19E2F62F0();
  sub_19E1E0BD4(a1 + 128, __stream, a3, 3, v9, a5);
  int v10 = sub_19E2F62F0();
  sub_19E1E0BD4(a1 + 136, __stream, a3, 3, v10, a5);
  int v11 = sub_19E2F62F0();
  sub_19E1E0BD4(a1 + 144, __stream, a3, 3, v11, a5);
  int v12 = sub_19E2F62F0();

  return sub_19E1E0BD4(a1 + 152, __stream, a3, 3, v12, a5);
}

void sub_19E22B818(uint64_t a1)
{
  __p = (char *)operator new(0x28uLL);
  strcpy(__p, "BatchNormalization, from allocAll");
  sub_19E1E105C(a1);
  operator delete(__p);
}

void sub_19E22B8AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E22B8C8(void *a1)
{
  uint64_t v3 = a1[36];
  uint64_t v2 = a1[37];
  if (v2 == v3)
  {
    uint64_t v3 = a1[37];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      long long v5 = *(void **)(v3 + 8 * v4);
      if (v5)
      {
        operator delete[](v5);
        uint64_t v3 = a1[36];
        uint64_t v2 = a1[37];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  a1[37] = v3;
  a1[22] = a1[21];
  a1[25] = a1[24];
}

uint64_t sub_19E22B938(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t sub_19E22B940(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

void sub_19E22B950()
{
}

int *sub_19E22B964(int *result, void *a2, uint64_t a3, int a4)
{
  uint64_t v4 = a4 & 0xFFFFFF;
  if ((a4 & 0xFFFFFF) != 0)
  {
    uint64_t v6 = result;
    for (uint64_t i = 0; i != v4; ++i)
    {
      memmove(*(void **)(*((void *)v6 + 21) + 8 * i), *(const void **)(*a2 + 8 * i), 4 * v6[11]);
      uint64_t v9 = v6[11];
      int v10 = *(float32x4_t **)(*((void *)v6 + 21) + 8 * i);
      if ((int)v9 >= 1)
      {
        v8.i32[0] = v6[12];
        int v11 = (float32x4_t *)*((void *)v6 + 16);
        int v12 = (float32x4_t *)*((void *)v6 + 17);
        int v13 = (float32x4_t *)*((void *)v6 + 18);
        int v14 = (float32x4_t *)*((void *)v6 + 19);
        if (v9 >= 8)
        {
          uint64_t v15 = 0;
          int v16 = (float32x4_t *)((char *)v10 + 4 * v9);
          BOOL v18 = v10 < (float32x4_t *)&v12->f32[v9] && v12 < v16;
          BOOL v20 = v10 < (float32x4_t *)&v13->f32[v9] && v13 < v16;
          BOOL v22 = v10 < (float32x4_t *)&v14->f32[v9] && v14 < v16;
          if ((v11 >= v16 || v10 >= (float32x4_t *)&v11->f32[v9]) && !v18 && !v20 && !v22)
          {
            uint64_t v15 = v9 & 0x7FFFFFF8;
            uint64_t v24 = v11 + 1;
            uint64_t v25 = v10 + 1;
            float32x4_t v26 = (float32x4_t)vdupq_lane_s32(v8, 0);
            int64_t v27 = v12 + 1;
            int v28 = v14 + 1;
            int v29 = v13 + 1;
            uint64_t v30 = v9 & 0xFFFFFFF8;
            do
            {
              float32x4_t v31 = vaddq_f32(vdivq_f32(vmulq_f32(vsubq_f32(*v25, *v24), *v29), vsqrtq_f32(vaddq_f32(*v27, v26))), *v28);
              v25[-1] = vaddq_f32(vdivq_f32(vmulq_f32(vsubq_f32(v25[-1], v24[-1]), v29[-1]), vsqrtq_f32(vaddq_f32(v27[-1], v26))), v28[-1]);
              float32x4_t *v25 = v31;
              v24 += 2;
              v25 += 2;
              v27 += 2;
              v28 += 2;
              v29 += 2;
              v30 -= 8;
            }
            while (v30);
            if (v15 == v9) {
              goto LABEL_3;
            }
          }
        }
        else
        {
          uint64_t v15 = 0;
        }
        uint64_t v32 = v9 - v15;
        uint64_t v33 = v15;
        uint64_t v34 = &v10->f32[v15];
        uint64_t v35 = &v14->f32[v33];
        int v36 = &v13->f32[v33];
        uint64_t v37 = &v12->f32[v33];
        unint64_t v38 = &v11->f32[v33];
        do
        {
          float v39 = *v38++;
          float v40 = v39;
          float v41 = *v37++;
          float v42 = sqrtf(v41 + *(float *)v8.i32);
          float v43 = *v36++;
          float v44 = v43;
          float v45 = *v35++;
          float *v34 = (float)((float)((float)(*v34 - v40) * v44) / v42) + v45;
          ++v34;
          --v32;
        }
        while (v32);
      }
LABEL_3:
      float32x4_t result = (int *)memmove(*(void **)(*((void *)v6 + 24) + 8 * i), v10, 4 * (int)v9);
    }
  }
  return result;
}

void *sub_19E22BB54(void *a1, void *lpsrc)
{
  float32x4_t result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3D30, 0);
  if (!result) {
    __cxa_bad_cast();
  }
  a1[18] = result[18];
  a1[19] = result[19];
  a1[16] = result[16];
  a1[17] = result[17];
  return result;
}

void sub_19E22BBE8()
{
}

void sub_19E22BBFC()
{
}

void sub_19E22BC14(void *a1)
{
  unsigned int v1 = sub_19E22BC3C(a1);

  operator delete(v1);
}

void *sub_19E22BC3C(void *a1)
{
  *a1 = &unk_1EF0A5E90;
  uint64_t v4 = a1 + 36;
  uint64_t v2 = (void **)a1[36];
  uint64_t v3 = (void **)v4[1];
  if (v3 == v2)
  {
    uint64_t v2 = v3;
  }
  else
  {
    unint64_t v5 = 0;
    do
    {
      if (v2[v5])
      {
        operator delete[](v2[v5]);
        uint64_t v2 = (void **)a1[36];
        uint64_t v3 = (void **)a1[37];
      }
      ++v5;
    }
    while (v5 < v3 - v2);
  }
  if (v2)
  {
    a1[37] = v2;
    operator delete(v2);
  }
  sub_19E3030E8((uint64_t)(a1 + 27));
  uint64_t v6 = (void *)a1[24];
  if (v6)
  {
    a1[25] = v6;
    operator delete(v6);
  }
  long long v7 = (void *)a1[21];
  if (v7)
  {
    a1[22] = v7;
    operator delete(v7);
  }
  *a1 = &unk_1EF0A50F8;
  int32x2_t v8 = (void *)a1[1];
  if (v8)
  {
    a1[2] = v8;
    operator delete(v8);
  }
  return a1;
}

uint64_t sub_19E22BD1C(uint64_t a1, char **a2, uint64_t a3, uint64_t a4, int a5, char a6)
{
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  int32x2_t v8 = (char **)(a1 + 80);
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(void *)a1 = &unk_1EF0A59E8;
  uint64_t v70 = (void **)(a1 + 352);
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(void *)(a1 + 496) = a4;
  *(void *)(a1 + 520) = 0;
  *(_OWORD *)(a1 + 504) = 0u;
  *(void *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 536) = 0u;
  *(unsigned char *)(a1 + 41) = 0;
  *(unsigned char *)(a1 + 529) = a6;
  *(_OWORD *)(a1 + 332) = xmmword_19E351440;
  *(_DWORD *)(a1 + 328) = a5;
  *(unsigned char *)(a1 + 528) = 0;
  if (v8 != a2) {
    sub_19E1E5B9C(v8, *a2, a2[1], (a2[1] - *a2) >> 3);
  }
  *(void *)(a1 + 224) = a3;
  char v72 = 16;
  strcpy(__p, "From constructor");
  sub_19E1E22E4(a1);
  *(void *)(a1 + 264) = *(void *)(a1 + 256);
  *(void *)(a1 + 240) = *(void *)(a1 + 232);
  *(void *)(a1 + 360) = *(void *)(a1 + 352);
  uint64_t v9 = *(void *)(a1 + 80);
  if (*(void *)(a1 + 88) != v9)
  {
    unint64_t v10 = 0;
    int v11 = (void **)(a1 + 256);
    while (1)
    {
      int v13 = (*(uint64_t (**)(void))(**(void **)(v9 + 8 * v10) + 272))(*(void *)(v9 + 8 * v10));
      int v14 = v13;
      int v16 = *(char **)(a1 + 264);
      unint64_t v15 = *(void *)(a1 + 272);
      if ((unint64_t)v16 < v15)
      {
        *(_DWORD *)int v16 = v13;
        uint64_t v17 = (uint64_t)(v16 + 4);
        goto LABEL_29;
      }
      BOOL v18 = (char *)*v11;
      uint64_t v19 = v16 - (unsigned char *)*v11;
      uint64_t v20 = v19 >> 2;
      unint64_t v21 = (v19 >> 2) + 1;
      if (v21 >> 62) {
        goto LABEL_73;
      }
      uint64_t v22 = v15 - (void)v18;
      if (v22 >> 1 > v21) {
        unint64_t v21 = v22 >> 1;
      }
      unint64_t v23 = (unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v21;
      if (v23) {
        break;
      }
      uint64_t v24 = 0;
      uint64_t v25 = (_DWORD *)(4 * v20);
      *(_DWORD *)(4 * v20) = v14;
      uint64_t v17 = 4 * v20 + 4;
      if (v16 != v18) {
        goto LABEL_21;
      }
LABEL_27:
      *(void *)(a1 + 256) = v25;
      *(void *)(a1 + 264) = v17;
      *(void *)(a1 + 272) = &v24[4 * v23];
      if (v18) {
        operator delete(v18);
      }
LABEL_29:
      *(void *)(a1 + 264) = v17;
      if (!v10) {
        goto LABEL_7;
      }
      int v36 = *(char **)(a1 + 360);
      unint64_t v35 = *(void *)(a1 + 368);
      if ((unint64_t)v36 >= v35)
      {
        uint64_t v37 = (char *)*v70;
        uint64_t v38 = v36 - (unsigned char *)*v70;
        uint64_t v39 = v38 >> 2;
        unint64_t v40 = (v38 >> 2) + 1;
        if (v40 >> 62) {
LABEL_73:
        }
          sub_19E13D694();
        uint64_t v41 = v35 - (void)v37;
        if (v41 >> 1 > v40) {
          unint64_t v40 = v41 >> 1;
        }
        if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v42 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v42 = v40;
        }
        if (v42)
        {
          if (v42 >> 62) {
LABEL_72:
          }
            sub_19E13C418();
          float v43 = operator new(4 * v42);
          float v44 = &v43[4 * v39];
          *float v44 = v10;
          uint64_t v12 = (uint64_t)(v44 + 1);
          if (v36 == v37) {
            goto LABEL_48;
          }
LABEL_42:
          unint64_t v45 = v36 - 4 - v37;
          if (v45 < 0x2C) {
            goto LABEL_76;
          }
          if ((unint64_t)(v36 - &v43[v38]) < 0x20) {
            goto LABEL_76;
          }
          uint64_t v46 = (v45 >> 2) + 1;
          uint64_t v47 = 4 * (v46 & 0x7FFFFFFFFFFFFFF8);
          float v48 = &v36[-v47];
          float v44 = (_DWORD *)((char *)v44 - v47);
          int v49 = &v43[4 * v39 - 16];
          unint64_t v50 = v36 - 16;
          uint64_t v51 = v46 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v52 = *(_OWORD *)v50;
            *(v49 - 1) = *((_OWORD *)v50 - 1);
            *int v49 = v52;
            v49 -= 2;
            v50 -= 32;
            v51 -= 8;
          }
          while (v51);
          int v36 = v48;
          if (v46 != (v46 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_76:
            do
            {
              int v53 = *((_DWORD *)v36 - 1);
              v36 -= 4;
              *--float v44 = v53;
            }
            while (v36 != v37);
          }
        }
        else
        {
          float v43 = 0;
          float v44 = (_DWORD *)(4 * v39);
          *(_DWORD *)(4 * v39) = v10;
          uint64_t v12 = 4 * v39 + 4;
          if (v36 != v37) {
            goto LABEL_42;
          }
        }
LABEL_48:
        *(void *)(a1 + 352) = v44;
        *(void *)(a1 + 360) = v12;
        *(void *)(a1 + 368) = &v43[4 * v42];
        if (v37) {
          operator delete(v37);
        }
        goto LABEL_6;
      }
      *(_DWORD *)int v36 = v10;
      uint64_t v12 = (uint64_t)(v36 + 4);
LABEL_6:
      *(void *)(a1 + 360) = v12;
LABEL_7:
      ++v10;
      uint64_t v9 = *(void *)(a1 + 80);
      if (v10 >= (*(void *)(a1 + 88) - v9) >> 3) {
        goto LABEL_50;
      }
    }
    if (v23 >> 62) {
      goto LABEL_72;
    }
    uint64_t v24 = operator new(4 * v23);
    uint64_t v25 = &v24[4 * v20];
    _DWORD *v25 = v14;
    uint64_t v17 = (uint64_t)(v25 + 1);
    if (v16 == v18) {
      goto LABEL_27;
    }
LABEL_21:
    unint64_t v26 = v16 - 4 - v18;
    if (v26 < 0x2C) {
      goto LABEL_77;
    }
    if ((unint64_t)(v16 - &v24[v19]) < 0x20) {
      goto LABEL_77;
    }
    uint64_t v27 = (v26 >> 2) + 1;
    uint64_t v28 = 4 * (v27 & 0x7FFFFFFFFFFFFFF8);
    int v29 = &v16[-v28];
    uint64_t v25 = (_DWORD *)((char *)v25 - v28);
    uint64_t v30 = &v24[4 * v20 - 16];
    float32x4_t v31 = v16 - 16;
    uint64_t v32 = v27 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v33 = *(_OWORD *)v31;
      *(v30 - 1) = *((_OWORD *)v31 - 1);
      _OWORD *v30 = v33;
      v30 -= 2;
      v31 -= 32;
      v32 -= 8;
    }
    while (v32);
    int v16 = v29;
    if (v27 != (v27 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_77:
      do
      {
        int v34 = *((_DWORD *)v16 - 1);
        v16 -= 4;
        *--uint64_t v25 = v34;
      }
      while (v16 != v18);
    }
    goto LABEL_27;
  }
LABEL_50:
  unint64_t v54 = dword_1E9457D98;
  uint64_t v55 = *(void *)(a1 + 376);
  unint64_t v56 = (*(void *)(a1 + 384) - v55) >> 2;
  if (dword_1E9457D98 <= v56)
  {
    if (dword_1E9457D98 < v56) {
      *(void *)(a1 + 384) = v55 + 4 * dword_1E9457D98;
    }
  }
  else
  {
    sub_19E1C5E88(a1 + 376, dword_1E9457D98 - v56);
    unint64_t v54 = dword_1E9457D98;
  }
  uint64_t v57 = *(void *)(a1 + 400);
  unint64_t v58 = (*(void *)(a1 + 408) - v57) >> 2;
  if (v54 <= v58)
  {
    if (v54 < v58) {
      *(void *)(a1 + 408) = v57 + 4 * v54;
    }
  }
  else
  {
    sub_19E1C5E88(a1 + 400, v54 - v58);
    unint64_t v54 = dword_1E9457D98;
  }
  uint64_t v59 = *(void *)(a1 + 424);
  unint64_t v60 = (*(void *)(a1 + 432) - v59) >> 2;
  if (v54 <= v60)
  {
    if (v54 < v60) {
      *(void *)(a1 + 432) = v59 + 4 * v54;
    }
  }
  else
  {
    sub_19E1C5E88(a1 + 424, v54 - v60);
  }
  unint64_t v61 = (uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 3;
  uint64_t v62 = *(void *)(a1 + 544);
  uint64_t v63 = *(void *)(a1 + 536);
  unint64_t v64 = 0xAAAAAAAAAAAAAAABLL * ((v62 - v63) >> 3);
  if (v61 <= v64)
  {
    if (v61 < v64)
    {
      uint64_t v65 = v63 + 24 * v61;
      if (v62 != v65)
      {
        uint64_t v66 = *(void *)(a1 + 544);
        do
        {
          float32x4_t v68 = *(void **)(v66 - 24);
          v66 -= 24;
          uint64_t v67 = v68;
          if (v68)
          {
            *(void *)(v62 - 16) = v67;
            operator delete(v67);
          }
          uint64_t v62 = v66;
        }
        while (v66 != v65);
      }
      *(void *)(a1 + 544) = v65;
    }
  }
  else
  {
    sub_19E232360(a1 + 536, v61 - v64);
  }
  return a1;
}

void sub_19E22C2A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
  {
    operator delete(__p);
    uint64_t v24 = (void **)(v22 + 59);
    sub_19E14315C(a12);
    uint64_t v25 = *a10;
    if (!*a10)
    {
LABEL_3:
      sub_19E14315C(v24);
      unint64_t v26 = (void *)v22[56];
      if (!v26) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v24 = (void **)(v22 + 59);
    sub_19E14315C(a12);
    uint64_t v25 = *a10;
    if (!*a10) {
      goto LABEL_3;
    }
  }
  v22[64] = v25;
  operator delete(v25);
  sub_19E14315C(v24);
  unint64_t v26 = (void *)v22[56];
  if (!v26)
  {
LABEL_4:
    uint64_t v27 = *a13;
    if (!*a13) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  v22[57] = v26;
  operator delete(v26);
  uint64_t v27 = *a13;
  if (!*a13)
  {
LABEL_5:
    uint64_t v28 = *a14;
    if (!*a14) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  v22[54] = v27;
  operator delete(v27);
  uint64_t v28 = *a14;
  if (!*a14)
  {
LABEL_6:
    int v29 = *a15;
    if (!*a15) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  v22[51] = v28;
  operator delete(v28);
  int v29 = *a15;
  if (!*a15)
  {
LABEL_7:
    uint64_t v30 = *a16;
    if (!*a16) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  v22[48] = v29;
  operator delete(v29);
  uint64_t v30 = *a16;
  if (!*a16)
  {
LABEL_8:
    float32x4_t v31 = (void *)v22[38];
    if (!v31) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
LABEL_17:
  v22[45] = v30;
  operator delete(v30);
  float32x4_t v31 = (void *)v22[38];
  if (!v31)
  {
LABEL_9:
    uint64_t v32 = *a11;
    if (!*a11) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  v22[39] = v31;
  operator delete(v31);
  uint64_t v32 = *a11;
  if (!*a11)
  {
LABEL_10:
    sub_19E1CDA54(v22);
    _Unwind_Resume(a1);
  }
LABEL_19:
  v22[36] = v32;
  operator delete(v32);
  sub_19E1CDA54(v22);
  _Unwind_Resume(a1);
}

uint64_t sub_19E22C418(uint64_t a1)
{
  return a1 + 104;
}

uint64_t sub_19E22C420(uint64_t a1)
{
  return a1 + 448;
}

uint64_t sub_19E22C428(uint64_t a1)
{
  return a1 + 504;
}

uint64_t sub_19E22C430(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 80);
  if (*(void *)(a1 + 88) == v1) {
    return 0;
  }
  unint64_t v3 = 0;
  do
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(v1 + 8 * v3) + 56))(*(void *)(v1 + 8 * v3));
    if (result) {
      break;
    }
    ++v3;
    uint64_t v1 = *(void *)(a1 + 80);
  }
  while (v3 < (*(void *)(a1 + 88) - v1) >> 3);
  return result;
}

uint64_t sub_19E22C4B0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(result + 80);
  if (*(void *)(result + 88) != v4)
  {
    uint64_t v8 = result;
    unint64_t v9 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(v4 + 8 * v9) + 64))(*(void *)(v4 + 8 * v9), a2, a3, a4);
      ++v9;
      uint64_t v4 = *(void *)(v8 + 80);
    }
    while (v9 < (*(void *)(v8 + 88) - v4) >> 3);
  }
  return result;
}

uint64_t sub_19E22C544(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(result + 80);
  if (*(void *)(result + 88) != v5)
  {
    uint64_t v10 = result;
    unint64_t v11 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(v5 + 8 * v11) + 72))(*(void *)(v5 + 8 * v11), a2, a3, a4, a5);
      ++v11;
      uint64_t v5 = *(void *)(v10 + 80);
    }
    while (v11 < (*(void *)(v10 + 88) - v5) >> 3);
  }
  return result;
}

void *sub_19E22C5E0(void *result, void *lpsrc, void *a3)
{
  unint64_t v3 = a3;
  uint64_t v4 = (uint64_t)result;
  if (lpsrc)
  {
    uint64_t result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3CE8, 0);
    uint64_t v5 = (uint64_t)result;
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v5 = 0;
  if (a3)
  {
LABEL_3:
    uint64_t result = __dynamic_cast(v3, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3CE8, 0);
    unint64_t v3 = result;
  }
LABEL_4:
  uint64_t v6 = *(void *)(v4 + 80);
  if (*(void *)(v4 + 88) != v6)
  {
    unint64_t v7 = 0;
    do
    {
      uint64_t result = (void *)(*(uint64_t (**)(void, void, void))(**(void **)(v6 + 8 * v7) + 80))(*(void *)(v6 + 8 * v7), *(void *)(*(void *)(v5 + 80) + 8 * v7), *(void *)(v3[10] + 8 * v7));
      ++v7;
      uint64_t v6 = *(void *)(v4 + 80);
    }
    while (v7 < (*(void *)(v4 + 88) - v6) >> 3);
  }
  return result;
}

void *sub_19E22C714(void *result, void *lpsrc, void *a3)
{
  unint64_t v3 = a3;
  uint64_t v4 = (uint64_t)result;
  if (lpsrc)
  {
    uint64_t result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3CE8, 0);
    uint64_t v5 = (uint64_t)result;
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v5 = 0;
  if (a3)
  {
LABEL_3:
    uint64_t result = __dynamic_cast(v3, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3CE8, 0);
    unint64_t v3 = result;
  }
LABEL_4:
  uint64_t v6 = *(void *)(v4 + 80);
  if (*(void *)(v4 + 88) != v6)
  {
    unint64_t v7 = 0;
    do
    {
      uint64_t result = (void *)(*(uint64_t (**)(void, void, void))(**(void **)(v6 + 8 * v7) + 88))(*(void *)(v6 + 8 * v7), *(void *)(*(void *)(v5 + 80) + 8 * v7), *(void *)(v3[10] + 8 * v7));
      ++v7;
      uint64_t v6 = *(void *)(v4 + 80);
    }
    while (v7 < (*(void *)(v4 + 88) - v6) >> 3);
  }
  return result;
}

void *sub_19E22C848(void *result, void *lpsrc)
{
  uint64_t v2 = result;
  if (lpsrc)
  {
    uint64_t result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3CE8, 0);
    unint64_t v3 = result;
    uint64_t v4 = v2[10];
    if (v2[11] == v4) {
      return result;
    }
  }
  else
  {
    unint64_t v3 = 0;
    uint64_t v4 = result[10];
    if (result[11] == v4) {
      return result;
    }
  }
  unint64_t v5 = 0;
  do
  {
    uint64_t result = (void *)(*(uint64_t (**)(void, void))(**(void **)(v4 + 8 * v5) + 96))(*(void *)(v4 + 8 * v5), *(void *)(v3[10] + 8 * v5));
    ++v5;
    uint64_t v4 = v2[10];
  }
  while (v5 < (v2[11] - v4) >> 3);
  return result;
}

void *sub_19E22C92C(void *result, void *lpsrc)
{
  uint64_t v2 = result;
  if (lpsrc)
  {
    uint64_t result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3CE8, 0);
    unint64_t v3 = result;
    uint64_t v4 = v2[10];
    if (v2[11] == v4) {
      return result;
    }
  }
  else
  {
    unint64_t v3 = 0;
    uint64_t v4 = result[10];
    if (result[11] == v4) {
      return result;
    }
  }
  unint64_t v5 = 0;
  do
  {
    uint64_t result = (void *)(*(uint64_t (**)(void, void))(**(void **)(v4 + 8 * v5) + 104))(*(void *)(v4 + 8 * v5), *(void *)(v3[10] + 8 * v5));
    ++v5;
    uint64_t v4 = v2[10];
  }
  while (v5 < (v2[11] - v4) >> 3);
  return result;
}

uint64_t sub_19E22CA10(uint64_t result, float a2)
{
  uint64_t v2 = *(void *)(result + 80);
  if (*(void *)(result + 88) != v2)
  {
    uint64_t v4 = result;
    unint64_t v5 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(void, float))(**(void **)(v2 + 8 * v5) + 112))(*(void *)(v2 + 8 * v5), a2);
      ++v5;
      uint64_t v2 = *(void *)(v4 + 80);
    }
    while (v5 < (*(void *)(v4 + 88) - v2) >> 3);
  }
  return result;
}

uint64_t sub_19E22CA8C(uint64_t result, float a2)
{
  uint64_t v2 = *(void *)(result + 80);
  if (*(void *)(result + 88) != v2)
  {
    uint64_t v4 = result;
    unint64_t v5 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(void, float))(**(void **)(v2 + 8 * v5) + 120))(*(void *)(v2 + 8 * v5), a2);
      ++v5;
      uint64_t v2 = *(void *)(v4 + 80);
    }
    while (v5 < (*(void *)(v4 + 88) - v2) >> 3);
  }
  return result;
}

uint64_t sub_19E22CB18(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 80);
  if (*(void *)(result + 88) != v1)
  {
    uint64_t v2 = result;
    unint64_t v3 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(void))(**(void **)(v1 + 8 * v3) + 160))(*(void *)(v1 + 8 * v3));
      ++v3;
      uint64_t v1 = *(void *)(v2 + 80);
    }
    while (v3 < (*(void *)(v2 + 88) - v1) >> 3);
  }
  return result;
}

void sub_19E22CB84(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  if (*(void *)(a1 + 88) != v2)
  {
    unint64_t v3 = 0;
    do
    {
      (*(void (**)(void))(**(void **)(v2 + 8 * v3) + 200))(*(void *)(v2 + 8 * v3));
      ++v3;
      uint64_t v2 = *(void *)(a1 + 80);
    }
    while (v3 < (*(void *)(a1 + 88) - v2) >> 3);
  }
  strcpy(__p, "From allocAllBuffers");
  sub_19E1E22E4(a1);
}

void sub_19E22CC4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E22CC68(void *a1)
{
  uint64_t v3 = a1[35];
  uint64_t v2 = a1[36];
  if (v2 == v3)
  {
    uint64_t v3 = a1[36];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      unint64_t v5 = *(void ***)(v3 + 8 * v4);
      if (*v5)
      {
        operator delete[](*v5);
        void *v5 = 0;
        uint64_t v3 = a1[35];
        uint64_t v2 = a1[36];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  a1[36] = v3;
  uint64_t v6 = a1[10];
  if (a1[11] != v6)
  {
    unint64_t v7 = 0;
    do
    {
      (*(void (**)(void))(**(void **)(v6 + 8 * v7) + 208))(*(void *)(v6 + 8 * v7));
      ++v7;
      uint64_t v6 = a1[10];
    }
    while (v7 < (a1[11] - v6) >> 3);
  }
  a1[14] = a1[13];
  a1[57] = a1[56];
  a1[64] = a1[63];
  uint64_t v9 = a1[25];
  uint64_t v8 = a1[26];
  if (v8 != v9)
  {
    uint64_t v10 = a1[26];
    do
    {
      uint64_t v12 = *(void **)(v10 - 24);
      v10 -= 24;
      unint64_t v11 = v12;
      if (v12)
      {
        *(void *)(v8 - 16) = v11;
        operator delete(v11);
      }
      uint64_t v8 = v10;
    }
    while (v10 != v9);
  }
  a1[26] = v9;
  uint64_t v14 = a1[59];
  uint64_t v13 = a1[60];
  if (v13 != v14)
  {
    uint64_t v15 = a1[60];
    do
    {
      uint64_t v17 = *(void **)(v15 - 24);
      v15 -= 24;
      int v16 = v17;
      if (v17)
      {
        *(void *)(v13 - 16) = v16;
        operator delete(v16);
      }
      uint64_t v13 = v15;
    }
    while (v15 != v14);
  }
  a1[60] = v14;
  a1[39] = a1[38];
}

void sub_19E22CDB4(uint64_t a1, void *a2, void *a3, int a4, char a5)
{
  int v44 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 272))(a1);
  if (a4 >= 1)
  {
    unint64_t v8 = 0;
    while ((a5 & 1) != 0)
    {
      if (a3[1] == *a3)
      {
        if (v44 >= 1)
        {
          int v16 = 0;
          uint64_t v23 = 0;
          float v24 = 1.1755e-38;
          do
          {
            float v25 = *(float *)(*(void *)(*a2 + 8 * v8) + 4 * v23);
            if (v25 > v24) {
              int v16 = v23;
            }
            float v24 = fmaxf(v25, v24);
            ++v23;
          }
          while (v44 != v23);
          goto LABEL_21;
        }
LABEL_24:
        int v16 = 0;
        uint64_t v17 = *(void *)(a1 + 376);
        *(_DWORD *)(v17 + 4 * v8) = 0;
        BOOL v18 = *(void **)(a1 + 496);
        uint64_t v19 = v18[8];
        if (v19) {
          goto LABEL_22;
        }
        goto LABEL_25;
      }
      if (v8 >= (a4 - 1))
      {
        int v16 = 2;
        uint64_t v17 = *(void *)(a1 + 376);
        *(_DWORD *)(v17 + 4 * v8) = 2;
        BOOL v18 = *(void **)(a1 + 496);
        uint64_t v19 = v18[8];
        if (v19)
        {
LABEL_22:
          unint64_t v26 = (int *)(v19 + 8 * v16 + 4);
LABEL_23:
          int v27 = *v26;
          goto LABEL_36;
        }
      }
      else
      {
        int v16 = **(_DWORD **)(*a3 + 24 * v8 + 24);
        uint64_t v17 = *(void *)(a1 + 376);
        *(_DWORD *)(v17 + 4 * v8) = v16;
        BOOL v18 = *(void **)(a1 + 496);
        uint64_t v19 = v18[8];
        if (v19) {
          goto LABEL_22;
        }
      }
LABEL_25:
      uint64_t v28 = v18[6];
      if (v28)
      {
        int v29 = v18 + 6;
        do
        {
          int v30 = *(_DWORD *)(v28 + 28);
          BOOL v31 = v30 < v16;
          if (v30 >= v16) {
            uint64_t v32 = (uint64_t *)v28;
          }
          else {
            uint64_t v32 = (uint64_t *)(v28 + 8);
          }
          if (!v31) {
            int v29 = (void *)v28;
          }
          uint64_t v28 = *v32;
        }
        while (*v32);
        if (v29 != v18 + 6 && *((_DWORD *)v29 + 7) <= v16)
        {
          unint64_t v26 = (int *)(v29 + 4);
          goto LABEL_23;
        }
      }
      int v27 = -1;
LABEL_36:
      *(_DWORD *)(*(void *)(a1 + 400) + 4 * v8) = v27 + 1;
      uint64_t v33 = *(int *)(v17 + 4 * v8);
      uint64_t v34 = v18[13];
      if (v34)
      {
        unint64_t v35 = (int *)(v34 + 8 * v33 + 4);
LABEL_38:
        int v9 = *v35;
        goto LABEL_4;
      }
      uint64_t v38 = v18[11];
      int v36 = v18 + 11;
      uint64_t v37 = v38;
      if (v38)
      {
        uint64_t v39 = v36;
        do
        {
          int v40 = *(_DWORD *)(v37 + 28);
          BOOL v41 = v40 < (int)v33;
          if (v40 >= (int)v33) {
            unint64_t v42 = (uint64_t *)v37;
          }
          else {
            unint64_t v42 = (uint64_t *)(v37 + 8);
          }
          if (!v41) {
            uint64_t v39 = (void *)v37;
          }
          uint64_t v37 = *v42;
        }
        while (*v42);
        if (v39 != v36 && *((_DWORD *)v39 + 7) <= (int)v33)
        {
          unint64_t v35 = (int *)(v39 + 4);
          goto LABEL_38;
        }
      }
      int v9 = -1;
LABEL_4:
      *(_DWORD *)(*(void *)(a1 + 424) + 4 * v8) = v9;
      uint64_t v10 = **(void **)(a1 + 200);
      int v11 = (*(uint64_t (**)(void))(***(void ***)(a1 + 80) + 272))(**(void **)(a1 + 80));
      bzero(*(void **)(v10 + 8 * v8), 4 * v11);
      uint64_t v12 = *(void **)(a1 + 200);
      uint64_t v13 = *(int *)(*(void *)(a1 + 400) + 4 * v8);
      *(_DWORD *)(*(void *)(*v12 + 8 * v8) + 4 * v13 - 4) = 1065353216;
      uint64_t v14 = v12[3 * (int)v13];
      int v15 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 80) + 8 * v13) + 272))();
      bzero(*(void **)(v14 + 8 * v8), 4 * v15);
      *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 200) + 24 * *(int *)(*(void *)(a1 + 400) + 4 * v8))
                            + 8 * v8)
                + 4 * *(int *)(*(void *)(a1 + 424) + 4 * v8)) = 1065353216;
      if (++v8 == a4) {
        return;
      }
    }
    if (v44 >= 1)
    {
      int v16 = 0;
      uint64_t v20 = 0;
      float v21 = 1.1755e-38;
      do
      {
        float v22 = *(float *)(*(void *)(*a2 + 8 * v8) + 4 * v20);
        if (v22 > v21) {
          int v16 = v20;
        }
        float v21 = fmaxf(v22, v21);
        ++v20;
      }
      while (v44 != v20);
LABEL_21:
      uint64_t v17 = *(void *)(a1 + 376);
      *(_DWORD *)(v17 + 4 * v8) = v16;
      BOOL v18 = *(void **)(a1 + 496);
      uint64_t v19 = v18[8];
      if (v19) {
        goto LABEL_22;
      }
      goto LABEL_25;
    }
    goto LABEL_24;
  }
}

uint64_t sub_19E22D14C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 80);
  if ((unint64_t)(*(void *)(a1 + 88) - v1) < 9) {
    return 0;
  }
  LODWORD(v3) = 0;
  unint64_t v4 = 1;
  do
  {
    uint64_t v3 = (*(unsigned int (**)(void))(**(void **)(v1 + 8 * v4) + 272))(*(void *)(v1 + 8 * v4))
       + v3;
    ++v4;
    uint64_t v1 = *(void *)(a1 + 80);
  }
  while (v4 < (*(void *)(a1 + 88) - v1) >> 3);
  return v3;
}

uint64_t sub_19E22D1F0(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(result + 528) = a2;
  uint64_t v2 = *(void *)(result + 80);
  if (*(void *)(result + 88) != v2)
  {
    uint64_t v4 = result;
    unint64_t v5 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 8 * v5) + 280))(*(void *)(v2 + 8 * v5), a2);
      ++v5;
      uint64_t v2 = *(void *)(v4 + 80);
    }
    while (v5 < (*(void *)(v4 + 88) - v2) >> 3);
  }
  return result;
}

void sub_19E22D278()
{
}

void sub_19E22D28C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  if (a5 >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 8 * a5;
    uint64_t v9 = a5;
    do
    {
      uint64_t v10 = *(void *)(a1 + 504);
      int v11 = (*(uint64_t (**)(void))(***(void ***)(a1 + 80) + 264))(**(void **)(a1 + 80));
      bzero(*(void **)(v10 + v7), 4 * v11);
      v7 += 8;
    }
    while (v8 != v7);
    for (uint64_t i = 0; i != v9; ++i)
    {
      uint64_t v13 = *(int *)(a1 + 332);
      uint64_t v14 = *(void *)(*(void *)(a1 + 80) + 8 * v13);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void))(*(void *)v14 + 248))(v14, *(void *)(a1 + 472) + 24 * (int)v13, a3, i, *(unsigned int *)(*(void *)(a1 + 256) + 4 * v13), *(unsigned int *)(*(void *)(a1 + 256) + 4 * v13));
      uint64_t v15 = *(void *)(*(void *)(a1 + 80) + 8 * v13);
      uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 48))(v15);
      BOOL v18 = *(const void **)v16;
      uint64_t v17 = *(void *)(v16 + 8);
      uint64_t v19 = v17 - *(void *)v16;
      if (v17 == *(void *)v16)
      {
        uint64_t v20 = 0;
      }
      else
      {
        if (v19 < 0) {
          sub_19E13D694();
        }
        uint64_t v20 = operator new(v17 - *(void *)v16);
        memcpy(v20, v18, v19 & 0xFFFFFFFFFFFFFFF8);
      }
      uint64_t v21 = *(void *)(a1 + 504);
      uint64_t v22 = *(void *)(*(void *)(a1 + 80) + 8 * v13);
      int v23 = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 264))(v22);
      int v24 = v23 / 8;
      if (v23 >= 8)
      {
        float v25 = *(float32x4_t **)(v21 + 8 * i);
        unint64_t v26 = (float32x4_t *)*((void *)v20 + i);
        int v27 = v23 / 8;
        do
        {
          float32x4_t v28 = *v26;
          float32x4_t v29 = v26[1];
          v26 += 2;
          float32x4_t v30 = vaddq_f32(v25[1], v29);
          float32x4_t *v25 = vaddq_f32(*v25, v28);
          v25[1] = v30;
          v25 += 2;
          --v27;
        }
        while (v27);
      }
      int v31 = 8 * v24;
      if (8 * v24 < v23)
      {
        uint64_t v32 = *((void *)v20 + i);
        uint64_t v33 = *(void *)(v21 + 8 * i);
        uint64_t v34 = v31;
        if ((unint64_t)(v23 - (uint64_t)v31) < 8) {
          goto LABEL_23;
        }
        unint64_t v35 = v33 + 4 * v31;
        unint64_t v36 = v32 + 4 * v31;
        if (v35 < v32 + 4 * v23 && v36 < v33 + 4 * v23) {
          goto LABEL_23;
        }
        uint64_t v38 = v31 + (v23 & 7) - v23;
        uint64_t v39 = (float32x4_t *)(v36 + 16);
        int v40 = (float32x4_t *)(v35 + 16);
        do
        {
          float32x4_t v41 = vaddq_f32(*v40, *v39);
          v40[-1] = vaddq_f32(v40[-1], v39[-1]);
          *int v40 = v41;
          v39 += 2;
          v40 += 2;
          v38 += 8;
        }
        while (v38);
        uint64_t v34 = v23 - (v23 & 7);
        if ((v23 & 7) != 0)
        {
LABEL_23:
          uint64_t v42 = v23 - v34;
          float v43 = (float *)(v33 + 4 * v34);
          int v44 = (float *)(v32 + 4 * v34);
          do
          {
            float v45 = *v44++;
            float *v43 = *v43 + v45;
            ++v43;
            --v42;
          }
          while (v42);
        }
      }
      uint64_t v46 = *(int *)(*(void *)(a1 + 400) + 4 * i);
      uint64_t v47 = *(void *)(*(void *)(a1 + 80) + 8 * v46);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void))(*(void *)v47 + 248))(v47, *(void *)(a1 + 472) + 24 * *(int *)(a1 + 336), a3, i, *(unsigned int *)(a1 + 344), *(unsigned int *)(*(void *)(a1 + 256) + 4 * v46));
      uint64_t v48 = *(void *)(*(void *)(a1 + 80) + 8 * v46);
      uint64_t v49 = (*(uint64_t (**)(uint64_t))(*(void *)v48 + 48))(v48);
      uint64_t v51 = *(const void **)v49;
      uint64_t v50 = *(void *)(v49 + 8);
      uint64_t v52 = v50 - *(void *)v49;
      if (v50 == *(void *)v49)
      {
        int v53 = 0;
      }
      else
      {
        if (v52 < 0) {
          sub_19E13D694();
        }
        int v53 = operator new(v50 - *(void *)v49);
        memcpy(v53, v51, v52 & 0xFFFFFFFFFFFFFFF8);
      }
      uint64_t v54 = *(void *)(a1 + 504);
      uint64_t v55 = *(void *)(*(void *)(a1 + 80) + 8 * v46);
      int v56 = (*(uint64_t (**)(uint64_t))(*(void *)v55 + 264))(v55);
      int v57 = v56 / 8;
      if (v56 >= 8)
      {
        unint64_t v58 = *(float32x4_t **)(v54 + 8 * i);
        uint64_t v59 = (float32x4_t *)*((void *)v53 + i);
        int v60 = v56 / 8;
        do
        {
          float32x4_t v61 = *v59;
          float32x4_t v62 = v59[1];
          v59 += 2;
          float32x4_t v63 = vaddq_f32(v58[1], v62);
          float32x4_t *v58 = vaddq_f32(*v58, v61);
          v58[1] = v63;
          v58 += 2;
          --v60;
        }
        while (v60);
      }
      int v64 = 8 * v57;
      if (8 * v57 < v56)
      {
        uint64_t v65 = *((void *)v53 + i);
        uint64_t v66 = *(void *)(v54 + 8 * i);
        uint64_t v67 = v64;
        if ((unint64_t)(v56 - (uint64_t)v64) < 8) {
          goto LABEL_42;
        }
        unint64_t v68 = v66 + 4 * v64;
        unint64_t v69 = v65 + 4 * v64;
        if (v68 < v65 + 4 * v56 && v69 < v66 + 4 * v56) {
          goto LABEL_42;
        }
        uint64_t v71 = v64 + (v56 & 7) - v56;
        char v72 = (float32x4_t *)(v69 + 16);
        float32x4_t v73 = (float32x4_t *)(v68 + 16);
        do
        {
          float32x4_t v74 = vaddq_f32(*v73, *v72);
          v73[-1] = vaddq_f32(v73[-1], v72[-1]);
          float32x4_t *v73 = v74;
          v72 += 2;
          v73 += 2;
          v71 += 8;
        }
        while (v71);
        uint64_t v67 = v56 - (v56 & 7);
        if ((v56 & 7) != 0)
        {
LABEL_42:
          uint64_t v75 = v56 - v67;
          uint64_t v76 = (float *)(v66 + 4 * v67);
          int v77 = (float *)(v65 + 4 * v67);
          do
          {
            float v78 = *v77++;
            *uint64_t v76 = *v76 + v78;
            ++v76;
            --v75;
          }
          while (v75);
        }
      }
      if (v53) {
        operator delete(v53);
      }
      if (v20) {
        operator delete(v20);
      }
    }
  }
}

void sub_19E22D78C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (v13) {
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E22D7E8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v240 = 0;
  uint64_t v241 = 0;
  uint64_t v242 = 0;
  if ((*(_DWORD *)(a1 + 340) & 0x80000000) == 0)
  {
    uint64_t v13 = 0;
    uint64_t v14 = *(void *)(a1 + 304);
    do
    {
      *(_DWORD *)(v14 + 4 * v13) = 0;
      BOOL v84 = v13++ < *(int *)(a1 + 340);
    }
    while (v84);
  }
  uint64_t v15 = *(void *)(a1 + 224);
  if (v15) {
    a2 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 32))(v15);
  }
  uint64_t v16 = a4 & 0xFFFFFF;
  if (v16 > (a5 != 0))
  {
    uint64_t v17 = a5 != 0;
    uint64_t v227 = a2;
    uint64_t v228 = a3;
    uint64_t v229 = v16;
    do
    {
      uint64_t v18 = *(int *)(a1 + 332);
      uint64_t v19 = *(void *)(*(void *)(a1 + 80) + 8 * v18);
      (*(void (**)(uint64_t))(*(void *)v19 + 272))(v19);
      uint64_t v20 = *(void *)(*(void *)(a1 + 80) + 8 * v18);
      (*(void (**)(uint64_t))(*(void *)v20 + 264))(v20);
      uint64_t v21 = *(void *)(a1 + 304);
      if (!*(_DWORD *)(v21 + 4 * v18))
      {
        *(_DWORD *)(v21 + 4 * v18) = 1;
        uint64_t v22 = *(void *)(*(void *)(a1 + 80) + 8 * v18);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v22 + 256))(v22, v229);
      }
      uint64_t v237 = 0;
      uint64_t v238 = 0;
      uint64_t v239 = 0;
      uint64_t v23 = *(void *)(*(void *)(a1 + 80) + 8 * v18);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void **))(*(void *)v23 + 224))(v23, a2, a3, v17, &v237);
      uint64_t v24 = *(void *)(*(void *)(a1 + 80) + 8 * v18);
      int v233 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v24 + 32))(v24);
      __p = 0;
      float32x4_t v235 = 0;
      int v236 = 0;
      int v25 = *(_DWORD *)(a1 + 328);
      if (v25 == 1)
      {
        int v42 = *(_DWORD *)(*(void *)(a1 + 400) + 4 * v17);
        float v43 = (int *)operator new(4uLL);
        int *v43 = v42;
        float32x4_t v235 = v43 + 1;
        int v236 = (char *)(v43 + 1);
        __p = v43;
        goto LABEL_212;
      }
      if (v25 == 2)
      {
        uint64_t v31 = *v233;
        uint64_t v32 = *(void *)(*(void *)(a1 + 80) + 8 * *(int *)(a1 + 332));
        int v33 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 272))(v32);
        if (v33 < 1)
        {
          int v38 = 1;
          int v40 = v235;
          uint64_t v39 = v236;
          if (v235 < (int *)v236) {
            goto LABEL_25;
          }
        }
        else
        {
          int v34 = 0;
          uint64_t v35 = 0;
          float v36 = 1.1755e-38;
          do
          {
            float v37 = *(float *)(*(void *)(v31 + 8 * v17) + 4 * v35);
            if (v37 > v36) {
              int v34 = v35;
            }
            float v36 = fmaxf(v37, v36);
            ++v35;
          }
          while (v33 != v35);
          int v38 = v34 + 1;
          int v40 = v235;
          uint64_t v39 = v236;
          if (v235 < (int *)v236)
          {
LABEL_25:
            *int v40 = v38;
            uint64_t v41 = (uint64_t)(v40 + 1);
LABEL_182:
            float32x4_t v235 = (int *)v41;
            p_p = &__p;
            goto LABEL_213;
          }
        }
        float v45 = (int *)__p;
        int64_t v46 = (char *)v40 - (unsigned char *)__p;
        uint64_t v47 = ((char *)v40 - (unsigned char *)__p) >> 2;
        unint64_t v48 = v47 + 1;
        if ((unint64_t)(v47 + 1) >> 62) {
          sub_19E13D694();
        }
        uint64_t v49 = v39 - (unsigned char *)__p;
        if (v49 >> 1 > v48) {
          unint64_t v48 = v49 >> 1;
        }
        if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v50 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v50 = v48;
        }
        if (v50)
        {
          if (v50 >> 62) {
            sub_19E13C418();
          }
          uint64_t v51 = operator new(4 * v50);
          uint64_t v52 = (int *)&v51[4 * v47];
          *uint64_t v52 = v38;
          uint64_t v41 = (uint64_t)(v52 + 1);
          if (v40 == v45) {
            goto LABEL_180;
          }
LABEL_174:
          unint64_t v161 = (char *)(v40 - 1) - (char *)v45;
          if (v161 < 0x2C) {
            goto LABEL_259;
          }
          if ((unint64_t)((char *)v40 - &v51[v46]) < 0x20) {
            goto LABEL_259;
          }
          uint64_t v162 = (v161 >> 2) + 1;
          uint64_t v163 = 4 * (v162 & 0x7FFFFFFFFFFFFFF8);
          unint64_t v164 = &v40[v163 / 0xFFFFFFFFFFFFFFFCLL];
          uint64_t v52 = (int *)((char *)v52 - v163);
          uint64_t v165 = &v51[4 * v47 - 16];
          unint64_t v166 = v40 - 4;
          uint64_t v167 = v162 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v168 = *(_OWORD *)v166;
            *(v165 - 1) = *((_OWORD *)v166 - 1);
            *uint64_t v165 = v168;
            v165 -= 2;
            v166 -= 8;
            v167 -= 8;
          }
          while (v167);
          int v40 = v164;
          if (v162 != (v162 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_259:
            do
            {
              int v169 = *--v40;
              *--uint64_t v52 = v169;
            }
            while (v40 != v45);
          }
        }
        else
        {
          uint64_t v51 = 0;
          uint64_t v52 = (int *)(4 * v47);
          *(_DWORD *)(4 * v47) = v38;
          uint64_t v41 = 4 * v47 + 4;
          if (v40 != v45) {
            goto LABEL_174;
          }
        }
LABEL_180:
        __p = v52;
        float32x4_t v235 = (int *)v41;
        int v236 = &v51[4 * v50];
        if (v45) {
          operator delete(v45);
        }
        goto LABEL_182;
      }
      if (v25 != 4)
      {
        p_p = &__p;
        sub_19E1E5CE4(*v233 + 8 * v17, (float32x4_t **)(*v233 + 8 * v17), *(_DWORD *)(a1 + 340), (unint64_t *)&__p, *(_DWORD *)(*(void *)(a1 + 496) + 8), 1u);
        goto LABEL_213;
      }
      unint64_t v26 = v240;
      uint64_t v241 = v240;
      uint64_t v27 = *(void *)(a1 + 536);
      uint64_t v28 = *(void *)(a1 + 544) - v27;
      if (!v28) {
        goto LABEL_44;
      }
      unint64_t v29 = v28 / 24;
      if (v29 <= 1) {
        unint64_t v29 = 1;
      }
      if (v29 >= 2)
      {
        unint64_t v30 = v29 & 0xFFFFFFFFFFFFFFFELL;
        int v53 = (void *)(v27 + 32);
        unint64_t v54 = v29 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          uint64_t v55 = *(v53 - 1);
          *(v53 - 3) = *(v53 - 4);
          *int v53 = v55;
          v53 += 6;
          v54 -= 2;
        }
        while (v54);
        if (v29 == v30) {
          goto LABEL_44;
        }
      }
      else
      {
        unint64_t v30 = 0;
      }
      int v56 = (void *)(v27 + 24 * v30 + 8);
      unint64_t v57 = v29 - v30;
      do
      {
        *int v56 = *(v56 - 1);
        v56 += 3;
        --v57;
      }
      while (v57);
LABEL_44:
      uint64_t v59 = *(_DWORD **)a7;
      uint64_t v58 = *(void *)(a7 + 8);
      p_p = (void **)(a1 + 352);
      unint64_t v60 = v58 - *(void *)a7;
      if (v58 == *(void *)a7) {
        goto LABEL_213;
      }
      if (v60 < 5)
      {
        uint64_t v241 = v26;
        if (v60 != 4) {
          goto LABEL_212;
        }
        float32x4_t v133 = operator new(4uLL);
        _DWORD *v133 = *v59;
        float32x4_t v62 = (char *)(v133 + 1);
        uint64_t v134 = v133;
        if (*v133 != -1) {
          goto LABEL_145;
        }
LABEL_184:
        uint64_t v170 = *(void *)(a1 + 544);
        uint64_t v171 = *(void *)(a1 + 536);
        if (v170 == v171)
        {
LABEL_211:
          operator delete(v134);
          goto LABEL_212;
        }
        unint64_t v172 = 0;
        uint64_t v232 = v134;
        while (2)
        {
          uint64_t v174 = *(void *)(v171 + 24 * v172);
          uint64_t v175 = *(void *)(v171 + 24 * v172++ + 8);
          if (v175 == v174) {
            goto LABEL_188;
          }
          vDSP_Length v176 = (char *)v235;
          if (v235 < (int *)v236)
          {
            *float32x4_t v235 = v172;
            uint64_t v173 = (uint64_t)(v176 + 4);
            goto LABEL_187;
          }
          uint64_t v177 = (char *)__p;
          int64_t v178 = (char *)v235 - (unsigned char *)__p;
          uint64_t v179 = ((char *)v235 - (unsigned char *)__p) >> 2;
          unint64_t v180 = v179 + 1;
          if ((unint64_t)(v179 + 1) >> 62) {
            sub_19E13D694();
          }
          uint64_t v181 = v236 - (unsigned char *)__p;
          if ((v236 - (unsigned char *)__p) >> 1 > v180) {
            unint64_t v180 = v181 >> 1;
          }
          if ((unint64_t)v181 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v182 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v182 = v180;
          }
          if (v182)
          {
            int64_t v226 = (char *)v235 - (unsigned char *)__p;
            if (v182 >> 62) {
              sub_19E13C418();
            }
            uint64_t v183 = ((char *)v235 - (unsigned char *)__p) >> 2;
            uint64_t v184 = v171;
            unint64_t v185 = v182;
            int v186 = (char *)operator new(4 * v182);
            uint64_t v171 = v184;
            unint64_t v182 = v185;
            uint64_t v179 = v183;
            int64_t v178 = v226;
            uint64_t v187 = &v186[4 * v183];
            *(_DWORD *)uint64_t v187 = v172;
            uint64_t v173 = (uint64_t)(v187 + 4);
            if (v176 != v177)
            {
LABEL_200:
              unint64_t v188 = v176 - 4 - v177;
              if (v188 < 0x2C)
              {
                uint64_t v134 = v232;
                goto LABEL_208;
              }
              uint64_t v134 = v232;
              if ((unint64_t)(v176 - &v186[v178]) < 0x20) {
                goto LABEL_260;
              }
              uint64_t v189 = (v188 >> 2) + 1;
              uint64_t v190 = 4 * (v189 & 0x7FFFFFFFFFFFFFF8);
              float v191 = &v176[-v190];
              v187 -= v190;
              uint64_t v192 = &v186[4 * v179 - 16];
              unint64_t v193 = v176 - 16;
              uint64_t v194 = v189 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v195 = *(_OWORD *)v193;
                *((_OWORD *)v192 - 1) = *((_OWORD *)v193 - 1);
                *(_OWORD *)uint64_t v192 = v195;
                v192 -= 32;
                v193 -= 32;
                v194 -= 8;
              }
              while (v194);
              vDSP_Length v176 = v191;
              if (v189 != (v189 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_260:
                do
                {
LABEL_208:
                  int v196 = *((_DWORD *)v176 - 1);
                  v176 -= 4;
                  *((_DWORD *)v187 - 1) = v196;
                  v187 -= 4;
                }
                while (v176 != v177);
              }
LABEL_209:
              __p = v187;
              float32x4_t v235 = (int *)v173;
              int v236 = &v186[4 * v182];
              if (v177)
              {
                operator delete(v177);
                uint64_t v170 = *(void *)(a1 + 544);
                uint64_t v171 = *(void *)(a1 + 536);
              }
LABEL_187:
              float32x4_t v235 = (int *)v173;
LABEL_188:
              if (0xAAAAAAAAAAAAAAABLL * ((v170 - v171) >> 3) <= v172) {
                goto LABEL_171;
              }
              continue;
            }
          }
          else
          {
            int v186 = 0;
            uint64_t v187 = (char *)(4 * v179);
            *(_DWORD *)(4 * v179) = v172;
            uint64_t v173 = 4 * v179 + 4;
            if (v176 != v177) {
              goto LABEL_200;
            }
          }
          break;
        }
        uint64_t v134 = v232;
        goto LABEL_209;
      }
      float32x4_t v61 = operator new(4uLL);
      uint64_t v230 = v61;
      *float32x4_t v61 = *v59;
      float32x4_t v62 = (char *)(v61 + 1);
      if (v59[1] != -1) {
        sub_19E2F6320(900);
      }
      if (v60 < 9)
      {
        uint64_t v134 = v61;
        if (*v61 == -1) {
          goto LABEL_184;
        }
        goto LABEL_145;
      }
      unint64_t v63 = 2;
      float v225 = (char *)(v61 + 1);
      do
      {
        uint64_t v65 = (int)v59[v63];
        uint64_t v66 = *(void *)(a1 + 496);
        uint64_t v67 = *(void *)(v66 + 104);
        if (*v59 != -1)
        {
          if (v67)
          {
            int v68 = *(_DWORD *)(v67 + 8 * v65 + 4);
            uint64_t v70 = v241;
            unint64_t v69 = v242;
            if (v241 >= (int *)v242) {
              goto LABEL_74;
            }
LABEL_49:
            *uint64_t v70 = v68;
            uint64_t v64 = (uint64_t)(v70 + 1);
LABEL_50:
            uint64_t v241 = (int *)v64;
            goto LABEL_51;
          }
          uint64_t v81 = *(void *)(v66 + 88);
          uint64_t v79 = v66 + 88;
          uint64_t v80 = v81;
          if (!v81) {
            goto LABEL_73;
          }
          uint64_t v82 = v79;
          do
          {
            int v83 = *(_DWORD *)(v80 + 28);
            BOOL v84 = v83 < (int)v65;
            if (v83 >= (int)v65) {
              unint64_t v85 = (uint64_t *)v80;
            }
            else {
              unint64_t v85 = (uint64_t *)(v80 + 8);
            }
            if (!v84) {
              uint64_t v82 = v80;
            }
            uint64_t v80 = *v85;
          }
          while (*v85);
          if (v82 == v79 || *(_DWORD *)(v82 + 28) > (int)v65)
          {
LABEL_73:
            int v68 = -1;
            uint64_t v70 = v241;
            unint64_t v69 = v242;
            if (v241 >= (int *)v242) {
              goto LABEL_74;
            }
            goto LABEL_49;
          }
          int v68 = *(_DWORD *)(v82 + 32);
          uint64_t v70 = v241;
          unint64_t v69 = v242;
          if (v241 < (int *)v242) {
            goto LABEL_49;
          }
LABEL_74:
          unint64_t v86 = v240;
          uint64_t v87 = v70 - v240;
          unint64_t v88 = v87 + 1;
          if ((unint64_t)(v87 + 1) >> 62) {
            sub_19E13D694();
          }
          uint64_t v89 = v69 - (char *)v240;
          if (v89 >> 1 > v88) {
            unint64_t v88 = v89 >> 1;
          }
          if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v90 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v90 = v88;
          }
          if (v90)
          {
            if (v90 >> 62) {
              sub_19E13C418();
            }
            unint64_t v91 = v90;
            float32x4_t v92 = operator new(4 * v90);
            unint64_t v90 = v91;
            float32x4_t v93 = (int *)&v92[4 * v87];
            int *v93 = v68;
            uint64_t v64 = (uint64_t)(v93 + 1);
            if (v70 != v86)
            {
LABEL_83:
              unint64_t v94 = (char *)(v70 - 1) - (char *)v86;
              if (v94 < 0x2C)
              {
                float32x4_t v62 = v225;
                goto LABEL_93;
              }
              float32x4_t v62 = v225;
              if ((unint64_t)((char *)v86 - v92) < 0x20) {
                goto LABEL_261;
              }
              uint64_t v95 = (v94 >> 2) + 1;
              uint64_t v96 = 4 * (v95 & 0x7FFFFFFFFFFFFFF8);
              unint64_t v97 = &v70[v96 / 0xFFFFFFFFFFFFFFFCLL];
              float32x4_t v93 = (int *)((char *)v93 - v96);
              uint64_t v98 = &v92[4 * v87 - 16];
              uint64_t v99 = v70 - 4;
              uint64_t v100 = v95 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v101 = *(_OWORD *)v99;
                *(v98 - 1) = *((_OWORD *)v99 - 1);
                *uint64_t v98 = v101;
                v98 -= 2;
                v99 -= 8;
                v100 -= 8;
              }
              while (v100);
              uint64_t v70 = v97;
              if (v95 != (v95 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_261:
                do
                {
LABEL_93:
                  int v102 = *--v70;
                  *--float32x4_t v93 = v102;
                }
                while (v70 != v86);
              }
LABEL_94:
              uint64_t v240 = v93;
              uint64_t v241 = (int *)v64;
              uint64_t v242 = &v92[4 * v90];
              if (v86) {
                operator delete(v86);
              }
              goto LABEL_50;
            }
          }
          else
          {
            float32x4_t v92 = 0;
            float32x4_t v93 = (int *)(4 * v87);
            *(_DWORD *)(4 * v87) = v68;
            uint64_t v64 = 4 * v87 + 4;
            if (v70 != v86) {
              goto LABEL_83;
            }
          }
          float32x4_t v62 = v225;
          goto LABEL_94;
        }
        if (v67)
        {
          if ((int)v65 >= *(_DWORD *)(v66 + 112)) {
            goto LABEL_86;
          }
        }
        else if ((int)v65 >= *(_DWORD *)(v66 + 96))
        {
LABEL_86:
          fprintf((FILE *)*MEMORY[0x1E4F143D8], "WARNING: Invalid (too large) Montreal id (%d) - IGNORE\n", v59[v63]);
          goto LABEL_51;
        }
        uint64_t v71 = *(void *)(v66 + 64);
        if (v71)
        {
          int v72 = *(_DWORD *)(v71 + 8 * v65 + 4);
          if (v67) {
            goto LABEL_60;
          }
        }
        else
        {
          uint64_t v103 = *(void *)(v66 + 48);
          if (!v103) {
            goto LABEL_106;
          }
          uint64_t v104 = v66 + 48;
          do
          {
            int v105 = *(_DWORD *)(v103 + 28);
            BOOL v106 = v105 < (int)v65;
            if (v105 >= (int)v65) {
              uint64_t v107 = (uint64_t *)v103;
            }
            else {
              uint64_t v107 = (uint64_t *)(v103 + 8);
            }
            if (!v106) {
              uint64_t v104 = v103;
            }
            uint64_t v103 = *v107;
          }
          while (*v107);
          if (v104 != v66 + 48 && *(_DWORD *)(v104 + 28) <= (int)v65)
          {
            int v72 = *(_DWORD *)(v104 + 32);
            if (v67)
            {
LABEL_60:
              float32x4_t v73 = (int *)(v67 + 8 * v65 + 4);
              goto LABEL_61;
            }
          }
          else
          {
LABEL_106:
            int v72 = -1;
            if (v67) {
              goto LABEL_60;
            }
          }
        }
        uint64_t v110 = *(void *)(v66 + 88);
        uint64_t v108 = v66 + 88;
        uint64_t v109 = v110;
        if (v110)
        {
          uint64_t v111 = v108;
          do
          {
            int v112 = *(_DWORD *)(v109 + 28);
            BOOL v113 = v112 < (int)v65;
            if (v112 >= (int)v65) {
              uint64_t v114 = (uint64_t *)v109;
            }
            else {
              uint64_t v114 = (uint64_t *)(v109 + 8);
            }
            if (!v113) {
              uint64_t v111 = v109;
            }
            uint64_t v109 = *v114;
          }
          while (*v114);
          if (v111 != v108 && *(_DWORD *)(v111 + 28) <= (int)v65)
          {
            float32x4_t v73 = (int *)(v111 + 32);
LABEL_61:
            int v74 = *v73;
            uint64_t v75 = *(void *)(a1 + 536) + 24 * v72;
            int v77 = *(char **)(v75 + 8);
            unint64_t v76 = *(void *)(v75 + 16);
            if ((unint64_t)v77 >= v76) {
              goto LABEL_118;
            }
            goto LABEL_62;
          }
        }
        int v74 = -1;
        uint64_t v75 = *(void *)(a1 + 536) + 24 * v72;
        int v77 = *(char **)(v75 + 8);
        unint64_t v76 = *(void *)(v75 + 16);
        if ((unint64_t)v77 >= v76)
        {
LABEL_118:
          uint64_t v115 = *(char **)v75;
          uint64_t v116 = (uint64_t)&v77[-*(void *)v75];
          uint64_t v117 = v116 >> 2;
          unint64_t v118 = (v116 >> 2) + 1;
          if (v118 >> 62) {
            sub_19E13D694();
          }
          uint64_t v119 = v76 - (void)v115;
          if (v119 >> 1 > v118) {
            unint64_t v118 = v119 >> 1;
          }
          if ((unint64_t)v119 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v120 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v120 = v118;
          }
          if (v120)
          {
            float32x4_t v223 = &v77[-*(void *)v75];
            if (v120 >> 62) {
              sub_19E13C418();
            }
            unint64_t v121 = v120;
            float32x4_t v122 = operator new(4 * v120);
            unint64_t v120 = v121;
            uint64_t v116 = (uint64_t)v223;
            BOOL v123 = (int *)&v122[4 * v117];
            int *v123 = v74;
            uint64_t v78 = (uint64_t)(v123 + 1);
            if (v77 == v115) {
              goto LABEL_137;
            }
LABEL_131:
            unint64_t v124 = v77 - 4 - v115;
            if (v124 < 0x2C) {
              goto LABEL_262;
            }
            if ((unint64_t)(v77 - &v122[v116]) < 0x20) {
              goto LABEL_262;
            }
            uint64_t v125 = (v124 >> 2) + 1;
            uint64_t v126 = 4 * (v125 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v127 = &v77[-v126];
            BOOL v123 = (int *)((char *)v123 - v126);
            uint64_t v128 = &v122[4 * v117 - 16];
            uint64_t v129 = v77 - 16;
            uint64_t v130 = v125 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v131 = *(_OWORD *)v129;
              *(v128 - 1) = *((_OWORD *)v129 - 1);
              *uint64_t v128 = v131;
              v128 -= 2;
              v129 -= 32;
              v130 -= 8;
            }
            while (v130);
            int v77 = v127;
            if (v125 != (v125 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_262:
              do
              {
                int v132 = *((_DWORD *)v77 - 1);
                v77 -= 4;
                *--BOOL v123 = v132;
              }
              while (v77 != v115);
            }
          }
          else
          {
            float32x4_t v122 = 0;
            BOOL v123 = (int *)(4 * v117);
            *(_DWORD *)(4 * v117) = v74;
            uint64_t v78 = 4 * v117 + 4;
            if (v77 != v115) {
              goto LABEL_131;
            }
          }
LABEL_137:
          *(void *)uint64_t v75 = v123;
          *(void *)(v75 + 8) = v78;
          *(void *)(v75 + 16) = &v122[4 * v120];
          if (v115) {
            operator delete(v115);
          }
          goto LABEL_139;
        }
LABEL_62:
        *(_DWORD *)int v77 = v74;
        uint64_t v78 = (uint64_t)(v77 + 4);
LABEL_139:
        *(void *)(v75 + 8) = v78;
        float32x4_t v62 = v225;
LABEL_51:
        ++v63;
        uint64_t v59 = *(_DWORD **)a7;
      }
      while (v63 < (uint64_t)(*(void *)(a7 + 8) - *(void *)a7) >> 2);
      uint64_t v134 = v230;
      if (*v230 == -1) {
        goto LABEL_184;
      }
LABEL_145:
      uint64_t v135 = 0;
      uint64_t v224 = v17;
      while (1)
      {
LABEL_147:
        uint64_t v136 = v134[v135];
        if ((v136 & 0x80000000) != 0
          || (int v137 = v136 + 1,
              (uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 3 <= (unint64_t)(v136 + 1)))
        {
          sub_19E2F6320(45);
        }
        uint64_t v138 = v235;
        if (v235 >= (int *)v236) {
          break;
        }
        *float32x4_t v235 = v137;
        float32x4_t v235 = v138 + 1;
        if (++v135 >= (unint64_t)((v62 - (char *)v134) >> 2)) {
          goto LABEL_171;
        }
      }
      uint64_t v139 = a7;
      uint64_t v140 = v62;
      uint64_t v231 = v134;
      float32x4_t v141 = (int *)__p;
      int64_t v142 = (char *)v235 - (unsigned char *)__p;
      uint64_t v143 = ((char *)v235 - (unsigned char *)__p) >> 2;
      unint64_t v144 = v143 + 1;
      if ((unint64_t)(v143 + 1) >> 62) {
        sub_19E13D694();
      }
      uint64_t v145 = v236 - (unsigned char *)__p;
      if ((v236 - (unsigned char *)__p) >> 1 > v144) {
        unint64_t v144 = v145 >> 1;
      }
      if ((unint64_t)v145 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v146 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v146 = v144;
      }
      if (!v146)
      {
        uint64_t v148 = 0;
        long long v149 = (char *)(4 * v143);
        *(_DWORD *)(4 * v143) = v137;
        uint64_t v150 = 4 * v143 + 4;
        if (v138 != v141) {
          goto LABEL_159;
        }
LABEL_162:
        float32x4_t v62 = v140;
        a7 = v139;
        uint64_t v17 = v224;
        goto LABEL_168;
      }
      if (v146 >> 62) {
        sub_19E13C418();
      }
      unint64_t v147 = v146;
      uint64_t v148 = (char *)operator new(4 * v146);
      unint64_t v146 = v147;
      long long v149 = &v148[4 * v143];
      *(_DWORD *)long long v149 = v137;
      uint64_t v150 = (uint64_t)(v149 + 4);
      if (v138 == v141) {
        goto LABEL_162;
      }
LABEL_159:
      unint64_t v151 = (char *)(v138 - 1) - (char *)v141;
      if (v151 < 0x2C)
      {
        float32x4_t v62 = v140;
        a7 = v139;
        uint64_t v17 = v224;
        goto LABEL_167;
      }
      unint64_t v152 = (char *)v138 - &v148[v142];
      float32x4_t v62 = v140;
      a7 = v139;
      uint64_t v17 = v224;
      if (v152 < 0x20) {
        goto LABEL_263;
      }
      uint64_t v153 = (v151 >> 2) + 1;
      uint64_t v154 = 4 * (v153 & 0x7FFFFFFFFFFFFFF8);
      float32x4_t v155 = &v138[v154 / 0xFFFFFFFFFFFFFFFCLL];
      v149 -= v154;
      float32x4_t v156 = &v148[4 * v143 - 16];
      float32x4_t v157 = (long long *)(v138 - 4);
      uint64_t v158 = v153 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v159 = *v157;
        *((_OWORD *)v156 - 1) = *(v157 - 1);
        *(_OWORD *)float32x4_t v156 = v159;
        v156 -= 32;
        v157 -= 2;
        v158 -= 8;
      }
      while (v158);
      uint64_t v138 = v155;
      if (v153 != (v153 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_263:
        do
        {
LABEL_167:
          int v160 = *--v138;
          *((_DWORD *)v149 - 1) = v160;
          v149 -= 4;
        }
        while (v138 != v141);
      }
LABEL_168:
      __p = v149;
      float32x4_t v235 = (int *)v150;
      int v236 = &v148[4 * v146];
      if (v141) {
        operator delete(v141);
      }
      uint64_t v134 = v231;
      float32x4_t v235 = (int *)v150;
      if (++v135 < (unint64_t)((v62 - (char *)v231) >> 2)) {
        goto LABEL_147;
      }
LABEL_171:
      if (v134) {
        goto LABEL_211;
      }
LABEL_212:
      p_p = &__p;
LABEL_213:
      bzero(*(void **)(*(void *)(a1 + 104) + 8 * v17), 4 * *(int *)(a1 + 348));
      float32x4_t v197 = (int *)*p_p;
      a2 = v227;
      a3 = v228;
      if (p_p[1] != *p_p)
      {
        unint64_t v198 = 0;
        while (1)
        {
          uint64_t v199 = v197[v198];
          uint64_t v200 = *(void *)(a1 + 304);
          if (!*(_DWORD *)(v200 + 4 * v199))
          {
            *(_DWORD *)(v200 + 4 * v199) = 1;
            uint64_t v201 = *(void *)(*(void *)(a1 + 80) + 8 * v199);
            (*(void (**)(uint64_t, uint64_t))(*(void *)v201 + 256))(v201, v229);
          }
          int v202 = *(void *)(a7 + 8) != *(void *)a7 && **(_DWORD **)a7 == -1
               ? (void **)(*(void *)(a1 + 536) + 24 * (int)v199 - 24)
               : (void **)&v240;
          uint64_t v203 = *(void *)(*(void *)(a1 + 80) + 8 * v199);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void **))(*(void *)v203 + 224))(v203, v227, v228, v17, v202);
          uint64_t v204 = *(void *)(*(void *)(a1 + 80) + 8 * v199);
          uint64_t v205 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v204 + 32))(v204);
          uint64_t v206 = *(void *)(a1 + 256);
          if ((*(_DWORD *)(a1 + 328) - 3) >= 2) {
            break;
          }
          unint64_t v207 = *(unsigned int *)(v206 + 4 * v199);
          if ((int)v207 >= 1)
          {
            float v208 = *(float *)(*(void *)(*v233 + 8 * v17) + 4 * v199 - 4);
            unint64_t v209 = *(float32x4_t **)(*v205 + 8 * v17);
            if (v207 < 8)
            {
              unint64_t v210 = 0;
              goto LABEL_230;
            }
            unint64_t v210 = v207 & 0x7FFFFFF8;
            BOOL v211 = v209 + 1;
            uint64_t v212 = v207 & 0xFFFFFFF8;
            do
            {
              float32x4_t v213 = vmulq_n_f32(*v211, v208);
              v211[-1] = vmulq_n_f32(v211[-1], v208);
              *BOOL v211 = v213;
              v211 += 2;
              v212 -= 8;
            }
            while (v212);
            if (v210 != v207)
            {
LABEL_230:
              unint64_t v214 = v207 - v210;
              uint64_t v215 = &v209->f32[v210];
              do
              {
                *uint64_t v215 = *v215 * v208;
                ++v215;
                --v214;
              }
              while (v214);
            }
LABEL_232:
            if ((int)v207 >= 1)
            {
              unint64_t v216 = *(int **)(*(void *)(*(void *)(a1 + 496) + 120) + 24 * (int)v199 - 24);
              unint64_t v217 = *(_DWORD **)(*v205 + 8 * v17);
              uint64_t v218 = *(void *)(*(void *)(a1 + 104) + 8 * v17);
              do
              {
                uint64_t v220 = *v216++;
                uint64_t v219 = v220;
                LODWORD(v220) = *v217++;
                *(_DWORD *)(v218 + 4 * v219) = v220;
                --v207;
              }
              while (v207);
            }
          }
          ++v198;
          float32x4_t v197 = (int *)*p_p;
          if (v198 >= ((unsigned char *)p_p[1] - (unsigned char *)*p_p) >> 2) {
            goto LABEL_236;
          }
        }
        unint64_t v207 = *(unsigned int *)(v206 + 4 * v199);
        goto LABEL_232;
      }
LABEL_236:
      uint64_t v221 = *(void *)(a1 + 104);
      vDSP_Length v222 = *(int *)(a1 + 348);
      __C[0] = 0.0;
      vDSP_sve(*(const float **)(v221 + 8 * v17), 1, __C, v222);
      if (__p)
      {
        float32x4_t v235 = (int *)__p;
        operator delete(__p);
      }
      if (v237)
      {
        uint64_t v238 = v237;
        operator delete(v237);
      }
      ++v17;
    }
    while (v17 != v229);
  }
  if (v240)
  {
    uint64_t v241 = v240;
    operator delete(v240);
  }
}

void sub_19E22E87C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  unint64_t v26 = *(void **)(v24 - 120);
  if (!v26) {
    _Unwind_Resume(exception_object);
  }
  *(void *)(v24 - 112) = v26;
  operator delete(v26);
  _Unwind_Resume(exception_object);
}

void *sub_19E22E974(uint64_t a1, void *lpsrc, uint64_t a3, float a4, float a5)
{
  uint64_t result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3CE8, 0);
  if (!result) {
    __cxa_bad_cast();
  }
  int v10 = *(_DWORD *)(a1 + 340);
  if ((v10 & 0x80000000) == 0)
  {
    uint64_t v11 = (uint64_t)result;
    uint64_t v12 = 0;
    do
    {
      if (*(int *)(*(void *)(v11 + 304) + 4 * v12) >= 1)
      {
        uint64_t v14 = *(void *)(*(void *)(a1 + 80) + 8 * v12);
        uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void, uint64_t, float, float))(*(void *)v14 + 336))(v14, *(void *)(*(void *)(v11 + 80) + 8 * v12), a3, a4, a5);
        int v10 = *(_DWORD *)(a1 + 340);
      }
    }
    while (v12++ < v10);
  }
  return result;
}

uint64_t sub_19E22EA84(uint64_t result, uint64_t a2, uint64_t a3, int a4, _DWORD *a5, uint64_t a6)
{
  if (a4 >= 1)
  {
    uint64_t v19 = v6;
    uint64_t v20 = v7;
    uint64_t v10 = result;
    uint64_t v11 = 0;
    uint64_t v12 = a4;
    do
    {
      int v18 = 0;
      uint64_t v13 = *(int *)(v10 + 332);
      uint64_t v14 = *(void *)(*(void *)(v10 + 80) + 8 * v13);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, int *, uint64_t))(*(void *)v14 + 240))(v14, *(void *)(v10 + 200) + 24 * v13, *(void *)(v10 + 472) + 24 * v13, v11, &v18, a6);
      int v17 = 0;
      uint64_t v15 = *(int *)(*(void *)(v10 + 400) + 4 * v11);
      uint64_t v16 = *(void *)(*(void *)(v10 + 80) + 8 * v15);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, int *, uint64_t))(*(void *)v16 + 240))(v16, *(void *)(v10 + 200) + 24 * (int)v15, *(void *)(v10 + 472) + 24 * *(int *)(v10 + 336), v11, &v17, a6);
      if (v18 == 1 || v17 == 1) {
        ++*a5;
      }
      ++v11;
    }
    while (v12 != v11);
  }
  return result;
}

float sub_19E22EBC4(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v13 = 0;
  if (a3 < 1) {
    return 0.0;
  }
  uint64_t v4 = 0;
  uint64_t v5 = a3;
  float v6 = 0.0;
  do
  {
    uint64_t v7 = *(int *)(a1 + 332);
    uint64_t v8 = *(void *)(*(void *)(a1 + 80) + 8 * v7);
    (*(void (**)(uint64_t, uint64_t, char *, uint64_t))(*(void *)v8 + 232))(v8, *(void *)(a1 + 200) + 24 * (int)v7, (char *)&v13 + 4, v4);
    uint64_t v9 = *(int *)(*(void *)(a1 + 400) + 4 * v4);
    uint64_t v10 = *(void *)(*(void *)(a1 + 80) + 8 * v9);
    (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(*(void *)v10 + 232))(v10, *(void *)(a1 + 200) + 24 * (int)v9, &v13, v4);
    float v11 = *((float *)&v13 + 1);
    if ((*(_DWORD *)(a1 + 328) - 3) < 2) {
      float v11 = -0.0;
    }
    float v6 = (float)(*(float *)&v13 + v6) + v11;
    ++v4;
  }
  while (v5 != v4);
  return v6;
}

void sub_19E22ECD8(void *a1)
{
  uint64_t v1 = sub_19E22ED00(a1);

  operator delete(v1);
}

void *sub_19E22ED00(void *a1)
{
  *a1 = &unk_1EF0A59E8;
  uint64_t v3 = a1[35];
  uint64_t v2 = a1[36];
  if (v2 == v3)
  {
    uint64_t v3 = a1[36];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void ***)(v3 + 8 * v4);
      if (*v5)
      {
        operator delete[](*v5);
        void *v5 = 0;
        uint64_t v3 = a1[35];
        uint64_t v2 = a1[36];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  a1[36] = v3;
  uint64_t v6 = a1[67];
  if (v6)
  {
    uint64_t v7 = a1[68];
    uint64_t v8 = (void *)a1[67];
    if (v7 != v6)
    {
      uint64_t v9 = a1[68];
      do
      {
        float v11 = *(void **)(v9 - 24);
        v9 -= 24;
        uint64_t v10 = v11;
        if (v11)
        {
          *(void *)(v7 - 16) = v10;
          operator delete(v10);
        }
        uint64_t v7 = v9;
      }
      while (v9 != v6);
      uint64_t v8 = (void *)a1[67];
    }
    a1[68] = v6;
    operator delete(v8);
  }
  uint64_t v12 = (void *)a1[63];
  if (v12)
  {
    a1[64] = v12;
    operator delete(v12);
  }
  uint64_t v13 = a1[59];
  if (v13)
  {
    uint64_t v14 = a1[60];
    uint64_t v15 = (void *)a1[59];
    if (v14 != v13)
    {
      uint64_t v16 = a1[60];
      do
      {
        int v18 = *(void **)(v16 - 24);
        v16 -= 24;
        int v17 = v18;
        if (v18)
        {
          *(void *)(v14 - 16) = v17;
          operator delete(v17);
        }
        uint64_t v14 = v16;
      }
      while (v16 != v13);
      uint64_t v15 = (void *)a1[59];
    }
    a1[60] = v13;
    operator delete(v15);
  }
  uint64_t v19 = (void *)a1[56];
  if (v19)
  {
    a1[57] = v19;
    operator delete(v19);
  }
  uint64_t v20 = (void *)a1[53];
  if (v20)
  {
    a1[54] = v20;
    operator delete(v20);
  }
  uint64_t v21 = (void *)a1[50];
  if (v21)
  {
    a1[51] = v21;
    operator delete(v21);
  }
  uint64_t v22 = (void *)a1[47];
  if (v22)
  {
    a1[48] = v22;
    operator delete(v22);
  }
  uint64_t v23 = (void *)a1[44];
  if (v23)
  {
    a1[45] = v23;
    operator delete(v23);
  }
  uint64_t v24 = (void *)a1[38];
  if (v24)
  {
    a1[39] = v24;
    operator delete(v24);
  }
  int v25 = (void *)a1[35];
  if (v25)
  {
    a1[36] = v25;
    operator delete(v25);
  }

  return sub_19E1CDA54(a1);
}

uint64_t sub_19E22EEB8(float *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float *a7, uint64_t a8, char a9)
{
  int v20 = 0;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E94585A0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1E94585A0))
  {
    qword_1E9458588 = 0;
    unk_1E9458590 = 0;
    qword_1E9458598 = 0;
    __cxa_atexit((void (*)(void *))sub_19E142EEC, &qword_1E9458588, &dword_19E138000);
    __cxa_guard_release(&qword_1E94585A0);
  }
  (*(void (**)(float *, uint64_t, uint64_t, uint64_t, void, int *, uint64_t *))(*(void *)a1 + 304))(a1, a2, a3, a5, 0, &v20, &qword_1E9458588);
  uint64_t v17 = (*(uint64_t (**)(float *))(*(void *)a1 + 40))(a1);
  (*(void (**)(float *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 344))(a1, a4, v17, a5, a6, a8);
  *a7 = (*(float (**)(float *, uint64_t, uint64_t))(*(void *)a1 + 352))(a1, a4, a5);
  uint64_t v18 = (*(uint64_t (**)(float *))(*(void *)a1 + 40))(a1);
  uint64_t result = (*(uint64_t (**)(float *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 296))(a1, a2, a3, v18, a5);
  if ((a9 & 1) == 0) {
    return (*(uint64_t (**)(float *, float, float))(*(void *)a1 + 288))(a1, a1[8], a1[9]);
  }
  return result;
}

void sub_19E22F138()
{
}

void sub_19E22F7E0(void *a1, FILE *__stream)
{
  *((_DWORD *)a1 + 2) = -1;
  uint64_t v3 = (int *)(a1 + 1);
  sub_19E2F6698(__stream, (int)"", a1 + 1);
  sub_19E230620(a1, *v3);
  operator new[]();
}

void sub_19E22FCE8(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = -1;
  uint64_t v3 = (int *)(*(void *)a2 + *(int *)(a2 + 72));
  if ((unint64_t)v3 <= *(void *)a2 + *(void *)(a2 + 8) - 4)
  {
    int v4 = *v3;
    *(_DWORD *)(a1 + 8) = *v3;
    *(_DWORD *)(a2 + 72) += 4;
  }
  else
  {
    int v4 = 0;
    *(_DWORD *)(a1 + 8) = 0;
  }
  sub_19E230620((void *)a1, v4);
  operator new[]();
}

void sub_19E230620(void *a1, int a2)
{
  if (!a2) {
    sub_19E2F6320(42);
  }
  uint64_t v4 = a1[2];
  uint64_t v5 = (void **)(a1 + 2);
  unint64_t v6 = a2;
  unint64_t v7 = (a1[3] - v4) >> 2;
  BOOL v8 = a2 >= v7;
  unint64_t v9 = a2 - v7;
  if (v9 != 0 && v8)
  {
    sub_19E1C5E88((uint64_t)(a1 + 2), v9);
  }
  else if (!v8)
  {
    a1[3] = v4 + 4 * v6;
  }
  uint64_t v11 = a1[15];
  uint64_t v10 = a1[16];
  unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v11) >> 3);
  if (v6 <= v12)
  {
    if (v6 < v12)
    {
      uint64_t v13 = v11 + 24 * (int)v6;
      if (v10 != v13)
      {
        uint64_t v14 = a1[16];
        do
        {
          uint64_t v16 = *(void **)(v14 - 24);
          v14 -= 24;
          uint64_t v15 = v16;
          if (v16)
          {
            *(void *)(v10 - 16) = v15;
            operator delete(v15);
          }
          uint64_t v10 = v14;
        }
        while (v14 != v13);
      }
      a1[16] = v13;
    }
  }
  else
  {
    sub_19E232360((uint64_t)(a1 + 15), v6 - v12);
  }
  if (a2 >= 1)
  {
    uint64_t v17 = *v5;
    bzero(v17, 4 * a2);
  }
}

void sub_19E230734(uint64_t a1, unint64_t a2, const float *a3)
{
  unint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  BOOL v8 = (_DWORD *)v7;
  if (a2 <= (uint64_t)(v6 - v7) >> 2)
  {
    if (a2)
    {
      unint64_t v16 = (a2 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      if (v16 < 0xF || v7 < (unint64_t)(a3 + 1) && v7 + 4 * a2 > (unint64_t)a3) {
        goto LABEL_45;
      }
      unint64_t v17 = v16 + 1;
      BOOL v8 = (_DWORD *)(v7 + 4 * (v17 & 0x7FFFFFFFFFFFFFF8));
      float32x4_t v18 = vld1q_dup_f32(a3);
      uint64_t v19 = (float32x4_t *)(v7 + 16);
      uint64_t v20 = v17 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v19[-1] = v18;
        *uint64_t v19 = v18;
        v19 += 2;
        v20 -= 8;
      }
      while (v20);
      if (v17 != (v17 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_45:
        do
          *v8++ = *(_DWORD *)a3;
        while (v8 != (_DWORD *)(v7 + 4 * a2));
      }
      BOOL v8 = (_DWORD *)(v7 + 4 * a2);
    }
    *(void *)(a1 + 8) = v8;
  }
  else
  {
    unint64_t v9 = *(_DWORD **)a1;
    uint64_t v10 = v7 - *(void *)a1;
    uint64_t v11 = v10 >> 2;
    unint64_t v12 = (v10 >> 2) + a2;
    if (v12 >> 62) {
      sub_19E13D694();
    }
    uint64_t v13 = v6 - (void)v9;
    if (v13 >> 1 > v12) {
      unint64_t v12 = v13 >> 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 >> 62) {
        sub_19E13C418();
      }
      uint64_t v15 = (char *)operator new(4 * v14);
    }
    else
    {
      uint64_t v15 = 0;
    }
    unint64_t v21 = (unint64_t)&v15[4 * v11];
    uint64_t v22 = (char *)(v21 + 4 * a2);
    unint64_t v23 = (a2 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    uint64_t v24 = (char *)v21;
    if (v23 < 0x13) {
      goto LABEL_46;
    }
    if (v21 < (unint64_t)(a3 + 1))
    {
      uint64_t v24 = &v15[4 * v11];
      if (&v15[4 * a2 + v10] > (char *)a3) {
        goto LABEL_46;
      }
    }
    unint64_t v25 = v23 + 1;
    uint64_t v24 = (char *)(v21 + 4 * (v25 & 0x7FFFFFFFFFFFFFF8));
    float32x4_t v26 = vld1q_dup_f32(a3);
    uint64_t v27 = (float32x4_t *)&v15[4 * v11 + 16];
    uint64_t v28 = v25 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v27[-1] = v26;
      float32x4_t *v27 = v26;
      v27 += 2;
      v28 -= 8;
    }
    while (v28);
    if (v25 != (v25 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_46:
      do
      {
        *(float *)uint64_t v24 = *a3;
        v24 += 4;
      }
      while (v24 != v22);
    }
    if ((_DWORD *)v7 != v9)
    {
      unint64_t v29 = v7 - (void)v9 - 4;
      if (v29 < 0x2C) {
        goto LABEL_47;
      }
      if (v7 - (unint64_t)&v15[v10] < 0x20) {
        goto LABEL_47;
      }
      uint64_t v30 = (v29 >> 2) + 1;
      uint64_t v31 = 4 * (v30 & 0x7FFFFFFFFFFFFFF8);
      BOOL v8 = (_DWORD *)(v7 - v31);
      v21 -= v31;
      uint64_t v32 = &v15[4 * v11 - 16];
      int v33 = (long long *)(v7 - 16);
      uint64_t v34 = v30 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v35 = *v33;
        *((_OWORD *)v32 - 1) = *(v33 - 1);
        *(_OWORD *)uint64_t v32 = v35;
        v32 -= 32;
        v33 -= 2;
        v34 -= 8;
      }
      while (v34);
      if (v30 != (v30 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_47:
        do
        {
          int v36 = *--v8;
          *(_DWORD *)(v21 - 4) = v36;
          v21 -= 4;
        }
        while (v8 != v9);
      }
    }
    *(void *)a1 = v21;
    *(void *)(a1 + 8) = v22;
    *(void *)(a1 + 16) = &v15[4 * v14];
    if (v9)
    {
      operator delete(v9);
    }
  }
}

uint64_t sub_19E2309A8(uint64_t a1)
{
  *(void *)a1 = &unk_1EF0A5280;
  *(void *)(a1 + 24) = *(void *)(a1 + 16);
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 120);
  if ((int)v2 >= 1)
  {
    if (v2 == 1)
    {
      uint64_t v4 = 0;
LABEL_7:
      BOOL v8 = (void *)(v3 + 24 * v4 + 8);
      uint64_t v9 = v2 - v4;
      do
      {
        void *v8 = *(v8 - 1);
        v8 += 3;
        --v9;
      }
      while (v9);
      goto LABEL_9;
    }
    uint64_t v4 = v2 & 0xFFFFFFFE;
    uint64_t v5 = (void *)(v3 + 32);
    uint64_t v6 = v4;
    do
    {
      uint64_t v7 = *(v5 - 1);
      *(v5 - 3) = *(v5 - 4);
      void *v5 = v7;
      v5 += 6;
      v6 -= 2;
    }
    while (v6);
    if (v4 != v2) {
      goto LABEL_7;
    }
  }
LABEL_9:
  uint64_t v10 = *(void *)(a1 + 128);
  if (v10 != v3)
  {
    uint64_t v11 = *(void *)(a1 + 128);
    do
    {
      uint64_t v13 = *(void **)(v11 - 24);
      v11 -= 24;
      unint64_t v12 = v13;
      if (v13)
      {
        *(void *)(v10 - 16) = v12;
        operator delete(v12);
      }
      uint64_t v10 = v11;
    }
    while (v11 != v3);
  }
  *(void *)(a1 + 128) = v3;
  if (*(void *)(a1 + 64))
  {
    *(void *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 72) = 0;
    if (*(void *)(a1 + 104)) {
      goto LABEL_16;
    }
  }
  else
  {
    sub_19E13C56C(a1 + 40, *(void **)(a1 + 48));
    *(void *)(a1 + 40) = a1 + 48;
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 72) = 0;
    if (*(void *)(a1 + 104))
    {
LABEL_16:
      *(void *)(a1 + 104) = 0;
      *(_DWORD *)(a1 + 112) = 0;
      unint64_t v14 = *(char **)(a1 + 120);
      if (!v14) {
        goto LABEL_27;
      }
      goto LABEL_20;
    }
  }
  sub_19E13C56C(a1 + 80, *(void **)(a1 + 88));
  *(void *)(a1 + 80) = a1 + 88;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  unint64_t v14 = *(char **)(a1 + 120);
  if (!v14) {
    goto LABEL_27;
  }
LABEL_20:
  uint64_t v15 = *(char **)(a1 + 128);
  unint64_t v16 = v14;
  if (v15 != v14)
  {
    unint64_t v17 = *(char **)(a1 + 128);
    do
    {
      uint64_t v19 = (void *)*((void *)v17 - 3);
      v17 -= 24;
      float32x4_t v18 = v19;
      if (v19)
      {
        *((void *)v15 - 2) = v18;
        operator delete(v18);
      }
      uint64_t v15 = v17;
    }
    while (v17 != v14);
    unint64_t v16 = *(char **)(a1 + 120);
  }
  *(void *)(a1 + 128) = v14;
  operator delete(v16);
LABEL_27:
  sub_19E13C56C(a1 + 80, *(void **)(a1 + 88));
  sub_19E13C56C(a1 + 40, *(void **)(a1 + 48));
  uint64_t v20 = *(void **)(a1 + 16);
  if (v20)
  {
    *(void *)(a1 + 24) = v20;
    operator delete(v20);
  }
  return a1;
}

void sub_19E230B84(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_19E230B84(a1, *(void *)a2);
    sub_19E230B84(a1, *((void *)a2 + 1));
    if (a2[63] < 0)
    {
      operator delete(*((void **)a2 + 5));
      uint64_t v4 = a2;
    }
    else
    {
      uint64_t v4 = a2;
    }
    operator delete(v4);
  }
}

uint64_t sub_19E230C08(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t sub_19E230C10(uint64_t a1, int a2, float **a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if ((int)v3 >= 1)
  {
    unsigned int v4 = 1 << (v3 - 1);
    uint64_t v5 = *a3;
    do
    {
      if ((v4 & a2) != 0) {
        float v6 = 1.0;
      }
      else {
        float v6 = 0.0;
      }
      *v5++ = v6;
      v4 >>= 1;
      --v3;
    }
    while (v3);
  }
  return 0;
}

uint64_t sub_19E230C54(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t sub_19E230C5C()
{
  return 0;
}

uint64_t sub_19E230C6C(uint64_t result, uint64_t a2)
{
  if (result != a2) {
    *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  }
  return result;
}

uint64_t sub_19E230C80(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

uint64_t sub_19E230C88(uint64_t a1, int a2, void **a3)
{
  bzero(*a3, 4 * *(int *)(a1 + 28));
  int v6 = *(_DWORD *)(a1 + 12);
  uint64_t v7 = *a3;
  *((_DWORD *)*a3 + a2 % v6) = 1065353216;
  v7[a2 / v6 + v6] = 1065353216;
  return 0;
}

uint64_t sub_19E230CEC()
{
  return 2;
}

uint64_t sub_19E230CF4()
{
  return 2;
}

__n128 sub_19E230D04(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    __n128 result = *(__n128 *)(a2 + 24);
    *(__n128 *)(a1 + 24) = result;
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  }
  return result;
}

uint64_t sub_19E230D28(uint64_t a1, unsigned int a2, float **a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if ((int)v3 >= 1)
  {
    unsigned int v4 = 1 << (v3 - 1);
    uint64_t v5 = *a3;
    do
    {
      if ((v4 & (a2 ^ (a2 >> 1))) != 0) {
        float v6 = 1.0;
      }
      else {
        float v6 = 0.0;
      }
      *v5++ = v6;
      v4 >>= 1;
      --v3;
    }
    while (v3);
  }
  return 0;
}

uint64_t sub_19E230D70()
{
  return 3;
}

uint64_t sub_19E230D80(uint64_t result, uint64_t a2)
{
  if (result != a2) {
    *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  }
  return result;
}

uint64_t sub_19E230D94(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)a1 = &unk_1EF0A61A0;
  *(void *)(a1 + 16) = 0;
  uint64_t v5 = (void **)(a1 + 16);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 8) = a3;
  int v14 = -1;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_19E13C2D0(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    uint64_t v13 = *(void *)(a2 + 16);
  }
  sub_19E230FCC(a1, (uint64_t)__p, &v14, 1, 0);
  if (SHIBYTE(v13) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v6 = v14;
  if (v14 <= 0) {
    sub_19E2F6320(4);
  }
  ++v14;
  uint64_t v7 = *(void *)(a1 + 16);
  unint64_t v8 = (*(void *)(a1 + 24) - v7) >> 3;
  if (v6 + 1 <= v8)
  {
    if (v6 + 1 < v8) {
      *(void *)(a1 + 24) = v7 + 8 * v6 + 8;
    }
LABEL_13:
    operator new[]();
  }
  sub_19E1599BC(v5, v6 + 1 - v8);
  if (v14 >= 1) {
    goto LABEL_13;
  }
  *(_DWORD *)(a1 + 12) = -1;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_19E13C2D0(v10, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v10 = *(_OWORD *)a2;
    uint64_t v11 = *(void *)(a2 + 16);
  }
  sub_19E230FCC(a1, (uint64_t)v10, (int *)(a1 + 12), 0, 0);
  if (SHIBYTE(v11) < 0) {
    operator delete(v10[0]);
  }
  return a1;
}

void sub_19E230F80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  uint64_t v24 = *v22;
  if (*v22)
  {
    *(void *)(v21 + 24) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E230FCC(uint64_t a1, uint64_t a2, int *a3, int a4, int a5)
{
  v43[19] = *MEMORY[0x1E4F143B8];
  *a3 = 0x80000000;
  v39[0] = 0;
  v39[1] = 0;
  uint64_t v40 = 0;
  sub_19E148808(v41);
  if (!v42[15]) {
    sub_19E2F6320(3);
  }
  if (a5 < 1) {
    char v9 = 1;
  }
  else {
    char v9 = a4;
  }
  char v23 = v9;
  unint64_t v25 = *(std::locale::__imp **)(MEMORY[0x1E4FBA408] + 64);
  float32x4_t v26 = (std::locale::__imp *)*MEMORY[0x1E4FBA408];
  uint64_t v24 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v41 + *(void *)(v41[0] - 24)));
    uint64_t v10 = std::locale::use_facet(&v33, MEMORY[0x1E4FBA258]);
    unsigned __int8 v11 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
    std::locale::~locale(&v33);
    unint64_t v12 = sub_19E231B50(v41, (uint64_t)v39, v11);
    if ((*((unsigned char *)v12 + *(void *)(*v12 - 24) + 32) & 5) != 0) {
      break;
    }
    sub_19E23182C((uint64_t)&v33, (uint64_t)v39, 24);
    int v13 = 0;
    __src[0] = 0;
    __src[1] = 0;
    int v14 = -1;
    uint64_t v32 = 0;
    if (!a4) {
      goto LABEL_18;
    }
LABEL_12:
    while (!v13)
    {
      unint64_t v16 = sub_19E231B50(&v33, (uint64_t)__src, 0x20u);
      if ((*((unsigned char *)v16 + *(void *)(*v16 - 24) + 32) & 5) != 0) {
        goto LABEL_43;
      }
LABEL_11:
      while (1)
      {
        ++v13;
        if (a4) {
          break;
        }
LABEL_18:
        while (v13)
        {
          if (v13 != 1)
          {
            while (1)
            {
              while (1)
              {
                float32x4_t v18 = sub_19E231B50(&v33, (uint64_t)__src, 0x20u);
                if ((*((unsigned char *)v18 + *(void *)(*v18 - 24) + 32) & 5) != 0) {
                  goto LABEL_41;
                }
                if (SHIBYTE(v32) < 0) {
                  break;
                }
                if (HIBYTE(v32))
                {
                  *(_OWORD *)__dst = *(_OWORD *)__src;
                  uint64_t v28 = v32;
LABEL_38:
                  float v21 = sub_19E2F64F4((uint64_t)__dst);
                  if (SHIBYTE(v28) < 0) {
                    operator delete(__dst[0]);
                  }
                  *(float *)(*(void *)(*(void *)(a1 + 16) + 8 * v14) + 4 * v13 - 8) = v21;
                  goto LABEL_11;
                }
              }
              if (__src[1])
              {
                sub_19E13C2D0(__dst, __src[0], (unint64_t)__src[1]);
                goto LABEL_38;
              }
            }
          }
          unint64_t v17 = sub_19E231B50(&v33, (uint64_t)__src, 0x20u);
          if ((*((unsigned char *)v17 + *(void *)(*v17 - 24) + 32) & 5) != 0) {
            goto LABEL_41;
          }
LABEL_21:
          if (SHIBYTE(v32) < 0)
          {
            sub_19E13C2D0(__p, __src[0], (unint64_t)__src[1]);
          }
          else
          {
            *(_OWORD *)__p = *(_OWORD *)__src;
            uint64_t v30 = v32;
          }
          int v20 = sub_19E2F6350((uint64_t)__p);
          int v14 = v20;
          if (SHIBYTE(v30) < 0)
          {
            operator delete(__p[0]);
            if (v14 <= *a3) {
              goto LABEL_11;
            }
          }
          else if (v20 <= *a3)
          {
            goto LABEL_11;
          }
          *a3 = v14;
          int v13 = 2;
          if (a4) {
            goto LABEL_12;
          }
        }
        uint64_t v19 = sub_19E231B50(&v33, (uint64_t)__src, 0x20u);
        if ((*((unsigned char *)v19 + *(void *)(*v19 - 24) + 32) & 5) != 0) {
          goto LABEL_41;
        }
      }
    }
    if (v13 == 1)
    {
      uint64_t v15 = sub_19E231B50(&v33, (uint64_t)__src, 0x20u);
      if ((*((unsigned char *)v15 + *(void *)(*v15 - 24) + 32) & 5) != 0) {
        goto LABEL_43;
      }
      goto LABEL_21;
    }
    do
      uint64_t v22 = sub_19E231B50(&v33, (uint64_t)__src, 0x20u);
    while ((*((unsigned char *)v22 + *(void *)(*v22 - 24) + 32) & 5) == 0);
LABEL_41:
    if ((v23 & 1) == 0) {
      sub_19E1DF2C8((float **)(*(void *)(a1 + 16) + 8 * v14), "corpus entry ", *(_DWORD *)(a1 + 8));
    }
LABEL_43:
    if (SHIBYTE(v32) < 0) {
      operator delete(__src[0]);
    }
    v33.__locale_ = v26;
    *(std::locale::__imp **)((char *)&v33.__locale_ + *((void *)v26 - 3)) = v25;
    uint64_t v34 = v24;
    uint64_t v35 = MEMORY[0x1E4FBA470] + 16;
    if (v37 < 0) {
      operator delete(v36);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x19F3BBB40](&v38);
  }
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)v41 + *(void *)(v41[0] - 24)), *(_DWORD *)((char *)&v42[2] + *(void *)(v41[0] - 24)) | 4);
  }
  v41[0] = *MEMORY[0x1E4FBA3F8];
  *(uint64_t *)((char *)v41 + *(void *)(v41[0] - 24)) = *(void *)(MEMORY[0x1E4FBA3F8] + 24);
  MEMORY[0x19F3BB910](v42);
  std::istream::~istream();
  MEMORY[0x19F3BBB40](v43);
  if (SHIBYTE(v40) < 0) {
    operator delete(v39[0]);
  }
}

void sub_19E2315F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,std::locale a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *__p,uint64_t a61,int a62,__int16 a63)
{
  if (a65 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_19E2316AC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t sub_19E2316B4(uint64_t a1, int a2, void **a3)
{
  return 0;
}

uint64_t sub_19E2316E8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t sub_19E2316F0()
{
  return 4;
}

uint64_t sub_19E2316F8(uint64_t a1)
{
  *(void *)a1 = &unk_1EF0A61A0;
  int v2 = *(_DWORD *)(a1 + 12);
  if (v2 >= 1)
  {
    for (uint64_t i = 0; i < v2; ++i)
    {
      unsigned int v4 = *(void **)(*(void *)(a1 + 16) + 8 * i);
      if (v4)
      {
        operator delete[](v4);
        int v2 = *(_DWORD *)(a1 + 12);
      }
    }
  }
  uint64_t v5 = *(void **)(a1 + 16);
  if (v5)
  {
    *(void *)(a1 + 24) = v5;
    operator delete(v5);
  }
  return a1;
}

void sub_19E231780(_DWORD *__p)
{
  *(void *)__p = &unk_1EF0A61A0;
  int v2 = __p[3];
  if (v2 >= 1)
  {
    for (uint64_t i = 0; i < v2; ++i)
    {
      unsigned int v4 = *(void **)(*((void *)__p + 2) + 8 * i);
      if (v4)
      {
        operator delete[](v4);
        int v2 = __p[3];
      }
    }
  }
  uint64_t v5 = (void *)*((void *)__p + 2);
  if (v5)
  {
    *((void *)__p + 3) = v5;
    operator delete(v5);
  }

  operator delete(__p);
}

uint64_t sub_19E231818(uint64_t result, uint64_t a2)
{
  if (result != a2) {
    *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  }
  return result;
}

uint64_t sub_19E23182C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = MEMORY[0x1E4FBA488] + 104;
  *(void *)(a1 + 128) = MEMORY[0x1E4FBA488] + 104;
  uint64_t v6 = a1 + 16;
  uint64_t v7 = MEMORY[0x1E4FBA488] + 64;
  *(void *)(a1 + 16) = MEMORY[0x1E4FBA488] + 64;
  unint64_t v8 = (void *)MEMORY[0x1E4FBA408];
  uint64_t v9 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  uint64_t v10 = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(void *)a1 = v10;
  *(void *)(a1 + *(void *)(v10 - 24)) = v9;
  *(void *)(a1 + 8) = 0;
  unsigned __int8 v11 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v11, (void *)(a1 + 24));
  uint64_t v12 = MEMORY[0x1E4FBA488] + 24;
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  uint64_t v13 = v8[5];
  uint64_t v14 = v8[4];
  *(void *)(a1 + 16) = v14;
  *(void *)(v6 + *(void *)(v14 - 24)) = v13;
  uint64_t v15 = v8[1];
  *(void *)a1 = v15;
  *(void *)(a1 + *(void *)(v15 - 24)) = v8[6];
  *(void *)a1 = v12;
  *(void *)(a1 + 128) = v5;
  *(void *)(a1 + 16) = v7;
  std::streambuf::basic_streambuf();
  uint64_t v16 = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 24) = v16;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = a3;
  std::stringbuf::str();
  return a1;
}

void sub_19E231AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (*(char *)(v11 + 111) < 0) {
    operator delete(*v10);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x19F3BBB40](a10);
  _Unwind_Resume(a1);
}

void *sub_19E231B50(void *a1, uint64_t a2, unsigned __int8 a3)
{
  MEMORY[0x19F3BB950](&v11, a1, 1);
  if (!v11) {
    return a1;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  uint64_t v6 = 0;
  while (1)
  {
    uint64_t v7 = *(void **)((char *)a1 + *(void *)(*a1 - 24) + 40);
    unint64_t v8 = (unsigned char *)v7[3];
    if (v8 != (unsigned char *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(void *))(*v7 + 80))(v7);
    if (v7 == -1) {
      break;
    }
LABEL_9:
    if (v7 == a3)
    {
      int v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    ++v6;
    if (*(char *)(a2 + 23) < 0 && *(void *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      int v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6) {
    int v9 = 2;
  }
  else {
    int v9 = 6;
  }
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_19E231CB0(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v2 = *v1;
  *(_DWORD *)((char *)v1 + *(void *)(*v1 - 24) + 32) |= 1u;
  if ((*((unsigned char *)v1 + *(void *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x19E231C70);
  }
  __cxa_rethrow();
}

void sub_19E231D2C(_Unwind_Exception *a1)
{
}

uint64_t sub_19E231D40(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

void sub_19E231D48()
{
}

uint64_t sub_19E231D5C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t sub_19E231D64()
{
  return 5;
}

void *sub_19E231D6C(void *a1)
{
  *a1 = &unk_1EF0A4FC0;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_19E231DBC(void *__p)
{
  void *__p = &unk_1EF0A4FC0;
  uint64_t v2 = (void *)__p[2];
  if (v2)
  {
    __p[3] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

void sub_19E231E1C()
{
}

uint64_t sub_19E23208C(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    sub_19E1E5B9C((void *)(a1 + 16), *(char **)(a2 + 16), *(char **)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 3);
  }
  return a1;
}

uint64_t sub_19E2320D8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t sub_19E2320E0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if ((int)v3 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = ***(void ***)(a1 + 16);
    uint64_t v6 = *a3;
    if (v3 < 8) {
      goto LABEL_7;
    }
    if ((unint64_t)(v6 - v5) < 0x20) {
      goto LABEL_7;
    }
    uint64_t v4 = v3 & 0x7FFFFFF8;
    uint64_t v7 = (long long *)(v5 + 16);
    unint64_t v8 = (_OWORD *)(v6 + 16);
    uint64_t v9 = v3 & 0xFFFFFFF8;
    do
    {
      long long v10 = *v7;
      *(v8 - 1) = *(v7 - 1);
      _OWORD *v8 = v10;
      v7 += 2;
      v8 += 2;
      v9 -= 8;
    }
    while (v9);
    if (v4 != v3)
    {
LABEL_7:
      uint64_t v11 = v3 - v4;
      uint64_t v12 = 4 * v4;
      uint64_t v13 = (_DWORD *)(v6 + 4 * v4);
      uint64_t v14 = (int *)(v5 + v12);
      do
      {
        int v15 = *v14++;
        *v13++ = v15;
        --v11;
      }
      while (v11);
    }
  }
  return 0;
}

uint64_t sub_19E23216C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t sub_19E232174()
{
  return 6;
}

uint64_t sub_19E232184(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
    *(void *)(result + 16) = *(void *)(a2 + 16);
  }
  return result;
}

void sub_19E2321A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17 = a10;
  uint64_t v18 = a11;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E94585C0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v22 = a3;
    uint64_t v21 = a2;
    int v20 = __cxa_guard_acquire(&qword_1E94585C0);
    uint64_t v17 = a10;
    a2 = v21;
    uint64_t v18 = a11;
    a3 = v22;
    if (v20)
    {
      qword_1E94585A8 = 0;
      unk_1E94585B0 = 0;
      qword_1E94585B8 = 0;
      __cxa_atexit((void (*)(void *))sub_19E142EEC, &qword_1E94585A8, &dword_19E138000);
      __cxa_guard_release(&qword_1E94585C0);
      uint64_t v17 = a10;
      a2 = v21;
      uint64_t v18 = a11;
      a3 = v22;
    }
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 304))(a1, a2, a3, a5, v17, v18, &qword_1E94585A8);
  uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 344))(a1, a4, v19, a5, a6, a8);
  *a7 = (*(float (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 352))(a1, a4, a5);
}

void sub_19E232360(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(void **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(a1 + 8), v12);
      uint64_t v5 = (void *)((char *)v5 + v12);
    }
    *(void *)(a1 + 8) = v5;
  }
  else
  {
    uint64_t v6 = *(void **)a1;
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(void *)a1) >> 3);
    unint64_t v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_19E13D694();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL) {
        sub_19E13C418();
      }
      uint64_t v11 = (char *)operator new(24 * v10);
    }
    else
    {
      uint64_t v11 = 0;
    }
    uint64_t v13 = &v11[24 * v7];
    uint64_t v14 = &v11[24 * v10];
    size_t v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    uint64_t v16 = &v13[v15];
    if (v5 == v6)
    {
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v14;
      if (!v5) {
        return;
      }
      goto LABEL_24;
    }
    do
    {
      uint64_t v17 = v13;
      *((void *)v13 - 2) = 0;
      *((void *)v13 - 1) = 0;
      long long v18 = *(_OWORD *)(v5 - 3);
      v5 -= 3;
      *(_OWORD *)(v13 - 24) = v18;
      v13 -= 24;
      *((void *)v17 - 1) = v5[2];
      void *v5 = 0;
      v5[1] = 0;
      v5[2] = 0;
    }
    while (v5 != v6);
    uint64_t v19 = *(void **)a1;
    uint64_t v5 = *(void **)(a1 + 8);
    *(void *)a1 = v13;
    *(void *)(a1 + 8) = v16;
    *(void *)(a1 + 16) = v14;
    if (v5 != v19)
    {
      int v20 = v5;
      do
      {
        uint64_t v22 = (void *)*(v20 - 3);
        v20 -= 3;
        uint64_t v21 = v22;
        if (v22)
        {
          *(v5 - 2) = v21;
          operator delete(v21);
        }
        uint64_t v5 = v20;
      }
      while (v20 != v19);
      uint64_t v5 = v19;
    }
    if (v5)
    {
LABEL_24:
      operator delete(v5);
    }
  }
}

size_t sub_19E232568(_DWORD *a1, FILE *__stream, _DWORD *a3)
{
  int __ptr = a1[3] | a1[6];
  size_t v6 = fwrite(a1, 4uLL, 1uLL, __stream);
  size_t v7 = fwrite(a1 + 1, 4uLL, 1uLL, __stream) + v6;
  size_t v8 = fwrite(a1 + 2, 4uLL, 1uLL, __stream);
  size_t v9 = v7 + v8 + fwrite(&__ptr, 4uLL, 1uLL, __stream);
  size_t v10 = fwrite(a1 + 4, 4uLL, 1uLL, __stream);
  size_t result = fwrite(a1 + 5, 4uLL, 1uLL, __stream);
  if (v9 + v10 + result != 6) {
    sub_19E2F6320(67);
  }
  *a3 += 24;
  return result;
}

uint64_t sub_19E232668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = a1;
  uint64_t v8 = *(void *)(a1 + 96);
  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v10 = *(int *)(v8 + 72);
  uint64_t v11 = (unsigned int *)(*(void *)v8 + v10);
  if ((unint64_t)v11 > *(void *)v8 + *(void *)(v8 + 8) - 4)
  {
    unsigned int v12 = 0;
    goto LABEL_4;
  }
  unsigned int v12 = *v11;
  *(_DWORD *)(v8 + 72) = v10 + 4;
  if (v12 <= 1)
  {
LABEL_4:
    int v13 = *(_DWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 64) = xmmword_19E3513C0;
    *(_DWORD *)(a1 + 80) = v13;
    *(void *)(a1 + 84) = 0x2000000001;
    if (!v12) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  if (v12 - 2 > 3) {
    sub_19E2F6320(38);
  }
  sub_19E232FE8((_DWORD *)(a1 + 64), (uint64_t *)v8, 1);
  if (v12 == 3 || v12 == 5) {
LABEL_5:
  }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v8);
LABEL_6:
  int v14 = *(_DWORD *)(v7 + 88);
  if (v14 != sub_19E2F6300()) {
    sub_19E2F6320(33);
  }
  int v15 = *(_DWORD *)(v7 + 84);
  if ((v15 & 0xFFFFFFFE) != 2) {
    sub_19E2F6320(34);
  }
  if (v15 != 2) {
    sub_19E2F6320(35);
  }
  uint64_t v16 = *(uint64_t **)(v7 + 96);
  uint64_t v17 = *v16;
  uint64_t v18 = v16[1];
  uint64_t v19 = (_DWORD *)(*v16 + *((int *)v16 + 18));
  if ((unint64_t)v19 > *v16 + v18 - 4)
  {
    *(_DWORD *)uint64_t v7 = 0;
    int v20 = (_DWORD *)(v17 + *((int *)v16 + 18));
    if ((unint64_t)v20 <= v17 + v18 - 4) {
      goto LABEL_11;
    }
LABEL_14:
    *(_DWORD *)(v7 + 4) = 0;
    uint64_t v22 = (_DWORD *)(v17 + *((int *)v16 + 18));
    if ((unint64_t)v22 <= v17 + v18 - 4) {
      goto LABEL_12;
    }
LABEL_15:
    *(_DWORD *)(v7 + 8) = 0;
    goto LABEL_16;
  }
  *(_DWORD *)uint64_t v7 = *v19;
  int v23 = *((_DWORD *)v16 + 18) + 4;
  *((_DWORD *)v16 + 18) = v23;
  uint64_t v17 = *v16;
  uint64_t v18 = v16[1];
  int v20 = (_DWORD *)(*v16 + v23);
  if ((unint64_t)v20 > *v16 + v18 - 4) {
    goto LABEL_14;
  }
LABEL_11:
  *(_DWORD *)(v7 + 4) = *v20;
  int v21 = *((_DWORD *)v16 + 18) + 4;
  *((_DWORD *)v16 + 18) = v21;
  uint64_t v22 = (_DWORD *)(*v16 + v21);
  if ((unint64_t)v22 > *v16 + v16[1] - 4) {
    goto LABEL_15;
  }
LABEL_12:
  *(_DWORD *)(v7 + 8) = *v22;
  *((_DWORD *)v16 + 18) += 4;
LABEL_16:
  uint64_t v24 = (uint64_t **)(a2 + 8);
  sub_19E13C56C(a2, *(void **)(a2 + 8));
  *(void *)a2 = a2 + 8;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  unint64_t v25 = (uint64_t **)(a3 + 8);
  sub_19E13C56C(a3, *(void **)(a3 + 8));
  *(void *)a3 = a3 + 8;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 8) = 0;
  uint64_t v26 = *(void *)(v7 + 96);
  uint64_t v27 = *(int *)(v26 + 72);
  uint64_t v28 = (int *)(*(void *)v26 + v27);
  uint64_t v88 = v7;
  if ((unint64_t)v28 <= *(void *)v26 + *(void *)(v26 + 8) - 4)
  {
    int v29 = *v28;
    *(_DWORD *)(v26 + 72) = v27 + 4;
    int v87 = v29;
    if (v29 >= 1)
    {
      for (int i = 0; i != v87; ++i)
      {
        uint64_t v31 = *(uint64_t **)(v7 + 96);
        int v32 = *((_DWORD *)v31 + 18);
        uint64_t v33 = *v31;
        uint64_t v34 = (int *)(*v31 + v32);
        unint64_t v35 = *v31 + v31[1] - 4;
        if ((unint64_t)v34 <= v35)
        {
          int v36 = *v34;
          v32 += 4;
          *((_DWORD *)v31 + 18) = v32;
          char v37 = (int *)(v33 + v32);
          if ((unint64_t)v37 <= v35)
          {
LABEL_23:
            int v38 = *v37;
            *((_DWORD *)v31 + 18) = v32 + 4;
            uint64_t v39 = *v24;
            uint64_t v40 = (uint64_t **)(a2 + 8);
            uint64_t v41 = (uint64_t **)(a2 + 8);
            if (*v24) {
              goto LABEL_29;
            }
            goto LABEL_33;
          }
        }
        else
        {
          int v36 = 0;
          char v37 = (int *)(v33 + v32);
          if ((unint64_t)v37 <= v35) {
            goto LABEL_23;
          }
        }
        int v38 = 0;
        uint64_t v39 = *v24;
        uint64_t v40 = (uint64_t **)(a2 + 8);
        uint64_t v41 = (uint64_t **)(a2 + 8);
        if (*v24)
        {
          while (1)
          {
LABEL_29:
            while (1)
            {
              uint64_t v41 = (uint64_t **)v39;
              int v42 = *((_DWORD *)v39 + 7);
              if (v36 >= v42) {
                break;
              }
              uint64_t v39 = *v41;
              uint64_t v40 = v41;
              if (!*v41) {
                goto LABEL_33;
              }
            }
            if (v42 >= v36) {
              goto LABEL_36;
            }
            uint64_t v39 = v41[1];
            if (!v39)
            {
              uint64_t v40 = v41 + 1;
              break;
            }
          }
        }
LABEL_33:
        float v43 = (uint64_t *)v41;
        uint64_t v41 = (uint64_t **)operator new(0x28uLL);
        *((_DWORD *)v41 + 7) = v36;
        *((_DWORD *)v41 + 8) = 0;
        *uint64_t v41 = 0;
        v41[1] = 0;
        uint64_t v41[2] = v43;
        *uint64_t v40 = (uint64_t *)v41;
        uint64_t v44 = **(void **)a2;
        float v45 = (uint64_t *)v41;
        if (v44)
        {
          *(void *)a2 = v44;
          float v45 = *v40;
        }
        sub_19E13C8A0(*(uint64_t **)(a2 + 8), v45);
        ++*(void *)(a2 + 16);
LABEL_36:
        *((_DWORD *)v41 + 8) = v38;
        int64_t v46 = *v25;
        uint64_t v47 = (uint64_t **)(a3 + 8);
        unint64_t v48 = (uint64_t **)(a3 + 8);
        if (*v25)
        {
          while (1)
          {
            while (1)
            {
              unint64_t v48 = (uint64_t **)v46;
              int v49 = *((_DWORD *)v46 + 7);
              if (v38 >= v49) {
                break;
              }
              int64_t v46 = *v48;
              uint64_t v47 = v48;
              if (!*v48) {
                goto LABEL_43;
              }
            }
            if (v49 >= v38) {
              break;
            }
            int64_t v46 = v48[1];
            if (!v46)
            {
              uint64_t v47 = v48 + 1;
              goto LABEL_43;
            }
          }
        }
        else
        {
LABEL_43:
          unint64_t v50 = (uint64_t *)v48;
          unint64_t v48 = (uint64_t **)operator new(0x28uLL);
          *((_DWORD *)v48 + 7) = v38;
          *((_DWORD *)v48 + 8) = 0;
          *unint64_t v48 = 0;
          v48[1] = 0;
          v48[2] = v50;
          __int32 *v47 = (uint64_t *)v48;
          uint64_t v51 = **(void **)a3;
          uint64_t v52 = (uint64_t *)v48;
          if (v51)
          {
            *(void *)a3 = v51;
            uint64_t v52 = *v47;
          }
          sub_19E13C8A0(*(uint64_t **)(a3 + 8), v52);
          ++*(void *)(a3 + 16);
        }
        *((_DWORD *)v48 + 8) = v36;
        uint64_t v7 = v88;
      }
    }
  }
  int v53 = (uint64_t **)(a4 + 8);
  sub_19E13C56C(a4, *(void **)(a4 + 8));
  *(void *)a4 = a4 + 8;
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 8) = 0;
  unint64_t v54 = (uint64_t **)(a5 + 8);
  sub_19E13C56C(a5, *(void **)(a5 + 8));
  *(void *)a5 = a5 + 8;
  *(void *)(a5 + 16) = 0;
  *(void *)(a5 + 8) = 0;
  uint64_t v55 = *(void *)(v7 + 96);
  uint64_t v56 = *(int *)(v55 + 72);
  unint64_t v57 = (int *)(*(void *)v55 + v56);
  if ((unint64_t)v57 <= *(void *)v55 + *(void *)(v55 + 8) - 4)
  {
    int v58 = *v57;
    *(_DWORD *)(v55 + 72) = v56 + 4;
    if (v58 >= 1)
    {
      for (int j = 0; j != v58; ++j)
      {
        unint64_t v60 = *(uint64_t **)(v7 + 96);
        int v61 = *((_DWORD *)v60 + 18);
        uint64_t v62 = *v60;
        unint64_t v63 = (int *)(*v60 + v61);
        unint64_t v64 = *v60 + v60[1] - 4;
        if ((unint64_t)v63 <= v64)
        {
          int v65 = *v63;
          v61 += 4;
          *((_DWORD *)v60 + 18) = v61;
          uint64_t v66 = (int *)(v62 + v61);
          if ((unint64_t)v66 <= v64)
          {
LABEL_52:
            int v67 = *v66;
            *((_DWORD *)v60 + 18) = v61 + 4;
            int v68 = *v53;
            unint64_t v69 = (uint64_t **)(a4 + 8);
            uint64_t v70 = (uint64_t **)(a4 + 8);
            if (*v53) {
              goto LABEL_58;
            }
            goto LABEL_62;
          }
        }
        else
        {
          int v65 = 0;
          uint64_t v66 = (int *)(v62 + v61);
          if ((unint64_t)v66 <= v64) {
            goto LABEL_52;
          }
        }
        int v67 = 0;
        int v68 = *v53;
        unint64_t v69 = (uint64_t **)(a4 + 8);
        uint64_t v70 = (uint64_t **)(a4 + 8);
        if (*v53)
        {
          while (1)
          {
LABEL_58:
            while (1)
            {
              uint64_t v70 = (uint64_t **)v68;
              int v71 = *((_DWORD *)v68 + 7);
              if (v65 >= v71) {
                break;
              }
              int v68 = *v70;
              unint64_t v69 = v70;
              if (!*v70) {
                goto LABEL_62;
              }
            }
            if (v71 >= v65) {
              goto LABEL_65;
            }
            int v68 = v70[1];
            if (!v68)
            {
              unint64_t v69 = v70 + 1;
              break;
            }
          }
        }
LABEL_62:
        int v72 = (uint64_t *)v70;
        uint64_t v70 = (uint64_t **)operator new(0x28uLL);
        *((_DWORD *)v70 + 7) = v65;
        *((_DWORD *)v70 + 8) = 0;
        *uint64_t v70 = 0;
        v70[1] = 0;
        v70[2] = v72;
        char *v69 = (uint64_t *)v70;
        uint64_t v73 = **(void **)a4;
        int v74 = (uint64_t *)v70;
        if (v73)
        {
          *(void *)a4 = v73;
          int v74 = *v69;
        }
        sub_19E13C8A0(*(uint64_t **)(a4 + 8), v74);
        ++*(void *)(a4 + 16);
LABEL_65:
        *((_DWORD *)v70 + 8) = v67;
        uint64_t v75 = *v54;
        unint64_t v76 = (uint64_t **)(a5 + 8);
        int v77 = (uint64_t **)(a5 + 8);
        if (*v54)
        {
          while (1)
          {
            while (1)
            {
              int v77 = (uint64_t **)v75;
              int v78 = *((_DWORD *)v75 + 7);
              if (v67 >= v78) {
                break;
              }
              uint64_t v75 = *v77;
              unint64_t v76 = v77;
              if (!*v77) {
                goto LABEL_72;
              }
            }
            if (v78 >= v67) {
              break;
            }
            uint64_t v75 = v77[1];
            if (!v75)
            {
              unint64_t v76 = v77 + 1;
              goto LABEL_72;
            }
          }
        }
        else
        {
LABEL_72:
          uint64_t v79 = (uint64_t *)v77;
          int v77 = (uint64_t **)operator new(0x28uLL);
          *((_DWORD *)v77 + 7) = v67;
          *((_DWORD *)v77 + 8) = 0;
          *int v77 = 0;
          v77[1] = 0;
          v77[2] = v79;
          *unint64_t v76 = (uint64_t *)v77;
          uint64_t v80 = **(void **)a5;
          uint64_t v81 = (uint64_t *)v77;
          if (v80)
          {
            *(void *)a5 = v80;
            uint64_t v81 = *v76;
          }
          sub_19E13C8A0(*(uint64_t **)(a5 + 8), v81);
          ++*(void *)(a5 + 16);
        }
        *((_DWORD *)v77 + 8) = v65;
        uint64_t v7 = v88;
      }
    }
  }
  uint64_t v82 = *(uint64_t (**)(void))(**(void **)(v7 + 40) + 64);

  return v82();
}

uint64_t sub_19E232D4C(uint64_t a1, long long *a2, long long *a3, int a4)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    sub_19E13C2D0((unsigned char *)(a1 + 16), *(void **)a2, *((void *)a2 + 1));
    uint64_t v9 = a1 + 40;
    if ((*((char *)a3 + 23) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v8 = *a2;
    *(void *)(a1 + 32) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 16) = v8;
    uint64_t v9 = a1 + 40;
    if ((*((char *)a3 + 23) & 0x80000000) == 0)
    {
LABEL_3:
      long long v10 = *a3;
      *(void *)(v9 + 16) = *((void *)a3 + 2);
      *(_OWORD *)uint64_t v9 = v10;
      goto LABEL_6;
    }
  }
  sub_19E13C2D0((unsigned char *)v9, *(void **)a3, *((void *)a3 + 1));
LABEL_6:
  *(_DWORD *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 68) = a4;
  *(_DWORD *)(a1 + 72) = 0;
  if (*((char *)a3 + 23) < 0)
  {
    uint64_t v12 = *((void *)a3 + 1);
    if (v12 != 1 || **(unsigned char **)a3 != 114)
    {
      if (v12 != 2 || **(_WORD **)a3 != 11122) {
LABEL_33:
      }
        sub_19E2F6320(11);
      goto LABEL_15;
    }
  }
  else
  {
    int v11 = *((unsigned __int8 *)a3 + 23);
    if (v11 != 1)
    {
      if (v11 != 2 || *(_WORD *)a3 != 11122) {
        goto LABEL_33;
      }
LABEL_15:
      *(_DWORD *)(a1 + 64) = 514;
      if (*((char *)a2 + 23) >= 0) {
        int v13 = (const char *)a2;
      }
      else {
        int v13 = *(const char **)a2;
      }
      int v14 = open(v13, 514, 384);
      goto LABEL_24;
    }
    if (*(unsigned char *)a3 != 114) {
      goto LABEL_33;
    }
  }
  *(_DWORD *)(a1 + 64) = 0;
  if (*((char *)a2 + 23) >= 0) {
    int v15 = (const char *)a2;
  }
  else {
    int v15 = *(const char **)a2;
  }
  int v14 = open(v15, 0);
LABEL_24:
  int v16 = v14;
  if (v14 < 0) {
    goto LABEL_33;
  }
  if (fstat(v14, &v21) < 0)
  {
    close(v16);
    goto LABEL_33;
  }
  int st_size = v21.st_size;
  *(void *)(a1 + 8) = v21.st_size;
  uint64_t v22 = 0;
  int v23 = st_size;
  fcntl(v16, 44, &v22);
  size_t v18 = *(void *)(a1 + 8);
  if (!a4) {
    operator new[]();
  }
  if (v18)
  {
    uint64_t v19 = mmap(0, v18, *(_DWORD *)(a1 + 64) & 2 | 1u, 1, v16, 0);
    if (v19 == (void *)-1)
    {
      close(v16);
      sub_19E2F6320(11);
    }
    *(void *)a1 = v19;
  }
  close(v16);
  return a1;
}

void sub_19E232F98(_Unwind_Exception *exception_object)
{
  if ((*(char *)(v2 + 39) & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(*v1);
  _Unwind_Resume(exception_object);
}

_DWORD *sub_19E232FE8(_DWORD *result, uint64_t *a2, char a3)
{
  uint64_t v3 = *a2;
  int v4 = *((_DWORD *)a2 + 18);
  if (a3)
  {
    uint64_t v5 = a2[1];
    if (v3 + v4 <= (unint64_t)(v3 + v5 - 4))
    {
      v4 += 4;
      *((_DWORD *)a2 + 18) = v4;
    }
    size_t v6 = (_DWORD *)(v3 + v4);
    if ((unint64_t)v6 > v3 + v5 - 4)
    {
LABEL_5:
      void *result = 0;
      uint64_t v7 = (_DWORD *)(v3 + *((int *)a2 + 18));
      if ((unint64_t)v7 <= v3 + v5 - 4) {
        goto LABEL_6;
      }
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v5 = a2[1];
    size_t v6 = (_DWORD *)(v3 + v4);
    if ((unint64_t)v6 > v3 + v5 - 4) {
      goto LABEL_5;
    }
  }
  void *result = *v6;
  int v17 = *((_DWORD *)a2 + 18) + 4;
  *((_DWORD *)a2 + 18) = v17;
  uint64_t v3 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v7 = (_DWORD *)(*a2 + v17);
  if ((unint64_t)v7 <= *a2 + v5 - 4)
  {
LABEL_6:
    result[1] = *v7;
    int v8 = *((_DWORD *)a2 + 18) + 4;
    *((_DWORD *)a2 + 18) = v8;
    uint64_t v3 = *a2;
    uint64_t v5 = a2[1];
    uint64_t v9 = (_DWORD *)(*a2 + v8);
    if ((unint64_t)v9 <= *a2 + v5 - 4) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }
LABEL_13:
  result[1] = 0;
  uint64_t v9 = (_DWORD *)(v3 + *((int *)a2 + 18));
  if ((unint64_t)v9 <= v3 + v5 - 4)
  {
LABEL_7:
    result[2] = *v9;
    int v10 = *((_DWORD *)a2 + 18) + 4;
    *((_DWORD *)a2 + 18) = v10;
    uint64_t v3 = *a2;
    uint64_t v5 = a2[1];
    int v11 = (int *)(*a2 + v10);
    if ((unint64_t)v11 <= *a2 + v5 - 4) {
      goto LABEL_8;
    }
    goto LABEL_15;
  }
LABEL_14:
  result[2] = 0;
  int v11 = (int *)(v3 + *((int *)a2 + 18));
  if ((unint64_t)v11 <= v3 + v5 - 4)
  {
LABEL_8:
    int v12 = *v11;
    result[3] = v12;
    int v13 = *((_DWORD *)a2 + 18) + 4;
    *((_DWORD *)a2 + 18) = v13;
    uint64_t v3 = *a2;
    uint64_t v5 = a2[1];
    int v14 = (_DWORD *)(*a2 + v13);
    if ((unint64_t)v14 <= *a2 + v5 - 4) {
      goto LABEL_9;
    }
LABEL_16:
    result[4] = 0;
    int v16 = (_DWORD *)(v3 + *((int *)a2 + 18));
    if ((unint64_t)v16 <= v3 + v5 - 4) {
      goto LABEL_10;
    }
LABEL_17:
    result[5] = 0;
    goto LABEL_18;
  }
LABEL_15:
  int v12 = 0;
  result[3] = 0;
  int v14 = (_DWORD *)(v3 + *((int *)a2 + 18));
  if ((unint64_t)v14 > v3 + v5 - 4) {
    goto LABEL_16;
  }
LABEL_9:
  result[4] = *v14;
  int v15 = *((_DWORD *)a2 + 18) + 4;
  *((_DWORD *)a2 + 18) = v15;
  int v16 = (_DWORD *)(*a2 + v15);
  if ((unint64_t)v16 > *a2 + a2[1] - 4) {
    goto LABEL_17;
  }
LABEL_10:
  result[5] = *v16;
  *((_DWORD *)a2 + 18) += 4;
LABEL_18:
  if ((v12 & 3) == 0) {
    goto LABEL_25;
  }
  unsigned int v18 = v12 & 0xFFFFFFFC;
  if ((v12 & 0xFFFFFFFC) == 0) {
    unsigned int v18 = 32;
  }
  result[6] = v18;
  if (v18 > 0x20 || ((1 << v18) & 0x100010100) == 0) {
LABEL_25:
  }
    sub_19E2F6320(25);
  result[3] = v12 & 3;
  if (*((_DWORD *)a2 + 18) != 32) {
    sub_19E2F6320(67);
  }
  return result;
}

uint64_t sub_19E23323C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = a1;
  uint64_t v8 = *(void *)(a1 + 96);
  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v10 = *(int *)(v8 + 72);
  int v11 = (unsigned int *)(*(void *)v8 + v10);
  if ((unint64_t)v11 > *(void *)v8 + *(void *)(v8 + 8) - 4)
  {
    unsigned int v12 = 0;
    goto LABEL_4;
  }
  unsigned int v12 = *v11;
  *(_DWORD *)(v8 + 72) = v10 + 4;
  if (v12 <= 1)
  {
LABEL_4:
    int v13 = *(_DWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 64) = xmmword_19E3513C0;
    *(_DWORD *)(a1 + 80) = v13;
    *(void *)(a1 + 84) = 0x2000000001;
    if (!v12) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  if (v12 - 2 > 3) {
    sub_19E2F6320(38);
  }
  sub_19E232FE8((_DWORD *)(a1 + 64), (uint64_t *)v8, 1);
  if (v12 == 3 || v12 == 5) {
LABEL_5:
  }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v8);
LABEL_6:
  int v14 = *(_DWORD *)(v7 + 88);
  if (v14 != sub_19E2F62F8()) {
    sub_19E2F6320(33);
  }
  int v15 = *(_DWORD *)(v7 + 84);
  if ((v15 & 0xFFFFFFFE) != 2) {
    sub_19E2F6320(34);
  }
  if (v15 != 2) {
    sub_19E2F6320(35);
  }
  int v16 = *(uint64_t **)(v7 + 96);
  uint64_t v17 = *v16;
  uint64_t v18 = v16[1];
  uint64_t v19 = (_DWORD *)(*v16 + *((int *)v16 + 18));
  if ((unint64_t)v19 > *v16 + v18 - 4)
  {
    *(_DWORD *)uint64_t v7 = 0;
    int v20 = (_DWORD *)(v17 + *((int *)v16 + 18));
    if ((unint64_t)v20 <= v17 + v18 - 4) {
      goto LABEL_11;
    }
LABEL_14:
    *(_DWORD *)(v7 + 4) = 0;
    uint64_t v22 = (_DWORD *)(v17 + *((int *)v16 + 18));
    if ((unint64_t)v22 <= v17 + v18 - 4) {
      goto LABEL_12;
    }
LABEL_15:
    *(_DWORD *)(v7 + 8) = 0;
    goto LABEL_16;
  }
  *(_DWORD *)uint64_t v7 = *v19;
  int v23 = *((_DWORD *)v16 + 18) + 4;
  *((_DWORD *)v16 + 18) = v23;
  uint64_t v17 = *v16;
  uint64_t v18 = v16[1];
  int v20 = (_DWORD *)(*v16 + v23);
  if ((unint64_t)v20 > *v16 + v18 - 4) {
    goto LABEL_14;
  }
LABEL_11:
  *(_DWORD *)(v7 + 4) = *v20;
  int v21 = *((_DWORD *)v16 + 18) + 4;
  *((_DWORD *)v16 + 18) = v21;
  uint64_t v22 = (_DWORD *)(*v16 + v21);
  if ((unint64_t)v22 > *v16 + v16[1] - 4) {
    goto LABEL_15;
  }
LABEL_12:
  *(_DWORD *)(v7 + 8) = *v22;
  *((_DWORD *)v16 + 18) += 4;
LABEL_16:
  uint64_t v24 = (uint64_t **)(a2 + 8);
  sub_19E13C56C(a2, *(void **)(a2 + 8));
  *(void *)a2 = a2 + 8;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  unint64_t v25 = (uint64_t **)(a3 + 8);
  sub_19E13C56C(a3, *(void **)(a3 + 8));
  *(void *)a3 = a3 + 8;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 8) = 0;
  uint64_t v26 = *(void *)(v7 + 96);
  uint64_t v27 = *(int *)(v26 + 72);
  uint64_t v28 = (int *)(*(void *)v26 + v27);
  uint64_t v88 = v7;
  if ((unint64_t)v28 <= *(void *)v26 + *(void *)(v26 + 8) - 4)
  {
    int v29 = *v28;
    *(_DWORD *)(v26 + 72) = v27 + 4;
    int v87 = v29;
    if (v29 >= 1)
    {
      for (int i = 0; i != v87; ++i)
      {
        uint64_t v31 = *(uint64_t **)(v7 + 96);
        int v32 = *((_DWORD *)v31 + 18);
        uint64_t v33 = *v31;
        uint64_t v34 = (int *)(*v31 + v32);
        unint64_t v35 = *v31 + v31[1] - 4;
        if ((unint64_t)v34 <= v35)
        {
          int v36 = *v34;
          v32 += 4;
          *((_DWORD *)v31 + 18) = v32;
          char v37 = (int *)(v33 + v32);
          if ((unint64_t)v37 <= v35)
          {
LABEL_23:
            int v38 = *v37;
            *((_DWORD *)v31 + 18) = v32 + 4;
            uint64_t v39 = *v24;
            uint64_t v40 = (uint64_t **)(a2 + 8);
            uint64_t v41 = (uint64_t **)(a2 + 8);
            if (*v24) {
              goto LABEL_29;
            }
            goto LABEL_33;
          }
        }
        else
        {
          int v36 = 0;
          char v37 = (int *)(v33 + v32);
          if ((unint64_t)v37 <= v35) {
            goto LABEL_23;
          }
        }
        int v38 = 0;
        uint64_t v39 = *v24;
        uint64_t v40 = (uint64_t **)(a2 + 8);
        uint64_t v41 = (uint64_t **)(a2 + 8);
        if (*v24)
        {
          while (1)
          {
LABEL_29:
            while (1)
            {
              uint64_t v41 = (uint64_t **)v39;
              int v42 = *((_DWORD *)v39 + 7);
              if (v36 >= v42) {
                break;
              }
              uint64_t v39 = *v41;
              uint64_t v40 = v41;
              if (!*v41) {
                goto LABEL_33;
              }
            }
            if (v42 >= v36) {
              goto LABEL_36;
            }
            uint64_t v39 = v41[1];
            if (!v39)
            {
              uint64_t v40 = v41 + 1;
              break;
            }
          }
        }
LABEL_33:
        float v43 = (uint64_t *)v41;
        uint64_t v41 = (uint64_t **)operator new(0x28uLL);
        *((_DWORD *)v41 + 7) = v36;
        *((_DWORD *)v41 + 8) = 0;
        *uint64_t v41 = 0;
        v41[1] = 0;
        uint64_t v41[2] = v43;
        *uint64_t v40 = (uint64_t *)v41;
        uint64_t v44 = **(void **)a2;
        float v45 = (uint64_t *)v41;
        if (v44)
        {
          *(void *)a2 = v44;
          float v45 = *v40;
        }
        sub_19E13C8A0(*(uint64_t **)(a2 + 8), v45);
        ++*(void *)(a2 + 16);
LABEL_36:
        *((_DWORD *)v41 + 8) = v38;
        int64_t v46 = *v25;
        uint64_t v47 = (uint64_t **)(a3 + 8);
        unint64_t v48 = (uint64_t **)(a3 + 8);
        if (*v25)
        {
          while (1)
          {
            while (1)
            {
              unint64_t v48 = (uint64_t **)v46;
              int v49 = *((_DWORD *)v46 + 7);
              if (v38 >= v49) {
                break;
              }
              int64_t v46 = *v48;
              uint64_t v47 = v48;
              if (!*v48) {
                goto LABEL_43;
              }
            }
            if (v49 >= v38) {
              break;
            }
            int64_t v46 = v48[1];
            if (!v46)
            {
              uint64_t v47 = v48 + 1;
              goto LABEL_43;
            }
          }
        }
        else
        {
LABEL_43:
          unint64_t v50 = (uint64_t *)v48;
          unint64_t v48 = (uint64_t **)operator new(0x28uLL);
          *((_DWORD *)v48 + 7) = v38;
          *((_DWORD *)v48 + 8) = 0;
          *unint64_t v48 = 0;
          v48[1] = 0;
          v48[2] = v50;
          __int32 *v47 = (uint64_t *)v48;
          uint64_t v51 = **(void **)a3;
          uint64_t v52 = (uint64_t *)v48;
          if (v51)
          {
            *(void *)a3 = v51;
            uint64_t v52 = *v47;
          }
          sub_19E13C8A0(*(uint64_t **)(a3 + 8), v52);
          ++*(void *)(a3 + 16);
        }
        *((_DWORD *)v48 + 8) = v36;
        uint64_t v7 = v88;
      }
    }
  }
  int v53 = (uint64_t **)(a4 + 8);
  sub_19E13C56C(a4, *(void **)(a4 + 8));
  *(void *)a4 = a4 + 8;
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 8) = 0;
  unint64_t v54 = (uint64_t **)(a5 + 8);
  sub_19E13C56C(a5, *(void **)(a5 + 8));
  *(void *)a5 = a5 + 8;
  *(void *)(a5 + 16) = 0;
  *(void *)(a5 + 8) = 0;
  uint64_t v55 = *(void *)(v7 + 96);
  uint64_t v56 = *(int *)(v55 + 72);
  unint64_t v57 = (int *)(*(void *)v55 + v56);
  if ((unint64_t)v57 <= *(void *)v55 + *(void *)(v55 + 8) - 4)
  {
    int v58 = *v57;
    *(_DWORD *)(v55 + 72) = v56 + 4;
    if (v58 >= 1)
    {
      for (int j = 0; j != v58; ++j)
      {
        unint64_t v60 = *(uint64_t **)(v7 + 96);
        int v61 = *((_DWORD *)v60 + 18);
        uint64_t v62 = *v60;
        unint64_t v63 = (int *)(*v60 + v61);
        unint64_t v64 = *v60 + v60[1] - 4;
        if ((unint64_t)v63 <= v64)
        {
          int v65 = *v63;
          v61 += 4;
          *((_DWORD *)v60 + 18) = v61;
          uint64_t v66 = (int *)(v62 + v61);
          if ((unint64_t)v66 <= v64)
          {
LABEL_52:
            int v67 = *v66;
            *((_DWORD *)v60 + 18) = v61 + 4;
            int v68 = *v53;
            unint64_t v69 = (uint64_t **)(a4 + 8);
            uint64_t v70 = (uint64_t **)(a4 + 8);
            if (*v53) {
              goto LABEL_58;
            }
            goto LABEL_62;
          }
        }
        else
        {
          int v65 = 0;
          uint64_t v66 = (int *)(v62 + v61);
          if ((unint64_t)v66 <= v64) {
            goto LABEL_52;
          }
        }
        int v67 = 0;
        int v68 = *v53;
        unint64_t v69 = (uint64_t **)(a4 + 8);
        uint64_t v70 = (uint64_t **)(a4 + 8);
        if (*v53)
        {
          while (1)
          {
LABEL_58:
            while (1)
            {
              uint64_t v70 = (uint64_t **)v68;
              int v71 = *((_DWORD *)v68 + 7);
              if (v65 >= v71) {
                break;
              }
              int v68 = *v70;
              unint64_t v69 = v70;
              if (!*v70) {
                goto LABEL_62;
              }
            }
            if (v71 >= v65) {
              goto LABEL_65;
            }
            int v68 = v70[1];
            if (!v68)
            {
              unint64_t v69 = v70 + 1;
              break;
            }
          }
        }
LABEL_62:
        int v72 = (uint64_t *)v70;
        uint64_t v70 = (uint64_t **)operator new(0x28uLL);
        *((_DWORD *)v70 + 7) = v65;
        *((_DWORD *)v70 + 8) = 0;
        *uint64_t v70 = 0;
        v70[1] = 0;
        v70[2] = v72;
        char *v69 = (uint64_t *)v70;
        uint64_t v73 = **(void **)a4;
        int v74 = (uint64_t *)v70;
        if (v73)
        {
          *(void *)a4 = v73;
          int v74 = *v69;
        }
        sub_19E13C8A0(*(uint64_t **)(a4 + 8), v74);
        ++*(void *)(a4 + 16);
LABEL_65:
        *((_DWORD *)v70 + 8) = v67;
        uint64_t v75 = *v54;
        unint64_t v76 = (uint64_t **)(a5 + 8);
        int v77 = (uint64_t **)(a5 + 8);
        if (*v54)
        {
          while (1)
          {
            while (1)
            {
              int v77 = (uint64_t **)v75;
              int v78 = *((_DWORD *)v75 + 7);
              if (v67 >= v78) {
                break;
              }
              uint64_t v75 = *v77;
              unint64_t v76 = v77;
              if (!*v77) {
                goto LABEL_72;
              }
            }
            if (v78 >= v67) {
              break;
            }
            uint64_t v75 = v77[1];
            if (!v75)
            {
              unint64_t v76 = v77 + 1;
              goto LABEL_72;
            }
          }
        }
        else
        {
LABEL_72:
          uint64_t v79 = (uint64_t *)v77;
          int v77 = (uint64_t **)operator new(0x28uLL);
          *((_DWORD *)v77 + 7) = v67;
          *((_DWORD *)v77 + 8) = 0;
          *int v77 = 0;
          v77[1] = 0;
          v77[2] = v79;
          *unint64_t v76 = (uint64_t *)v77;
          uint64_t v80 = **(void **)a5;
          uint64_t v81 = (uint64_t *)v77;
          if (v80)
          {
            *(void *)a5 = v80;
            uint64_t v81 = *v76;
          }
          sub_19E13C8A0(*(uint64_t **)(a5 + 8), v81);
          ++*(void *)(a5 + 16);
        }
        *((_DWORD *)v77 + 8) = v65;
        uint64_t v7 = v88;
      }
    }
  }
  uint64_t v82 = *(uint64_t (**)(void))(**(void **)(v7 + 40) + 64);

  return v82();
}

uint64_t sub_19E233920(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = a1;
  uint64_t v8 = *(void *)(a1 + 96);
  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v10 = *(int *)(v8 + 72);
  int v11 = (unsigned int *)(*(void *)v8 + v10);
  if ((unint64_t)v11 > *(void *)v8 + *(void *)(v8 + 8) - 4)
  {
    unsigned int v12 = 0;
    goto LABEL_4;
  }
  unsigned int v12 = *v11;
  *(_DWORD *)(v8 + 72) = v10 + 4;
  if (v12 <= 1)
  {
LABEL_4:
    int v13 = *(_DWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 64) = xmmword_19E3513C0;
    *(_DWORD *)(a1 + 80) = v13;
    *(void *)(a1 + 84) = 0x2000000001;
    if (!v12) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  if (v12 - 2 > 3) {
    sub_19E2F6320(38);
  }
  sub_19E232FE8((_DWORD *)(a1 + 64), (uint64_t *)v8, 1);
  if (v12 == 3 || v12 == 5) {
LABEL_5:
  }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v8);
LABEL_6:
  int v14 = *(_DWORD *)(v7 + 88);
  if (v14 != sub_19E2F62F0()) {
    sub_19E2F6320(33);
  }
  int v15 = *(_DWORD *)(v7 + 84);
  if ((v15 & 0xFFFFFFFE) != 2) {
    sub_19E2F6320(34);
  }
  if (v15 != 2) {
    sub_19E2F6320(35);
  }
  int v16 = *(uint64_t **)(v7 + 96);
  uint64_t v17 = *v16;
  uint64_t v18 = v16[1];
  uint64_t v19 = (_DWORD *)(*v16 + *((int *)v16 + 18));
  if ((unint64_t)v19 > *v16 + v18 - 4)
  {
    *(_DWORD *)uint64_t v7 = 0;
    int v20 = (_DWORD *)(v17 + *((int *)v16 + 18));
    if ((unint64_t)v20 <= v17 + v18 - 4) {
      goto LABEL_11;
    }
LABEL_14:
    *(_DWORD *)(v7 + 4) = 0;
    uint64_t v22 = (_DWORD *)(v17 + *((int *)v16 + 18));
    if ((unint64_t)v22 <= v17 + v18 - 4) {
      goto LABEL_12;
    }
LABEL_15:
    *(_DWORD *)(v7 + 8) = 0;
    goto LABEL_16;
  }
  *(_DWORD *)uint64_t v7 = *v19;
  int v23 = *((_DWORD *)v16 + 18) + 4;
  *((_DWORD *)v16 + 18) = v23;
  uint64_t v17 = *v16;
  uint64_t v18 = v16[1];
  int v20 = (_DWORD *)(*v16 + v23);
  if ((unint64_t)v20 > *v16 + v18 - 4) {
    goto LABEL_14;
  }
LABEL_11:
  *(_DWORD *)(v7 + 4) = *v20;
  int v21 = *((_DWORD *)v16 + 18) + 4;
  *((_DWORD *)v16 + 18) = v21;
  uint64_t v22 = (_DWORD *)(*v16 + v21);
  if ((unint64_t)v22 > *v16 + v16[1] - 4) {
    goto LABEL_15;
  }
LABEL_12:
  *(_DWORD *)(v7 + 8) = *v22;
  *((_DWORD *)v16 + 18) += 4;
LABEL_16:
  uint64_t v24 = (uint64_t **)(a2 + 8);
  sub_19E13C56C(a2, *(void **)(a2 + 8));
  *(void *)a2 = a2 + 8;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  unint64_t v25 = (uint64_t **)(a3 + 8);
  sub_19E13C56C(a3, *(void **)(a3 + 8));
  *(void *)a3 = a3 + 8;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 8) = 0;
  uint64_t v26 = *(void *)(v7 + 96);
  uint64_t v27 = *(int *)(v26 + 72);
  uint64_t v28 = (int *)(*(void *)v26 + v27);
  uint64_t v88 = v7;
  if ((unint64_t)v28 <= *(void *)v26 + *(void *)(v26 + 8) - 4)
  {
    int v29 = *v28;
    *(_DWORD *)(v26 + 72) = v27 + 4;
    int v87 = v29;
    if (v29 >= 1)
    {
      for (int i = 0; i != v87; ++i)
      {
        uint64_t v31 = *(uint64_t **)(v7 + 96);
        int v32 = *((_DWORD *)v31 + 18);
        uint64_t v33 = *v31;
        uint64_t v34 = (int *)(*v31 + v32);
        unint64_t v35 = *v31 + v31[1] - 4;
        if ((unint64_t)v34 <= v35)
        {
          int v36 = *v34;
          v32 += 4;
          *((_DWORD *)v31 + 18) = v32;
          char v37 = (int *)(v33 + v32);
          if ((unint64_t)v37 <= v35)
          {
LABEL_23:
            int v38 = *v37;
            *((_DWORD *)v31 + 18) = v32 + 4;
            uint64_t v39 = *v24;
            uint64_t v40 = (uint64_t **)(a2 + 8);
            uint64_t v41 = (uint64_t **)(a2 + 8);
            if (*v24) {
              goto LABEL_29;
            }
            goto LABEL_33;
          }
        }
        else
        {
          int v36 = 0;
          char v37 = (int *)(v33 + v32);
          if ((unint64_t)v37 <= v35) {
            goto LABEL_23;
          }
        }
        int v38 = 0;
        uint64_t v39 = *v24;
        uint64_t v40 = (uint64_t **)(a2 + 8);
        uint64_t v41 = (uint64_t **)(a2 + 8);
        if (*v24)
        {
          while (1)
          {
LABEL_29:
            while (1)
            {
              uint64_t v41 = (uint64_t **)v39;
              int v42 = *((_DWORD *)v39 + 7);
              if (v36 >= v42) {
                break;
              }
              uint64_t v39 = *v41;
              uint64_t v40 = v41;
              if (!*v41) {
                goto LABEL_33;
              }
            }
            if (v42 >= v36) {
              goto LABEL_36;
            }
            uint64_t v39 = v41[1];
            if (!v39)
            {
              uint64_t v40 = v41 + 1;
              break;
            }
          }
        }
LABEL_33:
        float v43 = (uint64_t *)v41;
        uint64_t v41 = (uint64_t **)operator new(0x28uLL);
        *((_DWORD *)v41 + 7) = v36;
        *((_DWORD *)v41 + 8) = 0;
        *uint64_t v41 = 0;
        v41[1] = 0;
        uint64_t v41[2] = v43;
        *uint64_t v40 = (uint64_t *)v41;
        uint64_t v44 = **(void **)a2;
        float v45 = (uint64_t *)v41;
        if (v44)
        {
          *(void *)a2 = v44;
          float v45 = *v40;
        }
        sub_19E13C8A0(*(uint64_t **)(a2 + 8), v45);
        ++*(void *)(a2 + 16);
LABEL_36:
        *((_DWORD *)v41 + 8) = v38;
        int64_t v46 = *v25;
        uint64_t v47 = (uint64_t **)(a3 + 8);
        unint64_t v48 = (uint64_t **)(a3 + 8);
        if (*v25)
        {
          while (1)
          {
            while (1)
            {
              unint64_t v48 = (uint64_t **)v46;
              int v49 = *((_DWORD *)v46 + 7);
              if (v38 >= v49) {
                break;
              }
              int64_t v46 = *v48;
              uint64_t v47 = v48;
              if (!*v48) {
                goto LABEL_43;
              }
            }
            if (v49 >= v38) {
              break;
            }
            int64_t v46 = v48[1];
            if (!v46)
            {
              uint64_t v47 = v48 + 1;
              goto LABEL_43;
            }
          }
        }
        else
        {
LABEL_43:
          unint64_t v50 = (uint64_t *)v48;
          unint64_t v48 = (uint64_t **)operator new(0x28uLL);
          *((_DWORD *)v48 + 7) = v38;
          *((_DWORD *)v48 + 8) = 0;
          *unint64_t v48 = 0;
          v48[1] = 0;
          v48[2] = v50;
          __int32 *v47 = (uint64_t *)v48;
          uint64_t v51 = **(void **)a3;
          uint64_t v52 = (uint64_t *)v48;
          if (v51)
          {
            *(void *)a3 = v51;
            uint64_t v52 = *v47;
          }
          sub_19E13C8A0(*(uint64_t **)(a3 + 8), v52);
          ++*(void *)(a3 + 16);
        }
        *((_DWORD *)v48 + 8) = v36;
        uint64_t v7 = v88;
      }
    }
  }
  int v53 = (uint64_t **)(a4 + 8);
  sub_19E13C56C(a4, *(void **)(a4 + 8));
  *(void *)a4 = a4 + 8;
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 8) = 0;
  unint64_t v54 = (uint64_t **)(a5 + 8);
  sub_19E13C56C(a5, *(void **)(a5 + 8));
  *(void *)a5 = a5 + 8;
  *(void *)(a5 + 16) = 0;
  *(void *)(a5 + 8) = 0;
  uint64_t v55 = *(void *)(v7 + 96);
  uint64_t v56 = *(int *)(v55 + 72);
  unint64_t v57 = (int *)(*(void *)v55 + v56);
  if ((unint64_t)v57 <= *(void *)v55 + *(void *)(v55 + 8) - 4)
  {
    int v58 = *v57;
    *(_DWORD *)(v55 + 72) = v56 + 4;
    if (v58 >= 1)
    {
      for (int j = 0; j != v58; ++j)
      {
        unint64_t v60 = *(uint64_t **)(v7 + 96);
        int v61 = *((_DWORD *)v60 + 18);
        uint64_t v62 = *v60;
        unint64_t v63 = (int *)(*v60 + v61);
        unint64_t v64 = *v60 + v60[1] - 4;
        if ((unint64_t)v63 <= v64)
        {
          int v65 = *v63;
          v61 += 4;
          *((_DWORD *)v60 + 18) = v61;
          uint64_t v66 = (int *)(v62 + v61);
          if ((unint64_t)v66 <= v64)
          {
LABEL_52:
            int v67 = *v66;
            *((_DWORD *)v60 + 18) = v61 + 4;
            int v68 = *v53;
            unint64_t v69 = (uint64_t **)(a4 + 8);
            uint64_t v70 = (uint64_t **)(a4 + 8);
            if (*v53) {
              goto LABEL_58;
            }
            goto LABEL_62;
          }
        }
        else
        {
          int v65 = 0;
          uint64_t v66 = (int *)(v62 + v61);
          if ((unint64_t)v66 <= v64) {
            goto LABEL_52;
          }
        }
        int v67 = 0;
        int v68 = *v53;
        unint64_t v69 = (uint64_t **)(a4 + 8);
        uint64_t v70 = (uint64_t **)(a4 + 8);
        if (*v53)
        {
          while (1)
          {
LABEL_58:
            while (1)
            {
              uint64_t v70 = (uint64_t **)v68;
              int v71 = *((_DWORD *)v68 + 7);
              if (v65 >= v71) {
                break;
              }
              int v68 = *v70;
              unint64_t v69 = v70;
              if (!*v70) {
                goto LABEL_62;
              }
            }
            if (v71 >= v65) {
              goto LABEL_65;
            }
            int v68 = v70[1];
            if (!v68)
            {
              unint64_t v69 = v70 + 1;
              break;
            }
          }
        }
LABEL_62:
        int v72 = (uint64_t *)v70;
        uint64_t v70 = (uint64_t **)operator new(0x28uLL);
        *((_DWORD *)v70 + 7) = v65;
        *((_DWORD *)v70 + 8) = 0;
        *uint64_t v70 = 0;
        v70[1] = 0;
        v70[2] = v72;
        char *v69 = (uint64_t *)v70;
        uint64_t v73 = **(void **)a4;
        int v74 = (uint64_t *)v70;
        if (v73)
        {
          *(void *)a4 = v73;
          int v74 = *v69;
        }
        sub_19E13C8A0(*(uint64_t **)(a4 + 8), v74);
        ++*(void *)(a4 + 16);
LABEL_65:
        *((_DWORD *)v70 + 8) = v67;
        uint64_t v75 = *v54;
        unint64_t v76 = (uint64_t **)(a5 + 8);
        int v77 = (uint64_t **)(a5 + 8);
        if (*v54)
        {
          while (1)
          {
            while (1)
            {
              int v77 = (uint64_t **)v75;
              int v78 = *((_DWORD *)v75 + 7);
              if (v67 >= v78) {
                break;
              }
              uint64_t v75 = *v77;
              unint64_t v76 = v77;
              if (!*v77) {
                goto LABEL_72;
              }
            }
            if (v78 >= v67) {
              break;
            }
            uint64_t v75 = v77[1];
            if (!v75)
            {
              unint64_t v76 = v77 + 1;
              goto LABEL_72;
            }
          }
        }
        else
        {
LABEL_72:
          uint64_t v79 = (uint64_t *)v77;
          int v77 = (uint64_t **)operator new(0x28uLL);
          *((_DWORD *)v77 + 7) = v67;
          *((_DWORD *)v77 + 8) = 0;
          *int v77 = 0;
          v77[1] = 0;
          v77[2] = v79;
          *unint64_t v76 = (uint64_t *)v77;
          uint64_t v80 = **(void **)a5;
          uint64_t v81 = (uint64_t *)v77;
          if (v80)
          {
            *(void *)a5 = v80;
            uint64_t v81 = *v76;
          }
          sub_19E13C8A0(*(uint64_t **)(a5 + 8), v81);
          ++*(void *)(a5 + 16);
        }
        *((_DWORD *)v77 + 8) = v65;
        uint64_t v7 = v88;
      }
    }
  }
  uint64_t v82 = *(uint64_t (**)(void))(**(void **)(v7 + 40) + 64);

  return v82();
}

uint64_t sub_19E234004(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *(void *)(a1 + 96);
  uint64_t v9 = a1 + 64;
  uint64_t v10 = *(void *)(a1 + 56);
  uint64_t v11 = *(int *)(v8 + 72);
  unsigned int v12 = (unsigned int *)(*(void *)v8 + v11);
  if ((unint64_t)v12 > *(void *)v8 + *(void *)(v8 + 8) - 4)
  {
    unsigned int v13 = 0;
    goto LABEL_4;
  }
  unsigned int v13 = *v12;
  *(_DWORD *)(v8 + 72) = v11 + 4;
  if (v13 <= 1)
  {
LABEL_4:
    int v14 = *(_DWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 64) = xmmword_19E3513C0;
    *(_DWORD *)(a1 + 80) = v14;
    *(void *)(a1 + 84) = 0x2000000001;
    if (!v13) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  if (v13 - 2 > 3) {
    sub_19E2F6320(38);
  }
  sub_19E232FE8((_DWORD *)(a1 + 64), (uint64_t *)v8, 1);
  if (v13 == 3 || v13 == 5) {
LABEL_5:
  }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v8);
LABEL_6:
  int v15 = *(_DWORD *)(a1 + 88);
  if (v15 != sub_19E2F6300()) {
    sub_19E2F6320(33);
  }
  int v16 = *(_DWORD *)(a1 + 84);
  if ((v16 & 0xFFFFFFFE) != 2) {
    sub_19E2F6320(34);
  }
  if (v16 != 3) {
    sub_19E2F6320(35);
  }
  uint64_t v17 = *(uint64_t **)(a1 + 96);
  uint64_t v18 = *v17;
  uint64_t v19 = v17[1];
  int v20 = (_DWORD *)(*v17 + *((int *)v17 + 18));
  if ((unint64_t)v20 > *v17 + v19 - 4)
  {
    *(_DWORD *)a1 = 0;
    int v21 = (_DWORD *)(v18 + *((int *)v17 + 18));
    if ((unint64_t)v21 <= v18 + v19 - 4) {
      goto LABEL_11;
    }
LABEL_14:
    *(_DWORD *)(a1 + 4) = 0;
    int v23 = (_DWORD *)(v18 + *((int *)v17 + 18));
    uint64_t v74 = v9;
    if ((unint64_t)v23 <= v18 + v19 - 4) {
      goto LABEL_12;
    }
LABEL_15:
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_16;
  }
  *(_DWORD *)a1 = *v20;
  int v24 = *((_DWORD *)v17 + 18) + 4;
  *((_DWORD *)v17 + 18) = v24;
  uint64_t v18 = *v17;
  uint64_t v19 = v17[1];
  int v21 = (_DWORD *)(*v17 + v24);
  if ((unint64_t)v21 > *v17 + v19 - 4) {
    goto LABEL_14;
  }
LABEL_11:
  *(_DWORD *)(a1 + 4) = *v21;
  int v22 = *((_DWORD *)v17 + 18) + 4;
  *((_DWORD *)v17 + 18) = v22;
  int v23 = (_DWORD *)(*v17 + v22);
  uint64_t v74 = v9;
  if ((unint64_t)v23 > *v17 + v17[1] - 4) {
    goto LABEL_15;
  }
LABEL_12:
  *(_DWORD *)(a1 + 8) = *v23;
  *((_DWORD *)v17 + 18) += 4;
LABEL_16:
  sub_19E15A064(a2, *(char **)(a2 + 8));
  *(void *)a2 = a2 + 8;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  unint64_t v25 = (uint64_t **)(a3 + 8);
  sub_19E230B84(a3, *(char **)(a3 + 8));
  *(void *)a3 = a3 + 8;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 8) = 0;
  uint64_t v26 = *(void *)(a1 + 96);
  uint64_t v27 = *(int *)(v26 + 72);
  uint64_t v28 = (int *)(*(void *)v26 + v27);
  if ((unint64_t)v28 <= *(void *)v26 + *(void *)(v26 + 8) - 4)
  {
    int v29 = *v28;
    *(_DWORD *)(v26 + 72) = v27 + 4;
    if (v29 >= 1)
    {
      int v30 = v29;
      for (int i = 0; i != v30; ++i)
      {
        memset(&__str, 0, sizeof(__str));
        sub_19E1654F4(*(void *)(a1 + 96), &__str);
        uint64_t v32 = *(void *)(a1 + 96);
        uint64_t v33 = *(int *)(v32 + 72);
        uint64_t v34 = (int *)(*(void *)v32 + v33);
        if ((unint64_t)v34 <= *(void *)v32 + *(void *)(v32 + 8) - 4)
        {
          int v35 = *v34;
          *(_DWORD *)(v32 + 72) = v33 + 4;
        }
        else
        {
          int v35 = 0;
        }
        p_str = &__str;
        *((_DWORD *)sub_19E23466C((uint64_t **)a2, (const void **)&__str.__r_.__value_.__l.__data_, (uint64_t)&unk_19E351150, (long long **)&p_str)+ 14) = v35;
        int v36 = *v25;
        char v37 = (uint64_t **)(a3 + 8);
        int v38 = (uint64_t **)(a3 + 8);
        if (*v25)
        {
          while (1)
          {
            while (1)
            {
              int v38 = (uint64_t **)v36;
              int v39 = *((_DWORD *)v36 + 8);
              if (v35 >= v39) {
                break;
              }
              int v36 = *v38;
              char v37 = v38;
              if (!*v38) {
                goto LABEL_30;
              }
            }
            if (v39 >= v35) {
              break;
            }
            int v36 = v38[1];
            if (!v36)
            {
              char v37 = v38 + 1;
              goto LABEL_30;
            }
          }
          uint64_t v40 = (char *)v38;
        }
        else
        {
LABEL_30:
          uint64_t v40 = (char *)operator new(0x40uLL);
          *((_DWORD *)v40 + 8) = v35;
          *((void *)v40 + 6) = 0;
          *((void *)v40 + 7) = 0;
          *((void *)v40 + 5) = 0;
          *(void *)uint64_t v40 = 0;
          *((void *)v40 + 1) = 0;
          *((void *)v40 + 2) = v38;
          *char v37 = (uint64_t *)v40;
          uint64_t v41 = **(void **)a3;
          int v42 = (uint64_t *)v40;
          if (v41)
          {
            *(void *)a3 = v41;
            int v42 = *v37;
          }
          sub_19E13C8A0(*(uint64_t **)(a3 + 8), v42);
          ++*(void *)(a3 + 16);
        }
        std::string::operator=((std::string *)(v40 + 40), &__str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  float v43 = (uint64_t **)(a4 + 8);
  sub_19E13C56C(a4, *(void **)(a4 + 8));
  *(void *)a4 = a4 + 8;
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 8) = 0;
  uint64_t v44 = (uint64_t **)(a5 + 8);
  sub_19E13C56C(a5, *(void **)(a5 + 8));
  *(void *)a5 = a5 + 8;
  *(void *)(a5 + 16) = 0;
  *(void *)(a5 + 8) = 0;
  uint64_t v45 = *(void *)(a1 + 96);
  uint64_t v46 = *(int *)(v45 + 72);
  uint64_t v47 = (int *)(*(void *)v45 + v46);
  if ((unint64_t)v47 <= *(void *)v45 + *(void *)(v45 + 8) - 4)
  {
    int v48 = *v47;
    *(_DWORD *)(v45 + 72) = v46 + 4;
    int v77 = v48;
    if (v48 >= 1)
    {
      int v49 = 0;
      while (1)
      {
        unint64_t v50 = *(uint64_t **)(a1 + 96);
        int v51 = *((_DWORD *)v50 + 18);
        uint64_t v52 = *v50;
        int v53 = (int *)(*v50 + v51);
        unint64_t v54 = *v50 + v50[1] - 4;
        if ((unint64_t)v53 <= v54)
        {
          int v55 = *v53;
          v51 += 4;
          *((_DWORD *)v50 + 18) = v51;
          uint64_t v56 = (int *)(v52 + v51);
          if ((unint64_t)v56 <= v54)
          {
LABEL_43:
            int v57 = *v56;
            *((_DWORD *)v50 + 18) = v51 + 4;
            int v58 = *v43;
            uint64_t v59 = (uint64_t **)(a4 + 8);
            unint64_t v60 = (uint64_t **)(a4 + 8);
            if (*v43) {
              goto LABEL_49;
            }
            goto LABEL_53;
          }
        }
        else
        {
          int v55 = 0;
          uint64_t v56 = (int *)(v52 + v51);
          if ((unint64_t)v56 <= v54) {
            goto LABEL_43;
          }
        }
        int v57 = 0;
        int v58 = *v43;
        uint64_t v59 = (uint64_t **)(a4 + 8);
        unint64_t v60 = (uint64_t **)(a4 + 8);
        if (*v43)
        {
          while (1)
          {
LABEL_49:
            while (1)
            {
              unint64_t v60 = (uint64_t **)v58;
              int v61 = *((_DWORD *)v58 + 7);
              if (v55 >= v61) {
                break;
              }
              int v58 = *v60;
              uint64_t v59 = v60;
              if (!*v60) {
                goto LABEL_53;
              }
            }
            if (v61 >= v55) {
              goto LABEL_56;
            }
            int v58 = v60[1];
            if (!v58)
            {
              uint64_t v59 = v60 + 1;
              break;
            }
          }
        }
LABEL_53:
        uint64_t v62 = (uint64_t *)v60;
        unint64_t v60 = (uint64_t **)operator new(0x28uLL);
        *((_DWORD *)v60 + 7) = v55;
        *((_DWORD *)v60 + 8) = 0;
        *unint64_t v60 = 0;
        v60[1] = 0;
        v60[2] = v62;
        *uint64_t v59 = (uint64_t *)v60;
        uint64_t v63 = **(void **)a4;
        unint64_t v64 = (uint64_t *)v60;
        if (v63)
        {
          *(void *)a4 = v63;
          unint64_t v64 = *v59;
        }
        sub_19E13C8A0(*(uint64_t **)(a4 + 8), v64);
        ++*(void *)(a4 + 16);
LABEL_56:
        *((_DWORD *)v60 + 8) = v57;
        int v65 = *v44;
        uint64_t v66 = (uint64_t **)(a5 + 8);
        int v67 = (uint64_t **)(a5 + 8);
        if (*v44)
        {
          while (1)
          {
            while (1)
            {
              int v67 = (uint64_t **)v65;
              int v68 = *((_DWORD *)v65 + 7);
              if (v57 >= v68) {
                break;
              }
              int v65 = *v67;
              uint64_t v66 = v67;
              if (!*v67) {
                goto LABEL_63;
              }
            }
            if (v68 >= v57) {
              break;
            }
            int v65 = v67[1];
            if (!v65)
            {
              uint64_t v66 = v67 + 1;
              goto LABEL_63;
            }
          }
        }
        else
        {
LABEL_63:
          unint64_t v69 = (uint64_t *)v67;
          int v67 = (uint64_t **)operator new(0x28uLL);
          *((_DWORD *)v67 + 7) = v57;
          *((_DWORD *)v67 + 8) = 0;
          *int v67 = 0;
          v67[1] = 0;
          v67[2] = v69;
          *uint64_t v66 = (uint64_t *)v67;
          uint64_t v70 = **(void **)a5;
          int v71 = (uint64_t *)v67;
          if (v70)
          {
            *(void *)a5 = v70;
            int v71 = *v66;
          }
          sub_19E13C8A0(*(uint64_t **)(a5 + 8), v71);
          ++*(void *)(a5 + 16);
        }
        *((_DWORD *)v67 + 8) = v55;
        if (++v49 == v77)
        {
          uint64_t v45 = *(void *)(a1 + 96);
          return (*(uint64_t (**)(void, uint64_t, uint64_t, void))(**(void **)(a1 + 40) + 64))(*(void *)(a1 + 40), v45, v74, *(unsigned int *)(a1 + 72));
        }
      }
    }
  }
  return (*(uint64_t (**)(void, uint64_t, uint64_t, void))(**(void **)(a1 + 40) + 64))(*(void *)(a1 + 40), v45, v74, *(unsigned int *)(a1 + 72));
}

void sub_19E234650(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **sub_19E23466C(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v7 = a1 + 1;
  size_t v6 = a1[1];
  if (v6)
  {
    int v8 = *((char *)a2 + 23);
    if (v8 >= 0) {
      size_t v9 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v9 = (size_t)a2[1];
    }
    if (v8 >= 0) {
      uint64_t v10 = a2;
    }
    else {
      uint64_t v10 = *a2;
    }
    while (1)
    {
      while (1)
      {
        uint64_t v11 = (uint64_t **)v6;
        int v14 = (const void *)v6[4];
        unsigned int v12 = v6 + 4;
        unsigned int v13 = v14;
        int v15 = *((char *)v12 + 23);
        if (v15 >= 0) {
          size_t v16 = *((unsigned __int8 *)v12 + 23);
        }
        else {
          size_t v16 = v12[1];
        }
        if (v15 >= 0) {
          uint64_t v17 = v12;
        }
        else {
          uint64_t v17 = v13;
        }
        if (v16 >= v9) {
          size_t v18 = v9;
        }
        else {
          size_t v18 = v16;
        }
        int v19 = memcmp(v10, v17, v18);
        BOOL v20 = v9 < v16;
        if (v19) {
          BOOL v20 = v19 < 0;
        }
        if (!v20) {
          break;
        }
        size_t v6 = *v11;
        uint64_t v7 = v11;
        if (!*v11) {
          goto LABEL_27;
        }
      }
      int v21 = memcmp(v17, v10, v18);
      BOOL v22 = v16 < v9;
      if (v21) {
        BOOL v22 = v21 < 0;
      }
      if (!v22) {
        return v11;
      }
      size_t v6 = v11[1];
      if (!v6)
      {
        uint64_t v7 = v11 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    uint64_t v11 = a1 + 1;
LABEL_27:
    int v23 = (char *)operator new(0x40uLL);
    int v24 = v23 + 32;
    unint64_t v25 = *a4;
    if (*((char *)*a4 + 23) < 0)
    {
      sub_19E13C2D0(v24, *(void **)v25, *((void *)v25 + 1));
    }
    else
    {
      long long v26 = *v25;
      *((void *)v23 + 6) = *((void *)v25 + 2);
      *(_OWORD *)int v24 = v26;
    }
    *((_DWORD *)v23 + 14) = 0;
    *(void *)int v23 = 0;
    *((void *)v23 + 1) = 0;
    *((void *)v23 + 2) = v11;
    *uint64_t v7 = (uint64_t *)v23;
    uint64_t v27 = (uint64_t *)**a1;
    uint64_t v28 = (uint64_t *)v23;
    if (v27)
    {
      *a1 = v27;
      uint64_t v28 = *v7;
    }
    sub_19E13C8A0(a1[1], v28);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return (uint64_t **)v23;
}

void sub_19E2347F8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19E23480C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *(void *)(a1 + 96);
  uint64_t v9 = a1 + 64;
  uint64_t v10 = *(void *)(a1 + 56);
  uint64_t v11 = *(int *)(v8 + 72);
  unsigned int v12 = (unsigned int *)(*(void *)v8 + v11);
  if ((unint64_t)v12 > *(void *)v8 + *(void *)(v8 + 8) - 4)
  {
    unsigned int v13 = 0;
    goto LABEL_4;
  }
  unsigned int v13 = *v12;
  *(_DWORD *)(v8 + 72) = v11 + 4;
  if (v13 <= 1)
  {
LABEL_4:
    int v14 = *(_DWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 64) = xmmword_19E3513C0;
    *(_DWORD *)(a1 + 80) = v14;
    *(void *)(a1 + 84) = 0x2000000001;
    if (!v13) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  if (v13 - 2 > 3) {
    sub_19E2F6320(38);
  }
  sub_19E232FE8((_DWORD *)(a1 + 64), (uint64_t *)v8, 1);
  if (v13 == 3 || v13 == 5) {
LABEL_5:
  }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v8);
LABEL_6:
  int v15 = *(_DWORD *)(a1 + 88);
  if (v15 != sub_19E2F62F8()) {
    sub_19E2F6320(33);
  }
  int v16 = *(_DWORD *)(a1 + 84);
  if ((v16 & 0xFFFFFFFE) != 2) {
    sub_19E2F6320(34);
  }
  if (v16 != 3) {
    sub_19E2F6320(35);
  }
  uint64_t v17 = *(uint64_t **)(a1 + 96);
  uint64_t v18 = *v17;
  uint64_t v19 = v17[1];
  BOOL v20 = (_DWORD *)(*v17 + *((int *)v17 + 18));
  if ((unint64_t)v20 > *v17 + v19 - 4)
  {
    *(_DWORD *)a1 = 0;
    int v21 = (_DWORD *)(v18 + *((int *)v17 + 18));
    if ((unint64_t)v21 <= v18 + v19 - 4) {
      goto LABEL_11;
    }
LABEL_14:
    *(_DWORD *)(a1 + 4) = 0;
    int v23 = (_DWORD *)(v18 + *((int *)v17 + 18));
    uint64_t v74 = v9;
    if ((unint64_t)v23 <= v18 + v19 - 4) {
      goto LABEL_12;
    }
LABEL_15:
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_16;
  }
  *(_DWORD *)a1 = *v20;
  int v24 = *((_DWORD *)v17 + 18) + 4;
  *((_DWORD *)v17 + 18) = v24;
  uint64_t v18 = *v17;
  uint64_t v19 = v17[1];
  int v21 = (_DWORD *)(*v17 + v24);
  if ((unint64_t)v21 > *v17 + v19 - 4) {
    goto LABEL_14;
  }
LABEL_11:
  *(_DWORD *)(a1 + 4) = *v21;
  int v22 = *((_DWORD *)v17 + 18) + 4;
  *((_DWORD *)v17 + 18) = v22;
  int v23 = (_DWORD *)(*v17 + v22);
  uint64_t v74 = v9;
  if ((unint64_t)v23 > *v17 + v17[1] - 4) {
    goto LABEL_15;
  }
LABEL_12:
  *(_DWORD *)(a1 + 8) = *v23;
  *((_DWORD *)v17 + 18) += 4;
LABEL_16:
  sub_19E15A064(a2, *(char **)(a2 + 8));
  *(void *)a2 = a2 + 8;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  unint64_t v25 = (uint64_t **)(a3 + 8);
  sub_19E230B84(a3, *(char **)(a3 + 8));
  *(void *)a3 = a3 + 8;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 8) = 0;
  uint64_t v26 = *(void *)(a1 + 96);
  uint64_t v27 = *(int *)(v26 + 72);
  uint64_t v28 = (int *)(*(void *)v26 + v27);
  if ((unint64_t)v28 <= *(void *)v26 + *(void *)(v26 + 8) - 4)
  {
    int v29 = *v28;
    *(_DWORD *)(v26 + 72) = v27 + 4;
    if (v29 >= 1)
    {
      int v30 = v29;
      for (int i = 0; i != v30; ++i)
      {
        memset(&__str, 0, sizeof(__str));
        sub_19E1654F4(*(void *)(a1 + 96), &__str);
        uint64_t v32 = *(void *)(a1 + 96);
        uint64_t v33 = *(int *)(v32 + 72);
        uint64_t v34 = (int *)(*(void *)v32 + v33);
        if ((unint64_t)v34 <= *(void *)v32 + *(void *)(v32 + 8) - 4)
        {
          int v35 = *v34;
          *(_DWORD *)(v32 + 72) = v33 + 4;
        }
        else
        {
          int v35 = 0;
        }
        p_str = &__str;
        *((_DWORD *)sub_19E23466C((uint64_t **)a2, (const void **)&__str.__r_.__value_.__l.__data_, (uint64_t)&unk_19E351150, (long long **)&p_str)+ 14) = v35;
        int v36 = *v25;
        char v37 = (uint64_t **)(a3 + 8);
        int v38 = (uint64_t **)(a3 + 8);
        if (*v25)
        {
          while (1)
          {
            while (1)
            {
              int v38 = (uint64_t **)v36;
              int v39 = *((_DWORD *)v36 + 8);
              if (v35 >= v39) {
                break;
              }
              int v36 = *v38;
              char v37 = v38;
              if (!*v38) {
                goto LABEL_30;
              }
            }
            if (v39 >= v35) {
              break;
            }
            int v36 = v38[1];
            if (!v36)
            {
              char v37 = v38 + 1;
              goto LABEL_30;
            }
          }
          uint64_t v40 = (char *)v38;
        }
        else
        {
LABEL_30:
          uint64_t v40 = (char *)operator new(0x40uLL);
          *((_DWORD *)v40 + 8) = v35;
          *((void *)v40 + 6) = 0;
          *((void *)v40 + 7) = 0;
          *((void *)v40 + 5) = 0;
          *(void *)uint64_t v40 = 0;
          *((void *)v40 + 1) = 0;
          *((void *)v40 + 2) = v38;
          *char v37 = (uint64_t *)v40;
          uint64_t v41 = **(void **)a3;
          int v42 = (uint64_t *)v40;
          if (v41)
          {
            *(void *)a3 = v41;
            int v42 = *v37;
          }
          sub_19E13C8A0(*(uint64_t **)(a3 + 8), v42);
          ++*(void *)(a3 + 16);
        }
        std::string::operator=((std::string *)(v40 + 40), &__str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  float v43 = (uint64_t **)(a4 + 8);
  sub_19E13C56C(a4, *(void **)(a4 + 8));
  *(void *)a4 = a4 + 8;
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 8) = 0;
  uint64_t v44 = (uint64_t **)(a5 + 8);
  sub_19E13C56C(a5, *(void **)(a5 + 8));
  *(void *)a5 = a5 + 8;
  *(void *)(a5 + 16) = 0;
  *(void *)(a5 + 8) = 0;
  uint64_t v45 = *(void *)(a1 + 96);
  uint64_t v46 = *(int *)(v45 + 72);
  uint64_t v47 = (int *)(*(void *)v45 + v46);
  if ((unint64_t)v47 <= *(void *)v45 + *(void *)(v45 + 8) - 4)
  {
    int v48 = *v47;
    *(_DWORD *)(v45 + 72) = v46 + 4;
    int v77 = v48;
    if (v48 >= 1)
    {
      int v49 = 0;
      while (1)
      {
        unint64_t v50 = *(uint64_t **)(a1 + 96);
        int v51 = *((_DWORD *)v50 + 18);
        uint64_t v52 = *v50;
        int v53 = (int *)(*v50 + v51);
        unint64_t v54 = *v50 + v50[1] - 4;
        if ((unint64_t)v53 <= v54)
        {
          int v55 = *v53;
          v51 += 4;
          *((_DWORD *)v50 + 18) = v51;
          uint64_t v56 = (int *)(v52 + v51);
          if ((unint64_t)v56 <= v54)
          {
LABEL_43:
            int v57 = *v56;
            *((_DWORD *)v50 + 18) = v51 + 4;
            int v58 = *v43;
            uint64_t v59 = (uint64_t **)(a4 + 8);
            unint64_t v60 = (uint64_t **)(a4 + 8);
            if (*v43) {
              goto LABEL_49;
            }
            goto LABEL_53;
          }
        }
        else
        {
          int v55 = 0;
          uint64_t v56 = (int *)(v52 + v51);
          if ((unint64_t)v56 <= v54) {
            goto LABEL_43;
          }
        }
        int v57 = 0;
        int v58 = *v43;
        uint64_t v59 = (uint64_t **)(a4 + 8);
        unint64_t v60 = (uint64_t **)(a4 + 8);
        if (*v43)
        {
          while (1)
          {
LABEL_49:
            while (1)
            {
              unint64_t v60 = (uint64_t **)v58;
              int v61 = *((_DWORD *)v58 + 7);
              if (v55 >= v61) {
                break;
              }
              int v58 = *v60;
              uint64_t v59 = v60;
              if (!*v60) {
                goto LABEL_53;
              }
            }
            if (v61 >= v55) {
              goto LABEL_56;
            }
            int v58 = v60[1];
            if (!v58)
            {
              uint64_t v59 = v60 + 1;
              break;
            }
          }
        }
LABEL_53:
        uint64_t v62 = (uint64_t *)v60;
        unint64_t v60 = (uint64_t **)operator new(0x28uLL);
        *((_DWORD *)v60 + 7) = v55;
        *((_DWORD *)v60 + 8) = 0;
        *unint64_t v60 = 0;
        v60[1] = 0;
        v60[2] = v62;
        *uint64_t v59 = (uint64_t *)v60;
        uint64_t v63 = **(void **)a4;
        unint64_t v64 = (uint64_t *)v60;
        if (v63)
        {
          *(void *)a4 = v63;
          unint64_t v64 = *v59;
        }
        sub_19E13C8A0(*(uint64_t **)(a4 + 8), v64);
        ++*(void *)(a4 + 16);
LABEL_56:
        *((_DWORD *)v60 + 8) = v57;
        int v65 = *v44;
        uint64_t v66 = (uint64_t **)(a5 + 8);
        int v67 = (uint64_t **)(a5 + 8);
        if (*v44)
        {
          while (1)
          {
            while (1)
            {
              int v67 = (uint64_t **)v65;
              int v68 = *((_DWORD *)v65 + 7);
              if (v57 >= v68) {
                break;
              }
              int v65 = *v67;
              uint64_t v66 = v67;
              if (!*v67) {
                goto LABEL_63;
              }
            }
            if (v68 >= v57) {
              break;
            }
            int v65 = v67[1];
            if (!v65)
            {
              uint64_t v66 = v67 + 1;
              goto LABEL_63;
            }
          }
        }
        else
        {
LABEL_63:
          unint64_t v69 = (uint64_t *)v67;
          int v67 = (uint64_t **)operator new(0x28uLL);
          *((_DWORD *)v67 + 7) = v57;
          *((_DWORD *)v67 + 8) = 0;
          *int v67 = 0;
          v67[1] = 0;
          v67[2] = v69;
          *uint64_t v66 = (uint64_t *)v67;
          uint64_t v70 = **(void **)a5;
          int v71 = (uint64_t *)v67;
          if (v70)
          {
            *(void *)a5 = v70;
            int v71 = *v66;
          }
          sub_19E13C8A0(*(uint64_t **)(a5 + 8), v71);
          ++*(void *)(a5 + 16);
        }
        *((_DWORD *)v67 + 8) = v55;
        if (++v49 == v77)
        {
          uint64_t v45 = *(void *)(a1 + 96);
          return (*(uint64_t (**)(void, uint64_t, uint64_t, void))(**(void **)(a1 + 40) + 64))(*(void *)(a1 + 40), v45, v74, *(unsigned int *)(a1 + 72));
        }
      }
    }
  }
  return (*(uint64_t (**)(void, uint64_t, uint64_t, void))(**(void **)(a1 + 40) + 64))(*(void *)(a1 + 40), v45, v74, *(unsigned int *)(a1 + 72));
}

void sub_19E234E58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E234E74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *(void *)(a1 + 96);
  uint64_t v9 = a1 + 64;
  uint64_t v10 = *(void *)(a1 + 56);
  uint64_t v11 = *(int *)(v8 + 72);
  unsigned int v12 = (unsigned int *)(*(void *)v8 + v11);
  if ((unint64_t)v12 > *(void *)v8 + *(void *)(v8 + 8) - 4)
  {
    unsigned int v13 = 0;
    goto LABEL_4;
  }
  unsigned int v13 = *v12;
  *(_DWORD *)(v8 + 72) = v11 + 4;
  if (v13 <= 1)
  {
LABEL_4:
    int v14 = *(_DWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 64) = xmmword_19E3513C0;
    *(_DWORD *)(a1 + 80) = v14;
    *(void *)(a1 + 84) = 0x2000000001;
    if (!v13) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  if (v13 - 2 > 3) {
    sub_19E2F6320(38);
  }
  sub_19E232FE8((_DWORD *)(a1 + 64), (uint64_t *)v8, 1);
  if (v13 == 3 || v13 == 5) {
LABEL_5:
  }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v8);
LABEL_6:
  int v15 = *(_DWORD *)(a1 + 88);
  if (v15 != sub_19E2F62F0()) {
    sub_19E2F6320(33);
  }
  int v16 = *(_DWORD *)(a1 + 84);
  if ((v16 & 0xFFFFFFFE) != 2) {
    sub_19E2F6320(34);
  }
  if (v16 != 3) {
    sub_19E2F6320(35);
  }
  uint64_t v17 = *(uint64_t **)(a1 + 96);
  uint64_t v18 = *v17;
  uint64_t v19 = v17[1];
  BOOL v20 = (_DWORD *)(*v17 + *((int *)v17 + 18));
  if ((unint64_t)v20 > *v17 + v19 - 4)
  {
    *(_DWORD *)a1 = 0;
    int v21 = (_DWORD *)(v18 + *((int *)v17 + 18));
    if ((unint64_t)v21 <= v18 + v19 - 4) {
      goto LABEL_11;
    }
LABEL_14:
    *(_DWORD *)(a1 + 4) = 0;
    int v23 = (_DWORD *)(v18 + *((int *)v17 + 18));
    uint64_t v74 = v9;
    if ((unint64_t)v23 <= v18 + v19 - 4) {
      goto LABEL_12;
    }
LABEL_15:
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_16;
  }
  *(_DWORD *)a1 = *v20;
  int v24 = *((_DWORD *)v17 + 18) + 4;
  *((_DWORD *)v17 + 18) = v24;
  uint64_t v18 = *v17;
  uint64_t v19 = v17[1];
  int v21 = (_DWORD *)(*v17 + v24);
  if ((unint64_t)v21 > *v17 + v19 - 4) {
    goto LABEL_14;
  }
LABEL_11:
  *(_DWORD *)(a1 + 4) = *v21;
  int v22 = *((_DWORD *)v17 + 18) + 4;
  *((_DWORD *)v17 + 18) = v22;
  int v23 = (_DWORD *)(*v17 + v22);
  uint64_t v74 = v9;
  if ((unint64_t)v23 > *v17 + v17[1] - 4) {
    goto LABEL_15;
  }
LABEL_12:
  *(_DWORD *)(a1 + 8) = *v23;
  *((_DWORD *)v17 + 18) += 4;
LABEL_16:
  sub_19E15A064(a2, *(char **)(a2 + 8));
  *(void *)a2 = a2 + 8;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  unint64_t v25 = (uint64_t **)(a3 + 8);
  sub_19E230B84(a3, *(char **)(a3 + 8));
  *(void *)a3 = a3 + 8;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 8) = 0;
  uint64_t v26 = *(void *)(a1 + 96);
  uint64_t v27 = *(int *)(v26 + 72);
  uint64_t v28 = (int *)(*(void *)v26 + v27);
  if ((unint64_t)v28 <= *(void *)v26 + *(void *)(v26 + 8) - 4)
  {
    int v29 = *v28;
    *(_DWORD *)(v26 + 72) = v27 + 4;
    if (v29 >= 1)
    {
      int v30 = v29;
      for (int i = 0; i != v30; ++i)
      {
        memset(&__str, 0, sizeof(__str));
        sub_19E1654F4(*(void *)(a1 + 96), &__str);
        uint64_t v32 = *(void *)(a1 + 96);
        uint64_t v33 = *(int *)(v32 + 72);
        uint64_t v34 = (int *)(*(void *)v32 + v33);
        if ((unint64_t)v34 <= *(void *)v32 + *(void *)(v32 + 8) - 4)
        {
          int v35 = *v34;
          *(_DWORD *)(v32 + 72) = v33 + 4;
        }
        else
        {
          int v35 = 0;
        }
        p_str = &__str;
        *((_DWORD *)sub_19E23466C((uint64_t **)a2, (const void **)&__str.__r_.__value_.__l.__data_, (uint64_t)&unk_19E351150, (long long **)&p_str)+ 14) = v35;
        int v36 = *v25;
        char v37 = (uint64_t **)(a3 + 8);
        int v38 = (uint64_t **)(a3 + 8);
        if (*v25)
        {
          while (1)
          {
            while (1)
            {
              int v38 = (uint64_t **)v36;
              int v39 = *((_DWORD *)v36 + 8);
              if (v35 >= v39) {
                break;
              }
              int v36 = *v38;
              char v37 = v38;
              if (!*v38) {
                goto LABEL_30;
              }
            }
            if (v39 >= v35) {
              break;
            }
            int v36 = v38[1];
            if (!v36)
            {
              char v37 = v38 + 1;
              goto LABEL_30;
            }
          }
          uint64_t v40 = (char *)v38;
        }
        else
        {
LABEL_30:
          uint64_t v40 = (char *)operator new(0x40uLL);
          *((_DWORD *)v40 + 8) = v35;
          *((void *)v40 + 6) = 0;
          *((void *)v40 + 7) = 0;
          *((void *)v40 + 5) = 0;
          *(void *)uint64_t v40 = 0;
          *((void *)v40 + 1) = 0;
          *((void *)v40 + 2) = v38;
          *char v37 = (uint64_t *)v40;
          uint64_t v41 = **(void **)a3;
          int v42 = (uint64_t *)v40;
          if (v41)
          {
            *(void *)a3 = v41;
            int v42 = *v37;
          }
          sub_19E13C8A0(*(uint64_t **)(a3 + 8), v42);
          ++*(void *)(a3 + 16);
        }
        std::string::operator=((std::string *)(v40 + 40), &__str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  float v43 = (uint64_t **)(a4 + 8);
  sub_19E13C56C(a4, *(void **)(a4 + 8));
  *(void *)a4 = a4 + 8;
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 8) = 0;
  uint64_t v44 = (uint64_t **)(a5 + 8);
  sub_19E13C56C(a5, *(void **)(a5 + 8));
  *(void *)a5 = a5 + 8;
  *(void *)(a5 + 16) = 0;
  *(void *)(a5 + 8) = 0;
  uint64_t v45 = *(void *)(a1 + 96);
  uint64_t v46 = *(int *)(v45 + 72);
  uint64_t v47 = (int *)(*(void *)v45 + v46);
  if ((unint64_t)v47 <= *(void *)v45 + *(void *)(v45 + 8) - 4)
  {
    int v48 = *v47;
    *(_DWORD *)(v45 + 72) = v46 + 4;
    int v77 = v48;
    if (v48 >= 1)
    {
      int v49 = 0;
      while (1)
      {
        unint64_t v50 = *(uint64_t **)(a1 + 96);
        int v51 = *((_DWORD *)v50 + 18);
        uint64_t v52 = *v50;
        int v53 = (int *)(*v50 + v51);
        unint64_t v54 = *v50 + v50[1] - 4;
        if ((unint64_t)v53 <= v54)
        {
          int v55 = *v53;
          v51 += 4;
          *((_DWORD *)v50 + 18) = v51;
          uint64_t v56 = (int *)(v52 + v51);
          if ((unint64_t)v56 <= v54)
          {
LABEL_43:
            int v57 = *v56;
            *((_DWORD *)v50 + 18) = v51 + 4;
            int v58 = *v43;
            uint64_t v59 = (uint64_t **)(a4 + 8);
            unint64_t v60 = (uint64_t **)(a4 + 8);
            if (*v43) {
              goto LABEL_49;
            }
            goto LABEL_53;
          }
        }
        else
        {
          int v55 = 0;
          uint64_t v56 = (int *)(v52 + v51);
          if ((unint64_t)v56 <= v54) {
            goto LABEL_43;
          }
        }
        int v57 = 0;
        int v58 = *v43;
        uint64_t v59 = (uint64_t **)(a4 + 8);
        unint64_t v60 = (uint64_t **)(a4 + 8);
        if (*v43)
        {
          while (1)
          {
LABEL_49:
            while (1)
            {
              unint64_t v60 = (uint64_t **)v58;
              int v61 = *((_DWORD *)v58 + 7);
              if (v55 >= v61) {
                break;
              }
              int v58 = *v60;
              uint64_t v59 = v60;
              if (!*v60) {
                goto LABEL_53;
              }
            }
            if (v61 >= v55) {
              goto LABEL_56;
            }
            int v58 = v60[1];
            if (!v58)
            {
              uint64_t v59 = v60 + 1;
              break;
            }
          }
        }
LABEL_53:
        uint64_t v62 = (uint64_t *)v60;
        unint64_t v60 = (uint64_t **)operator new(0x28uLL);
        *((_DWORD *)v60 + 7) = v55;
        *((_DWORD *)v60 + 8) = 0;
        *unint64_t v60 = 0;
        v60[1] = 0;
        v60[2] = v62;
        *uint64_t v59 = (uint64_t *)v60;
        uint64_t v63 = **(void **)a4;
        unint64_t v64 = (uint64_t *)v60;
        if (v63)
        {
          *(void *)a4 = v63;
          unint64_t v64 = *v59;
        }
        sub_19E13C8A0(*(uint64_t **)(a4 + 8), v64);
        ++*(void *)(a4 + 16);
LABEL_56:
        *((_DWORD *)v60 + 8) = v57;
        int v65 = *v44;
        uint64_t v66 = (uint64_t **)(a5 + 8);
        int v67 = (uint64_t **)(a5 + 8);
        if (*v44)
        {
          while (1)
          {
            while (1)
            {
              int v67 = (uint64_t **)v65;
              int v68 = *((_DWORD *)v65 + 7);
              if (v57 >= v68) {
                break;
              }
              int v65 = *v67;
              uint64_t v66 = v67;
              if (!*v67) {
                goto LABEL_63;
              }
            }
            if (v68 >= v57) {
              break;
            }
            int v65 = v67[1];
            if (!v65)
            {
              uint64_t v66 = v67 + 1;
              goto LABEL_63;
            }
          }
        }
        else
        {
LABEL_63:
          unint64_t v69 = (uint64_t *)v67;
          int v67 = (uint64_t **)operator new(0x28uLL);
          *((_DWORD *)v67 + 7) = v57;
          *((_DWORD *)v67 + 8) = 0;
          *int v67 = 0;
          v67[1] = 0;
          v67[2] = v69;
          *uint64_t v66 = (uint64_t *)v67;
          uint64_t v70 = **(void **)a5;
          int v71 = (uint64_t *)v67;
          if (v70)
          {
            *(void *)a5 = v70;
            int v71 = *v66;
          }
          sub_19E13C8A0(*(uint64_t **)(a5 + 8), v71);
          ++*(void *)(a5 + 16);
        }
        *((_DWORD *)v67 + 8) = v55;
        if (++v49 == v77)
        {
          uint64_t v45 = *(void *)(a1 + 96);
          return (*(uint64_t (**)(void, uint64_t, uint64_t, void))(**(void **)(a1 + 40) + 64))(*(void *)(a1 + 40), v45, v74, *(unsigned int *)(a1 + 72));
        }
      }
    }
  }
  return (*(uint64_t (**)(void, uint64_t, uint64_t, void))(**(void **)(a1 + 40) + 64))(*(void *)(a1 + 40), v45, v74, *(unsigned int *)(a1 + 72));
}

void sub_19E2354C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_19E2354DC(uint64_t a1, int *a2, _DWORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == v6)
            {
              if (*((_DWORD *)v10 + 4) == v6) {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            uint64_t v10 = (uint64_t *)*v10;
            if (!v10) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  int v14 = operator new(0x18uLL);
  *int v14 = 0;
  v14[1] = v6;
  *((_DWORD *)v14 + 4) = *a3;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    uint64_t v17 = *(void *)a1;
    uint64_t v18 = *(void **)(*(void *)a1 + 8 * v3);
    if (v18)
    {
LABEL_26:
      *int v14 = *v18;
LABEL_61:
      *uint64_t v18 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v19 = 1;
    if (v7 >= 3) {
      BOOL v19 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v7);
    unint64_t v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21) {
      size_t prime = v21;
    }
    else {
      size_t prime = v20;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *(void *)(a1 + 8);
    }
    if (prime > v7) {
      goto LABEL_37;
    }
    if (prime < v7)
    {
      unint64_t v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (uint8x8_t v24 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        unint64_t v23 = std::__next_prime(v23);
      }
      else
      {
        uint64_t v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2) {
          unint64_t v23 = v25;
        }
      }
      if (prime <= v23) {
        size_t prime = v23;
      }
      if (prime < v7) {
LABEL_37:
      }
        sub_19E13D39C(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    unint64_t v26 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
      {
        unint64_t v3 = v6 % v7;
        uint64_t v17 = *(void *)a1;
        uint64_t v18 = *(void **)(*(void *)a1 + 8 * (v6 % v7));
        if (v18) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v3 = v6;
        uint64_t v17 = *(void *)a1;
        uint64_t v18 = *(void **)(*(void *)a1 + 8 * v6);
        if (v18) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v3 = v26 & v6;
      uint64_t v17 = *(void *)a1;
      uint64_t v18 = *(void **)(*(void *)a1 + 8 * (v26 & v6));
      if (v18) {
        goto LABEL_26;
      }
    }
  }
  *int v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v17 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    unint64_t v27 = *(void *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v27 >= v7) {
        v27 %= v7;
      }
    }
    else
    {
      v27 &= v7 - 1;
    }
    uint64_t v18 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_19E2357EC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_19E235800(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  unint64_t v6 = sub_19E159C68(a1, a2, &v15, &v14, a3);
  if (*v6) {
    return (char *)*v6;
  }
  uint8x8_t v8 = v6;
  uint64_t v9 = (char *)operator new(0x40uLL);
  uint64_t v10 = v9 + 32;
  if (*(char *)(a4 + 23) < 0)
  {
    sub_19E13C2D0(v10, *(void **)a4, *(void *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v10 = *(_OWORD *)a4;
    *((void *)v9 + 6) = *(void *)(a4 + 16);
  }
  *((_DWORD *)v9 + 14) = *(_DWORD *)(a4 + 24);
  unint64_t v11 = v15;
  *(void *)uint64_t v9 = 0;
  *((void *)v9 + 1) = 0;
  *((void *)v9 + 2) = v11;
  uint64_t *v8 = (uint64_t)v9;
  uint64_t v12 = (uint64_t *)**a1;
  unsigned int v13 = (uint64_t *)v9;
  if (v12)
  {
    *a1 = v12;
    unsigned int v13 = (uint64_t *)*v8;
  }
  sub_19E13C8A0(a1[1], v13);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v9;
}

void sub_19E2358EC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E235900(uint64_t a1)
{
  uint64_t v1 = *(unsigned char **)(a1 + 8);
  uint64_t v2 = *(unsigned char **)a1;
  uint64_t v3 = (uint64_t)&v1[-*(void *)a1];
  uint64_t v4 = v3 >> 2;
  if (v3 >> 2 >= (unint64_t)((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 2)) {
    return;
  }
  int64_t v6 = v1 - v2;
  if (v1 == v2)
  {
    uint64_t v8 = 4 * v4;
    uint64_t v9 = 4 * v4;
    goto LABEL_12;
  }
  if (v3 < 0) {
    sub_19E13C418();
  }
  unint64_t v7 = (char *)operator new((size_t)&v1[-*(void *)a1]);
  uint64_t v8 = (uint64_t)&v7[4 * v4];
  if ((unint64_t)(v6 - 4) < 0x2C)
  {
    uint64_t v9 = (uint64_t)&v7[4 * v4];
    do
    {
LABEL_11:
      int v17 = *((_DWORD *)v1 - 1);
      v1 -= 4;
      *(_DWORD *)(v9 - 4) = v17;
      v9 -= 4;
    }
    while (v1 != v2);
    goto LABEL_12;
  }
  uint64_t v9 = (uint64_t)&v7[4 * v4];
  if ((unint64_t)(&v1[-v3] - v7) < 0x20) {
    goto LABEL_11;
  }
  unint64_t v10 = ((unint64_t)(v6 - 4) >> 2) + 1;
  uint64_t v11 = 4 * (v10 & 0x7FFFFFFFFFFFFFF8);
  uint64_t v12 = &v1[-v11];
  uint64_t v9 = v8 - v11;
  unsigned int v13 = &v7[4 * v4 - 16];
  int v14 = (long long *)(v1 - 16);
  uint64_t v15 = v10 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    long long v16 = *v14;
    *((_OWORD *)v13 - 1) = *(v14 - 1);
    *(_OWORD *)unsigned int v13 = v16;
    v13 -= 32;
    v14 -= 2;
    v15 -= 8;
  }
  while (v15);
  uint64_t v1 = v12;
  if (v10 != (v10 & 0x7FFFFFFFFFFFFFF8)) {
    goto LABEL_11;
  }
LABEL_12:
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v8;
  if (v2)
  {
    operator delete(v2);
  }
}

float *sub_19E235A3C(float *result, float *a2, float *a3)
{
  while (a3 != a2)
  {
    unint64_t v3 = ((char *)a3 - (char *)result) >> 3;
    if (v3 < 2) {
      return result;
    }
    if (v3 == 3)
    {
      float v49 = result[3];
      float v50 = result[1];
      float v51 = *(a3 - 1);
      if (v49 <= v50)
      {
        if (v51 > v49)
        {
          int v58 = *((_DWORD *)result + 2);
          result[2] = *(a3 - 2);
          *((_DWORD *)a3 - 2) = v58;
          result[3] = v51;
          *(a3 - 1) = v49;
          float v59 = result[3];
          float v60 = result[1];
          if (v59 > v60)
          {
            int v61 = *(_DWORD *)result;
            void *result = result[2];
            *((_DWORD *)result + 2) = v61;
            result[1] = v59;
            result[3] = v60;
          }
        }
      }
      else
      {
        int v52 = *(_DWORD *)result;
        if (v51 <= v49)
        {
          void *result = result[2];
          *((_DWORD *)result + 2) = v52;
          result[1] = v49;
          result[3] = v50;
          float v62 = *(a3 - 1);
          if (v62 > v50)
          {
            result[2] = *(a3 - 2);
            *((_DWORD *)a3 - 2) = v52;
            result[3] = v62;
            *(a3 - 1) = v50;
          }
        }
        else
        {
          void *result = *(a3 - 2);
          *((_DWORD *)a3 - 2) = v52;
          result[1] = v51;
          *(a3 - 1) = v50;
        }
      }
      return result;
    }
    if (v3 == 2)
    {
      float v46 = *(a3 - 1);
      float v47 = result[1];
      if (v46 > v47)
      {
        int v48 = *(_DWORD *)result;
        void *result = *(a3 - 2);
        *((_DWORD *)a3 - 2) = v48;
        result[1] = v46;
        *(a3 - 1) = v47;
      }
      return result;
    }
    if ((char *)a3 - (char *)result <= 63)
    {
      while (result != a3 - 2)
      {
        int v53 = result;
        result += 2;
        if (v53 != a3 && result != a3)
        {
          unint64_t v54 = result;
          int v55 = v53;
          do
          {
            if (v54[1] > v55[1]) {
              int v55 = v54;
            }
            v54 += 2;
          }
          while (v54 != a3);
          if (v55 != v53)
          {
            int v56 = *(_DWORD *)v53;
            *int v53 = *v55;
            *(_DWORD *)int v55 = v56;
            int v57 = *((_DWORD *)v53 + 1);
            v53[1] = v55[1];
            *((_DWORD *)v55 + 1) = v57;
          }
        }
      }
      return result;
    }
    unint64_t v4 = (unint64_t)&result[2 * (v3 >> 1)];
    float v5 = *(float *)(v4 + 4);
    float v6 = result[1];
    float v7 = *(a3 - 1);
    if (v5 <= v6)
    {
      if (v7 <= v5)
      {
        int v9 = 0;
        unint64_t v10 = (unint64_t)(a3 - 2);
        float v11 = result[1];
        float v12 = *(float *)(v4 + 4);
        if (v11 <= v12) {
          goto LABEL_26;
        }
        goto LABEL_9;
      }
      float v21 = *(float *)v4;
      *(float *)unint64_t v4 = *(a3 - 2);
      *(a3 - 2) = v21;
      *(float *)(v4 + 4) = v7;
      *(a3 - 1) = v5;
      float v22 = *(float *)(v4 + 4);
      float v23 = result[1];
      if (v22 > v23)
      {
        int v24 = *(_DWORD *)result;
        void *result = *(float *)v4;
        *(_DWORD *)unint64_t v4 = v24;
        result[1] = v22;
        *(float *)(v4 + 4) = v23;
        goto LABEL_23;
      }
    }
    else
    {
      int v8 = *(_DWORD *)result;
      if (v7 > v5)
      {
        void *result = *(a3 - 2);
        *((_DWORD *)a3 - 2) = v8;
        result[1] = v7;
        *(a3 - 1) = v6;
        int v9 = 1;
        unint64_t v10 = (unint64_t)(a3 - 2);
        float v11 = result[1];
        float v12 = *(float *)(v4 + 4);
        if (v11 <= v12) {
          goto LABEL_26;
        }
        goto LABEL_9;
      }
      void *result = *(float *)v4;
      *(_DWORD *)unint64_t v4 = v8;
      result[1] = v5;
      *(float *)(v4 + 4) = v6;
      float v25 = *(a3 - 1);
      if (v25 > v6)
      {
        *(float *)unint64_t v4 = *(a3 - 2);
        *((_DWORD *)a3 - 2) = v8;
        *(float *)(v4 + 4) = v25;
        *(a3 - 1) = v6;
LABEL_23:
        int v9 = 2;
        unint64_t v10 = (unint64_t)(a3 - 2);
        float v11 = result[1];
        float v12 = *(float *)(v4 + 4);
        if (v11 <= v12) {
          goto LABEL_26;
        }
        goto LABEL_9;
      }
    }
    int v9 = 1;
    unint64_t v10 = (unint64_t)(a3 - 2);
    float v11 = result[1];
    float v12 = *(float *)(v4 + 4);
    if (v11 <= v12)
    {
LABEL_26:
      unint64_t v26 = v10;
      while (1)
      {
        unint64_t v13 = v26 - 8;
        if ((float *)(v26 - 8) == result) {
          break;
        }
        float v27 = *(float *)(v26 - 4);
        v26 -= 8;
        if (v27 > v12)
        {
          int v28 = *(_DWORD *)result;
          void *result = *(float *)v13;
          *(_DWORD *)unint64_t v13 = v28;
          result[1] = v27;
          *(float *)(v13 + 4) = v11;
          ++v9;
          unint64_t v14 = (unint64_t)(result + 2);
          if ((unint64_t)(result + 2) < v13) {
            goto LABEL_10;
          }
          goto LABEL_30;
        }
      }
      int v35 = result + 2;
      float v36 = *(a3 - 1);
      if (v11 <= v36)
      {
        if (v35 == (float *)v10) {
          return result;
        }
        while (1)
        {
          float v37 = v35[1];
          if (v11 > v37) {
            break;
          }
          v35 += 2;
          if (v35 == (float *)v10) {
            return result;
          }
        }
        float v41 = *v35;
        float *v35 = *(a3 - 2);
        *(a3 - 2) = v41;
        v35[1] = v36;
        *(a3 - 1) = v37;
        v35 += 2;
      }
      if (v35 == (float *)v10) {
        return result;
      }
      while (1)
      {
        float v43 = result[1];
        do
        {
          unint64_t v32 = (unint64_t)v35;
          float v44 = v35[1];
          v35 += 2;
        }
        while (v43 <= v44);
        do
        {
          float v45 = *(float *)(v10 - 4);
          v10 -= 8;
        }
        while (v43 > v45);
        if (v32 >= v10) {
          break;
        }
        int v42 = *(_DWORD *)v32;
        *(_DWORD *)unint64_t v32 = *(_DWORD *)v10;
        *(_DWORD *)unint64_t v10 = v42;
        *(float *)(v32 + 4) = v45;
        *(float *)(v10 + 4) = v44;
      }
      if (v32 > (unint64_t)a2) {
        return result;
      }
      goto LABEL_63;
    }
LABEL_9:
    unint64_t v13 = v10;
    unint64_t v14 = (unint64_t)(result + 2);
    if ((unint64_t)(result + 2) >= v13)
    {
LABEL_30:
      unint64_t v17 = v14;
    }
    else
    {
LABEL_10:
      unint64_t v15 = v14;
      while (1)
      {
        float v16 = *(float *)(v4 + 4);
        do
        {
          unint64_t v17 = v15;
          float v18 = *(float *)(v15 + 4);
          v15 += 8;
        }
        while (v18 > v16);
        do
        {
          float v19 = *(float *)(v13 - 4);
          v13 -= 8;
        }
        while (v19 <= v16);
        if (v17 >= v13) {
          break;
        }
        int v20 = *(_DWORD *)v17;
        *(_DWORD *)unint64_t v17 = *(_DWORD *)v13;
        *(_DWORD *)unint64_t v13 = v20;
        *(float *)(v17 + 4) = v19;
        *(float *)(v13 + 4) = v18;
        ++v9;
        if (v4 == v17) {
          unint64_t v4 = v13;
        }
      }
    }
    if (v17 != v4)
    {
      float v29 = *(float *)(v4 + 4);
      float v30 = *(float *)(v17 + 4);
      if (v29 > v30)
      {
        int v31 = *(_DWORD *)v17;
        *(_DWORD *)unint64_t v17 = *(_DWORD *)v4;
        *(_DWORD *)unint64_t v4 = v31;
        *(float *)(v17 + 4) = v29;
        *(float *)(v4 + 4) = v30;
        ++v9;
      }
    }
    if ((float *)v17 == a2) {
      return result;
    }
    if (!v9)
    {
      if (v17 <= (unint64_t)a2)
      {
        unint64_t v38 = v17 + 8;
        while ((float *)v38 != a3)
        {
          float v39 = *(float *)(v38 + 4);
          float v40 = *(float *)(v38 - 4);
          v38 += 8;
          if (v39 > v40) {
            goto LABEL_36;
          }
        }
      }
      else
      {
        while (v14 != v17)
        {
          float v33 = *(float *)(v14 + 4);
          float v34 = *(float *)(v14 - 4);
          v14 += 8;
          if (v33 > v34) {
            goto LABEL_36;
          }
        }
      }
      return result;
    }
LABEL_36:
    if (v17 <= (unint64_t)a2)
    {
      unint64_t v32 = v17 + 8;
    }
    else
    {
      a3 = (float *)v17;
      unint64_t v32 = (unint64_t)result;
    }
LABEL_63:
    size_t result = (float *)v32;
  }
  return result;
}

float *sub_19E235F0C(float *result, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  float v11 = result;
  while (2)
  {
    float v12 = v11;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          float v11 = v12;
          uint64_t v13 = a2 - (char *)v12;
          unint64_t v14 = (a2 - (char *)v12) >> 3;
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                float v84 = *((float *)a2 - 1);
                float v85 = v12[1];
                if (v84 > v85)
                {
                  float v86 = *v12;
                  *float v12 = *((float *)a2 - 2);
                  *((float *)a2 - 2) = v86;
                  v12[1] = v84;
                  *((float *)a2 - 1) = v85;
                }
                return result;
              case 3uLL:
                float v87 = v12[3];
                float v88 = v12[1];
                float v89 = *((float *)a2 - 1);
                if (v87 <= v88)
                {
                  if (v89 > v87)
                  {
                    int v112 = *((_DWORD *)v12 + 2);
                    v12[2] = *((float *)a2 - 2);
                    *((_DWORD *)a2 - 2) = v112;
                    v12[3] = v89;
                    *((float *)a2 - 1) = v87;
                    float v94 = v12[3];
                    float v100 = v12[1];
                    if (v94 > v100)
                    {
                      int v113 = *(_DWORD *)v12;
                      *float v12 = v12[2];
                      *((_DWORD *)v12 + 2) = v113;
LABEL_138:
                      v12[1] = v94;
                      v12[3] = v100;
                    }
                  }
                }
                else
                {
                  int v90 = *(_DWORD *)v12;
                  if (v89 <= v87)
                  {
                    *float v12 = v12[2];
                    *((_DWORD *)v12 + 2) = v90;
                    v12[1] = v87;
                    v12[3] = v88;
                    float v120 = *((float *)a2 - 1);
                    if (v120 <= v88) {
                      return result;
                    }
                    v12[2] = *((float *)a2 - 2);
                    *((_DWORD *)a2 - 2) = v90;
                    v12[3] = v120;
                  }
                  else
                  {
                    *float v12 = *((float *)a2 - 2);
                    *((_DWORD *)a2 - 2) = v90;
                    v12[1] = v89;
                  }
                  *((float *)a2 - 1) = v88;
                }
                break;
              case 4uLL:
                return sub_19E149F3C(v12, v12 + 2, v12 + 4, (float *)a2 - 2);
              case 5uLL:
                size_t result = sub_19E149F3C(v12, v12 + 2, v12 + 4, v12 + 6);
                float v91 = *((float *)a2 - 1);
                float v92 = v12[7];
                if (v91 <= v92) {
                  return result;
                }
                int v93 = *((_DWORD *)v12 + 6);
                v12[6] = *((float *)a2 - 2);
                *((_DWORD *)a2 - 2) = v93;
                v12[7] = v91;
                *((float *)a2 - 1) = v92;
                float v94 = v12[7];
                float v95 = v12[5];
                if (v94 <= v95) {
                  return result;
                }
                int v96 = *((_DWORD *)v12 + 4);
                int v97 = *((_DWORD *)v12 + 6);
                *((_DWORD *)v12 + 4) = v97;
                *((_DWORD *)v12 + 6) = v96;
                v12[5] = v94;
                v12[7] = v95;
                float v98 = v12[3];
                if (v94 <= v98) {
                  return result;
                }
                int v99 = *((_DWORD *)v12 + 2);
                *((_DWORD *)v12 + 2) = v97;
                *((_DWORD *)v12 + 4) = v99;
                v12[3] = v94;
                v12[5] = v98;
                float v100 = v12[1];
                if (v94 <= v100) {
                  return result;
                }
                float v101 = *v12;
                *(_DWORD *)float v12 = v97;
                v12[2] = v101;
                goto LABEL_138;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v13 <= 191)
          {
            int v102 = v12 + 2;
            BOOL v104 = v12 == (float *)a2 || v102 == (float *)a2;
            if (a5)
            {
              if (!v104)
              {
                uint64_t v105 = 0;
                BOOL v106 = v12;
                do
                {
                  float v108 = v106[3];
                  if (v108 > v106[1])
                  {
                    unint64_t v109 = 0;
                    float v110 = *v102;
                    do
                    {
                      uint64_t v111 = &v106[v109 / 4];
                      v111[2] = v106[v109 / 4];
                      v111[3] = v106[v109 / 4 + 1];
                      if (v105 == v109)
                      {
                        uint64_t v107 = v12;
                        goto LABEL_123;
                      }
                      v109 -= 8;
                    }
                    while (v108 > *(v111 - 1));
                    uint64_t v107 = &v102[v109 / 4];
LABEL_123:
                    *uint64_t v107 = v110;
                    v107[1] = v108;
                  }
                  v102 += 2;
                  v106 += 2;
                  v105 -= 8;
                }
                while (v102 != (float *)a2);
              }
            }
            else if (!v104)
            {
              uint64_t v114 = v12 + 1;
              do
              {
                float v115 = v11[3];
                float v116 = v11[1];
                float v11 = v102;
                if (v115 > v116)
                {
                  float v117 = *v102;
                  unint64_t v118 = v114;
                  do
                  {
                    v118[1] = *(v118 - 1);
                    v118[2] = *v118;
                    float v119 = *(v118 - 2);
                    v118 -= 2;
                  }
                  while (v115 > v119);
                  v118[1] = v117;
                  v118[2] = v115;
                }
                int v102 = v11 + 2;
                v114 += 2;
              }
              while (v11 + 2 != (float *)a2);
            }
            return result;
          }
          if (!a4)
          {
            if (v12 != (float *)a2)
            {
              return (float *)sub_19E236C9C((char *)v12, a2, (int *)a2);
            }
            return result;
          }
          unint64_t v15 = &v12[2 * (v14 >> 1)];
          float v16 = *((float *)a2 - 1);
          if ((unint64_t)v13 >= 0x401) {
            break;
          }
          float v20 = v12[1];
          float v21 = v15[1];
          if (v20 > v21)
          {
            float v22 = *v15;
            if (v16 <= v20)
            {
              float *v15 = *v12;
              *float v12 = v22;
              v15[1] = v20;
              v12[1] = v21;
              float v40 = *((float *)a2 - 1);
              if (v40 <= v21) {
                goto LABEL_33;
              }
              *float v12 = *((float *)a2 - 2);
              *((float *)a2 - 2) = v22;
              v12[1] = v40;
            }
            else
            {
              float *v15 = *((float *)a2 - 2);
              *((float *)a2 - 2) = v22;
              v15[1] = v16;
            }
            *((float *)a2 - 1) = v21;
LABEL_33:
            --a4;
            if ((a5 & 1) == 0) {
              goto LABEL_58;
            }
            goto LABEL_34;
          }
          if (v16 <= v20) {
            goto LABEL_33;
          }
          float v27 = *v12;
          *float v12 = *((float *)a2 - 2);
          *((float *)a2 - 2) = v27;
          v12[1] = v16;
          *((float *)a2 - 1) = v20;
          float v28 = v12[1];
          float v29 = v15[1];
          if (v28 <= v29) {
            goto LABEL_33;
          }
          int v30 = *(_DWORD *)v15;
          float *v15 = *v12;
          *(_DWORD *)float v12 = v30;
          v15[1] = v28;
          v12[1] = v29;
          --a4;
          if (a5) {
            goto LABEL_34;
          }
LABEL_58:
          float v42 = v12[1];
          float v41 = *v12;
          if (*(v12 - 1) > v42) {
            goto LABEL_59;
          }
          if (v42 > *((float *)a2 - 1))
          {
            uint64_t v73 = v12;
            do
            {
              float v12 = v73 + 2;
              float v74 = v73[3];
              v73 += 2;
            }
            while (v42 <= v74);
          }
          else
          {
            uint64_t v75 = v12 + 2;
            do
            {
              float v12 = v75;
              if (v75 >= (float *)a2) {
                break;
              }
              float v76 = v75[1];
              v75 += 2;
            }
            while (v42 <= v76);
          }
          int v77 = (float *)a2;
          if (v12 < (float *)a2)
          {
            int v78 = a2;
            do
            {
              int v77 = (float *)(v78 - 8);
              float v79 = *((float *)v78 - 1);
              v78 -= 8;
            }
            while (v42 > v79);
          }
          while (v12 < v77)
          {
            float v80 = *v12;
            *float v12 = *v77;
            *int v77 = v80;
            int v81 = *((_DWORD *)v12 + 1);
            v12[1] = v77[1];
            *((_DWORD *)v77 + 1) = v81;
            do
            {
              float v82 = v12[3];
              v12 += 2;
            }
            while (v42 <= v82);
            do
            {
              float v83 = *(v77 - 1);
              v77 -= 2;
            }
            while (v42 > v83);
          }
          BOOL v5 = v12 - 2 >= v11;
          BOOL v6 = v12 - 2 == v11;
          if (v12 - 2 != v11)
          {
            float *v11 = *(v12 - 2);
            v11[1] = *(v12 - 1);
          }
          a5 = 0;
          *(v12 - 2) = v41;
          *(v12 - 1) = v42;
        }
        float v17 = v15[1];
        float v18 = v12[1];
        if (v17 <= v18)
        {
          if (v16 > v17)
          {
            int v23 = *(_DWORD *)v15;
            float *v15 = *((float *)a2 - 2);
            *((_DWORD *)a2 - 2) = v23;
            v15[1] = v16;
            *((float *)a2 - 1) = v17;
            float v24 = v15[1];
            float v25 = v12[1];
            if (v24 > v25)
            {
              float v26 = *v12;
              *float v12 = *v15;
              float *v15 = v26;
              v12[1] = v24;
              v15[1] = v25;
            }
          }
        }
        else
        {
          float v19 = *v12;
          if (v16 <= v17)
          {
            *float v12 = *v15;
            float *v15 = v19;
            v12[1] = v17;
            v15[1] = v18;
            float v31 = *((float *)a2 - 1);
            if (v31 <= v18) {
              goto LABEL_24;
            }
            float *v15 = *((float *)a2 - 2);
            *((float *)a2 - 2) = v19;
            v15[1] = v31;
          }
          else
          {
            *float v12 = *((float *)a2 - 2);
            *((float *)a2 - 2) = v19;
            v12[1] = v16;
          }
          *((float *)a2 - 1) = v18;
        }
LABEL_24:
        float v32 = *(v15 - 1);
        float v33 = v12[3];
        float v34 = *((float *)a2 - 3);
        if (v32 <= v33)
        {
          if (v34 > v32)
          {
            int v36 = *((_DWORD *)v15 - 2);
            *(v15 - 2) = *((float *)a2 - 4);
            *((_DWORD *)a2 - 4) = v36;
            *(v15 - 1) = v34;
            *((float *)a2 - 3) = v32;
            float v37 = *(v15 - 1);
            float v38 = v12[3];
            if (v37 > v38)
            {
              int v39 = *((_DWORD *)v12 + 2);
              v12[2] = *(v15 - 2);
              *((_DWORD *)v15 - 2) = v39;
              v12[3] = v37;
              *(v15 - 1) = v38;
            }
          }
        }
        else
        {
          int v35 = *((_DWORD *)v12 + 2);
          if (v34 <= v32)
          {
            v12[2] = *(v15 - 2);
            *((_DWORD *)v15 - 2) = v35;
            v12[3] = v32;
            *(v15 - 1) = v33;
            float v43 = *((float *)a2 - 3);
            if (v43 <= v33) {
              goto LABEL_38;
            }
            *(v15 - 2) = *((float *)a2 - 4);
            *((_DWORD *)a2 - 4) = v35;
            *(v15 - 1) = v43;
          }
          else
          {
            v12[2] = *((float *)a2 - 4);
            *((_DWORD *)a2 - 4) = v35;
            v12[3] = v34;
          }
          *((float *)a2 - 3) = v33;
        }
LABEL_38:
        float v44 = v15[3];
        float v45 = v12[5];
        float v46 = *((float *)a2 - 5);
        if (v44 <= v45)
        {
          if (v46 > v44)
          {
            int v48 = *((_DWORD *)v15 + 2);
            v15[2] = *((float *)a2 - 6);
            *((_DWORD *)a2 - 6) = v48;
            v15[3] = v46;
            *((float *)a2 - 5) = v44;
            float v49 = v15[3];
            float v50 = v12[5];
            if (v49 > v50)
            {
              int v51 = *((_DWORD *)v12 + 4);
              v12[4] = v15[2];
              *((_DWORD *)v15 + 2) = v51;
              v12[5] = v49;
              v15[3] = v50;
            }
          }
        }
        else
        {
          int v47 = *((_DWORD *)v12 + 4);
          if (v46 <= v44)
          {
            v12[4] = v15[2];
            *((_DWORD *)v15 + 2) = v47;
            v12[5] = v44;
            v15[3] = v45;
            float v52 = *((float *)a2 - 5);
            if (v52 <= v45) {
              goto LABEL_47;
            }
            v15[2] = *((float *)a2 - 6);
            *((_DWORD *)a2 - 6) = v47;
            v15[3] = v52;
          }
          else
          {
            v12[4] = *((float *)a2 - 6);
            *((_DWORD *)a2 - 6) = v47;
            v12[5] = v46;
          }
          *((float *)a2 - 5) = v45;
        }
LABEL_47:
        float v53 = v15[1];
        float v54 = *(v15 - 1);
        float v55 = v15[3];
        if (v53 <= v54)
        {
          float v56 = *v15;
          if (v55 <= v53) {
            goto LABEL_53;
          }
          float v57 = v15[2];
          float *v15 = v57;
          v15[2] = v56;
          v15[1] = v55;
          v15[3] = v53;
          if (v55 > v54)
          {
            float v56 = *(v15 - 2);
            *(v15 - 2) = v57;
            float *v15 = v56;
            *(v15 - 1) = v55;
            v15[1] = v54;
            goto LABEL_57;
          }
          goto LABEL_56;
        }
        float v56 = *(v15 - 2);
        if (v55 > v53)
        {
          *(v15 - 2) = v15[2];
          v15[2] = v56;
          *(v15 - 1) = v55;
          v15[3] = v54;
          float v56 = *v15;
LABEL_53:
          float v54 = v53;
          goto LABEL_57;
        }
        *(v15 - 2) = *v15;
        float *v15 = v56;
        *(v15 - 1) = v53;
        v15[1] = v54;
        if (v55 > v54)
        {
          float v57 = v15[2];
          float *v15 = v57;
          v15[2] = v56;
          v15[1] = v55;
          v15[3] = v54;
LABEL_56:
          float v54 = v55;
          float v56 = v57;
        }
LABEL_57:
        float v58 = *v12;
        *float v12 = v56;
        float *v15 = v58;
        int v59 = *((_DWORD *)v12 + 1);
        v12[1] = v54;
        *((_DWORD *)v15 + 1) = v59;
        --a4;
        if ((a5 & 1) == 0) {
          goto LABEL_58;
        }
LABEL_34:
        float v41 = *v12;
        float v42 = v12[1];
LABEL_59:
        float v60 = v12;
        do
        {
          int v61 = v60;
          v60 += 2;
        }
        while (v61[3] > v42);
        float v62 = a2;
        if (v61 == v12)
        {
          int v65 = a2;
          while (v60 < (float *)v65)
          {
            uint64_t v63 = v65 - 8;
            float v66 = *((float *)v65 - 1);
            v65 -= 8;
            if (v66 > v42) {
              goto LABEL_67;
            }
          }
          uint64_t v63 = v65;
          float v12 = v60;
        }
        else
        {
          do
          {
            uint64_t v63 = v62 - 8;
            float v64 = *((float *)v62 - 1);
            v62 -= 8;
          }
          while (v64 <= v42);
LABEL_67:
          float v12 = v60;
          if (v60 < (float *)v63)
          {
            int v67 = (float *)v63;
            do
            {
              float v68 = *v12;
              *float v12 = *v67;
              *int v67 = v68;
              int v69 = *((_DWORD *)v12 + 1);
              v12[1] = v67[1];
              *((_DWORD *)v67 + 1) = v69;
              do
              {
                float v70 = v12[3];
                v12 += 2;
              }
              while (v70 > v42);
              do
              {
                float v71 = *(v67 - 1);
                v67 -= 2;
              }
              while (v71 <= v42);
            }
            while (v12 < v67);
          }
        }
        if (v12 - 2 != v11)
        {
          float *v11 = *(v12 - 2);
          v11[1] = *(v12 - 1);
        }
        *(v12 - 2) = v41;
        *(v12 - 1) = v42;
        if (v60 >= (float *)v63) {
          break;
        }
LABEL_78:
        size_t result = (float *)sub_19E235F0C(v11, v12 - 2, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v72 = sub_19E2368CC(v11, v12 - 2);
      size_t result = (float *)sub_19E2368CC(v12, (float *)a2);
      if (result) {
        break;
      }
      if (!v72) {
        goto LABEL_78;
      }
    }
    a2 = (char *)(v12 - 2);
    if (!v72) {
      continue;
    }
    return result;
  }
}

BOOL sub_19E2368CC(float *a1, float *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      float v6 = *(a2 - 1);
      float v7 = a1[1];
      if (v6 > v7)
      {
        float v8 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v8;
        a1[1] = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      float v9 = a1[3];
      float v10 = a1[1];
      float v11 = *(a2 - 1);
      if (v9 <= v10)
      {
        if (v11 > v9)
        {
          int v30 = *((_DWORD *)a1 + 2);
          a1[2] = *(a2 - 2);
          *((_DWORD *)a2 - 2) = v30;
          a1[3] = v11;
          *(a2 - 1) = v9;
          float v31 = a1[3];
          float v32 = a1[1];
          if (v31 > v32)
          {
            int v33 = *(_DWORD *)a1;
            *a1 = a1[2];
            *((_DWORD *)a1 + 2) = v33;
            a1[1] = v31;
            a1[3] = v32;
          }
        }
      }
      else
      {
        int v12 = *(_DWORD *)a1;
        if (v11 <= v9)
        {
          *a1 = a1[2];
          *((_DWORD *)a1 + 2) = v12;
          a1[1] = v9;
          a1[3] = v10;
          float v37 = *(a2 - 1);
          if (v37 > v10)
          {
            a1[2] = *(a2 - 2);
            *((_DWORD *)a2 - 2) = v12;
            a1[3] = v37;
            *(a2 - 1) = v10;
          }
        }
        else
        {
          *a1 = *(a2 - 2);
          *((_DWORD *)a2 - 2) = v12;
          a1[1] = v11;
          *(a2 - 1) = v10;
        }
      }
      return result;
    case 4:
      sub_19E149F3C(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_19E149F3C(a1, a1 + 2, a1 + 4, a1 + 6);
      float v19 = *(a2 - 1);
      float v20 = a1[7];
      if (v19 <= v20) {
        return 1;
      }
      int v21 = *((_DWORD *)a1 + 6);
      a1[6] = *(a2 - 2);
      *((_DWORD *)a2 - 2) = v21;
      a1[7] = v19;
      *(a2 - 1) = v20;
      float v22 = a1[7];
      float v23 = a1[5];
      if (v22 <= v23) {
        return 1;
      }
      int v24 = *((_DWORD *)a1 + 4);
      int v25 = *((_DWORD *)a1 + 6);
      *((_DWORD *)a1 + 4) = v25;
      *((_DWORD *)a1 + 6) = v24;
      a1[5] = v22;
      a1[7] = v23;
      float v26 = a1[3];
      if (v22 <= v26) {
        return 1;
      }
      int v27 = *((_DWORD *)a1 + 2);
      *((_DWORD *)a1 + 2) = v25;
      *((_DWORD *)a1 + 4) = v27;
      a1[3] = v22;
      a1[5] = v26;
      float v28 = a1[1];
      if (v22 <= v28) {
        return 1;
      }
      float v29 = *a1;
      *(_DWORD *)a1 = v25;
      a1[2] = v29;
      a1[1] = v22;
      a1[3] = v28;
      return 1;
    default:
      float v13 = a1[1];
      unint64_t v14 = a1 + 3;
      float v15 = a1[3];
      float v16 = a1[5];
      if (v15 > v13)
      {
        float v17 = *a1;
        if (v16 <= v15)
        {
          *a1 = a1[2];
          a1[2] = v17;
          a1[1] = v15;
          a1[3] = v13;
          if (v16 <= v13) {
            goto LABEL_30;
          }
          a1[2] = a1[4];
          a1[4] = v17;
          float v18 = a1 + 3;
        }
        else
        {
          *a1 = a1[4];
          a1[4] = v17;
          float v18 = a1 + 1;
        }
        unint64_t v14 = a1 + 5;
        goto LABEL_29;
      }
      if (v16 > v15)
      {
        int v34 = *((_DWORD *)a1 + 2);
        int v35 = *((_DWORD *)a1 + 4);
        *((_DWORD *)a1 + 2) = v35;
        *((_DWORD *)a1 + 4) = v34;
        a1[3] = v16;
        a1[5] = v15;
        if (v16 > v13)
        {
          float v36 = *a1;
          *(_DWORD *)a1 = v35;
          a1[2] = v36;
          float v18 = a1 + 1;
LABEL_29:
          *float v18 = v16;
          *unint64_t v14 = v13;
        }
      }
LABEL_30:
      float v38 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v39 = 0;
      int v40 = 0;
      float v41 = a1 + 4;
      while (1)
      {
        float v42 = v38[1];
        if (v42 > v41[1]) {
          break;
        }
LABEL_39:
        float v41 = v38;
        v39 += 8;
        v38 += 2;
        if (v38 == a2) {
          return 1;
        }
      }
      int v43 = *(_DWORD *)v38;
      uint64_t v44 = v39;
      do
      {
        float v45 = (float *)((char *)a1 + v44);
        v45[6] = *(float *)((char *)a1 + v44 + 16);
        v45[7] = *(float *)((char *)a1 + v44 + 20);
        if (v44 == -16)
        {
          *(_DWORD *)a1 = v43;
          a1[1] = v42;
          if (++v40 != 8) {
            goto LABEL_39;
          }
          return v38 + 2 == a2;
        }
        v44 -= 8;
      }
      while (v42 > v45[3]);
      float v46 = (char *)a1 + v44;
      *((_DWORD *)v46 + 6) = v43;
      *((float *)v46 + 7) = v42;
      if (++v40 != 8) {
        goto LABEL_39;
      }
      return v38 + 2 == a2;
  }
}

int *sub_19E236C9C(char *a1, char *a2, int *a3)
{
  if (a1 == a2) {
    return a3;
  }
  uint64_t v3 = a2 - a1;
  uint64_t v4 = (a2 - a1) >> 3;
  if (a2 - a1 >= 9 && (unint64_t)v3 >= 0x10)
  {
    int64_t v40 = (unint64_t)(v4 - 2) >> 1;
    int64_t v41 = v40;
    do
    {
      if (v40 >= v41)
      {
        uint64_t v42 = (2 * v41) | 1;
        int v43 = (int *)&a1[16 * v41];
        uint64_t v44 = (float *)(v43 + 2);
        if (2 * v41 + 2 < v4 && *((float *)v43 + 3) > *((float *)v43 + 5))
        {
          uint64_t v44 = (float *)(v43 + 4);
          uint64_t v42 = 2 * v41 + 2;
        }
        float v45 = v44[1];
        float v46 = *(float *)&a1[8 * v41 + 4];
        if (v45 <= v46)
        {
          int v47 = (float *)&a1[8 * v41];
          float v48 = *v47;
          while (1)
          {
            float v49 = v47;
            int v47 = v44;
            *float v49 = *v44;
            v49[1] = v45;
            if (v40 < v42) {
              break;
            }
            uint64_t v50 = (2 * v42) | 1;
            int v51 = (int *)&a1[16 * v42];
            uint64_t v44 = (float *)(v51 + 2);
            uint64_t v42 = 2 * v42 + 2;
            if (v42 < v4)
            {
              if (*((float *)v51 + 3) <= *((float *)v51 + 5)) {
                uint64_t v42 = v50;
              }
              else {
                uint64_t v44 = (float *)(v51 + 4);
              }
              float v45 = v44[1];
              if (v45 > v46) {
                break;
              }
            }
            else
            {
              uint64_t v42 = v50;
              float v45 = *((float *)v51 + 3);
              if (v45 > v46) {
                break;
              }
            }
          }
          float *v47 = v48;
          v47[1] = v46;
        }
      }
      BOOL v24 = v41-- <= 0;
    }
    while (!v24);
  }
  BOOL v5 = (int *)a2;
  if (a2 != (char *)a3)
  {
    if (v3 < 16)
    {
      float v6 = *((float *)a1 + 1);
      float v7 = (float *)a2;
      do
      {
        float v8 = v7[1];
        if (v8 > v6)
        {
          float v9 = *v7;
          *float v7 = *(float *)a1;
          *(float *)a1 = v9;
          v7[1] = v6;
          *((float *)a1 + 1) = v8;
          float v6 = v8;
        }
        v7 += 2;
      }
      while (v7 != (float *)a3);
LABEL_28:
      BOOL v5 = a3;
      goto LABEL_29;
    }
    float v10 = (float *)a2;
    while (1)
    {
      float v11 = v10[1];
      float v12 = *((float *)a1 + 1);
      if (v11 > v12)
      {
        float v13 = *v10;
        *float v10 = *(float *)a1;
        *(float *)a1 = v13;
        v10[1] = v12;
        *((float *)a1 + 1) = v11;
        if (v3 == 16 || *((float *)a1 + 3) <= *((float *)a1 + 5))
        {
          unint64_t v14 = (int *)(a1 + 8);
          uint64_t v15 = 1;
          float v16 = *((float *)a1 + 3);
          if (v16 <= v11)
          {
LABEL_19:
            float v17 = *(float *)a1;
            float v18 = (float *)a1;
            while (1)
            {
              float v19 = v18;
              float v18 = (float *)v14;
              *(_DWORD *)float v19 = *v14;
              v19[1] = v16;
              if ((uint64_t)((unint64_t)(v4 - 2) >> 1) < v15) {
                break;
              }
              uint64_t v20 = (2 * v15) | 1;
              int v21 = (int *)&a1[16 * v15];
              unint64_t v14 = v21 + 2;
              uint64_t v15 = 2 * v15 + 2;
              if (v15 < v4)
              {
                if (*((float *)v21 + 3) <= *((float *)v21 + 5)) {
                  uint64_t v15 = v20;
                }
                else {
                  unint64_t v14 = v21 + 4;
                }
                float v16 = *((float *)v14 + 1);
                if (v16 > v11) {
                  break;
                }
              }
              else
              {
                uint64_t v15 = v20;
                float v16 = *((float *)v21 + 3);
                if (v16 > v11) {
                  break;
                }
              }
            }
            *float v18 = v17;
            v18[1] = v11;
          }
        }
        else
        {
          unint64_t v14 = (int *)(a1 + 16);
          uint64_t v15 = 2;
          float v16 = *((float *)a1 + 5);
          if (v16 <= v11) {
            goto LABEL_19;
          }
        }
      }
      v10 += 2;
      if (v10 == (float *)a3) {
        goto LABEL_28;
      }
    }
  }
LABEL_29:
  if (v3 >= 9)
  {
    uint64_t v22 = (unint64_t)v3 >> 3;
    float v23 = (int *)(a1 + 4);
    do
    {
      uint64_t v25 = 0;
      float v26 = *(float *)a1;
      int v27 = *((_DWORD *)a1 + 1);
      float v28 = (int *)a1;
      do
      {
        int v30 = &v28[2 * v25];
        float v29 = v30 + 2;
        uint64_t v31 = (2 * v25) | 1;
        uint64_t v25 = 2 * v25 + 2;
        if (v25 < v22)
        {
          if (*((float *)v30 + 3) <= *((float *)v30 + 5)) {
            uint64_t v25 = v31;
          }
          else {
            float v29 = v30 + 4;
          }
        }
        else
        {
          uint64_t v25 = v31;
        }
        int *v28 = *v29;
        v28[1] = v29[1];
        float v28 = v29;
      }
      while (v25 <= (uint64_t)((unint64_t)(v22 - 2) >> 1));
      if (v29 == (int *)(a2 - 8))
      {
        *(float *)float v29 = v26;
        v29[1] = v27;
      }
      else
      {
        int *v29 = *((_DWORD *)a2 - 2);
        v29[1] = *((_DWORD *)a2 - 1);
        *((float *)a2 - 2) = v26;
        *((_DWORD *)a2 - 1) = v27;
        uint64_t v32 = (char *)v29 - a1 + 8;
        if (v32 >= 9)
        {
          unint64_t v33 = (((unint64_t)v32 >> 3) - 2) >> 1;
          float v34 = *(float *)&v23[2 * v33];
          float v35 = *((float *)v29 + 1);
          if (v34 > v35)
          {
            int v36 = *v29;
            do
            {
              unint64_t v37 = v33;
              float v38 = (float *)v29;
              float v29 = (int *)&a1[8 * v37];
              *(_DWORD *)float v38 = *v29;
              v38[1] = v34;
              if (!v37) {
                break;
              }
              unint64_t v33 = (v37 - 1) >> 1;
              float v34 = *(float *)&v23[2 * v33];
            }
            while (v34 > v35);
            int *v29 = v36;
            *(float *)&v23[2 * v37] = v35;
          }
        }
      }
      a2 -= 8;
      BOOL v24 = v22-- <= 2;
    }
    while (!v24);
  }
  return v5;
}

void sub_19E237124(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E2371C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E237258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_19E23726C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_19E23730C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19E237328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19E2373CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19E2373E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_19E2374CC()
{
  if (qword_1E94593B8 != -1) {
    dispatch_once(&qword_1E94593B8, &unk_1EF0ABFA0);
  }
  return byte_1E94593B0;
}

void sub_19E23751C()
{
  if (qword_1E94593C8 == -1)
  {
    v0 = (void *)qword_1E94593C0;
    if (!qword_1E94593C0) {
      return;
    }
  }
  else
  {
    dispatch_once(&qword_1E94593C8, &unk_1EF0AC060);
    v0 = (void *)qword_1E94593C0;
    if (!qword_1E94593C0) {
      return;
    }
  }
  off_1E9459428 = dlsym(v0, "NLModelContainerCreate");
  off_1E9459438 = dlsym(v0, "NLModelContainerCreateWithContentsOfURL");
  off_1E9459430 = dlsym(v0, "NLModelContainerCreateWithContainerData");
  qword_1E9459458 = (uint64_t)dlsym(v0, "NLModelContainerGetType");
  qword_1E9459450 = (uint64_t)dlsym(v0, "NLModelContainerGetSubtype");
  qword_1E9459448 = (uint64_t)dlsym(v0, "NLModelContainerGetRevision");
  off_1E9459418 = dlsym(v0, "NLModelContainerCopyInfoDictionary");
  qword_1E9459440 = (uint64_t)dlsym(v0, "NLModelContainerGetModelDataCount");
  off_1E9459420 = dlsym(v0, "NLModelContainerCopyModelDataAtIndex");
  uint64_t v1 = dlsym(v0, "NLModelContainerWriteToURL");
  off_1E9459460 = v1;
  if (off_1E9459428) {
    BOOL v2 = off_1E9459438 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  char v11 = !v2
     && off_1E9459430 != 0
     && qword_1E9459458 != 0
     && qword_1E9459450 != 0
     && qword_1E9459448 != 0
     && off_1E9459418 != 0
     && qword_1E9459440 != 0
     && off_1E9459420 != 0
     && v1 != 0;
  byte_1E94593B0 = v11;
}

void sub_19E2376E0()
{
  sub_19E31A124("/System/Library/PrivateFrameworks/CoreNLP.framework/CoreNLP", (uint64_t)__p);
  if (v2 >= 0) {
    v0 = __p;
  }
  else {
    v0 = (void **)__p[0];
  }
  qword_1E94593C0 = (uint64_t)dlopen((const char *)v0, 261);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_19E237758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E237774(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F4181798](MEMORY[0x1E4F4E038], sel_hasANE, a3, a4);
}

void sub_19E2379B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
  {
    operator delete(__p);

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

void sub_19E237CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_19E237CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_19E237CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_19E238B94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

float sub_19E238C94(uint64_t a1, uint64_t a2, float *a3)
{
  if (*(unsigned char *)(a1 + 12))
  {
    *(unsigned char *)(a1 + 12) = 0;
    float v5 = *(float *)(a1 + 8);
  }
  else
  {
    unint64_t v6 = *(void *)(a2 + 2496);
    int v7 = *(_DWORD *)(a2 + 4 * v6);
    int8x8_t v8 = (int8x8_t)vdup_n_s32(0x9D2C5680);
    int8x8_t v9 = (int8x8_t)vdup_n_s32(0xEFC60000);
    __asm { FMOV            V3.2S, #-1.0 }
    do
    {
      unint64_t v15 = (v6 + 1) % 0x270;
      uint64_t v16 = 4 * v15;
      unsigned int v17 = *(_DWORD *)(a2 + 4 * ((v6 + 397) % 0x270)) ^ ((*(_DWORD *)(a2 + 4 * v15) & 0x7FFFFFFE | v7 & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a2 + 4 * v15) << 31) >> 31) & 0x9908B0DF;
      *(_DWORD *)(a2 + 4 * v6) = v17;
      if (v15 < 0x26F) {
        unint64_t v6 = v15 + 1;
      }
      else {
        unint64_t v6 = v15 - 623;
      }
      if (v15 >= 0xE3) {
        uint64_t v18 = -227;
      }
      else {
        uint64_t v18 = 397;
      }
      int v7 = *(_DWORD *)(a2 + 4 * v6);
      unsigned int v19 = *(_DWORD *)(a2 + 4 * (v18 + v15)) ^ ((v7 & 0x7FFFFFFE | *(_DWORD *)(a2 + 4 * v15) & 0x80000000) >> 1) ^ (v7 << 31 >> 31) & 0x9908B0DF;
      *(_DWORD *)(a2 + v16) = v19;
      int32x2_t v20 = (int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)__PAIR64__(v17, v19), 0xBuLL), (int8x8_t)__PAIR64__(v17, v19));
      int32x2_t v21 = (int32x2_t)veor_s8(vand_s8((int8x8_t)vshl_n_s32(v20, 7uLL), v8), (int8x8_t)v20);
      int8x8_t v22 = veor_s8(vand_s8((int8x8_t)vshl_n_s32(v21, 0xFuLL), v9), (int8x8_t)v21);
      float32x2_t v23 = vmla_f32(_D3, vcvt_f32_u32((uint32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v22, 0x12uLL), v22)), (float32x2_t)0x3000000030000000);
      float v24 = vaddv_f32(vmul_f32(v23, v23));
    }
    while (v24 > 1.0 || v24 == 0.0);
    *(void *)(a2 + 2496) = v6;
    float32x2_t v27 = v23;
    float v25 = sqrtf((float)(logf(v24) * -2.0) / v24);
    *(float *)(a1 + 8) = v25 * v27.f32[0];
    *(unsigned char *)(a1 + 12) = 1;
    float v5 = vmuls_lane_f32(v25, v27, 1);
  }
  return *a3 + (float)(a3[1] * v5);
}

BOOL sub_19E238E50(double *a1, double a2, double a3)
{
  if (a1[1] >= a2) {
    return 1;
  }
  double v5 = fabs(a3);
  if (v5 >= INFINITY) {
    return 0;
  }
  double v6 = a1[2];
  double v7 = a1[3];
  if (__isinfd()) {
    return 0;
  }
  double v9 = vabdd_f64(a2, a3);
  if (v9 < v7 || v9 < (v5 + fabs(a2)) * (0.5 * v6)) {
    return 1;
  }
  if (a2 == a3) {
    return v6 > 0.0;
  }
  return 0;
}

BOOL sub_19E238F1C(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 64);
  return v1 >= 1 && **(_DWORD **)(a1 + 56) >= v1;
}

BOOL sub_19E238F44(uint64_t a1)
{
  double v1 = *(double *)(a1 + 72);
  if (v1 <= 0.0) {
    return 0;
  }
  double v2 = *(double *)(a1 + 80);
  return sub_19E24AB40() - v2 >= v1;
}

BOOL sub_19E238F90(uint64_t a1)
{
  double v1 = *(_DWORD **)(a1 + 88);
  return v1 && *v1 != 0;
}

char *sub_19E238FB0(void *a1, char *__s, va_list a3)
{
  size_t v6 = strlen(__s) + 128;
  double v7 = (char *)malloc_type_realloc(a1, v6, 0x4A3E2E50uLL);
  if (!v7) {
LABEL_10:
  }
    abort();
  int8x8_t v8 = v7;
  while (1)
  {
    int v9 = vsnprintf(v8, v6, __s, a3);
    if ((v9 & 0x80000000) == 0 && v6 > v9) {
      return v8;
    }
    if (v9 >= 0) {
      size_t v6 = v9 + 1;
    }
    else {
      size_t v6 = (3 * v6) >> 1;
    }
    int8x8_t v8 = (char *)malloc_type_realloc(v8, v6, 0xAE084DA4uLL);
    if (!v8) {
      goto LABEL_10;
    }
  }
}

BOOL sub_19E23906C(double a1)
{
  return fabs(a1) >= INFINITY || __isinfd() != 0;
}

BOOL sub_19E2390AC(double a1)
{
  return a1 == 0.0 || __fpclassifyd(a1) == 5;
}

void sub_19E23917C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E2392E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E23942C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E2395C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19E2395D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E2395F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _Unwind_Resume(a1);
}

void sub_19E23960C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19E23962C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19E23964C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19E239748(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E23976C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E23978C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E239868(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E23989C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E2399B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E2399C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_19E2399D8(void *a1)
{
  *a1 = &unk_1EF0AB9E0;
  sub_19E23C774((uint64_t)a1);
  double v2 = (void *)a1[154];
  if (v2)
  {
    a1[155] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[151];
  if (v3)
  {
    a1[152] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[148];
  if (v4)
  {
    a1[149] = v4;
    operator delete(v4);
  }
  double v5 = (void *)a1[145];
  if (v5)
  {
    a1[146] = v5;
    operator delete(v5);
  }
  size_t v6 = (void *)a1[142];
  if (v6)
  {
    a1[143] = v6;
    operator delete(v6);
  }
  double v7 = (void *)a1[139];
  if (v7)
  {
    a1[140] = v7;
    operator delete(v7);
  }
  int8x8_t v8 = (void *)a1[136];
  if (v8)
  {
    a1[137] = v8;
    operator delete(v8);
  }
  int v9 = (void *)a1[133];
  if (v9)
  {
    a1[134] = v9;
    operator delete(v9);
  }
  float v10 = (void *)a1[130];
  if (v10)
  {
    a1[131] = v10;
    operator delete(v10);
  }
  char v11 = (void *)a1[127];
  if (v11)
  {
    a1[128] = v11;
    operator delete(v11);
  }

  return sub_19E25BF30((uint64_t)a1);
}

void sub_19E239AD4(void *a1)
{
  double v1 = (void *)sub_19E2399D8(a1);

  operator delete(v1);
}

uint64_t sub_19E239AFC(uint64_t a1, uint64_t a2, uint64_t a3, void *__src)
{
  *(void *)uint64_t v230 = *MEMORY[0x1E4F143B8];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_19E13C2D0(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    uint64_t v225 = *(void *)(a2 + 16);
  }
  sub_19E25BD4C(a1, (long long *)__p, a3, __src);
  if (SHIBYTE(v225) < 0) {
    operator delete(__p[0]);
  }
  *(void *)a1 = &unk_1EF0AB9E0;
  unint64_t v217 = (uint64_t **)(a1 + 1040);
  uint64_t v218 = (uint64_t **)(a1 + 1064);
  uint64_t v215 = (uint64_t **)(a1 + 1112);
  unint64_t v216 = (uint64_t **)(a1 + 1088);
  float32x4_t v213 = (uint64_t **)(a1 + 1136);
  unint64_t v214 = (uint64_t **)(a1 + 1160);
  uint64_t v212 = (uint64_t **)(a1 + 1184);
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  uint64_t v219 = (uint64_t **)(a1 + 1016);
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_OWORD *)(a1 + 1296) = 0u;
  *(void *)(a1 + 1312) = 0;
  unint64_t v7 = __src[7];
  if (v7 <= 1) {
    unint64_t v7 = 1;
  }
  *(void *)(a1 + 1320) = v7;
  uint64_t v8 = __src[9];
  if (!v8) {
    uint64_t v8 = 2;
  }
  *(void *)(a1 + 1328) = v8;
  unint64_t v9 = __src[8];
  if (v9 <= 1) {
    unint64_t v9 = 1;
  }
  *(void *)(a1 + 1336) = v9;
  unint64_t v10 = __src[10];
  if (v10 <= 1) {
    unint64_t v10 = 1;
  }
  *(void *)(a1 + 1344) = v10;
  uint64_t v11 = __src[11];
  if (!v11) {
    uint64_t v11 = 2;
  }
  *(void *)(a1 + 1352) = v11;
  uint64_t v12 = *((int *)__src + 32);
  *(_DWORD *)__srca = 1;
  *(int64x2_t *)&__srca[8] = vdupq_n_s64(1uLL);
  uint64_t v228 = 0;
  uint64_t v229 = 0;
  uint64_t v227 = v12;
  sub_19E13C5C0(a1 + 16, (int *)__srca, v230);
  int v13 = *((_DWORD *)__src + 64);
  char v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 240))(a1);
  *(_DWORD *)__srca = 9;
  *(int64x2_t *)&__srca[8] = vdupq_n_s64(1uLL);
  uint64_t v228 = 0;
  uint64_t v229 = 0;
  uint64_t v227 = v13 << v14;
  sub_19E13C5C0(a1 + 40, (int *)__srca, v230);
  uint64_t v15 = 0;
  int v16 = *((_DWORD *)__src + 64);
  uint64_t v221 = v16 * (uint64_t)*((int *)__src + 32);
  uint64_t v222 = v16;
  int v220 = v16 * v16;
  float32x4_t v223 = __src;
  do
  {
    uint64_t v18 = __src[56] + 4 * v15 * v221;
    unsigned int v19 = *(uint64_t **)(a1 + 1024);
    unint64_t v20 = *(void *)(a1 + 1032);
    if ((unint64_t)v19 < v20)
    {
      *unsigned int v19 = v18;
      uint64_t v21 = (uint64_t)(v19 + 1);
      goto LABEL_41;
    }
    int8x8_t v22 = *v219;
    uint64_t v23 = (char *)v19 - (char *)*v219;
    uint64_t v24 = v23 >> 3;
    unint64_t v25 = (v23 >> 3) + 1;
    if (v25 >> 61) {
      sub_19E13D694();
    }
    uint64_t v26 = v20 - (void)v22;
    if (v26 >> 2 > v25) {
      unint64_t v25 = v26 >> 2;
    }
    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v27 = v25;
    }
    if (v27)
    {
      if (v27 >> 61) {
        sub_19E13C418();
      }
      float v28 = operator new(8 * v27);
      float v29 = (uint64_t *)&v28[8 * v24];
      uint64_t *v29 = v18;
      uint64_t v21 = (uint64_t)(v29 + 1);
      if (v19 == v22)
      {
LABEL_39:
        *(void *)(a1 + 1016) = v29;
        *(void *)(a1 + 1024) = v21;
        *(void *)(a1 + 1032) = &v28[8 * v27];
        if (!v19) {
          goto LABEL_41;
        }
LABEL_40:
        operator delete(v19);
        goto LABEL_41;
      }
    }
    else
    {
      float v28 = 0;
      float v29 = (uint64_t *)(8 * v24);
      *(void *)(8 * v24) = v18;
      uint64_t v21 = 8 * v24 + 8;
      if (v19 == v22) {
        goto LABEL_39;
      }
    }
    unint64_t v30 = (char *)(v19 - 1) - (char *)v22;
    if (v30 < 0x58) {
      goto LABEL_252;
    }
    if ((unint64_t)((char *)v19 - &v28[v23]) < 0x20) {
      goto LABEL_252;
    }
    uint64_t v31 = (v30 >> 3) + 1;
    uint64_t v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v33 = &v19[v32 / 0xFFFFFFFFFFFFFFF8];
    float v29 = (uint64_t *)((char *)v29 - v32);
    float v34 = &v28[8 * v24 - 16];
    float v35 = v19 - 2;
    uint64_t v36 = v31 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v37 = *(_OWORD *)v35;
      *(v34 - 1) = *((_OWORD *)v35 - 1);
      _OWORD *v34 = v37;
      v34 -= 2;
      v35 -= 4;
      v36 -= 4;
    }
    while (v36);
    unsigned int v19 = v33;
    if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_252:
      do
      {
        uint64_t v38 = *--v19;
        *--float v29 = v38;
      }
      while (v19 != v22);
    }
    unsigned int v19 = *v219;
    *(void *)(a1 + 1016) = v29;
    *(void *)(a1 + 1024) = v21;
    *(void *)(a1 + 1032) = &v28[8 * v27];
    if (v19) {
      goto LABEL_40;
    }
LABEL_41:
    *(void *)(a1 + 1024) = v21;
    uint64_t v39 = __src[57] + 4 * (v220 * v15);
    int64_t v40 = *(uint64_t **)(a1 + 1072);
    unint64_t v41 = *(void *)(a1 + 1080);
    if ((unint64_t)v40 < v41)
    {
      *int64_t v40 = v39;
      uint64_t v42 = (uint64_t)(v40 + 1);
      goto LABEL_63;
    }
    int v43 = *v218;
    uint64_t v44 = (char *)v40 - (char *)*v218;
    uint64_t v45 = v44 >> 3;
    unint64_t v46 = (v44 >> 3) + 1;
    if (v46 >> 61) {
      sub_19E13D694();
    }
    uint64_t v47 = v41 - (void)v43;
    if (v47 >> 2 > v46) {
      unint64_t v46 = v47 >> 2;
    }
    if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v48 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v48 = v46;
    }
    if (v48)
    {
      if (v48 >> 61) {
        sub_19E13C418();
      }
      float v49 = operator new(8 * v48);
      uint64_t v50 = (uint64_t *)&v49[8 * v45];
      *uint64_t v50 = v39;
      uint64_t v42 = (uint64_t)(v50 + 1);
      if (v40 == v43)
      {
LABEL_61:
        *(void *)(a1 + 1064) = v50;
        *(void *)(a1 + 1072) = v42;
        *(void *)(a1 + 1080) = &v49[8 * v48];
        if (!v40) {
          goto LABEL_63;
        }
LABEL_62:
        operator delete(v40);
        goto LABEL_63;
      }
    }
    else
    {
      float v49 = 0;
      uint64_t v50 = (uint64_t *)(8 * v45);
      *(void *)(8 * v45) = v39;
      uint64_t v42 = 8 * v45 + 8;
      if (v40 == v43) {
        goto LABEL_61;
      }
    }
    unint64_t v51 = (char *)(v40 - 1) - (char *)v43;
    if (v51 < 0x58) {
      goto LABEL_253;
    }
    if ((unint64_t)((char *)v40 - &v49[v44]) < 0x20) {
      goto LABEL_253;
    }
    uint64_t v52 = (v51 >> 3) + 1;
    uint64_t v53 = 8 * (v52 & 0x3FFFFFFFFFFFFFFCLL);
    float v54 = &v40[v53 / 0xFFFFFFFFFFFFFFF8];
    uint64_t v50 = (uint64_t *)((char *)v50 - v53);
    float v55 = &v49[8 * v45 - 16];
    float v56 = v40 - 2;
    uint64_t v57 = v52 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v58 = *(_OWORD *)v56;
      *(v55 - 1) = *((_OWORD *)v56 - 1);
      *float v55 = v58;
      v55 -= 2;
      v56 -= 4;
      v57 -= 4;
    }
    while (v57);
    int64_t v40 = v54;
    if (v52 != (v52 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_253:
      do
      {
        uint64_t v59 = *--v40;
        *--uint64_t v50 = v59;
      }
      while (v40 != v43);
    }
    int64_t v40 = *v218;
    *(void *)(a1 + 1064) = v50;
    *(void *)(a1 + 1072) = v42;
    *(void *)(a1 + 1080) = &v49[8 * v48];
    if (v40) {
      goto LABEL_62;
    }
LABEL_63:
    *(void *)(a1 + 1072) = v42;
    uint64_t v60 = v15 * v222;
    uint64_t v61 = __src[72] + 4 * v15 * v222;
    float v62 = *(uint64_t **)(a1 + 1048);
    unint64_t v63 = *(void *)(a1 + 1056);
    if ((unint64_t)v62 < v63)
    {
      *float v62 = v61;
      uint64_t v64 = (uint64_t)(v62 + 1);
      goto LABEL_86;
    }
    int v65 = *v217;
    uint64_t v66 = (char *)v62 - (char *)*v217;
    uint64_t v67 = v66 >> 3;
    unint64_t v68 = (v66 >> 3) + 1;
    if (v68 >> 61) {
      sub_19E13D694();
    }
    uint64_t v69 = v63 - (void)v65;
    if (v69 >> 2 > v68) {
      unint64_t v68 = v69 >> 2;
    }
    if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v70 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v70 = v68;
    }
    if (v70)
    {
      if (v70 >> 61) {
        sub_19E13C418();
      }
      float v71 = operator new(8 * v70);
      BOOL v72 = (uint64_t *)&v71[8 * v67];
      *BOOL v72 = v61;
      uint64_t v64 = (uint64_t)(v72 + 1);
      if (v62 != v65)
      {
LABEL_74:
        unint64_t v73 = (char *)(v62 - 1) - (char *)v65;
        if (v73 >= 0x58)
        {
          unint64_t v74 = (char *)v62 - &v71[v66];
          __src = v223;
          if (v74 >= 0x20)
          {
            uint64_t v75 = (v73 >> 3) + 1;
            uint64_t v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
            int v77 = &v62[v76 / 0xFFFFFFFFFFFFFFF8];
            BOOL v72 = (uint64_t *)((char *)v72 - v76);
            int v78 = &v71[8 * v67 - 16];
            float v79 = v62 - 2;
            uint64_t v80 = v75 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v81 = *(_OWORD *)v79;
              *(v78 - 1) = *((_OWORD *)v79 - 1);
              *int v78 = v81;
              v78 -= 2;
              v79 -= 4;
              v80 -= 4;
            }
            while (v80);
            float v62 = v77;
            if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_84:
              float v62 = *v217;
              *(void *)(a1 + 1040) = v72;
              *(void *)(a1 + 1048) = v64;
              *(void *)(a1 + 1056) = &v71[8 * v70];
              if (!v62) {
                goto LABEL_86;
              }
LABEL_85:
              operator delete(v62);
              goto LABEL_86;
            }
          }
        }
        else
        {
          __src = v223;
        }
        do
        {
          uint64_t v82 = *--v62;
          *--BOOL v72 = v82;
        }
        while (v62 != v65);
        goto LABEL_84;
      }
    }
    else
    {
      float v71 = 0;
      BOOL v72 = (uint64_t *)(8 * v67);
      *(void *)(8 * v67) = v61;
      uint64_t v64 = 8 * v67 + 8;
      if (v62 != v65) {
        goto LABEL_74;
      }
    }
    __src = v223;
    *(void *)(a1 + 1040) = v72;
    *(void *)(a1 + 1048) = v64;
    *(void *)(a1 + 1056) = &v71[8 * v70];
    if (v62) {
      goto LABEL_85;
    }
LABEL_86:
    *(void *)(a1 + 1048) = v64;
    uint64_t v83 = __src[73] + 4 * v60;
    float v84 = *(uint64_t **)(a1 + 1096);
    unint64_t v85 = *(void *)(a1 + 1104);
    if ((unint64_t)v84 < v85)
    {
      uint64_t *v84 = v83;
      uint64_t v86 = (uint64_t)(v84 + 1);
      uint64_t v87 = v15 * v221;
      goto LABEL_109;
    }
    float v88 = *v216;
    uint64_t v89 = (char *)v84 - (char *)*v216;
    uint64_t v90 = v89 >> 3;
    unint64_t v91 = (v89 >> 3) + 1;
    if (v91 >> 61) {
      sub_19E13D694();
    }
    uint64_t v92 = v85 - (void)v88;
    if (v92 >> 2 > v91) {
      unint64_t v91 = v92 >> 2;
    }
    if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v93 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v93 = v91;
    }
    if (v93)
    {
      if (v93 >> 61) {
        sub_19E13C418();
      }
      float v94 = operator new(8 * v93);
      float v95 = (uint64_t *)&v94[8 * v90];
      uint64_t *v95 = v83;
      uint64_t v86 = (uint64_t)(v95 + 1);
      if (v84 != v88)
      {
LABEL_97:
        unint64_t v96 = (char *)(v84 - 1) - (char *)v88;
        uint64_t v87 = v15 * v221;
        if (v96 >= 0x58)
        {
          unint64_t v97 = (char *)v84 - &v94[v89];
          __src = v223;
          if (v97 >= 0x20)
          {
            uint64_t v98 = (v96 >> 3) + 1;
            uint64_t v99 = 8 * (v98 & 0x3FFFFFFFFFFFFFFCLL);
            float v100 = &v84[v99 / 0xFFFFFFFFFFFFFFF8];
            float v95 = (uint64_t *)((char *)v95 - v99);
            float v101 = &v94[8 * v90 - 16];
            int v102 = v84 - 2;
            uint64_t v103 = v98 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v104 = *(_OWORD *)v102;
              *(v101 - 1) = *((_OWORD *)v102 - 1);
              _OWORD *v101 = v104;
              v101 -= 2;
              v102 -= 4;
              v103 -= 4;
            }
            while (v103);
            float v84 = v100;
            if (v98 == (v98 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_107:
              float v84 = *v216;
              *(void *)(a1 + 1088) = v95;
              *(void *)(a1 + 1096) = v86;
              *(void *)(a1 + 1104) = &v94[8 * v93];
              if (!v84) {
                goto LABEL_109;
              }
LABEL_108:
              operator delete(v84);
              goto LABEL_109;
            }
          }
        }
        else
        {
          __src = v223;
        }
        do
        {
          uint64_t v105 = *--v84;
          *--float v95 = v105;
        }
        while (v84 != v88);
        goto LABEL_107;
      }
    }
    else
    {
      float v94 = 0;
      float v95 = (uint64_t *)(8 * v90);
      *(void *)(8 * v90) = v83;
      uint64_t v86 = 8 * v90 + 8;
      if (v84 != v88) {
        goto LABEL_97;
      }
    }
    uint64_t v87 = v15 * v221;
    __src = v223;
    *(void *)(a1 + 1088) = v95;
    *(void *)(a1 + 1096) = v86;
    *(void *)(a1 + 1104) = &v94[8 * v93];
    if (v84) {
      goto LABEL_108;
    }
LABEL_109:
    *(void *)(a1 + 1096) = v86;
    uint64_t v106 = __src[58] + 4 * v87;
    uint64_t v107 = *(uint64_t **)(a1 + 1120);
    unint64_t v108 = *(void *)(a1 + 1128);
    if ((unint64_t)v107 < v108)
    {
      *uint64_t v107 = v106;
      uint64_t v109 = (uint64_t)(v107 + 1);
      goto LABEL_132;
    }
    float v110 = *v215;
    uint64_t v111 = (char *)v107 - (char *)*v215;
    uint64_t v112 = v111 >> 3;
    unint64_t v113 = (v111 >> 3) + 1;
    if (v113 >> 61) {
      sub_19E13D694();
    }
    uint64_t v114 = v108 - (void)v110;
    if (v114 >> 2 > v113) {
      unint64_t v113 = v114 >> 2;
    }
    if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v115 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v115 = v113;
    }
    if (v115)
    {
      if (v115 >> 61) {
        sub_19E13C418();
      }
      float v116 = operator new(8 * v115);
      float v117 = (uint64_t *)&v116[8 * v112];
      *float v117 = v106;
      uint64_t v109 = (uint64_t)(v117 + 1);
      if (v107 != v110)
      {
LABEL_120:
        unint64_t v118 = (char *)(v107 - 1) - (char *)v110;
        if (v118 >= 0x58)
        {
          unint64_t v119 = (char *)v107 - &v116[v111];
          __src = v223;
          if (v119 >= 0x20)
          {
            uint64_t v120 = (v118 >> 3) + 1;
            uint64_t v121 = 8 * (v120 & 0x3FFFFFFFFFFFFFFCLL);
            float32x4_t v122 = &v107[v121 / 0xFFFFFFFFFFFFFFF8];
            float v117 = (uint64_t *)((char *)v117 - v121);
            BOOL v123 = &v116[8 * v112 - 16];
            unint64_t v124 = v107 - 2;
            uint64_t v125 = v120 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v126 = *(_OWORD *)v124;
              *(v123 - 1) = *((_OWORD *)v124 - 1);
              _OWORD *v123 = v126;
              v123 -= 2;
              v124 -= 4;
              v125 -= 4;
            }
            while (v125);
            uint64_t v107 = v122;
            if (v120 == (v120 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_130:
              uint64_t v107 = *v215;
              *(void *)(a1 + 1112) = v117;
              *(void *)(a1 + 1120) = v109;
              *(void *)(a1 + 1128) = &v116[8 * v115];
              if (!v107) {
                goto LABEL_132;
              }
LABEL_131:
              operator delete(v107);
              goto LABEL_132;
            }
          }
        }
        else
        {
          __src = v223;
        }
        do
        {
          uint64_t v127 = *--v107;
          *--float v117 = v127;
        }
        while (v107 != v110);
        goto LABEL_130;
      }
    }
    else
    {
      float v116 = 0;
      float v117 = (uint64_t *)(8 * v112);
      *(void *)(8 * v112) = v106;
      uint64_t v109 = 8 * v112 + 8;
      if (v107 != v110) {
        goto LABEL_120;
      }
    }
    __src = v223;
    *(void *)(a1 + 1112) = v117;
    *(void *)(a1 + 1120) = v109;
    *(void *)(a1 + 1128) = &v116[8 * v115];
    if (v107) {
      goto LABEL_131;
    }
LABEL_132:
    *(void *)(a1 + 1120) = v109;
    uint64_t v128 = __src[59] + 4 * (v220 * v15);
    uint64_t v129 = *(uint64_t **)(a1 + 1168);
    unint64_t v130 = *(void *)(a1 + 1176);
    if ((unint64_t)v129 < v130)
    {
      *uint64_t v129 = v128;
      uint64_t v131 = (uint64_t)(v129 + 1);
      goto LABEL_155;
    }
    int v132 = *v214;
    uint64_t v133 = (char *)v129 - (char *)*v214;
    uint64_t v134 = v133 >> 3;
    unint64_t v135 = (v133 >> 3) + 1;
    if (v135 >> 61) {
      sub_19E13D694();
    }
    uint64_t v136 = v130 - (void)v132;
    if (v136 >> 2 > v135) {
      unint64_t v135 = v136 >> 2;
    }
    if ((unint64_t)v136 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v137 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v137 = v135;
    }
    if (v137)
    {
      if (v137 >> 61) {
        sub_19E13C418();
      }
      uint64_t v138 = operator new(8 * v137);
      uint64_t v139 = (uint64_t *)&v138[8 * v134];
      *uint64_t v139 = v128;
      uint64_t v131 = (uint64_t)(v139 + 1);
      if (v129 != v132)
      {
LABEL_143:
        unint64_t v140 = (char *)(v129 - 1) - (char *)v132;
        if (v140 >= 0x58)
        {
          unint64_t v141 = (char *)v129 - &v138[v133];
          __src = v223;
          if (v141 >= 0x20)
          {
            uint64_t v142 = (v140 >> 3) + 1;
            uint64_t v143 = 8 * (v142 & 0x3FFFFFFFFFFFFFFCLL);
            unint64_t v144 = &v129[v143 / 0xFFFFFFFFFFFFFFF8];
            uint64_t v139 = (uint64_t *)((char *)v139 - v143);
            uint64_t v145 = &v138[8 * v134 - 16];
            unint64_t v146 = v129 - 2;
            uint64_t v147 = v142 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v148 = *(_OWORD *)v146;
              *(v145 - 1) = *((_OWORD *)v146 - 1);
              *uint64_t v145 = v148;
              v145 -= 2;
              v146 -= 4;
              v147 -= 4;
            }
            while (v147);
            uint64_t v129 = v144;
            if (v142 == (v142 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_153:
              uint64_t v129 = *v214;
              *(void *)(a1 + 1160) = v139;
              *(void *)(a1 + 1168) = v131;
              *(void *)(a1 + 1176) = &v138[8 * v137];
              if (!v129) {
                goto LABEL_155;
              }
LABEL_154:
              operator delete(v129);
              goto LABEL_155;
            }
          }
        }
        else
        {
          __src = v223;
        }
        do
        {
          uint64_t v149 = *--v129;
          *--uint64_t v139 = v149;
        }
        while (v129 != v132);
        goto LABEL_153;
      }
    }
    else
    {
      uint64_t v138 = 0;
      uint64_t v139 = (uint64_t *)(8 * v134);
      *(void *)(8 * v134) = v128;
      uint64_t v131 = 8 * v134 + 8;
      if (v129 != v132) {
        goto LABEL_143;
      }
    }
    __src = v223;
    *(void *)(a1 + 1160) = v139;
    *(void *)(a1 + 1168) = v131;
    *(void *)(a1 + 1176) = &v138[8 * v137];
    if (v129) {
      goto LABEL_154;
    }
LABEL_155:
    *(void *)(a1 + 1168) = v131;
    uint64_t v150 = __src[74] + 4 * v60;
    unint64_t v151 = *(uint64_t **)(a1 + 1144);
    unint64_t v152 = *(void *)(a1 + 1152);
    if ((unint64_t)v151 < v152)
    {
      *unint64_t v151 = v150;
      uint64_t v153 = (uint64_t)(v151 + 1);
      goto LABEL_178;
    }
    uint64_t v154 = *v213;
    uint64_t v155 = (char *)v151 - (char *)*v213;
    uint64_t v156 = v155 >> 3;
    unint64_t v157 = (v155 >> 3) + 1;
    if (v157 >> 61) {
      sub_19E13D694();
    }
    uint64_t v158 = v152 - (void)v154;
    if (v158 >> 2 > v157) {
      unint64_t v157 = v158 >> 2;
    }
    if ((unint64_t)v158 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v159 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v159 = v157;
    }
    if (v159)
    {
      if (v159 >> 61) {
        sub_19E13C418();
      }
      int v160 = operator new(8 * v159);
      unint64_t v161 = (uint64_t *)&v160[8 * v156];
      *unint64_t v161 = v150;
      uint64_t v153 = (uint64_t)(v161 + 1);
      if (v151 != v154)
      {
LABEL_166:
        unint64_t v162 = (char *)(v151 - 1) - (char *)v154;
        if (v162 >= 0x58)
        {
          unint64_t v163 = (char *)v151 - &v160[v155];
          __src = v223;
          if (v163 >= 0x20)
          {
            uint64_t v164 = (v162 >> 3) + 1;
            uint64_t v165 = 8 * (v164 & 0x3FFFFFFFFFFFFFFCLL);
            unint64_t v166 = &v151[v165 / 0xFFFFFFFFFFFFFFF8];
            unint64_t v161 = (uint64_t *)((char *)v161 - v165);
            uint64_t v167 = &v160[8 * v156 - 16];
            long long v168 = v151 - 2;
            uint64_t v169 = v164 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v170 = *(_OWORD *)v168;
              *(v167 - 1) = *((_OWORD *)v168 - 1);
              _OWORD *v167 = v170;
              v167 -= 2;
              v168 -= 4;
              v169 -= 4;
            }
            while (v169);
            unint64_t v151 = v166;
            if (v164 == (v164 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_176:
              unint64_t v151 = *v213;
              *(void *)(a1 + 1136) = v161;
              *(void *)(a1 + 1144) = v153;
              *(void *)(a1 + 1152) = &v160[8 * v159];
              if (!v151) {
                goto LABEL_178;
              }
LABEL_177:
              operator delete(v151);
              goto LABEL_178;
            }
          }
        }
        else
        {
          __src = v223;
        }
        do
        {
          uint64_t v171 = *--v151;
          *--unint64_t v161 = v171;
        }
        while (v151 != v154);
        goto LABEL_176;
      }
    }
    else
    {
      int v160 = 0;
      unint64_t v161 = (uint64_t *)(8 * v156);
      *(void *)(8 * v156) = v150;
      uint64_t v153 = 8 * v156 + 8;
      if (v151 != v154) {
        goto LABEL_166;
      }
    }
    __src = v223;
    *(void *)(a1 + 1136) = v161;
    *(void *)(a1 + 1144) = v153;
    *(void *)(a1 + 1152) = &v160[8 * v159];
    if (v151) {
      goto LABEL_177;
    }
LABEL_178:
    *(void *)(a1 + 1144) = v153;
    uint64_t v172 = __src[75] + 4 * v60;
    uint64_t v173 = *(uint64_t **)(a1 + 1192);
    unint64_t v174 = *(void *)(a1 + 1200);
    if ((unint64_t)v173 < v174)
    {
      uint64_t *v173 = v172;
      uint64_t v17 = (uint64_t)(v173 + 1);
      goto LABEL_18;
    }
    uint64_t v175 = *v212;
    uint64_t v176 = (char *)v173 - (char *)*v212;
    uint64_t v177 = v176 >> 3;
    unint64_t v178 = (v176 >> 3) + 1;
    if (v178 >> 61) {
      sub_19E13D694();
    }
    uint64_t v179 = v174 - (void)v175;
    if (v179 >> 2 > v178) {
      unint64_t v178 = v179 >> 2;
    }
    if ((unint64_t)v179 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v180 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v180 = v178;
    }
    if (v180)
    {
      if (v180 >> 61) {
        sub_19E13C418();
      }
      uint64_t v181 = operator new(8 * v180);
      unint64_t v182 = (uint64_t *)&v181[8 * v177];
      *unint64_t v182 = v172;
      uint64_t v17 = (uint64_t)(v182 + 1);
      if (v173 == v175)
      {
LABEL_197:
        *(void *)(a1 + 1184) = v182;
        *(void *)(a1 + 1192) = v17;
        *(void *)(a1 + 1200) = &v181[8 * v180];
        if (!v173) {
          goto LABEL_18;
        }
LABEL_198:
        operator delete(v173);
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v181 = 0;
      unint64_t v182 = (uint64_t *)(8 * v177);
      *(void *)(8 * v177) = v172;
      uint64_t v17 = 8 * v177 + 8;
      if (v173 == v175) {
        goto LABEL_197;
      }
    }
    unint64_t v183 = (char *)(v173 - 1) - (char *)v175;
    if (v183 < 0x58) {
      goto LABEL_254;
    }
    if ((unint64_t)((char *)v173 - &v181[v176]) < 0x20) {
      goto LABEL_254;
    }
    uint64_t v184 = (v183 >> 3) + 1;
    uint64_t v185 = 8 * (v184 & 0x3FFFFFFFFFFFFFFCLL);
    int v186 = &v173[v185 / 0xFFFFFFFFFFFFFFF8];
    unint64_t v182 = (uint64_t *)((char *)v182 - v185);
    uint64_t v187 = &v181[8 * v177 - 16];
    unint64_t v188 = v173 - 2;
    uint64_t v189 = v184 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v190 = *(_OWORD *)v188;
      *(v187 - 1) = *((_OWORD *)v188 - 1);
      *uint64_t v187 = v190;
      v187 -= 2;
      v188 -= 4;
      v189 -= 4;
    }
    while (v189);
    uint64_t v173 = v186;
    if (v184 != (v184 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_254:
      do
      {
        uint64_t v191 = *--v173;
        *--unint64_t v182 = v191;
      }
      while (v173 != v175);
    }
    uint64_t v173 = *v212;
    *(void *)(a1 + 1184) = v182;
    *(void *)(a1 + 1192) = v17;
    *(void *)(a1 + 1200) = &v181[8 * v180];
    if (v173) {
      goto LABEL_198;
    }
LABEL_18:
    *(void *)(a1 + 1192) = v17;
    ++v15;
  }
  while (v15 != 4);
  uint64_t v192 = __src[61];
  *(void *)__srca = __src[60];
  *(void *)&__srca[8] = *(void *)__srca + 4 * v222;
  *(void *)&__srca[16] = *(void *)__srca + 8 * v222;
  uint64_t v193 = *(void *)(a1 + 1224);
  uint64_t v194 = *(char **)(a1 + 1208);
  if ((unint64_t)(v193 - (void)v194) >= 0x18)
  {
    float32x4_t v197 = *(char **)(a1 + 1216);
    int64_t v198 = v197 - v194;
    if ((unint64_t)(v197 - v194) > 0x17) {
      goto LABEL_213;
    }
    uint64_t v199 = &__srca[v198];
    if (v197 != v194)
    {
      memcpy(*(void **)(a1 + 1208), __srca, v197 - v194);
      uint64_t v194 = *(char **)(a1 + 1216);
    }
    size_t v200 = 24 - v198;
    memcpy(v194, v199, v200);
  }
  else
  {
    if (v194)
    {
      *(void *)(a1 + 1216) = v194;
      operator delete(v194);
      uint64_t v193 = 0;
      *(void *)(a1 + 1208) = 0;
      *(void *)(a1 + 1216) = 0;
      *(void *)(a1 + 1224) = 0;
    }
    uint64_t v195 = v193 >> 2;
    if ((unint64_t)(v193 >> 2) <= 3) {
      uint64_t v195 = 3;
    }
    if ((unint64_t)v193 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v196 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v196 = v195;
    }
    if (v196 >> 61) {
      sub_19E13D694();
    }
    uint64_t v194 = (char *)operator new(8 * v196);
    *(void *)(a1 + 1208) = v194;
    *(void *)(a1 + 1216) = v194;
    *(void *)(a1 + 1224) = &v194[8 * v196];
LABEL_213:
    *(_OWORD *)uint64_t v194 = *(_OWORD *)__srca;
    *((void *)v194 + 2) = *(void *)&__srca[16];
    size_t v200 = 24;
  }
  *(void *)(a1 + 1216) = &v194[v200];
  *(void *)__srca = v192;
  *(void *)&__srca[8] = v192 + 4 * v222;
  *(void *)&__srca[16] = v192 + 8 * v222;
  uint64_t v201 = *(void *)(a1 + 1248);
  int v202 = *(char **)(a1 + 1232);
  if ((unint64_t)(v201 - (void)v202) >= 0x18)
  {
    uint64_t v205 = *(char **)(a1 + 1240);
    int64_t v206 = v205 - v202;
    if ((unint64_t)(v205 - v202) > 0x17) {
      goto LABEL_228;
    }
    unint64_t v207 = &__srca[v206];
    if (v205 != v202)
    {
      memcpy(*(void **)(a1 + 1232), __srca, v205 - v202);
      int v202 = *(char **)(a1 + 1240);
    }
    size_t v208 = 24 - v206;
    memcpy(v202, v207, v208);
    uint64_t v209 = v208 >> 3;
  }
  else
  {
    if (v202)
    {
      *(void *)(a1 + 1240) = v202;
      operator delete(v202);
      uint64_t v201 = 0;
      *(void *)(a1 + 1232) = 0;
      *(void *)(a1 + 1240) = 0;
      *(void *)(a1 + 1248) = 0;
    }
    uint64_t v203 = v201 >> 2;
    if ((unint64_t)(v201 >> 2) <= 3) {
      uint64_t v203 = 3;
    }
    if ((unint64_t)v201 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v204 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v204 = v203;
    }
    if (v204 >> 61) {
      sub_19E13D694();
    }
    int v202 = (char *)operator new(8 * v204);
    *(void *)(a1 + 1232) = v202;
    *(void *)(a1 + 1240) = v202;
    *(void *)(a1 + 1248) = &v202[8 * v204];
LABEL_228:
    *(_OWORD *)int v202 = *(_OWORD *)__srca;
    *((void *)v202 + 2) = *(void *)&__srca[16];
    uint64_t v209 = 3;
  }
  *(void *)(a1 + 1240) = &v202[8 * v209];
  *(void *)(a1 + 1256) = __src[62];
  *(void *)(a1 + 1264) = __src[63];
  int v210 = *((_DWORD *)__src + 80);
  if (v210 <= 0) {
    int v210 = *((_DWORD *)__src + 64);
  }
  *(_DWORD *)(a1 + 1272) = v210;
  return a1;
}

void sub_19E23ABD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16, void **a17, void **a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v32 = *a9;
  if (*a9)
  {
    v30[155] = v32;
    operator delete(v32);
    unint64_t v33 = *a10;
    if (!*a10)
    {
LABEL_3:
      float v34 = *a11;
      if (!*a11) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else
  {
    unint64_t v33 = *a10;
    if (!*a10) {
      goto LABEL_3;
    }
  }
  v30[152] = v33;
  operator delete(v33);
  float v34 = *a11;
  if (!*a11)
  {
LABEL_4:
    float v35 = *a13;
    if (!*a13) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  v30[149] = v34;
  operator delete(v34);
  float v35 = *a13;
  if (!*a13)
  {
LABEL_5:
    uint64_t v36 = *a12;
    if (!*a12) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  v30[146] = v35;
  operator delete(v35);
  uint64_t v36 = *a12;
  if (!*a12)
  {
LABEL_6:
    long long v37 = *a14;
    if (!*a14) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  v30[143] = v36;
  operator delete(v36);
  long long v37 = *a14;
  if (!*a14)
  {
LABEL_7:
    uint64_t v38 = *a15;
    if (!*a15) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }
LABEL_17:
  v30[140] = v37;
  operator delete(v37);
  uint64_t v38 = *a15;
  if (!*a15)
  {
LABEL_8:
    uint64_t v39 = *a17;
    if (!*a17) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_18:
  v30[137] = v38;
  operator delete(v38);
  uint64_t v39 = *a17;
  if (!*a17)
  {
LABEL_9:
    int64_t v40 = *a16;
    if (!*a16) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }
LABEL_19:
  v30[134] = v39;
  operator delete(v39);
  int64_t v40 = *a16;
  if (!*a16)
  {
LABEL_10:
    unint64_t v41 = *a18;
    if (!*a18) {
      goto LABEL_11;
    }
    goto LABEL_21;
  }
LABEL_20:
  v30[131] = v40;
  operator delete(v40);
  unint64_t v41 = *a18;
  if (!*a18)
  {
LABEL_11:
    sub_19E25BF30((uint64_t)v30);
    _Unwind_Resume(a1);
  }
LABEL_21:
  v30[128] = v41;
  operator delete(v41);
  sub_19E25BF30((uint64_t)v30);
  _Unwind_Resume(a1);
}

BOOL sub_19E23AD9C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1) == 6
      || (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1) == 10;
}

uint64_t sub_19E23AE28(void *a1, uint64_t a2)
{
  uint64_t v4 = (void *)a1[20];
  double v5 = (void *)a1[21];
  if (v4 == v5)
  {
    a1[21] = v4;
    if (!a1[31]) {
      goto LABEL_10;
    }
    goto LABEL_8;
  }
  do
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  while (v4 != v5);
  a1[21] = a1[20];
  if (a1[31])
  {
LABEL_8:
    uint64_t v7 = a1[29];
    size_t v6 = (uint64_t *)a1[30];
    uint64_t v8 = *v6;
    *(void *)(v8 + 8) = *(void *)(v7 + 8);
    **(void **)(v7 + 8) = v8;
    a1[31] = 0;
    if (v6 != a1 + 29)
    {
      do
      {
        unint64_t v9 = (uint64_t *)v6[1];
        operator delete(v6);
        size_t v6 = v9;
      }
      while (v9 != a1 + 29);
    }
  }
LABEL_10:
  if ((*(uint64_t (**)(void *))(*a1 + 104))(a1) == 9
    || (*(uint64_t (**)(void *))(*a1 + 104))(a1) == 10)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, void *))(*(void *)a2 + 40);
    uint64_t v11 = a2;
    uint64_t v12 = a1;
  }
  else
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, void *))(*(void *)a2 + 32);
    uint64_t v11 = a2;
    uint64_t v12 = a1;
  }
  return v10(v11, v12);
}

void sub_19E23AFD8(uint64_t a1, int a2, uint64_t a3)
{
  *(_DWORD *)(a1 + 280) = a3;
  uint64_t v59 = *sub_19E25D8B0(a1, 1);
  long long v58 = *sub_19E25DA90(a1, 9);
  uint64_t v6 = a1 + 232;
  if (*(void *)(a1 + 240) != a1 + 232) {
    sub_19E30A40C();
  }
  int v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 56))(a1, 1) * a3;
  int v61 = v7 / (*(int (**)(uint64_t))(*(void *)a1 + 88))(a1);
  int v56 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 64))(a1, 9);
  int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  int v60 = v56 * (int)a3 / v8;
  if (a2 >= 1)
  {
    int v9 = 0;
    do
    {
      uint64_t v11 = *(uint64_t **)(a1 + 160);
      unint64_t v10 = *(uint64_t **)(a1 + 168);
      while (v11 != v10)
      {
        uint64_t v12 = *v11++;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, a3);
      }
      int v13 = sub_19E25DA90(a1, 9);
      sub_19E23B7C0((void *)a1, (char *)*v13);
      char v14 = sub_19E25D8B0(a1, 1);
      *char v14 = (uint64_t *)((char *)*v14 + 4 * v61);
      uint64_t v15 = sub_19E25DA90(a1, 9);
      float *v15 = (uint64_t *)((char *)*v15 + 4 * v60);
      ++v9;
    }
    while (v9 != a2);
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 240))(a1))
  {
    int v16 = sub_19E25D8B0(a1, 1);
    *int v16 = (uint64_t *)((char *)*v16 - 4 * v61);
    uint64_t v17 = sub_19E25DA90(a1, 9);
    *uint64_t v17 = (uint64_t *)((char *)*v17 - 4 * v60);
    uint64_t v18 = sub_19E25DA90(a1, 9);
    *uint64_t v18 = (uint64_t *)((char *)*v18 + 4 * (v56 / v8 / 2));
    long long v57 = *(_OWORD *)(a1 + 1288);
    *(_OWORD *)(a1 + 1288) = *(_OWORD *)(a1 + 1304);
    unint64_t v74 = 0;
    uint64_t v75 = 0;
    uint64_t v76 = 0;
    unsigned int v19 = *(unsigned char **)(a1 + 1016);
    unint64_t v20 = *(unsigned char **)(a1 + 1024);
    int64_t v21 = v20 - v19;
    if (v20 != v19)
    {
      if (v21 < 0) {
        sub_19E13D694();
      }
      int8x8_t v22 = (char *)operator new(v20 - v19);
      uint64_t v23 = &v22[8 * (v21 >> 3)];
      unint64_t v74 = v22;
      uint64_t v76 = v23;
      memcpy(v22, v19, v21);
      uint64_t v75 = v23;
    }
    float v71 = 0;
    BOOL v72 = 0;
    unint64_t v73 = 0;
    uint64_t v24 = *(unsigned char **)(a1 + 1040);
    unint64_t v25 = *(unsigned char **)(a1 + 1048);
    int64_t v26 = v25 - v24;
    if (v25 != v24)
    {
      if (v26 < 0) {
        sub_19E13D694();
      }
      unint64_t v27 = (char *)operator new(v25 - v24);
      float v28 = &v27[8 * (v26 >> 3)];
      float v71 = v27;
      unint64_t v73 = v28;
      memcpy(v27, v24, v26);
      BOOL v72 = v28;
    }
    unint64_t v68 = 0;
    uint64_t v69 = 0;
    unint64_t v70 = 0;
    float v29 = *(unsigned char **)(a1 + 1064);
    unint64_t v30 = *(unsigned char **)(a1 + 1072);
    int64_t v31 = v30 - v29;
    if (v30 != v29)
    {
      if (v31 < 0) {
        sub_19E13D694();
      }
      uint64_t v32 = (char *)operator new(v30 - v29);
      unint64_t v33 = &v32[8 * (v31 >> 3)];
      unint64_t v68 = v32;
      unint64_t v70 = v33;
      memcpy(v32, v29, v31);
      uint64_t v69 = v33;
    }
    int v65 = 0;
    uint64_t v66 = 0;
    uint64_t v67 = 0;
    float v34 = *(unsigned char **)(a1 + 1088);
    float v35 = *(unsigned char **)(a1 + 1096);
    int64_t v36 = v35 - v34;
    if (v35 != v34)
    {
      if (v36 < 0) {
        sub_19E13D694();
      }
      long long v37 = (char *)operator new(v35 - v34);
      uint64_t v38 = &v37[8 * (v36 >> 3)];
      int v65 = v37;
      uint64_t v67 = v38;
      memcpy(v37, v34, v36);
      uint64_t v66 = v38;
    }
    __p = 0;
    unint64_t v63 = 0;
    uint64_t v64 = 0;
    uint64_t v39 = *(unsigned char **)(a1 + 1208);
    int64_t v40 = *(unsigned char **)(a1 + 1216);
    int64_t v41 = v40 - v39;
    if (v40 != v39)
    {
      if (v41 < 0) {
        sub_19E13D694();
      }
      uint64_t v42 = (char *)operator new(v40 - v39);
      int v43 = &v42[8 * (v41 >> 3)];
      __p = v42;
      uint64_t v64 = v43;
      memcpy(v42, v39, v41);
      unint64_t v63 = v43;
    }
    uint64_t v55 = *(void *)(a1 + 1256);
    sub_19E1E5B9C((void *)(a1 + 1016), *(char **)(a1 + 1112), *(char **)(a1 + 1120), (uint64_t)(*(void *)(a1 + 1120) - *(void *)(a1 + 1112)) >> 3);
    sub_19E1E5B9C((void *)(a1 + 1040), *(char **)(a1 + 1136), *(char **)(a1 + 1144), (uint64_t)(*(void *)(a1 + 1144) - *(void *)(a1 + 1136)) >> 3);
    sub_19E1E5B9C((void *)(a1 + 1064), *(char **)(a1 + 1160), *(char **)(a1 + 1168), (uint64_t)(*(void *)(a1 + 1168) - *(void *)(a1 + 1160)) >> 3);
    sub_19E1E5B9C((void *)(a1 + 1088), *(char **)(a1 + 1184), *(char **)(a1 + 1192), (uint64_t)(*(void *)(a1 + 1192) - *(void *)(a1 + 1184)) >> 3);
    sub_19E1E5B9C((void *)(a1 + 1208), *(char **)(a1 + 1232), *(char **)(a1 + 1240), (uint64_t)(*(void *)(a1 + 1240) - *(void *)(a1 + 1232)) >> 3);
    unint64_t v51 = (char **)(a1 + 1040);
    uint64_t v52 = (void **)(a1 + 1064);
    uint64_t v53 = (void **)(a1 + 1088);
    float v54 = (void **)(a1 + 1208);
    *(void *)(a1 + 1256) = *(void *)(a1 + 1264);
    if (a2 >= 1)
    {
      int v44 = 0;
      do
      {
        uint64_t v45 = *(void **)(a1 + 160);
        for (int i = *(void **)(a1 + 168); v45 != i; ++v45)
          (*(void (**)(void, uint64_t))(*(void *)*v45 + 16))(*v45, a3);
        uint64_t v47 = sub_19E25DA90(a1, 9);
        sub_19E23B7C0((void *)a1, (char *)*v47);
        unint64_t v48 = sub_19E25D8B0(a1, 1);
        *unint64_t v48 = (uint64_t *)((char *)*v48 - 4 * v61);
        float v49 = sub_19E25DA90(a1, 9);
        *float v49 = (uint64_t *)((char *)*v49 - 4 * v60);
        ++v44;
      }
      while (v44 != a2);
    }
    *(_OWORD *)(a1 + 1288) = v57;
    if ((char **)(a1 + 1016) != &v74) {
      sub_19E1E5B9C((void *)(a1 + 1016), v74, v75, (v75 - v74) >> 3);
    }
    if (v51 != &v71) {
      sub_19E1E5B9C(v51, v71, v72, (v72 - v71) >> 3);
    }
    if (v52 != &v68) {
      sub_19E1E5B9C(v52, (char *)v68, v69, (v69 - (unsigned char *)v68) >> 3);
    }
    if (v53 != &v65) {
      sub_19E1E5B9C(v53, (char *)v65, v66, (v66 - (unsigned char *)v65) >> 3);
    }
    if (v54 != &__p) {
      sub_19E1E5B9C(v54, (char *)__p, v63, (v63 - (unsigned char *)__p) >> 3);
    }
    *(void *)(a1 + 1256) = v55;
    if (__p)
    {
      unint64_t v63 = (char *)__p;
      operator delete(__p);
    }
    if (v65)
    {
      uint64_t v66 = (char *)v65;
      operator delete(v65);
    }
    if (v68)
    {
      uint64_t v69 = (char *)v68;
      operator delete(v68);
    }
    if (v71)
    {
      BOOL v72 = v71;
      operator delete(v71);
    }
    if (v74)
    {
      uint64_t v75 = v74;
      operator delete(v74);
    }
  }
  for (uint64_t j = *(void *)(a1 + 240); j != v6; uint64_t j = *(void *)(j + 8))
  {
    sub_19E30A424(*(void *)(a1 + 8), *(_DWORD *)(j + 16) * a3, *(void **)(j + 24));
    *(void *)(j + 24) = 0;
  }
  *sub_19E25D8B0(a1, 1) = v59;
  *sub_19E25DA90(a1, 9) = v58;
  sub_19E25C0FC(a1);
}

void sub_19E23B6F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  if (__p)
  {
    operator delete(__p);
    unint64_t v30 = a24;
    if (!a24)
    {
LABEL_3:
      int64_t v31 = a27;
      if (!a27) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else
  {
    unint64_t v30 = a24;
    if (!a24) {
      goto LABEL_3;
    }
  }
  operator delete(v30);
  int64_t v31 = a27;
  if (!a27)
  {
LABEL_4:
    uint64_t v32 = *(void **)(v28 - 136);
    if (!v32) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v31);
  uint64_t v32 = *(void **)(v28 - 136);
  if (!v32)
  {
LABEL_5:
    unint64_t v33 = *(void **)(v28 - 112);
    if (!v33) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_11:
  *(void *)(v28 - 128) = v32;
  operator delete(v32);
  unint64_t v33 = *(void **)(v28 - 112);
  if (!v33) {
LABEL_7:
  }
    _Unwind_Resume(exception_object);
LABEL_6:
  *(void *)(v28 - 104) = v33;
  operator delete(v33);
  goto LABEL_7;
}

void *sub_19E23B7C0(void *a1, char *a2)
{
  BOOL result = (void *)(*(uint64_t (**)(void *))(*a1 + 240))(a1);
  if (result)
  {
    if (*((int *)a1 + 70) >= 1)
    {
      int v5 = 0;
      uint64_t v6 = (char *)a1[161];
      do
      {
        int v7 = (*(uint64_t (**)(void *, uint64_t))(*a1 + 80))(a1, 9);
        int v8 = (*(uint64_t (**)(void *))(*a1 + 88))(a1);
        memmove(a2, v6, v8 * v7);
        a2 += (*(int (**)(void *, uint64_t))(*a1 + 64))(a1, 9);
        int v9 = (*(uint64_t (**)(void *, uint64_t))(*a1 + 80))(a1, 9);
        BOOL result = (void *)(*(uint64_t (**)(void *))(*a1 + 88))(a1);
        v6 += (int)result * v9;
        ++v5;
      }
      while (v5 < *((_DWORD *)a1 + 70));
    }
  }
  else
  {
    unint64_t v10 = (const void *)a1[161];
    int v11 = (*(uint64_t (**)(void *, uint64_t))(*a1 + 80))(a1, 9);
    size_t v12 = *((int *)a1 + 70) * (uint64_t)(int)((*(uint64_t (**)(void *))(*a1 + 88))(a1) * v11);
    return memmove(a2, v10, v12);
  }
  return result;
}

void sub_19E23B9D0(uint64_t a1, uint64_t a2, int a3)
{
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 80))(a1, 9);
  int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1) * v6;
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1) == 9
    || (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1) == 10)
  {
    int v8 = 0;
  }
  else
  {
    int v9 = *(_DWORD *)(a1 + 1272);
    int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1) * v9;
  }
  int v10 = v8 + v7;
  char v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 240))(a1);
  __p = 0;
  int64_t v36 = 0;
  long long v37 = 0;
  if (v10)
  {
    if (v10 < 0) {
      sub_19E13D694();
    }
    size_t v12 = v10 << v11;
    int v13 = (char *)operator new(v12);
    __p = v13;
    long long v37 = &v13[v12];
    bzero(v13, v12);
    int64_t v36 = &v13[v12];
  }
  else
  {
    int v13 = 0;
  }
  uint64_t v14 = *(void *)(a1 + 1288);
  int v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 80))(a1, 9);
  int v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 80))(a1, 9);
  int v17 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  memmove(v13, (const void *)(v14 + 4 * v15 * a3), v17 * v16);
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 240))(a1))
  {
    int v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 80))(a1, 9);
    int v19 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
    uint64_t v20 = *(void *)(a1 + 1304);
    int v21 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 80))(a1, 9);
    int v22 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 80))(a1, 9);
    int v23 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
    v13 += v19 * v18;
    memmove(v13, (const void *)(v20 + 4 * v21 * a3), v23 * v22);
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1) != 9
    && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1) != 10)
  {
    int v24 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 80))(a1, 9);
    int v25 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
    uint64_t v26 = *(void *)(a1 + 1296);
    int v27 = *(_DWORD *)(a1 + 1272);
    int v28 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
    float v29 = &v13[v25 * v24];
    memmove(v29, (const void *)(v26 + 4 * v27 * a3), v28 * v27);
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 240))(a1))
    {
      int v30 = *(_DWORD *)(a1 + 1272);
      int v31 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
      uint64_t v32 = *(void *)(a1 + 1312);
      int v33 = *(_DWORD *)(a1 + 1272);
      int v34 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
      memmove(&v29[v30 * (uint64_t)v31], (const void *)(v32 + 4 * v33 * a3), v34 * v33);
    }
  }
  sub_19E253694((uint64_t **)(a2 + 16), (long long *)(a1 + 256), (char **)&__p);
  if (__p)
  {
    int64_t v36 = (char *)__p;
    operator delete(__p);
  }
}

void sub_19E23BF34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E23BF54(uint64_t a1, const __CFArray *a2, int a3)
{
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 80))(a1, 9);
  int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1) * v6;
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1) == 9
    || (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1) == 10)
  {
    int v8 = 0;
  }
  else
  {
    int v9 = *(_DWORD *)(a1 + 1272);
    int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1) * v9;
  }
  int v10 = (v8 + v7) << (*(uint64_t (**)(uint64_t))(*(void *)a1 + 240))(a1);
  int v11 = *(_DWORD *)(a1 + 280);
  size_t v12 = *(void **)(a1 + 1280);
  if (v11 != a3)
  {
    if (v12) {
      sub_19E30A424(*(void *)(a1 + 8), v10 * v11, v12);
    }
LABEL_10:
    sub_19E30A40C();
  }
  if (!v12) {
    goto LABEL_10;
  }
  if (a2)
  {
    if (a3 >= 1)
    {
      CFIndex v13 = 0;
      do
      {
        uint64_t v14 = *(void *)(a1 + 1288);
        int v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 80))(a1, 9);
        int v16 = (char *)(v14 + (int)(v15 * v13 * (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1)));
        ValueAtIndex = CFArrayGetValueAtIndex(a2, v13);
        int v18 = sub_19E2533F8((uint64_t)ValueAtIndex + 16, (const void **)(a1 + 256));
        int v19 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 80))(a1, 9);
        int v20 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
        memmove(v16, v18, v20 * v19);
        if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 240))(a1))
        {
          int v21 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 80))(a1, 9);
          v16 += (int)(v21 * a3 * (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1));
          int v22 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 80))(a1, 9);
          int v18 = (uint64_t *)((char *)v18 + (int)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1) * v22));
          int v23 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 80))(a1, 9);
          int v24 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
          memmove(v16, v18, v24 * v23);
        }
        if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1) != 9
          && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1) != 10)
        {
          int v25 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 80))(a1, 9);
          uint64_t v26 = &v16[(int)(v25 * a3 * (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1))];
          int v27 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 80))(a1, 9);
          int v28 = (char *)v18 + (int)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1) * v27);
          int v29 = *(_DWORD *)(a1 + 1272);
          int v30 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
          memmove(v26, v28, v29 * (uint64_t)v30);
          if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 240))(a1))
          {
            int v31 = *(_DWORD *)(a1 + 1272);
            uint64_t v32 = &v26[(int)(v31 * a3 * (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1))];
            int v33 = *(_DWORD *)(a1 + 1272);
            int v34 = &v28[v33 * (uint64_t)(*(int (**)(uint64_t))(*(void *)a1 + 88))(a1)];
            int v35 = *(_DWORD *)(a1 + 1272);
            int v36 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
            memmove(v32, v34, v35 * (uint64_t)v36);
          }
        }
        ++v13;
      }
      while (a3 != v13);
    }
  }
  else
  {
    long long v37 = *(void **)(a1 + 1280);
    bzero(v37, v10 * a3);
  }
}

void sub_19E23C774(uint64_t a1)
{
  sub_19E25C0FC(a1);
  int v2 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 80))(a1, 9);
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1) == 9
    || (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1) == 10)
  {
    int v4 = 0;
  }
  else
  {
    int v5 = *(_DWORD *)(a1 + 1272);
    int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1) * v5;
  }
  int v6 = v4 + v3 * v2;
  char v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 240))(a1);
  sub_19E30A424(*(void *)(a1 + 8), (v6 << v7) * *(_DWORD *)(a1 + 280), *(void **)(a1 + 1280));
  *(void *)(a1 + 1280) = 0;
}

uint64_t sub_19E23C8DC(uint64_t a1)
{
  uint64_t v2 = sub_19E25C198(a1);
  if (*(void *)(a1 + 1280))
  {
    int v3 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 80))(a1, 9);
    int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1) * v3;
    if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1) == 9
      || (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1) == 10)
    {
      int v5 = 0;
    }
    else
    {
      int v6 = *(_DWORD *)(a1 + 1272);
      int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1) * v6;
    }
    return (v2
                        + ((v5 + v4) << (*(uint64_t (**)(uint64_t))(*(void *)a1 + 240))(a1))
                        * *(_DWORD *)(a1 + 280));
  }
  return v2;
}

int64x2_t sub_19E23CA44(int *a1, int a2)
{
  uint64_t v4 = a1[142];
  char v5 = (*(uint64_t (**)(int *))(*(void *)a1 + 240))(a1);
  int v6 = (*(uint64_t (**)(int *))(*(void *)a1 + 224))(a1);
  int v7 = (*(uint64_t (**)(int *, uint64_t))(*(void *)a1 + 216))(a1, 1);
  int v9 = (uint64_t **)(a1 + 12);
  int v8 = (char *)*((void *)a1 + 6);
  if (v8)
  {
    while (1)
    {
      while (1)
      {
        int v10 = v8;
        int v11 = *((_DWORD *)v8 + 8);
        if (v11 <= a2) {
          break;
        }
        int v8 = *(char **)v10;
        int v9 = (uint64_t **)v10;
        if (!*(void *)v10) {
          goto LABEL_8;
        }
      }
      if (v11 >= a2) {
        break;
      }
      int v8 = (char *)*((void *)v10 + 1);
      if (!v8)
      {
        int v9 = (uint64_t **)(v10 + 8);
        goto LABEL_8;
      }
    }
  }
  else
  {
    int v10 = (char *)(a1 + 12);
LABEL_8:
    size_t v12 = v10;
    int v10 = (char *)operator new(0x50uLL);
    *((_DWORD *)v10 + 8) = a2;
    *(_OWORD *)(v10 + 40) = 0u;
    *(_OWORD *)(v10 + 56) = 0u;
    *((void *)v10 + 9) = 0;
    *(void *)int v10 = 0;
    *((void *)v10 + 1) = 0;
    *((void *)v10 + 2) = v12;
    *int v9 = (uint64_t *)v10;
    uint64_t v13 = **((void **)a1 + 5);
    uint64_t v14 = (uint64_t *)v10;
    if (v13)
    {
      *((void *)a1 + 5) = v13;
      uint64_t v14 = *v9;
    }
    sub_19E13C8A0(*((uint64_t **)a1 + 6), v14);
    ++*((void *)a1 + 7);
  }
  int64x2_t result = vdupq_n_s64(1uLL);
  *(int64x2_t *)(v10 + 40) = result;
  *((void *)v10 + 7) = v4 << v5;
  *((void *)v10 + 8) = v6;
  *((void *)v10 + 9) = v7;
  return result;
}

uint64_t sub_19E23CBCC(void *a1)
{
  *a1 = &unk_1EF0AB870;
  sub_19E23F758((uint64_t)a1);
  uint64_t v2 = (void *)a1[154];
  if (v2)
  {
    a1[155] = v2;
    operator delete(v2);
  }
  int v3 = (void *)a1[151];
  if (v3)
  {
    a1[152] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[148];
  if (v4)
  {
    a1[149] = v4;
    operator delete(v4);
  }
  char v5 = (void *)a1[145];
  if (v5)
  {
    a1[146] = v5;
    operator delete(v5);
  }
  int v6 = (void *)a1[142];
  if (v6)
  {
    a1[143] = v6;
    operator delete(v6);
  }
  int v7 = (void *)a1[139];
  if (v7)
  {
    a1[140] = v7;
    operator delete(v7);
  }
  int v8 = (void *)a1[136];
  if (v8)
  {
    a1[137] = v8;
    operator delete(v8);
  }
  int v9 = (void *)a1[133];
  if (v9)
  {
    a1[134] = v9;
    operator delete(v9);
  }
  int v10 = (void *)a1[130];
  if (v10)
  {
    a1[131] = v10;
    operator delete(v10);
  }
  int v11 = (void *)a1[127];
  if (v11)
  {
    a1[128] = v11;
    operator delete(v11);
  }

  return sub_19E25E4C4((uint64_t)a1);
}

void sub_19E23CCC8(void *a1)
{
  double v1 = (void *)sub_19E23CBCC(a1);

  operator delete(v1);
}

uint64_t sub_19E23CCF0(uint64_t a1, uint64_t a2, uint64_t a3, void *__src)
{
  *(void *)uint64_t v231 = *MEMORY[0x1E4F143B8];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_19E13C2D0(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    uint64_t v226 = *(void *)(a2 + 16);
  }
  sub_19E25E2E0(a1, (long long *)__p, a3, __src);
  if (SHIBYTE(v226) < 0) {
    operator delete(__p[0]);
  }
  *(void *)a1 = &unk_1EF0AB870;
  uint64_t v218 = (uint64_t **)(a1 + 1040);
  uint64_t v219 = (char **)(a1 + 1064);
  unint64_t v216 = (char **)(a1 + 1112);
  unint64_t v217 = (uint64_t **)(a1 + 1088);
  unint64_t v214 = (uint64_t **)(a1 + 1136);
  uint64_t v215 = (char **)(a1 + 1160);
  float32x4_t v213 = (uint64_t **)(a1 + 1184);
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  int v220 = (uint64_t **)(a1 + 1016);
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_OWORD *)(a1 + 1296) = 0u;
  *(void *)(a1 + 1312) = 0;
  unint64_t v7 = __src[7];
  if (v7 <= 1) {
    unint64_t v7 = 1;
  }
  *(void *)(a1 + 1320) = v7;
  uint64_t v8 = __src[9];
  if (!v8) {
    uint64_t v8 = 2;
  }
  *(void *)(a1 + 1328) = v8;
  unint64_t v9 = __src[8];
  if (v9 <= 1) {
    unint64_t v9 = 1;
  }
  *(void *)(a1 + 1336) = v9;
  unint64_t v10 = __src[10];
  if (v10 <= 1) {
    unint64_t v10 = 1;
  }
  *(void *)(a1 + 1344) = v10;
  uint64_t v11 = __src[11];
  if (!v11) {
    uint64_t v11 = 2;
  }
  *(void *)(a1 + 1352) = v11;
  uint64_t v12 = *((int *)__src + 32);
  *(_DWORD *)__srca = 1;
  *(int64x2_t *)&__srca[8] = vdupq_n_s64(1uLL);
  uint64_t v229 = 0;
  uint64_t v230 = 0;
  uint64_t v228 = v12;
  sub_19E13C5C0(a1 + 16, (int *)__srca, v231);
  int v13 = *((_DWORD *)__src + 64);
  char v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 240))(a1);
  *(_DWORD *)__srca = 9;
  *(int64x2_t *)&__srca[8] = vdupq_n_s64(1uLL);
  uint64_t v229 = 0;
  uint64_t v230 = 0;
  uint64_t v228 = v13 << v14;
  sub_19E13C5C0(a1 + 40, (int *)__srca, v231);
  uint64_t v15 = 0;
  int v16 = *((_DWORD *)__src + 64);
  uint64_t v222 = v16 * (uint64_t)*((int *)__src + 32);
  uint64_t v223 = v16;
  int v221 = v16 * v16;
  uint64_t v224 = __src;
  do
  {
    uint64_t v18 = __src[56] + v15 * v222;
    int v19 = *(uint64_t **)(a1 + 1024);
    unint64_t v20 = *(void *)(a1 + 1032);
    if ((unint64_t)v19 < v20)
    {
      *int v19 = v18;
      uint64_t v21 = (uint64_t)(v19 + 1);
      goto LABEL_41;
    }
    int v22 = *v220;
    uint64_t v23 = (char *)v19 - (char *)*v220;
    uint64_t v24 = v23 >> 3;
    unint64_t v25 = (v23 >> 3) + 1;
    if (v25 >> 61) {
      sub_19E13D694();
    }
    uint64_t v26 = v20 - (void)v22;
    if (v26 >> 2 > v25) {
      unint64_t v25 = v26 >> 2;
    }
    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v27 = v25;
    }
    if (v27)
    {
      if (v27 >> 61) {
        sub_19E13C418();
      }
      int v28 = operator new(8 * v27);
      int v29 = (uint64_t *)&v28[8 * v24];
      uint64_t *v29 = v18;
      uint64_t v21 = (uint64_t)(v29 + 1);
      if (v19 == v22)
      {
LABEL_39:
        *(void *)(a1 + 1016) = v29;
        *(void *)(a1 + 1024) = v21;
        *(void *)(a1 + 1032) = &v28[8 * v27];
        if (!v19) {
          goto LABEL_41;
        }
LABEL_40:
        operator delete(v19);
        goto LABEL_41;
      }
    }
    else
    {
      int v28 = 0;
      int v29 = (uint64_t *)(8 * v24);
      *(void *)(8 * v24) = v18;
      uint64_t v21 = 8 * v24 + 8;
      if (v19 == v22) {
        goto LABEL_39;
      }
    }
    unint64_t v30 = (char *)(v19 - 1) - (char *)v22;
    if (v30 < 0x58) {
      goto LABEL_252;
    }
    if ((unint64_t)((char *)v19 - &v28[v23]) < 0x20) {
      goto LABEL_252;
    }
    uint64_t v31 = (v30 >> 3) + 1;
    uint64_t v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
    int v33 = &v19[v32 / 0xFFFFFFFFFFFFFFF8];
    int v29 = (uint64_t *)((char *)v29 - v32);
    int v34 = &v28[8 * v24 - 16];
    int v35 = v19 - 2;
    uint64_t v36 = v31 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v37 = *(_OWORD *)v35;
      *(v34 - 1) = *((_OWORD *)v35 - 1);
      _OWORD *v34 = v37;
      v34 -= 2;
      v35 -= 4;
      v36 -= 4;
    }
    while (v36);
    int v19 = v33;
    if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_252:
      do
      {
        uint64_t v38 = *--v19;
        *--int v29 = v38;
      }
      while (v19 != v22);
    }
    int v19 = *v220;
    *(void *)(a1 + 1016) = v29;
    *(void *)(a1 + 1024) = v21;
    *(void *)(a1 + 1032) = &v28[8 * v27];
    if (v19) {
      goto LABEL_40;
    }
LABEL_41:
    *(void *)(a1 + 1024) = v21;
    uint64_t v39 = __src[57] + (v221 * v15);
    int64_t v40 = *(char **)(a1 + 1072);
    unint64_t v41 = *(void *)(a1 + 1080);
    if ((unint64_t)v40 < v41)
    {
      *(void *)int64_t v40 = v39;
      uint64_t v42 = (uint64_t)(v40 + 8);
      goto LABEL_63;
    }
    int v43 = *v219;
    uint64_t v44 = v40 - *v219;
    uint64_t v45 = v44 >> 3;
    unint64_t v46 = (v44 >> 3) + 1;
    if (v46 >> 61) {
      sub_19E13D694();
    }
    uint64_t v47 = v41 - (void)v43;
    if (v47 >> 2 > v46) {
      unint64_t v46 = v47 >> 2;
    }
    if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v48 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v48 = v46;
    }
    if (v48)
    {
      if (v48 >> 61) {
        sub_19E13C418();
      }
      float v49 = operator new(8 * v48);
      uint64_t v50 = &v49[8 * v45];
      *uint64_t v50 = v39;
      uint64_t v42 = (uint64_t)(v50 + 1);
      if (v40 == v43)
      {
LABEL_61:
        *(void *)(a1 + 1064) = v50;
        *(void *)(a1 + 1072) = v42;
        *(void *)(a1 + 1080) = &v49[8 * v48];
        if (!v40) {
          goto LABEL_63;
        }
LABEL_62:
        operator delete(v40);
        goto LABEL_63;
      }
    }
    else
    {
      float v49 = 0;
      uint64_t v50 = (void *)(8 * v45);
      *(void *)(8 * v45) = v39;
      uint64_t v42 = 8 * v45 + 8;
      if (v40 == v43) {
        goto LABEL_61;
      }
    }
    unint64_t v51 = v40 - 8 - v43;
    if (v51 < 0x58) {
      goto LABEL_253;
    }
    if ((unint64_t)(v40 - &v49[v44]) < 0x20) {
      goto LABEL_253;
    }
    uint64_t v52 = (v51 >> 3) + 1;
    uint64_t v53 = 8 * (v52 & 0x3FFFFFFFFFFFFFFCLL);
    float v54 = &v40[-v53];
    uint64_t v50 = (void *)((char *)v50 - v53);
    uint64_t v55 = &v49[8 * v45 - 16];
    int v56 = (long long *)(v40 - 16);
    uint64_t v57 = v52 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v58 = *v56;
      *(v55 - 1) = *(v56 - 1);
      *uint64_t v55 = v58;
      v55 -= 2;
      v56 -= 2;
      v57 -= 4;
    }
    while (v57);
    int64_t v40 = v54;
    if (v52 != (v52 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_253:
      do
      {
        uint64_t v59 = *((void *)v40 - 1);
        v40 -= 8;
        *--uint64_t v50 = v59;
      }
      while (v40 != v43);
    }
    int64_t v40 = *v219;
    *(void *)(a1 + 1064) = v50;
    *(void *)(a1 + 1072) = v42;
    *(void *)(a1 + 1080) = &v49[8 * v48];
    if (v40) {
      goto LABEL_62;
    }
LABEL_63:
    *(void *)(a1 + 1072) = v42;
    uint64_t v60 = v15 * v223;
    uint64_t v61 = __src[72] + 4 * v15 * v223;
    float v62 = *(uint64_t **)(a1 + 1048);
    unint64_t v63 = *(void *)(a1 + 1056);
    if ((unint64_t)v62 < v63)
    {
      *float v62 = v61;
      uint64_t v64 = (uint64_t)(v62 + 1);
      goto LABEL_86;
    }
    int v65 = *v218;
    uint64_t v66 = (char *)v62 - (char *)*v218;
    uint64_t v67 = v66 >> 3;
    unint64_t v68 = (v66 >> 3) + 1;
    if (v68 >> 61) {
      sub_19E13D694();
    }
    uint64_t v69 = v63 - (void)v65;
    if (v69 >> 2 > v68) {
      unint64_t v68 = v69 >> 2;
    }
    if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v70 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v70 = v68;
    }
    if (v70)
    {
      if (v70 >> 61) {
        sub_19E13C418();
      }
      float v71 = operator new(8 * v70);
      BOOL v72 = (uint64_t *)&v71[8 * v67];
      *BOOL v72 = v61;
      uint64_t v64 = (uint64_t)(v72 + 1);
      if (v62 != v65)
      {
LABEL_74:
        unint64_t v73 = (char *)(v62 - 1) - (char *)v65;
        if (v73 >= 0x58)
        {
          unint64_t v74 = (char *)v62 - &v71[v66];
          __src = v224;
          if (v74 >= 0x20)
          {
            uint64_t v75 = (v73 >> 3) + 1;
            uint64_t v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
            int v77 = &v62[v76 / 0xFFFFFFFFFFFFFFF8];
            BOOL v72 = (uint64_t *)((char *)v72 - v76);
            int v78 = &v71[8 * v67 - 16];
            float v79 = v62 - 2;
            uint64_t v80 = v75 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v81 = *(_OWORD *)v79;
              *(v78 - 1) = *((_OWORD *)v79 - 1);
              *int v78 = v81;
              v78 -= 2;
              v79 -= 4;
              v80 -= 4;
            }
            while (v80);
            float v62 = v77;
            if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_84:
              float v62 = *v218;
              *(void *)(a1 + 1040) = v72;
              *(void *)(a1 + 1048) = v64;
              *(void *)(a1 + 1056) = &v71[8 * v70];
              if (!v62) {
                goto LABEL_86;
              }
LABEL_85:
              operator delete(v62);
              goto LABEL_86;
            }
          }
        }
        else
        {
          __src = v224;
        }
        do
        {
          uint64_t v82 = *--v62;
          *--BOOL v72 = v82;
        }
        while (v62 != v65);
        goto LABEL_84;
      }
    }
    else
    {
      float v71 = 0;
      BOOL v72 = (uint64_t *)(8 * v67);
      *(void *)(8 * v67) = v61;
      uint64_t v64 = 8 * v67 + 8;
      if (v62 != v65) {
        goto LABEL_74;
      }
    }
    __src = v224;
    *(void *)(a1 + 1040) = v72;
    *(void *)(a1 + 1048) = v64;
    *(void *)(a1 + 1056) = &v71[8 * v70];
    if (v62) {
      goto LABEL_85;
    }
LABEL_86:
    *(void *)(a1 + 1048) = v64;
    uint64_t v83 = __src[73] + 4 * v60;
    float v84 = *(uint64_t **)(a1 + 1096);
    unint64_t v85 = *(void *)(a1 + 1104);
    if ((unint64_t)v84 < v85)
    {
      uint64_t *v84 = v83;
      uint64_t v86 = (uint64_t)(v84 + 1);
      uint64_t v87 = v15 * v222;
      goto LABEL_109;
    }
    float v88 = *v217;
    uint64_t v89 = (char *)v84 - (char *)*v217;
    uint64_t v90 = v89 >> 3;
    unint64_t v91 = (v89 >> 3) + 1;
    if (v91 >> 61) {
      sub_19E13D694();
    }
    uint64_t v92 = v85 - (void)v88;
    if (v92 >> 2 > v91) {
      unint64_t v91 = v92 >> 2;
    }
    if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v93 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v93 = v91;
    }
    if (v93)
    {
      if (v93 >> 61) {
        sub_19E13C418();
      }
      float v94 = operator new(8 * v93);
      float v95 = (uint64_t *)&v94[8 * v90];
      uint64_t *v95 = v83;
      uint64_t v86 = (uint64_t)(v95 + 1);
      if (v84 != v88)
      {
LABEL_97:
        unint64_t v96 = (char *)(v84 - 1) - (char *)v88;
        uint64_t v87 = v15 * v222;
        if (v96 >= 0x58)
        {
          unint64_t v97 = (char *)v84 - &v94[v89];
          __src = v224;
          if (v97 >= 0x20)
          {
            uint64_t v98 = (v96 >> 3) + 1;
            uint64_t v99 = 8 * (v98 & 0x3FFFFFFFFFFFFFFCLL);
            float v100 = &v84[v99 / 0xFFFFFFFFFFFFFFF8];
            float v95 = (uint64_t *)((char *)v95 - v99);
            float v101 = &v94[8 * v90 - 16];
            int v102 = v84 - 2;
            uint64_t v103 = v98 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v104 = *(_OWORD *)v102;
              *(v101 - 1) = *((_OWORD *)v102 - 1);
              _OWORD *v101 = v104;
              v101 -= 2;
              v102 -= 4;
              v103 -= 4;
            }
            while (v103);
            float v84 = v100;
            if (v98 == (v98 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_107:
              float v84 = *v217;
              *(void *)(a1 + 1088) = v95;
              *(void *)(a1 + 1096) = v86;
              *(void *)(a1 + 1104) = &v94[8 * v93];
              if (!v84) {
                goto LABEL_109;
              }
LABEL_108:
              operator delete(v84);
              goto LABEL_109;
            }
          }
        }
        else
        {
          __src = v224;
        }
        do
        {
          uint64_t v105 = *--v84;
          *--float v95 = v105;
        }
        while (v84 != v88);
        goto LABEL_107;
      }
    }
    else
    {
      float v94 = 0;
      float v95 = (uint64_t *)(8 * v90);
      *(void *)(8 * v90) = v83;
      uint64_t v86 = 8 * v90 + 8;
      if (v84 != v88) {
        goto LABEL_97;
      }
    }
    uint64_t v87 = v15 * v222;
    __src = v224;
    *(void *)(a1 + 1088) = v95;
    *(void *)(a1 + 1096) = v86;
    *(void *)(a1 + 1104) = &v94[8 * v93];
    if (v84) {
      goto LABEL_108;
    }
LABEL_109:
    *(void *)(a1 + 1096) = v86;
    uint64_t v106 = __src[58] + v87;
    uint64_t v107 = *(char **)(a1 + 1120);
    unint64_t v108 = *(void *)(a1 + 1128);
    if ((unint64_t)v107 < v108)
    {
      *(void *)uint64_t v107 = v106;
      uint64_t v109 = (uint64_t)(v107 + 8);
      goto LABEL_132;
    }
    float v110 = *v216;
    uint64_t v111 = v107 - *v216;
    uint64_t v112 = v111 >> 3;
    unint64_t v113 = (v111 >> 3) + 1;
    if (v113 >> 61) {
      sub_19E13D694();
    }
    uint64_t v114 = v108 - (void)v110;
    if (v114 >> 2 > v113) {
      unint64_t v113 = v114 >> 2;
    }
    if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v115 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v115 = v113;
    }
    if (v115)
    {
      if (v115 >> 61) {
        sub_19E13C418();
      }
      float v116 = operator new(8 * v115);
      float v117 = (uint64_t *)&v116[8 * v112];
      *float v117 = v106;
      uint64_t v109 = (uint64_t)(v117 + 1);
      if (v107 != v110)
      {
LABEL_120:
        unint64_t v118 = v107 - 8 - v110;
        if (v118 >= 0x58)
        {
          unint64_t v119 = v107 - &v116[v111];
          __src = v224;
          if (v119 >= 0x20)
          {
            uint64_t v120 = (v118 >> 3) + 1;
            uint64_t v121 = 8 * (v120 & 0x3FFFFFFFFFFFFFFCLL);
            float32x4_t v122 = &v107[-v121];
            float v117 = (uint64_t *)((char *)v117 - v121);
            BOOL v123 = &v116[8 * v112 - 16];
            unint64_t v124 = v107 - 16;
            uint64_t v125 = v120 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v126 = *(_OWORD *)v124;
              *(v123 - 1) = *((_OWORD *)v124 - 1);
              _OWORD *v123 = v126;
              v123 -= 2;
              v124 -= 32;
              v125 -= 4;
            }
            while (v125);
            uint64_t v107 = v122;
            if (v120 == (v120 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_130:
              uint64_t v107 = *v216;
              *(void *)(a1 + 1112) = v117;
              *(void *)(a1 + 1120) = v109;
              *(void *)(a1 + 1128) = &v116[8 * v115];
              if (!v107) {
                goto LABEL_132;
              }
LABEL_131:
              operator delete(v107);
              goto LABEL_132;
            }
          }
        }
        else
        {
          __src = v224;
        }
        do
        {
          uint64_t v127 = *((void *)v107 - 1);
          v107 -= 8;
          *--float v117 = v127;
        }
        while (v107 != v110);
        goto LABEL_130;
      }
    }
    else
    {
      float v116 = 0;
      float v117 = (uint64_t *)(8 * v112);
      *(void *)(8 * v112) = v106;
      uint64_t v109 = 8 * v112 + 8;
      if (v107 != v110) {
        goto LABEL_120;
      }
    }
    __src = v224;
    *(void *)(a1 + 1112) = v117;
    *(void *)(a1 + 1120) = v109;
    *(void *)(a1 + 1128) = &v116[8 * v115];
    if (v107) {
      goto LABEL_131;
    }
LABEL_132:
    *(void *)(a1 + 1120) = v109;
    uint64_t v128 = __src[59] + (v221 * v15);
    uint64_t v129 = *(char **)(a1 + 1168);
    unint64_t v130 = *(void *)(a1 + 1176);
    if ((unint64_t)v129 < v130)
    {
      *(void *)uint64_t v129 = v128;
      uint64_t v131 = (uint64_t)(v129 + 8);
      goto LABEL_155;
    }
    int v132 = *v215;
    uint64_t v133 = v129 - *v215;
    uint64_t v134 = v133 >> 3;
    unint64_t v135 = (v133 >> 3) + 1;
    if (v135 >> 61) {
      sub_19E13D694();
    }
    uint64_t v136 = v130 - (void)v132;
    if (v136 >> 2 > v135) {
      unint64_t v135 = v136 >> 2;
    }
    if ((unint64_t)v136 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v137 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v137 = v135;
    }
    if (v137)
    {
      if (v137 >> 61) {
        sub_19E13C418();
      }
      uint64_t v138 = operator new(8 * v137);
      uint64_t v139 = &v138[8 * v134];
      *uint64_t v139 = v128;
      uint64_t v131 = (uint64_t)(v139 + 1);
      if (v129 != v132)
      {
LABEL_143:
        unint64_t v140 = v129 - 8 - v132;
        if (v140 >= 0x58)
        {
          unint64_t v141 = v129 - &v138[v133];
          __src = v224;
          if (v141 >= 0x20)
          {
            uint64_t v142 = (v140 >> 3) + 1;
            uint64_t v143 = 8 * (v142 & 0x3FFFFFFFFFFFFFFCLL);
            unint64_t v144 = &v129[-v143];
            uint64_t v139 = (void *)((char *)v139 - v143);
            uint64_t v145 = &v138[8 * v134 - 16];
            unint64_t v146 = v129 - 16;
            uint64_t v147 = v142 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v148 = *(_OWORD *)v146;
              *(v145 - 1) = *((_OWORD *)v146 - 1);
              *uint64_t v145 = v148;
              v145 -= 2;
              v146 -= 32;
              v147 -= 4;
            }
            while (v147);
            uint64_t v129 = v144;
            if (v142 == (v142 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_153:
              uint64_t v129 = *v215;
              *(void *)(a1 + 1160) = v139;
              *(void *)(a1 + 1168) = v131;
              *(void *)(a1 + 1176) = &v138[8 * v137];
              if (!v129) {
                goto LABEL_155;
              }
LABEL_154:
              operator delete(v129);
              goto LABEL_155;
            }
          }
        }
        else
        {
          __src = v224;
        }
        do
        {
          uint64_t v149 = *((void *)v129 - 1);
          v129 -= 8;
          *--uint64_t v139 = v149;
        }
        while (v129 != v132);
        goto LABEL_153;
      }
    }
    else
    {
      uint64_t v138 = 0;
      uint64_t v139 = (void *)(8 * v134);
      *(void *)(8 * v134) = v128;
      uint64_t v131 = 8 * v134 + 8;
      if (v129 != v132) {
        goto LABEL_143;
      }
    }
    __src = v224;
    *(void *)(a1 + 1160) = v139;
    *(void *)(a1 + 1168) = v131;
    *(void *)(a1 + 1176) = &v138[8 * v137];
    if (v129) {
      goto LABEL_154;
    }
LABEL_155:
    *(void *)(a1 + 1168) = v131;
    uint64_t v150 = __src[74] + 4 * v60;
    unint64_t v151 = *(uint64_t **)(a1 + 1144);
    unint64_t v152 = *(void *)(a1 + 1152);
    if ((unint64_t)v151 < v152)
    {
      *unint64_t v151 = v150;
      uint64_t v153 = (uint64_t)(v151 + 1);
      goto LABEL_178;
    }
    uint64_t v154 = *v214;
    uint64_t v155 = (char *)v151 - (char *)*v214;
    uint64_t v156 = v155 >> 3;
    unint64_t v157 = (v155 >> 3) + 1;
    if (v157 >> 61) {
      sub_19E13D694();
    }
    uint64_t v158 = v152 - (void)v154;
    if (v158 >> 2 > v157) {
      unint64_t v157 = v158 >> 2;
    }
    if ((unint64_t)v158 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v159 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v159 = v157;
    }
    if (v159)
    {
      if (v159 >> 61) {
        sub_19E13C418();
      }
      int v160 = operator new(8 * v159);
      unint64_t v161 = (uint64_t *)&v160[8 * v156];
      *unint64_t v161 = v150;
      uint64_t v153 = (uint64_t)(v161 + 1);
      if (v151 != v154)
      {
LABEL_166:
        unint64_t v162 = (char *)(v151 - 1) - (char *)v154;
        if (v162 >= 0x58)
        {
          unint64_t v163 = (char *)v151 - &v160[v155];
          __src = v224;
          if (v163 >= 0x20)
          {
            uint64_t v164 = (v162 >> 3) + 1;
            uint64_t v165 = 8 * (v164 & 0x3FFFFFFFFFFFFFFCLL);
            unint64_t v166 = &v151[v165 / 0xFFFFFFFFFFFFFFF8];
            unint64_t v161 = (uint64_t *)((char *)v161 - v165);
            uint64_t v167 = &v160[8 * v156 - 16];
            long long v168 = v151 - 2;
            uint64_t v169 = v164 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v170 = *(_OWORD *)v168;
              *(v167 - 1) = *((_OWORD *)v168 - 1);
              _OWORD *v167 = v170;
              v167 -= 2;
              v168 -= 4;
              v169 -= 4;
            }
            while (v169);
            unint64_t v151 = v166;
            if (v164 == (v164 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_176:
              unint64_t v151 = *v214;
              *(void *)(a1 + 1136) = v161;
              *(void *)(a1 + 1144) = v153;
              *(void *)(a1 + 1152) = &v160[8 * v159];
              if (!v151) {
                goto LABEL_178;
              }
LABEL_177:
              operator delete(v151);
              goto LABEL_178;
            }
          }
        }
        else
        {
          __src = v224;
        }
        do
        {
          uint64_t v171 = *--v151;
          *--unint64_t v161 = v171;
        }
        while (v151 != v154);
        goto LABEL_176;
      }
    }
    else
    {
      int v160 = 0;
      unint64_t v161 = (uint64_t *)(8 * v156);
      *(void *)(8 * v156) = v150;
      uint64_t v153 = 8 * v156 + 8;
      if (v151 != v154) {
        goto LABEL_166;
      }
    }
    __src = v224;
    *(void *)(a1 + 1136) = v161;
    *(void *)(a1 + 1144) = v153;
    *(void *)(a1 + 1152) = &v160[8 * v159];
    if (v151) {
      goto LABEL_177;
    }
LABEL_178:
    *(void *)(a1 + 1144) = v153;
    uint64_t v172 = __src[75] + 4 * v60;
    uint64_t v173 = *(uint64_t **)(a1 + 1192);
    unint64_t v174 = *(void *)(a1 + 1200);
    if ((unint64_t)v173 < v174)
    {
      uint64_t *v173 = v172;
      uint64_t v17 = (uint64_t)(v173 + 1);
      goto LABEL_18;
    }
    uint64_t v175 = *v213;
    uint64_t v176 = (char *)v173 - (char *)*v213;
    uint64_t v177 = v176 >> 3;
    unint64_t v178 = (v176 >> 3) + 1;
    if (v178 >> 61) {
      sub_19E13D694();
    }
    uint64_t v179 = v174 - (void)v175;
    if (v179 >> 2 > v178) {
      unint64_t v178 = v179 >> 2;
    }
    if ((unint64_t)v179 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v180 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v180 = v178;
    }
    if (v180)
    {
      if (v180 >> 61) {
        sub_19E13C418();
      }
      uint64_t v181 = operator new(8 * v180);
      unint64_t v182 = (uint64_t *)&v181[8 * v177];
      *unint64_t v182 = v172;
      uint64_t v17 = (uint64_t)(v182 + 1);
      if (v173 == v175)
      {
LABEL_197:
        *(void *)(a1 + 1184) = v182;
        *(void *)(a1 + 1192) = v17;
        *(void *)(a1 + 1200) = &v181[8 * v180];
        if (!v173) {
          goto LABEL_18;
        }
LABEL_198:
        operator delete(v173);
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v181 = 0;
      unint64_t v182 = (uint64_t *)(8 * v177);
      *(void *)(8 * v177) = v172;
      uint64_t v17 = 8 * v177 + 8;
      if (v173 == v175) {
        goto LABEL_197;
      }
    }
    unint64_t v183 = (char *)(v173 - 1) - (char *)v175;
    if (v183 < 0x58) {
      goto LABEL_254;
    }
    if ((unint64_t)((char *)v173 - &v181[v176]) < 0x20) {
      goto LABEL_254;
    }
    uint64_t v184 = (v183 >> 3) + 1;
    uint64_t v185 = 8 * (v184 & 0x3FFFFFFFFFFFFFFCLL);
    int v186 = &v173[v185 / 0xFFFFFFFFFFFFFFF8];
    unint64_t v182 = (uint64_t *)((char *)v182 - v185);
    uint64_t v187 = &v181[8 * v177 - 16];
    unint64_t v188 = v173 - 2;
    uint64_t v189 = v184 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v190 = *(_OWORD *)v188;
      *(v187 - 1) = *((_OWORD *)v188 - 1);
      *uint64_t v187 = v190;
      v187 -= 2;
      v188 -= 4;
      v189 -= 4;
    }
    while (v189);
    uint64_t v173 = v186;
    if (v184 != (v184 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_254:
      do
      {
        uint64_t v191 = *--v173;
        *--unint64_t v182 = v191;
      }
      while (v173 != v175);
    }
    uint64_t v173 = *v213;
    *(void *)(a1 + 1184) = v182;
    *(void *)(a1 + 1192) = v17;
    *(void *)(a1 + 1200) = &v181[8 * v180];
    if (v173) {
      goto LABEL_198;
    }
LABEL_18:
    *(void *)(a1 + 1192) = v17;
    ++v15;
  }
  while (v15 != 4);
  uint64_t v192 = __src[61];
  *(void *)__srca = __src[60];
  *(void *)&__srca[8] = *(void *)__srca + v223;
  uint64_t v193 = 2 * (int)v223;
  *(void *)&__srca[16] = *(void *)__srca + v193;
  uint64_t v194 = *(void *)(a1 + 1224);
  uint64_t v195 = *(char **)(a1 + 1208);
  if ((unint64_t)(v194 - (void)v195) >= 0x18)
  {
    int64_t v198 = *(char **)(a1 + 1216);
    int64_t v199 = v198 - v195;
    if ((unint64_t)(v198 - v195) > 0x17) {
      goto LABEL_213;
    }
    size_t v200 = &__srca[v199];
    if (v198 != v195)
    {
      memcpy(*(void **)(a1 + 1208), __srca, v198 - v195);
      uint64_t v195 = *(char **)(a1 + 1216);
    }
    size_t v201 = 24 - v199;
    memcpy(v195, v200, v201);
  }
  else
  {
    if (v195)
    {
      *(void *)(a1 + 1216) = v195;
      operator delete(v195);
      uint64_t v194 = 0;
      *(void *)(a1 + 1208) = 0;
      *(void *)(a1 + 1216) = 0;
      *(void *)(a1 + 1224) = 0;
    }
    uint64_t v196 = v194 >> 2;
    if ((unint64_t)(v194 >> 2) <= 3) {
      uint64_t v196 = 3;
    }
    if ((unint64_t)v194 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v197 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v197 = v196;
    }
    if (v197 >> 61) {
      sub_19E13D694();
    }
    uint64_t v195 = (char *)operator new(8 * v197);
    *(void *)(a1 + 1208) = v195;
    *(void *)(a1 + 1216) = v195;
    *(void *)(a1 + 1224) = &v195[8 * v197];
LABEL_213:
    *(_OWORD *)uint64_t v195 = *(_OWORD *)__srca;
    *((void *)v195 + 2) = *(void *)&__srca[16];
    size_t v201 = 24;
  }
  *(void *)(a1 + 1216) = &v195[v201];
  *(void *)__srca = v192;
  *(void *)&__srca[8] = v192 + v223;
  *(void *)&__srca[16] = v192 + v193;
  uint64_t v202 = *(void *)(a1 + 1248);
  uint64_t v203 = *(char **)(a1 + 1232);
  if ((unint64_t)(v202 - (void)v203) >= 0x18)
  {
    int64_t v206 = *(char **)(a1 + 1240);
    int64_t v207 = v206 - v203;
    if ((unint64_t)(v206 - v203) > 0x17) {
      goto LABEL_228;
    }
    size_t v208 = &__srca[v207];
    if (v206 != v203)
    {
      memcpy(*(void **)(a1 + 1232), __srca, v206 - v203);
      uint64_t v203 = *(char **)(a1 + 1240);
    }
    size_t v209 = 24 - v207;
    memcpy(v203, v208, v209);
    uint64_t v210 = v209 >> 3;
  }
  else
  {
    if (v203)
    {
      *(void *)(a1 + 1240) = v203;
      operator delete(v203);
      uint64_t v202 = 0;
      *(void *)(a1 + 1232) = 0;
      *(void *)(a1 + 1240) = 0;
      *(void *)(a1 + 1248) = 0;
    }
    uint64_t v204 = v202 >> 2;
    if ((unint64_t)(v202 >> 2) <= 3) {
      uint64_t v204 = 3;
    }
    if ((unint64_t)v202 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v205 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v205 = v204;
    }
    if (v205 >> 61) {
      sub_19E13D694();
    }
    uint64_t v203 = (char *)operator new(8 * v205);
    *(void *)(a1 + 1232) = v203;
    *(void *)(a1 + 1240) = v203;
    *(void *)(a1 + 1248) = &v203[8 * v205];
LABEL_228:
    *(_OWORD *)uint64_t v203 = *(_OWORD *)__srca;
    *((void *)v203 + 2) = *(void *)&__srca[16];
    uint64_t v210 = 3;
  }
  *(void *)(a1 + 1240) = &v203[8 * v210];
  *(void *)(a1 + 1256) = __src[62];
  *(void *)(a1 + 1264) = __src[63];
  int v211 = *((_DWORD *)__src + 80);
  if (v211 <= 0) {
    int v211 = *((_DWORD *)__src + 64);
  }
  *(_DWORD *)(a1 + 1272) = v211;
  return a1;
}

void sub_19E23DDC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16, void **a17, void **a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v32 = *a9;
  if (*a9)
  {
    v30[155] = v32;
    operator delete(v32);
    int v33 = *a10;
    if (!*a10)
    {
LABEL_3:
      int v34 = *a11;
      if (!*a11) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else
  {
    int v33 = *a10;
    if (!*a10) {
      goto LABEL_3;
    }
  }
  v30[152] = v33;
  operator delete(v33);
  int v34 = *a11;
  if (!*a11)
  {
LABEL_4:
    int v35 = *a13;
    if (!*a13) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  v30[149] = v34;
  operator delete(v34);
  int v35 = *a13;
  if (!*a13)
  {
LABEL_5:
    uint64_t v36 = *a12;
    if (!*a12) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  v30[146] = v35;
  operator delete(v35);
  uint64_t v36 = *a12;
  if (!*a12)
  {
LABEL_6:
    long long v37 = *a14;
    if (!*a14) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  v30[143] = v36;
  operator delete(v36);
  long long v37 = *a14;
  if (!*a14)
  {
LABEL_7:
    uint64_t v38 = *a15;
    if (!*a15) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }
LABEL_17:
  v30[140] = v37;
  operator delete(v37);
  uint64_t v38 = *a15;
  if (!*a15)
  {
LABEL_8:
    uint64_t v39 = *a17;
    if (!*a17) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_18:
  v30[137] = v38;
  operator delete(v38);
  uint64_t v39 = *a17;
  if (!*a17)
  {
LABEL_9:
    int64_t v40 = *a16;
    if (!*a16) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }
LABEL_19:
  v30[134] = v39;
  operator delete(v39);
  int64_t v40 = *a16;
  if (!*a16)
  {
LABEL_10:
    unint64_t v41 = *a18;
    if (!*a18) {
      goto LABEL_11;
    }
    goto LABEL_21;
  }
LABEL_20:
  v30[131] = v40;
  operator delete(v40);
  unint64_t v41 = *a18;
  if (!*a18)
  {
LABEL_11:
    sub_19E25E4C4((uint64_t)v30);
    _Unwind_Resume(a1);
  }
LABEL_21:
  v30[128] = v41;
  operator delete(v41);
  sub_19E25E4C4((uint64_t)v30);
  _Unwind_Resume(a1);
}

BOOL sub_19E23DF90(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1) == 6
      || (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1) == 10;
}

uint64_t sub_19E23E01C(void *a1, uint64_t a2)
{
  uint64_t v4 = (void *)a1[20];
  char v5 = (void *)a1[21];
  if (v4 == v5)
  {
    a1[21] = v4;
    if (!a1[31]) {
      goto LABEL_10;
    }
    goto LABEL_8;
  }
  do
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  while (v4 != v5);
  a1[21] = a1[20];
  if (a1[31])
  {
LABEL_8:
    uint64_t v7 = a1[29];
    int v6 = (uint64_t *)a1[30];
    uint64_t v8 = *v6;
    *(void *)(v8 + 8) = *(void *)(v7 + 8);
    **(void **)(v7 + 8) = v8;
    a1[31] = 0;
    if (v6 != a1 + 29)
    {
      do
      {
        unint64_t v9 = (uint64_t *)v6[1];
        operator delete(v6);
        int v6 = v9;
      }
      while (v9 != a1 + 29);
    }
  }
LABEL_10:
  if ((*(uint64_t (**)(void *))(*a1 + 104))(a1) == 9
    || (*(uint64_t (**)(void *))(*a1 + 104))(a1) == 10)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, void *))(*(void *)a2 + 144);
    uint64_t v11 = a2;
    uint64_t v12 = a1;
  }
  else
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, void *))(*(void *)a2 + 136);
    uint64_t v11 = a2;
    uint64_t v12 = a1;
  }
  return v10(v11, v12);
}

void sub_19E23E1CC(uint64_t a1, int a2, uint64_t a3)
{
  *(_DWORD *)(a1 + 280) = a3;
  uint64_t v59 = *sub_19E25D8B0(a1, 1);
  long long v58 = *sub_19E25DA90(a1, 9);
  uint64_t v6 = a1 + 232;
  if (*(void *)(a1 + 240) != a1 + 232) {
    sub_19E30A40C();
  }
  int v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 56))(a1, 1) * a3;
  int v61 = v7 / (*(int (**)(uint64_t))(*(void *)a1 + 88))(a1);
  int v56 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 64))(a1, 9);
  int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  int v60 = v56 * (int)a3 / v8;
  if (a2 >= 1)
  {
    int v9 = 0;
    do
    {
      uint64_t v11 = *(uint64_t **)(a1 + 160);
      unint64_t v10 = *(uint64_t **)(a1 + 168);
      while (v11 != v10)
      {
        uint64_t v12 = *v11++;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, a3);
      }
      int v13 = sub_19E25DA90(a1, 9);
      sub_19E23B7C0((void *)a1, (char *)*v13);
      char v14 = sub_19E25D8B0(a1, 1);
      *char v14 = (uint64_t *)((char *)*v14 + 4 * v61);
      uint64_t v15 = sub_19E25DA90(a1, 9);
      float *v15 = (uint64_t *)((char *)*v15 + 4 * v60);
      ++v9;
    }
    while (v9 != a2);
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 240))(a1))
  {
    int v16 = sub_19E25D8B0(a1, 1);
    *int v16 = (uint64_t *)((char *)*v16 - 4 * v61);
    uint64_t v17 = sub_19E25DA90(a1, 9);
    *uint64_t v17 = (uint64_t *)((char *)*v17 - 4 * v60);
    uint64_t v18 = sub_19E25DA90(a1, 9);
    *uint64_t v18 = (uint64_t *)((char *)*v18 + 4 * (v56 / v8 / 2));
    long long v57 = *(_OWORD *)(a1 + 1288);
    *(_OWORD *)(a1 + 1288) = *(_OWORD *)(a1 + 1304);
    unint64_t v74 = 0;
    uint64_t v75 = 0;
    uint64_t v76 = 0;
    int v19 = *(unsigned char **)(a1 + 1016);
    unint64_t v20 = *(unsigned char **)(a1 + 1024);
    int64_t v21 = v20 - v19;
    if (v20 != v19)
    {
      if (v21 < 0) {
        sub_19E13D694();
      }
      int v22 = (char *)operator new(v20 - v19);
      uint64_t v23 = &v22[8 * (v21 >> 3)];
      unint64_t v74 = v22;
      uint64_t v76 = v23;
      memcpy(v22, v19, v21);
      uint64_t v75 = v23;
    }
    float v71 = 0;
    BOOL v72 = 0;
    unint64_t v73 = 0;
    uint64_t v24 = *(unsigned char **)(a1 + 1040);
    unint64_t v25 = *(unsigned char **)(a1 + 1048);
    int64_t v26 = v25 - v24;
    if (v25 != v24)
    {
      if (v26 < 0) {
        sub_19E13D694();
      }
      unint64_t v27 = (char *)operator new(v25 - v24);
      int v28 = &v27[8 * (v26 >> 3)];
      float v71 = v27;
      unint64_t v73 = v28;
      memcpy(v27, v24, v26);
      BOOL v72 = v28;
    }
    unint64_t v68 = 0;
    uint64_t v69 = 0;
    unint64_t v70 = 0;
    int v29 = *(unsigned char **)(a1 + 1064);
    unint64_t v30 = *(unsigned char **)(a1 + 1072);
    int64_t v31 = v30 - v29;
    if (v30 != v29)
    {
      if (v31 < 0) {
        sub_19E13D694();
      }
      uint64_t v32 = (char *)operator new(v30 - v29);
      int v33 = &v32[8 * (v31 >> 3)];
      unint64_t v68 = v32;
      unint64_t v70 = v33;
      memcpy(v32, v29, v31);
      uint64_t v69 = v33;
    }
    int v65 = 0;
    uint64_t v66 = 0;
    uint64_t v67 = 0;
    int v34 = *(unsigned char **)(a1 + 1088);
    int v35 = *(unsigned char **)(a1 + 1096);
    int64_t v36 = v35 - v34;
    if (v35 != v34)
    {
      if (v36 < 0) {
        sub_19E13D694();
      }
      long long v37 = (char *)operator new(v35 - v34);
      uint64_t v38 = &v37[8 * (v36 >> 3)];
      int v65 = v37;
      uint64_t v67 = v38;
      memcpy(v37, v34, v36);
      uint64_t v66 = v38;
    }
    __p = 0;
    unint64_t v63 = 0;
    uint64_t v64 = 0;
    uint64_t v39 = *(unsigned char **)(a1 + 1208);
    int64_t v40 = *(unsigned char **)(a1 + 1216);
    int64_t v41 = v40 - v39;
    if (v40 != v39)
    {
      if (v41 < 0) {
        sub_19E13D694();
      }
      uint64_t v42 = (char *)operator new(v40 - v39);
      int v43 = &v42[8 * (v41 >> 3)];
      __p = v42;
      uint64_t v64 = v43;
      memcpy(v42, v39, v41);
      unint64_t v63 = v43;
    }
    uint64_t v55 = *(void *)(a1 + 1256);
    sub_19E1E5B9C((void *)(a1 + 1016), *(char **)(a1 + 1112), *(char **)(a1 + 1120), (uint64_t)(*(void *)(a1 + 1120) - *(void *)(a1 + 1112)) >> 3);
    sub_19E1E5B9C((void *)(a1 + 1040), *(char **)(a1 + 1136), *(char **)(a1 + 1144), (uint64_t)(*(void *)(a1 + 1144) - *(void *)(a1 + 1136)) >> 3);
    sub_19E1E5B9C((void *)(a1 + 1064), *(char **)(a1 + 1160), *(char **)(a1 + 1168), (uint64_t)(*(void *)(a1 + 1168) - *(void *)(a1 + 1160)) >> 3);
    sub_19E1E5B9C((void *)(a1 + 1088), *(char **)(a1 + 1184), *(char **)(a1 + 1192), (uint64_t)(*(void *)(a1 + 1192) - *(void *)(a1 + 1184)) >> 3);
    sub_19E1E5B9C((void *)(a1 + 1208), *(char **)(a1 + 1232), *(char **)(a1 + 1240), (uint64_t)(*(void *)(a1 + 1240) - *(void *)(a1 + 1232)) >> 3);
    unint64_t v51 = (char **)(a1 + 1040);
    uint64_t v52 = (void **)(a1 + 1064);
    uint64_t v53 = (void **)(a1 + 1088);
    float v54 = (void **)(a1 + 1208);
    *(void *)(a1 + 1256) = *(void *)(a1 + 1264);
    if (a2 >= 1)
    {
      int v44 = 0;
      do
      {
        uint64_t v45 = *(void **)(a1 + 160);
        for (int i = *(void **)(a1 + 168); v45 != i; ++v45)
          (*(void (**)(void, uint64_t))(*(void *)*v45 + 16))(*v45, a3);
        uint64_t v47 = sub_19E25DA90(a1, 9);
        sub_19E23B7C0((void *)a1, (char *)*v47);
        unint64_t v48 = sub_19E25D8B0(a1, 1);
        *unint64_t v48 = (uint64_t *)((char *)*v48 - 4 * v61);
        float v49 = sub_19E25DA90(a1, 9);
        *float v49 = (uint64_t *)((char *)*v49 - 4 * v60);
        ++v44;
      }
      while (v44 != a2);
    }
    *(_OWORD *)(a1 + 1288) = v57;
    if ((char **)(a1 + 1016) != &v74) {
      sub_19E1E5B9C((void *)(a1 + 1016), v74, v75, (v75 - v74) >> 3);
    }
    if (v51 != &v71) {
      sub_19E1E5B9C(v51, v71, v72, (v72 - v71) >> 3);
    }
    if (v52 != &v68) {
      sub_19E1E5B9C(v52, (char *)v68, v69, (v69 - (unsigned char *)v68) >> 3);
    }
    if (v53 != &v65) {
      sub_19E1E5B9C(v53, (char *)v65, v66, (v66 - (unsigned char *)v65) >> 3);
    }
    if (v54 != &__p) {
      sub_19E1E5B9C(v54, (char *)__p, v63, (v63 - (unsigned char *)__p) >> 3);
    }
    *(void *)(a1 + 1256) = v55;
    if (__p)
    {
      unint64_t v63 = (char *)__p;
      operator delete(__p);
    }
    if (v65)
    {
      uint64_t v66 = (char *)v65;
      operator delete(v65);
    }
    if (v68)
    {
      uint64_t v69 = (char *)v68;
      operator delete(v68);
    }
    if (v71)
    {
      BOOL v72 = v71;
      operator delete(v71);
    }
    if (v74)
    {
      uint64_t v75 = v74;
      operator delete(v74);
    }
  }
  for (uint64_t j = *(void *)(a1 + 240); j != v6; uint64_t j = *(void *)(j + 8))
  {
    sub_19E30A424(*(void *)(a1 + 8), *(_DWORD *)(j + 16) * a3, *(void **)(j + 24));
    *(void *)(j + 24) = 0;
  }
  *sub_19E25D8B0(a1, 1) = v59;
  *sub_19E25DA90(a1, 9) = v58;
  sub_19E25E690(a1);
}

void sub_19E23E8E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  if (__p)
  {
    operator delete(__p);
    unint64_t v30 = a24;
    if (!a24)
    {
LABEL_3:
      int64_t v31 = a27;
      if (!a27) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else
  {
    unint64_t v30 = a24;
    if (!a24) {
      goto LABEL_3;
    }
  }
  operator delete(v30);
  int64_t v31 = a27;
  if (!a27)
  {
LABEL_4:
    uint64_t v32 = *(void **)(v28 - 136);
    if (!v32) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v31);
  uint64_t v32 = *(void **)(v28 - 136);
  if (!v32)
  {
LABEL_5:
    int v33 = *(void **)(v28 - 112);
    if (!v33) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_11:
  *(void *)(v28 - 128) = v32;
  operator delete(v32);
  int v33 = *(void **)(v28 - 112);
  if (!v33) {
LABEL_7:
  }
    _Unwind_Resume(exception_object);
LABEL_6:
  *(void *)(v28 - 104) = v33;
  operator delete(v33);
  goto LABEL_7;
}

void sub_19E23E9B4(uint64_t a1, uint64_t a2, int a3)
{
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 80))(a1, 9);
  int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1) * v6;
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1) == 9
    || (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1) == 10)
  {
    int v8 = 0;
  }
  else
  {
    int v9 = *(_DWORD *)(a1 + 1272);
    int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1) * v9;
  }
  int v10 = v8 + v7;
  char v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 240))(a1);
  __p = 0;
  int64_t v36 = 0;
  long long v37 = 0;
  if (v10)
  {
    if (v10 < 0) {
      sub_19E13D694();
    }
    size_t v12 = v10 << v11;
    int v13 = (char *)operator new(v12);
    __p = v13;
    long long v37 = &v13[v12];
    bzero(v13, v12);
    int64_t v36 = &v13[v12];
  }
  else
  {
    int v13 = 0;
  }
  uint64_t v14 = *(void *)(a1 + 1288);
  int v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 80))(a1, 9);
  int v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 80))(a1, 9);
  int v17 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  memmove(v13, (const void *)(v14 + 4 * v15 * a3), v17 * v16);
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 240))(a1))
  {
    int v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 80))(a1, 9);
    int v19 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
    uint64_t v20 = *(void *)(a1 + 1304);
    int v21 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 80))(a1, 9);
    int v22 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 80))(a1, 9);
    int v23 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
    v13 += v19 * v18;
    memmove(v13, (const void *)(v20 + 4 * v21 * a3), v23 * v22);
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1) != 9
    && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1) != 10)
  {
    int v24 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 80))(a1, 9);
    int v25 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
    uint64_t v26 = *(void *)(a1 + 1296);
    int v27 = *(_DWORD *)(a1 + 1272);
    int v28 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
    int v29 = &v13[v25 * v24];
    memmove(v29, (const void *)(v26 + 4 * v27 * a3), v28 * v27);
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 240))(a1))
    {
      int v30 = *(_DWORD *)(a1 + 1272);
      int v31 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
      uint64_t v32 = *(void *)(a1 + 1312);
      int v33 = *(_DWORD *)(a1 + 1272);
      int v34 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
      memmove(&v29[v30 * (uint64_t)v31], (const void *)(v32 + 4 * v33 * a3), v34 * v33);
    }
  }
  sub_19E253694((uint64_t **)(a2 + 16), (long long *)(a1 + 256), (char **)&__p);
  if (__p)
  {
    int64_t v36 = (char *)__p;
    operator delete(__p);
  }
}

void sub_19E23EF18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E23EF38(uint64_t a1, const __CFArray *a2, int a3)
{
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 80))(a1, 9);
  int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1) * v6;
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1) == 9
    || (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1) == 10)
  {
    int v8 = 0;
  }
  else
  {
    int v9 = *(_DWORD *)(a1 + 1272);
    int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1) * v9;
  }
  int v10 = (v8 + v7) << (*(uint64_t (**)(uint64_t))(*(void *)a1 + 240))(a1);
  int v11 = *(_DWORD *)(a1 + 280);
  size_t v12 = *(void **)(a1 + 1280);
  if (v11 != a3)
  {
    if (v12) {
      sub_19E30A424(*(void *)(a1 + 8), v10 * v11, v12);
    }
LABEL_10:
    sub_19E30A40C();
  }
  if (!v12) {
    goto LABEL_10;
  }
  if (a2)
  {
    if (a3 >= 1)
    {
      CFIndex v13 = 0;
      do
      {
        uint64_t v14 = *(void *)(a1 + 1288);
        int v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 80))(a1, 9);
        int v16 = (char *)(v14 + (int)(v15 * v13 * (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1)));
        ValueAtIndex = CFArrayGetValueAtIndex(a2, v13);
        int v18 = sub_19E2533F8((uint64_t)ValueAtIndex + 16, (const void **)(a1 + 256));
        int v19 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 80))(a1, 9);
        int v20 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
        memmove(v16, v18, v20 * v19);
        if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 240))(a1))
        {
          int v21 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 80))(a1, 9);
          v16 += (int)(v21 * a3 * (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1));
          int v22 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 80))(a1, 9);
          int v18 = (uint64_t *)((char *)v18 + (int)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1) * v22));
          int v23 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 80))(a1, 9);
          int v24 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
          memmove(v16, v18, v24 * v23);
        }
        if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1) != 9
          && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1) != 10)
        {
          int v25 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 80))(a1, 9);
          uint64_t v26 = &v16[(int)(v25 * a3 * (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1))];
          int v27 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 80))(a1, 9);
          int v28 = (char *)v18 + (int)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1) * v27);
          int v29 = *(_DWORD *)(a1 + 1272);
          int v30 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
          memmove(v26, v28, v29 * (uint64_t)v30);
          if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 240))(a1))
          {
            int v31 = *(_DWORD *)(a1 + 1272);
            uint64_t v32 = &v26[(int)(v31 * a3 * (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1))];
            int v33 = *(_DWORD *)(a1 + 1272);
            int v34 = &v28[v33 * (uint64_t)(*(int (**)(uint64_t))(*(void *)a1 + 88))(a1)];
            int v35 = *(_DWORD *)(a1 + 1272);
            int v36 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
            memmove(v32, v34, v35 * (uint64_t)v36);
          }
        }
        ++v13;
      }
      while (a3 != v13);
    }
  }
  else
  {
    long long v37 = *(void **)(a1 + 1280);
    bzero(v37, v10 * a3);
  }
}

void sub_19E23F758(uint64_t a1)
{
  sub_19E25E690(a1);
  int v2 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 80))(a1, 9);
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1) == 9
    || (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1) == 10)
  {
    int v4 = 0;
  }
  else
  {
    int v5 = *(_DWORD *)(a1 + 1272);
    int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1) * v5;
  }
  int v6 = v4 + v3 * v2;
  char v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 240))(a1);
  sub_19E30A424(*(void *)(a1 + 8), (v6 << v7) * *(_DWORD *)(a1 + 280), *(void **)(a1 + 1280));
  *(void *)(a1 + 1280) = 0;
}

uint64_t sub_19E23F8C0(uint64_t a1)
{
  uint64_t v2 = sub_19E25E72C(a1);
  if (*(void *)(a1 + 1280))
  {
    int v3 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 80))(a1, 9);
    int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1) * v3;
    if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1) == 9
      || (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1) == 10)
    {
      int v5 = 0;
    }
    else
    {
      int v6 = *(_DWORD *)(a1 + 1272);
      int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1) * v6;
    }
    return (v2
                        + ((v5 + v4) << (*(uint64_t (**)(uint64_t))(*(void *)a1 + 240))(a1))
                        * *(_DWORD *)(a1 + 280));
  }
  return v2;
}

int64x2_t sub_19E23FA28(int *a1, int a2)
{
  uint64_t v4 = a1[142];
  char v5 = (*(uint64_t (**)(int *))(*(void *)a1 + 240))(a1);
  int v6 = (*(uint64_t (**)(int *))(*(void *)a1 + 224))(a1);
  int v7 = (*(uint64_t (**)(int *, uint64_t))(*(void *)a1 + 216))(a1, 1);
  int v9 = (uint64_t **)(a1 + 12);
  int v8 = (char *)*((void *)a1 + 6);
  if (v8)
  {
    while (1)
    {
      while (1)
      {
        int v10 = v8;
        int v11 = *((_DWORD *)v8 + 8);
        if (v11 <= a2) {
          break;
        }
        int v8 = *(char **)v10;
        int v9 = (uint64_t **)v10;
        if (!*(void *)v10) {
          goto LABEL_8;
        }
      }
      if (v11 >= a2) {
        break;
      }
      int v8 = (char *)*((void *)v10 + 1);
      if (!v8)
      {
        int v9 = (uint64_t **)(v10 + 8);
        goto LABEL_8;
      }
    }
  }
  else
  {
    int v10 = (char *)(a1 + 12);
LABEL_8:
    size_t v12 = v10;
    int v10 = (char *)operator new(0x50uLL);
    *((_DWORD *)v10 + 8) = a2;
    *(_OWORD *)(v10 + 40) = 0u;
    *(_OWORD *)(v10 + 56) = 0u;
    *((void *)v10 + 9) = 0;
    *(void *)int v10 = 0;
    *((void *)v10 + 1) = 0;
    *((void *)v10 + 2) = v12;
    *int v9 = (uint64_t *)v10;
    uint64_t v13 = **((void **)a1 + 5);
    uint64_t v14 = (uint64_t *)v10;
    if (v13)
    {
      *((void *)a1 + 5) = v13;
      uint64_t v14 = *v9;
    }
    sub_19E13C8A0(*((uint64_t **)a1 + 6), v14);
    ++*((void *)a1 + 7);
  }
  int64x2_t result = vdupq_n_s64(1uLL);
  *(int64x2_t *)(v10 + 40) = result;
  *((void *)v10 + 7) = v4 << v5;
  *((void *)v10 + 8) = v6;
  *((void *)v10 + 9) = v7;
  return result;
}

void sub_19E23FBB0()
{
}

void sub_19E23FCC0(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    v1[7] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E23FCE4()
{
}

void sub_19E23FDE8(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    v1[9] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E23FE0C()
{
}

void sub_19E23FE9C()
{
}

void sub_19E23FFA0(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    v1[9] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E23FFC4()
{
}

uint64_t sub_19E240060()
{
  return 0;
}

uint64_t sub_19E240068()
{
  return 0;
}

uint64_t sub_19E240070()
{
  return 0;
}

uint64_t sub_19E240078()
{
  return 0;
}

uint64_t sub_19E240080()
{
  return 0;
}

uint64_t sub_19E240088()
{
  return 0;
}

void *sub_19E240090(void *a1)
{
  *a1 = &unk_1EF0A9CB8;
  uint64_t v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_19E2400E0(void *__p)
{
  void *__p = &unk_1EF0A9CB8;
  uint64_t v2 = (void *)__p[6];
  if (v2)
  {
    __p[7] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

void sub_19E240140(uint64_t a1, int a2, __n128 a3, __n128 a4, __n128 a5)
{
  uint64_t v7 = **(void **)(a1 + 32);
  uint64_t v8 = *(int *)(a1 + 72);
  uint64_t v101 = **(void **)(a1 + 40);
  if (a2)
  {
    if (a2 < 0) {
      sub_19E13D694();
    }
    int v9 = (char *)operator new(4 * a2);
    bzero(v9, 4 * a2);
  }
  else
  {
    int v9 = 0;
  }
  uint64_t v10 = v7 + 4 * v8;
  uint64_t v97 = 4 * v8;
  uint64_t v11 = v101 + 4 * v8;
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v108 = v12;
  if (v12 != 7 && v12 != 4)
  {
LABEL_48:
    unsigned int v14 = a2;
    if (a2 < 1) {
      goto LABEL_104;
    }
    goto LABEL_49;
  }
  unsigned int v14 = a2;
  if (!a2) {
    goto LABEL_104;
  }
  uint64_t v15 = *(unsigned int *)(a1 + 24);
  if ((int)v15 >= 1)
  {
    uint64_t v16 = 4 * *(int *)(a1 + 76);
    uint64_t v103 = v16;
    uint64_t v105 = a2;
    if (v15 >= 8)
    {
      uint64_t v34 = 0;
      uint64_t v99 = v7;
      unint64_t v35 = v101 + 4 * v8;
      unint64_t v36 = v7 + 4 * v8;
      do
      {
        uint64_t v37 = 0;
        uint64_t v38 = (unsigned __int32 *)&v9[4 * v34];
        uint64_t v39 = v38 + 1;
        a4.n128_u32[0] = *v38;
        uint64_t v40 = 4 * (v8 + v15) + v16 * v34;
        unint64_t v41 = v7 + v40;
        unint64_t v42 = v101 + v40;
        BOOL v44 = v35 < v7 + v40 && v36 < v42;
        BOOL v46 = (unint64_t)v38 < v41 && v36 < (unint64_t)v39;
        if ((unint64_t)v38 < v42 && v35 < (unint64_t)v39) {
          goto LABEL_112;
        }
        if (v44) {
          goto LABEL_112;
        }
        if (v46) {
          goto LABEL_112;
        }
        uint64_t v48 = 0;
        a3.n128_u64[0] = 0;
        a5.n128_u64[0] = *v38;
        do
        {
          __n128 v122 = a3;
          LODWORD(v109) = *(void *)(v36 + v48);
          __n128 v115 = a5;
          uint64_t v117 = *(void *)(v36 + v48 + 8);
          float v112 = expf(COERCE_FLOAT(HIDWORD(*(void *)(v36 + v48))));
          v49.f32[0] = expf(v109);
          v49.f32[1] = v112;
          float32x2_t v113 = v49;
          float v110 = expf(*((float *)&v117 + 1));
          v50.f32[0] = expf(*(float *)&v117);
          v50.f32[1] = v110;
          unint64_t v51 = (float32x2_t *)(v35 + v48);
          a5.n128_u64[1] = v115.n128_u64[1];
          *unint64_t v51 = v113;
          v51[1] = v50;
          a5.n128_u64[0] = (unint64_t)vadd_f32((float32x2_t)v115.n128_u64[0], v113);
          a4.n128_u64[1] = v122.n128_u64[1];
          a4.n128_u64[0] = (unint64_t)vadd_f32((float32x2_t)v122.n128_u64[0], v50);
          a3 = a4;
          v48 += 16;
        }
        while (((4 * v15) & 0x3FFFFFFF0) != v48);
        a4.n128_f32[0] = vaddv_f32(vadd_f32((float32x2_t)a4.n128_u64[0], (float32x2_t)a5.n128_u64[0]));
        *(_DWORD *)&v9[4 * v34] = a4.n128_u32[0];
        uint64_t v37 = v15 & 0xFFFFFFFC;
        if (v37 != v15)
        {
LABEL_112:
          do
          {
            __n128 v123 = a4;
            a3.n128_f32[0] = expf(*(float *)(v36 + 4 * v37));
            a4 = v123;
            *(_DWORD *)(v35 + 4 * v37) = a3.n128_u32[0];
            a4.n128_f32[0] = v123.n128_f32[0] + a3.n128_f32[0];
            *(float *)&v9[4 * v34] = v123.n128_f32[0] + a3.n128_f32[0];
            ++v37;
          }
          while (v15 != v37);
        }
        uint64_t v16 = v103;
        v36 += v103;
        v35 += v103;
        ++v34;
        uint64_t v7 = v99;
      }
      while (v34 != a2);
    }
    else
    {
      uint64_t v17 = v101 + 12;
      uint64_t v18 = 4 * v8;
      int v19 = (float *)v9;
      do
      {
        float v20 = *v19;
        float v21 = expf(*(float *)(v7 + v18));
        *(float *)(v101 + v18) = v21;
        float v22 = v20 + v21;
        *int v19 = v22;
        if (v15 != 1)
        {
          float v23 = expf(*(float *)(v7 + v18 + 4));
          *(float *)(v17 + v18 - 8) = v23;
          float v24 = v22 + v23;
          *int v19 = v24;
          if (v15 != 2)
          {
            float v25 = expf(*(float *)(v7 + v18 + 8));
            *(float *)(v17 + v18 - 4) = v25;
            float v26 = v24 + v25;
            *int v19 = v26;
            if (v15 != 3)
            {
              float v27 = expf(*(float *)(v7 + v18 + 12));
              *(float *)(v17 + v18) = v27;
              float v28 = v26 + v27;
              *int v19 = v28;
              if (v15 != 4)
              {
                float v29 = expf(*(float *)(v7 + v18 + 16));
                *(float *)(v17 + v18 + 4) = v29;
                float v30 = v28 + v29;
                *int v19 = v30;
                if (v15 != 5)
                {
                  float v31 = expf(*(float *)(v7 + v18 + 20));
                  *(float *)(v17 + v18 + 8) = v31;
                  float v32 = v30 + v31;
                  *int v19 = v32;
                  if (v15 != 6)
                  {
                    float v33 = expf(*(float *)(v7 + v18 + 24));
                    *(float *)(v17 + v18 + 12) = v33;
                    *int v19 = v32 + v33;
                  }
                }
              }
            }
          }
        }
        ++v19;
        v18 += v103;
        --v105;
      }
      while (v105);
    }
    goto LABEL_48;
  }
LABEL_49:
  uint64_t v52 = *(unsigned int *)(a1 + 24);
  if ((int)v52 >= 1)
  {
    uint64_t v53 = v7;
    uint64_t v54 = 0;
    uint64_t v106 = v14;
    uint64_t v55 = v97 + v101;
    uint64_t v116 = 4 * *(int *)(a1 + 76);
    uint64_t v102 = v97 + v53;
    uint64_t v104 = v55;
    uint64_t v100 = v52 & 0xFFFFFFF8;
    uint64_t v56 = 4 * v52;
    uint64_t v57 = (4 * v52) & 0x3FFFFFFE0;
    uint64_t v58 = (4 * v52) & 0x3FFFFFFF0;
    __asm { FMOV            V0.4S, #1.0 }
    float32x4_t v114 = _Q0;
    __asm { FMOV            V11.2S, #1.0 }
    while (1)
    {
      uint64_t v63 = v104 + v116 * v54;
      uint64_t v64 = v102 + v116 * v54;
      switch(v108)
      {
        case 0:
          uint64_t v65 = 0;
          if (v52 < 8) {
            goto LABEL_113;
          }
          if ((unint64_t)(v63 - v64) < 0x20) {
            goto LABEL_113;
          }
          uint64_t v66 = 0;
          do
          {
            _Q0 = *(float32x4_t *)(v10 + v66);
            float32x4_t v67 = *(float32x4_t *)(v10 + v66 + 16);
            unint64_t v68 = (float32x4_t *)(v11 + v66);
            float32x4_t *v68 = _Q0;
            v68[1] = v67;
            v66 += 32;
          }
          while (v57 != v66);
          uint64_t v65 = v52 & 0xFFFFFFF8;
          if (v100 != v52)
          {
LABEL_113:
            do
            {
              *(_DWORD *)(v11 + 4 * v65) = *(_DWORD *)(v10 + 4 * v65);
              ++v65;
            }
            while (v52 != v65);
          }
          goto LABEL_51;
        case 1:
          uint64_t v74 = 0;
          if (v52 < 4) {
            goto LABEL_114;
          }
          if ((unint64_t)(v63 - v64) < 0x10) {
            goto LABEL_114;
          }
          uint64_t v75 = 0;
          do
          {
            float32x4_t v124 = vnegq_f32(*(float32x4_t *)(v10 + v75));
            float v118 = expf(v124.f32[1]);
            v76.f32[0] = expf(v124.f32[0]);
            v76.f32[1] = v118;
            float32x4_t v119 = v76;
            float v77 = expf(v124.f32[2]);
            float32x4_t v78 = v119;
            v78.f32[2] = v77;
            float32x4_t v120 = v78;
            float v79 = expf(v124.f32[3]);
            float32x4_t v80 = v120;
            v80.f32[3] = v79;
            _Q0 = vdivq_f32(v114, vaddq_f32(v80, v114));
            *(float32x4_t *)(v11 + v75) = _Q0;
            v75 += 16;
          }
          while (v58 != v75);
          uint64_t v74 = v52 & 0xFFFFFFFC;
          if (v74 != v52)
          {
LABEL_114:
            do
            {
              *(float *)(v11 + 4 * v74) = 1.0 / (float)(expf(-*(float *)(v10 + 4 * v74)) + 1.0);
              uint64_t v58 = (4 * v52) & 0x3FFFFFFF0;
              ++v74;
            }
            while (v52 != v74);
          }
          goto LABEL_51;
        case 2:
          uint64_t v69 = 0;
          do
          {
            *(float *)(v11 + v69) = tanhf(*(float *)(v10 + v69));
            v69 += 4;
          }
          while (v56 != v69);
          goto LABEL_51;
        case 3:
          uint64_t v84 = 0;
          do
          {
            *(float *)(v11 + v84) = tanhf(*(float *)(v10 + v84) * 0.66667) * 1.7159;
            v84 += 4;
          }
          while (v56 != v84);
          goto LABEL_51;
        case 4:
          _Q0.i32[0] = *(_DWORD *)&v9[4 * v54];
          if (v52 >= 8)
          {
            uint64_t v92 = 0;
            float32x4_t v93 = vdivq_f32(v114, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q0.f32, 0));
            do
            {
              float v94 = (float32x4_t *)(v11 + v92);
              float32x4_t v95 = vmulq_f32(*(float32x4_t *)(v11 + v92 + 16), v93);
              float32x4_t *v94 = vmulq_f32(*(float32x4_t *)(v11 + v92), v93);
              v94[1] = v95;
              v92 += 32;
            }
            while (v57 != v92);
            uint64_t v85 = v52 & 0xFFFFFFF8;
            if (v100 == v52) {
              goto LABEL_51;
            }
          }
          else
          {
            uint64_t v85 = 0;
          }
          float v96 = 1.0 / _Q0.f32[0];
          do
          {
            *(float *)(v11 + 4 * v85) = *(float *)(v11 + 4 * v85) * v96;
            ++v85;
          }
          while (v52 != v85);
LABEL_51:
          ++v54;
          v11 += v116;
          v10 += v116;
          if (v54 == v106) {
            goto LABEL_104;
          }
          break;
        case 5:
          uint64_t v70 = 0;
          if (v52 < 8) {
            goto LABEL_115;
          }
          if ((unint64_t)(v63 - v64) < 0x20) {
            goto LABEL_115;
          }
          uint64_t v71 = 0;
          do
          {
            _Q0 = vmaxnmq_f32(*(float32x4_t *)(v10 + v71), (float32x4_t)0);
            float32x4_t v72 = vmaxnmq_f32(*(float32x4_t *)(v10 + v71 + 16), (float32x4_t)0);
            unint64_t v73 = (float32x4_t *)(v11 + v71);
            float32x4_t *v73 = _Q0;
            v73[1] = v72;
            v71 += 32;
          }
          while (v57 != v71);
          uint64_t v70 = v52 & 0xFFFFFFF8;
          if (v100 != v52)
          {
LABEL_115:
            do
            {
              *(float *)(v11 + 4 * v70) = fmaxf(*(float *)(v10 + 4 * v70), 0.0);
              ++v70;
            }
            while (v52 != v70);
          }
          goto LABEL_51;
        case 6:
          uint64_t v81 = 0;
          uint64_t v82 = *(float **)(a1 + 48);
          do
          {
            _Q0.i64[0] = 0;
            if (*v82 <= 0.0850324487) {
              _Q0.i32[0] = *(_DWORD *)(v10 + v81);
            }
            *(_DWORD *)(v11 + v81) = _Q0.i32[0];
            v81 += 4;
          }
          while (v56 != v81);
          goto LABEL_51;
        case 7:
          v5.i32[0] = *(_DWORD *)&v9[4 * v54];
          if (v52 == 1)
          {
            uint64_t v83 = 0;
          }
          else
          {
            uint64_t v88 = 0;
            LODWORD(v111) = vdiv_f32(_D11, v5).u32[0];
            uint64_t v89 = v52 & 0xFFFFFFFE;
            do
            {
              float32x2_t v90 = vmul_n_f32(*(float32x2_t *)(v11 + v88), v111);
              float v121 = v90.f32[0];
              float v125 = logf(v90.f32[1]);
              _Q0.f32[0] = logf(v121);
              _Q0.f32[1] = v125;
              *(void *)(v11 + v88) = _Q0.i64[0];
              v88 += 8;
              v89 -= 2;
            }
            while (v89);
            uint64_t v83 = v52 & 0xFFFFFFFE;
            uint64_t v58 = (4 * v52) & 0x3FFFFFFF0;
            if (v83 == v52) {
              goto LABEL_51;
            }
          }
          float v91 = 1.0 / v5.f32[0];
          do
          {
            *(float *)(v11 + 4 * v83) = logf(*(float *)(v11 + 4 * v83) * v91);
            uint64_t v58 = (4 * v52) & 0x3FFFFFFF0;
            ++v83;
          }
          while (v52 != v83);
          goto LABEL_51;
        case 11:
          uint64_t v86 = 0;
          do
          {
            float v87 = *(float *)(v10 + v86);
            if (v87 < 0.0) {
              float v87 = *(float *)(a1 + 80) * v87;
            }
            *(float *)(v11 + v86) = v87;
            v86 += 4;
          }
          while (v56 != v86);
          goto LABEL_51;
        default:
          goto LABEL_51;
      }
    }
  }
LABEL_104:
  if (v9)
  {
    operator delete(v9);
  }
}

void sub_19E2409A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_19E2409F4(void *a1)
{
  *a1 = &unk_1EF0A8D30;
  uint64_t v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_19E240A44(void *__p)
{
  void *__p = &unk_1EF0A8D30;
  uint64_t v2 = (void *)__p[8];
  if (v2)
  {
    __p[9] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

uint64_t sub_19E240AAC(uint64_t result, int a2)
{
  uint64_t v2 = **(void **)(result + 16);
  int v3 = (_DWORD *)(**(void **)(result + 24) + 4 * *(int *)(result + 52));
  uint64_t v4 = **(void **)(result + 32);
  if (*(unsigned char *)(result + 45))
  {
    *(unsigned char *)(result + 44) = 1;
    *(_DWORD *)(result + 40) = *v3;
  }
  if (a2 >= 1)
  {
    uint64_t v5 = *(unsigned int *)(result + 76);
    if ((int)v5 >= 1)
    {
      int v6 = 0;
      uint64_t v7 = v2 + 4 * *(int *)(result + 48);
      uint64_t v8 = v4 + 4 * *(int *)(result + 56);
      uint64_t v9 = 4 * *(int *)(result + 60);
      int v10 = *(_DWORD *)(result + 72);
      uint64_t v11 = 4 * *(int *)(result + 64);
      uint64_t v12 = 4 * *(int *)(result + 68);
      do
      {
        unint64_t v13 = 0;
        do
        {
          switch(v10)
          {
            case 0:
              if (*(unsigned char *)(result + 44))
              {
                float v14 = *(float *)(result + 40);
              }
              else if (v3)
              {
                float v14 = *(float *)&v3[v13 / 4];
              }
              else
              {
                float v14 = 0.0;
              }
              float v15 = *(float *)(v7 + v13);
              goto LABEL_11;
            case 1:
              if (*(unsigned char *)(result + 44))
              {
                float v17 = *(float *)(result + 40);
              }
              else if (v3)
              {
                float v17 = *(float *)&v3[v13 / 4];
              }
              else
              {
                float v17 = 0.0;
              }
              float v16 = *(float *)(v7 + v13) - v17;
              goto LABEL_12;
            case 2:
              if (*(unsigned char *)(result + 44))
              {
                float v18 = *(float *)(result + 40);
              }
              else if (v3)
              {
                float v18 = *(float *)&v3[v13 / 4];
              }
              else
              {
                float v18 = 1.0;
              }
              float v16 = v18 * *(float *)(v7 + v13);
              goto LABEL_12;
            case 3:
              if (*(unsigned char *)(result + 44))
              {
                float v19 = *(float *)(result + 40);
              }
              else if (v3)
              {
                float v19 = *(float *)&v3[v13 / 4];
              }
              else
              {
                float v19 = 1.0;
              }
              float v16 = *(float *)(v7 + v13) / v19;
              goto LABEL_12;
            case 4:
              float v16 = sqrtf(*(float *)(v7 + v13));
              goto LABEL_12;
            case 5:
              if (*(unsigned char *)(result + 44))
              {
                float v20 = *(float *)(result + 40);
              }
              else if (v3)
              {
                float v20 = *(float *)&v3[v13 / 4];
              }
              else
              {
                float v20 = 1.0;
              }
              float v16 = *(float *)(v8 + v13) + (float)(v20 * *(float *)(v7 + v13));
              goto LABEL_12;
            case 6:
              if (*(unsigned char *)(result + 44))
              {
                float v21 = *(float *)(result + 40);
              }
              else if (v3)
              {
                float v21 = *(float *)&v3[v13 / 4];
              }
              else
              {
                float v21 = 0.0;
              }
              float v14 = v21 + *(float *)(v7 + v13);
              float v15 = *(float *)(v8 + v13);
LABEL_11:
              float v16 = v14 + v15;
LABEL_12:
              *(float *)(v8 + v13) = v16;
              break;
            default:
              break;
          }
          v13 += 4;
        }
        while (4 * v5 != v13);
        int v3 = (_DWORD *)((char *)v3 + v11);
        ++v6;
        v7 += v9;
        v8 += v12;
      }
      while (v6 != a2);
    }
  }
  return result;
}

void *sub_19E240CB8(void *a1)
{
  *a1 = &unk_1EF0A8D08;
  uint64_t v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_19E240D08(void *__p)
{
  void *__p = &unk_1EF0A8D08;
  uint64_t v2 = (void *)__p[8];
  if (v2)
  {
    __p[9] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

uint64_t sub_19E240D70(uint64_t result, int a2, double a3)
{
  uint64_t v3 = **(void **)(result + 16);
  uint64_t v4 = (unsigned char *)(**(void **)(result + 24) + *(int *)(result + 48));
  uint64_t v5 = **(void **)(result + 32);
  if (*(unsigned char *)(result + 42))
  {
    *(unsigned char *)(result + 41) = 1;
    *(unsigned char *)(result + 40) = *v4;
  }
  if (a2 >= 1)
  {
    uint64_t v6 = *(unsigned int *)(result + 72);
    if ((int)v6 >= 1)
    {
      int v7 = 0;
      uint64_t v8 = v3 + *(int *)(result + 44);
      uint64_t v9 = *(int *)(result + 56);
      uint64_t v10 = v5 + 4 * *(int *)(result + 52);
      uint64_t v11 = *(int *)(result + 60);
      int v12 = *(_DWORD *)(result + 68);
      uint64_t v13 = 4 * *(int *)(result + 64);
      do
      {
        for (uint64_t i = 0; i != v6; ++i)
        {
          switch(v12)
          {
            case 0:
              if (*(unsigned char *)(result + 41))
              {
                int v15 = *(char *)(result + 40);
              }
              else if (v4)
              {
                int v15 = (char)v4[i];
              }
              else
              {
                int v15 = 0;
              }
              LOBYTE(a3) = *(unsigned char *)(v8 + i);
              *(void *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
              *(float *)&a3 = (float)v15 + (float)SLODWORD(a3);
              goto LABEL_9;
            case 1:
              if (*(unsigned char *)(result + 41))
              {
                int v18 = *(char *)(result + 40);
              }
              else if (v4)
              {
                int v18 = (char)v4[i];
              }
              else
              {
                int v18 = 0;
              }
              LOBYTE(a3) = *(unsigned char *)(v8 + i);
              *(void *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
              *(float *)&a3 = (float)SLODWORD(a3) - (float)v18;
              goto LABEL_9;
            case 2:
              if (*(unsigned char *)(result + 41))
              {
                int v16 = *(char *)(result + 40);
              }
              else if (v4)
              {
                int v16 = (char)v4[i];
              }
              else
              {
                int v16 = 1;
              }
              LOBYTE(a3) = *(unsigned char *)(v8 + i);
              *(void *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
              *(float *)&a3 = (float)v16 * (float)SLODWORD(a3);
              goto LABEL_9;
            case 3:
              if (*(unsigned char *)(result + 41))
              {
                int v17 = *(char *)(result + 40);
              }
              else if (v4)
              {
                int v17 = (char)v4[i];
              }
              else
              {
                int v17 = 1;
              }
              LOBYTE(a3) = *(unsigned char *)(v8 + i);
              *(void *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
              *(float *)&a3 = (float)SLODWORD(a3) / (float)v17;
              goto LABEL_9;
            case 4:
              LOBYTE(a3) = *(unsigned char *)(v8 + i);
              *(void *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
              *(float *)&a3 = sqrtf((float)SLODWORD(a3));
LABEL_9:
              *(_DWORD *)(v10 + 4 * i) = LODWORD(a3);
              break;
            case 5:
              if (*(unsigned char *)(result + 41))
              {
                int v19 = *(char *)(result + 40);
              }
              else if (v4)
              {
                int v19 = (char)v4[i];
              }
              else
              {
                int v19 = 1;
              }
              LOBYTE(a3) = *(unsigned char *)(v8 + i);
              *(void *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
              *(float *)&a3 = *(float *)(v10 + 4 * i) + (float)((float)v19 * (float)SLODWORD(a3));
              *(_DWORD *)(v10 + 4 * i) = LODWORD(a3);
              break;
            case 6:
              if (*(unsigned char *)(result + 41))
              {
                int v20 = *(char *)(result + 40);
              }
              else if (v4)
              {
                int v20 = (char)v4[i];
              }
              else
              {
                int v20 = 0;
              }
              LOBYTE(a3) = *(unsigned char *)(v8 + i);
              *(void *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
              *(float *)&a3 = (float)v20 + (float)((float)SLODWORD(a3) + *(float *)(v10 + 4 * i));
              *(_DWORD *)(v10 + 4 * i) = LODWORD(a3);
              break;
            default:
              continue;
          }
        }
        v8 += v9;
        v4 += v11;
        ++v7;
        v10 += v13;
      }
      while (v7 != a2);
    }
  }
  return result;
}

void sub_19E240FF0(uint64_t a1, int a2)
{
  if (a2 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = a2;
    uint64_t v5 = 4 * *(_DWORD *)(a1 + 16) * *(_DWORD *)(a1 + 20);
    do
    {
      vDSP_mtrans((const float *)(**(void **)(a1 + 24) + v3), 1, (float *)(**(void **)(a1 + 32) + v3), 1, *(int *)(a1 + 20), *(int *)(a1 + 16));
      v3 += v5;
      --v4;
    }
    while (v4);
  }
}

void sub_19E241070(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  sub_19E246358((uint64_t)v222, a3);
  int v7 = v223;
  sub_19E242424(a2, v223, (uint64_t)v219);
  uint64_t v188 = v7;
  uint64_t v196 = a2;
  if ((int)a2 >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    while (1)
    {
      sub_19E242524(a1, v188, (uint64_t)__p);
      uint64_t v10 = v221;
      uint64_t v11 = (char *)__p[0];
      if (v221) {
        break;
      }
      if (__p[0]) {
        goto LABEL_4;
      }
LABEL_5:
      ++v9;
      v8 += 8;
      if (v9 == a2) {
        goto LABEL_17;
      }
    }
    int v12 = (char *)v219[0];
    if (v221 >= 6 && (unint64_t)((char *)v219[0] + 8 * v9 * v221 - (char *)__p[0]) >= 0x20)
    {
      unint64_t v13 = v221 & 0xFFFFFFFFFFFFFFFCLL;
      int v18 = (long long *)((char *)__p[0] + 16);
      int v19 = (char *)v219[0] + v8 * v221 + 16;
      unint64_t v20 = v13;
      do
      {
        long long v21 = *v18;
        *(v19 - 1) = *(v18 - 1);
        *int v19 = v21;
        v18 += 2;
        v19 += 2;
        v20 -= 4;
      }
      while (v20);
      if (v13 == v10) {
        goto LABEL_4;
      }
    }
    else
    {
      unint64_t v13 = 0;
    }
    uint64_t v14 = v10 - v13;
    int v15 = &v12[8 * v13 + 8 * v9 * v10];
    int v16 = &v11[8 * v13];
    do
    {
      uint64_t v17 = *(void *)v16;
      v16 += 8;
      *(void *)int v15 = v17;
      v15 += 8;
      --v14;
    }
    while (v14);
LABEL_4:
    __p[1] = v11;
    operator delete(v11);
    goto LABEL_5;
  }
LABEL_17:
  uint64_t v178 = a1;
  uint64_t v187 = a4;
  sub_19E242424(a2, v188, (uint64_t)v215);
  uint64_t v190 = v188 & ~((int)v188 >> 31);
  if ((int)v188 >= 1)
  {
    int v22 = a2 + 1;
    if (a2 == -1)
    {
      int v211 = 0;
      uint64_t v212 = 0;
      LODWORD(v214) = 0;
      uint64_t v213 = 0;
      int64_t v207 = 0;
      size_t v208 = 0;
      size_t v209 = 0;
LABEL_237:
      sub_19E13D694();
    }
    if ((int)a2 < -1)
    {
      int v211 = 0;
      uint64_t v212 = 0;
      uint64_t v213 = 0;
      sub_19E13D694();
    }
    uint64_t v23 = 0;
    uint64_t v24 = v22;
    size_t v25 = 8 * v22;
    unint64_t v183 = v22 & 0xFFFFFFFFFFFFFFFCLL;
    vDSP_Length __N = (int)a2;
    unint64_t v182 = (int)a2 & 0xFFFFFFFFFFFFFFFCLL;
    __asm { FMOV            V2.2D, #1.0 }
    float64x2_t v181 = vdivq_f64(_Q2, (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v22), 0));
    double v30 = 1.0 / (double)v22;
    uint64_t __sz = 8 * (int)a2;
    uint64_t v192 = 16;
    int64x2_t v180 = vdupq_n_s64(2uLL);
    int64x2_t v179 = vdupq_n_s64(4uLL);
    uint64_t v185 = v22;
    int v186 = a2 + 1;
    size_t v184 = v25;
    while (1)
    {
      uint64_t v31 = 8 * (int)v23;
      uint64_t v203 = *(uint64_t *)((char *)v222[0] + v31);
      double v32 = *(double *)&v224[v31];
      float v33 = (double *)operator new(v25);
      int v211 = v33;
      uint64_t v213 = (uint64_t)&v33[(unint64_t)__sz / 8 + 1];
      bzero(v33, v25);
      uint64_t v212 = (double *)((char *)v33 + v25);
      LODWORD(v214) = v22;
      if (!a2)
      {
        unint64_t v36 = 0;
        uint64_t v37 = 0;
        uint64_t v38 = 0;
        uint64_t v39 = 0;
        double *v33 = v32;
        int64_t v207 = 0;
        size_t v208 = 0;
        int v210 = 0;
        size_t v209 = 0;
        vDSP_Length v40 = __N;
        goto LABEL_46;
      }
      double v34 = v32 - *(double *)&v203;
      if (v22 < 4) {
        break;
      }
      float64x2_t v41 = (float64x2_t)vdupq_lane_s64(v203, 0);
      unint64_t v42 = (float64x2_t *)(v33 + 2);
      unint64_t v43 = v183;
      int64x2_t v44 = (int64x2_t)xmmword_19E3517F0;
      do
      {
        v42[-1] = vmlaq_f64(v41, vmulq_n_f64(vcvtq_f64_u64((uint64x2_t)v44), v34), v181);
        float64x2_t *v42 = vmlaq_f64(v41, vmulq_n_f64(vcvtq_f64_u64((uint64x2_t)vaddq_s64(v44, v180)), v34), v181);
        int64x2_t v44 = vaddq_s64(v44, v179);
        v42 += 2;
        v43 -= 4;
      }
      while (v43);
      unint64_t v35 = v183;
      if (v183 != v24) {
        goto LABEL_29;
      }
LABEL_30:
      int64_t v207 = 0;
      size_t v208 = 0;
      size_t v209 = 0;
      if ((a2 & 0x80000000) != 0) {
        goto LABEL_237;
      }
      vDSP_Length v40 = __N;
      uint64_t v37 = operator new(__sz);
      int64_t v207 = v37;
      size_t v209 = (char *)v37 + 8 * __N;
      bzero(v37, __sz);
      size_t v208 = (char *)v37 + __sz;
      int v210 = a2;
      if (a2 < 4)
      {
        uint64_t v45 = 0;
LABEL_36:
        uint64_t v50 = v196 - v45;
        uint64_t v51 = v45 << 32;
        do
        {
          *(double *)((char *)v37 + (v51 >> 29)) = *(double *)((char *)v33 + (v51 >> 29));
          v51 += 0x100000000;
          --v50;
        }
        while (v50);
        goto LABEL_38;
      }
      BOOL v46 = v37 + 1;
      uint64_t v47 = (long long *)(v33 + 2);
      uint64_t v48 = v196 & 0xFFFFFFFC;
      do
      {
        long long v49 = *v47;
        *(v46 - 1) = *(v47 - 1);
        *BOOL v46 = v49;
        v46 += 2;
        v47 += 2;
        v48 -= 4;
      }
      while (v48);
      uint64_t v45 = v196 & 0xFFFFFFFC;
      if (v45 != v196) {
        goto LABEL_36;
      }
LABEL_38:
      unint64_t v36 = (char *)operator new(__sz);
      bzero(v36, __sz);
      if (v22 >= 3)
      {
        uint64_t v53 = 0;
        uint64_t v54 = v196 & 0xFFFFFFFE;
        do
        {
          uint64_t v55 = v53 >> 29;
          v53 += 0x200000000;
          uint64_t v56 = *(void *)((char *)v33 + (v53 >> 29));
          *(double *)&v36[v55] = *(double *)((char *)v33 + v55 + 8);
          *(void *)&v36[v55 + 8] = v56;
          v54 -= 2;
        }
        while (v54);
        uint64_t v52 = v196 & 0xFFFFFFFE;
        if (v52 == v196) {
          goto LABEL_45;
        }
      }
      else
      {
        uint64_t v52 = 0;
      }
      uint64_t v57 = v52 << 32;
      uint64_t v58 = v196 - v52;
      do
      {
        uint64_t v59 = v57 >> 29;
        v57 += 0x100000000;
        *(double *)&v36[v59] = *(double *)((char *)v33 + (v57 >> 29));
        --v58;
      }
      while (v58);
LABEL_45:
      uint64_t v39 = (char *)operator new(__sz);
      uint64_t v38 = &v39[8 * __N];
      memcpy(v39, v36, __sz);
LABEL_46:
      vDSP_vsubD((const double *)v37, 1, (const double *)v39, 1, (double *)v39, 1, v40);
      size_t v60 = v38 - v39;
      if (v60)
      {
        if ((v60 & 0x8000000000000000) != 0) {
          sub_19E13D694();
        }
        __A = (double *)operator new(v60);
        memcpy(__A, v39, v60);
        if (v39) {
LABEL_49:
        }
          operator delete(v39);
      }
      else
      {
        __A = 0;
        if (v39) {
          goto LABEL_49;
        }
      }
      vDSP_Length v201 = v220;
      uint64_t v226 = 0;
      long long v227 = 0uLL;
      uint64_t v189 = 8 * v23;
      unsigned int v204 = v220;
      if (!v220)
      {
        uint64_t v65 = 0;
        uint64_t v66 = 0;
        __src = 0;
        goto LABEL_65;
      }
      if (v220 < 0) {
        sub_19E13D694();
      }
      size_t v61 = 8 * v220;
      __src = operator new(v61);
      bzero(__src, 8 * v201);
      unint64_t v62 = 0;
      uint64_t v63 = v221;
      uint64_t v64 = (char *)v219[0];
      if (v204 >= 6 && v221 == 1)
      {
        if ((unint64_t)((char *)__src - ((char *)v219[0] + 8 * v23)) >= 0x20)
        {
          unint64_t v62 = v201 & 0xFFFFFFFFFFFFFFFCLL;
          float32x4_t v67 = (long long *)((char *)v219[0] + v192);
          unint64_t v68 = __src + 1;
          unint64_t v69 = v201 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            long long v70 = *v67;
            *(v68 - 1) = *(v67 - 1);
            _OWORD *v68 = v70;
            v67 += 2 * v63;
            v68 += 2;
            v69 -= 4;
          }
          while (v69);
          if (v62 == v201) {
            goto LABEL_64;
          }
        }
        else
        {
          unint64_t v62 = 0;
        }
      }
      vDSP_Length v71 = v201 - v62;
      float32x4_t v72 = (void *)__src + v62;
      unint64_t v73 = &v64[8 * v23 + 8 * (int)v62 * (uint64_t)(int)v63];
      uint64_t v74 = 8 * v63;
      do
      {
        *v72++ = *(void *)v73;
        v73 += v74;
        --v71;
      }
      while (v71);
LABEL_64:
      uint64_t v66 = (char *)operator new(v61);
      uint64_t v65 = &v66[v61];
      memcpy(v66, __src, v61);
LABEL_65:
      vDSP_vmulD(__A, 1, (const double *)v66, 1, (double *)v66, 1, v201);
      int64_t v75 = v65 - v66;
      if (v65 == v66)
      {
        float v77 = 0;
        float32x4_t v76 = 0;
        uint64_t v226 = 0;
        long long v227 = 0uLL;
        if (!a2) {
          goto LABEL_72;
        }
      }
      else
      {
        if (v75 < 0) {
          sub_19E13D694();
        }
        float32x4_t v76 = (char *)operator new(v65 - v66);
        float v77 = &v76[8 * (v75 >> 3)];
        memcpy(v76, v66, v75);
        uint64_t v226 = 0;
        long long v227 = 0uLL;
        if (!a2)
        {
LABEL_72:
          float32x4_t v78 = 0;
          goto LABEL_77;
        }
      }
      if ((a2 & 0x80000000) != 0) {
        sub_19E13D694();
      }
      float32x4_t v78 = (char *)operator new(__sz);
      uint64_t v226 = v78;
      *((void *)&v227 + 1) = &v78[8 * __N];
      bzero(v78, __sz);
      *(void *)&long long v227 = &v78[__sz];
      v228.i32[0] = a2;
      if (a2 < 4)
      {
        unint64_t v79 = 0;
        do
        {
LABEL_76:
          *(void *)&v78[8 * v79] = *((void *)v37 + v79);
          ++v79;
        }
        while (__N != v79);
        goto LABEL_77;
      }
      uint64_t v80 = 0;
      unint64_t v81 = v182;
      do
      {
        long long v82 = v37[v80 + 1];
        uint64_t v83 = &v78[v80 * 16];
        *(_OWORD *)uint64_t v83 = v37[v80];
        *((_OWORD *)v83 + 1) = v82;
        v80 += 2;
        v81 -= 4;
      }
      while (v81);
      unint64_t v79 = v182;
      if (v182 != __N) {
        goto LABEL_76;
      }
LABEL_77:
      uint64_t v84 = a2;
      vDSP_vaddD((const double *)v76, 1, (const double *)v78, 1, (double *)v76, 1, v201);
      int64_t v85 = v77 - v76;
      uint64_t v194 = v23;
      if (v77 == v76)
      {
        float v87 = 0;
        uint64_t v86 = 0;
        a2 = v84;
        if (v78) {
          goto LABEL_80;
        }
      }
      else
      {
        if (v85 < 0) {
          sub_19E13D694();
        }
        uint64_t v86 = (float64x2_t *)operator new(v77 - v76);
        float v87 = (char *)&v86->f64[v85 >> 3];
        memcpy(v86, v76, v85);
        a2 = v84;
        if (v78) {
LABEL_80:
        }
          operator delete(v78);
      }
      if (v76) {
        operator delete(v76);
      }
      if (v66) {
        operator delete(v66);
      }
      if (__src) {
        operator delete(__src);
      }
      if (v204)
      {
        uint64_t v88 = 8 * (int)v194;
        uint64_t v89 = *(void *)((char *)v222[0] + v88);
        uint64_t v90 = *(void *)&v224[v88];
        if (v204 < 4)
        {
          unint64_t v91 = 0;
LABEL_95:
          vDSP_Length v97 = v201 - v91;
          uint64_t v98 = &v86->f64[v91];
          do
          {
            *uint64_t v98 = fmax(fmin(*v98, *(double *)&v90), *(double *)&v89);
            ++v98;
            --v97;
          }
          while (v97);
          goto LABEL_97;
        }
        unint64_t v91 = v201 & 0xFFFFFFFFFFFFFFFCLL;
        float64x2_t v92 = (float64x2_t)vdupq_lane_s64(v90, 0);
        float64x2_t v93 = (float64x2_t)vdupq_lane_s64(v89, 0);
        float v94 = v86 + 1;
        unint64_t v95 = v201 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          float64x2_t v96 = vmaxnmq_f64(vminnmq_f64(*v94, v92), v93);
          v94[-1] = vmaxnmq_f64(vminnmq_f64(v94[-1], v92), v93);
          float64x2_t *v94 = v96;
          v94 += 2;
          v95 -= 4;
        }
        while (v95);
        if (v91 != v201) {
          goto LABEL_95;
        }
      }
LABEL_97:
      size_t v99 = v87 - (char *)v86;
      if (v99)
      {
        if ((v99 & 0x8000000000000000) != 0) {
          sub_19E13D694();
        }
        uint64_t v100 = (long long *)operator new(v99);
        memcpy(v100, v86, v99);
        signed int v101 = v216;
        uint64_t v102 = v194;
        if (!v216) {
          goto LABEL_112;
        }
LABEL_103:
        uint64_t v103 = v101;
        uint64_t v104 = v217;
        uint64_t v105 = (char *)v215[0];
        _ZF = v101 >= 6 && v217 == 1;
        if (!_ZF || (unint64_t)((char *)v215[0] + v189 - (char *)v100) < 0x20)
        {
          unint64_t v107 = 0;
          goto LABEL_110;
        }
        unint64_t v107 = v101 & 0xFFFFFFFFFFFFFFFCLL;
        float v110 = v100 + 1;
        float v111 = (char *)v215[0] + v192;
        unint64_t v112 = v103 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          long long v113 = *v110;
          *(v111 - 1) = *(v110 - 1);
          *float v111 = v113;
          v110 += 2;
          v111 += 2 * v104;
          v112 -= 4;
        }
        while (v112);
        if (v107 != v103)
        {
LABEL_110:
          uint64_t v108 = &v105[8 * v102 + 8 * (int)v107 * (uint64_t)(int)v104];
          uint64_t v109 = 8 * v104;
          do
          {
            *(void *)uint64_t v108 = *((void *)v100 + v107++);
            v108 += v109;
          }
          while (v103 != v107);
        }
LABEL_112:
        operator delete(v100);
        goto LABEL_113;
      }
      signed int v101 = v216;
      uint64_t v102 = v194;
      if (v216)
      {
        uint64_t v100 = 0;
        goto LABEL_103;
      }
LABEL_113:
      if (v86) {
        operator delete(v86);
      }
      if (__A) {
        operator delete(__A);
      }
      uint64_t v24 = v185;
      int v22 = v186;
      if (v36) {
        operator delete(v36);
      }
      if (v37) {
        operator delete(v37);
      }
      operator delete(v33);
      uint64_t v23 = v102 + 1;
      v192 += 8;
      size_t v25 = v184;
      if (v23 == v190) {
        goto LABEL_125;
      }
    }
    unint64_t v35 = 0;
    do
    {
LABEL_29:
      v33[v35] = *(double *)&v203 + v34 * (double)v35 * v30;
      ++v35;
    }
    while (v24 != v35);
    goto LABEL_30;
  }
LABEL_125:
  sub_19E242424(a2, v188, (uint64_t)&v211);
  float32x4_t v114 = v187;
  if ((int)v188 >= 1)
  {
    __n128 v115 = 0;
    uint64_t v116 = a2 & ~((int)a2 >> 31) | 0x100000000;
    uint64_t v117 = v178 + 7592;
    uint64_t v118 = 16;
    int64x2_t v202 = vdupq_n_s64(2uLL);
    uint64_t v195 = v116;
    do
    {
      sub_19E248AB8(&v207, 0x100000000uLL, 0, v116, 0);
      float32x4_t v120 = (char *)v207;
      float32x4_t v119 = v208;
      int64_t v121 = v208 - (unsigned char *)v207;
      if (v208 - (unsigned char *)v207 >= 5)
      {
        __n128 v122 = v208 - 4;
        if (v208 - 4 > v207)
        {
          unint64_t v123 = (unint64_t)v121 >> 2;
          while (v123 == 1)
          {
LABEL_131:
            v120 += 4;
            --v123;
            if (v120 >= v122)
            {
              float32x4_t v120 = (char *)v207;
              float32x4_t v119 = v208;
              int64_t v121 = v208 - (unsigned char *)v207;
              goto LABEL_159;
            }
          }
          if (v123)
          {
            unint64_t v124 = __clz(v123);
            if (((v123 << v124) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
              uint64_t v125 = 64;
            }
            else {
              uint64_t v125 = 63;
            }
            unsigned __int8 v126 = v125 - v124;
            uint64_t v226 = (char *)v117;
            *(void *)&long long v227 = v125 - v124;
            unint64_t v127 = (v125 - v124) >> 5;
            if ((v126 & 0x1F) != 0) {
              unint64_t v128 = v127 + 1;
            }
            else {
              unint64_t v128 = v127;
            }
            unint64_t v129 = v126 / v128;
            *((void *)&v227 + 1) = v129;
            v228.i64[0] = v128;
            unint64_t v130 = (-1 << (v126 / v128)) & 0x100000000;
            if (v129 >= 0x40) {
              unint64_t v130 = 0;
            }
            *(void *)&long long v229 = v130;
            if ((v130 ^ 0x100000000) <= v130 / v128)
            {
LABEL_145:
              v228.i64[1] = v128 - v126 % v128;
              if (v129 >= 0x3F) {
                goto LABEL_153;
              }
              *((void *)&v229 + 1) = 0x80000000uLL >> v129 << (v129 + 1);
              unsigned int v131 = 0xFFFFFFFF >> -(char)v129;
              if (!v129) {
                unsigned int v131 = 0;
              }
              LODWORD(v230) = v131;
              if (v129 >= 0x1F) {
                unsigned int v132 = -1;
              }
              else {
                unsigned int v132 = 0xFFFFFFFF >> ~(_BYTE)v129;
              }
            }
            else
            {
              unint64_t v129 = v126 / ++v128;
              *((void *)&v227 + 1) = v129;
              v228.i64[0] = v128;
              if (v129 <= 0x3F)
              {
                *(void *)&long long v229 = (-1 << (v126 / v128)) & 0x100000000;
                goto LABEL_145;
              }
              v228.i64[1] = v128 - (v126 % v128);
              *(void *)&long long v229 = 0;
              LODWORD(v129) = 64;
LABEL_153:
              *((void *)&v229 + 1) = 0;
              int v134 = -(int)v129;
              unsigned int v132 = -1;
              LODWORD(v230) = 0xFFFFFFFF >> v134;
            }
            HIDWORD(v230) = v132;
            do
              unint64_t v133 = sub_19E248B8C((uint64_t *)&v226);
            while (v133 >= v123);
          }
          else
          {
            uint64_t v226 = (char *)v117;
            long long v227 = xmmword_19E351800;
            int64x2_t v228 = v202;
            long long v229 = xmmword_19E351440;
            uint64_t v230 = -1;
            unint64_t v133 = sub_19E248B8C((uint64_t *)&v226);
          }
          if (v133)
          {
            int v135 = *(_DWORD *)v120;
            *(_DWORD *)float32x4_t v120 = *(_DWORD *)&v120[4 * v133];
            *(_DWORD *)&v120[4 * v133] = v135;
          }
          goto LABEL_131;
        }
      }
LABEL_159:
      unint64_t v205 = 0;
      if (v119 == v120)
      {
        unint64_t v159 = 0;
        uint64_t v160 = (int)v214;
        float32x4_t v114 = v187;
        if (v214) {
          goto LABEL_194;
        }
        goto LABEL_199;
      }
      if (v121 < 0) {
        sub_19E13D694();
      }
      uint64_t v136 = (int *)operator new(v121);
      unint64_t v137 = &v136[v121 >> 2];
      unint64_t v205 = v136;
      memcpy(v136, v120, v121);
      int64_t v206 = 0;
      if (!v121)
      {
        unint64_t v159 = 0;
        uint64_t v160 = (int)v214;
        float32x4_t v114 = v187;
        if (v214) {
          goto LABEL_194;
        }
        goto LABEL_199;
      }
      uint64_t v138 = 0;
      uint64_t v139 = v115;
      unint64_t v140 = 0;
      unint64_t v141 = 0;
      uint64_t v197 = v118;
      __Aa = v139;
      uint64_t v142 = v139;
      do
      {
        while (1)
        {
          uint64_t v143 = *((void *)v215[0] + v142 + v217 * (uint64_t)*v136);
          if (v141 >= v140) {
            break;
          }
          *(void *)unint64_t v141 = v143;
          v141 += 8;
          if (++v136 == v137) {
            goto LABEL_193;
          }
        }
        uint64_t v144 = (v141 - v138) >> 3;
        unint64_t v145 = v144 + 1;
        if ((unint64_t)(v144 + 1) >> 61) {
          sub_19E13D694();
        }
        if ((v140 - v138) >> 2 > v145) {
          unint64_t v145 = (v140 - v138) >> 2;
        }
        if ((unint64_t)(v140 - v138) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v146 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v146 = v145;
        }
        if (v146)
        {
          if (v146 >> 61) {
            sub_19E13C418();
          }
          uint64_t v147 = operator new(8 * v146);
          long long v148 = &v147[8 * v144];
          *long long v148 = v143;
          uint64_t v149 = (uint64_t)(v148 + 1);
          if (v141 == v138) {
            goto LABEL_179;
          }
        }
        else
        {
          uint64_t v147 = 0;
          long long v148 = (void *)(8 * v144);
          *(void *)(8 * v144) = v143;
          uint64_t v149 = 8 * v144 + 8;
          if (v141 == v138) {
            goto LABEL_179;
          }
        }
        unint64_t v150 = v141 - 8 - v138;
        if (v150 < 0x168)
        {
          unint64_t v151 = v141;
          goto LABEL_178;
        }
        if (&v147[v141 - v138 - 8 - (v150 & 0xFFFFFFFFFFFFFFF8)] > &v147[v141 - v138 - 8])
        {
          unint64_t v151 = v141;
          do
          {
LABEL_178:
            uint64_t v152 = *((void *)v151 - 1);
            v151 -= 8;
            *--long long v148 = v152;
          }
          while (v151 != v138);
          goto LABEL_179;
        }
        if (&v141[-(v150 & 0xFFFFFFFFFFFFFFF8) - 8] > v141 - 8)
        {
          unint64_t v151 = v141;
          goto LABEL_178;
        }
        if ((unint64_t)(v138 - v147) < 0x20)
        {
          unint64_t v151 = v141;
          goto LABEL_178;
        }
        uint64_t v153 = (v150 >> 3) + 1;
        uint64_t v154 = 8 * (v153 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v151 = &v141[-v154];
        long long v148 = (void *)((char *)v148 - v154);
        uint64_t v155 = &v147[8 * v144 - 16];
        uint64_t v156 = v141 - 16;
        uint64_t v157 = v153 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v158 = *(_OWORD *)v156;
          *(v155 - 1) = *((_OWORD *)v156 - 1);
          *uint64_t v155 = v158;
          v155 -= 2;
          v156 -= 32;
          v157 -= 4;
        }
        while (v157);
        if (v153 != (v153 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_178;
        }
LABEL_179:
        unint64_t v140 = &v147[8 * v146];
        int64_t v206 = v148;
        if (v138) {
          operator delete(v138);
        }
        uint64_t v138 = (char *)v148;
        ++v136;
        unint64_t v141 = (char *)v149;
      }
      while (v136 != v137);
LABEL_193:
      unint64_t v159 = v206;
      uint64_t v118 = v197;
      __n128 v115 = __Aa;
      uint64_t v117 = v178 + 7592;
      uint64_t v116 = v195;
      uint64_t v160 = (int)v214;
      float32x4_t v114 = v187;
      if (v214)
      {
LABEL_194:
        unint64_t v161 = 0;
        uint64_t v162 = SHIDWORD(v214);
        unint64_t v163 = v211;
        if (v160 < 6 || HIDWORD(v214) != 1) {
          goto LABEL_209;
        }
        if ((unint64_t)((char *)&v211[(void)v115] - (char *)v159) < 0x20)
        {
          unint64_t v161 = 0;
          goto LABEL_209;
        }
        unint64_t v161 = v160 & 0xFFFFFFFFFFFFFFFCLL;
        uint64_t v165 = v159 + 1;
        unint64_t v166 = (_OWORD *)((char *)v211 + v118);
        unint64_t v167 = v160 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          long long v168 = *v165;
          *(v166 - 1) = *(v165 - 1);
          _OWORD *v166 = v168;
          v165 += 2;
          v166 += 2 * v162;
          v167 -= 4;
        }
        while (v167);
        if (v161 != v160)
        {
LABEL_209:
          uint64_t v169 = v160 - v161;
          long long v170 = &v163[(void)v115 + (int)v161 * (uint64_t)(int)v162];
          uint64_t v171 = 8 * v162;
          uint64_t v172 = (uint64_t *)v159 + v161;
          do
          {
            uint64_t v173 = *v172++;
            *(void *)long long v170 = v173;
            long long v170 = (double *)((char *)v170 + v171);
            --v169;
          }
          while (v169);
        }
LABEL_211:
        operator delete(v159);
        uint64_t v164 = v205;
        if (!v205) {
          goto LABEL_202;
        }
LABEL_201:
        operator delete(v164);
        goto LABEL_202;
      }
LABEL_199:
      if (v159) {
        goto LABEL_211;
      }
      uint64_t v164 = v205;
      if (v205) {
        goto LABEL_201;
      }
LABEL_202:
      if (v207)
      {
        size_t v208 = (char *)v207;
        operator delete(v207);
      }
      __n128 v115 = (double *)((char *)v115 + 1);
      v118 += 8;
    }
    while (v190 != v115);
  }
  *float32x4_t v114 = 0;
  v114[1] = 0;
  v114[2] = 0;
  unint64_t v174 = v211;
  int64_t v175 = (char *)v212 - (char *)v211;
  if (v212 != v211)
  {
    if (v175 < 0) {
      sub_19E13D694();
    }
    uint64_t v176 = (char *)operator new((char *)v212 - (char *)v211);
    *float32x4_t v114 = v176;
    uint64_t v177 = &v176[8 * (v175 >> 3)];
    v114[2] = v177;
    memcpy(v176, v174, v175);
    v114[1] = v177;
  }
  v114[3] = v214;
  if (v174)
  {
    uint64_t v212 = v174;
    operator delete(v174);
  }
  if (v215[0])
  {
    v215[1] = v215[0];
    operator delete(v215[0]);
  }
  if (v219[0])
  {
    v219[1] = v219[0];
    operator delete(v219[0]);
  }
  if (v224)
  {
    uint64_t v225 = v224;
    operator delete(v224);
  }
  if (v222[0])
  {
    v222[1] = v222[0];
    operator delete(v222[0]);
  }
}

void sub_19E24216C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E13A9BC(a1);
}

void sub_19E2422BC()
{
}

void sub_19E2422D4()
{
}

void sub_19E242354()
{
  if (STACK[0x248]) {
    JUMPOUT(0x19E24240CLL);
  }
  JUMPOUT(0x19E2423DCLL);
}

void sub_19E242368(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v66 = a44;
    if (!a44)
    {
LABEL_3:
      if (!a66) {
        goto LABEL_9;
      }
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v66 = a44;
    if (!a44) {
      goto LABEL_3;
    }
  }
  operator delete(v66);
  if (!a66) {
LABEL_9:
  }
    JUMPOUT(0x19E2423C4);
LABEL_10:
  JUMPOUT(0x19E2423BCLL);
}

void sub_19E2423B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (__p) {
    operator delete(__p);
  }
  if (a70)
  {
    operator delete(a70);
    float32x4_t v72 = (void *)STACK[0x208];
    if (!STACK[0x208])
    {
LABEL_5:
      unint64_t v73 = (void *)STACK[0x248];
      if (!STACK[0x248]) {
        goto LABEL_6;
      }
      goto LABEL_9;
    }
  }
  else
  {
    float32x4_t v72 = (void *)STACK[0x208];
    if (!STACK[0x208]) {
      goto LABEL_5;
    }
  }
  STACK[0x210] = (unint64_t)v72;
  operator delete(v72);
  unint64_t v73 = (void *)STACK[0x248];
  if (!STACK[0x248])
  {
LABEL_6:
    sub_19E242654(v70 - 232);
    _Unwind_Resume(a1);
  }
LABEL_9:
  STACK[0x250] = (unint64_t)v73;
  operator delete(v73);
  sub_19E242654(v70 - 232);
  _Unwind_Resume(a1);
}

void sub_19E242424(int a1@<W0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v6 = a2 * a1;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  if (a2 * a1)
  {
    uint64_t v7 = v6;
    if (v6 < 0) {
      sub_19E13D694();
    }
    size_t v8 = 8 * v6;
    uint64_t v9 = (char *)operator new(v8);
    *(void *)a3 = v9;
    *(void *)(a3 + 16) = &v9[8 * v7];
    bzero(v9, 8 * v7);
    *(void *)(a3 + 8) = &v9[v8];
  }
  else
  {
    uint64_t v9 = 0;
  }
  *(_DWORD *)(a3 + 24) = a1;
  *(_DWORD *)(a3 + 28) = a2;
  unint64_t v10 = a2 * (uint64_t)a1;
  unint64_t v11 = v10 / a2;
  unint64_t v12 = v10 % a2;
  if (v10 >= a2 || v12)
  {
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    uint64_t v15 = 0;
    unint64_t v16 = 1;
    do
    {
      *(void *)&v9[8 * v13 + 8 * v14 * a2] = 0;
      ++v15;
      unint64_t v14 = v16 / a2;
      uint64_t v13 = v15 - v14 * a2;
      ++v16;
    }
    while (v14 != v11 || v13 != v12);
  }
}

void sub_19E242508(void *a1)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  sub_19E13A9BC(a1);
}

void sub_19E242524(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(void *)(a3 + 16) = 0;
  if (a2)
  {
    if ((a2 & 0x80000000) != 0) {
      sub_19E13D694();
    }
    size_t v6 = 8 * (int)a2;
    uint64_t v7 = (char *)operator new(v6);
    bzero(v7, 8 * (int)a2);
    *(void *)a3 = v7;
    *(void *)(a3 + 8) = &v7[v6];
    *(void *)(a3 + 16) = &v7[8 * (int)a2];
    *(_DWORD *)(a3 + 24) = a2;
  }
  else
  {
    *(void *)(a3 + 8) = 0;
    *(void *)a3 = 0;
    *(void *)(a3 + 16) = 0;
    *(_DWORD *)(a3 + 24) = 0;
    if (!a2) {
      return;
    }
    uint64_t v7 = 0;
  }
  uint64_t v8 = 0;
  uint64_t v9 = a1 + 5048;
  unint64_t v10 = (double *)(a1 + 7560);
  do
    *(double *)&v7[8 * v8++] = sub_19E24880C((uint64_t)v10, v9, v10);
  while (a2 != v8);
}

void sub_19E24261C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E13A9BC(a1);
}

void sub_19E242638(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    *uint64_t v2 = v1;
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E242654(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_19E242698(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_19E246470((uint64_t)v252, a3);
  int v7 = v253;
  sub_19E242424(a2, v253, (uint64_t)v249);
  uint64_t v8 = v7;
  uint64_t v223 = a2;
  if (a2 >= 1)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    while (1)
    {
      sub_19E242524(a1, v8, (uint64_t)__p);
      uint64_t v11 = v251;
      unint64_t v12 = (char *)__p[0];
      if (v251) {
        break;
      }
      if (__p[0]) {
        goto LABEL_4;
      }
LABEL_5:
      ++v10;
      v9 += 8;
      if (v10 == a2) {
        goto LABEL_17;
      }
    }
    uint64_t v13 = (char *)v249[0];
    if (v251 >= 6 && (unint64_t)((char *)v249[0] + 8 * v10 * v251 - (char *)__p[0]) >= 0x20)
    {
      unint64_t v14 = v251 & 0xFFFFFFFFFFFFFFFCLL;
      int v19 = (long long *)((char *)__p[0] + 16);
      unint64_t v20 = (char *)v249[0] + v9 * v251 + 16;
      unint64_t v21 = v14;
      do
      {
        long long v22 = *v19;
        *(v20 - 1) = *(v19 - 1);
        *unint64_t v20 = v22;
        v19 += 2;
        v20 += 2;
        v21 -= 4;
      }
      while (v21);
      if (v14 == v11) {
        goto LABEL_4;
      }
    }
    else
    {
      unint64_t v14 = 0;
    }
    uint64_t v15 = v11 - v14;
    unint64_t v16 = &v13[8 * v14 + 8 * v10 * v11];
    uint64_t v17 = &v12[8 * v14];
    do
    {
      uint64_t v18 = *(void *)v17;
      v17 += 8;
      *(void *)unint64_t v16 = v18;
      v16 += 8;
      --v15;
    }
    while (v15);
LABEL_4:
    __p[1] = v12;
    operator delete(v12);
    goto LABEL_5;
  }
LABEL_17:
  uint64_t v208 = a1;
  uint64_t v233 = a4;
  int v231 = a2;
  sub_19E242424(a2, v8, (uint64_t)v245);
  uint64_t v221 = v8 & ~((int)v8 >> 31);
  int v209 = v8;
  if ((int)v8 >= 1)
  {
    int v23 = a2 + 1;
    if (a2 == -1)
    {
      uint64_t v240 = 0;
      uint64_t v241 = 0;
      int v243 = 0;
      uint64_t v242 = 0;
      int v236 = 0;
      uint64_t v237 = 0;
      uint64_t v238 = 0;
LABEL_252:
      sub_19E13D694();
    }
    if (a2 < -1)
    {
      uint64_t v240 = 0;
      uint64_t v241 = 0;
      uint64_t v242 = 0;
      sub_19E13D694();
    }
    uint64_t v24 = 0;
    size_t v25 = 8 * v23;
    uint64_t __sz = 8 * a2;
    unint64_t v214 = v23 & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v215 = v23;
    vDSP_Length __N = a2;
    unint64_t v213 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    __asm { FMOV            V2.2D, #1.0 }
    float64x2_t v212 = vdivq_f64(_Q2, (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v23), 0));
    double v30 = 1.0 / (double)v23;
    uint64_t v222 = 16;
    int64x2_t v211 = vdupq_n_s64(2uLL);
    int64x2_t v210 = vdupq_n_s64(4uLL);
    size_t v216 = v25;
    int v217 = a2 + 1;
    while (1)
    {
      uint64_t v31 = 4 * (int)v24;
      int v32 = *(_DWORD *)((char *)v252[0] + v31);
      int v33 = *(_DWORD *)&v254[v31];
      double v34 = (double *)operator new(v25);
      double v35 = (double)v33;
      uint64_t v240 = v34;
      uint64_t v242 = (uint64_t)&v34[(unint64_t)__sz / 8 + 1];
      bzero(v34, v25);
      uint64_t v241 = (char *)v34 + v25;
      int v243 = v23;
      if (!v231)
      {
        float64x2_t v41 = 0;
        unint64_t v42 = 0;
        unint64_t v43 = 0;
        int64x2_t v44 = 0;
        double *v34 = v35;
        int v236 = 0;
        uint64_t v237 = 0;
        int v239 = 0;
        uint64_t v238 = 0;
        vDSP_Length v45 = __N;
        goto LABEL_46;
      }
      double v36 = (double)v32;
      double v37 = v35 - v36;
      if (v23 < 4) {
        break;
      }
      float64x2_t v46 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v36, 0);
      uint64_t v47 = (float64x2_t *)(v34 + 2);
      unint64_t v48 = v214;
      int64x2_t v49 = (int64x2_t)xmmword_19E3517F0;
      size_t v40 = __sz;
      do
      {
        v47[-1] = vmlaq_f64(v46, vmulq_n_f64(vcvtq_f64_u64((uint64x2_t)v49), v37), v212);
        float64x2_t *v47 = vmlaq_f64(v46, vmulq_n_f64(vcvtq_f64_u64((uint64x2_t)vaddq_s64(v49, v211)), v37), v212);
        int64x2_t v49 = vaddq_s64(v49, v210);
        v47 += 2;
        v48 -= 4;
      }
      while (v48);
      uint64_t v39 = v215;
      unint64_t v38 = v214;
      if (v214 != v215) {
        goto LABEL_29;
      }
LABEL_30:
      int v236 = 0;
      uint64_t v237 = 0;
      uint64_t v238 = 0;
      if (v231 < 0) {
        goto LABEL_252;
      }
      unint64_t v42 = operator new(v40);
      int v236 = v42;
      uint64_t v238 = (char *)v42 + 8 * v231;
      bzero(v42, v40);
      uint64_t v237 = (char *)v42 + v40;
      int v239 = v231;
      if (v231 < 4)
      {
        uint64_t v50 = 0;
LABEL_36:
        uint64_t v55 = v223 - v50;
        uint64_t v56 = v50 << 32;
        do
        {
          *(double *)((char *)v42 + (v56 >> 29)) = *(double *)((char *)v34 + (v56 >> 29));
          v56 += 0x100000000;
          --v55;
        }
        while (v55);
        goto LABEL_38;
      }
      uint64_t v51 = v42 + 1;
      uint64_t v52 = (long long *)(v34 + 2);
      uint64_t v53 = v223 & 0xFFFFFFFC;
      do
      {
        long long v54 = *v52;
        *(v51 - 1) = *(v52 - 1);
        *uint64_t v51 = v54;
        v51 += 2;
        v52 += 2;
        v53 -= 4;
      }
      while (v53);
      uint64_t v50 = v223 & 0xFFFFFFFC;
      if (v50 != v223) {
        goto LABEL_36;
      }
LABEL_38:
      float64x2_t v41 = (char *)operator new(v40);
      bzero(v41, v40);
      if (v23 >= 3)
      {
        uint64_t v58 = 0;
        uint64_t v59 = v223 & 0xFFFFFFFE;
        vDSP_Length v45 = v231;
        do
        {
          uint64_t v60 = v58 >> 29;
          v58 += 0x200000000;
          uint64_t v61 = *(void *)((char *)v34 + (v58 >> 29));
          *(double *)&v41[v60] = *(double *)((char *)v34 + v60 + 8);
          *(void *)&v41[v60 + 8] = v61;
          v59 -= 2;
        }
        while (v59);
        uint64_t v57 = v223 & 0xFFFFFFFE;
        if (v57 == v223) {
          goto LABEL_45;
        }
      }
      else
      {
        uint64_t v57 = 0;
        vDSP_Length v45 = v231;
      }
      uint64_t v62 = v57 << 32;
      uint64_t v63 = v223 - v57;
      do
      {
        uint64_t v64 = v62 >> 29;
        v62 += 0x100000000;
        *(double *)&v41[v64] = *(double *)((char *)v34 + (v62 >> 29));
        --v63;
      }
      while (v63);
LABEL_45:
      uint64_t v65 = (double *)operator new(v40);
      size_t v66 = v40;
      int64x2_t v44 = v65;
      unint64_t v43 = &v65[v45];
      memcpy(v65, v41, v66);
LABEL_46:
      vDSP_vsubD((const double *)v42, 1, v44, 1, v44, 1, v45);
      size_t v67 = (char *)v43 - (char *)v44;
      if (v67)
      {
        if ((v67 & 0x8000000000000000) != 0) {
          sub_19E13D694();
        }
        __A = (double *)operator new(v67);
        memcpy(__A, v44, v67);
        if (v44) {
LABEL_49:
        }
          operator delete(v44);
      }
      else
      {
        __A = 0;
        if (v44) {
          goto LABEL_49;
        }
      }
      vDSP_Length v68 = v250;
      int v256 = 0;
      long long v257 = 0uLL;
      uint64_t v218 = 8 * v24;
      unsigned int v232 = v250;
      if (!v250)
      {
        float32x4_t v72 = 0;
        unint64_t v73 = 0;
        __src = 0;
        goto LABEL_65;
      }
      if (v250 < 0) {
        sub_19E13D694();
      }
      __src = operator new(8 * v250);
      bzero(__src, 8 * v68);
      unint64_t v69 = 0;
      uint64_t v70 = v251;
      vDSP_Length v71 = (char *)v249[0];
      if (v232 >= 6 && v251 == 1)
      {
        if ((unint64_t)((char *)__src - ((char *)v249[0] + 8 * v24)) >= 0x20)
        {
          unint64_t v69 = v68 & 0xFFFFFFFFFFFFFFFCLL;
          uint64_t v74 = (long long *)((char *)v249[0] + v222);
          int64_t v75 = __src + 1;
          unint64_t v76 = v68 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            long long v77 = *v74;
            *(v75 - 1) = *(v74 - 1);
            *int64_t v75 = v77;
            v74 += 2 * v70;
            v75 += 2;
            v76 -= 4;
          }
          while (v76);
          if (v69 == v68) {
            goto LABEL_64;
          }
        }
        else
        {
          unint64_t v69 = 0;
        }
      }
      vDSP_Length v78 = v68 - v69;
      unint64_t v79 = (void *)__src + v69;
      uint64_t v80 = &v71[8 * v24 + 8 * (int)v69 * (uint64_t)(int)v70];
      uint64_t v81 = 8 * v70;
      do
      {
        *v79++ = *(void *)v80;
        v80 += v81;
        --v78;
      }
      while (v78);
LABEL_64:
      unint64_t v73 = (char *)operator new(8 * v68);
      float32x4_t v72 = &v73[8 * v68];
      memcpy(v73, __src, 8 * v68);
LABEL_65:
      vDSP_vmulD(__A, 1, (const double *)v73, 1, (double *)v73, 1, v68);
      int64_t v82 = v72 - v73;
      if (v72 == v73)
      {
        uint64_t v84 = 0;
        uint64_t v83 = 0;
      }
      else
      {
        if (v82 < 0) {
          sub_19E13D694();
        }
        uint64_t v83 = (char *)operator new(v72 - v73);
        uint64_t v84 = &v83[8 * (v82 >> 3)];
        memcpy(v83, v73, v82);
      }
      int v256 = 0;
      long long v257 = 0uLL;
      if (!v231)
      {
        float v87 = v84;
        vDSP_Length v88 = v68;
        int64_t v85 = 0;
        goto LABEL_81;
      }
      if (v231 < 0) {
        sub_19E13D694();
      }
      int64_t v85 = (char *)operator new(__sz);
      int v256 = v85;
      *((void *)&v257 + 1) = &v85[8 * v231];
      bzero(v85, __sz);
      *(void *)&long long v257 = &v85[__sz];
      LODWORD(v258) = v231;
      if (v231 < 4)
      {
        unint64_t v86 = 0;
LABEL_78:
        float v87 = v84;
        do
        {
          *(void *)&v85[8 * v86] = *((void *)v42 + v86);
          ++v86;
        }
        while (__N != v86);
        goto LABEL_80;
      }
      uint64_t v89 = 0;
      unint64_t v90 = v213;
      do
      {
        long long v91 = v42[v89 + 1];
        float64x2_t v92 = &v85[v89 * 16];
        *(_OWORD *)float64x2_t v92 = v42[v89];
        *((_OWORD *)v92 + 1) = v91;
        v89 += 2;
        v90 -= 4;
      }
      while (v90);
      unint64_t v86 = v213;
      if (v213 != v231) {
        goto LABEL_78;
      }
      float v87 = v84;
LABEL_80:
      vDSP_Length v88 = v68;
LABEL_81:
      uint64_t v93 = v24;
      vDSP_vaddD((const double *)v83, 1, (const double *)v85, 1, (double *)v83, 1, v88);
      int64_t v94 = v87 - v83;
      if (v87 == v83)
      {
        uint64_t v219 = 0;
        signed int v220 = 0;
        uint64_t v97 = v93;
        if (v85) {
          goto LABEL_84;
        }
      }
      else
      {
        if (v94 < 0) {
          sub_19E13D694();
        }
        unint64_t v95 = (float64x2_t *)operator new(v87 - v83);
        float64x2_t v96 = (char *)&v95->f64[v94 >> 3];
        signed int v220 = v95;
        memcpy(v95, v83, v94);
        uint64_t v219 = (float64x2_t *)v96;
        uint64_t v97 = v93;
        if (v85) {
LABEL_84:
        }
          operator delete(v85);
      }
      if (v83) {
        operator delete(v83);
      }
      if (v73) {
        operator delete(v73);
      }
      if (__src) {
        operator delete(__src);
      }
      if (v232)
      {
        uint64_t v98 = 4 * (int)v97;
        double v99 = (double)*(int *)((char *)v252[0] + v98);
        double v100 = (double)*(int *)&v254[v98];
        if (v232 < 4)
        {
          unint64_t v101 = 0;
LABEL_99:
          vDSP_Length v107 = v88 - v101;
          uint64_t v108 = &v220->f64[v101];
          do
          {
            *uint64_t v108 = fmax(fmin(*v108, v100), v99);
            ++v108;
            --v107;
          }
          while (v107);
          goto LABEL_101;
        }
        unint64_t v101 = v88 & 0xFFFFFFFFFFFFFFFCLL;
        float64x2_t v102 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v100, 0);
        float64x2_t v103 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v99, 0);
        uint64_t v104 = v220 + 1;
        unint64_t v105 = v88 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          float64x2_t v106 = vmaxnmq_f64(vminnmq_f64(*v104, v102), v103);
          v104[-1] = vmaxnmq_f64(vminnmq_f64(v104[-1], v102), v103);
          *uint64_t v104 = v106;
          v104 += 2;
          v105 -= 4;
        }
        while (v105);
        if (v101 != v88) {
          goto LABEL_99;
        }
      }
LABEL_101:
      size_t v109 = (char *)v219 - (char *)v220;
      if (v219 != v220)
      {
        if ((v109 & 0x8000000000000000) != 0) {
          sub_19E13D694();
        }
        float v110 = (long long *)operator new((char *)v219 - (char *)v220);
        memcpy(v110, v220, v109);
        signed int v111 = v246;
        int v23 = v217;
        if (!v246) {
          goto LABEL_116;
        }
LABEL_107:
        uint64_t v112 = v111;
        uint64_t v113 = v247;
        float32x4_t v114 = (char *)v245[0];
        _ZF = v111 >= 6 && v247 == 1;
        if (!_ZF || (unint64_t)((char *)v245[0] + v218 - (char *)v110) < 0x20)
        {
          unint64_t v116 = 0;
          goto LABEL_114;
        }
        unint64_t v116 = v111 & 0xFFFFFFFFFFFFFFFCLL;
        float32x4_t v119 = v110 + 1;
        float32x4_t v120 = (char *)v245[0] + v222;
        unint64_t v121 = v112 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          long long v122 = *v119;
          *(v120 - 1) = *(v119 - 1);
          *float32x4_t v120 = v122;
          v119 += 2;
          v120 += 2 * v113;
          v121 -= 4;
        }
        while (v121);
        if (v116 != v112)
        {
LABEL_114:
          uint64_t v117 = &v114[8 * v97 + 8 * (int)v116 * (uint64_t)(int)v113];
          uint64_t v118 = 8 * v113;
          do
          {
            *(void *)uint64_t v117 = *((void *)v110 + v116++);
            v117 += v118;
          }
          while (v112 != v116);
        }
LABEL_116:
        operator delete(v110);
        goto LABEL_117;
      }
      signed int v111 = v246;
      int v23 = v217;
      if (v246)
      {
        float v110 = 0;
        goto LABEL_107;
      }
LABEL_117:
      if (v220) {
        operator delete(v220);
      }
      if (__A) {
        operator delete(__A);
      }
      if (v41) {
        operator delete(v41);
      }
      if (v42) {
        operator delete(v42);
      }
      operator delete(v34);
      uint64_t v24 = v97 + 1;
      v222 += 8;
      size_t v25 = v216;
      if (v24 == v221) {
        goto LABEL_129;
      }
    }
    unint64_t v38 = 0;
    uint64_t v39 = v215;
    size_t v40 = __sz;
    do
    {
LABEL_29:
      v34[v38] = v36 + v37 * (double)v38 * v30;
      ++v38;
    }
    while (v39 != v38);
    goto LABEL_30;
  }
LABEL_129:
  sub_19E242424(v231, v209, (uint64_t)&v240);
  uint64_t v123 = v233;
  if (v209 >= 1)
  {
    unint64_t v124 = 0;
    uint64_t v125 = v231 & ~(v231 >> 31) | 0x100000000;
    uint64_t v126 = v208 + 7592;
    uint64_t v127 = 16;
    *(int64x2_t *)__srca = vdupq_n_s64(2uLL);
    do
    {
      sub_19E248AB8(&v236, 0x100000000uLL, 0, v125, 0);
      unint64_t v129 = (char *)v236;
      unint64_t v128 = v237;
      int64_t v130 = v237 - (unsigned char *)v236;
      if (v237 - (unsigned char *)v236 >= 5)
      {
        unsigned int v131 = v237 - 4;
        if (v237 - 4 > v236)
        {
          unint64_t v132 = (unint64_t)v130 >> 2;
          while (v132 == 1)
          {
LABEL_135:
            v129 += 4;
            --v132;
            if (v129 >= v131)
            {
              unint64_t v129 = (char *)v236;
              unint64_t v128 = v237;
              int64_t v130 = v237 - (unsigned char *)v236;
              goto LABEL_162;
            }
          }
          if (v132)
          {
            unint64_t v133 = __clz(v132);
            uint64_t v134 = 63;
            if (((v132 << v133) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
              uint64_t v134 = 64;
            }
            unsigned __int8 v135 = v134 - v133;
            int v256 = (char *)v126;
            *(void *)&long long v257 = v134 - v133;
            unint64_t v136 = (v134 - v133) >> 5;
            if ((v135 & 0x1F) != 0) {
              unint64_t v137 = v136 + 1;
            }
            else {
              unint64_t v137 = v136;
            }
            unint64_t v138 = v135 / v137;
            *((void *)&v257 + 1) = v138;
            *(void *)&long long v258 = v137;
            unint64_t v139 = (-1 << (v135 / v137)) & 0x100000000;
            if (v138 >= 0x40) {
              unint64_t v139 = 0;
            }
            *(void *)&long long v259 = v139;
            if ((v139 ^ 0x100000000) <= v139 / v137)
            {
LABEL_148:
              *((void *)&v258 + 1) = v137 - v135 % v137;
              if (v138 >= 0x3F) {
                goto LABEL_156;
              }
              *((void *)&v259 + 1) = 0x80000000uLL >> v138 << (v138 + 1);
              unsigned int v140 = 0xFFFFFFFF >> -(char)v138;
              if (!v138) {
                unsigned int v140 = 0;
              }
              LODWORD(v260) = v140;
              if (v138 >= 0x1F) {
                unsigned int v141 = -1;
              }
              else {
                unsigned int v141 = 0xFFFFFFFF >> ~(_BYTE)v138;
              }
            }
            else
            {
              unint64_t v138 = v135 / ++v137;
              *((void *)&v257 + 1) = v138;
              *(void *)&long long v258 = v137;
              if (v138 <= 0x3F)
              {
                *(void *)&long long v259 = (-1 << (v135 / v137)) & 0x100000000;
                goto LABEL_148;
              }
              *((void *)&v258 + 1) = v137 - (v135 % v137);
              *(void *)&long long v259 = 0;
              LODWORD(v138) = 64;
LABEL_156:
              *((void *)&v259 + 1) = 0;
              int v143 = -(int)v138;
              unsigned int v141 = -1;
              LODWORD(v260) = 0xFFFFFFFF >> v143;
            }
            HIDWORD(v260) = v141;
            do
              unint64_t v142 = sub_19E248B8C((uint64_t *)&v256);
            while (v142 >= v132);
          }
          else
          {
            int v256 = (char *)v126;
            long long v257 = xmmword_19E351800;
            long long v258 = *(_OWORD *)__srca;
            long long v259 = xmmword_19E351440;
            uint64_t v260 = -1;
            unint64_t v142 = sub_19E248B8C((uint64_t *)&v256);
          }
          if (v142)
          {
            int v144 = *(_DWORD *)v129;
            *(_DWORD *)unint64_t v129 = *(_DWORD *)&v129[4 * v142];
            *(_DWORD *)&v129[4 * v142] = v144;
          }
          goto LABEL_135;
        }
      }
LABEL_162:
      uint64_t v234 = 0;
      if (v128 == v129)
      {
        long long v168 = 0;
        uint64_t v169 = v243;
        if (v243) {
          goto LABEL_195;
        }
        goto LABEL_200;
      }
      if (v130 < 0) {
        sub_19E13D694();
      }
      unint64_t v145 = (int *)operator new(v130);
      unint64_t v146 = &v145[v130 >> 2];
      uint64_t v234 = v145;
      memcpy(v145, v129, v130);
      float32x4_t v235 = 0;
      if (!v130)
      {
        long long v168 = 0;
        uint64_t v169 = v243;
        if (v243) {
          goto LABEL_195;
        }
        goto LABEL_200;
      }
      size_t __sza = v127;
      uint64_t v147 = 0;
      long long v148 = v124;
      uint64_t v149 = 0;
      unint64_t v150 = 0;
      __Aa = v148;
      uint64_t v151 = v148;
      do
      {
        while (1)
        {
          uint64_t v152 = *((void *)v245[0] + v151 + v247 * (uint64_t)*v145);
          if (v150 >= v149) {
            break;
          }
          *(void *)unint64_t v150 = v152;
          v150 += 8;
          if (++v145 == v146) {
            goto LABEL_194;
          }
        }
        uint64_t v153 = (v150 - v147) >> 3;
        unint64_t v154 = v153 + 1;
        if ((unint64_t)(v153 + 1) >> 61) {
          sub_19E13D694();
        }
        if ((v149 - v147) >> 2 > v154) {
          unint64_t v154 = (v149 - v147) >> 2;
        }
        if ((unint64_t)(v149 - v147) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v155 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v155 = v154;
        }
        if (v155)
        {
          if (v155 >> 61) {
            sub_19E13C418();
          }
          uint64_t v156 = operator new(8 * v155);
          uint64_t v157 = &v156[8 * v153];
          *(void *)uint64_t v157 = v152;
          uint64_t v158 = (uint64_t)(v157 + 8);
          if (v150 != v147)
          {
LABEL_177:
            unint64_t v159 = v150 - 8 - v147;
            if (v159 < 0x168
              || &v156[v150 - v147 - 8 - (v159 & 0xFFFFFFFFFFFFFFF8)] > &v156[v150 - v147 - 8]
              || &v150[-(v159 & 0xFFFFFFFFFFFFFFF8) - 8] > v150 - 8
              || (unint64_t)(v147 - v156) < 0x20)
            {
              uint64_t v160 = v150;
              uint64_t v123 = v233;
            }
            else
            {
              uint64_t v162 = (v159 >> 3) + 1;
              uint64_t v163 = 8 * (v162 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v160 = &v150[-v163];
              v157 -= v163;
              uint64_t v164 = &v156[8 * v153 - 16];
              uint64_t v165 = v150 - 16;
              uint64_t v166 = v162 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v167 = *(_OWORD *)v165;
                *(v164 - 1) = *((_OWORD *)v165 - 1);
                *uint64_t v164 = v167;
                v164 -= 2;
                v165 -= 32;
                v166 -= 4;
              }
              while (v166);
              uint64_t v123 = v233;
              if (v162 == (v162 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_180:
                uint64_t v149 = &v156[8 * v155];
                float32x4_t v235 = v157;
                if (!v147) {
                  goto LABEL_182;
                }
LABEL_181:
                operator delete(v147);
                goto LABEL_182;
              }
            }
            do
            {
              uint64_t v161 = *((void *)v160 - 1);
              v160 -= 8;
              *((void *)v157 - 1) = v161;
              v157 -= 8;
            }
            while (v160 != v147);
            goto LABEL_180;
          }
        }
        else
        {
          uint64_t v156 = 0;
          uint64_t v157 = (char *)(8 * v153);
          *(void *)(8 * v153) = v152;
          uint64_t v158 = 8 * v153 + 8;
          if (v150 != v147) {
            goto LABEL_177;
          }
        }
        uint64_t v123 = v233;
        uint64_t v149 = &v156[8 * v155];
        float32x4_t v235 = v157;
        if (v147) {
          goto LABEL_181;
        }
LABEL_182:
        uint64_t v147 = v157;
        ++v145;
        unint64_t v150 = (char *)v158;
      }
      while (v145 != v146);
LABEL_194:
      long long v168 = v235;
      uint64_t v127 = __sza;
      unint64_t v124 = __Aa;
      uint64_t v126 = v208 + 7592;
      uint64_t v125 = v231 & ~(v231 >> 31) | 0x100000000;
      uint64_t v169 = v243;
      if (v243)
      {
LABEL_195:
        unint64_t v170 = 0;
        uint64_t v171 = v244;
        uint64_t v172 = (char *)v240;
        if (v169 < 6 || v244 != 1) {
          goto LABEL_210;
        }
        if ((unint64_t)((unsigned char *)v240 + 8 * (void)v124 - v168) < 0x20)
        {
          unint64_t v170 = 0;
          goto LABEL_210;
        }
        unint64_t v170 = v169 & 0xFFFFFFFFFFFFFFFCLL;
        unint64_t v174 = (long long *)(v168 + 16);
        int64_t v175 = (char *)v240 + v127;
        unint64_t v176 = v169 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          long long v177 = *v174;
          *(v175 - 1) = *(v174 - 1);
          *int64_t v175 = v177;
          v174 += 2;
          v175 += 2 * v171;
          v176 -= 4;
        }
        while (v176);
        if (v170 != v169)
        {
LABEL_210:
          uint64_t v178 = v169 - v170;
          int64x2_t v179 = &v172[8 * ((void)v124 + (int)v170 * (uint64_t)(int)v171)];
          uint64_t v180 = 8 * v171;
          float64x2_t v181 = &v168[8 * v170];
          do
          {
            uint64_t v182 = *(void *)v181;
            v181 += 8;
            *(void *)int64x2_t v179 = v182;
            v179 += v180;
            --v178;
          }
          while (v178);
        }
LABEL_212:
        operator delete(v168);
        uint64_t v173 = v234;
        if (!v234) {
          goto LABEL_203;
        }
LABEL_202:
        operator delete(v173);
        goto LABEL_203;
      }
LABEL_200:
      if (v168) {
        goto LABEL_212;
      }
      uint64_t v173 = v234;
      if (v234) {
        goto LABEL_202;
      }
LABEL_203:
      if (v236)
      {
        uint64_t v237 = (char *)v236;
        operator delete(v236);
      }
      unint64_t v124 = (double *)((char *)v124 + 1);
      v127 += 8;
    }
    while (v221 != v124);
  }
  int v183 = v244;
  if (v231)
  {
    int v184 = 0;
    int v185 = 0;
    int v186 = 0;
    uint64_t v187 = (char *)v240;
    int v188 = 1;
    do
    {
      uint64_t v189 = 8 * (v184 + v183 * (uint64_t)v185);
      *(double *)&v187[v189] = round(*(double *)&v187[v189]);
      ++v186;
      int v185 = v188 / v209;
      int v190 = v188 / v209 * v209;
      int v184 = v186 - v190;
      BOOL v191 = v188 / v209 == v231 && v190 == v188;
      ++v188;
    }
    while (!v191);
  }
  int v192 = v243;
  *(void *)(v123 + 8) = 0;
  *(void *)(v123 + 16) = 0;
  int v193 = v183 * v192;
  *(void *)uint64_t v123 = 0;
  if (v183 * v192)
  {
    uint64_t v194 = v193;
    if (v193 < 0) {
      sub_19E13D694();
    }
    size_t v195 = 4 * v193;
    uint64_t v196 = (char *)operator new(v195);
    *(void *)uint64_t v123 = v196;
    *(void *)(v123 + 16) = &v196[4 * v194];
    bzero(v196, 4 * v194);
    *(void *)(v123 + 8) = &v196[v195];
    *(_DWORD *)(v123 + 24) = v192;
    *(_DWORD *)(v123 + 28) = v183;
    uint64_t v197 = (char *)v240;
    if (v194 < 8)
    {
      uint64_t v198 = 0;
LABEL_238:
      uint64_t v206 = v194 - v198;
      uint64_t v207 = v198 << 32;
      do
      {
        *(_DWORD *)&v196[v207 >> 30] = (int)*(double *)&v197[v207 >> 29];
        v207 += 0x100000000;
        --v206;
      }
      while (v206);
      goto LABEL_240;
    }
    uint64_t v200 = 0;
    uint64_t v198 = v194 & 0xFFFFFFF8;
    uint64_t v201 = v198;
    do
    {
      int64x2_t v202 = (float64x2_t *)&v197[v200 >> 29];
      int32x4_t v203 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(*v202), (int32x4_t)vcvtq_s64_f64(v202[1]));
      int32x4_t v204 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(v202[2]), (int32x4_t)vcvtq_s64_f64(v202[3]));
      unint64_t v205 = (int32x4_t *)&v196[v200 >> 30];
      int32x4_t *v205 = v203;
      v205[1] = v204;
      v200 += 0x800000000;
      v201 -= 8;
    }
    while (v201);
    if (v198 != v194) {
      goto LABEL_238;
    }
  }
  else
  {
    *(_DWORD *)(v123 + 24) = v192;
    *(_DWORD *)(v123 + 28) = v183;
    uint64_t v197 = (char *)v240;
    if (!v240)
    {
      int64_t v199 = v245[0];
      if (!v245[0]) {
        goto LABEL_228;
      }
      goto LABEL_227;
    }
  }
LABEL_240:
  uint64_t v241 = v197;
  operator delete(v197);
  int64_t v199 = v245[0];
  if (v245[0])
  {
LABEL_227:
    v245[1] = v199;
    operator delete(v199);
  }
LABEL_228:
  if (v249[0])
  {
    v249[1] = v249[0];
    operator delete(v249[0]);
  }
  if (v254)
  {
    unsigned int v255 = v254;
    operator delete(v254);
  }
  if (v252[0])
  {
    v252[1] = v252[0];
    operator delete(v252[0]);
  }
}

void sub_19E2438D4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E13A9BC(a1);
}

void sub_19E243A1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a70) {
    JUMPOUT(0x19E243B54);
  }
  JUMPOUT(0x19E243AF4);
}

void sub_19E243A3C()
{
}

void sub_19E243ACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (__p)
  {
    operator delete(__p);
    float32x4_t v72 = a44;
    if (!a44)
    {
LABEL_3:
      if (!a66) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else
  {
    float32x4_t v72 = a44;
    if (!a44) {
      goto LABEL_3;
    }
  }
  operator delete(v72);
  if (!a66)
  {
LABEL_4:
    if (!a70)
    {
      if (!STACK[0x208])
      {
        if (!STACK[0x248])
        {
          sub_19E242654(v70 - 248);
          _Unwind_Resume(a1);
        }
        JUMPOUT(0x19E243B74);
      }
      JUMPOUT(0x19E243B64);
    }
    JUMPOUT(0x19E243B54);
  }
LABEL_15:
  JUMPOUT(0x19E243B44);
}

void sub_19E243B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (__p)
  {
    operator delete(__p);
    if (a70)
    {
      operator delete(a70);
      float32x4_t v72 = (void *)STACK[0x208];
      if (STACK[0x208])
      {
        STACK[0x210] = (unint64_t)v72;
        operator delete(v72);
        unint64_t v73 = (void *)STACK[0x248];
        if (STACK[0x248])
        {
          STACK[0x250] = (unint64_t)v73;
          operator delete(v73);
          sub_19E242654(v70 - 248);
          _Unwind_Resume(a1);
        }
        JUMPOUT(0x19E243B04);
      }
      JUMPOUT(0x19E243AFCLL);
    }
    JUMPOUT(0x19E243AF4);
  }
  JUMPOUT(0x19E243AECLL);
}

void sub_19E243B8C(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  sub_19E2441CC(a4, (int)a3);
  unint64_t v42 = a1;
  if (sub_19E244298(a1))
  {
    sub_19E244360(a1, (uint64_t *)v67);
    sub_19E246358((uint64_t)v61, (uint64_t)v67);
    sub_19E241070(a2, a3, (uint64_t)v61, v64);
    if (__p)
    {
      uint64_t v63 = __p;
      operator delete(__p);
    }
    if (v61[0])
    {
      v61[1] = v61[0];
      operator delete(v61[0]);
    }
    uint64_t v41 = v65;
    if (v65 >= 1)
    {
      uint64_t v7 = 0;
      for (uint64_t i = 0; i != v41; ++i)
      {
        uint64_t v9 = v64[0];
        uint64_t v10 = v66;
        __dst[0] = 0;
        __dst[1] = 0;
        uint64_t v55 = 0;
        if (v66)
        {
          if (v66 < 0) {
            sub_19E13D694();
          }
          uint64_t v11 = (char *)operator new(8 * v66);
          bzero(v11, 8 * v10);
          unint64_t v12 = &v9[v7 * v10];
          if (v10 >= 8)
          {
            if ((unint64_t)(v11 - &v9[8 * i * v10]) >= 0x20)
            {
              uint64_t v14 = 0;
              unint64_t v13 = v10 & 0xFFFFFFFFFFFFFFFCLL;
              unint64_t v15 = v10 & 0xFFFFFFFFFFFFFFFCLL;
              do
              {
                long long v16 = *(_OWORD *)&v12[v14 + 16];
                uint64_t v17 = &v11[v14];
                *(_OWORD *)uint64_t v17 = *(_OWORD *)&v12[v14];
                *((_OWORD *)v17 + 1) = v16;
                v14 += 32;
                v15 -= 4;
              }
              while (v15);
              if (v13 == v10) {
                goto LABEL_20;
              }
            }
            else
            {
              unint64_t v13 = 0;
            }
          }
          else
          {
            unint64_t v13 = 0;
          }
          do
          {
            *(void *)&v11[8 * v13] = *(void *)&v12[8 * v13];
            ++v13;
          }
          while (v10 != v13);
        }
        else
        {
          uint64_t v11 = 0;
        }
LABEL_20:
        uint64_t v58 = 0;
        uint64_t v59 = 0;
        uint64_t v60 = 0;
        sub_19E246830(&v58, *v42, v42[1], 0xAAAAAAAAAAAAAAABLL * ((v42[1] - *v42) >> 4));
        uint64_t v18 = (void **)v58;
        int64x2_t v49 = v59;
        if (v58 == v59) {
          goto LABEL_50;
        }
        uint64_t v43 = i;
        uint64_t v44 = v7;
        unsigned int v19 = 0;
        int v45 = i;
        float64x2_t v46 = v11;
        uint64_t v48 = 24 * (int)i;
        do
        {
          if (*((char *)v18 + 23) < 0)
          {
            sub_19E13C2D0(__dst, *v18, (unint64_t)v18[1]);
          }
          else
          {
            long long v20 = *(_OWORD *)v18;
            uint64_t v55 = v18[2];
            *(_OWORD *)__dst = v20;
          }
          long long v21 = *(_OWORD *)(v18 + 3);
          int v57 = *((_DWORD *)v18 + 10);
          long long v56 = v21;
          uint64_t v22 = *a4;
          int v23 = v57;
          uint64_t v24 = v57;
          uint64_t v51 = 0;
          uint64_t v52 = 0;
          uint64_t v50 = 0;
          int v53 = 0;
          uint64_t v70 = 0;
          vDSP_Length v71 = 0;
          float32x4_t v72 = 0;
          if (v57)
          {
            if (v57 < 0) {
              sub_19E13D694();
            }
            size_t v25 = 8 * v57;
            float v26 = (char *)operator new(v25);
            bzero(v26, 8 * v23);
            float v27 = &v26[v25];
            uint64_t v50 = v26;
            uint64_t v51 = &v26[v25];
            uint64_t v52 = &v26[8 * v24];
            int v53 = v23;
            if (v19 < v23 + v19) {
              memcpy(v26, &v46[8 * v19], 8 * v24);
            }
          }
          else
          {
            float v27 = 0;
            float v26 = 0;
            uint64_t v50 = 0;
            uint64_t v51 = 0;
            uint64_t v52 = 0;
            int v53 = 0;
          }
          uint64_t v28 = v22 + v48;
          unint64_t v29 = *(void *)(v22 + v48 + 8);
          if (v29 >= *(void *)(v22 + v48 + 16))
          {
            *(void *)(v28 + 8) = sub_19E2478FC((void **)(v22 + 24 * v45), (long long *)__dst, (uint64_t)&v50);
            double v34 = (char *)v50;
            if (!v50) {
              goto LABEL_37;
            }
LABEL_36:
            uint64_t v51 = v34;
            operator delete(v34);
            goto LABEL_37;
          }
          uint64_t v70 = 0;
          vDSP_Length v71 = 0;
          float32x4_t v72 = 0;
          int64_t v30 = v27 - v26;
          if (v30)
          {
            if (v30 < 0) {
              sub_19E13D694();
            }
            uint64_t v31 = (char *)operator new(v30);
            int v32 = &v31[8 * (v30 >> 3)];
            uint64_t v70 = v31;
            float32x4_t v72 = v32;
            memcpy(v31, v26, v30);
            vDSP_Length v71 = v32;
            int v73 = v23;
            if ((SHIBYTE(v55) & 0x80000000) == 0)
            {
LABEL_34:
              long long v33 = *(_OWORD *)__dst;
              *(void *)(v29 + 16) = v55;
              *(_OWORD *)unint64_t v29 = v33;
              goto LABEL_42;
            }
          }
          else
          {
            int v32 = 0;
            uint64_t v31 = 0;
            int v73 = v23;
            if ((SHIBYTE(v55) & 0x80000000) == 0) {
              goto LABEL_34;
            }
          }
          sub_19E13C2D0((unsigned char *)v29, __dst[0], (unint64_t)__dst[1]);
LABEL_42:
          *(void *)(v29 + 24) = 0;
          *(void *)(v29 + 32) = 0;
          *(void *)(v29 + 40) = 0;
          uint64_t v36 = v32 - v31;
          if (v32 != v31)
          {
            if (v36 < 0) {
              sub_19E13D694();
            }
            double v37 = (char *)operator new(v32 - v31);
            *(void *)(v29 + 24) = v37;
            *(void *)(v29 + 32) = v37;
            unint64_t v38 = &v37[8 * (v36 >> 3)];
            *(void *)(v29 + 40) = v38;
            memcpy(v37, v31, v32 - v31);
            *(void *)(v29 + 32) = v38;
          }
          *(_DWORD *)(v29 + 48) = v23;
          if (v31) {
            operator delete(v31);
          }
          *(void *)(v28 + 8) = v29 + 56;
          *(void *)(v28 + 8) = v29 + 56;
          double v34 = (char *)v50;
          if (v50) {
            goto LABEL_36;
          }
LABEL_37:
          int v35 = v57;
          if (SHIBYTE(v55) < 0) {
            operator delete(__dst[0]);
          }
          v19 += v35;
          v18 += 6;
        }
        while (v18 != v49);
        uint64_t v18 = (void **)v58;
        uint64_t v11 = v46;
        uint64_t i = v43;
        uint64_t v7 = v44;
LABEL_50:
        if (v18)
        {
          uint64_t v39 = v59;
          size_t v40 = v18;
          if (v59 != v18)
          {
            do
            {
              if (*((char *)v39 - 25) < 0) {
                operator delete(*(v39 - 6));
              }
              v39 -= 6;
            }
            while (v39 != v18);
            size_t v40 = v58;
          }
          uint64_t v59 = v18;
          operator delete(v40);
        }
        if (v11) {
          operator delete(v11);
        }
        v7 += 8;
      }
    }
    if (v64[0])
    {
      v64[1] = v64[0];
      operator delete(v64[0]);
    }
    if (v68)
    {
      unint64_t v69 = v68;
      operator delete(v68);
    }
    if (v67[0])
    {
      v67[1] = v67[0];
      operator delete(v67[0]);
    }
  }
}

void sub_19E244080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void ***a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  sub_19E242654((uint64_t)&a32);
  sub_19E242654(v32 - 184);
  sub_19E2445F4(a16);
  _Unwind_Resume(a1);
}

void sub_19E2440A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void ***a16)
{
  sub_19E242654(v16 - 184);
  sub_19E2445F4(a16);
  _Unwind_Resume(a1);
}

void sub_19E2440C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void ***a16)
{
}

void sub_19E2440DC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E13A9BC(a1);
}

void *sub_19E2441CC(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      sub_19E13D694();
    }
    uint64_t v4 = (char *)operator new(24 * a2);
    *a1 = v4;
    a1[2] = &v4[24 * a2];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_19E244278(_Unwind_Exception *exception_object)
{
  if (*v1) {
    sub_19E32ECF8((uint64_t)(v1 + 1), *v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E244298(uint64_t *a1)
{
  __p = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  sub_19E246830(&__p, *a1, a1[1], 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4));
  uint64_t v1 = sub_19E2471BC((long long *)__p, v7, 0);
  uint64_t v2 = (long long *)__p;
  if (__p)
  {
    uint64_t v3 = v7;
    uint64_t v4 = __p;
    if (v7 != __p)
    {
      do
      {
        if (*((char *)v3 - 25) < 0) {
          operator delete(*((void **)v3 - 6));
        }
        v3 -= 3;
      }
      while (v3 != v2);
      uint64_t v4 = __p;
    }
    uint64_t v7 = v2;
    operator delete(v4);
  }
  return v1;
}

void sub_19E24434C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_19E244360(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  int v4 = sub_19E244298(a1);
  sub_19E248FE0((uint64_t)a2, v4);
  uint64_t v32 = 0;
  long long v33 = 0;
  uint64_t v34 = 0;
  sub_19E246830(&v32, *a1, a1[1], 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4));
  size_t v5 = (void **)v32;
  size_t v6 = v33;
  if (v32 != v33)
  {
    int v7 = 0;
    while (1)
    {
      if (*((char *)v5 + 23) < 0)
      {
        sub_19E13C2D0(__p, *v5, (unint64_t)v5[1]);
      }
      else
      {
        long long v8 = *(_OWORD *)v5;
        unint64_t v29 = v5[2];
        *(_OWORD *)__p = v8;
      }
      long long v9 = *(_OWORD *)(v5 + 3);
      int v31 = *((_DWORD *)v5 + 10);
      long long v30 = v9;
      uint64_t v10 = v31;
      if (v31 < 1) {
        goto LABEL_14;
      }
      long long v11 = v30;
      uint64_t v12 = *a2;
      uint64_t v13 = a2[4];
      if (v31 >= 0x10 && v31 + v7 - 1 >= v7 && (unint64_t)(v13 - v12) >= 0x20)
      {
        uint64_t v14 = v31 & 0xFFFFFFFC;
        int v15 = v7 + (v31 & 0xFFFFFFFC);
        int64x2_t v19 = vdupq_lane_s64(v30, 0);
        int64x2_t v20 = vdupq_lane_s64(*((uint64_t *)&v30 + 1), 0);
        int v21 = v7;
        uint64_t v22 = v14;
        do
        {
          uint64_t v23 = 8 * v21;
          uint64_t v24 = (int64x2_t *)(v12 + v23);
          int64x2_t *v24 = v19;
          v24[1] = v19;
          size_t v25 = (int64x2_t *)(v13 + v23);
          int64x2_t *v25 = v20;
          v25[1] = v20;
          v21 += 4;
          v22 -= 4;
        }
        while (v22);
        if (v14 == v10) {
          goto LABEL_14;
        }
      }
      else
      {
        uint64_t v14 = 0;
        int v15 = v7;
      }
      uint64_t v16 = v10 - v14;
      int v17 = v7 + v14 + 1;
      do
      {
        uint64_t v18 = 8 * v15;
        *(void *)(v12 + v18) = v11;
        *(void *)(v13 + v18) = *((void *)&v11 + 1);
        int v15 = v17++;
        --v16;
      }
      while (v16);
LABEL_14:
      if (SHIBYTE(v29) < 0) {
        operator delete(__p[0]);
      }
      v7 += v10;
      v5 += 6;
      if (v5 == v6)
      {
        size_t v5 = (void **)v32;
        break;
      }
    }
  }
  if (v5)
  {
    float v26 = v33;
    float v27 = v5;
    if (v33 != v5)
    {
      do
      {
        if (*((char *)v26 - 25) < 0) {
          operator delete(*(v26 - 6));
        }
        v26 -= 6;
      }
      while (v26 != v5);
      float v27 = v32;
    }
    long long v33 = v5;
    operator delete(v27);
  }
}

void sub_19E244550(_Unwind_Exception *a1)
{
  sub_19E242654(v1);
  _Unwind_Resume(a1);
}

void sub_19E244564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_19E244580((void **)va);
  sub_19E242654(v8);
  _Unwind_Resume(a1);
}

void **sub_19E244580(void **a1)
{
  uint64_t v2 = (void **)*a1;
  if (*a1)
  {
    uint64_t v3 = (void **)a1[1];
    int v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 25) < 0) {
          operator delete(*(v3 - 6));
        }
        v3 -= 6;
      }
      while (v3 != v2);
      int v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void ***sub_19E2445F4(void ***a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    int v4 = *a1;
    if (v3 != v2)
    {
      size_t v5 = a1[1];
      do
      {
        uint64_t v8 = (char *)*(v5 - 3);
        v5 -= 3;
        int v7 = v8;
        if (v8)
        {
          long long v9 = (char *)*(v3 - 2);
          size_t v6 = v7;
          if (v9 != v7)
          {
            do
            {
              uint64_t v10 = (void *)*((void *)v9 - 4);
              if (v10)
              {
                *((void *)v9 - 3) = v10;
                operator delete(v10);
              }
              if (*(v9 - 33) < 0) {
                operator delete(*((void **)v9 - 7));
              }
              v9 -= 56;
            }
            while (v9 != v7);
            size_t v6 = *v5;
          }
          *(v3 - 2) = v7;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      int v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_19E2446B8(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  sub_19E244CF8(a4, a3);
  uint64_t v42 = a1;
  if (sub_19E244DC4(a1))
  {
    sub_19E244E8C(a1, (uint64_t *)v67);
    sub_19E246470((uint64_t)v61, (uint64_t)v67);
    sub_19E242698(a2, a3, (uint64_t)v61, (uint64_t)v64);
    if (__p)
    {
      uint64_t v63 = __p;
      operator delete(__p);
    }
    if (v61[0])
    {
      v61[1] = v61[0];
      operator delete(v61[0]);
    }
    uint64_t v41 = v65;
    if (v65 >= 1)
    {
      uint64_t v7 = 0;
      for (uint64_t i = 0; i != v41; ++i)
      {
        long long v9 = v64[0];
        uint64_t v10 = v66;
        __dst[0] = 0;
        __dst[1] = 0;
        uint64_t v55 = 0;
        if (v66)
        {
          if (v66 < 0) {
            sub_19E13D694();
          }
          long long v11 = (char *)operator new(4 * v66);
          bzero(v11, 4 * v10);
          uint64_t v12 = &v9[v7 * v10];
          if (v10 >= 8)
          {
            if ((unint64_t)(v11 - &v9[4 * i * v10]) >= 0x20)
            {
              uint64_t v14 = 0;
              unint64_t v13 = v10 & 0xFFFFFFFFFFFFFFF8;
              unint64_t v15 = v10 & 0xFFFFFFFFFFFFFFF8;
              do
              {
                long long v16 = *(_OWORD *)&v12[v14 + 16];
                int v17 = &v11[v14];
                *(_OWORD *)int v17 = *(_OWORD *)&v12[v14];
                *((_OWORD *)v17 + 1) = v16;
                v14 += 32;
                v15 -= 8;
              }
              while (v15);
              if (v13 == v10) {
                goto LABEL_20;
              }
            }
            else
            {
              unint64_t v13 = 0;
            }
          }
          else
          {
            unint64_t v13 = 0;
          }
          do
          {
            *(_DWORD *)&v11[4 * v13] = *(_DWORD *)&v12[4 * v13];
            ++v13;
          }
          while (v10 != v13);
        }
        else
        {
          long long v11 = 0;
        }
LABEL_20:
        uint64_t v58 = 0;
        uint64_t v59 = 0;
        uint64_t v60 = 0;
        sub_19E246A1C(&v58, *(void *)(v42 + 24), *(void *)(v42 + 32), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v42 + 32) - *(void *)(v42 + 24)) >> 3));
        uint64_t v18 = (void **)v58;
        int64x2_t v49 = v59;
        if (v58 == v59) {
          goto LABEL_50;
        }
        uint64_t v43 = i;
        uint64_t v44 = v7;
        unsigned int v19 = 0;
        int v45 = i;
        float64x2_t v46 = v11;
        uint64_t v48 = 24 * (int)i;
        do
        {
          if (*((char *)v18 + 23) < 0)
          {
            sub_19E13C2D0(__dst, *v18, (unint64_t)v18[1]);
          }
          else
          {
            long long v20 = *(_OWORD *)v18;
            uint64_t v55 = v18[2];
            *(_OWORD *)__dst = v20;
          }
          int v21 = v18[3];
          int v57 = *((_DWORD *)v18 + 8);
          long long v56 = v21;
          uint64_t v22 = *a4;
          int v23 = v57;
          uint64_t v24 = v57;
          uint64_t v51 = 0;
          uint64_t v52 = 0;
          uint64_t v50 = 0;
          int v53 = 0;
          uint64_t v70 = 0;
          vDSP_Length v71 = 0;
          float32x4_t v72 = 0;
          if (v57)
          {
            if (v57 < 0) {
              sub_19E13D694();
            }
            size_t v25 = 4 * v57;
            float v26 = (char *)operator new(v25);
            bzero(v26, 4 * v23);
            float v27 = &v26[v25];
            uint64_t v50 = v26;
            uint64_t v51 = &v26[v25];
            uint64_t v52 = &v26[4 * v24];
            int v53 = v23;
            if (v19 < v23 + v19) {
              memcpy(v26, &v46[4 * v19], 4 * v24);
            }
          }
          else
          {
            float v27 = 0;
            float v26 = 0;
            uint64_t v50 = 0;
            uint64_t v51 = 0;
            uint64_t v52 = 0;
            int v53 = 0;
          }
          uint64_t v28 = v22 + v48;
          unint64_t v29 = *(void *)(v22 + v48 + 8);
          if (v29 >= *(void *)(v22 + v48 + 16))
          {
            *(void *)(v28 + 8) = sub_19E247E28((void **)(v22 + 24 * v45), (long long *)__dst, (uint64_t)&v50);
            uint64_t v34 = (char *)v50;
            if (!v50) {
              goto LABEL_37;
            }
LABEL_36:
            uint64_t v51 = v34;
            operator delete(v34);
            goto LABEL_37;
          }
          uint64_t v70 = 0;
          vDSP_Length v71 = 0;
          float32x4_t v72 = 0;
          int64_t v30 = v27 - v26;
          if (v30)
          {
            if (v30 < 0) {
              sub_19E13D694();
            }
            int v31 = (char *)operator new(v30);
            uint64_t v32 = &v31[4 * (v30 >> 2)];
            uint64_t v70 = v31;
            float32x4_t v72 = v32;
            memcpy(v31, v26, v30);
            vDSP_Length v71 = v32;
            int v73 = v23;
            if ((SHIBYTE(v55) & 0x80000000) == 0)
            {
LABEL_34:
              long long v33 = *(_OWORD *)__dst;
              *(void *)(v29 + 16) = v55;
              *(_OWORD *)unint64_t v29 = v33;
              goto LABEL_42;
            }
          }
          else
          {
            uint64_t v32 = 0;
            int v31 = 0;
            int v73 = v23;
            if ((SHIBYTE(v55) & 0x80000000) == 0) {
              goto LABEL_34;
            }
          }
          sub_19E13C2D0((unsigned char *)v29, __dst[0], (unint64_t)__dst[1]);
LABEL_42:
          *(void *)(v29 + 24) = 0;
          *(void *)(v29 + 32) = 0;
          *(void *)(v29 + 40) = 0;
          uint64_t v36 = v32 - v31;
          if (v32 != v31)
          {
            if (v36 < 0) {
              sub_19E13D694();
            }
            double v37 = (char *)operator new(v32 - v31);
            *(void *)(v29 + 24) = v37;
            *(void *)(v29 + 32) = v37;
            unint64_t v38 = &v37[4 * (v36 >> 2)];
            *(void *)(v29 + 40) = v38;
            memcpy(v37, v31, v32 - v31);
            *(void *)(v29 + 32) = v38;
          }
          *(_DWORD *)(v29 + 48) = v23;
          if (v31) {
            operator delete(v31);
          }
          *(void *)(v28 + 8) = v29 + 56;
          *(void *)(v28 + 8) = v29 + 56;
          uint64_t v34 = (char *)v50;
          if (v50) {
            goto LABEL_36;
          }
LABEL_37:
          int v35 = v57;
          if (SHIBYTE(v55) < 0) {
            operator delete(__dst[0]);
          }
          v19 += v35;
          v18 += 5;
        }
        while (v18 != v49);
        uint64_t v18 = (void **)v58;
        long long v11 = v46;
        uint64_t i = v43;
        uint64_t v7 = v44;
LABEL_50:
        if (v18)
        {
          uint64_t v39 = v59;
          size_t v40 = v18;
          if (v59 != v18)
          {
            do
            {
              if (*((char *)v39 - 17) < 0) {
                operator delete(*(v39 - 5));
              }
              v39 -= 5;
            }
            while (v39 != v18);
            size_t v40 = v58;
          }
          uint64_t v59 = v18;
          operator delete(v40);
        }
        if (v11) {
          operator delete(v11);
        }
        v7 += 4;
      }
    }
    if (v64[0])
    {
      v64[1] = v64[0];
      operator delete(v64[0]);
    }
    if (v68)
    {
      unint64_t v69 = v68;
      operator delete(v68);
    }
    if (v67[0])
    {
      v67[1] = v67[0];
      operator delete(v67[0]);
    }
  }
}

void sub_19E244BAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void ***a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  sub_19E242654((uint64_t)&a32);
  sub_19E242654(v32 - 184);
  sub_19E2445F4(a16);
  _Unwind_Resume(a1);
}

void sub_19E244BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void ***a16)
{
  sub_19E242654(v16 - 184);
  sub_19E2445F4(a16);
  _Unwind_Resume(a1);
}

void sub_19E244BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void ***a16)
{
}

void sub_19E244C08(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E13A9BC(a1);
}

void *sub_19E244CF8(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      sub_19E13D694();
    }
    int v4 = (char *)operator new(24 * a2);
    *a1 = v4;
    a1[2] = &v4[24 * a2];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_19E244DA4(_Unwind_Exception *exception_object)
{
  if (*v1) {
    sub_19E32ECF8((uint64_t)(v1 + 1), *v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E244DC4(uint64_t a1)
{
  __p = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  sub_19E246A1C(&__p, *(void *)(a1 + 24), *(void *)(a1 + 32), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
  uint64_t v1 = sub_19E247300((long long *)__p, v7, 0);
  uint64_t v2 = (long long *)__p;
  if (__p)
  {
    uint64_t v3 = v7;
    int v4 = __p;
    if (v7 != __p)
    {
      do
      {
        if (*((char *)v3 - 17) < 0) {
          operator delete(*((void **)v3 - 5));
        }
        uint64_t v3 = (long long *)((char *)v3 - 40);
      }
      while (v3 != v2);
      int v4 = __p;
    }
    uint64_t v7 = v2;
    operator delete(v4);
  }
  return v1;
}

void sub_19E244E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_19E244E8C(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  int v4 = sub_19E244DC4(a1);
  sub_19E2490EC((uint64_t)a2, v4);
  long long v33 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  sub_19E246A1C(&v33, *(void *)(a1 + 24), *(void *)(a1 + 32), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
  size_t v5 = (void **)v33;
  size_t v6 = v34;
  if (v33 != v34)
  {
    int v7 = 0;
    while (1)
    {
      if (*((char *)v5 + 23) < 0)
      {
        sub_19E13C2D0(__p, *v5, (unint64_t)v5[1]);
      }
      else
      {
        long long v8 = *(_OWORD *)v5;
        int64_t v30 = v5[2];
        *(_OWORD *)__p = v8;
      }
      long long v9 = v5[3];
      int v32 = *((_DWORD *)v5 + 8);
      int v31 = v9;
      uint64_t v10 = v32;
      if (v32 < 1) {
        goto LABEL_15;
      }
      int v11 = (int)v31;
      int v12 = HIDWORD(v31);
      uint64_t v13 = *a2;
      uint64_t v14 = a2[4];
      if (v32 >= 0x10 && v32 + v7 - 1 >= v7 && (unint64_t)(v14 - v13) >= 0x20)
      {
        uint64_t v15 = v32 & 0xFFFFFFF8;
        int v16 = v7 + (v32 & 0xFFFFFFF8);
        int32x4_t v20 = vdupq_n_s32(v31);
        int32x4_t v21 = vdupq_n_s32(HIDWORD(v31));
        int v22 = v7;
        uint64_t v23 = v15;
        do
        {
          uint64_t v24 = 4 * v22;
          size_t v25 = (int32x4_t *)(v13 + v24);
          int32x4_t *v25 = v20;
          v25[1] = v20;
          float v26 = (int32x4_t *)(v14 + v24);
          *float v26 = v21;
          v26[1] = v21;
          v22 += 8;
          v23 -= 8;
        }
        while (v23);
        if (v15 == v10) {
          goto LABEL_14;
        }
      }
      else
      {
        uint64_t v15 = 0;
        int v16 = v7;
      }
      uint64_t v17 = v10 - v15;
      int v18 = v7 + v15 + 1;
      do
      {
        uint64_t v19 = 4 * v16;
        *(_DWORD *)(v13 + v19) = v11;
        *(_DWORD *)(v14 + v19) = v12;
        int v16 = v18++;
        --v17;
      }
      while (v17);
LABEL_14:
      LODWORD(v10) = v32;
LABEL_15:
      if (SHIBYTE(v30) < 0) {
        operator delete(__p[0]);
      }
      v7 += v10;
      v5 += 5;
      if (v5 == v6)
      {
        size_t v5 = (void **)v33;
        break;
      }
    }
  }
  if (v5)
  {
    float v27 = v34;
    uint64_t v28 = v5;
    if (v34 != v5)
    {
      do
      {
        if (*((char *)v27 - 17) < 0) {
          operator delete(*(v27 - 5));
        }
        v27 -= 5;
      }
      while (v27 != v5);
      uint64_t v28 = v33;
    }
    uint64_t v34 = v5;
    operator delete(v28);
  }
}

void sub_19E245080(_Unwind_Exception *a1)
{
  sub_19E242654(v1);
  _Unwind_Resume(a1);
}

void sub_19E245094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_19E2450B0((void **)va);
  sub_19E242654(v6);
  _Unwind_Resume(a1);
}

void **sub_19E2450B0(void **a1)
{
  uint64_t v2 = (void **)*a1;
  if (*a1)
  {
    uint64_t v3 = (void **)a1[1];
    int v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 17) < 0) {
          operator delete(*(v3 - 5));
        }
        v3 -= 5;
      }
      while (v3 != v2);
      int v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void *sub_19E245124(void *a1, uint64_t *a2)
{
  uint64_t v4 = sub_19E246588((uint64_t)a1);
  *(void *)(v4 + 2528) = 0;
  *(_OWORD *)(v4 + 2512) = 0u;
  uint64_t v64 = 0;
  int v65 = 0;
  uint64_t v66 = 0;
  uint64_t v6 = *a2;
  size_t v5 = (uint64_t *)a2[1];
  uint64_t v7 = (uint64_t)v5 - *a2;
  int v67 = (unint64_t)v7 >> 3;
  if (v67)
  {
    sub_19E2482DC((uint64_t)&v64, (int)(v7 >> 3));
    uint64_t v6 = *a2;
    size_t v5 = (uint64_t *)a2[1];
  }
  if ((uint64_t *)v6 != v5)
  {
    uint64_t v8 = 0;
    long long v9 = v64;
    unint64_t v10 = (unint64_t)v5 - v6 - 8;
    if (v10 < 0x18 || (unint64_t)&v64[-v6] < 0x20)
    {
      int v12 = (uint64_t *)v6;
    }
    else
    {
      uint64_t v11 = (v10 >> 3) + 1;
      uint64_t v8 = v11 & 0x3FFFFFFFFFFFFFFCLL;
      int v12 = (uint64_t *)(v6 + 8 * (v11 & 0x3FFFFFFFFFFFFFFCLL));
      uint64_t v13 = v64 + 16;
      uint64_t v14 = (long long *)(v6 + 16);
      uint64_t v15 = v11 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v16 = *v14;
        *(v13 - 1) = *(v14 - 1);
        _OWORD *v13 = v16;
        v13 += 2;
        v14 += 2;
        v15 -= 4;
      }
      while (v15);
      if (v11 == v8) {
        goto LABEL_13;
      }
    }
    uint64_t v17 = &v9[8 * v8];
    do
    {
      uint64_t v18 = *v12++;
      *(void *)uint64_t v17 = v18;
      v17 += 8;
    }
    while (v12 != v5);
  }
LABEL_13:
  double v19 = sub_19E2456E8((uint64_t)&v64);
  double __B = v19 + v19 + 0.0002;
  int32x4_t v20 = v64;
  int64_t v21 = v65 - v64;
  if (v65 == v64)
  {
    uint64_t v23 = 0;
    int v22 = 0;
  }
  else
  {
    if (v21 < 0) {
      sub_19E13D694();
    }
    int v22 = (char *)operator new(v65 - v64);
    uint64_t v23 = &v22[8 * (v21 >> 3)];
    memcpy(v22, v20, v21);
  }
  int v24 = v67;
  double __C = 0.0;
  vDSP_meanvD((const double *)v20, 1, &__C, v67);
  double __C = -__C;
  vDSP_vsaddD((const double *)v22, 1, &__C, (double *)v22, 1, v24);
  int64_t v25 = v23 - v22;
  if (v25)
  {
    if (v25 < 0) {
      sub_19E13D694();
    }
    float v26 = (char *)operator new(v25);
    float v27 = &v26[8 * (v25 >> 3)];
    memcpy(v26, v22, v25);
  }
  else
  {
    float v27 = 0;
    float v26 = 0;
  }
  vDSP_vsdivD((const double *)v26, 1, &__B, (double *)v26, 1, v24);
  uint64_t v52 = 0;
  int v53 = 0;
  long long v54 = 0;
  uint64_t v28 = v27 - v26;
  if (v27 != v26)
  {
    if (v28 < 0) {
      sub_19E13D694();
    }
    unint64_t v29 = (char *)operator new(v27 - v26);
    int64_t v30 = &v29[8 * (v28 >> 3)];
    uint64_t v52 = v29;
    long long v54 = v30;
    memcpy(v29, v26, v27 - v26);
    int v53 = v30;
  }
  int v55 = v24;
  sub_19E2458A8((uint64_t)&v52, (uint64_t)__p);
  signed int v31 = v58;
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  uint64_t v59 = 0;
  if (v58)
  {
    if (v58 < 0) {
      sub_19E13D694();
    }
    int v32 = operator new(8 * v58);
    uint64_t v59 = v32;
    uint64_t v61 = (char *)v32 + 8 * v31;
    bzero(v32, 8 * v31);
    unint64_t v33 = 0;
    uint64_t v60 = (char *)v32 + 8 * v31;
    LODWORD(__N) = v31;
    uint64_t v34 = __p[0];
    if (v31 < 4) {
      goto LABEL_65;
    }
    if ((unint64_t)((char *)v32 - (char *)__p[0]) < 0x20) {
      goto LABEL_65;
    }
    unint64_t v35 = 0;
    unint64_t v33 = v31 & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v36 = v33;
    do
    {
      long long v37 = *(_OWORD *)&v34[v35 / 8 + 2];
      unint64_t v38 = &v32[v35 / 0x10];
      *unint64_t v38 = *(_OWORD *)&v34[v35 / 8];
      v38[1] = v37;
      v35 += 32;
      v36 -= 4;
    }
    while (v36);
    if (v33 != v31)
    {
LABEL_65:
      do
      {
        *((void *)v32 + v33) = v34[v33];
        ++v33;
      }
      while (v31 != v33);
    }
  }
  else
  {
    int v32 = 0;
    LODWORD(__N) = 0;
    uint64_t v34 = __p[0];
    if (!__p[0]) {
      goto LABEL_35;
    }
  }
  __p[1] = v34;
  operator delete(v34);
LABEL_35:
  if (v52)
  {
    int v53 = v52;
    operator delete(v52);
  }
  if (v26) {
    operator delete(v26);
  }
  if (v22) {
    operator delete(v22);
  }
  __p[0] = 0;
  vDSP_sveD((const double *)v32, 1, (double *)__p, (int)__N);
  uint64_t v52 = __p[0];
  vDSP_vsdivD((const double *)v32, 1, (const double *)&v52, (double *)v32, 1, (int)__N);
  uint64_t v39 = (int)__N;
  __p[1] = 0;
  int v57 = 0;
  __p[0] = 0;
  if (__N)
  {
    if ((__N & 0x80000000) != 0) {
      sub_19E13D694();
    }
    size_t v40 = (char *)operator new(8 * (int)__N);
    unint64_t v41 = 0;
    __p[0] = v40;
    int v57 = &v40[8 * v39];
    if (v39 < 4) {
      goto LABEL_48;
    }
    if ((unint64_t)(v40 - (char *)v32) < 0x20) {
      goto LABEL_48;
    }
    unint64_t v41 = v39 & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v42 = &v40[8 * (v39 & 0xFFFFFFFFFFFFFFFCLL)];
    uint64_t v43 = v32 + 1;
    uint64_t v44 = v40 + 16;
    unint64_t v45 = v39 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      long long v46 = *v43;
      *(v44 - 1) = *(v43 - 1);
      *uint64_t v44 = v46;
      v43 += 2;
      v44 += 2;
      v45 -= 4;
    }
    while (v45);
    v40 += 8 * (v39 & 0xFFFFFFFFFFFFFFFCLL);
    if (v41 != v39)
    {
LABEL_48:
      uint64_t v47 = v39 - v41;
      uint64_t v48 = (uint64_t *)v32 + v41;
      uint64_t v42 = v40;
      do
      {
        uint64_t v49 = *v48++;
        *(void *)uint64_t v42 = v49;
        v42 += 8;
        --v47;
      }
      while (v47);
    }
    __p[1] = v42;
  }
  sub_19E24848C((double **)__p);
  uint64_t v50 = (void *)a1[314];
  if (v50)
  {
    a1[315] = v50;
    operator delete(v50);
    a1[314] = 0;
    a1[315] = 0;
    a1[316] = 0;
  }
  *((_OWORD *)a1 + 157) = *(_OWORD *)__p;
  a1[316] = v57;
  if (v32)
  {
    uint64_t v60 = (char *)v32;
    operator delete(v32);
  }
  if (v64)
  {
    int v65 = v64;
    operator delete(v64);
  }
  return a1;
}

void sub_19E245600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  unint64_t v29 = *(void **)(v27 - 104);
  if (v29)
  {
    *(void *)(v27 - 96) = v29;
    operator delete(v29);
  }
  sub_19E24598C(v26);
  _Unwind_Resume(a1);
}

double sub_19E2456E8(uint64_t a1)
{
  uint64_t v3 = *(const void **)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  int64_t v4 = v2 - *(void *)a1;
  if (v2 == *(void *)a1)
  {
    uint64_t v6 = 0;
    size_t v5 = 0;
  }
  else
  {
    if (v4 < 0) {
      sub_19E13D694();
    }
    size_t v5 = (char *)operator new(v2 - *(void *)a1);
    uint64_t v6 = &v5[8 * (v4 >> 3)];
    memcpy(v5, v3, v4);
  }
  int v7 = *(_DWORD *)(a1 + 24);
  double __C = 0.0;
  vDSP_meanvD((const double *)v3, 1, &__C, v7);
  double __C = -__C;
  vDSP_vsaddD((const double *)v5, 1, &__C, (double *)v5, 1, v7);
  size_t v8 = v6 - v5;
  if (v6 == v5)
  {
    long long v9 = 0;
  }
  else
  {
    if ((v8 & 0x8000000000000000) != 0) {
      sub_19E13D694();
    }
    long long v9 = operator new(v6 - v5);
    memcpy(v9, v5, v8);
  }
  double __C = 0.0;
  vDSP_rmsqvD((const double *)v9, 1, &__C, v7);
  double v10 = __C;
  if (v9) {
    operator delete(v9);
  }
  if (v5) {
    operator delete(v5);
  }
  return v10;
}

void sub_19E245850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (v16) {
    operator delete(v16);
  }
  if (v15) {
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2458A8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = *(_DWORD *)(a1 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  if (v4)
  {
    if (v4 < 0) {
      sub_19E13D694();
    }
    size_t v5 = (char *)operator new(8 * v4);
    *(void *)a2 = v5;
    *(void *)(a2 + 16) = &v5[8 * v4];
    bzero(v5, 8 * v4);
    *(void *)(a2 + 8) = &v5[8 * v4];
  }
  else
  {
    size_t v5 = 0;
  }
  *(_DWORD *)(a2 + 24) = v4;
  int v6 = v4;
  vvexp((double *)v5, *(const double **)a1, &v6);
}

void sub_19E245954(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E245970(void *a1)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  sub_19E13A9BC(a1);
}

uint64_t sub_19E24598C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 2512);
  if (v2)
  {
    *(void *)(a1 + 2520) = v2;
    operator delete(v2);
  }
  std::random_device::~random_device((std::random_device *)(a1 + 2504));
  return a1;
}

void sub_19E2459CC(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char **a4@<X8>)
{
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  int v65 = 0;
  sub_19E246830(&v65, *a1, a1[1], 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4));
  vDSP_Length v68 = 0;
  unint64_t v69 = 0;
  uint64_t v70 = 0;
  sub_19E246A1C(&v68, a1[3], a1[4], 0xCCCCCCCCCCCCCCCDLL * ((a1[4] - a1[3]) >> 3));
  sub_19E243B8C((uint64_t *)&v65, a2, a3, (uint64_t *)&v71);
  size_t v8 = v68;
  if (v68)
  {
    long long v9 = v69;
    double v10 = v68;
    if (v69 != v68)
    {
      do
      {
        if (*((char *)v9 - 17) < 0) {
          operator delete(*(v9 - 5));
        }
        v9 -= 5;
      }
      while (v9 != v8);
      double v10 = v68;
    }
    unint64_t v69 = v8;
    operator delete(v10);
  }
  uint64_t v11 = (uint64_t)v65;
  if (v65)
  {
    uint64_t v12 = v66;
    uint64_t v13 = v65;
    if ((void *)v66 != v65)
    {
      do
      {
        if (*(char *)(v12 - 25) < 0) {
          operator delete(*(void **)(v12 - 48));
        }
        v12 -= 48;
      }
      while (v12 != v11);
      uint64_t v13 = v65;
    }
    uint64_t v66 = v11;
    operator delete(v13);
  }
  signed int v58 = 0;
  uint64_t v59 = 0;
  int v57 = 0;
  sub_19E246830(&v57, *a1, a1[1], 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4));
  __p = 0;
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  sub_19E246A1C(&__p, a1[3], a1[4], 0xCCCCCCCCCCCCCCCDLL * ((a1[4] - a1[3]) >> 3));
  sub_19E2446B8((uint64_t)&v57, a2, a3, (uint64_t *)&v63);
  uint64_t v14 = (void **)__p;
  if (__p)
  {
    uint64_t v15 = v61;
    long long v16 = __p;
    if (v61 != __p)
    {
      do
      {
        if (*((char *)v15 - 17) < 0) {
          operator delete(*(v15 - 5));
        }
        v15 -= 5;
      }
      while (v15 != v14);
      long long v16 = __p;
    }
    uint64_t v61 = v14;
    operator delete(v16);
  }
  uint64_t v17 = (void **)v57;
  if (v57)
  {
    uint64_t v18 = v58;
    double v19 = v57;
    if (v58 != v57)
    {
      do
      {
        if (*((char *)v18 - 25) < 0) {
          operator delete(*(v18 - 6));
        }
        v18 -= 6;
      }
      while (v18 != v17);
      double v19 = v57;
    }
    signed int v58 = v17;
    operator delete(v19);
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (a3)
  {
    if ((a3 & 0x80000000) != 0) {
      sub_19E13D694();
    }
    int32x4_t v20 = (char *)operator new(96 * (int)a3);
    *a4 = v20;
    a4[1] = v20;
    int64_t v21 = &v20[96 * (int)a3];
    a4[2] = v21;
    do
    {
      *((_OWORD *)v20 + 2) = 0uLL;
      *((_OWORD *)v20 + 3) = 0uLL;
      *(_OWORD *)int32x4_t v20 = 0uLL;
      *((_OWORD *)v20 + 1) = 0uLL;
      *((void *)v20 + 6) = v20 + 56;
      *((void *)v20 + 11) = 0;
      *((void *)v20 + 10) = 0;
      *((void *)v20 + 8) = 0;
      *((void *)v20 + 9) = v20 + 80;
      v20 += 96;
    }
    while (v20 != v21);
    a4[1] = v21;
    if ((int)a3 >= 1)
    {
      uint64_t v22 = 0;
      do
      {
        uint64_t v24 = 3 * (int)v22;
        long long v54 = 0;
        uint64_t v55 = 0;
        int v53 = 0;
        sub_19E247444(&v53, (uint64_t)v71[v24], (uint64_t)v71[v24 + 1], 0x6DB6DB6DB6DB6DB7 * (((unsigned char *)v71[v24 + 1] - (unsigned char *)v71[v24]) >> 3));
        uint64_t v51 = 0;
        uint64_t v52 = 0;
        uint64_t v50 = 0;
        sub_19E2476F4(&v50, (uint64_t)v63[v24], (uint64_t)v63[v24 + 1], 0x6DB6DB6DB6DB6DB7 * (((unsigned char *)v63[v24 + 1] - (unsigned char *)v63[v24]) >> 3));
        sub_19E246C08(v56, (uint64_t *)&v53, (uint64_t *)&v50);
        sub_19E2460A4((char **)&(*a4)[96 * (int)v22], (uint64_t)v56);
        sub_19E2470C8((char **)v56);
        int64_t v25 = (char *)v50;
        if (v50)
        {
          uint64_t v26 = v51;
          uint64_t v27 = v50;
          if (v51 != v50)
          {
            do
            {
              uint64_t v28 = (void *)*((void *)v26 - 4);
              if (v28)
              {
                *((void *)v26 - 3) = v28;
                operator delete(v28);
              }
              if (*(v26 - 33) < 0) {
                operator delete(*((void **)v26 - 7));
              }
              v26 -= 56;
            }
            while (v26 != v25);
            uint64_t v27 = v50;
          }
          uint64_t v51 = v25;
          operator delete(v27);
        }
        unint64_t v29 = (char *)v53;
        if (v53)
        {
          int64_t v30 = v54;
          uint64_t v23 = v53;
          if (v54 != v53)
          {
            do
            {
              signed int v31 = (void *)*((void *)v30 - 4);
              if (v31)
              {
                *((void *)v30 - 3) = v31;
                operator delete(v31);
              }
              if (*(v30 - 33) < 0) {
                operator delete(*((void **)v30 - 7));
              }
              v30 -= 56;
            }
            while (v30 != v29);
            uint64_t v23 = v53;
          }
          long long v54 = v29;
          operator delete(v23);
        }
        ++v22;
      }
      while (v22 != a3);
    }
  }
  uint64_t v32 = (uint64_t)v63;
  if (v63)
  {
    unint64_t v33 = v64;
    uint64_t v34 = v63;
    if (v64 != v63)
    {
      unint64_t v35 = v64;
      do
      {
        unint64_t v38 = (char *)*(v35 - 3);
        v35 -= 3;
        long long v37 = v38;
        if (v38)
        {
          uint64_t v39 = (char *)*(v33 - 2);
          unint64_t v36 = v37;
          if (v39 != v37)
          {
            do
            {
              size_t v40 = (void *)*((void *)v39 - 4);
              if (v40)
              {
                *((void *)v39 - 3) = v40;
                operator delete(v40);
              }
              if (*(v39 - 33) < 0) {
                operator delete(*((void **)v39 - 7));
              }
              v39 -= 56;
            }
            while (v39 != v37);
            unint64_t v36 = *v35;
          }
          *(v33 - 2) = v37;
          operator delete(v36);
        }
        unint64_t v33 = v35;
      }
      while (v35 != (void **)v32);
      uint64_t v34 = v63;
    }
    uint64_t v64 = (void **)v32;
    operator delete(v34);
  }
  uint64_t v41 = (uint64_t)v71;
  if (v71)
  {
    uint64_t v42 = v72;
    uint64_t v43 = v71;
    if (v72 != v71)
    {
      uint64_t v44 = v72;
      do
      {
        uint64_t v47 = (char *)*(v44 - 3);
        v44 -= 3;
        long long v46 = v47;
        if (v47)
        {
          uint64_t v48 = (char *)*(v42 - 2);
          unint64_t v45 = v46;
          if (v48 != v46)
          {
            do
            {
              uint64_t v49 = (void *)*((void *)v48 - 4);
              if (v49)
              {
                *((void *)v48 - 3) = v49;
                operator delete(v49);
              }
              if (*(v48 - 33) < 0) {
                operator delete(*((void **)v48 - 7));
              }
              v48 -= 56;
            }
            while (v48 != v46);
            unint64_t v45 = *v44;
          }
          *(v42 - 2) = v46;
          operator delete(v45);
        }
        uint64_t v42 = v44;
      }
      while (v44 != (void **)v41);
      uint64_t v43 = v71;
    }
    float32x4_t v72 = (void **)v41;
    operator delete(v43);
  }
}

void sub_19E245F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  sub_19E245FE8(&a27);
  sub_19E2445F4((void ***)(v27 - 104));
  _Unwind_Resume(a1);
}

void sub_19E245F30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (a27)
  {
    sub_19E32EE0C((uint64_t)&a27, a27);
    sub_19E2445F4((void ***)(v27 - 104));
    _Unwind_Resume(a1);
  }
  sub_19E2445F4((void ***)(v27 - 104));
  _Unwind_Resume(a1);
}

void **sub_19E245FE8(void **a1)
{
  uint64_t v2 = (void **)a1[3];
  if (v2)
  {
    uint64_t v3 = (void **)a1[4];
    int v4 = a1[3];
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 17) < 0) {
          operator delete(*(v3 - 5));
        }
        v3 -= 5;
      }
      while (v3 != v2);
      int v4 = a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  size_t v5 = (void **)*a1;
  if (*a1)
  {
    int v6 = (void **)a1[1];
    int v7 = *a1;
    if (v6 != v5)
    {
      do
      {
        if (*((char *)v6 - 25) < 0) {
          operator delete(*(v6 - 6));
        }
        v6 -= 6;
      }
      while (v6 != v5);
      int v7 = *a1;
    }
    a1[1] = v5;
    operator delete(v7);
  }
  return a1;
}

char **sub_19E2460A4(char **a1, uint64_t a2)
{
  int v4 = *a1;
  if (*a1)
  {
    size_t v5 = a1[1];
    int v6 = *a1;
    if (v5 != v4)
    {
      do
      {
        int v7 = (void *)*((void *)v5 - 4);
        if (v7)
        {
          *((void *)v5 - 3) = v7;
          operator delete(v7);
        }
        if (*(v5 - 33) < 0) {
          operator delete(*((void **)v5 - 7));
        }
        v5 -= 56;
      }
      while (v5 != v4);
      int v6 = *a1;
    }
    a1[1] = v4;
    operator delete(v6);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(char **)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  size_t v8 = (void **)(a1 + 3);
  long long v9 = a1[3];
  if (v9)
  {
    double v10 = a1[4];
    uint64_t v11 = a1[3];
    if (v10 != v9)
    {
      do
      {
        uint64_t v12 = (void *)*((void *)v10 - 4);
        if (v12)
        {
          *((void *)v10 - 3) = v12;
          operator delete(v12);
        }
        if (*(v10 - 33) < 0) {
          operator delete(*((void **)v10 - 7));
        }
        v10 -= 56;
      }
      while (v10 != v9);
      uint64_t v11 = (char *)*v8;
    }
    a1[4] = v9;
    operator delete(v11);
    char *v8 = 0;
    a1[4] = 0;
    a1[5] = 0;
  }
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  a1[5] = *(char **)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  uint64_t v13 = (char *)(a1 + 7);
  sub_19E15A064((uint64_t)(a1 + 6), a1[7]);
  a1[6] = *(char **)(a2 + 48);
  uint64_t v14 = (void *)(a2 + 56);
  uint64_t v15 = *(void *)(a2 + 56);
  a1[7] = (char *)v15;
  long long v16 = *(char **)(a2 + 64);
  a1[8] = v16;
  if (v16)
  {
    *(void *)(v15 + 16) = v13;
    *(void *)(a2 + 48) = v14;
    *uint64_t v14 = 0;
    *(void *)(a2 + 64) = 0;
  }
  else
  {
    a1[6] = v13;
  }
  uint64_t v17 = (char *)(a1 + 10);
  sub_19E15A064((uint64_t)(a1 + 9), a1[10]);
  a1[9] = *(char **)(a2 + 72);
  uint64_t v18 = (void *)(a2 + 80);
  uint64_t v19 = *(void *)(a2 + 80);
  a1[10] = (char *)v19;
  int32x4_t v20 = *(char **)(a2 + 88);
  a1[11] = v20;
  if (v20)
  {
    *(void *)(v19 + 16) = v17;
    *(void *)(a2 + 72) = v18;
    *uint64_t v18 = 0;
    *(void *)(a2 + 88) = 0;
  }
  else
  {
    a1[9] = v17;
  }
  return a1;
}

void **sub_19E246278(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    int v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        size_t v5 = (void *)*((void *)v3 - 4);
        if (v5)
        {
          *((void *)v3 - 3) = v5;
          operator delete(v5);
        }
        if (*(v3 - 33) < 0) {
          operator delete(*((void **)v3 - 7));
        }
        v3 -= 56;
      }
      while (v3 != v2);
      int v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **sub_19E2462FC(void **a1)
{
  uint64_t v2 = (char **)*a1;
  if (*a1)
  {
    uint64_t v3 = (char **)a1[1];
    int v4 = v2;
    if (v3 != v2)
    {
      do
        uint64_t v3 = sub_19E2470C8(v3 - 12);
      while (v3 != v2);
      int v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_19E246358(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  size_t v5 = *(const void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  int64_t v6 = v4 - *(void *)a2;
  if (v4 != *(void *)a2)
  {
    if (v6 < 0) {
      sub_19E13D694();
    }
    int v7 = (char *)operator new(v4 - *(void *)a2);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v7;
    size_t v8 = &v7[8 * (v6 >> 3)];
    *(void *)(a1 + 16) = v8;
    memcpy(v7, v5, v6);
    *(void *)(a1 + 8) = v8;
  }
  int v9 = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 24) = v9;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v11 = *(unsigned char **)(a2 + 32);
  double v10 = *(unsigned char **)(a2 + 40);
  int64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0) {
      sub_19E13D694();
    }
    uint64_t v13 = (char *)operator new(v10 - v11);
    *(void *)(a1 + 32) = v13;
    *(void *)(a1 + 40) = v13;
    uint64_t v14 = &v13[8 * (v12 >> 3)];
    *(void *)(a1 + 48) = v14;
    memcpy(v13, v11, v12);
    *(void *)(a1 + 40) = v14;
  }
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  return a1;
}

void sub_19E24643C(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 40) = v4;
    operator delete(v4);
  }
  size_t v5 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E246470(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  size_t v5 = *(const void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  int64_t v6 = v4 - *(void *)a2;
  if (v4 != *(void *)a2)
  {
    if (v6 < 0) {
      sub_19E13D694();
    }
    int v7 = (char *)operator new(v4 - *(void *)a2);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v7;
    size_t v8 = &v7[4 * (v6 >> 2)];
    *(void *)(a1 + 16) = v8;
    memcpy(v7, v5, v6);
    *(void *)(a1 + 8) = v8;
  }
  int v9 = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 24) = v9;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v11 = *(unsigned char **)(a2 + 32);
  double v10 = *(unsigned char **)(a2 + 40);
  int64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0) {
      sub_19E13D694();
    }
    uint64_t v13 = (char *)operator new(v10 - v11);
    *(void *)(a1 + 32) = v13;
    *(void *)(a1 + 40) = v13;
    uint64_t v14 = &v13[4 * (v12 >> 2)];
    *(void *)(a1 + 48) = v14;
    memcpy(v13, v11, v12);
    *(void *)(a1 + 40) = v14;
  }
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  return a1;
}

void sub_19E246554(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 40) = v4;
    operator delete(v4);
  }
  size_t v5 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E246588(uint64_t a1)
{
  unsigned int v2 = 5489;
  *(_DWORD *)a1 = 5489;
  for (uint64_t i = 1; i != 624; ++i)
  {
    unsigned int v2 = i + 1812433253 * (v2 ^ (v2 >> 30));
    *(_DWORD *)(a1 + 4 * i) = v2;
  }
  *(void *)(a1 + 2496) = 0;
  *((unsigned char *)&__token.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&__token, "/dev/urandom");
  std::random_device::random_device((std::random_device *)(a1 + 2504), &__token);
  if (SHIBYTE(__token.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__token.__r_.__value_.__l.__data_);
  }
  unsigned int v4 = MEMORY[0x19F3BBA40](a1 + 2504);
  *(_DWORD *)a1 = v4;
  for (uint64_t j = 1; j != 624; ++j)
  {
    unsigned int v4 = j + 1812433253 * (v4 ^ (v4 >> 30));
    *(_DWORD *)(a1 + 4 * j) = v4;
  }
  *(void *)(a1 + 2496) = 0;
  return a1;
}

void sub_19E246660(_Unwind_Exception *a1)
{
  std::random_device::~random_device(v1);
  _Unwind_Resume(a1);
}

void sub_19E246674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E246690(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result = a3[1];
  if (result != *a3)
  {
    unsigned int v4 = result - *a3 + 1;
    if (result - *a3 == -1)
    {
      uint64_t v16 = *(void *)(a2 + 2496);
      unint64_t v17 = (v16 + 1) % 0x270uLL;
      unsigned int v18 = *(_DWORD *)(a2 + 4 * ((v16 + 397) % 0x270uLL)) ^ ((*(_DWORD *)(a2 + 4 * v17) & 0x7FFFFFFE | *(_DWORD *)(a2 + 4 * v16) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a2 + 4 * v17) << 31) >> 31) & 0x9908B0DF;
      *(_DWORD *)(a2 + 4 * v16) = v18;
      *(void *)(a2 + 2496) = v17;
      unsigned int v19 = ((v18 ^ (v18 >> 11)) << 7) & 0x9D2C5680 ^ v18 ^ (v18 >> 11);
      return (v19 << 15) & 0xEFC60000 ^ v19 ^ (((v19 << 15) & 0xEFC60000 ^ v19) >> 18);
    }
    else
    {
      uint64_t v5 = __clz(v4);
      uint64_t v6 = 31;
      if (((v4 << v5) & 0x7FFFFFFF) != 0) {
        uint64_t v6 = 32;
      }
      unint64_t v7 = v6 - v5;
      unint64_t v8 = v7 >> 5;
      if ((v7 & 0x1F) != 0) {
        ++v8;
      }
      if (v8 <= v7) {
        unsigned int v9 = 0xFFFFFFFF >> -(v7 / v8);
      }
      else {
        unsigned int v9 = 0;
      }
      unint64_t v10 = *(void *)(a2 + 2496);
      do
      {
        uint64_t v11 = 4 * v10;
        unint64_t v12 = v10 + 397;
        unint64_t v10 = (v10 + 1) % 0x270;
        unsigned int v13 = *(_DWORD *)(a2 + 4 * (v12 % 0x270)) ^ ((*(_DWORD *)(a2 + 4 * v10) & 0x7FFFFFFE | *(_DWORD *)(a2 + v11) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a2 + 4 * v10) << 31) >> 31) & 0x9908B0DF;
        *(_DWORD *)(a2 + v11) = v13;
        unsigned int v14 = ((v13 ^ (v13 >> 11)) << 7) & 0x9D2C5680 ^ v13 ^ (v13 >> 11);
        unsigned int v15 = ((v14 << 15) & 0xEFC60000 ^ v14 ^ (((v14 << 15) & 0xEFC60000 ^ v14) >> 18)) & v9;
      }
      while (v15 >= v4);
      *(void *)(a2 + 2496) = v10;
      return *a3 + v15;
    }
  }
  return result;
}

void *sub_19E246830(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = result;
    if (a4 >= 0x555555555555556) {
      sub_19E13D694();
    }
    uint64_t result = operator new(48 * a4);
    unint64_t v8 = result;
    void *v5 = result;
    v5[1] = result;
    v5[2] = &result[6 * a4];
    if (a2 != a3)
    {
      unint64_t v9 = 0;
      do
      {
        uint64_t v11 = &v8[v9 / 8];
        uint64_t v12 = a2 + v9;
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          uint64_t result = sub_19E13C2D0(&v8[v9 / 8], *(void **)v12, *(void *)(v12 + 8));
        }
        else
        {
          *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
          v11[2] = *(void *)(v12 + 16);
        }
        unint64_t v10 = &v8[v9 / 8];
        *(_OWORD *)(v10 + 3) = *(_OWORD *)(a2 + v9 + 24);
        *((_DWORD *)v10 + 10) = *(_DWORD *)(a2 + v9 + 40);
        v9 += 48;
      }
      while (a2 + v9 != a3);
      unint64_t v8 = (void *)((char *)v8 + v9);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_19E246930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void ***sub_19E246984(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    unsigned int v2 = *result;
    uint64_t v3 = (void **)**result;
    if (v3)
    {
      unsigned int v4 = (void **)v2[1];
      uint64_t v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 25) < 0) {
            operator delete(*(v4 - 6));
          }
          v4 -= 6;
        }
        while (v4 != v3);
        uint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void *sub_19E246A1C(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = result;
    if (a4 >= 0x666666666666667) {
      sub_19E13D694();
    }
    uint64_t result = operator new(40 * a4);
    unint64_t v8 = result;
    void *v5 = result;
    v5[1] = result;
    v5[2] = &result[5 * a4];
    if (a2 != a3)
    {
      unint64_t v9 = 0;
      do
      {
        uint64_t v11 = &v8[v9 / 8];
        uint64_t v12 = a2 + v9;
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          uint64_t result = sub_19E13C2D0(&v8[v9 / 8], *(void **)v12, *(void *)(v12 + 8));
        }
        else
        {
          *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
          v11[2] = *(void *)(v12 + 16);
        }
        unint64_t v10 = &v8[v9 / 8];
        v10[3] = *(void *)(a2 + v9 + 24);
        *((_DWORD *)v10 + 8) = *(_DWORD *)(a2 + v9 + 32);
        v9 += 40;
      }
      while (a2 + v9 != a3);
      unint64_t v8 = (void *)((char *)v8 + v9);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_19E246B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void ***sub_19E246B70(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    unsigned int v2 = *result;
    uint64_t v3 = (void **)**result;
    if (v3)
    {
      unsigned int v4 = (void **)v2[1];
      uint64_t v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 17) < 0) {
            operator delete(*(v4 - 5));
          }
          v4 -= 5;
        }
        while (v4 != v3);
        uint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t **sub_19E246C08(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_19E247444(a1, *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3));
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  sub_19E2476F4(a1 + 3, *a3, a3[1], 0x6DB6DB6DB6DB6DB7 * ((a3[1] - *a3) >> 3));
  a1[7] = 0;
  a1[6] = (uint64_t *)(a1 + 7);
  a1[8] = 0;
  a1[10] = 0;
  a1[9] = (uint64_t *)(a1 + 10);
  a1[11] = 0;
  uint64_t v5 = (long long *)*a1;
  uint64_t v6 = (long long *)a1[1];
  if (*a1 != (uint64_t *)v6)
  {
    while (1)
    {
      if (*((char *)v5 + 23) < 0)
      {
        sub_19E13C2D0(__dst, *(void **)v5, *((void *)v5 + 1));
      }
      else
      {
        long long v7 = *v5;
        uint64_t v25 = *((void *)v5 + 2);
        *(_OWORD *)__dst = v7;
      }
      __p = 0;
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      unint64_t v9 = (unsigned char *)*((void *)v5 + 3);
      unint64_t v8 = (unsigned char *)*((void *)v5 + 4);
      int64_t v10 = v8 - v9;
      if (v8 != v9)
      {
        if (v10 < 0) {
          sub_19E13D694();
        }
        __p = operator new(v8 - v9);
        uint64_t v27 = __p;
        uint64_t v11 = (char *)__p + 8 * (v10 >> 3);
        uint64_t v28 = v11;
        memcpy(__p, v9, v10);
        uint64_t v27 = v11;
      }
      int v29 = *((_DWORD *)v5 + 12);
      if (SHIBYTE(v25) < 0)
      {
        sub_19E13C2D0(v22, __dst[0], (unint64_t)__dst[1]);
      }
      else
      {
        *(_OWORD *)uint64_t v22 = *(_OWORD *)__dst;
        uint64_t v23 = v25;
      }
      sub_19E246F54(a1 + 6, (const void **)v22, (uint64_t)v22);
      if (SHIBYTE(v23) < 0) {
        break;
      }
      uint64_t v12 = __p;
      if (__p) {
        goto LABEL_15;
      }
LABEL_16:
      if (SHIBYTE(v25) < 0) {
        operator delete(__dst[0]);
      }
      uint64_t v5 = (long long *)((char *)v5 + 56);
      if (v5 == v6) {
        goto LABEL_20;
      }
    }
    operator delete(v22[0]);
    uint64_t v12 = __p;
    if (!__p) {
      goto LABEL_16;
    }
LABEL_15:
    uint64_t v27 = v12;
    operator delete(v12);
    goto LABEL_16;
  }
LABEL_20:
  unsigned int v13 = (long long *)a1[3];
  unsigned int v14 = (long long *)a1[4];
  if (v13 != v14)
  {
    while (1)
    {
      if (*((char *)v13 + 23) < 0)
      {
        sub_19E13C2D0(__dst, *(void **)v13, *((void *)v13 + 1));
      }
      else
      {
        long long v15 = *v13;
        uint64_t v25 = *((void *)v13 + 2);
        *(_OWORD *)__dst = v15;
      }
      __p = 0;
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      unint64_t v17 = (unsigned char *)*((void *)v13 + 3);
      uint64_t v16 = (unsigned char *)*((void *)v13 + 4);
      int64_t v18 = v16 - v17;
      if (v16 != v17)
      {
        if (v18 < 0) {
          sub_19E13D694();
        }
        __p = operator new(v16 - v17);
        uint64_t v27 = __p;
        unsigned int v19 = (char *)__p + 4 * (v18 >> 2);
        uint64_t v28 = v19;
        memcpy(__p, v17, v18);
        uint64_t v27 = v19;
      }
      int v29 = *((_DWORD *)v13 + 12);
      if (SHIBYTE(v25) < 0)
      {
        sub_19E13C2D0(v22, __dst[0], (unint64_t)__dst[1]);
      }
      else
      {
        *(_OWORD *)uint64_t v22 = *(_OWORD *)__dst;
        uint64_t v23 = v25;
      }
      sub_19E246F54(a1 + 9, (const void **)v22, (uint64_t)v22);
      if (SHIBYTE(v23) < 0) {
        break;
      }
      int32x4_t v20 = __p;
      if (__p) {
        goto LABEL_34;
      }
LABEL_35:
      if (SHIBYTE(v25) < 0) {
        operator delete(__dst[0]);
      }
      unsigned int v13 = (long long *)((char *)v13 + 56);
      if (v13 == v14) {
        return a1;
      }
    }
    operator delete(v22[0]);
    int32x4_t v20 = __p;
    if (!__p) {
      goto LABEL_35;
    }
LABEL_34:
    uint64_t v27 = v20;
    operator delete(v20);
    goto LABEL_35;
  }
  return a1;
}

void sub_19E246F00(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20)
{
}

uint64_t **sub_19E246F54(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    int v7 = *((char *)a2 + 23);
    if (v7 >= 0) {
      size_t v8 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v8 = (size_t)a2[1];
    }
    if (v7 >= 0) {
      unint64_t v9 = a2;
    }
    else {
      unint64_t v9 = *a2;
    }
    while (1)
    {
      while (1)
      {
        int64_t v10 = (uint64_t **)v5;
        unsigned int v13 = (const void *)v5[4];
        uint64_t v11 = v5 + 4;
        uint64_t v12 = v13;
        int v14 = *((char *)v11 + 23);
        if (v14 >= 0) {
          size_t v15 = *((unsigned __int8 *)v11 + 23);
        }
        else {
          size_t v15 = v11[1];
        }
        if (v14 >= 0) {
          uint64_t v16 = v11;
        }
        else {
          uint64_t v16 = v12;
        }
        if (v15 >= v8) {
          size_t v17 = v8;
        }
        else {
          size_t v17 = v15;
        }
        int v18 = memcmp(v9, v16, v17);
        BOOL v19 = v8 < v15;
        if (v18) {
          BOOL v19 = v18 < 0;
        }
        if (!v19) {
          break;
        }
        uint64_t v5 = *v10;
        uint64_t v6 = v10;
        if (!*v10) {
          goto LABEL_27;
        }
      }
      int v20 = memcmp(v16, v9, v17);
      BOOL v21 = v15 < v8;
      if (v20) {
        BOOL v21 = v20 < 0;
      }
      if (!v21) {
        break;
      }
      uint64_t v5 = v10[1];
      if (!v5)
      {
        uint64_t v6 = v10 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    int64_t v10 = a1 + 1;
LABEL_27:
    uint64_t v22 = (uint64_t *)v10;
    int64_t v10 = (uint64_t **)operator new(0x38uLL);
    *((_OWORD *)v10 + 2) = *(_OWORD *)a3;
    v10[6] = *(uint64_t **)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *int64_t v10 = 0;
    v10[1] = 0;
    v10[2] = v22;
    *uint64_t v6 = (uint64_t *)v10;
    uint64_t v23 = (uint64_t *)**a1;
    uint64_t v24 = (uint64_t *)v10;
    if (v23)
    {
      *a1 = v23;
      uint64_t v24 = *v6;
    }
    sub_19E13C8A0(a1[1], v24);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v10;
}

char **sub_19E2470C8(char **a1)
{
  sub_19E15A064((uint64_t)(a1 + 9), a1[10]);
  sub_19E15A064((uint64_t)(a1 + 6), a1[7]);
  unsigned int v2 = a1[3];
  if (v2)
  {
    uint64_t v3 = a1[4];
    unsigned int v4 = a1[3];
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = (void *)*((void *)v3 - 4);
        if (v5)
        {
          *((void *)v3 - 3) = v5;
          operator delete(v5);
        }
        if (*(v3 - 33) < 0) {
          operator delete(*((void **)v3 - 7));
        }
        v3 -= 56;
      }
      while (v3 != v2);
      unsigned int v4 = a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = a1[1];
    size_t v8 = *a1;
    if (v7 != v6)
    {
      do
      {
        unint64_t v9 = (void *)*((void *)v7 - 4);
        if (v9)
        {
          *((void *)v7 - 3) = v9;
          operator delete(v9);
        }
        if (*(v7 - 33) < 0) {
          operator delete(*((void **)v7 - 7));
        }
        v7 -= 56;
      }
      while (v7 != v6);
      size_t v8 = *a1;
    }
    a1[1] = v6;
    operator delete(v8);
  }
  return a1;
}

uint64_t sub_19E2471BC(long long *a1, long long *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    for (uint64_t i = a1; i != a2; i += 3)
    {
      if (*((char *)i + 23) < 0)
      {
        sub_19E13C2D0(v11, *(void **)i, *((void *)i + 1));
        long long v8 = *(long long *)((char *)i + 24);
        int v14 = *((_DWORD *)i + 10);
        long long v13 = v8;
        if ((SHIBYTE(v12) & 0x80000000) == 0)
        {
LABEL_6:
          *(_OWORD *)__p = *(_OWORD *)v11;
          uint64_t v16 = v12;
          goto LABEL_9;
        }
      }
      else
      {
        long long v6 = *i;
        uint64_t v12 = *((void *)i + 2);
        *(_OWORD *)uint64_t v11 = v6;
        long long v7 = *(long long *)((char *)i + 24);
        int v14 = *((_DWORD *)i + 10);
        long long v13 = v7;
        if ((SHIBYTE(v12) & 0x80000000) == 0) {
          goto LABEL_6;
        }
      }
      sub_19E13C2D0(__p, v11[0], (unint64_t)v11[1]);
LABEL_9:
      int v18 = v14;
      long long v17 = v13;
      int v9 = v14;
      if (SHIBYTE(v16) < 0)
      {
        operator delete(__p[0]);
        if (SHIBYTE(v12) < 0) {
LABEL_13:
        }
          operator delete(v11[0]);
      }
      else if (SHIBYTE(v12) < 0)
      {
        goto LABEL_13;
      }
      a3 = (v9 + a3);
    }
  }
  return a3;
}

void sub_19E2472E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E247300(long long *a1, long long *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    for (uint64_t i = a1; i != a2; uint64_t i = (long long *)((char *)i + 40))
    {
      if (*((char *)i + 23) < 0)
      {
        sub_19E13C2D0(v11, *(void **)i, *((void *)i + 1));
        uint64_t v8 = *((void *)i + 3);
        int v14 = *((_DWORD *)i + 8);
        uint64_t v13 = v8;
        if ((SHIBYTE(v12) & 0x80000000) == 0)
        {
LABEL_6:
          *(_OWORD *)__p = *(_OWORD *)v11;
          uint64_t v16 = v12;
          goto LABEL_9;
        }
      }
      else
      {
        long long v6 = *i;
        uint64_t v12 = *((void *)i + 2);
        *(_OWORD *)uint64_t v11 = v6;
        uint64_t v7 = *((void *)i + 3);
        int v14 = *((_DWORD *)i + 8);
        uint64_t v13 = v7;
        if ((SHIBYTE(v12) & 0x80000000) == 0) {
          goto LABEL_6;
        }
      }
      sub_19E13C2D0(__p, v11[0], (unint64_t)v11[1]);
LABEL_9:
      int v18 = v14;
      uint64_t v17 = v13;
      int v9 = v14;
      if (SHIBYTE(v16) < 0)
      {
        operator delete(__p[0]);
        if (SHIBYTE(v12) < 0) {
LABEL_13:
        }
          operator delete(v11[0]);
      }
      else if (SHIBYTE(v12) < 0)
      {
        goto LABEL_13;
      }
      a3 = (v9 + a3);
    }
  }
  return a3;
}

void sub_19E247428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E247444(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0x492492492492493) {
      sub_19E13D694();
    }
    uint64_t v8 = (char *)operator new(56 * a4);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[56 * a4];
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        sub_19E247604(a1 + 16, &v8[v9], (long long *)(a2 + v9));
        v9 += 56;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    a1[1] = v8;
  }
}

void sub_19E24751C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void ***sub_19E24755C(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    unsigned int v2 = *result;
    uint64_t v3 = (char *)**result;
    if (v3)
    {
      unsigned int v4 = (char *)v2[1];
      uint64_t v5 = **result;
      if (v4 != v3)
      {
        do
        {
          long long v6 = (void *)*((void *)v4 - 4);
          if (v6)
          {
            *((void *)v4 - 3) = v6;
            operator delete(v6);
          }
          if (*(v4 - 33) < 0) {
            operator delete(*((void **)v4 - 7));
          }
          v4 -= 56;
        }
        while (v4 != v3);
        uint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void sub_19E247604(int a1, void *__dst, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    sub_19E13C2D0(__dst, *(void **)a3, *((void *)a3 + 1));
    __dst[3] = 0;
    __dst[4] = 0;
    __dst[5] = 0;
    uint64_t v7 = (unsigned char *)*((void *)a3 + 3);
    uint64_t v9 = (unsigned char *)*((void *)a3 + 4);
    int64_t v8 = v9 - v7;
    if (v9 == v7) {
      goto LABEL_7;
    }
  }
  else
  {
    long long v5 = *a3;
    __dst[2] = *((void *)a3 + 2);
    *(_OWORD *)__dst = v5;
    __dst[3] = 0;
    __dst[4] = 0;
    __dst[5] = 0;
    uint64_t v7 = (unsigned char *)*((void *)a3 + 3);
    long long v6 = (unsigned char *)*((void *)a3 + 4);
    int64_t v8 = v6 - v7;
    if (v6 == v7) {
      goto LABEL_7;
    }
  }
  if (v8 < 0) {
    sub_19E13D694();
  }
  int64_t v10 = (char *)operator new(v8);
  __dst[3] = v10;
  __dst[4] = v10;
  uint64_t v11 = &v10[8 * (v8 >> 3)];
  __dst[5] = v11;
  memcpy(v10, v7, v8);
  __dst[4] = v11;
LABEL_7:
  *((_DWORD *)__dst + 12) = *((_DWORD *)a3 + 12);
}

void sub_19E2476D0(_Unwind_Exception *a1)
{
  unsigned int v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  sub_19E32EEAC((void **)v1);
  _Unwind_Resume(a1);
}

void sub_19E2476F4(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0x492492492492493) {
      sub_19E13D694();
    }
    int64_t v8 = (char *)operator new(56 * a4);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[56 * a4];
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        sub_19E24780C(a1 + 16, &v8[v9], (long long *)(a2 + v9));
        v9 += 56;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    a1[1] = v8;
  }
}

void sub_19E2477CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_19E24780C(int a1, void *__dst, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    sub_19E13C2D0(__dst, *(void **)a3, *((void *)a3 + 1));
    __dst[3] = 0;
    __dst[4] = 0;
    __dst[5] = 0;
    uint64_t v7 = (unsigned char *)*((void *)a3 + 3);
    uint64_t v9 = (unsigned char *)*((void *)a3 + 4);
    int64_t v8 = v9 - v7;
    if (v9 == v7) {
      goto LABEL_7;
    }
  }
  else
  {
    long long v5 = *a3;
    __dst[2] = *((void *)a3 + 2);
    *(_OWORD *)__dst = v5;
    __dst[3] = 0;
    __dst[4] = 0;
    __dst[5] = 0;
    uint64_t v7 = (unsigned char *)*((void *)a3 + 3);
    long long v6 = (unsigned char *)*((void *)a3 + 4);
    int64_t v8 = v6 - v7;
    if (v6 == v7) {
      goto LABEL_7;
    }
  }
  if (v8 < 0) {
    sub_19E13D694();
  }
  int64_t v10 = (char *)operator new(v8);
  __dst[3] = v10;
  __dst[4] = v10;
  uint64_t v11 = &v10[4 * (v8 >> 2)];
  __dst[5] = v11;
  memcpy(v10, v7, v8);
  __dst[4] = v11;
LABEL_7:
  *((_DWORD *)__dst + 12) = *((_DWORD *)a3 + 12);
}

void sub_19E2478D8(_Unwind_Exception *a1)
{
  unsigned int v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  sub_19E32EEAC((void **)v1);
  _Unwind_Resume(a1);
}

void *sub_19E2478FC(void **a1, long long *a2, uint64_t a3)
{
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492) {
    sub_19E13D694();
  }
  if (0xDB6DB6DB6DB6DB6ELL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v5) {
    unint64_t v5 = 0xDB6DB6DB6DB6DB6ELL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3)) >= 0x249249249249249) {
    unint64_t v8 = 0x492492492492492;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8)
  {
    if (v8 > 0x492492492492492) {
      sub_19E13C418();
    }
    uint64_t v9 = (char *)operator new(56 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v17 = &v9[56 * v4];
  int v18 = &v9[56 * v8];
  sub_19E247B0C(a1 + 16, v17, a2, a3);
  int64_t v10 = v17 + 56;
  uint64_t v12 = (char *)*a1;
  uint64_t v11 = (char *)a1[1];
  if (v11 == *a1)
  {
    *a1 = v17;
    a1[1] = v10;
    a1[2] = v18;
  }
  else
  {
    uint64_t v13 = 0;
    do
    {
      sub_19E247D38(a1 + 16, &v17[v13 - 56], (long long *)&v11[v13 - 56]);
      v13 -= 56;
    }
    while (&v11[v13] != v12);
    int v14 = (char *)*a1;
    uint64_t v11 = (char *)a1[1];
    int64_t v10 = v17 + 56;
    *a1 = &v17[v13];
    a1[1] = v17 + 56;
    a1[2] = v18;
    if (v11 != v14)
    {
      do
      {
        size_t v15 = (void *)*((void *)v11 - 4);
        if (v15)
        {
          *((void *)v11 - 3) = v15;
          operator delete(v15);
        }
        if (*(v11 - 33) < 0) {
          operator delete(*((void **)v11 - 7));
        }
        v11 -= 56;
      }
      while (v11 != v14);
      uint64_t v11 = v14;
    }
  }
  if (v11) {
    operator delete(v11);
  }
  return v10;
}

void sub_19E247AD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E247CC0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E247B0C(int a1, void *__dst, long long *a3, uint64_t a4)
{
  __p = 0;
  uint64_t v13 = 0;
  int v14 = 0;
  unint64_t v8 = *(const void **)a4;
  uint64_t v7 = *(void *)(a4 + 8);
  int64_t v9 = v7 - *(void *)a4;
  if (v7 != *(void *)a4)
  {
    if (v9 < 0) {
      sub_19E13D694();
    }
    int64_t v10 = (char *)operator new(v7 - *(void *)a4);
    uint64_t v11 = &v10[8 * (v9 >> 3)];
    __p = v10;
    int v14 = v11;
    memcpy(v10, v8, v9);
    uint64_t v13 = v11;
  }
  int v15 = *(_DWORD *)(a4 + 24);
  sub_19E247BDC(__dst, a3, (uint64_t)&__p);
  if (__p)
  {
    uint64_t v13 = __p;
    operator delete(__p);
  }
}

void sub_19E247BC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_19E247BDC(void *__dst, long long *a2, uint64_t a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_19E13C2D0(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  __dst[3] = 0;
  __dst[4] = 0;
  __dst[5] = 0;
  uint64_t v7 = *(const void **)a3;
  uint64_t v6 = *(void *)(a3 + 8);
  int64_t v8 = v6 - *(void *)a3;
  if (v6 != *(void *)a3)
  {
    if (v8 < 0) {
      sub_19E13D694();
    }
    int64_t v9 = (char *)operator new(v6 - *(void *)a3);
    __dst[3] = v9;
    __dst[4] = v9;
    int64_t v10 = &v9[8 * (v8 >> 3)];
    __dst[5] = v10;
    memcpy(v9, v7, v8);
    __dst[4] = v10;
  }
  *((_DWORD *)__dst + 12) = *(_DWORD *)(a3 + 24);
  return __dst;
}

void sub_19E247C9C(void *a1)
{
  uint64_t v4 = *v2;
  if (!*v2) {
    sub_19E13A9BC(a1);
  }
  *(void *)(v1 + 32) = v4;
  operator delete(v4);
  sub_19E13A9BC(a1);
}

uint64_t sub_19E247CC0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 56;
    uint64_t v4 = *(void **)(i - 32);
    if (v4)
    {
      *(void *)(i - 24) = v4;
      operator delete(v4);
    }
    if (*(char *)(i - 33) < 0) {
      operator delete(*(void **)(i - 56));
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_19E247D38(int a1, void *__dst, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    sub_19E13C2D0(__dst, *(void **)a3, *((void *)a3 + 1));
    __dst[3] = 0;
    __dst[4] = 0;
    __dst[5] = 0;
    uint64_t v7 = (unsigned char *)*((void *)a3 + 3);
    int64_t v9 = (unsigned char *)*((void *)a3 + 4);
    int64_t v8 = v9 - v7;
    if (v9 == v7) {
      goto LABEL_7;
    }
  }
  else
  {
    long long v5 = *a3;
    __dst[2] = *((void *)a3 + 2);
    *(_OWORD *)__dst = v5;
    __dst[3] = 0;
    __dst[4] = 0;
    __dst[5] = 0;
    uint64_t v7 = (unsigned char *)*((void *)a3 + 3);
    uint64_t v6 = (unsigned char *)*((void *)a3 + 4);
    int64_t v8 = v6 - v7;
    if (v6 == v7) {
      goto LABEL_7;
    }
  }
  if (v8 < 0) {
    sub_19E13D694();
  }
  int64_t v10 = (char *)operator new(v8);
  __dst[3] = v10;
  __dst[4] = v10;
  uint64_t v11 = &v10[8 * (v8 >> 3)];
  __dst[5] = v11;
  memcpy(v10, v7, v8);
  __dst[4] = v11;
LABEL_7:
  *((_DWORD *)__dst + 12) = *((_DWORD *)a3 + 12);
}

void sub_19E247E04(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  sub_19E32EEAC((void **)v1);
  _Unwind_Resume(a1);
}

void *sub_19E247E28(void **a1, long long *a2, uint64_t a3)
{
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492) {
    sub_19E13D694();
  }
  if (0xDB6DB6DB6DB6DB6ELL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v5) {
    unint64_t v5 = 0xDB6DB6DB6DB6DB6ELL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3)) >= 0x249249249249249) {
    unint64_t v8 = 0x492492492492492;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8)
  {
    if (v8 > 0x492492492492492) {
      sub_19E13C418();
    }
    int64_t v9 = (char *)operator new(56 * v8);
  }
  else
  {
    int64_t v9 = 0;
  }
  uint64_t v17 = &v9[56 * v4];
  int v18 = &v9[56 * v8];
  sub_19E248038(a1 + 16, v17, a2, a3);
  int64_t v10 = v17 + 56;
  uint64_t v12 = (char *)*a1;
  uint64_t v11 = (char *)a1[1];
  if (v11 == *a1)
  {
    *a1 = v17;
    a1[1] = v10;
    a1[2] = v18;
  }
  else
  {
    uint64_t v13 = 0;
    do
    {
      sub_19E2481EC(a1 + 16, &v17[v13 - 56], (long long *)&v11[v13 - 56]);
      v13 -= 56;
    }
    while (&v11[v13] != v12);
    int v14 = (char *)*a1;
    uint64_t v11 = (char *)a1[1];
    int64_t v10 = v17 + 56;
    *a1 = &v17[v13];
    a1[1] = v17 + 56;
    a1[2] = v18;
    if (v11 != v14)
    {
      do
      {
        int v15 = (void *)*((void *)v11 - 4);
        if (v15)
        {
          *((void *)v11 - 3) = v15;
          operator delete(v15);
        }
        if (*(v11 - 33) < 0) {
          operator delete(*((void **)v11 - 7));
        }
        v11 -= 56;
      }
      while (v11 != v14);
      uint64_t v11 = v14;
    }
  }
  if (v11) {
    operator delete(v11);
  }
  return v10;
}

void sub_19E247FFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E247CC0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E248038(int a1, void *__dst, long long *a3, uint64_t a4)
{
  __p = 0;
  uint64_t v13 = 0;
  int v14 = 0;
  unint64_t v8 = *(const void **)a4;
  uint64_t v7 = *(void *)(a4 + 8);
  int64_t v9 = v7 - *(void *)a4;
  if (v7 != *(void *)a4)
  {
    if (v9 < 0) {
      sub_19E13D694();
    }
    int64_t v10 = (char *)operator new(v7 - *(void *)a4);
    uint64_t v11 = &v10[4 * (v9 >> 2)];
    __p = v10;
    int v14 = v11;
    memcpy(v10, v8, v9);
    uint64_t v13 = v11;
  }
  int v15 = *(_DWORD *)(a4 + 24);
  sub_19E248108(__dst, a3, (uint64_t)&__p);
  if (__p)
  {
    uint64_t v13 = __p;
    operator delete(__p);
  }
}

void sub_19E2480EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_19E248108(void *__dst, long long *a2, uint64_t a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_19E13C2D0(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  __dst[3] = 0;
  __dst[4] = 0;
  __dst[5] = 0;
  uint64_t v7 = *(const void **)a3;
  uint64_t v6 = *(void *)(a3 + 8);
  int64_t v8 = v6 - *(void *)a3;
  if (v6 != *(void *)a3)
  {
    if (v8 < 0) {
      sub_19E13D694();
    }
    int64_t v9 = (char *)operator new(v6 - *(void *)a3);
    __dst[3] = v9;
    __dst[4] = v9;
    int64_t v10 = &v9[4 * (v8 >> 2)];
    __dst[5] = v10;
    memcpy(v9, v7, v8);
    __dst[4] = v10;
  }
  *((_DWORD *)__dst + 12) = *(_DWORD *)(a3 + 24);
  return __dst;
}

void sub_19E2481C8(void *a1)
{
  uint64_t v4 = *v2;
  if (!*v2) {
    sub_19E13A9BC(a1);
  }
  *(void *)(v1 + 32) = v4;
  operator delete(v4);
  sub_19E13A9BC(a1);
}

void sub_19E2481EC(int a1, void *__dst, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    sub_19E13C2D0(__dst, *(void **)a3, *((void *)a3 + 1));
    __dst[3] = 0;
    __dst[4] = 0;
    __dst[5] = 0;
    uint64_t v7 = (unsigned char *)*((void *)a3 + 3);
    int64_t v9 = (unsigned char *)*((void *)a3 + 4);
    int64_t v8 = v9 - v7;
    if (v9 == v7) {
      goto LABEL_7;
    }
  }
  else
  {
    long long v5 = *a3;
    __dst[2] = *((void *)a3 + 2);
    *(_OWORD *)__dst = v5;
    __dst[3] = 0;
    __dst[4] = 0;
    __dst[5] = 0;
    uint64_t v7 = (unsigned char *)*((void *)a3 + 3);
    uint64_t v6 = (unsigned char *)*((void *)a3 + 4);
    int64_t v8 = v6 - v7;
    if (v6 == v7) {
      goto LABEL_7;
    }
  }
  if (v8 < 0) {
    sub_19E13D694();
  }
  int64_t v10 = (char *)operator new(v8);
  __dst[3] = v10;
  __dst[4] = v10;
  uint64_t v11 = &v10[4 * (v8 >> 2)];
  __dst[5] = v11;
  memcpy(v10, v7, v8);
  __dst[4] = v11;
LABEL_7:
  *((_DWORD *)__dst + 12) = *((_DWORD *)a3 + 12);
}

void sub_19E2482B8(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  sub_19E32EEAC((void **)v1);
  _Unwind_Resume(a1);
}

void sub_19E2482DC(uint64_t a1, unint64_t a2)
{
  long long v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      uint64_t v6 = &v5[8 * a2];
    }
    *(void *)(a1 + 8) = v6;
  }
  else
  {
    uint64_t v7 = *(char **)a1;
    uint64_t v8 = (uint64_t)&v5[-*(void *)a1];
    uint64_t v9 = v8 >> 3;
    unint64_t v10 = (v8 >> 3) + a2;
    if (v10 >> 61) {
      sub_19E13D694();
    }
    uint64_t v11 = v4 - (void)v7;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 61) {
        sub_19E13C418();
      }
      uint64_t v13 = operator new(8 * v12);
    }
    else
    {
      uint64_t v13 = 0;
    }
    int v14 = &v13[8 * v9];
    size_t v15 = 8 * a2;
    uint64_t v16 = &v13[8 * v12];
    bzero(v14, v15);
    uint64_t v17 = &v14[v15];
    if (v5 != v7)
    {
      unint64_t v18 = v5 - v7 - 8;
      if (v18 < 0x58) {
        goto LABEL_31;
      }
      if ((unint64_t)(v5 - v13 - v8) < 0x20) {
        goto LABEL_31;
      }
      uint64_t v19 = (v18 >> 3) + 1;
      uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v6 = &v5[-v20];
      v14 -= v20;
      BOOL v21 = &v13[8 * v9 - 16];
      uint64_t v22 = v5 - 16;
      uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *BOOL v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_31:
        do
        {
          uint64_t v25 = *((void *)v6 - 1);
          v6 -= 8;
          *((void *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v17;
    *(void *)(a1 + 16) = v16;
    if (v7)
    {
      operator delete(v7);
    }
  }
}

void sub_19E24848C(double **a1)
{
  uint64_t v1 = (float64x2_t *)*a1;
  unint64_t v2 = (unint64_t)a1[1];
  if (*a1 != (double *)v2)
  {
    uint64_t v4 = v2 - (void)v1;
    if (v2 - (unint64_t)v1 >= 9)
    {
      double v5 = 0.0;
      uint64_t v6 = *a1;
      if ((unint64_t)(v4 - 8) < 0x18) {
        goto LABEL_34;
      }
      unint64_t v7 = ((unint64_t)(v4 - 8) >> 3) + 1;
      uint64_t v6 = &v1->f64[v7 & 0x3FFFFFFFFFFFFFFCLL];
      uint64_t v8 = v1 + 1;
      float64x2_t v9 = 0uLL;
      uint64_t v10 = v7 & 0x3FFFFFFFFFFFFFFCLL;
      float64x2_t v11 = 0uLL;
      do
      {
        float64x2_t v9 = vaddq_f64(v8[-1], v9);
        float64x2_t v11 = vaddq_f64(*v8, v11);
        v8 += 2;
        v10 -= 4;
      }
      while (v10);
      double v5 = vaddvq_f64(vaddq_f64(v11, v9));
      if (v7 != (v7 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          double v12 = *v6++;
          double v5 = v12 + v5;
        }
        while (v6 != (double *)v2);
      }
      if ((unint64_t)v1 < v2)
      {
        uint64_t v13 = &v1->f64[1];
        if (v2 > (unint64_t)&v1->f64[1]) {
          uint64_t v13 = a1[1];
        }
        unint64_t v14 = (unint64_t)v13 + ~(unint64_t)v1;
        size_t v15 = *a1;
        if (v14 < 0x18) {
          goto LABEL_15;
        }
        uint64_t v16 = (v14 >> 3) + 1;
        size_t v15 = &v1->f64[v16 & 0x3FFFFFFFFFFFFFFCLL];
        __asm { FMOV            V2.2D, #1.0 }
        float64x2_t v22 = vdivq_f64(_Q2, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v5, 0));
        uint64_t v23 = v1 + 1;
        uint64_t v24 = v16 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          float64x2_t v25 = vmulq_f64(*v23, v22);
          v23[-1] = vmulq_f64(v23[-1], v22);
          *uint64_t v23 = v25;
          v23 += 2;
          v24 -= 4;
        }
        while (v24);
        if (v16 != (v16 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_15:
          double v26 = 1.0 / v5;
          do
          {
            double *v15 = *v15 * v26;
            ++v15;
          }
          while ((unint64_t)v15 < v2);
        }
      }
      unint64_t v27 = (v4 >> 3) - 1;
      if (v4 >> 3 == 1)
      {
        uint64_t v30 = 0;
        int v29 = 0;
        signed int v31 = (double *)(v2 - 8);
        if (v1 == (float64x2_t *)(v2 - 8))
        {
LABEL_28:
          *a1 = v29;
          a1[1] = (double *)v27;
          a1[2] = (double *)v30;
          if (v1) {
            operator delete(v1);
          }
          return;
        }
      }
      else
      {
        if (v27 >> 61) {
          sub_19E13D694();
        }
        size_t v28 = v27;
        int v29 = (double *)operator new(8 * v27);
        uint64_t v30 = (uint64_t)v29 + v4 - 8;
        bzero(v29, v28 * 8);
        unint64_t v27 = (unint64_t)&v29[v28];
        signed int v31 = (double *)(v2 - 8);
        if (v1 == (float64x2_t *)(v2 - 8)) {
          goto LABEL_28;
        }
      }
      uint64_t v32 = &v1->f64[1];
      double v33 = v1->f64[0];
      double *v29 = v1->f64[0];
      if (&v1->f64[1] != v31)
      {
        uint64_t v34 = v29 + 1;
        do
        {
          double v35 = *v32++;
          double v33 = v35 + v33;
          *v34++ = v33;
        }
        while (v32 != v31);
      }
      goto LABEL_28;
    }
    a1[1] = (double *)v1;
    sub_19E2486D0((uint64_t)a1);
  }
}

void sub_19E2486B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2486D0(uint64_t a1)
{
  uint64_t v1 = *(unsigned char **)(a1 + 8);
  unint64_t v2 = *(unsigned char **)a1;
  uint64_t v3 = (uint64_t)&v1[-*(void *)a1];
  uint64_t v4 = v3 >> 3;
  if (v3 >> 3 >= (unint64_t)((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3)) {
    return;
  }
  int64_t v6 = v1 - v2;
  if (v1 == v2)
  {
    uint64_t v8 = 8 * v4;
    uint64_t v9 = 8 * v4;
    goto LABEL_12;
  }
  if (v3 < 0) {
    sub_19E13C418();
  }
  unint64_t v7 = (char *)operator new((size_t)&v1[-*(void *)a1]);
  uint64_t v8 = (uint64_t)&v7[8 * v4];
  if ((unint64_t)(v6 - 8) < 0x58)
  {
    uint64_t v9 = (uint64_t)&v7[8 * v4];
    do
    {
LABEL_11:
      uint64_t v17 = *((void *)v1 - 1);
      v1 -= 8;
      *(void *)(v9 - 8) = v17;
      v9 -= 8;
    }
    while (v1 != v2);
    goto LABEL_12;
  }
  uint64_t v9 = (uint64_t)&v7[8 * v4];
  if ((unint64_t)(&v1[-v3] - v7) < 0x20) {
    goto LABEL_11;
  }
  unint64_t v10 = ((unint64_t)(v6 - 8) >> 3) + 1;
  uint64_t v11 = 8 * (v10 & 0x3FFFFFFFFFFFFFFCLL);
  double v12 = &v1[-v11];
  uint64_t v9 = v8 - v11;
  uint64_t v13 = &v7[8 * v4 - 16];
  unint64_t v14 = (long long *)(v1 - 16);
  uint64_t v15 = v10 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v16 = *v14;
    *((_OWORD *)v13 - 1) = *(v14 - 1);
    *(_OWORD *)uint64_t v13 = v16;
    v13 -= 32;
    v14 -= 2;
    v15 -= 4;
  }
  while (v15);
  uint64_t v1 = v12;
  if (v10 != (v10 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_11;
  }
LABEL_12:
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v8;
  if (v2)
  {
    operator delete(v2);
  }
}

double sub_19E24880C(uint64_t a1, uint64_t a2, double *a3)
{
  if (*(unsigned char *)(a1 + 24))
  {
    *(unsigned char *)(a1 + 24) = 0;
    double v5 = *(double *)(a1 + 16);
  }
  else
  {
    unint64_t v6 = *(void *)(a2 + 2496);
    do
    {
      unint64_t v7 = (v6 + 1) % 0x270;
      uint64_t v8 = 4 * v6;
      unsigned int v9 = *(_DWORD *)(a2 + 4 * ((v6 + 397) % 0x270)) ^ ((*(_DWORD *)(a2 + 4 * v7) & 0x7FFFFFFE | *(_DWORD *)(a2 + 4 * v6) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a2 + 4 * v7) << 31) >> 31) & 0x9908B0DF;
      *(_DWORD *)(a2 + v8) = v9;
      unsigned int v10 = ((v9 ^ (v9 >> 11)) << 7) & 0x9D2C5680 ^ v9 ^ (v9 >> 11);
      if (v7 == 623) {
        unint64_t v11 = 0;
      }
      else {
        unint64_t v11 = v7 + 1;
      }
      unsigned int v12 = (v10 << 15) & 0xEFC60000 ^ v10;
      if (v7 >= 0xE3) {
        uint64_t v13 = -227;
      }
      else {
        uint64_t v13 = 397;
      }
      double v14 = (double)(v12 ^ (v12 >> 18));
      unsigned int v15 = *(_DWORD *)(a2 + 4 * (v13 + v7)) ^ ((*(_DWORD *)(a2 + 4 * v11) & 0x7FFFFFFE | *(_DWORD *)(a2 + 4 * v7) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a2 + 4 * v11) << 31) >> 31) & 0x9908B0DF;
      *(_DWORD *)(a2 + 4 * v7) = v15;
      unsigned int v16 = ((v15 ^ (v15 >> 11)) << 7) & 0x9D2C5680 ^ v15 ^ (v15 >> 11);
      unint64_t v17 = (v11 + 1) % 0x270;
      uint64_t v18 = 4 * v17;
      double v19 = (double)((v16 << 15) & 0xEFC60000 ^ v16 ^ (((v16 << 15) & 0xEFC60000 ^ v16) >> 18));
      unsigned int v20 = *(_DWORD *)(a2 + 4 * ((v11 + 397) % 0x270)) ^ ((*(_DWORD *)(a2 + 4 * v17) & 0x7FFFFFFE | *(_DWORD *)(a2 + 4 * v11) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a2 + 4 * v17) << 31) >> 31) & 0x9908B0DF;
      *(_DWORD *)(a2 + 4 * v11) = v20;
      unsigned int v21 = ((v20 ^ (v20 >> 11)) << 7) & 0x9D2C5680 ^ v20 ^ (v20 >> 11);
      if (v17 == 623) {
        unint64_t v6 = 0;
      }
      else {
        unint64_t v6 = v17 + 1;
      }
      unsigned int v22 = (v21 << 15) & 0xEFC60000 ^ v21 ^ (((v21 << 15) & 0xEFC60000 ^ v21) >> 18);
      if (v17 >= 0xE3) {
        uint64_t v23 = -227;
      }
      else {
        uint64_t v23 = 397;
      }
      double v24 = v14 + v19 * 4294967300.0;
      double v25 = (double)v22;
      unsigned int v26 = *(_DWORD *)(a2 + 4 * (v23 + v17)) ^ ((*(_DWORD *)(a2 + 4 * v6) & 0x7FFFFFFE | *(_DWORD *)(a2 + 4 * v17) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a2 + 4 * v6) << 31) >> 31) & 0x9908B0DF;
      unsigned int v27 = ((v26 ^ (v26 >> 11)) << 7) & 0x9D2C5680 ^ v26 ^ (v26 >> 11);
      double v28 = v24 * 1.08420217e-19 + -1.0;
      double v29 = (v25 + (double)((v27 << 15) & 0xEFC60000 ^ v27 ^ (((v27 << 15) & 0xEFC60000 ^ v27) >> 18)) * 4294967300.0)
          * 1.08420217e-19
          + -1.0;
      double v30 = v28 * v28 + v29 * v29;
      *(_DWORD *)(a2 + v18) = v26;
    }
    while (v30 > 1.0 || v30 == 0.0);
    *(void *)(a2 + 2496) = v6;
    double v31 = sqrt(log(v28 * v28 + v29 * v29) * -2.0 / v30);
    *(double *)(a1 + 16) = v31 * v29;
    *(unsigned char *)(a1 + 24) = 1;
    double v5 = v31 * v28;
  }
  return *a3 + a3[1] * v5;
}

void *sub_19E248AB8(void *a1, unint64_t a2, int a3, uint64_t a4, int a5)
{
  unint64_t v6 = HIDWORD(a2);
  int v7 = HIDWORD(a4) * a5 + a4;
  int v8 = a2 + HIDWORD(a2) * a3;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (v8 != v7)
  {
    int v9 = v7 - v8;
    uint64_t v10 = -1;
    do
    {
      uint64_t v11 = v10++;
      v9 -= HIDWORD(a2);
    }
    while (v9);
    unint64_t v12 = v11 + 2;
    if (v11 != -2)
    {
      if (v12 >> 62) {
        sub_19E13D694();
      }
      uint64_t v13 = operator new(4 * v12);
      *a1 = v13;
      a1[1] = v13;
      a1[2] = &v13[v10 + 1];
      do
      {
        *v13++ = v8;
        v8 += v6;
      }
      while (v7 != v8);
      a1[1] = v13;
    }
  }
  return a1;
}

void sub_19E248B70(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E248B8C(uint64_t *a1)
{
  unint64_t v1 = a1[4];
  if (v1)
  {
    uint64_t v2 = *a1;
    unint64_t v3 = a1[5];
    unint64_t v4 = a1[2];
    unint64_t v5 = *(void *)(*a1 + 2496);
    if (v4 >= 0x40)
    {
      for (uint64_t i = 0; i != v1; ++i)
      {
        do
        {
          uint64_t v16 = 4 * v5;
          unint64_t v17 = v5 + 397;
          unint64_t v5 = (v5 + 1) % 0x270;
          unsigned int v18 = *(_DWORD *)(v2 + 4 * (v17 % 0x270)) ^ ((*(_DWORD *)(v2 + 4 * v5) & 0x7FFFFFFE | *(_DWORD *)(v2 + v16) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(v2 + 4 * v5) << 31) >> 31) & 0x9908B0DF;
          *(_DWORD *)(v2 + v16) = v18;
          unsigned int v19 = ((v18 ^ (v18 >> 11)) << 7) & 0x9D2C5680 ^ v18 ^ (v18 >> 11);
          unint64_t v20 = (v19 << 15) & 0xEFC60000 ^ v19 ^ (((v19 << 15) & 0xEFC60000 ^ v19) >> 18);
        }
        while (v3 <= v20);
      }
      uint64_t v6 = a1[7] & v20;
    }
    else
    {
      uint64_t v6 = 0;
      for (uint64_t j = 0; j != v1; ++j)
      {
        do
        {
          uint64_t v8 = 4 * v5;
          unint64_t v9 = v5 + 397;
          unint64_t v5 = (v5 + 1) % 0x270;
          unsigned int v10 = *(_DWORD *)(v2 + 4 * (v9 % 0x270)) ^ ((*(_DWORD *)(v2 + 4 * v5) & 0x7FFFFFFE | *(_DWORD *)(v2 + v8) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(v2 + 4 * v5) << 31) >> 31) & 0x9908B0DF;
          *(_DWORD *)(v2 + v8) = v10;
          unsigned int v11 = ((v10 ^ (v10 >> 11)) << 7) & 0x9D2C5680 ^ v10 ^ (v10 >> 11);
          unint64_t v12 = (v11 << 15) & 0xEFC60000 ^ v11 ^ (((v11 << 15) & 0xEFC60000 ^ v11) >> 18);
        }
        while (v3 <= v12);
        uint64_t v6 = (v6 << v4) + (a1[7] & v12);
      }
    }
    *(void *)(v2 + 2496) = v5;
    unint64_t v13 = a1[3];
    if (v1 < v13) {
      goto LABEL_14;
    }
    return v6;
  }
  uint64_t v6 = 0;
  unint64_t v13 = a1[3];
  if (!v13) {
    return v6;
  }
LABEL_14:
  uint64_t v21 = *a1;
  unint64_t v22 = a1[6];
  unint64_t v23 = a1[2];
  unint64_t v24 = *(void *)(*a1 + 2496);
  if (v23 >= 0x3F)
  {
    do
    {
      do
      {
        uint64_t v31 = 4 * v24;
        unint64_t v32 = v24 + 397;
        unint64_t v24 = (v24 + 1) % 0x270;
        unsigned int v33 = *(_DWORD *)(v21 + 4 * (v32 % 0x270)) ^ ((*(_DWORD *)(v21 + 4 * v24) & 0x7FFFFFFE | *(_DWORD *)(v21 + v31) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(v21 + 4 * v24) << 31) >> 31) & 0x9908B0DF;
        *(_DWORD *)(v21 + v31) = v33;
        unsigned int v34 = ((v33 ^ (v33 >> 11)) << 7) & 0x9D2C5680 ^ v33 ^ (v33 >> 11);
        unint64_t v35 = (v34 << 15) & 0xEFC60000 ^ v34 ^ (((v34 << 15) & 0xEFC60000 ^ v34) >> 18);
      }
      while (v22 <= v35);
      ++v1;
    }
    while (v1 != v13);
    uint64_t v36 = *((_DWORD *)a1 + 15) & v35;
    *(void *)(v21 + 2496) = v24;
    return v36;
  }
  else
  {
    char v25 = v23 + 1;
    do
    {
      do
      {
        uint64_t v26 = 4 * v24;
        unint64_t v27 = v24 + 397;
        unint64_t v24 = (v24 + 1) % 0x270;
        unsigned int v28 = *(_DWORD *)(v21 + 4 * (v27 % 0x270)) ^ ((*(_DWORD *)(v21 + 4 * v24) & 0x7FFFFFFE | *(_DWORD *)(v21 + v26) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(v21 + 4 * v24) << 31) >> 31) & 0x9908B0DF;
        *(_DWORD *)(v21 + v26) = v28;
        unsigned int v29 = ((v28 ^ (v28 >> 11)) << 7) & 0x9D2C5680 ^ v28 ^ (v28 >> 11);
        unint64_t v30 = (v29 << 15) & 0xEFC60000 ^ v29 ^ (((v29 << 15) & 0xEFC60000 ^ v29) >> 18);
      }
      while (v22 <= v30);
      uint64_t v6 = (v6 << v25) + (*((_DWORD *)a1 + 15) & v30);
      ++v1;
    }
    while (v1 != v13);
    *(void *)(v21 + 2496) = v24;
    return v6;
  }
}

uint64_t sub_19E248EBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = 0;
  *(void *)(a1 + 16) = 0;
  int v7 = *(const void **)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  int64_t v8 = v6 - *(void *)a2;
  if (v6 != *(void *)a2)
  {
    if (v8 < 0) {
      sub_19E13D694();
    }
    unint64_t v9 = (char *)operator new(v6 - *(void *)a2);
    *(void *)a1 = v9;
    *(void *)(a1 + 8) = v9;
    unsigned int v10 = &v9[8 * (v8 >> 3)];
    *(void *)(a1 + 16) = v10;
    memcpy(v9, v7, v8);
    *(void *)(a1 + 8) = v10;
  }
  int v11 = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 24) = v11;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 48) = 0;
  unint64_t v13 = *(const void **)a3;
  uint64_t v12 = *(void *)(a3 + 8);
  int64_t v14 = v12 - *(void *)a3;
  if (v12 != *(void *)a3)
  {
    if (v14 < 0) {
      sub_19E13D694();
    }
    unsigned int v15 = (char *)operator new(v12 - *(void *)a3);
    *(void *)(a1 + 32) = v15;
    *(void *)(a1 + 40) = v15;
    uint64_t v16 = &v15[8 * (v14 >> 3)];
    *(void *)(a1 + 48) = v16;
    memcpy(v15, v13, v14);
    *(void *)(a1 + 40) = v16;
  }
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a3 + 24);
  return a1;
}

void sub_19E248FB4(void *a1)
{
  unint64_t v4 = *v1;
  if (*v1)
  {
    *uint64_t v2 = v4;
    operator delete(v4);
  }
  sub_19E13A9BC(a1);
}

uint64_t sub_19E248FE0(uint64_t a1, int a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0;
  if (a2)
  {
    if (a2 < 0) {
      sub_19E13D694();
    }
    size_t v4 = 8 * a2;
    unint64_t v5 = (char *)operator new(v4);
    bzero(v5, 8 * a2);
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = &v5[v4];
    *(void *)(a1 + 16) = &v5[8 * a2];
    *(_DWORD *)(a1 + 24) = a2;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    *(void *)(a1 + 48) = 0;
    uint64_t v6 = (char *)operator new(8 * a2);
    int v7 = &v6[8 * a2];
    bzero(v6, 8 * a2);
    int64_t v8 = &v6[v4];
  }
  else
  {
    int v7 = 0;
    int64_t v8 = 0;
    uint64_t v6 = 0;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
  }
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v7;
  *(_DWORD *)(a1 + 56) = a2;
  return a1;
}

void sub_19E2490D0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E13A9BC(a1);
}

uint64_t sub_19E2490EC(uint64_t a1, int a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0;
  if (a2)
  {
    if (a2 < 0) {
      sub_19E13D694();
    }
    size_t v4 = 4 * a2;
    unint64_t v5 = (char *)operator new(v4);
    bzero(v5, 4 * a2);
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = &v5[v4];
    *(void *)(a1 + 16) = &v5[4 * a2];
    *(_DWORD *)(a1 + 24) = a2;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    *(void *)(a1 + 48) = 0;
    uint64_t v6 = (char *)operator new(4 * a2);
    int v7 = &v6[4 * a2];
    bzero(v6, 4 * a2);
    int64_t v8 = &v6[v4];
  }
  else
  {
    int v7 = 0;
    int64_t v8 = 0;
    uint64_t v6 = 0;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
  }
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v7;
  *(_DWORD *)(a1 + 56) = a2;
  return a1;
}

void sub_19E2491DC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E13A9BC(a1);
}

void sub_19E2491F8(void **a1)
{
}

uint64_t sub_19E24920C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_19E249224(uint64_t a1, uint64_t a2)
{
  return a2;
}

id sub_19E249F9C(uint64_t a1, void *a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  int v7 = objc_msgSend_mutableCopy(v3, v4, v5, v6);
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  int v11 = objc_msgSend_copy(v3, v8, v9, v10, 0);
  uint64_t v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(v11, v12, (uint64_t)&v27, (uint64_t)v31, 16);
  if (v13)
  {
    uint64_t v16 = v13;
    uint64_t v17 = *(void *)v28;
    do
    {
      for (uint64_t i = 0; i != v16; ++i)
      {
        if (*(void *)v28 == v17)
        {
          uint64_t v19 = *(void *)(*((void *)&v27 + 1) + 8 * i);
          if (objc_msgSend_containsObject_(*(void **)(a1 + 32), v14, v19, v15)) {
            continue;
          }
        }
        else
        {
          objc_enumerationMutation(v11);
          uint64_t v19 = *(void *)(*((void *)&v27 + 1) + 8 * i);
          if (objc_msgSend_containsObject_(*(void **)(a1 + 32), v20, v19, v21)) {
            continue;
          }
        }
        objc_msgSend_removeObject_(v7, v14, v19, v15);
      }
      uint64_t v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(v11, v14, (uint64_t)&v27, (uint64_t)v31, 16);
    }
    while (v16);
  }

  char v25 = objc_msgSend_copy(v7, v22, v23, v24);

  return v25;
}

double sub_19E24AB40()
{
  if (qword_1E94593D0 != -1) {
    dispatch_once(&qword_1E94593D0, &unk_1EF0ABFC0);
  }
  v0 = pthread_getspecific(qword_1E94593D8);
  unint64_t v1 = (timeval *)pthread_getspecific(qword_1E94593E0);
  uint64_t v2 = v1;
  if (v0)
  {
    if (v1) {
      goto LABEL_5;
    }
LABEL_8:
    uint64_t v2 = (timeval *)malloc_type_malloc(0x10uLL, 0x1000040D9A13B51uLL);
    pthread_setspecific(qword_1E94593E0, v2);
    v4.tv_sec = 0;
    *(void *)&v4.tv_usec = 0;
    if (*v0) {
      goto LABEL_6;
    }
LABEL_9:
    _DWORD *v0 = 1;
    gettimeofday(v2, 0);
    goto LABEL_6;
  }
  v0 = malloc_type_malloc(4uLL, 0x100004052888210uLL);
  pthread_setspecific(qword_1E94593D8, v0);
  _DWORD *v0 = 0;
  if (!v2) {
    goto LABEL_8;
  }
LABEL_5:
  v4.tv_sec = 0;
  *(void *)&v4.tv_usec = 0;
  if (!*v0) {
    goto LABEL_9;
  }
LABEL_6:
  gettimeofday(&v4, 0);
  return (double)(v4.tv_sec - v2->tv_sec) + (double)(v4.tv_usec - v2->tv_usec) * 0.000001;
}

uint64_t sub_19E24AC7C()
{
  v0 = (void (__cdecl *)(void *))MEMORY[0x1E4F14838];
  pthread_key_create((pthread_key_t *)&qword_1E94593D8, MEMORY[0x1E4F14838]);

  return pthread_key_create((pthread_key_t *)&qword_1E94593E0, v0);
}

__darwin_time_t sub_19E24ACD4()
{
  v1.tv_sec = 0;
  *(void *)&v1.tv_usec = 0;
  gettimeofday(&v1, 0);
  return v1.tv_sec ^ v1.tv_usec;
}

void sub_19E24AD0C(uint64_t a1)
{
}

uint64_t sub_19E24AD74(uint64_t a1)
{
  *(void *)a1 = &unk_1EF0A9E20;
  uint64_t v2 = *(void ***)(a1 + 360);
  if (v2)
  {
    do
    {
      while (1)
      {
        id v3 = (void **)*v2;
        timeval v4 = (std::__shared_weak_count *)v2[6];
        if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        if (*((char *)v2 + 39) < 0) {
          break;
        }
        operator delete(v2);
        uint64_t v2 = v3;
        if (!v3) {
          goto LABEL_9;
        }
      }
      operator delete(v2[2]);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
LABEL_9:
  uint64_t v5 = *(void **)(a1 + 344);
  *(void *)(a1 + 344) = 0;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 336);
  if (!v6 || atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v7 = *(void *)(a1 + 320);
    *(void *)(a1 + 320) = 0;
    if (!v7) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  uint64_t v7 = *(void *)(a1 + 320);
  *(void *)(a1 + 320) = 0;
  if (v7) {
LABEL_14:
  }
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
LABEL_15:
  sub_19E15A064(a1 + 296, *(char **)(a1 + 304));
  int64_t v8 = *(void ***)(a1 + 272);
  if (v8)
  {
    do
    {
      int v11 = (void **)*v8;
      if (*((char *)v8 + 63) < 0)
      {
        operator delete(v8[5]);
        if (*((char *)v8 + 39) < 0) {
LABEL_26:
        }
          operator delete(v8[2]);
      }
      else if (*((char *)v8 + 39) < 0)
      {
        goto LABEL_26;
      }
      operator delete(v8);
      int64_t v8 = v11;
    }
    while (v11);
  }
  uint64_t v9 = *(void **)(a1 + 256);
  *(void *)(a1 + 256) = 0;
  if (v9) {
    operator delete(v9);
  }

  return sub_19E304940(a1);
}

uint64_t sub_19E24AF60(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_19E24AFE0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_19E24AD74(a1);

  operator delete(v1);
}

uint64_t sub_19E24B008(uint64_t a1, char *a2)
{
  timeval v4 = (uint64_t **)(a1 + 8);
  uint64_t v5 = (void *)(a1 + 16);
  sub_19E15A064(a1 + 8, *(char **)(a1 + 16));
  *(void *)(a1 + 8) = v5;
  void *v5 = 0;
  uint64_t v6 = *(char **)(a1 + 40);
  *(void *)(a1 + 24) = 0;
  uint64_t v7 = (uint64_t **)(a1 + 32);
  sub_19E15A064(a1 + 32, v6);
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  if (*(void *)(a1 + 280))
  {
    int64_t v8 = *(void ***)(a1 + 272);
    if (!v8)
    {
LABEL_3:
      *(void *)(a1 + 272) = 0;
      uint64_t v9 = *(void *)(a1 + 264);
      if (v9)
      {
        for (uint64_t i = 0; i != v9; ++i)
          *(void *)(*(void *)(a1 + 256) + 8 * i) = 0;
      }
      *(void *)(a1 + 280) = 0;
      goto LABEL_7;
    }
    while (1)
    {
      uint64_t v12 = (void **)*v8;
      if (*((char *)v8 + 63) < 0)
      {
        operator delete(v8[5]);
        if (*((char *)v8 + 39) < 0) {
LABEL_14:
        }
          operator delete(v8[2]);
      }
      else if (*((char *)v8 + 39) < 0)
      {
        goto LABEL_14;
      }
      operator delete(v8);
      int64_t v8 = v12;
      if (!v12) {
        goto LABEL_3;
      }
    }
  }
LABEL_7:
  sub_19E15A064(a1 + 296, *(char **)(a1 + 304));
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 296) = a1 + 304;
  sub_19E24E064((void *)(a1 + 344));
  LODWORD(v11) = a2[23];
  if ((v11 & 0x80000000) != 0)
  {
    sub_19E13C2D0(&__dst, *(void **)a2, *((void *)a2 + 1));
    LOBYTE(v11) = a2[23];
  }
  else
  {
    std::string __dst = *(std::string *)a2;
  }
  *((unsigned char *)&v78.__r_.__value_.__s + 23) = 4;
  strcpy((char *)&v78, "main");
  std::string::size_type v11 = v11;
  if ((v11 & 0x80u) == 0) {
    uint64_t v13 = (unsigned __int8 *)a2;
  }
  else {
    uint64_t v13 = *(unsigned __int8 **)a2;
  }
  if ((v11 & 0x80u) != 0) {
    std::string::size_type v11 = *((void *)a2 + 1);
  }
  int v73 = v4;
  if (v11)
  {
    int64_t v14 = &v13[v11];
    uint64_t v15 = v13;
    uint64_t v16 = (char *)&v13[v11];
    do
    {
      uint64_t v17 = v15;
      while (1)
      {
        int v18 = *v15++;
        if (v18 == 35) {
          break;
        }
        uint64_t v17 = v15;
        if (v15 == v14)
        {
          uint64_t v17 = (unsigned __int8 *)v16;
          goto LABEL_28;
        }
      }
      uint64_t v16 = (char *)v17;
    }
    while (v15 != v14);
LABEL_28:
    if (v17 != v14)
    {
      std::string::size_type v19 = v17 - v13;
      if (v17 - v13 != -1)
      {
        if (v11 >= v19) {
          std::string::size_type v20 = v17 - v13;
        }
        else {
          std::string::size_type v20 = v11;
        }
        if (v20 > 0x7FFFFFFFFFFFFFF7) {
          sub_19E13C370();
        }
        if (v20 >= 0x17)
        {
          uint64_t v69 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v20 | 7) != 0x17) {
            uint64_t v69 = v20 | 7;
          }
          uint64_t v70 = v69 + 1;
          p_p = (std::string *)operator new(v69 + 1);
          __p.__r_.__value_.__l.__size_ = v20;
          __p.__r_.__value_.__r.__words[2] = v70 | 0x8000000000000000;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
          uint64_t v7 = (uint64_t **)(a1 + 32);
        }
        else
        {
          *((unsigned char *)&__p.__r_.__value_.__s + 23) = v20;
          p_p = &__p;
          if (!v20)
          {
            __p.__r_.__value_.__s.__data_[0] = 0;
            if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_37;
            }
LABEL_157:
            operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_37:
            std::string __dst = __p;
            timeval v4 = v73;
            if (a2[23] < 0)
            {
              std::string::size_type v22 = *((void *)a2 + 1);
              if (v22 > v19)
              {
                a2 = *(char **)a2;
                std::string::size_type v23 = v19 + 1;
                std::string::size_type v24 = v22 - (v19 + 1);
                if (v24 <= 0x7FFFFFFFFFFFFFF7)
                {
LABEL_40:
                  if (v24 >= 0x17)
                  {
                    uint64_t v71 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v24 | 7) != 0x17) {
                      uint64_t v71 = v24 | 7;
                    }
                    uint64_t v72 = v71 + 1;
                    char v25 = (std::string *)operator new(v71 + 1);
                    __p.__r_.__value_.__l.__size_ = v24;
                    __p.__r_.__value_.__r.__words[2] = v72 | 0x8000000000000000;
                    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
                    timeval v4 = v73;
                  }
                  else
                  {
                    *((unsigned char *)&__p.__r_.__value_.__s + 23) = v24;
                    char v25 = &__p;
                    if (v22 == v23)
                    {
                      __p.__r_.__value_.__s.__data_[v22 - v19 - 1] = 0;
                      if ((SHIBYTE(v78.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      {
LABEL_43:
                        std::string v78 = __p;
                        goto LABEL_44;
                      }
LABEL_162:
                      operator delete(v78.__r_.__value_.__l.__data_);
                      goto LABEL_43;
                    }
                  }
                  memmove(v25, &a2[v19 + 1], v24);
                  v25->__r_.__value_.__s.__data_[v22 - v19 - 1] = 0;
                  if ((SHIBYTE(v78.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                    goto LABEL_43;
                  }
                  goto LABEL_162;
                }
LABEL_165:
                sub_19E13C370();
              }
            }
            else
            {
              std::string::size_type v22 = a2[23];
              if (v19 < v22)
              {
                std::string::size_type v23 = v19 + 1;
                std::string::size_type v24 = v22 - (v19 + 1);
                if (v24 <= 0x7FFFFFFFFFFFFFF7) {
                  goto LABEL_40;
                }
                goto LABEL_165;
              }
            }
            sub_19E13DF28();
          }
        }
        memmove(p_p, v13, v20);
        p_p->__r_.__value_.__s.__data_[v20] = 0;
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_37;
        }
        goto LABEL_157;
      }
    }
  }
LABEL_44:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = __dst.__r_.__value_.__l.__size_;
    if (__dst.__r_.__value_.__l.__size_ <= 3)
    {
LABEL_49:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 11;
      strcpy((char *)&__p, "E5Inference");
      E5RT::ExecutionStreamOperation::CreatePreCompiledComputeOp();
      if (v80) {
        operator new();
      }
      uint64_t v80 = 0;
      long long v28 = *(std::__shared_weak_count **)(a1 + 336);
      *(void *)(a1 + 328) = 0;
      *(void *)(a1 + 336) = 0;
      if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
      long long v29 = v80;
      uint64_t v80 = 0;
      if (v29) {
        (*(void (**)(long long *))(*(void *)v29 + 8))(v29);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      goto LABEL_58;
    }
  }
  else
  {
    std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if (HIBYTE(__dst.__r_.__value_.__r.__words[2]) < 4u) {
      goto LABEL_49;
    }
  }
  long long v27 = (E5RT::E5CompilerOptions *)std::string::compare(&__dst, size - 4, 4uLL, ".mil");
  if (v27) {
    goto LABEL_49;
  }
  sub_19E24BD5C(v27, (uint64_t)&v78, &__p);
  long long v66 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  uint64_t v67 = *(std::__shared_weak_count **)(a1 + 336);
  *(_OWORD *)(a1 + 328) = v66;
  if (v67 && !atomic_fetch_add(&v67->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
    std::__shared_weak_count::__release_weak(v67);
  }
  vDSP_Length v68 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_
    && !atomic_fetch_add((atomic_ullong *volatile)(__p.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
    std::__shared_weak_count::__release_weak(v68);
  }
LABEL_58:
  long long v30 = *(uint64_t **)(E5RT::ExecutionStreamOperation::GetInputPorts(*(E5RT::ExecutionStreamOperation **)(a1 + 328)) + 16);
  if (v30)
  {
    while (1)
    {
      PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPort *)v30[5]);
      E5RT::OperandDescriptor::TensorDescriptor(PortDescriptorRef);
      E5RT::TensorDescriptor::AllocateMemory();
      sub_19E24E150(a1 + 344, (uint64_t)(v30 + 2), (uint64_t)(v30 + 2), (uint64_t *)&__p);
      std::string::size_type v32 = __p.__r_.__value_.__r.__words[0];
      __p.__r_.__value_.__r.__words[0] = 0;
      if (v32) {
        (*(void (**)(std::string::size_type))(*(void *)v32 + 8))(v32);
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v30 + 2);
      uint64_t v33 = sub_19E24E828(a1 + 344, (uint64_t)(v30 + 2), (uint64_t)&unk_19E351150, (long long **)&__p)[6];
      unint64_t v76 = (std::__shared_weak_count *)v33;
      if (v33) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v33 + 8), 1uLL, memory_order_relaxed);
      }
      E5RT::IOPort::BindMemoryObject();
      unsigned int v34 = v76;
      if (v76 && !atomic_fetch_add(&v76->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
      int v35 = *((char *)v30 + 39);
      uint64_t v36 = (uint64_t *)v30[2];
      if (v35 >= 0) {
        long long v37 = (char *)(v30 + 2);
      }
      else {
        long long v37 = (char *)v30[2];
      }
      unint64_t v38 = *((unsigned __int8 *)v30 + 39);
      if (v35 < 0) {
        unint64_t v38 = v30[3];
      }
      if (v38)
      {
        uint64_t v39 = &v37[v38];
        BOOL v40 = v37[v38 - 1] != 110 || &v37[v38 - 1] == v37;
        if (!v40 && *(v39 - 2) == 105 && v39 - 2 != v37 && *(v39 - 3) == 95) {
          break;
        }
      }
      uint64_t v41 = 0;
      unint64_t v42 = v38;
      while (v42 && v41 != -8)
      {
        int v43 = v37[v42 - 1];
        int v44 = aHistory[v41 + 7];
        --v42;
        --v41;
        if (v43 != v44) {
          goto LABEL_86;
        }
      }
      if (&aHistory[v41 + 8] == "_history")
      {
        if (v38 >= v38 - 8) {
          std::string::size_type v45 = v38 - 8;
        }
        else {
          std::string::size_type v45 = v38;
        }
        if (v45 > 0x7FFFFFFFFFFFFFF7) {
          sub_19E13C370();
        }
        if (v45 >= 0x17)
        {
          uint64_t v50 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v45 | 7) != 0x17) {
            uint64_t v50 = v45 | 7;
          }
          uint64_t v51 = v50 + 1;
          long long v46 = (std::string *)operator new(v50 + 1);
          __p.__r_.__value_.__l.__size_ = v45;
          __p.__r_.__value_.__r.__words[2] = v51 | 0x8000000000000000;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v46;
        }
        else
        {
          *((unsigned char *)&__p.__r_.__value_.__s + 23) = v45;
          long long v46 = &__p;
          if (!v45) {
            goto LABEL_121;
          }
        }
LABEL_120:
        memmove(v46, v37, v45);
        goto LABEL_121;
      }
LABEL_86:
      if (v35 < 0)
      {
        if (v30[3] != 16) {
          goto LABEL_60;
        }
      }
      else
      {
        uint64_t v36 = v30 + 2;
        if (v35 != 16) {
          goto LABEL_60;
        }
      }
      uint64_t v48 = *v36;
      uint64_t v47 = v36[1];
      if (v48 != 0x5F79726F74736968 || v47 != 0x6B73616D5F646170) {
LABEL_60:
      }
        sub_19E140890(v4, (const void **)v30 + 2, (uint64_t)(v30 + 2));
LABEL_61:
      long long v30 = (uint64_t *)*v30;
      if (!v30) {
        goto LABEL_124;
      }
    }
    if (v38 >= v38 - 3) {
      std::string::size_type v45 = v38 - 3;
    }
    else {
      std::string::size_type v45 = v38;
    }
    if (v45 > 0x7FFFFFFFFFFFFFF7) {
      sub_19E13C370();
    }
    if (v45 >= 0x17)
    {
      uint64_t v52 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v45 | 7) != 0x17) {
        uint64_t v52 = v45 | 7;
      }
      uint64_t v53 = v52 + 1;
      long long v46 = (std::string *)operator new(v52 + 1);
      __p.__r_.__value_.__l.__size_ = v45;
      __p.__r_.__value_.__r.__words[2] = v53 | 0x8000000000000000;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v46;
      goto LABEL_120;
    }
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = v45;
    long long v46 = &__p;
    if (v45) {
      goto LABEL_120;
    }
LABEL_121:
    v46->__r_.__value_.__s.__data_[v45] = 0;
    uint64_t v80 = (long long *)(v30 + 2);
    long long v54 = sub_19E24ECA4(a1 + 256, (uint64_t)(v30 + 2), (uint64_t)&unk_19E351150, &v80);
    uint64_t v55 = (void **)(v54 + 5);
    uint64_t v7 = (uint64_t **)(a1 + 32);
    timeval v4 = v73;
    if (*((char *)v54 + 63) < 0) {
      operator delete(*v55);
    }
    *(std::string *)uint64_t v55 = __p;
    goto LABEL_61;
  }
LABEL_124:
  OutputPorts = (E5RT::ExecutionStream *)E5RT::ExecutionStreamOperation::GetOutputPorts(*(E5RT::ExecutionStreamOperation **)(a1 + 328));
  for (uint64_t j = (const void **)*((void *)OutputPorts + 2); j; uint64_t j = (const void **)*j)
  {
    sub_19E140890(v7, j + 2, (uint64_t)(j + 2));
    signed int v58 = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPort *)j[5]);
    E5RT::OperandDescriptor::TensorDescriptor(v58);
    E5RT::TensorDescriptor::AllocateMemory();
    sub_19E24E150(a1 + 344, (uint64_t)(j + 2), (uint64_t)(j + 2), (uint64_t *)&__p);
    std::string::size_type v59 = __p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = 0;
    if (v59) {
      (*(void (**)(std::string::size_type))(*(void *)v59 + 8))(v59);
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(j + 2);
    uint64_t v60 = sub_19E24E828(a1 + 344, (uint64_t)(j + 2), (uint64_t)&unk_19E351150, (long long **)&__p)[6];
    int64_t v75 = (std::__shared_weak_count *)v60;
    if (v60) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v60 + 8), 1uLL, memory_order_relaxed);
    }
    OutputPorts = (E5RT::ExecutionStream *)E5RT::IOPort::BindMemoryObject();
    if (v75 && !atomic_fetch_add(&v75->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  E5RT::ExecutionStream::CreateExecutionStream((uint64_t *)&__p, OutputPorts);
  std::string::size_type v61 = __p.__r_.__value_.__r.__words[0];
  __p.__r_.__value_.__r.__words[0] = 0;
  uint64_t v62 = *(void *)(a1 + 320);
  *(void *)(a1 + 320) = v61;
  if (v62)
  {
    (*(void (**)(uint64_t))(*(void *)v62 + 8))(v62);
    std::string::size_type v63 = __p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = 0;
    if (v63) {
      (*(void (**)(std::string::size_type))(*(void *)v63 + 8))(v63);
    }
  }
  uint64_t v64 = *(std::__shared_weak_count **)(a1 + 336);
  uint64_t v74 = v64;
  if (v64) {
    atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  E5RT::ExecutionStream::EncodeOperation();
  if (!v74 || atomic_fetch_add(&v74->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((SHIBYTE(v78.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_142;
    }
LABEL_145:
    operator delete(v78.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return 1;
    }
LABEL_146:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return 1;
  }
  ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
  std::__shared_weak_count::__release_weak(v74);
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_145;
  }
LABEL_142:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_146;
  }
  return 1;
}

void sub_19E24BB90(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v31 - 105) & 0x80000000) == 0)
    {
LABEL_3:
      __cxa_begin_catch(a1);
      if (a2 == 2) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((*(char *)(v31 - 105) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v31 - 128));
  __cxa_begin_catch(a1);
  if (a2 == 2)
  {
LABEL_4:
    unsigned int v34 = sub_19E26EDD8();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
      sub_19E32EF08();
    }
    goto LABEL_10;
  }
LABEL_8:
  int v35 = sub_19E26EDD8();
  if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
    sub_19E32EFA0();
  }
LABEL_10:
  __cxa_end_catch();
  JUMPOUT(0x19E24B948);
}

void sub_19E24BD3C(_Unwind_Exception *a1)
{
}

uint64_t sub_19E24BD5C@<X0>(E5RT::E5CompilerOptions *a1@<X0>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  E5RT::E5CompilerOptions::Create(&v21, a1);
  uint64_t v5 = operator new(8uLL);
  *(void *)&long long __p = v5;
  void *v5 = 1;
  *((void *)&__p + 1) = v5 + 1;
  std::string::size_type v20 = v5 + 1;
  E5RT::E5CompilerOptions::SetComputeDeviceTypesAllowed();
  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HIBYTE(v20) = 4;
  strcpy((char *)&__p, "bnns");
  E5RT::E5CompilerOptions::SetPreferredCpuBackend();
  if (*(char *)(a2 + 23) < 0)
  {
    sub_19E13C2D0(__dst, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __dst = *(_OWORD *)a2;
    uint64_t v23 = *(void *)(a2 + 16);
  }
  sub_19E24DE98(&__p, (uint64_t)__dst, 1uLL);
  uint64_t v6 = (E5RT::E5Compiler *)E5RT::E5CompilerOptions::SetMilEntryPoints();
  uint64_t v7 = __p;
  if ((void)__p)
  {
    uint64_t v8 = *((void *)&__p + 1);
    uint64_t v9 = (void *)__p;
    if (*((void *)&__p + 1) != (void)__p)
    {
      do
      {
        if (*(char *)(v8 - 1) < 0) {
          operator delete(*(void **)(v8 - 24));
        }
        v8 -= 24;
      }
      while (v8 != v7);
      uint64_t v9 = (void *)__p;
    }
    *((void *)&__p + 1) = v7;
    operator delete(v9);
  }
  if (SHIBYTE(v23) < 0) {
    operator delete(__dst[0]);
  }
  E5RT::E5Compiler::GetCompiler(v6);
  std::chrono::steady_clock::now();
  E5RT::E5Compiler::Compile();
  std::chrono::steady_clock::now();
  ExportedFunctions = (void *)E5RT::ProgramLibrary::GetExportedFunctions(v18);
  std::string::size_type v11 = sub_19E1652BC(ExportedFunctions, a2);
  if (!v11) {
    sub_19E13DF40("unordered_map::at: key not found");
  }
  uint64_t v12 = (atomic_ullong *)v11[6];
  __dst[0] = (void *)v11[5];
  __dst[1] = v12;
  if (v12)
  {
    atomic_fetch_add_explicit(v12 + 1, 1uLL, memory_order_relaxed);
    uint64_t v16 = (std::__shared_weak_count *)v12;
    atomic_fetch_add_explicit(v12 + 1, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v16 = 0;
  }
  E5RT::PrecompiledComputeOpCreateOptions::Create();
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  HIBYTE(v20) = 11;
  strcpy((char *)&__p, "E5Inference");
  E5RT::PrecompiledComputeOpCreateOptions::SetOperationName();
  if (SHIBYTE(v20) < 0) {
    operator delete((void *)__p);
  }
  E5RT::ExecutionStreamOperation::CreatePreCompiledComputeOp();
  uint64_t v13 = __p;
  *a3 = __p;
  if (v13) {
    operator new();
  }
  a3[1] = 0;
  if (v17) {
    (*(void (**)())(*(void *)v17 + 8))();
  }
  int64_t v14 = (std::__shared_weak_count *)__dst[1];
  if (__dst[1] && !atomic_fetch_add((atomic_ullong *volatile)__dst[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  if (v18) {
    (*(void (**)())(*(void *)v18 + 8))();
  }
  uint64_t result = v21;
  uint64_t v21 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_19E24C138(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (!a19) {
    _Unwind_Resume(exception_object);
  }
  (*(void (**)(uint64_t))(*(void *)a19 + 8))(a19);
  _Unwind_Resume(exception_object);
}

E5RT::ExecutionStream *sub_19E24C2A8(uint64_t a1)
{
  uint64_t result = *(E5RT::ExecutionStream **)(a1 + 320);
  if (result)
  {
    E5RT::ExecutionStream::ResetStream(result);
    uint64_t result = *(E5RT::ExecutionStream **)(a1 + 320);
    *(void *)(a1 + 320) = 0;
    if (result)
    {
      id v3 = *(uint64_t (**)(void))(*(void *)result + 8);
      return (E5RT::ExecutionStream *)v3();
    }
  }
  return result;
}

void sub_19E24C328(_Unwind_Exception *a1)
{
}

uint64_t sub_19E24C33C(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  if (!*(void *)(a1 + 320))
  {
    std::string::size_type v22 = sub_19E26EDD8();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
      sub_19E32F0A0();
    }
    return 0;
  }
  sub_19E304C24(a1, a3, (uint64_t)__p);
  uint64_t v7 = *(uint64_t ***)(a1 + 304);
  if (!v7)
  {
LABEL_26:
    long long v27 = __p;
    int v18 = sub_19E24E828(a1 + 344, (uint64_t)__p, (uint64_t)&unk_19E351150, (long long **)&v27);
    DataSpan = (void *)E5RT::BufferObject::GetDataSpan((E5RT::BufferObject *)v18[5]);
    if (v20) {
      memmove(DataSpan, a2, v20);
    }
    sub_19E140890((uint64_t **)(a1 + 296), (const void **)__p, (uint64_t)__p);
    *(_DWORD *)(a1 + 56) = *(void *)(a4 + 24);
    uint64_t v21 = 1;
    if ((v26[0] & 0x80000000) == 0) {
      return v21;
    }
LABEL_35:
    operator delete(__p[0]);
    return v21;
  }
  if (v26[0] >= 0) {
    size_t v8 = v26[0];
  }
  else {
    size_t v8 = (size_t)__p[1];
  }
  if (v26[0] >= 0) {
    uint64_t v9 = __p;
  }
  else {
    uint64_t v9 = (void **)__p[0];
  }
  while (1)
  {
    int v10 = *((char *)v7 + 55);
    if (v10 >= 0) {
      size_t v11 = *((unsigned __int8 *)v7 + 55);
    }
    else {
      size_t v11 = (size_t)v7[5];
    }
    if (v10 >= 0) {
      uint64_t v12 = (uint64_t *)(v7 + 4);
    }
    else {
      uint64_t v12 = v7[4];
    }
    if (v11 >= v8) {
      size_t v13 = v8;
    }
    else {
      size_t v13 = v11;
    }
    int v14 = memcmp(v9, v12, v13);
    BOOL v15 = v8 < v11;
    if (v14) {
      BOOL v15 = v14 < 0;
    }
    if (v15) {
      goto LABEL_9;
    }
    int v16 = memcmp(v12, v9, v13);
    BOOL v17 = v11 < v8;
    if (v16) {
      BOOL v17 = v16 < 0;
    }
    if (!v17) {
      break;
    }
    ++v7;
LABEL_9:
    uint64_t v7 = (uint64_t **)*v7;
    if (!v7) {
      goto LABEL_26;
    }
  }
  uint64_t v23 = sub_19E26EDD8();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
  {
    sub_19E32F0D4(v26, (uint64_t *)__p, v23);
    uint64_t v21 = 0;
    if ((v26[0] & 0x80000000) == 0) {
      return v21;
    }
    goto LABEL_35;
  }
  uint64_t v21 = 0;
  if (v26[0] < 0) {
    goto LABEL_35;
  }
  return v21;
}

void sub_19E24C530(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_19E24C550(uint64_t a1, CFArrayRef theArray)
{
  CFArrayRef v2 = theArray;
  if (theArray)
  {
    unint64_t Count = CFArrayGetCount(theArray);
    if (Count % *(int *)(a1 + 56)) {
      goto LABEL_3;
    }
  }
  else
  {
    unint64_t Count = 0;
    if (0uLL % *(int *)(a1 + 56))
    {
LABEL_3:
      uint64_t v5 = sub_19E26EDD8();
      BOOL result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
      if (result)
      {
        sub_19E32F310();
        return 0;
      }
      return result;
    }
  }
  HIBYTE(__p[2]) = 16;
  uint64_t v7 = a1 + 344;
  strcpy((char *)__p, "history_pad_mask");
  size_t v8 = sub_19E140120((void *)(a1 + 344), (uint64_t)__p);
  uint64_t v9 = v8;
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    if (v8) {
      goto LABEL_8;
    }
LABEL_19:
    unint64_t v13 = 0;
    goto LABEL_33;
  }
  operator delete(__p[0]);
  if (!v9) {
    goto LABEL_19;
  }
LABEL_8:
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "history_pad_mask");
  v97[0] = (long long *)__p;
  int v10 = sub_19E24F270(a1 + 344, (uint64_t)__p, (uint64_t)&unk_19E351150, v97);
  uint64_t DataSpan = E5RT::BufferObject::GetDataSpan(*((E5RT::BufferObject **)v10 + 5));
  unint64_t v13 = v12 >> 2;
  if (v12 >= 4) {
    uint64_t v14 = DataSpan;
  }
  else {
    uint64_t v14 = 0;
  }
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v15 = Count / *(int *)(a1 + 56);
  if (v15 >= v13) {
    unint64_t v15 = v13;
  }
  unint64_t v16 = 4 * v15;
  BOOL v17 = (_DWORD *)(v14 + 4 * v15);
  if ((uint64_t)v16 >= 1)
  {
    unint64_t v18 = v16 >> 2;
    unint64_t v19 = (v16 >> 2) - (v16 > 3) + 1;
    if (v19 < 8)
    {
      size_t v20 = (_DWORD *)v14;
LABEL_23:
      unint64_t v23 = v18 + 1;
      do
      {
        *v20++ = 0;
        --v23;
      }
      while (v23 > 1);
      goto LABEL_25;
    }
    size_t v20 = (_DWORD *)(v14 + 4 * (v19 & 0xFFFFFFFFFFFFFFF8));
    v18 -= v19 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v21 = (_OWORD *)(v14 + 16);
    unint64_t v22 = v19 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      *(v21 - 1) = 0uLL;
      *uint64_t v21 = 0uLL;
      v21 += 2;
      v22 -= 8;
    }
    while (v22);
    if (v19 != (v19 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_23;
    }
  }
LABEL_25:
  unint64_t v24 = v14 + 4 * v13 - (void)v17;
  if ((uint64_t)v24 < 1) {
    goto LABEL_33;
  }
  unint64_t v25 = v24 >> 2;
  unint64_t v26 = (v24 >> 2) - (v24 > 3) + 1;
  if (v26 < 8)
  {
    long long v27 = v17;
LABEL_31:
    unint64_t v35 = v25 + 1;
    do
    {
      *v27++ = 1065353216;
      --v35;
    }
    while (v35 > 1);
    goto LABEL_33;
  }
  uint64_t v28 = 0;
  long long v27 = &v17[v26 & 0xFFFFFFFFFFFFFFF8];
  v25 -= v26 & 0xFFFFFFFFFFFFFFF8;
  __asm { FMOV            V0.4S, #1.0 }
  unint64_t v33 = v26 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    unsigned int v34 = &v17[v28];
    _OWORD *v34 = _Q0;
    v34[1] = _Q0;
    v28 += 8;
    v33 -= 8;
  }
  while (v33);
  if (v26 != (v26 & 0xFFFFFFFFFFFFFFF8)) {
    goto LABEL_31;
  }
LABEL_33:
  if (!Count)
  {
    for (uint64_t i = *(void **)(a1 + 272); i; uint64_t i = (void *)*i)
    {
      __p[0] = i + 2;
      uint64_t v83 = sub_19E24E828(v7, (uint64_t)(i + 2), (uint64_t)&unk_19E351150, (long long **)__p);
      uint64_t v84 = (void *)E5RT::BufferObject::GetDataSpan((E5RT::BufferObject *)v83[5]);
      if (v85 < 4) {
        uint64_t v84 = 0;
      }
      if ((uint64_t)(v85 & 0xFFFFFFFFFFFFFFFCLL) >= 1) {
        bzero(v84, 4 * (((v85 & 0xFFFFFFFFFFFFFFFCLL) >> 2) - ((v85 & 0xFFFFFFFFFFFFFFFCLL) > 3)) + 4);
      }
    }
    return 1;
  }
  ValueAtIndex = CFArrayGetValueAtIndex(v2, Count - 1);
  uint64_t v37 = *(void *)(a1 + 272);
  if (!v37) {
    return 1;
  }
  unint64_t v94 = Count;
  uint64_t v38 = (uint64_t)ValueAtIndex + 16;
  uint64_t v39 = &unk_19E351150;
  uint64_t v96 = a1;
  while (1)
  {
    BOOL v40 = (const void **)(v37 + 40);
    sub_19E253538(v38, (const void **)(v37 + 40), (uint64_t)__p);
    uint64_t v95 = LODWORD(__p[0]) * LODWORD(__p[1]) * LODWORD(__p[2]) * (int)v100 * (int)v101;
    InputPortRef = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetInputPortRef();
    PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(InputPortRef);
    int v43 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(PortDescriptorRef);
    __p[0] = (void *)(v37 + 16);
    int v44 = sub_19E24E828(v7, v37 + 16, (uint64_t)v39, (long long **)__p);
    uint64_t v45 = E5RT::BufferObject::GetDataSpan((E5RT::BufferObject *)v44[5]);
    uint64_t v47 = v46 >= 4 ? v45 : 0;
    v98[0] = v47;
    v98[1] = v46 >> 2;
    uint64_t v48 = *(unsigned __int8 *)(v37 + 39);
    uint64_t v49 = *(void *)(v37 + 16);
    if ((v48 & 0x80u) != 0) {
      uint64_t v48 = *(void *)(v37 + 24);
    }
    else {
      uint64_t v49 = v37 + 16;
    }
    uint64_t v50 = v49 + v48;
    if (!v48) {
      break;
    }
    if (*(unsigned char *)(v50 - 1) != 110 || v50 - 1 == v49) {
      break;
    }
    BOOL v52 = *(unsigned char *)(v50 - 2) != 105 || v50 - 2 == v49;
    if (v52 || *(unsigned char *)(v50 - 3) != 95) {
      break;
    }
    sub_19E253538(v38, (const void **)(v37 + 40), (uint64_t)__p);
    sub_19E24CE04((uint64_t)v97, v43, 1);
    if (__p[0] == (void *)1)
    {
      uint64_t v53 = v96;
      if (__p[1] == (void *)1)
      {
        if (__p[2] == (void *)1)
        {
          if (v100 == 1)
          {
            BOOL v54 = v101 == 1;
            uint64_t v55 = 4;
            if (v101 == 1) {
              uint64_t v55 = 5;
            }
          }
          else
          {
            BOOL v54 = 0;
            uint64_t v55 = 3;
          }
        }
        else
        {
          BOOL v54 = 0;
          uint64_t v55 = 2;
        }
      }
      else
      {
        BOOL v54 = 0;
        uint64_t v55 = 1;
      }
    }
    else
    {
      BOOL v54 = 0;
      uint64_t v55 = 0;
      uint64_t v53 = v96;
    }
    if (v97[0] == (long long *)1)
    {
      if (v97[1] == (long long *)1)
      {
        if (v97[2] == (long long *)1)
        {
          if (v97[3] == (long long *)1)
          {
            uint64_t v75 = 4;
            if (v97[4] == (long long *)1) {
              uint64_t v75 = 5;
            }
          }
          else
          {
            uint64_t v75 = 3;
          }
        }
        else
        {
          uint64_t v75 = 2;
        }
      }
      else
      {
        uint64_t v75 = 1;
      }
    }
    else
    {
      uint64_t v75 = 0;
    }
    if (v54)
    {
LABEL_91:
      if (v75 != 5) {
        goto LABEL_125;
      }
    }
    else
    {
      while (v75 != 5)
      {
        if (__p[v55] != v97[v75]) {
          goto LABEL_125;
        }
        do
          ++v55;
        while (v55 != 5 && __p[v55] == (void *)1);
        do
          ++v75;
        while (v75 != 5 && v97[v75] == (long long *)1);
        if (v55 == 5) {
          goto LABEL_91;
        }
      }
      if (v55 != 5)
      {
LABEL_125:
        uint64_t v89 = sub_19E26EDD8();
        if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR)) {
          sub_19E32F2A0();
        }
        return 0;
      }
    }
    uint64_t v91 = v38;
    uint64_t v92 = v7;
    uint64_t v93 = (uint64_t *)v37;
    unint64_t v76 = *(int *)(v53 + 56);
    if (v76)
    {
      unint64_t v77 = 0;
      while (1)
      {
        std::string v78 = (char *)CFArrayGetValueAtIndex(v2, v94 + v77 - v76) + 16;
        sub_19E253538((uint64_t)v78, (const void **)(v37 + 40), (uint64_t)__p);
        if (LODWORD(__p[0]) * LODWORD(__p[1]) * LODWORD(__p[2]) * v100 * v101 != v95) {
          break;
        }
        unint64_t v79 = sub_19E2533F8((uint64_t)v78, (const void **)(v37 + 40));
        uint64_t v80 = (void *)sub_19E24CEEC(v98, *(int *)(v96 + 56), v77);
        if (v81) {
          memmove(v80, v79, 4 * v81);
        }
        ++v77;
        unint64_t v76 = *(int *)(v96 + 56);
        if (v77 >= v76) {
          goto LABEL_108;
        }
      }
      vDSP_Length v88 = sub_19E26EDD8();
      if (!os_log_type_enabled(v88, OS_LOG_TYPE_ERROR)) {
        return 0;
      }
      goto LABEL_124;
    }
LABEL_108:
    uint64_t v7 = v92;
    uint64_t v37 = *v93;
    BOOL result = 1;
    uint64_t v38 = v91;
    if (!*v93) {
      return result;
    }
  }
  uint64_t v56 = 0;
  uint64_t v57 = v50 - 1;
  uint64_t v58 = -v48;
  while (v58 != v56 && v56 != -8)
  {
    int v59 = *(unsigned __int8 *)(v57 + v56);
    int v60 = aHistory[v56-- + 7];
    if (v59 != v60) {
      goto LABEL_118;
    }
  }
  if (&aHistory[v56 + 8] != "_history")
  {
LABEL_118:
    unint64_t v86 = sub_19E26EDD8();
    if (!os_log_type_enabled(v86, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    sub_19E32F150();
    return 0;
  }
  uint64_t NumElements = E5RT::TensorDescriptor::GetNumElements(v43);
  unint64_t v62 = v13 * *(int *)(v96 + 56);
  if (NumElements == v62 * v95)
  {
    uint64_t v91 = v38;
    uint64_t v92 = v7;
    uint64_t v93 = (uint64_t *)v37;
    if (v62 >= v94) {
      unint64_t v63 = v94;
    }
    else {
      unint64_t v63 = v13 * *(int *)(v96 + 56);
    }
    if (!v63) {
      goto LABEL_108;
    }
    unint64_t v64 = 0;
    while (1)
    {
      int v65 = (char *)CFArrayGetValueAtIndex(v2, v94 - v63 + v64) + 16;
      sub_19E253538((uint64_t)v65, v40, (uint64_t)__p);
      if (LODWORD(__p[0]) * LODWORD(__p[1]) * LODWORD(__p[2]) * v100 * v101 != v95) {
        break;
      }
      long long v66 = v39;
      CFArrayRef v67 = v2;
      unint64_t v68 = *(int *)(v96 + 56);
      uint64_t v69 = v64 / v68;
      __p[0] = (void *)sub_19E24CEEC(v98, v68, v64 % v68);
      __p[1] = v70;
      uint64_t v71 = (void *)sub_19E24CEEC(__p, v13, v69);
      uint64_t v73 = v72;
      uint64_t v74 = sub_19E2533F8((uint64_t)v65, v40);
      if (v73) {
        memmove(v71, v74, 4 * v73);
      }
      ++v64;
      CFArrayRef v2 = v67;
      uint64_t v39 = v66;
      if (v63 == v64) {
        goto LABEL_108;
      }
    }
    float v87 = sub_19E26EDD8();
    if (!os_log_type_enabled(v87, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
LABEL_124:
    sub_19E32F1C0();
    return 0;
  }
  unint64_t v90 = sub_19E26EDD8();
  if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR)) {
    return 0;
  }
  sub_19E32F230();
  return 0;
}

void sub_19E24CDE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_19E24CE04(uint64_t a1, E5RT::TensorDescriptor *this, uint64_t a3)
{
  uint64_t TensorShape = E5RT::TensorDescriptor::GetTensorShape(this);
  uint64_t v6 = *(const void **)TensorShape;
  uint64_t v7 = *(const void **)(TensorShape + 8);
  int64_t v8 = (int64_t)v7 - *(void *)TensorShape;
  if ((unint64_t)v8 < 0x29)
  {
    memset_pattern16(__b, &unk_19E3519D0, 0x28uLL);
    if (v7 != v6) {
      memcpy(__b, v6, v8);
    }
    if (a3) {
      *(void *)&__b[0] = 1;
    }
    double result = *(double *)__b;
    long long v11 = __b[1];
    *(_OWORD *)a1 = __b[0];
    *(_OWORD *)(a1 + 16) = v11;
    *(void *)(a1 + 32) = v13;
  }
  else
  {
    uint64_t v9 = sub_19E26EDD8();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_19E32F398(v8 >> 3, v9);
    }
    *(void *)(a1 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t sub_19E24CEEC(void *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = v4 / a2;
  if (v4 != v5 * a2 || v4 < a2 || (v4 > v5 * a3 ? (BOOL v6 = v5 * a3 + v5 > v4) : (BOOL v6 = 1), v6))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_19E24F6A4(exception, "index out of bounds");
    __cxa_throw(exception, (struct type_info *)off_1E599CCF8, MEMORY[0x1E4FBA1B8]);
  }
  return *a1 + 4 * v5 * a3;
}

void sub_19E24CF94(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19E24CFA8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_19E24CFBC(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 320))
  {
    id v3 = *(void **)(a1 + 8);
    if (*(void *)(a1 + 24) != *(void *)(a1 + 312)) {
      goto LABEL_33;
    }
    unint64_t v5 = (void *)(a1 + 16);
    if (v3 == (void *)(a1 + 16))
    {
LABEL_31:
      if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 112))(a1, a2) & 1) == 0) {
        return 0;
      }
      E5RT::ExecutionStream::ExecuteStreamSync(*(E5RT::ExecutionStream **)(a1 + 320));
      sub_19E15A064(a1 + 296, *(char **)(a1 + 304));
      *(void *)(a1 + 304) = 0;
      *(void *)(a1 + 312) = 0;
      BOOL result = 1;
      *(void *)(a1 + 296) = a1 + 304;
      return result;
    }
    BOOL v6 = *(void **)(a1 + 296);
    uint64_t v7 = *(void **)(a1 + 8);
    while (1)
    {
      uint64_t v8 = *((unsigned __int8 *)v7 + 55);
      if ((v8 & 0x80u) == 0) {
        uint64_t v9 = *((unsigned __int8 *)v7 + 55);
      }
      else {
        uint64_t v9 = v7[5];
      }
      uint64_t v10 = *((unsigned __int8 *)v6 + 55);
      int v11 = (char)v10;
      if ((v10 & 0x80u) != 0) {
        uint64_t v10 = v6[5];
      }
      if (v9 != v10) {
        goto LABEL_33;
      }
      unint64_t v12 = (const void **)(v7 + 4);
      if (v11 >= 0) {
        uint64_t v13 = (unsigned __int8 *)(v6 + 4);
      }
      else {
        uint64_t v13 = (unsigned __int8 *)v6[4];
      }
      if ((v8 & 0x80) != 0)
      {
        if (memcmp(*v12, v13, v7[5])) {
          goto LABEL_33;
        }
      }
      else if (*((unsigned char *)v7 + 55))
      {
        while (*(unsigned __int8 *)v12 == *v13)
        {
          unint64_t v12 = (const void **)((char *)v12 + 1);
          ++v13;
          if (!--v8) {
            goto LABEL_20;
          }
        }
LABEL_33:
        unint64_t v64 = (void *)(a1 + 16);
        memset(&v65, 0, sizeof(v65));
        if (v3 == (void *)(a1 + 16)) {
          goto LABEL_148;
        }
LABEL_34:
        if (*((char *)v3 + 55) < 0)
        {
          sub_19E13C2D0(&__dst, (void *)v3[4], v3[5]);
        }
        else
        {
          long long __dst = *((_OWORD *)v3 + 2);
          uint64_t v69 = v3[6];
        }
        size_t v20 = *(uint64_t ***)(a1 + 304);
        char v21 = HIBYTE(v69);
        if (!v20)
        {
          if (v69 < 0) {
            operator delete((void *)__dst);
          }
          goto LABEL_75;
        }
        if (v69 >= 0) {
          size_t v22 = HIBYTE(v69);
        }
        else {
          size_t v22 = *((void *)&__dst + 1);
        }
        long long __p = (void *)__dst;
        if (v69 >= 0) {
          p_dst = &__dst;
        }
        else {
          p_dst = (long long *)__dst;
        }
        while (1)
        {
          int v24 = *((char *)v20 + 55);
          if (v24 >= 0) {
            size_t v25 = *((unsigned __int8 *)v20 + 55);
          }
          else {
            size_t v25 = (size_t)v20[5];
          }
          if (v24 >= 0) {
            unint64_t v26 = (uint64_t *)(v20 + 4);
          }
          else {
            unint64_t v26 = v20[4];
          }
          if (v25 >= v22) {
            size_t v27 = v22;
          }
          else {
            size_t v27 = v25;
          }
          int v28 = memcmp(p_dst, v26, v27);
          BOOL v29 = v22 < v25;
          if (v28) {
            BOOL v29 = v28 < 0;
          }
          if (!v29)
          {
            int v30 = memcmp(v26, p_dst, v27);
            BOOL v31 = v25 < v22;
            if (v30) {
              BOOL v31 = v30 < 0;
            }
            if (!v31)
            {
              if (v21 < 0)
              {
                operator delete(__p);
                std::string::size_type v32 = (void *)v3[1];
                if (v32) {
                  goto LABEL_65;
                }
                do
                {
LABEL_67:
                  unint64_t v33 = (void *)v3[2];
                  BOOL v16 = *v33 == (void)v3;
                  id v3 = v33;
                }
                while (!v16);
              }
              else
              {
                std::string::size_type v32 = (void *)v3[1];
                if (!v32) {
                  goto LABEL_67;
                }
                do
                {
LABEL_65:
                  unint64_t v33 = v32;
                  std::string::size_type v32 = (void *)*v32;
                }
                while (v32);
              }
              id v3 = v33;
              if (v33 == v64)
              {
LABEL_148:
                if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v65.__r_.__value_.__l.__data_);
                }
                return 0;
              }
              goto LABEL_34;
            }
            ++v20;
          }
          size_t v20 = (uint64_t **)*v20;
          if (!v20)
          {
            if (v21 < 0) {
              operator delete(__p);
            }
LABEL_75:
            int v35 = *((char *)v3 + 55);
            if (v35 >= 0) {
              unint64_t v36 = (unint64_t)(v3 + 4);
            }
            else {
              unint64_t v36 = v3[4];
            }
            if (v35 >= 0) {
              std::string::size_type v37 = *((unsigned __int8 *)v3 + 55);
            }
            else {
              std::string::size_type v37 = v3[5];
            }
            sub_19E24F6D8(&v65, (uint64_t)&v65, v36, (std::string::value_type *)(v36 + v37), v37);
            uint64_t v38 = (void *)v3[1];
            if (v38)
            {
              do
              {
                uint64_t v39 = v38;
                uint64_t v38 = (void *)*v38;
              }
              while (v38);
            }
            else
            {
              do
              {
                uint64_t v39 = (void *)v3[2];
                BOOL v16 = *v39 == (void)v3;
                id v3 = v39;
              }
              while (!v16);
            }
            if (v39 == v64) {
              goto LABEL_148;
            }
            while (2)
            {
              if (*((char *)v39 + 55) < 0)
              {
                sub_19E13C2D0(v66, (void *)v39[4], v39[5]);
              }
              else
              {
                *(_OWORD *)long long v66 = *((_OWORD *)v39 + 2);
                uint64_t v67 = v39[6];
              }
              BOOL v40 = *(uint64_t ***)(a1 + 304);
              char v41 = HIBYTE(v67);
              if (v40)
              {
                if (v67 >= 0) {
                  unint64_t v42 = (void *)HIBYTE(v67);
                }
                else {
                  unint64_t v42 = v66[1];
                }
                if (v67 >= 0) {
                  int v43 = v66;
                }
                else {
                  int v43 = (void **)v66[0];
                }
                do
                {
                  int v44 = *((char *)v40 + 55);
                  if (v44 >= 0) {
                    size_t v45 = *((unsigned __int8 *)v40 + 55);
                  }
                  else {
                    size_t v45 = (size_t)v40[5];
                  }
                  if (v44 >= 0) {
                    unint64_t v46 = (uint64_t *)(v40 + 4);
                  }
                  else {
                    unint64_t v46 = v40[4];
                  }
                  if (v45 >= (unint64_t)v42) {
                    size_t v47 = (size_t)v42;
                  }
                  else {
                    size_t v47 = v45;
                  }
                  int v48 = memcmp(v43, v46, v47);
                  BOOL v49 = (unint64_t)v42 < v45;
                  if (v48) {
                    BOOL v49 = v48 < 0;
                  }
                  if (!v49)
                  {
                    int v50 = memcmp(v46, v43, v47);
                    BOOL v51 = v45 < (unint64_t)v42;
                    if (v50) {
                      BOOL v51 = v50 < 0;
                    }
                    if (!v51)
                    {
                      int v52 = 0;
                      if ((v41 & 0x80) == 0) {
                        goto LABEL_121;
                      }
                      goto LABEL_124;
                    }
                    ++v40;
                  }
                  BOOL v40 = (uint64_t **)*v40;
                }
                while (v40);
                int v52 = 1;
                if (v41 < 0) {
                  goto LABEL_124;
                }
LABEL_121:
                if (!v52) {
                  goto LABEL_142;
                }
              }
              else
              {
                int v52 = 1;
                if ((v67 & 0x8000000000000000) == 0) {
                  goto LABEL_121;
                }
LABEL_124:
                operator delete(v66[0]);
                if (!v52)
                {
LABEL_142:
                  std::string::size_type v61 = (void *)v39[1];
                  if (v61)
                  {
                    do
                    {
                      unint64_t v62 = v61;
                      std::string::size_type v61 = (void *)*v61;
                    }
                    while (v61);
                  }
                  else
                  {
                    do
                    {
                      unint64_t v62 = (void *)v39[2];
                      BOOL v16 = *v62 == (void)v39;
                      uint64_t v39 = v62;
                    }
                    while (!v16);
                  }
                  uint64_t v39 = v62;
                  if (v62 == v64) {
                    goto LABEL_148;
                  }
                  continue;
                }
              }
              break;
            }
            std::string::size_type size = HIBYTE(v65.__r_.__value_.__r.__words[2]);
            if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              BOOL v54 = &v65;
            }
            else {
              BOOL v54 = (std::string *)v65.__r_.__value_.__r.__words[0];
            }
            if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type size = v65.__r_.__value_.__l.__size_;
            }
            sub_19E24FB7C(&v65, (uint64_t)v54 + size, (unint64_t)", ", "", 2uLL);
            std::string::size_type v55 = HIBYTE(v65.__r_.__value_.__r.__words[2]);
            if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v56 = &v65;
            }
            else {
              uint64_t v56 = (std::string *)v65.__r_.__value_.__r.__words[0];
            }
            if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v55 = v65.__r_.__value_.__l.__size_;
            }
            uint64_t v57 = (uint64_t)v56 + v55;
            int v58 = *((char *)v39 + 55);
            if (v58 >= 0) {
              unint64_t v59 = (unint64_t)(v39 + 4);
            }
            else {
              unint64_t v59 = v39[4];
            }
            if (v58 >= 0) {
              std::string::size_type v60 = *((unsigned __int8 *)v39 + 55);
            }
            else {
              std::string::size_type v60 = v39[5];
            }
            sub_19E24F6D8(&v65, v57, v59, (std::string::value_type *)(v59 + v60), v60);
            goto LABEL_142;
          }
        }
      }
LABEL_20:
      uint64_t v14 = (void *)v7[1];
      if (v14)
      {
        do
        {
          unint64_t v15 = v14;
          uint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          unint64_t v15 = (void *)v7[2];
          BOOL v16 = *v15 == (void)v7;
          uint64_t v7 = v15;
        }
        while (!v16);
      }
      BOOL v17 = (void *)v6[1];
      if (v17)
      {
        do
        {
          unint64_t v18 = v17;
          BOOL v17 = (void *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          unint64_t v18 = (void *)v6[2];
          BOOL v16 = *v18 == (void)v6;
          BOOL v6 = v18;
        }
        while (!v16);
      }
      BOOL v6 = v18;
      uint64_t v7 = v15;
      if (v15 == v5) {
        goto LABEL_31;
      }
    }
  }
  unsigned int v34 = sub_19E26EDD8();
  BOOL result = os_log_type_enabled(v34, OS_LOG_TYPE_ERROR);
  if (result)
  {
    sub_19E32F420();
    return 0;
  }
  return result;
}

void sub_19E24D558(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    unint64_t v19 = sub_19E26EDD8();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
      sub_19E32F454();
    }
  }
  else
  {
    size_t v20 = sub_19E26EDD8();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
      sub_19E32F4EC();
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x19E24D524);
}

void sub_19E24D5E8(_Unwind_Exception *a1)
{
}

uint64_t sub_19E24D608(uint64_t a1, uint64_t a2)
{
  sub_19E304F28(a1, a2, (uint64_t)__p);
  OutputPorts = (void *)E5RT::ExecutionStreamOperation::GetOutputPorts(*(E5RT::ExecutionStreamOperation **)(a1 + 328));
  if (sub_19E140120(OutputPorts, (uint64_t)__p))
  {
    uint64_t v9 = __p;
    unint64_t v4 = sub_19E24E828(a1 + 344, (uint64_t)__p, (uint64_t)&unk_19E351150, (long long **)&v9);
    uint64_t DataSpan = E5RT::BufferObject::GetDataSpan((E5RT::BufferObject *)v4[5]);
    if ((v8 & 0x80000000) == 0) {
      return DataSpan;
    }
  }
  else
  {
    uint64_t DataSpan = 0;
    if ((v8 & 0x80000000) == 0) {
      return DataSpan;
    }
  }
  operator delete(__p[0]);
  return DataSpan;
}

void sub_19E24D6B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__CFArray *sub_19E24D6D0(uint64_t a1)
{
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  if (*(int *)(a1 + 56) >= 1)
  {
    int v3 = 0;
    do
    {
      if (qword_1E9457D20 != -1) {
        dispatch_once(&qword_1E9457D20, &unk_1EF0ABFE0);
      }
      Instance = (void *)_CFRuntimeCreateInstance();
      Instance[3] = 0;
      Instance[6] = 0;
      Instance[2] = Instance + 3;
      Instance[4] = 0;
      Instance[5] = Instance + 6;
      Instance[8] = 0;
      Instance[9] = 0;
      Instance[7] = 0;
      CFArrayAppendValue(Mutable, Instance);
      CFRelease(Instance);
      ++v3;
    }
    while (v3 < *(_DWORD *)(a1 + 56));
  }
  v49[0] = 0;
  v49[1] = 0;
  int v48 = v49;
  unint64_t v5 = *(const void ***)(a1 + 272);
  if (v5)
  {
    while (1)
    {
      BOOL v6 = (uint64_t **)v49[0];
      if (v49[0])
      {
        int v7 = *((char *)v5 + 63);
        if (v7 >= 0) {
          size_t v8 = *((unsigned __int8 *)v5 + 63);
        }
        else {
          size_t v8 = (size_t)v5[6];
        }
        if (v7 >= 0) {
          uint64_t v9 = v5 + 5;
        }
        else {
          uint64_t v9 = v5[5];
        }
        do
        {
          int v10 = *((char *)v6 + 55);
          if (v10 >= 0) {
            size_t v11 = *((unsigned __int8 *)v6 + 55);
          }
          else {
            size_t v11 = (size_t)v6[5];
          }
          if (v10 >= 0) {
            unint64_t v12 = (uint64_t *)(v6 + 4);
          }
          else {
            unint64_t v12 = v6[4];
          }
          if (v11 >= v8) {
            size_t v13 = v8;
          }
          else {
            size_t v13 = v11;
          }
          int v14 = memcmp(v9, v12, v13);
          BOOL v15 = v8 < v11;
          if (v14) {
            BOOL v15 = v14 < 0;
          }
          if (!v15)
          {
            int v16 = memcmp(v12, v9, v13);
            BOOL v17 = v11 < v8;
            if (v16) {
              BOOL v17 = v16 < 0;
            }
            if (!v17) {
              goto LABEL_8;
            }
            ++v6;
          }
          BOOL v6 = (uint64_t **)*v6;
        }
        while (v6);
      }
      sub_19E140890(&v48, v5 + 5, (uint64_t)(v5 + 5));
      int v18 = *((char *)v5 + 63);
      if (v18 >= 0) {
        size_t v19 = *((unsigned __int8 *)v5 + 63);
      }
      else {
        size_t v19 = (size_t)v5[6];
      }
      unint64_t v20 = v19 + 4;
      if (v19 + 4 >= 0x7FFFFFFFFFFFFFF8) {
        sub_19E13C370();
      }
      if (v20 >= 0x17)
      {
        uint64_t v22 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v20 | 7) != 0x17) {
          uint64_t v22 = v20 | 7;
        }
        uint64_t v23 = v22 + 1;
        p_dst = (void **)operator new(v22 + 1);
        size_t v46 = v19 + 4;
        unint64_t v47 = v23 | 0x8000000000000000;
        long long __dst = p_dst;
      }
      else
      {
        size_t v46 = 0;
        unint64_t v47 = 0;
        long long __dst = 0;
        p_dst = (void **)&__dst;
        HIBYTE(v47) = v19 + 4;
        if (!v19) {
          goto LABEL_47;
        }
      }
      if (v18 >= 0) {
        int v24 = v5 + 5;
      }
      else {
        int v24 = v5[5];
      }
      memmove(p_dst, v24, v19);
LABEL_47:
      strcpy((char *)p_dst + v19, "_out");
      OutputPortRef = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetOutputPortRef();
      PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(OutputPortRef);
      size_t v27 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(PortDescriptorRef);
      sub_19E24CE04((uint64_t)v43, v27, 1);
      int v50 = (void **)&__dst;
      int v28 = sub_19E24E828(a1 + 344, (uint64_t)&__dst, (uint64_t)&unk_19E351150, (long long **)&v50);
      uint64_t DataSpan = E5RT::BufferObject::GetDataSpan((E5RT::BufferObject *)v28[5]);
      LODWORD(v31) = *(_DWORD *)(a1 + 56);
      if ((int)v31 >= 1)
      {
        uint64_t v32 = DataSpan;
        unint64_t v33 = v30;
        CFIndex v34 = 0;
        do
        {
          unint64_t v35 = v33 / (int)v31;
          if (v33 % (int)v31 || v33 < (int)v31 || (v33 > v35 * v34 ? (BOOL v36 = v35 * v34 + v35 > v33) : (BOOL v36 = 1), v36))
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "index out of bounds");
            exception->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E4FBA4B8] + 16);
            __cxa_throw(exception, (struct type_info *)off_1E599CCF8, MEMORY[0x1E4FBA1B8]);
          }
          std::string::size_type v37 = (uint64_t **)((char *)CFArrayGetValueAtIndex(Mutable, v34) + 16);
          v41[0] = v43[0];
          v41[1] = v43[1];
          uint64_t v42 = v44;
          sub_19E253744((uint64_t)v37, (long long *)(v5 + 5), (uint64_t)v41);
          sub_19E2536EC(v37, (long long *)(v5 + 5), (char *)(v32 + v35 * v34++), v35);
          CFIndex v31 = *(int *)(a1 + 56);
        }
        while (v34 < v31);
      }
      if (SHIBYTE(v47) < 0) {
        operator delete(__dst);
      }
LABEL_8:
      unint64_t v5 = (const void **)*v5;
      if (!v5)
      {
        uint64_t v38 = (char *)v49[0];
        goto LABEL_60;
      }
    }
  }
  uint64_t v38 = 0;
LABEL_60:
  sub_19E15A064((uint64_t)&v48, v38);
  return Mutable;
}

void sub_19E24DB08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,char *a26)
{
}

void sub_19E24DB20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,char *a29)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  sub_19E15A064((uint64_t)&a28, a29);
  _Unwind_Resume(a1);
}

uint64_t sub_19E24DBB8(uint64_t a1, uint64_t a2)
{
  sub_19E304C24(a1, a2, (uint64_t)__p);
  unint64_t v2 = v9;
  if ((v9 & 0x80u) != 0) {
    unint64_t v2 = (unint64_t)__p[1];
  }
  if (v2)
  {
    InputPortRef = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetInputPortRef();
    PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(InputPortRef);
    unint64_t v5 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(PortDescriptorRef);
    uint64_t NumElements = E5RT::TensorDescriptor::GetNumElements(v5);
    if ((v9 & 0x80) == 0) {
      return NumElements;
    }
  }
  else
  {
    uint64_t NumElements = 0;
    if ((v9 & 0x80) == 0) {
      return NumElements;
    }
  }
  operator delete(__p[0]);
  return NumElements;
}

void sub_19E24DC4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E24DC68(uint64_t a1, uint64_t a2)
{
  sub_19E304F28(a1, a2, (uint64_t)__p);
  unint64_t v2 = v9;
  if ((v9 & 0x80u) != 0) {
    unint64_t v2 = (unint64_t)__p[1];
  }
  if (v2)
  {
    OutputPortRef = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetOutputPortRef();
    PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(OutputPortRef);
    unint64_t v5 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(PortDescriptorRef);
    uint64_t NumElements = E5RT::TensorDescriptor::GetNumElements(v5);
    if ((v9 & 0x80) == 0) {
      return NumElements;
    }
  }
  else
  {
    uint64_t NumElements = 0;
    if ((v9 & 0x80) == 0) {
      return NumElements;
    }
  }
  operator delete(__p[0]);
  return NumElements;
}

void sub_19E24DCFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E24DD18(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_19E304C24(a1, a2, (uint64_t)__p);
  unint64_t v4 = v10;
  unsigned __int8 v5 = v10;
  if ((v10 & 0x80u) != 0) {
    unint64_t v4 = (unint64_t)__p[1];
  }
  if (v4)
  {
    InputPortRef = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetInputPortRef();
    PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(InputPortRef);
    size_t v8 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(PortDescriptorRef);
    sub_19E24CE04(a3, v8, 0);
    if ((v10 & 0x80) == 0) {
      return;
    }
LABEL_7:
    operator delete(__p[0]);
    return;
  }
  *(void *)(a3 + 32) = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  if ((v5 & 0x80) != 0) {
    goto LABEL_7;
  }
}

void sub_19E24DDB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E24DDD4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_19E304F28(a1, a2, (uint64_t)__p);
  unint64_t v4 = v10;
  unsigned __int8 v5 = v10;
  if ((v10 & 0x80u) != 0) {
    unint64_t v4 = (unint64_t)__p[1];
  }
  if (v4)
  {
    OutputPortRef = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetOutputPortRef();
    PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(OutputPortRef);
    size_t v8 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(PortDescriptorRef);
    sub_19E24CE04(a3, v8, 0);
    if ((v10 & 0x80) == 0) {
      return;
    }
LABEL_7:
    operator delete(__p[0]);
    return;
  }
  *(void *)(a3 + 32) = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  if ((v5 & 0x80) != 0) {
    goto LABEL_7;
  }
}

void sub_19E24DE74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E24DE90()
{
  return 0;
}

void *sub_19E24DE98(void *a1, uint64_t a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >= 0xAAAAAAAAAAAAAABLL) {
      sub_19E13D694();
    }
    uint64_t v5 = 24 * a3;
    BOOL v6 = operator new(24 * a3);
    uint64_t v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    do
    {
      unsigned __int8 v9 = &v6[v7];
      unsigned __int8 v10 = (long long *)(a2 + v7);
      if (*(char *)(a2 + v7 + 23) < 0)
      {
        sub_19E13C2D0(&v6[v7], *(void **)v10, *((void *)v10 + 1));
      }
      else
      {
        long long v8 = *v10;
        *((void *)v9 + 2) = *((void *)v10 + 2);
        *(_OWORD *)unsigned __int8 v9 = v8;
      }
      v7 += 24;
    }
    while (v5 != v7);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_19E24DF78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void ***sub_19E24DFCC(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    unint64_t v2 = *result;
    int v3 = (void **)**result;
    if (v3)
    {
      unint64_t v4 = (void **)v2[1];
      uint64_t v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 1) < 0) {
            operator delete(*(v4 - 3));
          }
          v4 -= 3;
        }
        while (v4 != v3);
        uint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void sub_19E24E064(void *a1)
{
  if (a1[3])
  {
    unint64_t v2 = (void **)a1[2];
    if (v2)
    {
      do
      {
        while (1)
        {
          int v3 = (void **)*v2;
          unint64_t v4 = (std::__shared_weak_count *)v2[6];
          if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
            std::__shared_weak_count::__release_weak(v4);
          }
          if (*((char *)v2 + 39) < 0) {
            break;
          }
          operator delete(v2);
          unint64_t v2 = v3;
          if (!v3) {
            goto LABEL_10;
          }
        }
        operator delete(v2[2]);
        operator delete(v2);
        unint64_t v2 = v3;
      }
      while (v3);
    }
LABEL_10:
    a1[2] = 0;
    uint64_t v5 = a1[1];
    if (v5)
    {
      for (uint64_t i = 0; i != v5; ++i)
        *(void *)(*a1 + 8 * i) = 0;
    }
    a1[3] = 0;
  }
}

uint64_t *sub_19E24E150(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = (unsigned char *)a2;
  unint64_t v9 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v10 = v9;
  }
  unint64_t v11 = sub_19E13CF50((uint64_t)v43, (uint64_t *)a2, v10);
  unint64_t v12 = v11;
  unint64_t v13 = *(void *)(a1 + 8);
  if (v13)
  {
    uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v4 = v11;
      if (v11 >= v13) {
        unint64_t v4 = v11 % v13;
      }
    }
    else
    {
      unint64_t v4 = (v13 - 1) & v11;
    }
    BOOL v15 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      int v16 = *v15;
      if (*v15)
      {
        char v17 = v7[23];
        if (v17 >= 0) {
          uint64_t v18 = v7[23];
        }
        else {
          uint64_t v18 = *((void *)v7 + 1);
        }
        if (v17 < 0) {
          uint64_t v7 = *(unsigned char **)v7;
        }
        if (v14.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v24 = v16[1];
            if (v24 == v12)
            {
              uint64_t v25 = *((unsigned __int8 *)v16 + 39);
              if ((v25 & 0x80u) == 0) {
                uint64_t v26 = *((unsigned __int8 *)v16 + 39);
              }
              else {
                uint64_t v26 = v16[3];
              }
              if (v26 == v18)
              {
                size_t v27 = (const void **)(v16 + 2);
                if ((v25 & 0x80) != 0)
                {
                  if (!memcmp(*v27, v7, v16[3])) {
                    return v16;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v16 + 39)) {
                    return v16;
                  }
                  for (uint64_t i = v7; *(unsigned __int8 *)v27 == *i; ++i)
                  {
                    size_t v27 = (const void **)((char *)v27 + 1);
                    if (!--v25) {
                      return v16;
                    }
                  }
                }
              }
            }
            else if ((v24 & (v13 - 1)) != v4)
            {
              goto LABEL_51;
            }
            int v16 = (uint64_t *)*v16;
            if (!v16) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v19 = v16[1];
          if (v19 == v12)
          {
            uint64_t v20 = *((unsigned __int8 *)v16 + 39);
            if ((v20 & 0x80u) == 0) {
              uint64_t v21 = *((unsigned __int8 *)v16 + 39);
            }
            else {
              uint64_t v21 = v16[3];
            }
            if (v21 == v18)
            {
              uint64_t v22 = (const void **)(v16 + 2);
              if ((v20 & 0x80) != 0)
              {
                if (!memcmp(*v22, v7, v16[3])) {
                  return v16;
                }
              }
              else
              {
                if (!*((unsigned char *)v16 + 39)) {
                  return v16;
                }
                for (uint64_t j = v7; *(unsigned __int8 *)v22 == *j; ++j)
                {
                  uint64_t v22 = (const void **)((char *)v22 + 1);
                  if (!--v20) {
                    return v16;
                  }
                }
              }
            }
          }
          else
          {
            if (v19 >= v13) {
              v19 %= v13;
            }
            if (v19 != v4) {
              break;
            }
          }
          int v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
    }
  }
LABEL_51:
  sub_19E24E580(a1, v12, a3, a4, (uint64_t)v43);
  float v29 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v30 = *(float *)(a1 + 32);
  if (!v13 || (float)(v30 * (float)v13) < v29)
  {
    BOOL v32 = 1;
    if (v13 >= 3) {
      BOOL v32 = (v13 & (v13 - 1)) != 0;
    }
    unint64_t v33 = v32 | (2 * v13);
    unint64_t v34 = vcvtps_u32_f32(v29 / v30);
    if (v33 <= v34) {
      size_t prime = v34;
    }
    else {
      size_t prime = v33;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v36 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v36) {
      goto LABEL_65;
    }
    if (prime < *(void *)&v36)
    {
      unint64_t v37 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v36 < 3uLL || (uint8x8_t v38 = (uint8x8_t)vcnt_s8(v36), v38.i16[0] = vaddlv_u8(v38), v38.u32[0] > 1uLL))
      {
        unint64_t v37 = std::__next_prime(v37);
      }
      else
      {
        uint64_t v39 = 1 << -(char)__clz(v37 - 1);
        if (v37 >= 2) {
          unint64_t v37 = v39;
        }
      }
      if (prime <= v37) {
        size_t prime = v37;
      }
      if (prime < *(void *)&v36) {
LABEL_65:
      }
        sub_19E13D39C(a1, prime);
    }
    unint64_t v13 = *(void *)(a1 + 8);
    unint64_t v40 = v13 - 1;
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13)
      {
        unint64_t v4 = v12 % v13;
        CFIndex v31 = *(void **)(*(void *)a1 + 8 * (v12 % v13));
        if (v31) {
          goto LABEL_54;
        }
      }
      else
      {
        unint64_t v4 = v12;
        CFIndex v31 = *(void **)(*(void *)a1 + 8 * v12);
        if (v31) {
          goto LABEL_54;
        }
      }
    }
    else
    {
      unint64_t v4 = v40 & v12;
      CFIndex v31 = *(void **)(*(void *)a1 + 8 * (v40 & v12));
      if (v31) {
        goto LABEL_54;
      }
    }
LABEL_78:
    *(void *)v43[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v43[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v43[0])
    {
      unint64_t v41 = *(void *)(*(void *)v43[0] + 8);
      if ((v13 & (v13 - 1)) != 0)
      {
        if (v41 >= v13) {
          v41 %= v13;
        }
      }
      else
      {
        v41 &= v13 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v41) = v43[0];
    }
    goto LABEL_89;
  }
  CFIndex v31 = *(void **)(*(void *)a1 + 8 * v4);
  if (!v31) {
    goto LABEL_78;
  }
LABEL_54:
  *(void *)v43[0] = *v31;
  void *v31 = v43[0];
LABEL_89:
  int v16 = (uint64_t *)v43[0];
  ++*(void *)(a1 + 24);
  return v16;
}

void sub_19E24E568(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E24E69C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E24E580@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  unint64_t v10 = operator new(0x38uLL);
  unint64_t v11 = v10;
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v9;
  *(unsigned char *)(a5 + 16) = 0;
  *unint64_t v10 = 0;
  v10[1] = a2;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_19E13C2D0((unsigned char *)v10 + 16, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *((_OWORD *)v10 + 1) = *(_OWORD *)a3;
    v10[4] = *(void *)(a3 + 16);
  }
  uint64_t v12 = *a4;
  v11[5] = *a4;
  if (v12) {
    operator new();
  }
  uint64_t result = 0;
  v11[6] = 0;
  *a4 = 0;
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_19E24E664(_Unwind_Exception *a1)
{
  sub_19E24E69C(v1);
  _Unwind_Resume(a1);
}

void sub_19E24E678(_Unwind_Exception *a1)
{
  if (*(char *)(v2 + 39) < 0) {
    operator delete(*v3);
  }
  sub_19E24E69C(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_19E24E69C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      int v3 = *(std::__shared_weak_count **)(v2 + 48);
      if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
        if ((*(char *)(v2 + 39) & 0x80000000) == 0) {
          goto LABEL_7;
        }
        goto LABEL_6;
      }
      if (*(char *)(v2 + 39) < 0) {
LABEL_6:
      }
        operator delete(*(void **)(v2 + 16));
    }
LABEL_7:
    operator delete((void *)v2);
  }
  return a1;
}

void sub_19E24E74C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_19E24E774(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_19E24E7A4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x800000019E3518EDLL) {
    return a1 + 24;
  }
  if (((v3 & 0x800000019E3518EDLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000019E3518EDLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000019E3518EDLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

uint64_t *sub_19E24E828(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  BOOL v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = sub_19E13CF50((uint64_t)v47, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    uint8x8_t v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      BOOL v15 = *v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          BOOL v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v23 = v15[1];
            if (v23 == v11)
            {
              uint64_t v24 = *((unsigned __int8 *)v15 + 39);
              if ((v24 & 0x80u) == 0) {
                uint64_t v25 = *((unsigned __int8 *)v15 + 39);
              }
              else {
                uint64_t v25 = v15[3];
              }
              if (v25 == v17)
              {
                uint64_t v26 = (const void **)(v15 + 2);
                if ((v24 & 0x80) != 0)
                {
                  if (!memcmp(*v26, v6, v15[3])) {
                    return v15;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v15 + 39)) {
                    return v15;
                  }
                  for (uint64_t i = v6; *(unsigned __int8 *)v26 == *i; ++i)
                  {
                    uint64_t v26 = (const void **)((char *)v26 + 1);
                    if (!--v24) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v23 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            BOOL v15 = (uint64_t *)*v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = v15[1];
          if (v18 == v11)
          {
            uint64_t v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = *((unsigned __int8 *)v15 + 39);
            }
            else {
              uint64_t v20 = v15[3];
            }
            if (v20 == v17)
            {
              uint64_t v21 = (const void **)(v15 + 2);
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*v21, v6, v15[3])) {
                  return v15;
                }
              }
              else
              {
                if (!*((unsigned char *)v15 + 39)) {
                  return v15;
                }
                for (uint64_t j = v6; *(unsigned __int8 *)v21 == *j; ++j)
                {
                  uint64_t v21 = (const void **)((char *)v21 + 1);
                  if (!--v19) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          BOOL v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  int v28 = operator new(0x38uLL);
  v47[0] = v28;
  v47[1] = a1 + 16;
  char v48 = 0;
  void *v28 = 0;
  v28[1] = v11;
  float v29 = v28 + 2;
  float v30 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_19E13C2D0(v29, *(void **)v30, *((void *)v30 + 1));
  }
  else
  {
    long long v31 = *v30;
    v28[4] = *((void *)v30 + 2);
    *(_OWORD *)float v29 = v31;
  }
  v28[5] = 0;
  v28[6] = 0;
  char v48 = 1;
  float v32 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v33 = *(float *)(a1 + 32);
  if (!v12 || (float)(v33 * (float)v12) < v32)
  {
    BOOL v36 = 1;
    if (v12 >= 3) {
      BOOL v36 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v37 = v36 | (2 * v12);
    unint64_t v38 = vcvtps_u32_f32(v32 / v33);
    if (v37 <= v38) {
      size_t prime = v38;
    }
    else {
      size_t prime = v37;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v40 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v40) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v40)
    {
      unint64_t v41 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v40 < 3uLL || (uint8x8_t v42 = (uint8x8_t)vcnt_s8(v40), v42.i16[0] = vaddlv_u8(v42), v42.u32[0] > 1uLL))
      {
        unint64_t v41 = std::__next_prime(v41);
      }
      else
      {
        uint64_t v43 = 1 << -(char)__clz(v41 - 1);
        if (v41 >= 2) {
          unint64_t v41 = v43;
        }
      }
      if (prime <= v41) {
        size_t prime = v41;
      }
      if (prime < *(void *)&v40) {
LABEL_68:
      }
        sub_19E13D39C(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v44 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        unint64_t v34 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        unint64_t v35 = (void *)v47[0];
        if (v34) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v4 = v11;
        unint64_t v34 = *(void **)(*(void *)a1 + 8 * v11);
        unint64_t v35 = (void *)v47[0];
        if (v34) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v4 = v44 & v11;
      unint64_t v34 = *(void **)(*(void *)a1 + 8 * (v44 & v11));
      unint64_t v35 = (void *)v47[0];
      if (v34) {
        goto LABEL_57;
      }
    }
LABEL_81:
    void *v35 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v47[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v47[0])
    {
      unint64_t v45 = *(void *)(*(void *)v47[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v45 >= v12) {
          v45 %= v12;
        }
      }
      else
      {
        v45 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v45) = v47[0];
    }
    goto LABEL_92;
  }
  unint64_t v34 = *(void **)(*(void *)a1 + 8 * v4);
  unint64_t v35 = (void *)v47[0];
  if (!v34) {
    goto LABEL_81;
  }
LABEL_57:
  void *v35 = *v34;
  void *v34 = v47[0];
LABEL_92:
  BOOL v15 = (uint64_t *)v47[0];
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_19E24EC78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E24E69C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19E24EC8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E24E69C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_19E24ECA4(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  BOOL v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = sub_19E13CF50((uint64_t)v47, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    uint8x8_t v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      BOOL v15 = *v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          BOOL v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v23 = v15[1];
            if (v23 == v11)
            {
              uint64_t v24 = *((unsigned __int8 *)v15 + 39);
              if ((v24 & 0x80u) == 0) {
                uint64_t v25 = *((unsigned __int8 *)v15 + 39);
              }
              else {
                uint64_t v25 = v15[3];
              }
              if (v25 == v17)
              {
                uint64_t v26 = (const void **)(v15 + 2);
                if ((v24 & 0x80) != 0)
                {
                  if (!memcmp(*v26, v6, v15[3])) {
                    return v15;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v15 + 39)) {
                    return v15;
                  }
                  for (uint64_t i = v6; *(unsigned __int8 *)v26 == *i; ++i)
                  {
                    uint64_t v26 = (const void **)((char *)v26 + 1);
                    if (!--v24) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v23 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            BOOL v15 = (uint64_t *)*v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = v15[1];
          if (v18 == v11)
          {
            uint64_t v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = *((unsigned __int8 *)v15 + 39);
            }
            else {
              uint64_t v20 = v15[3];
            }
            if (v20 == v17)
            {
              uint64_t v21 = (const void **)(v15 + 2);
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*v21, v6, v15[3])) {
                  return v15;
                }
              }
              else
              {
                if (!*((unsigned char *)v15 + 39)) {
                  return v15;
                }
                for (uint64_t j = v6; *(unsigned __int8 *)v21 == *j; ++j)
                {
                  uint64_t v21 = (const void **)((char *)v21 + 1);
                  if (!--v19) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          BOOL v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  int v28 = operator new(0x40uLL);
  v47[0] = v28;
  v47[1] = a1 + 16;
  char v48 = 0;
  void *v28 = 0;
  v28[1] = v11;
  float v29 = v28 + 2;
  float v30 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_19E13C2D0(v29, *(void **)v30, *((void *)v30 + 1));
  }
  else
  {
    long long v31 = *v30;
    v28[4] = *((void *)v30 + 2);
    *(_OWORD *)float v29 = v31;
  }
  v28[5] = 0;
  v28[6] = 0;
  v28[7] = 0;
  char v48 = 1;
  float v32 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v33 = *(float *)(a1 + 32);
  if (!v12 || (float)(v33 * (float)v12) < v32)
  {
    BOOL v36 = 1;
    if (v12 >= 3) {
      BOOL v36 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v37 = v36 | (2 * v12);
    unint64_t v38 = vcvtps_u32_f32(v32 / v33);
    if (v37 <= v38) {
      size_t prime = v38;
    }
    else {
      size_t prime = v37;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v40 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v40) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v40)
    {
      unint64_t v41 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v40 < 3uLL || (uint8x8_t v42 = (uint8x8_t)vcnt_s8(v40), v42.i16[0] = vaddlv_u8(v42), v42.u32[0] > 1uLL))
      {
        unint64_t v41 = std::__next_prime(v41);
      }
      else
      {
        uint64_t v43 = 1 << -(char)__clz(v41 - 1);
        if (v41 >= 2) {
          unint64_t v41 = v43;
        }
      }
      if (prime <= v41) {
        size_t prime = v41;
      }
      if (prime < *(void *)&v40) {
LABEL_68:
      }
        sub_19E13D39C(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v44 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        unint64_t v34 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        unint64_t v35 = (void *)v47[0];
        if (v34) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v4 = v11;
        unint64_t v34 = *(void **)(*(void *)a1 + 8 * v11);
        unint64_t v35 = (void *)v47[0];
        if (v34) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v4 = v44 & v11;
      unint64_t v34 = *(void **)(*(void *)a1 + 8 * (v44 & v11));
      unint64_t v35 = (void *)v47[0];
      if (v34) {
        goto LABEL_57;
      }
    }
LABEL_81:
    void *v35 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v47[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v47[0])
    {
      unint64_t v45 = *(void *)(*(void *)v47[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v45 >= v12) {
          v45 %= v12;
        }
      }
      else
      {
        v45 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v45) = v47[0];
    }
    goto LABEL_92;
  }
  unint64_t v34 = *(void **)(*(void *)a1 + 8 * v4);
  unint64_t v35 = (void *)v47[0];
  if (!v34) {
    goto LABEL_81;
  }
LABEL_57:
  void *v35 = *v34;
  void *v34 = v47[0];
LABEL_92:
  BOOL v15 = (uint64_t *)v47[0];
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_19E24F0F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E24F124((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19E24F10C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E24F124((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_19E24F124(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      if (*(char *)(v2 + 63) < 0)
      {
        operator delete(*(void **)(v2 + 40));
        if ((*(char *)(v2 + 39) & 0x80000000) == 0) {
          goto LABEL_5;
        }
      }
      else if ((*(char *)(v2 + 39) & 0x80000000) == 0)
      {
        goto LABEL_5;
      }
      operator delete(*(void **)(v2 + 16));
    }
LABEL_5:
    operator delete((void *)v2);
  }
  return a1;
}

void sub_19E24F194(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_19E24F1BC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_19E24F1EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x800000019E35198CLL) {
    return a1 + 24;
  }
  if (((v3 & 0x800000019E35198CLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000019E35198CLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000019E35198CLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

unsigned __int8 *sub_19E24F270(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  BOOL v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = sub_19E13CF50((uint64_t)v46, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    uint8x8_t v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      BOOL v15 = (unsigned __int8 *)*v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          BOOL v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v23 = *((void *)v15 + 1);
            if (v23 == v11)
            {
              uint64_t v24 = v15[39];
              if ((v24 & 0x80u) == 0) {
                uint64_t v25 = v15[39];
              }
              else {
                uint64_t v25 = *((void *)v15 + 3);
              }
              if (v25 == v17)
              {
                uint64_t v26 = (const void **)(v15 + 16);
                if ((v24 & 0x80) != 0)
                {
                  if (!memcmp(*v26, v6, *((void *)v15 + 3))) {
                    return v15;
                  }
                }
                else
                {
                  if (!v15[39]) {
                    return v15;
                  }
                  for (uint64_t i = v6; *(unsigned __int8 *)v26 == *i; ++i)
                  {
                    uint64_t v26 = (const void **)((char *)v26 + 1);
                    if (!--v24) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v23 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            BOOL v15 = *(unsigned __int8 **)v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = *((void *)v15 + 1);
          if (v18 == v11)
          {
            uint64_t v19 = v15[39];
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = v15[39];
            }
            else {
              uint64_t v20 = *((void *)v15 + 3);
            }
            if (v20 == v17)
            {
              uint64_t v21 = (const void **)(v15 + 16);
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*v21, v6, *((void *)v15 + 3))) {
                  return v15;
                }
              }
              else
              {
                if (!v15[39]) {
                  return v15;
                }
                for (uint64_t j = v6; *(unsigned __int8 *)v21 == *j; ++j)
                {
                  uint64_t v21 = (const void **)((char *)v21 + 1);
                  if (!--v19) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          BOOL v15 = *(unsigned __int8 **)v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  int v28 = (void *)(a1 + 16);
  BOOL v15 = (unsigned __int8 *)operator new(0x38uLL);
  v46[0] = v15;
  v46[1] = a1 + 16;
  *(void *)BOOL v15 = 0;
  *((void *)v15 + 1) = v11;
  float v29 = *a4;
  long long v30 = **a4;
  *((void *)v15 + 4) = *((void *)*a4 + 2);
  *((_OWORD *)v15 + 1) = v30;
  *((void *)v29 + 1) = 0;
  *((void *)v29 + 2) = 0;
  *(void *)float v29 = 0;
  *((void *)v15 + 5) = 0;
  *((void *)v15 + 6) = 0;
  char v47 = 1;
  float v31 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v32 = *(float *)(a1 + 32);
  if (v12 && (float)(v32 * (float)v12) >= v31)
  {
    uint64_t v33 = *(void *)a1;
    unint64_t v34 = *(void **)(*(void *)a1 + 8 * v4);
    if (v34)
    {
LABEL_54:
      *(void *)BOOL v15 = *v34;
LABEL_89:
      void *v34 = v15;
      goto LABEL_90;
    }
  }
  else
  {
    BOOL v35 = 1;
    if (v12 >= 3) {
      BOOL v35 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v36 = v35 | (2 * v12);
    unint64_t v37 = vcvtps_u32_f32(v31 / v32);
    if (v36 <= v37) {
      size_t prime = v37;
    }
    else {
      size_t prime = v36;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v39 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v39) {
      goto LABEL_65;
    }
    if (prime < *(void *)&v39)
    {
      unint64_t v40 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v39 < 3uLL || (uint8x8_t v41 = (uint8x8_t)vcnt_s8(v39), v41.i16[0] = vaddlv_u8(v41), v41.u32[0] > 1uLL))
      {
        unint64_t v40 = std::__next_prime(v40);
      }
      else
      {
        uint64_t v42 = 1 << -(char)__clz(v40 - 1);
        if (v40 >= 2) {
          unint64_t v40 = v42;
        }
      }
      if (prime <= v40) {
        size_t prime = v40;
      }
      if (prime < *(void *)&v39) {
LABEL_65:
      }
        sub_19E13D39C(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v43 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        uint64_t v33 = *(void *)a1;
        unint64_t v34 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        if (v34) {
          goto LABEL_54;
        }
      }
      else
      {
        unint64_t v4 = v11;
        uint64_t v33 = *(void *)a1;
        unint64_t v34 = *(void **)(*(void *)a1 + 8 * v11);
        if (v34) {
          goto LABEL_54;
        }
      }
    }
    else
    {
      unint64_t v4 = v43 & v11;
      uint64_t v33 = *(void *)a1;
      unint64_t v34 = *(void **)(*(void *)a1 + 8 * (v43 & v11));
      if (v34) {
        goto LABEL_54;
      }
    }
  }
  *(void *)BOOL v15 = *v28;
  void *v28 = v15;
  *(void *)(v33 + 8 * v4) = v28;
  if (*(void *)v15)
  {
    unint64_t v44 = *(void *)(*(void *)v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v44 >= v12) {
        v44 %= v12;
      }
    }
    else
    {
      v44 &= v12 - 1;
    }
    unint64_t v34 = (void *)(*(void *)a1 + 8 * v44);
    goto LABEL_89;
  }
LABEL_90:
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_19E24F68C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E24E69C((uint64_t *)va);
  _Unwind_Resume(a1);
}

std::runtime_error *sub_19E24F6A4(std::runtime_error *a1, const char *a2)
{
  uint64_t result = std::runtime_error::runtime_error(a1, a2);
  result->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E4FBA4B8] + 16);
  return result;
}

char *sub_19E24F6D8(std::string *this, uint64_t a2, unint64_t a3, std::string::value_type *a4, std::string::size_type __n_add)
{
  uint64_t v7 = (std::string::value_type *)a3;
  unint64_t v8 = this;
  int v9 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if (v9 < 0)
  {
    uint8x8_t v13 = (std::string *)this->__r_.__value_.__r.__words[0];
    std::string::size_type v10 = a2 - this->__r_.__value_.__r.__words[0];
    if (__n_add)
    {
      std::string::size_type size = this->__r_.__value_.__l.__size_;
      if ((unint64_t)v13 > a3 || (unint64_t)v13->__r_.__value_.__r.__words + size + 1 <= a3)
      {
        std::string::size_type v12 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if (v12 - size < __n_add)
        {
LABEL_6:
          std::string::__grow_by(this, v12, size + __n_add - v12, size, v10, 0, __n_add);
          v8->__r_.__value_.__l.__size_ = size + __n_add;
          uint8x8_t v13 = (std::string *)v8->__r_.__value_.__r.__words[0];
          std::string::size_type v14 = size + __n_add;
          if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0)
          {
LABEL_39:
            v8->__r_.__value_.__l.__size_ = v14;
            v13->__r_.__value_.__s.__data_[v14] = 0;
            unint64_t v16 = a4 - v7;
            if (a4 == v7) {
              goto LABEL_71;
            }
            goto LABEL_40;
          }
LABEL_16:
          *((unsigned char *)&v8->__r_.__value_.__s + 23) = v14 & 0x7F;
          v13->__r_.__value_.__s.__data_[v14] = 0;
          unint64_t v16 = a4 - v7;
          if (a4 == v7) {
            goto LABEL_71;
          }
LABEL_40:
          size_t v27 = (char *)v13 + v10;
          if (v16 < 8)
          {
            int v28 = v7;
            goto LABEL_70;
          }
          int v28 = v7;
          if ((unint64_t)((char *)v13 + v10 - v7) >= 0x20)
          {
            if (v16 < 0x20)
            {
              unint64_t v29 = 0;
              goto LABEL_57;
            }
            unint64_t v29 = v16 & 0xFFFFFFFFFFFFFFE0;
            uint64_t v33 = (long long *)(v7 + 16);
            unint64_t v34 = (_OWORD *)((char *)&v13->__r_.__value_.__r.__words[2] + v10);
            unint64_t v35 = v16 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v36 = *v33;
              *(v34 - 1) = *(v33 - 1);
              _OWORD *v34 = v36;
              v33 += 2;
              v34 += 2;
              v35 -= 32;
            }
            while (v35);
            if (v16 == v29) {
              goto LABEL_71;
            }
            if ((v16 & 0x18) != 0)
            {
LABEL_57:
              v27 += v16 & 0xFFFFFFFFFFFFFFF8;
              int v28 = &v7[v16 & 0xFFFFFFFFFFFFFFF8];
              unint64_t v37 = &v7[v29];
              unint64_t v38 = (std::string::size_type *)((char *)v13->__r_.__value_.__r.__words + v10 + v29);
              unint64_t v39 = v29 - (v16 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                uint64_t v40 = *(void *)v37;
                v37 += 8;
                *v38++ = v40;
                v39 += 8;
              }
              while (v39);
              if (v16 != (v16 & 0xFFFFFFFFFFFFFFF8)) {
                goto LABEL_70;
              }
LABEL_71:
              if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0) {
                unint64_t v8 = (std::string *)v8->__r_.__value_.__r.__words[0];
              }
              return (char *)v8 + v10;
            }
            int v28 = &v7[v29];
            v27 += v29;
          }
          do
          {
LABEL_70:
            char v49 = *v28++;
            *v27++ = v49;
          }
          while (v28 != a4);
          goto LABEL_71;
        }
LABEL_14:
        if (size == v10)
        {
          std::string::size_type v14 = v10 + __n_add;
          if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_39;
          }
        }
        else
        {
          memmove((char *)v13 + v10 + __n_add, (char *)v13 + v10, size - v10);
          std::string::size_type v14 = size + __n_add;
          if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_39;
          }
        }
        goto LABEL_16;
      }
LABEL_18:
      memset(&v53, 0, sizeof(v53));
      if ((std::string::value_type *)a3 == a4)
      {
        std::string::size_type v19 = 0;
        std::string::size_type v18 = 0;
        unsigned int v17 = 0;
      }
      else
      {
        do
          std::string::push_back(&v53, *v7++);
        while (v7 != a4);
        unsigned int v17 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
        std::string::size_type v19 = v53.__r_.__value_.__l.__size_;
        std::string::size_type v18 = v53.__r_.__value_.__r.__words[0];
        LOBYTE(v9) = *((unsigned char *)&v8->__r_.__value_.__s + 23);
      }
      if ((v17 & 0x80u) == 0) {
        uint64_t v20 = &v53;
      }
      else {
        uint64_t v20 = (std::string *)v18;
      }
      if ((v17 & 0x80u) == 0) {
        unint64_t v21 = v17;
      }
      else {
        unint64_t v21 = v19;
      }
      if ((v9 & 0x80) != 0)
      {
        std::string::size_type v22 = v8->__r_.__value_.__l.__size_;
        std::string::size_type v23 = (v8->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if (v23 - v22 >= __n_add)
        {
          uint64_t v24 = (std::string *)v8->__r_.__value_.__r.__words[0];
          size_t v25 = v22 - v10;
          if (v22 == v10)
          {
LABEL_32:
            std::string::size_type v26 = v10 + __n_add;
            if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0)
            {
LABEL_47:
              v8->__r_.__value_.__l.__size_ = v26;
              v24->__r_.__value_.__s.__data_[v26] = 0;
              if (!v21) {
                goto LABEL_76;
              }
              goto LABEL_48;
            }
LABEL_36:
            *((unsigned char *)&v8->__r_.__value_.__s + 23) = v26 & 0x7F;
            v24->__r_.__value_.__s.__data_[v26] = 0;
            if (!v21) {
              goto LABEL_76;
            }
LABEL_48:
            long long v30 = (char *)v24 + v10;
            if (v21 < 8)
            {
              float v31 = v20;
              goto LABEL_75;
            }
            float v31 = v20;
            if ((unint64_t)((char *)v24 + v10 - (char *)v20) >= 0x20)
            {
              if (v21 < 0x20)
              {
                unint64_t v32 = 0;
                goto LABEL_65;
              }
              unint64_t v32 = v21 & 0xFFFFFFFFFFFFFFE0;
              uint8x8_t v41 = &v20->__r_.__value_.__r.__words[2];
              uint64_t v42 = (_OWORD *)((char *)&v24->__r_.__value_.__r.__words[2] + v10);
              unint64_t v43 = v21 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                long long v44 = *(_OWORD *)v41;
                *(v42 - 1) = *((_OWORD *)v41 - 1);
                _OWORD *v42 = v44;
                v41 += 4;
                v42 += 2;
                v43 -= 32;
              }
              while (v43);
              if (v21 == v32) {
                goto LABEL_76;
              }
              if ((v21 & 0x18) != 0)
              {
LABEL_65:
                v30 += v21 & 0xFFFFFFFFFFFFFFF8;
                float v31 = (std::string *)((char *)v20 + (v21 & 0xFFFFFFFFFFFFFFF8));
                unint64_t v45 = (uint64_t *)((char *)v20 + v32);
                size_t v46 = (std::string::size_type *)((char *)v24->__r_.__value_.__r.__words + v32 + v10);
                unint64_t v47 = v32 - (v21 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  uint64_t v48 = *v45++;
                  *v46++ = v48;
                  v47 += 8;
                }
                while (v47);
                if (v21 != (v21 & 0xFFFFFFFFFFFFFFF8)) {
                  goto LABEL_75;
                }
LABEL_76:
                if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0)
                {
                  int v50 = (char *)(v8->__r_.__value_.__r.__words[0] + v10);
                  if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                    return v50;
                  }
                }
                else
                {
                  int v50 = (char *)v8 + v10;
                  if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                    return v50;
                  }
                }
                operator delete(v53.__r_.__value_.__l.__data_);
                return v50;
              }
              float v31 = (std::string *)((char *)v20 + v32);
              v30 += v32;
            }
            do
            {
LABEL_75:
              std::string::value_type v51 = v31->__r_.__value_.__s.__data_[0];
              float v31 = (std::string *)((char *)v31 + 1);
              *v30++ = v51;
            }
            while (v31 != (std::string *)((char *)v20 + v21));
            goto LABEL_76;
          }
LABEL_46:
          memmove((char *)v24 + v10 + __n_add, (char *)v24 + v10, v25);
          std::string::size_type v26 = v22 + __n_add;
          if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_47;
          }
          goto LABEL_36;
        }
      }
      else
      {
        std::string::size_type v22 = v9;
        std::string::size_type v23 = 22;
        uint64_t v24 = v8;
        if (22 - (unint64_t)v9 >= __n_add)
        {
          size_t v25 = v9 - v10;
          if (v9 == v10) {
            goto LABEL_32;
          }
          goto LABEL_46;
        }
      }
      std::string::__grow_by(v8, v23, v22 + __n_add - v23, v22, v10, 0, __n_add);
      v8->__r_.__value_.__l.__size_ = v22 + __n_add;
      uint64_t v24 = (std::string *)v8->__r_.__value_.__r.__words[0];
      std::string::size_type v26 = v22 + __n_add;
      if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_47;
      }
      goto LABEL_36;
    }
    unint64_t v8 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    std::string::size_type v10 = a2 - (void)this;
    if (__n_add)
    {
      std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      if (a3 < (unint64_t)this || (unint64_t)this->__r_.__value_.__r.__words + size + 1 <= a3)
      {
        std::string::size_type v12 = 22;
        uint8x8_t v13 = this;
        if (22 - size < __n_add) {
          goto LABEL_6;
        }
        goto LABEL_14;
      }
      goto LABEL_18;
    }
  }
  return (char *)v8 + v10;
}

void sub_19E24FB30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char *sub_19E24FB7C(std::string *this, uint64_t a2, unint64_t a3, std::string::value_type *a4, std::string::size_type __n_add)
{
  uint64_t v7 = (std::string::value_type *)a3;
  unint64_t v8 = this;
  int v9 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if (v9 < 0)
  {
    uint8x8_t v13 = (std::string *)this->__r_.__value_.__r.__words[0];
    std::string::size_type v10 = a2 - this->__r_.__value_.__r.__words[0];
    if (__n_add)
    {
      std::string::size_type size = this->__r_.__value_.__l.__size_;
      if ((unint64_t)v13 > a3 || (unint64_t)v13->__r_.__value_.__r.__words + size + 1 <= a3)
      {
        std::string::size_type v12 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if (v12 - size < __n_add)
        {
LABEL_6:
          std::string::__grow_by(this, v12, size + __n_add - v12, size, v10, 0, __n_add);
          v8->__r_.__value_.__l.__size_ = size + __n_add;
          uint8x8_t v13 = (std::string *)v8->__r_.__value_.__r.__words[0];
          std::string::size_type v14 = size + __n_add;
          if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0)
          {
LABEL_39:
            v8->__r_.__value_.__l.__size_ = v14;
            v13->__r_.__value_.__s.__data_[v14] = 0;
            if (v7 == a4) {
              goto LABEL_72;
            }
            goto LABEL_40;
          }
LABEL_16:
          *((unsigned char *)&v8->__r_.__value_.__s + 23) = v14 & 0x7F;
          v13->__r_.__value_.__s.__data_[v14] = 0;
          if (v7 == a4) {
            goto LABEL_72;
          }
LABEL_40:
          std::string::size_type v26 = (char *)v13 + v10;
          unint64_t v27 = a4 - v7;
          if ((unint64_t)(a4 - v7) < 8)
          {
            int v28 = v7;
            goto LABEL_71;
          }
          if ((unint64_t)((char *)v13 + v10 - v7) < 0x20)
          {
            int v28 = v7;
            goto LABEL_71;
          }
          if (v27 >= 0x20)
          {
            unint64_t v32 = v27 & 0xFFFFFFFFFFFFFFE0;
            uint64_t v33 = (_OWORD *)((char *)&v13->__r_.__value_.__r.__words[2] + v10);
            unint64_t v34 = (long long *)(v7 + 16);
            unint64_t v35 = v27 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v36 = *v34;
              *(v33 - 1) = *(v34 - 1);
              _OWORD *v33 = v36;
              v33 += 2;
              v34 += 2;
              v35 -= 32;
            }
            while (v35);
            if (v27 == v32) {
              goto LABEL_72;
            }
            if ((v27 & 0x18) == 0)
            {
              v26 += v32;
              int v28 = &v7[v32];
              do
              {
LABEL_71:
                char v49 = *v28++;
                *v26++ = v49;
              }
              while (v28 != a4);
              goto LABEL_72;
            }
          }
          else
          {
            unint64_t v32 = 0;
          }
          int v28 = &v7[v27 & 0xFFFFFFFFFFFFFFF8];
          v26 += v27 & 0xFFFFFFFFFFFFFFF8;
          unint64_t v37 = (std::string::size_type *)((char *)v13->__r_.__value_.__r.__words + v10 + v32);
          unint64_t v38 = &v7[v32];
          unint64_t v39 = v32 - (v27 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v40 = *(void *)v38;
            v38 += 8;
            *v37++ = v40;
            v39 += 8;
          }
          while (v39);
          if (v27 != (v27 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_71;
          }
LABEL_72:
          if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0) {
            unint64_t v8 = (std::string *)v8->__r_.__value_.__r.__words[0];
          }
          return (char *)v8 + v10;
        }
LABEL_14:
        if (size == v10)
        {
          std::string::size_type v14 = v10 + __n_add;
          if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_39;
          }
        }
        else
        {
          memmove((char *)v13 + v10 + __n_add, (char *)v13 + v10, size - v10);
          std::string::size_type v14 = size + __n_add;
          if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_39;
          }
        }
        goto LABEL_16;
      }
LABEL_18:
      memset(&v53, 0, sizeof(v53));
      if ((std::string::value_type *)a3 == a4)
      {
        std::string::size_type v18 = 0;
        std::string::size_type v17 = 0;
        unsigned int v16 = 0;
      }
      else
      {
        do
          std::string::push_back(&v53, *v7++);
        while (v7 != a4);
        unsigned int v16 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
        std::string::size_type v18 = v53.__r_.__value_.__l.__size_;
        std::string::size_type v17 = v53.__r_.__value_.__r.__words[0];
        LOBYTE(v9) = *((unsigned char *)&v8->__r_.__value_.__s + 23);
      }
      if ((v16 & 0x80u) == 0) {
        std::string::size_type v19 = &v53;
      }
      else {
        std::string::size_type v19 = (std::string *)v17;
      }
      if ((v16 & 0x80u) == 0) {
        unint64_t v20 = v16;
      }
      else {
        unint64_t v20 = v18;
      }
      if ((v9 & 0x80) != 0)
      {
        std::string::size_type v21 = v8->__r_.__value_.__l.__size_;
        std::string::size_type v22 = (v8->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if (v22 - v21 >= __n_add)
        {
          std::string::size_type v23 = (std::string *)v8->__r_.__value_.__r.__words[0];
          size_t v24 = v21 - v10;
          if (v21 == v10)
          {
LABEL_32:
            std::string::size_type v25 = v10 + __n_add;
            if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0)
            {
LABEL_46:
              v8->__r_.__value_.__l.__size_ = v25;
              v23->__r_.__value_.__s.__data_[v25] = 0;
              if (!v20) {
                goto LABEL_77;
              }
              goto LABEL_47;
            }
LABEL_36:
            *((unsigned char *)&v8->__r_.__value_.__s + 23) = v25 & 0x7F;
            v23->__r_.__value_.__s.__data_[v25] = 0;
            if (!v20) {
              goto LABEL_77;
            }
LABEL_47:
            unint64_t v29 = (char *)v23 + v10;
            if (v20 < 8)
            {
              long long v30 = v19;
              goto LABEL_76;
            }
            long long v30 = v19;
            if ((unint64_t)((char *)v23 + v10 - (char *)v19) >= 0x20)
            {
              if (v20 < 0x20)
              {
                unint64_t v31 = 0;
                goto LABEL_66;
              }
              unint64_t v31 = v20 & 0xFFFFFFFFFFFFFFE0;
              uint8x8_t v41 = &v19->__r_.__value_.__r.__words[2];
              uint64_t v42 = (_OWORD *)((char *)&v23->__r_.__value_.__r.__words[2] + v10);
              unint64_t v43 = v20 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                long long v44 = *(_OWORD *)v41;
                *(v42 - 1) = *((_OWORD *)v41 - 1);
                _OWORD *v42 = v44;
                v41 += 4;
                v42 += 2;
                v43 -= 32;
              }
              while (v43);
              if (v20 == v31) {
                goto LABEL_77;
              }
              if ((v20 & 0x18) != 0)
              {
LABEL_66:
                v29 += v20 & 0xFFFFFFFFFFFFFFF8;
                long long v30 = (std::string *)((char *)v19 + (v20 & 0xFFFFFFFFFFFFFFF8));
                unint64_t v45 = (uint64_t *)((char *)v19 + v31);
                size_t v46 = (std::string::size_type *)((char *)v23->__r_.__value_.__r.__words + v31 + v10);
                unint64_t v47 = v31 - (v20 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  uint64_t v48 = *v45++;
                  *v46++ = v48;
                  v47 += 8;
                }
                while (v47);
                if (v20 != (v20 & 0xFFFFFFFFFFFFFFF8)) {
                  goto LABEL_76;
                }
LABEL_77:
                if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0)
                {
                  int v50 = (char *)(v8->__r_.__value_.__r.__words[0] + v10);
                  if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                    return v50;
                  }
                }
                else
                {
                  int v50 = (char *)v8 + v10;
                  if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                    return v50;
                  }
                }
                operator delete(v53.__r_.__value_.__l.__data_);
                return v50;
              }
              long long v30 = (std::string *)((char *)v19 + v31);
              v29 += v31;
            }
            do
            {
LABEL_76:
              std::string::value_type v51 = v30->__r_.__value_.__s.__data_[0];
              long long v30 = (std::string *)((char *)v30 + 1);
              *v29++ = v51;
            }
            while (v30 != (std::string *)((char *)v19 + v20));
            goto LABEL_77;
          }
LABEL_45:
          memmove((char *)v23 + v10 + __n_add, (char *)v23 + v10, v24);
          std::string::size_type v25 = v21 + __n_add;
          if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_46;
          }
          goto LABEL_36;
        }
      }
      else
      {
        std::string::size_type v21 = v9;
        std::string::size_type v22 = 22;
        std::string::size_type v23 = v8;
        if (22 - (unint64_t)v9 >= __n_add)
        {
          size_t v24 = v9 - v10;
          if (v9 == v10) {
            goto LABEL_32;
          }
          goto LABEL_45;
        }
      }
      std::string::__grow_by(v8, v22, v21 + __n_add - v22, v21, v10, 0, __n_add);
      v8->__r_.__value_.__l.__size_ = v21 + __n_add;
      std::string::size_type v23 = (std::string *)v8->__r_.__value_.__r.__words[0];
      std::string::size_type v25 = v21 + __n_add;
      if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_46;
      }
      goto LABEL_36;
    }
    unint64_t v8 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    std::string::size_type v10 = a2 - (void)this;
    if (__n_add)
    {
      std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      if ((unint64_t)this > a3 || (unint64_t)this->__r_.__value_.__r.__words + size + 1 <= a3)
      {
        std::string::size_type v12 = 22;
        uint8x8_t v13 = this;
        if (22 - size < __n_add) {
          goto LABEL_6;
        }
        goto LABEL_14;
      }
      goto LABEL_18;
    }
  }
  return (char *)v8 + v10;
}

void sub_19E24FFDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E250028()
{
  qword_1E9457D28 = 0;
  unk_1E9457D30 = "MontrealNeuralNetworkState";
  qword_1E9457D38 = 0;
  unk_1E9457D40 = 0;
  qword_1E9457D48 = (uint64_t)sub_19E1403B0;
  unk_1E9457D50 = 0u;
  unk_1E9457D60 = 0u;
  uint64_t result = _CFRuntimeRegisterClass();
  qword_1E9457D88 = result;
  return result;
}

void sub_19E250080(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0xCu);
}

void sub_19E2500A0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void sub_19E2500C8(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void sub_19E2500E0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

uint64_t sub_19E250100(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = a2;
  *(void *)(a1 + 80) = a3;
  *(_DWORD *)(a1 + 88) = 0;
  size_t v5 = a3 * a2;
  if (a3 * a2)
  {
    if ((v5 & 0x8000000000000000) != 0) {
      sub_19E13D694();
    }
    BOOL v6 = (char *)operator new(a3 * a2);
    bzero(v6, v5);
    *(void *)a1 = v6;
    *(void *)(a1 + 8) = &v6[v5];
    *(void *)(a1 + 16) = &v6[v5];
    if (v3) {
      goto LABEL_4;
    }
LABEL_7:
    uint64_t v10 = 0;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    goto LABEL_8;
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  if (!a3) {
    goto LABEL_7;
  }
LABEL_4:
  if (v3 >> 62) {
    sub_19E13D694();
  }
  size_t v7 = 4 * v3;
  unint64_t v8 = (char *)operator new(4 * v3);
  uint64_t v9 = &v8[4 * v3];
  bzero(v8, 4 * v3);
  *(void *)(a1 + 24) = v8;
  *(void *)(a1 + 32) = v9;
  *(void *)(a1 + 40) = v9;
  uint64_t v10 = (char *)operator new(4 * v3);
  unint64_t v3 = (unint64_t)&v10[4 * v3];
  memset_pattern16(v10, &unk_19E3519E0, v7);
LABEL_8:
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v3;
  *(void *)(a1 + 64) = v3;
  return a1;
}

void sub_19E250230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint8x8_t v13 = *(void **)(v11 + 48);
  if (v13)
  {
    *(void *)(v11 + 56) = v13;
    operator delete(v13);
    std::string::size_type v14 = *(void **)(v11 + 24);
    if (!v14)
    {
LABEL_3:
      BOOL v15 = *(void **)v11;
      if (!*(void *)v11) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    std::string::size_type v14 = *(void **)(v11 + 24);
    if (!v14) {
      goto LABEL_3;
    }
  }
  *(void *)(v11 + 32) = v14;
  operator delete(v14);
  BOOL v15 = *(void **)v11;
  if (!*(void *)v11) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  *(void *)(v11 + 8) = v15;
  operator delete(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E2502B4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
  unint64_t v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(void *)(a1 + 32) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_19E250308(uint64_t a1, uint64_t a2, const void **a3)
{
  uint64_t v4 = sub_19E2533F8(a2 + 16, a3);
  size_t v5 = *(void *)(a1 + 72);
  if (!v5) {
    return 0xFFFFFFFFLL;
  }
  BOOL v6 = (const char *)v4;
  memmove((void *)(*(void *)a1 + v5 * *(int *)(a1 + 88)), v4, v5);
  vDSP_Length v7 = *(void *)(a1 + 72);
  if (!v7) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v8 = 0;
  while (!v6[v8])
  {
    if (v7 == ++v8) {
      return 0xFFFFFFFFLL;
    }
  }
  uint64_t v9 = *(unsigned int *)(a1 + 88);
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  if (v7 >> 62) {
    sub_19E13D694();
  }
  uint64_t v11 = operator new(4 * v7);
  bzero(v11, 4 * v7);
  vDSP_vflt8(v6, 1, (float *)v11, 1, v7);
  float __B = 0.039062;
  vDSP_vsmul((const float *)v11, 1, &__B, (float *)v11, 1, *(void *)(a1 + 72));
  std::string::size_type v12 = (float *)operator new(4uLL);
  *std::string::size_type v12 = 0.0;
  vDSP_svesq((const float *)v11, 1, v12, *(void *)(a1 + 72));
  float v13 = sqrtf(*v12);
  float v14 = 1.0;
  if (*v12 > 0.0) {
    float v14 = v13;
  }
  *(float *)(*(void *)(a1 + 48) + 4 * (int)v9) = v14;
  *(unsigned char *)(a1 + 92) = 0;
  *(_DWORD *)(a1 + 88) = (unint64_t)(*(int *)(a1 + 88) + 1) % *(void *)(a1 + 80);
  operator delete(v12);
  operator delete(v11);
  return v9;
}

void sub_19E25047C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  operator delete(v12);
  operator delete(v11);
  _Unwind_Resume(a1);
}

float *sub_19E2504D0(uint64_t a1, uint64_t a2, const void **a3)
{
  uint64_t v4 = sub_19E2533F8(a2 + 16, a3);
  vDSP_Length v5 = *(void *)(a1 + 72);
  unint64_t v6 = *(void *)(a1 + 80);
  unint64_t v31 = 0;
  unint64_t v32 = 0;
  long long v30 = 0;
  if (v6)
  {
    if (v6 >> 62) {
      sub_19E13D694();
    }
    size_t v7 = 4 * v6;
    uint64_t v8 = (char *)operator new(4 * v6);
    unint64_t v6 = (unint64_t)&v8[4 * v6];
    bzero(v8, v7);
    uint64_t v10 = a1 + 24;
    uint64_t v9 = *(void **)(a1 + 24);
    if (v9) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v10 = a1 + 24;
    uint64_t v9 = *(void **)(a1 + 24);
    if (v9)
    {
LABEL_4:
      *(void *)(a1 + 32) = v9;
      operator delete(v9);
      *(void *)uint64_t v10 = 0;
      *(void *)(v10 + 8) = 0;
      *(void *)(v10 + 16) = 0;
      vDSP_Length v5 = *(void *)(a1 + 72);
    }
  }
  *(void *)(a1 + 24) = v8;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v6;
  long long v30 = 0;
  unint64_t v31 = 0;
  unint64_t v32 = 0;
  if (v5)
  {
    if (v5 >> 62) {
      sub_19E13D694();
    }
    uint64_t v11 = (char *)operator new(4 * v5);
    long long v30 = v11;
    unint64_t v32 = &v11[4 * v5];
    bzero(v11, 4 * v5);
    unint64_t v31 = v32;
  }
  else
  {
    uint64_t v11 = 0;
  }
  vDSP_vflt8((const char *)v4, 1, (float *)v11, 1, v5);
  float __B = 0.039062;
  vDSP_vsmul((const float *)v11, 1, &__B, (float *)v11, 1, *(void *)(a1 + 72));
  std::string::size_type v12 = (float *)operator new(4uLL);
  *std::string::size_type v12 = 0.0;
  vDSP_svesq((const float *)v11, 1, v12, *(void *)(a1 + 72));
  if (*v12 <= 0.0)
  {
    unint64_t v20 = *(float **)v10;
    operator delete(v12);
    if (!v11) {
      return v20;
    }
LABEL_21:
    unint64_t v31 = v11;
    operator delete(v11);
    return v20;
  }
  *std::string::size_type v12 = sqrtf(*v12);
  unint64_t v13 = *(void *)(a1 + 80);
  unint64_t v27 = 0;
  int v28 = 0;
  std::string::size_type v26 = 0;
  if (v13)
  {
    if (v13 >> 62) {
      sub_19E13D694();
    }
    float v14 = (char *)operator new(4 * v13);
    std::string::size_type v26 = v14;
    int v28 = &v14[4 * v13];
    bzero(v14, 4 * v13);
    unint64_t v27 = v28;
    unint64_t v15 = *(void *)(a1 + 72);
    size_t v24 = 0;
    std::string::size_type v25 = 0;
    long long __p = 0;
    if (v15)
    {
LABEL_15:
      if (v15 >> 62) {
        sub_19E13D694();
      }
      uint64_t v16 = (char *)operator new(4 * v15);
      long long __p = v16;
      std::string::size_type v25 = &v16[4 * v15];
      bzero(v16, 4 * v15);
      size_t v24 = v25;
      if (v13) {
        goto LABEL_17;
      }
LABEL_25:
      vDSP_Length v19 = 0;
      goto LABEL_26;
    }
  }
  else
  {
    float v14 = 0;
    unint64_t v15 = *(void *)(a1 + 72);
    size_t v24 = 0;
    std::string::size_type v25 = 0;
    long long __p = 0;
    if (v15) {
      goto LABEL_15;
    }
  }
  uint64_t v16 = 0;
  if (!v13) {
    goto LABEL_25;
  }
LABEL_17:
  vDSP_Length v17 = 0;
  uint64_t v18 = (float *)v14;
  do
  {
    vDSP_vflt8((const char *)(*(void *)a1 + *(void *)(a1 + 72) * v17), 1, (float *)v16, 1, *(void *)(a1 + 72));
    float v22 = 0.039062;
    vDSP_vsmul((const float *)v16, 1, &v22, (float *)v16, 1, *(void *)(a1 + 72));
    vDSP_dotpr((const float *)v16, 1, (const float *)v11, 1, v18, *(void *)(a1 + 72));
    ++v17;
    vDSP_Length v19 = *(void *)(a1 + 80);
    ++v18;
  }
  while (v17 < v19);
LABEL_26:
  vDSP_vsdiv((const float *)v14, 1, v12, *(float **)v10, 1, v19);
  vDSP_vdiv(*(const float **)(a1 + 48), 1, *(const float **)(a1 + 24), 1, *(float **)(a1 + 24), 1, *(void *)(a1 + 80));
  unint64_t v20 = *(float **)v10;
  if (__p) {
    operator delete(__p);
  }
  if (v14) {
    operator delete(v14);
  }
  uint64_t v11 = v30;
  operator delete(v12);
  if (v11) {
    goto LABEL_21;
  }
  return v20;
}

void sub_19E250834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  if (v20) {
    operator delete(v20);
  }
  operator delete(v19);
  if (a18) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_19E2508DC(uint64_t a1, uint64_t a2, uint64_t a3, int *__src)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_19E13C2D0(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a2;
    uint64_t v21 = *(void *)(a2 + 16);
  }
  sub_19E25BD4C(a1, (long long *)__p, a3, __src);
  if (SHIBYTE(v21) < 0)
  {
    operator delete(__p[0]);
    *(void *)a1 = &unk_1EF0A8AF8;
    int v7 = __src[80];
    if (v7 < 1) {
      return a1;
    }
  }
  else
  {
    *(void *)a1 = &unk_1EF0A8AF8;
    int v7 = __src[80];
    if (v7 < 1) {
      return a1;
    }
  }
  uint64_t v8 = 0;
  uint64_t v9 = (char **)(a1 + 48);
  int64x2_t v19 = vdupq_n_s64(1uLL);
  do
  {
    int v10 = v8 + 9;
    uint64_t v11 = __src[4 * v8 + 64];
    std::string::size_type v12 = *v9;
    unint64_t v13 = (char **)(a1 + 48);
    float v14 = (char **)(a1 + 48);
    if (*v9)
    {
      while (1)
      {
        while (1)
        {
          float v14 = (char **)v12;
          int v15 = *((_DWORD *)v12 + 8);
          if (v15 <= v10) {
            break;
          }
          std::string::size_type v12 = *v14;
          unint64_t v13 = v14;
          if (!*v14) {
            goto LABEL_18;
          }
        }
        if (v15 >= v10) {
          break;
        }
        std::string::size_type v12 = v14[1];
        if (!v12)
        {
          unint64_t v13 = v14 + 1;
          goto LABEL_18;
        }
      }
    }
    else
    {
LABEL_18:
      uint64_t v16 = (char *)operator new(0x50uLL);
      *((_DWORD *)v16 + 8) = v10;
      *(int64x2_t *)(v16 + 40) = v19;
      *(void *)uint64_t v16 = 0;
      *((void *)v16 + 1) = 0;
      *((void *)v16 + 8) = 0;
      *((void *)v16 + 9) = 0;
      *((void *)v16 + 7) = v11;
      *((void *)v16 + 2) = v14;
      void *v13 = v16;
      uint64_t v17 = **(void **)(a1 + 40);
      if (v17)
      {
        *(void *)(a1 + 40) = v17;
        uint64_t v16 = *v13;
      }
      sub_19E13C8A0(*(uint64_t **)(a1 + 48), (uint64_t *)v16);
      ++*(void *)(a1 + 56);
      int v7 = __src[80];
    }
    ++v8;
  }
  while (v8 < v7);
  return a1;
}

void sub_19E250AA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E250AD8(void *a1, int a2, int a3)
{
  int v4 = a3 * a2;
  if (a3 * a2 <= 0)
  {
    unint64_t v5 = a1[7];
  }
  else
  {
    unint64_t v5 = a1[7];
    if (!v5) {
      goto LABEL_13;
    }
    int v6 = 0;
    uint64_t v7 = 1;
    do
    {
      if (v7)
      {
        unint64_t v8 = 0;
        do
        {
          uint64_t v9 = *sub_19E25DA90((uint64_t)a1, (int)v8 + 9);
          int v10 = *sub_19E25D8B0((uint64_t)a1, 1);
          (*(void (**)(uint64_t *__return_ptr, void *, void))(*a1 + 168))(&v21, a1, (v8 + 9));
          memcpy(v9, v10, 4 * (int)v21 * v22 * v23);
          (*(void (**)(uint64_t *__return_ptr, void *, void))(*a1 + 168))(&v21, a1, (v8 + 9));
          int64_t v11 = (unint64_t)(v21 * v22 * v23) << 32;
          std::string::size_type v12 = sub_19E25D8B0((uint64_t)a1, 1);
          *std::string::size_type v12 = (uint64_t *)((char *)*v12 + (v11 >> 30));
          (*(void (**)(uint64_t *__return_ptr, void *, void))(*a1 + 168))(&v21, a1, (v8 + 9));
          int64_t v13 = (unint64_t)(v21 * v22 * v23) << 32;
          float v14 = sub_19E25DA90((uint64_t)a1, (int)v8 + 9);
          *float v14 = (uint64_t *)((char *)*v14 + (v13 >> 30));
          ++v8;
          unint64_t v5 = a1[7];
        }
        while (v5 > v8);
        uint64_t v7 = a1[7];
      }
      ++v6;
    }
    while (v6 != v4);
  }
  if (v5)
  {
    unint64_t v15 = 0;
    do
    {
      (*(void (**)(uint64_t *__return_ptr, void *, void))(*a1 + 168))(&v21, a1, (v15 + 9));
      int64_t v16 = (unint64_t)(v21 * v22 * v23 * v24 * v25) << 32;
      uint64_t v17 = sub_19E25DA90((uint64_t)a1, (int)v15 + 9);
      *uint64_t v17 = (uint64_t *)((char *)*v17 - (v16 >> 30));
      ++v15;
    }
    while (a1[7] > v15);
  }
LABEL_13:
  (*(void (**)(uint64_t *__return_ptr, void *, uint64_t))(*a1 + 160))(&v21, a1, 1);
  int64_t v18 = (unint64_t)(v21 * v22 * v23 * v24 * v25) << 32;
  int64x2_t v19 = sub_19E25D8B0((uint64_t)a1, 1);
  *int64x2_t v19 = (uint64_t *)((char *)*v19 - (v18 >> 30));
  return (*(uint64_t (**)(void *))(*a1 + 32))(a1);
}

uint64_t *sub_19E250DC8(uint64_t *result)
{
  if (result[7])
  {
    uint64_t v1 = result;
    unint64_t v2 = 0;
    unint64_t v3 = result + 6;
    do
    {
      int v4 = (*(uint64_t (**)(uint64_t *))(*v1 + 224))(v1);
      unint64_t v5 = (char *)v1[6];
      int v6 = v2 + 9;
      uint64_t v7 = (uint64_t **)v3;
      unint64_t v8 = (char *)v3;
      if (v5)
      {
        while (1)
        {
          while (1)
          {
            unint64_t v8 = v5;
            int v9 = *((_DWORD *)v5 + 8);
            if (v9 <= v6) {
              break;
            }
            unint64_t v5 = *(char **)v8;
            uint64_t v7 = (uint64_t **)v8;
            if (!*(void *)v8) {
              goto LABEL_12;
            }
          }
          if (v9 >= v6) {
            break;
          }
          unint64_t v5 = (char *)*((void *)v8 + 1);
          if (!v5)
          {
            uint64_t v7 = (uint64_t **)(v8 + 8);
            goto LABEL_12;
          }
        }
      }
      else
      {
LABEL_12:
        int v10 = v8;
        unint64_t v8 = (char *)operator new(0x50uLL);
        *((_DWORD *)v8 + 8) = v6;
        *(_OWORD *)(v8 + 40) = 0u;
        *(_OWORD *)(v8 + 56) = 0u;
        *((void *)v8 + 9) = 0;
        *(void *)unint64_t v8 = 0;
        *((void *)v8 + 1) = 0;
        *((void *)v8 + 2) = v10;
        *uint64_t v7 = (uint64_t *)v8;
        uint64_t v11 = *(void *)v1[5];
        std::string::size_type v12 = (uint64_t *)v8;
        if (v11)
        {
          v1[5] = v11;
          std::string::size_type v12 = *v7;
        }
        sub_19E13C8A0((uint64_t *)v1[6], v12);
        ++v1[7];
      }
      *((void *)v8 + 8) = v4;
      uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*v1 + 216))(v1, 1);
      int v13 = (int)result;
      float v14 = (char *)v1[6];
      unint64_t v15 = (uint64_t **)v3;
      int64_t v16 = (char *)v3;
      if (v14)
      {
        while (1)
        {
          while (1)
          {
            int64_t v16 = v14;
            int v17 = *((_DWORD *)v14 + 8);
            if (v17 <= v6) {
              break;
            }
            float v14 = *(char **)v16;
            unint64_t v15 = (uint64_t **)v16;
            if (!*(void *)v16) {
              goto LABEL_22;
            }
          }
          if (v17 >= v6) {
            break;
          }
          float v14 = (char *)*((void *)v16 + 1);
          if (!v14)
          {
            unint64_t v15 = (uint64_t **)(v16 + 8);
            goto LABEL_22;
          }
        }
      }
      else
      {
LABEL_22:
        int64_t v18 = v16;
        int64_t v16 = (char *)operator new(0x50uLL);
        *((_DWORD *)v16 + 8) = v6;
        *(_OWORD *)(v16 + 40) = 0u;
        *(_OWORD *)(v16 + 56) = 0u;
        *((void *)v16 + 9) = 0;
        *(void *)int64_t v16 = 0;
        *((void *)v16 + 1) = 0;
        *((void *)v16 + 2) = v18;
        void *v15 = (uint64_t *)v16;
        uint64_t v19 = *(void *)v1[5];
        unint64_t v20 = (uint64_t *)v16;
        if (v19)
        {
          v1[5] = v19;
          unint64_t v20 = *v15;
        }
        uint64_t result = sub_19E13C8A0((uint64_t *)v1[6], v20);
        ++v1[7];
      }
      *((void *)v16 + 9) = v13;
      ++v2;
    }
    while (v1[7] > v2);
  }
  return result;
}

uint64_t sub_19E250FD0(uint64_t a1, uint64_t a2, uint64_t a3, int *__src)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_19E13C2D0(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a2;
    uint64_t v21 = *(void *)(a2 + 16);
  }
  sub_19E25E2E0(a1, (long long *)__p, a3, __src);
  if (SHIBYTE(v21) < 0)
  {
    operator delete(__p[0]);
    *(void *)a1 = &unk_1EF0A8988;
    int v7 = __src[80];
    if (v7 < 1) {
      return a1;
    }
  }
  else
  {
    *(void *)a1 = &unk_1EF0A8988;
    int v7 = __src[80];
    if (v7 < 1) {
      return a1;
    }
  }
  uint64_t v8 = 0;
  int v9 = (char **)(a1 + 48);
  int64x2_t v19 = vdupq_n_s64(1uLL);
  do
  {
    int v10 = v8 + 9;
    uint64_t v11 = __src[4 * v8 + 64];
    std::string::size_type v12 = *v9;
    int v13 = (char **)(a1 + 48);
    float v14 = (char **)(a1 + 48);
    if (*v9)
    {
      while (1)
      {
        while (1)
        {
          float v14 = (char **)v12;
          int v15 = *((_DWORD *)v12 + 8);
          if (v15 <= v10) {
            break;
          }
          std::string::size_type v12 = *v14;
          int v13 = v14;
          if (!*v14) {
            goto LABEL_18;
          }
        }
        if (v15 >= v10) {
          break;
        }
        std::string::size_type v12 = v14[1];
        if (!v12)
        {
          int v13 = v14 + 1;
          goto LABEL_18;
        }
      }
    }
    else
    {
LABEL_18:
      int64_t v16 = (char *)operator new(0x50uLL);
      *((_DWORD *)v16 + 8) = v10;
      *(int64x2_t *)(v16 + 40) = v19;
      *(void *)int64_t v16 = 0;
      *((void *)v16 + 1) = 0;
      *((void *)v16 + 8) = 0;
      *((void *)v16 + 9) = 0;
      *((void *)v16 + 7) = v11;
      *((void *)v16 + 2) = v14;
      void *v13 = v16;
      uint64_t v17 = **(void **)(a1 + 40);
      if (v17)
      {
        *(void *)(a1 + 40) = v17;
        int64_t v16 = *v13;
      }
      sub_19E13C8A0(*(uint64_t **)(a1 + 48), (uint64_t *)v16);
      ++*(void *)(a1 + 56);
      int v7 = __src[80];
    }
    ++v8;
  }
  while (v8 < v7);
  return a1;
}

void sub_19E251198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E2511CC(void *a1, int a2, int a3)
{
  int v4 = a3 * a2;
  if (a3 * a2 <= 0)
  {
    unint64_t v5 = a1[7];
  }
  else
  {
    unint64_t v5 = a1[7];
    if (!v5) {
      goto LABEL_13;
    }
    int v6 = 0;
    uint64_t v7 = 1;
    do
    {
      if (v7)
      {
        unint64_t v8 = 0;
        do
        {
          int v9 = *sub_19E25DA90((uint64_t)a1, (int)v8 + 9);
          int v10 = *sub_19E25D8B0((uint64_t)a1, 1);
          (*(void (**)(uint64_t *__return_ptr, void *, void))(*a1 + 168))(&v21, a1, (v8 + 9));
          memcpy(v9, v10, (int)v21 * v22 * v23);
          (*(void (**)(uint64_t *__return_ptr, void *, void))(*a1 + 168))(&v21, a1, (v8 + 9));
          int64_t v11 = (unint64_t)(v21 * v22 * v23) << 32;
          std::string::size_type v12 = sub_19E25D8B0((uint64_t)a1, 1);
          *std::string::size_type v12 = (uint64_t *)((char *)*v12 + (v11 >> 30));
          (*(void (**)(uint64_t *__return_ptr, void *, void))(*a1 + 168))(&v21, a1, (v8 + 9));
          int64_t v13 = (unint64_t)(v21 * v22 * v23) << 32;
          float v14 = sub_19E25DA90((uint64_t)a1, (int)v8 + 9);
          *float v14 = (uint64_t *)((char *)*v14 + (v13 >> 30));
          ++v8;
          unint64_t v5 = a1[7];
        }
        while (v5 > v8);
        uint64_t v7 = a1[7];
      }
      ++v6;
    }
    while (v6 != v4);
  }
  if (v5)
  {
    unint64_t v15 = 0;
    do
    {
      (*(void (**)(uint64_t *__return_ptr, void *, void))(*a1 + 168))(&v21, a1, (v15 + 9));
      int64_t v16 = (unint64_t)(v21 * v22 * v23 * v24 * v25) << 32;
      uint64_t v17 = sub_19E25DA90((uint64_t)a1, (int)v15 + 9);
      *uint64_t v17 = (uint64_t *)((char *)*v17 - (v16 >> 30));
      ++v15;
    }
    while (a1[7] > v15);
  }
LABEL_13:
  (*(void (**)(uint64_t *__return_ptr, void *, uint64_t))(*a1 + 160))(&v21, a1, 1);
  int64_t v18 = (unint64_t)(v21 * v22 * v23 * v24 * v25) << 32;
  int64x2_t v19 = sub_19E25D8B0((uint64_t)a1, 1);
  *int64x2_t v19 = (uint64_t *)((char *)*v19 - (v18 >> 30));
  return (*(uint64_t (**)(void *))(*a1 + 32))(a1);
}

uint64_t *sub_19E2514BC(uint64_t *result)
{
  if (result[7])
  {
    uint64_t v1 = result;
    unint64_t v2 = 0;
    unint64_t v3 = result + 6;
    do
    {
      int v4 = (*(uint64_t (**)(uint64_t *))(*v1 + 224))(v1);
      unint64_t v5 = (char *)v1[6];
      int v6 = v2 + 9;
      uint64_t v7 = (uint64_t **)v3;
      unint64_t v8 = (char *)v3;
      if (v5)
      {
        while (1)
        {
          while (1)
          {
            unint64_t v8 = v5;
            int v9 = *((_DWORD *)v5 + 8);
            if (v9 <= v6) {
              break;
            }
            unint64_t v5 = *(char **)v8;
            uint64_t v7 = (uint64_t **)v8;
            if (!*(void *)v8) {
              goto LABEL_12;
            }
          }
          if (v9 >= v6) {
            break;
          }
          unint64_t v5 = (char *)*((void *)v8 + 1);
          if (!v5)
          {
            uint64_t v7 = (uint64_t **)(v8 + 8);
            goto LABEL_12;
          }
        }
      }
      else
      {
LABEL_12:
        int v10 = v8;
        unint64_t v8 = (char *)operator new(0x50uLL);
        *((_DWORD *)v8 + 8) = v6;
        *(_OWORD *)(v8 + 40) = 0u;
        *(_OWORD *)(v8 + 56) = 0u;
        *((void *)v8 + 9) = 0;
        *(void *)unint64_t v8 = 0;
        *((void *)v8 + 1) = 0;
        *((void *)v8 + 2) = v10;
        *uint64_t v7 = (uint64_t *)v8;
        uint64_t v11 = *(void *)v1[5];
        std::string::size_type v12 = (uint64_t *)v8;
        if (v11)
        {
          v1[5] = v11;
          std::string::size_type v12 = *v7;
        }
        sub_19E13C8A0((uint64_t *)v1[6], v12);
        ++v1[7];
      }
      *((void *)v8 + 8) = v4;
      uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*v1 + 216))(v1, 1);
      int v13 = (int)result;
      float v14 = (char *)v1[6];
      unint64_t v15 = (uint64_t **)v3;
      int64_t v16 = (char *)v3;
      if (v14)
      {
        while (1)
        {
          while (1)
          {
            int64_t v16 = v14;
            int v17 = *((_DWORD *)v14 + 8);
            if (v17 <= v6) {
              break;
            }
            float v14 = *(char **)v16;
            unint64_t v15 = (uint64_t **)v16;
            if (!*(void *)v16) {
              goto LABEL_22;
            }
          }
          if (v17 >= v6) {
            break;
          }
          float v14 = (char *)*((void *)v16 + 1);
          if (!v14)
          {
            unint64_t v15 = (uint64_t **)(v16 + 8);
            goto LABEL_22;
          }
        }
      }
      else
      {
LABEL_22:
        int64_t v18 = v16;
        int64_t v16 = (char *)operator new(0x50uLL);
        *((_DWORD *)v16 + 8) = v6;
        *(_OWORD *)(v16 + 40) = 0u;
        *(_OWORD *)(v16 + 56) = 0u;
        *((void *)v16 + 9) = 0;
        *(void *)int64_t v16 = 0;
        *((void *)v16 + 1) = 0;
        *((void *)v16 + 2) = v18;
        void *v15 = (uint64_t *)v16;
        uint64_t v19 = *(void *)v1[5];
        unint64_t v20 = (uint64_t *)v16;
        if (v19)
        {
          v1[5] = v19;
          unint64_t v20 = *v15;
        }
        uint64_t result = sub_19E13C8A0((uint64_t *)v1[6], v20);
        ++v1[7];
      }
      *((void *)v16 + 9) = v13;
      ++v2;
    }
    while (v1[7] > v2);
  }
  return result;
}

void sub_19E2516C8(uint64_t a1)
{
  uint64_t v1 = (void *)sub_19E25BF30(a1);

  operator delete(v1);
}

void sub_19E2516F4(uint64_t a1)
{
  uint64_t v1 = (void *)sub_19E25E4C4(a1);

  operator delete(v1);
}

uint64_t sub_19E25171C(uint64_t result, int a2, int a3)
{
  *(void *)uint64_t result = 0;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = a3;
  *(_DWORD *)(result + 16) = a3;
  *(_DWORD *)(result + 20) = a3;
  *(_DWORD *)(result + 24) = a2;
  *(_DWORD *)(result + 28) = a3;
  *(_DWORD *)(result + 32) = 1;
  return result;
}

_DWORD *sub_19E251738(_DWORD *result, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9)
{
  std::runtime_error *result = a4;
  result[1] = a5;
  result[2] = a6;
  result[3] = a7;
  result[4] = a8;
  result[5] = a9;
  result[6] = a2;
  result[7] = a3;
  result[8] = 1;
  return result;
}

_DWORD *sub_19E251758(_DWORD *result, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10)
{
  std::runtime_error *result = a5;
  result[1] = a6;
  result[2] = a7;
  result[3] = a8;
  result[4] = a9;
  result[5] = a10;
  result[6] = a2;
  result[7] = a3;
  result[8] = a4;
  return result;
}

void sub_19E25199C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E251AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  unint64_t v15 = v14;

  _Unwind_Resume(a1);
}

void sub_19E251B38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *sub_19E251BE0(void *result)
{
  std::runtime_error *result = &unk_1EF0A9BC8;
  result[1] = 0;
  return result;
}

void *sub_19E251C00(void *a1)
{
  *a1 = &unk_1EF0A9BC8;
  unint64_t v2 = (const void *)a1[1];
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void sub_19E251C50(void *__p)
{
  void *__p = &unk_1EF0A9BC8;
  unint64_t v2 = (const void *)__p[1];
  if (v2) {
    CFRelease(v2);
  }

  operator delete(__p);
}

uint64_t sub_19E251CB0(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v259 = *MEMORY[0x1E4F143B8];
  if (!*(void *)(a1 + 8)) {
    sub_19E15DB6C(@"No saved model container", (uint64_t)a2, a3, a4, a5, a6, a7, a8, v190);
  }
  size_t v195 = objc_msgSend_set(MEMORY[0x1E4F1CA80], a2, a3, a4);
  int v9 = [MontrealNNModelNetwork alloc];
  uint64_t v196 = objc_msgSend_initWithModelContainer_tensors_(v9, v10, *(void *)(a1 + 8), (uint64_t)v195);
  float v14 = objc_msgSend_inputs(v196, v11, v12, v13);
  sub_19E252A08((uint64_t)&v249, v14);

  int64_t v18 = objc_msgSend_outputs(v196, v15, v16, v17);
  sub_19E252A08((uint64_t)&v247, v18);

  sub_19E304A98(a2, (const void ***)&v249, (const void ***)&v247);
  long long v246 = 0u;
  long long v245 = 0u;
  long long v244 = 0u;
  long long v243 = 0u;
  int v22 = objc_msgSend_nodes(v196, v19, v20, v21);
  uint64_t v26 = objc_msgSend_countByEnumeratingWithState_objects_count_(v22, v23, (uint64_t)&v243, (uint64_t)v258, 16);
  if (v26)
  {
    uint64_t v27 = *(void *)v244;
    do
    {
      for (uint64_t i = 0; i != v26; ++i)
      {
        if (*(void *)v244 != v27) {
          objc_enumerationMutation(v22);
        }
        unint64_t v29 = *(void **)(*((void *)&v243 + 1) + 8 * i);
        memset(__src, 0, 512);
        if (v29) {
          objc_msgSend_parameters_(v29, v24, *(void *)(a1 + 8), v25);
        }
        else {
          bzero(__src, 0x2C0uLL);
        }
        if (objc_msgSend_isValid(v29, v30, v31, v32))
        {
          memcpy(__dst, __src, sizeof(__dst));
          objc_msgSend_name(v29, v33, v34, v35);
          id v36 = objc_claimAutoreleasedReturnValue();
          uint64_t v40 = (const char *)objc_msgSend_UTF8String(v36, v37, v38, v39);
          size_t v41 = strlen(v40);
          if (v41 >= 0x7FFFFFFFFFFFFFF8) {
            sub_19E13C370();
          }
          uint64_t v42 = (void *)v41;
          if (v41 >= 0x17)
          {
            uint64_t v44 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v41 | 7) != 0x17) {
              uint64_t v44 = v41 | 7;
            }
            uint64_t v45 = v44 + 1;
            unint64_t v43 = operator new(v44 + 1);
            unint64_t v240 = v45 | 0x8000000000000000;
            __p[0] = v43;
            __p[1] = v42;
          }
          else
          {
            HIBYTE(v240) = v41;
            unint64_t v43 = __p;
            if (!v41) {
              goto LABEL_22;
            }
          }
          memmove(v43, v40, (size_t)v42);
LABEL_22:
          *((unsigned char *)v42 + (void)v43) = 0;
          sub_19E305584((uint64_t)a2, (uint64_t)__dst, __p);
          if (SHIBYTE(v240) < 0) {
            operator delete(__p[0]);
          }

          continue;
        }
      }
      uint64_t v26 = objc_msgSend_countByEnumeratingWithState_objects_count_(v22, v24, (uint64_t)&v243, (uint64_t)v258, 16);
    }
    while (v26);
  }

  long long v237 = 0u;
  long long v238 = 0u;
  long long v235 = 0u;
  long long v236 = 0u;
  objc_msgSend_inputs(v196, v46, v47, v48);
  obid j = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v204 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v49, (uint64_t)&v235, (uint64_t)v257, 16);
  if (v204)
  {
    uint64_t v201 = *(void *)v236;
    do
    {
      for (id j = 0; j != (id)v204; id j = (char *)j + 1)
      {
        if (*(void *)v236 != v201) {
          objc_enumerationMutation(obj);
        }
        std::string v53 = *(void **)(*((void *)&v235 + 1) + 8 * (void)j);
        long long v231 = 0u;
        long long v232 = 0u;
        long long v233 = 0u;
        long long v234 = 0u;
        BOOL v54 = objc_msgSend_asInput(v53, v50, v51, v52);
        int v58 = objc_msgSend_allObjects(v54, v55, v56, v57);

        uint64_t v63 = objc_msgSend_countByEnumeratingWithState_objects_count_(v58, v59, (uint64_t)&v231, (uint64_t)v256, 16);
        if (v63)
        {
          uint64_t v64 = *(void *)v232;
          do
          {
            for (uint64_t k = 0; k != v63; ++k)
            {
              if (*(void *)v232 != v64) {
                objc_enumerationMutation(v58);
              }
              long long v66 = *(void **)(*((void *)&v231 + 1) + 8 * k);
              if (objc_msgSend_isValid(v66, v60, v61, v62))
              {
                uint64_t v67 = objc_msgSend_inputs(v66, v60, v61, v62);
                int v70 = objc_msgSend_indexOfObject_(v67, v68, (uint64_t)v53, v69);

                objc_msgSend_name(v53, v71, v72, v73);
                id v74 = objc_claimAutoreleasedReturnValue();
                std::string v78 = (char *)objc_msgSend_UTF8String(v74, v75, v76, v77);
                int v79 = sub_19E252E58("None");
                objc_msgSend_name(v66, v80, v81, v82);
                id v83 = objc_claimAutoreleasedReturnValue();
                float v87 = (const char *)objc_msgSend_UTF8String(v83, v84, v85, v86);
                sub_19E252C74((uint64_t)a2, v78, v79, v87, v70 + 1);
              }
            }
            uint64_t v63 = objc_msgSend_countByEnumeratingWithState_objects_count_(v58, v60, (uint64_t)&v231, (uint64_t)v256, 16);
          }
          while (v63);
        }
      }
      uint64_t v204 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v50, (uint64_t)&v235, (uint64_t)v257, 16);
    }
    while (v204);
  }

  long long v229 = 0u;
  long long v230 = 0u;
  long long v227 = 0u;
  long long v228 = 0u;
  objc_msgSend_outputs(v196, v88, v89, v90);
  id obja = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v205 = objc_msgSend_countByEnumeratingWithState_objects_count_(obja, v91, (uint64_t)&v227, (uint64_t)v255, 16);
  if (v205)
  {
    uint64_t v202 = *(void *)v228;
    do
    {
      for (id m = 0; m != (id)v205; id m = (char *)m + 1)
      {
        if (*(void *)v228 != v202) {
          objc_enumerationMutation(obja);
        }
        uint64_t v95 = *(void **)(*((void *)&v227 + 1) + 8 * (void)m);
        long long v223 = 0u;
        long long v224 = 0u;
        long long v225 = 0u;
        long long v226 = 0u;
        uint64_t v96 = objc_msgSend_asOutput(v95, v92, v93, v94);
        uint64_t v100 = objc_msgSend_allObjects(v96, v97, v98, v99);

        uint64_t v105 = objc_msgSend_countByEnumeratingWithState_objects_count_(v100, v101, (uint64_t)&v223, (uint64_t)v254, 16);
        if (v105)
        {
          uint64_t v106 = *(void *)v224;
          do
          {
            for (uint64_t n = 0; n != v105; ++n)
            {
              if (*(void *)v224 != v106) {
                objc_enumerationMutation(v100);
              }
              uint64_t v108 = *(void **)(*((void *)&v223 + 1) + 8 * n);
              if (objc_msgSend_isValid(v108, v102, v103, v104))
              {
                size_t v109 = objc_msgSend_outputs(v108, v102, v103, v104);
                int v112 = objc_msgSend_indexOfObject_(v109, v110, (uint64_t)v95, v111);

                objc_msgSend_name(v108, v113, v114, v115);
                id v116 = objc_claimAutoreleasedReturnValue();
                float32x4_t v120 = (char *)objc_msgSend_UTF8String(v116, v117, v118, v119);
                objc_msgSend_name(v95, v121, v122, v123);
                id v124 = objc_claimAutoreleasedReturnValue();
                unint64_t v128 = (const char *)objc_msgSend_UTF8String(v124, v125, v126, v127);
                int v129 = sub_19E252E58("None");
                sub_19E252C74((uint64_t)a2, v120, v112 + 9, v128, v129);
              }
            }
            uint64_t v105 = objc_msgSend_countByEnumeratingWithState_objects_count_(v100, v102, (uint64_t)&v223, (uint64_t)v254, 16);
          }
          while (v105);
        }
      }
      uint64_t v205 = objc_msgSend_countByEnumeratingWithState_objects_count_(obja, v92, (uint64_t)&v227, (uint64_t)v255, 16);
    }
    while (v205);
  }

  long long v221 = 0u;
  long long v222 = 0u;
  long long v219 = 0u;
  long long v220 = 0u;
  id v193 = v195;
  uint64_t v191 = objc_msgSend_countByEnumeratingWithState_objects_count_(v193, v130, (uint64_t)&v219, (uint64_t)v253, 16);
  if (v191)
  {
    uint64_t v192 = *(void *)v220;
    do
    {
      for (iuint64_t i = 0; ii != v191; ++ii)
      {
        if (*(void *)v220 != v192) {
          objc_enumerationMutation(v193);
        }
        uint64_t v134 = *(void **)(*((void *)&v219 + 1) + 8 * ii);
        long long v215 = 0u;
        long long v216 = 0u;
        long long v217 = 0u;
        long long v218 = 0u;
        unsigned __int8 v135 = objc_msgSend_asOutput(v134, v131, v132, v133, v191);
        objc_msgSend_allObjects(v135, v136, v137, v138);
        id v197 = (id)objc_claimAutoreleasedReturnValue();

        uint64_t v203 = objc_msgSend_countByEnumeratingWithState_objects_count_(v197, v139, (uint64_t)&v215, (uint64_t)v252, 16);
        if (v203)
        {
          id objb = *(id *)v216;
          do
          {
            for (jid j = 0; jj != v203; ++jj)
            {
              if (*(id *)v216 != objb) {
                objc_enumerationMutation(v197);
              }
              int v143 = *(void **)(*((void *)&v215 + 1) + 8 * jj);
              if (objc_msgSend_isValid(v143, v140, v141, v142))
              {
                long long v213 = 0u;
                long long v214 = 0u;
                long long v211 = 0u;
                long long v212 = 0u;
                int v144 = objc_msgSend_asInput(v134, v140, v141, v142);
                objc_msgSend_allObjects(v144, v145, v146, v147);
                id v209 = (id)objc_claimAutoreleasedReturnValue();

                uint64_t v152 = objc_msgSend_countByEnumeratingWithState_objects_count_(v209, v148, (uint64_t)&v211, (uint64_t)v251, 16);
                if (v152)
                {
                  uint64_t v153 = *(void *)v212;
                  do
                  {
                    for (kuint64_t k = 0; kk != v152; ++kk)
                    {
                      if (*(void *)v212 != v153) {
                        objc_enumerationMutation(v209);
                      }
                      unint64_t v155 = *(void **)(*((void *)&v211 + 1) + 8 * kk);
                      if (objc_msgSend_isValid(v155, v149, v150, v151))
                      {
                        uint64_t v156 = objc_msgSend_inputs(v155, v149, v150, v151);
                        int v159 = objc_msgSend_indexOfObject_(v156, v157, (uint64_t)v134, v158);

                        uint64_t v163 = objc_msgSend_outputs(v143, v160, v161, v162);
                        int v166 = objc_msgSend_indexOfObject_(v163, v164, (uint64_t)v134, v165);

                        objc_msgSend_name(v143, v167, v168, v169);
                        id v170 = objc_claimAutoreleasedReturnValue();
                        unint64_t v174 = (char *)objc_msgSend_UTF8String(v170, v171, v172, v173);
                        objc_msgSend_name(v155, v175, v176, v177);
                        id v178 = objc_claimAutoreleasedReturnValue();
                        uint64_t v182 = (const char *)objc_msgSend_UTF8String(v178, v179, v180, v181);
                        sub_19E252C74((uint64_t)a2, v174, v166 + 9, v182, v159 + 1);
                      }
                    }
                    uint64_t v152 = objc_msgSend_countByEnumeratingWithState_objects_count_(v209, v149, (uint64_t)&v211, (uint64_t)v251, 16);
                  }
                  while (v152);
                }
              }
            }
            uint64_t v203 = objc_msgSend_countByEnumeratingWithState_objects_count_(v197, v140, (uint64_t)&v215, (uint64_t)v252, 16);
          }
          while (v203);
        }
      }
      uint64_t v191 = objc_msgSend_countByEnumeratingWithState_objects_count_(v193, v131, (uint64_t)&v219, (uint64_t)v253, 16);
    }
    while (v191);
  }

  int v183 = (void **)v247;
  if (v247)
  {
    int v184 = v248;
    int v185 = v247;
    if (v248 != v247)
    {
      do
      {
        if (*((char *)v184 - 1) < 0) {
          operator delete(*(v184 - 3));
        }
        v184 -= 3;
      }
      while (v184 != v183);
      int v185 = v247;
    }
    uint64_t v248 = v183;
    operator delete(v185);
  }
  int v186 = (void **)v249;
  if (v249)
  {
    uint64_t v187 = v250;
    int v188 = v249;
    if (v250 != v249)
    {
      do
      {
        if (*((char *)v187 - 1) < 0) {
          operator delete(*(v187 - 3));
        }
        v187 -= 3;
      }
      while (v187 != v186);
      int v188 = v249;
    }
    signed int v250 = v186;
    operator delete(v188);
  }

  return 1;
}

void sub_19E2526F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, void *a14)
{
  unint64_t v15 = STACK[0x800];
  if (STACK[0x800])
  {
    unint64_t v16 = STACK[0x808];
    uint64_t v17 = (void *)STACK[0x800];
    if (STACK[0x808] != v15)
    {
      do
      {
        if (*(char *)(v16 - 1) < 0) {
          operator delete(*(void **)(v16 - 24));
        }
        v16 -= 24;
      }
      while (v16 != v15);
      uint64_t v17 = (void *)STACK[0x800];
    }
    STACK[0x808] = v15;
    operator delete(v17);
  }
  unint64_t v18 = STACK[0x818];
  if (STACK[0x818])
  {
    unint64_t v19 = STACK[0x820];
    uint64_t v20 = (void *)STACK[0x818];
    if (STACK[0x820] != v18)
    {
      do
      {
        if (*(char *)(v19 - 1) < 0) {
          operator delete(*(void **)(v19 - 24));
        }
        v19 -= 24;
      }
      while (v19 != v18);
      uint64_t v20 = (void *)STACK[0x818];
    }
    STACK[0x820] = v18;
    operator delete(v20);
  }

  _Unwind_Resume(a1);
}

void sub_19E252A08(uint64_t a1, void *a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  obid j = v3;
  uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v4, (uint64_t)&v28, (uint64_t)v32, 16);
  if (v8)
  {
    uint64_t v9 = *(void *)v29;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v29 != v9) {
          objc_enumerationMutation(obj);
        }
        objc_msgSend_name(*(void **)(*((void *)&v28 + 1) + 8 * i), v5, v6, v7);
        id v11 = objc_claimAutoreleasedReturnValue();
        unint64_t v15 = (const char *)objc_msgSend_UTF8String(v11, v12, v13, v14);
        size_t v16 = strlen(v15);
        if (v16 >= 0x7FFFFFFFFFFFFFF8) {
          sub_19E13C370();
        }
        size_t v17 = v16;
        if (v16 >= 0x17)
        {
          uint64_t v21 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v16 | 7) != 0x17) {
            uint64_t v21 = v16 | 7;
          }
          uint64_t v22 = v21 + 1;
          p_dst = (long long *)operator new(v21 + 1);
          *((void *)&__dst + 1) = v17;
          unint64_t v27 = v22 | 0x8000000000000000;
          *(void *)&long long __dst = p_dst;
        }
        else
        {
          HIBYTE(v27) = v16;
          p_dst = &__dst;
          if (!v16)
          {
            LOBYTE(__dst) = 0;
            unint64_t v19 = *(void *)(a1 + 8);
            if (v19 < *(void *)(a1 + 16)) {
              goto LABEL_10;
            }
            goto LABEL_15;
          }
        }
        memmove(p_dst, v15, v17);
        *((unsigned char *)p_dst + v17) = 0;
        unint64_t v19 = *(void *)(a1 + 8);
        if (v19 < *(void *)(a1 + 16))
        {
LABEL_10:
          long long v20 = __dst;
          *(void *)(v19 + 16) = v27;
          *(_OWORD *)unint64_t v19 = v20;
          unint64_t v27 = 0;
          long long __dst = 0uLL;
          *(void *)(a1 + 8) = v19 + 24;
          goto LABEL_17;
        }
LABEL_15:
        int v23 = sub_19E15A950((void **)a1, (uint64_t)&__dst);
        int v24 = SHIBYTE(v27);
        *(void *)(a1 + 8) = v23;
        if (v24 < 0) {
          operator delete((void *)__dst);
        }
LABEL_17:
      }
      uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v5, (uint64_t)&v28, (uint64_t)v32, 16);
    }
    while (v8);
  }
}

void sub_19E252C08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_19E13A748(v15);
  _Unwind_Resume(a1);
}

void sub_19E252C74(uint64_t a1, char *__s, int a3, const char *a4, int a5)
{
  size_t v10 = strlen(__s);
  if (v10 > 0x7FFFFFFFFFFFFFF7) {
    sub_19E13C370();
  }
  id v11 = (void *)v10;
  if (v10 >= 0x17)
  {
    uint64_t v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17) {
      uint64_t v13 = v10 | 7;
    }
    uint64_t v14 = v13 + 1;
    uint64_t v12 = (void **)operator new(v13 + 1);
    __dst[1] = v11;
    unint64_t v23 = v14 | 0x8000000000000000;
    __dst[0] = v12;
    goto LABEL_8;
  }
  HIBYTE(v23) = v10;
  uint64_t v12 = __dst;
  if (v10) {
LABEL_8:
  }
    memcpy(v12, __s, (size_t)v11);
  *((unsigned char *)v11 + (void)v12) = 0;
  size_t v15 = strlen(a4);
  if (v15 > 0x7FFFFFFFFFFFFFF7) {
    sub_19E13C370();
  }
  size_t v16 = (void *)v15;
  if (v15 >= 0x17)
  {
    uint64_t v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17) {
      uint64_t v18 = v15 | 7;
    }
    uint64_t v19 = v18 + 1;
    size_t v17 = operator new(v18 + 1);
    __p[1] = v16;
    unint64_t v21 = v19 | 0x8000000000000000;
    __p[0] = v17;
    goto LABEL_16;
  }
  HIBYTE(v21) = v15;
  size_t v17 = __p;
  if (v15) {
LABEL_16:
  }
    memcpy(v17, a4, (size_t)v16);
  *((unsigned char *)v16 + (void)v17) = 0;
  sub_19E3072C4(a1, (uint64_t)__dst, a3, (uint64_t)__p, a5);
  if ((SHIBYTE(v21) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v23) & 0x80000000) == 0) {
      return;
    }
LABEL_21:
    operator delete(__dst[0]);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v23) < 0) {
    goto LABEL_21;
  }
}

void sub_19E252E0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E252E58(const char *a1)
{
  size_t v2 = strlen(a1);
  if (v2 >= 0x7FFFFFFFFFFFFFF8) {
    sub_19E13C370();
  }
  size_t v3 = v2;
  if (v2 >= 0x17)
  {
    uint64_t v6 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17) {
      uint64_t v6 = v2 | 7;
    }
    uint64_t v7 = v6 + 1;
    p_dst = (_DWORD **)operator new(v6 + 1);
    size_t v17 = v3;
    unint64_t v18 = v7 | 0x8000000000000000;
    long long __dst = p_dst;
LABEL_12:
    memcpy(p_dst, a1, v3);
    *((unsigned char *)p_dst + v3) = 0;
    int v5 = HIBYTE(v18);
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  HIBYTE(v18) = v2;
  p_dst = &__dst;
  if (v2) {
    goto LABEL_12;
  }
  LOBYTE(__dst) = 0;
  int v5 = HIBYTE(v18);
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    if (v5 == 2)
    {
      switch((unsigned __int16)__dst)
      {
        case 0x3058u:
          return 1;
        case 0x3059u:
          uint64_t v9 = 9;
          break;
        case 0x3158u:
          return 2;
        case 0x3159u:
          uint64_t v9 = 10;
          break;
        default:
          goto LABEL_37;
      }
      goto LABEL_22;
    }
    if (v5 != 4 || __dst != 1701736270) {
      goto LABEL_37;
    }
    goto LABEL_21;
  }
LABEL_13:
  size_t v8 = v17;
  if (v17 != 2)
  {
LABEL_19:
    if (v8 != 4 || *__dst != 1701736270)
    {
LABEL_37:
      exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      *((unsigned char *)&v14.__r_.__value_.__s + 23) = 17;
      strcpy((char *)&v14, "Unexpected Port: ");
      uint64_t v12 = std::string::append(&v14, a1);
      long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      v15.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      std::logic_error::logic_error(exception, &v15);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
      __cxa_throw(exception, (struct type_info *)off_1E599CD18, MEMORY[0x1E4FBA1E8]);
    }
LABEL_21:
    uint64_t v9 = 0;
    goto LABEL_22;
  }
  switch(*(_WORD *)__dst)
  {
    case 0x3058:
      uint64_t v9 = 1;
      goto LABEL_22;
    case 0x3059:
      uint64_t v9 = 9;
      goto LABEL_36;
    case 0x3158:
      uint64_t v9 = 2;
LABEL_22:
      if ((v5 & 0x80) == 0) {
        return v9;
      }
      goto LABEL_36;
  }
  if (*(_WORD *)__dst != 12633)
  {
    size_t v8 = v17;
    goto LABEL_19;
  }
  uint64_t v9 = 10;
LABEL_36:
  operator delete(__dst);
  return v9;
}

void sub_19E253134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v24 & 1) == 0)
    {
LABEL_8:
      if (v23 < 0) {
        operator delete(a22);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t sub_19E253198(uint64_t a1, uint64_t a2, char *a3)
{
  sub_19E2374CC();
  uint64_t v6 = off_1E9459430(a2, 0);
  if (!v6) {
    sub_19E15DB6C(@"Failed to create NLModelContainer from model data", v7, v8, v9, v10, v11, v12, v13, v15);
  }
  *(void *)(a1 + 8) = v6;
  sub_19E251CB0(a1, a3, v8, v9, v10, v11, v12, v13);
  return 1;
}

uint64_t sub_19E25320C(uint64_t a1, uint64_t a2, char *a3)
{
  sub_19E2374CC();
  uint64_t v6 = (void *)MEMORY[0x1E4F1CB10];
  uint64_t v9 = objc_msgSend_stringWithUTF8String_(NSString, v7, a2, v8);
  uint64_t v12 = objc_msgSend_fileURLWithPath_(v6, v10, (uint64_t)v9, v11);

  uint64_t v13 = off_1E9459438(v12, 8, 0);
  if (!v13) {
    sub_19E15DB6C(@"Failed to create NLModelContainer from file: %@", v14, v15, v16, v17, v18, v19, v20, (uint64_t)v12);
  }
  *(void *)(a1 + 8) = v13;

  sub_19E251CB0(a1, a3, v21, v22, v23, v24, v25, v26);
  return 1;
}

void sub_19E2532CC(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    id v5 = objc_begin_catch(a1);
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    objc_msgSend_reason(v5, v7, v8, v9);
    id v10 = objc_claimAutoreleasedReturnValue();
    uint64_t v14 = (const char *)objc_msgSend_UTF8String(v10, v11, v12, v13);
    std::runtime_error::runtime_error(exception, v14);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_19E25339C()
{
  return 0;
}

uint64_t sub_19E2533A4()
{
  return 0;
}

uint64_t sub_19E2533AC()
{
  return 0;
}

uint64_t sub_19E2533B4()
{
  return 0;
}

uint64_t sub_19E2533BC(uint64_t a1)
{
  return a1;
}

uint64_t *sub_19E2533F8(uint64_t a1, const void **a2)
{
  size_t v2 = *(uint64_t ***)(a1 + 8);
  if (!v2) {
LABEL_25:
  }
    sub_19E13DF40("map::at:  key not found");
  int v3 = *((char *)a2 + 23);
  if (v3 >= 0) {
    size_t v4 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v4 = (size_t)a2[1];
  }
  if (v3 >= 0) {
    id v5 = a2;
  }
  else {
    id v5 = *a2;
  }
  while (1)
  {
    while (1)
    {
      int v6 = *((char *)v2 + 55);
      if (v6 >= 0) {
        size_t v7 = *((unsigned __int8 *)v2 + 55);
      }
      else {
        size_t v7 = (size_t)v2[5];
      }
      if (v6 >= 0) {
        uint64_t v8 = (uint64_t *)(v2 + 4);
      }
      else {
        uint64_t v8 = v2[4];
      }
      if (v7 >= v4) {
        size_t v9 = v4;
      }
      else {
        size_t v9 = v7;
      }
      int v10 = memcmp(v5, v8, v9);
      BOOL v11 = v4 < v7;
      if (v10) {
        BOOL v11 = v10 < 0;
      }
      if (!v11) {
        break;
      }
      size_t v2 = (uint64_t **)*v2;
      if (!v2) {
        goto LABEL_25;
      }
    }
    int v12 = memcmp(v8, v5, v9);
    BOOL v13 = v7 < v4;
    if (v12) {
      BOOL v13 = v12 < 0;
    }
    if (!v13) {
      return v2[7];
    }
    size_t v2 = (uint64_t **)v2[1];
    if (!v2) {
      goto LABEL_25;
    }
  }
}

uint64_t sub_19E2534F8(void *a1)
{
  __cxa_begin_catch(a1);
  size_t v2 = sub_19E26EDD8();
  sub_19E32F520(v2, v1);
  return 0;
}

void sub_19E253524(_Unwind_Exception *a1)
{
}

__n128 sub_19E253538@<Q0>(uint64_t a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  size_t v4 = *(uint64_t **)(a1 + 32);
  if (!v4) {
LABEL_25:
  }
    sub_19E13DF40("map::at:  key not found");
  int v5 = *((char *)a2 + 23);
  if (v5 >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  if (v5 >= 0) {
    size_t v7 = a2;
  }
  else {
    size_t v7 = *a2;
  }
  while (1)
  {
    while (1)
    {
      int v8 = *((char *)v4 + 55);
      if (v8 >= 0) {
        size_t v9 = *((unsigned __int8 *)v4 + 55);
      }
      else {
        size_t v9 = v4[5];
      }
      if (v8 >= 0) {
        int v10 = v4 + 4;
      }
      else {
        int v10 = (const void *)v4[4];
      }
      if (v9 >= v6) {
        size_t v11 = v6;
      }
      else {
        size_t v11 = v9;
      }
      int v12 = memcmp(v7, v10, v11);
      BOOL v13 = v6 < v9;
      if (v12) {
        BOOL v13 = v12 < 0;
      }
      if (!v13) {
        break;
      }
      size_t v4 = (uint64_t *)*v4;
      if (!v4) {
        goto LABEL_25;
      }
    }
    int v14 = memcmp(v10, v7, v11);
    BOOL v15 = v9 < v6;
    if (v14) {
      BOOL v15 = v14 < 0;
    }
    if (!v15) {
      break;
    }
    size_t v4 = (uint64_t *)v4[1];
    if (!v4) {
      goto LABEL_25;
    }
  }
  __n128 result = *(__n128 *)(v4 + 7);
  long long v17 = *(_OWORD *)(v4 + 9);
  *(void *)(a3 + 32) = v4[11];
  *(__n128 *)a3 = result;
  *(_OWORD *)(a3 + 16) = v17;
  return result;
}

void sub_19E25364C(void *a1)
{
  __cxa_begin_catch(a1);
  int v3 = sub_19E26EDD8();
  sub_19E32F5D4(v3, v2, v1);
}

void sub_19E253678(_Unwind_Exception *a1)
{
}

uint64_t sub_19E25368C(uint64_t a1)
{
  return a1 + 24;
}

uint64_t **sub_19E253694(uint64_t **a1, long long *a2, char **a3)
{
  int v5 = a2;
  __n128 result = sub_19E15A210(a1, (const void **)a2, (uint64_t)&unk_19E351150, &v5) + 7;
  if (result != (uint64_t **)a3) {
    return (uint64_t **)sub_19E25379C(result, *a3, a3[1], a3[1] - *a3);
  }
  return result;
}

void *sub_19E2536EC(uint64_t **a1, long long *a2, char *a3, unint64_t a4)
{
  int v8 = a2;
  size_t v6 = sub_19E15A210(a1, (const void **)a2, (uint64_t)&unk_19E351150, &v8);
  return sub_19E25379C(v6 + 7, a3, &a3[a4], a4);
}

__n128 sub_19E253744(uint64_t a1, long long *a2, uint64_t a3)
{
  size_t v7 = a2;
  size_t v4 = sub_19E2538E8((uint64_t **)(a1 + 24), (const void **)a2, (uint64_t)&unk_19E351150, &v7);
  __n128 result = *(__n128 *)a3;
  long long v6 = *(_OWORD *)(a3 + 16);
  v4[11] = *(uint64_t **)(a3 + 32);
  *(_OWORD *)(v4 + 9) = v6;
  *(__n128 *)(v4 + 7) = result;
  return result;
}

void *sub_19E25379C(void *result, char *__src, char *a3, unint64_t a4)
{
  size_t v7 = result;
  unint64_t v8 = result[2];
  size_t v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      unint64_t v8 = 0;
      *size_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0) {
      goto LABEL_22;
    }
    uint64_t v10 = 2 * v8;
    if (2 * v8 <= a4) {
      uint64_t v10 = a4;
    }
    size_t v11 = v8 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v10;
    if ((v11 & 0x8000000000000000) != 0) {
LABEL_22:
    }
      sub_19E13D694();
    __n128 result = operator new(v11);
    size_t v9 = (char *)result;
    *size_t v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v11;
    size_t v12 = a3 - __src;
    if (v12) {
      __n128 result = memcpy(result, __src, v12);
    }
LABEL_21:
    v7[1] = &v9[v12];
    return result;
  }
  BOOL v13 = (unsigned char *)result[1];
  size_t v14 = v13 - v9;
  if (v13 - v9 >= a4)
  {
    size_t v12 = a3 - __src;
    if (v12) {
      __n128 result = memmove((void *)*result, __src, v12);
    }
    goto LABEL_21;
  }
  BOOL v15 = &__src[v14];
  if (v13 != v9)
  {
    __n128 result = memmove((void *)*result, __src, v14);
    size_t v9 = (char *)v7[1];
  }
  if (a3 != v15) {
    __n128 result = memmove(v9, v15, a3 - v15);
  }
  v7[1] = &v9[a3 - v15];
  return result;
}

uint64_t **sub_19E2538E8(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  size_t v7 = a1 + 1;
  long long v6 = a1[1];
  if (v6)
  {
    int v8 = *((char *)a2 + 23);
    if (v8 >= 0) {
      size_t v9 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v9 = (size_t)a2[1];
    }
    if (v8 >= 0) {
      uint64_t v10 = a2;
    }
    else {
      uint64_t v10 = *a2;
    }
    while (1)
    {
      while (1)
      {
        size_t v11 = (uint64_t **)v6;
        size_t v14 = (const void *)v6[4];
        size_t v12 = v6 + 4;
        BOOL v13 = v14;
        int v15 = *((char *)v12 + 23);
        if (v15 >= 0) {
          size_t v16 = *((unsigned __int8 *)v12 + 23);
        }
        else {
          size_t v16 = v12[1];
        }
        if (v15 >= 0) {
          long long v17 = v12;
        }
        else {
          long long v17 = v13;
        }
        if (v16 >= v9) {
          size_t v18 = v9;
        }
        else {
          size_t v18 = v16;
        }
        int v19 = memcmp(v10, v17, v18);
        BOOL v20 = v9 < v16;
        if (v19) {
          BOOL v20 = v19 < 0;
        }
        if (!v20) {
          break;
        }
        long long v6 = *v11;
        size_t v7 = v11;
        if (!*v11) {
          goto LABEL_27;
        }
      }
      int v21 = memcmp(v17, v10, v18);
      BOOL v22 = v16 < v9;
      if (v21) {
        BOOL v22 = v21 < 0;
      }
      if (!v22) {
        return v11;
      }
      long long v6 = v11[1];
      if (!v6)
      {
        size_t v7 = v11 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    size_t v11 = a1 + 1;
LABEL_27:
    uint64_t v23 = (char *)operator new(0x60uLL);
    uint64_t v24 = v23 + 32;
    uint64_t v25 = *a4;
    if (*((char *)*a4 + 23) < 0)
    {
      sub_19E13C2D0(v24, *(void **)v25, *((void *)v25 + 1));
    }
    else
    {
      long long v26 = *v25;
      *((void *)v23 + 6) = *((void *)v25 + 2);
      *(_OWORD *)uint64_t v24 = v26;
    }
    *((void *)v23 + 11) = 0;
    *(_OWORD *)(v23 + 72) = 0u;
    *(_OWORD *)(v23 + 56) = 0u;
    *(void *)uint64_t v23 = 0;
    *((void *)v23 + 1) = 0;
    *((void *)v23 + 2) = v11;
    *size_t v7 = (uint64_t *)v23;
    unint64_t v27 = (uint64_t *)**a1;
    long long v28 = (uint64_t *)v23;
    if (v27)
    {
      *a1 = v27;
      long long v28 = *v7;
    }
    sub_19E13C8A0(a1[1], v28);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return (uint64_t **)v23;
}

void sub_19E253A80(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19E253A94(uint64_t a1, uint64_t a2, uint64_t a3, void *__src)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_19E13C2D0(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a2;
    uint64_t v22 = *(void *)(a2 + 16);
  }
  sub_19E25BD4C(a1, (long long *)__p, a3, __src);
  if (SHIBYTE(v22) < 0) {
    operator delete(__p[0]);
  }
  *(void *)a1 = &unk_1EF0AB3F8;
  sub_19E26B77C(a1 + 1016, (uint64_t)__src);
  HIBYTE(v24) = 14;
  strcpy((char *)v23, "dilationStride");
  LODWORD(v19) = 1;
  sub_19E25455C((uint64_t **)(a1 + 1016), v23, (uint64_t)v23, (int *)&v19);
  if (SHIBYTE(v24) < 0) {
    operator delete((void *)v23[0]);
  }
  *(void *)(a1 + 1152) = 0;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(void *)(a1 + 1160) = __src[7];
  size_t v7 = *(const void **)(a1 + 1040);
  unint64_t v8 = *(void *)(a1 + 1080);
  uint64_t v9 = *(void *)(a1 + 1120);
  LODWORD(v23[0]) = 1;
  v23[1] = v7;
  unint64_t v24 = v8;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v25 = v9;
  sub_19E13C5C0(a1 + 16, (int *)v23, (int *)&v28);
  uint64_t v10 = (const void *)sub_19E26B360(a1 + 1040);
  unint64_t v11 = sub_19E26B360(a1 + 1080);
  uint64_t v12 = *(void *)(a1 + 1128);
  LODWORD(v23[0]) = 9;
  v23[1] = v10;
  unint64_t v24 = v11;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v25 = v12;
  sub_19E13C5C0(a1 + 40, (int *)v23, (int *)&v28);
  uint64_t v13 = __src[72];
  HIBYTE(v24) = 4;
  strcpy((char *)v23, "bias");
  uint64_t v25 = v13;
  v20[0] = 0;
  v20[1] = 0;
  int v19 = v20;
  sub_19E254AAC((uint64_t **)&v19, (uint64_t *)v20, v23, (uint64_t)v23);
  if (SHIBYTE(v24) < 0) {
    operator delete((void *)v23[0]);
  }
  HIBYTE(v24) = 4;
  strcpy((char *)v23, "bias");
  size_t v14 = sub_19E254BAC((uint64_t)&v19, (uint64_t)v23);
  if (v15) {
    size_t v16 = v14;
  }
  else {
    size_t v16 = 0;
  }
  uint64_t v17 = *(void *)(a1 + 1128);
  *(_DWORD *)(a1 + 1136) = 0;
  *(void *)(a1 + 1144) = v17;
  *(void *)(a1 + 1152) = v16;
  if (SHIBYTE(v24) < 0) {
    operator delete((void *)v23[0]);
  }
  sub_19E15A064((uint64_t)&v19, v20[0]);
  return a1;
}

void sub_19E253CF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, char *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  sub_19E15A064((uint64_t)&a10, a11);
  sub_19E15A064(v22, *(char **)(v21 + 1024));
  sub_19E25BF30(v21);
  _Unwind_Resume(a1);
}

void sub_19E253D7C(_Unwind_Exception *a1)
{
  sub_19E25BF30(v1);
  _Unwind_Resume(a1);
}

void sub_19E253D90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E253DB0(void *a1, uint64_t a2)
{
  size_t v4 = (void *)a1[20];
  int v5 = (void *)a1[21];
  if (v4 == v5)
  {
    a1[21] = v4;
    if (!a1[31]) {
      goto LABEL_10;
    }
    goto LABEL_8;
  }
  do
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  while (v4 != v5);
  a1[21] = a1[20];
  if (a1[31])
  {
LABEL_8:
    uint64_t v7 = a1[29];
    long long v6 = (uint64_t *)a1[30];
    uint64_t v8 = *v6;
    *(void *)(v8 + 8) = *(void *)(v7 + 8);
    **(void **)(v7 + 8) = v8;
    a1[31] = 0;
    if (v6 != a1 + 29)
    {
      do
      {
        uint64_t v9 = (uint64_t *)v6[1];
        operator delete(v6);
        long long v6 = v9;
      }
      while (v9 != a1 + 29);
    }
  }
LABEL_10:
  uint64_t v10 = *(uint64_t (**)(uint64_t, void *))(*(void *)a2 + 200);

  return v10(a2, a1);
}

uint64_t sub_19E253EB8(uint64_t a1, int a2, int a3)
{
  *(_DWORD *)(a1 + 280) = a3;
  size_t v4 = *(uint64_t **)(a1 + 160);
  int v5 = *(uint64_t **)(a1 + 168);
  if (v4 != v5)
  {
    uint64_t v6 = (a3 * a2);
    do
    {
      uint64_t v7 = *v4++;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v6);
    }
    while (v4 != v5);
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 32);

  return v8(a1);
}

uint64_t sub_19E253F5C(uint64_t **a1, int a2)
{
  size_t v4 = a1[2];
  uint64_t v6 = v4[5];
  uint64_t v5 = v4[6];
  uint64_t v7 = (uint64_t)(a1 + 127);
  unint64_t v8 = sub_19E26B3C8((uint64_t)(a1 + 130));
  uint64_t v9 = sub_19E254720(v7, 0);
  unint64_t v10 = sub_19E254934(v7, 0);
  unint64_t v11 = sub_19E26B3C8((uint64_t)(a1 + 135));
  uint64_t v33 = sub_19E254720(v7, 1);
  uint64_t v32 = sub_19E254934(v7, 1);
  uint64_t v12 = a1[141];
  int v31 = ((uint64_t (*)(uint64_t **))(*a1)[28])(a1);
  uint64_t result = ((uint64_t (*)(uint64_t **, uint64_t))(*a1)[27])(a1, 1);
  char v15 = a1 + 6;
  size_t v14 = (char *)a1[6];
  uint64_t v34 = v12;
  if (v14)
  {
    do
    {
      while (1)
      {
        size_t v16 = v14;
        int v17 = *((_DWORD *)v14 + 8);
        if (v17 <= a2) {
          break;
        }
        size_t v14 = *(char **)v16;
        char v15 = (uint64_t **)v16;
        if (!*(void *)v16) {
          goto LABEL_9;
        }
      }
      if (v17 >= a2)
      {
        unint64_t v27 = v32;
        uint64_t v26 = v33;
        int v28 = v31;
        goto LABEL_12;
      }
      size_t v14 = (char *)*((void *)v16 + 1);
    }
    while (v14);
    char v15 = (uint64_t **)(v16 + 8);
  }
  else
  {
    size_t v16 = (char *)(a1 + 6);
  }
LABEL_9:
  uint64_t v29 = result;
  unint64_t v30 = v11;
  unint64_t v18 = v10;
  uint64_t v19 = v9;
  unint64_t v20 = v8;
  uint64_t v21 = v5;
  uint64_t v22 = v6;
  uint64_t v23 = v16;
  size_t v16 = (char *)operator new(0x50uLL);
  *((_DWORD *)v16 + 8) = a2;
  *(_OWORD *)(v16 + 40) = 0u;
  *(_OWORD *)(v16 + 56) = 0u;
  *((void *)v16 + 9) = 0;
  *(void *)size_t v16 = 0;
  *((void *)v16 + 1) = 0;
  *((void *)v16 + 2) = v23;
  char *v15 = (uint64_t *)v16;
  unint64_t v24 = (uint64_t *)*a1[5];
  uint64_t v25 = (uint64_t *)v16;
  if (v24)
  {
    a1[5] = v24;
    uint64_t v25 = *v15;
  }
  sub_19E13C8A0(a1[6], v25);
  a1[7] = (uint64_t *)((char *)a1[7] + 1);
  uint64_t v6 = v22;
  uint64_t v5 = v21;
  unint64_t v8 = v20;
  uint64_t v9 = v19;
  unint64_t v10 = v18;
  unint64_t v11 = v30;
  int v28 = v31;
  unint64_t v27 = v32;
  uint64_t v26 = v33;
  uint64_t result = v29;
LABEL_12:
  *((void *)v16 + 5) = (v6 + 2 * v8 - v9) / v10 + 1;
  *((void *)v16 + 6) = (v5 + 2 * v11 - v26) / v27 + 1;
  *((void *)v16 + 7) = v34;
  *((void *)v16 + 8) = v28;
  *((void *)v16 + 9) = (int)result;
  return result;
}

BOOL sub_19E254184(uint64_t a1, void *a2, int a3)
{
  if ((a3 - 8) < 0xFFFFFFF9) {
    return 0;
  }
  unint64_t v8 = (uint64_t **)(a1 + 24);
  uint64_t v7 = *(char **)(a1 + 24);
  uint64_t v9 = (uint64_t **)(a1 + 24);
  unint64_t v10 = (char *)(a1 + 24);
  if (v7)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v10 = v7;
        int v11 = *((_DWORD *)v7 + 8);
        if (v11 <= a3) {
          break;
        }
        uint64_t v7 = *(char **)v10;
        uint64_t v9 = (uint64_t **)v10;
        if (!*(void *)v10) {
          goto LABEL_10;
        }
      }
      if (v11 >= a3) {
        break;
      }
      uint64_t v7 = (char *)*((void *)v10 + 1);
      if (!v7)
      {
        uint64_t v9 = (uint64_t **)(v10 + 8);
        goto LABEL_10;
      }
    }
  }
  else
  {
LABEL_10:
    uint64_t v12 = v10;
    unint64_t v10 = (char *)operator new(0x50uLL);
    *((_DWORD *)v10 + 8) = a3;
    *(_OWORD *)(v10 + 40) = 0u;
    *(_OWORD *)(v10 + 56) = 0u;
    *((void *)v10 + 9) = 0;
    *(void *)unint64_t v10 = 0;
    *((void *)v10 + 1) = 0;
    *((void *)v10 + 2) = v12;
    *uint64_t v9 = (uint64_t *)v10;
    uint64_t v13 = **(void **)(a1 + 16);
    size_t v14 = (uint64_t *)v10;
    if (v13)
    {
      *(void *)(a1 + 16) = v13;
      size_t v14 = *v9;
    }
    sub_19E13C8A0(*(uint64_t **)(a1 + 24), v14);
    ++*(void *)(a1 + 32);
  }
  if (*((void *)v10 + 5) != *a2) {
    return 1;
  }
  char v15 = *v8;
  size_t v16 = v8;
  int v17 = (char *)v8;
  if (*v8)
  {
    while (1)
    {
      while (1)
      {
        int v17 = (char *)v15;
        int v18 = *((_DWORD *)v15 + 8);
        if (v18 <= a3) {
          break;
        }
        char v15 = *(uint64_t **)v17;
        size_t v16 = (uint64_t **)v17;
        if (!*(void *)v17) {
          goto LABEL_21;
        }
      }
      if (v18 >= a3) {
        break;
      }
      char v15 = (uint64_t *)*((void *)v17 + 1);
      if (!v15)
      {
        size_t v16 = (uint64_t **)(v17 + 8);
        goto LABEL_21;
      }
    }
  }
  else
  {
LABEL_21:
    uint64_t v19 = v17;
    int v17 = (char *)operator new(0x50uLL);
    *((_DWORD *)v17 + 8) = a3;
    *(_OWORD *)(v17 + 40) = 0u;
    *(_OWORD *)(v17 + 56) = 0u;
    *((void *)v17 + 9) = 0;
    *(void *)int v17 = 0;
    *((void *)v17 + 1) = 0;
    *((void *)v17 + 2) = v19;
    *size_t v16 = (uint64_t *)v17;
    uint64_t v20 = **(void **)(a1 + 16);
    uint64_t v21 = (uint64_t *)v17;
    if (v20)
    {
      *(void *)(a1 + 16) = v20;
      uint64_t v21 = *v16;
    }
    sub_19E13C8A0(*(uint64_t **)(a1 + 24), v21);
    ++*(void *)(a1 + 32);
  }
  if (*((void *)v17 + 6) != a2[1]) {
    return 1;
  }
  uint64_t v22 = *v8;
  uint64_t v23 = (char *)v8;
  if (*v8)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v23 = (char *)v22;
        int v24 = *((_DWORD *)v22 + 8);
        if (v24 <= a3) {
          break;
        }
        uint64_t v22 = *(uint64_t **)v23;
        unint64_t v8 = (uint64_t **)v23;
        if (!*(void *)v23) {
          goto LABEL_32;
        }
      }
      if (v24 >= a3) {
        break;
      }
      uint64_t v22 = (uint64_t *)*((void *)v23 + 1);
      if (!v22)
      {
        unint64_t v8 = (uint64_t **)(v23 + 8);
        goto LABEL_32;
      }
    }
  }
  else
  {
LABEL_32:
    uint64_t v25 = v23;
    uint64_t v23 = (char *)operator new(0x50uLL);
    *((_DWORD *)v23 + 8) = a3;
    *(_OWORD *)(v23 + 40) = 0u;
    *(_OWORD *)(v23 + 56) = 0u;
    *((void *)v23 + 9) = 0;
    *(void *)uint64_t v23 = 0;
    *((void *)v23 + 1) = 0;
    *((void *)v23 + 2) = v25;
    long long *v8 = (uint64_t *)v23;
    uint64_t v26 = **(void **)(a1 + 16);
    unint64_t v27 = (uint64_t *)v23;
    if (v26)
    {
      *(void *)(a1 + 16) = v26;
      unint64_t v27 = *v8;
    }
    sub_19E13C8A0(*(uint64_t **)(a1 + 24), v27);
    ++*(void *)(a1 + 32);
  }
  return *((void *)v23 + 7) != a2[2];
}

__n128 sub_19E2543E8@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *sub_19E25D8B0(a1, 1);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(v7 + 56);
  *(_DWORD *)a3 = 1;
  __n128 result = *(__n128 *)(v7 + 40);
  *(__n128 *)(a3 + 8) = result;
  *(void *)(a3 + 24) = v8;
  *(void *)(a3 + 32) = a2;
  *(void *)(a3 + 40) = v6;
  return result;
}

__n128 sub_19E254444@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *sub_19E25DA90(a1, 9);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(v7 + 56);
  *(_DWORD *)a3 = 1;
  __n128 result = *(__n128 *)(v7 + 40);
  *(__n128 *)(a3 + 8) = result;
  *(void *)(a3 + 24) = v8;
  *(void *)(a3 + 32) = a2;
  *(void *)(a3 + 40) = v6;
  return result;
}

uint64_t sub_19E2544A0(uint64_t a1)
{
  *(void *)a1 = &unk_1EF0AB3F8;
  sub_19E15A064(a1 + 1016, *(char **)(a1 + 1024));

  return sub_19E25BF30(a1);
}

void sub_19E2544FC(uint64_t a1)
{
  *(void *)a1 = &unk_1EF0AB3F8;
  sub_19E15A064(a1 + 1016, *(char **)(a1 + 1024));
  size_t v2 = (void *)sub_19E25BF30(a1);

  operator delete(v2);
}

uint64_t **sub_19E25455C(uint64_t **a1, const void **a2, uint64_t a3, int *a4)
{
  uint64_t v8 = a1 + 1;
  uint64_t v7 = a1[1];
  if (v7)
  {
    int v9 = *((char *)a2 + 23);
    if (v9 >= 0) {
      size_t v10 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v10 = (size_t)a2[1];
    }
    if (v9 >= 0) {
      int v11 = a2;
    }
    else {
      int v11 = *a2;
    }
    do
    {
      while (1)
      {
        uint64_t v12 = (uint64_t **)v7;
        char v15 = (const void *)v7[4];
        uint64_t v13 = v7 + 4;
        size_t v14 = v15;
        int v16 = *((char *)v13 + 23);
        if (v16 >= 0) {
          size_t v17 = *((unsigned __int8 *)v13 + 23);
        }
        else {
          size_t v17 = v13[1];
        }
        if (v16 >= 0) {
          int v18 = v13;
        }
        else {
          int v18 = v14;
        }
        if (v17 >= v10) {
          size_t v19 = v10;
        }
        else {
          size_t v19 = v17;
        }
        int v20 = memcmp(v11, v18, v19);
        BOOL v21 = v10 < v17;
        if (v20) {
          BOOL v21 = v20 < 0;
        }
        if (!v21) {
          break;
        }
        uint64_t v7 = *v12;
        uint64_t v8 = v12;
        if (!*v12) {
          goto LABEL_26;
        }
      }
      int v22 = memcmp(v18, v11, v19);
      BOOL v23 = v17 < v10;
      if (v22) {
        BOOL v23 = v22 < 0;
      }
      if (!v23) {
        return v12;
      }
      uint64_t v7 = v12[1];
    }
    while (v7);
    uint64_t v8 = v12 + 1;
LABEL_26:
    int v24 = operator new(0x50uLL);
    uint64_t v25 = (char *)(v24 + 4);
    if (*(char *)(a3 + 23) < 0) {
      goto LABEL_29;
    }
  }
  else
  {
    uint64_t v12 = a1 + 1;
    int v24 = operator new(0x50uLL);
    uint64_t v25 = (char *)(v24 + 4);
    if (*(char *)(a3 + 23) < 0)
    {
LABEL_29:
      sub_19E13C2D0(v25, *(void **)a3, *(void *)(a3 + 8));
      goto LABEL_30;
    }
  }
  *(_OWORD *)uint64_t v25 = *(_OWORD *)a3;
  *((void *)v25 + 2) = *(void *)(a3 + 16);
LABEL_30:
  v24[7] = *a4;
  *((_DWORD *)v24 + 18) = 0;
  void *v24 = 0;
  v24[1] = 0;
  v24[2] = v12;
  long long *v8 = v24;
  uint64_t v26 = (uint64_t *)**a1;
  unint64_t v27 = v24;
  if (v26)
  {
    *a1 = v26;
    unint64_t v27 = *v8;
  }
  sub_19E13C8A0(a1[1], v27);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v24;
}

void sub_19E25470C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19E254720(uint64_t a1, int a2)
{
  char v16 = 6;
  strcpy((char *)__s1, "filter");
  size_t v2 = *(uint64_t ***)(a1 + 8);
  if (!v2) {
LABEL_20:
  }
    sub_19E13DF40("map::at:  key not found");
  while (1)
  {
    while (1)
    {
      int v4 = *((char *)v2 + 55);
      if (v4 >= 0) {
        unint64_t v5 = *((unsigned __int8 *)v2 + 55);
      }
      else {
        unint64_t v5 = (unint64_t)v2[5];
      }
      if (v4 >= 0) {
        uint64_t v6 = (uint64_t *)(v2 + 4);
      }
      else {
        uint64_t v6 = v2[4];
      }
      if (v5 >= 6) {
        size_t v7 = 6;
      }
      else {
        size_t v7 = v5;
      }
      int v8 = memcmp(__s1, v6, v7);
      BOOL v9 = v8 < 0;
      if (!v8) {
        BOOL v9 = v5 > 6;
      }
      if (!v9) {
        break;
      }
      size_t v2 = (uint64_t **)*v2;
      if (!v2) {
        goto LABEL_20;
      }
    }
    int v10 = memcmp(v6, __s1, v7);
    BOOL v11 = v5 < 6;
    if (v10) {
      BOOL v11 = v10 < 0;
    }
    if (!v11) {
      break;
    }
    size_t v2 = (uint64_t **)v2[1];
    if (!v2) {
      goto LABEL_20;
    }
  }
  int v17 = a2;
  uint64_t v12 = *((unsigned int *)v2 + 18);
  if (v12 == -1) {
    sub_19E254898();
  }
  int v18 = &v17;
  uint64_t v13 = ((uint64_t (*)(int **, uint64_t **))*(&off_1EF0AC0E0 + v12))(&v18, v2 + 7);
  if (v16 < 0) {
    operator delete(__s1[0]);
  }
  return v13;
}

void sub_19E25487C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E254898()
{
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x1E4FBA4F0] + 16;
  __cxa_throw(exception, MEMORY[0x1E4FBA340], (void (*)(void *))std::exception::~exception);
}

uint64_t sub_19E2548E8(uint64_t a1, uint64_t a2)
{
  return *(void *)a2;
}

uint64_t sub_19E2548F0(unsigned int **a1, uint64_t a2)
{
  unint64_t v2 = **a1;
  if ((v2 & 0x80000000) != 0) {
    unint64_t v2 = (int)v2 + 2;
  }
  if (v2 >= 2) {
    sub_19E13DF40("array::at");
  }
  return *(void *)(a2 + 8 * v2);
}

uint64_t sub_19E254934(uint64_t a1, int a2)
{
  char v16 = 6;
  strcpy((char *)__s1, "stride");
  unint64_t v2 = *(uint64_t ***)(a1 + 8);
  if (!v2) {
LABEL_20:
  }
    sub_19E13DF40("map::at:  key not found");
  while (1)
  {
    while (1)
    {
      int v4 = *((char *)v2 + 55);
      if (v4 >= 0) {
        unint64_t v5 = *((unsigned __int8 *)v2 + 55);
      }
      else {
        unint64_t v5 = (unint64_t)v2[5];
      }
      if (v4 >= 0) {
        uint64_t v6 = (uint64_t *)(v2 + 4);
      }
      else {
        uint64_t v6 = v2[4];
      }
      if (v5 >= 6) {
        size_t v7 = 6;
      }
      else {
        size_t v7 = v5;
      }
      int v8 = memcmp(__s1, v6, v7);
      BOOL v9 = v8 < 0;
      if (!v8) {
        BOOL v9 = v5 > 6;
      }
      if (!v9) {
        break;
      }
      unint64_t v2 = (uint64_t **)*v2;
      if (!v2) {
        goto LABEL_20;
      }
    }
    int v10 = memcmp(v6, __s1, v7);
    BOOL v11 = v5 < 6;
    if (v10) {
      BOOL v11 = v10 < 0;
    }
    if (!v11) {
      break;
    }
    unint64_t v2 = (uint64_t **)v2[1];
    if (!v2) {
      goto LABEL_20;
    }
  }
  int v17 = a2;
  uint64_t v12 = *((unsigned int *)v2 + 18);
  if (v12 == -1) {
    sub_19E254898();
  }
  int v18 = &v17;
  uint64_t v13 = ((uint64_t (*)(int **, uint64_t **))*(&off_1EF0AC0E0 + v12))(&v18, v2 + 7);
  if (v16 < 0) {
    operator delete(__s1[0]);
  }
  return v13;
}

void sub_19E254A90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_19E254AAC(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t v6 = sub_19E159C68(a1, a2, &v15, &v14, a3);
  if (*v6) {
    return (void *)*v6;
  }
  int v8 = v6;
  BOOL v9 = operator new(0x40uLL);
  int v10 = v9 + 4;
  if (*(char *)(a4 + 23) < 0)
  {
    sub_19E13C2D0(v10, *(void **)a4, *(void *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)int v10 = *(_OWORD *)a4;
    v9[6] = *(void *)(a4 + 16);
  }
  v9[7] = *(void *)(a4 + 24);
  BOOL v11 = v15;
  *BOOL v9 = 0;
  v9[1] = 0;
  v9[2] = v11;
  uint64_t *v8 = (uint64_t)v9;
  uint64_t v12 = (uint64_t *)**a1;
  uint64_t v13 = v9;
  if (v12)
  {
    *a1 = v12;
    uint64_t v13 = (uint64_t *)*v8;
  }
  sub_19E13C8A0(a1[1], v13);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v9;
}

void sub_19E254B98(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_19E254BAC(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (void *)a2;
  if (!sub_19E254CCC(a1, a2)) {
    return 0;
  }
  int v4 = *(uint64_t ***)(a1 + 8);
  if (!v4) {
LABEL_26:
  }
    sub_19E13DF40("map::at:  key not found");
  int v5 = *((char *)v2 + 23);
  if (v5 >= 0) {
    size_t v6 = *((unsigned __int8 *)v2 + 23);
  }
  else {
    size_t v6 = v2[1];
  }
  if (v5 < 0) {
    unint64_t v2 = (void *)*v2;
  }
  while (1)
  {
    while (1)
    {
      int v7 = *((char *)v4 + 55);
      if (v7 >= 0) {
        size_t v8 = *((unsigned __int8 *)v4 + 55);
      }
      else {
        size_t v8 = (size_t)v4[5];
      }
      if (v7 >= 0) {
        BOOL v9 = (uint64_t *)(v4 + 4);
      }
      else {
        BOOL v9 = v4[4];
      }
      if (v8 >= v6) {
        size_t v10 = v6;
      }
      else {
        size_t v10 = v8;
      }
      int v11 = memcmp(v2, v9, v10);
      BOOL v12 = v6 < v8;
      if (v11) {
        BOOL v12 = v11 < 0;
      }
      if (!v12) {
        break;
      }
      int v4 = (uint64_t **)*v4;
      if (!v4) {
        goto LABEL_26;
      }
    }
    int v13 = memcmp(v9, v2, v10);
    BOOL v14 = v8 < v6;
    if (v13) {
      BOOL v14 = v13 < 0;
    }
    if (!v14) {
      return v4[7];
    }
    int v4 = (uint64_t **)v4[1];
    if (!v4) {
      goto LABEL_26;
    }
  }
}

BOOL sub_19E254CCC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    goto LABEL_40;
  }
  int v4 = *(char *)(a2 + 23);
  size_t v5 = v4 >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(void *)(a2 + 8);
  size_t v6 = v4 >= 0 ? (const void *)a2 : *(const void **)a2;
  uint64_t v7 = a1 + 8;
  do
  {
    int v8 = *(char *)(v3 + 55);
    if (v8 >= 0) {
      size_t v9 = *(unsigned __int8 *)(v3 + 55);
    }
    else {
      size_t v9 = *(void *)(v3 + 40);
    }
    if (v8 >= 0) {
      size_t v10 = (const void *)(v3 + 32);
    }
    else {
      size_t v10 = *(const void **)(v3 + 32);
    }
    if (v5 >= v9) {
      size_t v11 = v9;
    }
    else {
      size_t v11 = v5;
    }
    int v12 = memcmp(v10, v6, v11);
    BOOL v13 = v9 < v5;
    if (v12) {
      BOOL v13 = v12 < 0;
    }
    BOOL v14 = !v13;
    if (v13) {
      char v15 = (uint64_t *)(v3 + 8);
    }
    else {
      char v15 = (uint64_t *)v3;
    }
    if (v14) {
      uint64_t v7 = v3;
    }
    uint64_t v3 = *v15;
  }
  while (*v15);
  if (v7 == v2) {
    goto LABEL_40;
  }
  int v16 = *(char *)(v7 + 55);
  size_t v17 = v16 >= 0 ? *(unsigned __int8 *)(v7 + 55) : *(void *)(v7 + 40);
  int v18 = v16 >= 0 ? (const void *)(v7 + 32) : *(const void **)(v7 + 32);
  size_t v19 = v17 >= v5 ? v5 : v17;
  int v20 = memcmp(v6, v18, v19);
  BOOL v21 = v5 < v17;
  if (v20) {
    BOOL v21 = v20 < 0;
  }
  if (v21) {
LABEL_40:
  }
    uint64_t v7 = v2;
  return v7 != v2;
}

void *sub_19E254DDC(void *a1)
{
  *a1 = &unk_1EF0A9AE8;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void *sub_19E254E48(void *a1)
{
  *a1 = &unk_1EF0A9AE8;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_19E254EB4(void *__p)
{
  void *__p = &unk_1EF0A9AE8;
  uint64_t v2 = __p[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  operator delete(__p);
}

void sub_19E254F30(uint64_t a1, unsigned char *a2)
{
  uint64_t v4 = 1040;
  if (!a2[1057]) {
    uint64_t v4 = 1024;
  }
  if (*(void *)&a2[v4])
  {
    size_t v5 = a2 + 1040;
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v7 = (*(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a2 + 72))(a2, 1);
    uint64_t v8 = sub_19E301C8C((uint64_t)a2);
    size_t v9 = sub_19E25D8B0((uint64_t)a2, 1);
    if (!a2[1057]) {
      size_t v5 = a2 + 1024;
    }
    size_t v10 = sub_19E25DA90((uint64_t)a2, 9);
    if (a2[1057]) {
      size_t v11 = a2 + 1048;
    }
    else {
      size_t v11 = a2 + 1032;
    }
    long long __p = 0;
    BOOL v23 = 0;
    uint64_t v24 = 0;
    char v21 = 0;
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t **, unsigned char *, uint64_t **, unsigned char *, void, void **, char))(*(void *)v6 + 56))(v6, v7, v8, v9, v5, v10, v11, 0, &__p, v21);
    if (__p)
    {
      BOOL v23 = __p;
      operator delete(__p);
    }
    sub_19E25E104(a2, v12);
  }
  uint64_t v13 = *((void *)a2 + 127);
  if (v13)
  {
    uint64_t v14 = *(void *)(a1 + 8);
    uint64_t v15 = sub_19E301C8C((uint64_t)a2);
    uint64_t v16 = 1040;
    if (!a2[1057]) {
      uint64_t v16 = 1024;
    }
    if (*(void *)&a2[v16]) {
      size_t v17 = sub_19E25DA90((uint64_t)a2, 9);
    }
    else {
      size_t v17 = sub_19E25D8B0((uint64_t)a2, 1);
    }
    int v18 = v17;
    size_t v19 = sub_19E25DA90((uint64_t)a2, 9);
    long long __p = 0;
    BOOL v23 = 0;
    uint64_t v24 = 0;
    uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t **, uint64_t **, void **, void, void, double))(*(void *)v14 + 48))(v14, v13, v15, v18, v19, &__p, 0, 0, 0.0);
    if (__p)
    {
      BOOL v23 = __p;
      operator delete(__p);
    }
    sub_19E25E104(a2, v20);
  }
}

void sub_19E255160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E255180(uint64_t a1, unsigned char *a2)
{
  uint64_t v3 = 1040;
  if (!a2[1057]) {
    uint64_t v3 = 1024;
  }
  if (*(void *)&a2[v3])
  {
    int v4 = (*(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a2 + 72))(a2, 1);
    sub_19E25E288(a2, v4);
    operator new();
  }
  uint64_t v5 = *((void *)a2 + 127);
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v7 = sub_19E301C8C((uint64_t)a2);
    uint64_t v8 = 1040;
    if (!a2[1057]) {
      uint64_t v8 = 1024;
    }
    if (*(void *)&a2[v8]) {
      size_t v9 = sub_19E25DA90((uint64_t)a2, 9);
    }
    else {
      size_t v9 = sub_19E25D8B0((uint64_t)a2, 1);
    }
    size_t v10 = v9;
    size_t v11 = sub_19E25DA90((uint64_t)a2, 9);
    long long __p = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t **, uint64_t **, void **, void, void, double))(*(void *)v6 + 48))(v6, v5, v7, v10, v11, &__p, 0, 0, 0.0);
    if (__p)
    {
      uint64_t v14 = __p;
      operator delete(__p);
    }
    sub_19E25E104(a2, v12);
  }
}

void sub_19E2555D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E25560C(uint64_t a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  switch((*(uint64_t (**)(void *))(*a2 + 104))(a2))
  {
    case 3:
      (*(void (**)(void **__return_ptr, void *))(*a2 + 16))(__p, a2);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if ((*(int (**)(void *, uint64_t))(*a2 + 72))(a2, 1) >= 1) {
        operator new();
      }
      return;
    case 14:
    case 16:
      uint64_t v4 = *(void *)(a1 + 8);
      uint64_t v5 = (*(uint64_t (**)(void *, uint64_t))(*a2 + 72))(a2, 1);
      uint64_t v6 = sub_19E25D8B0((uint64_t)a2, 1);
      uint64_t v7 = sub_19E25DA90((uint64_t)a2, 9);
      __p[0] = 0;
      __p[1] = 0;
      *(void *)&long long v23 = 0;
      uint64_t v8 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t **, uint64_t **, void **, void, void, double))(*(void *)v4 + 48))(v4, 0, v5, v6, v7, __p, 0, 0, 0.0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      sub_19E25E104(a2, v8);
      break;
    case 15:
      int v14 = (*(uint64_t (**)(void *, uint64_t))(*a2 + 72))(a2, 1);
      uint64_t v15 = *(void *)(a1 + 8);
      sub_19E251738(__p, 0, v14, 0, 0, 0, v14, v14, v14);
      uint64_t v16 = sub_19E25D8B0((uint64_t)a2, 1);
      size_t v17 = sub_19E25D8B0((uint64_t)a2, 2);
      int v18 = sub_19E25DA90((uint64_t)a2, 9);
      uint64_t v19 = (*(uint64_t (**)(uint64_t, void **, uint64_t **, uint64_t **, uint64_t **))(*(void *)v15 + 16))(v15, __p, v16, v17, v18);
      sub_19E25E104(a2, v19);
      break;
    case 25:
      (*(void (**)(void **__return_ptr, void *, uint64_t))(*a2 + 160))(__p, a2, 1);
      operator new();
    case 28:
      uint64_t v9 = *(void *)(a1 + 8);
      LODWORD(__p[0]) = 2;
      (*(void (**)(void **__return_ptr, void *, uint64_t))(*a2 + 160))(v21, a2, 1);
      size_t v10 = sub_19E25D8B0((uint64_t)a2, 1);
      (*(void (**)(void *__return_ptr, void *, uint64_t))(*a2 + 160))(v20, a2, 2);
      size_t v11 = sub_19E25D8B0((uint64_t)a2, 2);
      uint64_t v12 = sub_19E25DA90((uint64_t)a2, 9);
      uint64_t v13 = (*(uint64_t (**)(uint64_t, void **, void **, uint64_t **, void *, uint64_t **, uint64_t **, void))(*(void *)v9 + 24))(v9, __p, v21, v10, v20, v11, v12, 0);
      sub_19E25E104(a2, v13);
      break;
    default:
      return;
  }
}

void sub_19E255BD0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E255BE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E255C88(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  LODWORD(v117) = 7;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 160))(v126, a2, 1);
  uint64_t v5 = sub_19E25D8B0(a2, 1);
  int v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 224))(a2);
  int v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 216))(a2, 1);
  int64x2_t v58 = vdupq_n_s64(1uLL);
  int64x2_t v122 = v58;
  uint64_t v123 = 1;
  uint64_t v124 = v6;
  uint64_t v125 = v7;
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t *, void *, uint64_t **, int64x2_t *, uint64_t, void))(*(void *)v4 + 40))(v4, &v117, v126, v5, &v122, a2 + 1032, 0);
  sub_19E25E104((void *)a2, v8);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 160))(&v117, a2, 1);
  uint64_t v9 = sub_19E25E288((void *)a2, 4 * v118 * (int)v117 * v119 * v120 * v121);
  uint64_t v10 = *(void *)(a1 + 8);
  LODWORD(v117) = 1;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 160))(v116, a2, 1);
  size_t v11 = sub_19E25D8B0(a2, 1);
  int v12 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 224))(a2);
  int v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 216))(a2, 1);
  int64x2_t v112 = v58;
  uint64_t v113 = 1;
  uint64_t v114 = v12;
  uint64_t v115 = v13;
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t *, void *, uint64_t **, int64x2_t *, uint64_t, char *, void))(*(void *)v10 + 24))(v10, &v117, v116, v11, &v112, a2 + 1032, v9, 0);
  sub_19E25E104((void *)a2, v14);
  uint64_t v15 = *(void *)(a1 + 8);
  LODWORD(v117) = 10;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 160))(v111, a2, 1);
  int v16 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 224))(a2);
  int v17 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 216))(a2, 1);
  int64x2_t v107 = v58;
  uint64_t v108 = 1;
  uint64_t v109 = v16;
  uint64_t v110 = v17;
  uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t *, void *, char *, int64x2_t *, uint64_t, void))(*(void *)v15 + 40))(v15, &v117, v111, v9, &v107, a2 + 1040, 0);
  sub_19E25E104((void *)a2, v18);
  uint64_t v19 = *(void *)(a1 + 8);
  if (*(float *)(a2 + 1052) == 0.0)
  {
    LODWORD(v117) = 3;
    int v34 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 224))(a2);
    int v35 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 216))(a2, 1);
    int64x2_t v60 = vdupq_n_s64(1uLL);
    int64x2_t v87 = v60;
    uint64_t v88 = 1;
    uint64_t v89 = v34;
    uint64_t v90 = v35;
    int v36 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 72))(a2, 1);
    uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t *, int64x2_t *, uint64_t, uint64_t, void, float))(*(void *)v19 + 32))(v19, &v117, &v87, a2 + 1040, a2 + 1040, 0, (float)v36);
    sub_19E25E104((void *)a2, v37);
    uint64_t v38 = *(void *)(a1 + 8);
    LODWORD(v117) = 0;
    int v39 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 224))(a2);
    int v40 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 216))(a2, 1);
    int64x2_t v83 = v60;
    uint64_t v84 = 1;
    uint64_t v85 = v39;
    uint64_t v86 = v40;
    uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t *, int64x2_t *, uint64_t, uint64_t, void, float))(*(void *)v38 + 32))(v38, &v117, &v83, a2 + 1040, a2 + 1040, 0, *(float *)(a2 + 1048));
    sub_19E25E104((void *)a2, v41);
    uint64_t v42 = *(void *)(a1 + 8);
    LODWORD(v117) = 4;
    int v43 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 224))(a2);
    int v44 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 216))(a2, 1);
    int64x2_t v79 = v60;
    uint64_t v80 = 1;
    uint64_t v81 = v43;
    uint64_t v82 = v44;
    int v45 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 224))(a2);
    int v46 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 216))(a2, 1);
    int64x2_t v75 = v60;
    uint64_t v76 = 1;
    uint64_t v77 = v45;
    uint64_t v78 = v46;
    uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t *, int64x2_t *, uint64_t, int64x2_t *, uint64_t, void))(*(void *)v42 + 40))(v42, &v117, &v79, a2 + 1040, &v75, a2 + 1040, 0);
  }
  else
  {
    LODWORD(v117) = 3;
    int v20 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 224))(a2);
    int v21 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 216))(a2, 1);
    int64x2_t v59 = vdupq_n_s64(1uLL);
    int64x2_t v103 = v59;
    uint64_t v104 = 1;
    uint64_t v105 = v20;
    uint64_t v106 = v21;
    int v22 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 72))(a2, 1);
    uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t *, int64x2_t *, uint64_t, uint64_t, void, float))(*(void *)v19 + 32))(v19, &v117, &v103, a2 + 1040, a2 + 1040, 0, (float)(v22 - 1));
    sub_19E25E104((void *)a2, v23);
    uint64_t v24 = *(void *)(a1 + 8);
    LODWORD(v117) = 4;
    int v25 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 224))(a2);
    int v26 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 216))(a2, 1);
    int64x2_t v99 = v59;
    uint64_t v100 = 1;
    uint64_t v101 = v25;
    uint64_t v102 = v26;
    int v27 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 224))(a2);
    int v28 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 216))(a2, 1);
    int64x2_t v95 = v59;
    uint64_t v96 = 1;
    uint64_t v97 = v27;
    uint64_t v98 = v28;
    uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t *, int64x2_t *, uint64_t, int64x2_t *, uint64_t, void))(*(void *)v24 + 40))(v24, &v117, &v99, a2 + 1040, &v95, a2 + 1040, 0);
    sub_19E25E104((void *)a2, v29);
    uint64_t v30 = *(void *)(a1 + 8);
    LODWORD(v117) = 0;
    int v31 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 224))(a2);
    int v32 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 216))(a2, 1);
    int64x2_t v91 = v59;
    uint64_t v92 = 1;
    uint64_t v93 = v31;
    uint64_t v94 = v32;
    uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t *, int64x2_t *, uint64_t, uint64_t, void, float))(*(void *)v30 + 32))(v30, &v117, &v91, a2 + 1040, a2 + 1040, 0, *(float *)(a2 + 1048));
  }
  sub_19E25E104((void *)a2, v33);
  uint64_t v47 = *(void *)(a1 + 8);
  LODWORD(v117) = 3;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 160))(v74, a2, 1);
  int v48 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 224))(a2);
  int v49 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 216))(a2, 1);
  int64x2_t v61 = vdupq_n_s64(1uLL);
  int64x2_t v70 = v61;
  uint64_t v71 = 1;
  uint64_t v72 = v48;
  uint64_t v73 = v49;
  uint64_t v50 = (*(uint64_t (**)(uint64_t, uint64_t *, void *, char *, int64x2_t *, uint64_t, char *, void))(*(void *)v47 + 24))(v47, &v117, v74, v9, &v70, a2 + 1040, v9, 0);
  sub_19E25E104((void *)a2, v50);
  uint64_t v51 = *(void *)(a1 + 8);
  LODWORD(v117) = 2;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 160))(v69, a2, 1);
  int v52 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 72))(a2, 1);
  int64x2_t v66 = v61;
  uint64_t v67 = v52;
  int64x2_t v68 = v61;
  uint64_t v53 = (*(uint64_t (**)(uint64_t, uint64_t *, void *, char *, int64x2_t *, uint64_t, char *, void))(*(void *)v51 + 24))(v51, &v117, v69, v9, &v66, a2 + 1016, v9, 0);
  sub_19E25E104((void *)a2, v53);
  uint64_t v54 = *(void *)(a1 + 8);
  LODWORD(v117) = 0;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 160))(v65, a2, 1);
  int v55 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 72))(a2, 1);
  int64x2_t v62 = v61;
  uint64_t v63 = v55;
  int64x2_t v64 = v61;
  uint64_t v56 = sub_19E25DA90(a2, 9);
  uint64_t v57 = (*(uint64_t (**)(uint64_t, uint64_t *, void *, char *, int64x2_t *, uint64_t, uint64_t **, void))(*(void *)v54 + 24))(v54, &v117, v65, v9, &v62, a2 + 1024, v56, 0);
  sub_19E25E104((void *)a2, v57);
}

void sub_19E2568FC(uint64_t a1, void *a2)
{
  int v17 = a2;
  int v16 = (uint64_t *)&v17;
  if (((*(uint64_t (**)(void *))(*a2 + 120))(a2) & 0x40) == 0)
  {
    uint64_t v3 = v17;
    int v4 = (*(uint64_t (**)(void *, uint64_t))(*v17 + 64))(v17, 9);
    sub_19E25E288(v3, v4);
    operator new();
  }
  uint64_t v5 = *(void *)(a1 + 8);
  sub_19E256F40(&v15, &v16, 2);
  int v6 = sub_19E25D8B0((uint64_t)v17, 1);
  int v7 = v17 + 127;
  uint64_t v8 = sub_19E25DA90((uint64_t)v17, 9);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, long long *, uint64_t **, void *, uint64_t **))(*(void *)v5 + 16))(v5, &v15, v6, v7, v8);
  sub_19E25E104(v17, v9);
  uint64_t v10 = *(void *)(a1 + 8);
  sub_19E256F40(&v15, &v16, 0);
  size_t v11 = sub_19E25DA90((uint64_t)v17, 9);
  int v12 = v17 + 128;
  int v13 = sub_19E25DA90((uint64_t)v17, 9);
  uint64_t v14 = (*(uint64_t (**)(uint64_t, long long *, uint64_t **, void *, uint64_t **))(*(void *)v10 + 16))(v10, &v15, v11, v12, v13);
  sub_19E25E104(v17, v14);
}

void sub_19E256EC8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E256EDC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E256EF0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E256F04(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E256F18(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E256F2C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_19E256F40(_DWORD *a1, uint64_t **a2, int a3)
{
  uint64_t v6 = **a2;
  uint64_t v8 = (uint64_t **)(v6 + 24);
  int v7 = *(int **)(v6 + 24);
  if (v7)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (char *)v7;
        int v10 = v7[8];
        if (v10 < 2) {
          break;
        }
        int v7 = *(int **)v9;
        uint64_t v8 = (uint64_t **)v9;
        if (!*(void *)v9) {
          goto LABEL_8;
        }
      }
      if (v10 == 1) {
        break;
      }
      int v7 = (int *)*((void *)v9 + 1);
      if (!v7)
      {
        uint64_t v8 = (uint64_t **)(v9 + 8);
        goto LABEL_8;
      }
    }
  }
  else
  {
    uint64_t v9 = (char *)(v6 + 24);
LABEL_8:
    size_t v11 = v9;
    uint64_t v9 = (char *)operator new(0x50uLL);
    *((_DWORD *)v9 + 8) = 1;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *((void *)v9 + 9) = 0;
    *(void *)uint64_t v9 = 0;
    *((void *)v9 + 1) = 0;
    *((void *)v9 + 2) = v11;
    uint64_t *v8 = (uint64_t *)v9;
    uint64_t v12 = **(void **)(v6 + 16);
    int v13 = (uint64_t *)v9;
    if (v12)
    {
      *(void *)(v6 + 16) = v12;
      int v13 = *v8;
    }
    sub_19E13C8A0(*(uint64_t **)(v6 + 24), v13);
    ++*(void *)(v6 + 32);
  }
  int v14 = *((_DWORD *)v9 + 12) * *((_DWORD *)v9 + 10);
  uint64_t v15 = **a2;
  if (v14 < 2)
  {
    int v21 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v15 + 72))(**a2, 1);
    int v22 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)**a2 + 72))(**a2, 1);
    int v23 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)**a2 + 72))(**a2, 1);
    return sub_19E251738(a1, a3, v21, 0, 0, 0, v22, 0, v23);
  }
  else
  {
    int v17 = (uint64_t **)(v15 + 24);
    int v16 = *(int **)(v15 + 24);
    if (v16)
    {
      uint64_t v18 = *(int **)(v15 + 24);
      while (1)
      {
        while (1)
        {
          uint64_t v19 = (char *)v18;
          int v20 = v18[8];
          if (v20 < 2) {
            break;
          }
          uint64_t v18 = *(int **)v19;
          int v17 = (uint64_t **)v19;
          if (!*(void *)v19) {
            goto LABEL_21;
          }
        }
        if (v20 == 1) {
          break;
        }
        uint64_t v18 = (int *)*((void *)v19 + 1);
        if (!v18)
        {
          int v17 = (uint64_t **)(v19 + 8);
          goto LABEL_21;
        }
      }
    }
    else
    {
      uint64_t v19 = (char *)(v15 + 24);
LABEL_21:
      int v25 = v19;
      uint64_t v19 = (char *)operator new(0x50uLL);
      *((_DWORD *)v19 + 8) = 1;
      *(_OWORD *)(v19 + 40) = 0u;
      *(_OWORD *)(v19 + 56) = 0u;
      *((void *)v19 + 9) = 0;
      *(void *)uint64_t v19 = 0;
      *((void *)v19 + 1) = 0;
      *((void *)v19 + 2) = v25;
      *int v17 = (uint64_t *)v19;
      uint64_t v26 = **(void **)(v15 + 16);
      int v27 = (uint64_t *)v19;
      if (v26)
      {
        *(void *)(v15 + 16) = v26;
        int v27 = *v17;
      }
      sub_19E13C8A0(*(uint64_t **)(v15 + 24), v27);
      ++*(void *)(v15 + 32);
      uint64_t v15 = **a2;
      int v16 = *(int **)(v15 + 24);
    }
    int v28 = *((_DWORD *)v19 + 12) * *((_DWORD *)v19 + 10);
    if (v16)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v30 = (char *)v16;
          int v31 = v16[8];
          if (v31 < 2) {
            break;
          }
          int v16 = *(int **)v30;
          uint64_t v29 = (uint64_t **)v30;
          if (!*(void *)v30) {
            goto LABEL_31;
          }
        }
        if (v31 == 1) {
          break;
        }
        int v16 = (int *)*((void *)v30 + 1);
        if (!v16)
        {
          uint64_t v29 = (uint64_t **)(v30 + 8);
          goto LABEL_31;
        }
      }
    }
    else
    {
      uint64_t v29 = (uint64_t **)(v15 + 24);
      uint64_t v30 = (char *)(v15 + 24);
LABEL_31:
      int v32 = v30;
      uint64_t v30 = (char *)operator new(0x50uLL);
      *((_DWORD *)v30 + 8) = 1;
      *(_OWORD *)(v30 + 40) = 0u;
      *(_OWORD *)(v30 + 56) = 0u;
      *((void *)v30 + 9) = 0;
      *(void *)uint64_t v30 = 0;
      *((void *)v30 + 1) = 0;
      *((void *)v30 + 2) = v32;
      void *v29 = (uint64_t *)v30;
      uint64_t v33 = **(void **)(v15 + 16);
      int v34 = (uint64_t *)v30;
      if (v33)
      {
        *(void *)(v15 + 16) = v33;
        int v34 = *v29;
      }
      sub_19E13C8A0(*(uint64_t **)(v15 + 24), v34);
      ++*(void *)(v15 + 32);
      uint64_t v15 = **a2;
    }
    int v35 = *((_DWORD *)v30 + 14);
    int v36 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v15 + 72))(v15, 1);
    int v37 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)**a2 + 72))(**a2, 1);
    return sub_19E251758(a1, a3, v28, v35, 0, 0, 0, v36, 0, v37);
  }
}

void sub_19E257308(uint64_t a1, void *a2)
{
  int v4 = (*(uint64_t (**)(void *, uint64_t))(*a2 + 80))(a2, 9);
  int v5 = (*(uint64_t (**)(void *))(*a2 + 88))(a2);
  uint64_t v6 = sub_19E25E288(a2, v5 * v4);
  int v7 = (*(uint64_t (**)(void *, uint64_t))(*a2 + 80))(a2, 9);
  int v8 = (*(uint64_t (**)(void *))(*a2 + 88))(a2);
  sub_19E25E288(a2, v8 * v7);
  int v9 = (*(uint64_t (**)(void *, uint64_t))(*a2 + 80))(a2, 9);
  int v10 = (*(uint64_t (**)(void *))(*a2 + 88))(a2);
  int v27 = sub_19E25E288(a2, v10 * v9);
  uint64_t v11 = a2[127];
  uint64_t v12 = a2[130];
  uint64_t v13 = a2[133];
  uint64_t v14 = a2[136];
  uint64_t v15 = a1;
  uint64_t v16 = *(void *)(a1 + 8);
  uint64_t v17 = (*(uint64_t (**)(void *, uint64_t))(*a2 + 72))(a2, 1);
  uint64_t v18 = (*(uint64_t (**)(void *, uint64_t))(*a2 + 80))(a2, 9);
  uint64_t v19 = sub_19E25D8B0((uint64_t)a2, 1);
  __p[0] = 0;
  __p[1] = 0;
  *(void *)&long long v29 = 0;
  char v25 = 0;
  uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t **, uint64_t, char *, uint64_t, void, void **, char))(*(void *)v16 + 56))(v16, v17, v18, v19, v11, v6, v12, 0, __p, v25);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  sub_19E25E104(a2, v20);
  uint64_t v21 = *(void *)(v15 + 8);
  uint64_t v22 = (*(uint64_t (**)(void *, uint64_t))(*a2 + 80))(a2, 9);
  uint64_t v23 = (*(uint64_t (**)(void *, uint64_t))(*a2 + 80))(a2, 9);
  __p[0] = 0;
  __p[1] = 0;
  *(void *)&long long v29 = 0;
  LOBYTE(v26) = 0;
  uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *, uint64_t, char *, uint64_t, void, void **, int))(*(void *)v21 + 56))(v21, v22, v23, a2 + 161, v13, v27, v14, 0, __p, v26);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  sub_19E25E104(a2, v24);
  operator new();
}

void sub_19E2581DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E25825C(uint64_t a1, void *a2)
{
  int v4 = (*(uint64_t (**)(void *, uint64_t))(*a2 + 216))(a2, 2);
  int v5 = (*(uint64_t (**)(void *))(*a2 + 88))(a2);
  uint64_t v6 = sub_19E25E288(a2, v5 * v4);
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = (*(uint64_t (**)(void *, uint64_t))(*a2 + 72))(a2, 2);
  uint64_t v9 = (*(uint64_t (**)(void *, uint64_t))(*a2 + 216))(a2, 2);
  int v10 = sub_19E25D8B0((uint64_t)a2, 1);
  uint64_t v11 = sub_19E25D8B0((uint64_t)a2, 2);
  long long __p = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  char v19 = 0;
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t **, uint64_t **, char *, void *, uint64_t, void **, char))(*(void *)v7 + 56))(v7, v8, v9, v10, v11, v6, a2 + 38, 4, &__p, v19);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }
  sub_19E25E104(a2, v12);
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = (*(uint64_t (**)(void *, uint64_t))(*a2 + 216))(a2, 2);
  uint64_t v15 = (*(uint64_t (**)(void *, uint64_t))(*a2 + 72))(a2, 2);
  uint64_t v16 = sub_19E25D8B0((uint64_t)a2, 2);
  uint64_t v17 = sub_19E25DA90((uint64_t)a2, 9);
  long long __p = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  LOBYTE(v20) = 1;
  uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *, uint64_t **, uint64_t **, void *, void, void **, int))(*(void *)v13 + 56))(v13, v14, v15, v6, v16, v17, a2 + 38, 0, &__p, v20);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }
  sub_19E25E104(a2, v18);
}

void sub_19E258500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E258520(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 216))(a2, 2);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 224))(a2);
  int v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 88))(a2);
  uint64_t v54 = sub_19E25E288((void *)a2, v5 * (int)v4 * v6);
  if (((*(uint64_t (**)(uint64_t))(*(void *)a2 + 120))(a2) & 0x40) != 0)
  {
    int v28 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 72))(a2, 1);
    int v29 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 72))(a2, 2) + v28;
    int v30 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 88))(a2);
    sub_19E25E288((void *)a2, v5 * v4 * v29 * v30);
    operator new();
  }
  int v7 = *(_DWORD *)(a2 + 1056) * v4;
  int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 88))(a2);
  uint64_t v9 = sub_19E25E288((void *)a2, v7 * v8);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 160))(&v75, a2, 2);
  int v10 = *(_DWORD *)(a2 + 1056);
  *(void *)&long long v76 = v10;
  int v11 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 88))(a2);
  uint64_t v12 = (uint64_t **)sub_19E25E288((void *)a2, v11 * v10);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 160))(&v72, a2, 1);
  *(void *)&long long v73 = *(int *)(a2 + 1056);
  if (*(void *)(a2 + 1032))
  {
    uint64_t v13 = *(void *)(a1 + 8);
    int v14 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 72))(a2, 2);
    v71[0] = 1;
    v71[1] = (int)v4;
    v71[2] = v14;
    v71[3] = v5;
    v71[4] = 1;
    int v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 72))(a2, 2);
    uint64_t v16 = *(int *)(a2 + 1056);
    v70[0] = 1;
    v70[1] = v15;
    v70[2] = v16;
    v70[3] = v5;
    v70[4] = 1;
    uint64_t v17 = sub_19E25D8B0(a2, 2);
    long long __p = 0;
    int64x2_t v68 = 0;
    uint64_t v69 = 0;
    uint64_t v18 = (*(uint64_t (**)(uint64_t, void *, void *, uint64_t **, uint64_t, char *, void, void **, _BYTE))(*(void *)v13 + 64))(v13, v71, v70, v17, a2 + 1032, v9, 0, &__p, 0);
    if (__p)
    {
      int64x2_t v68 = __p;
      operator delete(__p);
    }
    sub_19E25E104((void *)a2, v18);
  }
  char v19 = (void *)(a2 + 1040);
  uint64_t v20 = *(void *)(a1 + 8);
  if (*(void *)(a2 + 1040))
  {
    uint64_t v21 = v4;
    uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 72))(a2, 1);
    uint64_t v23 = *(unsigned int *)(a2 + 1056);
    uint64_t v24 = sub_19E25D8B0(a2, 1);
    long long __p = 0;
    int64x2_t v68 = 0;
    uint64_t v69 = 0;
    uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t **, uint64_t, uint64_t **, uint64_t, void, void **, _BYTE))(*(void *)v20 + 56))(v20, v22, v23, v24, a2 + 1040, v12, a2 + 304, 0, &__p, 0);
    if (__p)
    {
      int64x2_t v68 = __p;
      operator delete(__p);
    }
    sub_19E25E104((void *)a2, v25);
    uint64_t v26 = *(void *)(a2 + 1040);
    uint64_t v20 = *(void *)(a1 + 8);
    LODWORD(__p) = 0;
    if (v26)
    {
      v65[0] = v72;
      v65[1] = v73;
      uint64_t v66 = v74;
      int v27 = v12;
LABEL_17:
      uint64_t v31 = *(int *)(a2 + 1056);
      int64x2_t v62 = vdupq_n_s64(1uLL);
      uint64_t v63 = v31;
      int64x2_t v64 = v62;
LABEL_18:
      int v32 = v12;
      goto LABEL_19;
    }
    uint64_t v4 = v21;
  }
  else
  {
    LODWORD(__p) = 0;
  }
  uint64_t v21 = v4;
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 160))(v65, a2, 1);
  if (*(void *)(a2 + 1040))
  {
    int v27 = v12;
    goto LABEL_17;
  }
  int v27 = sub_19E25D8B0(a2, 1);
  if (*(void *)(a2 + 1040)) {
    goto LABEL_17;
  }
  int v51 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 72))(a2, 2);
  int64x2_t v62 = vdupq_n_s64(1uLL);
  uint64_t v63 = v51;
  int64x2_t v64 = v62;
  if (*(void *)(a2 + 1040)) {
    goto LABEL_18;
  }
  int v32 = sub_19E25D8B0(a2, 1);
LABEL_19:
  uint64_t v33 = (*(uint64_t (**)(uint64_t, void **, _OWORD *, uint64_t **, int64x2_t *, uint64_t, uint64_t **, void))(*(void *)v20 + 24))(v20, &__p, v65, v27, &v62, a2 + 1024, v32, 0);
  sub_19E25E104((void *)a2, v33);
  uint64_t v34 = *(void *)(a1 + 8);
  LODWORD(__p) = 0;
  v60[0] = v75;
  v60[1] = v76;
  uint64_t v61 = v77;
  int v35 = (uint64_t **)v9;
  if (*(void *)(a2 + 1032))
  {
    long long v57 = v72;
    long long v58 = v73;
    uint64_t v59 = v74;
    if (*v19) {
      goto LABEL_21;
    }
  }
  else
  {
    int v35 = sub_19E25D8B0(a2, 2);
    long long v57 = v72;
    long long v58 = v73;
    uint64_t v59 = v74;
    if (*v19) {
      goto LABEL_21;
    }
  }
  uint64_t v12 = sub_19E25D8B0(a2, 1);
LABEL_21:
  uint64_t v36 = (*(uint64_t (**)(uint64_t, void **, _OWORD *, uint64_t **, long long *, uint64_t **, char *, uint64_t))(*(void *)v34 + 24))(v34, &__p, v60, v35, &v57, v12, v9, 2);
  sub_19E25E104((void *)a2, v36);
  uint64_t v37 = *(void *)(a1 + 8);
  int v38 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 216))(a2, 2);
  uint64_t v39 = *(int *)(a2 + 1056);
  v56[0] = 1;
  v56[1] = v38;
  v56[2] = v39;
  v56[3] = v5;
  v56[4] = 1;
  v55[0] = 1;
  v55[1] = v39;
  v55[2] = 1;
  v55[3] = v5;
  v55[4] = 1;
  int v40 = sub_19E25DA90(a2, 10);
  long long __p = 0;
  int64x2_t v68 = 0;
  uint64_t v69 = 0;
  LOBYTE(v52) = 0;
  uint64_t v41 = (*(uint64_t (**)(uint64_t, void *, void *, char *, uint64_t, uint64_t **, void, void **, int))(*(void *)v37 + 64))(v37, v56, v55, v9, a2 + 1048, v40, 0, &__p, v52);
  if (__p)
  {
    int64x2_t v68 = __p;
    operator delete(__p);
  }
  sub_19E25E104((void *)a2, v41);
  uint64_t v42 = *(void *)(a1 + 8);
  int v43 = sub_19E25DA90(a2, 10);
  long long v75 = 0uLL;
  *(void *)&long long v76 = 0;
  uint64_t v44 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t **, char *, long long *, void, void, double))(*(void *)v42 + 48))(v42, 4, v21, v43, v54, &v75, 0, 0, 0.0);
  if ((void)v75)
  {
    *((void *)&v75 + 1) = v75;
    operator delete((void *)v75);
  }
  sub_19E25E104((void *)a2, v44);
  uint64_t v45 = *(void *)(a1 + 8);
  uint64_t v46 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 216))(a2, 3);
  uint64_t v47 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 72))(a2, 3);
  int v48 = sub_19E25D8B0(a2, 3);
  int v49 = sub_19E25DA90(a2, 9);
  long long v75 = 0uLL;
  *(void *)&long long v76 = 0;
  LOBYTE(v53) = 1;
  uint64_t v50 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *, uint64_t **, uint64_t **, uint64_t, void, long long *, int))(*(void *)v45 + 56))(v45, v46, v47, v54, v48, v49, a2 + 304, 0, &v75, v53);
  if ((void)v75)
  {
    *((void *)&v75 + 1) = v75;
    operator delete((void *)v75);
  }
  sub_19E25E104((void *)a2, v50);
}

void sub_19E25913C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_19E25918C(uint64_t a1, _DWORD *a2)
{
  int v4 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)a2 + 216))(a2, 1);
  int v39 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)a2 + 216))(a2, 2);
  int v5 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)a2 + 72))(a2, 1);
  int v6 = (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 224))(a2);
  int v38 = v6 * v4;
  int v7 = v6 * v4 * a2[270] * a2[271];
  int v8 = (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 88))(a2);
  uint64_t v9 = sub_19E25E288(a2, v7 * v8);
  uint64_t v10 = *(void *)(a1 + 8);
  (*(void (**)(void *__return_ptr, _DWORD *, uint64_t))(*(void *)a2 + 160))(v66, a2, 1);
  uint64_t v11 = v5;
  v64[0] = 1;
  v64[1] = v5;
  v64[2] = v5;
  int64x2_t v65 = vdupq_n_s64(1uLL);
  uint64_t v12 = sub_19E25D8B0((uint64_t)a2, 1);
  uint64_t v61 = 0;
  int64x2_t v62 = 0;
  uint64_t v63 = 0;
  char v35 = 0;
  uint64_t v13 = (*(uint64_t (**)(uint64_t, void *, void *, uint64_t **, _DWORD *, char *, void, void **, char))(*(void *)v10 + 64))(v10, v66, v64, v12, a2 + 258, v9, 0, &v61, v35);
  if (v61)
  {
    int64x2_t v62 = v61;
    operator delete(v61);
  }
  sub_19E25E104(a2, v13);
  uint64_t v14 = *(void *)(a1 + 8);
  LODWORD(v61) = 0;
  (*(void (**)(void *__return_ptr, _DWORD *, uint64_t))(*(void *)a2 + 160))(v60, a2, 1);
  int64x2_t v41 = vdupq_n_s64(1uLL);
  int64x2_t v57 = v41;
  uint64_t v58 = v11;
  int64x2_t v59 = v41;
  uint64_t v15 = (*(uint64_t (**)(uint64_t, void **, void *, char *, int64x2_t *, _DWORD *, char *, void))(*(void *)v14 + 24))(v14, &v61, v60, v9, &v57, a2 + 264, v9, 0);
  sub_19E25E104(a2, v15);
  int v16 = v6 * v39;
  int v17 = a2[270] * v6 * v39 * a2[271];
  int v18 = (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 88))(a2);
  char v19 = sub_19E25E288(a2, v17 * v18);
  uint64_t v20 = *(void *)(a1 + 8);
  (*(void (**)(void *__return_ptr, _DWORD *, uint64_t))(*(void *)a2 + 160))(v56, a2, 2);
  v54[0] = 1;
  v54[1] = v11;
  v54[2] = v11;
  int64x2_t v55 = v41;
  uint64_t v21 = sub_19E25D8B0((uint64_t)a2, 2);
  uint64_t v61 = 0;
  int64x2_t v62 = 0;
  uint64_t v63 = 0;
  LOBYTE(v36) = 0;
  uint64_t v22 = (*(uint64_t (**)(uint64_t, void *, void *, uint64_t **, _DWORD *, char *, void, void **, int))(*(void *)v20 + 64))(v20, v56, v54, v21, a2 + 256, v19, 0, &v61, v36);
  if (v61)
  {
    int64x2_t v62 = v61;
    operator delete(v61);
  }
  sub_19E25E104(a2, v22);
  uint64_t v23 = *(void *)(a1 + 8);
  LODWORD(v61) = 0;
  (*(void (**)(void *__return_ptr, _DWORD *, uint64_t))(*(void *)a2 + 160))(v53, a2, 2);
  int64x2_t v40 = vdupq_n_s64(1uLL);
  int64x2_t v50 = v40;
  uint64_t v51 = v11;
  int64x2_t v52 = v40;
  uint64_t v24 = (*(uint64_t (**)(uint64_t, void **, void *, char *, int64x2_t *, _DWORD *, char *, void))(*(void *)v23 + 24))(v23, &v61, v53, v19, &v50, a2 + 262, v19, 0);
  sub_19E25E104(a2, v24);
  int v25 = a2[270] * v16 * a2[271];
  int v26 = (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 88))(a2);
  int v27 = sub_19E25E288(a2, v25 * v26);
  uint64_t v42 = a1;
  uint64_t v28 = *(void *)(a1 + 8);
  (*(void (**)(void *__return_ptr, _DWORD *, uint64_t))(*(void *)a2 + 160))(v49, a2, 3);
  v47[0] = 1;
  v47[1] = v11;
  void v47[2] = v11;
  int64x2_t v48 = v40;
  int v29 = sub_19E25D8B0((uint64_t)a2, 3);
  uint64_t v61 = 0;
  int64x2_t v62 = 0;
  uint64_t v63 = 0;
  LOBYTE(v37) = 0;
  uint64_t v30 = (*(uint64_t (**)(uint64_t, void *, void *, uint64_t **, _DWORD *, char *, void, void **, int))(*(void *)v28 + 64))(v28, v49, v47, v29, a2 + 254, v27, 0, &v61, v37);
  if (v61)
  {
    int64x2_t v62 = v61;
    operator delete(v61);
  }
  sub_19E25E104(a2, v30);
  uint64_t v31 = *(void *)(v42 + 8);
  LODWORD(v61) = 0;
  (*(void (**)(void *__return_ptr, _DWORD *, uint64_t))(*(void *)a2 + 160))(v46, a2, 3);
  int64x2_t v43 = vdupq_n_s64(1uLL);
  uint64_t v44 = v11;
  int64x2_t v45 = v43;
  uint64_t v32 = (*(uint64_t (**)(uint64_t, void **, void *, char *, int64x2_t *, _DWORD *, char *, void))(*(void *)v31 + 24))(v31, &v61, v46, v27, &v43, a2 + 260, v27, 0);
  sub_19E25E104(a2, v32);
  int v33 = a2[270] * v38 * a2[271];
  int v34 = (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 88))(a2);
  sub_19E25E288(a2, v33 * v34);
  operator new();
}

void sub_19E259DC8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

int *sub_19E259E54(int *result, int a2)
{
  if (a2 >= 1)
  {
    int v2 = a2;
    uint64_t v3 = result;
    int v4 = (char *)(**((void **)result + 6) + 4 * result[6]);
    int v5 = (char *)(**((void **)result + 5) + 4 * result[5]);
    do
    {
      __n128 result = (int *)memmove(v4, v5, 4 * v3[4]);
      v5 += 4 * v3[7];
      v4 += 4 * v3[8];
      --v2;
    }
    while (v2);
  }
  return result;
}

float sub_19E259ED4(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = **(void **)(a1 + 104);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v41 = *(void *)(a1 + 40);
  uint64_t v42 = *(void *)(a1 + 32);
  int v5 = **(char ***)(a1 + 112);
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v8 = *(void *)(a1 + 72);
  uint64_t v9 = *(void *)(a1 + 80);
  bzero(v5, 4 * (int)v7 * (int)v6 * (int)v8 * (int)v9 * *(_DWORD *)(a1 + 88));
  uint64_t v10 = v1[4];
  int v37 = v1;
  int v11 = v10 * v1[3];
  int v12 = v11 / (int)v10;
  int v39 = v11 % (int)v10;
  if ((v11 / (int)v10) | (v11 % (int)v10))
  {
    uint64_t v13 = *(void *)(a1 + 32);
    int v14 = v13 * *(void *)(a1 + 24);
    int v15 = v14 / (int)v13;
    int v16 = v14 % (int)v13;
    if ((v14 / (int)v13) | (v14 % (int)v13))
    {
      uint64_t v17 = *v1;
      if (*v1)
      {
        int v18 = 0;
        int v19 = 0;
        int v20 = 0;
        uint64_t v21 = *(unsigned int *)(a1 + 96);
        if ((int)v21 < 0) {
          uint64_t v21 = (int)v21 + 5;
        }
        int v40 = v12;
        do
        {
          int v22 = 0;
          int v23 = 0;
          int v24 = 0;
          do
          {
            uint64_t v25 = 0;
            uint64_t v26 = v22;
            uint64_t v27 = v3 + 4 * v2 * (v23 + v4 * ((v19 + v41 * v18) * v42 + v22));
            do
            {
              uint64_t __B = v25;
              uint64_t v44 = v23;
              uint64_t v45 = v26;
              uint64_t v46 = v19;
              uint64_t v47 = v18;
              *(&__B + v21) = 0;
              uint64_t v28 = 4 * (__B + v7 * v44 + v6 * v7 * (v45 + (v46 + v9 * v47) * v8));
              *(float *)&v5[v28] = *(float *)&v5[v28] + *(float *)(v27 + 4 * v25++);
            }
            while (v17 != v25);
            int v23 = ++v24 / (int)v13;
            int v22 = v24 % (int)v13;
          }
          while (v24 / (int)v13 != v15 || v22 != v16);
          int v19 = ++v20 / (int)v10;
          int v18 = v20 % (int)v10;
        }
        while (v20 / (int)v10 != v40 || v18 != v39);
      }
      else
      {
        int v32 = 0;
        do
        {
          int v33 = 1;
          do
          {
            BOOL v34 = v33 / (int)v13 == v15 && v14 + v13 * (v33 / (int)v13 - v15) == v33;
            ++v33;
          }
          while (!v34);
          ++v32;
        }
        while (v32 / (int)v10 != v12 || v32 % (int)v10 != v39);
      }
    }
    else
    {
      int v30 = 1;
      do
      {
        BOOL v31 = v30 / (int)v10 == v12 && v11 + v10 * (v30 / (int)v10 - v12) == v30;
        ++v30;
      }
      while (!v31);
    }
  }
  uint64_t v35 = *(unsigned int *)(a1 + 96);
  if ((int)v35 < 0) {
    uint64_t v35 = (int)v35 + 5;
  }
  *(float *)&uint64_t __B = (float)(unint64_t)v37[v35];
  vDSP_vsdiv(**(const float ***)(a1 + 112), 1, (const float *)&__B, **(float ***)(a1 + 112), 1, *(_DWORD *)(a1 + 56) * *(_DWORD *)(a1 + 64) * *(_DWORD *)(a1 + 72) * *(_DWORD *)(a1 + 80) * *(_DWORD *)(a1 + 88));
  return result;
}

_DWORD *sub_19E25A18C(_DWORD *result)
{
  if (result[12] <= result[22]) {
    int v1 = result[22];
  }
  else {
    int v1 = result[12];
  }
  if (v1 >= 1)
  {
    uint64_t v2 = result;
    uint64_t v3 = (char *)**((void **)result + 14);
    uint64_t v4 = (char *)**((void **)result + 13);
    int v5 = (char *)**((void **)result + 12);
    int v6 = v1;
    do
    {
      memmove(v3, v5, 4 * v2[4] * v2[6] * v2[8] * v2[10]);
      uint64_t v9 = &v3[4 * v2[4] * v2[6] * v2[8] * v2[10]];
      float result = memmove(v9, v4, 4 * v2[14] * v2[16] * v2[18] * v2[20]);
      if (v1 == v2[12]) {
        uint64_t v7 = *((void *)v2 + 3) * *((void *)v2 + 2) * *((void *)v2 + 4) * *((void *)v2 + 5);
      }
      else {
        LODWORD(v7) = 0;
      }
      uint64_t v3 = &v9[4 * v2[16] * v2[14] * v2[18] * v2[20]];
      v5 += 4 * (int)v7;
      if (v1 == v2[22]) {
        int v8 = v2[16] * v2[14] * v2[18] * v2[20];
      }
      else {
        int v8 = 0;
      }
      v4 += 4 * v8;
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t sub_19E25A2DC(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 48);
  uint64_t v37 = *(void *)(result + 40);
  int v2 = (int)v1 * (int)v37 / (int)v1;
  int v35 = (int)v1 * (int)v37 % (int)v1;
  if (v2 | v35)
  {
    uint64_t v3 = *(void *)(result + 32);
    uint64_t v39 = *(void *)(result + 24);
    int v4 = (int)v3 * (int)v39 / (int)v3;
    if (v4 | ((int)v3 * (int)v39 % (int)v3))
    {
      uint64_t v5 = *(void *)(result + 16);
      if (v5)
      {
        int v6 = 0;
        int v7 = 0;
        int v8 = 0;
        uint64_t v9 = *(void *)(result + 128);
        uint64_t v10 = **(void **)(result + 136);
        uint64_t v11 = **(void **)(result + 144);
        uint64_t v12 = *(void *)(result + 72);
        uint64_t v13 = *(void *)(result + 80);
        uint64_t v14 = *(void *)(result + 56);
        uint64_t v15 = *(void *)(result + 64) * v14;
        uint64_t v16 = *(void *)(result + 104);
        uint64_t v17 = *(void *)(result + 96);
        uint64_t v18 = (int)*(void *)(result + 96);
        if ((int)v18 < 0) {
          uint64_t v17 = v18 + 5;
        }
        if ((int)v16 < 0) {
          uint64_t v19 = (int)v16 + 5;
        }
        else {
          uint64_t v19 = *(void *)(result + 104);
        }
        uint64_t v20 = *(void *)(result + 112);
        uint64_t v21 = *(void *)(result + 120);
        float result = v20;
        if ((int)v20 < 0) {
          float result = (int)v20 + 5;
        }
        if ((int)v21 < 0) {
          uint64_t v21 = (int)v21 + 5;
        }
        else {
          uint64_t v21 = v21;
        }
        uint64_t v22 = (int)v9 + 5;
        if ((int)v9 >= 0) {
          uint64_t v22 = v9;
        }
        int v36 = v1;
        do
        {
          int v38 = v8;
          int v23 = 0;
          int v24 = 0;
          int v25 = 0;
          do
          {
            uint64_t v26 = 0;
            uint64_t v27 = v24;
            uint64_t v28 = v10 + 4 * v5 * (v24 + v39 * ((v7 + v37 * v6) * v3 + v23));
            do
            {
              v40[0] = v26;
              v40[1] = v27;
              v40[2] = v23;
              v40[3] = v7;
              v40[4] = v6;
              *(_DWORD *)(v11 + 4
                              * (v40[v17] + v14 * v40[v19] + v15 * (v40[result] + (v40[v21] + v13 * v40[v22]) * v12))) = *(_DWORD *)(v28 + 4 * v26++);
            }
            while (v5 != v26);
            int v24 = ++v25 / (int)v3;
            int v23 = v25 % (int)v3;
          }
          while (v25 / (int)v3 != v4 || v23 != (int)v3 * (int)v39 % (int)v3);
          ++v8;
          int v7 = (v38 + 1) / v36;
          int v6 = (v38 + 1) % v36;
        }
        while (v7 != v2 || v6 != v35);
      }
      else
      {
        int v32 = 0;
        do
        {
          int v33 = 1;
          do
          {
            BOOL v34 = v33 / (int)v3 == v4 && v3 * v39 + v3 * (v33 / (int)v3 - v4) == v33;
            ++v33;
          }
          while (!v34);
          ++v32;
        }
        while (v32 / (int)v1 != v2 || v32 % (int)v1 != v35);
      }
    }
    else
    {
      int v30 = 1;
      do
      {
        BOOL v31 = v30 / (int)v1 == v2 && v1 * v37 + v1 * (v30 / (int)v1 - v2) == v30;
        ++v30;
      }
      while (!v31);
    }
  }
  return result;
}

uint64_t sub_19E25A548(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *__src)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_19E13C2D0(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a2;
    uint64_t v23 = *(void *)(a2 + 16);
  }
  sub_19E25BD4C(a1, (long long *)__p, a3, __src);
  if (SHIBYTE(v23) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v7 = 0;
  *(void *)a1 = &unk_1EF0A9500;
  int v8 = (uint64_t **)(a1 + 24);
  int64x2_t v21 = vdupq_n_s64(1uLL);
  do
  {
    uint64_t v9 = __src[4 * v7 + 32];
    if ((int)v9 < 1) {
      break;
    }
    uint64_t v10 = v7 + 1;
    uint64_t v11 = *v8;
    uint64_t v12 = (uint64_t **)(a1 + 24);
    uint64_t v13 = (uint64_t **)(a1 + 24);
    if (*v8)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v13 = (uint64_t **)v11;
          uint64_t v14 = *((int *)v11 + 8);
          if (v10 >= v14) {
            break;
          }
          uint64_t v11 = *v13;
          uint64_t v12 = v13;
          if (!*v13) {
            goto LABEL_17;
          }
        }
        if (v7 < v14) {
          break;
        }
        uint64_t v11 = v13[1];
        if (!v11)
        {
          uint64_t v12 = v13 + 1;
          goto LABEL_17;
        }
      }
      uint64_t v15 = (char *)v13;
    }
    else
    {
LABEL_17:
      uint64_t v15 = (char *)operator new(0x50uLL);
      *((_DWORD *)v15 + 8) = v10;
      *(_OWORD *)(v15 + 40) = 0u;
      *(_OWORD *)(v15 + 56) = 0u;
      *((void *)v15 + 9) = 0;
      *(void *)uint64_t v15 = 0;
      *((void *)v15 + 1) = 0;
      *((void *)v15 + 2) = v13;
      *uint64_t v12 = (uint64_t *)v15;
      uint64_t v16 = **(void **)(a1 + 16);
      uint64_t v17 = (uint64_t *)v15;
      if (v16)
      {
        *(void *)(a1 + 16) = v16;
        uint64_t v17 = *v12;
      }
      sub_19E13C8A0(*(uint64_t **)(a1 + 24), v17);
      ++*(void *)(a1 + 32);
    }
    *(int64x2_t *)(v15 + 40) = v21;
    *((void *)v15 + 8) = 0;
    *((void *)v15 + 9) = 0;
    uint64_t v7 = v10;
    *((void *)v15 + 7) = v9;
  }
  while (v10 != 8);
  uint64_t v18 = (int)__src[64];
  int v24 = 9;
  int64x2_t v25 = vdupq_n_s64(1uLL);
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v26 = v18;
  sub_19E13C5C0(a1 + 40, &v24, (int *)&v29);
  if (*(void *)__src == 25)
  {
    int v19 = __src[80];
    if (v19 == 3) {
      int v19 = 4;
    }
    *(_DWORD *)(a1 + 1016) = v19;
  }
  return a1;
}

void sub_19E25A780(_Unwind_Exception *a1)
{
  sub_19E25BF30(v1);
  _Unwind_Resume(a1);
}

void sub_19E25A794(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E25A7B0(_Unwind_Exception *a1)
{
  sub_19E25BF30(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19E25A7C4(void ***a1, uint64_t a2, uint64_t a3)
{
  if (((uint64_t (*)(void ***))(*a1)[13])(a1) == 25
    || ((uint64_t (*)(void ***))(*a1)[13])(a1) == 28)
  {
    (*(void (**)(void, uint64_t))(**a1[20] + 16))(*a1[20], a3);
    int v6 = (uint64_t (*)(void ***))(*a1)[4];
    return v6(a1);
  }
  else
  {
    return sub_19E25D504((uint64_t)a1, a2, a3);
  }
}

uint64_t sub_19E25A8E0(void *a1, uint64_t a2)
{
  int v4 = (void *)a1[20];
  uint64_t v5 = (void *)a1[21];
  if (v4 == v5)
  {
    a1[21] = v4;
    if (!a1[31]) {
      goto LABEL_10;
    }
    goto LABEL_8;
  }
  do
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  while (v4 != v5);
  a1[21] = a1[20];
  if (a1[31])
  {
LABEL_8:
    uint64_t v7 = a1[29];
    int v6 = (uint64_t *)a1[30];
    uint64_t v8 = *v6;
    *(void *)(v8 + 8) = *(void *)(v7 + 8);
    **(void **)(v7 + 8) = v8;
    a1[31] = 0;
    if (v6 != a1 + 29)
    {
      do
      {
        uint64_t v9 = (uint64_t *)v6[1];
        operator delete(v6);
        int v6 = v9;
      }
      while (v9 != a1 + 29);
    }
  }
LABEL_10:
  uint64_t v10 = *(uint64_t (**)(uint64_t, void *))(*(void *)a2 + 80);

  return v10(a2, a1);
}

BOOL sub_19E25A9E8(uint64_t a1, void *a2)
{
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1) != 25
    && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1) != 28)
  {
    return 0;
  }
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 160))(v9, a1, 1);
  return *a2 != v9[0] || a2[1] != v9[1] || a2[2] != v9[2] || a2[3] != v9[3] || a2[4] != v9[4];
}

uint64_t **sub_19E25AAE4(void *a1, int a2, int a3)
{
  float result = (uint64_t **)(*(uint64_t (**)(void *))(*a1 + 104))(a1);
  if (result == (uint64_t **)14)
  {
    uint64_t v7 = (void *)a1[2];
    if (v7 != a1 + 3)
    {
      int v8 = (a3 - 1) * a2;
      do
      {
        int v9 = v8 * (*(uint64_t (**)(void *, void))(*a1 + 72))(a1, *((unsigned int *)v7 + 8));
        float result = sub_19E25D8B0((uint64_t)a1, *((_DWORD *)v7 + 8));
        std::runtime_error *result = (uint64_t *)((char *)*result + 4 * v9);
        uint64_t v10 = (void *)v7[1];
        if (v10)
        {
          do
          {
            uint64_t v11 = v10;
            uint64_t v10 = (void *)*v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            uint64_t v11 = (void *)v7[2];
            BOOL v12 = *v11 == (void)v7;
            uint64_t v7 = v11;
          }
          while (!v12);
        }
        uint64_t v7 = v11;
      }
      while (v11 != a1 + 3);
    }
  }
  return result;
}

uint64_t **sub_19E25ABE8(void *a1, uint64_t a2)
{
  float result = (uint64_t **)(*(uint64_t (**)(void *))(*a1 + 104))(a1);
  uint64_t v5 = (void *)a1[2];
  int v6 = a1 + 3;
  if (result == (uint64_t **)14)
  {
    if (v5 != v6)
    {
      do
      {
        int v7 = (*(uint64_t (**)(void *, void))(*a1 + 72))(a1, *((unsigned int *)v5 + 8)) * a2;
        float result = sub_19E25D8B0((uint64_t)a1, *((_DWORD *)v5 + 8));
        std::runtime_error *result = (uint64_t *)((char *)*result - 4 * v7);
        int v8 = (void *)v5[1];
        if (v8)
        {
          do
          {
            int v9 = v8;
            int v8 = (void *)*v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            int v9 = (void *)v5[2];
            BOOL v10 = *v9 == (void)v5;
            uint64_t v5 = v9;
          }
          while (!v10);
        }
        uint64_t v5 = v9;
      }
      while (v9 != v6);
    }
  }
  else if (v5 != v6)
  {
    do
    {
      float result = (uint64_t **)(*(uint64_t (**)(void *, uint64_t, void))(*a1 + 336))(a1, a2, *((unsigned int *)v5 + 8));
      uint64_t v11 = (void *)v5[1];
      if (v11)
      {
        do
        {
          BOOL v12 = v11;
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          BOOL v12 = (void *)v5[2];
          BOOL v10 = *v12 == (void)v5;
          uint64_t v5 = v12;
        }
        while (!v10);
      }
      uint64_t v5 = v12;
    }
    while (v12 != v6);
  }
  return result;
}

void sub_19E25AD5C(uint64_t *a1, int a2)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  int v56 = a2;
  uint64_t v4 = (*(uint64_t (**)(uint64_t *))(*a1 + 104))(a1);
  uint64_t v5 = *a1;
  if (v4 == 16)
  {
    int v6 = (*(uint64_t (**)(uint64_t *, uint64_t))(v5 + 72))(a1, 1);
    int v7 = (*(uint64_t (**)(uint64_t *))(*a1 + 224))(a1);
    uint64_t v8 = v6;
    uint64_t v9 = (*(int (**)(uint64_t *, uint64_t))(*a1 + 216))(a1, 1);
    uint64_t v11 = (uint64_t **)(a1 + 6);
    BOOL v10 = (char *)a1[6];
    if (v10)
    {
      while (1)
      {
        while (1)
        {
          BOOL v12 = v10;
          int v13 = *((_DWORD *)v10 + 8);
          if (v13 <= a2) {
            break;
          }
          BOOL v10 = *(char **)v12;
          uint64_t v11 = (uint64_t **)v12;
          if (!*(void *)v12) {
            goto LABEL_9;
          }
        }
        if (v13 >= a2) {
          break;
        }
        BOOL v10 = (char *)*((void *)v12 + 1);
        if (!v10)
        {
          uint64_t v11 = (uint64_t **)(v12 + 8);
          goto LABEL_9;
        }
      }
    }
    else
    {
      BOOL v12 = (char *)(a1 + 6);
LABEL_9:
      uint64_t v14 = v12;
      BOOL v12 = (char *)operator new(0x50uLL);
      *((_DWORD *)v12 + 8) = a2;
      *(_OWORD *)(v12 + 40) = 0u;
      *(_OWORD *)(v12 + 56) = 0u;
      *((void *)v12 + 9) = 0;
      *(void *)BOOL v12 = 0;
      *((void *)v12 + 1) = 0;
      *((void *)v12 + 2) = v14;
      void *v11 = (uint64_t *)v12;
      uint64_t v15 = *(void *)a1[5];
      uint64_t v16 = (uint64_t *)v12;
      if (v15)
      {
        a1[5] = v15;
        uint64_t v16 = *v11;
      }
      sub_19E13C8A0((uint64_t *)a1[6], v16);
      ++a1[7];
    }
    *(int64x2_t *)(v12 + 40) = vdupq_n_s64(1uLL);
    *((void *)v12 + 7) = v8;
    *((void *)v12 + 8) = v7;
    *((void *)v12 + 9) = v9;
    return;
  }
  if ((*(uint64_t (**)(uint64_t *))(v5 + 104))(a1) == 14)
  {
    uint64_t v18 = (uint64_t **)(a1 + 6);
    uint64_t v17 = (char *)a1[6];
    uint64_t v19 = a1[2] + 40;
    if (v17)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v20 = v17;
          int v21 = *((_DWORD *)v17 + 8);
          if (v21 <= a2) {
            break;
          }
          uint64_t v17 = *(char **)v20;
          uint64_t v18 = (uint64_t **)v20;
          if (!*(void *)v20) {
            goto LABEL_29;
          }
        }
        if (v21 >= a2) {
          break;
        }
        uint64_t v17 = (char *)*((void *)v20 + 1);
        if (!v17) {
          goto LABEL_28;
        }
      }
LABEL_32:
      long long v27 = *(_OWORD *)v19;
      long long v28 = *(_OWORD *)(v19 + 16);
      *((void *)v20 + 9) = *(void *)(v19 + 32);
      *(_OWORD *)(v20 + 56) = v28;
      *(_OWORD *)(v20 + 40) = v27;
      return;
    }
LABEL_23:
    uint64_t v20 = (char *)v18;
LABEL_29:
    int v24 = v20;
    uint64_t v20 = (char *)operator new(0x50uLL);
    *((_DWORD *)v20 + 8) = a2;
    *(_OWORD *)(v20 + 40) = 0u;
    *(_OWORD *)(v20 + 56) = 0u;
    *((void *)v20 + 9) = 0;
    *(void *)uint64_t v20 = 0;
    *((void *)v20 + 1) = 0;
    *((void *)v20 + 2) = v24;
    *uint64_t v18 = (uint64_t *)v20;
    uint64_t v25 = *(void *)a1[5];
    uint64_t v26 = (uint64_t *)v20;
    if (v25)
    {
      a1[5] = v25;
      uint64_t v26 = *v18;
    }
    sub_19E13C8A0((uint64_t *)a1[6], v26);
    ++a1[7];
    goto LABEL_32;
  }
  if ((*(uint64_t (**)(uint64_t *))(*a1 + 104))(a1) == 15)
  {
    uint64_t v18 = (uint64_t **)(a1 + 6);
    uint64_t v22 = (char *)a1[6];
    uint64_t v19 = a1[2] + 40;
    if (v22)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v20 = v22;
          int v23 = *((_DWORD *)v22 + 8);
          if (v23 <= a2) {
            break;
          }
          uint64_t v22 = *(char **)v20;
          uint64_t v18 = (uint64_t **)v20;
          if (!*(void *)v20) {
            goto LABEL_29;
          }
        }
        if (v23 >= a2) {
          goto LABEL_32;
        }
        uint64_t v22 = (char *)*((void *)v20 + 1);
        if (!v22)
        {
LABEL_28:
          uint64_t v18 = (uint64_t **)(v20 + 8);
          goto LABEL_29;
        }
      }
    }
    goto LABEL_23;
  }
  if ((*(uint64_t (**)(uint64_t *))(*a1 + 104))(a1) == 3)
  {
    int v29 = (*(uint64_t (**)(uint64_t *))(*a1 + 224))(a1);
    int v30 = (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 216))(a1, 1);
    int v32 = (uint64_t **)(a1 + 6);
    BOOL v31 = (char *)a1[6];
    uint64_t v33 = *((int *)a1 + 142);
    uint64_t v34 = v29;
    uint64_t v35 = v30;
    if (v31)
    {
      while (1)
      {
        while (1)
        {
          int v36 = v31;
          int v37 = *((_DWORD *)v31 + 8);
          if (v37 <= a2) {
            break;
          }
          BOOL v31 = *(char **)v36;
          int v32 = (uint64_t **)v36;
          if (!*(void *)v36) {
            goto LABEL_42;
          }
        }
        if (v37 >= a2) {
          break;
        }
        BOOL v31 = (char *)*((void *)v36 + 1);
        if (!v31)
        {
          int v32 = (uint64_t **)(v36 + 8);
          goto LABEL_42;
        }
      }
    }
    else
    {
      int v36 = (char *)(a1 + 6);
LABEL_42:
      int v38 = v36;
      int v36 = (char *)operator new(0x50uLL);
      *((_DWORD *)v36 + 8) = a2;
      *(_OWORD *)(v36 + 40) = 0u;
      *(_OWORD *)(v36 + 56) = 0u;
      *((void *)v36 + 9) = 0;
      *(void *)int v36 = 0;
      *((void *)v36 + 1) = 0;
      *((void *)v36 + 2) = v38;
      char *v32 = (uint64_t *)v36;
      uint64_t v39 = *(void *)a1[5];
      int v40 = (uint64_t *)v36;
      if (v39)
      {
        a1[5] = v39;
        int v40 = *v32;
      }
      sub_19E13C8A0((uint64_t *)a1[6], v40);
      ++a1[7];
    }
    *(int64x2_t *)(v36 + 40) = vdupq_n_s64(1uLL);
    *((void *)v36 + 7) = v33;
    *((void *)v36 + 8) = v34;
    *((void *)v36 + 9) = v35;
  }
  else if ((*(uint64_t (**)(uint64_t *))(*a1 + 104))(a1) == 25)
  {
    uint64_t v42 = (uint64_t **)(a1 + 6);
    uint64_t v41 = (char *)a1[6];
    uint64_t v43 = a1[2];
    long long v44 = *(_OWORD *)(v43 + 56);
    *(_OWORD *)long long __p = *(_OWORD *)(v43 + 40);
    long long v58 = v44;
    uint64_t v59 = *(void *)(v43 + 72);
    uint64_t v45 = *((unsigned int *)a1 + 254);
    if ((int)v45 < 0) {
      uint64_t v45 = (int)v45 + 5;
    }
    __p[v45] = (void *)1;
    if (v41)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v46 = v41;
          int v47 = *((_DWORD *)v41 + 8);
          if (v47 <= a2) {
            break;
          }
          uint64_t v41 = *(char **)v46;
          uint64_t v42 = (uint64_t **)v46;
          if (!*(void *)v46) {
            goto LABEL_56;
          }
        }
        if (v47 >= a2) {
          break;
        }
        uint64_t v41 = (char *)*((void *)v46 + 1);
        if (!v41)
        {
          uint64_t v42 = (uint64_t **)(v46 + 8);
          goto LABEL_56;
        }
      }
    }
    else
    {
      uint64_t v46 = (char *)(a1 + 6);
LABEL_56:
      int64x2_t v48 = v46;
      uint64_t v46 = (char *)operator new(0x50uLL);
      *((_DWORD *)v46 + 8) = a2;
      *(_OWORD *)(v46 + 40) = 0u;
      *(_OWORD *)(v46 + 56) = 0u;
      *((void *)v46 + 9) = 0;
      *(void *)uint64_t v46 = 0;
      *((void *)v46 + 1) = 0;
      *((void *)v46 + 2) = v48;
      void *v42 = (uint64_t *)v46;
      uint64_t v49 = *(void *)a1[5];
      int64x2_t v50 = (uint64_t *)v46;
      if (v49)
      {
        a1[5] = v49;
        int64x2_t v50 = *v42;
      }
      sub_19E13C8A0((uint64_t *)a1[6], v50);
      ++a1[7];
    }
    long long v51 = v58;
    *(_OWORD *)(v46 + 40) = *(_OWORD *)__p;
    *(_OWORD *)(v46 + 56) = v51;
    *((void *)v46 + 9) = v59;
  }
  else if ((*(uint64_t (**)(uint64_t *))(*a1 + 104))(a1) == 28)
  {
    uint64_t v52 = a1[2];
    long long v53 = *(_OWORD *)(v52 + 56);
    *(_OWORD *)long long __p = *(_OWORD *)(v52 + 40);
    long long v58 = v53;
    uint64_t v59 = *(void *)(v52 + 72);
    uint64_t v54 = sub_19E25B410((uint64_t **)a1 + 5, &v56);
    *(_OWORD *)uint64_t v54 = *(_OWORD *)__p;
    *((_OWORD *)v54 + 1) = v58;
    *((void *)v54 + 4) = v59;
  }
  else
  {
    (*(void (**)(uint64_t *))(*a1 + 104))(a1);
    sub_19E25B4E8("unable to determine output shape of layer ");
    int64x2_t v55 = sub_19E26EDD8();
    if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR)) {
      sub_19E32F6A0((uint64_t *)__p, v55);
    }
    if (SBYTE7(v58) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_19E25B3E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char *sub_19E25B410(uint64_t **a1, int *a2)
{
  uint64_t v4 = a1 + 1;
  uint64_t v3 = (char *)a1[1];
  int v5 = *a2;
  if (v3)
  {
    while (1)
    {
      while (1)
      {
        int v6 = v3;
        int v7 = *((_DWORD *)v3 + 8);
        if (v5 >= v7) {
          break;
        }
        uint64_t v3 = *(char **)v6;
        uint64_t v4 = (uint64_t **)v6;
        if (!*(void *)v6) {
          goto LABEL_8;
        }
      }
      if (v7 >= v5) {
        break;
      }
      uint64_t v3 = (char *)*((void *)v6 + 1);
      if (!v3)
      {
        uint64_t v4 = (uint64_t **)(v6 + 8);
        goto LABEL_8;
      }
    }
  }
  else
  {
    int v6 = (char *)(a1 + 1);
LABEL_8:
    uint64_t v8 = v6;
    int v6 = (char *)operator new(0x50uLL);
    *((_DWORD *)v6 + 8) = v5;
    *(_OWORD *)(v6 + 40) = 0u;
    *(_OWORD *)(v6 + 56) = 0u;
    *((void *)v6 + 9) = 0;
    *(void *)int v6 = 0;
    *((void *)v6 + 1) = 0;
    *((void *)v6 + 2) = v8;
    *uint64_t v4 = (uint64_t *)v6;
    uint64_t v9 = (uint64_t *)**a1;
    BOOL v10 = (uint64_t *)v6;
    if (v9)
    {
      *a1 = v9;
      BOOL v10 = *v4;
    }
    sub_19E13C8A0(a1[1], v10);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v6 + 40;
}

uint64_t sub_19E25B4E8(const char *a1)
{
  sub_19E13D8EC((uint64_t)v4);
  size_t v2 = strlen(a1);
  sub_19E13DB94(v4, (uint64_t)a1, v2);
  std::ostream::operator<<();
  std::stringbuf::str();
  v4[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v4 + *(void *)(v4[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v4[1] = MEMORY[0x1E4FBA470] + 16;
  if (v5 < 0) {
    operator delete((void *)v4[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x19F3BBB40](&v6);
}

void sub_19E25B638(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E13DA90((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E25B64C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E13DA90((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E25B664(uint64_t a1)
{
  uint64_t v1 = (void *)sub_19E25BF30(a1);

  operator delete(v1);
}

uint64_t sub_19E25B68C(uint64_t a1, uint64_t a2, uint64_t a3, void *__src)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_19E13C2D0(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a2;
    uint64_t v14 = *(void *)(a2 + 16);
  }
  sub_19E25BD4C(a1, (long long *)__p, a3, __src);
  if (SHIBYTE(v14) < 0) {
    operator delete(__p[0]);
  }
  *(void *)a1 = &unk_1EF0AA098;
  *(void *)(a1 + 1016) = __src[56];
  *(void *)(a1 + 1024) = __src[72];
  float v7 = *((float *)__src + 96);
  *(float *)(a1 + 1048) = v7;
  int v8 = *((_DWORD *)__src + 80);
  *(float *)(a1 + 1052) = (float)v8;
  if (v7 == 0.0)
  {
    float v9 = 0.000001;
    if (!v8) {
      float v9 = 1.0e-12;
    }
    *(float *)(a1 + 1048) = v9;
  }
  uint64_t v10 = *((int *)__src + 32);
  int v15 = 1;
  int64x2_t v16 = vdupq_n_s64(1uLL);
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v17 = v10;
  sub_19E13C5C0(a1 + 16, &v15, (int *)&v20);
  uint64_t v11 = *((int *)__src + 64);
  int v15 = 9;
  int64x2_t v16 = vdupq_n_s64(1uLL);
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v17 = v11;
  sub_19E13C5C0(a1 + 40, &v15, (int *)&v20);
  return a1;
}

void sub_19E25B818(_Unwind_Exception *a1)
{
  sub_19E25BF30(v1);
  _Unwind_Resume(a1);
}

void sub_19E25B82C(_Unwind_Exception *a1)
{
  sub_19E25BF30(v1);
  _Unwind_Resume(a1);
}

void sub_19E25B840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_19E25B860(uint64_t a1, int a2)
{
  char v5 = (uint64_t **)(a1 + 24);
  uint64_t v4 = *(int **)(a1 + 24);
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v6 = (char *)v4;
        int v7 = v4[8];
        if (v7 < 2) {
          break;
        }
        uint64_t v4 = *(int **)v6;
        char v5 = (uint64_t **)v6;
        if (!*(void *)v6) {
          goto LABEL_8;
        }
      }
      if (v7 == 1) {
        break;
      }
      uint64_t v4 = (int *)*((void *)v6 + 1);
      if (!v4)
      {
        char v5 = (uint64_t **)(v6 + 8);
        goto LABEL_8;
      }
    }
  }
  else
  {
    uint64_t v6 = (char *)(a1 + 24);
LABEL_8:
    int v8 = v6;
    uint64_t v6 = (char *)operator new(0x50uLL);
    *((_DWORD *)v6 + 8) = 1;
    *(_OWORD *)(v6 + 40) = 0u;
    *(_OWORD *)(v6 + 56) = 0u;
    *((void *)v6 + 9) = 0;
    *(void *)uint64_t v6 = 0;
    *((void *)v6 + 1) = 0;
    *((void *)v6 + 2) = v8;
    void *v5 = (uint64_t *)v6;
    uint64_t v9 = **(void **)(a1 + 16);
    uint64_t v10 = (uint64_t *)v6;
    if (v9)
    {
      *(void *)(a1 + 16) = v9;
      uint64_t v10 = *v5;
    }
    sub_19E13C8A0(*(uint64_t **)(a1 + 24), v10);
    ++*(void *)(a1 + 32);
  }
  __n128 v19 = *(__n128 *)(v6 + 40);
  long long v20 = *(_OWORD *)(v6 + 56);
  uint64_t v21 = *((void *)v6 + 9);
  BOOL v12 = (uint64_t **)(a1 + 48);
  uint64_t v11 = *(char **)(a1 + 48);
  if (v11)
  {
    while (1)
    {
      while (1)
      {
        int v13 = v11;
        int v14 = *((_DWORD *)v11 + 8);
        if (v14 <= a2) {
          break;
        }
        uint64_t v11 = *(char **)v13;
        BOOL v12 = (uint64_t **)v13;
        if (!*(void *)v13) {
          goto LABEL_18;
        }
      }
      if (v14 >= a2) {
        break;
      }
      uint64_t v11 = (char *)*((void *)v13 + 1);
      if (!v11)
      {
        BOOL v12 = (uint64_t **)(v13 + 8);
        goto LABEL_18;
      }
    }
  }
  else
  {
    int v13 = (char *)(a1 + 48);
LABEL_18:
    int v15 = v13;
    int v13 = (char *)operator new(0x50uLL);
    *((_DWORD *)v13 + 8) = a2;
    *(_OWORD *)(v13 + 40) = 0u;
    *(_OWORD *)(v13 + 56) = 0u;
    *((void *)v13 + 9) = 0;
    *(void *)int v13 = 0;
    *((void *)v13 + 1) = 0;
    *((void *)v13 + 2) = v15;
    *BOOL v12 = (uint64_t *)v13;
    uint64_t v16 = **(void **)(a1 + 40);
    uint64_t v17 = (uint64_t *)v13;
    if (v16)
    {
      *(void *)(a1 + 40) = v16;
      uint64_t v17 = *v12;
    }
    sub_19E13C8A0(*(uint64_t **)(a1 + 48), v17);
    ++*(void *)(a1 + 56);
  }
  __n128 result = v19;
  *(__n128 *)(v13 + 40) = v19;
  *(_OWORD *)(v13 + 56) = v20;
  *((void *)v13 + 9) = v21;
  return result;
}

uint64_t sub_19E25BA30(void *a1, uint64_t a2)
{
  uint64_t v4 = (void *)a1[20];
  char v5 = (void *)a1[21];
  if (v4 == v5)
  {
    a1[21] = v4;
    if (!a1[31]) {
      goto LABEL_10;
    }
    goto LABEL_8;
  }
  do
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  while (v4 != v5);
  a1[21] = a1[20];
  if (a1[31])
  {
LABEL_8:
    uint64_t v7 = a1[29];
    uint64_t v6 = (uint64_t *)a1[30];
    uint64_t v8 = *v6;
    *(void *)(v8 + 8) = *(void *)(v7 + 8);
    **(void **)(v7 + 8) = v8;
    a1[31] = 0;
    if (v6 != a1 + 29)
    {
      do
      {
        uint64_t v9 = (uint64_t *)v6[1];
        operator delete(v6);
        uint64_t v6 = v9;
      }
      while (v9 != a1 + 29);
    }
  }
LABEL_10:
  uint64_t v10 = *(uint64_t (**)(uint64_t, void *))(*(void *)a2 + 112);

  return v10(a2, a1);
}

void sub_19E25BB38()
{
}

BOOL sub_19E25BC04(uint64_t a1, void *a2, int a3)
{
  if ((a3 - 8) < 0xFFFFFFF9) {
    return 0;
  }
  uint64_t v8 = (uint64_t **)(a1 + 24);
  uint64_t v7 = *(char **)(a1 + 24);
  if (v7)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v9 = v7;
        int v10 = *((_DWORD *)v7 + 8);
        if (v10 <= a3) {
          break;
        }
        uint64_t v7 = *(char **)v9;
        uint64_t v8 = (uint64_t **)v9;
        if (!*(void *)v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= a3) {
        break;
      }
      uint64_t v7 = (char *)*((void *)v9 + 1);
      if (!v7)
      {
        uint64_t v8 = (uint64_t **)(v9 + 8);
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = (char *)(a1 + 24);
LABEL_10:
    uint64_t v11 = v9;
    uint64_t v9 = (char *)operator new(0x50uLL);
    *((_DWORD *)v9 + 8) = a3;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *((void *)v9 + 9) = 0;
    *(void *)uint64_t v9 = 0;
    *((void *)v9 + 1) = 0;
    *((void *)v9 + 2) = v11;
    char *v8 = (uint64_t *)v9;
    uint64_t v12 = **(void **)(a1 + 16);
    int v13 = (uint64_t *)v9;
    if (v12)
    {
      *(void *)(a1 + 16) = v12;
      int v13 = *v8;
    }
    sub_19E13C8A0(*(uint64_t **)(a1 + 24), v13);
    ++*(void *)(a1 + 32);
  }
  return *((void *)v9 + 5) != *a2
      || *((void *)v9 + 6) != a2[1]
      || *((void *)v9 + 7) != a2[2]
      || *((void *)v9 + 8) != a2[3]
      || *((void *)v9 + 9) != a2[4];
}

void sub_19E25BD24(uint64_t a1)
{
  uint64_t v1 = (void *)sub_19E25BF30(a1);

  operator delete(v1);
}

uint64_t sub_19E25BD4C(uint64_t a1, long long *a2, uint64_t a3, void *__src)
{
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF0A9318;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a1 + 24;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 40) = a1 + 48;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 64) = a1 + 72;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 88) = a1 + 96;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 112) = a1 + 120;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  uint64_t v6 = __src[6];
  uint64_t v7 = __src[15];
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 136) = a1 + 144;
  *(void *)(a1 + 192) = v6;
  *(void *)(a1 + 200) = v7;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = a1 + 232;
  *(void *)(a1 + 240) = a1 + 232;
  *(void *)(a1 + 248) = 0;
  uint64_t v8 = a1 + 256;
  if (*((char *)a2 + 23) < 0)
  {
    sub_19E13C2D0((unsigned char *)v8, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v9 = *a2;
    *(void *)(v8 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v8 = v9;
  }
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 0;
  memcpy((void *)(a1 + 312), __src, 0x2C0uLL);
  return a1;
}

void sub_19E25BEBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, void **a16)
{
  sub_19E13C44C(v24);
  sub_19E13C4B0(v23);
  uint64_t v26 = *v18;
  if (*v18)
  {
    *(void *)(v17 + 168) = v26;
    operator delete(v26);
  }
  sub_19E13C56C(v22, *v21);
  sub_19E13C56C(a10, *v16);
  sub_19E13C56C(a11, *v20);
  sub_19E13C56C(a12, *v19);
  sub_19E13C56C(a13, *a14);
  sub_19E13C56C(a15, *a16);
  _Unwind_Resume(a1);
}

uint64_t sub_19E25BF30(uint64_t a1)
{
  *(void *)a1 = &unk_1EF0A9318;
  size_t v2 = *(void **)(a1 + 160);
  uint64_t v3 = *(void **)(a1 + 168);
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    ++v2;
  }
  if (*(char *)(a1 + 279) < 0)
  {
    operator delete(*(void **)(a1 + 256));
    if (!*(void *)(a1 + 248)) {
      goto LABEL_12;
    }
  }
  else if (!*(void *)(a1 + 248))
  {
    goto LABEL_12;
  }
  uint64_t v5 = *(void *)(a1 + 232);
  uint64_t v4 = *(uint64_t **)(a1 + 240);
  uint64_t v6 = *v4;
  *(void *)(v6 + 8) = *(void *)(v5 + 8);
  **(void **)(v5 + 8) = v6;
  *(void *)(a1 + 248) = 0;
  if (v4 != (uint64_t *)(a1 + 232))
  {
    do
    {
      uint64_t v7 = (uint64_t *)v4[1];
      operator delete(v4);
      uint64_t v4 = v7;
    }
    while (v7 != (uint64_t *)(a1 + 232));
  }
LABEL_12:
  uint64_t v8 = *(void *)(a1 + 208);
  if (v8)
  {
    uint64_t v9 = *(void *)(a1 + 216);
    int v10 = *(void **)(a1 + 208);
    if (v9 != v8)
    {
      do
      {
        uint64_t v11 = *(std::__shared_weak_count **)(v9 - 8);
        if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
        v9 -= 16;
      }
      while (v9 != v8);
      int v10 = *(void **)(a1 + 208);
    }
    *(void *)(a1 + 216) = v8;
    operator delete(v10);
  }
  uint64_t v12 = *(void **)(a1 + 160);
  if (v12)
  {
    *(void *)(a1 + 168) = v12;
    operator delete(v12);
  }
  sub_19E13C56C(a1 + 136, *(void **)(a1 + 144));
  sub_19E13C56C(a1 + 112, *(void **)(a1 + 120));
  sub_19E13C56C(a1 + 88, *(void **)(a1 + 96));
  sub_19E13C56C(a1 + 64, *(void **)(a1 + 72));
  sub_19E13C56C(a1 + 40, *(void **)(a1 + 48));
  sub_19E13C56C(a1 + 16, *(void **)(a1 + 24));
  return a1;
}

void sub_19E25C0FC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 208);
  for (uint64_t i = *(void *)(a1 + 216); i != v2; i -= 16)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  *(void *)(a1 + 216) = v2;
}

uint64_t sub_19E25C198(uint64_t a1)
{
  uint64_t v1 = *(int ***)(a1 + 208);
  uint64_t v2 = *(int ***)(a1 + 216);
  if (v1 == v2) {
    return 0;
  }
  LODWORD(v3) = 0;
  do
  {
    uint64_t v5 = *v1;
    uint64_t v6 = (std::__shared_weak_count *)v1[1];
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      int v4 = *v5;
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    else
    {
      int v4 = *v5;
    }
    uint64_t v3 = (v4 + v3);
    v1 += 2;
  }
  while (v1 != v2);
  return v3;
}

uint64_t sub_19E25C254(uint64_t a1)
{
  uint64_t v1 = a1 + 232;
  uint64_t v2 = *(void *)(a1 + 240);
  if (v2 == a1 + 232) {
    return 0;
  }
  LODWORD(result) = 0;
  do
  {
    uint64_t result = (result + *(_DWORD *)(v2 + 16));
    uint64_t v2 = *(void *)(v2 + 8);
  }
  while (v2 != v1);
  return result;
}

void sub_19E25C288(uint64_t a1@<X0>, char **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *(void **)(a1 + 16);
  uint64_t v3 = (void *)(a1 + 24);
  if (v2 != (void *)(a1 + 24))
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    do
    {
      if (v7 < v6)
      {
        *(_DWORD *)uint64_t v7 = *((_DWORD *)v2 + 8);
        v7 += 4;
        a2[1] = v7;
        uint64_t v8 = (void *)v2[1];
        if (v8) {
          goto LABEL_24;
        }
        goto LABEL_26;
      }
      uint64_t v9 = (v7 - v5) >> 2;
      unint64_t v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 62) {
        sub_19E13D694();
      }
      if ((v6 - v5) >> 1 > v10) {
        unint64_t v10 = (v6 - v5) >> 1;
      }
      if ((unint64_t)(v6 - v5) >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v11 = v10;
      }
      if (v11)
      {
        if (v11 >> 62) {
          sub_19E13C418();
        }
        uint64_t v12 = operator new(4 * v11);
        int v13 = &v12[4 * v9];
        *(_DWORD *)int v13 = *((_DWORD *)v2 + 8);
        uint64_t v14 = (uint64_t)(v13 + 4);
        if (v7 == v5) {
          goto LABEL_21;
        }
      }
      else
      {
        uint64_t v12 = 0;
        int v13 = (char *)(4 * v9);
        *(_DWORD *)(4 * v9) = *((_DWORD *)v2 + 8);
        uint64_t v14 = 4 * v9 + 4;
        if (v7 == v5) {
          goto LABEL_21;
        }
      }
      unint64_t v15 = v7 - 4 - v5;
      if (v15 < 0xBC)
      {
        uint64_t v16 = v7;
        goto LABEL_20;
      }
      if (&v12[v7 - v5 - 4 - (v15 & 0xFFFFFFFFFFFFFFFCLL)] > &v12[v7 - v5 - 4])
      {
        uint64_t v16 = v7;
        do
        {
LABEL_20:
          int v17 = *((_DWORD *)v16 - 1);
          v16 -= 4;
          *((_DWORD *)v13 - 1) = v17;
          v13 -= 4;
        }
        while (v16 != v5);
        goto LABEL_21;
      }
      if (&v7[-(v15 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v7 - 4)
      {
        uint64_t v16 = v7;
        goto LABEL_20;
      }
      if ((unint64_t)(v5 - v12) < 0x20)
      {
        uint64_t v16 = v7;
        goto LABEL_20;
      }
      uint64_t v20 = (v15 >> 2) + 1;
      uint64_t v21 = 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v16 = &v7[-v21];
      v13 -= v21;
      uint64_t v22 = &v12[4 * v9 - 16];
      int v23 = v7 - 16;
      uint64_t v24 = v20 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v25 = *(_OWORD *)v23;
        *(v22 - 1) = *((_OWORD *)v23 - 1);
        _OWORD *v22 = v25;
        v22 -= 2;
        v23 -= 32;
        v24 -= 8;
      }
      while (v24);
      if (v20 != (v20 & 0x7FFFFFFFFFFFFFF8)) {
        goto LABEL_20;
      }
LABEL_21:
      uint64_t v6 = &v12[4 * v11];
      *a2 = v13;
      a2[1] = (char *)v14;
      a2[2] = v6;
      if (v5) {
        operator delete(v5);
      }
      uint64_t v5 = v13;
      uint64_t v7 = (char *)v14;
      a2[1] = (char *)v14;
      uint64_t v8 = (void *)v2[1];
      if (v8)
      {
        do
        {
LABEL_24:
          uint64_t v18 = v8;
          uint64_t v8 = (void *)*v8;
        }
        while (v8);
        goto LABEL_3;
      }
      do
      {
LABEL_26:
        uint64_t v18 = (void *)v2[2];
        BOOL v19 = *v18 == (void)v2;
        uint64_t v2 = v18;
      }
      while (!v19);
LABEL_3:
      uint64_t v2 = v18;
    }
    while (v18 != v3);
  }
}

void sub_19E25C4C4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E25C4E4(uint64_t a1@<X0>, char **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *(void **)(a1 + 40);
  uint64_t v3 = (void *)(a1 + 48);
  if (v2 != (void *)(a1 + 48))
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    do
    {
      if (v7 < v6)
      {
        *(_DWORD *)uint64_t v7 = *((_DWORD *)v2 + 8);
        v7 += 4;
        a2[1] = v7;
        uint64_t v8 = (void *)v2[1];
        if (v8) {
          goto LABEL_24;
        }
        goto LABEL_26;
      }
      uint64_t v9 = (v7 - v5) >> 2;
      unint64_t v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 62) {
        sub_19E13D694();
      }
      if ((v6 - v5) >> 1 > v10) {
        unint64_t v10 = (v6 - v5) >> 1;
      }
      if ((unint64_t)(v6 - v5) >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v11 = v10;
      }
      if (v11)
      {
        if (v11 >> 62) {
          sub_19E13C418();
        }
        uint64_t v12 = operator new(4 * v11);
        int v13 = &v12[4 * v9];
        *(_DWORD *)int v13 = *((_DWORD *)v2 + 8);
        uint64_t v14 = (uint64_t)(v13 + 4);
        if (v7 == v5) {
          goto LABEL_21;
        }
      }
      else
      {
        uint64_t v12 = 0;
        int v13 = (char *)(4 * v9);
        *(_DWORD *)(4 * v9) = *((_DWORD *)v2 + 8);
        uint64_t v14 = 4 * v9 + 4;
        if (v7 == v5) {
          goto LABEL_21;
        }
      }
      unint64_t v15 = v7 - 4 - v5;
      if (v15 < 0xBC)
      {
        uint64_t v16 = v7;
        goto LABEL_20;
      }
      if (&v12[v7 - v5 - 4 - (v15 & 0xFFFFFFFFFFFFFFFCLL)] > &v12[v7 - v5 - 4])
      {
        uint64_t v16 = v7;
        do
        {
LABEL_20:
          int v17 = *((_DWORD *)v16 - 1);
          v16 -= 4;
          *((_DWORD *)v13 - 1) = v17;
          v13 -= 4;
        }
        while (v16 != v5);
        goto LABEL_21;
      }
      if (&v7[-(v15 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v7 - 4)
      {
        uint64_t v16 = v7;
        goto LABEL_20;
      }
      if ((unint64_t)(v5 - v12) < 0x20)
      {
        uint64_t v16 = v7;
        goto LABEL_20;
      }
      uint64_t v20 = (v15 >> 2) + 1;
      uint64_t v21 = 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v16 = &v7[-v21];
      v13 -= v21;
      uint64_t v22 = &v12[4 * v9 - 16];
      int v23 = v7 - 16;
      uint64_t v24 = v20 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v25 = *(_OWORD *)v23;
        *(v22 - 1) = *((_OWORD *)v23 - 1);
        _OWORD *v22 = v25;
        v22 -= 2;
        v23 -= 32;
        v24 -= 8;
      }
      while (v24);
      if (v20 != (v20 & 0x7FFFFFFFFFFFFFF8)) {
        goto LABEL_20;
      }
LABEL_21:
      uint64_t v6 = &v12[4 * v11];
      *a2 = v13;
      a2[1] = (char *)v14;
      a2[2] = v6;
      if (v5) {
        operator delete(v5);
      }
      uint64_t v5 = v13;
      uint64_t v7 = (char *)v14;
      a2[1] = (char *)v14;
      uint64_t v8 = (void *)v2[1];
      if (v8)
      {
        do
        {
LABEL_24:
          uint64_t v18 = v8;
          uint64_t v8 = (void *)*v8;
        }
        while (v8);
        goto LABEL_3;
      }
      do
      {
LABEL_26:
        uint64_t v18 = (void *)v2[2];
        BOOL v19 = *v18 == (void)v2;
        uint64_t v2 = v18;
      }
      while (!v19);
LABEL_3:
      uint64_t v2 = v18;
    }
    while (v18 != v3);
  }
}

void sub_19E25C720(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E25C740(uint64_t a1, int a2)
{
  uint64_t v5 = (uint64_t **)(a1 + 24);
  int v4 = *(char **)(a1 + 24);
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v6 = v4;
        int v7 = *((_DWORD *)v4 + 8);
        if (v7 <= a2) {
          break;
        }
        int v4 = *(char **)v6;
        uint64_t v5 = (uint64_t **)v6;
        if (!*(void *)v6) {
          goto LABEL_8;
        }
      }
      if (v7 >= a2) {
        break;
      }
      int v4 = (char *)*((void *)v6 + 1);
      if (!v4)
      {
        uint64_t v5 = (uint64_t **)(v6 + 8);
        goto LABEL_8;
      }
    }
  }
  else
  {
    uint64_t v6 = (char *)(a1 + 24);
LABEL_8:
    uint64_t v8 = v6;
    uint64_t v6 = (char *)operator new(0x50uLL);
    *((_DWORD *)v6 + 8) = a2;
    *(_OWORD *)(v6 + 40) = 0u;
    *(_OWORD *)(v6 + 56) = 0u;
    *((void *)v6 + 9) = 0;
    *(void *)uint64_t v6 = 0;
    *((void *)v6 + 1) = 0;
    *((void *)v6 + 2) = v8;
    char *v5 = (uint64_t *)v6;
    uint64_t v9 = **(void **)(a1 + 16);
    unint64_t v10 = (uint64_t *)v6;
    if (v9)
    {
      *(void *)(a1 + 16) = v9;
      unint64_t v10 = *v5;
    }
    sub_19E13C8A0(*(uint64_t **)(a1 + 24), v10);
    ++*(void *)(a1 + 32);
  }
  return (*((_DWORD *)v6 + 10) * *((_DWORD *)v6 + 12) * *((_DWORD *)v6 + 14));
}

unint64_t sub_19E25C824(uint64_t a1, int a2)
{
  uint64_t v5 = (uint64_t **)(a1 + 48);
  int v4 = *(char **)(a1 + 48);
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v6 = v4;
        int v7 = *((_DWORD *)v4 + 8);
        if (v7 <= a2) {
          break;
        }
        int v4 = *(char **)v6;
        uint64_t v5 = (uint64_t **)v6;
        if (!*(void *)v6) {
          goto LABEL_8;
        }
      }
      if (v7 >= a2) {
        break;
      }
      int v4 = (char *)*((void *)v6 + 1);
      if (!v4)
      {
        uint64_t v5 = (uint64_t **)(v6 + 8);
        goto LABEL_8;
      }
    }
  }
  else
  {
    uint64_t v6 = (char *)(a1 + 48);
LABEL_8:
    uint64_t v8 = v6;
    uint64_t v6 = (char *)operator new(0x50uLL);
    *((_DWORD *)v6 + 8) = a2;
    *(_OWORD *)(v6 + 40) = 0u;
    *(_OWORD *)(v6 + 56) = 0u;
    *((void *)v6 + 9) = 0;
    *(void *)uint64_t v6 = 0;
    *((void *)v6 + 1) = 0;
    *((void *)v6 + 2) = v8;
    char *v5 = (uint64_t *)v6;
    uint64_t v9 = **(void **)(a1 + 40);
    unint64_t v10 = (uint64_t *)v6;
    if (v9)
    {
      *(void *)(a1 + 40) = v9;
      unint64_t v10 = *v5;
    }
    sub_19E13C8A0(*(uint64_t **)(a1 + 48), v10);
    ++*(void *)(a1 + 56);
  }
  unint64_t v11 = *((_DWORD *)v6 + 10) * *((_DWORD *)v6 + 12) * *((_DWORD *)v6 + 14);
  return v11 >> (*(uint64_t (**)(uint64_t))(*(void *)a1 + 240))(a1);
}

__n128 sub_19E25C938(uint64_t a1, uint64_t a2, int a3, char a4)
{
  if (a4)
  {
    uint64_t v7 = *(void *)(a2 + 24);
    uint64_t v9 = (uint64_t **)(a1 + 24);
    uint64_t v8 = *(char **)(a1 + 24);
    unint64_t v10 = (uint64_t **)(a1 + 24);
    unint64_t v11 = (char *)(a1 + 24);
    if (v8)
    {
      uint64_t v12 = *(char **)(a1 + 24);
      while (1)
      {
        while (1)
        {
          unint64_t v11 = v12;
          int v13 = *((_DWORD *)v12 + 8);
          if (v13 <= a3) {
            break;
          }
          uint64_t v12 = *(char **)v11;
          unint64_t v10 = (uint64_t **)v11;
          if (!*(void *)v11) {
            goto LABEL_9;
          }
        }
        if (v13 >= a3) {
          break;
        }
        uint64_t v12 = (char *)*((void *)v11 + 1);
        if (!v12)
        {
          unint64_t v10 = (uint64_t **)(v11 + 8);
          goto LABEL_9;
        }
      }
    }
    else
    {
LABEL_9:
      uint64_t v14 = v11;
      unint64_t v11 = (char *)operator new(0x50uLL);
      *((_DWORD *)v11 + 8) = a3;
      *(_OWORD *)(v11 + 40) = 0u;
      *(_OWORD *)(v11 + 56) = 0u;
      *((void *)v11 + 9) = 0;
      *(void *)unint64_t v11 = 0;
      *((void *)v11 + 1) = 0;
      *((void *)v11 + 2) = v14;
      *unint64_t v10 = (uint64_t *)v11;
      uint64_t v15 = **(void **)(a1 + 16);
      uint64_t v16 = (uint64_t *)v11;
      if (v15)
      {
        *(void *)(a1 + 16) = v15;
        uint64_t v16 = *v10;
      }
      sub_19E13C8A0(*(uint64_t **)(a1 + 24), v16);
      uint64_t v8 = *(char **)(a1 + 24);
      ++*(void *)(a1 + 32);
    }
    *((void *)v11 + 8) = v7;
    uint64_t v18 = *(void *)(a2 + 32);
    BOOL v19 = (char *)(a1 + 24);
    if (v8)
    {
      while (1)
      {
        while (1)
        {
          BOOL v19 = v8;
          int v20 = *((_DWORD *)v8 + 8);
          if (v20 <= a3) {
            break;
          }
          uint64_t v8 = *(char **)v19;
          uint64_t v9 = (uint64_t **)v19;
          if (!*(void *)v19) {
            goto LABEL_19;
          }
        }
        if (v20 >= a3) {
          break;
        }
        uint64_t v8 = (char *)*((void *)v19 + 1);
        if (!v8)
        {
          uint64_t v9 = (uint64_t **)(v19 + 8);
          goto LABEL_19;
        }
      }
    }
    else
    {
LABEL_19:
      uint64_t v21 = v19;
      BOOL v19 = (char *)operator new(0x50uLL);
      *((_DWORD *)v19 + 8) = a3;
      *(_OWORD *)(v19 + 40) = 0u;
      *(_OWORD *)(v19 + 56) = 0u;
      *((void *)v19 + 9) = 0;
      *(void *)BOOL v19 = 0;
      *((void *)v19 + 1) = 0;
      *((void *)v19 + 2) = v21;
      *uint64_t v9 = (uint64_t *)v19;
      uint64_t v22 = **(void **)(a1 + 16);
      int v23 = (uint64_t *)v19;
      if (v22)
      {
        *(void *)(a1 + 16) = v22;
        int v23 = *v9;
      }
      sub_19E13C8A0(*(uint64_t **)(a1 + 24), v23);
      ++*(void *)(a1 + 32);
    }
    *((void *)v19 + 9) = v18;
  }
  else
  {
    long long v25 = (uint64_t **)(a1 + 24);
    uint64_t v24 = *(char **)(a1 + 24);
    if (v24)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v26 = v24;
          int v27 = *((_DWORD *)v24 + 8);
          if (v27 <= a3) {
            break;
          }
          uint64_t v24 = *(char **)v26;
          long long v25 = (uint64_t **)v26;
          if (!*(void *)v26) {
            goto LABEL_30;
          }
        }
        if (v27 >= a3) {
          break;
        }
        uint64_t v24 = (char *)*((void *)v26 + 1);
        if (!v24)
        {
          long long v25 = (uint64_t **)(v26 + 8);
          goto LABEL_30;
        }
      }
    }
    else
    {
      uint64_t v26 = (char *)(a1 + 24);
LABEL_30:
      long long v28 = v26;
      uint64_t v26 = (char *)operator new(0x50uLL);
      *((_DWORD *)v26 + 8) = a3;
      *(_OWORD *)(v26 + 40) = 0u;
      *(_OWORD *)(v26 + 56) = 0u;
      *((void *)v26 + 9) = 0;
      *(void *)uint64_t v26 = 0;
      *((void *)v26 + 1) = 0;
      *((void *)v26 + 2) = v28;
      char *v25 = (uint64_t *)v26;
      uint64_t v29 = **(void **)(a1 + 16);
      int v30 = (uint64_t *)v26;
      if (v29)
      {
        *(void *)(a1 + 16) = v29;
        int v30 = *v25;
      }
      sub_19E13C8A0(*(uint64_t **)(a1 + 24), v30);
      ++*(void *)(a1 + 32);
    }
    __n128 result = *(__n128 *)a2;
    long long v31 = *(_OWORD *)(a2 + 16);
    *((void *)v26 + 9) = *(void *)(a2 + 32);
    *(_OWORD *)(v26 + 56) = v31;
    *(__n128 *)(v26 + 40) = result;
  }
  return result;
}

__n128 sub_19E25CB8C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v7 = (uint64_t **)(a1 + 48);
  uint64_t v6 = *(char **)(a1 + 48);
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v8 = v6;
        int v9 = *((_DWORD *)v6 + 8);
        if (v9 <= a3) {
          break;
        }
        uint64_t v6 = *(char **)v8;
        uint64_t v7 = (uint64_t **)v8;
        if (!*(void *)v8) {
          goto LABEL_8;
        }
      }
      if (v9 >= a3) {
        break;
      }
      uint64_t v6 = (char *)*((void *)v8 + 1);
      if (!v6)
      {
        uint64_t v7 = (uint64_t **)(v8 + 8);
        goto LABEL_8;
      }
    }
  }
  else
  {
    uint64_t v8 = (char *)(a1 + 48);
LABEL_8:
    unint64_t v10 = v8;
    uint64_t v8 = (char *)operator new(0x50uLL);
    *((_DWORD *)v8 + 8) = a3;
    *(_OWORD *)(v8 + 40) = 0u;
    *(_OWORD *)(v8 + 56) = 0u;
    *((void *)v8 + 9) = 0;
    *(void *)uint64_t v8 = 0;
    *((void *)v8 + 1) = 0;
    *((void *)v8 + 2) = v10;
    *uint64_t v7 = (uint64_t *)v8;
    uint64_t v11 = **(void **)(a1 + 40);
    uint64_t v12 = (uint64_t *)v8;
    if (v11)
    {
      *(void *)(a1 + 40) = v11;
      uint64_t v12 = *v7;
    }
    sub_19E13C8A0(*(uint64_t **)(a1 + 48), v12);
    ++*(void *)(a1 + 56);
  }
  __n128 result = *(__n128 *)a2;
  long long v14 = *(_OWORD *)(a2 + 16);
  *((void *)v8 + 9) = *(void *)(a2 + 32);
  *(_OWORD *)(v8 + 56) = v14;
  *(__n128 *)(v8 + 40) = result;
  return result;
}

uint64_t sub_19E25CC74(void *a1)
{
  if (a1[24] == 1) {
    int v2 = 1;
  }
  else {
    int v2 = (*(uint64_t (**)(void *))(*a1 + 72))(a1);
  }
  return (*(unsigned int (**)(void *))(*a1 + 88))(a1) * v2;
}

uint64_t sub_19E25CD10(uint64_t a1)
{
  int v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 80))(a1);
  int v3 = v2 << (*(uint64_t (**)(uint64_t))(*(void *)a1 + 240))(a1);
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 88))(a1) * v3;
}

uint64_t sub_19E25CDB0()
{
  return 4;
}

uint64_t sub_19E25CDB8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 280);
}

uint64_t sub_19E25CDC0(uint64_t a1)
{
  return *(void *)(a1 + 192);
}

uint64_t sub_19E25CDC8(uint64_t a1)
{
  return *(void *)(a1 + 200);
}

uint64_t sub_19E25CDD0(uint64_t a1)
{
  return *(void *)(a1 + 312);
}

uint64_t sub_19E25CDD8(uint64_t a1)
{
  return *(void *)(a1 + 184);
}

uint64_t sub_19E25CDE0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 184) = a2;
  return result;
}

double sub_19E25CDE8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(void *)(a1 + 284) = *(void *)(*a2 + 56);
  double result = *(double *)(v2 + 48);
  *(double *)(a1 + 292) = result;
  return result;
}

void *sub_19E25CE04@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return memcpy(a2, (const void *)(a1 + 312), 0x2C0uLL);
}

__n128 sub_19E25CE14@<Q0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (uint64_t **)(a1 + 24);
  uint64_t v5 = *(uint64_t **)(a1 + 24);
  if (!v5) {
    goto LABEL_11;
  }
  int v7 = a2;
  uint64_t v8 = a1 + 24;
  uint64_t v9 = *(void *)(a1 + 24);
  do
  {
    int v10 = *(_DWORD *)(v9 + 32);
    BOOL v11 = v10 < a2;
    if (v10 >= a2) {
      uint64_t v12 = (uint64_t *)v9;
    }
    else {
      uint64_t v12 = (uint64_t *)(v9 + 8);
    }
    if (!v11) {
      uint64_t v8 = v9;
    }
    uint64_t v9 = *v12;
  }
  while (*v12);
  if ((uint64_t **)v8 != v6 && *(_DWORD *)(v8 + 32) <= a2)
  {
    while (1)
    {
LABEL_28:
      while (1)
      {
        int v20 = (uint64_t **)v5;
        int v21 = *((_DWORD *)v5 + 8);
        if (v7 >= v21) {
          break;
        }
        uint64_t v5 = *v20;
        uint64_t v6 = v20;
        if (!*v20) {
          goto LABEL_32;
        }
      }
      if (v21 >= v7) {
        break;
      }
      uint64_t v5 = v20[1];
      if (!v5)
      {
        uint64_t v6 = v20 + 1;
        goto LABEL_32;
      }
    }
    uint64_t v22 = (char *)v20;
  }
  else
  {
LABEL_11:
    sub_19E25D0BC("input shape not found at port ");
    int v13 = *v6;
    long long v14 = v6;
    uint64_t v15 = v6;
    if (*v6)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v15 = (uint64_t **)v13;
          int v16 = *((_DWORD *)v13 + 8);
          if (a2 >= v16) {
            break;
          }
          int v13 = *v15;
          long long v14 = v15;
          if (!*v15) {
            goto LABEL_18;
          }
        }
        if (v16 >= a2) {
          break;
        }
        int v13 = v15[1];
        if (!v13)
        {
          long long v14 = v15 + 1;
          goto LABEL_18;
        }
      }
      int v17 = (char *)v15;
    }
    else
    {
LABEL_18:
      int v17 = (char *)operator new(0x50uLL);
      *((_DWORD *)v17 + 8) = a2;
      *(_OWORD *)(v17 + 40) = 0u;
      *(_OWORD *)(v17 + 56) = 0u;
      *((void *)v17 + 9) = 0;
      *(void *)int v17 = 0;
      *((void *)v17 + 1) = 0;
      *((void *)v17 + 2) = v15;
      *long long v14 = (uint64_t *)v17;
      uint64_t v18 = **(void **)(a1 + 16);
      BOOL v19 = (uint64_t *)v17;
      if (v18)
      {
        *(void *)(a1 + 16) = v18;
        BOOL v19 = *v14;
      }
      sub_19E13C8A0(*(uint64_t **)(a1 + 24), v19);
      ++*(void *)(a1 + 32);
    }
    *(_OWORD *)(v17 + 40) = 0u;
    *(_OWORD *)(v17 + 56) = 0u;
    *((void *)v17 + 9) = 0;
    if (v28 < 0)
    {
      operator delete(__p);
      uint64_t v5 = *v6;
      int v7 = a2;
      int v20 = v6;
      if (*v6) {
        goto LABEL_28;
      }
    }
    else
    {
      uint64_t v5 = *v6;
      int v7 = a2;
      int v20 = v6;
      if (*v6) {
        goto LABEL_28;
      }
    }
LABEL_32:
    uint64_t v22 = (char *)operator new(0x50uLL);
    *((_DWORD *)v22 + 8) = v7;
    *(_OWORD *)(v22 + 40) = 0u;
    *(_OWORD *)(v22 + 56) = 0u;
    *((void *)v22 + 9) = 0;
    *(void *)uint64_t v22 = 0;
    *((void *)v22 + 1) = 0;
    *((void *)v22 + 2) = v20;
    *uint64_t v6 = (uint64_t *)v22;
    uint64_t v23 = **(void **)(a1 + 16);
    uint64_t v24 = (uint64_t *)v22;
    if (v23)
    {
      *(void *)(a1 + 16) = v23;
      uint64_t v24 = *v6;
    }
    sub_19E13C8A0(*(uint64_t **)(a1 + 24), v24);
    ++*(void *)(a1 + 32);
  }
  __n128 result = *(__n128 *)(v22 + 40);
  long long v26 = *(_OWORD *)(v22 + 56);
  *(void *)(a3 + 32) = *((void *)v22 + 9);
  *(__n128 *)a3 = result;
  *(_OWORD *)(a3 + 16) = v26;
  return result;
}

void sub_19E25D094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E25D0BC(const char *a1)
{
  sub_19E13D8EC((uint64_t)v4);
  size_t v2 = strlen(a1);
  sub_19E13DB94(v4, (uint64_t)a1, v2);
  std::ostream::operator<<();
  std::stringbuf::str();
  v4[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v4 + *(void *)(v4[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v4[1] = MEMORY[0x1E4FBA470] + 16;
  if (v5 < 0) {
    operator delete((void *)v4[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x19F3BBB40](&v6);
}

void sub_19E25D20C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E13DA90((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E25D220(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E13DA90((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_19E25D234@<Q0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (uint64_t **)(a1 + 48);
  char v5 = *(uint64_t **)(a1 + 48);
  if (!v5) {
    goto LABEL_11;
  }
  int v7 = a2;
  uint64_t v8 = a1 + 48;
  uint64_t v9 = *(void *)(a1 + 48);
  do
  {
    int v10 = *(_DWORD *)(v9 + 32);
    BOOL v11 = v10 < a2;
    if (v10 >= a2) {
      uint64_t v12 = (uint64_t *)v9;
    }
    else {
      uint64_t v12 = (uint64_t *)(v9 + 8);
    }
    if (!v11) {
      uint64_t v8 = v9;
    }
    uint64_t v9 = *v12;
  }
  while (*v12);
  if ((uint64_t **)v8 == v6 || *(_DWORD *)(v8 + 32) > a2)
  {
LABEL_11:
    sub_19E25D0BC("output shape not found at port ");
    int v13 = sub_19E26EDD8();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      sub_19E32F738();
      if ((v22 & 0x80000000) == 0)
      {
LABEL_13:
        char v5 = *v6;
        int v7 = a2;
        long long v14 = (char *)v6;
        if (*v6) {
          goto LABEL_19;
        }
LABEL_23:
        int v16 = v14;
        long long v14 = (char *)operator new(0x50uLL);
        *((_DWORD *)v14 + 8) = v7;
        *(_OWORD *)(v14 + 40) = 0u;
        *(_OWORD *)(v14 + 56) = 0u;
        *((void *)v14 + 9) = 0;
        *(void *)long long v14 = 0;
        *((void *)v14 + 1) = 0;
        *((void *)v14 + 2) = v16;
        *uint64_t v6 = (uint64_t *)v14;
        uint64_t v17 = **(void **)(a1 + 40);
        uint64_t v18 = (uint64_t *)v14;
        if (v17)
        {
          *(void *)(a1 + 40) = v17;
          uint64_t v18 = *v6;
        }
        sub_19E13C8A0(*(uint64_t **)(a1 + 48), v18);
        ++*(void *)(a1 + 56);
        goto LABEL_26;
      }
    }
    else if ((v22 & 0x80000000) == 0)
    {
      goto LABEL_13;
    }
    operator delete(__p);
    char v5 = *v6;
    int v7 = a2;
    long long v14 = (char *)v6;
    if (*v6) {
      goto LABEL_19;
    }
    goto LABEL_23;
  }
  while (1)
  {
LABEL_19:
    while (1)
    {
      long long v14 = (char *)v5;
      int v15 = *((_DWORD *)v5 + 8);
      if (v7 >= v15) {
        break;
      }
      char v5 = *(uint64_t **)v14;
      uint64_t v6 = (uint64_t **)v14;
      if (!*(void *)v14) {
        goto LABEL_23;
      }
    }
    if (v15 >= v7) {
      break;
    }
    char v5 = (uint64_t *)*((void *)v14 + 1);
    if (!v5)
    {
      uint64_t v6 = (uint64_t **)(v14 + 8);
      goto LABEL_23;
    }
  }
LABEL_26:
  __n128 result = *(__n128 *)(v14 + 40);
  long long v20 = *(_OWORD *)(v14 + 56);
  *(void *)(a3 + 32) = *((void *)v14 + 9);
  *(__n128 *)a3 = result;
  *(_OWORD *)(a3 + 16) = v20;
  return result;
}

void sub_19E25D3DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E25D3F8(uint64_t a1, int a2)
{
  char v5 = (uint64_t **)(a1 + 24);
  int v4 = *(char **)(a1 + 24);
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v6 = v4;
        int v7 = *((_DWORD *)v4 + 8);
        if (v7 <= a2) {
          break;
        }
        int v4 = *(char **)v6;
        char v5 = (uint64_t **)v6;
        if (!*(void *)v6) {
          goto LABEL_8;
        }
      }
      if (v7 >= a2) {
        break;
      }
      int v4 = (char *)*((void *)v6 + 1);
      if (!v4)
      {
        char v5 = (uint64_t **)(v6 + 8);
        goto LABEL_8;
      }
    }
  }
  else
  {
    uint64_t v6 = (char *)(a1 + 24);
LABEL_8:
    uint64_t v8 = v6;
    uint64_t v6 = (char *)operator new(0x50uLL);
    *((_DWORD *)v6 + 8) = a2;
    *(_OWORD *)(v6 + 40) = 0u;
    *(_OWORD *)(v6 + 56) = 0u;
    *((void *)v6 + 9) = 0;
    *(void *)uint64_t v6 = 0;
    *((void *)v6 + 1) = 0;
    *((void *)v6 + 2) = v8;
    uint64_t *v5 = (uint64_t *)v6;
    uint64_t v9 = **(void **)(a1 + 16);
    int v10 = (uint64_t *)v6;
    if (v9)
    {
      *(void *)(a1 + 16) = v9;
      int v10 = *v5;
    }
    sub_19E13C8A0(*(uint64_t **)(a1 + 24), v10);
    ++*(void *)(a1 + 32);
  }
  return *((unsigned int *)v6 + 18);
}

uint64_t sub_19E25D4CC(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 16) + 64);
}

char *sub_19E25D4D8@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[279] < 0) {
    return (char *)sub_19E13C2D0((unsigned char *)a2, *((void **)result + 32), *((void *)result + 33));
  }
  *(_OWORD *)a2 = *((_OWORD *)result + 16);
  *(void *)(a2 + 16) = *((void *)result + 34);
  return result;
}

uint64_t sub_19E25D504(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = a2;
  *(_DWORD *)(a1 + 280) = a3;
  uint64_t v6 = a1 + 232;
  if (*(void *)(a1 + 240) != a1 + 232) {
    sub_19E30A40C();
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 312))(a1, a3, a2);
  if (v4 >= 1)
  {
    do
    {
      BOOL v11 = *(uint64_t **)(a1 + 160);
      uint64_t v12 = *(uint64_t **)(a1 + 168);
      while (v11 != v12)
      {
        uint64_t v13 = *v11++;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, a3);
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 320))(a1, a3);
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 328))(a1, a3);
    }
    while (v4-- > 1);
  }
  for (uint64_t i = *(void *)(a1 + 240); i != v6; uint64_t i = *(void *)(i + 8))
  {
    sub_19E30A424(*(void *)(a1 + 8), *(_DWORD *)(i + 16) * a3, *(void **)(i + 24));
    *(void *)(i + 24) = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 32);

  return v8(a1);
}

uint64_t sub_19E25D6DC(uint64_t result)
{
  if (*(void *)(result + 240) != result + 232) {
    sub_19E30A40C();
  }
  return result;
}

void sub_19E25D738(uint64_t a1, int a2)
{
  uint64_t v2 = a1 + 232;
  uint64_t v3 = *(void *)(a1 + 240);
  if (v3 != a1 + 232)
  {
    do
    {
      sub_19E30A424(*(void *)(a1 + 8), *(_DWORD *)(v3 + 16) * a2, *(void **)(v3 + 24));
      *(void *)(v3 + 24) = 0;
      uint64_t v3 = *(void *)(v3 + 8);
    }
    while (v3 != v2);
  }
}

_OWORD *sub_19E25D798(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = *(uint64_t **)(*(void *)a2 + 8);
  uint64_t v8 = (uint64_t **)(a1 + 72);
  int v7 = *(uint64_t **)(a1 + 72);
  if (v7)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v7;
        int v10 = *((_DWORD *)v7 + 8);
        if (v10 <= a3) {
          break;
        }
        int v7 = *v9;
        uint64_t v8 = v9;
        if (!*v9) {
          goto LABEL_8;
        }
      }
      if (v10 >= a3) {
        break;
      }
      int v7 = v9[1];
      if (!v7)
      {
        uint64_t v8 = v9 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    uint64_t v9 = (uint64_t **)(a1 + 72);
LABEL_8:
    BOOL v11 = (uint64_t *)v9;
    uint64_t v9 = (uint64_t **)operator new(0x30uLL);
    *((_DWORD *)v9 + 8) = a3;
    void v9[5] = 0;
    *uint64_t v9 = 0;
    v9[1] = 0;
    v9[2] = v11;
    char *v8 = (uint64_t *)v9;
    uint64_t v12 = **(void **)(a1 + 64);
    uint64_t v13 = (uint64_t *)v9;
    if (v12)
    {
      *(void *)(a1 + 64) = v12;
      uint64_t v13 = *v8;
    }
    sub_19E13C8A0(*(uint64_t **)(a1 + 72), v13);
    ++*(void *)(a1 + 80);
  }
  void v9[5] = v6;
  long long v14 = *(void **)(a1 + 216);
  if ((unint64_t)v14 >= *(void *)(a1 + 224))
  {
    __n128 result = sub_19E2602DC(a1 + 208, (long long *)a2);
  }
  else
  {
    uint64_t v15 = *(void *)(a2 + 8);
    *long long v14 = *(void *)a2;
    v14[1] = v15;
    if (v15) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
    }
    __n128 result = v14 + 2;
  }
  *(void *)(a1 + 216) = result;
  return result;
}

uint64_t **sub_19E25D8B0(uint64_t a1, int a2)
{
  char v5 = (uint64_t **)(a1 + 72);
  int v4 = *(uint64_t **)(a1 + 72);
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v6 = (uint64_t **)v4;
        int v7 = *((_DWORD *)v4 + 8);
        if (v7 <= a2) {
          break;
        }
        int v4 = *v6;
        char v5 = v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }
      if (v7 >= a2) {
        break;
      }
      int v4 = v6[1];
      if (!v4)
      {
        char v5 = v6 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    uint64_t v6 = (uint64_t **)(a1 + 72);
LABEL_8:
    uint64_t v8 = (uint64_t *)v6;
    uint64_t v6 = (uint64_t **)operator new(0x30uLL);
    *((_DWORD *)v6 + 8) = a2;
    v6[5] = 0;
    *uint64_t v6 = 0;
    v6[1] = 0;
    v6[2] = v8;
    uint64_t *v5 = (uint64_t *)v6;
    uint64_t v9 = **(void **)(a1 + 64);
    int v10 = (uint64_t *)v6;
    if (v9)
    {
      *(void *)(a1 + 64) = v9;
      int v10 = *v5;
    }
    sub_19E13C8A0(*(uint64_t **)(a1 + 72), v10);
    ++*(void *)(a1 + 80);
  }
  return v6 + 5;
}

_OWORD *sub_19E25D978(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = *(uint64_t **)(*(void *)a2 + 8);
  uint64_t v8 = (uint64_t **)(a1 + 96);
  int v7 = *(uint64_t **)(a1 + 96);
  if (v7)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v7;
        int v10 = *((_DWORD *)v7 + 8);
        if (v10 <= a3) {
          break;
        }
        int v7 = *v9;
        uint64_t v8 = v9;
        if (!*v9) {
          goto LABEL_8;
        }
      }
      if (v10 >= a3) {
        break;
      }
      int v7 = v9[1];
      if (!v7)
      {
        uint64_t v8 = v9 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    uint64_t v9 = (uint64_t **)(a1 + 96);
LABEL_8:
    BOOL v11 = (uint64_t *)v9;
    uint64_t v9 = (uint64_t **)operator new(0x30uLL);
    *((_DWORD *)v9 + 8) = a3;
    void v9[5] = 0;
    *uint64_t v9 = 0;
    v9[1] = 0;
    v9[2] = v11;
    uint64_t *v8 = (uint64_t *)v9;
    uint64_t v12 = **(void **)(a1 + 88);
    uint64_t v13 = (uint64_t *)v9;
    if (v12)
    {
      *(void *)(a1 + 88) = v12;
      uint64_t v13 = *v8;
    }
    sub_19E13C8A0(*(uint64_t **)(a1 + 96), v13);
    ++*(void *)(a1 + 104);
  }
  void v9[5] = v6;
  long long v14 = *(void **)(a1 + 216);
  if ((unint64_t)v14 >= *(void *)(a1 + 224))
  {
    __n128 result = sub_19E2602DC(a1 + 208, (long long *)a2);
  }
  else
  {
    uint64_t v15 = *(void *)(a2 + 8);
    *long long v14 = *(void *)a2;
    v14[1] = v15;
    if (v15) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
    }
    __n128 result = v14 + 2;
  }
  *(void *)(a1 + 216) = result;
  return result;
}

uint64_t **sub_19E25DA90(uint64_t a1, int a2)
{
  char v5 = (uint64_t **)(a1 + 96);
  int v4 = *(uint64_t **)(a1 + 96);
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v6 = (uint64_t **)v4;
        int v7 = *((_DWORD *)v4 + 8);
        if (v7 <= a2) {
          break;
        }
        int v4 = *v6;
        char v5 = v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }
      if (v7 >= a2) {
        break;
      }
      int v4 = v6[1];
      if (!v4)
      {
        char v5 = v6 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    uint64_t v6 = (uint64_t **)(a1 + 96);
LABEL_8:
    uint64_t v8 = (uint64_t *)v6;
    uint64_t v6 = (uint64_t **)operator new(0x30uLL);
    *((_DWORD *)v6 + 8) = a2;
    v6[5] = 0;
    *uint64_t v6 = 0;
    v6[1] = 0;
    v6[2] = v8;
    uint64_t *v5 = (uint64_t *)v6;
    uint64_t v9 = **(void **)(a1 + 88);
    int v10 = (uint64_t *)v6;
    if (v9)
    {
      *(void *)(a1 + 88) = v9;
      int v10 = *v5;
    }
    sub_19E13C8A0(*(uint64_t **)(a1 + 96), v10);
    ++*(void *)(a1 + 104);
  }
  return v6 + 5;
}

uint64_t sub_19E25DB5C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void **)(result + 16);
  uint64_t v3 = (void *)(result + 24);
  if (v2 != (void *)(result + 24))
  {
    uint64_t v5 = result;
    do
    {
      __n128 result = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v5 + 336))(v5, a2, *((unsigned int *)v2 + 8));
      uint64_t v6 = (void *)v2[1];
      if (v6)
      {
        do
        {
          int v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          int v7 = (void *)v2[2];
          BOOL v8 = *v7 == (void)v2;
          uint64_t v2 = v7;
        }
        while (!v8);
      }
      uint64_t v2 = v7;
    }
    while (v7 != v3);
  }
  return result;
}

uint64_t sub_19E25DC10(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void **)(result + 40);
  uint64_t v3 = (void *)(result + 48);
  if (v2 != (void *)(result + 48))
  {
    uint64_t v5 = result;
    do
    {
      __n128 result = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v5 + 344))(v5, a2, *((unsigned int *)v2 + 8));
      uint64_t v6 = (void *)v2[1];
      if (v6)
      {
        do
        {
          int v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          int v7 = (void *)v2[2];
          BOOL v8 = *v7 == (void)v2;
          uint64_t v2 = v7;
        }
        while (!v8);
      }
      uint64_t v2 = v7;
    }
    while (v7 != v3);
  }
  return result;
}

uint64_t *sub_19E25DCC4(uint64_t a1, int a2, uint64_t a3)
{
  int v3 = a3;
  __n128 result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 72))(a1, a3);
  int v7 = (int)result;
  uint64_t v9 = (uint64_t **)(a1 + 72);
  BOOL v8 = *(uint64_t **)(a1 + 72);
  if (v8)
  {
    while (1)
    {
      while (1)
      {
        int v10 = (uint64_t **)v8;
        int v11 = *((_DWORD *)v8 + 8);
        if (v11 <= v3) {
          break;
        }
        BOOL v8 = *v10;
        uint64_t v9 = v10;
        if (!*v10) {
          goto LABEL_8;
        }
      }
      if (v11 >= v3) {
        break;
      }
      BOOL v8 = v10[1];
      if (!v8)
      {
        uint64_t v9 = v10 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    int v10 = (uint64_t **)(a1 + 72);
LABEL_8:
    uint64_t v12 = (uint64_t *)v10;
    int v10 = (uint64_t **)operator new(0x30uLL);
    *((_DWORD *)v10 + 8) = v3;
    v10[5] = 0;
    *int v10 = 0;
    v10[1] = 0;
    v10[2] = v12;
    *uint64_t v9 = (uint64_t *)v10;
    uint64_t v13 = **(void **)(a1 + 64);
    long long v14 = (uint64_t *)v10;
    if (v13)
    {
      *(void *)(a1 + 64) = v13;
      long long v14 = *v9;
    }
    __n128 result = sub_19E13C8A0(*(uint64_t **)(a1 + 72), v14);
    ++*(void *)(a1 + 80);
  }
  v10[5] = (uint64_t *)((char *)v10[5] + 4 * v7 * a2);
  return result;
}

uint64_t *sub_19E25DDD0(uint64_t a1, int a2, uint64_t a3)
{
  int v3 = a3;
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a3);
  __n128 result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 240))(a1);
  char v8 = (char)result;
  int v10 = (uint64_t **)(a1 + 96);
  uint64_t v9 = *(uint64_t **)(a1 + 96);
  if (v9)
  {
    while (1)
    {
      while (1)
      {
        int v11 = (uint64_t **)v9;
        int v12 = *((_DWORD *)v9 + 8);
        if (v12 <= v3) {
          break;
        }
        uint64_t v9 = *v11;
        int v10 = v11;
        if (!*v11) {
          goto LABEL_8;
        }
      }
      if (v12 >= v3) {
        break;
      }
      uint64_t v9 = v11[1];
      if (!v9)
      {
        int v10 = v11 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    int v11 = (uint64_t **)(a1 + 96);
LABEL_8:
    uint64_t v13 = (uint64_t *)v11;
    int v11 = (uint64_t **)operator new(0x30uLL);
    *((_DWORD *)v11 + 8) = v3;
    v11[5] = 0;
    uint64_t *v11 = 0;
    v11[1] = 0;
    v11[2] = v13;
    *int v10 = (uint64_t *)v11;
    uint64_t v14 = **(void **)(a1 + 88);
    uint64_t v15 = (uint64_t *)v11;
    if (v14)
    {
      *(void *)(a1 + 88) = v14;
      uint64_t v15 = *v10;
    }
    __n128 result = sub_19E13C8A0(*(uint64_t **)(a1 + 96), v15);
    ++*(void *)(a1 + 104);
  }
  v11[5] = (uint64_t *)((char *)v11[5] + 4 * (v6 << v8) * a2);
  return result;
}

__n128 sub_19E25DF0C(uint64_t a1, uint64_t a2, int a3)
{
  int v7 = (uint64_t **)(a1 + 120);
  int v6 = *(char **)(a1 + 120);
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        char v8 = v6;
        int v9 = *((_DWORD *)v6 + 8);
        if (v9 <= a3) {
          break;
        }
        int v6 = *(char **)v8;
        int v7 = (uint64_t **)v8;
        if (!*(void *)v8) {
          goto LABEL_8;
        }
      }
      if (v9 >= a3) {
        break;
      }
      int v6 = (char *)*((void *)v8 + 1);
      if (!v6)
      {
        int v7 = (uint64_t **)(v8 + 8);
        goto LABEL_8;
      }
    }
  }
  else
  {
    char v8 = (char *)(a1 + 120);
LABEL_8:
    int v10 = v8;
    char v8 = (char *)operator new(0x60uLL);
    *((_DWORD *)v8 + 8) = a3;
    *(_OWORD *)(v8 + 40) = 0u;
    *(_OWORD *)(v8 + 56) = 0u;
    *(_OWORD *)(v8 + 72) = 0u;
    *((void *)v8 + 11) = 0;
    *(void *)char v8 = 0;
    *((void *)v8 + 1) = 0;
    *((void *)v8 + 2) = v10;
    *int v7 = (uint64_t *)v8;
    uint64_t v11 = **(void **)(a1 + 112);
    int v12 = (uint64_t *)v8;
    if (v11)
    {
      *(void *)(a1 + 112) = v11;
      int v12 = *v7;
    }
    sub_19E13C8A0(*(uint64_t **)(a1 + 120), v12);
    ++*(void *)(a1 + 128);
  }
  *((_DWORD *)v8 + 10) = *(_DWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 8);
  long long v14 = *(_OWORD *)(a2 + 24);
  *((void *)v8 + 10) = *(void *)(a2 + 40);
  *((__n128 *)v8 + 3) = result;
  *((_OWORD *)v8 + 4) = v14;
  *((void *)v8 + 11) = *(void *)(a2 + 48);
  return result;
}

__n128 sub_19E25E008(uint64_t a1, uint64_t a2, int a3)
{
  int v7 = (uint64_t **)(a1 + 144);
  int v6 = *(char **)(a1 + 144);
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        char v8 = v6;
        int v9 = *((_DWORD *)v6 + 8);
        if (v9 <= a3) {
          break;
        }
        int v6 = *(char **)v8;
        int v7 = (uint64_t **)v8;
        if (!*(void *)v8) {
          goto LABEL_8;
        }
      }
      if (v9 >= a3) {
        break;
      }
      int v6 = (char *)*((void *)v8 + 1);
      if (!v6)
      {
        int v7 = (uint64_t **)(v8 + 8);
        goto LABEL_8;
      }
    }
  }
  else
  {
    char v8 = (char *)(a1 + 144);
LABEL_8:
    int v10 = v8;
    char v8 = (char *)operator new(0x60uLL);
    *((_DWORD *)v8 + 8) = a3;
    *(_OWORD *)(v8 + 40) = 0u;
    *(_OWORD *)(v8 + 56) = 0u;
    *(_OWORD *)(v8 + 72) = 0u;
    *((void *)v8 + 11) = 0;
    *(void *)char v8 = 0;
    *((void *)v8 + 1) = 0;
    *((void *)v8 + 2) = v10;
    *int v7 = (uint64_t *)v8;
    uint64_t v11 = **(void **)(a1 + 136);
    int v12 = (uint64_t *)v8;
    if (v11)
    {
      *(void *)(a1 + 136) = v11;
      int v12 = *v7;
    }
    sub_19E13C8A0(*(uint64_t **)(a1 + 144), v12);
    ++*(void *)(a1 + 152);
  }
  *((_DWORD *)v8 + 10) = *(_DWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 8);
  long long v14 = *(_OWORD *)(a2 + 24);
  *((void *)v8 + 10) = *(void *)(a2 + 40);
  *((__n128 *)v8 + 3) = result;
  *((_OWORD *)v8 + 4) = v14;
  *((void *)v8 + 11) = *(void *)(a2 + 48);
  return result;
}

void sub_19E25E104(void *a1, uint64_t a2)
{
  uint64_t v5 = (char *)a1[21];
  unint64_t v4 = a1[22];
  int v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(void *)uint64_t v5 = a2;
    uint64_t v7 = (uint64_t)(v5 + 8);
    goto LABEL_23;
  }
  char v8 = (void **)(a1 + 20);
  int v9 = (char *)a1[20];
  uint64_t v10 = (v5 - v9) >> 3;
  unint64_t v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 61) {
    sub_19E13D694();
  }
  uint64_t v12 = v4 - (void)v9;
  if (v12 >> 2 > v11) {
    unint64_t v11 = v12 >> 2;
  }
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v13 = v11;
  }
  if (v13)
  {
    if (v13 >> 61) {
      sub_19E13C418();
    }
    long long v14 = (char *)operator new(8 * v13);
    uint64_t v15 = &v14[8 * v10];
    int v16 = &v14[8 * v13];
    *(void *)uint64_t v15 = a2;
    uint64_t v7 = (uint64_t)(v15 + 8);
    uint64_t v17 = (char *)(v5 - v9);
    if (v5 == v9) {
      goto LABEL_21;
    }
    goto LABEL_14;
  }
  long long v14 = 0;
  uint64_t v15 = (char *)(8 * v10);
  int v16 = 0;
  *(void *)(8 * v10) = a2;
  uint64_t v7 = 8 * v10 + 8;
  uint64_t v17 = (char *)(v5 - v9);
  if (v5 != v9)
  {
LABEL_14:
    unint64_t v18 = (unint64_t)(v17 - 8);
    if (v18 < 0x58) {
      goto LABEL_28;
    }
    if ((unint64_t)(v9 - v14) < 0x20) {
      goto LABEL_28;
    }
    uint64_t v19 = (v18 >> 3) + 1;
    uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
    int v6 = &v5[-v20];
    v15 -= v20;
    int v21 = &v14[8 * v10 - 16];
    char v22 = (long long *)(v5 - 16);
    uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v24 = *v22;
      *((_OWORD *)v21 - 1) = *(v22 - 1);
      *(_OWORD *)int v21 = v24;
      v21 -= 32;
      v22 -= 2;
      v23 -= 4;
    }
    while (v23);
    if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        uint64_t v25 = *((void *)v6 - 1);
        v6 -= 8;
        *((void *)v15 - 1) = v25;
        v15 -= 8;
      }
      while (v6 != v9);
    }
    int v6 = (char *)*v8;
  }
LABEL_21:
  a1[20] = v15;
  a1[21] = v7;
  a1[22] = v16;
  if (v6) {
    operator delete(v6);
  }
LABEL_23:
  a1[21] = v7;
}

char *sub_19E25E288(void *a1, int a2)
{
  unint64_t v4 = operator new(0x20uLL);
  uint64_t v5 = a1[29];
  a1 += 29;
  v4[4] = a2;
  *(void *)unint64_t v4 = v5;
  *((void *)v4 + 1) = a1;
  *(void *)(v5 + 8) = v4;
  *a1 = v4;
  *((void *)v4 + 3) = 0;
  __n128 result = (char *)(v4 + 6);
  ++a1[2];
  return result;
}

uint64_t sub_19E25E2D8()
{
  return 0;
}

uint64_t sub_19E25E2E0(uint64_t a1, long long *a2, uint64_t a3, void *__src)
{
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF0A91A8;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a1 + 24;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 40) = a1 + 48;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 64) = a1 + 72;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 88) = a1 + 96;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 112) = a1 + 120;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  uint64_t v6 = __src[6];
  uint64_t v7 = __src[15];
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 136) = a1 + 144;
  *(void *)(a1 + 192) = v6;
  *(void *)(a1 + 200) = v7;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = a1 + 232;
  *(void *)(a1 + 240) = a1 + 232;
  *(void *)(a1 + 248) = 0;
  uint64_t v8 = a1 + 256;
  if (*((char *)a2 + 23) < 0)
  {
    sub_19E13C2D0((unsigned char *)v8, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v9 = *a2;
    *(void *)(v8 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v8 = v9;
  }
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 0;
  memcpy((void *)(a1 + 312), __src, 0x2C0uLL);
  return a1;
}

void sub_19E25E450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, void **a16)
{
  sub_19E13C44C(v24);
  sub_19E13C4B0(v23);
  long long v26 = *v18;
  if (*v18)
  {
    *(void *)(v17 + 168) = v26;
    operator delete(v26);
  }
  sub_19E13C56C(v22, *v21);
  sub_19E13C56C(a10, *v16);
  sub_19E13C56C(a11, *v20);
  sub_19E13C56C(a12, *v19);
  sub_19E13C56C(a13, *a14);
  sub_19E13C56C(a15, *a16);
  _Unwind_Resume(a1);
}

uint64_t sub_19E25E4C4(uint64_t a1)
{
  *(void *)a1 = &unk_1EF0A91A8;
  uint64_t v2 = *(void **)(a1 + 160);
  int v3 = *(void **)(a1 + 168);
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    ++v2;
  }
  if (*(char *)(a1 + 279) < 0)
  {
    operator delete(*(void **)(a1 + 256));
    if (!*(void *)(a1 + 248)) {
      goto LABEL_12;
    }
  }
  else if (!*(void *)(a1 + 248))
  {
    goto LABEL_12;
  }
  uint64_t v5 = *(void *)(a1 + 232);
  unint64_t v4 = *(uint64_t **)(a1 + 240);
  uint64_t v6 = *v4;
  *(void *)(v6 + 8) = *(void *)(v5 + 8);
  **(void **)(v5 + 8) = v6;
  *(void *)(a1 + 248) = 0;
  if (v4 != (uint64_t *)(a1 + 232))
  {
    do
    {
      uint64_t v7 = (uint64_t *)v4[1];
      operator delete(v4);
      unint64_t v4 = v7;
    }
    while (v7 != (uint64_t *)(a1 + 232));
  }
LABEL_12:
  uint64_t v8 = *(void *)(a1 + 208);
  if (v8)
  {
    uint64_t v9 = *(void *)(a1 + 216);
    uint64_t v10 = *(void **)(a1 + 208);
    if (v9 != v8)
    {
      do
      {
        unint64_t v11 = *(std::__shared_weak_count **)(v9 - 8);
        if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
        v9 -= 16;
      }
      while (v9 != v8);
      uint64_t v10 = *(void **)(a1 + 208);
    }
    *(void *)(a1 + 216) = v8;
    operator delete(v10);
  }
  uint64_t v12 = *(void **)(a1 + 160);
  if (v12)
  {
    *(void *)(a1 + 168) = v12;
    operator delete(v12);
  }
  sub_19E13C56C(a1 + 136, *(void **)(a1 + 144));
  sub_19E13C56C(a1 + 112, *(void **)(a1 + 120));
  sub_19E13C56C(a1 + 88, *(void **)(a1 + 96));
  sub_19E13C56C(a1 + 64, *(void **)(a1 + 72));
  sub_19E13C56C(a1 + 40, *(void **)(a1 + 48));
  sub_19E13C56C(a1 + 16, *(void **)(a1 + 24));
  return a1;
}

void sub_19E25E690(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 208);
  for (uint64_t i = *(void *)(a1 + 216); i != v2; i -= 16)
  {
    unint64_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  *(void *)(a1 + 216) = v2;
}

uint64_t sub_19E25E72C(uint64_t a1)
{
  uint64_t v1 = *(int ***)(a1 + 208);
  uint64_t v2 = *(int ***)(a1 + 216);
  if (v1 == v2) {
    return 0;
  }
  LODWORD(v3) = 0;
  do
  {
    uint64_t v5 = *v1;
    uint64_t v6 = (std::__shared_weak_count *)v1[1];
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      int v4 = *v5;
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    else
    {
      int v4 = *v5;
    }
    uint64_t v3 = (v4 + v3);
    v1 += 2;
  }
  while (v1 != v2);
  return v3;
}

uint64_t sub_19E25E7E8(uint64_t a1)
{
  uint64_t v1 = a1 + 232;
  uint64_t v2 = *(void *)(a1 + 240);
  if (v2 == a1 + 232) {
    return 0;
  }
  LODWORD(result) = 0;
  do
  {
    uint64_t result = (result + *(_DWORD *)(v2 + 16));
    uint64_t v2 = *(void *)(v2 + 8);
  }
  while (v2 != v1);
  return result;
}

void sub_19E25E81C(uint64_t a1@<X0>, char **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *(void **)(a1 + 16);
  uint64_t v3 = (void *)(a1 + 24);
  if (v2 != (void *)(a1 + 24))
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    do
    {
      if (v7 < v6)
      {
        *(_DWORD *)uint64_t v7 = *((_DWORD *)v2 + 8);
        v7 += 4;
        a2[1] = v7;
        uint64_t v8 = (void *)v2[1];
        if (v8) {
          goto LABEL_24;
        }
        goto LABEL_26;
      }
      uint64_t v9 = (v7 - v5) >> 2;
      unint64_t v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 62) {
        sub_19E13D694();
      }
      if ((v6 - v5) >> 1 > v10) {
        unint64_t v10 = (v6 - v5) >> 1;
      }
      if ((unint64_t)(v6 - v5) >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v11 = v10;
      }
      if (v11)
      {
        if (v11 >> 62) {
          sub_19E13C418();
        }
        uint64_t v12 = operator new(4 * v11);
        unint64_t v13 = &v12[4 * v9];
        *(_DWORD *)unint64_t v13 = *((_DWORD *)v2 + 8);
        uint64_t v14 = (uint64_t)(v13 + 4);
        if (v7 == v5) {
          goto LABEL_21;
        }
      }
      else
      {
        uint64_t v12 = 0;
        unint64_t v13 = (char *)(4 * v9);
        *(_DWORD *)(4 * v9) = *((_DWORD *)v2 + 8);
        uint64_t v14 = 4 * v9 + 4;
        if (v7 == v5) {
          goto LABEL_21;
        }
      }
      unint64_t v15 = v7 - 4 - v5;
      if (v15 < 0xBC)
      {
        int v16 = v7;
        goto LABEL_20;
      }
      if (&v12[v7 - v5 - 4 - (v15 & 0xFFFFFFFFFFFFFFFCLL)] > &v12[v7 - v5 - 4])
      {
        int v16 = v7;
        do
        {
LABEL_20:
          int v17 = *((_DWORD *)v16 - 1);
          v16 -= 4;
          *((_DWORD *)v13 - 1) = v17;
          v13 -= 4;
        }
        while (v16 != v5);
        goto LABEL_21;
      }
      if (&v7[-(v15 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v7 - 4)
      {
        int v16 = v7;
        goto LABEL_20;
      }
      if ((unint64_t)(v5 - v12) < 0x20)
      {
        int v16 = v7;
        goto LABEL_20;
      }
      uint64_t v20 = (v15 >> 2) + 1;
      uint64_t v21 = 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
      int v16 = &v7[-v21];
      v13 -= v21;
      uint64_t v22 = &v12[4 * v9 - 16];
      uint64_t v23 = v7 - 16;
      uint64_t v24 = v20 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v25 = *(_OWORD *)v23;
        *(v22 - 1) = *((_OWORD *)v23 - 1);
        _OWORD *v22 = v25;
        v22 -= 2;
        v23 -= 32;
        v24 -= 8;
      }
      while (v24);
      if (v20 != (v20 & 0x7FFFFFFFFFFFFFF8)) {
        goto LABEL_20;
      }
LABEL_21:
      uint64_t v6 = &v12[4 * v11];
      *a2 = v13;
      a2[1] = (char *)v14;
      a2[2] = v6;
      if (v5) {
        operator delete(v5);
      }
      uint64_t v5 = v13;
      uint64_t v7 = (char *)v14;
      a2[1] = (char *)v14;
      uint64_t v8 = (void *)v2[1];
      if (v8)
      {
        do
        {
LABEL_24:
          unint64_t v18 = v8;
          uint64_t v8 = (void *)*v8;
        }
        while (v8);
        goto LABEL_3;
      }
      do
      {
LABEL_26:
        unint64_t v18 = (void *)v2[2];
        BOOL v19 = *v18 == (void)v2;
        uint64_t v2 = v18;
      }
      while (!v19);
LABEL_3:
      uint64_t v2 = v18;
    }
    while (v18 != v3);
  }
}

void sub_19E25EA58(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E25EA78(uint64_t a1@<X0>, char **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *(void **)(a1 + 40);
  uint64_t v3 = (void *)(a1 + 48);
  if (v2 != (void *)(a1 + 48))
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    do
    {
      if (v7 < v6)
      {
        *(_DWORD *)uint64_t v7 = *((_DWORD *)v2 + 8);
        v7 += 4;
        a2[1] = v7;
        uint64_t v8 = (void *)v2[1];
        if (v8) {
          goto LABEL_24;
        }
        goto LABEL_26;
      }
      uint64_t v9 = (v7 - v5) >> 2;
      unint64_t v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 62) {
        sub_19E13D694();
      }
      if ((v6 - v5) >> 1 > v10) {
        unint64_t v10 = (v6 - v5) >> 1;
      }
      if ((unint64_t)(v6 - v5) >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v11 = v10;
      }
      if (v11)
      {
        if (v11 >> 62) {
          sub_19E13C418();
        }
        uint64_t v12 = operator new(4 * v11);
        unint64_t v13 = &v12[4 * v9];
        *(_DWORD *)unint64_t v13 = *((_DWORD *)v2 + 8);
        uint64_t v14 = (uint64_t)(v13 + 4);
        if (v7 == v5) {
          goto LABEL_21;
        }
      }
      else
      {
        uint64_t v12 = 0;
        unint64_t v13 = (char *)(4 * v9);
        *(_DWORD *)(4 * v9) = *((_DWORD *)v2 + 8);
        uint64_t v14 = 4 * v9 + 4;
        if (v7 == v5) {
          goto LABEL_21;
        }
      }
      unint64_t v15 = v7 - 4 - v5;
      if (v15 < 0xBC)
      {
        int v16 = v7;
        goto LABEL_20;
      }
      if (&v12[v7 - v5 - 4 - (v15 & 0xFFFFFFFFFFFFFFFCLL)] > &v12[v7 - v5 - 4])
      {
        int v16 = v7;
        do
        {
LABEL_20:
          int v17 = *((_DWORD *)v16 - 1);
          v16 -= 4;
          *((_DWORD *)v13 - 1) = v17;
          v13 -= 4;
        }
        while (v16 != v5);
        goto LABEL_21;
      }
      if (&v7[-(v15 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v7 - 4)
      {
        int v16 = v7;
        goto LABEL_20;
      }
      if ((unint64_t)(v5 - v12) < 0x20)
      {
        int v16 = v7;
        goto LABEL_20;
      }
      uint64_t v20 = (v15 >> 2) + 1;
      uint64_t v21 = 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
      int v16 = &v7[-v21];
      v13 -= v21;
      uint64_t v22 = &v12[4 * v9 - 16];
      uint64_t v23 = v7 - 16;
      uint64_t v24 = v20 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v25 = *(_OWORD *)v23;
        *(v22 - 1) = *((_OWORD *)v23 - 1);
        _OWORD *v22 = v25;
        v22 -= 2;
        v23 -= 32;
        v24 -= 8;
      }
      while (v24);
      if (v20 != (v20 & 0x7FFFFFFFFFFFFFF8)) {
        goto LABEL_20;
      }
LABEL_21:
      uint64_t v6 = &v12[4 * v11];
      *a2 = v13;
      a2[1] = (char *)v14;
      a2[2] = v6;
      if (v5) {
        operator delete(v5);
      }
      uint64_t v5 = v13;
      uint64_t v7 = (char *)v14;
      a2[1] = (char *)v14;
      uint64_t v8 = (void *)v2[1];
      if (v8)
      {
        do
        {
LABEL_24:
          unint64_t v18 = v8;
          uint64_t v8 = (void *)*v8;
        }
        while (v8);
        goto LABEL_3;
      }
      do
      {
LABEL_26:
        unint64_t v18 = (void *)v2[2];
        BOOL v19 = *v18 == (void)v2;
        uint64_t v2 = v18;
      }
      while (!v19);
LABEL_3:
      uint64_t v2 = v18;
    }
    while (v18 != v3);
  }
}

void sub_19E25ECB4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E25ECD4(uint64_t a1, int a2)
{
  uint64_t v5 = (uint64_t **)(a1 + 24);
  int v4 = *(char **)(a1 + 24);
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v6 = v4;
        int v7 = *((_DWORD *)v4 + 8);
        if (v7 <= a2) {
          break;
        }
        int v4 = *(char **)v6;
        uint64_t v5 = (uint64_t **)v6;
        if (!*(void *)v6) {
          goto LABEL_8;
        }
      }
      if (v7 >= a2) {
        break;
      }
      int v4 = (char *)*((void *)v6 + 1);
      if (!v4)
      {
        uint64_t v5 = (uint64_t **)(v6 + 8);
        goto LABEL_8;
      }
    }
  }
  else
  {
    uint64_t v6 = (char *)(a1 + 24);
LABEL_8:
    uint64_t v8 = v6;
    uint64_t v6 = (char *)operator new(0x50uLL);
    *((_DWORD *)v6 + 8) = a2;
    *(_OWORD *)(v6 + 40) = 0u;
    *(_OWORD *)(v6 + 56) = 0u;
    *((void *)v6 + 9) = 0;
    *(void *)uint64_t v6 = 0;
    *((void *)v6 + 1) = 0;
    *((void *)v6 + 2) = v8;
    char *v5 = (uint64_t *)v6;
    uint64_t v9 = **(void **)(a1 + 16);
    unint64_t v10 = (uint64_t *)v6;
    if (v9)
    {
      *(void *)(a1 + 16) = v9;
      unint64_t v10 = *v5;
    }
    sub_19E13C8A0(*(uint64_t **)(a1 + 24), v10);
    ++*(void *)(a1 + 32);
  }
  return (*((_DWORD *)v6 + 10) * *((_DWORD *)v6 + 12) * *((_DWORD *)v6 + 14));
}

unint64_t sub_19E25EDB8(uint64_t a1, int a2)
{
  uint64_t v5 = (uint64_t **)(a1 + 48);
  int v4 = *(char **)(a1 + 48);
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v6 = v4;
        int v7 = *((_DWORD *)v4 + 8);
        if (v7 <= a2) {
          break;
        }
        int v4 = *(char **)v6;
        uint64_t v5 = (uint64_t **)v6;
        if (!*(void *)v6) {
          goto LABEL_8;
        }
      }
      if (v7 >= a2) {
        break;
      }
      int v4 = (char *)*((void *)v6 + 1);
      if (!v4)
      {
        uint64_t v5 = (uint64_t **)(v6 + 8);
        goto LABEL_8;
      }
    }
  }
  else
  {
    uint64_t v6 = (char *)(a1 + 48);
LABEL_8:
    uint64_t v8 = v6;
    uint64_t v6 = (char *)operator new(0x50uLL);
    *((_DWORD *)v6 + 8) = a2;
    *(_OWORD *)(v6 + 40) = 0u;
    *(_OWORD *)(v6 + 56) = 0u;
    *((void *)v6 + 9) = 0;
    *(void *)uint64_t v6 = 0;
    *((void *)v6 + 1) = 0;
    *((void *)v6 + 2) = v8;
    char *v5 = (uint64_t *)v6;
    uint64_t v9 = **(void **)(a1 + 40);
    unint64_t v10 = (uint64_t *)v6;
    if (v9)
    {
      *(void *)(a1 + 40) = v9;
      unint64_t v10 = *v5;
    }
    sub_19E13C8A0(*(uint64_t **)(a1 + 48), v10);
    ++*(void *)(a1 + 56);
  }
  unint64_t v11 = *((_DWORD *)v6 + 10) * *((_DWORD *)v6 + 12) * *((_DWORD *)v6 + 14);
  return v11 >> (*(uint64_t (**)(uint64_t))(*(void *)a1 + 240))(a1);
}

__n128 sub_19E25EECC(uint64_t a1, uint64_t a2, int a3, char a4)
{
  if (a4)
  {
    uint64_t v7 = *(void *)(a2 + 24);
    uint64_t v9 = (uint64_t **)(a1 + 24);
    uint64_t v8 = *(char **)(a1 + 24);
    unint64_t v10 = (uint64_t **)(a1 + 24);
    unint64_t v11 = (char *)(a1 + 24);
    if (v8)
    {
      uint64_t v12 = *(char **)(a1 + 24);
      while (1)
      {
        while (1)
        {
          unint64_t v11 = v12;
          int v13 = *((_DWORD *)v12 + 8);
          if (v13 <= a3) {
            break;
          }
          uint64_t v12 = *(char **)v11;
          unint64_t v10 = (uint64_t **)v11;
          if (!*(void *)v11) {
            goto LABEL_9;
          }
        }
        if (v13 >= a3) {
          break;
        }
        uint64_t v12 = (char *)*((void *)v11 + 1);
        if (!v12)
        {
          unint64_t v10 = (uint64_t **)(v11 + 8);
          goto LABEL_9;
        }
      }
    }
    else
    {
LABEL_9:
      uint64_t v14 = v11;
      unint64_t v11 = (char *)operator new(0x50uLL);
      *((_DWORD *)v11 + 8) = a3;
      *(_OWORD *)(v11 + 40) = 0u;
      *(_OWORD *)(v11 + 56) = 0u;
      *((void *)v11 + 9) = 0;
      *(void *)unint64_t v11 = 0;
      *((void *)v11 + 1) = 0;
      *((void *)v11 + 2) = v14;
      *unint64_t v10 = (uint64_t *)v11;
      uint64_t v15 = **(void **)(a1 + 16);
      int v16 = (uint64_t *)v11;
      if (v15)
      {
        *(void *)(a1 + 16) = v15;
        int v16 = *v10;
      }
      sub_19E13C8A0(*(uint64_t **)(a1 + 24), v16);
      uint64_t v8 = *(char **)(a1 + 24);
      ++*(void *)(a1 + 32);
    }
    *((void *)v11 + 8) = v7;
    uint64_t v18 = *(void *)(a2 + 32);
    BOOL v19 = (char *)(a1 + 24);
    if (v8)
    {
      while (1)
      {
        while (1)
        {
          BOOL v19 = v8;
          int v20 = *((_DWORD *)v8 + 8);
          if (v20 <= a3) {
            break;
          }
          uint64_t v8 = *(char **)v19;
          uint64_t v9 = (uint64_t **)v19;
          if (!*(void *)v19) {
            goto LABEL_19;
          }
        }
        if (v20 >= a3) {
          break;
        }
        uint64_t v8 = (char *)*((void *)v19 + 1);
        if (!v8)
        {
          uint64_t v9 = (uint64_t **)(v19 + 8);
          goto LABEL_19;
        }
      }
    }
    else
    {
LABEL_19:
      uint64_t v21 = v19;
      BOOL v19 = (char *)operator new(0x50uLL);
      *((_DWORD *)v19 + 8) = a3;
      *(_OWORD *)(v19 + 40) = 0u;
      *(_OWORD *)(v19 + 56) = 0u;
      *((void *)v19 + 9) = 0;
      *(void *)BOOL v19 = 0;
      *((void *)v19 + 1) = 0;
      *((void *)v19 + 2) = v21;
      *uint64_t v9 = (uint64_t *)v19;
      uint64_t v22 = **(void **)(a1 + 16);
      uint64_t v23 = (uint64_t *)v19;
      if (v22)
      {
        *(void *)(a1 + 16) = v22;
        uint64_t v23 = *v9;
      }
      sub_19E13C8A0(*(uint64_t **)(a1 + 24), v23);
      ++*(void *)(a1 + 32);
    }
    *((void *)v19 + 9) = v18;
  }
  else
  {
    long long v25 = (uint64_t **)(a1 + 24);
    uint64_t v24 = *(char **)(a1 + 24);
    if (v24)
    {
      while (1)
      {
        while (1)
        {
          long long v26 = v24;
          int v27 = *((_DWORD *)v24 + 8);
          if (v27 <= a3) {
            break;
          }
          uint64_t v24 = *(char **)v26;
          long long v25 = (uint64_t **)v26;
          if (!*(void *)v26) {
            goto LABEL_30;
          }
        }
        if (v27 >= a3) {
          break;
        }
        uint64_t v24 = (char *)*((void *)v26 + 1);
        if (!v24)
        {
          long long v25 = (uint64_t **)(v26 + 8);
          goto LABEL_30;
        }
      }
    }
    else
    {
      long long v26 = (char *)(a1 + 24);
LABEL_30:
      char v28 = v26;
      long long v26 = (char *)operator new(0x50uLL);
      *((_DWORD *)v26 + 8) = a3;
      *(_OWORD *)(v26 + 40) = 0u;
      *(_OWORD *)(v26 + 56) = 0u;
      *((void *)v26 + 9) = 0;
      *(void *)long long v26 = 0;
      *((void *)v26 + 1) = 0;
      *((void *)v26 + 2) = v28;
      char *v25 = (uint64_t *)v26;
      uint64_t v29 = **(void **)(a1 + 16);
      int v30 = (uint64_t *)v26;
      if (v29)
      {
        *(void *)(a1 + 16) = v29;
        int v30 = *v25;
      }
      sub_19E13C8A0(*(uint64_t **)(a1 + 24), v30);
      ++*(void *)(a1 + 32);
    }
    __n128 result = *(__n128 *)a2;
    long long v31 = *(_OWORD *)(a2 + 16);
    *((void *)v26 + 9) = *(void *)(a2 + 32);
    *(_OWORD *)(v26 + 56) = v31;
    *(__n128 *)(v26 + 40) = result;
  }
  return result;
}

__n128 sub_19E25F120(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v7 = (uint64_t **)(a1 + 48);
  uint64_t v6 = *(char **)(a1 + 48);
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v8 = v6;
        int v9 = *((_DWORD *)v6 + 8);
        if (v9 <= a3) {
          break;
        }
        uint64_t v6 = *(char **)v8;
        uint64_t v7 = (uint64_t **)v8;
        if (!*(void *)v8) {
          goto LABEL_8;
        }
      }
      if (v9 >= a3) {
        break;
      }
      uint64_t v6 = (char *)*((void *)v8 + 1);
      if (!v6)
      {
        uint64_t v7 = (uint64_t **)(v8 + 8);
        goto LABEL_8;
      }
    }
  }
  else
  {
    uint64_t v8 = (char *)(a1 + 48);
LABEL_8:
    unint64_t v10 = v8;
    uint64_t v8 = (char *)operator new(0x50uLL);
    *((_DWORD *)v8 + 8) = a3;
    *(_OWORD *)(v8 + 40) = 0u;
    *(_OWORD *)(v8 + 56) = 0u;
    *((void *)v8 + 9) = 0;
    *(void *)uint64_t v8 = 0;
    *((void *)v8 + 1) = 0;
    *((void *)v8 + 2) = v10;
    *uint64_t v7 = (uint64_t *)v8;
    uint64_t v11 = **(void **)(a1 + 40);
    uint64_t v12 = (uint64_t *)v8;
    if (v11)
    {
      *(void *)(a1 + 40) = v11;
      uint64_t v12 = *v7;
    }
    sub_19E13C8A0(*(uint64_t **)(a1 + 48), v12);
    ++*(void *)(a1 + 56);
  }
  __n128 result = *(__n128 *)a2;
  long long v14 = *(_OWORD *)(a2 + 16);
  *((void *)v8 + 9) = *(void *)(a2 + 32);
  *(_OWORD *)(v8 + 56) = v14;
  *(__n128 *)(v8 + 40) = result;
  return result;
}

uint64_t sub_19E25F208(void *a1)
{
  if (a1[24] == 1) {
    int v2 = 1;
  }
  else {
    int v2 = (*(uint64_t (**)(void *))(*a1 + 72))(a1);
  }
  return (*(unsigned int (**)(void *))(*a1 + 88))(a1) * v2;
}

uint64_t sub_19E25F2A4(uint64_t a1)
{
  int v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 80))(a1);
  int v3 = v2 << (*(uint64_t (**)(uint64_t))(*(void *)a1 + 240))(a1);
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 88))(a1) * v3;
}

uint64_t sub_19E25F344()
{
  return 4;
}

uint64_t sub_19E25F34C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 280);
}

uint64_t sub_19E25F354(uint64_t a1)
{
  return *(void *)(a1 + 192);
}

uint64_t sub_19E25F35C(uint64_t a1)
{
  return *(void *)(a1 + 200);
}

uint64_t sub_19E25F364(uint64_t a1)
{
  return *(void *)(a1 + 312);
}

uint64_t sub_19E25F36C(uint64_t a1)
{
  return *(void *)(a1 + 184);
}

uint64_t sub_19E25F374(uint64_t result, uint64_t a2)
{
  *(void *)(result + 184) = a2;
  return result;
}

double sub_19E25F37C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(void *)(a1 + 284) = *(void *)(*a2 + 56);
  double result = *(double *)(v2 + 48);
  *(double *)(a1 + 292) = result;
  return result;
}

void *sub_19E25F398@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return memcpy(a2, (const void *)(a1 + 312), 0x2C0uLL);
}

__n128 sub_19E25F3A8@<Q0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (uint64_t **)(a1 + 24);
  uint64_t v5 = *(uint64_t **)(a1 + 24);
  if (!v5) {
    goto LABEL_11;
  }
  int v7 = a2;
  uint64_t v8 = a1 + 24;
  uint64_t v9 = *(void *)(a1 + 24);
  do
  {
    int v10 = *(_DWORD *)(v9 + 32);
    BOOL v11 = v10 < a2;
    if (v10 >= a2) {
      uint64_t v12 = (uint64_t *)v9;
    }
    else {
      uint64_t v12 = (uint64_t *)(v9 + 8);
    }
    if (!v11) {
      uint64_t v8 = v9;
    }
    uint64_t v9 = *v12;
  }
  while (*v12);
  if ((uint64_t **)v8 != v6 && *(_DWORD *)(v8 + 32) <= a2)
  {
    while (1)
    {
LABEL_28:
      while (1)
      {
        int v20 = (uint64_t **)v5;
        int v21 = *((_DWORD *)v5 + 8);
        if (v7 >= v21) {
          break;
        }
        uint64_t v5 = *v20;
        uint64_t v6 = v20;
        if (!*v20) {
          goto LABEL_32;
        }
      }
      if (v21 >= v7) {
        break;
      }
      uint64_t v5 = v20[1];
      if (!v5)
      {
        uint64_t v6 = v20 + 1;
        goto LABEL_32;
      }
    }
    uint64_t v22 = (char *)v20;
  }
  else
  {
LABEL_11:
    sub_19E25D0BC("input shape not found at port ");
    int v13 = *v6;
    long long v14 = v6;
    uint64_t v15 = v6;
    if (*v6)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v15 = (uint64_t **)v13;
          int v16 = *((_DWORD *)v13 + 8);
          if (a2 >= v16) {
            break;
          }
          int v13 = *v15;
          long long v14 = v15;
          if (!*v15) {
            goto LABEL_18;
          }
        }
        if (v16 >= a2) {
          break;
        }
        int v13 = v15[1];
        if (!v13)
        {
          long long v14 = v15 + 1;
          goto LABEL_18;
        }
      }
      int v17 = (char *)v15;
    }
    else
    {
LABEL_18:
      int v17 = (char *)operator new(0x50uLL);
      *((_DWORD *)v17 + 8) = a2;
      *(_OWORD *)(v17 + 40) = 0u;
      *(_OWORD *)(v17 + 56) = 0u;
      *((void *)v17 + 9) = 0;
      *(void *)int v17 = 0;
      *((void *)v17 + 1) = 0;
      *((void *)v17 + 2) = v15;
      *long long v14 = (uint64_t *)v17;
      uint64_t v18 = **(void **)(a1 + 16);
      BOOL v19 = (uint64_t *)v17;
      if (v18)
      {
        *(void *)(a1 + 16) = v18;
        BOOL v19 = *v14;
      }
      sub_19E13C8A0(*(uint64_t **)(a1 + 24), v19);
      ++*(void *)(a1 + 32);
    }
    *(_OWORD *)(v17 + 40) = 0u;
    *(_OWORD *)(v17 + 56) = 0u;
    *((void *)v17 + 9) = 0;
    if (v28 < 0)
    {
      operator delete(__p);
      uint64_t v5 = *v6;
      int v7 = a2;
      int v20 = v6;
      if (*v6) {
        goto LABEL_28;
      }
    }
    else
    {
      uint64_t v5 = *v6;
      int v7 = a2;
      int v20 = v6;
      if (*v6) {
        goto LABEL_28;
      }
    }
LABEL_32:
    uint64_t v22 = (char *)operator new(0x50uLL);
    *((_DWORD *)v22 + 8) = v7;
    *(_OWORD *)(v22 + 40) = 0u;
    *(_OWORD *)(v22 + 56) = 0u;
    *((void *)v22 + 9) = 0;
    *(void *)uint64_t v22 = 0;
    *((void *)v22 + 1) = 0;
    *((void *)v22 + 2) = v20;
    *uint64_t v6 = (uint64_t *)v22;
    uint64_t v23 = **(void **)(a1 + 16);
    uint64_t v24 = (uint64_t *)v22;
    if (v23)
    {
      *(void *)(a1 + 16) = v23;
      uint64_t v24 = *v6;
    }
    sub_19E13C8A0(*(uint64_t **)(a1 + 24), v24);
    ++*(void *)(a1 + 32);
  }
  __n128 result = *(__n128 *)(v22 + 40);
  long long v26 = *(_OWORD *)(v22 + 56);
  *(void *)(a3 + 32) = *((void *)v22 + 9);
  *(__n128 *)a3 = result;
  *(_OWORD *)(a3 + 16) = v26;
  return result;
}

void sub_19E25F628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_19E25F650@<Q0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (uint64_t **)(a1 + 48);
  uint64_t v5 = *(uint64_t **)(a1 + 48);
  if (!v5) {
    goto LABEL_11;
  }
  int v7 = a2;
  uint64_t v8 = a1 + 48;
  uint64_t v9 = *(void *)(a1 + 48);
  do
  {
    int v10 = *(_DWORD *)(v9 + 32);
    BOOL v11 = v10 < a2;
    if (v10 >= a2) {
      uint64_t v12 = (uint64_t *)v9;
    }
    else {
      uint64_t v12 = (uint64_t *)(v9 + 8);
    }
    if (!v11) {
      uint64_t v8 = v9;
    }
    uint64_t v9 = *v12;
  }
  while (*v12);
  if ((uint64_t **)v8 == v6 || *(_DWORD *)(v8 + 32) > a2)
  {
LABEL_11:
    sub_19E25D0BC("output shape not found at port ");
    int v13 = sub_19E26EDD8();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      sub_19E32F738();
      if ((v22 & 0x80000000) == 0)
      {
LABEL_13:
        uint64_t v5 = *v6;
        int v7 = a2;
        long long v14 = (char *)v6;
        if (*v6) {
          goto LABEL_19;
        }
LABEL_23:
        int v16 = v14;
        long long v14 = (char *)operator new(0x50uLL);
        *((_DWORD *)v14 + 8) = v7;
        *(_OWORD *)(v14 + 40) = 0u;
        *(_OWORD *)(v14 + 56) = 0u;
        *((void *)v14 + 9) = 0;
        *(void *)long long v14 = 0;
        *((void *)v14 + 1) = 0;
        *((void *)v14 + 2) = v16;
        *uint64_t v6 = (uint64_t *)v14;
        uint64_t v17 = **(void **)(a1 + 40);
        uint64_t v18 = (uint64_t *)v14;
        if (v17)
        {
          *(void *)(a1 + 40) = v17;
          uint64_t v18 = *v6;
        }
        sub_19E13C8A0(*(uint64_t **)(a1 + 48), v18);
        ++*(void *)(a1 + 56);
        goto LABEL_26;
      }
    }
    else if ((v22 & 0x80000000) == 0)
    {
      goto LABEL_13;
    }
    operator delete(__p);
    uint64_t v5 = *v6;
    int v7 = a2;
    long long v14 = (char *)v6;
    if (*v6) {
      goto LABEL_19;
    }
    goto LABEL_23;
  }
  while (1)
  {
LABEL_19:
    while (1)
    {
      long long v14 = (char *)v5;
      int v15 = *((_DWORD *)v5 + 8);
      if (v7 >= v15) {
        break;
      }
      uint64_t v5 = *(uint64_t **)v14;
      uint64_t v6 = (uint64_t **)v14;
      if (!*(void *)v14) {
        goto LABEL_23;
      }
    }
    if (v15 >= v7) {
      break;
    }
    uint64_t v5 = (uint64_t *)*((void *)v14 + 1);
    if (!v5)
    {
      uint64_t v6 = (uint64_t **)(v14 + 8);
      goto LABEL_23;
    }
  }
LABEL_26:
  __n128 result = *(__n128 *)(v14 + 40);
  long long v20 = *(_OWORD *)(v14 + 56);
  *(void *)(a3 + 32) = *((void *)v14 + 9);
  *(__n128 *)a3 = result;
  *(_OWORD *)(a3 + 16) = v20;
  return result;
}

void sub_19E25F7F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E25F814(uint64_t a1, int a2)
{
  uint64_t v5 = (uint64_t **)(a1 + 24);
  int v4 = *(char **)(a1 + 24);
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v6 = v4;
        int v7 = *((_DWORD *)v4 + 8);
        if (v7 <= a2) {
          break;
        }
        int v4 = *(char **)v6;
        uint64_t v5 = (uint64_t **)v6;
        if (!*(void *)v6) {
          goto LABEL_8;
        }
      }
      if (v7 >= a2) {
        break;
      }
      int v4 = (char *)*((void *)v6 + 1);
      if (!v4)
      {
        uint64_t v5 = (uint64_t **)(v6 + 8);
        goto LABEL_8;
      }
    }
  }
  else
  {
    uint64_t v6 = (char *)(a1 + 24);
LABEL_8:
    uint64_t v8 = v6;
    uint64_t v6 = (char *)operator new(0x50uLL);
    *((_DWORD *)v6 + 8) = a2;
    *(_OWORD *)(v6 + 40) = 0u;
    *(_OWORD *)(v6 + 56) = 0u;
    *((void *)v6 + 9) = 0;
    *(void *)uint64_t v6 = 0;
    *((void *)v6 + 1) = 0;
    *((void *)v6 + 2) = v8;
    uint64_t *v5 = (uint64_t *)v6;
    uint64_t v9 = **(void **)(a1 + 16);
    int v10 = (uint64_t *)v6;
    if (v9)
    {
      *(void *)(a1 + 16) = v9;
      int v10 = *v5;
    }
    sub_19E13C8A0(*(uint64_t **)(a1 + 24), v10);
    ++*(void *)(a1 + 32);
  }
  return *((unsigned int *)v6 + 18);
}

uint64_t sub_19E25F8E8(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 16) + 64);
}

char *sub_19E25F8F4@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[279] < 0) {
    return (char *)sub_19E13C2D0((unsigned char *)a2, *((void **)result + 32), *((void *)result + 33));
  }
  *(_OWORD *)a2 = *((_OWORD *)result + 16);
  *(void *)(a2 + 16) = *((void *)result + 34);
  return result;
}

uint64_t sub_19E25F920(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = a2;
  *(_DWORD *)(a1 + 280) = a3;
  uint64_t v6 = a1 + 232;
  if (*(void *)(a1 + 240) != a1 + 232) {
    sub_19E30A40C();
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 312))(a1, a3, a2);
  if (v4 >= 1)
  {
    do
    {
      BOOL v11 = *(uint64_t **)(a1 + 160);
      uint64_t v12 = *(uint64_t **)(a1 + 168);
      while (v11 != v12)
      {
        uint64_t v13 = *v11++;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, a3);
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 320))(a1, a3);
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 328))(a1, a3);
    }
    while (v4-- > 1);
  }
  for (uint64_t i = *(void *)(a1 + 240); i != v6; uint64_t i = *(void *)(i + 8))
  {
    sub_19E30A424(*(void *)(a1 + 8), *(_DWORD *)(i + 16) * a3, *(void **)(i + 24));
    *(void *)(i + 24) = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 32);

  return v8(a1);
}

_OWORD *sub_19E25FAF8(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = *(uint64_t **)(*(void *)a2 + 8);
  uint64_t v8 = (uint64_t **)(a1 + 72);
  int v7 = *(uint64_t **)(a1 + 72);
  if (v7)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v7;
        int v10 = *((_DWORD *)v7 + 8);
        if (v10 <= a3) {
          break;
        }
        int v7 = *v9;
        uint64_t v8 = v9;
        if (!*v9) {
          goto LABEL_8;
        }
      }
      if (v10 >= a3) {
        break;
      }
      int v7 = v9[1];
      if (!v7)
      {
        uint64_t v8 = v9 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    uint64_t v9 = (uint64_t **)(a1 + 72);
LABEL_8:
    BOOL v11 = (uint64_t *)v9;
    uint64_t v9 = (uint64_t **)operator new(0x30uLL);
    *((_DWORD *)v9 + 8) = a3;
    void v9[5] = 0;
    *uint64_t v9 = 0;
    v9[1] = 0;
    v9[2] = v11;
    char *v8 = (uint64_t *)v9;
    uint64_t v12 = **(void **)(a1 + 64);
    uint64_t v13 = (uint64_t *)v9;
    if (v12)
    {
      *(void *)(a1 + 64) = v12;
      uint64_t v13 = *v8;
    }
    sub_19E13C8A0(*(uint64_t **)(a1 + 72), v13);
    ++*(void *)(a1 + 80);
  }
  void v9[5] = v6;
  long long v14 = *(void **)(a1 + 216);
  if ((unint64_t)v14 >= *(void *)(a1 + 224))
  {
    __n128 result = sub_19E2602DC(a1 + 208, (long long *)a2);
  }
  else
  {
    uint64_t v15 = *(void *)(a2 + 8);
    *long long v14 = *(void *)a2;
    v14[1] = v15;
    if (v15) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
    }
    __n128 result = v14 + 2;
  }
  *(void *)(a1 + 216) = result;
  return result;
}

_OWORD *sub_19E25FC10(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = *(uint64_t **)(*(void *)a2 + 8);
  uint64_t v8 = (uint64_t **)(a1 + 96);
  int v7 = *(uint64_t **)(a1 + 96);
  if (v7)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v7;
        int v10 = *((_DWORD *)v7 + 8);
        if (v10 <= a3) {
          break;
        }
        int v7 = *v9;
        uint64_t v8 = v9;
        if (!*v9) {
          goto LABEL_8;
        }
      }
      if (v10 >= a3) {
        break;
      }
      int v7 = v9[1];
      if (!v7)
      {
        uint64_t v8 = v9 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    uint64_t v9 = (uint64_t **)(a1 + 96);
LABEL_8:
    BOOL v11 = (uint64_t *)v9;
    uint64_t v9 = (uint64_t **)operator new(0x30uLL);
    *((_DWORD *)v9 + 8) = a3;
    void v9[5] = 0;
    *uint64_t v9 = 0;
    v9[1] = 0;
    v9[2] = v11;
    char *v8 = (uint64_t *)v9;
    uint64_t v12 = **(void **)(a1 + 88);
    uint64_t v13 = (uint64_t *)v9;
    if (v12)
    {
      *(void *)(a1 + 88) = v12;
      uint64_t v13 = *v8;
    }
    sub_19E13C8A0(*(uint64_t **)(a1 + 96), v13);
    ++*(void *)(a1 + 104);
  }
  void v9[5] = v6;
  long long v14 = *(void **)(a1 + 216);
  if ((unint64_t)v14 >= *(void *)(a1 + 224))
  {
    __n128 result = sub_19E2602DC(a1 + 208, (long long *)a2);
  }
  else
  {
    uint64_t v15 = *(void *)(a2 + 8);
    *long long v14 = *(void *)a2;
    v14[1] = v15;
    if (v15) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
    }
    __n128 result = v14 + 2;
  }
  *(void *)(a1 + 216) = result;
  return result;
}

uint64_t sub_19E25FD2C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void **)(result + 16);
  int v3 = (void *)(result + 24);
  if (v2 != (void *)(result + 24))
  {
    uint64_t v5 = result;
    do
    {
      __n128 result = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v5 + 336))(v5, a2, *((unsigned int *)v2 + 8));
      uint64_t v6 = (void *)v2[1];
      if (v6)
      {
        do
        {
          int v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          int v7 = (void *)v2[2];
          BOOL v8 = *v7 == (void)v2;
          uint64_t v2 = v7;
        }
        while (!v8);
      }
      uint64_t v2 = v7;
    }
    while (v7 != v3);
  }
  return result;
}

uint64_t sub_19E25FDE0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void **)(result + 40);
  int v3 = (void *)(result + 48);
  if (v2 != (void *)(result + 48))
  {
    uint64_t v5 = result;
    do
    {
      __n128 result = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v5 + 344))(v5, a2, *((unsigned int *)v2 + 8));
      uint64_t v6 = (void *)v2[1];
      if (v6)
      {
        do
        {
          int v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          int v7 = (void *)v2[2];
          BOOL v8 = *v7 == (void)v2;
          uint64_t v2 = v7;
        }
        while (!v8);
      }
      uint64_t v2 = v7;
    }
    while (v7 != v3);
  }
  return result;
}

uint64_t *sub_19E25FE94(uint64_t a1, int a2, uint64_t a3)
{
  int v3 = a3;
  __n128 result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 72))(a1, a3);
  int v7 = (int)result;
  uint64_t v9 = (uint64_t **)(a1 + 72);
  BOOL v8 = *(uint64_t **)(a1 + 72);
  if (v8)
  {
    while (1)
    {
      while (1)
      {
        int v10 = (uint64_t **)v8;
        int v11 = *((_DWORD *)v8 + 8);
        if (v11 <= v3) {
          break;
        }
        BOOL v8 = *v10;
        uint64_t v9 = v10;
        if (!*v10) {
          goto LABEL_8;
        }
      }
      if (v11 >= v3) {
        break;
      }
      BOOL v8 = v10[1];
      if (!v8)
      {
        uint64_t v9 = v10 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    int v10 = (uint64_t **)(a1 + 72);
LABEL_8:
    uint64_t v12 = (uint64_t *)v10;
    int v10 = (uint64_t **)operator new(0x30uLL);
    *((_DWORD *)v10 + 8) = v3;
    v10[5] = 0;
    *int v10 = 0;
    v10[1] = 0;
    v10[2] = v12;
    *uint64_t v9 = (uint64_t *)v10;
    uint64_t v13 = **(void **)(a1 + 64);
    long long v14 = (uint64_t *)v10;
    if (v13)
    {
      *(void *)(a1 + 64) = v13;
      long long v14 = *v9;
    }
    __n128 result = sub_19E13C8A0(*(uint64_t **)(a1 + 72), v14);
    ++*(void *)(a1 + 80);
  }
  v10[5] = (uint64_t *)((char *)v10[5] + 4 * v7 * a2);
  return result;
}

uint64_t *sub_19E25FFA0(uint64_t a1, int a2, uint64_t a3)
{
  int v3 = a3;
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a3);
  __n128 result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 240))(a1);
  char v8 = (char)result;
  int v10 = (uint64_t **)(a1 + 96);
  uint64_t v9 = *(uint64_t **)(a1 + 96);
  if (v9)
  {
    while (1)
    {
      while (1)
      {
        int v11 = (uint64_t **)v9;
        int v12 = *((_DWORD *)v9 + 8);
        if (v12 <= v3) {
          break;
        }
        uint64_t v9 = *v11;
        int v10 = v11;
        if (!*v11) {
          goto LABEL_8;
        }
      }
      if (v12 >= v3) {
        break;
      }
      uint64_t v9 = v11[1];
      if (!v9)
      {
        int v10 = v11 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    int v11 = (uint64_t **)(a1 + 96);
LABEL_8:
    uint64_t v13 = (uint64_t *)v11;
    int v11 = (uint64_t **)operator new(0x30uLL);
    *((_DWORD *)v11 + 8) = v3;
    v11[5] = 0;
    uint64_t *v11 = 0;
    v11[1] = 0;
    v11[2] = v13;
    *int v10 = (uint64_t *)v11;
    uint64_t v14 = **(void **)(a1 + 88);
    uint64_t v15 = (uint64_t *)v11;
    if (v14)
    {
      *(void *)(a1 + 88) = v14;
      uint64_t v15 = *v10;
    }
    __n128 result = sub_19E13C8A0(*(uint64_t **)(a1 + 96), v15);
    ++*(void *)(a1 + 104);
  }
  v11[5] = (uint64_t *)((char *)v11[5] + 4 * (v6 << v8) * a2);
  return result;
}

__n128 sub_19E2600DC(uint64_t a1, uint64_t a2, int a3)
{
  int v7 = (uint64_t **)(a1 + 120);
  int v6 = *(char **)(a1 + 120);
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        char v8 = v6;
        int v9 = *((_DWORD *)v6 + 8);
        if (v9 <= a3) {
          break;
        }
        int v6 = *(char **)v8;
        int v7 = (uint64_t **)v8;
        if (!*(void *)v8) {
          goto LABEL_8;
        }
      }
      if (v9 >= a3) {
        break;
      }
      int v6 = (char *)*((void *)v8 + 1);
      if (!v6)
      {
        int v7 = (uint64_t **)(v8 + 8);
        goto LABEL_8;
      }
    }
  }
  else
  {
    char v8 = (char *)(a1 + 120);
LABEL_8:
    int v10 = v8;
    char v8 = (char *)operator new(0x60uLL);
    *((_DWORD *)v8 + 8) = a3;
    *(_OWORD *)(v8 + 40) = 0u;
    *(_OWORD *)(v8 + 56) = 0u;
    *(_OWORD *)(v8 + 72) = 0u;
    *((void *)v8 + 11) = 0;
    *(void *)char v8 = 0;
    *((void *)v8 + 1) = 0;
    *((void *)v8 + 2) = v10;
    *int v7 = (uint64_t *)v8;
    uint64_t v11 = **(void **)(a1 + 112);
    int v12 = (uint64_t *)v8;
    if (v11)
    {
      *(void *)(a1 + 112) = v11;
      int v12 = *v7;
    }
    sub_19E13C8A0(*(uint64_t **)(a1 + 120), v12);
    ++*(void *)(a1 + 128);
  }
  *((_DWORD *)v8 + 10) = *(_DWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 8);
  long long v14 = *(_OWORD *)(a2 + 24);
  *((void *)v8 + 10) = *(void *)(a2 + 40);
  *((__n128 *)v8 + 3) = result;
  *((_OWORD *)v8 + 4) = v14;
  *((void *)v8 + 11) = *(void *)(a2 + 48);
  return result;
}

__n128 sub_19E2601D8(uint64_t a1, uint64_t a2, int a3)
{
  int v7 = (uint64_t **)(a1 + 144);
  int v6 = *(char **)(a1 + 144);
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        char v8 = v6;
        int v9 = *((_DWORD *)v6 + 8);
        if (v9 <= a3) {
          break;
        }
        int v6 = *(char **)v8;
        int v7 = (uint64_t **)v8;
        if (!*(void *)v8) {
          goto LABEL_8;
        }
      }
      if (v9 >= a3) {
        break;
      }
      int v6 = (char *)*((void *)v8 + 1);
      if (!v6)
      {
        int v7 = (uint64_t **)(v8 + 8);
        goto LABEL_8;
      }
    }
  }
  else
  {
    char v8 = (char *)(a1 + 144);
LABEL_8:
    int v10 = v8;
    char v8 = (char *)operator new(0x60uLL);
    *((_DWORD *)v8 + 8) = a3;
    *(_OWORD *)(v8 + 40) = 0u;
    *(_OWORD *)(v8 + 56) = 0u;
    *(_OWORD *)(v8 + 72) = 0u;
    *((void *)v8 + 11) = 0;
    *(void *)char v8 = 0;
    *((void *)v8 + 1) = 0;
    *((void *)v8 + 2) = v10;
    *int v7 = (uint64_t *)v8;
    uint64_t v11 = **(void **)(a1 + 136);
    int v12 = (uint64_t *)v8;
    if (v11)
    {
      *(void *)(a1 + 136) = v11;
      int v12 = *v7;
    }
    sub_19E13C8A0(*(uint64_t **)(a1 + 144), v12);
    ++*(void *)(a1 + 152);
  }
  *((_DWORD *)v8 + 10) = *(_DWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 8);
  long long v14 = *(_OWORD *)(a2 + 24);
  *((void *)v8 + 10) = *(void *)(a2 + 40);
  *((__n128 *)v8 + 3) = result;
  *((_OWORD *)v8 + 4) = v14;
  *((void *)v8 + 11) = *(void *)(a2 + 48);
  return result;
}

uint64_t sub_19E2602D4()
{
  return 0;
}

_OWORD *sub_19E2602DC(uint64_t a1, long long *a2)
{
  int v3 = *(void **)a1;
  int v4 = *(void **)(a1 + 8);
  uint64_t v5 = ((uint64_t)v4 - *(void *)a1) >> 4;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60) {
    sub_19E13D694();
  }
  uint64_t v7 = *(void *)(a1 + 16) - (void)v3;
  if (v7 >> 3 > v6) {
    unint64_t v6 = v7 >> 3;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v6 = 0xFFFFFFFFFFFFFFFLL;
  }
  if (v6 >> 60) {
    sub_19E13C418();
  }
  uint64_t v9 = 16 * v6;
  int v10 = (char *)operator new(16 * v6);
  uint64_t v11 = &v10[16 * v5];
  long long v12 = *a2;
  *(_OWORD *)uint64_t v11 = *a2;
  if (*((void *)&v12 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v12 + 1) + 8), 1uLL, memory_order_relaxed);
    int v3 = *(void **)a1;
    int v4 = *(void **)(a1 + 8);
  }
  uint64_t v13 = &v10[v9];
  long long v14 = v11 + 16;
  if (v4 == v3)
  {
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v14;
    *(void *)(a1 + 16) = v13;
    if (!v3) {
      return v14;
    }
    goto LABEL_19;
  }
  do
  {
    long long v15 = *((_OWORD *)v4 - 1);
    v4 -= 2;
    *((_OWORD *)v11 - 1) = v15;
    v11 -= 16;
    *int v4 = 0;
    v4[1] = 0;
  }
  while (v4 != v3);
  int v16 = *(void **)a1;
  int v3 = *(void **)(a1 + 8);
  *(void *)a1 = v11;
  *(void *)(a1 + 8) = v14;
  *(void *)(a1 + 16) = v13;
  if (v3 != v16)
  {
    do
    {
      uint64_t v17 = (std::__shared_weak_count *)*(v3 - 1);
      if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
      v3 -= 2;
    }
    while (v3 != v16);
    int v3 = v16;
  }
  if (v3) {
LABEL_19:
  }
    operator delete(v3);
  return v14;
}

void sub_19E260448(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void sub_19E260664(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E260674(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E26068C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E2606A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E2606B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E2606C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E2606DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E2606F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E260700(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E260718(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E26072C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E26073C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E26074C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E260764(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E260A24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E260F0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20,void *a21,uint64_t a22,uint64_t a23,id location)
{
  objc_destroyWeak(v27);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_19E26103C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  uint64_t v5 = objc_msgSend_labels(*(void **)(a1 + 32), v2, v3, v4);
  uint64_t v9 = objc_msgSend_count(v5, v6, v7, v8);

  objc_msgSend_computeLoss_(WeakRetained, v10, *(void *)(a1 + 40), v11);
  uint64_t v16 = *(void *)(a1 + 56);
  if (v16) {
    (*(void (**)(uint64_t, void, float))(v16 + 16))(v16, *(void *)(a1 + 72), v15 / (float)(unint64_t)v9);
  }
  uint64_t v17 = objc_msgSend_seqLearningRateDecayHandler(WeakRetained, v12, v13, v14);
  objc_msgSend_updateGlobalStep(v17, v18, v19, v20);

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

void sub_19E2610F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19E26110C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19E261124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19E261138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19E2611EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E261204(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E261214(float **a1, void *a2, unint64_t a3)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  id v4 = a2;
  uint64_t v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v37, (uint64_t)v41, 16);
  if (!v7) {
    goto LABEL_33;
  }
  uint64_t v8 = *(void *)v38;
  if (a3)
  {
    if (a3 >> 62) {
      sub_19E13D694();
    }
    size_t v9 = 4 * a3;
    unint64_t v10 = (a3 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    if (v10 < 7)
    {
      do
      {
        for (uint64_t i = 0; i != v7; ++i)
        {
          if (*(void *)v38 != v8) {
            objc_enumerationMutation(v4);
          }
          long long v12 = *(void **)(*((void *)&v37 + 1) + 8 * i);
          uint64_t v13 = (char *)operator new(v9);
          bzero(v13, v9);
          objc_msgSend_readBytes_strideBytes_(v12, v14, (uint64_t)v13, 0);
          uint64_t v15 = 0;
          uint64_t v16 = *a1;
          float v17 = **a1;
          do
          {
            float v17 = v17 + *(float *)&v13[v15];
            *uint64_t v16 = v17;
            v15 += 4;
          }
          while (v9 != v15);
          operator delete(v13);
        }
        uint64_t v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v18, (uint64_t)&v37, (uint64_t)v41, 16);
      }
      while (v7);
      goto LABEL_33;
    }
    unint64_t v35 = v10 + 1;
    uint64_t v20 = (v10 + 1) & 0x7FFFFFFFFFFFFFF8;
LABEL_20:
    uint64_t v21 = 0;
    while (1)
    {
      if (*(void *)v38 != v8) {
        objc_enumerationMutation(v4);
      }
      uint64_t v23 = *(void **)(*((void *)&v37 + 1) + 8 * v21);
      uint64_t v24 = (float32x4_t *)operator new(v9);
      bzero(v24, v9);
      objc_msgSend_readBytes_strideBytes_(v23, v25, (uint64_t)v24, 0);
      long long v26 = *a1;
      float v27 = **a1;
      if (*a1 >= &v24->f32[a3] || v24 >= (float32x4_t *)(*a1 + 1))
      {
        char v28 = &v24->f32[v20];
        float32x4_t v29 = 0uLL;
        float32x4_t v30 = (float32x4_t)*(unsigned int *)*a1;
        long long v31 = v24 + 1;
        uint64_t v32 = v20;
        do
        {
          float32x4_t v30 = vaddq_f32(v30, v31[-1]);
          float32x4_t v29 = vaddq_f32(v29, *v31);
          v31 += 2;
          v32 -= 8;
        }
        while (v32);
        float32x4_t v33 = vaddq_f32(v29, v30);
        float v27 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v33, v33));
        *long long v26 = v27;
        if (v35 == v20) {
          goto LABEL_21;
        }
      }
      else
      {
        char v28 = (float *)v24;
      }
      do
      {
        float v34 = *v28++;
        float v27 = v27 + v34;
        *long long v26 = v27;
      }
      while (v28 != &v24->f32[a3]);
LABEL_21:
      operator delete(v24);
      if (++v21 == v7)
      {
        uint64_t v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v22, (uint64_t)&v37, (uint64_t)v41, 16);
        if (!v7) {
          goto LABEL_33;
        }
        goto LABEL_20;
      }
    }
  }
  do
  {
    for (uint64_t j = 0; j != v7; ++j)
    {
      if (*(void *)v38 != v8) {
        objc_enumerationMutation(v4);
      }
      objc_msgSend_readBytes_strideBytes_(*(void **)(*((void *)&v37 + 1) + 8 * j), v6, 0, 0);
    }
    uint64_t v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v6, (uint64_t)&v37, (uint64_t)v41, 16);
  }
  while (v7);
LABEL_33:
}

void sub_19E261530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_19E261A30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, void *a20,uint64_t a21,id location)
{
  objc_destroyWeak(v26);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_19E261B68(uint64_t a1, void *a2)
{
  id v77 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  int64x2_t v79 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 32), v4, 0, v5);
  size_t v9 = objc_msgSend_combinedLossLabels(*(void **)(a1 + 40), v6, v7, v8);
  uint64_t v13 = objc_msgSend_labels(v9, v10, v11, v12);

  unint64_t v17 = 0;
  id v78 = WeakRetained;
  while (v17 < objc_msgSend_count(v13, v14, v15, v16, v77))
  {
    objc_msgSend_data(v79, v18, v19, v20);
    id v21 = objc_claimAutoreleasedReturnValue();
    uint64_t v25 = objc_msgSend_contents(v21, v22, v23, v24);
    uint64_t v29 = objc_msgSend_rowBytes(v79, v26, v27, v28);

    uint64_t v33 = objc_msgSend_outputChannels(*(void **)(a1 + 48), v30, v31, v32);
    uint64_t v36 = v33;
    uint64_t v80 = 0;
    if (v33)
    {
      if (v33 < 0) {
        sub_19E13D694();
      }
      uint64_t v37 = 4 * v33;
      uint64_t v80 = operator new(4 * v33);
      memcpy(v80, (const void *)(v25 + v29 * v17), 4 * v36);
      long long v38 = (float *)operator new(4 * v36);
      memcpy(v38, v80, 4 * v36);
      long long v39 = v38;
      if (v36 != 1)
      {
        long long v40 = v38 + 1;
        float v41 = *v38;
        uint64_t v42 = v37 - 4;
        long long v39 = v38;
        uint64_t v43 = v38 + 1;
        do
        {
          float v44 = *v43++;
          BOOL v45 = v41 < v44;
          float v41 = fmaxf(v41, v44);
          if (v45) {
            long long v39 = v40;
          }
          long long v40 = v43;
          v42 -= 4;
        }
        while (v42);
      }
      unint64_t v46 = (unint64_t)((char *)v39 - (char *)v38) >> 2;
      operator delete(v38);
    }
    else
    {
      LODWORD(v46) = 0;
    }
    uint64_t v47 = *(void *)(a1 + 56);
    int64x2_t v48 = objc_msgSend_objectAtIndexedSubscript_(v13, v34, v17, v35);
    unsigned int v52 = objc_msgSend_unsignedIntegerValue(v48, v49, v50, v51);
    unsigned int v53 = v52;
    uint64_t v54 = (uint64_t **)(v47 + 8);
    int v56 = (uint64_t **)(v47 + 16);
    int64x2_t v55 = *(uint64_t **)(v47 + 16);
    if (v55)
    {
      while (1)
      {
        while (1)
        {
          int64x2_t v57 = v55;
          unsigned int v58 = *((_DWORD *)v55 + 8);
          if (v58 <= v52) {
            break;
          }
          int64x2_t v55 = (uint64_t *)*v57;
          int v56 = (uint64_t **)v57;
          if (!*v57) {
            goto LABEL_19;
          }
        }
        if (v58 >= v52) {
          break;
        }
        int64x2_t v55 = (uint64_t *)v57[1];
        if (!v55)
        {
          int v56 = (uint64_t **)(v57 + 1);
          goto LABEL_19;
        }
      }
      uint64_t v59 = (void **)v57;
      uint64_t v63 = v57 + 6;
      int64x2_t v62 = (void *)v57[6];
      if (v62) {
        goto LABEL_26;
      }
LABEL_24:
      int64x2_t v64 = v63;
LABEL_30:
      uint64_t v66 = operator new(0x28uLL);
      void v66[7] = v46;
      v66[8] = 0;
      *(void *)uint64_t v66 = 0;
      *((void *)v66 + 1) = 0;
      *((void *)v66 + 2) = v64;
      *uint64_t v63 = v66;
      uint64_t v67 = (void *)*v59[5];
      int64x2_t v68 = (uint64_t *)v66;
      if (v67)
      {
        v59[5] = v67;
        int64x2_t v68 = (uint64_t *)*v63;
      }
      sub_19E13C8A0(v59[6], v68);
      v59[7] = (void *)((char *)v59[7] + 1);
      goto LABEL_34;
    }
    int64x2_t v57 = (uint64_t *)(v47 + 16);
LABEL_19:
    uint64_t v59 = (void **)operator new(0x40uLL);
    *((_DWORD *)v59 + 8) = v53;
    v59[7] = 0;
    v59[6] = 0;
    v59[5] = v59 + 6;
    *uint64_t v59 = 0;
    v59[1] = 0;
    v59[2] = v57;
    *int v56 = (uint64_t *)v59;
    uint64_t v60 = (uint64_t *)**v54;
    uint64_t v61 = (uint64_t *)v59;
    if (v60)
    {
      *uint64_t v54 = v60;
      uint64_t v61 = *v56;
    }
    sub_19E13C8A0(v54[1], v61);
    v54[2] = (uint64_t *)((char *)v54[2] + 1);
    uint64_t v63 = v59 + 6;
    int64x2_t v62 = v59[6];
    if (!v62) {
      goto LABEL_24;
    }
    while (1)
    {
LABEL_26:
      while (1)
      {
        int64x2_t v64 = v62;
        unsigned int v65 = *((_DWORD *)v62 + 7);
        if (v65 <= v46) {
          break;
        }
        int64x2_t v62 = (void *)*v64;
        uint64_t v63 = v64;
        if (!*v64) {
          goto LABEL_30;
        }
      }
      if (v65 >= v46) {
        break;
      }
      int64x2_t v62 = (void *)v64[1];
      if (!v62)
      {
        uint64_t v63 = v64 + 1;
        goto LABEL_30;
      }
    }
    uint64_t v66 = v64;
LABEL_34:

    ++v66[8];
    id WeakRetained = v78;
    uint64_t v71 = objc_msgSend_objectAtIndexedSubscript_(v13, v69, v17, v70);
    uint64_t v75 = objc_msgSend_unsignedIntegerValue(v71, v72, v73, v74);
    *(float *)(*(void *)(a1 + 56) + 32) = *(float *)(*(void *)(a1 + 56) + 32) + log2f(*((float *)v80 + v75));

    operator delete(v80);
    ++v17;
  }
  objc_msgSend_computeLoss_(WeakRetained, v18, *(void *)(a1 + 40), v20);
  *(float *)(*(void *)(a1 + 56) + 36) = *(float *)(*(void *)(a1 + 56) + 36) + v76;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 64));
}

void sub_19E261F24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, void *a11, void *__p, uint64_t a13)
{
  _Unwind_Resume(a1);
}

void sub_19E2623B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  _Block_object_dispose(&a20, 8);
  if (__p)
  {
    a27 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

__n128 sub_19E2624E0(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_19E262504(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_19E26251C(uint64_t a1, void *a2)
{
  id v36 = a2;
  uint64_t v5 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 32), v3, 0, v4);
  size_t v9 = objc_msgSend_combinedLossLabels(*(void **)(a1 + 40), v6, v7, v8);
  uint64_t v13 = objc_msgSend_labels(v9, v10, v11, v12);

  for (unint64_t i = 0; i < objc_msgSend_count(v13, v14, v15, v16); ++i)
  {
    objc_msgSend_data(v5, v18, v19, v20);
    id v21 = objc_claimAutoreleasedReturnValue();
    uint64_t v25 = objc_msgSend_contents(v21, v22, v23, v24);
    uint64_t v29 = objc_msgSend_rowBytes(v5, v26, v27, v28);

    uint64_t v30 = *(void *)(*(void *)(a1 + 56) + 8);
    uint64_t v31 = *(void **)(v30 + 56);
    uint64_t v35 = objc_msgSend_outputChannels(*(void **)(a1 + 48), v32, v33, v34);
    sub_19E15A5A4((unint64_t *)(v30 + 48), v31, (char *)(v25 + v29 * i), (char *)(v25 + v29 * i + 4 * v35), v35);
  }
}

void sub_19E262624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19E262640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19E262658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19E26266C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19E262690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19E262874(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CFArrayRef sub_19E2628E8(int **a1)
{
  unint64_t v2 = a1[1] - *a1;
  long long __p = 0;
  uint64_t v15 = 0;
  unint64_t v16 = 0;
  sub_19E15BEB0((uint64_t)&__p, v2);
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 != v4)
  {
    uint64_t v5 = v15;
    do
    {
      int v13 = *v3;
      if ((unint64_t)v5 >= v16) {
        uint64_t v5 = sub_19E262A24((CFNumberRef **)&__p, &v13);
      }
      else {
        sub_19E262C18((uint64_t)&v16, v5++, &v13);
      }
      uint64_t v15 = v5;
      ++v3;
    }
    while (v3 != v4);
  }
  CFArrayRef v6 = sub_19E15C03C((char **)&__p);
  uint64_t v7 = (CFNumberRef *)__p;
  if (__p)
  {
    uint64_t v8 = v15;
    size_t v9 = __p;
    if (v15 != __p)
    {
      do
      {
        uint64_t v11 = *--v8;
        unint64_t v10 = v11;
        if (v11) {
          CFRelease(v10);
        }
      }
      while (v8 != v7);
      size_t v9 = __p;
    }
    uint64_t v15 = v7;
    operator delete(v9);
  }
  return v6;
}

void sub_19E2629F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E15C1D8((void **)va);
  _Unwind_Resume(a1);
}

void sub_19E262A0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E15C1D8((void **)va);
  _Unwind_Resume(a1);
}

CFNumberRef *sub_19E262A24(CFNumberRef **a1, int *a2)
{
  uint64_t v3 = a1[1] - *a1;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 61) {
    sub_19E13D694();
  }
  uint64_t v6 = (char *)a1[2] - (char *)*a1;
  if (v6 >> 2 > v4) {
    unint64_t v4 = v6 >> 2;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v7 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  if (v7)
  {
    if (v7 >> 61) {
      sub_19E13C418();
    }
    uint64_t v8 = (char *)operator new(8 * v7);
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v28 = (CFNumberRef *)&v8[8 * v3];
  uint64_t v29 = (CFNumberRef *)&v8[8 * v7];
  sub_19E262C18((uint64_t)(a1 + 2), v28, a2);
  size_t v9 = v28;
  unint64_t v10 = v28 + 1;
  uint64_t v11 = *a1;
  uint64_t v12 = a1[1];
  if (v12 == *a1)
  {
    *a1 = v28;
    a1[1] = v10;
    a1[2] = v29;
  }
  else
  {
    unint64_t v13 = (char *)v12 - (char *)*a1 - 8;
    if (v13 < 0x58) {
      goto LABEL_18;
    }
    unint64_t v14 = ((char *)v11 - (char *)v12 + 7) & 0xFFFFFFFFFFFFFFF8;
    if ((CFNumberRef *)((char *)v28 + v14) < v12 && (CFNumberRef *)((char *)v12 + v14) < v28) {
      goto LABEL_18;
    }
    uint64_t v15 = (v13 >> 3) + 1;
    uint64_t v16 = 8 * (v15 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v17 = &v28[v16 / 0xFFFFFFFFFFFFFFF8];
    uint64_t v18 = &v12[v16 / 0xFFFFFFFFFFFFFFF8];
    uint64_t v19 = v12 - 2;
    uint64_t v20 = v28 - 2;
    uint64_t v21 = v15 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v22 = *(_OWORD *)v19;
      *((_OWORD *)v20 - 1) = *((_OWORD *)v19 - 1);
      *(_OWORD *)uint64_t v20 = v22;
      *((_OWORD *)v19 - 1) = 0uLL;
      *(_OWORD *)uint64_t v19 = 0uLL;
      v19 -= 4;
      v20 -= 4;
      v21 -= 4;
    }
    while (v21);
    size_t v9 = v17;
    uint64_t v12 = v18;
    if (v15 != (v15 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_18:
      unint64_t v17 = v9;
      do
      {
        CFNumberRef v23 = *--v12;
        *--unint64_t v17 = v23;
        *uint64_t v12 = 0;
      }
      while (v12 != v11);
    }
    uint64_t v24 = *a1;
    uint64_t v12 = a1[1];
    *a1 = v17;
    a1[1] = v10;
    a1[2] = v29;
    if (v12 != v24)
    {
      do
      {
        long long v26 = *--v12;
        uint64_t v25 = v26;
        if (v26) {
          CFRelease(v25);
        }
      }
      while (v12 != v24);
      uint64_t v12 = v24;
    }
  }
  if (v12) {
    operator delete(v12);
  }
  return v28 + 1;
}

void sub_19E262C00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E15C248((uint64_t)va);
  _Unwind_Resume(a1);
}

CFNumberRef sub_19E262C18(uint64_t a1, CFNumberRef *a2, int *a3)
{
  int valuePtr = *a3;
  CFNumberRef result = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  *a2 = result;
  if (!result)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_19E262CA4(_Unwind_Exception *exception_object)
{
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(exception_object);
}

id sub_19E262CD0(void **a1, void *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7 = a2;
  int64x2_t v55 = v7;
  uint64_t v59 = objc_alloc_init(MLPInferenceResult);
  unsigned int v58 = objc_msgSend_commandQueue(a1[23], v8, v9, v10);
  uint64_t v11 = dispatch_semaphore_create(1);
  uint64_t v12 = (void *)MEMORY[0x19F3BC1E0]();
  unint64_t v13 = (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, unsigned __int8 *))v7[2];
  unsigned __int8 v61 = 0;
  dsema = v11;
  unint64_t v17 = (void *)v13(v7, a3, a4, 1, &v61);
  int v18 = v61;
  uint64_t v60 = a1;
  uint64_t v56 = a3;
  if (v61)
  {
    objc_msgSend_waitUntilCompleted(0, v14, v15, v16);
    uint64_t v19 = 0;
    uint64_t v20 = 0;
  }
  else
  {
    uint64_t v21 = objc_msgSend_dataBatch_batchSize_network_(MLPDataBatch, v14, (uint64_t)v17, a4, *a1);
    dispatch_semaphore_wait(v11, 0xFFFFFFFFFFFFFFFFLL);
    uint64_t v19 = objc_msgSend_commandBufferFromCommandQueue_(MEMORY[0x1E4F35520], v22, (uint64_t)v58, v23);
    uint64_t v20 = objc_msgSend_runInference_databatch_inferredResult_semaphore_(*v60, v24, (uint64_t)v19, (uint64_t)v21, v59, v11);
    objc_msgSend_commit(v19, v25, v26, v27);

    a1 = v60;
  }

  uint64_t v35 = v19;
  if (!v18)
  {
    uint64_t v36 = v56;
    do
    {
      uint64_t v37 = (void *)MEMORY[0x19F3BC1E0]();
      unsigned __int8 v61 = 0;
      float v41 = (void *)((uint64_t (*)(void *, uint64_t, uint64_t, void, unsigned __int8 *))v7[2])(v7, v36, a4, 0, &v61);
      int v42 = v61;
      if (v61)
      {
        objc_msgSend_waitUntilCompleted(v35, v38, v39, v40);
      }
      else
      {
        uint64_t v43 = objc_msgSend_dataBatch_batchSize_network_(MLPDataBatch, v38, (uint64_t)v41, a4, *a1);
        dispatch_semaphore_wait(dsema, 0xFFFFFFFFFFFFFFFFLL);
        unint64_t v46 = objc_msgSend_commandBufferFromCommandQueue_(MEMORY[0x1E4F35520], v44, (uint64_t)v58, v45);

        uint64_t v48 = objc_msgSend_runInference_databatch_inferredResult_semaphore_(*v60, v47, (uint64_t)v46, (uint64_t)v43, v59, dsema);
        objc_msgSend_commit(v46, v49, v50, v51);
        v20 += v48;

        uint64_t v35 = v46;
        unint64_t v7 = v55;
        uint64_t v36 = v56;
        a1 = v60;
      }
    }
    while (!v42);
  }
  if (!v20) {
    sub_19E15DB6C(@"No data was provided for validation", v28, v29, v30, v31, v32, v33, v34, v54);
  }
  unsigned int v52 = sub_19E150D18(v59, v20, (unint64_t)a1[18]);

  return v52;
}

void sub_19E262F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_19E263044(uint64_t a1, void *a2)
{
  return objc_claimAutoreleasedReturnValue();
}

uint64_t sub_19E263068(void **a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_claimAutoreleasedReturnValue();
}

void sub_19E26308C(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1[12];
  float v44 = objc_msgSend_commandQueue((void *)a1[23], a2, a3, a4);
  uint64_t v6 = dispatch_semaphore_create(1);
  unint64_t v7 = (void *)MEMORY[0x19F3BC1E0]();
  unsigned __int8 v50 = 0;
  uint64_t v8 = (void *)(*(uint64_t (**)(void))(a1[5] + 16))();
  uint64_t v10 = objc_msgSend_dataBatch_batchSize_network_(MLPDataBatch, v9, (uint64_t)v8, v5, *a1, &v47);
  dispatch_semaphore_wait(v6, 0xFFFFFFFFFFFFFFFFLL);
  unint64_t v13 = objc_msgSend_commandBufferFromCommandQueue_(MEMORY[0x1E4F35520], v11, (uint64_t)v44, v12);
  uint64_t v45 = MEMORY[0x1E4F143A8];
  uint64_t v46 = 3221225472;
  uint64_t v47 = sub_19E263440;
  uint64_t v48 = &unk_1E599D180;
  uint64_t v49 = a1;
  unint64_t v14 = (void *)MEMORY[0x19F3BC450](&v45);
  objc_msgSend_runTraining_databatch_iteration_lossCallback_semaphore_((void *)*a1, v15, (uint64_t)v13, (uint64_t)v10, 0, v14, v6);
  objc_msgSend_commit(v13, v16, v17, v18);

  uint64_t v19 = 1;
  uint64_t v20 = v13;
  do
  {
    uint64_t v21 = (void *)MEMORY[0x19F3BC1E0]();
    unsigned __int8 v50 = 0;
    uint64_t v25 = (void *)(*(uint64_t (**)(void))(a1[5] + 16))();
    int v26 = v50;
    if (v50)
    {
      objc_msgSend_waitUntilCompleted(v20, v22, v23, v24);
    }
    else
    {
      uint64_t v27 = objc_msgSend_dataBatch_batchSize_network_(MLPDataBatch, v22, (uint64_t)v25, v5, *a1);
      dispatch_semaphore_wait(v6, 0xFFFFFFFFFFFFFFFFLL);
      uint64_t v30 = objc_msgSend_commandBufferFromCommandQueue_(MEMORY[0x1E4F35520], v28, (uint64_t)v44, v29);

      uint64_t v45 = MEMORY[0x1E4F143A8];
      uint64_t v46 = 3221225472;
      uint64_t v47 = sub_19E263440;
      uint64_t v48 = &unk_1E599D180;
      uint64_t v49 = a1;
      uint64_t v31 = (void *)MEMORY[0x19F3BC450](&v45);
      objc_msgSend_runTraining_databatch_iteration_lossCallback_semaphore_((void *)*a1, v32, (uint64_t)v30, (uint64_t)v27, v19, v31, v6);
      objc_msgSend_commit(v30, v33, v34, v35);
      ++v19;

      uint64_t v20 = v30;
    }
  }
  while (!v26);
  if (!v19) {
    sub_19E15DB6C(@"No data was provided for training", v36, v37, v38, v39, v40, v41, v42, v43);
  }
}

void sub_19E26337C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

double sub_19E263440(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19E263478(*(void *)(a1 + 32), @"Iteration: %tu done - loss = %.10f", a3, a4, a5, a6, a7, a8, a2);
  return result;
}

void sub_19E263478(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v10 = a2;
  if (*(void *)(a1 + 56))
  {
    id v11 = [NSString alloc];
    unint64_t v13 = objc_msgSend_initWithFormat_arguments_(v11, v12, (uint64_t)v10, (uint64_t)&a9);
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
}

void sub_19E263514(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E263528(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_19E263538(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  id v11 = a5;
  id v12 = a6;
  uint64_t v13 = MEMORY[0x19F3BC450](a2);
  unint64_t v14 = (void *)a1[5];
  a1[5] = v13;

  a1[8] = a3;
  a1[9] = a4;
  uint64_t v15 = MEMORY[0x19F3BC450](v11);
  uint64_t v16 = (void *)a1[6];
  a1[6] = v15;

  uint64_t v17 = MEMORY[0x19F3BC450](v12);
  uint64_t v18 = (void *)a1[7];
  a1[7] = v17;

  if (a1[11])
  {
    uint64_t v25 = 0;
    do
    {
      sub_19E263478((uint64_t)a1, @"Starting epoch: %d", v19, v20, v21, v22, v23, v24, (uint64_t)v25);
      int v26 = (void *)MEMORY[0x19F3BC1E0]();
      sub_19E26308C(a1, v27, v28, v29);
      uint64_t v30 = (void *)MEMORY[0x19F3BC1E0]();
      BOOL v33 = sub_19E263684((uint64_t)a1, v25, v31, v32);
      if (v33) {
        break;
      }
      ++v25;
    }
    while ((unint64_t)v25 < a1[11]);
  }
  uint64_t v34 = a1[2];
  a1[2] = 0;

  return v34;
}

void sub_19E26365C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E263670(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_19E263684(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], a2, a3, a4);
  uint64_t v9 = *(void *)(a1 + 72);
  if (v9)
  {
    id v10 = sub_19E262CD0((void **)a1, *(void **)(a1 + 40), v9, *(void *)(a1 + 112));

    uint64_t v13 = objc_msgSend_exMRL_numberForKey_(v10, v11, (uint64_t)MLPModelTrainerOverallAccuracyKey, v12);
    uint64_t v8 = v10;
    uint64_t v15 = (id *)(a1 + 24);
    uint64_t v14 = *(void *)(a1 + 24);
    if (!v14) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v15 = (id *)(a1 + 24);
    uint64_t v14 = *(void *)(a1 + 24);
    if (!v14) {
      goto LABEL_6;
    }
  }
  if (objc_msgSend_compare_(v13, v6, v14, v7) != 1)
  {
    ++*(void *)(a1 + 32);
    char v26 = 0;
    uint64_t v22 = *(void *)(a1 + 48);
    if (!v22) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
LABEL_6:
  *(void *)(a1 + 32) = 0;
  objc_storeStrong(v15, v13);
  uint64_t v19 = *(const void **)(a1 + 16);
  if (v19) {
    CFRelease(v19);
  }
  *(void *)(a1 + 16) = 0;
  uint64_t ModelContainer = objc_msgSend_generateModelContainer(*(void **)a1, v16, v17, v18);
  uint64_t v21 = *(const void **)(a1 + 16);
  if (v21) {
    CFRelease(v21);
  }
  *(void *)(a1 + 16) = ModelContainer;
  char v26 = 0;
  uint64_t v22 = *(void *)(a1 + 48);
  if (v22) {
LABEL_13:
  }
    (*(void (**)(uint64_t, const char *, void *, char *))(v22 + 16))(v22, a2, v8, &v26);
LABEL_14:
  BOOL v24 = *(void *)(a1 + 32) >= *(void *)(a1 + 80) || v26 != 0;

  return v24;
}

void sub_19E2637F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E263810(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

const void **sub_19E263820(const void **a1)
{
  unint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  *a1 = 0;
  return a1;
}

uint64_t sub_19E263858(uint64_t a1, const void *a2, void *a3)
{
  id v8 = a3;
  *(void *)a1 = 0;
  if (a2) {
    CFTypeRef v9 = CFRetain(a2);
  }
  else {
    CFTypeRef v9 = 0;
  }
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 8) = v9;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 184) = 0;
  id v10 = objc_msgSend_mutableCopy(v8, v5, v6, v7);
  uint64_t v13 = objc_msgSend_exMRL_stringForKey_(v10, v11, (uint64_t)MLPModelTrainerDataLayoutKey, v12);
  uint64_t v14 = [MLPDeviceHandler alloc];
  uint64_t v17 = objc_msgSend_initWithDataLayout_(v14, v15, (uint64_t)v13, v16);
  uint64_t v18 = *(void **)(a1 + 184);
  *(void *)(a1 + 184) = v17;

  id v19 = v10;
  uint64_t v98 = v19;
  objc_storeStrong((id *)(a1 + 176), v10);
  uint64_t v20 = sub_19E263D0C(&v98, (uint64_t)MLPModelTrainerNumberOfEpochsKey, &unk_1EF0B3400);
  *(void *)(a1 + 88) = objc_msgSend_unsignedIntegerValue(v20, v21, v22, v23);

  BOOL v24 = sub_19E263D0C(&v98, (uint64_t)MLPModelTrainerBatchSizeKey, &unk_1EF0B3418);
  *(void *)(a1 + 96) = objc_msgSend_unsignedIntegerValue(v24, v25, v26, v27);

  uint64_t v28 = MLPModelTrainerEvaluationBatchSizeKey;
  uint64_t v31 = objc_msgSend_numberWithUnsignedInteger_(NSNumber, v29, *(void *)(a1 + 96), v30);
  uint64_t v32 = sub_19E263D0C(&v98, (uint64_t)v28, v31);
  *(void *)(a1 + 112) = objc_msgSend_unsignedIntegerValue(v32, v33, v34, v35);

  uint64_t v36 = sub_19E263D0C(&v98, (uint64_t)MLPModelTrainerLossBatchSizeKey, &unk_1EF0B3430);
  *(void *)(a1 + 104) = objc_msgSend_unsignedIntegerValue(v36, v37, v38, v39);

  uint64_t v40 = v98;
  uint64_t v43 = objc_msgSend_objectForKeyedSubscript_(v98, v41, (uint64_t)MLPModelTrainerInputLengthKey, v42);
  *(void *)(a1 + 120) = objc_msgSend_unsignedIntegerValue(v43, v44, v45, v46);

  uint64_t v49 = objc_msgSend_objectForKeyedSubscript_(v40, v47, (uint64_t)MLPModelTrainerInputHeightKey, v48);
  *(void *)(a1 + 128) = objc_msgSend_unsignedIntegerValue(v49, v50, v51, v52);

  int64x2_t v55 = objc_msgSend_objectForKeyedSubscript_(v40, v53, (uint64_t)MLPModelTrainerInputChannelsKey, v54);
  *(void *)(a1 + 136) = objc_msgSend_unsignedIntegerValue(v55, v56, v57, v58);

  unsigned __int8 v61 = objc_msgSend_objectForKeyedSubscript_(v40, v59, (uint64_t)MLPModelTrainerNumberOfLabelsKey, v60);
  *(void *)(a1 + 144) = objc_msgSend_unsignedIntegerValue(v61, v62, v63, v64);

  uint64_t v67 = objc_msgSend_objectForKeyedSubscript_(v40, v65, (uint64_t)MLPModelTrainerVocabSizeKey, v66);
  *(void *)(a1 + 152) = objc_msgSend_unsignedIntegerValue(v67, v68, v69, v70);

  uint64_t v73 = objc_msgSend_objectForKeyedSubscript_(v40, v71, (uint64_t)MLPModelTrainerEmbeddingDimensionKey, v72);
  *(void *)(a1 + 160) = objc_msgSend_unsignedIntegerValue(v73, v74, v75, v76);

  id v77 = MLPModelTrainerNoImprovementWindowKey;
  uint64_t v80 = objc_msgSend_numberWithUnsignedInteger_(NSNumber, v78, *(void *)(a1 + 88), v79);
  uint64_t v81 = sub_19E263D0C(&v98, (uint64_t)v77, v80);
  *(void *)(a1 + 80) = objc_msgSend_unsignedIntegerValue(v81, v82, v83, v84);

  uint64_t v87 = objc_msgSend_objectForKeyedSubscript_(v19, v85, (uint64_t)off_1E9458810, v86);
  uint64_t v88 = *(void **)(a1 + 168);
  *(void *)(a1 + 168) = v87;

  if (!*(void *)(a1 + 8)
    && (!*(void *)(a1 + 120) || !*(void *)(a1 + 128) || !*(void *)(a1 + 136) || !*(void *)(a1 + 144))
    && (!*(void *)(a1 + 152) || !*(void *)(a1 + 144) || !*(void *)(a1 + 160)))
  {
    sub_19E15DB6C(@"Invalid dimensions - cannot create network", v89, v90, v91, v92, v93, v94, v95, v97);
  }
  sub_19E312EC4(a1, v89, v90, v91);

  return a1;
}

void sub_19E263BF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E263C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  sub_19E263820(v12);
  _Unwind_Resume(a1);
}

id sub_19E263D0C(void **a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v8 = objc_msgSend_objectForKeyedSubscript_(*a1, v6, a2, v7);
  uint64_t v12 = v8;
  uint64_t v13 = v8;
  if (v5)
  {
    uint64_t v14 = objc_msgSend_unsignedIntegerValue(v8, v9, v10, v11);
    uint64_t v13 = v12;
    if (!v14)
    {
      objc_msgSend_setObject_forKeyedSubscript_(*a1, v15, (uint64_t)v5, a2);
      uint64_t v13 = v5;
    }
  }
  id v16 = v13;

  return v16;
}

void sub_19E263DA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E263DB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_19E263DCC(uint64_t a1)
{
  unint64_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    CFRelease(v2);
  }

  uint64_t v3 = *(const void **)(a1 + 16);
  if (v3) {
    CFRelease(v3);
  }
  *(void *)(a1 + 16) = 0;

  return a1;
}

void sub_19E2655A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,char a28,void *__p,uint64_t a30)
{
  uint64_t v34 = *(void **)(v32 - 144);
  if (v34)
  {
    *(void *)(v32 - 136) = v34;
    operator delete(v34);
  }

  _Unwind_Resume(a1);
}

void sub_19E2657F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  if (!a29) {
    JUMPOUT(0x19E265770);
  }
  JUMPOUT(0x19E265768);
}

void sub_19E26580C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  if (!a29) {
    JUMPOUT(0x19E265770);
  }
  JUMPOUT(0x19E265768);
}

void sub_19E265824(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  if (!a29) {
    JUMPOUT(0x19E265770);
  }
  JUMPOUT(0x19E265768);
}

const void **sub_19E265838(const void **a1)
{
  unint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

unint64_t sub_19E265918(unint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  CFTypeRef v9 = (uint64_t *)result;
LABEL_2:
  uint64_t v10 = a2 - 2;
  uint64_t v11 = a2 - 1;
  uint64_t v158 = a2 - 3;
  uint64_t v12 = a2 - 5;
  uint64_t v13 = v9;
  while (1)
  {
    CFTypeRef v9 = v13;
    uint64_t v14 = (char *)a2 - (char *)v13;
    uint64_t v15 = ((char *)a2 - (char *)v13) >> 4;
    if (v5 || !v4)
    {
      switch(v15)
      {
        case 0:
        case 1:
          return result;
        case 2:
          if (*v11 > (unint64_t)v13[1])
          {
            uint64_t v92 = *v13;
            uint64_t *v13 = *v10;
            *uint64_t v10 = v92;
            uint64_t v93 = v13[1];
            v13[1] = *v11;
            uint64_t *v11 = v93;
          }
          return result;
        case 3:
          uint64_t v94 = v13 + 1;
          unint64_t v95 = v13[1];
          uint64_t v96 = v13 + 3;
          unint64_t v97 = v13[3];
          unint64_t v98 = *v11;
          if (v97 <= v95)
          {
            if (v98 <= v97) {
              return result;
            }
            uint64_t v147 = v13[2];
            v13[2] = *v10;
            *uint64_t v10 = v147;
            uint64_t v148 = v13[3];
            v13[3] = *v11;
            uint64_t *v11 = v148;
            if (v13[3] <= (unint64_t)v13[1]) {
              return result;
            }
            uint64_t v149 = *v13;
            uint64_t *v13 = v13[2];
            v13[2] = v149;
          }
          else
          {
            uint64_t v99 = *v13;
            if (v98 <= v97)
            {
              uint64_t *v13 = v13[2];
              v13[1] = v97;
              v13[2] = v99;
              v13[3] = v95;
              if (*v11 <= v95) {
                return result;
              }
              v13[2] = *v10;
              *uint64_t v10 = v99;
              uint64_t v94 = v13 + 3;
            }
            else
            {
              uint64_t *v13 = *v10;
              *uint64_t v10 = v99;
            }
            uint64_t v96 = a2 - 1;
          }
          uint64_t v157 = *v94;
          uint64_t *v94 = *v96;
          *uint64_t v96 = v157;
          return result;
        case 4:
          return (unint64_t)sub_19E266850(v13, v13 + 2, v13 + 4, a2 - 2);
        case 5:
          double result = (unint64_t)sub_19E266850(v13, v13 + 2, v13 + 4, v13 + 6);
          if (*v11 > (unint64_t)v13[7])
          {
            uint64_t v100 = v13[6];
            v13[6] = *v10;
            *uint64_t v10 = v100;
            uint64_t v101 = v13[7];
            v13[7] = *v11;
            uint64_t *v11 = v101;
            unint64_t v102 = v13[7];
            unint64_t v103 = v13[5];
            if (v102 > v103)
            {
              uint64_t v104 = v13[6];
              unint64_t v105 = v13[3];
              uint64_t v106 = v13[4];
              v13[4] = v104;
              v13[5] = v102;
              v13[6] = v106;
              v13[7] = v103;
              if (v102 > v105)
              {
                unint64_t v107 = v13[1];
                uint64_t v108 = v13[2];
                v13[2] = v104;
                v13[3] = v102;
                v13[4] = v108;
                v13[5] = v105;
                if (v102 > v107)
                {
                  uint64_t v109 = *v13;
                  uint64_t *v13 = v104;
                  v13[1] = v102;
                  v13[2] = v109;
                  v13[3] = v107;
                }
              }
            }
          }
          return result;
        default:
          JUMPOUT(0);
      }
    }
    if (v14 <= 383) {
      break;
    }
    if (!a3)
    {
      if (v13 != a2)
      {
        int64_t v121 = (unint64_t)(v15 - 2) >> 1;
        int64x2_t v122 = v13 + 2;
        int64_t v123 = v121;
        do
        {
          if (v121 >= v123)
          {
            uint64_t v125 = (2 * v123) | 1;
            uint64_t v126 = &v122[4 * v123];
            if (2 * v123 + 2 < v15)
            {
              BOOL v124 = v126[1] > (unint64_t)v126[3];
              v126 += 2 * v124;
              if (v124) {
                uint64_t v125 = 2 * v123 + 2;
              }
            }
            uint64_t v127 = &v13[2 * v123];
            unint64_t v128 = v127[1];
            if (v126[1] <= v128)
            {
              uint64_t v129 = *v127;
              do
              {
                double result = (unint64_t)v127;
                uint64_t v127 = v126;
                *(void *)double result = *v126;
                *(void *)(result + 8) = v126[1];
                if (v121 < v125) {
                  break;
                }
                double result = (2 * v125) | 1;
                uint64_t v126 = &v122[4 * v125];
                uint64_t v130 = 2 * v125 + 2;
                if (v130 < v15)
                {
                  BOOL v124 = v126[1] > (unint64_t)v126[3];
                  v126 += 2 * v124;
                  if (v124) {
                    double result = v130;
                  }
                }
                uint64_t v125 = result;
              }
              while (v126[1] <= v128);
              *uint64_t v127 = v129;
              v127[1] = v128;
            }
          }
          BOOL v124 = v123-- <= 0;
        }
        while (!v124);
        uint64_t v131 = (unint64_t)v14 >> 4;
        do
        {
          uint64_t v132 = 0;
          uint64_t v133 = *v13;
          uint64_t v134 = v13[1];
          unsigned __int8 v135 = v13;
          do
          {
            unint64_t v136 = &v135[2 * v132 + 2];
            uint64_t v137 = (2 * v132) | 1;
            uint64_t v138 = 2 * v132 + 2;
            if (v138 < v131)
            {
              unint64_t v139 = v136[1];
              unint64_t v140 = v136[3];
              v136 += 2 * (v139 > v140);
              if (v139 > v140) {
                uint64_t v137 = v138;
              }
            }
            *unsigned __int8 v135 = *v136;
            v135[1] = v136[1];
            unsigned __int8 v135 = v136;
            uint64_t v132 = v137;
          }
          while (v137 <= (uint64_t)((unint64_t)(v131 - 2) >> 1));
          if (v136 == a2 - 2)
          {
            uint64_t *v136 = v133;
            v136[1] = v134;
          }
          else
          {
            uint64_t *v136 = *(a2 - 2);
            v136[1] = *(a2 - 1);
            *(a2 - 2) = v133;
            *(a2 - 1) = v134;
            uint64_t v141 = (char *)v136 - (char *)v13 + 16;
            if (v141 >= 17)
            {
              unint64_t v142 = (((unint64_t)v141 >> 4) - 2) >> 1;
              int v143 = &v13[2 * v142];
              unint64_t v144 = v136[1];
              if (v143[1] > v144)
              {
                uint64_t v145 = *v136;
                do
                {
                  uint64_t v146 = v136;
                  unint64_t v136 = v143;
                  uint64_t *v146 = *v143;
                  v146[1] = v143[1];
                  if (!v142) {
                    break;
                  }
                  unint64_t v142 = (v142 - 1) >> 1;
                  int v143 = &v13[2 * v142];
                }
                while (v143[1] > v144);
                uint64_t *v136 = v145;
                v136[1] = v144;
              }
            }
          }
          a2 -= 2;
          BOOL v124 = v131-- <= 2;
        }
        while (!v124);
      }
      return result;
    }
    id v16 = &v13[2 * ((unint64_t)v15 >> 1)];
    unint64_t v17 = *v11;
    if ((unint64_t)v14 < 0x801)
    {
      uint64_t v23 = v13 + 1;
      unint64_t v24 = v13[1];
      uint64_t v25 = v16 + 1;
      unint64_t v26 = v16[1];
      if (v24 > v26)
      {
        uint64_t v27 = *v16;
        if (v17 <= v24)
        {
          *id v16 = *v13;
          v16[1] = v24;
          uint64_t *v13 = v27;
          v13[1] = v26;
          if (*v11 <= v26) {
            goto LABEL_34;
          }
          uint64_t *v13 = *v10;
          *uint64_t v10 = v27;
          uint64_t v25 = v13 + 1;
        }
        else
        {
          *id v16 = *v10;
          *uint64_t v10 = v27;
        }
        uint64_t v23 = a2 - 1;
        goto LABEL_33;
      }
      if (v17 > v24)
      {
        uint64_t v32 = *v13;
        uint64_t *v13 = *v10;
        *uint64_t v10 = v32;
        uint64_t v33 = v13[1];
        v13[1] = *v11;
        uint64_t *v11 = v33;
        if (v13[1] > (unint64_t)*v25)
        {
          uint64_t v34 = *v16;
          *id v16 = *v13;
          uint64_t *v13 = v34;
LABEL_33:
          uint64_t v48 = *v25;
          uint64_t *v25 = *v23;
          *uint64_t v23 = v48;
        }
      }
LABEL_34:
      --a3;
      if ((a4 & 1) == 0) {
        goto LABEL_61;
      }
LABEL_35:
      uint64_t v50 = *v13;
      unint64_t v49 = v13[1];
LABEL_62:
      int64x2_t v68 = v13;
      do
      {
        uint64_t v69 = v68;
        v68 += 2;
      }
      while (v69[3] > v49);
      uint64_t v70 = a2;
      if (v69 == v13)
      {
        uint64_t v73 = a2;
        while (v68 < v73)
        {
          uint64_t v71 = v73 - 2;
          unint64_t v74 = *(v73 - 1);
          v73 -= 2;
          if (v74 > v49) {
            goto LABEL_70;
          }
        }
        uint64_t v71 = v73;
        uint64_t v13 = v68;
      }
      else
      {
        do
        {
          uint64_t v71 = v70 - 2;
          unint64_t v72 = *(v70 - 1);
          v70 -= 2;
        }
        while (v72 <= v49);
LABEL_70:
        uint64_t v13 = v68;
        if (v68 < v71)
        {
          uint64_t v75 = v71;
          do
          {
            uint64_t v76 = *v13;
            uint64_t *v13 = *v75;
            *uint64_t v75 = v76;
            uint64_t v77 = v13[1];
            v13[1] = v75[1];
            v75[1] = v77;
            do
            {
              unint64_t v78 = v13[3];
              v13 += 2;
            }
            while (v78 > v49);
            do
            {
              unint64_t v79 = *(v75 - 1);
              v75 -= 2;
            }
            while (v79 <= v49);
          }
          while (v13 < v75);
        }
      }
      if (v13 - 2 != v9)
      {
        *CFTypeRef v9 = *(v13 - 2);
        v9[1] = *(v13 - 1);
      }
      *(v13 - 2) = v50;
      *(v13 - 1) = v49;
      if (v68 < v71) {
        goto LABEL_81;
      }
      BOOL v80 = sub_19E2664B8(v9, v13 - 2);
      double result = sub_19E2664B8(v13, a2);
      if (result)
      {
        a2 = v13 - 2;
        if (v80) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v80)
      {
LABEL_81:
        double result = sub_19E265918(v9, v13 - 2, a3, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      uint64_t v18 = (unint64_t *)(v16 + 1);
      unint64_t v19 = v16[1];
      uint64_t v20 = v13 + 1;
      unint64_t v21 = v13[1];
      if (v19 > v21)
      {
        uint64_t v22 = *v13;
        if (v17 <= v19)
        {
          uint64_t *v13 = *v16;
          v13[1] = v19;
          *id v16 = v22;
          v16[1] = v21;
          if (*v11 <= v21) {
            goto LABEL_24;
          }
          *id v16 = *v10;
          *uint64_t v10 = v22;
          uint64_t v20 = v16 + 1;
        }
        else
        {
          uint64_t *v13 = *v10;
          *uint64_t v10 = v22;
        }
        uint64_t v31 = a2 - 1;
        goto LABEL_23;
      }
      if (v17 > v19)
      {
        uint64_t v28 = *v16;
        *id v16 = *v10;
        *uint64_t v10 = v28;
        uint64_t v29 = v16[1];
        v16[1] = *v11;
        uint64_t *v11 = v29;
        if (v16[1] > (unint64_t)*v20)
        {
          uint64_t v30 = *v13;
          uint64_t *v13 = *v16;
          *id v16 = v30;
          uint64_t v31 = v16 + 1;
LABEL_23:
          uint64_t v35 = *v20;
          *uint64_t v20 = *v31;
          uint64_t *v31 = v35;
        }
      }
LABEL_24:
      uint64_t v36 = (unint64_t *)&v13[2 * ((unint64_t)v15 >> 1)];
      uint64_t v37 = v36 - 1;
      unint64_t v38 = *(v36 - 1);
      uint64_t v39 = (uint64_t *)(v36 - 2);
      uint64_t v40 = v13 + 3;
      unint64_t v41 = v13[3];
      unint64_t v42 = *v158;
      if (v38 > v41)
      {
        uint64_t v43 = v13[2];
        if (v42 <= v38)
        {
          v13[2] = *v39;
          v13[3] = v38;
          *uint64_t v39 = v43;
          *(v36 - 1) = v41;
          if (*v158 <= v41) {
            goto LABEL_40;
          }
          *uint64_t v39 = *(a2 - 4);
          *(a2 - 4) = v43;
          uint64_t v40 = (uint64_t *)(v36 - 1);
        }
        else
        {
          v13[2] = *(a2 - 4);
          *(a2 - 4) = v43;
        }
        uint64_t v47 = a2 - 3;
        goto LABEL_39;
      }
      if (v42 > v38)
      {
        uint64_t v44 = *v39;
        *uint64_t v39 = *(a2 - 4);
        *(a2 - 4) = v44;
        uint64_t v45 = *(v36 - 1);
        *(v36 - 1) = *(a2 - 3);
        *(a2 - 3) = v45;
        if (*(v36 - 1) > *v40)
        {
          uint64_t v46 = v13[2];
          v13[2] = *v39;
          *uint64_t v39 = v46;
          uint64_t v47 = (uint64_t *)(v36 - 1);
LABEL_39:
          uint64_t v51 = *v40;
          *uint64_t v40 = *v47;
          uint64_t *v47 = v51;
        }
      }
LABEL_40:
      unint64_t v52 = v36[3];
      unsigned int v53 = (uint64_t *)(v36 + 2);
      int64x2_t v55 = v13 + 5;
      unint64_t v54 = v13[5];
      unint64_t v56 = *v12;
      if (v52 > v54)
      {
        uint64_t v57 = v13[4];
        if (v56 <= v52)
        {
          v13[4] = *v53;
          v13[5] = v52;
          *unsigned int v53 = v57;
          v36[3] = v54;
          unint64_t v52 = v54;
          if (*v12 <= v54) {
            goto LABEL_50;
          }
          *unsigned int v53 = *(a2 - 6);
          *(a2 - 6) = v57;
          int64x2_t v55 = (uint64_t *)(v36 + 3);
        }
        else
        {
          v13[4] = *(a2 - 6);
          *(a2 - 6) = v57;
        }
        unsigned __int8 v61 = a2 - 5;
        goto LABEL_49;
      }
      if (v56 > v52)
      {
        uint64_t v58 = *v53;
        *unsigned int v53 = *(a2 - 6);
        *(a2 - 6) = v58;
        uint64_t v59 = v36[3];
        v36[3] = *(a2 - 5);
        *(a2 - 5) = v59;
        unint64_t v52 = v36[3];
        if (v52 > *v55)
        {
          uint64_t v60 = v13[4];
          v13[4] = *v53;
          *unsigned int v53 = v60;
          unsigned __int8 v61 = (uint64_t *)(v36 + 3);
LABEL_49:
          uint64_t v62 = *v55;
          *int64x2_t v55 = *v61;
          *unsigned __int8 v61 = v62;
          unint64_t v52 = v36[3];
        }
      }
LABEL_50:
      double result = *v18;
      unint64_t v63 = *v37;
      if (*v18 <= *v37)
      {
        uint64_t v64 = *v16;
        if (v52 <= result) {
          goto LABEL_60;
        }
        uint64_t v65 = *v53;
        *id v16 = *v53;
        v16[1] = v52;
        *unsigned int v53 = v64;
        v36[3] = result;
        if (v52 > v63)
        {
          uint64_t v66 = *v39;
          *uint64_t v39 = v65;
          *id v16 = v66;
LABEL_59:
          *uint64_t v37 = v52;
          *uint64_t v18 = v63;
          uint64_t v64 = *v16;
          double result = v36[1];
          goto LABEL_60;
        }
        double result = v52;
        uint64_t v64 = v65;
      }
      else
      {
        uint64_t v64 = *v39;
        if (v52 > result)
        {
          *uint64_t v39 = *v53;
          *unsigned int v53 = v64;
LABEL_58:
          uint64_t v18 = v36 + 3;
          goto LABEL_59;
        }
        *uint64_t v39 = *v16;
        *(v36 - 1) = result;
        *id v16 = v64;
        v16[1] = v63;
        if (v52 > v63)
        {
          *id v16 = *v53;
          *unsigned int v53 = v64;
          uint64_t v37 = (unint64_t *)(v16 + 1);
          goto LABEL_58;
        }
        double result = v63;
      }
LABEL_60:
      long long v67 = *(_OWORD *)v13;
      uint64_t *v13 = v64;
      v13[1] = result;
      *(_OWORD *)id v16 = v67;
      --a3;
      if (a4) {
        goto LABEL_35;
      }
LABEL_61:
      uint64_t v50 = *v13;
      unint64_t v49 = v13[1];
      if (*(v13 - 1) > v49) {
        goto LABEL_62;
      }
      if (v49 > *v11)
      {
        uint64_t v81 = v13;
        do
        {
          uint64_t v13 = v81 + 2;
          unint64_t v82 = v81[3];
          v81 += 2;
        }
        while (v49 <= v82);
      }
      else
      {
        uint64_t v83 = v13 + 2;
        do
        {
          uint64_t v13 = v83;
          if (v83 >= a2) {
            break;
          }
          unint64_t v84 = v83[1];
          v83 += 2;
        }
        while (v49 <= v84);
      }
      uint64_t v85 = a2;
      if (v13 < a2)
      {
        uint64_t v86 = a2;
        do
        {
          uint64_t v85 = v86 - 2;
          unint64_t v87 = *(v86 - 1);
          v86 -= 2;
        }
        while (v49 > v87);
      }
      while (v13 < v85)
      {
        uint64_t v88 = *v13;
        uint64_t *v13 = *v85;
        *uint64_t v85 = v88;
        uint64_t v89 = v13[1];
        v13[1] = v85[1];
        v85[1] = v89;
        do
        {
          unint64_t v90 = v13[3];
          v13 += 2;
        }
        while (v49 <= v90);
        do
        {
          unint64_t v91 = *(v85 - 1);
          v85 -= 2;
        }
        while (v49 > v91);
      }
      BOOL v4 = v13 - 2 >= v9;
      BOOL v5 = v13 - 2 == v9;
      if (v13 - 2 != v9)
      {
        *CFTypeRef v9 = *(v13 - 2);
        v9[1] = *(v13 - 1);
      }
      a4 = 0;
      *(v13 - 2) = v50;
      *(v13 - 1) = v49;
    }
  }
  uint64_t v110 = v13 + 2;
  BOOL v112 = v13 == a2 || v110 == a2;
  if (a4)
  {
    if (!v112)
    {
      uint64_t v113 = 0;
      uint64_t v114 = v13;
      do
      {
        unint64_t v116 = v114[3];
        if (v116 > v114[1])
        {
          unint64_t v117 = 0;
          uint64_t v118 = *v110;
          do
          {
            int v119 = &v114[v117 / 8];
            uint64_t v120 = v114[v117 / 8 + 1];
            v119[2] = v114[v117 / 8];
            v119[3] = v120;
            if (v113 == v117)
            {
              uint64_t v115 = v13;
              goto LABEL_129;
            }
            v117 -= 16;
          }
          while (v116 > *(v119 - 1));
          uint64_t v115 = &v110[v117 / 8];
LABEL_129:
          *uint64_t v115 = v118;
          v115[1] = v116;
        }
        v110 += 2;
        v113 -= 16;
        v114 += 2;
      }
      while (v110 != a2);
    }
  }
  else if (!v112)
  {
    uint64_t v150 = v13 + 1;
    do
    {
      unint64_t v151 = v9[3];
      unint64_t v152 = v9[1];
      CFTypeRef v9 = v110;
      if (v151 > v152)
      {
        uint64_t v153 = *v110;
        unint64_t v154 = v150;
        do
        {
          uint64_t v155 = *v154;
          v154[1] = *(v154 - 1);
          v154[2] = v155;
          unint64_t v156 = *(v154 - 2);
          v154 -= 2;
        }
        while (v151 > v156);
        v154[1] = v153;
        v154[2] = v151;
      }
      uint64_t v110 = v9 + 2;
      v150 += 2;
    }
    while (v9 + 2 != a2);
  }
  return result;
}

BOOL sub_19E2664B8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(a2 - 1) > (unint64_t)a1[1])
      {
        uint64_t v6 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v6;
        uint64_t v7 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      id v8 = a1 + 1;
      unint64_t v9 = a1[1];
      uint64_t v10 = a1 + 3;
      unint64_t v11 = a1[3];
      unint64_t v12 = *(a2 - 1);
      if (v11 > v9)
      {
        uint64_t v13 = *a1;
        if (v12 <= v11)
        {
          *a1 = a1[2];
          a1[1] = v11;
          a1[2] = v13;
          a1[3] = v9;
          if (*(a2 - 1) <= v9) {
            return result;
          }
          a1[2] = *(a2 - 2);
          *(a2 - 2) = v13;
          id v8 = a1 + 3;
        }
        else
        {
          *a1 = *(a2 - 2);
          *(a2 - 2) = v13;
        }
        uint64_t v10 = a2 - 1;
        goto LABEL_27;
      }
      if (v12 > v11)
      {
        uint64_t v30 = a1[2];
        a1[2] = *(a2 - 2);
        *(a2 - 2) = v30;
        uint64_t v31 = a1[3];
        a1[3] = *(a2 - 1);
        *(a2 - 1) = v31;
        if (a1[3] > (unint64_t)a1[1])
        {
          uint64_t v32 = *a1;
          *a1 = a1[2];
          a1[2] = v32;
LABEL_27:
          uint64_t v36 = *v8;
          uint64_t *v8 = *v10;
          *uint64_t v10 = v36;
          return result;
        }
      }
      return result;
    case 4:
      sub_19E266850(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_19E266850(a1, a1 + 2, a1 + 4, a1 + 6);
      if (*(a2 - 1) <= (unint64_t)a1[7]) {
        return 1;
      }
      uint64_t v20 = a1[6];
      a1[6] = *(a2 - 2);
      *(a2 - 2) = v20;
      uint64_t v21 = a1[7];
      a1[7] = *(a2 - 1);
      *(a2 - 1) = v21;
      unint64_t v22 = a1[7];
      unint64_t v23 = a1[5];
      if (v22 <= v23) {
        return 1;
      }
      uint64_t v24 = a1[6];
      unint64_t v25 = a1[3];
      uint64_t v26 = a1[4];
      a1[4] = v24;
      a1[5] = v22;
      a1[6] = v26;
      a1[7] = v23;
      if (v22 <= v25) {
        return 1;
      }
      unint64_t v27 = a1[1];
      uint64_t v28 = a1[2];
      a1[2] = v24;
      a1[3] = v22;
      a1[4] = v28;
      a1[5] = v25;
      if (v22 <= v27) {
        return 1;
      }
      uint64_t v29 = *a1;
      *a1 = v24;
      a1[1] = v22;
      a1[2] = v29;
      a1[3] = v27;
      return 1;
    default:
      unint64_t v14 = a1[1];
      uint64_t v15 = (unint64_t *)(a1 + 3);
      unint64_t v16 = a1[3];
      unint64_t v17 = a1[5];
      if (v16 > v14)
      {
        uint64_t v18 = *a1;
        if (v17 <= v16)
        {
          *a1 = a1[2];
          a1[1] = v16;
          a1[2] = v18;
          a1[3] = v14;
          if (v17 <= v14) {
            goto LABEL_32;
          }
          a1[2] = a1[4];
          a1[4] = v18;
          unint64_t v19 = (unint64_t *)(a1 + 3);
        }
        else
        {
          *a1 = a1[4];
          a1[4] = v18;
          unint64_t v19 = (unint64_t *)(a1 + 1);
        }
        uint64_t v15 = (unint64_t *)(a1 + 5);
        goto LABEL_31;
      }
      if (v17 > v16)
      {
        uint64_t v33 = a1[2];
        uint64_t v34 = a1[4];
        a1[2] = v34;
        a1[3] = v17;
        a1[4] = v33;
        a1[5] = v16;
        if (v17 > v14)
        {
          uint64_t v35 = *a1;
          *a1 = v34;
          a1[2] = v35;
          unint64_t v19 = (unint64_t *)(a1 + 1);
LABEL_31:
          *unint64_t v19 = v17;
          unint64_t *v15 = v14;
        }
      }
LABEL_32:
      uint64_t v37 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v38 = 0;
      int v39 = 0;
      uint64_t v40 = a1 + 4;
      while (1)
      {
        unint64_t v41 = v37[1];
        if (v41 > v40[1]) {
          break;
        }
LABEL_41:
        uint64_t v40 = v37;
        v38 += 16;
        v37 += 2;
        if (v37 == a2) {
          return 1;
        }
      }
      uint64_t v42 = *v37;
      uint64_t v43 = v38;
      do
      {
        uint64_t v44 = (uint64_t *)((char *)a1 + v43);
        uint64_t v45 = *(uint64_t *)((char *)a1 + v43 + 40);
        v44[6] = *(uint64_t *)((char *)a1 + v43 + 32);
        v44[7] = v45;
        if (v43 == -32)
        {
          *a1 = v42;
          a1[1] = v41;
          if (++v39 != 8) {
            goto LABEL_41;
          }
          return v37 + 2 == a2;
        }
        v43 -= 16;
      }
      while (v41 > v44[3]);
      uint64_t v46 = (char *)a1 + v43;
      *((void *)v46 + 6) = v42;
      *((void *)v46 + 7) = v41;
      if (++v39 != 8) {
        goto LABEL_41;
      }
      return v37 + 2 == a2;
  }
}

uint64_t *sub_19E266850(uint64_t *result, uint64_t *a2, void *a3, void *a4)
{
  unint64_t v4 = a2[1];
  BOOL v5 = result + 1;
  uint64_t v6 = a3 + 1;
  unint64_t v7 = a3[1];
  if (v4 <= result[1])
  {
    if (v7 > v4)
    {
      uint64_t v10 = *a2;
      *a2 = *a3;
      *a3 = v10;
      unint64_t v7 = a2[1];
      a2[1] = a3[1];
      a3[1] = v7;
      if ((unint64_t)a2[1] > *v5)
      {
        uint64_t v11 = *result;
        uint64_t *result = *a2;
        *a2 = v11;
        unint64_t v9 = result + 1;
        unint64_t v12 = a2 + 1;
LABEL_10:
        uint64_t v15 = *v9;
        *unint64_t v9 = *v12;
        *unint64_t v12 = v15;
        unint64_t v7 = *v6;
      }
    }
  }
  else
  {
    uint64_t v8 = *result;
    if (v7 > v4)
    {
      uint64_t *result = *a3;
      *a3 = v8;
      unint64_t v9 = result + 1;
LABEL_9:
      unint64_t v12 = a3 + 1;
      goto LABEL_10;
    }
    uint64_t *result = *a2;
    *a2 = v8;
    unint64_t v13 = result[1];
    result[1] = a2[1];
    a2[1] = v13;
    unint64_t v7 = *v6;
    if (*v6 > v13)
    {
      uint64_t v14 = *a2;
      *a2 = *a3;
      *a3 = v14;
      unint64_t v9 = a2 + 1;
      goto LABEL_9;
    }
  }
  if (a4[1] > v7)
  {
    uint64_t v16 = *a3;
    *a3 = *a4;
    *a4 = v16;
    uint64_t v17 = a3[1];
    a3[1] = a4[1];
    a4[1] = v17;
    if (a3[1] > (unint64_t)a2[1])
    {
      uint64_t v18 = *a2;
      *a2 = *a3;
      *a3 = v18;
      uint64_t v19 = a2[1];
      a2[1] = a3[1];
      a3[1] = v19;
      if ((unint64_t)a2[1] > *v5)
      {
        uint64_t v20 = *result;
        uint64_t *result = *a2;
        *a2 = v20;
        uint64_t v21 = result[1];
        result[1] = a2[1];
        a2[1] = v21;
      }
    }
  }
  return result;
}

void sub_19E266DEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, void *a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  _Unwind_Resume(a1);
}

void sub_19E2671C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E2671E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E267268(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E267320(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E26733C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E267354(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E267628(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E26763C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E267650(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E267664(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E267678(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E26768C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E2676A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E2676B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E2676C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E2677F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E267814(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E267830(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E2678F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E267910(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E267928(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E2679F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E267A14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E267A30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E267B00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E267B20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E267B3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E267C00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E267C1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E267C34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E267D9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E267DE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E267E88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E267E9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E267F3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19E268090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_19E2680B8(_Unwind_Exception *a1)
{
  unint64_t v7 = v5;

  _Unwind_Resume(a1);
}

void sub_19E2680E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E268104(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E26811C(uint64_t a1, void *a2)
{
  id v29 = a2;
  objc_msgSend_data(*(void **)(a1 + 32), v3, v4, v5);
  id v6 = objc_claimAutoreleasedReturnValue();
  uint64_t v10 = objc_msgSend_contents(v6, v7, v8, v9);

  uint64_t v11 = *(void *)(a1 + 40);
  uint64_t v15 = objc_msgSend_rows(*(void **)(a1 + 32), v12, v13, v14);
  uint64_t v19 = objc_msgSend_columns(*(void **)(a1 + 32), v16, v17, v18);
  NSLog(&cfstr_TuXTu.isa, v11, v15, v19);
  for (unint64_t i = 0; i < objc_msgSend_rows(*(void **)(a1 + 32), v20, v21, v22); ++i)
  {
    for (unint64_t j = 0; j < objc_msgSend_columns(*(void **)(a1 + 32), v24, v25, v26); ++j)
    {
      uint64_t v28 = objc_msgSend_columns(*(void **)(a1 + 32), v20, v21, v22);
      NSLog(&cfstr_Lf.isa, *(float *)(v10 + 4 * (j + i * v28)));
    }
  }
}

void sub_19E268218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_19E268230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_19E268244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_19E268258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_19E268630(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E268730(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E2687D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E268B0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E268B94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E268BA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E268BBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E268BD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E268BE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E268BF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E268C10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E268C28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E268C38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E268C50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_19E268C64(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend_network(*(void **)(a1 + 32), a2, a3, a4);
  uint64_t v9 = objc_msgSend_deviceHandler(v5, v6, v7, v8);
  uint64_t v13 = objc_msgSend_vocabSize(*(void **)(a1 + 32), v10, v11, v12);
  uint64_t v17 = objc_msgSend_embeddingDimension(*(void **)(a1 + 32), v14, v15, v16);
  uint64_t v19 = objc_msgSend_weightMatrixWithRows_columns_stdDev_initialValues_columnMajor_(v9, v18, v13, v17, 0, 0, 0.0);

  unint64_t v23 = objc_msgSend_network(*(void **)(a1 + 32), v20, v21, v22);
  unint64_t v27 = objc_msgSend_deviceHandler(v23, v24, v25, v26);
  uint64_t v30 = objc_msgSend_matrixToVector_(v27, v28, (uint64_t)v19, v29);

  return v30;
}

void sub_19E268D34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E268D60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E268D70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E269274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *__p,uint64_t a21)
{
  _Unwind_Resume(a1);
}

void sub_19E269BB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  _Unwind_Resume(a1);
}

void sub_19E269DA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E269DC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E269DD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E26A404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_19E26A9F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_19E26AB5C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend_weights(*(void **)(a1 + 32), a2, a3, a4);

  if (v5)
  {
    uint64_t v9 = objc_msgSend_weights(*(void **)(a1 + 32), v6, v7, v8);
    objc_msgSend_data(v9, v10, v11, v12);
    id v13 = objc_claimAutoreleasedReturnValue();
    uint64_t v17 = objc_msgSend_contents(v13, v14, v15, v16);

    uint64_t v18 = *(void *)(a1 + 40);
    if (v18)
    {
      unint64_t v19 = *(void *)(a1 + 48);
      if (v19)
      {
        uint64_t v21 = *(void *)(a1 + 56);
        uint64_t v20 = *(void *)(a1 + 64);
        uint64_t v22 = 4 * v19;
        if (v19 > 7)
        {
          if (v19 == (v19 & 0xFFFFFFFFFFFFFFF8))
          {
            uint64_t v25 = 0;
            uint64_t v26 = (_OWORD *)(v21 + 16);
            unint64_t v27 = (long long *)(v17 + 16);
            uint64_t v28 = (int *)v17;
            uint64_t v29 = *(_DWORD **)(a1 + 56);
            do
            {
              uint64_t v30 = v27;
              uint64_t v31 = v26;
              unint64_t v32 = v19 & 0xFFFFFFFFFFFFFFF8;
              if ((unint64_t)(v21 + v22 * v25 - (v20 * v25 + v17)) >= 0x20)
              {
                do
                {
                  long long v37 = *v30;
                  *(v31 - 1) = *(v30 - 1);
                  _OWORD *v31 = v37;
                  v31 += 2;
                  v30 += 2;
                  v32 -= 8;
                }
                while (v32);
              }
              else
              {
                uint64_t v33 = v28;
                uint64_t v34 = v29;
                unint64_t v35 = v19;
                do
                {
                  int v36 = *v33++;
                  *v34++ = v36;
                  --v35;
                }
                while (v35);
              }
              ++v25;
              uint64_t v26 = (_OWORD *)((char *)v26 + v22);
              unint64_t v27 = (long long *)((char *)v27 + v20);
              uint64_t v29 = (_DWORD *)((char *)v29 + v22);
              uint64_t v28 = (int *)((char *)v28 + v20);
            }
            while (v25 != v18);
          }
          else
          {
            uint64_t v38 = 0;
            uint64_t v39 = 0;
            uint64_t v40 = (long long *)(v17 + 16);
            unint64_t v41 = (_OWORD *)(v21 + 16);
            uint64_t v42 = v17;
            do
            {
              if ((unint64_t)(v21 + v22 * v39 - (v20 * v39 + v17)) >= 0x20)
              {
                unint64_t v44 = v19 & 0xFFFFFFFFFFFFFFF8;
                uint64_t v45 = v41;
                uint64_t v46 = v40;
                do
                {
                  long long v47 = *v46;
                  *(v45 - 1) = *(v46 - 1);
                  *uint64_t v45 = v47;
                  v46 += 2;
                  v45 += 2;
                  v44 -= 8;
                }
                while (v44);
                unint64_t v43 = v19 & 0xFFFFFFFFFFFFFFF8;
              }
              else
              {
                unint64_t v43 = 0;
              }
              uint64_t v48 = (_DWORD *)(v21 + 4 * (v43 + v38));
              unint64_t v49 = (int *)(v42 + 4 * v43);
              unint64_t v50 = v19 - v43;
              do
              {
                int v51 = *v49++;
                *v48++ = v51;
                --v50;
              }
              while (v50);
              ++v39;
              uint64_t v40 = (long long *)((char *)v40 + v20);
              unint64_t v41 = (_OWORD *)((char *)v41 + v22);
              v38 += v19;
              v42 += v20;
            }
            while (v39 != v18);
          }
        }
        else
        {
          unint64_t v23 = (_DWORD *)(v17 + 12);
          uint64_t v24 = (_DWORD *)(v21 + 12);
          do
          {
            *(v24 - 3) = *(v23 - 3);
            if (v19 != 1)
            {
              *(v24 - 2) = *(v23 - 2);
              if (v19 != 2)
              {
                *(v24 - 1) = *(v23 - 1);
                if (v19 != 3)
                {
                  _DWORD *v24 = *v23;
                  if (v19 != 4)
                  {
                    v24[1] = v23[1];
                    if (v19 != 5)
                    {
                      v24[2] = v23[2];
                      if (v19 != 6) {
                        v24[3] = v23[3];
                      }
                    }
                  }
                }
              }
            }
            unint64_t v23 = (_DWORD *)((char *)v23 + v20);
            uint64_t v24 = (_DWORD *)((char *)v24 + v22);
            --v18;
          }
          while (v18);
        }
      }
    }
  }
}

void sub_19E26ADAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E26ADC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E26B0E8(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_19E26B0E8(a1, *a2);
    sub_19E26B0E8(a1, a2[1]);
    uint64_t v4 = (void *)a2[5];
    if (v4)
    {
      a2[6] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

void sub_19E26B14C(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)v4) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v11 = &v4[3 * a2];
      uint64_t v12 = 24 * a2;
      id v13 = v4 + 1;
      do
      {
        void *v13 = 0;
        v13[1] = 0;
        *(v13 - 1) = v13;
        v13 += 3;
        v12 -= 24;
      }
      while (v12);
      a1[1] = v11;
    }
    else
    {
      a1[1] = v4;
    }
    return;
  }
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (((char *)v4 - (unsigned char *)*a1) >> 3);
  unint64_t v7 = v6 + a2;
  if (v6 + a2 > 0xAAAAAAAAAAAAAAALL) {
    sub_19E13D694();
  }
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)*a1) >> 3);
  if (2 * v8 > v7) {
    unint64_t v7 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v7;
  }
  if (v9)
  {
    if (v9 > 0xAAAAAAAAAAAAAAALL) {
      sub_19E13C418();
    }
    uint64_t v10 = (char *)operator new(24 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v14 = &v10[24 * v6];
  uint64_t v15 = &v10[24 * v9];
  uint64_t v16 = 24 * a2;
  uint64_t v17 = &v14[24 * a2];
  uint64_t v18 = v14 + 8;
  do
  {
    *uint64_t v18 = 0;
    v18[1] = 0;
    *(v18 - 1) = v18;
    v18 += 3;
    v16 -= 24;
  }
  while (v16);
  uint64_t v20 = (char *)*a1;
  unint64_t v19 = (char *)a1[1];
  if (v19 == *a1)
  {
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (!v19) {
      return;
    }
    goto LABEL_31;
  }
  uint64_t v21 = 0;
  do
  {
    while (1)
    {
      uint64_t v22 = &v14[v21];
      *((void *)v22 - 3) = *(void *)&v19[v21 - 24];
      unint64_t v23 = &v19[v21 - 16];
      uint64_t v24 = *(void *)v23;
      *(void *)&v14[v21 - 16] = *(void *)v23;
      uint64_t v25 = (uint64_t)&v14[v21 - 16];
      uint64_t v26 = *(void *)&v19[v21 - 8];
      *((void *)v22 - 1) = v26;
      if (!v26) {
        break;
      }
      *(void *)(v24 + 16) = v25;
      *(void *)&v19[v21 - 24] = v23;
      *(void *)unint64_t v23 = 0;
      *(void *)&v19[v21 - 8] = 0;
      v21 -= 24;
      if (&v19[v21] == v20) {
        goto LABEL_25;
      }
    }
    *((void *)v22 - 3) = v25;
    v21 -= 24;
  }
  while (&v19[v21] != v20);
LABEL_25:
  unint64_t v27 = (char *)*a1;
  unint64_t v19 = (char *)a1[1];
  *a1 = &v14[v21];
  a1[1] = v17;
  a1[2] = v15;
  if (v19 != v27)
  {
    do
    {
      uint64_t v28 = v19 - 24;
      sub_19E26B0E8((uint64_t)(v19 - 24), *((void **)v19 - 2));
      unint64_t v19 = v28;
    }
    while (v28 != v27);
    unint64_t v19 = v27;
  }
  if (v19)
  {
LABEL_31:
    operator delete(v19);
  }
}

unint64_t sub_19E26B360(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 32);
  if (v1 == 2) {
    return (unint64_t)(*(void *)a1 + 2 * *(void *)(a1 + 24) - *(void *)(a1 + 8)) / *(void *)(a1 + 16)
  }
         + 1;
  if (v1) {
    return (unint64_t)(double)(unint64_t)(*(void *)a1 / *(void *)(a1 + 16));
  }
  return vcvtps_u32_f32((float)(unint64_t)(*(void *)a1 - *(void *)(a1 + 8) + 1) / (float)*(unint64_t *)(a1 + 16));
}

unint64_t sub_19E26B3C8(uint64_t a1)
{
  unint64_t result = *(unsigned int *)(a1 + 32);
  if (result)
  {
    if (result == 2) {
      return *(void *)(a1 + 24);
    }
    else {
      return (*(void *)(a1 + 8)
    }
            - *(void *)a1
            + ((unint64_t)(double)(unint64_t)(*(void *)a1 / *(void *)(a1 + 16)) - 1)
            * *(void *)(a1 + 16)
            + 1) >> 1;
  }
  return result;
}

uint64_t sub_19E26B410(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  sub_19E26B8EC((uint64_t)v39, "filter", a4);
  sub_19E26B8EC((uint64_t)__p, "stride", a5);
  v38[0] = 0;
  v38[1] = 0;
  long long v37 = v38;
  sub_19E26BA00((uint64_t **)&v37, (uint64_t *)v38, (const void **)v39, (uint64_t)v39);
  sub_19E26BA00((uint64_t **)&v37, (uint64_t *)v38, (const void **)__p, (uint64_t)__p);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  uint64_t v14 = (uint64_t *)v37;
  if (v37 != v38)
  {
    do
    {
      sub_19E26BA00((uint64_t **)a1, (uint64_t *)(a1 + 8), (const void **)v14 + 4, (uint64_t)(v14 + 4));
      uint64_t v34 = (char *)v14[1];
      if (v34)
      {
        do
        {
          unint64_t v35 = (char **)v34;
          uint64_t v34 = *(char **)v34;
        }
        while (v34);
      }
      else
      {
        do
        {
          unint64_t v35 = (char **)v14[2];
          BOOL v36 = *v35 == (char *)v14;
          uint64_t v14 = (uint64_t *)v35;
        }
        while (!v36);
      }
      uint64_t v14 = (uint64_t *)v35;
    }
    while (v35 != v38);
  }
  sub_19E15A064((uint64_t)&v37, v38[0]);
  if (v42 < 0)
  {
    operator delete(__p[0]);
    if ((v40 & 0x80000000) == 0) {
      goto LABEL_4;
    }
LABEL_19:
    operator delete(v39[0]);
    goto LABEL_4;
  }
  if (v40 < 0) {
    goto LABEL_19;
  }
LABEL_4:
  *(_DWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = a3[2];
  *(void *)(a1 + 112) = a2;
  uint64_t v15 = *a3;
  LODWORD(v37) = 0;
  uint64_t v16 = *(unsigned int *)(a4 + 16);
  if (v16 == -1) {
    goto LABEL_20;
  }
  v39[0] = &v37;
  uint64_t v17 = ((uint64_t (*)(void **, uint64_t))*(&off_1EF0AC100 + v16))(v39, a4);
  LODWORD(v37) = 0;
  uint64_t v18 = *(unsigned int *)(a5 + 16);
  if (v18 == -1) {
    goto LABEL_20;
  }
  uint64_t v19 = v17;
  v39[0] = &v37;
  uint64_t v20 = ((uint64_t (*)(void **, uint64_t))*(&off_1EF0AC100 + v18))(v39, a5);
  LODWORD(v37) = 0;
  uint64_t v21 = *(unsigned int *)(a7 + 16);
  if (v21 == -1) {
    goto LABEL_20;
  }
  uint64_t v22 = v20;
  v39[0] = &v37;
  uint64_t v23 = ((uint64_t (*)(void **, uint64_t))*(&off_1EF0AC100 + v21))(v39, a7);
  *(void *)(a1 + 24) = v15;
  *(void *)(a1 + 32) = v19;
  *(void *)(a1 + 40) = v22;
  *(void *)(a1 + 48) = v23;
  *(_DWORD *)(a1 + 56) = a6;
  uint64_t v24 = a3[1];
  LODWORD(v37) = 1;
  uint64_t v25 = *(unsigned int *)(a4 + 16);
  if (v25 == -1) {
    goto LABEL_20;
  }
  v39[0] = &v37;
  uint64_t v26 = ((uint64_t (*)(void **, uint64_t))*(&off_1EF0AC100 + v25))(v39, a4);
  LODWORD(v37) = 1;
  uint64_t v27 = *(unsigned int *)(a5 + 16);
  if (v27 == -1
    || (uint64_t v28 = v26,
        v39[0] = &v37,
        uint64_t v29 = ((uint64_t (*)(void **, uint64_t))*(&off_1EF0AC100 + v27))(v39, a5),
        LODWORD(v37) = 1,
        uint64_t v30 = *(unsigned int *)(a7 + 16),
        v30 == -1))
  {
LABEL_20:
    sub_19E254898();
  }
  uint64_t v31 = v29;
  v39[0] = &v37;
  uint64_t v32 = ((uint64_t (*)(void **, uint64_t))*(&off_1EF0AC100 + v30))(v39, a7);
  *(void *)(a1 + 64) = v24;
  *(void *)(a1 + 72) = v28;
  *(void *)(a1 + 80) = v31;
  *(void *)(a1 + 88) = v32;
  *(_DWORD *)(a1 + 96) = a6;
  return a1;
}

void sub_19E26B708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E26B77C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 320);
  uint64_t v3 = *(void *)(a2 + 328);
  *(void *)&long long v4 = (int)v2;
  *((void *)&v4 + 1) = SHIDWORD(v2);
  long long v15 = v4;
  uint64_t v5 = *(int *)(a2 + 136);
  uint64_t v6 = *(int *)(a2 + 256);
  int v16 = 1;
  *(void *)&long long v4 = (int)v3;
  *((void *)&v4 + 1) = SHIDWORD(v3);
  long long v13 = v4;
  int v14 = 1;
  int v7 = *(_DWORD *)(a2 + 336);
  uint64_t v8 = *(int *)(a2 + 344);
  v11[0] = *(int *)(a2 + 340);
  v11[1] = v8;
  int v12 = 1;
  uint64_t v9 = *(void *)(a2 + 128);
  *(void *)&long long v4 = (int)v9;
  *((void *)&v4 + 1) = SHIDWORD(v9);
  long long v17 = v4;
  uint64_t v18 = v5;
  return sub_19E26B410(a1, v6, (uint64_t *)&v17, (uint64_t)&v15, (uint64_t)&v13, v7, (uint64_t)v11);
}

uint64_t sub_19E26B7FC(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  long long v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  uint64_t v5 = (const void ***)(a2 + 8);
  uint64_t v6 = *(const void ***)a2;
  if (*(void *)a2 != a2 + 8)
  {
    do
    {
      sub_19E26BA00((uint64_t **)a1, v4, v6 + 4, (uint64_t)(v6 + 4));
      uint64_t v11 = (const void **)v6[1];
      if (v11)
      {
        do
        {
          int v12 = (const void ***)v11;
          uint64_t v11 = (const void **)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          int v12 = (const void ***)v6[2];
          BOOL v13 = *v12 == v6;
          uint64_t v6 = (const void **)v12;
        }
        while (!v13);
      }
      uint64_t v6 = (const void **)v12;
    }
    while (v12 != v5);
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  long long v7 = *(_OWORD *)(a2 + 40);
  long long v8 = *(_OWORD *)(a2 + 56);
  long long v9 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v9;
  *(_OWORD *)(a1 + 56) = v8;
  *(_OWORD *)(a1 + 40) = v7;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  return a1;
}

void sub_19E26B8D4(void *a1)
{
  sub_19E15A064(v1, *(char **)(v1 + 8));
  sub_19E13A9BC(a1);
}

uint64_t sub_19E26B8EC(uint64_t a1, char *__s, uint64_t a3)
{
  size_t v6 = strlen(__s);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    sub_19E13C370();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    long long v8 = operator new(v9 + 1);
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v10 | 0x8000000000000000;
    *(void *)a1 = v8;
    goto LABEL_8;
  }
  *(unsigned char *)(a1 + 23) = v6;
  long long v8 = (void *)a1;
  if (v6) {
LABEL_8:
  }
    memmove(v8, __s, v7);
  *((unsigned char *)v8 + v7) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 40) = -1;
  uint64_t v11 = *(unsigned int *)(a3 + 16);
  if (v11 != -1)
  {
    ((void (*)(char *))*(&off_1EF0AC0F0 + v11))(&v13);
    *(_DWORD *)(a1 + 40) = v11;
  }
  return a1;
}

void sub_19E26B9E8(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

__n128 sub_19E26B9F4(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

char *sub_19E26BA00(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  size_t v6 = sub_19E159C68(a1, a2, &v16, &v15, a3);
  size_t v7 = (char *)*v6;
  if (!*v6)
  {
    long long v8 = v6;
    size_t v7 = (char *)operator new(0x50uLL);
    uint64_t v9 = v7 + 32;
    if (*(char *)(a4 + 23) < 0)
    {
      sub_19E13C2D0(v9, *(void **)a4, *(void *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)uint64_t v9 = *(_OWORD *)a4;
      *((void *)v7 + 6) = *(void *)(a4 + 16);
    }
    v7[56] = 0;
    *((_DWORD *)v7 + 18) = -1;
    uint64_t v10 = *(unsigned int *)(a4 + 40);
    if (v10 != -1)
    {
      ((void (*)(char *))*(&off_1EF0AC0F0 + v10))(&v17);
      *((_DWORD *)v7 + 18) = v10;
    }
    uint64_t v11 = v16;
    *(void *)size_t v7 = 0;
    *((void *)v7 + 1) = 0;
    *((void *)v7 + 2) = v11;
    uint64_t *v8 = (uint64_t)v7;
    int v12 = (uint64_t *)**a1;
    char v13 = (uint64_t *)v7;
    if (v12)
    {
      *a1 = v12;
      char v13 = (uint64_t *)*v8;
    }
    sub_19E13C8A0(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void sub_19E26BB10(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19E26BB28(uint64_t a1, uint64_t a2, _DWORD *a3, long long *a4, uint64_t a5, long long *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)a1 = &unk_1EF0AB0F0;
  *(void *)(a1 + 8) = a2;
  long long v11 = *a4;
  long long v12 = a4[1];
  *(void *)(a1 + 48) = *((void *)a4 + 4);
  *(_OWORD *)(a1 + 16) = v11;
  *(_OWORD *)(a1 + 32) = v12;
  long long v13 = *a6;
  long long v14 = a6[1];
  uint64_t v15 = *((void *)a6 + 4);
  *(void *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 56) = v13;
  *(_OWORD *)(a1 + 72) = v14;
  *(void *)(a1 + 88) = v15;
  *(void *)(a1 + 96) = a5;
  *(void *)(a1 + 104) = a7;
  *(void *)(a1 + 112) = a8;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  char v17 = *(const void **)a9;
  uint64_t v16 = *(void *)(a9 + 8);
  int64_t v18 = v16 - *(void *)a9;
  if (v16 != *(void *)a9)
  {
    if (v18 < 0) {
      sub_19E13D694();
    }
    uint64_t v19 = (char *)operator new(v16 - *(void *)a9);
    *(void *)(a1 + 120) = v19;
    *(void *)(a1 + 128) = v19;
    uint64_t v20 = &v19[4 * (v18 >> 2)];
    *(void *)(a1 + 136) = v20;
    memcpy(v19, v17, v18);
    *(void *)(a1 + 128) = v20;
  }
  *(_DWORD *)(a1 + 144) = *a3;
  return a1;
}

void sub_19E26BBFC(_Unwind_Exception *exception_object)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 128) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E26BC18(uint64_t a1)
{
  if (*(void *)(a1 + 48) * *(void *)(a1 + 40))
  {
    uint64_t v2 = 0;
    unint64_t v3 = 0;
    while (1)
    {
      uint64_t v4 = **(void **)(a1 + 96);
      unint64_t v5 = (*(_DWORD *)(a1 + 16) * *(_DWORD *)(a1 + 24) * *(_DWORD *)(a1 + 32));
      uint64_t v6 = (int)v5;
      size_t v7 = (const float *)(v4 + 4 * (int)v5 * v3);
      uint64_t v8 = **(void **)(a1 + 104);
      uint64_t v9 = *(_DWORD *)(a1 + 56) * *(_DWORD *)(a1 + 64) * *(_DWORD *)(a1 + 72);
      uint64_t v10 = (float *)(v8 + 4 * v9 * v3);
      switch(*(_DWORD *)(a1 + 144))
      {
        case 4:
          if (!(v5 << 32)) {
            goto LABEL_4;
          }
          if ((unint64_t)(int)v5 <= 1) {
            unint64_t v5 = 1;
          }
          else {
            unint64_t v5 = (int)v5;
          }
          if (v5 >= 0xC && v8 + v9 * 4 * v3 - (v4 + v6 * 4 * v3) >= 0x20)
          {
            unint64_t v11 = v5 & 0xFFFFFFFFFFFFFFF8;
            uint64_t v16 = (float32x4_t *)(v4 + v6 * v2 + 16);
            char v17 = (float32x4_t *)(v8 + v9 * v2 + 16);
            unint64_t v18 = v5 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              float32x4_t v19 = vsqrtq_f32(*v16);
              v17[-1] = vsqrtq_f32(v16[-1]);
              *char v17 = v19;
              v16 += 2;
              v17 += 2;
              v18 -= 8;
            }
            while (v18);
            if (v5 == v11) {
              goto LABEL_4;
            }
          }
          else
          {
            unint64_t v11 = 0;
          }
          long long v12 = (float *)(v8 + 4 * v11 + v9 * v2);
          long long v13 = (float *)(v4 + v6 * v2 + 4 * v11);
          unint64_t v14 = v5 - v11;
          do
          {
            float v15 = *v13++;
            *v12++ = sqrtf(v15);
            --v14;
          }
          while (v14);
LABEL_4:
          ++v3;
          v2 += 4;
          if (*(void *)(a1 + 48) * *(void *)(a1 + 40) <= v3) {
            goto LABEL_24;
          }
          break;
        case 6:
          vDSP_sve(v7, 1, v10, (int)v5);
          goto LABEL_4;
        case 7:
          vDSP_meanv(v7, 1, v10, (int)v5);
          goto LABEL_4;
        case 8:
          vDSP_measqv(v7, 1, v10, (int)v5);
          goto LABEL_4;
        case 9:
          vDSP_rmsqv(v7, 1, v10, (int)v5);
          goto LABEL_4;
        case 0xA:
          vDSP_svesq(v7, 1, v10, (int)v5);
          goto LABEL_4;
        default:
          goto LABEL_4;
      }
    }
  }
LABEL_24:
  v25[0] = *(_DWORD *)(a1 + 16) * *(_DWORD *)(a1 + 24) * *(_DWORD *)(a1 + 32);
  v25[1] = 0x3F80000000010020;
  v25[2] = 0;
  v24[1] = 0x3F80000000010020;
  v24[2] = 0;
  v24[0] = v25[0];
  memset(v23, 0, sizeof(v23));
  switch(*(void *)(a1 + 112))
  {
    case 1:
      LODWORD(v23[0]) = 3;
      goto LABEL_30;
    case 2:
      LODWORD(v23[0]) = 4;
      goto LABEL_30;
    case 4:
      LODWORD(v23[0]) = 11;
      goto LABEL_30;
    case 5:
      LODWORD(v23[0]) = 1;
      goto LABEL_30;
    case 8:
    case 0xALL:
    case 0xCLL:
      return;
    case 9:
      LODWORD(v23[0]) = 8;
      *(void *)((char *)v23 + 4) = **(void **)(a1 + 120);
      goto LABEL_30;
    default:
LABEL_30:
      uint64_t v20 = (void *)MEMORY[0x19F3BB110](v25, v24, v23, 0);
      uint64_t v21 = v20;
      if (v20)
      {
        int v22 = *(_DWORD *)(a1 + 16) * *(_DWORD *)(a1 + 24) * *(_DWORD *)(a1 + 32);
        BNNSFilterApplyBatch(v20, v22 * *(_DWORD *)(a1 + 40) * *(_DWORD *)(a1 + 48) / (unint64_t)v22, **(const void ***)(a1 + 104), v22, **(void ***)(a1 + 104), v22);
      }
      BNNSFilterDestroy(v21);
      return;
  }
}

void *sub_19E26BF60(void *a1)
{
  *a1 = &unk_1EF0AB0F0;
  uint64_t v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_19E26BFB0(void *__p)
{
  void *__p = &unk_1EF0AB0F0;
  uint64_t v2 = (void *)__p[15];
  if (v2)
  {
    __p[16] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

void sub_19E26C190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_19E26C228(uint64_t a1, uint64_t a2, uint64_t a3, void *__src)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_19E13C2D0(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a2;
    uint64_t v42 = *(void *)(a2 + 16);
  }
  sub_19E25BD4C(a1, (long long *)__p, a3, __src);
  if (SHIBYTE(v42) < 0) {
    operator delete(__p[0]);
  }
  *(void *)a1 = &unk_1EF0AB568;
  sub_19E26B77C(a1 + 1016, (uint64_t)__src);
  *(_DWORD *)(a1 + 1136) = 0;
  *(void *)(a1 + 1184) = 0;
  *(void *)(a1 + 1200) = 0;
  *(void *)(a1 + 1192) = 0;
  *(void *)(a1 + 1208) = __src[7];
  unint64_t v7 = *(void *)(a1 + 1040);
  unint64_t v8 = *(void *)(a1 + 1080);
  uint64_t v9 = *(void *)(a1 + 1120);
  LODWORD(__s2) = 1;
  unint64_t v45 = v7;
  unint64_t v46 = v8;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  uint64_t v47 = v9;
  sub_19E13C5C0(a1 + 16, (int *)&__s2, &v50);
  unint64_t v10 = sub_19E26B360(a1 + 1040);
  unint64_t v11 = sub_19E26B360(a1 + 1080);
  uint64_t v12 = *(void *)(a1 + 1128);
  LODWORD(__s2) = 9;
  unint64_t v45 = v10;
  unint64_t v46 = v11;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  uint64_t v47 = v12;
  sub_19E13C5C0(a1 + 40, (int *)&__s2, &v50);
  uint64_t v13 = __src[56];
  HIBYTE(v46) = 6;
  strcpy((char *)&__s2, "weight");
  uint64_t v47 = v13;
  uint64_t v14 = __src[72];
  char v51 = 4;
  strcpy((char *)&v48, "bias");
  uint64_t v52 = v14;
  v40[0] = 0;
  v40[1] = 0;
  uint64_t v39 = v40;
  sub_19E254AAC((uint64_t **)&v39, (uint64_t *)v40, (const void **)&__s2, (uint64_t)&__s2);
  sub_19E254AAC((uint64_t **)&v39, (uint64_t *)v40, (const void **)&v48, (uint64_t)&v48);
  if (v51 < 0)
  {
    operator delete(v48);
    if ((SHIBYTE(v46) & 0x80000000) == 0) {
      goto LABEL_8;
    }
LABEL_44:
    operator delete(__s2);
    goto LABEL_8;
  }
  if (SHIBYTE(v46) < 0) {
    goto LABEL_44;
  }
LABEL_8:
  HIBYTE(v46) = 4;
  strcpy((char *)&__s2, "bias");
  float v15 = v40[0];
  do
  {
    unint64_t v16 = v15[55];
    int v17 = (char)v16;
    if ((v16 & 0x80u) != 0) {
      unint64_t v16 = *((void *)v15 + 5);
    }
    if (v17 >= 0) {
      unint64_t v18 = v15 + 32;
    }
    else {
      unint64_t v18 = (const void *)*((void *)v15 + 4);
    }
    if (v16 >= 4) {
      size_t v19 = 4;
    }
    else {
      size_t v19 = v16;
    }
    BOOL v20 = v16 < 4;
    int v21 = memcmp(v18, &__s2, v19);
    BOOL v22 = v21 < 0;
    if (!v21) {
      BOOL v22 = v20;
    }
    if (v22) {
      uint64_t v23 = v15 + 8;
    }
    else {
      uint64_t v23 = v15;
    }
    float v15 = *(char **)v23;
  }
  while (*(void *)v23);
  p_s2 = &__s2;
  uint64_t v24 = sub_19E26CE00((uint64_t **)&v39, (const void **)&__s2, (uint64_t)&unk_19E351150, (long long **)&p_s2)[7];
  uint64_t v25 = *(void *)(a1 + 1128);
  *(_DWORD *)(a1 + 1184) = 0;
  *(void *)(a1 + 1192) = v25;
  *(void *)(a1 + 1200) = v24;
  if (SHIBYTE(v46) < 0) {
    operator delete(__s2);
  }
  HIBYTE(v46) = 6;
  strcpy((char *)&__s2, "weight");
  uint64_t v26 = v40[0];
  do
  {
    unint64_t v27 = v26[55];
    int v28 = (char)v27;
    if ((v27 & 0x80u) != 0) {
      unint64_t v27 = *((void *)v26 + 5);
    }
    if (v28 >= 0) {
      uint64_t v29 = v26 + 32;
    }
    else {
      uint64_t v29 = (const void *)*((void *)v26 + 4);
    }
    if (v27 >= 6) {
      size_t v30 = 6;
    }
    else {
      size_t v30 = v27;
    }
    BOOL v31 = v27 < 6;
    int v32 = memcmp(v29, &__s2, v30);
    BOOL v33 = v32 < 0;
    if (!v32) {
      BOOL v33 = v31;
    }
    if (v33) {
      uint64_t v34 = v26 + 8;
    }
    else {
      uint64_t v34 = v26;
    }
    uint64_t v26 = *(char **)v34;
  }
  while (*(void *)v34);
  p_s2 = &__s2;
  unint64_t v35 = sub_19E26CE00((uint64_t **)&v39, (const void **)&__s2, (uint64_t)&unk_19E351150, (long long **)&p_s2)[7];
  uint64_t v36 = sub_19E254720(a1 + 1016, 0);
  uint64_t v37 = sub_19E254720(a1 + 1016, 1);
  *(_DWORD *)(a1 + 1136) = 1;
  *(void *)(a1 + 1144) = v36;
  *(void *)(a1 + 1152) = v37;
  *(_OWORD *)(a1 + 1160) = *(_OWORD *)(a1 + 1120);
  *(void *)(a1 + 1176) = v35;
  if (SHIBYTE(v46) < 0) {
    operator delete(__s2);
  }
  sub_19E15A064((uint64_t)&v39, v40[0]);
  return a1;
}

void sub_19E26C608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, char *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  sub_19E15A064((uint64_t)&a10, a11);
  sub_19E15A064(v24, *(char **)(v23 + 1024));
  sub_19E25BF30(v23);
  _Unwind_Resume(a1);
}

void sub_19E26C650()
{
}

void sub_19E26C658()
{
}

void sub_19E26C660()
{
}

void sub_19E26C668()
{
}

void sub_19E26C670(_Unwind_Exception *a1)
{
  sub_19E25BF30(v1);
  _Unwind_Resume(a1);
}

void sub_19E26C684(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a18 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E26C6DC(void *a1, uint64_t a2)
{
  uint64_t v4 = (void *)a1[20];
  unint64_t v5 = (void *)a1[21];
  if (v4 == v5)
  {
    a1[21] = v4;
    if (!a1[31]) {
      goto LABEL_10;
    }
    goto LABEL_8;
  }
  do
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  while (v4 != v5);
  a1[21] = a1[20];
  if (a1[31])
  {
LABEL_8:
    uint64_t v7 = a1[29];
    uint64_t v6 = (uint64_t *)a1[30];
    uint64_t v8 = *v6;
    *(void *)(v8 + 8) = *(void *)(v7 + 8);
    **(void **)(v7 + 8) = v8;
    a1[31] = 0;
    if (v6 != a1 + 29)
    {
      do
      {
        uint64_t v9 = (uint64_t *)v6[1];
        operator delete(v6);
        uint64_t v6 = v9;
      }
      while (v9 != a1 + 29);
    }
  }
LABEL_10:
  unint64_t v10 = *(uint64_t (**)(uint64_t, void *))(*(void *)a2 + 192);

  return v10(a2, a1);
}

uint64_t sub_19E26C7E4(uint64_t a1, int a2, int a3)
{
  *(_DWORD *)(a1 + 280) = a3;
  uint64_t v4 = *(uint64_t **)(a1 + 160);
  unint64_t v5 = *(uint64_t **)(a1 + 168);
  if (v4 != v5)
  {
    uint64_t v6 = (a3 * a2);
    do
    {
      uint64_t v7 = *v4++;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v6);
    }
    while (v4 != v5);
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 32);

  return v8(a1);
}

uint64_t sub_19E26C888(uint64_t **a1, int a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = v4[5];
  uint64_t v6 = v4[6];
  uint64_t v7 = (uint64_t)(a1 + 127);
  unint64_t v8 = sub_19E26B3C8((uint64_t)(a1 + 130));
  uint64_t v9 = sub_19E254720(v7, 0);
  sub_19E254720(v7, 1);
  unint64_t v10 = sub_19E254934(v7, 0);
  sub_19E254934(v7, 1);
  unint64_t v11 = sub_19E26B3C8((uint64_t)(a1 + 135));
  sub_19E254720(v7, 0);
  uint64_t v33 = sub_19E254720(v7, 1);
  sub_19E254934(v7, 0);
  uint64_t v32 = sub_19E254934(v7, 1);
  uint64_t v12 = a1[141];
  int v31 = ((uint64_t (*)(uint64_t **))(*a1)[28])(a1);
  uint64_t result = ((uint64_t (*)(uint64_t **, uint64_t))(*a1)[27])(a1, 1);
  float v15 = a1 + 6;
  uint64_t v14 = (char *)a1[6];
  uint64_t v34 = v12;
  if (v14)
  {
    do
    {
      while (1)
      {
        unint64_t v16 = v14;
        int v17 = *((_DWORD *)v14 + 8);
        if (v17 <= a2) {
          break;
        }
        uint64_t v14 = *(char **)v16;
        float v15 = (uint64_t **)v16;
        if (!*(void *)v16) {
          goto LABEL_9;
        }
      }
      if (v17 >= a2)
      {
        unint64_t v27 = v32;
        uint64_t v26 = v33;
        int v28 = v31;
        goto LABEL_12;
      }
      uint64_t v14 = (char *)*((void *)v16 + 1);
    }
    while (v14);
    float v15 = (uint64_t **)(v16 + 8);
  }
  else
  {
    unint64_t v16 = (char *)(a1 + 6);
  }
LABEL_9:
  uint64_t v29 = result;
  unint64_t v30 = v11;
  unint64_t v18 = v10;
  uint64_t v19 = v9;
  unint64_t v20 = v8;
  uint64_t v21 = v6;
  uint64_t v22 = v5;
  uint64_t v23 = v16;
  unint64_t v16 = (char *)operator new(0x50uLL);
  *((_DWORD *)v16 + 8) = a2;
  *(_OWORD *)(v16 + 40) = 0u;
  *(_OWORD *)(v16 + 56) = 0u;
  *((void *)v16 + 9) = 0;
  *(void *)unint64_t v16 = 0;
  *((void *)v16 + 1) = 0;
  *((void *)v16 + 2) = v23;
  char *v15 = (uint64_t *)v16;
  uint64_t v24 = (uint64_t *)*a1[5];
  uint64_t v25 = (uint64_t *)v16;
  if (v24)
  {
    a1[5] = v24;
    uint64_t v25 = *v15;
  }
  sub_19E13C8A0(a1[6], v25);
  a1[7] = (uint64_t *)((char *)a1[7] + 1);
  uint64_t v5 = v22;
  uint64_t v6 = v21;
  unint64_t v8 = v20;
  uint64_t v9 = v19;
  unint64_t v10 = v18;
  unint64_t v11 = v30;
  int v28 = v31;
  unint64_t v27 = v32;
  uint64_t v26 = v33;
  uint64_t result = v29;
LABEL_12:
  *((void *)v16 + 5) = (v5 + 2 * v8 - v9) / v10 + 1;
  *((void *)v16 + 6) = (v6 + 2 * v11 - v26) / v27 + 1;
  *((void *)v16 + 7) = v34;
  *((void *)v16 + 8) = v28;
  *((void *)v16 + 9) = (int)result;
  return result;
}

BOOL sub_19E26CAE0(uint64_t a1, void *a2, int a3)
{
  if ((a3 - 8) < 0xFFFFFFF9) {
    return 0;
  }
  unint64_t v8 = (uint64_t **)(a1 + 24);
  uint64_t v7 = *(char **)(a1 + 24);
  uint64_t v9 = (uint64_t **)(a1 + 24);
  unint64_t v10 = (char *)(a1 + 24);
  if (v7)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v10 = v7;
        int v11 = *((_DWORD *)v7 + 8);
        if (v11 <= a3) {
          break;
        }
        uint64_t v7 = *(char **)v10;
        uint64_t v9 = (uint64_t **)v10;
        if (!*(void *)v10) {
          goto LABEL_10;
        }
      }
      if (v11 >= a3) {
        break;
      }
      uint64_t v7 = (char *)*((void *)v10 + 1);
      if (!v7)
      {
        uint64_t v9 = (uint64_t **)(v10 + 8);
        goto LABEL_10;
      }
    }
  }
  else
  {
LABEL_10:
    uint64_t v12 = v10;
    unint64_t v10 = (char *)operator new(0x50uLL);
    *((_DWORD *)v10 + 8) = a3;
    *(_OWORD *)(v10 + 40) = 0u;
    *(_OWORD *)(v10 + 56) = 0u;
    *((void *)v10 + 9) = 0;
    *(void *)unint64_t v10 = 0;
    *((void *)v10 + 1) = 0;
    *((void *)v10 + 2) = v12;
    *uint64_t v9 = (uint64_t *)v10;
    uint64_t v13 = **(void **)(a1 + 16);
    uint64_t v14 = (uint64_t *)v10;
    if (v13)
    {
      *(void *)(a1 + 16) = v13;
      uint64_t v14 = *v9;
    }
    sub_19E13C8A0(*(uint64_t **)(a1 + 24), v14);
    ++*(void *)(a1 + 32);
  }
  if (*((void *)v10 + 5) != *a2) {
    return 1;
  }
  float v15 = *v8;
  unint64_t v16 = v8;
  int v17 = (char *)v8;
  if (*v8)
  {
    while (1)
    {
      while (1)
      {
        int v17 = (char *)v15;
        int v18 = *((_DWORD *)v15 + 8);
        if (v18 <= a3) {
          break;
        }
        float v15 = *(uint64_t **)v17;
        unint64_t v16 = (uint64_t **)v17;
        if (!*(void *)v17) {
          goto LABEL_21;
        }
      }
      if (v18 >= a3) {
        break;
      }
      float v15 = (uint64_t *)*((void *)v17 + 1);
      if (!v15)
      {
        unint64_t v16 = (uint64_t **)(v17 + 8);
        goto LABEL_21;
      }
    }
  }
  else
  {
LABEL_21:
    uint64_t v19 = v17;
    int v17 = (char *)operator new(0x50uLL);
    *((_DWORD *)v17 + 8) = a3;
    *(_OWORD *)(v17 + 40) = 0u;
    *(_OWORD *)(v17 + 56) = 0u;
    *((void *)v17 + 9) = 0;
    *(void *)int v17 = 0;
    *((void *)v17 + 1) = 0;
    *((void *)v17 + 2) = v19;
    *unint64_t v16 = (uint64_t *)v17;
    uint64_t v20 = **(void **)(a1 + 16);
    uint64_t v21 = (uint64_t *)v17;
    if (v20)
    {
      *(void *)(a1 + 16) = v20;
      uint64_t v21 = *v16;
    }
    sub_19E13C8A0(*(uint64_t **)(a1 + 24), v21);
    ++*(void *)(a1 + 32);
  }
  if (*((void *)v17 + 6) != a2[1]) {
    return 1;
  }
  uint64_t v22 = *v8;
  uint64_t v23 = (char *)v8;
  if (*v8)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v23 = (char *)v22;
        int v24 = *((_DWORD *)v22 + 8);
        if (v24 <= a3) {
          break;
        }
        uint64_t v22 = *(uint64_t **)v23;
        unint64_t v8 = (uint64_t **)v23;
        if (!*(void *)v23) {
          goto LABEL_32;
        }
      }
      if (v24 >= a3) {
        break;
      }
      uint64_t v22 = (uint64_t *)*((void *)v23 + 1);
      if (!v22)
      {
        unint64_t v8 = (uint64_t **)(v23 + 8);
        goto LABEL_32;
      }
    }
  }
  else
  {
LABEL_32:
    uint64_t v25 = v23;
    uint64_t v23 = (char *)operator new(0x50uLL);
    *((_DWORD *)v23 + 8) = a3;
    *(_OWORD *)(v23 + 40) = 0u;
    *(_OWORD *)(v23 + 56) = 0u;
    *((void *)v23 + 9) = 0;
    *(void *)uint64_t v23 = 0;
    *((void *)v23 + 1) = 0;
    *((void *)v23 + 2) = v25;
    uint64_t *v8 = (uint64_t *)v23;
    uint64_t v26 = **(void **)(a1 + 16);
    unint64_t v27 = (uint64_t *)v23;
    if (v26)
    {
      *(void *)(a1 + 16) = v26;
      unint64_t v27 = *v8;
    }
    sub_19E13C8A0(*(uint64_t **)(a1 + 24), v27);
    ++*(void *)(a1 + 32);
  }
  return *((void *)v23 + 7) != a2[2];
}

uint64_t sub_19E26CD44(uint64_t a1)
{
  *(void *)a1 = &unk_1EF0AB568;
  sub_19E15A064(a1 + 1016, *(char **)(a1 + 1024));

  return sub_19E25BF30(a1);
}

void sub_19E26CDA0(uint64_t a1)
{
  *(void *)a1 = &unk_1EF0AB568;
  sub_19E15A064(a1 + 1016, *(char **)(a1 + 1024));
  uint64_t v2 = (void *)sub_19E25BF30(a1);

  operator delete(v2);
}

uint64_t **sub_19E26CE00(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *((char *)a2 + 23);
    if (v8 >= 0) {
      size_t v9 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v9 = (size_t)a2[1];
    }
    if (v8 >= 0) {
      unint64_t v10 = a2;
    }
    else {
      unint64_t v10 = *a2;
    }
    while (1)
    {
      while (1)
      {
        int v11 = (uint64_t **)v6;
        uint64_t v14 = (const void *)v6[4];
        uint64_t v12 = v6 + 4;
        uint64_t v13 = v14;
        int v15 = *((char *)v12 + 23);
        if (v15 >= 0) {
          size_t v16 = *((unsigned __int8 *)v12 + 23);
        }
        else {
          size_t v16 = v12[1];
        }
        if (v15 >= 0) {
          int v17 = v12;
        }
        else {
          int v17 = v13;
        }
        if (v16 >= v9) {
          size_t v18 = v9;
        }
        else {
          size_t v18 = v16;
        }
        int v19 = memcmp(v10, v17, v18);
        BOOL v20 = v9 < v16;
        if (v19) {
          BOOL v20 = v19 < 0;
        }
        if (!v20) {
          break;
        }
        uint64_t v6 = *v11;
        uint64_t v7 = v11;
        if (!*v11) {
          goto LABEL_27;
        }
      }
      int v21 = memcmp(v17, v10, v18);
      BOOL v22 = v16 < v9;
      if (v21) {
        BOOL v22 = v21 < 0;
      }
      if (!v22) {
        return v11;
      }
      uint64_t v6 = v11[1];
      if (!v6)
      {
        uint64_t v7 = v11 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    int v11 = a1 + 1;
LABEL_27:
    uint64_t v23 = operator new(0x40uLL);
    int v24 = v23 + 4;
    uint64_t v25 = *a4;
    if (*((char *)*a4 + 23) < 0)
    {
      sub_19E13C2D0(v24, *(void **)v25, *((void *)v25 + 1));
    }
    else
    {
      long long v26 = *v25;
      v23[6] = *((void *)v25 + 2);
      *(_OWORD *)int v24 = v26;
    }
    v23[7] = 0;
    *uint64_t v23 = 0;
    v23[1] = 0;
    v23[2] = v11;
    *uint64_t v7 = v23;
    unint64_t v27 = (uint64_t *)**a1;
    int v28 = v23;
    if (v27)
    {
      *a1 = v27;
      int v28 = *v7;
    }
    sub_19E13C8A0(a1[1], v28);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return (uint64_t **)v23;
}

void sub_19E26CF8C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19E26CFA0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2 && *(void *)(a1 + 16) && *(int *)a1 >= 1) {
    operator delete[](v2);
  }
  return a1;
}

void sub_19E26CFE4(uint64_t a1, int a2, uint64_t a3)
{
  *(_DWORD *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = a3;
  operator new[]();
}

uint64_t sub_19E26D02C(uint64_t result, uint64_t a2)
{
  *(_DWORD *)uint64_t result = 0;
  *(void *)(result + 8) = a2;
  *(void *)(result + 16) = 0;
  return result;
}

void *sub_19E26D038(void *a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t result = sub_19E30F818(a1, a2, a3, a4);
  void *result = &unk_1EF0AAF58;
  return result;
}

uint64_t sub_19E26D06C(void *a1, uint64_t a2)
{
  uint64_t v4 = (void *)a1[20];
  uint64_t v5 = (void *)a1[21];
  if (v4 == v5)
  {
    a1[21] = v4;
    if (!a1[31]) {
      goto LABEL_10;
    }
    goto LABEL_8;
  }
  do
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  while (v4 != v5);
  a1[21] = a1[20];
  if (a1[31])
  {
LABEL_8:
    uint64_t v7 = a1[29];
    uint64_t v6 = (uint64_t *)a1[30];
    uint64_t v8 = *v6;
    *(void *)(v8 + 8) = *(void *)(v7 + 8);
    **(void **)(v7 + 8) = v8;
    a1[31] = 0;
    if (v6 != a1 + 29)
    {
      do
      {
        size_t v9 = (uint64_t *)v6[1];
        operator delete(v6);
        uint64_t v6 = v9;
      }
      while (v9 != a1 + 29);
    }
  }
LABEL_10:
  unint64_t v10 = *(uint64_t (**)(uint64_t, void *))(*(void *)a2 + 88);

  return v10(a2, a1);
}

void sub_19E26D178(uint64_t a1)
{
  uint64_t v1 = (void *)sub_19E25BF30(a1);

  operator delete(v1);
}

void sub_19E26D224(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E26D31C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E26D4F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E26D518(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E26D690(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E26D6F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E26D708(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E26D834(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E26D86C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E26DB20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_19E26DD34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E26DD84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E26DFF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_19E26E184(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E26E198(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_19E26E1BC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, float a9, int a10)
{
  *(void *)a1 = &unk_1EF0A9CB8;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = a4;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = a5;
  *(void *)(a1 + 40) = a6;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  int v15 = *(const void **)a7;
  uint64_t v14 = *(void *)(a7 + 8);
  int64_t v16 = v14 - *(void *)a7;
  if (v14 != *(void *)a7)
  {
    if (v16 < 0) {
      sub_19E13D694();
    }
    int v17 = (char *)operator new(v14 - *(void *)a7);
    *(void *)(a1 + 48) = v17;
    *(void *)(a1 + 56) = v17;
    size_t v18 = &v17[4 * (v16 >> 2)];
    *(void *)(a1 + 64) = v18;
    memcpy(v17, v15, v16);
    *(void *)(a1 + 56) = v18;
  }
  int v19 = a10;
  if (!a10) {
    int v19 = a4;
  }
  *(_DWORD *)(a1 + 72) = a8;
  *(_DWORD *)(a1 + 76) = v19;
  *(float *)(a1 + 80) = a9;
  *(void *)a1 = &unk_1EF0AA618;
  return a1;
}

void sub_19E26E2AC(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 56) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E26E2C8(uint64_t a1, int a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *(int *)(a1 + 24);
  v53[0] = v3;
  v53[1] = 0x3F80000000010020;
  v53[2] = 0;
  v52[1] = 0x3F80000000010020;
  v52[2] = 0;
  v52[0] = v3;
  memset(v51, 0, sizeof(v51));
  int v4 = a2;
  switch(*(void *)(a1 + 16))
  {
    case 0:
    case 6:
      goto LABEL_16;
    case 1:
      LODWORD(v51[0]) = 3;
      goto LABEL_16;
    case 2:
      LODWORD(v51[0]) = 4;
      goto LABEL_16;
    case 4:
      LODWORD(v51[0]) = 11;
      goto LABEL_16;
    case 5:
      LODWORD(v51[0]) = 1;
      goto LABEL_16;
    case 8:
      float __B = 0.2;
      float v48 = 0.0;
      float __C = 0.5;
      float v47 = 1.0;
      if (a2 >= 1)
      {
        uint64_t v6 = 4 * *(int *)(a1 + 72);
        uint64_t v7 = (float *)(**(void **)(a1 + 40) + v6);
        uint64_t v8 = (const float *)(**(void **)(a1 + 32) + v6);
        do
        {
          vDSP_vsmsa(v8, 1, &__B, &__C, v7, 1, *(int *)(a1 + 24));
          vDSP_vclip(v7, 1, &v48, &v47, v7, 1, *(int *)(a1 + 24));
          uint64_t v9 = 4 * *(int *)(a1 + 76);
          uint64_t v8 = (const float *)((char *)v8 + v9);
          uint64_t v7 = (float *)((char *)v7 + v9);
          --v4;
        }
        while (v4);
      }
      return;
    case 9:
      LODWORD(v51[0]) = 8;
      *(void *)((char *)v51 + 4) = **(void **)(a1 + 48);
      goto LABEL_16;
    case 0xALL:
      uint64_t v10 = (v3 * a2);
      if ((int)v10 >= 1)
      {
        uint64_t v11 = 4 * *(int *)(a1 + 72);
        uint64_t v12 = (float *)(**(void **)(a1 + 32) + v11);
        uint64_t v13 = (float *)(**(void **)(a1 + 40) + v11);
        do
        {
          float v14 = *v12++;
          float v15 = v14 * 0.5 + erf(v14 * 0.707106781) * (v14 * 0.5);
          *v13++ = v15;
          --v10;
        }
        while (v10);
      }
      return;
    case 0xBLL:
      LODWORD(v51[0]) = 2;
      DWORD1(v51[0]) = *(_DWORD *)(a1 + 80);
LABEL_16:
      int64_t v16 = (void *)MEMORY[0x19F3BB110](v53, v52, v51, 0);
      uint64_t v2 = v16;
      if (v16) {
        BNNSFilterApplyBatch(v16, v4, (const void *)(**(void **)(a1 + 32) + 4 * *(int *)(a1 + 72)), *(int *)(a1 + 76), (void *)(**(void **)(a1 + 40) + 4 * *(int *)(a1 + 72)), *(int *)(a1 + 76));
      }
      goto LABEL_18;
    case 0xCLL:
      uint64_t v17 = (v3 * a2);
      if ((int)v17 < 1) {
        return;
      }
      uint64_t v18 = **(void **)(a1 + 32);
      uint64_t v19 = *(int *)(a1 + 72);
      uint64_t v20 = **(void **)(a1 + 40);
      if (v17 < 4 || (uint64_t v21 = 4 * v19, (unint64_t)(4 * v19 + v20 - (4 * v19 + v18)) < 0x10))
      {
        uint64_t v22 = 0;
LABEL_24:
        uint64_t v23 = 4 * v22 + 4 * v19;
        int v24 = (float *)(v20 + v23);
        uint64_t v25 = (float *)(v18 + v23);
        uint64_t v26 = v17 - v22;
        do
        {
          float v27 = *v25++;
          float v28 = exp(v27 * 1.702);
          *v24++ = (float)(v27 * v28) / (float)(v28 + 1.0);
          --v26;
        }
        while (v26);
        return;
      }
      uint64_t v29 = (float32x4_t *)(v18 + v21);
      unint64_t v30 = (float32x4_t *)(v20 + v21);
      uint64_t v22 = v17 & 0xFFFFFFFC;
      __asm { FMOV            V0.4S, #1.0 }
      float32x4_t v41 = _Q0;
      float64x2_t v42 = (float64x2_t)vdupq_n_s64(0x3FFB3B645A1CAC08uLL);
      uint64_t v36 = v22;
      do
      {
        float32x4_t v37 = *v29++;
        float64x2_t v46 = vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)v37.f32), v42);
        float64x2_t __x = vmulq_f64(vcvt_hight_f64_f32(v37), v42);
        long double v44 = exp(__x.f64[1]);
        v38.f64[0] = exp(__x.f64[0]);
        v38.f64[1] = v44;
        float64x2_t v45 = v38;
        __x.f64[0] = exp(v46.f64[1]);
        v39.f64[0] = exp(v46.f64[0]);
        v39.f64[1] = __x.f64[0];
        float32x4_t v40 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v39), v45);
        *v30++ = vdivq_f32(vmulq_f32(v37, v40), vaddq_f32(v40, v41));
        v36 -= 4;
      }
      while (v36);
      if (v22 != v17) {
        goto LABEL_24;
      }
      return;
    default:
LABEL_18:
      BNNSFilterDestroy(v2);
      return;
  }
}

void *sub_19E26E6B4(void *a1)
{
  *a1 = &unk_1EF0A9CB8;
  uint64_t v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_19E26E704(void *__p)
{
  void *__p = &unk_1EF0A9CB8;
  uint64_t v2 = (void *)__p[6];
  if (v2)
  {
    __p[7] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

uint64_t sub_19E26E764(uint64_t result, int a2, double a3, int32x2_t a4)
{
  uint64_t v4 = (*(_DWORD *)(result + 20) * a2);
  if ((int)v4 >= 1)
  {
    uint64_t v5 = (const float *)(result + 40);
    uint64_t v6 = (const float *)(result + 44);
    switch(*(_DWORD *)(result + 16))
    {
      case 0:
        unint64_t v7 = **(void **)(result + 24);
        unint64_t v8 = **(void **)(result + 32);
        if (v4 >= 8)
        {
          uint64_t v9 = 0;
          unint64_t v24 = v8 + 4 * v4;
          BOOL v26 = v8 < v7 + 4 * v4 && v7 < v24;
          if (((unint64_t)v5 >= v24 || v8 >= result + 48) && !v26)
          {
            float32x4_t v28 = vld1q_dup_f32(v5);
            float32x4_t v29 = vld1q_dup_f32(v6);
            uint64_t v9 = v4 & 0xFFFFFFFC;
            __asm { FMOV            V4.4S, #1.0 }
            float32x4_t v34 = (float32x4_t)vdupq_n_s32(0xC3800000);
            float32x4_t v35 = vdivq_f32(_Q4, vsubq_f32(v28, v29));
            v36.i64[0] = 0x7F0000007FLL;
            v36.i64[1] = 0x7F0000007FLL;
            v37.i64[0] = 0x7E0000007ELL;
            v37.i64[1] = 0x7E0000007ELL;
            int8x16_t v38 = (int8x16_t)vdupq_n_s32(0xC2FE0000);
            int8x16_t v39 = (int8x16_t)vdupq_n_s32(0x42FE0000u);
            uint64_t v40 = v9;
            float32x4_t v41 = **(int8x16_t ***)(result + 32);
            float64x2_t v42 = **(float32x4_t ***)(result + 24);
            do
            {
              float32x4_t v43 = *v42++;
              int8x16_t v44 = (int8x16_t)vcgtq_f32(v43, v28);
              int32x4_t v45 = vcvtq_s32_f32(vrndaq_f32(vmulq_f32(vmulq_f32(v43, v35), v34)));
              int8x16_t v46 = vandq_s8(v44, (int8x16_t)vcgeq_f32(v43, v29));
              int8x16_t v47 = vandq_s8(v44, (int8x16_t)vcgtq_f32(v29, v43));
              *v41++ = vbslq_s8(vandq_s8(v47, (int8x16_t)vcgeq_s32(v36, v45)), (int8x16_t)vcvtq_f32_s32(vmaxq_s32(v45, v37)), vbslq_s8(vorrq_s8(vandq_s8(v47, (int8x16_t)vcgtq_s32(v45, v36)), v46), v39, v38));
              v40 -= 4;
            }
            while (v40);
            if (v9 == v4) {
              return result;
            }
          }
        }
        else
        {
          uint64_t v9 = 0;
        }
        float v48 = (float *)(v7 + 4 * v9);
        uint64_t v49 = (float *)(v8 + 4 * v9);
        uint64_t v50 = v4 - v9;
        do
        {
          while (1)
          {
            while (1)
            {
              float v51 = *v48;
              if (*v48 > *v5) {
                break;
              }
              *v49++ = -127.0;
              ++v48;
              if (!--v50) {
                return result;
              }
            }
            if (v51 < *v6)
            {
              int v52 = llroundf((float)(v51 * -256.0) / (float)(*v5 - *v6));
              if (v52 <= 127) {
                break;
              }
            }
            *v49++ = 127.0;
            ++v48;
            if (!--v50) {
              return result;
            }
          }
          if (v52 <= -127) {
            int v52 = -127;
          }
          *v49++ = (float)v52;
          ++v48;
          --v50;
        }
        while (v50);
        return result;
      case 1:
        uint64_t v10 = **(float ***)(result + 24);
        uint64_t v11 = **(float ***)(result + 32);
        do
        {
          float v12 = (float)(*v5 * -0.0078125) * *v10;
          float *v11 = v12;
          float v13 = *v6;
          if (v12 > *v6 || (float v13 = *v5, v12 < *v5)) {
            float *v11 = v13;
          }
          ++v10;
          ++v11;
          --v4;
        }
        while (v4);
        return result;
      case 2:
        float v14 = **(float ***)(result + 24);
        float v15 = **(float ***)(result + 32);
        do
        {
          float v16 = (float)((float)((float)(*v5 * -0.0078125) * (float)(*v5 * -0.0078125)) * *v14) * roundf(-128.0 / *v5);
          float *v15 = v16;
          float v17 = *v6;
          if (v16 > *v6 || (float v17 = *v5, v16 < *v5)) {
            float *v15 = v17;
          }
          ++v14;
          ++v15;
          --v4;
        }
        while (v4);
        return result;
      case 3:
        uint64_t v18 = **(float32x4_t ***)(result + 24);
        unint64_t v19 = **(void **)(result + 32);
        if (v4 < 8)
        {
          uint64_t v20 = 0;
LABEL_62:
          uint64_t v62 = &v18->f32[v20];
          unint64_t v63 = (float *)(v19 + 4 * v20);
          uint64_t v64 = v4 - v20;
          do
          {
            float v65 = *v62++;
            *v63++ = (float)(*v5 * *v5) * (float)(0.000061035 * v65);
            --v64;
          }
          while (v64);
          return result;
        }
        uint64_t v20 = 0;
        unint64_t v53 = v19 + 4 * v4;
        BOOL v55 = v19 < (unint64_t)v18->u64 + 4 * v4 && (unint64_t)v18 < v53;
        if ((unint64_t)v5 < v53 && v19 < (unint64_t)v6) {
          goto LABEL_62;
        }
        if (v55) {
          goto LABEL_62;
        }
        uint64_t v20 = v4 & 0x7FFFFFF8;
        float v57 = (float)(*v5 * *v5) * 0.000061035;
        uint64_t v58 = v18 + 1;
        uint64_t v59 = (float32x4_t *)(v19 + 16);
        uint64_t v60 = v4 & 0xFFFFFFF8;
        do
        {
          float32x4_t v61 = vmulq_n_f32(*v58, v57);
          v59[-1] = vmulq_n_f32(v58[-1], v57);
          *uint64_t v59 = v61;
          v58 += 2;
          v59 += 2;
          v60 -= 8;
        }
        while (v60);
        if (v20 != v4) {
          goto LABEL_62;
        }
        break;
      case 4:
        unint64_t v21 = **(void **)(result + 24);
        unint64_t v22 = **(void **)(result + 32);
        if (v4 >= 8)
        {
          uint64_t v23 = 0;
          unint64_t v66 = v22 + 4 * v4;
          BOOL v68 = v22 < v21 + 4 * v4 && v21 < v66;
          if (((unint64_t)v5 >= v66 || v22 >= result + 48) && !v68)
          {
            uint64_t v23 = v4 & 0x7FFFFFFC;
            *(float *)a4.i32 = *v5;
            float32x4_t v70 = (float32x4_t)vdupq_lane_s32(a4, 0);
            v71.i64[0] = 0xBC000000BC000000;
            v71.i64[1] = 0xBC000000BC000000;
            float32x4_t v72 = vmulq_n_f32(v71, *v5);
            float32x4_t v73 = vld1q_dup_f32(v6);
            uint64_t v74 = v4 & 0xFFFFFFFC;
            uint64_t v75 = **(float32x4_t ***)(result + 32);
            uint64_t v76 = **(float32x4_t ***)(result + 24);
            do
            {
              float32x4_t v77 = *v76++;
              float32x4_t v78 = vmulq_f32(v72, v77);
              int8x16_t v79 = (int8x16_t)vcgeq_f32(v73, v78);
              *uint64_t v75 = vaddq_f32(*v75, (float32x4_t)vbslq_s8(v79, vbslq_s8(vandq_s8(v79, (int8x16_t)vcgeq_f32(v78, v70)), (int8x16_t)v78, (int8x16_t)v70), (int8x16_t)v73));
              ++v75;
              v74 -= 4;
            }
            while (v74);
            if (v23 == v4) {
              return result;
            }
          }
        }
        else
        {
          uint64_t v23 = 0;
        }
        BOOL v80 = (float *)(v21 + 4 * v23);
        uint64_t v81 = (float *)(v22 + 4 * v23);
        uint64_t v82 = v4 - v23;
        do
        {
          float v83 = (float)(*v5 * -0.0078125) * *v80;
          float v84 = *v6;
          if (v83 <= *v6)
          {
            float v84 = (float)(*v5 * -0.0078125) * *v80;
            if (v83 < *v5) {
              float v84 = *v5;
            }
          }
          float *v81 = *v81 + v84;
          ++v81;
          ++v80;
          --v82;
        }
        while (v82);
        return result;
      default:
        return result;
    }
  }
  return result;
}

uint64_t sub_19E26EBF0(uint64_t result, int a2, double a3, double a4, double a5)
{
  if (*(_DWORD *)(result + 20) * a2 >= 1)
  {
    uint64_t v5 = 0;
    do
    {
      switch(*(_DWORD *)(result + 16))
      {
        case 0:
          float v8 = *(float *)(result + 40);
          float v9 = *(float *)(**(void **)(result + 24) + 4 * v5);
          uint64_t v10 = **(void **)(result + 32);
          if (v9 <= v8) {
            goto LABEL_23;
          }
          float v11 = *(float *)(result + 44);
          if (v9 < v11 && (int v12 = llroundf((float)(v9 * -256.0) / (float)(v8 - v11)), v12 < 128))
          {
            if (v12 > -128) {
              goto LABEL_18;
            }
LABEL_23:
            *(unsigned char *)(v10 + v5) = -127;
          }
          else
          {
            *(unsigned char *)(v10 + v5) = 127;
          }
          break;
        case 1:
          float v15 = *(void **)(result + 32);
          LODWORD(a5) = *(_DWORD *)(**(void **)(result + 24) + 4 * v5);
          float v16 = *(float *)(result + 40) * -0.0078125;
          goto LABEL_15;
        case 2:
          float v13 = *(float *)(result + 40);
          float v14 = v13 * -0.0078125;
          *(float *)&a5 = roundf(-128.0 / v13);
          float v15 = *(void **)(result + 32);
          float v16 = (float)(v14 * v14) * *(float *)(**(void **)(result + 24) + 4 * v5);
LABEL_15:
          *(float *)&a5 = v16 * *(float *)&a5;
          *(unsigned char *)(*v15 + v5) = (int)*(float *)&a5;
          uint64_t v10 = **(void **)(result + 32);
          LOBYTE(a5) = *(unsigned char *)(v10 + v5);
          *(void *)&a5 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a5)).u64[0];
          *(float *)&a5 = (float)SLODWORD(a5);
          float v21 = *(float *)(result + 44);
          if (v21 < *(float *)&a5 || (float v21 = *(float *)(result + 40), v21 > *(float *)&a5))
          {
            int v12 = (int)v21;
LABEL_18:
            *(unsigned char *)(v10 + v5) = v12;
          }
          break;
        case 3:
          int v6 = (int)(float)((float)((float)(*(float *)(result + 40) * *(float *)(result + 40)) * 0.000061035)
                          * *(float *)(**(void **)(result + 24) + 4 * v5));
          uint64_t v7 = **(void **)(result + 32);
          goto LABEL_4;
        case 4:
          float v17 = *(float *)(result + 40);
          float v18 = *(float *)(result + 44);
          float v19 = (float)(v17 * -0.0078125) * *(float *)(**(void **)(result + 24) + 4 * v5);
          float v20 = truncf(v19);
          if (v18 >= v20)
          {
            int v6 = (int)v19;
            if (v17 > v20) {
              int v6 = (int)v17;
            }
          }
          else
          {
            int v6 = (int)v18;
          }
          uint64_t v7 = **(void **)(result + 32);
          LOBYTE(v6) = *(unsigned char *)(v7 + v5) + v6;
LABEL_4:
          *(unsigned char *)(v7 + v5) = v6;
          break;
        default:
          break;
      }
      ++v5;
    }
    while (v5 < *(int *)(result + 20) * (uint64_t)a2);
  }
  return result;
}

uint64_t sub_19E26EDD8()
{
  if (qword_1E94593F0[0] != -1) {
    dispatch_once(qword_1E94593F0, &unk_1EF0AC000);
  }
  return qword_1E94593E8;
}

os_log_t sub_19E26EE28()
{
  os_log_t result = os_log_create("com.apple.Montreal", "Default");
  qword_1E94593E8 = (uint64_t)result;
  return result;
}

id sub_19E26F1C0(void *a1, void *a2)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  float v8 = objc_msgSend_string(MEMORY[0x1E4F28E78], v5, v6, v7);
  float v11 = objc_msgSend_stringWithFormat_(NSString, v9, @"\r %@ [", v10, v4);
  objc_msgSend_appendString_(v8, v12, (uint64_t)v11, v13);

  uint64_t v14 = (uint64_t)v4;
  float v17 = objc_msgSend_indentByFactor_(v4, v15, 1, v16);
  long long v50 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  id v18 = v3;
  uint64_t v20 = objc_msgSend_countByEnumeratingWithState_objects_count_(v18, v19, (uint64_t)&v50, (uint64_t)v54, 16);
  if (v20)
  {
    uint64_t v21 = v20;
    uint64_t v22 = *(void *)v51;
    do
    {
      for (uint64_t i = 0; i != v21; ++i)
      {
        while (1)
        {
          if (*(void *)v51 != v22) {
            objc_enumerationMutation(v18);
          }
          float32x4_t v28 = *(void **)(*((void *)&v50 + 1) + 8 * i);
          char v29 = objc_opt_respondsToSelector();
          uint64_t v32 = NSString;
          if (v29) {
            break;
          }
          unint64_t v24 = objc_msgSend_stringWithFormat_(NSString, v30, @" \r %@ %@", v31, v17, v28, (void)v50);
          objc_msgSend_appendString_(v8, v25, (uint64_t)v24, v26);

          if (v21 == ++i) {
            goto LABEL_3;
          }
        }
        uint64_t v33 = objc_msgSend_descriptionWithIndent_(v28, v30, v14, v31);
        int32x4_t v36 = objc_msgSend_stringWithFormat_(v32, v34, @" %@", v35, v33);
        objc_msgSend_appendString_(v8, v37, (uint64_t)v36, v38);
      }
LABEL_3:
      uint64_t v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(v18, v27, (uint64_t)&v50, (uint64_t)v54, 16);
    }
    while (v21);
  }

  int8x16_t v39 = (void *)v14;
  float64x2_t v42 = objc_msgSend_stringWithFormat_(NSString, v40, @"\r %@ ]", v41, v14);
  objc_msgSend_appendString_(v8, v43, (uint64_t)v42, v44);

  float v48 = objc_msgSend_copy(v8, v45, v46, v47);

  return v48;
}

id sub_19E26F430(void *a1, void *a2)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  float v8 = objc_msgSend_string(MEMORY[0x1E4F28E78], v5, v6, v7);
  float v11 = objc_msgSend_stringWithFormat_(NSString, v9, @"\r %@ {", v10, v4);
  uint64_t v55 = v8;
  objc_msgSend_appendString_(v8, v12, (uint64_t)v11, v13);

  unint64_t v54 = v4;
  uint64_t v16 = objc_msgSend_indentByFactor_(v4, v14, 1, v15);
  long long v56 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  id v17 = v3;
  uint64_t v19 = objc_msgSend_countByEnumeratingWithState_objects_count_(v17, v18, (uint64_t)&v56, (uint64_t)v60, 16);
  if (v19)
  {
    uint64_t v22 = v19;
    uint64_t v23 = *(void *)v57;
    do
    {
      for (uint64_t i = 0; i != v22; ++i)
      {
        while (1)
        {
          if (*(void *)v57 != v23) {
            objc_enumerationMutation(v17);
          }
          uint64_t v34 = *(void *)(*((void *)&v56 + 1) + 8 * i);
          uint64_t v35 = objc_msgSend_objectForKeyedSubscript_(v17, v20, v34, v21);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0) {
            break;
          }
          uint64_t v25 = NSString;
          uint64_t v26 = objc_msgSend_indentByFactor_(v16, v36, 1, v37);
          uint64_t v27 = sub_19E26F430(v35, v26);
LABEL_6:
          unint64_t v30 = (void *)v27;
          uint64_t v31 = objc_msgSend_stringWithFormat_(v25, v28, @" \r %@ %@ : %@", v29, v16, v34, v27);
          objc_msgSend_appendString_(v55, v32, (uint64_t)v31, v33);

          if (v22 == ++i) {
            goto LABEL_3;
          }
        }
        objc_opt_class();
        char isKindOfClass = objc_opt_isKindOfClass();
        uint64_t v25 = NSString;
        if (isKindOfClass)
        {
          uint64_t v26 = objc_msgSend_indentByFactor_(v16, v39, 1, v40);
          uint64_t v27 = sub_19E26F1C0(v35, v26);
          goto LABEL_6;
        }
        uint64_t v41 = objc_msgSend_stringWithFormat_(NSString, v39, @" \r %@ %@ : %@", v40, v16, v34, v35);
        objc_msgSend_appendString_(v55, v42, (uint64_t)v41, v43);
      }
LABEL_3:
      uint64_t v22 = objc_msgSend_countByEnumeratingWithState_objects_count_(v17, v20, (uint64_t)&v56, (uint64_t)v60, 16);
    }
    while (v22);
  }

  uint64_t v46 = objc_msgSend_stringWithFormat_(NSString, v44, @"\r %@ }", v45, v54);
  objc_msgSend_appendString_(v55, v47, (uint64_t)v46, v48);

  long long v52 = objc_msgSend_copy(v55, v49, v50, v51);

  return v52;
}

id sub_19E26F734(void *a1, void *a2)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  float v8 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v5, v6, v7);
  float v11 = objc_msgSend_exMRL_arrayForKey_(v3, v9, (uint64_t)v4, v10);
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  uint64_t v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(v11, v12, (uint64_t)&v37, (uint64_t)v41, 16);
  if (v13)
  {
    uint64_t v17 = v13;
    uint64_t v18 = *(void *)v38;
    do
    {
      for (uint64_t i = 0; i != v17; ++i)
      {
        if (*(void *)v38 != v18) {
          objc_enumerationMutation(v11);
        }
        uint64_t v21 = *(void *)(*((void *)&v37 + 1) + 8 * i);
        uint64_t v22 = [MontrealNNModelTensor alloc];
        uint64_t v27 = objc_msgSend_initWithDictionary_(v22, v23, v21, v24);
        if (v27)
        {
          if (objc_msgSend_containsObject_(v8, v25, (uint64_t)v27, v26)) {
            sub_19E15DB6C(@"Tensor %@ is already present", (uint64_t)v28, v29, v30, v31, v32, v33, v34, (uint64_t)v27);
          }
          objc_msgSend_addObject_(v8, v28, (uint64_t)v27, v30);
        }
      }
      uint64_t v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v11, v20, (uint64_t)&v37, (uint64_t)v41, 16);
    }
    while (v17);
  }
  uint64_t v35 = objc_msgSend_copy(v8, v14, v15, v16);

  return v35;
}

id sub_19E26F8E4(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  uint64_t v14 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v11, v12, v13);
  uint64_t v42 = v8;
  uint64_t v17 = objc_msgSend_exMRL_arrayForKey_(v7, v15, (uint64_t)v8, v16);
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  uint64_t v19 = objc_msgSend_countByEnumeratingWithState_objects_count_(v17, v18, (uint64_t)&v43, (uint64_t)v47, 16);
  if (v19)
  {
    uint64_t v23 = v19;
    uint64_t v24 = *(void *)v44;
    do
    {
      for (uint64_t i = 0; i != v23; ++i)
      {
        if (*(void *)v44 != v24) {
          objc_enumerationMutation(v17);
        }
        uint64_t v27 = *(void *)(*((void *)&v43 + 1) + 8 * i);
        float32x4_t v28 = [MontrealNNModelWeight alloc];
        uint64_t v32 = objc_msgSend_initWithDictionary_quantization_jsonDir_(v28, v29, v27, (uint64_t)v9, v10);
        if (v32)
        {
          if (objc_msgSend_containsObject_(v14, v30, (uint64_t)v32, v31)) {
            sub_19E15DB6C(@"Weight %@ is already present", (uint64_t)v33, v34, v35, v36, v37, v38, v39, (uint64_t)v32);
          }
          objc_msgSend_addObject_(v14, v33, (uint64_t)v32, v35);
        }
      }
      uint64_t v23 = objc_msgSend_countByEnumeratingWithState_objects_count_(v17, v26, (uint64_t)&v43, (uint64_t)v47, 16);
    }
    while (v23);
  }
  long long v40 = objc_msgSend_copy(v14, v20, v21, v22);

  return v40;
}

id sub_19E26FAC8(void *a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v5 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v2, v3, v4);
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  id v6 = v1;
  uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v7, (uint64_t)&v23, (uint64_t)v27, 16);
  if (v8)
  {
    uint64_t v12 = v8;
    uint64_t v13 = *(void *)v24;
    do
    {
      for (uint64_t i = 0; i != v12; ++i)
      {
        if (*(void *)v24 != v13) {
          objc_enumerationMutation(v6);
        }
        uint64_t v15 = objc_msgSend_jsonDescription(*(void **)(*((void *)&v23 + 1) + 8 * i), v9, v10, v11, (void)v23);
        objc_msgSend_addObject_(v5, v16, (uint64_t)v15, v17);
      }
      uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v9, (uint64_t)&v23, (uint64_t)v27, 16);
    }
    while (v12);
  }

  uint64_t v21 = objc_msgSend_copy(v5, v18, v19, v20);

  return v21;
}

id sub_19E26FC20(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  id v9 = a1;
  id v10 = a2;
  id v11 = a3;
  id v12 = a4;
  id v13 = a5;
  uint64_t v17 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v14, v15, v16);
  long long v45 = v9;
  uint64_t v20 = objc_msgSend_exMRL_arrayForKey_(v9, v18, (uint64_t)v10, v19);
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  uint64_t v22 = objc_msgSend_countByEnumeratingWithState_objects_count_(v20, v21, (uint64_t)&v46, (uint64_t)v50, 16);
  if (v22)
  {
    uint64_t v26 = v22;
    uint64_t v27 = *(void *)v47;
    do
    {
      for (uint64_t i = 0; i != v26; ++i)
      {
        if (*(void *)v47 != v27) {
          objc_enumerationMutation(v20);
        }
        uint64_t v30 = *(void *)(*((void *)&v46 + 1) + 8 * i);
        uint64_t v31 = [MontrealNNModelNode alloc];
        uint64_t v33 = objc_msgSend_initWithDictionary_tensors_quantization_jsonDir_(v31, v32, v30, (uint64_t)v11, v12, v13);
        if (objc_msgSend_containsObject_(v17, v34, (uint64_t)v33, v35)) {
          sub_19E15DB6C(@"Node %@ is already present", (uint64_t)v36, v37, v38, v39, v40, v41, v42, (uint64_t)v33);
        }
        objc_msgSend_addObject_(v17, v36, (uint64_t)v33, v38);
      }
      uint64_t v26 = objc_msgSend_countByEnumeratingWithState_objects_count_(v20, v29, (uint64_t)&v46, (uint64_t)v50, 16);
    }
    while (v26);
  }
  long long v43 = objc_msgSend_copy(v17, v23, v24, v25);

  return v43;
}

uint64_t sub_19E26FE10(uint64_t result)
{
  *(void *)os_log_t result = &unk_1EF0A9DB0;
  *(void *)(result + 8) = 0;
  *(unsigned char *)(result + 16) = 0;
  return result;
}

void *sub_19E26FE34(void *a1)
{
  *a1 = &unk_1EF0A9DB0;
  uint64_t v2 = a1[1];
  if (v2)
  {
    uint64_t v3 = (void *)sub_19E286D1C(v2);
    operator delete(v3);
  }
  return a1;
}

void sub_19E26FE84(void *__p)
{
  void *__p = &unk_1EF0A9DB0;
  uint64_t v2 = __p[1];
  if (v2)
  {
    uint64_t v3 = (void *)sub_19E286D1C(v2);
    operator delete(v3);
  }

  operator delete(__p);
}

__CFData *sub_19E26FEE4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  CFIndex v2 = *(void *)(v1 + 8);
  if (!v2) {
    return 0;
  }
  Mutable = CFDataCreateMutable(0, v2);
  CFDataAppendBytes(Mutable, **(const UInt8 ***)(a1 + 8), *(void *)(*(void *)(a1 + 8) + 8));
  return Mutable;
}

uint64_t sub_19E26FF44(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16)) {
    return 1;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return 0;
  }
  size_t v4 = *(void *)(v3 + 8);
  if (!v4 || mlock(*(const void **)v3, v4) == -1) {
    return 0;
  }
  uint64_t result = 1;
  *(unsigned char *)(a1 + 16) = 1;
  return result;
}

uint64_t sub_19E26FFB4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 16)) {
    return 1;
  }
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    size_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      if (munlock(*(const void **)v2, v3) != -1)
      {
        *(unsigned char *)(a1 + 16) = 0;
        return 1;
      }
    }
  }
  return 0;
}

void sub_19E270014()
{
}

void sub_19E2701AC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19E2701C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      operator delete(v20);
      _Unwind_Resume(a1);
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  operator delete(v20);
  _Unwind_Resume(a1);
}

void sub_19E27020C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *sub_19E270220(std::runtime_error *a1, const char *a2)
{
  uint64_t result = std::runtime_error::runtime_error(a1, a2);
  result->__vftable = (std::runtime_error_vtbl *)&unk_1EF0A7C78;
  return result;
}

uint64_t sub_19E270254(uint64_t a1, void *a2, long long *a3, unint64_t a4)
{
  uint64_t v431 = *MEMORY[0x1E4F143B8];
  if (a4 <= 0x57)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Flat model file corrupted");
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EF0A7C78;
    __cxa_throw(exception, (struct type_info *)&unk_1EF0A3FD0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  long long v5 = a3[3];
  long long v428 = a3[2];
  v429[0] = v5;
  v429[1] = a3[4];
  uint64_t v430 = *((void *)a3 + 10);
  long long v6 = a3[1];
  long long v426 = *a3;
  long long v427 = v6;
  size_t v7 = strlen((const char *)v429 + 8);
  if (v7 > 0x7FFFFFFFFFFFFFF7) {
    sub_19E13C370();
  }
  uint64_t v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    id v9 = (void **)operator new(v10 + 1);
    __dst[1] = v8;
    unint64_t v425 = v11 | 0x8000000000000000;
    __dst[0] = v9;
    goto LABEL_9;
  }
  HIBYTE(v425) = v7;
  id v9 = __dst;
  if (v7) {
LABEL_9:
  }
    memcpy(v9, (char *)v429 + 8, (size_t)v8);
  *((unsigned char *)v8 + (void)v9) = 0;
  if (v426 != 1001)
  {
    unint64_t v393 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v393, "Flat model version incorrect");
    goto LABEL_582;
  }
  int v12 = DWORD2(v426);
  if (HIDWORD(v426) + 400 * (unint64_t)DWORD2(v426) > a4)
  {
    unint64_t v393 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v393, "Flat model file corrupted");
LABEL_582:
    v393->__vftable = (std::runtime_error_vtbl *)&unk_1EF0A7C78;
    __cxa_throw(v393, (struct type_info *)&unk_1EF0A3FD0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  __s = (char *)a3 + HIDWORD(v426);
  if (DWORD2(v426))
  {
    if (DWORD2(v426) == 1)
    {
      uint64_t v13 = 0;
      unint64_t v14 = 0;
    }
    else
    {
      unint64_t v14 = 0;
      unint64_t v15 = 0;
      uint64_t v13 = DWORD2(v426) & 0xFFFFFFFE;
      uint64_t v16 = v13;
      uint64_t v17 = (uint64_t)a3 + HIDWORD(v426);
      do
      {
        if (v14 <= *(unsigned int *)(v17 + 388)) {
          unint64_t v14 = *(unsigned int *)(v17 + 388);
        }
        if (v15 <= *(unsigned int *)(v17 + 788)) {
          unint64_t v15 = *(unsigned int *)(v17 + 788);
        }
        v17 += 800;
        v16 -= 2;
      }
      while (v16);
      if (v14 <= v15) {
        unint64_t v14 = v15;
      }
      if (v13 == DWORD2(v426)) {
        goto LABEL_28;
      }
    }
    uint64_t v18 = (unsigned int *)((char *)&a3[25 * v13 + 24] + HIDWORD(v426) + 4);
    uint64_t v19 = DWORD2(v426) - v13;
    do
    {
      if (v14 <= *v18) {
        unint64_t v14 = *v18;
      }
      v18 += 100;
      --v19;
    }
    while (v19);
LABEL_28:
    if (v14 > a4)
    {
      uint64_t v394 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v394, "Flat model file corrupted");
      v394->__vftable = (std::runtime_error_vtbl *)&unk_1EF0A7C78;
      __cxa_throw(v394, (struct type_info *)&unk_1EF0A3FD0, (void (*)(void *))std::runtime_error::~runtime_error);
    }
    uint64_t v20 = 0;
    while (1)
    {
      bzero(__src, 0x2C0uLL);
      uint64_t v402 = v20;
      uint64_t v21 = &__s[400 * v20];
      int v22 = v21[32];
      uint64_t v23 = v21[33];
      *(void *)&__src[0] = v21[32];
      *((void *)&__src[0] + 1) = v23;
      uint64_t v24 = v21[38];
      uint64_t v25 = v21[35];
      *(void *)&__src[1] = v21[34];
      *((void *)&__src[1] + 1) = v25;
      int v26 = v21[36];
      uint64_t v27 = v21[37];
      *(void *)&__src[2] = v21[36];
      *((void *)&__src[2] + 1) = v27;
      long long v28 = *(_OWORD *)(v21 + 132);
      __src[12] = *(_OWORD *)(v21 + 116);
      __src[13] = v28;
      long long v29 = *(_OWORD *)(v21 + 164);
      __src[14] = *(_OWORD *)(v21 + 148);
      __src[15] = v29;
      long long v30 = *(_OWORD *)(v21 + 68);
      __src[8] = *(_OWORD *)(v21 + 52);
      __src[9] = v30;
      long long v31 = *(_OWORD *)(v21 + 100);
      __src[10] = *(_OWORD *)(v21 + 84);
      __src[11] = v31;
      long long v32 = *(_OWORD *)(v21 + 196);
      __src[16] = *(_OWORD *)(v21 + 180);
      __src[17] = v32;
      long long v33 = *(_OWORD *)(v21 + 228);
      __src[18] = *(_OWORD *)(v21 + 212);
      __src[19] = v33;
      long long v34 = *(_OWORD *)(v21 + 260);
      long long v35 = *(_OWORD *)(v21 + 276);
      __src[20] = *(_OWORD *)(v21 + 244);
      __src[21] = v34;
      long long v36 = *(_OWORD *)(v21 + 292);
      __src[22] = v35;
      __src[23] = v36;
      long long v37 = *(_OWORD *)(v21 + 308);
      long long v38 = *(_OWORD *)(v21 + 324);
      long long v39 = *(_OWORD *)(v21 + 356);
      __src[26] = *(_OWORD *)(v21 + 340);
      __src[27] = v39;
      __src[24] = v37;
      __src[25] = v38;
      uint64_t v40 = v21[40];
      *(void *)&__src[3] = v24;
      *((void *)&__src[3] + 1) = v40;
      uint64_t v41 = v21[42];
      *(void *)&__src[4] = v21[41];
      *((void *)&__src[4] + 1) = v41;
      uint64_t v42 = v21[44];
      *(void *)&__src[5] = v21[43];
      *((void *)&__src[5] + 1) = v42;
      uint64_t v43 = v21[46];
      *(void *)&__src[6] = v21[45];
      *((void *)&__src[6] + 1) = v43;
      LODWORD(v24) = *((_DWORD *)v21 + 12);
      uint64_t v44 = *((void *)&__src[7] + 1) | v24 & 0x20;
      v405 = v21;
      uint64_t v45 = v44 | v24 & 0x7D4;
      *(void *)&__src[7] = v21[47];
      *((void *)&__src[7] + 1) = v45;
      uint64_t v46 = *((unsigned int *)v21 + 97);
      long long v47 = (char *)a3 + v46;
      switch(v22)
      {
        case 0:
        case 11:
        case 13:
          char v48 = 2 * (v26 != 2);
          if (v22 == 11)
          {
            int v49 = (LODWORD(__src[20]) * LODWORD(__src[16]) * DWORD1(__src[20]) * DWORD2(__src[8])) << v48;
          }
          else
          {
            int v49 = (LODWORD(__src[16]) * LODWORD(__src[8])) << v48;
            if (v22 == 13) {
              v49 *= 2;
            }
          }
          *(void *)&__src[28] = (char *)a3 + v46;
          uint64_t v160 = &v47[v49];
          BOOL v162 = -v49 < 0;
          int v176 = -v49 & 3;
          int v177 = v49 & 3;
          if (!v162) {
            int v177 = -v176;
          }
          if (v177) {
            size_t v178 = (8 - v177);
          }
          else {
            size_t v178 = 0;
          }
          if (v178 >= 5)
          {
            int64x2_t v179 = operator new(v178);
            memcpy(v179, v160, v178);
            uint64_t v180 = 0;
            uint64_t v181 = (v178 - 4);
            LOBYTE(v182) = 1;
            do
              int v182 = v182 & (*((unsigned char *)v179 + v180++) == 0);
            while (v181 != v180);
            BOOL v186 = *((unsigned char *)v179 + v181) == 1
                && *((unsigned char *)v179 + (v178 - 3)) == 2
                && *((unsigned char *)v179 + (v178 - 2)) == 2
                && *((unsigned char *)v179 + (v178 - 1)) == 8;
            if ((v182 & v186) != 0) {
              size_t v187 = v178;
            }
            else {
              size_t v187 = 0;
            }
            v160 += v187;
            operator delete(v179);
            LOWORD(v45) = WORD4(__src[7]);
          }
          if ((v45 & 0x100) != 0) {
            goto LABEL_261;
          }
          goto LABEL_214;
        case 1:
          if ((v45 & 0x40) == 0)
          {
            uint64_t v391 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v391, "Only kMRLNeuralNetworkWeight                                                    AttributeBatchNormalizationIntegrated weight attribute supported");
            v391->__vftable = (std::runtime_error_vtbl *)&unk_1EF0A7C78;
            __cxa_throw(v391, (struct type_info *)&unk_1EF0A3FD0, (void (*)(void *))std::runtime_error::~runtime_error);
          }
          *(void *)&__src[28] = (char *)a3 + v46;
          int v158 = __src[8];
          if (SDWORD2(__src[8]) > 1) {
            int v158 = DWORD2(__src[8]);
          }
          int v159 = v158 << (2 * (v26 != 2));
          uint64_t v160 = &v47[v159];
          int v161 = v159 & 3;
          int v163 = -v159;
          BOOL v162 = v163 < 0;
          int v164 = v163 & 3;
          if (v162) {
            int v165 = v161;
          }
          else {
            int v165 = -v164;
          }
          if (v165) {
            size_t v166 = (8 - v165);
          }
          else {
            size_t v166 = 0;
          }
          if (v166 >= 5)
          {
            long long v167 = operator new(v166);
            memcpy(v167, v160, v166);
            uint64_t v168 = 0;
            uint64_t v169 = (v166 - 4);
            LOBYTE(v170) = 1;
            do
              int v170 = v170 & (*((unsigned char *)v167 + v168++) == 0);
            while (v169 != v168);
            BOOL v174 = *((unsigned char *)v167 + v169) == 1
                && *((unsigned char *)v167 + (v166 - 3)) == 2
                && *((unsigned char *)v167 + (v166 - 2)) == 2
                && *((unsigned char *)v167 + (v166 - 1)) == 8;
            if ((v170 & v174) != 0) {
              size_t v175 = v166;
            }
            else {
              size_t v175 = 0;
            }
            v160 += v175;
            operator delete(v167);
          }
LABEL_214:
          *(void *)&__src[36] = v160;
          uint64_t v50 = &__s[400 * v20];
          if ((v405[32] + 7) >= 2u) {
            goto LABEL_262;
          }
          goto LABEL_30;
        case 4:
        case 23:
          *(void *)&__src[28] = (char *)a3 + v46;
          uint64_t v50 = &__s[400 * v20];
          if ((v21[32] + 7) < 2u) {
            goto LABEL_30;
          }
          goto LABEL_262;
        case 5:
        case 6:
          int v51 = __src[16];
          if (SLODWORD(__src[20]) <= 0) {
            int v52 = __src[16];
          }
          else {
            int v52 = __src[20];
          }
          if ((v44 & 0x20) != 0 && (v45 & 0x80) != 0)
          {
            long long v53 = (int *)operator new(4uLL);
            int v54 = v26;
            BOOL v55 = v26 != 2;
            *long long v53 = 0;
            long long v56 = v53 + 1;
            int v57 = __src[8];
            if (v22 == 6)
            {
              long long v58 = (int *)operator new(8uLL);
              *(void *)long long v58 = 0x200000000;
              long long v56 = v58 + 2;
              operator delete(v53);
              v51 *= 2;
              long long v53 = v58;
            }
            uint64_t v59 = (4 * v52 * (v51 + v57)) << (2 * v55);
            uint64_t v60 = v53;
            do
            {
              uint64_t v61 = *v60++;
              uint64_t v62 = (char *)__src + 8 * v61;
              *((void *)v62 + 56) = v47;
              *((void *)v62 + 72) = &v47[v59];
              v47 += 16 * v52 + v59;
            }
            while (v60 != v56);
            operator delete(v53);
            int v26 = v54;
          }
          else
          {
            char v188 = 2 * (v26 != 2);
            int v189 = (4 * LODWORD(__src[16]) * v52) << v188;
            uint64_t v190 = (4 * v52 * LODWORD(__src[8])) << v188;
            *(void *)&__src[36] = &v47[v190];
            uint64_t v191 = 16 * v52;
            *(void *)&__src[28] = (char *)a3 + v46;
            *((void *)&__src[28] + 1) = &v47[v190 + v191];
            long long v47 = (char *)(*((void *)&__src[28] + 1) + v189);
            if ((v45 & 0x80) != 0)
            {
              if (v22 == 6)
              {
                *(void *)&__src[37] = &v47[v190];
                *(void *)&__src[29] = *((void *)&__src[28] + 1) + v189;
                *((void *)&__src[29] + 1) = &v47[v190 + v191];
                long long v47 = (char *)(*((void *)&__src[29] + 1) + v189);
              }
            }
            else
            {
              *((void *)&__src[36] + 1) = *((void *)&__src[28] + 1) + v189;
              v47 += v191;
              if (v22 == 6)
              {
                *(void *)&__src[37] = &v47[v190];
                *(void *)&__src[29] = v47;
                *((void *)&__src[29] + 1) = &v47[v190 + v191];
                *((void *)&__src[37] + 1) = *((void *)&__src[29] + 1) + v189;
                long long v47 = (char *)(*((void *)&__src[37] + 1) + v191);
              }
            }
          }
          id v197 = operator new(8uLL);
          *(void *)id v197 = 0x700000006;
          unint64_t v198 = *((unsigned int *)v405 + 98);
          if ((v198 & 0x40) == 0) {
            goto LABEL_258;
          }
          *(void *)&__src[31] = v47;
          int v199 = (LODWORD(__src[16]) * LODWORD(__src[20])) << (2 * (v26 != 2));
          v47 += v199;
          int v200 = -v199;
          BOOL v162 = v200 < 0;
          int v201 = v200 & 3;
          int v202 = v162 ? ((LODWORD(__src[16]) * LODWORD(__src[20])) << (2 * (v26 != 2))) & 3 : -v201;
          size_t v203 = v202 ? (8 - v202) : 0;
          if (v203 < 5)
          {
LABEL_258:
            int v213 = 7;
            if (((v198 >> 7) & 1) == 0) {
              goto LABEL_260;
            }
LABEL_259:
            *((void *)&__src[28] + v213) = v47;
            goto LABEL_260;
          }
          uint64_t v204 = operator new(v203);
          memcpy(v204, v47, v203);
          uint64_t v205 = 0;
          uint64_t v206 = (v203 - 4);
          LOBYTE(v207) = 1;
          do
            int v207 = v207 & (*((unsigned char *)v204 + v205++) == 0);
          while (v206 != v205);
          BOOL v211 = *((unsigned char *)v204 + v206) == 1
              && *((unsigned char *)v204 + (v203 - 3)) == 2
              && *((unsigned char *)v204 + (v203 - 2)) == 2
              && *((unsigned char *)v204 + (v203 - 1)) == 8;
          if ((v207 & v211) != 0) {
            size_t v212 = v203;
          }
          else {
            size_t v212 = 0;
          }
          v47 += v212;
          operator delete(v204);
          int v213 = v197[1];
          if (((unint64_t)*((unsigned int *)v405 + 98) >> v213)) {
            goto LABEL_259;
          }
LABEL_260:
          operator delete(v197);
LABEL_261:
          uint64_t v50 = v405;
          if ((v405[32] + 7) >= 2u) {
            goto LABEL_262;
          }
          goto LABEL_30;
        case 19:
          if ((v45 & 0x40) != 0)
          {
            *(void *)&__src[28] = (char *)a3 + v46;
            *((void *)&__src[28] + 1) = &v47[4 * LODWORD(__src[20]) * (LODWORD(__src[9]) + LODWORD(__src[8]))];
            unint64_t v63 = (char *)(*((void *)&__src[28] + 1) + 4 * LODWORD(__src[20]));
          }
          else
          {
            if ((v45 & 0x200) == 0)
            {
              *(void *)&__src[28] = (char *)a3 + v46;
              v47 += 4 * LODWORD(__src[9]) * LODWORD(__src[20]);
            }
            if ((v45 & 0x400) == 0)
            {
              *((void *)&__src[28] + 1) = v47;
              v47 += 4 * LODWORD(__src[8]) * LODWORD(__src[20]);
            }
            unint64_t v63 = &v47[4 * LODWORD(__src[20])];
            *(void *)&__src[29] = v47;
          }
          goto LABEL_273;
        case 20:
          int v192 = 4 * DWORD1(__src[20]) * LODWORD(__src[20]);
          uint64_t v193 = v192 * LODWORD(__src[8]);
          *(void *)&__src[28] = (char *)a3 + v46;
          *((void *)&__src[28] + 1) = &v47[v193];
          *(void *)&__src[29] = &v47[v193 + v193];
          *(void *)&__src[36] = *(void *)&__src[29] + v193;
          *((void *)&__src[36] + 1) = *(void *)&__src[29] + v193 + v192;
          *(void *)&__src[37] = *((void *)&__src[36] + 1) + v192;
          uint64_t v50 = &__s[400 * v20];
          if ((v21[32] + 7) >= 2u) {
            goto LABEL_262;
          }
          goto LABEL_30;
        case 21:
          unint64_t v63 = &v47[4 * LODWORD(__src[8])];
          *(void *)&__src[28] = (char *)a3 + v46;
LABEL_273:
          *(void *)&__src[36] = v63;
          uint64_t v50 = &__s[400 * v20];
          if ((v21[32] + 7) >= 2u) {
            goto LABEL_262;
          }
          goto LABEL_30;
        case 26:
          *(void *)&__src[35] = (char *)a3 + v46;
          uint64_t v111 = 4 * LODWORD(__src[20]);
          BOOL v112 = &v47[v111];
          *((void *)&__src[35] + 1) = &v47[v111];
          int v421 = 0;
          long long __p = 0;
          unint64_t v422 = 0;
          float v418 = 0;
          float v417 = 0;
          unint64_t v419 = 0;
          uint64_t v404 = LODWORD(__src[20]);
          if (SLODWORD(__src[20]) >= 1)
          {
            unint64_t v396 = &v47[v111];
            uint64_t v398 = 4 * LODWORD(__src[20]);
            int v400 = v26;
            uint64_t v113 = 0;
            uint64_t v114 = 0;
            uint64_t v115 = 0;
            unint64_t v116 = 0;
            unint64_t v117 = 0;
            uint64_t v118 = 0;
            while (1)
            {
              float v120 = *(float *)(*((void *)&__src[35] + 1) + 4 * v118);
              int v121 = (int)(*(float *)(*(void *)&__src[35] + 4 * v118) + 0.5);
              if (v117 < v116)
              {
                *v117++ = v121;
                int v421 = (char *)v117;
                int v122 = (int)(v120 + 0.5);
                if (v114 < v113) {
                  goto LABEL_106;
                }
                goto LABEL_126;
              }
              uint64_t v123 = v117 - v115;
              unint64_t v124 = v123 + 1;
              if ((unint64_t)(v123 + 1) >> 62) {
                sub_19E13D694();
              }
              if (((char *)v116 - (char *)v115) >> 1 > v124) {
                unint64_t v124 = ((char *)v116 - (char *)v115) >> 1;
              }
              if ((unint64_t)((char *)v116 - (char *)v115) >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v125 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v125 = v124;
              }
              if (v125)
              {
                if (v125 >> 62) {
                  sub_19E13C418();
                }
                uint64_t v126 = v113;
                uint64_t v127 = operator new(4 * v125);
                uint64_t v113 = v126;
                unint64_t v128 = (int *)&v127[4 * v123];
                *unint64_t v128 = v121;
                uint64_t v129 = (uint64_t)(v128 + 1);
                if (v117 != v115)
                {
LABEL_120:
                  unint64_t v130 = (char *)(v117 - 1) - (char *)v115;
                  if (v130 < 0xBC
                    || &v127[(char *)v117 - (char *)v115 - 4 - (v130 & 0xFFFFFFFFFFFFFFFCLL)] > &v127[(char *)v117 - (char *)v115 - 4]
                    || (int *)((char *)v117 - (v130 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v117 - 1
                    || (unint64_t)((char *)v115 - v127) < 0x20)
                  {
                    uint64_t v131 = v117;
                  }
                  else
                  {
                    uint64_t v146 = (v130 >> 2) + 1;
                    uint64_t v147 = 4 * (v146 & 0x7FFFFFFFFFFFFFF8);
                    uint64_t v131 = &v117[v147 / 0xFFFFFFFFFFFFFFFCLL];
                    unint64_t v128 = (int *)((char *)v128 - v147);
                    uint64_t v148 = &v127[4 * v123 - 16];
                    uint64_t v149 = v117 - 4;
                    uint64_t v150 = v146 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      long long v151 = *(_OWORD *)v149;
                      *(v148 - 1) = *((_OWORD *)v149 - 1);
                      *uint64_t v148 = v151;
                      v148 -= 2;
                      v149 -= 8;
                      v150 -= 8;
                    }
                    while (v150);
                    if (v146 == (v146 & 0x7FFFFFFFFFFFFFF8))
                    {
LABEL_123:
                      unint64_t v116 = (int *)&v127[4 * v125];
                      long long __p = v128;
                      int v421 = (char *)v129;
                      unint64_t v422 = (unint64_t)v116;
                      if (!v115) {
                        goto LABEL_125;
                      }
LABEL_124:
                      operator delete(v115);
                      uint64_t v114 = v418;
                      uint64_t v113 = (char *)v419;
                      goto LABEL_125;
                    }
                  }
                  do
                  {
                    int v132 = *--v131;
                    *--unint64_t v128 = v132;
                  }
                  while (v131 != v115);
                  goto LABEL_123;
                }
              }
              else
              {
                uint64_t v127 = 0;
                unint64_t v128 = (int *)(4 * v123);
                *(_DWORD *)(4 * v123) = v121;
                uint64_t v129 = 4 * v123 + 4;
                if (v117 != v115) {
                  goto LABEL_120;
                }
              }
              unint64_t v116 = (int *)&v127[4 * v125];
              long long __p = v128;
              int v421 = (char *)v129;
              unint64_t v422 = (unint64_t)v116;
              if (v115) {
                goto LABEL_124;
              }
LABEL_125:
              uint64_t v115 = v128;
              unint64_t v117 = (int *)v129;
              int v421 = (char *)v129;
              int v122 = (int)(v120 + 0.5);
              if (v114 < v113)
              {
LABEL_106:
                *(_DWORD *)uint64_t v114 = v122;
                uint64_t v119 = (uint64_t)(v114 + 4);
                goto LABEL_107;
              }
LABEL_126:
              uint64_t v133 = v116;
              uint64_t v134 = (char *)v417;
              int64_t v135 = v114 - (unsigned char *)v417;
              uint64_t v136 = (v114 - (unsigned char *)v417) >> 2;
              unint64_t v137 = v136 + 1;
              if ((unint64_t)(v136 + 1) >> 62) {
                sub_19E13D694();
              }
              if ((v113 - (unsigned char *)v417) >> 1 > v137) {
                unint64_t v137 = (v113 - (unsigned char *)v417) >> 1;
              }
              if ((unint64_t)(v113 - (unsigned char *)v417) >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v138 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v138 = v137;
              }
              if (v138)
              {
                if (v138 >> 62) {
                  sub_19E13C418();
                }
                unint64_t v139 = v138;
                unint64_t v140 = operator new(4 * v138);
                unint64_t v138 = v139;
                uint64_t v141 = (int *)&v140[4 * v136];
                int *v141 = v122;
                uint64_t v119 = (uint64_t)(v141 + 1);
                if (v114 != v134)
                {
LABEL_135:
                  unint64_t v142 = v114 - 4 - v134;
                  if (v142 < 0xBC
                    || &v140[v135 - 4 - (v142 & 0xFFFFFFFFFFFFFFFCLL)] > &v140[v135 - 4]
                    || &v114[-(v142 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v114 - 4
                    || (unint64_t)(v114 - v140 - v135) < 0x20)
                  {
                    int v143 = v114;
                    unint64_t v116 = v133;
                  }
                  else
                  {
                    uint64_t v152 = (v142 >> 2) + 1;
                    uint64_t v153 = 4 * (v152 & 0x7FFFFFFFFFFFFFF8);
                    int v143 = &v114[-v153];
                    uint64_t v141 = (int *)((char *)v141 - v153);
                    unint64_t v154 = &v140[4 * v136 - 16];
                    uint64_t v155 = v114 - 16;
                    uint64_t v156 = v152 & 0x7FFFFFFFFFFFFFF8;
                    unint64_t v116 = v133;
                    do
                    {
                      long long v157 = *(_OWORD *)v155;
                      *(v154 - 1) = *((_OWORD *)v155 - 1);
                      _OWORD *v154 = v157;
                      v154 -= 2;
                      v155 -= 32;
                      v156 -= 8;
                    }
                    while (v156);
                    if (v152 == (v152 & 0x7FFFFFFFFFFFFFF8))
                    {
LABEL_138:
                      uint64_t v113 = &v140[4 * v138];
                      float v417 = v141;
                      unint64_t v419 = (unint64_t)v113;
                      if (!v134) {
                        goto LABEL_107;
                      }
LABEL_145:
                      uint64_t v145 = v113;
                      operator delete(v134);
                      uint64_t v113 = v145;
                      goto LABEL_107;
                    }
                  }
                  do
                  {
                    int v144 = *((_DWORD *)v143 - 1);
                    v143 -= 4;
                    *--uint64_t v141 = v144;
                  }
                  while (v143 != v134);
                  goto LABEL_138;
                }
              }
              else
              {
                unint64_t v140 = 0;
                uint64_t v141 = (int *)(4 * v136);
                *(_DWORD *)(4 * v136) = v122;
                uint64_t v119 = 4 * v136 + 4;
                if (v114 != v134) {
                  goto LABEL_135;
                }
              }
              unint64_t v116 = v133;
              uint64_t v113 = &v140[4 * v138];
              float v417 = v141;
              unint64_t v419 = (unint64_t)v113;
              if (v134) {
                goto LABEL_145;
              }
LABEL_107:
              float v418 = (char *)v119;
              ++v118;
              uint64_t v114 = (char *)v119;
              if (v118 == v404)
              {
                size_t v195 = __p;
                uint64_t v196 = v417;
                int v26 = v400;
                BOOL v112 = v396;
                uint64_t v111 = v398;
                goto LABEL_355;
              }
            }
          }
          uint64_t v196 = 0;
          size_t v195 = 0;
LABEL_355:
          char v272 = 2 * (v26 != 2);
          int v273 = (*v196 * *v195) << v272;
          *(void *)&__src[28] = &v112[v111];
          v274 = &v112[v111 + v273];
          int v275 = v273 & 3;
          int v276 = -v273;
          BOOL v162 = v276 < 0;
          int v277 = v276 & 3;
          if (!v162) {
            int v275 = -v277;
          }
          if (v275) {
            size_t v278 = (8 - v275);
          }
          else {
            size_t v278 = 0;
          }
          if (v278 >= 5)
          {
            float v279 = operator new(v278);
            memcpy(v279, v274, v278);
            uint64_t v280 = 0;
            uint64_t v281 = (v278 - 4);
            LOBYTE(v282) = 1;
            do
              int v282 = v282 & (*((unsigned char *)v279 + v280++) == 0);
            while (v281 != v280);
            BOOL v286 = *((unsigned char *)v279 + v281) == 1
                && *((unsigned char *)v279 + (v278 - 3)) == 2
                && *((unsigned char *)v279 + (v278 - 2)) == 2
                && *((unsigned char *)v279 + (v278 - 1)) == 8;
            if ((v282 & v286) != 0) {
              size_t v287 = v278;
            }
            else {
              size_t v287 = 0;
            }
            v274 += v287;
            operator delete(v279);
          }
          if (LODWORD(__src[22]) == 1)
          {
            int v288 = (*v195 * (v404 - 1)) << v272;
            v274 += v288;
            int v289 = -v288;
            BOOL v162 = v289 < 0;
            int v290 = v289 & 3;
            int v291 = v162 ? ((*v195 * (v404 - 1)) << v272) & 3 : -v290;
            size_t v292 = v291 ? (8 - v291) : 0;
            if (v292 >= 5)
            {
              BOOL v293 = operator new(v292);
              memcpy(v293, v274, v292);
              uint64_t v294 = 0;
              uint64_t v295 = (v292 - 4);
              LOBYTE(v296) = 1;
              do
                int v296 = v296 & (*((unsigned char *)v293 + v294++) == 0);
              while (v295 != v294);
              BOOL v300 = *((unsigned char *)v293 + v295) == 1
                  && *((unsigned char *)v293 + (v292 - 3)) == 2
                  && *((unsigned char *)v293 + (v292 - 2)) == 2
                  && *((unsigned char *)v293 + (v292 - 1)) == 8;
              if ((v296 & v300) != 0) {
                size_t v301 = v292;
              }
              else {
                size_t v301 = 0;
              }
              v274 += v301;
              operator delete(v293);
            }
          }
          if ((int)v404 >= 2)
          {
            for (uint64_t i = 1; i != v404; ++i)
            {
              int v303 = v195[i];
              int v304 = (v196[i] * v303) << v272;
              uint64_t v305 = (char *)__src + 8 * i;
              *((void *)v305 + 56) = v274;
              uint64_t v306 = &v274[v304];
              int v307 = v304 & 3;
              int v308 = -v304;
              BOOL v162 = v308 < 0;
              int v309 = v308 & 3;
              if (v162) {
                int v310 = v307;
              }
              else {
                int v310 = -v309;
              }
              if (v310) {
                size_t v311 = (8 - v310);
              }
              else {
                size_t v311 = 0;
              }
              if (v311 >= 5)
              {
                uint64_t v312 = operator new(v311);
                memcpy(v312, v306, v311);
                uint64_t v313 = 0;
                uint64_t v314 = (v311 - 4);
                LOBYTE(v315) = 1;
                do
                  int v315 = v315 & (*((unsigned char *)v312 + v313++) == 0);
                while (v314 != v313);
                BOOL v319 = *((unsigned char *)v312 + v314) == 1
                    && *((unsigned char *)v312 + (v311 - 3)) == 2
                    && *((unsigned char *)v312 + (v311 - 2)) == 2
                    && *((unsigned char *)v312 + (v311 - 1)) == 8;
                if ((v315 & v319) != 0) {
                  size_t v320 = v311;
                }
                else {
                  size_t v320 = 0;
                }
                v306 += v320;
                operator delete(v312);
                int v303 = v195[i];
              }
              int v321 = (*v195 * v303) << v272;
              *((void *)v305 + 71) = v306;
              v274 = &v306[v321];
              int v322 = v321 & 3;
              int v323 = -v321;
              BOOL v162 = v323 < 0;
              int v324 = v323 & 3;
              if (v162) {
                int v325 = v322;
              }
              else {
                int v325 = -v324;
              }
              if (v325) {
                size_t v326 = (8 - v325);
              }
              else {
                size_t v326 = 0;
              }
              if (v326 >= 5)
              {
                uint64_t v327 = operator new(v326);
                memcpy(v327, v274, v326);
                uint64_t v328 = 0;
                uint64_t v329 = (v326 - 4);
                LOBYTE(v330) = 1;
                do
                  int v330 = v330 & (*((unsigned char *)v327 + v328++) == 0);
                while (v329 != v328);
                BOOL v334 = *((unsigned char *)v327 + v329) == 1
                    && *((unsigned char *)v327 + (v326 - 3)) == 2
                    && *((unsigned char *)v327 + (v326 - 2)) == 2
                    && *((unsigned char *)v327 + (v326 - 1)) == 8;
                if ((v330 & v334) != 0) {
                  size_t v335 = v326;
                }
                else {
                  size_t v335 = 0;
                }
                v274 += v335;
                operator delete(v327);
              }
            }
          }
          unint64_t v271 = v196;
          goto LABEL_459;
        case 27:
          *(void *)&__src[35] = (char *)a3 + v46;
          uint64_t v64 = 4 * LODWORD(__src[20]);
          float v65 = &v47[v64];
          *((void *)&__src[35] + 1) = &v47[v64];
          int v421 = 0;
          long long __p = 0;
          unint64_t v422 = 0;
          float v418 = 0;
          float v417 = 0;
          unint64_t v419 = 0;
          uint64_t v403 = LODWORD(__src[20]);
          if (SLODWORD(__src[20]) >= 1)
          {
            unint64_t v395 = &v47[v64];
            uint64_t v397 = 4 * LODWORD(__src[20]);
            int v399 = v26;
            unint64_t v66 = 0;
            long long v67 = 0;
            BOOL v68 = 0;
            uint64_t v69 = 0;
            float32x4_t v70 = 0;
            uint64_t v71 = 0;
            while (1)
            {
              float v73 = *(float *)(*((void *)&__src[35] + 1) + 4 * v71);
              int v74 = (int)(*(float *)(*(void *)&__src[35] + 4 * v71) + 0.5);
              if (v70 < v69)
              {
                *v70++ = v74;
                int v421 = (char *)v70;
                int v75 = (int)(v73 + 0.5);
                if (v67 < v66) {
                  goto LABEL_50;
                }
                goto LABEL_70;
              }
              uint64_t v76 = v70 - v68;
              unint64_t v77 = v76 + 1;
              if ((unint64_t)(v76 + 1) >> 62) {
                sub_19E13D694();
              }
              if (((char *)v69 - (char *)v68) >> 1 > v77) {
                unint64_t v77 = ((char *)v69 - (char *)v68) >> 1;
              }
              if ((unint64_t)((char *)v69 - (char *)v68) >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v78 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v78 = v77;
              }
              if (v78)
              {
                if (v78 >> 62) {
                  sub_19E13C418();
                }
                int8x16_t v79 = v66;
                BOOL v80 = operator new(4 * v78);
                unint64_t v66 = v79;
                uint64_t v81 = (int *)&v80[4 * v76];
                int *v81 = v74;
                uint64_t v82 = (uint64_t)(v81 + 1);
                if (v70 != v68)
                {
LABEL_64:
                  unint64_t v83 = (char *)(v70 - 1) - (char *)v68;
                  if (v83 < 0xBC
                    || &v80[(char *)v70 - (char *)v68 - 4 - (v83 & 0xFFFFFFFFFFFFFFFCLL)] > &v80[(char *)v70
                                                                                               - (char *)v68
                                                                                               - 4]
                    || (int *)((char *)v70 - (v83 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v70 - 1
                    || (unint64_t)((char *)v68 - v80) < 0x20)
                  {
                    float v84 = v70;
                  }
                  else
                  {
                    uint64_t v99 = (v83 >> 2) + 1;
                    uint64_t v100 = 4 * (v99 & 0x7FFFFFFFFFFFFFF8);
                    float v84 = &v70[v100 / 0xFFFFFFFFFFFFFFFCLL];
                    uint64_t v81 = (int *)((char *)v81 - v100);
                    uint64_t v101 = &v80[4 * v76 - 16];
                    unint64_t v102 = v70 - 4;
                    uint64_t v103 = v99 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      long long v104 = *(_OWORD *)v102;
                      *(v101 - 1) = *((_OWORD *)v102 - 1);
                      _OWORD *v101 = v104;
                      v101 -= 2;
                      v102 -= 8;
                      v103 -= 8;
                    }
                    while (v103);
                    if (v99 == (v99 & 0x7FFFFFFFFFFFFFF8))
                    {
LABEL_67:
                      uint64_t v69 = (int *)&v80[4 * v78];
                      long long __p = v81;
                      int v421 = (char *)v82;
                      unint64_t v422 = (unint64_t)v69;
                      if (!v68) {
                        goto LABEL_69;
                      }
LABEL_68:
                      operator delete(v68);
                      long long v67 = v418;
                      unint64_t v66 = (char *)v419;
                      goto LABEL_69;
                    }
                  }
                  do
                  {
                    int v85 = *--v84;
                    *--uint64_t v81 = v85;
                  }
                  while (v84 != v68);
                  goto LABEL_67;
                }
              }
              else
              {
                BOOL v80 = 0;
                uint64_t v81 = (int *)(4 * v76);
                *(_DWORD *)(4 * v76) = v74;
                uint64_t v82 = 4 * v76 + 4;
                if (v70 != v68) {
                  goto LABEL_64;
                }
              }
              uint64_t v69 = (int *)&v80[4 * v78];
              long long __p = v81;
              int v421 = (char *)v82;
              unint64_t v422 = (unint64_t)v69;
              if (v68) {
                goto LABEL_68;
              }
LABEL_69:
              BOOL v68 = v81;
              float32x4_t v70 = (int *)v82;
              int v421 = (char *)v82;
              int v75 = (int)(v73 + 0.5);
              if (v67 < v66)
              {
LABEL_50:
                *(_DWORD *)long long v67 = v75;
                uint64_t v72 = (uint64_t)(v67 + 4);
                goto LABEL_51;
              }
LABEL_70:
              uint64_t v86 = v69;
              unint64_t v87 = (char *)v417;
              int64_t v88 = v67 - (unsigned char *)v417;
              uint64_t v89 = (v67 - (unsigned char *)v417) >> 2;
              unint64_t v90 = v89 + 1;
              if ((unint64_t)(v89 + 1) >> 62) {
                sub_19E13D694();
              }
              if ((v66 - (unsigned char *)v417) >> 1 > v90) {
                unint64_t v90 = (v66 - (unsigned char *)v417) >> 1;
              }
              if ((unint64_t)(v66 - (unsigned char *)v417) >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v91 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v91 = v90;
              }
              if (v91)
              {
                if (v91 >> 62) {
                  sub_19E13C418();
                }
                unint64_t v92 = v91;
                uint64_t v93 = operator new(4 * v91);
                unint64_t v91 = v92;
                uint64_t v94 = (int *)&v93[4 * v89];
                int *v94 = v75;
                uint64_t v72 = (uint64_t)(v94 + 1);
                if (v67 != v87)
                {
LABEL_79:
                  unint64_t v95 = v67 - 4 - v87;
                  if (v95 < 0xBC
                    || &v93[v88 - 4 - (v95 & 0xFFFFFFFFFFFFFFFCLL)] > &v93[v88 - 4]
                    || &v67[-(v95 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v67 - 4
                    || (unint64_t)(v67 - v93 - v88) < 0x20)
                  {
                    uint64_t v96 = v67;
                    uint64_t v69 = v86;
                  }
                  else
                  {
                    uint64_t v105 = (v95 >> 2) + 1;
                    uint64_t v106 = 4 * (v105 & 0x7FFFFFFFFFFFFFF8);
                    uint64_t v96 = &v67[-v106];
                    uint64_t v94 = (int *)((char *)v94 - v106);
                    unint64_t v107 = &v93[4 * v89 - 16];
                    uint64_t v108 = v67 - 16;
                    uint64_t v109 = v105 & 0x7FFFFFFFFFFFFFF8;
                    uint64_t v69 = v86;
                    do
                    {
                      long long v110 = *(_OWORD *)v108;
                      *(v107 - 1) = *((_OWORD *)v108 - 1);
                      *unint64_t v107 = v110;
                      v107 -= 2;
                      v108 -= 32;
                      v109 -= 8;
                    }
                    while (v109);
                    if (v105 == (v105 & 0x7FFFFFFFFFFFFFF8))
                    {
LABEL_82:
                      unint64_t v66 = &v93[4 * v91];
                      float v417 = v94;
                      unint64_t v419 = (unint64_t)v66;
                      if (!v87) {
                        goto LABEL_51;
                      }
LABEL_89:
                      unint64_t v98 = v66;
                      operator delete(v87);
                      unint64_t v66 = v98;
                      goto LABEL_51;
                    }
                  }
                  do
                  {
                    int v97 = *((_DWORD *)v96 - 1);
                    v96 -= 4;
                    *--uint64_t v94 = v97;
                  }
                  while (v96 != v87);
                  goto LABEL_82;
                }
              }
              else
              {
                uint64_t v93 = 0;
                uint64_t v94 = (int *)(4 * v89);
                *(_DWORD *)(4 * v89) = v75;
                uint64_t v72 = 4 * v89 + 4;
                if (v67 != v87) {
                  goto LABEL_79;
                }
              }
              uint64_t v69 = v86;
              unint64_t v66 = &v93[4 * v91];
              float v417 = v94;
              unint64_t v419 = (unint64_t)v66;
              if (v87) {
                goto LABEL_89;
              }
LABEL_51:
              float v418 = (char *)v72;
              ++v71;
              long long v67 = (char *)v72;
              if (v71 == v403)
              {
                uint64_t v194 = v417;
                size_t v195 = __p;
                int v26 = v399;
                float v65 = v395;
                uint64_t v64 = v397;
                goto LABEL_276;
              }
            }
          }
          size_t v195 = 0;
          uint64_t v194 = 0;
LABEL_276:
          long long v219 = &v65[v64];
          int v220 = v403 + *v194 - 1;
          *uint64_t v194 = v220;
          char v221 = 2 * (v26 != 2);
          int v222 = (*v195 * v220) << v221;
          *(void *)&__src[28] = v219;
          long long v223 = &v219[v222];
          int v224 = v222 & 3;
          int v225 = -v222;
          BOOL v162 = v225 < 0;
          int v226 = v225 & 3;
          if (!v162) {
            int v224 = -v226;
          }
          if (v224) {
            size_t v227 = (8 - v224);
          }
          else {
            size_t v227 = 0;
          }
          if (v227 >= 5)
          {
            long long v228 = operator new(v227);
            memcpy(v228, v223, v227);
            uint64_t v229 = 0;
            uint64_t v230 = (v227 - 4);
            LOBYTE(v231) = 1;
            do
              int v231 = v231 & (*((unsigned char *)v228 + v229++) == 0);
            while (v230 != v229);
            BOOL v235 = *((unsigned char *)v228 + v230) == 1
                && *((unsigned char *)v228 + (v227 - 3)) == 2
                && *((unsigned char *)v228 + (v227 - 2)) == 2
                && *((unsigned char *)v228 + (v227 - 1)) == 8;
            if ((v231 & v235) != 0) {
              size_t v236 = v227;
            }
            else {
              size_t v236 = 0;
            }
            v223 += v236;
            operator delete(v228);
          }
          if ((int)v403 >= 2)
          {
            for (uint64_t j = 1; j != v403; ++j)
            {
              int v238 = v195[j];
              int v239 = (v194[j] * v238) << v221;
              unint64_t v240 = (char *)__src + 8 * j;
              *((void *)v240 + 56) = v223;
              uint64_t v241 = &v223[v239];
              int v242 = v239 & 3;
              int v243 = -v239;
              BOOL v162 = v243 < 0;
              int v244 = v243 & 3;
              if (v162) {
                int v245 = v242;
              }
              else {
                int v245 = -v244;
              }
              if (v245) {
                size_t v246 = (8 - v245);
              }
              else {
                size_t v246 = 0;
              }
              if (v246 >= 5)
              {
                int v247 = operator new(v246);
                memcpy(v247, v241, v246);
                uint64_t v248 = 0;
                uint64_t v249 = (v246 - 4);
                LOBYTE(v250) = 1;
                do
                  int v250 = v250 & (*((unsigned char *)v247 + v248++) == 0);
                while (v249 != v248);
                BOOL v254 = *((unsigned char *)v247 + v249) == 1
                    && *((unsigned char *)v247 + (v246 - 3)) == 2
                    && *((unsigned char *)v247 + (v246 - 2)) == 2
                    && *((unsigned char *)v247 + (v246 - 1)) == 8;
                if ((v250 & v254) != 0) {
                  size_t v255 = v246;
                }
                else {
                  size_t v255 = 0;
                }
                v241 += v255;
                operator delete(v247);
                int v238 = v195[j];
              }
              int v256 = (*v195 * v238) << v221;
              *((void *)v240 + 71) = v241;
              long long v223 = &v241[v256];
              int v257 = v256 & 3;
              int v258 = -v256;
              BOOL v162 = v258 < 0;
              int v259 = v258 & 3;
              if (v162) {
                int v260 = v257;
              }
              else {
                int v260 = -v259;
              }
              if (v260) {
                size_t v261 = (8 - v260);
              }
              else {
                size_t v261 = 0;
              }
              if (v261 >= 5)
              {
                float32x4_t v262 = operator new(v261);
                memcpy(v262, v223, v261);
                uint64_t v263 = 0;
                uint64_t v264 = (v261 - 4);
                LOBYTE(v265) = 1;
                do
                  int v265 = v265 & (*((unsigned char *)v262 + v263++) == 0);
                while (v264 != v263);
                BOOL v269 = *((unsigned char *)v262 + v264) == 1
                    && *((unsigned char *)v262 + (v261 - 3)) == 2
                    && *((unsigned char *)v262 + (v261 - 2)) == 2
                    && *((unsigned char *)v262 + (v261 - 1)) == 8;
                if ((v265 & v269) != 0) {
                  size_t v270 = v261;
                }
                else {
                  size_t v270 = 0;
                }
                v223 += v270;
                operator delete(v262);
              }
            }
          }
          unint64_t v271 = v194;
LABEL_459:
          operator delete(v271);
          operator delete(v195);
          uint64_t v50 = v405;
          if ((v405[32] + 7) < 2u) {
            goto LABEL_30;
          }
LABEL_262:
          memcpy(v416, __src, sizeof(v416));
          size_t v214 = strlen(v50);
          if (v214 > 0x7FFFFFFFFFFFFFF7) {
            sub_19E13C370();
          }
          size_t v215 = v214;
          if (v214 >= 0x17)
          {
            uint64_t v217 = (v214 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v214 | 7) != 0x17) {
              uint64_t v217 = v214 | 7;
            }
            uint64_t v218 = v217 + 1;
            p_p = operator new(v217 + 1);
            unint64_t v422 = v218 | 0x8000000000000000;
            long long __p = p_p;
            int v421 = (char *)v215;
LABEL_269:
            memcpy(p_p, v405, v215);
            goto LABEL_270;
          }
          HIBYTE(v422) = v214;
          p_p = &__p;
          if (v214) {
            goto LABEL_269;
          }
LABEL_270:
          *((unsigned char *)p_p + v215) = 0;
          sub_19E305584((uint64_t)a2, (uint64_t)v416, &__p);
          if (SHIBYTE(v422) < 0) {
            operator delete(__p);
          }
LABEL_30:
          uint64_t v20 = v402 + 1;
          int v12 = DWORD2(v426);
          if (v402 + 1 >= (unint64_t)DWORD2(v426)) {
            goto LABEL_461;
          }
          break;
        default:
          goto LABEL_261;
      }
    }
  }
LABEL_461:
  int v421 = 0;
  long long __p = 0;
  unint64_t v422 = 0;
  float v418 = 0;
  float v417 = 0;
  unint64_t v419 = 0;
  v413 = 0;
  float v414 = 0;
  unint64_t v415 = 0;
  if (v12)
  {
    unint64_t v336 = 0;
    uint64_t v337 = __s;
    while (1)
    {
      uint64_t v340 = v421;
      if ((unint64_t)v421 >= v422)
      {
        int v421 = sub_19E2876DC(&__p, v337);
        int v344 = v337[32];
        if (v344 != 250) {
          goto LABEL_471;
        }
      }
      else
      {
        size_t v341 = strlen(v337);
        if (v341 > 0x7FFFFFFFFFFFFFF7) {
          sub_19E13C370();
        }
        size_t v342 = v341;
        if (v341 >= 0x17)
        {
          uint64_t v349 = (v341 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v341 | 7) != 0x17) {
            uint64_t v349 = v341 | 7;
          }
          uint64_t v350 = v349 + 1;
          uint64_t v343 = operator new(v349 + 1);
          *((void *)v340 + 1) = v342;
          *((void *)v340 + 2) = v350 | 0x8000000000000000;
          *(void *)uint64_t v340 = v343;
        }
        else
        {
          v421[23] = v341;
          uint64_t v343 = v340;
          if (!v341)
          {
            *uint64_t v340 = 0;
            int v421 = v340 + 24;
            int v344 = v337[32];
            if (v344 != 250) {
              goto LABEL_471;
            }
            goto LABEL_474;
          }
        }
        memmove(v343, v337, v342);
        *((unsigned char *)v343 + v342) = 0;
        int v421 = v340 + 24;
        int v344 = v337[32];
        if (v344 != 250)
        {
LABEL_471:
          if (v344 != 249) {
            goto LABEL_465;
          }
          goto LABEL_491;
        }
      }
LABEL_474:
      uint64_t v345 = v418;
      if ((unint64_t)v418 >= v419)
      {
        float v418 = sub_19E2876DC(&v417, v337);
        if (v337[32] != 249) {
          goto LABEL_465;
        }
      }
      else
      {
        size_t v346 = strlen(v337);
        if (v346 > 0x7FFFFFFFFFFFFFF7) {
          sub_19E13C370();
        }
        size_t v347 = v346;
        if (v346 >= 0x17)
        {
          uint64_t v351 = (v346 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v346 | 7) != 0x17) {
            uint64_t v351 = v346 | 7;
          }
          uint64_t v352 = v351 + 1;
          BOOL v348 = operator new(v351 + 1);
          *((void *)v345 + 1) = v347;
          *((void *)v345 + 2) = v352 | 0x8000000000000000;
          *(void *)uint64_t v345 = v348;
LABEL_490:
          memmove(v348, v337, v347);
          *((unsigned char *)v348 + v347) = 0;
          float v418 = v345 + 24;
          if (v337[32] != 249) {
            goto LABEL_465;
          }
          goto LABEL_491;
        }
        v418[23] = v346;
        BOOL v348 = v345;
        if (v346) {
          goto LABEL_490;
        }
        *uint64_t v345 = 0;
        float v418 = v345 + 24;
        if (v337[32] != 249) {
          goto LABEL_465;
        }
      }
LABEL_491:
      uint64_t v353 = v414;
      if ((unint64_t)v414 < v415)
      {
        size_t v354 = strlen(v337);
        if (v354 > 0x7FFFFFFFFFFFFFF7) {
          sub_19E13C370();
        }
        size_t v355 = v354;
        if (v354 >= 0x17)
        {
          uint64_t v357 = (v354 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v354 | 7) != 0x17) {
            uint64_t v357 = v354 | 7;
          }
          uint64_t v358 = v357 + 1;
          int v356 = operator new(v357 + 1);
          *((void *)v353 + 1) = v355;
          *((void *)v353 + 2) = v358 | 0x8000000000000000;
          *(void *)uint64_t v353 = v356;
        }
        else
        {
          v414[23] = v354;
          int v356 = v353;
          if (!v354) {
            goto LABEL_500;
          }
        }
        memmove(v356, v337, v355);
LABEL_500:
        *((unsigned char *)v356 + v355) = 0;
        uint64_t v338 = v353 + 24;
        goto LABEL_464;
      }
      uint64_t v338 = sub_19E2876DC(&v413, v337);
LABEL_464:
      float v414 = v338;
LABEL_465:
      ++v336;
      int v339 = DWORD2(v426);
      v337 += 400;
      if (v336 >= DWORD2(v426)) {
        goto LABEL_502;
      }
    }
  }
  int v339 = 0;
LABEL_502:
  sub_19E304A98(a2, (const void ***)&v417, (const void ***)&v413);
  if (v339)
  {
    uint64_t v359 = 0;
    v360 = __s + 32;
    do
    {
      uint64_t v361 = 0;
      v406 = v359;
      v362 = &__s[400 * (void)v359];
      int v363 = v362 + 372;
      do
      {
        int v364 = *(unsigned __int16 *)&v363[2 * v361];
        if (!*(_WORD *)&v363[2 * v361])
        {
          ++v361;
          continue;
        }
        int v365 = v364 - 1;
        int v366 = v360[400 * (v364 - 1)];
        if (v366 == 250) {
          int v367 = 0;
        }
        else {
          int v367 = v362[39];
        }
        uint64_t v368 = &__s[400 * v365];
        ++v361;
        if (v366 == 249) {
          int v369 = 0;
        }
        else {
          int v369 = v361;
        }
        size_t v370 = strlen(&__s[400 * v365]);
        if (v370 > 0x7FFFFFFFFFFFFFF7) {
          sub_19E13C370();
        }
        uint64_t v371 = (void *)v370;
        if (v370 >= 0x17)
        {
          v373 = v360;
          uint64_t v374 = (v370 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v370 | 7) != 0x17) {
            uint64_t v374 = v370 | 7;
          }
          uint64_t v375 = v374 + 1;
          int v372 = operator new(v374 + 1);
          v411[1] = v371;
          unint64_t v412 = v375 | 0x8000000000000000;
          v411[0] = v372;
          v360 = v373;
LABEL_522:
          memcpy(v372, v368, (size_t)v371);
          goto LABEL_523;
        }
        HIBYTE(v412) = v370;
        int v372 = v411;
        if (v370) {
          goto LABEL_522;
        }
LABEL_523:
        *((unsigned char *)v371 + (void)v372) = 0;
        size_t v376 = strlen(v362);
        if (v376 > 0x7FFFFFFFFFFFFFF7) {
          sub_19E13C370();
        }
        v377 = (void *)v376;
        if (v376 >= 0x17)
        {
          uint64_t v379 = (v376 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v376 | 7) != 0x17) {
            uint64_t v379 = v376 | 7;
          }
          uint64_t v380 = v379 + 1;
          float32x4_t v378 = operator new(v379 + 1);
          v409[1] = v377;
          unint64_t v410 = v380 | 0x8000000000000000;
          v409[0] = v378;
LABEL_530:
          memcpy(v378, v362, (size_t)v377);
          goto LABEL_531;
        }
        HIBYTE(v410) = v376;
        float32x4_t v378 = v409;
        if (v376) {
          goto LABEL_530;
        }
LABEL_531:
        *((unsigned char *)v377 + (void)v378) = 0;
        sub_19E3072C4((uint64_t)a2, (uint64_t)v411, v367, (uint64_t)v409, v369);
        if (SHIBYTE(v410) < 0)
        {
          operator delete(v409[0]);
          if ((SHIBYTE(v412) & 0x80000000) == 0) {
            continue;
          }
        }
        else if ((SHIBYTE(v412) & 0x80000000) == 0)
        {
          continue;
        }
        operator delete(v411[0]);
      }
      while (v361 != 8);
      uint64_t v359 = v406 + 1;
    }
    while ((unint64_t)(v406 + 1) < DWORD2(v426));
  }
  float32x4_t v381 = (char *)v413;
  if (v413)
  {
    float32x4_t v382 = v414;
    float32x4_t v383 = v413;
    if (v414 != v413)
    {
      do
      {
        if (*(v382 - 1) < 0) {
          operator delete(*((void **)v382 - 3));
        }
        v382 -= 24;
      }
      while (v382 != v381);
      float32x4_t v383 = v413;
    }
    float v414 = v381;
    operator delete(v383);
  }
  float32x4_t v384 = (char *)v417;
  if (v417)
  {
    float32x4_t v385 = v418;
    float32x4_t v386 = v417;
    if (v418 != v417)
    {
      do
      {
        if (*(v385 - 1) < 0) {
          operator delete(*((void **)v385 - 3));
        }
        v385 -= 24;
      }
      while (v385 != v384);
      float32x4_t v386 = v417;
    }
    float v418 = v384;
    operator delete(v386);
  }
  int v387 = (char *)__p;
  if (__p)
  {
    v388 = v421;
    uint64_t v389 = __p;
    if (v421 != __p)
    {
      do
      {
        if (*(v388 - 1) < 0) {
          operator delete(*((void **)v388 - 3));
        }
        v388 -= 24;
      }
      while (v388 != v387);
      uint64_t v389 = __p;
    }
    int v421 = v387;
    operator delete(v389);
  }
  if (SHIBYTE(v425) < 0) {
    operator delete(__dst[0]);
  }
  return 1;
}

void sub_19E272214(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    if (*(char *)(v2 - 225) < 0) {
      operator delete(*(void **)(v2 - 248));
    }
    if (a2 == 2)
    {
      exception_ptr = (const std::runtime_error *)__cxa_get_exception_ptr(a1);
      std::runtime_error::runtime_error((std::runtime_error *)&STACK[0x3A8], exception_ptr);
      STACK[0x3A8] = (unint64_t)&unk_1EF0A7C78;
      __cxa_begin_catch(a1);
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      size_t v7 = std::runtime_error::what((const std::runtime_error *)&STACK[0x3A8]);
      std::runtime_error::runtime_error(exception, v7);
      exception->__vftable = (std::runtime_error_vtbl *)&unk_1EF0A7C78;
      __cxa_throw(exception, (struct type_info *)&unk_1EF0A3FD0, (void (*)(void *))std::runtime_error::~runtime_error);
    }
    __cxa_begin_catch(a1);
    uint64_t v8 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v8, "unknown exception");
    v8->__vftable = (std::runtime_error_vtbl *)&unk_1EF0A7BD8;
    __cxa_throw(v8, (struct type_info *)&unk_1EF0A3F70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  _Unwind_Resume(a1);
}

void sub_19E272594(_Unwind_Exception *a1)
{
}

void sub_19E2725B8()
{
  __cxa_free_exception(v0);
  JUMPOUT(0x19E2725C4);
}

void sub_19E2725D4(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x19E2725DCLL);
  }
  sub_19E13A9BC(a1);
}

uint64_t sub_19E272660(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, const char *a5, int *a6)
{
  uint64_t v1179 = *MEMORY[0x1E4F143B8];
  uint64_t v1158 = 0;
  v1157 = 0;
  v1156 = &v1157;
  id v9 = (const void **)a3[1];
  uint64_t v10 = (const void ***)(a3 + 2);
  if (v9 != a3 + 2)
  {
    do
    {
      sub_19E159B70((uint64_t **)&v1156, (uint64_t *)&v1157, v9 + 4, (uint64_t)(v9 + 4));
      uint64_t v13 = (const void **)v9[1];
      if (v13)
      {
        do
        {
          unint64_t v14 = (const void ***)v13;
          uint64_t v13 = (const void **)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          unint64_t v14 = (const void ***)v9[2];
          BOOL v96 = *v14 == v9;
          id v9 = (const void **)v14;
        }
        while (!v96);
      }
      id v9 = (const void **)v14;
    }
    while (v14 != v10);
  }
  uint64_t v1155 = 0;
  v1154 = 0;
  v1153 = &v1154;
  uint64_t v11 = (const void **)a3[4];
  if (v11 != a3 + 5)
  {
    do
    {
      sub_19E159B70((uint64_t **)&v1153, (uint64_t *)&v1154, v11 + 4, (uint64_t)(v11 + 4));
      unint64_t v15 = (const void **)v11[1];
      if (v15)
      {
        do
        {
          uint64_t v16 = (const void ***)v15;
          unint64_t v15 = (const void **)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          uint64_t v16 = (const void ***)v11[2];
          BOOL v96 = *v16 == v11;
          uint64_t v11 = (const void **)v16;
        }
        while (!v96);
      }
      uint64_t v11 = (const void **)v16;
    }
    while (v16 != a3 + 5);
  }
  v1151 = 0;
  v1150 = 0;
  uint64_t v1152 = 0;
  sub_19E28750C(&v1150, a3[15], a3[16], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[16] - a3[15]) >> 3));
  uint64_t v1149 = 0;
  v1148 = 0;
  v1147 = (uint64_t **)&v1148;
  int v12 = (uint64_t *)v1156;
  if (v1156 != &v1157)
  {
    do
    {
      if (*((char *)v12 + 55) < 0)
      {
        sub_19E13C2D0(__p, (void *)v12[4], v12[5]);
      }
      else
      {
        __p[0] = *((int64x2_t *)v12 + 2);
        __p[1].i64[0] = v12[6];
      }
      __int16 v17 = v1149;
      v1102[0] = __p;
      *((_WORD *)sub_19E28790C((uint64_t **)&v1147, (const void **)__p, (uint64_t)&unk_19E351150, (long long **)v1102) + 28) = v17 + 1;
      if (__p[1].i8[7] < 0)
      {
        operator delete((void *)__p[0].i64[0]);
        uint64_t v18 = (char *)v12[1];
        if (v18)
        {
          do
          {
LABEL_27:
            uint64_t v19 = (char **)v18;
            uint64_t v18 = *(char **)v18;
          }
          while (v18);
          goto LABEL_19;
        }
      }
      else
      {
        uint64_t v18 = (char *)v12[1];
        if (v18) {
          goto LABEL_27;
        }
      }
      do
      {
        uint64_t v19 = (char **)v12[2];
        BOOL v96 = *v19 == (char *)v12;
        int v12 = (uint64_t *)v19;
      }
      while (!v96);
LABEL_19:
      int v12 = (uint64_t *)v19;
    }
    while (v19 != &v1157);
  }
  uint64_t v20 = (char *)v1150;
  uint64_t v21 = v1151;
  if (v1150 == v1151)
  {
    uint64_t v25 = (char *)v1150;
  }
  else
  {
    do
    {
      if (v20[23] < 0)
      {
        uint64_t v23 = v20;
        sub_19E13C2D0(__p, *(void **)v20, *((void *)v20 + 1));
      }
      else
      {
        int64x2_t v22 = *(int64x2_t *)v20;
        uint64_t v23 = v20;
        __p[1].i64[0] = *((void *)v20 + 2);
        __p[0] = v22;
      }
      __int16 v24 = v1149;
      v1102[0] = __p;
      *((_WORD *)sub_19E28790C((uint64_t **)&v1147, (const void **)__p, (uint64_t)&unk_19E351150, (long long **)v1102) + 28) = v24 + 1;
      if (__p[1].i8[7] < 0) {
        operator delete((void *)__p[0].i64[0]);
      }
      uint64_t v20 = v23 + 24;
    }
    while (v23 + 24 != v21);
    uint64_t v25 = v1151;
    uint64_t v20 = (char *)v1150;
  }
  int v26 = *a6;
  int v1174 = 1001;
  int v1175 = v26;
  int v1176 = v1155 + v1158 - 1431655765 * ((unint64_t)(v25 - v20) >> 3);
  unsigned int v27 = *((unsigned __int8 *)a5 + 23);
  int v1079 = v1176;
  if ((v27 & 0x80) == 0)
  {
    if (v27 <= 0x1F)
    {
      long long v28 = v20;
      goto LABEL_47;
    }
LABEL_1619:
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Model name cannot be greater than 31 characters.");
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EF0A7C00;
    __cxa_throw(exception, (struct type_info *)&unk_1EF0A3F88, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (*((void *)a5 + 1) > 0x1FuLL) {
    goto LABEL_1619;
  }
  long long v28 = v20;
  a5 = *(const char **)a5;
LABEL_47:
  strcpy(v1178, a5);
  int v1177 = 88;
  long long __dst = 0;
  v1144 = 0;
  unint64_t v1146 = 0;
  v1142 = 0;
  v1141 = 0;
  unint64_t v1143 = 0;
  long long v29 = (uint64_t *)v1156;
  long long v30 = v28;
  if (v1156 == &v1157) {
    goto LABEL_83;
  }
  do
  {
    if (*((char *)v29 + 55) < 0)
    {
      sub_19E13C2D0(v1102, (void *)v29[4], v29[5]);
    }
    else
    {
      *(_OWORD *)v1102 = *((_OWORD *)v29 + 2);
      *(void *)&v1103[0] = v29[6];
    }
    bzero(__p, 0x190uLL);
    char v31 = BYTE7(v1103[0]);
    if ((SBYTE7(v1103[0]) & 0x80u) == 0) {
      long long v32 = v1102;
    }
    else {
      long long v32 = (void **)v1102[0];
    }
    strcpy(__p[0].i8, (const char *)v32);
    __p[2].i8[0] = -6;
    long long v33 = (char *)__dst;
    if ((unint64_t)__dst >= v1146)
    {
      long long v35 = (char *)v1144;
      unint64_t v36 = 0x8F5C28F5C28F5C29 * (((unsigned char *)__dst - (unsigned char *)v1144) >> 4);
      unint64_t v37 = v36 + 1;
      if (v36 + 1 > 0xA3D70A3D70A3D7) {
        sub_19E13D694();
      }
      if (0x1EB851EB851EB852 * ((uint64_t)(v1146 - (void)v1144) >> 4) > v37) {
        unint64_t v37 = 0x1EB851EB851EB852 * ((uint64_t)(v1146 - (void)v1144) >> 4);
      }
      if (0x8F5C28F5C28F5C29 * ((uint64_t)(v1146 - (void)v1144) >> 4) >= 0x51EB851EB851EBLL) {
        unint64_t v38 = 0xA3D70A3D70A3D7;
      }
      else {
        unint64_t v38 = v37;
      }
      if (v38)
      {
        if (v38 > 0xA3D70A3D70A3D7) {
          sub_19E13C418();
        }
        long long v39 = (char *)operator new(400 * v38);
      }
      else
      {
        long long v39 = 0;
      }
      uint64_t v40 = &v39[400 * v36];
      memcpy(v40, __p, 0x190uLL);
      uint64_t v41 = v40;
      if (v33 != v35)
      {
        do
        {
          v33 -= 400;
          v41 -= 400;
          memcpy(v41, v33, 0x190uLL);
        }
        while (v33 != v35);
        long long v33 = v35;
      }
      v1144 = v41;
      long long __dst = v40 + 400;
      unint64_t v1146 = (unint64_t)&v39[400 * v38];
      if (v33)
      {
        operator delete(v33);
        char v31 = BYTE7(v1103[0]);
      }
      long long __dst = v40 + 400;
      if ((v31 & 0x80) == 0)
      {
LABEL_58:
        long long v34 = (char *)v29[1];
        if (!v34) {
          goto LABEL_79;
        }
        goto LABEL_77;
      }
    }
    else
    {
      memcpy(__dst, __p, 0x190uLL);
      long long __dst = v33 + 400;
      if ((v31 & 0x80) == 0) {
        goto LABEL_58;
      }
    }
    operator delete(v1102[0]);
    long long v34 = (char *)v29[1];
    if (!v34)
    {
      do
      {
LABEL_79:
        uint64_t v42 = (char **)v29[2];
        BOOL v96 = *v42 == (char *)v29;
        long long v29 = (uint64_t *)v42;
      }
      while (!v96);
      goto LABEL_49;
    }
    do
    {
LABEL_77:
      uint64_t v42 = (char **)v34;
      long long v34 = *(char **)v34;
    }
    while (v34);
LABEL_49:
    long long v29 = (uint64_t *)v42;
  }
  while (v42 != &v1157);
  long long v30 = (char *)v1150;
  uint64_t v25 = v1151;
LABEL_83:
  *(_OWORD *)v1139 = 0u;
  *(_OWORD *)v1138 = 0u;
  int v1140 = 1065353216;
  if (v30 != v25)
  {
    v1054 = v25;
    uint64_t v43 = 0;
    v1076 = 0;
    unint64_t v1077 = 0;
    int v1074 = 400 * v1079 + 88;
    v1059 = (void *)(a4 + 8);
    uint64_t v44 = (uint64_t)a3;
    float64x2_t v1064 = (float64x2_t)vdupq_n_s64(0x3F50624DD2F1A9FCuLL);
    while (2)
    {
      v1058 = v30;
      if (v30[23] < 0)
      {
        sub_19E13C2D0(v1136, *(void **)v30, *((void *)v30 + 1));
      }
      else
      {
        long long v45 = *(_OWORD *)v30;
        uint64_t v1137 = *((void *)v30 + 2);
        *(_OWORD *)v1136 = v45;
      }
      bzero(__src, 0x190uLL);
      if (v1137 >= 0) {
        uint64_t v46 = v1136;
      }
      else {
        uint64_t v46 = (void **)v1136[0];
      }
      strcpy((char *)__src, (const char *)v46);
      long long v1167 = 0u;
      long long v1166 = 0u;
      long long v1165 = 0u;
      long long v1164 = 0u;
      long long v1163 = 0u;
      long long v1162 = 0u;
      long long v1161 = 0u;
      memset(__p, 0, sizeof(__p));
      sub_19E30AD68(v44, (uint64_t)v1136);
      HIBYTE(__src[19]) = 9;
      v47.i64[1] = __p[0].i64[1];
      int32x2_t v48 = vmovn_s64(__p[1]);
      *(int32x2_t *)v47.i8 = vmovn_s64(__p[0]);
      v47.i16[1] = v47.i16[2];
      v47.i16[2] = v48.i16[0];
      v47.i16[3] = v48.i16[2];
      *(_DWORD *)&__src[16] = vmovn_s16(v47).u32[0];
      LOBYTE(__src[18]) = __p[2].i8[0];
      HIBYTE(__src[18]) = __p[2].i8[8];
      LOBYTE(__src[19]) = __p[3].i8[0];
      *(int8x8_t *)&__src[20] = vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32(*(int32x4_t *)((char *)&__p[3] + 8), *(int32x4_t *)((char *)&__p[4] + 8)), (int16x8_t)vuzp1q_s32(*(int32x4_t *)((char *)&__p[5] + 8), *(int32x4_t *)((char *)&__p[6] + 8))));
      *(_DWORD *)&__src[24] = __p[7].i32[2];
      *(int64x2_t *)&__src[58] = __p[12];
      *(int64x2_t *)&__src[66] = __p[13];
      *(int64x2_t *)&__src[74] = __p[14];
      *(int64x2_t *)&__src[82] = __p[15];
      *(int64x2_t *)&__src[26] = __p[8];
      *(int64x2_t *)&__src[34] = __p[9];
      *(int64x2_t *)&__src[42] = __p[10];
      *(int64x2_t *)&__src[50] = __p[11];
      *(int64x2_t *)&__src[90] = __p[16];
      *(int64x2_t *)&__src[98] = __p[17];
      *(int64x2_t *)&__src[106] = __p[18];
      *(int64x2_t *)&__src[114] = __p[19];
      *(int64x2_t *)&__src[122] = __p[20];
      *(int64x2_t *)&__src[130] = __p[21];
      *(int64x2_t *)&__src[138] = __p[22];
      *(int64x2_t *)&__src[146] = __p[23];
      *(_OWORD *)&__src[170] = v1162;
      *(_OWORD *)&__src[178] = v1163;
      *(int64x2_t *)&__src[154] = __p[24];
      *(_OWORD *)&__src[162] = v1161;
      sub_19E30A5CC(v44, (uint64_t)v1136, (char **)v1133);
      int v49 = (void **)v1133[0];
      uint64_t v50 = (void **)v1133[1];
      if (v1133[0] == v1133[1])
      {
        if (v1133[0]) {
          goto LABEL_94;
        }
LABEL_169:
        uint64_t v52 = *v1059;
        if (!*v1059)
        {
LABEL_213:
          char v1069 = 0;
          uint64_t v105 = LOBYTE(__src[18]);
          char v1061 = 1;
          int v106 = 0;
          int v107 = 0;
          goto LABEL_214;
        }
      }
      else
      {
        do
        {
          if (*((char *)v49 + 23) < 0)
          {
            sub_19E13C2D0(v1102, *v49, (unint64_t)v49[1]);
          }
          else
          {
            long long v53 = *(_OWORD *)v49;
            *(void *)&v1103[0] = v49[2];
            *(_OWORD *)v1102 = v53;
          }
          int v54 = *((_DWORD *)v49 + 6);
          DWORD2(v1103[0]) = v54;
          if (v54)
          {
            BOOL v55 = v1148;
            long long v56 = &v1148;
            int v57 = &v1148;
            if (v1148)
            {
              if ((SBYTE7(v1103[0]) & 0x80u) == 0) {
                long long v58 = (void *)BYTE7(v1103[0]);
              }
              else {
                long long v58 = v1102[1];
              }
              if ((SBYTE7(v1103[0]) & 0x80u) == 0) {
                uint64_t v59 = v1102;
              }
              else {
                uint64_t v59 = (void **)v1102[0];
              }
              while (1)
              {
                while (1)
                {
                  long long v56 = (char **)v55;
                  uint64_t v62 = (char *)*((void *)v55 + 4);
                  uint64_t v60 = v55 + 32;
                  uint64_t v61 = v62;
                  int v63 = v60[23];
                  if (v63 >= 0) {
                    size_t v64 = v60[23];
                  }
                  else {
                    size_t v64 = *((void *)v60 + 1);
                  }
                  if (v63 >= 0) {
                    float v65 = v60;
                  }
                  else {
                    float v65 = v61;
                  }
                  if (v64 >= (unint64_t)v58) {
                    size_t v66 = (size_t)v58;
                  }
                  else {
                    size_t v66 = v64;
                  }
                  int v67 = memcmp(v59, v65, v66);
                  BOOL v68 = (unint64_t)v58 < v64;
                  if (v67) {
                    BOOL v68 = v67 < 0;
                  }
                  if (!v68) {
                    break;
                  }
                  BOOL v55 = *v56;
                  int v57 = v56;
                  if (!*v56) {
                    goto LABEL_127;
                  }
                }
                int v69 = memcmp(v65, v59, v66);
                BOOL v70 = v64 < (unint64_t)v58;
                if (v69) {
                  BOOL v70 = v69 < 0;
                }
                if (!v70) {
                  break;
                }
                BOOL v55 = v56[1];
                if (!v55)
                {
                  int v57 = v56 + 1;
                  goto LABEL_127;
                }
              }
              __int16 v84 = *((_WORD *)v56 + 28);
            }
            else
            {
LABEL_127:
              uint64_t v71 = (char *)operator new(0x40uLL);
              uint64_t v72 = v71 + 32;
              if (SBYTE7(v1103[0]) < 0)
              {
                sub_19E13C2D0(v72, v1102[0], (unint64_t)v1102[1]);
              }
              else
              {
                *(_OWORD *)uint64_t v72 = *(_OWORD *)v1102;
                *((void *)v71 + 6) = *(void *)&v1103[0];
              }
              *((_WORD *)v71 + 28) = 0;
              *(void *)uint64_t v71 = 0;
              *((void *)v71 + 1) = 0;
              *((void *)v71 + 2) = v56;
              uint64_t *v57 = v71;
              if (*v1147)
              {
                v1147 = (uint64_t **)*v1147;
                uint64_t v71 = *v57;
              }
              float v73 = v1148;
              BOOL v96 = v71 == v1148;
              v71[24] = v71 == v1148;
              if (!v96)
              {
                do
                {
                  uint64_t v74 = *((void *)v71 + 2);
                  if (*(unsigned char *)(v74 + 24)) {
                    break;
                  }
                  int v75 = *(char **)(v74 + 16);
                  uint64_t v76 = *(void *)v75;
                  if (*(void *)v75 == v74)
                  {
                    uint64_t v79 = *((void *)v75 + 1);
                    if (!v79 || (v80 = *(unsigned __int8 *)(v79 + 24), unint64_t v77 = (unsigned char *)(v79 + 24), v80))
                    {
                      if (*(char **)v74 == v71)
                      {
                        *(unsigned char *)(v74 + 24) = 1;
                        v75[24] = 0;
                        uint64_t v83 = *(void *)(v74 + 8);
                        *(void *)int v75 = v83;
                        if (v83) {
                          goto LABEL_147;
                        }
                      }
                      else
                      {
                        uint64_t v81 = *(uint64_t **)(v74 + 8);
                        uint64_t v82 = *v81;
                        *(void *)(v74 + 8) = *v81;
                        if (v82)
                        {
                          *(void *)(v82 + 16) = v74;
                          int v75 = *(char **)(v74 + 16);
                        }
                        v81[2] = (uint64_t)v75;
                        *(void *)(*(void *)(v74 + 16) + 8 * (**(void **)(v74 + 16) != v74)) = v81;
                        uint64_t *v81 = v74;
                        *(void *)(v74 + 16) = v81;
                        int v75 = (char *)v81[2];
                        uint64_t v74 = *(void *)v75;
                        *((unsigned char *)v81 + 24) = 1;
                        v75[24] = 0;
                        uint64_t v83 = *(void *)(v74 + 8);
                        *(void *)int v75 = v83;
                        if (v83) {
LABEL_147:
                        }
                          *(void *)(v83 + 16) = v75;
                      }
                      *(void *)(v74 + 16) = *((void *)v75 + 2);
                      *(void *)(*((void *)v75 + 2) + 8 * (**((void **)v75 + 2) != (void)v75)) = v74;
                      *(void *)(v74 + 8) = v75;
LABEL_158:
                      *((void *)v75 + 2) = v74;
                      break;
                    }
                  }
                  else if (!v76 || (v78 = *(unsigned __int8 *)(v76 + 24), unint64_t v77 = (unsigned char *)(v76 + 24), v78))
                  {
                    if (*(char **)v74 == v71)
                    {
                      uint64_t v85 = *((void *)v71 + 1);
                      *(void *)uint64_t v74 = v85;
                      if (v85)
                      {
                        *(void *)(v85 + 16) = v74;
                        int v75 = *(char **)(v74 + 16);
                      }
                      *((void *)v71 + 2) = v75;
                      *(void *)(*(void *)(v74 + 16) + 8 * (**(void **)(v74 + 16) != v74)) = v71;
                      *((void *)v71 + 1) = v74;
                      *(void *)(v74 + 16) = v71;
                      int v75 = (char *)*((void *)v71 + 2);
                    }
                    else
                    {
                      uint64_t v71 = (char *)*((void *)v71 + 2);
                    }
                    v71[24] = 1;
                    v75[24] = 0;
                    uint64_t v74 = *((void *)v75 + 1);
                    uint64_t v86 = *(char **)v74;
                    *((void *)v75 + 1) = *(void *)v74;
                    if (v86) {
                      *((void *)v86 + 2) = v75;
                    }
                    *(void *)(v74 + 16) = *((void *)v75 + 2);
                    *(void *)(*((void *)v75 + 2) + 8 * (**((void **)v75 + 2) != (void)v75)) = v74;
                    *(void *)uint64_t v74 = v75;
                    goto LABEL_158;
                  }
                  *(unsigned char *)(v74 + 24) = 1;
                  uint64_t v71 = v75;
                  v75[24] = v75 == v73;
                  *unint64_t v77 = 1;
                }
                while (v75 != v73);
              }
              __int16 v84 = 0;
              ++v1149;
              int v54 = DWORD2(v1103[0]);
            }
            __src[v54 + 185] = v84;
          }
          if (SBYTE7(v1103[0]) < 0) {
            operator delete(v1102[0]);
          }
          v49 += 4;
        }
        while (v49 != v50);
        int v49 = (void **)v1133[0];
        if (!v1133[0]) {
          goto LABEL_169;
        }
LABEL_94:
        int v51 = (void **)v1133[1];
        if (v1133[1] == v49)
        {
          v1133[1] = v49;
          operator delete(v49);
          uint64_t v52 = *v1059;
          if (!*v1059) {
            goto LABEL_213;
          }
        }
        else
        {
          do
          {
            if (*((char *)v51 - 9) < 0) {
              operator delete(*(v51 - 4));
            }
            v51 -= 4;
          }
          while (v51 != v49);
          v1133[1] = v49;
          operator delete(v1133[0]);
          uint64_t v52 = *v1059;
          if (!*v1059) {
            goto LABEL_213;
          }
        }
      }
      if (v1137 >= 0) {
        unint64_t v87 = (void *)HIBYTE(v1137);
      }
      else {
        unint64_t v87 = v1136[1];
      }
      if (v1137 >= 0) {
        int64_t v88 = v1136;
      }
      else {
        int64_t v88 = (void **)v1136[0];
      }
      uint64_t v89 = v1059;
      do
      {
        int v90 = *(char *)(v52 + 55);
        if (v90 >= 0) {
          size_t v91 = *(unsigned __int8 *)(v52 + 55);
        }
        else {
          size_t v91 = *(void *)(v52 + 40);
        }
        if (v90 >= 0) {
          unint64_t v92 = (const void *)(v52 + 32);
        }
        else {
          unint64_t v92 = *(const void **)(v52 + 32);
        }
        if ((unint64_t)v87 >= v91) {
          size_t v93 = v91;
        }
        else {
          size_t v93 = (size_t)v87;
        }
        int v94 = memcmp(v92, v88, v93);
        BOOL v95 = v91 < (unint64_t)v87;
        if (v94) {
          BOOL v95 = v94 < 0;
        }
        BOOL v96 = !v95;
        if (v95) {
          int v97 = (uint64_t *)(v52 + 8);
        }
        else {
          int v97 = (uint64_t *)v52;
        }
        if (v96) {
          uint64_t v89 = (void *)v52;
        }
        uint64_t v52 = *v97;
      }
      while (*v97);
      if (v89 == v1059) {
        goto LABEL_213;
      }
      int v98 = *((char *)v89 + 55);
      if (v98 >= 0) {
        size_t v99 = *((unsigned __int8 *)v89 + 55);
      }
      else {
        size_t v99 = v89[5];
      }
      if (v98 >= 0) {
        uint64_t v100 = v89 + 4;
      }
      else {
        uint64_t v100 = (const void *)v89[4];
      }
      if (v99 >= (unint64_t)v87) {
        size_t v101 = (size_t)v87;
      }
      else {
        size_t v101 = v99;
      }
      int v102 = memcmp(v88, v100, v101);
      BOOL v103 = (unint64_t)v87 >= v99;
      if (v102) {
        BOOL v103 = v102 >= 0;
      }
      if (!v103 || __p[2].i64[0] != 0) {
        goto LABEL_213;
      }
      char v1061 = 0;
      int v107 = *((_DWORD *)v89 + 14);
      int v106 = *((_DWORD *)v89 + 15);
      uint64_t v105 = 2;
      LOBYTE(__src[18]) = 2;
      *(_DWORD *)&__src[182] = v107;
      *(_DWORD *)&__src[184] = v106;
      char v1069 = 1;
LABEL_214:
      if (v105 == 2) {
        int v108 = 1;
      }
      else {
        int v108 = 4;
      }
      *(_DWORD *)&__src[194] = v1074;
      uint64_t v109 = __p[0].i64[0];
      v1080 = v43;
      switch(__p[0].i64[0])
      {
        case 0:
          if ((__p[7].i16[4] & 0x100) != 0) {
            *(_DWORD *)&__src[24] |= 0x100u;
          }
          __int32 v180 = (__p[16].i32[0] * __p[8].i32[0]) << (2 * (v105 != 2));
          if ((__p[7].i16[4] & 0x100) != 0) {
            __int32 v181 = 0;
          }
          else {
            __int32 v181 = 4 * __p[16].i32[0];
          }
          int v182 = (float32x4_t *)v1164;
          int v183 = v1076;
          if ((unint64_t)v1076 >= v1077) {
            goto LABEL_302;
          }
          goto LABEL_300;
        case 1:
          int v249 = v105;
          int v250 = (float32x4_t *)v1164;
          signed int v251 = v1170;
          __int32 v252 = __p[8].i32[2];
          if (__p[8].i32[2] <= 1u) {
            __int32 v252 = __p[8].i32[0];
          }
          unint64_t v253 = v252;
          if ((__p[7].i8[8] & 0x40) == 0)
          {
            *(_DWORD *)&__src[24] |= 0x40u;
            BOOL v254 = (float32x4_t *)*((void *)&v1164 + 1);
            size_t v255 = (float32x4_t *)v1165;
            v1102[0] = 0;
            v1102[1] = 0;
            *(void *)&v1103[0] = 0;
            uint64_t v256 = 4 * v252;
            if (v252)
            {
              if (v252 < 0) {
                sub_19E13D694();
              }
              int v257 = (char *)operator new(4 * v252);
              v1102[0] = v257;
              *(void *)&v1103[0] = &v257[4 * v253];
              bzero(v257, 4 * v253);
              v1102[1] = &v257[v256];
            }
            int v258 = v1142;
            if ((unint64_t)v1142 >= v1143)
            {
              v1142 = sub_19E287F28((char **)&v1141, (uint64_t)v1102);
              if (v1102[0])
              {
                v1102[1] = v1102[0];
                operator delete(v1102[0]);
              }
            }
            else
            {
              *(void *)v1142 = 0;
              *((void *)v258 + 1) = 0;
              *((void *)v258 + 2) = 0;
              *(_OWORD *)int v258 = *(_OWORD *)v1102;
              *((void *)v258 + 2) = *(void *)&v1103[0];
              v1142 = v258 + 24;
            }
            v1102[0] = 0;
            v1102[1] = 0;
            *(void *)&v1103[0] = 0;
            if (v253)
            {
              v848 = (char *)operator new(4 * v253);
              v1102[0] = v848;
              *(void *)&v1103[0] = &v848[4 * v253];
              bzero(v848, 4 * v253);
              v1102[1] = &v848[v256];
            }
            v849 = v1142;
            if ((unint64_t)v1142 >= v1143)
            {
              v850 = sub_19E287F28((char **)&v1141, (uint64_t)v1102);
              v1142 = v850;
              if (v1102[0])
              {
                v1102[1] = v1102[0];
                operator delete(v1102[0]);
                v850 = v1142;
              }
            }
            else
            {
              *(void *)v1142 = 0;
              *((void *)v849 + 1) = 0;
              *((void *)v849 + 2) = 0;
              *(_OWORD *)v849 = *(_OWORD *)v1102;
              *((void *)v849 + 2) = *(void *)&v1103[0];
              v850 = v849 + 24;
              v1142 = v849 + 24;
            }
            sub_19E31A384(v253, v250, v251, v254, v255, v1102);
            v851 = (float32x4_t **)(v850 - 24);
            v852 = (void *)*((void *)v850 - 3);
            if (v852)
            {
              *((void *)v850 - 2) = v852;
              operator delete(v852);
              *v851 = 0;
              *((void *)v850 - 2) = 0;
              *((void *)v850 - 1) = 0;
            }
            v853 = (float32x4_t **)(v850 - 48);
            *(_OWORD *)(v850 - 24) = *(_OWORD *)v1102;
            *((void *)v850 - 1) = *(void *)&v1103[0];
            v1102[0] = 0;
            v1102[1] = 0;
            *(void *)&v1103[0] = 0;
            v854 = (void *)*((void *)v850 - 6);
            if (v854)
            {
              *((void *)v850 - 5) = v854;
              operator delete(v854);
              *v853 = 0;
              *((void *)v850 - 5) = 0;
              *((void *)v850 - 4) = 0;
            }
            *((_OWORD *)v850 - 3) = *(_OWORD *)((char *)v1103 + 8);
            *((void *)v850 - 4) = *((void *)&v1103[1] + 1);
            memset((char *)v1103 + 8, 0, 24);
            if (v1102[0])
            {
              v1102[1] = v1102[0];
              operator delete(v1102[0]);
            }
            int v250 = *v851;
            signed int v251 = *v853;
          }
          int v855 = v253 << (2 * (v249 != 2));
          if ((unint64_t)v1076 < v1077)
          {
            *v1076 = v250;
            *((_DWORD *)v1076 + 2) = v855;
            *((unsigned char *)v1076 + 12) = v1069;
            v856 = v1076 + 3;
            *((_DWORD *)v1076 + 4) = v107;
            *((_DWORD *)v1076 + 5) = v106;
            goto LABEL_1165;
          }
          unint64_t v857 = 0xAAAAAAAAAAAAAAABLL * (((char *)v1076 - v43) >> 3) + 1;
          if (v857 > 0xAAAAAAAAAAAAAAALL) {
            sub_19E13D694();
          }
          if (0x5555555555555556 * ((uint64_t)(v1077 - (void)v43) >> 3) > v857) {
            unint64_t v857 = 0x5555555555555556 * ((uint64_t)(v1077 - (void)v43) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1077 - (void)v43) >> 3) >= 0x555555555555555) {
            unint64_t v858 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v858 = v857;
          }
          if (v858 > 0xAAAAAAAAAAAAAAALL) {
            sub_19E13C418();
          }
          v859 = (char *)operator new(24 * v858);
          v860 = (float32x4_t **)&v859[8 * (((char *)v1076 - v43) >> 3)];
          *v860 = v250;
          v856 = v860 + 3;
          v861 = &v859[(char *)v1076 - v43];
          *((_DWORD *)v861 + 2) = v855;
          v861[12] = v1069;
          *((_DWORD *)v861 + 4) = v107;
          *((_DWORD *)v861 + 5) = v106;
          if (v1076 == (float32x4_t **)v43)
          {
            v864 = (float32x4_t **)&v859[8 * (((char *)v1076 - v43) >> 3)];
            unint64_t v1077 = (unint64_t)&v859[24 * v858];
            if (v43) {
LABEL_1163:
            }
              operator delete(v43);
          }
          else
          {
            v862 = (char *)v1076;
            do
            {
              long long v863 = *(_OWORD *)(v862 - 24);
              v864 = v860 - 3;
              *(v860 - 1) = (float32x4_t *)*((void *)v862 - 1);
              *(_OWORD *)(v860 - 3) = v863;
              v862 -= 24;
              v860 -= 3;
            }
            while (v862 != v43);
            unint64_t v1077 = (unint64_t)&v859[24 * v858];
            if (v43) {
              goto LABEL_1163;
            }
          }
          uint64_t v43 = (char *)v864;
LABEL_1165:
          if (v855 <= 0) {
            int v865 = -(-v855 & 3);
          }
          else {
            int v865 = v855 & 3;
          }
          if (v865) {
            int v855 = v855 - v865 + 8;
          }
          int v866 = *(_DWORD *)&__src[196] | 1;
          *(_DWORD *)&__src[196] |= 1u;
          __int32 v867 = __p[8].i32[2];
          if (__p[8].i32[2] <= 1) {
            __int32 v867 = __p[8].i32[0];
          }
          int v868 = 4 * v867;
          if ((unint64_t)v856 < v1077)
          {
            *v856 = v251;
            *((_DWORD *)v856 + 2) = v868;
            *((unsigned char *)v856 + 12) = 0;
            v1076 = v856 + 3;
            v856[2] = 0;
            goto LABEL_1186;
          }
          unint64_t v869 = 0xAAAAAAAAAAAAAAABLL * (((char *)v856 - v43) >> 3) + 1;
          if (v869 > 0xAAAAAAAAAAAAAAALL) {
            sub_19E13D694();
          }
          if (0x5555555555555556 * ((uint64_t)(v1077 - (void)v43) >> 3) > v869) {
            unint64_t v869 = 0x5555555555555556 * ((uint64_t)(v1077 - (void)v43) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1077 - (void)v43) >> 3) >= 0x555555555555555) {
            unint64_t v870 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v870 = v869;
          }
          if (v870 > 0xAAAAAAAAAAAAAAALL) {
            sub_19E13C418();
          }
          v871 = (char *)operator new(24 * v870);
          v872 = (float32x4_t **)&v871[8 * (((char *)v856 - v43) >> 3)];
          *v872 = v251;
          v1076 = v872 + 3;
          v873 = &v871[(char *)v856 - v43];
          *((_DWORD *)v873 + 2) = v868;
          v873[12] = 0;
          *((void *)v873 + 2) = 0;
          if (v856 == (float32x4_t **)v43)
          {
            v875 = (float32x4_t **)&v871[8 * (((char *)v856 - v43) >> 3)];
            unint64_t v1077 = (unint64_t)&v871[24 * v870];
            if (!v43) {
              goto LABEL_1185;
            }
          }
          else
          {
            do
            {
              long long v874 = *(_OWORD *)(v856 - 3);
              v875 = v872 - 3;
              *(v872 - 1) = *(v856 - 1);
              *(_OWORD *)(v872 - 3) = v874;
              v856 -= 3;
              v872 -= 3;
            }
            while (v856 != (float32x4_t **)v43);
            unint64_t v1077 = (unint64_t)&v871[24 * v870];
            if (!v43) {
              goto LABEL_1185;
            }
          }
          operator delete(v43);
          int v866 = *(_DWORD *)&__src[196];
LABEL_1185:
          uint64_t v43 = (char *)v875;
LABEL_1186:
          v1074 += v855 + v868;
          *(_DWORD *)&__src[196] = v866 | 0x10000;
          BOOL v174 = (char *)__dst;
          unint64_t v175 = v1146;
          if ((unint64_t)__dst >= v1146) {
            goto LABEL_1187;
          }
          goto LABEL_1301;
        case 4:
        case 0x17:
          if (__p[22].i32[0] == 1)
          {
            *(_DWORD *)&__src[138] = 1;
            *(_DWORD *)&__src[196] |= 1u;
            long long v110 = __dst;
            uint64_t v111 = v1144;
            v1102[0] = v1136;
            BOOL v112 = sub_19E287AAC((uint64_t)v1138, (uint64_t)v1136, (uint64_t)&unk_19E351150, (long long **)v1102);
            goto LABEL_288;
          }
          __int32 v176 = __p[8].i32[0];
          if (__p[8].i32[0] <= 1u) {
            __int32 v176 = 1;
          }
          __int32 v177 = (__p[16].i32[0] / v176 * __p[20].i32[0]) << (2 * (v105 != 2));
          uint64_t v178 = v1164;
          if ((unint64_t)v1076 < v1077)
          {
            *v1076 = (float32x4_t *)v1164;
            *((_DWORD *)v1076 + 2) = v177;
            *((unsigned char *)v1076 + 12) = v1069;
            int64x2_t v179 = v1076 + 3;
            *((_DWORD *)v1076 + 4) = v107;
            *((_DWORD *)v1076 + 5) = v106;
            goto LABEL_482;
          }
          unint64_t v337 = 0xAAAAAAAAAAAAAAABLL * (((char *)v1076 - v43) >> 3) + 1;
          if (v337 > 0xAAAAAAAAAAAAAAALL) {
            sub_19E13D694();
          }
          if (0x5555555555555556 * ((uint64_t)(v1077 - (void)v43) >> 3) > v337) {
            unint64_t v337 = 0x5555555555555556 * ((uint64_t)(v1077 - (void)v43) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1077 - (void)v43) >> 3) >= 0x555555555555555) {
            unint64_t v338 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v338 = v337;
          }
          if (v338 > 0xAAAAAAAAAAAAAAALL) {
            sub_19E13C418();
          }
          int v339 = (char *)operator new(24 * v338);
          uint64_t v340 = &v339[8 * (((char *)v1076 - v43) >> 3)];
          *(void *)uint64_t v340 = v178;
          int64x2_t v179 = (float32x4_t **)(v340 + 24);
          size_t v341 = &v339[(char *)v1076 - v43];
          *((_DWORD *)v341 + 2) = v177;
          v341[12] = v1069;
          *((_DWORD *)v341 + 4) = v107;
          *((_DWORD *)v341 + 5) = v106;
          if (v1076 == (float32x4_t **)v43)
          {
            int v344 = &v339[8 * (((char *)v1076 - v43) >> 3)];
            unint64_t v1077 = (unint64_t)&v339[24 * v338];
            if (v43) {
LABEL_480:
            }
              operator delete(v43);
          }
          else
          {
            size_t v342 = (char *)v1076;
            do
            {
              long long v343 = *(_OWORD *)(v342 - 24);
              int v344 = v340 - 24;
              *((void *)v340 - 1) = *((void *)v342 - 1);
              *(_OWORD *)(v340 - 24) = v343;
              v342 -= 24;
              v340 -= 24;
            }
            while (v342 != v43);
            unint64_t v1077 = (unint64_t)&v339[24 * v338];
            if (v43) {
              goto LABEL_480;
            }
          }
          uint64_t v43 = v344;
LABEL_482:
          *(_DWORD *)&__src[196] |= 1u;
          if (v177 <= 0) {
            int v345 = -(-v177 & 3);
          }
          else {
            int v345 = v177 & 3;
          }
          if (v345) {
            int v346 = v177 - v345 + 8;
          }
          else {
            int v346 = v177;
          }
          v1074 += v346;
          v1076 = v179;
          BOOL v174 = (char *)__dst;
          unint64_t v175 = v1146;
          if ((unint64_t)__dst < v1146) {
            goto LABEL_1301;
          }
          goto LABEL_1187;
        case 5:
        case 6:
          __int32 v113 = __p[16].i32[0];
          __int32 v114 = __p[8].i32[0];
          if (__p[20].i32[0] <= 0) {
            __int32 v115 = __p[16].i32[0];
          }
          else {
            __int32 v115 = __p[20].i32[0];
          }
          __int32 v1052 = v115 * __p[16].i32[0];
          char v1053 = 2 * (v105 != 2);
          int v116 = 4 * v115;
          int v1057 = v115;
          int v1067 = 16 * v115;
          uint64_t v1062 = v1167;
          if ((__p[7].i8[8] & 0x20) == 0)
          {
            unint64_t v117 = (int *)operator new(4uLL);
            uint64_t v118 = v117;
            *unint64_t v117 = 0;
            uint64_t v119 = v117 + 1;
            if (v109 == 6)
            {
              float v120 = (int *)operator new(8uLL);
              *(void *)float v120 = 0x200000000;
              uint64_t v119 = v120 + 2;
              operator delete(v118);
              int v121 = v120;
            }
            else
            {
              int v121 = v117;
            }
            int v367 = (4 * v1052) << v1053;
            int v1083 = (v116 * v114) << v1053;
            v1051 = v121;
            while (1)
            {
              size_t v370 = &__p[0].i64[*v121];
              uint64_t v371 = v370[56];
              if ((unint64_t)v1076 < v1077)
              {
                *v1076 = (float32x4_t *)v371;
                *((_DWORD *)v1076 + 2) = v1083;
                *((unsigned char *)v1076 + 12) = v1069;
                int v372 = (uint64_t *)(v1076 + 3);
                *((_DWORD *)v1076 + 4) = v107;
                *((_DWORD *)v1076 + 5) = v106;
                goto LABEL_526;
              }
              unint64_t v373 = 0xAAAAAAAAAAAAAAABLL * (((char *)v1076 - v43) >> 3) + 1;
              if (v373 > 0xAAAAAAAAAAAAAAALL) {
                sub_19E13D694();
              }
              uint64_t v374 = v43;
              if (0x5555555555555556 * ((uint64_t)(v1077 - (void)v43) >> 3) > v373) {
                unint64_t v373 = 0x5555555555555556 * ((uint64_t)(v1077 - (void)v43) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1077 - (void)v43) >> 3) >= 0x555555555555555) {
                unint64_t v375 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v375 = v373;
              }
              if (v375 > 0xAAAAAAAAAAAAAAALL) {
                sub_19E13C418();
              }
              size_t v376 = (char *)operator new(24 * v375);
              v377 = v1076;
              float32x4_t v378 = &v376[8 * (((char *)v1076 - v43) >> 3)];
              *(void *)float32x4_t v378 = v371;
              int v372 = (uint64_t *)(v378 + 24);
              uint64_t v379 = &v376[(char *)v1076 - v43];
              *((_DWORD *)v379 + 2) = v1083;
              v379[12] = v1069;
              *((_DWORD *)v379 + 4) = v107;
              *((_DWORD *)v379 + 5) = v106;
              if (v1076 == (float32x4_t **)v43)
              {
                uint64_t v43 = &v376[8 * (((char *)v1076 - v43) >> 3)];
                unint64_t v1077 = (unint64_t)&v376[24 * v375];
                if (v374) {
                  goto LABEL_525;
                }
              }
              else
              {
                do
                {
                  long long v380 = *(_OWORD *)(v377 - 3);
                  uint64_t v43 = v378 - 24;
                  *((void *)v378 - 1) = *(v377 - 1);
                  *(_OWORD *)(v378 - 24) = v380;
                  v377 -= 3;
                  v378 -= 24;
                }
                while (v377 != (float32x4_t **)v374);
                unint64_t v1077 = (unint64_t)&v376[24 * v375];
                if (v374) {
LABEL_525:
                }
                  operator delete(v374);
              }
LABEL_526:
              uint64_t v381 = v370[72];
              if ((unint64_t)v372 < v1077)
              {
                *int v372 = v381;
                *((_DWORD *)v372 + 2) = v1067;
                *((unsigned char *)v372 + 12) = 0;
                float32x4_t v382 = v372 + 3;
                v372[2] = 0;
                goto LABEL_539;
              }
              float32x4_t v383 = v43;
              uint64_t v384 = (char *)v372 - v43;
              unint64_t v385 = 0xAAAAAAAAAAAAAAABLL * (v384 >> 3) + 1;
              if (v385 > 0xAAAAAAAAAAAAAAALL) {
                sub_19E13D694();
              }
              float32x4_t v386 = (uint64_t *)v383;
              unint64_t v387 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1077 - (void)v383) >> 3);
              if (2 * v387 > v385) {
                unint64_t v385 = 2 * v387;
              }
              if (v387 >= 0x555555555555555) {
                unint64_t v388 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v388 = v385;
              }
              if (v388 > 0xAAAAAAAAAAAAAAALL) {
                sub_19E13C418();
              }
              uint64_t v389 = (char *)operator new(24 * v388);
              v390 = &v389[8 * (v384 >> 3)];
              *(void *)v390 = v381;
              float32x4_t v382 = (uint64_t *)(v390 + 24);
              uint64_t v391 = &v389[v384];
              *((_DWORD *)v391 + 2) = v1067;
              v391[12] = 0;
              *((void *)v391 + 2) = 0;
              if (v372 == v386)
              {
                uint64_t v43 = &v389[8 * (v384 >> 3)];
                unint64_t v1077 = (unint64_t)&v389[24 * v388];
                if (v386) {
                  goto LABEL_538;
                }
              }
              else
              {
                do
                {
                  long long v392 = *(_OWORD *)(v372 - 3);
                  uint64_t v43 = v390 - 24;
                  *((void *)v390 - 1) = *(v372 - 1);
                  *(_OWORD *)(v390 - 24) = v392;
                  v372 -= 3;
                  v390 -= 24;
                }
                while (v372 != v386);
                unint64_t v1077 = (unint64_t)&v389[24 * v388];
                if (v386) {
LABEL_538:
                }
                  operator delete(v386);
              }
LABEL_539:
              if (v1062) {
                float v393 = *(float *)&v1163;
              }
              else {
                float v393 = -1.0;
              }
              if (v1062) {
                float v394 = *((float *)&v1163 + 1);
              }
              else {
                float v394 = 1.0;
              }
              uint64_t v395 = v370[57];
              if ((unint64_t)v382 < v1077)
              {
                *float32x4_t v382 = v395;
                *((_DWORD *)v382 + 2) = v367;
                *((unsigned char *)v382 + 12) = v1069;
                v1076 = (float32x4_t **)(v382 + 3);
                *((float *)v382 + 4) = v393;
                *((float *)v382 + 5) = v394;
                goto LABEL_558;
              }
              int64_t v396 = (char *)v382 - v43;
              uint64_t v397 = v43;
              unint64_t v398 = 0xAAAAAAAAAAAAAAABLL * (((char *)v382 - v43) >> 3);
              unint64_t v399 = v398 + 1;
              if (v398 + 1 > 0xAAAAAAAAAAAAAAALL) {
                sub_19E13D694();
              }
              int v400 = (uint64_t *)v397;
              unint64_t v401 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1077 - (void)v397) >> 3);
              if (2 * v401 > v399) {
                unint64_t v399 = 2 * v401;
              }
              if (v401 >= 0x555555555555555) {
                unint64_t v402 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v402 = v399;
              }
              if (v402 > 0xAAAAAAAAAAAAAAALL) {
                sub_19E13C418();
              }
              uint64_t v403 = (char *)operator new(24 * v402);
              uint64_t v404 = &v403[24 * v398];
              *(void *)uint64_t v404 = v395;
              v405 = (float32x4_t **)(v404 + 24);
              v406 = &v403[v396];
              *((_DWORD *)v406 + 2) = v367;
              v406[12] = v1069;
              *((float *)v406 + 4) = v393;
              *((float *)v406 + 5) = v394;
              if (v382 == v400)
              {
                uint64_t v43 = &v403[24 * v398];
                v1076 = (float32x4_t **)(v404 + 24);
                unint64_t v1077 = (unint64_t)&v403[24 * v402];
                if (v400) {
                  goto LABEL_557;
                }
              }
              else
              {
                do
                {
                  long long v407 = *(_OWORD *)(v382 - 3);
                  uint64_t v43 = v404 - 24;
                  *((void *)v404 - 1) = *(v382 - 1);
                  *(_OWORD *)(v404 - 24) = v407;
                  v382 -= 3;
                  v404 -= 24;
                }
                while (v382 != v400);
                v1076 = v405;
                unint64_t v1077 = (unint64_t)&v403[24 * v402];
                if (v400) {
LABEL_557:
                }
                  operator delete(v400);
              }
LABEL_558:
              v1074 += v367 + v1067 + v1083;
              uint64_t v408 = v370[73];
              if (!v408) {
                goto LABEL_512;
              }
              if ((unint64_t)v1076 >= v1077)
              {
                unint64_t v409 = 0xAAAAAAAAAAAAAAABLL * (((char *)v1076 - v43) >> 3) + 1;
                if (v409 > 0xAAAAAAAAAAAAAAALL) {
                  sub_19E13D694();
                }
                unint64_t v410 = v43;
                if (0x5555555555555556 * ((uint64_t)(v1077 - (void)v43) >> 3) > v409) {
                  unint64_t v409 = 0x5555555555555556 * ((uint64_t)(v1077 - (void)v43) >> 3);
                }
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1077 - (void)v43) >> 3) >= 0x555555555555555) {
                  unint64_t v411 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v411 = v409;
                }
                if (v411 > 0xAAAAAAAAAAAAAAALL) {
                  sub_19E13C418();
                }
                unint64_t v412 = (char *)operator new(24 * v411);
                v413 = v1076;
                float v414 = &v412[8 * (((char *)v1076 - v43) >> 3)];
                *(void *)float v414 = v408;
                int v369 = (float32x4_t **)(v414 + 24);
                unint64_t v415 = &v412[(char *)v1076 - v43];
                *((_DWORD *)v415 + 2) = v1067;
                v415[12] = 0;
                *((void *)v415 + 2) = 0;
                if (v1076 == (float32x4_t **)v43)
                {
                  uint64_t v43 = &v412[8 * (((char *)v1076 - v43) >> 3)];
                  unint64_t v1077 = (unint64_t)&v412[24 * v411];
                  if (v410) {
                    goto LABEL_570;
                  }
                }
                else
                {
                  do
                  {
                    long long v416 = *(_OWORD *)(v413 - 3);
                    uint64_t v43 = v414 - 24;
                    *((void *)v414 - 1) = *(v413 - 1);
                    *(_OWORD *)(v414 - 24) = v416;
                    v413 -= 3;
                    v414 -= 24;
                  }
                  while (v413 != (float32x4_t **)v410);
                  unint64_t v1077 = (unint64_t)&v412[24 * v411];
                  if (v410) {
LABEL_570:
                  }
                    operator delete(v410);
                }
                int v368 = v1067;
                goto LABEL_511;
              }
              *v1076 = (float32x4_t *)v408;
              int v368 = v1067;
              *((_DWORD *)v1076 + 2) = v1067;
              *((unsigned char *)v1076 + 12) = 0;
              int v369 = v1076 + 3;
              v1076[2] = 0;
LABEL_511:
              v1074 += v368;
              v1076 = v369;
LABEL_512:
              if (++v121 == v119) {
                goto LABEL_797;
              }
            }
          }
          uint64_t v171 = (int *)operator new(4uLL);
          int *v171 = 0;
          v1060 = v171 + 1;
          if (v109 == 6)
          {
            uint64_t v172 = (int *)operator new(8uLL);
            *(void *)uint64_t v172 = 0x200000000;
            v1060 = v172 + 2;
            operator delete(v171);
            __int32 v173 = __p[8].i32[0] + 2 * __p[16].i32[0];
            uint64_t v171 = v172;
          }
          else
          {
            __int32 v173 = v114 + v113;
          }
          char v1063 = 2 * (v105 != 2);
          __int32 v1055 = ((v116 * v173) << v1053) + v1067;
          int v1056 = (v116 * v173) << v1053;
          if (v116 <= 1) {
            int v417 = 1;
          }
          else {
            int v417 = v116;
          }
          int v1073 = v417;
          v1051 = v171;
          do
          {
            v1065 = &__p[0].i64[*v171];
            v1066 = v171;
            uint64_t v420 = v1065[56];
            int v421 = v43;
            if ((v1061 & 1) == 0)
            {
              v1102[0] = 0;
              v1102[1] = 0;
              *(void *)&v1103[0] = 0;
              v1133[1] = 0;
              v1133[0] = 0;
              v1134 = 0;
              if (v1057 >= 1)
              {
                int v1084 = 0;
                LODWORD(v424) = 0;
                while (1)
                {
                  if (__p[8].i32[0] >= 1)
                  {
                    __int32 v425 = 0;
                    uint64_t v424 = (int)v424;
                    long long v426 = (char *)v1102[1];
                    do
                    {
                      if ((unint64_t)v426 < *(void *)&v1103[0])
                      {
                        *(_DWORD *)long long v426 = *(_DWORD *)(v420 + 4 * v424);
                        long long v427 = v426 + 4;
                      }
                      else
                      {
                        long long v428 = (char *)v1102[0];
                        int64_t v429 = v426 - (char *)v1102[0];
                        uint64_t v430 = (v426 - (char *)v1102[0]) >> 2;
                        unint64_t v431 = v430 + 1;
                        if ((unint64_t)(v430 + 1) >> 62) {
                          sub_19E13D694();
                        }
                        int64_t v432 = *(void *)&v1103[0] - (unint64_t)v1102[0];
                        if ((uint64_t)(*(void *)&v1103[0] - (unint64_t)v1102[0]) >> 1 > v431) {
                          unint64_t v431 = v432 >> 1;
                        }
                        if ((unint64_t)v432 >= 0x7FFFFFFFFFFFFFFCLL) {
                          unint64_t v433 = 0x3FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v433 = v431;
                        }
                        if (v433)
                        {
                          if (v433 >> 62) {
                            sub_19E13C418();
                          }
                          v434 = operator new(4 * v433);
                          int v435 = &v434[4 * v430];
                          *int v435 = *(_DWORD *)(v420 + 4 * v424);
                          long long v427 = v435 + 1;
                          if (v426 != v428)
                          {
LABEL_610:
                            unint64_t v436 = v426 - 4 - v428;
                            if (v436 < 0xBC
                              || &v434[v429 - 4 - (v436 & 0xFFFFFFFFFFFFFFFCLL)] > &v434[v429 - 4]
                              || &v426[-(v436 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v426 - 4
                              || (unint64_t)(v426 - &v434[v429]) < 0x20)
                            {
                              float32x4_t v437 = v426;
                              uint64_t v43 = v421;
                            }
                            else
                            {
                              uint64_t v439 = (v436 >> 2) + 1;
                              uint64_t v440 = 4 * (v439 & 0x7FFFFFFFFFFFFFF8);
                              float32x4_t v437 = &v426[-v440];
                              int v435 = (_DWORD *)((char *)v435 - v440);
                              float32x4_t v441 = &v434[4 * v430 - 16];
                              int v442 = v426 - 16;
                              uint64_t v443 = v439 & 0x7FFFFFFFFFFFFFF8;
                              uint64_t v43 = v421;
                              do
                              {
                                long long v444 = *(_OWORD *)v442;
                                *(v441 - 1) = *((_OWORD *)v442 - 1);
                                *float32x4_t v441 = v444;
                                v441 -= 2;
                                v442 -= 32;
                                v443 -= 8;
                              }
                              while (v443);
                              if (v439 == (v439 & 0x7FFFFFFFFFFFFFF8))
                              {
LABEL_613:
                                v1102[0] = v435;
                                v1102[1] = v427;
                                *(void *)&v1103[0] = &v434[4 * v433];
                                if (!v428) {
                                  goto LABEL_599;
                                }
LABEL_617:
                                operator delete(v428);
                                goto LABEL_599;
                              }
                            }
                            do
                            {
                              int v438 = *((_DWORD *)v437 - 1);
                              v437 -= 4;
                              *--int v435 = v438;
                            }
                            while (v437 != v428);
                            goto LABEL_613;
                          }
                        }
                        else
                        {
                          v434 = 0;
                          int v435 = (_DWORD *)(4 * v430);
                          *(_DWORD *)(4 * v430) = *(_DWORD *)(v420 + 4 * v424);
                          long long v427 = (void *)(4 * v430 + 4);
                          if (v426 != v428) {
                            goto LABEL_610;
                          }
                        }
                        uint64_t v43 = v421;
                        v1102[0] = v435;
                        v1102[1] = v427;
                        *(void *)&v1103[0] = &v434[4 * v433];
                        if (v428) {
                          goto LABEL_617;
                        }
                      }
LABEL_599:
                      v1102[1] = v427;
                      ++v424;
                      ++v425;
                      long long v426 = (char *)v427;
                    }
                    while (v425 < __p[8].i32[0]);
                  }
                  if (__p[16].i32[0] >= 1) {
                    break;
                  }
LABEL_595:
                  if (++v1084 == v1073) {
                    goto LABEL_654;
                  }
                }
                __int32 v445 = 0;
                uint64_t v424 = (int)v424;
                uint64_t v446 = (char *)v1133[1];
                while (2)
                {
                  if (v446 < v1134)
                  {
                    *(_DWORD *)uint64_t v446 = *(_DWORD *)(v420 + 4 * v424);
                    unint64_t v447 = v446 + 4;
                    goto LABEL_628;
                  }
                  uint64_t v448 = (char *)v1133[0];
                  int64_t v449 = v446 - (char *)v1133[0];
                  uint64_t v450 = (v446 - (char *)v1133[0]) >> 2;
                  unint64_t v451 = v450 + 1;
                  if ((unint64_t)(v450 + 1) >> 62) {
                    sub_19E13D694();
                  }
                  uint64_t v452 = v1134 - (char *)v1133[0];
                  if ((v1134 - (char *)v1133[0]) >> 1 > v451) {
                    unint64_t v451 = v452 >> 1;
                  }
                  if ((unint64_t)v452 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v453 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v453 = v451;
                  }
                  if (v453)
                  {
                    if (v453 >> 62) {
                      sub_19E13C418();
                    }
                    uint64_t v454 = operator new(4 * v453);
                    v455 = &v454[4 * v450];
                    _DWORD *v455 = *(_DWORD *)(v420 + 4 * v424);
                    unint64_t v447 = v455 + 1;
                    if (v446 != v448)
                    {
LABEL_639:
                      unint64_t v456 = v446 - 4 - v448;
                      if (v456 < 0xBC
                        || &v454[v449 - 4 - (v456 & 0xFFFFFFFFFFFFFFFCLL)] > &v454[v449 - 4]
                        || &v446[-(v456 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v446 - 4
                        || (unint64_t)(v446 - &v454[v449]) < 0x20)
                      {
                        v457 = v446;
                        uint64_t v43 = v421;
                      }
                      else
                      {
                        uint64_t v459 = (v456 >> 2) + 1;
                        uint64_t v460 = 4 * (v459 & 0x7FFFFFFFFFFFFFF8);
                        v457 = &v446[-v460];
                        v455 = (_DWORD *)((char *)v455 - v460);
                        v461 = &v454[4 * v450 - 16];
                        v462 = v446 - 16;
                        uint64_t v463 = v459 & 0x7FFFFFFFFFFFFFF8;
                        uint64_t v43 = v421;
                        do
                        {
                          long long v464 = *(_OWORD *)v462;
                          *(v461 - 1) = *((_OWORD *)v462 - 1);
                          _OWORD *v461 = v464;
                          v461 -= 2;
                          v462 -= 32;
                          v463 -= 8;
                        }
                        while (v463);
                        if (v459 == (v459 & 0x7FFFFFFFFFFFFFF8))
                        {
LABEL_642:
                          v1133[0] = v455;
                          v1133[1] = v447;
                          v1134 = &v454[4 * v453];
                          if (!v448)
                          {
LABEL_628:
                            v1133[1] = v447;
                            ++v424;
                            ++v445;
                            uint64_t v446 = (char *)v447;
                            if (v445 >= __p[16].i32[0]) {
                              goto LABEL_595;
                            }
                            continue;
                          }
LABEL_646:
                          operator delete(v448);
                          goto LABEL_628;
                        }
                      }
                      do
                      {
                        int v458 = *((_DWORD *)v457 - 1);
                        v457 -= 4;
                        *--v455 = v458;
                      }
                      while (v457 != v448);
                      goto LABEL_642;
                    }
                  }
                  else
                  {
                    uint64_t v454 = 0;
                    v455 = (_DWORD *)(4 * v450);
                    *(_DWORD *)(4 * v450) = *(_DWORD *)(v420 + 4 * v424);
                    unint64_t v447 = (void *)(4 * v450 + 4);
                    if (v446 != v448) {
                      goto LABEL_639;
                    }
                  }
                  break;
                }
                uint64_t v43 = v421;
                v1133[0] = v455;
                v1133[1] = v447;
                v1134 = &v454[4 * v453];
                if (!v448) {
                  goto LABEL_628;
                }
                goto LABEL_646;
              }
LABEL_654:
              float v465 = v1142;
              if ((unint64_t)v1142 >= v1143)
              {
                v470 = sub_19E288094((char **)&v1141, (uint64_t)v1102);
              }
              else
              {
                *(void *)v1142 = 0;
                *((void *)v465 + 1) = 0;
                *((void *)v465 + 2) = 0;
                uint64_t v466 = v1102[0];
                int64_t v467 = (char *)v1102[1] - (char *)v1102[0];
                if (v1102[1] != v1102[0])
                {
                  if (v467 < 0) {
                    sub_19E13D694();
                  }
                  uint64_t v468 = (char *)operator new((char *)v1102[1] - (char *)v1102[0]);
                  *(void *)float v465 = v468;
                  *((void *)v465 + 1) = v468;
                  int v469 = &v468[4 * (v467 >> 2)];
                  *((void *)v465 + 2) = v469;
                  memcpy(v468, v466, v467);
                  *((void *)v465 + 1) = v469;
                }
                v470 = v465 + 24;
              }
              v1142 = v470;
              float32x4_t v495 = (float32x4_t *)*((void *)v470 - 3);
              uint64_t v496 = (uint64_t)(*((void *)v470 - 2) - (void)v495) >> 2 << v1063;
              if ((unint64_t)v1076 < v1077)
              {
                *v1076 = v495;
                *((_DWORD *)v1076 + 2) = v496;
                *((unsigned char *)v1076 + 12) = v1069;
                v497 = (uint64_t *)(v1076 + 3);
                *((_DWORD *)v1076 + 4) = v107;
                *((_DWORD *)v1076 + 5) = v106;
                goto LABEL_714;
              }
              unint64_t v498 = 0xAAAAAAAAAAAAAAABLL * (((char *)v1076 - v43) >> 3) + 1;
              if (v498 > 0xAAAAAAAAAAAAAAALL) {
                sub_19E13D694();
              }
              if (0x5555555555555556 * ((uint64_t)(v1077 - (void)v43) >> 3) > v498) {
                unint64_t v498 = 0x5555555555555556 * ((uint64_t)(v1077 - (void)v43) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1077 - (void)v43) >> 3) >= 0x555555555555555) {
                unint64_t v499 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v499 = v498;
              }
              if (v499 > 0xAAAAAAAAAAAAAAALL) {
                sub_19E13C418();
              }
              float v500 = (char *)operator new(24 * v499);
              float v501 = &v500[8 * (((char *)v1076 - v43) >> 3)];
              *(void *)float v501 = v495;
              v497 = (uint64_t *)(v501 + 24);
              float v502 = &v500[(char *)v1076 - v43];
              *((_DWORD *)v502 + 2) = v496;
              v502[12] = v1069;
              *((_DWORD *)v502 + 4) = v107;
              *((_DWORD *)v502 + 5) = v106;
              if (v1076 == (float32x4_t **)v43)
              {
                int v505 = &v500[8 * (((char *)v1076 - v43) >> 3)];
                unint64_t v1077 = (unint64_t)&v500[24 * v499];
                if (v43) {
                  goto LABEL_712;
                }
              }
              else
              {
                int v503 = (char *)v1076;
                do
                {
                  long long v504 = *(_OWORD *)(v503 - 24);
                  int v505 = v501 - 24;
                  *((void *)v501 - 1) = *((void *)v503 - 1);
                  *(_OWORD *)(v501 - 24) = v504;
                  v503 -= 24;
                  v501 -= 24;
                }
                while (v503 != v43);
                unint64_t v1077 = (unint64_t)&v500[24 * v499];
                if (v43)
                {
LABEL_712:
                  operator delete(v43);
                  v470 = v1142;
                }
              }
              uint64_t v43 = v505;
LABEL_714:
              signed int v506 = ((*((void *)v470 - 2) - *((void *)v470 - 3)) >> 2) << v1063;
              int v507 = v506 & 3;
              if (v506 <= 0) {
                int v507 = -(-v506 & 3);
              }
              if (v507) {
                unsigned int v508 = v506 - v507 + 8;
              }
              else {
                unsigned int v508 = ((*((void *)v470 - 2) - *((void *)v470 - 3)) >> 2) << v1063;
              }
              uint64_t v509 = v1065[72];
              if ((unint64_t)v497 < v1077)
              {
                uint64_t *v497 = v509;
                *((_DWORD *)v497 + 2) = v1067;
                *((unsigned char *)v497 + 12) = 0;
                size_t v510 = (char *)(v497 + 3);
                v497[2] = 0;
                if ((unint64_t)v470 < v1143) {
                  goto LABEL_721;
                }
LABEL_737:
                uint64_t v515 = sub_19E288094((char **)&v1141, (uint64_t)v1133);
                goto LABEL_738;
              }
              unint64_t v516 = 0xAAAAAAAAAAAAAAABLL * (((char *)v497 - v43) >> 3) + 1;
              if (v516 > 0xAAAAAAAAAAAAAAALL) {
                sub_19E13D694();
              }
              if (0x5555555555555556 * ((uint64_t)(v1077 - (void)v43) >> 3) > v516) {
                unint64_t v516 = 0x5555555555555556 * ((uint64_t)(v1077 - (void)v43) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1077 - (void)v43) >> 3) >= 0x555555555555555) {
                unint64_t v517 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v517 = v516;
              }
              if (v517 > 0xAAAAAAAAAAAAAAALL) {
                sub_19E13C418();
              }
              uint64_t v518 = (char *)operator new(24 * v517);
              long long v519 = &v518[8 * (((char *)v497 - v43) >> 3)];
              *(void *)long long v519 = v509;
              size_t v510 = v519 + 24;
              uint64_t v520 = &v518[(char *)v497 - v43];
              *((_DWORD *)v520 + 2) = v1067;
              v520[12] = 0;
              *((void *)v520 + 2) = 0;
              if (v497 == (uint64_t *)v43)
              {
                v522 = &v518[8 * (((char *)v497 - v43) >> 3)];
                unint64_t v1077 = (unint64_t)&v518[24 * v517];
                if (v43) {
                  goto LABEL_735;
                }
              }
              else
              {
                do
                {
                  long long v521 = *(_OWORD *)(v497 - 3);
                  v522 = v519 - 24;
                  *((void *)v519 - 1) = *(v497 - 1);
                  *(_OWORD *)(v519 - 24) = v521;
                  v497 -= 3;
                  v519 -= 24;
                }
                while (v497 != (uint64_t *)v43);
                unint64_t v1077 = (unint64_t)&v518[24 * v517];
                if (v43)
                {
LABEL_735:
                  operator delete(v43);
                  v470 = v1142;
                }
              }
              uint64_t v43 = v522;
              if ((unint64_t)v470 >= v1143) {
                goto LABEL_737;
              }
LABEL_721:
              *(void *)v470 = 0;
              *((void *)v470 + 1) = 0;
              *((void *)v470 + 2) = 0;
              v511 = v1133[0];
              int64_t v512 = (char *)v1133[1] - (char *)v1133[0];
              if (v1133[1] != v1133[0])
              {
                if (v512 < 0) {
                  sub_19E13D694();
                }
                uint64_t v513 = (char *)operator new((char *)v1133[1] - (char *)v1133[0]);
                *(void *)v470 = v513;
                *((void *)v470 + 1) = v513;
                uint64_t v514 = &v513[4 * (v512 >> 2)];
                *((void *)v470 + 2) = v514;
                memcpy(v513, v511, v512);
                *((void *)v470 + 1) = v514;
              }
              uint64_t v515 = v470 + 24;
LABEL_738:
              v1142 = v515;
              uint64_t v523 = *((void *)v515 - 3);
              uint64_t v524 = (*((void *)v515 - 2) - v523) >> 2 << v1063;
              if (v1062) {
                float v525 = *(float *)&v1163;
              }
              else {
                float v525 = -1.0;
              }
              if (v1062) {
                float v526 = *((float *)&v1163 + 1);
              }
              else {
                float v526 = 1.0;
              }
              if ((unint64_t)v510 < v1077)
              {
                *(void *)size_t v510 = v523;
                *((_DWORD *)v510 + 2) = v524;
                v510[12] = v1069;
                v1076 = (float32x4_t **)(v510 + 24);
                *((float *)v510 + 4) = v525;
                *((float *)v510 + 5) = v526;
                goto LABEL_758;
              }
              unint64_t v527 = 0xAAAAAAAAAAAAAAABLL * ((v510 - v43) >> 3) + 1;
              if (v527 > 0xAAAAAAAAAAAAAAALL) {
                sub_19E13D694();
              }
              if (0x5555555555555556 * ((uint64_t)(v1077 - (void)v43) >> 3) > v527) {
                unint64_t v527 = 0x5555555555555556 * ((uint64_t)(v1077 - (void)v43) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1077 - (void)v43) >> 3) >= 0x555555555555555) {
                unint64_t v528 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v528 = v527;
              }
              if (v528 > 0xAAAAAAAAAAAAAAALL) {
                sub_19E13C418();
              }
              uint64_t v529 = (char *)operator new(24 * v528);
              BOOL v530 = &v529[8 * ((v510 - v43) >> 3)];
              *(void *)BOOL v530 = v523;
              v1076 = (float32x4_t **)(v530 + 24);
              int v531 = &v529[v510 - v43];
              *((_DWORD *)v531 + 2) = v524;
              v531[12] = v1069;
              *((float *)v531 + 4) = v525;
              *((float *)v531 + 5) = v526;
              if (v510 == v43)
              {
                uint64_t v533 = &v529[8 * ((v510 - v43) >> 3)];
                unint64_t v1077 = (unint64_t)&v529[24 * v528];
                if (v43) {
                  goto LABEL_756;
                }
              }
              else
              {
                do
                {
                  long long v532 = *(_OWORD *)(v510 - 24);
                  uint64_t v533 = v530 - 24;
                  *((void *)v530 - 1) = *((void *)v510 - 1);
                  *(_OWORD *)(v530 - 24) = v532;
                  v510 -= 24;
                  v530 -= 24;
                }
                while (v510 != v43);
                unint64_t v1077 = (unint64_t)&v529[24 * v528];
                if (v43)
                {
LABEL_756:
                  operator delete(v43);
                  uint64_t v515 = v1142;
                }
              }
              uint64_t v43 = v533;
LABEL_758:
              signed int v534 = ((*((void *)v515 - 2) - *((void *)v515 - 3)) >> 2) << v1063;
              int v535 = v534 & 3;
              if (v534 <= 0) {
                int v535 = -(-v534 & 3);
              }
              if (v535) {
                signed int v534 = v534 - v535 + 8;
              }
              v1074 += v1067 + v508 + v534;
              uint64_t v171 = v1066;
              if ((__p[7].i8[8] & 0x80) == 0)
              {
                uint64_t v536 = v1065[73];
                if ((unint64_t)v1076 < v1077)
                {
                  *v1076 = (float32x4_t *)v536;
                  int v537 = v1067;
                  *((_DWORD *)v1076 + 2) = v1067;
                  *((unsigned char *)v1076 + 12) = 0;
                  uint64_t v538 = v1076 + 3;
                  v1076[2] = 0;
                  goto LABEL_778;
                }
                unint64_t v539 = 0xAAAAAAAAAAAAAAABLL * (((char *)v1076 - v43) >> 3) + 1;
                if (v539 > 0xAAAAAAAAAAAAAAALL) {
                  sub_19E13D694();
                }
                if (0x5555555555555556 * ((uint64_t)(v1077 - (void)v43) >> 3) > v539) {
                  unint64_t v539 = 0x5555555555555556 * ((uint64_t)(v1077 - (void)v43) >> 3);
                }
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1077 - (void)v43) >> 3) >= 0x555555555555555) {
                  unint64_t v540 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v540 = v539;
                }
                if (v540 > 0xAAAAAAAAAAAAAAALL) {
                  sub_19E13C418();
                }
                int v541 = (char *)operator new(24 * v540);
                v542 = &v541[8 * (((char *)v1076 - v43) >> 3)];
                *(void *)v542 = v536;
                uint64_t v538 = (float32x4_t **)(v542 + 24);
                float32x4_t v543 = &v541[(char *)v1076 - v43];
                *((_DWORD *)v543 + 2) = v1067;
                v543[12] = 0;
                *((void *)v543 + 2) = 0;
                if (v1076 == (float32x4_t **)v43)
                {
                  float32x4_t v546 = &v541[8 * (((char *)v1076 - v43) >> 3)];
                  unint64_t v1077 = (unint64_t)&v541[24 * v540];
                  if (v43) {
                    goto LABEL_776;
                  }
                }
                else
                {
                  float32x4_t v544 = (char *)v1076;
                  do
                  {
                    long long v545 = *(_OWORD *)(v544 - 24);
                    float32x4_t v546 = v542 - 24;
                    *((void *)v542 - 1) = *((void *)v544 - 1);
                    *(_OWORD *)(v542 - 24) = v545;
                    v544 -= 24;
                    v542 -= 24;
                  }
                  while (v544 != v43);
                  unint64_t v1077 = (unint64_t)&v541[24 * v540];
                  if (v43) {
LABEL_776:
                  }
                    operator delete(v43);
                }
                uint64_t v43 = v546;
                int v537 = v1067;
                uint64_t v171 = v1066;
LABEL_778:
                v1074 += v537;
                v1076 = v538;
              }
              *(_DWORD *)&__src[24] &= ~0x20u;
              if (v1133[0])
              {
                v1133[1] = v1133[0];
                operator delete(v1133[0]);
              }
              if (v1102[0])
              {
                v1102[1] = v1102[0];
                operator delete(v1102[0]);
              }
              goto LABEL_587;
            }
            if ((unint64_t)v1076 < v1077)
            {
              *v1076 = (float32x4_t *)v420;
              *((_DWORD *)v1076 + 2) = v1056;
              *((unsigned char *)v1076 + 12) = 0;
              unint64_t v422 = (uint64_t *)(v1076 + 3);
              *((_DWORD *)v1076 + 4) = v107;
              *((_DWORD *)v1076 + 5) = v106;
              uint64_t v423 = v1065[72];
              if ((unint64_t)(v1076 + 3) < v1077) {
                goto LABEL_591;
              }
              goto LABEL_672;
            }
            unint64_t v471 = 0xAAAAAAAAAAAAAAABLL * (((char *)v1076 - v43) >> 3) + 1;
            if (v471 > 0xAAAAAAAAAAAAAAALL) {
              sub_19E13D694();
            }
            if (0x5555555555555556 * ((uint64_t)(v1077 - (void)v43) >> 3) > v471) {
              unint64_t v471 = 0x5555555555555556 * ((uint64_t)(v1077 - (void)v43) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1077 - (void)v43) >> 3) >= 0x555555555555555) {
              unint64_t v472 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v472 = v471;
            }
            if (v472 > 0xAAAAAAAAAAAAAAALL) {
              sub_19E13C418();
            }
            v473 = (char *)operator new(24 * v472);
            float32x4_t v474 = &v473[8 * (((char *)v1076 - v43) >> 3)];
            *(void *)float32x4_t v474 = v420;
            unint64_t v422 = (uint64_t *)(v474 + 24);
            float32x4_t v475 = &v473[(char *)v1076 - v43];
            *((_DWORD *)v475 + 2) = v1056;
            v475[12] = 0;
            *((_DWORD *)v475 + 4) = v107;
            *((_DWORD *)v475 + 5) = v106;
            if (v1076 == (float32x4_t **)v43)
            {
              float32x4_t v478 = &v473[8 * (((char *)v1076 - v43) >> 3)];
              unint64_t v1077 = (unint64_t)&v473[24 * v472];
              if (v43) {
                goto LABEL_670;
              }
            }
            else
            {
              float32x4_t v476 = (char *)v1076;
              do
              {
                long long v477 = *(_OWORD *)(v476 - 24);
                float32x4_t v478 = v474 - 24;
                *((void *)v474 - 1) = *((void *)v476 - 1);
                *(_OWORD *)(v474 - 24) = v477;
                v476 -= 24;
                v474 -= 24;
              }
              while (v476 != v43);
              unint64_t v1077 = (unint64_t)&v473[24 * v472];
              if (v43) {
LABEL_670:
              }
                operator delete(v43);
            }
            uint64_t v43 = v478;
            uint64_t v423 = v1065[72];
            if ((unint64_t)v422 < v1077)
            {
LABEL_591:
              *unint64_t v422 = v423;
              *((_DWORD *)v422 + 2) = v1067;
              *((unsigned char *)v422 + 12) = 0;
              v1076 = (float32x4_t **)(v422 + 3);
              v422[2] = 0;
              v1074 += v1055;
              if ((__p[7].i8[8] & 0x80) == 0) {
                goto LABEL_684;
              }
              goto LABEL_587;
            }
LABEL_672:
            unint64_t v479 = 0xAAAAAAAAAAAAAAABLL * (((char *)v422 - v43) >> 3) + 1;
            if (v479 > 0xAAAAAAAAAAAAAAALL) {
              sub_19E13D694();
            }
            if (0x5555555555555556 * ((uint64_t)(v1077 - (void)v43) >> 3) > v479) {
              unint64_t v479 = 0x5555555555555556 * ((uint64_t)(v1077 - (void)v43) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1077 - (void)v43) >> 3) >= 0x555555555555555) {
              unint64_t v480 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v480 = v479;
            }
            if (v480 > 0xAAAAAAAAAAAAAAALL) {
              sub_19E13C418();
            }
            uint64_t v481 = (char *)operator new(24 * v480);
            v482 = &v481[8 * (((char *)v422 - v43) >> 3)];
            *(void *)v482 = v423;
            v1076 = (float32x4_t **)(v482 + 24);
            uint64_t v483 = &v481[(char *)v422 - v43];
            *((_DWORD *)v483 + 2) = v1067;
            v483[12] = 0;
            *((void *)v483 + 2) = 0;
            if (v422 == (uint64_t *)v43)
            {
              uint64_t v485 = &v481[8 * (((char *)v422 - v43) >> 3)];
              unint64_t v1077 = (unint64_t)&v481[24 * v480];
              if (v43) {
                goto LABEL_682;
              }
            }
            else
            {
              do
              {
                long long v484 = *(_OWORD *)(v422 - 3);
                uint64_t v485 = v482 - 24;
                *((void *)v482 - 1) = *(v422 - 1);
                *(_OWORD *)(v482 - 24) = v484;
                v422 -= 3;
                v482 -= 24;
              }
              while (v422 != (uint64_t *)v43);
              unint64_t v1077 = (unint64_t)&v481[24 * v480];
              if (v43) {
LABEL_682:
              }
                operator delete(v43);
            }
            uint64_t v43 = v485;
            v1074 += v1055;
            if ((__p[7].i8[8] & 0x80) == 0)
            {
LABEL_684:
              uint64_t v486 = v1065[73];
              if ((unint64_t)v1076 < v1077)
              {
                *v1076 = (float32x4_t *)v486;
                int v418 = v1067;
                *((_DWORD *)v1076 + 2) = v1067;
                *((unsigned char *)v1076 + 12) = 0;
                unint64_t v419 = v1076 + 3;
                v1076[2] = 0;
              }
              else
              {
                unint64_t v487 = 0xAAAAAAAAAAAAAAABLL * (((char *)v1076 - v43) >> 3) + 1;
                if (v487 > 0xAAAAAAAAAAAAAAALL) {
                  sub_19E13D694();
                }
                if (0x5555555555555556 * ((uint64_t)(v1077 - (void)v43) >> 3) > v487) {
                  unint64_t v487 = 0x5555555555555556 * ((uint64_t)(v1077 - (void)v43) >> 3);
                }
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1077 - (void)v43) >> 3) >= 0x555555555555555) {
                  unint64_t v488 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v488 = v487;
                }
                if (v488 > 0xAAAAAAAAAAAAAAALL) {
                  sub_19E13C418();
                }
                v489 = (char *)operator new(24 * v488);
                uint64_t v490 = &v489[8 * (((char *)v1076 - v43) >> 3)];
                *(void *)uint64_t v490 = v486;
                unint64_t v419 = (float32x4_t **)(v490 + 24);
                uint64_t v491 = &v489[(char *)v1076 - v43];
                *((_DWORD *)v491 + 2) = v1067;
                v491[12] = 0;
                *((void *)v491 + 2) = 0;
                if (v1076 == (float32x4_t **)v43)
                {
                  v494 = &v489[8 * (((char *)v1076 - v43) >> 3)];
                  unint64_t v1077 = (unint64_t)&v489[24 * v488];
                  if (v43) {
                    goto LABEL_696;
                  }
                }
                else
                {
                  v492 = (char *)v1076;
                  do
                  {
                    long long v493 = *(_OWORD *)(v492 - 24);
                    v494 = v490 - 24;
                    *((void *)v490 - 1) = *((void *)v492 - 1);
                    *(_OWORD *)(v490 - 24) = v493;
                    v492 -= 24;
                    v490 -= 24;
                  }
                  while (v492 != v43);
                  unint64_t v1077 = (unint64_t)&v489[24 * v488];
                  if (v43) {
LABEL_696:
                  }
                    operator delete(v43);
                }
                uint64_t v43 = v494;
                int v418 = v1067;
              }
              v1074 += v418;
              v1076 = v419;
            }
LABEL_587:
            ++v171;
          }
          while (v171 != v1060);
LABEL_797:
          operator delete(v1051);
          if (!v1062) {
            goto LABEL_1300;
          }
          float32x4_t v547 = (int *)operator new(4uLL);
          *float32x4_t v547 = 6;
          int v548 = v547 + 1;
          if (__p[0].i64[0] == 6)
          {
            uint64_t v549 = (int *)operator new(8uLL);
            *(void *)uint64_t v549 = 0x700000006;
            int v548 = v549 + 2;
            operator delete(v547);
            float32x4_t v547 = v549;
          }
          __int32 v550 = v1052 << v1053;
          if (v1052 << v1053 <= 0) {
            int v551 = -(-(v1052 << v1053) & 3);
          }
          else {
            int v551 = (v1052 << v1053) & 3;
          }
          if (v551) {
            int v552 = v550 - v551 + 8;
          }
          else {
            int v552 = v1052 << v1053;
          }
          v1085 = v547;
          unint64_t v553 = v547;
          do
          {
            uint64_t v555 = *v553;
            BOOL v556 = (float32x4_t *)*((void *)&v1164 + v555);
            if (v556)
            {
              if ((unint64_t)v1076 < v1077)
              {
                *v1076 = v556;
                *((_DWORD *)v1076 + 2) = v550;
                *((unsigned char *)v1076 + 12) = v1069;
                uint64_t v554 = v1076 + 3;
                v1076[2] = (float32x4_t *)0x3F800000BF800000;
              }
              else
              {
                BOOL v557 = v43;
                uint64_t v558 = (char *)v1076 - v43;
                unint64_t v559 = 0xAAAAAAAAAAAAAAABLL * (v558 >> 3) + 1;
                if (v559 > 0xAAAAAAAAAAAAAAALL) {
                  sub_19E13D694();
                }
                uint64_t v560 = (float32x4_t **)v557;
                unint64_t v561 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1077 - (void)v557) >> 3);
                if (2 * v561 > v559) {
                  unint64_t v559 = 2 * v561;
                }
                if (v561 >= 0x555555555555555) {
                  unint64_t v562 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v562 = v559;
                }
                if (v562 > 0xAAAAAAAAAAAAAAALL) {
                  sub_19E13C418();
                }
                v563 = (char *)operator new(24 * v562);
                float32x4_t v564 = &v563[8 * (v558 >> 3)];
                *(void *)float32x4_t v564 = v556;
                uint64_t v554 = (float32x4_t **)(v564 + 24);
                uint64_t v565 = &v563[v558];
                *((_DWORD *)v565 + 2) = v550;
                v565[12] = v1069;
                *((void *)v565 + 2) = 0x3F800000BF800000;
                v566 = v1076;
                if (v1076 == v560)
                {
                  uint64_t v43 = &v563[8 * (v558 >> 3)];
                  unint64_t v1077 = (unint64_t)&v563[24 * v562];
                  if (v560) {
                    goto LABEL_824;
                  }
                }
                else
                {
                  do
                  {
                    long long v567 = *(_OWORD *)(v566 - 3);
                    uint64_t v43 = v564 - 24;
                    *((void *)v564 - 1) = *(v566 - 1);
                    *(_OWORD *)(v564 - 24) = v567;
                    v566 -= 3;
                    v564 -= 24;
                  }
                  while (v566 != v560);
                  unint64_t v1077 = (unint64_t)&v563[24 * v562];
                  if (!v560) {
                    goto LABEL_808;
                  }
LABEL_824:
                  operator delete(v560);
                }
              }
LABEL_808:
              v1074 += v552;
              *(_DWORD *)&__src[196] |= 1 << v555;
              v1076 = v554;
            }
            ++v553;
          }
          while (v553 != v548);
          operator delete(v1085);
          BOOL v174 = (char *)__dst;
          unint64_t v175 = v1146;
          if ((unint64_t)__dst >= v1146) {
            goto LABEL_1187;
          }
LABEL_1301:
          memcpy(v174, __src, 0x190uLL);
          uint64_t v44 = (uint64_t)a3;
          long long __dst = v174 + 400;
          v884 = v1058;
          if (SHIBYTE(v1137) < 0)
          {
LABEL_1302:
            v941 = v884;
            operator delete(v1136[0]);
            v884 = v941;
          }
LABEL_85:
          long long v30 = v884 + 24;
          if (v30 == v1054) {
            goto LABEL_1408;
          }
          continue;
        case 0xBLL:
          __int32 v180 = (__p[20].i32[1] * __p[20].i32[0] * __p[8].i32[2] * __p[16].i32[0]) << (2 * (v105 != 2));
          __int32 v181 = 4 * __p[16].i32[0];
          int v182 = (float32x4_t *)v1164;
          int v183 = v1076;
          if ((unint64_t)v1076 >= v1077) {
            goto LABEL_302;
          }
          goto LABEL_300;
        case 0xDLL:
          __int32 v180 = (2 * __p[8].i32[0] * __p[16].i32[0]) << (2 * (v105 != 2));
          __int32 v181 = 8 * __p[16].i32[0];
          int v182 = (float32x4_t *)v1164;
          int v183 = v1076;
          if ((unint64_t)v1076 < v1077)
          {
LABEL_300:
            float32x4_t *v183 = v182;
            *((_DWORD *)v183 + 2) = v180;
            *((unsigned char *)v183 + 12) = v1069;
            int v184 = v183 + 3;
            *((_DWORD *)v183 + 4) = v107;
            *((_DWORD *)v183 + 5) = v106;
            goto LABEL_313;
          }
LABEL_302:
          int64_t v185 = (char *)v183 - v43;
          unint64_t v186 = 0xAAAAAAAAAAAAAAABLL * (((char *)v183 - v43) >> 3);
          unint64_t v187 = v186 + 1;
          if (v186 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_19E13D694();
          }
          if (0x5555555555555556 * ((uint64_t)(v1077 - (void)v43) >> 3) > v187) {
            unint64_t v187 = 0x5555555555555556 * ((uint64_t)(v1077 - (void)v43) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1077 - (void)v43) >> 3) >= 0x555555555555555) {
            unint64_t v188 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v188 = v187;
          }
          if (v188 > 0xAAAAAAAAAAAAAAALL) {
            sub_19E13C418();
          }
          int v189 = (char *)operator new(24 * v188);
          uint64_t v190 = v1076;
          uint64_t v191 = &v189[24 * v186];
          *(void *)uint64_t v191 = v182;
          int v184 = (float32x4_t **)(v191 + 24);
          int v192 = &v189[v185];
          *((_DWORD *)v192 + 2) = v180;
          v192[12] = v1069;
          *((_DWORD *)v192 + 4) = v107;
          *((_DWORD *)v192 + 5) = v106;
          if (v1076 == (float32x4_t **)v43)
          {
            uint64_t v43 = v191;
            unint64_t v1077 = (unint64_t)&v189[24 * v188];
            if (v1080) {
LABEL_312:
            }
              operator delete(v1080);
          }
          else
          {
            do
            {
              long long v193 = *(_OWORD *)(v190 - 3);
              uint64_t v43 = v191 - 24;
              *((void *)v191 - 1) = *(v190 - 1);
              *(_OWORD *)(v191 - 24) = v193;
              v190 -= 3;
              v191 -= 24;
            }
            while (v190 != (float32x4_t **)v1080);
            unint64_t v1077 = (unint64_t)&v189[24 * v188];
            if (v1080) {
              goto LABEL_312;
            }
          }
LABEL_313:
          if (v180 <= 0) {
            int v194 = -(-v180 & 3);
          }
          else {
            int v194 = v180 & 3;
          }
          if (v194) {
            int v195 = v180 - v194 + 8;
          }
          else {
            int v195 = v180;
          }
          int v196 = *(_DWORD *)&__src[196] | 1;
          *(_DWORD *)&__src[196] |= 1u;
          id v197 = v1170;
          if ((unint64_t)v184 < v1077)
          {
            float32x4_t *v184 = v1170;
            *((_DWORD *)v184 + 2) = v181;
            *((unsigned char *)v184 + 12) = 0;
            v1076 = v184 + 3;
            v184[2] = 0;
            goto LABEL_332;
          }
          int64_t v198 = (char *)v184 - v43;
          int v199 = v43;
          unint64_t v200 = 0xAAAAAAAAAAAAAAABLL * (((char *)v184 - v43) >> 3);
          unint64_t v201 = v200 + 1;
          v1081 = (float32x4_t **)v199;
          if (v200 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_19E13D694();
          }
          unint64_t v202 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1077 - (void)v199) >> 3);
          if (2 * v202 > v201) {
            unint64_t v201 = 2 * v202;
          }
          if (v202 >= 0x555555555555555) {
            unint64_t v203 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v203 = v201;
          }
          if (v203 > 0xAAAAAAAAAAAAAAALL) {
            sub_19E13C418();
          }
          uint64_t v204 = (char *)operator new(24 * v203);
          uint64_t v205 = &v204[24 * v200];
          *(void *)uint64_t v205 = v197;
          uint64_t v206 = (float32x4_t **)(v205 + 24);
          int v207 = &v204[v198];
          *((_DWORD *)v207 + 2) = v181;
          v207[12] = 0;
          *((void *)v207 + 2) = 0;
          if (v184 == v1081)
          {
            uint64_t v43 = &v204[24 * v200];
            v1076 = (float32x4_t **)(v205 + 24);
            unint64_t v1077 = (unint64_t)&v204[24 * v203];
            if (v1081)
            {
LABEL_331:
              operator delete(v1081);
              int v196 = *(_DWORD *)&__src[196];
            }
          }
          else
          {
            do
            {
              long long v208 = *(_OWORD *)(v184 - 3);
              uint64_t v43 = v205 - 24;
              *((void *)v205 - 1) = *(v184 - 1);
              *(_OWORD *)(v205 - 24) = v208;
              v184 -= 3;
              v205 -= 24;
            }
            while (v184 != v1081);
            v1076 = v206;
            unint64_t v1077 = (unint64_t)&v204[24 * v203];
            if (v1081) {
              goto LABEL_331;
            }
          }
LABEL_332:
          if (v181 <= 0) {
            int v209 = -(-v181 & 3);
          }
          else {
            int v209 = v181 & 3;
          }
          if (v209) {
            int v210 = v181 - v209 + 8;
          }
          else {
            int v210 = v181;
          }
          v1074 += v210 + v195;
          *(_DWORD *)&__src[196] = v196 | 0x10000;
          if (__p[22].i32[0] != 1) {
            goto LABEL_1300;
          }
          *(_DWORD *)&__src[138] = 1;
          *(_DWORD *)&__src[196] = v196 | 0x10001;
          BOOL v211 = (char *)v1139[0];
          if (!v1139[0]) {
            goto LABEL_1300;
          }
          while (1)
          {
            if (v211[39] < 0)
            {
              sub_19E13C2D0(v1133, *((void **)v211 + 2), *((void *)v211 + 3));
            }
            else
            {
              *(_OWORD *)v1133 = *((_OWORD *)v211 + 1);
              v1134 = (char *)*((void *)v211 + 4);
            }
            int v1135 = *((_DWORD *)v211 + 10);
            long long v1131 = 0u;
            long long v1132 = 0u;
            long long v1129 = 0u;
            long long v1130 = 0u;
            long long v1127 = 0u;
            long long v1128 = 0u;
            long long v1125 = 0u;
            long long v1126 = 0u;
            long long v1123 = 0u;
            long long v1124 = 0u;
            long long v1121 = 0u;
            long long v1122 = 0u;
            long long v1119 = 0u;
            long long v1120 = 0u;
            long long v1117 = 0u;
            long long v1118 = 0u;
            long long v1115 = 0u;
            long long v1116 = 0u;
            long long v1113 = 0u;
            long long v1114 = 0u;
            long long v1111 = 0u;
            long long v1112 = 0u;
            long long v1109 = 0u;
            long long v1110 = 0u;
            long long v1107 = 0u;
            long long v1108 = 0u;
            long long v1105 = 0u;
            long long v1106 = 0u;
            long long v1104 = 0u;
            *(_OWORD *)v1102 = 0u;
            memset(v1103, 0, sizeof(v1103));
            sub_19E30AD68((uint64_t)a3, (uint64_t)v1133);
            if (__p[16].i32[0] * __p[8].i32[0] != v1117 * v1121) {
              goto LABEL_342;
            }
            uint64_t v213 = (v180 / v108);
            if ((int)v213 >= 1) {
              break;
            }
LABEL_341:
            v1099 = v1133;
            size_t v212 = sub_19E287AAC((uint64_t)v1138, (uint64_t)v1133, (uint64_t)&unk_19E351150, (long long **)&v1099);
            *((_DWORD *)v1144 + 100 * *((int *)v212 + 10) + 97) = *(_DWORD *)&__src[194];
LABEL_342:
            if (SHIBYTE(v1134) < 0)
            {
              operator delete(v1133[0]);
              BOOL v211 = *(char **)v211;
              if (!v211) {
                goto LABEL_1300;
              }
            }
            else
            {
              BOOL v211 = *(char **)v211;
              if (!v211) {
                goto LABEL_1300;
              }
            }
          }
          if (v213 < 8)
          {
            uint64_t v214 = 0;
            LOBYTE(v215) = 1;
            goto LABEL_362;
          }
          if (v213 >= 0x20)
          {
            uint64_t v214 = v213 & 0x7FFFFFE0;
            long long v216 = (float32x4_t *)(v1164 + 64);
            uint64_t v217 = (float32x4_t *)(v1129 + 64);
            v218.i64[0] = 0x101010101010101;
            v218.i64[1] = 0x101010101010101;
            uint64_t v219 = v213 & 0xFFFFFFE0;
            v220.i64[0] = 0x101010101010101;
            v220.i64[1] = 0x101010101010101;
            do
            {
              float32x4_t v221 = vabdq_f32(v216[-1], v217[-1]);
              float32x4_t v222 = vabdq_f32(v216[-2], v217[-2]);
              float32x4_t v223 = vabdq_f32(v216[-3], v217[-3]);
              float32x4_t v224 = vabdq_f32(v216[-4], v217[-4]);
              float32x4_t v225 = vabdq_f32(v216[3], v217[3]);
              float32x4_t v226 = vabdq_f32(v216[2], v217[2]);
              float32x4_t v227 = *v217;
              float32x4_t v228 = v217[1];
              v217 += 8;
              float32x4_t v229 = vabdq_f32(v216[1], v228);
              float32x4_t v230 = vabdq_f32(*v216, v227);
              int8x16_t v218 = vandq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v1064, vcvtq_f64_f32(*(float32x2_t *)v224.f32)), (int32x4_t)vcgeq_f64(v1064, vcvt_hight_f64_f32(v224))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v1064, vcvtq_f64_f32(*(float32x2_t *)v223.f32)), (int32x4_t)vcgeq_f64(v1064, vcvt_hight_f64_f32(v223)))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v1064, vcvtq_f64_f32(*(float32x2_t *)v222.f32)), (int32x4_t)vcgeq_f64(v1064, vcvt_hight_f64_f32(v222))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v1064, vcvtq_f64_f32(*(float32x2_t *)v221.f32)), (int32x4_t)vcgeq_f64(v1064, vcvt_hight_f64_f32(v221))))), v218);
              int8x16_t v220 = vandq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v1064, vcvtq_f64_f32(*(float32x2_t *)v230.f32)), (int32x4_t)vcgeq_f64(v1064, vcvt_hight_f64_f32(v230))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v1064, vcvtq_f64_f32(*(float32x2_t *)v229.f32)), (int32x4_t)vcgeq_f64(v1064, vcvt_hight_f64_f32(v229)))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v1064, vcvtq_f64_f32(*(float32x2_t *)v226.f32)), (int32x4_t)vcgeq_f64(v1064, vcvt_hight_f64_f32(v226))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v1064, vcvtq_f64_f32(*(float32x2_t *)v225.f32)), (int32x4_t)vcgeq_f64(v1064, vcvt_hight_f64_f32(v225))))), v220);
              v216 += 8;
              v219 -= 32;
            }
            while (v219);
            uint8x16_t v231 = (uint8x16_t)vcltzq_s8(vshlq_n_s8(vmvnq_s8(vandq_s8(v218, v220)), 7uLL));
            v231.i8[0] = vmaxvq_u8(v231);
            unsigned int v215 = v231.i32[0] ^ 1;
            if (v214 == v213) {
              goto LABEL_364;
            }
            if ((v213 & 0x18) == 0)
            {
LABEL_362:
              int v243 = (float *)(v1129 + 4 * v214);
              int v244 = (float *)(v1164 + 4 * v214);
              uint64_t v245 = v213 - v214;
              do
              {
                float v246 = *v244++;
                float v247 = v246;
                float v248 = *v243++;
                LOBYTE(v215) = (vabds_f32(v247, v248) <= 0.001) & v215;
                --v245;
              }
              while (v245);
              goto LABEL_364;
            }
          }
          else
          {
            uint64_t v214 = 0;
            unsigned int v215 = 1;
          }
          uint64_t v232 = v214;
          uint64_t v214 = v213 & 0xFFFFFFF8;
          int8x8_t v233 = vdup_n_s8(v215);
          long long v234 = (float32x4_t *)(v1164 + 4 * v232);
          BOOL v235 = (float32x4_t *)(v1129 + 4 * v232);
          uint64_t v236 = v232 - v214;
          do
          {
            float32x4_t v237 = *v234;
            float32x4_t v238 = v234[1];
            v234 += 2;
            float32x4_t v239 = *v235;
            float32x4_t v240 = v235[1];
            v235 += 2;
            float32x4_t v241 = vabdq_f32(v238, v240);
            float32x4_t v242 = vabdq_f32(v237, v239);
            int8x8_t v233 = vand_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v1064, vcvtq_f64_f32(*(float32x2_t *)v242.f32)), (int32x4_t)vcgeq_f64(v1064, vcvt_hight_f64_f32(v242))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v1064, vcvtq_f64_f32(*(float32x2_t *)v241.f32)), (int32x4_t)vcgeq_f64(v1064, vcvt_hight_f64_f32(v241))))), v233);
            v236 += 8;
          }
          while (v236);
          LOBYTE(v215) = vmaxv_u8((uint8x8_t)vcltz_s8(vshl_n_s8(vmvn_s8(v233), 7uLL))) ^ 1;
          if (v214 != v213) {
            goto LABEL_362;
          }
LABEL_364:
          if ((v215 & 1) == 0) {
            goto LABEL_342;
          }
          goto LABEL_341;
        case 0x13:
          if ((__p[7].i8[8] & 0x40) == 0)
          {
            long long v266 = v1164;
            unint64_t v267 = (float32x4_t *)v1165;
            unint64_t v268 = v1170;
            __int32 v269 = __p[20].i32[0];
            __int32 v270 = __p[8].i32[0];
            if (!(void)v1164)
            {
              *(_DWORD *)&__src[24] |= 0x200u;
              __int32 v942 = 4 * __p[20].i32[0];
              if (*((void *)&v1164 + 1)) {
                goto LABEL_1357;
              }
              goto LABEL_1304;
            }
            __int32 v271 = 4 * __p[9].i32[0] * __p[20].i32[0];
            if ((unint64_t)v1076 < v1077)
            {
              *v1076 = (float32x4_t *)v1164;
              *((_DWORD *)v1076 + 2) = v271;
              *((unsigned char *)v1076 + 12) = v1069;
              char v272 = v1076 + 3;
              *((_DWORD *)v1076 + 4) = v107;
              *((_DWORD *)v1076 + 5) = v106;
              goto LABEL_1356;
            }
            v955 = v43;
            uint64_t v956 = (char *)v1076 - v43;
            unint64_t v957 = 0xAAAAAAAAAAAAAAABLL * (v956 >> 3) + 1;
            if (v957 > 0xAAAAAAAAAAAAAAALL) {
              sub_19E13D694();
            }
            unint64_t v958 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1077 - (void)v955) >> 3);
            if (2 * v958 > v957) {
              unint64_t v957 = 2 * v958;
            }
            if (v958 >= 0x555555555555555) {
              unint64_t v959 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v959 = v957;
            }
            if (v959 > 0xAAAAAAAAAAAAAAALL) {
              sub_19E13C418();
            }
            v960 = (char *)operator new(24 * v959);
            v961 = &v960[8 * (v956 >> 3)];
            *(void *)v961 = v266;
            char v272 = (float32x4_t **)(v961 + 24);
            v962 = &v960[v956];
            *((_DWORD *)v962 + 2) = v271;
            v962[12] = v1069;
            *((_DWORD *)v962 + 4) = v107;
            *((_DWORD *)v962 + 5) = v106;
            v963 = v1076;
            if (v1076 == (float32x4_t **)v1080)
            {
              uint64_t v43 = &v960[8 * (v956 >> 3)];
              unint64_t v1077 = (unint64_t)&v960[24 * v959];
              if (v1080) {
LABEL_1355:
              }
                operator delete(v1080);
            }
            else
            {
              do
              {
                long long v964 = *(_OWORD *)(v963 - 3);
                uint64_t v43 = v961 - 24;
                *((void *)v961 - 1) = *(v963 - 1);
                *(_OWORD *)(v961 - 24) = v964;
                v963 -= 3;
                v961 -= 24;
              }
              while (v963 != (float32x4_t **)v1080);
              unint64_t v1077 = (unint64_t)&v960[24 * v959];
              if (v1080) {
                goto LABEL_1355;
              }
            }
LABEL_1356:
            v1074 += v271;
            v1076 = v272;
            __int32 v942 = 4 * v269;
            if (*((void *)&v266 + 1))
            {
LABEL_1357:
              int v965 = v942 * v270;
              if ((unint64_t)v1076 < v1077)
              {
                *v1076 = (float32x4_t *)*((void *)&v266 + 1);
                *((_DWORD *)v1076 + 2) = v965;
                *((unsigned char *)v1076 + 12) = v1069;
                v943 = v1076 + 3;
                *((_DWORD *)v1076 + 4) = v107;
                *((_DWORD *)v1076 + 5) = v106;
                goto LABEL_1370;
              }
              unint64_t v966 = 0xAAAAAAAAAAAAAAABLL * (((char *)v1076 - v43) >> 3) + 1;
              v1091 = v43;
              if (v966 > 0xAAAAAAAAAAAAAAALL) {
                sub_19E13D694();
              }
              if (0x5555555555555556 * ((uint64_t)(v1077 - (void)v43) >> 3) > v966) {
                unint64_t v966 = 0x5555555555555556 * ((uint64_t)(v1077 - (void)v43) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1077 - (void)v43) >> 3) >= 0x555555555555555) {
                unint64_t v967 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v967 = v966;
              }
              if (v967 > 0xAAAAAAAAAAAAAAALL) {
                sub_19E13C418();
              }
              v968 = (char *)operator new(24 * v266);
              v969 = &v968[8 * (((char *)v1076 - v43) >> 3)];
              *(void *)v969 = *((void *)&v266 + 1);
              v943 = (float32x4_t **)(v969 + 24);
              v970 = &v968[(char *)v1076 - v43];
              *((_DWORD *)v970 + 2) = v965;
              v970[12] = v1069;
              *((_DWORD *)v970 + 4) = v107;
              *((_DWORD *)v970 + 5) = v106;
              v971 = v1076;
              if (v1076 == (float32x4_t **)v43)
              {
                uint64_t v43 = &v968[8 * (((char *)v1076 - v43) >> 3)];
                unint64_t v1077 = (unint64_t)&v968[24 * v967];
                if (v1091) {
LABEL_1369:
                }
                  operator delete(v1091);
              }
              else
              {
                do
                {
                  long long v972 = *(_OWORD *)(v971 - 3);
                  uint64_t v43 = v969 - 24;
                  *((void *)v969 - 1) = *(v971 - 1);
                  *(_OWORD *)(v969 - 24) = v972;
                  v971 -= 3;
                  v969 -= 24;
                }
                while (v971 != (float32x4_t **)v1091);
                unint64_t v1077 = (unint64_t)&v968[24 * v967];
                if (v1091) {
                  goto LABEL_1369;
                }
              }
LABEL_1370:
              v1074 += v965;
              if ((unint64_t)v943 < v1077) {
                goto LABEL_1371;
              }
              goto LABEL_1305;
            }
LABEL_1304:
            *(_DWORD *)&__src[24] |= 0x400u;
            v943 = v1076;
            if ((unint64_t)v1076 < v1077)
            {
LABEL_1371:
              *v943 = v267;
              *((_DWORD *)v943 + 2) = v942;
              *((unsigned char *)v943 + 12) = v1069;
              v951 = (char *)(v943 + 3);
              *((_DWORD *)v943 + 4) = v107;
              *((_DWORD *)v943 + 5) = v106;
              goto LABEL_1378;
            }
LABEL_1305:
            int64_t v944 = (char *)v943 - v43;
            unint64_t v945 = 0xAAAAAAAAAAAAAAABLL * (((char *)v943 - v43) >> 3);
            unint64_t v946 = v945 + 1;
            v1090 = v43;
            if (v945 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_19E13D694();
            }
            v947 = (char *)v943;
            if (0x5555555555555556 * ((uint64_t)(v1077 - (void)v43) >> 3) > v946) {
              unint64_t v946 = 0x5555555555555556 * ((uint64_t)(v1077 - (void)v43) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1077 - (void)v43) >> 3) >= 0x555555555555555) {
              unint64_t v948 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v948 = v946;
            }
            if (v948 > 0xAAAAAAAAAAAAAAALL) {
              sub_19E13C418();
            }
            v949 = (char *)operator new(24 * v948);
            v950 = &v949[24 * v945];
            *(void *)v950 = v267;
            v951 = v950 + 24;
            v952 = &v949[v944];
            *((_DWORD *)v952 + 2) = v942;
            v952[12] = v1069;
            *((_DWORD *)v952 + 4) = v107;
            *((_DWORD *)v952 + 5) = v106;
            if (v947 == v43)
            {
              uint64_t v43 = v950;
              unint64_t v1077 = (unint64_t)&v949[24 * v948];
              if (!v1090) {
                goto LABEL_1378;
              }
            }
            else
            {
              v953 = v947;
              do
              {
                long long v954 = *(_OWORD *)(v953 - 24);
                uint64_t v43 = v950 - 24;
                *((void *)v950 - 1) = *((void *)v953 - 1);
                *(_OWORD *)(v950 - 24) = v954;
                v953 -= 24;
                v950 -= 24;
              }
              while (v953 != v1090);
              unint64_t v1077 = (unint64_t)&v949[24 * v948];
              if (!v1090)
              {
LABEL_1378:
                if ((unint64_t)v951 < v1077)
                {
                  *(void *)v951 = v268;
                  *((_DWORD *)v951 + 2) = v942;
                  v951[12] = 0;
                  v1076 = (float32x4_t **)(v951 + 24);
                  *((void *)v951 + 2) = 0;
                  goto LABEL_1391;
                }
                unint64_t v973 = 0xAAAAAAAAAAAAAAABLL * ((v951 - v43) >> 3) + 1;
                v1092 = v43;
                if (v973 > 0xAAAAAAAAAAAAAAALL) {
                  sub_19E13D694();
                }
                if (0x5555555555555556 * ((uint64_t)(v1077 - (void)v43) >> 3) > v973) {
                  unint64_t v973 = 0x5555555555555556 * ((uint64_t)(v1077 - (void)v43) >> 3);
                }
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1077 - (void)v43) >> 3) >= 0x555555555555555) {
                  unint64_t v974 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v974 = v973;
                }
                if (v974 > 0xAAAAAAAAAAAAAAALL) {
                  sub_19E13C418();
                }
                v975 = (char *)operator new(24 * v974);
                v976 = &v975[8 * ((v951 - v43) >> 3)];
                *(void *)v976 = v268;
                v977 = (float32x4_t **)(v976 + 24);
                v978 = &v975[v951 - v43];
                *((_DWORD *)v978 + 2) = v942;
                v978[12] = 0;
                *((void *)v978 + 2) = 0;
                if (v951 == v43)
                {
                  uint64_t v43 = &v975[8 * ((v951 - v43) >> 3)];
                  v1076 = (float32x4_t **)(v976 + 24);
                  unint64_t v1077 = (unint64_t)&v975[24 * v974];
                  if (v1092) {
LABEL_1390:
                  }
                    operator delete(v1092);
                }
                else
                {
                  do
                  {
                    long long v979 = *(_OWORD *)(v951 - 24);
                    uint64_t v43 = v976 - 24;
                    *((void *)v976 - 1) = *((void *)v951 - 1);
                    *(_OWORD *)(v976 - 24) = v979;
                    v951 -= 24;
                    v976 -= 24;
                  }
                  while (v951 != v1092);
                  v1076 = v977;
                  unint64_t v1077 = (unint64_t)&v975[24 * v974];
                  if (v1092) {
                    goto LABEL_1390;
                  }
                }
LABEL_1391:
                v1074 += 8 * v269;
                BOOL v174 = (char *)__dst;
                unint64_t v175 = v1146;
                if ((unint64_t)__dst < v1146) {
                  goto LABEL_1301;
                }
                goto LABEL_1187;
              }
            }
            operator delete(v1090);
            goto LABEL_1378;
          }
          *(_DWORD *)&__src[24] |= 0x40u;
          long long v360 = v1164;
          uint64_t v361 = v1170;
          __int32 v362 = __p[20].i32[0];
          __int32 v363 = 4 * __p[20].i32[0];
          __int32 v364 = 4 * __p[20].i32[0] * (__p[9].i32[0] + __p[8].i32[0]);
          if ((unint64_t)v1076 < v1077)
          {
            *v1076 = (float32x4_t *)v1164;
            *((_DWORD *)v1076 + 2) = v364;
            *((unsigned char *)v1076 + 12) = v1069;
            int v365 = (char *)(v1076 + 3);
            *((_DWORD *)v1076 + 4) = v107;
            *((_DWORD *)v1076 + 5) = v106;
            if ((unint64_t)(v1076 + 3) < v1077) {
              goto LABEL_506;
            }
            goto LABEL_1109;
          }
          unint64_t v826 = 0xAAAAAAAAAAAAAAABLL * (((char *)v1076 - v43) >> 3) + 1;
          if (v826 > 0xAAAAAAAAAAAAAAALL) {
            sub_19E13D694();
          }
          if (0x5555555555555556 * ((uint64_t)(v1077 - (void)v43) >> 3) > v826) {
            unint64_t v826 = 0x5555555555555556 * ((uint64_t)(v1077 - (void)v43) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1077 - (void)v43) >> 3) >= 0x555555555555555) {
            unint64_t v827 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v827 = v826;
          }
          if (v827 > 0xAAAAAAAAAAAAAAALL) {
            sub_19E13C418();
          }
          v828 = (char *)operator new(24 * v827);
          v829 = &v828[8 * (((char *)v1076 - v43) >> 3)];
          *(void *)v829 = v360;
          int v365 = v829 + 24;
          v830 = &v828[(char *)v1076 - v43];
          *((_DWORD *)v830 + 2) = v364;
          v830[12] = v1069;
          *((_DWORD *)v830 + 4) = v107;
          *((_DWORD *)v830 + 5) = v106;
          if (v1076 == (float32x4_t **)v43)
          {
            v833 = &v828[8 * (((char *)v1076 - v43) >> 3)];
            unint64_t v1077 = (unint64_t)&v828[24 * v827];
            if (v43) {
LABEL_1107:
            }
              operator delete(v43);
          }
          else
          {
            v831 = (char *)v1076;
            do
            {
              long long v832 = *(_OWORD *)(v831 - 24);
              v833 = v829 - 24;
              *((void *)v829 - 1) = *((void *)v831 - 1);
              *(_OWORD *)(v829 - 24) = v832;
              v831 -= 24;
              v829 -= 24;
            }
            while (v831 != v43);
            unint64_t v1077 = (unint64_t)&v828[24 * v827];
            if (v43) {
              goto LABEL_1107;
            }
          }
          uint64_t v43 = v833;
          if ((unint64_t)v365 < v1077)
          {
LABEL_506:
            *(void *)int v365 = *((void *)&v360 + 1);
            *((_DWORD *)v365 + 2) = v363;
            v365[12] = v1069;
            int v366 = v365 + 24;
            *((_DWORD *)v365 + 4) = v107;
            *((_DWORD *)v365 + 5) = v106;
            if ((unint64_t)(v365 + 24) < v1077)
            {
LABEL_507:
              *(void *)int v366 = v361;
              *((_DWORD *)v366 + 2) = v363;
              v366[12] = 0;
              v1076 = (float32x4_t **)(v366 + 24);
              *((void *)v366 + 2) = 0;
              goto LABEL_1133;
            }
LABEL_1121:
            unint64_t v841 = 0xAAAAAAAAAAAAAAABLL * ((v366 - v43) >> 3) + 1;
            if (v841 > 0xAAAAAAAAAAAAAAALL) {
              sub_19E13D694();
            }
            if (0x5555555555555556 * ((uint64_t)(v1077 - (void)v43) >> 3) > v841) {
              unint64_t v841 = 0x5555555555555556 * ((uint64_t)(v1077 - (void)v43) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1077 - (void)v43) >> 3) >= 0x555555555555555) {
              unint64_t v842 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v842 = v841;
            }
            if (v842 > 0xAAAAAAAAAAAAAAALL) {
              sub_19E13C418();
            }
            v843 = (char *)operator new(24 * v842);
            v844 = &v843[8 * ((v366 - v43) >> 3)];
            *(void *)v844 = v361;
            v1076 = (float32x4_t **)(v844 + 24);
            v845 = &v843[v366 - v43];
            *((_DWORD *)v845 + 2) = v363;
            v845[12] = 0;
            *((void *)v845 + 2) = 0;
            if (v366 == v43)
            {
              v847 = &v843[8 * ((v366 - v43) >> 3)];
              unint64_t v1077 = (unint64_t)&v843[24 * v842];
              if (!v43) {
                goto LABEL_1132;
              }
            }
            else
            {
              do
              {
                long long v846 = *(_OWORD *)(v366 - 24);
                v847 = v844 - 24;
                *((void *)v844 - 1) = *((void *)v366 - 1);
                *(_OWORD *)(v844 - 24) = v846;
                v366 -= 24;
                v844 -= 24;
              }
              while (v366 != v43);
              unint64_t v1077 = (unint64_t)&v843[24 * v842];
              if (!v43) {
                goto LABEL_1132;
              }
            }
            operator delete(v43);
LABEL_1132:
            uint64_t v43 = v847;
LABEL_1133:
            v1074 += 8 * v362 + v364;
            BOOL v174 = (char *)__dst;
            unint64_t v175 = v1146;
            if ((unint64_t)__dst < v1146) {
              goto LABEL_1301;
            }
            goto LABEL_1187;
          }
LABEL_1109:
          unint64_t v834 = 0xAAAAAAAAAAAAAAABLL * ((v365 - v43) >> 3) + 1;
          if (v834 > 0xAAAAAAAAAAAAAAALL) {
            sub_19E13D694();
          }
          if (0x5555555555555556 * ((uint64_t)(v1077 - (void)v43) >> 3) > v834) {
            unint64_t v834 = 0x5555555555555556 * ((uint64_t)(v1077 - (void)v43) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1077 - (void)v43) >> 3) >= 0x555555555555555) {
            unint64_t v835 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v835 = v834;
          }
          if (v835 > 0xAAAAAAAAAAAAAAALL) {
            sub_19E13C418();
          }
          v836 = (char *)operator new(24 * v835);
          v837 = &v836[8 * ((v365 - v43) >> 3)];
          *(void *)v837 = *((void *)&v360 + 1);
          int v366 = v837 + 24;
          v838 = &v836[v365 - v43];
          *((_DWORD *)v838 + 2) = v363;
          v838[12] = v1069;
          *((_DWORD *)v838 + 4) = v107;
          *((_DWORD *)v838 + 5) = v106;
          if (v365 == v43)
          {
            v840 = &v836[8 * ((v365 - v43) >> 3)];
            unint64_t v1077 = (unint64_t)&v836[24 * v835];
            if (v43) {
LABEL_1119:
            }
              operator delete(v43);
          }
          else
          {
            do
            {
              long long v839 = *(_OWORD *)(v365 - 24);
              v840 = v837 - 24;
              *((void *)v837 - 1) = *((void *)v365 - 1);
              *(_OWORD *)(v837 - 24) = v839;
              v365 -= 24;
              v837 -= 24;
            }
            while (v365 != v43);
            unint64_t v1077 = (unint64_t)&v836[24 * v835];
            if (v43) {
              goto LABEL_1119;
            }
          }
          uint64_t v43 = v840;
          if ((unint64_t)v366 < v1077) {
            goto LABEL_507;
          }
          goto LABEL_1121;
        case 0x14:
          long long v259 = v1164;
          uint64_t v260 = v1165;
          size_t v261 = v1170;
          uint64_t v1071 = v1171;
          uint64_t v1068 = v1172;
          __int32 v262 = __p[20].i32[1] * __p[20].i32[0];
          __int32 v263 = __p[20].i32[1] * __p[20].i32[0] * __p[8].i32[0];
          int v264 = 4 * v263;
          if ((unint64_t)v1076 < v1077)
          {
            *v1076 = (float32x4_t *)v1164;
            *((_DWORD *)v1076 + 2) = v264;
            *((unsigned char *)v1076 + 12) = v1069;
            int v265 = (char *)(v1076 + 3);
            *((_DWORD *)v1076 + 4) = v107;
            *((_DWORD *)v1076 + 5) = v106;
            goto LABEL_501;
          }
          size_t v347 = v43;
          uint64_t v348 = (char *)v1076 - v43;
          unint64_t v349 = 0xAAAAAAAAAAAAAAABLL * (v348 >> 3) + 1;
          if (v349 > 0xAAAAAAAAAAAAAAALL) {
            sub_19E13D694();
          }
          unint64_t v350 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1077 - (void)v347) >> 3);
          if (2 * v350 > v349) {
            unint64_t v349 = 2 * v350;
          }
          if (v350 >= 0x555555555555555) {
            unint64_t v351 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v351 = v349;
          }
          if (v351 > 0xAAAAAAAAAAAAAAALL) {
            sub_19E13C418();
          }
          uint64_t v352 = (char *)operator new(24 * v351);
          uint64_t v353 = &v352[8 * (v348 >> 3)];
          *(void *)uint64_t v353 = v259;
          int v265 = v353 + 24;
          size_t v354 = &v352[v348];
          *((_DWORD *)v354 + 2) = v264;
          v354[12] = v1069;
          *((_DWORD *)v354 + 4) = v107;
          *((_DWORD *)v354 + 5) = v106;
          size_t v355 = v1076;
          if (v1076 == (float32x4_t **)v1080)
          {
            uint64_t v43 = &v352[8 * (v348 >> 3)];
            unint64_t v1077 = (unint64_t)&v352[24 * v351];
            if (v1080) {
LABEL_500:
            }
              operator delete(v1080);
          }
          else
          {
            do
            {
              long long v356 = *(_OWORD *)(v355 - 3);
              uint64_t v43 = v353 - 24;
              *((void *)v353 - 1) = *(v355 - 1);
              *(_OWORD *)(v353 - 24) = v356;
              v355 -= 3;
              v353 -= 24;
            }
            while (v355 != (float32x4_t **)v1080);
            unint64_t v1077 = (unint64_t)&v352[24 * v351];
            if (v1080) {
              goto LABEL_500;
            }
          }
LABEL_501:
          v1082 = v43;
          if ((unint64_t)v265 < v1077)
          {
            *(void *)int v265 = *((void *)&v259 + 1);
            *((_DWORD *)v265 + 2) = v264;
            v265[12] = v1069;
            uint64_t v357 = v265 + 24;
            *((_DWORD *)v265 + 4) = v107;
            *((_DWORD *)v265 + 5) = v106;
            if ((unint64_t)(v265 + 24) < v1077)
            {
LABEL_503:
              *(void *)uint64_t v357 = v260;
              *((_DWORD *)v357 + 2) = v264;
              v357[12] = v1069;
              uint64_t v358 = (float32x4_t **)(v357 + 24);
              *((_DWORD *)v357 + 4) = v107;
              *((_DWORD *)v357 + 5) = v106;
              uint64_t v359 = v1082;
              goto LABEL_853;
            }
LABEL_840:
            unint64_t v580 = 0xAAAAAAAAAAAAAAABLL * ((v357 - v1082) >> 3) + 1;
            if (v580 > 0xAAAAAAAAAAAAAAALL) {
              sub_19E13D694();
            }
            if (0x5555555555555556 * ((uint64_t)(v1077 - (void)v1082) >> 3) > v580) {
              unint64_t v580 = 0x5555555555555556 * ((uint64_t)(v1077 - (void)v1082) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1077 - (void)v1082) >> 3) >= 0x555555555555555) {
              unint64_t v581 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v581 = v580;
            }
            if (v581 > 0xAAAAAAAAAAAAAAALL) {
              sub_19E13C418();
            }
            uint64_t v582 = (char *)operator new(24 * v581);
            v583 = &v582[8 * ((v357 - v1082) >> 3)];
            *(void *)v583 = v260;
            uint64_t v358 = (float32x4_t **)(v583 + 24);
            v584 = &v582[v357 - v1082];
            *((_DWORD *)v584 + 2) = v264;
            v584[12] = v1069;
            *((_DWORD *)v584 + 4) = v107;
            *((_DWORD *)v584 + 5) = v106;
            if (v357 == v1082)
            {
              uint64_t v587 = &v582[8 * ((v357 - v1082) >> 3)];
              uint64_t v585 = v1082;
              unint64_t v1077 = (unint64_t)&v582[24 * v581];
              if (!v1082) {
                goto LABEL_852;
              }
            }
            else
            {
              uint64_t v585 = v1082;
              do
              {
                long long v586 = *(_OWORD *)(v357 - 24);
                uint64_t v587 = v583 - 24;
                *((void *)v583 - 1) = *((void *)v357 - 1);
                *(_OWORD *)(v583 - 24) = v586;
                v357 -= 24;
                v583 -= 24;
              }
              while (v357 != v1082);
              unint64_t v1077 = (unint64_t)&v582[24 * v581];
              if (!v1082) {
                goto LABEL_852;
              }
            }
            operator delete(v585);
LABEL_852:
            uint64_t v359 = v587;
LABEL_853:
            int v588 = 4 * v262;
            v1086 = v359;
            if ((unint64_t)v358 < v1077)
            {
              *uint64_t v358 = v261;
              *((_DWORD *)v358 + 2) = v588;
              *((unsigned char *)v358 + 12) = 0;
              v589 = (char *)(v358 + 3);
              v358[2] = 0;
              if ((unint64_t)(v358 + 3) < v1077) {
                goto LABEL_855;
              }
              goto LABEL_870;
            }
            int64_t v591 = (char *)v358 - v359;
            unint64_t v592 = 0xAAAAAAAAAAAAAAABLL * (((char *)v358 - v359) >> 3);
            unint64_t v593 = v592 + 1;
            if (v592 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_19E13D694();
            }
            unint64_t v594 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1077 - (void)v359) >> 3);
            if (2 * v594 > v593) {
              unint64_t v593 = 2 * v594;
            }
            if (v594 >= 0x555555555555555) {
              unint64_t v595 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v595 = v593;
            }
            if (v595 > 0xAAAAAAAAAAAAAAALL) {
              sub_19E13C418();
            }
            v596 = (char *)operator new(24 * v595);
            size_t v597 = &v596[24 * v592];
            *(void *)size_t v597 = v261;
            v589 = v597 + 24;
            v598 = &v596[v591];
            *((_DWORD *)v598 + 2) = v588;
            v598[12] = 0;
            *((void *)v598 + 2) = 0;
            if (v358 == (float32x4_t **)v1086)
            {
              uint64_t v601 = &v596[24 * v592];
              uint64_t v599 = v1086;
              unint64_t v1077 = (unint64_t)&v596[24 * v595];
              if (v1086) {
LABEL_868:
              }
                operator delete(v599);
            }
            else
            {
              uint64_t v599 = v1086;
              do
              {
                long long v600 = *(_OWORD *)(v358 - 3);
                uint64_t v601 = v597 - 24;
                *((void *)v597 - 1) = *(v358 - 1);
                *(_OWORD *)(v597 - 24) = v600;
                v358 -= 3;
                v597 -= 24;
              }
              while (v358 != (float32x4_t **)v1086);
              unint64_t v1077 = (unint64_t)&v596[24 * v595];
              if (v1086) {
                goto LABEL_868;
              }
            }
            v1086 = v601;
            if ((unint64_t)v589 < v1077)
            {
LABEL_855:
              *(void *)v589 = v1071;
              *((_DWORD *)v589 + 2) = v588;
              v589[12] = 0;
              v590 = v589 + 24;
              *((void *)v589 + 2) = 0;
              uint64_t v43 = v1086;
              if ((unint64_t)v590 < v1077)
              {
LABEL_856:
                *(void *)v590 = v1068;
                *((_DWORD *)v590 + 2) = v588;
                v590[12] = 0;
                v1076 = (float32x4_t **)(v590 + 24);
                *((void *)v590 + 2) = 0;
                goto LABEL_894;
              }
LABEL_883:
              unint64_t v610 = 0xAAAAAAAAAAAAAAABLL * ((v590 - v43) >> 3) + 1;
              v1087 = v43;
              if (v610 > 0xAAAAAAAAAAAAAAALL) {
                sub_19E13D694();
              }
              if (0x5555555555555556 * ((uint64_t)(v1077 - (void)v43) >> 3) > v610) {
                unint64_t v610 = 0x5555555555555556 * ((uint64_t)(v1077 - (void)v43) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1077 - (void)v43) >> 3) >= 0x555555555555555) {
                unint64_t v611 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v611 = v610;
              }
              if (v611 > 0xAAAAAAAAAAAAAAALL) {
                sub_19E13C418();
              }
              uint64_t v612 = (char *)operator new(24 * v611);
              uint64_t v613 = &v612[8 * ((v590 - v43) >> 3)];
              *(void *)uint64_t v613 = v1068;
              uint64_t v614 = (float32x4_t **)(v613 + 24);
              v615 = &v612[v590 - v43];
              *((_DWORD *)v615 + 2) = v588;
              v615[12] = 0;
              *((void *)v615 + 2) = 0;
              if (v590 == v43)
              {
                uint64_t v43 = &v612[8 * ((v590 - v43) >> 3)];
                v1076 = (float32x4_t **)(v613 + 24);
                unint64_t v1077 = (unint64_t)&v612[24 * v611];
                if (v1087) {
LABEL_893:
                }
                  operator delete(v1087);
              }
              else
              {
                do
                {
                  long long v616 = *(_OWORD *)(v590 - 24);
                  uint64_t v43 = v613 - 24;
                  *((void *)v613 - 1) = *((void *)v590 - 1);
                  *(_OWORD *)(v613 - 24) = v616;
                  v590 -= 24;
                  v613 -= 24;
                }
                while (v590 != v1087);
                v1076 = v614;
                unint64_t v1077 = (unint64_t)&v612[24 * v611];
                if (v1087) {
                  goto LABEL_893;
                }
              }
LABEL_894:
              v1074 += v264 + v588 + 8 * (v262 + v263);
              BOOL v174 = (char *)__dst;
              unint64_t v175 = v1146;
              if ((unint64_t)__dst < v1146) {
                goto LABEL_1301;
              }
              goto LABEL_1187;
            }
LABEL_870:
            unint64_t v602 = 0xAAAAAAAAAAAAAAABLL * ((v589 - v1086) >> 3) + 1;
            if (v602 > 0xAAAAAAAAAAAAAAALL) {
              sub_19E13D694();
            }
            if (0x5555555555555556 * ((uint64_t)(v1077 - (void)v1086) >> 3) > v602) {
              unint64_t v602 = 0x5555555555555556 * ((uint64_t)(v1077 - (void)v1086) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1077 - (void)v1086) >> 3) >= 0x555555555555555) {
              unint64_t v603 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v603 = v602;
            }
            if (v603 > 0xAAAAAAAAAAAAAAALL) {
              sub_19E13C418();
            }
            v604 = (char *)operator new(24 * v603);
            uint64_t v605 = &v604[8 * ((v589 - v1086) >> 3)];
            *(void *)uint64_t v605 = v1071;
            v590 = v605 + 24;
            long long v606 = &v604[v589 - v1086];
            *((_DWORD *)v606 + 2) = v588;
            v606[12] = 0;
            *((void *)v606 + 2) = 0;
            if (v589 == v1086)
            {
              v609 = &v604[8 * ((v589 - v1086) >> 3)];
              uint64_t v607 = v1086;
              unint64_t v1077 = (unint64_t)&v604[24 * v603];
              if (v1086) {
LABEL_881:
              }
                operator delete(v607);
            }
            else
            {
              uint64_t v607 = v1086;
              do
              {
                long long v608 = *(_OWORD *)(v589 - 24);
                v609 = v605 - 24;
                *((void *)v605 - 1) = *((void *)v589 - 1);
                *(_OWORD *)(v605 - 24) = v608;
                v589 -= 24;
                v605 -= 24;
              }
              while (v589 != v1086);
              unint64_t v1077 = (unint64_t)&v604[24 * v603];
              if (v1086) {
                goto LABEL_881;
              }
            }
            uint64_t v43 = v609;
            if ((unint64_t)v590 < v1077) {
              goto LABEL_856;
            }
            goto LABEL_883;
          }
          int64_t v568 = v265 - v43;
          float v569 = v43;
          unint64_t v570 = 0xAAAAAAAAAAAAAAABLL * ((v265 - v43) >> 3);
          unint64_t v571 = v570 + 1;
          if (v570 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_19E13D694();
          }
          unint64_t v572 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1077 - (void)v569) >> 3);
          if (2 * v572 > v571) {
            unint64_t v571 = 2 * v572;
          }
          if (v572 >= 0x555555555555555) {
            unint64_t v573 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v573 = v571;
          }
          if (v573 > 0xAAAAAAAAAAAAAAALL) {
            sub_19E13C418();
          }
          uint64_t v574 = (char *)operator new(24 * v259);
          v575 = &v574[24 * v570];
          *(void *)v575 = *((void *)&v259 + 1);
          uint64_t v357 = v575 + 24;
          v576 = &v574[v568];
          *((_DWORD *)v576 + 2) = v264;
          v576[12] = v1069;
          *((_DWORD *)v576 + 4) = v107;
          *((_DWORD *)v576 + 5) = v106;
          if (v265 == v1082)
          {
            uint64_t v579 = v575;
            size_t v577 = v1082;
            unint64_t v1077 = (unint64_t)&v574[24 * v573];
            if (v1082) {
LABEL_838:
            }
              operator delete(v577);
          }
          else
          {
            size_t v577 = v1082;
            do
            {
              long long v578 = *(_OWORD *)(v265 - 24);
              uint64_t v579 = v575 - 24;
              *((void *)v575 - 1) = *((void *)v265 - 1);
              *(_OWORD *)(v575 - 24) = v578;
              v265 -= 24;
              v575 -= 24;
            }
            while (v265 != v1082);
            unint64_t v1077 = (unint64_t)&v574[24 * v573];
            if (v1082) {
              goto LABEL_838;
            }
          }
          v1082 = v579;
          if ((unint64_t)v357 < v1077) {
            goto LABEL_503;
          }
          goto LABEL_840;
        case 0x15:
          __int32 v122 = __p[8].i32[0];
          __int32 v123 = 4 * __p[8].i32[0];
          uint64_t v124 = v1164;
          if ((unint64_t)v1076 < v1077)
          {
            *v1076 = (float32x4_t *)v1164;
            *((_DWORD *)v1076 + 2) = v123;
            *((unsigned char *)v1076 + 12) = v1069;
            unint64_t v125 = (char *)(v1076 + 3);
            *((_DWORD *)v1076 + 4) = v107;
            *((_DWORD *)v1076 + 5) = v106;
            uint64_t v126 = v1170;
            if ((unint64_t)(v1076 + 3) < v1077)
            {
LABEL_229:
              *(void *)unint64_t v125 = v126;
              *((_DWORD *)v125 + 2) = v123;
              v125[12] = v1069;
              v1076 = (float32x4_t **)(v125 + 24);
              *((_DWORD *)v125 + 4) = v107;
              *((_DWORD *)v125 + 5) = v106;
              goto LABEL_414;
            }
LABEL_402:
            unint64_t v286 = 0xAAAAAAAAAAAAAAABLL * ((v125 - v43) >> 3) + 1;
            if (v286 > 0xAAAAAAAAAAAAAAALL) {
              sub_19E13D694();
            }
            if (0x5555555555555556 * ((uint64_t)(v1077 - (void)v43) >> 3) > v286) {
              unint64_t v286 = 0x5555555555555556 * ((uint64_t)(v1077 - (void)v43) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1077 - (void)v43) >> 3) >= 0x555555555555555) {
              unint64_t v287 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v287 = v286;
            }
            if (v287 > 0xAAAAAAAAAAAAAAALL) {
              sub_19E13C418();
            }
            int v288 = (char *)operator new(24 * v287);
            int v289 = &v288[8 * ((v125 - v43) >> 3)];
            *(void *)int v289 = v126;
            v1076 = (float32x4_t **)(v289 + 24);
            int v290 = &v288[v125 - v43];
            *((_DWORD *)v290 + 2) = v123;
            v290[12] = v1069;
            *((_DWORD *)v290 + 4) = v107;
            *((_DWORD *)v290 + 5) = v106;
            if (v125 == v43)
            {
              size_t v292 = &v288[8 * ((v125 - v43) >> 3)];
              unint64_t v1077 = (unint64_t)&v288[24 * v287];
              if (!v43) {
                goto LABEL_413;
              }
            }
            else
            {
              do
              {
                long long v291 = *(_OWORD *)(v125 - 24);
                size_t v292 = v289 - 24;
                *((void *)v289 - 1) = *((void *)v125 - 1);
                *(_OWORD *)(v289 - 24) = v291;
                v125 -= 24;
                v289 -= 24;
              }
              while (v125 != v43);
              unint64_t v1077 = (unint64_t)&v288[24 * v287];
              if (!v43) {
                goto LABEL_413;
              }
            }
            operator delete(v43);
LABEL_413:
            uint64_t v43 = v292;
LABEL_414:
            v1074 += 8 * v122;
            *(_DWORD *)&__src[196] |= 0x10001u;
            BOOL v174 = (char *)__dst;
            unint64_t v175 = v1146;
            if ((unint64_t)__dst < v1146) {
              goto LABEL_1301;
            }
            goto LABEL_1187;
          }
          unint64_t v278 = 0xAAAAAAAAAAAAAAABLL * (((char *)v1076 - v43) >> 3) + 1;
          if (v278 > 0xAAAAAAAAAAAAAAALL) {
            sub_19E13D694();
          }
          if (0x5555555555555556 * ((uint64_t)(v1077 - (void)v43) >> 3) > v278) {
            unint64_t v278 = 0x5555555555555556 * ((uint64_t)(v1077 - (void)v43) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1077 - (void)v43) >> 3) >= 0x555555555555555) {
            unint64_t v279 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v279 = v278;
          }
          if (v279 > 0xAAAAAAAAAAAAAAALL) {
            sub_19E13C418();
          }
          uint64_t v280 = (char *)operator new(24 * v279);
          uint64_t v281 = &v280[8 * (((char *)v1076 - v43) >> 3)];
          *(void *)uint64_t v281 = v124;
          unint64_t v125 = v281 + 24;
          int v282 = &v280[(char *)v1076 - v43];
          *((_DWORD *)v282 + 2) = v123;
          v282[12] = v1069;
          *((_DWORD *)v282 + 4) = v107;
          *((_DWORD *)v282 + 5) = v106;
          if (v1076 == (float32x4_t **)v43)
          {
            int v285 = &v280[8 * (((char *)v1076 - v43) >> 3)];
            unint64_t v1077 = (unint64_t)&v280[24 * v279];
            if (v43) {
LABEL_400:
            }
              operator delete(v43);
          }
          else
          {
            int v283 = (char *)v1076;
            do
            {
              long long v284 = *(_OWORD *)(v283 - 24);
              int v285 = v281 - 24;
              *((void *)v281 - 1) = *((void *)v283 - 1);
              *(_OWORD *)(v281 - 24) = v284;
              v283 -= 24;
              v281 -= 24;
            }
            while (v283 != v43);
            unint64_t v1077 = (unint64_t)&v280[24 * v279];
            if (v43) {
              goto LABEL_400;
            }
          }
          uint64_t v43 = v285;
          uint64_t v126 = v1170;
          if ((unint64_t)v125 < v1077) {
            goto LABEL_229;
          }
          goto LABEL_402;
        case 0x1ALL:
          if (__p[22].i32[0] == 1)
          {
            *(_DWORD *)&__src[138] = 1;
            *(_DWORD *)&__src[196] |= 7u;
            long long v110 = __dst;
            uint64_t v111 = v1144;
            v1102[0] = v1136;
            BOOL v112 = sub_19E287AAC((uint64_t)v1138, (uint64_t)v1136, (uint64_t)&unk_19E351150, (long long **)v1102);
LABEL_288:
            *((_DWORD *)v112 + 10) = -1030792151 * ((unint64_t)(v110 - v111) >> 4);
            BOOL v174 = (char *)__dst;
            unint64_t v175 = v1146;
            if ((unint64_t)__dst < v1146) {
              goto LABEL_1301;
            }
            goto LABEL_1187;
          }
          v1102[0] = 0;
          v1102[1] = 0;
          *(void *)&v1103[0] = 0;
          v1133[1] = 0;
          v1133[0] = 0;
          v1134 = 0;
          uint64_t v1072 = __p[20].u32[0];
          if (__p[20].i32[0] >= 1)
          {
            BOOL v293 = 0;
            uint64_t v294 = 0;
            while (1)
            {
              float v296 = *(float *)(v1169 + 4 * v294);
              int v297 = (int)(v1168->f32[v294] + 0.5);
              uint64_t v298 = (char *)v1102[1];
              if (v1102[1] < (void *)*(void *)&v1103[0])
              {
                uint64_t v299 = v105;
                *(_DWORD *)v1102[1] = v297;
                BOOL v300 = v298 + 4;
                goto LABEL_442;
              }
              size_t v301 = (char *)v1102[0];
              int64_t v302 = (char *)v1102[1] - (char *)v1102[0];
              int64_t v303 = ((char *)v1102[1] - (char *)v1102[0]) >> 2;
              unint64_t v304 = v303 + 1;
              if ((unint64_t)(v303 + 1) >> 62) {
                sub_19E13D694();
              }
              int64_t v305 = *(void *)&v1103[0] - (unint64_t)v1102[0];
              if ((uint64_t)(*(void *)&v1103[0] - (unint64_t)v1102[0]) >> 1 > v304) {
                unint64_t v304 = v305 >> 1;
              }
              unint64_t v306 = (unint64_t)v305 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v304;
              if (v306)
              {
                if (v306 >> 62) {
                  sub_19E13C418();
                }
                int v307 = operator new(4 * v306);
                uint64_t v299 = v105;
                int v308 = (int *)&v307[4 * v303];
                *int v308 = v297;
                BOOL v300 = v308 + 1;
                if (v298 == v301)
                {
LABEL_434:
                  uint64_t v43 = v1080;
                  goto LABEL_440;
                }
              }
              else
              {
                uint64_t v299 = v105;
                int v307 = 0;
                int v308 = (int *)(4 * v303);
                *(_DWORD *)(4 * v303) = v297;
                BOOL v300 = (void *)(4 * v303 + 4);
                if (v298 == v301) {
                  goto LABEL_434;
                }
              }
              unint64_t v309 = v298 - 4 - v301;
              if (v309 < 0x2C) {
                break;
              }
              unint64_t v310 = v298 - &v307[v302];
              uint64_t v43 = v1080;
              if (v310 < 0x20) {
                goto LABEL_439;
              }
              uint64_t v311 = (v309 >> 2) + 1;
              uint64_t v312 = 4 * (v311 & 0x7FFFFFFFFFFFFFF8);
              uint64_t v313 = &v298[-v312];
              int v308 = (int *)((char *)v308 - v312);
              uint64_t v314 = &v307[4 * v303 - 16];
              int v315 = v298 - 16;
              uint64_t v316 = v311 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v317 = *(_OWORD *)v315;
                *(v314 - 1) = *((_OWORD *)v315 - 1);
                *uint64_t v314 = v317;
                v314 -= 2;
                v315 -= 32;
                v316 -= 8;
              }
              while (v316);
              uint64_t v298 = v313;
              if (v311 != (v311 & 0x7FFFFFFFFFFFFFF8)) {
                goto LABEL_439;
              }
LABEL_440:
              v1102[0] = v308;
              v1102[1] = v300;
              *(void *)&v1103[0] = &v307[4 * v306];
              if (v301)
              {
                operator delete(v301);
                BOOL v293 = (char *)v1133[1];
              }
LABEL_442:
              v1102[1] = v300;
              int v319 = (int)(v296 + 0.5);
              if (v293 >= v1134)
              {
                size_t v320 = (char *)v1133[0];
                int64_t v321 = v293 - (char *)v1133[0];
                uint64_t v322 = (v293 - (char *)v1133[0]) >> 2;
                unint64_t v323 = v322 + 1;
                if ((unint64_t)(v322 + 1) >> 62) {
                  sub_19E13D694();
                }
                uint64_t v324 = v1134 - (char *)v1133[0];
                if ((v1134 - (char *)v1133[0]) >> 1 > v323) {
                  unint64_t v323 = v324 >> 1;
                }
                if ((unint64_t)v324 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v325 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v325 = v323;
                }
                if (v325)
                {
                  if (v325 >> 62) {
                    sub_19E13C418();
                  }
                  size_t v326 = operator new(4 * v325);
                  uint64_t v327 = (int *)&v326[4 * v322];
                  *uint64_t v327 = v319;
                  uint64_t v295 = v327 + 1;
                  if (v293 == v320) {
                    goto LABEL_457;
                  }
LABEL_454:
                  unint64_t v328 = v293 - 4 - v320;
                  if (v328 < 0xBC)
                  {
                    uint64_t v329 = v293;
                    goto LABEL_456;
                  }
                  if (&v326[v321 - 4 - (v328 & 0xFFFFFFFFFFFFFFFCLL)] > &v326[v321 - 4])
                  {
                    uint64_t v329 = v293;
                    goto LABEL_456;
                  }
                  if (&v293[-(v328 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v293 - 4)
                  {
                    uint64_t v329 = v293;
                    goto LABEL_456;
                  }
                  if ((unint64_t)(v293 - v326 - v321) < 0x20)
                  {
                    uint64_t v329 = v293;
                    goto LABEL_456;
                  }
                  uint64_t v331 = (v328 >> 2) + 1;
                  uint64_t v332 = 4 * (v331 & 0x7FFFFFFFFFFFFFF8);
                  uint64_t v329 = &v293[-v332];
                  uint64_t v327 = (int *)((char *)v327 - v332);
                  uint64_t v333 = &v326[4 * v322 - 16];
                  BOOL v334 = v293 - 16;
                  uint64_t v335 = v331 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    long long v336 = *(_OWORD *)v334;
                    *(v333 - 1) = *((_OWORD *)v334 - 1);
                    *uint64_t v333 = v336;
                    v333 -= 2;
                    v334 -= 32;
                    v335 -= 8;
                  }
                  while (v335);
                  if (v331 != (v331 & 0x7FFFFFFFFFFFFFF8))
                  {
                    do
                    {
LABEL_456:
                      int v330 = *((_DWORD *)v329 - 1);
                      v329 -= 4;
                      *--uint64_t v327 = v330;
                    }
                    while (v329 != v320);
                  }
                }
                else
                {
                  size_t v326 = 0;
                  uint64_t v327 = (int *)(4 * v322);
                  *(_DWORD *)(4 * v322) = v319;
                  uint64_t v295 = (void *)(4 * v322 + 4);
                  if (v293 != v320) {
                    goto LABEL_454;
                  }
                }
LABEL_457:
                v1133[0] = v327;
                v1133[1] = v295;
                v1134 = &v326[4 * v325];
                if (v320) {
                  operator delete(v320);
                }
                goto LABEL_419;
              }
              *(_DWORD *)BOOL v293 = v319;
              uint64_t v295 = v293 + 4;
LABEL_419:
              v1133[1] = v295;
              ++v294;
              BOOL v293 = (char *)v295;
              uint64_t v105 = v299;
              if (v294 == v1072) {
                goto LABEL_896;
              }
            }
            uint64_t v43 = v1080;
            do
            {
LABEL_439:
              int v318 = *((_DWORD *)v298 - 1);
              v298 -= 4;
              *--int v308 = v318;
            }
            while (v298 != v301);
            goto LABEL_440;
          }
LABEL_896:
          int v617 = 4 * v1072;
          v618 = v1168;
          if ((unint64_t)v1076 < v1077)
          {
            *v1076 = v1168;
            *((_DWORD *)v1076 + 2) = v617;
            *((unsigned char *)v1076 + 12) = 0;
            uint64_t v619 = (char *)(v1076 + 3);
            v1076[2] = 0;
            uint64_t v620 = v1169;
            if ((unint64_t)(v1076 + 3) < v1077)
            {
LABEL_898:
              *(void *)uint64_t v619 = v620;
              *((_DWORD *)v619 + 2) = v617;
              v619[12] = 0;
              uint64_t v621 = v619 + 24;
              *((void *)v619 + 2) = 0;
              goto LABEL_1231;
            }
LABEL_1219:
            unint64_t v893 = 0xAAAAAAAAAAAAAAABLL * ((v619 - v43) >> 3) + 1;
            if (v893 > 0xAAAAAAAAAAAAAAALL) {
              sub_19E13D694();
            }
            if (0x5555555555555556 * ((uint64_t)(v1077 - (void)v43) >> 3) > v893) {
              unint64_t v893 = 0x5555555555555556 * ((uint64_t)(v1077 - (void)v43) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1077 - (void)v43) >> 3) >= 0x555555555555555) {
              unint64_t v894 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v894 = v893;
            }
            if (v894 > 0xAAAAAAAAAAAAAAALL) {
              sub_19E13C418();
            }
            v895 = (char *)operator new(24 * v894);
            v896 = &v895[8 * ((v619 - v43) >> 3)];
            *(void *)v896 = v620;
            uint64_t v621 = v896 + 24;
            v897 = &v895[v619 - v43];
            *((_DWORD *)v897 + 2) = v617;
            v897[12] = 0;
            *((void *)v897 + 2) = 0;
            if (v619 == v43)
            {
              v899 = &v895[8 * ((v619 - v43) >> 3)];
              unint64_t v1077 = (unint64_t)&v895[24 * v894];
              if (!v43) {
                goto LABEL_1230;
              }
            }
            else
            {
              do
              {
                long long v898 = *(_OWORD *)(v619 - 24);
                v899 = v896 - 24;
                *((void *)v896 - 1) = *((void *)v619 - 1);
                *(_OWORD *)(v896 - 24) = v898;
                v619 -= 24;
                v896 -= 24;
              }
              while (v619 != v43);
              unint64_t v1077 = (unint64_t)&v895[24 * v894];
              if (!v43) {
                goto LABEL_1230;
              }
            }
            operator delete(v43);
LABEL_1230:
            uint64_t v43 = v899;
LABEL_1231:
            char v900 = 2 * (v105 != 2);
            int v901 = (*(_DWORD *)v1133[0] * *(_DWORD *)v1102[0]) << v900;
            uint64_t v902 = v1164;
            if ((unint64_t)v621 < v1077)
            {
              *(void *)uint64_t v621 = v1164;
              *((_DWORD *)v621 + 2) = v901;
              v621[12] = v1069;
              v1076 = (float32x4_t **)(v621 + 24);
              *((_DWORD *)v621 + 4) = v107;
              *((_DWORD *)v621 + 5) = v106;
LABEL_1245:
              *(_DWORD *)&__src[196] |= 1u;
              if (v901 <= 0) {
                int v910 = -(-v901 & 3);
              }
              else {
                int v910 = v901 & 3;
              }
              if (v910) {
                int v911 = v901 - v910 + 8;
              }
              else {
                int v911 = v901;
              }
              v1074 += 8 * v1072 + v911;
              if ((int)v1072 < 2)
              {
LABEL_1296:
                if (v1133[0])
                {
                  v1133[1] = v1133[0];
                  operator delete(v1133[0]);
                }
                if (v1102[0])
                {
                  v1102[1] = v1102[0];
                  operator delete(v1102[0]);
                }
                goto LABEL_1300;
              }
              uint64_t v912 = 1;
              while (1)
              {
                int v915 = (*((_DWORD *)v1133[0] + v912) * *((_DWORD *)v1102[0] + v912)) << v900;
                v916 = &__p[0].i8[8 * v912];
                v917 = (float32x4_t *)*((void *)v916 + 56);
                if ((unint64_t)v1076 < v1077)
                {
                  *v1076 = v917;
                  *((_DWORD *)v1076 + 2) = v915;
                  *((unsigned char *)v1076 + 12) = v1069;
                  v918 = (char *)(v1076 + 3);
                  *((_DWORD *)v1076 + 4) = v107;
                  *((_DWORD *)v1076 + 5) = v106;
                  goto LABEL_1274;
                }
                unint64_t v919 = 0xAAAAAAAAAAAAAAABLL * (((char *)v1076 - v43) >> 3) + 1;
                v1088 = v43;
                if (v919 > 0xAAAAAAAAAAAAAAALL) {
                  sub_19E13D694();
                }
                if (0x5555555555555556 * ((uint64_t)(v1077 - (void)v43) >> 3) > v919) {
                  unint64_t v919 = 0x5555555555555556 * ((uint64_t)(v1077 - (void)v43) >> 3);
                }
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1077 - (void)v43) >> 3) >= 0x555555555555555) {
                  unint64_t v920 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v920 = v919;
                }
                if (v920 > 0xAAAAAAAAAAAAAAALL) {
                  sub_19E13C418();
                }
                v921 = (char *)operator new(24 * v920);
                v922 = v1076;
                v923 = &v921[8 * (((char *)v1076 - v43) >> 3)];
                *(void *)v923 = v917;
                v918 = v923 + 24;
                v924 = &v921[(char *)v1076 - v43];
                *((_DWORD *)v924 + 2) = v915;
                v924[12] = v1069;
                *((_DWORD *)v924 + 4) = v107;
                *((_DWORD *)v924 + 5) = v106;
                if (v1076 == (float32x4_t **)v43)
                {
                  uint64_t v43 = &v921[8 * (((char *)v1076 - v43) >> 3)];
                  unint64_t v1077 = (unint64_t)&v921[24 * v920];
                  if (v1088) {
                    goto LABEL_1273;
                  }
                }
                else
                {
                  do
                  {
                    long long v925 = *(_OWORD *)(v922 - 3);
                    uint64_t v43 = v923 - 24;
                    *((void *)v923 - 1) = *(v922 - 1);
                    *(_OWORD *)(v923 - 24) = v925;
                    v922 -= 3;
                    v923 -= 24;
                  }
                  while (v922 != (float32x4_t **)v1088);
                  unint64_t v1077 = (unint64_t)&v921[24 * v920];
                  if (v1088) {
LABEL_1273:
                  }
                    operator delete(v1088);
                }
LABEL_1274:
                if (v915 <= 0) {
                  int v926 = -(-v915 & 3);
                }
                else {
                  int v926 = v915 & 3;
                }
                if (v926) {
                  int v927 = v915 - v926 + 8;
                }
                else {
                  int v927 = v915;
                }
                int v928 = (*(_DWORD *)v1102[0] * *((_DWORD *)v1102[0] + v912)) << v900;
                uint64_t v929 = *((void *)v916 + 71);
                if ((unint64_t)v918 < v1077)
                {
                  *(void *)v918 = v929;
                  *((_DWORD *)v918 + 2) = v928;
                  v918[12] = v1069;
                  v1076 = (float32x4_t **)(v918 + 24);
                  *((_DWORD *)v918 + 4) = v107;
                  *((_DWORD *)v918 + 5) = v106;
                }
                else
                {
                  int64_t v930 = v918 - v43;
                  v931 = v43;
                  unint64_t v932 = 0xAAAAAAAAAAAAAAABLL * ((v918 - v43) >> 3);
                  unint64_t v933 = v932 + 1;
                  v1089 = v931;
                  if (v932 + 1 > 0xAAAAAAAAAAAAAAALL) {
                    sub_19E13D694();
                  }
                  unint64_t v934 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1077 - (void)v931) >> 3);
                  if (2 * v934 > v933) {
                    unint64_t v933 = 2 * v934;
                  }
                  if (v934 >= 0x555555555555555) {
                    unint64_t v935 = 0xAAAAAAAAAAAAAAALL;
                  }
                  else {
                    unint64_t v935 = v933;
                  }
                  if (v935 > 0xAAAAAAAAAAAAAAALL) {
                    sub_19E13C418();
                  }
                  v936 = (char *)operator new(24 * v935);
                  v937 = &v936[24 * v932];
                  *(void *)v937 = v929;
                  v938 = (float32x4_t **)(v937 + 24);
                  v939 = &v936[v930];
                  *((_DWORD *)v939 + 2) = v928;
                  v939[12] = v1069;
                  *((_DWORD *)v939 + 4) = v107;
                  *((_DWORD *)v939 + 5) = v106;
                  if (v918 != v1089)
                  {
                    do
                    {
                      long long v940 = *(_OWORD *)(v918 - 24);
                      uint64_t v43 = v937 - 24;
                      *((void *)v937 - 1) = *((void *)v918 - 1);
                      *(_OWORD *)(v937 - 24) = v940;
                      v918 -= 24;
                      v937 -= 24;
                    }
                    while (v918 != v1089);
                    v1076 = v938;
                    unint64_t v1077 = (unint64_t)&v936[24 * v935];
                    if (!v1089) {
                      goto LABEL_1254;
                    }
LABEL_1295:
                    operator delete(v1089);
                    goto LABEL_1254;
                  }
                  uint64_t v43 = &v936[24 * v932];
                  v1076 = (float32x4_t **)(v937 + 24);
                  unint64_t v1077 = (unint64_t)&v936[24 * v935];
                  if (v1089) {
                    goto LABEL_1295;
                  }
                }
LABEL_1254:
                if (v928 <= 0) {
                  int v913 = -(-v928 & 3);
                }
                else {
                  int v913 = v928 & 3;
                }
                if (v913) {
                  int v914 = v928 - v913 + 8;
                }
                else {
                  int v914 = v928;
                }
                v1074 += v927 + v914;
                if (++v912 == v1072) {
                  goto LABEL_1296;
                }
              }
            }
            unint64_t v903 = 0xAAAAAAAAAAAAAAABLL * ((v621 - v43) >> 3) + 1;
            if (v903 > 0xAAAAAAAAAAAAAAALL) {
              sub_19E13D694();
            }
            if (0x5555555555555556 * ((uint64_t)(v1077 - (void)v43) >> 3) > v903) {
              unint64_t v903 = 0x5555555555555556 * ((uint64_t)(v1077 - (void)v43) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1077 - (void)v43) >> 3) >= 0x555555555555555) {
              unint64_t v904 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v904 = v903;
            }
            if (v904 > 0xAAAAAAAAAAAAAAALL) {
              sub_19E13C418();
            }
            v905 = (char *)operator new(24 * v904);
            v906 = &v905[8 * ((v621 - v43) >> 3)];
            *(void *)v906 = v902;
            v1076 = (float32x4_t **)(v906 + 24);
            v907 = &v905[v621 - v43];
            *((_DWORD *)v907 + 2) = v901;
            v907[12] = v1069;
            *((_DWORD *)v907 + 4) = v107;
            *((_DWORD *)v907 + 5) = v106;
            if (v621 == v43)
            {
              v909 = &v905[8 * ((v621 - v43) >> 3)];
              unint64_t v1077 = (unint64_t)&v905[24 * v904];
              if (!v43) {
                goto LABEL_1244;
              }
            }
            else
            {
              do
              {
                long long v908 = *(_OWORD *)(v621 - 24);
                v909 = v906 - 24;
                *((void *)v906 - 1) = *((void *)v621 - 1);
                *(_OWORD *)(v906 - 24) = v908;
                v621 -= 24;
                v906 -= 24;
              }
              while (v621 != v43);
              unint64_t v1077 = (unint64_t)&v905[24 * v904];
              if (!v43) {
                goto LABEL_1244;
              }
            }
            operator delete(v43);
LABEL_1244:
            uint64_t v43 = v909;
            goto LABEL_1245;
          }
          unint64_t v885 = 0xAAAAAAAAAAAAAAABLL * (((char *)v1076 - v43) >> 3) + 1;
          if (v885 > 0xAAAAAAAAAAAAAAALL) {
            sub_19E13D694();
          }
          if (0x5555555555555556 * ((uint64_t)(v1077 - (void)v43) >> 3) > v885) {
            unint64_t v885 = 0x5555555555555556 * ((uint64_t)(v1077 - (void)v43) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1077 - (void)v43) >> 3) >= 0x555555555555555) {
            unint64_t v886 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v886 = v885;
          }
          if (v886 > 0xAAAAAAAAAAAAAAALL) {
            sub_19E13C418();
          }
          v887 = (char *)operator new(24 * v886);
          v888 = &v887[8 * (((char *)v1076 - v43) >> 3)];
          *(void *)v888 = v618;
          uint64_t v619 = v888 + 24;
          v889 = &v887[(char *)v1076 - v43];
          *((_DWORD *)v889 + 2) = v617;
          v889[12] = 0;
          *((void *)v889 + 2) = 0;
          if (v1076 == (float32x4_t **)v43)
          {
            v892 = &v887[8 * (((char *)v1076 - v43) >> 3)];
            unint64_t v1077 = (unint64_t)&v887[24 * v886];
            if (v43) {
LABEL_1217:
            }
              operator delete(v43);
          }
          else
          {
            v890 = (char *)v1076;
            do
            {
              long long v891 = *(_OWORD *)(v890 - 24);
              v892 = v888 - 24;
              *((void *)v888 - 1) = *((void *)v890 - 1);
              *(_OWORD *)(v888 - 24) = v891;
              v890 -= 24;
              v888 -= 24;
            }
            while (v890 != v43);
            unint64_t v1077 = (unint64_t)&v887[24 * v886];
            if (v43) {
              goto LABEL_1217;
            }
          }
          uint64_t v43 = v892;
          uint64_t v620 = v1169;
          if ((unint64_t)v619 < v1077) {
            goto LABEL_898;
          }
          goto LABEL_1219;
        case 0x1BLL:
          int v1070 = v105;
          if (__p[7].i8[9]) {
            *(_DWORD *)&__src[24] |= 0x100u;
          }
          uint64_t v127 = 0;
          uint64_t v128 = 0;
          uint64_t v129 = __p[20].u32[0];
          v1099 = 0;
          v1100 = 0;
          v1101 = 0;
          v1096 = 0;
          v1097 = 0;
          v1098 = 0;
          break;
        default:
          goto LABEL_1300;
      }
      break;
    }
    while (2)
    {
      float v131 = *(float *)(v1169 + 4 * v128);
      int v132 = (int)(v1168->f32[v128] + 0.5);
      uint64_t v133 = v1100;
      if (v1100 < v1101)
      {
        *(_DWORD *)v1100 = v132;
        uint64_t v134 = (uint64_t)(v133 + 4);
        goto LABEL_257;
      }
      int64_t v135 = (char *)v1099;
      int64_t v136 = v1100 - (unsigned char *)v1099;
      uint64_t v137 = (v1100 - (unsigned char *)v1099) >> 2;
      unint64_t v138 = v137 + 1;
      if ((unint64_t)(v137 + 1) >> 62) {
        sub_19E13D694();
      }
      uint64_t v139 = v1101 - (unsigned char *)v1099;
      if ((v1101 - (unsigned char *)v1099) >> 1 > v138) {
        unint64_t v138 = v139 >> 1;
      }
      if ((unint64_t)v139 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v140 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v140 = v138;
      }
      if (v140)
      {
        if (v140 >> 62) {
          sub_19E13C418();
        }
        uint64_t v141 = (char *)operator new(4 * v140);
        unint64_t v142 = (int *)&v141[4 * v137];
        *unint64_t v142 = v132;
        uint64_t v134 = (uint64_t)(v142 + 1);
        if (v133 != v135)
        {
LABEL_246:
          unint64_t v143 = v133 - 4 - v135;
          if (v143 < 0x2C)
          {
            uint64_t v43 = v1080;
            goto LABEL_254;
          }
          unint64_t v144 = v133 - &v141[v136];
          uint64_t v43 = v1080;
          if (v144 < 0x20) {
            goto LABEL_1671;
          }
          uint64_t v145 = (v143 >> 2) + 1;
          uint64_t v146 = 4 * (v145 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v147 = &v133[-v146];
          unint64_t v142 = (int *)((char *)v142 - v146);
          uint64_t v148 = &v141[4 * v137 - 16];
          uint64_t v149 = v133 - 16;
          uint64_t v150 = v145 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v151 = *(_OWORD *)v149;
            *((_OWORD *)v148 - 1) = *((_OWORD *)v149 - 1);
            *(_OWORD *)uint64_t v148 = v151;
            v148 -= 32;
            v149 -= 32;
            v150 -= 8;
          }
          while (v150);
          uint64_t v133 = v147;
          if (v145 != (v145 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_1671:
            do
            {
LABEL_254:
              int v152 = *((_DWORD *)v133 - 1);
              v133 -= 4;
              *--unint64_t v142 = v152;
            }
            while (v133 != v135);
          }
LABEL_255:
          v1099 = v142;
          v1100 = (char *)v134;
          v1101 = &v141[4 * v140];
          if (v135)
          {
            operator delete(v135);
            uint64_t v127 = v1097;
          }
LABEL_257:
          v1100 = (char *)v134;
          int v153 = (int)(v131 + 0.5);
          if (v127 < v1098)
          {
            *(_DWORD *)uint64_t v127 = v153;
            uint64_t v130 = (uint64_t)(v127 + 4);
          }
          else
          {
            unint64_t v154 = (char *)v1096;
            int64_t v155 = v127 - (unsigned char *)v1096;
            uint64_t v156 = (v127 - (unsigned char *)v1096) >> 2;
            unint64_t v157 = v156 + 1;
            if ((unint64_t)(v156 + 1) >> 62) {
              sub_19E13D694();
            }
            uint64_t v158 = v1098 - (unsigned char *)v1096;
            if ((v1098 - (unsigned char *)v1096) >> 1 > v157) {
              unint64_t v157 = v158 >> 1;
            }
            if ((unint64_t)v158 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v159 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v159 = v157;
            }
            if (v159)
            {
              if (v159 >> 62) {
                sub_19E13C418();
              }
              uint64_t v160 = operator new(4 * v159);
              int v161 = (int *)&v160[4 * v156];
              *int v161 = v153;
              uint64_t v130 = (uint64_t)(v161 + 1);
              if (v127 == v154) {
                goto LABEL_272;
              }
            }
            else
            {
              uint64_t v160 = 0;
              int v161 = (int *)(4 * v156);
              *(_DWORD *)(4 * v156) = v153;
              uint64_t v130 = 4 * v156 + 4;
              if (v127 == v154) {
                goto LABEL_272;
              }
            }
            unint64_t v162 = v127 - 4 - v154;
            if (v162 >= 0xBC)
            {
              if (&v160[v155 - 4 - (v162 & 0xFFFFFFFFFFFFFFFCLL)] > &v160[v155 - 4])
              {
                int v163 = v127;
              }
              else if (&v127[-(v162 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v127 - 4)
              {
                int v163 = v127;
              }
              else if ((unint64_t)(v127 - v160 - v155) >= 0x20)
              {
                uint64_t v165 = (v162 >> 2) + 1;
                uint64_t v166 = 4 * (v165 & 0x7FFFFFFFFFFFFFF8);
                int v163 = &v127[-v166];
                int v161 = (int *)((char *)v161 - v166);
                long long v167 = &v160[4 * v156 - 16];
                uint64_t v168 = v127 - 16;
                uint64_t v169 = v165 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  long long v170 = *(_OWORD *)v168;
                  *(v167 - 1) = *((_OWORD *)v168 - 1);
                  _OWORD *v167 = v170;
                  v167 -= 2;
                  v168 -= 32;
                  v169 -= 8;
                }
                while (v169);
                if (v165 == (v165 & 0x7FFFFFFFFFFFFFF8)) {
                  goto LABEL_272;
                }
              }
              else
              {
                int v163 = v127;
              }
            }
            else
            {
              int v163 = v127;
            }
            do
            {
              int v164 = *((_DWORD *)v163 - 1);
              v163 -= 4;
              *--int v161 = v164;
            }
            while (v163 != v154);
LABEL_272:
            v1096 = v161;
            v1097 = (char *)v130;
            v1098 = &v160[4 * v159];
            if (v154) {
              operator delete(v154);
            }
          }
          v1097 = (char *)v130;
          ++v128;
          uint64_t v127 = (char *)v130;
          if (v128 != v129) {
            continue;
          }
          *(_DWORD *)v1096 += v129 - 1;
          int v273 = 4 * v129;
          v274 = v1168;
          if ((unint64_t)v1076 < v1077)
          {
            *v1076 = v1168;
            *((_DWORD *)v1076 + 2) = v273;
            *((unsigned char *)v1076 + 12) = 0;
            int v275 = (char *)(v1076 + 3);
            v1076[2] = 0;
            uint64_t v276 = v1169;
            if ((unint64_t)(v1076 + 3) < v1077) {
              goto LABEL_384;
            }
LABEL_912:
            unint64_t v630 = 0xAAAAAAAAAAAAAAABLL * ((v275 - v43) >> 3) + 1;
            if (v630 > 0xAAAAAAAAAAAAAAALL) {
              sub_19E13D694();
            }
            if (0x5555555555555556 * ((uint64_t)(v1077 - (void)v43) >> 3) > v630) {
              unint64_t v630 = 0x5555555555555556 * ((uint64_t)(v1077 - (void)v43) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1077 - (void)v43) >> 3) >= 0x555555555555555) {
              unint64_t v631 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v631 = v630;
            }
            if (v631 > 0xAAAAAAAAAAAAAAALL) {
              sub_19E13C418();
            }
            uint64_t v632 = (char *)operator new(24 * v631);
            uint64_t v633 = &v632[8 * ((v275 - v43) >> 3)];
            *(void *)uint64_t v633 = v276;
            int v277 = v633 + 24;
            v634 = &v632[v275 - v43];
            *((_DWORD *)v634 + 2) = v273;
            v634[12] = 0;
            *((void *)v634 + 2) = 0;
            if (v275 == v43)
            {
              v636 = &v632[8 * ((v275 - v43) >> 3)];
              unint64_t v1077 = (unint64_t)&v632[24 * v631];
              if (v43) {
                goto LABEL_922;
              }
            }
            else
            {
              do
              {
                long long v635 = *(_OWORD *)(v275 - 24);
                v636 = v633 - 24;
                *((void *)v633 - 1) = *((void *)v275 - 1);
                *(_OWORD *)(v633 - 24) = v635;
                v275 -= 24;
                v633 -= 24;
              }
              while (v275 != v43);
              unint64_t v1077 = (unint64_t)&v632[24 * v631];
              if (v43) {
LABEL_922:
              }
                operator delete(v43);
            }
            uint64_t v43 = v636;
LABEL_924:
            char v637 = 2 * (v1070 != 2);
            int v638 = (*(_DWORD *)v1096 * *(_DWORD *)v1099) << v637;
            uint64_t v639 = v1164;
            if ((unint64_t)v277 < v1077)
            {
              *(void *)int v277 = v1164;
              *((_DWORD *)v277 + 2) = v638;
              v277[12] = v1069;
              v1076 = (float32x4_t **)(v277 + 24);
              *((_DWORD *)v277 + 4) = v107;
              *((_DWORD *)v277 + 5) = v106;
              goto LABEL_938;
            }
            unint64_t v640 = 0xAAAAAAAAAAAAAAABLL * ((v277 - v43) >> 3) + 1;
            if (v640 > 0xAAAAAAAAAAAAAAALL) {
              sub_19E13D694();
            }
            if (0x5555555555555556 * ((uint64_t)(v1077 - (void)v43) >> 3) > v640) {
              unint64_t v640 = 0x5555555555555556 * ((uint64_t)(v1077 - (void)v43) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1077 - (void)v43) >> 3) >= 0x555555555555555) {
              unint64_t v641 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v641 = v640;
            }
            if (v641 > 0xAAAAAAAAAAAAAAALL) {
              sub_19E13C418();
            }
            v642 = (char *)operator new(24 * v641);
            v643 = &v642[8 * ((v277 - v43) >> 3)];
            *(void *)v643 = v639;
            v1076 = (float32x4_t **)(v643 + 24);
            v644 = &v642[v277 - v43];
            *((_DWORD *)v644 + 2) = v638;
            v644[12] = v1069;
            *((_DWORD *)v644 + 4) = v107;
            *((_DWORD *)v644 + 5) = v106;
            if (v277 == v43)
            {
              v646 = &v642[8 * ((v277 - v43) >> 3)];
              unint64_t v1077 = (unint64_t)&v642[24 * v641];
              if (v43) {
                goto LABEL_936;
              }
            }
            else
            {
              do
              {
                long long v645 = *(_OWORD *)(v277 - 24);
                v646 = v643 - 24;
                *((void *)v643 - 1) = *((void *)v277 - 1);
                *(_OWORD *)(v643 - 24) = v645;
                v277 -= 24;
                v643 -= 24;
              }
              while (v277 != v43);
              unint64_t v1077 = (unint64_t)&v642[24 * v641];
              if (v43) {
LABEL_936:
              }
                operator delete(v43);
            }
            uint64_t v43 = v646;
LABEL_938:
            *(_DWORD *)&__src[196] |= 1u;
            if (v638 <= 0) {
              int v647 = -(-v638 & 3);
            }
            else {
              int v647 = v638 & 3;
            }
            if (v647) {
              int v648 = v638 - v647 + 8;
            }
            else {
              int v648 = v638;
            }
            v1074 += 8 * v129 + v648;
            if (v129 >= 2)
            {
              uint64_t v649 = 1;
              while (1)
              {
                int v652 = (*((_DWORD *)v1096 + v649) * *((_DWORD *)v1099 + v649)) << v637;
                v653 = &__p[0].i8[8 * v649];
                v654 = (float32x4_t *)*((void *)v653 + 56);
                if ((unint64_t)v1076 < v1077)
                {
                  *v1076 = v654;
                  *((_DWORD *)v1076 + 2) = v652;
                  *((unsigned char *)v1076 + 12) = v1069;
                  v655 = (char *)(v1076 + 3);
                  *((_DWORD *)v1076 + 4) = v107;
                  *((_DWORD *)v1076 + 5) = v106;
                  goto LABEL_968;
                }
                unint64_t v656 = 0xAAAAAAAAAAAAAAABLL * (((char *)v1076 - v43) >> 3) + 1;
                if (v656 > 0xAAAAAAAAAAAAAAALL) {
                  sub_19E13D694();
                }
                if (0x5555555555555556 * ((uint64_t)(v1077 - (void)v43) >> 3) > v656) {
                  unint64_t v656 = 0x5555555555555556 * ((uint64_t)(v1077 - (void)v43) >> 3);
                }
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1077 - (void)v43) >> 3) >= 0x555555555555555) {
                  unint64_t v657 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v657 = v656;
                }
                if (v657 > 0xAAAAAAAAAAAAAAALL) {
                  sub_19E13C418();
                }
                v658 = (char *)operator new(24 * v657);
                v659 = v1076;
                v660 = &v658[8 * (((char *)v1076 - v43) >> 3)];
                *(void *)v660 = v654;
                v655 = v660 + 24;
                v661 = &v658[(char *)v1076 - v43];
                *((_DWORD *)v661 + 2) = v652;
                v661[12] = v1069;
                *((_DWORD *)v661 + 4) = v107;
                *((_DWORD *)v661 + 5) = v106;
                v662 = v43;
                if (v1076 != (float32x4_t **)v43) {
                  break;
                }
                uint64_t v43 = &v658[8 * (((char *)v1076 - v43) >> 3)];
                char v637 = 2 * (v1070 != 2);
                unint64_t v1077 = (unint64_t)&v658[24 * v657];
                if (v662) {
                  goto LABEL_967;
                }
LABEL_968:
                if (v652 <= 0) {
                  int v664 = -(-v652 & 3);
                }
                else {
                  int v664 = v652 & 3;
                }
                if (v664) {
                  int v665 = v652 - v664 + 8;
                }
                else {
                  int v665 = v652;
                }
                int v666 = (*(_DWORD *)v1099 * *((_DWORD *)v1099 + v649)) << v637;
                uint64_t v667 = *((void *)v653 + 71);
                if ((unint64_t)v655 < v1077)
                {
                  *(void *)v655 = v667;
                  *((_DWORD *)v655 + 2) = v666;
                  v655[12] = v1069;
                  v1076 = (float32x4_t **)(v655 + 24);
                  *((_DWORD *)v655 + 4) = v107;
                  *((_DWORD *)v655 + 5) = v106;
                }
                else
                {
                  int64_t v668 = v655 - v43;
                  v669 = v43;
                  unint64_t v670 = 0xAAAAAAAAAAAAAAABLL * ((v655 - v43) >> 3);
                  unint64_t v671 = v670 + 1;
                  if (v670 + 1 > 0xAAAAAAAAAAAAAAALL) {
                    sub_19E13D694();
                  }
                  v672 = v669;
                  unint64_t v673 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1077 - (void)v669) >> 3);
                  if (2 * v673 > v671) {
                    unint64_t v671 = 2 * v673;
                  }
                  if (v673 >= 0x555555555555555) {
                    unint64_t v674 = 0xAAAAAAAAAAAAAAALL;
                  }
                  else {
                    unint64_t v674 = v671;
                  }
                  if (v674 > 0xAAAAAAAAAAAAAAALL) {
                    sub_19E13C418();
                  }
                  v675 = (char *)operator new(24 * v674);
                  v676 = &v675[24 * v670];
                  *(void *)v676 = v667;
                  v677 = (float32x4_t **)(v676 + 24);
                  v678 = &v675[v668];
                  *((_DWORD *)v678 + 2) = v666;
                  v678[12] = v1069;
                  *((_DWORD *)v678 + 4) = v107;
                  *((_DWORD *)v678 + 5) = v106;
                  v679 = v672;
                  if (v655 == v672)
                  {
                    uint64_t v43 = &v675[24 * v670];
                    char v637 = 2 * (v1070 != 2);
                    v1076 = (float32x4_t **)(v676 + 24);
                    unint64_t v1077 = (unint64_t)&v675[24 * v674];
                    if (v679) {
                      goto LABEL_990;
                    }
                  }
                  else
                  {
                    char v637 = 2 * (v1070 != 2);
                    do
                    {
                      long long v680 = *(_OWORD *)(v655 - 24);
                      uint64_t v43 = v676 - 24;
                      *((void *)v676 - 1) = *((void *)v655 - 1);
                      *(_OWORD *)(v676 - 24) = v680;
                      v655 -= 24;
                      v676 -= 24;
                    }
                    while (v655 != v679);
                    v1076 = v677;
                    unint64_t v1077 = (unint64_t)&v675[24 * v674];
                    if (v679) {
LABEL_990:
                    }
                      operator delete(v679);
                  }
                }
                if (v666 <= 0) {
                  int v650 = -(-v666 & 3);
                }
                else {
                  int v650 = v666 & 3;
                }
                if (v650) {
                  int v651 = v666 - v650 + 8;
                }
                else {
                  int v651 = v666;
                }
                v1074 += v665 + v651;
                if (++v649 == v129) {
                  goto LABEL_991;
                }
              }
              char v637 = 2 * (v1070 != 2);
              do
              {
                long long v663 = *(_OWORD *)(v659 - 3);
                uint64_t v43 = v660 - 24;
                *((void *)v660 - 1) = *(v659 - 1);
                *(_OWORD *)(v660 - 24) = v663;
                v659 -= 3;
                v660 -= 24;
              }
              while (v659 != (float32x4_t **)v662);
              unint64_t v1077 = (unint64_t)&v658[24 * v657];
              if (!v662) {
                goto LABEL_968;
              }
LABEL_967:
              operator delete(v662);
              goto LABEL_968;
            }
LABEL_991:
            if (__p[22].i32[0] != 1
              || (*(_DWORD *)&__src[138] = 1, *(_DWORD *)&__src[196] |= 7u, (v681 = (char *)v1139[0]) == 0))
            {
LABEL_993:
              if (v1096)
              {
                v1097 = (char *)v1096;
                operator delete(v1096);
              }
              if (!v1099)
              {
LABEL_1300:
                BOOL v174 = (char *)__dst;
                unint64_t v175 = v1146;
                if ((unint64_t)__dst >= v1146) {
                  goto LABEL_1187;
                }
                goto LABEL_1301;
              }
              v1100 = (char *)v1099;
              operator delete(v1099);
              BOOL v174 = (char *)__dst;
              unint64_t v175 = v1146;
              if ((unint64_t)__dst < v1146) {
                goto LABEL_1301;
              }
LABEL_1187:
              v876 = (char *)v1144;
              unint64_t v877 = 0x8F5C28F5C28F5C29 * ((v174 - (unsigned char *)v1144) >> 4);
              unint64_t v878 = v877 + 1;
              if (v877 + 1 > 0xA3D70A3D70A3D7) {
                sub_19E13D694();
              }
              unint64_t v879 = 0x8F5C28F5C28F5C29 * ((uint64_t)(v175 - (void)v1144) >> 4);
              if (2 * v879 > v878) {
                unint64_t v878 = 2 * v879;
              }
              if (v879 >= 0x51EB851EB851EBLL) {
                unint64_t v880 = 0xA3D70A3D70A3D7;
              }
              else {
                unint64_t v880 = v878;
              }
              if (v880)
              {
                if (v880 > 0xA3D70A3D70A3D7) {
                  sub_19E13C418();
                }
                v881 = (char *)operator new(400 * v880);
              }
              else
              {
                v881 = 0;
              }
              v882 = &v881[400 * v877];
              memcpy(v882, __src, 0x190uLL);
              v883 = v882;
              if (v174 == v876)
              {
                uint64_t v44 = (uint64_t)a3;
              }
              else
              {
                uint64_t v44 = (uint64_t)a3;
                do
                {
                  v174 -= 400;
                  v883 -= 400;
                  memcpy(v883, v174, 0x190uLL);
                }
                while (v174 != v876);
                BOOL v174 = v876;
              }
              v1144 = v883;
              long long __dst = v882 + 400;
              unint64_t v1146 = (unint64_t)&v881[400 * v880];
              if (v174) {
                operator delete(v174);
              }
              long long __dst = v882 + 400;
              v884 = v1058;
              if (SHIBYTE(v1137) < 0) {
                goto LABEL_1302;
              }
              goto LABEL_85;
            }
            while (2)
            {
              if (v681[39] < 0)
              {
                sub_19E13C2D0(v1133, *((void **)v681 + 2), *((void *)v681 + 3));
              }
              else
              {
                *(_OWORD *)v1133 = *((_OWORD *)v681 + 1);
                v1134 = (char *)*((void *)v681 + 4);
              }
              int v1135 = *((_DWORD *)v681 + 10);
              long long v1131 = 0u;
              long long v1132 = 0u;
              long long v1129 = 0u;
              long long v1130 = 0u;
              long long v1127 = 0u;
              long long v1128 = 0u;
              long long v1125 = 0u;
              long long v1126 = 0u;
              long long v1123 = 0u;
              long long v1124 = 0u;
              long long v1121 = 0u;
              long long v1122 = 0u;
              long long v1119 = 0u;
              long long v1120 = 0u;
              long long v1117 = 0u;
              long long v1118 = 0u;
              long long v1115 = 0u;
              long long v1116 = 0u;
              long long v1113 = 0u;
              long long v1114 = 0u;
              long long v1111 = 0u;
              long long v1112 = 0u;
              long long v1109 = 0u;
              long long v1110 = 0u;
              long long v1107 = 0u;
              long long v1108 = 0u;
              long long v1105 = 0u;
              long long v1106 = 0u;
              long long v1104 = 0u;
              *(_OWORD *)v1102 = 0u;
              memset(v1103, 0, sizeof(v1103));
              sub_19E30AD68((uint64_t)a3, (uint64_t)v1133);
              v682 = v1096;
              *(_DWORD *)v1096 -= v129 - 1;
              if (v1070 == 2)
              {
                if ((int)v129 < 1) {
                  goto LABEL_1091;
                }
                uint64_t v683 = 0;
                unsigned int v684 = 1;
                while (2)
                {
                  v686 = &__p[0].i8[8 * v683];
                  v687 = &v1102[v683];
                  int v688 = *((_DWORD *)v1099 + v683);
                  uint64_t v689 = (v682[v683] * v688);
                  if ((int)v689 >= 1)
                  {
                    v690 = (int8x16_t *)*((void *)v686 + 56);
                    v691 = (int8x16_t *)v687[56];
                    if (v689 < 8)
                    {
                      uint64_t v692 = 0;
                      LOBYTE(v693) = v684;
                      goto LABEL_1023;
                    }
                    if (v689 >= 0x20)
                    {
                      uint64_t v692 = v689 & 0x7FFFFFE0;
                      v694 = v690 + 1;
                      int8x16_t v695 = vdupq_n_s8(v684);
                      v696 = v691 + 1;
                      uint64_t v697 = v689 & 0xFFFFFFE0;
                      int8x16_t v698 = v695;
                      int8x16_t v699 = v695;
                      do
                      {
                        int8x16_t v698 = vandq_s8(vceqq_s8(v694[-1], v696[-1]), v698);
                        int8x16_t v699 = vandq_s8(vceqq_s8(*v694, *v696), v699);
                        v694 += 2;
                        v696 += 2;
                        v697 -= 32;
                      }
                      while (v697);
                      uint8x16_t v700 = (uint8x16_t)vcltzq_s8(vshlq_n_s8(veorq_s8(vbslq_s8(vcltzq_s8(vshlq_n_s8(veorq_s8(v698, v695), 7uLL)), v698, v699), v695), 7uLL));
                      v700.i8[0] = vmaxvq_u8(v700);
                      unsigned int v693 = (v700.i32[0] ^ 1) & v684;
                      if (v692 != v689)
                      {
                        if (((LOBYTE(v682[v683]) * (_BYTE)v688) & 0x18) == 0) {
                          goto LABEL_1023;
                        }
                        goto LABEL_1020;
                      }
                      v684 &= v700.i32[0] ^ 1;
                    }
                    else
                    {
                      uint64_t v692 = 0;
                      unsigned int v693 = v684;
LABEL_1020:
                      uint64_t v701 = v692;
                      uint64_t v692 = v689 & 0xFFFFFFF8;
                      int8x8_t v702 = vdup_n_s8(v693);
                      v703 = (int8x8_t *)&v690->i8[v701];
                      v704 = (int8x8_t *)&v691->i8[v701];
                      uint64_t v705 = v701 - v692;
                      do
                      {
                        int8x8_t v706 = *v703++;
                        int8x8_t v707 = v706;
                        int8x8_t v708 = *v704++;
                        int8x8_t v702 = vand_s8(vceq_s8(v707, v708), v702);
                        v705 += 8;
                      }
                      while (v705);
                      uint8x8_t v709 = (uint8x8_t)vcltz_s8(vshl_n_s8(veor_s8(v702, vdup_n_s8(v684)), 7uLL));
                      v709.i8[0] = vmaxv_u8(v709);
                      LOBYTE(v693) = (v709.i8[0] ^ 1) & v684;
                      v684 &= v709.i32[0] ^ 1;
                      if (v692 != v689)
                      {
LABEL_1023:
                        v710 = &v691->u8[v692];
                        v711 = &v690->u8[v692];
                        uint64_t v712 = v689 - v692;
                        LOBYTE(v684) = v693;
                        do
                        {
                          int v714 = *v711++;
                          int v713 = v714;
                          int v715 = *v710++;
                          unsigned int v684 = (v713 == v715) & v684;
                          --v712;
                        }
                        while (v712);
                      }
                    }
                  }
                  if (v683)
                  {
                    uint64_t v716 = (*(_DWORD *)v1099 * v688);
                    if ((int)v716 >= 1)
                    {
                      v717 = (int8x16_t *)*((void *)v686 + 71);
                      v718 = (int8x16_t *)v687[71];
                      if (v716 < 8)
                      {
                        uint64_t v719 = 0;
                        LOBYTE(v720) = v684;
                        goto LABEL_1038;
                      }
                      if (v716 >= 0x20)
                      {
                        uint64_t v719 = v716 & 0x7FFFFFE0;
                        v721 = v717 + 1;
                        int8x16_t v722 = vdupq_n_s8(v684);
                        v723 = v718 + 1;
                        uint64_t v724 = v716 & 0xFFFFFFE0;
                        int8x16_t v725 = v722;
                        int8x16_t v726 = v722;
                        do
                        {
                          int8x16_t v725 = vandq_s8(vceqq_s8(v721[-1], v723[-1]), v725);
                          int8x16_t v726 = vandq_s8(vceqq_s8(*v721, *v723), v726);
                          v721 += 2;
                          v723 += 2;
                          v724 -= 32;
                        }
                        while (v724);
                        uint8x16_t v727 = (uint8x16_t)vcltzq_s8(vshlq_n_s8(veorq_s8(vbslq_s8(vcltzq_s8(vshlq_n_s8(veorq_s8(v725, v722), 7uLL)), v725, v726), v722), 7uLL));
                        v727.i8[0] = vmaxvq_u8(v727);
                        unsigned int v720 = (v727.i32[0] ^ 1) & v684;
                        if (v719 != v716)
                        {
                          if ((v716 & 0x18) == 0) {
                            goto LABEL_1038;
                          }
                          goto LABEL_1035;
                        }
                        v684 &= v727.i32[0] ^ 1;
                      }
                      else
                      {
                        uint64_t v719 = 0;
                        unsigned int v720 = v684;
LABEL_1035:
                        uint64_t v728 = v719;
                        uint64_t v719 = v716 & 0xFFFFFFF8;
                        int8x8_t v729 = vdup_n_s8(v720);
                        v730 = (int8x8_t *)&v717->i8[v728];
                        v731 = (int8x8_t *)&v718->i8[v728];
                        uint64_t v732 = v728 - v719;
                        do
                        {
                          int8x8_t v733 = *v730++;
                          int8x8_t v734 = v733;
                          int8x8_t v735 = *v731++;
                          int8x8_t v729 = vand_s8(vceq_s8(v734, v735), v729);
                          v732 += 8;
                        }
                        while (v732);
                        uint8x8_t v736 = (uint8x8_t)vcltz_s8(vshl_n_s8(veor_s8(v729, vdup_n_s8(v684)), 7uLL));
                        v736.i8[0] = vmaxv_u8(v736);
                        LOBYTE(v720) = (v736.i8[0] ^ 1) & v684;
                        v684 &= v736.i32[0] ^ 1;
                        if (v719 != v716)
                        {
LABEL_1038:
                          v737 = &v718->u8[v719];
                          v738 = &v717->u8[v719];
                          uint64_t v739 = v716 - v719;
                          LOBYTE(v684) = v720;
                          do
                          {
                            int v741 = *v738++;
                            int v740 = v741;
                            int v742 = *v737++;
                            unsigned int v684 = (v740 == v742) & v684;
                            --v739;
                          }
                          while (v739);
                        }
                      }
                    }
                  }
                  if (++v683 == v129) {
                    goto LABEL_1090;
                  }
                  continue;
                }
              }
              if ((int)v129 < 1) {
                goto LABEL_1091;
              }
              uint64_t v685 = 0;
              unsigned int v684 = 1;
LABEL_1043:
              v743 = &__p[0].i8[8 * v685];
              v744 = &v1102[v685];
              int v745 = *((_DWORD *)v1099 + v685);
              uint64_t v746 = (v682[v685] * v745);
              if ((int)v746 >= 1)
              {
                v747 = (float32x4_t *)*((void *)v743 + 56);
                v748 = (float32x4_t *)v744[56];
                if (v746 >= 8)
                {
                  if (v746 >= 0x20)
                  {
                    uint64_t v749 = v746 & 0x7FFFFFE0;
                    v751 = v747 + 4;
                    int8x16_t v752 = vdupq_n_s8(v684);
                    v753 = v748 + 4;
                    uint64_t v754 = v746 & 0xFFFFFFE0;
                    int8x16_t v755 = v752;
                    int8x16_t v756 = v752;
                    do
                    {
                      float32x4_t v757 = v753[2];
                      float32x4_t v758 = vabdq_f32(v751[-1], v753[-1]);
                      float32x4_t v759 = vabdq_f32(v751[-2], v753[-2]);
                      float32x4_t v760 = vabdq_f32(v751[-3], v753[-3]);
                      float32x4_t v761 = vabdq_f32(v751[-4], v753[-4]);
                      float32x4_t v762 = vabdq_f32(v751[3], v753[3]);
                      float32x4_t v763 = *v753;
                      float32x4_t v764 = v753[1];
                      v753 += 8;
                      float32x4_t v765 = vabdq_f32(v751[2], v757);
                      float32x4_t v766 = vabdq_f32(v751[1], v764);
                      float32x4_t v767 = vabdq_f32(*v751, v763);
                      int8x16_t v755 = vbicq_s8(v755, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(vcvtq_f64_f32(*(float32x2_t *)v761.f32), v1064), (int32x4_t)vcgtq_f64(vcvt_hight_f64_f32(v761), v1064)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(vcvtq_f64_f32(*(float32x2_t *)v760.f32), v1064), (int32x4_t)vcgtq_f64(vcvt_hight_f64_f32(v760), v1064))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(vcvtq_f64_f32(*(float32x2_t *)v759.f32), v1064), (int32x4_t)vcgtq_f64(vcvt_hight_f64_f32(v759), v1064)),
                                              (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(vcvtq_f64_f32(*(float32x2_t *)v758.f32), v1064), (int32x4_t)vcgtq_f64(vcvt_hight_f64_f32(v758), v1064)))));
                      int8x16_t v756 = vbicq_s8(v756, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(vcvtq_f64_f32(*(float32x2_t *)v767.f32), v1064), (int32x4_t)vcgtq_f64(vcvt_hight_f64_f32(v767), v1064)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(vcvtq_f64_f32(*(float32x2_t *)v766.f32), v1064), (int32x4_t)vcgtq_f64(vcvt_hight_f64_f32(v766), v1064))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(vcvtq_f64_f32(*(float32x2_t *)v765.f32), v1064), (int32x4_t)vcgtq_f64(vcvt_hight_f64_f32(v765), v1064)),
                                              (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(vcvtq_f64_f32(*(float32x2_t *)v762.f32), v1064), (int32x4_t)vcgtq_f64(vcvt_hight_f64_f32(v762), v1064)))));
                      v751 += 8;
                      v754 -= 32;
                    }
                    while (v754);
                    if (vmaxvq_u8((uint8x16_t)vornq_s8(vmvnq_s8(vceqq_s8(v755, v752)), vceqq_s8(v756, v752)))) {
                      unsigned int v750 = 0;
                    }
                    else {
                      unsigned int v750 = v684;
                    }
                    if (v749 == v746)
                    {
                      unsigned int v684 = v750;
                      goto LABEL_1066;
                    }
                    if (((LOBYTE(v682[v685]) * (_BYTE)v745) & 0x18) == 0) {
                      goto LABEL_1062;
                    }
                  }
                  else
                  {
                    uint64_t v749 = 0;
                    unsigned int v750 = v684;
                  }
                  uint64_t v768 = v749;
                  uint64_t v749 = v746 & 0xFFFFFFF8;
                  int8x8_t v769 = vdup_n_s8(v750);
                  v770 = (float32x4_t *)((char *)v747 + 4 * v768);
                  v771 = (float32x4_t *)((char *)v748 + 4 * v768);
                  uint64_t v772 = v768 - v749;
                  do
                  {
                    float32x4_t v773 = *v770;
                    float32x4_t v774 = v770[1];
                    v770 += 2;
                    float32x4_t v775 = *v771;
                    float32x4_t v776 = v771[1];
                    v771 += 2;
                    float32x4_t v777 = vabdq_f32(v774, v776);
                    float32x4_t v778 = vabdq_f32(v773, v775);
                    int8x8_t v769 = vbic_s8(v769, vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(vcvtq_f64_f32(*(float32x2_t *)v778.f32), v1064), (int32x4_t)vcgtq_f64(vcvt_hight_f64_f32(v778), v1064)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(vcvtq_f64_f32(*(float32x2_t *)v777.f32), v1064), (int32x4_t)vcgtq_f64(vcvt_hight_f64_f32(v777), v1064)))));
                    v772 += 8;
                  }
                  while (v772);
                  if (*(void *)&v769 == vdup_n_s8(v684)) {
                    unsigned int v750 = v684;
                  }
                  else {
                    unsigned int v750 = 0;
                  }
                  unsigned int v684 = v750;
                  if (v749 != v746) {
                    goto LABEL_1062;
                  }
                }
                else
                {
                  uint64_t v749 = 0;
                  unsigned int v750 = v684;
LABEL_1062:
                  v779 = &v748->f32[v749];
                  v780 = &v747->f32[v749];
                  uint64_t v781 = v746 - v749;
                  unsigned int v684 = v750;
                  do
                  {
                    float v782 = *v780++;
                    float v783 = v782;
                    float v784 = *v779++;
                    if (vabds_f32(v783, v784) > 0.001) {
                      unsigned int v684 = 0;
                    }
                    --v781;
                  }
                  while (v781);
                }
              }
LABEL_1066:
              if (v685)
              {
                uint64_t v785 = (*(_DWORD *)v1099 * v745);
                if ((int)v785 >= 1)
                {
                  v786 = (float32x4_t *)*((void *)v743 + 71);
                  v787 = (float32x4_t *)v744[71];
                  if (v785 >= 8)
                  {
                    if (v785 >= 0x20)
                    {
                      uint64_t v788 = v785 & 0x7FFFFFE0;
                      v790 = v786 + 4;
                      int8x16_t v791 = vdupq_n_s8(v684);
                      v792 = v787 + 4;
                      uint64_t v793 = v785 & 0xFFFFFFE0;
                      int8x16_t v794 = v791;
                      int8x16_t v795 = v791;
                      do
                      {
                        float32x4_t v796 = v792[2];
                        float32x4_t v797 = vabdq_f32(v790[-1], v792[-1]);
                        float32x4_t v798 = vabdq_f32(v790[-2], v792[-2]);
                        float32x4_t v799 = vabdq_f32(v790[-3], v792[-3]);
                        float32x4_t v800 = vabdq_f32(v790[-4], v792[-4]);
                        float32x4_t v801 = vabdq_f32(v790[3], v792[3]);
                        float32x4_t v802 = *v792;
                        float32x4_t v803 = v792[1];
                        v792 += 8;
                        float32x4_t v804 = vabdq_f32(v790[2], v796);
                        float32x4_t v805 = vabdq_f32(v790[1], v803);
                        float32x4_t v806 = vabdq_f32(*v790, v802);
                        int8x16_t v794 = vbicq_s8(v794, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(vcvtq_f64_f32(*(float32x2_t *)v800.f32), v1064), (int32x4_t)vcgtq_f64(vcvt_hight_f64_f32(v800), v1064)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(vcvtq_f64_f32(*(float32x2_t *)v799.f32), v1064), (int32x4_t)vcgtq_f64(vcvt_hight_f64_f32(v799), v1064))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(vcvtq_f64_f32(*(float32x2_t *)v798.f32), v1064), (int32x4_t)vcgtq_f64(vcvt_hight_f64_f32(v798), v1064)),
                                                (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(vcvtq_f64_f32(*(float32x2_t *)v797.f32), v1064), (int32x4_t)vcgtq_f64(vcvt_hight_f64_f32(v797), v1064)))));
                        int8x16_t v795 = vbicq_s8(v795, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(vcvtq_f64_f32(*(float32x2_t *)v806.f32), v1064), (int32x4_t)vcgtq_f64(vcvt_hight_f64_f32(v806), v1064)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(vcvtq_f64_f32(*(float32x2_t *)v805.f32), v1064), (int32x4_t)vcgtq_f64(vcvt_hight_f64_f32(v805), v1064))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(vcvtq_f64_f32(*(float32x2_t *)v804.f32), v1064), (int32x4_t)vcgtq_f64(vcvt_hight_f64_f32(v804), v1064)),
                                                (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(vcvtq_f64_f32(*(float32x2_t *)v801.f32), v1064), (int32x4_t)vcgtq_f64(vcvt_hight_f64_f32(v801), v1064)))));
                        v790 += 8;
                        v793 -= 32;
                      }
                      while (v793);
                      if (vmaxvq_u8((uint8x16_t)vornq_s8(vmvnq_s8(vceqq_s8(v794, v791)), vceqq_s8(v795, v791)))) {
                        unsigned int v789 = 0;
                      }
                      else {
                        unsigned int v789 = v684;
                      }
                      if (v788 == v785)
                      {
                        unsigned int v684 = v789;
                        goto LABEL_1042;
                      }
                      if ((v785 & 0x18) == 0) {
                        goto LABEL_1085;
                      }
                    }
                    else
                    {
                      uint64_t v788 = 0;
                      unsigned int v789 = v684;
                    }
                    uint64_t v807 = v788;
                    uint64_t v788 = v785 & 0xFFFFFFF8;
                    int8x8_t v808 = vdup_n_s8(v789);
                    v809 = (float32x4_t *)((char *)v786 + 4 * v807);
                    v810 = (float32x4_t *)((char *)v787 + 4 * v807);
                    uint64_t v811 = v807 - v788;
                    do
                    {
                      float32x4_t v812 = *v809;
                      float32x4_t v813 = v809[1];
                      v809 += 2;
                      float32x4_t v814 = *v810;
                      float32x4_t v815 = v810[1];
                      v810 += 2;
                      float32x4_t v816 = vabdq_f32(v813, v815);
                      float32x4_t v817 = vabdq_f32(v812, v814);
                      int8x8_t v808 = vbic_s8(v808, vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(vcvtq_f64_f32(*(float32x2_t *)v817.f32), v1064), (int32x4_t)vcgtq_f64(vcvt_hight_f64_f32(v817), v1064)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(vcvtq_f64_f32(*(float32x2_t *)v816.f32), v1064), (int32x4_t)vcgtq_f64(vcvt_hight_f64_f32(v816), v1064)))));
                      v811 += 8;
                    }
                    while (v811);
                    if (*(void *)&v808 == vdup_n_s8(v684)) {
                      unsigned int v789 = v684;
                    }
                    else {
                      unsigned int v789 = 0;
                    }
                    unsigned int v684 = v789;
                    if (v788 != v785) {
                      goto LABEL_1085;
                    }
                  }
                  else
                  {
                    uint64_t v788 = 0;
                    unsigned int v789 = v684;
LABEL_1085:
                    v818 = &v787->f32[v788];
                    v819 = &v786->f32[v788];
                    uint64_t v820 = v785 - v788;
                    unsigned int v684 = v789;
                    do
                    {
                      float v821 = *v819++;
                      float v822 = v821;
                      float v823 = *v818++;
                      if (vabds_f32(v822, v823) > 0.001) {
                        unsigned int v684 = 0;
                      }
                      --v820;
                    }
                    while (v820);
                  }
                }
              }
LABEL_1042:
              if (++v685 == v129)
              {
LABEL_1090:
                if (v684)
                {
LABEL_1091:
                  v1159 = v1133;
                  v824 = sub_19E287AAC((uint64_t)v1138, (uint64_t)v1133, (uint64_t)&unk_19E351150, (long long **)&v1159);
                  *((_DWORD *)v1144 + 100 * *((int *)v824 + 10) + 97) = *(_DWORD *)&__src[194];
                  if (SHIBYTE(v1134) < 0) {
                    goto LABEL_1092;
                  }
LABEL_999:
                  v681 = *(char **)v681;
                  if (!v681) {
                    goto LABEL_993;
                  }
                }
                else
                {
                  v825 = sub_19E26EDD8();
                  if (os_log_type_enabled(v825, OS_LOG_TYPE_ERROR)) {
                    sub_19E32F7D4(&buf, v1095, v825);
                  }
                  if ((SHIBYTE(v1134) & 0x80000000) == 0) {
                    goto LABEL_999;
                  }
LABEL_1092:
                  operator delete(v1133[0]);
                  v681 = *(char **)v681;
                  if (!v681) {
                    goto LABEL_993;
                  }
                }
                continue;
              }
              goto LABEL_1043;
            }
          }
          unint64_t v622 = 0xAAAAAAAAAAAAAAABLL * (((char *)v1076 - v43) >> 3) + 1;
          if (v622 > 0xAAAAAAAAAAAAAAALL) {
            sub_19E13D694();
          }
          if (0x5555555555555556 * ((uint64_t)(v1077 - (void)v43) >> 3) > v622) {
            unint64_t v622 = 0x5555555555555556 * ((uint64_t)(v1077 - (void)v43) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1077 - (void)v43) >> 3) >= 0x555555555555555) {
            unint64_t v623 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v623 = v622;
          }
          if (v623 > 0xAAAAAAAAAAAAAAALL) {
            sub_19E13C418();
          }
          v624 = (char *)operator new(24 * v623);
          uint64_t v625 = &v624[8 * (((char *)v1076 - v43) >> 3)];
          *(void *)uint64_t v625 = v274;
          int v275 = v625 + 24;
          long long v626 = &v624[(char *)v1076 - v43];
          *((_DWORD *)v626 + 2) = v273;
          v626[12] = 0;
          *((void *)v626 + 2) = 0;
          if (v1076 == (float32x4_t **)v43)
          {
            v629 = &v624[8 * (((char *)v1076 - v43) >> 3)];
            unint64_t v1077 = (unint64_t)&v624[24 * v623];
            if (v43) {
              goto LABEL_910;
            }
          }
          else
          {
            uint64_t v627 = (char *)v1076;
            do
            {
              long long v628 = *(_OWORD *)(v627 - 24);
              v629 = v625 - 24;
              *((void *)v625 - 1) = *((void *)v627 - 1);
              *(_OWORD *)(v625 - 24) = v628;
              v627 -= 24;
              v625 -= 24;
            }
            while (v627 != v43);
            unint64_t v1077 = (unint64_t)&v624[24 * v623];
            if (v43) {
LABEL_910:
            }
              operator delete(v43);
          }
          uint64_t v43 = v629;
          uint64_t v276 = v1169;
          if ((unint64_t)v275 >= v1077) {
            goto LABEL_912;
          }
LABEL_384:
          *(void *)int v275 = v276;
          *((_DWORD *)v275 + 2) = v273;
          v275[12] = 0;
          int v277 = v275 + 24;
          *((void *)v275 + 2) = 0;
          goto LABEL_924;
        }
      }
      else
      {
        uint64_t v141 = 0;
        unint64_t v142 = (int *)(4 * v137);
        *(_DWORD *)(4 * v137) = v132;
        uint64_t v134 = 4 * v137 + 4;
        if (v133 != v135) {
          goto LABEL_246;
        }
      }
      break;
    }
    uint64_t v43 = v1080;
    goto LABEL_255;
  }
  v1076 = 0;
  uint64_t v43 = 0;
LABEL_1408:
  v980 = (uint64_t *)v1153;
  if (v1153 != &v1154)
  {
    v1093 = v43;
    do
    {
      if (*((char *)v980 + 55) < 0)
      {
        sub_19E13C2D0(__src, (void *)v980[4], v980[5]);
      }
      else
      {
        *(_OWORD *)__src = *((_OWORD *)v980 + 2);
        *(void *)&__src[8] = v980[6];
      }
      bzero(__p, 0x190uLL);
      if (__src[11] >= 0) {
        v981 = (const char *)__src;
      }
      else {
        v981 = *(const char **)__src;
      }
      strcpy(__p[0].i8, v981);
      __p[2].i8[0] = -7;
      sub_19E30A5CC((uint64_t)a3, (uint64_t)__src, (char **)v1133);
      v982 = (void **)v1133[0];
      v1078 = (void **)v1133[1];
      if (v1133[0] == v1133[1])
      {
        if (!v1133[0]) {
          goto LABEL_1500;
        }
      }
      else
      {
        do
        {
          if (*((char *)v982 + 23) < 0)
          {
            sub_19E13C2D0(v1102, *v982, (unint64_t)v982[1]);
          }
          else
          {
            long long v992 = *(_OWORD *)v982;
            *(void *)&v1103[0] = v982[2];
            *(_OWORD *)v1102 = v992;
          }
          uint64_t v993 = *((unsigned int *)v982 + 6);
          DWORD2(v1103[0]) = *((_DWORD *)v982 + 6);
          v994 = v1148;
          v995 = &v1148;
          v996 = &v1148;
          if (v1148)
          {
            if ((SBYTE7(v1103[0]) & 0x80u) == 0) {
              v997 = (void *)BYTE7(v1103[0]);
            }
            else {
              v997 = v1102[1];
            }
            if ((SBYTE7(v1103[0]) & 0x80u) == 0) {
              v998 = v1102;
            }
            else {
              v998 = (void **)v1102[0];
            }
            while (1)
            {
              while (1)
              {
                v995 = (char **)v994;
                v1001 = (char *)*((void *)v994 + 4);
                v999 = v994 + 32;
                v1000 = v1001;
                int v1002 = v999[23];
                if (v1002 >= 0) {
                  size_t v1003 = v999[23];
                }
                else {
                  size_t v1003 = *((void *)v999 + 1);
                }
                if (v1002 >= 0) {
                  v1004 = v999;
                }
                else {
                  v1004 = v1000;
                }
                if (v1003 >= (unint64_t)v997) {
                  size_t v1005 = (size_t)v997;
                }
                else {
                  size_t v1005 = v1003;
                }
                int v1006 = memcmp(v998, v1004, v1005);
                BOOL v1007 = (unint64_t)v997 < v1003;
                if (v1006) {
                  BOOL v1007 = v1006 < 0;
                }
                if (!v1007) {
                  break;
                }
                v994 = *v995;
                v996 = v995;
                if (!*v995) {
                  goto LABEL_1459;
                }
              }
              int v1008 = memcmp(v1004, v998, v1005);
              BOOL v1009 = v1003 < (unint64_t)v997;
              if (v1008) {
                BOOL v1009 = v1008 < 0;
              }
              if (!v1009) {
                break;
              }
              v994 = v995[1];
              if (!v994)
              {
                v996 = v995 + 1;
                goto LABEL_1459;
              }
            }
            __int16 v1023 = *((_WORD *)v995 + 28);
            uint64_t v43 = v1093;
          }
          else
          {
LABEL_1459:
            uint64_t v43 = v1093;
            v1010 = (char *)operator new(0x40uLL);
            v1011 = v1010 + 32;
            if (SBYTE7(v1103[0]) < 0)
            {
              sub_19E13C2D0(v1011, v1102[0], (unint64_t)v1102[1]);
            }
            else
            {
              *(_OWORD *)v1011 = *(_OWORD *)v1102;
              *((void *)v1010 + 6) = *(void *)&v1103[0];
            }
            *((_WORD *)v1010 + 28) = 0;
            *(void *)v1010 = 0;
            *((void *)v1010 + 1) = 0;
            *((void *)v1010 + 2) = v995;
            *v996 = v1010;
            if (*v1147)
            {
              v1147 = (uint64_t **)*v1147;
              v1010 = *v996;
            }
            v1012 = v1148;
            BOOL v96 = v1010 == v1148;
            v1010[24] = v1010 == v1148;
            if (!v96)
            {
              do
              {
                uint64_t v1013 = *((void *)v1010 + 2);
                if (*(unsigned char *)(v1013 + 24)) {
                  break;
                }
                v1014 = *(char **)(v1013 + 16);
                uint64_t v1015 = *(void *)v1014;
                if (*(void *)v1014 == v1013)
                {
                  uint64_t v1018 = *((void *)v1014 + 1);
                  if (!v1018 || (int v1019 = *(unsigned __int8 *)(v1018 + 24), v1016 = (unsigned char *)(v1018 + 24), v1019))
                  {
                    if (*(char **)v1013 == v1010)
                    {
                      *(unsigned char *)(v1013 + 24) = 1;
                      v1014[24] = 0;
                      uint64_t v1022 = *(void *)(v1013 + 8);
                      *(void *)v1014 = v1022;
                      if (v1022) {
                        goto LABEL_1479;
                      }
                    }
                    else
                    {
                      v1020 = *(uint64_t **)(v1013 + 8);
                      uint64_t v1021 = *v1020;
                      *(void *)(v1013 + 8) = *v1020;
                      if (v1021)
                      {
                        *(void *)(v1021 + 16) = v1013;
                        v1014 = *(char **)(v1013 + 16);
                      }
                      v1020[2] = (uint64_t)v1014;
                      *(void *)(*(void *)(v1013 + 16) + 8 * (**(void **)(v1013 + 16) != v1013)) = v1020;
                      uint64_t *v1020 = v1013;
                      *(void *)(v1013 + 16) = v1020;
                      v1014 = (char *)v1020[2];
                      uint64_t v1013 = *(void *)v1014;
                      *((unsigned char *)v1020 + 24) = 1;
                      v1014[24] = 0;
                      uint64_t v1022 = *(void *)(v1013 + 8);
                      *(void *)v1014 = v1022;
                      if (v1022) {
LABEL_1479:
                      }
                        *(void *)(v1022 + 16) = v1014;
                    }
                    *(void *)(v1013 + 16) = *((void *)v1014 + 2);
                    *(void *)(*((void *)v1014 + 2) + 8 * (**((void **)v1014 + 2) != (void)v1014)) = v1013;
                    *(void *)(v1013 + 8) = v1014;
LABEL_1486:
                    *((void *)v1014 + 2) = v1013;
                    break;
                  }
                }
                else if (!v1015 || (int v1017 = *(unsigned __int8 *)(v1015 + 24), v1016 = (unsigned char *)(v1015 + 24), v1017))
                {
                  if (*(char **)v1013 == v1010)
                  {
                    uint64_t v1025 = *((void *)v1010 + 1);
                    *(void *)uint64_t v1013 = v1025;
                    if (v1025)
                    {
                      *(void *)(v1025 + 16) = v1013;
                      v1014 = *(char **)(v1013 + 16);
                    }
                    *((void *)v1010 + 2) = v1014;
                    *(void *)(*(void *)(v1013 + 16) + 8 * (**(void **)(v1013 + 16) != v1013)) = v1010;
                    *((void *)v1010 + 1) = v1013;
                    *(void *)(v1013 + 16) = v1010;
                    v1014 = (char *)*((void *)v1010 + 2);
                    v1010[24] = 1;
                    v1014[24] = 0;
                    uint64_t v1013 = *((void *)v1014 + 1);
                    v1024 = *(char **)v1013;
                    *((void *)v1014 + 1) = *(void *)v1013;
                    if (v1024) {
LABEL_1484:
                    }
                      *((void *)v1024 + 2) = v1014;
                  }
                  else
                  {
                    *(unsigned char *)(v1013 + 24) = 1;
                    v1014[24] = 0;
                    uint64_t v1013 = *((void *)v1014 + 1);
                    v1024 = *(char **)v1013;
                    *((void *)v1014 + 1) = *(void *)v1013;
                    if (v1024) {
                      goto LABEL_1484;
                    }
                  }
                  *(void *)(v1013 + 16) = *((void *)v1014 + 2);
                  *(void *)(*((void *)v1014 + 2) + 8 * (**((void **)v1014 + 2) != (void)v1014)) = v1013;
                  *(void *)uint64_t v1013 = v1014;
                  goto LABEL_1486;
                }
                *(unsigned char *)(v1013 + 24) = 1;
                v1010 = v1014;
                v1014[24] = v1014 == v1012;
                unsigned char *v1016 = 1;
              }
              while (v1014 != v1012);
            }
            __int16 v1023 = 0;
            ++v1149;
            uint64_t v993 = DWORD2(v1103[0]);
          }
          __p[23].i16[v993 + 2] = v1023;
          __p[2].i8[7] = sub_19E30ABD4((uint64_t)a3, (unsigned __int8 **)v1102, (unsigned __int8 **)__src);
          if (SBYTE7(v1103[0]) < 0) {
            operator delete(v1102[0]);
          }
          v982 += 4;
        }
        while (v982 != v1078);
        v982 = (void **)v1133[0];
        if (!v1133[0])
        {
LABEL_1500:
          v984 = (char *)__dst;
          unint64_t v985 = v1146;
          if ((unint64_t)__dst < v1146) {
            goto LABEL_1501;
          }
          goto LABEL_1421;
        }
      }
      v983 = (void **)v1133[1];
      if (v1133[1] == v982)
      {
        v1133[1] = v982;
        operator delete(v982);
        v984 = (char *)__dst;
        unint64_t v985 = v1146;
        if ((unint64_t)__dst < v1146) {
          goto LABEL_1501;
        }
      }
      else
      {
        do
        {
          if (*((char *)v983 - 9) < 0) {
            operator delete(*(v983 - 4));
          }
          v983 -= 4;
        }
        while (v983 != v982);
        v1133[1] = v982;
        operator delete(v1133[0]);
        v984 = (char *)__dst;
        unint64_t v985 = v1146;
        if ((unint64_t)__dst < v1146)
        {
LABEL_1501:
          memcpy(v984, __p, 0x190uLL);
          v1026 = v984 + 400;
          goto LABEL_1510;
        }
      }
LABEL_1421:
      v986 = (char *)v1144;
      unint64_t v987 = 0x8F5C28F5C28F5C29 * ((v984 - (unsigned char *)v1144) >> 4);
      unint64_t v988 = v987 + 1;
      if (v987 + 1 > 0xA3D70A3D70A3D7) {
        sub_19E13D694();
      }
      unint64_t v989 = 0x8F5C28F5C28F5C29 * ((uint64_t)(v985 - (void)v1144) >> 4);
      if (2 * v989 > v988) {
        unint64_t v988 = 2 * v989;
      }
      if (v989 >= 0x51EB851EB851EBLL) {
        unint64_t v990 = 0xA3D70A3D70A3D7;
      }
      else {
        unint64_t v990 = v988;
      }
      if (v990)
      {
        if (v990 > 0xA3D70A3D70A3D7) {
          sub_19E13C418();
        }
        v991 = (char *)operator new(400 * v990);
      }
      else
      {
        v991 = 0;
      }
      v1027 = &v991[400 * v987];
      memcpy(v1027, __p, 0x190uLL);
      v1028 = v1027;
      if (v984 != v986)
      {
        do
        {
          v984 -= 400;
          v1028 -= 400;
          memcpy(v1028, v984, 0x190uLL);
        }
        while (v984 != v986);
        v984 = v986;
      }
      v1026 = v1027 + 400;
      v1144 = v1028;
      long long __dst = v1027 + 400;
      unint64_t v1146 = (unint64_t)&v991[400 * v990];
      if (v984) {
        operator delete(v984);
      }
LABEL_1510:
      long long __dst = v1026;
      if (SHIBYTE(__src[11]) < 0)
      {
        operator delete(*(void **)__src);
        v1029 = (char *)v980[1];
        if (v1029)
        {
          do
          {
LABEL_1514:
            v1030 = (char **)v1029;
            v1029 = *(char **)v1029;
          }
          while (v1029);
          goto LABEL_1410;
        }
      }
      else
      {
        v1029 = (char *)v980[1];
        if (v1029) {
          goto LABEL_1514;
        }
      }
      do
      {
        v1030 = (char **)v980[2];
        BOOL v96 = *v1030 == (char *)v980;
        v980 = (uint64_t *)v1030;
      }
      while (!v96);
LABEL_1410:
      v980 = (uint64_t *)v1030;
    }
    while (v1030 != &v1154);
  }
  sub_19E1489D8(__p[0].i64);
  std::ostream::write();
  std::ostream::write();
  if (v43 != (char *)v1076)
  {
    v1031 = v43;
    do
    {
      v1032 = *(void **)v1031;
      int v1033 = *((_DWORD *)v1031 + 2);
      int v1034 = v1031[12];
      *(void *)__src = 0;
      if (v1034)
      {
        v1133[0] = v1032;
        operator new[]();
      }
      std::ostream::write();
      if (*(void *)__src) {
        operator delete[](*(void **)__src);
      }
      if (v1033 <= 0) {
        int v1035 = -(-v1033 & 3);
      }
      else {
        int v1035 = v1033 & 3;
      }
      if (v1035)
      {
        LOBYTE(v1102[0]) = 0;
        int v1036 = 9 - v1035;
        while (--v1036 >= 5)
          std::ostream::write();
        LOBYTE(v1133[0]) = 1;
        LOBYTE(v1136[0]) = 2;
        LOBYTE(v1099) = 2;
        LOBYTE(v1096) = 8;
        std::ostream::write();
        std::ostream::write();
        std::ostream::write();
        std::ostream::write();
      }
      v1031 += 24;
    }
    while (v1031 != (char *)v1076);
  }
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)__p + *(void *)(__p[0].i64[0] - 24)), *(__int32 *)((char *)__p[2].i32 + *(void *)(__p[0].i64[0] - 24)) | 4);
  }
  __p[0].i64[0] = *MEMORY[0x1E4FBA400];
  *(uint64_t *)((char *)__p[0].i64 + *(void *)(__p[0].i64[0] - 24)) = *(void *)(MEMORY[0x1E4FBA400] + 24);
  MEMORY[0x19F3BB910](&__p[0].u64[1]);
  std::ostream::~ostream();
  MEMORY[0x19F3BBB40](&v1162);
  v1037 = (void **)v1139[0];
  if (v1139[0])
  {
    do
    {
      v1043 = (void **)*v1037;
      if (*((char *)v1037 + 39) < 0) {
        operator delete(v1037[2]);
      }
      operator delete(v1037);
      v1037 = v1043;
    }
    while (v1043);
  }
  v1038 = v1138[0];
  v1138[0] = 0;
  if (v1038) {
    operator delete(v1038);
  }
  v1039 = (char *)v1141;
  if (v1141)
  {
    v1040 = v1142;
    v1041 = v1141;
    if (v1142 != v1141)
    {
      v1042 = v1142;
      do
      {
        v1045 = (void *)*((void *)v1042 - 3);
        v1042 -= 24;
        v1044 = v1045;
        if (v1045)
        {
          *((void *)v1040 - 2) = v1044;
          operator delete(v1044);
        }
        v1040 = v1042;
      }
      while (v1042 != v1039);
      v1041 = v1141;
    }
    v1142 = v1039;
    operator delete(v1041);
  }
  if (v43) {
    operator delete(v43);
  }
  if (v1144)
  {
    long long __dst = v1144;
    operator delete(v1144);
  }
  sub_19E15A064((uint64_t)&v1147, v1148);
  v1046 = (void **)v1150;
  if (v1150)
  {
    v1047 = (void **)v1151;
    v1048 = v1150;
    if (v1151 != v1150)
    {
      do
      {
        if (*((char *)v1047 - 1) < 0) {
          operator delete(*(v1047 - 3));
        }
        v1047 -= 3;
      }
      while (v1047 != v1046);
      v1048 = v1150;
    }
    v1151 = (char *)v1046;
    operator delete(v1048);
  }
  sub_19E15A064((uint64_t)&v1153, v1154);
  sub_19E15A064((uint64_t)&v1156, v1157);
  return 1;
}