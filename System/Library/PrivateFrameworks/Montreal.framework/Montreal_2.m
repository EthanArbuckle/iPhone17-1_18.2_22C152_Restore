void sub_19E2799E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p)
{
  void **v58;
  void *v59;
  unint64_t v60;
  void *v61;
  void **v62;
  unint64_t v63;
  void *v64;
  unint64_t v65;
  void *v66;
  void *v67;
  unint64_t v68;
  unint64_t v69;
  void *v70;

  if (__p) {
    operator delete(__p);
  }
  if (SLOBYTE(STACK[0x477]) < 0) {
    operator delete((void *)STACK[0x460]);
  }
  v58 = (void **)STACK[0x490];
  if (STACK[0x490])
  {
    do
    {
      v62 = (void **)*v58;
      if (*((char *)v58 + 39) < 0) {
        operator delete(v58[2]);
      }
      operator delete(v58);
      v58 = v62;
    }
    while (v62);
  }
  v59 = (void *)STACK[0x480];
  STACK[0x480] = 0;
  if (v59)
  {
    operator delete(v59);
    v60 = STACK[0x4B0];
    if (!STACK[0x4B0])
    {
LABEL_8:
      if (!a48) {
        goto LABEL_9;
      }
      goto LABEL_22;
    }
  }
  else
  {
    v60 = STACK[0x4B0];
    if (!STACK[0x4B0]) {
      goto LABEL_8;
    }
  }
  v63 = STACK[0x4B8];
  v64 = (void *)v60;
  if (STACK[0x4B8] != v60)
  {
    v65 = STACK[0x4B8];
    do
    {
      v67 = *(void **)(v65 - 24);
      v65 -= 24;
      v66 = v67;
      if (v67)
      {
        *(void *)(v63 - 16) = v66;
        operator delete(v66);
      }
      v63 = v65;
    }
    while (v65 != v60);
    v64 = (void *)STACK[0x4B0];
  }
  STACK[0x4B8] = v60;
  operator delete(v64);
  if (!a48)
  {
LABEL_9:
    v61 = (void *)STACK[0x4C8];
    if (!STACK[0x4C8])
    {
LABEL_24:
      sub_19E15A064((uint64_t)&STACK[0x4E0], (char *)STACK[0x4E8]);
      v68 = STACK[0x4F8];
      if (STACK[0x4F8])
      {
        v69 = STACK[0x500];
        v70 = (void *)STACK[0x4F8];
        if (STACK[0x500] != v68)
        {
          do
          {
            if (*(char *)(v69 - 1) < 0) {
              operator delete(*(void **)(v69 - 24));
            }
            v69 -= 24;
          }
          while (v69 != v68);
          v70 = (void *)STACK[0x4F8];
        }
        STACK[0x500] = v68;
        operator delete(v70);
      }
      sub_19E15A064((uint64_t)&STACK[0x510], (char *)STACK[0x518]);
      sub_19E15A064((uint64_t)&STACK[0x528], (char *)STACK[0x530]);
      _Unwind_Resume(a1);
    }
LABEL_23:
    STACK[0x4D0] = (unint64_t)v61;
    operator delete(v61);
    goto LABEL_24;
  }
LABEL_22:
  operator delete(a48);
  v61 = (void *)STACK[0x4C8];
  if (!STACK[0x4C8]) {
    goto LABEL_24;
  }
  goto LABEL_23;
}

void **sub_19E279FEC(void **a1)
{
  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 9) < 0) {
          operator delete(*(v3 - 4));
        }
        v3 -= 4;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_19E27A060(uint64_t **a1, uint64_t *a2, long long **a3, uint64_t a4, const void **a5)
{
  v5 = *a3;
  v6 = a3[1];
  if (*a3 != v6)
  {
    v7 = (void *)(a4 + 8);
    while (1)
    {
      if (*((char *)v5 + 23) < 0)
      {
        sub_19E13C2D0(__p, *(void **)v5, *((void *)v5 + 1));
        int v159 = *((_DWORD *)v5 + 6);
        uint64_t v9 = *v7;
        v10 = (void *)HIBYTE(v158);
        int v11 = SHIBYTE(v158);
        if (*v7)
        {
LABEL_9:
          if (v11 >= 0) {
            v12 = v10;
          }
          else {
            v12 = __p[1];
          }
          if (v11 >= 0) {
            v13 = __p;
          }
          else {
            v13 = (void **)__p[0];
          }
          v14 = v7;
          do
          {
            int v15 = *(char *)(v9 + 55);
            if (v15 >= 0) {
              size_t v16 = *(unsigned __int8 *)(v9 + 55);
            }
            else {
              size_t v16 = *(void *)(v9 + 40);
            }
            if (v15 >= 0) {
              v17 = (const void *)(v9 + 32);
            }
            else {
              v17 = *(const void **)(v9 + 32);
            }
            if ((unint64_t)v12 >= v16) {
              size_t v18 = v16;
            }
            else {
              size_t v18 = (size_t)v12;
            }
            int v19 = memcmp(v17, v13, v18);
            BOOL v20 = v16 < (unint64_t)v12;
            if (v19) {
              BOOL v20 = v19 < 0;
            }
            BOOL v21 = !v20;
            if (v20) {
              v22 = (uint64_t *)(v9 + 8);
            }
            else {
              v22 = (uint64_t *)v9;
            }
            if (v21) {
              v14 = (void *)v9;
            }
            uint64_t v9 = *v22;
          }
          while (*v22);
          if (v14 != v7)
          {
            v25 = (const void *)v14[4];
            v24 = v14 + 4;
            v23 = v25;
            int v26 = *((char *)v24 + 23);
            if (v26 >= 0) {
              size_t v27 = *((unsigned __int8 *)v24 + 23);
            }
            else {
              size_t v27 = v24[1];
            }
            if (v26 >= 0) {
              v28 = v24;
            }
            else {
              v28 = v23;
            }
            if (v27 >= (unint64_t)v12) {
              size_t v29 = (size_t)v12;
            }
            else {
              size_t v29 = v27;
            }
            int v30 = memcmp(v13, v28, v29);
            BOOL v32 = (unint64_t)v12 >= v27;
            if (v30) {
              BOOL v32 = v30 >= 0;
            }
            if (v32)
            {
              switch(*a2)
              {
                case 4:
                case 23:
                  *(void *)&long long v156 = __p;
                  v33 = sub_19E288298(a1, (const void **)__p, (uint64_t)&unk_19E351150, (long long **)&v156);
                  *(void *)&long long v34 = 0x100000001;
                  *((void *)&v34 + 1) = 0x100000001;
                  *(_OWORD *)(v33 + 7) = v34;
                  v33[9] = (uint64_t *)0xFFFFFFFF00000001;
                  goto LABEL_60;
                case 11:
                case 12:
                  v31.i64[0] = a2[16];
                  v31.i32[2] = *((_DWORD *)a2 + 34);
                  int32x4_t v150 = v31;
                  *(void *)&long long v156 = __p;
                  v33 = sub_19E288298(a1, (const void **)__p, (uint64_t)&unk_19E351150, (long long **)&v156);
                  v35 = v33 + 8;
                  int32x4_t v36 = v150;
                  goto LABEL_58;
                case 17:
                  v31.i64[0] = a2[16];
                  v31.i32[2] = *((_DWORD *)a2 + 34);
                  int32x4_t v152 = v31;
                  *(void *)&long long v156 = __p;
                  v33 = sub_19E288298(a1, (const void **)__p, (uint64_t)&unk_19E351150, (long long **)&v156);
                  v42.i64[0] = 0x100000001;
                  v42.i64[1] = 0x100000001;
                  int32x4_t v36 = vmaxq_s32(v152, v42);
                  v35 = v33 + 8;
LABEL_58:
                  _DWORD *v35 = v36.i32[2];
                  v33[7] = (uint64_t *)v36.i64[0];
                  goto LABEL_59;
                case 22:
                  v31.i64[0] = a2[16];
                  v31.i32[2] = *((_DWORD *)a2 + 34);
                  int32x4_t v151 = v31;
                  int v38 = *((_DWORD *)a2 + 35);
                  *(void *)&long long v156 = __p;
                  v33 = sub_19E288298(a1, (const void **)__p, (uint64_t)&unk_19E351150, (long long **)&v156);
                  if (v38 <= 1) {
                    int v39 = 1;
                  }
                  else {
                    int v39 = v38;
                  }
                  v40.i64[0] = 0x100000001;
                  v40.i64[1] = 0x100000001;
                  int32x4_t v41 = vmaxq_s32(v151, v40);
                  *((_DWORD *)v33 + 16) = v41.i32[2];
                  v33[7] = (uint64_t *)v41.i64[0];
                  *((_DWORD *)v33 + 17) = 1;
                  *((_DWORD *)v33 + 18) = v39;
                  *((_DWORD *)v33 + 19) = -1;
                  goto LABEL_60;
                default:
                  int v37 = *((_DWORD *)a2 + 32);
                  *(void *)&long long v156 = __p;
                  v33 = sub_19E288298(a1, (const void **)__p, (uint64_t)&unk_19E351150, (long long **)&v156);
                  v33[7] = (uint64_t *)0x100000001;
                  *((_DWORD *)v33 + 16) = v37;
LABEL_59:
                  *((_DWORD *)v33 + 19) = -1;
                  *(uint64_t **)((char *)v33 + 68) = (uint64_t *)0x100000001;
LABEL_60:
                  v33[10] = 0;
                  v33[11] = 0;
                  v44 = v33 + 12;
                  v43 = v33[12];
                  if (v43)
                  {
                    v33[13] = v43;
                    operator delete(v43);
                    void *v44 = 0;
                    v44[1] = 0;
                    v44[2] = 0;
                  }
                  void *v44 = 0;
                  v44[1] = 0;
                  v44[2] = 0;
                  *(void *)&long long v156 = __p;
                  *((_DWORD *)sub_19E288298(a1, (const void **)__p, (uint64_t)&unk_19E351150, (long long **)&v156) + 19) = 5;
                  LOBYTE(v11) = HIBYTE(v158);
                  break;
              }
            }
          }
        }
      }
      else
      {
        long long v8 = *v5;
        unint64_t v158 = *((void *)v5 + 2);
        *(_OWORD *)__p = v8;
        int v159 = *((_DWORD *)v5 + 6);
        uint64_t v9 = *v7;
        v10 = (void *)HIBYTE(v158);
        int v11 = SHIBYTE(v158);
        if (*v7) {
          goto LABEL_9;
        }
      }
      if ((v11 & 0x80) != 0)
      {
        operator delete(__p[0]);
        v5 += 2;
        if (v5 == v6) {
          break;
        }
      }
      else
      {
        v5 += 2;
        if (v5 == v6) {
          break;
        }
      }
    }
  }
  uint64_t v45 = *a2;
  if (*a2 == 5)
  {
    int v46 = *((_DWORD *)a2 + 64);
    long long v156 = 0uLL;
    int v47 = *((char *)a5 + 23);
    if (v47 >= 0) {
      size_t v48 = *((unsigned __int8 *)a5 + 23);
    }
    else {
      size_t v48 = (size_t)a5[1];
    }
    unint64_t v49 = v48 + 5;
    if (v48 + 5 > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_246;
    }
    if (v49 >= 0x17)
    {
      uint64_t v51 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v49 | 7) != 0x17) {
        uint64_t v51 = v49 | 7;
      }
      uint64_t v52 = v51 + 1;
      v50 = operator new(v51 + 1);
      __p[1] = (void *)(v48 + 5);
      unint64_t v158 = v52 | 0x8000000000000000;
      __p[0] = v50;
    }
    else
    {
      __p[1] = 0;
      unint64_t v158 = 0;
      __p[0] = 0;
      v50 = __p;
      HIBYTE(v158) = v48 + 5;
      if (!v48) {
        goto LABEL_78;
      }
    }
    if (v47 >= 0) {
      v53 = a5;
    }
    else {
      v53 = *a5;
    }
    memmove(v50, v53, v48);
LABEL_78:
    strcpy((char *)v50 + v48, "_h_in");
    v160 = __p;
    v54 = sub_19E288458(a1, (const void **)__p, (uint64_t)&unk_19E351150, (_OWORD **)&v160);
    *((void *)v54 + 7) = 0x100000001;
    *((_DWORD *)v54 + 16) = v46;
    *((_DWORD *)v54 + 19) = -1;
    *(void *)(v54 + 68) = 0x100000001;
    *((_OWORD *)v54 + 5) = v156;
    v56 = v54 + 96;
    v55 = (void *)*((void *)v54 + 12);
    if (v55)
    {
      *((void *)v54 + 13) = v55;
      operator delete(v55);
      void *v56 = 0;
      v56[1] = 0;
      v56[2] = 0;
    }
    void *v56 = 0;
    v56[1] = 0;
    v56[2] = 0;
    if (SHIBYTE(v158) < 0) {
      operator delete(__p[0]);
    }
    int v57 = *((_DWORD *)a2 + 64);
    long long v156 = 0uLL;
    int v58 = *((char *)a5 + 23);
    if (v58 >= 0) {
      size_t v59 = *((unsigned __int8 *)a5 + 23);
    }
    else {
      size_t v59 = (size_t)a5[1];
    }
    unint64_t v60 = v59 + 5;
    if (v59 + 5 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (v60 >= 0x17)
      {
        uint64_t v62 = (v60 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v60 | 7) != 0x17) {
          uint64_t v62 = v60 | 7;
        }
        uint64_t v63 = v62 + 1;
        v61 = operator new(v62 + 1);
        __p[1] = (void *)(v59 + 5);
        unint64_t v158 = v63 | 0x8000000000000000;
        __p[0] = v61;
      }
      else
      {
        __p[1] = 0;
        unint64_t v158 = 0;
        __p[0] = 0;
        v61 = __p;
        HIBYTE(v158) = v59 + 5;
        if (!v59)
        {
LABEL_96:
          strcpy((char *)v61 + v59, "_c_in");
          v160 = __p;
          v65 = sub_19E288458(a1, (const void **)__p, (uint64_t)&unk_19E351150, (_OWORD **)&v160);
          *((void *)v65 + 7) = 0x100000001;
          *((_DWORD *)v65 + 16) = v57;
          *((_DWORD *)v65 + 19) = -1;
          *(void *)(v65 + 68) = 0x100000001;
          *((_OWORD *)v65 + 5) = v156;
          v67 = v65 + 96;
          v66 = (void *)*((void *)v65 + 12);
          if (v66)
          {
            *((void *)v65 + 13) = v66;
            operator delete(v66);
            void *v67 = 0;
            v67[1] = 0;
            v67[2] = 0;
          }
          void *v67 = 0;
          v67[1] = 0;
          v67[2] = 0;
          if (SHIBYTE(v158) < 0) {
            operator delete(__p[0]);
          }
          uint64_t v45 = *a2;
          goto LABEL_101;
        }
      }
      if (v58 >= 0) {
        v64 = a5;
      }
      else {
        v64 = *a5;
      }
      memmove(v61, v64, v59);
      goto LABEL_96;
    }
LABEL_246:
    sub_19E13C370();
  }
LABEL_101:
  if (v45 != 6) {
    goto LABEL_159;
  }
  int v68 = *((char *)a5 + 23);
  if (v68 >= 0) {
    size_t v69 = *((unsigned __int8 *)a5 + 23);
  }
  else {
    size_t v69 = (size_t)a5[1];
  }
  unint64_t v70 = v69 + 5;
  if (v69 + 5 > 0x7FFFFFFFFFFFFFF7) {
LABEL_245:
  }
    sub_19E13C370();
  int v71 = *((_DWORD *)a2 + 64);
  if (v70 <= 0x16)
  {
    __p[1] = 0;
    unint64_t v158 = 0;
    __p[0] = 0;
    v72 = __p;
    HIBYTE(v158) = v69 + 5;
    if (!v69) {
      goto LABEL_112;
    }
    goto LABEL_108;
  }
  uint64_t v110 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v70 | 7) != 0x17) {
    uint64_t v110 = v70 | 7;
  }
  uint64_t v111 = v110 + 1;
  v72 = operator new(v110 + 1);
  __p[1] = (void *)(v69 + 5);
  unint64_t v158 = v111 | 0x8000000000000000;
  __p[0] = v72;
  if (v69)
  {
LABEL_108:
    if (v68 >= 0) {
      v73 = a5;
    }
    else {
      v73 = *a5;
    }
    memmove(v72, v73, v69);
  }
LABEL_112:
  strcpy((char *)v72 + v69, "_h_in");
  *(void *)&long long v156 = __p;
  v74 = sub_19E288458(a1, (const void **)__p, (uint64_t)&unk_19E351150, (_OWORD **)&v156);
  *((void *)v74 + 7) = 0x100000001;
  *((_DWORD *)v74 + 16) = v71;
  *((_DWORD *)v74 + 19) = -1;
  *(void *)(v74 + 68) = 0x100000001;
  *((void *)v74 + 10) = 0;
  *((void *)v74 + 11) = 0;
  v76 = v74 + 96;
  v75 = (void *)*((void *)v74 + 12);
  if (v75)
  {
    *((void *)v74 + 13) = v75;
    operator delete(v75);
    void *v76 = 0;
    v76[1] = 0;
    v76[2] = 0;
  }
  void *v76 = 0;
  v76[1] = 0;
  v76[2] = 0;
  if (SHIBYTE(v158) < 0) {
    operator delete(__p[0]);
  }
  int v77 = *((char *)a5 + 23);
  if (v77 >= 0) {
    size_t v78 = *((unsigned __int8 *)a5 + 23);
  }
  else {
    size_t v78 = (size_t)a5[1];
  }
  unint64_t v79 = v78 + 5;
  if (v78 + 5 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_245;
  }
  int v80 = *((_DWORD *)a2 + 64);
  if (v79 < 0x17)
  {
    __p[1] = 0;
    unint64_t v158 = 0;
    __p[0] = 0;
    v81 = __p;
    HIBYTE(v158) = v78 + 5;
    if (!v78) {
      goto LABEL_126;
    }
    goto LABEL_122;
  }
  uint64_t v112 = (v79 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v79 | 7) != 0x17) {
    uint64_t v112 = v79 | 7;
  }
  uint64_t v113 = v112 + 1;
  v81 = operator new(v112 + 1);
  __p[1] = (void *)(v78 + 5);
  unint64_t v158 = v113 | 0x8000000000000000;
  __p[0] = v81;
  if (v78)
  {
LABEL_122:
    if (v77 >= 0) {
      v82 = a5;
    }
    else {
      v82 = *a5;
    }
    memmove(v81, v82, v78);
  }
LABEL_126:
  strcpy((char *)v81 + v78, "_c_in");
  *(void *)&long long v156 = __p;
  v83 = sub_19E288458(a1, (const void **)__p, (uint64_t)&unk_19E351150, (_OWORD **)&v156);
  *((void *)v83 + 7) = 0x100000001;
  *((_DWORD *)v83 + 16) = v80;
  *((_DWORD *)v83 + 19) = -1;
  *(void *)(v83 + 68) = 0x100000001;
  *((void *)v83 + 10) = 0;
  *((void *)v83 + 11) = 0;
  v85 = v83 + 96;
  v84 = (void *)*((void *)v83 + 12);
  if (v84)
  {
    *((void *)v83 + 13) = v84;
    operator delete(v84);
    void *v85 = 0;
    v85[1] = 0;
    v85[2] = 0;
  }
  void *v85 = 0;
  v85[1] = 0;
  v85[2] = 0;
  if (SHIBYTE(v158) < 0) {
    operator delete(__p[0]);
  }
  int v86 = *((char *)a5 + 23);
  if (v86 >= 0) {
    size_t v87 = *((unsigned __int8 *)a5 + 23);
  }
  else {
    size_t v87 = (size_t)a5[1];
  }
  unint64_t v88 = v87 + 7;
  if (v87 + 7 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_245;
  }
  int v89 = *((_DWORD *)a2 + 64);
  if (v88 < 0x17)
  {
    __p[1] = 0;
    unint64_t v158 = 0;
    __p[0] = 0;
    v90 = __p;
    HIBYTE(v158) = v87 + 7;
    if (!v87) {
      goto LABEL_140;
    }
    goto LABEL_136;
  }
  uint64_t v124 = (v88 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v88 | 7) != 0x17) {
    uint64_t v124 = v88 | 7;
  }
  uint64_t v125 = v124 + 1;
  v90 = operator new(v124 + 1);
  __p[1] = (void *)(v87 + 7);
  unint64_t v158 = v125 | 0x8000000000000000;
  __p[0] = v90;
  if (v87)
  {
LABEL_136:
    if (v86 >= 0) {
      v91 = a5;
    }
    else {
      v91 = *a5;
    }
    memmove(v90, v91, v87);
  }
LABEL_140:
  strcpy((char *)v90 + v87, "_r_h_in");
  *(void *)&long long v156 = __p;
  v92 = sub_19E288458(a1, (const void **)__p, (uint64_t)&unk_19E351150, (_OWORD **)&v156);
  *((void *)v92 + 7) = 0x100000001;
  *((_DWORD *)v92 + 16) = v89;
  *((_DWORD *)v92 + 19) = -1;
  *(void *)(v92 + 68) = 0x100000001;
  *((void *)v92 + 10) = 0;
  *((void *)v92 + 11) = 0;
  v94 = v92 + 96;
  v93 = (void *)*((void *)v92 + 12);
  if (v93)
  {
    *((void *)v92 + 13) = v93;
    operator delete(v93);
    void *v94 = 0;
    v94[1] = 0;
    v94[2] = 0;
  }
  void *v94 = 0;
  v94[1] = 0;
  v94[2] = 0;
  if (SHIBYTE(v158) < 0) {
    operator delete(__p[0]);
  }
  int v95 = *((char *)a5 + 23);
  if (v95 >= 0) {
    size_t v96 = *((unsigned __int8 *)a5 + 23);
  }
  else {
    size_t v96 = (size_t)a5[1];
  }
  unint64_t v97 = v96 + 7;
  if (v96 + 7 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_245;
  }
  int v98 = *((_DWORD *)a2 + 64);
  if (v97 >= 0x17)
  {
    uint64_t v135 = (v97 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v97 | 7) != 0x17) {
      uint64_t v135 = v97 | 7;
    }
    uint64_t v136 = v135 + 1;
    v99 = operator new(v135 + 1);
    __p[1] = (void *)(v96 + 7);
    unint64_t v158 = v136 | 0x8000000000000000;
    __p[0] = v99;
    if (!v96) {
      goto LABEL_154;
    }
    goto LABEL_150;
  }
  __p[1] = 0;
  unint64_t v158 = 0;
  __p[0] = 0;
  v99 = __p;
  HIBYTE(v158) = v96 + 7;
  if (v96)
  {
LABEL_150:
    if (v95 >= 0) {
      v100 = a5;
    }
    else {
      v100 = *a5;
    }
    memmove(v99, v100, v96);
  }
LABEL_154:
  strcpy((char *)v99 + v96, "_r_c_in");
  *(void *)&long long v156 = __p;
  v101 = sub_19E288458(a1, (const void **)__p, (uint64_t)&unk_19E351150, (_OWORD **)&v156);
  *((void *)v101 + 7) = 0x100000001;
  *((_DWORD *)v101 + 16) = v98;
  *((_DWORD *)v101 + 19) = -1;
  *(void *)(v101 + 68) = 0x100000001;
  *((void *)v101 + 10) = 0;
  *((void *)v101 + 11) = 0;
  v103 = v101 + 96;
  v102 = (void *)*((void *)v101 + 12);
  if (v102)
  {
    *((void *)v101 + 13) = v102;
    operator delete(v102);
    void *v103 = 0;
    v103[1] = 0;
    v103[2] = 0;
  }
  void *v103 = 0;
  v103[1] = 0;
  v103[2] = 0;
  if (SHIBYTE(v158) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v45 = *a2;
LABEL_159:
  if (v45 != 20) {
    return;
  }
  int v104 = *((_DWORD *)a2 + 80);
  int v105 = *((_DWORD *)a2 + 81);
  long long v156 = 0uLL;
  int v106 = *((char *)a5 + 23);
  if (v106 >= 0) {
    size_t v107 = *((unsigned __int8 *)a5 + 23);
  }
  else {
    size_t v107 = (size_t)a5[1];
  }
  unint64_t v108 = v107 + 7;
  if (v107 + 7 > 0x7FFFFFFFFFFFFFF7) {
LABEL_247:
  }
    sub_19E13C370();
  if (v108 >= 0x17)
  {
    uint64_t v114 = (v108 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v108 | 7) != 0x17) {
      uint64_t v114 = v108 | 7;
    }
    uint64_t v115 = v114 + 1;
    v109 = operator new(v114 + 1);
    __p[1] = (void *)(v107 + 7);
    unint64_t v158 = v115 | 0x8000000000000000;
    __p[0] = v109;
  }
  else
  {
    __p[1] = 0;
    unint64_t v158 = 0;
    __p[0] = 0;
    v109 = __p;
    HIBYTE(v158) = v107 + 7;
    if (!v107) {
      goto LABEL_182;
    }
  }
  if (v106 >= 0) {
    v116 = a5;
  }
  else {
    v116 = *a5;
  }
  memmove(v109, v116, v107);
LABEL_182:
  strcpy((char *)v109 + v107, "_k_s_in");
  v160 = __p;
  v117 = sub_19E288458(a1, (const void **)__p, (uint64_t)&unk_19E351150, (_OWORD **)&v160);
  *((_DWORD *)v117 + 14) = v104;
  *((_DWORD *)v117 + 15) = 0;
  *((_DWORD *)v117 + 16) = v105;
  *((_DWORD *)v117 + 19) = -1;
  *(void *)(v117 + 68) = 0x100000001;
  *((_OWORD *)v117 + 5) = v156;
  v119 = v117 + 96;
  v118 = (void *)*((void *)v117 + 12);
  if (v118)
  {
    *((void *)v117 + 13) = v118;
    operator delete(v118);
    void *v119 = 0;
    v119[1] = 0;
    v119[2] = 0;
  }
  void *v119 = 0;
  v119[1] = 0;
  v119[2] = 0;
  if (SHIBYTE(v158) < 0) {
    operator delete(__p[0]);
  }
  int v120 = *((char *)a5 + 23);
  if (v120 >= 0) {
    size_t v121 = *((unsigned __int8 *)a5 + 23);
  }
  else {
    size_t v121 = (size_t)a5[1];
  }
  unint64_t v122 = v121 + 7;
  if (v121 + 7 > 0x7FFFFFFFFFFFFFF7) {
LABEL_248:
  }
    sub_19E13C370();
  if (v122 >= 0x17)
  {
    uint64_t v126 = (v122 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v122 | 7) != 0x17) {
      uint64_t v126 = v122 | 7;
    }
    uint64_t v127 = v126 + 1;
    v123 = operator new(v126 + 1);
    __p[1] = (void *)(v121 + 7);
    unint64_t v158 = v127 | 0x8000000000000000;
    __p[0] = v123;
  }
  else
  {
    __p[1] = 0;
    unint64_t v158 = 0;
    __p[0] = 0;
    v123 = __p;
    HIBYTE(v158) = v121 + 7;
    if (!v121) {
      goto LABEL_204;
    }
  }
  if (v120 >= 0) {
    v128 = a5;
  }
  else {
    v128 = *a5;
  }
  memmove(v123, v128, v121);
LABEL_204:
  strcpy((char *)v123 + v121, "_k_s_in");
  *(void *)&long long v156 = __p;
  *((_DWORD *)sub_19E288458(a1, (const void **)__p, (uint64_t)&unk_19E351150, (_OWORD **)&v156) + 19) = 5;
  if (SHIBYTE(v158) < 0) {
    operator delete(__p[0]);
  }
  int v129 = *((_DWORD *)a2 + 80);
  int v130 = *((_DWORD *)a2 + 81);
  long long v156 = 0uLL;
  int v131 = *((char *)a5 + 23);
  if (v131 >= 0) {
    size_t v132 = *((unsigned __int8 *)a5 + 23);
  }
  else {
    size_t v132 = (size_t)a5[1];
  }
  unint64_t v133 = v132 + 7;
  if (v132 + 7 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_247;
  }
  if (v133 >= 0x17)
  {
    uint64_t v137 = (v133 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v133 | 7) != 0x17) {
      uint64_t v137 = v133 | 7;
    }
    uint64_t v138 = v137 + 1;
    v134 = operator new(v137 + 1);
    __p[1] = (void *)(v132 + 7);
    unint64_t v158 = v138 | 0x8000000000000000;
    __p[0] = v134;
  }
  else
  {
    __p[1] = 0;
    unint64_t v158 = 0;
    __p[0] = 0;
    v134 = __p;
    HIBYTE(v158) = v132 + 7;
    if (!v132) {
      goto LABEL_224;
    }
  }
  if (v131 >= 0) {
    v139 = a5;
  }
  else {
    v139 = *a5;
  }
  memmove(v134, v139, v132);
LABEL_224:
  strcpy((char *)v134 + v132, "_v_s_in");
  v160 = __p;
  v140 = sub_19E288458(a1, (const void **)__p, (uint64_t)&unk_19E351150, (_OWORD **)&v160);
  *((_DWORD *)v140 + 14) = v129;
  *((_DWORD *)v140 + 15) = 0;
  *((_DWORD *)v140 + 16) = v130;
  *((_DWORD *)v140 + 19) = -1;
  *(void *)(v140 + 68) = 0x100000001;
  *((_OWORD *)v140 + 5) = v156;
  v142 = v140 + 96;
  v141 = (void *)*((void *)v140 + 12);
  if (v141)
  {
    *((void *)v140 + 13) = v141;
    operator delete(v141);
    void *v142 = 0;
    v142[1] = 0;
    v142[2] = 0;
  }
  void *v142 = 0;
  v142[1] = 0;
  v142[2] = 0;
  if (SHIBYTE(v158) < 0) {
    operator delete(__p[0]);
  }
  int v143 = *((char *)a5 + 23);
  if (v143 >= 0) {
    size_t v144 = *((unsigned __int8 *)a5 + 23);
  }
  else {
    size_t v144 = (size_t)a5[1];
  }
  unint64_t v145 = v144 + 7;
  if (v144 + 7 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_248;
  }
  if (v145 >= 0x17)
  {
    uint64_t v147 = (v145 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v145 | 7) != 0x17) {
      uint64_t v147 = v145 | 7;
    }
    uint64_t v148 = v147 + 1;
    v146 = operator new(v147 + 1);
    __p[1] = (void *)(v144 + 7);
    unint64_t v158 = v148 | 0x8000000000000000;
    __p[0] = v146;
    goto LABEL_238;
  }
  __p[1] = 0;
  unint64_t v158 = 0;
  __p[0] = 0;
  v146 = __p;
  HIBYTE(v158) = v144 + 7;
  if (v144)
  {
LABEL_238:
    if (v143 >= 0) {
      v149 = a5;
    }
    else {
      v149 = *a5;
    }
    memmove(v146, v149, v144);
  }
  strcpy((char *)v146 + v144, "_v_s_in");
  *(void *)&long long v156 = __p;
  *((_DWORD *)sub_19E288458(a1, (const void **)__p, (uint64_t)&unk_19E351150, (_OWORD **)&v156) + 19) = 5;
  if (SHIBYTE(v158) < 0) {
    operator delete(__p[0]);
  }
}

void sub_19E27AFB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E27B058(long long **a1@<X0>, const void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v130 = *MEMORY[0x1E4F143B8];
  *(void *)a6 = 0;
  *(void *)(a6 + 8) = 0;
  *(void *)(a6 + 16) = 0;
  *(_OWORD *)v116 = 0u;
  *(_OWORD *)v117 = 0u;
  int v118 = 1065353216;
  v7 = *a1;
  int v105 = a1[1];
  if (*a1 != v105)
  {
    unint64_t v108 = (void *)(a4 + 8);
    do
    {
      while (1)
      {
        if (*((char *)v7 + 23) < 0)
        {
          sub_19E13C2D0(__p, *(void **)v7, *((void *)v7 + 1));
        }
        else
        {
          long long v8 = *v7;
          uint64_t v120 = *((void *)v7 + 2);
          *(_OWORD *)__p = v8;
        }
        unint64_t v9 = *((unsigned int *)v7 + 6);
        LODWORD(v121[0]) = *((_DWORD *)v7 + 6);
        if (v116[1])
        {
          uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v116[1]);
          v10.i16[0] = vaddlv_u8(v10);
          if (v10.u32[0] > 1uLL)
          {
            unint64_t v11 = v9;
            if (v116[1] <= (void *)v9) {
              unint64_t v11 = v9 % (unint64_t)v116[1];
            }
          }
          else
          {
            unint64_t v11 = (LODWORD(v116[1]) - 1) & v9;
          }
          v12 = (uint64_t **)*((void *)v116[0] + v11);
          if (v12)
          {
            v13 = *v12;
            if (v13)
            {
              if (v10.u32[0] < 2uLL)
              {
                while (1)
                {
                  unint64_t v15 = v13[1];
                  if (v15 == v9)
                  {
                    if (*((_DWORD *)v13 + 4) == v9) {
                      goto LABEL_3;
                    }
                  }
                  else if ((v15 & ((unint64_t)v116[1] - 1)) != v11)
                  {
                    goto LABEL_28;
                  }
                  v13 = (uint64_t *)*v13;
                  if (!v13) {
                    goto LABEL_28;
                  }
                }
              }
              do
              {
                unint64_t v14 = v13[1];
                if (v14 == v9)
                {
                  if (*((_DWORD *)v13 + 4) == v9) {
                    goto LABEL_3;
                  }
                }
                else
                {
                  if ((void *)v14 >= v116[1]) {
                    v14 %= (unint64_t)v116[1];
                  }
                  if (v14 != v11) {
                    break;
                  }
                }
                v13 = (uint64_t *)*v13;
              }
              while (v13);
            }
          }
        }
LABEL_28:
        sub_19E2885F4((uint64_t)v116, (unsigned int *)v121, v121);
        uint64_t v16 = *v108;
        if (a5) {
          break;
        }
        if (!v16) {
          goto LABEL_119;
        }
        int v41 = SHIBYTE(v120);
        int32x4_t v42 = __p[0];
        v43 = __p[1];
        v44 = v120 >= 0 ? (void *)HIBYTE(v120) : __p[1];
        uint64_t v45 = v120 >= 0 ? __p : (void **)__p[0];
        int v46 = v108;
        do
        {
          int v47 = *(char *)(v16 + 55);
          if (v47 >= 0) {
            size_t v48 = *(unsigned __int8 *)(v16 + 55);
          }
          else {
            size_t v48 = *(void *)(v16 + 40);
          }
          if (v47 >= 0) {
            unint64_t v49 = (const void *)(v16 + 32);
          }
          else {
            unint64_t v49 = *(const void **)(v16 + 32);
          }
          if ((unint64_t)v44 >= v48) {
            size_t v50 = v48;
          }
          else {
            size_t v50 = (size_t)v44;
          }
          int v51 = memcmp(v49, v45, v50);
          BOOL v52 = v48 < (unint64_t)v44;
          if (v51) {
            BOOL v52 = v51 < 0;
          }
          BOOL v53 = !v52;
          if (v52) {
            v54 = (uint64_t *)(v16 + 8);
          }
          else {
            v54 = (uint64_t *)v16;
          }
          if (v53) {
            int v46 = (void *)v16;
          }
          uint64_t v16 = *v54;
        }
        while (*v54);
        if (v46 == v108) {
          goto LABEL_119;
        }
        int v57 = (const void *)v46[4];
        v56 = v46 + 4;
        v55 = v57;
        int v58 = *((char *)v56 + 23);
        if (v58 >= 0) {
          size_t v59 = *((unsigned __int8 *)v56 + 23);
        }
        else {
          size_t v59 = v56[1];
        }
        if (v58 >= 0) {
          unint64_t v60 = v56;
        }
        else {
          unint64_t v60 = v55;
        }
        if (v59 >= (unint64_t)v44) {
          size_t v61 = (size_t)v44;
        }
        else {
          size_t v61 = v59;
        }
        int v62 = memcmp(v45, v60, v61);
        BOOL v63 = (unint64_t)v44 >= v59;
        if (v62) {
          BOOL v63 = v62 >= 0;
        }
        if (!v63)
        {
LABEL_119:
          int v67 = *((char *)a2 + 23);
          if (v67 >= 0) {
            size_t v68 = *((unsigned __int8 *)a2 + 23);
          }
          else {
            size_t v68 = (size_t)a2[1];
          }
          unint64_t v69 = v68 + 4;
          if (v68 + 4 > 0x7FFFFFFFFFFFFFF7) {
            sub_19E13C370();
          }
          if (v69 >= 0x17)
          {
            uint64_t v75 = (v69 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v69 | 7) != 0x17) {
              uint64_t v75 = v69 | 7;
            }
            uint64_t v76 = v75 + 1;
            unint64_t v70 = operator new(v75 + 1);
            *(void *)&__dst[8] = v68 + 4;
            *(void *)&__dst[16] = v76 | 0x8000000000000000;
            *(void *)__dst = v70;
          }
          else
          {
            memset(__dst, 0, sizeof(__dst));
            unint64_t v70 = __dst;
            __dst[23] = v68 + 4;
            if (!v68) {
              goto LABEL_142;
            }
          }
          if (v67 >= 0) {
            int v77 = a2;
          }
          else {
            int v77 = *a2;
          }
          memmove(v70, v77, v68);
LABEL_142:
          strcpy(&v70[v68], "_out");
          unint64_t v74 = *(void *)(a6 + 8);
          if (v74 >= *(void *)(a6 + 16))
          {
LABEL_145:
            unint64_t v79 = sub_19E15A950((void **)a6, (uint64_t)__dst);
            int v80 = __dst[23];
            *(void *)(a6 + 8) = v79;
            if (v80 < 0) {
              operator delete(*(void **)__dst);
            }
LABEL_3:
            if (SHIBYTE(v120) < 0) {
              goto LABEL_151;
            }
            goto LABEL_4;
          }
          goto LABEL_143;
        }
        unint64_t v40 = *(void *)(a6 + 8);
        if (v40 >= *(void *)(a6 + 16)) {
          goto LABEL_147;
        }
        if ((v41 & 0x80000000) == 0) {
          goto LABEL_112;
        }
        sub_19E13C2D0(*(unsigned char **)(a6 + 8), v42, (unint64_t)v43);
LABEL_150:
        *(void *)(a6 + 8) = v40 + 24;
        *(void *)(a6 + 8) = v40 + 24;
        if ((SHIBYTE(v120) & 0x80000000) == 0) {
          goto LABEL_4;
        }
LABEL_151:
        operator delete(__p[0]);
        v7 += 2;
        if (v7 == v105) {
          goto LABEL_152;
        }
      }
      v17 = (char *)HIBYTE(v120);
      size_t v18 = (char *)__p[1];
      if (v16)
      {
        int v19 = __p[0];
        BOOL v20 = v120 >= 0 ? (void *)HIBYTE(v120) : __p[1];
        BOOL v21 = v120 >= 0 ? __p : (void **)__p[0];
        v22 = v108;
        do
        {
          int v23 = *(char *)(v16 + 55);
          if (v23 >= 0) {
            size_t v24 = *(unsigned __int8 *)(v16 + 55);
          }
          else {
            size_t v24 = *(void *)(v16 + 40);
          }
          if (v23 >= 0) {
            v25 = (const void *)(v16 + 32);
          }
          else {
            v25 = *(const void **)(v16 + 32);
          }
          if ((unint64_t)v20 >= v24) {
            size_t v26 = v24;
          }
          else {
            size_t v26 = (size_t)v20;
          }
          int v27 = memcmp(v25, v21, v26);
          BOOL v28 = v24 < (unint64_t)v20;
          if (v27) {
            BOOL v28 = v27 < 0;
          }
          BOOL v29 = !v28;
          if (v28) {
            int v30 = (uint64_t *)(v16 + 8);
          }
          else {
            int v30 = (uint64_t *)v16;
          }
          if (v29) {
            v22 = (void *)v16;
          }
          uint64_t v16 = *v30;
        }
        while (*v30);
        if (v22 != v108)
        {
          v33 = (const void *)v22[4];
          BOOL v32 = v22 + 4;
          int32x4_t v31 = v33;
          int v34 = *((char *)v32 + 23);
          if (v34 >= 0) {
            size_t v35 = *((unsigned __int8 *)v32 + 23);
          }
          else {
            size_t v35 = v32[1];
          }
          if (v34 >= 0) {
            int32x4_t v36 = v32;
          }
          else {
            int32x4_t v36 = v31;
          }
          if (v35 >= (unint64_t)v20) {
            size_t v37 = (size_t)v20;
          }
          else {
            size_t v37 = v35;
          }
          int v38 = memcmp(v21, v36, v37);
          BOOL v39 = (unint64_t)v20 >= v35;
          if (v38) {
            BOOL v39 = v38 >= 0;
          }
          if (v39)
          {
            unint64_t v40 = *(void *)(a6 + 8);
            if (v40 < *(void *)(a6 + 16))
            {
              if ((v17 & 0x80) != 0)
              {
                sub_19E13C2D0(*(unsigned char **)(a6 + 8), v19, (unint64_t)v18);
                goto LABEL_150;
              }
LABEL_112:
              long long v64 = *(_OWORD *)__p;
              *(void *)(v40 + 16) = v120;
              *(_OWORD *)unint64_t v40 = v64;
              goto LABEL_150;
            }
LABEL_147:
            *(void *)(a6 + 8) = sub_19E13D6AC((char **)a6, (uint64_t)__p);
            if (SHIBYTE(v120) < 0) {
              goto LABEL_151;
            }
            goto LABEL_4;
          }
        }
      }
      if ((char)v17 >= 0) {
        size_t v18 = v17;
      }
      unint64_t v65 = (unint64_t)(v18 + 4);
      if ((unint64_t)(v18 + 4) > 0x7FFFFFFFFFFFFFF7) {
        sub_19E13C370();
      }
      if (v65 >= 0x17)
      {
        uint64_t v71 = (v65 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v65 | 7) != 0x17) {
          uint64_t v71 = v65 | 7;
        }
        uint64_t v72 = v71 + 1;
        v66 = operator new(v71 + 1);
        *(void *)&__dst[8] = v18 + 4;
        *(void *)&__dst[16] = v72 | 0x8000000000000000;
        *(void *)__dst = v66;
      }
      else
      {
        memset(__dst, 0, sizeof(__dst));
        v66 = __dst;
        __dst[23] = (_BYTE)v18 + 4;
        if (!v18) {
          goto LABEL_133;
        }
      }
      if ((char)v17 >= 0) {
        v73 = __p;
      }
      else {
        v73 = (void **)__p[0];
      }
      memmove(v66, v73, (size_t)v18);
LABEL_133:
      strcpy(&v18[(void)v66], "_out");
      unint64_t v74 = *(void *)(a6 + 8);
      if (v74 >= *(void *)(a6 + 16)) {
        goto LABEL_145;
      }
LABEL_143:
      long long v78 = *(_OWORD *)__dst;
      *(void *)(v74 + 16) = *(void *)&__dst[16];
      *(_OWORD *)unint64_t v74 = v78;
      *(void *)(a6 + 8) = v74 + 24;
      if (SHIBYTE(v120) < 0) {
        goto LABEL_151;
      }
LABEL_4:
      v7 += 2;
    }
    while (v7 != v105);
  }
LABEL_152:
  uint64_t v114 = 0;
  long long v115 = 0uLL;
  if (a3 == 5)
  {
    if (a5)
    {
      HIBYTE(v120) = 5;
      strcpy((char *)__p, "_h_in");
      char v122 = 5;
      strcpy((char *)v121, "_c_in");
      sub_19E24DE98(v113, (uint64_t)__p, 2uLL);
    }
    else
    {
      __dst[23] = 6;
      strcpy(__dst, "_h_out");
      char v129 = 6;
      strcpy((char *)v128, "_c_out");
      sub_19E24DE98(v113, (uint64_t)__dst, 2uLL);
    }
    goto LABEL_167;
  }
  if (a3 == 6)
  {
    if (a5)
    {
      HIBYTE(v120) = 5;
      strcpy((char *)__p, "_h_in");
      char v122 = 5;
      strcpy((char *)v121, "_c_in");
      char v124 = 7;
      strcpy((char *)v123, "_r_h_in");
      char v126 = 7;
      strcpy((char *)v125, "_r_c_in");
    }
    else
    {
      HIBYTE(v120) = 6;
      strcpy((char *)__p, "_h_out");
      char v122 = 6;
      strcpy((char *)v121, "_c_out");
      char v124 = 8;
      strcpy((char *)v123, "_r_h_out");
      char v126 = 8;
      strcpy((char *)v125, "_r_c_out");
    }
    sub_19E24DE98(__dst, (uint64_t)__p, 4uLL);
    v109 = *(void ***)&__dst[8];
    v81 = *(void ***)__dst;
    uint64_t v114 = *(void **)__dst;
    long long v115 = *(_OWORD *)&__dst[8];
    memset(__dst, 0, sizeof(__dst));
    if (v126 < 0)
    {
      operator delete(v125[0]);
      if ((v124 & 0x80000000) == 0) {
        goto LABEL_173;
      }
    }
    else if ((v124 & 0x80000000) == 0)
    {
      goto LABEL_173;
    }
    operator delete(v123[0]);
LABEL_173:
    if (v122 < 0)
    {
      operator delete(v121[0]);
      if ((SHIBYTE(v120) & 0x80000000) == 0) {
        goto LABEL_181;
      }
    }
    else if ((SHIBYTE(v120) & 0x80000000) == 0)
    {
      goto LABEL_181;
    }
    v82 = __p[0];
LABEL_180:
    operator delete(v82);
    goto LABEL_181;
  }
  if (a3 != 20) {
    goto LABEL_219;
  }
  if (a5)
  {
    HIBYTE(v120) = 7;
    strcpy((char *)__p, "_k_s_in");
    char v122 = 7;
    strcpy((char *)v121, "_v_s_in");
    sub_19E24DE98(v113, (uint64_t)__p, 2uLL);
  }
  else
  {
    __dst[23] = 8;
    strcpy(__dst, "_k_s_out");
    char v129 = 8;
    strcpy((char *)v128, "_v_s_out");
    sub_19E24DE98(v113, (uint64_t)__dst, 2uLL);
  }
LABEL_167:
  v81 = (void **)v113[0];
  v109 = (void **)v113[1];
  long long v115 = *(_OWORD *)&v113[1];
  uint64_t v114 = v113[0];
  memset(v113, 0, sizeof(v113));
  if (a5) {
    goto LABEL_173;
  }
  if (v129 < 0)
  {
    operator delete(v128[0]);
    if ((__dst[23] & 0x80000000) != 0)
    {
LABEL_179:
      v82 = *(void **)__dst;
      goto LABEL_180;
    }
  }
  else if ((__dst[23] & 0x80000000) != 0)
  {
    goto LABEL_179;
  }
LABEL_181:
  v83 = v109;
  uint64_t v110 = v81;
  if (v81 != v83)
  {
    v84 = v81;
    while (1)
    {
      if (*((char *)v84 + 23) < 0)
      {
        sub_19E13C2D0(v113, *v84, (unint64_t)v84[1]);
      }
      else
      {
        long long v85 = *(_OWORD *)v84;
        v113[2] = v84[2];
        *(_OWORD *)uint64_t v113 = v85;
      }
      int v86 = *((char *)a2 + 23);
      if (v86 >= 0) {
        size_t v87 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        size_t v87 = (size_t)a2[1];
      }
      int v88 = SHIBYTE(v113[2]);
      if (SHIBYTE(v113[2]) >= 0) {
        size_t v89 = HIBYTE(v113[2]);
      }
      else {
        size_t v89 = (size_t)v113[1];
      }
      unint64_t v90 = v89 + v87;
      if (v89 + v87 > 0x7FFFFFFFFFFFFFF7) {
        sub_19E13C370();
      }
      if (v90 > 0x16) {
        break;
      }
      v111[1] = 0;
      unint64_t v112 = 0;
      v111[0] = 0;
      v91 = (char *)v111;
      HIBYTE(v112) = v89 + v87;
      if (v87) {
        goto LABEL_197;
      }
LABEL_201:
      v93 = &v91[v87];
      if (v89)
      {
        if (v88 >= 0) {
          v94 = v113;
        }
        else {
          v94 = (void **)v113[0];
        }
        memmove(v93, v94, v89);
      }
      v93[v89] = 0;
      unint64_t v95 = *(void *)(a6 + 8);
      if (v95 >= *(void *)(a6 + 16))
      {
        v99 = sub_19E15A950((void **)a6, (uint64_t)v111);
        int v100 = SHIBYTE(v112);
        *(void *)(a6 + 8) = v99;
        if (v100 < 0)
        {
          operator delete(v111[0]);
          if ((SHIBYTE(v113[2]) & 0x80000000) == 0) {
            goto LABEL_184;
          }
        }
        else if ((SHIBYTE(v113[2]) & 0x80000000) == 0)
        {
          goto LABEL_184;
        }
LABEL_215:
        operator delete(v113[0]);
        v84 += 3;
        if (v84 == v83) {
          goto LABEL_216;
        }
      }
      else
      {
        long long v96 = *(_OWORD *)v111;
        *(void *)(v95 + 16) = v112;
        *(_OWORD *)unint64_t v95 = v96;
        *(void *)(a6 + 8) = v95 + 24;
        if (SHIBYTE(v113[2]) < 0) {
          goto LABEL_215;
        }
LABEL_184:
        v84 += 3;
        if (v84 == v83) {
          goto LABEL_216;
        }
      }
    }
    uint64_t v97 = (v90 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v90 | 7) != 0x17) {
      uint64_t v97 = v90 | 7;
    }
    uint64_t v98 = v97 + 1;
    v91 = (char *)operator new(v97 + 1);
    v111[1] = (void *)(v89 + v87);
    unint64_t v112 = v98 | 0x8000000000000000;
    v111[0] = v91;
    if (!v87) {
      goto LABEL_201;
    }
LABEL_197:
    if (v86 >= 0) {
      v92 = a2;
    }
    else {
      v92 = *a2;
    }
    memmove(v91, v92, v87);
    goto LABEL_201;
  }
LABEL_216:
  if (v110)
  {
    for (; v83 != v110; v83 -= 3)
    {
      if (*((char *)v83 - 1) < 0) {
        operator delete(*(v83 - 3));
      }
    }
    operator delete(v110);
  }
LABEL_219:
  v101 = v117[0];
  if (v117[0])
  {
    do
    {
      v102 = (void *)*v101;
      operator delete(v101);
      v101 = v102;
    }
    while (v102);
  }
  v103 = v116[0];
  v116[0] = 0;
  if (v103) {
    operator delete(v103);
  }
}

void sub_19E27BBAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  if (*(char *)(v63 - 105) < 0) {
    operator delete(*(void **)(v63 - 128));
  }
  sub_19E32F7B0(v63 - 152);
  sub_19E13A748(&a30);
  sub_19E27BDA0((uint64_t)&a33);
  sub_19E13A748(v62);
  _Unwind_Resume(a1);
}

uint64_t sub_19E27BDA0(uint64_t a1)
{
  v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (void *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void sub_19E27BDEC(void *a1@<X0>, void *a2@<X1>, const char *a3@<X2>, uint64_t **a4@<X8>)
{
  v4 = a2;
  v1047 = 0;
  v1048 = 0;
  uint64_t v1049 = 0;
  sub_19E28750C(&v1047, a2[15], v4[16], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4[16] - a2[15]) >> 3));
  v1044 = 0;
  v1045 = 0;
  unint64_t v1046 = 0;
  a4[2] = 0;
  a4[1] = 0;
  v798 = a4;
  *a4 = (uint64_t *)(a4 + 1);
  v1043[0] = 0;
  v1043[1] = 0;
  v1042 = v1043;
  unint64_t v9 = (const void **)v4[1];
  if (v9 != v4 + 2)
  {
    do
    {
      sub_19E159B70((uint64_t **)&v1042, (uint64_t *)v1043, v9 + 4, (uint64_t)(v9 + 4));
      uint64_t v16 = (const void **)v9[1];
      if (v16)
      {
        do
        {
          v17 = (const void ***)v16;
          uint64_t v16 = (const void **)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (const void ***)v9[2];
          _ZF = *v17 == v9;
          unint64_t v9 = (const void **)v17;
        }
        while (!_ZF);
      }
      unint64_t v9 = (const void **)v17;
    }
    while (v17 != v4 + 2);
  }
  v1041[0] = 0;
  v1041[1] = 0;
  v1040 = v1041;
  uint8x8_t v10 = (const void **)v4[4];
  if (v10 != v4 + 5)
  {
    do
    {
      sub_19E159B70((uint64_t **)&v1040, (uint64_t *)v1041, v10 + 4, (uint64_t)(v10 + 4));
      size_t v18 = (const void **)v10[1];
      if (v18)
      {
        do
        {
          int v19 = (const void ***)v18;
          size_t v18 = (const void **)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          int v19 = (const void ***)v10[2];
          _ZF = *v19 == v10;
          uint8x8_t v10 = (const void **)v19;
        }
        while (!_ZF);
      }
      uint8x8_t v10 = (const void **)v19;
    }
    while (v19 != v4 + 5);
  }
  unint64_t v11 = v1047;
  v797 = v1048;
  if (v1047 == v1048) {
    goto LABEL_1281;
  }
  __asm
  {
    FMOV            V8.2S, #1.0
    FMOV            V3.4S, #1.0
  }
  __n128 v805 = v7;
  __n128 v806 = v8;
  long long v807 = _Q3;
  v796 = v4;
  v794 = a1;
  while (2)
  {
    while (2)
    {
      v799 = v11;
      if (v11[23] < 0)
      {
        sub_19E13C2D0(&v1038, *(void **)v11, *((void *)v11 + 1));
      }
      else
      {
        long long v20 = *(_OWORD *)v11;
        uint64_t v1039 = *((void *)v11 + 2);
        long long v1038 = v20;
      }
      long long v1033 = 0u;
      long long v1034 = 0u;
      long long v1031 = 0u;
      long long v1032 = 0u;
      long long v1029 = 0u;
      long long v1030 = 0u;
      long long v1027 = 0u;
      long long v1028 = 0u;
      long long v1025 = 0u;
      long long v1026 = 0u;
      long long v1023 = 0u;
      long long v1024 = 0u;
      long long v1021 = 0u;
      long long v1022 = 0u;
      long long v1019 = 0u;
      long long v1020 = 0u;
      long long v1017 = 0u;
      long long v1018 = 0u;
      long long v1015 = 0u;
      long long v1016 = 0u;
      long long v1013 = 0u;
      long long v1014 = 0u;
      long long v1011 = 0u;
      long long v1012 = 0u;
      long long v1009 = 0u;
      long long v1010 = 0u;
      long long v1007 = 0u;
      long long v1008 = 0u;
      long long v1005 = 0u;
      long long v1006 = 0u;
      long long v1003 = 0u;
      long long v1004 = 0u;
      sub_19E30AD68((uint64_t)v4, (uint64_t)&v1038);
      sub_19E30A5CC((uint64_t)v4, (uint64_t)&v1038, (char **)&v1001);
      sub_19E30A8D4((uint64_t)v4, (uint64_t)&v1038, (char **)&v999);
      uint64_t v21 = v1003;
      if ((void)v1003 != 20) {
        goto LABEL_40;
      }
      __p[23] = 0;
      __p[0] = 0;
      *(_DWORD *)&__p[24] = 0;
      sub_19E2888F8((char **)__str, ((char *)v1002 - (unsigned char *)v1001) >> 5, (uint64_t)__p);
      if ((__p[23] & 0x80000000) == 0)
      {
        v22 = (char *)v1001;
        if (v1002 == v1001) {
          goto LABEL_31;
        }
LABEL_29:
        unint64_t v23 = 0;
        uint64_t v24 = 24;
        do
        {
          v25 = (char *)__str[0] + 32 * *(int *)&v22[v24];
          std::string::operator=((std::string *)(v25 - 32), (const std::string *)&v22[v24 - 24]);
          *((_DWORD *)v25 - 2) = *(_DWORD *)&v22[v24];
          ++v23;
          v22 = (char *)v1001;
          v24 += 32;
        }
        while (v23 < ((char *)v1002 - (unsigned char *)v1001) >> 5);
        goto LABEL_31;
      }
      operator delete(*(void **)__p);
      v22 = (char *)v1001;
      if (v1002 != v1001) {
        goto LABEL_29;
      }
LABEL_31:
      sub_19E288AB4((uint64_t)&v1001, __str[0], __str[1], ((char *)__str[1] - (char *)__str[0]) >> 5);
      size_t v26 = __str[0];
      if (__str[0])
      {
        int v27 = __str[1];
        BOOL v28 = __str[0];
        if (__str[1] != __str[0])
        {
          do
          {
            if (v27[-1].__r_.__value_.__s.__data_[15] < 0) {
              operator delete((void *)v27[-2].__r_.__value_.__r.__words[2]);
            }
            int v27 = (std::string *)((char *)v27 - 32);
          }
          while (v27 != v26);
          BOOL v28 = __str[0];
        }
        __str[1] = v26;
        operator delete(v28);
      }
      uint64_t v21 = v1003;
LABEL_40:
      sub_19E27B058((long long **)&v1001, (const void **)&v1038, v21, (uint64_t)&v1042, 1, (uint64_t)__p);
      BOOL v29 = *(void **)__p;
      uint64_t v30 = *(void *)&__p[8];
      sub_19E27B058((long long **)&v999, (const void **)&v1038, v1003, (uint64_t)&v1040, 0, (uint64_t)__p);
      uint64_t v31 = *(void *)__p;
      v801 = v29;
      uint64_t v802 = *(void *)&__p[8];
      sub_19E27A060(v798, (uint64_t *)&v1003, (long long **)&v1001, (uint64_t)&v1042, (const void **)&v1038);
      uint64_t v32 = v1003;
      uint64_t v811 = v30;
      uint64_t v827 = v31;
      switch((uint64_t)v1003)
      {
        case 0:
          *(_DWORD *)&__p[4] = v1011;
          *(_DWORD *)__p = v1019;
          *(_DWORD *)&__p[28] = 0;
          *(_DWORD *)&__p[8] = (WORD4(v1010) & 0x100) == 0;
          __p[40] = 0;
          *(void *)&__p[56] = _D8;
          *(void *)v938 = 0;
          *(void *)&__p[12] = 0;
          *(void *)&__p[20] = _D8;
          *(void *)&__p[84] = 0;
          *(_DWORD *)&__p[52] = -1;
          *(void *)&__p[44] = 0;
          *(void *)&__p[32] = 0;
          memset(&__p[100], 0, 24);
          long long v989 = 0uLL;
          v990 = 0;
          switch(*((void *)&v1006 + 1))
          {
            case 0:
              int v79 = -1;
              goto LABEL_1061;
            case 1:
              *(_DWORD *)&__p[52] = 3;
              goto LABEL_1106;
            case 2:
              int v79 = 1;
LABEL_1061:
              *(_DWORD *)&__p[52] = v79;
              goto LABEL_1106;
            case 3:
              *(_DWORD *)&__p[52] = 5;
              *(void *)&__p[56] = 0x3F3745393F2AAAB0;
              goto LABEL_1106;
            case 4:
              memset(__str, 0, 24);
              sub_19E2898F4(__str, v31, v802, 0xAAAAAAAAAAAAAAABLL * ((v802 - v31) >> 3));
              uint64_t v688 = v989;
              if ((void)v989)
              {
                uint64_t v689 = *((void *)&v989 + 1);
                v690 = (void *)v989;
                if (*((void *)&v989 + 1) != (void)v989)
                {
                  do
                  {
                    if (*(char *)(v689 - 1) < 0) {
                      operator delete(*(void **)(v689 - 24));
                    }
                    v689 -= 24;
                  }
                  while (v689 != v688);
                  v690 = (void *)v989;
                }
                *((void *)&v989 + 1) = v688;
                operator delete(v690);
              }
              long long v989 = *(_OWORD *)__str;
              v990 = __str[2];
              int v702 = *(char *)(v31 + 23);
              if (v702 >= 0) {
                size_t v703 = *(unsigned __int8 *)(v31 + 23);
              }
              else {
                size_t v703 = *(void *)(v31 + 8);
              }
              unint64_t v704 = v703 + 15;
              if (v703 + 15 > 0x7FFFFFFFFFFFFFF7) {
                sub_19E13C370();
              }
              if (v704 >= 0x17)
              {
                uint64_t v706 = (v704 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v704 | 7) != 0x17) {
                  uint64_t v706 = v704 | 7;
                }
                uint64_t v707 = v706 + 1;
                v705 = (std::string *)operator new(v706 + 1);
                __str[2] = (std::string *)(v707 | 0x8000000000000000);
                __str[0] = v705;
                __str[1] = (std::string *)(v703 + 15);
              }
              else
              {
                memset(__str, 0, 24);
                v705 = (std::string *)__str;
                HIBYTE(__str[2]) = v703 + 15;
                if (!v703) {
                  goto LABEL_1103;
                }
              }
              if (v702 >= 0) {
                v708 = (const void *)v31;
              }
              else {
                v708 = *(const void **)v31;
              }
              memmove(v705, v708, v703);
LABEL_1103:
              uint64_t v30 = v811;
              strcpy((char *)v705 + v703, "_before_softmax");
              if (*(char *)(v31 + 23) < 0) {
                goto LABEL_1104;
              }
              goto LABEL_1105;
            case 5:
              memset(__str, 0, 24);
              sub_19E2898F4(__str, v31, v802, 0xAAAAAAAAAAAAAAABLL * ((v802 - v31) >> 3));
              uint64_t v691 = v989;
              if ((void)v989)
              {
                uint64_t v692 = *((void *)&v989 + 1);
                v693 = (void *)v989;
                if (*((void *)&v989 + 1) != (void)v989)
                {
                  do
                  {
                    if (*(char *)(v692 - 1) < 0) {
                      operator delete(*(void **)(v692 - 24));
                    }
                    v692 -= 24;
                  }
                  while (v692 != v691);
                  v693 = (void *)v989;
                }
                *((void *)&v989 + 1) = v691;
                operator delete(v693);
              }
              long long v989 = *(_OWORD *)__str;
              v990 = __str[2];
              int v763 = *(char *)(v31 + 23);
              if (v763 >= 0) {
                size_t v764 = *(unsigned __int8 *)(v31 + 23);
              }
              else {
                size_t v764 = *(void *)(v31 + 8);
              }
              unint64_t v765 = v764 + 12;
              if (v764 + 12 > 0x7FFFFFFFFFFFFFF7) {
                sub_19E13C370();
              }
              if (v765 >= 0x17)
              {
                uint64_t v767 = (v765 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v765 | 7) != 0x17) {
                  uint64_t v767 = v765 | 7;
                }
                uint64_t v768 = v767 + 1;
                v766 = (std::string *)operator new(v767 + 1);
                __str[2] = (std::string *)(v768 | 0x8000000000000000);
                __str[0] = v766;
                __str[1] = (std::string *)(v764 + 12);
              }
              else
              {
                memset(__str, 0, 24);
                v766 = (std::string *)__str;
                HIBYTE(__str[2]) = v764 + 12;
                if (!v764) {
                  goto LABEL_1246;
                }
              }
              if (v763 >= 0) {
                v769 = (const void *)v31;
              }
              else {
                v769 = *(const void **)v31;
              }
              memmove(v766, v769, v764);
LABEL_1246:
              uint64_t v30 = v811;
              strcpy((char *)v766 + v764, "_before_relu");
              if (*(char *)(v31 + 23) < 0) {
LABEL_1104:
              }
                operator delete(*(void **)v31);
LABEL_1105:
              long long v709 = *(_OWORD *)__str;
              *(std::string **)(v31 + 16) = __str[2];
              *(_OWORD *)uint64_t v31 = v709;
LABEL_1106:
              uint64_t v694 = (uint64_t)v801;
              goto LABEL_1107;
            default:
              uint64_t v694 = (uint64_t)v801;
              if ((*((void *)&v1006 + 1) & 0xFFFFFFFFFFFFFFFELL) == 6) {
                goto LABEL_1107;
              }
              switch(*((void *)&v1006 + 1))
              {
                case 0xCLL:
                  int v695 = 22;
                  break;
                case 0xALL:
                  int v695 = 19;
                  break;
                case 8:
                  int v695 = 7;
                  break;
                default:
                  goto LABEL_1107;
              }
              *(_DWORD *)&__p[52] = v695;
LABEL_1107:
              HIBYTE(__str[2]) = 13;
              strcpy((char *)__str, "inner_product");
              uint64_t v913 = 0;
              v911 = 0;
              v912 = 0;
              sub_19E28750C(&v911, v694, v30, 0xAAAAAAAAAAAAAAABLL * ((v30 - v694) >> 3));
              v909 = 0;
              v908 = 0;
              uint64_t v910 = 0;
              unint64_t v710 = 0xAAAAAAAAAAAAAAABLL * ((v802 - v31) >> 3);
              sub_19E28750C(&v908, v31, v802, v710);
              sub_19E2857DC(a1, (uint64_t *)&v911, (uint64_t *)&v908, &v872);
              v711 = (void **)v908;
              if (v908)
              {
                v712 = v909;
                v713 = v908;
                if (v909 != v908)
                {
                  do
                  {
                    if (*((char *)v712 - 1) < 0) {
                      operator delete(*(v712 - 3));
                    }
                    v712 -= 3;
                  }
                  while (v712 != v711);
                  v713 = v908;
                }
                v909 = v711;
                operator delete(v713);
              }
              v714 = (void **)v911;
              if (v911)
              {
                v715 = v912;
                v716 = v911;
                if (v912 != v911)
                {
                  do
                  {
                    if (*((char *)v715 - 1) < 0) {
                      operator delete(*(v715 - 3));
                    }
                    v715 -= 3;
                  }
                  while (v715 != v714);
                  v716 = v911;
                }
                v912 = v714;
                operator delete(v716);
              }
              if (SHIBYTE(__str[2]) < 0) {
                operator delete(__str[0]);
              }
              uint64_t v717 = v1031;
              v718 = (char *)operator new(0x58uLL);
              *((void *)v718 + 1) = 0;
              *(void *)v718 = &unk_1EF0ABE18;
              int v719 = v1011;
              int v720 = v1019;
              *((void *)v718 + 2) = 0;
              *((void *)v718 + 3) = &unk_1EF0A8830;
              *(_OWORD *)(v718 + 56) = 0u;
              *(_OWORD *)(v718 + 72) = 0u;
              *((_DWORD *)v718 + 8) = v719;
              *((_DWORD *)v718 + 9) = v720;
              *((void *)v718 + 5) = v717;
              v718[48] = 0;
              *(void *)&long long v870 = v718 + 24;
              *((void *)&v870 + 1) = v718;
              v721 = v872;
              v906 = v718 + 24;
              v907 = (std::__shared_weak_count *)v718;
              atomic_fetch_add_explicit((atomic_ullong *volatile)v718 + 1, 1uLL, memory_order_relaxed);
              (*(void (**)(void *, char **, __n128, __n128))(*(void *)v721 + 400))(v721, &v906, v805, v806);
              v722 = v907;
              if (v907 && !atomic_fetch_add(&v907->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v722->__on_zero_shared)(v722);
                std::__shared_weak_count::__release_weak(v722);
                if (!*(_DWORD *)&__p[8]) {
                  goto LABEL_1135;
                }
              }
              else if (!*(_DWORD *)&__p[8])
              {
                goto LABEL_1135;
              }
              v723 = v1035;
              v724 = (char *)operator new(0x58uLL);
              *((void *)v724 + 1) = 0;
              *(void *)v724 = &unk_1EF0ABDE0;
              int v725 = v1019;
              *((void *)v724 + 2) = 0;
              *((void *)v724 + 3) = &unk_1EF0A8810;
              *(_OWORD *)(v724 + 56) = 0u;
              *(_OWORD *)(v724 + 72) = 0u;
              *((_DWORD *)v724 + 8) = v725;
              *((void *)v724 + 5) = v723;
              v724[48] = 0;
              __str[0] = (std::string *)(v724 + 24);
              __str[1] = (std::string *)v724;
              v726 = v872;
              v904 = v724 + 24;
              v905 = (std::__shared_weak_count *)v724;
              atomic_fetch_add_explicit((atomic_ullong *volatile)v724 + 1, 1uLL, memory_order_relaxed);
              (*(void (**)(void *, char **, __n128, __n128))(*(void *)v726 + 392))(v726, &v904, v805, v806);
              v727 = v905;
              if (v905 && !atomic_fetch_add(&v905->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v727->__on_zero_shared)(v727);
                std::__shared_weak_count::__release_weak(v727);
              }
              v728 = (std::__shared_weak_count *)__str[1];
              if (__str[1]
                && !atomic_fetch_add((atomic_ullong *volatile)&__str[1]->__r_.__value_.__l.__size_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v728->__on_zero_shared)(v728);
                std::__shared_weak_count::__release_weak(v728);
              }
LABEL_1135:
              uint64_t v729 = *((void *)&v1006 + 1);
              if (*((void *)&v1006 + 1) != 4) {
                goto LABEL_1174;
              }
              LODWORD(__str[3]) = 256;
              *(_OWORD *)__str = xmmword_19E351E10;
              __str[2] = (std::string *)1;
              int v730 = SHIBYTE(v1039);
              if (v1039 >= 0) {
                size_t v731 = HIBYTE(v1039);
              }
              else {
                size_t v731 = *((void *)&v1038 + 1);
              }
              unint64_t v732 = v731 + 8;
              if (v731 + 8 > 0x7FFFFFFFFFFFFFF7) {
                sub_19E13C370();
              }
              if (v732 >= 0x17)
              {
                uint64_t v734 = (v732 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v732 | 7) != 0x17) {
                  uint64_t v734 = v732 | 7;
                }
                uint64_t v735 = v734 + 1;
                p_dst = (long long *)operator new(v734 + 1);
                unint64_t v988 = v735 | 0x8000000000000000;
                *(void *)&long long __dst = p_dst;
                *((void *)&__dst + 1) = v731 + 8;
              }
              else
              {
                unint64_t v988 = 0;
                long long __dst = 0uLL;
                p_dst = &__dst;
                HIBYTE(v988) = v731 + 8;
                if (!v731) {
                  goto LABEL_1150;
                }
              }
              if (v730 >= 0) {
                v736 = &v1038;
              }
              else {
                v736 = (long long *)v1038;
              }
              memmove(p_dst, v736, v731);
LABEL_1150:
              uint64_t v30 = v811;
              strcpy((char *)p_dst + v731, "_softmax");
              HIBYTE(v903) = 7;
              strcpy((char *)&v902, "softmax");
              uint64_t v901 = 0;
              v899 = 0;
              v900 = 0;
              sub_19E28750C(&v899, v31, v802, v710);
              v897 = 0;
              v896 = 0;
              uint64_t v898 = 0;
              sub_19E28750C(&v896, v989, *((uint64_t *)&v989 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v989 + 1) - v989) >> 3));
              sub_19E285BC4(a1, (uint64_t *)&v899, (uint64_t *)&v896, v868);
              v737 = (void **)v896;
              if (v896)
              {
                v738 = v897;
                v739 = v896;
                if (v897 != v896)
                {
                  do
                  {
                    if (*((char *)v738 - 1) < 0) {
                      operator delete(*(v738 - 3));
                    }
                    v738 -= 3;
                  }
                  while (v738 != v737);
                  v739 = v896;
                }
                v897 = v737;
                operator delete(v739);
              }
              v740 = (void **)v899;
              if (v899)
              {
                v741 = v900;
                v742 = v899;
                if (v900 != v899)
                {
                  do
                  {
                    if (*((char *)v741 - 1) < 0) {
                      operator delete(*(v741 - 3));
                    }
                    v741 -= 3;
                  }
                  while (v741 != v740);
                  v742 = v899;
                }
                v900 = v740;
                operator delete(v742);
              }
              if (SHIBYTE(v903) < 0)
              {
                operator delete((void *)v902);
                v743 = (std::__shared_weak_count *)v868[1];
                if (!v868[1]) {
                  goto LABEL_1171;
                }
              }
              else
              {
                v743 = (std::__shared_weak_count *)v868[1];
                if (!v868[1])
                {
LABEL_1171:
                  if ((SHIBYTE(v988) & 0x80000000) == 0) {
                    goto LABEL_1173;
                  }
                  goto LABEL_1172;
                }
              }
              if (atomic_fetch_add(&v743->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
                goto LABEL_1171;
              }
              ((void (*)(std::__shared_weak_count *))v743->__on_zero_shared)(v743);
              std::__shared_weak_count::__release_weak(v743);
              if (SHIBYTE(v988) < 0) {
LABEL_1172:
              }
                operator delete((void *)__dst);
LABEL_1173:
              uint64_t v729 = *((void *)&v1006 + 1);
LABEL_1174:
              if (v729 != 5) {
                goto LABEL_1212;
              }
              LODWORD(__str[0]) = 0;
              *(std::string **)((char *)__str + 4) = _D8;
              *(std::string **)((char *)&__str[3] + 4) = 0;
              *(_OWORD *)((char *)&__str[1] + 4) = 0uLL;
              int v744 = SHIBYTE(v1039);
              if (v1039 >= 0) {
                size_t v745 = HIBYTE(v1039);
              }
              else {
                size_t v745 = *((void *)&v1038 + 1);
              }
              unint64_t v746 = v745 + 5;
              if (v745 + 5 > 0x7FFFFFFFFFFFFFF7) {
                sub_19E13C370();
              }
              if (v746 >= 0x17)
              {
                uint64_t v748 = (v746 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v746 | 7) != 0x17) {
                  uint64_t v748 = v746 | 7;
                }
                uint64_t v749 = v748 + 1;
                v747 = (long long *)operator new(v748 + 1);
                unint64_t v988 = v749 | 0x8000000000000000;
                *(void *)&long long __dst = v747;
                *((void *)&__dst + 1) = v745 + 5;
              }
              else
              {
                unint64_t v988 = 0;
                long long __dst = 0uLL;
                v747 = &__dst;
                HIBYTE(v988) = v745 + 5;
                if (!v745) {
                  goto LABEL_1189;
                }
              }
              if (v744 >= 0) {
                v750 = &v1038;
              }
              else {
                v750 = (long long *)v1038;
              }
              memmove(v747, v750, v745);
LABEL_1189:
              uint64_t v30 = v811;
              strcpy((char *)v747 + v745, "_relu");
              HIBYTE(v903) = 10;
              strcpy((char *)&v902, "activation");
              uint64_t v894 = 0;
              v892 = 0;
              v893 = 0;
              sub_19E28750C(&v892, v31, v802, v710);
              v890 = 0;
              v889 = 0;
              uint64_t v891 = 0;
              sub_19E28750C(&v889, v989, *((uint64_t *)&v989 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v989 + 1) - v989) >> 3));
              sub_19E285FAC(a1, (uint64_t *)&v892, (uint64_t *)&v889, v868);
              v751 = (void **)v889;
              if (v889)
              {
                v752 = v890;
                v753 = v889;
                if (v890 != v889)
                {
                  do
                  {
                    if (*((char *)v752 - 1) < 0) {
                      operator delete(*(v752 - 3));
                    }
                    v752 -= 3;
                  }
                  while (v752 != v751);
                  v753 = v889;
                }
                v890 = v751;
                operator delete(v753);
              }
              v754 = (void **)v892;
              if (v892)
              {
                v755 = v893;
                v756 = v892;
                if (v893 != v892)
                {
                  do
                  {
                    if (*((char *)v755 - 1) < 0) {
                      operator delete(*(v755 - 3));
                    }
                    v755 -= 3;
                  }
                  while (v755 != v754);
                  v756 = v892;
                }
                v893 = v754;
                operator delete(v756);
              }
              if (SHIBYTE(v903) < 0)
              {
                operator delete((void *)v902);
                v757 = (std::__shared_weak_count *)v868[1];
                if (!v868[1]) {
                  goto LABEL_1210;
                }
              }
              else
              {
                v757 = (std::__shared_weak_count *)v868[1];
                if (!v868[1]) {
                  goto LABEL_1210;
                }
              }
              if (!atomic_fetch_add(&v757->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v757->__on_zero_shared)(v757);
                std::__shared_weak_count::__release_weak(v757);
                if ((SHIBYTE(v988) & 0x80000000) == 0)
                {
LABEL_1212:
                  v758 = (std::__shared_weak_count *)*((void *)&v870 + 1);
                  if (*((void *)&v870 + 1)
                    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v870 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v758->__on_zero_shared)(v758);
                    std::__shared_weak_count::__release_weak(v758);
                  }
                  v759 = (std::__shared_weak_count *)v873;
                  if (v873 && !atomic_fetch_add((atomic_ullong *volatile)v873 + 1, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v759->__on_zero_shared)(v759);
                    std::__shared_weak_count::__release_weak(v759);
                  }
                  uint64_t v760 = v989;
                  if ((void)v989)
                  {
                    uint64_t v761 = *((void *)&v989 + 1);
                    v762 = (void *)v989;
                    if (*((void *)&v989 + 1) != (void)v989)
                    {
                      do
                      {
                        if (*(char *)(v761 - 1) < 0) {
                          operator delete(*(void **)(v761 - 24));
                        }
                        v761 -= 24;
                      }
                      while (v761 != v760);
                      v762 = (void *)v989;
                    }
                    *((void *)&v989 + 1) = v760;
                    operator delete(v762);
                  }
                  goto LABEL_1022;
                }
LABEL_1211:
                operator delete((void *)__dst);
                goto LABEL_1212;
              }
LABEL_1210:
              if ((SHIBYTE(v988) & 0x80000000) == 0) {
                goto LABEL_1212;
              }
              goto LABEL_1211;
          }
        case 1:
          *(void *)&__p[4] = 0;
          *(void *)&__p[12] = 0x3F6666663727C5ACLL;
          *(_WORD *)&__p[20] = 0;
          memset(&__p[24], 0, 32);
          *(_DWORD *)&__p[56] = 1065353216;
          *(void *)&__p[60] = 0;
          *(void *)&__p[68] = 0x200000000;
          int v83 = DWORD2(v1011);
          if (SDWORD2(v1011) < 1)
          {
            *(void *)&__p[40] = 0x100000001;
            int v83 = v1011;
          }
          else
          {
            *(void *)&__p[40] = v1011;
          }
          *(_DWORD *)__p = v83;
          HIBYTE(__str[2]) = 9;
          strcpy((char *)__str, "batchnorm");
          uint64_t v921 = 0;
          v919 = 0;
          v920 = 0;
          sub_19E28750C(&v919, (uint64_t)v801, v30, 0xAAAAAAAAAAAAAAABLL * ((v30 - (uint64_t)v801) >> 3));
          v917 = 0;
          v916 = 0;
          uint64_t v918 = 0;
          sub_19E28750C(&v916, v31, v802, 0xAAAAAAAAAAAAAAABLL * ((v802 - v31) >> 3));
          sub_19E2853F4(a1, (uint64_t *)&v919, (uint64_t *)&v916, &v989);
          v613 = (void **)v916;
          if (v916)
          {
            v614 = v917;
            v615 = v916;
            if (v917 != v916)
            {
              do
              {
                if (*((char *)v614 - 1) < 0) {
                  operator delete(*(v614 - 3));
                }
                v614 -= 3;
              }
              while (v614 != v613);
              v615 = v916;
            }
            v917 = v613;
            operator delete(v615);
          }
          v616 = (void **)v919;
          if (v919)
          {
            v617 = v920;
            v618 = v919;
            if (v920 != v919)
            {
              do
              {
                if (*((char *)v617 - 1) < 0) {
                  operator delete(*(v617 - 3));
                }
                v617 -= 3;
              }
              while (v617 != v616);
              v618 = v919;
            }
            v920 = v616;
            operator delete(v618);
          }
          if (SHIBYTE(__str[2]) < 0) {
            operator delete(__str[0]);
          }
          LODWORD(__dst) = 4 * *(_DWORD *)__p;
          LODWORD(v902) = 1;
          LODWORD(v872) = 1;
          LODWORD(v870) = 1;
          v619 = (std::string *)operator new(0x58uLL);
          v619->__r_.__value_.__l.__size_ = 0;
          v619->__r_.__value_.__r.__words[2] = 0;
          v619->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EF0ABDE0;
          sub_19E289854((uint64_t)v868, (uint64_t)&v619[1], (int *)&__dst, (int *)&v902, (int *)&v872, (int *)&v870);
          __str[0] = v619 + 1;
          __str[1] = v619;
          uint64_t v620 = *(unsigned int *)__p;
          if (*(int *)__p < 1) {
            goto LABEL_895;
          }
          uint64_t v621 = v1031;
          v622 = v1035;
          unint64_t v623 = v619[1].__r_.__value_.__r.__words[2];
          if (*(_DWORD *)__p < 8u)
          {
            uint64_t v624 = 0;
LABEL_893:
            v625 = (int *)v622 + v624;
            v626 = (int *)(v621 + 4 * v624);
            v627 = (void *)(v623 + 16 * v624 + 8);
            uint64_t v628 = v620 - v624;
            do
            {
              int v629 = *v626++;
              *((_DWORD *)v627 - 2) = v629;
              int v630 = *v625++;
              *((_DWORD *)v627 - 1) = v630;
              void *v627 = 0x3F80000000000000;
              v627 += 2;
              --v628;
            }
            while (v628);
            goto LABEL_895;
          }
          uint64_t v624 = 0;
          unint64_t v649 = v623 + 16 * *(unsigned int *)__p;
          _CF = v623 >= (unint64_t)v1035 + 4 * *(unsigned int *)__p || (unint64_t)v1035 >= v649;
          char v651 = !_CF;
          if ((unint64_t)v1031 < v649 && v623 < (unint64_t)v1031 + 4 * *(unsigned int *)__p) {
            goto LABEL_893;
          }
          if (v651) {
            goto LABEL_893;
          }
          uint64_t v624 = *(_DWORD *)__p & 0xFFFFFFFC;
          uint64_t v653 = v624;
          v654 = (__n128 *)v1035;
          v655 = (float *)v619[1].__r_.__value_.__r.__words[2];
          v656 = (__n128 *)v1031;
          long long v657 = 0u;
          long long v658 = v807;
          do
          {
            __n128 v659 = *v656++;
            __n128 v660 = v659;
            __n128 v661 = *v654++;
            __n128 v662 = v661;
            vst4q_f32(v655, *(float32x4x4_t *)(&v657 - 2));
            v655 += 16;
            v653 -= 4;
          }
          while (v653);
          __n128 v805 = v660;
          __n128 v806 = v662;
          if (v624 != v620) {
            goto LABEL_893;
          }
LABEL_895:
          uint64_t v631 = v989;
          v914 = v619 + 1;
          v915 = (std::__shared_weak_count *)v619;
          atomic_fetch_add_explicit((atomic_ullong *volatile)&v619->__r_.__value_.__l.__size_, 1uLL, memory_order_relaxed);
          (*(void (**)(uint64_t, std::string **))(*(void *)v631 + 392))(v631, &v914);
          v632 = v915;
          if (!v915) {
            goto LABEL_996;
          }
LABEL_995:
          if (atomic_fetch_add(&v632->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
LABEL_996:
            v679 = (std::__shared_weak_count *)__str[1];
            if (!__str[1]) {
              goto LABEL_1019;
            }
          }
          else
          {
            ((void (*)(std::__shared_weak_count *))v632->__on_zero_shared)(v632);
            std::__shared_weak_count::__release_weak(v632);
            v679 = (std::__shared_weak_count *)__str[1];
            if (!__str[1]) {
              goto LABEL_1019;
            }
          }
          if (!atomic_fetch_add(&v679->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v679->__on_zero_shared)(v679);
            std::__shared_weak_count::__release_weak(v679);
          }
LABEL_1019:
          v578 = (std::__shared_weak_count *)*((void *)&v989 + 1);
          if (*((void *)&v989 + 1))
          {
LABEL_1020:
            if (!atomic_fetch_add(&v578->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v578->__on_zero_shared)(v578);
              std::__shared_weak_count::__release_weak(v578);
            }
          }
          goto LABEL_1022;
        case 2:
          if (*((void *)&v1006 + 1) == 4)
          {
            *(_DWORD *)&__p[24] = 256;
            *(_OWORD *)__p = xmmword_19E351E10;
            *(void *)&__p[16] = 1;
            HIBYTE(__str[2]) = 7;
            strcpy((char *)__str, "softmax");
            uint64_t v867 = 0;
            v865 = 0;
            v866 = 0;
            sub_19E28750C(&v865, (uint64_t)v801, v30, 0xAAAAAAAAAAAAAAABLL * ((v30 - (uint64_t)v801) >> 3));
            v863 = 0;
            v862 = 0;
            uint64_t v864 = 0;
            sub_19E28750C(&v862, v31, v802, 0xAAAAAAAAAAAAAAABLL * ((v802 - v31) >> 3));
            sub_19E285BC4(a1, (uint64_t *)&v865, (uint64_t *)&v862, &v989);
            v73 = (void **)v862;
            if (v862)
            {
              unint64_t v74 = v863;
              uint64_t v75 = v862;
              if (v863 != v862)
              {
                do
                {
                  if (*((char *)v74 - 1) < 0) {
                    operator delete(*(v74 - 3));
                  }
                  v74 -= 3;
                }
                while (v74 != v73);
                uint64_t v75 = v862;
              }
              v863 = v73;
              operator delete(v75);
            }
            v681 = (void **)v865;
            if (v865)
            {
              v682 = v866;
              v538 = v865;
              if (v866 != v865)
              {
                do
                {
                  if (*((char *)v682 - 1) < 0) {
                    operator delete(*(v682 - 3));
                  }
                  v682 -= 3;
                }
                while (v682 != v681);
                v538 = v865;
              }
              v866 = v681;
LABEL_1015:
              operator delete(v538);
            }
          }
          else
          {
            *(_DWORD *)__p = 0;
            *(void *)&__p[4] = _D8;
            memset(&__p[12], 0, 24);
            switch(*((void *)&v1006 + 1))
            {
              case 0xCLL:
                *(_DWORD *)__p = 22;
                HIBYTE(__str[2]) = 10;
                strcpy((char *)__str, "activation");
                uint64_t v849 = 0;
                v847 = 0;
                uint64_t v848 = 0;
                sub_19E28750C(&v847, (uint64_t)v801, v30, 0xAAAAAAAAAAAAAAABLL * ((v30 - (uint64_t)v801) >> 3));
                v845 = 0;
                v844 = 0;
                uint64_t v846 = 0;
                sub_19E28750C(&v844, v31, v802, 0xAAAAAAAAAAAAAAABLL * ((v802 - v31) >> 3));
                sub_19E285FAC(a1, (uint64_t *)&v847, (uint64_t *)&v844, &v989);
                v699 = (void **)v844;
                if (v844)
                {
                  v700 = v845;
                  v701 = v844;
                  if (v845 != v844)
                  {
                    do
                    {
                      if (*((char *)v700 - 1) < 0) {
                        operator delete(*(v700 - 3));
                      }
                      v700 -= 3;
                    }
                    while (v700 != v699);
                    v701 = v844;
                  }
                  v845 = v699;
                  operator delete(v701);
                }
                uint64_t v772 = (uint64_t)v847;
                if (v847)
                {
                  uint64_t v773 = v848;
                  v538 = v847;
                  if ((void *)v848 != v847)
                  {
                    do
                    {
                      if (*(char *)(v773 - 1) < 0) {
                        operator delete(*(void **)(v773 - 24));
                      }
                      v773 -= 24;
                    }
                    while (v773 != v772);
                    v538 = v847;
                  }
                  uint64_t v848 = v772;
                  goto LABEL_1015;
                }
                break;
              case 0xALL:
                *(_DWORD *)__p = 19;
                HIBYTE(__str[2]) = 10;
                strcpy((char *)__str, "activation");
                uint64_t v855 = 0;
                v853 = 0;
                uint64_t v854 = 0;
                sub_19E28750C(&v853, (uint64_t)v801, v30, 0xAAAAAAAAAAAAAAABLL * ((v30 - (uint64_t)v801) >> 3));
                v851 = 0;
                v850 = 0;
                uint64_t v852 = 0;
                sub_19E28750C(&v850, v31, v802, 0xAAAAAAAAAAAAAAABLL * ((v802 - v31) >> 3));
                sub_19E285FAC(a1, (uint64_t *)&v853, (uint64_t *)&v850, &v989);
                v696 = (void **)v850;
                if (v850)
                {
                  v697 = v851;
                  v698 = v850;
                  if (v851 != v850)
                  {
                    do
                    {
                      if (*((char *)v697 - 1) < 0) {
                        operator delete(*(v697 - 3));
                      }
                      v697 -= 3;
                    }
                    while (v697 != v696);
                    v698 = v850;
                  }
                  v851 = v696;
                  operator delete(v698);
                }
                uint64_t v770 = (uint64_t)v853;
                if (v853)
                {
                  uint64_t v771 = v854;
                  v538 = v853;
                  if ((void *)v854 != v853)
                  {
                    do
                    {
                      if (*(char *)(v771 - 1) < 0) {
                        operator delete(*(void **)(v771 - 24));
                      }
                      v771 -= 24;
                    }
                    while (v771 != v770);
                    v538 = v853;
                  }
                  uint64_t v854 = v770;
                  goto LABEL_1015;
                }
                break;
              case 5:
                HIBYTE(__str[2]) = 10;
                strcpy((char *)__str, "activation");
                uint64_t v861 = 0;
                v859 = 0;
                uint64_t v860 = 0;
                sub_19E28750C(&v859, (uint64_t)v801, v30, 0xAAAAAAAAAAAAAAABLL * ((v30 - (uint64_t)v801) >> 3));
                v857 = 0;
                v856 = 0;
                uint64_t v858 = 0;
                sub_19E28750C(&v856, v31, v802, 0xAAAAAAAAAAAAAAABLL * ((v802 - v31) >> 3));
                sub_19E285FAC(a1, (uint64_t *)&v859, (uint64_t *)&v856, &v989);
                v526 = (void **)v856;
                if (v856)
                {
                  v527 = v857;
                  v528 = v856;
                  if (v857 != v856)
                  {
                    do
                    {
                      if (*((char *)v527 - 1) < 0) {
                        operator delete(*(v527 - 3));
                      }
                      v527 -= 3;
                    }
                    while (v527 != v526);
                    v528 = v856;
                  }
                  v857 = v526;
                  operator delete(v528);
                }
                uint64_t v774 = (uint64_t)v859;
                if (v859)
                {
                  uint64_t v775 = v860;
                  v538 = v859;
                  if ((void *)v860 != v859)
                  {
                    do
                    {
                      if (*(char *)(v775 - 1) < 0) {
                        operator delete(*(void **)(v775 - 24));
                      }
                      v775 -= 24;
                    }
                    while (v775 != v774);
                    v538 = v859;
                  }
                  uint64_t v860 = v774;
                  goto LABEL_1015;
                }
                break;
              default:
                goto LABEL_1022;
            }
          }
LABEL_1016:
          if ((SHIBYTE(__str[2]) & 0x80000000) == 0) {
            goto LABEL_1019;
          }
          v535 = __str[0];
          goto LABEL_1018;
        case 3:
          LODWORD(v989) = 2;
          WORD2(v989) = 0;
          __p[23] = 14;
          strcpy(__p, "general_concat");
          uint64_t v950 = 0;
          v948 = 0;
          v949 = 0;
          sub_19E28750C(&v948, (uint64_t)v801, v30, 0xAAAAAAAAAAAAAAABLL * ((v30 - (uint64_t)v801) >> 3));
          v946 = 0;
          v945 = 0;
          uint64_t v947 = 0;
          sub_19E28750C(&v945, v31, v802, 0xAAAAAAAAAAAAAAABLL * ((v802 - v31) >> 3));
          sub_19E284AA4(a1, (uint64_t *)&v948, (uint64_t *)&v945, (uint64_t *)__str);
          v84 = (void **)v945;
          if (v945)
          {
            long long v85 = v946;
            int v86 = v945;
            if (v946 != v945)
            {
              do
              {
                if (*((char *)v85 - 1) < 0) {
                  operator delete(*(v85 - 3));
                }
                v85 -= 3;
              }
              while (v85 != v84);
              int v86 = v945;
            }
            v946 = v84;
            operator delete(v86);
          }
          v575 = (void **)v948;
          if (v948)
          {
            v576 = v949;
            v577 = v948;
            if (v949 != v948)
            {
              do
              {
                if (*((char *)v576 - 1) < 0) {
                  operator delete(*(v576 - 3));
                }
                v576 -= 3;
              }
              while (v576 != v575);
              v577 = v948;
            }
            v949 = v575;
            operator delete(v577);
          }
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
          goto LABEL_775;
        case 4:
        case 23:
          uint64_t v33 = v1023;
          uint64_t v34 = v1019;
          __p[40] = 0;
          *(void *)&__p[56] = _D8;
          *(void *)v938 = 0;
          *(void *)&__p[20] = _D8;
          *(_DWORD *)&__p[88] = 0;
          *(_DWORD *)&__p[84] = 0;
          *(_DWORD *)&__p[52] = -1;
          *(void *)&__p[44] = 0;
          memset(&__p[100], 0, 24);
          *(_DWORD *)&__p[4] = v1023;
          *(_DWORD *)__p = v1019;
          *(void *)&__p[8] = 0;
          *(_DWORD *)&__p[16] = 0;
          *(_DWORD *)&__p[36] = 0;
          *(void *)&__p[28] = 0x100000000;
          HIBYTE(__str[2]) = 13;
          strcpy((char *)__str, "inner_product");
          uint64_t v888 = 0;
          v886 = 0;
          v887 = 0;
          sub_19E28750C(&v886, (uint64_t)v801, v30, 0xAAAAAAAAAAAAAAABLL * ((v30 - (uint64_t)v801) >> 3));
          v884 = 0;
          v883 = 0;
          uint64_t v885 = 0;
          sub_19E28750C(&v883, v827, v802, 0xAAAAAAAAAAAAAAABLL * ((v802 - v827) >> 3));
          sub_19E2857DC(a1, (uint64_t *)&v886, (uint64_t *)&v883, &v989);
          size_t v35 = (void **)v883;
          if (v883)
          {
            int32x4_t v36 = v884;
            size_t v37 = v883;
            if (v884 != v883)
            {
              do
              {
                if (*((char *)v36 - 1) < 0) {
                  operator delete(*(v36 - 3));
                }
                v36 -= 3;
              }
              while (v36 != v35);
              size_t v37 = v883;
            }
            v884 = v35;
            operator delete(v37);
          }
          v94 = (void **)v886;
          if (v886)
          {
            unint64_t v95 = v887;
            long long v96 = v886;
            if (v887 != v886)
            {
              do
              {
                if (*((char *)v95 - 1) < 0) {
                  operator delete(*(v95 - 3));
                }
                v95 -= 3;
              }
              while (v95 != v94);
              long long v96 = v886;
            }
            v887 = v94;
            operator delete(v96);
          }
          if (SHIBYTE(__str[2]) < 0)
          {
            operator delete(__str[0]);
            uint64_t v97 = v1031;
            int v98 = v34 * v33;
            memset(__str, 0, 24);
            if (v34 * v33)
            {
LABEL_173:
              uint64_t v99 = v98;
              if (v98 < 0) {
                sub_19E13D694();
              }
              size_t v100 = 4 * v98;
              v101 = (std::string *)operator new(v100);
              v102 = (std::string *)((char *)v101 + 4 * v99);
              __str[0] = v101;
              __str[2] = v102;
              bzero(v101, v100);
              __str[1] = v102;
              if ((int)v33 < 1)
              {
LABEL_211:
                char v124 = v1045;
                if ((unint64_t)v1045 >= v1046)
                {
                  uint64_t v30 = v811;
                  char v129 = sub_19E289A30(&v1044, (uint64_t)__str);
                }
                else
                {
                  *(void *)v1045 = 0;
                  *((void *)v124 + 1) = 0;
                  *((void *)v124 + 2) = 0;
                  uint64_t v125 = __str[0];
                  int64_t v126 = (char *)__str[1] - (char *)__str[0];
                  uint64_t v30 = v811;
                  if (__str[1] != __str[0])
                  {
                    if (v126 < 0) {
                      sub_19E13D694();
                    }
                    uint64_t v127 = (char *)operator new((char *)__str[1] - (char *)__str[0]);
                    *(void *)char v124 = v127;
                    *((void *)v124 + 1) = v127;
                    v128 = &v127[4 * (v126 >> 2)];
                    *((void *)v124 + 2) = v128;
                    memcpy(v127, v125, v126);
                    *((void *)v124 + 1) = v128;
                    uint64_t v30 = v811;
                  }
                  char v129 = v124 + 24;
                }
                v1045 = v129;
                uint64_t v130 = *((void *)v129 - 3);
                int v131 = (char *)operator new(0x58uLL);
                *((void *)v131 + 1) = 0;
                *(void *)int v131 = &unk_1EF0ABE18;
                *((void *)v131 + 2) = 0;
                *((void *)v131 + 3) = &unk_1EF0A8830;
                *(_OWORD *)(v131 + 56) = 0u;
                *(_OWORD *)(v131 + 72) = 0u;
                *((_DWORD *)v131 + 8) = v34;
                *((_DWORD *)v131 + 9) = v33;
                *((void *)v131 + 5) = v130;
                v131[48] = 0;
                *(void *)&long long __dst = v131 + 24;
                *((void *)&__dst + 1) = v131;
                uint64_t v132 = v989;
                v881 = v131 + 24;
                v882 = (std::__shared_weak_count *)v131;
                atomic_fetch_add_explicit((atomic_ullong *volatile)v131 + 1, 1uLL, memory_order_relaxed);
                (*(void (**)(uint64_t, char **, __n128, __n128))(*(void *)v132 + 400))(v132, &v881, v805, v806);
                unint64_t v133 = v882;
                uint64_t v31 = v827;
                if (v882 && !atomic_fetch_add(&v882->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
                  std::__shared_weak_count::__release_weak(v133);
                  v134 = (std::__shared_weak_count *)*((void *)&__dst + 1);
                  if (*((void *)&__dst + 1))
                  {
LABEL_220:
                    if (!atomic_fetch_add(&v134->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
                      std::__shared_weak_count::__release_weak(v134);
                    }
                  }
                }
                else
                {
                  v134 = (std::__shared_weak_count *)*((void *)&__dst + 1);
                  if (*((void *)&__dst + 1)) {
                    goto LABEL_220;
                  }
                }
                v535 = __str[0];
                if (!__str[0]) {
                  goto LABEL_1019;
                }
                __str[1] = __str[0];
LABEL_1018:
                operator delete(v535);
                goto LABEL_1019;
              }
              goto LABEL_191;
            }
          }
          else
          {
            uint64_t v97 = v1031;
            int v98 = v34 * v33;
            memset(__str, 0, 24);
            if (v34 * v33) {
              goto LABEL_173;
            }
          }
          v101 = 0;
          if ((int)v33 < 1) {
            goto LABEL_211;
          }
LABEL_191:
          uint64_t v107 = 0;
          uint64_t v108 = 0;
          uint64_t v109 = 4 * (int)v34;
          _ZF = v34 >= 8 && v33 == 1;
          char v111 = !_ZF;
          unint64_t v112 = (long long *)(v97 + 16);
          uint64_t v113 = &v101->__r_.__value_.__r.__words[2];
          while (1)
          {
            if ((int)v34 >= 1)
            {
              if ((unint64_t)v101 + 4 * v108 - v97 - v109 * v108 < 0x20) {
                char v114 = 1;
              }
              else {
                char v114 = v111;
              }
              if (v114)
              {
                uint64_t v115 = 0;
              }
              else
              {
                uint64_t v116 = v34 & 0x7FFFFFF8;
                v117 = v113;
                int v118 = v112;
                do
                {
                  long long v119 = *v118;
                  *((_OWORD *)v117 - 1) = *(v118 - 1);
                  *(_OWORD *)v117 = v119;
                  v118 += 2;
                  v117 += 4 * v33;
                  v116 -= 8;
                }
                while (v116);
                uint64_t v115 = v34 & 0x7FFFFFF8;
                if ((v34 & 0xFFFFFFF8) == v34) {
                  goto LABEL_198;
                }
              }
              uint64_t v120 = (_DWORD *)((char *)v101 + 4 * v108 + 4 * v33 * (unint64_t)v115);
              size_t v121 = (int *)(v97 + 4 * (v115 + v107));
              uint64_t v122 = v34 - v115;
              do
              {
                int v123 = *v121++;
                *uint64_t v120 = v123;
                v120 += v33;
                --v122;
              }
              while (v122);
            }
LABEL_198:
            ++v108;
            unint64_t v112 = (long long *)((char *)v112 + v109);
            uint64_t v113 = (std::string::size_type *)((char *)v113 + 4);
            v107 += (int)v34;
            if (v108 == v33) {
              goto LABEL_211;
            }
          }
        case 5:
        case 6:
          *(_DWORD *)&__p[64] = 0;
          *(_DWORD *)&__p[76] = v1019;
          *(void *)&__p[8] = _D8;
          *(void *)__p = 0;
          *(void *)&__p[20] = _D8;
          *(void *)&__p[32] = _D8;
          *(_DWORD *)&__p[16] = 2;
          *(_DWORD *)&__p[28] = 0;
          *(void *)&__p[44] = _D8;
          *(void *)&__p[56] = _D8;
          *(_DWORD *)&__p[40] = 0;
          *(_DWORD *)&__p[52] = 2;
          *(void *)&__p[68] = _D8;
          *(void *)&__p[108] = 0x100000000;
          *(_DWORD *)&__p[104] = 1112014848;
          *(_DWORD *)v938 = 1065353216;
          *(void *)&__p[116] = 1065353216;
          *(void *)&v938[4] = 0;
          LOWORD(v941) = 0;
          *(void *)&__p[80] = v1011;
          *(_OWORD *)&__p[88] = xmmword_19E3517F0;
          uint64_t v940 = 1;
          uint64_t v939 = 1;
          v795 = (int *)operator new(4uLL);
          int *v795 = 0;
          v800 = v795 + 1;
          if (v32 == 6)
          {
            HIDWORD(v940) = 1;
            int v38 = (int *)operator new(8uLL);
            *(void *)int v38 = 0x200000000;
            v800 = v38 + 2;
            operator delete(v795);
            v795 = v38;
          }
          HIBYTE(__str[2]) = 8;
          strcpy((char *)__str, "rnn_arch");
          uint64_t v880 = 0;
          v878 = 0;
          v879 = 0;
          sub_19E28750C(&v878, (uint64_t)v801, v30, 0xAAAAAAAAAAAAAAABLL * ((v30 - (uint64_t)v801) >> 3));
          v876 = 0;
          v875 = 0;
          uint64_t v877 = 0;
          sub_19E28750C(&v875, v31, v802, 0xAAAAAAAAAAAAAAABLL * ((v802 - v31) >> 3));
          sub_19E286394(a1, (uint64_t *)&v878, (uint64_t *)&v875, (uint64_t *)&v989);
          long long v39 = v989;
          long long v989 = 0uLL;
          unint64_t v40 = (void **)v875;
          if (v875)
          {
            int v41 = v876;
            int32x4_t v42 = v875;
            if (v876 != v875)
            {
              do
              {
                if (*((char *)v41 - 1) < 0) {
                  operator delete(*(v41 - 3));
                }
                v41 -= 3;
              }
              while (v41 != v40);
              int32x4_t v42 = v875;
            }
            v876 = v40;
            operator delete(v42);
          }
          v103 = (void **)v878;
          if (v878)
          {
            int v104 = v879;
            int v105 = v878;
            if (v879 != v878)
            {
              do
              {
                if (*((char *)v104 - 1) < 0) {
                  operator delete(*(v104 - 3));
                }
                v104 -= 3;
              }
              while (v104 != v103);
              int v105 = v878;
            }
            v879 = v103;
            operator delete(v105);
          }
          if (SHIBYTE(__str[2]) < 0)
          {
            operator delete(__str[0]);
            int v106 = v795;
            if (v795 == v800) {
              goto LABEL_223;
            }
          }
          else
          {
            int v106 = v795;
            if (v795 == v800) {
              goto LABEL_223;
            }
          }
          while (1)
          {
            uint64_t v803 = *v106;
            v804 = v106;
            uint64_t v136 = (void *)&v1003 + v803;
            uint64_t v137 = v136[56];
            if ((BYTE8(v1010) & 0x20) != 0) {
              break;
            }
            uint64_t v809 = v136[57];
            v810 = (float32x4_t *)v136[72];
            if ((BYTE8(v1010) & 0x80) == 0) {
              goto LABEL_309;
            }
LABEL_326:
            uint64_t v207 = 0;
            memset(__str, 0, 24);
            long long v989 = 0uLL;
            v990 = 0;
            long long __dst = 0uLL;
            unint64_t v988 = 0;
            uint64_t v208 = (int)v1019;
            uint64_t v209 = (int)v1019 * (uint64_t)(int)v1011;
            int v813 = v208 * v208;
            size_t v210 = 4 * v209;
            uint64_t __sz = 4 * (int)v1019;
            uint64_t v814 = (int)v1019;
            uint64_t v820 = 4 * v209;
            uint64_t v812 = v209;
            do
            {
              unint64_t v211 = 0;
              v212 = 0;
              uint64_t v213 = v207 + 1;
              long long v902 = 0uLL;
              unint64_t v903 = 0;
              if (v209 * (v207 + 1) != v207 * v209)
              {
                if ((v209 & 0x80000000) != 0) {
                  sub_19E13D694();
                }
                v212 = operator new(v210);
                *(void *)&long long v902 = v212;
                *((void *)&v902 + 1) = v212;
                unint64_t v211 = (unint64_t)v212 + 4 * v209;
                unint64_t v903 = v211;
                memcpy(v212, (const void *)(v137 + 4 * v207 * v209), v210);
                *((void *)&v902 + 1) = v211;
              }
              v214 = __str[1];
              if (__str[1] >= __str[2])
              {
                v215 = __str[0];
                int64_t v216 = (char *)__str[1] - (char *)__str[0];
                unint64_t v217 = 0xAAAAAAAAAAAAAAABLL * (((char *)__str[1] - (char *)__str[0]) >> 3);
                unint64_t v218 = v217 + 1;
                if (v217 + 1 > 0xAAAAAAAAAAAAAAALL) {
                  sub_19E13D694();
                }
                if (0x5555555555555556 * (((char *)__str[2] - (char *)__str[0]) >> 3) > v218) {
                  unint64_t v218 = 0x5555555555555556 * (((char *)__str[2] - (char *)__str[0]) >> 3);
                }
                if (0xAAAAAAAAAAAAAAABLL * (((char *)__str[2] - (char *)__str[0]) >> 3) >= 0x555555555555555) {
                  unint64_t v219 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v219 = v218;
                }
                if (v219 > 0xAAAAAAAAAAAAAAALL) {
                  sub_19E13C418();
                }
                v220 = (char *)operator new(24 * v219);
                v221 = (std::string *)&v220[24 * v217];
                v221->__r_.__value_.__l.__size_ = 0;
                v221->__r_.__value_.__r.__words[2] = 0;
                v221->__r_.__value_.__r.__words[0] = (std::string::size_type)v212;
                *(int64x2_t *)&v220[v216 + 8] = vdupq_n_s64(v211);
                unint64_t v903 = 0;
                long long v902 = 0uLL;
                v222 = v221 + 1;
                if (v214 == v215)
                {
                  __str[0] = (std::string *)&v220[24 * v217];
                  __str[1] = v221 + 1;
                  __str[2] = (std::string *)&v220[24 * v219];
                  size_t v210 = v820;
                  uint64_t v208 = v814;
                }
                else
                {
                  do
                  {
                    long long v223 = *(_OWORD *)&v214[-1].__r_.__value_.__l.__data_;
                    --v214;
                    *(_OWORD *)&v221[-1].__r_.__value_.__l.__data_ = v223;
                    --v221;
                    v221->__r_.__value_.__r.__words[2] = v214->__r_.__value_.__r.__words[2];
                    v214->__r_.__value_.__r.__words[0] = 0;
                    v214->__r_.__value_.__l.__size_ = 0;
                    v214->__r_.__value_.__r.__words[2] = 0;
                  }
                  while (v214 != v215);
                  v214 = __str[0];
                  v224 = __str[1];
                  __str[0] = v221;
                  __str[1] = v222;
                  __str[2] = (std::string *)&v220[24 * v219];
                  size_t v210 = v820;
                  uint64_t v208 = v814;
                  if (v224 != v214)
                  {
                    v225 = v224;
                    do
                    {
                      std::string::pointer data = v225[-1].__r_.__value_.__l.__data_;
                      --v225;
                      std::string::pointer v226 = data;
                      if (data)
                      {
                        v224[-1].__r_.__value_.__l.__size_ = (std::string::size_type)v226;
                        operator delete(v226);
                      }
                      v224 = v225;
                    }
                    while (v225 != v214);
                  }
                }
                if (v214) {
                  operator delete(v214);
                }
                __str[1] = v222;
                if ((void)v902)
                {
                  *((void *)&v902 + 1) = v902;
                  operator delete((void *)v902);
                }
              }
              else
              {
                __str[1]->__r_.__value_.__l.__data_ = 0;
                v214->__r_.__value_.__l.__size_ = 0;
                v214->__r_.__value_.__r.__words[2] = 0;
                *(_OWORD *)&v214->__r_.__value_.__l.__data_ = v902;
                v214->__r_.__value_.__r.__words[2] = v903;
                __str[1] = v214 + 1;
              }
              unint64_t v228 = 0;
              v229 = 0;
              long long v902 = 0uLL;
              unint64_t v903 = 0;
              if (v813 * v213 != v813 * v207)
              {
                v230 = (const void *)(v809 + 4 * (v813 * v207));
                uint64_t v231 = v809 + 4 * (v813 * v213);
                int64_t v232 = v231 - (void)v230;
                if (v231 - (void)v230 < 0) {
                  sub_19E13D694();
                }
                v229 = operator new(v231 - (void)v230);
                *(void *)&long long v902 = v229;
                *((void *)&v902 + 1) = v229;
                unint64_t v228 = (unint64_t)v229 + 4 * (v232 >> 2);
                unint64_t v903 = v228;
                memcpy(v229, v230, v232);
                *((void *)&v902 + 1) = v228;
                size_t v210 = v820;
              }
              v233 = (char *)*((void *)&v989 + 1);
              if (*((void *)&v989 + 1) < (unint64_t)v990)
              {
                **((void **)&v989 + 1) = 0;
                *((void *)v233 + 1) = 0;
                *((void *)v233 + 2) = 0;
                *(_OWORD *)v233 = v902;
                *((void *)v233 + 2) = v903;
                *((void *)&v989 + 1) = v233 + 24;
                goto LABEL_378;
              }
              v234 = (char *)v989;
              uint64_t v235 = *((void *)&v989 + 1) - v989;
              unint64_t v236 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v989 + 1) - v989) >> 3);
              unint64_t v237 = v236 + 1;
              if (v236 + 1 > 0xAAAAAAAAAAAAAAALL) {
                sub_19E13D694();
              }
              if (0x5555555555555556 * ((uint64_t)((uint64_t)v990 - v989) >> 3) > v237) {
                unint64_t v237 = 0x5555555555555556 * ((uint64_t)((uint64_t)v990 - v989) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v990 - v989) >> 3) >= 0x555555555555555) {
                unint64_t v238 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v238 = v237;
              }
              if (v238 > 0xAAAAAAAAAAAAAAALL) {
                sub_19E13C418();
              }
              v239 = (char *)operator new(24 * v238);
              v240 = &v239[24 * v236];
              *((void *)v240 + 1) = 0;
              *((void *)v240 + 2) = 0;
              *(void *)v240 = v229;
              *(int64x2_t *)&v239[v235 + 8] = vdupq_n_s64(v228);
              unint64_t v903 = 0;
              long long v902 = 0uLL;
              v241 = v240 + 24;
              if (v233 == v234)
              {
                *(void *)&long long v989 = &v239[24 * v236];
                *((void *)&v989 + 1) = v240 + 24;
                v990 = (std::string *)&v239[24 * v238];
                size_t v210 = v820;
                uint64_t v208 = v814;
                goto LABEL_374;
              }
              size_t v210 = v820;
              do
              {
                long long v242 = *(_OWORD *)(v233 - 24);
                v233 -= 24;
                *(_OWORD *)(v240 - 24) = v242;
                v240 -= 24;
                *((void *)v240 + 2) = *((void *)v233 + 2);
                *(void *)v233 = 0;
                *((void *)v233 + 1) = 0;
                *((void *)v233 + 2) = 0;
              }
              while (v233 != v234);
              v243 = (char *)*((void *)&v989 + 1);
              v233 = (char *)v989;
              *(void *)&long long v989 = v240;
              *((void *)&v989 + 1) = v241;
              v990 = (std::string *)&v239[24 * v238];
              if (v243 != v233)
              {
                v244 = v243;
                uint64_t v208 = v814;
                do
                {
                  v246 = (void *)*((void *)v244 - 3);
                  v244 -= 24;
                  v245 = v246;
                  if (v246)
                  {
                    *((void *)v243 - 2) = v245;
                    operator delete(v245);
                  }
                  v243 = v244;
                }
                while (v244 != v233);
LABEL_374:
                if (!v233) {
                  goto LABEL_376;
                }
LABEL_375:
                operator delete(v233);
                goto LABEL_376;
              }
              uint64_t v208 = v814;
              if (v233) {
                goto LABEL_375;
              }
LABEL_376:
              *((void *)&v989 + 1) = v241;
              if ((void)v902)
              {
                *((void *)&v902 + 1) = v902;
                operator delete((void *)v902);
              }
LABEL_378:
              unint64_t v247 = 0;
              v248 = 0;
              long long v902 = 0uLL;
              unint64_t v903 = 0;
              if (v208 * v213 != v208 * v207)
              {
                if ((v208 & 0x80000000) != 0) {
                  sub_19E13D694();
                }
                v248 = operator new(__sz);
                *(void *)&long long v902 = v248;
                *((void *)&v902 + 1) = v248;
                unint64_t v247 = (unint64_t)v248 + 4 * v208;
                unint64_t v903 = v247;
                memcpy(v248, &v810->f32[v207 * v208], __sz);
                *((void *)&v902 + 1) = v247;
              }
              v249 = (char *)*((void *)&__dst + 1);
              if (*((void *)&__dst + 1) < v988)
              {
                **((void **)&__dst + 1) = 0;
                *((void *)v249 + 1) = 0;
                *((void *)v249 + 2) = 0;
                *(_OWORD *)v249 = v902;
                *((void *)v249 + 2) = v903;
                *((void *)&__dst + 1) = v249 + 24;
                goto LABEL_328;
              }
              v250 = (char *)__dst;
              uint64_t v251 = *((void *)&__dst + 1) - __dst;
              unint64_t v252 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&__dst + 1) - __dst) >> 3);
              unint64_t v253 = v252 + 1;
              if (v252 + 1 > 0xAAAAAAAAAAAAAAALL) {
                sub_19E13D694();
              }
              if (0x5555555555555556 * ((uint64_t)(v988 - __dst) >> 3) > v253) {
                unint64_t v253 = 0x5555555555555556 * ((uint64_t)(v988 - __dst) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v988 - __dst) >> 3) >= 0x555555555555555) {
                unint64_t v254 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v254 = v253;
              }
              if (v254 > 0xAAAAAAAAAAAAAAALL) {
                sub_19E13C418();
              }
              v255 = (char *)operator new(24 * v254);
              v256 = &v255[24 * v252];
              *((void *)v256 + 1) = 0;
              *((void *)v256 + 2) = 0;
              *(void *)v256 = v248;
              *(int64x2_t *)&v255[v251 + 8] = vdupq_n_s64(v247);
              unint64_t v903 = 0;
              long long v902 = 0uLL;
              v257 = v256 + 24;
              if (v249 == v250)
              {
                *(void *)&long long __dst = &v255[24 * v252];
                *((void *)&__dst + 1) = v256 + 24;
                unint64_t v988 = (unint64_t)&v255[24 * v254];
                uint64_t v208 = v814;
                goto LABEL_397;
              }
              do
              {
                long long v258 = *(_OWORD *)(v249 - 24);
                v249 -= 24;
                *(_OWORD *)(v256 - 24) = v258;
                v256 -= 24;
                *((void *)v256 + 2) = *((void *)v249 + 2);
                *(void *)v249 = 0;
                *((void *)v249 + 1) = 0;
                *((void *)v249 + 2) = 0;
              }
              while (v249 != v250);
              v259 = (char *)*((void *)&__dst + 1);
              v249 = (char *)__dst;
              *(void *)&long long __dst = v256;
              *((void *)&__dst + 1) = v257;
              unint64_t v988 = (unint64_t)&v255[24 * v254];
              if (v259 != v249)
              {
                v260 = v259;
                uint64_t v208 = v814;
                do
                {
                  v262 = (void *)*((void *)v260 - 3);
                  v260 -= 24;
                  v261 = v262;
                  if (v262)
                  {
                    *((void *)v259 - 2) = v261;
                    operator delete(v261);
                  }
                  v259 = v260;
                }
                while (v260 != v249);
LABEL_397:
                if (!v249) {
                  goto LABEL_399;
                }
LABEL_398:
                operator delete(v249);
                goto LABEL_399;
              }
              uint64_t v208 = v814;
              if (v249) {
                goto LABEL_398;
              }
LABEL_399:
              *((void *)&__dst + 1) = v257;
              if ((void)v902)
              {
                *((void *)&v902 + 1) = v902;
                operator delete((void *)v902);
              }
LABEL_328:
              uint64_t v207 = v213;
              uint64_t v209 = v812;
            }
            while (v213 != 4);
            v263 = __str[0];
            uint64_t v264 = v989;
            uint64_t v265 = __dst;
            if ((BYTE8(v1010) & 0x10) != 0)
            {
              long long v266 = *(_OWORD *)&__str[0][1].__r_.__value_.__l.__data_;
              *(_OWORD *)&__str[0][1].__r_.__value_.__l.__data_ = *(_OWORD *)&__str[0][2].__r_.__value_.__l.__data_;
              *(_OWORD *)&v263[2].__r_.__value_.__l.__data_ = v266;
              std::string::size_type v267 = v263[1].__r_.__value_.__r.__words[2];
              v263[1].__r_.__value_.__r.__words[2] = v263[2].__r_.__value_.__r.__words[2];
              v263[2].__r_.__value_.__r.__words[2] = v267;
              long long v268 = *(_OWORD *)(v264 + 24);
              *(_OWORD *)(v264 + 24) = *(_OWORD *)(v264 + 48);
              *(_OWORD *)(v264 + 48) = v268;
              uint64_t v269 = *(void *)(v264 + 40);
              *(void *)(v264 + 40) = *(void *)(v264 + 64);
              *(void *)(v264 + 64) = v269;
              long long v270 = *(_OWORD *)(v265 + 24);
              *(_OWORD *)(v265 + 24) = *(_OWORD *)(v265 + 48);
              *(_OWORD *)(v265 + 48) = v270;
              uint64_t v271 = *(void *)(v265 + 40);
              *(void *)(v265 + 40) = *(void *)(v265 + 64);
              *(void *)(v265 + 64) = v271;
            }
            uint64_t v272 = 0;
            std::string::size_type v273 = v263[2].__r_.__value_.__r.__words[2];
            v263[2].__r_.__value_.__r.__words[2] = v263[3].__r_.__value_.__r.__words[2];
            long long v274 = *(_OWORD *)&v263[2].__r_.__value_.__l.__data_;
            *(_OWORD *)&v263[2].__r_.__value_.__l.__data_ = *(_OWORD *)&v263[3].__r_.__value_.__l.__data_;
            *(_OWORD *)&v263[3].__r_.__value_.__l.__data_ = v274;
            v263[3].__r_.__value_.__r.__words[2] = v273;
            long long v275 = *(_OWORD *)(v264 + 48);
            *(_OWORD *)(v264 + 48) = *(_OWORD *)(v264 + 72);
            *(_OWORD *)(v264 + 72) = v275;
            uint64_t v276 = *(void *)(v264 + 64);
            *(void *)(v264 + 64) = *(void *)(v264 + 88);
            *(void *)(v264 + 88) = v276;
            long long v277 = *(_OWORD *)(v265 + 48);
            *(_OWORD *)(v265 + 48) = *(_OWORD *)(v265 + 72);
            *(_OWORD *)(v265 + 72) = v277;
            uint64_t v278 = *(void *)(v265 + 64);
            *(void *)(v265 + 64) = *(void *)(v265 + 88);
            *(void *)(v265 + 88) = v278;
            long long v902 = 0uLL;
            unint64_t v903 = 0;
            v873 = 0;
            v872 = 0;
            v874 = 0;
            long long v870 = 0uLL;
            v871 = 0;
            while (2)
            {
              uint64_t v279 = 24 * v272;
              v280 = &__str[0][v272];
              v282 = (char *)v280->__r_.__value_.__r.__words[0];
              std::string::size_type size = v280->__r_.__value_.__l.__size_;
              uint64_t v283 = size - (void)v282;
              if ((uint64_t)(size - (void)v282) < 1) {
                goto LABEL_458;
              }
              uint64_t v284 = v283 >> 2;
              v285 = (char *)*((void *)&v902 + 1);
              unint64_t v286 = v902;
              uint64_t v287 = *((void *)&v902 + 1) - v902;
              uint64_t v288 = (uint64_t)(*((void *)&v902 + 1) - v902) >> 2;
              v289 = (char *)(v902 + ((*((void *)&v902 + 1) - v902) & 0xFFFFFFFFFFFFFFFCLL));
              if (v283 >> 2 <= (uint64_t)(v903 - *((void *)&v902 + 1)) >> 2)
              {
                uint64_t v302 = *((void *)&v902 + 1) - (void)v289;
                uint64_t v303 = (uint64_t)(*((void *)&v902 + 1) - (void)v289) >> 2;
                if (v303 >= v284)
                {
                  v304 = &v282[4 * v284];
                  v309 = (char *)*((void *)&v902 + 1);
                }
                else
                {
                  v304 = &v282[4 * v303];
                  std::string::size_type v305 = size - (void)v304;
                  if ((char *)size != v304)
                  {
                    v816 = &v282[4 * v303];
                    v822 = (char *)(v902 + ((*((void *)&v902 + 1) - v902) & 0xFFFFFFFFFFFFFFFCLL));
                    size_t v306 = size - (void)v304;
                    uint64_t v307 = v272;
                    uint64_t v308 = (uint64_t)(*((void *)&v902 + 1) - v902) >> 2;
                    memmove(*((void **)&v902 + 1), v816, v306);
                    uint64_t v288 = v308;
                    uint64_t v272 = v307;
                    v304 = v816;
                    v289 = v822;
                  }
                  v309 = &v285[v305];
                  *((void *)&v902 + 1) = &v285[v305];
                  if (v302 < 1) {
                    goto LABEL_458;
                  }
                }
                v310 = &v289[4 * v284];
                size_t v311 = v309 - v310;
                uint64_t v312 = (v309 - v310) >> 2;
                v313 = &v309[-4 * v284];
                v314 = v309;
                if (v313 < v285)
                {
                  unint64_t v315 = (v287 & 0xFFFFFFFFFFFFFFFCLL) + v311;
                  unint64_t v316 = v286 + v315 + 4;
                  if ((unint64_t)v285 > v316) {
                    unint64_t v316 = (unint64_t)v285;
                  }
                  unint64_t v317 = v316 + ~v286 - v315;
                  if (v317 < 0x2C)
                  {
                    v314 = v309;
                    goto LABEL_453;
                  }
                  v314 = v309;
                  if ((unint64_t)&v310[-(v287 & 0xFFFFFFFFFFFFFFFCLL) - v286] < 0x20) {
                    goto LABEL_1358;
                  }
                  uint64_t v335 = (v317 >> 2) + 1;
                  uint64_t v336 = 4 * (v335 & 0x7FFFFFFFFFFFFFF8);
                  v313 += v336;
                  v314 = &v309[v336];
                  v337 = v309 + 16;
                  v338 = (long long *)(v286 + 4 * v312 + 4 * v288 + 16);
                  uint64_t v339 = v335 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    long long v340 = *v338;
                    *(v337 - 1) = *(v338 - 1);
                    _OWORD *v337 = v340;
                    v337 += 2;
                    v338 += 2;
                    v339 -= 8;
                  }
                  while (v339);
                  if (v335 != (v335 & 0x7FFFFFFFFFFFFFF8))
                  {
LABEL_1358:
                    do
                    {
LABEL_453:
                      int v341 = *(_DWORD *)v313;
                      v313 += 4;
                      *(_DWORD *)v314 = v341;
                      v314 += 4;
                    }
                    while (v313 < v285);
                  }
                }
                *((void *)&v902 + 1) = v314;
                if (v309 != v310)
                {
                  v342 = v289;
                  memmove(&v309[-4 * v312], v289, v311);
                  v289 = v342;
                }
                if (v304 != v282) {
                  memmove(v289, v282, v304 - v282);
                }
                goto LABEL_458;
              }
              unint64_t v290 = v288 + v284;
              if ((unint64_t)(v288 + v284) >> 62) {
                sub_19E13D694();
              }
              uint64_t v291 = v903 - v902;
              if ((uint64_t)(v903 - v902) >> 1 > v290) {
                unint64_t v290 = v291 >> 1;
              }
              _CF = (unint64_t)v291 >= 0x7FFFFFFFFFFFFFFCLL;
              unint64_t v292 = 0x3FFFFFFFFFFFFFFFLL;
              if (!_CF) {
                unint64_t v292 = v290;
              }
              unint64_t v815 = v292;
              uint64_t v821 = 24 * v272;
              if (v292)
              {
                if (v292 >> 62) {
                  sub_19E13C418();
                }
                uint64_t v293 = v272;
                uint64_t v294 = (uint64_t)(*((void *)&v902 + 1) - v902) >> 2;
                v295 = (char *)(v902 + ((*((void *)&v902 + 1) - v902) & 0xFFFFFFFFFFFFFFFCLL));
                v296 = operator new(4 * v292);
                v289 = v295;
                uint64_t v288 = v294;
                uint64_t v272 = v293;
                v297 = v296;
                uint64_t v298 = (uint64_t)&v296[4 * v288];
                v299 = (char *)(v298 + 4 * v284);
                unint64_t v300 = v283 - 4;
                if ((unint64_t)(v283 - 4) < 0x1C)
                {
LABEL_419:
                  v301 = (char *)v298;
                  goto LABEL_436;
                }
              }
              else
              {
                v297 = 0;
                uint64_t v298 = 4 * v288;
                v299 = (char *)(4 * v288 + 4 * v284);
                unint64_t v300 = v283 - 4;
                if ((unint64_t)(v283 - 4) < 0x1C) {
                  goto LABEL_419;
                }
              }
              v301 = (char *)v298;
              if ((unint64_t)(&v297[v287 & 0xFFFFFFFFFFFFFFFCLL] - v282) < 0x20) {
                goto LABEL_1359;
              }
              uint64_t v318 = (v300 >> 2) + 1;
              uint64_t v319 = 4 * (v318 & 0x7FFFFFFFFFFFFFF8);
              v301 = (char *)(v298 + v319);
              v320 = &v282[v319];
              v321 = (long long *)(v282 + 16);
              v322 = &v297[4 * v288 + 16];
              uint64_t v323 = v318 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v324 = *v321;
                *(v322 - 1) = *(v321 - 1);
                _OWORD *v322 = v324;
                v321 += 2;
                v322 += 2;
                v323 -= 8;
              }
              while (v323);
              v282 = v320;
              if (v318 != (v318 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_1359:
                do
                {
LABEL_436:
                  int v325 = *(_DWORD *)v282;
                  v282 += 4;
                  *(_DWORD *)v301 = v325;
                  v301 += 4;
                }
                while (v301 != v299);
              }
              if ((char *)v286 != v285)
              {
                if ((unint64_t)(v287 - 4) < 0x3C)
                {
                  v326 = v289;
                  goto LABEL_444;
                }
                v326 = v289;
                if (v286 + (v287 & 0xFFFFFFFFFFFFFFFCLL) - (unint64_t)&v297[v287 & 0xFFFFFFFFFFFFFFFCLL] < 0x20) {
                  goto LABEL_1360;
                }
                unint64_t v327 = ((unint64_t)(v287 - 4) >> 2) + 1;
                uint64_t v328 = 4 * (v327 & 0x7FFFFFFFFFFFFFF8);
                v326 = &v289[-v328];
                v298 -= v328;
                v329 = &v297[4 * v288 - 16];
                v330 = (long long *)(v286 + 4 * v288 - 16);
                uint64_t v331 = v327 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  long long v332 = *v330;
                  *(v329 - 1) = *(v330 - 1);
                  _OWORD *v329 = v332;
                  v329 -= 2;
                  v330 -= 2;
                  v331 -= 8;
                }
                while (v331);
                if (v327 != (v327 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_1360:
                  do
                  {
LABEL_444:
                    int v333 = *((_DWORD *)v326 - 1);
                    v326 -= 4;
                    *(_DWORD *)(v298 - 4) = v333;
                    v298 -= 4;
                  }
                  while (v326 != (char *)v286);
                }
              }
              uint64_t v334 = v285 - v289;
              if (v285 != v289) {
                memmove(v299, v289, v285 - v289);
              }
              *(void *)&long long v902 = v298;
              *((void *)&v902 + 1) = &v299[v334];
              unint64_t v903 = (unint64_t)&v297[4 * v815];
              uint64_t v279 = v821;
              if (v286) {
                operator delete((void *)v286);
              }
LABEL_458:
              v343 = *(char **)(v989 + 24 * v272);
              v344 = *(char **)(v989 + v279 + 8);
              uint64_t v345 = v344 - v343;
              if (v344 - v343 < 1) {
                goto LABEL_507;
              }
              uint64_t v346 = v345 >> 2;
              v347 = (char *)v873;
              unint64_t v348 = (unint64_t)v872;
              int64_t v349 = (unsigned char *)v873 - (unsigned char *)v872;
              int64_t v350 = ((unsigned char *)v873 - (unsigned char *)v872) >> 2;
              v351 = (char *)v872 + (((unsigned char *)v873 - (unsigned char *)v872) & 0xFFFFFFFFFFFFFFFCLL);
              if (v345 >> 2 <= (v874 - (unsigned char *)v873) >> 2)
              {
                uint64_t v363 = (unsigned char *)v873 - v351;
                uint64_t v364 = ((unsigned char *)v873 - v351) >> 2;
                if (v364 >= v346)
                {
                  v365 = &v343[4 * v346];
                  v369 = (char *)v873;
                }
                else
                {
                  v365 = &v343[4 * v364];
                  int64_t v366 = v344 - v365;
                  if (v344 != v365)
                  {
                    v818 = &v343[4 * v364];
                    v824 = (char *)v872 + (((unsigned char *)v873 - (unsigned char *)v872) & 0xFFFFFFFFFFFFFFFCLL);
                    size_t v367 = v344 - v365;
                    int64_t v368 = ((unsigned char *)v873 - (unsigned char *)v872) >> 2;
                    memmove(v873, v818, v367);
                    int64_t v350 = v368;
                    v365 = v818;
                    v351 = v824;
                  }
                  v369 = &v347[v366];
                  v873 = &v347[v366];
                  if (v363 < 1) {
                    goto LABEL_507;
                  }
                }
                v370 = &v351[4 * v346];
                size_t v371 = v369 - v370;
                uint64_t v372 = (v369 - v370) >> 2;
                v373 = &v369[-4 * v346];
                v374 = v369;
                if (v373 < v347)
                {
                  unint64_t v375 = (v349 & 0xFFFFFFFFFFFFFFFCLL) + v371;
                  unint64_t v376 = v348 + v375 + 4;
                  if ((unint64_t)v347 > v376) {
                    unint64_t v376 = (unint64_t)v347;
                  }
                  unint64_t v377 = v376 + ~v348 - v375;
                  if (v377 < 0x2C)
                  {
                    v374 = v369;
                    goto LABEL_502;
                  }
                  v374 = v369;
                  if ((unint64_t)&v370[-(v349 & 0xFFFFFFFFFFFFFFFCLL) - v348] < 0x20) {
                    goto LABEL_1361;
                  }
                  uint64_t v395 = (v377 >> 2) + 1;
                  uint64_t v396 = 4 * (v395 & 0x7FFFFFFFFFFFFFF8);
                  v373 += v396;
                  v374 = &v369[v396];
                  v397 = v369 + 16;
                  v398 = (long long *)(v348 + 4 * v372 + 4 * v350 + 16);
                  uint64_t v399 = v395 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    long long v400 = *v398;
                    *(v397 - 1) = *(v398 - 1);
                    _OWORD *v397 = v400;
                    v397 += 2;
                    v398 += 2;
                    v399 -= 8;
                  }
                  while (v399);
                  if (v395 != (v395 & 0x7FFFFFFFFFFFFFF8))
                  {
LABEL_1361:
                    do
                    {
LABEL_502:
                      int v401 = *(_DWORD *)v373;
                      v373 += 4;
                      *(_DWORD *)v374 = v401;
                      v374 += 4;
                    }
                    while (v373 < v347);
                  }
                }
                v873 = v374;
                if (v369 != v370)
                {
                  v402 = v351;
                  memmove(&v369[-4 * v372], v351, v371);
                  v351 = v402;
                }
                if (v365 != v343) {
                  memmove(v351, v343, v365 - v343);
                }
                goto LABEL_507;
              }
              unint64_t v352 = v350 + v346;
              if ((unint64_t)(v350 + v346) >> 62) {
                sub_19E13D694();
              }
              uint64_t v353 = v874 - (unsigned char *)v872;
              if ((v874 - (unsigned char *)v872) >> 1 > v352) {
                unint64_t v352 = v353 >> 1;
              }
              _CF = (unint64_t)v353 >= 0x7FFFFFFFFFFFFFFCLL;
              unint64_t v354 = 0x3FFFFFFFFFFFFFFFLL;
              if (!_CF) {
                unint64_t v354 = v352;
              }
              unint64_t v817 = v354;
              uint64_t v823 = v279;
              if (v354)
              {
                if (v354 >> 62) {
                  sub_19E13C418();
                }
                int64_t v355 = ((unsigned char *)v873 - (unsigned char *)v872) >> 2;
                v356 = (char *)v872 + (((unsigned char *)v873 - (unsigned char *)v872) & 0xFFFFFFFFFFFFFFFCLL);
                v357 = (char *)operator new(4 * v354);
                v351 = v356;
                int64_t v350 = v355;
                v358 = v357;
                v359 = &v357[4 * v355];
                v360 = &v359[4 * v346];
                unint64_t v361 = v345 - 4;
                if ((unint64_t)(v345 - 4) < 0x1C)
                {
LABEL_468:
                  v362 = v359;
                  goto LABEL_485;
                }
              }
              else
              {
                v358 = 0;
                v359 = (char *)(4 * v350);
                v360 = (char *)(4 * v350 + 4 * v346);
                unint64_t v361 = v345 - 4;
                if ((unint64_t)(v345 - 4) < 0x1C) {
                  goto LABEL_468;
                }
              }
              v362 = v359;
              if ((unint64_t)(&v358[v349 & 0xFFFFFFFFFFFFFFFCLL] - v343) < 0x20) {
                goto LABEL_1362;
              }
              uint64_t v378 = (v361 >> 2) + 1;
              uint64_t v379 = 4 * (v378 & 0x7FFFFFFFFFFFFFF8);
              v362 = &v359[v379];
              v380 = &v343[v379];
              v381 = (long long *)(v343 + 16);
              v382 = &v358[4 * v350 + 16];
              uint64_t v383 = v378 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v384 = *v381;
                *((_OWORD *)v382 - 1) = *(v381 - 1);
                *(_OWORD *)v382 = v384;
                v381 += 2;
                v382 += 32;
                v383 -= 8;
              }
              while (v383);
              v343 = v380;
              if (v378 != (v378 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_1362:
                do
                {
LABEL_485:
                  int v385 = *(_DWORD *)v343;
                  v343 += 4;
                  *(_DWORD *)v362 = v385;
                  v362 += 4;
                }
                while (v362 != v360);
              }
              if ((char *)v348 != v347)
              {
                if ((unint64_t)(v349 - 4) < 0x3C)
                {
                  v386 = v351;
                  goto LABEL_493;
                }
                v386 = v351;
                if (v348 + (v349 & 0xFFFFFFFFFFFFFFFCLL) - (unint64_t)&v358[v349 & 0xFFFFFFFFFFFFFFFCLL] < 0x20) {
                  goto LABEL_1363;
                }
                unint64_t v387 = ((unint64_t)(v349 - 4) >> 2) + 1;
                uint64_t v388 = 4 * (v387 & 0x7FFFFFFFFFFFFFF8);
                v386 = &v351[-v388];
                v359 -= v388;
                v389 = &v358[4 * v350 - 16];
                v390 = (long long *)(v348 + 4 * v350 - 16);
                uint64_t v391 = v387 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  long long v392 = *v390;
                  *((_OWORD *)v389 - 1) = *(v390 - 1);
                  *(_OWORD *)v389 = v392;
                  v389 -= 32;
                  v390 -= 2;
                  v391 -= 8;
                }
                while (v391);
                if (v387 != (v387 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_1363:
                  do
                  {
LABEL_493:
                    int v393 = *((_DWORD *)v386 - 1);
                    v386 -= 4;
                    *((_DWORD *)v359 - 1) = v393;
                    v359 -= 4;
                  }
                  while (v386 != (char *)v348);
                }
              }
              uint64_t v394 = v347 - v351;
              if (v347 != v351) {
                memmove(v360, v351, v347 - v351);
              }
              v872 = v359;
              v873 = &v360[v394];
              v874 = &v358[4 * v817];
              uint64_t v279 = v823;
              if (v348) {
                operator delete((void *)v348);
              }
LABEL_507:
              v403 = *(char **)(__dst + 24 * v272);
              v404 = *(char **)(__dst + v279 + 8);
              uint64_t v405 = v404 - v403;
              uint64_t v31 = v827;
              if (v404 - v403 < 1) {
                goto LABEL_408;
              }
              uint64_t v406 = v405 >> 2;
              v407 = (char *)*((void *)&v870 + 1);
              unint64_t v408 = v870;
              uint64_t v409 = *((void *)&v870 + 1) - v870;
              uint64_t v410 = (uint64_t)(*((void *)&v870 + 1) - v870) >> 2;
              v411 = (char *)(v870 + ((*((void *)&v870 + 1) - v870) & 0xFFFFFFFFFFFFFFFCLL));
              if (v405 >> 2 <= (uint64_t)&v871[-*((void *)&v870 + 1)] >> 2)
              {
                uint64_t v423 = *((void *)&v870 + 1) - (void)v411;
                uint64_t v424 = (uint64_t)(*((void *)&v870 + 1) - (void)v411) >> 2;
                if (v424 >= v406)
                {
                  v425 = &v403[4 * v406];
                  v430 = (char *)*((void *)&v870 + 1);
                }
                else
                {
                  v425 = &v403[4 * v424];
                  int64_t v426 = v404 - v425;
                  if (v404 != v425)
                  {
                    unint64_t v826 = v870 + ((*((void *)&v870 + 1) - v870) & 0xFFFFFFFFFFFFFFFCLL);
                    size_t v427 = v404 - v425;
                    v428 = &v403[4 * v424];
                    uint64_t v429 = (uint64_t)(*((void *)&v870 + 1) - v870) >> 2;
                    memmove(*((void **)&v870 + 1), v428, v427);
                    uint64_t v410 = v429;
                    v425 = v428;
                    v411 = (char *)v826;
                    uint64_t v31 = v827;
                  }
                  v430 = &v407[v426];
                  *((void *)&v870 + 1) = &v407[v426];
                  if (v423 < 1) {
                    goto LABEL_408;
                  }
                }
                v431 = &v411[4 * v406];
                size_t v432 = v430 - v431;
                uint64_t v433 = (v430 - v431) >> 2;
                v434 = &v430[-4 * v406];
                v435 = v430;
                if (v434 < v407)
                {
                  unint64_t v436 = (v409 & 0xFFFFFFFFFFFFFFFCLL) + v432;
                  unint64_t v437 = v408 + v436 + 4;
                  if ((unint64_t)v407 > v437) {
                    unint64_t v437 = (unint64_t)v407;
                  }
                  unint64_t v438 = v437 + ~v408 - v436;
                  if (v438 < 0x2C)
                  {
                    v435 = v430;
                    goto LABEL_551;
                  }
                  v435 = v430;
                  if ((unint64_t)&v431[-(v409 & 0xFFFFFFFFFFFFFFFCLL) - v408] < 0x20) {
                    goto LABEL_1364;
                  }
                  uint64_t v456 = (v438 >> 2) + 1;
                  uint64_t v457 = 4 * (v456 & 0x7FFFFFFFFFFFFFF8);
                  v434 += v457;
                  v435 = &v430[v457];
                  v458 = v430 + 16;
                  v459 = (long long *)(v408 + 4 * v433 + 4 * v410 + 16);
                  uint64_t v460 = v456 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    long long v461 = *v459;
                    *(v458 - 1) = *(v459 - 1);
                    _OWORD *v458 = v461;
                    v458 += 2;
                    v459 += 2;
                    v460 -= 8;
                  }
                  while (v460);
                  if (v456 != (v456 & 0x7FFFFFFFFFFFFFF8))
                  {
LABEL_1364:
                    do
                    {
LABEL_551:
                      int v462 = *(_DWORD *)v434;
                      v434 += 4;
                      *(_DWORD *)v435 = v462;
                      v435 += 4;
                    }
                    while (v434 < v407);
                  }
                }
                *((void *)&v870 + 1) = v435;
                if (v430 != v431)
                {
                  v463 = v411;
                  memmove(&v430[-4 * v433], v411, v432);
                  v411 = v463;
                }
                if (v425 != v403) {
                  memmove(v411, v403, v425 - v403);
                }
                goto LABEL_408;
              }
              unint64_t v412 = v410 + v406;
              if ((unint64_t)(v410 + v406) >> 62) {
                sub_19E13D694();
              }
              uint64_t v413 = (uint64_t)&v871[-v870];
              if ((uint64_t)&v871[-v870] >> 1 > v412) {
                unint64_t v412 = v413 >> 1;
              }
              _CF = (unint64_t)v413 >= 0x7FFFFFFFFFFFFFFCLL;
              unint64_t v414 = 0x3FFFFFFFFFFFFFFFLL;
              if (!_CF) {
                unint64_t v414 = v412;
              }
              unint64_t v825 = v414;
              if (v414)
              {
                if (v414 >> 62) {
                  sub_19E13C418();
                }
                uint64_t v415 = (uint64_t)(*((void *)&v870 + 1) - v870) >> 2;
                unint64_t v416 = v870 + ((*((void *)&v870 + 1) - v870) & 0xFFFFFFFFFFFFFFFCLL);
                v417 = operator new(4 * v414);
                v411 = (char *)v416;
                uint64_t v410 = v415;
                v418 = v417;
                uint64_t v419 = (uint64_t)&v417[4 * v415];
                v420 = (char *)(v419 + 4 * v406);
                unint64_t v421 = v405 - 4;
                if ((unint64_t)(v405 - 4) < 0x1C)
                {
LABEL_517:
                  v422 = (char *)v419;
                  goto LABEL_534;
                }
              }
              else
              {
                v418 = 0;
                uint64_t v419 = 4 * v410;
                v420 = (char *)(4 * v410 + 4 * v406);
                unint64_t v421 = v405 - 4;
                if ((unint64_t)(v405 - 4) < 0x1C) {
                  goto LABEL_517;
                }
              }
              v422 = (char *)v419;
              if ((unint64_t)(&v418[v409 & 0xFFFFFFFFFFFFFFFCLL] - v403) < 0x20) {
                goto LABEL_1365;
              }
              uint64_t v439 = (v421 >> 2) + 1;
              uint64_t v440 = 4 * (v439 & 0x7FFFFFFFFFFFFFF8);
              v422 = (char *)(v419 + v440);
              v441 = &v403[v440];
              v442 = (long long *)(v403 + 16);
              v443 = &v418[4 * v410 + 16];
              uint64_t v444 = v439 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v445 = *v442;
                *(v443 - 1) = *(v442 - 1);
                _OWORD *v443 = v445;
                v442 += 2;
                v443 += 2;
                v444 -= 8;
              }
              while (v444);
              v403 = v441;
              if (v439 != (v439 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_1365:
                do
                {
LABEL_534:
                  int v446 = *(_DWORD *)v403;
                  v403 += 4;
                  *(_DWORD *)v422 = v446;
                  v422 += 4;
                }
                while (v422 != v420);
              }
              if ((char *)v408 != v407)
              {
                if ((unint64_t)(v409 - 4) < 0x3C)
                {
                  v447 = v411;
                  goto LABEL_542;
                }
                v447 = v411;
                if (v408 + (v409 & 0xFFFFFFFFFFFFFFFCLL) - (unint64_t)&v418[v409 & 0xFFFFFFFFFFFFFFFCLL] < 0x20) {
                  goto LABEL_1366;
                }
                unint64_t v448 = ((unint64_t)(v409 - 4) >> 2) + 1;
                uint64_t v449 = 4 * (v448 & 0x7FFFFFFFFFFFFFF8);
                v447 = &v411[-v449];
                v419 -= v449;
                v450 = &v418[4 * v410 - 16];
                v451 = (long long *)(v408 + 4 * v410 - 16);
                uint64_t v452 = v448 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  long long v453 = *v451;
                  *(v450 - 1) = *(v451 - 1);
                  _OWORD *v450 = v453;
                  v450 -= 2;
                  v451 -= 2;
                  v452 -= 8;
                }
                while (v452);
                if (v448 != (v448 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_1366:
                  do
                  {
LABEL_542:
                    int v454 = *((_DWORD *)v447 - 1);
                    v447 -= 4;
                    *(_DWORD *)(v419 - 4) = v454;
                    v419 -= 4;
                  }
                  while (v447 != (char *)v408);
                }
              }
              uint64_t v455 = v407 - v411;
              if (v407 != v411) {
                memmove(v420, v411, v407 - v411);
              }
              *(void *)&long long v870 = v419;
              *((void *)&v870 + 1) = &v420[v455];
              v871 = &v418[4 * v825];
              uint64_t v31 = v827;
              if (v408) {
                operator delete((void *)v408);
              }
LABEL_408:
              if (++v272 != 4) {
                continue;
              }
              break;
            }
            v464 = v1045;
            if ((unint64_t)v1045 >= v1046)
            {
              uint64_t v467 = v39;
              v468 = v804;
              v471 = sub_19E289A30(&v1044, (uint64_t)&v902);
            }
            else
            {
              *(void *)v1045 = 0;
              *((void *)v464 + 1) = 0;
              *((void *)v464 + 2) = 0;
              v465 = (const void *)v902;
              int64_t v466 = *((void *)&v902 + 1) - v902;
              uint64_t v467 = v39;
              v468 = v804;
              if (*((void *)&v902 + 1) != (void)v902)
              {
                if (v466 < 0) {
                  sub_19E13D694();
                }
                v469 = (char *)operator new(*((void *)&v902 + 1) - v902);
                *(void *)v464 = v469;
                *((void *)v464 + 1) = v469;
                v470 = &v469[4 * (v466 >> 2)];
                *((void *)v464 + 2) = v470;
                memcpy(v469, v465, v466);
                *((void *)v464 + 1) = v470;
              }
              v471 = v464 + 24;
            }
            v1045 = v471;
            uint64_t v472 = *((void *)v471 - 3);
            int v473 = v1019;
            v474 = (char *)operator new(0x58uLL);
            *((void *)v474 + 1) = 0;
            *((void *)v474 + 2) = 0;
            *(void *)v474 = &unk_1EF0ABE18;
            int v475 = v1011;
            *((void *)v474 + 3) = &unk_1EF0A8830;
            *(_OWORD *)(v474 + 56) = 0u;
            *(_OWORD *)(v474 + 72) = 0u;
            *((_DWORD *)v474 + 8) = 4 * v473;
            *((_DWORD *)v474 + 9) = v475;
            *((void *)v474 + 5) = v472;
            v474[48] = 0;
            v991 = v474 + 24;
            v992 = (std::__shared_weak_count *)v474;
            if ((unint64_t)v471 >= v1046)
            {
              v480 = sub_19E289A30(&v1044, (uint64_t)&v872);
            }
            else
            {
              *(void *)v471 = 0;
              *((void *)v471 + 1) = 0;
              *((void *)v471 + 2) = 0;
              v476 = v872;
              int64_t v477 = (unsigned char *)v873 - (unsigned char *)v872;
              if (v873 != v872)
              {
                if (v477 < 0) {
                  sub_19E13D694();
                }
                v478 = (char *)operator new((unsigned char *)v873 - (unsigned char *)v872);
                *(void *)v471 = v478;
                *((void *)v471 + 1) = v478;
                v479 = &v478[4 * (v477 >> 2)];
                *((void *)v471 + 2) = v479;
                memcpy(v478, v476, v477);
                *((void *)v471 + 1) = v479;
              }
              v480 = v471 + 24;
            }
            v1045 = v480;
            uint64_t v481 = *((void *)v480 - 3);
            int v482 = v1019;
            v483 = (char *)operator new(0x58uLL);
            *((void *)v483 + 1) = 0;
            *((void *)v483 + 2) = 0;
            *(void *)v483 = &unk_1EF0ABE18;
            *((void *)v483 + 3) = &unk_1EF0A8830;
            *(_OWORD *)(v483 + 56) = 0u;
            *(_OWORD *)(v483 + 72) = 0u;
            *((_DWORD *)v483 + 8) = 4 * v482;
            *((_DWORD *)v483 + 9) = v482;
            *((void *)v483 + 5) = v481;
            v483[48] = 0;
            v973 = v483 + 24;
            v974 = (std::__shared_weak_count *)v483;
            if ((unint64_t)v480 >= v1046)
            {
              uint64_t v30 = v811;
              v488 = sub_19E289A30(&v1044, (uint64_t)&v870);
            }
            else
            {
              *(void *)v480 = 0;
              *((void *)v480 + 1) = 0;
              *((void *)v480 + 2) = 0;
              v484 = (const void *)v870;
              int64_t v485 = *((void *)&v870 + 1) - v870;
              uint64_t v30 = v811;
              if (*((void *)&v870 + 1) != (void)v870)
              {
                if (v485 < 0) {
                  sub_19E13D694();
                }
                v486 = (char *)operator new(*((void *)&v870 + 1) - v870);
                *(void *)v480 = v486;
                *((void *)v480 + 1) = v486;
                v487 = &v486[4 * (v485 >> 2)];
                *((void *)v480 + 2) = v487;
                memcpy(v486, v484, v485);
                *((void *)v480 + 1) = v487;
              }
              v488 = v480 + 24;
            }
            v1045 = v488;
            uint64_t v489 = *((void *)v488 - 3);
            int v490 = v1019;
            v491 = (char *)operator new(0x58uLL);
            *((void *)v491 + 1) = 0;
            *((void *)v491 + 2) = 0;
            *(void *)v491 = &unk_1EF0ABDE0;
            *((void *)v491 + 3) = &unk_1EF0A8810;
            *(_OWORD *)(v491 + 56) = 0u;
            *(_OWORD *)(v491 + 72) = 0u;
            *((_DWORD *)v491 + 8) = 4 * v490;
            *((void *)v491 + 5) = v489;
            v491[48] = 0;
            v971 = v491 + 24;
            v972 = (std::__shared_weak_count *)v491;
            if (v803 != 2)
            {
              v970 = 0;
              uint64_t v969 = 0;
              char v869 = 3;
              strcpy((char *)v868, "W_x");
              (*(void (**)(uint64_t, uint64_t *, void **, void, uint64_t, void, __n128, __n128))(*(void *)v467 + 168))(v467, &v969, v868, *((void *)v991 + 2), 4 * *((int *)v991 + 2) * (uint64_t)*((int *)v991 + 3), 0, v805, v806);
              if (v869 < 0)
              {
                operator delete(v868[0]);
                v493 = v970;
                if (!v970) {
                  goto LABEL_596;
                }
              }
              else
              {
                v493 = v970;
                if (!v970) {
                  goto LABEL_596;
                }
              }
              if (!atomic_fetch_add(&v493->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v493->__on_zero_shared)(v493);
                std::__shared_weak_count::__release_weak(v493);
              }
LABEL_596:
              v970 = 0;
              uint64_t v969 = 0;
              char v869 = 3;
              strcpy((char *)v868, "W_h");
              (*(void (**)(uint64_t, uint64_t *, void **, void, uint64_t, void))(*(void *)v467 + 168))(v467, &v969, v868, *((void *)v973 + 2), 4 * *((int *)v973 + 2) * (uint64_t)*((int *)v973 + 3), 0);
              if (v869 < 0)
              {
                operator delete(v868[0]);
                v499 = v970;
                if (!v970)
                {
LABEL_606:
                  v970 = 0;
                  uint64_t v969 = 0;
                  char v869 = 1;
                  strcpy((char *)v868, "b");
                  (*(void (**)(uint64_t, uint64_t *, void **, void, uint64_t, void))(*(void *)v467 + 168))(v467, &v969, v868, *((void *)v971 + 2), 4 * *((int *)v971 + 2), 0);
                  goto LABEL_607;
                }
              }
              else
              {
                v499 = v970;
                if (!v970) {
                  goto LABEL_606;
                }
              }
              if (!atomic_fetch_add(&v499->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v499->__on_zero_shared)(v499);
                std::__shared_weak_count::__release_weak(v499);
              }
              goto LABEL_606;
            }
            v970 = 0;
            uint64_t v969 = 0;
            char v869 = 11;
            strcpy((char *)v868, "W_x_reverse");
            (*(void (**)(uint64_t, uint64_t *, void **, void, uint64_t, void, __n128, __n128))(*(void *)v467 + 168))(v467, &v969, v868, *((void *)v991 + 2), 4 * *((int *)v991 + 2) * (uint64_t)*((int *)v991 + 3), 0, v805, v806);
            if (v869 < 0)
            {
              operator delete(v868[0]);
              v492 = v970;
              if (!v970) {
                goto LABEL_590;
              }
            }
            else
            {
              v492 = v970;
              if (!v970) {
                goto LABEL_590;
              }
            }
            if (!atomic_fetch_add(&v492->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v492->__on_zero_shared)(v492);
              std::__shared_weak_count::__release_weak(v492);
            }
LABEL_590:
            v970 = 0;
            uint64_t v969 = 0;
            char v869 = 11;
            strcpy((char *)v868, "W_h_reverse");
            (*(void (**)(uint64_t, uint64_t *, void **, void, uint64_t, void))(*(void *)v467 + 168))(v467, &v969, v868, *((void *)v973 + 2), 4 * *((int *)v973 + 2) * (uint64_t)*((int *)v973 + 3), 0);
            if (v869 < 0)
            {
              operator delete(v868[0]);
              v498 = v970;
              if (!v970) {
                goto LABEL_602;
              }
            }
            else
            {
              v498 = v970;
              if (!v970) {
                goto LABEL_602;
              }
            }
            if (!atomic_fetch_add(&v498->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v498->__on_zero_shared)(v498);
              std::__shared_weak_count::__release_weak(v498);
            }
LABEL_602:
            v970 = 0;
            uint64_t v969 = 0;
            char v869 = 9;
            strcpy((char *)v868, "b_reverse");
            (*(void (**)(uint64_t, uint64_t *, void **, void, uint64_t, void))(*(void *)v467 + 168))(v467, &v969, v868, *((void *)v971 + 2), 4 * *((int *)v971 + 2), 0);
LABEL_607:
            if (v869 < 0)
            {
              operator delete(v868[0]);
              v500 = v970;
              if (!v970) {
                goto LABEL_612;
              }
            }
            else
            {
              v500 = v970;
              if (!v970)
              {
LABEL_612:
                v501 = v972;
                if (v972) {
                  goto LABEL_613;
                }
                goto LABEL_616;
              }
            }
            if (atomic_fetch_add(&v500->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
              goto LABEL_612;
            }
            ((void (*)(std::__shared_weak_count *))v500->__on_zero_shared)(v500);
            std::__shared_weak_count::__release_weak(v500);
            v501 = v972;
            if (v972)
            {
LABEL_613:
              if (!atomic_fetch_add(&v501->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v501->__on_zero_shared)(v501);
                std::__shared_weak_count::__release_weak(v501);
              }
            }
LABEL_616:
            v502 = v974;
            if (v974 && !atomic_fetch_add(&v974->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v502->__on_zero_shared)(v502);
              std::__shared_weak_count::__release_weak(v502);
              v503 = v992;
              if (v992) {
                goto LABEL_619;
              }
            }
            else
            {
              v503 = v992;
              if (v992)
              {
LABEL_619:
                if (!atomic_fetch_add(&v503->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v503->__on_zero_shared)(v503);
                  std::__shared_weak_count::__release_weak(v503);
                }
              }
            }
            if ((void)v870)
            {
              *((void *)&v870 + 1) = v870;
              operator delete((void *)v870);
            }
            if (v872)
            {
              v873 = v872;
              operator delete(v872);
            }
            if ((void)v902)
            {
              *((void *)&v902 + 1) = v902;
              operator delete((void *)v902);
            }
            uint64_t v504 = __dst;
            if ((void)__dst)
            {
              uint64_t v505 = *((void *)&__dst + 1);
              v506 = (void *)__dst;
              if (*((void *)&__dst + 1) != (void)__dst)
              {
                uint64_t v507 = *((void *)&__dst + 1);
                do
                {
                  v509 = *(void **)(v507 - 24);
                  v507 -= 24;
                  v508 = v509;
                  if (v509)
                  {
                    *(void *)(v505 - 16) = v508;
                    operator delete(v508);
                  }
                  uint64_t v505 = v507;
                }
                while (v507 != v504);
                v506 = (void *)__dst;
              }
              *((void *)&__dst + 1) = v504;
              operator delete(v506);
            }
            uint64_t v510 = v989;
            if ((void)v989)
            {
              uint64_t v511 = *((void *)&v989 + 1);
              v512 = (void *)v989;
              if (*((void *)&v989 + 1) != (void)v989)
              {
                uint64_t v513 = *((void *)&v989 + 1);
                do
                {
                  v515 = *(void **)(v513 - 24);
                  v513 -= 24;
                  v514 = v515;
                  if (v515)
                  {
                    *(void *)(v511 - 16) = v514;
                    operator delete(v514);
                  }
                  uint64_t v511 = v513;
                }
                while (v513 != v510);
                v512 = (void *)v989;
              }
              *((void *)&v989 + 1) = v510;
              operator delete(v512);
            }
            v516 = __str[0];
            if (__str[0])
            {
              v517 = __str[1];
              uint64_t v135 = __str[0];
              if (__str[1] != __str[0])
              {
                v518 = __str[1];
                do
                {
                  std::string::pointer v520 = v518[-1].__r_.__value_.__l.__data_;
                  --v518;
                  std::string::pointer v519 = v520;
                  if (v520)
                  {
                    v517[-1].__r_.__value_.__l.__size_ = (std::string::size_type)v519;
                    operator delete(v519);
                  }
                  v517 = v518;
                }
                while (v518 != v516);
                uint64_t v135 = __str[0];
              }
              __str[1] = v516;
              operator delete(v135);
            }
            int v106 = v468 + 1;
            if (v106 == v800)
            {
LABEL_223:
              if (*((void *)&v39 + 1)
                && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v39 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
              {
                (*(void (**)(void))(**((void **)&v39 + 1) + 16))(*((void *)&v39 + 1));
                std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v39 + 1));
              }
              operator delete(v795);
              a1 = v794;
              goto LABEL_1022;
            }
          }
          memset(__str, 0, 24);
          long long v989 = 0uLL;
          v990 = 0;
          int v138 = v1019;
          if ((int)v1019 >= 1)
          {
            int v139 = 0;
            LODWORD(v140) = 0;
            do
            {
              int v819 = v139;
              int v141 = v1011;
              if ((int)v1011 < 1) {
                goto LABEL_268;
              }
              int v142 = 0;
              uint64_t v140 = (int)v140;
              int v143 = __str[1];
              do
              {
                if (v143 < __str[2])
                {
                  LODWORD(v143->__r_.__value_.__l.__data_) = *(_DWORD *)(v137 + 4 * v140);
                  size_t v144 = (std::string *)((char *)v143->__r_.__value_.__r.__words + 4);
                  goto LABEL_239;
                }
                unint64_t v145 = __str[0];
                int64_t v146 = (char *)v143 - (char *)__str[0];
                uint64_t v147 = ((char *)v143 - (char *)__str[0]) >> 2;
                unint64_t v148 = v147 + 1;
                if ((unint64_t)(v147 + 1) >> 62) {
                  sub_19E13D694();
                }
                int64_t v149 = (char *)__str[2] - (char *)__str[0];
                if (((char *)__str[2] - (char *)__str[0]) >> 1 > v148) {
                  unint64_t v148 = v149 >> 1;
                }
                if ((unint64_t)v149 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v150 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v150 = v148;
                }
                if (v150)
                {
                  if (v150 >> 62) {
                    sub_19E13C418();
                  }
                  int32x4_t v151 = operator new(4 * v150);
                  int32x4_t v152 = (std::string *)&v151[4 * v147];
                  LODWORD(v152->__r_.__value_.__l.__data_) = *(_DWORD *)(v137 + 4 * v140);
                  size_t v144 = (std::string *)((char *)v152->__r_.__value_.__r.__words + 4);
                  if (v143 == v145) {
                    goto LABEL_255;
                  }
                }
                else
                {
                  int32x4_t v151 = 0;
                  int32x4_t v152 = (std::string *)(4 * v147);
                  *(_DWORD *)(4 * v147) = *(_DWORD *)(v137 + 4 * v140);
                  size_t v144 = (std::string *)(4 * v147 + 4);
                  if (v143 == v145) {
                    goto LABEL_255;
                  }
                }
                unint64_t v153 = (char *)&v143[-1].__r_.__value_.__r.__words[2] + 4 - (char *)v145;
                if (v153 < 0xBC)
                {
                  v154 = v143;
                  goto LABEL_254;
                }
                if (&v151[v146 - 4 - (v153 & 0xFFFFFFFFFFFFFFFCLL)] > &v151[v146 - 4])
                {
                  v154 = v143;
                  do
                  {
LABEL_254:
                    int v155 = HIDWORD(v154[-1].__r_.__value_.__r.__words[2]);
                    v154 = (std::string *)((char *)v154 - 4);
                    HIDWORD(v152[-1].__r_.__value_.__r.__words[2]) = v155;
                    int32x4_t v152 = (std::string *)((char *)v152 - 4);
                  }
                  while (v154 != v145);
                  goto LABEL_255;
                }
                if ((char *)&v143[-1].__r_.__value_.__r.__words[2] - (v153 & 0xFFFFFFFFFFFFFFFCLL) + 4 > (char *)&v143[-1].__r_.__value_.__r.__words[2] + 4)
                {
                  v154 = v143;
                  goto LABEL_254;
                }
                if ((unint64_t)((char *)v143 - &v151[v146]) < 0x20)
                {
                  v154 = v143;
                  goto LABEL_254;
                }
                uint64_t v156 = (v153 >> 2) + 1;
                uint64_t v157 = 4 * (v156 & 0x7FFFFFFFFFFFFFF8);
                v154 = (std::string *)((char *)v143 - v157);
                int32x4_t v152 = (std::string *)((char *)v152 - v157);
                unint64_t v158 = &v151[4 * v147 - 16];
                p_std::string::size_type size = &v143[-1].__r_.__value_.__l.__size_;
                uint64_t v160 = v156 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  long long v161 = *(_OWORD *)p_size;
                  *(v158 - 1) = *((_OWORD *)p_size - 1);
                  *unint64_t v158 = v161;
                  v158 -= 2;
                  p_size -= 4;
                  v160 -= 8;
                }
                while (v160);
                if (v156 != (v156 & 0x7FFFFFFFFFFFFFF8)) {
                  goto LABEL_254;
                }
LABEL_255:
                __str[0] = v152;
                __str[1] = v144;
                __str[2] = (std::string *)&v151[4 * v150];
                if (v145)
                {
                  operator delete(v145);
                  int v141 = v1011;
                }
LABEL_239:
                __str[1] = v144;
                ++v140;
                ++v142;
                int v143 = v144;
              }
              while (v142 < v141);
              int v138 = v1019;
LABEL_268:
              if (v138 >= 1)
              {
                int v162 = 0;
                uint64_t v140 = (int)v140;
                v163 = (std::string *)*((void *)&v989 + 1);
                while (v163 < v990)
                {
                  LODWORD(v163->__r_.__value_.__l.__data_) = *(_DWORD *)(v137 + 4 * v140);
                  uint64_t v164 = (uint64_t)v163->__r_.__value_.__r.__words + 4;
LABEL_271:
                  *((void *)&v989 + 1) = v164;
                  ++v140;
                  ++v162;
                  v163 = (std::string *)v164;
                  if (v162 >= v138) {
                    goto LABEL_235;
                  }
                }
                v165 = (std::string *)v989;
                v166 = (char *)v163 - v989;
                uint64_t v167 = (uint64_t)((uint64_t)v163 - v989) >> 2;
                unint64_t v168 = v167 + 1;
                if ((unint64_t)(v167 + 1) >> 62) {
                  sub_19E13D694();
                }
                uint64_t v169 = (uint64_t)v990 - v989;
                if ((uint64_t)((uint64_t)v990 - v989) >> 1 > v168) {
                  unint64_t v168 = v169 >> 1;
                }
                if ((unint64_t)v169 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v170 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v170 = v168;
                }
                if (v170)
                {
                  if (v170 >> 62) {
                    sub_19E13C418();
                  }
                  v171 = operator new(4 * v170);
                  v172 = (char *)v171 + 4 * v167;
                  _DWORD *v172 = *(_DWORD *)(v137 + 4 * v140);
                  uint64_t v164 = (uint64_t)(v172 + 1);
                  if (v163 == v165) {
                    goto LABEL_287;
                  }
LABEL_284:
                  unint64_t v173 = (char *)&v163[-1].__r_.__value_.__r.__words[2] + 4 - (char *)v165;
                  if (v173 < 0xBC)
                  {
                    v174 = v163;
                    goto LABEL_286;
                  }
                  if (&v166[(void)v171 - 4 - (v173 & 0xFFFFFFFFFFFFFFFCLL)] > &v166[(void)v171 - 4])
                  {
                    v174 = v163;
                    goto LABEL_286;
                  }
                  if ((char *)&v163[-1].__r_.__value_.__r.__words[2] - (v173 & 0xFFFFFFFFFFFFFFFCLL) + 4 > (char *)&v163[-1].__r_.__value_.__r.__words[2] + 4)
                  {
                    v174 = v163;
                    goto LABEL_286;
                  }
                  if ((unint64_t)((char *)v163 - &v166[(void)v171]) < 0x20)
                  {
                    v174 = v163;
                    goto LABEL_286;
                  }
                  uint64_t v176 = (v173 >> 2) + 1;
                  uint64_t v177 = 4 * (v176 & 0x7FFFFFFFFFFFFFF8);
                  v174 = (std::string *)((char *)v163 - v177);
                  v172 = (_DWORD *)((char *)v172 - v177);
                  v178 = (char *)v171 + 4 * v167 - 16;
                  v179 = &v163[-1].__r_.__value_.__l.__size_;
                  uint64_t v180 = v176 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    long long v181 = *(_OWORD *)v179;
                    *(v178 - 1) = *((_OWORD *)v179 - 1);
                    _OWORD *v178 = v181;
                    v178 -= 2;
                    v179 -= 4;
                    v180 -= 8;
                  }
                  while (v180);
                  if (v176 != (v176 & 0x7FFFFFFFFFFFFFF8))
                  {
                    do
                    {
LABEL_286:
                      int v175 = HIDWORD(v174[-1].__r_.__value_.__r.__words[2]);
                      v174 = (std::string *)((char *)v174 - 4);
                      *--v172 = v175;
                    }
                    while (v174 != v165);
                  }
                }
                else
                {
                  v171 = 0;
                  v172 = (_DWORD *)(4 * v167);
                  *(_DWORD *)(4 * v167) = *(_DWORD *)(v137 + 4 * v140);
                  uint64_t v164 = 4 * v167 + 4;
                  if (v163 != v165) {
                    goto LABEL_284;
                  }
                }
LABEL_287:
                *(void *)&long long v989 = v172;
                *((void *)&v989 + 1) = v164;
                v990 = (std::string *)((char *)v171 + 4 * v170);
                if (v165)
                {
                  operator delete(v165);
                  int v138 = v1019;
                }
                goto LABEL_271;
              }
LABEL_235:
              int v139 = v819 + 1;
            }
            while (v819 + 1 < 4 * v138);
          }
          v182 = v1045;
          if ((unint64_t)v1045 >= v1046)
          {
            uint64_t v136 = (void *)&v1003 + v803;
            v187 = sub_19E289A30(&v1044, (uint64_t)__str);
            v1045 = v187;
            uint64_t v137 = *((void *)v187 - 3);
            if ((unint64_t)v187 >= v1046) {
              goto LABEL_304;
            }
          }
          else
          {
            *(void *)v1045 = 0;
            *((void *)v182 + 1) = 0;
            *((void *)v182 + 2) = 0;
            v183 = __str[0];
            int64_t v184 = (char *)__str[1] - (char *)__str[0];
            if (__str[1] != __str[0])
            {
              if (v184 < 0) {
                sub_19E13D694();
              }
              v185 = (char *)operator new((char *)__str[1] - (char *)__str[0]);
              *(void *)v182 = v185;
              *((void *)v182 + 1) = v185;
              v186 = &v185[4 * (v184 >> 2)];
              *((void *)v182 + 2) = v186;
              memcpy(v185, v183, v184);
              *((void *)v182 + 1) = v186;
            }
            v187 = v182 + 24;
            uint64_t v136 = (void *)&v1003 + v803;
            v1045 = v187;
            uint64_t v137 = *((void *)v187 - 3);
            if ((unint64_t)v187 >= v1046)
            {
LABEL_304:
              v1045 = sub_19E289A30(&v1044, (uint64_t)&v989);
              uint64_t v809 = *((void *)v1045 - 3);
              v188 = (void *)v989;
              if (!(void)v989) {
                goto LABEL_306;
              }
              goto LABEL_305;
            }
          }
          *(void *)v187 = 0;
          *((void *)v187 + 1) = 0;
          *((void *)v187 + 2) = 0;
          v494 = (const void *)v989;
          int64_t v495 = *((void *)&v989 + 1) - v989;
          if (*((void *)&v989 + 1) != (void)v989)
          {
            if (v495 < 0) {
              sub_19E13D694();
            }
            v496 = (char *)operator new(*((void *)&v989 + 1) - v989);
            *(void *)v187 = v496;
            *((void *)v187 + 1) = v496;
            v497 = &v496[4 * (v495 >> 2)];
            *((void *)v187 + 2) = v497;
            memcpy(v496, v494, v495);
            *((void *)v187 + 1) = v497;
          }
          uint64_t v136 = (void *)&v1003 + v803;
          v1045 = v187 + 24;
          uint64_t v809 = *(void *)v187;
          v188 = (void *)v989;
          if (!(void)v989)
          {
LABEL_306:
            if (__str[0])
            {
              __str[1] = __str[0];
              operator delete(__str[0]);
            }
            v810 = (float32x4_t *)v136[72];
            if ((BYTE8(v1010) & 0x80) != 0) {
              goto LABEL_326;
            }
LABEL_309:
            v189 = (float32x4_t *)v136[73];
            memset(__str, 0, 24);
            if (v1019)
            {
              if ((v1019 & 0x80000000) != 0) {
                sub_19E13D694();
              }
              uint64_t v190 = 4 * (int)v1019;
              v191 = (std::string *)operator new(4 * v190);
              __str[0] = v191;
              __str[2] = (std::string *)((char *)v191 + 4 * v190);
              bzero(v191, 4 * v190);
              __str[1] = (std::string *)((char *)v191 + 4 * v190);
              if ((int)v190 <= 1) {
                uint64_t v192 = 1;
              }
              else {
                uint64_t v192 = v190;
              }
              if (v192 >= 8)
              {
                uint64_t v193 = 0;
                if ((unint64_t)((char *)v191 - (char *)v810) >= 0x20
                  && (unint64_t)((char *)v191 - (char *)v189) >= 0x20)
                {
                  uint64_t v193 = v192 & 0x7FFFFFF8;
                  v521 = v810 + 1;
                  v522 = v189 + 1;
                  v523 = (float32x4_t *)&v191->__r_.__value_.__r.__words[2];
                  uint64_t v524 = v193;
                  do
                  {
                    float32x4_t v525 = vaddq_f32(*v522, *v521);
                    v523[-1] = vaddq_f32(v522[-1], v521[-1]);
                    float32x4_t *v523 = v525;
                    v521 += 2;
                    v522 += 2;
                    v523 += 2;
                    v524 -= 8;
                  }
                  while (v524);
                  if (v193 == v192) {
                    goto LABEL_318;
                  }
                }
              }
              else
              {
                uint64_t v193 = 0;
              }
              v194 = &v189->f32[v193];
              v195 = &v810->f32[v193];
              v196 = (float *)((char *)v191 + 4 * v193);
              uint64_t v197 = v192 - v193;
              do
              {
                float v198 = *v195++;
                float v199 = v198;
                float v200 = *v194++;
                *v196++ = v200 + v199;
                --v197;
              }
              while (v197);
            }
LABEL_318:
            v201 = v1045;
            if ((unint64_t)v1045 >= v1046)
            {
              v206 = sub_19E289A30(&v1044, (uint64_t)__str);
            }
            else
            {
              *(void *)v1045 = 0;
              *((void *)v201 + 1) = 0;
              *((void *)v201 + 2) = 0;
              v202 = __str[0];
              int64_t v203 = (char *)__str[1] - (char *)__str[0];
              if (__str[1] != __str[0])
              {
                if (v203 < 0) {
                  sub_19E13D694();
                }
                v204 = (char *)operator new((char *)__str[1] - (char *)__str[0]);
                *(void *)v201 = v204;
                *((void *)v201 + 1) = v204;
                v205 = &v204[4 * (v203 >> 2)];
                *((void *)v201 + 2) = v205;
                memcpy(v204, v202, v203);
                *((void *)v201 + 1) = v205;
              }
              v206 = v201 + 24;
            }
            v1045 = v206;
            v810 = (float32x4_t *)*((void *)v206 - 3);
            if (__str[0])
            {
              __str[1] = __str[0];
              operator delete(__str[0]);
            }
            goto LABEL_326;
          }
LABEL_305:
          *((void *)&v989 + 1) = v188;
          operator delete(v188);
          goto LABEL_306;
        case 11:
          *(void *)&__p[64] = _D8;
          *(_WORD *)&__p[72] = 1;
          memset(&__p[74], 0, 18);
          *(void *)&__p[96] = 65537;
          int v943 = 0;
          char v944 = 0;
          uint64_t v939 = 0;
          uint64_t v940 = 0;
          memset(__p, 0, 32);
          *(void *)&__p[32] = 1;
          *(_OWORD *)&__p[104] = xmmword_19E351E30;
          *(void *)v938 = 0;
          *(_DWORD *)&__p[120] = 1;
          *(_DWORD *)&v938[8] = 0x10000;
          int v941 = 0;
          __int16 v942 = 1;
          *(_DWORD *)&__p[40] = v1019;
          *(_DWORD *)&__p[44] = DWORD2(v1011);
          *(void *)&__p[56] = 0xFFFFFFFF00000000;
          *(void *)&__p[48] = v1023;
          *(_WORD *)&__p[92] = WORD4(v1023);
          *(_WORD *)&__p[94] = WORD6(v1023);
          switch(v1024)
          {
            case 2:
              *(void *)&__p[72] = 0;
              int16x4_t v680 = vuzp1_s16(*(int16x4_t *)((char *)&v1024 + 4), *(int16x4_t *)((char *)&v1024 + 4));
              *(int16x4_t *)&__p[80] = vzip1_s16(v680, v680);
              uint64_t v67 = *((void *)&v1006 + 1);
              size_t v68 = &__p[24];
              uint64_t v69 = (uint64_t)v801;
              if (*((void *)&v1006 + 1) == 5) {
                goto LABEL_968;
              }
              break;
            case 1:
              *(_WORD *)&__p[72] = 1;
              break;
            case 0:
              *(_WORD *)&__p[72] = 2;
              uint64_t v67 = *((void *)&v1006 + 1);
              size_t v68 = &__p[24];
              uint64_t v69 = (uint64_t)v801;
              if (*((void *)&v1006 + 1) == 5) {
                goto LABEL_968;
              }
              break;
            default:
              uint64_t v67 = *((void *)&v1006 + 1);
              size_t v68 = &__p[24];
              uint64_t v69 = (uint64_t)v801;
              if (*((void *)&v1006 + 1) == 5) {
                goto LABEL_968;
              }
              break;
          }
          if (v67 != 2) {
            goto LABEL_969;
          }
          size_t v68 = &__p[28];
LABEL_968:
          *(_DWORD *)size_t v68 = 1;
LABEL_969:
          HIBYTE(__str[2]) = 11;
          strcpy((char *)__str, "convolution");
          uint64_t v936 = 0;
          v934 = 0;
          v935 = 0;
          sub_19E28750C(&v934, v69, v30, 0xAAAAAAAAAAAAAAABLL * ((v30 - v69) >> 3));
          v932 = 0;
          v931 = 0;
          uint64_t v933 = 0;
          sub_19E28750C(&v931, v31, v802, 0xAAAAAAAAAAAAAAABLL * ((v802 - v31) >> 3));
          sub_19E284C24(a1, (uint64_t *)&v934, (uint64_t *)&v931, &v989);
          v663 = (void **)v931;
          if (v931)
          {
            v664 = v932;
            v665 = v931;
            if (v932 != v931)
            {
              do
              {
                if (*((char *)v664 - 1) < 0) {
                  operator delete(*(v664 - 3));
                }
                v664 -= 3;
              }
              while (v664 != v663);
              v665 = v931;
            }
            v932 = v663;
            operator delete(v665);
          }
          v666 = (void **)v934;
          if (v934)
          {
            v667 = v935;
            v668 = v934;
            if (v935 != v934)
            {
              do
              {
                if (*((char *)v667 - 1) < 0) {
                  operator delete(*(v667 - 3));
                }
                v667 -= 3;
              }
              while (v667 != v666);
              v668 = v934;
            }
            v935 = v666;
            operator delete(v668);
          }
          if (SHIBYTE(__str[2]) < 0) {
            operator delete(__str[0]);
          }
          v669 = v1035;
          v670 = (char *)operator new(0x58uLL);
          *((void *)v670 + 1) = 0;
          *((void *)v670 + 2) = 0;
          *(void *)v670 = &unk_1EF0ABDE0;
          int v671 = v1019;
          *((void *)v670 + 3) = &unk_1EF0A8810;
          *(_OWORD *)(v670 + 56) = 0u;
          *(_OWORD *)(v670 + 72) = 0u;
          *((_DWORD *)v670 + 8) = v671;
          *((void *)v670 + 5) = v669;
          v670[48] = 0;
          __str[0] = (std::string *)(v670 + 24);
          __str[1] = (std::string *)v670;
          uint64_t v672 = v1031;
          v673 = operator new(0x60uLL);
          v673[1] = 0;
          v673[2] = 0;
          void *v673 = &unk_1EF0ABE50;
          int v674 = DWORD2(v1011);
          v673[3] = &unk_1EF0A8850;
          *((_OWORD *)v673 + 4) = 0u;
          *((_OWORD *)v673 + 5) = 0u;
          v673[4] = v1023;
          *((_DWORD *)v673 + 10) = v674;
          *((_DWORD *)v673 + 11) = v671;
          v673[6] = v672;
          *((unsigned char *)v673 + 56) = 0;
          *(void *)&long long __dst = v673 + 3;
          *((void *)&__dst + 1) = v673;
          uint64_t v675 = v989;
          v929 = v670 + 24;
          v930 = (std::__shared_weak_count *)v670;
          atomic_fetch_add_explicit((atomic_ullong *volatile)v670 + 1, 1uLL, memory_order_relaxed);
          (*(void (**)(void))(*(void *)v675 + 392))();
          v676 = v930;
          uint64_t v30 = v811;
          uint64_t v31 = v827;
          if (v930 && !atomic_fetch_add(&v930->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v676->__on_zero_shared)(v676);
            std::__shared_weak_count::__release_weak(v676);
          }
          uint64_t v677 = v989;
          long long v928 = __dst;
          if (*((void *)&__dst + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&__dst + 1) + 8), 1uLL, memory_order_relaxed);
          }
          (*(void (**)(uint64_t, long long *))(*(void *)v677 + 400))(v677, &v928);
          v678 = (std::__shared_weak_count *)*((void *)&v928 + 1);
          if (!*((void *)&v928 + 1)
            || atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v928 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            v632 = (std::__shared_weak_count *)*((void *)&__dst + 1);
            if (!*((void *)&__dst + 1)) {
              goto LABEL_996;
            }
            goto LABEL_995;
          }
          ((void (*)(std::__shared_weak_count *))v678->__on_zero_shared)(v678);
          std::__shared_weak_count::__release_weak(v678);
          v632 = (std::__shared_weak_count *)*((void *)&__dst + 1);
          if (*((void *)&__dst + 1)) {
            goto LABEL_995;
          }
          goto LABEL_996;
        case 12:
          *(void *)&__p[4] = v1023;
          *(_DWORD *)&__p[32] = 2;
          *(void *)&__p[24] = 1;
          *(_WORD *)&__p[36] = 1;
          memset(&__p[38], 0, 32);
          *(void *)&__p[72] = 0;
          *(void *)&__p[80] = 0;
          *(void *)&__p[88] = 0x100000001;
          *(void *)&__p[96] = 0;
          *(void *)&__p[104] = 0;
          *(_DWORD *)&__p[12] = 0;
          *(_DWORD *)__p = 1;
          *(void *)&__p[16] = *((void *)&v1023 + 1);
          if (v1024 == 2)
          {
            *(void *)&__p[36] = 0;
            int16x4_t v643 = vuzp1_s16(*(int16x4_t *)((char *)&v1024 + 4), *(int16x4_t *)((char *)&v1024 + 4));
            *(int16x4_t *)&__p[44] = vzip1_s16(v643, v643);
            uint64_t v93 = (uint64_t)v801;
          }
          else
          {
            uint64_t v93 = (uint64_t)v801;
            if (!v1024) {
              *(_WORD *)&__p[36] = 2;
            }
          }
          HIBYTE(__str[2]) = 4;
          strcpy((char *)__str, "pool");
          uint64_t v927 = 0;
          v925 = 0;
          uint64_t v926 = 0;
          sub_19E28750C(&v925, v93, v30, 0xAAAAAAAAAAAAAAABLL * ((v30 - v93) >> 3));
          v923 = 0;
          v922 = 0;
          uint64_t v924 = 0;
          sub_19E28750C(&v922, v31, v802, 0xAAAAAAAAAAAAAAABLL * ((v802 - v31) >> 3));
          sub_19E28500C(a1, (uint64_t *)&v925, (uint64_t *)&v922, &v989);
          v644 = (void **)v922;
          if (v922)
          {
            v645 = v923;
            v646 = v922;
            if (v923 != v922)
            {
              do
              {
                if (*((char *)v645 - 1) < 0) {
                  operator delete(*(v645 - 3));
                }
                v645 -= 3;
              }
              while (v645 != v644);
              v646 = v922;
            }
            v923 = v644;
            operator delete(v646);
          }
          uint64_t v647 = (uint64_t)v925;
          if (!v925) {
            goto LABEL_1016;
          }
          uint64_t v648 = v926;
          v538 = v925;
          if ((void *)v926 != v925)
          {
            do
            {
              if (*(char *)(v648 - 1) < 0) {
                operator delete(*(void **)(v648 - 24));
              }
              v648 -= 24;
            }
            while (v648 != v647);
            v538 = v925;
          }
          uint64_t v926 = v647;
          goto LABEL_1015;
        case 15:
          *(void *)__p = 0;
          *(void *)&__p[8] = 1065353216;
          *(void *)&__p[16] = 897988541;
          __p[24] = 0;
          *(void *)&__p[44] = 0;
          HIBYTE(__str[2]) = 11;
          strcpy((char *)__str, "elementwise");
          uint64_t v962 = 0;
          v960 = 0;
          uint64_t v961 = 0;
          sub_19E28750C(&v960, (uint64_t)v801, v30, 0xAAAAAAAAAAAAAAABLL * ((v30 - (uint64_t)v801) >> 3));
          v958 = 0;
          v957 = 0;
          uint64_t v959 = 0;
          sub_19E28750C(&v957, v31, v802, 0xAAAAAAAAAAAAAAABLL * ((v802 - v31) >> 3));
          sub_19E284924(a1, (uint64_t *)&v960, (uint64_t *)&v957, (uint64_t *)&v989);
          unint64_t v70 = (void **)v957;
          if (v957)
          {
            uint64_t v71 = v958;
            uint64_t v72 = v957;
            if (v958 != v957)
            {
              do
              {
                if (*((char *)v71 - 1) < 0) {
                  operator delete(*(v71 - 3));
                }
                v71 -= 3;
              }
              while (v71 != v70);
              uint64_t v72 = v957;
            }
            v958 = v70;
            operator delete(v72);
          }
          uint64_t v536 = (uint64_t)v960;
          if (!v960) {
            goto LABEL_1016;
          }
          uint64_t v537 = v961;
          v538 = v960;
          if ((void *)v961 != v960)
          {
            do
            {
              if (*(char *)(v537 - 1) < 0) {
                operator delete(*(void **)(v537 - 24));
              }
              v537 -= 24;
            }
            while (v537 != v536);
            v538 = v960;
          }
          uint64_t v961 = v536;
          goto LABEL_1015;
        case 17:
          *(_OWORD *)__str = v1023;
          LODWORD(__str[2]) = v1024;
          __p[23] = 9;
          strcpy(__p, "transpose");
          uint64_t v843 = 0;
          v841 = 0;
          v842 = 0;
          sub_19E28750C(&v841, (uint64_t)v801, v30, 0xAAAAAAAAAAAAAAABLL * ((v30 - (uint64_t)v801) >> 3));
          v839 = 0;
          v838 = 0;
          uint64_t v840 = 0;
          sub_19E28750C(&v838, v31, v802, 0xAAAAAAAAAAAAAAABLL * ((v802 - v31) >> 3));
          sub_19E284154(a1, (uint64_t *)&v841, (uint64_t *)&v838, &v989);
          int v80 = (void **)v838;
          if (v838)
          {
            v81 = v839;
            v82 = v838;
            if (v839 != v838)
            {
              do
              {
                if (*((char *)v81 - 1) < 0) {
                  operator delete(*(v81 - 3));
                }
                v81 -= 3;
              }
              while (v81 != v80);
              v82 = v838;
            }
            v839 = v80;
            operator delete(v82);
          }
          v572 = (void **)v841;
          if (v841)
          {
            v573 = v842;
            v574 = v841;
            if (v842 != v841)
            {
              do
              {
                if (*((char *)v573 - 1) < 0) {
                  operator delete(*(v573 - 3));
                }
                v573 -= 3;
              }
              while (v573 != v572);
              v574 = v841;
            }
            v842 = v572;
            operator delete(v574);
          }
          if ((__p[23] & 0x80000000) == 0) {
            goto LABEL_1019;
          }
          v535 = *(std::string **)__p;
          goto LABEL_1018;
        case 20:
          LODWORD(v973) = DWORD1(v1023) * v1023;
          HIDWORD(v973) = DWORD1(v1023);
          LOBYTE(v974) = DWORD2(v1023) == 1;
          __p[23] = 14;
          strcpy(__p, "self_attention");
          uint64_t v998 = 0;
          v996 = 0;
          v997 = 0;
          sub_19E28750C(&v996, (uint64_t)v801, v30, 0xAAAAAAAAAAAAAAABLL * ((v30 - (uint64_t)v801) >> 3));
          v994 = 0;
          v993 = 0;
          uint64_t v995 = 0;
          sub_19E28750C(&v993, v31, v802, 0xAAAAAAAAAAAAAAABLL * ((v802 - v31) >> 3));
          sub_19E283D6C(a1, (uint64_t *)&v996, (uint64_t *)&v993, __str);
          uint64_t v76 = (void **)v993;
          if (v993)
          {
            int v77 = v994;
            long long v78 = v993;
            if (v994 != v993)
            {
              do
              {
                if (*((char *)v77 - 1) < 0) {
                  operator delete(*(v77 - 3));
                }
                v77 -= 3;
              }
              while (v77 != v76);
              long long v78 = v993;
            }
            v994 = v76;
            operator delete(v78);
          }
          v539 = (void **)v996;
          if (v996)
          {
            v540 = v997;
            v541 = v996;
            if (v997 != v996)
            {
              do
              {
                if (*((char *)v540 - 1) < 0) {
                  operator delete(*(v540 - 3));
                }
                v540 -= 3;
              }
              while (v540 != v539);
              v541 = v996;
            }
            v997 = v539;
            operator delete(v541);
          }
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
          uint64_t v542 = v1031;
          v543 = (char *)operator new(0x58uLL);
          *((void *)v543 + 1) = 0;
          *((void *)v543 + 2) = 0;
          *(void *)v543 = &unk_1EF0ABE18;
          int v544 = (int)v973;
          *((void *)v543 + 3) = &unk_1EF0A8830;
          *(_OWORD *)(v543 + 56) = 0u;
          *(_OWORD *)(v543 + 72) = 0u;
          *((_DWORD *)v543 + 8) = v544;
          *((_DWORD *)v543 + 9) = v544;
          *((void *)v543 + 5) = v542;
          v543[48] = 0;
          *(void *)&long long v989 = v543 + 24;
          *((void *)&v989 + 1) = v543;
          long long __dst = 0uLL;
          __p[23] = 7;
          strcpy(__p, "W_query");
          (*((void (**)(std::string *, long long *, unsigned char *, uint64_t, uint64_t, void, __n128, __n128))__str[0]->__r_.__value_.__l.__data_
           + 21))(__str[0], &__dst, __p, v542, 4 * v544 * (uint64_t)v544, 0, v805, v806);
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
          v545 = (std::__shared_weak_count *)*((void *)&__dst + 1);
          if (*((void *)&__dst + 1)
            && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&__dst + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v545->__on_zero_shared)(v545);
            std::__shared_weak_count::__release_weak(v545);
          }
          uint64_t v546 = *((void *)&v1031 + 1);
          v547 = (char *)operator new(0x58uLL);
          *((void *)v547 + 1) = 0;
          *((void *)v547 + 2) = 0;
          *(void *)v547 = &unk_1EF0ABE18;
          int v548 = (int)v973;
          *((void *)v547 + 3) = &unk_1EF0A8830;
          *(_OWORD *)(v547 + 56) = 0u;
          *(_OWORD *)(v547 + 72) = 0u;
          *((_DWORD *)v547 + 8) = v548;
          *((_DWORD *)v547 + 9) = v548;
          *((void *)v547 + 5) = v546;
          v547[48] = 0;
          *(void *)&long long __dst = v547 + 24;
          *((void *)&__dst + 1) = v547;
          long long v902 = 0uLL;
          __p[23] = 5;
          strcpy(__p, "W_key");
          (*((void (**)(std::string *, long long *, unsigned char *, uint64_t, uint64_t, void, __n128, __n128))__str[0]->__r_.__value_.__l.__data_
           + 21))(__str[0], &v902, __p, v546, 4 * v548 * (uint64_t)v548, 0, v805, v806);
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
          v549 = (std::__shared_weak_count *)*((void *)&v902 + 1);
          if (*((void *)&v902 + 1)
            && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v902 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v549->__on_zero_shared)(v549);
            std::__shared_weak_count::__release_weak(v549);
          }
          uint64_t v550 = v1032;
          v551 = (char *)operator new(0x58uLL);
          *((void *)v551 + 1) = 0;
          *((void *)v551 + 2) = 0;
          *(void *)v551 = &unk_1EF0ABE18;
          int v552 = (int)v973;
          *((void *)v551 + 3) = &unk_1EF0A8830;
          *(_OWORD *)(v551 + 56) = 0u;
          *(_OWORD *)(v551 + 72) = 0u;
          *((_DWORD *)v551 + 8) = v552;
          *((_DWORD *)v551 + 9) = v552;
          *((void *)v551 + 5) = v550;
          v551[48] = 0;
          *(void *)&long long v902 = v551 + 24;
          *((void *)&v902 + 1) = v551;
          v873 = 0;
          v872 = 0;
          __p[23] = 7;
          strcpy(__p, "W_value");
          (*((void (**)(std::string *, void **, unsigned char *, uint64_t, uint64_t, void, __n128, __n128))__str[0]->__r_.__value_.__l.__data_
           + 21))(__str[0], &v872, __p, v550, 4 * v552 * (uint64_t)v552, 0, v805, v806);
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
          v553 = (std::__shared_weak_count *)v873;
          if (v873 && !atomic_fetch_add((atomic_ullong *volatile)v873 + 1, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v553->__on_zero_shared)(v553);
            std::__shared_weak_count::__release_weak(v553);
          }
          v554 = v1035;
          v555 = (char *)operator new(0x58uLL);
          *((void *)v555 + 1) = 0;
          *((void *)v555 + 2) = 0;
          *(void *)v555 = &unk_1EF0ABDE0;
          uint64_t v556 = (int)v973;
          *((void *)v555 + 3) = &unk_1EF0A8810;
          *(_OWORD *)(v555 + 56) = 0u;
          *(_OWORD *)(v555 + 72) = 0u;
          *((_DWORD *)v555 + 8) = v556;
          *((void *)v555 + 5) = v554;
          v555[48] = 0;
          v872 = v555 + 24;
          v873 = v555;
          long long v870 = 0uLL;
          __p[23] = 7;
          strcpy(__p, "b_query");
          (*((void (**)(std::string *, long long *, unsigned char *, _OWORD *, uint64_t, void, __n128, __n128))__str[0]->__r_.__value_.__l.__data_
           + 21))(__str[0], &v870, __p, v554, 4 * v556, 0, v805, v806);
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
          v557 = (std::__shared_weak_count *)*((void *)&v870 + 1);
          if (*((void *)&v870 + 1)
            && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v870 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v557->__on_zero_shared)(v557);
            std::__shared_weak_count::__release_weak(v557);
          }
          uint64_t v558 = v1036;
          v559 = (char *)operator new(0x58uLL);
          *((void *)v559 + 1) = 0;
          *((void *)v559 + 2) = 0;
          *(void *)v559 = &unk_1EF0ABDE0;
          uint64_t v560 = (int)v973;
          *((void *)v559 + 3) = &unk_1EF0A8810;
          *(_OWORD *)(v559 + 56) = 0u;
          *(_OWORD *)(v559 + 72) = 0u;
          *((_DWORD *)v559 + 8) = v560;
          *((void *)v559 + 5) = v558;
          v559[48] = 0;
          *(void *)&long long v870 = v559 + 24;
          *((void *)&v870 + 1) = v559;
          v868[1] = 0;
          v868[0] = 0;
          __p[23] = 5;
          strcpy(__p, "b_key");
          (*((void (**)(std::string *, void **, unsigned char *, uint64_t, uint64_t, void, __n128, __n128))__str[0]->__r_.__value_.__l.__data_
           + 21))(__str[0], v868, __p, v558, 4 * v560, 0, v805, v806);
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
          v561 = (std::__shared_weak_count *)v868[1];
          if (v868[1] && !atomic_fetch_add((atomic_ullong *volatile)v868[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v561->__on_zero_shared)(v561);
            std::__shared_weak_count::__release_weak(v561);
          }
          uint64_t v562 = v1037;
          v563 = (char *)operator new(0x58uLL);
          *((void *)v563 + 1) = 0;
          *((void *)v563 + 2) = 0;
          *(void *)v563 = &unk_1EF0ABDE0;
          uint64_t v564 = (int)v973;
          *((void *)v563 + 3) = &unk_1EF0A8810;
          *(_OWORD *)(v563 + 56) = 0u;
          *(_OWORD *)(v563 + 72) = 0u;
          *((_DWORD *)v563 + 8) = v564;
          *((void *)v563 + 5) = v562;
          v563[48] = 0;
          v868[0] = v563 + 24;
          v868[1] = v563;
          v992 = 0;
          v991 = 0;
          __p[23] = 7;
          strcpy(__p, "b_value");
          (*((void (**)(std::string *, char **, unsigned char *, uint64_t, uint64_t, void, __n128, __n128))__str[0]->__r_.__value_.__l.__data_
           + 21))(__str[0], &v991, __p, v562, 4 * v564, 0, v805, v806);
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
          v565 = v992;
          if (v992 && !atomic_fetch_add(&v992->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v565->__on_zero_shared)(v565);
            std::__shared_weak_count::__release_weak(v565);
          }
          v566 = (std::__shared_weak_count *)v868[1];
          if (v868[1] && !atomic_fetch_add((atomic_ullong *volatile)v868[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v566->__on_zero_shared)(v566);
            std::__shared_weak_count::__release_weak(v566);
          }
          v567 = (std::__shared_weak_count *)*((void *)&v870 + 1);
          if (*((void *)&v870 + 1)
            && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v870 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v567->__on_zero_shared)(v567);
            std::__shared_weak_count::__release_weak(v567);
          }
          v568 = (std::__shared_weak_count *)v873;
          if (v873 && !atomic_fetch_add((atomic_ullong *volatile)v873 + 1, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v568->__on_zero_shared)(v568);
            std::__shared_weak_count::__release_weak(v568);
          }
          v569 = (std::__shared_weak_count *)*((void *)&v902 + 1);
          if (*((void *)&v902 + 1)
            && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v902 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v569->__on_zero_shared)(v569);
            std::__shared_weak_count::__release_weak(v569);
          }
          v570 = (std::__shared_weak_count *)*((void *)&__dst + 1);
          if (*((void *)&__dst + 1)
            && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&__dst + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v570->__on_zero_shared)(v570);
            std::__shared_weak_count::__release_weak(v570);
          }
          v571 = (std::__shared_weak_count *)*((void *)&v989 + 1);
          if (*((void *)&v989 + 1)
            && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v989 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v571->__on_zero_shared)(v571);
            std::__shared_weak_count::__release_weak(v571);
          }
LABEL_775:
          v578 = (std::__shared_weak_count *)__str[1];
          if (!__str[1]) {
            goto LABEL_1022;
          }
          goto LABEL_1020;
        case 21:
          long long v902 = xmmword_19E351E40;
          LODWORD(v903) = 1;
          memset(__p, 0, 24);
          memset(__str, 0, 24);
          uint64_t v43 = v31;
          if (v31 == v802) {
            goto LABEL_99;
          }
          break;
        case 22:
          *(void *)&__p[20] = 0xFFFFFFFFLL;
          *(_WORD *)&__p[32] = 1;
          *(_DWORD *)&__p[36] = 1;
          *(void *)__p = v1019;
          *(void *)&__p[8] = DWORD2(v1019);
          *(_DWORD *)&__p[28] = 0;
          *(_DWORD *)&__p[16] = HIDWORD(v1019);
          HIBYTE(__str[2]) = 7;
          strcpy((char *)__str, "reshape");
          uint64_t v837 = 0;
          v835 = 0;
          uint64_t v836 = 0;
          sub_19E28750C(&v835, (uint64_t)v801, v30, 0xAAAAAAAAAAAAAAABLL * ((v30 - (uint64_t)v801) >> 3));
          v832 = 0;
          v833 = 0;
          uint64_t v834 = 0;
          sub_19E28750C(&v832, v31, v802, 0xAAAAAAAAAAAAAAABLL * ((v802 - v31) >> 3));
          sub_19E286514(a1, (uint64_t *)&v835, (uint64_t *)&v832, &v989);
          size_t v87 = (void **)v832;
          if (v832)
          {
            int v88 = v833;
            size_t v89 = v832;
            if (v833 != v832)
            {
              do
              {
                if (*((char *)v88 - 1) < 0) {
                  operator delete(*(v88 - 3));
                }
                v88 -= 3;
              }
              while (v88 != v87);
              size_t v89 = v832;
            }
            v833 = v87;
            operator delete(v89);
          }
          uint64_t v579 = (uint64_t)v835;
          if (!v835) {
            goto LABEL_1016;
          }
          uint64_t v580 = v836;
          v538 = v835;
          if ((void *)v836 != v835)
          {
            do
            {
              if (*(char *)(v580 - 1) < 0) {
                operator delete(*(void **)(v580 - 24));
              }
              v580 -= 24;
            }
            while (v580 != v579);
            v538 = v835;
          }
          uint64_t v836 = v579;
          goto LABEL_1015;
        case 28:
          *(void *)&__p[8] = 1065353216;
          *(void *)&__p[16] = 897988541;
          *(_DWORD *)&__p[48] = 0;
          *(_DWORD *)&__p[44] = 0;
          *(void *)__p = 1;
          __p[24] = 1;
          HIBYTE(__str[2]) = 11;
          strcpy((char *)__str, "elementwise");
          uint64_t v956 = 0;
          v954 = 0;
          uint64_t v955 = 0;
          sub_19E28750C(&v954, (uint64_t)v801, v30, 0xAAAAAAAAAAAAAAABLL * ((v30 - (uint64_t)v801) >> 3));
          v952 = 0;
          v951 = 0;
          uint64_t v953 = 0;
          sub_19E28750C(&v951, v31, v802, 0xAAAAAAAAAAAAAAABLL * ((v802 - v31) >> 3));
          sub_19E284924(a1, (uint64_t *)&v954, (uint64_t *)&v951, (uint64_t *)&v989);
          unint64_t v90 = (void **)v951;
          if (v951)
          {
            v91 = v952;
            v92 = v951;
            if (v952 != v951)
            {
              do
              {
                if (*((char *)v91 - 1) < 0) {
                  operator delete(*(v91 - 3));
                }
                v91 -= 3;
              }
              while (v91 != v90);
              v92 = v951;
            }
            v952 = v90;
            operator delete(v92);
          }
          uint64_t v581 = (uint64_t)v954;
          if (!v954) {
            goto LABEL_1016;
          }
          uint64_t v582 = v955;
          v538 = v954;
          if ((void *)v955 != v954)
          {
            do
            {
              if (*(char *)(v582 - 1) < 0) {
                operator delete(*(void **)(v582 - 24));
              }
              v582 -= 24;
            }
            while (v582 != v581);
            v538 = v954;
          }
          uint64_t v955 = v581;
          goto LABEL_1015;
        default:
          goto LABEL_1022;
      }
      do
      {
LABEL_59:
        if (*(char *)(v43 + 23) < 0)
        {
          sub_19E13C2D0(&v989, *(void **)v43, *(void *)(v43 + 8));
        }
        else
        {
          long long v44 = *(_OWORD *)v43;
          v990 = *(std::string **)(v43 + 16);
          long long v989 = v44;
        }
        int v45 = SHIBYTE(v990);
        if (SHIBYTE(v990) >= 0) {
          size_t v46 = HIBYTE(v990);
        }
        else {
          size_t v46 = *((void *)&v989 + 1);
        }
        unint64_t v47 = v46 + 22;
        if (v46 + 22 > 0x7FFFFFFFFFFFFFF7) {
          sub_19E13C370();
        }
        if (v47 >= 0x17)
        {
          uint64_t v49 = (v47 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v47 | 7) != 0x17) {
            uint64_t v49 = v47 | 7;
          }
          uint64_t v50 = v49 + 1;
          size_t v48 = (long long *)operator new(v49 + 1);
          unint64_t v988 = v50 | 0x8000000000000000;
          *(void *)&long long __dst = v48;
          *((void *)&__dst + 1) = v46 + 22;
        }
        else
        {
          unint64_t v988 = 0;
          long long __dst = 0uLL;
          size_t v48 = &__dst;
          HIBYTE(v988) = v46 + 22;
          if (!v46) {
            goto LABEL_76;
          }
        }
        if (v45 >= 0) {
          int v51 = &v989;
        }
        else {
          int v51 = (long long *)v989;
        }
        memmove(v48, v51, v46);
LABEL_76:
        strcpy((char *)v48 + v46, "_after_input_transpose");
        BOOL v52 = *(_OWORD **)&__p[8];
        if (*(void *)&__p[8] >= *(void *)&__p[16])
        {
          *(void *)&__p[8] = sub_19E15A950((void **)__p, (uint64_t)&__dst);
          if (SHIBYTE(v988) < 0) {
            operator delete((void *)__dst);
          }
        }
        else
        {
          long long v53 = __dst;
          *(void *)(*(void *)&__p[8] + 16) = v988;
          *BOOL v52 = v53;
          *(void *)&__p[8] = (char *)v52 + 24;
        }
        int v54 = SHIBYTE(v990);
        if (SHIBYTE(v990) >= 0) {
          size_t v55 = HIBYTE(v990);
        }
        else {
          size_t v55 = *((void *)&v989 + 1);
        }
        size_t v56 = v55 + 23;
        if (v55 + 23 > 0x7FFFFFFFFFFFFFF7) {
          sub_19E13C370();
        }
        if (v55 >= 0xFFFFFFFFFFFFFFE9)
        {
          unint64_t v988 = 0;
          long long __dst = 0uLL;
          int v57 = &__dst;
          HIBYTE(v988) = v55 + 23;
LABEL_89:
          if (v54 >= 0) {
            unint64_t v60 = &v989;
          }
          else {
            unint64_t v60 = (long long *)v989;
          }
          memmove(v57, v60, v55);
          goto LABEL_93;
        }
        uint64_t v58 = (v56 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v56 | 7) != 0x17) {
          uint64_t v58 = v56 | 7;
        }
        uint64_t v59 = v58 + 1;
        int v57 = (long long *)operator new(v58 + 1);
        unint64_t v988 = v59 | 0x8000000000000000;
        *(void *)&long long __dst = v57;
        *((void *)&__dst + 1) = v55 + 23;
        if (v55) {
          goto LABEL_89;
        }
LABEL_93:
        strcpy((char *)v57 + v55, "_after_output_transpose");
        size_t v61 = __str[1];
        if (__str[1] >= __str[2])
        {
          __str[1] = (std::string *)sub_19E15A950((void **)__str, (uint64_t)&__dst);
          if (SHIBYTE(v988) < 0)
          {
            operator delete((void *)__dst);
            if ((SHIBYTE(v990) & 0x80000000) == 0)
            {
LABEL_58:
              v43 += 24;
              if (v43 == v802) {
                break;
              }
              goto LABEL_59;
            }
          }
          else if ((SHIBYTE(v990) & 0x80000000) == 0)
          {
            goto LABEL_58;
          }
        }
        else
        {
          long long v62 = __dst;
          __str[1]->__r_.__value_.__r.__words[2] = v988;
          *(_OWORD *)&v61->__r_.__value_.__l.__data_ = v62;
          __str[1] = v61 + 1;
          if ((SHIBYTE(v990) & 0x80000000) == 0) {
            goto LABEL_58;
          }
        }
        operator delete((void *)v989);
        v43 += 24;
      }
      while (v43 != v802);
LABEL_99:
      HIBYTE(v990) = 9;
      strcpy((char *)&v989, "transpose");
      int v63 = SHIBYTE(v1039);
      if (v1039 >= 0) {
        size_t v64 = HIBYTE(v1039);
      }
      else {
        size_t v64 = *((void *)&v1038 + 1);
      }
      unint64_t v65 = v64 + 8;
      if (v64 + 8 > 0x7FFFFFFFFFFFFFF7) {
        sub_19E13C370();
      }
      if (v65 >= 0x17)
      {
        uint64_t v529 = (v65 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v65 | 7) != 0x17) {
          uint64_t v529 = v65 | 7;
        }
        uint64_t v530 = v529 + 1;
        v66 = (long long *)operator new(v529 + 1);
        unint64_t v988 = v530 | 0x8000000000000000;
        *(void *)&long long __dst = v66;
        *((void *)&__dst + 1) = v64 + 8;
      }
      else
      {
        unint64_t v988 = 0;
        long long __dst = 0uLL;
        v66 = &__dst;
        HIBYTE(v988) = v64 + 8;
        if (!v64) {
          goto LABEL_672;
        }
      }
      if (v63 >= 0) {
        v531 = &v1038;
      }
      else {
        v531 = (long long *)v1038;
      }
      memmove(v66, v531, v64);
LABEL_672:
      strcpy((char *)v66 + v64, "_input_t");
      v985 = 0;
      v984 = 0;
      uint64_t v986 = 0;
      sub_19E28750C(&v984, (uint64_t)v801, v811, 0xAAAAAAAAAAAAAAABLL * ((v811 - (uint64_t)v801) >> 3));
      v982 = 0;
      v981 = 0;
      uint64_t v983 = 0;
      sub_19E28750C(&v981, *(uint64_t *)__p, *(uint64_t *)&__p[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&__p[8] - *(void *)__p) >> 3));
      sub_19E284154(a1, (uint64_t *)&v984, (uint64_t *)&v981, v868);
      v532 = (void **)v981;
      if (v981)
      {
        v533 = v982;
        v534 = v981;
        if (v982 != v981)
        {
          do
          {
            if (*((char *)v533 - 1) < 0) {
              operator delete(*(v533 - 3));
            }
            v533 -= 3;
          }
          while (v533 != v532);
          v534 = v981;
        }
        v982 = v532;
        operator delete(v534);
      }
      v583 = (void **)v984;
      if (v984)
      {
        v584 = v985;
        v585 = v984;
        if (v985 != v984)
        {
          do
          {
            if (*((char *)v584 - 1) < 0) {
              operator delete(*(v584 - 3));
            }
            v584 -= 3;
          }
          while (v584 != v583);
          v585 = v984;
        }
        v985 = v583;
        operator delete(v585);
      }
      if (SHIBYTE(v988) < 0)
      {
        operator delete((void *)__dst);
        if (SHIBYTE(v990) < 0) {
          goto LABEL_898;
        }
      }
      else
      {
        if ((SHIBYTE(v990) & 0x80000000) == 0) {
          goto LABEL_809;
        }
LABEL_898:
        operator delete((void *)v989);
      }
LABEL_809:
      LODWORD(v874) = 0;
      LODWORD(v872) = 1;
      HIDWORD(v872) = v1027;
      HIDWORD(v873) = v1023 == 0;
      LODWORD(v873) = v1023 != 0;
      HIBYTE(v990) = 15;
      strcpy((char *)&v989, "instancenorm_1d");
      v979 = 0;
      v978 = 0;
      uint64_t v980 = 0;
      sub_19E28750C(&v978, *(uint64_t *)__p, *(uint64_t *)&__p[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&__p[8] - *(void *)__p) >> 3));
      v976 = 0;
      v975 = 0;
      uint64_t v977 = 0;
      sub_19E28750C(&v975, (uint64_t)__str[0], (uint64_t)__str[1], 0xAAAAAAAAAAAAAAABLL * (((char *)__str[1] - (char *)__str[0]) >> 3));
      sub_19E28453C(a1, (uint64_t *)&v978, (uint64_t *)&v975, &v991);
      v586 = (void **)v975;
      if (v975)
      {
        v587 = v976;
        v588 = v975;
        if (v976 != v975)
        {
          do
          {
            if (*((char *)v587 - 1) < 0) {
              operator delete(*(v587 - 3));
            }
            v587 -= 3;
          }
          while (v587 != v586);
          v588 = v975;
        }
        v976 = v586;
        operator delete(v588);
      }
      v589 = (void **)v978;
      if (v978)
      {
        v590 = v979;
        v591 = v978;
        if (v979 != v978)
        {
          do
          {
            if (*((char *)v590 - 1) < 0) {
              operator delete(*(v590 - 3));
            }
            v590 -= 3;
          }
          while (v590 != v589);
          v591 = v978;
        }
        v979 = v589;
        operator delete(v591);
      }
      if (SHIBYTE(v990) < 0) {
        operator delete((void *)v989);
      }
      uint64_t v592 = v1031;
      v593 = (char *)operator new(0x58uLL);
      *((void *)v593 + 1) = 0;
      *((void *)v593 + 2) = 0;
      *(void *)v593 = &unk_1EF0ABDE0;
      int v594 = v1011;
      *((void *)v593 + 3) = &unk_1EF0A8810;
      *(_OWORD *)(v593 + 56) = 0u;
      *(_OWORD *)(v593 + 72) = 0u;
      *((_DWORD *)v593 + 8) = v594;
      *((void *)v593 + 5) = v592;
      v593[48] = 0;
      v973 = v593 + 24;
      v974 = (std::__shared_weak_count *)v593;
      v595 = v1035;
      v596 = (char *)operator new(0x58uLL);
      *((void *)v596 + 1) = 0;
      *((void *)v596 + 2) = 0;
      *(void *)v596 = &unk_1EF0ABDE0;
      *((void *)v596 + 3) = &unk_1EF0A8810;
      *(_OWORD *)(v596 + 56) = 0u;
      *(_OWORD *)(v596 + 72) = 0u;
      *((_DWORD *)v596 + 8) = v594;
      *((void *)v596 + 5) = v595;
      v596[48] = 0;
      v971 = v596 + 24;
      v972 = (std::__shared_weak_count *)v596;
      long long __dst = 0uLL;
      HIBYTE(v990) = 6;
      strcpy((char *)&v989, "wGamma");
      (*(void (**)(char *, long long *, long long *, uint64_t, uint64_t, void, __n128, __n128))(*(void *)v991 + 168))(v991, &__dst, &v989, v592, 4 * v594, 0, v805, v806);
      uint64_t v31 = v827;
      if (SHIBYTE(v990) < 0) {
        operator delete((void *)v989);
      }
      v597 = (std::__shared_weak_count *)*((void *)&__dst + 1);
      if (*((void *)&__dst + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&__dst + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v597->__on_zero_shared)(v597);
        std::__shared_weak_count::__release_weak(v597);
      }
      long long __dst = 0uLL;
      HIBYTE(v990) = 5;
      strcpy((char *)&v989, "wBeta");
      (*(void (**)(char *, long long *, long long *, void, uint64_t, void))(*(void *)v991 + 168))(v991, &__dst, &v989, *((void *)v971 + 2), 4 * *((int *)v971 + 2), 0);
      if (SHIBYTE(v990) < 0) {
        operator delete((void *)v989);
      }
      v598 = (std::__shared_weak_count *)*((void *)&__dst + 1);
      if (*((void *)&__dst + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&__dst + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v598->__on_zero_shared)(v598);
        std::__shared_weak_count::__release_weak(v598);
      }
      long long v870 = xmmword_19E351E40;
      LODWORD(v871) = 1;
      HIBYTE(v990) = 9;
      strcpy((char *)&v989, "transpose");
      int v599 = SHIBYTE(v1039);
      if (v1039 >= 0) {
        size_t v600 = HIBYTE(v1039);
      }
      else {
        size_t v600 = *((void *)&v1038 + 1);
      }
      unint64_t v601 = v600 + 9;
      if (v600 + 9 > 0x7FFFFFFFFFFFFFF7) {
        sub_19E13C370();
      }
      if (v601 >= 0x17)
      {
        uint64_t v603 = (v601 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v601 | 7) != 0x17) {
          uint64_t v603 = v601 | 7;
        }
        uint64_t v604 = v603 + 1;
        v602 = (long long *)operator new(v603 + 1);
        unint64_t v988 = v604 | 0x8000000000000000;
        *(void *)&long long __dst = v602;
        *((void *)&__dst + 1) = v600 + 9;
      }
      else
      {
        unint64_t v988 = 0;
        long long __dst = 0uLL;
        v602 = &__dst;
        HIBYTE(v988) = v600 + 9;
        if (!v600) {
          goto LABEL_851;
        }
      }
      if (v599 >= 0) {
        v605 = &v1038;
      }
      else {
        v605 = (long long *)v1038;
      }
      memmove(v602, v605, v600);
LABEL_851:
      uint64_t v30 = v811;
      strcpy((char *)v602 + v600, "_output_t");
      v967 = 0;
      v966 = 0;
      uint64_t v968 = 0;
      sub_19E28750C(&v966, (uint64_t)__str[0], (uint64_t)__str[1], 0xAAAAAAAAAAAAAAABLL * (((char *)__str[1] - (char *)__str[0]) >> 3));
      v964 = 0;
      v963 = 0;
      uint64_t v965 = 0;
      sub_19E28750C(&v963, v827, v802, 0xAAAAAAAAAAAAAAABLL * ((v802 - v827) >> 3));
      sub_19E284154(a1, (uint64_t *)&v966, (uint64_t *)&v963, &v969);
      v606 = (void **)v963;
      if (v963)
      {
        v607 = v964;
        v608 = v963;
        if (v964 != v963)
        {
          do
          {
            if (*((char *)v607 - 1) < 0) {
              operator delete(*(v607 - 3));
            }
            v607 -= 3;
          }
          while (v607 != v606);
          v608 = v963;
        }
        v964 = v606;
        operator delete(v608);
      }
      v609 = (void **)v966;
      if (v966)
      {
        v610 = v967;
        v611 = v966;
        if (v967 != v966)
        {
          do
          {
            if (*((char *)v610 - 1) < 0) {
              operator delete(*(v610 - 3));
            }
            v610 -= 3;
          }
          while (v610 != v609);
          v611 = v966;
        }
        v967 = v609;
        operator delete(v611);
      }
      if (SHIBYTE(v988) < 0)
      {
        operator delete((void *)__dst);
        if (SHIBYTE(v990) < 0) {
          goto LABEL_900;
        }
LABEL_869:
        v612 = v970;
        if (v970)
        {
LABEL_901:
          if (!atomic_fetch_add(&v612->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v612->__on_zero_shared)(v612);
            std::__shared_weak_count::__release_weak(v612);
          }
        }
      }
      else
      {
        if ((SHIBYTE(v990) & 0x80000000) == 0) {
          goto LABEL_869;
        }
LABEL_900:
        operator delete((void *)v989);
        v612 = v970;
        if (v970) {
          goto LABEL_901;
        }
      }
      v633 = v972;
      if (v972 && !atomic_fetch_add(&v972->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v633->__on_zero_shared)(v633);
        std::__shared_weak_count::__release_weak(v633);
      }
      v634 = v974;
      if (v974 && !atomic_fetch_add(&v974->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v634->__on_zero_shared)(v634);
        std::__shared_weak_count::__release_weak(v634);
      }
      v635 = v992;
      if (v992 && !atomic_fetch_add(&v992->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v635->__on_zero_shared)(v635);
        std::__shared_weak_count::__release_weak(v635);
      }
      v636 = (std::__shared_weak_count *)v868[1];
      if (v868[1] && !atomic_fetch_add((atomic_ullong *volatile)v868[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v636->__on_zero_shared)(v636);
        std::__shared_weak_count::__release_weak(v636);
      }
      v637 = __str[0];
      if (__str[0])
      {
        v638 = __str[1];
        v639 = __str[0];
        if (__str[1] != __str[0])
        {
          do
          {
            if (SHIBYTE(v638[-1].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v638[-1].__r_.__value_.__l.__data_);
            }
            --v638;
          }
          while (v638 != v637);
          v639 = __str[0];
        }
        __str[1] = v637;
        operator delete(v639);
      }
      uint64_t v640 = *(void *)__p;
      if (*(void *)__p)
      {
        uint64_t v641 = *(void *)&__p[8];
        v642 = *(void **)__p;
        if (*(void *)&__p[8] != *(void *)__p)
        {
          do
          {
            if (*(char *)(v641 - 1) < 0) {
              operator delete(*(void **)(v641 - 24));
            }
            v641 -= 24;
          }
          while (v641 != v640);
          v642 = *(void **)__p;
        }
        *(void *)&__p[8] = v640;
        operator delete(v642);
      }
LABEL_1022:
      if (v31)
      {
        for (uint64_t i = v802; i != v31; i -= 24)
        {
          if (*(char *)(i - 1) < 0) {
            operator delete(*(void **)(i - 24));
          }
        }
        operator delete((void *)v31);
      }
      v4 = v796;
      if (!v801)
      {
        v684 = (void **)v999;
        if (v999) {
          goto LABEL_1031;
        }
LABEL_1042:
        v686 = (void **)v1001;
        if (v1001) {
          goto LABEL_1045;
        }
LABEL_19:
        if ((SHIBYTE(v1039) & 0x80000000) == 0) {
          goto LABEL_20;
        }
LABEL_1052:
        operator delete((void *)v1038);
        unint64_t v11 = v799 + 24;
        if (v799 + 24 == v797) {
          goto LABEL_1281;
        }
        continue;
      }
      break;
    }
    while ((void *)v30 != v801)
    {
      if (*(char *)(v30 - 1) < 0) {
        operator delete(*(void **)(v30 - 24));
      }
      v30 -= 24;
    }
    operator delete(v801);
    v684 = (void **)v999;
    if (!v999) {
      goto LABEL_1042;
    }
LABEL_1031:
    v685 = v1000;
    if (v1000 == v684)
    {
      v1000 = v684;
      operator delete(v684);
      v686 = (void **)v1001;
      if (!v1001) {
        goto LABEL_19;
      }
    }
    else
    {
      do
      {
        if (*((char *)v685 - 9) < 0) {
          operator delete(*(v685 - 4));
        }
        v685 -= 4;
      }
      while (v685 != v684);
      v1000 = v684;
      operator delete(v999);
      v686 = (void **)v1001;
      if (!v1001) {
        goto LABEL_19;
      }
    }
LABEL_1045:
    v687 = v1002;
    if (v1002 == v686)
    {
      v1002 = v686;
      operator delete(v686);
      if (SHIBYTE(v1039) < 0) {
        goto LABEL_1052;
      }
    }
    else
    {
      do
      {
        if (*((char *)v687 - 9) < 0) {
          operator delete(*(v687 - 4));
        }
        v687 -= 4;
      }
      while (v687 != v686);
      v1002 = v686;
      operator delete(v1001);
      if (SHIBYTE(v1039) < 0) {
        goto LABEL_1052;
      }
    }
LABEL_20:
    unint64_t v11 = v799 + 24;
    if (v799 + 24 != v797) {
      continue;
    }
    break;
  }
LABEL_1281:
  Espresso::sequential_builder::build_from_shapes();
  BYTE7(v1004) = 12;
  strcpy((char *)&v1003, "fast_reshape");
  __str[0] = (std::string *)&v1003;
  v776 = sub_19E289ED4((uint64_t **)(*(void *)__p + 472), (const void **)&v1003, (uint64_t)&unk_19E351150, (_OWORD **)__str);
  MEMORY[0x19F3BB880](v776 + 7, "1");
  if (SBYTE7(v1004) < 0) {
    operator delete((void *)v1003);
  }
  uint64_t v830 = *(void *)__p;
  v831 = *(std::__shared_weak_count **)&__p[8];
  if (*(void *)&__p[8]) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&__p[8] + 8), 1uLL, memory_order_relaxed);
  }
  size_t v777 = strlen(a3);
  if (v777 > 0x7FFFFFFFFFFFFFF7) {
    sub_19E13C370();
  }
  v778 = (void *)v777;
  if (v777 >= 0x17)
  {
    uint64_t v780 = (v777 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v777 | 7) != 0x17) {
      uint64_t v780 = v777 | 7;
    }
    uint64_t v781 = v780 + 1;
    v779 = operator new(v780 + 1);
    v828[1] = v778;
    unint64_t v829 = v781 | 0x8000000000000000;
    v828[0] = v779;
    goto LABEL_1292;
  }
  HIBYTE(v829) = v777;
  v779 = v828;
  if (v777) {
LABEL_1292:
  }
    memcpy(v779, a3, (size_t)v778);
  *((unsigned char *)v778 + (void)v779) = 0;
  Espresso::dump_network_binserializer();
  if (SHIBYTE(v829) < 0)
  {
    operator delete(v828[0]);
    v782 = v831;
    if (v831) {
      goto LABEL_1297;
    }
  }
  else
  {
    v782 = v831;
    if (!v831) {
      goto LABEL_1299;
    }
LABEL_1297:
    if (!atomic_fetch_add(&v782->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v782->__on_zero_shared)(v782);
      std::__shared_weak_count::__release_weak(v782);
    }
  }
LABEL_1299:
  v783 = *(std::__shared_weak_count **)&__p[8];
  if (*(void *)&__p[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&__p[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v783->__on_zero_shared)(v783);
    std::__shared_weak_count::__release_weak(v783);
  }
  sub_19E15A064((uint64_t)&v1040, v1041[0]);
  sub_19E15A064((uint64_t)&v1042, v1043[0]);
  v784 = v1044;
  if (v1044)
  {
    v785 = v1045;
    v786 = v1044;
    if (v1045 != v1044)
    {
      v787 = v1045;
      do
      {
        v789 = (void *)*((void *)v787 - 3);
        v787 -= 24;
        v788 = v789;
        if (v789)
        {
          *((void *)v785 - 2) = v788;
          operator delete(v788);
        }
        v785 = v787;
      }
      while (v787 != v784);
      v786 = v1044;
    }
    v1045 = v784;
    operator delete(v786);
  }
  v790 = (void **)v1047;
  if (v1047)
  {
    v791 = (void **)v1048;
    v792 = v1047;
    if (v1048 != v1047)
    {
      do
      {
        if (*((char *)v791 - 1) < 0) {
          operator delete(*(v791 - 3));
        }
        v791 -= 3;
      }
      while (v791 != v790);
      v792 = v1047;
    }
    v1048 = (char *)v790;
    operator delete(v792);
  }
}

void sub_19E282C64()
{
}

void sub_19E283334()
{
}

void sub_19E28333C()
{
  if (SLOBYTE(STACK[0x407]) < 0) {
    operator delete((void *)STACK[0x3F0]);
  }
  JUMPOUT(0x19E28332CLL);
}

void sub_19E283374()
{
}

void sub_19E2833E8()
{
  if (SLOBYTE(STACK[0x407]) < 0) {
    operator delete((void *)STACK[0x3F0]);
  }
  JUMPOUT(0x19E28380CLL);
}

void sub_19E2833F8()
{
  if (SLOBYTE(STACK[0x407]) < 0) {
    operator delete((void *)STACK[0x3F0]);
  }
  JUMPOUT(0x19E28380CLL);
}

void sub_19E283418()
{
  if (SLOBYTE(STACK[0x407]) < 0) {
    operator delete((void *)STACK[0x3F0]);
  }
  JUMPOUT(0x19E28380CLL);
}

void sub_19E283438()
{
  if (SLOBYTE(STACK[0x407]) < 0) {
    operator delete((void *)STACK[0x3F0]);
  }
  JUMPOUT(0x19E28380CLL);
}

void sub_19E283450()
{
  if (SLOBYTE(STACK[0x407]) < 0) {
    operator delete((void *)STACK[0x3F0]);
  }
  JUMPOUT(0x19E28380CLL);
}

void sub_19E283460()
{
}

void sub_19E28346C()
{
}

void sub_19E283480(void *a1, int a2)
{
  if (SLOBYTE(STACK[0x837]) < 0) {
    operator delete((void *)STACK[0x820]);
  }
  sub_19E24AF60((uint64_t)&STACK[0x580]);
  if (a2 == 1)
  {
    __cxa_get_exception_ptr(a1);
    STACK[0x820] = MEMORY[0x1E4FBA510] + 16;
    __cxa_begin_catch(a1);
    exception = __cxa_allocate_exception(8uLL);
    void *exception = MEMORY[0x1E4FBA510] + 16;
    __cxa_throw(exception, MEMORY[0x1E4FBA368], MEMORY[0x1E4FBA2C8]);
  }
  JUMPOUT(0x19E283C10);
}

void sub_19E28351C()
{
}

void sub_19E283534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void **a41,void **a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void **a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void **a61)
{
  int v63 = (void *)STACK[0x3F0];
  if (STACK[0x3F0])
  {
    STACK[0x3F8] = (unint64_t)v63;
    operator delete(v63);
  }
  sub_19E24AF60((uint64_t)&STACK[0x790]);
  if (a61)
  {
    while (a42 != a61)
    {
      if (*((char *)a42 - 1) < 0) {
        operator delete(*(a42 - 3));
      }
      a42 -= 3;
    }
    operator delete(a61);
  }
  if (a41)
  {
    while (a56 != a41)
    {
      if (*((char *)a56 - 1) < 0) {
        operator delete(*(a56 - 3));
      }
      a56 -= 3;
    }
    operator delete(a41);
  }
  unint64_t v66 = STACK[0x7F0];
  if (STACK[0x7F0])
  {
    unint64_t v67 = STACK[0x7F8];
    size_t v68 = (void *)STACK[0x7F0];
    if (STACK[0x7F8] != v66)
    {
      do
      {
        if (*(char *)(v67 - 9) < 0) {
          operator delete(*(void **)(v67 - 32));
        }
        v67 -= 32;
      }
      while (v67 != v66);
      size_t v68 = (void *)STACK[0x7F0];
    }
    STACK[0x7F8] = v66;
    operator delete(v68);
  }
  unint64_t v69 = STACK[0x808];
  if (STACK[0x808])
  {
    unint64_t v70 = STACK[0x810];
    uint64_t v71 = (void *)STACK[0x808];
    if (STACK[0x810] != v69)
    {
      do
      {
        if (*(char *)(v70 - 9) < 0) {
          operator delete(*(void **)(v70 - 32));
        }
        v70 -= 32;
      }
      while (v70 != v69);
      uint64_t v71 = (void *)STACK[0x808];
    }
    STACK[0x810] = v69;
    operator delete(v71);
  }
  if (SLOBYTE(STACK[0xAF7]) < 0) {
    operator delete((void *)STACK[0xAE0]);
  }
  sub_19E15A064(v61 - 256, *(char **)(v61 - 248));
  sub_19E15A064(v61 - 232, *(char **)(v61 - 224));
  sub_19E287648(a37, *(char **)(a37 + 8));
  uint64_t v72 = *(void *)(v61 - 208);
  if (v72)
  {
    uint64_t v74 = *(void *)(v61 - 200);
    uint64_t v75 = *(void **)(v61 - 208);
    if (v74 != v72)
    {
      uint64_t v76 = *(void *)(v61 - 200);
      do
      {
        long long v78 = *(void **)(v76 - 24);
        v76 -= 24;
        int v77 = v78;
        if (v78)
        {
          *(void *)(v74 - 16) = v77;
          operator delete(v77);
        }
        uint64_t v74 = v76;
      }
      while (v76 != v72);
      uint64_t v75 = *(void **)(v61 - 208);
    }
    *(void *)(v61 - 200) = v72;
    operator delete(v75);
    v73 = *(void ***)(v61 - 184);
    if (!v73) {
LABEL_37:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    v73 = *(void ***)(v61 - 184);
    if (!v73) {
      goto LABEL_37;
    }
  }
  int v79 = *(void ***)(v61 - 176);
  int v80 = v73;
  if (v79 != v73)
  {
    do
    {
      if (*((char *)v79 - 1) < 0) {
        operator delete(*(v79 - 3));
      }
      v79 -= 3;
    }
    while (v79 != v73);
    int v80 = *(void ***)(v61 - 184);
  }
  *(void *)(v61 - 176) = v73;
  operator delete(v80);
  _Unwind_Resume(a1);
}

void sub_19E283554(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34)
{
  if (SLOBYTE(STACK[0x407]) < 0) {
    operator delete((void *)STACK[0x3F0]);
  }
  operator delete(a34);
  JUMPOUT(0x19E283B0CLL);
}

void sub_19E2835D0()
{
  if (SLOBYTE(STACK[0x407]) < 0) {
    JUMPOUT(0x19E2835DCLL);
  }
  JUMPOUT(0x19E283B0CLL);
}

void sub_19E2835EC()
{
}

void sub_19E283604(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34)
{
  int32x4_t v36 = *(void **)v34;
  if (*(void *)v34)
  {
    *(void *)(v34 + 8) = v36;
    operator delete(v36);
  }
  *(void *)(v35 - 200) = v34;
  size_t v37 = (void *)STACK[0x790];
  if (STACK[0x790])
  {
    STACK[0x798] = (unint64_t)v37;
    operator delete(v37);
    int v38 = (void *)STACK[0x3F0];
    if (!STACK[0x3F0])
    {
LABEL_5:
      long long v39 = (std::__shared_weak_count *)a32;
      if (!a32) {
        goto LABEL_11;
      }
LABEL_9:
      if (!atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
LABEL_11:
      operator delete(a34);
      JUMPOUT(0x19E283B0CLL);
    }
  }
  else
  {
    int v38 = (void *)STACK[0x3F0];
    if (!STACK[0x3F0]) {
      goto LABEL_5;
    }
  }
  STACK[0x3F8] = (unint64_t)v38;
  operator delete(v38);
  long long v39 = (std::__shared_weak_count *)a32;
  if (!a32) {
    goto LABEL_11;
  }
  goto LABEL_9;
}

void sub_19E28362C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34)
{
  int32x4_t v36 = *(void **)v34;
  if (*(void *)v34)
  {
    *(void *)(v34 + 8) = v36;
    operator delete(v36);
  }
  *(void *)(v35 - 200) = v34;
  size_t v37 = (void *)STACK[0x3F0];
  if (STACK[0x3F0])
  {
    STACK[0x3F8] = (unint64_t)v37;
    operator delete(v37);
  }
  if (!a32)
  {
    operator delete(a34);
    JUMPOUT(0x19E283B0CLL);
  }
  JUMPOUT(0x19E283AC4);
}

void sub_19E28364C()
{
}

void sub_19E283654()
{
}

void sub_19E283660()
{
  if (SLOBYTE(STACK[0x597]) < 0) {
    JUMPOUT(0x19E283B6CLL);
  }
  JUMPOUT(0x19E283B70);
}

void sub_19E283680()
{
  if (SLOBYTE(STACK[0x78F]) < 0) {
    operator delete((void *)STACK[0x778]);
  }
  JUMPOUT(0x19E2837ECLL);
}

void sub_19E28369C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34)
{
  int32x4_t v36 = *(void **)v34;
  if (*(void *)v34)
  {
    *(void *)(v34 + 8) = v36;
    operator delete(v36);
  }
  *(void *)(v35 - 200) = v34;
  sub_19E24AF60((uint64_t)&STACK[0x7B0]);
  size_t v37 = (void *)STACK[0x320];
  if (STACK[0x320])
  {
    STACK[0x328] = (unint64_t)v37;
    operator delete(v37);
    int v38 = (void *)STACK[0x338];
    if (!STACK[0x338])
    {
LABEL_5:
      long long v39 = (void *)STACK[0x450];
      if (!STACK[0x450])
      {
LABEL_10:
        unint64_t v40 = STACK[0x778];
        if (STACK[0x778])
        {
          unint64_t v43 = STACK[0x780];
          long long v44 = (void *)STACK[0x778];
          if (STACK[0x780] != v40)
          {
            unint64_t v45 = STACK[0x780];
            do
            {
              unint64_t v47 = *(void **)(v45 - 24);
              v45 -= 24;
              size_t v46 = v47;
              if (v47)
              {
                *(void *)(v43 - 16) = v46;
                operator delete(v46);
              }
              unint64_t v43 = v45;
            }
            while (v45 != v40);
            long long v44 = (void *)STACK[0x778];
          }
          STACK[0x780] = v40;
          operator delete(v44);
          unint64_t v41 = STACK[0x790];
          if (!STACK[0x790])
          {
LABEL_12:
            unint64_t v42 = STACK[0x3F0];
            if (!STACK[0x3F0]) {
              goto LABEL_35;
            }
            goto LABEL_28;
          }
        }
        else
        {
          unint64_t v41 = STACK[0x790];
          if (!STACK[0x790]) {
            goto LABEL_12;
          }
        }
        unint64_t v48 = STACK[0x798];
        uint64_t v49 = (void *)v41;
        if (STACK[0x798] != v41)
        {
          unint64_t v50 = STACK[0x798];
          do
          {
            BOOL v52 = *(void **)(v50 - 24);
            v50 -= 24;
            int v51 = v52;
            if (v52)
            {
              *(void *)(v48 - 16) = v51;
              operator delete(v51);
            }
            unint64_t v48 = v50;
          }
          while (v50 != v41);
          uint64_t v49 = (void *)STACK[0x790];
        }
        STACK[0x798] = v41;
        operator delete(v49);
        unint64_t v42 = STACK[0x3F0];
        if (!STACK[0x3F0])
        {
LABEL_35:
          if (!a32)
          {
            operator delete(a34);
            JUMPOUT(0x19E283B0CLL);
          }
          JUMPOUT(0x19E283AC4);
        }
LABEL_28:
        unint64_t v53 = STACK[0x3F8];
        int v54 = (void *)v42;
        if (STACK[0x3F8] != v42)
        {
          unint64_t v55 = STACK[0x3F8];
          do
          {
            int v57 = *(void **)(v55 - 24);
            v55 -= 24;
            size_t v56 = v57;
            if (v57)
            {
              *(void *)(v53 - 16) = v56;
              operator delete(v56);
            }
            unint64_t v53 = v55;
          }
          while (v55 != v42);
          int v54 = (void *)STACK[0x3F0];
        }
        STACK[0x3F8] = v42;
        operator delete(v54);
        goto LABEL_35;
      }
LABEL_9:
      STACK[0x458] = (unint64_t)v39;
      operator delete(v39);
      goto LABEL_10;
    }
  }
  else
  {
    int v38 = (void *)STACK[0x338];
    if (!STACK[0x338]) {
      goto LABEL_5;
    }
  }
  STACK[0x340] = (unint64_t)v38;
  operator delete(v38);
  long long v39 = (void *)STACK[0x450];
  if (!STACK[0x450]) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void sub_19E283714()
{
}

void sub_19E283748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void **a41,void **a42)
{
  if (v43)
  {
    while (a42 != v43)
    {
      if (*((char *)a42 - 1) < 0) {
        operator delete(*(a42 - 3));
      }
      a42 -= 3;
    }
    operator delete(v43);
  }
  if (a41)
  {
    while (v42 != a41)
    {
      if (*((char *)v42 - 1) < 0) {
        operator delete(*(v42 - 3));
      }
      v42 -= 3;
    }
    operator delete(a41);
  }
  unint64_t v47 = STACK[0x7F0];
  if (STACK[0x7F0])
  {
    unint64_t v48 = STACK[0x7F8];
    uint64_t v49 = (void *)STACK[0x7F0];
    if (STACK[0x7F8] != v47)
    {
      do
      {
        if (*(char *)(v48 - 9) < 0) {
          operator delete(*(void **)(v48 - 32));
        }
        v48 -= 32;
      }
      while (v48 != v47);
      uint64_t v49 = (void *)STACK[0x7F0];
    }
    STACK[0x7F8] = v47;
    operator delete(v49);
  }
  unint64_t v50 = STACK[0x808];
  if (STACK[0x808])
  {
    unint64_t v51 = STACK[0x810];
    BOOL v52 = (void *)STACK[0x808];
    if (STACK[0x810] != v50)
    {
      do
      {
        if (*(char *)(v51 - 9) < 0) {
          operator delete(*(void **)(v51 - 32));
        }
        v51 -= 32;
      }
      while (v51 != v50);
      BOOL v52 = (void *)STACK[0x808];
    }
    STACK[0x810] = v50;
    operator delete(v52);
  }
  if (SLOBYTE(STACK[0xAF7]) < 0) {
    operator delete((void *)STACK[0xAE0]);
  }
  sub_19E15A064(v44 - 256, *(void *)(v44 - 248));
  sub_19E15A064(v44 - 232, *(void *)(v44 - 224));
  sub_19E287648(a37, *(void *)(a37 + 8));
  uint64_t v53 = *(void *)(v44 - 208);
  if (v53)
  {
    uint64_t v55 = *(void *)(v44 - 200);
    size_t v56 = *(void **)(v44 - 208);
    if (v55 != v53)
    {
      uint64_t v57 = *(void *)(v44 - 200);
      do
      {
        uint64_t v59 = *(void **)(v57 - 24);
        v57 -= 24;
        uint64_t v58 = v59;
        if (v59)
        {
          *(void *)(v55 - 16) = v58;
          operator delete(v58);
        }
        uint64_t v55 = v57;
      }
      while (v57 != v53);
      size_t v56 = *(void **)(v44 - 208);
    }
    *(void *)(v44 - 200) = v53;
    operator delete(v56);
    int v54 = *(void ***)(v44 - 184);
    if (!v54) {
LABEL_35:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    int v54 = *(void ***)(v44 - 184);
    if (!v54) {
      goto LABEL_35;
    }
  }
  unint64_t v60 = *(void ***)(v44 - 176);
  uint64_t v61 = v54;
  if (v60 != v54)
  {
    do
    {
      if (*((char *)v60 - 1) < 0) {
        operator delete(*(v60 - 3));
      }
      v60 -= 3;
    }
    while (v60 != v54);
    uint64_t v61 = *(void ***)(v44 - 184);
  }
  *(void *)(v44 - 176) = v54;
  operator delete(v61);
  _Unwind_Resume(a1);
}

void sub_19E283754()
{
}

void sub_19E28375C()
{
}

void sub_19E283764()
{
}

void sub_19E283770()
{
}

void sub_19E283778()
{
}

void sub_19E283780()
{
}

void sub_19E283788()
{
}

void sub_19E283794()
{
  if (SLOBYTE(STACK[0x31F]) < 0) {
    operator delete((void *)STACK[0x308]);
  }
  sub_19E24AF60((uint64_t)&STACK[0x6E8]);
  sub_19E24AF60((uint64_t)&STACK[0x6F8]);
  sub_19E24AF60((uint64_t)&STACK[0x708]);
  sub_19E24AF60((uint64_t)&STACK[0x7B0]);
  v0 = (void *)STACK[0x320];
  if (STACK[0x320])
  {
    STACK[0x328] = (unint64_t)v0;
    operator delete(v0);
    v1 = (void *)STACK[0x338];
    if (!STACK[0x338])
    {
LABEL_5:
      unint64_t v2 = STACK[0x450];
      if (!STACK[0x450]) {
LABEL_10:
      }
        JUMPOUT(0x19E283964);
LABEL_9:
      STACK[0x458] = v2;
      JUMPOUT(0x19E283960);
    }
  }
  else
  {
    v1 = (void *)STACK[0x338];
    if (!STACK[0x338]) {
      goto LABEL_5;
    }
  }
  STACK[0x340] = (unint64_t)v1;
  operator delete(v1);
  unint64_t v2 = STACK[0x450];
  if (!STACK[0x450]) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void sub_19E2837E8()
{
  if (SLOBYTE(STACK[0x7A7]) < 0) {
    operator delete((void *)STACK[0x790]);
  }
  sub_19E13A748((void **)&STACK[0x3F0]);
  sub_19E13A748((void **)&STACK[0x580]);
  JUMPOUT(0x19E28380CLL);
}

void sub_19E28384C()
{
}

void sub_19E28385C()
{
  v0 = (void *)STACK[0x320];
  if (STACK[0x320])
  {
    STACK[0x328] = (unint64_t)v0;
    operator delete(v0);
    v1 = (void *)STACK[0x338];
    if (!STACK[0x338])
    {
LABEL_3:
      unint64_t v2 = STACK[0x450];
      if (!STACK[0x450]) {
LABEL_8:
      }
        JUMPOUT(0x19E283964);
LABEL_7:
      STACK[0x458] = v2;
      JUMPOUT(0x19E283960);
    }
  }
  else
  {
    v1 = (void *)STACK[0x338];
    if (!STACK[0x338]) {
      goto LABEL_3;
    }
  }
  STACK[0x340] = (unint64_t)v1;
  operator delete(v1);
  unint64_t v2 = STACK[0x450];
  if (!STACK[0x450]) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void sub_19E283940()
{
}

void sub_19E283A6C()
{
}

void sub_19E283D6C(void *a1@<X0>, uint64_t *a2@<X4>, uint64_t *a3@<X5>, void *a4@<X8>)
{
  LODWORD(v28.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(a1[14] + 8))(*(void *)(a1[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  __n128 v8 = lpsrc;
  if (!lpsrc || (unint64_t v9 = __dynamic_cast(lpsrc, MEMORY[0x1E4F61218], MEMORY[0x1E4F61260], 0)) == 0)
  {
    *a4 = 0;
    a4[1] = 0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v28);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint8x8_t v10 = v30;
  *a4 = v9;
  a4[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  size_t v26 = v8;
  int v27 = v30;
  if (v30) {
    atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  sub_19E28750C(&v23, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  __p = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  sub_19E28750C(&__p, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
  Espresso::sequential_builder::add_kernel();
  unint64_t v11 = (void **)__p;
  if (__p)
  {
    v12 = v21;
    v13 = __p;
    if (v21 != __p)
    {
      do
      {
        if (*((char *)v12 - 1) < 0) {
          operator delete(*(v12 - 3));
        }
        v12 -= 3;
      }
      while (v12 != v11);
      v13 = __p;
    }
    uint64_t v21 = v11;
    operator delete(v13);
  }
  unint64_t v14 = (void **)v23;
  if (v23)
  {
    unint64_t v15 = v24;
    uint64_t v16 = v23;
    if (v24 != v23)
    {
      do
      {
        if (*((char *)v15 - 1) < 0) {
          operator delete(*(v15 - 3));
        }
        v15 -= 3;
      }
      while (v15 != v14);
      uint64_t v16 = v23;
    }
    uint64_t v24 = v14;
    operator delete(v16);
  }
  v17 = v27;
  if (!v27 || atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!*a1) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*a1) {
LABEL_26:
  }
    Espresso::sequential_builder::add_shape_from_kernel();
LABEL_27:
  size_t v18 = v30;
  if (v30)
  {
    if (!atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_19E2840AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_19E24AF60(v13);
  sub_19E24AF60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E2840C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, void *);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  __n128 v8 = va_arg(va2, void *);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v12 = va_arg(va3, void);
  uint64_t v14 = va_arg(va3, void);
  uint64_t v15 = va_arg(va3, void);
  uint64_t v16 = va_arg(va3, void);
  uint64_t v17 = va_arg(va3, void);
  sub_19E13A748((void **)va);
  sub_19E13A748((void **)va1);
  sub_19E24AF60((uint64_t)va2);
  sub_19E24AF60(v2);
  sub_19E24AF60((uint64_t)va3);
  _Unwind_Resume(a1);
}

void sub_19E28410C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (a23 < 0)
  {
    operator delete(__p);
    if ((v26 & 1) == 0)
    {
LABEL_6:
      sub_19E24AF60(v24);
      sub_19E24AF60((uint64_t)&a24);
      _Unwind_Resume(a1);
    }
  }
  else if (!v26)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v25);
  goto LABEL_6;
}

void sub_19E284154(void *a1@<X0>, uint64_t *a2@<X4>, uint64_t *a3@<X5>, void *a4@<X8>)
{
  LODWORD(v28.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(a1[14] + 8))(*(void *)(a1[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  __n128 v8 = lpsrc;
  if (!lpsrc || (unint64_t v9 = __dynamic_cast(lpsrc, MEMORY[0x1E4F61218], MEMORY[0x1E4F61240], 0)) == 0)
  {
    *a4 = 0;
    a4[1] = 0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v28);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v10 = v30;
  *a4 = v9;
  a4[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v26 = v8;
  int v27 = v30;
  if (v30) {
    atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  sub_19E28750C(&v23, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  __p = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  sub_19E28750C(&__p, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
  Espresso::sequential_builder::add_kernel();
  uint64_t v11 = (void **)__p;
  if (__p)
  {
    uint64_t v12 = v21;
    uint64_t v13 = __p;
    if (v21 != __p)
    {
      do
      {
        if (*((char *)v12 - 1) < 0) {
          operator delete(*(v12 - 3));
        }
        v12 -= 3;
      }
      while (v12 != v11);
      uint64_t v13 = __p;
    }
    uint64_t v21 = v11;
    operator delete(v13);
  }
  uint64_t v14 = (void **)v23;
  if (v23)
  {
    uint64_t v15 = v24;
    uint64_t v16 = v23;
    if (v24 != v23)
    {
      do
      {
        if (*((char *)v15 - 1) < 0) {
          operator delete(*(v15 - 3));
        }
        v15 -= 3;
      }
      while (v15 != v14);
      uint64_t v16 = v23;
    }
    uint64_t v24 = v14;
    operator delete(v16);
  }
  uint64_t v17 = v27;
  if (!v27 || atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!*a1) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*a1) {
LABEL_26:
  }
    Espresso::sequential_builder::add_shape_from_kernel();
LABEL_27:
  size_t v18 = v30;
  if (v30)
  {
    if (!atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_19E284494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_19E24AF60(v13);
  sub_19E24AF60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E2844B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, void *);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  __n128 v8 = va_arg(va2, void *);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v12 = va_arg(va3, void);
  uint64_t v14 = va_arg(va3, void);
  uint64_t v15 = va_arg(va3, void);
  uint64_t v16 = va_arg(va3, void);
  uint64_t v17 = va_arg(va3, void);
  sub_19E13A748((void **)va);
  sub_19E13A748((void **)va1);
  sub_19E24AF60((uint64_t)va2);
  sub_19E24AF60(v2);
  sub_19E24AF60((uint64_t)va3);
  _Unwind_Resume(a1);
}

void sub_19E2844F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (a23 < 0)
  {
    operator delete(__p);
    if ((v26 & 1) == 0)
    {
LABEL_6:
      sub_19E24AF60(v24);
      sub_19E24AF60((uint64_t)&a24);
      _Unwind_Resume(a1);
    }
  }
  else if (!v26)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v25);
  goto LABEL_6;
}

void sub_19E28453C(void *a1@<X0>, uint64_t *a2@<X4>, uint64_t *a3@<X5>, void *a4@<X8>)
{
  LODWORD(v28.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(a1[14] + 8))(*(void *)(a1[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  __n128 v8 = lpsrc;
  if (!lpsrc || (unint64_t v9 = __dynamic_cast(lpsrc, MEMORY[0x1E4F61218], MEMORY[0x1E4F61268], 0)) == 0)
  {
    *a4 = 0;
    a4[1] = 0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v28);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v10 = v30;
  *a4 = v9;
  a4[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v26 = v8;
  int v27 = v30;
  if (v30) {
    atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  sub_19E28750C(&v23, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  __p = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  sub_19E28750C(&__p, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
  Espresso::sequential_builder::add_kernel();
  uint64_t v11 = (void **)__p;
  if (__p)
  {
    uint64_t v12 = v21;
    uint64_t v13 = __p;
    if (v21 != __p)
    {
      do
      {
        if (*((char *)v12 - 1) < 0) {
          operator delete(*(v12 - 3));
        }
        v12 -= 3;
      }
      while (v12 != v11);
      uint64_t v13 = __p;
    }
    uint64_t v21 = v11;
    operator delete(v13);
  }
  uint64_t v14 = (void **)v23;
  if (v23)
  {
    uint64_t v15 = v24;
    uint64_t v16 = v23;
    if (v24 != v23)
    {
      do
      {
        if (*((char *)v15 - 1) < 0) {
          operator delete(*(v15 - 3));
        }
        v15 -= 3;
      }
      while (v15 != v14);
      uint64_t v16 = v23;
    }
    uint64_t v24 = v14;
    operator delete(v16);
  }
  uint64_t v17 = v27;
  if (!v27 || atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!*a1) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*a1) {
LABEL_26:
  }
    Espresso::sequential_builder::add_shape_from_kernel();
LABEL_27:
  size_t v18 = v30;
  if (v30)
  {
    if (!atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_19E28487C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_19E24AF60(v13);
  sub_19E24AF60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E284898(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, void *);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  __n128 v8 = va_arg(va2, void *);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v12 = va_arg(va3, void);
  uint64_t v14 = va_arg(va3, void);
  uint64_t v15 = va_arg(va3, void);
  uint64_t v16 = va_arg(va3, void);
  uint64_t v17 = va_arg(va3, void);
  sub_19E13A748((void **)va);
  sub_19E13A748((void **)va1);
  sub_19E24AF60((uint64_t)va2);
  sub_19E24AF60(v2);
  sub_19E24AF60((uint64_t)va3);
  _Unwind_Resume(a1);
}

void sub_19E2848DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (a23 < 0)
  {
    operator delete(__p);
    if ((v26 & 1) == 0)
    {
LABEL_6:
      sub_19E24AF60(v24);
      sub_19E24AF60((uint64_t)&a24);
      _Unwind_Resume(a1);
    }
  }
  else if (!v26)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v25);
  goto LABEL_6;
}

void sub_19E284924(void *a1@<X0>, uint64_t *a2@<X4>, uint64_t *a3@<X5>, uint64_t *a4@<X8>)
{
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  sub_19E28750C(&v16, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  __p = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  sub_19E28750C(&__p, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
  sub_19E289140(a1, (uint64_t *)&v16, (uint64_t *)&__p, a4);
  uint64_t v7 = (void **)__p;
  if (__p)
  {
    __n128 v8 = v14;
    unint64_t v9 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      unint64_t v9 = __p;
    }
    uint64_t v14 = v7;
    operator delete(v9);
  }
  uint64_t v10 = (void **)v16;
  if (v16)
  {
    uint64_t v11 = v17;
    uint64_t v12 = v16;
    if (v17 != v16)
    {
      do
      {
        if (*((char *)v11 - 1) < 0) {
          operator delete(*(v11 - 3));
        }
        v11 -= 3;
      }
      while (v11 != v10);
      uint64_t v12 = v16;
    }
    uint64_t v17 = v10;
    operator delete(v12);
  }
}

void sub_19E284A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12)
{
}

void sub_19E284A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_19E13A748((void **)va);
  _Unwind_Resume(a1);
}

void sub_19E284AA4(void *a1@<X0>, uint64_t *a2@<X4>, uint64_t *a3@<X5>, uint64_t *a4@<X8>)
{
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  sub_19E28750C(&v16, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  __p = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  sub_19E28750C(&__p, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
  sub_19E2893E0(a1, (uint64_t *)&v16, (uint64_t *)&__p, a4);
  uint64_t v7 = (void **)__p;
  if (__p)
  {
    __n128 v8 = v14;
    unint64_t v9 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      unint64_t v9 = __p;
    }
    uint64_t v14 = v7;
    operator delete(v9);
  }
  uint64_t v10 = (void **)v16;
  if (v16)
  {
    uint64_t v11 = v17;
    uint64_t v12 = v16;
    if (v17 != v16)
    {
      do
      {
        if (*((char *)v11 - 1) < 0) {
          operator delete(*(v11 - 3));
        }
        v11 -= 3;
      }
      while (v11 != v10);
      uint64_t v12 = v16;
    }
    uint64_t v17 = v10;
    operator delete(v12);
  }
}

void sub_19E284BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12)
{
}

void sub_19E284C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_19E13A748((void **)va);
  _Unwind_Resume(a1);
}

void sub_19E284C24(void *a1@<X0>, uint64_t *a2@<X4>, uint64_t *a3@<X5>, void *a4@<X8>)
{
  LODWORD(v28.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(a1[14] + 8))(*(void *)(a1[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  __n128 v8 = lpsrc;
  if (!lpsrc || (unint64_t v9 = __dynamic_cast(lpsrc, MEMORY[0x1E4F61218], MEMORY[0x1E4F61250], 0)) == 0)
  {
    *a4 = 0;
    a4[1] = 0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v28);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v10 = v30;
  *a4 = v9;
  a4[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v26 = v8;
  int v27 = v30;
  if (v30) {
    atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  sub_19E28750C(&v23, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  __p = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  sub_19E28750C(&__p, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
  Espresso::sequential_builder::add_kernel();
  uint64_t v11 = (void **)__p;
  if (__p)
  {
    uint64_t v12 = v21;
    uint64_t v13 = __p;
    if (v21 != __p)
    {
      do
      {
        if (*((char *)v12 - 1) < 0) {
          operator delete(*(v12 - 3));
        }
        v12 -= 3;
      }
      while (v12 != v11);
      uint64_t v13 = __p;
    }
    uint64_t v21 = v11;
    operator delete(v13);
  }
  uint64_t v14 = (void **)v23;
  if (v23)
  {
    uint64_t v15 = v24;
    uint64_t v16 = v23;
    if (v24 != v23)
    {
      do
      {
        if (*((char *)v15 - 1) < 0) {
          operator delete(*(v15 - 3));
        }
        v15 -= 3;
      }
      while (v15 != v14);
      uint64_t v16 = v23;
    }
    uint64_t v24 = v14;
    operator delete(v16);
  }
  uint64_t v17 = v27;
  if (!v27 || atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!*a1) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*a1) {
LABEL_26:
  }
    Espresso::sequential_builder::add_shape_from_kernel();
LABEL_27:
  uint64_t v18 = v30;
  if (v30)
  {
    if (!atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_19E284F64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_19E24AF60(v13);
  sub_19E24AF60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E284F80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, void *);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  __n128 v8 = va_arg(va2, void *);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v12 = va_arg(va3, void);
  uint64_t v14 = va_arg(va3, void);
  uint64_t v15 = va_arg(va3, void);
  uint64_t v16 = va_arg(va3, void);
  uint64_t v17 = va_arg(va3, void);
  sub_19E13A748((void **)va);
  sub_19E13A748((void **)va1);
  sub_19E24AF60((uint64_t)va2);
  sub_19E24AF60(v2);
  sub_19E24AF60((uint64_t)va3);
  _Unwind_Resume(a1);
}

void sub_19E284FC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (a23 < 0)
  {
    operator delete(__p);
    if ((v26 & 1) == 0)
    {
LABEL_6:
      sub_19E24AF60(v24);
      sub_19E24AF60((uint64_t)&a24);
      _Unwind_Resume(a1);
    }
  }
  else if (!v26)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v25);
  goto LABEL_6;
}

void sub_19E28500C(void *a1@<X0>, uint64_t *a2@<X4>, uint64_t *a3@<X5>, void *a4@<X8>)
{
  LODWORD(v28.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(a1[14] + 8))(*(void *)(a1[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  __n128 v8 = lpsrc;
  if (!lpsrc || (unint64_t v9 = __dynamic_cast(lpsrc, MEMORY[0x1E4F61218], MEMORY[0x1E4F61220], 0)) == 0)
  {
    *a4 = 0;
    a4[1] = 0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v28);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v10 = v30;
  *a4 = v9;
  a4[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v26 = v8;
  int v27 = v30;
  if (v30) {
    atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  sub_19E28750C(&v23, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  __p = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  sub_19E28750C(&__p, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
  Espresso::sequential_builder::add_kernel();
  uint64_t v11 = (void **)__p;
  if (__p)
  {
    uint64_t v12 = v21;
    uint64_t v13 = __p;
    if (v21 != __p)
    {
      do
      {
        if (*((char *)v12 - 1) < 0) {
          operator delete(*(v12 - 3));
        }
        v12 -= 3;
      }
      while (v12 != v11);
      uint64_t v13 = __p;
    }
    uint64_t v21 = v11;
    operator delete(v13);
  }
  uint64_t v14 = (void **)v23;
  if (v23)
  {
    uint64_t v15 = v24;
    uint64_t v16 = v23;
    if (v24 != v23)
    {
      do
      {
        if (*((char *)v15 - 1) < 0) {
          operator delete(*(v15 - 3));
        }
        v15 -= 3;
      }
      while (v15 != v14);
      uint64_t v16 = v23;
    }
    uint64_t v24 = v14;
    operator delete(v16);
  }
  uint64_t v17 = v27;
  if (!v27 || atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!*a1) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*a1) {
LABEL_26:
  }
    Espresso::sequential_builder::add_shape_from_kernel();
LABEL_27:
  uint64_t v18 = v30;
  if (v30)
  {
    if (!atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_19E28534C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_19E24AF60(v13);
  sub_19E24AF60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E285368(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, void *);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  __n128 v8 = va_arg(va2, void *);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v12 = va_arg(va3, void);
  uint64_t v14 = va_arg(va3, void);
  uint64_t v15 = va_arg(va3, void);
  uint64_t v16 = va_arg(va3, void);
  uint64_t v17 = va_arg(va3, void);
  sub_19E13A748((void **)va);
  sub_19E13A748((void **)va1);
  sub_19E24AF60((uint64_t)va2);
  sub_19E24AF60(v2);
  sub_19E24AF60((uint64_t)va3);
  _Unwind_Resume(a1);
}

void sub_19E2853AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (a23 < 0)
  {
    operator delete(__p);
    if ((v26 & 1) == 0)
    {
LABEL_6:
      sub_19E24AF60(v24);
      sub_19E24AF60((uint64_t)&a24);
      _Unwind_Resume(a1);
    }
  }
  else if (!v26)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v25);
  goto LABEL_6;
}

void sub_19E2853F4(void *a1@<X0>, uint64_t *a2@<X4>, uint64_t *a3@<X5>, void *a4@<X8>)
{
  LODWORD(v28.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(a1[14] + 8))(*(void *)(a1[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  __n128 v8 = lpsrc;
  if (!lpsrc || (unint64_t v9 = __dynamic_cast(lpsrc, MEMORY[0x1E4F61218], MEMORY[0x1E4F61238], 0)) == 0)
  {
    *a4 = 0;
    a4[1] = 0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v28);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v10 = v30;
  *a4 = v9;
  a4[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v26 = v8;
  int v27 = v30;
  if (v30) {
    atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  sub_19E28750C(&v23, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  __p = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  sub_19E28750C(&__p, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
  Espresso::sequential_builder::add_kernel();
  uint64_t v11 = (void **)__p;
  if (__p)
  {
    uint64_t v12 = v21;
    uint64_t v13 = __p;
    if (v21 != __p)
    {
      do
      {
        if (*((char *)v12 - 1) < 0) {
          operator delete(*(v12 - 3));
        }
        v12 -= 3;
      }
      while (v12 != v11);
      uint64_t v13 = __p;
    }
    uint64_t v21 = v11;
    operator delete(v13);
  }
  uint64_t v14 = (void **)v23;
  if (v23)
  {
    uint64_t v15 = v24;
    uint64_t v16 = v23;
    if (v24 != v23)
    {
      do
      {
        if (*((char *)v15 - 1) < 0) {
          operator delete(*(v15 - 3));
        }
        v15 -= 3;
      }
      while (v15 != v14);
      uint64_t v16 = v23;
    }
    uint64_t v24 = v14;
    operator delete(v16);
  }
  uint64_t v17 = v27;
  if (!v27 || atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!*a1) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*a1) {
LABEL_26:
  }
    Espresso::sequential_builder::add_shape_from_kernel();
LABEL_27:
  uint64_t v18 = v30;
  if (v30)
  {
    if (!atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_19E285734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_19E24AF60(v13);
  sub_19E24AF60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E285750(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, void *);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  __n128 v8 = va_arg(va2, void *);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v12 = va_arg(va3, void);
  uint64_t v14 = va_arg(va3, void);
  uint64_t v15 = va_arg(va3, void);
  uint64_t v16 = va_arg(va3, void);
  uint64_t v17 = va_arg(va3, void);
  sub_19E13A748((void **)va);
  sub_19E13A748((void **)va1);
  sub_19E24AF60((uint64_t)va2);
  sub_19E24AF60(v2);
  sub_19E24AF60((uint64_t)va3);
  _Unwind_Resume(a1);
}

void sub_19E285794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (a23 < 0)
  {
    operator delete(__p);
    if ((v26 & 1) == 0)
    {
LABEL_6:
      sub_19E24AF60(v24);
      sub_19E24AF60((uint64_t)&a24);
      _Unwind_Resume(a1);
    }
  }
  else if (!v26)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v25);
  goto LABEL_6;
}

void sub_19E2857DC(void *a1@<X0>, uint64_t *a2@<X4>, uint64_t *a3@<X5>, void *a4@<X8>)
{
  LODWORD(v28.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(a1[14] + 8))(*(void *)(a1[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  __n128 v8 = lpsrc;
  if (!lpsrc || (unint64_t v9 = __dynamic_cast(lpsrc, MEMORY[0x1E4F61218], MEMORY[0x1E4F61258], 0)) == 0)
  {
    *a4 = 0;
    a4[1] = 0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v28);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v10 = v30;
  *a4 = v9;
  a4[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v26 = v8;
  int v27 = v30;
  if (v30) {
    atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  sub_19E28750C(&v23, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  __p = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  sub_19E28750C(&__p, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
  Espresso::sequential_builder::add_kernel();
  uint64_t v11 = (void **)__p;
  if (__p)
  {
    uint64_t v12 = v21;
    uint64_t v13 = __p;
    if (v21 != __p)
    {
      do
      {
        if (*((char *)v12 - 1) < 0) {
          operator delete(*(v12 - 3));
        }
        v12 -= 3;
      }
      while (v12 != v11);
      uint64_t v13 = __p;
    }
    uint64_t v21 = v11;
    operator delete(v13);
  }
  uint64_t v14 = (void **)v23;
  if (v23)
  {
    uint64_t v15 = v24;
    uint64_t v16 = v23;
    if (v24 != v23)
    {
      do
      {
        if (*((char *)v15 - 1) < 0) {
          operator delete(*(v15 - 3));
        }
        v15 -= 3;
      }
      while (v15 != v14);
      uint64_t v16 = v23;
    }
    uint64_t v24 = v14;
    operator delete(v16);
  }
  uint64_t v17 = v27;
  if (!v27 || atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!*a1) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*a1) {
LABEL_26:
  }
    Espresso::sequential_builder::add_shape_from_kernel();
LABEL_27:
  uint64_t v18 = v30;
  if (v30)
  {
    if (!atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_19E285B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_19E24AF60(v13);
  sub_19E24AF60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E285B38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, void *);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  __n128 v8 = va_arg(va2, void *);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v12 = va_arg(va3, void);
  uint64_t v14 = va_arg(va3, void);
  uint64_t v15 = va_arg(va3, void);
  uint64_t v16 = va_arg(va3, void);
  uint64_t v17 = va_arg(va3, void);
  sub_19E13A748((void **)va);
  sub_19E13A748((void **)va1);
  sub_19E24AF60((uint64_t)va2);
  sub_19E24AF60(v2);
  sub_19E24AF60((uint64_t)va3);
  _Unwind_Resume(a1);
}

void sub_19E285B7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (a23 < 0)
  {
    operator delete(__p);
    if ((v26 & 1) == 0)
    {
LABEL_6:
      sub_19E24AF60(v24);
      sub_19E24AF60((uint64_t)&a24);
      _Unwind_Resume(a1);
    }
  }
  else if (!v26)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v25);
  goto LABEL_6;
}

void sub_19E285BC4(void *a1@<X0>, uint64_t *a2@<X4>, uint64_t *a3@<X5>, void *a4@<X8>)
{
  LODWORD(v28.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(a1[14] + 8))(*(void *)(a1[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  __n128 v8 = lpsrc;
  if (!lpsrc || (unint64_t v9 = __dynamic_cast(lpsrc, MEMORY[0x1E4F61218], MEMORY[0x1E4F61230], 0)) == 0)
  {
    *a4 = 0;
    a4[1] = 0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v28);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v10 = v30;
  *a4 = v9;
  a4[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v26 = v8;
  int v27 = v30;
  if (v30) {
    atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  sub_19E28750C(&v23, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  __p = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  sub_19E28750C(&__p, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
  Espresso::sequential_builder::add_kernel();
  uint64_t v11 = (void **)__p;
  if (__p)
  {
    uint64_t v12 = v21;
    uint64_t v13 = __p;
    if (v21 != __p)
    {
      do
      {
        if (*((char *)v12 - 1) < 0) {
          operator delete(*(v12 - 3));
        }
        v12 -= 3;
      }
      while (v12 != v11);
      uint64_t v13 = __p;
    }
    uint64_t v21 = v11;
    operator delete(v13);
  }
  uint64_t v14 = (void **)v23;
  if (v23)
  {
    uint64_t v15 = v24;
    uint64_t v16 = v23;
    if (v24 != v23)
    {
      do
      {
        if (*((char *)v15 - 1) < 0) {
          operator delete(*(v15 - 3));
        }
        v15 -= 3;
      }
      while (v15 != v14);
      uint64_t v16 = v23;
    }
    uint64_t v24 = v14;
    operator delete(v16);
  }
  uint64_t v17 = v27;
  if (!v27 || atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!*a1) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*a1) {
LABEL_26:
  }
    Espresso::sequential_builder::add_shape_from_kernel();
LABEL_27:
  uint64_t v18 = v30;
  if (v30)
  {
    if (!atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_19E285F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_19E24AF60(v13);
  sub_19E24AF60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E285F20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, void *);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  __n128 v8 = va_arg(va2, void *);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v12 = va_arg(va3, void);
  uint64_t v14 = va_arg(va3, void);
  uint64_t v15 = va_arg(va3, void);
  uint64_t v16 = va_arg(va3, void);
  uint64_t v17 = va_arg(va3, void);
  sub_19E13A748((void **)va);
  sub_19E13A748((void **)va1);
  sub_19E24AF60((uint64_t)va2);
  sub_19E24AF60(v2);
  sub_19E24AF60((uint64_t)va3);
  _Unwind_Resume(a1);
}

void sub_19E285F64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (a23 < 0)
  {
    operator delete(__p);
    if ((v26 & 1) == 0)
    {
LABEL_6:
      sub_19E24AF60(v24);
      sub_19E24AF60((uint64_t)&a24);
      _Unwind_Resume(a1);
    }
  }
  else if (!v26)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v25);
  goto LABEL_6;
}

void sub_19E285FAC(void *a1@<X0>, uint64_t *a2@<X4>, uint64_t *a3@<X5>, void *a4@<X8>)
{
  LODWORD(v28.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(a1[14] + 8))(*(void *)(a1[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  __n128 v8 = lpsrc;
  if (!lpsrc || (unint64_t v9 = __dynamic_cast(lpsrc, MEMORY[0x1E4F61218], MEMORY[0x1E4F61248], 0)) == 0)
  {
    *a4 = 0;
    a4[1] = 0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v28);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v10 = v30;
  *a4 = v9;
  a4[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v26 = v8;
  int v27 = v30;
  if (v30) {
    atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  sub_19E28750C(&v23, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  __p = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  sub_19E28750C(&__p, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
  Espresso::sequential_builder::add_kernel();
  uint64_t v11 = (void **)__p;
  if (__p)
  {
    uint64_t v12 = v21;
    uint64_t v13 = __p;
    if (v21 != __p)
    {
      do
      {
        if (*((char *)v12 - 1) < 0) {
          operator delete(*(v12 - 3));
        }
        v12 -= 3;
      }
      while (v12 != v11);
      uint64_t v13 = __p;
    }
    uint64_t v21 = v11;
    operator delete(v13);
  }
  uint64_t v14 = (void **)v23;
  if (v23)
  {
    uint64_t v15 = v24;
    uint64_t v16 = v23;
    if (v24 != v23)
    {
      do
      {
        if (*((char *)v15 - 1) < 0) {
          operator delete(*(v15 - 3));
        }
        v15 -= 3;
      }
      while (v15 != v14);
      uint64_t v16 = v23;
    }
    uint64_t v24 = v14;
    operator delete(v16);
  }
  uint64_t v17 = v27;
  if (!v27 || atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!*a1) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*a1) {
LABEL_26:
  }
    Espresso::sequential_builder::add_shape_from_kernel();
LABEL_27:
  uint64_t v18 = v30;
  if (v30)
  {
    if (!atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_19E2862EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_19E24AF60(v13);
  sub_19E24AF60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E286308(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, void *);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  __n128 v8 = va_arg(va2, void *);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v12 = va_arg(va3, void);
  uint64_t v14 = va_arg(va3, void);
  uint64_t v15 = va_arg(va3, void);
  uint64_t v16 = va_arg(va3, void);
  uint64_t v17 = va_arg(va3, void);
  sub_19E13A748((void **)va);
  sub_19E13A748((void **)va1);
  sub_19E24AF60((uint64_t)va2);
  sub_19E24AF60(v2);
  sub_19E24AF60((uint64_t)va3);
  _Unwind_Resume(a1);
}

void sub_19E28634C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (a23 < 0)
  {
    operator delete(__p);
    if ((v26 & 1) == 0)
    {
LABEL_6:
      sub_19E24AF60(v24);
      sub_19E24AF60((uint64_t)&a24);
      _Unwind_Resume(a1);
    }
  }
  else if (!v26)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v25);
  goto LABEL_6;
}

void sub_19E286394(void *a1@<X0>, uint64_t *a2@<X4>, uint64_t *a3@<X5>, uint64_t *a4@<X8>)
{
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  sub_19E28750C(&v16, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  __p = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  sub_19E28750C(&__p, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
  sub_19E289C34(a1, (uint64_t *)&v16, (uint64_t *)&__p, a4);
  uint64_t v7 = (void **)__p;
  if (__p)
  {
    __n128 v8 = v14;
    unint64_t v9 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      unint64_t v9 = __p;
    }
    uint64_t v14 = v7;
    operator delete(v9);
  }
  uint64_t v10 = (void **)v16;
  if (v16)
  {
    uint64_t v11 = v17;
    uint64_t v12 = v16;
    if (v17 != v16)
    {
      do
      {
        if (*((char *)v11 - 1) < 0) {
          operator delete(*(v11 - 3));
        }
        v11 -= 3;
      }
      while (v11 != v10);
      uint64_t v12 = v16;
    }
    uint64_t v17 = v10;
    operator delete(v12);
  }
}

void sub_19E2864E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12)
{
}

void sub_19E286500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_19E13A748((void **)va);
  _Unwind_Resume(a1);
}

void sub_19E286514(void *a1@<X0>, uint64_t *a2@<X4>, uint64_t *a3@<X5>, void *a4@<X8>)
{
  LODWORD(v28.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(a1[14] + 8))(*(void *)(a1[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  __n128 v8 = lpsrc;
  if (!lpsrc || (unint64_t v9 = __dynamic_cast(lpsrc, MEMORY[0x1E4F61218], MEMORY[0x1E4F61228], 0)) == 0)
  {
    *a4 = 0;
    a4[1] = 0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v28);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v10 = v30;
  *a4 = v9;
  a4[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v26 = v8;
  int v27 = v30;
  if (v30) {
    atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  sub_19E28750C(&v23, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  __p = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  sub_19E28750C(&__p, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
  Espresso::sequential_builder::add_kernel();
  uint64_t v11 = (void **)__p;
  if (__p)
  {
    uint64_t v12 = v21;
    uint64_t v13 = __p;
    if (v21 != __p)
    {
      do
      {
        if (*((char *)v12 - 1) < 0) {
          operator delete(*(v12 - 3));
        }
        v12 -= 3;
      }
      while (v12 != v11);
      uint64_t v13 = __p;
    }
    uint64_t v21 = v11;
    operator delete(v13);
  }
  uint64_t v14 = (void **)v23;
  if (v23)
  {
    uint64_t v15 = v24;
    uint64_t v16 = v23;
    if (v24 != v23)
    {
      do
      {
        if (*((char *)v15 - 1) < 0) {
          operator delete(*(v15 - 3));
        }
        v15 -= 3;
      }
      while (v15 != v14);
      uint64_t v16 = v23;
    }
    uint64_t v24 = v14;
    operator delete(v16);
  }
  uint64_t v17 = v27;
  if (!v27 || atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!*a1) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*a1) {
LABEL_26:
  }
    Espresso::sequential_builder::add_shape_from_kernel();
LABEL_27:
  uint64_t v18 = v30;
  if (v30)
  {
    if (!atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_19E286854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_19E24AF60(v13);
  sub_19E24AF60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E286870(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, void *);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  __n128 v8 = va_arg(va2, void *);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v12 = va_arg(va3, void);
  uint64_t v14 = va_arg(va3, void);
  uint64_t v15 = va_arg(va3, void);
  uint64_t v16 = va_arg(va3, void);
  uint64_t v17 = va_arg(va3, void);
  sub_19E13A748((void **)va);
  sub_19E13A748((void **)va1);
  sub_19E24AF60((uint64_t)va2);
  sub_19E24AF60(v2);
  sub_19E24AF60((uint64_t)va3);
  _Unwind_Resume(a1);
}

void sub_19E2868B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (a23 < 0)
  {
    operator delete(__p);
    if ((v26 & 1) == 0)
    {
LABEL_6:
      sub_19E24AF60(v24);
      sub_19E24AF60((uint64_t)&a24);
      _Unwind_Resume(a1);
    }
  }
  else if (!v26)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v25);
  goto LABEL_6;
}

uint64_t sub_19E2868FC(uint64_t a1, const char *a2, void *a3)
{
  LODWORD(v14[0]) = 0;
  sub_19E286ACC((Espresso::abstract_engine_factory *)v14, &v15);
  uint64_t v12 = v15;
  uint64_t v13 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  MEMORY[0x19F3BB670](v14, &v12, 0, &v10);
  v5 = v11;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = v13;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  sub_19E27BDEC(v14, a3, a2, v9);
  sub_19E287648((uint64_t)v9, (char *)v9[1]);
  sub_19E287190((uint64_t)v14);
  uint64_t v7 = v16;
  if (!v16 || atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return 1;
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return 1;
}

void sub_19E286A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_19E287190((uint64_t)va);
  sub_19E24AF60(v8 - 48);
  _Unwind_Resume(a1);
}

void sub_19E286AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  sub_19E24AF60((uint64_t)va);
  sub_19E24AF60((uint64_t)va1);
  sub_19E24AF60(v4 - 48);
  _Unwind_Resume(a1);
}

void sub_19E286ACC(Espresso::abstract_engine_factory *a1@<X0>, void *a2@<X8>)
{
  Espresso::abstract_engine_factory::shared(&v11, a1);
  Espresso::abstract_engine_factory::engine_for_platform();
  v5 = v12;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    uint64_t v6 = v9;
    if (v9)
    {
LABEL_4:
      (*(void (**)(Espresso *, Espresso **, uint64_t))(*(void *)v6 + 32))(v6, &v9, 0xFFFFFFFFLL);
      uint64_t v7 = v10;
      if (!v10) {
        return;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v6 = v9;
    if (v9) {
      goto LABEL_4;
    }
  }
  uint64_t v8 = Espresso::espresso_os_log_subsystem(v6, v4);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    sub_19E32F814((int *)a1, v8);
    *a2 = 0;
    a2[1] = 0;
    uint64_t v7 = v10;
    if (!v10) {
      return;
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    uint64_t v7 = v10;
    if (!v10) {
      return;
    }
  }
LABEL_9:
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_19E286C38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)())v24->__on_zero_shared)();
    std::__shared_weak_count::__release_weak(v24);
  }
  if (a2 != 1) {
    _Unwind_Resume(exception_object);
  }
  uint64_t v21 = __cxa_begin_catch(exception_object);
  unint64_t v23 = Espresso::espresso_os_log_subsystem(0, v22);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
    sub_19E32F890((uint64_t)v21, v23);
  }
  *uint64_t v18 = 0;
  v18[1] = 0;
  __cxa_end_catch();
}

uint64_t sub_19E286D1C(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (*(void *)a1)
  {
    if (*(unsigned char *)(a1 + 68))
    {
      v3 = (char *)operator new(0x28uLL);
      uint64_t v4 = v3;
      strcpy(v3, "do-not-us-this-path,from-raw-buffer");
      uint64_t v5 = *(unsigned __int8 *)(a1 + 39);
      if ((v5 & 0x80u) == 0) {
        uint64_t v6 = *(unsigned __int8 *)(a1 + 39);
      }
      else {
        uint64_t v6 = *(void *)(a1 + 24);
      }
      if (v6 != 35)
      {
LABEL_20:
        operator delete(v3);
LABEL_21:
        munmap(*(void **)a1, *(void *)(a1 + 8));
        goto LABEL_22;
      }
      uint64_t v7 = (const void **)(a1 + 16);
      if ((v5 & 0x80) == 0)
      {
        if (!*(unsigned char *)(a1 + 39))
        {
LABEL_12:
          operator delete(v3);
          goto LABEL_22;
        }
        uint64_t v8 = v3;
        while (*(unsigned __int8 *)v7 == *v8)
        {
          uint64_t v7 = (const void **)((char *)v7 + 1);
          ++v8;
          if (!--v5) {
            goto LABEL_12;
          }
        }
        goto LABEL_20;
      }
      int v13 = memcmp(*v7, v3, *(void *)(a1 + 24));
      operator delete(v4);
      if (v13) {
        goto LABEL_21;
      }
    }
    else
    {
      if (*(_DWORD *)(a1 + 64) != 2) {
        goto LABEL_19;
      }
      unint64_t v9 = (const char *)(a1 + 16);
      if (*(char *)(a1 + 39) < 0) {
        unint64_t v9 = *(const char **)v9;
      }
      int v10 = open(v9, 2);
      int v11 = v10;
      uint64_t v2 = *(void **)a1;
      if ((v10 & 0x80000000) == 0)
      {
        write(v10, v2, *(void *)(a1 + 8));
        close(v11);
        uint64_t v2 = *(void **)a1;
      }
      if (v2) {
LABEL_19:
      }
        operator delete[](v2);
    }
  }
LABEL_22:
  if (*(char *)(a1 + 63) < 0)
  {
    operator delete(*(void **)(a1 + 40));
    if ((*(char *)(a1 + 39) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((*(char *)(a1 + 39) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t sub_19E286EA4(uint64_t a1, long long *a2, long long *a3, int a4)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    sub_19E13C2D0((unsigned char *)(a1 + 16), *(void **)a2, *((void *)a2 + 1));
    uint64_t v9 = a1 + 40;
    if ((*((char *)a3 + 23) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v8 = *a2;
    *(void *)(a1 + 32) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 16) = v8;
    uint64_t v9 = a1 + 40;
    if ((*((char *)a3 + 23) & 0x80000000) == 0)
    {
LABEL_3:
      long long v10 = *a3;
      *(void *)(v9 + 16) = *((void *)a3 + 2);
      *(_OWORD *)uint64_t v9 = v10;
      goto LABEL_6;
    }
  }
  sub_19E13C2D0((unsigned char *)v9, *(void **)a3, *((void *)a3 + 1));
LABEL_6:
  *(_DWORD *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 68) = a4;
  *(_DWORD *)(a1 + 72) = 0;
  if (*((char *)a3 + 23) < 0)
  {
    uint64_t v12 = *((void *)a3 + 1);
    if (v12 != 1 || **(unsigned char **)a3 != 114)
    {
      if (v12 != 2 || **(_WORD **)a3 != 11122) {
LABEL_33:
      }
        sub_19E2F6320(11);
      goto LABEL_15;
    }
  }
  else
  {
    int v11 = *((unsigned __int8 *)a3 + 23);
    if (v11 != 1)
    {
      if (v11 != 2 || *(_WORD *)a3 != 11122) {
        goto LABEL_33;
      }
LABEL_15:
      *(_DWORD *)(a1 + 64) = 514;
      if (*((char *)a2 + 23) >= 0) {
        int v13 = (const char *)a2;
      }
      else {
        int v13 = *(const char **)a2;
      }
      int v14 = open(v13, 514, 384);
      goto LABEL_24;
    }
    if (*(unsigned char *)a3 != 114) {
      goto LABEL_33;
    }
  }
  *(_DWORD *)(a1 + 64) = 0;
  if (*((char *)a2 + 23) >= 0) {
    uint64_t v15 = (const char *)a2;
  }
  else {
    uint64_t v15 = *(const char **)a2;
  }
  int v14 = open(v15, 0);
LABEL_24:
  int v16 = v14;
  if (v14 < 0) {
    goto LABEL_33;
  }
  if (fstat(v14, &v21) < 0)
  {
    close(v16);
    goto LABEL_33;
  }
  st_std::string::size_type size = v21.st_size;
  *(void *)(a1 + 8) = v21.st_size;
  uint64_t v22 = 0;
  int v23 = st_size;
  fcntl(v16, 44, &v22);
  size_t v18 = *(void *)(a1 + 8);
  if (!a4) {
    operator new[]();
  }
  if (v18)
  {
    int v19 = mmap(0, v18, *(_DWORD *)(a1 + 64) & 2 | 1u, 1, v16, 0);
    if (v19 == (void *)-1)
    {
      close(v16);
      sub_19E2F6320(11);
    }
    *(void *)a1 = v19;
  }
  close(v16);
  return a1;
}

void sub_19E2870F0(_Unwind_Exception *exception_object)
{
  if ((*(char *)(v2 + 39) & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void sub_19E287140(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);

  operator delete(v1);
}

void sub_19E287168(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);

  operator delete(v1);
}

uint64_t sub_19E287190(uint64_t a1)
{
  sub_19E287330(a1 + 136);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 120);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v3 = *(std::__shared_weak_count **)(a1 + 104);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    v3 = *(std::__shared_weak_count **)(a1 + 104);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 88);
  if (!v4 || atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((*(char *)(a1 + 79) & 0x80000000) == 0) {
      goto LABEL_10;
    }
LABEL_13:
    operator delete(*(void **)(a1 + 56));
    sub_19E13C56C(a1 + 16, *(void **)(a1 + 24));
    uint64_t v5 = *(std::__shared_weak_count **)(a1 + 8);
    if (!v5) {
      return a1;
    }
    goto LABEL_14;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  if (*(char *)(a1 + 79) < 0) {
    goto LABEL_13;
  }
LABEL_10:
  sub_19E13C56C(a1 + 16, *(void **)(a1 + 24));
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v5) {
    return a1;
  }
LABEL_14:
  if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

uint64_t sub_19E287330(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v3 = *(void ***)(a1 + 8);
    *(void *)(a1 + 40) = 0;
    unint64_t v10 = 0;
  }
  else
  {
    unint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = &v2[v4 / 0xAA];
    unint64_t v6 = (unint64_t)*v5 + 24 * (v4 % 0xAA);
    unint64_t v7 = (unint64_t)v2[(*(void *)(a1 + 40) + v4) / 0xAA] + 24 * ((*(void *)(a1 + 40) + v4) % 0xAA);
    if (v6 != v7)
    {
      while (1)
      {
        long long v8 = *(std::__shared_weak_count **)(v6 + 8);
        if (v8)
        {
          if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
            break;
          }
        }
        v6 += 24;
        if (v6 - (void)*v5 == 4080) {
          goto LABEL_8;
        }
LABEL_4:
        if (v6 == v7)
        {
          uint64_t v2 = *(void ***)(a1 + 8);
          v3 = *(void ***)(a1 + 16);
          goto LABEL_12;
        }
      }
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      v6 += 24;
      if (v6 - (void)*v5 != 4080) {
        goto LABEL_4;
      }
LABEL_8:
      unint64_t v9 = (unint64_t)v5[1];
      ++v5;
      unint64_t v6 = v9;
      goto LABEL_4;
    }
LABEL_12:
    *(void *)(a1 + 40) = 0;
    unint64_t v10 = (char *)v3 - (char *)v2;
    if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
    {
      do
      {
        operator delete(*v2);
        v3 = *(void ***)(a1 + 16);
        uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
        *(void *)(a1 + 8) = v2;
        unint64_t v10 = (char *)v3 - (char *)v2;
      }
      while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
    }
  }
  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 85;
    goto LABEL_19;
  }
  if (v11 == 2)
  {
    uint64_t v12 = 170;
LABEL_19:
    *(void *)(a1 + 32) = v12;
  }
  if (v2 != v3)
  {
    do
    {
      int v13 = *v2++;
      operator delete(v13);
    }
    while (v2 != v3);
    uint64_t v15 = *(void *)(a1 + 8);
    uint64_t v14 = *(void *)(a1 + 16);
    if (v14 != v15) {
      *(void *)(a1 + 16) = v14 + ((v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_19E28750C(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = result;
    if (a4 >= 0xAAAAAAAAAAAAAABLL) {
      sub_19E13D694();
    }
    result = operator new(24 * a4);
    long long v8 = result;
    void *v5 = result;
    v5[1] = result;
    v5[2] = &result[3 * a4];
    if (a2 != a3)
    {
      unint64_t v9 = 0;
      do
      {
        unint64_t v10 = &v8[v9 / 8];
        uint64_t v11 = a2 + v9;
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          result = sub_19E13C2D0(&v8[v9 / 8], *(void **)v11, *(void *)(v11 + 8));
        }
        else
        {
          *(_OWORD *)unint64_t v10 = *(_OWORD *)v11;
          v10[2] = *(void *)(v11 + 16);
        }
        v9 += 24;
      }
      while (a2 + v9 != a3);
      long long v8 = (void *)((char *)v8 + v9);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_19E2875F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_19E287648(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_19E287648(a1, *(void *)a2);
    sub_19E287648(a1, *((void *)a2 + 1));
    unint64_t v4 = (void *)*((void *)a2 + 12);
    if (v4)
    {
      *((void *)a2 + 13) = v4;
      operator delete(v4);
    }
    if (a2[55] < 0)
    {
      operator delete(*((void **)a2 + 4));
      uint64_t v5 = a2;
    }
    else
    {
      uint64_t v5 = a2;
    }
    operator delete(v5);
  }
}

char *sub_19E2876DC(void **a1, const char *a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_19E13D694();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      sub_19E13C418();
    }
    unint64_t v7 = (char *)operator new(24 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  long long v8 = &v7[24 * v3];
  stat v21 = v8;
  uint64_t v22 = v8;
  int v23 = &v7[24 * v6];
  size_t v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_19E13C370();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v15 = v9 | 7;
    }
    uint64_t v16 = v15 + 1;
    uint64_t v17 = (char *)operator new(v15 + 1);
    *((void *)v8 + 1) = v10;
    *((void *)v8 + 2) = v16 | 0x8000000000000000;
    *(void *)long long v8 = v17;
    long long v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *long long v8 = 0;
      uint64_t v11 = v8;
      uint64_t v12 = v8 + 24;
      int v13 = (char *)*a1;
      uint64_t v14 = (char *)a1[1];
      if (v14 == *a1) {
        goto LABEL_23;
      }
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  uint64_t v11 = v21;
  uint64_t v12 = v22 + 24;
  int v13 = (char *)*a1;
  uint64_t v14 = (char *)a1[1];
  if (v14 == *a1)
  {
LABEL_23:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_28;
  }
  do
  {
LABEL_20:
    long long v18 = *(_OWORD *)(v14 - 24);
    *((void *)v11 - 1) = *((void *)v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *((void *)v14 - 2) = 0;
    *((void *)v14 - 1) = 0;
    *((void *)v14 - 3) = 0;
    v14 -= 24;
  }
  while (v14 != v13);
  int v19 = (char *)*a1;
  uint64_t v14 = (char *)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  if (v14 != v19)
  {
    do
    {
      if (*(v14 - 1) < 0) {
        operator delete(*((void **)v14 - 3));
      }
      v14 -= 24;
    }
    while (v14 != v19);
    uint64_t v14 = v19;
  }
LABEL_28:
  if (v14) {
    operator delete(v14);
  }
  return v12;
}

void sub_19E2878F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E13D884((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_19E28790C(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  unint64_t v7 = a1 + 1;
  unint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *((char *)a2 + 23);
    if (v8 >= 0) {
      size_t v9 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v9 = (size_t)a2[1];
    }
    if (v8 >= 0) {
      size_t v10 = a2;
    }
    else {
      size_t v10 = *a2;
    }
    while (1)
    {
      while (1)
      {
        uint64_t v11 = (uint64_t **)v6;
        uint64_t v14 = (const void *)v6[4];
        uint64_t v12 = v6 + 4;
        int v13 = v14;
        int v15 = *((char *)v12 + 23);
        if (v15 >= 0) {
          size_t v16 = *((unsigned __int8 *)v12 + 23);
        }
        else {
          size_t v16 = v12[1];
        }
        if (v15 >= 0) {
          uint64_t v17 = v12;
        }
        else {
          uint64_t v17 = v13;
        }
        if (v16 >= v9) {
          size_t v18 = v9;
        }
        else {
          size_t v18 = v16;
        }
        int v19 = memcmp(v10, v17, v18);
        BOOL v20 = v9 < v16;
        if (v19) {
          BOOL v20 = v19 < 0;
        }
        if (!v20) {
          break;
        }
        unint64_t v6 = *v11;
        unint64_t v7 = v11;
        if (!*v11) {
          goto LABEL_27;
        }
      }
      int v21 = memcmp(v17, v10, v18);
      BOOL v22 = v16 < v9;
      if (v21) {
        BOOL v22 = v21 < 0;
      }
      if (!v22) {
        return v11;
      }
      unint64_t v6 = v11[1];
      if (!v6)
      {
        unint64_t v7 = v11 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    uint64_t v11 = a1 + 1;
LABEL_27:
    int v23 = (char *)operator new(0x40uLL);
    uint64_t v24 = v23 + 32;
    uint64_t v25 = *a4;
    if (*((char *)*a4 + 23) < 0)
    {
      sub_19E13C2D0(v24, *(void **)v25, *((void *)v25 + 1));
    }
    else
    {
      long long v26 = *v25;
      *((void *)v23 + 6) = *((void *)v25 + 2);
      *(_OWORD *)uint64_t v24 = v26;
    }
    *((_WORD *)v23 + 28) = 0;
    *(void *)int v23 = 0;
    *((void *)v23 + 1) = 0;
    *((void *)v23 + 2) = v11;
    char *v7 = (uint64_t *)v23;
    int v27 = (uint64_t *)**a1;
    std::string v28 = (uint64_t *)v23;
    if (v27)
    {
      *a1 = v27;
      std::string v28 = *v7;
    }
    sub_19E13C8A0(a1[1], v28);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return (uint64_t **)v23;
}

void sub_19E287A98(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_19E287AAC(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  unint64_t v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = sub_19E13CF50((uint64_t)v47, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    uint64_t v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      int v15 = *v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          unint64_t v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v23 = v15[1];
            if (v23 == v11)
            {
              uint64_t v24 = *((unsigned __int8 *)v15 + 39);
              if ((v24 & 0x80u) == 0) {
                uint64_t v25 = *((unsigned __int8 *)v15 + 39);
              }
              else {
                uint64_t v25 = v15[3];
              }
              if (v25 == v17)
              {
                long long v26 = (const void **)(v15 + 2);
                if ((v24 & 0x80) != 0)
                {
                  if (!memcmp(*v26, v6, v15[3])) {
                    return v15;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v15 + 39)) {
                    return v15;
                  }
                  for (uint64_t i = v6; *(unsigned __int8 *)v26 == *i; ++i)
                  {
                    long long v26 = (const void **)((char *)v26 + 1);
                    if (!--v24) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v23 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            int v15 = (uint64_t *)*v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = v15[1];
          if (v18 == v11)
          {
            uint64_t v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = *((unsigned __int8 *)v15 + 39);
            }
            else {
              uint64_t v20 = v15[3];
            }
            if (v20 == v17)
            {
              int v21 = (const void **)(v15 + 2);
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*v21, v6, v15[3])) {
                  return v15;
                }
              }
              else
              {
                if (!*((unsigned char *)v15 + 39)) {
                  return v15;
                }
                for (j = v6; *(unsigned __int8 *)v21 == *j; ++j)
                {
                  int v21 = (const void **)((char *)v21 + 1);
                  if (!--v19) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          int v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  std::string v28 = (char *)operator new(0x30uLL);
  v47[0] = v28;
  v47[1] = a1 + 16;
  char v48 = 0;
  *(void *)std::string v28 = 0;
  *((void *)v28 + 1) = v11;
  BOOL v29 = v28 + 16;
  uint64_t v30 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_19E13C2D0(v29, *(void **)v30, *((void *)v30 + 1));
  }
  else
  {
    long long v31 = *v30;
    *((void *)v28 + 4) = *((void *)v30 + 2);
    *(_OWORD *)BOOL v29 = v31;
  }
  *((_DWORD *)v28 + 10) = 0;
  char v48 = 1;
  float v32 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v33 = *(float *)(a1 + 32);
  if (!v12 || (float)(v33 * (float)v12) < v32)
  {
    BOOL v36 = 1;
    if (v12 >= 3) {
      BOOL v36 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v37 = v36 | (2 * v12);
    unint64_t v38 = vcvtps_u32_f32(v32 / v33);
    if (v37 <= v38) {
      size_t prime = v38;
    }
    else {
      size_t prime = v37;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v40 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v40) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v40)
    {
      unint64_t v41 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v40 < 3uLL || (uint8x8_t v42 = (uint8x8_t)vcnt_s8(v40), v42.i16[0] = vaddlv_u8(v42), v42.u32[0] > 1uLL))
      {
        unint64_t v41 = std::__next_prime(v41);
      }
      else
      {
        uint64_t v43 = 1 << -(char)__clz(v41 - 1);
        if (v41 >= 2) {
          unint64_t v41 = v43;
        }
      }
      if (prime <= v41) {
        size_t prime = v41;
      }
      if (prime < *(void *)&v40) {
LABEL_68:
      }
        sub_19E13D39C(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v44 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        uint64_t v34 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        uint64_t v35 = (void *)v47[0];
        if (v34) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v4 = v11;
        uint64_t v34 = *(void **)(*(void *)a1 + 8 * v11);
        uint64_t v35 = (void *)v47[0];
        if (v34) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v4 = v44 & v11;
      uint64_t v34 = *(void **)(*(void *)a1 + 8 * (v44 & v11));
      uint64_t v35 = (void *)v47[0];
      if (v34) {
        goto LABEL_57;
      }
    }
LABEL_81:
    void *v35 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v47[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v47[0])
    {
      unint64_t v45 = *(void *)(*(void *)v47[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v45 >= v12) {
          v45 %= v12;
        }
      }
      else
      {
        v45 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v45) = v47[0];
    }
    goto LABEL_92;
  }
  uint64_t v34 = *(void **)(*(void *)a1 + 8 * v4);
  uint64_t v35 = (void *)v47[0];
  if (!v34) {
    goto LABEL_81;
  }
LABEL_57:
  void *v35 = *v34;
  *uint64_t v34 = v47[0];
LABEL_92:
  int v15 = (uint64_t *)v47[0];
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_19E287EFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E140840((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19E287F10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E140840((uint64_t *)va);
  _Unwind_Resume(a1);
}

char *sub_19E287F28(char **a1, uint64_t a2)
{
  uint64_t v3 = a1[1] - *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (v3 >> 3) + 1;
  if (v4 > 0xAAAAAAAAAAAAAAALL) {
    sub_19E13D694();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555) {
    unint64_t v5 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v5 = v4;
  }
  if (v5 > 0xAAAAAAAAAAAAAAALL) {
    sub_19E13C418();
  }
  uint64_t v7 = 24 * v5;
  unint64_t v8 = (char *)operator new(24 * v5);
  unint64_t v9 = &v8[8 * (v3 >> 3)];
  unint64_t v10 = &v8[v7];
  *((void *)v9 + 2) = 0;
  *(_OWORD *)unint64_t v9 = *(_OWORD *)a2;
  *(void *)&v8[v3 + 16] = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  unint64_t v11 = v9 + 24;
  uint8x8_t v13 = *a1;
  unint64_t v12 = a1[1];
  if (v12 == *a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
    if (!v12) {
      return v11;
    }
    goto LABEL_17;
  }
  do
  {
    long long v14 = *(_OWORD *)(v12 - 24);
    v12 -= 24;
    *(_OWORD *)(v9 - 24) = v14;
    v9 -= 24;
    *((void *)v9 + 2) = *((void *)v12 + 2);
    *(void *)unint64_t v12 = 0;
    *((void *)v12 + 1) = 0;
    *((void *)v12 + 2) = 0;
  }
  while (v12 != v13);
  int v15 = *a1;
  unint64_t v12 = a1[1];
  *a1 = v9;
  a1[1] = v11;
  a1[2] = v10;
  if (v12 != v15)
  {
    char v16 = v12;
    do
    {
      unint64_t v18 = (void *)*((void *)v16 - 3);
      v16 -= 24;
      uint64_t v17 = v18;
      if (v18)
      {
        *((void *)v12 - 2) = v17;
        operator delete(v17);
      }
      unint64_t v12 = v16;
    }
    while (v16 != v15);
    unint64_t v12 = v15;
  }
  if (v12) {
LABEL_17:
  }
    operator delete(v12);
  return v11;
}

char *sub_19E288094(char **a1, uint64_t a2)
{
  unint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = v3 - *a1;
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 3) + 1;
  if (v6 > 0xAAAAAAAAAAAAAAALL) {
    sub_19E13D694();
  }
  if (0x5555555555555556 * ((a1[2] - v4) >> 3) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - v4) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3) >= 0x555555555555555) {
    unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL) {
      sub_19E13C418();
    }
    unint64_t v9 = (char *)operator new(24 * v8);
  }
  else
  {
    unint64_t v9 = 0;
  }
  unint64_t v10 = &v9[8 * (v5 >> 3)];
  unint64_t v11 = &v9[24 * v8];
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *(void *)unint64_t v10 = 0;
  unint64_t v12 = *(const void **)a2;
  int64_t v13 = *(void *)(a2 + 8) - *(void *)a2;
  if (v13)
  {
    long long v14 = &v9[v5];
    if (v13 < 0) {
      sub_19E13D694();
    }
    int v15 = (char *)operator new(v13);
    *(void *)unint64_t v10 = v15;
    char v16 = &v15[4 * (v13 >> 2)];
    *((void *)v14 + 1) = v15;
    *((void *)v14 + 2) = v16;
    memcpy(v15, v12, v13);
    *((void *)v14 + 1) = v16;
  }
  uint64_t v17 = v10 + 24;
  uint64_t v25 = v10 + 24;
  if (v3 == v4)
  {
    *a1 = v10;
    a1[1] = v17;
    a1[2] = v11;
  }
  else
  {
    do
    {
      unint64_t v18 = v10;
      *((void *)v10 - 2) = 0;
      *((void *)v10 - 1) = 0;
      long long v19 = *(_OWORD *)(v3 - 24);
      v3 -= 24;
      *(_OWORD *)(v10 - 24) = v19;
      v10 -= 24;
      *((void *)v18 - 1) = *((void *)v3 + 2);
      *(void *)uint64_t v3 = 0;
      *((void *)v3 + 1) = 0;
      *((void *)v3 + 2) = 0;
    }
    while (v3 != v4);
    uint64_t v20 = *a1;
    uint64_t v3 = a1[1];
    uint64_t v17 = v25;
    *a1 = v10;
    a1[1] = v25;
    a1[2] = v11;
    if (v3 != v20)
    {
      int v21 = v3;
      do
      {
        uint64_t v23 = (void *)*((void *)v21 - 3);
        v21 -= 24;
        BOOL v22 = v23;
        if (v23)
        {
          *((void *)v3 - 2) = v22;
          operator delete(v22);
        }
        uint64_t v3 = v21;
      }
      while (v21 != v20);
      uint64_t v3 = v20;
    }
  }
  if (v3) {
    operator delete(v3);
  }
  return v17;
}

void sub_19E288274(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v5 = *v2;
  if (*v2)
  {
    *(void *)(v3 + 8) = v5;
    operator delete(v5);
  }
  sub_19E148F40((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_19E288298(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v7 = a1 + 1;
  unint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *((char *)a2 + 23);
    if (v8 >= 0) {
      size_t v9 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v9 = (size_t)a2[1];
    }
    if (v8 >= 0) {
      unint64_t v10 = a2;
    }
    else {
      unint64_t v10 = *a2;
    }
    while (1)
    {
      while (1)
      {
        unint64_t v11 = (uint64_t **)v6;
        long long v14 = (const void *)v6[4];
        unint64_t v12 = v6 + 4;
        int64_t v13 = v14;
        int v15 = *((char *)v12 + 23);
        if (v15 >= 0) {
          size_t v16 = *((unsigned __int8 *)v12 + 23);
        }
        else {
          size_t v16 = v12[1];
        }
        if (v15 >= 0) {
          uint64_t v17 = v12;
        }
        else {
          uint64_t v17 = v13;
        }
        if (v16 >= v9) {
          size_t v18 = v9;
        }
        else {
          size_t v18 = v16;
        }
        int v19 = memcmp(v10, v17, v18);
        BOOL v20 = v9 < v16;
        if (v19) {
          BOOL v20 = v19 < 0;
        }
        if (!v20) {
          break;
        }
        unint64_t v6 = *v11;
        uint64_t v7 = v11;
        if (!*v11) {
          goto LABEL_27;
        }
      }
      int v21 = memcmp(v17, v10, v18);
      BOOL v22 = v16 < v9;
      if (v21) {
        BOOL v22 = v21 < 0;
      }
      if (!v22) {
        return v11;
      }
      unint64_t v6 = v11[1];
      if (!v6)
      {
        uint64_t v7 = v11 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    unint64_t v11 = a1 + 1;
LABEL_27:
    uint64_t v23 = (char *)operator new(0x78uLL);
    uint64_t v24 = v23 + 32;
    uint64_t v25 = *a4;
    if (*((char *)*a4 + 23) < 0)
    {
      sub_19E13C2D0(v24, *(void **)v25, *((void *)v25 + 1));
    }
    else
    {
      long long v26 = *v25;
      *((void *)v23 + 6) = *((void *)v25 + 2);
      *(_OWORD *)uint64_t v24 = v26;
    }
    *((void *)v23 + 14) = 0;
    *((_OWORD *)v23 + 5) = 0u;
    *((_OWORD *)v23 + 6) = 0u;
    *(_OWORD *)(v23 + 56) = xmmword_19E351E50;
    *((void *)v23 + 9) = 0xFFFFFFFF00000001;
    *(void *)uint64_t v23 = 0;
    *((void *)v23 + 1) = 0;
    *((void *)v23 + 2) = v11;
    char *v7 = (uint64_t *)v23;
    int v27 = (uint64_t *)**a1;
    std::string v28 = (uint64_t *)v23;
    if (v27)
    {
      *a1 = v27;
      std::string v28 = *v7;
    }
    sub_19E13C8A0(a1[1], v28);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return (uint64_t **)v23;
}

void sub_19E288444(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_19E288458(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v7 = a1 + 1;
  unint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *((char *)a2 + 23);
    if (v8 >= 0) {
      size_t v9 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v9 = (size_t)a2[1];
    }
    if (v8 >= 0) {
      unint64_t v10 = a2;
    }
    else {
      unint64_t v10 = *a2;
    }
    while (1)
    {
      while (1)
      {
        unint64_t v11 = (char *)v6;
        long long v14 = (const void *)v6[4];
        unint64_t v12 = v6 + 4;
        int64_t v13 = v14;
        int v15 = *((char *)v12 + 23);
        if (v15 >= 0) {
          size_t v16 = *((unsigned __int8 *)v12 + 23);
        }
        else {
          size_t v16 = v12[1];
        }
        if (v15 >= 0) {
          uint64_t v17 = v12;
        }
        else {
          uint64_t v17 = v13;
        }
        if (v16 >= v9) {
          size_t v18 = v9;
        }
        else {
          size_t v18 = v16;
        }
        int v19 = memcmp(v10, v17, v18);
        BOOL v20 = v9 < v16;
        if (v19) {
          BOOL v20 = v19 < 0;
        }
        if (!v20) {
          break;
        }
        unint64_t v6 = *(uint64_t **)v11;
        uint64_t v7 = (uint64_t **)v11;
        if (!*(void *)v11) {
          goto LABEL_27;
        }
      }
      int v21 = memcmp(v17, v10, v18);
      BOOL v22 = v16 < v9;
      if (v21) {
        BOOL v22 = v21 < 0;
      }
      if (!v22) {
        break;
      }
      unint64_t v6 = (uint64_t *)*((void *)v11 + 1);
      if (!v6)
      {
        uint64_t v7 = (uint64_t **)(v11 + 8);
        goto LABEL_27;
      }
    }
  }
  else
  {
    unint64_t v11 = (char *)(a1 + 1);
LABEL_27:
    uint64_t v23 = v11;
    unint64_t v11 = (char *)operator new(0x78uLL);
    uint64_t v24 = *a4;
    uint64_t v25 = *((void *)*a4 + 2);
    *((_OWORD *)v11 + 2) = **a4;
    *((void *)v11 + 6) = v25;
    void *v24 = 0;
    v24[1] = 0;
    v24[2] = 0;
    *((_OWORD *)v11 + 5) = 0u;
    *((_OWORD *)v11 + 6) = 0u;
    *((void *)v11 + 14) = 0;
    *(_OWORD *)(v11 + 56) = xmmword_19E351E50;
    *((void *)v11 + 9) = 0xFFFFFFFF00000001;
    *(void *)unint64_t v11 = 0;
    *((void *)v11 + 1) = 0;
    *((void *)v11 + 2) = v23;
    char *v7 = (uint64_t *)v11;
    long long v26 = (uint64_t *)**a1;
    int v27 = (uint64_t *)v11;
    if (v26)
    {
      *a1 = v26;
      int v27 = *v7;
    }
    sub_19E13C8A0(a1[1], v27);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v11;
}

uint64_t *sub_19E2885F4(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    size_t v9 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      unint64_t v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == v6)
            {
              if (*((_DWORD *)v10 + 4) == v6) {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            unint64_t v10 = (uint64_t *)*v10;
            if (!v10) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          unint64_t v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  long long v14 = operator new(0x18uLL);
  void *v14 = 0;
  v14[1] = v6;
  *((_DWORD *)v14 + 4) = *a3;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    unint64_t v6 = v3;
  }
  else
  {
    BOOL v17 = 1;
    if (v7 >= 3) {
      BOOL v17 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v7);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t prime = v19;
    }
    else {
      size_t prime = v18;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *(void *)(a1 + 8);
    }
    if (prime > v7) {
      goto LABEL_36;
    }
    if (prime < v7)
    {
      unint64_t v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (uint8x8_t v22 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        unint64_t v21 = std::__next_prime(v21);
      }
      else
      {
        uint64_t v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2) {
          unint64_t v21 = v23;
        }
      }
      if (prime <= v21) {
        size_t prime = v21;
      }
      if (prime < v7) {
LABEL_36:
      }
        sub_19E13D39C(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        v6 %= v7;
      }
    }
    else
    {
      unint64_t v6 = (v7 - 1) & v6;
    }
  }
  uint64_t v24 = *(void *)a1;
  uint64_t v25 = *(void **)(*(void *)a1 + 8 * v6);
  if (v25)
  {
    void *v14 = *v25;
LABEL_59:
    void *v25 = v14;
    goto LABEL_60;
  }
  void *v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v24 + 8 * v6) = a1 + 16;
  if (*v14)
  {
    unint64_t v26 = *(void *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v26 >= v7) {
        v26 %= v7;
      }
    }
    else
    {
      v26 &= v7 - 1;
    }
    uint64_t v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_59;
  }
LABEL_60:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_19E2888E4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char **sub_19E2888F8(char **a1, unint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >> 59) {
      sub_19E13D694();
    }
    uint64_t v6 = 32 * a2;
    unint64_t v7 = (char *)operator new(32 * a2);
    *a1 = v7;
    a1[1] = v7;
    uint8x8_t v8 = &v7[32 * a2];
    a1[2] = v8;
    int v9 = *(char *)(a3 + 23);
    if (v9 < 0)
    {
      while (1)
      {
        v6 -= 32;
        if ((v9 & 0x80) != 0)
        {
          sub_19E13C2D0(v7, *(void **)a3, *(void *)(a3 + 8));
        }
        else
        {
          *(_OWORD *)unint64_t v7 = *(_OWORD *)a3;
          *((void *)v7 + 2) = *(void *)(a3 + 16);
        }
        *((_DWORD *)v7 + 6) = *(_DWORD *)(a3 + 24);
        if (!v6) {
          break;
        }
        v7 += 32;
        LOBYTE(v9) = *(unsigned char *)(a3 + 23);
      }
    }
    else
    {
      int v10 = *(_DWORD *)(a3 + 24);
      do
      {
        *(_OWORD *)unint64_t v7 = *(_OWORD *)a3;
        *((void *)v7 + 2) = *(void *)(a3 + 16);
        *((_DWORD *)v7 + 6) = v10;
        v7 += 32;
      }
      while (v7 != v8);
    }
    a1[1] = v8;
  }
  return a1;
}

void sub_19E2889F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_19E288A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_19E288A1C(&a9);
  _Unwind_Resume(a1);
}

void ***sub_19E288A1C(void ***result)
{
  v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    unint64_t v3 = (void **)**result;
    if (v3)
    {
      unint64_t v4 = (void **)v2[1];
      uint64_t v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 9) < 0) {
            operator delete(*(v4 - 4));
          }
          v4 -= 4;
        }
        while (v4 != v3);
        uint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void sub_19E288AB4(uint64_t a1, std::string *__str, std::string *a3, size_t __sz)
{
  uint64_t v6 = __str;
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(std::string **)a1;
  if (__sz > (v8 - *(void *)a1) >> 5)
  {
    if (v9)
    {
      uint64_t v10 = *(std::string **)(a1 + 8);
      unint64_t v11 = *(std::string **)a1;
      if (v10 != v9)
      {
        do
        {
          if (v10[-1].__r_.__value_.__s.__data_[15] < 0) {
            operator delete((void *)v10[-2].__r_.__value_.__r.__words[2]);
          }
          uint64_t v10 = (std::string *)((char *)v10 - 32);
        }
        while (v10 != v9);
        unint64_t v11 = *(std::string **)a1;
      }
      *(void *)(a1 + 8) = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (__sz >> 59) {
      goto LABEL_43;
    }
    uint64_t v20 = v8 >> 4;
    if (v8 >> 4 <= __sz) {
      uint64_t v20 = __sz;
    }
    BOOL v21 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0;
    unint64_t v22 = 0x7FFFFFFFFFFFFFFLL;
    if (!v21) {
      unint64_t v22 = v20;
    }
    if (v22 >> 59) {
LABEL_43:
    }
      sub_19E13D694();
    uint64_t v23 = 32 * v22;
    uint64_t v9 = (std::string *)operator new(32 * v22);
    *(void *)a1 = v9;
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = (char *)v9 + v23;
    if (v6 != a3)
    {
      unint64_t v24 = 0;
      do
      {
        uint64_t v25 = (char *)v9 + v24;
        unint64_t v26 = (char *)v6 + v24;
        if (SHIBYTE(v6->__r_.__value_.__r.__words[v24 / 8 + 2]) < 0)
        {
          sub_19E13C2D0((unsigned char *)v9 + v24, *(void **)v26, *((void *)v26 + 1));
        }
        else
        {
          *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
          *((void *)v25 + 2) = *((void *)v26 + 2);
        }
        *(_DWORD *)((char *)&v9[1].__r_.__value_.__l.__data_ + v24) = *(_DWORD *)((char *)&v6[1].__r_.__value_.__l.__data_
                                                                                + v24);
        v24 += 32;
      }
      while ((std::string *)((char *)v6 + v24) != a3);
      uint64_t v9 = (std::string *)((char *)v9 + v24);
    }
LABEL_40:
    *(void *)(a1 + 8) = v9;
    return;
  }
  uint64_t v12 = *(std::string **)(a1 + 8);
  unint64_t v13 = ((char *)v12 - (char *)v9) >> 5;
  if (v13 >= __sz)
  {
    if (__str != a3)
    {
      do
      {
        std::string::operator=(v9, v6);
        LODWORD(v9[1].__r_.__value_.__l.__data_) = v6[1].__r_.__value_.__l.__data_;
        uint64_t v9 = (std::string *)((char *)v9 + 32);
        uint64_t v6 = (std::string *)((char *)v6 + 32);
      }
      while (v6 != a3);
      uint64_t v12 = *(std::string **)(a1 + 8);
    }
    while (v12 != v9)
    {
      if (v12[-1].__r_.__value_.__s.__data_[15] < 0) {
        operator delete((void *)v12[-2].__r_.__value_.__r.__words[2]);
      }
      uint64_t v12 = (std::string *)((char *)v12 - 32);
    }
    goto LABEL_40;
  }
  long long v14 = (std::string *)((char *)__str + 32 * v13);
  if (v12 != v9)
  {
    do
    {
      std::string::operator=(v9, v6);
      LODWORD(v9[1].__r_.__value_.__l.__data_) = v6[1].__r_.__value_.__l.__data_;
      uint64_t v6 = (std::string *)((char *)v6 + 32);
      uint64_t v9 = (std::string *)((char *)v9 + 32);
    }
    while (v6 != v14);
    uint64_t v9 = *(std::string **)(a1 + 8);
  }
  float v15 = v9;
  if (v14 != a3)
  {
    unint64_t v16 = 0;
    do
    {
      unint64_t v18 = (char *)v9 + v16;
      unint64_t v19 = (char *)v14 + v16;
      if (SHIBYTE(v14->__r_.__value_.__r.__words[v16 / 8 + 2]) < 0)
      {
        sub_19E13C2D0((unsigned char *)v9 + v16, *(void **)v19, *((void *)v19 + 1));
      }
      else
      {
        long long v17 = *(_OWORD *)v19;
        *((void *)v18 + 2) = *((void *)v19 + 2);
        *(_OWORD *)unint64_t v18 = v17;
      }
      *(_DWORD *)((char *)&v9[1].__r_.__value_.__l.__data_ + v16) = *(_DWORD *)((char *)&v14[1].__r_.__value_.__l.__data_
                                                                              + v16);
      v16 += 32;
    }
    while ((std::string *)((char *)v14 + v16) != a3);
    float v15 = (std::string *)((char *)v9 + v16);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_19E288D98(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0ABE18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_19E288DB8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0ABE18;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_19E288DFC(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_19E288E28(Espresso::blob_rtti_root *a1, void *a2)
{
  sub_19E288E50(a1, a2);

  operator delete(v2);
}

void sub_19E288E50(Espresso::blob_rtti_root *this, void *a2)
{
  *(void *)this = &unk_1EF0A8830;
  if (*((unsigned char *)this + 24))
  {
    unint64_t v3 = (Espresso *)*((void *)this + 2);
    if (v3) {
      Espresso::kern_dealloc(v3, a2);
    }
  }
  *((void *)this + 2) = 0;
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    uint64_t v6 = this;
  }
  else
  {
    uint64_t v6 = this;
  }
  Espresso::blob_rtti_root::~blob_rtti_root(v6);
}

void sub_19E288F6C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0ABDE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_19E288F8C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0ABDE0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_19E288FD0(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_19E288FFC(Espresso::blob_rtti_root *a1, void *a2)
{
  sub_19E289024(a1, a2);

  operator delete(v2);
}

void sub_19E289024(Espresso::blob_rtti_root *this, void *a2)
{
  *(void *)this = &unk_1EF0A8810;
  if (*((unsigned char *)this + 24))
  {
    unint64_t v3 = (Espresso *)*((void *)this + 2);
    if (v3) {
      Espresso::kern_dealloc(v3, a2);
    }
  }
  *((void *)this + 2) = 0;
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    uint64_t v6 = this;
  }
  else
  {
    uint64_t v6 = this;
  }
  Espresso::blob_rtti_root::~blob_rtti_root(v6);
}

void sub_19E289140(void *a1@<X0>, uint64_t *a2@<X5>, uint64_t *a3@<X6>, uint64_t *a4@<X8>)
{
  int v24 = (***(uint64_t (****)(void))(a1[14] + 8))(*(void *)(a1[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  uint64_t v8 = (std::__shared_weak_count *)a4[1];
  uint64_t v22 = *a4;
  uint64_t v23 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  sub_19E28750C(&v19, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  __p = 0;
  long long v17 = 0;
  uint64_t v18 = 0;
  sub_19E28750C(&__p, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  uint64_t v9 = (void **)__p;
  if (__p)
  {
    uint64_t v10 = v17;
    unint64_t v11 = __p;
    if (v17 != __p)
    {
      do
      {
        if (*((char *)v10 - 1) < 0) {
          operator delete(*(v10 - 3));
        }
        v10 -= 3;
      }
      while (v10 != v9);
      unint64_t v11 = __p;
    }
    long long v17 = v9;
    operator delete(v11);
  }
  uint64_t v12 = (void **)v19;
  if (v19)
  {
    unint64_t v13 = v20;
    long long v14 = v19;
    if (v20 != v19)
    {
      do
      {
        if (*((char *)v13 - 1) < 0) {
          operator delete(*(v13 - 3));
        }
        v13 -= 3;
      }
      while (v13 != v12);
      long long v14 = v19;
    }
    uint64_t v20 = v12;
    operator delete(v14);
  }
  float v15 = v23;
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if (!*a1) {
      return;
    }
  }
  else if (!*a1)
  {
    return;
  }
  Espresso::sequential_builder::add_shape_from_kernel();
}

void sub_19E28937C(_Unwind_Exception *a1)
{
  sub_19E24AF60(v1);
  _Unwind_Resume(a1);
}

void sub_19E289390(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  unint64_t v4 = va_arg(va1, void *);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v8 = va_arg(va2, void *);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  sub_19E13A748((void **)va);
  sub_19E13A748((void **)va1);
  sub_19E24AF60((uint64_t)va2);
  sub_19E24AF60(v2);
  _Unwind_Resume(a1);
}

void sub_19E2893C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_19E24AF60((uint64_t)va);
  sub_19E24AF60(v8);
  _Unwind_Resume(a1);
}

void sub_19E2893E0(void *a1@<X0>, uint64_t *a2@<X5>, uint64_t *a3@<X6>, uint64_t *a4@<X8>)
{
  int v24 = (***(uint64_t (****)(void))(a1[14] + 8))(*(void *)(a1[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  uint64_t v8 = (std::__shared_weak_count *)a4[1];
  uint64_t v22 = *a4;
  uint64_t v23 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  sub_19E28750C(&v19, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  __p = 0;
  long long v17 = 0;
  uint64_t v18 = 0;
  sub_19E28750C(&__p, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  uint64_t v9 = (void **)__p;
  if (__p)
  {
    uint64_t v10 = v17;
    uint64_t v11 = __p;
    if (v17 != __p)
    {
      do
      {
        if (*((char *)v10 - 1) < 0) {
          operator delete(*(v10 - 3));
        }
        v10 -= 3;
      }
      while (v10 != v9);
      uint64_t v11 = __p;
    }
    long long v17 = v9;
    operator delete(v11);
  }
  uint64_t v12 = (void **)v19;
  if (v19)
  {
    unint64_t v13 = v20;
    long long v14 = v19;
    if (v20 != v19)
    {
      do
      {
        if (*((char *)v13 - 1) < 0) {
          operator delete(*(v13 - 3));
        }
        v13 -= 3;
      }
      while (v13 != v12);
      long long v14 = v19;
    }
    uint64_t v20 = v12;
    operator delete(v14);
  }
  float v15 = v23;
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if (!*a1) {
      return;
    }
  }
  else if (!*a1)
  {
    return;
  }
  Espresso::sequential_builder::add_shape_from_kernel();
}

void sub_19E28961C(_Unwind_Exception *a1)
{
  sub_19E24AF60(v1);
  _Unwind_Resume(a1);
}

void sub_19E289630(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  unint64_t v4 = va_arg(va1, void *);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v8 = va_arg(va2, void *);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  sub_19E13A748((void **)va);
  sub_19E13A748((void **)va1);
  sub_19E24AF60((uint64_t)va2);
  sub_19E24AF60(v2);
  _Unwind_Resume(a1);
}

void sub_19E289664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_19E24AF60((uint64_t)va);
  sub_19E24AF60(v8);
  _Unwind_Resume(a1);
}

void sub_19E289680(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0ABE50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_19E2896A0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0ABE50;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_19E2896E4(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_19E289710(Espresso::blob_rtti_root *a1, void *a2)
{
  sub_19E289738(a1, a2);

  operator delete(v2);
}

void sub_19E289738(Espresso::blob_rtti_root *this, void *a2)
{
  *(void *)this = &unk_1EF0A8850;
  if (*((unsigned char *)this + 32))
  {
    unint64_t v3 = (Espresso *)*((void *)this + 3);
    if (v3) {
      Espresso::kern_dealloc(v3, a2);
    }
  }
  *((void *)this + 3) = 0;
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    uint64_t v6 = this;
  }
  else
  {
    uint64_t v6 = this;
  }
  Espresso::blob_rtti_root::~blob_rtti_root(v6);
}

uint64_t sub_19E289854(uint64_t a1, uint64_t a2, int *a3, int *a4, int *a5, int *a6)
{
  int v7 = *a3;
  int v8 = *a4;
  uint64_t v9 = *a5;
  uint64_t v10 = *a6;
  *(void *)a2 = &unk_1EF0A8810;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 8) = v7;
  uint64_t result = Espresso::kern_alloc((Espresso *)(4 * v7 * (uint64_t)v8 * v9 * v10));
  *(void *)(a2 + 16) = result;
  *(unsigned char *)(a2 + 24) = 1;
  return result;
}

void sub_19E2898CC(_Unwind_Exception *a1)
{
  unint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 7);
  if (v3) {
    sub_19E32FA14(v3);
  }
  sub_19E32F998((uint64_t)v1);
  Espresso::blob_rtti_root::~blob_rtti_root(v1);
  _Unwind_Resume(a1);
}

void *sub_19E2898F4(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = result;
    if (a4 >= 0xAAAAAAAAAAAAAABLL) {
      sub_19E13D694();
    }
    uint64_t result = operator new(24 * a4);
    int v8 = result;
    void *v5 = result;
    v5[1] = result;
    v5[2] = &result[3 * a4];
    if (a2 != a3)
    {
      unint64_t v9 = 0;
      do
      {
        uint64_t v11 = &v8[v9 / 8];
        uint64_t v12 = (long long *)(a2 + v9);
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          uint64_t result = sub_19E13C2D0(&v8[v9 / 8], *(void **)v12, *((void *)v12 + 1));
        }
        else
        {
          long long v10 = *v12;
          v11[2] = *((void *)v12 + 2);
          *(_OWORD *)uint64_t v11 = v10;
        }
        v9 += 24;
      }
      while (a2 + v9 != a3);
      int v8 = (void *)((char *)v8 + v9);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_19E2899DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *sub_19E289A30(char **a1, uint64_t a2)
{
  unint64_t v4 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v5 = v3 - *a1;
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 3) + 1;
  if (v6 > 0xAAAAAAAAAAAAAAALL) {
    sub_19E13D694();
  }
  if (0x5555555555555556 * ((a1[2] - v4) >> 3) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - v4) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3) >= 0x555555555555555) {
    unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL) {
      sub_19E13C418();
    }
    unint64_t v9 = (char *)operator new(24 * v8);
  }
  else
  {
    unint64_t v9 = 0;
  }
  long long v10 = &v9[8 * (v5 >> 3)];
  uint64_t v11 = &v9[24 * v8];
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *(void *)long long v10 = 0;
  uint64_t v12 = *(const void **)a2;
  int64_t v13 = *(void *)(a2 + 8) - *(void *)a2;
  if (v13)
  {
    long long v14 = &v9[v5];
    if (v13 < 0) {
      sub_19E13D694();
    }
    float v15 = (char *)operator new(v13);
    *(void *)long long v10 = v15;
    unint64_t v16 = &v15[4 * (v13 >> 2)];
    *((void *)v14 + 1) = v15;
    *((void *)v14 + 2) = v16;
    memcpy(v15, v12, v13);
    *((void *)v14 + 1) = v16;
  }
  long long v17 = v10 + 24;
  uint64_t v25 = v10 + 24;
  if (v3 == v4)
  {
    *a1 = v10;
    a1[1] = v17;
    a1[2] = v11;
  }
  else
  {
    do
    {
      uint64_t v18 = v10;
      *((void *)v10 - 2) = 0;
      *((void *)v10 - 1) = 0;
      long long v19 = *(_OWORD *)(v3 - 24);
      v3 -= 24;
      *(_OWORD *)(v10 - 24) = v19;
      v10 -= 24;
      *((void *)v18 - 1) = *((void *)v3 + 2);
      *(void *)unint64_t v3 = 0;
      *((void *)v3 + 1) = 0;
      *((void *)v3 + 2) = 0;
    }
    while (v3 != v4);
    uint64_t v20 = *a1;
    unint64_t v3 = a1[1];
    long long v17 = v25;
    *a1 = v10;
    a1[1] = v25;
    a1[2] = v11;
    if (v3 != v20)
    {
      uint64_t v21 = v3;
      do
      {
        uint64_t v23 = (void *)*((void *)v21 - 3);
        v21 -= 24;
        uint64_t v22 = v23;
        if (v23)
        {
          *((void *)v3 - 2) = v22;
          operator delete(v22);
        }
        unint64_t v3 = v21;
      }
      while (v21 != v20);
      unint64_t v3 = v20;
    }
  }
  if (v3) {
    operator delete(v3);
  }
  return v17;
}

void sub_19E289C10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v5 = *v2;
  if (*v2)
  {
    *(void *)(v3 + 8) = v5;
    operator delete(v5);
  }
  sub_19E148F40((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E289C34(void *a1@<X0>, uint64_t *a2@<X5>, uint64_t *a3@<X6>, uint64_t *a4@<X8>)
{
  int v24 = (***(uint64_t (****)(void))(a1[14] + 8))(*(void *)(a1[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  unint64_t v8 = (std::__shared_weak_count *)a4[1];
  uint64_t v22 = *a4;
  uint64_t v23 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  sub_19E28750C(&v19, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  __p = 0;
  long long v17 = 0;
  uint64_t v18 = 0;
  sub_19E28750C(&__p, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  unint64_t v9 = (void **)__p;
  if (__p)
  {
    long long v10 = v17;
    uint64_t v11 = __p;
    if (v17 != __p)
    {
      do
      {
        if (*((char *)v10 - 1) < 0) {
          operator delete(*(v10 - 3));
        }
        v10 -= 3;
      }
      while (v10 != v9);
      uint64_t v11 = __p;
    }
    long long v17 = v9;
    operator delete(v11);
  }
  uint64_t v12 = (void **)v19;
  if (v19)
  {
    int64_t v13 = v20;
    long long v14 = v19;
    if (v20 != v19)
    {
      do
      {
        if (*((char *)v13 - 1) < 0) {
          operator delete(*(v13 - 3));
        }
        v13 -= 3;
      }
      while (v13 != v12);
      long long v14 = v19;
    }
    uint64_t v20 = v12;
    operator delete(v14);
  }
  float v15 = v23;
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if (!*a1) {
      return;
    }
  }
  else if (!*a1)
  {
    return;
  }
  Espresso::sequential_builder::add_shape_from_kernel();
}

void sub_19E289E70(_Unwind_Exception *a1)
{
  sub_19E24AF60(v1);
  _Unwind_Resume(a1);
}

void sub_19E289E84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  unint64_t v4 = va_arg(va1, void *);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  unint64_t v8 = va_arg(va2, void *);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  sub_19E13A748((void **)va);
  sub_19E13A748((void **)va1);
  sub_19E24AF60((uint64_t)va2);
  sub_19E24AF60(v2);
  _Unwind_Resume(a1);
}

void sub_19E289EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_19E24AF60((uint64_t)va);
  sub_19E24AF60(v8);
  _Unwind_Resume(a1);
}

uint64_t **sub_19E289ED4(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *((char *)a2 + 23);
    if (v8 >= 0) {
      size_t v9 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v9 = (size_t)a2[1];
    }
    if (v8 >= 0) {
      uint64_t v10 = a2;
    }
    else {
      uint64_t v10 = *a2;
    }
    while (1)
    {
      while (1)
      {
        uint64_t v11 = (uint64_t **)v6;
        long long v14 = (const void *)v6[4];
        uint64_t v12 = v6 + 4;
        int64_t v13 = v14;
        int v15 = *((char *)v12 + 23);
        if (v15 >= 0) {
          size_t v16 = *((unsigned __int8 *)v12 + 23);
        }
        else {
          size_t v16 = v12[1];
        }
        if (v15 >= 0) {
          long long v17 = v12;
        }
        else {
          long long v17 = v13;
        }
        if (v16 >= v9) {
          size_t v18 = v9;
        }
        else {
          size_t v18 = v16;
        }
        int v19 = memcmp(v10, v17, v18);
        BOOL v20 = v9 < v16;
        if (v19) {
          BOOL v20 = v19 < 0;
        }
        if (!v20) {
          break;
        }
        uint64_t v6 = *v11;
        uint64_t v7 = v11;
        if (!*v11) {
          goto LABEL_27;
        }
      }
      int v21 = memcmp(v17, v10, v18);
      BOOL v22 = v16 < v9;
      if (v21) {
        BOOL v22 = v21 < 0;
      }
      if (!v22) {
        break;
      }
      uint64_t v6 = v11[1];
      if (!v6)
      {
        uint64_t v7 = v11 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    uint64_t v11 = a1 + 1;
LABEL_27:
    uint64_t v23 = (uint64_t *)v11;
    uint64_t v11 = (uint64_t **)operator new(0x50uLL);
    int v24 = *a4;
    uint64_t v25 = (uint64_t *)*((void *)*a4 + 2);
    *((_OWORD *)v11 + 2) = **a4;
    v11[6] = v25;
    void *v24 = 0;
    v24[1] = 0;
    v24[2] = 0;
    v11[8] = 0;
    v11[9] = 0;
    v11[7] = 0;
    *uint64_t v11 = 0;
    v11[1] = 0;
    v11[2] = v23;
    char *v7 = (uint64_t *)v11;
    unint64_t v26 = (uint64_t *)**a1;
    int v27 = (uint64_t *)v11;
    if (v26)
    {
      *a1 = v26;
      int v27 = *v7;
    }
    sub_19E13C8A0(a1[1], v27);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v11;
}

void sub_19E28A120(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_19E28A140(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E28A1E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E28A2B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E28A2D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E28A2EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E28A414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19E28A468()
{
}

void sub_19E28A470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19E28A508(BOOL *a1)
{
  cf[1] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  sub_19E292030("Name", &v10);
  sub_19E292030("MinimumValue", &v11);
  sub_19E292030("MaximumValue", &v12);
  sub_19E292030("Dimension", &v13);
  sub_19E292030("Type", cf);
  v9[0] = (char *)&v10;
  v9[1] = (char *)5;
  uint64_t v2 = (char *)sub_19E293D98(v9);
  v9[2] = v2;
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  if (v13) {
    CFRelease(v13);
  }
  if (v12) {
    CFRelease(v12);
  }
  if (v11) {
    CFRelease(v11);
  }
  if (v10) {
    CFRelease(v10);
  }
  if (v2)
  {
    CFIndex Count = CFArrayGetCount((CFArrayRef)v2);
    CFIndex v4 = CFArrayGetCount((CFArrayRef)v2);
    if (Count)
    {
      CFIndex v5 = v4;
      for (unint64_t i = 0; i != Count; ++i)
      {
        if (v5 == i) {
          break;
        }
        sub_19E293F48((const __CFArray *)v2, i, &v10);
        if (!*a1)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
          __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        if (!sub_19E294058(*a1, (const UInt8 *)&v10))
        {
          uint64_t v7 = __cxa_allocate_exception(0x28uLL);
          sub_19E28A7EC((uint64_t)v7, "Missing required key: ", (uint64_t)&v10);
          __cxa_throw(v7, (struct type_info *)&unk_1EF0A45D8, (void (*)(void *))sub_19E28A884);
        }
        if (SHIBYTE(v12) < 0) {
          operator delete((void *)v10);
        }
      }
    }
    CFRelease(v2);
  }
}

void sub_19E28A730(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a2) {
    sub_19E13A9BC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E28A7EC(uint64_t a1, const char *a2, uint64_t a3)
{
  CFIndex v4 = (const char **)(a1 + 16);
  sub_19E2941D4("[InvalidArgument] ", a2, a3);
  *(void *)a1 = &unk_1EF0A8798;
  CFIndex v5 = (const char *)v4;
  if (*(char *)(a1 + 39) < 0) {
    CFIndex v5 = *v4;
  }
  std::logic_error::logic_error((std::logic_error *)a1, v5);
  *(void *)a1 = &unk_1EF0A8798;
  return a1;
}

void sub_19E28A868(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E28A884(uint64_t a1)
{
  if (*(char *)(MEMORY[0x19F3BB830]() + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_19E28A8CC(BOOL *a1, uint64_t *a2)
{
  sub_19E28AAA0(a2, (uint64_t)&v12);
  uint64_t v3 = (void **)v12;
  CFIndex v4 = v13;
  if (v12 == v13)
  {
    if (!v12) {
      return;
    }
    goto LABEL_13;
  }
  do
  {
    if (*((char *)v3 + 23) < 0)
    {
      sub_19E13C2D0(__p, *v3, (unint64_t)v3[1]);
    }
    else
    {
      long long v5 = *(_OWORD *)v3;
      CFTypeRef v11 = v3[2];
      *(_OWORD *)__p = v5;
    }
    if (!*a1)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    if (!sub_19E294058(*a1, (const UInt8 *)__p))
    {
      size_t v9 = __cxa_allocate_exception(0x28uLL);
      sub_19E28AC78((uint64_t)v9, "Missing parameter value for parameter with name=", (uint64_t)__p);
      __cxa_throw(v9, (struct type_info *)&unk_1EF0A45D8, (void (*)(void *))sub_19E28A884);
    }
    if (SHIBYTE(v11) < 0) {
      operator delete(__p[0]);
    }
    v3 += 3;
  }
  while (v3 != v4);
  uint64_t v3 = (void **)v12;
  if (v12)
  {
LABEL_13:
    uint64_t v6 = v13;
    uint64_t v7 = v3;
    if (v13 != v3)
    {
      do
      {
        if (*((char *)v6 - 1) < 0) {
          operator delete(*(v6 - 3));
        }
        v6 -= 3;
      }
      while (v6 != v3);
      uint64_t v7 = v12;
    }
    CFTypeRef v13 = v3;
    operator delete(v7);
  }
}

void sub_19E28AA4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_19E13A748((void **)va);
  _Unwind_Resume(a1);
}

void sub_19E28AA60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_19E13A748(&a15);
  _Unwind_Resume(a1);
}

void sub_19E28AAA0(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  sub_19E2929B8(a1, &v16);
  sub_19E292A80((uint64_t)a1, &__p);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  CFIndex v4 = (char *)v16;
  long long v5 = (char *)v17;
  if (v16 == v17)
  {
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = 0;
    do
    {
      while ((unint64_t)v6 >= *(void *)(a2 + 16))
      {
        uint64_t v6 = sub_19E13D6AC((char **)a2, (uint64_t)v4);
        *(void *)(a2 + 8) = v6;
        v4 += 24;
        if (v4 == v5) {
          goto LABEL_12;
        }
      }
      if (v4[23] < 0)
      {
        sub_19E13C2D0(v6, *(void **)v4, *((void *)v4 + 1));
      }
      else
      {
        long long v7 = *(_OWORD *)v4;
        *((void *)v6 + 2) = *((void *)v4 + 2);
        *(_OWORD *)uint64_t v6 = v7;
      }
      v6 += 24;
      *(void *)(a2 + 8) = v6;
      *(void *)(a2 + 8) = v6;
      v4 += 24;
    }
    while (v4 != v5);
  }
LABEL_12:
  sub_19E292B48((void **)a2, (uint64_t)v6, (std::string *)__p, v15, 0xAAAAAAAAAAAAAAABLL * (((char *)v15 - (unsigned char *)__p) >> 3));
  int v8 = (std::string *)__p;
  if (__p)
  {
    size_t v9 = v15;
    CFTypeRef v10 = __p;
    if (v15 != __p)
    {
      do
      {
        if (SHIBYTE(v9[-1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v9[-1].__r_.__value_.__l.__data_);
        }
        --v9;
      }
      while (v9 != v8);
      CFTypeRef v10 = __p;
    }
    int v15 = v8;
    operator delete(v10);
  }
  CFTypeRef v11 = (void **)v16;
  if (v16)
  {
    CFTypeRef v12 = v17;
    CFTypeRef v13 = v16;
    if (v17 != v16)
    {
      do
      {
        if (*((char *)v12 - 1) < 0) {
          operator delete(*(v12 - 3));
        }
        v12 -= 3;
      }
      while (v12 != v11);
      CFTypeRef v13 = v16;
    }
    long long v17 = v11;
    operator delete(v13);
  }
}

void sub_19E28AC30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12)
{
  sub_19E13A748(v12);
  sub_19E13A748(&a9);
  sub_19E13A748(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_19E28AC78(uint64_t a1, const char *a2, uint64_t a3)
{
  CFIndex v4 = (const char **)(a1 + 16);
  sub_19E2941D4("[InvalidArgument] ", a2, a3);
  *(void *)a1 = &unk_1EF0A8798;
  long long v5 = (const char *)v4;
  if (*(char *)(a1 + 39) < 0) {
    long long v5 = *v4;
  }
  std::logic_error::logic_error((std::logic_error *)a1, v5);
  *(void *)a1 = &unk_1EF0A8798;
  return a1;
}

void sub_19E28ACF4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E28AD10(CFTypeRef *a1@<X0>, uint64_t *a2@<X1>, uint64_t **a3@<X8>)
{
  CFTypeRef v6 = *a1;
  if (*a1) {
    CFRetain(*a1);
  }
  CFTypeRef v33 = v6;
  std::string v28 = 0;
  uint64_t v29 = 0;
  int v27 = 0;
  sub_19E246830(&v27, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 4));
  uint64_t v7 = a2[3];
  uint64_t v8 = a2[4];
  __p = 0;
  long long v31 = 0;
  uint64_t v32 = 0;
  sub_19E246A1C(&__p, v7, v8, 0xCCCCCCCCCCCCCCCDLL * ((v8 - v7) >> 3));
  sub_19E28A8CC((BOOL *)&v33, (uint64_t *)&v27);
  size_t v9 = (void **)__p;
  if (__p)
  {
    CFTypeRef v10 = v31;
    CFTypeRef v11 = __p;
    if (v31 != __p)
    {
      do
      {
        if (*((char *)v10 - 17) < 0) {
          operator delete(*(v10 - 5));
        }
        v10 -= 5;
      }
      while (v10 != v9);
      CFTypeRef v11 = __p;
    }
    long long v31 = v9;
    operator delete(v11);
  }
  CFTypeRef v12 = (void **)v27;
  if (v27)
  {
    CFTypeRef v13 = v28;
    long long v14 = v27;
    if (v28 != v27)
    {
      do
      {
        if (*((char *)v13 - 25) < 0) {
          operator delete(*(v13 - 6));
        }
        v13 -= 6;
      }
      while (v13 != v12);
      long long v14 = v27;
    }
    std::string v28 = v12;
    operator delete(v14);
  }
  if (v6) {
    CFRelease(v6);
  }
  sub_19E28AFBC((const __CFDictionary **)a1, (long long **)a2, (uint64_t)&v25);
  sub_19E28B37C((const __CFDictionary **)a1, (long long **)a2 + 3, (uint64_t)&v23);
  sub_19E246C08(a3, (uint64_t *)&v25, (uint64_t *)&v23);
  int v15 = (char *)v23;
  if (v23)
  {
    size_t v16 = v24;
    long long v17 = v23;
    if (v24 != v23)
    {
      do
      {
        size_t v18 = (void *)*((void *)v16 - 4);
        if (v18)
        {
          *((void *)v16 - 3) = v18;
          operator delete(v18);
        }
        if (*(v16 - 33) < 0) {
          operator delete(*((void **)v16 - 7));
        }
        v16 -= 56;
      }
      while (v16 != v15);
      long long v17 = v23;
    }
    int v24 = v15;
    operator delete(v17);
  }
  int v19 = (char *)v25;
  if (v25)
  {
    BOOL v20 = v26;
    int v21 = v25;
    if (v26 != v25)
    {
      do
      {
        BOOL v22 = (void *)*((void *)v20 - 4);
        if (v22)
        {
          *((void *)v20 - 3) = v22;
          operator delete(v22);
        }
        if (*(v20 - 33) < 0) {
          operator delete(*((void **)v20 - 7));
        }
        v20 -= 56;
      }
      while (v20 != v19);
      int v21 = v25;
    }
    unint64_t v26 = v19;
    operator delete(v21);
  }
}

void sub_19E28AF54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_19E246278((void **)va);
  _Unwind_Resume(a1);
}

void sub_19E28AF68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_19E245FE8((void **)va);
  sub_19E1551E8((const void **)(v8 - 72));
  _Unwind_Resume(a1);
}

void sub_19E28AF84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16)
  {
    sub_19E32FAD8((uint64_t)&a16, a16);
    sub_19E1551E8((const void **)(v16 - 72));
    _Unwind_Resume(a1);
  }
  sub_19E1551E8((const void **)(v16 - 72));
  _Unwind_Resume(a1);
}

void sub_19E28AFBC(const __CFDictionary **a1@<X0>, long long **a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v3 = *a2;
  CFIndex v4 = a2[1];
  if (*a2 != v4)
  {
    do
    {
      if (*((char *)v3 + 23) < 0)
      {
        sub_19E13C2D0(__dst, *(void **)v3, *((void *)v3 + 1));
      }
      else
      {
        long long v7 = *v3;
        uint64_t v37 = *((void *)v3 + 2);
        *(_OWORD *)long long __dst = v7;
      }
      long long v8 = *(long long *)((char *)v3 + 24);
      int v39 = *((_DWORD *)v3 + 10);
      long long v38 = v8;
      if (v39 < 2)
      {
        if (!*a1)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
          __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        double v20 = sub_19E294B50(*a1, (const UInt8 *)__dst);
        __p = 0;
        long long v31 = 0;
        uint64_t v32 = 0;
        int v33 = 1;
        sub_19E2482DC((uint64_t)&__p, 1uLL);
        *(double *)__p = v20;
        unint64_t v21 = *(void *)(a3 + 8);
        if (v21 >= *(void *)(a3 + 16))
        {
          BOOL v22 = sub_19E2478FC((void **)a3, (long long *)__dst, (uint64_t)&__p);
        }
        else
        {
          sub_19E247B0C(a3 + 16, *(void **)(a3 + 8), (long long *)__dst, (uint64_t)&__p);
          BOOL v22 = (void *)(v21 + 56);
          *(void *)(a3 + 8) = v21 + 56;
        }
        *(void *)(a3 + 8) = v22;
        uint64_t v23 = __p;
        if (!__p) {
          goto LABEL_35;
        }
        long long v31 = __p;
        goto LABEL_34;
      }
      if (!*a1)
      {
        std::string v28 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v28, "Could not construct");
        __cxa_throw(v28, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      sub_19E294384(*a1, (const UInt8 *)__dst, &v34);
      __p = 0;
      long long v31 = 0;
      uint64_t v32 = 0;
      CFTypeRef v10 = (char *)v34;
      size_t v9 = v35;
      int v33 = (unint64_t)(v35 - (unsigned char *)v34) >> 3;
      if (v33)
      {
        sub_19E2482DC((uint64_t)&__p, (int)((v35 - (unsigned char *)v34) >> 3));
        CFTypeRef v10 = (char *)v34;
        size_t v9 = v35;
      }
      if (v10 != v9)
      {
        uint64_t v11 = 0;
        CFTypeRef v12 = (char *)__p;
        unint64_t v13 = v9 - v10 - 8;
        if (v13 < 0x18 || (unint64_t)((unsigned char *)__p - v10) < 0x20)
        {
          int v15 = v10;
LABEL_25:
          int v24 = &v12[8 * v11];
          do
          {
            uint64_t v25 = *(void *)v15;
            v15 += 8;
            *(void *)int v24 = v25;
            v24 += 8;
          }
          while (v15 != v9);
          goto LABEL_27;
        }
        uint64_t v14 = (v13 >> 3) + 1;
        uint64_t v11 = v14 & 0x3FFFFFFFFFFFFFFCLL;
        int v15 = &v10[8 * (v14 & 0x3FFFFFFFFFFFFFFCLL)];
        uint64_t v16 = (char *)__p + 16;
        long long v17 = (long long *)(v10 + 16);
        uint64_t v18 = v14 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v19 = *v17;
          *(v16 - 1) = *(v17 - 1);
          *uint64_t v16 = v19;
          v16 += 2;
          v17 += 2;
          v18 -= 4;
        }
        while (v18);
        if (v14 != v11) {
          goto LABEL_25;
        }
      }
LABEL_27:
      unint64_t v26 = *(void *)(a3 + 8);
      if (v26 >= *(void *)(a3 + 16))
      {
        int v27 = sub_19E2478FC((void **)a3, (long long *)__dst, (uint64_t)&__p);
      }
      else
      {
        sub_19E247B0C(a3 + 16, *(void **)(a3 + 8), (long long *)__dst, (uint64_t)&__p);
        int v27 = (void *)(v26 + 56);
        *(void *)(a3 + 8) = v26 + 56;
      }
      *(void *)(a3 + 8) = v27;
      if (__p)
      {
        long long v31 = __p;
        operator delete(__p);
      }
      uint64_t v23 = v34;
      if (!v34) {
        goto LABEL_35;
      }
      uint64_t v35 = (char *)v34;
LABEL_34:
      operator delete(v23);
LABEL_35:
      if (SHIBYTE(v37) < 0) {
        operator delete(__dst[0]);
      }
      v3 += 3;
    }
    while (v3 != v4);
  }
}

void sub_19E28B2BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  sub_19E246278(v22);
  _Unwind_Resume(a1);
}

void sub_19E28B37C(const __CFDictionary **a1@<X0>, long long **a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v3 = *a2;
  CFIndex v4 = a2[1];
  if (*a2 != v4)
  {
    do
    {
      if (*((char *)v3 + 23) < 0)
      {
        sub_19E13C2D0(__dst, *(void **)v3, *((void *)v3 + 1));
      }
      else
      {
        long long v7 = *v3;
        uint64_t v37 = *((void *)v3 + 2);
        *(_OWORD *)long long __dst = v7;
      }
      uint64_t v8 = *((void *)v3 + 3);
      int v39 = *((_DWORD *)v3 + 8);
      uint64_t v38 = v8;
      if (v39 < 2)
      {
        if (!*a1)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
          __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        int v20 = sub_19E294F4C(*a1, (const UInt8 *)__dst);
        __p = 0;
        long long v31 = 0;
        uint64_t v32 = 0;
        int v33 = 1;
        sub_19E1C5E88((uint64_t)&__p, 1uLL);
        *(_DWORD *)__p = v20;
        unint64_t v21 = *(void *)(a3 + 8);
        if (v21 >= *(void *)(a3 + 16))
        {
          BOOL v22 = sub_19E247E28((void **)a3, (long long *)__dst, (uint64_t)&__p);
        }
        else
        {
          sub_19E248038(a3 + 16, *(void **)(a3 + 8), (long long *)__dst, (uint64_t)&__p);
          BOOL v22 = (void *)(v21 + 56);
          *(void *)(a3 + 8) = v21 + 56;
        }
        *(void *)(a3 + 8) = v22;
        uint64_t v23 = __p;
        if (!__p) {
          goto LABEL_35;
        }
        long long v31 = __p;
        goto LABEL_34;
      }
      if (!*a1)
      {
        std::string v28 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v28, "Could not construct");
        __cxa_throw(v28, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      sub_19E294BF8(*a1, (const UInt8 *)__dst, &v34);
      __p = 0;
      long long v31 = 0;
      uint64_t v32 = 0;
      CFTypeRef v10 = (char *)v34;
      size_t v9 = v35;
      int v33 = (unint64_t)(v35 - (unsigned char *)v34) >> 2;
      if (v33)
      {
        sub_19E1C5E88((uint64_t)&__p, (int)((v35 - (unsigned char *)v34) >> 2));
        CFTypeRef v10 = (char *)v34;
        size_t v9 = v35;
      }
      if (v10 != v9)
      {
        uint64_t v11 = 0;
        CFTypeRef v12 = (char *)__p;
        unint64_t v13 = v9 - v10 - 4;
        if (v13 < 0x1C || (unint64_t)((unsigned char *)__p - v10) < 0x20)
        {
          int v15 = v10;
LABEL_25:
          int v24 = &v12[4 * v11];
          do
          {
            int v25 = *(_DWORD *)v15;
            v15 += 4;
            *(_DWORD *)int v24 = v25;
            v24 += 4;
          }
          while (v15 != v9);
          goto LABEL_27;
        }
        uint64_t v14 = (v13 >> 2) + 1;
        uint64_t v11 = v14 & 0x7FFFFFFFFFFFFFF8;
        int v15 = &v10[4 * (v14 & 0x7FFFFFFFFFFFFFF8)];
        uint64_t v16 = (char *)__p + 16;
        long long v17 = (long long *)(v10 + 16);
        uint64_t v18 = v14 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v19 = *v17;
          *(v16 - 1) = *(v17 - 1);
          *uint64_t v16 = v19;
          v16 += 2;
          v17 += 2;
          v18 -= 8;
        }
        while (v18);
        if (v14 != v11) {
          goto LABEL_25;
        }
      }
LABEL_27:
      unint64_t v26 = *(void *)(a3 + 8);
      if (v26 >= *(void *)(a3 + 16))
      {
        int v27 = sub_19E247E28((void **)a3, (long long *)__dst, (uint64_t)&__p);
      }
      else
      {
        sub_19E248038(a3 + 16, *(void **)(a3 + 8), (long long *)__dst, (uint64_t)&__p);
        int v27 = (void *)(v26 + 56);
        *(void *)(a3 + 8) = v26 + 56;
      }
      *(void *)(a3 + 8) = v27;
      if (__p)
      {
        long long v31 = __p;
        operator delete(__p);
      }
      uint64_t v23 = v34;
      if (!v34) {
        goto LABEL_35;
      }
      uint64_t v35 = (char *)v34;
LABEL_34:
      operator delete(v23);
LABEL_35:
      if (SHIBYTE(v37) < 0) {
        operator delete(__dst[0]);
      }
      uint64_t v3 = (long long *)((char *)v3 + 40);
    }
    while (v3 != v4);
  }
}

void sub_19E28B674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  sub_19E246278(v22);
  _Unwind_Resume(a1);
}

void sub_19E28B734(uint64_t a1@<X0>, CFDictionaryRef *a2@<X8>)
{
  v29[0] = 0;
  v29[1] = 0;
  uint64_t v27 = 0;
  std::string v28 = v29;
  int v25 = &v26;
  unint64_t v26 = 0;
  CFIndex v4 = *(const void ***)(a1 + 48);
  long long v5 = (const void ***)(a1 + 56);
  if (v4 != (const void **)(a1 + 56))
  {
    do
    {
      sub_19E159B70((uint64_t **)&v25, (uint64_t *)&v26, v4 + 4, (uint64_t)(v4 + 4));
      CFTypeRef v6 = (const void **)v4[1];
      if (v6)
      {
        do
        {
          long long v7 = (const void ***)v6;
          CFTypeRef v6 = (const void **)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          long long v7 = (const void ***)v4[2];
          BOOL v8 = *v7 == v4;
          CFIndex v4 = (const void **)v7;
        }
        while (!v8);
      }
      CFIndex v4 = (const void **)v7;
    }
    while (v7 != v5);
    size_t v9 = (uint64_t *)v25;
    if (v25 != &v26)
    {
      do
      {
        sub_19E28BBBC((long long **)a1, (const std::string *)(v9 + 4), (uint64_t)&__p);
        sub_19E28BA8C((uint64_t *)&__p, (CFArrayRef *)&v24);
        uint64_t v30 = (long long *)(v9 + 4);
        CFTypeRef v10 = sub_19E26CE00((uint64_t **)&v28, (const void **)v9 + 4, (uint64_t)&unk_19E351150, &v30);
        CFArrayRef v11 = (const __CFArray *)v10[7];
        v10[7] = v24;
        int v24 = (uint64_t *)v11;
        if (v11) {
          CFRelease(v11);
        }
        if (__p)
        {
          uint64_t v23 = __p;
          operator delete(__p);
        }
        CFTypeRef v12 = (char *)v9[1];
        if (v12)
        {
          do
          {
            unint64_t v13 = (char **)v12;
            CFTypeRef v12 = *(char **)v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            unint64_t v13 = (char **)v9[2];
            BOOL v8 = *v13 == (char *)v9;
            size_t v9 = (uint64_t *)v13;
          }
          while (!v8);
        }
        size_t v9 = (uint64_t *)v13;
      }
      while (v13 != &v26);
    }
  }
  sub_19E15A064((uint64_t)&v25, v26);
  unint64_t v26 = 0;
  uint64_t v27 = 0;
  int v25 = &v26;
  uint64_t v14 = *(const void ***)(a1 + 72);
  if (v14 != (const void **)(a1 + 80))
  {
    do
    {
      sub_19E159B70((uint64_t **)&v25, (uint64_t *)&v26, v14 + 4, (uint64_t)(v14 + 4));
      int v15 = (const void **)v14[1];
      if (v15)
      {
        do
        {
          uint64_t v16 = (const void ***)v15;
          int v15 = (const void **)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          uint64_t v16 = (const void ***)v14[2];
          BOOL v8 = *v16 == v14;
          uint64_t v14 = (const void **)v16;
        }
        while (!v8);
      }
      uint64_t v14 = (const void **)v16;
    }
    while (v16 != (const void ***)(a1 + 80));
    long long v17 = (uint64_t *)v25;
    if (v25 != &v26)
    {
      do
      {
        sub_19E28BDD0(a1, (const std::string *)(v17 + 4), (uint64_t)&__p);
        sub_19E28BCA0((uint64_t *)&__p, (CFArrayRef *)&v24);
        uint64_t v30 = (long long *)(v17 + 4);
        uint64_t v18 = sub_19E26CE00((uint64_t **)&v28, (const void **)v17 + 4, (uint64_t)&unk_19E351150, &v30);
        CFArrayRef v19 = (const __CFArray *)v18[7];
        v18[7] = v24;
        int v24 = (uint64_t *)v19;
        if (v19) {
          CFRelease(v19);
        }
        if (__p)
        {
          uint64_t v23 = __p;
          operator delete(__p);
        }
        int v20 = (char *)v17[1];
        if (v20)
        {
          do
          {
            unint64_t v21 = (char **)v20;
            int v20 = *(char **)v20;
          }
          while (v20);
        }
        else
        {
          do
          {
            unint64_t v21 = (char **)v17[2];
            BOOL v8 = *v21 == (char *)v17;
            long long v17 = (uint64_t *)v21;
          }
          while (!v8);
        }
        long long v17 = (uint64_t *)v21;
      }
      while (v21 != &v26);
    }
  }
  sub_19E15A064((uint64_t)&v25, v26);
  *a2 = sub_19E29585C(&v28);
  sub_19E294FF0((uint64_t)&v28, v29[0]);
}

void sub_19E28BA0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, char *a19)
{
}

void sub_19E28BA2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, const void *a14, __int16 a15, char a16, char a17, char *a18, uint64_t a19, char a20,char *a21)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E15A064((uint64_t)&a15, a18);
  sub_19E294FF0((uint64_t)&a20, a21);
  _Unwind_Resume(a1);
}

void sub_19E28BA8C(uint64_t *a1@<X0>, CFArrayRef *a2@<X8>)
{
  uint64_t v3 = *((int *)a1 + 6);
  uint64_t v18 = 0;
  CFArrayRef v19 = 0;
  __p = 0;
  if (v3)
  {
    if ((v3 & 0x80000000) != 0) {
      sub_19E13D694();
    }
    long long v5 = operator new(8 * v3);
    __p = v5;
    CFArrayRef v19 = (char *)v5 + 8 * v3;
    bzero(v5, 8 * v3);
    unint64_t v6 = 0;
    uint64_t v18 = v19;
    uint64_t v7 = *a1;
    if (v3 < 4) {
      goto LABEL_8;
    }
    if ((unint64_t)v5 - v7 < 0x20) {
      goto LABEL_8;
    }
    unint64_t v6 = v3 & 0xFFFFFFFFFFFFFFFCLL;
    BOOL v8 = (long long *)(v7 + 16);
    size_t v9 = v5 + 1;
    unint64_t v10 = v3 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      long long v11 = *v8;
      *(v9 - 1) = *(v8 - 1);
      *size_t v9 = v11;
      v8 += 2;
      v9 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v6 != v3)
    {
LABEL_8:
      uint64_t v12 = v3 - v6;
      uint64_t v13 = 8 * v6;
      uint64_t v14 = (void *)v5 + v6;
      int v15 = (uint64_t *)(v7 + v13);
      do
      {
        uint64_t v16 = *v15++;
        *v14++ = v16;
        --v12;
      }
      while (v12);
    }
  }
  *a2 = sub_19E29508C((uint64_t **)&__p);
  if (__p)
  {
    uint64_t v18 = __p;
    operator delete(__p);
  }
}

void sub_19E28BB9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E28BBBC(long long **a1@<X0>, const std::string *a2@<X1>, uint64_t a3@<X8>)
{
  sub_19E2936A0(a1, a2, (uint64_t)&__p);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  CFIndex v4 = v10;
  int64_t v5 = v11 - v10;
  if (v11 != v10)
  {
    if (v5 < 0) {
      sub_19E13D694();
    }
    unint64_t v6 = (char *)operator new(v11 - v10);
    *(void *)a3 = v6;
    uint64_t v7 = &v6[8 * (v5 >> 3)];
    *(void *)(a3 + 16) = v7;
    memcpy(v6, v4, v5);
    *(void *)(a3 + 8) = v7;
  }
  *(_DWORD *)(a3 + 24) = v12;
  if (v4)
  {
    long long v11 = v4;
    operator delete(v4);
  }
  if (v9 < 0) {
    operator delete(__p);
  }
}

void sub_19E28BC7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CFIndex v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v4;
    operator delete(v4);
  }
  sub_19E293278((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E28BCA0(uint64_t *a1@<X0>, CFArrayRef *a2@<X8>)
{
  uint64_t v3 = *((int *)a1 + 6);
  uint64_t v18 = 0;
  CFArrayRef v19 = 0;
  __p = 0;
  if (v3)
  {
    if ((v3 & 0x80000000) != 0) {
      sub_19E13D694();
    }
    int64_t v5 = operator new(4 * v3);
    __p = v5;
    CFArrayRef v19 = (char *)v5 + 4 * v3;
    bzero(v5, 4 * v3);
    unint64_t v6 = 0;
    uint64_t v18 = v19;
    uint64_t v7 = *a1;
    if (v3 < 8) {
      goto LABEL_8;
    }
    if ((unint64_t)v5 - v7 < 0x20) {
      goto LABEL_8;
    }
    unint64_t v6 = v3 & 0xFFFFFFFFFFFFFFF8;
    BOOL v8 = (long long *)(v7 + 16);
    char v9 = v5 + 1;
    unint64_t v10 = v3 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      long long v11 = *v8;
      *(v9 - 1) = *(v8 - 1);
      *char v9 = v11;
      v8 += 2;
      v9 += 2;
      v10 -= 8;
    }
    while (v10);
    if (v6 != v3)
    {
LABEL_8:
      uint64_t v12 = v3 - v6;
      uint64_t v13 = 4 * v6;
      uint64_t v14 = (_DWORD *)v5 + v6;
      int v15 = (int *)(v7 + v13);
      do
      {
        int v16 = *v15++;
        *v14++ = v16;
        --v12;
      }
      while (v12);
    }
  }
  *a2 = sub_19E295474((int **)&__p);
  if (__p)
  {
    uint64_t v18 = __p;
    operator delete(__p);
  }
}

void sub_19E28BDB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E28BDD0(uint64_t a1@<X0>, const std::string *a2@<X1>, uint64_t a3@<X8>)
{
  sub_19E293A1C(a1, a2, (uint64_t)&__p);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  CFIndex v4 = v10;
  int64_t v5 = v11 - v10;
  if (v11 != v10)
  {
    if (v5 < 0) {
      sub_19E13D694();
    }
    unint64_t v6 = (char *)operator new(v11 - v10);
    *(void *)a3 = v6;
    uint64_t v7 = &v6[4 * (v5 >> 2)];
    *(void *)(a3 + 16) = v7;
    memcpy(v6, v4, v5);
    *(void *)(a3 + 8) = v7;
  }
  *(_DWORD *)(a3 + 24) = v12;
  if (v4)
  {
    long long v11 = v4;
    operator delete(v4);
  }
  if (v9 < 0) {
    operator delete(__p);
  }
}

void sub_19E28BE90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CFIndex v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v4;
    operator delete(v4);
  }
  sub_19E293278((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E28BEB4(const __CFDictionary **a1)
{
  if (!*a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_19E2929A8(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  sub_19E28C14C("MaxIterations", v17);
  uint64_t v2 = sub_19E29445C(*a1, (const UInt8 *)v17);
  if (!v2)
  {
    unsigned int v4 = 100;
    if (*a1) {
      goto LABEL_7;
    }
LABEL_18:
    unint64_t v10 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v10, "Could not construct");
    __cxa_throw(v10, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v3 = sub_19E15C808((uint64_t)v2);
  if ((v3 & 0xFF00000000) != 0) {
    unsigned int v4 = v3;
  }
  else {
    unsigned int v4 = 100;
  }
  if (!*a1) {
    goto LABEL_18;
  }
LABEL_7:
  sub_19E28C14C("Patience", v15);
  int64_t v5 = sub_19E29445C(*a1, (const UInt8 *)v15);
  uint64_t v6 = 0xA00000000;
  if (v5)
  {
    uint64_t v7 = sub_19E15C808((uint64_t)v5);
    if ((v7 & 0xFF00000000) != 0) {
      uint64_t v6 = v7 << 32;
    }
  }
  if (!*a1)
  {
    int v12 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v12, "Could not construct");
    __cxa_throw(v12, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  sub_19E28C14C("MinDelta", __p);
  CFNumberRef v8 = (const __CFNumber *)sub_19E29445C(*a1, (const UInt8 *)__p);
  if (v8) {
    sub_19E294824(v8);
  }
  if ((v14 & 0x80000000) == 0)
  {
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_15;
    }
LABEL_20:
    operator delete(v15[0]);
    if ((v18 & 0x80000000) == 0) {
      return v6 | v4;
    }
LABEL_21:
    operator delete(v17[0]);
    return v6 | v4;
  }
  operator delete(__p[0]);
  if (v16 < 0) {
    goto LABEL_20;
  }
LABEL_15:
  if (v18 < 0) {
    goto LABEL_21;
  }
  return v6 | v4;
}

void sub_19E28C0B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  _Unwind_Resume(exception_object);
}

void sub_19E28C14C(const char *a1@<X0>, void *a2@<X8>)
{
  sub_19E292030(a1, &cf);
  if (!cf)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  p_CFTypeRef cf = &cf;
  sub_19E1540E8((const __CFString ***)&p_cf, a2);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_19E28C1E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  __cxa_free_exception(v9);
  sub_19E154194(&a9);
  _Unwind_Resume(a1);
}

void sub_19E28C200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void sub_19E28C214(const __CFArray **a1@<X0>, const __CFDictionary **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v125 = 0;
  int64_t v126 = 0;
  unint64_t v127 = 0;
  uint64_t v122 = 0;
  int v123 = 0;
  unint64_t v124 = 0;
  CFArrayRef v4 = *a1;
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFIndex Count = CFArrayGetCount(v4);
  if (Count)
  {
    for (unint64_t i = 0; i != Count; ++i)
    {
      if (!*a1)
      {
        long long v85 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v85, "Could not construct");
        __cxa_throw(v85, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      sub_19E295CC4(*a1, i, &cf);
      CFTypeRef v7 = cf;
      if (cf) {
        CFRetain(cf);
      }
      CFTypeRef v121 = v7;
      sub_19E28A508((BOOL *)&v121);
      if (v7) {
        CFRelease(v7);
      }
      if (!cf)
      {
        int v86 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v86, "Could not construct");
        __cxa_throw(v86, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      sub_19E28C14C("Type", __p);
      sub_19E295D8C((const __CFDictionary *)cf, (const UInt8 *)__p, &v115);
      if (SHIBYTE(v106) < 0) {
        operator delete(__p[0]);
      }
      sub_19E28C14C("Integral", __p);
      if (v117 >= 0) {
        CFNumberRef v8 = (void **)HIBYTE(v117);
      }
      else {
        CFNumberRef v8 = v116;
      }
      char v9 = (void **)HIBYTE(v106);
      int v10 = SHIBYTE(v106);
      if (v106 < 0) {
        char v9 = (void **)__p[1];
      }
      if (v8 == v9)
      {
        if (v106 >= 0) {
          long long v11 = __p;
        }
        else {
          long long v11 = (void **)__p[0];
        }
        if (v117 < 0)
        {
          BOOL v20 = memcmp(v115, v11, (size_t)v116) == 0;
          if ((v10 & 0x80000000) == 0) {
            goto LABEL_31;
          }
        }
        else if (HIBYTE(v117))
        {
          uint64_t v12 = HIBYTE(v117) - 1;
          uint64_t v13 = (void **)&v115;
          do
          {
            int v15 = *(unsigned __int8 *)v13;
            uint64_t v13 = (void **)((char *)v13 + 1);
            int v14 = v15;
            int v17 = *(unsigned __int8 *)v11;
            long long v11 = (void **)((char *)v11 + 1);
            int v16 = v17;
            BOOL v18 = v12-- != 0;
            char v19 = v18;
            BOOL v20 = v14 == v16;
          }
          while (v14 == v16 && (v19 & 1) != 0);
          if ((SHIBYTE(v106) & 0x80000000) == 0)
          {
LABEL_31:
            if (v20) {
              goto LABEL_32;
            }
            goto LABEL_37;
          }
        }
        else
        {
          BOOL v20 = 1;
          if ((SHIBYTE(v106) & 0x80000000) == 0) {
            goto LABEL_31;
          }
        }
      }
      else
      {
        BOOL v20 = 0;
        if ((SHIBYTE(v106) & 0x80000000) == 0) {
          goto LABEL_31;
        }
      }
      operator delete(__p[0]);
      if (v20)
      {
LABEL_32:
        sub_19E28D1B0((const __CFDictionary **)&cf, (uint64_t)__p);
        unint64_t v21 = v126;
        if ((unint64_t)v126 < v127)
        {
          long long v22 = *(_OWORD *)__p;
          *((void *)v126 + 2) = v106;
          *(_OWORD *)unint64_t v21 = v22;
          __p[1] = 0;
          uint64_t v106 = 0;
          __p[0] = 0;
          int v23 = DWORD2(v107);
          *((void *)v21 + 3) = v107;
          *((_DWORD *)v21 + 8) = v23;
          int64_t v126 = v21 + 40;
          if ((SHIBYTE(v117) & 0x80000000) == 0) {
            goto LABEL_66;
          }
          goto LABEL_71;
        }
        int64_t v126 = sub_19E295F4C((void **)&v125, (uint64_t)__p);
        if ((SHIBYTE(v106) & 0x80000000) == 0) {
          goto LABEL_65;
        }
        goto LABEL_70;
      }
LABEL_37:
      sub_19E28C14C("Continuous", __p);
      if (v117 >= 0) {
        int v24 = (void **)HIBYTE(v117);
      }
      else {
        int v24 = v116;
      }
      int v25 = (void **)HIBYTE(v106);
      int v26 = SHIBYTE(v106);
      if (v106 < 0) {
        int v25 = (void **)__p[1];
      }
      if (v24 == v25)
      {
        if (v106 >= 0) {
          uint64_t v27 = __p;
        }
        else {
          uint64_t v27 = (void **)__p[0];
        }
        if (v117 < 0)
        {
          BOOL v35 = memcmp(v115, v27, (size_t)v116) == 0;
          if ((v26 & 0x80000000) == 0) {
            goto LABEL_55;
          }
        }
        else if (HIBYTE(v117))
        {
          uint64_t v28 = HIBYTE(v117) - 1;
          uint64_t v29 = (void **)&v115;
          do
          {
            int v31 = *(unsigned __int8 *)v29;
            uint64_t v29 = (void **)((char *)v29 + 1);
            int v30 = v31;
            int v33 = *(unsigned __int8 *)v27;
            uint64_t v27 = (void **)((char *)v27 + 1);
            int v32 = v33;
            BOOL v18 = v28-- != 0;
            char v34 = v18;
            BOOL v35 = v30 == v32;
          }
          while (v30 == v32 && (v34 & 1) != 0);
          if ((SHIBYTE(v106) & 0x80000000) == 0)
          {
LABEL_55:
            if (!v35) {
              goto LABEL_202;
            }
            goto LABEL_61;
          }
        }
        else
        {
          BOOL v35 = 1;
          if ((SHIBYTE(v106) & 0x80000000) == 0) {
            goto LABEL_55;
          }
        }
      }
      else
      {
        BOOL v35 = 0;
        if ((SHIBYTE(v106) & 0x80000000) == 0) {
          goto LABEL_55;
        }
      }
      operator delete(__p[0]);
      if (!v35)
      {
LABEL_202:
        size_t v87 = __cxa_allocate_exception(0x28uLL);
        sub_19E28D798((uint64_t)v87, "Unrecognized paramType: ", (uint64_t)&v115);
        __cxa_throw(v87, (struct type_info *)&unk_1EF0A45D8, (void (*)(void *))sub_19E28A884);
      }
LABEL_61:
      sub_19E28D4A4((const __CFDictionary **)&cf, (uint64_t)__p);
      BOOL v36 = v123;
      if ((unint64_t)v123 < v124)
      {
        long long v37 = *(_OWORD *)__p;
        *((void *)v123 + 2) = v106;
        *(_OWORD *)BOOL v36 = v37;
        __p[1] = 0;
        uint64_t v106 = 0;
        __p[0] = 0;
        int v38 = v108;
        *(_OWORD *)(v36 + 24) = v107;
        *((_DWORD *)v36 + 10) = v38;
        int v123 = v36 + 48;
        if ((SHIBYTE(v117) & 0x80000000) == 0) {
          goto LABEL_66;
        }
        goto LABEL_71;
      }
      int v123 = sub_19E296198((void **)&v122, (uint64_t)__p);
      if ((SHIBYTE(v106) & 0x80000000) == 0)
      {
LABEL_65:
        if ((SHIBYTE(v117) & 0x80000000) == 0) {
          goto LABEL_66;
        }
        goto LABEL_71;
      }
LABEL_70:
      operator delete(__p[0]);
      if ((SHIBYTE(v117) & 0x80000000) == 0)
      {
LABEL_66:
        CFTypeRef v39 = cf;
        if (!cf) {
          continue;
        }
LABEL_72:
        CFRelease(v39);
        continue;
      }
LABEL_71:
      operator delete(v115);
      CFTypeRef v39 = cf;
      if (cf) {
        goto LABEL_72;
      }
    }
  }
  uint64_t v115 = 0;
  uint64_t v116 = 0;
  uint64_t v117 = 0;
  sub_19E246830(&v115, (uint64_t)v122, (uint64_t)v123, 0xAAAAAAAAAAAAAAABLL * ((v123 - v122) >> 4));
  int v118 = 0;
  long long v119 = 0;
  uint64_t v120 = 0;
  sub_19E246A1C(&v118, (uint64_t)v125, (uint64_t)v126, 0xCCCCCCCCCCCCCCCDLL * ((v126 - v125) >> 3));
  int8x8_t v40 = (CFTypeRef *)a2;
  if (!*a2)
  {
    unint64_t v90 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v90, "Could not construct");
    __cxa_throw(v90, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  sub_19E28C14C("CallbackInterval", __p);
  unint64_t v41 = sub_19E29445C(*a2, (const UInt8 *)__p);
  if (v41)
  {
    uint64_t v42 = sub_19E15C808((uint64_t)v41);
    if ((v42 & 0xFF00000000) != 0) {
      int v43 = v42;
    }
    else {
      int v43 = 1;
    }
    if (SHIBYTE(v106) < 0) {
      goto LABEL_85;
    }
  }
  else
  {
    int v43 = 1;
    if (SHIBYTE(v106) < 0) {
LABEL_85:
    }
      operator delete(__p[0]);
  }
  if (!*a2)
  {
    v91 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v91, "Could not construct");
    __cxa_throw(v91, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  sub_19E292030("RandomSeed", __p);
  if (!*a2)
  {
    BOOL v44 = 0;
    unint64_t v45 = __p[0];
    if (!__p[0]) {
      goto LABEL_95;
    }
LABEL_94:
    CFRelease(v45);
    goto LABEL_95;
  }
  if (!__p[0])
  {
    unsigned int v48 = 0;
    LOBYTE(v47) = 0;
    char v49 = 0;
    LOBYTE(cf) = 0;
    char v114 = 0;
    goto LABEL_104;
  }
  BOOL v44 = CFDictionaryContainsKey(*a2, __p[0]) != 0;
  unint64_t v45 = __p[0];
  if (__p[0]) {
    goto LABEL_94;
  }
LABEL_95:
  CFDictionaryRef v46 = *a2;
  if (v44)
  {
    if (!v46)
    {
      v92 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v92, "Could not construct");
      __cxa_throw(v92, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    sub_19E292030("RandomSeed", __p);
    int v47 = sub_19E296330(*a2, (const void **)__p);
    if (__p[0]) {
      CFRelease(__p[0]);
    }
    unsigned int v48 = v47 & 0xFFFFFF00;
    CFDictionaryRef v46 = *a2;
    char v49 = 1;
  }
  else
  {
    char v49 = 0;
    LOBYTE(v47) = 0;
    unsigned int v48 = 0;
  }
  LOBYTE(cf) = 0;
  char v114 = 0;
  if (!v46)
  {
    unint64_t v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v50, "Could not construct");
    __cxa_throw(v50, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
LABEL_104:
  sub_19E292030("InitialParameterValues", __p);
  if (!*a2)
  {
    BOOL v51 = 0;
    BOOL v52 = __p[0];
    if (!__p[0]) {
      goto LABEL_110;
    }
    goto LABEL_109;
  }
  if (!__p[0]) {
    goto LABEL_149;
  }
  BOOL v51 = CFDictionaryContainsKey(*a2, __p[0]) != 0;
  BOOL v52 = __p[0];
  if (__p[0]) {
LABEL_109:
  }
    CFRelease(v52);
LABEL_110:
  if (!v51) {
    goto LABEL_149;
  }
  if (v114)
  {
    uint64_t v53 = (uint64_t **)cf;
    if (cf)
    {
      int v54 = (char **)v112;
      uint64_t v55 = (void *)cf;
      if (v112 != cf)
      {
        do
          int v54 = sub_19E2470C8(v54 - 12);
        while (v54 != (char **)v53);
        uint64_t v55 = (void *)cf;
      }
      unint64_t v112 = v53;
      operator delete(v55);
    }
    CFTypeRef cf = 0;
    unint64_t v112 = 0;
    unint64_t v113 = 0;
    if (*a2) {
      goto LABEL_118;
    }
LABEL_199:
    v84 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v84, "Could not construct");
    __cxa_throw(v84, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFTypeRef cf = 0;
  unint64_t v112 = 0;
  unint64_t v113 = 0;
  char v114 = 1;
  if (!*a2) {
    goto LABEL_199;
  }
LABEL_118:
  sub_19E292030("InitialParameterValues", __p);
  sub_19E2963E4(*a2, (const void **)__p, &theArray);
  if (__p[0]) {
    CFRelease(__p[0]);
  }
  int v94 = v43;
  if (!theArray)
  {
    uint64_t v93 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v93, "Could not construct");
    __cxa_throw(v93, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFIndex v56 = CFArrayGetCount(theArray);
  if (v56)
  {
    for (unint64_t j = 0; j != v56; ++j)
    {
      if (!theArray)
      {
        int v88 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v88, "Could not construct");
        __cxa_throw(v88, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      sub_19E295CC4(theArray, j, &v109);
      size_t v100 = 0;
      uint64_t v101 = 0;
      uint64_t v99 = 0;
      sub_19E246830(&v99, (uint64_t)v115, (uint64_t)v116, 0xAAAAAAAAAAAAAAABLL * (((char *)v116 - (char *)v115) >> 4));
      v102 = 0;
      v103 = 0;
      uint64_t v104 = 0;
      sub_19E246A1C(&v102, (uint64_t)v118, (uint64_t)v119, 0xCCCCCCCCCCCCCCCDLL * ((v119 - v118) >> 3));
      sub_19E28AD10(&v109, (uint64_t *)&v99, (uint64_t **)__p);
      if ((unint64_t)v112 >= v113) {
        uint64_t v58 = sub_19E29648C((uint64_t ***)&cf, (uint64_t)__p);
      }
      else {
        uint64_t v58 = sub_19E2965D0(v112, (uint64_t)__p) + 12;
      }
      unint64_t v112 = v58;
      sub_19E2470C8((char **)__p);
      uint64_t v59 = (void **)v102;
      if (v102)
      {
        unint64_t v60 = v103;
        uint64_t v61 = v102;
        if (v103 != v102)
        {
          do
          {
            if (*((char *)v60 - 17) < 0) {
              operator delete(*(v60 - 5));
            }
            v60 -= 5;
          }
          while (v60 != v59);
          uint64_t v61 = v102;
        }
        v103 = v59;
        operator delete(v61);
      }
      long long v62 = (void **)v99;
      if (v99)
      {
        int v63 = v100;
        size_t v64 = v99;
        if (v100 != v99)
        {
          do
          {
            if (*((char *)v63 - 25) < 0) {
              operator delete(*(v63 - 6));
            }
            v63 -= 6;
          }
          while (v63 != v62);
          size_t v64 = v99;
        }
        size_t v100 = v62;
        operator delete(v64);
      }
      if (v109) {
        CFRelease(v109);
      }
    }
  }
  if (theArray) {
    CFRelease(theArray);
  }
  int8x8_t v40 = (CFTypeRef *)a2;
  int v43 = v94;
LABEL_149:
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_19E246830((void *)a3, (uint64_t)v115, (uint64_t)v116, 0xAAAAAAAAAAAAAAABLL * (((char *)v116 - (char *)v115) >> 4));
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  sub_19E246A1C((void *)(a3 + 24), (uint64_t)v118, (uint64_t)v119, 0xCCCCCCCCCCCCCCCDLL * ((v119 - v118) >> 3));
  CFTypeRef v65 = *v40;
  if (*v40) {
    CFRetain(*v40);
  }
  CFTypeRef v98 = v65;
  *(_DWORD *)(a3 + 48) = sub_19E28D830(&v98);
  CFTypeRef v66 = *v40;
  if (*v40) {
    CFRetain(*v40);
  }
  CFTypeRef v97 = v66;
  *(_DWORD *)(a3 + 52) = sub_19E28D8F0(&v97);
  uint64_t v67 = sub_19E28BEB4((const __CFDictionary **)v40);
  *(unsigned char *)(a3 + 88) = 0;
  *(void *)(a3 + 56) = v67;
  *(void *)(a3 + 64) = v68;
  *(_DWORD *)(a3 + 72) = v43;
  *(_DWORD *)(a3 + 76) = v48 | v47;
  *(unsigned char *)(a3 + 80) = v49;
  *(unsigned char *)(a3 + 112) = 0;
  if (v114)
  {
    sub_19E293338((uint64_t ***)(a3 + 88), (uint64_t **)&cf);
    *(unsigned char *)(a3 + 112) = 1;
  }
  if (v97) {
    CFRelease(v97);
  }
  if (v98) {
    CFRelease(v98);
  }
  if (v114)
  {
    unint64_t v69 = (uint64_t **)cf;
    if (cf)
    {
      unint64_t v70 = (char **)v112;
      uint64_t v71 = (void *)cf;
      if (v112 != cf)
      {
        do
          unint64_t v70 = sub_19E2470C8(v70 - 12);
        while (v70 != (char **)v69);
        uint64_t v71 = (void *)cf;
      }
      unint64_t v112 = v69;
      operator delete(v71);
    }
  }
  uint64_t v72 = (uint64_t)v118;
  if (v118)
  {
    uint64_t v73 = (uint64_t)v119;
    uint64_t v74 = v118;
    if (v119 != v118)
    {
      do
      {
        if (*(char *)(v73 - 17) < 0) {
          operator delete(*(void **)(v73 - 40));
        }
        v73 -= 40;
      }
      while (v73 != v72);
      uint64_t v74 = v118;
    }
    long long v119 = (unsigned char *)v72;
    operator delete(v74);
  }
  uint64_t v75 = v115;
  if (v115)
  {
    uint64_t v76 = v116;
    int v77 = v115;
    if (v116 != v115)
    {
      do
      {
        if (*((char *)v76 - 25) < 0) {
          operator delete(*(v76 - 6));
        }
        v76 -= 6;
      }
      while (v76 != v75);
      int v77 = v115;
    }
    uint64_t v116 = v75;
    operator delete(v77);
  }
  long long v78 = v122;
  if (v122)
  {
    int v79 = v123;
    int v80 = v122;
    if (v123 != v122)
    {
      do
      {
        if (*(v79 - 25) < 0) {
          operator delete(*((void **)v79 - 6));
        }
        v79 -= 48;
      }
      while (v79 != v78);
      int v80 = v122;
    }
    int v123 = v78;
    operator delete(v80);
  }
  v81 = v125;
  if (v125)
  {
    v82 = v126;
    int v83 = v125;
    if (v126 != v125)
    {
      do
      {
        if (*(v82 - 17) < 0) {
          operator delete(*((void **)v82 - 5));
        }
        v82 -= 40;
      }
      while (v82 != v81);
      int v83 = v125;
    }
    int64_t v126 = v81;
    operator delete(v83);
  }
}

void sub_19E28CE8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,int a40,const void *a41,__int16 a42,char a43,char a44)
{
  sub_19E265838(&a41);
  sub_19E28D9B0((uint64_t)&a42);
  sub_19E245FE8((void **)(v44 - 192));
  sub_19E244580((void **)(v44 - 136));
  sub_19E2450B0((void **)(v44 - 112));
  _Unwind_Resume(a1);
}

void sub_19E28D0E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  sub_19E1551E8(&a35);
  sub_19E244580(v35 - 136);
  sub_19E2450B0(v35 - 112);
  _Unwind_Resume(a1);
}

void sub_19E28D0F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,const void *a35)
{
  __cxa_free_exception(v35);
  sub_19E1551E8(&a35);
  sub_19E244580((void **)(v36 - 136));
  sub_19E2450B0((void **)(v36 - 112));
  _Unwind_Resume(a1);
}

void sub_19E28D134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  sub_19E1551E8(&a35);
  sub_19E244580(v35 - 136);
  sub_19E2450B0(v35 - 112);
  _Unwind_Resume(a1);
}

void sub_19E28D13C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  if ((a26 & 0x80000000) == 0)
  {
    sub_19E1551E8(&a38);
    sub_19E244580(v38 - 136);
    sub_19E2450B0(v38 - 112);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19E28D160);
}

void sub_19E28D150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,const void *a35)
{
  if (*(char *)(v35 - 169) < 0) {
    operator delete(*(void **)(v35 - 192));
  }
  sub_19E1551E8(&a35);
  sub_19E244580((void **)(v35 - 136));
  sub_19E2450B0((void **)(v35 - 112));
  _Unwind_Resume(a1);
}

void sub_19E28D168()
{
  sub_19E1551E8((const void **)(v0 - 144));
  JUMPOUT(0x19E28D174);
}

void sub_19E28D194(_Unwind_Exception *a1)
{
  sub_19E244580((void **)(v1 - 136));
  sub_19E2450B0((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_19E28D1B0(const __CFDictionary **a1@<X0>, uint64_t a2@<X8>)
{
  if (!*a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_19E2929A8(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  sub_19E292030("Name", &cf);
  sub_19E295E64(*a1, &cf, __p);
  if (cf) {
    CFRelease(cf);
  }
  if (!*a1)
  {
    char v9 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v9, "Could not construct");
    __cxa_throw(v9, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  sub_19E292030("MinimumValue", &cf);
  int v4 = sub_19E296330(*a1, &cf);
  if (cf) {
    CFRelease(cf);
  }
  if (!*a1)
  {
    int v10 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v10, "Could not construct");
    __cxa_throw(v10, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  sub_19E292030("MaximumValue", &cf);
  int v5 = sub_19E296330(*a1, &cf);
  if (cf) {
    CFRelease(cf);
  }
  if (!*a1)
  {
    long long v11 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v11, "Could not construct");
    __cxa_throw(v11, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  sub_19E292030("Dimension", &cf);
  int v6 = sub_19E296330(*a1, &cf);
  if (cf) {
    CFRelease(cf);
  }
  if (SHIBYTE(v14) < 0)
  {
    sub_19E13C2D0((unsigned char *)a2, __p[0], (unint64_t)__p[1]);
    int v7 = SHIBYTE(v14);
    *(_DWORD *)(a2 + 24) = v4;
    *(_DWORD *)(a2 + 28) = v5;
    *(_DWORD *)(a2 + 32) = v6;
    if (v7 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)__p;
    *(void *)(a2 + 16) = v14;
    *(_DWORD *)(a2 + 24) = v4;
    *(_DWORD *)(a2 + 28) = v5;
    *(_DWORD *)(a2 + 32) = v6;
  }
}

void sub_19E28D40C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E28D490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void sub_19E28D4A4(const __CFDictionary **a1@<X0>, uint64_t a2@<X8>)
{
  if (!*a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_19E2929A8(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  sub_19E292030("Name", &cf);
  sub_19E295E64(*a1, &cf, __p);
  if (cf) {
    CFRelease(cf);
  }
  if (!*a1)
  {
    char v9 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v9, "Could not construct");
    __cxa_throw(v9, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  sub_19E292030("MinimumValue", &cf);
  double v4 = sub_19E2960E0(*a1, &cf);
  if (cf) {
    CFRelease(cf);
  }
  if (!*a1)
  {
    int v10 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v10, "Could not construct");
    __cxa_throw(v10, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  sub_19E292030("MaximumValue", &cf);
  double v5 = sub_19E2960E0(*a1, &cf);
  if (cf) {
    CFRelease(cf);
  }
  if (!*a1)
  {
    long long v11 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v11, "Could not construct");
    __cxa_throw(v11, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  sub_19E292030("Dimension", &cf);
  int v6 = sub_19E296330(*a1, &cf);
  if (cf) {
    CFRelease(cf);
  }
  if (SHIBYTE(v14) < 0)
  {
    sub_19E13C2D0((unsigned char *)a2, __p[0], (unint64_t)__p[1]);
    int v7 = SHIBYTE(v14);
    *(double *)(a2 + 24) = v4;
    *(double *)(a2 + 32) = v5;
    *(_DWORD *)(a2 + 40) = v6;
    if (v7 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)__p;
    *(void *)(a2 + 16) = v14;
    *(double *)(a2 + 24) = v4;
    *(double *)(a2 + 32) = v5;
    *(_DWORD *)(a2 + 40) = v6;
  }
}

void sub_19E28D700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E28D784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

uint64_t sub_19E28D798(uint64_t a1, const char *a2, uint64_t a3)
{
  double v4 = (const char **)(a1 + 16);
  sub_19E2941D4("[InvalidArgument] ", a2, a3);
  *(void *)a1 = &unk_1EF0A8798;
  double v5 = (const char *)v4;
  if (*(char *)(a1 + 39) < 0) {
    double v5 = *v4;
  }
  std::logic_error::logic_error((std::logic_error *)a1, v5);
  *(void *)a1 = &unk_1EF0A8798;
  return a1;
}

void sub_19E28D814(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E28D830(CFTypeRef *a1)
{
  CFTypeRef v1 = *a1;
  if (*a1) {
    CFRetain(*a1);
  }
  CFTypeRef v5 = v1;
  sub_19E292030("Algorithm", &cf);
  uint64_t v2 = sub_19E2966EC((const __CFDictionary **)&v5, &cf, sub_19E296850);
  if (cf) {
    CFRelease(cf);
  }
  if (v5) {
    CFRelease(v5);
  }
  return v2;
}

void sub_19E28D8C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
}

void sub_19E28D8DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E1551E8((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E28D8F0(CFTypeRef *a1)
{
  CFTypeRef v1 = *a1;
  if (*a1) {
    CFRetain(*a1);
  }
  CFTypeRef v5 = v1;
  sub_19E292030("Direction", &cf);
  uint64_t v2 = sub_19E296BA0((const __CFDictionary **)&v5, &cf, sub_19E296D04);
  if (cf) {
    CFRelease(cf);
  }
  if (v5) {
    CFRelease(v5);
  }
  return v2;
}

void sub_19E28D980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
}

void sub_19E28D99C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E1551E8((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E28D9B0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v2 = *(char ***)a1;
    if (*(void *)a1)
    {
      uint64_t v3 = *(char ***)(a1 + 8);
      double v4 = *(char ***)a1;
      if (v3 != v2)
      {
        do
          uint64_t v3 = sub_19E2470C8(v3 - 12);
        while (v3 != v2);
        double v4 = *(char ***)a1;
      }
      *(void *)(a1 + 8) = v2;
      operator delete(v4);
    }
  }
  return a1;
}

void sub_19E28DA14(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  sub_19E28C14C("SquaredExponential", &__p);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 23);
  if ((v8 & 0x80u) == 0) {
    uint64_t v9 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v9 = *(void *)(a1 + 8);
  }
  uint64_t v10 = v60;
  int v11 = (char)v60;
  if ((v60 & 0x80u) != 0) {
    uint64_t v10 = v59;
  }
  if (v9 != v10)
  {
    BOOL v21 = 0;
    if (((char)v60 & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_29;
  }
  if ((v60 & 0x80u) == 0) {
    p_p = (unsigned __int8 *)&__p;
  }
  else {
    p_p = (unsigned __int8 *)__p;
  }
  if ((v8 & 0x80) != 0)
  {
    BOOL v21 = memcmp(*(const void **)a1, p_p, *(void *)(a1 + 8)) == 0;
  }
  else
  {
    if (!*(unsigned char *)(a1 + 23))
    {
      BOOL v21 = 1;
      if (((char)v60 & 0x80000000) == 0)
      {
LABEL_23:
        if (v21) {
          goto LABEL_24;
        }
        goto LABEL_30;
      }
LABEL_29:
      operator delete(__p);
      if (v21)
      {
LABEL_24:
        sub_19E2933F8((uint64_t)&v57, a3);
        uint64_t v22 = a4[3];
        if (v22)
        {
          if ((void *)v22 == a4)
          {
            unint64_t v70 = v69;
            (*(void (**)(void *, void *))(*a4 + 24))(a4, v69);
LABEL_51:
            uint64_t v36 = a4[7];
            if (v36)
            {
              if ((void *)v36 == a4 + 4)
              {
                uint64_t v72 = v71;
                (*(void (**)(void *, void *))(a4[4] + 24))(a4 + 4, v71);
LABEL_56:
                sub_19E28E6CC(a2, (uint64_t)&v57, v69);
              }
              uint64_t v36 = (*(uint64_t (**)(uint64_t))(*(void *)v36 + 16))(v36);
            }
            uint64_t v72 = (void *)v36;
            goto LABEL_56;
          }
          uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 16))(v22);
        }
        unint64_t v70 = (void *)v22;
        goto LABEL_51;
      }
LABEL_30:
      sub_19E28C14C("ARDSquaredExponential", &__p);
      uint64_t v23 = *(unsigned __int8 *)(a1 + 23);
      if ((v23 & 0x80u) == 0) {
        uint64_t v24 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        uint64_t v24 = *(void *)(a1 + 8);
      }
      uint64_t v25 = v60;
      int v26 = (char)v60;
      if ((v60 & 0x80u) != 0) {
        uint64_t v25 = v59;
      }
      if (v24 != v25)
      {
        BOOL v35 = 0;
        if (((char)v60 & 0x80000000) == 0) {
          goto LABEL_59;
        }
        goto LABEL_65;
      }
      if ((v60 & 0x80u) == 0) {
        uint64_t v27 = (unsigned __int8 *)&__p;
      }
      else {
        uint64_t v27 = (unsigned __int8 *)__p;
      }
      if ((v23 & 0x80) != 0)
      {
        BOOL v35 = memcmp(*(const void **)a1, v27, *(void *)(a1 + 8)) == 0;
      }
      else
      {
        if (!*(unsigned char *)(a1 + 23))
        {
          BOOL v35 = 1;
          if (((char)v60 & 0x80000000) == 0)
          {
LABEL_59:
            if (v35) {
              goto LABEL_60;
            }
            goto LABEL_66;
          }
LABEL_65:
          operator delete(__p);
          if (v35)
          {
LABEL_60:
            sub_19E2933F8((uint64_t)&v56, a3);
            uint64_t v37 = a4[3];
            if (v37)
            {
              if ((void *)v37 == a4)
              {
                CFTypeRef v66 = v65;
                (*(void (**)(void *, void *))(*a4 + 24))(a4, v65);
LABEL_87:
                uint64_t v51 = a4[7];
                if (v51)
                {
                  if ((void *)v51 == a4 + 4)
                  {
                    uint64_t v68 = v67;
                    (*(void (**)(void *, void *))(a4[4] + 24))(a4 + 4, v67);
LABEL_92:
                    sub_19E28F470(a2, (uint64_t)&v56, v65);
                  }
                  uint64_t v51 = (*(uint64_t (**)(uint64_t))(*(void *)v51 + 16))(v51);
                }
                uint64_t v68 = (void *)v51;
                goto LABEL_92;
              }
              uint64_t v37 = (*(uint64_t (**)(uint64_t))(*(void *)v37 + 16))(v37);
            }
            CFTypeRef v66 = (void *)v37;
            goto LABEL_87;
          }
LABEL_66:
          sub_19E28C14C("MaternFiveHalves", &__p);
          uint64_t v38 = *(unsigned __int8 *)(a1 + 23);
          if ((v38 & 0x80u) == 0) {
            uint64_t v39 = *(unsigned __int8 *)(a1 + 23);
          }
          else {
            uint64_t v39 = *(void *)(a1 + 8);
          }
          uint64_t v40 = v60;
          int v41 = (char)v60;
          if ((v60 & 0x80u) != 0) {
            uint64_t v40 = v59;
          }
          if (v39 == v40)
          {
            if ((v60 & 0x80u) == 0) {
              uint64_t v42 = (unsigned __int8 *)&__p;
            }
            else {
              uint64_t v42 = (unsigned __int8 *)__p;
            }
            if ((v38 & 0x80) != 0)
            {
              BOOL v50 = memcmp(*(const void **)a1, v42, *(void *)(a1 + 8)) == 0;
              goto LABEL_94;
            }
            if (*(unsigned char *)(a1 + 23))
            {
              uint64_t v43 = v38 - 1;
              uint64_t v44 = (unsigned __int8 *)a1;
              do
              {
                int v46 = *v44++;
                int v45 = v46;
                int v48 = *v42++;
                int v47 = v48;
                BOOL v19 = v43-- != 0;
                char v49 = v19;
                BOOL v50 = v45 == v47;
              }
              while (v45 == v47 && (v49 & 1) != 0);
LABEL_94:
              if ((v41 & 0x80000000) == 0) {
                goto LABEL_96;
              }
              goto LABEL_95;
            }
            BOOL v50 = 1;
            if (((char)v60 & 0x80000000) == 0)
            {
LABEL_96:
              if (!v50)
              {
                exception = __cxa_allocate_exception(0x28uLL);
                sub_19E290DC0((uint64_t)exception, "Invalid kernel: ", a1);
                __cxa_throw(exception, (struct type_info *)&unk_1EF0A45D8, (void (*)(void *))sub_19E28A884);
              }
              sub_19E2933F8((uint64_t)&v55, a3);
              uint64_t v52 = a4[3];
              if (v52)
              {
                if ((void *)v52 == a4)
                {
                  long long v62 = v61;
                  (*(void (**)(void *, void *))(*a4 + 24))(a4, v61);
LABEL_102:
                  uint64_t v53 = a4[7];
                  if (v53)
                  {
                    if ((void *)v53 == a4 + 4)
                    {
                      size_t v64 = v63;
                      (*(void (**)(uint64_t, void *))(*(void *)v53 + 24))(v53, v63);
LABEL_107:
                      sub_19E290118(a2, (uint64_t)&v55, v61);
                    }
                    uint64_t v53 = (*(uint64_t (**)(uint64_t))(*(void *)v53 + 16))(v53);
                  }
                  size_t v64 = (void *)v53;
                  goto LABEL_107;
                }
                uint64_t v52 = (*(uint64_t (**)(uint64_t))(*(void *)v52 + 16))(v52);
              }
              long long v62 = (void *)v52;
              goto LABEL_102;
            }
          }
          else
          {
            BOOL v50 = 0;
            if (((char)v60 & 0x80000000) == 0) {
              goto LABEL_96;
            }
          }
LABEL_95:
          operator delete(__p);
          goto LABEL_96;
        }
        uint64_t v28 = v23 - 1;
        uint64_t v29 = (unsigned __int8 *)a1;
        do
        {
          int v31 = *v29++;
          int v30 = v31;
          int v33 = *v27++;
          int v32 = v33;
          BOOL v19 = v28-- != 0;
          char v34 = v19;
          BOOL v35 = v30 == v32;
        }
        while (v30 == v32 && (v34 & 1) != 0);
      }
      if ((v26 & 0x80000000) == 0) {
        goto LABEL_59;
      }
      goto LABEL_65;
    }
    uint64_t v13 = v8 - 1;
    uint64_t v14 = (unsigned __int8 *)a1;
    do
    {
      int v16 = *v14++;
      int v15 = v16;
      int v18 = *p_p++;
      int v17 = v18;
      BOOL v19 = v13-- != 0;
      char v20 = v19;
      BOOL v21 = v15 == v17;
    }
    while (v15 == v17 && (v20 & 1) != 0);
  }
  if ((v11 & 0x80000000) == 0) {
    goto LABEL_23;
  }
  goto LABEL_29;
}

void sub_19E28E51C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19E28E530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,char *a61)
{
  if (a61 == &a58)
  {
    sub_19E32FB88();
  }
  else if (a61)
  {
    (*(void (**)(void))(*(void *)a61 + 40))();
    sub_19E2934EC((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  sub_19E2934EC((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_19E28E624()
{
  sub_19E28F374((void *)(v0 - 200));
  JUMPOUT(0x19E28E630);
}

void sub_19E28E640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  uint64_t v42 = *(void *)(v40 - 112);
  if (v42 == v40 - 136)
  {
    sub_19E32FB88();
  }
  else if (v42)
  {
    (*(void (**)(uint64_t))(*(void *)v42 + 40))(v42);
    sub_19E2934EC((uint64_t)&a40);
    _Unwind_Resume(a1);
  }
  sub_19E2934EC((uint64_t)&a40);
  _Unwind_Resume(a1);
}

void sub_19E28E6CC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  sub_19E28C14C("ProbabilityOfImprovement", &__p);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 23);
  if ((v6 & 0x80u) == 0) {
    uint64_t v7 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v7 = *(void *)(a1 + 8);
  }
  uint64_t v8 = v58;
  int v9 = (char)v58;
  if ((v58 & 0x80u) != 0) {
    uint64_t v8 = v57;
  }
  if (v7 != v8)
  {
    BOOL v19 = 0;
    if (((char)v58 & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_29;
  }
  if ((v58 & 0x80u) == 0) {
    p_p = (unsigned __int8 *)&__p;
  }
  else {
    p_p = (unsigned __int8 *)__p;
  }
  if ((v6 & 0x80) != 0)
  {
    BOOL v19 = memcmp(*(const void **)a1, p_p, *(void *)(a1 + 8)) == 0;
  }
  else
  {
    if (!*(unsigned char *)(a1 + 23))
    {
      BOOL v19 = 1;
      if (((char)v58 & 0x80000000) == 0)
      {
LABEL_23:
        if (v19) {
          goto LABEL_24;
        }
        goto LABEL_30;
      }
LABEL_29:
      operator delete(__p);
      if (v19)
      {
LABEL_24:
        sub_19E2933F8((uint64_t)&v55, a2);
        uint64_t v20 = a3[3];
        if (v20)
        {
          if ((void *)v20 == a3)
          {
            uint64_t v68 = v67;
            (*(void (**)(void *, void *))(*a3 + 24))(a3, v67);
LABEL_51:
            uint64_t v34 = a3[7];
            if (v34)
            {
              if ((void *)v34 == a3 + 4)
              {
                unint64_t v70 = v69;
                (*(void (**)(void *, void *))(a3[4] + 24))(a3 + 4, v69);
LABEL_56:
                sub_19E296EF0((uint64_t)&v55);
              }
              uint64_t v34 = (*(uint64_t (**)(uint64_t))(*(void *)v34 + 16))(v34);
            }
            unint64_t v70 = (void *)v34;
            goto LABEL_56;
          }
          uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 16))(v20);
        }
        uint64_t v68 = (void *)v20;
        goto LABEL_51;
      }
LABEL_30:
      sub_19E28C14C("ExpectedImprovement", &__p);
      uint64_t v21 = *(unsigned __int8 *)(a1 + 23);
      if ((v21 & 0x80u) == 0) {
        uint64_t v22 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        uint64_t v22 = *(void *)(a1 + 8);
      }
      uint64_t v23 = v58;
      int v24 = (char)v58;
      if ((v58 & 0x80u) != 0) {
        uint64_t v23 = v57;
      }
      if (v22 != v23)
      {
        BOOL v33 = 0;
        if (((char)v58 & 0x80000000) == 0) {
          goto LABEL_59;
        }
        goto LABEL_65;
      }
      if ((v58 & 0x80u) == 0) {
        uint64_t v25 = (unsigned __int8 *)&__p;
      }
      else {
        uint64_t v25 = (unsigned __int8 *)__p;
      }
      if ((v21 & 0x80) != 0)
      {
        BOOL v33 = memcmp(*(const void **)a1, v25, *(void *)(a1 + 8)) == 0;
      }
      else
      {
        if (!*(unsigned char *)(a1 + 23))
        {
          BOOL v33 = 1;
          if (((char)v58 & 0x80000000) == 0)
          {
LABEL_59:
            if (v33) {
              goto LABEL_60;
            }
            goto LABEL_66;
          }
LABEL_65:
          operator delete(__p);
          if (v33)
          {
LABEL_60:
            sub_19E2933F8((uint64_t)&v54, a2);
            uint64_t v35 = a3[3];
            if (v35)
            {
              if ((void *)v35 == a3)
              {
                size_t v64 = v63;
                (*(void (**)(void *, void *))(*a3 + 24))(a3, v63);
LABEL_87:
                uint64_t v49 = a3[7];
                if (v49)
                {
                  if ((void *)v49 == a3 + 4)
                  {
                    CFTypeRef v66 = v65;
                    (*(void (**)(void *, void *))(a3[4] + 24))(a3 + 4, v65);
LABEL_92:
                    sub_19E2973DC((uint64_t)&v54);
                  }
                  uint64_t v49 = (*(uint64_t (**)(uint64_t))(*(void *)v49 + 16))(v49);
                }
                CFTypeRef v66 = (void *)v49;
                goto LABEL_92;
              }
              uint64_t v35 = (*(uint64_t (**)(uint64_t))(*(void *)v35 + 16))(v35);
            }
            size_t v64 = (void *)v35;
            goto LABEL_87;
          }
LABEL_66:
          sub_19E28C14C("UpperConfidenceBound", &__p);
          uint64_t v36 = *(unsigned __int8 *)(a1 + 23);
          if ((v36 & 0x80u) == 0) {
            uint64_t v37 = *(unsigned __int8 *)(a1 + 23);
          }
          else {
            uint64_t v37 = *(void *)(a1 + 8);
          }
          uint64_t v38 = v58;
          int v39 = (char)v58;
          if ((v58 & 0x80u) != 0) {
            uint64_t v38 = v57;
          }
          if (v37 == v38)
          {
            if ((v58 & 0x80u) == 0) {
              uint64_t v40 = (unsigned __int8 *)&__p;
            }
            else {
              uint64_t v40 = (unsigned __int8 *)__p;
            }
            if ((v36 & 0x80) != 0)
            {
              BOOL v48 = memcmp(*(const void **)a1, v40, *(void *)(a1 + 8)) == 0;
              goto LABEL_94;
            }
            if (*(unsigned char *)(a1 + 23))
            {
              uint64_t v41 = v36 - 1;
              uint64_t v42 = (unsigned __int8 *)a1;
              do
              {
                int v44 = *v42++;
                int v43 = v44;
                int v46 = *v40++;
                int v45 = v46;
                BOOL v17 = v41-- != 0;
                char v47 = v17;
                BOOL v48 = v43 == v45;
              }
              while (v43 == v45 && (v47 & 1) != 0);
LABEL_94:
              if ((v39 & 0x80000000) == 0) {
                goto LABEL_96;
              }
              goto LABEL_95;
            }
            BOOL v48 = 1;
            if (((char)v58 & 0x80000000) == 0)
            {
LABEL_96:
              if (!v48)
              {
                exception = __cxa_allocate_exception(0x28uLL);
                sub_19E297DB4((uint64_t)exception, "Invalid acquisition: ", a1);
                __cxa_throw(exception, (struct type_info *)&unk_1EF0A45D8, (void (*)(void *))sub_19E28A884);
              }
              sub_19E2933F8((uint64_t)&v53, a2);
              uint64_t v50 = a3[3];
              if (v50)
              {
                if ((void *)v50 == a3)
                {
                  unsigned __int8 v60 = v59;
                  (*(void (**)(void *, void *))(*a3 + 24))(a3, v59);
LABEL_102:
                  uint64_t v51 = a3[7];
                  if (v51)
                  {
                    if ((void *)v51 == a3 + 4)
                    {
                      long long v62 = v61;
                      (*(void (**)(uint64_t, void *))(*(void *)v51 + 24))(v51, v61);
LABEL_107:
                      sub_19E2978C8((uint64_t)&v53);
                    }
                    uint64_t v51 = (*(uint64_t (**)(uint64_t))(*(void *)v51 + 16))(v51);
                  }
                  long long v62 = (void *)v51;
                  goto LABEL_107;
                }
                uint64_t v50 = (*(uint64_t (**)(uint64_t))(*(void *)v50 + 16))(v50);
              }
              unsigned __int8 v60 = (void *)v50;
              goto LABEL_102;
            }
          }
          else
          {
            BOOL v48 = 0;
            if (((char)v58 & 0x80000000) == 0) {
              goto LABEL_96;
            }
          }
LABEL_95:
          operator delete(__p);
          goto LABEL_96;
        }
        uint64_t v26 = v21 - 1;
        uint64_t v27 = (unsigned __int8 *)a1;
        do
        {
          int v29 = *v27++;
          int v28 = v29;
          int v31 = *v25++;
          int v30 = v31;
          BOOL v17 = v26-- != 0;
          char v32 = v17;
          BOOL v33 = v28 == v30;
        }
        while (v28 == v30 && (v32 & 1) != 0);
      }
      if ((v24 & 0x80000000) == 0) {
        goto LABEL_59;
      }
      goto LABEL_65;
    }
    uint64_t v11 = v6 - 1;
    uint64_t v12 = (unsigned __int8 *)a1;
    do
    {
      int v14 = *v12++;
      int v13 = v14;
      int v16 = *p_p++;
      int v15 = v16;
      BOOL v17 = v11-- != 0;
      char v18 = v17;
      BOOL v19 = v13 == v15;
    }
    while (v13 == v15 && (v18 & 1) != 0);
  }
  if ((v9 & 0x80000000) == 0) {
    goto LABEL_23;
  }
  goto LABEL_29;
}

void sub_19E28F1C4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19E28F1D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,char *a61)
{
  if (a61 == &a58)
  {
    sub_19E32FB88();
  }
  else if (a61)
  {
    (*(void (**)(void))(*(void *)a61 + 40))();
    sub_19E2934EC((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  sub_19E2934EC((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_19E28F2CC()
{
  sub_19E28F374((void *)(v0 - 200));
  JUMPOUT(0x19E28F2D8);
}

void sub_19E28F2E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  uint64_t v42 = *(void *)(v40 - 112);
  if (v42 == v40 - 136)
  {
    sub_19E32FB88();
  }
  else if (v42)
  {
    (*(void (**)(uint64_t))(*(void *)v42 + 40))(v42);
    sub_19E2934EC((uint64_t)&a40);
    _Unwind_Resume(a1);
  }
  sub_19E2934EC((uint64_t)&a40);
  _Unwind_Resume(a1);
}

void *sub_19E28F374(void *a1)
{
  uint64_t v2 = a1 + 4;
  uint64_t v3 = (void *)a1[7];
  if (v3 != v2)
  {
    if (v3) {
      (*(void (**)(void *))(*v3 + 40))(v3);
    }
    double v4 = (void *)a1[3];
    if (v4 != a1) {
      goto LABEL_5;
    }
LABEL_9:
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  (*(void (**)(void *))(*v2 + 32))(v2);
  double v4 = (void *)a1[3];
  if (v4 == a1) {
    goto LABEL_9;
  }
LABEL_5:
  if (v4) {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  return a1;
}

void sub_19E28F470(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  sub_19E28C14C("ProbabilityOfImprovement", &__p);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 23);
  if ((v6 & 0x80u) == 0) {
    uint64_t v7 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v7 = *(void *)(a1 + 8);
  }
  uint64_t v8 = v58;
  int v9 = (char)v58;
  if ((v58 & 0x80u) != 0) {
    uint64_t v8 = v57;
  }
  if (v7 != v8)
  {
    BOOL v19 = 0;
    if (((char)v58 & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_29;
  }
  if ((v58 & 0x80u) == 0) {
    p_p = (unsigned __int8 *)&__p;
  }
  else {
    p_p = (unsigned __int8 *)__p;
  }
  if ((v6 & 0x80) != 0)
  {
    BOOL v19 = memcmp(*(const void **)a1, p_p, *(void *)(a1 + 8)) == 0;
  }
  else
  {
    if (!*(unsigned char *)(a1 + 23))
    {
      BOOL v19 = 1;
      if (((char)v58 & 0x80000000) == 0)
      {
LABEL_23:
        if (v19) {
          goto LABEL_24;
        }
        goto LABEL_30;
      }
LABEL_29:
      operator delete(__p);
      if (v19)
      {
LABEL_24:
        sub_19E2933F8((uint64_t)&v55, a2);
        uint64_t v20 = a3[3];
        if (v20)
        {
          if ((void *)v20 == a3)
          {
            uint64_t v68 = v67;
            (*(void (**)(void *, void *))(*a3 + 24))(a3, v67);
LABEL_51:
            uint64_t v34 = a3[7];
            if (v34)
            {
              if ((void *)v34 == a3 + 4)
              {
                unint64_t v70 = v69;
                (*(void (**)(void *, void *))(a3[4] + 24))(a3 + 4, v69);
LABEL_56:
                sub_19E2B8918((uint64_t)&v55);
              }
              uint64_t v34 = (*(uint64_t (**)(uint64_t))(*(void *)v34 + 16))(v34);
            }
            unint64_t v70 = (void *)v34;
            goto LABEL_56;
          }
          uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 16))(v20);
        }
        uint64_t v68 = (void *)v20;
        goto LABEL_51;
      }
LABEL_30:
      sub_19E28C14C("ExpectedImprovement", &__p);
      uint64_t v21 = *(unsigned __int8 *)(a1 + 23);
      if ((v21 & 0x80u) == 0) {
        uint64_t v22 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        uint64_t v22 = *(void *)(a1 + 8);
      }
      uint64_t v23 = v58;
      int v24 = (char)v58;
      if ((v58 & 0x80u) != 0) {
        uint64_t v23 = v57;
      }
      if (v22 != v23)
      {
        BOOL v33 = 0;
        if (((char)v58 & 0x80000000) == 0) {
          goto LABEL_59;
        }
        goto LABEL_65;
      }
      if ((v58 & 0x80u) == 0) {
        uint64_t v25 = (unsigned __int8 *)&__p;
      }
      else {
        uint64_t v25 = (unsigned __int8 *)__p;
      }
      if ((v21 & 0x80) != 0)
      {
        BOOL v33 = memcmp(*(const void **)a1, v25, *(void *)(a1 + 8)) == 0;
      }
      else
      {
        if (!*(unsigned char *)(a1 + 23))
        {
          BOOL v33 = 1;
          if (((char)v58 & 0x80000000) == 0)
          {
LABEL_59:
            if (v33) {
              goto LABEL_60;
            }
            goto LABEL_66;
          }
LABEL_65:
          operator delete(__p);
          if (v33)
          {
LABEL_60:
            sub_19E2933F8((uint64_t)&v54, a2);
            uint64_t v35 = a3[3];
            if (v35)
            {
              if ((void *)v35 == a3)
              {
                size_t v64 = v63;
                (*(void (**)(void *, void *))(*a3 + 24))(a3, v63);
LABEL_87:
                uint64_t v49 = a3[7];
                if (v49)
                {
                  if ((void *)v49 == a3 + 4)
                  {
                    CFTypeRef v66 = v65;
                    (*(void (**)(void *, void *))(a3[4] + 24))(a3 + 4, v65);
LABEL_92:
                    sub_19E2B8E04((uint64_t)&v54);
                  }
                  uint64_t v49 = (*(uint64_t (**)(uint64_t))(*(void *)v49 + 16))(v49);
                }
                CFTypeRef v66 = (void *)v49;
                goto LABEL_92;
              }
              uint64_t v35 = (*(uint64_t (**)(uint64_t))(*(void *)v35 + 16))(v35);
            }
            size_t v64 = (void *)v35;
            goto LABEL_87;
          }
LABEL_66:
          sub_19E28C14C("UpperConfidenceBound", &__p);
          uint64_t v36 = *(unsigned __int8 *)(a1 + 23);
          if ((v36 & 0x80u) == 0) {
            uint64_t v37 = *(unsigned __int8 *)(a1 + 23);
          }
          else {
            uint64_t v37 = *(void *)(a1 + 8);
          }
          uint64_t v38 = v58;
          int v39 = (char)v58;
          if ((v58 & 0x80u) != 0) {
            uint64_t v38 = v57;
          }
          if (v37 == v38)
          {
            if ((v58 & 0x80u) == 0) {
              uint64_t v40 = (unsigned __int8 *)&__p;
            }
            else {
              uint64_t v40 = (unsigned __int8 *)__p;
            }
            if ((v36 & 0x80) != 0)
            {
              BOOL v48 = memcmp(*(const void **)a1, v40, *(void *)(a1 + 8)) == 0;
              goto LABEL_94;
            }
            if (*(unsigned char *)(a1 + 23))
            {
              uint64_t v41 = v36 - 1;
              uint64_t v42 = (unsigned __int8 *)a1;
              do
              {
                int v44 = *v42++;
                int v43 = v44;
                int v46 = *v40++;
                int v45 = v46;
                BOOL v17 = v41-- != 0;
                char v47 = v17;
                BOOL v48 = v43 == v45;
              }
              while (v43 == v45 && (v47 & 1) != 0);
LABEL_94:
              if ((v39 & 0x80000000) == 0) {
                goto LABEL_96;
              }
              goto LABEL_95;
            }
            BOOL v48 = 1;
            if (((char)v58 & 0x80000000) == 0)
            {
LABEL_96:
              if (!v48)
              {
                exception = __cxa_allocate_exception(0x28uLL);
                sub_19E297DB4((uint64_t)exception, "Invalid acquisition: ", a1);
                __cxa_throw(exception, (struct type_info *)&unk_1EF0A45D8, (void (*)(void *))sub_19E28A884);
              }
              sub_19E2933F8((uint64_t)&v53, a2);
              uint64_t v50 = a3[3];
              if (v50)
              {
                if ((void *)v50 == a3)
                {
                  unsigned __int8 v60 = v59;
                  (*(void (**)(void *, void *))(*a3 + 24))(a3, v59);
LABEL_102:
                  uint64_t v51 = a3[7];
                  if (v51)
                  {
                    if ((void *)v51 == a3 + 4)
                    {
                      long long v62 = v61;
                      (*(void (**)(uint64_t, void *))(*(void *)v51 + 24))(v51, v61);
LABEL_107:
                      sub_19E2B92F0((uint64_t)&v53);
                    }
                    uint64_t v51 = (*(uint64_t (**)(uint64_t))(*(void *)v51 + 16))(v51);
                  }
                  long long v62 = (void *)v51;
                  goto LABEL_107;
                }
                uint64_t v50 = (*(uint64_t (**)(uint64_t))(*(void *)v50 + 16))(v50);
              }
              unsigned __int8 v60 = (void *)v50;
              goto LABEL_102;
            }
          }
          else
          {
            BOOL v48 = 0;
            if (((char)v58 & 0x80000000) == 0) {
              goto LABEL_96;
            }
          }
LABEL_95:
          operator delete(__p);
          goto LABEL_96;
        }
        uint64_t v26 = v21 - 1;
        uint64_t v27 = (unsigned __int8 *)a1;
        do
        {
          int v29 = *v27++;
          int v28 = v29;
          int v31 = *v25++;
          int v30 = v31;
          BOOL v17 = v26-- != 0;
          char v32 = v17;
          BOOL v33 = v28 == v30;
        }
        while (v28 == v30 && (v32 & 1) != 0);
      }
      if ((v24 & 0x80000000) == 0) {
        goto LABEL_59;
      }
      goto LABEL_65;
    }
    uint64_t v11 = v6 - 1;
    uint64_t v12 = (unsigned __int8 *)a1;
    do
    {
      int v14 = *v12++;
      int v13 = v14;
      int v16 = *p_p++;
      int v15 = v16;
      BOOL v17 = v11-- != 0;
      char v18 = v17;
      BOOL v19 = v13 == v15;
    }
    while (v13 == v15 && (v18 & 1) != 0);
  }
  if ((v9 & 0x80000000) == 0) {
    goto LABEL_23;
  }
  goto LABEL_29;
}

void sub_19E28FF68(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19E28FF7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,char *a61)
{
  if (a61 == &a58)
  {
    sub_19E32FB88();
  }
  else if (a61)
  {
    (*(void (**)(void))(*(void *)a61 + 40))();
    sub_19E2934EC((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  sub_19E2934EC((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_19E290070()
{
  sub_19E28F374((void *)(v0 - 200));
  JUMPOUT(0x19E29007CLL);
}

void sub_19E29008C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  uint64_t v42 = *(void *)(v40 - 112);
  if (v42 == v40 - 136)
  {
    sub_19E32FB88();
  }
  else if (v42)
  {
    (*(void (**)(uint64_t))(*(void *)v42 + 40))(v42);
    sub_19E2934EC((uint64_t)&a40);
    _Unwind_Resume(a1);
  }
  sub_19E2934EC((uint64_t)&a40);
  _Unwind_Resume(a1);
}

void sub_19E290118(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  sub_19E28C14C("ProbabilityOfImprovement", &__p);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 23);
  if ((v6 & 0x80u) == 0) {
    uint64_t v7 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v7 = *(void *)(a1 + 8);
  }
  uint64_t v8 = v58;
  int v9 = (char)v58;
  if ((v58 & 0x80u) != 0) {
    uint64_t v8 = v57;
  }
  if (v7 != v8)
  {
    BOOL v19 = 0;
    if (((char)v58 & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_29;
  }
  if ((v58 & 0x80u) == 0) {
    p_p = (unsigned __int8 *)&__p;
  }
  else {
    p_p = (unsigned __int8 *)__p;
  }
  if ((v6 & 0x80) != 0)
  {
    BOOL v19 = memcmp(*(const void **)a1, p_p, *(void *)(a1 + 8)) == 0;
  }
  else
  {
    if (!*(unsigned char *)(a1 + 23))
    {
      BOOL v19 = 1;
      if (((char)v58 & 0x80000000) == 0)
      {
LABEL_23:
        if (v19) {
          goto LABEL_24;
        }
        goto LABEL_30;
      }
LABEL_29:
      operator delete(__p);
      if (v19)
      {
LABEL_24:
        sub_19E2933F8((uint64_t)&v55, a2);
        uint64_t v20 = a3[3];
        if (v20)
        {
          if ((void *)v20 == a3)
          {
            uint64_t v68 = v67;
            (*(void (**)(void *, void *))(*a3 + 24))(a3, v67);
LABEL_51:
            uint64_t v34 = a3[7];
            if (v34)
            {
              if ((void *)v34 == a3 + 4)
              {
                unint64_t v70 = v69;
                (*(void (**)(void *, void *))(a3[4] + 24))(a3 + 4, v69);
LABEL_56:
                sub_19E2D4FC4((uint64_t)&v55);
              }
              uint64_t v34 = (*(uint64_t (**)(uint64_t))(*(void *)v34 + 16))(v34);
            }
            unint64_t v70 = (void *)v34;
            goto LABEL_56;
          }
          uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 16))(v20);
        }
        uint64_t v68 = (void *)v20;
        goto LABEL_51;
      }
LABEL_30:
      sub_19E28C14C("ExpectedImprovement", &__p);
      uint64_t v21 = *(unsigned __int8 *)(a1 + 23);
      if ((v21 & 0x80u) == 0) {
        uint64_t v22 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        uint64_t v22 = *(void *)(a1 + 8);
      }
      uint64_t v23 = v58;
      int v24 = (char)v58;
      if ((v58 & 0x80u) != 0) {
        uint64_t v23 = v57;
      }
      if (v22 != v23)
      {
        BOOL v33 = 0;
        if (((char)v58 & 0x80000000) == 0) {
          goto LABEL_59;
        }
        goto LABEL_65;
      }
      if ((v58 & 0x80u) == 0) {
        uint64_t v25 = (unsigned __int8 *)&__p;
      }
      else {
        uint64_t v25 = (unsigned __int8 *)__p;
      }
      if ((v21 & 0x80) != 0)
      {
        BOOL v33 = memcmp(*(const void **)a1, v25, *(void *)(a1 + 8)) == 0;
      }
      else
      {
        if (!*(unsigned char *)(a1 + 23))
        {
          BOOL v33 = 1;
          if (((char)v58 & 0x80000000) == 0)
          {
LABEL_59:
            if (v33) {
              goto LABEL_60;
            }
            goto LABEL_66;
          }
LABEL_65:
          operator delete(__p);
          if (v33)
          {
LABEL_60:
            sub_19E2933F8((uint64_t)&v54, a2);
            uint64_t v35 = a3[3];
            if (v35)
            {
              if ((void *)v35 == a3)
              {
                size_t v64 = v63;
                (*(void (**)(void *, void *))(*a3 + 24))(a3, v63);
LABEL_87:
                uint64_t v49 = a3[7];
                if (v49)
                {
                  if ((void *)v49 == a3 + 4)
                  {
                    CFTypeRef v66 = v65;
                    (*(void (**)(void *, void *))(a3[4] + 24))(a3 + 4, v65);
LABEL_92:
                    sub_19E2D54B0((uint64_t)&v54);
                  }
                  uint64_t v49 = (*(uint64_t (**)(uint64_t))(*(void *)v49 + 16))(v49);
                }
                CFTypeRef v66 = (void *)v49;
                goto LABEL_92;
              }
              uint64_t v35 = (*(uint64_t (**)(uint64_t))(*(void *)v35 + 16))(v35);
            }
            size_t v64 = (void *)v35;
            goto LABEL_87;
          }
LABEL_66:
          sub_19E28C14C("UpperConfidenceBound", &__p);
          uint64_t v36 = *(unsigned __int8 *)(a1 + 23);
          if ((v36 & 0x80u) == 0) {
            uint64_t v37 = *(unsigned __int8 *)(a1 + 23);
          }
          else {
            uint64_t v37 = *(void *)(a1 + 8);
          }
          uint64_t v38 = v58;
          int v39 = (char)v58;
          if ((v58 & 0x80u) != 0) {
            uint64_t v38 = v57;
          }
          if (v37 == v38)
          {
            if ((v58 & 0x80u) == 0) {
              uint64_t v40 = (unsigned __int8 *)&__p;
            }
            else {
              uint64_t v40 = (unsigned __int8 *)__p;
            }
            if ((v36 & 0x80) != 0)
            {
              BOOL v48 = memcmp(*(const void **)a1, v40, *(void *)(a1 + 8)) == 0;
              goto LABEL_94;
            }
            if (*(unsigned char *)(a1 + 23))
            {
              uint64_t v41 = v36 - 1;
              uint64_t v42 = (unsigned __int8 *)a1;
              do
              {
                int v44 = *v42++;
                int v43 = v44;
                int v46 = *v40++;
                int v45 = v46;
                BOOL v17 = v41-- != 0;
                char v47 = v17;
                BOOL v48 = v43 == v45;
              }
              while (v43 == v45 && (v47 & 1) != 0);
LABEL_94:
              if ((v39 & 0x80000000) == 0) {
                goto LABEL_96;
              }
              goto LABEL_95;
            }
            BOOL v48 = 1;
            if (((char)v58 & 0x80000000) == 0)
            {
LABEL_96:
              if (!v48)
              {
                exception = __cxa_allocate_exception(0x28uLL);
                sub_19E297DB4((uint64_t)exception, "Invalid acquisition: ", a1);
                __cxa_throw(exception, (struct type_info *)&unk_1EF0A45D8, (void (*)(void *))sub_19E28A884);
              }
              sub_19E2933F8((uint64_t)&v53, a2);
              uint64_t v50 = a3[3];
              if (v50)
              {
                if ((void *)v50 == a3)
                {
                  unsigned __int8 v60 = v59;
                  (*(void (**)(void *, void *))(*a3 + 24))(a3, v59);
LABEL_102:
                  uint64_t v51 = a3[7];
                  if (v51)
                  {
                    if ((void *)v51 == a3 + 4)
                    {
                      long long v62 = v61;
                      (*(void (**)(uint64_t, void *))(*(void *)v51 + 24))(v51, v61);
LABEL_107:
                      sub_19E2D599C((uint64_t)&v53);
                    }
                    uint64_t v51 = (*(uint64_t (**)(uint64_t))(*(void *)v51 + 16))(v51);
                  }
                  long long v62 = (void *)v51;
                  goto LABEL_107;
                }
                uint64_t v50 = (*(uint64_t (**)(uint64_t))(*(void *)v50 + 16))(v50);
              }
              unsigned __int8 v60 = (void *)v50;
              goto LABEL_102;
            }
          }
          else
          {
            BOOL v48 = 0;
            if (((char)v58 & 0x80000000) == 0) {
              goto LABEL_96;
            }
          }
LABEL_95:
          operator delete(__p);
          goto LABEL_96;
        }
        uint64_t v26 = v21 - 1;
        uint64_t v27 = (unsigned __int8 *)a1;
        do
        {
          int v29 = *v27++;
          int v28 = v29;
          int v31 = *v25++;
          int v30 = v31;
          BOOL v17 = v26-- != 0;
          char v32 = v17;
          BOOL v33 = v28 == v30;
        }
        while (v28 == v30 && (v32 & 1) != 0);
      }
      if ((v24 & 0x80000000) == 0) {
        goto LABEL_59;
      }
      goto LABEL_65;
    }
    uint64_t v11 = v6 - 1;
    uint64_t v12 = (unsigned __int8 *)a1;
    do
    {
      int v14 = *v12++;
      int v13 = v14;
      int v16 = *p_p++;
      int v15 = v16;
      BOOL v17 = v11-- != 0;
      char v18 = v17;
      BOOL v19 = v13 == v15;
    }
    while (v13 == v15 && (v18 & 1) != 0);
  }
  if ((v9 & 0x80000000) == 0) {
    goto LABEL_23;
  }
  goto LABEL_29;
}

void sub_19E290C10(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19E290C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,char *a61)
{
  if (a61 == &a58)
  {
    sub_19E32FB88();
  }
  else if (a61)
  {
    (*(void (**)(void))(*(void *)a61 + 40))();
    sub_19E2934EC((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  sub_19E2934EC((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_19E290D18()
{
  sub_19E28F374((void *)(v0 - 200));
  JUMPOUT(0x19E290D24);
}

void sub_19E290D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  uint64_t v42 = *(void *)(v40 - 112);
  if (v42 == v40 - 136)
  {
    sub_19E32FB88();
  }
  else if (v42)
  {
    (*(void (**)(uint64_t))(*(void *)v42 + 40))(v42);
    sub_19E2934EC((uint64_t)&a40);
    _Unwind_Resume(a1);
  }
  sub_19E2934EC((uint64_t)&a40);
  _Unwind_Resume(a1);
}

uint64_t sub_19E290DC0(uint64_t a1, const char *a2, uint64_t a3)
{
  double v4 = (const char **)(a1 + 16);
  sub_19E2941D4("[InvalidArgument] ", a2, a3);
  *(void *)a1 = &unk_1EF0A8798;
  CFTypeRef v5 = (const char *)v4;
  if (*(char *)(a1 + 39) < 0) {
    CFTypeRef v5 = *v4;
  }
  std::logic_error::logic_error((std::logic_error *)a1, v5);
  *(void *)a1 = &unk_1EF0A8798;
  return a1;
}

void sub_19E290E3C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void HTTuneParameters(const void *a1, const void *a2, void *a3, void *a4)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  id v8 = a4;
  if (a1) {
    CFRetain(a1);
  }
  sub_19E2935E8(&cf, a1);
  if (a2) {
    CFRetain(a2);
  }
  sub_19E159840(&v29, a2);
  CFArrayRef v9 = (const __CFArray *)cf;
  if (cf) {
    CFRetain(cf);
  }
  CFArrayRef v26 = v9;
  CFDictionaryRef v10 = (const __CFDictionary *)v29;
  if (v29) {
    CFRetain(v29);
  }
  CFDictionaryRef v25 = v10;
  sub_19E28C214(&v26, &v25, (uint64_t)&v27);
  if (v10) {
    CFRelease(v10);
  }
  if (v9) {
    CFRelease(v9);
  }
  int v11 = v28[0];
  uint64_t v12 = MEMORY[0x19F3BC450](v7);
  uint64_t v51 = 0;
  int v13 = v28[0];
  if (v8)
  {
    int v14 = MEMORY[0x19F3BC450](v28, v8);
    __p = &unk_1EF0ABBA8;
    uint64_t v36 = v14;
    int v37 = v13;
  }
  else
  {
    __p = &unk_1EF0ABC00;
    LODWORD(v36) = v28[0];
  }
  p_p = &__p;
  sub_19E2F16A0(&__p, v50);
  if (p_p == &__p)
  {
    (*((void (**)(void **))__p + 4))(&__p);
  }
  else if (p_p)
  {
    (*((void (**)(void))*p_p + 5))();
  }
  if (!v29)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  sub_19E28C14C("Kernel", &__p);
  sub_19E28C14C("MaternFiveHalves", v45);
  sub_19E2F1AE8((const __CFDictionary *)v29, (const UInt8 *)&__p, v45, (uint64_t)v24);
  if (v46 < 0)
  {
    operator delete(v45[0]);
    if ((v38 & 0x80000000) == 0)
    {
LABEL_23:
      if (v29) {
        goto LABEL_24;
      }
      goto LABEL_32;
    }
  }
  else if ((v38 & 0x80000000) == 0)
  {
    goto LABEL_23;
  }
  operator delete(__p);
  if (v29)
  {
LABEL_24:
    sub_19E28C14C("Acquisition", &__p);
    sub_19E28C14C("UpperConfidenceBound", v45);
    sub_19E2F1AE8((const __CFDictionary *)v29, (const UInt8 *)&__p, v45, (uint64_t)v23);
    if (v46 < 0)
    {
      operator delete(v45[0]);
      if ((v38 & 0x80000000) == 0) {
        goto LABEL_26;
      }
    }
    else if ((v38 & 0x80000000) == 0)
    {
      goto LABEL_26;
    }
    operator delete(__p);
LABEL_26:
    uint64_t v15 = MEMORY[0x19F3BC450](v12);
    v42[0] = &unk_1EF0ABB50;
    v42[1] = v15;
    int v43 = v11;
    int v44 = v42;
    uint64_t v16 = (uint64_t)v51;
    if (v51)
    {
      if (v51 == v50)
      {
        uint64_t v41 = v40;
        (*(void (**)(void *, void *))(v50[0] + 24))(v50, v40);
LABEL_36:
        sub_19E291BF8((uint64_t)v45, (uint64_t)v42, (uint64_t)v40);
        if (v41 == v40)
        {
          (*(void (**)(void *))(v40[0] + 32))(v40);
          char v18 = v44;
          if (v44 != v42)
          {
LABEL_40:
            if (v18) {
              (*(void (**)(void *))(*v18 + 40))(v18);
            }
LABEL_44:
            sub_19E2933F8((uint64_t)&v22, (uint64_t)&v27);
            uint64_t v19 = (uint64_t)v47;
            if (v47)
            {
              if (v47 == v45)
              {
                char v32 = v31;
                (*((void (**)(void **, void *))v45[0] + 3))(v45, v31);
LABEL_49:
                uint64_t v20 = (uint64_t)v49;
                if (v49)
                {
                  if (v49 == &v48)
                  {
                    uint64_t v34 = v33;
                    (*(void (**)(uint64_t *, void *))(*v49 + 24))(v49, v33);
LABEL_54:
                    sub_19E28DA14((uint64_t)v24, (uint64_t)v23, (uint64_t)&v22, v31);
                  }
                  uint64_t v20 = (*(uint64_t (**)(uint64_t *))(*v49 + 16))(v49);
                }
                uint64_t v34 = (void *)v20;
                goto LABEL_54;
              }
              uint64_t v19 = (*((uint64_t (**)(void **))*v47 + 2))(v47);
            }
            char v32 = (void *)v19;
            goto LABEL_49;
          }
        }
        else
        {
          if (v41) {
            (*(void (**)(void *))(*v41 + 40))(v41);
          }
          char v18 = v44;
          if (v44 != v42) {
            goto LABEL_40;
          }
        }
        (*(void (**)(void *))(v42[0] + 32))(v42);
        goto LABEL_44;
      }
      uint64_t v16 = (*(uint64_t (**)(void *))(*v51 + 16))(v51);
    }
    uint64_t v41 = (void *)v16;
    goto LABEL_36;
  }
LABEL_32:
  BOOL v17 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(v17, "Could not construct");
  __cxa_throw(v17, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_19E291898(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,__int16 a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a2)
  {
    if (a46 < 0) {
      operator delete(__p);
    }
    sub_19E291D48((void *)(v67 - 104));

    sub_19E2934EC((uint64_t)&a49);
    sub_19E1551E8(&a64);
    sub_19E265838(&a65);
    if (a2 == 4)
    {
      unint64_t v70 = __cxa_begin_catch(a1);
      if (v65) {
        CFErrorRef *v65 = sub_19E291FB8((uint64_t)v70);
      }
    }
    else if (a2 == 3)
    {
      uint64_t v71 = __cxa_begin_catch(a1);
      if (v65) {
        CFErrorRef *v65 = sub_19E291FB8((uint64_t)v71);
      }
    }
    else
    {
      uint64_t v72 = __cxa_begin_catch(a1);
      if (a2 == 2 && v65) {
        CFErrorRef *v65 = sub_19E291FB8((uint64_t)v72);
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x19E291818);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_19E291BF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 + 24);
  if (v5)
  {
    if (v5 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
      uint64_t v6 = *(void *)(a3 + 24);
      if (!v6)
      {
LABEL_10:
        *(void *)(a1 + 56) = v6;
        return a1;
      }
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
      uint64_t v6 = *(void *)(a3 + 24);
      if (!v6) {
        goto LABEL_10;
      }
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
    uint64_t v6 = *(void *)(a3 + 24);
    if (!v6) {
      goto LABEL_10;
    }
  }
  if (v6 != a3)
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
    goto LABEL_10;
  }
  *(void *)(a1 + 56) = a1 + 32;
  (*(void (**)(void))(**(void **)(a3 + 24) + 24))(*(void *)(a3 + 24));
  return a1;
}

void sub_19E291D1C(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 + 24);
  if (v3 == v1)
  {
    sub_19E32FBBC(v1);
    _Unwind_Resume(a1);
  }
  sub_19E32FBE0(v3);
  _Unwind_Resume(a1);
}

void *sub_19E291D48(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void *sub_19E291DD8(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

uint64_t **sub_19E291E68(uint64_t **a1, uint64_t *a2)
{
  uint64_t v16 = 0;
  BOOL v17 = 0;
  uint64_t v18 = 0;
  sub_19E247444(&v16, *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3));
  __p = 0;
  int v14 = 0;
  uint64_t v15 = 0;
  sub_19E2476F4(&__p, a2[3], a2[4], 0x6DB6DB6DB6DB6DB7 * ((a2[4] - a2[3]) >> 3));
  sub_19E246C08(a1, (uint64_t *)&v16, (uint64_t *)&__p);
  double v4 = (char *)__p;
  if (__p)
  {
    uint64_t v5 = v14;
    uint64_t v6 = __p;
    if (v14 != __p)
    {
      do
      {
        id v7 = (void *)*((void *)v5 - 4);
        if (v7)
        {
          *((void *)v5 - 3) = v7;
          operator delete(v7);
        }
        if (*(v5 - 33) < 0) {
          operator delete(*((void **)v5 - 7));
        }
        v5 -= 56;
      }
      while (v5 != v4);
      uint64_t v6 = __p;
    }
    int v14 = v4;
    operator delete(v6);
  }
  id v8 = (char *)v16;
  if (v16)
  {
    CFArrayRef v9 = v17;
    CFDictionaryRef v10 = v16;
    if (v17 != v16)
    {
      do
      {
        int v11 = (void *)*((void *)v9 - 4);
        if (v11)
        {
          *((void *)v9 - 3) = v11;
          operator delete(v11);
        }
        if (*(v9 - 33) < 0) {
          operator delete(*((void **)v9 - 7));
        }
        v9 -= 56;
      }
      while (v9 != v8);
      CFDictionaryRef v10 = v16;
    }
    BOOL v17 = v8;
    operator delete(v10);
  }
  return a1;
}

CFErrorRef sub_19E291FB8(uint64_t a1)
{
  sub_19E2F1E64(a1, &userInfo);
  CFErrorRef v1 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], @"com.apple.HyperTune", 0, userInfo);
  if (userInfo) {
    CFRelease(userInfo);
  }
  return v1;
}

void sub_19E29201C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E1551E8((const void **)va);
  _Unwind_Resume(a1);
}

void sub_19E292030(const char *a1@<X0>, void *a2@<X8>)
{
  int v28 = a1;
  size_t v4 = strlen(a1);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_19E13C370();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v10 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v10 = v4 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (_DWORD **)operator new(v10 + 1);
    size_t v26 = v5;
    unint64_t v27 = v11 | 0x8000000000000000;
    long long __dst = p_dst;
  }
  else
  {
    HIBYTE(v27) = v4;
    p_dst = &__dst;
    if (!v4)
    {
      LOBYTE(__dst) = 0;
      char v7 = HIBYTE(v27);
      if ((SHIBYTE(v27) & 0x80000000) == 0) {
        goto LABEL_5;
      }
      goto LABEL_22;
    }
  }
  memcpy(p_dst, a1, v5);
  *((unsigned char *)p_dst + v5) = 0;
  char v7 = HIBYTE(v27);
  if ((SHIBYTE(v27) & 0x80000000) == 0)
  {
LABEL_5:
    if (v7 != 4)
    {
      if (v7 != 9)
      {
        if (v7 != 12) {
          goto LABEL_52;
        }
        if (__dst != (_DWORD *)0x566D756D696E694DLL || v26 != 1702194273)
        {
          if (__dst != (_DWORD *)0x566D756D6978614DLL || v26 != 1702194273) {
            goto LABEL_52;
          }
          goto LABEL_68;
        }
        goto LABEL_61;
      }
      if (__dst != (_DWORD *)0x6F69736E656D6944 || v26 != 110)
      {
        uint64_t v16 = (uint64_t *)&__dst;
        goto LABEL_44;
      }
LABEL_62:
      uint64_t v22 = @"HTParameterDimensionKey";
      CFRetain(@"HTParameterDimensionKey");
      goto LABEL_69;
    }
    if (__dst != 1701869908)
    {
      if (__dst != 1701667150) {
        goto LABEL_52;
      }
      goto LABEL_63;
    }
    goto LABEL_60;
  }
LABEL_22:
  size_t v12 = v26;
  if (v26 == 4)
  {
    if (*__dst == 1701667150)
    {
LABEL_63:
      uint64_t v22 = @"HTParameterNameKey";
      CFRetain(@"HTParameterNameKey");
      goto LABEL_69;
    }
    if (*__dst == 1701869908)
    {
LABEL_60:
      uint64_t v22 = @"HTParameterTypeKey";
      CFRetain(@"HTParameterTypeKey");
LABEL_69:
      sub_19E1592DC(a2, v22);
      goto LABEL_104;
    }
  }
  if (v26 == 12)
  {
    if (*(void *)__dst == 0x566D756D696E694DLL && __dst[2] == 1702194273)
    {
LABEL_61:
      uint64_t v22 = @"HTParameterMinimumValueKey";
      CFRetain(@"HTParameterMinimumValueKey");
      goto LABEL_69;
    }
    size_t v12 = v26;
    if (*(void *)__dst == 0x566D756D6978614DLL && __dst[2] == 1702194273)
    {
LABEL_68:
      uint64_t v22 = @"HTParameterMaximumValueKey";
      CFRetain(@"HTParameterMaximumValueKey");
      goto LABEL_69;
    }
  }
  if (v12 != 9) {
    goto LABEL_52;
  }
  if (*(void *)__dst == 0x6F69736E656D6944 && *((unsigned char *)__dst + 8) == 110) {
    goto LABEL_62;
  }
  if (v26 != 9) {
    goto LABEL_52;
  }
  uint64_t v16 = (uint64_t *)__dst;
LABEL_44:
  uint64_t v18 = *v16;
  int v19 = *((unsigned __int8 *)v16 + 8);
  if (v18 != 0x687469726F676C41 || v19 != 109)
  {
LABEL_52:
    if (sub_19E292704(&__dst, "Kernel"))
    {
      uint64_t v21 = @"HTKernelKey";
    }
    else if (sub_19E292704(&__dst, "Acquisition"))
    {
      uint64_t v21 = @"HTAcquisitionKey";
    }
    else if (sub_19E292704(&__dst, "CallbackInterval"))
    {
      uint64_t v21 = @"HTCallbackIntervalKey";
    }
    else if (sub_19E292704(&__dst, "MaxIterations"))
    {
      uint64_t v21 = @"HTStopConditionMaxIterationsKey";
    }
    else if (sub_19E292704(&__dst, "Patience"))
    {
      uint64_t v21 = @"HTStopConditionPatienceKey";
    }
    else if (sub_19E292704(&__dst, "MinDelta"))
    {
      uint64_t v21 = @"HTStopConditionMinDeltaKey";
    }
    else if (sub_19E292704(&__dst, "Direction"))
    {
      uint64_t v21 = @"HTOptimizationDirectionKey";
    }
    else if (sub_19E292704(&__dst, "RandomSeed"))
    {
      uint64_t v21 = @"HTRandomSeedKey";
    }
    else if (sub_19E292704(&__dst, "InitialParameterValues"))
    {
      uint64_t v21 = @"HTInitialParameterValuesKey";
    }
    else if (sub_19E292704(&__dst, "Integral"))
    {
      uint64_t v21 = @"HTParameterTypeIntegral";
    }
    else if (sub_19E292704(&__dst, "Continuous"))
    {
      uint64_t v21 = @"HTParameterTypeContinuous";
    }
    else if (sub_19E292704(&__dst, "Random"))
    {
      uint64_t v21 = @"HTAlgorithmRandom";
    }
    else if (sub_19E292704(&__dst, "GaussianProcess"))
    {
      uint64_t v21 = @"HTAlgorithmGaussianProcess";
    }
    else if (sub_19E292704(&__dst, "SquaredExponential"))
    {
      uint64_t v21 = @"HTKernelSquaredExponential";
    }
    else if (sub_19E292704(&__dst, "ARDSquaredExponential"))
    {
      uint64_t v21 = @"HTKernelARDSquaredExponential";
    }
    else if (sub_19E292704(&__dst, "MaternFiveHalves"))
    {
      uint64_t v21 = @"HTKernelMaternFiveHalves";
    }
    else if (sub_19E292704(&__dst, "ProbabilityOfImprovement"))
    {
      uint64_t v21 = @"HTAcquisitionProbabilityOfImprovement";
    }
    else if (sub_19E292704(&__dst, "ExpectedImprovement"))
    {
      uint64_t v21 = @"HTAcquisitionExpectedImprovement";
    }
    else if (sub_19E292704(&__dst, "UpperConfidenceBound"))
    {
      uint64_t v21 = @"HTAcquisitionUpperConfidenceBound";
    }
    else if (sub_19E292704(&__dst, "Maximize"))
    {
      uint64_t v21 = @"HTOptimizationDirectionMaximize";
    }
    else
    {
      if (!sub_19E292704(&__dst, "Minimize"))
      {
        sub_19E2927EC("Unexpected HyperTune key: ", &v28);
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, &v24);
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
        __cxa_throw(exception, (struct type_info *)off_1E599CD18, MEMORY[0x1E4FBA1E8]);
      }
      uint64_t v21 = @"HTOptimizationDirectionMinimize";
    }
    goto LABEL_103;
  }
  uint64_t v21 = @"HTAlgorithmKey";
LABEL_103:
  sub_19E2927A0(v21, a2);
LABEL_104:
  if (SHIBYTE(v27) < 0) {
    operator delete(__dst);
  }
}

void sub_19E292690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

BOOL sub_19E292704(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    if (v4 == a1[1])
    {
      if (v4 == -1) {
        goto LABEL_10;
      }
      a1 = (void *)*a1;
      return memcmp(a1, __s, v4) == 0;
    }
  }
  else if (v4 == *((unsigned __int8 *)a1 + 23))
  {
    if (v4 == -1) {
LABEL_10:
    }
      sub_19E13DF28();
    return memcmp(a1, __s, v4) == 0;
  }
  return 0;
}

void *sub_19E2927A0@<X0>(CFTypeRef cf@<X0>, void *a2@<X8>)
{
  if (cf) {
    CFRetain(cf);
  }

  return sub_19E1592DC(a2, cf);
}

uint64_t sub_19E2927EC(const char *a1, const char **a2)
{
  sub_19E13D8EC((uint64_t)v8);
  size_t v4 = strlen(a1);
  sub_19E13DB94(v8, (uint64_t)a1, v4);
  size_t v5 = *a2;
  size_t v6 = strlen(v5);
  sub_19E13DB94(v8, (uint64_t)v5, v6);
  std::stringbuf::str();
  v8[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v8 + *(void *)(v8[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v8[1] = MEMORY[0x1E4FBA470] + 16;
  if (v9 < 0) {
    operator delete((void *)v8[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x19F3BBB40](&v10);
}

void sub_19E29294C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E13DA90((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E292960(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E13DA90((uint64_t)va);
  _Unwind_Resume(a1);
}

std::logic_error *sub_19E292974(std::logic_error *a1, const std::string *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
  return result;
}

std::runtime_error *sub_19E2929A8@<X0>(std::runtime_error *a1@<X8>)
{
  return std::runtime_error::runtime_error(a1, "Could not construct");
}

void sub_19E2929B8(uint64_t *a1@<X0>, void *a2@<X8>)
{
  __p = 0;
  char v7 = 0;
  uint64_t v8 = 0;
  sub_19E246830(&__p, *a1, a1[1], 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4));
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_19E292F58((long long *)__p, v7, (uint64_t)a2);
  uint64_t v3 = (long long *)__p;
  if (__p)
  {
    size_t v4 = v7;
    size_t v5 = __p;
    if (v7 != __p)
    {
      do
      {
        if (*((char *)v4 - 25) < 0) {
          operator delete(*((void **)v4 - 6));
        }
        v4 -= 3;
      }
      while (v4 != v3);
      size_t v5 = __p;
    }
    char v7 = v3;
    operator delete(v5);
  }
}

void sub_19E292A64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E13A748(v2);
  sub_19E244580((void **)va);
  _Unwind_Resume(a1);
}

void sub_19E292A80(uint64_t a1@<X0>, void *a2@<X8>)
{
  __p = 0;
  char v7 = 0;
  uint64_t v8 = 0;
  sub_19E246A1C(&__p, *(void *)(a1 + 24), *(void *)(a1 + 32), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_19E2930E8((long long *)__p, v7, (uint64_t)a2);
  uint64_t v3 = (long long *)__p;
  if (__p)
  {
    size_t v4 = v7;
    size_t v5 = __p;
    if (v7 != __p)
    {
      do
      {
        if (*((char *)v4 - 17) < 0) {
          operator delete(*((void **)v4 - 5));
        }
        size_t v4 = (long long *)((char *)v4 - 40);
      }
      while (v4 != v3);
      size_t v5 = __p;
    }
    char v7 = v3;
    operator delete(v5);
  }
}

void sub_19E292B2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E13A748(v2);
  sub_19E2450B0((void **)va);
  _Unwind_Resume(a1);
}

char *sub_19E292B48(void **a1, uint64_t a2, std::string *__str, std::string *a4, uint64_t a5)
{
  size_t v5 = *a1;
  uint64_t v6 = (a2 - (uint64_t)*a1) / 24;
  uint64_t v7 = (uint64_t)*a1 + 24 * v6;
  if (a5 < 1) {
    return (char *)v7;
  }
  char v9 = __str;
  uint64_t v11 = a1[2];
  size_t v12 = (long long *)a1[1];
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v11 - (unsigned char *)v12) >> 3)) >= a5)
  {
    uint64_t v18 = (uint64_t)v12 - v7;
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v12 - v7) >> 3)) >= a5)
    {
      uint64_t v20 = &__str[a5];
      CFDictionaryRef v25 = (char *)a1[1];
      goto LABEL_42;
    }
    uint64_t v20 = (std::string *)((char *)__str + 8 * (((uint64_t)v12 - v7) >> 3));
    if (v20 != a4)
    {
      uint64_t v21 = 0;
      do
      {
        uint64_t v23 = (char *)v12 + v21 * 24;
        std::string v24 = &v20[v21];
        if (SHIBYTE(v20[v21].__r_.__value_.__r.__words[2]) < 0)
        {
          sub_19E13C2D0((unsigned char *)v12 + v21 * 24, v24->__r_.__value_.__l.__data_, v24->__r_.__value_.__l.__size_);
        }
        else
        {
          long long v22 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
          *((void *)v23 + 2) = *((void *)&v24->__r_.__value_.__l + 2);
          *(_OWORD *)uint64_t v23 = v22;
        }
        ++v21;
      }
      while (&v20[v21] != a4);
      CFDictionaryRef v25 = (char *)v12 + v21 * 24;
      a1[1] = (char *)v12 + v21 * 24;
      if (v18 < 1) {
        return (char *)v7;
      }
LABEL_42:
      uint64_t v39 = v7 + 24 * a5;
      uint64_t v40 = (long long *)&v25[-24 * a5];
      uint64_t v41 = v25;
      if (v40 < v12)
      {
        uint64_t v41 = v25;
        do
        {
          long long v42 = *v40;
          *((void *)v41 + 2) = *((void *)v40 + 2);
          *(_OWORD *)uint64_t v41 = v42;
          v41 += 24;
          *((void *)v40 + 1) = 0;
          *((void *)v40 + 2) = 0;
          *(void *)uint64_t v40 = 0;
          uint64_t v40 = (long long *)((char *)v40 + 24);
        }
        while (v40 < v12);
      }
      a1[1] = v41;
      if (v25 != (char *)v39)
      {
        int v43 = v25 - 24;
        uint64_t v44 = 8 * ((uint64_t)&v25[-v39] >> 3);
        do
        {
          if (v43[23] < 0) {
            operator delete(*(void **)v43);
          }
          int v45 = (long long *)(v7 + v44 - 24);
          long long v46 = *v45;
          *((void *)v43 + 2) = *(void *)(v7 + v44 - 8);
          *(_OWORD *)int v43 = v46;
          v43 -= 24;
          *(unsigned char *)(v7 + v44 - 1) = 0;
          *(unsigned char *)int v45 = 0;
          v44 -= 24;
        }
        while (v44);
      }
      if (v20 != v9)
      {
        char v47 = (std::string *)v7;
        do
          std::string::operator=(v47++, v9++);
        while (v9 != v20);
      }
      return (char *)v7;
    }
    CFDictionaryRef v25 = (char *)a1[1];
    a1[1] = v12;
    if (v18 >= 1) {
      goto LABEL_42;
    }
    return (char *)v7;
  }
  unint64_t v13 = a5 - 0x5555555555555555 * (((char *)v12 - v5) >> 3);
  if (v13 > 0xAAAAAAAAAAAAAAALL) {
    sub_19E13D694();
  }
  unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v5) >> 3);
  uint64_t v15 = 2 * v14;
  if (2 * v14 <= v13) {
    uint64_t v15 = v13;
  }
  if (v14 >= 0x555555555555555) {
    unint64_t v16 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v16 = v15;
  }
  if (v16)
  {
    if (v16 > 0xAAAAAAAAAAAAAAALL) {
      sub_19E13C418();
    }
    BOOL v17 = (char *)operator new(24 * v16);
  }
  else
  {
    BOOL v17 = 0;
  }
  size_t v26 = &v17[24 * v6];
  uint64_t v49 = v26;
  uint64_t v50 = &v17[24 * v16];
  uint64_t v27 = 24 * a5;
  int v28 = &v26[v27];
  do
  {
    if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_19E13C2D0(v26, v9->__r_.__value_.__l.__data_, v9->__r_.__value_.__l.__size_);
    }
    else
    {
      long long v29 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      *((void *)v26 + 2) = *((void *)&v9->__r_.__value_.__l + 2);
      *(_OWORD *)size_t v26 = v29;
    }
    v26 += 24;
    ++v9;
    v27 -= 24;
  }
  while (v27);
  int v30 = v49;
  int v31 = *a1;
  char v32 = v49;
  if (*a1 != (void *)v7)
  {
    BOOL v33 = v49;
    uint64_t v34 = v7;
    do
    {
      char v32 = v33 - 24;
      long long v35 = *(_OWORD *)(v34 - 24);
      *((void *)v33 - 1) = *(void *)(v34 - 8);
      *(_OWORD *)(v33 - 24) = v35;
      *(void *)(v34 - 16) = 0;
      *(void *)(v34 - 8) = 0;
      *(void *)(v34 - 24) = 0;
      v33 -= 24;
      v34 -= 24;
    }
    while ((void *)v34 != v31);
  }
  uint64_t v36 = a1[1];
  if (v36 != (void *)v7)
  {
    do
    {
      long long v37 = *(_OWORD *)v7;
      *((void *)v28 + 2) = *(void *)(v7 + 16);
      *(_OWORD *)int v28 = v37;
      v28 += 24;
      *(void *)(v7 + 8) = 0;
      *(void *)(v7 + 16) = 0;
      *(void *)uint64_t v7 = 0;
      v7 += 24;
    }
    while ((void *)v7 != v36);
    uint64_t v7 = (uint64_t)a1[1];
  }
  char v38 = *a1;
  *a1 = v32;
  a1[1] = v28;
  a1[2] = v50;
  while ((void *)v7 != v38)
  {
    if (*(char *)(v7 - 1) < 0) {
      operator delete(*(void **)(v7 - 24));
    }
    v7 -= 24;
  }
  if (v38) {
    operator delete(v38);
  }
  return v30;
}

void sub_19E292F40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E13D884((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E292F58(long long *a1, long long *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    for (unint64_t i = a1; i != a2; i += 3)
    {
      if (*((char *)i + 23) < 0)
      {
        sub_19E13C2D0(__p, *(void **)i, *((void *)i + 1));
        long long v8 = *(long long *)((char *)i + 24);
        int v17 = *((_DWORD *)i + 10);
        long long v16 = v8;
        if ((SHIBYTE(v15) & 0x80000000) == 0)
        {
LABEL_6:
          *(_OWORD *)long long __dst = *(_OWORD *)__p;
          uint64_t v19 = v15;
          goto LABEL_9;
        }
      }
      else
      {
        long long v6 = *i;
        uint64_t v15 = *((void *)i + 2);
        *(_OWORD *)__p = v6;
        long long v7 = *(long long *)((char *)i + 24);
        int v17 = *((_DWORD *)i + 10);
        long long v16 = v7;
        if ((SHIBYTE(v15) & 0x80000000) == 0) {
          goto LABEL_6;
        }
      }
      sub_19E13C2D0(__dst, __p[0], (unint64_t)__p[1]);
LABEL_9:
      unint64_t v9 = *(void *)(a3 + 8);
      if (v9 >= *(void *)(a3 + 16))
      {
        uint64_t v11 = sub_19E15A950((void **)a3, (uint64_t)__dst);
        int v12 = SHIBYTE(v19);
        *(void *)(a3 + 8) = v11;
        if (v12 < 0)
        {
          operator delete(__dst[0]);
          if ((SHIBYTE(v15) & 0x80000000) == 0) {
            continue;
          }
LABEL_14:
          operator delete(__p[0]);
          continue;
        }
        if (SHIBYTE(v15) < 0) {
          goto LABEL_14;
        }
      }
      else
      {
        long long v10 = *(_OWORD *)__dst;
        *(void *)(v9 + 16) = v19;
        *(_OWORD *)unint64_t v9 = v10;
        __dst[1] = 0;
        uint64_t v19 = 0;
        __dst[0] = 0;
        *(void *)(a3 + 8) = v9 + 24;
        if (SHIBYTE(v15) < 0) {
          goto LABEL_14;
        }
      }
    }
  }
  return a3;
}

void sub_19E29309C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if ((a14 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E2930E8(long long *a1, long long *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    for (unint64_t i = a1; i != a2; unint64_t i = (long long *)((char *)i + 40))
    {
      if (*((char *)i + 23) < 0)
      {
        sub_19E13C2D0(__p, *(void **)i, *((void *)i + 1));
        uint64_t v8 = *((void *)i + 3);
        int v17 = *((_DWORD *)i + 8);
        uint64_t v16 = v8;
        if ((SHIBYTE(v15) & 0x80000000) == 0)
        {
LABEL_6:
          *(_OWORD *)long long __dst = *(_OWORD *)__p;
          uint64_t v19 = v15;
          goto LABEL_9;
        }
      }
      else
      {
        long long v6 = *i;
        uint64_t v15 = *((void *)i + 2);
        *(_OWORD *)__p = v6;
        uint64_t v7 = *((void *)i + 3);
        int v17 = *((_DWORD *)i + 8);
        uint64_t v16 = v7;
        if ((SHIBYTE(v15) & 0x80000000) == 0) {
          goto LABEL_6;
        }
      }
      sub_19E13C2D0(__dst, __p[0], (unint64_t)__p[1]);
LABEL_9:
      unint64_t v9 = *(void *)(a3 + 8);
      if (v9 >= *(void *)(a3 + 16))
      {
        uint64_t v11 = sub_19E15A950((void **)a3, (uint64_t)__dst);
        int v12 = SHIBYTE(v19);
        *(void *)(a3 + 8) = v11;
        if (v12 < 0)
        {
          operator delete(__dst[0]);
          if ((SHIBYTE(v15) & 0x80000000) == 0) {
            continue;
          }
LABEL_14:
          operator delete(__p[0]);
          continue;
        }
        if (SHIBYTE(v15) < 0) {
          goto LABEL_14;
        }
      }
      else
      {
        long long v10 = *(_OWORD *)__dst;
        *(void *)(v9 + 16) = v19;
        *(_OWORD *)unint64_t v9 = v10;
        __dst[1] = 0;
        uint64_t v19 = 0;
        __dst[0] = 0;
        *(void *)(a3 + 8) = v9 + 24;
        if (SHIBYTE(v15) < 0) {
          goto LABEL_14;
        }
      }
    }
  }
  return a3;
}

void sub_19E29322C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if ((a14 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E293278(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_19E2932CC(void *result)
{
  if (!*result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_19E2929A8(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_19E293324(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t ***sub_19E293338(uint64_t ***a1, uint64_t **a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = *a2;
  size_t v4 = a2[1];
  int64_t v5 = (char *)v4 - (char *)*a2;
  if (v4 != *a2)
  {
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 5);
    if (v6 >= 0x2AAAAAAAAAAAAABLL) {
      sub_19E13D694();
    }
    uint64_t v7 = (uint64_t **)operator new(v5);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[12 * v6];
    do
    {
      uint64_t v8 = sub_19E291E68(v7, v3);
      v3 += 12;
      uint64_t v7 = v8 + 12;
    }
    while (v3 != v4);
    a1[1] = v7;
  }
  return a1;
}

void sub_19E2933D8(_Unwind_Exception *exception_object)
{
  if (*v1) {
    sub_19E32FC0C((uint64_t)(v1 + 1));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E2933F8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_19E246830((void *)a1, *(void *)a2, *(void *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4));
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  sub_19E246A1C((void *)(a1 + 24), *(void *)(a2 + 24), *(void *)(a2 + 32), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3));
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  char v6 = *(unsigned char *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 48) = v4;
  *(unsigned char *)(a1 + 112) = 0;
  if (*(unsigned char *)(a2 + 112))
  {
    sub_19E293338((uint64_t ***)(a1 + 88), (uint64_t **)(a2 + 88));
    *(unsigned char *)(a1 + 112) = 1;
  }
  return a1;
}

void sub_19E2934A8(_Unwind_Exception *a1)
{
  if (*(unsigned char *)(v1 + 112)) {
    sub_19E32FC68((void **)(v1 + 88));
  }
  sub_19E245FE8((void **)v1);
  _Unwind_Resume(a1);
}

void sub_19E2934D0(_Unwind_Exception *exception_object)
{
  if (*v1) {
    sub_19E32FCE4((uint64_t)v1, *v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E2934EC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 112))
  {
    uint64_t v2 = *(char ***)(a1 + 88);
    if (v2)
    {
      uint64_t v3 = *(char ***)(a1 + 96);
      long long v4 = *(void **)(a1 + 88);
      if (v3 != v2)
      {
        do
          uint64_t v3 = sub_19E2470C8(v3 - 12);
        while (v3 != v2);
        long long v4 = *(void **)(a1 + 88);
      }
      *(void *)(a1 + 96) = v2;
      operator delete(v4);
    }
  }
  uint64_t v5 = *(void *)(a1 + 24);
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(void **)(a1 + 24);
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 17) < 0) {
          operator delete(*(void **)(v6 - 40));
        }
        v6 -= 40;
      }
      while (v6 != v5);
      uint64_t v7 = *(void **)(a1 + 24);
    }
    *(void *)(a1 + 32) = v5;
    operator delete(v7);
  }
  uint64_t v8 = *(void ***)a1;
  if (*(void *)a1)
  {
    unint64_t v9 = *(void ***)(a1 + 8);
    long long v10 = *(void ***)a1;
    if (v9 != v8)
    {
      do
      {
        if (*((char *)v9 - 25) < 0) {
          operator delete(*(v9 - 6));
        }
        v9 -= 6;
      }
      while (v9 != v8);
      long long v10 = *(void ***)a1;
    }
    *(void *)(a1 + 8) = v8;
    operator delete(v10);
  }
  return a1;
}

void *sub_19E2935E8(void *a1, CFTypeRef cf)
{
  *a1 = cf;
  if (cf)
  {
    CFTypeID v3 = CFGetTypeID(cf);
    if (v3 != CFArrayGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  return a1;
}

void sub_19E293670(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(a1);
}

void sub_19E2936A0(long long **a1@<X0>, const std::string *a2@<X1>, uint64_t a3@<X8>)
{
  long long v4 = *a1;
  uint64_t v5 = a1[1];
  if (*a1 == v5)
  {
LABEL_45:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_19E292974(exception, a2);
    __cxa_throw(exception, (struct type_info *)off_1E599CD18, MEMORY[0x1E4FBA1E8]);
  }
  while (1)
  {
    if (*((char *)v4 + 23) < 0)
    {
      sub_19E13C2D0(__dst, *(void **)v4, *((void *)v4 + 1));
      char v32 = 0;
      BOOL v33 = 0;
      uint64_t v34 = 0;
      unint64_t v9 = (unsigned char *)*((void *)v4 + 3);
      uint64_t v11 = (unsigned char *)*((void *)v4 + 4);
      int64_t v10 = v11 - v9;
      if (v11 == v9)
      {
LABEL_6:
        int v35 = *((_DWORD *)v4 + 12);
        if ((SHIBYTE(v31) & 0x80000000) == 0) {
          goto LABEL_7;
        }
        goto LABEL_11;
      }
    }
    else
    {
      long long v7 = *v4;
      uint64_t v31 = *((void *)v4 + 2);
      *(_OWORD *)long long __dst = v7;
      char v32 = 0;
      BOOL v33 = 0;
      uint64_t v34 = 0;
      unint64_t v9 = (unsigned char *)*((void *)v4 + 3);
      uint64_t v8 = (unsigned char *)*((void *)v4 + 4);
      int64_t v10 = v8 - v9;
      if (v8 == v9) {
        goto LABEL_6;
      }
    }
    if (v10 < 0) {
      sub_19E13D694();
    }
    char v32 = operator new(v10);
    BOOL v33 = v32;
    int v12 = (char *)v32 + 8 * (v10 >> 3);
    uint64_t v34 = v12;
    memcpy(v32, v9, v10);
    BOOL v33 = v12;
    int v35 = *((_DWORD *)v4 + 12);
    if ((SHIBYTE(v31) & 0x80000000) == 0)
    {
LABEL_7:
      *(_OWORD *)__p = *(_OWORD *)__dst;
      uint64_t v29 = v31;
      goto LABEL_12;
    }
LABEL_11:
    sub_19E13C2D0(__p, __dst[0], (unint64_t)__dst[1]);
LABEL_12:
    if (v29 >= 0) {
      unint64_t v13 = (void *)HIBYTE(v29);
    }
    else {
      unint64_t v13 = __p[1];
    }
    std::string::size_type size = (void *)HIBYTE(a2->__r_.__value_.__r.__words[2]);
    int v15 = (char)size;
    if ((char)size < 0) {
      std::string::size_type size = (void *)a2->__r_.__value_.__l.__size_;
    }
    if (v13 != size)
    {
      if (v29 < 0) {
        operator delete(__p[0]);
      }
      goto LABEL_34;
    }
    if (v15 >= 0) {
      uint64_t v16 = a2;
    }
    else {
      uint64_t v16 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    }
    if (v29 < 0)
    {
      uint64_t v21 = __p[0];
      int v22 = memcmp(__p[0], v16, (size_t)__p[1]);
      operator delete(v21);
      if (!v22) {
        break;
      }
      goto LABEL_34;
    }
    if (!HIBYTE(v29)) {
      break;
    }
    uint64_t v17 = 0;
    do
    {
      int v18 = *((unsigned __int8 *)__p + v17);
      int v19 = v16->__r_.__value_.__s.__data_[v17];
    }
    while (v18 == v19 && HIBYTE(v29) - 1 != v17++);
    if (v18 == v19) {
      break;
    }
LABEL_34:
    if (v32)
    {
      BOOL v33 = v32;
      operator delete(v32);
    }
    if (SHIBYTE(v31) < 0) {
      operator delete(__dst[0]);
    }
    long long v4 = (long long *)((char *)v4 + 56);
    if (v4 == v5) {
      goto LABEL_45;
    }
  }
  *(_OWORD *)a3 = *(_OWORD *)__dst;
  uint64_t v23 = v32;
  *(void *)(a3 + 16) = v31;
  __dst[1] = 0;
  uint64_t v31 = 0;
  __dst[0] = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  int64_t v24 = v33 - v23;
  if (v33 != v23)
  {
    if (v24 < 0) {
      sub_19E13D694();
    }
    CFDictionaryRef v25 = (char *)operator new(v33 - v23);
    *(void *)(a3 + 24) = v25;
    size_t v26 = &v25[8 * (v24 >> 3)];
    *(void *)(a3 + 40) = v26;
    memcpy(v25, v23, v24);
    *(void *)(a3 + 32) = v26;
  }
  *(_DWORD *)(a3 + 48) = v35;
  if (v23)
  {
    BOOL v33 = v23;
    operator delete(v23);
    if (SHIBYTE(v31) < 0) {
      operator delete(__dst[0]);
    }
  }
}

void sub_19E29395C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  uint64_t v8 = *v6;
  if (*v6)
  {
    *(void *)(v5 + 32) = v8;
    operator delete(v8);
    if ((*(char *)(v5 + 23) & 0x80000000) == 0)
    {
LABEL_3:
      sub_19E293278((uint64_t)va);
      _Unwind_Resume(a1);
    }
  }
  else if ((*(char *)(v5 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v5);
  sub_19E293278((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E2939A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_19E293278((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E2939BC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19E2939D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20)
{
  if (__p)
  {
    operator delete(__p);
    if ((a18 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a18 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a13);
  _Unwind_Resume(exception_object);
}

void sub_19E293A1C(uint64_t a1@<X0>, const std::string *a2@<X1>, uint64_t a3@<X8>)
{
  long long v4 = *(long long **)(a1 + 24);
  uint64_t v5 = *(long long **)(a1 + 32);
  if (v4 == v5)
  {
LABEL_45:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_19E292974(exception, a2);
    __cxa_throw(exception, (struct type_info *)off_1E599CD18, MEMORY[0x1E4FBA1E8]);
  }
  while (1)
  {
    if (*((char *)v4 + 23) < 0)
    {
      sub_19E13C2D0(__dst, *(void **)v4, *((void *)v4 + 1));
      char v32 = 0;
      BOOL v33 = 0;
      uint64_t v34 = 0;
      unint64_t v9 = (unsigned char *)*((void *)v4 + 3);
      uint64_t v11 = (unsigned char *)*((void *)v4 + 4);
      int64_t v10 = v11 - v9;
      if (v11 == v9)
      {
LABEL_6:
        int v35 = *((_DWORD *)v4 + 12);
        if ((SHIBYTE(v31) & 0x80000000) == 0) {
          goto LABEL_7;
        }
        goto LABEL_11;
      }
    }
    else
    {
      long long v7 = *v4;
      uint64_t v31 = *((void *)v4 + 2);
      *(_OWORD *)long long __dst = v7;
      char v32 = 0;
      BOOL v33 = 0;
      uint64_t v34 = 0;
      unint64_t v9 = (unsigned char *)*((void *)v4 + 3);
      uint64_t v8 = (unsigned char *)*((void *)v4 + 4);
      int64_t v10 = v8 - v9;
      if (v8 == v9) {
        goto LABEL_6;
      }
    }
    if (v10 < 0) {
      sub_19E13D694();
    }
    char v32 = operator new(v10);
    BOOL v33 = v32;
    int v12 = (char *)v32 + 4 * (v10 >> 2);
    uint64_t v34 = v12;
    memcpy(v32, v9, v10);
    BOOL v33 = v12;
    int v35 = *((_DWORD *)v4 + 12);
    if ((SHIBYTE(v31) & 0x80000000) == 0)
    {
LABEL_7:
      *(_OWORD *)__p = *(_OWORD *)__dst;
      uint64_t v29 = v31;
      goto LABEL_12;
    }
LABEL_11:
    sub_19E13C2D0(__p, __dst[0], (unint64_t)__dst[1]);
LABEL_12:
    if (v29 >= 0) {
      unint64_t v13 = (void *)HIBYTE(v29);
    }
    else {
      unint64_t v13 = __p[1];
    }
    std::string::size_type size = (void *)HIBYTE(a2->__r_.__value_.__r.__words[2]);
    int v15 = (char)size;
    if ((char)size < 0) {
      std::string::size_type size = (void *)a2->__r_.__value_.__l.__size_;
    }
    if (v13 != size)
    {
      if (v29 < 0) {
        operator delete(__p[0]);
      }
      goto LABEL_34;
    }
    if (v15 >= 0) {
      uint64_t v16 = a2;
    }
    else {
      uint64_t v16 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    }
    if (v29 < 0)
    {
      uint64_t v21 = __p[0];
      int v22 = memcmp(__p[0], v16, (size_t)__p[1]);
      operator delete(v21);
      if (!v22) {
        break;
      }
      goto LABEL_34;
    }
    if (!HIBYTE(v29)) {
      break;
    }
    uint64_t v17 = 0;
    do
    {
      int v18 = *((unsigned __int8 *)__p + v17);
      int v19 = v16->__r_.__value_.__s.__data_[v17];
    }
    while (v18 == v19 && HIBYTE(v29) - 1 != v17++);
    if (v18 == v19) {
      break;
    }
LABEL_34:
    if (v32)
    {
      BOOL v33 = v32;
      operator delete(v32);
    }
    if (SHIBYTE(v31) < 0) {
      operator delete(__dst[0]);
    }
    long long v4 = (long long *)((char *)v4 + 56);
    if (v4 == v5) {
      goto LABEL_45;
    }
  }
  *(_OWORD *)a3 = *(_OWORD *)__dst;
  uint64_t v23 = v32;
  *(void *)(a3 + 16) = v31;
  __dst[1] = 0;
  uint64_t v31 = 0;
  __dst[0] = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  int64_t v24 = v33 - v23;
  if (v33 != v23)
  {
    if (v24 < 0) {
      sub_19E13D694();
    }
    CFDictionaryRef v25 = (char *)operator new(v33 - v23);
    *(void *)(a3 + 24) = v25;
    size_t v26 = &v25[4 * (v24 >> 2)];
    *(void *)(a3 + 40) = v26;
    memcpy(v25, v23, v24);
    *(void *)(a3 + 32) = v26;
  }
  *(_DWORD *)(a3 + 48) = v35;
  if (v23)
  {
    BOOL v33 = v23;
    operator delete(v23);
    if (SHIBYTE(v31) < 0) {
      operator delete(__dst[0]);
    }
  }
}

void sub_19E293CD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  uint64_t v8 = *v6;
  if (*v6)
  {
    *(void *)(v5 + 32) = v8;
    operator delete(v8);
    if ((*(char *)(v5 + 23) & 0x80000000) == 0)
    {
LABEL_3:
      sub_19E293278((uint64_t)va);
      _Unwind_Resume(a1);
    }
  }
  else if ((*(char *)(v5 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v5);
  sub_19E293278((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E293D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_19E293278((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E293D38(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19E293D4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20)
{
  if (__p)
  {
    operator delete(__p);
    if ((a18 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a18 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a13);
  _Unwind_Resume(exception_object);
}

CFArrayRef sub_19E293D98(char **a1)
{
  unint64_t v1 = (unint64_t)a1[1];
  if (!v1)
  {
    CFTypeID v3 = 0;
    long long v4 = 0;
    goto LABEL_13;
  }
  if (v1 >> 61) {
    sub_19E13D694();
  }
  CFTypeID v3 = (char *)operator new(8 * v1);
  bzero(v3, 8 * v1);
  long long v4 = &v3[8 * v1];
  uint64_t v5 = *a1;
  unint64_t v6 = (v1 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  if (v6 < 3)
  {
    long long v7 = *a1;
    uint64_t v8 = v3;
LABEL_11:
    int v15 = &v5[8 * v1];
    do
    {
      uint64_t v16 = *(void *)v7;
      v7 += 8;
      *(void *)uint64_t v8 = v16;
      v8 += 8;
    }
    while (v7 != v15);
    goto LABEL_13;
  }
  long long v7 = *a1;
  uint64_t v8 = v3;
  if ((unint64_t)(v3 - v5) < 0x20) {
    goto LABEL_11;
  }
  uint64_t v9 = 0;
  unint64_t v10 = v6 + 1;
  uint64_t v11 = 8 * (v10 & 0x3FFFFFFFFFFFFFFCLL);
  long long v7 = &v5[v11];
  uint64_t v8 = &v3[v11];
  uint64_t v12 = v10 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    unint64_t v13 = &v3[v9];
    long long v14 = *(_OWORD *)&v5[v9 + 16];
    *(_OWORD *)unint64_t v13 = *(_OWORD *)&v5[v9];
    *((_OWORD *)v13 + 1) = v14;
    v9 += 32;
    v12 -= 4;
  }
  while (v12);
  if (v10 != (v10 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_11;
  }
LABEL_13:
  CFArrayRef v17 = CFArrayCreate(0, (const void **)v3, (v4 - v3) >> 3, MEMORY[0x1E4F1D510]);
  if (!v17)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v3) {
    operator delete(v3);
  }
  return v17;
}

void sub_19E293F0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  __cxa_free_exception(v12);
  if (v11) {
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

unint64_t sub_19E293F48@<X0>(const __CFArray *a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  if (!a1 || CFArrayGetCount(a1) <= a2 || (CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a1, a2)) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_19E294048(exception);
    goto LABEL_10;
  }
  CFTypeID TypeID = CFStringGetTypeID();
  if (TypeID != CFGetTypeID(ValueAtIndex))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_19E15A3B4(exception);
LABEL_10:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }

  return sub_19E15A3C4(ValueAtIndex, a3);
}

void sub_19E294018(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19E294034(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *sub_19E294048@<X0>(std::runtime_error *a1@<X8>)
{
  return std::runtime_error::runtime_error(a1, "Could not find item");
}

BOOL sub_19E294058(BOOL a1, const UInt8 *a2)
{
  uint64_t v2 = a2;
  BOOL v3 = a1;
  CFIndex v4 = a2[23];
  if ((v4 & 0x80u) != 0) {
    a2 = *(const UInt8 **)a2;
  }
  if (a2)
  {
    CFIndex v5 = *((void *)v2 + 1);
    if ((v4 & 0x80u) == 0) {
      CFIndex v6 = v4;
    }
    else {
      CFIndex v6 = v5;
    }
    CFStringRef v7 = CFStringCreateWithBytes(0, a2, v6, 0x8000100u, 0);
    if (!v7)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    if (!v3)
    {
LABEL_9:
      if (!v7) {
        return v3;
      }
      goto LABEL_13;
    }
  }
  else
  {
    CFStringRef v7 = 0;
    if (!a1) {
      goto LABEL_9;
    }
  }
  BOOL v3 = CFDictionaryContainsKey((CFDictionaryRef)v3, v7) != 0;
  if (v7) {
LABEL_13:
  }
    CFRelease(v7);
  return v3;
}

void sub_19E294140(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19E294158(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E154194((const void **)va);
  _Unwind_Resume(a1);
}

void sub_19E29416C(void **a1)
{
  if (*(char *)(MEMORY[0x19F3BB830]() + 39) < 0)
  {
    operator delete(a1[2]);
    uint64_t v2 = a1;
  }
  else
  {
    uint64_t v2 = a1;
  }
  operator delete(v2);
}

uint64_t sub_19E2941D4(const char *a1, const char *a2, uint64_t a3)
{
  sub_19E13D8EC((uint64_t)v12);
  size_t v6 = strlen(a1);
  sub_19E13DB94(v12, (uint64_t)a1, v6);
  size_t v7 = strlen(a2);
  sub_19E13DB94(v12, (uint64_t)a2, v7);
  int v8 = *(char *)(a3 + 23);
  if (v8 >= 0) {
    uint64_t v9 = a3;
  }
  else {
    uint64_t v9 = *(void *)a3;
  }
  if (v8 >= 0) {
    uint64_t v10 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v10 = *(void *)(a3 + 8);
  }
  sub_19E13DB94(v12, v9, v10);
  std::stringbuf::str();
  v12[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v12 + *(void *)(v12[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v12[1] = MEMORY[0x1E4FBA470] + 16;
  if (v13 < 0) {
    operator delete((void *)v12[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x19F3BBB40](&v14);
}

void sub_19E29435C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E13DA90((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E294370(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E13DA90((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E294384(const __CFDictionary *a1@<X0>, const UInt8 *a2@<X1>, void *a3@<X8>)
{
  CFIndex v4 = sub_19E29445C(a1, a2);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_19E294048(exception);
    goto LABEL_8;
  }
  CFIndex v5 = v4;
  CFTypeID TypeID = CFArrayGetTypeID();
  if (TypeID != CFGetTypeID(v5))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_19E15A3B4(exception);
LABEL_8:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }

  sub_19E2945A8((const __CFArray *)v5, a3);
}

void sub_19E294434(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19E294448(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

const void *sub_19E29445C(const __CFDictionary *a1, const UInt8 *a2)
{
  BOOL v3 = a2;
  CFIndex v5 = a2[23];
  if ((v5 & 0x80u) != 0) {
    a2 = *(const UInt8 **)a2;
  }
  if (!a2)
  {
    CFStringRef v8 = 0;
    if (a1) {
      goto LABEL_9;
    }
LABEL_12:
    if (!v8) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  CFIndex v6 = *((void *)v3 + 1);
  if ((v5 & 0x80u) == 0) {
    CFIndex v7 = v5;
  }
  else {
    CFIndex v7 = v6;
  }
  CFStringRef v8 = CFStringCreateWithBytes(0, a2, v7, 0x8000100u, 0);
  if (!v8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (!a1) {
    goto LABEL_12;
  }
LABEL_9:
  Value = CFDictionaryGetValue(a1, v8);
  if (v8) {
LABEL_13:
  }
    CFRelease(v8);
LABEL_14:
  if (a1) {
    return Value;
  }
  else {
    return 0;
  }
}

void sub_19E2945A8(const __CFArray *a1@<X0>, void *a2@<X8>)
{
  CFIndex Count = CFArrayGetCount(a1);
  int v4 = Count;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (Count << 32)
  {
    if (Count << 32 < 0) {
      sub_19E13D694();
    }
    CFIndex v5 = (char *)operator new((8 * Count) & 0x7FFFFFFFFLL);
    *a2 = v5;
    a2[1] = v5;
    a2[2] = &v5[8 * v4];
  }
  if (v4 >= 1)
  {
    CFIndex v6 = 0;
    uint64_t v7 = v4;
    while (1)
    {
      CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(a1, v6);
      CFNumberRef v10 = sub_19E294824(ValueAtIndex);
      if (!v11)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not convert");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      CFNumberRef v12 = v10;
      uint64_t v14 = (char *)a2[1];
      unint64_t v13 = a2[2];
      if ((unint64_t)v14 >= v13) {
        break;
      }
      *(void *)uint64_t v14 = v10;
      uint64_t v8 = (uint64_t)(v14 + 8);
LABEL_7:
      a2[1] = v8;
      if (++v6 == v7) {
        return;
      }
    }
    int v15 = (char *)*a2;
    uint64_t v16 = (uint64_t)&v14[-*a2];
    uint64_t v17 = v16 >> 3;
    unint64_t v18 = (v16 >> 3) + 1;
    if (v18 >> 61) {
      sub_19E13D694();
    }
    uint64_t v19 = v13 - (void)v15;
    if (v19 >> 2 > v18) {
      unint64_t v18 = v19 >> 2;
    }
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v20 = v18;
    }
    if (v20)
    {
      if (v20 >> 61) {
        sub_19E13C418();
      }
      uint64_t v21 = operator new(8 * v20);
      int v22 = (const __CFNumber **)&v21[8 * v17];
      __CFString *v22 = v12;
      uint64_t v8 = (uint64_t)(v22 + 1);
      if (v14 == v15) {
        goto LABEL_27;
      }
    }
    else
    {
      uint64_t v21 = 0;
      int v22 = (const __CFNumber **)(8 * v17);
      *(void *)(8 * v17) = v12;
      uint64_t v8 = 8 * v17 + 8;
      if (v14 == v15)
      {
LABEL_27:
        *a2 = v22;
        a2[1] = v8;
        a2[2] = &v21[8 * v20];
        if (v15) {
          operator delete(v15);
        }
        goto LABEL_7;
      }
    }
    unint64_t v23 = v14 - 8 - v15;
    if (v23 < 0x58) {
      goto LABEL_36;
    }
    if ((unint64_t)(v14 - &v21[v16]) < 0x20) {
      goto LABEL_36;
    }
    uint64_t v24 = (v23 >> 3) + 1;
    uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    size_t v26 = &v14[-v25];
    int v22 = (const __CFNumber **)((char *)v22 - v25);
    uint64_t v27 = &v21[8 * v17 - 16];
    int v28 = v14 - 16;
    uint64_t v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v30 = *(_OWORD *)v28;
      *(v27 - 1) = *((_OWORD *)v28 - 1);
      *uint64_t v27 = v30;
      v27 -= 2;
      v28 -= 32;
      v29 -= 4;
    }
    while (v29);
    uint64_t v14 = v26;
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_36:
      do
      {
        CFNumberRef v31 = (const __CFNumber *)*((void *)v14 - 1);
        v14 -= 8;
        *--int v22 = v31;
      }
      while (v14 != v15);
    }
    goto LABEL_27;
  }
}

void sub_19E2947F0(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

CFNumberRef sub_19E294824(const __CFNumber *result)
{
  if (*(double *)&result != 0.0)
  {
    CFNumberRef v1 = result;
    CFTypeID TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(v1))
    {
      *(double *)&uint64_t result = COERCE_DOUBLE(sub_19E2948CC(v1));
    }
    else
    {
      CFTypeID v3 = CFBooleanGetTypeID();
      if (v3 == CFGetTypeID(v1)) {
        *(double *)&uint64_t result = (double)CFBooleanGetValue(v1);
      }
      else {
        *(double *)&uint64_t result = 0.0;
      }
    }
  }
  return result;
}

unint64_t sub_19E2948CC(const __CFNumber *a1)
{
  switch(CFNumberGetType(a1))
  {
    case kCFNumberSInt8Type:
      LOBYTE(valuePtr) = 0;
      CFNumberRef v2 = a1;
      CFNumberType v3 = kCFNumberSInt8Type;
      goto LABEL_10;
    case kCFNumberSInt16Type:
      LOWORD(valuePtr) = 0;
      CFNumberRef v6 = a1;
      CFNumberType v7 = kCFNumberSInt16Type;
      goto LABEL_12;
    case kCFNumberSInt32Type:
      LODWORD(valuePtr) = 0;
      CFNumberRef v8 = a1;
      CFNumberType v9 = kCFNumberSInt32Type;
      goto LABEL_14;
    case kCFNumberSInt64Type:
      uint64_t valuePtr = 0;
      CFNumberRef v10 = a1;
      CFNumberType v11 = kCFNumberSInt64Type;
      goto LABEL_23;
    case kCFNumberFloat32Type:
      LODWORD(valuePtr) = 0;
      CFNumberRef v12 = a1;
      CFNumberType v13 = kCFNumberFloat32Type;
      goto LABEL_19;
    case kCFNumberFloat64Type:
      uint64_t valuePtr = 0;
      CFNumberRef v14 = a1;
      CFNumberType v15 = kCFNumberFloat64Type;
      goto LABEL_25;
    case kCFNumberCharType:
      LOBYTE(valuePtr) = 0;
      CFNumberRef v2 = a1;
      CFNumberType v3 = kCFNumberCharType;
LABEL_10:
      BOOL v16 = CFNumberGetValue(v2, v3, &valuePtr) == 0;
      double v5 = (double)(char)valuePtr;
      goto LABEL_26;
    case kCFNumberShortType:
      LOWORD(valuePtr) = 0;
      CFNumberRef v6 = a1;
      CFNumberType v7 = kCFNumberShortType;
LABEL_12:
      BOOL v16 = CFNumberGetValue(v6, v7, &valuePtr) == 0;
      v17.i16[0] = valuePtr;
      uint64_t v18 = vmovl_s16(v17).i32[0];
      goto LABEL_15;
    case kCFNumberIntType:
      LODWORD(valuePtr) = 0;
      CFNumberRef v8 = a1;
      CFNumberType v9 = kCFNumberIntType;
LABEL_14:
      BOOL v16 = CFNumberGetValue(v8, v9, &valuePtr) == 0;
      uint64_t v18 = (int)valuePtr;
LABEL_15:
      double v5 = (double)v18;
      goto LABEL_26;
    case kCFNumberLongType:
      uint64_t valuePtr = 0;
      CFNumberRef v10 = a1;
      CFNumberType v11 = kCFNumberLongType;
      goto LABEL_23;
    case kCFNumberLongLongType:
      uint64_t valuePtr = 0;
      CFNumberRef v10 = a1;
      CFNumberType v11 = kCFNumberLongLongType;
      goto LABEL_23;
    case kCFNumberFloatType:
      LODWORD(valuePtr) = 0;
      CFNumberRef v12 = a1;
      CFNumberType v13 = kCFNumberFloatType;
LABEL_19:
      BOOL v16 = CFNumberGetValue(v12, v13, &valuePtr) == 0;
      double v5 = *(float *)&valuePtr;
      goto LABEL_26;
    case kCFNumberDoubleType:
      uint64_t valuePtr = 0;
      CFNumberRef v14 = a1;
      CFNumberType v15 = kCFNumberDoubleType;
      goto LABEL_25;
    case kCFNumberCFIndexType:
      uint64_t valuePtr = 0;
      CFNumberRef v10 = a1;
      CFNumberType v11 = kCFNumberCFIndexType;
      goto LABEL_23;
    case kCFNumberNSIntegerType:
      uint64_t valuePtr = 0;
      CFNumberRef v10 = a1;
      CFNumberType v11 = kCFNumberNSIntegerType;
LABEL_23:
      BOOL v16 = CFNumberGetValue(v10, v11, &valuePtr) == 0;
      double v5 = (double)valuePtr;
      goto LABEL_26;
    case kCFNumberCGFloatType:
      uint64_t valuePtr = 0;
      CFNumberRef v14 = a1;
      CFNumberType v15 = kCFNumberCGFloatType;
LABEL_25:
      BOOL v16 = CFNumberGetValue(v14, v15, &valuePtr) == 0;
      double v5 = *(double *)&valuePtr;
LABEL_26:
      if (v16) {
        double v5 = 0.0;
      }
      unint64_t v4 = *(void *)&v5 & 0xFFFFFFFFFFFFFF00;
      break;
    default:
      unint64_t v4 = 0;
      LOBYTE(v5) = 0;
      break;
  }
  return LOBYTE(v5) | v4;
}

double sub_19E294B50(const __CFDictionary *a1, const UInt8 *a2)
{
  CFNumberRef v2 = (const __CFNumber *)sub_19E29445C(a1, a2);
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_19E294048(exception);
    goto LABEL_6;
  }
  CFNumberRef v3 = sub_19E294824(v2);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_19E15A3B4(exception);
LABEL_6:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return *(double *)&v3;
}

void sub_19E294BD0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19E294BE4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19E294BF8(const __CFDictionary *a1@<X0>, const UInt8 *a2@<X1>, void *a3@<X8>)
{
  char v4 = sub_19E29445C(a1, a2);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_19E294048(exception);
    goto LABEL_8;
  }
  double v5 = v4;
  CFTypeID TypeID = CFArrayGetTypeID();
  if (TypeID != CFGetTypeID(v5))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_19E15A3B4(exception);
LABEL_8:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }

  sub_19E294CD0((const __CFArray *)v5, a3);
}

void sub_19E294CA8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19E294CBC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19E294CD0(const __CFArray *a1@<X0>, void *a2@<X8>)
{
  CFIndex Count = CFArrayGetCount(a1);
  int v4 = Count;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (Count << 32)
  {
    if (Count << 32 < 0) {
      sub_19E13D694();
    }
    double v5 = (char *)operator new((4 * Count) & 0x3FFFFFFFFLL);
    *a2 = v5;
    a2[1] = v5;
    a2[2] = &v5[4 * v4];
  }
  if (v4 >= 1)
  {
    CFIndex v6 = 0;
    uint64_t v7 = v4;
    while (1)
    {
      CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(a1, v6);
      uint64_t v10 = sub_19E15C808((uint64_t)ValueAtIndex);
      if ((v10 & 0xFF00000000) == 0)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not convert");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      int v11 = v10;
      CFNumberType v13 = (char *)a2[1];
      unint64_t v12 = a2[2];
      if ((unint64_t)v13 >= v12) {
        break;
      }
      *(_DWORD *)CFNumberType v13 = v10;
      uint64_t v8 = (uint64_t)(v13 + 4);
LABEL_7:
      a2[1] = v8;
      if (++v6 == v7) {
        return;
      }
    }
    CFNumberRef v14 = (char *)*a2;
    uint64_t v15 = (uint64_t)&v13[-*a2];
    uint64_t v16 = v15 >> 2;
    unint64_t v17 = (v15 >> 2) + 1;
    if (v17 >> 62) {
      sub_19E13D694();
    }
    uint64_t v18 = v12 - (void)v14;
    if (v18 >> 1 > v17) {
      unint64_t v17 = v18 >> 1;
    }
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v19 = v17;
    }
    if (v19)
    {
      if (v19 >> 62) {
        sub_19E13C418();
      }
      unint64_t v20 = operator new(4 * v19);
      uint64_t v21 = &v20[4 * v16];
      *uint64_t v21 = v11;
      uint64_t v8 = (uint64_t)(v21 + 1);
      if (v13 == v14) {
        goto LABEL_27;
      }
    }
    else
    {
      unint64_t v20 = 0;
      uint64_t v21 = (_DWORD *)(4 * v16);
      *(_DWORD *)(4 * v16) = v11;
      uint64_t v8 = 4 * v16 + 4;
      if (v13 == v14)
      {
LABEL_27:
        *a2 = v21;
        a2[1] = v8;
        a2[2] = &v20[4 * v19];
        if (v14) {
          operator delete(v14);
        }
        goto LABEL_7;
      }
    }
    unint64_t v22 = v13 - 4 - v14;
    if (v22 < 0x2C) {
      goto LABEL_36;
    }
    if ((unint64_t)(v13 - &v20[v15]) < 0x20) {
      goto LABEL_36;
    }
    uint64_t v23 = (v22 >> 2) + 1;
    uint64_t v24 = 4 * (v23 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v25 = &v13[-v24];
    uint64_t v21 = (_DWORD *)((char *)v21 - v24);
    size_t v26 = &v20[4 * v16 - 16];
    uint64_t v27 = v13 - 16;
    uint64_t v28 = v23 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v29 = *(_OWORD *)v27;
      *(v26 - 1) = *((_OWORD *)v27 - 1);
      *size_t v26 = v29;
      v26 -= 2;
      v27 -= 32;
      v28 -= 8;
    }
    while (v28);
    CFNumberType v13 = v25;
    if (v23 != (v23 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_36:
      do
      {
        int v30 = *((_DWORD *)v13 - 1);
        v13 -= 4;
        *--uint64_t v21 = v30;
      }
      while (v13 != v14);
    }
    goto LABEL_27;
  }
}

void sub_19E294F18(_Unwind_Exception *exception_object)
{
  CFNumberRef v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E294F4C(const __CFDictionary *a1, const UInt8 *a2)
{
  CFNumberRef v2 = sub_19E29445C(a1, a2);
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_19E294048(exception);
    goto LABEL_6;
  }
  uint64_t result = sub_19E15C808((uint64_t)v2);
  if ((result & 0xFF00000000) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_19E15A3B4(exception);
LABEL_6:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_19E294FC8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19E294FDC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19E294FF0(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_19E294FF0(a1, *(void *)a2);
    sub_19E294FF0(a1, *((void *)a2 + 1));
    int v4 = (const void *)*((void *)a2 + 7);
    if (v4) {
      CFRelease(v4);
    }
    if (a2[55] < 0)
    {
      operator delete(*((void **)a2 + 4));
      double v5 = a2;
    }
    else
    {
      double v5 = a2;
    }
    operator delete(v5);
  }
}

CFArrayRef sub_19E29508C(uint64_t **a1)
{
  unint64_t v2 = a1[1] - *a1;
  __p = 0;
  uint64_t v15 = 0;
  unint64_t v16 = 0;
  sub_19E15BEB0((uint64_t)&__p, v2);
  CFNumberRef v3 = *a1;
  int v4 = a1[1];
  if (*a1 != v4)
  {
    double v5 = v15;
    do
    {
      uint64_t v13 = *v3;
      if ((unint64_t)v5 >= v16) {
        double v5 = sub_19E2951C8((CFNumberRef **)&__p, &v13);
      }
      else {
        sub_19E2953BC((uint64_t)&v16, v5++, &v13);
      }
      uint64_t v15 = v5;
      ++v3;
    }
    while (v3 != v4);
  }
  CFArrayRef v6 = sub_19E15C03C((char **)&__p);
  uint64_t v7 = (CFNumberRef *)__p;
  if (__p)
  {
    uint64_t v8 = v15;
    CFNumberType v9 = __p;
    if (v15 != __p)
    {
      do
      {
        int v11 = *--v8;
        uint64_t v10 = v11;
        if (v11) {
          CFRelease(v10);
        }
      }
      while (v8 != v7);
      CFNumberType v9 = __p;
    }
    uint64_t v15 = v7;
    operator delete(v9);
  }
  return v6;
}

void sub_19E295194(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E15C1D8((void **)va);
  _Unwind_Resume(a1);
}

void sub_19E2951B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E15C1D8((void **)va);
  _Unwind_Resume(a1);
}

CFNumberRef *sub_19E2951C8(CFNumberRef **a1, uint64_t *a2)
{
  uint64_t v3 = a1[1] - *a1;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 61) {
    sub_19E13D694();
  }
  uint64_t v6 = (char *)a1[2] - (char *)*a1;
  if (v6 >> 2 > v4) {
    unint64_t v4 = v6 >> 2;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v7 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  if (v7)
  {
    if (v7 >> 61) {
      sub_19E13C418();
    }
    uint64_t v8 = (char *)operator new(8 * v7);
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v28 = (CFNumberRef *)&v8[8 * v3];
  long long v29 = (CFNumberRef *)&v8[8 * v7];
  sub_19E2953BC((uint64_t)(a1 + 2), v28, a2);
  CFNumberType v9 = v28;
  uint64_t v10 = v28 + 1;
  int v11 = *a1;
  unint64_t v12 = a1[1];
  if (v12 == *a1)
  {
    *a1 = v28;
    a1[1] = v10;
    a1[2] = v29;
  }
  else
  {
    unint64_t v13 = (char *)v12 - (char *)*a1 - 8;
    if (v13 < 0x58) {
      goto LABEL_18;
    }
    unint64_t v14 = ((char *)v11 - (char *)v12 + 7) & 0xFFFFFFFFFFFFFFF8;
    if ((CFNumberRef *)((char *)v28 + v14) < v12 && (CFNumberRef *)((char *)v12 + v14) < v28) {
      goto LABEL_18;
    }
    uint64_t v15 = (v13 >> 3) + 1;
    uint64_t v16 = 8 * (v15 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v17 = &v28[v16 / 0xFFFFFFFFFFFFFFF8];
    uint64_t v18 = &v12[v16 / 0xFFFFFFFFFFFFFFF8];
    unint64_t v19 = v12 - 2;
    unint64_t v20 = v28 - 2;
    uint64_t v21 = v15 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v22 = *(_OWORD *)v19;
      *((_OWORD *)v20 - 1) = *((_OWORD *)v19 - 1);
      *(_OWORD *)unint64_t v20 = v22;
      *((_OWORD *)v19 - 1) = 0uLL;
      *(_OWORD *)unint64_t v19 = 0uLL;
      v19 -= 4;
      v20 -= 4;
      v21 -= 4;
    }
    while (v21);
    CFNumberType v9 = v17;
    unint64_t v12 = v18;
    if (v15 != (v15 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_18:
      unint64_t v17 = v9;
      do
      {
        CFNumberRef v23 = *--v12;
        *--unint64_t v17 = v23;
        CFNumberRef *v12 = 0;
      }
      while (v12 != v11);
    }
    uint64_t v24 = *a1;
    unint64_t v12 = a1[1];
    *a1 = v17;
    a1[1] = v10;
    a1[2] = v29;
    if (v12 != v24)
    {
      do
      {
        size_t v26 = *--v12;
        uint64_t v25 = v26;
        if (v26) {
          CFRelease(v25);
        }
      }
      while (v12 != v24);
      unint64_t v12 = v24;
    }
  }
  if (v12) {
    operator delete(v12);
  }
  return v28 + 1;
}

void sub_19E2953A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E15C248((uint64_t)va);
  _Unwind_Resume(a1);
}

CFNumberRef sub_19E2953BC(uint64_t a1, CFNumberRef *a2, uint64_t *a3)
{
  uint64_t valuePtr = *a3;
  CFNumberRef result = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
  *a2 = result;
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_19E295448(_Unwind_Exception *exception_object)
{
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(exception_object);
}

CFArrayRef sub_19E295474(int **a1)
{
  unint64_t v2 = a1[1] - *a1;
  __p = 0;
  uint64_t v15 = 0;
  unint64_t v16 = 0;
  sub_19E15BEB0((uint64_t)&__p, v2);
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  if (*a1 != v4)
  {
    double v5 = v15;
    do
    {
      int v13 = *v3;
      if ((unint64_t)v5 >= v16) {
        double v5 = sub_19E2955B0((CFNumberRef **)&__p, &v13);
      }
      else {
        sub_19E2957A4((uint64_t)&v16, v5++, &v13);
      }
      uint64_t v15 = v5;
      ++v3;
    }
    while (v3 != v4);
  }
  CFArrayRef v6 = sub_19E15C03C((char **)&__p);
  unint64_t v7 = (CFNumberRef *)__p;
  if (__p)
  {
    uint64_t v8 = v15;
    CFNumberType v9 = __p;
    if (v15 != __p)
    {
      do
      {
        int v11 = *--v8;
        uint64_t v10 = v11;
        if (v11) {
          CFRelease(v10);
        }
      }
      while (v8 != v7);
      CFNumberType v9 = __p;
    }
    uint64_t v15 = v7;
    operator delete(v9);
  }
  return v6;
}

void sub_19E29557C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E15C1D8((void **)va);
  _Unwind_Resume(a1);
}

void sub_19E295598(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E15C1D8((void **)va);
  _Unwind_Resume(a1);
}

CFNumberRef *sub_19E2955B0(CFNumberRef **a1, int *a2)
{
  uint64_t v3 = a1[1] - *a1;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 61) {
    sub_19E13D694();
  }
  uint64_t v6 = (char *)a1[2] - (char *)*a1;
  if (v6 >> 2 > v4) {
    unint64_t v4 = v6 >> 2;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v7 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  if (v7)
  {
    if (v7 >> 61) {
      sub_19E13C418();
    }
    uint64_t v8 = (char *)operator new(8 * v7);
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v28 = (CFNumberRef *)&v8[8 * v3];
  long long v29 = (CFNumberRef *)&v8[8 * v7];
  sub_19E2957A4((uint64_t)(a1 + 2), v28, a2);
  CFNumberType v9 = v28;
  uint64_t v10 = v28 + 1;
  int v11 = *a1;
  unint64_t v12 = a1[1];
  if (v12 == *a1)
  {
    *a1 = v28;
    a1[1] = v10;
    a1[2] = v29;
  }
  else
  {
    unint64_t v13 = (char *)v12 - (char *)*a1 - 8;
    if (v13 < 0x58) {
      goto LABEL_18;
    }
    unint64_t v14 = ((char *)v11 - (char *)v12 + 7) & 0xFFFFFFFFFFFFFFF8;
    if ((CFNumberRef *)((char *)v28 + v14) < v12 && (CFNumberRef *)((char *)v12 + v14) < v28) {
      goto LABEL_18;
    }
    uint64_t v15 = (v13 >> 3) + 1;
    uint64_t v16 = 8 * (v15 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v17 = &v28[v16 / 0xFFFFFFFFFFFFFFF8];
    uint64_t v18 = &v12[v16 / 0xFFFFFFFFFFFFFFF8];
    unint64_t v19 = v12 - 2;
    unint64_t v20 = v28 - 2;
    uint64_t v21 = v15 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v22 = *(_OWORD *)v19;
      *((_OWORD *)v20 - 1) = *((_OWORD *)v19 - 1);
      *(_OWORD *)unint64_t v20 = v22;
      *((_OWORD *)v19 - 1) = 0uLL;
      *(_OWORD *)unint64_t v19 = 0uLL;
      v19 -= 4;
      v20 -= 4;
      v21 -= 4;
    }
    while (v21);
    CFNumberType v9 = v17;
    unint64_t v12 = v18;
    if (v15 != (v15 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_18:
      unint64_t v17 = v9;
      do
      {
        CFNumberRef v23 = *--v12;
        *--unint64_t v17 = v23;
        CFNumberRef *v12 = 0;
      }
      while (v12 != v11);
    }
    uint64_t v24 = *a1;
    unint64_t v12 = a1[1];
    *a1 = v17;
    a1[1] = v10;
    a1[2] = v29;
    if (v12 != v24)
    {
      do
      {
        size_t v26 = *--v12;
        uint64_t v25 = v26;
        if (v26) {
          CFRelease(v25);
        }
      }
      while (v12 != v24);
      unint64_t v12 = v24;
    }
  }
  if (v12) {
    operator delete(v12);
  }
  return v28 + 1;
}

void sub_19E29578C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E15C248((uint64_t)va);
  _Unwind_Resume(a1);
}

CFNumberRef sub_19E2957A4(uint64_t a1, CFNumberRef *a2, int *a3)
{
  int valuePtr = *a3;
  CFNumberRef result = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  *a2 = result;
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_19E295830(_Unwind_Exception *exception_object)
{
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(exception_object);
}

CFDictionaryRef sub_19E29585C(void *a1)
{
  __p = 0;
  unint64_t v19 = 0;
  unint64_t v20 = 0;
  sub_19E15B2F8((uint64_t)&__p, a1[2]);
  unint64_t v4 = (void *)*a1;
  unint64_t v2 = a1 + 1;
  uint64_t v3 = v4;
  if (v4 != v2)
  {
    double v5 = v19;
    do
    {
      uint64_t v6 = (const UInt8 *)(v3 + 4);
      unint64_t v7 = (const void **)(v3 + 7);
      if ((unint64_t)v5 >= v20)
      {
        double v5 = sub_19E2959C8((CFStringRef **)&__p, v6, v7);
        unint64_t v19 = v5;
        uint64_t v8 = (void *)v3[1];
        if (v8)
        {
          do
          {
LABEL_8:
            CFNumberType v9 = v8;
            uint64_t v8 = (void *)*v8;
          }
          while (v8);
          goto LABEL_3;
        }
      }
      else
      {
        sub_19E295BE0(v5, v6, v7);
        v5 += 2;
        unint64_t v19 = v5;
        uint64_t v8 = (void *)v3[1];
        if (v8) {
          goto LABEL_8;
        }
      }
      do
      {
        CFNumberType v9 = (void *)v3[2];
        BOOL v10 = *v9 == (void)v3;
        uint64_t v3 = v9;
      }
      while (!v10);
LABEL_3:
      uint64_t v3 = v9;
    }
    while (v9 != v2);
  }
  CFDictionaryRef v11 = sub_19E15B498((char **)&__p);
  unint64_t v12 = (CFStringRef *)__p;
  if (__p)
  {
    unint64_t v13 = v19;
    unint64_t v14 = __p;
    if (v19 != __p)
    {
      do
      {
        uint64_t v15 = *(v13 - 1);
        if (v15) {
          CFRelease(v15);
        }
        uint64_t v16 = *(v13 - 2);
        if (v16) {
          CFRelease(v16);
        }
        v13 -= 2;
      }
      while (v13 != v12);
      unint64_t v14 = __p;
    }
    unint64_t v19 = v12;
    operator delete(v14);
  }
  return v11;
}

void sub_19E295990(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E15B974((void **)va);
  _Unwind_Resume(a1);
}

void sub_19E2959B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E15B974((void **)va);
  _Unwind_Resume(a1);
}

CFStringRef *sub_19E2959C8(CFStringRef **a1, const UInt8 *a2, const void **a3)
{
  uint64_t v4 = ((char *)a1[1] - (char *)*a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    sub_19E13D694();
  }
  uint64_t v8 = (char *)a1[2] - (char *)*a1;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 >> 60) {
      sub_19E13C418();
    }
    BOOL v10 = (char *)operator new(16 * v9);
  }
  else
  {
    BOOL v10 = 0;
  }
  long long v29 = (CFStringRef *)&v10[16 * v4];
  int v30 = (CFStringRef *)&v10[16 * v9];
  sub_19E295BE0(v29, a2, a3);
  CFDictionaryRef v11 = v29;
  unint64_t v12 = v29 + 2;
  unint64_t v13 = *a1;
  unint64_t v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v29;
    a1[1] = v12;
    a1[2] = v30;
  }
  else
  {
    unint64_t v15 = (char *)v14 - (char *)*a1 - 16;
    if (v15 < 0x70) {
      goto LABEL_18;
    }
    unint64_t v16 = ((char *)v13 - (char *)v14 + 15) & 0xFFFFFFFFFFFFFFF0;
    if ((CFStringRef *)((char *)v29 + v16) < v14 && (CFStringRef *)((char *)v14 + v16) < v29) {
      goto LABEL_18;
    }
    uint64_t v17 = (v15 >> 4) + 1;
    uint64_t v18 = 16 * (v17 & 0x1FFFFFFFFFFFFFFELL);
    unint64_t v19 = &v29[v18 / 0xFFFFFFFFFFFFFFF8];
    unint64_t v20 = &v14[v18 / 0xFFFFFFFFFFFFFFF8];
    uint64_t v21 = (const double *)(v14 - 4);
    long long v22 = (double *)(v29 - 4);
    uint64_t v23 = v17 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      float64x2x2_t v31 = vld2q_f64(v21);
      vst2q_f64(v22, v31);
      *(_OWORD *)uint64_t v21 = 0uLL;
      *((_OWORD *)v21 + 1) = 0uLL;
      v21 -= 4;
      v22 -= 4;
      v23 -= 2;
    }
    while (v23);
    CFDictionaryRef v11 = v19;
    unint64_t v14 = v20;
    if (v17 != (v17 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_18:
      unint64_t v19 = v11;
      do
      {
        CFStringRef v24 = *(v14 - 2);
        v14 -= 2;
        *(v19 - 2) = v24;
        v19 -= 2;
        CFStringRef *v14 = 0;
        v19[1] = v14[1];
        v14[1] = 0;
      }
      while (v14 != v13);
    }
    uint64_t v25 = *a1;
    unint64_t v14 = a1[1];
    *a1 = v19;
    a1[1] = v12;
    a1[2] = v30;
    if (v14 != v25)
    {
      do
      {
        size_t v26 = *(v14 - 1);
        if (v26) {
          CFRelease(v26);
        }
        uint64_t v27 = *(v14 - 2);
        if (v27) {
          CFRelease(v27);
        }
        v14 -= 2;
      }
      while (v14 != v25);
      unint64_t v14 = v25;
    }
  }
  if (v14) {
    operator delete(v14);
  }
  return v29 + 2;
}

void sub_19E295BC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E15B9F8((uint64_t)va);
  _Unwind_Resume(a1);
}

CFStringRef *sub_19E295BE0(CFStringRef *a1, const UInt8 *a2, const void **a3)
{
  CFIndex v5 = *((void *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    CFIndex v6 = a2[23];
  }
  else
  {
    a2 = *(const UInt8 **)a2;
    CFIndex v6 = v5;
  }
  CFStringRef v7 = CFStringCreateWithBytes(0, a2, v6, 0x8000100u, 0);
  *a1 = v7;
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFStringRef v8 = (const __CFString *)*a3;
  if (v8) {
    CFRetain(v8);
  }
  a1[1] = v8;
  return a1;
}

void sub_19E295C94(_Unwind_Exception *exception_object)
{
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_19E295CC4@<X0>(const __CFArray *a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  if (!a1 || CFArrayGetCount(a1) <= a2 || (ValueAtIndex = CFArrayGetValueAtIndex(a1, a2), (CFStringRef v7 = ValueAtIndex) == 0))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_19E294048(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFRetain(ValueAtIndex);

  return sub_19E159840(a3, v7);
}

void sub_19E295D78(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_19E295D8C@<X0>(const __CFDictionary *a1@<X0>, const UInt8 *a2@<X1>, void *a3@<X8>)
{
  CFStringRef v4 = (const __CFString *)sub_19E29445C(a1, a2);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_19E294048(exception);
    goto LABEL_8;
  }
  CFStringRef v5 = v4;
  CFTypeID TypeID = CFStringGetTypeID();
  if (TypeID != CFGetTypeID(v5))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_19E15A3B4(exception);
LABEL_8:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }

  return sub_19E15A3C4(v5, a3);
}

void sub_19E295E3C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19E295E50(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_19E295E64@<X0>(const __CFDictionary *a1@<X0>, const void **a2@<X1>, void *a3@<X8>)
{
  if (!a1 || (uint64_t v3 = *a2) == 0 || (Value = (const __CFString *)CFDictionaryGetValue(a1, v3)) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_19E294048(exception);
    goto LABEL_10;
  }
  CFTypeID TypeID = CFStringGetTypeID();
  if (TypeID != CFGetTypeID(Value))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_19E15A3B4(exception);
LABEL_10:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }

  return sub_19E15A3C4(Value, a3);
}

void sub_19E295F20(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19E295F38(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *sub_19E295F4C(void **a1, uint64_t a2)
{
  uint64_t v3 = (unsigned char *)a1[1] - (unsigned char *)*a1;
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * (v3 >> 3) + 1;
  if (v4 > 0x666666666666666) {
    sub_19E13D694();
  }
  if (0x999999999999999ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x999999999999999ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x333333333333333) {
    unint64_t v6 = 0x666666666666666;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x666666666666666) {
      sub_19E13C418();
    }
    CFStringRef v7 = (char *)operator new(40 * v6);
  }
  else
  {
    CFStringRef v7 = 0;
  }
  CFStringRef v8 = &v7[8 * (v3 >> 3)];
  unint64_t v9 = &v7[40 * v6];
  uint64_t v10 = *(void *)(a2 + 24);
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(_OWORD *)CFStringRef v8 = *(_OWORD *)a2;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  CFDictionaryRef v11 = &v7[v3];
  *((void *)v11 + 3) = v10;
  *((_DWORD *)v11 + 8) = *(_DWORD *)(a2 + 32);
  unint64_t v12 = v8 + 40;
  unint64_t v13 = (char *)*a1;
  unint64_t v14 = (char *)a1[1];
  if (v14 == *a1)
  {
    *a1 = v8;
    a1[1] = v12;
    a1[2] = v9;
    if (!v14) {
      return v12;
    }
    goto LABEL_20;
  }
  do
  {
    long long v15 = *(_OWORD *)(v14 - 40);
    *((void *)v8 - 3) = *((void *)v14 - 3);
    *(_OWORD *)(v8 - 40) = v15;
    *((void *)v14 - 4) = 0;
    *((void *)v14 - 3) = 0;
    *((void *)v14 - 5) = 0;
    uint64_t v16 = *((void *)v14 - 2);
    *((_DWORD *)v8 - 2) = *((_DWORD *)v14 - 2);
    *((void *)v8 - 2) = v16;
    v8 -= 40;
    v14 -= 40;
  }
  while (v14 != v13);
  uint64_t v17 = (char *)*a1;
  unint64_t v14 = (char *)a1[1];
  *a1 = v8;
  a1[1] = v12;
  a1[2] = v9;
  if (v14 != v17)
  {
    do
    {
      if (*(v14 - 17) < 0) {
        operator delete(*((void **)v14 - 5));
      }
      v14 -= 40;
    }
    while (v14 != v17);
    unint64_t v14 = v17;
  }
  if (v14) {
LABEL_20:
  }
    operator delete(v14);
  return v12;
}

double sub_19E2960E0(const __CFDictionary *a1, const void **a2)
{
  if (!a1 || (unint64_t v2 = *a2) == 0 || (Value = (const __CFNumber *)CFDictionaryGetValue(a1, v2)) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_19E294048(exception);
    goto LABEL_8;
  }
  CFNumberRef v4 = sub_19E294824(Value);
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_19E15A3B4(exception);
LABEL_8:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return *(double *)&v4;
}

void sub_19E29616C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19E296184(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *sub_19E296198(void **a1, uint64_t a2)
{
  uint64_t v3 = (unsigned char *)a1[1] - (unsigned char *)*a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (v3 >> 4) + 1;
  if (v4 > 0x555555555555555) {
    sub_19E13D694();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v6 = 0x555555555555555;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x555555555555555) {
      sub_19E13C418();
    }
    CFStringRef v7 = (char *)operator new(48 * v6);
  }
  else
  {
    CFStringRef v7 = 0;
  }
  CFStringRef v8 = &v7[16 * (v3 >> 4)];
  unint64_t v9 = &v7[48 * v6];
  *(_OWORD *)CFStringRef v8 = *(_OWORD *)a2;
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v10 = &v7[v3];
  *(_OWORD *)(v10 + 24) = *(_OWORD *)(a2 + 24);
  *((_DWORD *)v10 + 10) = *(_DWORD *)(a2 + 40);
  CFDictionaryRef v11 = v8 + 48;
  unint64_t v12 = (char *)*a1;
  unint64_t v13 = (char *)a1[1];
  if (v13 == *a1)
  {
    *a1 = v8;
    a1[1] = v11;
    a1[2] = v9;
    if (!v13) {
      return v11;
    }
    goto LABEL_20;
  }
  do
  {
    long long v14 = *((_OWORD *)v13 - 3);
    *((void *)v8 - 4) = *((void *)v13 - 4);
    *((_OWORD *)v8 - 3) = v14;
    *((void *)v13 - 5) = 0;
    *((void *)v13 - 4) = 0;
    *((void *)v13 - 6) = 0;
    long long v15 = *(_OWORD *)(v13 - 24);
    *((_DWORD *)v8 - 2) = *((_DWORD *)v13 - 2);
    *(_OWORD *)(v8 - 24) = v15;
    v8 -= 48;
    v13 -= 48;
  }
  while (v13 != v12);
  uint64_t v16 = (char *)*a1;
  unint64_t v13 = (char *)a1[1];
  *a1 = v8;
  a1[1] = v11;
  a1[2] = v9;
  if (v13 != v16)
  {
    do
    {
      if (*(v13 - 25) < 0) {
        operator delete(*((void **)v13 - 6));
      }
      v13 -= 48;
    }
    while (v13 != v16);
    unint64_t v13 = v16;
  }
  if (v13) {
LABEL_20:
  }
    operator delete(v13);
  return v11;
}

uint64_t sub_19E296330(const __CFDictionary *a1, const void **a2)
{
  if (!a1 || (unint64_t v2 = *a2) == 0 || (Value = CFDictionaryGetValue(a1, v2)) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_19E294048(exception);
    goto LABEL_8;
  }
  uint64_t result = sub_19E15C808((uint64_t)Value);
  if ((result & 0xFF00000000) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_19E15A3B4(exception);
LABEL_8:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_19E2963B8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19E2963D0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_19E2963E4@<X0>(const __CFDictionary *a1@<X0>, const void **a2@<X1>, void *a3@<X8>)
{
  if (!a1 || (v3 = *a2) == 0 || (Value = CFDictionaryGetValue(a1, v3), (unint64_t v6 = Value) == 0))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_19E294048(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFRetain(Value);

  return sub_19E2935E8(a3, v6);
}

void sub_19E296478(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t **sub_19E29648C(uint64_t ***a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 5);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x2AAAAAAAAAAAAAALL) {
    sub_19E13D694();
  }
  if (0x5555555555555556 * (((char *)a1[2] - (char *)*a1) >> 5) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((char *)a1[2] - (char *)*a1) >> 5);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1[2] - (char *)*a1) >> 5) >= 0x155555555555555) {
    unint64_t v6 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL) {
      sub_19E13C418();
    }
    CFStringRef v7 = (uint64_t **)operator new(96 * v6);
  }
  else
  {
    CFStringRef v7 = 0;
  }
  CFStringRef v8 = &v7[12 * v6];
  unint64_t v9 = sub_19E2965D0(&v7[12 * v3], a2);
  uint64_t v10 = v9 + 12;
  unint64_t v12 = (char **)*a1;
  CFDictionaryRef v11 = (char **)a1[1];
  if (v11 == (char **)*a1)
  {
    *a1 = v9;
    a1[1] = v10;
    a1[2] = v8;
    if (!v11) {
      return v10;
    }
    goto LABEL_17;
  }
  do
  {
    v11 -= 12;
    unint64_t v9 = sub_19E2965D0(v9 - 12, (uint64_t)v11);
  }
  while (v11 != v12);
  unint64_t v13 = (char **)*a1;
  CFDictionaryRef v11 = (char **)a1[1];
  *a1 = v9;
  a1[1] = v10;
  a1[2] = v8;
  if (v11 != v13)
  {
    do
    {
      v11 -= 12;
      sub_19E2470C8(v11);
    }
    while (v11 != v13);
    CFDictionaryRef v11 = v13;
  }
  if (v11) {
LABEL_17:
  }
    operator delete(v11);
  return v10;
}

uint64_t **sub_19E2965D0(uint64_t **a1, uint64_t a2)
{
  *(_OWORD *)long long v14 = *(_OWORD *)a2;
  uint64_t v15 = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)__p = *(_OWORD *)(a2 + 24);
  uint64_t v13 = *(void *)(a2 + 40);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  sub_19E246C08(a1, (uint64_t *)v14, (uint64_t *)__p);
  unint64_t v3 = (char *)__p[0];
  if (__p[0])
  {
    unint64_t v4 = (char *)__p[1];
    char v5 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        unint64_t v6 = (void *)*((void *)v4 - 4);
        if (v6)
        {
          *((void *)v4 - 3) = v6;
          operator delete(v6);
        }
        if (*(v4 - 33) < 0) {
          operator delete(*((void **)v4 - 7));
        }
        v4 -= 56;
      }
      while (v4 != v3);
      char v5 = __p[0];
    }
    __p[1] = v3;
    operator delete(v5);
  }
  CFStringRef v7 = (char *)v14[0];
  if (v14[0])
  {
    CFStringRef v8 = (char *)v14[1];
    unint64_t v9 = v14[0];
    if (v14[1] != v14[0])
    {
      do
      {
        uint64_t v10 = (void *)*((void *)v8 - 4);
        if (v10)
        {
          *((void *)v8 - 3) = v10;
          operator delete(v10);
        }
        if (*(v8 - 33) < 0) {
          operator delete(*((void **)v8 - 7));
        }
        v8 -= 56;
      }
      while (v8 != v7);
      unint64_t v9 = v14[0];
    }
    v14[1] = v7;
    operator delete(v9);
  }
  return a1;
}

uint64_t sub_19E2966EC(const __CFDictionary **a1, const void **a2, uint64_t (*a3)(CFTypeRef *))
{
  CFDictionaryRef v4 = *a1;
  if (!v4) {
    goto LABEL_13;
  }
  unint64_t v6 = *a2;
  if (!v6 || !CFDictionaryContainsKey(v4, v6)) {
    return 1;
  }
  CFDictionaryRef v8 = *a1;
  if (!*a1)
  {
LABEL_13:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_19E2929A8(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  long long v14 = *a2;
  sub_19E2969A4(v8, &v14, &cf);
  CFTypeRef v9 = cf;
  if (cf) {
    CFRetain(cf);
  }
  CFTypeRef v13 = v9;
  uint64_t v10 = a3(&v13);
  if (v13) {
    CFRelease(v13);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v10;
}

void sub_19E2967FC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19E29681C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  unint64_t v3 = va_arg(va1, const void *);
  uint64_t v5 = va_arg(va1, void);
  sub_19E154194((const void **)va);
  sub_19E154194((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_19E296838(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19E296850(CFTypeRef *a1)
{
  sub_19E292030("Random", cf);
  CFComparisonResult v2 = sub_19E296AE4(a1, (const __CFString **)cf);
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  if (v2 == kCFCompareEqualTo) {
    return 0;
  }
  sub_19E292030("GaussianProcess", cf);
  CFComparisonResult v3 = sub_19E296AE4(a1, (const __CFString **)cf);
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  if (v3)
  {
    exception = __cxa_allocate_exception(0x28uLL);
    unint64_t v6 = a1;
    CFStringRef v7 = exception;
    CFDictionaryRef v8 = (const __CFString **)sub_19E2932CC(v6);
    sub_19E1540E8(&v8, cf);
    sub_19E296A4C((uint64_t)v7, "Unexpected optimizer name: ", (uint64_t)cf);
    __cxa_throw(v7, (struct type_info *)&unk_1EF0A45D8, (void (*)(void *))sub_19E28A884);
  }
  return 1;
}

void sub_19E296964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void *sub_19E2969A4@<X0>(const __CFDictionary *a1@<X0>, const void **a2@<X1>, void *a3@<X8>)
{
  if (!a1 || (v3 = *a2) == 0 || (Value = CFDictionaryGetValue(a1, v3), (unint64_t v6 = Value) == 0))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_19E294048(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFRetain(Value);

  return sub_19E1592DC(a3, v6);
}

void sub_19E296A38(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19E296A4C(uint64_t a1, const char *a2, uint64_t a3)
{
  CFDictionaryRef v4 = (const char **)(a1 + 16);
  sub_19E2941D4("[InvalidArgument] ", a2, a3);
  *(void *)a1 = &unk_1EF0A8798;
  uint64_t v5 = (const char *)v4;
  if (*(char *)(a1 + 39) < 0) {
    uint64_t v5 = *v4;
  }
  std::logic_error::logic_error((std::logic_error *)a1, v5);
  *(void *)a1 = &unk_1EF0A8798;
  return a1;
}

void sub_19E296AC8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

CFComparisonResult sub_19E296AE4(CFTypeRef *a1, const __CFString **a2)
{
  CFStringRef v3 = (const __CFString *)*a1;
  if (*a1)
  {
    CFRetain(*a1);
    CFStringRef v4 = *a2;
    if (!v4)
    {
      CFComparisonResult v5 = kCFCompareGreaterThan;
LABEL_9:
      CFRelease(v3);
      return v5;
    }
LABEL_5:
    CFRetain(v4);
    if (v3) {
      CFComparisonResult v5 = CFStringCompare(v3, v4, 0);
    }
    else {
      CFComparisonResult v5 = kCFCompareLessThan;
    }
    CFRelease(v4);
    if (!v3) {
      return v5;
    }
    goto LABEL_9;
  }
  CFStringRef v4 = *a2;
  if (*a2) {
    goto LABEL_5;
  }
  return 0;
}

uint64_t sub_19E296BA0(const __CFDictionary **a1, const void **a2, uint64_t (*a3)(CFTypeRef *))
{
  CFDictionaryRef v4 = *a1;
  if (!v4) {
    goto LABEL_13;
  }
  unint64_t v6 = *a2;
  if (!v6 || !CFDictionaryContainsKey(v4, v6)) {
    return 0;
  }
  CFDictionaryRef v8 = *a1;
  if (!*a1)
  {
LABEL_13:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_19E2929A8(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  long long v14 = *a2;
  sub_19E2969A4(v8, &v14, &cf);
  CFTypeRef v9 = cf;
  if (cf) {
    CFRetain(cf);
  }
  CFTypeRef v13 = v9;
  uint64_t v10 = a3(&v13);
  if (v13) {
    CFRelease(v13);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v10;
}

void sub_19E296CB0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19E296CD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  CFStringRef v3 = va_arg(va1, const void *);
  uint64_t v5 = va_arg(va1, void);
  sub_19E154194((const void **)va);
  sub_19E154194((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_19E296CEC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19E296D04(CFTypeRef *a1)
{
  sub_19E292030("Maximize", cf);
  CFComparisonResult v2 = sub_19E296AE4(a1, (const __CFString **)cf);
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  if (v2 == kCFCompareEqualTo) {
    return 0;
  }
  sub_19E292030("Minimize", cf);
  CFComparisonResult v3 = sub_19E296AE4(a1, (const __CFString **)cf);
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  if (v3)
  {
    exception = __cxa_allocate_exception(0x28uLL);
    unint64_t v6 = a1;
    CFStringRef v7 = exception;
    CFDictionaryRef v8 = (const __CFString **)sub_19E2932CC(v6);
    sub_19E1540E8(&v8, cf);
    sub_19E296E58((uint64_t)v7, "Unexpected optimization direction: ", (uint64_t)cf);
    __cxa_throw(v7, (struct type_info *)&unk_1EF0A45D8, (void (*)(void *))sub_19E28A884);
  }
  return 1;
}

void sub_19E296E18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t sub_19E296E58(uint64_t a1, const char *a2, uint64_t a3)
{
  CFDictionaryRef v4 = (const char **)(a1 + 16);
  sub_19E2941D4("[InvalidArgument] ", a2, a3);
  *(void *)a1 = &unk_1EF0A8798;
  uint64_t v5 = (const char *)v4;
  if (*(char *)(a1 + 39) < 0) {
    uint64_t v5 = *v4;
  }
  std::logic_error::logic_error((std::logic_error *)a1, v5);
  *(void *)a1 = &unk_1EF0A8798;
  return a1;
}

void sub_19E296ED4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E296EF0(uint64_t a1)
{
  v2[24] = *(void **)MEMORY[0x1E4F143B8];
  sub_19E2933F8((uint64_t)&v1, a1);
  sub_19E2933F8((uint64_t)v2, (uint64_t)&v1);
  sub_19E2983E8((uint64_t)v2);
}

void sub_19E297320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  uint64_t v18 = *(void *)(v16 - 96);
  if (v18 == v16 - 120)
  {
    sub_19E32FB88();
  }
  else if (v18)
  {
    (*(void (**)(uint64_t))(*(void *)v18 + 40))(v18);
    sub_19E298384((uint64_t)va);
    _Unwind_Resume(a1);
  }
  sub_19E298384((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E2973A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
}

void sub_19E2973C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19E2973DC(uint64_t a1)
{
  v2[24] = *(void **)MEMORY[0x1E4F143B8];
  sub_19E2933F8((uint64_t)&v1, a1);
  sub_19E2933F8((uint64_t)v2, (uint64_t)&v1);
  sub_19E2A8624((uint64_t)v2);
}

void sub_19E29780C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  uint64_t v18 = *(void *)(v16 - 96);
  if (v18 == v16 - 120)
  {
    sub_19E32FB88();
  }
  else if (v18)
  {
    (*(void (**)(uint64_t))(*(void *)v18 + 40))(v18);
    sub_19E298384((uint64_t)va);
    _Unwind_Resume(a1);
  }
  sub_19E298384((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E297894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
}

void sub_19E2978B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19E2978C8(uint64_t a1)
{
  v2[24] = *(void **)MEMORY[0x1E4F143B8];
  sub_19E2933F8((uint64_t)&v1, a1);
  sub_19E2933F8((uint64_t)v2, (uint64_t)&v1);
  sub_19E2B0A1C((uint64_t)v2);
}

void sub_19E297CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  uint64_t v18 = *(void *)(v16 - 96);
  if (v18 == v16 - 120)
  {
    sub_19E32FB88();
  }
  else if (v18)
  {
    (*(void (**)(uint64_t))(*(void *)v18 + 40))(v18);
    sub_19E298384((uint64_t)va);
    _Unwind_Resume(a1);
  }
  sub_19E298384((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E297D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
}

void sub_19E297D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_19E297DB4(uint64_t a1, const char *a2, uint64_t a3)
{
  CFDictionaryRef v4 = (const char **)(a1 + 16);
  sub_19E2941D4("[InvalidArgument] ", a2, a3);
  *(void *)a1 = &unk_1EF0A8798;
  uint64_t v5 = (const char *)v4;
  if (*(char *)(a1 + 39) < 0) {
    uint64_t v5 = *v4;
  }
  std::logic_error::logic_error((std::logic_error *)a1, v5);
  *(void *)a1 = &unk_1EF0A8798;
  return a1;
}

void sub_19E297E30(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

char **sub_19E297E4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5 = *(_DWORD *)(a1 + 56);
  int v6 = *(_DWORD *)(a1 + 60);
  uint64_t v7 = *(void *)(a1 + 64);
  char v30 = 0;
  long long v29 = (char *)&unk_1EF0A86A8;
  int v31 = v5;
  v21[0] = 0;
  *(_DWORD *)long long v22 = v6;
  *(void *)&v22[4] = v7;
  memset(v23, 0, sizeof(v23));
  CFStringRef v24 = v25;
  v25[0] = 0;
  double v26 = 0.0;
  v27[0] = 0;
  v25[1] = 0;
  v25[2] = &v26;
  int v28 = 0;
  char v33 = 0;
  char v32 = (uint64_t (**)(void **, void **))&unk_1EF0A86A8;
  int v34 = v5;
  char v36 = 0;
  int v35 = (uint64_t (**)(void **, void **))&unk_1EF0A86D8;
  int v38 = HIDWORD(v7);
  uint64_t v37 = *(void *)v22;
  sub_19E2965D0(v39, (uint64_t)v23);
  v39[12] = (uint64_t *)v27[1];
  int v40 = v28;
  unint64_t v20 = &unk_1EF0A86D8;
  sub_19E2470C8((char **)v23);
  int v8 = *(_DWORD *)(a1 + 72);
  (*(void (**)(char **__return_ptr))(**(void **)(a1 + 120) + 16))(&v29);
  uint64_t v9 = *(void *)(a2 + 24);
  if (!v9) {
    goto LABEL_16;
  }
  double v10 = (*(double (**)(uint64_t, char **))(*(void *)v9 + 48))(v9, &v29);
  (*(void (**)(void, char **))(**(void **)(a1 + 120) + 24))(*(void *)(a1 + 120), &v29);
  std::chrono::steady_clock::now();
  LODWORD(v20) = 1;
  sub_19E291E68((uint64_t **)v21, (uint64_t *)&v29);
  double v26 = v10;
  sub_19E2A7DDC(*(void *)(a1 + 120), (uint64_t)v27);
  if (1 % v8) {
    goto LABEL_5;
  }
  uint64_t v11 = *(void *)(a2 + 56);
  if (!v11) {
LABEL_17:
  }
    sub_19E2A8074();
  if (((*(uint64_t (**)(uint64_t, void **))(*(void *)v11 + 48))(v11, &v20) & 1) == 0)
  {
LABEL_5:
    if (((*v32)((void **)&v32, &v20) & 1) == 0)
    {
      char v12 = (*v35)((void **)&v35, &v20);
      sub_19E2470C8(v27);
      sub_19E2470C8((char **)v21);
      sub_19E2470C8(&v29);
      if (v12) {
        goto LABEL_15;
      }
      int v13 = 2;
      while (1)
      {
        (*(void (**)(char **__return_ptr))(**(void **)(a1 + 120) + 16))(&v29);
        uint64_t v14 = *(void *)(a2 + 24);
        if (!v14) {
          break;
        }
        double v15 = (*(double (**)(uint64_t, char **))(*(void *)v14 + 48))(v14, &v29);
        (*(void (**)(void, char **))(**(void **)(a1 + 120) + 24))(*(void *)(a1 + 120), &v29);
        std::chrono::steady_clock::now();
        std::chrono::steady_clock::now();
        LODWORD(v20) = v13;
        sub_19E291E68((uint64_t **)v21, (uint64_t *)&v29);
        double v26 = v15;
        sub_19E2A7DDC(*(void *)(a1 + 120), (uint64_t)v27);
        if (!(v13 % v8))
        {
          uint64_t v16 = *(void *)(a2 + 56);
          if (!v16) {
            goto LABEL_17;
          }
          if ((*(uint64_t (**)(uint64_t, void **))(*(void *)v16 + 48))(v16, &v20)) {
            goto LABEL_6;
          }
        }
        if ((*v32)((void **)&v32, &v20)) {
          goto LABEL_6;
        }
        char v17 = (*v35)((void **)&v35, &v20);
        sub_19E2470C8(v27);
        sub_19E2470C8((char **)v21);
        sub_19E2470C8(&v29);
        ++v13;
        if (v17) {
          goto LABEL_15;
        }
      }
LABEL_16:
      sub_19E2A8074();
    }
  }
LABEL_6:
  sub_19E2470C8(v27);
  sub_19E2470C8((char **)v21);
  sub_19E2470C8(&v29);
LABEL_15:
  sub_19E2A7DDC(*(void *)(a1 + 120), a3);
  int v35 = (uint64_t (**)(void **, void **))&unk_1EF0A86D8;
  return sub_19E2470C8((char **)v39);
}

void sub_19E2982FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char *a39)
{
  sub_19E2470C8(v41);
  sub_19E2470C8(v40);
  sub_19E2470C8(&a39);
  *(void *)(v42 - 240) = a11;
  sub_19E2470C8(v39);
  _Unwind_Resume(a1);
}

uint64_t sub_19E298384(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 120);
  *(void *)(a1 + 120) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  return sub_19E2934EC(a1);
}

void sub_19E2983E8(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 48);
  if (v1 != 1)
  {
    if (!v1) {
      sub_19E29849C();
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_19E298774(exception, "Invalid optimizer in user config.");
    __cxa_throw(exception, (struct type_info *)off_1E599CD18, MEMORY[0x1E4FBA1E8]);
  }
  sub_19E298608();
}

void sub_19E298488(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19E29849C()
{
}

void sub_19E2985D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E2934EC((uint64_t)va);
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_19E2985F4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E298608()
{
}

void sub_19E298744(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E2934EC((uint64_t)va);
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_19E298760(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_19E298774(std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
  return result;
}

uint64_t sub_19E2987A8(uint64_t a1, uint64_t a2)
{
  sub_19E2933F8((uint64_t)&v29, a2);
  *(void *)a1 = &unk_1EF0A8318;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  sub_19E2933F8(a1 + 32, (uint64_t)&v29);
  if (v35)
  {
    CFComparisonResult v3 = (char **)__p;
    if (__p)
    {
      CFDictionaryRef v4 = v34;
      int v5 = __p;
      if (v34 != __p)
      {
        do
          CFDictionaryRef v4 = sub_19E2470C8(v4 - 12);
        while (v4 != v3);
        int v5 = __p;
      }
      int v34 = v3;
      operator delete(v5);
    }
  }
  int v6 = (void **)v31;
  if (v31)
  {
    uint64_t v7 = v32;
    int v8 = v31;
    if (v32 != v31)
    {
      do
      {
        if (*((char *)v7 - 17) < 0) {
          operator delete(*(v7 - 5));
        }
        v7 -= 5;
      }
      while (v7 != v6);
      int v8 = v31;
    }
    char v32 = v6;
    operator delete(v8);
  }
  uint64_t v9 = (void **)v29;
  if (v29)
  {
    double v10 = v30;
    uint64_t v11 = v29;
    if (v30 != v29)
    {
      do
      {
        if (*((char *)v10 - 25) < 0) {
          operator delete(*(v10 - 6));
        }
        v10 -= 6;
      }
      while (v10 != v9);
      uint64_t v11 = v29;
    }
    char v30 = v9;
    operator delete(v11);
  }
  *(void *)a1 = &unk_1EF0A8138;
  sub_19E299010(a1 + 152);
  if (*(unsigned char *)(a1 + 112))
  {
    uint64_t v12 = 0;
    unsigned int v13 = *(_DWORD *)(a1 + 108);
    *(_DWORD *)(a1 + 7744) = v13;
    uint64_t v14 = 1;
    unsigned int v15 = v13;
    do
    {
      int v16 = 1812433253 * (v15 ^ (v15 >> 30));
      unsigned int v15 = v16 + v14;
      *(_DWORD *)(a1 + 7748 + 4 * v12) = v12 + v16 + 1;
      ++v14;
      ++v12;
    }
    while (v12 != 623);
    *(void *)(a1 + 10240) = 0;
    *(_DWORD *)(a1 + 152) = v13;
    uint64_t v17 = 1;
    uint64_t v18 = 39;
    unsigned int v19 = v13;
    do
    {
      int v20 = 1812433253 * (v19 ^ (v19 >> 30));
      unsigned int v19 = v20 + v17;
      *(_DWORD *)(a1 + 4 * v18) = v18 + v20 - 38;
      ++v17;
      ++v18;
    }
    while (v18 != 662);
    uint64_t v21 = 0;
    *(void *)(a1 + 2648) = 0;
    *(_DWORD *)(a1 + 2680) = v13;
    uint64_t v22 = 1;
    unsigned int v23 = v13;
    do
    {
      int v24 = 1812433253 * (v23 ^ (v23 >> 30));
      unsigned int v23 = v24 + v22;
      *(_DWORD *)(a1 + 2684 + 4 * v21) = v21 + v24 + 1;
      ++v22;
      ++v21;
    }
    while (v21 != 623);
    uint64_t v25 = 0;
    *(void *)(a1 + 5176) = 0;
    *(_DWORD *)(a1 + 5200) = v13;
    uint64_t v26 = 1;
    do
    {
      int v27 = 1812433253 * (v13 ^ (v13 >> 30));
      unsigned int v13 = v27 + v26;
      *(_DWORD *)(a1 + 5204 + 4 * v25) = v25 + v27 + 1;
      ++v26;
      ++v25;
    }
    while (v25 != 623);
    *(void *)(a1 + 7696) = 0;
    sub_19E312C64();
  }
  return a1;
}

void sub_19E298A2C(_Unwind_Exception *a1)
{
  sub_19E298A78(v2);
  sub_19E298AC8(v1);
  _Unwind_Resume(a1);
}

void sub_19E298A48(_Unwind_Exception *a1)
{
  sub_19E298AC8(v1);
  _Unwind_Resume(a1);
}

void sub_19E298A5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E298FB4(v2);
  sub_19E2934EC((uint64_t)va);
  _Unwind_Resume(a1);
}

std::random_device *sub_19E298A78(std::random_device *a1)
{
  return a1;
}

void *sub_19E298AC8(void *a1)
{
  *a1 = &unk_1EF0A8318;
  sub_19E2934EC((uint64_t)(a1 + 4));
  uint64_t v2 = (char **)a1[1];
  if (v2)
  {
    CFComparisonResult v3 = (char **)a1[2];
    CFDictionaryRef v4 = (void *)a1[1];
    if (v3 != v2)
    {
      do
        CFComparisonResult v3 = sub_19E2470C8(v3 - 13);
      while (v3 != v2);
      CFDictionaryRef v4 = (void *)a1[1];
    }
    a1[2] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_19E298B44(uint64_t a1)
{
  *(void *)a1 = &unk_1EF0A8138;
  std::random_device::~random_device((std::random_device *)(a1 + 10248));
  std::random_device::~random_device((std::random_device *)(a1 + 7704));
  std::random_device::~random_device((std::random_device *)(a1 + 5184));
  std::random_device::~random_device((std::random_device *)(a1 + 2656));
  *(void *)a1 = &unk_1EF0A8318;
  sub_19E2934EC(a1 + 32);
  uint64_t v2 = *(char ***)(a1 + 8);
  if (v2)
  {
    CFComparisonResult v3 = *(char ***)(a1 + 16);
    CFDictionaryRef v4 = *(void **)(a1 + 8);
    if (v3 != v2)
    {
      do
        CFComparisonResult v3 = sub_19E2470C8(v3 - 13);
      while (v3 != v2);
      CFDictionaryRef v4 = *(void **)(a1 + 8);
    }
    *(void *)(a1 + 16) = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_19E298C0C(void *a1)
{
  *(void *)a1 = &unk_1EF0A8138;
  std::random_device::~random_device((std::random_device *)a1 + 2562);
  std::random_device::~random_device((std::random_device *)a1 + 1926);
  std::random_device::~random_device((std::random_device *)a1 + 1296);
  std::random_device::~random_device((std::random_device *)a1 + 664);
  *(void *)a1 = &unk_1EF0A8318;
  sub_19E2934EC((uint64_t)a1 + 32);
  uint64_t v2 = (char **)*((void *)a1 + 1);
  if (v2)
  {
    CFComparisonResult v3 = (char **)*((void *)a1 + 2);
    CFDictionaryRef v4 = (void *)*((void *)a1 + 1);
    if (v3 != v2)
    {
      do
        CFComparisonResult v3 = sub_19E2470C8(v3 - 13);
      while (v3 != v2);
      CFDictionaryRef v4 = (void *)*((void *)a1 + 1);
    }
    *((void *)a1 + 2) = v2;
    operator delete(v4);
  }

  operator delete(a1);
}

void sub_19E298CE4(uint64_t a1@<X0>, uint64_t **a2@<X8>)
{
  sub_19E2990CC(a1, &v28);
  sub_19E29919C(a1, &v26);
  unsigned int v23 = 0;
  int v24 = 0;
  uint64_t v25 = 0;
  sub_19E247444(&v23, (uint64_t)v28, (uint64_t)v29, 0x6DB6DB6DB6DB6DB7 * ((v29 - v28) >> 3));
  __p = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  sub_19E2476F4(&__p, (uint64_t)v26, (uint64_t)v27, 0x6DB6DB6DB6DB6DB7 * ((v27 - (unsigned char *)v26) >> 3));
  sub_19E246C08(a2, (uint64_t *)&v23, (uint64_t *)&__p);
  CFDictionaryRef v4 = (char *)__p;
  if (__p)
  {
    int v5 = v21;
    int v6 = __p;
    if (v21 != __p)
    {
      do
      {
        uint64_t v7 = (void *)*((void *)v5 - 4);
        if (v7)
        {
          *((void *)v5 - 3) = v7;
          operator delete(v7);
        }
        if (*(v5 - 33) < 0) {
          operator delete(*((void **)v5 - 7));
        }
        v5 -= 56;
      }
      while (v5 != v4);
      int v6 = __p;
    }
    uint64_t v21 = v4;
    operator delete(v6);
  }
  int v8 = (char *)v23;
  if (v23)
  {
    uint64_t v9 = v24;
    double v10 = v23;
    if (v24 != v23)
    {
      do
      {
        uint64_t v11 = (void *)*((void *)v9 - 4);
        if (v11)
        {
          *((void *)v9 - 3) = v11;
          operator delete(v11);
        }
        if (*(v9 - 33) < 0) {
          operator delete(*((void **)v9 - 7));
        }
        v9 -= 56;
      }
      while (v9 != v8);
      double v10 = v23;
    }
    int v24 = v8;
    operator delete(v10);
  }
  uint64_t v12 = (char *)v26;
  if (v26)
  {
    unsigned int v13 = v27;
    uint64_t v14 = v26;
    if (v27 != v26)
    {
      do
      {
        unsigned int v15 = (void *)*((void *)v13 - 4);
        if (v15)
        {
          *((void *)v13 - 3) = v15;
          operator delete(v15);
        }
        if (*(v13 - 33) < 0) {
          operator delete(*((void **)v13 - 7));
        }
        v13 -= 56;
      }
      while (v13 != v12);
      uint64_t v14 = v26;
    }
    int v27 = v12;
    operator delete(v14);
  }
  uint64_t v16 = (uint64_t)v28;
  if (v28)
  {
    uint64_t v17 = (uint64_t)v29;
    uint64_t v18 = v28;
    if (v29 != v28)
    {
      do
      {
        unsigned int v19 = *(void **)(v17 - 32);
        if (v19)
        {
          *(void *)(v17 - 24) = v19;
          operator delete(v19);
        }
        if (*(char *)(v17 - 33) < 0) {
          operator delete(*(void **)(v17 - 56));
        }
        v17 -= 56;
      }
      while (v17 != v16);
      uint64_t v18 = v28;
    }
    long long v29 = (unsigned char *)v16;
    operator delete(v18);
  }
}

void sub_19E298EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  int v6 = va_arg(va1, void *);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_19E246278((void **)va);
  sub_19E246278((void **)va1);
  sub_19E246278((void **)(v4 - 40));
  _Unwind_Resume(a1);
}

void sub_19E298F10(_Unwind_Exception *a1)
{
  sub_19E246278((void **)(v1 - 40));
  _Unwind_Resume(a1);
}

char **sub_19E298F24(uint64_t a1, uint64_t *a2, double a3)
{
  sub_19E291E68(v9, a2);
  double v10 = a3;
  int v5 = *(uint64_t ***)(a1 + 16);
  if ((unint64_t)v5 >= *(void *)(a1 + 24))
  {
    uint64_t v7 = sub_19E299F04((uint64_t ***)(a1 + 8), (uint64_t *)v9);
  }
  else
  {
    int v6 = sub_19E291E68(v5, (uint64_t *)v9);
    *((double *)v6 + 12) = v10;
    uint64_t v7 = v6 + 13;
  }
  *(void *)(a1 + 16) = v7;
  return sub_19E2470C8((char **)v9);
}

void sub_19E298FA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E2470C8((char **)va);
  _Unwind_Resume(a1);
}

void **sub_19E298FB4(void **a1)
{
  uint64_t v2 = (char **)*a1;
  if (*a1)
  {
    CFComparisonResult v3 = (char **)a1[1];
    uint64_t v4 = v2;
    if (v3 != v2)
    {
      do
        CFComparisonResult v3 = sub_19E2470C8(v3 - 13);
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_19E299010(uint64_t a1)
{
  uint64_t v2 = sub_19E246588(a1);
  *(_OWORD *)(v2 + 2512) = xmmword_19E351810;
  sub_19E246588(v2 + 2528);
  *(void *)(a1 + 5040) = 0x7FFFFFFF00000000;
  sub_19E246588(a1 + 5048);
  *(void *)(a1 + 7560) = 0;
  *(void *)(a1 + 7568) = 0x3FF0000000000000;
  *(unsigned char *)(a1 + 7584) = 0;
  sub_19E246588(a1 + 7592);
  return a1;
}

void sub_19E299084(_Unwind_Exception *a1)
{
  std::random_device::~random_device(v1 + 1888);
  std::random_device::~random_device(v1 + 1258);
  std::random_device::~random_device(v1 + 626);
  _Unwind_Resume(a1);
}

void sub_19E2990B8(_Unwind_Exception *a1)
{
  std::random_device::~random_device(v1 + 626);
  _Unwind_Resume(a1);
}

void sub_19E2990CC(uint64_t a1@<X0>, void *a2@<X8>)
{
  __p = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  sub_19E246830(&__p, *(void *)(a1 + 32), *(void *)(a1 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 4));
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_19E29926C((long long *)__p, v8, (uint64_t)a2, a1);
  uint64_t v4 = (long long *)__p;
  if (__p)
  {
    int v5 = v8;
    int v6 = __p;
    if (v8 != __p)
    {
      do
      {
        if (*((char *)v5 - 25) < 0) {
          operator delete(*((void **)v5 - 6));
        }
        v5 -= 3;
      }
      while (v5 != v4);
      int v6 = __p;
    }
    uint64_t v8 = v4;
    operator delete(v6);
  }
}

void sub_19E299180(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E246278(v2);
  sub_19E244580((void **)va);
  _Unwind_Resume(a1);
}

void sub_19E29919C(uint64_t a1@<X0>, void *a2@<X8>)
{
  __p = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  sub_19E246A1C(&__p, *(void *)(a1 + 56), *(void *)(a1 + 64), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 64) - *(void *)(a1 + 56)) >> 3));
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_19E29992C((long long *)__p, v8, (uint64_t)a2, a1);
  uint64_t v4 = (long long *)__p;
  if (__p)
  {
    int v5 = v8;
    int v6 = __p;
    if (v8 != __p)
    {
      do
      {
        if (*((char *)v5 - 17) < 0) {
          operator delete(*((void **)v5 - 5));
        }
        int v5 = (long long *)((char *)v5 - 40);
      }
      while (v5 != v4);
      int v6 = __p;
    }
    uint64_t v8 = v4;
    operator delete(v6);
  }
}

void sub_19E299250(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E246278(v2);
  sub_19E2450B0((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E29926C(long long *a1, long long *a2, uint64_t a3, uint64_t a4)
{
  if (a1 != a2)
  {
    int v6 = a1;
    uint64_t v7 = a4 + 152;
    uint64_t v8 = (_OWORD *)(a4 + 2664);
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_19E13C2D0(v20, *(void **)v6, *((void *)v6 + 1));
      }
      else
      {
        long long v9 = *v6;
        uint64_t v21 = *((void *)v6 + 2);
        *(_OWORD *)int v20 = v9;
      }
      long long v10 = *(long long *)((char *)v6 + 24);
      int v23 = *((_DWORD *)v6 + 10);
      long long v22 = v10;
      uint64_t v11 = v23;
      *uint64_t v8 = v10;
      sub_19E29948C(v7, v11, (uint64_t)__p);
      sub_19E247BDC(__dst, (long long *)v20, (uint64_t)__p);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      unint64_t v12 = *(void *)(a3 + 8);
      if (v12 >= *(void *)(a3 + 16))
      {
        uint64_t v18 = sub_19E2996A0((long long **)a3, (uint64_t)__dst);
      }
      else
      {
        long long v13 = *(_OWORD *)__dst;
        *(void *)(v12 + 16) = v25;
        *(_OWORD *)unint64_t v12 = v13;
        __dst[1] = 0;
        uint64_t v25 = 0;
        *(void *)(v12 + 24) = 0;
        __dst[0] = 0;
        *(void *)(v12 + 32) = 0;
        *(void *)(v12 + 40) = 0;
        uint64_t v14 = v26;
        int64_t v15 = v27 - (unsigned char *)v26;
        if (v27 != v26)
        {
          if (v15 < 0) {
            sub_19E13D694();
          }
          uint64_t v16 = (char *)operator new(v27 - (unsigned char *)v26);
          *(void *)(v12 + 24) = v16;
          *(void *)(v12 + 32) = v16;
          uint64_t v17 = &v16[8 * (v15 >> 3)];
          *(void *)(v12 + 40) = v17;
          memcpy(v16, v14, v15);
          *(void *)(v12 + 32) = v17;
        }
        *(_DWORD *)(v12 + 48) = v28;
        uint64_t v18 = (long long *)(v12 + 56);
        *(void *)(a3 + 8) = v12 + 56;
      }
      *(void *)(a3 + 8) = v18;
      if (v26)
      {
        int v27 = v26;
        operator delete(v26);
      }
      if (SHIBYTE(v25) < 0)
      {
        operator delete(__dst[0]);
        if (SHIBYTE(v21) < 0) {
LABEL_21:
        }
          operator delete(v20[0]);
      }
      else if (SHIBYTE(v21) < 0)
      {
        goto LABEL_21;
      }
      v6 += 3;
    }
    while (v6 != a2);
  }
  return a3;
}

void sub_19E299430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  int v23 = *v20;
  if (*v20)
  {
    *(void *)(v21 + 32) = v23;
    operator delete(v23);
  }
  if (*(char *)(v21 + 23) < 0) {
    operator delete(*(void **)v21);
  }
  *(void *)(v19 + 8) = v21;
  sub_19E293278((uint64_t)&a19);
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_19E29948C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = a2;
  uint64_t v4 = result;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(void *)(a3 + 16) = 0;
  if (a2)
  {
    if ((a2 & 0x80000000) != 0) {
      sub_19E13D694();
    }
    size_t v6 = (int)a2;
    uint64_t v7 = (double *)operator new(v6 * 8);
    bzero(v7, 8 * (int)v3);
    *(void *)a3 = v7;
    *(void *)(a3 + 8) = &v7[v6];
    *(void *)(a3 + 16) = &v7[(int)v3];
    *(_DWORD *)(a3 + 24) = v3;
  }
  else
  {
    uint64_t v7 = 0;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(_DWORD *)(a3 + 24) = 0;
    if (!a2) {
      return result;
    }
  }
  double v8 = *(double *)(v4 + 2512);
  double v9 = (*(double *)(v4 + 2520) - v8) * 5.42101086e-20;
  unint64_t v10 = *(void *)(v4 + 2496);
  do
  {
    unint64_t v11 = (v10 + 1) % 0x270;
    uint64_t v12 = 4 * v10;
    uint64_t v13 = 4 * v11;
    unsigned int v14 = *(_DWORD *)(v4 + 4 * ((v10 + 397) % 0x270)) ^ ((*(_DWORD *)(v4 + 4 * v11) & 0x7FFFFFFE | *(_DWORD *)(v4 + 4 * v10) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(v4 + 4 * v11) << 31) >> 31) & 0x9908B0DF;
    *(_DWORD *)(v4 + v12) = v14;
    unsigned int v15 = ((v14 ^ (v14 >> 11)) << 7) & 0x9D2C5680 ^ v14 ^ (v14 >> 11);
    if (v11 == 623) {
      unint64_t v10 = 0;
    }
    else {
      unint64_t v10 = v11 + 1;
    }
    if (v11 >= 0xE3) {
      uint64_t v16 = -227;
    }
    else {
      uint64_t v16 = 397;
    }
    unsigned int v17 = *(_DWORD *)(v4 + 4 * (v16 + v11)) ^ ((*(_DWORD *)(v4 + 4 * v10) & 0x7FFFFFFE | *(_DWORD *)(v4 + 4 * v11) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(v4 + 4 * v10) << 31) >> 31) & 0x9908B0DF;
    unsigned int v18 = ((v17 ^ (v17 >> 11)) << 7) & 0x9D2C5680 ^ v17 ^ (v17 >> 11);
    double v19 = (double)((v15 << 15) & 0xEFC60000 ^ v15 ^ (((v15 << 15) & 0xEFC60000 ^ v15) >> 18));
    uint64_t result = (v18 << 15) & 0xEFC60000 ^ v18 ^ (((v18 << 15) & 0xEFC60000 ^ v18) >> 18);
    *(_DWORD *)(v4 + v13) = v17;
    *v7++ = v8 + v9 * (v19 + (double)result * 4294967300.0);
    --v3;
  }
  while (v3);
  *(void *)(v4 + 2496) = v10;
  return result;
}

void sub_19E299684(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E13A9BC(a1);
}

long long *sub_19E2996A0(long long **a1, uint64_t a2)
{
  uint64_t v3 = (char *)a1[1] - (char *)*a1;
  unint64_t v4 = 0x6DB6DB6DB6DB6DB7 * (v3 >> 3) + 1;
  if (v4 > 0x492492492492492) {
    sub_19E13D694();
  }
  if (0xDB6DB6DB6DB6DB6ELL * (((char *)a1[2] - (char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0xDB6DB6DB6DB6DB6ELL * (((char *)a1[2] - (char *)*a1) >> 3);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((char *)a1[2] - (char *)*a1) >> 3)) >= 0x249249249249249) {
    unint64_t v6 = 0x492492492492492;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x492492492492492) {
      sub_19E13C418();
    }
    uint64_t v7 = (char *)operator new(56 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  double v8 = &v7[8 * (v3 >> 3)];
  double v9 = (long long *)&v7[56 * v6];
  *(_OWORD *)double v8 = *(_OWORD *)a2;
  unint64_t v10 = *(unsigned char **)(a2 + 24);
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  unint64_t v11 = &v7[v3];
  *((void *)v11 + 3) = 0;
  *((void *)v11 + 4) = 0;
  *((void *)v11 + 5) = 0;
  uint64_t v12 = *(unsigned char **)(a2 + 32);
  int64_t v13 = v12 - v10;
  if (v12 != v10)
  {
    if (v13 < 0) {
      sub_19E13D694();
    }
    unsigned int v14 = (char *)operator new(v12 - v10);
    *((void *)v11 + 3) = v14;
    *((void *)v11 + 4) = v14;
    unsigned int v15 = &v14[8 * (v13 >> 3)];
    *((void *)v11 + 5) = v15;
    memcpy(v14, v10, v13);
    *((void *)v11 + 4) = v15;
  }
  *((_DWORD *)v11 + 12) = *(_DWORD *)(a2 + 48);
  uint64_t v16 = (long long *)(v8 + 56);
  uint64_t v25 = (long long *)(v8 + 56);
  unsigned int v18 = *a1;
  unsigned int v17 = a1[1];
  if (v17 == *a1)
  {
    *a1 = (long long *)v8;
    a1[1] = v16;
    a1[2] = v9;
  }
  else
  {
    double v19 = v8;
    do
    {
      int v20 = (long long *)(v19 - 56);
      unsigned int v17 = (long long *)((char *)v17 - 56);
      sub_19E247D38(a1 + 16, (void *)v19 - 7, v17);
      v19 -= 56;
    }
    while (v17 != v18);
    uint64_t v21 = *a1;
    unsigned int v17 = a1[1];
    long long v22 = v20;
    uint64_t v16 = v25;
    *a1 = v22;
    a1[1] = v25;
    a1[2] = v9;
    if (v17 != v21)
    {
      do
      {
        int v23 = (void *)*((void *)v17 - 4);
        if (v23)
        {
          *((void *)v17 - 3) = v23;
          operator delete(v23);
        }
        if (*((char *)v17 - 33) < 0) {
          operator delete(*((void **)v17 - 7));
        }
        unsigned int v17 = (long long *)((char *)v17 - 56);
      }
      while (v17 != v21);
      unsigned int v17 = v21;
    }
  }
  if (v17) {
    operator delete(v17);
  }
  return v16;
}

void sub_19E2998D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  unint64_t v6 = *v3;
  if (*v3)
  {
    *(void *)(v4 + 32) = v6;
    operator delete(v6);
  }
  if (*(char *)(v2 + 23) < 0)
  {
    operator delete(*(void **)v2);
    sub_19E247CC0((uint64_t)va);
    _Unwind_Resume(a1);
  }
  sub_19E247CC0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E29992C(long long *a1, long long *a2, uint64_t a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v7 = a1;
    uint64_t v8 = a4 + 152;
    do
    {
      if (*((char *)v7 + 23) < 0)
      {
        sub_19E13C2D0(v20, *(void **)v7, *((void *)v7 + 1));
      }
      else
      {
        long long v9 = *v7;
        uint64_t v21 = *((void *)v7 + 2);
        *(_OWORD *)int v20 = v9;
      }
      uint64_t v10 = *((void *)v7 + 3);
      int v23 = *((_DWORD *)v7 + 8);
      uint64_t v22 = v10;
      uint64_t v11 = v23;
      *(void *)(a4 + 5192) = v10;
      sub_19E299B4C(v8, v11, (uint64_t)__p);
      sub_19E248108(__dst, (long long *)v20, (uint64_t)__p);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      unint64_t v12 = *(void *)(a3 + 8);
      if (v12 >= *(void *)(a3 + 16))
      {
        unsigned int v18 = sub_19E299C78((long long **)a3, (uint64_t)__dst);
      }
      else
      {
        long long v13 = *(_OWORD *)__dst;
        *(void *)(v12 + 16) = v25;
        *(_OWORD *)unint64_t v12 = v13;
        __dst[1] = 0;
        uint64_t v25 = 0;
        *(void *)(v12 + 24) = 0;
        __dst[0] = 0;
        *(void *)(v12 + 32) = 0;
        *(void *)(v12 + 40) = 0;
        unsigned int v14 = v26;
        int64_t v15 = v27 - (unsigned char *)v26;
        if (v27 != v26)
        {
          if (v15 < 0) {
            sub_19E13D694();
          }
          uint64_t v16 = (char *)operator new(v27 - (unsigned char *)v26);
          *(void *)(v12 + 24) = v16;
          *(void *)(v12 + 32) = v16;
          unsigned int v17 = &v16[4 * (v15 >> 2)];
          *(void *)(v12 + 40) = v17;
          memcpy(v16, v14, v15);
          *(void *)(v12 + 32) = v17;
        }
        *(_DWORD *)(v12 + 48) = v28;
        unsigned int v18 = (long long *)(v12 + 56);
        *(void *)(a3 + 8) = v12 + 56;
      }
      *(void *)(a3 + 8) = v18;
      if (v26)
      {
        int v27 = v26;
        operator delete(v26);
      }
      if (SHIBYTE(v25) < 0)
      {
        operator delete(__dst[0]);
        if (SHIBYTE(v21) < 0) {
LABEL_21:
        }
          operator delete(v20[0]);
      }
      else if (SHIBYTE(v21) < 0)
      {
        goto LABEL_21;
      }
      uint64_t v7 = (long long *)((char *)v7 + 40);
    }
    while (v7 != a2);
  }
  return a3;
}

void sub_19E299AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v21 = *v18;
  if (*v18)
  {
    *(void *)(v19 + 32) = v21;
    operator delete(v21);
  }
  if (*(char *)(v19 + 23) < 0) {
    operator delete(*(void **)v19);
  }
  *(void *)(v17 + 8) = v19;
  sub_19E293278((uint64_t)&a17);
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_19E299B4C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = result;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(void *)(a3 + 16) = 0;
  if (a2)
  {
    if ((a2 & 0x80000000) != 0) {
      sub_19E13D694();
    }
    size_t v6 = 4 * (int)a2;
    uint64_t v7 = (char *)operator new(v6);
    bzero(v7, 4 * (int)a2);
    *(void *)a3 = v7;
    *(void *)(a3 + 8) = &v7[v6];
    *(void *)(a3 + 16) = &v7[4 * (int)a2];
    *(_DWORD *)(a3 + 24) = a2;
  }
  else
  {
    *(void *)(a3 + 8) = 0;
    *(void *)a3 = 0;
    *(void *)(a3 + 16) = 0;
    *(_DWORD *)(a3 + 24) = 0;
    if (!a2) {
      return result;
    }
    uint64_t v7 = 0;
  }
  uint64_t v8 = 0;
  uint64_t v9 = v4 + 2528;
  uint64_t v10 = (_DWORD *)(v4 + 5040);
  do
  {
    uint64_t result = sub_19E246690((uint64_t)v10, v9, v10);
    *(_DWORD *)&v7[4 * v8++] = result;
  }
  while (a2 != v8);
  return result;
}

void sub_19E299C40(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E13A9BC(a1);
}

void sub_19E299C5C(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    void *v2 = v1;
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

long long *sub_19E299C78(long long **a1, uint64_t a2)
{
  uint64_t v3 = (char *)a1[1] - (char *)*a1;
  unint64_t v4 = 0x6DB6DB6DB6DB6DB7 * (v3 >> 3) + 1;
  if (v4 > 0x492492492492492) {
    sub_19E13D694();
  }
  if (0xDB6DB6DB6DB6DB6ELL * (((char *)a1[2] - (char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0xDB6DB6DB6DB6DB6ELL * (((char *)a1[2] - (char *)*a1) >> 3);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((char *)a1[2] - (char *)*a1) >> 3)) >= 0x249249249249249) {
    unint64_t v6 = 0x492492492492492;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x492492492492492) {
      sub_19E13C418();
    }
    uint64_t v7 = (char *)operator new(56 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = &v7[8 * (v3 >> 3)];
  uint64_t v9 = (long long *)&v7[56 * v6];
  *(_OWORD *)uint64_t v8 = *(_OWORD *)a2;
  uint64_t v10 = *(unsigned char **)(a2 + 24);
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v11 = &v7[v3];
  *((void *)v11 + 3) = 0;
  *((void *)v11 + 4) = 0;
  *((void *)v11 + 5) = 0;
  unint64_t v12 = *(unsigned char **)(a2 + 32);
  int64_t v13 = v12 - v10;
  if (v12 != v10)
  {
    if (v13 < 0) {
      sub_19E13D694();
    }
    unsigned int v14 = (char *)operator new(v12 - v10);
    *((void *)v11 + 3) = v14;
    *((void *)v11 + 4) = v14;
    int64_t v15 = &v14[4 * (v13 >> 2)];
    *((void *)v11 + 5) = v15;
    memcpy(v14, v10, v13);
    *((void *)v11 + 4) = v15;
  }
  *((_DWORD *)v11 + 12) = *(_DWORD *)(a2 + 48);
  uint64_t v16 = (long long *)(v8 + 56);
  uint64_t v25 = (long long *)(v8 + 56);
  unsigned int v18 = *a1;
  uint64_t v17 = a1[1];
  if (v17 == *a1)
  {
    *a1 = (long long *)v8;
    a1[1] = v16;
    a1[2] = v9;
  }
  else
  {
    uint64_t v19 = v8;
    do
    {
      int v20 = (long long *)(v19 - 56);
      uint64_t v17 = (long long *)((char *)v17 - 56);
      sub_19E2481EC(a1 + 16, (void *)v19 - 7, v17);
      v19 -= 56;
    }
    while (v17 != v18);
    uint64_t v21 = *a1;
    uint64_t v17 = a1[1];
    uint64_t v22 = v20;
    uint64_t v16 = v25;
    *a1 = v22;
    a1[1] = v25;
    a1[2] = v9;
    if (v17 != v21)
    {
      do
      {
        int v23 = (void *)*((void *)v17 - 4);
        if (v23)
        {
          *((void *)v17 - 3) = v23;
          operator delete(v23);
        }
        if (*((char *)v17 - 33) < 0) {
          operator delete(*((void **)v17 - 7));
        }
        uint64_t v17 = (long long *)((char *)v17 - 56);
      }
      while (v17 != v21);
      uint64_t v17 = v21;
    }
  }
  if (v17) {
    operator delete(v17);
  }
  return v16;
}

void sub_19E299EA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  unint64_t v6 = *v3;
  if (*v3)
  {
    *(void *)(v4 + 32) = v6;
    operator delete(v6);
  }
  if (*(char *)(v2 + 23) < 0)
  {
    operator delete(*(void **)v2);
    sub_19E247CC0((uint64_t)va);
    _Unwind_Resume(a1);
  }
  sub_19E247CC0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_19E299F04(uint64_t ***a1, uint64_t *a2)
{
  uint64_t v3 = (char *)a1[1] - (char *)*a1;
  unint64_t v4 = 0x4EC4EC4EC4EC4EC5 * (v3 >> 3) + 1;
  if (v4 > 0x276276276276276) {
    sub_19E13D694();
  }
  if (0x9D89D89D89D89D8ALL * (a1[2] - *a1) > v4) {
    unint64_t v4 = 0x9D89D89D89D89D8ALL * (a1[2] - *a1);
  }
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * (a1[2] - *a1)) >= 0x13B13B13B13B13BLL) {
    unint64_t v6 = 0x276276276276276;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x276276276276276) {
      sub_19E13C418();
    }
    uint64_t v7 = (uint64_t **)operator new(104 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = &v7[13 * v6];
  uint64_t v9 = sub_19E291E68(&v7[v3 >> 3], a2);
  *(uint64_t **)((char *)v7 + v3 + 96) = (uint64_t *)a2[12];
  uint64_t v10 = v9 + 13;
  unint64_t v12 = (char **)*a1;
  uint64_t v11 = (char **)a1[1];
  if (v11 == (char **)*a1)
  {
    *a1 = v9;
    a1[1] = v10;
    a1[2] = v8;
    if (!v11) {
      return v10;
    }
    goto LABEL_17;
  }
  do
  {
    int64_t v13 = v9;
    uint64_t v9 = sub_19E2965D0(v9 - 13, (uint64_t)(v11 - 13));
    *(v13 - 1) = (uint64_t *)*(v11 - 1);
    v11 -= 13;
  }
  while (v11 != v12);
  unsigned int v14 = (char **)*a1;
  uint64_t v11 = (char **)a1[1];
  *a1 = v9;
  a1[1] = v10;
  a1[2] = v8;
  if (v11 != v14)
  {
    do
    {
      v11 -= 13;
      sub_19E2470C8(v11);
    }
    while (v11 != v14);
    uint64_t v11 = v14;
  }
  if (v11) {
LABEL_17:
  }
    operator delete(v11);
  return v10;
}

void sub_19E29A084(uint64_t a1, uint64_t *a2)
{
  sub_19E2933F8((uint64_t)&v16, (uint64_t)a2);
  *(void *)a1 = &unk_1EF0A8318;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  sub_19E2933F8(a1 + 32, (uint64_t)&v16);
  if (v22)
  {
    unint64_t v4 = (char **)__p;
    if (__p)
    {
      int v5 = v21;
      unint64_t v6 = __p;
      if (v21 != __p)
      {
        do
          int v5 = sub_19E2470C8(v5 - 12);
        while (v5 != v4);
        unint64_t v6 = __p;
      }
      uint64_t v21 = v4;
      operator delete(v6);
    }
  }
  uint64_t v7 = (void **)v18;
  if (v18)
  {
    uint64_t v8 = v19;
    uint64_t v9 = v18;
    if (v19 != v18)
    {
      do
      {
        if (*((char *)v8 - 17) < 0) {
          operator delete(*(v8 - 5));
        }
        v8 -= 5;
      }
      while (v8 != v7);
      uint64_t v9 = v18;
    }
    uint64_t v19 = v7;
    operator delete(v9);
  }
  uint64_t v10 = (void **)v16;
  if (v16)
  {
    uint64_t v11 = v17;
    unint64_t v12 = v16;
    if (v17 != v16)
    {
      do
      {
        if (*((char *)v11 - 25) < 0) {
          operator delete(*(v11 - 6));
        }
        v11 -= 6;
      }
      while (v11 != v10);
      unint64_t v12 = v16;
    }
    uint64_t v17 = v10;
    operator delete(v12);
  }
  *(void *)a1 = &unk_1EF0A8528;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  int v13 = sub_19E244298(a2);
  int v14 = sub_19E244DC4((uint64_t)a2);
  *(_DWORD *)(a1 + 176) = v14 + v13;
  *(void *)(a1 + 184) = v14 + v13;
  *(_OWORD *)(a1 + 192) = xmmword_19E351FD0;
  *(void *)(a1 + 208) = 0x3FF0000000000000;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 240) = 0;
  int64_t v15 = operator new(0x10uLL);
  *(void *)(a1 + 216) = v15;
  *(void *)(a1 + 224) = v15 + 2;
  *(void *)(a1 + 232) = v15 + 2;
  *(_DWORD *)(a1 + 240) = 2;
  *int64_t v15 = 0;
  v15[1] = 0;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  *(void *)(a1 + 440) = 0;
  *(_DWORD *)(a1 + 464) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 292) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 420) = 0u;
  *(void *)(a1 + 488) = a1 + 176;
  *(void *)(a1 + 496) = 0;
  *(_DWORD *)(a1 + 520) = 0;
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  *(_DWORD *)(a1 + 536) = -1;
  *(void *)(a1 + 480) = &unk_1EF0A7EF8;
  *(void *)(a1 + 544) = 0;
  sub_19E299010(a1 + 552);
  *(void *)(a1 + 10672) = 0;
  *(_OWORD *)(a1 + 10656) = 0u;
  if ((int)sub_19E244DC4(a1 + 32) >= 1) {
    sub_19E29A83C();
  }
  sub_19E29A9EC();
}

void sub_19E29A728(_Unwind_Exception *a1)
{
  sub_19E2462FC(v6);
  sub_19E298A78(v5);
  uint64_t v8 = (void **)(v1 + 62);
  uint64_t v9 = v1[68];
  v1[68] = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  void *v4 = &unk_1EF0A7CC8;
  uint64_t v10 = *v8;
  if (*v8)
  {
    v1[63] = v10;
    operator delete(v10);
  }
  sub_19E2A3E04(v3);
  sub_19E29AC3C(v2);
  sub_19E298AC8(v1);
  _Unwind_Resume(a1);
}

void sub_19E29A83C()
{
}

void sub_19E29A998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_19E245FE8(&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_19E29A9B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
  {
    sub_19E32FAD8((uint64_t)&a9, a9);
    operator delete(v9);
    _Unwind_Resume(a1);
  }
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_19E29A9EC()
{
}

void sub_19E29AB48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_19E245FE8(&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_19E29AB64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
  {
    sub_19E32FAD8((uint64_t)&a9, a9);
    operator delete(v9);
    _Unwind_Resume(a1);
  }
  operator delete(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_19E29AB9C(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_19E2A329C(a1, *(std::string **)a2, *(std::string **)(a2 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
    sub_19E2A35D8(a1 + 24, *(std::string **)(a2 + 24), *(std::string **)(a2 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3));
    sub_19E2A3914((uint64_t **)(a1 + 48), *(void **)(a2 + 48), (void *)(a2 + 56));
    sub_19E2A3914((uint64_t **)(a1 + 72), *(void **)(a2 + 72), (void *)(a2 + 80));
  }
  return a1;
}

void **sub_19E29AC3C(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    unint64_t v4 = *a1;
    if (v3 != v2)
    {
      int v5 = (char *)a1[1];
      do
      {
        uint64_t v7 = (void *)*((void *)v5 - 7);
        v5 -= 56;
        unint64_t v6 = v7;
        if (v7)
        {
          *((void *)v3 - 6) = v6;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      unint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_19E29ACB8(uint64_t a1)
{
  uint64_t v1 = (void *)sub_19E2A3EA8(a1);

  operator delete(v1);
}

uint64_t **sub_19E29ACE0@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X8>)
{
  uint64_t v4 = a1 + 8;
  unint64_t v5 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3);
  uint64_t v6 = a1 + 32;
  int v7 = sub_19E244298((uint64_t *)(a1 + 32));
  signed int v8 = 5 * (sub_19E244DC4(v6) + v7);
  if (*(unsigned char *)(v4 + 136) && v8 <= (int)(-1431655765 * ((*(void *)(a1 + 128) - *(void *)(a1 + 120)) >> 5))) {
    signed int v8 = -1431655765 * ((*(void *)(a1 + 128) - *(void *)(a1 + 120)) >> 5);
  }
  if (v5 >= v8)
  {
    (*(void (**)(char **__return_ptr))(**(void **)(a1 + 544) + 16))(v11);
    sub_19E291E68(a2, (uint64_t *)v11);
    return (uint64_t **)sub_19E2470C8(v11);
  }
  else
  {
    uint64_t v9 = (uint64_t *)(*(void *)(a1 + 10656)
                   + 96 * (int)(-991146299 * ((*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3)));
    return sub_19E291E68(a2, v9);
  }
}

void sub_19E29AE24(uint64_t a1, long long **a2, double a3)
{
  sub_19E29CE6C(a2, (uint64_t)&__p);
  double v5 = sub_19E29F328(a1 + 176, (const double **)&__p);
  double v7 = sqrt(v6);
  double v20 = v7;
  double v21 = v5;
  double v8 = erfc((v5 - *(double *)(a1 + 528)) * -0.707106781 / v7) * 0.5;
  double v19 = v8;
  unint64_t v9 = *(void *)(a1 + 160);
  if (v9 >= *(void *)(a1 + 168))
  {
    uint64_t v14 = sub_19E2A4064((uint64_t *)(a1 + 152), (uint64_t)&__p, &v21, (uint64_t *)&v20, (uint64_t *)&v19);
  }
  else
  {
    *(void *)unint64_t v9 = 0;
    *(void *)(v9 + 8) = 0;
    *(void *)(v9 + 16) = 0;
    uint64_t v10 = __p;
    int64_t v11 = v23 - (unsigned char *)__p;
    if (v23 != __p)
    {
      if (v11 < 0) {
        sub_19E13D694();
      }
      unint64_t v12 = (char *)operator new(v23 - (unsigned char *)__p);
      *(void *)unint64_t v9 = v12;
      *(void *)(v9 + 8) = v12;
      int v13 = &v12[8 * (v11 >> 3)];
      *(void *)(v9 + 16) = v13;
      memcpy(v12, v10, v11);
      *(void *)(v9 + 8) = v13;
    }
    *(_DWORD *)(v9 + 24) = v24;
    *(double *)(v9 + 32) = v5;
    *(double *)(v9 + 40) = v7;
    *(double *)(v9 + 48) = v8;
    uint64_t v14 = v9 + 56;
    *(void *)(a1 + 160) = v9 + 56;
  }
  *(void *)(a1 + 160) = v14;
  uint64_t v15 = *(int *)(a1 + 464);
  uint64_t v16 = v15 + 1;
  *(_DWORD *)(a1 + 464) = v15 + 1;
  uint64_t v17 = *(void *)(a1 + 440);
  unint64_t v18 = (*(void *)(a1 + 448) - v17) >> 3;
  if (v15 + 1 <= v18)
  {
    if (v15 + 1 < v18) {
      *(void *)(a1 + 448) = v17 + 8 * v15 + 8;
    }
  }
  else
  {
    sub_19E2482DC(a1 + 440, v15 + 1 - v18);
    uint64_t v16 = *(int *)(a1 + 464);
    uint64_t v17 = *(void *)(a1 + 440);
  }
  *(double *)(v17 + 8 * v16 - 8) = a3;
  sub_19E2A44CC(a1 + 176, (uint64_t)&__p);
  sub_19E2A5C20(a1 + 472, a1 + 176);
}

void sub_19E29B024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, char *a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

long double sub_19E29B070(uint64_t a1, double a2, double a3)
{
  return erfc((a2 - *(double *)(a1 + 48)) * -0.707106781 / a3) * 0.5;
}

double sub_19E29B0A8()
{
  return 0.0;
}

void sub_19E29B0B0(uint64_t a1)
{
  uint64_t v104 = 0;
  uint64_t v105 = 0;
  uint64_t v106 = 0;
  uint64_t v1 = *(void **)(a1 + 8);
  uint64_t v101 = 0;
  v102 = 0;
  size_t v100 = 0;
  uint64_t v3 = (unsigned char *)v1[9];
  uint64_t v2 = (unsigned char *)v1[10];
  int64_t v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0) {
      sub_19E13D694();
    }
    double v5 = (char *)operator new(v2 - v3);
    double v6 = &v5[8 * (v4 >> 3)];
    size_t v100 = v5;
    v102 = v6;
    memcpy(v5, v3, v4);
    uint64_t v101 = v6;
  }
  uint64_t v7 = v1[12];
  uint64_t v103 = v7;
  if (!v7)
  {
    uint64_t v55 = 0;
    unsigned __int8 v58 = 0;
    *(_DWORD *)(a1 + 56) = 0;
    long long v62 = v100;
    signed int v63 = HIDWORD(v103);
    long long v107 = 0;
    int v108 = 0;
    uint64_t v109 = 0;
    if (HIDWORD(v103)) {
      goto LABEL_65;
    }
    goto LABEL_81;
  }
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  uint64_t v10 = 0;
  int64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v90 = (int)v7;
  uint64_t v91 = v7;
  size_t v13 = 8 * (v7 >> 32);
  uint64_t v88 = v7 >> 32;
  size_t v89 = v13;
  unint64_t v87 = (v7 >> 32) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v93 = HIDWORD(v7);
  uint64_t v94 = 16;
  do
  {
    uint64_t v14 = *(void *)(a1 + 8);
    uint64_t v15 = v100;
    __p = 0;
    *(void *)long long v96 = 0;
    uint64_t v97 = 0;
    if (!v93)
    {
      uint64_t v16 = 0;
      int v108 = 0;
      uint64_t v109 = 0;
      long long v107 = 0;
      unsigned int v110 = 0;
      goto LABEL_27;
    }
    if (v7 < 0) {
      sub_19E13D694();
    }
    uint64_t v16 = operator new(v13);
    bzero(v16, v13);
    if ((unint64_t)v7 >> 33 < 3)
    {
      unint64_t v17 = 0;
      unint64_t v18 = v88;
      goto LABEL_17;
    }
    unint64_t v18 = v88;
    if ((unint64_t)((char *)v16 - &v100[v13 * v12]) < 0x20)
    {
      unint64_t v17 = 0;
LABEL_17:
      unint64_t v23 = v18 - v17;
      uint64_t v24 = 8 * v17;
      uint64_t v25 = (void *)v16 + v17;
      uint64_t v26 = (uint64_t *)&v15[v8 + v24];
      do
      {
        uint64_t v27 = *v26++;
        *v25++ = v27;
        --v23;
      }
      while (v23);
      goto LABEL_19;
    }
    double v19 = (long long *)&v100[v94];
    double v20 = v16 + 1;
    unint64_t v21 = v87;
    do
    {
      long long v22 = *v19;
      *(v20 - 1) = *(v19 - 1);
      *double v20 = v22;
      v19 += 2;
      v20 += 2;
      v21 -= 4;
    }
    while (v21);
    unint64_t v17 = v87;
    if (v88 != v87) {
      goto LABEL_17;
    }
LABEL_19:
    long long v107 = 0;
    int v108 = 0;
    uint64_t v109 = 0;
    unsigned int v110 = v93;
    sub_19E2482DC((uint64_t)&v107, v18);
    uint64_t v28 = v110;
    if ((int)v110 >= 1)
    {
      uint64_t v29 = 0;
      char v30 = v107;
      if (v110 < 4) {
        goto LABEL_25;
      }
      if ((unint64_t)((char *)v107 - (char *)v16) < 0x20) {
        goto LABEL_25;
      }
      unint64_t v31 = 0;
      uint64_t v29 = v110 & 0xFFFFFFFC;
      uint64_t v32 = (8 * v110) & 0x7FFFFFFE0;
      do
      {
        long long v33 = v16[v31 / 0x10 + 1];
        int v34 = (double *)&v30[v31 / 8];
        *(_OWORD *)int v34 = v16[v31 / 0x10];
        *((_OWORD *)v34 + 1) = v33;
        v31 += 32;
      }
      while (v32 != v31);
      if (v29 != v28)
      {
LABEL_25:
        uint64_t v35 = v28 - v29;
        uint64_t v36 = v29 << 32;
        do
        {
          *(const double *)((char *)v30 + (v36 >> 29)) = *(const double *)((char *)v16 + (v36 >> 29));
          v36 += 0x100000000;
          --v35;
        }
        while (v35);
      }
    }
LABEL_27:
    double v37 = sub_19E29B884(v14, (const double **)&v107);
    double v38 = v37;
    if (v11 < v10)
    {
      *v11++ = v37;
      uint64_t v7 = v91;
      size_t v13 = v89;
      uint64_t v105 = (uint64_t)v11;
      uint64_t v39 = v107;
      if (!v107) {
        goto LABEL_30;
      }
LABEL_29:
      int v108 = v39;
      operator delete(v39);
      goto LABEL_30;
    }
    uint64_t v40 = v11 - v9;
    unint64_t v41 = v40 + 1;
    if ((unint64_t)(v40 + 1) >> 61) {
      sub_19E13D694();
    }
    if (((char *)v10 - (char *)v9) >> 2 > v41) {
      unint64_t v41 = ((char *)v10 - (char *)v9) >> 2;
    }
    if ((unint64_t)((char *)v10 - (char *)v9) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v42 = v41;
    }
    if (v42)
    {
      if (v42 >> 61) {
        sub_19E13C418();
      }
      int v43 = operator new(8 * v42);
      uint64_t v44 = (double *)&v43[8 * v40];
      double *v44 = v38;
      uint64_t v45 = (uint64_t)(v44 + 1);
      if (v11 != v9)
      {
LABEL_41:
        unint64_t v46 = (char *)(v11 - 1) - (char *)v9;
        if (v46 < 0x168
          || &v43[(char *)v11 - (char *)v9 - 8 - (v46 & 0xFFFFFFFFFFFFFFF8)] > &v43[(char *)v11 - (char *)v9 - 8]
          || (double *)((char *)v11 - (v46 & 0xFFFFFFFFFFFFFFF8) - 8) > v11 - 1
          || (unint64_t)((char *)v9 - v43) < 0x20)
        {
          char v47 = v11;
          uint64_t v7 = v91;
          size_t v13 = v89;
        }
        else
        {
          uint64_t v49 = (v46 >> 3) + 1;
          uint64_t v50 = 8 * (v49 & 0x3FFFFFFFFFFFFFFCLL);
          char v47 = &v11[v50 / 0xFFFFFFFFFFFFFFF8];
          uint64_t v44 = (double *)((char *)v44 - v50);
          uint64_t v51 = &v43[8 * v40 - 16];
          uint64_t v52 = v11 - 2;
          uint64_t v53 = v49 & 0x3FFFFFFFFFFFFFFCLL;
          uint64_t v7 = v91;
          do
          {
            long long v54 = *(_OWORD *)v52;
            *(v51 - 1) = *((_OWORD *)v52 - 1);
            *uint64_t v51 = v54;
            v51 -= 2;
            v52 -= 4;
            v53 -= 4;
          }
          while (v53);
          size_t v13 = v89;
          if (v49 == (v49 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_44:
            uint64_t v10 = (double *)&v43[8 * v42];
            uint64_t v104 = v44;
            uint64_t v105 = v45;
            uint64_t v106 = v10;
            if (!v9) {
              goto LABEL_46;
            }
LABEL_45:
            operator delete(v9);
            goto LABEL_46;
          }
        }
        do
        {
          uint64_t v48 = *((void *)v47-- - 1);
          *((void *)v44-- - 1) = v48;
        }
        while (v47 != v9);
        goto LABEL_44;
      }
    }
    else
    {
      int v43 = 0;
      uint64_t v44 = (double *)(8 * v40);
      *(double *)(8 * v40) = v37;
      uint64_t v45 = 8 * v40 + 8;
      if (v11 != v9) {
        goto LABEL_41;
      }
    }
    uint64_t v7 = v91;
    size_t v13 = v89;
    uint64_t v10 = (double *)&v43[8 * v42];
    uint64_t v104 = v44;
    uint64_t v105 = v45;
    uint64_t v106 = v10;
    if (v9) {
      goto LABEL_45;
    }
LABEL_46:
    unint64_t v9 = v44;
    int64_t v11 = (double *)v45;
    uint64_t v105 = v45;
    uint64_t v39 = v107;
    if (v107) {
      goto LABEL_29;
    }
LABEL_30:
    if (v16) {
      operator delete(v16);
    }
    ++v12;
    v94 += v13;
    v8 += v13;
  }
  while (v12 != v90);
  uint64_t v55 = v104;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)(a1 + 8) + 96);
  if (v55 == v11)
  {
    unsigned __int8 v58 = v55;
    long long v62 = v100;
    signed int v63 = HIDWORD(v103);
    long long v107 = 0;
    int v108 = 0;
    uint64_t v109 = 0;
    if (HIDWORD(v103)) {
      goto LABEL_65;
    }
    goto LABEL_81;
  }
  uint64_t v56 = v55 + 1;
  if (v55 + 1 == v11)
  {
    unsigned __int8 v58 = v55;
    long long v62 = v100;
    signed int v63 = HIDWORD(v103);
    long long v107 = 0;
    int v108 = 0;
    uint64_t v109 = 0;
    if (HIDWORD(v103)) {
      goto LABEL_65;
    }
    goto LABEL_81;
  }
  double v57 = *v55;
  unsigned __int8 v58 = v55;
  uint64_t v59 = v55 + 1;
  do
  {
    double v60 = *v59++;
    BOOL v61 = v57 < v60;
    double v57 = fmax(v57, v60);
    if (v61) {
      unsigned __int8 v58 = v56;
    }
    uint64_t v56 = v59;
  }
  while (v59 != v11);
  long long v62 = v100;
  signed int v63 = HIDWORD(v103);
  long long v107 = 0;
  int v108 = 0;
  uint64_t v109 = 0;
  if (!HIDWORD(v103))
  {
LABEL_81:
    uint64_t v74 = 0;
    LODWORD(v73) = 0;
    size_t v64 = 0;
    *(void *)long long v96 = 0;
    uint64_t v97 = 0;
    __p = 0;
    unsigned int v98 = 0;
    goto LABEL_82;
  }
LABEL_65:
  if (v63 < 0) {
    sub_19E13D694();
  }
  size_t v64 = operator new(8 * v63);
  uint64_t v65 = (v58 - v55) * v63;
  bzero(v64, 8 * v63);
  if (v63 < 0xA || (CFTypeRef v66 = &v62[8 * v65], (unint64_t)((char *)v64 - v66) < 0x20))
  {
    unint64_t v67 = 0;
    goto LABEL_69;
  }
  unint64_t v67 = v63 & 0xFFFFFFFFFFFFFFFCLL;
  int v83 = (long long *)(v66 + 16);
  v84 = v64 + 1;
  unint64_t v85 = v67;
  do
  {
    long long v86 = *v83;
    *(v84 - 1) = *(v83 - 1);
    _OWORD *v84 = v86;
    v83 += 2;
    v84 += 2;
    v85 -= 4;
  }
  while (v85);
  if (v67 != v63)
  {
LABEL_69:
    unint64_t v68 = v63 - v67;
    uint64_t v69 = 8 * v67;
    unint64_t v70 = (void *)v64 + v67;
    uint64_t v71 = &v62[8 * v65 + v69];
    do
    {
      uint64_t v72 = *(void *)v71;
      v71 += 8;
      *v70++ = v72;
      --v68;
    }
    while (v68);
  }
  __p = 0;
  *(void *)long long v96 = 0;
  uint64_t v97 = 0;
  unsigned int v98 = v63;
  sub_19E2482DC((uint64_t)&__p, v63);
  uint64_t v73 = v98;
  uint64_t v74 = (char *)__p;
  if ((int)v98 >= 1)
  {
    uint64_t v75 = 0;
    if (v98 < 4) {
      goto LABEL_77;
    }
    if ((unint64_t)((unsigned char *)__p - (unsigned char *)v64) < 0x20) {
      goto LABEL_77;
    }
    unint64_t v76 = 0;
    uint64_t v75 = v98 & 0xFFFFFFFC;
    uint64_t v77 = (8 * v98) & 0x7FFFFFFE0;
    do
    {
      long long v78 = v64[v76 / 0x10 + 1];
      int v79 = &v74[v76];
      *(_OWORD *)int v79 = v64[v76 / 0x10];
      *((_OWORD *)v79 + 1) = v78;
      v76 += 32;
    }
    while (v77 != v76);
    if (v75 != v73)
    {
LABEL_77:
      uint64_t v80 = v73 - v75;
      uint64_t v81 = v75 << 32;
      do
      {
        *(void *)&v74[v81 >> 29] = *(void *)((char *)v64 + (v81 >> 29));
        v81 += 0x100000000;
        --v80;
      }
      while (v80);
    }
  }
LABEL_82:
  uint64_t v82 = *(void *)v58;
  uint64_t v99 = *(void *)v58;
  if ((void **)(a1 + 16) != &__p)
  {
    sub_19E1E5B9C((void *)(a1 + 16), v74, *(char **)v96, (uint64_t)(*(void *)v96 - (void)v74) >> 3);
    LODWORD(v73) = v98;
    uint64_t v82 = v99;
    uint64_t v74 = (char *)__p;
  }
  *(_DWORD *)(a1 + 40) = v73;
  *(void *)(a1 + 48) = v82;
  if (v74)
  {
    *(void *)long long v96 = v74;
    operator delete(v74);
  }
  if (v64) {
    operator delete(v64);
  }
  if (v62) {
    operator delete(v62);
  }
  if (v55)
  {
    uint64_t v105 = (uint64_t)v55;
    operator delete(v55);
  }
}

void sub_19E29B7C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  if (__p) {
    operator delete(__p);
  }
  if (v28) {
    operator delete(v28);
  }
  if (v29) {
    operator delete(v29);
  }
  if (a27) {
    operator delete(a27);
  }
  _Unwind_Resume(exception_object);
}

double sub_19E29B884(uint64_t a1, const double **a2)
{
  if (*(_DWORD *)(a1 + 96))
  {
    sub_19E29B968(a1, a2, (uint64_t)__A);
    double __C = 0.0;
    vDSP_dotprD(__A[0], 1, *(const double **)(a1 + 232), 1, &__C, (int)__N);
    double v3 = __C;
    double __C = 0.0;
    vDSP_meanvD(*(const double **)(a1 + 264), 1, &__C, *(int *)(a1 + 288));
    double v4 = __C;
    if (__A[0])
    {
      __A[1] = __A[0];
      operator delete(__A[0]);
    }
    return v4 + v3;
  }
  else
  {
    __A[0] = 0;
    vDSP_meanvD(*(const double **)(a1 + 264), 1, (double *)__A, *(int *)(a1 + 288));
    return *(double *)__A;
  }
}

void sub_19E29B94C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E29B968(uint64_t a1@<X0>, const double **a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *(_DWORD *)(a1 + 96);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 24) = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  if (v3)
  {
    if (v3 < 0) {
      sub_19E13D694();
    }
    uint64_t v5 = v3;
    double v6 = (char *)operator new(8 * v3);
    bzero(v6, 8 * v3);
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    *(void *)a3 = v6;
    *(void *)(a3 + 8) = &v6[8 * v3];
    *(void *)(a3 + 16) = &v6[8 * v3];
    *(_DWORD *)(a3 + 24) = v3;
    uint64_t v25 = v6;
    while (1)
    {
      uint64_t v9 = *(void *)(a1 + 72);
      signed int v10 = *(_DWORD *)(a1 + 100);
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      if (!v10)
      {
        int64_t v11 = 0;
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        __p = 0;
        signed int v30 = 0;
        goto LABEL_14;
      }
      if (v10 < 0) {
        sub_19E13D694();
      }
      int64_t v11 = operator new(8 * v10);
      bzero(v11, 8 * v10);
      if (v10 >= 8 && (unint64_t)v11 - v9 - 8 * v8 * v10 >= 0x20)
      {
        unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL;
        double v20 = (long long *)(v9 + v7 * v10 + 16);
        unint64_t v21 = v11 + 1;
        unint64_t v22 = v12;
        do
        {
          long long v23 = *v20;
          *(v21 - 1) = *(v20 - 1);
          *unint64_t v21 = v23;
          v20 += 2;
          v21 += 2;
          v22 -= 4;
        }
        while (v22);
        if (v12 == v10) {
          goto LABEL_12;
        }
      }
      else
      {
        unint64_t v12 = 0;
      }
      unint64_t v13 = v10 - v12;
      uint64_t v14 = 8 * v12;
      uint64_t v15 = (void *)v11 + v12;
      uint64_t v16 = (uint64_t *)(v9 + v14 + v7 * v10);
      do
      {
        uint64_t v17 = *v16++;
        *v15++ = v17;
        --v13;
      }
      while (v13);
LABEL_12:
      __p = 0;
      uint64_t v28 = 0;
      signed int v30 = 0;
      uint64_t v29 = 0;
      __p = operator new(8 * v10);
      uint64_t v28 = (char *)__p + 8 * v10;
      uint64_t v29 = v28;
      signed int v30 = v10;
      memcpy(__p, v11, 8 * v10);
      double v6 = v25;
LABEL_14:
      double v18 = *(double *)(a1 + 24);
      double v19 = sub_19E29BC14(a1 + 8, (uint64_t)&__p, a2);
      *(long double *)&v6[8 * v8] = exp(v19 * -0.5) * v18;
      if (__p)
      {
        uint64_t v28 = (char *)__p;
        operator delete(__p);
      }
      if (v11) {
        operator delete(v11);
      }
      ++v8;
      v7 += 8;
      if (v8 == v5) {
        return;
      }
    }
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 24) = 0;
}

void sub_19E29BBA0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E13A9BC(a1);
}

void sub_19E29BBC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
  {
    operator delete(__p);
    if (!v14)
    {
LABEL_3:
      *(void *)(a10 + 8) = a11;
      operator delete(a11);
      _Unwind_Resume(a1);
    }
  }
  else if (!v14)
  {
    goto LABEL_3;
  }
  operator delete(v14);
  *(void *)(a10 + 8) = a11;
  operator delete(a11);
  _Unwind_Resume(a1);
}

double sub_19E29BC14(uint64_t a1, uint64_t a2, const double **a3)
{
  uint64_t v7 = *(const void **)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  int64_t v8 = v6 - *(void *)a2;
  if (v6 == *(void *)a2)
  {
    signed int v10 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    if (v8 < 0) {
      sub_19E13D694();
    }
    uint64_t v9 = (char *)operator new(v6 - *(void *)a2);
    signed int v10 = &v9[8 * (v8 >> 3)];
    memcpy(v9, v7, v8);
  }
  vDSP_vsubD(*a3, 1, (const double *)v9, 1, (double *)v9, 1, *(int *)(a2 + 24));
  if (v10 == v9)
  {
    int64_t v11 = 0;
  }
  else
  {
    if (v10 - v9 < 0) {
      sub_19E13D694();
    }
    int64_t v11 = operator new(v10 - v9);
    memcpy(v11, v9, v10 - v9);
  }
  cblas_dnrm2_NEWLAPACK();
  double v13 = v12;
  double v14 = *(double *)(a1 + 24);
  if (v11) {
    operator delete(v11);
  }
  if (v9) {
    operator delete(v9);
  }
  return v13 * v13 / (v14 * v14);
}

void sub_19E29BD6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (v15) {
    operator delete(v15);
  }
  if (v14) {
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E29BDC4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  double v13 = 0;
  double v14 = 0;
  uint64_t v15 = 0;
  sub_19E246830(&v13, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 4));
  __p = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  sub_19E246A1C(&__p, a3[3], a3[4], 0xCCCCCCCCCCCCCCCDLL * ((a3[4] - a3[3]) >> 3));
  sub_19E29BF60((void *)a1, a2, (uint64_t *)&v13);
  uint64_t v6 = (void **)__p;
  if (__p)
  {
    uint64_t v7 = v17;
    int64_t v8 = __p;
    if (v17 != __p)
    {
      do
      {
        if (*((char *)v7 - 17) < 0) {
          operator delete(*(v7 - 5));
        }
        v7 -= 5;
      }
      while (v7 != v6);
      int64_t v8 = __p;
    }
    uint64_t v17 = v6;
    operator delete(v8);
  }
  uint64_t v9 = (void **)v13;
  if (v13)
  {
    signed int v10 = v14;
    int64_t v11 = v13;
    if (v14 != v13)
    {
      do
      {
        if (*((char *)v10 - 25) < 0) {
          operator delete(*(v10 - 6));
        }
        v10 -= 6;
      }
      while (v10 != v9);
      int64_t v11 = v13;
    }
    double v14 = v9;
    operator delete(v11);
  }
  *(void *)a1 = &unk_1EF0A8198;
  *(_DWORD *)(a1 + 64) = 5;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_19E29BF30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_19E29BF44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    sub_19E32FAD8((uint64_t)&a9, a9);
  }
  _Unwind_Resume(exception_object);
}

void *sub_19E29BF60(void *a1, uint64_t a2, uint64_t *a3)
{
  *a1 = &unk_1EF0A8468;
  a1[1] = a2;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  sub_19E246830(a1 + 2, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 4));
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  sub_19E246A1C(a1 + 5, a3[3], a3[4], 0xCCCCCCCCCCCCCCCDLL * ((a3[4] - a3[3]) >> 3));
  return a1;
}

void sub_19E29C000(_Unwind_Exception *exception_object)
{
  if (*v2) {
    sub_19E32FD88(v1, *v2);
  }
  _Unwind_Resume(exception_object);
}

void *sub_19E29C020(void *a1)
{
  *a1 = &unk_1EF0A8468;
  uint64_t v2 = a1[5];
  if (v2)
  {
    uint64_t v3 = a1[6];
    double v4 = (void *)a1[5];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 17) < 0) {
          operator delete(*(void **)(v3 - 40));
        }
        v3 -= 40;
      }
      while (v3 != v2);
      double v4 = (void *)a1[5];
    }
    a1[6] = v2;
    operator delete(v4);
  }
  uint64_t v5 = a1[2];
  if (v5)
  {
    uint64_t v6 = a1[3];
    uint64_t v7 = (void *)a1[2];
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 25) < 0) {
          operator delete(*(void **)(v6 - 48));
        }
        v6 -= 48;
      }
      while (v6 != v5);
      uint64_t v7 = (void *)a1[2];
    }
    a1[3] = v5;
    operator delete(v7);
  }
  return a1;
}

void *sub_19E29C0F8(void *a1)
{
  *a1 = &unk_1EF0A8198;
  uint64_t v2 = (char **)a1[9];
  if (v2)
  {
    uint64_t v3 = (char **)a1[10];
    double v4 = v2;
    if (v3 != v2)
    {
      do
        uint64_t v3 = sub_19E2470C8(v3 - 13);
      while (v3 != v2);
      double v4 = (char **)a1[9];
    }
    a1[10] = v2;
    operator delete(v4);
  }

  return sub_19E29C020(a1);
}

void sub_19E29C180(void *a1)
{
  *a1 = &unk_1EF0A8198;
  uint64_t v2 = (char **)a1[9];
  if (v2)
  {
    uint64_t v3 = (char **)a1[10];
    double v4 = v2;
    if (v3 != v2)
    {
      do
        uint64_t v3 = sub_19E2470C8(v3 - 13);
      while (v3 != v2);
      double v4 = (char **)a1[9];
    }
    a1[10] = v2;
    operator delete(v4);
  }
  uint64_t v5 = sub_19E29C020(a1);

  operator delete(v5);
}

void sub_19E29C20C(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  sub_19E29C808(a1);
  uint64_t v6 = *(void *)(a1 + 72);
  if (v6 == *(void *)(a1 + 80))
  {
    uint64_t v39 = a3;
    sub_19E29CB00(a2, &v52);
    sub_19E29CB9C(a2, (uint64_t)v49);
    uint64_t v7 = v50;
    if (v50 != v51)
    {
      do
      {
        uint64_t v8 = *(void *)((char *)v7 + 28);
        sub_19E291E68(v48, &v52[12 * (int)v8]);
        if (SHIDWORD(v8) >= 1)
        {
          int v9 = 0;
          unsigned int v10 = HIDWORD(v8) & ~(v8 >> 63);
          do
          {
            sub_19E29CCDC(a1, (uint64_t *)v48, (uint64_t **)&__A);
            sub_19E2460A4((char **)v48, (uint64_t)&__A);
            sub_19E15A064((uint64_t)v47, v47[1]);
            sub_19E15A064((uint64_t)v46, v46[1]);
            int64_t v11 = (char *)__p;
            if (__p)
            {
              double v12 = v45;
              double v13 = __p;
              if (v45 != __p)
              {
                do
                {
                  double v14 = (void *)*((void *)v12 - 4);
                  if (v14)
                  {
                    *((void *)v12 - 3) = v14;
                    operator delete(v14);
                  }
                  if (*(v12 - 33) < 0) {
                    operator delete(*((void **)v12 - 7));
                  }
                  v12 -= 56;
                }
                while (v12 != v11);
                double v13 = __p;
              }
              uint64_t v45 = v11;
              operator delete(v13);
            }
            uint64_t v15 = __A;
            if (*(double *)&__A != 0.0)
            {
              uint64_t v16 = v43;
              uint64_t v17 = __A;
              if (v43 != __A)
              {
                do
                {
                  uint64_t v18 = (void *)*((void *)v16 - 4);
                  if (v18)
                  {
                    *((void *)v16 - 3) = v18;
                    operator delete(v18);
                  }
                  if (*((char *)v16 - 33) < 0) {
                    operator delete(*((void **)v16 - 7));
                  }
                  v16 -= 7;
                }
                while (v16 != v15);
                uint64_t v17 = __A;
              }
              int v43 = v15;
              operator delete(v17);
            }
            unint64_t v41 = 0;
            uint64_t v19 = *(void *)(a1 + 8);
            sub_19E29CE6C((long long **)v48, (uint64_t)v40);
            uint64_t v20 = *(void *)(v19 + 8);
            if (*(_DWORD *)(v20 + 96))
            {
              sub_19E29B968(*(void *)(v19 + 8), (const double **)v40, (uint64_t)&__A);
              __C[0] = 0.0;
              vDSP_dotprD(__A, 1, *(const double **)(v20 + 232), 1, __C, (int)__p);
              double v21 = __C[0];
              __C[0] = 0.0;
              vDSP_meanvD(*(const double **)(v20 + 264), 1, __C, *(int *)(v20 + 288));
              double v22 = __C[0];
              sub_19E29F504(v20, (const double **)v40, (uint64_t)&__A);
              double v24 = v23;
              double v25 = *(double *)(v20 + 16);
              if (*(double *)&__A != 0.0)
              {
                int v43 = __A;
                operator delete(__A);
              }
              double v26 = v22 + v21;
              double v27 = v25 + v24;
            }
            else
            {
              *(double *)&__A = 0.0;
              vDSP_meanvD(*(const double **)(v20 + 264), 1, (double *)&__A, *(int *)(v20 + 288));
              double v26 = *(double *)&__A;
              double v27 = sub_19E29F434(v20, (const double **)v40);
            }
            double v28 = sqrt(v27);
            if (v28 < 0.00000001 || (int v29 = *(_DWORD *)(*(void *)(v19 + 8) + 96), v29 <= 0))
            {
              double v30 = (*(double (**)(uint64_t))(*(void *)v19 + 8))(v19);
            }
            else
            {
              if (*(_DWORD *)(v19 + 56) != v29) {
                (*(void (**)(uint64_t))(*(void *)v19 + 16))(v19);
              }
              (**(void (***)(uint64_t, double, double))v19)(v19, v26, v28);
            }
            uint64_t v31 = *(uint64_t **)&v30;
            if (v40[0])
            {
              v40[1] = v40[0];
              operator delete(v40[0]);
            }
            unint64_t v41 = v31;
            sub_19E29D218((int *)(a1 + 64), (uint64_t *)v48, &v41);
            ++v9;
          }
          while (v10 != v9);
        }
        sub_19E2470C8((char **)v48);
        uint64_t v32 = (void *)v7[1];
        if (v32)
        {
          do
          {
            uint64_t v33 = (void **)v32;
            uint64_t v32 = (void *)*v32;
          }
          while (v32);
        }
        else
        {
          do
          {
            uint64_t v33 = (void **)v7[2];
            BOOL v34 = *v33 == v7;
            uint64_t v7 = v33;
          }
          while (!v34);
        }
        uint64_t v7 = v33;
      }
      while (v33 != v51);
    }
    uint64_t v35 = *(uint64_t **)(a1 + 72);
    sub_19E291E68((uint64_t **)v39, v35);
    *(void *)(v39 + 96) = v35[12];
    sub_19E29D74C(*(char ***)(a1 + 72), *(void *)(a1 + 80), (uint64_t)v48, 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 3));
    *(void *)(a1 + 80) = sub_19E2470C8((char **)(*(void *)(a1 + 80) - 104));
    sub_19E13C56C((uint64_t)&v50, v51[0]);
    uint64_t v36 = (char **)v52;
    if (v52)
    {
      double v37 = v53;
      double v38 = v52;
      if (v53 != (char **)v52)
      {
        do
          double v37 = sub_19E2470C8(v37 - 12);
        while (v37 != v36);
        double v38 = v52;
      }
      uint64_t v53 = v36;
      operator delete(v38);
    }
  }
  else
  {
    sub_19E291E68((uint64_t **)a3, *(uint64_t **)(a1 + 72));
    *(void *)(a3 + 96) = *(void *)(v6 + 96);
    sub_19E29D74C(*(char ***)(a1 + 72), *(void *)(a1 + 80), (uint64_t)v48, 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 3));
    *(void *)(a1 + 80) = sub_19E2470C8((char **)(*(void *)(a1 + 80) - 104));
  }
}

void sub_19E29C6C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  sub_19E2470C8(v28);
  sub_19E13C56C(a10, *(void **)(v29 - 184));
  sub_19E2462FC((void **)(v29 - 168));
  _Unwind_Resume(a1);
}

void sub_19E29C760(char *a1@<X8>)
{
  a1[23] = 17;
  strcpy(a1, "genetic_optimizer");
}

void sub_19E29C784(char *a1@<X8>)
{
  a1[23] = 21;
  strcpy(a1, "acquisition_optimizer");
}

uint64_t sub_19E29C7AC(uint64_t a1)
{
  uint64_t v2 = *(char ***)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(char ***)(a1 + 16);
    double v4 = v2;
    if (v3 != v2)
    {
      do
        uint64_t v3 = sub_19E2470C8(v3 - 13);
      while (v3 != v2);
      double v4 = *(char ***)(a1 + 8);
    }
    *(void *)(a1 + 16) = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_19E29C808(uint64_t a1)
{
  int v18 = 5;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v19 = 0;
  uint64_t v3 = *(void *)(a1 + 72);
  uint64_t v2 = (uint64_t *)(a1 + 72);
  if (v3 == *(void *)(a1 + 80))
  {
    double v12 = 0;
    *(_DWORD *)(a1 + 64) = 5;
    if ((int *)(a1 + 64) == &v18) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  do
  {
    sub_19E291E68(v17, (uint64_t *)v3);
    v17[12] = *(uint64_t **)(v3 + 96);
    sub_19E29D74C(*(char ***)(a1 + 72), *(void *)(a1 + 80), (uint64_t)__p, 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 3));
    *(void *)(a1 + 80) = sub_19E2470C8((char **)(*(void *)(a1 + 80) - 104));
    uint64_t v16 = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    sub_19E29CE6C((long long **)v17, (uint64_t)__p);
    v5.n128_f64[0] = sub_19E29F328(*(void *)(v4 + 8), (const double **)__p);
    double v7 = sqrt(v6);
    if (v7 < 0.00000001 || (int v8 = *(_DWORD *)(*(void *)(v4 + 8) + 96), v8 <= 0))
    {
      double v10 = (*(double (**)(uint64_t, __n128))(*(void *)v4 + 8))(v4, v5);
    }
    else
    {
      double v9 = v5.n128_f64[0];
      if (*(_DWORD *)(v4 + 56) != v8) {
        (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
      }
      (**(void (***)(uint64_t, double, double))v4)(v4, v9, v7);
    }
    *(double *)&int64_t v11 = v10;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    uint64_t v16 = v11;
    if (*(double *)&v11 > (*(double (**)(void))(**(void **)(a1 + 8) + 8))(*(void *)(a1 + 8))) {
      sub_19E29D218(&v18, (uint64_t *)v17, &v16);
    }
    sub_19E2470C8((char **)v17);
    uint64_t v3 = *(void *)(a1 + 72);
  }
  while (v3 != *(void *)(a1 + 80));
  double v12 = v19;
  *(_DWORD *)(a1 + 64) = v18;
  if ((int *)(a1 + 64) != &v18)
  {
LABEL_17:
    sub_19E29D4FC(v2, v12, v20, 0x4EC4EC4EC4EC4EC5 * (v20 - v12));
    double v12 = v19;
  }
LABEL_18:
  if (v12)
  {
    double v13 = (char **)v20;
    double v14 = v12;
    if (v20 != v12)
    {
      do
        double v13 = sub_19E2470C8(v13 - 13);
      while (v13 != (char **)v12);
      double v14 = v19;
    }
    uint64_t v20 = v12;
    operator delete(v14);
  }
}

void sub_19E29CA9C(_Unwind_Exception *a1)
{
  sub_19E29C7AC(v1 - 120);
  _Unwind_Resume(a1);
}

void sub_19E29CAB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_19E2470C8((char **)va);
  sub_19E29C7AC(v7 - 120);
  _Unwind_Resume(a1);
}

void sub_19E29CAD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *a15)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E2470C8(&a15);
  sub_19E29C7AC(v15 - 120);
  _Unwind_Resume(a1);
}

void sub_19E29CB00(uint64_t **a1@<X0>, void *a2@<X8>)
{
  sub_19E29DB84((uint64_t ***)&__p, a1);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_19E29DAB8((uint64_t)__p, (uint64_t)v7, (uint64_t)a2);
  uint64_t v3 = (char **)__p;
  if (__p)
  {
    uint64_t v4 = v7;
    __n128 v5 = __p;
    if (v7 != __p)
    {
      do
        uint64_t v4 = sub_19E2470C8(v4 - 13);
      while (v4 != v3);
      __n128 v5 = __p;
    }
    uint64_t v7 = v3;
    operator delete(v5);
  }
}

void sub_19E29CB80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E2462FC(v2);
  sub_19E298FB4((void **)va);
  _Unwind_Resume(a1);
}

void sub_19E29CB9C(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = a2 + 16;
  *(void *)(a2 + 24) = 0;
  sub_19E29DC58(a1, __p);
  sub_19E2459C8(v7, (uint64_t *)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v3 = 50;
  do
  {
    int v5 = sub_19E29E07C((uint64_t)v9, (uint64_t)v7, v9);
    uint64_t v4 = sub_19E29DD48((int *)a2, &v5);
    ++*(_DWORD *)v4;
    --v3;
  }
  while (v3);
  if (v9[0])
  {
    v9[1] = v9[0];
    operator delete(v9[0]);
  }
  std::random_device::~random_device(&v8);
}

void sub_19E29CC7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14)
{
  if (__p)
  {
    operator delete(__p);
    sub_19E13C56C(v14, *v15);
    _Unwind_Resume(a1);
  }
  sub_19E13C56C(v14, *v15);
  _Unwind_Resume(a1);
}

void sub_19E29CCDC(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t **a3@<X8>)
{
  sub_19E291E68(a3, a2);
  sub_19E29E298((long long **)a2, (uint64_t)v8);
  sub_19E29E1E8(a1, (uint64_t *)v8, v9);
  sub_19E29E624((uint64_t)a2, (uint64_t)v6);
  sub_19E29E574(a1, (uint64_t *)v6, __p);
  sub_19E29E900((uint64_t *)a3, (uint64_t *)v9);
  sub_19E29EAC0((uint64_t)a3, (uint64_t *)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v6[0])
  {
    v6[1] = v6[0];
    operator delete(v6[0]);
  }
  if (*(void *)&v9[0])
  {
    *((void *)&v9[0] + 1) = *(void *)&v9[0];
    operator delete(*(void **)&v9[0]);
  }
  if (v8[0])
  {
    v8[1] = v8[0];
    operator delete(v8[0]);
  }
}

void sub_19E29CDAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v21 = *(void **)(v19 - 64);
    if (!v21)
    {
LABEL_3:
      double v22 = a17;
      if (!a17) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v21 = *(void **)(v19 - 64);
    if (!v21) {
      goto LABEL_3;
    }
  }
  *(void *)(v19 - 56) = v21;
  operator delete(v21);
  double v22 = a17;
  if (!a17)
  {
LABEL_4:
    sub_19E2470C8(v18);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(v22);
  sub_19E2470C8(v18);
  _Unwind_Resume(a1);
}

void sub_19E29CE6C(long long **a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 24) = 0;
  *(void *)(a2 + 16) = 0;
  sub_19E29E298(a1, (uint64_t)&v29);
  signed int v4 = v32;
  BOOL v34 = 0;
  uint64_t v35 = 0;
  __p = 0;
  if (!v32)
  {
    uint64_t v7 = 0;
    int v5 = 0;
    signed int v36 = 0;
    if (&__p != (void **)a2) {
      goto LABEL_10;
    }
LABEL_13:
    *(_DWORD *)(a2 + 24) = v4;
    if (!v5) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  if (v32 < 0) {
    sub_19E13D694();
  }
  int v5 = (char *)operator new(8 * v32);
  __p = v5;
  uint64_t v35 = &v5[8 * v4];
  bzero(v5, 8 * v4);
  unint64_t v6 = 0;
  uint64_t v7 = &v5[8 * v4];
  BOOL v34 = v7;
  signed int v36 = v4;
  std::random_device v8 = v29;
  if (v4 < 4) {
    goto LABEL_40;
  }
  if ((unint64_t)(v5 - (unsigned char *)v29) < 0x20) {
    goto LABEL_40;
  }
  uint64_t v9 = 0;
  unint64_t v6 = v4 & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v10 = v6;
  do
  {
    long long v11 = *(_OWORD *)&v8[v9 + 2];
    double v12 = &v5[v9 * 8];
    *(_OWORD *)double v12 = *(_OWORD *)&v8[v9];
    *((_OWORD *)v12 + 1) = v11;
    v9 += 4;
    v10 -= 4;
  }
  while (v10);
  if (v6 != v4)
  {
LABEL_40:
    do
    {
      *(void *)&v5[8 * v6] = v8[v6];
      ++v6;
    }
    while (v4 != v6);
  }
  if (&__p == (void **)a2) {
    goto LABEL_13;
  }
LABEL_10:
  sub_19E1E5B9C((void *)a2, v5, v7, (v7 - v5) >> 3);
  int v5 = (char *)__p;
  *(_DWORD *)(a2 + 24) = v36;
  if (v5)
  {
LABEL_14:
    BOOL v34 = v5;
    operator delete(v5);
  }
LABEL_15:
  if (v29)
  {
    double v30 = (char *)v29;
    operator delete(v29);
  }
  sub_19E29E624((uint64_t)a1, (uint64_t)v27);
  uint64_t v13 = v28;
  double v30 = 0;
  uint64_t v31 = 0;
  uint64_t v29 = 0;
  if (!v28)
  {
    signed int v32 = 0;
    goto LABEL_27;
  }
  if ((v28 & 0x80000000) != 0) {
    sub_19E13D694();
  }
  uint64_t v14 = (float64x2_t *)operator new(8 * (int)v28);
  uint64_t v29 = v14;
  uint64_t v31 = (char *)&v14->f64[(int)v13];
  bzero(v14, 8 * (int)v13);
  double v30 = (char *)&v14->f64[(int)v13];
  signed int v32 = v13;
  uint64_t v15 = (char *)v27[0];
  if (v13 < 8)
  {
    uint64_t v16 = 0;
LABEL_25:
    uint64_t v25 = v13 - v16;
    uint64_t v26 = v16 << 32;
    do
    {
      *(double *)((char *)v14->f64 + (v26 >> 29)) = (double)*(int *)&v15[v26 >> 30];
      v26 += 0x100000000;
      --v25;
    }
    while (v25);
    goto LABEL_27;
  }
  uint64_t v16 = v13 & 0xFFFFFFF8;
  uint64_t v17 = v14 + 2;
  int v18 = (char *)v27[0] + 16;
  uint64_t v19 = v16;
  do
  {
    long long v20 = *((_OWORD *)v18 - 1);
    v21.i64[0] = (int)v20;
    v21.i64[1] = SDWORD1(v20);
    float64x2_t v22 = vcvtq_f64_s64(v21);
    v21.i64[0] = SDWORD2(v20);
    v21.i64[1] = SHIDWORD(v20);
    float64x2_t v23 = vcvtq_f64_s64(v21);
    v21.i64[0] = (int)*(_OWORD *)v18;
    v21.i64[1] = (int)HIDWORD(*(void *)v18);
    float64x2_t v24 = vcvtq_f64_s64(v21);
    v21.i64[0] = (int)*((void *)v18 + 1);
    v21.i64[1] = (int)HIDWORD(*(_OWORD *)v18);
    v17[-2] = v22;
    v17[-1] = v23;
    float64x2_t *v17 = v24;
    v17[1] = vcvtq_f64_s64(v21);
    v17 += 4;
    v18 += 32;
    v19 -= 8;
  }
  while (v19);
  if (v16 != v13) {
    goto LABEL_25;
  }
LABEL_27:
  sub_19E29FF68(a2, (uint64_t)&v29, (uint64_t)&__p);
  if (&__p != (void **)a2) {
    sub_19E1E5B9C((void *)a2, (char *)__p, v34, (v34 - (unsigned char *)__p) >> 3);
  }
  *(_DWORD *)(a2 + 24) = v36;
  if (__p)
  {
    BOOL v34 = (char *)__p;
    operator delete(__p);
  }
  if (v29)
  {
    double v30 = (char *)v29;
    operator delete(v29);
  }
  if (v27[0])
  {
    v27[1] = v27[0];
    operator delete(v27[0]);
  }
}

void sub_19E29D148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
  {
    operator delete(__p);
    long long v20 = a13;
    if (!a13)
    {
LABEL_3:
      int64x2_t v21 = a9;
      if (!a9)
      {
LABEL_8:
        float64x2_t v22 = *(void **)v18;
        if (*(void *)v18)
        {
          *(void *)(v18 + 8) = v22;
          operator delete(v22);
        }
        _Unwind_Resume(exception_object);
      }
LABEL_7:
      operator delete(v21);
      goto LABEL_8;
    }
  }
  else
  {
    long long v20 = a13;
    if (!a13) {
      goto LABEL_3;
    }
  }
  operator delete(v20);
  int64x2_t v21 = a9;
  if (!a9) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void sub_19E29D1E8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E13A9BC(a1);
}

void sub_19E29D218(int *a1, uint64_t *a2, uint64_t **a3)
{
  int v5 = (uint64_t ***)(a1 + 2);
  unint64_t v6 = (uint64_t **)*((void *)a1 + 2);
  if ((unint64_t)v6 >= *((void *)a1 + 3))
  {
    std::random_device v8 = sub_19E2A0148(v5, a2, a3);
  }
  else
  {
    uint64_t v7 = sub_19E291E68(v6, a2);
    v7[12] = *a3;
    std::random_device v8 = v7 + 13;
  }
  *((void *)a1 + 2) = v8;
  sub_19E29D960(*((char ***)a1 + 1), (uint64_t)v8, (uint64_t)&v26, 0x4EC4EC4EC4EC4EC5 * (((uint64_t)v8 - *((void *)a1 + 1)) >> 3));
  unint64_t v10 = (uint64_t *)*((void *)a1 + 1);
  uint64_t v9 = (uint64_t *)*((void *)a1 + 2);
  LODWORD(v11) = *a1;
  unint64_t v12 = *a1;
  if (0x4EC4EC4EC4EC4EC5 * (v9 - v10) > v12)
  {
    uint64_t v26 = 0;
    double v27 = 0;
    unint64_t v28 = 0;
    if (v10 == v9)
    {
      uint64_t v16 = 0;
      uint64_t v17 = 0;
    }
    else
    {
      do
      {
        if ((unint64_t)v27 >= v28)
        {
          uint64_t v14 = sub_19E299F04((uint64_t ***)&v26, v10);
        }
        else
        {
          uint64_t v13 = sub_19E291E68(v27, v10);
          v13[12] = (uint64_t *)v10[12];
          uint64_t v14 = v13 + 13;
        }
        double v27 = v14;
        sub_19E2A02CC(v26, (uint64_t)v14, (uint64_t)&v29, 0x4EC4EC4EC4EC4EC5 * (((char *)v14 - (char *)v26) >> 3));
        sub_19E29D74C(*((char ***)a1 + 1), *((void *)a1 + 2), (uint64_t)&v29, 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*((void *)a1 + 2) - *((void *)a1 + 1)) >> 3));
        uint64_t v15 = sub_19E2470C8((char **)(*((void *)a1 + 2) - 104));
        *((void *)a1 + 2) = v15;
        unint64_t v10 = (uint64_t *)*((void *)a1 + 1);
      }
      while (v10 != (uint64_t *)v15);
      uint64_t v16 = v26;
      uint64_t v17 = v27;
      LODWORD(v11) = *a1;
      unint64_t v12 = *a1;
    }
    unint64_t v18 = 0x4EC4EC4EC4EC4EC5 * (((char *)v17 - (char *)v16) >> 3);
    if (v18 > v12)
    {
      do
      {
        sub_19E2A0424(v16, (uint64_t)v17, (uint64_t)&v29, v18);
        uint64_t v17 = v27 - 13;
        sub_19E2470C8((char **)v27 - 13);
        double v27 = v17;
        uint64_t v16 = v26;
        unint64_t v18 = 0x4EC4EC4EC4EC4EC5 * (((char *)v17 - (char *)v26) >> 3);
        unint64_t v11 = *a1;
      }
      while (v18 > v11);
    }
    if ((int)v11 >= 1)
    {
      int v19 = v11 & ~((int)v11 >> 31);
      do
      {
        long long v20 = v26;
        int64x2_t v21 = (uint64_t **)*((void *)a1 + 2);
        if ((unint64_t)v21 >= *((void *)a1 + 3))
        {
          float64x2_t v23 = sub_19E299F04(v5, (uint64_t *)v26);
        }
        else
        {
          float64x2_t v22 = sub_19E291E68(v21, (uint64_t *)v26);
          unsigned char v22[12] = (uint64_t *)v20[12];
          float64x2_t v23 = v22 + 13;
        }
        *((void *)a1 + 2) = v23;
        sub_19E29D960(*((char ***)a1 + 1), (uint64_t)v23, (uint64_t)&v29, 0x4EC4EC4EC4EC4EC5 * (((uint64_t)v23 - *((void *)a1 + 1)) >> 3));
        sub_19E2A0424(v26, (uint64_t)v27, (uint64_t)&v29, 0x4EC4EC4EC4EC4EC5 * (((char *)v27 - (char *)v26) >> 3));
        double v27 = (uint64_t **)sub_19E2470C8((char **)v27 - 13);
        --v19;
      }
      while (v19);
      uint64_t v16 = v26;
    }
    if (v16)
    {
      float64x2_t v24 = (char **)v27;
      uint64_t v25 = (uint64_t **)v16;
      if (v27 != (uint64_t **)v16)
      {
        do
          float64x2_t v24 = sub_19E2470C8(v24 - 13);
        while (v24 != v16);
        uint64_t v25 = (uint64_t **)v26;
      }
      double v27 = (uint64_t **)v16;
      operator delete(v25);
    }
  }
}

void sub_19E29D4C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E298FB4((void **)va);
  _Unwind_Resume(a1);
}

void sub_19E29D4D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E298FB4((void **)va);
  _Unwind_Resume(a1);
}

void sub_19E29D4E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E298FB4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_19E29D4FC(uint64_t *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  unint64_t v6 = a2;
  uint64_t v8 = a1[2];
  uint64_t v9 = *a1;
  if (0x4EC4EC4EC4EC4EC5 * ((v8 - *a1) >> 3) < a4)
  {
    if (v9)
    {
      unint64_t v10 = (char **)a1[1];
      unint64_t v11 = (void *)v9;
      if (v10 != (char **)v9)
      {
        do
          unint64_t v10 = sub_19E2470C8(v10 - 13);
        while (v10 != (char **)v9);
        unint64_t v11 = (void *)*a1;
      }
      a1[1] = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x276276276276276) {
      goto LABEL_31;
    }
    unint64_t v12 = 0x4EC4EC4EC4EC4EC5 * (v8 >> 3);
    uint64_t v13 = 2 * v12;
    if (2 * v12 <= a4) {
      uint64_t v13 = a4;
    }
    unint64_t v14 = v12 >= 0x13B13B13B13B13BLL ? 0x276276276276276 : v13;
    if (v14 > 0x276276276276276) {
LABEL_31:
    }
      sub_19E13D694();
    uint64_t v15 = 13 * v14;
    uint64_t result = (uint64_t **)operator new(104 * v14);
    *a1 = (uint64_t)result;
    a1[1] = (uint64_t)result;
    for (a1[2] = (uint64_t)&result[v15]; v6 != a3; uint64_t result = v17 + 13)
    {
      uint64_t v17 = sub_19E291E68(result, v6);
      v17[12] = (uint64_t *)v6[12];
      v6 += 13;
    }
LABEL_16:
    a1[1] = (uint64_t)result;
    return result;
  }
  uint64_t result = (uint64_t **)a1[1];
  if (0x4EC4EC4EC4EC4EC5 * (((uint64_t)result - v9) >> 3) < a4)
  {
    unint64_t v18 = &a2[((uint64_t)result - v9) >> 3];
    if (result != (uint64_t **)v9)
    {
      do
      {
        sub_19E29AB9C(v9, (uint64_t)v6);
        *(void *)(v9 + 96) = v6[12];
        v6 += 13;
        v9 += 104;
      }
      while (v6 != v18);
      uint64_t v9 = a1[1];
    }
    uint64_t result = (uint64_t **)v9;
    if (v18 != a3)
    {
      uint64_t result = (uint64_t **)v9;
      do
      {
        int v19 = sub_19E291E68(result, v18);
        v19[12] = (uint64_t *)v18[12];
        v18 += 13;
        uint64_t result = v19 + 13;
      }
      while (v18 != a3);
    }
    goto LABEL_16;
  }
  if (a2 != a3)
  {
    do
    {
      sub_19E29AB9C(v9, (uint64_t)v6);
      *(void *)(v9 + 96) = v6[12];
      v9 += 104;
      v6 += 13;
    }
    while (v6 != a3);
    uint64_t result = (uint64_t **)a1[1];
  }
  while (result != (uint64_t **)v9)
    uint64_t result = (uint64_t **)sub_19E2470C8((char **)result - 13);
  a1[1] = v9;
  return result;
}

char **sub_19E29D74C(char **result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v7 = (uint64_t)result;
    sub_19E2965D0(v10, (uint64_t)result);
    unint64_t v11 = *(char **)(v7 + 96);
    uint64_t v8 = (char **)sub_19E29D858(v7, a3, a4);
    uint64_t v9 = v8;
    if ((char **)(a2 - 104) == v8)
    {
      sub_19E2460A4(v8, (uint64_t)v10);
      v9[12] = v11;
    }
    else
    {
      sub_19E2460A4(v8, a2 - 104);
      v9[12] = *(char **)(a2 - 8);
      sub_19E2460A4((char **)(a2 - 104), (uint64_t)v10);
      *(void *)(a2 - 8) = v11;
      sub_19E29D960((char **)v7, (uint64_t)(v9 + 13), a3, 0x4EC4EC4EC4EC4EC5 * (((uint64_t)v9 - v7 + 104) >> 3));
    }
    return sub_19E2470C8((char **)v10);
  }
  return result;
}

void sub_19E29D844(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E2470C8((char **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E29D858(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = a3 - 2;
  if (a3 < 2) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v7 = v6 >> 1;
  do
  {
    uint64_t v8 = (uint64_t *)(a1 + 104 * v5);
    uint64_t v9 = (uint64_t)(v8 + 13);
    uint64_t v10 = (2 * v5) | 1;
    uint64_t v11 = 2 * v5 + 2;
    if (v11 < a3)
    {
      sub_19E291E68(v17, v8 + 13);
      double v18 = *((double *)v8 + 25);
      sub_19E291E68(v15, v8 + 26);
      double v16 = *((double *)v8 + 38);
      double v12 = v16;
      double v13 = v18;
      sub_19E2470C8((char **)v15);
      sub_19E2470C8((char **)v17);
      if (v13 < v12)
      {
        uint64_t v9 = (uint64_t)(v8 + 26);
        uint64_t v10 = v11;
      }
    }
    sub_19E2460A4((char **)a1, v9);
    *(void *)(a1 + 96) = *(void *)(v9 + 96);
    a1 = v9;
    uint64_t v5 = v10;
  }
  while (v10 <= v7);
  return v9;
}

char **sub_19E29D960(char **result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v27 = v7;
    uint64_t v28 = v6;
    uint64_t v29 = v4;
    uint64_t v30 = v5;
    uint64_t v9 = result;
    unint64_t v10 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v11 = (uint64_t *)&result[13 * v10];
    sub_19E291E68(v25, v11);
    double v26 = *((double *)v11 + 12);
    double v12 = (uint64_t *)(a2 - 104);
    sub_19E291E68(v23, (uint64_t *)(a2 - 104));
    double v24 = *(double *)(a2 - 8);
    double v13 = v24;
    double v14 = v26;
    sub_19E2470C8((char **)v23);
    uint64_t result = sub_19E2470C8((char **)v25);
    if (v14 < v13)
    {
      sub_19E2965D0(v21, a2 - 104);
      float64x2_t v22 = *(uint64_t **)(a2 - 8);
      do
      {
        uint64_t v15 = v11;
        sub_19E2460A4((char **)v12, (uint64_t)v11);
        v12[12] = v11[12];
        if (!v10) {
          break;
        }
        unint64_t v10 = (v10 - 1) >> 1;
        uint64_t v11 = (uint64_t *)&v9[13 * v10];
        sub_19E291E68(v19, v11);
        double v20 = *(double *)&v9[13 * v10 + 12];
        sub_19E291E68(v18, (uint64_t *)v21);
        double v16 = *(double *)&v22;
        v18[12] = v22;
        double v17 = v20;
        sub_19E2470C8((char **)v18);
        sub_19E2470C8((char **)v19);
        double v12 = v15;
      }
      while (v17 < v16);
      sub_19E2460A4((char **)v15, (uint64_t)v21);
      v15[12] = (uint64_t)v22;
      return sub_19E2470C8((char **)v21);
    }
  }
  return result;
}

uint64_t sub_19E29DAB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      sub_19E291E68(v9, (uint64_t *)v5);
      v9[12] = *(uint64_t **)(v5 + 96);
      sub_19E291E68(v10, (uint64_t *)v9);
      uint64_t v7 = *(uint64_t ***)(a3 + 8);
      if ((unint64_t)v7 < *(void *)(a3 + 16)) {
        uint64_t v6 = sub_19E2965D0(v7, (uint64_t)v10) + 12;
      }
      else {
        uint64_t v6 = sub_19E29648C((uint64_t ***)a3, (uint64_t)v10);
      }
      *(void *)(a3 + 8) = v6;
      sub_19E2470C8((char **)v10);
      sub_19E2470C8((char **)v9);
      v5 += 104;
    }
    while (v5 != a2);
  }
  return a3;
}

void sub_19E29DB68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, char *);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  sub_19E2470C8((char **)va1);
  sub_19E2470C8((char **)va);
  _Unwind_Resume(a1);
}

uint64_t ***sub_19E29DB84(uint64_t ***a1, uint64_t **a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  int64_t v5 = (char *)v4 - (char *)*a2;
  if (v4 != *a2)
  {
    unint64_t v6 = 0x4EC4EC4EC4EC4EC5 * (v5 >> 3);
    if (v6 >= 0x276276276276277) {
      sub_19E13D694();
    }
    uint64_t v7 = (uint64_t **)operator new(v5);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[13 * v6];
    do
    {
      uint64_t v8 = sub_19E291E68(v7, v3);
      v8[12] = (uint64_t *)v3[12];
      v3 += 13;
      uint64_t v7 = v8 + 13;
    }
    while (v3 != v4);
    a1[1] = v7;
  }
  return a1;
}

void sub_19E29DC38(_Unwind_Exception *exception_object)
{
  if (*v1) {
    sub_19E32FDE8((uint64_t)(v1 + 1));
  }
  _Unwind_Resume(exception_object);
}

void sub_19E29DC58(uint64_t **a1@<X0>, void *a2@<X8>)
{
  sub_19E29DB84(&v7, a1);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = (uint64_t *)v7;
  uint64_t v4 = (uint64_t *)v8;
  uint64_t v12 = a2;
  if (v7 != v8)
  {
    do
    {
      sub_19E291E68(v9, v3);
      uint64_t v10 = v3[12];
      uint64_t v11 = v10;
      sub_19E29DF08((uint64_t *)&v12, &v11);
      sub_19E2470C8((char **)v9);
      v3 += 13;
    }
    while (v3 != v4);
    uint64_t v3 = (uint64_t *)v7;
  }
  if (v3)
  {
    int64_t v5 = (char **)v8;
    unint64_t v6 = (uint64_t **)v3;
    if (v8 != (uint64_t **)v3)
    {
      do
        int64_t v5 = sub_19E2470C8(v5 - 13);
      while (v5 != (char **)v3);
      unint64_t v6 = v7;
    }
    uint64_t v8 = (uint64_t **)v3;
    operator delete(v6);
  }
}

void sub_19E29DD1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, char *a12)
{
  sub_19E2470C8(&a12);
  uint64_t v14 = *(void **)v12;
  if (*(void *)v12)
  {
    *(void *)(v12 + 8) = v14;
    operator delete(v14);
  }
  sub_19E298FB4(&a9);
  _Unwind_Resume(a1);
}

char *sub_19E29DD48(int *a1, int *a2)
{
  int64_t v5 = (uint64_t **)(a1 + 4);
  uint64_t v4 = (char *)*((void *)a1 + 2);
  int v6 = *a2;
  if (!v4)
  {
    int v12 = *a1;
    uint64_t v16 = (uint64_t **)(a1 + 4);
    uint64_t v14 = (uint64_t **)(a1 + 4);
    goto LABEL_19;
  }
  uint64_t v7 = a1 + 4;
  uint64_t v8 = *((void *)a1 + 2);
  do
  {
    int v9 = *(_DWORD *)(v8 + 28);
    BOOL v10 = v9 < v6;
    if (v9 >= v6) {
      uint64_t v11 = (uint64_t *)v8;
    }
    else {
      uint64_t v11 = (uint64_t *)(v8 + 8);
    }
    if (!v10) {
      uint64_t v7 = (int *)v8;
    }
    uint64_t v8 = *v11;
  }
  while (*v11);
  if (v7 == (int *)v5 || v6 < v7[7])
  {
    int v12 = *a1;
    uint64_t v13 = (uint64_t *)*((void *)a1 + 2);
    do
    {
      while (1)
      {
        uint64_t v14 = (uint64_t **)v13;
        int v15 = *((_DWORD *)v13 + 7);
        if (v6 < v15) {
          break;
        }
        if (v15 >= v6) {
          goto LABEL_22;
        }
        uint64_t v13 = v14[1];
        if (!v13)
        {
          uint64_t v16 = v14 + 1;
          goto LABEL_19;
        }
      }
      uint64_t v13 = *v14;
    }
    while (*v14);
    uint64_t v16 = v14;
LABEL_19:
    double v17 = (uint64_t *)v14;
    uint64_t v14 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v14 + 7) = v6;
    *((_DWORD *)v14 + 8) = 0;
    void *v14 = 0;
    v14[1] = 0;
    v14[2] = v17;
    *uint64_t v16 = (uint64_t *)v14;
    uint64_t v18 = **((void **)a1 + 1);
    int v19 = (uint64_t *)v14;
    if (v18)
    {
      *((void *)a1 + 1) = v18;
      int v19 = *v16;
    }
    sub_19E13C8A0(*((uint64_t **)a1 + 2), v19);
    uint64_t v4 = (char *)*((void *)a1 + 2);
    ++*((void *)a1 + 3);
LABEL_22:
    *((_DWORD *)v14 + 8) = v12;
    int v6 = *a2;
    double v20 = (char *)v5;
    if (v4) {
      goto LABEL_25;
    }
LABEL_29:
    float64x2_t v22 = v20;
    double v20 = (char *)operator new(0x28uLL);
    *((_DWORD *)v20 + 7) = v6;
    *((_DWORD *)v20 + 8) = 0;
    *(void *)double v20 = 0;
    *((void *)v20 + 1) = 0;
    *((void *)v20 + 2) = v22;
    char *v5 = (uint64_t *)v20;
    uint64_t v23 = **((void **)a1 + 1);
    double v24 = (uint64_t *)v20;
    if (v23)
    {
      *((void *)a1 + 1) = v23;
      double v24 = *v5;
    }
    sub_19E13C8A0(*((uint64_t **)a1 + 2), v24);
    ++*((void *)a1 + 3);
    return v20 + 32;
  }
  while (1)
  {
LABEL_25:
    while (1)
    {
      double v20 = v4;
      int v21 = *((_DWORD *)v4 + 7);
      if (v6 >= v21) {
        break;
      }
      uint64_t v4 = *(char **)v20;
      int64_t v5 = (uint64_t **)v20;
      if (!*(void *)v20) {
        goto LABEL_29;
      }
    }
    if (v21 >= v6) {
      return v20 + 32;
    }
    uint64_t v4 = (char *)*((void *)v20 + 1);
    if (!v4)
    {
      int64_t v5 = (uint64_t **)(v20 + 8);
      goto LABEL_29;
    }
  }
}

uint64_t *sub_19E29DF08(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  int v6 = *(char **)(*a1 + 8);
  unint64_t v5 = *(void *)(*a1 + 16);
  uint64_t v7 = v6;
  if ((unint64_t)v6 >= v5)
  {
    int v9 = *(char **)v4;
    uint64_t v10 = (uint64_t)&v6[-*(void *)v4];
    uint64_t v11 = v10 >> 3;
    unint64_t v12 = (v10 >> 3) + 1;
    if (v12 >> 61) {
      sub_19E13D694();
    }
    uint64_t v13 = v5 - (void)v9;
    if (v13 >> 2 > v12) {
      unint64_t v12 = v13 >> 2;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 >> 61) {
        sub_19E13C418();
      }
      int v15 = operator new(8 * v14);
    }
    else
    {
      int v15 = 0;
    }
    uint64_t v16 = &v15[8 * v11];
    *uint64_t v16 = *a2;
    uint64_t v8 = v16 + 1;
    if (v6 != v9)
    {
      unint64_t v17 = v6 - v9 - 8;
      if (v17 < 0x58) {
        goto LABEL_27;
      }
      if ((unint64_t)(v6 - v15 - v10) < 0x20) {
        goto LABEL_27;
      }
      uint64_t v18 = (v17 >> 3) + 1;
      uint64_t v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v7 = &v6[-v19];
      uint64_t v16 = (void *)((char *)v16 - v19);
      double v20 = &v15[8 * v11 - 16];
      int v21 = v6 - 16;
      uint64_t v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v23 = *(_OWORD *)v21;
        *(v20 - 1) = *((_OWORD *)v21 - 1);
        *double v20 = v23;
        v20 -= 2;
        v21 -= 32;
        v22 -= 4;
      }
      while (v22);
      if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_27:
        do
        {
          uint64_t v24 = *((void *)v7 - 1);
          v7 -= 8;
          *--uint64_t v16 = v24;
        }
        while (v7 != v9);
      }
    }
    *(void *)uint64_t v4 = v16;
    *(void *)(v4 + 8) = v8;
    *(void *)(v4 + 16) = &v15[8 * v14];
    if (v9) {
      operator delete(v9);
    }
  }
  else
  {
    *(void *)int v6 = *a2;
    uint64_t v8 = v6 + 8;
  }
  *(void *)(v4 + 8) = v8;
  return a1;
}

unint64_t sub_19E29E07C(uint64_t a1, uint64_t a2, double **a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = a3[1];
  uint64_t v5 = *(void *)(a2 + 2496);
  unint64_t v6 = (v5 + 1) % 0x270uLL;
  uint64_t v7 = 4 * v5;
  unsigned int v8 = *(_DWORD *)(a2 + 4 * ((v5 + 397) % 0x270uLL)) ^ ((*(_DWORD *)(a2 + 4 * v6) & 0x7FFFFFFE | *(_DWORD *)(a2 + 4 * v5) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a2 + 4 * v6) << 31) >> 31) & 0x9908B0DF;
  *(_DWORD *)(a2 + v7) = v8;
  if (v6 == 623) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = v6 + 1;
  }
  uint64_t v10 = 397;
  if (v6 >= 0xE3) {
    uint64_t v10 = -227;
  }
  unsigned int v11 = *(_DWORD *)(a2 + 4 * (v10 + v6)) ^ ((*(_DWORD *)(a2 + 4 * v9) & 0x7FFFFFFE | *(_DWORD *)(a2 + 4 * v6) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a2 + 4 * v9) << 31) >> 31) & 0x9908B0DF;
  *(_DWORD *)(a2 + 4 * v6) = v11;
  *(void *)(a2 + 2496) = v9;
  uint64_t v12 = (char *)v4 - (char *)v3;
  if (v4 != v3)
  {
    unsigned int v13 = ((v8 ^ (v8 >> 11)) << 7) & 0x9D2C5680 ^ v8 ^ (v8 >> 11);
    double v14 = (double)((v13 << 15) & 0xEFC60000 ^ v13 ^ (((v13 << 15) & 0xEFC60000 ^ v13) >> 18));
    unsigned int v15 = ((v11 ^ (v11 >> 11)) << 7) & 0x9D2C5680 ^ v11 ^ (v11 >> 11);
    double v16 = (v14 + (double)((v15 << 15) & 0xEFC60000 ^ v15 ^ (((v15 << 15) & 0xEFC60000 ^ v15) >> 18)) * 4294967300.0)
        * 5.42101086e-20;
    unint64_t v17 = v12 >> 3;
    uint64_t v4 = v3;
    do
    {
      unint64_t v18 = v17 >> 1;
      uint64_t v19 = &v4[v17 >> 1];
      double v21 = *v19;
      double v20 = v19 + 1;
      v17 += ~(v17 >> 1);
      if (v16 < v21) {
        unint64_t v17 = v18;
      }
      else {
        uint64_t v4 = v20;
      }
    }
    while (v17);
  }
  return (unint64_t)((char *)v4 - (char *)v3) >> 3;
}

double sub_19E29E1E8@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v5 = (uint64_t *)(a1 + 16);
  if (sub_19E244298((uint64_t *)(a1 + 16)))
  {
    sub_19E244360(v5, (uint64_t *)v7);
    sub_19E310AEC(a2, (uint64_t)v7, (uint64_t)a3);
    if (__p)
    {
      unint64_t v9 = __p;
      operator delete(__p);
    }
    if (v7[0])
    {
      v7[1] = v7[0];
      operator delete(v7[0]);
    }
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

void sub_19E29E284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19E29E298(long long **a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = sub_19E29EDC8(*a1, a1[1], 0, (uint64_t)__p);
  int v5 = v4;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 24) = 0;
  *(void *)(a2 + 16) = 0;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v25 = 0;
  if (!v4)
  {
    uint64_t v7 = 0;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(_DWORD *)(a2 + 24) = 0;
    unsigned int v8 = *a1;
    unint64_t v9 = a1[1];
    if (*a1 == v9) {
      return;
    }
    goto LABEL_6;
  }
  if (v4 < 0) {
    sub_19E13D694();
  }
  size_t v6 = 8 * v4;
  uint64_t v7 = (char *)operator new(v6);
  bzero(v7, 8 * v5);
  *(void *)a2 = v7;
  *(void *)(a2 + 8) = &v7[v6];
  *(void *)(a2 + 16) = &v7[8 * v5];
  *(_DWORD *)(a2 + 24) = v5;
  unsigned int v8 = *a1;
  unint64_t v9 = a1[1];
  if (*a1 != v9)
  {
LABEL_6:
    unint64_t v10 = 0;
    do
    {
      if (*((char *)v8 + 23) < 0)
      {
        sub_19E13C2D0(__p, *(void **)v8, *((void *)v8 + 1));
      }
      else
      {
        long long v11 = *v8;
        uint64_t v25 = *((void *)v8 + 2);
        *(_OWORD *)__p = v11;
      }
      double v26 = 0;
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      unsigned int v13 = (unsigned char *)*((void *)v8 + 3);
      uint64_t v12 = (unsigned char *)*((void *)v8 + 4);
      int64_t v14 = v12 - v13;
      if (v12 == v13)
      {
        int v29 = *((_DWORD *)v8 + 12);
        uint64_t v16 = v29;
        unint64_t v17 = v10 + v29;
        if (v10 >= v17)
        {
          v10 += v29;
          if (SHIBYTE(v25) < 0) {
            goto LABEL_25;
          }
          goto LABEL_7;
        }
        unsigned int v15 = 0;
        if ((unint64_t)v29 < 4)
        {
LABEL_15:
          unint64_t v18 = 0;
          unint64_t v19 = v10;
          do
          {
LABEL_23:
            *(void *)&v7[8 * v19] = v15[v18];
            unint64_t v19 = ++v18 + v10;
          }
          while (v16 != v18);
          goto LABEL_24;
        }
      }
      else
      {
        if (v14 < 0) {
          sub_19E13D694();
        }
        unsigned int v15 = operator new(v12 - v13);
        double v26 = v15;
        uint64_t v27 = v15;
        uint64_t v28 = (char *)&v15[v14 >> 3];
        memcpy(v15, v13, v14);
        int v29 = *((_DWORD *)v8 + 12);
        uint64_t v16 = v29;
        unint64_t v17 = v10 + v29;
        if (v10 >= v17) {
          goto LABEL_24;
        }
        if ((unint64_t)v29 < 4) {
          goto LABEL_15;
        }
      }
      uint64_t v20 = 0;
      unint64_t v18 = v16 & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v19 = v10 + (v16 & 0xFFFFFFFFFFFFFFFCLL);
      unint64_t v21 = v16 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v22 = *(_OWORD *)&v15[v20 + 2];
        long long v23 = &v7[8 * v10 + v20 * 8];
        *(_OWORD *)long long v23 = *(_OWORD *)&v15[v20];
        *((_OWORD *)v23 + 1) = v22;
        v20 += 4;
        v21 -= 4;
      }
      while (v21);
      if (v16 != v18) {
        goto LABEL_23;
      }
LABEL_24:
      uint64_t v27 = v15;
      operator delete(v15);
      unint64_t v10 = v17;
      if (SHIBYTE(v25) < 0) {
LABEL_25:
      }
        operator delete(__p[0]);
LABEL_7:
      unsigned int v8 = (long long *)((char *)v8 + 56);
    }
    while (v8 != v9);
  }
}

void sub_19E29E4EC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E13A9BC(a1);
}

void sub_19E29E508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16)
{
  if (!v17) {
    _Unwind_Resume(exception_object);
  }
  *(void *)(v16 + 8) = v17;
  operator delete(v17);
  _Unwind_Resume(exception_object);
}

double sub_19E29E574@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v5 = a1 + 16;
  if (sub_19E244DC4(a1 + 16))
  {
    sub_19E244E8C(v5, (uint64_t *)v7);
    sub_19E311780(a2, (uint64_t *)v7, (uint64_t)a3);
    if (__p)
    {
      unint64_t v9 = __p;
      operator delete(__p);
    }
    if (v7[0])
    {
      v7[1] = v7[0];
      operator delete(v7[0]);
    }
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

void sub_19E29E610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19E29E624(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = sub_19E29F078(*(long long **)(a1 + 24), *(long long **)(a1 + 32), 0, (uint64_t)__p);
  int v5 = v4;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 24) = 0;
  *(void *)(a2 + 16) = 0;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v25 = 0;
  if (!v4)
  {
    uint64_t v7 = 0;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(_DWORD *)(a2 + 24) = 0;
    unsigned int v8 = *(long long **)(a1 + 24);
    unint64_t v9 = *(long long **)(a1 + 32);
    if (v8 == v9) {
      return;
    }
    goto LABEL_6;
  }
  if (v4 < 0) {
    sub_19E13D694();
  }
  size_t v6 = 4 * v4;
  uint64_t v7 = (char *)operator new(v6);
  bzero(v7, 4 * v5);
  *(void *)a2 = v7;
  *(void *)(a2 + 8) = &v7[v6];
  *(void *)(a2 + 16) = &v7[4 * v5];
  *(_DWORD *)(a2 + 24) = v5;
  unsigned int v8 = *(long long **)(a1 + 24);
  unint64_t v9 = *(long long **)(a1 + 32);
  if (v8 != v9)
  {
LABEL_6:
    unint64_t v10 = 0;
    do
    {
      if (*((char *)v8 + 23) < 0)
      {
        sub_19E13C2D0(__p, *(void **)v8, *((void *)v8 + 1));
      }
      else
      {
        long long v11 = *v8;
        uint64_t v25 = *((void *)v8 + 2);
        *(_OWORD *)__p = v11;
      }
      double v26 = 0;
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      unsigned int v13 = (unsigned char *)*((void *)v8 + 3);
      uint64_t v12 = (unsigned char *)*((void *)v8 + 4);
      int64_t v14 = v12 - v13;
      if (v12 == v13)
      {
        int v29 = *((_DWORD *)v8 + 12);
        uint64_t v16 = v29;
        unint64_t v17 = v10 + v29;
        if (v10 >= v17)
        {
          v10 += v29;
          if (SHIBYTE(v25) < 0) {
            goto LABEL_25;
          }
          goto LABEL_7;
        }
        unsigned int v15 = 0;
        if ((unint64_t)v29 < 8)
        {
LABEL_15:
          unint64_t v18 = 0;
          unint64_t v19 = v10;
          do
          {
LABEL_23:
            *(_DWORD *)&v7[4 * v19] = v15[v18];
            unint64_t v19 = ++v18 + v10;
          }
          while (v16 != v18);
          goto LABEL_24;
        }
      }
      else
      {
        if (v14 < 0) {
          sub_19E13D694();
        }
        unsigned int v15 = operator new(v12 - v13);
        double v26 = v15;
        uint64_t v27 = v15;
        uint64_t v28 = (char *)&v15[v14 >> 2];
        memcpy(v15, v13, v14);
        int v29 = *((_DWORD *)v8 + 12);
        uint64_t v16 = v29;
        unint64_t v17 = v10 + v29;
        if (v10 >= v17) {
          goto LABEL_24;
        }
        if ((unint64_t)v29 < 8) {
          goto LABEL_15;
        }
      }
      uint64_t v20 = 0;
      unint64_t v18 = v16 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v19 = v10 + (v16 & 0xFFFFFFFFFFFFFFF8);
      unint64_t v21 = v16 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        long long v22 = *(_OWORD *)&v15[v20 + 4];
        long long v23 = &v7[4 * v10 + v20 * 4];
        *(_OWORD *)long long v23 = *(_OWORD *)&v15[v20];
        *((_OWORD *)v23 + 1) = v22;
        v20 += 8;
        v21 -= 8;
      }
      while (v21);
      if (v16 != v18) {
        goto LABEL_23;
      }
LABEL_24:
      uint64_t v27 = v15;
      operator delete(v15);
      unint64_t v10 = v17;
      if (SHIBYTE(v25) < 0) {
LABEL_25:
      }
        operator delete(__p[0]);
LABEL_7:
      unsigned int v8 = (long long *)((char *)v8 + 56);
    }
    while (v8 != v9);
  }
}

void sub_19E29E878(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E13A9BC(a1);
}

void sub_19E29E894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16)
{
  if (!v17) {
    _Unwind_Resume(exception_object);
  }
  *(void *)(v16 + 8) = v17;
  operator delete(v17);
  _Unwind_Resume(exception_object);
}

void sub_19E29E900(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 != v3)
  {
    unint64_t v5 = 0;
    while (1)
    {
      signed int v6 = *(_DWORD *)(v2 + 48);
      if (v6)
      {
        if (v6 < 0) {
          sub_19E13D694();
        }
        uint64_t v7 = operator new(8 * v6);
        bzero(v7, 8 * v6);
        unsigned int v8 = (char *)v7 + 8 * v6;
        unint64_t v9 = v5 + v6;
        if (v5 >= v9) {
          goto LABEL_14;
        }
        uint64_t v10 = *a2;
        if (v6 >= 6 && (unint64_t)v7 - v10 + -8 * v5 >= 0x20)
        {
          unint64_t v11 = v6 & 0xFFFFFFFFFFFFFFFCLL;
          unint64_t v12 = v5 + v11;
          unsigned int v15 = v7 + 1;
          uint64_t v16 = (long long *)(v10 + 8 * v5 + 16);
          unint64_t v17 = v11;
          do
          {
            long long v18 = *v16;
            *(v15 - 1) = *(v16 - 1);
            *unsigned int v15 = v18;
            v15 += 2;
            v16 += 2;
            v17 -= 4;
          }
          while (v17);
          if (v11 == v6) {
            goto LABEL_14;
          }
        }
        else
        {
          unint64_t v11 = 0;
          unint64_t v12 = v5;
        }
        unsigned int v13 = (void *)v7 + v11;
        unint64_t v14 = v6 - v11;
        do
        {
          ++v11;
          *v13++ = *(void *)(v10 + 8 * v12);
          unint64_t v12 = v11 + v5;
          --v14;
        }
        while (v14);
      }
      else
      {
        unsigned int v8 = 0;
        uint64_t v7 = 0;
        unint64_t v9 = v5;
      }
LABEL_14:
      sub_19E1E5B9C((void *)(v2 + 24), (char *)v7, v8, (v8 - (char *)v7) >> 3);
      *(_DWORD *)(v2 + 48) = v6;
      if (v7)
      {
        operator delete(v7);
        v5 += *(int *)(v2 + 48);
        v2 += 56;
        if (v2 == v3) {
          return;
        }
      }
      else
      {
        unint64_t v5 = v9;
        v2 += 56;
        if (v2 == v3) {
          return;
        }
      }
    }
  }
}

void sub_19E29EA8C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E13A9BC(a1);
}

void sub_19E29EAA8(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E29EAC0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  if (v2 != v3)
  {
    unint64_t v5 = 0;
    while (1)
    {
      signed int v6 = *(_DWORD *)(v2 + 48);
      if (v6)
      {
        if (v6 < 0) {
          sub_19E13D694();
        }
        uint64_t v7 = operator new(4 * v6);
        bzero(v7, 4 * v6);
        unsigned int v8 = (char *)v7 + 4 * v6;
        unint64_t v9 = v5 + v6;
        if (v5 >= v9) {
          goto LABEL_14;
        }
        uint64_t v10 = *a2;
        if (v6 >= 8 && (unint64_t)v7 - v10 + -4 * v5 >= 0x20)
        {
          unint64_t v11 = v6 & 0xFFFFFFFFFFFFFFF8;
          unint64_t v12 = v5 + v11;
          unsigned int v15 = v7 + 1;
          uint64_t v16 = (long long *)(v10 + 4 * v5 + 16);
          unint64_t v17 = v11;
          do
          {
            long long v18 = *v16;
            *(v15 - 1) = *(v16 - 1);
            *unsigned int v15 = v18;
            v15 += 2;
            v16 += 2;
            v17 -= 8;
          }
          while (v17);
          if (v11 == v6) {
            goto LABEL_14;
          }
        }
        else
        {
          unint64_t v11 = 0;
          unint64_t v12 = v5;
        }
        unsigned int v13 = (_DWORD *)v7 + v11;
        unint64_t v14 = v6 - v11;
        do
        {
          ++v11;
          *v13++ = *(_DWORD *)(v10 + 4 * v12);
          unint64_t v12 = v11 + v5;
          --v14;
        }
        while (v14);
      }
      else
      {
        unsigned int v8 = 0;
        uint64_t v7 = 0;
        unint64_t v9 = v5;
      }
LABEL_14:
      sub_19E29EC80((void *)(v2 + 24), (char *)v7, v8, (v8 - (char *)v7) >> 2);
      *(_DWORD *)(v2 + 48) = v6;
      if (v7)
      {
        operator delete(v7);
        v5 += *(int *)(v2 + 48);
        v2 += 56;
        if (v2 == v3) {
          return;
        }
      }
      else
      {
        unint64_t v5 = v9;
        v2 += 56;
        if (v2 == v3) {
          return;
        }
      }
    }
  }
}

void sub_19E29EC4C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E13A9BC(a1);
}

void sub_19E29EC68(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_19E29EC80(void *result, char *__src, char *a3, size_t __sz)
{
  signed int v6 = __src;
  uint64_t v7 = result;
  uint64_t v8 = result[2];
  unint64_t v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 2)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 62) {
      goto LABEL_22;
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v11) {
      unint64_t v12 = v10;
    }
    if (v12 >> 62) {
LABEL_22:
    }
      sub_19E13D694();
    uint64_t v13 = 4 * v12;
    double result = operator new(4 * v12);
    unint64_t v9 = (char *)result;
    void *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    size_t v14 = a3 - v6;
    if (v14) {
      double result = memcpy(result, v6, v14);
    }
    unsigned int v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  unsigned int v15 = (void **)(result + 1);
  uint64_t v16 = (unsigned char *)result[1];
  unint64_t v17 = (v16 - v9) >> 2;
  if (v17 >= __sz)
  {
    size_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_21;
    }
    unint64_t v19 = (void *)*result;
LABEL_20:
    double result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  long long v18 = &__src[4 * v17];
  if (v16 != v9)
  {
    double result = memmove((void *)*result, __src, v16 - v9);
    unint64_t v9 = (char *)*v15;
  }
  size_t v14 = a3 - v18;
  if (v14)
  {
    unint64_t v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *unsigned int v15 = &v9[v14];
  return result;
}

uint64_t sub_19E29EDC8(long long *a1, long long *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = a4;
  if (a1 != a2)
  {
    for (unint64_t i = a1; i != a2; unint64_t i = (long long *)((char *)i + 56))
    {
      if (*((char *)i + 23) < 0)
      {
        sub_19E13C2D0(v14, *(void **)i, *((void *)i + 1));
        __p = 0;
        unint64_t v17 = 0;
        long long v18 = 0;
        unint64_t v9 = (unsigned char *)*((void *)i + 3);
        BOOL v11 = (unsigned char *)*((void *)i + 4);
        int64_t v10 = v11 - v9;
        if (v11 != v9)
        {
LABEL_8:
          if (v10 < 0) {
            sub_19E13D694();
          }
          __p = operator new(v10);
          unint64_t v17 = __p;
          unint64_t v12 = (char *)__p + 8 * (v10 >> 3);
          long long v18 = v12;
          memcpy(__p, v9, v10);
          unint64_t v17 = v12;
        }
      }
      else
      {
        long long v7 = *i;
        uint64_t v15 = *((void *)i + 2);
        *(_OWORD *)size_t v14 = v7;
        __p = 0;
        unint64_t v17 = 0;
        long long v18 = 0;
        unint64_t v9 = (unsigned char *)*((void *)i + 3);
        uint64_t v8 = (unsigned char *)*((void *)i + 4);
        int64_t v10 = v8 - v9;
        if (v8 != v9) {
          goto LABEL_8;
        }
      }
      int v19 = *((_DWORD *)i + 12);
      a3 = sub_19E29EF60((uint64_t)&v20, a3, (uint64_t)v14);
      if (__p)
      {
        unint64_t v17 = __p;
        operator delete(__p);
      }
      if (SHIBYTE(v15) < 0) {
        operator delete(v14[0]);
      }
    }
  }
  return a3;
}

void sub_19E29EF00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if ((a14 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19E29EF4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_19E29EF60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(char *)(a3 + 23) < 0)
  {
    sub_19E13C2D0(__p, *(void **)a3, *(void *)(a3 + 8));
    size_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v10 = *(void *)(a3 + 24);
    uint64_t v11 = *(void *)(a3 + 32);
    int64_t v7 = v11 - v10;
    if (v11 != v10)
    {
LABEL_3:
      if (v7 < 0) {
        sub_19E13D694();
      }
      size_t v14 = (char *)operator new(v7);
      uint64_t v15 = v14;
      uint64_t v16 = &v14[8 * (v7 >> 3)];
      int v8 = *(_DWORD *)(a3 + 48);
      int v17 = v8;
      operator delete(v14);
      if ((SHIBYTE(v13) & 0x80000000) == 0) {
        return a2 + v8;
      }
      goto LABEL_8;
    }
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a3;
    uint64_t v13 = *(void *)(a3 + 16);
    size_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v5 = *(void *)(a3 + 24);
    uint64_t v6 = *(void *)(a3 + 32);
    int64_t v7 = v6 - v5;
    if (v6 != v5) {
      goto LABEL_3;
    }
  }
  int v8 = *(_DWORD *)(a3 + 48);
  int v17 = v8;
  if ((SHIBYTE(v13) & 0x80000000) == 0) {
    return a2 + v8;
  }
LABEL_8:
  operator delete(__p[0]);
  return a2 + v8;
}

void sub_19E29F054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_19E32F7B0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_19E29F078(long long *a1, long long *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = a4;
  if (a1 != a2)
  {
    for (unint64_t i = a1; i != a2; unint64_t i = (long long *)((char *)i + 56))
    {
      if (*((char *)i + 23) < 0)
      {
        sub_19E13C2D0(v14, *(void **)i, *((void *)i + 1));
        __p = 0;
        int v17 = 0;
        long long v18 = 0;
        unint64_t v9 = (unsigned char *)*((void *)i + 3);
        uint64_t v11 = (unsigned char *)*((void *)i + 4);
        int64_t v10 = v11 - v9;
        if (v11 != v9)
        {
LABEL_8:
          if (v10 < 0) {
            sub_19E13D694();
          }
          __p = operator new(v10);
          int v17 = __p;
          unint64_t v12 = (char *)__p + 4 * (v10 >> 2);
          long long v18 = v12;
          memcpy(__p, v9, v10);
          int v17 = v12;
        }
      }
      else
      {
        long long v7 = *i;
        uint64_t v15 = *((void *)i + 2);
        *(_OWORD *)size_t v14 = v7;
        __p = 0;
        int v17 = 0;
        long long v18 = 0;
        unint64_t v9 = (unsigned char *)*((void *)i + 3);
        int v8 = (unsigned char *)*((void *)i + 4);
        int64_t v10 = v8 - v9;
        if (v8 != v9) {
          goto LABEL_8;
        }
      }
      int v19 = *((_DWORD *)i + 12);
      a3 = sub_19E29F210((uint64_t)&v20, a3, (uint64_t)v14);
      if (__p)
      {
        int v17 = __p;
        operator delete(__p);
      }
      if (SHIBYTE(v15) < 0) {
        operator delete(v14[0]);
      }
    }
  }
  return a3;
}

void sub_19E29F1B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if ((a14 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19E29F1FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_19E29F210(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(char *)(a3 + 23) < 0)
  {
    sub_19E13C2D0(__p, *(void **)a3, *(void *)(a3 + 8));
    size_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v10 = *(void *)(a3 + 24);
    uint64_t v11 = *(void *)(a3 + 32);
    int64_t v7 = v11 - v10;
    if (v11 != v10)
    {
LABEL_3:
      if (v7 < 0) {
        sub_19E13D694();
      }
      size_t v14 = (char *)operator new(v7);
      uint64_t v15 = v14;
      uint64_t v16 = &v14[4 * (v7 >> 2)];
      int v8 = *(_DWORD *)(a3 + 48);
      int v17 = v8;
      operator delete(v14);
      if ((SHIBYTE(v13) & 0x80000000) == 0) {
        return a2 + v8;
      }
      goto LABEL_8;
    }
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a3;
    uint64_t v13 = *(void *)(a3 + 16);
    size_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v5 = *(void *)(a3 + 24);
    uint64_t v6 = *(void *)(a3 + 32);
    int64_t v7 = v6 - v5;
    if (v6 != v5) {
      goto LABEL_3;
    }
  }
  int v8 = *(_DWORD *)(a3 + 48);
  int v17 = v8;
  if ((SHIBYTE(v13) & 0x80000000) == 0) {
    return a2 + v8;
  }
LABEL_8:
  operator delete(__p[0]);
  return a2 + v8;
}

void sub_19E29F304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_19E32F7B0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

double sub_19E29F328(uint64_t a1, const double **a2)
{
  if (*(_DWORD *)(a1 + 96))
  {
    sub_19E29B968(a1, a2, (uint64_t)__A);
    double __C = 0.0;
    vDSP_dotprD(__A[0], 1, *(const double **)(a1 + 232), 1, &__C, (int)__N);
    double v4 = __C;
    double __C = 0.0;
    vDSP_meanvD(*(const double **)(a1 + 264), 1, &__C, *(int *)(a1 + 288));
    double v5 = __C;
    sub_19E29F504(a1, a2, (uint64_t)__A);
    if (__A[0])
    {
      __A[1] = __A[0];
      operator delete(__A[0]);
    }
    return v5 + v4;
  }
  else
  {
    double v6 = sub_19E29B884(a1, a2);
    sub_19E29F434(a1, a2);
  }
  return v6;
}

void sub_19E29F414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_19E29F434(uint64_t a1, const double **a2)
{
  if (*(_DWORD *)(a1 + 96))
  {
    sub_19E29B968(a1, a2, (uint64_t)__p);
    sub_19E29F504(a1, a2, (uint64_t)__p);
    double v5 = v4;
    double v6 = *(double *)(a1 + 16);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    return v6 + v5;
  }
  else
  {
    double v8 = *(double *)(a1 + 24);
    double v9 = sub_19E29BC14(a1 + 8, (uint64_t)a2, a2);
    return *(double *)(a1 + 16) + exp(v9 * -0.5) * v8;
  }
}

void sub_19E29F4E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E29F504(uint64_t a1, const double **a2, uint64_t a3)
{
  sub_19E29F880(a1 + 168, (uint64_t)__p);
  uint64_t v6 = *(unsigned int *)(a1 + 192);
  if ((int)v6 >= 1)
  {
    uint64_t v7 = 0;
    int v8 = *(_DWORD *)(a1 + 196);
    int v9 = v24;
    int v10 = 1;
    int v11 = -1;
    unint64_t v12 = __p[0];
    do
    {
      if (v8 <= v10) {
        int v13 = v10;
      }
      else {
        int v13 = v8;
      }
      int v14 = v7 + 1;
      if ((int)v7 + 1 >= v8) {
        goto LABEL_3;
      }
      unsigned int v15 = 0;
      int v16 = v13 + v11;
      uint64_t v17 = (int)v7 * (uint64_t)v9;
      if ((v13 + v11) < 4)
      {
        int v18 = v7 + 1;
      }
      else
      {
        int v18 = v7 + 1;
        if (v13 - (int)v7 + v10 - 2 >= v10)
        {
          int v19 = 0;
          unsigned int v15 = v16 & 0xFFFFFFFC;
          int v18 = v14 + (v16 & 0xFFFFFFFC);
          do
          {
            uint64_t v20 = &v12[v17 + v10 + v19];
            *uint64_t v20 = 0uLL;
            v20[1] = 0uLL;
            v19 += 4;
          }
          while ((v16 & 0xFFFFFFFC) != v19);
          if (v16 == v15) {
            goto LABEL_3;
          }
        }
      }
      unsigned int v21 = v13 - v15;
      do
      {
        v12[v17 + v18] = 0;
        int v18 = ++v15 + v14;
        --v21;
      }
      while (v10 != v21);
LABEL_3:
      ++v7;
      ++v10;
      --v11;
    }
    while (v7 != v6);
  }
  sub_19E29F6FC((uint64_t)__p, a3, (uint64_t)__B);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  double v22 = sub_19E29BC14(a1 + 8, (uint64_t)a2, a2);
  __p[0] = 0;
  vDSP_dotprD(__B[0], 1, __B[0], 1, (double *)__p, (int)__N);
  if (__B[0])
  {
    __B[1] = __B[0];
    operator delete(__B[0]);
  }
  exp(v22 * -0.5);
}

void sub_19E29F6CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E29F6FC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(int *)(a1 + 24);
  int v14 = 1;
  int v15 = v6;
  int v12 = *(_DWORD *)(a2 + 24);
  int v13 = v6;
  int v11 = 0;
  memset(&v10[4], 0, 24);
  if (v6)
  {
    if ((v6 & 0x80000000) != 0) {
      sub_19E13D694();
    }
    size_t v7 = 4 * v6;
    int v8 = operator new(4 * v6);
    bzero(v8, v7);
  }
  else
  {
    int v8 = 0;
  }
  sub_19E29FAE8(a2, (uint64_t)v10);
  sub_19E29FC64(a1, __p);
  dgesv_NEWLAPACK();
  sub_19E29FDEC((uint64_t)v10, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v10[0])
  {
    v10[1] = v10[0];
    operator delete(v10[0]);
  }
  if (v8) {
    operator delete(v8);
  }
}

void sub_19E29F804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v20 = a13;
    if (!a13)
    {
LABEL_3:
      if (!v18) {
LABEL_8:
      }
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(v18);
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v20 = a13;
    if (!a13) {
      goto LABEL_3;
    }
  }
  operator delete(v20);
  if (!v18) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void sub_19E29F880(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v5 = *(_DWORD *)(a1 + 24);
  signed int v4 = *(_DWORD *)(a1 + 28);
  int v6 = v4 * v5;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  if (!(v4 * v5))
  {
    int v9 = 0;
    *(_DWORD *)(a2 + 24) = v5;
    *(_DWORD *)(a2 + 28) = v4;
    if (v5) {
      BOOL v11 = v4 == 0;
    }
    else {
      BOOL v11 = 1;
    }
    if (v11) {
      return;
    }
    goto LABEL_12;
  }
  uint64_t v7 = v6;
  if (v6 < 0) {
    sub_19E13D694();
  }
  size_t v8 = 8 * v6;
  int v9 = (char *)operator new(v8);
  *(void *)a2 = v9;
  *(void *)(a2 + 16) = &v9[8 * v7];
  bzero(v9, 8 * v7);
  *(void *)(a2 + 8) = &v9[v8];
  *(_DWORD *)(a2 + 24) = v5;
  *(_DWORD *)(a2 + 28) = v4;
  if (v5) {
    BOOL v10 = v4 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10)
  {
LABEL_12:
    uint64_t v12 = v5;
    int v13 = *(uint64_t **)a1;
    uint64_t v14 = 8 * v4;
    if (v4 > 3)
    {
      if ((v4 & 0xFFFFFFFFFFFFFFFCLL) == v4)
      {
        uint64_t v16 = 0;
        uint64_t v17 = v9 + 16;
        int v18 = (long long *)(v13 + 2);
        int v19 = *(uint64_t **)a1;
        uint64_t v20 = v9;
        do
        {
          unsigned int v21 = v18;
          double v22 = v17;
          unint64_t v23 = v4 & 0xFFFFFFFFFFFFFFFCLL;
          if ((unint64_t)(&v9[v14 * v16] - ((char *)v13 + v14 * v16)) >= 0x20)
          {
            do
            {
              long long v28 = *v21;
              *(v22 - 1) = *(v21 - 1);
              _OWORD *v22 = v28;
              v22 += 2;
              v21 += 2;
              v23 -= 4;
            }
            while (v23);
          }
          else
          {
            int v24 = v19;
            uint64_t v25 = v20;
            uint64_t v26 = v4;
            do
            {
              uint64_t v27 = *v24++;
              *v25++ = v27;
              --v26;
            }
            while (v26);
          }
          ++v16;
          uint64_t v17 = (_OWORD *)((char *)v17 + v14);
          int v18 = (long long *)((char *)v18 + v14);
          uint64_t v20 = (void *)((char *)v20 + v14);
          int v19 = (uint64_t *)((char *)v19 + v14);
        }
        while (v16 != v5);
      }
      else
      {
        uint64_t v29 = 0;
        uint64_t v30 = 0;
        uint64_t v31 = v9 + 16;
        signed int v32 = (long long *)(v13 + 2);
        do
        {
          unint64_t v33 = v4 & 0xFFFFFFFFFFFFFFFCLL;
          BOOL v34 = v32;
          uint64_t v35 = v31;
          if ((unint64_t)(&v9[v14 * v30] - ((char *)v13 + v14 * v30)) >= 0x20)
          {
            do
            {
              long long v37 = *v34;
              *(v35 - 1) = *(v34 - 1);
              _OWORD *v35 = v37;
              v35 += 2;
              v34 += 2;
              v33 -= 4;
            }
            while (v33);
            unint64_t v36 = v4 & 0xFFFFFFFFFFFFFFFCLL;
          }
          else
          {
            unint64_t v36 = 0;
          }
          unint64_t v38 = v4 - v36;
          uint64_t v39 = v36 + v29;
          uint64_t v40 = &v9[v39 * 8];
          unint64_t v41 = &v13[v39];
          do
          {
            uint64_t v42 = *v41++;
            *(void *)uint64_t v40 = v42;
            v40 += 8;
            --v38;
          }
          while (v38);
          ++v30;
          uint64_t v31 = (_OWORD *)((char *)v31 + v14);
          signed int v32 = (long long *)((char *)v32 + v14);
          v29 += v4;
        }
        while (v30 != v5);
      }
    }
    else
    {
      uint64_t v15 = 0;
      do
      {
        *(void *)&v9[v15] = *(uint64_t *)((char *)v13 + v15);
        if (v4 != 1)
        {
          *(void *)&v9[v15 + 8] = *(uint64_t *)((char *)v13 + v15 + 8);
          if (v4 != 2) {
            *(void *)&v9[v15 + 16] = *(uint64_t *)((char *)v13 + v15 + 16);
          }
        }
        v15 += v14;
        --v12;
      }
      while (v12);
    }
  }
}

void sub_19E29FACC(void *a1)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  sub_19E13A9BC(a1);
}

void sub_19E29FAE8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = *(_DWORD *)(a1 + 24);
  if (v4)
  {
    if (v4 < 0) {
      sub_19E13D694();
    }
    int v5 = (char *)operator new(8 * v4);
    bzero(v5, 8 * v4);
    int v6 = &v5[8 * v4];
  }
  else
  {
    int v6 = 0;
    int v5 = 0;
  }
  vDSP_mtransD(*(const double **)a1, 1, (double *)v5, 1, 1uLL, v4);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v7 = v6 - v5;
  if (v6 != v5)
  {
    if (v7 < 0) {
      sub_19E13D694();
    }
    size_t v8 = (char *)operator new(v6 - v5);
    *(void *)a2 = v8;
    int v9 = &v8[8 * (v7 >> 3)];
    *(void *)(a2 + 16) = v9;
    memcpy(v8, v5, v6 - v5);
    *(void *)(a2 + 8) = v9;
  }
  *(_DWORD *)(a2 + 24) = v4;
  if (v5)
  {
    operator delete(v5);
  }
}

void sub_19E29FC08(_Unwind_Exception *exception_object)
{
  if (!v1) {
    _Unwind_Resume(exception_object);
  }
  operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_19E29FC48(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E13A9BC(a1);
}

void sub_19E29FC64(uint64_t a1@<X0>, void *a2@<X8>)
{
  int v5 = *(_DWORD *)(a1 + 24);
  int v4 = *(_DWORD *)(a1 + 28);
  int v6 = v5 * v4;
  if (v5 * v4)
  {
    if (v6 < 0) {
      sub_19E13D694();
    }
    size_t v7 = 8 * v6;
    size_t v8 = (char *)operator new(v7);
    bzero(v8, v7);
    int v9 = &v8[v7];
  }
  else
  {
    int v9 = 0;
    size_t v8 = 0;
  }
  vDSP_mtransD(*(const double **)a1, 1, (double *)v8, 1, v4, v5);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  int64_t v10 = v9 - v8;
  if (v9 != v8)
  {
    if (v10 < 0) {
      sub_19E13D694();
    }
    BOOL v11 = (char *)operator new(v9 - v8);
    *a2 = v11;
    uint64_t v12 = &v11[8 * (v10 >> 3)];
    a2[2] = v12;
    memcpy(v11, v8, v10);
    a2[1] = v12;
  }
  a2[3] = __PAIR64__(v5, v4);
  if (v8)
  {
    operator delete(v8);
  }
}

void sub_19E29FD90(_Unwind_Exception *exception_object)
{
  if (!v1) {
    _Unwind_Resume(exception_object);
  }
  operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_19E29FDD0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E13A9BC(a1);
}

void sub_19E29FDEC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = *(_DWORD *)(a1 + 24);
  if (v4)
  {
    if (v4 < 0) {
      sub_19E13D694();
    }
    int v5 = (char *)operator new(8 * v4);
    bzero(v5, 8 * v4);
    int v6 = &v5[8 * v4];
  }
  else
  {
    int v6 = 0;
    int v5 = 0;
  }
  vDSP_mtransD(*(const double **)a1, 1, (double *)v5, 1, v4, 1uLL);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v7 = v6 - v5;
  if (v6 != v5)
  {
    if (v7 < 0) {
      sub_19E13D694();
    }
    size_t v8 = (char *)operator new(v6 - v5);
    *(void *)a2 = v8;
    int v9 = &v8[8 * (v7 >> 3)];
    *(void *)(a2 + 16) = v9;
    memcpy(v8, v5, v6 - v5);
    *(void *)(a2 + 8) = v9;
  }
  *(_DWORD *)(a2 + 24) = v4;
  if (v5)
  {
    operator delete(v5);
  }
}

void sub_19E29FF0C(_Unwind_Exception *exception_object)
{
  if (!v1) {
    _Unwind_Resume(exception_object);
  }
  operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_19E29FF4C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E13A9BC(a1);
}

__n128 sub_19E29FF68@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(int *)(a1 + 24);
  uint64_t v7 = *(int *)(a2 + 24);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 24) = 0;
  uint64_t v8 = v7 + v6;
  if (!(v7 + v6))
  {
    int v9 = 0;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(_DWORD *)(a3 + 24) = v8;
    if (!v6) {
      goto LABEL_13;
    }
    goto LABEL_6;
  }
  if ((v8 & 0x80000000) != 0) {
    sub_19E13D694();
  }
  int v9 = (__n128 *)operator new(8 * v8);
  bzero(v9, 8 * v8);
  *(void *)a3 = v9;
  *(void *)(a3 + 8) = (char *)v9 + 8 * v8;
  *(void *)(a3 + 16) = (char *)v9 + 8 * v8;
  *(_DWORD *)(a3 + 24) = v8;
  if (v6)
  {
LABEL_6:
    unint64_t v11 = 0;
    uint64_t v12 = *(__n128 **)a1;
    if (v6 < 4) {
      goto LABEL_11;
    }
    if ((unint64_t)((char *)v9 - (char *)v12) < 0x20) {
      goto LABEL_11;
    }
    unint64_t v11 = v6 & 0xFFFFFFFFFFFFFFFCLL;
    int v13 = v12 + 1;
    uint64_t v14 = v9 + 1;
    unint64_t v15 = v6 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      __n128 result = v13[-1];
      __n128 v16 = *v13;
      v14[-1] = result;
      __n128 *v14 = v16;
      v13 += 2;
      v14 += 2;
      v15 -= 4;
    }
    while (v15);
    if (v11 != v6)
    {
LABEL_11:
      uint64_t v17 = v6 - v11;
      uint64_t v18 = v11;
      int v19 = &v12->n128_u64[v18];
      uint64_t v20 = &v9->n128_u64[v18];
      do
      {
        unint64_t v21 = *v19++;
        result.n128_u64[0] = v21;
        *v20++ = v21;
        --v17;
      }
      while (v17);
    }
  }
LABEL_13:
  if (v6 >= v8) {
    return result;
  }
  double v22 = *(__n128 **)a2;
  uint64_t v23 = v8 - v6;
  if ((unint64_t)(v8 - v6) < 6
    || (int v24 = (__n128 *)((char *)v9 + 8 * v6), (unint64_t)((char *)v24 - (char *)v22) < 0x20))
  {
    unint64_t v25 = 0;
    uint64_t v26 = v6;
LABEL_17:
    uint64_t v27 = &v22->n128_u64[v25];
    uint64_t v28 = v23 - v25;
    do
    {
      ++v25;
      unint64_t v29 = *v27++;
      result.n128_u64[0] = v29;
      v9->n128_u64[v26] = v29;
      uint64_t v26 = v25 + v6;
      --v28;
    }
    while (v28);
    return result;
  }
  unint64_t v25 = v23 & 0xFFFFFFFFFFFFFFFCLL;
  uint64_t v26 = (v23 & 0xFFFFFFFFFFFFFFFCLL) + v6;
  uint64_t v30 = v22 + 1;
  uint64_t v31 = v24 + 1;
  unint64_t v32 = v23 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    __n128 result = v30[-1];
    __n128 v33 = *v30;
    v31[-1] = result;
    *uint64_t v31 = v33;
    v30 += 2;
    v31 += 2;
    v32 -= 4;
  }
  while (v32);
  if (v23 != v25) {
    goto LABEL_17;
  }
  return result;
}

void sub_19E2A012C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E13A9BC(a1);
}

uint64_t **sub_19E2A0148(uint64_t ***a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t v4 = (char *)a1[1] - (char *)*a1;
  unint64_t v5 = 0x4EC4EC4EC4EC4EC5 * (v4 >> 3) + 1;
  if (v5 > 0x276276276276276) {
    sub_19E13D694();
  }
  if (0x9D89D89D89D89D8ALL * (a1[2] - *a1) > v5) {
    unint64_t v5 = 0x9D89D89D89D89D8ALL * (a1[2] - *a1);
  }
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * (a1[2] - *a1)) >= 0x13B13B13B13B13BLL) {
    unint64_t v8 = 0x276276276276276;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8)
  {
    if (v8 > 0x276276276276276) {
      sub_19E13C418();
    }
    int v9 = (uint64_t **)operator new(104 * v8);
  }
  else
  {
    int v9 = 0;
  }
  int64_t v10 = &v9[13 * v8];
  unint64_t v11 = sub_19E291E68(&v9[v4 >> 3], a2);
  *(uint64_t **)((char *)v9 + v4 + 96) = *a3;
  uint64_t v12 = v11 + 13;
  uint64_t v14 = (char **)*a1;
  int v13 = (char **)a1[1];
  if (v13 == (char **)*a1)
  {
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v10;
    if (!v13) {
      return v12;
    }
    goto LABEL_17;
  }
  do
  {
    unint64_t v15 = v11;
    unint64_t v11 = sub_19E2965D0(v11 - 13, (uint64_t)(v13 - 13));
    *(v15 - 1) = (uint64_t *)*(v13 - 1);
    v13 -= 13;
  }
  while (v13 != v14);
  __n128 v16 = (char **)*a1;
  int v13 = (char **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v10;
  if (v13 != v16)
  {
    do
    {
      v13 -= 13;
      sub_19E2470C8(v13);
    }
    while (v13 != v16);
    int v13 = v16;
  }
  if (v13) {
LABEL_17:
  }
    operator delete(v13);
  return v12;
}

char **sub_19E2A02CC(char **result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v27 = v7;
    uint64_t v28 = v6;
    uint64_t v29 = v4;
    uint64_t v30 = v5;
    int v9 = result;
    unint64_t v10 = (unint64_t)(a4 - 2) >> 1;
    unint64_t v11 = (uint64_t *)&result[13 * v10];
    sub_19E291E68(v25, v11);
    double v26 = *((double *)v11 + 12);
    uint64_t v12 = (uint64_t *)(a2 - 104);
    sub_19E291E68(v23, (uint64_t *)(a2 - 104));
    double v24 = *(double *)(a2 - 8);
    double v13 = v24;
    double v14 = v26;
    sub_19E2470C8((char **)v23);
    __n128 result = sub_19E2470C8((char **)v25);
    if (v14 > v13)
    {
      sub_19E2965D0(v21, a2 - 104);
      double v22 = *(uint64_t **)(a2 - 8);
      do
      {
        unint64_t v15 = v11;
        sub_19E2460A4((char **)v12, (uint64_t)v11);
        v12[12] = v11[12];
        if (!v10) {
          break;
        }
        unint64_t v10 = (v10 - 1) >> 1;
        unint64_t v11 = (uint64_t *)&v9[13 * v10];
        sub_19E291E68(v19, v11);
        double v20 = *(double *)&v9[13 * v10 + 12];
        sub_19E291E68(v18, (uint64_t *)v21);
        double v16 = *(double *)&v22;
        v18[12] = v22;
        double v17 = v20;
        sub_19E2470C8((char **)v18);
        sub_19E2470C8((char **)v19);
        uint64_t v12 = v15;
      }
      while (v17 > v16);
      sub_19E2460A4((char **)v15, (uint64_t)v21);
      v15[12] = (uint64_t)v22;
      return sub_19E2470C8((char **)v21);
    }
  }
  return result;
}

char **sub_19E2A0424(char **result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v7 = (uint64_t)result;
    sub_19E2965D0(v10, (uint64_t)result);
    unint64_t v11 = *(char **)(v7 + 96);
    unint64_t v8 = (char **)sub_19E2A0530(v7, a3, a4);
    int v9 = v8;
    if ((char **)(a2 - 104) == v8)
    {
      sub_19E2460A4(v8, (uint64_t)v10);
      v9[12] = v11;
    }
    else
    {
      sub_19E2460A4(v8, a2 - 104);
      v9[12] = *(char **)(a2 - 8);
      sub_19E2460A4((char **)(a2 - 104), (uint64_t)v10);
      *(void *)(a2 - 8) = v11;
      sub_19E2A02CC((char **)v7, (uint64_t)(v9 + 13), a3, 0x4EC4EC4EC4EC4EC5 * (((uint64_t)v9 - v7 + 104) >> 3));
    }
    return sub_19E2470C8((char **)v10);
  }
  return result;
}

void sub_19E2A051C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E2470C8((char **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E2A0530(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = a3 - 2;
  if (a3 < 2) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v7 = v6 >> 1;
  do
  {
    unint64_t v8 = (uint64_t *)(a1 + 104 * v5);
    uint64_t v9 = (uint64_t)(v8 + 13);
    uint64_t v10 = (2 * v5) | 1;
    uint64_t v11 = 2 * v5 + 2;
    if (v11 < a3)
    {
      sub_19E291E68(v17, v8 + 13);
      double v18 = *((double *)v8 + 25);
      sub_19E291E68(v15, v8 + 26);
      double v16 = *((double *)v8 + 38);
      double v12 = v16;
      double v13 = v18;
      sub_19E2470C8((char **)v15);
      sub_19E2470C8((char **)v17);
      if (v13 > v12)
      {
        uint64_t v9 = (uint64_t)(v8 + 26);
        uint64_t v10 = v11;
      }
    }
    sub_19E2460A4((char **)a1, v9);
    *(void *)(a1 + 96) = *(void *)(v9 + 96);
    a1 = v9;
    uint64_t v5 = v10;
  }
  while (v10 <= v7);
  return v9;
}

uint64_t sub_19E2A0638(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  BOOL v34 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  sub_19E246830(&v34, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 4));
  __p = 0;
  unint64_t v38 = 0;
  uint64_t v39 = 0;
  sub_19E246A1C(&__p, a3[3], a3[4], 0xCCCCCCCCCCCCCCCDLL * ((a3[4] - a3[3]) >> 3));
  sub_19E29BF60((void *)a1, a2, (uint64_t *)&v34);
  unint64_t v8 = (void **)__p;
  if (__p)
  {
    uint64_t v9 = v38;
    uint64_t v10 = __p;
    if (v38 != __p)
    {
      do
      {
        if (*((char *)v9 - 17) < 0) {
          operator delete(*(v9 - 5));
        }
        v9 -= 5;
      }
      while (v9 != v8);
      uint64_t v10 = __p;
    }
    unint64_t v38 = v8;
    operator delete(v10);
  }
  uint64_t v11 = (void **)v34;
  if (v34)
  {
    double v12 = v35;
    double v13 = v34;
    if (v35 != v34)
    {
      do
      {
        if (*((char *)v12 - 25) < 0) {
          operator delete(*(v12 - 6));
        }
        v12 -= 6;
      }
      while (v12 != v11);
      double v13 = v34;
    }
    uint64_t v35 = v11;
    operator delete(v13);
  }
  *(void *)a1 = &unk_1EF0A7FB8;
  unsigned int v14 = sub_19E244298(a3);
  sub_19E2A099C(a1 + 64, v14);
  sub_19E299010(a1 + 184);
  sub_19E244360(a3, (uint64_t *)v32);
  sub_19E2A16E8(a1 + 64, (uint64_t *)v32);
  sub_19E2A1818(a1 + 64, (uint64_t *)v33);
  if (v33[0])
  {
    v33[1] = v33[0];
    operator delete(v33[0]);
  }
  if (v32[0])
  {
    v32[1] = v32[0];
    operator delete(v32[0]);
  }
  if ((a4 & 0xFF00000000) != 0)
  {
    uint64_t v15 = 0;
    *(_DWORD *)(a1 + 7776) = a4;
    uint64_t v16 = 1;
    unsigned int v17 = a4;
    do
    {
      int v18 = 1812433253 * (v17 ^ (v17 >> 30));
      unsigned int v17 = v18 + v16;
      *(_DWORD *)(a1 + 7780 + 4 * v15) = v15 + v18 + 1;
      ++v16;
      ++v15;
    }
    while (v15 != 623);
    *(void *)(a1 + 10272) = 0;
    *(_DWORD *)(a1 + 184) = a4;
    uint64_t v19 = 1;
    uint64_t v20 = 47;
    unsigned int v21 = a4;
    do
    {
      int v22 = 1812433253 * (v21 ^ (v21 >> 30));
      unsigned int v21 = v22 + v19;
      *(_DWORD *)(a1 + 4 * v20) = v20 + v22 - 46;
      ++v19;
      ++v20;
    }
    while (v20 != 670);
    uint64_t v23 = 0;
    *(void *)(a1 + 2680) = 0;
    *(_DWORD *)(a1 + 2712) = a4;
    uint64_t v24 = 1;
    unsigned int v25 = a4;
    do
    {
      int v26 = 1812433253 * (v25 ^ (v25 >> 30));
      unsigned int v25 = v26 + v24;
      *(_DWORD *)(a1 + 2716 + 4 * v23) = v23 + v26 + 1;
      ++v24;
      ++v23;
    }
    while (v23 != 623);
    uint64_t v27 = 0;
    *(void *)(a1 + 5208) = 0;
    *(_DWORD *)(a1 + 5232) = a4;
    uint64_t v28 = 1;
    unsigned int v29 = a4;
    do
    {
      int v30 = 1812433253 * (v29 ^ (v29 >> 30));
      unsigned int v29 = v30 + v28;
      *(_DWORD *)(a1 + 5236 + 4 * v27) = v27 + v30 + 1;
      ++v28;
      ++v27;
    }
    while (v27 != 623);
    *(void *)(a1 + 7728) = 0;
    sub_19E312C64();
  }
  return a1;
}

void sub_19E2A091C(_Unwind_Exception *a1)
{
  sub_19E2A0A3C(v2);
  sub_19E29C020(v1);
  _Unwind_Resume(a1);
}

void sub_19E2A0988(_Unwind_Exception *a1)
{
  sub_19E29C020(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19E2A099C(uint64_t a1, unsigned int a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_1EF0A7F70;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = -1;
  *(void *)(a1 + 96) = 0x7FF0000000000000;
  *(_DWORD *)(a1 + 104) = -5;
  *(unsigned char *)(a1 + 112) = 0;
  sub_19E2A1064(a1, a2);
  return a1;
}

void sub_19E2A0A18(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  sub_19E311F9C(*v3);
  sub_19E32FE44(v1);
  _Unwind_Resume(a1);
}

void *sub_19E2A0A3C(void *a1)
{
  *a1 = &unk_1EF0A7F70;
  sub_19E311F9C(a1[1]);
  uint64_t v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[5];
  if (v3)
  {
    a1[6] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_19E2A0ABC(uint64_t a1)
{
  uint64_t v1 = sub_19E2A1AC8(a1);

  operator delete(v1);
}

void sub_19E2A0AE4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v12 = 0u;
  memset(v11, 0, sizeof(v11));
  *(void *)&long long v12 = (char *)&v12 + 8;
  v15[0] = 0;
  v15[1] = 0;
  uint64_t v13 = 0;
  unsigned int v14 = v15;
  double v4 = (*(double (**)(void))(**(void **)(a1 + 8) + 8))(*(void *)(a1 + 8));
  sub_19E291E68((uint64_t **)a2, (uint64_t *)v11);
  *(double *)(a2 + 96) = v4;
  sub_19E2470C8((char **)v11);
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v16 = 0;
  sub_19E246830(&v16, *(void *)(a1 + 16), *(void *)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 4));
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  sub_19E246A1C(&v19, *(void *)(a1 + 40), *(void *)(a1 + 48), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 3));
  sub_19E2459CC((uint64_t *)&v16, a1 + 184, 5, (char **)&v22);
  uint64_t v5 = v19;
  if (v19)
  {
    uint64_t v6 = v20;
    uint64_t v7 = v19;
    if (v20 != v19)
    {
      do
      {
        if (*((char *)v6 - 17) < 0) {
          operator delete(*(v6 - 5));
        }
        v6 -= 5;
      }
      while (v6 != v5);
      uint64_t v7 = v19;
    }
    uint64_t v20 = v5;
    operator delete(v7);
  }
  uint64_t v8 = (uint64_t)v16;
  if (v16)
  {
    uint64_t v9 = v17;
    uint64_t v10 = v16;
    if ((void *)v17 != v16)
    {
      do
      {
        if (*(char *)(v9 - 25) < 0) {
          operator delete(*(void **)(v9 - 48));
        }
        v9 -= 48;
      }
      while (v9 != v8);
      uint64_t v10 = v16;
    }
    uint64_t v17 = v8;
    operator delete(v10);
  }
  sub_19E2A1BA0(a1, v22);
}

void sub_19E2A0F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v8 = va_arg(va1, char *);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  sub_19E2470C8((char **)va1);
  sub_19E2470C8((char **)va);
  sub_19E2462FC((void **)(v6 - 112));
  sub_19E2470C8(v5);
  _Unwind_Resume(a1);
}

void sub_19E2A0FE4(char *a1@<X8>)
{
  a1[23] = 16;
  strcpy(a1, "direct_optimizer");
}

uint64_t *sub_19E2A1004(uint64_t *a1)
{
  sub_19E311F9C(*a1);
  uint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = (uint64_t)v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = (uint64_t)v3;
    operator delete(v3);
  }
  double v4 = (void *)a1[1];
  if (v4)
  {
    a1[2] = (uint64_t)v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t *sub_19E2A1064(uint64_t a1, unsigned int a2)
{
  sub_19E2A1208((uint64_t)&v7, 0, a2);
  sub_19E2A114C(a1 + 8, (uint64_t)&v7);
  sub_19E311F9C(v7);
  if (__p)
  {
    uint64_t v13 = __p;
    operator delete(__p);
  }
  if (v10)
  {
    uint64_t v11 = v10;
    operator delete(v10);
  }
  if (v8)
  {
    uint64_t v9 = v8;
    operator delete(v8);
  }
  *(unsigned char *)(a1 + 112) = 1;
  int v3 = sub_19E312BA8(*(void *)(a1 + 8), 500);
  sub_19E2A13B0((uint64_t *)(a1 + 8), v3);
  int v4 = sub_19E312B08(*(void *)(a1 + 8), -1.0);
  sub_19E2A13B0((uint64_t *)(a1 + 8), v4);
  int v5 = sub_19E312B58(*(void *)(a1 + 8), -1.0);
  return sub_19E2A13B0((uint64_t *)(a1 + 8), v5);
}

void sub_19E2A1138(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E2A1004((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E2A114C(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_19E311F9C(*(void *)a1);
    uint64_t v4 = sub_19E312340(*(void *)a2);
    *(void *)a1 = v4;
    if (*(void *)a2) {
      BOOL v5 = v4 == 0;
    }
    else {
      BOOL v5 = 0;
    }
    if (v5)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      uint64_t v8 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v8, MEMORY[0x1E4FBA360], MEMORY[0x1E4FBA2C0]);
    }
    sub_19E1E5B9C((void *)(a1 + 8), *(char **)(a2 + 8), *(char **)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
    sub_19E1E5B9C((void *)(a1 + 32), *(char **)(a2 + 32), *(char **)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3);
    *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  }
  return a1;
}

uint64_t sub_19E2A1208(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4 = sub_19E312100(a2, a3);
  *(void *)a1 = v4;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = -1;
  *(void *)(a1 + 88) = 0x7FF0000000000000;
  *(_DWORD *)(a1 + 96) = -5;
  if (!v4)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v7 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v7, MEMORY[0x1E4FBA360], MEMORY[0x1E4FBA2C0]);
  }
  sub_19E312C4C(v4, (uint64_t)sub_19E2A12EC, (uint64_t)sub_19E2A1334);
  return a1;
}

void sub_19E2A12C0(_Unwind_Exception *a1)
{
  int v3 = *(void **)(v1 + 56);
  if (v3)
  {
    *(void *)(v1 + 64) = v3;
    operator delete(v3);
  }
  sub_19E32FEAC((void **)(v1 + 32), (void **)(v1 + 8), v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19E2A12EC(void *__p)
{
  if (__p)
  {
    if (__p[3])
    {
      uint64_t v2 = (void (*)(void))__p[5];
      if (v2) {
        v2();
      }
    }
    operator delete(__p);
  }
  return 0;
}

uint64_t sub_19E2A1334(uint64_t result)
{
  if (result)
  {
    if (!*(void *)(result + 24)
      || (uint64_t v1 = *(uint64_t (**)(void))(result + 48)) == 0
      || (__n128 result = v1(*(void *)(result + 24))) != 0)
    {
      operator new();
    }
  }
  return result;
}

uint64_t *sub_19E2A13B0(uint64_t *result, int a2)
{
  if (!(!v3 & v2))
  {
    uint64_t v4 = result;
    switch(a2)
    {
      case -5:
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        sub_19E2A1658(exception);
        __cxa_throw(exception, (struct type_info *)&unk_1EF0A4630, (void (*)(void *))std::runtime_error::~runtime_error);
      case -4:
        uint64_t v6 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        sub_19E2A1618(v6);
        __cxa_throw(v6, (struct type_info *)&unk_1EF0A4648, (void (*)(void *))std::runtime_error::~runtime_error);
      case -3:
        uint64_t v7 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        uint64_t v8 = std::bad_alloc::bad_alloc(v7);
        __cxa_throw(v8, MEMORY[0x1E4FBA360], MEMORY[0x1E4FBA2C0]);
      case -2:
        uint64_t v9 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        if (sub_19E2A1598(v4)) {
          uint64_t v10 = (const char *)sub_19E2A1598(v4);
        }
        else {
          uint64_t v10 = "nlopt invalid argument";
        }
        sub_19E298774(v9, v10);
        __cxa_throw(v9, (struct type_info *)off_1E599CD18, MEMORY[0x1E4FBA1E8]);
      case -1:
        uint64_t v11 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        if (sub_19E2A1598(v4)) {
          uint64_t v12 = (const char *)sub_19E2A1598(v4);
        }
        else {
          uint64_t v12 = "nlopt failure";
        }
        std::runtime_error::runtime_error(v11, v12);
        __cxa_throw(v11, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      default:
        JUMPOUT(0);
    }
  }
  return result;
}

void sub_19E2A1534(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19E2A1548(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19E2A155C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19E2A1570(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19E2A1598(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (!v1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "uninitialized nlopt::opt");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }

  return sub_19E312C58(v1);
}

void sub_19E2A1604(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *sub_19E2A1618(std::runtime_error *a1)
{
  __n128 result = std::runtime_error::runtime_error(a1, "nlopt roundoff-limited");
  result->__vftable = (std::runtime_error_vtbl *)&unk_1EF0A87E8;
  return result;
}

std::runtime_error *sub_19E2A1658(std::runtime_error *a1)
{
  __n128 result = std::runtime_error::runtime_error(a1, "nlopt forced stop");
  result->__vftable = (std::runtime_error_vtbl *)&unk_1EF0A87C0;
  return result;
}

void sub_19E2A1698(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);

  operator delete(v1);
}

void sub_19E2A16C0(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);

  operator delete(v1);
}

void sub_19E2A16E8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *((int *)a2 + 6);
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  __p = 0;
  if (v3)
  {
    if ((v3 & 0x80000000) != 0) {
      sub_19E13D694();
    }
    BOOL v5 = operator new(8 * v3);
    __p = v5;
    uint64_t v19 = (char *)v5 + 8 * v3;
    bzero(v5, 8 * v3);
    unint64_t v6 = 0;
    uint64_t v18 = v19;
    uint64_t v7 = *a2;
    if (v3 < 4) {
      goto LABEL_8;
    }
    if ((unint64_t)v5 - v7 < 0x20) {
      goto LABEL_8;
    }
    unint64_t v6 = v3 & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v8 = (long long *)(v7 + 16);
    uint64_t v9 = v5 + 1;
    unint64_t v10 = v3 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      long long v11 = *v8;
      *(v9 - 1) = *(v8 - 1);
      *uint64_t v9 = v11;
      v8 += 2;
      v9 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v6 != v3)
    {
LABEL_8:
      uint64_t v12 = v3 - v6;
      uint64_t v13 = 8 * v6;
      uint64_t v14 = (void *)v5 + v6;
      uint64_t v15 = (uint64_t *)(v7 + v13);
      do
      {
        uint64_t v16 = *v15++;
        *v14++ = v16;
        --v12;
      }
      while (v12);
    }
  }
  sub_19E2A1948((uint64_t *)(a1 + 8), (const void **)&__p);
  if (__p)
  {
    uint64_t v18 = __p;
    operator delete(__p);
  }
}

void sub_19E2A17F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2A1818(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *((int *)a2 + 6);
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  __p = 0;
  if (v3)
  {
    if ((v3 & 0x80000000) != 0) {
      sub_19E13D694();
    }
    BOOL v5 = operator new(8 * v3);
    __p = v5;
    uint64_t v19 = (char *)v5 + 8 * v3;
    bzero(v5, 8 * v3);
    unint64_t v6 = 0;
    uint64_t v18 = v19;
    uint64_t v7 = *a2;
    if (v3 < 4) {
      goto LABEL_8;
    }
    if ((unint64_t)v5 - v7 < 0x20) {
      goto LABEL_8;
    }
    unint64_t v6 = v3 & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v8 = (long long *)(v7 + 16);
    uint64_t v9 = v5 + 1;
    unint64_t v10 = v3 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      long long v11 = *v8;
      *(v9 - 1) = *(v8 - 1);
      *uint64_t v9 = v11;
      v8 += 2;
      v9 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v6 != v3)
    {
LABEL_8:
      uint64_t v12 = v3 - v6;
      uint64_t v13 = 8 * v6;
      uint64_t v14 = (void *)v5 + v6;
      uint64_t v15 = (uint64_t *)(v7 + v13);
      do
      {
        uint64_t v16 = *v15++;
        *v14++ = v16;
        --v12;
      }
      while (v12);
    }
  }
  sub_19E2A1A08((uint64_t *)(a1 + 8), (const void **)&__p);
  if (__p)
  {
    uint64_t v18 = __p;
    operator delete(__p);
  }
}

void sub_19E2A1928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_19E2A1948(uint64_t *a1, const void **a2)
{
  uint64_t v4 = *a1;
  if (v4)
  {
    int v5 = sub_19E312C44(v4);
    unint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    if (v5 != (v7 - (unsigned char *)*a2) >> 3)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_19E298774(exception, "dimension mismatch");
      __cxa_throw(exception, (struct type_info *)off_1E599CD18, MEMORY[0x1E4FBA1E8]);
    }
    uint64_t v4 = *a1;
  }
  else
  {
    unint64_t v6 = *a2;
    uint64_t v7 = a2[1];
  }
  if (v6 == v7) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = v6;
  }
  int v9 = sub_19E312928(v4, v8);

  return sub_19E2A13B0(a1, v9);
}

void sub_19E2A19F4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_19E2A1A08(uint64_t *a1, const void **a2)
{
  uint64_t v4 = *a1;
  if (v4)
  {
    int v5 = sub_19E312C44(v4);
    unint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    if (v5 != (v7 - (unsigned char *)*a2) >> 3)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_19E298774(exception, "dimension mismatch");
      __cxa_throw(exception, (struct type_info *)off_1E599CD18, MEMORY[0x1E4FBA1E8]);
    }
    uint64_t v4 = *a1;
  }
  else
  {
    unint64_t v6 = *a2;
    uint64_t v7 = a2[1];
  }
  if (v6 == v7) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = v6;
  }
  int v9 = sub_19E312A38(v4, v8);

  return sub_19E2A13B0(a1, v9);
}

void sub_19E2A1AB4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_19E2A1AC8(uint64_t a1)
{
  *(void *)a1 = &unk_1EF0A7FB8;
  std::random_device::~random_device((std::random_device *)(a1 + 10280));
  std::random_device::~random_device((std::random_device *)(a1 + 7736));
  std::random_device::~random_device((std::random_device *)(a1 + 5216));
  std::random_device::~random_device((std::random_device *)(a1 + 2688));
  *(void *)(a1 + 64) = &unk_1EF0A7F70;
  sub_19E311F9C(*(void *)(a1 + 72));
  char v2 = *(void **)(a1 + 128);
  if (v2)
  {
    *(void *)(a1 + 136) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 104);
  if (v3)
  {
    *(void *)(a1 + 112) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 80);
  if (v4)
  {
    *(void *)(a1 + 88) = v4;
    operator delete(v4);
  }

  return sub_19E29C020((void *)a1);
}

void sub_19E2A1BA0(uint64_t a1, long long **a2)
{
  v4[0] = a1;
  v4[1] = a2;
  uint64_t v2 = a1 + 64;
  sub_19E29E298(a2, (uint64_t)&__p);
  sub_19E2A1F70(v2, (uint64_t)v4, (uint64_t)&__p);
}

void sub_19E2A1E98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a13)
  {
    operator delete(a13);
    uint64_t v24 = __p;
    if (!__p)
    {
LABEL_4:
      sub_19E2470C8((char **)&a21);
      unsigned int v25 = *(void **)(v22 - 128);
      if (v25)
      {
        *(void *)(v22 - 120) = v25;
        operator delete(v25);
      }
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v24 = __p;
    if (!__p) {
      goto LABEL_4;
    }
  }
  operator delete(v24);
  goto LABEL_4;
}

void sub_19E2A1F70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a1 + 112)) {
    (**(void (***)(uint64_t, void))a1)(a1, *(unsigned int *)(a3 + 24));
  }
  operator new();
}

void sub_19E2A2404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  __cxa_free_exception(v15);
  if (a2 != 3)
  {
    if (a2 == 2)
    {
      uint64_t v19 = __cxa_begin_catch(a1);
      (*(void (**)(void *))(*(void *)v19 + 16))(v19);
      sub_19E29FAE8(v14, (uint64_t)&a13);
      if (a13)
      {
        a14 = (uint64_t)a13;
        operator delete(a13);
      }
      __cxa_end_catch();
LABEL_13:
      JUMPOUT(0x19E2A21ECLL);
    }
    if (a2 != 1)
    {
      if (__p) {
        operator delete(__p);
      }
      _Unwind_Resume(a1);
    }
  }
  uint64_t v18 = __cxa_begin_catch(a1);
  (*(void (**)(void *))(*(void *)v18 + 16))(v18);
  __cxa_end_catch();
  goto LABEL_13;
}

void sub_19E2A2554(uint64_t **a1, void *a2, uint64_t *a3)
{
  unint64_t v6 = *a1;
  int v5 = a1[1];
  unint64_t v7 = (char *)v5 - (char *)*a1;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  __p = 0;
  int v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  if (!(v7 >> 3))
  {
    uint64_t v8 = 0;
    __p = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    int v20 = v7 >> 3;
    if (v6 == v5) {
      goto LABEL_13;
    }
    goto LABEL_6;
  }
  if (((v7 >> 3) & 0x80000000) != 0) {
    sub_19E13D694();
  }
  uint64_t v8 = operator new((uint64_t)(v7 << 29) >> 29);
  bzero(v8, (uint64_t)(v7 << 29) >> 29);
  __p = v8;
  uint64_t v18 = (char *)v8 + ((uint64_t)(v7 << 29) >> 29);
  uint64_t v19 = (char *)v8 + 8 * (int)((uint64_t)v7 >> 3);
  int v20 = v7 >> 3;
  if (v6 != v5)
  {
LABEL_6:
    uint64_t v9 = 0;
    if (v7 - 8 < 0x18) {
      goto LABEL_11;
    }
    if ((unint64_t)((char *)v8 - (char *)v6) < 0x20) {
      goto LABEL_11;
    }
    unint64_t v10 = ((v7 - 8) >> 3) + 1;
    uint64_t v9 = v10 & 0x3FFFFFFFFFFFFFFCLL;
    long long v11 = v8 + 1;
    uint64_t v12 = (long long *)(v6 + 2);
    uint64_t v13 = v10 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v14 = *v12;
      *(v11 - 1) = *(v12 - 1);
      *long long v11 = v14;
      v11 += 2;
      v12 += 2;
      v13 -= 4;
    }
    while (v13);
    v6 += v10 & 0x3FFFFFFFFFFFFFFCLL;
    if (v10 != v9)
    {
LABEL_11:
      uint64_t v15 = (void *)v8 + v9;
      do
      {
        uint64_t v16 = *v6++;
        *v15++ = v16;
      }
      while (v6 != v5);
    }
  }
LABEL_13:
  if (*a2 == a2[1])
  {
    sub_19E2A2868(a3, (uint64_t)&__p);
    if (__p)
    {
      uint64_t v18 = (char *)__p;
      operator delete(__p);
    }
  }
  else
  {
    sub_19E2A2868(a3, (uint64_t)&__p);
    __break(1u);
  }
}

void sub_19E2A26EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2A270C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E13A9BC(a1);
}

double sub_19E2A2728(unsigned int a1, const void *a2, void *a3, uint64_t a4)
{
  unint64_t v7 = (void **)(*(void *)a4 + 8);
  if (a1) {
    memcpy(*v7, a2, 8 * a1);
  }
  if (a3) {
    uint64_t v8 = *(void *)a4 + 32;
  }
  else {
    uint64_t v8 = *(void *)a4 + 56;
  }
  double v9 = (*(double (**)(void **, uint64_t, void))(a4 + 32))(v7, v8, *(void *)(a4 + 24));
  if (a1 && a3) {
    memcpy(a3, *(const void **)(*(void *)a4 + 32), 8 * a1);
  }
  return v9;
}

double sub_19E2A27BC(void *a1, int a2)
{
  if (a2 == 2) {
    int v3 = -5;
  }
  else {
    int v3 = -1;
  }
  if (a2 == 3) {
    int v4 = -4;
  }
  else {
    int v4 = v3;
  }
  if (a2 == 4) {
    int v5 = -2;
  }
  else {
    int v5 = v4;
  }
  if (a2 == 5) {
    int v6 = -3;
  }
  else {
    int v6 = v5;
  }
  __cxa_begin_catch(a1);
  *((_DWORD *)*v2 + 24) = v6;
  __cxa_end_catch();
  sub_19E2A2824(*v2);
  return INFINITY;
}

uint64_t *sub_19E2A2824(uint64_t *a1)
{
  int v2 = sub_19E312BF0(*a1, 1);

  return sub_19E2A13B0(a1, v2);
}

uint64_t sub_19E2A2868(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*a1 + 8);
  sub_19E29E624(a1[1], (uint64_t)v25);
  uint64_t v4 = v26;
  uint64_t v28 = 0;
  unsigned int v29 = 0;
  uint64_t v27 = 0;
  if (!v26)
  {
    int v30 = 0;
    goto LABEL_11;
  }
  if ((v26 & 0x80000000) != 0) {
    sub_19E13D694();
  }
  int v5 = (float64x2_t *)operator new(8 * (int)v26);
  uint64_t v27 = v5;
  unsigned int v29 = (char *)&v5->f64[(int)v4];
  bzero(v5, 8 * (int)v4);
  uint64_t v28 = (char *)&v5->f64[(int)v4];
  int v30 = v4;
  int v6 = (char *)v25[0];
  if (v4 < 8)
  {
    uint64_t v7 = 0;
LABEL_9:
    uint64_t v16 = v4 - v7;
    uint64_t v17 = v7 << 32;
    do
    {
      *(double *)((char *)v5->f64 + (v17 >> 29)) = (double)*(int *)&v6[v17 >> 30];
      v17 += 0x100000000;
      --v16;
    }
    while (v16);
    goto LABEL_11;
  }
  uint64_t v7 = v4 & 0xFFFFFFF8;
  uint64_t v8 = v5 + 2;
  double v9 = (char *)v25[0] + 16;
  uint64_t v10 = v7;
  do
  {
    long long v11 = *((_OWORD *)v9 - 1);
    v12.i64[0] = (int)v11;
    v12.i64[1] = SDWORD1(v11);
    float64x2_t v13 = vcvtq_f64_s64(v12);
    v12.i64[0] = SDWORD2(v11);
    v12.i64[1] = SHIDWORD(v11);
    float64x2_t v14 = vcvtq_f64_s64(v12);
    v12.i64[0] = (int)*(_OWORD *)v9;
    v12.i64[1] = (int)HIDWORD(*(void *)v9);
    float64x2_t v15 = vcvtq_f64_s64(v12);
    v12.i64[0] = (int)*((void *)v9 + 1);
    v12.i64[1] = (int)HIDWORD(*(_OWORD *)v9);
    v8[-2] = v13;
    v8[-1] = v14;
    *uint64_t v8 = v15;
    v8[1] = vcvtq_f64_s64(v12);
    v8 += 4;
    v9 += 32;
    v10 -= 8;
  }
  while (v10);
  if (v7 != v4) {
    goto LABEL_9;
  }
LABEL_11:
  sub_19E29FF68(a2, (uint64_t)&v27, (uint64_t)__p);
  double v18 = sub_19E29F328(*(void *)(v3 + 8), (const double **)__p);
  double v20 = sqrt(v19);
  if (v20 < 0.00000001 || (int v21 = *(_DWORD *)(*(void *)(v3 + 8) + 96), v21 <= 0))
  {
    double v22 = (*(double (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  else
  {
    if (*(_DWORD *)(v3 + 56) != v21) {
      (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
    (**(void (***)(uint64_t, double, double))v3)(v3, v18, v20);
  }
  double v23 = v22;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v27)
  {
    uint64_t v28 = (char *)v27;
    operator delete(v27);
  }
  if (v25[0])
  {
    v25[1] = v25[0];
    operator delete(v25[0]);
  }
  return *(void *)&v23;
}

void sub_19E2A2AB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p)
  {
    operator delete(__p);
    double v19 = a9;
    if (!a9) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    double v19 = a9;
    if (!a9) {
      goto LABEL_3;
    }
  }
  operator delete(v19);
  _Unwind_Resume(exception_object);
}

BOOL sub_19E2A2B34(uint64_t *a1, void *a2)
{
  if (a1[8] != a2[8]) {
    return 0;
  }
  uint64_t v4 = (uint64_t *)a1[6];
  int v5 = a1 + 7;
  if (v4 != a1 + 7)
  {
    int v6 = (void *)a2[6];
    do
    {
      uint64_t v7 = *((unsigned __int8 *)v4 + 55);
      if ((v7 & 0x80u) == 0) {
        uint64_t v8 = *((unsigned __int8 *)v4 + 55);
      }
      else {
        uint64_t v8 = v4[5];
      }
      uint64_t v9 = *((unsigned __int8 *)v6 + 55);
      int v10 = (char)v9;
      if ((v9 & 0x80u) != 0) {
        uint64_t v9 = v6[5];
      }
      if (v8 != v9) {
        return 0;
      }
      long long v11 = (const void **)(v4 + 4);
      if (v10 >= 0) {
        int64x2_t v12 = (unsigned __int8 *)(v6 + 4);
      }
      else {
        int64x2_t v12 = (unsigned __int8 *)v6[4];
      }
      if ((v7 & 0x80) != 0)
      {
        if (memcmp(*v11, v12, v4[5])) {
          return 0;
        }
      }
      else if (*((unsigned char *)v4 + 55))
      {
        while (*(unsigned __int8 *)v11 == *v12)
        {
          long long v11 = (const void **)((char *)v11 + 1);
          ++v12;
          if (!--v7) {
            goto LABEL_19;
          }
        }
        return 0;
      }
LABEL_19:
      float64x2_t v13 = (uint64_t *)v4[1];
      if (v13)
      {
        do
        {
          float64x2_t v14 = v13;
          float64x2_t v13 = (uint64_t *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          float64x2_t v14 = (uint64_t *)v4[2];
          BOOL v15 = *v14 == (void)v4;
          uint64_t v4 = v14;
        }
        while (!v15);
      }
      uint64_t v16 = (void *)v6[1];
      if (v16)
      {
        do
        {
          uint64_t v17 = v16;
          uint64_t v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          uint64_t v17 = (void *)v6[2];
          BOOL v15 = *v17 == (void)v6;
          int v6 = v17;
        }
        while (!v15);
      }
      int v6 = v17;
      uint64_t v4 = v14;
    }
    while (v14 != v5);
  }
  if (a1[11] != a2[11]) {
    return 0;
  }
  double v18 = (uint64_t *)a1[9];
  if (v18 != a1 + 10)
  {
    double v19 = (void *)a2[9];
    do
    {
      uint64_t v20 = *((unsigned __int8 *)v18 + 55);
      if ((v20 & 0x80u) == 0) {
        uint64_t v21 = *((unsigned __int8 *)v18 + 55);
      }
      else {
        uint64_t v21 = v18[5];
      }
      uint64_t v22 = *((unsigned __int8 *)v19 + 55);
      int v23 = (char)v22;
      if ((v22 & 0x80u) != 0) {
        uint64_t v22 = v19[5];
      }
      if (v21 != v22) {
        return 0;
      }
      uint64_t v24 = (const void **)(v18 + 4);
      if (v23 >= 0) {
        unsigned int v25 = (unsigned __int8 *)(v19 + 4);
      }
      else {
        unsigned int v25 = (unsigned __int8 *)v19[4];
      }
      if ((v20 & 0x80) != 0)
      {
        if (memcmp(*v24, v25, v18[5])) {
          return 0;
        }
      }
      else if (*((unsigned char *)v18 + 55))
      {
        while (*(unsigned __int8 *)v24 == *v25)
        {
          uint64_t v24 = (const void **)((char *)v24 + 1);
          ++v25;
          if (!--v20) {
            goto LABEL_48;
          }
        }
        return 0;
      }
LABEL_48:
      unsigned int v26 = (uint64_t *)v18[1];
      if (v26)
      {
        do
        {
          uint64_t v27 = v26;
          unsigned int v26 = (uint64_t *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          uint64_t v27 = (uint64_t *)v18[2];
          BOOL v15 = *v27 == (void)v18;
          double v18 = v27;
        }
        while (!v15);
      }
      uint64_t v28 = (void *)v19[1];
      if (v28)
      {
        do
        {
          unsigned int v29 = v28;
          uint64_t v28 = (void *)*v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          unsigned int v29 = (void *)v19[2];
          BOOL v15 = *v29 == (void)v19;
          double v19 = v29;
        }
        while (!v15);
      }
      double v19 = v29;
      double v18 = v27;
    }
    while (v27 != a1 + 10);
  }
  uint64_t v31 = *a1;
  uint64_t v30 = a1[1];
  unint64_t v32 = (unsigned __int8 **)*a2;
  if (v30 - *a1 != a2[1] - *a2) {
    return 0;
  }
  for (; v31 != v30; v32 += 7)
  {
    uint64_t v33 = *(unsigned __int8 *)(v31 + 23);
    if ((v33 & 0x80u) == 0) {
      BOOL v34 = (unsigned __int8 *)*(unsigned __int8 *)(v31 + 23);
    }
    else {
      BOOL v34 = *(unsigned __int8 **)(v31 + 8);
    }
    uint64_t v35 = (unsigned __int8 *)*((unsigned __int8 *)v32 + 23);
    int v36 = (char)v35;
    if ((char)v35 < 0) {
      uint64_t v35 = v32[1];
    }
    if (v34 != v35) {
      return 0;
    }
    if (v36 >= 0) {
      long long v37 = (unsigned __int8 *)v32;
    }
    else {
      long long v37 = *v32;
    }
    if ((v33 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v31, v37, *(void *)(v31 + 8))) {
        return 0;
      }
    }
    else if (*(unsigned char *)(v31 + 23))
    {
      uint64_t v38 = 0;
      while (*(unsigned __int8 *)(v31 + v38) == v37[v38])
      {
        if (v33 == ++v38) {
          goto LABEL_77;
        }
      }
      return 0;
    }
LABEL_77:
    BOOL result = sub_19E2A2F5C(v31 + 24, (uint64_t)(v32 + 3), 0.000001);
    if (!result) {
      return result;
    }
    v31 += 56;
  }
  uint64_t v42 = a1 + 3;
  uint64_t v40 = a1[3];
  uint64_t v41 = v42[1];
  uint64_t v44 = a2 + 3;
  int v43 = (unsigned __int8 **)a2[3];
  if (v41 - v40 != v44[1] - (void)v43) {
    return 0;
  }
  if (v40 != v41)
  {
    while (1)
    {
      uint64_t v45 = *(unsigned __int8 *)(v40 + 23);
      if ((v45 & 0x80u) == 0) {
        unint64_t v46 = (unsigned __int8 *)*(unsigned __int8 *)(v40 + 23);
      }
      else {
        unint64_t v46 = *(unsigned __int8 **)(v40 + 8);
      }
      char v47 = (unsigned __int8 *)*((unsigned __int8 *)v43 + 23);
      int v48 = (char)v47;
      if ((char)v47 < 0) {
        char v47 = v43[1];
      }
      if (v46 != v47) {
        return 0;
      }
      if (v48 >= 0) {
        uint64_t v49 = (unsigned __int8 *)v43;
      }
      else {
        uint64_t v49 = *v43;
      }
      if ((v45 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v40, v49, *(void *)(v40 + 8))) {
          return 0;
        }
      }
      else if (*(unsigned char *)(v40 + 23))
      {
        uint64_t v50 = 0;
        while (*(unsigned __int8 *)(v40 + v50) == v49[v50])
        {
          if (v45 == ++v50) {
            goto LABEL_97;
          }
        }
        return 0;
      }
LABEL_97:
      uint64_t v51 = *(int *)(v40 + 48);
      if (v51 != *((_DWORD *)v43 + 12)) {
        return 0;
      }
      if (v51)
      {
        uint64_t v52 = *(int **)(v40 + 24);
        uint64_t v53 = v43[3];
        do
        {
          int v55 = *v52++;
          int v54 = v55;
          int v56 = *(_DWORD *)v53;
          v53 += 4;
          if (v54 != v56) {
            return 0;
          }
        }
        while (--v51);
      }
      v40 += 56;
      v43 += 7;
      BOOL result = 1;
      if (v40 == v41) {
        return result;
      }
    }
  }
  return 1;
}

BOOL sub_19E2A2F5C(uint64_t a1, uint64_t a2, double a3)
{
  int v3 = *(_DWORD *)(a1 + 24);
  if (v3 != *(_DWORD *)(a2 + 24)) {
    return 0;
  }
  uint64_t v7 = *(const void **)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  int64_t v8 = v6 - *(void *)a1;
  if (v6 == *(void *)a1)
  {
    int v10 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    if (v8 < 0) {
      sub_19E13D694();
    }
    uint64_t v9 = (char *)operator new(v6 - *(void *)a1);
    int v10 = &v9[8 * (v8 >> 3)];
    memcpy(v9, v7, v8);
  }
  vDSP_vsubD(*(const double **)a2, 1, (const double *)v9, 1, (double *)v9, 1, v3);
  if (v10 == v9)
  {
    int64x2_t v12 = 0;
  }
  else
  {
    if (v10 - v9 < 0) {
      sub_19E13D694();
    }
    int64x2_t v12 = operator new(v10 - v9);
    memcpy(v12, v9, v10 - v9);
  }
  cblas_dnrm2_NEWLAPACK();
  double v14 = v13;
  if (v12) {
    operator delete(v12);
  }
  if (v9) {
    operator delete(v9);
  }
  return v14 <= a3;
}

void sub_19E2A30B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (v15) {
    operator delete(v15);
  }
  if (v14) {
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **sub_19E2A310C(uint64_t ***a1, uint64_t *a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 5);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x2AAAAAAAAAAAAAALL) {
    sub_19E13D694();
  }
  if (0x5555555555555556 * (((char *)a1[2] - (char *)*a1) >> 5) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((char *)a1[2] - (char *)*a1) >> 5);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1[2] - (char *)*a1) >> 5) >= 0x155555555555555) {
    unint64_t v6 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL) {
      sub_19E13C418();
    }
    uint64_t v7 = (uint64_t **)operator new(96 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  int64_t v8 = &v7[12 * v6];
  uint64_t v9 = sub_19E291E68(&v7[12 * v3], a2);
  int v10 = v9 + 12;
  int64x2_t v12 = (char **)*a1;
  long long v11 = (char **)a1[1];
  if (v11 == (char **)*a1)
  {
    *a1 = v9;
    a1[1] = v10;
    a1[2] = v8;
    if (!v11) {
      return v10;
    }
    goto LABEL_17;
  }
  do
  {
    v11 -= 12;
    uint64_t v9 = sub_19E2965D0(v9 - 12, (uint64_t)v11);
  }
  while (v11 != v12);
  double v13 = (char **)*a1;
  long long v11 = (char **)a1[1];
  *a1 = v9;
  a1[1] = v10;
  a1[2] = v8;
  if (v11 != v13)
  {
    do
    {
      v11 -= 12;
      sub_19E2470C8(v11);
    }
    while (v11 != v13);
    long long v11 = v13;
  }
  if (v11) {
LABEL_17:
  }
    operator delete(v11);
  return v10;
}

void sub_19E2A3250()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x1E4FBA4F8] + 16;
  __cxa_throw(exception, MEMORY[0x1E4FBA348], MEMORY[0x1E4FBA1F0]);
}

void sub_19E2A329C(uint64_t a1, std::string *__str, std::string *a3, unint64_t a4)
{
  unint64_t v6 = __str;
  int v9 = a1 + 16;
  uint64_t v8 = *(void *)(a1 + 16);
  int v10 = *(std::string **)a1;
  if (0x6DB6DB6DB6DB6DB7 * ((v8 - *(void *)a1) >> 3) < a4)
  {
    if (v10)
    {
      long long v11 = *(std::string **)(a1 + 8);
      int64x2_t v12 = *(std::string **)a1;
      if (v11 != v10)
      {
        do
        {
          double v13 = (void *)v11[-2].__r_.__value_.__r.__words[2];
          if (v13)
          {
            v11[-1].__r_.__value_.__r.__words[0] = (std::string::size_type)v13;
            operator delete(v13);
          }
          if (v11[-2].__r_.__value_.__s.__data_[15] < 0) {
            operator delete((void *)v11[-3].__r_.__value_.__r.__words[2]);
          }
          long long v11 = (std::string *)((char *)v11 - 56);
        }
        while (v11 != v10);
        int64x2_t v12 = *(std::string **)a1;
      }
      *(void *)(a1 + 8) = v10;
      operator delete(v12);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (a4 > 0x492492492492492) {
      goto LABEL_48;
    }
    unint64_t v17 = 0x6DB6DB6DB6DB6DB7 * (v8 >> 3);
    uint64_t v18 = 2 * v17;
    if (2 * v17 <= a4) {
      uint64_t v18 = a4;
    }
    unint64_t v19 = v17 >= 0x249249249249249 ? 0x492492492492492 : v18;
    if (v19 > 0x492492492492492) {
LABEL_48:
    }
      sub_19E13D694();
    uint64_t v20 = 56 * v19;
    int v10 = (std::string *)operator new(56 * v19);
    *(void *)a1 = v10;
    *(void *)(a1 + 8) = v10;
    *(void *)(a1 + 16) = (char *)v10 + v20;
    if (v6 != a3)
    {
      unint64_t v21 = 0;
      do
      {
        sub_19E247604(v9, &v10->__r_.__value_.__r.__words[v21 / 8], (long long *)((char *)v6 + v21));
        v21 += 56;
      }
      while ((std::string *)((char *)v6 + v21) != a3);
      int v10 = (std::string *)((char *)v10 + v21);
    }
LABEL_35:
    *(void *)(a1 + 8) = v10;
    return;
  }
  double v14 = *(std::string **)(a1 + 8);
  if (0x6DB6DB6DB6DB6DB7 * (((char *)v14 - (char *)v10) >> 3) >= a4)
  {
    if (__str != a3)
    {
      do
      {
        std::string::operator=(v10, v6);
        if (v10 != v6) {
          sub_19E1E5B9C(v10[1].__r_.__value_.__r.__words, v6[1].__r_.__value_.__l.__data_, (char *)v6[1].__r_.__value_.__l.__size_, (uint64_t)(v6[1].__r_.__value_.__l.__size_ - v6[1].__r_.__value_.__r.__words[0]) >> 3);
        }
        LODWORD(v10[2].__r_.__value_.__l.__data_) = v6[2].__r_.__value_.__l.__data_;
        int v10 = (std::string *)((char *)v10 + 56);
        unint64_t v6 = (std::string *)((char *)v6 + 56);
      }
      while (v6 != a3);
      double v14 = *(std::string **)(a1 + 8);
    }
    while (v14 != v10)
    {
      int v23 = (void *)v14[-2].__r_.__value_.__r.__words[2];
      if (v23)
      {
        v14[-1].__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
        operator delete(v23);
      }
      if (v14[-2].__r_.__value_.__s.__data_[15] < 0) {
        operator delete((void *)v14[-3].__r_.__value_.__r.__words[2]);
      }
      double v14 = (std::string *)((char *)v14 - 56);
    }
    goto LABEL_35;
  }
  BOOL v15 = (std::string *)((char *)__str + 8 * (((char *)v14 - (char *)v10) >> 3));
  if (v14 != v10)
  {
    do
    {
      std::string::operator=(v10, v6);
      if (v10 != v6) {
        sub_19E1E5B9C(v10[1].__r_.__value_.__r.__words, v6[1].__r_.__value_.__l.__data_, (char *)v6[1].__r_.__value_.__l.__size_, (uint64_t)(v6[1].__r_.__value_.__l.__size_ - v6[1].__r_.__value_.__r.__words[0]) >> 3);
      }
      LODWORD(v10[2].__r_.__value_.__l.__data_) = v6[2].__r_.__value_.__l.__data_;
      unint64_t v6 = (std::string *)((char *)v6 + 56);
      int v10 = (std::string *)((char *)v10 + 56);
    }
    while (v6 != v15);
    int v10 = *(std::string **)(a1 + 8);
    uint64_t v16 = v10;
    if (v15 == a3) {
      goto LABEL_40;
    }
    goto LABEL_37;
  }
  uint64_t v16 = *(std::string **)a1;
  if (v15 != a3)
  {
LABEL_37:
    unint64_t v22 = 0;
    do
    {
      sub_19E247604(v9, &v10->__r_.__value_.__r.__words[v22 / 8], (long long *)((char *)v15 + v22));
      v22 += 56;
    }
    while ((std::string *)((char *)v15 + v22) != a3);
    uint64_t v16 = (std::string *)((char *)v10 + v22);
  }
LABEL_40:
  *(void *)(a1 + 8) = v16;
}

void sub_19E2A35D8(uint64_t a1, std::string *__str, std::string *a3, unint64_t a4)
{
  unint64_t v6 = __str;
  int v9 = a1 + 16;
  uint64_t v8 = *(void *)(a1 + 16);
  int v10 = *(std::string **)a1;
  if (0x6DB6DB6DB6DB6DB7 * ((v8 - *(void *)a1) >> 3) < a4)
  {
    if (v10)
    {
      long long v11 = *(std::string **)(a1 + 8);
      int64x2_t v12 = *(std::string **)a1;
      if (v11 != v10)
      {
        do
        {
          double v13 = (void *)v11[-2].__r_.__value_.__r.__words[2];
          if (v13)
          {
            v11[-1].__r_.__value_.__r.__words[0] = (std::string::size_type)v13;
            operator delete(v13);
          }
          if (v11[-2].__r_.__value_.__s.__data_[15] < 0) {
            operator delete((void *)v11[-3].__r_.__value_.__r.__words[2]);
          }
          long long v11 = (std::string *)((char *)v11 - 56);
        }
        while (v11 != v10);
        int64x2_t v12 = *(std::string **)a1;
      }
      *(void *)(a1 + 8) = v10;
      operator delete(v12);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (a4 > 0x492492492492492) {
      goto LABEL_48;
    }
    unint64_t v17 = 0x6DB6DB6DB6DB6DB7 * (v8 >> 3);
    uint64_t v18 = 2 * v17;
    if (2 * v17 <= a4) {
      uint64_t v18 = a4;
    }
    unint64_t v19 = v17 >= 0x249249249249249 ? 0x492492492492492 : v18;
    if (v19 > 0x492492492492492) {
LABEL_48:
    }
      sub_19E13D694();
    uint64_t v20 = 56 * v19;
    int v10 = (std::string *)operator new(56 * v19);
    *(void *)a1 = v10;
    *(void *)(a1 + 8) = v10;
    *(void *)(a1 + 16) = (char *)v10 + v20;
    if (v6 != a3)
    {
      unint64_t v21 = 0;
      do
      {
        sub_19E24780C(v9, &v10->__r_.__value_.__r.__words[v21 / 8], (long long *)((char *)v6 + v21));
        v21 += 56;
      }
      while ((std::string *)((char *)v6 + v21) != a3);
      int v10 = (std::string *)((char *)v10 + v21);
    }
LABEL_35:
    *(void *)(a1 + 8) = v10;
    return;
  }
  double v14 = *(std::string **)(a1 + 8);
  if (0x6DB6DB6DB6DB6DB7 * (((char *)v14 - (char *)v10) >> 3) >= a4)
  {
    if (__str != a3)
    {
      do
      {
        std::string::operator=(v10, v6);
        if (v10 != v6) {
          sub_19E29EC80(v10[1].__r_.__value_.__r.__words, v6[1].__r_.__value_.__l.__data_, (char *)v6[1].__r_.__value_.__l.__size_, (uint64_t)(v6[1].__r_.__value_.__l.__size_ - v6[1].__r_.__value_.__r.__words[0]) >> 2);
        }
        LODWORD(v10[2].__r_.__value_.__l.__data_) = v6[2].__r_.__value_.__l.__data_;
        int v10 = (std::string *)((char *)v10 + 56);
        unint64_t v6 = (std::string *)((char *)v6 + 56);
      }
      while (v6 != a3);
      double v14 = *(std::string **)(a1 + 8);
    }
    while (v14 != v10)
    {
      int v23 = (void *)v14[-2].__r_.__value_.__r.__words[2];
      if (v23)
      {
        v14[-1].__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
        operator delete(v23);
      }
      if (v14[-2].__r_.__value_.__s.__data_[15] < 0) {
        operator delete((void *)v14[-3].__r_.__value_.__r.__words[2]);
      }
      double v14 = (std::string *)((char *)v14 - 56);
    }
    goto LABEL_35;
  }
  BOOL v15 = (std::string *)((char *)__str + 8 * (((char *)v14 - (char *)v10) >> 3));
  if (v14 != v10)
  {
    do
    {
      std::string::operator=(v10, v6);
      if (v10 != v6) {
        sub_19E29EC80(v10[1].__r_.__value_.__r.__words, v6[1].__r_.__value_.__l.__data_, (char *)v6[1].__r_.__value_.__l.__size_, (uint64_t)(v6[1].__r_.__value_.__l.__size_ - v6[1].__r_.__value_.__r.__words[0]) >> 2);
      }
      LODWORD(v10[2].__r_.__value_.__l.__data_) = v6[2].__r_.__value_.__l.__data_;
      unint64_t v6 = (std::string *)((char *)v6 + 56);
      int v10 = (std::string *)((char *)v10 + 56);
    }
    while (v6 != v15);
    int v10 = *(std::string **)(a1 + 8);
    uint64_t v16 = v10;
    if (v15 == a3) {
      goto LABEL_40;
    }
    goto LABEL_37;
  }
  uint64_t v16 = *(std::string **)a1;
  if (v15 != a3)
  {
LABEL_37:
    unint64_t v22 = 0;
    do
    {
      sub_19E24780C(v9, &v10->__r_.__value_.__r.__words[v22 / 8], (long long *)((char *)v15 + v22));
      v22 += 56;
    }
    while ((std::string *)((char *)v15 + v22) != a3);
    uint64_t v16 = (std::string *)((char *)v10 + v22);
  }
LABEL_40:
  *(void *)(a1 + 8) = v16;
}

void sub_19E2A3914(uint64_t **a1, void *a2, void *a3)
{
  int v5 = a1;
  if (a1[2])
  {
    unint64_t v6 = *a1;
    uint64_t v8 = a1 + 1;
    uint64_t v7 = a1[1];
    *a1 = (uint64_t *)(a1 + 1);
    v7[2] = 0;
    a1[1] = 0;
    a1[2] = 0;
    if (v6[1]) {
      int v9 = (uint64_t *)v6[1];
    }
    else {
      int v9 = v6;
    }
    uint64_t v39 = (uint64_t)a1;
    uint64_t v41 = v9;
    if (!v9) {
      goto LABEL_65;
    }
    int v10 = (uint64_t *)v9[2];
    if (v10)
    {
      long long v11 = (uint64_t *)*v10;
      if ((uint64_t *)*v10 == v9)
      {
        uint64_t *v10 = 0;
        while (1)
        {
          uint64_t v38 = (uint64_t *)v10[1];
          if (!v38) {
            break;
          }
          do
          {
            int v10 = v38;
            uint64_t v38 = (uint64_t *)*v38;
          }
          while (v38);
        }
      }
      else
      {
        for (v10[1] = 0; v11; long long v11 = (uint64_t *)v10[1])
        {
          do
          {
            int v10 = v11;
            long long v11 = (uint64_t *)*v11;
          }
          while (v11);
        }
      }
    }
    uint64_t v40 = v10;
    if (a2 == a3)
    {
      BOOL v34 = a1;
      sub_19E15A064((uint64_t)a1, (char *)v9);
      if (!v10) {
        goto LABEL_66;
      }
      goto LABEL_62;
    }
    int64x2_t v12 = a2;
    while (1)
    {
      std::string::operator=((std::string *)(v9 + 4), (const std::string *)(v12 + 4));
      double v13 = v41;
      double v14 = *v8;
      BOOL v15 = v5 + 1;
      uint64_t v16 = v5 + 1;
      if (!*v8) {
        break;
      }
      int v17 = *((char *)v41 + 55);
      if (v17 >= 0) {
        size_t v18 = *((unsigned __int8 *)v41 + 55);
      }
      else {
        size_t v18 = v41[5];
      }
      if (v17 >= 0) {
        unint64_t v19 = v41 + 4;
      }
      else {
        unint64_t v19 = (const void *)v41[4];
      }
      do
      {
        while (1)
        {
          BOOL v15 = (uint64_t **)v14;
          unint64_t v22 = (const void *)v14[4];
          uint64_t v20 = v14 + 4;
          unint64_t v21 = v22;
          int v23 = *((char *)v20 + 23);
          if (v23 >= 0) {
            size_t v24 = *((unsigned __int8 *)v20 + 23);
          }
          else {
            size_t v24 = v20[1];
          }
          if (v23 >= 0) {
            unsigned int v25 = v20;
          }
          else {
            unsigned int v25 = v21;
          }
          if (v24 >= v18) {
            size_t v26 = v18;
          }
          else {
            size_t v26 = v24;
          }
          int v27 = memcmp(v19, v25, v26);
          BOOL v28 = v18 < v24;
          if (v27) {
            BOOL v28 = v27 < 0;
          }
          if (!v28) {
            break;
          }
          double v14 = *v15;
          uint64_t v16 = v15;
          if (!*v15) {
            goto LABEL_34;
          }
        }
        double v14 = v15[1];
      }
      while (v14);
      uint64_t v16 = v15 + 1;
      *uint64_t v41 = 0;
      v41[1] = 0;
      v41[2] = (uint64_t)v15;
      v15[1] = v41;
      unsigned int v29 = (uint64_t *)**v5;
      if (v29) {
        goto LABEL_35;
      }
LABEL_36:
      sub_19E13C8A0(v5[1], v13);
      v5[2] = (uint64_t *)((char *)v5[2] + 1);
      int v9 = v40;
      uint64_t v41 = v40;
      if (v40)
      {
        int v10 = (uint64_t *)v40[2];
        if (v10)
        {
          uint64_t v30 = (uint64_t *)*v10;
          if ((uint64_t *)*v10 == v40)
          {
            uint64_t *v10 = 0;
            while (1)
            {
              uint64_t v33 = (uint64_t *)v10[1];
              if (!v33) {
                break;
              }
              do
              {
                int v10 = v33;
                uint64_t v33 = (uint64_t *)*v33;
              }
              while (v33);
            }
          }
          else
          {
            for (v10[1] = 0; v30; uint64_t v30 = (uint64_t *)v10[1])
            {
              do
              {
                int v10 = v30;
                uint64_t v30 = (uint64_t *)*v30;
              }
              while (v30);
            }
          }
        }
        uint64_t v40 = v10;
        uint64_t v31 = (void *)v12[1];
        if (v31)
        {
          do
          {
LABEL_45:
            a2 = v31;
            uint64_t v31 = (void *)*v31;
          }
          while (v31);
          goto LABEL_49;
        }
      }
      else
      {
        int v10 = 0;
        uint64_t v31 = (void *)v12[1];
        if (v31) {
          goto LABEL_45;
        }
      }
      do
      {
        a2 = (void *)v12[2];
        BOOL v32 = *a2 == (void)v12;
        int64x2_t v12 = a2;
      }
      while (!v32);
LABEL_49:
      if (v9)
      {
        int64x2_t v12 = a2;
        if (a2 != a3) {
          continue;
        }
      }
      BOOL v34 = (uint64_t **)v39;
      sub_19E15A064(v39, (char *)v9);
      if (!v10) {
        goto LABEL_66;
      }
LABEL_62:
      for (unint64_t i = (uint64_t *)v10[2]; i; unint64_t i = (uint64_t *)i[2])
        int v10 = i;
      a1 = v34;
      int v9 = v10;
LABEL_65:
      sub_19E15A064((uint64_t)a1, (char *)v9);
      goto LABEL_66;
    }
LABEL_34:
    *uint64_t v41 = 0;
    v41[1] = 0;
    v41[2] = (uint64_t)v15;
    *uint64_t v16 = v41;
    unsigned int v29 = (uint64_t *)**v5;
    if (!v29) {
      goto LABEL_36;
    }
LABEL_35:
    uint64_t *v5 = v29;
    double v13 = *v16;
    goto LABEL_36;
  }
LABEL_66:
  if (a2 != a3)
  {
    do
    {
      sub_19E2A3CB0(v5, (uint64_t)(a2 + 4));
      int v36 = (void *)a2[1];
      if (v36)
      {
        do
        {
          long long v37 = v36;
          int v36 = (void *)*v36;
        }
        while (v36);
      }
      else
      {
        do
        {
          long long v37 = (void *)a2[2];
          BOOL v32 = *v37 == (void)a2;
          a2 = v37;
        }
        while (!v32);
      }
      a2 = v37;
    }
    while (v37 != a3);
  }
}

void sub_19E2A3C44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E2A3C58((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E2A3C58(uint64_t a1)
{
  sub_19E15A064(*(void *)a1, *(char **)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = *(void *)(v3 + 16);
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    sub_19E15A064(*(void *)a1, (char *)v2);
  }
  return a1;
}

char *sub_19E2A3CB0(uint64_t **a1, uint64_t a2)
{
  unint64_t v4 = (char *)operator new(0x38uLL);
  int v5 = v4;
  unint64_t v6 = v4 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_19E13C2D0(v4 + 32, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    _OWORD *v6 = *(_OWORD *)a2;
    *((void *)v4 + 6) = *(void *)(a2 + 16);
  }
  uint64_t v8 = a1 + 1;
  uint64_t v7 = a1[1];
  if (v7)
  {
    int v9 = v5[55];
    if (v9 >= 0) {
      size_t v10 = v5[55];
    }
    else {
      size_t v10 = *((void *)v5 + 5);
    }
    if (v9 < 0) {
      unint64_t v6 = (_OWORD *)*((void *)v5 + 4);
    }
    do
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v7;
        double v13 = (const void *)v7[4];
        long long v11 = v7 + 4;
        int64x2_t v12 = v13;
        int v14 = *((char *)v11 + 23);
        if (v14 >= 0) {
          size_t v15 = *((unsigned __int8 *)v11 + 23);
        }
        else {
          size_t v15 = v11[1];
        }
        if (v14 >= 0) {
          uint64_t v16 = v11;
        }
        else {
          uint64_t v16 = v12;
        }
        if (v15 >= v10) {
          size_t v17 = v10;
        }
        else {
          size_t v17 = v15;
        }
        int v18 = memcmp(v6, v16, v17);
        BOOL v19 = v10 < v15;
        if (v18) {
          BOOL v19 = v18 < 0;
        }
        if (!v19) {
          break;
        }
        uint64_t v7 = *v8;
        uint64_t v20 = v8;
        if (!*v8) {
          goto LABEL_28;
        }
      }
      uint64_t v7 = v8[1];
    }
    while (v7);
    uint64_t v20 = v8 + 1;
  }
  else
  {
    uint64_t v20 = a1 + 1;
  }
LABEL_28:
  *(void *)int v5 = 0;
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = v8;
  *uint64_t v20 = (uint64_t *)v5;
  unint64_t v21 = (uint64_t *)**a1;
  unint64_t v22 = (uint64_t *)v5;
  if (v21)
  {
    *a1 = v21;
    unint64_t v22 = *v20;
  }
  sub_19E13C8A0(a1[1], v22);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v5;
}

void sub_19E2A3DF0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_19E2A3E04(void *a1)
{
  uint64_t v2 = (void *)a1[33];
  if (v2)
  {
    a1[34] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[29];
  if (v3)
  {
    a1[30] = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)a1[25];
  if (v4)
  {
    a1[26] = v4;
    operator delete(v4);
  }
  int v5 = (void *)a1[21];
  if (v5)
  {
    a1[22] = v5;
    operator delete(v5);
  }
  unint64_t v6 = (void *)a1[17];
  if (v6)
  {
    a1[18] = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)a1[13];
  if (v7)
  {
    a1[14] = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)a1[9];
  if (v8)
  {
    a1[10] = v8;
    operator delete(v8);
  }
  int v9 = (void *)a1[5];
  if (v9)
  {
    a1[6] = v9;
    operator delete(v9);
  }
  return a1;
}

uint64_t sub_19E2A3EA8(uint64_t a1)
{
  *(void *)a1 = &unk_1EF0A8528;
  uint64_t v2 = *(char ***)(a1 + 10656);
  if (v2)
  {
    uint64_t v3 = *(char ***)(a1 + 10664);
    unint64_t v4 = v2;
    if (v3 != v2)
    {
      do
        uint64_t v3 = sub_19E2470C8(v3 - 12);
      while (v3 != v2);
      unint64_t v4 = *(char ***)(a1 + 10656);
    }
    *(void *)(a1 + 10664) = v2;
    operator delete(v4);
  }
  std::random_device::~random_device((std::random_device *)(a1 + 10648));
  std::random_device::~random_device((std::random_device *)(a1 + 8104));
  std::random_device::~random_device((std::random_device *)(a1 + 5584));
  std::random_device::~random_device((std::random_device *)(a1 + 3056));
  uint64_t v5 = *(void *)(a1 + 544);
  *(void *)(a1 + 544) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *(void *)(a1 + 480) = &unk_1EF0A7CC8;
  unint64_t v6 = *(void **)(a1 + 496);
  if (v6)
  {
    *(void *)(a1 + 504) = v6;
    operator delete(v6);
  }
  sub_19E2A3E04((void *)(a1 + 176));
  uint64_t v7 = *(void *)(a1 + 152);
  if (v7)
  {
    uint64_t v8 = *(void *)(a1 + 160);
    int v9 = *(void **)(a1 + 152);
    if (v8 != v7)
    {
      uint64_t v10 = *(void *)(a1 + 160);
      do
      {
        int64x2_t v12 = *(void **)(v10 - 56);
        v10 -= 56;
        long long v11 = v12;
        if (v12)
        {
          *(void *)(v8 - 48) = v11;
          operator delete(v11);
        }
        uint64_t v8 = v10;
      }
      while (v10 != v7);
      int v9 = *(void **)(a1 + 152);
    }
    *(void *)(a1 + 160) = v7;
    operator delete(v9);
  }
  *(void *)a1 = &unk_1EF0A8318;
  sub_19E2934EC(a1 + 32);
  double v13 = *(char ***)(a1 + 8);
  if (v13)
  {
    int v14 = *(char ***)(a1 + 16);
    size_t v15 = *(void **)(a1 + 8);
    if (v14 != v13)
    {
      do
        int v14 = sub_19E2470C8(v14 - 13);
      while (v14 != v13);
      size_t v15 = *(void **)(a1 + 8);
    }
    *(void *)(a1 + 16) = v13;
    operator delete(v15);
  }
  return a1;
}

uint64_t sub_19E2A4064(uint64_t *a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  uint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((v7 - *a1) >> 3);
  unint64_t v9 = v8 + 1;
  if ((unint64_t)(v8 + 1) > 0x492492492492492) {
    sub_19E13D694();
  }
  uint64_t v12 = a2;
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - v6) >> 3) > v9) {
    unint64_t v9 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - v6) >> 3);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - v6) >> 3)) >= 0x249249249249249) {
    unint64_t v13 = 0x492492492492492;
  }
  else {
    unint64_t v13 = v9;
  }
  uint64_t v37 = v7 - *a1;
  if (v13)
  {
    if (v13 > 0x492492492492492) {
      sub_19E13C418();
    }
    uint64_t v14 = a1[1];
    size_t v15 = a3;
    uint64_t v16 = (char *)operator new(56 * v13);
    a3 = v15;
    uint64_t v7 = v14;
    uint64_t v12 = a2;
  }
  else
  {
    uint64_t v16 = 0;
  }
  uint64_t v17 = (uint64_t)&v16[56 * v8];
  int v18 = &v16[56 * v13];
  uint64_t v19 = *a3;
  uint64_t v20 = *a4;
  uint64_t v21 = *a5;
  *(void *)(v17 + 8) = 0;
  *(void *)(v17 + 16) = 0;
  *(void *)uint64_t v17 = 0;
  int v23 = *(const void **)v12;
  uint64_t v22 = *(void *)(v12 + 8);
  int64_t v24 = v22 - *(void *)v12;
  if (v22 != *(void *)v12)
  {
    if (v24 < 0) {
      sub_19E13D694();
    }
    int v36 = v18;
    unsigned int v25 = (char *)operator new(v24);
    *(void *)uint64_t v17 = v25;
    *(void *)(v17 + 8) = v25;
    size_t v26 = &v25[8 * (v24 >> 3)];
    *(void *)(v17 + 16) = v26;
    memcpy(v25, v23, v24);
    *(void *)(v17 + 8) = v26;
    int v18 = v36;
  }
  *(_DWORD *)(v17 + 24) = *(_DWORD *)(v12 + 24);
  int v27 = &v16[v37];
  *((void *)v27 + 4) = v19;
  *((void *)v27 + 5) = v20;
  *((void *)v27 + 6) = v21;
  sub_19E2A4334((uint64_t)(a1 + 2), v7, v7, v6, v6, v17, v17);
  unsigned int v29 = (char *)*a1;
  BOOL v28 = (char *)a1[1];
  *a1 = v30;
  a1[1] = v17 + 56;
  a1[2] = (uint64_t)v18;
  if (v28 != v29)
  {
    uint64_t v31 = v28;
    do
    {
      uint64_t v33 = (void *)*((void *)v31 - 7);
      v31 -= 56;
      BOOL v32 = v33;
      if (v33)
      {
        *((void *)v28 - 6) = v32;
        operator delete(v32);
      }
      BOOL v28 = v31;
    }
    while (v31 != v29);
  }
  if (v29) {
    operator delete(v29);
  }
  return v17 + 56;
}

void sub_19E2A428C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_19E2A42C4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E2A42A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  uint64_t v6 = *(void **)v4;
  if (*(void *)v4)
  {
    *(void *)(v4 + 8) = v6;
    operator delete(v6);
  }
  sub_19E2A42C4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E2A42C4(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        uint64_t v5 = v2 - 56;
        uint64_t v4 = *(void **)(v2 - 56);
        *(void *)(a1 + 16) = v2 - 56;
        if (!v4) {
          break;
        }
        *(void *)(v2 - 48) = v4;
        operator delete(v4);
        uint64_t v2 = *(void *)(a1 + 16);
        if (v2 == v3) {
          goto LABEL_6;
        }
      }
      v2 -= 56;
    }
    while (v5 != v3);
  }
LABEL_6:
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_19E2A4334(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  uint64_t v19 = a6;
  uint64_t v20 = a7;
  if (a3 != a5)
  {
    uint64_t v9 = a3;
    uint64_t v10 = a3;
    do
    {
      *(void *)(v7 - 56) = 0;
      *(void *)(v7 - 48) = 0;
      *(void *)(v7 - 40) = 0;
      uint64_t v14 = *(unsigned char **)(v10 - 56);
      unint64_t v13 = *(unsigned char **)(v10 - 48);
      v10 -= 56;
      uint64_t v15 = v7;
      int64_t v16 = v13 - v14;
      if (v13 != v14)
      {
        if (v16 < 0) {
          sub_19E13D694();
        }
        uint64_t v17 = (char *)operator new(v13 - v14);
        *(void *)(v7 - 56) = v17;
        *(void *)(v7 - 48) = v17;
        long long v11 = &v17[8 * (v16 >> 3)];
        *(void *)(v7 - 40) = v11;
        memcpy(v17, v14, v16);
        *(void *)(v7 - 48) = v11;
        uint64_t v15 = v20;
      }
      *(_DWORD *)(v7 - 32) = *(_DWORD *)(v9 - 32);
      uint64_t v12 = *(void *)(v9 - 8);
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(v9 - 24);
      *(void *)(v7 - 8) = v12;
      uint64_t v7 = v15 - 56;
      uint64_t v20 = v15 - 56;
      uint64_t v9 = v10;
    }
    while (v10 != a5);
    return v19;
  }
  return a6;
}

void sub_19E2A4440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12 = *v10;
  if (*v10)
  {
    *(void *)(v9 - 48) = v12;
    operator delete(v12);
  }
  sub_19E2A4468((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_19E2A4468(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 16) + 8);
    uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 8);
    while (v3 != v4)
    {
      uint64_t v5 = *(void **)v3;
      if (*(void *)v3)
      {
        *(void *)(v3 + 8) = v5;
        operator delete(v5);
      }
      v3 += 56;
    }
  }
  return a1;
}

void sub_19E2A44CC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t *)(a1 + 72);
  uint64_t v4 = *(void *)(a1 + 72);
  int v6 = *(_DWORD *)(a1 + 96);
  int v7 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 96) = v6 + 1;
  *(_DWORD *)(a1 + 100) = v7;
  unint64_t v8 = v7 * (v6 + 1);
  unint64_t v9 = (*(void *)(a1 + 80) - v4) >> 3;
  if (v8 <= v9)
  {
    if (v8 < v9) {
      *(void *)(a1 + 80) = v4 + 8 * v8;
    }
  }
  else
  {
    sub_19E2482DC(a1 + 72, v8 - v9);
    int v6 = *(_DWORD *)(a1 + 96) - 1;
  }
  sub_19E29FAE8(a2, (uint64_t)__p);
  uint64_t v10 = *(int *)(a1 + 100);
  long long v11 = (char *)__p[0];
  if (!v10)
  {
    if (!__p[0]) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  uint64_t v12 = (int)v10 * (uint64_t)v6;
  uint64_t v13 = *v5;
  if (v10 >= 8 && (uint64_t v14 = 8 * v12 + v13, v14 - (unint64_t)__p[0] >= 0x20))
  {
    unint64_t v15 = v10 & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v20 = (long long *)((char *)__p[0] + 16);
    uint64_t v21 = (_OWORD *)(v14 + 16);
    unint64_t v22 = v10 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      long long v23 = *v20;
      *(v21 - 1) = *(v20 - 1);
      *uint64_t v21 = v23;
      v20 += 2;
      v21 += 2;
      v22 -= 4;
    }
    while (v22);
    if (v15 == v10) {
      goto LABEL_17;
    }
  }
  else
  {
    unint64_t v15 = 0;
  }
  uint64_t v16 = v10 - v15;
  uint64_t v17 = (void *)(v13 + 8 * (v15 + v12));
  int v18 = &v11[8 * v15];
  do
  {
    uint64_t v19 = *(void *)v18;
    v18 += 8;
    *v17++ = v19;
    --v16;
  }
  while (v16);
LABEL_17:
  __p[1] = v11;
  operator delete(v11);
LABEL_18:
  sub_19E2A4608(a1, 1, 1);
}

void sub_19E2A4608(uint64_t a1, int a2, int a3)
{
  if (a2)
  {
    uint64_t v5 = (void *)(a1 + 104);
    uint64_t v4 = *(void *)(a1 + 104);
    int v6 = *(_DWORD *)(a1 + 96);
    *(_DWORD *)(a1 + 128) = v6;
    unint64_t v7 = (*(void *)(a1 + 112) - v4) >> 3;
    uint64_t v35 = v6;
    if (v6 <= v7)
    {
      if (v6 < v7) {
        *(void *)(a1 + 112) = v4 + 8 * v6;
      }
    }
    else
    {
      sub_19E2482DC(a1 + 104, v6 - v7);
      int v6 = *(_DWORD *)(a1 + 96);
      uint64_t v35 = v6;
    }
    if (v6)
    {
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      while (1)
      {
        uint64_t v10 = *(void *)(a1 + 72);
        signed int v11 = *(_DWORD *)(a1 + 100);
        double __C = 0;
        uint64_t v41 = 0;
        uint64_t v42 = 0;
        if (v11) {
          break;
        }
        uint64_t v12 = 0;
        uint64_t v37 = 0;
        uint64_t v38 = 0;
        __p = 0;
        unsigned int v39 = 0;
LABEL_26:
        double __C = 0;
        vDSP_meanvD(*(const double **)(a1 + 264), 1, (double *)&__C, *(int *)(a1 + 288));
        *(void *)(*v5 + 8 * v9) = __C;
        if (__p)
        {
          uint64_t v37 = __p;
          operator delete(__p);
        }
        if (v12) {
          operator delete(v12);
        }
        ++v9;
        v8 += 8;
        if (v9 == v35) {
          goto LABEL_34;
        }
      }
      if (v11 < 0) {
        sub_19E13D694();
      }
      uint64_t v12 = operator new(8 * v11);
      bzero(v12, 8 * v11);
      if (v11 >= 8 && (unint64_t)v12 - v10 - 8 * v9 * v11 >= 0x20)
      {
        unint64_t v13 = v11 & 0xFFFFFFFFFFFFFFFCLL;
        BOOL v28 = (long long *)(v10 + v8 * v11 + 16);
        unsigned int v29 = v12 + 1;
        unint64_t v30 = v13;
        do
        {
          long long v31 = *v28;
          *(v29 - 1) = *(v28 - 1);
          *unsigned int v29 = v31;
          v28 += 2;
          v29 += 2;
          v30 -= 4;
        }
        while (v30);
        if (v13 == v11)
        {
LABEL_16:
          __p = 0;
          uint64_t v37 = 0;
          uint64_t v38 = 0;
          unsigned int v39 = v11;
          sub_19E2482DC((uint64_t)&__p, v11);
          uint64_t v19 = v39;
          if ((int)v39 >= 1)
          {
            uint64_t v20 = 0;
            uint64_t v21 = (char *)__p;
            if (v39 < 4) {
              goto LABEL_22;
            }
            if ((unint64_t)((unsigned char *)__p - (unsigned char *)v12) < 0x20) {
              goto LABEL_22;
            }
            unint64_t v22 = 0;
            uint64_t v20 = v39 & 0xFFFFFFFC;
            uint64_t v23 = (8 * v39) & 0x7FFFFFFE0;
            do
            {
              long long v24 = v12[v22 / 0x10 + 1];
              unsigned int v25 = &v21[v22];
              *(_OWORD *)unsigned int v25 = v12[v22 / 0x10];
              *((_OWORD *)v25 + 1) = v24;
              v22 += 32;
            }
            while (v23 != v22);
            if (v20 != v19)
            {
LABEL_22:
              uint64_t v26 = v19 - v20;
              uint64_t v27 = v20 << 32;
              do
              {
                *(void *)&v21[v27 >> 29] = *(void *)((char *)v12 + (v27 >> 29));
                v27 += 0x100000000;
                --v26;
              }
              while (v26);
            }
          }
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v13 = 0;
      }
      unint64_t v14 = v11 - v13;
      uint64_t v15 = 8 * v13;
      uint64_t v16 = (void *)v12 + v13;
      uint64_t v17 = (uint64_t *)(v10 + v15 + v8 * v11);
      do
      {
        uint64_t v18 = *v17++;
        *v16++ = v18;
        --v14;
      }
      while (v14);
      goto LABEL_16;
    }
  }
LABEL_34:
  sub_19E2A4988(a1 + 8, (uint64_t *)(a1 + 72), (uint64_t)&__C);
  if ((char **)(a1 + 136) != &__C) {
    sub_19E1E5B9C((void *)(a1 + 136), __C, v41, (v41 - __C) >> 3);
  }
  BOOL v32 = __C;
  *(void *)(a1 + 160) = v43;
  if (v32)
  {
    uint64_t v41 = v32;
    operator delete(v32);
  }
  sub_19E2A4E4C(a1 + 136, (uint64_t)&__C);
  if ((char **)(a1 + 168) != &__C) {
    sub_19E1E5B9C((void *)(a1 + 168), __C, v41, (v41 - __C) >> 3);
  }
  uint64_t v33 = __C;
  *(void *)(a1 + 192) = v43;
  if (v33)
  {
    uint64_t v41 = v33;
    operator delete(v33);
  }
  sub_19E2A5050(a1);
  if (a3) {
    sub_19E2A5274((int32x2_t *)a1);
  }
}

void sub_19E2A4924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2A4988(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *((unsigned int *)a2 + 6);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  if (!v4)
  {
    unint64_t v7 = 0;
    *(_DWORD *)(a3 + 24) = 0;
    *(_DWORD *)(a3 + 28) = 0;
LABEL_41:
    uint64_t v41 = (int)v4;
    if (v4) {
      goto LABEL_42;
    }
    return;
  }
  size_t v6 = 8 * (v4 * v4);
  unint64_t v7 = (char *)operator new(v6);
  *(void *)a3 = v7;
  *(void *)(a3 + 16) = &v7[v6];
  bzero(v7, v6);
  *(void *)(a3 + 8) = &v7[v6];
  *(_DWORD *)(a3 + 24) = v4;
  *(_DWORD *)(a3 + 28) = v4;
  if ((int)v4 <= 0) {
    goto LABEL_41;
  }
  uint64_t v49 = 0;
  uint64_t v8 = 0;
  uint64_t v52 = 1;
  uint64_t v47 = v4;
  uint64_t v48 = a1;
  do
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v51 = (int)v8 * v4;
    do
    {
      uint64_t v11 = *a2;
      signed int v12 = *((_DWORD *)a2 + 7);
      __p = 0;
      unsigned __int8 v58 = 0;
      uint64_t v59 = 0;
      if (v12)
      {
        if (v12 < 0) {
          sub_19E13D694();
        }
        unint64_t v13 = v7;
        size_t v14 = 8 * v12;
        uint64_t v15 = operator new(v14);
        bzero(v15, v14);
        if (v12 < 8 || (unint64_t)v15 - v11 - 8 * v8 * v12 < 0x20)
        {
          unint64_t v16 = 0;
          goto LABEL_12;
        }
        unint64_t v16 = v12 & 0xFFFFFFFFFFFFFFFCLL;
        uint64_t v33 = (long long *)(v11 + v49 * v12 + 16);
        BOOL v34 = v15 + 1;
        unint64_t v35 = v16;
        do
        {
          long long v36 = *v33;
          *(v34 - 1) = *(v33 - 1);
          *BOOL v34 = v36;
          v33 += 2;
          v34 += 2;
          v35 -= 4;
        }
        while (v35);
        if (v16 != v12)
        {
LABEL_12:
          unint64_t v17 = v12 - v16;
          uint64_t v18 = 8 * v16;
          uint64_t v19 = (void *)v15 + v16;
          uint64_t v20 = (uint64_t *)(v11 + v18 + v49 * v12);
          do
          {
            uint64_t v21 = *v20++;
            *v19++ = v21;
            --v17;
          }
          while (v17);
        }
        uint64_t v53 = 0;
        int v54 = 0;
        signed int v56 = 0;
        int v55 = 0;
        uint64_t v53 = operator new(8 * v12);
        int v54 = (char *)v53 + v14;
        int v55 = (char *)v53 + 8 * v12;
        signed int v56 = v12;
        memcpy(v53, v15, 8 * v12);
        unint64_t v22 = operator new(8 * v12);
        bzero(v22, 8 * v12);
        if (v12 < 8 || (unint64_t)v22 - v11 - 8 * v10 * v12 < 0x20)
        {
          unint64_t v23 = 0;
          goto LABEL_17;
        }
        unint64_t v23 = v12 & 0xFFFFFFFFFFFFFFFCLL;
        uint64_t v37 = (long long *)(v11 + v9 * v12 + 16);
        uint64_t v38 = v22 + 1;
        unint64_t v39 = v23;
        do
        {
          long long v40 = *v37;
          *(v38 - 1) = *(v37 - 1);
          *uint64_t v38 = v40;
          v37 += 2;
          v38 += 2;
          v39 -= 4;
        }
        while (v39);
        if (v23 != v12)
        {
LABEL_17:
          unint64_t v24 = v12 - v23;
          uint64_t v25 = 8 * v23;
          uint64_t v26 = (void *)v22 + v23;
          uint64_t v27 = (uint64_t *)(v11 + v25 + v9 * v12);
          do
          {
            uint64_t v28 = *v27++;
            *v26++ = v28;
            --v24;
          }
          while (v24);
        }
        __p = 0;
        unsigned __int8 v58 = 0;
        signed int v60 = 0;
        uint64_t v59 = 0;
        uint64_t v29 = (int)v10;
        __p = operator new(8 * v12);
        unsigned __int8 v58 = (char *)__p + v14;
        uint64_t v59 = (char *)__p + 8 * v12;
        signed int v60 = v12;
        memcpy(__p, v22, 8 * v12);
        unint64_t v7 = v13;
        a1 = v48;
        goto LABEL_21;
      }
      uint64_t v15 = 0;
      unint64_t v22 = 0;
      int v54 = 0;
      int v55 = 0;
      uint64_t v53 = 0;
      signed int v56 = 0;
      uint64_t v29 = (int)v10;
      __p = 0;
      unsigned __int8 v58 = 0;
      signed int v60 = 0;
      uint64_t v59 = 0;
LABEL_21:
      double v30 = *(double *)(a1 + 16);
      double v31 = sub_19E29BC14(a1, (uint64_t)&v53, (const double **)&__p);
      double v32 = exp(v31 * -0.5) * v30;
      if (v8 == v10) {
        double v32 = v32 + *(double *)(a1 + 8) + 1.0e-10;
      }
      *(double *)&v7[8 * v29 + 8 * v51] = v32;
      if (__p)
      {
        unsigned __int8 v58 = (char *)__p;
        operator delete(__p);
      }
      if (v22) {
        operator delete(v22);
      }
      if (v53)
      {
        int v54 = (char *)v53;
        operator delete(v53);
      }
      if (v15) {
        operator delete(v15);
      }
      ++v10;
      v9 += 8;
    }
    while (v10 != v52);
    ++v8;
    ++v52;
    v49 += 8;
    uint64_t v4 = v47;
  }
  while (v8 != v47);
  uint64_t v41 = v47;
LABEL_42:
  if (v41 != 1)
  {
    uint64_t v42 = 0;
    uint64_t v43 = 8 * v41;
    uint64_t v44 = v7;
    do
    {
      if (v42)
      {
        uint64_t v45 = 0;
        unint64_t v46 = v44;
        do
        {
          *unint64_t v46 = *(void *)&v7[8 * v45++];
          unint64_t v46 = (void *)((char *)v46 + v43);
        }
        while (v42 != v45);
      }
      ++v42;
      ++v44;
      v7 += v43;
    }
    while (v42 != v41);
  }
}

void sub_19E2A4DA8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E13A9BC(a1);
}

void sub_19E2A4DD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v27 = a10;
    if (!v25)
    {
LABEL_3:
      uint64_t v28 = a18;
      if (!a18) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v27 = a10;
    if (!v25) {
      goto LABEL_3;
    }
  }
  operator delete(v25);
  uint64_t v28 = a18;
  if (!a18)
  {
LABEL_4:
    if (!v23) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  operator delete(v28);
  if (!v23)
  {
LABEL_5:
    *(void *)(v27 + 8) = v24;
    operator delete(v24);
    _Unwind_Resume(a1);
  }
LABEL_9:
  operator delete(v23);
  *(void *)(v27 + 8) = v24;
  operator delete(v24);
  _Unwind_Resume(a1);
}

void sub_19E2A4E4C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3 = *(_DWORD *)(a1 + 28);
  int v27 = *(_DWORD *)(a1 + 24);
  int v28 = v3;
  int v26 = 0;
  sub_19E29FC64(a1, v25);
  char v24 = 1;
  LOWORD(v23) = 76;
  dpotrf_NEWLAPACK();
  sub_19E29FC64((uint64_t)v25, __p);
  sub_19E29F880((uint64_t)__p, a2);
  uint64_t v4 = v21;
  if (v21 >= 1)
  {
    uint64_t v5 = 0;
    int v6 = v22;
    int v7 = *(_DWORD *)(a2 + 28);
    int v8 = 1;
    int v9 = -1;
    uint64_t v10 = *(void *)a2;
    do
    {
      if (v6 <= v8) {
        int v11 = v8;
      }
      else {
        int v11 = v6;
      }
      int v12 = v5 + 1;
      if ((int)v5 + 1 >= v6) {
        goto LABEL_3;
      }
      unsigned int v13 = 0;
      int v14 = v11 + v9;
      uint64_t v15 = (int)v5 * (uint64_t)v7;
      if ((v11 + v9) < 4)
      {
        int v16 = v5 + 1;
      }
      else
      {
        int v16 = v5 + 1;
        if (v11 - (int)v5 + v8 - 2 >= v8)
        {
          int v17 = 0;
          unsigned int v13 = v14 & 0xFFFFFFFC;
          int v16 = v12 + (v14 & 0xFFFFFFFC);
          do
          {
            uint64_t v18 = (_OWORD *)(v10 + 8 * (v15 + v8 + v17));
            *uint64_t v18 = 0uLL;
            v18[1] = 0uLL;
            v17 += 4;
          }
          while ((v14 & 0xFFFFFFFC) != v17);
          if (v14 == v13) {
            goto LABEL_3;
          }
        }
      }
      unsigned int v19 = v11 - v13;
      do
      {
        *(void *)(v10 + 8 * (v15 + v16)) = 0;
        int v16 = ++v13 + v12;
        --v19;
      }
      while (v8 != v19);
LABEL_3:
      ++v5;
      ++v8;
      --v9;
    }
    while (v5 != v4);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v24 < 0) {
    operator delete(v23);
  }
  if (v25[0])
  {
    v25[1] = v25[0];
    operator delete(v25[0]);
  }
}

void sub_19E2A4FDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21)
{
  if (__p)
  {
    operator delete(__p);
    if ((a19 & 0x80000000) == 0)
    {
LABEL_3:
      int v22 = a20;
      if (!a20) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a19 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a14);
  int v22 = a20;
  if (!a20) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(v22);
  _Unwind_Resume(exception_object);
}

void sub_19E2A5050(uint64_t a1)
{
  sub_19E29F880(a1 + 168, (uint64_t)v22);
  uint64_t v2 = *(unsigned int *)(a1 + 192);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 0;
    int v4 = *(_DWORD *)(a1 + 196);
    int v5 = v23;
    int v6 = 1;
    int v7 = -1;
    int v8 = v22[0];
    do
    {
      if (v4 <= v6) {
        int v9 = v6;
      }
      else {
        int v9 = v4;
      }
      int v10 = v3 + 1;
      if ((int)v3 + 1 >= v4) {
        goto LABEL_3;
      }
      unsigned int v11 = 0;
      int v12 = v9 + v7;
      uint64_t v13 = (int)v3 * (uint64_t)v5;
      if ((v9 + v7) < 4)
      {
        int v14 = v3 + 1;
      }
      else
      {
        int v14 = v3 + 1;
        if (v9 - (int)v3 + v6 - 2 >= v6)
        {
          int v15 = 0;
          unsigned int v11 = v12 & 0xFFFFFFFC;
          int v14 = v10 + (v12 & 0xFFFFFFFC);
          do
          {
            int v16 = &v8[v13 + v6 + v15];
            *int v16 = 0uLL;
            v16[1] = 0uLL;
            v15 += 4;
          }
          while ((v12 & 0xFFFFFFFC) != v15);
          if (v12 == v11) {
            goto LABEL_3;
          }
        }
      }
      unsigned int v17 = v9 - v11;
      do
      {
        v8[v13 + v14] = 0;
        int v14 = ++v11 + v10;
        --v17;
      }
      while (v6 != v17);
LABEL_3:
      ++v3;
      ++v6;
      --v7;
    }
    while (v3 != v2);
  }
  sub_19E2A54DC(a1, (uint64_t)v18);
  sub_19E29F6FC((uint64_t)v22, (uint64_t)v18, (uint64_t)&__p);
  if ((void **)(a1 + 232) != &__p) {
    sub_19E1E5B9C((void *)(a1 + 232), (char *)__p, v20, (v20 - (unsigned char *)__p) >> 3);
  }
  *(_DWORD *)(a1 + 256) = v21;
  if (__p)
  {
    uint64_t v20 = (char *)__p;
    operator delete(__p);
  }
  if (v18[0])
  {
    v18[1] = v18[0];
    operator delete(v18[0]);
  }
  sub_19E29FC64((uint64_t)v22, &__p);
  sub_19E2A58A8((uint64_t)&__p, a1 + 232);
  if (__p)
  {
    uint64_t v20 = (char *)__p;
    operator delete(__p);
  }
  if (v22[0])
  {
    v22[1] = v22[0];
    operator delete(v22[0]);
  }
}

void sub_19E2A5210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  if (a17) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2A5274(int32x2_t *a1)
{
  uint64_t v2 = a1[12].u32[0];
  sub_19E242424(v2, v2, (uint64_t)&__p);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = v29.i32[1] + 1;
    int v4 = __p;
    if (v2 == 1)
    {
      uint64_t v5 = 0;
LABEL_7:
      uint64_t v8 = v2 - v5;
      uint64_t v9 = v5 << 32;
      do
      {
        v4[(v9 >> 32) * v3] = 0x3FF0000000000000;
        v9 += 0x100000000;
        --v8;
      }
      while (v8);
      goto LABEL_9;
    }
    uint64_t v6 = 0;
    uint64_t v5 = v2 & 0xFFFFFFFE;
    uint64_t v7 = v5;
    do
    {
      v4[(v6 >> 32) * v3] = 0x3FF0000000000000;
      v4[((v6 >> 32) | 1) * v3] = 0x3FF0000000000000;
      v6 += 0x200000000;
      v7 -= 2;
    }
    while (v7);
    if (v5 != v2) {
      goto LABEL_7;
    }
  }
LABEL_9:
  if (&a1[25] != (int32x2_t *)&__p) {
    sub_19E1E5B9C(&a1[25], (char *)__p, v28, (v28 - (unsigned char *)__p) >> 3);
  }
  int v10 = (char *)__p;
  a1[28] = v29;
  if (v10)
  {
    int v28 = v10;
    operator delete(v10);
  }
  sub_19E29F880((uint64_t)&a1[21], (uint64_t)&__p);
  uint64_t v11 = a1[24].u32[0];
  if ((int)v11 >= 1)
  {
    uint64_t v12 = 0;
    int v13 = a1[24].i32[1];
    __int32 v14 = v29.i32[1];
    int v15 = 1;
    int v16 = -1;
    unsigned int v17 = __p;
    do
    {
      if (v13 <= v15) {
        int v18 = v15;
      }
      else {
        int v18 = v13;
      }
      int v19 = v12 + 1;
      if ((int)v12 + 1 >= v13) {
        goto LABEL_15;
      }
      unsigned int v20 = 0;
      int v21 = v18 + v16;
      uint64_t v22 = (int)v12 * (uint64_t)v14;
      if ((v18 + v16) < 4)
      {
        int v23 = v12 + 1;
      }
      else
      {
        int v23 = v12 + 1;
        if (v18 - (int)v12 + v15 - 2 >= v15)
        {
          int v24 = 0;
          unsigned int v20 = v21 & 0xFFFFFFFC;
          int v23 = v19 + (v21 & 0xFFFFFFFC);
          do
          {
            uint64_t v25 = &v17[v22 + v15 + v24];
            _OWORD *v25 = 0uLL;
            v25[1] = 0uLL;
            v24 += 4;
          }
          while ((v21 & 0xFFFFFFFC) != v24);
          if (v21 == v20) {
            goto LABEL_15;
          }
        }
      }
      unsigned int v26 = v18 - v20;
      do
      {
        v17[v22 + v23] = 0;
        int v23 = ++v20 + v19;
        --v26;
      }
      while (v15 != v26);
LABEL_15:
      ++v12;
      ++v15;
      --v16;
    }
    while (v12 != v11);
  }
  sub_19E2A59C0((uint64_t)&__p, a1 + 25);
  if (__p)
  {
    int v28 = (char *)__p;
    operator delete(__p);
  }
  sub_19E29FC64((uint64_t)&a1[21], &__p);
  sub_19E2A59C0((uint64_t)&__p, a1 + 25);
  if (__p)
  {
    int v28 = (char *)__p;
    operator delete(__p);
  }
}

void sub_19E2A54B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2A54DC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  signed int v4 = *(_DWORD *)(a1 + 288);
  uint64_t v5 = 8 * v4;
  if (v4)
  {
    if (v4 < 0) {
      sub_19E13D694();
    }
    uint64_t v6 = (char *)operator new(8 * v4);
    bzero(v6, 8 * v4);
    unint64_t v7 = 0;
    uint64_t v8 = &v6[v5];
    uint64_t v9 = *(void *)(a1 + 264);
    if (v4 < 4) {
      goto LABEL_48;
    }
    if ((unint64_t)&v6[-v9] < 0x20) {
      goto LABEL_48;
    }
    uint64_t v10 = 0;
    unint64_t v7 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v11 = v7;
    do
    {
      long long v12 = *(_OWORD *)(v9 + v10 + 16);
      int v13 = &v6[v10];
      *(_OWORD *)int v13 = *(_OWORD *)(v9 + v10);
      *((_OWORD *)v13 + 1) = v12;
      v10 += 32;
      v11 -= 4;
    }
    while (v11);
    if (v7 != v4)
    {
LABEL_48:
      do
      {
        *(void *)&v6[8 * v7] = *(void *)(v9 + 8 * v7);
        ++v7;
      }
      while (v4 != v7);
    }
    uint64_t v14 = *(int *)(a1 + 128);
    if (v14) {
      goto LABEL_10;
    }
LABEL_19:
    int v15 = 0;
    goto LABEL_20;
  }
  uint64_t v8 = 0;
  uint64_t v6 = 0;
  uint64_t v14 = *(int *)(a1 + 128);
  if (!v14) {
    goto LABEL_19;
  }
LABEL_10:
  if ((v14 & 0x80000000) != 0) {
    sub_19E13D694();
  }
  int v15 = (char *)operator new(8 * v14);
  bzero(v15, 8 * v14);
  unint64_t v16 = 0;
  uint64_t v17 = *(void *)(a1 + 104);
  if (v14 < 4) {
    goto LABEL_49;
  }
  if ((unint64_t)&v15[-v17] < 0x20) {
    goto LABEL_49;
  }
  uint64_t v18 = 0;
  unint64_t v16 = v14 & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v19 = v14 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    long long v20 = *(_OWORD *)(v17 + v18 + 16);
    int v21 = &v15[v18];
    *(_OWORD *)int v21 = *(_OWORD *)(v17 + v18);
    *((_OWORD *)v21 + 1) = v20;
    v18 += 32;
    v19 -= 4;
  }
  while (v19);
  if (v16 != v14)
  {
LABEL_49:
    do
    {
      *(void *)&v15[8 * v16] = *(void *)(v17 + 8 * v16);
      ++v16;
    }
    while (v14 != v16);
  }
LABEL_20:
  vDSP_vsubD((const double *)v15, 1, (const double *)v6, 1, (double *)v6, 1, v4);
  if (v8 != v6)
  {
    if (v8 - v6 < 0) {
      sub_19E13D694();
    }
    uint64_t v22 = (char *)operator new(v8 - v6);
    memcpy(v22, v6, v8 - v6);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)a2 = 0;
    if (!v4)
    {
      *(_DWORD *)(a2 + 24) = 0;
      operator delete(v22);
      if (!v15) {
        goto LABEL_35;
      }
LABEL_34:
      operator delete(v15);
      goto LABEL_35;
    }
LABEL_26:
    if (v4 < 0) {
      sub_19E13D694();
    }
    int v23 = (char *)operator new(8 * v4);
    *(void *)a2 = v23;
    *(void *)(a2 + 16) = &v23[8 * v4];
    bzero(v23, 8 * v4);
    *(void *)(a2 + 8) = &v23[v5];
    *(_DWORD *)(a2 + 24) = v4;
    if (v4 >= 4)
    {
      uint64_t v25 = 0;
      unint64_t v24 = v4 & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v26 = v24;
      do
      {
        long long v27 = *(_OWORD *)&v22[v25 + 16];
        int v28 = &v23[v25];
        *(_OWORD *)int v28 = *(_OWORD *)&v22[v25];
        *((_OWORD *)v28 + 1) = v27;
        v25 += 32;
        v26 -= 4;
      }
      while (v26);
      if (v24 == v4)
      {
LABEL_33:
        operator delete(v22);
        if (!v15) {
          goto LABEL_35;
        }
        goto LABEL_34;
      }
    }
    else
    {
      unint64_t v24 = 0;
    }
    do
    {
      *(void *)&v23[8 * v24] = *(void *)&v22[8 * v24];
      ++v24;
    }
    while (v4 != v24);
    goto LABEL_33;
  }
  uint64_t v22 = 0;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  if (v4) {
    goto LABEL_26;
  }
  *(_DWORD *)(a2 + 24) = 0;
  if (v15) {
    goto LABEL_34;
  }
LABEL_35:
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_19E2A5814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (v19)
  {
    operator delete(v19);
    if (!v18) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if (!v18)
  {
    goto LABEL_3;
  }
  operator delete(v18);
  _Unwind_Resume(exception_object);
}

void sub_19E2A5878(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  if (a9) {
    operator delete(a9);
  }
  sub_19E13A9BC(a1);
}

void sub_19E2A588C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13) {
    JUMPOUT(0x19E2A589CLL);
  }
  JUMPOUT(0x19E2A58A0);
}

void sub_19E2A58A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(int *)(a1 + 24);
  int v10 = 1;
  int v11 = v3;
  int v8 = *(_DWORD *)(a2 + 24);
  int v9 = v3;
  int v7 = 0;
  memset(&__p[4], 0, 24);
  if (v3)
  {
    if ((v3 & 0x80000000) != 0) {
      sub_19E13D694();
    }
    size_t v4 = 4 * v3;
    uint64_t v5 = operator new(4 * v3);
    bzero(v5, v4);
  }
  else
  {
    uint64_t v5 = 0;
  }
  sub_19E29FC64(a1, __p);
  dgesv_NEWLAPACK();
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v5) {
    operator delete(v5);
  }
}

void sub_19E2A597C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (v14) {
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2A59C0(uint64_t a1, int32x2_t *a2)
{
  uint64_t v4 = *(int *)(a1 + 24);
  int v38 = v4;
  __int32 v6 = a2[3].i32[0];
  __int32 v5 = a2[3].i32[1];
  int v36 = v4;
  __int32 v37 = v5;
  int v34 = 0;
  __int32 v35 = v6;
  memset(&__p[4], 0, 24);
  if (v4)
  {
    if ((v4 & 0x80000000) != 0) {
      sub_19E13D694();
    }
    size_t v7 = 4 * v4;
    int v8 = operator new(4 * v4);
    bzero(v8, v7);
  }
  else
  {
    int v8 = 0;
  }
  sub_19E29FC64(a1, __p);
  sub_19E29FC64((uint64_t)a2, &v39);
  int v9 = (char *)v39;
  uint64_t v10 = v42 * (uint64_t)v41;
  if (v10)
  {
    unint64_t v11 = 0;
    int32x2_t v12 = *a2;
    if (v10 < 4) {
      goto LABEL_11;
    }
    if (*(void *)&v12 - (void)v39 < 0x20uLL) {
      goto LABEL_11;
    }
    unint64_t v11 = v10 & 0xFFFFFFFFFFFFFFFCLL;
    int v13 = v39 + 1;
    uint64_t v14 = (_OWORD *)(*(void *)&v12 + 16);
    unint64_t v15 = v10 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      long long v16 = *v13;
      *(v14 - 1) = *(v13 - 1);
      _OWORD *v14 = v16;
      v13 += 2;
      v14 += 2;
      v15 -= 4;
    }
    while (v15);
    if (v11 != v10)
    {
LABEL_11:
      uint64_t v17 = (void *)(*(void *)&v12 + 8 * v11);
      unint64_t v18 = v10 - v11;
      unint64_t v19 = &v9[8 * v11];
      do
      {
        uint64_t v20 = *(void *)v19;
        v19 += 8;
        *v17++ = v20;
        --v18;
      }
      while (v18);
    }
  }
  else if (!v39)
  {
    goto LABEL_16;
  }
  long long v40 = v9;
  operator delete(v9);
LABEL_16:
  a2[3] = vrev64_s32(a2[3]);
  dgesv_NEWLAPACK();
  sub_19E29FC64((uint64_t)a2, &v39);
  int v21 = (char *)v39;
  uint64_t v22 = v42 * (uint64_t)v41;
  if (v22)
  {
    unint64_t v23 = 0;
    int32x2_t v24 = *a2;
    if (v22 < 4) {
      goto LABEL_22;
    }
    if (*(void *)&v24 - (void)v39 < 0x20uLL) {
      goto LABEL_22;
    }
    unint64_t v23 = v22 & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v25 = v39 + 1;
    unint64_t v26 = (_OWORD *)(*(void *)&v24 + 16);
    unint64_t v27 = v22 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      long long v28 = *v25;
      *(v26 - 1) = *(v25 - 1);
      *unint64_t v26 = v28;
      v25 += 2;
      v26 += 2;
      v27 -= 4;
    }
    while (v27);
    if (v23 != v22)
    {
LABEL_22:
      int32x2_t v29 = (void *)(*(void *)&v24 + 8 * v23);
      unint64_t v30 = v22 - v23;
      double v31 = &v21[8 * v23];
      do
      {
        uint64_t v32 = *(void *)v31;
        v31 += 8;
        *v29++ = v32;
        --v30;
      }
      while (v30);
    }
  }
  else if (!v39)
  {
    goto LABEL_27;
  }
  long long v40 = v21;
  operator delete(v21);
LABEL_27:
  a2[3] = vrev64_s32(a2[3]);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v8) {
    operator delete(v8);
  }
}

void sub_19E2A5BD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (v14) {
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2A5C20(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = a2;
  sub_19E2A099C((uint64_t)&v22, 2u);
  uint64_t v3 = operator new(0x10uLL);
  void *v3 = 0;
  v3[1] = 0;
  uint64_t v14 = v3;
  unint64_t v15 = v3 + 2;
  long long v16 = v3 + 2;
  int v17 = 2;
  uint64_t v4 = operator new(0x10uLL);
  __p = v4;
  _OWORD *v4 = xmmword_19E351FE0;
  unint64_t v19 = v4 + 1;
  uint64_t v20 = v4 + 1;
  int v21 = 2;
  *(_OWORD *)uint64_t v3 = xmmword_19E351FF0;
  sub_19E2A16E8((uint64_t)&v22, (uint64_t *)&v14);
  sub_19E2A1818((uint64_t)&v22, (uint64_t *)&__p);
  if (__p)
  {
    unint64_t v19 = __p;
    operator delete(__p);
  }
  if (v14)
  {
    unint64_t v15 = v14;
    operator delete(v14);
  }
  __int32 v6 = *(unsigned char **)(a2 + 40);
  __int32 v5 = *(unsigned char **)(a2 + 48);
  uint64_t v10 = 0;
  unint64_t v11 = 0;
  int32x2_t v12 = 0;
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      sub_19E13D694();
    }
    int v8 = (char *)operator new(v5 - v6);
    int v9 = &v8[8 * (v7 >> 3)];
    uint64_t v10 = v8;
    int32x2_t v12 = v9;
    memcpy(v8, v6, v7);
    unint64_t v11 = v9;
  }
  int v13 = *(_DWORD *)(a2 + 64);
  sub_19E2A5EE0((uint64_t)&v22, (uint64_t)&v23, (uint64_t)&v10);
}

void sub_19E2A5E50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (!__p)
  {
    sub_19E2A0A3C(&a25);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  sub_19E2A0A3C(&a25);
  _Unwind_Resume(a1);
}

void sub_19E2A5EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  sub_19E242654((uint64_t)va);
  sub_19E2A0A3C((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_19E2A5EE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a1 + 112)) {
    (**(void (***)(uint64_t, void))a1)(a1, *(unsigned int *)(a3 + 24));
  }
  operator new();
}

void sub_19E2A6374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  __cxa_free_exception(v15);
  if (a2 != 3)
  {
    if (a2 == 2)
    {
      unint64_t v19 = __cxa_begin_catch(a1);
      (*(void (**)(void *))(*(void *)v19 + 16))(v19);
      sub_19E29FAE8(v14, (uint64_t)&a13);
      if (a13)
      {
        a14 = (uint64_t)a13;
        operator delete(a13);
      }
      __cxa_end_catch();
LABEL_13:
      JUMPOUT(0x19E2A615CLL);
    }
    if (a2 != 1)
    {
      if (__p) {
        operator delete(__p);
      }
      _Unwind_Resume(a1);
    }
  }
  uint64_t v18 = __cxa_begin_catch(a1);
  (*(void (**)(void *))(*(void *)v18 + 16))(v18);
  __cxa_end_catch();
  goto LABEL_13;
}

double sub_19E2A64C4(uint64_t **a1, uint64_t *a2, int **a3)
{
  __int32 v6 = *a1;
  __int32 v5 = a1[1];
  unint64_t v7 = (char *)v5 - (char *)*a1;
  int v41 = 0;
  int v42 = 0;
  long long v40 = 0;
  int v43 = 0;
  double v33 = 0.0;
  __p = 0;
  __int32 v35 = 0;
  if (!(v7 >> 3))
  {
    int v8 = 0;
    long long v40 = 0;
    int v41 = 0;
    int v42 = 0;
    int v43 = v7 >> 3;
    if (v6 == v5) {
      goto LABEL_13;
    }
    goto LABEL_6;
  }
  if (((v7 >> 3) & 0x80000000) != 0) {
    sub_19E13D694();
  }
  int v8 = operator new((uint64_t)(v7 << 29) >> 29);
  bzero(v8, (uint64_t)(v7 << 29) >> 29);
  long long v40 = v8;
  int v41 = (char *)v8 + ((uint64_t)(v7 << 29) >> 29);
  int v42 = (char *)v8 + 8 * (int)((uint64_t)v7 >> 3);
  int v43 = v7 >> 3;
  if (v6 != v5)
  {
LABEL_6:
    uint64_t v9 = 0;
    if (v7 - 8 < 0x18) {
      goto LABEL_11;
    }
    if ((unint64_t)((char *)v8 - (char *)v6) < 0x20) {
      goto LABEL_11;
    }
    unint64_t v10 = ((v7 - 8) >> 3) + 1;
    uint64_t v9 = v10 & 0x3FFFFFFFFFFFFFFCLL;
    unint64_t v11 = v8 + 1;
    uint64_t v12 = (long long *)(v6 + 2);
    uint64_t v13 = v10 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v14 = *v12;
      *(v11 - 1) = *(v12 - 1);
      *unint64_t v11 = v14;
      v11 += 2;
      v12 += 2;
      v13 -= 4;
    }
    while (v13);
    v6 += v10 & 0x3FFFFFFFFFFFFFFCLL;
    if (v10 != v9)
    {
LABEL_11:
      uint64_t v15 = (void *)v8 + v9;
      do
      {
        uint64_t v16 = *v6++;
        *v15++ = v16;
      }
      while (v6 != v5);
    }
  }
LABEL_13:
  if (*a2 == a2[1])
  {
    sub_19E2A67BC(a3, (uint64_t)&v40, 0, (uint64_t)&v33);
    double v17 = v33;
    if (v36)
    {
      double v31 = __p;
      if (__p)
      {
        __int32 v35 = __p;
        goto LABEL_31;
      }
    }
  }
  else
  {
    LOBYTE(v37[0]) = 0;
    char v39 = 0;
    sub_19E2A67BC(a3, (uint64_t)&v40, 1, (uint64_t)&v33);
    double v17 = v33;
    sub_19E2A7CB8((uint64_t)v37, (uint64_t)&__p);
    if (v36 && __p)
    {
      __int32 v35 = __p;
      operator delete(__p);
    }
    uint64_t v18 = v38;
    if (v38)
    {
      unint64_t v19 = 0;
      uint64_t v20 = v37[0];
      uint64_t v21 = *a2;
      if (v38 < 4) {
        goto LABEL_23;
      }
      if ((unint64_t)(v21 - v37[0]) < 0x20) {
        goto LABEL_23;
      }
      unint64_t v19 = v38 & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v22 = (long long *)(v37[0] + 16);
      uint64_t v23 = (_OWORD *)(v21 + 16);
      unint64_t v24 = v19;
      do
      {
        long long v25 = *v22;
        *(v23 - 1) = *(v22 - 1);
        _OWORD *v23 = v25;
        v22 += 2;
        v23 += 2;
        v24 -= 4;
      }
      while (v24);
      if (v19 != v18)
      {
LABEL_23:
        uint64_t v26 = v18 - v19;
        uint64_t v27 = 8 * v19;
        long long v28 = (void *)(v21 + 8 * v19);
        int32x2_t v29 = (uint64_t *)(v20 + v27);
        do
        {
          uint64_t v30 = *v29++;
          *v28++ = v30;
          --v26;
        }
        while (v26);
      }
    }
    if (v39)
    {
      double v31 = (void *)v37[0];
      if (v37[0])
      {
        v37[1] = v37[0];
LABEL_31:
        operator delete(v31);
      }
    }
  }
  if (v40)
  {
    int v41 = (char *)v40;
    operator delete(v40);
  }
  return v17;
}

void sub_19E2A6744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,void *__p,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2A67A0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E13A9BC(a1);
}

void *sub_19E2A67BC@<X0>(int **a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  sub_19E2A7650((uint64_t)v18, *a1);
  if (v19 != (void *)a2) {
    sub_19E1E5B9C(v19, *(char **)a2, *(char **)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  }
  int v20 = *(_DWORD *)(a2 + 24);
  unint64_t v7 = *(char **)a2;
  v18[3] = exp(*(double *)v7 + *(double *)v7);
  v18[4] = exp(*((long double *)v7 + 1));
  sub_19E2A4608((uint64_t)v18, 0, a3);
  double v8 = sub_19E2A6998((uint64_t)v18);
  double v9 = v8;
  if (a3)
  {
    sub_19E2A6BC8((uint64_t)v18, (uint64_t)&v15);
    *(void *)(a4 + 8) = 0;
    *(double *)a4 = v9;
    *(void *)(a4 + 16) = 0;
    *(void *)(a4 + 24) = 0;
    unint64_t v10 = v15;
    int64_t v11 = v16 - v15;
    if (v16 != v15)
    {
      if (v11 < 0) {
        sub_19E13D694();
      }
      uint64_t v12 = (char *)operator new(v16 - v15);
      *(void *)(a4 + 8) = v12;
      uint64_t v13 = &v12[8 * (v11 >> 3)];
      *(void *)(a4 + 24) = v13;
      memcpy(v12, v10, v11);
      *(void *)(a4 + 16) = v13;
    }
    *(_DWORD *)(a4 + 32) = v17;
    *(unsigned char *)(a4 + 40) = 1;
    if (v10)
    {
      uint64_t v16 = v10;
      operator delete(v10);
    }
  }
  else
  {
    *(double *)a4 = v8;
    *(unsigned char *)(a4 + 8) = 0;
    *(unsigned char *)(a4 + 40) = 0;
  }
  return sub_19E2A3E04(v18);
}

void sub_19E2A6910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_19E2A3E04((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19E2A6924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v16 = *v14;
  if (*v14)
  {
    *(void *)(v13 + 16) = v16;
    operator delete(v16);
    int v17 = __p;
    if (!__p)
    {
LABEL_3:
      sub_19E2A3E04(&a13);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    int v17 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  operator delete(v17);
  sub_19E2A3E04(&a13);
  _Unwind_Resume(a1);
}

void sub_19E2A6970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_19E2A3E04((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19E2A6984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_19E2A3E04((uint64_t *)va);
  _Unwind_Resume(a1);
}

double sub_19E2A6998(uint64_t a1)
{
  sub_19E2A54DC(a1, (uint64_t)&__A);
  __C[0] = 0;
  vDSP_dotprD(__A, 1, *(const double **)(a1 + 232), 1, (double *)__C, (int)__N);
  uint64_t v2 = __C[0];
  if (__A)
  {
    int v17 = __A;
    operator delete(__A);
  }
  uint64_t v3 = *(int *)(a1 + 196);
  if ((int)v3 >= *(_DWORD *)(a1 + 192)) {
    int v4 = *(_DWORD *)(a1 + 192);
  }
  else {
    int v4 = *(_DWORD *)(a1 + 196);
  }
  __A = 0;
  int v17 = 0;
  uint64_t v18 = 0;
  if (v4)
  {
    if (v4 < 0) {
      sub_19E13D694();
    }
    __int32 v5 = operator new(8 * v4);
    bzero(v5, 8 * v4);
    uint64_t v6 = 0;
    unint64_t v7 = *(void **)(a1 + 168);
    do
    {
      *((void *)v5 + v6++) = *v7;
      v7 += v3 + 1;
    }
    while (v4 != v6);
    __p = operator new(8 * v4);
    int64_t v11 = (char *)__p + 8 * v4;
    uint64_t v12 = v11;
    int v13 = v4;
    memcpy(__p, v5, 8 * v4);
  }
  else
  {
    __int32 v5 = 0;
    int64_t v11 = 0;
    uint64_t v12 = 0;
    __p = 0;
    int v13 = 0;
  }
  sub_19E2A7AC4((uint64_t)&__p, (uint64_t)__C);
  __A = 0;
  vDSP_sveD((const double *)__C[0], 1, (double *)&__A, (int)v15);
  double v8 = __A;
  if (__C[0])
  {
    __C[1] = __C[0];
    operator delete(__C[0]);
  }
  if (__p)
  {
    int64_t v11 = (char *)__p;
    operator delete(__p);
  }
  if (v5) {
    operator delete(v5);
  }
  return (double)*(int *)(a1 + 96) * -0.918938533 - (*(double *)&v8 - *(double *)&v2 * -0.5);
}

void sub_19E2A6B40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (__p)
  {
    operator delete(__p);
    int v20 = a9;
    if (!a9)
    {
LABEL_3:
      if (!v18) {
LABEL_8:
      }
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(v18);
      goto LABEL_8;
    }
  }
  else
  {
    int v20 = a9;
    if (!a9) {
      goto LABEL_3;
    }
  }
  operator delete(v20);
  if (!v18) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void sub_19E2A6BAC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E13A9BC(a1);
}

void sub_19E2A6BC8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v103 = 0;
  uint64_t v104 = 0;
  uint64_t v105 = 0;
  uint64_t v3 = *(unsigned char **)(a1 + 200);
  uint64_t v2 = *(unsigned char **)(a1 + 208);
  int64_t v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0) {
      sub_19E13D694();
    }
    __int32 v5 = (double *)operator new(v2 - v3);
    uint64_t v6 = &v5[v4 >> 3];
    uint64_t v103 = v5;
    uint64_t v105 = v6;
    memcpy(v5, v3, v4);
    uint64_t v104 = v6;
  }
  unint64_t v106 = *(void *)(a1 + 224);
  uint64_t v88 = 0;
  size_t v89 = 0;
  unint64_t v87 = 0;
  double v8 = *(unsigned char **)(a1 + 232);
  unint64_t v7 = *(unsigned char **)(a1 + 240);
  int64_t v9 = v7 - v8;
  if (v7 != v8)
  {
    if (v9 < 0) {
      sub_19E13D694();
    }
    unint64_t v10 = (char *)operator new(v7 - v8);
    int64_t v11 = &v10[8 * (v9 >> 3)];
    unint64_t v87 = v10;
    size_t v89 = v11;
    memcpy(v10, v8, v9);
    uint64_t v88 = v11;
  }
  int v90 = *(_DWORD *)(a1 + 256);
  sub_19E29FAE8(a1 + 232, (uint64_t)v86);
  sub_19E2A7BA8((uint64_t)&v87, (uint64_t)v86, (uint64_t)&__p);
  unint64_t v95 = 0;
  long long v96 = 0;
  uint64_t v97 = 0;
  uint64_t v12 = __p;
  int64_t v13 = v92 - (unsigned char *)__p;
  if (v92 == __p)
  {
    vDSP_Length v15 = 0;
    long long v14 = 0;
  }
  else
  {
    if (v13 < 0) {
      sub_19E13D694();
    }
    long long v14 = (char *)operator new(v92 - (unsigned char *)__p);
    vDSP_Length v15 = &v14[8 * (v13 >> 3)];
    unint64_t v95 = v14;
    uint64_t v97 = v15;
    memcpy(v14, v12, v13);
    long long v96 = v15;
  }
  unint64_t v16 = v94;
  unint64_t v98 = v94;
  unint64_t v17 = HIDWORD(v94);
  vDSP_Length v18 = HIDWORD(v94) * (int)v94;
  vDSP_vsubD(v103, 1, (const double *)v14, 1, (double *)v14, 1, v18);
  uint64_t v99 = 0;
  size_t v100 = 0;
  uint64_t v101 = 0;
  int64_t v19 = v15 - v14;
  if (!v19)
  {
    int v20 = 0;
    unint64_t v102 = v16;
    int v108 = 0;
    uint64_t v109 = 0;
    double __B = 0.0;
    if (v18) {
      goto LABEL_14;
    }
LABEL_18:
    uint64_t v22 = 0;
    uint64_t v21 = 0;
    unint64_t v110 = __PAIR64__(v17, v16);
    goto LABEL_23;
  }
  if (v19 < 0) {
    sub_19E13D694();
  }
  int v20 = (char *)operator new(v19);
  uint64_t v99 = v20;
  uint64_t v101 = &v20[8 * (v19 >> 3)];
  memcpy(v20, v14, v19);
  size_t v100 = &v20[8 * (v19 >> 3)];
  unint64_t v102 = v16;
  int v108 = 0;
  uint64_t v109 = 0;
  double __B = 0.0;
  if (!v18) {
    goto LABEL_18;
  }
LABEL_14:
  if ((v18 & 0x80000000) != 0) {
    sub_19E13D694();
  }
  uint64_t v21 = (char *)operator new(8 * v18);
  *(void *)&double __B = v21;
  uint64_t v109 = &v21[8 * v18];
  bzero(v21, 8 * v18);
  uint64_t v22 = &v21[8 * v18];
  unint64_t v110 = __PAIR64__(v17, v16);
  if (v18 < 4)
  {
    for (unint64_t i = 0; i != v18; ++i)
LABEL_22:
      *(void *)&v21[8 * i] = *(void *)&v20[8 * i];
    goto LABEL_23;
  }
  uint64_t v24 = 0;
  unint64_t i = v18 & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v25 = v18 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    long long v26 = *(_OWORD *)&v20[v24 + 16];
    uint64_t v27 = &v21[v24];
    *(_OWORD *)uint64_t v27 = *(_OWORD *)&v20[v24];
    *((_OWORD *)v27 + 1) = v26;
    v24 += 32;
    v25 -= 4;
  }
  while (v25);
  if (i != v18) {
    goto LABEL_22;
  }
LABEL_23:
  sub_19E1E5B9C(&v103, v21, v22, (v22 - v21) >> 3);
  unint64_t v106 = v110;
  if (v21)
  {
    int v108 = v21;
    operator delete(v21);
  }
  if (v20)
  {
    size_t v100 = v20;
    operator delete(v20);
  }
  if (v14)
  {
    long long v96 = v14;
    operator delete(v14);
  }
  if (__p)
  {
    v92 = (char *)__p;
    operator delete(__p);
  }
  if (v86[0])
  {
    v86[1] = v86[0];
    operator delete(v86[0]);
  }
  if (v87)
  {
    uint64_t v88 = v87;
    operator delete(v87);
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  long long v28 = operator new(0x10uLL);
  *(void *)(a2 + 8) = v28 + 2;
  *(void *)(a2 + 16) = v28 + 2;
  *(void *)a2 = v28;
  *(_DWORD *)(a2 + 24) = 2;
  void *v28 = 0;
  v28[1] = 0;
  uint64_t v82 = *(int *)(a1 + 96);
  if (v82)
  {
    unint64_t v29 = 0;
    uint64_t v83 = 0;
    do
    {
      uint64_t v30 = 0;
      unint64_t v31 = 0;
      do
      {
        uint64_t v32 = *(void *)(a1 + 72);
        uint64_t v33 = *(unsigned int *)(a1 + 100);
        double __B = 0.0;
        int v108 = 0;
        uint64_t v109 = 0;
        if (!v33)
        {
          int v34 = 0;
          size_t v100 = 0;
          uint64_t v101 = 0;
          uint64_t v99 = 0;
          LODWORD(v102) = 0;
LABEL_68:
          uint64_t v51 = 0;
          v92 = 0;
          unint64_t v93 = 0;
          __p = 0;
          LODWORD(v94) = 0;
          goto LABEL_72;
        }
        if ((v33 & 0x80000000) != 0) {
          sub_19E13D694();
        }
        int v34 = operator new(8 * (int)v33);
        bzero(v34, 8 * (int)v33);
        if (v33 < 8 || (unint64_t)v34 - v32 - 8 * v29 * (int)v33 < 0x20)
        {
          unint64_t v35 = 0;
LABEL_45:
          unint64_t v36 = (int)v33 - v35;
          uint64_t v37 = 8 * v35;
          signed int v38 = (void *)v34 + v35;
          char v39 = (uint64_t *)(v32 + v37 + v83 * (int)v33);
          do
          {
            uint64_t v40 = *v39++;
            *v38++ = v40;
            --v36;
          }
          while (v36);
          goto LABEL_47;
        }
        unint64_t v35 = (int)v33 & 0xFFFFFFFFFFFFFFFCLL;
        uint64_t v74 = (long long *)(v32 + v83 * (int)v33 + 16);
        uint64_t v75 = v34 + 1;
        unint64_t v76 = v35;
        do
        {
          long long v77 = *v74;
          *(v75 - 1) = *(v74 - 1);
          _OWORD *v75 = v77;
          v74 += 2;
          v75 += 2;
          v76 -= 4;
        }
        while (v76);
        if (v35 != (int)v33) {
          goto LABEL_45;
        }
LABEL_47:
        uint64_t v99 = 0;
        size_t v100 = 0;
        uint64_t v101 = 0;
        LODWORD(v102) = v33;
        int v41 = operator new(8 * (int)v33);
        bzero(v41, 8 * (int)v33);
        uint64_t v99 = v41;
        size_t v100 = (char *)v41 + 8 * (int)v33;
        uint64_t v101 = v100;
        if ((v33 - 6) >= 0x7FFFFFFB)
        {
          uint64_t v42 = 0;
LABEL_54:
          uint64_t v47 = v33 - v42;
          uint64_t v48 = v42 << 32;
          do
          {
            *(void *)((char *)v41 + (v48 >> 29)) = *(void *)((char *)v34 + (v48 >> 29));
            v48 += 0x100000000;
            --v47;
          }
          while (v47);
          goto LABEL_56;
        }
        uint64_t v42 = v33 & 0xFFFFFFFC;
        int v43 = v41 + 1;
        uint64_t v44 = v34 + 1;
        uint64_t v45 = v42;
        do
        {
          long long v46 = *v44;
          *(v43 - 1) = *(v44 - 1);
          _OWORD *v43 = v46;
          v43 += 2;
          v44 += 2;
          v45 -= 4;
        }
        while (v45);
        if (v42 != v33) {
          goto LABEL_54;
        }
LABEL_56:
        uint64_t v49 = *(void *)(a1 + 72);
        uint64_t v50 = *(unsigned int *)(a1 + 100);
        double __B = 0.0;
        int v108 = 0;
        uint64_t v109 = 0;
        if (!v50) {
          goto LABEL_68;
        }
        if ((v50 & 0x80000000) != 0) {
          sub_19E13D694();
        }
        uint64_t v51 = operator new(8 * (int)v50);
        bzero(v51, 8 * (int)v50);
        if (v50 < 8 || (unint64_t)v51 - v49 - 8 * v31 * (int)v50 < 0x20)
        {
          unint64_t v52 = 0;
LABEL_61:
          unint64_t v53 = (int)v50 - v52;
          uint64_t v54 = 8 * v52;
          int v55 = (void *)v51 + v52;
          signed int v56 = (uint64_t *)(v49 + v54 + v30 * (int)v50);
          do
          {
            uint64_t v57 = *v56++;
            *v55++ = v57;
            --v53;
          }
          while (v53);
          goto LABEL_63;
        }
        unint64_t v52 = (int)v50 & 0xFFFFFFFFFFFFFFFCLL;
        long long v78 = (long long *)(v49 + v30 * (int)v50 + 16);
        int v79 = v51 + 1;
        unint64_t v80 = v52;
        do
        {
          long long v81 = *v78;
          *(v79 - 1) = *(v78 - 1);
          *int v79 = v81;
          v78 += 2;
          v79 += 2;
          v80 -= 4;
        }
        while (v80);
        if (v52 != (int)v50) {
          goto LABEL_61;
        }
LABEL_63:
        __p = 0;
        v92 = 0;
        unint64_t v93 = 0;
        LODWORD(v94) = v50;
        unsigned __int8 v58 = (char *)operator new(8 * (int)v50);
        bzero(v58, 8 * (int)v50);
        __p = v58;
        v92 = &v58[8 * (int)v50];
        unint64_t v93 = v92;
        if ((v50 - 6) >= 0x7FFFFFFB)
        {
          uint64_t v60 = 0;
LABEL_70:
          uint64_t v63 = v50 - v60;
          uint64_t v64 = v60 << 32;
          do
          {
            *(void *)&v58[v64 >> 29] = *(void *)((char *)v51 + (v64 >> 29));
            v64 += 0x100000000;
            --v63;
          }
          while (v63);
          goto LABEL_72;
        }
        unint64_t v59 = 0;
        uint64_t v60 = v50 & 0xFFFFFFFC;
        do
        {
          long long v61 = v51[v59 / 0x10 + 1];
          long long v62 = &v58[v59];
          *(_OWORD *)long long v62 = v51[v59 / 0x10];
          *((_OWORD *)v62 + 1) = v61;
          v59 += 32;
        }
        while (((8 * v50) & 0x7FFFFFFE0) != v59);
        if (v60 != v50) {
          goto LABEL_70;
        }
LABEL_72:
        uint64_t v65 = (long double *)operator new(0x10uLL);
        long double *v65 = 0.0;
        v65[1] = 0.0;
        double v66 = sub_19E29BC14(a1 + 8, (uint64_t)&v99, (const double **)&__p);
        double v67 = *(double *)(a1 + 24);
        long double v68 = v67 * exp(v66 * -0.5);
        long double *v65 = v68 + v68;
        v65[1] = v68 * v66;
        if (__p)
        {
          v92 = (char *)__p;
          operator delete(__p);
        }
        if (v51) {
          operator delete(v51);
        }
        if (v99)
        {
          size_t v100 = (char *)v99;
          operator delete(v99);
        }
        if (v34) {
          operator delete(v34);
        }
        uint64_t v69 = SHIDWORD(v106);
        unint64_t v70 = v103;
        uint64_t v71 = (double *)operator new(0x10uLL);
        *(_OWORD *)uint64_t v71 = *(_OWORD *)v65;
        if (v29 == v31)
        {
          vDSP_vsmulD(v71, 1, &v70[v29 + v29 * v69], v71, 1, 2uLL);
          uint64_t v72 = (double *)operator new(0x10uLL);
          *(_OWORD *)uint64_t v72 = *(_OWORD *)v71;
          double __B = 0.5;
          vDSP_vsmulD(v72, 1, &__B, v72, 1, 2uLL);
          uint64_t v73 = (double *)operator new(0x10uLL);
          *(_OWORD *)uint64_t v73 = *(_OWORD *)v72;
          vDSP_vaddD(*(const double **)a2, 1, v73, 1, *(double **)a2, 1, 2uLL);
          operator delete(v73);
        }
        else
        {
          vDSP_vsmulD(v71, 1, &v70[v31 + v29 * v69], v71, 1, 2uLL);
          uint64_t v72 = (double *)operator new(0x10uLL);
          *(_OWORD *)uint64_t v72 = *(_OWORD *)v71;
          vDSP_vaddD(*(const double **)a2, 1, v72, 1, *(double **)a2, 1, 2uLL);
        }
        operator delete(v72);
        operator delete(v71);
        operator delete(v65);
        ++v31;
        v30 += 8;
      }
      while (v31 <= v29);
      ++v29;
      v83 += 8;
    }
    while (v29 != v82);
  }
  if (v103)
  {
    uint64_t v104 = v103;
    operator delete(v103);
  }
}

void sub_19E2A745C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (v35) {
    operator delete(v35);
  }
  if (v34) {
    operator delete(v34);
  }
  if (v33) {
    operator delete(v33);
  }
  if (__p)
  {
    operator delete(__p);
    signed int v38 = a16;
    if (!a16)
    {
LABEL_9:
      char v39 = a20;
      if (!a20)
      {
LABEL_14:
        uint64_t v40 = *(void **)(v36 - 184);
        if (v40)
        {
          *(void *)(v36 - 176) = v40;
          operator delete(v40);
        }
        _Unwind_Resume(exception_object);
      }
LABEL_13:
      operator delete(v39);
      goto LABEL_14;
    }
  }
  else
  {
    signed int v38 = a16;
    if (!a16) {
      goto LABEL_9;
    }
  }
  operator delete(v38);
  char v39 = a20;
  if (!a20) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_19E2A75F4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  operator delete(v34);
  if (__p)
  {
    operator delete(__p);
    if (!v35)
    {
LABEL_3:
      uint64_t v36 = a32;
      if (!a32) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if (!v35)
  {
    goto LABEL_3;
  }
  operator delete(v35);
  uint64_t v36 = a32;
  if (!a32)
  {
LABEL_4:
    if (v33) {
      goto LABEL_12;
    }
    goto LABEL_13;
  }
LABEL_8:
  operator delete(v36);
  if (v33) {
LABEL_12:
  }
    JUMPOUT(0x19E2A75A0);
LABEL_13:
  JUMPOUT(0x19E2A75A4);
}

uint64_t sub_19E2A7650(uint64_t a1, int *a2)
{
  int v4 = *a2;
  *(unsigned char *)(a1 + 4) = *((unsigned char *)a2 + 4);
  *(_DWORD *)a1 = v4;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 2);
  long long v5 = *(_OWORD *)(a2 + 6);
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = v5;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  unint64_t v7 = (unsigned char *)*((void *)a2 + 5);
  uint64_t v6 = (unsigned char *)*((void *)a2 + 6);
  int64_t v8 = v6 - v7;
  if (v6 != v7)
  {
    if (v8 < 0) {
      sub_19E13D694();
    }
    int64_t v9 = (char *)operator new(v6 - v7);
    *(void *)(a1 + 40) = v9;
    *(void *)(a1 + 48) = v9;
    unint64_t v10 = &v9[8 * (v8 >> 3)];
    *(void *)(a1 + 56) = v10;
    memcpy(v9, v7, v8);
    *(void *)(a1 + 48) = v10;
  }
  int v11 = a2[16];
  *(void *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 64) = v11;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  int64_t v13 = (unsigned char *)*((void *)a2 + 9);
  uint64_t v12 = (unsigned char *)*((void *)a2 + 10);
  int64_t v14 = v12 - v13;
  if (v12 != v13)
  {
    if (v14 < 0) {
      sub_19E13D694();
    }
    vDSP_Length v15 = (char *)operator new(v12 - v13);
    *(void *)(a1 + 72) = v15;
    *(void *)(a1 + 80) = v15;
    unint64_t v16 = &v15[8 * (v14 >> 3)];
    *(void *)(a1 + 88) = v16;
    memcpy(v15, v13, v14);
    *(void *)(a1 + 80) = v16;
  }
  uint64_t v17 = *((void *)a2 + 12);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 96) = v17;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  int64_t v19 = (unsigned char *)*((void *)a2 + 13);
  vDSP_Length v18 = (unsigned char *)*((void *)a2 + 14);
  int64_t v20 = v18 - v19;
  if (v18 != v19)
  {
    if (v20 < 0) {
      sub_19E13D694();
    }
    uint64_t v21 = (char *)operator new(v18 - v19);
    *(void *)(a1 + 104) = v21;
    *(void *)(a1 + 112) = v21;
    uint64_t v22 = &v21[8 * (v20 >> 3)];
    *(void *)(a1 + 120) = v22;
    memcpy(v21, v19, v20);
    *(void *)(a1 + 112) = v22;
  }
  int v23 = a2[32];
  *(void *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 128) = v23;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  unint64_t v25 = (unsigned char *)*((void *)a2 + 17);
  uint64_t v24 = (unsigned char *)*((void *)a2 + 18);
  int64_t v26 = v24 - v25;
  if (v24 != v25)
  {
    if (v26 < 0) {
      sub_19E13D694();
    }
    uint64_t v27 = (char *)operator new(v24 - v25);
    *(void *)(a1 + 136) = v27;
    *(void *)(a1 + 144) = v27;
    long long v28 = &v27[8 * (v26 >> 3)];
    *(void *)(a1 + 152) = v28;
    memcpy(v27, v25, v26);
    *(void *)(a1 + 144) = v28;
  }
  uint64_t v29 = *((void *)a2 + 20);
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 160) = v29;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  unint64_t v31 = (unsigned char *)*((void *)a2 + 21);
  uint64_t v30 = (unsigned char *)*((void *)a2 + 22);
  int64_t v32 = v30 - v31;
  if (v30 != v31)
  {
    if (v32 < 0) {
      sub_19E13D694();
    }
    uint64_t v33 = (char *)operator new(v30 - v31);
    *(void *)(a1 + 168) = v33;
    *(void *)(a1 + 176) = v33;
    int v34 = &v33[8 * (v32 >> 3)];
    *(void *)(a1 + 184) = v34;
    memcpy(v33, v31, v32);
    *(void *)(a1 + 176) = v34;
  }
  uint64_t v35 = *((void *)a2 + 24);
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 192) = v35;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  uint64_t v37 = (unsigned char *)*((void *)a2 + 25);
  uint64_t v36 = (unsigned char *)*((void *)a2 + 26);
  int64_t v38 = v36 - v37;
  if (v36 != v37)
  {
    if (v38 < 0) {
      sub_19E13D694();
    }
    char v39 = (char *)operator new(v36 - v37);
    *(void *)(a1 + 200) = v39;
    *(void *)(a1 + 208) = v39;
    uint64_t v40 = &v39[8 * (v38 >> 3)];
    *(void *)(a1 + 216) = v40;
    memcpy(v39, v37, v38);
    *(void *)(a1 + 208) = v40;
  }
  uint64_t v41 = *((void *)a2 + 28);
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 224) = v41;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  int v43 = (unsigned char *)*((void *)a2 + 29);
  uint64_t v42 = (unsigned char *)*((void *)a2 + 30);
  int64_t v44 = v42 - v43;
  if (v42 != v43)
  {
    if (v44 < 0) {
      sub_19E13D694();
    }
    uint64_t v45 = (char *)operator new(v42 - v43);
    *(void *)(a1 + 232) = v45;
    *(void *)(a1 + 240) = v45;
    long long v46 = &v45[8 * (v44 >> 3)];
    *(void *)(a1 + 248) = v46;
    memcpy(v45, v43, v44);
    *(void *)(a1 + 240) = v46;
  }
  *(_DWORD *)(a1 + 256) = a2[64];
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 264) = 0;
  uint64_t v48 = (unsigned char *)*((void *)a2 + 33);
  uint64_t v47 = (unsigned char *)*((void *)a2 + 34);
  int64_t v49 = v47 - v48;
  if (v47 != v48)
  {
    if (v49 < 0) {
      sub_19E13D694();
    }
    uint64_t v50 = (char *)operator new(v47 - v48);
    *(void *)(a1 + 264) = v50;
    *(void *)(a1 + 272) = v50;
    uint64_t v51 = &v50[8 * (v49 >> 3)];
    *(void *)(a1 + 280) = v51;
    memcpy(v50, v48, v49);
    *(void *)(a1 + 272) = v51;
  }
  *(_DWORD *)(a1 + 288) = a2[72];
  return a1;
}

void sub_19E2A7988(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10)
{
  vDSP_Length v18 = *v11;
  if (*v11)
  {
    v10[34] = v18;
    operator delete(v18);
    int64_t v19 = *v16;
    if (!*v16)
    {
LABEL_3:
      int64_t v20 = *v15;
      if (!*v15) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else
  {
    int64_t v19 = *v16;
    if (!*v16) {
      goto LABEL_3;
    }
  }
  v10[30] = v19;
  operator delete(v19);
  int64_t v20 = *v15;
  if (!*v15)
  {
LABEL_4:
    uint64_t v21 = *v14;
    if (!*v14) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  v10[26] = v20;
  operator delete(v20);
  uint64_t v21 = *v14;
  if (!*v14)
  {
LABEL_5:
    uint64_t v22 = *v13;
    if (!*v13) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  v10[22] = v21;
  operator delete(v21);
  uint64_t v22 = *v13;
  if (!*v13)
  {
LABEL_6:
    int v23 = *v12;
    if (!*v12) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  v10[18] = v22;
  operator delete(v22);
  int v23 = *v12;
  if (!*v12)
  {
LABEL_7:
    uint64_t v24 = *a9;
    if (!*a9) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_17:
  v10[14] = v23;
  operator delete(v23);
  uint64_t v24 = *a9;
  if (!*a9)
  {
LABEL_9:
    unint64_t v25 = *a10;
    if (*a10)
    {
      v10[6] = v25;
      operator delete(v25);
    }
    _Unwind_Resume(exception_object);
  }
LABEL_8:
  v10[10] = v24;
  operator delete(v24);
  goto LABEL_9;
}

void sub_19E2A7AA4()
{
  if (!*v0) {
    JUMPOUT(0x19E2A79D0);
  }
  JUMPOUT(0x19E2A79C8);
}

void sub_19E2A7AB4()
{
  if (!*v0) {
    JUMPOUT(0x19E2A79E4);
  }
  JUMPOUT(0x19E2A79DCLL);
}

void sub_19E2A7AC4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = *(_DWORD *)(a1 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  if (v4)
  {
    if (v4 < 0) {
      sub_19E13D694();
    }
    long long v5 = (char *)operator new(8 * v4);
    *(void *)a2 = v5;
    *(void *)(a2 + 16) = &v5[8 * v4];
    bzero(v5, 8 * v4);
    *(void *)(a2 + 8) = &v5[8 * v4];
  }
  else
  {
    long long v5 = 0;
  }
  *(_DWORD *)(a2 + 24) = v4;
  int v6 = v4;
  vvlog((double *)v5, *(const double **)a1, &v6);
}

void sub_19E2A7B70(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2A7B8C(void *a1)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  sub_19E13A9BC(a1);
}

void sub_19E2A7BA8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6 = *(_DWORD *)(a1 + 24);
  int v7 = *(_DWORD *)(a2 + 24);
  int v8 = v7 * v6;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  if (v7 * v6)
  {
    uint64_t v9 = v8;
    if (v8 < 0) {
      sub_19E13D694();
    }
    size_t v10 = 8 * v8;
    int v11 = (char *)operator new(v10);
    *(void *)a3 = v11;
    *(void *)(a3 + 16) = &v11[8 * v9];
    bzero(v11, 8 * v9);
    *(void *)(a3 + 8) = &v11[v10];
  }
  else
  {
    int v11 = 0;
  }
  *(_DWORD *)(a3 + 24) = v6;
  *(_DWORD *)(a3 + 28) = v7;
  vDSP_mmulD(*(const double **)a1, 1, *(const double **)a2, 1, (double *)v11, 1, v6, v7, 1uLL);
}

void sub_19E2A7C80(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2A7C9C(void *a1)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  sub_19E13A9BC(a1);
}

void sub_19E2A7CB8(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32))
  {
    if (*(unsigned char *)(a1 + 32))
    {
      if (a1 != a2) {
        sub_19E1E5B9C((void *)a1, *(char **)a2, *(char **)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
      }
      *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
    }
  }
  else if (*(unsigned char *)(a1 + 32))
  {
    int v4 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v4;
      operator delete(v4);
    }
    *(unsigned char *)(a1 + 32) = 0;
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    int v6 = *(char **)a2;
    uint64_t v5 = *(void *)(a2 + 8);
    int64_t v7 = v5 - *(void *)a2;
    if (v5 != *(void *)a2)
    {
      if (v7 < 0) {
        sub_19E13D694();
      }
      int v8 = (char *)operator new(v5 - *(void *)a2);
      *(void *)a1 = v8;
      *(void *)(a1 + 8) = v8;
      uint64_t v9 = &v8[8 * (v7 >> 3)];
      *(void *)(a1 + 16) = v9;
      memcpy(v8, v6, v7);
      *(void *)(a1 + 8) = v9;
    }
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
    *(unsigned char *)(a1 + 32) = 1;
  }
}

void sub_19E2A7DC0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2A7DDC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_19E29DB84((uint64_t ***)&v12, (uint64_t **)(a1 + 8));
  sub_19E29DB84((uint64_t ***)&__p, (uint64_t **)&v12);
  uint64_t v3 = (double *)__p;
  int v4 = (char **)((char *)__p + 104);
  if (__p != v15 && v4 != v15)
  {
    do
    {
      if (v3[12] < *((double *)v4 + 12)) {
        uint64_t v3 = (double *)v4;
      }
      v4 += 13;
    }
    while (v4 != v15);
  }
  sub_19E291E68((uint64_t **)a2, (uint64_t *)v3);
  *(double *)(a2 + 96) = v3[12];
  int v6 = (char **)__p;
  if (__p)
  {
    int64_t v7 = v15;
    int v8 = __p;
    if (v15 != __p)
    {
      do
        int64_t v7 = sub_19E2470C8(v7 - 13);
      while (v7 != v6);
      int v8 = __p;
    }
    vDSP_Length v15 = v6;
    operator delete(v8);
  }
  uint64_t v9 = (char **)v12;
  if (v12)
  {
    size_t v10 = v13;
    int v11 = v12;
    if (v13 != v12)
    {
      do
        size_t v10 = sub_19E2470C8(v10 - 13);
      while (v10 != v9);
      int v11 = v12;
    }
    int64_t v13 = v9;
    operator delete(v11);
  }
}

void sub_19E2A7ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

BOOL sub_19E2A7EE4(uint64_t a1, _DWORD *a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Early stopping already requested.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  BOOL v2 = *a2 >= *(_DWORD *)(a1 + 12);
  *(unsigned char *)(a1 + 8) = v2;
  return v2;
}

void sub_19E2A7F58(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_19E2A7F6C(uint64_t a1, int *a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Early stopping already requested.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v3 = *(_DWORD *)(a1 + 12);
  if (v3 == -1) {
    return 0;
  }
  int v6 = *a2;
  uint64_t v5 = (uint64_t)(a2 + 2);
  if (v6 == 1 || *(double *)(a1 + 120) < *((double *)a2 + 13) - *(double *)(a1 + 16))
  {
    sub_19E29AB9C(a1 + 24, v5);
    *(void *)(a1 + 120) = *((void *)a2 + 13);
    *(_DWORD *)(a1 + 128) = 0;
    *(unsigned char *)(a1 + 8) = 0;
    return 0;
  }
  else
  {
    int v8 = *(_DWORD *)(a1 + 128);
    *(_DWORD *)(a1 + 128) = v8 + 1;
    BOOL v9 = v8 >= v3;
    *(unsigned char *)(a1 + 8) = v9;
    return v9;
  }
}

void sub_19E2A8060(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19E2A8074()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = &unk_1EF0ABDB8;
  __cxa_throw(exception, (struct type_info *)&unk_1EF0A4DB0, (void (*)(void *))std::exception::~exception);
}

void sub_19E2A80C4(std::exception *a1)
{
  std::exception::~exception(a1);

  operator delete(v1);
}

char **sub_19E2A80EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5 = *(_DWORD *)(a1 + 56);
  int v6 = *(_DWORD *)(a1 + 60);
  uint64_t v7 = *(void *)(a1 + 64);
  char v30 = 0;
  uint64_t v29 = (char *)&unk_1EF0A86A8;
  int v31 = v5;
  v21[0] = 0;
  *(_DWORD *)uint64_t v22 = v6;
  *(void *)&v22[4] = v7;
  memset(v23, 0, sizeof(v23));
  uint64_t v24 = v25;
  v25[0] = 0;
  double v26 = 0.0;
  v27[0] = 0;
  v25[1] = 0;
  v25[2] = &v26;
  int v28 = 0;
  char v33 = 0;
  int64_t v32 = (uint64_t (**)(void **, void **))&unk_1EF0A86A8;
  int v34 = v5;
  char v36 = 0;
  uint64_t v35 = (uint64_t (**)(void **, void **))&unk_1EF0A86C0;
  int v38 = HIDWORD(v7);
  uint64_t v37 = *(void *)v22;
  sub_19E2965D0(v39, (uint64_t)v23);
  v39[12] = (uint64_t *)v27[1];
  int v40 = v28;
  int64_t v20 = &unk_1EF0A86C0;
  sub_19E2470C8((char **)v23);
  int v8 = *(_DWORD *)(a1 + 72);
  (*(void (**)(char **__return_ptr))(**(void **)(a1 + 120) + 16))(&v29);
  uint64_t v9 = *(void *)(a2 + 24);
  if (!v9) {
    goto LABEL_16;
  }
  double v10 = (*(double (**)(uint64_t, char **))(*(void *)v9 + 48))(v9, &v29);
  (*(void (**)(void, char **))(**(void **)(a1 + 120) + 24))(*(void *)(a1 + 120), &v29);
  std::chrono::steady_clock::now();
  LODWORD(v20) = 1;
  sub_19E291E68((uint64_t **)v21, (uint64_t *)&v29);
  double v26 = v10;
  sub_19E2A7DDC(*(void *)(a1 + 120), (uint64_t)v27);
  if (1 % v8) {
    goto LABEL_5;
  }
  uint64_t v11 = *(void *)(a2 + 56);
  if (!v11) {
LABEL_17:
  }
    sub_19E2A8074();
  if (((*(uint64_t (**)(uint64_t, void **))(*(void *)v11 + 48))(v11, &v20) & 1) == 0)
  {
LABEL_5:
    if (((*v32)((void **)&v32, &v20) & 1) == 0)
    {
      char v12 = (*v35)((void **)&v35, &v20);
      sub_19E2470C8(v27);
      sub_19E2470C8((char **)v21);
      sub_19E2470C8(&v29);
      if (v12) {
        goto LABEL_15;
      }
      int v13 = 2;
      while (1)
      {
        (*(void (**)(char **__return_ptr))(**(void **)(a1 + 120) + 16))(&v29);
        uint64_t v14 = *(void *)(a2 + 24);
        if (!v14) {
          break;
        }
        double v15 = (*(double (**)(uint64_t, char **))(*(void *)v14 + 48))(v14, &v29);
        (*(void (**)(void, char **))(**(void **)(a1 + 120) + 24))(*(void *)(a1 + 120), &v29);
        std::chrono::steady_clock::now();
        std::chrono::steady_clock::now();
        LODWORD(v20) = v13;
        sub_19E291E68((uint64_t **)v21, (uint64_t *)&v29);
        double v26 = v15;
        sub_19E2A7DDC(*(void *)(a1 + 120), (uint64_t)v27);
        if (!(v13 % v8))
        {
          uint64_t v16 = *(void *)(a2 + 56);
          if (!v16) {
            goto LABEL_17;
          }
          if ((*(uint64_t (**)(uint64_t, void **))(*(void *)v16 + 48))(v16, &v20)) {
            goto LABEL_6;
          }
        }
        if ((*v32)((void **)&v32, &v20)) {
          goto LABEL_6;
        }
        char v17 = (*v35)((void **)&v35, &v20);
        sub_19E2470C8(v27);
        sub_19E2470C8((char **)v21);
        sub_19E2470C8(&v29);
        ++v13;
        if (v17) {
          goto LABEL_15;
        }
      }
LABEL_16:
      sub_19E2A8074();
    }
  }
LABEL_6:
  sub_19E2470C8(v27);
  sub_19E2470C8((char **)v21);
  sub_19E2470C8(&v29);
LABEL_15:
  sub_19E2A7DDC(*(void *)(a1 + 120), a3);
  uint64_t v35 = (uint64_t (**)(void **, void **))&unk_1EF0A86C0;
  return sub_19E2470C8((char **)v39);
}

void sub_19E2A859C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char *a39)
{
  sub_19E2470C8(v41);
  sub_19E2470C8(v40);
  sub_19E2470C8(&a39);
  *(void *)(v42 - 240) = a11;
  sub_19E2470C8(v39);
  _Unwind_Resume(a1);
}

void sub_19E2A8624(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 48);
  if (v1 != 1)
  {
    if (!v1) {
      sub_19E29849C();
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_19E298774(exception, "Invalid optimizer in user config.");
    __cxa_throw(exception, (struct type_info *)off_1E599CD18, MEMORY[0x1E4FBA1E8]);
  }
  sub_19E2A86D8();
}

void sub_19E2A86C4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19E2A86D8()
{
}

void sub_19E2A8814(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E2934EC((uint64_t)va);
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_19E2A8830(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E2A8844(uint64_t a1, uint64_t *a2)
{
  sub_19E2933F8((uint64_t)&v16, (uint64_t)a2);
  *(void *)a1 = &unk_1EF0A8318;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  sub_19E2933F8(a1 + 32, (uint64_t)&v16);
  if (v22)
  {
    int v4 = (char **)__p;
    if (__p)
    {
      int v5 = v21;
      int v6 = __p;
      if (v21 != __p)
      {
        do
          int v5 = sub_19E2470C8(v5 - 12);
        while (v5 != v4);
        int v6 = __p;
      }
      uint64_t v21 = v4;
      operator delete(v6);
    }
  }
  uint64_t v7 = (void **)v18;
  if (v18)
  {
    int v8 = v19;
    uint64_t v9 = v18;
    if (v19 != v18)
    {
      do
      {
        if (*((char *)v8 - 17) < 0) {
          operator delete(*(v8 - 5));
        }
        v8 -= 5;
      }
      while (v8 != v7);
      uint64_t v9 = v18;
    }
    int64_t v19 = v7;
    operator delete(v9);
  }
  double v10 = (void **)v16;
  if (v16)
  {
    uint64_t v11 = v17;
    char v12 = v16;
    if (v17 != v16)
    {
      do
      {
        if (*((char *)v11 - 25) < 0) {
          operator delete(*(v11 - 6));
        }
        v11 -= 6;
      }
      while (v11 != v10);
      char v12 = v16;
    }
    char v17 = v10;
    operator delete(v12);
  }
  *(void *)a1 = &unk_1EF0A84F8;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  int v13 = sub_19E244298(a2);
  int v14 = sub_19E244DC4((uint64_t)a2);
  *(_DWORD *)(a1 + 176) = v14 + v13;
  *(void *)(a1 + 184) = v14 + v13;
  *(_OWORD *)(a1 + 192) = xmmword_19E351FD0;
  *(void *)(a1 + 208) = 0x3FF0000000000000;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 240) = 0;
  double v15 = operator new(0x10uLL);
  *(void *)(a1 + 216) = v15;
  *(void *)(a1 + 224) = v15 + 2;
  *(void *)(a1 + 232) = v15 + 2;
  *(_DWORD *)(a1 + 240) = 2;
  *double v15 = 0;
  v15[1] = 0;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  *(void *)(a1 + 440) = 0;
  *(_DWORD *)(a1 + 464) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 292) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 420) = 0u;
  *(void *)(a1 + 488) = a1 + 176;
  *(void *)(a1 + 496) = 0;
  *(_DWORD *)(a1 + 520) = 0;
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  *(_DWORD *)(a1 + 536) = -1;
  *(void *)(a1 + 480) = &unk_1EF0A7E08;
  *(void *)(a1 + 544) = 0;
  *(void *)(a1 + 560) = 0;
  sub_19E299010(a1 + 568);
  *(void *)(a1 + 10688) = 0;
  *(_OWORD *)(a1 + 10672) = 0u;
  if ((int)sub_19E244DC4(a1 + 32) >= 1) {
    sub_19E2A9000();
  }
  sub_19E2A91B0();
}

void sub_19E2A8EEC(_Unwind_Exception *a1)
{
  sub_19E2462FC(v6);
  sub_19E298A78(v5);
  int v8 = (void **)(v1 + 62);
  uint64_t v9 = v1[70];
  v1[70] = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  void *v4 = &unk_1EF0A7CA0;
  double v10 = *v8;
  if (*v8)
  {
    v1[63] = v10;
    operator delete(v10);
  }
  sub_19E2A3E04(v3);
  sub_19E29AC3C(v2);
  sub_19E298AC8(v1);
  _Unwind_Resume(a1);
}

void sub_19E2A9000()
{
}

void sub_19E2A915C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_19E245FE8(&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_19E2A9178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
  {
    sub_19E32FAD8((uint64_t)&a9, a9);
    operator delete(v9);
    _Unwind_Resume(a1);
  }
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_19E2A91B0()
{
}

void sub_19E2A930C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_19E245FE8(&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_19E2A9328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
  {
    sub_19E32FAD8((uint64_t)&a9, a9);
    operator delete(v9);
    _Unwind_Resume(a1);
  }
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_19E2A9364(uint64_t a1)
{
  int v1 = (void *)sub_19E2AD1A4(a1);

  operator delete(v1);
}

uint64_t **sub_19E2A938C@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X8>)
{
  uint64_t v4 = a1 + 8;
  unint64_t v5 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3);
  uint64_t v6 = a1 + 32;
  int v7 = sub_19E244298((uint64_t *)(a1 + 32));
  signed int v8 = 5 * (sub_19E244DC4(v6) + v7);
  if (*(unsigned char *)(v4 + 136) && v8 <= (int)(-1431655765 * ((*(void *)(a1 + 128) - *(void *)(a1 + 120)) >> 5))) {
    signed int v8 = -1431655765 * ((*(void *)(a1 + 128) - *(void *)(a1 + 120)) >> 5);
  }
  if (v5 >= v8)
  {
    (*(void (**)(char **__return_ptr))(**(void **)(a1 + 560) + 16))(v11);
    sub_19E291E68(a2, (uint64_t *)v11);
    return (uint64_t **)sub_19E2470C8(v11);
  }
  else
  {
    uint64_t v9 = (uint64_t *)(*(void *)(a1 + 10672)
                   + 96 * (int)(-991146299 * ((*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3)));
    return sub_19E291E68(a2, v9);
  }
}

void sub_19E2A94D0(uint64_t a1, long long **a2, double a3)
{
  sub_19E29CE6C(a2, (uint64_t)&__p);
  double v5 = sub_19E2AB5F4(a1 + 176, (const double **)&__p);
  double v7 = sqrt(v6);
  double v23 = v7;
  double v24 = v5;
  double v8 = v5 - (*(double *)(a1 + 528) + *(double *)(a1 + 544));
  double v9 = v8 / v7;
  long double v10 = erfc(v8 / v7 * -0.707106781) * (0.5 * v8);
  double v11 = v10 + v7 * 0.39894228 * exp(v9 * v9 * -0.5);
  double v22 = v11;
  unint64_t v12 = *(void *)(a1 + 160);
  if (v12 >= *(void *)(a1 + 168))
  {
    uint64_t v17 = sub_19E2A4064((uint64_t *)(a1 + 152), (uint64_t)&__p, &v24, (uint64_t *)&v23, (uint64_t *)&v22);
  }
  else
  {
    *(void *)unint64_t v12 = 0;
    *(void *)(v12 + 8) = 0;
    *(void *)(v12 + 16) = 0;
    int v13 = __p;
    int64_t v14 = v26 - (unsigned char *)__p;
    if (v26 != __p)
    {
      if (v14 < 0) {
        sub_19E13D694();
      }
      double v15 = (char *)operator new(v26 - (unsigned char *)__p);
      *(void *)unint64_t v12 = v15;
      *(void *)(v12 + 8) = v15;
      uint64_t v16 = &v15[8 * (v14 >> 3)];
      *(void *)(v12 + 16) = v16;
      memcpy(v15, v13, v14);
      *(void *)(v12 + 8) = v16;
    }
    *(_DWORD *)(v12 + 24) = v27;
    *(double *)(v12 + 32) = v5;
    *(double *)(v12 + 40) = v7;
    *(double *)(v12 + 48) = v11;
    uint64_t v17 = v12 + 56;
    *(void *)(a1 + 160) = v12 + 56;
  }
  *(void *)(a1 + 160) = v17;
  uint64_t v18 = *(int *)(a1 + 464);
  uint64_t v19 = v18 + 1;
  *(_DWORD *)(a1 + 464) = v18 + 1;
  uint64_t v20 = *(void *)(a1 + 440);
  unint64_t v21 = (*(void *)(a1 + 448) - v20) >> 3;
  if (v18 + 1 <= v21)
  {
    if (v18 + 1 < v21) {
      *(void *)(a1 + 448) = v20 + 8 * v18 + 8;
    }
  }
  else
  {
    sub_19E2482DC(a1 + 440, v18 + 1 - v21);
    uint64_t v19 = *(int *)(a1 + 464);
    uint64_t v20 = *(void *)(a1 + 440);
  }
  *(double *)(v20 + 8 * v19 - 8) = a3;
  sub_19E2AD360(a1 + 176, (uint64_t)&__p);
  sub_19E2AE538(a1 + 472, a1 + 176);
}

void sub_19E2A9704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, char *a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

long double sub_19E2A9750(uint64_t a1, double a2, double a3)
{
  double v4 = a2 - (*(double *)(a1 + 48) + *(double *)(a1 + 64));
  double v5 = v4 / a3;
  long double v6 = erfc(v4 / a3 * -0.707106781) * (0.5 * v4);
  return v6 + a3 * 0.39894228 * exp(v5 * v5 * -0.5);
}

double sub_19E2A97C8()
{
  return 0.0;
}

void sub_19E2A97D0(uint64_t a1)
{
  uint64_t v104 = 0;
  uint64_t v105 = 0;
  unint64_t v106 = 0;
  int v1 = *(void **)(a1 + 8);
  uint64_t v101 = 0;
  unint64_t v102 = 0;
  size_t v100 = 0;
  int v3 = (unsigned char *)v1[9];
  BOOL v2 = (unsigned char *)v1[10];
  int64_t v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0) {
      sub_19E13D694();
    }
    double v5 = (char *)operator new(v2 - v3);
    long double v6 = &v5[8 * (v4 >> 3)];
    size_t v100 = v5;
    unint64_t v102 = v6;
    memcpy(v5, v3, v4);
    uint64_t v101 = v6;
  }
  uint64_t v7 = v1[12];
  uint64_t v103 = v7;
  if (!v7)
  {
    int v55 = 0;
    unsigned __int8 v58 = 0;
    *(_DWORD *)(a1 + 56) = 0;
    long long v62 = v100;
    signed int v63 = HIDWORD(v103);
    long long v107 = 0;
    int v108 = 0;
    uint64_t v109 = 0;
    if (HIDWORD(v103)) {
      goto LABEL_65;
    }
    goto LABEL_81;
  }
  uint64_t v8 = 0;
  double v9 = 0;
  long double v10 = 0;
  double v11 = 0;
  uint64_t v12 = 0;
  uint64_t v90 = (int)v7;
  uint64_t v91 = v7;
  size_t v13 = 8 * (v7 >> 32);
  uint64_t v88 = v7 >> 32;
  size_t v89 = v13;
  unint64_t v87 = (v7 >> 32) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v93 = HIDWORD(v7);
  uint64_t v94 = 16;
  do
  {
    uint64_t v14 = *(void *)(a1 + 8);
    double v15 = v100;
    __p = 0;
    *(void *)long long v96 = 0;
    uint64_t v97 = 0;
    if (!v93)
    {
      uint64_t v16 = 0;
      int v108 = 0;
      uint64_t v109 = 0;
      long long v107 = 0;
      unsigned int v110 = 0;
      goto LABEL_27;
    }
    if (v7 < 0) {
      sub_19E13D694();
    }
    uint64_t v16 = operator new(v13);
    bzero(v16, v13);
    if ((unint64_t)v7 >> 33 < 3)
    {
      unint64_t v17 = 0;
      unint64_t v18 = v88;
      goto LABEL_17;
    }
    unint64_t v18 = v88;
    if ((unint64_t)((char *)v16 - &v100[v13 * v12]) < 0x20)
    {
      unint64_t v17 = 0;
LABEL_17:
      unint64_t v23 = v18 - v17;
      uint64_t v24 = 8 * v17;
      unint64_t v25 = (void *)v16 + v17;
      double v26 = (uint64_t *)&v15[v8 + v24];
      do
      {
        uint64_t v27 = *v26++;
        *v25++ = v27;
        --v23;
      }
      while (v23);
      goto LABEL_19;
    }
    uint64_t v19 = (long long *)&v100[v94];
    uint64_t v20 = v16 + 1;
    unint64_t v21 = v87;
    do
    {
      long long v22 = *v19;
      *(v20 - 1) = *(v19 - 1);
      *uint64_t v20 = v22;
      v19 += 2;
      v20 += 2;
      v21 -= 4;
    }
    while (v21);
    unint64_t v17 = v87;
    if (v88 != v87) {
      goto LABEL_17;
    }
LABEL_19:
    long long v107 = 0;
    int v108 = 0;
    uint64_t v109 = 0;
    unsigned int v110 = v93;
    sub_19E2482DC((uint64_t)&v107, v18);
    uint64_t v28 = v110;
    if ((int)v110 >= 1)
    {
      uint64_t v29 = 0;
      char v30 = v107;
      if (v110 < 4) {
        goto LABEL_25;
      }
      if ((unint64_t)((char *)v107 - (char *)v16) < 0x20) {
        goto LABEL_25;
      }
      unint64_t v31 = 0;
      uint64_t v29 = v110 & 0xFFFFFFFC;
      uint64_t v32 = (8 * v110) & 0x7FFFFFFE0;
      do
      {
        long long v33 = v16[v31 / 0x10 + 1];
        int v34 = (double *)&v30[v31 / 8];
        *(_OWORD *)int v34 = v16[v31 / 0x10];
        *((_OWORD *)v34 + 1) = v33;
        v31 += 32;
      }
      while (v32 != v31);
      if (v29 != v28)
      {
LABEL_25:
        uint64_t v35 = v28 - v29;
        uint64_t v36 = v29 << 32;
        do
        {
          *(const double *)((char *)v30 + (v36 >> 29)) = *(const double *)((char *)v16 + (v36 >> 29));
          v36 += 0x100000000;
          --v35;
        }
        while (v35);
      }
    }
LABEL_27:
    double v37 = sub_19E2A9FA4(v14, (const double **)&v107);
    double v38 = v37;
    if (v11 < v10)
    {
      *v11++ = v37;
      uint64_t v7 = v91;
      size_t v13 = v89;
      uint64_t v105 = (uint64_t)v11;
      char v39 = v107;
      if (!v107) {
        goto LABEL_30;
      }
LABEL_29:
      int v108 = v39;
      operator delete(v39);
      goto LABEL_30;
    }
    uint64_t v40 = v11 - v9;
    unint64_t v41 = v40 + 1;
    if ((unint64_t)(v40 + 1) >> 61) {
      sub_19E13D694();
    }
    if (((char *)v10 - (char *)v9) >> 2 > v41) {
      unint64_t v41 = ((char *)v10 - (char *)v9) >> 2;
    }
    if ((unint64_t)((char *)v10 - (char *)v9) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v42 = v41;
    }
    if (v42)
    {
      if (v42 >> 61) {
        sub_19E13C418();
      }
      int v43 = operator new(8 * v42);
      int64_t v44 = (double *)&v43[8 * v40];
      double *v44 = v38;
      uint64_t v45 = (uint64_t)(v44 + 1);
      if (v11 != v9)
      {
LABEL_41:
        unint64_t v46 = (char *)(v11 - 1) - (char *)v9;
        if (v46 < 0x168
          || &v43[(char *)v11 - (char *)v9 - 8 - (v46 & 0xFFFFFFFFFFFFFFF8)] > &v43[(char *)v11 - (char *)v9 - 8]
          || (double *)((char *)v11 - (v46 & 0xFFFFFFFFFFFFFFF8) - 8) > v11 - 1
          || (unint64_t)((char *)v9 - v43) < 0x20)
        {
          uint64_t v47 = v11;
          uint64_t v7 = v91;
          size_t v13 = v89;
        }
        else
        {
          uint64_t v49 = (v46 >> 3) + 1;
          uint64_t v50 = 8 * (v49 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v47 = &v11[v50 / 0xFFFFFFFFFFFFFFF8];
          int64_t v44 = (double *)((char *)v44 - v50);
          uint64_t v51 = &v43[8 * v40 - 16];
          unint64_t v52 = v11 - 2;
          uint64_t v53 = v49 & 0x3FFFFFFFFFFFFFFCLL;
          uint64_t v7 = v91;
          do
          {
            long long v54 = *(_OWORD *)v52;
            *(v51 - 1) = *((_OWORD *)v52 - 1);
            *uint64_t v51 = v54;
            v51 -= 2;
            v52 -= 4;
            v53 -= 4;
          }
          while (v53);
          size_t v13 = v89;
          if (v49 == (v49 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_44:
            long double v10 = (double *)&v43[8 * v42];
            uint64_t v104 = v44;
            uint64_t v105 = v45;
            unint64_t v106 = v10;
            if (!v9) {
              goto LABEL_46;
            }
LABEL_45:
            operator delete(v9);
            goto LABEL_46;
          }
        }
        do
        {
          uint64_t v48 = *((void *)v47-- - 1);
          *((void *)v44-- - 1) = v48;
        }
        while (v47 != v9);
        goto LABEL_44;
      }
    }
    else
    {
      int v43 = 0;
      int64_t v44 = (double *)(8 * v40);
      *(double *)(8 * v40) = v37;
      uint64_t v45 = 8 * v40 + 8;
      if (v11 != v9) {
        goto LABEL_41;
      }
    }
    uint64_t v7 = v91;
    size_t v13 = v89;
    long double v10 = (double *)&v43[8 * v42];
    uint64_t v104 = v44;
    uint64_t v105 = v45;
    unint64_t v106 = v10;
    if (v9) {
      goto LABEL_45;
    }
LABEL_46:
    double v9 = v44;
    double v11 = (double *)v45;
    uint64_t v105 = v45;
    char v39 = v107;
    if (v107) {
      goto LABEL_29;
    }
LABEL_30:
    if (v16) {
      operator delete(v16);
    }
    ++v12;
    v94 += v13;
    v8 += v13;
  }
  while (v12 != v90);
  int v55 = v104;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)(a1 + 8) + 96);
  if (v55 == v11)
  {
    unsigned __int8 v58 = v55;
    long long v62 = v100;
    signed int v63 = HIDWORD(v103);
    long long v107 = 0;
    int v108 = 0;
    uint64_t v109 = 0;
    if (HIDWORD(v103)) {
      goto LABEL_65;
    }
    goto LABEL_81;
  }
  signed int v56 = v55 + 1;
  if (v55 + 1 == v11)
  {
    unsigned __int8 v58 = v55;
    long long v62 = v100;
    signed int v63 = HIDWORD(v103);
    long long v107 = 0;
    int v108 = 0;
    uint64_t v109 = 0;
    if (HIDWORD(v103)) {
      goto LABEL_65;
    }
    goto LABEL_81;
  }
  double v57 = *v55;
  unsigned __int8 v58 = v55;
  unint64_t v59 = v55 + 1;
  do
  {
    double v60 = *v59++;
    BOOL v61 = v57 < v60;
    double v57 = fmax(v57, v60);
    if (v61) {
      unsigned __int8 v58 = v56;
    }
    signed int v56 = v59;
  }
  while (v59 != v11);
  long long v62 = v100;
  signed int v63 = HIDWORD(v103);
  long long v107 = 0;
  int v108 = 0;
  uint64_t v109 = 0;
  if (!HIDWORD(v103))
  {
LABEL_81:
    uint64_t v74 = 0;
    LODWORD(v73) = 0;
    uint64_t v64 = 0;
    *(void *)long long v96 = 0;
    uint64_t v97 = 0;
    __p = 0;
    unsigned int v98 = 0;
    goto LABEL_82;
  }
LABEL_65:
  if (v63 < 0) {
    sub_19E13D694();
  }
  uint64_t v64 = operator new(8 * v63);
  uint64_t v65 = (v58 - v55) * v63;
  bzero(v64, 8 * v63);
  if (v63 < 0xA || (double v66 = &v62[8 * v65], (unint64_t)((char *)v64 - v66) < 0x20))
  {
    unint64_t v67 = 0;
    goto LABEL_69;
  }
  unint64_t v67 = v63 & 0xFFFFFFFFFFFFFFFCLL;
  uint64_t v83 = (long long *)(v66 + 16);
  v84 = v64 + 1;
  unint64_t v85 = v67;
  do
  {
    long long v86 = *v83;
    *(v84 - 1) = *(v83 - 1);
    _OWORD *v84 = v86;
    v83 += 2;
    v84 += 2;
    v85 -= 4;
  }
  while (v85);
  if (v67 != v63)
  {
LABEL_69:
    unint64_t v68 = v63 - v67;
    uint64_t v69 = 8 * v67;
    unint64_t v70 = (void *)v64 + v67;
    uint64_t v71 = &v62[8 * v65 + v69];
    do
    {
      uint64_t v72 = *(void *)v71;
      v71 += 8;
      *v70++ = v72;
      --v68;
    }
    while (v68);
  }
  __p = 0;
  *(void *)long long v96 = 0;
  uint64_t v97 = 0;
  unsigned int v98 = v63;
  sub_19E2482DC((uint64_t)&__p, v63);
  uint64_t v73 = v98;
  uint64_t v74 = (char *)__p;
  if ((int)v98 >= 1)
  {
    uint64_t v75 = 0;
    if (v98 < 4) {
      goto LABEL_77;
    }
    if ((unint64_t)((unsigned char *)__p - (unsigned char *)v64) < 0x20) {
      goto LABEL_77;
    }
    unint64_t v76 = 0;
    uint64_t v75 = v98 & 0xFFFFFFFC;
    uint64_t v77 = (8 * v98) & 0x7FFFFFFE0;
    do
    {
      long long v78 = v64[v76 / 0x10 + 1];
      int v79 = &v74[v76];
      *(_OWORD *)int v79 = v64[v76 / 0x10];
      *((_OWORD *)v79 + 1) = v78;
      v76 += 32;
    }
    while (v77 != v76);
    if (v75 != v73)
    {
LABEL_77:
      uint64_t v80 = v73 - v75;
      uint64_t v81 = v75 << 32;
      do
      {
        *(void *)&v74[v81 >> 29] = *(void *)((char *)v64 + (v81 >> 29));
        v81 += 0x100000000;
        --v80;
      }
      while (v80);
    }
  }
LABEL_82:
  uint64_t v82 = *(void *)v58;
  uint64_t v99 = *(void *)v58;
  if ((void **)(a1 + 16) != &__p)
  {
    sub_19E1E5B9C((void *)(a1 + 16), v74, *(char **)v96, (uint64_t)(*(void *)v96 - (void)v74) >> 3);
    LODWORD(v73) = v98;
    uint64_t v82 = v99;
    uint64_t v74 = (char *)__p;
  }
  *(_DWORD *)(a1 + 40) = v73;
  *(void *)(a1 + 48) = v82;
  if (v74)
  {
    *(void *)long long v96 = v74;
    operator delete(v74);
  }
  if (v64) {
    operator delete(v64);
  }
  if (v62) {
    operator delete(v62);
  }
  if (v55)
  {
    uint64_t v105 = (uint64_t)v55;
    operator delete(v55);
  }
}

void sub_19E2A9EE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  if (__p) {
    operator delete(__p);
  }
  if (v28) {
    operator delete(v28);
  }
  if (v29) {
    operator delete(v29);
  }
  if (a27) {
    operator delete(a27);
  }
  _Unwind_Resume(exception_object);
}

double sub_19E2A9FA4(uint64_t a1, const double **a2)
{
  if (*(_DWORD *)(a1 + 96))
  {
    sub_19E2AA088(a1, a2, (uint64_t)__A);
    double __C = 0.0;
    vDSP_dotprD(__A[0], 1, *(const double **)(a1 + 232), 1, &__C, (int)__N);
    double v3 = __C;
    double __C = 0.0;
    vDSP_meanvD(*(const double **)(a1 + 264), 1, &__C, *(int *)(a1 + 288));
    double v4 = __C;
    if (__A[0])
    {
      __A[1] = __A[0];
      operator delete(__A[0]);
    }
    return v4 + v3;
  }
  else
  {
    __A[0] = 0;
    vDSP_meanvD(*(const double **)(a1 + 264), 1, (double *)__A, *(int *)(a1 + 288));
    return *(double *)__A;
  }
}

void sub_19E2AA06C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2AA088(uint64_t a1@<X0>, const double **a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *(_DWORD *)(a1 + 96);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 24) = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  if (v3)
  {
    if (v3 < 0) {
      sub_19E13D694();
    }
    uint64_t v5 = v3;
    long double v6 = (char *)operator new(8 * v3);
    bzero(v6, 8 * v3);
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    *(void *)a3 = v6;
    *(void *)(a3 + 8) = &v6[8 * v3];
    *(void *)(a3 + 16) = &v6[8 * v3];
    *(_DWORD *)(a3 + 24) = v3;
    unint64_t v25 = v6;
    while (1)
    {
      uint64_t v9 = *(void *)(a1 + 72);
      signed int v10 = *(_DWORD *)(a1 + 100);
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      if (!v10)
      {
        double v11 = 0;
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        __p = 0;
        signed int v30 = 0;
        goto LABEL_14;
      }
      if (v10 < 0) {
        sub_19E13D694();
      }
      double v11 = operator new(8 * v10);
      bzero(v11, 8 * v10);
      if (v10 >= 8 && (unint64_t)v11 - v9 - 8 * v8 * v10 >= 0x20)
      {
        unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL;
        uint64_t v20 = (long long *)(v9 + v7 * v10 + 16);
        unint64_t v21 = v11 + 1;
        unint64_t v22 = v12;
        do
        {
          long long v23 = *v20;
          *(v21 - 1) = *(v20 - 1);
          *unint64_t v21 = v23;
          v20 += 2;
          v21 += 2;
          v22 -= 4;
        }
        while (v22);
        if (v12 == v10) {
          goto LABEL_12;
        }
      }
      else
      {
        unint64_t v12 = 0;
      }
      unint64_t v13 = v10 - v12;
      uint64_t v14 = 8 * v12;
      double v15 = (void *)v11 + v12;
      uint64_t v16 = (uint64_t *)(v9 + v14 + v7 * v10);
      do
      {
        uint64_t v17 = *v16++;
        *v15++ = v17;
        --v13;
      }
      while (v13);
LABEL_12:
      __p = 0;
      uint64_t v28 = 0;
      signed int v30 = 0;
      uint64_t v29 = 0;
      __p = operator new(8 * v10);
      uint64_t v28 = (char *)__p + 8 * v10;
      uint64_t v29 = v28;
      signed int v30 = v10;
      memcpy(__p, v11, 8 * v10);
      long double v6 = v25;
LABEL_14:
      double v18 = *(double *)(a1 + 24);
      double v19 = sub_19E2AA334(a1 + 8, (uint64_t)&__p, a2);
      *(long double *)&v6[8 * v8] = exp(v19 * -0.5) * v18;
      if (__p)
      {
        uint64_t v28 = (char *)__p;
        operator delete(__p);
      }
      if (v11) {
        operator delete(v11);
      }
      ++v8;
      v7 += 8;
      if (v8 == v5) {
        return;
      }
    }
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 24) = 0;
}

void sub_19E2AA2C0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E13A9BC(a1);
}

void sub_19E2AA2E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
  {
    operator delete(__p);
    if (!v14)
    {
LABEL_3:
      *(void *)(a10 + 8) = a11;
      operator delete(a11);
      _Unwind_Resume(a1);
    }
  }
  else if (!v14)
  {
    goto LABEL_3;
  }
  operator delete(v14);
  *(void *)(a10 + 8) = a11;
  operator delete(a11);
  _Unwind_Resume(a1);
}

double sub_19E2AA334(uint64_t a1, uint64_t a2, const double **a3)
{
  uint64_t v7 = *(const void **)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  int64_t v8 = v6 - *(void *)a2;
  if (v6 == *(void *)a2)
  {
    signed int v10 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    if (v8 < 0) {
      sub_19E13D694();
    }
    uint64_t v9 = (char *)operator new(v6 - *(void *)a2);
    signed int v10 = &v9[8 * (v8 >> 3)];
    memcpy(v9, v7, v8);
  }
  vDSP_vsubD(*a3, 1, (const double *)v9, 1, (double *)v9, 1, *(int *)(a2 + 24));
  if (v10 == v9)
  {
    double v11 = 0;
  }
  else
  {
    if (v10 - v9 < 0) {
      sub_19E13D694();
    }
    double v11 = operator new(v10 - v9);
    memcpy(v11, v9, v10 - v9);
  }
  cblas_dnrm2_NEWLAPACK();
  double v13 = v12;
  double v14 = *(double *)(a1 + 24);
  if (v11) {
    operator delete(v11);
  }
  if (v9) {
    operator delete(v9);
  }
  return v13 * v13 / (v14 * v14);
}

void sub_19E2AA48C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (v15) {
    operator delete(v15);
  }
  if (v14) {
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E2AA4E4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  double v13 = 0;
  double v14 = 0;
  uint64_t v15 = 0;
  sub_19E246830(&v13, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 4));
  __p = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  sub_19E246A1C(&__p, a3[3], a3[4], 0xCCCCCCCCCCCCCCCDLL * ((a3[4] - a3[3]) >> 3));
  sub_19E2AA680((void *)a1, a2, (uint64_t *)&v13);
  uint64_t v6 = (void **)__p;
  if (__p)
  {
    uint64_t v7 = v17;
    int64_t v8 = __p;
    if (v17 != __p)
    {
      do
      {
        if (*((char *)v7 - 17) < 0) {
          operator delete(*(v7 - 5));
        }
        v7 -= 5;
      }
      while (v7 != v6);
      int64_t v8 = __p;
    }
    uint64_t v17 = v6;
    operator delete(v8);
  }
  uint64_t v9 = (void **)v13;
  if (v13)
  {
    signed int v10 = v14;
    double v11 = v13;
    if (v14 != v13)
    {
      do
      {
        if (*((char *)v10 - 25) < 0) {
          operator delete(*(v10 - 6));
        }
        v10 -= 6;
      }
      while (v10 != v9);
      double v11 = v13;
    }
    double v14 = v9;
    operator delete(v11);
  }
  *(void *)a1 = &unk_1EF0A8168;
  *(_DWORD *)(a1 + 64) = 5;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_19E2AA650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_19E2AA664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    sub_19E32FAD8((uint64_t)&a9, a9);
  }
  _Unwind_Resume(exception_object);
}

void *sub_19E2AA680(void *a1, uint64_t a2, uint64_t *a3)
{
  *a1 = &unk_1EF0A8348;
  a1[1] = a2;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  sub_19E246830(a1 + 2, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 4));
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  sub_19E246A1C(a1 + 5, a3[3], a3[4], 0xCCCCCCCCCCCCCCCDLL * ((a3[4] - a3[3]) >> 3));
  return a1;
}

void sub_19E2AA720(_Unwind_Exception *exception_object)
{
  if (*v2) {
    sub_19E32FD88(v1, *v2);
  }
  _Unwind_Resume(exception_object);
}

void *sub_19E2AA740(void *a1)
{
  *a1 = &unk_1EF0A8168;
  BOOL v2 = (char **)a1[9];
  if (v2)
  {
    int v3 = (char **)a1[10];
    double v4 = v2;
    if (v3 != v2)
    {
      do
        int v3 = sub_19E2470C8(v3 - 13);
      while (v3 != v2);
      double v4 = (char **)a1[9];
    }
    a1[10] = v2;
    operator delete(v4);
  }

  return sub_19E2AADF4(a1);
}

void sub_19E2AA7C8(void *a1)
{
  *a1 = &unk_1EF0A8168;
  BOOL v2 = (char **)a1[9];
  if (v2)
  {
    int v3 = (char **)a1[10];
    double v4 = v2;
    if (v3 != v2)
    {
      do
        int v3 = sub_19E2470C8(v3 - 13);
      while (v3 != v2);
      double v4 = (char **)a1[9];
    }
    a1[10] = v2;
    operator delete(v4);
  }
  uint64_t v5 = sub_19E2AADF4(a1);

  operator delete(v5);
}

void sub_19E2AA854(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  sub_19E2AAECC(a1);
  uint64_t v6 = *(void *)(a1 + 72);
  if (v6 == *(void *)(a1 + 80))
  {
    uint64_t v39 = a3;
    sub_19E29CB00(a2, &v52);
    sub_19E2AB1C4(a2, (uint64_t)v49);
    uint64_t v7 = v50;
    if (v50 != v51)
    {
      do
      {
        uint64_t v8 = *(void *)((char *)v7 + 28);
        sub_19E291E68(v48, &v52[12 * (int)v8]);
        if (SHIDWORD(v8) >= 1)
        {
          int v9 = 0;
          unsigned int v10 = HIDWORD(v8) & ~(v8 >> 63);
          do
          {
            sub_19E2AB304(a1, (uint64_t *)v48, (uint64_t **)&__A);
            sub_19E2460A4((char **)v48, (uint64_t)&__A);
            sub_19E15A064((uint64_t)v47, v47[1]);
            sub_19E15A064((uint64_t)v46, v46[1]);
            double v11 = (char *)__p;
            if (__p)
            {
              double v12 = v45;
              double v13 = __p;
              if (v45 != __p)
              {
                do
                {
                  double v14 = (void *)*((void *)v12 - 4);
                  if (v14)
                  {
                    *((void *)v12 - 3) = v14;
                    operator delete(v14);
                  }
                  if (*(v12 - 33) < 0) {
                    operator delete(*((void **)v12 - 7));
                  }
                  v12 -= 56;
                }
                while (v12 != v11);
                double v13 = __p;
              }
              uint64_t v45 = v11;
              operator delete(v13);
            }
            uint64_t v15 = __A;
            if (*(double *)&__A != 0.0)
            {
              uint64_t v16 = v43;
              uint64_t v17 = __A;
              if (v43 != __A)
              {
                do
                {
                  uint64_t v18 = (void *)*((void *)v16 - 4);
                  if (v18)
                  {
                    *((void *)v16 - 3) = v18;
                    operator delete(v18);
                  }
                  if (*((char *)v16 - 33) < 0) {
                    operator delete(*((void **)v16 - 7));
                  }
                  v16 -= 7;
                }
                while (v16 != v15);
                uint64_t v17 = __A;
              }
              int v43 = v15;
              operator delete(v17);
            }
            unint64_t v41 = 0;
            uint64_t v19 = *(void *)(a1 + 8);
            sub_19E29CE6C((long long **)v48, (uint64_t)v40);
            uint64_t v20 = *(void *)(v19 + 8);
            if (*(_DWORD *)(v20 + 96))
            {
              sub_19E2AA088(*(void *)(v19 + 8), (const double **)v40, (uint64_t)&__A);
              __C[0] = 0.0;
              vDSP_dotprD(__A, 1, *(const double **)(v20 + 232), 1, __C, (int)__p);
              double v21 = __C[0];
              __C[0] = 0.0;
              vDSP_meanvD(*(const double **)(v20 + 264), 1, __C, *(int *)(v20 + 288));
              double v22 = __C[0];
              sub_19E2AB7D0(v20, (const double **)v40, (uint64_t)&__A);
              double v24 = v23;
              double v25 = *(double *)(v20 + 16);
              if (*(double *)&__A != 0.0)
              {
                int v43 = __A;
                operator delete(__A);
              }
              double v26 = v22 + v21;
              double v27 = v25 + v24;
            }
            else
            {
              *(double *)&__A = 0.0;
              vDSP_meanvD(*(const double **)(v20 + 264), 1, (double *)&__A, *(int *)(v20 + 288));
              double v26 = *(double *)&__A;
              double v27 = sub_19E2AB700(v20, (const double **)v40);
            }
            double v28 = sqrt(v27);
            if (v28 < 0.00000001 || (int v29 = *(_DWORD *)(*(void *)(v19 + 8) + 96), v29 <= 0))
            {
              double v30 = (*(double (**)(uint64_t))(*(void *)v19 + 8))(v19);
            }
            else
            {
              if (*(_DWORD *)(v19 + 56) != v29) {
                (*(void (**)(uint64_t))(*(void *)v19 + 16))(v19);
              }
              (**(void (***)(uint64_t, double, double))v19)(v19, v26, v28);
            }
            uint64_t v31 = *(uint64_t **)&v30;
            if (v40[0])
            {
              v40[1] = v40[0];
              operator delete(v40[0]);
            }
            unint64_t v41 = v31;
            sub_19E29D218((int *)(a1 + 64), (uint64_t *)v48, &v41);
            ++v9;
          }
          while (v10 != v9);
        }
        sub_19E2470C8((char **)v48);
        uint64_t v32 = (void *)v7[1];
        if (v32)
        {
          do
          {
            uint64_t v33 = (void **)v32;
            uint64_t v32 = (void *)*v32;
          }
          while (v32);
        }
        else
        {
          do
          {
            uint64_t v33 = (void **)v7[2];
            BOOL v34 = *v33 == v7;
            uint64_t v7 = v33;
          }
          while (!v34);
        }
        uint64_t v7 = v33;
      }
      while (v33 != v51);
    }
    uint64_t v35 = *(uint64_t **)(a1 + 72);
    sub_19E291E68((uint64_t **)v39, v35);
    *(void *)(v39 + 96) = v35[12];
    sub_19E29D74C(*(char ***)(a1 + 72), *(void *)(a1 + 80), (uint64_t)v48, 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 3));
    *(void *)(a1 + 80) = sub_19E2470C8((char **)(*(void *)(a1 + 80) - 104));
    sub_19E13C56C((uint64_t)&v50, v51[0]);
    uint64_t v36 = (char **)v52;
    if (v52)
    {
      double v37 = v53;
      double v38 = v52;
      if (v53 != (char **)v52)
      {
        do
          double v37 = sub_19E2470C8(v37 - 12);
        while (v37 != v36);
        double v38 = v52;
      }
      uint64_t v53 = v36;
      operator delete(v38);
    }
  }
  else
  {
    sub_19E291E68((uint64_t **)a3, *(uint64_t **)(a1 + 72));
    *(void *)(a3 + 96) = *(void *)(v6 + 96);
    sub_19E29D74C(*(char ***)(a1 + 72), *(void *)(a1 + 80), (uint64_t)v48, 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 3));
    *(void *)(a1 + 80) = sub_19E2470C8((char **)(*(void *)(a1 + 80) - 104));
  }
}

void sub_19E2AAD10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  sub_19E2470C8(v28);
  sub_19E13C56C(a10, *(void **)(v29 - 184));
  sub_19E2462FC((void **)(v29 - 168));
  _Unwind_Resume(a1);
}

void sub_19E2AADA8(char *a1@<X8>)
{
  a1[23] = 17;
  strcpy(a1, "genetic_optimizer");
}

void sub_19E2AADCC(char *a1@<X8>)
{
  a1[23] = 21;
  strcpy(a1, "acquisition_optimizer");
}

void *sub_19E2AADF4(void *a1)
{
  *a1 = &unk_1EF0A8348;
  uint64_t v2 = a1[5];
  if (v2)
  {
    uint64_t v3 = a1[6];
    double v4 = (void *)a1[5];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 17) < 0) {
          operator delete(*(void **)(v3 - 40));
        }
        v3 -= 40;
      }
      while (v3 != v2);
      double v4 = (void *)a1[5];
    }
    a1[6] = v2;
    operator delete(v4);
  }
  uint64_t v5 = a1[2];
  if (v5)
  {
    uint64_t v6 = a1[3];
    uint64_t v7 = (void *)a1[2];
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 25) < 0) {
          operator delete(*(void **)(v6 - 48));
        }
        v6 -= 48;
      }
      while (v6 != v5);
      uint64_t v7 = (void *)a1[2];
    }
    a1[3] = v5;
    operator delete(v7);
  }
  return a1;
}

void sub_19E2AAECC(uint64_t a1)
{
  int v18 = 5;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v19 = 0;
  uint64_t v3 = *(void *)(a1 + 72);
  uint64_t v2 = (uint64_t *)(a1 + 72);
  if (v3 == *(void *)(a1 + 80))
  {
    double v12 = 0;
    *(_DWORD *)(a1 + 64) = 5;
    if ((int *)(a1 + 64) == &v18) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  do
  {
    sub_19E291E68(v17, (uint64_t *)v3);
    v17[12] = *(uint64_t **)(v3 + 96);
    sub_19E29D74C(*(char ***)(a1 + 72), *(void *)(a1 + 80), (uint64_t)__p, 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 3));
    *(void *)(a1 + 80) = sub_19E2470C8((char **)(*(void *)(a1 + 80) - 104));
    uint64_t v16 = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    sub_19E29CE6C((long long **)v17, (uint64_t)__p);
    v5.n128_f64[0] = sub_19E2AB5F4(*(void *)(v4 + 8), (const double **)__p);
    double v7 = sqrt(v6);
    if (v7 < 0.00000001 || (int v8 = *(_DWORD *)(*(void *)(v4 + 8) + 96), v8 <= 0))
    {
      double v10 = (*(double (**)(uint64_t, __n128))(*(void *)v4 + 8))(v4, v5);
    }
    else
    {
      double v9 = v5.n128_f64[0];
      if (*(_DWORD *)(v4 + 56) != v8) {
        (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
      }
      (**(void (***)(uint64_t, double, double))v4)(v4, v9, v7);
    }
    *(double *)&double v11 = v10;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    uint64_t v16 = v11;
    if (*(double *)&v11 > (*(double (**)(void))(**(void **)(a1 + 8) + 8))(*(void *)(a1 + 8))) {
      sub_19E29D218(&v18, (uint64_t *)v17, &v16);
    }
    sub_19E2470C8((char **)v17);
    uint64_t v3 = *(void *)(a1 + 72);
  }
  while (v3 != *(void *)(a1 + 80));
  double v12 = v19;
  *(_DWORD *)(a1 + 64) = v18;
  if ((int *)(a1 + 64) != &v18)
  {
LABEL_17:
    sub_19E29D4FC(v2, v12, v20, 0x4EC4EC4EC4EC4EC5 * (v20 - v12));
    double v12 = v19;
  }
LABEL_18:
  if (v12)
  {
    double v13 = (char **)v20;
    double v14 = v12;
    if (v20 != v12)
    {
      do
        double v13 = sub_19E2470C8(v13 - 13);
      while (v13 != (char **)v12);
      double v14 = v19;
    }
    uint64_t v20 = v12;
    operator delete(v14);
  }
}

void sub_19E2AB160(_Unwind_Exception *a1)
{
  sub_19E29C7AC(v1 - 120);
  _Unwind_Resume(a1);
}

void sub_19E2AB174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_19E2470C8((char **)va);
  sub_19E29C7AC(v7 - 120);
  _Unwind_Resume(a1);
}

void sub_19E2AB198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *a15)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E2470C8(&a15);
  sub_19E29C7AC(v15 - 120);
  _Unwind_Resume(a1);
}

void sub_19E2AB1C4(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = a2 + 16;
  *(void *)(a2 + 24) = 0;
  sub_19E29DC58(a1, __p);
  sub_19E2459C8(v7, (uint64_t *)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v3 = 50;
  do
  {
    int v5 = sub_19E29E07C((uint64_t)v9, (uint64_t)v7, v9);
    uint64_t v4 = sub_19E29DD48((int *)a2, &v5);
    ++*(_DWORD *)v4;
    --v3;
  }
  while (v3);
  if (v9[0])
  {
    v9[1] = v9[0];
    operator delete(v9[0]);
  }
  std::random_device::~random_device(&v8);
}

void sub_19E2AB2A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14)
{
  if (__p)
  {
    operator delete(__p);
    sub_19E13C56C(v14, *v15);
    _Unwind_Resume(a1);
  }
  sub_19E13C56C(v14, *v15);
  _Unwind_Resume(a1);
}

void sub_19E2AB304(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t **a3@<X8>)
{
  sub_19E291E68(a3, a2);
  sub_19E29E298((long long **)a2, (uint64_t)v8);
  sub_19E2AB494(a1, (uint64_t *)v8, v9);
  sub_19E29E624((uint64_t)a2, (uint64_t)v6);
  sub_19E2AB544(a1, (uint64_t *)v6, __p);
  sub_19E29E900((uint64_t *)a3, (uint64_t *)v9);
  sub_19E29EAC0((uint64_t)a3, (uint64_t *)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v6[0])
  {
    v6[1] = v6[0];
    operator delete(v6[0]);
  }
  if (*(void *)&v9[0])
  {
    *((void *)&v9[0] + 1) = *(void *)&v9[0];
    operator delete(*(void **)&v9[0]);
  }
  if (v8[0])
  {
    v8[1] = v8[0];
    operator delete(v8[0]);
  }
}

void sub_19E2AB3D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v21 = *(void **)(v19 - 64);
    if (!v21)
    {
LABEL_3:
      double v22 = a17;
      if (!a17) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v21 = *(void **)(v19 - 64);
    if (!v21) {
      goto LABEL_3;
    }
  }
  *(void *)(v19 - 56) = v21;
  operator delete(v21);
  double v22 = a17;
  if (!a17)
  {
LABEL_4:
    sub_19E2470C8(v18);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(v22);
  sub_19E2470C8(v18);
  _Unwind_Resume(a1);
}

double sub_19E2AB494@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  int v5 = (uint64_t *)(a1 + 16);
  if (sub_19E244298((uint64_t *)(a1 + 16)))
  {
    sub_19E244360(v5, (uint64_t *)v7);
    sub_19E310AEC(a2, (uint64_t)v7, (uint64_t)a3);
    if (__p)
    {
      double v9 = __p;
      operator delete(__p);
    }
    if (v7[0])
    {
      v7[1] = v7[0];
      operator delete(v7[0]);
    }
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

void sub_19E2AB530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double sub_19E2AB544@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v5 = a1 + 16;
  if (sub_19E244DC4(a1 + 16))
  {
    sub_19E244E8C(v5, (uint64_t *)v7);
    sub_19E311780(a2, (uint64_t *)v7, (uint64_t)a3);
    if (__p)
    {
      double v9 = __p;
      operator delete(__p);
    }
    if (v7[0])
    {
      v7[1] = v7[0];
      operator delete(v7[0]);
    }
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

void sub_19E2AB5E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double sub_19E2AB5F4(uint64_t a1, const double **a2)
{
  if (*(_DWORD *)(a1 + 96))
  {
    sub_19E2AA088(a1, a2, (uint64_t)__A);
    double __C = 0.0;
    vDSP_dotprD(__A[0], 1, *(const double **)(a1 + 232), 1, &__C, (int)__N);
    double v4 = __C;
    double __C = 0.0;
    vDSP_meanvD(*(const double **)(a1 + 264), 1, &__C, *(int *)(a1 + 288));
    double v5 = __C;
    sub_19E2AB7D0(a1, a2, (uint64_t)__A);
    if (__A[0])
    {
      __A[1] = __A[0];
      operator delete(__A[0]);
    }
    return v5 + v4;
  }
  else
  {
    double v6 = sub_19E2A9FA4(a1, a2);
    sub_19E2AB700(a1, a2);
  }
  return v6;
}

void sub_19E2AB6E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_19E2AB700(uint64_t a1, const double **a2)
{
  if (*(_DWORD *)(a1 + 96))
  {
    sub_19E2AA088(a1, a2, (uint64_t)__p);
    sub_19E2AB7D0(a1, a2, (uint64_t)__p);
    double v5 = v4;
    double v6 = *(double *)(a1 + 16);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    return v6 + v5;
  }
  else
  {
    double v8 = *(double *)(a1 + 24);
    double v9 = sub_19E2AA334(a1 + 8, (uint64_t)a2, a2);
    return *(double *)(a1 + 16) + exp(v9 * -0.5) * v8;
  }
}

void sub_19E2AB7B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2AB7D0(uint64_t a1, const double **a2, uint64_t a3)
{
  sub_19E29F880(a1 + 168, (uint64_t)__p);
  uint64_t v6 = *(unsigned int *)(a1 + 192);
  if ((int)v6 >= 1)
  {
    uint64_t v7 = 0;
    int v8 = *(_DWORD *)(a1 + 196);
    int v9 = v24;
    int v10 = 1;
    int v11 = -1;
    double v12 = __p[0];
    do
    {
      if (v8 <= v10) {
        int v13 = v10;
      }
      else {
        int v13 = v8;
      }
      int v14 = v7 + 1;
      if ((int)v7 + 1 >= v8) {
        goto LABEL_3;
      }
      unsigned int v15 = 0;
      int v16 = v13 + v11;
      uint64_t v17 = (int)v7 * (uint64_t)v9;
      if ((v13 + v11) < 4)
      {
        int v18 = v7 + 1;
      }
      else
      {
        int v18 = v7 + 1;
        if (v13 - (int)v7 + v10 - 2 >= v10)
        {
          int v19 = 0;
          unsigned int v15 = v16 & 0xFFFFFFFC;
          int v18 = v14 + (v16 & 0xFFFFFFFC);
          do
          {
            uint64_t v20 = &v12[v17 + v10 + v19];
            *uint64_t v20 = 0uLL;
            v20[1] = 0uLL;
            v19 += 4;
          }
          while ((v16 & 0xFFFFFFFC) != v19);
          if (v16 == v15) {
            goto LABEL_3;
          }
        }
      }
      unsigned int v21 = v13 - v15;
      do
      {
        v12[v17 + v18] = 0;
        int v18 = ++v15 + v14;
        --v21;
      }
      while (v10 != v21);
LABEL_3:
      ++v7;
      ++v10;
      --v11;
    }
    while (v7 != v6);
  }
  sub_19E29F6FC((uint64_t)__p, a3, (uint64_t)__B);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  double v22 = sub_19E2AA334(a1 + 8, (uint64_t)a2, a2);
  __p[0] = 0;
  vDSP_dotprD(__B[0], 1, __B[0], 1, (double *)__p, (int)__N);
  if (__B[0])
  {
    __B[1] = __B[0];
    operator delete(__B[0]);
  }
  exp(v22 * -0.5);
}

void sub_19E2AB998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E2AB9C8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  BOOL v34 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  sub_19E246830(&v34, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 4));
  __p = 0;
  double v38 = 0;
  uint64_t v39 = 0;
  sub_19E246A1C(&__p, a3[3], a3[4], 0xCCCCCCCCCCCCCCCDLL * ((a3[4] - a3[3]) >> 3));
  sub_19E2AA680((void *)a1, a2, (uint64_t *)&v34);
  int v8 = (void **)__p;
  if (__p)
  {
    int v9 = v38;
    int v10 = __p;
    if (v38 != __p)
    {
      do
      {
        if (*((char *)v9 - 17) < 0) {
          operator delete(*(v9 - 5));
        }
        v9 -= 5;
      }
      while (v9 != v8);
      int v10 = __p;
    }
    double v38 = v8;
    operator delete(v10);
  }
  int v11 = (void **)v34;
  if (v34)
  {
    double v12 = v35;
    int v13 = v34;
    if (v35 != v34)
    {
      do
      {
        if (*((char *)v12 - 25) < 0) {
          operator delete(*(v12 - 6));
        }
        v12 -= 6;
      }
      while (v12 != v11);
      int v13 = v34;
    }
    uint64_t v35 = v11;
    operator delete(v13);
  }
  *(void *)a1 = &unk_1EF0A7F88;
  unsigned int v14 = sub_19E244298(a3);
  sub_19E2A099C(a1 + 64, v14);
  sub_19E299010(a1 + 184);
  sub_19E244360(a3, (uint64_t *)v32);
  sub_19E2A16E8(a1 + 64, (uint64_t *)v32);
  sub_19E2A1818(a1 + 64, (uint64_t *)v33);
  if (v33[0])
  {
    v33[1] = v33[0];
    operator delete(v33[0]);
  }
  if (v32[0])
  {
    v32[1] = v32[0];
    operator delete(v32[0]);
  }
  if ((a4 & 0xFF00000000) != 0)
  {
    uint64_t v15 = 0;
    *(_DWORD *)(a1 + 7776) = a4;
    uint64_t v16 = 1;
    unsigned int v17 = a4;
    do
    {
      int v18 = 1812433253 * (v17 ^ (v17 >> 30));
      unsigned int v17 = v18 + v16;
      *(_DWORD *)(a1 + 7780 + 4 * v15) = v15 + v18 + 1;
      ++v16;
      ++v15;
    }
    while (v15 != 623);
    *(void *)(a1 + 10272) = 0;
    *(_DWORD *)(a1 + 184) = a4;
    uint64_t v19 = 1;
    uint64_t v20 = 47;
    unsigned int v21 = a4;
    do
    {
      int v22 = 1812433253 * (v21 ^ (v21 >> 30));
      unsigned int v21 = v22 + v19;
      *(_DWORD *)(a1 + 4 * v20) = v20 + v22 - 46;
      ++v19;
      ++v20;
    }
    while (v20 != 670);
    uint64_t v23 = 0;
    *(void *)(a1 + 2680) = 0;
    *(_DWORD *)(a1 + 2712) = a4;
    uint64_t v24 = 1;
    unsigned int v25 = a4;
    do
    {
      int v26 = 1812433253 * (v25 ^ (v25 >> 30));
      unsigned int v25 = v26 + v24;
      *(_DWORD *)(a1 + 2716 + 4 * v23) = v23 + v26 + 1;
      ++v24;
      ++v23;
    }
    while (v23 != 623);
    uint64_t v27 = 0;
    *(void *)(a1 + 5208) = 0;
    *(_DWORD *)(a1 + 5232) = a4;
    uint64_t v28 = 1;
    unsigned int v29 = a4;
    do
    {
      int v30 = 1812433253 * (v29 ^ (v29 >> 30));
      unsigned int v29 = v30 + v28;
      *(_DWORD *)(a1 + 5236 + 4 * v27) = v27 + v30 + 1;
      ++v28;
      ++v27;
    }
    while (v27 != 623);
    *(void *)(a1 + 7728) = 0;
    sub_19E312C64();
  }
  return a1;
}

void sub_19E2ABCAC(_Unwind_Exception *a1)
{
  sub_19E2A0A3C(v2);
  sub_19E2AADF4(v1);
  _Unwind_Resume(a1);
}

void sub_19E2ABD18(_Unwind_Exception *a1)
{
  sub_19E2AADF4(v1);
  _Unwind_Resume(a1);
}

void sub_19E2ABD30(uint64_t a1)
{
  uint64_t v1 = sub_19E2AC278(a1);

  operator delete(v1);
}

void sub_19E2ABD58(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v12 = 0u;
  memset(v11, 0, sizeof(v11));
  *(void *)&long long v12 = (char *)&v12 + 8;
  v15[0] = 0;
  v15[1] = 0;
  uint64_t v13 = 0;
  unsigned int v14 = v15;
  double v4 = (*(double (**)(void))(**(void **)(a1 + 8) + 8))(*(void *)(a1 + 8));
  sub_19E291E68((uint64_t **)a2, (uint64_t *)v11);
  *(double *)(a2 + 96) = v4;
  sub_19E2470C8((char **)v11);
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v16 = 0;
  sub_19E246830(&v16, *(void *)(a1 + 16), *(void *)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 4));
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  sub_19E246A1C(&v19, *(void *)(a1 + 40), *(void *)(a1 + 48), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 3));
  sub_19E2459CC((uint64_t *)&v16, a1 + 184, 5, (char **)&v22);
  double v5 = v19;
  if (v19)
  {
    uint64_t v6 = v20;
    uint64_t v7 = v19;
    if (v20 != v19)
    {
      do
      {
        if (*((char *)v6 - 17) < 0) {
          operator delete(*(v6 - 5));
        }
        v6 -= 5;
      }
      while (v6 != v5);
      uint64_t v7 = v19;
    }
    uint64_t v20 = v5;
    operator delete(v7);
  }
  uint64_t v8 = (uint64_t)v16;
  if (v16)
  {
    uint64_t v9 = v17;
    int v10 = v16;
    if ((void *)v17 != v16)
    {
      do
      {
        if (*(char *)(v9 - 25) < 0) {
          operator delete(*(void **)(v9 - 48));
        }
        v9 -= 48;
      }
      while (v9 != v8);
      int v10 = v16;
    }
    uint64_t v17 = v8;
    operator delete(v10);
  }
  sub_19E2AC350(a1, v22);
}

void sub_19E2AC1A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v8 = va_arg(va1, char *);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  sub_19E2470C8((char **)va1);
  sub_19E2470C8((char **)va);
  sub_19E2462FC((void **)(v6 - 112));
  sub_19E2470C8(v5);
  _Unwind_Resume(a1);
}

void sub_19E2AC258(char *a1@<X8>)
{
  a1[23] = 16;
  strcpy(a1, "direct_optimizer");
}

void *sub_19E2AC278(uint64_t a1)
{
  *(void *)a1 = &unk_1EF0A7F88;
  std::random_device::~random_device((std::random_device *)(a1 + 10280));
  std::random_device::~random_device((std::random_device *)(a1 + 7736));
  std::random_device::~random_device((std::random_device *)(a1 + 5216));
  std::random_device::~random_device((std::random_device *)(a1 + 2688));
  *(void *)(a1 + 64) = &unk_1EF0A7F70;
  sub_19E311F9C(*(void *)(a1 + 72));
  uint64_t v2 = *(void **)(a1 + 128);
  if (v2)
  {
    *(void *)(a1 + 136) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 104);
  if (v3)
  {
    *(void *)(a1 + 112) = v3;
    operator delete(v3);
  }
  double v4 = *(void **)(a1 + 80);
  if (v4)
  {
    *(void *)(a1 + 88) = v4;
    operator delete(v4);
  }

  return sub_19E2AADF4((void *)a1);
}

void sub_19E2AC350(uint64_t a1, long long **a2)
{
  v4[0] = a1;
  v4[1] = a2;
  uint64_t v2 = a1 + 64;
  sub_19E29E298(a2, (uint64_t)&__p);
  sub_19E2AC720(v2, (uint64_t)v4, (uint64_t)&__p);
}

void sub_19E2AC648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a13)
  {
    operator delete(a13);
    uint64_t v24 = __p;
    if (!__p)
    {
LABEL_4:
      sub_19E2470C8((char **)&a21);
      unsigned int v25 = *(void **)(v22 - 128);
      if (v25)
      {
        *(void *)(v22 - 120) = v25;
        operator delete(v25);
      }
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v24 = __p;
    if (!__p) {
      goto LABEL_4;
    }
  }
  operator delete(v24);
  goto LABEL_4;
}

void sub_19E2AC720(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a1 + 112)) {
    (**(void (***)(uint64_t, void))a1)(a1, *(unsigned int *)(a3 + 24));
  }
  operator new();
}

void sub_19E2ACBB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  __cxa_free_exception(v15);
  if (a2 != 3)
  {
    if (a2 == 2)
    {
      uint64_t v19 = __cxa_begin_catch(a1);
      (*(void (**)(void *))(*(void *)v19 + 16))(v19);
      sub_19E29FAE8(v14, (uint64_t)&a13);
      if (a13)
      {
        a14 = (uint64_t)a13;
        operator delete(a13);
      }
      __cxa_end_catch();
LABEL_13:
      JUMPOUT(0x19E2AC99CLL);
    }
    if (a2 != 1)
    {
      if (__p) {
        operator delete(__p);
      }
      _Unwind_Resume(a1);
    }
  }
  uint64_t v18 = __cxa_begin_catch(a1);
  (*(void (**)(void *))(*(void *)v18 + 16))(v18);
  __cxa_end_catch();
  goto LABEL_13;
}

void sub_19E2ACD04(uint64_t **a1, void *a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  double v5 = a1[1];
  unint64_t v7 = (char *)v5 - (char *)*a1;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  __p = 0;
  int v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  if (!(v7 >> 3))
  {
    uint64_t v8 = 0;
    __p = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    int v20 = v7 >> 3;
    if (v6 == v5) {
      goto LABEL_13;
    }
    goto LABEL_6;
  }
  if (((v7 >> 3) & 0x80000000) != 0) {
    sub_19E13D694();
  }
  uint64_t v8 = operator new((uint64_t)(v7 << 29) >> 29);
  bzero(v8, (uint64_t)(v7 << 29) >> 29);
  __p = v8;
  uint64_t v18 = (char *)v8 + ((uint64_t)(v7 << 29) >> 29);
  uint64_t v19 = (char *)v8 + 8 * (int)((uint64_t)v7 >> 3);
  int v20 = v7 >> 3;
  if (v6 != v5)
  {
LABEL_6:
    uint64_t v9 = 0;
    if (v7 - 8 < 0x18) {
      goto LABEL_11;
    }
    if ((unint64_t)((char *)v8 - (char *)v6) < 0x20) {
      goto LABEL_11;
    }
    unint64_t v10 = ((v7 - 8) >> 3) + 1;
    uint64_t v9 = v10 & 0x3FFFFFFFFFFFFFFCLL;
    uint64_t v11 = v8 + 1;
    uint64_t v12 = (long long *)(v6 + 2);
    uint64_t v13 = v10 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v14 = *v12;
      *(v11 - 1) = *(v12 - 1);
      *uint64_t v11 = v14;
      v11 += 2;
      v12 += 2;
      v13 -= 4;
    }
    while (v13);
    v6 += v10 & 0x3FFFFFFFFFFFFFFCLL;
    if (v10 != v9)
    {
LABEL_11:
      uint64_t v15 = (void *)v8 + v9;
      do
      {
        uint64_t v16 = *v6++;
        *v15++ = v16;
      }
      while (v6 != v5);
    }
  }
LABEL_13:
  if (*a2 == a2[1])
  {
    sub_19E2ACED8(a3, (uint64_t)&__p);
    if (__p)
    {
      uint64_t v18 = (char *)__p;
      operator delete(__p);
    }
  }
  else
  {
    sub_19E2ACED8(a3, (uint64_t)&__p);
    __break(1u);
  }
}

void sub_19E2ACE9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2ACEBC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E13A9BC(a1);
}

uint64_t sub_19E2ACED8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*a1 + 8);
  sub_19E29E624(a1[1], (uint64_t)v25);
  uint64_t v4 = v26;
  uint64_t v28 = 0;
  unsigned int v29 = 0;
  uint64_t v27 = 0;
  if (!v26)
  {
    int v30 = 0;
    goto LABEL_11;
  }
  if ((v26 & 0x80000000) != 0) {
    sub_19E13D694();
  }
  double v5 = (float64x2_t *)operator new(8 * (int)v26);
  uint64_t v27 = v5;
  unsigned int v29 = (char *)&v5->f64[(int)v4];
  bzero(v5, 8 * (int)v4);
  uint64_t v28 = (char *)&v5->f64[(int)v4];
  int v30 = v4;
  uint64_t v6 = (char *)v25[0];
  if (v4 < 8)
  {
    uint64_t v7 = 0;
LABEL_9:
    uint64_t v16 = v4 - v7;
    uint64_t v17 = v7 << 32;
    do
    {
      *(double *)((char *)v5->f64 + (v17 >> 29)) = (double)*(int *)&v6[v17 >> 30];
      v17 += 0x100000000;
      --v16;
    }
    while (v16);
    goto LABEL_11;
  }
  uint64_t v7 = v4 & 0xFFFFFFF8;
  uint64_t v8 = v5 + 2;
  uint64_t v9 = (char *)v25[0] + 16;
  uint64_t v10 = v7;
  do
  {
    long long v11 = *((_OWORD *)v9 - 1);
    v12.i64[0] = (int)v11;
    v12.i64[1] = SDWORD1(v11);
    float64x2_t v13 = vcvtq_f64_s64(v12);
    v12.i64[0] = SDWORD2(v11);
    v12.i64[1] = SHIDWORD(v11);
    float64x2_t v14 = vcvtq_f64_s64(v12);
    v12.i64[0] = (int)*(_OWORD *)v9;
    v12.i64[1] = (int)HIDWORD(*(void *)v9);
    float64x2_t v15 = vcvtq_f64_s64(v12);
    v12.i64[0] = (int)*((void *)v9 + 1);
    v12.i64[1] = (int)HIDWORD(*(_OWORD *)v9);
    v8[-2] = v13;
    v8[-1] = v14;
    *uint64_t v8 = v15;
    v8[1] = vcvtq_f64_s64(v12);
    v8 += 4;
    v9 += 32;
    v10 -= 8;
  }
  while (v10);
  if (v7 != v4) {
    goto LABEL_9;
  }
LABEL_11:
  sub_19E29FF68(a2, (uint64_t)&v27, (uint64_t)__p);
  double v18 = sub_19E2AB5F4(*(void *)(v3 + 8), (const double **)__p);
  double v20 = sqrt(v19);
  if (v20 < 0.00000001 || (int v21 = *(_DWORD *)(*(void *)(v3 + 8) + 96), v21 <= 0))
  {
    double v22 = (*(double (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  else
  {
    if (*(_DWORD *)(v3 + 56) != v21) {
      (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
    (**(void (***)(uint64_t, double, double))v3)(v3, v18, v20);
  }
  double v23 = v22;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v27)
  {
    uint64_t v28 = (char *)v27;
    operator delete(v27);
  }
  if (v25[0])
  {
    v25[1] = v25[0];
    operator delete(v25[0]);
  }
  return *(void *)&v23;
}

void sub_19E2AD124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p)
  {
    operator delete(__p);
    double v19 = a9;
    if (!a9) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    double v19 = a9;
    if (!a9) {
      goto LABEL_3;
    }
  }
  operator delete(v19);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E2AD1A4(uint64_t a1)
{
  *(void *)a1 = &unk_1EF0A84F8;
  uint64_t v2 = *(char ***)(a1 + 10672);
  if (v2)
  {
    uint64_t v3 = *(char ***)(a1 + 10680);
    uint64_t v4 = v2;
    if (v3 != v2)
    {
      do
        uint64_t v3 = sub_19E2470C8(v3 - 12);
      while (v3 != v2);
      uint64_t v4 = *(char ***)(a1 + 10672);
    }
    *(void *)(a1 + 10680) = v2;
    operator delete(v4);
  }
  std::random_device::~random_device((std::random_device *)(a1 + 10664));
  std::random_device::~random_device((std::random_device *)(a1 + 8120));
  std::random_device::~random_device((std::random_device *)(a1 + 5600));
  std::random_device::~random_device((std::random_device *)(a1 + 3072));
  uint64_t v5 = *(void *)(a1 + 560);
  *(void *)(a1 + 560) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *(void *)(a1 + 480) = &unk_1EF0A7CA0;
  uint64_t v6 = *(void **)(a1 + 496);
  if (v6)
  {
    *(void *)(a1 + 504) = v6;
    operator delete(v6);
  }
  sub_19E2A3E04((void *)(a1 + 176));
  uint64_t v7 = *(void *)(a1 + 152);
  if (v7)
  {
    uint64_t v8 = *(void *)(a1 + 160);
    uint64_t v9 = *(void **)(a1 + 152);
    if (v8 != v7)
    {
      uint64_t v10 = *(void *)(a1 + 160);
      do
      {
        int64x2_t v12 = *(void **)(v10 - 56);
        v10 -= 56;
        long long v11 = v12;
        if (v12)
        {
          *(void *)(v8 - 48) = v11;
          operator delete(v11);
        }
        uint64_t v8 = v10;
      }
      while (v10 != v7);
      uint64_t v9 = *(void **)(a1 + 152);
    }
    *(void *)(a1 + 160) = v7;
    operator delete(v9);
  }
  *(void *)a1 = &unk_1EF0A8318;
  sub_19E2934EC(a1 + 32);
  float64x2_t v13 = *(char ***)(a1 + 8);
  if (v13)
  {
    float64x2_t v14 = *(char ***)(a1 + 16);
    float64x2_t v15 = *(void **)(a1 + 8);
    if (v14 != v13)
    {
      do
        float64x2_t v14 = sub_19E2470C8(v14 - 13);
      while (v14 != v13);
      float64x2_t v15 = *(void **)(a1 + 8);
    }
    *(void *)(a1 + 16) = v13;
    operator delete(v15);
  }
  return a1;
}

void sub_19E2AD360(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t *)(a1 + 72);
  uint64_t v4 = *(void *)(a1 + 72);
  int v6 = *(_DWORD *)(a1 + 96);
  int v7 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 96) = v6 + 1;
  *(_DWORD *)(a1 + 100) = v7;
  unint64_t v8 = v7 * (v6 + 1);
  unint64_t v9 = (*(void *)(a1 + 80) - v4) >> 3;
  if (v8 <= v9)
  {
    if (v8 < v9) {
      *(void *)(a1 + 80) = v4 + 8 * v8;
    }
  }
  else
  {
    sub_19E2482DC(a1 + 72, v8 - v9);
    int v6 = *(_DWORD *)(a1 + 96) - 1;
  }
  sub_19E29FAE8(a2, (uint64_t)__p);
  uint64_t v10 = *(int *)(a1 + 100);
  long long v11 = (char *)__p[0];
  if (!v10)
  {
    if (!__p[0]) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  uint64_t v12 = (int)v10 * (uint64_t)v6;
  uint64_t v13 = *v5;
  if (v10 >= 8 && (uint64_t v14 = 8 * v12 + v13, v14 - (unint64_t)__p[0] >= 0x20))
  {
    unint64_t v15 = v10 & 0xFFFFFFFFFFFFFFFCLL;
    double v20 = (long long *)((char *)__p[0] + 16);
    int v21 = (_OWORD *)(v14 + 16);
    unint64_t v22 = v10 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      long long v23 = *v20;
      *(v21 - 1) = *(v20 - 1);
      *int v21 = v23;
      v20 += 2;
      v21 += 2;
      v22 -= 4;
    }
    while (v22);
    if (v15 == v10) {
      goto LABEL_17;
    }
  }
  else
  {
    unint64_t v15 = 0;
  }
  uint64_t v16 = v10 - v15;
  uint64_t v17 = (void *)(v13 + 8 * (v15 + v12));
  double v18 = &v11[8 * v15];
  do
  {
    uint64_t v19 = *(void *)v18;
    v18 += 8;
    *v17++ = v19;
    --v16;
  }
  while (v16);
LABEL_17:
  __p[1] = v11;
  operator delete(v11);
LABEL_18:
  sub_19E2AD49C(a1, 1, 1);
}

void sub_19E2AD49C(uint64_t a1, int a2, int a3)
{
  if (a2)
  {
    uint64_t v5 = (void *)(a1 + 104);
    uint64_t v4 = *(void *)(a1 + 104);
    int v6 = *(_DWORD *)(a1 + 96);
    *(_DWORD *)(a1 + 128) = v6;
    unint64_t v7 = (*(void *)(a1 + 112) - v4) >> 3;
    uint64_t v35 = v6;
    if (v6 <= v7)
    {
      if (v6 < v7) {
        *(void *)(a1 + 112) = v4 + 8 * v6;
      }
    }
    else
    {
      sub_19E2482DC(a1 + 104, v6 - v7);
      int v6 = *(_DWORD *)(a1 + 96);
      uint64_t v35 = v6;
    }
    if (v6)
    {
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      while (1)
      {
        uint64_t v10 = *(void *)(a1 + 72);
        signed int v11 = *(_DWORD *)(a1 + 100);
        double __C = 0;
        unint64_t v41 = 0;
        uint64_t v42 = 0;
        if (v11) {
          break;
        }
        uint64_t v12 = 0;
        double v37 = 0;
        uint64_t v38 = 0;
        __p = 0;
        unsigned int v39 = 0;
LABEL_26:
        double __C = 0;
        vDSP_meanvD(*(const double **)(a1 + 264), 1, (double *)&__C, *(int *)(a1 + 288));
        *(void *)(*v5 + 8 * v9) = __C;
        if (__p)
        {
          double v37 = __p;
          operator delete(__p);
        }
        if (v12) {
          operator delete(v12);
        }
        ++v9;
        v8 += 8;
        if (v9 == v35) {
          goto LABEL_34;
        }
      }
      if (v11 < 0) {
        sub_19E13D694();
      }
      uint64_t v12 = operator new(8 * v11);
      bzero(v12, 8 * v11);
      if (v11 >= 8 && (unint64_t)v12 - v10 - 8 * v9 * v11 >= 0x20)
      {
        unint64_t v13 = v11 & 0xFFFFFFFFFFFFFFFCLL;
        uint64_t v28 = (long long *)(v10 + v8 * v11 + 16);
        unsigned int v29 = v12 + 1;
        unint64_t v30 = v13;
        do
        {
          long long v31 = *v28;
          *(v29 - 1) = *(v28 - 1);
          *unsigned int v29 = v31;
          v28 += 2;
          v29 += 2;
          v30 -= 4;
        }
        while (v30);
        if (v13 == v11)
        {
LABEL_16:
          __p = 0;
          double v37 = 0;
          uint64_t v38 = 0;
          unsigned int v39 = v11;
          sub_19E2482DC((uint64_t)&__p, v11);
          uint64_t v19 = v39;
          if ((int)v39 >= 1)
          {
            uint64_t v20 = 0;
            int v21 = (char *)__p;
            if (v39 < 4) {
              goto LABEL_22;
            }
            if ((unint64_t)((unsigned char *)__p - (unsigned char *)v12) < 0x20) {
              goto LABEL_22;
            }
            unint64_t v22 = 0;
            uint64_t v20 = v39 & 0xFFFFFFFC;
            uint64_t v23 = (8 * v39) & 0x7FFFFFFE0;
            do
            {
              long long v24 = v12[v22 / 0x10 + 1];
              unsigned int v25 = &v21[v22];
              *(_OWORD *)unsigned int v25 = v12[v22 / 0x10];
              *((_OWORD *)v25 + 1) = v24;
              v22 += 32;
            }
            while (v23 != v22);
            if (v20 != v19)
            {
LABEL_22:
              uint64_t v26 = v19 - v20;
              uint64_t v27 = v20 << 32;
              do
              {
                *(void *)&v21[v27 >> 29] = *(void *)((char *)v12 + (v27 >> 29));
                v27 += 0x100000000;
                --v26;
              }
              while (v26);
            }
          }
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v13 = 0;
      }
      unint64_t v14 = v11 - v13;
      uint64_t v15 = 8 * v13;
      uint64_t v16 = (void *)v12 + v13;
      uint64_t v17 = (uint64_t *)(v10 + v15 + v8 * v11);
      do
      {
        uint64_t v18 = *v17++;
        *v16++ = v18;
        --v14;
      }
      while (v14);
      goto LABEL_16;
    }
  }
LABEL_34:
  sub_19E2AD81C(a1 + 8, (uint64_t *)(a1 + 72), (uint64_t)&__C);
  if ((char **)(a1 + 136) != &__C) {
    sub_19E1E5B9C((void *)(a1 + 136), __C, v41, (v41 - __C) >> 3);
  }
  uint64_t v32 = __C;
  *(void *)(a1 + 160) = v43;
  if (v32)
  {
    unint64_t v41 = v32;
    operator delete(v32);
  }
  sub_19E2A4E4C(a1 + 136, (uint64_t)&__C);
  if ((char **)(a1 + 168) != &__C) {
    sub_19E1E5B9C((void *)(a1 + 168), __C, v41, (v41 - __C) >> 3);
  }
  uint64_t v33 = __C;
  *(void *)(a1 + 192) = v43;
  if (v33)
  {
    unint64_t v41 = v33;
    operator delete(v33);
  }
  sub_19E2ADCE0(a1);
  if (a3) {
    sub_19E2ADF04((int32x2_t *)a1);
  }
}

void sub_19E2AD7B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2AD81C(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *((unsigned int *)a2 + 6);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  if (!v4)
  {
    unint64_t v7 = 0;
    *(_DWORD *)(a3 + 24) = 0;
    *(_DWORD *)(a3 + 28) = 0;
LABEL_41:
    uint64_t v41 = (int)v4;
    if (v4) {
      goto LABEL_42;
    }
    return;
  }
  size_t v6 = 8 * (v4 * v4);
  unint64_t v7 = (char *)operator new(v6);
  *(void *)a3 = v7;
  *(void *)(a3 + 16) = &v7[v6];
  bzero(v7, v6);
  *(void *)(a3 + 8) = &v7[v6];
  *(_DWORD *)(a3 + 24) = v4;
  *(_DWORD *)(a3 + 28) = v4;
  if ((int)v4 <= 0) {
    goto LABEL_41;
  }
  uint64_t v49 = 0;
  uint64_t v8 = 0;
  uint64_t v52 = 1;
  uint64_t v47 = v4;
  uint64_t v48 = a1;
  do
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v51 = (int)v8 * v4;
    do
    {
      uint64_t v11 = *a2;
      signed int v12 = *((_DWORD *)a2 + 7);
      __p = 0;
      unsigned __int8 v58 = 0;
      unint64_t v59 = 0;
      if (v12)
      {
        if (v12 < 0) {
          sub_19E13D694();
        }
        unint64_t v13 = v7;
        size_t v14 = 8 * v12;
        uint64_t v15 = operator new(v14);
        bzero(v15, v14);
        if (v12 < 8 || (unint64_t)v15 - v11 - 8 * v8 * v12 < 0x20)
        {
          unint64_t v16 = 0;
          goto LABEL_12;
        }
        unint64_t v16 = v12 & 0xFFFFFFFFFFFFFFFCLL;
        uint64_t v33 = (long long *)(v11 + v49 * v12 + 16);
        BOOL v34 = v15 + 1;
        unint64_t v35 = v16;
        do
        {
          long long v36 = *v33;
          *(v34 - 1) = *(v33 - 1);
          *BOOL v34 = v36;
          v33 += 2;
          v34 += 2;
          v35 -= 4;
        }
        while (v35);
        if (v16 != v12)
        {
LABEL_12:
          unint64_t v17 = v12 - v16;
          uint64_t v18 = 8 * v16;
          uint64_t v19 = (void *)v15 + v16;
          uint64_t v20 = (uint64_t *)(v11 + v18 + v49 * v12);
          do
          {
            uint64_t v21 = *v20++;
            *v19++ = v21;
            --v17;
          }
          while (v17);
        }
        uint64_t v53 = 0;
        long long v54 = 0;
        signed int v56 = 0;
        int v55 = 0;
        uint64_t v53 = operator new(8 * v12);
        long long v54 = (char *)v53 + v14;
        int v55 = (char *)v53 + 8 * v12;
        signed int v56 = v12;
        memcpy(v53, v15, 8 * v12);
        unint64_t v22 = operator new(8 * v12);
        bzero(v22, 8 * v12);
        if (v12 < 8 || (unint64_t)v22 - v11 - 8 * v10 * v12 < 0x20)
        {
          unint64_t v23 = 0;
          goto LABEL_17;
        }
        unint64_t v23 = v12 & 0xFFFFFFFFFFFFFFFCLL;
        double v37 = (long long *)(v11 + v9 * v12 + 16);
        uint64_t v38 = v22 + 1;
        unint64_t v39 = v23;
        do
        {
          long long v40 = *v37;
          *(v38 - 1) = *(v37 - 1);
          *uint64_t v38 = v40;
          v37 += 2;
          v38 += 2;
          v39 -= 4;
        }
        while (v39);
        if (v23 != v12)
        {
LABEL_17:
          unint64_t v24 = v12 - v23;
          uint64_t v25 = 8 * v23;
          uint64_t v26 = (void *)v22 + v23;
          uint64_t v27 = (uint64_t *)(v11 + v25 + v9 * v12);
          do
          {
            uint64_t v28 = *v27++;
            *v26++ = v28;
            --v24;
          }
          while (v24);
        }
        __p = 0;
        unsigned __int8 v58 = 0;
        signed int v60 = 0;
        unint64_t v59 = 0;
        uint64_t v29 = (int)v10;
        __p = operator new(8 * v12);
        unsigned __int8 v58 = (char *)__p + v14;
        unint64_t v59 = (char *)__p + 8 * v12;
        signed int v60 = v12;
        memcpy(__p, v22, 8 * v12);
        unint64_t v7 = v13;
        a1 = v48;
        goto LABEL_21;
      }
      uint64_t v15 = 0;
      unint64_t v22 = 0;
      long long v54 = 0;
      int v55 = 0;
      uint64_t v53 = 0;
      signed int v56 = 0;
      uint64_t v29 = (int)v10;
      __p = 0;
      unsigned __int8 v58 = 0;
      signed int v60 = 0;
      unint64_t v59 = 0;
LABEL_21:
      double v30 = *(double *)(a1 + 16);
      double v31 = sub_19E2AA334(a1, (uint64_t)&v53, (const double **)&__p);
      double v32 = exp(v31 * -0.5) * v30;
      if (v8 == v10) {
        double v32 = v32 + *(double *)(a1 + 8) + 1.0e-10;
      }
      *(double *)&v7[8 * v29 + 8 * v51] = v32;
      if (__p)
      {
        unsigned __int8 v58 = (char *)__p;
        operator delete(__p);
      }
      if (v22) {
        operator delete(v22);
      }
      if (v53)
      {
        long long v54 = (char *)v53;
        operator delete(v53);
      }
      if (v15) {
        operator delete(v15);
      }
      ++v10;
      v9 += 8;
    }
    while (v10 != v52);
    ++v8;
    ++v52;
    v49 += 8;
    uint64_t v4 = v47;
  }
  while (v8 != v47);
  uint64_t v41 = v47;
LABEL_42:
  if (v41 != 1)
  {
    uint64_t v42 = 0;
    uint64_t v43 = 8 * v41;
    int64_t v44 = v7;
    do
    {
      if (v42)
      {
        uint64_t v45 = 0;
        unint64_t v46 = v44;
        do
        {
          *unint64_t v46 = *(void *)&v7[8 * v45++];
          unint64_t v46 = (void *)((char *)v46 + v43);
        }
        while (v42 != v45);
      }
      ++v42;
      ++v44;
      v7 += v43;
    }
    while (v42 != v41);
  }
}

void sub_19E2ADC3C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E13A9BC(a1);
}

void sub_19E2ADC64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v27 = a10;
    if (!v25)
    {
LABEL_3:
      uint64_t v28 = a18;
      if (!a18) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v27 = a10;
    if (!v25) {
      goto LABEL_3;
    }
  }
  operator delete(v25);
  uint64_t v28 = a18;
  if (!a18)
  {
LABEL_4:
    if (!v23) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  operator delete(v28);
  if (!v23)
  {
LABEL_5:
    *(void *)(v27 + 8) = v24;
    operator delete(v24);
    _Unwind_Resume(a1);
  }
LABEL_9:
  operator delete(v23);
  *(void *)(v27 + 8) = v24;
  operator delete(v24);
  _Unwind_Resume(a1);
}

void sub_19E2ADCE0(uint64_t a1)
{
  sub_19E29F880(a1 + 168, (uint64_t)v22);
  uint64_t v2 = *(unsigned int *)(a1 + 192);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 0;
    int v4 = *(_DWORD *)(a1 + 196);
    int v5 = v23;
    int v6 = 1;
    int v7 = -1;
    uint64_t v8 = v22[0];
    do
    {
      if (v4 <= v6) {
        int v9 = v6;
      }
      else {
        int v9 = v4;
      }
      int v10 = v3 + 1;
      if ((int)v3 + 1 >= v4) {
        goto LABEL_3;
      }
      unsigned int v11 = 0;
      int v12 = v9 + v7;
      uint64_t v13 = (int)v3 * (uint64_t)v5;
      if ((v9 + v7) < 4)
      {
        int v14 = v3 + 1;
      }
      else
      {
        int v14 = v3 + 1;
        if (v9 - (int)v3 + v6 - 2 >= v6)
        {
          int v15 = 0;
          unsigned int v11 = v12 & 0xFFFFFFFC;
          int v14 = v10 + (v12 & 0xFFFFFFFC);
          do
          {
            unint64_t v16 = &v8[v13 + v6 + v15];
            *unint64_t v16 = 0uLL;
            v16[1] = 0uLL;
            v15 += 4;
          }
          while ((v12 & 0xFFFFFFFC) != v15);
          if (v12 == v11) {
            goto LABEL_3;
          }
        }
      }
      unsigned int v17 = v9 - v11;
      do
      {
        v8[v13 + v14] = 0;
        int v14 = ++v11 + v10;
        --v17;
      }
      while (v6 != v17);
LABEL_3:
      ++v3;
      ++v6;
      --v7;
    }
    while (v3 != v2);
  }
  sub_19E2AE16C(a1, (uint64_t)v18);
  sub_19E29F6FC((uint64_t)v22, (uint64_t)v18, (uint64_t)&__p);
  if ((void **)(a1 + 232) != &__p) {
    sub_19E1E5B9C((void *)(a1 + 232), (char *)__p, v20, (v20 - (unsigned char *)__p) >> 3);
  }
  *(_DWORD *)(a1 + 256) = v21;
  if (__p)
  {
    uint64_t v20 = (char *)__p;
    operator delete(__p);
  }
  if (v18[0])
  {
    v18[1] = v18[0];
    operator delete(v18[0]);
  }
  sub_19E29FC64((uint64_t)v22, &__p);
  sub_19E2A58A8((uint64_t)&__p, a1 + 232);
  if (__p)
  {
    uint64_t v20 = (char *)__p;
    operator delete(__p);
  }
  if (v22[0])
  {
    v22[1] = v22[0];
    operator delete(v22[0]);
  }
}

void sub_19E2ADEA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  if (a17) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2ADF04(int32x2_t *a1)
{
  uint64_t v2 = a1[12].u32[0];
  sub_19E242424(v2, v2, (uint64_t)&__p);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = v29.i32[1] + 1;
    int v4 = __p;
    if (v2 == 1)
    {
      uint64_t v5 = 0;
LABEL_7:
      uint64_t v8 = v2 - v5;
      uint64_t v9 = v5 << 32;
      do
      {
        v4[(v9 >> 32) * v3] = 0x3FF0000000000000;
        v9 += 0x100000000;
        --v8;
      }
      while (v8);
      goto LABEL_9;
    }
    uint64_t v6 = 0;
    uint64_t v5 = v2 & 0xFFFFFFFE;
    uint64_t v7 = v5;
    do
    {
      v4[(v6 >> 32) * v3] = 0x3FF0000000000000;
      v4[((v6 >> 32) | 1) * v3] = 0x3FF0000000000000;
      v6 += 0x200000000;
      v7 -= 2;
    }
    while (v7);
    if (v5 != v2) {
      goto LABEL_7;
    }
  }
LABEL_9:
  if (&a1[25] != (int32x2_t *)&__p) {
    sub_19E1E5B9C(&a1[25], (char *)__p, v28, (v28 - (unsigned char *)__p) >> 3);
  }
  int v10 = (char *)__p;
  a1[28] = v29;
  if (v10)
  {
    uint64_t v28 = v10;
    operator delete(v10);
  }
  sub_19E29F880((uint64_t)&a1[21], (uint64_t)&__p);
  uint64_t v11 = a1[24].u32[0];
  if ((int)v11 >= 1)
  {
    uint64_t v12 = 0;
    int v13 = a1[24].i32[1];
    __int32 v14 = v29.i32[1];
    int v15 = 1;
    int v16 = -1;
    unsigned int v17 = __p;
    do
    {
      if (v13 <= v15) {
        int v18 = v15;
      }
      else {
        int v18 = v13;
      }
      int v19 = v12 + 1;
      if ((int)v12 + 1 >= v13) {
        goto LABEL_15;
      }
      unsigned int v20 = 0;
      int v21 = v18 + v16;
      uint64_t v22 = (int)v12 * (uint64_t)v14;
      if ((v18 + v16) < 4)
      {
        int v23 = v12 + 1;
      }
      else
      {
        int v23 = v12 + 1;
        if (v18 - (int)v12 + v15 - 2 >= v15)
        {
          int v24 = 0;
          unsigned int v20 = v21 & 0xFFFFFFFC;
          int v23 = v19 + (v21 & 0xFFFFFFFC);
          do
          {
            uint64_t v25 = &v17[v22 + v15 + v24];
            _OWORD *v25 = 0uLL;
            v25[1] = 0uLL;
            v24 += 4;
          }
          while ((v21 & 0xFFFFFFFC) != v24);
          if (v21 == v20) {
            goto LABEL_15;
          }
        }
      }
      unsigned int v26 = v18 - v20;
      do
      {
        v17[v22 + v23] = 0;
        int v23 = ++v20 + v19;
        --v26;
      }
      while (v15 != v26);
LABEL_15:
      ++v12;
      ++v15;
      --v16;
    }
    while (v12 != v11);
  }
  sub_19E2A59C0((uint64_t)&__p, a1 + 25);
  if (__p)
  {
    uint64_t v28 = (char *)__p;
    operator delete(__p);
  }
  sub_19E29FC64((uint64_t)&a1[21], &__p);
  sub_19E2A59C0((uint64_t)&__p, a1 + 25);
  if (__p)
  {
    uint64_t v28 = (char *)__p;
    operator delete(__p);
  }
}

void sub_19E2AE148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2AE16C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  signed int v4 = *(_DWORD *)(a1 + 288);
  uint64_t v5 = 8 * v4;
  if (v4)
  {
    if (v4 < 0) {
      sub_19E13D694();
    }
    uint64_t v6 = (char *)operator new(8 * v4);
    bzero(v6, 8 * v4);
    unint64_t v7 = 0;
    uint64_t v8 = &v6[v5];
    uint64_t v9 = *(void *)(a1 + 264);
    if (v4 < 4) {
      goto LABEL_48;
    }
    if ((unint64_t)&v6[-v9] < 0x20) {
      goto LABEL_48;
    }
    uint64_t v10 = 0;
    unint64_t v7 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v11 = v7;
    do
    {
      long long v12 = *(_OWORD *)(v9 + v10 + 16);
      int v13 = &v6[v10];
      *(_OWORD *)int v13 = *(_OWORD *)(v9 + v10);
      *((_OWORD *)v13 + 1) = v12;
      v10 += 32;
      v11 -= 4;
    }
    while (v11);
    if (v7 != v4)
    {
LABEL_48:
      do
      {
        *(void *)&v6[8 * v7] = *(void *)(v9 + 8 * v7);
        ++v7;
      }
      while (v4 != v7);
    }
    uint64_t v14 = *(int *)(a1 + 128);
    if (v14) {
      goto LABEL_10;
    }
LABEL_19:
    int v15 = 0;
    goto LABEL_20;
  }
  uint64_t v8 = 0;
  uint64_t v6 = 0;
  uint64_t v14 = *(int *)(a1 + 128);
  if (!v14) {
    goto LABEL_19;
  }
LABEL_10:
  if ((v14 & 0x80000000) != 0) {
    sub_19E13D694();
  }
  int v15 = (char *)operator new(8 * v14);
  bzero(v15, 8 * v14);
  unint64_t v16 = 0;
  uint64_t v17 = *(void *)(a1 + 104);
  if (v14 < 4) {
    goto LABEL_49;
  }
  if ((unint64_t)&v15[-v17] < 0x20) {
    goto LABEL_49;
  }
  uint64_t v18 = 0;
  unint64_t v16 = v14 & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v19 = v14 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    long long v20 = *(_OWORD *)(v17 + v18 + 16);
    int v21 = &v15[v18];
    *(_OWORD *)int v21 = *(_OWORD *)(v17 + v18);
    *((_OWORD *)v21 + 1) = v20;
    v18 += 32;
    v19 -= 4;
  }
  while (v19);
  if (v16 != v14)
  {
LABEL_49:
    do
    {
      *(void *)&v15[8 * v16] = *(void *)(v17 + 8 * v16);
      ++v16;
    }
    while (v14 != v16);
  }
LABEL_20:
  vDSP_vsubD((const double *)v15, 1, (const double *)v6, 1, (double *)v6, 1, v4);
  if (v8 != v6)
  {
    if (v8 - v6 < 0) {
      sub_19E13D694();
    }
    uint64_t v22 = (char *)operator new(v8 - v6);
    memcpy(v22, v6, v8 - v6);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)a2 = 0;
    if (!v4)
    {
      *(_DWORD *)(a2 + 24) = 0;
      operator delete(v22);
      if (!v15) {
        goto LABEL_35;
      }
LABEL_34:
      operator delete(v15);
      goto LABEL_35;
    }
LABEL_26:
    if (v4 < 0) {
      sub_19E13D694();
    }
    int v23 = (char *)operator new(8 * v4);
    *(void *)a2 = v23;
    *(void *)(a2 + 16) = &v23[8 * v4];
    bzero(v23, 8 * v4);
    *(void *)(a2 + 8) = &v23[v5];
    *(_DWORD *)(a2 + 24) = v4;
    if (v4 >= 4)
    {
      uint64_t v25 = 0;
      unint64_t v24 = v4 & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v26 = v24;
      do
      {
        long long v27 = *(_OWORD *)&v22[v25 + 16];
        uint64_t v28 = &v23[v25];
        *(_OWORD *)uint64_t v28 = *(_OWORD *)&v22[v25];
        *((_OWORD *)v28 + 1) = v27;
        v25 += 32;
        v26 -= 4;
      }
      while (v26);
      if (v24 == v4)
      {
LABEL_33:
        operator delete(v22);
        if (!v15) {
          goto LABEL_35;
        }
        goto LABEL_34;
      }
    }
    else
    {
      unint64_t v24 = 0;
    }
    do
    {
      *(void *)&v23[8 * v24] = *(void *)&v22[8 * v24];
      ++v24;
    }
    while (v4 != v24);
    goto LABEL_33;
  }
  uint64_t v22 = 0;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  if (v4) {
    goto LABEL_26;
  }
  *(_DWORD *)(a2 + 24) = 0;
  if (v15) {
    goto LABEL_34;
  }
LABEL_35:
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_19E2AE4A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (v19)
  {
    operator delete(v19);
    if (!v18) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if (!v18)
  {
    goto LABEL_3;
  }
  operator delete(v18);
  _Unwind_Resume(exception_object);
}

void sub_19E2AE508(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  if (a9) {
    operator delete(a9);
  }
  sub_19E13A9BC(a1);
}

void sub_19E2AE51C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13) {
    JUMPOUT(0x19E2AE52CLL);
  }
  JUMPOUT(0x19E2AE530);
}

void sub_19E2AE538(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = a2;
  sub_19E2A099C((uint64_t)&v22, 2u);
  uint64_t v3 = operator new(0x10uLL);
  void *v3 = 0;
  v3[1] = 0;
  uint64_t v14 = v3;
  int v15 = v3 + 2;
  unint64_t v16 = v3 + 2;
  int v17 = 2;
  signed int v4 = operator new(0x10uLL);
  __p = v4;
  _OWORD *v4 = xmmword_19E351FE0;
  unint64_t v19 = v4 + 1;
  long long v20 = v4 + 1;
  int v21 = 2;
  *(_OWORD *)uint64_t v3 = xmmword_19E351FF0;
  sub_19E2A16E8((uint64_t)&v22, (uint64_t *)&v14);
  sub_19E2A1818((uint64_t)&v22, (uint64_t *)&__p);
  if (__p)
  {
    unint64_t v19 = __p;
    operator delete(__p);
  }
  if (v14)
  {
    int v15 = v14;
    operator delete(v14);
  }
  uint64_t v6 = *(unsigned char **)(a2 + 40);
  uint64_t v5 = *(unsigned char **)(a2 + 48);
  uint64_t v10 = 0;
  unint64_t v11 = 0;
  long long v12 = 0;
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      sub_19E13D694();
    }
    uint64_t v8 = (char *)operator new(v5 - v6);
    uint64_t v9 = &v8[8 * (v7 >> 3)];
    uint64_t v10 = v8;
    long long v12 = v9;
    memcpy(v8, v6, v7);
    unint64_t v11 = v9;
  }
  int v13 = *(_DWORD *)(a2 + 64);
  sub_19E2AE7F8((uint64_t)&v22, (uint64_t)&v23, (uint64_t)&v10);
}

void sub_19E2AE768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (!__p)
  {
    sub_19E2A0A3C(&a25);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  sub_19E2A0A3C(&a25);
  _Unwind_Resume(a1);
}

void sub_19E2AE7DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  sub_19E242654((uint64_t)va);
  sub_19E2A0A3C((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_19E2AE7F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a1 + 112)) {
    (**(void (***)(uint64_t, void))a1)(a1, *(unsigned int *)(a3 + 24));
  }
  operator new();
}

void sub_19E2AEC8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  __cxa_free_exception(v15);
  if (a2 != 3)
  {
    if (a2 == 2)
    {
      unint64_t v19 = __cxa_begin_catch(a1);
      (*(void (**)(void *))(*(void *)v19 + 16))(v19);
      sub_19E29FAE8(v14, (uint64_t)&a13);
      if (a13)
      {
        a14 = (uint64_t)a13;
        operator delete(a13);
      }
      __cxa_end_catch();
LABEL_13:
      JUMPOUT(0x19E2AEA74);
    }
    if (a2 != 1)
    {
      if (__p) {
        operator delete(__p);
      }
      _Unwind_Resume(a1);
    }
  }
  uint64_t v18 = __cxa_begin_catch(a1);
  (*(void (**)(void *))(*(void *)v18 + 16))(v18);
  __cxa_end_catch();
  goto LABEL_13;
}

double sub_19E2AEDDC(uint64_t **a1, uint64_t *a2, int **a3)
{
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v7 = (char *)v5 - (char *)*a1;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  long long v40 = 0;
  int v43 = 0;
  double v33 = 0.0;
  __p = 0;
  unint64_t v35 = 0;
  if (!(v7 >> 3))
  {
    uint64_t v8 = 0;
    long long v40 = 0;
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    int v43 = v7 >> 3;
    if (v6 == v5) {
      goto LABEL_13;
    }
    goto LABEL_6;
  }
  if (((v7 >> 3) & 0x80000000) != 0) {
    sub_19E13D694();
  }
  uint64_t v8 = operator new((uint64_t)(v7 << 29) >> 29);
  bzero(v8, (uint64_t)(v7 << 29) >> 29);
  long long v40 = v8;
  uint64_t v41 = (char *)v8 + ((uint64_t)(v7 << 29) >> 29);
  uint64_t v42 = (char *)v8 + 8 * (int)((uint64_t)v7 >> 3);
  int v43 = v7 >> 3;
  if (v6 != v5)
  {
LABEL_6:
    uint64_t v9 = 0;
    if (v7 - 8 < 0x18) {
      goto LABEL_11;
    }
    if ((unint64_t)((char *)v8 - (char *)v6) < 0x20) {
      goto LABEL_11;
    }
    unint64_t v10 = ((v7 - 8) >> 3) + 1;
    uint64_t v9 = v10 & 0x3FFFFFFFFFFFFFFCLL;
    unint64_t v11 = v8 + 1;
    uint64_t v12 = (long long *)(v6 + 2);
    uint64_t v13 = v10 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v14 = *v12;
      *(v11 - 1) = *(v12 - 1);
      *unint64_t v11 = v14;
      v11 += 2;
      v12 += 2;
      v13 -= 4;
    }
    while (v13);
    v6 += v10 & 0x3FFFFFFFFFFFFFFCLL;
    if (v10 != v9)
    {
LABEL_11:
      uint64_t v15 = (void *)v8 + v9;
      do
      {
        uint64_t v16 = *v6++;
        *v15++ = v16;
      }
      while (v6 != v5);
    }
  }
LABEL_13:
  if (*a2 == a2[1])
  {
    sub_19E2AF0D4(a3, (uint64_t)&v40, 0, (uint64_t)&v33);
    double v17 = v33;
    if (v36)
    {
      double v31 = __p;
      if (__p)
      {
        unint64_t v35 = __p;
        goto LABEL_31;
      }
    }
  }
  else
  {
    LOBYTE(v37[0]) = 0;
    char v39 = 0;
    sub_19E2AF0D4(a3, (uint64_t)&v40, 1, (uint64_t)&v33);
    double v17 = v33;
    sub_19E2A7CB8((uint64_t)v37, (uint64_t)&__p);
    if (v36 && __p)
    {
      unint64_t v35 = __p;
      operator delete(__p);
    }
    uint64_t v18 = v38;
    if (v38)
    {
      unint64_t v19 = 0;
      uint64_t v20 = v37[0];
      uint64_t v21 = *a2;
      if (v38 < 4) {
        goto LABEL_23;
      }
      if ((unint64_t)(v21 - v37[0]) < 0x20) {
        goto LABEL_23;
      }
      unint64_t v19 = v38 & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v22 = (long long *)(v37[0] + 16);
      uint64_t v23 = (_OWORD *)(v21 + 16);
      unint64_t v24 = v19;
      do
      {
        long long v25 = *v22;
        *(v23 - 1) = *(v22 - 1);
        _OWORD *v23 = v25;
        v22 += 2;
        v23 += 2;
        v24 -= 4;
      }
      while (v24);
      if (v19 != v18)
      {
LABEL_23:
        uint64_t v26 = v18 - v19;
        uint64_t v27 = 8 * v19;
        uint64_t v28 = (void *)(v21 + 8 * v19);
        int32x2_t v29 = (uint64_t *)(v20 + v27);
        do
        {
          uint64_t v30 = *v29++;
          *v28++ = v30;
          --v26;
        }
        while (v26);
      }
    }
    if (v39)
    {
      double v31 = (void *)v37[0];
      if (v37[0])
      {
        v37[1] = v37[0];
LABEL_31:
        operator delete(v31);
      }
    }
  }
  if (v40)
  {
    uint64_t v41 = (char *)v40;
    operator delete(v40);
  }
  return v17;
}

void sub_19E2AF05C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,void *__p,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2AF0B8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E13A9BC(a1);
}

void *sub_19E2AF0D4@<X0>(int **a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  sub_19E2AFF68((uint64_t)v18, *a1);
  if (v19 != (void *)a2) {
    sub_19E1E5B9C(v19, *(char **)a2, *(char **)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  }
  int v20 = *(_DWORD *)(a2 + 24);
  unint64_t v7 = *(char **)a2;
  v18[3] = exp(*(double *)v7 + *(double *)v7);
  v18[4] = exp(*((long double *)v7 + 1));
  sub_19E2AD49C((uint64_t)v18, 0, a3);
  double v8 = sub_19E2AF2B0((uint64_t)v18);
  double v9 = v8;
  if (a3)
  {
    sub_19E2AF4E0((uint64_t)v18, (uint64_t)&v15);
    *(void *)(a4 + 8) = 0;
    *(double *)a4 = v9;
    *(void *)(a4 + 16) = 0;
    *(void *)(a4 + 24) = 0;
    unint64_t v10 = v15;
    int64_t v11 = v16 - v15;
    if (v16 != v15)
    {
      if (v11 < 0) {
        sub_19E13D694();
      }
      uint64_t v12 = (char *)operator new(v16 - v15);
      *(void *)(a4 + 8) = v12;
      uint64_t v13 = &v12[8 * (v11 >> 3)];
      *(void *)(a4 + 24) = v13;
      memcpy(v12, v10, v11);
      *(void *)(a4 + 16) = v13;
    }
    *(_DWORD *)(a4 + 32) = v17;
    *(unsigned char *)(a4 + 40) = 1;
    if (v10)
    {
      uint64_t v16 = v10;
      operator delete(v10);
    }
  }
  else
  {
    *(double *)a4 = v8;
    *(unsigned char *)(a4 + 8) = 0;
    *(unsigned char *)(a4 + 40) = 0;
  }
  return sub_19E2A3E04(v18);
}

void sub_19E2AF228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_19E2A3E04((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19E2AF23C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v16 = *v14;
  if (*v14)
  {
    *(void *)(v13 + 16) = v16;
    operator delete(v16);
    int v17 = __p;
    if (!__p)
    {
LABEL_3:
      sub_19E2A3E04(&a13);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    int v17 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  operator delete(v17);
  sub_19E2A3E04(&a13);
  _Unwind_Resume(a1);
}

void sub_19E2AF288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_19E2A3E04((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19E2AF29C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_19E2A3E04((uint64_t *)va);
  _Unwind_Resume(a1);
}

double sub_19E2AF2B0(uint64_t a1)
{
  sub_19E2AE16C(a1, (uint64_t)&__A);
  __C[0] = 0;
  vDSP_dotprD(__A, 1, *(const double **)(a1 + 232), 1, (double *)__C, (int)__N);
  uint64_t v2 = __C[0];
  if (__A)
  {
    int v17 = __A;
    operator delete(__A);
  }
  uint64_t v3 = *(int *)(a1 + 196);
  if ((int)v3 >= *(_DWORD *)(a1 + 192)) {
    int v4 = *(_DWORD *)(a1 + 192);
  }
  else {
    int v4 = *(_DWORD *)(a1 + 196);
  }
  __A = 0;
  int v17 = 0;
  uint64_t v18 = 0;
  if (v4)
  {
    if (v4 < 0) {
      sub_19E13D694();
    }
    uint64_t v5 = operator new(8 * v4);
    bzero(v5, 8 * v4);
    uint64_t v6 = 0;
    unint64_t v7 = *(void **)(a1 + 168);
    do
    {
      *((void *)v5 + v6++) = *v7;
      v7 += v3 + 1;
    }
    while (v4 != v6);
    __p = operator new(8 * v4);
    int64_t v11 = (char *)__p + 8 * v4;
    uint64_t v12 = v11;
    int v13 = v4;
    memcpy(__p, v5, 8 * v4);
  }
  else
  {
    uint64_t v5 = 0;
    int64_t v11 = 0;
    uint64_t v12 = 0;
    __p = 0;
    int v13 = 0;
  }
  sub_19E2A7AC4((uint64_t)&__p, (uint64_t)__C);
  __A = 0;
  vDSP_sveD((const double *)__C[0], 1, (double *)&__A, (int)v15);
  double v8 = __A;
  if (__C[0])
  {
    __C[1] = __C[0];
    operator delete(__C[0]);
  }
  if (__p)
  {
    int64_t v11 = (char *)__p;
    operator delete(__p);
  }
  if (v5) {
    operator delete(v5);
  }
  return (double)*(int *)(a1 + 96) * -0.918938533 - (*(double *)&v8 - *(double *)&v2 * -0.5);
}

void sub_19E2AF458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (__p)
  {
    operator delete(__p);
    int v20 = a9;
    if (!a9)
    {
LABEL_3:
      if (!v18) {
LABEL_8:
      }
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(v18);
      goto LABEL_8;
    }
  }
  else
  {
    int v20 = a9;
    if (!a9) {
      goto LABEL_3;
    }
  }
  operator delete(v20);
  if (!v18) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void sub_19E2AF4C4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E13A9BC(a1);
}

void sub_19E2AF4E0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v103 = 0;
  uint64_t v104 = 0;
  uint64_t v105 = 0;
  uint64_t v3 = *(unsigned char **)(a1 + 200);
  uint64_t v2 = *(unsigned char **)(a1 + 208);
  int64_t v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0) {
      sub_19E13D694();
    }
    uint64_t v5 = (double *)operator new(v2 - v3);
    uint64_t v6 = &v5[v4 >> 3];
    uint64_t v103 = v5;
    uint64_t v105 = v6;
    memcpy(v5, v3, v4);
    uint64_t v104 = v6;
  }
  unint64_t v106 = *(void *)(a1 + 224);
  uint64_t v88 = 0;
  size_t v89 = 0;
  unint64_t v87 = 0;
  double v8 = *(unsigned char **)(a1 + 232);
  unint64_t v7 = *(unsigned char **)(a1 + 240);
  int64_t v9 = v7 - v8;
  if (v7 != v8)
  {
    if (v9 < 0) {
      sub_19E13D694();
    }
    unint64_t v10 = (char *)operator new(v7 - v8);
    int64_t v11 = &v10[8 * (v9 >> 3)];
    unint64_t v87 = v10;
    size_t v89 = v11;
    memcpy(v10, v8, v9);
    uint64_t v88 = v11;
  }
  int v90 = *(_DWORD *)(a1 + 256);
  sub_19E29FAE8(a1 + 232, (uint64_t)v86);
  sub_19E2A7BA8((uint64_t)&v87, (uint64_t)v86, (uint64_t)&__p);
  unint64_t v95 = 0;
  long long v96 = 0;
  uint64_t v97 = 0;
  uint64_t v12 = __p;
  int64_t v13 = v92 - (unsigned char *)__p;
  if (v92 == __p)
  {
    vDSP_Length v15 = 0;
    long long v14 = 0;
  }
  else
  {
    if (v13 < 0) {
      sub_19E13D694();
    }
    long long v14 = (char *)operator new(v92 - (unsigned char *)__p);
    vDSP_Length v15 = &v14[8 * (v13 >> 3)];
    unint64_t v95 = v14;
    uint64_t v97 = v15;
    memcpy(v14, v12, v13);
    long long v96 = v15;
  }
  unint64_t v16 = v94;
  unint64_t v98 = v94;
  unint64_t v17 = HIDWORD(v94);
  vDSP_Length v18 = HIDWORD(v94) * (int)v94;
  vDSP_vsubD(v103, 1, (const double *)v14, 1, (double *)v14, 1, v18);
  uint64_t v99 = 0;
  size_t v100 = 0;
  uint64_t v101 = 0;
  int64_t v19 = v15 - v14;
  if (!v19)
  {
    int v20 = 0;
    unint64_t v102 = v16;
    int v108 = 0;
    uint64_t v109 = 0;
    double __B = 0.0;
    if (v18) {
      goto LABEL_14;
    }
LABEL_18:
    uint64_t v22 = 0;
    uint64_t v21 = 0;
    unint64_t v110 = __PAIR64__(v17, v16);
    goto LABEL_23;
  }
  if (v19 < 0) {
    sub_19E13D694();
  }
  int v20 = (char *)operator new(v19);
  uint64_t v99 = v20;
  uint64_t v101 = &v20[8 * (v19 >> 3)];
  memcpy(v20, v14, v19);
  size_t v100 = &v20[8 * (v19 >> 3)];
  unint64_t v102 = v16;
  int v108 = 0;
  uint64_t v109 = 0;
  double __B = 0.0;
  if (!v18) {
    goto LABEL_18;
  }
LABEL_14:
  if ((v18 & 0x80000000) != 0) {
    sub_19E13D694();
  }
  uint64_t v21 = (char *)operator new(8 * v18);
  *(void *)&double __B = v21;
  uint64_t v109 = &v21[8 * v18];
  bzero(v21, 8 * v18);
  uint64_t v22 = &v21[8 * v18];
  unint64_t v110 = __PAIR64__(v17, v16);
  if (v18 < 4)
  {
    for (unint64_t i = 0; i != v18; ++i)
LABEL_22:
      *(void *)&v21[8 * i] = *(void *)&v20[8 * i];
    goto LABEL_23;
  }
  uint64_t v24 = 0;
  unint64_t i = v18 & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v25 = v18 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    long long v26 = *(_OWORD *)&v20[v24 + 16];
    uint64_t v27 = &v21[v24];
    *(_OWORD *)uint64_t v27 = *(_OWORD *)&v20[v24];
    *((_OWORD *)v27 + 1) = v26;
    v24 += 32;
    v25 -= 4;
  }
  while (v25);
  if (i != v18) {
    goto LABEL_22;
  }
LABEL_23:
  sub_19E1E5B9C(&v103, v21, v22, (v22 - v21) >> 3);
  unint64_t v106 = v110;
  if (v21)
  {
    int v108 = v21;
    operator delete(v21);
  }
  if (v20)
  {
    size_t v100 = v20;
    operator delete(v20);
  }
  if (v14)
  {
    long long v96 = v14;
    operator delete(v14);
  }
  if (__p)
  {
    v92 = (char *)__p;
    operator delete(__p);
  }
  if (v86[0])
  {
    v86[1] = v86[0];
    operator delete(v86[0]);
  }
  if (v87)
  {
    uint64_t v88 = v87;
    operator delete(v87);
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v28 = operator new(0x10uLL);
  *(void *)(a2 + 8) = v28 + 2;
  *(void *)(a2 + 16) = v28 + 2;
  *(void *)a2 = v28;
  *(_DWORD *)(a2 + 24) = 2;
  void *v28 = 0;
  v28[1] = 0;
  uint64_t v82 = *(int *)(a1 + 96);
  if (v82)
  {
    unint64_t v29 = 0;
    uint64_t v83 = 0;
    do
    {
      uint64_t v30 = 0;
      unint64_t v31 = 0;
      do
      {
        uint64_t v32 = *(void *)(a1 + 72);
        uint64_t v33 = *(unsigned int *)(a1 + 100);
        double __B = 0.0;
        int v108 = 0;
        uint64_t v109 = 0;
        if (!v33)
        {
          BOOL v34 = 0;
          size_t v100 = 0;
          uint64_t v101 = 0;
          uint64_t v99 = 0;
          LODWORD(v102) = 0;
LABEL_68:
          uint64_t v51 = 0;
          v92 = 0;
          unint64_t v93 = 0;
          __p = 0;
          LODWORD(v94) = 0;
          goto LABEL_72;
        }
        if ((v33 & 0x80000000) != 0) {
          sub_19E13D694();
        }
        BOOL v34 = operator new(8 * (int)v33);
        bzero(v34, 8 * (int)v33);
        if (v33 < 8 || (unint64_t)v34 - v32 - 8 * v29 * (int)v33 < 0x20)
        {
          unint64_t v35 = 0;
LABEL_45:
          unint64_t v36 = (int)v33 - v35;
          uint64_t v37 = 8 * v35;
          signed int v38 = (void *)v34 + v35;
          char v39 = (uint64_t *)(v32 + v37 + v83 * (int)v33);
          do
          {
            uint64_t v40 = *v39++;
            *v38++ = v40;
            --v36;
          }
          while (v36);
          goto LABEL_47;
        }
        unint64_t v35 = (int)v33 & 0xFFFFFFFFFFFFFFFCLL;
        uint64_t v74 = (long long *)(v32 + v83 * (int)v33 + 16);
        uint64_t v75 = v34 + 1;
        unint64_t v76 = v35;
        do
        {
          long long v77 = *v74;
          *(v75 - 1) = *(v74 - 1);
          _OWORD *v75 = v77;
          v74 += 2;
          v75 += 2;
          v76 -= 4;
        }
        while (v76);
        if (v35 != (int)v33) {
          goto LABEL_45;
        }
LABEL_47:
        uint64_t v99 = 0;
        size_t v100 = 0;
        uint64_t v101 = 0;
        LODWORD(v102) = v33;
        uint64_t v41 = operator new(8 * (int)v33);
        bzero(v41, 8 * (int)v33);
        uint64_t v99 = v41;
        size_t v100 = (char *)v41 + 8 * (int)v33;
        uint64_t v101 = v100;
        if ((v33 - 6) >= 0x7FFFFFFB)
        {
          uint64_t v42 = 0;
LABEL_54:
          uint64_t v47 = v33 - v42;
          uint64_t v48 = v42 << 32;
          do
          {
            *(void *)((char *)v41 + (v48 >> 29)) = *(void *)((char *)v34 + (v48 >> 29));
            v48 += 0x100000000;
            --v47;
          }
          while (v47);
          goto LABEL_56;
        }
        uint64_t v42 = v33 & 0xFFFFFFFC;
        int v43 = v41 + 1;
        int64_t v44 = v34 + 1;
        uint64_t v45 = v42;
        do
        {
          long long v46 = *v44;
          *(v43 - 1) = *(v44 - 1);
          _OWORD *v43 = v46;
          v43 += 2;
          v44 += 2;
          v45 -= 4;
        }
        while (v45);
        if (v42 != v33) {
          goto LABEL_54;
        }
LABEL_56:
        uint64_t v49 = *(void *)(a1 + 72);
        uint64_t v50 = *(unsigned int *)(a1 + 100);
        double __B = 0.0;
        int v108 = 0;
        uint64_t v109 = 0;
        if (!v50) {
          goto LABEL_68;
        }
        if ((v50 & 0x80000000) != 0) {
          sub_19E13D694();
        }
        uint64_t v51 = operator new(8 * (int)v50);
        bzero(v51, 8 * (int)v50);
        if (v50 < 8 || (unint64_t)v51 - v49 - 8 * v31 * (int)v50 < 0x20)
        {
          unint64_t v52 = 0;
LABEL_61:
          unint64_t v53 = (int)v50 - v52;
          uint64_t v54 = 8 * v52;
          int v55 = (void *)v51 + v52;
          signed int v56 = (uint64_t *)(v49 + v54 + v30 * (int)v50);
          do
          {
            uint64_t v57 = *v56++;
            *v55++ = v57;
            --v53;
          }
          while (v53);
          goto LABEL_63;
        }
        unint64_t v52 = (int)v50 & 0xFFFFFFFFFFFFFFFCLL;
        long long v78 = (long long *)(v49 + v30 * (int)v50 + 16);
        int v79 = v51 + 1;
        unint64_t v80 = v52;
        do
        {
          long long v81 = *v78;
          *(v79 - 1) = *(v78 - 1);
          *int v79 = v81;
          v78 += 2;
          v79 += 2;
          v80 -= 4;
        }
        while (v80);
        if (v52 != (int)v50) {
          goto LABEL_61;
        }
LABEL_63:
        __p = 0;
        v92 = 0;
        unint64_t v93 = 0;
        LODWORD(v94) = v50;
        unsigned __int8 v58 = (char *)operator new(8 * (int)v50);
        bzero(v58, 8 * (int)v50);
        __p = v58;
        v92 = &v58[8 * (int)v50];
        unint64_t v93 = v92;
        if ((v50 - 6) >= 0x7FFFFFFB)
        {
          uint64_t v60 = 0;
LABEL_70:
          uint64_t v63 = v50 - v60;
          uint64_t v64 = v60 << 32;
          do
          {
            *(void *)&v58[v64 >> 29] = *(void *)((char *)v51 + (v64 >> 29));
            v64 += 0x100000000;
            --v63;
          }
          while (v63);
          goto LABEL_72;
        }
        unint64_t v59 = 0;
        uint64_t v60 = v50 & 0xFFFFFFFC;
        do
        {
          long long v61 = v51[v59 / 0x10 + 1];
          long long v62 = &v58[v59];
          *(_OWORD *)long long v62 = v51[v59 / 0x10];
          *((_OWORD *)v62 + 1) = v61;
          v59 += 32;
        }
        while (((8 * v50) & 0x7FFFFFFE0) != v59);
        if (v60 != v50) {
          goto LABEL_70;
        }
LABEL_72:
        uint64_t v65 = (long double *)operator new(0x10uLL);
        long double *v65 = 0.0;
        v65[1] = 0.0;
        double v66 = sub_19E2AA334(a1 + 8, (uint64_t)&v99, (const double **)&__p);
        double v67 = *(double *)(a1 + 24);
        long double v68 = v67 * exp(v66 * -0.5);
        long double *v65 = v68 + v68;
        v65[1] = v68 * v66;
        if (__p)
        {
          v92 = (char *)__p;
          operator delete(__p);
        }
        if (v51) {
          operator delete(v51);
        }
        if (v99)
        {
          size_t v100 = (char *)v99;
          operator delete(v99);
        }
        if (v34) {
          operator delete(v34);
        }
        uint64_t v69 = SHIDWORD(v106);
        unint64_t v70 = v103;
        uint64_t v71 = (double *)operator new(0x10uLL);
        *(_OWORD *)uint64_t v71 = *(_OWORD *)v65;
        if (v29 == v31)
        {
          vDSP_vsmulD(v71, 1, &v70[v29 + v29 * v69], v71, 1, 2uLL);
          uint64_t v72 = (double *)operator new(0x10uLL);
          *(_OWORD *)uint64_t v72 = *(_OWORD *)v71;
          double __B = 0.5;
          vDSP_vsmulD(v72, 1, &__B, v72, 1, 2uLL);
          uint64_t v73 = (double *)operator new(0x10uLL);
          *(_OWORD *)uint64_t v73 = *(_OWORD *)v72;
          vDSP_vaddD(*(const double **)a2, 1, v73, 1, *(double **)a2, 1, 2uLL);
          operator delete(v73);
        }
        else
        {
          vDSP_vsmulD(v71, 1, &v70[v31 + v29 * v69], v71, 1, 2uLL);
          uint64_t v72 = (double *)operator new(0x10uLL);
          *(_OWORD *)uint64_t v72 = *(_OWORD *)v71;
          vDSP_vaddD(*(const double **)a2, 1, v72, 1, *(double **)a2, 1, 2uLL);
        }
        operator delete(v72);
        operator delete(v71);
        operator delete(v65);
        ++v31;
        v30 += 8;
      }
      while (v31 <= v29);
      ++v29;
      v83 += 8;
    }
    while (v29 != v82);
  }
  if (v103)
  {
    uint64_t v104 = v103;
    operator delete(v103);
  }
}

void sub_19E2AFD74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (v35) {
    operator delete(v35);
  }
  if (v34) {
    operator delete(v34);
  }
  if (v33) {
    operator delete(v33);
  }
  if (__p)
  {
    operator delete(__p);
    signed int v38 = a16;
    if (!a16)
    {
LABEL_9:
      char v39 = a20;
      if (!a20)
      {
LABEL_14:
        uint64_t v40 = *(void **)(v36 - 184);
        if (v40)
        {
          *(void *)(v36 - 176) = v40;
          operator delete(v40);
        }
        _Unwind_Resume(exception_object);
      }
LABEL_13:
      operator delete(v39);
      goto LABEL_14;
    }
  }
  else
  {
    signed int v38 = a16;
    if (!a16) {
      goto LABEL_9;
    }
  }
  operator delete(v38);
  char v39 = a20;
  if (!a20) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_19E2AFF0C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  operator delete(v34);
  if (__p)
  {
    operator delete(__p);
    if (!v35)
    {
LABEL_3:
      uint64_t v36 = a32;
      if (!a32) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if (!v35)
  {
    goto LABEL_3;
  }
  operator delete(v35);
  uint64_t v36 = a32;
  if (!a32)
  {
LABEL_4:
    if (v33) {
      goto LABEL_12;
    }
    goto LABEL_13;
  }
LABEL_8:
  operator delete(v36);
  if (v33) {
LABEL_12:
  }
    JUMPOUT(0x19E2AFEB8);
LABEL_13:
  JUMPOUT(0x19E2AFEBCLL);
}

uint64_t sub_19E2AFF68(uint64_t a1, int *a2)
{
  int v4 = *a2;
  *(unsigned char *)(a1 + 4) = *((unsigned char *)a2 + 4);
  *(_DWORD *)a1 = v4;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 2);
  long long v5 = *(_OWORD *)(a2 + 6);
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = v5;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  unint64_t v7 = (unsigned char *)*((void *)a2 + 5);
  uint64_t v6 = (unsigned char *)*((void *)a2 + 6);
  int64_t v8 = v6 - v7;
  if (v6 != v7)
  {
    if (v8 < 0) {
      sub_19E13D694();
    }
    int64_t v9 = (char *)operator new(v6 - v7);
    *(void *)(a1 + 40) = v9;
    *(void *)(a1 + 48) = v9;
    unint64_t v10 = &v9[8 * (v8 >> 3)];
    *(void *)(a1 + 56) = v10;
    memcpy(v9, v7, v8);
    *(void *)(a1 + 48) = v10;
  }
  int v11 = a2[16];
  *(void *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 64) = v11;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  int64_t v13 = (unsigned char *)*((void *)a2 + 9);
  uint64_t v12 = (unsigned char *)*((void *)a2 + 10);
  int64_t v14 = v12 - v13;
  if (v12 != v13)
  {
    if (v14 < 0) {
      sub_19E13D694();
    }
    vDSP_Length v15 = (char *)operator new(v12 - v13);
    *(void *)(a1 + 72) = v15;
    *(void *)(a1 + 80) = v15;
    unint64_t v16 = &v15[8 * (v14 >> 3)];
    *(void *)(a1 + 88) = v16;
    memcpy(v15, v13, v14);
    *(void *)(a1 + 80) = v16;
  }
  uint64_t v17 = *((void *)a2 + 12);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 96) = v17;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  int64_t v19 = (unsigned char *)*((void *)a2 + 13);
  vDSP_Length v18 = (unsigned char *)*((void *)a2 + 14);
  int64_t v20 = v18 - v19;
  if (v18 != v19)
  {
    if (v20 < 0) {
      sub_19E13D694();
    }
    uint64_t v21 = (char *)operator new(v18 - v19);
    *(void *)(a1 + 104) = v21;
    *(void *)(a1 + 112) = v21;
    uint64_t v22 = &v21[8 * (v20 >> 3)];
    *(void *)(a1 + 120) = v22;
    memcpy(v21, v19, v20);
    *(void *)(a1 + 112) = v22;
  }
  int v23 = a2[32];
  *(void *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 128) = v23;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  unint64_t v25 = (unsigned char *)*((void *)a2 + 17);
  uint64_t v24 = (unsigned char *)*((void *)a2 + 18);
  int64_t v26 = v24 - v25;
  if (v24 != v25)
  {
    if (v26 < 0) {
      sub_19E13D694();
    }
    uint64_t v27 = (char *)operator new(v24 - v25);
    *(void *)(a1 + 136) = v27;
    *(void *)(a1 + 144) = v27;
    uint64_t v28 = &v27[8 * (v26 >> 3)];
    *(void *)(a1 + 152) = v28;
    memcpy(v27, v25, v26);
    *(void *)(a1 + 144) = v28;
  }
  uint64_t v29 = *((void *)a2 + 20);
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 160) = v29;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  unint64_t v31 = (unsigned char *)*((void *)a2 + 21);
  uint64_t v30 = (unsigned char *)*((void *)a2 + 22);
  int64_t v32 = v30 - v31;
  if (v30 != v31)
  {
    if (v32 < 0) {
      sub_19E13D694();
    }
    uint64_t v33 = (char *)operator new(v30 - v31);
    *(void *)(a1 + 168) = v33;
    *(void *)(a1 + 176) = v33;
    BOOL v34 = &v33[8 * (v32 >> 3)];
    *(void *)(a1 + 184) = v34;
    memcpy(v33, v31, v32);
    *(void *)(a1 + 176) = v34;
  }
  uint64_t v35 = *((void *)a2 + 24);
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 192) = v35;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  uint64_t v37 = (unsigned char *)*((void *)a2 + 25);
  uint64_t v36 = (unsigned char *)*((void *)a2 + 26);
  int64_t v38 = v36 - v37;
  if (v36 != v37)
  {
    if (v38 < 0) {
      sub_19E13D694();
    }
    char v39 = (char *)operator new(v36 - v37);
    *(void *)(a1 + 200) = v39;
    *(void *)(a1 + 208) = v39;
    uint64_t v40 = &v39[8 * (v38 >> 3)];
    *(void *)(a1 + 216) = v40;
    memcpy(v39, v37, v38);
    *(void *)(a1 + 208) = v40;
  }
  uint64_t v41 = *((void *)a2 + 28);
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 224) = v41;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  int v43 = (unsigned char *)*((void *)a2 + 29);
  uint64_t v42 = (unsigned char *)*((void *)a2 + 30);
  int64_t v44 = v42 - v43;
  if (v42 != v43)
  {
    if (v44 < 0) {
      sub_19E13D694();
    }
    uint64_t v45 = (char *)operator new(v42 - v43);
    *(void *)(a1 + 232) = v45;
    *(void *)(a1 + 240) = v45;
    long long v46 = &v45[8 * (v44 >> 3)];
    *(void *)(a1 + 248) = v46;
    memcpy(v45, v43, v44);
    *(void *)(a1 + 240) = v46;
  }
  *(_DWORD *)(a1 + 256) = a2[64];
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 264) = 0;
  uint64_t v48 = (unsigned char *)*((void *)a2 + 33);
  uint64_t v47 = (unsigned char *)*((void *)a2 + 34);
  int64_t v49 = v47 - v48;
  if (v47 != v48)
  {
    if (v49 < 0) {
      sub_19E13D694();
    }
    uint64_t v50 = (char *)operator new(v47 - v48);
    *(void *)(a1 + 264) = v50;
    *(void *)(a1 + 272) = v50;
    uint64_t v51 = &v50[8 * (v49 >> 3)];
    *(void *)(a1 + 280) = v51;
    memcpy(v50, v48, v49);
    *(void *)(a1 + 272) = v51;
  }
  *(_DWORD *)(a1 + 288) = a2[72];
  return a1;
}

void sub_19E2B02A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10)
{
  vDSP_Length v18 = *v11;
  if (*v11)
  {
    v10[34] = v18;
    operator delete(v18);
    int64_t v19 = *v16;
    if (!*v16)
    {
LABEL_3:
      int64_t v20 = *v15;
      if (!*v15) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else
  {
    int64_t v19 = *v16;
    if (!*v16) {
      goto LABEL_3;
    }
  }
  v10[30] = v19;
  operator delete(v19);
  int64_t v20 = *v15;
  if (!*v15)
  {
LABEL_4:
    uint64_t v21 = *v14;
    if (!*v14) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  v10[26] = v20;
  operator delete(v20);
  uint64_t v21 = *v14;
  if (!*v14)
  {
LABEL_5:
    uint64_t v22 = *v13;
    if (!*v13) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  v10[22] = v21;
  operator delete(v21);
  uint64_t v22 = *v13;
  if (!*v13)
  {
LABEL_6:
    int v23 = *v12;
    if (!*v12) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  v10[18] = v22;
  operator delete(v22);
  int v23 = *v12;
  if (!*v12)
  {
LABEL_7:
    uint64_t v24 = *a9;
    if (!*a9) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_17:
  v10[14] = v23;
  operator delete(v23);
  uint64_t v24 = *a9;
  if (!*a9)
  {
LABEL_9:
    unint64_t v25 = *a10;
    if (*a10)
    {
      v10[6] = v25;
      operator delete(v25);
    }
    _Unwind_Resume(exception_object);
  }
LABEL_8:
  v10[10] = v24;
  operator delete(v24);
  goto LABEL_9;
}

void sub_19E2B03BC()
{
  if (!*v0) {
    JUMPOUT(0x19E2B02E8);
  }
  JUMPOUT(0x19E2B02E0);
}

void sub_19E2B03CC()
{
  if (!*v0) {
    JUMPOUT(0x19E2B02FCLL);
  }
  JUMPOUT(0x19E2B02F4);
}

BOOL sub_19E2B03DC(uint64_t a1, int *a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Early stopping already requested.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v3 = *(_DWORD *)(a1 + 12);
  if (v3 == -1) {
    return 0;
  }
  int v6 = *a2;
  uint64_t v5 = (uint64_t)(a2 + 2);
  if (v6 == 1 || *(double *)(a1 + 120) < *((double *)a2 + 13) - *(double *)(a1 + 16))
  {
    sub_19E29AB9C(a1 + 24, v5);
    *(void *)(a1 + 120) = *((void *)a2 + 13);
    *(_DWORD *)(a1 + 128) = 0;
    *(unsigned char *)(a1 + 8) = 0;
    return 0;
  }
  else
  {
    int v8 = *(_DWORD *)(a1 + 128);
    *(_DWORD *)(a1 + 128) = v8 + 1;
    BOOL v9 = v8 >= v3;
    *(unsigned char *)(a1 + 8) = v9;
    return v9;
  }
}

void sub_19E2B04D0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char **sub_19E2B04E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5 = *(_DWORD *)(a1 + 56);
  int v6 = *(_DWORD *)(a1 + 60);
  uint64_t v7 = *(void *)(a1 + 64);
  char v30 = 0;
  uint64_t v29 = (char *)&unk_1EF0A86A8;
  int v31 = v5;
  v21[0] = 0;
  *(_DWORD *)uint64_t v22 = v6;
  *(void *)&v22[4] = v7;
  memset(v23, 0, sizeof(v23));
  uint64_t v24 = v25;
  v25[0] = 0;
  double v26 = 0.0;
  v27[0] = 0;
  v25[1] = 0;
  v25[2] = &v26;
  int v28 = 0;
  char v33 = 0;
  int64_t v32 = (uint64_t (**)(void **, void **))&unk_1EF0A86A8;
  int v34 = v5;
  char v36 = 0;
  uint64_t v35 = (uint64_t (**)(void **, void **))&unk_1EF0A86F0;
  int v38 = HIDWORD(v7);
  uint64_t v37 = *(void *)v22;
  sub_19E2965D0(v39, (uint64_t)v23);
  v39[12] = (uint64_t *)v27[1];
  int v40 = v28;
  int64_t v20 = &unk_1EF0A86F0;
  sub_19E2470C8((char **)v23);
  int v8 = *(_DWORD *)(a1 + 72);
  (*(void (**)(char **__return_ptr))(**(void **)(a1 + 120) + 16))(&v29);
  uint64_t v9 = *(void *)(a2 + 24);
  if (!v9) {
    goto LABEL_16;
  }
  double v10 = (*(double (**)(uint64_t, char **))(*(void *)v9 + 48))(v9, &v29);
  (*(void (**)(void, char **))(**(void **)(a1 + 120) + 24))(*(void *)(a1 + 120), &v29);
  std::chrono::steady_clock::now();
  LODWORD(v20) = 1;
  sub_19E291E68((uint64_t **)v21, (uint64_t *)&v29);
  double v26 = v10;
  sub_19E2A7DDC(*(void *)(a1 + 120), (uint64_t)v27);
  if (1 % v8) {
    goto LABEL_5;
  }
  uint64_t v11 = *(void *)(a2 + 56);
  if (!v11) {
LABEL_17:
  }
    sub_19E2A8074();
  if (((*(uint64_t (**)(uint64_t, void **))(*(void *)v11 + 48))(v11, &v20) & 1) == 0)
  {
LABEL_5:
    if (((*v32)((void **)&v32, &v20) & 1) == 0)
    {
      char v12 = (*v35)((void **)&v35, &v20);
      sub_19E2470C8(v27);
      sub_19E2470C8((char **)v21);
      sub_19E2470C8(&v29);
      if (v12) {
        goto LABEL_15;
      }
      int v13 = 2;
      while (1)
      {
        (*(void (**)(char **__return_ptr))(**(void **)(a1 + 120) + 16))(&v29);
        uint64_t v14 = *(void *)(a2 + 24);
        if (!v14) {
          break;
        }
        double v15 = (*(double (**)(uint64_t, char **))(*(void *)v14 + 48))(v14, &v29);
        (*(void (**)(void, char **))(**(void **)(a1 + 120) + 24))(*(void *)(a1 + 120), &v29);
        std::chrono::steady_clock::now();
        std::chrono::steady_clock::now();
        LODWORD(v20) = v13;
        sub_19E291E68((uint64_t **)v21, (uint64_t *)&v29);
        double v26 = v15;
        sub_19E2A7DDC(*(void *)(a1 + 120), (uint64_t)v27);
        if (!(v13 % v8))
        {
          uint64_t v16 = *(void *)(a2 + 56);
          if (!v16) {
            goto LABEL_17;
          }
          if ((*(uint64_t (**)(uint64_t, void **))(*(void *)v16 + 48))(v16, &v20)) {
            goto LABEL_6;
          }
        }
        if ((*v32)((void **)&v32, &v20)) {
          goto LABEL_6;
        }
        char v17 = (*v35)((void **)&v35, &v20);
        sub_19E2470C8(v27);
        sub_19E2470C8((char **)v21);
        sub_19E2470C8(&v29);
        ++v13;
        if (v17) {
          goto LABEL_15;
        }
      }
LABEL_16:
      sub_19E2A8074();
    }
  }
LABEL_6:
  sub_19E2470C8(v27);
  sub_19E2470C8((char **)v21);
  sub_19E2470C8(&v29);
LABEL_15:
  sub_19E2A7DDC(*(void *)(a1 + 120), a3);
  uint64_t v35 = (uint64_t (**)(void **, void **))&unk_1EF0A86F0;
  return sub_19E2470C8((char **)v39);
}

void sub_19E2B0994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char *a39)
{
  sub_19E2470C8(v41);
  sub_19E2470C8(v40);
  sub_19E2470C8(&a39);
  *(void *)(v42 - 240) = a11;
  sub_19E2470C8(v39);
  _Unwind_Resume(a1);
}

void sub_19E2B0A1C(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 48);
  if (v1 != 1)
  {
    if (!v1) {
      sub_19E29849C();
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_19E298774(exception, "Invalid optimizer in user config.");
    __cxa_throw(exception, (struct type_info *)off_1E599CD18, MEMORY[0x1E4FBA1E8]);
  }
  sub_19E2B0AD0();
}

void sub_19E2B0ABC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19E2B0AD0()
{
}

void sub_19E2B0C0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E2934EC((uint64_t)va);
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_19E2B0C28(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E2B0C3C(uint64_t a1, uint64_t *a2)
{
  sub_19E2933F8((uint64_t)&v16, (uint64_t)a2);
  *(void *)a1 = &unk_1EF0A8318;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  sub_19E2933F8(a1 + 32, (uint64_t)&v16);
  if (v22)
  {
    int v4 = (char **)__p;
    if (__p)
    {
      int v5 = v21;
      int v6 = __p;
      if (v21 != __p)
      {
        do
          int v5 = sub_19E2470C8(v5 - 12);
        while (v5 != v4);
        int v6 = __p;
      }
      uint64_t v21 = v4;
      operator delete(v6);
    }
  }
  uint64_t v7 = (void **)v18;
  if (v18)
  {
    int v8 = v19;
    uint64_t v9 = v18;
    if (v19 != v18)
    {
      do
      {
        if (*((char *)v8 - 17) < 0) {
          operator delete(*(v8 - 5));
        }
        v8 -= 5;
      }
      while (v8 != v7);
      uint64_t v9 = v18;
    }
    int64_t v19 = v7;
    operator delete(v9);
  }
  double v10 = (void **)v16;
  if (v16)
  {
    uint64_t v11 = v17;
    char v12 = v16;
    if (v17 != v16)
    {
      do
      {
        if (*((char *)v11 - 25) < 0) {
          operator delete(*(v11 - 6));
        }
        v11 -= 6;
      }
      while (v11 != v10);
      char v12 = v16;
    }
    char v17 = v10;
    operator delete(v12);
  }
  *(void *)a1 = &unk_1EF0A8558;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  int v13 = sub_19E244298(a2);
  int v14 = sub_19E244DC4((uint64_t)a2);
  *(_DWORD *)(a1 + 176) = v14 + v13;
  *(void *)(a1 + 184) = v14 + v13;
  *(_OWORD *)(a1 + 192) = xmmword_19E351FD0;
  *(void *)(a1 + 208) = 0x3FF0000000000000;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 240) = 0;
  double v15 = operator new(0x10uLL);
  *(void *)(a1 + 216) = v15;
  *(void *)(a1 + 224) = v15 + 2;
  *(void *)(a1 + 232) = v15 + 2;
  *(_DWORD *)(a1 + 240) = 2;
  *double v15 = 0;
  v15[1] = 0;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  *(void *)(a1 + 440) = 0;
  *(_DWORD *)(a1 + 464) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 292) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 420) = 0u;
  *(void *)(a1 + 488) = a1 + 176;
  *(void *)(a1 + 496) = 0;
  *(_DWORD *)(a1 + 520) = 0;
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  *(_DWORD *)(a1 + 536) = -1;
  *(void *)(a1 + 480) = &unk_1EF0A7E80;
  *(void *)(a1 + 552) = 0x3FB999999999999ALL;
  *(void *)(a1 + 560) = 0;
  sub_19E299010(a1 + 568);
  *(void *)(a1 + 10688) = 0;
  *(_OWORD *)(a1 + 10672) = 0u;
  if ((int)sub_19E244DC4(a1 + 32) >= 1) {
    sub_19E2B1404();
  }
  sub_19E2B15B4();
}

void sub_19E2B12F0(_Unwind_Exception *a1)
{
  sub_19E2462FC(v6);
  sub_19E298A78(v5);
  int v8 = (void **)(v1 + 62);
  uint64_t v9 = v1[70];
  v1[70] = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  void *v4 = &unk_1EF0A7CF0;
  double v10 = *v8;
  if (*v8)
  {
    v1[63] = v10;
    operator delete(v10);
  }
  sub_19E2A3E04(v3);
  sub_19E29AC3C(v2);
  sub_19E298AC8(v1);
  _Unwind_Resume(a1);
}

void sub_19E2B1404()
{
}

void sub_19E2B1560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_19E245FE8(&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_19E2B157C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
  {
    sub_19E32FAD8((uint64_t)&a9, a9);
    operator delete(v9);
    _Unwind_Resume(a1);
  }
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_19E2B15B4()
{
}

void sub_19E2B1710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_19E245FE8(&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_19E2B172C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
  {
    sub_19E32FAD8((uint64_t)&a9, a9);
    operator delete(v9);
    _Unwind_Resume(a1);
  }
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_19E2B1768(uint64_t a1)
{
  int v1 = (void *)sub_19E2B55D8(a1);

  operator delete(v1);
}

uint64_t **sub_19E2B1790@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X8>)
{
  uint64_t v4 = a1 + 8;
  unint64_t v5 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3);
  uint64_t v6 = a1 + 32;
  int v7 = sub_19E244298((uint64_t *)(a1 + 32));
  signed int v8 = 5 * (sub_19E244DC4(v6) + v7);
  if (*(unsigned char *)(v4 + 136) && v8 <= (int)(-1431655765 * ((*(void *)(a1 + 128) - *(void *)(a1 + 120)) >> 5))) {
    signed int v8 = -1431655765 * ((*(void *)(a1 + 128) - *(void *)(a1 + 120)) >> 5);
  }
  if (v5 >= v8)
  {
    (*(void (**)(char **__return_ptr))(**(void **)(a1 + 560) + 16))(v11);
    sub_19E291E68(a2, (uint64_t *)v11);
    return (uint64_t **)sub_19E2470C8(v11);
  }
  else
  {
    uint64_t v9 = (uint64_t *)(*(void *)(a1 + 10672)
                   + 96 * (int)(-991146299 * ((*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3)));
    return sub_19E291E68(a2, v9);
  }
}

void sub_19E2B18D4(uint64_t a1, long long **a2, double a3)
{
  sub_19E29CE6C(a2, (uint64_t)&__p);
  double v5 = sub_19E2B3A28(a1 + 176, (const double **)&__p);
  double v7 = sqrt(v6);
  double v20 = v7;
  double v21 = v5;
  double v8 = v5 + *(double *)(a1 + 544) * v7;
  double v19 = v8;
  unint64_t v9 = *(void *)(a1 + 160);
  if (v9 >= *(void *)(a1 + 168))
  {
    uint64_t v14 = sub_19E2A4064((uint64_t *)(a1 + 152), (uint64_t)&__p, &v21, (uint64_t *)&v20, (uint64_t *)&v19);
  }
  else
  {
    *(void *)unint64_t v9 = 0;
    *(void *)(v9 + 8) = 0;
    *(void *)(v9 + 16) = 0;
    double v10 = __p;
    int64_t v11 = v23 - (unsigned char *)__p;
    if (v23 != __p)
    {
      if (v11 < 0) {
        sub_19E13D694();
      }
      char v12 = (char *)operator new(v23 - (unsigned char *)__p);
      *(void *)unint64_t v9 = v12;
      *(void *)(v9 + 8) = v12;
      int v13 = &v12[8 * (v11 >> 3)];
      *(void *)(v9 + 16) = v13;
      memcpy(v12, v10, v11);
      *(void *)(v9 + 8) = v13;
    }
    *(_DWORD *)(v9 + 24) = v24;
    *(double *)(v9 + 32) = v5;
    *(double *)(v9 + 40) = v7;
    *(double *)(v9 + 48) = v8;
    uint64_t v14 = v9 + 56;
    *(void *)(a1 + 160) = v9 + 56;
  }
  *(void *)(a1 + 160) = v14;
  uint64_t v15 = *(int *)(a1 + 464);
  uint64_t v16 = v15 + 1;
  *(_DWORD *)(a1 + 464) = v15 + 1;
  uint64_t v17 = *(void *)(a1 + 440);
  unint64_t v18 = (*(void *)(a1 + 448) - v17) >> 3;
  if (v15 + 1 <= v18)
  {
    if (v15 + 1 < v18) {
      *(void *)(a1 + 448) = v17 + 8 * v15 + 8;
    }
  }
  else
  {
    sub_19E2482DC(a1 + 440, v15 + 1 - v18);
    uint64_t v16 = *(int *)(a1 + 464);
    uint64_t v17 = *(void *)(a1 + 440);
  }
  *(double *)(v17 + 8 * v16 - 8) = a3;
  sub_19E2B5794(a1 + 176, (uint64_t)&__p);
  sub_19E2B696C(a1 + 472, a1 + 176);
}

void sub_19E2B1B10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, char *a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

double sub_19E2B1B5C(uint64_t a1, double a2, double a3)
{
  return a2 + *(double *)(a1 + 64) * a3;
}

double sub_19E2B1B68()
{
  return -1.79769313e308;
}

void sub_19E2B1B74(uint64_t a1)
{
  long double v2 = pow((double)*(int *)(*(void *)(a1 + 8) + 96), (double)*(int *)(*(void *)(a1 + 8) + 100) * 0.5 + 2.0);
  long double v3 = log(v2 * 9.8696044 / (*(double *)(a1 + 72) * 3.0));
  *(double *)(a1 + 64) = sqrt(v3 + v3);

  sub_19E2B1C04(a1);
}

double sub_19E2B1BFC()
{
  return 0.0;
}

void sub_19E2B1C04(uint64_t a1)
{
  uint64_t v104 = 0;
  uint64_t v105 = 0;
  unint64_t v106 = 0;
  int v1 = *(void **)(a1 + 8);
  uint64_t v101 = 0;
  unint64_t v102 = 0;
  size_t v100 = 0;
  long double v3 = (unsigned char *)v1[9];
  long double v2 = (unsigned char *)v1[10];
  int64_t v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0) {
      sub_19E13D694();
    }
    double v5 = (char *)operator new(v2 - v3);
    double v6 = &v5[8 * (v4 >> 3)];
    size_t v100 = v5;
    unint64_t v102 = v6;
    memcpy(v5, v3, v4);
    uint64_t v101 = v6;
  }
  uint64_t v7 = v1[12];
  uint64_t v103 = v7;
  if (!v7)
  {
    int v55 = 0;
    unsigned __int8 v58 = 0;
    *(_DWORD *)(a1 + 56) = 0;
    long long v62 = v100;
    signed int v63 = HIDWORD(v103);
    long long v107 = 0;
    int v108 = 0;
    uint64_t v109 = 0;
    if (HIDWORD(v103)) {
      goto LABEL_65;
    }
    goto LABEL_81;
  }
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  double v10 = 0;
  int64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v90 = (int)v7;
  uint64_t v91 = v7;
  size_t v13 = 8 * (v7 >> 32);
  uint64_t v88 = v7 >> 32;
  size_t v89 = v13;
  unint64_t v87 = (v7 >> 32) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v93 = HIDWORD(v7);
  uint64_t v94 = 16;
  do
  {
    uint64_t v14 = *(void *)(a1 + 8);
    uint64_t v15 = v100;
    __p = 0;
    *(void *)long long v96 = 0;
    uint64_t v97 = 0;
    if (!v93)
    {
      uint64_t v16 = 0;
      int v108 = 0;
      uint64_t v109 = 0;
      long long v107 = 0;
      unsigned int v110 = 0;
      goto LABEL_27;
    }
    if (v7 < 0) {
      sub_19E13D694();
    }
    uint64_t v16 = operator new(v13);
    bzero(v16, v13);
    if ((unint64_t)v7 >> 33 < 3)
    {
      unint64_t v17 = 0;
      unint64_t v18 = v88;
      goto LABEL_17;
    }
    unint64_t v18 = v88;
    if ((unint64_t)((char *)v16 - &v100[v13 * v12]) < 0x20)
    {
      unint64_t v17 = 0;
LABEL_17:
      unint64_t v23 = v18 - v17;
      uint64_t v24 = 8 * v17;
      unint64_t v25 = (void *)v16 + v17;
      double v26 = (uint64_t *)&v15[v8 + v24];
      do
      {
        uint64_t v27 = *v26++;
        *v25++ = v27;
        --v23;
      }
      while (v23);
      goto LABEL_19;
    }
    double v19 = (long long *)&v100[v94];
    double v20 = v16 + 1;
    unint64_t v21 = v87;
    do
    {
      long long v22 = *v19;
      *(v20 - 1) = *(v19 - 1);
      *double v20 = v22;
      v19 += 2;
      v20 += 2;
      v21 -= 4;
    }
    while (v21);
    unint64_t v17 = v87;
    if (v88 != v87) {
      goto LABEL_17;
    }
LABEL_19:
    long long v107 = 0;
    int v108 = 0;
    uint64_t v109 = 0;
    unsigned int v110 = v93;
    sub_19E2482DC((uint64_t)&v107, v18);
    uint64_t v28 = v110;
    if ((int)v110 >= 1)
    {
      uint64_t v29 = 0;
      char v30 = v107;
      if (v110 < 4) {
        goto LABEL_25;
      }
      if ((unint64_t)((char *)v107 - (char *)v16) < 0x20) {
        goto LABEL_25;
      }
      unint64_t v31 = 0;
      uint64_t v29 = v110 & 0xFFFFFFFC;
      uint64_t v32 = (8 * v110) & 0x7FFFFFFE0;
      do
      {
        long long v33 = v16[v31 / 0x10 + 1];
        int v34 = (double *)&v30[v31 / 8];
        *(_OWORD *)int v34 = v16[v31 / 0x10];
        *((_OWORD *)v34 + 1) = v33;
        v31 += 32;
      }
      while (v32 != v31);
      if (v29 != v28)
      {
LABEL_25:
        uint64_t v35 = v28 - v29;
        uint64_t v36 = v29 << 32;
        do
        {
          *(const double *)((char *)v30 + (v36 >> 29)) = *(const double *)((char *)v16 + (v36 >> 29));
          v36 += 0x100000000;
          --v35;
        }
        while (v35);
      }
    }
LABEL_27:
    double v37 = sub_19E2B23D8(v14, (const double **)&v107);
    double v38 = v37;
    if (v11 < v10)
    {
      *v11++ = v37;
      uint64_t v7 = v91;
      size_t v13 = v89;
      uint64_t v105 = (uint64_t)v11;
      char v39 = v107;
      if (!v107) {
        goto LABEL_30;
      }
LABEL_29:
      int v108 = v39;
      operator delete(v39);
      goto LABEL_30;
    }
    uint64_t v40 = v11 - v9;
    unint64_t v41 = v40 + 1;
    if ((unint64_t)(v40 + 1) >> 61) {
      sub_19E13D694();
    }
    if (((char *)v10 - (char *)v9) >> 2 > v41) {
      unint64_t v41 = ((char *)v10 - (char *)v9) >> 2;
    }
    if ((unint64_t)((char *)v10 - (char *)v9) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v42 = v41;
    }
    if (v42)
    {
      if (v42 >> 61) {
        sub_19E13C418();
      }
      int v43 = operator new(8 * v42);
      int64_t v44 = (double *)&v43[8 * v40];
      double *v44 = v38;
      uint64_t v45 = (uint64_t)(v44 + 1);
      if (v11 != v9)
      {
LABEL_41:
        unint64_t v46 = (char *)(v11 - 1) - (char *)v9;
        if (v46 < 0x168
          || &v43[(char *)v11 - (char *)v9 - 8 - (v46 & 0xFFFFFFFFFFFFFFF8)] > &v43[(char *)v11 - (char *)v9 - 8]
          || (double *)((char *)v11 - (v46 & 0xFFFFFFFFFFFFFFF8) - 8) > v11 - 1
          || (unint64_t)((char *)v9 - v43) < 0x20)
        {
          uint64_t v47 = v11;
          uint64_t v7 = v91;
          size_t v13 = v89;
        }
        else
        {
          uint64_t v49 = (v46 >> 3) + 1;
          uint64_t v50 = 8 * (v49 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v47 = &v11[v50 / 0xFFFFFFFFFFFFFFF8];
          int64_t v44 = (double *)((char *)v44 - v50);
          uint64_t v51 = &v43[8 * v40 - 16];
          unint64_t v52 = v11 - 2;
          uint64_t v53 = v49 & 0x3FFFFFFFFFFFFFFCLL;
          uint64_t v7 = v91;
          do
          {
            long long v54 = *(_OWORD *)v52;
            *(v51 - 1) = *((_OWORD *)v52 - 1);
            *uint64_t v51 = v54;
            v51 -= 2;
            v52 -= 4;
            v53 -= 4;
          }
          while (v53);
          size_t v13 = v89;
          if (v49 == (v49 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_44:
            double v10 = (double *)&v43[8 * v42];
            uint64_t v104 = v44;
            uint64_t v105 = v45;
            unint64_t v106 = v10;
            if (!v9) {
              goto LABEL_46;
            }
LABEL_45:
            operator delete(v9);
            goto LABEL_46;
          }
        }
        do
        {
          uint64_t v48 = *((void *)v47-- - 1);
          *((void *)v44-- - 1) = v48;
        }
        while (v47 != v9);
        goto LABEL_44;
      }
    }
    else
    {
      int v43 = 0;
      int64_t v44 = (double *)(8 * v40);
      *(double *)(8 * v40) = v37;
      uint64_t v45 = 8 * v40 + 8;
      if (v11 != v9) {
        goto LABEL_41;
      }
    }
    uint64_t v7 = v91;
    size_t v13 = v89;
    double v10 = (double *)&v43[8 * v42];
    uint64_t v104 = v44;
    uint64_t v105 = v45;
    unint64_t v106 = v10;
    if (v9) {
      goto LABEL_45;
    }
LABEL_46:
    unint64_t v9 = v44;
    int64_t v11 = (double *)v45;
    uint64_t v105 = v45;
    char v39 = v107;
    if (v107) {
      goto LABEL_29;
    }
LABEL_30:
    if (v16) {
      operator delete(v16);
    }
    ++v12;
    v94 += v13;
    v8 += v13;
  }
  while (v12 != v90);
  int v55 = v104;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)(a1 + 8) + 96);
  if (v55 == v11)
  {
    unsigned __int8 v58 = v55;
    long long v62 = v100;
    signed int v63 = HIDWORD(v103);
    long long v107 = 0;
    int v108 = 0;
    uint64_t v109 = 0;
    if (HIDWORD(v103)) {
      goto LABEL_65;
    }
    goto LABEL_81;
  }
  signed int v56 = v55 + 1;
  if (v55 + 1 == v11)
  {
    unsigned __int8 v58 = v55;
    long long v62 = v100;
    signed int v63 = HIDWORD(v103);
    long long v107 = 0;
    int v108 = 0;
    uint64_t v109 = 0;
    if (HIDWORD(v103)) {
      goto LABEL_65;
    }
    goto LABEL_81;
  }
  double v57 = *v55;
  unsigned __int8 v58 = v55;
  unint64_t v59 = v55 + 1;
  do
  {
    double v60 = *v59++;
    BOOL v61 = v57 < v60;
    double v57 = fmax(v57, v60);
    if (v61) {
      unsigned __int8 v58 = v56;
    }
    signed int v56 = v59;
  }
  while (v59 != v11);
  long long v62 = v100;
  signed int v63 = HIDWORD(v103);
  long long v107 = 0;
  int v108 = 0;
  uint64_t v109 = 0;
  if (!HIDWORD(v103))
  {
LABEL_81:
    uint64_t v74 = 0;
    LODWORD(v73) = 0;
    uint64_t v64 = 0;
    *(void *)long long v96 = 0;
    uint64_t v97 = 0;
    __p = 0;
    unsigned int v98 = 0;
    goto LABEL_82;
  }
LABEL_65:
  if (v63 < 0) {
    sub_19E13D694();
  }
  uint64_t v64 = operator new(8 * v63);
  uint64_t v65 = (v58 - v55) * v63;
  bzero(v64, 8 * v63);
  if (v63 < 0xA || (double v66 = &v62[8 * v65], (unint64_t)((char *)v64 - v66) < 0x20))
  {
    unint64_t v67 = 0;
    goto LABEL_69;
  }
  unint64_t v67 = v63 & 0xFFFFFFFFFFFFFFFCLL;
  uint64_t v83 = (long long *)(v66 + 16);
  v84 = v64 + 1;
  unint64_t v85 = v67;
  do
  {
    long long v86 = *v83;
    *(v84 - 1) = *(v83 - 1);
    _OWORD *v84 = v86;
    v83 += 2;
    v84 += 2;
    v85 -= 4;
  }
  while (v85);
  if (v67 != v63)
  {
LABEL_69:
    unint64_t v68 = v63 - v67;
    uint64_t v69 = 8 * v67;
    unint64_t v70 = (void *)v64 + v67;
    uint64_t v71 = &v62[8 * v65 + v69];
    do
    {
      uint64_t v72 = *(void *)v71;
      v71 += 8;
      *v70++ = v72;
      --v68;
    }
    while (v68);
  }
  __p = 0;
  *(void *)long long v96 = 0;
  uint64_t v97 = 0;
  unsigned int v98 = v63;
  sub_19E2482DC((uint64_t)&__p, v63);
  uint64_t v73 = v98;
  uint64_t v74 = (char *)__p;
  if ((int)v98 >= 1)
  {
    uint64_t v75 = 0;
    if (v98 < 4) {
      goto LABEL_77;
    }
    if ((unint64_t)((unsigned char *)__p - (unsigned char *)v64) < 0x20) {
      goto LABEL_77;
    }
    unint64_t v76 = 0;
    uint64_t v75 = v98 & 0xFFFFFFFC;
    uint64_t v77 = (8 * v98) & 0x7FFFFFFE0;
    do
    {
      long long v78 = v64[v76 / 0x10 + 1];
      int v79 = &v74[v76];
      *(_OWORD *)int v79 = v64[v76 / 0x10];
      *((_OWORD *)v79 + 1) = v78;
      v76 += 32;
    }
    while (v77 != v76);
    if (v75 != v73)
    {
LABEL_77:
      uint64_t v80 = v73 - v75;
      uint64_t v81 = v75 << 32;
      do
      {
        *(void *)&v74[v81 >> 29] = *(void *)((char *)v64 + (v81 >> 29));
        v81 += 0x100000000;
        --v80;
      }
      while (v80);
    }
  }
LABEL_82:
  uint64_t v82 = *(void *)v58;
  uint64_t v99 = *(void *)v58;
  if ((void **)(a1 + 16) != &__p)
  {
    sub_19E1E5B9C((void *)(a1 + 16), v74, *(char **)v96, (uint64_t)(*(void *)v96 - (void)v74) >> 3);
    LODWORD(v73) = v98;
    uint64_t v82 = v99;
    uint64_t v74 = (char *)__p;
  }
  *(_DWORD *)(a1 + 40) = v73;
  *(void *)(a1 + 48) = v82;
  if (v74)
  {
    *(void *)long long v96 = v74;
    operator delete(v74);
  }
  if (v64) {
    operator delete(v64);
  }
  if (v62) {
    operator delete(v62);
  }
  if (v55)
  {
    uint64_t v105 = (uint64_t)v55;
    operator delete(v55);
  }
}

void sub_19E2B231C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  if (__p) {
    operator delete(__p);
  }
  if (v28) {
    operator delete(v28);
  }
  if (v29) {
    operator delete(v29);
  }
  if (a27) {
    operator delete(a27);
  }
  _Unwind_Resume(exception_object);
}

double sub_19E2B23D8(uint64_t a1, const double **a2)
{
  if (*(_DWORD *)(a1 + 96))
  {
    sub_19E2B24BC(a1, a2, (uint64_t)__A);
    double __C = 0.0;
    vDSP_dotprD(__A[0], 1, *(const double **)(a1 + 232), 1, &__C, (int)__N);
    double v3 = __C;
    double __C = 0.0;
    vDSP_meanvD(*(const double **)(a1 + 264), 1, &__C, *(int *)(a1 + 288));
    double v4 = __C;
    if (__A[0])
    {
      __A[1] = __A[0];
      operator delete(__A[0]);
    }
    return v4 + v3;
  }
  else
  {
    __A[0] = 0;
    vDSP_meanvD(*(const double **)(a1 + 264), 1, (double *)__A, *(int *)(a1 + 288));
    return *(double *)__A;
  }
}

void sub_19E2B24A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2B24BC(uint64_t a1@<X0>, const double **a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *(_DWORD *)(a1 + 96);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 24) = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  if (v3)
  {
    if (v3 < 0) {
      sub_19E13D694();
    }
    uint64_t v5 = v3;
    double v6 = (char *)operator new(8 * v3);
    bzero(v6, 8 * v3);
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    *(void *)a3 = v6;
    *(void *)(a3 + 8) = &v6[8 * v3];
    *(void *)(a3 + 16) = &v6[8 * v3];
    *(_DWORD *)(a3 + 24) = v3;
    unint64_t v25 = v6;
    while (1)
    {
      uint64_t v9 = *(void *)(a1 + 72);
      signed int v10 = *(_DWORD *)(a1 + 100);
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      if (!v10)
      {
        int64_t v11 = 0;
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        __p = 0;
        signed int v30 = 0;
        goto LABEL_14;
      }
      if (v10 < 0) {
        sub_19E13D694();
      }
      int64_t v11 = operator new(8 * v10);
      bzero(v11, 8 * v10);
      if (v10 >= 8 && (unint64_t)v11 - v9 - 8 * v8 * v10 >= 0x20)
      {
        unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL;
        double v20 = (long long *)(v9 + v7 * v10 + 16);
        unint64_t v21 = v11 + 1;
        unint64_t v22 = v12;
        do
        {
          long long v23 = *v20;
          *(v21 - 1) = *(v20 - 1);
          *unint64_t v21 = v23;
          v20 += 2;
          v21 += 2;
          v22 -= 4;
        }
        while (v22);
        if (v12 == v10) {
          goto LABEL_12;
        }
      }
      else
      {
        unint64_t v12 = 0;
      }
      unint64_t v13 = v10 - v12;
      uint64_t v14 = 8 * v12;
      uint64_t v15 = (void *)v11 + v12;
      uint64_t v16 = (uint64_t *)(v9 + v14 + v7 * v10);
      do
      {
        uint64_t v17 = *v16++;
        *v15++ = v17;
        --v13;
      }
      while (v13);
LABEL_12:
      __p = 0;
      uint64_t v28 = 0;
      signed int v30 = 0;
      uint64_t v29 = 0;
      __p = operator new(8 * v10);
      uint64_t v28 = (char *)__p + 8 * v10;
      uint64_t v29 = v28;
      signed int v30 = v10;
      memcpy(__p, v11, 8 * v10);
      double v6 = v25;
LABEL_14:
      double v18 = *(double *)(a1 + 24);
      double v19 = sub_19E2B2768(a1 + 8, (uint64_t)&__p, a2);
      *(long double *)&v6[8 * v8] = exp(v19 * -0.5) * v18;
      if (__p)
      {
        uint64_t v28 = (char *)__p;
        operator delete(__p);
      }
      if (v11) {
        operator delete(v11);
      }
      ++v8;
      v7 += 8;
      if (v8 == v5) {
        return;
      }
    }
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 24) = 0;
}

void sub_19E2B26F4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E13A9BC(a1);
}

void sub_19E2B271C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
  {
    operator delete(__p);
    if (!v14)
    {
LABEL_3:
      *(void *)(a10 + 8) = a11;
      operator delete(a11);
      _Unwind_Resume(a1);
    }
  }
  else if (!v14)
  {
    goto LABEL_3;
  }
  operator delete(v14);
  *(void *)(a10 + 8) = a11;
  operator delete(a11);
  _Unwind_Resume(a1);
}

double sub_19E2B2768(uint64_t a1, uint64_t a2, const double **a3)
{
  uint64_t v7 = *(const void **)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  int64_t v8 = v6 - *(void *)a2;
  if (v6 == *(void *)a2)
  {
    signed int v10 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    if (v8 < 0) {
      sub_19E13D694();
    }
    uint64_t v9 = (char *)operator new(v6 - *(void *)a2);
    signed int v10 = &v9[8 * (v8 >> 3)];
    memcpy(v9, v7, v8);
  }
  vDSP_vsubD(*a3, 1, (const double *)v9, 1, (double *)v9, 1, *(int *)(a2 + 24));
  if (v10 == v9)
  {
    int64_t v11 = 0;
  }
  else
  {
    if (v10 - v9 < 0) {
      sub_19E13D694();
    }
    int64_t v11 = operator new(v10 - v9);
    memcpy(v11, v9, v10 - v9);
  }
  cblas_dnrm2_NEWLAPACK();
  double v13 = v12;
  double v14 = *(double *)(a1 + 24);
  if (v11) {
    operator delete(v11);
  }
  if (v9) {
    operator delete(v9);
  }
  return v13 * v13 / (v14 * v14);
}

void sub_19E2B28C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (v15) {
    operator delete(v15);
  }
  if (v14) {
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E2B2918(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  double v13 = 0;
  double v14 = 0;
  uint64_t v15 = 0;
  sub_19E246830(&v13, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 4));
  __p = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  sub_19E246A1C(&__p, a3[3], a3[4], 0xCCCCCCCCCCCCCCCDLL * ((a3[4] - a3[3]) >> 3));
  sub_19E2B2AB4((void *)a1, a2, (uint64_t *)&v13);
  uint64_t v6 = (void **)__p;
  if (__p)
  {
    uint64_t v7 = v17;
    int64_t v8 = __p;
    if (v17 != __p)
    {
      do
      {
        if (*((char *)v7 - 17) < 0) {
          operator delete(*(v7 - 5));
        }
        v7 -= 5;
      }
      while (v7 != v6);
      int64_t v8 = __p;
    }
    uint64_t v17 = v6;
    operator delete(v8);
  }
  uint64_t v9 = (void **)v13;
  if (v13)
  {
    signed int v10 = v14;
    int64_t v11 = v13;
    if (v14 != v13)
    {
      do
      {
        if (*((char *)v10 - 25) < 0) {
          operator delete(*(v10 - 6));
        }
        v10 -= 6;
      }
      while (v10 != v9);
      int64_t v11 = v13;
    }
    double v14 = v9;
    operator delete(v11);
  }
  *(void *)a1 = &unk_1EF0A81C8;
  *(_DWORD *)(a1 + 64) = 5;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_19E2B2A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_19E2B2A98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    sub_19E32FAD8((uint64_t)&a9, a9);
  }
  _Unwind_Resume(exception_object);
}

void *sub_19E2B2AB4(void *a1, uint64_t a2, uint64_t *a3)
{
  *a1 = &unk_1EF0A83D8;
  a1[1] = a2;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  sub_19E246830(a1 + 2, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 4));
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  sub_19E246A1C(a1 + 5, a3[3], a3[4], 0xCCCCCCCCCCCCCCCDLL * ((a3[4] - a3[3]) >> 3));
  return a1;
}

void sub_19E2B2B54(_Unwind_Exception *exception_object)
{
  if (*v2) {
    sub_19E32FD88(v1, *v2);
  }
  _Unwind_Resume(exception_object);
}

void *sub_19E2B2B74(void *a1)
{
  *a1 = &unk_1EF0A81C8;
  long double v2 = (char **)a1[9];
  if (v2)
  {
    int v3 = (char **)a1[10];
    double v4 = v2;
    if (v3 != v2)
    {
      do
        int v3 = sub_19E2470C8(v3 - 13);
      while (v3 != v2);
      double v4 = (char **)a1[9];
    }
    a1[10] = v2;
    operator delete(v4);
  }

  return sub_19E2B3228(a1);
}

void sub_19E2B2BFC(void *a1)
{
  *a1 = &unk_1EF0A81C8;
  long double v2 = (char **)a1[9];
  if (v2)
  {
    int v3 = (char **)a1[10];
    double v4 = v2;
    if (v3 != v2)
    {
      do
        int v3 = sub_19E2470C8(v3 - 13);
      while (v3 != v2);
      double v4 = (char **)a1[9];
    }
    a1[10] = v2;
    operator delete(v4);
  }
  uint64_t v5 = sub_19E2B3228(a1);

  operator delete(v5);
}

void sub_19E2B2C88(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  sub_19E2B3300(a1);
  uint64_t v6 = *(void *)(a1 + 72);
  if (v6 == *(void *)(a1 + 80))
  {
    uint64_t v39 = a3;
    sub_19E29CB00(a2, &v52);
    sub_19E2B35F8(a2, (uint64_t)v49);
    uint64_t v7 = v50;
    if (v50 != v51)
    {
      do
      {
        uint64_t v8 = *(void *)((char *)v7 + 28);
        sub_19E291E68(v48, &v52[12 * (int)v8]);
        if (SHIDWORD(v8) >= 1)
        {
          int v9 = 0;
          unsigned int v10 = HIDWORD(v8) & ~(v8 >> 63);
          do
          {
            sub_19E2B3738(a1, (uint64_t *)v48, (uint64_t **)&__A);
            sub_19E2460A4((char **)v48, (uint64_t)&__A);
            sub_19E15A064((uint64_t)v47, v47[1]);
            sub_19E15A064((uint64_t)v46, v46[1]);
            int64_t v11 = (char *)__p;
            if (__p)
            {
              double v12 = v45;
              double v13 = __p;
              if (v45 != __p)
              {
                do
                {
                  double v14 = (void *)*((void *)v12 - 4);
                  if (v14)
                  {
                    *((void *)v12 - 3) = v14;
                    operator delete(v14);
                  }
                  if (*(v12 - 33) < 0) {
                    operator delete(*((void **)v12 - 7));
                  }
                  v12 -= 56;
                }
                while (v12 != v11);
                double v13 = __p;
              }
              uint64_t v45 = v11;
              operator delete(v13);
            }
            uint64_t v15 = __A;
            if (*(double *)&__A != 0.0)
            {
              uint64_t v16 = v43;
              uint64_t v17 = __A;
              if (v43 != __A)
              {
                do
                {
                  uint64_t v18 = (void *)*((void *)v16 - 4);
                  if (v18)
                  {
                    *((void *)v16 - 3) = v18;
                    operator delete(v18);
                  }
                  if (*((char *)v16 - 33) < 0) {
                    operator delete(*((void **)v16 - 7));
                  }
                  v16 -= 7;
                }
                while (v16 != v15);
                uint64_t v17 = __A;
              }
              int v43 = v15;
              operator delete(v17);
            }
            unint64_t v41 = 0;
            uint64_t v19 = *(void *)(a1 + 8);
            sub_19E29CE6C((long long **)v48, (uint64_t)v40);
            uint64_t v20 = *(void *)(v19 + 8);
            if (*(_DWORD *)(v20 + 96))
            {
              sub_19E2B24BC(*(void *)(v19 + 8), (const double **)v40, (uint64_t)&__A);
              __C[0] = 0.0;
              vDSP_dotprD(__A, 1, *(const double **)(v20 + 232), 1, __C, (int)__p);
              double v21 = __C[0];
              __C[0] = 0.0;
              vDSP_meanvD(*(const double **)(v20 + 264), 1, __C, *(int *)(v20 + 288));
              double v22 = __C[0];
              sub_19E2B3C04(v20, (const double **)v40, (uint64_t)&__A);
              double v24 = v23;
              double v25 = *(double *)(v20 + 16);
              if (*(double *)&__A != 0.0)
              {
                int v43 = __A;
                operator delete(__A);
              }
              double v26 = v22 + v21;
              double v27 = v25 + v24;
            }
            else
            {
              *(double *)&__A = 0.0;
              vDSP_meanvD(*(const double **)(v20 + 264), 1, (double *)&__A, *(int *)(v20 + 288));
              double v26 = *(double *)&__A;
              double v27 = sub_19E2B3B34(v20, (const double **)v40);
            }
            double v28 = sqrt(v27);
            if (v28 < 0.00000001 || (int v29 = *(_DWORD *)(*(void *)(v19 + 8) + 96), v29 <= 0))
            {
              double v30 = (*(double (**)(uint64_t))(*(void *)v19 + 8))(v19);
            }
            else
            {
              if (*(_DWORD *)(v19 + 56) != v29) {
                (*(void (**)(uint64_t))(*(void *)v19 + 16))(v19);
              }
              (**(void (***)(uint64_t, double, double))v19)(v19, v26, v28);
            }
            uint64_t v31 = *(uint64_t **)&v30;
            if (v40[0])
            {
              v40[1] = v40[0];
              operator delete(v40[0]);
            }
            unint64_t v41 = v31;
            sub_19E29D218((int *)(a1 + 64), (uint64_t *)v48, &v41);
            ++v9;
          }
          while (v10 != v9);
        }
        sub_19E2470C8((char **)v48);
        uint64_t v32 = (void *)v7[1];
        if (v32)
        {
          do
          {
            uint64_t v33 = (void **)v32;
            uint64_t v32 = (void *)*v32;
          }
          while (v32);
        }
        else
        {
          do
          {
            uint64_t v33 = (void **)v7[2];
            BOOL v34 = *v33 == v7;
            uint64_t v7 = v33;
          }
          while (!v34);
        }
        uint64_t v7 = v33;
      }
      while (v33 != v51);
    }
    uint64_t v35 = *(uint64_t **)(a1 + 72);
    sub_19E291E68((uint64_t **)v39, v35);
    *(void *)(v39 + 96) = v35[12];
    sub_19E29D74C(*(char ***)(a1 + 72), *(void *)(a1 + 80), (uint64_t)v48, 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 3));
    *(void *)(a1 + 80) = sub_19E2470C8((char **)(*(void *)(a1 + 80) - 104));
    sub_19E13C56C((uint64_t)&v50, v51[0]);
    uint64_t v36 = (char **)v52;
    if (v52)
    {
      double v37 = v53;
      double v38 = v52;
      if (v53 != (char **)v52)
      {
        do
          double v37 = sub_19E2470C8(v37 - 12);
        while (v37 != v36);
        double v38 = v52;
      }
      uint64_t v53 = v36;
      operator delete(v38);
    }
  }
  else
  {
    sub_19E291E68((uint64_t **)a3, *(uint64_t **)(a1 + 72));
    *(void *)(a3 + 96) = *(void *)(v6 + 96);
    sub_19E29D74C(*(char ***)(a1 + 72), *(void *)(a1 + 80), (uint64_t)v48, 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 3));
    *(void *)(a1 + 80) = sub_19E2470C8((char **)(*(void *)(a1 + 80) - 104));
  }
}

void sub_19E2B3144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  sub_19E2470C8(v28);
  sub_19E13C56C(a10, *(void **)(v29 - 184));
  sub_19E2462FC((void **)(v29 - 168));
  _Unwind_Resume(a1);
}

void sub_19E2B31DC(char *a1@<X8>)
{
  a1[23] = 17;
  strcpy(a1, "genetic_optimizer");
}

void sub_19E2B3200(char *a1@<X8>)
{
  a1[23] = 21;
  strcpy(a1, "acquisition_optimizer");
}

void *sub_19E2B3228(void *a1)
{
  *a1 = &unk_1EF0A83D8;
  uint64_t v2 = a1[5];
  if (v2)
  {
    uint64_t v3 = a1[6];
    double v4 = (void *)a1[5];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 17) < 0) {
          operator delete(*(void **)(v3 - 40));
        }
        v3 -= 40;
      }
      while (v3 != v2);
      double v4 = (void *)a1[5];
    }
    a1[6] = v2;
    operator delete(v4);
  }
  uint64_t v5 = a1[2];
  if (v5)
  {
    uint64_t v6 = a1[3];
    uint64_t v7 = (void *)a1[2];
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 25) < 0) {
          operator delete(*(void **)(v6 - 48));
        }
        v6 -= 48;
      }
      while (v6 != v5);
      uint64_t v7 = (void *)a1[2];
    }
    a1[3] = v5;
    operator delete(v7);
  }
  return a1;
}

void sub_19E2B3300(uint64_t a1)
{
  int v18 = 5;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v19 = 0;
  uint64_t v3 = *(void *)(a1 + 72);
  uint64_t v2 = (uint64_t *)(a1 + 72);
  if (v3 == *(void *)(a1 + 80))
  {
    double v12 = 0;
    *(_DWORD *)(a1 + 64) = 5;
    if ((int *)(a1 + 64) == &v18) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  do
  {
    sub_19E291E68(v17, (uint64_t *)v3);
    v17[12] = *(uint64_t **)(v3 + 96);
    sub_19E29D74C(*(char ***)(a1 + 72), *(void *)(a1 + 80), (uint64_t)__p, 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 3));
    *(void *)(a1 + 80) = sub_19E2470C8((char **)(*(void *)(a1 + 80) - 104));
    uint64_t v16 = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    sub_19E29CE6C((long long **)v17, (uint64_t)__p);
    v5.n128_f64[0] = sub_19E2B3A28(*(void *)(v4 + 8), (const double **)__p);
    double v7 = sqrt(v6);
    if (v7 < 0.00000001 || (int v8 = *(_DWORD *)(*(void *)(v4 + 8) + 96), v8 <= 0))
    {
      double v10 = (*(double (**)(uint64_t, __n128))(*(void *)v4 + 8))(v4, v5);
    }
    else
    {
      double v9 = v5.n128_f64[0];
      if (*(_DWORD *)(v4 + 56) != v8) {
        (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
      }
      (**(void (***)(uint64_t, double, double))v4)(v4, v9, v7);
    }
    *(double *)&int64_t v11 = v10;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    uint64_t v16 = v11;
    if (*(double *)&v11 > (*(double (**)(void))(**(void **)(a1 + 8) + 8))(*(void *)(a1 + 8))) {
      sub_19E29D218(&v18, (uint64_t *)v17, &v16);
    }
    sub_19E2470C8((char **)v17);
    uint64_t v3 = *(void *)(a1 + 72);
  }
  while (v3 != *(void *)(a1 + 80));
  double v12 = v19;
  *(_DWORD *)(a1 + 64) = v18;
  if ((int *)(a1 + 64) != &v18)
  {
LABEL_17:
    sub_19E29D4FC(v2, v12, v20, 0x4EC4EC4EC4EC4EC5 * (v20 - v12));
    double v12 = v19;
  }
LABEL_18:
  if (v12)
  {
    double v13 = (char **)v20;
    double v14 = v12;
    if (v20 != v12)
    {
      do
        double v13 = sub_19E2470C8(v13 - 13);
      while (v13 != (char **)v12);
      double v14 = v19;
    }
    uint64_t v20 = v12;
    operator delete(v14);
  }
}

void sub_19E2B3594(_Unwind_Exception *a1)
{
  sub_19E29C7AC(v1 - 120);
  _Unwind_Resume(a1);
}

void sub_19E2B35A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_19E2470C8((char **)va);
  sub_19E29C7AC(v7 - 120);
  _Unwind_Resume(a1);
}

void sub_19E2B35CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *a15)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E2470C8(&a15);
  sub_19E29C7AC(v15 - 120);
  _Unwind_Resume(a1);
}

void sub_19E2B35F8(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = a2 + 16;
  *(void *)(a2 + 24) = 0;
  sub_19E29DC58(a1, __p);
  sub_19E2459C8(v7, (uint64_t *)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v3 = 50;
  do
  {
    int v5 = sub_19E29E07C((uint64_t)v9, (uint64_t)v7, v9);
    uint64_t v4 = sub_19E29DD48((int *)a2, &v5);
    ++*(_DWORD *)v4;
    --v3;
  }
  while (v3);
  if (v9[0])
  {
    v9[1] = v9[0];
    operator delete(v9[0]);
  }
  std::random_device::~random_device(&v8);
}

void sub_19E2B36D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14)
{
  if (__p)
  {
    operator delete(__p);
    sub_19E13C56C(v14, *v15);
    _Unwind_Resume(a1);
  }
  sub_19E13C56C(v14, *v15);
  _Unwind_Resume(a1);
}

void sub_19E2B3738(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t **a3@<X8>)
{
  sub_19E291E68(a3, a2);
  sub_19E29E298((long long **)a2, (uint64_t)v8);
  sub_19E2B38C8(a1, (uint64_t *)v8, v9);
  sub_19E29E624((uint64_t)a2, (uint64_t)v6);
  sub_19E2B3978(a1, (uint64_t *)v6, __p);
  sub_19E29E900((uint64_t *)a3, (uint64_t *)v9);
  sub_19E29EAC0((uint64_t)a3, (uint64_t *)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v6[0])
  {
    v6[1] = v6[0];
    operator delete(v6[0]);
  }
  if (*(void *)&v9[0])
  {
    *((void *)&v9[0] + 1) = *(void *)&v9[0];
    operator delete(*(void **)&v9[0]);
  }
  if (v8[0])
  {
    v8[1] = v8[0];
    operator delete(v8[0]);
  }
}

void sub_19E2B3808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v21 = *(void **)(v19 - 64);
    if (!v21)
    {
LABEL_3:
      double v22 = a17;
      if (!a17) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v21 = *(void **)(v19 - 64);
    if (!v21) {
      goto LABEL_3;
    }
  }
  *(void *)(v19 - 56) = v21;
  operator delete(v21);
  double v22 = a17;
  if (!a17)
  {
LABEL_4:
    sub_19E2470C8(v18);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(v22);
  sub_19E2470C8(v18);
  _Unwind_Resume(a1);
}

double sub_19E2B38C8@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  int v5 = (uint64_t *)(a1 + 16);
  if (sub_19E244298((uint64_t *)(a1 + 16)))
  {
    sub_19E244360(v5, (uint64_t *)v7);
    sub_19E310AEC(a2, (uint64_t)v7, (uint64_t)a3);
    if (__p)
    {
      double v9 = __p;
      operator delete(__p);
    }
    if (v7[0])
    {
      v7[1] = v7[0];
      operator delete(v7[0]);
    }
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

void sub_19E2B3964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double sub_19E2B3978@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v5 = a1 + 16;
  if (sub_19E244DC4(a1 + 16))
  {
    sub_19E244E8C(v5, (uint64_t *)v7);
    sub_19E311780(a2, (uint64_t *)v7, (uint64_t)a3);
    if (__p)
    {
      double v9 = __p;
      operator delete(__p);
    }
    if (v7[0])
    {
      v7[1] = v7[0];
      operator delete(v7[0]);
    }
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

void sub_19E2B3A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double sub_19E2B3A28(uint64_t a1, const double **a2)
{
  if (*(_DWORD *)(a1 + 96))
  {
    sub_19E2B24BC(a1, a2, (uint64_t)__A);
    double __C = 0.0;
    vDSP_dotprD(__A[0], 1, *(const double **)(a1 + 232), 1, &__C, (int)__N);
    double v4 = __C;
    double __C = 0.0;
    vDSP_meanvD(*(const double **)(a1 + 264), 1, &__C, *(int *)(a1 + 288));
    double v5 = __C;
    sub_19E2B3C04(a1, a2, (uint64_t)__A);
    if (__A[0])
    {
      __A[1] = __A[0];
      operator delete(__A[0]);
    }
    return v5 + v4;
  }
  else
  {
    double v6 = sub_19E2B23D8(a1, a2);
    sub_19E2B3B34(a1, a2);
  }
  return v6;
}

void sub_19E2B3B14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_19E2B3B34(uint64_t a1, const double **a2)
{
  if (*(_DWORD *)(a1 + 96))
  {
    sub_19E2B24BC(a1, a2, (uint64_t)__p);
    sub_19E2B3C04(a1, a2, (uint64_t)__p);
    double v5 = v4;
    double v6 = *(double *)(a1 + 16);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    return v6 + v5;
  }
  else
  {
    double v8 = *(double *)(a1 + 24);
    double v9 = sub_19E2B2768(a1 + 8, (uint64_t)a2, a2);
    return *(double *)(a1 + 16) + exp(v9 * -0.5) * v8;
  }
}

void sub_19E2B3BE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2B3C04(uint64_t a1, const double **a2, uint64_t a3)
{
  sub_19E29F880(a1 + 168, (uint64_t)__p);
  uint64_t v6 = *(unsigned int *)(a1 + 192);
  if ((int)v6 >= 1)
  {
    uint64_t v7 = 0;
    int v8 = *(_DWORD *)(a1 + 196);
    int v9 = v24;
    int v10 = 1;
    int v11 = -1;
    double v12 = __p[0];
    do
    {
      if (v8 <= v10) {
        int v13 = v10;
      }
      else {
        int v13 = v8;
      }
      int v14 = v7 + 1;
      if ((int)v7 + 1 >= v8) {
        goto LABEL_3;
      }
      unsigned int v15 = 0;
      int v16 = v13 + v11;
      uint64_t v17 = (int)v7 * (uint64_t)v9;
      if ((v13 + v11) < 4)
      {
        int v18 = v7 + 1;
      }
      else
      {
        int v18 = v7 + 1;
        if (v13 - (int)v7 + v10 - 2 >= v10)
        {
          int v19 = 0;
          unsigned int v15 = v16 & 0xFFFFFFFC;
          int v18 = v14 + (v16 & 0xFFFFFFFC);
          do
          {
            uint64_t v20 = &v12[v17 + v10 + v19];
            *uint64_t v20 = 0uLL;
            v20[1] = 0uLL;
            v19 += 4;
          }
          while ((v16 & 0xFFFFFFFC) != v19);
          if (v16 == v15) {
            goto LABEL_3;
          }
        }
      }
      unsigned int v21 = v13 - v15;
      do
      {
        v12[v17 + v18] = 0;
        int v18 = ++v15 + v14;
        --v21;
      }
      while (v10 != v21);
LABEL_3:
      ++v7;
      ++v10;
      --v11;
    }
    while (v7 != v6);
  }
  sub_19E29F6FC((uint64_t)__p, a3, (uint64_t)__B);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  double v22 = sub_19E2B2768(a1 + 8, (uint64_t)a2, a2);
  __p[0] = 0;
  vDSP_dotprD(__B[0], 1, __B[0], 1, (double *)__p, (int)__N);
  if (__B[0])
  {
    __B[1] = __B[0];
    operator delete(__B[0]);
  }
  exp(v22 * -0.5);
}

void sub_19E2B3DCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E2B3DFC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  BOOL v34 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  sub_19E246830(&v34, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 4));
  __p = 0;
  double v38 = 0;
  uint64_t v39 = 0;
  sub_19E246A1C(&__p, a3[3], a3[4], 0xCCCCCCCCCCCCCCCDLL * ((a3[4] - a3[3]) >> 3));
  sub_19E2B2AB4((void *)a1, a2, (uint64_t *)&v34);
  int v8 = (void **)__p;
  if (__p)
  {
    int v9 = v38;
    int v10 = __p;
    if (v38 != __p)
    {
      do
      {
        if (*((char *)v9 - 17) < 0) {
          operator delete(*(v9 - 5));
        }
        v9 -= 5;
      }
      while (v9 != v8);
      int v10 = __p;
    }
    double v38 = v8;
    operator delete(v10);
  }
  int v11 = (void **)v34;
  if (v34)
  {
    double v12 = v35;
    int v13 = v34;
    if (v35 != v34)
    {
      do
      {
        if (*((char *)v12 - 25) < 0) {
          operator delete(*(v12 - 6));
        }
        v12 -= 6;
      }
      while (v12 != v11);
      int v13 = v34;
    }
    uint64_t v35 = v11;
    operator delete(v13);
  }
  *(void *)a1 = &unk_1EF0A7FE8;
  unsigned int v14 = sub_19E244298(a3);
  sub_19E2A099C(a1 + 64, v14);
  sub_19E299010(a1 + 184);
  sub_19E244360(a3, (uint64_t *)v32);
  sub_19E2A16E8(a1 + 64, (uint64_t *)v32);
  sub_19E2A1818(a1 + 64, (uint64_t *)v33);
  if (v33[0])
  {
    v33[1] = v33[0];
    operator delete(v33[0]);
  }
  if (v32[0])
  {
    v32[1] = v32[0];
    operator delete(v32[0]);
  }
  if ((a4 & 0xFF00000000) != 0)
  {
    uint64_t v15 = 0;
    *(_DWORD *)(a1 + 7776) = a4;
    uint64_t v16 = 1;
    unsigned int v17 = a4;
    do
    {
      int v18 = 1812433253 * (v17 ^ (v17 >> 30));
      unsigned int v17 = v18 + v16;
      *(_DWORD *)(a1 + 7780 + 4 * v15) = v15 + v18 + 1;
      ++v16;
      ++v15;
    }
    while (v15 != 623);
    *(void *)(a1 + 10272) = 0;
    *(_DWORD *)(a1 + 184) = a4;
    uint64_t v19 = 1;
    uint64_t v20 = 47;
    unsigned int v21 = a4;
    do
    {
      int v22 = 1812433253 * (v21 ^ (v21 >> 30));
      unsigned int v21 = v22 + v19;
      *(_DWORD *)(a1 + 4 * v20) = v20 + v22 - 46;
      ++v19;
      ++v20;
    }
    while (v20 != 670);
    uint64_t v23 = 0;
    *(void *)(a1 + 2680) = 0;
    *(_DWORD *)(a1 + 2712) = a4;
    uint64_t v24 = 1;
    unsigned int v25 = a4;
    do
    {
      int v26 = 1812433253 * (v25 ^ (v25 >> 30));
      unsigned int v25 = v26 + v24;
      *(_DWORD *)(a1 + 2716 + 4 * v23) = v23 + v26 + 1;
      ++v24;
      ++v23;
    }
    while (v23 != 623);
    uint64_t v27 = 0;
    *(void *)(a1 + 5208) = 0;
    *(_DWORD *)(a1 + 5232) = a4;
    uint64_t v28 = 1;
    unsigned int v29 = a4;
    do
    {
      int v30 = 1812433253 * (v29 ^ (v29 >> 30));
      unsigned int v29 = v30 + v28;
      *(_DWORD *)(a1 + 5236 + 4 * v27) = v27 + v30 + 1;
      ++v28;
      ++v27;
    }
    while (v27 != 623);
    *(void *)(a1 + 7728) = 0;
    sub_19E312C64();
  }
  return a1;
}

void sub_19E2B40E0(_Unwind_Exception *a1)
{
  sub_19E2A0A3C(v2);
  sub_19E2B3228(v1);
  _Unwind_Resume(a1);
}

void sub_19E2B414C(_Unwind_Exception *a1)
{
  sub_19E2B3228(v1);
  _Unwind_Resume(a1);
}

void sub_19E2B4164(uint64_t a1)
{
  uint64_t v1 = sub_19E2B46AC(a1);

  operator delete(v1);
}

void sub_19E2B418C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v12 = 0u;
  memset(v11, 0, sizeof(v11));
  *(void *)&long long v12 = (char *)&v12 + 8;
  v15[0] = 0;
  v15[1] = 0;
  uint64_t v13 = 0;
  unsigned int v14 = v15;
  double v4 = (*(double (**)(void))(**(void **)(a1 + 8) + 8))(*(void *)(a1 + 8));
  sub_19E291E68((uint64_t **)a2, (uint64_t *)v11);
  *(double *)(a2 + 96) = v4;
  sub_19E2470C8((char **)v11);
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v16 = 0;
  sub_19E246830(&v16, *(void *)(a1 + 16), *(void *)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 4));
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  sub_19E246A1C(&v19, *(void *)(a1 + 40), *(void *)(a1 + 48), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 3));
  sub_19E2459CC((uint64_t *)&v16, a1 + 184, 5, (char **)&v22);
  double v5 = v19;
  if (v19)
  {
    uint64_t v6 = v20;
    uint64_t v7 = v19;
    if (v20 != v19)
    {
      do
      {
        if (*((char *)v6 - 17) < 0) {
          operator delete(*(v6 - 5));
        }
        v6 -= 5;
      }
      while (v6 != v5);
      uint64_t v7 = v19;
    }
    uint64_t v20 = v5;
    operator delete(v7);
  }
  uint64_t v8 = (uint64_t)v16;
  if (v16)
  {
    uint64_t v9 = v17;
    int v10 = v16;
    if ((void *)v17 != v16)
    {
      do
      {
        if (*(char *)(v9 - 25) < 0) {
          operator delete(*(void **)(v9 - 48));
        }
        v9 -= 48;
      }
      while (v9 != v8);
      int v10 = v16;
    }
    uint64_t v17 = v8;
    operator delete(v10);
  }
  sub_19E2B4784(a1, v22);
}

void sub_19E2B45D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v8 = va_arg(va1, char *);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  sub_19E2470C8((char **)va1);
  sub_19E2470C8((char **)va);
  sub_19E2462FC((void **)(v6 - 112));
  sub_19E2470C8(v5);
  _Unwind_Resume(a1);
}

void sub_19E2B468C(char *a1@<X8>)
{
  a1[23] = 16;
  strcpy(a1, "direct_optimizer");
}

void *sub_19E2B46AC(uint64_t a1)
{
  *(void *)a1 = &unk_1EF0A7FE8;
  std::random_device::~random_device((std::random_device *)(a1 + 10280));
  std::random_device::~random_device((std::random_device *)(a1 + 7736));
  std::random_device::~random_device((std::random_device *)(a1 + 5216));
  std::random_device::~random_device((std::random_device *)(a1 + 2688));
  *(void *)(a1 + 64) = &unk_1EF0A7F70;
  sub_19E311F9C(*(void *)(a1 + 72));
  uint64_t v2 = *(void **)(a1 + 128);
  if (v2)
  {
    *(void *)(a1 + 136) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 104);
  if (v3)
  {
    *(void *)(a1 + 112) = v3;
    operator delete(v3);
  }
  double v4 = *(void **)(a1 + 80);
  if (v4)
  {
    *(void *)(a1 + 88) = v4;
    operator delete(v4);
  }

  return sub_19E2B3228((void *)a1);
}

void sub_19E2B4784(uint64_t a1, long long **a2)
{
  v4[0] = a1;
  v4[1] = a2;
  uint64_t v2 = a1 + 64;
  sub_19E29E298(a2, (uint64_t)&__p);
  sub_19E2B4B54(v2, (uint64_t)v4, (uint64_t)&__p);
}

void sub_19E2B4A7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a13)
  {
    operator delete(a13);
    uint64_t v24 = __p;
    if (!__p)
    {
LABEL_4:
      sub_19E2470C8((char **)&a21);
      unsigned int v25 = *(void **)(v22 - 128);
      if (v25)
      {
        *(void *)(v22 - 120) = v25;
        operator delete(v25);
      }
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v24 = __p;
    if (!__p) {
      goto LABEL_4;
    }
  }
  operator delete(v24);
  goto LABEL_4;
}

void sub_19E2B4B54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a1 + 112)) {
    (**(void (***)(uint64_t, void))a1)(a1, *(unsigned int *)(a3 + 24));
  }
  operator new();
}

void sub_19E2B4FE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  __cxa_free_exception(v15);
  if (a2 != 3)
  {
    if (a2 == 2)
    {
      uint64_t v19 = __cxa_begin_catch(a1);
      (*(void (**)(void *))(*(void *)v19 + 16))(v19);
      sub_19E29FAE8(v14, (uint64_t)&a13);
      if (a13)
      {
        a14 = (uint64_t)a13;
        operator delete(a13);
      }
      __cxa_end_catch();
LABEL_13:
      JUMPOUT(0x19E2B4DD0);
    }
    if (a2 != 1)
    {
      if (__p) {
        operator delete(__p);
      }
      _Unwind_Resume(a1);
    }
  }
  uint64_t v18 = __cxa_begin_catch(a1);
  (*(void (**)(void *))(*(void *)v18 + 16))(v18);
  __cxa_end_catch();
  goto LABEL_13;
}

void sub_19E2B5138(uint64_t **a1, void *a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  double v5 = a1[1];
  unint64_t v7 = (char *)v5 - (char *)*a1;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  __p = 0;
  int v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  if (!(v7 >> 3))
  {
    uint64_t v8 = 0;
    __p = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    int v20 = v7 >> 3;
    if (v6 == v5) {
      goto LABEL_13;
    }
    goto LABEL_6;
  }
  if (((v7 >> 3) & 0x80000000) != 0) {
    sub_19E13D694();
  }
  uint64_t v8 = operator new((uint64_t)(v7 << 29) >> 29);
  bzero(v8, (uint64_t)(v7 << 29) >> 29);
  __p = v8;
  uint64_t v18 = (char *)v8 + ((uint64_t)(v7 << 29) >> 29);
  uint64_t v19 = (char *)v8 + 8 * (int)((uint64_t)v7 >> 3);
  int v20 = v7 >> 3;
  if (v6 != v5)
  {
LABEL_6:
    uint64_t v9 = 0;
    if (v7 - 8 < 0x18) {
      goto LABEL_11;
    }
    if ((unint64_t)((char *)v8 - (char *)v6) < 0x20) {
      goto LABEL_11;
    }
    unint64_t v10 = ((v7 - 8) >> 3) + 1;
    uint64_t v9 = v10 & 0x3FFFFFFFFFFFFFFCLL;
    uint64_t v11 = v8 + 1;
    uint64_t v12 = (long long *)(v6 + 2);
    uint64_t v13 = v10 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v14 = *v12;
      *(v11 - 1) = *(v12 - 1);
      *uint64_t v11 = v14;
      v11 += 2;
      v12 += 2;
      v13 -= 4;
    }
    while (v13);
    v6 += v10 & 0x3FFFFFFFFFFFFFFCLL;
    if (v10 != v9)
    {
LABEL_11:
      uint64_t v15 = (void *)v8 + v9;
      do
      {
        uint64_t v16 = *v6++;
        *v15++ = v16;
      }
      while (v6 != v5);
    }
  }
LABEL_13:
  if (*a2 == a2[1])
  {
    sub_19E2B530C(a3, (uint64_t)&__p);
    if (__p)
    {
      uint64_t v18 = (char *)__p;
      operator delete(__p);
    }
  }
  else
  {
    sub_19E2B530C(a3, (uint64_t)&__p);
    __break(1u);
  }
}

void sub_19E2B52D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2B52F0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E13A9BC(a1);
}

uint64_t sub_19E2B530C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*a1 + 8);
  sub_19E29E624(a1[1], (uint64_t)v25);
  uint64_t v4 = v26;
  uint64_t v28 = 0;
  unsigned int v29 = 0;
  uint64_t v27 = 0;
  if (!v26)
  {
    int v30 = 0;
    goto LABEL_11;
  }
  if ((v26 & 0x80000000) != 0) {
    sub_19E13D694();
  }
  double v5 = (float64x2_t *)operator new(8 * (int)v26);
  uint64_t v27 = v5;
  unsigned int v29 = (char *)&v5->f64[(int)v4];
  bzero(v5, 8 * (int)v4);
  uint64_t v28 = (char *)&v5->f64[(int)v4];
  int v30 = v4;
  uint64_t v6 = (char *)v25[0];
  if (v4 < 8)
  {
    uint64_t v7 = 0;
LABEL_9:
    uint64_t v16 = v4 - v7;
    uint64_t v17 = v7 << 32;
    do
    {
      *(double *)((char *)v5->f64 + (v17 >> 29)) = (double)*(int *)&v6[v17 >> 30];
      v17 += 0x100000000;
      --v16;
    }
    while (v16);
    goto LABEL_11;
  }
  uint64_t v7 = v4 & 0xFFFFFFF8;
  uint64_t v8 = v5 + 2;
  uint64_t v9 = (char *)v25[0] + 16;
  uint64_t v10 = v7;
  do
  {
    long long v11 = *((_OWORD *)v9 - 1);
    v12.i64[0] = (int)v11;
    v12.i64[1] = SDWORD1(v11);
    float64x2_t v13 = vcvtq_f64_s64(v12);
    v12.i64[0] = SDWORD2(v11);
    v12.i64[1] = SHIDWORD(v11);
    float64x2_t v14 = vcvtq_f64_s64(v12);
    v12.i64[0] = (int)*(_OWORD *)v9;
    v12.i64[1] = (int)HIDWORD(*(void *)v9);
    float64x2_t v15 = vcvtq_f64_s64(v12);
    v12.i64[0] = (int)*((void *)v9 + 1);
    v12.i64[1] = (int)HIDWORD(*(_OWORD *)v9);
    v8[-2] = v13;
    v8[-1] = v14;
    *uint64_t v8 = v15;
    v8[1] = vcvtq_f64_s64(v12);
    v8 += 4;
    v9 += 32;
    v10 -= 8;
  }
  while (v10);
  if (v7 != v4) {
    goto LABEL_9;
  }
LABEL_11:
  sub_19E29FF68(a2, (uint64_t)&v27, (uint64_t)__p);
  double v18 = sub_19E2B3A28(*(void *)(v3 + 8), (const double **)__p);
  double v20 = sqrt(v19);
  if (v20 < 0.00000001 || (int v21 = *(_DWORD *)(*(void *)(v3 + 8) + 96), v21 <= 0))
  {
    double v22 = (*(double (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  else
  {
    if (*(_DWORD *)(v3 + 56) != v21) {
      (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
    (**(void (***)(uint64_t, double, double))v3)(v3, v18, v20);
  }
  double v23 = v22;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v27)
  {
    uint64_t v28 = (char *)v27;
    operator delete(v27);
  }
  if (v25[0])
  {
    v25[1] = v25[0];
    operator delete(v25[0]);
  }
  return *(void *)&v23;
}

void sub_19E2B5558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p)
  {
    operator delete(__p);
    double v19 = a9;
    if (!a9) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    double v19 = a9;
    if (!a9) {
      goto LABEL_3;
    }
  }
  operator delete(v19);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E2B55D8(uint64_t a1)
{
  *(void *)a1 = &unk_1EF0A8558;
  uint64_t v2 = *(char ***)(a1 + 10672);
  if (v2)
  {
    uint64_t v3 = *(char ***)(a1 + 10680);
    uint64_t v4 = v2;
    if (v3 != v2)
    {
      do
        uint64_t v3 = sub_19E2470C8(v3 - 12);
      while (v3 != v2);
      uint64_t v4 = *(char ***)(a1 + 10672);
    }
    *(void *)(a1 + 10680) = v2;
    operator delete(v4);
  }
  std::random_device::~random_device((std::random_device *)(a1 + 10664));
  std::random_device::~random_device((std::random_device *)(a1 + 8120));
  std::random_device::~random_device((std::random_device *)(a1 + 5600));
  std::random_device::~random_device((std::random_device *)(a1 + 3072));
  uint64_t v5 = *(void *)(a1 + 560);
  *(void *)(a1 + 560) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *(void *)(a1 + 480) = &unk_1EF0A7CF0;
  uint64_t v6 = *(void **)(a1 + 496);
  if (v6)
  {
    *(void *)(a1 + 504) = v6;
    operator delete(v6);
  }
  sub_19E2A3E04((void *)(a1 + 176));
  uint64_t v7 = *(void *)(a1 + 152);
  if (v7)
  {
    uint64_t v8 = *(void *)(a1 + 160);
    uint64_t v9 = *(void **)(a1 + 152);
    if (v8 != v7)
    {
      uint64_t v10 = *(void *)(a1 + 160);
      do
      {
        int64x2_t v12 = *(void **)(v10 - 56);
        v10 -= 56;
        long long v11 = v12;
        if (v12)
        {
          *(void *)(v8 - 48) = v11;
          operator delete(v11);
        }
        uint64_t v8 = v10;
      }
      while (v10 != v7);
      uint64_t v9 = *(void **)(a1 + 152);
    }
    *(void *)(a1 + 160) = v7;
    operator delete(v9);
  }
  *(void *)a1 = &unk_1EF0A8318;
  sub_19E2934EC(a1 + 32);
  float64x2_t v13 = *(char ***)(a1 + 8);
  if (v13)
  {
    float64x2_t v14 = *(char ***)(a1 + 16);
    float64x2_t v15 = *(void **)(a1 + 8);
    if (v14 != v13)
    {
      do
        float64x2_t v14 = sub_19E2470C8(v14 - 13);
      while (v14 != v13);
      float64x2_t v15 = *(void **)(a1 + 8);
    }
    *(void *)(a1 + 16) = v13;
    operator delete(v15);
  }
  return a1;
}

void sub_19E2B5794(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t *)(a1 + 72);
  uint64_t v4 = *(void *)(a1 + 72);
  int v6 = *(_DWORD *)(a1 + 96);
  int v7 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 96) = v6 + 1;
  *(_DWORD *)(a1 + 100) = v7;
  unint64_t v8 = v7 * (v6 + 1);
  unint64_t v9 = (*(void *)(a1 + 80) - v4) >> 3;
  if (v8 <= v9)
  {
    if (v8 < v9) {
      *(void *)(a1 + 80) = v4 + 8 * v8;
    }
  }
  else
  {
    sub_19E2482DC(a1 + 72, v8 - v9);
    int v6 = *(_DWORD *)(a1 + 96) - 1;
  }
  sub_19E29FAE8(a2, (uint64_t)__p);
  uint64_t v10 = *(int *)(a1 + 100);
  long long v11 = (char *)__p[0];
  if (!v10)
  {
    if (!__p[0]) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  uint64_t v12 = (int)v10 * (uint64_t)v6;
  uint64_t v13 = *v5;
  if (v10 >= 8 && (uint64_t v14 = 8 * v12 + v13, v14 - (unint64_t)__p[0] >= 0x20))
  {
    unint64_t v15 = v10 & 0xFFFFFFFFFFFFFFFCLL;
    double v20 = (long long *)((char *)__p[0] + 16);
    int v21 = (_OWORD *)(v14 + 16);
    unint64_t v22 = v10 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      long long v23 = *v20;
      *(v21 - 1) = *(v20 - 1);
      *int v21 = v23;
      v20 += 2;
      v21 += 2;
      v22 -= 4;
    }
    while (v22);
    if (v15 == v10) {
      goto LABEL_17;
    }
  }
  else
  {
    unint64_t v15 = 0;
  }
  uint64_t v16 = v10 - v15;
  uint64_t v17 = (void *)(v13 + 8 * (v15 + v12));
  double v18 = &v11[8 * v15];
  do
  {
    uint64_t v19 = *(void *)v18;
    v18 += 8;
    *v17++ = v19;
    --v16;
  }
  while (v16);
LABEL_17:
  __p[1] = v11;
  operator delete(v11);
LABEL_18:
  sub_19E2B58D0(a1, 1, 1);
}

void sub_19E2B58D0(uint64_t a1, int a2, int a3)
{
  if (a2)
  {
    uint64_t v5 = (void *)(a1 + 104);
    uint64_t v4 = *(void *)(a1 + 104);
    int v6 = *(_DWORD *)(a1 + 96);
    *(_DWORD *)(a1 + 128) = v6;
    unint64_t v7 = (*(void *)(a1 + 112) - v4) >> 3;
    uint64_t v35 = v6;
    if (v6 <= v7)
    {
      if (v6 < v7) {
        *(void *)(a1 + 112) = v4 + 8 * v6;
      }
    }
    else
    {
      sub_19E2482DC(a1 + 104, v6 - v7);
      int v6 = *(_DWORD *)(a1 + 96);
      uint64_t v35 = v6;
    }
    if (v6)
    {
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      while (1)
      {
        uint64_t v10 = *(void *)(a1 + 72);
        signed int v11 = *(_DWORD *)(a1 + 100);
        double __C = 0;
        unint64_t v41 = 0;
        uint64_t v42 = 0;
        if (v11) {
          break;
        }
        uint64_t v12 = 0;
        double v37 = 0;
        uint64_t v38 = 0;
        __p = 0;
        unsigned int v39 = 0;
LABEL_26:
        double __C = 0;
        vDSP_meanvD(*(const double **)(a1 + 264), 1, (double *)&__C, *(int *)(a1 + 288));
        *(void *)(*v5 + 8 * v9) = __C;
        if (__p)
        {
          double v37 = __p;
          operator delete(__p);
        }
        if (v12) {
          operator delete(v12);
        }
        ++v9;
        v8 += 8;
        if (v9 == v35) {
          goto LABEL_34;
        }
      }
      if (v11 < 0) {
        sub_19E13D694();
      }
      uint64_t v12 = operator new(8 * v11);
      bzero(v12, 8 * v11);
      if (v11 >= 8 && (unint64_t)v12 - v10 - 8 * v9 * v11 >= 0x20)
      {
        unint64_t v13 = v11 & 0xFFFFFFFFFFFFFFFCLL;
        uint64_t v28 = (long long *)(v10 + v8 * v11 + 16);
        unsigned int v29 = v12 + 1;
        unint64_t v30 = v13;
        do
        {
          long long v31 = *v28;
          *(v29 - 1) = *(v28 - 1);
          *unsigned int v29 = v31;
          v28 += 2;
          v29 += 2;
          v30 -= 4;
        }
        while (v30);
        if (v13 == v11)
        {
LABEL_16:
          __p = 0;
          double v37 = 0;
          uint64_t v38 = 0;
          unsigned int v39 = v11;
          sub_19E2482DC((uint64_t)&__p, v11);
          uint64_t v19 = v39;
          if ((int)v39 >= 1)
          {
            uint64_t v20 = 0;
            int v21 = (char *)__p;
            if (v39 < 4) {
              goto LABEL_22;
            }
            if ((unint64_t)((unsigned char *)__p - (unsigned char *)v12) < 0x20) {
              goto LABEL_22;
            }
            unint64_t v22 = 0;
            uint64_t v20 = v39 & 0xFFFFFFFC;
            uint64_t v23 = (8 * v39) & 0x7FFFFFFE0;
            do
            {
              long long v24 = v12[v22 / 0x10 + 1];
              unsigned int v25 = &v21[v22];
              *(_OWORD *)unsigned int v25 = v12[v22 / 0x10];
              *((_OWORD *)v25 + 1) = v24;
              v22 += 32;
            }
            while (v23 != v22);
            if (v20 != v19)
            {
LABEL_22:
              uint64_t v26 = v19 - v20;
              uint64_t v27 = v20 << 32;
              do
              {
                *(void *)&v21[v27 >> 29] = *(void *)((char *)v12 + (v27 >> 29));
                v27 += 0x100000000;
                --v26;
              }
              while (v26);
            }
          }
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v13 = 0;
      }
      unint64_t v14 = v11 - v13;
      uint64_t v15 = 8 * v13;
      uint64_t v16 = (void *)v12 + v13;
      uint64_t v17 = (uint64_t *)(v10 + v15 + v8 * v11);
      do
      {
        uint64_t v18 = *v17++;
        *v16++ = v18;
        --v14;
      }
      while (v14);
      goto LABEL_16;
    }
  }
LABEL_34:
  sub_19E2B5C50(a1 + 8, (uint64_t *)(a1 + 72), (uint64_t)&__C);
  if ((char **)(a1 + 136) != &__C) {
    sub_19E1E5B9C((void *)(a1 + 136), __C, v41, (v41 - __C) >> 3);
  }
  uint64_t v32 = __C;
  *(void *)(a1 + 160) = v43;
  if (v32)
  {
    unint64_t v41 = v32;
    operator delete(v32);
  }
  sub_19E2A4E4C(a1 + 136, (uint64_t)&__C);
  if ((char **)(a1 + 168) != &__C) {
    sub_19E1E5B9C((void *)(a1 + 168), __C, v41, (v41 - __C) >> 3);
  }
  uint64_t v33 = __C;
  *(void *)(a1 + 192) = v43;
  if (v33)
  {
    unint64_t v41 = v33;
    operator delete(v33);
  }
  sub_19E2B6114(a1);
  if (a3) {
    sub_19E2B6338((int32x2_t *)a1);
  }
}

void sub_19E2B5BEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2B5C50(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *((unsigned int *)a2 + 6);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  if (!v4)
  {
    unint64_t v7 = 0;
    *(_DWORD *)(a3 + 24) = 0;
    *(_DWORD *)(a3 + 28) = 0;
LABEL_41:
    uint64_t v41 = (int)v4;
    if (v4) {
      goto LABEL_42;
    }
    return;
  }
  size_t v6 = 8 * (v4 * v4);
  unint64_t v7 = (char *)operator new(v6);
  *(void *)a3 = v7;
  *(void *)(a3 + 16) = &v7[v6];
  bzero(v7, v6);
  *(void *)(a3 + 8) = &v7[v6];
  *(_DWORD *)(a3 + 24) = v4;
  *(_DWORD *)(a3 + 28) = v4;
  if ((int)v4 <= 0) {
    goto LABEL_41;
  }
  uint64_t v49 = 0;
  uint64_t v8 = 0;
  uint64_t v52 = 1;
  uint64_t v47 = v4;
  uint64_t v48 = a1;
  do
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v51 = (int)v8 * v4;
    do
    {
      uint64_t v11 = *a2;
      signed int v12 = *((_DWORD *)a2 + 7);
      __p = 0;
      unsigned __int8 v58 = 0;
      unint64_t v59 = 0;
      if (v12)
      {
        if (v12 < 0) {
          sub_19E13D694();
        }
        unint64_t v13 = v7;
        size_t v14 = 8 * v12;
        uint64_t v15 = operator new(v14);
        bzero(v15, v14);
        if (v12 < 8 || (unint64_t)v15 - v11 - 8 * v8 * v12 < 0x20)
        {
          unint64_t v16 = 0;
          goto LABEL_12;
        }
        unint64_t v16 = v12 & 0xFFFFFFFFFFFFFFFCLL;
        uint64_t v33 = (long long *)(v11 + v49 * v12 + 16);
        BOOL v34 = v15 + 1;
        unint64_t v35 = v16;
        do
        {
          long long v36 = *v33;
          *(v34 - 1) = *(v33 - 1);
          *BOOL v34 = v36;
          v33 += 2;
          v34 += 2;
          v35 -= 4;
        }
        while (v35);
        if (v16 != v12)
        {
LABEL_12:
          unint64_t v17 = v12 - v16;
          uint64_t v18 = 8 * v16;
          uint64_t v19 = (void *)v15 + v16;
          uint64_t v20 = (uint64_t *)(v11 + v18 + v49 * v12);
          do
          {
            uint64_t v21 = *v20++;
            *v19++ = v21;
            --v17;
          }
          while (v17);
        }
        uint64_t v53 = 0;
        long long v54 = 0;
        signed int v56 = 0;
        int v55 = 0;
        uint64_t v53 = operator new(8 * v12);
        long long v54 = (char *)v53 + v14;
        int v55 = (char *)v53 + 8 * v12;
        signed int v56 = v12;
        memcpy(v53, v15, 8 * v12);
        unint64_t v22 = operator new(8 * v12);
        bzero(v22, 8 * v12);
        if (v12 < 8 || (unint64_t)v22 - v11 - 8 * v10 * v12 < 0x20)
        {
          unint64_t v23 = 0;
          goto LABEL_17;
        }
        unint64_t v23 = v12 & 0xFFFFFFFFFFFFFFFCLL;
        double v37 = (long long *)(v11 + v9 * v12 + 16);
        uint64_t v38 = v22 + 1;
        unint64_t v39 = v23;
        do
        {
          long long v40 = *v37;
          *(v38 - 1) = *(v37 - 1);
          *uint64_t v38 = v40;
          v37 += 2;
          v38 += 2;
          v39 -= 4;
        }
        while (v39);
        if (v23 != v12)
        {
LABEL_17:
          unint64_t v24 = v12 - v23;
          uint64_t v25 = 8 * v23;
          uint64_t v26 = (void *)v22 + v23;
          uint64_t v27 = (uint64_t *)(v11 + v25 + v9 * v12);
          do
          {
            uint64_t v28 = *v27++;
            *v26++ = v28;
            --v24;
          }
          while (v24);
        }
        __p = 0;
        unsigned __int8 v58 = 0;
        signed int v60 = 0;
        unint64_t v59 = 0;
        uint64_t v29 = (int)v10;
        __p = operator new(8 * v12);
        unsigned __int8 v58 = (char *)__p + v14;
        unint64_t v59 = (char *)__p + 8 * v12;
        signed int v60 = v12;
        memcpy(__p, v22, 8 * v12);
        unint64_t v7 = v13;
        a1 = v48;
        goto LABEL_21;
      }
      uint64_t v15 = 0;
      unint64_t v22 = 0;
      long long v54 = 0;
      int v55 = 0;
      uint64_t v53 = 0;
      signed int v56 = 0;
      uint64_t v29 = (int)v10;
      __p = 0;
      unsigned __int8 v58 = 0;
      signed int v60 = 0;
      unint64_t v59 = 0;
LABEL_21:
      double v30 = *(double *)(a1 + 16);
      double v31 = sub_19E2B2768(a1, (uint64_t)&v53, (const double **)&__p);
      double v32 = exp(v31 * -0.5) * v30;
      if (v8 == v10) {
        double v32 = v32 + *(double *)(a1 + 8) + 1.0e-10;
      }
      *(double *)&v7[8 * v29 + 8 * v51] = v32;
      if (__p)
      {
        unsigned __int8 v58 = (char *)__p;
        operator delete(__p);
      }
      if (v22) {
        operator delete(v22);
      }
      if (v53)
      {
        long long v54 = (char *)v53;
        operator delete(v53);
      }
      if (v15) {
        operator delete(v15);
      }
      ++v10;
      v9 += 8;
    }
    while (v10 != v52);
    ++v8;
    ++v52;
    v49 += 8;
    uint64_t v4 = v47;
  }
  while (v8 != v47);
  uint64_t v41 = v47;
LABEL_42:
  if (v41 != 1)
  {
    uint64_t v42 = 0;
    uint64_t v43 = 8 * v41;
    int64_t v44 = v7;
    do
    {
      if (v42)
      {
        uint64_t v45 = 0;
        unint64_t v46 = v44;
        do
        {
          *unint64_t v46 = *(void *)&v7[8 * v45++];
          unint64_t v46 = (void *)((char *)v46 + v43);
        }
        while (v42 != v45);
      }
      ++v42;
      ++v44;
      v7 += v43;
    }
    while (v42 != v41);
  }
}

void sub_19E2B6070(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E13A9BC(a1);
}

void sub_19E2B6098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v27 = a10;
    if (!v25)
    {
LABEL_3:
      uint64_t v28 = a18;
      if (!a18) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v27 = a10;
    if (!v25) {
      goto LABEL_3;
    }
  }
  operator delete(v25);
  uint64_t v28 = a18;
  if (!a18)
  {
LABEL_4:
    if (!v23) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  operator delete(v28);
  if (!v23)
  {
LABEL_5:
    *(void *)(v27 + 8) = v24;
    operator delete(v24);
    _Unwind_Resume(a1);
  }
LABEL_9:
  operator delete(v23);
  *(void *)(v27 + 8) = v24;
  operator delete(v24);
  _Unwind_Resume(a1);
}

void sub_19E2B6114(uint64_t a1)
{
  sub_19E29F880(a1 + 168, (uint64_t)v22);
  uint64_t v2 = *(unsigned int *)(a1 + 192);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 0;
    int v4 = *(_DWORD *)(a1 + 196);
    int v5 = v23;
    int v6 = 1;
    int v7 = -1;
    uint64_t v8 = v22[0];
    do
    {
      if (v4 <= v6) {
        int v9 = v6;
      }
      else {
        int v9 = v4;
      }
      int v10 = v3 + 1;
      if ((int)v3 + 1 >= v4) {
        goto LABEL_3;
      }
      unsigned int v11 = 0;
      int v12 = v9 + v7;
      uint64_t v13 = (int)v3 * (uint64_t)v5;
      if ((v9 + v7) < 4)
      {
        int v14 = v3 + 1;
      }
      else
      {
        int v14 = v3 + 1;
        if (v9 - (int)v3 + v6 - 2 >= v6)
        {
          int v15 = 0;
          unsigned int v11 = v12 & 0xFFFFFFFC;
          int v14 = v10 + (v12 & 0xFFFFFFFC);
          do
          {
            unint64_t v16 = &v8[v13 + v6 + v15];
            *unint64_t v16 = 0uLL;
            v16[1] = 0uLL;
            v15 += 4;
          }
          while ((v12 & 0xFFFFFFFC) != v15);
          if (v12 == v11) {
            goto LABEL_3;
          }
        }
      }
      unsigned int v17 = v9 - v11;
      do
      {
        v8[v13 + v14] = 0;
        int v14 = ++v11 + v10;
        --v17;
      }
      while (v6 != v17);
LABEL_3:
      ++v3;
      ++v6;
      --v7;
    }
    while (v3 != v2);
  }
  sub_19E2B65A0(a1, (uint64_t)v18);
  sub_19E29F6FC((uint64_t)v22, (uint64_t)v18, (uint64_t)&__p);
  if ((void **)(a1 + 232) != &__p) {
    sub_19E1E5B9C((void *)(a1 + 232), (char *)__p, v20, (v20 - (unsigned char *)__p) >> 3);
  }
  *(_DWORD *)(a1 + 256) = v21;
  if (__p)
  {
    uint64_t v20 = (char *)__p;
    operator delete(__p);
  }
  if (v18[0])
  {
    v18[1] = v18[0];
    operator delete(v18[0]);
  }
  sub_19E29FC64((uint64_t)v22, &__p);
  sub_19E2A58A8((uint64_t)&__p, a1 + 232);
  if (__p)
  {
    uint64_t v20 = (char *)__p;
    operator delete(__p);
  }
  if (v22[0])
  {
    v22[1] = v22[0];
    operator delete(v22[0]);
  }
}

void sub_19E2B62D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  if (a17) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2B6338(int32x2_t *a1)
{
  uint64_t v2 = a1[12].u32[0];
  sub_19E242424(v2, v2, (uint64_t)&__p);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = v29.i32[1] + 1;
    int v4 = __p;
    if (v2 == 1)
    {
      uint64_t v5 = 0;
LABEL_7:
      uint64_t v8 = v2 - v5;
      uint64_t v9 = v5 << 32;
      do
      {
        v4[(v9 >> 32) * v3] = 0x3FF0000000000000;
        v9 += 0x100000000;
        --v8;
      }
      while (v8);
      goto LABEL_9;
    }
    uint64_t v6 = 0;
    uint64_t v5 = v2 & 0xFFFFFFFE;
    uint64_t v7 = v5;
    do
    {
      v4[(v6 >> 32) * v3] = 0x3FF0000000000000;
      v4[((v6 >> 32) | 1) * v3] = 0x3FF0000000000000;
      v6 += 0x200000000;
      v7 -= 2;
    }
    while (v7);
    if (v5 != v2) {
      goto LABEL_7;
    }
  }
LABEL_9:
  if (&a1[25] != (int32x2_t *)&__p) {
    sub_19E1E5B9C(&a1[25], (char *)__p, v28, (v28 - (unsigned char *)__p) >> 3);
  }
  int v10 = (char *)__p;
  a1[28] = v29;
  if (v10)
  {
    uint64_t v28 = v10;
    operator delete(v10);
  }
  sub_19E29F880((uint64_t)&a1[21], (uint64_t)&__p);
  uint64_t v11 = a1[24].u32[0];
  if ((int)v11 >= 1)
  {
    uint64_t v12 = 0;
    int v13 = a1[24].i32[1];
    __int32 v14 = v29.i32[1];
    int v15 = 1;
    int v16 = -1;
    unsigned int v17 = __p;
    do
    {
      if (v13 <= v15) {
        int v18 = v15;
      }
      else {
        int v18 = v13;
      }
      int v19 = v12 + 1;
      if ((int)v12 + 1 >= v13) {
        goto LABEL_15;
      }
      unsigned int v20 = 0;
      int v21 = v18 + v16;
      uint64_t v22 = (int)v12 * (uint64_t)v14;
      if ((v18 + v16) < 4)
      {
        int v23 = v12 + 1;
      }
      else
      {
        int v23 = v12 + 1;
        if (v18 - (int)v12 + v15 - 2 >= v15)
        {
          int v24 = 0;
          unsigned int v20 = v21 & 0xFFFFFFFC;
          int v23 = v19 + (v21 & 0xFFFFFFFC);
          do
          {
            uint64_t v25 = &v17[v22 + v15 + v24];
            _OWORD *v25 = 0uLL;
            v25[1] = 0uLL;
            v24 += 4;
          }
          while ((v21 & 0xFFFFFFFC) != v24);
          if (v21 == v20) {
            goto LABEL_15;
          }
        }
      }
      unsigned int v26 = v18 - v20;
      do
      {
        v17[v22 + v23] = 0;
        int v23 = ++v20 + v19;
        --v26;
      }
      while (v15 != v26);
LABEL_15:
      ++v12;
      ++v15;
      --v16;
    }
    while (v12 != v11);
  }
  sub_19E2A59C0((uint64_t)&__p, a1 + 25);
  if (__p)
  {
    uint64_t v28 = (char *)__p;
    operator delete(__p);
  }
  sub_19E29FC64((uint64_t)&a1[21], &__p);
  sub_19E2A59C0((uint64_t)&__p, a1 + 25);
  if (__p)
  {
    uint64_t v28 = (char *)__p;
    operator delete(__p);
  }
}

void sub_19E2B657C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2B65A0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  signed int v4 = *(_DWORD *)(a1 + 288);
  uint64_t v5 = 8 * v4;
  if (v4)
  {
    if (v4 < 0) {
      sub_19E13D694();
    }
    uint64_t v6 = (char *)operator new(8 * v4);
    bzero(v6, 8 * v4);
    unint64_t v7 = 0;
    uint64_t v8 = &v6[v5];
    uint64_t v9 = *(void *)(a1 + 264);
    if (v4 < 4) {
      goto LABEL_48;
    }
    if ((unint64_t)&v6[-v9] < 0x20) {
      goto LABEL_48;
    }
    uint64_t v10 = 0;
    unint64_t v7 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v11 = v7;
    do
    {
      long long v12 = *(_OWORD *)(v9 + v10 + 16);
      int v13 = &v6[v10];
      *(_OWORD *)int v13 = *(_OWORD *)(v9 + v10);
      *((_OWORD *)v13 + 1) = v12;
      v10 += 32;
      v11 -= 4;
    }
    while (v11);
    if (v7 != v4)
    {
LABEL_48:
      do
      {
        *(void *)&v6[8 * v7] = *(void *)(v9 + 8 * v7);
        ++v7;
      }
      while (v4 != v7);
    }
    uint64_t v14 = *(int *)(a1 + 128);
    if (v14) {
      goto LABEL_10;
    }
LABEL_19:
    int v15 = 0;
    goto LABEL_20;
  }
  uint64_t v8 = 0;
  uint64_t v6 = 0;
  uint64_t v14 = *(int *)(a1 + 128);
  if (!v14) {
    goto LABEL_19;
  }
LABEL_10:
  if ((v14 & 0x80000000) != 0) {
    sub_19E13D694();
  }
  int v15 = (char *)operator new(8 * v14);
  bzero(v15, 8 * v14);
  unint64_t v16 = 0;
  uint64_t v17 = *(void *)(a1 + 104);
  if (v14 < 4) {
    goto LABEL_49;
  }
  if ((unint64_t)&v15[-v17] < 0x20) {
    goto LABEL_49;
  }
  uint64_t v18 = 0;
  unint64_t v16 = v14 & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v19 = v14 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    long long v20 = *(_OWORD *)(v17 + v18 + 16);
    int v21 = &v15[v18];
    *(_OWORD *)int v21 = *(_OWORD *)(v17 + v18);
    *((_OWORD *)v21 + 1) = v20;
    v18 += 32;
    v19 -= 4;
  }
  while (v19);
  if (v16 != v14)
  {
LABEL_49:
    do
    {
      *(void *)&v15[8 * v16] = *(void *)(v17 + 8 * v16);
      ++v16;
    }
    while (v14 != v16);
  }
LABEL_20:
  vDSP_vsubD((const double *)v15, 1, (const double *)v6, 1, (double *)v6, 1, v4);
  if (v8 != v6)
  {
    if (v8 - v6 < 0) {
      sub_19E13D694();
    }
    uint64_t v22 = (char *)operator new(v8 - v6);
    memcpy(v22, v6, v8 - v6);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)a2 = 0;
    if (!v4)
    {
      *(_DWORD *)(a2 + 24) = 0;
      operator delete(v22);
      if (!v15) {
        goto LABEL_35;
      }
LABEL_34:
      operator delete(v15);
      goto LABEL_35;
    }
LABEL_26:
    if (v4 < 0) {
      sub_19E13D694();
    }
    int v23 = (char *)operator new(8 * v4);
    *(void *)a2 = v23;
    *(void *)(a2 + 16) = &v23[8 * v4];
    bzero(v23, 8 * v4);
    *(void *)(a2 + 8) = &v23[v5];
    *(_DWORD *)(a2 + 24) = v4;
    if (v4 >= 4)
    {
      uint64_t v25 = 0;
      unint64_t v24 = v4 & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v26 = v24;
      do
      {
        long long v27 = *(_OWORD *)&v22[v25 + 16];
        uint64_t v28 = &v23[v25];
        *(_OWORD *)uint64_t v28 = *(_OWORD *)&v22[v25];
        *((_OWORD *)v28 + 1) = v27;
        v25 += 32;
        v26 -= 4;
      }
      while (v26);
      if (v24 == v4)
      {
LABEL_33:
        operator delete(v22);
        if (!v15) {
          goto LABEL_35;
        }
        goto LABEL_34;
      }
    }
    else
    {
      unint64_t v24 = 0;
    }
    do
    {
      *(void *)&v23[8 * v24] = *(void *)&v22[8 * v24];
      ++v24;
    }
    while (v4 != v24);
    goto LABEL_33;
  }
  uint64_t v22 = 0;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  if (v4) {
    goto LABEL_26;
  }
  *(_DWORD *)(a2 + 24) = 0;
  if (v15) {
    goto LABEL_34;
  }
LABEL_35:
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_19E2B68D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (v19)
  {
    operator delete(v19);
    if (!v18) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if (!v18)
  {
    goto LABEL_3;
  }
  operator delete(v18);
  _Unwind_Resume(exception_object);
}

void sub_19E2B693C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  if (a9) {
    operator delete(a9);
  }
  sub_19E13A9BC(a1);
}

void sub_19E2B6950(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13) {
    JUMPOUT(0x19E2B6960);
  }
  JUMPOUT(0x19E2B6964);
}

void sub_19E2B696C(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = a2;
  sub_19E2A099C((uint64_t)&v22, 2u);
  uint64_t v3 = operator new(0x10uLL);
  void *v3 = 0;
  v3[1] = 0;
  uint64_t v14 = v3;
  int v15 = v3 + 2;
  unint64_t v16 = v3 + 2;
  int v17 = 2;
  signed int v4 = operator new(0x10uLL);
  __p = v4;
  _OWORD *v4 = xmmword_19E351FE0;
  unint64_t v19 = v4 + 1;
  long long v20 = v4 + 1;
  int v21 = 2;
  *(_OWORD *)uint64_t v3 = xmmword_19E351FF0;
  sub_19E2A16E8((uint64_t)&v22, (uint64_t *)&v14);
  sub_19E2A1818((uint64_t)&v22, (uint64_t *)&__p);
  if (__p)
  {
    unint64_t v19 = __p;
    operator delete(__p);
  }
  if (v14)
  {
    int v15 = v14;
    operator delete(v14);
  }
  uint64_t v6 = *(unsigned char **)(a2 + 40);
  uint64_t v5 = *(unsigned char **)(a2 + 48);
  uint64_t v10 = 0;
  unint64_t v11 = 0;
  long long v12 = 0;
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      sub_19E13D694();
    }
    uint64_t v8 = (char *)operator new(v5 - v6);
    uint64_t v9 = &v8[8 * (v7 >> 3)];
    uint64_t v10 = v8;
    long long v12 = v9;
    memcpy(v8, v6, v7);
    unint64_t v11 = v9;
  }
  int v13 = *(_DWORD *)(a2 + 64);
  sub_19E2B6C2C((uint64_t)&v22, (uint64_t)&v23, (uint64_t)&v10);
}

void sub_19E2B6B9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (!__p)
  {
    sub_19E2A0A3C(&a25);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  sub_19E2A0A3C(&a25);
  _Unwind_Resume(a1);
}

void sub_19E2B6C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  sub_19E242654((uint64_t)va);
  sub_19E2A0A3C((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_19E2B6C2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a1 + 112)) {
    (**(void (***)(uint64_t, void))a1)(a1, *(unsigned int *)(a3 + 24));
  }
  operator new();
}

void sub_19E2B70C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  __cxa_free_exception(v15);
  if (a2 != 3)
  {
    if (a2 == 2)
    {
      unint64_t v19 = __cxa_begin_catch(a1);
      (*(void (**)(void *))(*(void *)v19 + 16))(v19);
      sub_19E29FAE8(v14, (uint64_t)&a13);
      if (a13)
      {
        a14 = (uint64_t)a13;
        operator delete(a13);
      }
      __cxa_end_catch();
LABEL_13:
      JUMPOUT(0x19E2B6EA8);
    }
    if (a2 != 1)
    {
      if (__p) {
        operator delete(__p);
      }
      _Unwind_Resume(a1);
    }
  }
  uint64_t v18 = __cxa_begin_catch(a1);
  (*(void (**)(void *))(*(void *)v18 + 16))(v18);
  __cxa_end_catch();
  goto LABEL_13;
}

double sub_19E2B7210(uint64_t **a1, uint64_t *a2, int **a3)
{
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v7 = (char *)v5 - (char *)*a1;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  long long v40 = 0;
  int v43 = 0;
  double v33 = 0.0;
  __p = 0;
  unint64_t v35 = 0;
  if (!(v7 >> 3))
  {
    uint64_t v8 = 0;
    long long v40 = 0;
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    int v43 = v7 >> 3;
    if (v6 == v5) {
      goto LABEL_13;
    }
    goto LABEL_6;
  }
  if (((v7 >> 3) & 0x80000000) != 0) {
    sub_19E13D694();
  }
  uint64_t v8 = operator new((uint64_t)(v7 << 29) >> 29);
  bzero(v8, (uint64_t)(v7 << 29) >> 29);
  long long v40 = v8;
  uint64_t v41 = (char *)v8 + ((uint64_t)(v7 << 29) >> 29);
  uint64_t v42 = (char *)v8 + 8 * (int)((uint64_t)v7 >> 3);
  int v43 = v7 >> 3;
  if (v6 != v5)
  {
LABEL_6:
    uint64_t v9 = 0;
    if (v7 - 8 < 0x18) {
      goto LABEL_11;
    }
    if ((unint64_t)((char *)v8 - (char *)v6) < 0x20) {
      goto LABEL_11;
    }
    unint64_t v10 = ((v7 - 8) >> 3) + 1;
    uint64_t v9 = v10 & 0x3FFFFFFFFFFFFFFCLL;
    unint64_t v11 = v8 + 1;
    uint64_t v12 = (long long *)(v6 + 2);
    uint64_t v13 = v10 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v14 = *v12;
      *(v11 - 1) = *(v12 - 1);
      *unint64_t v11 = v14;
      v11 += 2;
      v12 += 2;
      v13 -= 4;
    }
    while (v13);
    v6 += v10 & 0x3FFFFFFFFFFFFFFCLL;
    if (v10 != v9)
    {
LABEL_11:
      uint64_t v15 = (void *)v8 + v9;
      do
      {
        uint64_t v16 = *v6++;
        *v15++ = v16;
      }
      while (v6 != v5);
    }
  }
LABEL_13:
  if (*a2 == a2[1])
  {
    sub_19E2B7508(a3, (uint64_t)&v40, 0, (uint64_t)&v33);
    double v17 = v33;
    if (v36)
    {
      double v31 = __p;
      if (__p)
      {
        unint64_t v35 = __p;
        goto LABEL_31;
      }
    }
  }
  else
  {
    LOBYTE(v37[0]) = 0;
    char v39 = 0;
    sub_19E2B7508(a3, (uint64_t)&v40, 1, (uint64_t)&v33);
    double v17 = v33;
    sub_19E2A7CB8((uint64_t)v37, (uint64_t)&__p);
    if (v36 && __p)
    {
      unint64_t v35 = __p;
      operator delete(__p);
    }
    uint64_t v18 = v38;
    if (v38)
    {
      unint64_t v19 = 0;
      uint64_t v20 = v37[0];
      uint64_t v21 = *a2;
      if (v38 < 4) {
        goto LABEL_23;
      }
      if ((unint64_t)(v21 - v37[0]) < 0x20) {
        goto LABEL_23;
      }
      unint64_t v19 = v38 & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v22 = (long long *)(v37[0] + 16);
      uint64_t v23 = (_OWORD *)(v21 + 16);
      unint64_t v24 = v19;
      do
      {
        long long v25 = *v22;
        *(v23 - 1) = *(v22 - 1);
        _OWORD *v23 = v25;
        v22 += 2;
        v23 += 2;
        v24 -= 4;
      }
      while (v24);
      if (v19 != v18)
      {
LABEL_23:
        uint64_t v26 = v18 - v19;
        uint64_t v27 = 8 * v19;
        uint64_t v28 = (void *)(v21 + 8 * v19);
        int32x2_t v29 = (uint64_t *)(v20 + v27);
        do
        {
          uint64_t v30 = *v29++;
          *v28++ = v30;
          --v26;
        }
        while (v26);
      }
    }
    if (v39)
    {
      double v31 = (void *)v37[0];
      if (v37[0])
      {
        v37[1] = v37[0];
LABEL_31:
        operator delete(v31);
      }
    }
  }
  if (v40)
  {
    uint64_t v41 = (char *)v40;
    operator delete(v40);
  }
  return v17;
}

void sub_19E2B7490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,void *__p,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2B74EC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E13A9BC(a1);
}

void *sub_19E2B7508@<X0>(int **a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  sub_19E2B839C((uint64_t)v18, *a1);
  if (v19 != (void *)a2) {
    sub_19E1E5B9C(v19, *(char **)a2, *(char **)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  }
  int v20 = *(_DWORD *)(a2 + 24);
  unint64_t v7 = *(char **)a2;
  v18[3] = exp(*(double *)v7 + *(double *)v7);
  v18[4] = exp(*((long double *)v7 + 1));
  sub_19E2B58D0((uint64_t)v18, 0, a3);
  double v8 = sub_19E2B76E4((uint64_t)v18);
  double v9 = v8;
  if (a3)
  {
    sub_19E2B7914((uint64_t)v18, (uint64_t)&v15);
    *(void *)(a4 + 8) = 0;
    *(double *)a4 = v9;
    *(void *)(a4 + 16) = 0;
    *(void *)(a4 + 24) = 0;
    unint64_t v10 = v15;
    int64_t v11 = v16 - v15;
    if (v16 != v15)
    {
      if (v11 < 0) {
        sub_19E13D694();
      }
      uint64_t v12 = (char *)operator new(v16 - v15);
      *(void *)(a4 + 8) = v12;
      uint64_t v13 = &v12[8 * (v11 >> 3)];
      *(void *)(a4 + 24) = v13;
      memcpy(v12, v10, v11);
      *(void *)(a4 + 16) = v13;
    }
    *(_DWORD *)(a4 + 32) = v17;
    *(unsigned char *)(a4 + 40) = 1;
    if (v10)
    {
      uint64_t v16 = v10;
      operator delete(v10);
    }
  }
  else
  {
    *(double *)a4 = v8;
    *(unsigned char *)(a4 + 8) = 0;
    *(unsigned char *)(a4 + 40) = 0;
  }
  return sub_19E2A3E04(v18);
}

void sub_19E2B765C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_19E2A3E04((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19E2B7670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v16 = *v14;
  if (*v14)
  {
    *(void *)(v13 + 16) = v16;
    operator delete(v16);
    int v17 = __p;
    if (!__p)
    {
LABEL_3:
      sub_19E2A3E04(&a13);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    int v17 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  operator delete(v17);
  sub_19E2A3E04(&a13);
  _Unwind_Resume(a1);
}

void sub_19E2B76BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_19E2A3E04((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19E2B76D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_19E2A3E04((uint64_t *)va);
  _Unwind_Resume(a1);
}

double sub_19E2B76E4(uint64_t a1)
{
  sub_19E2B65A0(a1, (uint64_t)&__A);
  __C[0] = 0;
  vDSP_dotprD(__A, 1, *(const double **)(a1 + 232), 1, (double *)__C, (int)__N);
  uint64_t v2 = __C[0];
  if (__A)
  {
    int v17 = __A;
    operator delete(__A);
  }
  uint64_t v3 = *(int *)(a1 + 196);
  if ((int)v3 >= *(_DWORD *)(a1 + 192)) {
    int v4 = *(_DWORD *)(a1 + 192);
  }
  else {
    int v4 = *(_DWORD *)(a1 + 196);
  }
  __A = 0;
  int v17 = 0;
  uint64_t v18 = 0;
  if (v4)
  {
    if (v4 < 0) {
      sub_19E13D694();
    }
    uint64_t v5 = operator new(8 * v4);
    bzero(v5, 8 * v4);
    uint64_t v6 = 0;
    unint64_t v7 = *(void **)(a1 + 168);
    do
    {
      *((void *)v5 + v6++) = *v7;
      v7 += v3 + 1;
    }
    while (v4 != v6);
    __p = operator new(8 * v4);
    int64_t v11 = (char *)__p + 8 * v4;
    uint64_t v12 = v11;
    int v13 = v4;
    memcpy(__p, v5, 8 * v4);
  }
  else
  {
    uint64_t v5 = 0;
    int64_t v11 = 0;
    uint64_t v12 = 0;
    __p = 0;
    int v13 = 0;
  }
  sub_19E2A7AC4((uint64_t)&__p, (uint64_t)__C);
  __A = 0;
  vDSP_sveD((const double *)__C[0], 1, (double *)&__A, (int)v15);
  double v8 = __A;
  if (__C[0])
  {
    __C[1] = __C[0];
    operator delete(__C[0]);
  }
  if (__p)
  {
    int64_t v11 = (char *)__p;
    operator delete(__p);
  }
  if (v5) {
    operator delete(v5);
  }
  return (double)*(int *)(a1 + 96) * -0.918938533 - (*(double *)&v8 - *(double *)&v2 * -0.5);
}

void sub_19E2B788C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (__p)
  {
    operator delete(__p);
    int v20 = a9;
    if (!a9)
    {
LABEL_3:
      if (!v18) {
LABEL_8:
      }
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(v18);
      goto LABEL_8;
    }
  }
  else
  {
    int v20 = a9;
    if (!a9) {
      goto LABEL_3;
    }
  }
  operator delete(v20);
  if (!v18) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void sub_19E2B78F8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E13A9BC(a1);
}

void sub_19E2B7914(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v103 = 0;
  uint64_t v104 = 0;
  uint64_t v105 = 0;
  uint64_t v3 = *(unsigned char **)(a1 + 200);
  uint64_t v2 = *(unsigned char **)(a1 + 208);
  int64_t v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0) {
      sub_19E13D694();
    }
    uint64_t v5 = (double *)operator new(v2 - v3);
    uint64_t v6 = &v5[v4 >> 3];
    uint64_t v103 = v5;
    uint64_t v105 = v6;
    memcpy(v5, v3, v4);
    uint64_t v104 = v6;
  }
  unint64_t v106 = *(void *)(a1 + 224);
  uint64_t v88 = 0;
  size_t v89 = 0;
  unint64_t v87 = 0;
  double v8 = *(unsigned char **)(a1 + 232);
  unint64_t v7 = *(unsigned char **)(a1 + 240);
  int64_t v9 = v7 - v8;
  if (v7 != v8)
  {
    if (v9 < 0) {
      sub_19E13D694();
    }
    unint64_t v10 = (char *)operator new(v7 - v8);
    int64_t v11 = &v10[8 * (v9 >> 3)];
    unint64_t v87 = v10;
    size_t v89 = v11;
    memcpy(v10, v8, v9);
    uint64_t v88 = v11;
  }
  int v90 = *(_DWORD *)(a1 + 256);
  sub_19E29FAE8(a1 + 232, (uint64_t)v86);
  sub_19E2A7BA8((uint64_t)&v87, (uint64_t)v86, (uint64_t)&__p);
  unint64_t v95 = 0;
  long long v96 = 0;
  uint64_t v97 = 0;
  uint64_t v12 = __p;
  int64_t v13 = v92 - (unsigned char *)__p;
  if (v92 == __p)
  {
    vDSP_Length v15 = 0;
    long long v14 = 0;
  }
  else
  {
    if (v13 < 0) {
      sub_19E13D694();
    }
    long long v14 = (char *)operator new(v92 - (unsigned char *)__p);
    vDSP_Length v15 = &v14[8 * (v13 >> 3)];
    unint64_t v95 = v14;
    uint64_t v97 = v15;
    memcpy(v14, v12, v13);
    long long v96 = v15;
  }
  unint64_t v16 = v94;
  unint64_t v98 = v94;
  unint64_t v17 = HIDWORD(v94);
  vDSP_Length v18 = HIDWORD(v94) * (int)v94;
  vDSP_vsubD(v103, 1, (const double *)v14, 1, (double *)v14, 1, v18);
  uint64_t v99 = 0;
  size_t v100 = 0;
  uint64_t v101 = 0;
  int64_t v19 = v15 - v14;
  if (!v19)
  {
    int v20 = 0;
    unint64_t v102 = v16;
    int v108 = 0;
    uint64_t v109 = 0;
    double __B = 0.0;
    if (v18) {
      goto LABEL_14;
    }
LABEL_18:
    uint64_t v22 = 0;
    uint64_t v21 = 0;
    unint64_t v110 = __PAIR64__(v17, v16);
    goto LABEL_23;
  }
  if (v19 < 0) {
    sub_19E13D694();
  }
  int v20 = (char *)operator new(v19);
  uint64_t v99 = v20;
  uint64_t v101 = &v20[8 * (v19 >> 3)];
  memcpy(v20, v14, v19);
  size_t v100 = &v20[8 * (v19 >> 3)];
  unint64_t v102 = v16;
  int v108 = 0;
  uint64_t v109 = 0;
  double __B = 0.0;
  if (!v18) {
    goto LABEL_18;
  }
LABEL_14:
  if ((v18 & 0x80000000) != 0) {
    sub_19E13D694();
  }
  uint64_t v21 = (char *)operator new(8 * v18);
  *(void *)&double __B = v21;
  uint64_t v109 = &v21[8 * v18];
  bzero(v21, 8 * v18);
  uint64_t v22 = &v21[8 * v18];
  unint64_t v110 = __PAIR64__(v17, v16);
  if (v18 < 4)
  {
    for (unint64_t i = 0; i != v18; ++i)
LABEL_22:
      *(void *)&v21[8 * i] = *(void *)&v20[8 * i];
    goto LABEL_23;
  }
  uint64_t v24 = 0;
  unint64_t i = v18 & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v25 = v18 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    long long v26 = *(_OWORD *)&v20[v24 + 16];
    uint64_t v27 = &v21[v24];
    *(_OWORD *)uint64_t v27 = *(_OWORD *)&v20[v24];
    *((_OWORD *)v27 + 1) = v26;
    v24 += 32;
    v25 -= 4;
  }
  while (v25);
  if (i != v18) {
    goto LABEL_22;
  }
LABEL_23:
  sub_19E1E5B9C(&v103, v21, v22, (v22 - v21) >> 3);
  unint64_t v106 = v110;
  if (v21)
  {
    int v108 = v21;
    operator delete(v21);
  }
  if (v20)
  {
    size_t v100 = v20;
    operator delete(v20);
  }
  if (v14)
  {
    long long v96 = v14;
    operator delete(v14);
  }
  if (__p)
  {
    v92 = (char *)__p;
    operator delete(__p);
  }
  if (v86[0])
  {
    v86[1] = v86[0];
    operator delete(v86[0]);
  }
  if (v87)
  {
    uint64_t v88 = v87;
    operator delete(v87);
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v28 = operator new(0x10uLL);
  *(void *)(a2 + 8) = v28 + 2;
  *(void *)(a2 + 16) = v28 + 2;
  *(void *)a2 = v28;
  *(_DWORD *)(a2 + 24) = 2;
  void *v28 = 0;
  v28[1] = 0;
  uint64_t v82 = *(int *)(a1 + 96);
  if (v82)
  {
    unint64_t v29 = 0;
    uint64_t v83 = 0;
    do
    {
      uint64_t v30 = 0;
      unint64_t v31 = 0;
      do
      {
        uint64_t v32 = *(void *)(a1 + 72);
        uint64_t v33 = *(unsigned int *)(a1 + 100);
        double __B = 0.0;
        int v108 = 0;
        uint64_t v109 = 0;
        if (!v33)
        {
          BOOL v34 = 0;
          size_t v100 = 0;
          uint64_t v101 = 0;
          uint64_t v99 = 0;
          LODWORD(v102) = 0;
LABEL_68:
          uint64_t v51 = 0;
          v92 = 0;
          unint64_t v93 = 0;
          __p = 0;
          LODWORD(v94) = 0;
          goto LABEL_72;
        }
        if ((v33 & 0x80000000) != 0) {
          sub_19E13D694();
        }
        BOOL v34 = operator new(8 * (int)v33);
        bzero(v34, 8 * (int)v33);
        if (v33 < 8 || (unint64_t)v34 - v32 - 8 * v29 * (int)v33 < 0x20)
        {
          unint64_t v35 = 0;
LABEL_45:
          unint64_t v36 = (int)v33 - v35;
          uint64_t v37 = 8 * v35;
          signed int v38 = (void *)v34 + v35;
          char v39 = (uint64_t *)(v32 + v37 + v83 * (int)v33);
          do
          {
            uint64_t v40 = *v39++;
            *v38++ = v40;
            --v36;
          }
          while (v36);
          goto LABEL_47;
        }
        unint64_t v35 = (int)v33 & 0xFFFFFFFFFFFFFFFCLL;
        uint64_t v74 = (long long *)(v32 + v83 * (int)v33 + 16);
        uint64_t v75 = v34 + 1;
        unint64_t v76 = v35;
        do
        {
          long long v77 = *v74;
          *(v75 - 1) = *(v74 - 1);
          _OWORD *v75 = v77;
          v74 += 2;
          v75 += 2;
          v76 -= 4;
        }
        while (v76);
        if (v35 != (int)v33) {
          goto LABEL_45;
        }
LABEL_47:
        uint64_t v99 = 0;
        size_t v100 = 0;
        uint64_t v101 = 0;
        LODWORD(v102) = v33;
        uint64_t v41 = operator new(8 * (int)v33);
        bzero(v41, 8 * (int)v33);
        uint64_t v99 = v41;
        size_t v100 = (char *)v41 + 8 * (int)v33;
        uint64_t v101 = v100;
        if ((v33 - 6) >= 0x7FFFFFFB)
        {
          uint64_t v42 = 0;
LABEL_54:
          uint64_t v47 = v33 - v42;
          uint64_t v48 = v42 << 32;
          do
          {
            *(void *)((char *)v41 + (v48 >> 29)) = *(void *)((char *)v34 + (v48 >> 29));
            v48 += 0x100000000;
            --v47;
          }
          while (v47);
          goto LABEL_56;
        }
        uint64_t v42 = v33 & 0xFFFFFFFC;
        int v43 = v41 + 1;
        int64_t v44 = v34 + 1;
        uint64_t v45 = v42;
        do
        {
          long long v46 = *v44;
          *(v43 - 1) = *(v44 - 1);
          _OWORD *v43 = v46;
          v43 += 2;
          v44 += 2;
          v45 -= 4;
        }
        while (v45);
        if (v42 != v33) {
          goto LABEL_54;
        }
LABEL_56:
        uint64_t v49 = *(void *)(a1 + 72);
        uint64_t v50 = *(unsigned int *)(a1 + 100);
        double __B = 0.0;
        int v108 = 0;
        uint64_t v109 = 0;
        if (!v50) {
          goto LABEL_68;
        }
        if ((v50 & 0x80000000) != 0) {
          sub_19E13D694();
        }
        uint64_t v51 = operator new(8 * (int)v50);
        bzero(v51, 8 * (int)v50);
        if (v50 < 8 || (unint64_t)v51 - v49 - 8 * v31 * (int)v50 < 0x20)
        {
          unint64_t v52 = 0;
LABEL_61:
          unint64_t v53 = (int)v50 - v52;
          uint64_t v54 = 8 * v52;
          int v55 = (void *)v51 + v52;
          signed int v56 = (uint64_t *)(v49 + v54 + v30 * (int)v50);
          do
          {
            uint64_t v57 = *v56++;
            *v55++ = v57;
            --v53;
          }
          while (v53);
          goto LABEL_63;
        }
        unint64_t v52 = (int)v50 & 0xFFFFFFFFFFFFFFFCLL;
        long long v78 = (long long *)(v49 + v30 * (int)v50 + 16);
        int v79 = v51 + 1;
        unint64_t v80 = v52;
        do
        {
          long long v81 = *v78;
          *(v79 - 1) = *(v78 - 1);
          *int v79 = v81;
          v78 += 2;
          v79 += 2;
          v80 -= 4;
        }
        while (v80);
        if (v52 != (int)v50) {
          goto LABEL_61;
        }
LABEL_63:
        __p = 0;
        v92 = 0;
        unint64_t v93 = 0;
        LODWORD(v94) = v50;
        unsigned __int8 v58 = (char *)operator new(8 * (int)v50);
        bzero(v58, 8 * (int)v50);
        __p = v58;
        v92 = &v58[8 * (int)v50];
        unint64_t v93 = v92;
        if ((v50 - 6) >= 0x7FFFFFFB)
        {
          uint64_t v60 = 0;
LABEL_70:
          uint64_t v63 = v50 - v60;
          uint64_t v64 = v60 << 32;
          do
          {
            *(void *)&v58[v64 >> 29] = *(void *)((char *)v51 + (v64 >> 29));
            v64 += 0x100000000;
            --v63;
          }
          while (v63);
          goto LABEL_72;
        }
        unint64_t v59 = 0;
        uint64_t v60 = v50 & 0xFFFFFFFC;
        do
        {
          long long v61 = v51[v59 / 0x10 + 1];
          long long v62 = &v58[v59];
          *(_OWORD *)long long v62 = v51[v59 / 0x10];
          *((_OWORD *)v62 + 1) = v61;
          v59 += 32;
        }
        while (((8 * v50) & 0x7FFFFFFE0) != v59);
        if (v60 != v50) {
          goto LABEL_70;
        }
LABEL_72:
        uint64_t v65 = (long double *)operator new(0x10uLL);
        long double *v65 = 0.0;
        v65[1] = 0.0;
        double v66 = sub_19E2B2768(a1 + 8, (uint64_t)&v99, (const double **)&__p);
        double v67 = *(double *)(a1 + 24);
        long double v68 = v67 * exp(v66 * -0.5);
        long double *v65 = v68 + v68;
        v65[1] = v68 * v66;
        if (__p)
        {
          v92 = (char *)__p;
          operator delete(__p);
        }
        if (v51) {
          operator delete(v51);
        }
        if (v99)
        {
          size_t v100 = (char *)v99;
          operator delete(v99);
        }
        if (v34) {
          operator delete(v34);
        }
        uint64_t v69 = SHIDWORD(v106);
        unint64_t v70 = v103;
        uint64_t v71 = (double *)operator new(0x10uLL);
        *(_OWORD *)uint64_t v71 = *(_OWORD *)v65;
        if (v29 == v31)
        {
          vDSP_vsmulD(v71, 1, &v70[v29 + v29 * v69], v71, 1, 2uLL);
          uint64_t v72 = (double *)operator new(0x10uLL);
          *(_OWORD *)uint64_t v72 = *(_OWORD *)v71;
          double __B = 0.5;
          vDSP_vsmulD(v72, 1, &__B, v72, 1, 2uLL);
          uint64_t v73 = (double *)operator new(0x10uLL);
          *(_OWORD *)uint64_t v73 = *(_OWORD *)v72;
          vDSP_vaddD(*(const double **)a2, 1, v73, 1, *(double **)a2, 1, 2uLL);
          operator delete(v73);
        }
        else
        {
          vDSP_vsmulD(v71, 1, &v70[v31 + v29 * v69], v71, 1, 2uLL);
          uint64_t v72 = (double *)operator new(0x10uLL);
          *(_OWORD *)uint64_t v72 = *(_OWORD *)v71;
          vDSP_vaddD(*(const double **)a2, 1, v72, 1, *(double **)a2, 1, 2uLL);
        }
        operator delete(v72);
        operator delete(v71);
        operator delete(v65);
        ++v31;
        v30 += 8;
      }
      while (v31 <= v29);
      ++v29;
      v83 += 8;
    }
    while (v29 != v82);
  }
  if (v103)
  {
    uint64_t v104 = v103;
    operator delete(v103);
  }
}

void sub_19E2B81A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (v35) {
    operator delete(v35);
  }
  if (v34) {
    operator delete(v34);
  }
  if (v33) {
    operator delete(v33);
  }
  if (__p)
  {
    operator delete(__p);
    signed int v38 = a16;
    if (!a16)
    {
LABEL_9:
      char v39 = a20;
      if (!a20)
      {
LABEL_14:
        uint64_t v40 = *(void **)(v36 - 184);
        if (v40)
        {
          *(void *)(v36 - 176) = v40;
          operator delete(v40);
        }
        _Unwind_Resume(exception_object);
      }
LABEL_13:
      operator delete(v39);
      goto LABEL_14;
    }
  }
  else
  {
    signed int v38 = a16;
    if (!a16) {
      goto LABEL_9;
    }
  }
  operator delete(v38);
  char v39 = a20;
  if (!a20) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_19E2B8340(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  operator delete(v34);
  if (__p)
  {
    operator delete(__p);
    if (!v35)
    {
LABEL_3:
      uint64_t v36 = a32;
      if (!a32) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if (!v35)
  {
    goto LABEL_3;
  }
  operator delete(v35);
  uint64_t v36 = a32;
  if (!a32)
  {
LABEL_4:
    if (v33) {
      goto LABEL_12;
    }
    goto LABEL_13;
  }
LABEL_8:
  operator delete(v36);
  if (v33) {
LABEL_12:
  }
    JUMPOUT(0x19E2B82ECLL);
LABEL_13:
  JUMPOUT(0x19E2B82F0);
}

uint64_t sub_19E2B839C(uint64_t a1, int *a2)
{
  int v4 = *a2;
  *(unsigned char *)(a1 + 4) = *((unsigned char *)a2 + 4);
  *(_DWORD *)a1 = v4;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 2);
  long long v5 = *(_OWORD *)(a2 + 6);
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = v5;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  unint64_t v7 = (unsigned char *)*((void *)a2 + 5);
  uint64_t v6 = (unsigned char *)*((void *)a2 + 6);
  int64_t v8 = v6 - v7;
  if (v6 != v7)
  {
    if (v8 < 0) {
      sub_19E13D694();
    }
    int64_t v9 = (char *)operator new(v6 - v7);
    *(void *)(a1 + 40) = v9;
    *(void *)(a1 + 48) = v9;
    unint64_t v10 = &v9[8 * (v8 >> 3)];
    *(void *)(a1 + 56) = v10;
    memcpy(v9, v7, v8);
    *(void *)(a1 + 48) = v10;
  }
  int v11 = a2[16];
  *(void *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 64) = v11;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  int64_t v13 = (unsigned char *)*((void *)a2 + 9);
  uint64_t v12 = (unsigned char *)*((void *)a2 + 10);
  int64_t v14 = v12 - v13;
  if (v12 != v13)
  {
    if (v14 < 0) {
      sub_19E13D694();
    }
    vDSP_Length v15 = (char *)operator new(v12 - v13);
    *(void *)(a1 + 72) = v15;
    *(void *)(a1 + 80) = v15;
    unint64_t v16 = &v15[8 * (v14 >> 3)];
    *(void *)(a1 + 88) = v16;
    memcpy(v15, v13, v14);
    *(void *)(a1 + 80) = v16;
  }
  uint64_t v17 = *((void *)a2 + 12);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 96) = v17;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  int64_t v19 = (unsigned char *)*((void *)a2 + 13);
  vDSP_Length v18 = (unsigned char *)*((void *)a2 + 14);
  int64_t v20 = v18 - v19;
  if (v18 != v19)
  {
    if (v20 < 0) {
      sub_19E13D694();
    }
    uint64_t v21 = (char *)operator new(v18 - v19);
    *(void *)(a1 + 104) = v21;
    *(void *)(a1 + 112) = v21;
    uint64_t v22 = &v21[8 * (v20 >> 3)];
    *(void *)(a1 + 120) = v22;
    memcpy(v21, v19, v20);
    *(void *)(a1 + 112) = v22;
  }
  int v23 = a2[32];
  *(void *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 128) = v23;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  unint64_t v25 = (unsigned char *)*((void *)a2 + 17);
  uint64_t v24 = (unsigned char *)*((void *)a2 + 18);
  int64_t v26 = v24 - v25;
  if (v24 != v25)
  {
    if (v26 < 0) {
      sub_19E13D694();
    }
    uint64_t v27 = (char *)operator new(v24 - v25);
    *(void *)(a1 + 136) = v27;
    *(void *)(a1 + 144) = v27;
    uint64_t v28 = &v27[8 * (v26 >> 3)];
    *(void *)(a1 + 152) = v28;
    memcpy(v27, v25, v26);
    *(void *)(a1 + 144) = v28;
  }
  uint64_t v29 = *((void *)a2 + 20);
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 160) = v29;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  unint64_t v31 = (unsigned char *)*((void *)a2 + 21);
  uint64_t v30 = (unsigned char *)*((void *)a2 + 22);
  int64_t v32 = v30 - v31;
  if (v30 != v31)
  {
    if (v32 < 0) {
      sub_19E13D694();
    }
    uint64_t v33 = (char *)operator new(v30 - v31);
    *(void *)(a1 + 168) = v33;
    *(void *)(a1 + 176) = v33;
    BOOL v34 = &v33[8 * (v32 >> 3)];
    *(void *)(a1 + 184) = v34;
    memcpy(v33, v31, v32);
    *(void *)(a1 + 176) = v34;
  }
  uint64_t v35 = *((void *)a2 + 24);
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 192) = v35;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  uint64_t v37 = (unsigned char *)*((void *)a2 + 25);
  uint64_t v36 = (unsigned char *)*((void *)a2 + 26);
  int64_t v38 = v36 - v37;
  if (v36 != v37)
  {
    if (v38 < 0) {
      sub_19E13D694();
    }
    char v39 = (char *)operator new(v36 - v37);
    *(void *)(a1 + 200) = v39;
    *(void *)(a1 + 208) = v39;
    uint64_t v40 = &v39[8 * (v38 >> 3)];
    *(void *)(a1 + 216) = v40;
    memcpy(v39, v37, v38);
    *(void *)(a1 + 208) = v40;
  }
  uint64_t v41 = *((void *)a2 + 28);
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 224) = v41;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  int v43 = (unsigned char *)*((void *)a2 + 29);
  uint64_t v42 = (unsigned char *)*((void *)a2 + 30);
  int64_t v44 = v42 - v43;
  if (v42 != v43)
  {
    if (v44 < 0) {
      sub_19E13D694();
    }
    uint64_t v45 = (char *)operator new(v42 - v43);
    *(void *)(a1 + 232) = v45;
    *(void *)(a1 + 240) = v45;
    long long v46 = &v45[8 * (v44 >> 3)];
    *(void *)(a1 + 248) = v46;
    memcpy(v45, v43, v44);
    *(void *)(a1 + 240) = v46;
  }
  *(_DWORD *)(a1 + 256) = a2[64];
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 264) = 0;
  uint64_t v48 = (unsigned char *)*((void *)a2 + 33);
  uint64_t v47 = (unsigned char *)*((void *)a2 + 34);
  int64_t v49 = v47 - v48;
  if (v47 != v48)
  {
    if (v49 < 0) {
      sub_19E13D694();
    }
    uint64_t v50 = (char *)operator new(v47 - v48);
    *(void *)(a1 + 264) = v50;
    *(void *)(a1 + 272) = v50;
    uint64_t v51 = &v50[8 * (v49 >> 3)];
    *(void *)(a1 + 280) = v51;
    memcpy(v50, v48, v49);
    *(void *)(a1 + 272) = v51;
  }
  *(_DWORD *)(a1 + 288) = a2[72];
  return a1;
}

void sub_19E2B86D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10)
{
  vDSP_Length v18 = *v11;
  if (*v11)
  {
    v10[34] = v18;
    operator delete(v18);
    int64_t v19 = *v16;
    if (!*v16)
    {
LABEL_3:
      int64_t v20 = *v15;
      if (!*v15) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else
  {
    int64_t v19 = *v16;
    if (!*v16) {
      goto LABEL_3;
    }
  }
  v10[30] = v19;
  operator delete(v19);
  int64_t v20 = *v15;
  if (!*v15)
  {
LABEL_4:
    uint64_t v21 = *v14;
    if (!*v14) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  v10[26] = v20;
  operator delete(v20);
  uint64_t v21 = *v14;
  if (!*v14)
  {
LABEL_5:
    uint64_t v22 = *v13;
    if (!*v13) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  v10[22] = v21;
  operator delete(v21);
  uint64_t v22 = *v13;
  if (!*v13)
  {
LABEL_6:
    int v23 = *v12;
    if (!*v12) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  v10[18] = v22;
  operator delete(v22);
  int v23 = *v12;
  if (!*v12)
  {
LABEL_7:
    uint64_t v24 = *a9;
    if (!*a9) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_17:
  v10[14] = v23;
  operator delete(v23);
  uint64_t v24 = *a9;
  if (!*a9)
  {
LABEL_9:
    unint64_t v25 = *a10;
    if (*a10)
    {
      v10[6] = v25;
      operator delete(v25);
    }
    _Unwind_Resume(exception_object);
  }
LABEL_8:
  v10[10] = v24;
  operator delete(v24);
  goto LABEL_9;
}

void sub_19E2B87F0()
{
  if (!*v0) {
    JUMPOUT(0x19E2B871CLL);
  }
  JUMPOUT(0x19E2B8714);
}

void sub_19E2B8800()
{
  if (!*v0) {
    JUMPOUT(0x19E2B8730);
  }
  JUMPOUT(0x19E2B8728);
}

BOOL sub_19E2B8810(uint64_t a1, int *a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Early stopping already requested.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v3 = *(_DWORD *)(a1 + 12);
  if (v3 == -1) {
    return 0;
  }
  int v6 = *a2;
  uint64_t v5 = (uint64_t)(a2 + 2);
  if (v6 == 1 || *(double *)(a1 + 120) < *((double *)a2 + 13) - *(double *)(a1 + 16))
  {
    sub_19E29AB9C(a1 + 24, v5);
    *(void *)(a1 + 120) = *((void *)a2 + 13);
    *(_DWORD *)(a1 + 128) = 0;
    *(unsigned char *)(a1 + 8) = 0;
    return 0;
  }
  else
  {
    int v8 = *(_DWORD *)(a1 + 128);
    *(_DWORD *)(a1 + 128) = v8 + 1;
    BOOL v9 = v8 >= v3;
    *(unsigned char *)(a1 + 8) = v9;
    return v9;
  }
}

void sub_19E2B8904(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19E2B8918(uint64_t a1)
{
  v2[24] = *(void **)MEMORY[0x1E4F143B8];
  sub_19E2933F8((uint64_t)&v1, a1);
  sub_19E2933F8((uint64_t)v2, (uint64_t)&v1);
  sub_19E2B9D14((uint64_t)v2);
}

void sub_19E2B8D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  uint64_t v18 = *(void *)(v16 - 96);
  if (v18 == v16 - 120)
  {
    sub_19E32FB88();
  }
  else if (v18)
  {
    (*(void (**)(uint64_t))(*(void *)v18 + 40))(v18);
    sub_19E298384((uint64_t)va);
    _Unwind_Resume(a1);
  }
  sub_19E298384((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E2B8DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
}

void sub_19E2B8DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19E2B8E04(uint64_t a1)
{
  v2[24] = *(void **)MEMORY[0x1E4F143B8];
  sub_19E2933F8((uint64_t)&v1, a1);
  sub_19E2933F8((uint64_t)v2, (uint64_t)&v1);
  sub_19E2C31E8((uint64_t)v2);
}

void sub_19E2B9234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  uint64_t v18 = *(void *)(v16 - 96);
  if (v18 == v16 - 120)
  {
    sub_19E32FB88();
  }
  else if (v18)
  {
    (*(void (**)(uint64_t))(*(void *)v18 + 40))(v18);
    sub_19E298384((uint64_t)va);
    _Unwind_Resume(a1);
  }
  sub_19E298384((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E2B92BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
}

void sub_19E2B92D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19E2B92F0(uint64_t a1)
{
  v2[24] = *(void **)MEMORY[0x1E4F143B8];
  sub_19E2933F8((uint64_t)&v1, a1);
  sub_19E2933F8((uint64_t)v2, (uint64_t)&v1);
  sub_19E2CC354((uint64_t)v2);
}

void sub_19E2B9720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  uint64_t v18 = *(void *)(v16 - 96);
  if (v18 == v16 - 120)
  {
    sub_19E32FB88();
  }
  else if (v18)
  {
    (*(void (**)(uint64_t))(*(void *)v18 + 40))(v18);
    sub_19E298384((uint64_t)va);
    _Unwind_Resume(a1);
  }
  sub_19E298384((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E2B97A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
}

void sub_19E2B97C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char **sub_19E2B97DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5 = *(_DWORD *)(a1 + 56);
  int v6 = *(_DWORD *)(a1 + 60);
  uint64_t v7 = *(void *)(a1 + 64);
  char v30 = 0;
  uint64_t v29 = (char *)&unk_1EF0A86A8;
  int v31 = v5;
  v21[0] = 0;
  *(_DWORD *)uint64_t v22 = v6;
  *(void *)&v22[4] = v7;
  memset(v23, 0, sizeof(v23));
  uint64_t v24 = v25;
  v25[0] = 0;
  double v26 = 0.0;
  v27[0] = 0;
  v25[1] = 0;
  v25[2] = &v26;
  int v28 = 0;
  char v33 = 0;
  int64_t v32 = (uint64_t (**)(void **, void **))&unk_1EF0A86A8;
  int v34 = v5;
  char v36 = 0;
  uint64_t v35 = (uint64_t (**)(void **, void **))&unk_1EF0A8720;
  int v38 = HIDWORD(v7);
  uint64_t v37 = *(void *)v22;
  sub_19E2965D0(v39, (uint64_t)v23);
  v39[12] = (uint64_t *)v27[1];
  int v40 = v28;
  int64_t v20 = &unk_1EF0A8720;
  sub_19E2470C8((char **)v23);
  int v8 = *(_DWORD *)(a1 + 72);
  (*(void (**)(char **__return_ptr))(**(void **)(a1 + 120) + 16))(&v29);
  uint64_t v9 = *(void *)(a2 + 24);
  if (!v9) {
    goto LABEL_16;
  }
  double v10 = (*(double (**)(uint64_t, char **))(*(void *)v9 + 48))(v9, &v29);
  (*(void (**)(void, char **))(**(void **)(a1 + 120) + 24))(*(void *)(a1 + 120), &v29);
  std::chrono::steady_clock::now();
  LODWORD(v20) = 1;
  sub_19E291E68((uint64_t **)v21, (uint64_t *)&v29);
  double v26 = v10;
  sub_19E2A7DDC(*(void *)(a1 + 120), (uint64_t)v27);
  if (1 % v8) {
    goto LABEL_5;
  }
  uint64_t v11 = *(void *)(a2 + 56);
  if (!v11) {
LABEL_17:
  }
    sub_19E2A8074();
  if (((*(uint64_t (**)(uint64_t, void **))(*(void *)v11 + 48))(v11, &v20) & 1) == 0)
  {
LABEL_5:
    if (((*v32)((void **)&v32, &v20) & 1) == 0)
    {
      char v12 = (*v35)((void **)&v35, &v20);
      sub_19E2470C8(v27);
      sub_19E2470C8((char **)v21);
      sub_19E2470C8(&v29);
      if (v12) {
        goto LABEL_15;
      }
      int v13 = 2;
      while (1)
      {
        (*(void (**)(char **__return_ptr))(**(void **)(a1 + 120) + 16))(&v29);
        uint64_t v14 = *(void *)(a2 + 24);
        if (!v14) {
          break;
        }
        double v15 = (*(double (**)(uint64_t, char **))(*(void *)v14 + 48))(v14, &v29);
        (*(void (**)(void, char **))(**(void **)(a1 + 120) + 24))(*(void *)(a1 + 120), &v29);
        std::chrono::steady_clock::now();
        std::chrono::steady_clock::now();
        LODWORD(v20) = v13;
        sub_19E291E68((uint64_t **)v21, (uint64_t *)&v29);
        double v26 = v15;
        sub_19E2A7DDC(*(void *)(a1 + 120), (uint64_t)v27);
        if (!(v13 % v8))
        {
          uint64_t v16 = *(void *)(a2 + 56);
          if (!v16) {
            goto LABEL_17;
          }
          if ((*(uint64_t (**)(uint64_t, void **))(*(void *)v16 + 48))(v16, &v20)) {
            goto LABEL_6;
          }
        }
        if ((*v32)((void **)&v32, &v20)) {
          goto LABEL_6;
        }
        char v17 = (*v35)((void **)&v35, &v20);
        sub_19E2470C8(v27);
        sub_19E2470C8((char **)v21);
        sub_19E2470C8(&v29);
        ++v13;
        if (v17) {
          goto LABEL_15;
        }
      }
LABEL_16:
      sub_19E2A8074();
    }
  }
LABEL_6:
  sub_19E2470C8(v27);
  sub_19E2470C8((char **)v21);
  sub_19E2470C8(&v29);
LABEL_15:
  sub_19E2A7DDC(*(void *)(a1 + 120), a3);
  uint64_t v35 = (uint64_t (**)(void **, void **))&unk_1EF0A8720;
  return sub_19E2470C8((char **)v39);
}

void sub_19E2B9C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char *a39)
{
  sub_19E2470C8(v41);
  sub_19E2470C8(v40);
  sub_19E2470C8(&a39);
  *(void *)(v42 - 240) = a11;
  sub_19E2470C8(v39);
  _Unwind_Resume(a1);
}

void sub_19E2B9D14(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 48);
  if (v1 != 1)
  {
    if (!v1) {
      sub_19E29849C();
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_19E298774(exception, "Invalid optimizer in user config.");
    __cxa_throw(exception, (struct type_info *)off_1E599CD18, MEMORY[0x1E4FBA1E8]);
  }
  sub_19E2B9DC8();
}

void sub_19E2B9DB4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19E2B9DC8()
{
}

void sub_19E2B9F04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E2934EC((uint64_t)va);
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_19E2B9F20(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E2B9F34(uint64_t a1, uint64_t *a2)
{
  sub_19E2933F8((uint64_t)&v15, (uint64_t)a2);
  *(void *)a1 = &unk_1EF0A8318;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  sub_19E2933F8(a1 + 32, (uint64_t)&v15);
  if (v21)
  {
    int v4 = (char **)__p;
    if (__p)
    {
      int v5 = v20;
      int v6 = __p;
      if (v20 != __p)
      {
        do
          int v5 = sub_19E2470C8(v5 - 12);
        while (v5 != v4);
        int v6 = __p;
      }
      int64_t v20 = v4;
      operator delete(v6);
    }
  }
  uint64_t v7 = (void **)v17;
  if (v17)
  {
    int v8 = v18;
    uint64_t v9 = v17;
    if (v18 != v17)
    {
      do
      {
        if (*((char *)v8 - 17) < 0) {
          operator delete(*(v8 - 5));
        }
        v8 -= 5;
      }
      while (v8 != v7);
      uint64_t v9 = v17;
    }
    uint64_t v18 = v7;
    operator delete(v9);
  }
  double v10 = (void **)v15;
  if (v15)
  {
    uint64_t v11 = v16;
    char v12 = v15;
    if (v16 != v15)
    {
      do
      {
        if (*((char *)v11 - 25) < 0) {
          operator delete(*(v11 - 6));
        }
        v11 -= 6;
      }
      while (v11 != v10);
      char v12 = v15;
    }
    uint64_t v16 = v10;
    operator delete(v12);
  }
  *(void *)a1 = &unk_1EF0A85B8;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  int v13 = sub_19E244298(a2);
  int v14 = sub_19E244DC4((uint64_t)a2);
  *(_DWORD *)(a1 + 176) = v14 + v13;
  sub_19E2BAE08(a1 + 184, v14 + v13);
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 472) = 0;
  *(_DWORD *)(a1 + 488) = 0;
  *(void *)(a1 + 480) = 0;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 316) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 444) = 0u;
  *(void *)(a1 + 528) = 0;
  *(void *)(a1 + 520) = 0;
  *(_DWORD *)(a1 + 544) = 0;
  *(void *)(a1 + 536) = 0;
  *(_DWORD *)(a1 + 560) = -1;
  *(void *)(a1 + 504) = &unk_1EF0A7F20;
  *(void *)(a1 + 512) = a1 + 176;
  *(void *)(a1 + 568) = 0;
  sub_19E299010(a1 + 576);
  *(void *)(a1 + 10696) = 0;
  *(_OWORD *)(a1 + 10680) = 0u;
  if ((int)sub_19E244DC4(a1 + 32) >= 1) {
    sub_19E2BA6A8();
  }
  sub_19E2BA858();
}

void sub_19E2BA598(_Unwind_Exception *a1)
{
  sub_19E2462FC(v6);
  sub_19E298A78(v5);
  int v8 = (void **)(v1 + 65);
  uint64_t v9 = v1[71];
  v1[71] = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  void *v4 = &unk_1EF0A7D40;
  double v10 = *v8;
  if (*v8)
  {
    v1[66] = v10;
    operator delete(v10);
  }
  sub_19E2BEE60(v3);
  sub_19E29AC3C(v2);
  sub_19E298AC8(v1);
  _Unwind_Resume(a1);
}

void sub_19E2BA6A8()
{
}

void sub_19E2BA804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_19E245FE8(&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_19E2BA820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
  {
    sub_19E32FAD8((uint64_t)&a9, a9);
    operator delete(v9);
    _Unwind_Resume(a1);
  }
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_19E2BA858()
{
}

void sub_19E2BA9B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_19E245FE8(&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_19E2BA9D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
  {
    sub_19E32FAD8((uint64_t)&a9, a9);
    operator delete(v9);
    _Unwind_Resume(a1);
  }
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_19E2BAA0C(uint64_t a1)
{
  int v1 = (void *)sub_19E2BEF14(a1);

  operator delete(v1);
}

uint64_t **sub_19E2BAA34@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X8>)
{
  uint64_t v4 = a1 + 8;
  unint64_t v5 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3);
  uint64_t v6 = a1 + 32;
  int v7 = sub_19E244298((uint64_t *)(a1 + 32));
  signed int v8 = 5 * (sub_19E244DC4(v6) + v7);
  if (*(unsigned char *)(v4 + 136) && v8 <= (int)(-1431655765 * ((*(void *)(a1 + 128) - *(void *)(a1 + 120)) >> 5))) {
    signed int v8 = -1431655765 * ((*(void *)(a1 + 128) - *(void *)(a1 + 120)) >> 5);
  }
  if (v5 >= v8)
  {
    (*(void (**)(char **__return_ptr))(**(void **)(a1 + 568) + 16))(v11);
    sub_19E291E68(a2, (uint64_t *)v11);
    return (uint64_t **)sub_19E2470C8(v11);
  }
  else
  {
    uint64_t v9 = (uint64_t *)(*(void *)(a1 + 10680)
                   + 96 * (int)(-991146299 * ((*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3)));
    return sub_19E291E68(a2, v9);
  }
}

void sub_19E2BAB78(uint64_t a1, long long **a2, double a3)
{
  sub_19E29CE6C(a2, (uint64_t)&__p);
  double v6 = sub_19E2BD2B0(a1 + 176, (const double **)&__p);
  double v8 = sqrt(v7);
  double v24 = v8;
  double v25 = v6;
  double v9 = erfc((v6 - *(double *)(a1 + 552)) * -0.707106781 / v8) * 0.5;
  double v23 = v9;
  unint64_t v10 = *(void *)(a1 + 160);
  if (v10 >= *(void *)(a1 + 168))
  {
    uint64_t v15 = sub_19E2A4064((uint64_t *)(a1 + 152), (uint64_t)&__p, &v25, (uint64_t *)&v24, (uint64_t *)&v23);
  }
  else
  {
    *(void *)unint64_t v10 = 0;
    *(void *)(v10 + 8) = 0;
    *(void *)(v10 + 16) = 0;
    uint64_t v11 = __p;
    int64_t v12 = v27 - (unsigned char *)__p;
    if (v27 != __p)
    {
      if (v12 < 0) {
        sub_19E13D694();
      }
      int v13 = (char *)operator new(v27 - (unsigned char *)__p);
      *(void *)unint64_t v10 = v13;
      *(void *)(v10 + 8) = v13;
      int v14 = &v13[8 * (v12 >> 3)];
      *(void *)(v10 + 16) = v14;
      memcpy(v13, v11, v12);
      *(void *)(v10 + 8) = v14;
    }
    *(_DWORD *)(v10 + 24) = v28;
    *(double *)(v10 + 32) = v6;
    *(double *)(v10 + 40) = v8;
    *(double *)(v10 + 48) = v9;
    uint64_t v15 = v10 + 56;
    *(void *)(a1 + 160) = v10 + 56;
  }
  *(void *)(a1 + 160) = v15;
  uint64_t v16 = *(int *)(a1 + 488);
  uint64_t v17 = v16 + 1;
  *(_DWORD *)(a1 + 488) = v16 + 1;
  uint64_t v18 = *(void *)(a1 + 464);
  unint64_t v19 = (*(void *)(a1 + 472) - v18) >> 3;
  if (v16 + 1 <= v19)
  {
    if (v16 + 1 < v19) {
      *(void *)(a1 + 472) = v18 + 8 * v16 + 8;
    }
  }
  else
  {
    sub_19E2482DC(a1 + 464, v16 + 1 - v19);
    uint64_t v17 = *(int *)(a1 + 488);
    uint64_t v18 = *(void *)(a1 + 464);
  }
  *(double *)(v18 + 8 * v17 - 8) = a3;
  sub_19E2BF0D0(a1 + 176, (uint64_t)&__p);
  sub_19E2C02A8(a1 + 496, a1 + 176);
  sub_19E2BB060(a1 + 504);
  sub_19E291E68(v29, (uint64_t *)a2);
  double v30 = a3;
  int64_t v20 = *(uint64_t ***)(a1 + 16);
  if ((unint64_t)v20 >= *(void *)(a1 + 24))
  {
    uint64_t v22 = sub_19E299F04((uint64_t ***)(a1 + 8), (uint64_t *)v29);
  }
  else
  {
    char v21 = sub_19E291E68(v20, (uint64_t *)v29);
    *((double *)v21 + 12) = v30;
    uint64_t v22 = v21 + 13;
  }
  *(void *)(a1 + 16) = v22;
  sub_19E2470C8((char **)v29);
  if (__p)
  {
    uint64_t v27 = __p;
    operator delete(__p);
  }
}

void sub_19E2BAD78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, char *a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *sub_19E2BADC4(void *a1)
{
  uint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  int v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_19E2BAE08(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + 8) = xmmword_19E351FD0;
  *(void *)(a1 + 24) = 0;
  uint64_t v4 = a2 << 32;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  size_t v5 = 8 * (int)a2;
  if (a2)
  {
    if ((a2 & 0x80000000) != 0) {
      sub_19E13D694();
    }
    double v6 = (char *)operator new(8 * (int)a2);
    *(void *)(a1 + 24) = v6;
    *(void *)(a1 + 40) = &v6[8 * (int)a2];
    bzero(v6, v5);
    *(void *)(a1 + 32) = &v6[v5];
    *(_DWORD *)(a1 + 48) = a2;
    if (v4) {
      goto LABEL_4;
    }
  }
  else
  {
    double v6 = 0;
    *(_DWORD *)(a1 + 48) = 0;
    if (v4) {
LABEL_4:
    }
      memset_pattern16(v6, &unk_19E351820, v5);
  }
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(void *)(a1 + 72) = 0;
  int v7 = a2 + 1;
  if (a2 == -1)
  {
    double v8 = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 72) = 0;
    *(_DWORD *)(a1 + 80) = v7;
    MEMORY[0] = 0;
    if (!a2) {
      return a1;
    }
    goto LABEL_12;
  }
  if (v7 < 0) {
    sub_19E13D694();
  }
  double v8 = operator new(8 * v7);
  bzero(v8, 8 * v7);
  *(void *)(a1 + 56) = v8;
  *(void *)(a1 + 64) = &v8[v7];
  *(void *)(a1 + 72) = &v8[v7];
  *(_DWORD *)(a1 + 80) = v7;
  *double v8 = 0;
  if (a2)
  {
LABEL_12:
    unint64_t v9 = 0;
    if (a2 == 1) {
      goto LABEL_16;
    }
    unint64_t v9 = a2 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v10 = v8 + 1;
    unint64_t v11 = a2 & 0xFFFFFFFFFFFFFFFELL;
    int64_t v12 = (long long *)v6;
    do
    {
      long long v13 = *v12++;
      long double v20 = log(*((long double *)&v13 + 1));
      *(double *)&long long v14 = log(*(long double *)&v13);
      *((long double *)&v14 + 1) = v20;
      *v10++ = v14;
      v11 -= 2;
    }
    while (v11);
    if (v9 != a2)
    {
LABEL_16:
      uint64_t v15 = (long double *)&v8[v9 + 1];
      uint64_t v16 = (double *)&v6[8 * v9];
      uint64_t v17 = a2 - v9;
      do
      {
        long double v18 = *v16++;
        *v15++ = log(v18);
        --v17;
      }
      while (v17);
    }
  }
  return a1;
}

void sub_19E2BAFE8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E13A9BC(a1);
}

void sub_19E2BB004(void *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  sub_19E13A9BC(a1);
}

long double sub_19E2BB020(uint64_t a1, double a2, double a3)
{
  return erfc((a2 - *(double *)(a1 + 48)) * -0.707106781 / a3) * 0.5;
}

double sub_19E2BB058()
{
  return 0.0;
}

void sub_19E2BB060(uint64_t a1)
{
  uint64_t v104 = 0;
  uint64_t v105 = 0;
  unint64_t v106 = 0;
  uint64_t v1 = *(void **)(a1 + 8);
  uint64_t v101 = 0;
  unint64_t v102 = 0;
  size_t v100 = 0;
  int v3 = (unsigned char *)v1[12];
  uint64_t v2 = (unsigned char *)v1[13];
  int64_t v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0) {
      sub_19E13D694();
    }
    size_t v5 = (char *)operator new(v2 - v3);
    double v6 = &v5[8 * (v4 >> 3)];
    size_t v100 = v5;
    unint64_t v102 = v6;
    memcpy(v5, v3, v4);
    uint64_t v101 = v6;
  }
  uint64_t v7 = v1[15];
  uint64_t v103 = v7;
  if (!v7)
  {
    int v55 = 0;
    unsigned __int8 v58 = 0;
    *(_DWORD *)(a1 + 56) = 0;
    long long v62 = v100;
    signed int v63 = HIDWORD(v103);
    long long v107 = 0;
    int v108 = 0;
    uint64_t v109 = 0;
    if (HIDWORD(v103)) {
      goto LABEL_65;
    }
    goto LABEL_81;
  }
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  unint64_t v10 = 0;
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v90 = (int)v7;
  uint64_t v91 = v7;
  size_t v13 = 8 * (v7 >> 32);
  uint64_t v88 = v7 >> 32;
  size_t v89 = v13;
  unint64_t v87 = (v7 >> 32) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v93 = HIDWORD(v7);
  uint64_t v94 = 16;
  do
  {
    uint64_t v14 = *(void *)(a1 + 8);
    uint64_t v15 = v100;
    __p = 0;
    *(void *)long long v96 = 0;
    uint64_t v97 = 0;
    if (!v93)
    {
      uint64_t v16 = 0;
      int v108 = 0;
      uint64_t v109 = 0;
      long long v107 = 0;
      unsigned int v110 = 0;
      goto LABEL_27;
    }
    if (v7 < 0) {
      sub_19E13D694();
    }
    uint64_t v16 = operator new(v13);
    bzero(v16, v13);
    if ((unint64_t)v7 >> 33 < 3)
    {
      unint64_t v17 = 0;
      unint64_t v18 = v88;
      goto LABEL_17;
    }
    unint64_t v18 = v88;
    if ((unint64_t)((char *)v16 - &v100[v13 * v12]) < 0x20)
    {
      unint64_t v17 = 0;
LABEL_17:
      unint64_t v23 = v18 - v17;
      uint64_t v24 = 8 * v17;
      double v25 = (void *)v16 + v17;
      double v26 = (uint64_t *)&v15[v8 + v24];
      do
      {
        uint64_t v27 = *v26++;
        *v25++ = v27;
        --v23;
      }
      while (v23);
      goto LABEL_19;
    }
    unint64_t v19 = (long long *)&v100[v94];
    long double v20 = v16 + 1;
    unint64_t v21 = v87;
    do
    {
      long long v22 = *v19;
      *(v20 - 1) = *(v19 - 1);
      *long double v20 = v22;
      v19 += 2;
      v20 += 2;
      v21 -= 4;
    }
    while (v21);
    unint64_t v17 = v87;
    if (v88 != v87) {
      goto LABEL_17;
    }
LABEL_19:
    long long v107 = 0;
    int v108 = 0;
    uint64_t v109 = 0;
    unsigned int v110 = v93;
    sub_19E2482DC((uint64_t)&v107, v18);
    uint64_t v28 = v110;
    if ((int)v110 >= 1)
    {
      uint64_t v29 = 0;
      double v30 = v107;
      if (v110 < 4) {
        goto LABEL_25;
      }
      if ((unint64_t)((char *)v107 - (char *)v16) < 0x20) {
        goto LABEL_25;
      }
      unint64_t v31 = 0;
      uint64_t v29 = v110 & 0xFFFFFFFC;
      uint64_t v32 = (8 * v110) & 0x7FFFFFFE0;
      do
      {
        long long v33 = v16[v31 / 0x10 + 1];
        int v34 = (double *)&v30[v31 / 8];
        *(_OWORD *)int v34 = v16[v31 / 0x10];
        *((_OWORD *)v34 + 1) = v33;
        v31 += 32;
      }
      while (v32 != v31);
      if (v29 != v28)
      {
LABEL_25:
        uint64_t v35 = v28 - v29;
        uint64_t v36 = v29 << 32;
        do
        {
          *(const double *)((char *)v30 + (v36 >> 29)) = *(const double *)((char *)v16 + (v36 >> 29));
          v36 += 0x100000000;
          --v35;
        }
        while (v35);
      }
    }
LABEL_27:
    double v37 = sub_19E2BB834(v14, (const double **)&v107);
    double v38 = v37;
    if (v11 < v10)
    {
      *v11++ = v37;
      uint64_t v7 = v91;
      size_t v13 = v89;
      uint64_t v105 = (uint64_t)v11;
      char v39 = v107;
      if (!v107) {
        goto LABEL_30;
      }
LABEL_29:
      int v108 = v39;
      operator delete(v39);
      goto LABEL_30;
    }
    uint64_t v40 = v11 - v9;
    unint64_t v41 = v40 + 1;
    if ((unint64_t)(v40 + 1) >> 61) {
      sub_19E13D694();
    }
    if (((char *)v10 - (char *)v9) >> 2 > v41) {
      unint64_t v41 = ((char *)v10 - (char *)v9) >> 2;
    }
    if ((unint64_t)((char *)v10 - (char *)v9) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v42 = v41;
    }
    if (v42)
    {
      if (v42 >> 61) {
        sub_19E13C418();
      }
      int v43 = operator new(8 * v42);
      int64_t v44 = (double *)&v43[8 * v40];
      double *v44 = v38;
      uint64_t v45 = (uint64_t)(v44 + 1);
      if (v11 != v9)
      {
LABEL_41:
        unint64_t v46 = (char *)(v11 - 1) - (char *)v9;
        if (v46 < 0x168
          || &v43[(char *)v11 - (char *)v9 - 8 - (v46 & 0xFFFFFFFFFFFFFFF8)] > &v43[(char *)v11 - (char *)v9 - 8]
          || (double *)((char *)v11 - (v46 & 0xFFFFFFFFFFFFFFF8) - 8) > v11 - 1
          || (unint64_t)((char *)v9 - v43) < 0x20)
        {
          uint64_t v47 = v11;
          uint64_t v7 = v91;
          size_t v13 = v89;
        }
        else
        {
          uint64_t v49 = (v46 >> 3) + 1;
          uint64_t v50 = 8 * (v49 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v47 = &v11[v50 / 0xFFFFFFFFFFFFFFF8];
          int64_t v44 = (double *)((char *)v44 - v50);
          uint64_t v51 = &v43[8 * v40 - 16];
          unint64_t v52 = v11 - 2;
          uint64_t v53 = v49 & 0x3FFFFFFFFFFFFFFCLL;
          uint64_t v7 = v91;
          do
          {
            long long v54 = *(_OWORD *)v52;
            *(v51 - 1) = *((_OWORD *)v52 - 1);
            *uint64_t v51 = v54;
            v51 -= 2;
            v52 -= 4;
            v53 -= 4;
          }
          while (v53);
          size_t v13 = v89;
          if (v49 == (v49 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_44:
            unint64_t v10 = (double *)&v43[8 * v42];
            uint64_t v104 = v44;
            uint64_t v105 = v45;
            unint64_t v106 = v10;
            if (!v9) {
              goto LABEL_46;
            }
LABEL_45:
            operator delete(v9);
            goto LABEL_46;
          }
        }
        do
        {
          uint64_t v48 = *((void *)v47-- - 1);
          *((void *)v44-- - 1) = v48;
        }
        while (v47 != v9);
        goto LABEL_44;
      }
    }
    else
    {
      int v43 = 0;
      int64_t v44 = (double *)(8 * v40);
      *(double *)(8 * v40) = v37;
      uint64_t v45 = 8 * v40 + 8;
      if (v11 != v9) {
        goto LABEL_41;
      }
    }
    uint64_t v7 = v91;
    size_t v13 = v89;
    unint64_t v10 = (double *)&v43[8 * v42];
    uint64_t v104 = v44;
    uint64_t v105 = v45;
    unint64_t v106 = v10;
    if (v9) {
      goto LABEL_45;
    }
LABEL_46:
    unint64_t v9 = v44;
    unint64_t v11 = (double *)v45;
    uint64_t v105 = v45;
    char v39 = v107;
    if (v107) {
      goto LABEL_29;
    }
LABEL_30:
    if (v16) {
      operator delete(v16);
    }
    ++v12;
    v94 += v13;
    v8 += v13;
  }
  while (v12 != v90);
  int v55 = v104;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)(a1 + 8) + 120);
  if (v55 == v11)
  {
    unsigned __int8 v58 = v55;
    long long v62 = v100;
    signed int v63 = HIDWORD(v103);
    long long v107 = 0;
    int v108 = 0;
    uint64_t v109 = 0;
    if (HIDWORD(v103)) {
      goto LABEL_65;
    }
    goto LABEL_81;
  }
  signed int v56 = v55 + 1;
  if (v55 + 1 == v11)
  {
    unsigned __int8 v58 = v55;
    long long v62 = v100;
    signed int v63 = HIDWORD(v103);
    long long v107 = 0;
    int v108 = 0;
    uint64_t v109 = 0;
    if (HIDWORD(v103)) {
      goto LABEL_65;
    }
    goto LABEL_81;
  }
  double v57 = *v55;
  unsigned __int8 v58 = v55;
  unint64_t v59 = v55 + 1;
  do
  {
    double v60 = *v59++;
    BOOL v61 = v57 < v60;
    double v57 = fmax(v57, v60);
    if (v61) {
      unsigned __int8 v58 = v56;
    }
    signed int v56 = v59;
  }
  while (v59 != v11);
  long long v62 = v100;
  signed int v63 = HIDWORD(v103);
  long long v107 = 0;
  int v108 = 0;
  uint64_t v109 = 0;
  if (!HIDWORD(v103))
  {
LABEL_81:
    uint64_t v74 = 0;
    LODWORD(v73) = 0;
    uint64_t v64 = 0;
    *(void *)long long v96 = 0;
    uint64_t v97 = 0;
    __p = 0;
    unsigned int v98 = 0;
    goto LABEL_82;
  }
LABEL_65:
  if (v63 < 0) {
    sub_19E13D694();
  }
  uint64_t v64 = operator new(8 * v63);
  uint64_t v65 = (v58 - v55) * v63;
  bzero(v64, 8 * v63);
  if (v63 < 0xA || (double v66 = &v62[8 * v65], (unint64_t)((char *)v64 - v66) < 0x20))
  {
    unint64_t v67 = 0;
    goto LABEL_69;
  }
  unint64_t v67 = v63 & 0xFFFFFFFFFFFFFFFCLL;
  uint64_t v83 = (long long *)(v66 + 16);
  v84 = v64 + 1;
  unint64_t v85 = v67;
  do
  {
    long long v86 = *v83;
    *(v84 - 1) = *(v83 - 1);
    _OWORD *v84 = v86;
    v83 += 2;
    v84 += 2;
    v85 -= 4;
  }
  while (v85);
  if (v67 != v63)
  {
LABEL_69:
    unint64_t v68 = v63 - v67;
    uint64_t v69 = 8 * v67;
    unint64_t v70 = (void *)v64 + v67;
    uint64_t v71 = &v62[8 * v65 + v69];
    do
    {
      uint64_t v72 = *(void *)v71;
      v71 += 8;
      *v70++ = v72;
      --v68;
    }
    while (v68);
  }
  __p = 0;
  *(void *)long long v96 = 0;
  uint64_t v97 = 0;
  unsigned int v98 = v63;
  sub_19E2482DC((uint64_t)&__p, v63);
  uint64_t v73 = v98;
  uint64_t v74 = (char *)__p;
  if ((int)v98 >= 1)
  {
    uint64_t v75 = 0;
    if (v98 < 4) {
      goto LABEL_77;
    }
    if ((unint64_t)((unsigned char *)__p - (unsigned char *)v64) < 0x20) {
      goto LABEL_77;
    }
    unint64_t v76 = 0;
    uint64_t v75 = v98 & 0xFFFFFFFC;
    uint64_t v77 = (8 * v98) & 0x7FFFFFFE0;
    do
    {
      long long v78 = v64[v76 / 0x10 + 1];
      int v79 = &v74[v76];
      *(_OWORD *)int v79 = v64[v76 / 0x10];
      *((_OWORD *)v79 + 1) = v78;
      v76 += 32;
    }
    while (v77 != v76);
    if (v75 != v73)
    {
LABEL_77:
      uint64_t v80 = v73 - v75;
      uint64_t v81 = v75 << 32;
      do
      {
        *(void *)&v74[v81 >> 29] = *(void *)((char *)v64 + (v81 >> 29));
        v81 += 0x100000000;
        --v80;
      }
      while (v80);
    }
  }
LABEL_82:
  uint64_t v82 = *(void *)v58;
  uint64_t v99 = *(void *)v58;
  if ((void **)(a1 + 16) != &__p)
  {
    sub_19E1E5B9C((void *)(a1 + 16), v74, *(char **)v96, (uint64_t)(*(void *)v96 - (void)v74) >> 3);
    LODWORD(v73) = v98;
    uint64_t v82 = v99;
    uint64_t v74 = (char *)__p;
  }
  *(_DWORD *)(a1 + 40) = v73;
  *(void *)(a1 + 48) = v82;
  if (v74)
  {
    *(void *)long long v96 = v74;
    operator delete(v74);
  }
  if (v64) {
    operator delete(v64);
  }
  if (v62) {
    operator delete(v62);
  }
  if (v55)
  {
    uint64_t v105 = (uint64_t)v55;
    operator delete(v55);
  }
}

void sub_19E2BB778(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  if (__p) {
    operator delete(__p);
  }
  if (v28) {
    operator delete(v28);
  }
  if (v29) {
    operator delete(v29);
  }
  if (a27) {
    operator delete(a27);
  }
  _Unwind_Resume(exception_object);
}

double sub_19E2BB834(uint64_t a1, const double **a2)
{
  if (*(_DWORD *)(a1 + 120))
  {
    sub_19E2BB918(a1, a2, (uint64_t)__A);
    double __C = 0.0;
    vDSP_dotprD(__A[0], 1, *(const double **)(a1 + 256), 1, &__C, (int)__N);
    double v3 = __C;
    double __C = 0.0;
    vDSP_meanvD(*(const double **)(a1 + 288), 1, &__C, *(int *)(a1 + 312));
    double v4 = __C;
    if (__A[0])
    {
      __A[1] = __A[0];
      operator delete(__A[0]);
    }
    return v4 + v3;
  }
  else
  {
    __A[0] = 0;
    vDSP_meanvD(*(const double **)(a1 + 288), 1, (double *)__A, *(int *)(a1 + 312));
    return *(double *)__A;
  }
}

void sub_19E2BB8FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2BB918(uint64_t a1@<X0>, const double **a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *(_DWORD *)(a1 + 120);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 24) = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  if (v3)
  {
    if (v3 < 0) {
      sub_19E13D694();
    }
    uint64_t v5 = v3;
    double v6 = (char *)operator new(8 * v3);
    bzero(v6, 8 * v3);
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    *(void *)a3 = v6;
    *(void *)(a3 + 8) = &v6[8 * v3];
    *(void *)(a3 + 16) = &v6[8 * v3];
    *(_DWORD *)(a3 + 24) = v3;
    double v25 = v6;
    while (1)
    {
      uint64_t v9 = *(void *)(a1 + 96);
      signed int v10 = *(_DWORD *)(a1 + 124);
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      if (!v10)
      {
        unint64_t v11 = 0;
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        __p = 0;
        signed int v30 = 0;
        goto LABEL_14;
      }
      if (v10 < 0) {
        sub_19E13D694();
      }
      unint64_t v11 = operator new(8 * v10);
      bzero(v11, 8 * v10);
      if (v10 >= 8 && (unint64_t)v11 - v9 - 8 * v8 * v10 >= 0x20)
      {
        unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL;
        long double v20 = (long long *)(v9 + v7 * v10 + 16);
        unint64_t v21 = v11 + 1;
        unint64_t v22 = v12;
        do
        {
          long long v23 = *v20;
          *(v21 - 1) = *(v20 - 1);
          *unint64_t v21 = v23;
          v20 += 2;
          v21 += 2;
          v22 -= 4;
        }
        while (v22);
        if (v12 == v10) {
          goto LABEL_12;
        }
      }
      else
      {
        unint64_t v12 = 0;
      }
      unint64_t v13 = v10 - v12;
      uint64_t v14 = 8 * v12;
      uint64_t v15 = (void *)v11 + v12;
      uint64_t v16 = (uint64_t *)(v9 + v14 + v7 * v10);
      do
      {
        uint64_t v17 = *v16++;
        *v15++ = v17;
        --v13;
      }
      while (v13);
LABEL_12:
      __p = 0;
      uint64_t v28 = 0;
      signed int v30 = 0;
      uint64_t v29 = 0;
      __p = operator new(8 * v10);
      uint64_t v28 = (char *)__p + 8 * v10;
      uint64_t v29 = v28;
      signed int v30 = v10;
      memcpy(__p, v11, 8 * v10);
      double v6 = v25;
LABEL_14:
      double v18 = *(double *)(a1 + 24);
      double v19 = sub_19E2BBBC4(a1 + 8, (uint64_t)&__p, a2);
      *(long double *)&v6[8 * v8] = exp(v19 * -0.5) * v18;
      if (__p)
      {
        uint64_t v28 = (char *)__p;
        operator delete(__p);
      }
      if (v11) {
        operator delete(v11);
      }
      ++v8;
      v7 += 8;
      if (v8 == v5) {
        return;
      }
    }
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 24) = 0;
}

void sub_19E2BBB50(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E13A9BC(a1);
}

void sub_19E2BBB78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
  {
    operator delete(__p);
    if (!v14)
    {
LABEL_3:
      *(void *)(a10 + 8) = a11;
      operator delete(a11);
      _Unwind_Resume(a1);
    }
  }
  else if (!v14)
  {
    goto LABEL_3;
  }
  operator delete(v14);
  *(void *)(a10 + 8) = a11;
  operator delete(a11);
  _Unwind_Resume(a1);
}

double sub_19E2BBBC4(uint64_t a1, uint64_t a2, const double **a3)
{
  sub_19E2BC0A0(*(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 48), (uint64_t)v42);
  uint64_t v6 = *(int *)(a1 + 48);
  if (v6)
  {
    uint64_t v7 = *(double **)(a1 + 24);
    uint64_t v8 = (double *)v42[0];
    uint64_t v9 = 8 * v43 + 8;
    do
    {
      double v10 = *v7++;
      *uint64_t v8 = 1.0 / (v10 * v10);
      uint64_t v8 = (double *)((char *)v8 + v9);
      --v6;
    }
    while (v6);
  }
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  signed int v30 = 0;
  unint64_t v12 = *(const void **)a2;
  uint64_t v11 = *(void *)(a2 + 8);
  int64_t v13 = v11 - *(void *)a2;
  if (v11 == *(void *)a2)
  {
    uint64_t v15 = 0;
    uint64_t v14 = 0;
  }
  else
  {
    if (v13 < 0) {
      sub_19E13D694();
    }
    uint64_t v14 = (char *)operator new(v11 - *(void *)a2);
    uint64_t v15 = &v14[8 * (v13 >> 3)];
    signed int v30 = v14;
    uint64_t v32 = v15;
    memcpy(v14, v12, v13);
    uint64_t v31 = v15;
  }
  signed int v16 = *(_DWORD *)(a2 + 24);
  signed int v33 = v16;
  vDSP_vsubD(*a3, 1, (const double *)v14, 1, (double *)v14, 1, v16);
  double __C = 0.0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v17 = v15 - v14;
  if (v15 != v14)
  {
    if (v17 < 0) {
      sub_19E13D694();
    }
    double v18 = (char *)operator new(v15 - v14);
    *(void *)&double __C = v18;
    uint64_t v36 = &v18[8 * (v17 >> 3)];
    memcpy(v18, v14, v15 - v14);
    uint64_t v35 = v36;
    signed int v37 = v16;
    char v39 = 0;
    uint64_t v40 = 0;
    double __B = 0;
    if (!v16)
    {
      signed int v41 = 0;
      uint64_t v35 = v18;
      operator delete(v18);
      if (!v14) {
        goto LABEL_23;
      }
LABEL_22:
      uint64_t v31 = v14;
      operator delete(v14);
      goto LABEL_23;
    }
LABEL_14:
    if (v16 < 0) {
      sub_19E13D694();
    }
    double v19 = (double *)operator new(8 * v16);
    double __B = v19;
    uint64_t v40 = &v19[v16];
    bzero(v19, 8 * v16);
    char v39 = v40;
    signed int v41 = v16;
    if (v16 >= 4)
    {
      uint64_t v21 = 0;
      unint64_t v20 = v16 & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v22 = v20;
      do
      {
        long long v23 = *(_OWORD *)&v18[v21 * 8 + 16];
        uint64_t v24 = &v19[v21];
        *(_OWORD *)uint64_t v24 = *(_OWORD *)&v18[v21 * 8];
        *((_OWORD *)v24 + 1) = v23;
        v21 += 4;
        v22 -= 4;
      }
      while (v22);
      if (v20 == v16)
      {
LABEL_21:
        uint64_t v35 = v18;
        operator delete(v18);
        if (!v14) {
          goto LABEL_23;
        }
        goto LABEL_22;
      }
    }
    else
    {
      unint64_t v20 = 0;
    }
    do
    {
      v19[v20] = *(double *)&v18[8 * v20];
      ++v20;
    }
    while (v16 != v20);
    goto LABEL_21;
  }
  double v18 = 0;
  signed int v37 = v16;
  char v39 = 0;
  uint64_t v40 = 0;
  double __B = 0;
  if (v16) {
    goto LABEL_14;
  }
  signed int v41 = 0;
  if (v14) {
    goto LABEL_22;
  }
LABEL_23:
  sub_19E29FAE8((uint64_t)&__B, (uint64_t)__p);
  sub_19E2BBF98((uint64_t)__p, (uint64_t)v42, (uint64_t)__A);
  vDSP_mmulD(__A[0], 1, __B, 1, &__C, 1, 1uLL, 1uLL, (int)v29);
  double v25 = __C;
  if (__A[0])
  {
    __A[1] = __A[0];
    operator delete(__A[0]);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (__B)
  {
    char v39 = __B;
    operator delete(__B);
  }
  if (v42[0])
  {
    v42[1] = v42[0];
    operator delete(v42[0]);
  }
  return v25;
}

void sub_19E2BBEC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  if (__p)
  {
    operator delete(__p);
    signed int v30 = a11;
    if (!a11)
    {
LABEL_3:
      uint64_t v31 = a27;
      if (!a27)
      {
LABEL_8:
        uint64_t v32 = *(void **)(v28 - 112);
        if (v32)
        {
          *(void *)(v28 - 104) = v32;
          operator delete(v32);
        }
        _Unwind_Resume(exception_object);
      }
LABEL_7:
      operator delete(v31);
      goto LABEL_8;
    }
  }
  else
  {
    signed int v30 = a11;
    if (!a11) {
      goto LABEL_3;
    }
  }
  operator delete(v30);
  uint64_t v31 = a27;
  if (!a27) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void sub_19E2BBF98(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6 = *(_DWORD *)(a2 + 28);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  if (v6)
  {
    if (v6 < 0) {
      sub_19E13D694();
    }
    uint64_t v7 = (char *)operator new(8 * v6);
    *(void *)a3 = v7;
    *(void *)(a3 + 16) = &v7[8 * v6];
    bzero(v7, 8 * v6);
    *(void *)(a3 + 8) = &v7[8 * v6];
  }
  else
  {
    uint64_t v7 = 0;
  }
  *(_DWORD *)(a3 + 24) = v6;
  vDSP_mmulD(*(const double **)a1, 1, *(const double **)a2, 1, (double *)v7, 1, 1uLL, v6, *(int *)(a1 + 24));
}

void sub_19E2BC068(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2BC084(void *a1)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  sub_19E13A9BC(a1);
}

void sub_19E2BC0A0(int a1@<W0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v6 = a2 * a1;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  if (a2 * a1)
  {
    uint64_t v7 = v6;
    if (v6 < 0) {
      sub_19E13D694();
    }
    size_t v8 = 8 * v6;
    uint64_t v9 = (char *)operator new(v8);
    *(void *)a3 = v9;
    *(void *)(a3 + 16) = &v9[8 * v7];
    bzero(v9, 8 * v7);
    *(void *)(a3 + 8) = &v9[v8];
  }
  else
  {
    uint64_t v9 = 0;
  }
  *(_DWORD *)(a3 + 24) = a1;
  *(_DWORD *)(a3 + 28) = a2;
  unint64_t v10 = a2 * (uint64_t)a1;
  unint64_t v11 = v10 / a2;
  unint64_t v12 = v10 % a2;
  if (v10 >= a2 || v12)
  {
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    uint64_t v15 = 0;
    unint64_t v16 = 1;
    do
    {
      *(void *)&v9[8 * v13 + 8 * v14 * a2] = 0;
      ++v15;
      unint64_t v14 = v16 / a2;
      uint64_t v13 = v15 - v14 * a2;
      ++v16;
    }
    while (v14 != v11 || v13 != v12);
  }
}

void sub_19E2BC184(void *a1)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  sub_19E13A9BC(a1);
}

uint64_t sub_19E2BC1A0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v13 = 0;
  unint64_t v14 = 0;
  uint64_t v15 = 0;
  sub_19E246830(&v13, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 4));
  __p = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  sub_19E246A1C(&__p, a3[3], a3[4], 0xCCCCCCCCCCCCCCCDLL * ((a3[4] - a3[3]) >> 3));
  sub_19E2BC33C((void *)a1, a2, (uint64_t *)&v13);
  int v6 = (void **)__p;
  if (__p)
  {
    uint64_t v7 = v17;
    size_t v8 = __p;
    if (v17 != __p)
    {
      do
      {
        if (*((char *)v7 - 17) < 0) {
          operator delete(*(v7 - 5));
        }
        v7 -= 5;
      }
      while (v7 != v6);
      size_t v8 = __p;
    }
    uint64_t v17 = v6;
    operator delete(v8);
  }
  uint64_t v9 = (void **)v13;
  if (v13)
  {
    unint64_t v10 = v14;
    unint64_t v11 = v13;
    if (v14 != v13)
    {
      do
      {
        if (*((char *)v10 - 25) < 0) {
          operator delete(*(v10 - 6));
        }
        v10 -= 6;
      }
      while (v10 != v9);
      unint64_t v11 = v13;
    }
    unint64_t v14 = v9;
    operator delete(v11);
  }
  *(void *)a1 = &unk_1EF0A8228;
  *(_DWORD *)(a1 + 64) = 5;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_19E2BC30C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_19E2BC320(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    sub_19E32FAD8((uint64_t)&a9, a9);
  }
  _Unwind_Resume(exception_object);
}

void *sub_19E2BC33C(void *a1, uint64_t a2, uint64_t *a3)
{
  *a1 = &unk_1EF0A8498;
  a1[1] = a2;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  sub_19E246830(a1 + 2, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 4));
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  sub_19E246A1C(a1 + 5, a3[3], a3[4], 0xCCCCCCCCCCCCCCCDLL * ((a3[4] - a3[3]) >> 3));
  return a1;
}

void sub_19E2BC3DC(_Unwind_Exception *exception_object)
{
  if (*v2) {
    sub_19E32FD88(v1, *v2);
  }
  _Unwind_Resume(exception_object);
}

void *sub_19E2BC3FC(void *a1)
{
  *a1 = &unk_1EF0A8228;
  uint64_t v2 = (char **)a1[9];
  if (v2)
  {
    int v3 = (char **)a1[10];
    double v4 = v2;
    if (v3 != v2)
    {
      do
        int v3 = sub_19E2470C8(v3 - 13);
      while (v3 != v2);
      double v4 = (char **)a1[9];
    }
    a1[10] = v2;
    operator delete(v4);
  }

  return sub_19E2BCAB0(a1);
}

void sub_19E2BC484(void *a1)
{
  *a1 = &unk_1EF0A8228;
  uint64_t v2 = (char **)a1[9];
  if (v2)
  {
    int v3 = (char **)a1[10];
    double v4 = v2;
    if (v3 != v2)
    {
      do
        int v3 = sub_19E2470C8(v3 - 13);
      while (v3 != v2);
      double v4 = (char **)a1[9];
    }
    a1[10] = v2;
    operator delete(v4);
  }
  uint64_t v5 = sub_19E2BCAB0(a1);

  operator delete(v5);
}

void sub_19E2BC510(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  sub_19E2BCB88(a1);
  uint64_t v6 = *(void *)(a1 + 72);
  if (v6 == *(void *)(a1 + 80))
  {
    uint64_t v39 = a3;
    sub_19E29CB00(a2, &v52);
    sub_19E2BCE80(a2, (uint64_t)v49);
    uint64_t v7 = v50;
    if (v50 != v51)
    {
      do
      {
        uint64_t v8 = *(void *)((char *)v7 + 28);
        sub_19E291E68(v48, &v52[12 * (int)v8]);
        if (SHIDWORD(v8) >= 1)
        {
          int v9 = 0;
          unsigned int v10 = HIDWORD(v8) & ~(v8 >> 63);
          do
          {
            sub_19E2BCFC0(a1, (uint64_t *)v48, (uint64_t **)&__A);
            sub_19E2460A4((char **)v48, (uint64_t)&__A);
            sub_19E15A064((uint64_t)v47, v47[1]);
            sub_19E15A064((uint64_t)v46, v46[1]);
            unint64_t v11 = (char *)__p;
            if (__p)
            {
              unint64_t v12 = v45;
              uint64_t v13 = __p;
              if (v45 != __p)
              {
                do
                {
                  unint64_t v14 = (void *)*((void *)v12 - 4);
                  if (v14)
                  {
                    *((void *)v12 - 3) = v14;
                    operator delete(v14);
                  }
                  if (*(v12 - 33) < 0) {
                    operator delete(*((void **)v12 - 7));
                  }
                  v12 -= 56;
                }
                while (v12 != v11);
                uint64_t v13 = __p;
              }
              uint64_t v45 = v11;
              operator delete(v13);
            }
            uint64_t v15 = __A;
            if (*(double *)&__A != 0.0)
            {
              unint64_t v16 = v43;
              uint64_t v17 = __A;
              if (v43 != __A)
              {
                do
                {
                  uint64_t v18 = (void *)*((void *)v16 - 4);
                  if (v18)
                  {
                    *((void *)v16 - 3) = v18;
                    operator delete(v18);
                  }
                  if (*((char *)v16 - 33) < 0) {
                    operator delete(*((void **)v16 - 7));
                  }
                  v16 -= 7;
                }
                while (v16 != v15);
                uint64_t v17 = __A;
              }
              int v43 = v15;
              operator delete(v17);
            }
            signed int v41 = 0;
            uint64_t v19 = *(void *)(a1 + 8);
            sub_19E29CE6C((long long **)v48, (uint64_t)v40);
            uint64_t v20 = *(void *)(v19 + 8);
            if (*(_DWORD *)(v20 + 120))
            {
              sub_19E2BB918(*(void *)(v19 + 8), (const double **)v40, (uint64_t)&__A);
              __C[0] = 0.0;
              vDSP_dotprD(__A, 1, *(const double **)(v20 + 256), 1, __C, (int)__p);
              double v21 = __C[0];
              __C[0] = 0.0;
              vDSP_meanvD(*(const double **)(v20 + 288), 1, __C, *(int *)(v20 + 312));
              double v22 = __C[0];
              sub_19E2BD48C(v20, (const double **)v40, (uint64_t)&__A);
              double v24 = v23;
              double v25 = *(double *)(v20 + 16);
              if (*(double *)&__A != 0.0)
              {
                int v43 = __A;
                operator delete(__A);
              }
              double v26 = v22 + v21;
              double v27 = v25 + v24;
            }
            else
            {
              *(double *)&__A = 0.0;
              vDSP_meanvD(*(const double **)(v20 + 288), 1, (double *)&__A, *(int *)(v20 + 312));
              double v26 = *(double *)&__A;
              double v27 = sub_19E2BD3BC(v20, (const double **)v40);
            }
            double v28 = sqrt(v27);
            if (v28 < 0.00000001 || (int v29 = *(_DWORD *)(*(void *)(v19 + 8) + 120), v29 <= 0))
            {
              double v30 = (*(double (**)(uint64_t))(*(void *)v19 + 8))(v19);
            }
            else
            {
              if (*(_DWORD *)(v19 + 56) != v29) {
                (*(void (**)(uint64_t))(*(void *)v19 + 16))(v19);
              }
              (**(void (***)(uint64_t, double, double))v19)(v19, v26, v28);
            }
            uint64_t v31 = *(uint64_t **)&v30;
            if (v40[0])
            {
              v40[1] = v40[0];
              operator delete(v40[0]);
            }
            signed int v41 = v31;
            sub_19E29D218((int *)(a1 + 64), (uint64_t *)v48, &v41);
            ++v9;
          }
          while (v10 != v9);
        }
        sub_19E2470C8((char **)v48);
        uint64_t v32 = (void *)v7[1];
        if (v32)
        {
          do
          {
            signed int v33 = (void **)v32;
            uint64_t v32 = (void *)*v32;
          }
          while (v32);
        }
        else
        {
          do
          {
            signed int v33 = (void **)v7[2];
            BOOL v34 = *v33 == v7;
            uint64_t v7 = v33;
          }
          while (!v34);
        }
        uint64_t v7 = v33;
      }
      while (v33 != v51);
    }
    uint64_t v35 = *(uint64_t **)(a1 + 72);
    sub_19E291E68((uint64_t **)v39, v35);
    *(void *)(v39 + 96) = v35[12];
    sub_19E29D74C(*(char ***)(a1 + 72), *(void *)(a1 + 80), (uint64_t)v48, 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 3));
    *(void *)(a1 + 80) = sub_19E2470C8((char **)(*(void *)(a1 + 80) - 104));
    sub_19E13C56C((uint64_t)&v50, v51[0]);
    uint64_t v36 = (char **)v52;
    if (v52)
    {
      signed int v37 = v53;
      double v38 = v52;
      if (v53 != (char **)v52)
      {
        do
          signed int v37 = sub_19E2470C8(v37 - 12);
        while (v37 != v36);
        double v38 = v52;
      }
      uint64_t v53 = v36;
      operator delete(v38);
    }
  }
  else
  {
    sub_19E291E68((uint64_t **)a3, *(uint64_t **)(a1 + 72));
    *(void *)(a3 + 96) = *(void *)(v6 + 96);
    sub_19E29D74C(*(char ***)(a1 + 72), *(void *)(a1 + 80), (uint64_t)v48, 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 3));
    *(void *)(a1 + 80) = sub_19E2470C8((char **)(*(void *)(a1 + 80) - 104));
  }
}

void sub_19E2BC9CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  sub_19E2470C8(v28);
  sub_19E13C56C(a10, *(void **)(v29 - 184));
  sub_19E2462FC((void **)(v29 - 168));
  _Unwind_Resume(a1);
}

void sub_19E2BCA64(char *a1@<X8>)
{
  a1[23] = 17;
  strcpy(a1, "genetic_optimizer");
}

void sub_19E2BCA88(char *a1@<X8>)
{
  a1[23] = 21;
  strcpy(a1, "acquisition_optimizer");
}

void *sub_19E2BCAB0(void *a1)
{
  *a1 = &unk_1EF0A8498;
  uint64_t v2 = a1[5];
  if (v2)
  {
    uint64_t v3 = a1[6];
    double v4 = (void *)a1[5];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 17) < 0) {
          operator delete(*(void **)(v3 - 40));
        }
        v3 -= 40;
      }
      while (v3 != v2);
      double v4 = (void *)a1[5];
    }
    a1[6] = v2;
    operator delete(v4);
  }
  uint64_t v5 = a1[2];
  if (v5)
  {
    uint64_t v6 = a1[3];
    uint64_t v7 = (void *)a1[2];
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 25) < 0) {
          operator delete(*(void **)(v6 - 48));
        }
        v6 -= 48;
      }
      while (v6 != v5);
      uint64_t v7 = (void *)a1[2];
    }
    a1[3] = v5;
    operator delete(v7);
  }
  return a1;
}

void sub_19E2BCB88(uint64_t a1)
{
  int v18 = 5;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v19 = 0;
  uint64_t v3 = *(void *)(a1 + 72);
  uint64_t v2 = (uint64_t *)(a1 + 72);
  if (v3 == *(void *)(a1 + 80))
  {
    unint64_t v12 = 0;
    *(_DWORD *)(a1 + 64) = 5;
    if ((int *)(a1 + 64) == &v18) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  do
  {
    sub_19E291E68(v17, (uint64_t *)v3);
    v17[12] = *(uint64_t **)(v3 + 96);
    sub_19E29D74C(*(char ***)(a1 + 72), *(void *)(a1 + 80), (uint64_t)__p, 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 3));
    *(void *)(a1 + 80) = sub_19E2470C8((char **)(*(void *)(a1 + 80) - 104));
    unint64_t v16 = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    sub_19E29CE6C((long long **)v17, (uint64_t)__p);
    v5.n128_f64[0] = sub_19E2BD2B0(*(void *)(v4 + 8), (const double **)__p);
    double v7 = sqrt(v6);
    if (v7 < 0.00000001 || (int v8 = *(_DWORD *)(*(void *)(v4 + 8) + 120), v8 <= 0))
    {
      double v10 = (*(double (**)(uint64_t, __n128))(*(void *)v4 + 8))(v4, v5);
    }
    else
    {
      double v9 = v5.n128_f64[0];
      if (*(_DWORD *)(v4 + 56) != v8) {
        (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
      }
      (**(void (***)(uint64_t, double, double))v4)(v4, v9, v7);
    }
    *(double *)&unint64_t v11 = v10;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    unint64_t v16 = v11;
    if (*(double *)&v11 > (*(double (**)(void))(**(void **)(a1 + 8) + 8))(*(void *)(a1 + 8))) {
      sub_19E29D218(&v18, (uint64_t *)v17, &v16);
    }
    sub_19E2470C8((char **)v17);
    uint64_t v3 = *(void *)(a1 + 72);
  }
  while (v3 != *(void *)(a1 + 80));
  unint64_t v12 = v19;
  *(_DWORD *)(a1 + 64) = v18;
  if ((int *)(a1 + 64) != &v18)
  {
LABEL_17:
    sub_19E29D4FC(v2, v12, v20, 0x4EC4EC4EC4EC4EC5 * (v20 - v12));
    unint64_t v12 = v19;
  }
LABEL_18:
  if (v12)
  {
    uint64_t v13 = (char **)v20;
    unint64_t v14 = v12;
    if (v20 != v12)
    {
      do
        uint64_t v13 = sub_19E2470C8(v13 - 13);
      while (v13 != (char **)v12);
      unint64_t v14 = v19;
    }
    uint64_t v20 = v12;
    operator delete(v14);
  }
}

void sub_19E2BCE1C(_Unwind_Exception *a1)
{
  sub_19E29C7AC(v1 - 120);
  _Unwind_Resume(a1);
}

void sub_19E2BCE30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_19E2470C8((char **)va);
  sub_19E29C7AC(v7 - 120);
  _Unwind_Resume(a1);
}

void sub_19E2BCE54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *a15)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E2470C8(&a15);
  sub_19E29C7AC(v15 - 120);
  _Unwind_Resume(a1);
}

void sub_19E2BCE80(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = a2 + 16;
  *(void *)(a2 + 24) = 0;
  sub_19E29DC58(a1, __p);
  sub_19E2459C8(v7, (uint64_t *)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v3 = 50;
  do
  {
    int v5 = sub_19E29E07C((uint64_t)v9, (uint64_t)v7, v9);
    uint64_t v4 = sub_19E29DD48((int *)a2, &v5);
    ++*(_DWORD *)v4;
    --v3;
  }
  while (v3);
  if (v9[0])
  {
    v9[1] = v9[0];
    operator delete(v9[0]);
  }
  std::random_device::~random_device(&v8);
}

void sub_19E2BCF60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14)
{
  if (__p)
  {
    operator delete(__p);
    sub_19E13C56C(v14, *v15);
    _Unwind_Resume(a1);
  }
  sub_19E13C56C(v14, *v15);
  _Unwind_Resume(a1);
}

void sub_19E2BCFC0(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t **a3@<X8>)
{
  sub_19E291E68(a3, a2);
  sub_19E29E298((long long **)a2, (uint64_t)v8);
  sub_19E2BD150(a1, (uint64_t *)v8, v9);
  sub_19E29E624((uint64_t)a2, (uint64_t)v6);
  sub_19E2BD200(a1, (uint64_t *)v6, __p);
  sub_19E29E900((uint64_t *)a3, (uint64_t *)v9);
  sub_19E29EAC0((uint64_t)a3, (uint64_t *)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v6[0])
  {
    v6[1] = v6[0];
    operator delete(v6[0]);
  }
  if (*(void *)&v9[0])
  {
    *((void *)&v9[0] + 1) = *(void *)&v9[0];
    operator delete(*(void **)&v9[0]);
  }
  if (v8[0])
  {
    v8[1] = v8[0];
    operator delete(v8[0]);
  }
}

void sub_19E2BD090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v21 = *(void **)(v19 - 64);
    if (!v21)
    {
LABEL_3:
      double v22 = a17;
      if (!a17) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v21 = *(void **)(v19 - 64);
    if (!v21) {
      goto LABEL_3;
    }
  }
  *(void *)(v19 - 56) = v21;
  operator delete(v21);
  double v22 = a17;
  if (!a17)
  {
LABEL_4:
    sub_19E2470C8(v18);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(v22);
  sub_19E2470C8(v18);
  _Unwind_Resume(a1);
}

double sub_19E2BD150@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  int v5 = (uint64_t *)(a1 + 16);
  if (sub_19E244298((uint64_t *)(a1 + 16)))
  {
    sub_19E244360(v5, (uint64_t *)v7);
    sub_19E310AEC(a2, (uint64_t)v7, (uint64_t)a3);
    if (__p)
    {
      double v9 = __p;
      operator delete(__p);
    }
    if (v7[0])
    {
      v7[1] = v7[0];
      operator delete(v7[0]);
    }
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

void sub_19E2BD1EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double sub_19E2BD200@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v5 = a1 + 16;
  if (sub_19E244DC4(a1 + 16))
  {
    sub_19E244E8C(v5, (uint64_t *)v7);
    sub_19E311780(a2, (uint64_t *)v7, (uint64_t)a3);
    if (__p)
    {
      double v9 = __p;
      operator delete(__p);
    }
    if (v7[0])
    {
      v7[1] = v7[0];
      operator delete(v7[0]);
    }
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

void sub_19E2BD29C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double sub_19E2BD2B0(uint64_t a1, const double **a2)
{
  if (*(_DWORD *)(a1 + 120))
  {
    sub_19E2BB918(a1, a2, (uint64_t)__A);
    double __C = 0.0;
    vDSP_dotprD(__A[0], 1, *(const double **)(a1 + 256), 1, &__C, (int)__N);
    double v4 = __C;
    double __C = 0.0;
    vDSP_meanvD(*(const double **)(a1 + 288), 1, &__C, *(int *)(a1 + 312));
    double v5 = __C;
    sub_19E2BD48C(a1, a2, (uint64_t)__A);
    if (__A[0])
    {
      __A[1] = __A[0];
      operator delete(__A[0]);
    }
    return v5 + v4;
  }
  else
  {
    double v6 = sub_19E2BB834(a1, a2);
    sub_19E2BD3BC(a1, a2);
  }
  return v6;
}

void sub_19E2BD39C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_19E2BD3BC(uint64_t a1, const double **a2)
{
  if (*(_DWORD *)(a1 + 120))
  {
    sub_19E2BB918(a1, a2, (uint64_t)__p);
    sub_19E2BD48C(a1, a2, (uint64_t)__p);
    double v5 = v4;
    double v6 = *(double *)(a1 + 16);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    return v6 + v5;
  }
  else
  {
    double v8 = *(double *)(a1 + 24);
    double v9 = sub_19E2BBBC4(a1 + 8, (uint64_t)a2, a2);
    return *(double *)(a1 + 16) + exp(v9 * -0.5) * v8;
  }
}

void sub_19E2BD470(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2BD48C(uint64_t a1, const double **a2, uint64_t a3)
{
  sub_19E29F880(a1 + 192, (uint64_t)__p);
  uint64_t v6 = *(unsigned int *)(a1 + 216);
  if ((int)v6 >= 1)
  {
    uint64_t v7 = 0;
    int v8 = *(_DWORD *)(a1 + 220);
    int v9 = v24;
    int v10 = 1;
    int v11 = -1;
    unint64_t v12 = __p[0];
    do
    {
      if (v8 <= v10) {
        int v13 = v10;
      }
      else {
        int v13 = v8;
      }
      int v14 = v7 + 1;
      if ((int)v7 + 1 >= v8) {
        goto LABEL_3;
      }
      unsigned int v15 = 0;
      int v16 = v13 + v11;
      uint64_t v17 = (int)v7 * (uint64_t)v9;
      if ((v13 + v11) < 4)
      {
        int v18 = v7 + 1;
      }
      else
      {
        int v18 = v7 + 1;
        if (v13 - (int)v7 + v10 - 2 >= v10)
        {
          int v19 = 0;
          unsigned int v15 = v16 & 0xFFFFFFFC;
          int v18 = v14 + (v16 & 0xFFFFFFFC);
          do
          {
            uint64_t v20 = &v12[v17 + v10 + v19];
            *uint64_t v20 = 0uLL;
            v20[1] = 0uLL;
            v19 += 4;
          }
          while ((v16 & 0xFFFFFFFC) != v19);
          if (v16 == v15) {
            goto LABEL_3;
          }
        }
      }
      unsigned int v21 = v13 - v15;
      do
      {
        v12[v17 + v18] = 0;
        int v18 = ++v15 + v14;
        --v21;
      }
      while (v10 != v21);
LABEL_3:
      ++v7;
      ++v10;
      --v11;
    }
    while (v7 != v6);
  }
  sub_19E29F6FC((uint64_t)__p, a3, (uint64_t)__B);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  double v22 = sub_19E2BBBC4(a1 + 8, (uint64_t)a2, a2);
  __p[0] = 0;
  vDSP_dotprD(__B[0], 1, __B[0], 1, (double *)__p, (int)__N);
  if (__B[0])
  {
    __B[1] = __B[0];
    operator delete(__B[0]);
  }
  exp(v22 * -0.5);
}

void sub_19E2BD654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E2BD684(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  BOOL v34 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  sub_19E246830(&v34, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 4));
  __p = 0;
  double v38 = 0;
  uint64_t v39 = 0;
  sub_19E246A1C(&__p, a3[3], a3[4], 0xCCCCCCCCCCCCCCCDLL * ((a3[4] - a3[3]) >> 3));
  sub_19E2BC33C((void *)a1, a2, (uint64_t *)&v34);
  int v8 = (void **)__p;
  if (__p)
  {
    int v9 = v38;
    int v10 = __p;
    if (v38 != __p)
    {
      do
      {
        if (*((char *)v9 - 17) < 0) {
          operator delete(*(v9 - 5));
        }
        v9 -= 5;
      }
      while (v9 != v8);
      int v10 = __p;
    }
    double v38 = v8;
    operator delete(v10);
  }
  int v11 = (void **)v34;
  if (v34)
  {
    unint64_t v12 = v35;
    int v13 = v34;
    if (v35 != v34)
    {
      do
      {
        if (*((char *)v12 - 25) < 0) {
          operator delete(*(v12 - 6));
        }
        v12 -= 6;
      }
      while (v12 != v11);
      int v13 = v34;
    }
    uint64_t v35 = v11;
    operator delete(v13);
  }
  *(void *)a1 = &unk_1EF0A8048;
  unsigned int v14 = sub_19E244298(a3);
  sub_19E2A099C(a1 + 64, v14);
  sub_19E299010(a1 + 184);
  sub_19E244360(a3, (uint64_t *)v32);
  sub_19E2A16E8(a1 + 64, (uint64_t *)v32);
  sub_19E2A1818(a1 + 64, (uint64_t *)v33);
  if (v33[0])
  {
    v33[1] = v33[0];
    operator delete(v33[0]);
  }
  if (v32[0])
  {
    v32[1] = v32[0];
    operator delete(v32[0]);
  }
  if ((a4 & 0xFF00000000) != 0)
  {
    uint64_t v15 = 0;
    *(_DWORD *)(a1 + 7776) = a4;
    uint64_t v16 = 1;
    unsigned int v17 = a4;
    do
    {
      int v18 = 1812433253 * (v17 ^ (v17 >> 30));
      unsigned int v17 = v18 + v16;
      *(_DWORD *)(a1 + 7780 + 4 * v15) = v15 + v18 + 1;
      ++v16;
      ++v15;
    }
    while (v15 != 623);
    *(void *)(a1 + 10272) = 0;
    *(_DWORD *)(a1 + 184) = a4;
    uint64_t v19 = 1;
    uint64_t v20 = 47;
    unsigned int v21 = a4;
    do
    {
      int v22 = 1812433253 * (v21 ^ (v21 >> 30));
      unsigned int v21 = v22 + v19;
      *(_DWORD *)(a1 + 4 * v20) = v20 + v22 - 46;
      ++v19;
      ++v20;
    }
    while (v20 != 670);
    uint64_t v23 = 0;
    *(void *)(a1 + 2680) = 0;
    *(_DWORD *)(a1 + 2712) = a4;
    uint64_t v24 = 1;
    unsigned int v25 = a4;
    do
    {
      int v26 = 1812433253 * (v25 ^ (v25 >> 30));
      unsigned int v25 = v26 + v24;
      *(_DWORD *)(a1 + 2716 + 4 * v23) = v23 + v26 + 1;
      ++v24;
      ++v23;
    }
    while (v23 != 623);
    uint64_t v27 = 0;
    *(void *)(a1 + 5208) = 0;
    *(_DWORD *)(a1 + 5232) = a4;
    uint64_t v28 = 1;
    unsigned int v29 = a4;
    do
    {
      int v30 = 1812433253 * (v29 ^ (v29 >> 30));
      unsigned int v29 = v30 + v28;
      *(_DWORD *)(a1 + 5236 + 4 * v27) = v27 + v30 + 1;
      ++v28;
      ++v27;
    }
    while (v27 != 623);
    *(void *)(a1 + 7728) = 0;
    sub_19E312C64();
  }
  return a1;
}

void sub_19E2BD968(_Unwind_Exception *a1)
{
  sub_19E2A0A3C(v2);
  sub_19E2BCAB0(v1);
  _Unwind_Resume(a1);
}

void sub_19E2BD9D4(_Unwind_Exception *a1)
{
  sub_19E2BCAB0(v1);
  _Unwind_Resume(a1);
}

void sub_19E2BD9EC(uint64_t a1)
{
  uint64_t v1 = sub_19E2BDF34(a1);

  operator delete(v1);
}

void sub_19E2BDA14(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v12 = 0u;
  memset(v11, 0, sizeof(v11));
  *(void *)&long long v12 = (char *)&v12 + 8;
  v15[0] = 0;
  v15[1] = 0;
  uint64_t v13 = 0;
  unsigned int v14 = v15;
  double v4 = (*(double (**)(void))(**(void **)(a1 + 8) + 8))(*(void *)(a1 + 8));
  sub_19E291E68((uint64_t **)a2, (uint64_t *)v11);
  *(double *)(a2 + 96) = v4;
  sub_19E2470C8((char **)v11);
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v16 = 0;
  sub_19E246830(&v16, *(void *)(a1 + 16), *(void *)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 4));
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  sub_19E246A1C(&v19, *(void *)(a1 + 40), *(void *)(a1 + 48), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 3));
  sub_19E2459CC((uint64_t *)&v16, a1 + 184, 5, (char **)&v22);
  double v5 = v19;
  if (v19)
  {
    uint64_t v6 = v20;
    uint64_t v7 = v19;
    if (v20 != v19)
    {
      do
      {
        if (*((char *)v6 - 17) < 0) {
          operator delete(*(v6 - 5));
        }
        v6 -= 5;
      }
      while (v6 != v5);
      uint64_t v7 = v19;
    }
    uint64_t v20 = v5;
    operator delete(v7);
  }
  uint64_t v8 = (uint64_t)v16;
  if (v16)
  {
    uint64_t v9 = v17;
    int v10 = v16;
    if ((void *)v17 != v16)
    {
      do
      {
        if (*(char *)(v9 - 25) < 0) {
          operator delete(*(void **)(v9 - 48));
        }
        v9 -= 48;
      }
      while (v9 != v8);
      int v10 = v16;
    }
    uint64_t v17 = v8;
    operator delete(v10);
  }
  sub_19E2BE00C(a1, v22);
}

void sub_19E2BDE5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v8 = va_arg(va1, char *);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  sub_19E2470C8((char **)va1);
  sub_19E2470C8((char **)va);
  sub_19E2462FC((void **)(v6 - 112));
  sub_19E2470C8(v5);
  _Unwind_Resume(a1);
}

void sub_19E2BDF14(char *a1@<X8>)
{
  a1[23] = 16;
  strcpy(a1, "direct_optimizer");
}

void *sub_19E2BDF34(uint64_t a1)
{
  *(void *)a1 = &unk_1EF0A8048;
  std::random_device::~random_device((std::random_device *)(a1 + 10280));
  std::random_device::~random_device((std::random_device *)(a1 + 7736));
  std::random_device::~random_device((std::random_device *)(a1 + 5216));
  std::random_device::~random_device((std::random_device *)(a1 + 2688));
  *(void *)(a1 + 64) = &unk_1EF0A7F70;
  sub_19E311F9C(*(void *)(a1 + 72));
  uint64_t v2 = *(void **)(a1 + 128);
  if (v2)
  {
    *(void *)(a1 + 136) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 104);
  if (v3)
  {
    *(void *)(a1 + 112) = v3;
    operator delete(v3);
  }
  double v4 = *(void **)(a1 + 80);
  if (v4)
  {
    *(void *)(a1 + 88) = v4;
    operator delete(v4);
  }

  return sub_19E2BCAB0((void *)a1);
}

void sub_19E2BE00C(uint64_t a1, long long **a2)
{
  v4[0] = a1;
  v4[1] = a2;
  uint64_t v2 = a1 + 64;
  sub_19E29E298(a2, (uint64_t)&__p);
  sub_19E2BE3DC(v2, (uint64_t)v4, (uint64_t)&__p);
}

void sub_19E2BE304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a13)
  {
    operator delete(a13);
    uint64_t v24 = __p;
    if (!__p)
    {
LABEL_4:
      sub_19E2470C8((char **)&a21);
      unsigned int v25 = *(void **)(v22 - 128);
      if (v25)
      {
        *(void *)(v22 - 120) = v25;
        operator delete(v25);
      }
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v24 = __p;
    if (!__p) {
      goto LABEL_4;
    }
  }
  operator delete(v24);
  goto LABEL_4;
}

void sub_19E2BE3DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a1 + 112)) {
    (**(void (***)(uint64_t, void))a1)(a1, *(unsigned int *)(a3 + 24));
  }
  operator new();
}

void sub_19E2BE870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  __cxa_free_exception(v15);
  if (a2 != 3)
  {
    if (a2 == 2)
    {
      uint64_t v19 = __cxa_begin_catch(a1);
      (*(void (**)(void *))(*(void *)v19 + 16))(v19);
      sub_19E29FAE8(v14, (uint64_t)&a13);
      if (a13)
      {
        a14 = (uint64_t)a13;
        operator delete(a13);
      }
      __cxa_end_catch();
LABEL_13:
      JUMPOUT(0x19E2BE658);
    }
    if (a2 != 1)
    {
      if (__p) {
        operator delete(__p);
      }
      _Unwind_Resume(a1);
    }
  }
  uint64_t v18 = __cxa_begin_catch(a1);
  (*(void (**)(void *))(*(void *)v18 + 16))(v18);
  __cxa_end_catch();
  goto LABEL_13;
}

void sub_19E2BE9C0(uint64_t **a1, void *a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  double v5 = a1[1];
  unint64_t v7 = (char *)v5 - (char *)*a1;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  __p = 0;
  int v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  if (!(v7 >> 3))
  {
    uint64_t v8 = 0;
    __p = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    int v20 = v7 >> 3;
    if (v6 == v5) {
      goto LABEL_13;
    }
    goto LABEL_6;
  }
  if (((v7 >> 3) & 0x80000000) != 0) {
    sub_19E13D694();
  }
  uint64_t v8 = operator new((uint64_t)(v7 << 29) >> 29);
  bzero(v8, (uint64_t)(v7 << 29) >> 29);
  __p = v8;
  uint64_t v18 = (char *)v8 + ((uint64_t)(v7 << 29) >> 29);
  uint64_t v19 = (char *)v8 + 8 * (int)((uint64_t)v7 >> 3);
  int v20 = v7 >> 3;
  if (v6 != v5)
  {
LABEL_6:
    uint64_t v9 = 0;
    if (v7 - 8 < 0x18) {
      goto LABEL_11;
    }
    if ((unint64_t)((char *)v8 - (char *)v6) < 0x20) {
      goto LABEL_11;
    }
    unint64_t v10 = ((v7 - 8) >> 3) + 1;
    uint64_t v9 = v10 & 0x3FFFFFFFFFFFFFFCLL;
    uint64_t v11 = v8 + 1;
    uint64_t v12 = (long long *)(v6 + 2);
    uint64_t v13 = v10 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v14 = *v12;
      *(v11 - 1) = *(v12 - 1);
      *uint64_t v11 = v14;
      v11 += 2;
      v12 += 2;
      v13 -= 4;
    }
    while (v13);
    v6 += v10 & 0x3FFFFFFFFFFFFFFCLL;
    if (v10 != v9)
    {
LABEL_11:
      uint64_t v15 = (void *)v8 + v9;
      do
      {
        uint64_t v16 = *v6++;
        *v15++ = v16;
      }
      while (v6 != v5);
    }
  }
LABEL_13:
  if (*a2 == a2[1])
  {
    sub_19E2BEB94(a3, (uint64_t)&__p);
    if (__p)
    {
      uint64_t v18 = (char *)__p;
      operator delete(__p);
    }
  }
  else
  {
    sub_19E2BEB94(a3, (uint64_t)&__p);
    __break(1u);
  }
}

void sub_19E2BEB58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2BEB78(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E13A9BC(a1);
}

uint64_t sub_19E2BEB94(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*a1 + 8);
  sub_19E29E624(a1[1], (uint64_t)v25);
  uint64_t v4 = v26;
  uint64_t v28 = 0;
  unsigned int v29 = 0;
  uint64_t v27 = 0;
  if (!v26)
  {
    int v30 = 0;
    goto LABEL_11;
  }
  if ((v26 & 0x80000000) != 0) {
    sub_19E13D694();
  }
  double v5 = (float64x2_t *)operator new(8 * (int)v26);
  uint64_t v27 = v5;
  unsigned int v29 = (char *)&v5->f64[(int)v4];
  bzero(v5, 8 * (int)v4);
  uint64_t v28 = (char *)&v5->f64[(int)v4];
  int v30 = v4;
  uint64_t v6 = (char *)v25[0];
  if (v4 < 8)
  {
    uint64_t v7 = 0;
LABEL_9:
    uint64_t v16 = v4 - v7;
    uint64_t v17 = v7 << 32;
    do
    {
      *(double *)((char *)v5->f64 + (v17 >> 29)) = (double)*(int *)&v6[v17 >> 30];
      v17 += 0x100000000;
      --v16;
    }
    while (v16);
    goto LABEL_11;
  }
  uint64_t v7 = v4 & 0xFFFFFFF8;
  uint64_t v8 = v5 + 2;
  uint64_t v9 = (char *)v25[0] + 16;
  uint64_t v10 = v7;
  do
  {
    long long v11 = *((_OWORD *)v9 - 1);
    v12.i64[0] = (int)v11;
    v12.i64[1] = SDWORD1(v11);
    float64x2_t v13 = vcvtq_f64_s64(v12);
    v12.i64[0] = SDWORD2(v11);
    v12.i64[1] = SHIDWORD(v11);
    float64x2_t v14 = vcvtq_f64_s64(v12);
    v12.i64[0] = (int)*(_OWORD *)v9;
    v12.i64[1] = (int)HIDWORD(*(void *)v9);
    float64x2_t v15 = vcvtq_f64_s64(v12);
    v12.i64[0] = (int)*((void *)v9 + 1);
    v12.i64[1] = (int)HIDWORD(*(_OWORD *)v9);
    v8[-2] = v13;
    v8[-1] = v14;
    *uint64_t v8 = v15;
    v8[1] = vcvtq_f64_s64(v12);
    v8 += 4;
    v9 += 32;
    v10 -= 8;
  }
  while (v10);
  if (v7 != v4) {
    goto LABEL_9;
  }
LABEL_11:
  sub_19E29FF68(a2, (uint64_t)&v27, (uint64_t)__p);
  double v18 = sub_19E2BD2B0(*(void *)(v3 + 8), (const double **)__p);
  double v20 = sqrt(v19);
  if (v20 < 0.00000001 || (int v21 = *(_DWORD *)(*(void *)(v3 + 8) + 120), v21 <= 0))
  {
    double v22 = (*(double (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  else
  {
    if (*(_DWORD *)(v3 + 56) != v21) {
      (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
    (**(void (***)(uint64_t, double, double))v3)(v3, v18, v20);
  }
  double v23 = v22;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v27)
  {
    uint64_t v28 = (char *)v27;
    operator delete(v27);
  }
  if (v25[0])
  {
    v25[1] = v25[0];
    operator delete(v25[0]);
  }
  return *(void *)&v23;
}

void sub_19E2BEDE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p)
  {
    operator delete(__p);
    double v19 = a9;
    if (!a9) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    double v19 = a9;
    if (!a9) {
      goto LABEL_3;
    }
  }
  operator delete(v19);
  _Unwind_Resume(exception_object);
}

void *sub_19E2BEE60(void *a1)
{
  uint64_t v2 = (void *)a1[36];
  if (v2)
  {
    a1[37] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[32];
  if (v3)
  {
    a1[33] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[28];
  if (v4)
  {
    a1[29] = v4;
    operator delete(v4);
  }
  double v5 = (void *)a1[24];
  if (v5)
  {
    a1[25] = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)a1[20];
  if (v6)
  {
    a1[21] = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)a1[16];
  if (v7)
  {
    a1[17] = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)a1[12];
  if (v8)
  {
    a1[13] = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)a1[8];
  if (v9)
  {
    a1[9] = v9;
    operator delete(v9);
  }
  uint64_t v10 = (void *)a1[4];
  if (v10)
  {
    a1[5] = v10;
    operator delete(v10);
  }
  return a1;
}

uint64_t sub_19E2BEF14(uint64_t a1)
{
  *(void *)a1 = &unk_1EF0A85B8;
  uint64_t v2 = *(char ***)(a1 + 10680);
  if (v2)
  {
    uint64_t v3 = *(char ***)(a1 + 10688);
    uint64_t v4 = v2;
    if (v3 != v2)
    {
      do
        uint64_t v3 = sub_19E2470C8(v3 - 12);
      while (v3 != v2);
      uint64_t v4 = *(char ***)(a1 + 10680);
    }
    *(void *)(a1 + 10688) = v2;
    operator delete(v4);
  }
  std::random_device::~random_device((std::random_device *)(a1 + 10672));
  std::random_device::~random_device((std::random_device *)(a1 + 8128));
  std::random_device::~random_device((std::random_device *)(a1 + 5608));
  std::random_device::~random_device((std::random_device *)(a1 + 3080));
  uint64_t v5 = *(void *)(a1 + 568);
  *(void *)(a1 + 568) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *(void *)(a1 + 504) = &unk_1EF0A7D40;
  uint64_t v6 = *(void **)(a1 + 520);
  if (v6)
  {
    *(void *)(a1 + 528) = v6;
    operator delete(v6);
  }
  sub_19E2BEE60((void *)(a1 + 176));
  uint64_t v7 = *(void *)(a1 + 152);
  if (v7)
  {
    uint64_t v8 = *(void *)(a1 + 160);
    uint64_t v9 = *(void **)(a1 + 152);
    if (v8 != v7)
    {
      uint64_t v10 = *(void *)(a1 + 160);
      do
      {
        int64x2_t v12 = *(void **)(v10 - 56);
        v10 -= 56;
        long long v11 = v12;
        if (v12)
        {
          *(void *)(v8 - 48) = v11;
          operator delete(v11);
        }
        uint64_t v8 = v10;
      }
      while (v10 != v7);
      uint64_t v9 = *(void **)(a1 + 152);
    }
    *(void *)(a1 + 160) = v7;
    operator delete(v9);
  }
  *(void *)a1 = &unk_1EF0A8318;
  sub_19E2934EC(a1 + 32);
  float64x2_t v13 = *(char ***)(a1 + 8);
  if (v13)
  {
    float64x2_t v14 = *(char ***)(a1 + 16);
    float64x2_t v15 = *(void **)(a1 + 8);
    if (v14 != v13)
    {
      do
        float64x2_t v14 = sub_19E2470C8(v14 - 13);
      while (v14 != v13);
      float64x2_t v15 = *(void **)(a1 + 8);
    }
    *(void *)(a1 + 16) = v13;
    operator delete(v15);
  }
  return a1;
}

void sub_19E2BF0D0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t *)(a1 + 96);
  uint64_t v4 = *(void *)(a1 + 96);
  int v6 = *(_DWORD *)(a1 + 120);
  int v7 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 120) = v6 + 1;
  *(_DWORD *)(a1 + 124) = v7;
  unint64_t v8 = v7 * (v6 + 1);
  unint64_t v9 = (*(void *)(a1 + 104) - v4) >> 3;
  if (v8 <= v9)
  {
    if (v8 < v9) {
      *(void *)(a1 + 104) = v4 + 8 * v8;
    }
  }
  else
  {
    sub_19E2482DC(a1 + 96, v8 - v9);
    int v6 = *(_DWORD *)(a1 + 120) - 1;
  }
  sub_19E29FAE8(a2, (uint64_t)__p);
  uint64_t v10 = *(int *)(a1 + 124);
  long long v11 = (char *)__p[0];
  if (!v10)
  {
    if (!__p[0]) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  uint64_t v12 = (int)v10 * (uint64_t)v6;
  uint64_t v13 = *v5;
  if (v10 >= 8 && (uint64_t v14 = 8 * v12 + v13, v14 - (unint64_t)__p[0] >= 0x20))
  {
    unint64_t v15 = v10 & 0xFFFFFFFFFFFFFFFCLL;
    double v20 = (long long *)((char *)__p[0] + 16);
    int v21 = (_OWORD *)(v14 + 16);
    unint64_t v22 = v10 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      long long v23 = *v20;
      *(v21 - 1) = *(v20 - 1);
      *int v21 = v23;
      v20 += 2;
      v21 += 2;
      v22 -= 4;
    }
    while (v22);
    if (v15 == v10) {
      goto LABEL_17;
    }
  }
  else
  {
    unint64_t v15 = 0;
  }
  uint64_t v16 = v10 - v15;
  uint64_t v17 = (void *)(v13 + 8 * (v15 + v12));
  double v18 = &v11[8 * v15];
  do
  {
    uint64_t v19 = *(void *)v18;
    v18 += 8;
    *v17++ = v19;
    --v16;
  }
  while (v16);
LABEL_17:
  __p[1] = v11;
  operator delete(v11);
LABEL_18:
  sub_19E2BF20C(a1, 1, 1);
}

void sub_19E2BF20C(uint64_t a1, int a2, int a3)
{
  if (a2)
  {
    uint64_t v5 = (void *)(a1 + 128);
    uint64_t v4 = *(void *)(a1 + 128);
    int v6 = *(_DWORD *)(a1 + 120);
    *(_DWORD *)(a1 + 152) = v6;
    unint64_t v7 = (*(void *)(a1 + 136) - v4) >> 3;
    uint64_t v35 = v6;
    if (v6 <= v7)
    {
      if (v6 < v7) {
        *(void *)(a1 + 136) = v4 + 8 * v6;
      }
    }
    else
    {
      sub_19E2482DC(a1 + 128, v6 - v7);
      int v6 = *(_DWORD *)(a1 + 120);
      uint64_t v35 = v6;
    }
    if (v6)
    {
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      while (1)
      {
        uint64_t v10 = *(void *)(a1 + 96);
        signed int v11 = *(_DWORD *)(a1 + 124);
        double __C = 0;
        signed int v41 = 0;
        uint64_t v42 = 0;
        if (v11) {
          break;
        }
        uint64_t v12 = 0;
        signed int v37 = 0;
        uint64_t v38 = 0;
        __p = 0;
        unsigned int v39 = 0;
LABEL_26:
        double __C = 0;
        vDSP_meanvD(*(const double **)(a1 + 288), 1, (double *)&__C, *(int *)(a1 + 312));
        *(void *)(*v5 + 8 * v9) = __C;
        if (__p)
        {
          signed int v37 = __p;
          operator delete(__p);
        }
        if (v12) {
          operator delete(v12);
        }
        ++v9;
        v8 += 8;
        if (v9 == v35) {
          goto LABEL_34;
        }
      }
      if (v11 < 0) {
        sub_19E13D694();
      }
      uint64_t v12 = operator new(8 * v11);
      bzero(v12, 8 * v11);
      if (v11 >= 8 && (unint64_t)v12 - v10 - 8 * v9 * v11 >= 0x20)
      {
        unint64_t v13 = v11 & 0xFFFFFFFFFFFFFFFCLL;
        uint64_t v28 = (long long *)(v10 + v8 * v11 + 16);
        unsigned int v29 = v12 + 1;
        unint64_t v30 = v13;
        do
        {
          long long v31 = *v28;
          *(v29 - 1) = *(v28 - 1);
          *unsigned int v29 = v31;
          v28 += 2;
          v29 += 2;
          v30 -= 4;
        }
        while (v30);
        if (v13 == v11)
        {
LABEL_16:
          __p = 0;
          signed int v37 = 0;
          uint64_t v38 = 0;
          unsigned int v39 = v11;
          sub_19E2482DC((uint64_t)&__p, v11);
          uint64_t v19 = v39;
          if ((int)v39 >= 1)
          {
            uint64_t v20 = 0;
            int v21 = (char *)__p;
            if (v39 < 4) {
              goto LABEL_22;
            }
            if ((unint64_t)((unsigned char *)__p - (unsigned char *)v12) < 0x20) {
              goto LABEL_22;
            }
            unint64_t v22 = 0;
            uint64_t v20 = v39 & 0xFFFFFFFC;
            uint64_t v23 = (8 * v39) & 0x7FFFFFFE0;
            do
            {
              long long v24 = v12[v22 / 0x10 + 1];
              unsigned int v25 = &v21[v22];
              *(_OWORD *)unsigned int v25 = v12[v22 / 0x10];
              *((_OWORD *)v25 + 1) = v24;
              v22 += 32;
            }
            while (v23 != v22);
            if (v20 != v19)
            {
LABEL_22:
              uint64_t v26 = v19 - v20;
              uint64_t v27 = v20 << 32;
              do
              {
                *(void *)&v21[v27 >> 29] = *(void *)((char *)v12 + (v27 >> 29));
                v27 += 0x100000000;
                --v26;
              }
              while (v26);
            }
          }
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v13 = 0;
      }
      unint64_t v14 = v11 - v13;
      uint64_t v15 = 8 * v13;
      uint64_t v16 = (void *)v12 + v13;
      uint64_t v17 = (uint64_t *)(v10 + v15 + v8 * v11);
      do
      {
        uint64_t v18 = *v17++;
        *v16++ = v18;
        --v14;
      }
      while (v14);
      goto LABEL_16;
    }
  }
LABEL_34:
  sub_19E2BF58C(a1 + 8, (uint64_t *)(a1 + 96), (uint64_t)&__C);
  if ((char **)(a1 + 160) != &__C) {
    sub_19E1E5B9C((void *)(a1 + 160), __C, v41, (v41 - __C) >> 3);
  }
  uint64_t v32 = __C;
  *(void *)(a1 + 184) = v43;
  if (v32)
  {
    signed int v41 = v32;
    operator delete(v32);
  }
  sub_19E2A4E4C(a1 + 160, (uint64_t)&__C);
  if ((char **)(a1 + 192) != &__C) {
    sub_19E1E5B9C((void *)(a1 + 192), __C, v41, (v41 - __C) >> 3);
  }
  signed int v33 = __C;
  *(void *)(a1 + 216) = v43;
  if (v33)
  {
    signed int v41 = v33;
    operator delete(v33);
  }
  sub_19E2BFA50(a1);
  if (a3) {
    sub_19E2BFC74((int32x2_t *)a1);
  }
}

void sub_19E2BF528(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2BF58C(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *((unsigned int *)a2 + 6);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  if (!v4)
  {
    unint64_t v7 = 0;
    *(_DWORD *)(a3 + 24) = 0;
    *(_DWORD *)(a3 + 28) = 0;
LABEL_41:
    uint64_t v41 = (int)v4;
    if (v4) {
      goto LABEL_42;
    }
    return;
  }
  size_t v6 = 8 * (v4 * v4);
  unint64_t v7 = (char *)operator new(v6);
  *(void *)a3 = v7;
  *(void *)(a3 + 16) = &v7[v6];
  bzero(v7, v6);
  *(void *)(a3 + 8) = &v7[v6];
  *(_DWORD *)(a3 + 24) = v4;
  *(_DWORD *)(a3 + 28) = v4;
  if ((int)v4 <= 0) {
    goto LABEL_41;
  }
  uint64_t v49 = 0;
  uint64_t v8 = 0;
  uint64_t v52 = 1;
  uint64_t v47 = v4;
  uint64_t v48 = a1;
  do
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v51 = (int)v8 * v4;
    do
    {
      uint64_t v11 = *a2;
      signed int v12 = *((_DWORD *)a2 + 7);
      __p = 0;
      unsigned __int8 v58 = 0;
      unint64_t v59 = 0;
      if (v12)
      {
        if (v12 < 0) {
          sub_19E13D694();
        }
        unint64_t v13 = v7;
        size_t v14 = 8 * v12;
        uint64_t v15 = operator new(v14);
        bzero(v15, v14);
        if (v12 < 8 || (unint64_t)v15 - v11 - 8 * v8 * v12 < 0x20)
        {
          unint64_t v16 = 0;
          goto LABEL_12;
        }
        unint64_t v16 = v12 & 0xFFFFFFFFFFFFFFFCLL;
        signed int v33 = (long long *)(v11 + v49 * v12 + 16);
        BOOL v34 = v15 + 1;
        unint64_t v35 = v16;
        do
        {
          long long v36 = *v33;
          *(v34 - 1) = *(v33 - 1);
          *BOOL v34 = v36;
          v33 += 2;
          v34 += 2;
          v35 -= 4;
        }
        while (v35);
        if (v16 != v12)
        {
LABEL_12:
          unint64_t v17 = v12 - v16;
          uint64_t v18 = 8 * v16;
          uint64_t v19 = (void *)v15 + v16;
          uint64_t v20 = (uint64_t *)(v11 + v18 + v49 * v12);
          do
          {
            uint64_t v21 = *v20++;
            *v19++ = v21;
            --v17;
          }
          while (v17);
        }
        uint64_t v53 = 0;
        long long v54 = 0;
        signed int v56 = 0;
        int v55 = 0;
        uint64_t v53 = operator new(8 * v12);
        long long v54 = (char *)v53 + v14;
        int v55 = (char *)v53 + 8 * v12;
        signed int v56 = v12;
        memcpy(v53, v15, 8 * v12);
        unint64_t v22 = operator new(8 * v12);
        bzero(v22, 8 * v12);
        if (v12 < 8 || (unint64_t)v22 - v11 - 8 * v10 * v12 < 0x20)
        {
          unint64_t v23 = 0;
          goto LABEL_17;
        }
        unint64_t v23 = v12 & 0xFFFFFFFFFFFFFFFCLL;
        signed int v37 = (long long *)(v11 + v9 * v12 + 16);
        uint64_t v38 = v22 + 1;
        unint64_t v39 = v23;
        do
        {
          long long v40 = *v37;
          *(v38 - 1) = *(v37 - 1);
          *uint64_t v38 = v40;
          v37 += 2;
          v38 += 2;
          v39 -= 4;
        }
        while (v39);
        if (v23 != v12)
        {
LABEL_17:
          unint64_t v24 = v12 - v23;
          uint64_t v25 = 8 * v23;
          uint64_t v26 = (void *)v22 + v23;
          uint64_t v27 = (uint64_t *)(v11 + v25 + v9 * v12);
          do
          {
            uint64_t v28 = *v27++;
            *v26++ = v28;
            --v24;
          }
          while (v24);
        }
        __p = 0;
        unsigned __int8 v58 = 0;
        signed int v60 = 0;
        unint64_t v59 = 0;
        uint64_t v29 = (int)v10;
        __p = operator new(8 * v12);
        unsigned __int8 v58 = (char *)__p + v14;
        unint64_t v59 = (char *)__p + 8 * v12;
        signed int v60 = v12;
        memcpy(__p, v22, 8 * v12);
        unint64_t v7 = v13;
        a1 = v48;
        goto LABEL_21;
      }
      uint64_t v15 = 0;
      unint64_t v22 = 0;
      long long v54 = 0;
      int v55 = 0;
      uint64_t v53 = 0;
      signed int v56 = 0;
      uint64_t v29 = (int)v10;
      __p = 0;
      unsigned __int8 v58 = 0;
      signed int v60 = 0;
      unint64_t v59 = 0;
LABEL_21:
      double v30 = *(double *)(a1 + 16);
      double v31 = sub_19E2BBBC4(a1, (uint64_t)&v53, (const double **)&__p);
      double v32 = exp(v31 * -0.5) * v30;
      if (v8 == v10) {
        double v32 = v32 + *(double *)(a1 + 8) + 1.0e-10;
      }
      *(double *)&v7[8 * v29 + 8 * v51] = v32;
      if (__p)
      {
        unsigned __int8 v58 = (char *)__p;
        operator delete(__p);
      }
      if (v22) {
        operator delete(v22);
      }
      if (v53)
      {
        long long v54 = (char *)v53;
        operator delete(v53);
      }
      if (v15) {
        operator delete(v15);
      }
      ++v10;
      v9 += 8;
    }
    while (v10 != v52);
    ++v8;
    ++v52;
    v49 += 8;
    uint64_t v4 = v47;
  }
  while (v8 != v47);
  uint64_t v41 = v47;
LABEL_42:
  if (v41 != 1)
  {
    uint64_t v42 = 0;
    uint64_t v43 = 8 * v41;
    int64_t v44 = v7;
    do
    {
      if (v42)
      {
        uint64_t v45 = 0;
        unint64_t v46 = v44;
        do
        {
          *unint64_t v46 = *(void *)&v7[8 * v45++];
          unint64_t v46 = (void *)((char *)v46 + v43);
        }
        while (v42 != v45);
      }
      ++v42;
      ++v44;
      v7 += v43;
    }
    while (v42 != v41);
  }
}

void sub_19E2BF9AC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E13A9BC(a1);
}

void sub_19E2BF9D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v27 = a10;
    if (!v25)
    {
LABEL_3:
      uint64_t v28 = a18;
      if (!a18) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v27 = a10;
    if (!v25) {
      goto LABEL_3;
    }
  }
  operator delete(v25);
  uint64_t v28 = a18;
  if (!a18)
  {
LABEL_4:
    if (!v23) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  operator delete(v28);
  if (!v23)
  {
LABEL_5:
    *(void *)(v27 + 8) = v24;
    operator delete(v24);
    _Unwind_Resume(a1);
  }
LABEL_9:
  operator delete(v23);
  *(void *)(v27 + 8) = v24;
  operator delete(v24);
  _Unwind_Resume(a1);
}

void sub_19E2BFA50(uint64_t a1)
{
  sub_19E29F880(a1 + 192, (uint64_t)v22);
  uint64_t v2 = *(unsigned int *)(a1 + 216);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 0;
    int v4 = *(_DWORD *)(a1 + 220);
    int v5 = v23;
    int v6 = 1;
    int v7 = -1;
    uint64_t v8 = v22[0];
    do
    {
      if (v4 <= v6) {
        int v9 = v6;
      }
      else {
        int v9 = v4;
      }
      int v10 = v3 + 1;
      if ((int)v3 + 1 >= v4) {
        goto LABEL_3;
      }
      unsigned int v11 = 0;
      int v12 = v9 + v7;
      uint64_t v13 = (int)v3 * (uint64_t)v5;
      if ((v9 + v7) < 4)
      {
        int v14 = v3 + 1;
      }
      else
      {
        int v14 = v3 + 1;
        if (v9 - (int)v3 + v6 - 2 >= v6)
        {
          int v15 = 0;
          unsigned int v11 = v12 & 0xFFFFFFFC;
          int v14 = v10 + (v12 & 0xFFFFFFFC);
          do
          {
            unint64_t v16 = &v8[v13 + v6 + v15];
            *unint64_t v16 = 0uLL;
            v16[1] = 0uLL;
            v15 += 4;
          }
          while ((v12 & 0xFFFFFFFC) != v15);
          if (v12 == v11) {
            goto LABEL_3;
          }
        }
      }
      unsigned int v17 = v9 - v11;
      do
      {
        v8[v13 + v14] = 0;
        int v14 = ++v11 + v10;
        --v17;
      }
      while (v6 != v17);
LABEL_3:
      ++v3;
      ++v6;
      --v7;
    }
    while (v3 != v2);
  }
  sub_19E2BFEDC(a1, (uint64_t)v18);
  sub_19E29F6FC((uint64_t)v22, (uint64_t)v18, (uint64_t)&__p);
  if ((void **)(a1 + 256) != &__p) {
    sub_19E1E5B9C((void *)(a1 + 256), (char *)__p, v20, (v20 - (unsigned char *)__p) >> 3);
  }
  *(_DWORD *)(a1 + 280) = v21;
  if (__p)
  {
    uint64_t v20 = (char *)__p;
    operator delete(__p);
  }
  if (v18[0])
  {
    v18[1] = v18[0];
    operator delete(v18[0]);
  }
  sub_19E29FC64((uint64_t)v22, &__p);
  sub_19E2A58A8((uint64_t)&__p, a1 + 256);
  if (__p)
  {
    uint64_t v20 = (char *)__p;
    operator delete(__p);
  }
  if (v22[0])
  {
    v22[1] = v22[0];
    operator delete(v22[0]);
  }
}

void sub_19E2BFC10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  if (a17) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2BFC74(int32x2_t *a1)
{
  uint64_t v2 = a1[15].u32[0];
  sub_19E242424(v2, v2, (uint64_t)&__p);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = v29.i32[1] + 1;
    int v4 = __p;
    if (v2 == 1)
    {
      uint64_t v5 = 0;
LABEL_7:
      uint64_t v8 = v2 - v5;
      uint64_t v9 = v5 << 32;
      do
      {
        v4[(v9 >> 32) * v3] = 0x3FF0000000000000;
        v9 += 0x100000000;
        --v8;
      }
      while (v8);
      goto LABEL_9;
    }
    uint64_t v6 = 0;
    uint64_t v5 = v2 & 0xFFFFFFFE;
    uint64_t v7 = v5;
    do
    {
      v4[(v6 >> 32) * v3] = 0x3FF0000000000000;
      v4[((v6 >> 32) | 1) * v3] = 0x3FF0000000000000;
      v6 += 0x200000000;
      v7 -= 2;
    }
    while (v7);
    if (v5 != v2) {
      goto LABEL_7;
    }
  }
LABEL_9:
  if (&a1[28] != (int32x2_t *)&__p) {
    sub_19E1E5B9C(&a1[28], (char *)__p, v28, (v28 - (unsigned char *)__p) >> 3);
  }
  int v10 = (char *)__p;
  a1[31] = v29;
  if (v10)
  {
    uint64_t v28 = v10;
    operator delete(v10);
  }
  sub_19E29F880((uint64_t)&a1[24], (uint64_t)&__p);
  uint64_t v11 = a1[27].u32[0];
  if ((int)v11 >= 1)
  {
    uint64_t v12 = 0;
    int v13 = a1[27].i32[1];
    __int32 v14 = v29.i32[1];
    int v15 = 1;
    int v16 = -1;
    unsigned int v17 = __p;
    do
    {
      if (v13 <= v15) {
        int v18 = v15;
      }
      else {
        int v18 = v13;
      }
      int v19 = v12 + 1;
      if ((int)v12 + 1 >= v13) {
        goto LABEL_15;
      }
      unsigned int v20 = 0;
      int v21 = v18 + v16;
      uint64_t v22 = (int)v12 * (uint64_t)v14;
      if ((v18 + v16) < 4)
      {
        int v23 = v12 + 1;
      }
      else
      {
        int v23 = v12 + 1;
        if (v18 - (int)v12 + v15 - 2 >= v15)
        {
          int v24 = 0;
          unsigned int v20 = v21 & 0xFFFFFFFC;
          int v23 = v19 + (v21 & 0xFFFFFFFC);
          do
          {
            uint64_t v25 = &v17[v22 + v15 + v24];
            _OWORD *v25 = 0uLL;
            v25[1] = 0uLL;
            v24 += 4;
          }
          while ((v21 & 0xFFFFFFFC) != v24);
          if (v21 == v20) {
            goto LABEL_15;
          }
        }
      }
      unsigned int v26 = v18 - v20;
      do
      {
        v17[v22 + v23] = 0;
        int v23 = ++v20 + v19;
        --v26;
      }
      while (v15 != v26);
LABEL_15:
      ++v12;
      ++v15;
      --v16;
    }
    while (v12 != v11);
  }
  sub_19E2A59C0((uint64_t)&__p, a1 + 28);
  if (__p)
  {
    uint64_t v28 = (char *)__p;
    operator delete(__p);
  }
  sub_19E29FC64((uint64_t)&a1[24], &__p);
  sub_19E2A59C0((uint64_t)&__p, a1 + 28);
  if (__p)
  {
    uint64_t v28 = (char *)__p;
    operator delete(__p);
  }
}

void sub_19E2BFEB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2BFEDC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  signed int v4 = *(_DWORD *)(a1 + 312);
  uint64_t v5 = 8 * v4;
  if (v4)
  {
    if (v4 < 0) {
      sub_19E13D694();
    }
    uint64_t v6 = (char *)operator new(8 * v4);
    bzero(v6, 8 * v4);
    unint64_t v7 = 0;
    uint64_t v8 = &v6[v5];
    uint64_t v9 = *(void *)(a1 + 288);
    if (v4 < 4) {
      goto LABEL_48;
    }
    if ((unint64_t)&v6[-v9] < 0x20) {
      goto LABEL_48;
    }
    uint64_t v10 = 0;
    unint64_t v7 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v11 = v7;
    do
    {
      long long v12 = *(_OWORD *)(v9 + v10 + 16);
      int v13 = &v6[v10];
      *(_OWORD *)int v13 = *(_OWORD *)(v9 + v10);
      *((_OWORD *)v13 + 1) = v12;
      v10 += 32;
      v11 -= 4;
    }
    while (v11);
    if (v7 != v4)
    {
LABEL_48:
      do
      {
        *(void *)&v6[8 * v7] = *(void *)(v9 + 8 * v7);
        ++v7;
      }
      while (v4 != v7);
    }
    uint64_t v14 = *(int *)(a1 + 152);
    if (v14) {
      goto LABEL_10;
    }
LABEL_19:
    int v15 = 0;
    goto LABEL_20;
  }
  uint64_t v8 = 0;
  uint64_t v6 = 0;
  uint64_t v14 = *(int *)(a1 + 152);
  if (!v14) {
    goto LABEL_19;
  }
LABEL_10:
  if ((v14 & 0x80000000) != 0) {
    sub_19E13D694();
  }
  int v15 = (char *)operator new(8 * v14);
  bzero(v15, 8 * v14);
  unint64_t v16 = 0;
  uint64_t v17 = *(void *)(a1 + 128);
  if (v14 < 4) {
    goto LABEL_49;
  }
  if ((unint64_t)&v15[-v17] < 0x20) {
    goto LABEL_49;
  }
  uint64_t v18 = 0;
  unint64_t v16 = v14 & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v19 = v14 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    long long v20 = *(_OWORD *)(v17 + v18 + 16);
    int v21 = &v15[v18];
    *(_OWORD *)int v21 = *(_OWORD *)(v17 + v18);
    *((_OWORD *)v21 + 1) = v20;
    v18 += 32;
    v19 -= 4;
  }
  while (v19);
  if (v16 != v14)
  {
LABEL_49:
    do
    {
      *(void *)&v15[8 * v16] = *(void *)(v17 + 8 * v16);
      ++v16;
    }
    while (v14 != v16);
  }
LABEL_20:
  vDSP_vsubD((const double *)v15, 1, (const double *)v6, 1, (double *)v6, 1, v4);
  if (v8 != v6)
  {
    if (v8 - v6 < 0) {
      sub_19E13D694();
    }
    uint64_t v22 = (char *)operator new(v8 - v6);
    memcpy(v22, v6, v8 - v6);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)a2 = 0;
    if (!v4)
    {
      *(_DWORD *)(a2 + 24) = 0;
      operator delete(v22);
      if (!v15) {
        goto LABEL_35;
      }
LABEL_34:
      operator delete(v15);
      goto LABEL_35;
    }
LABEL_26:
    if (v4 < 0) {
      sub_19E13D694();
    }
    int v23 = (char *)operator new(8 * v4);
    *(void *)a2 = v23;
    *(void *)(a2 + 16) = &v23[8 * v4];
    bzero(v23, 8 * v4);
    *(void *)(a2 + 8) = &v23[v5];
    *(_DWORD *)(a2 + 24) = v4;
    if (v4 >= 4)
    {
      uint64_t v25 = 0;
      unint64_t v24 = v4 & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v26 = v24;
      do
      {
        long long v27 = *(_OWORD *)&v22[v25 + 16];
        uint64_t v28 = &v23[v25];
        *(_OWORD *)uint64_t v28 = *(_OWORD *)&v22[v25];
        *((_OWORD *)v28 + 1) = v27;
        v25 += 32;
        v26 -= 4;
      }
      while (v26);
      if (v24 == v4)
      {
LABEL_33:
        operator delete(v22);
        if (!v15) {
          goto LABEL_35;
        }
        goto LABEL_34;
      }
    }
    else
    {
      unint64_t v24 = 0;
    }
    do
    {
      *(void *)&v23[8 * v24] = *(void *)&v22[8 * v24];
      ++v24;
    }
    while (v4 != v24);
    goto LABEL_33;
  }
  uint64_t v22 = 0;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  if (v4) {
    goto LABEL_26;
  }
  *(_DWORD *)(a2 + 24) = 0;
  if (v15) {
    goto LABEL_34;
  }
LABEL_35:
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_19E2C0214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (v19)
  {
    operator delete(v19);
    if (!v18) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if (!v18)
  {
    goto LABEL_3;
  }
  operator delete(v18);
  _Unwind_Resume(exception_object);
}

void sub_19E2C0278(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  if (a9) {
    operator delete(a9);
  }
  sub_19E13A9BC(a1);
}

void sub_19E2C028C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13) {
    JUMPOUT(0x19E2C029CLL);
  }
  JUMPOUT(0x19E2C02A0);
}

void sub_19E2C02A8(uint64_t a1, uint64_t a2)
{
  uint64_t v32 = a2;
  sub_19E2A099C((uint64_t)&v31, *(_DWORD *)(a2 + 8) + 1);
  sub_19E248FE0((uint64_t)v29, *(_DWORD *)(a2 + 8) + 1);
  uint64_t v3 = v29[0];
  *(void *)v29[0] = 0xC01E000000000000;
  signed int v4 = __p[0];
  *(void *)__p[0] = 0x401E000000000000;
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5 >= 1)
  {
    unsigned int v6 = 0;
    signed int v7 = 1;
    if (v5 < 0xA) {
      goto LABEL_7;
    }
    if ((unint64_t)(v4 - v3) < 0x20) {
      goto LABEL_7;
    }
    int v8 = 0;
    unsigned int v6 = v5 & 0xFFFFFFFC;
    signed int v7 = v5 & 0xFFFFFFFC | 1;
    __asm
    {
      FMOV            V0.2D, #-10.0
      FMOV            V1.2D, #10.0
    }
    do
    {
      uint64_t v15 = 8 * v8;
      unint64_t v16 = &v3[v15 + 8];
      *unint64_t v16 = _Q0;
      v16[1] = _Q0;
      uint64_t v17 = &v4[v15 + 8];
      _OWORD *v17 = _Q1;
      v17[1] = _Q1;
      v8 += 4;
    }
    while (v6 != v8);
    if (v6 != v5)
    {
LABEL_7:
      unsigned int v18 = v5 - v6;
      do
      {
        uint64_t v19 = 8 * v7;
        *(void *)&v3[v19] = 0xC024000000000000;
        *(void *)&v4[v19] = 0x4024000000000000;
        signed int v7 = v6 + 2;
        ++v6;
        --v18;
      }
      while (v18);
    }
  }
  sub_19E2A16E8((uint64_t)&v31, (uint64_t *)v29);
  sub_19E2A1818((uint64_t)&v31, (uint64_t *)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v29[0])
  {
    v29[1] = v29[0];
    operator delete(v29[0]);
  }
  int v21 = *(unsigned char **)(a2 + 64);
  long long v20 = *(unsigned char **)(a2 + 72);
  uint64_t v25 = 0;
  unint64_t v26 = 0;
  long long v27 = 0;
  int64_t v22 = v20 - v21;
  if (v20 != v21)
  {
    if (v22 < 0) {
      sub_19E13D694();
    }
    int v23 = (char *)operator new(v20 - v21);
    unint64_t v24 = &v23[8 * (v22 >> 3)];
    uint64_t v25 = v23;
    long long v27 = v24;
    memcpy(v23, v21, v22);
    unint64_t v26 = v24;
  }
  int v28 = *(_DWORD *)(a2 + 88);
  sub_19E2C0654((uint64_t)&v31, (uint64_t)&v32, (uint64_t)&v25);
}

void sub_19E2C05CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  if (__p)
  {
    operator delete(__p);
    sub_19E2A0A3C(&a29);
    _Unwind_Resume(a1);
  }
  sub_19E2A0A3C(&a29);
  _Unwind_Resume(a1);
}

void sub_19E2C0638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
}

void sub_19E2C0654(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a1 + 112)) {
    (**(void (***)(uint64_t, void))a1)(a1, *(unsigned int *)(a3 + 24));
  }
  operator new();
}

void sub_19E2C0AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  __cxa_free_exception(v15);
  if (a2 != 3)
  {
    if (a2 == 2)
    {
      uint64_t v19 = __cxa_begin_catch(a1);
      (*(void (**)(void *))(*(void *)v19 + 16))(v19);
      sub_19E29FAE8(v14, (uint64_t)&a13);
      if (a13)
      {
        a14 = (uint64_t)a13;
        operator delete(a13);
      }
      __cxa_end_catch();
LABEL_13:
      JUMPOUT(0x19E2C08D0);
    }
    if (a2 != 1)
    {
      if (__p) {
        operator delete(__p);
      }
      _Unwind_Resume(a1);
    }
  }
  unsigned int v18 = __cxa_begin_catch(a1);
  (*(void (**)(void *))(*(void *)v18 + 16))(v18);
  __cxa_end_catch();
  goto LABEL_13;
}

double sub_19E2C0C38(uint64_t **a1, uint64_t *a2, int **a3)
{
  unsigned int v6 = *a1;
  int v5 = a1[1];
  unint64_t v7 = (char *)v5 - (char *)*a1;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  long long v40 = 0;
  int v43 = 0;
  double v33 = 0.0;
  __p = 0;
  unint64_t v35 = 0;
  if (!(v7 >> 3))
  {
    int v8 = 0;
    long long v40 = 0;
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    int v43 = v7 >> 3;
    if (v6 == v5) {
      goto LABEL_13;
    }
    goto LABEL_6;
  }
  if (((v7 >> 3) & 0x80000000) != 0) {
    sub_19E13D694();
  }
  int v8 = operator new((uint64_t)(v7 << 29) >> 29);
  bzero(v8, (uint64_t)(v7 << 29) >> 29);
  long long v40 = v8;
  uint64_t v41 = (char *)v8 + ((uint64_t)(v7 << 29) >> 29);
  uint64_t v42 = (char *)v8 + 8 * (int)((uint64_t)v7 >> 3);
  int v43 = v7 >> 3;
  if (v6 != v5)
  {
LABEL_6:
    uint64_t v9 = 0;
    if (v7 - 8 < 0x18) {
      goto LABEL_11;
    }
    if ((unint64_t)((char *)v8 - (char *)v6) < 0x20) {
      goto LABEL_11;
    }
    unint64_t v10 = ((v7 - 8) >> 3) + 1;
    uint64_t v9 = v10 & 0x3FFFFFFFFFFFFFFCLL;
    unint64_t v11 = v8 + 1;
    long long v12 = (long long *)(v6 + 2);
    uint64_t v13 = v10 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v14 = *v12;
      *(v11 - 1) = *(v12 - 1);
      *unint64_t v11 = v14;
      v11 += 2;
      v12 += 2;
      v13 -= 4;
    }
    while (v13);
    v6 += v10 & 0x3FFFFFFFFFFFFFFCLL;
    if (v10 != v9)
    {
LABEL_11:
      uint64_t v15 = (void *)v8 + v9;
      do
      {
        uint64_t v16 = *v6++;
        *v15++ = v16;
      }
      while (v6 != v5);
    }
  }
LABEL_13:
  if (*a2 == a2[1])
  {
    sub_19E2C0F30(a3, (uint64_t)&v40, 0, (uint64_t)&v33);
    double v17 = v33;
    if (v36)
    {
      uint64_t v31 = __p;
      if (__p)
      {
        unint64_t v35 = __p;
        goto LABEL_31;
      }
    }
  }
  else
  {
    LOBYTE(v37[0]) = 0;
    char v39 = 0;
    sub_19E2C0F30(a3, (uint64_t)&v40, 1, (uint64_t)&v33);
    double v17 = v33;
    sub_19E2A7CB8((uint64_t)v37, (uint64_t)&__p);
    if (v36 && __p)
    {
      unint64_t v35 = __p;
      operator delete(__p);
    }
    uint64_t v18 = v38;
    if (v38)
    {
      unint64_t v19 = 0;
      uint64_t v20 = v37[0];
      uint64_t v21 = *a2;
      if (v38 < 4) {
        goto LABEL_23;
      }
      if ((unint64_t)(v21 - v37[0]) < 0x20) {
        goto LABEL_23;
      }
      unint64_t v19 = v38 & 0xFFFFFFFFFFFFFFFCLL;
      int64_t v22 = (long long *)(v37[0] + 16);
      int v23 = (_OWORD *)(v21 + 16);
      unint64_t v24 = v19;
      do
      {
        long long v25 = *v22;
        *(v23 - 1) = *(v22 - 1);
        _OWORD *v23 = v25;
        v22 += 2;
        v23 += 2;
        v24 -= 4;
      }
      while (v24);
      if (v19 != v18)
      {
LABEL_23:
        uint64_t v26 = v18 - v19;
        uint64_t v27 = 8 * v19;
        int v28 = (void *)(v21 + 8 * v19);
        int32x2_t v29 = (uint64_t *)(v20 + v27);
        do
        {
          uint64_t v30 = *v29++;
          *v28++ = v30;
          --v26;
        }
        while (v26);
      }
    }
    if (v39)
    {
      uint64_t v31 = (void *)v37[0];
      if (v37[0])
      {
        v37[1] = v37[0];
LABEL_31:
        operator delete(v31);
      }
    }
  }
  if (v40)
  {
    uint64_t v41 = (char *)v40;
    operator delete(v40);
  }
  return v17;
}

void sub_19E2C0EB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,void *__p,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2C0F14(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E13A9BC(a1);
}

void *sub_19E2C0F30@<X0>(int **a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  sub_19E2C20D4((uint64_t)&v31, *a1);
  if (v35 != (void *)a2) {
    sub_19E1E5B9C(v35, *(char **)a2, *(char **)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  }
  int v36 = *(_DWORD *)(a2 + 24);
  unint64_t v7 = *(char **)a2;
  long double v33 = exp(*(double *)v7 + *(double *)v7);
  unint64_t v8 = v32;
  if (v32)
  {
    uint64_t v9 = v34;
    if (v32 < 4 || (unint64_t)(v34 - v7 - 8) < 0x10)
    {
      unint64_t v10 = 0;
LABEL_7:
      unint64_t v11 = (double *)&v7[8 * v10 + 8];
      long long v12 = (long double *)&v9[8 * v10];
      unint64_t v13 = v8 - v10;
      do
      {
        long double v14 = *v11++;
        *v12++ = exp(v14);
        --v13;
      }
      while (v13);
      goto LABEL_9;
    }
    unint64_t v10 = v32 & 0xFFFFFFFFFFFFFFFELL;
    int64_t v22 = (long long *)(v7 + 8);
    unint64_t v23 = v32 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v34;
    do
    {
      long long v25 = *v22++;
      long double v27 = exp(*((long double *)&v25 + 1));
      *(double *)&long long v26 = exp(*(long double *)&v25);
      *((long double *)&v26 + 1) = v27;
      *(_OWORD *)unint64_t v24 = v26;
      v24 += 16;
      v23 -= 2;
    }
    while (v23);
    if (v8 != v10) {
      goto LABEL_7;
    }
  }
LABEL_9:
  sub_19E2BF20C((uint64_t)&v31, 0, a3);
  double v15 = sub_19E2C11AC((uint64_t)&v31);
  double v16 = v15;
  if (a3)
  {
    sub_19E2C13DC((uint64_t)&v31, (uint64_t)&v28);
    *(void *)(a4 + 8) = 0;
    *(double *)a4 = v16;
    *(void *)(a4 + 16) = 0;
    *(void *)(a4 + 24) = 0;
    double v17 = v28;
    int64_t v18 = v29 - v28;
    if (v29 != v28)
    {
      if (v18 < 0) {
        sub_19E13D694();
      }
      unint64_t v19 = (char *)operator new(v29 - v28);
      *(void *)(a4 + 8) = v19;
      uint64_t v20 = &v19[8 * (v18 >> 3)];
      *(void *)(a4 + 24) = v20;
      memcpy(v19, v17, v18);
      *(void *)(a4 + 16) = v20;
    }
    *(_DWORD *)(a4 + 32) = v30;
    *(unsigned char *)(a4 + 40) = 1;
    if (v17)
    {
      int32x2_t v29 = v17;
      operator delete(v17);
    }
  }
  else
  {
    *(double *)a4 = v15;
    *(unsigned char *)(a4 + 8) = 0;
    *(unsigned char *)(a4 + 40) = 0;
  }
  return sub_19E2BEE60(&v31);
}

void sub_19E2C1124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_19E2BEE60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19E2C1138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v21 = *v19;
  if (*v19)
  {
    *(void *)(v18 + 16) = v21;
    operator delete(v21);
    int64_t v22 = __p;
    if (!__p)
    {
LABEL_3:
      sub_19E2BEE60(&a18);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    int64_t v22 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  operator delete(v22);
  sub_19E2BEE60(&a18);
  _Unwind_Resume(a1);
}

void sub_19E2C1184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_19E2BEE60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19E2C1198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_19E2BEE60((uint64_t *)va);
  _Unwind_Resume(a1);
}

double sub_19E2C11AC(uint64_t a1)
{
  sub_19E2BFEDC(a1, (uint64_t)&__A);
  __C[0] = 0;
  vDSP_dotprD(__A, 1, *(const double **)(a1 + 256), 1, (double *)__C, (int)__N);
  uint64_t v2 = __C[0];
  if (__A)
  {
    double v17 = __A;
    operator delete(__A);
  }
  uint64_t v3 = *(int *)(a1 + 220);
  if ((int)v3 >= *(_DWORD *)(a1 + 216)) {
    int v4 = *(_DWORD *)(a1 + 216);
  }
  else {
    int v4 = *(_DWORD *)(a1 + 220);
  }
  __A = 0;
  double v17 = 0;
  uint64_t v18 = 0;
  if (v4)
  {
    if (v4 < 0) {
      sub_19E13D694();
    }
    int v5 = operator new(8 * v4);
    bzero(v5, 8 * v4);
    uint64_t v6 = 0;
    unint64_t v7 = *(void **)(a1 + 192);
    do
    {
      *((void *)v5 + v6++) = *v7;
      v7 += v3 + 1;
    }
    while (v4 != v6);
    __p = operator new(8 * v4);
    unint64_t v11 = (char *)__p + 8 * v4;
    long long v12 = v11;
    int v13 = v4;
    memcpy(__p, v5, 8 * v4);
  }
  else
  {
    int v5 = 0;
    unint64_t v11 = 0;
    long long v12 = 0;
    __p = 0;
    int v13 = 0;
  }
  sub_19E2A7AC4((uint64_t)&__p, (uint64_t)__C);
  __A = 0;
  vDSP_sveD((const double *)__C[0], 1, (double *)&__A, (int)v15);
  unint64_t v8 = __A;
  if (__C[0])
  {
    __C[1] = __C[0];
    operator delete(__C[0]);
  }
  if (__p)
  {
    unint64_t v11 = (char *)__p;
    operator delete(__p);
  }
  if (v5) {
    operator delete(v5);
  }
  return (double)*(int *)(a1 + 120) * -0.918938533 - (*(double *)&v8 - *(double *)&v2 * -0.5);
}

void sub_19E2C1354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v20 = a9;
    if (!a9)
    {
LABEL_3:
      if (!v18) {
LABEL_8:
      }
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(v18);
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v20 = a9;
    if (!a9) {
      goto LABEL_3;
    }
  }
  operator delete(v20);
  if (!v18) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void sub_19E2C13C0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E13A9BC(a1);
}

void sub_19E2C13DC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  CFTypeRef v121 = 0;
  uint64_t v122 = 0;
  int v123 = 0;
  uint64_t v3 = *(unsigned char **)(a1 + 224);
  uint64_t v2 = *(unsigned char **)(a1 + 232);
  int64_t v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0) {
      sub_19E13D694();
    }
    int v5 = (double *)operator new(v2 - v3);
    uint64_t v6 = &v5[v4 >> 3];
    CFTypeRef v121 = v5;
    int v123 = v6;
    memcpy(v5, v3, v4);
    uint64_t v122 = v6;
  }
  unint64_t v7 = *(unsigned char **)(a1 + 256);
  unint64_t v124 = *(void *)(a1 + 248);
  unint64_t v106 = 0;
  long long v107 = 0;
  uint64_t v105 = 0;
  unint64_t v8 = *(unsigned char **)(a1 + 264);
  int64_t v9 = v8 - v7;
  if (v8 != v7)
  {
    if (v9 < 0) {
      sub_19E13D694();
    }
    unint64_t v10 = (char *)operator new(v8 - v7);
    unint64_t v11 = &v10[8 * (v9 >> 3)];
    uint64_t v105 = v10;
    long long v107 = v11;
    memcpy(v10, v7, v9);
    unint64_t v106 = v11;
  }
  int v108 = *(_DWORD *)(a1 + 280);
  sub_19E29FAE8(a1 + 256, (uint64_t)&v101);
  sub_19E2A7BA8((uint64_t)&v105, (uint64_t)&v101, (uint64_t)&__p);
  unint64_t v113 = 0;
  char v114 = 0;
  uint64_t v115 = 0;
  long long v12 = __p;
  int64_t v13 = v110 - (unsigned char *)__p;
  if (v110 == __p)
  {
    vDSP_Length v15 = 0;
    long double v14 = 0;
  }
  else
  {
    if (v13 < 0) {
      sub_19E13D694();
    }
    long double v14 = (char *)operator new(v110 - (unsigned char *)__p);
    vDSP_Length v15 = &v14[8 * (v13 >> 3)];
    unint64_t v113 = v14;
    uint64_t v115 = v15;
    memcpy(v14, v12, v13);
    char v114 = v15;
  }
  unint64_t v16 = v112;
  unint64_t v116 = v112;
  unint64_t v17 = HIDWORD(v112);
  vDSP_Length v18 = HIDWORD(v112) * (int)v112;
  vDSP_vsubD(v121, 1, (const double *)v14, 1, (double *)v14, 1, v18);
  uint64_t v117 = 0;
  int v118 = 0;
  long long v119 = 0;
  int64_t v19 = v15 - v14;
  if (!v19)
  {
    uint64_t v20 = 0;
    unint64_t v120 = v16;
    int64_t v126 = 0;
    unint64_t v127 = 0;
    uint64_t v125 = 0;
    if (v18) {
      goto LABEL_14;
    }
LABEL_18:
    int64_t v22 = 0;
    uint64_t v21 = 0;
    unint64_t v128 = __PAIR64__(v17, v16);
    goto LABEL_23;
  }
  if (v19 < 0) {
    sub_19E13D694();
  }
  uint64_t v20 = (char *)operator new(v19);
  uint64_t v117 = v20;
  long long v119 = &v20[8 * (v19 >> 3)];
  memcpy(v20, v14, v19);
  int v118 = &v20[8 * (v19 >> 3)];
  unint64_t v120 = v16;
  int64_t v126 = 0;
  unint64_t v127 = 0;
  uint64_t v125 = 0;
  if (!v18) {
    goto LABEL_18;
  }
LABEL_14:
  if ((v18 & 0x80000000) != 0) {
    sub_19E13D694();
  }
  uint64_t v21 = (char *)operator new(8 * v18);
  uint64_t v125 = v21;
  unint64_t v127 = &v21[8 * v18];
  bzero(v21, 8 * v18);
  int64_t v22 = &v21[8 * v18];
  unint64_t v128 = __PAIR64__(v17, v16);
  if (v18 < 4)
  {
    for (unint64_t i = 0; i != v18; ++i)
LABEL_22:
      *(void *)&v21[8 * i] = *(void *)&v20[8 * i];
    goto LABEL_23;
  }
  uint64_t v24 = 0;
  unint64_t i = v18 & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v25 = v18 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    long long v26 = *(_OWORD *)&v20[v24 + 16];
    long double v27 = &v21[v24];
    *(_OWORD *)long double v27 = *(_OWORD *)&v20[v24];
    *((_OWORD *)v27 + 1) = v26;
    v24 += 32;
    v25 -= 4;
  }
  while (v25);
  if (i != v18) {
    goto LABEL_22;
  }
LABEL_23:
  sub_19E1E5B9C(&v121, v21, v22, (v22 - v21) >> 3);
  unint64_t v124 = v128;
  if (v21)
  {
    int64_t v126 = v21;
    operator delete(v21);
  }
  if (v20)
  {
    int v118 = v20;
    operator delete(v20);
  }
  if (v14)
  {
    char v114 = v14;
    operator delete(v14);
  }
  if (__p)
  {
    unsigned int v110 = __p;
    operator delete(__p);
  }
  if (v101)
  {
    unint64_t v102 = (char *)v101;
    operator delete(v101);
  }
  if (v105)
  {
    unint64_t v106 = v105;
    operator delete(v105);
  }
  int v28 = *(_DWORD *)(a1 + 8);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  vDSP_Length v98 = v28 + 1;
  if (v28 == -1)
  {
    *(_DWORD *)(a2 + 24) = 0;
    uint64_t v96 = *(int *)(a1 + 120);
    if (!v96) {
      goto LABEL_125;
    }
    goto LABEL_40;
  }
  if (v28 <= -2) {
    sub_19E13D694();
  }
  int32x2_t v29 = (char *)operator new(8 * v98);
  *(void *)a2 = v29;
  *(void *)(a2 + 8) = &v29[8 * v98];
  *(void *)(a2 + 16) = &v29[8 * v28 + 8];
  *(_DWORD *)(a2 + 24) = v28 + 1;
  bzero(v29, 8 * v98);
  uint64_t v96 = *(int *)(a1 + 120);
  if (v96)
  {
LABEL_40:
    uint64_t v97 = 0;
    for (unint64_t j = 0; j != v96; ++j)
    {
      uint64_t v31 = 0;
      unint64_t v32 = 0;
      do
      {
        uint64_t v33 = *(void *)(a1 + 96);
        uint64_t v34 = *(unsigned int *)(a1 + 124);
        uint64_t v125 = 0;
        int64_t v126 = 0;
        unint64_t v127 = 0;
        if (!v34)
        {
          unint64_t v35 = 0;
          unsigned int v110 = 0;
          char v111 = 0;
          __p = 0;
          LODWORD(v112) = 0;
LABEL_72:
          uint64_t v52 = 0;
          unint64_t v102 = 0;
          uint64_t v103 = 0;
          uint64_t v101 = 0;
          int v104 = 0;
          goto LABEL_76;
        }
        if ((v34 & 0x80000000) != 0) {
          sub_19E13D694();
        }
        unint64_t v35 = operator new(8 * (int)v34);
        bzero(v35, 8 * (int)v34);
        if (v34 < 8 || (unint64_t)v35 - v33 - 8 * j * (int)v34 < 0x20)
        {
          unint64_t v36 = 0;
LABEL_49:
          unint64_t v37 = (int)v34 - v36;
          uint64_t v38 = 8 * v36;
          char v39 = (void *)v35 + v36;
          long long v40 = (uint64_t *)(v33 + v38 + v97 * (int)v34);
          do
          {
            uint64_t v41 = *v40++;
            *v39++ = v41;
            --v37;
          }
          while (v37);
          goto LABEL_51;
        }
        unint64_t v36 = (int)v34 & 0xFFFFFFFFFFFFFFFCLL;
        uint64_t v88 = (long long *)(v33 + v97 * (int)v34 + 16);
        size_t v89 = v35 + 1;
        unint64_t v90 = v36;
        do
        {
          long long v91 = *v88;
          *(v89 - 1) = *(v88 - 1);
          *size_t v89 = v91;
          v88 += 2;
          v89 += 2;
          v90 -= 4;
        }
        while (v90);
        if (v36 != (int)v34) {
          goto LABEL_49;
        }
LABEL_51:
        __p = 0;
        unsigned int v110 = 0;
        char v111 = 0;
        LODWORD(v112) = v34;
        uint64_t v42 = operator new(8 * (int)v34);
        bzero(v42, 8 * (int)v34);
        __p = v42;
        unsigned int v110 = (char *)v42 + 8 * (int)v34;
        char v111 = v110;
        if ((v34 - 6) >= 0x7FFFFFFB)
        {
          uint64_t v43 = 0;
LABEL_58:
          uint64_t v48 = v34 - v43;
          uint64_t v49 = v43 << 32;
          do
          {
            *(void *)((char *)v42 + (v49 >> 29)) = *(void *)((char *)v35 + (v49 >> 29));
            v49 += 0x100000000;
            --v48;
          }
          while (v48);
          goto LABEL_60;
        }
        uint64_t v43 = v34 & 0xFFFFFFFC;
        int64_t v44 = v42 + 1;
        uint64_t v45 = v35 + 1;
        uint64_t v46 = v43;
        do
        {
          long long v47 = *v45;
          *(v44 - 1) = *(v45 - 1);
          _OWORD *v44 = v47;
          v44 += 2;
          v45 += 2;
          v46 -= 4;
        }
        while (v46);
        if (v43 != v34) {
          goto LABEL_58;
        }
LABEL_60:
        uint64_t v50 = *(void *)(a1 + 96);
        uint64_t v51 = *(unsigned int *)(a1 + 124);
        uint64_t v125 = 0;
        int64_t v126 = 0;
        unint64_t v127 = 0;
        if (!v51) {
          goto LABEL_72;
        }
        if ((v51 & 0x80000000) != 0) {
          sub_19E13D694();
        }
        uint64_t v52 = operator new(8 * (int)v51);
        bzero(v52, 8 * (int)v51);
        if (v51 < 8 || (unint64_t)v52 - v50 - 8 * v32 * (int)v51 < 0x20)
        {
          unint64_t v53 = 0;
LABEL_65:
          unint64_t v54 = (int)v51 - v53;
          uint64_t v55 = 8 * v53;
          signed int v56 = (void *)v52 + v53;
          double v57 = (uint64_t *)(v50 + v55 + v31 * (int)v51);
          do
          {
            uint64_t v58 = *v57++;
            *v56++ = v58;
            --v54;
          }
          while (v54);
          goto LABEL_67;
        }
        unint64_t v53 = (int)v51 & 0xFFFFFFFFFFFFFFFCLL;
        v92 = (long long *)(v50 + v31 * (int)v51 + 16);
        unint64_t v93 = v52 + 1;
        unint64_t v94 = v53;
        do
        {
          long long v95 = *v92;
          *(v93 - 1) = *(v92 - 1);
          _OWORD *v93 = v95;
          v92 += 2;
          v93 += 2;
          v94 -= 4;
        }
        while (v94);
        if (v53 != (int)v51) {
          goto LABEL_65;
        }
LABEL_67:
        uint64_t v101 = 0;
        unint64_t v102 = 0;
        uint64_t v103 = 0;
        int v104 = v51;
        unint64_t v59 = (char *)operator new(8 * (int)v51);
        bzero(v59, 8 * (int)v51);
        uint64_t v101 = v59;
        unint64_t v102 = &v59[8 * (int)v51];
        uint64_t v103 = v102;
        if ((v51 - 6) >= 0x7FFFFFFB)
        {
          uint64_t v61 = 0;
LABEL_74:
          uint64_t v64 = v51 - v61;
          uint64_t v65 = v61 << 32;
          do
          {
            *(void *)&v59[v65 >> 29] = *(void *)((char *)v52 + (v65 >> 29));
            v65 += 0x100000000;
            --v64;
          }
          while (v64);
          goto LABEL_76;
        }
        unint64_t v60 = 0;
        uint64_t v61 = v51 & 0xFFFFFFFC;
        do
        {
          long long v62 = v52[v60 / 0x10 + 1];
          signed int v63 = &v59[v60];
          *(_OWORD *)signed int v63 = v52[v60 / 0x10];
          *((_OWORD *)v63 + 1) = v62;
          v60 += 32;
        }
        while (((8 * v51) & 0x7FFFFFFE0) != v60);
        if (v61 != v51) {
          goto LABEL_74;
        }
LABEL_76:
        sub_19E2C260C(a1 + 8, (uint64_t)&__p, (const double **)&v101, (uint64_t)&v117);
        if (v101)
        {
          unint64_t v102 = (char *)v101;
          operator delete(v101);
        }
        if (v52) {
          operator delete(v52);
        }
        if (__p)
        {
          unsigned int v110 = __p;
          operator delete(__p);
        }
        if (v35) {
          operator delete(v35);
        }
        if (j == v32)
        {
          uint64_t v66 = SHIDWORD(v124);
          unint64_t v67 = v121;
          unint64_t v68 = v117;
          int64_t v69 = v118 - v117;
          if (v118 == v117)
          {
            uint64_t v71 = 0;
            unint64_t v70 = 0;
          }
          else
          {
            if (v69 < 0) {
              sub_19E13D694();
            }
            unint64_t v70 = (char *)operator new(v118 - v117);
            uint64_t v71 = &v70[8 * (v69 >> 3)];
            memcpy(v70, v68, v69);
          }
          uint64_t v77 = &v67[j + j * v66];
          int v78 = v120;
          vDSP_vsmulD((const double *)v70, 1, v77, (double *)v70, 1, (int)v120);
          int64_t v79 = v71 - v70;
          if (v79)
          {
            if (v79 < 0) {
              sub_19E13D694();
            }
            uint64_t v80 = (char *)operator new(v79);
            uint64_t v81 = &v80[8 * (v79 >> 3)];
            memcpy(v80, v70, v79);
          }
          else
          {
            uint64_t v81 = 0;
            uint64_t v80 = 0;
          }
          __p = (void *)0x3FE0000000000000;
          vDSP_vsmulD((const double *)v80, 1, (const double *)&__p, (double *)v80, 1, v78);
          uint64_t v125 = 0;
          int64_t v126 = 0;
          unint64_t v127 = 0;
          int64_t v86 = v81 - v80;
          if (v81 == v80)
          {
            unint64_t v87 = 0;
          }
          else
          {
            if (v86 < 0) {
              sub_19E13D694();
            }
            unint64_t v87 = (char *)operator new(v81 - v80);
            uint64_t v125 = v87;
            unint64_t v127 = &v87[8 * (v86 >> 3)];
            memcpy(v87, v80, v86);
            int64_t v126 = &v87[8 * (v86 >> 3)];
          }
          LODWORD(v128) = v78;
          vDSP_vaddD(*(const double **)a2, 1, (const double *)v87, 1, *(double **)a2, 1, v98);
          if (v87) {
            operator delete(v87);
          }
          if (v80) {
            operator delete(v80);
          }
          if (v70) {
            goto LABEL_114;
          }
        }
        else
        {
          uint64_t v72 = SHIDWORD(v124);
          uint64_t v73 = v121;
          uint64_t v74 = v117;
          int64_t v75 = v118 - v117;
          if (v118 == v117)
          {
            unint64_t v76 = 0;
            unint64_t v70 = 0;
          }
          else
          {
            if (v75 < 0) {
              sub_19E13D694();
            }
            unint64_t v70 = (char *)operator new(v118 - v117);
            unint64_t v76 = &v70[8 * (v75 >> 3)];
            memcpy(v70, v74, v75);
          }
          uint64_t v82 = &v73[v32 + j * v72];
          int v83 = v120;
          vDSP_vsmulD((const double *)v70, 1, v82, (double *)v70, 1, (int)v120);
          uint64_t v125 = 0;
          int64_t v126 = 0;
          unint64_t v127 = 0;
          uint64_t v84 = v76 - v70;
          if (v76 == v70)
          {
            unint64_t v85 = 0;
          }
          else
          {
            if (v84 < 0) {
              sub_19E13D694();
            }
            unint64_t v85 = (char *)operator new(v76 - v70);
            uint64_t v125 = v85;
            unint64_t v127 = &v85[8 * (v84 >> 3)];
            memcpy(v85, v70, v76 - v70);
            int64_t v126 = &v85[8 * (v84 >> 3)];
          }
          LODWORD(v128) = v83;
          vDSP_vaddD(*(const double **)a2, 1, (const double *)v85, 1, *(double **)a2, 1, v98);
          if (v85) {
            operator delete(v85);
          }
          if (v70) {
LABEL_114:
          }
            operator delete(v70);
        }
        if (v117)
        {
          int v118 = v117;
          operator delete(v117);
        }
        ++v32;
        v31 += 8;
      }
      while (v32 <= j);
      v97 += 8;
    }
  }
LABEL_125:
  if (v121)
  {
    uint64_t v122 = v121;
    operator delete(v121);
  }
}

void sub_19E2C1E2C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  vDSP_Length v15 = *(void **)a14;
  if (*(void *)a14)
  {
    *(void *)(a14 + 8) = v15;
    operator delete(v15);
  }
  sub_19E13A9BC(a1);
}

void sub_19E2C1E50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37)
{
  if (v39) {
    operator delete(v39);
  }
  if (v38)
  {
    *(void *)(v40 - 176) = v38;
    operator delete(v38);
  }
  if (v37)
  {
    *(void *)(v40 - 208) = v37;
    operator delete(v37);
  }
  if (__p)
  {
    operator delete(__p);
    uint64_t v42 = a28;
    if (!a28)
    {
LABEL_9:
      uint64_t v43 = a32;
      if (!a32)
      {
LABEL_14:
        int64_t v44 = *(void **)(v40 - 152);
        if (v44)
        {
          *(void *)(v40 - 144) = v44;
          operator delete(v44);
        }
        _Unwind_Resume(exception_object);
      }
LABEL_13:
      operator delete(v43);
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v42 = a28;
    if (!a28) {
      goto LABEL_9;
    }
  }
  operator delete(v42);
  uint64_t v43 = a32;
  if (!a32) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_19E2C2084(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37)
{
  if (__p)
  {
    operator delete(__p);
    if (!v38)
    {
LABEL_3:
      char v39 = a36;
      if (!a36) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if (!v38)
  {
    goto LABEL_3;
  }
  operator delete(v38);
  char v39 = a36;
  if (!a36)
  {
LABEL_4:
    if (v37) {
      goto LABEL_12;
    }
    goto LABEL_13;
  }
LABEL_8:
  operator delete(v39);
  if (v37) {
LABEL_12:
  }
    JUMPOUT(0x19E2C2030);
LABEL_13:
  JUMPOUT(0x19E2C2034);
}

uint64_t sub_19E2C20D4(uint64_t a1, int *a2)
{
  int v4 = *a2;
  *(unsigned char *)(a1 + 4) = *((unsigned char *)a2 + 4);
  *(_DWORD *)a1 = v4;
  sub_19E2C24E0(a1 + 8, (uint64_t)(a2 + 2));
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t v6 = (unsigned char *)*((void *)a2 + 12);
  int v5 = (unsigned char *)*((void *)a2 + 13);
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      sub_19E13D694();
    }
    unint64_t v8 = (char *)operator new(v5 - v6);
    *(void *)(a1 + 96) = v8;
    *(void *)(a1 + 104) = v8;
    int64_t v9 = &v8[8 * (v7 >> 3)];
    *(void *)(a1 + 112) = v9;
    memcpy(v8, v6, v7);
    *(void *)(a1 + 104) = v9;
  }
  uint64_t v10 = *((void *)a2 + 15);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 120) = v10;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  long long v12 = (unsigned char *)*((void *)a2 + 16);
  unint64_t v11 = (unsigned char *)*((void *)a2 + 17);
  int64_t v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0) {
      sub_19E13D694();
    }
    long double v14 = (char *)operator new(v11 - v12);
    *(void *)(a1 + 128) = v14;
    *(void *)(a1 + 136) = v14;
    vDSP_Length v15 = &v14[8 * (v13 >> 3)];
    *(void *)(a1 + 144) = v15;
    memcpy(v14, v12, v13);
    *(void *)(a1 + 136) = v15;
  }
  int v16 = a2[38];
  *(void *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 152) = v16;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  vDSP_Length v18 = (unsigned char *)*((void *)a2 + 20);
  unint64_t v17 = (unsigned char *)*((void *)a2 + 21);
  int64_t v19 = v17 - v18;
  if (v17 != v18)
  {
    if (v19 < 0) {
      sub_19E13D694();
    }
    uint64_t v20 = (char *)operator new(v17 - v18);
    *(void *)(a1 + 160) = v20;
    *(void *)(a1 + 168) = v20;
    uint64_t v21 = &v20[8 * (v19 >> 3)];
    *(void *)(a1 + 176) = v21;
    memcpy(v20, v18, v19);
    *(void *)(a1 + 168) = v21;
  }
  uint64_t v22 = *((void *)a2 + 23);
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 184) = v22;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  uint64_t v24 = (unsigned char *)*((void *)a2 + 24);
  unint64_t v23 = (unsigned char *)*((void *)a2 + 25);
  int64_t v25 = v23 - v24;
  if (v23 != v24)
  {
    if (v25 < 0) {
      sub_19E13D694();
    }
    long long v26 = (char *)operator new(v23 - v24);
    *(void *)(a1 + 192) = v26;
    *(void *)(a1 + 200) = v26;
    long double v27 = &v26[8 * (v25 >> 3)];
    *(void *)(a1 + 208) = v27;
    memcpy(v26, v24, v25);
    *(void *)(a1 + 200) = v27;
  }
  uint64_t v28 = *((void *)a2 + 27);
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 216) = v28;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  int v30 = (unsigned char *)*((void *)a2 + 28);
  int32x2_t v29 = (unsigned char *)*((void *)a2 + 29);
  int64_t v31 = v29 - v30;
  if (v29 != v30)
  {
    if (v31 < 0) {
      sub_19E13D694();
    }
    unint64_t v32 = (char *)operator new(v29 - v30);
    *(void *)(a1 + 224) = v32;
    *(void *)(a1 + 232) = v32;
    uint64_t v33 = &v32[8 * (v31 >> 3)];
    *(void *)(a1 + 240) = v33;
    memcpy(v32, v30, v31);
    *(void *)(a1 + 232) = v33;
  }
  *(void *)(a1 + 248) = *((void *)a2 + 31);
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  unint64_t v35 = (unsigned char *)*((void *)a2 + 32);
  uint64_t v34 = (unsigned char *)*((void *)a2 + 33);
  int64_t v36 = v34 - v35;
  if (v34 != v35)
  {
    if (v36 < 0) {
      sub_19E13D694();
    }
    uint64_t v37 = (char *)operator new(v34 - v35);
    *(void *)(a1 + 256) = v37;
    *(void *)(a1 + 264) = v37;
    uint64_t v38 = &v37[8 * (v36 >> 3)];
    *(void *)(a1 + 272) = v38;
    memcpy(v37, v35, v36);
    *(void *)(a1 + 264) = v38;
  }
  *(_DWORD *)(a1 + 280) = a2[70];
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 288) = 0;
  uint64_t v40 = (unsigned char *)*((void *)a2 + 36);
  char v39 = (unsigned char *)*((void *)a2 + 37);
  int64_t v41 = v39 - v40;
  if (v39 != v40)
  {
    if (v41 < 0) {
      sub_19E13D694();
    }
    uint64_t v42 = (char *)operator new(v39 - v40);
    *(void *)(a1 + 288) = v42;
    *(void *)(a1 + 296) = v42;
    uint64_t v43 = &v42[8 * (v41 >> 3)];
    *(void *)(a1 + 304) = v43;
    memcpy(v42, v40, v41);
    *(void *)(a1 + 296) = v43;
  }
  *(_DWORD *)(a1 + 312) = a2[78];
  return a1;
}

void sub_19E2C23B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void *a10)
{
  vDSP_Length v18 = *v16;
  if (*v16)
  {
    v10[37] = v18;
    operator delete(v18);
    int64_t v19 = *a9;
    if (!*a9)
    {
LABEL_3:
      uint64_t v20 = *v15;
      if (!*v15) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else
  {
    int64_t v19 = *a9;
    if (!*a9) {
      goto LABEL_3;
    }
  }
  v10[33] = v19;
  operator delete(v19);
  uint64_t v20 = *v15;
  if (!*v15)
  {
LABEL_4:
    uint64_t v21 = *v14;
    if (!*v14) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  v10[29] = v20;
  operator delete(v20);
  uint64_t v21 = *v14;
  if (!*v14)
  {
LABEL_5:
    uint64_t v22 = *v13;
    if (!*v13) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  v10[25] = v21;
  operator delete(v21);
  uint64_t v22 = *v13;
  if (!*v13)
  {
LABEL_6:
    unint64_t v23 = *v12;
    if (!*v12) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }
LABEL_13:
  v10[21] = v22;
  operator delete(v22);
  unint64_t v23 = *v12;
  if (!*v12)
  {
LABEL_7:
    uint64_t v24 = *v11;
    if (!*v11) {
      goto LABEL_8;
    }
    goto LABEL_15;
  }
LABEL_14:
  v10[17] = v23;
  operator delete(v23);
  uint64_t v24 = *v11;
  if (!*v11)
  {
LABEL_8:
    sub_19E2BADC4(a10);
    _Unwind_Resume(a1);
  }
LABEL_15:
  v10[13] = v24;
  operator delete(v24);
  sub_19E2BADC4(a10);
  _Unwind_Resume(a1);
}

uint64_t sub_19E2C24E0(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(unsigned char **)(a2 + 24);
  int v5 = *(unsigned char **)(a2 + 32);
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      sub_19E13D694();
    }
    unint64_t v8 = (char *)operator new(v5 - v6);
    *(void *)(a1 + 24) = v8;
    *(void *)(a1 + 32) = v8;
    int64_t v9 = &v8[8 * (v7 >> 3)];
    *(void *)(a1 + 40) = v9;
    memcpy(v8, v6, v7);
    *(void *)(a1 + 32) = v9;
  }
  int v10 = *(_DWORD *)(a2 + 48);
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 48) = v10;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  long long v12 = *(unsigned char **)(a2 + 56);
  unint64_t v11 = *(unsigned char **)(a2 + 64);
  int64_t v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0) {
      sub_19E13D694();
    }
    long double v14 = (char *)operator new(v11 - v12);
    *(void *)(a1 + 56) = v14;
    *(void *)(a1 + 64) = v14;
    vDSP_Length v15 = &v14[8 * (v13 >> 3)];
    *(void *)(a1 + 72) = v15;
    memcpy(v14, v12, v13);
    *(void *)(a1 + 64) = v15;
  }
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  return a1;
}

void sub_19E2C25D8(_Unwind_Exception *exception_object)
{
  int v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 64) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2C260C(uint64_t a1@<X0>, uint64_t a2@<X1>, const double **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = 0;
  int64_t v9 = 0;
  int v10 = 0;
  int v11 = *(_DWORD *)a1;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = 0;
  *(_DWORD *)(a4 + 24) = 0;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  unint64_t v53 = 0;
  int v12 = v11 + 1;
  if (v11 != -1)
  {
    if (v11 <= -2) {
      sub_19E13D694();
    }
    int v10 = (double *)operator new(8 * v12);
    uint64_t v8 = (uint64_t)&v10[v11 + 1];
    bzero(v10, 8 * v12);
    int64_t v9 = &v10[v12];
  }
  *(void *)a4 = v10;
  *(void *)(a4 + 8) = v9;
  *(void *)(a4 + 16) = v8;
  *(_DWORD *)(a4 + 24) = v12;
  long double v14 = *(const void **)a2;
  uint64_t v13 = *(void *)(a2 + 8);
  int64_t v15 = v13 - *(void *)a2;
  if (v13 == *(void *)a2)
  {
    unint64_t v17 = 0;
    int v16 = 0;
  }
  else
  {
    if (v15 < 0) {
      sub_19E13D694();
    }
    int v16 = (char *)operator new(v13 - *(void *)a2);
    unint64_t v17 = &v16[8 * (v15 >> 3)];
    memcpy(v16, v14, v15);
  }
  int v18 = *(_DWORD *)(a2 + 24);
  vDSP_vsubD(*a3, 1, (const double *)v16, 1, (double *)v16, 1, v18);
  int64_t v19 = v17 - v16;
  if (v17 == v16)
  {
    uint64_t v21 = 0;
    uint64_t v20 = 0;
  }
  else
  {
    if (v19 < 0) {
      sub_19E13D694();
    }
    uint64_t v20 = (char *)operator new(v17 - v16);
    uint64_t v21 = &v20[8 * (v19 >> 3)];
    memcpy(v20, v16, v19);
  }
  vDSP_vdivD(*(const double **)(a1 + 24), 1, (const double *)v20, 1, (double *)v20, 1, v18);
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  long long v47 = 0;
  uint64_t v22 = v21 - v20;
  if (v21 != v20)
  {
    if (v22 < 0) {
      sub_19E13D694();
    }
    unint64_t v23 = (char *)operator new(v21 - v20);
    uint64_t v24 = &v23[8 * (v22 >> 3)];
    uint64_t v45 = v23;
    long long v47 = v24;
    memcpy(v23, v20, v21 - v20);
    uint64_t v46 = v24;
  }
  int v48 = v18;
  sub_19E2C2AC8((uint64_t)&v45, (uint64_t)__p);
  signed int v25 = v50;
  uint64_t v52 = 0;
  unint64_t v53 = 0;
  uint64_t v51 = 0;
  if (v50)
  {
    if (v50 < 0) {
      sub_19E13D694();
    }
    long long v26 = (float64x2_t *)operator new(8 * v50);
    uint64_t v51 = v26;
    unint64_t v53 = (char *)&v26->f64[v25];
    bzero(v26, 8 * v25);
    unint64_t v27 = 0;
    uint64_t v52 = (float64x2_t *)((char *)v26 + 8 * v25);
    LODWORD(__N) = v25;
    uint64_t v28 = __p[0];
    if (v25 < 4) {
      goto LABEL_52;
    }
    if ((unint64_t)((char *)v26 - (char *)__p[0]) < 0x20) {
      goto LABEL_52;
    }
    unint64_t v29 = 0;
    unint64_t v27 = v25 & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v30 = v27;
    do
    {
      long long v31 = *(_OWORD *)&v28[v29 / 8 + 2];
      f64 = (_OWORD *)v26[v29 / 0x10].f64;
      _OWORD *f64 = *(_OWORD *)&v28[v29 / 8];
      f64[1] = v31;
      v29 += 32;
      v30 -= 4;
    }
    while (v30);
    if (v27 != v25)
    {
LABEL_52:
      do
      {
        *(void *)&v26->f64[v27] = v28[v27];
        ++v27;
      }
      while (v25 != v27);
    }
  }
  else
  {
    long long v26 = 0;
    LODWORD(__N) = 0;
    uint64_t v28 = __p[0];
    if (!__p[0]) {
      goto LABEL_26;
    }
  }
  __p[1] = v28;
  operator delete(v28);
LABEL_26:
  if (v45)
  {
    uint64_t v46 = v45;
    operator delete(v45);
  }
  if (v20) {
    operator delete(v20);
  }
  if (v16) {
    operator delete(v16);
  }
  double v33 = *(double *)(a1 + 16);
  __p[0] = 0;
  vDSP_sveD(v26->f64, 1, (double *)__p, (int)__N);
  double v34 = exp(*(double *)__p * -0.5) * v33;
  double *v10 = v34 + v34;
  unint64_t v35 = *(void *)a1;
  if (*(void *)a1)
  {
    if (v35 >= 4 && (unint64_t)((char *)v10 - (char *)v26 + 8) >= 0x20)
    {
      unint64_t v36 = v35 & 0xFFFFFFFFFFFFFFFCLL;
      int64_t v41 = (float64x2_t *)(v10 + 3);
      uint64_t v42 = v26 + 1;
      unint64_t v43 = v35 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        float64x2_t v44 = vmulq_n_f64(*v42, v34);
        v41[-1] = vmulq_n_f64(v42[-1], v34);
        *int64_t v41 = v44;
        v41 += 2;
        v42 += 2;
        v43 -= 4;
      }
      while (v43);
      if (v35 == v36) {
        goto LABEL_44;
      }
    }
    else
    {
      unint64_t v36 = 0;
    }
    uint64_t v37 = &v10[v36 + 1];
    uint64_t v38 = &v26->f64[v36];
    unint64_t v39 = v35 - v36;
    do
    {
      double v40 = *v38++;
      *v37++ = v40 * v34;
      --v39;
    }
    while (v39);
LABEL_44:
    uint64_t v52 = v26;
    operator delete(v26);
    return;
  }
  if (v26) {
    goto LABEL_44;
  }
}

void sub_19E2C2A10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  if (v28) {
    operator delete(v28);
  }
  if (v26)
  {
    *(void *)(v27 + 8) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2C2AB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a9) {
    JUMPOUT(0x19E2C2AA0);
  }
  JUMPOUT(0x19E2C2A94);
}

void sub_19E2C2AC8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = *(_DWORD *)(a1 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  if (v4)
  {
    if (v4 < 0) {
      sub_19E13D694();
    }
    int v5 = (char *)operator new(8 * v4);
    *(void *)a2 = v5;
    *(void *)(a2 + 16) = &v5[8 * v4];
    bzero(v5, 8 * v4);
    *(void *)(a2 + 8) = &v5[8 * v4];
  }
  else
  {
    int v5 = 0;
  }
  *(_DWORD *)(a2 + 24) = v4;
  vDSP_vsqD(*(const double **)a1, 1, (double *)v5, 1, v4);
}

void sub_19E2C2B70(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2C2B8C(void *a1)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  sub_19E13A9BC(a1);
}

BOOL sub_19E2C2BA8(uint64_t a1, int *a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Early stopping already requested.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v3 = *(_DWORD *)(a1 + 12);
  if (v3 == -1) {
    return 0;
  }
  int v6 = *a2;
  uint64_t v5 = (uint64_t)(a2 + 2);
  if (v6 == 1 || *(double *)(a1 + 120) < *((double *)a2 + 13) - *(double *)(a1 + 16))
  {
    sub_19E29AB9C(a1 + 24, v5);
    *(void *)(a1 + 120) = *((void *)a2 + 13);
    *(_DWORD *)(a1 + 128) = 0;
    *(unsigned char *)(a1 + 8) = 0;
    return 0;
  }
  else
  {
    int v8 = *(_DWORD *)(a1 + 128);
    *(_DWORD *)(a1 + 128) = v8 + 1;
    BOOL v9 = v8 >= v3;
    *(unsigned char *)(a1 + 8) = v9;
    return v9;
  }
}

void sub_19E2C2C9C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char **sub_19E2C2CB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5 = *(_DWORD *)(a1 + 56);
  int v6 = *(_DWORD *)(a1 + 60);
  uint64_t v7 = *(void *)(a1 + 64);
  char v30 = 0;
  unint64_t v29 = (char *)&unk_1EF0A86A8;
  int v31 = v5;
  v21[0] = 0;
  *(_DWORD *)uint64_t v22 = v6;
  *(void *)&v22[4] = v7;
  memset(v23, 0, sizeof(v23));
  uint64_t v24 = v25;
  v25[0] = 0;
  double v26 = 0.0;
  v27[0] = 0;
  v25[1] = 0;
  v25[2] = &v26;
  int v28 = 0;
  char v33 = 0;
  unint64_t v32 = (uint64_t (**)(void **, void **))&unk_1EF0A86A8;
  int v34 = v5;
  char v36 = 0;
  unint64_t v35 = (uint64_t (**)(void **, void **))&unk_1EF0A8708;
  int v38 = HIDWORD(v7);
  uint64_t v37 = *(void *)v22;
  sub_19E2965D0(v39, (uint64_t)v23);
  v39[12] = (uint64_t *)v27[1];
  int v40 = v28;
  uint64_t v20 = &unk_1EF0A8708;
  sub_19E2470C8((char **)v23);
  int v8 = *(_DWORD *)(a1 + 72);
  (*(void (**)(char **__return_ptr))(**(void **)(a1 + 120) + 16))(&v29);
  uint64_t v9 = *(void *)(a2 + 24);
  if (!v9) {
    goto LABEL_16;
  }
  double v10 = (*(double (**)(uint64_t, char **))(*(void *)v9 + 48))(v9, &v29);
  (*(void (**)(void, char **))(**(void **)(a1 + 120) + 24))(*(void *)(a1 + 120), &v29);
  std::chrono::steady_clock::now();
  LODWORD(v20) = 1;
  sub_19E291E68((uint64_t **)v21, (uint64_t *)&v29);
  double v26 = v10;
  sub_19E2A7DDC(*(void *)(a1 + 120), (uint64_t)v27);
  if (1 % v8) {
    goto LABEL_5;
  }
  uint64_t v11 = *(void *)(a2 + 56);
  if (!v11) {
LABEL_17:
  }
    sub_19E2A8074();
  if (((*(uint64_t (**)(uint64_t, void **))(*(void *)v11 + 48))(v11, &v20) & 1) == 0)
  {
LABEL_5:
    if (((*v32)((void **)&v32, &v20) & 1) == 0)
    {
      char v12 = (*v35)((void **)&v35, &v20);
      sub_19E2470C8(v27);
      sub_19E2470C8((char **)v21);
      sub_19E2470C8(&v29);
      if (v12) {
        goto LABEL_15;
      }
      int v13 = 2;
      while (1)
      {
        (*(void (**)(char **__return_ptr))(**(void **)(a1 + 120) + 16))(&v29);
        uint64_t v14 = *(void *)(a2 + 24);
        if (!v14) {
          break;
        }
        double v15 = (*(double (**)(uint64_t, char **))(*(void *)v14 + 48))(v14, &v29);
        (*(void (**)(void, char **))(**(void **)(a1 + 120) + 24))(*(void *)(a1 + 120), &v29);
        std::chrono::steady_clock::now();
        std::chrono::steady_clock::now();
        LODWORD(v20) = v13;
        sub_19E291E68((uint64_t **)v21, (uint64_t *)&v29);
        double v26 = v15;
        sub_19E2A7DDC(*(void *)(a1 + 120), (uint64_t)v27);
        if (!(v13 % v8))
        {
          uint64_t v16 = *(void *)(a2 + 56);
          if (!v16) {
            goto LABEL_17;
          }
          if ((*(uint64_t (**)(uint64_t, void **))(*(void *)v16 + 48))(v16, &v20)) {
            goto LABEL_6;
          }
        }
        if ((*v32)((void **)&v32, &v20)) {
          goto LABEL_6;
        }
        char v17 = (*v35)((void **)&v35, &v20);
        sub_19E2470C8(v27);
        sub_19E2470C8((char **)v21);
        sub_19E2470C8(&v29);
        ++v13;
        if (v17) {
          goto LABEL_15;
        }
      }
LABEL_16:
      sub_19E2A8074();
    }
  }
LABEL_6:
  sub_19E2470C8(v27);
  sub_19E2470C8((char **)v21);
  sub_19E2470C8(&v29);
LABEL_15:
  sub_19E2A7DDC(*(void *)(a1 + 120), a3);
  unint64_t v35 = (uint64_t (**)(void **, void **))&unk_1EF0A8708;
  return sub_19E2470C8((char **)v39);
}

void sub_19E2C3160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char *a39)
{
  sub_19E2470C8(v41);
  sub_19E2470C8(v40);
  sub_19E2470C8(&a39);
  *(void *)(v42 - 240) = a11;
  sub_19E2470C8(v39);
  _Unwind_Resume(a1);
}

void sub_19E2C31E8(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 48);
  if (v1 != 1)
  {
    if (!v1) {
      sub_19E29849C();
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_19E298774(exception, "Invalid optimizer in user config.");
    __cxa_throw(exception, (struct type_info *)off_1E599CD18, MEMORY[0x1E4FBA1E8]);
  }
  sub_19E2C329C();
}

void sub_19E2C3288(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19E2C329C()
{
}

void sub_19E2C33D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E2934EC((uint64_t)va);
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_19E2C33F4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E2C3408(uint64_t a1, uint64_t *a2)
{
  sub_19E2933F8((uint64_t)&v15, (uint64_t)a2);
  *(void *)a1 = &unk_1EF0A8318;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  sub_19E2933F8(a1 + 32, (uint64_t)&v15);
  if (v21)
  {
    int v4 = (char **)__p;
    if (__p)
    {
      int v5 = v20;
      int v6 = __p;
      if (v20 != __p)
      {
        do
          int v5 = sub_19E2470C8(v5 - 12);
        while (v5 != v4);
        int v6 = __p;
      }
      uint64_t v20 = v4;
      operator delete(v6);
    }
  }
  uint64_t v7 = (void **)v17;
  if (v17)
  {
    int v8 = v18;
    uint64_t v9 = v17;
    if (v18 != v17)
    {
      do
      {
        if (*((char *)v8 - 17) < 0) {
          operator delete(*(v8 - 5));
        }
        v8 -= 5;
      }
      while (v8 != v7);
      uint64_t v9 = v17;
    }
    int v18 = v7;
    operator delete(v9);
  }
  double v10 = (void **)v15;
  if (v15)
  {
    uint64_t v11 = v16;
    char v12 = v15;
    if (v16 != v15)
    {
      do
      {
        if (*((char *)v11 - 25) < 0) {
          operator delete(*(v11 - 6));
        }
        v11 -= 6;
      }
      while (v11 != v10);
      char v12 = v15;
    }
    uint64_t v16 = v10;
    operator delete(v12);
  }
  *(void *)a1 = &unk_1EF0A8588;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  int v13 = sub_19E244298(a2);
  int v14 = sub_19E244DC4((uint64_t)a2);
  *(_DWORD *)(a1 + 176) = v14 + v13;
  sub_19E2C42D0(a1 + 184, v14 + v13);
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 472) = 0;
  *(_DWORD *)(a1 + 488) = 0;
  *(void *)(a1 + 480) = 0;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 316) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 444) = 0u;
  *(void *)(a1 + 528) = 0;
  *(void *)(a1 + 520) = 0;
  *(_DWORD *)(a1 + 544) = 0;
  *(void *)(a1 + 536) = 0;
  *(_DWORD *)(a1 + 560) = -1;
  *(void *)(a1 + 504) = &unk_1EF0A7E30;
  *(void *)(a1 + 512) = a1 + 176;
  *(void *)(a1 + 568) = 0;
  *(void *)(a1 + 584) = 0;
  sub_19E299010(a1 + 592);
  *(void *)(a1 + 10712) = 0;
  *(_OWORD *)(a1 + 10696) = 0u;
  if ((int)sub_19E244DC4(a1 + 32) >= 1) {
    sub_19E2C3B80();
  }
  sub_19E2C3D30();
}

void sub_19E2C3A70(_Unwind_Exception *a1)
{
  sub_19E2462FC(v6);
  sub_19E298A78(v5);
  int v8 = (void **)(v1 + 65);
  uint64_t v9 = v1[73];
  v1[73] = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  void *v4 = &unk_1EF0A7D18;
  double v10 = *v8;
  if (*v8)
  {
    v1[66] = v10;
    operator delete(v10);
  }
  sub_19E2BEE60(v3);
  sub_19E29AC3C(v2);
  sub_19E298AC8(v1);
  _Unwind_Resume(a1);
}

void sub_19E2C3B80()
{
}

void sub_19E2C3CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_19E245FE8(&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_19E2C3CF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
  {
    sub_19E32FAD8((uint64_t)&a9, a9);
    operator delete(v9);
    _Unwind_Resume(a1);
  }
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_19E2C3D30()
{
}

void sub_19E2C3E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_19E245FE8(&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_19E2C3EA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
  {
    sub_19E32FAD8((uint64_t)&a9, a9);
    operator delete(v9);
    _Unwind_Resume(a1);
  }
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_19E2C3EE4(uint64_t a1)
{
  int v1 = (void *)sub_19E2C8160(a1);

  operator delete(v1);
}

uint64_t **sub_19E2C3F0C@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X8>)
{
  uint64_t v4 = a1 + 8;
  unint64_t v5 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3);
  uint64_t v6 = a1 + 32;
  int v7 = sub_19E244298((uint64_t *)(a1 + 32));
  signed int v8 = 5 * (sub_19E244DC4(v6) + v7);
  if (*(unsigned char *)(v4 + 136) && v8 <= (int)(-1431655765 * ((*(void *)(a1 + 128) - *(void *)(a1 + 120)) >> 5))) {
    signed int v8 = -1431655765 * ((*(void *)(a1 + 128) - *(void *)(a1 + 120)) >> 5);
  }
  if (v5 >= v8)
  {
    (*(void (**)(char **__return_ptr))(**(void **)(a1 + 584) + 16))(v11);
    sub_19E291E68(a2, (uint64_t *)v11);
    return (uint64_t **)sub_19E2470C8(v11);
  }
  else
  {
    uint64_t v9 = (uint64_t *)(*(void *)(a1 + 10696)
                   + 96 * (int)(-991146299 * ((*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3)));
    return sub_19E291E68(a2, v9);
  }
}

void sub_19E2C4050(uint64_t a1, long long **a2, double a3)
{
  sub_19E29CE6C(a2, (uint64_t)&__p);
  double v6 = sub_19E2C65B0(a1 + 176, (const double **)&__p);
  double v8 = sqrt(v7);
  double v27 = v8;
  double v28 = v6;
  double v9 = v6 - (*(double *)(a1 + 552) + *(double *)(a1 + 568));
  double v10 = v9 / v8;
  long double v11 = erfc(v9 / v8 * -0.707106781) * (0.5 * v9);
  double v12 = v11 + v8 * 0.39894228 * exp(v10 * v10 * -0.5);
  double v26 = v12;
  unint64_t v13 = *(void *)(a1 + 160);
  if (v13 >= *(void *)(a1 + 168))
  {
    uint64_t v18 = sub_19E2A4064((uint64_t *)(a1 + 152), (uint64_t)&__p, &v28, (uint64_t *)&v27, (uint64_t *)&v26);
  }
  else
  {
    *(void *)unint64_t v13 = 0;
    *(void *)(v13 + 8) = 0;
    *(void *)(v13 + 16) = 0;
    int v14 = __p;
    int64_t v15 = v30 - (unsigned char *)__p;
    if (v30 != __p)
    {
      if (v15 < 0) {
        sub_19E13D694();
      }
      uint64_t v16 = (char *)operator new(v30 - (unsigned char *)__p);
      *(void *)unint64_t v13 = v16;
      *(void *)(v13 + 8) = v16;
      char v17 = &v16[8 * (v15 >> 3)];
      *(void *)(v13 + 16) = v17;
      memcpy(v16, v14, v15);
      *(void *)(v13 + 8) = v17;
    }
    *(_DWORD *)(v13 + 24) = v31;
    *(double *)(v13 + 32) = v6;
    *(double *)(v13 + 40) = v8;
    *(double *)(v13 + 48) = v12;
    uint64_t v18 = v13 + 56;
    *(void *)(a1 + 160) = v13 + 56;
  }
  *(void *)(a1 + 160) = v18;
  uint64_t v19 = *(int *)(a1 + 488);
  uint64_t v20 = v19 + 1;
  *(_DWORD *)(a1 + 488) = v19 + 1;
  uint64_t v21 = *(void *)(a1 + 464);
  unint64_t v22 = (*(void *)(a1 + 472) - v21) >> 3;
  if (v19 + 1 <= v22)
  {
    if (v19 + 1 < v22) {
      *(void *)(a1 + 472) = v21 + 8 * v19 + 8;
    }
  }
  else
  {
    sub_19E2482DC(a1 + 464, v19 + 1 - v22);
    uint64_t v20 = *(int *)(a1 + 488);
    uint64_t v21 = *(void *)(a1 + 464);
  }
  *(double *)(v21 + 8 * v20 - 8) = a3;
  sub_19E2C831C(a1 + 176, (uint64_t)&__p);
  sub_19E2C94F4(a1 + 496, a1 + 176);
  sub_19E2C4568(a1 + 504);
  sub_19E291E68(v32, (uint64_t *)a2);
  double v33 = a3;
  unint64_t v23 = *(uint64_t ***)(a1 + 16);
  if ((unint64_t)v23 >= *(void *)(a1 + 24))
  {
    signed int v25 = sub_19E299F04((uint64_t ***)(a1 + 8), (uint64_t *)v32);
  }
  else
  {
    uint64_t v24 = sub_19E291E68(v23, (uint64_t *)v32);
    *((double *)v24 + 12) = v33;
    signed int v25 = v24 + 13;
  }
  *(void *)(a1 + 16) = v25;
  sub_19E2470C8((char **)v32);
  if (__p)
  {
    char v30 = __p;
    operator delete(__p);
  }
}

void sub_19E2C4284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, char *a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_19E2C42D0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + 8) = xmmword_19E351FD0;
  *(void *)(a1 + 24) = 0;
  uint64_t v4 = a2 << 32;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  size_t v5 = 8 * (int)a2;
  if (a2)
  {
    if ((a2 & 0x80000000) != 0) {
      sub_19E13D694();
    }
    double v6 = (char *)operator new(8 * (int)a2);
    *(void *)(a1 + 24) = v6;
    *(void *)(a1 + 40) = &v6[8 * (int)a2];
    bzero(v6, v5);
    *(void *)(a1 + 32) = &v6[v5];
    *(_DWORD *)(a1 + 48) = a2;
    if (v4) {
      goto LABEL_4;
    }
  }
  else
  {
    double v6 = 0;
    *(_DWORD *)(a1 + 48) = 0;
    if (v4) {
LABEL_4:
    }
      memset_pattern16(v6, &unk_19E351820, v5);
  }
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(void *)(a1 + 72) = 0;
  int v7 = a2 + 1;
  if (a2 == -1)
  {
    double v8 = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 72) = 0;
    *(_DWORD *)(a1 + 80) = v7;
    MEMORY[0] = 0;
    if (!a2) {
      return a1;
    }
    goto LABEL_12;
  }
  if (v7 < 0) {
    sub_19E13D694();
  }
  double v8 = operator new(8 * v7);
  bzero(v8, 8 * v7);
  *(void *)(a1 + 56) = v8;
  *(void *)(a1 + 64) = &v8[v7];
  *(void *)(a1 + 72) = &v8[v7];
  *(_DWORD *)(a1 + 80) = v7;
  *double v8 = 0;
  if (a2)
  {
LABEL_12:
    unint64_t v9 = 0;
    if (a2 == 1) {
      goto LABEL_16;
    }
    unint64_t v9 = a2 & 0xFFFFFFFFFFFFFFFELL;
    double v10 = v8 + 1;
    unint64_t v11 = a2 & 0xFFFFFFFFFFFFFFFELL;
    double v12 = (long long *)v6;
    do
    {
      long long v13 = *v12++;
      long double v20 = log(*((long double *)&v13 + 1));
      *(double *)&long long v14 = log(*(long double *)&v13);
      *((long double *)&v14 + 1) = v20;
      *v10++ = v14;
      v11 -= 2;
    }
    while (v11);
    if (v9 != a2)
    {
LABEL_16:
      int64_t v15 = (long double *)&v8[v9 + 1];
      uint64_t v16 = (double *)&v6[8 * v9];
      uint64_t v17 = a2 - v9;
      do
      {
        long double v18 = *v16++;
        *v15++ = log(v18);
        --v17;
      }
      while (v17);
    }
  }
  return a1;
}

void sub_19E2C44B0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E13A9BC(a1);
}

void sub_19E2C44CC(void *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  sub_19E13A9BC(a1);
}

long double sub_19E2C44E8(uint64_t a1, double a2, double a3)
{
  double v4 = a2 - (*(double *)(a1 + 48) + *(double *)(a1 + 64));
  double v5 = v4 / a3;
  long double v6 = erfc(v4 / a3 * -0.707106781) * (0.5 * v4);
  return v6 + a3 * 0.39894228 * exp(v5 * v5 * -0.5);
}

double sub_19E2C4560()
{
  return 0.0;
}

void sub_19E2C4568(uint64_t a1)
{
  int v104 = 0;
  uint64_t v105 = 0;
  unint64_t v106 = 0;
  uint64_t v1 = *(void **)(a1 + 8);
  uint64_t v101 = 0;
  unint64_t v102 = 0;
  size_t v100 = 0;
  int v3 = (unsigned char *)v1[12];
  uint64_t v2 = (unsigned char *)v1[13];
  int64_t v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0) {
      sub_19E13D694();
    }
    double v5 = (char *)operator new(v2 - v3);
    long double v6 = &v5[8 * (v4 >> 3)];
    size_t v100 = v5;
    unint64_t v102 = v6;
    memcpy(v5, v3, v4);
    uint64_t v101 = v6;
  }
  uint64_t v7 = v1[15];
  uint64_t v103 = v7;
  if (!v7)
  {
    uint64_t v55 = 0;
    uint64_t v58 = 0;
    *(_DWORD *)(a1 + 56) = 0;
    long long v62 = v100;
    signed int v63 = HIDWORD(v103);
    long long v107 = 0;
    int v108 = 0;
    uint64_t v109 = 0;
    if (HIDWORD(v103)) {
      goto LABEL_65;
    }
    goto LABEL_81;
  }
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  double v10 = 0;
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v90 = (int)v7;
  uint64_t v91 = v7;
  size_t v13 = 8 * (v7 >> 32);
  uint64_t v88 = v7 >> 32;
  size_t v89 = v13;
  unint64_t v87 = (v7 >> 32) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v93 = HIDWORD(v7);
  uint64_t v94 = 16;
  do
  {
    uint64_t v14 = *(void *)(a1 + 8);
    int64_t v15 = v100;
    __p = 0;
    *(void *)uint64_t v96 = 0;
    uint64_t v97 = 0;
    if (!v93)
    {
      uint64_t v16 = 0;
      int v108 = 0;
      uint64_t v109 = 0;
      long long v107 = 0;
      unsigned int v110 = 0;
      goto LABEL_27;
    }
    if (v7 < 0) {
      sub_19E13D694();
    }
    uint64_t v16 = operator new(v13);
    bzero(v16, v13);
    if ((unint64_t)v7 >> 33 < 3)
    {
      unint64_t v17 = 0;
      unint64_t v18 = v88;
      goto LABEL_17;
    }
    unint64_t v18 = v88;
    if ((unint64_t)((char *)v16 - &v100[v13 * v12]) < 0x20)
    {
      unint64_t v17 = 0;
LABEL_17:
      unint64_t v23 = v18 - v17;
      uint64_t v24 = 8 * v17;
      signed int v25 = (void *)v16 + v17;
      double v26 = (uint64_t *)&v15[v8 + v24];
      do
      {
        uint64_t v27 = *v26++;
        *v25++ = v27;
        --v23;
      }
      while (v23);
      goto LABEL_19;
    }
    uint64_t v19 = (long long *)&v100[v94];
    long double v20 = v16 + 1;
    unint64_t v21 = v87;
    do
    {
      long long v22 = *v19;
      *(v20 - 1) = *(v19 - 1);
      *long double v20 = v22;
      v19 += 2;
      v20 += 2;
      v21 -= 4;
    }
    while (v21);
    unint64_t v17 = v87;
    if (v88 != v87) {
      goto LABEL_17;
    }
LABEL_19:
    long long v107 = 0;
    int v108 = 0;
    uint64_t v109 = 0;
    unsigned int v110 = v93;
    sub_19E2482DC((uint64_t)&v107, v18);
    uint64_t v28 = v110;
    if ((int)v110 >= 1)
    {
      uint64_t v29 = 0;
      char v30 = v107;
      if (v110 < 4) {
        goto LABEL_25;
      }
      if ((unint64_t)((char *)v107 - (char *)v16) < 0x20) {
        goto LABEL_25;
      }
      unint64_t v31 = 0;
      uint64_t v29 = v110 & 0xFFFFFFFC;
      uint64_t v32 = (8 * v110) & 0x7FFFFFFE0;
      do
      {
        long long v33 = v16[v31 / 0x10 + 1];
        int v34 = (double *)&v30[v31 / 8];
        *(_OWORD *)int v34 = v16[v31 / 0x10];
        *((_OWORD *)v34 + 1) = v33;
        v31 += 32;
      }
      while (v32 != v31);
      if (v29 != v28)
      {
LABEL_25:
        uint64_t v35 = v28 - v29;
        uint64_t v36 = v29 << 32;
        do
        {
          *(const double *)((char *)v30 + (v36 >> 29)) = *(const double *)((char *)v16 + (v36 >> 29));
          v36 += 0x100000000;
          --v35;
        }
        while (v35);
      }
    }
LABEL_27:
    double v37 = sub_19E2C4D3C(v14, (const double **)&v107);
    double v38 = v37;
    if (v11 < v10)
    {
      *v11++ = v37;
      uint64_t v7 = v91;
      size_t v13 = v89;
      uint64_t v105 = (uint64_t)v11;
      unint64_t v39 = v107;
      if (!v107) {
        goto LABEL_30;
      }
LABEL_29:
      int v108 = v39;
      operator delete(v39);
      goto LABEL_30;
    }
    uint64_t v40 = v11 - v9;
    unint64_t v41 = v40 + 1;
    if ((unint64_t)(v40 + 1) >> 61) {
      sub_19E13D694();
    }
    if (((char *)v10 - (char *)v9) >> 2 > v41) {
      unint64_t v41 = ((char *)v10 - (char *)v9) >> 2;
    }
    if ((unint64_t)((char *)v10 - (char *)v9) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v42 = v41;
    }
    if (v42)
    {
      if (v42 >> 61) {
        sub_19E13C418();
      }
      unint64_t v43 = operator new(8 * v42);
      float64x2_t v44 = (double *)&v43[8 * v40];
      double *v44 = v38;
      uint64_t v45 = (uint64_t)(v44 + 1);
      if (v11 != v9)
      {
LABEL_41:
        unint64_t v46 = (char *)(v11 - 1) - (char *)v9;
        if (v46 < 0x168
          || &v43[(char *)v11 - (char *)v9 - 8 - (v46 & 0xFFFFFFFFFFFFFFF8)] > &v43[(char *)v11 - (char *)v9 - 8]
          || (double *)((char *)v11 - (v46 & 0xFFFFFFFFFFFFFFF8) - 8) > v11 - 1
          || (unint64_t)((char *)v9 - v43) < 0x20)
        {
          long long v47 = v11;
          uint64_t v7 = v91;
          size_t v13 = v89;
        }
        else
        {
          uint64_t v49 = (v46 >> 3) + 1;
          uint64_t v50 = 8 * (v49 & 0x3FFFFFFFFFFFFFFCLL);
          long long v47 = &v11[v50 / 0xFFFFFFFFFFFFFFF8];
          float64x2_t v44 = (double *)((char *)v44 - v50);
          uint64_t v51 = &v43[8 * v40 - 16];
          uint64_t v52 = v11 - 2;
          uint64_t v53 = v49 & 0x3FFFFFFFFFFFFFFCLL;
          uint64_t v7 = v91;
          do
          {
            long long v54 = *(_OWORD *)v52;
            *(v51 - 1) = *((_OWORD *)v52 - 1);
            *uint64_t v51 = v54;
            v51 -= 2;
            v52 -= 4;
            v53 -= 4;
          }
          while (v53);
          size_t v13 = v89;
          if (v49 == (v49 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_44:
            double v10 = (double *)&v43[8 * v42];
            int v104 = v44;
            uint64_t v105 = v45;
            unint64_t v106 = v10;
            if (!v9) {
              goto LABEL_46;
            }
LABEL_45:
            operator delete(v9);
            goto LABEL_46;
          }
        }
        do
        {
          uint64_t v48 = *((void *)v47-- - 1);
          *((void *)v44-- - 1) = v48;
        }
        while (v47 != v9);
        goto LABEL_44;
      }
    }
    else
    {
      unint64_t v43 = 0;
      float64x2_t v44 = (double *)(8 * v40);
      *(double *)(8 * v40) = v37;
      uint64_t v45 = 8 * v40 + 8;
      if (v11 != v9) {
        goto LABEL_41;
      }
    }
    uint64_t v7 = v91;
    size_t v13 = v89;
    double v10 = (double *)&v43[8 * v42];
    int v104 = v44;
    uint64_t v105 = v45;
    unint64_t v106 = v10;
    if (v9) {
      goto LABEL_45;
    }
LABEL_46:
    unint64_t v9 = v44;
    unint64_t v11 = (double *)v45;
    uint64_t v105 = v45;
    unint64_t v39 = v107;
    if (v107) {
      goto LABEL_29;
    }
LABEL_30:
    if (v16) {
      operator delete(v16);
    }
    ++v12;
    v94 += v13;
    v8 += v13;
  }
  while (v12 != v90);
  uint64_t v55 = v104;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)(a1 + 8) + 120);
  if (v55 == v11)
  {
    uint64_t v58 = v55;
    long long v62 = v100;
    signed int v63 = HIDWORD(v103);
    long long v107 = 0;
    int v108 = 0;
    uint64_t v109 = 0;
    if (HIDWORD(v103)) {
      goto LABEL_65;
    }
    goto LABEL_81;
  }
  signed int v56 = v55 + 1;
  if (v55 + 1 == v11)
  {
    uint64_t v58 = v55;
    long long v62 = v100;
    signed int v63 = HIDWORD(v103);
    long long v107 = 0;
    int v108 = 0;
    uint64_t v109 = 0;
    if (HIDWORD(v103)) {
      goto LABEL_65;
    }
    goto LABEL_81;
  }
  double v57 = *v55;
  uint64_t v58 = v55;
  unint64_t v59 = v55 + 1;
  do
  {
    double v60 = *v59++;
    BOOL v61 = v57 < v60;
    double v57 = fmax(v57, v60);
    if (v61) {
      uint64_t v58 = v56;
    }
    signed int v56 = v59;
  }
  while (v59 != v11);
  long long v62 = v100;
  signed int v63 = HIDWORD(v103);
  long long v107 = 0;
  int v108 = 0;
  uint64_t v109 = 0;
  if (!HIDWORD(v103))
  {
LABEL_81:
    uint64_t v74 = 0;
    LODWORD(v73) = 0;
    uint64_t v64 = 0;
    *(void *)uint64_t v96 = 0;
    uint64_t v97 = 0;
    __p = 0;
    unsigned int v98 = 0;
    goto LABEL_82;
  }
LABEL_65:
  if (v63 < 0) {
    sub_19E13D694();
  }
  uint64_t v64 = operator new(8 * v63);
  uint64_t v65 = (v58 - v55) * v63;
  bzero(v64, 8 * v63);
  if (v63 < 0xA || (uint64_t v66 = &v62[8 * v65], (unint64_t)((char *)v64 - v66) < 0x20))
  {
    unint64_t v67 = 0;
    goto LABEL_69;
  }
  unint64_t v67 = v63 & 0xFFFFFFFFFFFFFFFCLL;
  int v83 = (long long *)(v66 + 16);
  uint64_t v84 = v64 + 1;
  unint64_t v85 = v67;
  do
  {
    long long v86 = *v83;
    *(v84 - 1) = *(v83 - 1);
    _OWORD *v84 = v86;
    v83 += 2;
    v84 += 2;
    v85 -= 4;
  }
  while (v85);
  if (v67 != v63)
  {
LABEL_69:
    unint64_t v68 = v63 - v67;
    uint64_t v69 = 8 * v67;
    unint64_t v70 = (void *)v64 + v67;
    uint64_t v71 = &v62[8 * v65 + v69];
    do
    {
      uint64_t v72 = *(void *)v71;
      v71 += 8;
      *v70++ = v72;
      --v68;
    }
    while (v68);
  }
  __p = 0;
  *(void *)uint64_t v96 = 0;
  uint64_t v97 = 0;
  unsigned int v98 = v63;
  sub_19E2482DC((uint64_t)&__p, v63);
  uint64_t v73 = v98;
  uint64_t v74 = (char *)__p;
  if ((int)v98 >= 1)
  {
    uint64_t v75 = 0;
    if (v98 < 4) {
      goto LABEL_77;
    }
    if ((unint64_t)((unsigned char *)__p - (unsigned char *)v64) < 0x20) {
      goto LABEL_77;
    }
    unint64_t v76 = 0;
    uint64_t v75 = v98 & 0xFFFFFFFC;
    uint64_t v77 = (8 * v98) & 0x7FFFFFFE0;
    do
    {
      long long v78 = v64[v76 / 0x10 + 1];
      int64_t v79 = &v74[v76];
      *(_OWORD *)int64_t v79 = v64[v76 / 0x10];
      *((_OWORD *)v79 + 1) = v78;
      v76 += 32;
    }
    while (v77 != v76);
    if (v75 != v73)
    {
LABEL_77:
      uint64_t v80 = v73 - v75;
      uint64_t v81 = v75 << 32;
      do
      {
        *(void *)&v74[v81 >> 29] = *(void *)((char *)v64 + (v81 >> 29));
        v81 += 0x100000000;
        --v80;
      }
      while (v80);
    }
  }
LABEL_82:
  uint64_t v82 = *(void *)v58;
  uint64_t v99 = *(void *)v58;
  if ((void **)(a1 + 16) != &__p)
  {
    sub_19E1E5B9C((void *)(a1 + 16), v74, *(char **)v96, (uint64_t)(*(void *)v96 - (void)v74) >> 3);
    LODWORD(v73) = v98;
    uint64_t v82 = v99;
    uint64_t v74 = (char *)__p;
  }
  *(_DWORD *)(a1 + 40) = v73;
  *(void *)(a1 + 48) = v82;
  if (v74)
  {
    *(void *)uint64_t v96 = v74;
    operator delete(v74);
  }
  if (v64) {
    operator delete(v64);
  }
  if (v62) {
    operator delete(v62);
  }
  if (v55)
  {
    uint64_t v105 = (uint64_t)v55;
    operator delete(v55);
  }
}

void sub_19E2C4C80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  if (__p) {
    operator delete(__p);
  }
  if (v28) {
    operator delete(v28);
  }
  if (v29) {
    operator delete(v29);
  }
  if (a27) {
    operator delete(a27);
  }
  _Unwind_Resume(exception_object);
}

double sub_19E2C4D3C(uint64_t a1, const double **a2)
{
  if (*(_DWORD *)(a1 + 120))
  {
    sub_19E2C4E20(a1, a2, (uint64_t)__A);
    double __C = 0.0;
    vDSP_dotprD(__A[0], 1, *(const double **)(a1 + 256), 1, &__C, (int)__N);
    double v3 = __C;
    double __C = 0.0;
    vDSP_meanvD(*(const double **)(a1 + 288), 1, &__C, *(int *)(a1 + 312));
    double v4 = __C;
    if (__A[0])
    {
      __A[1] = __A[0];
      operator delete(__A[0]);
    }
    return v4 + v3;
  }
  else
  {
    __A[0] = 0;
    vDSP_meanvD(*(const double **)(a1 + 288), 1, (double *)__A, *(int *)(a1 + 312));
    return *(double *)__A;
  }
}

void sub_19E2C4E04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2C4E20(uint64_t a1@<X0>, const double **a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *(_DWORD *)(a1 + 120);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 24) = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  if (v3)
  {
    if (v3 < 0) {
      sub_19E13D694();
    }
    uint64_t v5 = v3;
    long double v6 = (char *)operator new(8 * v3);
    bzero(v6, 8 * v3);
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    *(void *)a3 = v6;
    *(void *)(a3 + 8) = &v6[8 * v3];
    *(void *)(a3 + 16) = &v6[8 * v3];
    *(_DWORD *)(a3 + 24) = v3;
    signed int v25 = v6;
    while (1)
    {
      uint64_t v9 = *(void *)(a1 + 96);
      signed int v10 = *(_DWORD *)(a1 + 124);
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      if (!v10)
      {
        unint64_t v11 = 0;
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        __p = 0;
        signed int v30 = 0;
        goto LABEL_14;
      }
      if (v10 < 0) {
        sub_19E13D694();
      }
      unint64_t v11 = operator new(8 * v10);
      bzero(v11, 8 * v10);
      if (v10 >= 8 && (unint64_t)v11 - v9 - 8 * v8 * v10 >= 0x20)
      {
        unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL;
        long double v20 = (long long *)(v9 + v7 * v10 + 16);
        unint64_t v21 = v11 + 1;
        unint64_t v22 = v12;
        do
        {
          long long v23 = *v20;
          *(v21 - 1) = *(v20 - 1);
          *unint64_t v21 = v23;
          v20 += 2;
          v21 += 2;
          v22 -= 4;
        }
        while (v22);
        if (v12 == v10) {
          goto LABEL_12;
        }
      }
      else
      {
        unint64_t v12 = 0;
      }
      unint64_t v13 = v10 - v12;
      uint64_t v14 = 8 * v12;
      int64_t v15 = (void *)v11 + v12;
      uint64_t v16 = (uint64_t *)(v9 + v14 + v7 * v10);
      do
      {
        uint64_t v17 = *v16++;
        *v15++ = v17;
        --v13;
      }
      while (v13);
LABEL_12:
      __p = 0;
      uint64_t v28 = 0;
      signed int v30 = 0;
      uint64_t v29 = 0;
      __p = operator new(8 * v10);
      uint64_t v28 = (char *)__p + 8 * v10;
      uint64_t v29 = v28;
      signed int v30 = v10;
      memcpy(__p, v11, 8 * v10);
      long double v6 = v25;
LABEL_14:
      double v18 = *(double *)(a1 + 24);
      double v19 = sub_19E2C50CC(a1 + 8, (uint64_t)&__p, a2);
      *(long double *)&v6[8 * v8] = exp(v19 * -0.5) * v18;
      if (__p)
      {
        uint64_t v28 = (char *)__p;
        operator delete(__p);
      }
      if (v11) {
        operator delete(v11);
      }
      ++v8;
      v7 += 8;
      if (v8 == v5) {
        return;
      }
    }
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 24) = 0;
}

void sub_19E2C5058(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E13A9BC(a1);
}

void sub_19E2C5080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
  {
    operator delete(__p);
    if (!v14)
    {
LABEL_3:
      *(void *)(a10 + 8) = a11;
      operator delete(a11);
      _Unwind_Resume(a1);
    }
  }
  else if (!v14)
  {
    goto LABEL_3;
  }
  operator delete(v14);
  *(void *)(a10 + 8) = a11;
  operator delete(a11);
  _Unwind_Resume(a1);
}

double sub_19E2C50CC(uint64_t a1, uint64_t a2, const double **a3)
{
  sub_19E2BC0A0(*(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 48), (uint64_t)v42);
  uint64_t v6 = *(int *)(a1 + 48);
  if (v6)
  {
    uint64_t v7 = *(double **)(a1 + 24);
    uint64_t v8 = (double *)v42[0];
    uint64_t v9 = 8 * v43 + 8;
    do
    {
      double v10 = *v7++;
      *uint64_t v8 = 1.0 / (v10 * v10);
      uint64_t v8 = (double *)((char *)v8 + v9);
      --v6;
    }
    while (v6);
  }
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  signed int v30 = 0;
  unint64_t v12 = *(const void **)a2;
  uint64_t v11 = *(void *)(a2 + 8);
  int64_t v13 = v11 - *(void *)a2;
  if (v11 == *(void *)a2)
  {
    int64_t v15 = 0;
    uint64_t v14 = 0;
  }
  else
  {
    if (v13 < 0) {
      sub_19E13D694();
    }
    uint64_t v14 = (char *)operator new(v11 - *(void *)a2);
    int64_t v15 = &v14[8 * (v13 >> 3)];
    signed int v30 = v14;
    uint64_t v32 = v15;
    memcpy(v14, v12, v13);
    uint64_t v31 = v15;
  }
  signed int v16 = *(_DWORD *)(a2 + 24);
  signed int v33 = v16;
  vDSP_vsubD(*a3, 1, (const double *)v14, 1, (double *)v14, 1, v16);
  double __C = 0.0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v17 = v15 - v14;
  if (v15 != v14)
  {
    if (v17 < 0) {
      sub_19E13D694();
    }
    double v18 = (char *)operator new(v15 - v14);
    *(void *)&double __C = v18;
    uint64_t v36 = &v18[8 * (v17 >> 3)];
    memcpy(v18, v14, v15 - v14);
    uint64_t v35 = v36;
    signed int v37 = v16;
    unint64_t v39 = 0;
    uint64_t v40 = 0;
    double __B = 0;
    if (!v16)
    {
      signed int v41 = 0;
      uint64_t v35 = v18;
      operator delete(v18);
      if (!v14) {
        goto LABEL_23;
      }
LABEL_22:
      uint64_t v31 = v14;
      operator delete(v14);
      goto LABEL_23;
    }
LABEL_14:
    if (v16 < 0) {
      sub_19E13D694();
    }
    double v19 = (double *)operator new(8 * v16);
    double __B = v19;
    uint64_t v40 = &v19[v16];
    bzero(v19, 8 * v16);
    unint64_t v39 = v40;
    signed int v41 = v16;
    if (v16 >= 4)
    {
      uint64_t v21 = 0;
      unint64_t v20 = v16 & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v22 = v20;
      do
      {
        long long v23 = *(_OWORD *)&v18[v21 * 8 + 16];
        uint64_t v24 = &v19[v21];
        *(_OWORD *)uint64_t v24 = *(_OWORD *)&v18[v21 * 8];
        *((_OWORD *)v24 + 1) = v23;
        v21 += 4;
        v22 -= 4;
      }
      while (v22);
      if (v20 == v16)
      {
LABEL_21:
        uint64_t v35 = v18;
        operator delete(v18);
        if (!v14) {
          goto LABEL_23;
        }
        goto LABEL_22;
      }
    }
    else
    {
      unint64_t v20 = 0;
    }
    do
    {
      v19[v20] = *(double *)&v18[8 * v20];
      ++v20;
    }
    while (v16 != v20);
    goto LABEL_21;
  }
  double v18 = 0;
  signed int v37 = v16;
  unint64_t v39 = 0;
  uint64_t v40 = 0;
  double __B = 0;
  if (v16) {
    goto LABEL_14;
  }
  signed int v41 = 0;
  if (v14) {
    goto LABEL_22;
  }
LABEL_23:
  sub_19E29FAE8((uint64_t)&__B, (uint64_t)__p);
  sub_19E2BBF98((uint64_t)__p, (uint64_t)v42, (uint64_t)__A);
  vDSP_mmulD(__A[0], 1, __B, 1, &__C, 1, 1uLL, 1uLL, (int)v29);
  double v25 = __C;
  if (__A[0])
  {
    __A[1] = __A[0];
    operator delete(__A[0]);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (__B)
  {
    unint64_t v39 = __B;
    operator delete(__B);
  }
  if (v42[0])
  {
    v42[1] = v42[0];
    operator delete(v42[0]);
  }
  return v25;
}

void sub_19E2C53C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  if (__p)
  {
    operator delete(__p);
    signed int v30 = a11;
    if (!a11)
    {
LABEL_3:
      uint64_t v31 = a27;
      if (!a27)
      {
LABEL_8:
        uint64_t v32 = *(void **)(v28 - 112);
        if (v32)
        {
          *(void *)(v28 - 104) = v32;
          operator delete(v32);
        }
        _Unwind_Resume(exception_object);
      }
LABEL_7:
      operator delete(v31);
      goto LABEL_8;
    }
  }
  else
  {
    signed int v30 = a11;
    if (!a11) {
      goto LABEL_3;
    }
  }
  operator delete(v30);
  uint64_t v31 = a27;
  if (!a27) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

uint64_t sub_19E2C54A0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  sub_19E246830(&v13, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 4));
  __p = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  sub_19E246A1C(&__p, a3[3], a3[4], 0xCCCCCCCCCCCCCCCDLL * ((a3[4] - a3[3]) >> 3));
  sub_19E2C563C((void *)a1, a2, (uint64_t *)&v13);
  uint64_t v6 = (void **)__p;
  if (__p)
  {
    uint64_t v7 = v17;
    uint64_t v8 = __p;
    if (v17 != __p)
    {
      do
      {
        if (*((char *)v7 - 17) < 0) {
          operator delete(*(v7 - 5));
        }
        v7 -= 5;
      }
      while (v7 != v6);
      uint64_t v8 = __p;
    }
    uint64_t v17 = v6;
    operator delete(v8);
  }
  uint64_t v9 = (void **)v13;
  if (v13)
  {
    double v10 = v14;
    uint64_t v11 = v13;
    if (v14 != v13)
    {
      do
      {
        if (*((char *)v10 - 25) < 0) {
          operator delete(*(v10 - 6));
        }
        v10 -= 6;
      }
      while (v10 != v9);
      uint64_t v11 = v13;
    }
    uint64_t v14 = v9;
    operator delete(v11);
  }
  *(void *)a1 = &unk_1EF0A81F8;
  *(_DWORD *)(a1 + 64) = 5;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_19E2C560C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_19E2C5620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    sub_19E32FAD8((uint64_t)&a9, a9);
  }
  _Unwind_Resume(exception_object);
}

void *sub_19E2C563C(void *a1, uint64_t a2, uint64_t *a3)
{
  *a1 = &unk_1EF0A8378;
  a1[1] = a2;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  sub_19E246830(a1 + 2, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 4));
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  sub_19E246A1C(a1 + 5, a3[3], a3[4], 0xCCCCCCCCCCCCCCCDLL * ((a3[4] - a3[3]) >> 3));
  return a1;
}

void sub_19E2C56DC(_Unwind_Exception *exception_object)
{
  if (*v2) {
    sub_19E32FD88(v1, *v2);
  }
  _Unwind_Resume(exception_object);
}

void *sub_19E2C56FC(void *a1)
{
  *a1 = &unk_1EF0A81F8;
  uint64_t v2 = (char **)a1[9];
  if (v2)
  {
    int v3 = (char **)a1[10];
    double v4 = v2;
    if (v3 != v2)
    {
      do
        int v3 = sub_19E2470C8(v3 - 13);
      while (v3 != v2);
      double v4 = (char **)a1[9];
    }
    a1[10] = v2;
    operator delete(v4);
  }

  return sub_19E2C5DB0(a1);
}

void sub_19E2C5784(void *a1)
{
  *a1 = &unk_1EF0A81F8;
  uint64_t v2 = (char **)a1[9];
  if (v2)
  {
    int v3 = (char **)a1[10];
    double v4 = v2;
    if (v3 != v2)
    {
      do
        int v3 = sub_19E2470C8(v3 - 13);
      while (v3 != v2);
      double v4 = (char **)a1[9];
    }
    a1[10] = v2;
    operator delete(v4);
  }
  uint64_t v5 = sub_19E2C5DB0(a1);

  operator delete(v5);
}

void sub_19E2C5810(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  sub_19E2C5E88(a1);
  uint64_t v6 = *(void *)(a1 + 72);
  if (v6 == *(void *)(a1 + 80))
  {
    uint64_t v39 = a3;
    sub_19E29CB00(a2, &v52);
    sub_19E2C6180(a2, (uint64_t)v49);
    uint64_t v7 = v50;
    if (v50 != v51)
    {
      do
      {
        uint64_t v8 = *(void *)((char *)v7 + 28);
        sub_19E291E68(v48, &v52[12 * (int)v8]);
        if (SHIDWORD(v8) >= 1)
        {
          int v9 = 0;
          unsigned int v10 = HIDWORD(v8) & ~(v8 >> 63);
          do
          {
            sub_19E2C62C0(a1, (uint64_t *)v48, (uint64_t **)&__A);
            sub_19E2460A4((char **)v48, (uint64_t)&__A);
            sub_19E15A064((uint64_t)v47, v47[1]);
            sub_19E15A064((uint64_t)v46, v46[1]);
            uint64_t v11 = (char *)__p;
            if (__p)
            {
              unint64_t v12 = v45;
              int64_t v13 = __p;
              if (v45 != __p)
              {
                do
                {
                  uint64_t v14 = (void *)*((void *)v12 - 4);
                  if (v14)
                  {
                    *((void *)v12 - 3) = v14;
                    operator delete(v14);
                  }
                  if (*(v12 - 33) < 0) {
                    operator delete(*((void **)v12 - 7));
                  }
                  v12 -= 56;
                }
                while (v12 != v11);
                int64_t v13 = __p;
              }
              uint64_t v45 = v11;
              operator delete(v13);
            }
            uint64_t v15 = __A;
            if (*(double *)&__A != 0.0)
            {
              signed int v16 = v43;
              uint64_t v17 = __A;
              if (v43 != __A)
              {
                do
                {
                  uint64_t v18 = (void *)*((void *)v16 - 4);
                  if (v18)
                  {
                    *((void *)v16 - 3) = v18;
                    operator delete(v18);
                  }
                  if (*((char *)v16 - 33) < 0) {
                    operator delete(*((void **)v16 - 7));
                  }
                  v16 -= 7;
                }
                while (v16 != v15);
                uint64_t v17 = __A;
              }
              int v43 = v15;
              operator delete(v17);
            }
            signed int v41 = 0;
            uint64_t v19 = *(void *)(a1 + 8);
            sub_19E29CE6C((long long **)v48, (uint64_t)v40);
            uint64_t v20 = *(void *)(v19 + 8);
            if (*(_DWORD *)(v20 + 120))
            {
              sub_19E2C4E20(*(void *)(v19 + 8), (const double **)v40, (uint64_t)&__A);
              __C[0] = 0.0;
              vDSP_dotprD(__A, 1, *(const double **)(v20 + 256), 1, __C, (int)__p);
              double v21 = __C[0];
              __C[0] = 0.0;
              vDSP_meanvD(*(const double **)(v20 + 288), 1, __C, *(int *)(v20 + 312));
              double v22 = __C[0];
              sub_19E2C678C(v20, (const double **)v40, (uint64_t)&__A);
              double v24 = v23;
              double v25 = *(double *)(v20 + 16);
              if (*(double *)&__A != 0.0)
              {
                int v43 = __A;
                operator delete(__A);
              }
              double v26 = v22 + v21;
              double v27 = v25 + v24;
            }
            else
            {
              *(double *)&__A = 0.0;
              vDSP_meanvD(*(const double **)(v20 + 288), 1, (double *)&__A, *(int *)(v20 + 312));
              double v26 = *(double *)&__A;
              double v27 = sub_19E2C66BC(v20, (const double **)v40);
            }
            double v28 = sqrt(v27);
            if (v28 < 0.00000001 || (int v29 = *(_DWORD *)(*(void *)(v19 + 8) + 120), v29 <= 0))
            {
              double v30 = (*(double (**)(uint64_t))(*(void *)v19 + 8))(v19);
            }
            else
            {
              if (*(_DWORD *)(v19 + 56) != v29) {
                (*(void (**)(uint64_t))(*(void *)v19 + 16))(v19);
              }
              (**(void (***)(uint64_t, double, double))v19)(v19, v26, v28);
            }
            uint64_t v31 = *(uint64_t **)&v30;
            if (v40[0])
            {
              v40[1] = v40[0];
              operator delete(v40[0]);
            }
            signed int v41 = v31;
            sub_19E29D218((int *)(a1 + 64), (uint64_t *)v48, &v41);
            ++v9;
          }
          while (v10 != v9);
        }
        sub_19E2470C8((char **)v48);
        uint64_t v32 = (void *)v7[1];
        if (v32)
        {
          do
          {
            signed int v33 = (void **)v32;
            uint64_t v32 = (void *)*v32;
          }
          while (v32);
        }
        else
        {
          do
          {
            signed int v33 = (void **)v7[2];
            BOOL v34 = *v33 == v7;
            uint64_t v7 = v33;
          }
          while (!v34);
        }
        uint64_t v7 = v33;
      }
      while (v33 != v51);
    }
    uint64_t v35 = *(uint64_t **)(a1 + 72);
    sub_19E291E68((uint64_t **)v39, v35);
    *(void *)(v39 + 96) = v35[12];
    sub_19E29D74C(*(char ***)(a1 + 72), *(void *)(a1 + 80), (uint64_t)v48, 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 3));
    *(void *)(a1 + 80) = sub_19E2470C8((char **)(*(void *)(a1 + 80) - 104));
    sub_19E13C56C((uint64_t)&v50, v51[0]);
    uint64_t v36 = (char **)v52;
    if (v52)
    {
      signed int v37 = v53;
      double v38 = v52;
      if (v53 != (char **)v52)
      {
        do
          signed int v37 = sub_19E2470C8(v37 - 12);
        while (v37 != v36);
        double v38 = v52;
      }
      uint64_t v53 = v36;
      operator delete(v38);
    }
  }
  else
  {
    sub_19E291E68((uint64_t **)a3, *(uint64_t **)(a1 + 72));
    *(void *)(a3 + 96) = *(void *)(v6 + 96);
    sub_19E29D74C(*(char ***)(a1 + 72), *(void *)(a1 + 80), (uint64_t)v48, 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 3));
    *(void *)(a1 + 80) = sub_19E2470C8((char **)(*(void *)(a1 + 80) - 104));
  }
}

void sub_19E2C5CCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  sub_19E2470C8(v28);
  sub_19E13C56C(a10, *(void **)(v29 - 184));
  sub_19E2462FC((void **)(v29 - 168));
  _Unwind_Resume(a1);
}

void sub_19E2C5D64(char *a1@<X8>)
{
  a1[23] = 17;
  strcpy(a1, "genetic_optimizer");
}

void sub_19E2C5D88(char *a1@<X8>)
{
  a1[23] = 21;
  strcpy(a1, "acquisition_optimizer");
}

void *sub_19E2C5DB0(void *a1)
{
  *a1 = &unk_1EF0A8378;
  uint64_t v2 = a1[5];
  if (v2)
  {
    uint64_t v3 = a1[6];
    double v4 = (void *)a1[5];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 17) < 0) {
          operator delete(*(void **)(v3 - 40));
        }
        v3 -= 40;
      }
      while (v3 != v2);
      double v4 = (void *)a1[5];
    }
    a1[6] = v2;
    operator delete(v4);
  }
  uint64_t v5 = a1[2];
  if (v5)
  {
    uint64_t v6 = a1[3];
    uint64_t v7 = (void *)a1[2];
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 25) < 0) {
          operator delete(*(void **)(v6 - 48));
        }
        v6 -= 48;
      }
      while (v6 != v5);
      uint64_t v7 = (void *)a1[2];
    }
    a1[3] = v5;
    operator delete(v7);
  }
  return a1;
}

void sub_19E2C5E88(uint64_t a1)
{
  int v18 = 5;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v19 = 0;
  uint64_t v3 = *(void *)(a1 + 72);
  uint64_t v2 = (uint64_t *)(a1 + 72);
  if (v3 == *(void *)(a1 + 80))
  {
    unint64_t v12 = 0;
    *(_DWORD *)(a1 + 64) = 5;
    if ((int *)(a1 + 64) == &v18) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  do
  {
    sub_19E291E68(v17, (uint64_t *)v3);
    v17[12] = *(uint64_t **)(v3 + 96);
    sub_19E29D74C(*(char ***)(a1 + 72), *(void *)(a1 + 80), (uint64_t)__p, 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 3));
    *(void *)(a1 + 80) = sub_19E2470C8((char **)(*(void *)(a1 + 80) - 104));
    signed int v16 = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    sub_19E29CE6C((long long **)v17, (uint64_t)__p);
    v5.n128_f64[0] = sub_19E2C65B0(*(void *)(v4 + 8), (const double **)__p);
    double v7 = sqrt(v6);
    if (v7 < 0.00000001 || (int v8 = *(_DWORD *)(*(void *)(v4 + 8) + 120), v8 <= 0))
    {
      double v10 = (*(double (**)(uint64_t, __n128))(*(void *)v4 + 8))(v4, v5);
    }
    else
    {
      double v9 = v5.n128_f64[0];
      if (*(_DWORD *)(v4 + 56) != v8) {
        (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
      }
      (**(void (***)(uint64_t, double, double))v4)(v4, v9, v7);
    }
    *(double *)&uint64_t v11 = v10;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    signed int v16 = v11;
    if (*(double *)&v11 > (*(double (**)(void))(**(void **)(a1 + 8) + 8))(*(void *)(a1 + 8))) {
      sub_19E29D218(&v18, (uint64_t *)v17, &v16);
    }
    sub_19E2470C8((char **)v17);
    uint64_t v3 = *(void *)(a1 + 72);
  }
  while (v3 != *(void *)(a1 + 80));
  unint64_t v12 = v19;
  *(_DWORD *)(a1 + 64) = v18;
  if ((int *)(a1 + 64) != &v18)
  {
LABEL_17:
    sub_19E29D4FC(v2, v12, v20, 0x4EC4EC4EC4EC4EC5 * (v20 - v12));
    unint64_t v12 = v19;
  }
LABEL_18:
  if (v12)
  {
    int64_t v13 = (char **)v20;
    uint64_t v14 = v12;
    if (v20 != v12)
    {
      do
        int64_t v13 = sub_19E2470C8(v13 - 13);
      while (v13 != (char **)v12);
      uint64_t v14 = v19;
    }
    uint64_t v20 = v12;
    operator delete(v14);
  }
}

void sub_19E2C611C(_Unwind_Exception *a1)
{
  sub_19E29C7AC(v1 - 120);
  _Unwind_Resume(a1);
}

void sub_19E2C6130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_19E2470C8((char **)va);
  sub_19E29C7AC(v7 - 120);
  _Unwind_Resume(a1);
}

void sub_19E2C6154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *a15)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E2470C8(&a15);
  sub_19E29C7AC(v15 - 120);
  _Unwind_Resume(a1);
}

void sub_19E2C6180(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = a2 + 16;
  *(void *)(a2 + 24) = 0;
  sub_19E29DC58(a1, __p);
  sub_19E2459C8(v7, (uint64_t *)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v3 = 50;
  do
  {
    int v5 = sub_19E29E07C((uint64_t)v9, (uint64_t)v7, v9);
    uint64_t v4 = sub_19E29DD48((int *)a2, &v5);
    ++*(_DWORD *)v4;
    --v3;
  }
  while (v3);
  if (v9[0])
  {
    v9[1] = v9[0];
    operator delete(v9[0]);
  }
  std::random_device::~random_device(&v8);
}

void sub_19E2C6260(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14)
{
  if (__p)
  {
    operator delete(__p);
    sub_19E13C56C(v14, *v15);
    _Unwind_Resume(a1);
  }
  sub_19E13C56C(v14, *v15);
  _Unwind_Resume(a1);
}

void sub_19E2C62C0(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t **a3@<X8>)
{
  sub_19E291E68(a3, a2);
  sub_19E29E298((long long **)a2, (uint64_t)v8);
  sub_19E2C6450(a1, (uint64_t *)v8, v9);
  sub_19E29E624((uint64_t)a2, (uint64_t)v6);
  sub_19E2C6500(a1, (uint64_t *)v6, __p);
  sub_19E29E900((uint64_t *)a3, (uint64_t *)v9);
  sub_19E29EAC0((uint64_t)a3, (uint64_t *)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v6[0])
  {
    v6[1] = v6[0];
    operator delete(v6[0]);
  }
  if (*(void *)&v9[0])
  {
    *((void *)&v9[0] + 1) = *(void *)&v9[0];
    operator delete(*(void **)&v9[0]);
  }
  if (v8[0])
  {
    v8[1] = v8[0];
    operator delete(v8[0]);
  }
}

void sub_19E2C6390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v21 = *(void **)(v19 - 64);
    if (!v21)
    {
LABEL_3:
      double v22 = a17;
      if (!a17) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v21 = *(void **)(v19 - 64);
    if (!v21) {
      goto LABEL_3;
    }
  }
  *(void *)(v19 - 56) = v21;
  operator delete(v21);
  double v22 = a17;
  if (!a17)
  {
LABEL_4:
    sub_19E2470C8(v18);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(v22);
  sub_19E2470C8(v18);
  _Unwind_Resume(a1);
}

double sub_19E2C6450@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  int v5 = (uint64_t *)(a1 + 16);
  if (sub_19E244298((uint64_t *)(a1 + 16)))
  {
    sub_19E244360(v5, (uint64_t *)v7);
    sub_19E310AEC(a2, (uint64_t)v7, (uint64_t)a3);
    if (__p)
    {
      double v9 = __p;
      operator delete(__p);
    }
    if (v7[0])
    {
      v7[1] = v7[0];
      operator delete(v7[0]);
    }
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

void sub_19E2C64EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double sub_19E2C6500@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v5 = a1 + 16;
  if (sub_19E244DC4(a1 + 16))
  {
    sub_19E244E8C(v5, (uint64_t *)v7);
    sub_19E311780(a2, (uint64_t *)v7, (uint64_t)a3);
    if (__p)
    {
      double v9 = __p;
      operator delete(__p);
    }
    if (v7[0])
    {
      v7[1] = v7[0];
      operator delete(v7[0]);
    }
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

void sub_19E2C659C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double sub_19E2C65B0(uint64_t a1, const double **a2)
{
  if (*(_DWORD *)(a1 + 120))
  {
    sub_19E2C4E20(a1, a2, (uint64_t)__A);
    double __C = 0.0;
    vDSP_dotprD(__A[0], 1, *(const double **)(a1 + 256), 1, &__C, (int)__N);
    double v4 = __C;
    double __C = 0.0;
    vDSP_meanvD(*(const double **)(a1 + 288), 1, &__C, *(int *)(a1 + 312));
    double v5 = __C;
    sub_19E2C678C(a1, a2, (uint64_t)__A);
    if (__A[0])
    {
      __A[1] = __A[0];
      operator delete(__A[0]);
    }
    return v5 + v4;
  }
  else
  {
    double v6 = sub_19E2C4D3C(a1, a2);
    sub_19E2C66BC(a1, a2);
  }
  return v6;
}

void sub_19E2C669C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_19E2C66BC(uint64_t a1, const double **a2)
{
  if (*(_DWORD *)(a1 + 120))
  {
    sub_19E2C4E20(a1, a2, (uint64_t)__p);
    sub_19E2C678C(a1, a2, (uint64_t)__p);
    double v5 = v4;
    double v6 = *(double *)(a1 + 16);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    return v6 + v5;
  }
  else
  {
    double v8 = *(double *)(a1 + 24);
    double v9 = sub_19E2C50CC(a1 + 8, (uint64_t)a2, a2);
    return *(double *)(a1 + 16) + exp(v9 * -0.5) * v8;
  }
}

void sub_19E2C6770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2C678C(uint64_t a1, const double **a2, uint64_t a3)
{
  sub_19E29F880(a1 + 192, (uint64_t)__p);
  uint64_t v6 = *(unsigned int *)(a1 + 216);
  if ((int)v6 >= 1)
  {
    uint64_t v7 = 0;
    int v8 = *(_DWORD *)(a1 + 220);
    int v9 = v24;
    int v10 = 1;
    int v11 = -1;
    unint64_t v12 = __p[0];
    do
    {
      if (v8 <= v10) {
        int v13 = v10;
      }
      else {
        int v13 = v8;
      }
      int v14 = v7 + 1;
      if ((int)v7 + 1 >= v8) {
        goto LABEL_3;
      }
      unsigned int v15 = 0;
      int v16 = v13 + v11;
      uint64_t v17 = (int)v7 * (uint64_t)v9;
      if ((v13 + v11) < 4)
      {
        int v18 = v7 + 1;
      }
      else
      {
        int v18 = v7 + 1;
        if (v13 - (int)v7 + v10 - 2 >= v10)
        {
          int v19 = 0;
          unsigned int v15 = v16 & 0xFFFFFFFC;
          int v18 = v14 + (v16 & 0xFFFFFFFC);
          do
          {
            uint64_t v20 = &v12[v17 + v10 + v19];
            *uint64_t v20 = 0uLL;
            v20[1] = 0uLL;
            v19 += 4;
          }
          while ((v16 & 0xFFFFFFFC) != v19);
          if (v16 == v15) {
            goto LABEL_3;
          }
        }
      }
      unsigned int v21 = v13 - v15;
      do
      {
        v12[v17 + v18] = 0;
        int v18 = ++v15 + v14;
        --v21;
      }
      while (v10 != v21);
LABEL_3:
      ++v7;
      ++v10;
      --v11;
    }
    while (v7 != v6);
  }
  sub_19E29F6FC((uint64_t)__p, a3, (uint64_t)__B);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  double v22 = sub_19E2C50CC(a1 + 8, (uint64_t)a2, a2);
  __p[0] = 0;
  vDSP_dotprD(__B[0], 1, __B[0], 1, (double *)__p, (int)__N);
  if (__B[0])
  {
    __B[1] = __B[0];
    operator delete(__B[0]);
  }
  exp(v22 * -0.5);
}

void sub_19E2C6954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E2C6984(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  BOOL v34 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  sub_19E246830(&v34, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 4));
  __p = 0;
  double v38 = 0;
  uint64_t v39 = 0;
  sub_19E246A1C(&__p, a3[3], a3[4], 0xCCCCCCCCCCCCCCCDLL * ((a3[4] - a3[3]) >> 3));
  sub_19E2C563C((void *)a1, a2, (uint64_t *)&v34);
  int v8 = (void **)__p;
  if (__p)
  {
    int v9 = v38;
    int v10 = __p;
    if (v38 != __p)
    {
      do
      {
        if (*((char *)v9 - 17) < 0) {
          operator delete(*(v9 - 5));
        }
        v9 -= 5;
      }
      while (v9 != v8);
      int v10 = __p;
    }
    double v38 = v8;
    operator delete(v10);
  }
  int v11 = (void **)v34;
  if (v34)
  {
    unint64_t v12 = v35;
    int v13 = v34;
    if (v35 != v34)
    {
      do
      {
        if (*((char *)v12 - 25) < 0) {
          operator delete(*(v12 - 6));
        }
        v12 -= 6;
      }
      while (v12 != v11);
      int v13 = v34;
    }
    uint64_t v35 = v11;
    operator delete(v13);
  }
  *(void *)a1 = &unk_1EF0A8018;
  unsigned int v14 = sub_19E244298(a3);
  sub_19E2A099C(a1 + 64, v14);
  sub_19E299010(a1 + 184);
  sub_19E244360(a3, (uint64_t *)v32);
  sub_19E2A16E8(a1 + 64, (uint64_t *)v32);
  sub_19E2A1818(a1 + 64, (uint64_t *)v33);
  if (v33[0])
  {
    v33[1] = v33[0];
    operator delete(v33[0]);
  }
  if (v32[0])
  {
    v32[1] = v32[0];
    operator delete(v32[0]);
  }
  if ((a4 & 0xFF00000000) != 0)
  {
    uint64_t v15 = 0;
    *(_DWORD *)(a1 + 7776) = a4;
    uint64_t v16 = 1;
    unsigned int v17 = a4;
    do
    {
      int v18 = 1812433253 * (v17 ^ (v17 >> 30));
      unsigned int v17 = v18 + v16;
      *(_DWORD *)(a1 + 7780 + 4 * v15) = v15 + v18 + 1;
      ++v16;
      ++v15;
    }
    while (v15 != 623);
    *(void *)(a1 + 10272) = 0;
    *(_DWORD *)(a1 + 184) = a4;
    uint64_t v19 = 1;
    uint64_t v20 = 47;
    unsigned int v21 = a4;
    do
    {
      int v22 = 1812433253 * (v21 ^ (v21 >> 30));
      unsigned int v21 = v22 + v19;
      *(_DWORD *)(a1 + 4 * v20) = v20 + v22 - 46;
      ++v19;
      ++v20;
    }
    while (v20 != 670);
    uint64_t v23 = 0;
    *(void *)(a1 + 2680) = 0;
    *(_DWORD *)(a1 + 2712) = a4;
    uint64_t v24 = 1;
    unsigned int v25 = a4;
    do
    {
      int v26 = 1812433253 * (v25 ^ (v25 >> 30));
      unsigned int v25 = v26 + v24;
      *(_DWORD *)(a1 + 2716 + 4 * v23) = v23 + v26 + 1;
      ++v24;
      ++v23;
    }
    while (v23 != 623);
    uint64_t v27 = 0;
    *(void *)(a1 + 5208) = 0;
    *(_DWORD *)(a1 + 5232) = a4;
    uint64_t v28 = 1;
    unsigned int v29 = a4;
    do
    {
      int v30 = 1812433253 * (v29 ^ (v29 >> 30));
      unsigned int v29 = v30 + v28;
      *(_DWORD *)(a1 + 5236 + 4 * v27) = v27 + v30 + 1;
      ++v28;
      ++v27;
    }
    while (v27 != 623);
    *(void *)(a1 + 7728) = 0;
    sub_19E312C64();
  }
  return a1;
}

void sub_19E2C6C68(_Unwind_Exception *a1)
{
  sub_19E2A0A3C(v2);
  sub_19E2C5DB0(v1);
  _Unwind_Resume(a1);
}

void sub_19E2C6CD4(_Unwind_Exception *a1)
{
  sub_19E2C5DB0(v1);
  _Unwind_Resume(a1);
}

void sub_19E2C6CEC(uint64_t a1)
{
  uint64_t v1 = sub_19E2C7234(a1);

  operator delete(v1);
}

void sub_19E2C6D14(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v12 = 0u;
  memset(v11, 0, sizeof(v11));
  *(void *)&long long v12 = (char *)&v12 + 8;
  v15[0] = 0;
  v15[1] = 0;
  uint64_t v13 = 0;
  unsigned int v14 = v15;
  double v4 = (*(double (**)(void))(**(void **)(a1 + 8) + 8))(*(void *)(a1 + 8));
  sub_19E291E68((uint64_t **)a2, (uint64_t *)v11);
  *(double *)(a2 + 96) = v4;
  sub_19E2470C8((char **)v11);
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v16 = 0;
  sub_19E246830(&v16, *(void *)(a1 + 16), *(void *)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 4));
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  sub_19E246A1C(&v19, *(void *)(a1 + 40), *(void *)(a1 + 48), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 3));
  sub_19E2459CC((uint64_t *)&v16, a1 + 184, 5, (char **)&v22);
  double v5 = v19;
  if (v19)
  {
    uint64_t v6 = v20;
    uint64_t v7 = v19;
    if (v20 != v19)
    {
      do
      {
        if (*((char *)v6 - 17) < 0) {
          operator delete(*(v6 - 5));
        }
        v6 -= 5;
      }
      while (v6 != v5);
      uint64_t v7 = v19;
    }
    uint64_t v20 = v5;
    operator delete(v7);
  }
  uint64_t v8 = (uint64_t)v16;
  if (v16)
  {
    uint64_t v9 = v17;
    int v10 = v16;
    if ((void *)v17 != v16)
    {
      do
      {
        if (*(char *)(v9 - 25) < 0) {
          operator delete(*(void **)(v9 - 48));
        }
        v9 -= 48;
      }
      while (v9 != v8);
      int v10 = v16;
    }
    uint64_t v17 = v8;
    operator delete(v10);
  }
  sub_19E2C730C(a1, v22);
}

void sub_19E2C715C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v8 = va_arg(va1, char *);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  sub_19E2470C8((char **)va1);
  sub_19E2470C8((char **)va);
  sub_19E2462FC((void **)(v6 - 112));
  sub_19E2470C8(v5);
  _Unwind_Resume(a1);
}

void sub_19E2C7214(char *a1@<X8>)
{
  a1[23] = 16;
  strcpy(a1, "direct_optimizer");
}

void *sub_19E2C7234(uint64_t a1)
{
  *(void *)a1 = &unk_1EF0A8018;
  std::random_device::~random_device((std::random_device *)(a1 + 10280));
  std::random_device::~random_device((std::random_device *)(a1 + 7736));
  std::random_device::~random_device((std::random_device *)(a1 + 5216));
  std::random_device::~random_device((std::random_device *)(a1 + 2688));
  *(void *)(a1 + 64) = &unk_1EF0A7F70;
  sub_19E311F9C(*(void *)(a1 + 72));
  uint64_t v2 = *(void **)(a1 + 128);
  if (v2)
  {
    *(void *)(a1 + 136) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 104);
  if (v3)
  {
    *(void *)(a1 + 112) = v3;
    operator delete(v3);
  }
  double v4 = *(void **)(a1 + 80);
  if (v4)
  {
    *(void *)(a1 + 88) = v4;
    operator delete(v4);
  }

  return sub_19E2C5DB0((void *)a1);
}

void sub_19E2C730C(uint64_t a1, long long **a2)
{
  v4[0] = a1;
  v4[1] = a2;
  uint64_t v2 = a1 + 64;
  sub_19E29E298(a2, (uint64_t)&__p);
  sub_19E2C76DC(v2, (uint64_t)v4, (uint64_t)&__p);
}

void sub_19E2C7604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a13)
  {
    operator delete(a13);
    uint64_t v24 = __p;
    if (!__p)
    {
LABEL_4:
      sub_19E2470C8((char **)&a21);
      unsigned int v25 = *(void **)(v22 - 128);
      if (v25)
      {
        *(void *)(v22 - 120) = v25;
        operator delete(v25);
      }
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v24 = __p;
    if (!__p) {
      goto LABEL_4;
    }
  }
  operator delete(v24);
  goto LABEL_4;
}

void sub_19E2C76DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a1 + 112)) {
    (**(void (***)(uint64_t, void))a1)(a1, *(unsigned int *)(a3 + 24));
  }
  operator new();
}

void sub_19E2C7B70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  __cxa_free_exception(v15);
  if (a2 != 3)
  {
    if (a2 == 2)
    {
      uint64_t v19 = __cxa_begin_catch(a1);
      (*(void (**)(void *))(*(void *)v19 + 16))(v19);
      sub_19E29FAE8(v14, (uint64_t)&a13);
      if (a13)
      {
        a14 = (uint64_t)a13;
        operator delete(a13);
      }
      __cxa_end_catch();
LABEL_13:
      JUMPOUT(0x19E2C7958);
    }
    if (a2 != 1)
    {
      if (__p) {
        operator delete(__p);
      }
      _Unwind_Resume(a1);
    }
  }
  uint64_t v18 = __cxa_begin_catch(a1);
  (*(void (**)(void *))(*(void *)v18 + 16))(v18);
  __cxa_end_catch();
  goto LABEL_13;
}

void sub_19E2C7CC0(uint64_t **a1, void *a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  double v5 = a1[1];
  unint64_t v7 = (char *)v5 - (char *)*a1;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  __p = 0;
  int v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  if (!(v7 >> 3))
  {
    uint64_t v8 = 0;
    __p = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    int v20 = v7 >> 3;
    if (v6 == v5) {
      goto LABEL_13;
    }
    goto LABEL_6;
  }
  if (((v7 >> 3) & 0x80000000) != 0) {
    sub_19E13D694();
  }
  uint64_t v8 = operator new((uint64_t)(v7 << 29) >> 29);
  bzero(v8, (uint64_t)(v7 << 29) >> 29);
  __p = v8;
  uint64_t v18 = (char *)v8 + ((uint64_t)(v7 << 29) >> 29);
  uint64_t v19 = (char *)v8 + 8 * (int)((uint64_t)v7 >> 3);
  int v20 = v7 >> 3;
  if (v6 != v5)
  {
LABEL_6:
    uint64_t v9 = 0;
    if (v7 - 8 < 0x18) {
      goto LABEL_11;
    }
    if ((unint64_t)((char *)v8 - (char *)v6) < 0x20) {
      goto LABEL_11;
    }
    unint64_t v10 = ((v7 - 8) >> 3) + 1;
    uint64_t v9 = v10 & 0x3FFFFFFFFFFFFFFCLL;
    uint64_t v11 = v8 + 1;
    uint64_t v12 = (long long *)(v6 + 2);
    uint64_t v13 = v10 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v14 = *v12;
      *(v11 - 1) = *(v12 - 1);
      *uint64_t v11 = v14;
      v11 += 2;
      v12 += 2;
      v13 -= 4;
    }
    while (v13);
    v6 += v10 & 0x3FFFFFFFFFFFFFFCLL;
    if (v10 != v9)
    {
LABEL_11:
      uint64_t v15 = (void *)v8 + v9;
      do
      {
        uint64_t v16 = *v6++;
        *v15++ = v16;
      }
      while (v6 != v5);
    }
  }
LABEL_13:
  if (*a2 == a2[1])
  {
    sub_19E2C7E94(a3, (uint64_t)&__p);
    if (__p)
    {
      uint64_t v18 = (char *)__p;
      operator delete(__p);
    }
  }
  else
  {
    sub_19E2C7E94(a3, (uint64_t)&__p);
    __break(1u);
  }
}

void sub_19E2C7E58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2C7E78(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E13A9BC(a1);
}

uint64_t sub_19E2C7E94(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*a1 + 8);
  sub_19E29E624(a1[1], (uint64_t)v25);
  uint64_t v4 = v26;
  uint64_t v28 = 0;
  unsigned int v29 = 0;
  uint64_t v27 = 0;
  if (!v26)
  {
    int v30 = 0;
    goto LABEL_11;
  }
  if ((v26 & 0x80000000) != 0) {
    sub_19E13D694();
  }
  double v5 = (float64x2_t *)operator new(8 * (int)v26);
  uint64_t v27 = v5;
  unsigned int v29 = (char *)&v5->f64[(int)v4];
  bzero(v5, 8 * (int)v4);
  uint64_t v28 = (char *)&v5->f64[(int)v4];
  int v30 = v4;
  uint64_t v6 = (char *)v25[0];
  if (v4 < 8)
  {
    uint64_t v7 = 0;
LABEL_9:
    uint64_t v16 = v4 - v7;
    uint64_t v17 = v7 << 32;
    do
    {
      *(double *)((char *)v5->f64 + (v17 >> 29)) = (double)*(int *)&v6[v17 >> 30];
      v17 += 0x100000000;
      --v16;
    }
    while (v16);
    goto LABEL_11;
  }
  uint64_t v7 = v4 & 0xFFFFFFF8;
  uint64_t v8 = v5 + 2;
  uint64_t v9 = (char *)v25[0] + 16;
  uint64_t v10 = v7;
  do
  {
    long long v11 = *((_OWORD *)v9 - 1);
    v12.i64[0] = (int)v11;
    v12.i64[1] = SDWORD1(v11);
    float64x2_t v13 = vcvtq_f64_s64(v12);
    v12.i64[0] = SDWORD2(v11);
    v12.i64[1] = SHIDWORD(v11);
    float64x2_t v14 = vcvtq_f64_s64(v12);
    v12.i64[0] = (int)*(_OWORD *)v9;
    v12.i64[1] = (int)HIDWORD(*(void *)v9);
    float64x2_t v15 = vcvtq_f64_s64(v12);
    v12.i64[0] = (int)*((void *)v9 + 1);
    v12.i64[1] = (int)HIDWORD(*(_OWORD *)v9);
    v8[-2] = v13;
    v8[-1] = v14;
    *uint64_t v8 = v15;
    v8[1] = vcvtq_f64_s64(v12);
    v8 += 4;
    v9 += 32;
    v10 -= 8;
  }
  while (v10);
  if (v7 != v4) {
    goto LABEL_9;
  }
LABEL_11:
  sub_19E29FF68(a2, (uint64_t)&v27, (uint64_t)__p);
  double v18 = sub_19E2C65B0(*(void *)(v3 + 8), (const double **)__p);
  double v20 = sqrt(v19);
  if (v20 < 0.00000001 || (int v21 = *(_DWORD *)(*(void *)(v3 + 8) + 120), v21 <= 0))
  {
    double v22 = (*(double (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  else
  {
    if (*(_DWORD *)(v3 + 56) != v21) {
      (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
    (**(void (***)(uint64_t, double, double))v3)(v3, v18, v20);
  }
  double v23 = v22;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v27)
  {
    uint64_t v28 = (char *)v27;
    operator delete(v27);
  }
  if (v25[0])
  {
    v25[1] = v25[0];
    operator delete(v25[0]);
  }
  return *(void *)&v23;
}

void sub_19E2C80E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p)
  {
    operator delete(__p);
    double v19 = a9;
    if (!a9) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    double v19 = a9;
    if (!a9) {
      goto LABEL_3;
    }
  }
  operator delete(v19);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E2C8160(uint64_t a1)
{
  *(void *)a1 = &unk_1EF0A8588;
  uint64_t v2 = *(char ***)(a1 + 10696);
  if (v2)
  {
    uint64_t v3 = *(char ***)(a1 + 10704);
    uint64_t v4 = v2;
    if (v3 != v2)
    {
      do
        uint64_t v3 = sub_19E2470C8(v3 - 12);
      while (v3 != v2);
      uint64_t v4 = *(char ***)(a1 + 10696);
    }
    *(void *)(a1 + 10704) = v2;
    operator delete(v4);
  }
  std::random_device::~random_device((std::random_device *)(a1 + 10688));
  std::random_device::~random_device((std::random_device *)(a1 + 8144));
  std::random_device::~random_device((std::random_device *)(a1 + 5624));
  std::random_device::~random_device((std::random_device *)(a1 + 3096));
  uint64_t v5 = *(void *)(a1 + 584);
  *(void *)(a1 + 584) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *(void *)(a1 + 504) = &unk_1EF0A7D18;
  uint64_t v6 = *(void **)(a1 + 520);
  if (v6)
  {
    *(void *)(a1 + 528) = v6;
    operator delete(v6);
  }
  sub_19E2BEE60((void *)(a1 + 176));
  uint64_t v7 = *(void *)(a1 + 152);
  if (v7)
  {
    uint64_t v8 = *(void *)(a1 + 160);
    uint64_t v9 = *(void **)(a1 + 152);
    if (v8 != v7)
    {
      uint64_t v10 = *(void *)(a1 + 160);
      do
      {
        int64x2_t v12 = *(void **)(v10 - 56);
        v10 -= 56;
        long long v11 = v12;
        if (v12)
        {
          *(void *)(v8 - 48) = v11;
          operator delete(v11);
        }
        uint64_t v8 = v10;
      }
      while (v10 != v7);
      uint64_t v9 = *(void **)(a1 + 152);
    }
    *(void *)(a1 + 160) = v7;
    operator delete(v9);
  }
  *(void *)a1 = &unk_1EF0A8318;
  sub_19E2934EC(a1 + 32);
  float64x2_t v13 = *(char ***)(a1 + 8);
  if (v13)
  {
    float64x2_t v14 = *(char ***)(a1 + 16);
    float64x2_t v15 = *(void **)(a1 + 8);
    if (v14 != v13)
    {
      do
        float64x2_t v14 = sub_19E2470C8(v14 - 13);
      while (v14 != v13);
      float64x2_t v15 = *(void **)(a1 + 8);
    }
    *(void *)(a1 + 16) = v13;
    operator delete(v15);
  }
  return a1;
}

void sub_19E2C831C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t *)(a1 + 96);
  uint64_t v4 = *(void *)(a1 + 96);
  int v6 = *(_DWORD *)(a1 + 120);
  int v7 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 120) = v6 + 1;
  *(_DWORD *)(a1 + 124) = v7;
  unint64_t v8 = v7 * (v6 + 1);
  unint64_t v9 = (*(void *)(a1 + 104) - v4) >> 3;
  if (v8 <= v9)
  {
    if (v8 < v9) {
      *(void *)(a1 + 104) = v4 + 8 * v8;
    }
  }
  else
  {
    sub_19E2482DC(a1 + 96, v8 - v9);
    int v6 = *(_DWORD *)(a1 + 120) - 1;
  }
  sub_19E29FAE8(a2, (uint64_t)__p);
  uint64_t v10 = *(int *)(a1 + 124);
  long long v11 = (char *)__p[0];
  if (!v10)
  {
    if (!__p[0]) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  uint64_t v12 = (int)v10 * (uint64_t)v6;
  uint64_t v13 = *v5;
  if (v10 >= 8 && (uint64_t v14 = 8 * v12 + v13, v14 - (unint64_t)__p[0] >= 0x20))
  {
    unint64_t v15 = v10 & 0xFFFFFFFFFFFFFFFCLL;
    double v20 = (long long *)((char *)__p[0] + 16);
    int v21 = (_OWORD *)(v14 + 16);
    unint64_t v22 = v10 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      long long v23 = *v20;
      *(v21 - 1) = *(v20 - 1);
      *int v21 = v23;
      v20 += 2;
      v21 += 2;
      v22 -= 4;
    }
    while (v22);
    if (v15 == v10) {
      goto LABEL_17;
    }
  }
  else
  {
    unint64_t v15 = 0;
  }
  uint64_t v16 = v10 - v15;
  uint64_t v17 = (void *)(v13 + 8 * (v15 + v12));
  double v18 = &v11[8 * v15];
  do
  {
    uint64_t v19 = *(void *)v18;
    v18 += 8;
    *v17++ = v19;
    --v16;
  }
  while (v16);
LABEL_17:
  __p[1] = v11;
  operator delete(v11);
LABEL_18:
  sub_19E2C8458(a1, 1, 1);
}

void sub_19E2C8458(uint64_t a1, int a2, int a3)
{
  if (a2)
  {
    uint64_t v5 = (void *)(a1 + 128);
    uint64_t v4 = *(void *)(a1 + 128);
    int v6 = *(_DWORD *)(a1 + 120);
    *(_DWORD *)(a1 + 152) = v6;
    unint64_t v7 = (*(void *)(a1 + 136) - v4) >> 3;
    uint64_t v35 = v6;
    if (v6 <= v7)
    {
      if (v6 < v7) {
        *(void *)(a1 + 136) = v4 + 8 * v6;
      }
    }
    else
    {
      sub_19E2482DC(a1 + 128, v6 - v7);
      int v6 = *(_DWORD *)(a1 + 120);
      uint64_t v35 = v6;
    }
    if (v6)
    {
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      while (1)
      {
        uint64_t v10 = *(void *)(a1 + 96);
        signed int v11 = *(_DWORD *)(a1 + 124);
        double __C = 0;
        signed int v41 = 0;
        uint64_t v42 = 0;
        if (v11) {
          break;
        }
        uint64_t v12 = 0;
        signed int v37 = 0;
        uint64_t v38 = 0;
        __p = 0;
        unsigned int v39 = 0;
LABEL_26:
        double __C = 0;
        vDSP_meanvD(*(const double **)(a1 + 288), 1, (double *)&__C, *(int *)(a1 + 312));
        *(void *)(*v5 + 8 * v9) = __C;
        if (__p)
        {
          signed int v37 = __p;
          operator delete(__p);
        }
        if (v12) {
          operator delete(v12);
        }
        ++v9;
        v8 += 8;
        if (v9 == v35) {
          goto LABEL_34;
        }
      }
      if (v11 < 0) {
        sub_19E13D694();
      }
      uint64_t v12 = operator new(8 * v11);
      bzero(v12, 8 * v11);
      if (v11 >= 8 && (unint64_t)v12 - v10 - 8 * v9 * v11 >= 0x20)
      {
        unint64_t v13 = v11 & 0xFFFFFFFFFFFFFFFCLL;
        uint64_t v28 = (long long *)(v10 + v8 * v11 + 16);
        unsigned int v29 = v12 + 1;
        unint64_t v30 = v13;
        do
        {
          long long v31 = *v28;
          *(v29 - 1) = *(v28 - 1);
          *unsigned int v29 = v31;
          v28 += 2;
          v29 += 2;
          v30 -= 4;
        }
        while (v30);
        if (v13 == v11)
        {
LABEL_16:
          __p = 0;
          signed int v37 = 0;
          uint64_t v38 = 0;
          unsigned int v39 = v11;
          sub_19E2482DC((uint64_t)&__p, v11);
          uint64_t v19 = v39;
          if ((int)v39 >= 1)
          {
            uint64_t v20 = 0;
            int v21 = (char *)__p;
            if (v39 < 4) {
              goto LABEL_22;
            }
            if ((unint64_t)((unsigned char *)__p - (unsigned char *)v12) < 0x20) {
              goto LABEL_22;
            }
            unint64_t v22 = 0;
            uint64_t v20 = v39 & 0xFFFFFFFC;
            uint64_t v23 = (8 * v39) & 0x7FFFFFFE0;
            do
            {
              long long v24 = v12[v22 / 0x10 + 1];
              unsigned int v25 = &v21[v22];
              *(_OWORD *)unsigned int v25 = v12[v22 / 0x10];
              *((_OWORD *)v25 + 1) = v24;
              v22 += 32;
            }
            while (v23 != v22);
            if (v20 != v19)
            {
LABEL_22:
              uint64_t v26 = v19 - v20;
              uint64_t v27 = v20 << 32;
              do
              {
                *(void *)&v21[v27 >> 29] = *(void *)((char *)v12 + (v27 >> 29));
                v27 += 0x100000000;
                --v26;
              }
              while (v26);
            }
          }
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v13 = 0;
      }
      unint64_t v14 = v11 - v13;
      uint64_t v15 = 8 * v13;
      uint64_t v16 = (void *)v12 + v13;
      uint64_t v17 = (uint64_t *)(v10 + v15 + v8 * v11);
      do
      {
        uint64_t v18 = *v17++;
        *v16++ = v18;
        --v14;
      }
      while (v14);
      goto LABEL_16;
    }
  }
LABEL_34:
  sub_19E2C87D8(a1 + 8, (uint64_t *)(a1 + 96), (uint64_t)&__C);
  if ((char **)(a1 + 160) != &__C) {
    sub_19E1E5B9C((void *)(a1 + 160), __C, v41, (v41 - __C) >> 3);
  }
  uint64_t v32 = __C;
  *(void *)(a1 + 184) = v43;
  if (v32)
  {
    signed int v41 = v32;
    operator delete(v32);
  }
  sub_19E2A4E4C(a1 + 160, (uint64_t)&__C);
  if ((char **)(a1 + 192) != &__C) {
    sub_19E1E5B9C((void *)(a1 + 192), __C, v41, (v41 - __C) >> 3);
  }
  signed int v33 = __C;
  *(void *)(a1 + 216) = v43;
  if (v33)
  {
    signed int v41 = v33;
    operator delete(v33);
  }
  sub_19E2C8C9C(a1);
  if (a3) {
    sub_19E2C8EC0((int32x2_t *)a1);
  }
}

void sub_19E2C8774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2C87D8(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *((unsigned int *)a2 + 6);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  if (!v4)
  {
    unint64_t v7 = 0;
    *(_DWORD *)(a3 + 24) = 0;
    *(_DWORD *)(a3 + 28) = 0;
LABEL_41:
    uint64_t v41 = (int)v4;
    if (v4) {
      goto LABEL_42;
    }
    return;
  }
  size_t v6 = 8 * (v4 * v4);
  unint64_t v7 = (char *)operator new(v6);
  *(void *)a3 = v7;
  *(void *)(a3 + 16) = &v7[v6];
  bzero(v7, v6);
  *(void *)(a3 + 8) = &v7[v6];
  *(_DWORD *)(a3 + 24) = v4;
  *(_DWORD *)(a3 + 28) = v4;
  if ((int)v4 <= 0) {
    goto LABEL_41;
  }
  uint64_t v49 = 0;
  uint64_t v8 = 0;
  uint64_t v52 = 1;
  uint64_t v47 = v4;
  uint64_t v48 = a1;
  do
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v51 = (int)v8 * v4;
    do
    {
      uint64_t v11 = *a2;
      signed int v12 = *((_DWORD *)a2 + 7);
      __p = 0;
      uint64_t v58 = 0;
      unint64_t v59 = 0;
      if (v12)
      {
        if (v12 < 0) {
          sub_19E13D694();
        }
        unint64_t v13 = v7;
        size_t v14 = 8 * v12;
        uint64_t v15 = operator new(v14);
        bzero(v15, v14);
        if (v12 < 8 || (unint64_t)v15 - v11 - 8 * v8 * v12 < 0x20)
        {
          unint64_t v16 = 0;
          goto LABEL_12;
        }
        unint64_t v16 = v12 & 0xFFFFFFFFFFFFFFFCLL;
        signed int v33 = (long long *)(v11 + v49 * v12 + 16);
        BOOL v34 = v15 + 1;
        unint64_t v35 = v16;
        do
        {
          long long v36 = *v33;
          *(v34 - 1) = *(v33 - 1);
          *BOOL v34 = v36;
          v33 += 2;
          v34 += 2;
          v35 -= 4;
        }
        while (v35);
        if (v16 != v12)
        {
LABEL_12:
          unint64_t v17 = v12 - v16;
          uint64_t v18 = 8 * v16;
          uint64_t v19 = (void *)v15 + v16;
          uint64_t v20 = (uint64_t *)(v11 + v18 + v49 * v12);
          do
          {
            uint64_t v21 = *v20++;
            *v19++ = v21;
            --v17;
          }
          while (v17);
        }
        uint64_t v53 = 0;
        long long v54 = 0;
        signed int v56 = 0;
        uint64_t v55 = 0;
        uint64_t v53 = operator new(8 * v12);
        long long v54 = (char *)v53 + v14;
        uint64_t v55 = (char *)v53 + 8 * v12;
        signed int v56 = v12;
        memcpy(v53, v15, 8 * v12);
        unint64_t v22 = operator new(8 * v12);
        bzero(v22, 8 * v12);
        if (v12 < 8 || (unint64_t)v22 - v11 - 8 * v10 * v12 < 0x20)
        {
          unint64_t v23 = 0;
          goto LABEL_17;
        }
        unint64_t v23 = v12 & 0xFFFFFFFFFFFFFFFCLL;
        signed int v37 = (long long *)(v11 + v9 * v12 + 16);
        uint64_t v38 = v22 + 1;
        unint64_t v39 = v23;
        do
        {
          long long v40 = *v37;
          *(v38 - 1) = *(v37 - 1);
          *uint64_t v38 = v40;
          v37 += 2;
          v38 += 2;
          v39 -= 4;
        }
        while (v39);
        if (v23 != v12)
        {
LABEL_17:
          unint64_t v24 = v12 - v23;
          uint64_t v25 = 8 * v23;
          uint64_t v26 = (void *)v22 + v23;
          uint64_t v27 = (uint64_t *)(v11 + v25 + v9 * v12);
          do
          {
            uint64_t v28 = *v27++;
            *v26++ = v28;
            --v24;
          }
          while (v24);
        }
        __p = 0;
        uint64_t v58 = 0;
        signed int v60 = 0;
        unint64_t v59 = 0;
        uint64_t v29 = (int)v10;
        __p = operator new(8 * v12);
        uint64_t v58 = (char *)__p + v14;
        unint64_t v59 = (char *)__p + 8 * v12;
        signed int v60 = v12;
        memcpy(__p, v22, 8 * v12);
        unint64_t v7 = v13;
        a1 = v48;
        goto LABEL_21;
      }
      uint64_t v15 = 0;
      unint64_t v22 = 0;
      long long v54 = 0;
      uint64_t v55 = 0;
      uint64_t v53 = 0;
      signed int v56 = 0;
      uint64_t v29 = (int)v10;
      __p = 0;
      uint64_t v58 = 0;
      signed int v60 = 0;
      unint64_t v59 = 0;
LABEL_21:
      double v30 = *(double *)(a1 + 16);
      double v31 = sub_19E2C50CC(a1, (uint64_t)&v53, (const double **)&__p);
      double v32 = exp(v31 * -0.5) * v30;
      if (v8 == v10) {
        double v32 = v32 + *(double *)(a1 + 8) + 1.0e-10;
      }
      *(double *)&v7[8 * v29 + 8 * v51] = v32;
      if (__p)
      {
        uint64_t v58 = (char *)__p;
        operator delete(__p);
      }
      if (v22) {
        operator delete(v22);
      }
      if (v53)
      {
        long long v54 = (char *)v53;
        operator delete(v53);
      }
      if (v15) {
        operator delete(v15);
      }
      ++v10;
      v9 += 8;
    }
    while (v10 != v52);
    ++v8;
    ++v52;
    v49 += 8;
    uint64_t v4 = v47;
  }
  while (v8 != v47);
  uint64_t v41 = v47;
LABEL_42:
  if (v41 != 1)
  {
    uint64_t v42 = 0;
    uint64_t v43 = 8 * v41;
    float64x2_t v44 = v7;
    do
    {
      if (v42)
      {
        uint64_t v45 = 0;
        unint64_t v46 = v44;
        do
        {
          *unint64_t v46 = *(void *)&v7[8 * v45++];
          unint64_t v46 = (void *)((char *)v46 + v43);
        }
        while (v42 != v45);
      }
      ++v42;
      ++v44;
      v7 += v43;
    }
    while (v42 != v41);
  }
}

void sub_19E2C8BF8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E13A9BC(a1);
}

void sub_19E2C8C20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v27 = a10;
    if (!v25)
    {
LABEL_3:
      uint64_t v28 = a18;
      if (!a18) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v27 = a10;
    if (!v25) {
      goto LABEL_3;
    }
  }
  operator delete(v25);
  uint64_t v28 = a18;
  if (!a18)
  {
LABEL_4:
    if (!v23) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  operator delete(v28);
  if (!v23)
  {
LABEL_5:
    *(void *)(v27 + 8) = v24;
    operator delete(v24);
    _Unwind_Resume(a1);
  }
LABEL_9:
  operator delete(v23);
  *(void *)(v27 + 8) = v24;
  operator delete(v24);
  _Unwind_Resume(a1);
}

void sub_19E2C8C9C(uint64_t a1)
{
  sub_19E29F880(a1 + 192, (uint64_t)v22);
  uint64_t v2 = *(unsigned int *)(a1 + 216);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 0;
    int v4 = *(_DWORD *)(a1 + 220);
    int v5 = v23;
    int v6 = 1;
    int v7 = -1;
    uint64_t v8 = v22[0];
    do
    {
      if (v4 <= v6) {
        int v9 = v6;
      }
      else {
        int v9 = v4;
      }
      int v10 = v3 + 1;
      if ((int)v3 + 1 >= v4) {
        goto LABEL_3;
      }
      unsigned int v11 = 0;
      int v12 = v9 + v7;
      uint64_t v13 = (int)v3 * (uint64_t)v5;
      if ((v9 + v7) < 4)
      {
        int v14 = v3 + 1;
      }
      else
      {
        int v14 = v3 + 1;
        if (v9 - (int)v3 + v6 - 2 >= v6)
        {
          int v15 = 0;
          unsigned int v11 = v12 & 0xFFFFFFFC;
          int v14 = v10 + (v12 & 0xFFFFFFFC);
          do
          {
            unint64_t v16 = &v8[v13 + v6 + v15];
            *unint64_t v16 = 0uLL;
            v16[1] = 0uLL;
            v15 += 4;
          }
          while ((v12 & 0xFFFFFFFC) != v15);
          if (v12 == v11) {
            goto LABEL_3;
          }
        }
      }
      unsigned int v17 = v9 - v11;
      do
      {
        v8[v13 + v14] = 0;
        int v14 = ++v11 + v10;
        --v17;
      }
      while (v6 != v17);
LABEL_3:
      ++v3;
      ++v6;
      --v7;
    }
    while (v3 != v2);
  }
  sub_19E2C9128(a1, (uint64_t)v18);
  sub_19E29F6FC((uint64_t)v22, (uint64_t)v18, (uint64_t)&__p);
  if ((void **)(a1 + 256) != &__p) {
    sub_19E1E5B9C((void *)(a1 + 256), (char *)__p, v20, (v20 - (unsigned char *)__p) >> 3);
  }
  *(_DWORD *)(a1 + 280) = v21;
  if (__p)
  {
    uint64_t v20 = (char *)__p;
    operator delete(__p);
  }
  if (v18[0])
  {
    v18[1] = v18[0];
    operator delete(v18[0]);
  }
  sub_19E29FC64((uint64_t)v22, &__p);
  sub_19E2A58A8((uint64_t)&__p, a1 + 256);
  if (__p)
  {
    uint64_t v20 = (char *)__p;
    operator delete(__p);
  }
  if (v22[0])
  {
    v22[1] = v22[0];
    operator delete(v22[0]);
  }
}

void sub_19E2C8E5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  if (a17) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2C8EC0(int32x2_t *a1)
{
  uint64_t v2 = a1[15].u32[0];
  sub_19E242424(v2, v2, (uint64_t)&__p);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = v29.i32[1] + 1;
    int v4 = __p;
    if (v2 == 1)
    {
      uint64_t v5 = 0;
LABEL_7:
      uint64_t v8 = v2 - v5;
      uint64_t v9 = v5 << 32;
      do
      {
        v4[(v9 >> 32) * v3] = 0x3FF0000000000000;
        v9 += 0x100000000;
        --v8;
      }
      while (v8);
      goto LABEL_9;
    }
    uint64_t v6 = 0;
    uint64_t v5 = v2 & 0xFFFFFFFE;
    uint64_t v7 = v5;
    do
    {
      v4[(v6 >> 32) * v3] = 0x3FF0000000000000;
      v4[((v6 >> 32) | 1) * v3] = 0x3FF0000000000000;
      v6 += 0x200000000;
      v7 -= 2;
    }
    while (v7);
    if (v5 != v2) {
      goto LABEL_7;
    }
  }
LABEL_9:
  if (&a1[28] != (int32x2_t *)&__p) {
    sub_19E1E5B9C(&a1[28], (char *)__p, v28, (v28 - (unsigned char *)__p) >> 3);
  }
  int v10 = (char *)__p;
  a1[31] = v29;
  if (v10)
  {
    uint64_t v28 = v10;
    operator delete(v10);
  }
  sub_19E29F880((uint64_t)&a1[24], (uint64_t)&__p);
  uint64_t v11 = a1[27].u32[0];
  if ((int)v11 >= 1)
  {
    uint64_t v12 = 0;
    int v13 = a1[27].i32[1];
    __int32 v14 = v29.i32[1];
    int v15 = 1;
    int v16 = -1;
    unsigned int v17 = __p;
    do
    {
      if (v13 <= v15) {
        int v18 = v15;
      }
      else {
        int v18 = v13;
      }
      int v19 = v12 + 1;
      if ((int)v12 + 1 >= v13) {
        goto LABEL_15;
      }
      unsigned int v20 = 0;
      int v21 = v18 + v16;
      uint64_t v22 = (int)v12 * (uint64_t)v14;
      if ((v18 + v16) < 4)
      {
        int v23 = v12 + 1;
      }
      else
      {
        int v23 = v12 + 1;
        if (v18 - (int)v12 + v15 - 2 >= v15)
        {
          int v24 = 0;
          unsigned int v20 = v21 & 0xFFFFFFFC;
          int v23 = v19 + (v21 & 0xFFFFFFFC);
          do
          {
            uint64_t v25 = &v17[v22 + v15 + v24];
            _OWORD *v25 = 0uLL;
            v25[1] = 0uLL;
            v24 += 4;
          }
          while ((v21 & 0xFFFFFFFC) != v24);
          if (v21 == v20) {
            goto LABEL_15;
          }
        }
      }
      unsigned int v26 = v18 - v20;
      do
      {
        v17[v22 + v23] = 0;
        int v23 = ++v20 + v19;
        --v26;
      }
      while (v15 != v26);
LABEL_15:
      ++v12;
      ++v15;
      --v16;
    }
    while (v12 != v11);
  }
  sub_19E2A59C0((uint64_t)&__p, a1 + 28);
  if (__p)
  {
    uint64_t v28 = (char *)__p;
    operator delete(__p);
  }
  sub_19E29FC64((uint64_t)&a1[24], &__p);
  sub_19E2A59C0((uint64_t)&__p, a1 + 28);
  if (__p)
  {
    uint64_t v28 = (char *)__p;
    operator delete(__p);
  }
}

void sub_19E2C9104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2C9128(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  signed int v4 = *(_DWORD *)(a1 + 312);
  uint64_t v5 = 8 * v4;
  if (v4)
  {
    if (v4 < 0) {
      sub_19E13D694();
    }
    uint64_t v6 = (char *)operator new(8 * v4);
    bzero(v6, 8 * v4);
    unint64_t v7 = 0;
    uint64_t v8 = &v6[v5];
    uint64_t v9 = *(void *)(a1 + 288);
    if (v4 < 4) {
      goto LABEL_48;
    }
    if ((unint64_t)&v6[-v9] < 0x20) {
      goto LABEL_48;
    }
    uint64_t v10 = 0;
    unint64_t v7 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v11 = v7;
    do
    {
      long long v12 = *(_OWORD *)(v9 + v10 + 16);
      int v13 = &v6[v10];
      *(_OWORD *)int v13 = *(_OWORD *)(v9 + v10);
      *((_OWORD *)v13 + 1) = v12;
      v10 += 32;
      v11 -= 4;
    }
    while (v11);
    if (v7 != v4)
    {
LABEL_48:
      do
      {
        *(void *)&v6[8 * v7] = *(void *)(v9 + 8 * v7);
        ++v7;
      }
      while (v4 != v7);
    }
    uint64_t v14 = *(int *)(a1 + 152);
    if (v14) {
      goto LABEL_10;
    }
LABEL_19:
    int v15 = 0;
    goto LABEL_20;
  }
  uint64_t v8 = 0;
  uint64_t v6 = 0;
  uint64_t v14 = *(int *)(a1 + 152);
  if (!v14) {
    goto LABEL_19;
  }
LABEL_10:
  if ((v14 & 0x80000000) != 0) {
    sub_19E13D694();
  }
  int v15 = (char *)operator new(8 * v14);
  bzero(v15, 8 * v14);
  unint64_t v16 = 0;
  uint64_t v17 = *(void *)(a1 + 128);
  if (v14 < 4) {
    goto LABEL_49;
  }
  if ((unint64_t)&v15[-v17] < 0x20) {
    goto LABEL_49;
  }
  uint64_t v18 = 0;
  unint64_t v16 = v14 & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v19 = v14 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    long long v20 = *(_OWORD *)(v17 + v18 + 16);
    int v21 = &v15[v18];
    *(_OWORD *)int v21 = *(_OWORD *)(v17 + v18);
    *((_OWORD *)v21 + 1) = v20;
    v18 += 32;
    v19 -= 4;
  }
  while (v19);
  if (v16 != v14)
  {
LABEL_49:
    do
    {
      *(void *)&v15[8 * v16] = *(void *)(v17 + 8 * v16);
      ++v16;
    }
    while (v14 != v16);
  }
LABEL_20:
  vDSP_vsubD((const double *)v15, 1, (const double *)v6, 1, (double *)v6, 1, v4);
  if (v8 != v6)
  {
    if (v8 - v6 < 0) {
      sub_19E13D694();
    }
    uint64_t v22 = (char *)operator new(v8 - v6);
    memcpy(v22, v6, v8 - v6);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)a2 = 0;
    if (!v4)
    {
      *(_DWORD *)(a2 + 24) = 0;
      operator delete(v22);
      if (!v15) {
        goto LABEL_35;
      }
LABEL_34:
      operator delete(v15);
      goto LABEL_35;
    }
LABEL_26:
    if (v4 < 0) {
      sub_19E13D694();
    }
    int v23 = (char *)operator new(8 * v4);
    *(void *)a2 = v23;
    *(void *)(a2 + 16) = &v23[8 * v4];
    bzero(v23, 8 * v4);
    *(void *)(a2 + 8) = &v23[v5];
    *(_DWORD *)(a2 + 24) = v4;
    if (v4 >= 4)
    {
      uint64_t v25 = 0;
      unint64_t v24 = v4 & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v26 = v24;
      do
      {
        long long v27 = *(_OWORD *)&v22[v25 + 16];
        uint64_t v28 = &v23[v25];
        *(_OWORD *)uint64_t v28 = *(_OWORD *)&v22[v25];
        *((_OWORD *)v28 + 1) = v27;
        v25 += 32;
        v26 -= 4;
      }
      while (v26);
      if (v24 == v4)
      {
LABEL_33:
        operator delete(v22);
        if (!v15) {
          goto LABEL_35;
        }
        goto LABEL_34;
      }
    }
    else
    {
      unint64_t v24 = 0;
    }
    do
    {
      *(void *)&v23[8 * v24] = *(void *)&v22[8 * v24];
      ++v24;
    }
    while (v4 != v24);
    goto LABEL_33;
  }
  uint64_t v22 = 0;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  if (v4) {
    goto LABEL_26;
  }
  *(_DWORD *)(a2 + 24) = 0;
  if (v15) {
    goto LABEL_34;
  }
LABEL_35:
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_19E2C9460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (v19)
  {
    operator delete(v19);
    if (!v18) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if (!v18)
  {
    goto LABEL_3;
  }
  operator delete(v18);
  _Unwind_Resume(exception_object);
}

void sub_19E2C94C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  if (a9) {
    operator delete(a9);
  }
  sub_19E13A9BC(a1);
}

void sub_19E2C94D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13) {
    JUMPOUT(0x19E2C94E8);
  }
  JUMPOUT(0x19E2C94ECLL);
}

void sub_19E2C94F4(uint64_t a1, uint64_t a2)
{
  uint64_t v32 = a2;
  sub_19E2A099C((uint64_t)&v31, *(_DWORD *)(a2 + 8) + 1);
  sub_19E248FE0((uint64_t)v29, *(_DWORD *)(a2 + 8) + 1);
  uint64_t v3 = v29[0];
  *(void *)v29[0] = 0xC01E000000000000;
  signed int v4 = __p[0];
  *(void *)__p[0] = 0x401E000000000000;
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5 >= 1)
  {
    unsigned int v6 = 0;
    signed int v7 = 1;
    if (v5 < 0xA) {
      goto LABEL_7;
    }
    if ((unint64_t)(v4 - v3) < 0x20) {
      goto LABEL_7;
    }
    int v8 = 0;
    unsigned int v6 = v5 & 0xFFFFFFFC;
    signed int v7 = v5 & 0xFFFFFFFC | 1;
    __asm
    {
      FMOV            V0.2D, #-10.0
      FMOV            V1.2D, #10.0
    }
    do
    {
      uint64_t v15 = 8 * v8;
      unint64_t v16 = &v3[v15 + 8];
      *unint64_t v16 = _Q0;
      v16[1] = _Q0;
      uint64_t v17 = &v4[v15 + 8];
      _OWORD *v17 = _Q1;
      v17[1] = _Q1;
      v8 += 4;
    }
    while (v6 != v8);
    if (v6 != v5)
    {
LABEL_7:
      unsigned int v18 = v5 - v6;
      do
      {
        uint64_t v19 = 8 * v7;
        *(void *)&v3[v19] = 0xC024000000000000;
        *(void *)&v4[v19] = 0x4024000000000000;
        signed int v7 = v6 + 2;
        ++v6;
        --v18;
      }
      while (v18);
    }
  }
  sub_19E2A16E8((uint64_t)&v31, (uint64_t *)v29);
  sub_19E2A1818((uint64_t)&v31, (uint64_t *)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v29[0])
  {
    v29[1] = v29[0];
    operator delete(v29[0]);
  }
  int v21 = *(unsigned char **)(a2 + 64);
  long long v20 = *(unsigned char **)(a2 + 72);
  uint64_t v25 = 0;
  unint64_t v26 = 0;
  long long v27 = 0;
  int64_t v22 = v20 - v21;
  if (v20 != v21)
  {
    if (v22 < 0) {
      sub_19E13D694();
    }
    int v23 = (char *)operator new(v20 - v21);
    unint64_t v24 = &v23[8 * (v22 >> 3)];
    uint64_t v25 = v23;
    long long v27 = v24;
    memcpy(v23, v21, v22);
    unint64_t v26 = v24;
  }
  int v28 = *(_DWORD *)(a2 + 88);
  sub_19E2C98A0((uint64_t)&v31, (uint64_t)&v32, (uint64_t)&v25);
}

void sub_19E2C9818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  if (__p)
  {
    operator delete(__p);
    sub_19E2A0A3C(&a29);
    _Unwind_Resume(a1);
  }
  sub_19E2A0A3C(&a29);
  _Unwind_Resume(a1);
}

void sub_19E2C9884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
}

void sub_19E2C98A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a1 + 112)) {
    (**(void (***)(uint64_t, void))a1)(a1, *(unsigned int *)(a3 + 24));
  }
  operator new();
}

void sub_19E2C9D34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  __cxa_free_exception(v15);
  if (a2 != 3)
  {
    if (a2 == 2)
    {
      uint64_t v19 = __cxa_begin_catch(a1);
      (*(void (**)(void *))(*(void *)v19 + 16))(v19);
      sub_19E29FAE8(v14, (uint64_t)&a13);
      if (a13)
      {
        a14 = (uint64_t)a13;
        operator delete(a13);
      }
      __cxa_end_catch();
LABEL_13:
      JUMPOUT(0x19E2C9B1CLL);
    }
    if (a2 != 1)
    {
      if (__p) {
        operator delete(__p);
      }
      _Unwind_Resume(a1);
    }
  }
  unsigned int v18 = __cxa_begin_catch(a1);
  (*(void (**)(void *))(*(void *)v18 + 16))(v18);
  __cxa_end_catch();
  goto LABEL_13;
}

double sub_19E2C9E84(uint64_t **a1, uint64_t *a2, int **a3)
{
  unsigned int v6 = *a1;
  int v5 = a1[1];
  unint64_t v7 = (char *)v5 - (char *)*a1;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  long long v40 = 0;
  int v43 = 0;
  double v33 = 0.0;
  __p = 0;
  unint64_t v35 = 0;
  if (!(v7 >> 3))
  {
    int v8 = 0;
    long long v40 = 0;
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    int v43 = v7 >> 3;
    if (v6 == v5) {
      goto LABEL_13;
    }
    goto LABEL_6;
  }
  if (((v7 >> 3) & 0x80000000) != 0) {
    sub_19E13D694();
  }
  int v8 = operator new((uint64_t)(v7 << 29) >> 29);
  bzero(v8, (uint64_t)(v7 << 29) >> 29);
  long long v40 = v8;
  uint64_t v41 = (char *)v8 + ((uint64_t)(v7 << 29) >> 29);
  uint64_t v42 = (char *)v8 + 8 * (int)((uint64_t)v7 >> 3);
  int v43 = v7 >> 3;
  if (v6 != v5)
  {
LABEL_6:
    uint64_t v9 = 0;
    if (v7 - 8 < 0x18) {
      goto LABEL_11;
    }
    if ((unint64_t)((char *)v8 - (char *)v6) < 0x20) {
      goto LABEL_11;
    }
    unint64_t v10 = ((v7 - 8) >> 3) + 1;
    uint64_t v9 = v10 & 0x3FFFFFFFFFFFFFFCLL;
    unint64_t v11 = v8 + 1;
    long long v12 = (long long *)(v6 + 2);
    uint64_t v13 = v10 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v14 = *v12;
      *(v11 - 1) = *(v12 - 1);
      *unint64_t v11 = v14;
      v11 += 2;
      v12 += 2;
      v13 -= 4;
    }
    while (v13);
    v6 += v10 & 0x3FFFFFFFFFFFFFFCLL;
    if (v10 != v9)
    {
LABEL_11:
      uint64_t v15 = (void *)v8 + v9;
      do
      {
        uint64_t v16 = *v6++;
        *v15++ = v16;
      }
      while (v6 != v5);
    }
  }
LABEL_13:
  if (*a2 == a2[1])
  {
    sub_19E2CA17C(a3, (uint64_t)&v40, 0, (uint64_t)&v33);
    double v17 = v33;
    if (v36)
    {
      uint64_t v31 = __p;
      if (__p)
      {
        unint64_t v35 = __p;
        goto LABEL_31;
      }
    }
  }
  else
  {
    LOBYTE(v37[0]) = 0;
    char v39 = 0;
    sub_19E2CA17C(a3, (uint64_t)&v40, 1, (uint64_t)&v33);
    double v17 = v33;
    sub_19E2A7CB8((uint64_t)v37, (uint64_t)&__p);
    if (v36 && __p)
    {
      unint64_t v35 = __p;
      operator delete(__p);
    }
    uint64_t v18 = v38;
    if (v38)
    {
      unint64_t v19 = 0;
      uint64_t v20 = v37[0];
      uint64_t v21 = *a2;
      if (v38 < 4) {
        goto LABEL_23;
      }
      if ((unint64_t)(v21 - v37[0]) < 0x20) {
        goto LABEL_23;
      }
      unint64_t v19 = v38 & 0xFFFFFFFFFFFFFFFCLL;
      int64_t v22 = (long long *)(v37[0] + 16);
      int v23 = (_OWORD *)(v21 + 16);
      unint64_t v24 = v19;
      do
      {
        long long v25 = *v22;
        *(v23 - 1) = *(v22 - 1);
        _OWORD *v23 = v25;
        v22 += 2;
        v23 += 2;
        v24 -= 4;
      }
      while (v24);
      if (v19 != v18)
      {
LABEL_23:
        uint64_t v26 = v18 - v19;
        uint64_t v27 = 8 * v19;
        int v28 = (void *)(v21 + 8 * v19);
        int32x2_t v29 = (uint64_t *)(v20 + v27);
        do
        {
          uint64_t v30 = *v29++;
          *v28++ = v30;
          --v26;
        }
        while (v26);
      }
    }
    if (v39)
    {
      uint64_t v31 = (void *)v37[0];
      if (v37[0])
      {
        v37[1] = v37[0];
LABEL_31:
        operator delete(v31);
      }
    }
  }
  if (v40)
  {
    uint64_t v41 = (char *)v40;
    operator delete(v40);
  }
  return v17;
}

void sub_19E2CA104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,void *__p,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2CA160(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E13A9BC(a1);
}

void *sub_19E2CA17C@<X0>(int **a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  sub_19E2CB320((uint64_t)&v31, *a1);
  if (v35 != (void *)a2) {
    sub_19E1E5B9C(v35, *(char **)a2, *(char **)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  }
  int v36 = *(_DWORD *)(a2 + 24);
  unint64_t v7 = *(char **)a2;
  long double v33 = exp(*(double *)v7 + *(double *)v7);
  unint64_t v8 = v32;
  if (v32)
  {
    uint64_t v9 = v34;
    if (v32 < 4 || (unint64_t)(v34 - v7 - 8) < 0x10)
    {
      unint64_t v10 = 0;
LABEL_7:
      unint64_t v11 = (double *)&v7[8 * v10 + 8];
      long long v12 = (long double *)&v9[8 * v10];
      unint64_t v13 = v8 - v10;
      do
      {
        long double v14 = *v11++;
        *v12++ = exp(v14);
        --v13;
      }
      while (v13);
      goto LABEL_9;
    }
    unint64_t v10 = v32 & 0xFFFFFFFFFFFFFFFELL;
    int64_t v22 = (long long *)(v7 + 8);
    unint64_t v23 = v32 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v34;
    do
    {
      long long v25 = *v22++;
      long double v27 = exp(*((long double *)&v25 + 1));
      *(double *)&long long v26 = exp(*(long double *)&v25);
      *((long double *)&v26 + 1) = v27;
      *(_OWORD *)unint64_t v24 = v26;
      v24 += 16;
      v23 -= 2;
    }
    while (v23);
    if (v8 != v10) {
      goto LABEL_7;
    }
  }
LABEL_9:
  sub_19E2C8458((uint64_t)&v31, 0, a3);
  double v15 = sub_19E2CA3F8((uint64_t)&v31);
  double v16 = v15;
  if (a3)
  {
    sub_19E2CA628((uint64_t)&v31, (uint64_t)&v28);
    *(void *)(a4 + 8) = 0;
    *(double *)a4 = v16;
    *(void *)(a4 + 16) = 0;
    *(void *)(a4 + 24) = 0;
    double v17 = v28;
    int64_t v18 = v29 - v28;
    if (v29 != v28)
    {
      if (v18 < 0) {
        sub_19E13D694();
      }
      unint64_t v19 = (char *)operator new(v29 - v28);
      *(void *)(a4 + 8) = v19;
      uint64_t v20 = &v19[8 * (v18 >> 3)];
      *(void *)(a4 + 24) = v20;
      memcpy(v19, v17, v18);
      *(void *)(a4 + 16) = v20;
    }
    *(_DWORD *)(a4 + 32) = v30;
    *(unsigned char *)(a4 + 40) = 1;
    if (v17)
    {
      int32x2_t v29 = v17;
      operator delete(v17);
    }
  }
  else
  {
    *(double *)a4 = v15;
    *(unsigned char *)(a4 + 8) = 0;
    *(unsigned char *)(a4 + 40) = 0;
  }
  return sub_19E2BEE60(&v31);
}

void sub_19E2CA370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_19E2BEE60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19E2CA384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v21 = *v19;
  if (*v19)
  {
    *(void *)(v18 + 16) = v21;
    operator delete(v21);
    int64_t v22 = __p;
    if (!__p)
    {
LABEL_3:
      sub_19E2BEE60(&a18);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    int64_t v22 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  operator delete(v22);
  sub_19E2BEE60(&a18);
  _Unwind_Resume(a1);
}

void sub_19E2CA3D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_19E2BEE60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19E2CA3E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_19E2BEE60((uint64_t *)va);
  _Unwind_Resume(a1);
}

double sub_19E2CA3F8(uint64_t a1)
{
  sub_19E2C9128(a1, (uint64_t)&__A);
  __C[0] = 0;
  vDSP_dotprD(__A, 1, *(const double **)(a1 + 256), 1, (double *)__C, (int)__N);
  uint64_t v2 = __C[0];
  if (__A)
  {
    double v17 = __A;
    operator delete(__A);
  }
  uint64_t v3 = *(int *)(a1 + 220);
  if ((int)v3 >= *(_DWORD *)(a1 + 216)) {
    int v4 = *(_DWORD *)(a1 + 216);
  }
  else {
    int v4 = *(_DWORD *)(a1 + 220);
  }
  __A = 0;
  double v17 = 0;
  uint64_t v18 = 0;
  if (v4)
  {
    if (v4 < 0) {
      sub_19E13D694();
    }
    int v5 = operator new(8 * v4);
    bzero(v5, 8 * v4);
    uint64_t v6 = 0;
    unint64_t v7 = *(void **)(a1 + 192);
    do
    {
      *((void *)v5 + v6++) = *v7;
      v7 += v3 + 1;
    }
    while (v4 != v6);
    __p = operator new(8 * v4);
    unint64_t v11 = (char *)__p + 8 * v4;
    long long v12 = v11;
    int v13 = v4;
    memcpy(__p, v5, 8 * v4);
  }
  else
  {
    int v5 = 0;
    unint64_t v11 = 0;
    long long v12 = 0;
    __p = 0;
    int v13 = 0;
  }
  sub_19E2A7AC4((uint64_t)&__p, (uint64_t)__C);
  __A = 0;
  vDSP_sveD((const double *)__C[0], 1, (double *)&__A, (int)v15);
  unint64_t v8 = __A;
  if (__C[0])
  {
    __C[1] = __C[0];
    operator delete(__C[0]);
  }
  if (__p)
  {
    unint64_t v11 = (char *)__p;
    operator delete(__p);
  }
  if (v5) {
    operator delete(v5);
  }
  return (double)*(int *)(a1 + 120) * -0.918938533 - (*(double *)&v8 - *(double *)&v2 * -0.5);
}

void sub_19E2CA5A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v20 = a9;
    if (!a9)
    {
LABEL_3:
      if (!v18) {
LABEL_8:
      }
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(v18);
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v20 = a9;
    if (!a9) {
      goto LABEL_3;
    }
  }
  operator delete(v20);
  if (!v18) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void sub_19E2CA60C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E13A9BC(a1);
}

void sub_19E2CA628(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  CFTypeRef v121 = 0;
  uint64_t v122 = 0;
  int v123 = 0;
  uint64_t v3 = *(unsigned char **)(a1 + 224);
  uint64_t v2 = *(unsigned char **)(a1 + 232);
  int64_t v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0) {
      sub_19E13D694();
    }
    int v5 = (double *)operator new(v2 - v3);
    uint64_t v6 = &v5[v4 >> 3];
    CFTypeRef v121 = v5;
    int v123 = v6;
    memcpy(v5, v3, v4);
    uint64_t v122 = v6;
  }
  unint64_t v7 = *(unsigned char **)(a1 + 256);
  unint64_t v124 = *(void *)(a1 + 248);
  unint64_t v106 = 0;
  long long v107 = 0;
  uint64_t v105 = 0;
  unint64_t v8 = *(unsigned char **)(a1 + 264);
  int64_t v9 = v8 - v7;
  if (v8 != v7)
  {
    if (v9 < 0) {
      sub_19E13D694();
    }
    unint64_t v10 = (char *)operator new(v8 - v7);
    unint64_t v11 = &v10[8 * (v9 >> 3)];
    uint64_t v105 = v10;
    long long v107 = v11;
    memcpy(v10, v7, v9);
    unint64_t v106 = v11;
  }
  int v108 = *(_DWORD *)(a1 + 280);
  sub_19E29FAE8(a1 + 256, (uint64_t)&v101);
  sub_19E2A7BA8((uint64_t)&v105, (uint64_t)&v101, (uint64_t)&__p);
  unint64_t v113 = 0;
  char v114 = 0;
  uint64_t v115 = 0;
  long long v12 = __p;
  int64_t v13 = v110 - (unsigned char *)__p;
  if (v110 == __p)
  {
    vDSP_Length v15 = 0;
    long double v14 = 0;
  }
  else
  {
    if (v13 < 0) {
      sub_19E13D694();
    }
    long double v14 = (char *)operator new(v110 - (unsigned char *)__p);
    vDSP_Length v15 = &v14[8 * (v13 >> 3)];
    unint64_t v113 = v14;
    uint64_t v115 = v15;
    memcpy(v14, v12, v13);
    char v114 = v15;
  }
  unint64_t v16 = v112;
  unint64_t v116 = v112;
  unint64_t v17 = HIDWORD(v112);
  vDSP_Length v18 = HIDWORD(v112) * (int)v112;
  vDSP_vsubD(v121, 1, (const double *)v14, 1, (double *)v14, 1, v18);
  uint64_t v117 = 0;
  int v118 = 0;
  long long v119 = 0;
  int64_t v19 = v15 - v14;
  if (!v19)
  {
    uint64_t v20 = 0;
    unint64_t v120 = v16;
    int64_t v126 = 0;
    unint64_t v127 = 0;
    uint64_t v125 = 0;
    if (v18) {
      goto LABEL_14;
    }
LABEL_18:
    int64_t v22 = 0;
    uint64_t v21 = 0;
    unint64_t v128 = __PAIR64__(v17, v16);
    goto LABEL_23;
  }
  if (v19 < 0) {
    sub_19E13D694();
  }
  uint64_t v20 = (char *)operator new(v19);
  uint64_t v117 = v20;
  long long v119 = &v20[8 * (v19 >> 3)];
  memcpy(v20, v14, v19);
  int v118 = &v20[8 * (v19 >> 3)];
  unint64_t v120 = v16;
  int64_t v126 = 0;
  unint64_t v127 = 0;
  uint64_t v125 = 0;
  if (!v18) {
    goto LABEL_18;
  }
LABEL_14:
  if ((v18 & 0x80000000) != 0) {
    sub_19E13D694();
  }
  uint64_t v21 = (char *)operator new(8 * v18);
  uint64_t v125 = v21;
  unint64_t v127 = &v21[8 * v18];
  bzero(v21, 8 * v18);
  int64_t v22 = &v21[8 * v18];
  unint64_t v128 = __PAIR64__(v17, v16);
  if (v18 < 4)
  {
    for (unint64_t i = 0; i != v18; ++i)
LABEL_22:
      *(void *)&v21[8 * i] = *(void *)&v20[8 * i];
    goto LABEL_23;
  }
  uint64_t v24 = 0;
  unint64_t i = v18 & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v25 = v18 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    long long v26 = *(_OWORD *)&v20[v24 + 16];
    long double v27 = &v21[v24];
    *(_OWORD *)long double v27 = *(_OWORD *)&v20[v24];
    *((_OWORD *)v27 + 1) = v26;
    v24 += 32;
    v25 -= 4;
  }
  while (v25);
  if (i != v18) {
    goto LABEL_22;
  }
LABEL_23:
  sub_19E1E5B9C(&v121, v21, v22, (v22 - v21) >> 3);
  unint64_t v124 = v128;
  if (v21)
  {
    int64_t v126 = v21;
    operator delete(v21);
  }
  if (v20)
  {
    int v118 = v20;
    operator delete(v20);
  }
  if (v14)
  {
    char v114 = v14;
    operator delete(v14);
  }
  if (__p)
  {
    unsigned int v110 = __p;
    operator delete(__p);
  }
  if (v101)
  {
    unint64_t v102 = (char *)v101;
    operator delete(v101);
  }
  if (v105)
  {
    unint64_t v106 = v105;
    operator delete(v105);
  }
  int v28 = *(_DWORD *)(a1 + 8);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  vDSP_Length v98 = v28 + 1;
  if (v28 == -1)
  {
    *(_DWORD *)(a2 + 24) = 0;
    uint64_t v96 = *(int *)(a1 + 120);
    if (!v96) {
      goto LABEL_125;
    }
    goto LABEL_40;
  }
  if (v28 <= -2) {
    sub_19E13D694();
  }
  int32x2_t v29 = (char *)operator new(8 * v98);
  *(void *)a2 = v29;
  *(void *)(a2 + 8) = &v29[8 * v98];
  *(void *)(a2 + 16) = &v29[8 * v28 + 8];
  *(_DWORD *)(a2 + 24) = v28 + 1;
  bzero(v29, 8 * v98);
  uint64_t v96 = *(int *)(a1 + 120);
  if (v96)
  {
LABEL_40:
    uint64_t v97 = 0;
    for (unint64_t j = 0; j != v96; ++j)
    {
      uint64_t v31 = 0;
      unint64_t v32 = 0;
      do
      {
        uint64_t v33 = *(void *)(a1 + 96);
        uint64_t v34 = *(unsigned int *)(a1 + 124);
        uint64_t v125 = 0;
        int64_t v126 = 0;
        unint64_t v127 = 0;
        if (!v34)
        {
          unint64_t v35 = 0;
          unsigned int v110 = 0;
          char v111 = 0;
          __p = 0;
          LODWORD(v112) = 0;
LABEL_72:
          uint64_t v52 = 0;
          unint64_t v102 = 0;
          uint64_t v103 = 0;
          uint64_t v101 = 0;
          int v104 = 0;
          goto LABEL_76;
        }
        if ((v34 & 0x80000000) != 0) {
          sub_19E13D694();
        }
        unint64_t v35 = operator new(8 * (int)v34);
        bzero(v35, 8 * (int)v34);
        if (v34 < 8 || (unint64_t)v35 - v33 - 8 * j * (int)v34 < 0x20)
        {
          unint64_t v36 = 0;
LABEL_49:
          unint64_t v37 = (int)v34 - v36;
          uint64_t v38 = 8 * v36;
          char v39 = (void *)v35 + v36;
          long long v40 = (uint64_t *)(v33 + v38 + v97 * (int)v34);
          do
          {
            uint64_t v41 = *v40++;
            *v39++ = v41;
            --v37;
          }
          while (v37);
          goto LABEL_51;
        }
        unint64_t v36 = (int)v34 & 0xFFFFFFFFFFFFFFFCLL;
        uint64_t v88 = (long long *)(v33 + v97 * (int)v34 + 16);
        size_t v89 = v35 + 1;
        unint64_t v90 = v36;
        do
        {
          long long v91 = *v88;
          *(v89 - 1) = *(v88 - 1);
          *size_t v89 = v91;
          v88 += 2;
          v89 += 2;
          v90 -= 4;
        }
        while (v90);
        if (v36 != (int)v34) {
          goto LABEL_49;
        }
LABEL_51:
        __p = 0;
        unsigned int v110 = 0;
        char v111 = 0;
        LODWORD(v112) = v34;
        uint64_t v42 = operator new(8 * (int)v34);
        bzero(v42, 8 * (int)v34);
        __p = v42;
        unsigned int v110 = (char *)v42 + 8 * (int)v34;
        char v111 = v110;
        if ((v34 - 6) >= 0x7FFFFFFB)
        {
          uint64_t v43 = 0;
LABEL_58:
          uint64_t v48 = v34 - v43;
          uint64_t v49 = v43 << 32;
          do
          {
            *(void *)((char *)v42 + (v49 >> 29)) = *(void *)((char *)v35 + (v49 >> 29));
            v49 += 0x100000000;
            --v48;
          }
          while (v48);
          goto LABEL_60;
        }
        uint64_t v43 = v34 & 0xFFFFFFFC;
        float64x2_t v44 = v42 + 1;
        uint64_t v45 = v35 + 1;
        uint64_t v46 = v43;
        do
        {
          long long v47 = *v45;
          *(v44 - 1) = *(v45 - 1);
          _OWORD *v44 = v47;
          v44 += 2;
          v45 += 2;
          v46 -= 4;
        }
        while (v46);
        if (v43 != v34) {
          goto LABEL_58;
        }
LABEL_60:
        uint64_t v50 = *(void *)(a1 + 96);
        uint64_t v51 = *(unsigned int *)(a1 + 124);
        uint64_t v125 = 0;
        int64_t v126 = 0;
        unint64_t v127 = 0;
        if (!v51) {
          goto LABEL_72;
        }
        if ((v51 & 0x80000000) != 0) {
          sub_19E13D694();
        }
        uint64_t v52 = operator new(8 * (int)v51);
        bzero(v52, 8 * (int)v51);
        if (v51 < 8 || (unint64_t)v52 - v50 - 8 * v32 * (int)v51 < 0x20)
        {
          unint64_t v53 = 0;
LABEL_65:
          unint64_t v54 = (int)v51 - v53;
          uint64_t v55 = 8 * v53;
          signed int v56 = (void *)v52 + v53;
          double v57 = (uint64_t *)(v50 + v55 + v31 * (int)v51);
          do
          {
            uint64_t v58 = *v57++;
            *v56++ = v58;
            --v54;
          }
          while (v54);
          goto LABEL_67;
        }
        unint64_t v53 = (int)v51 & 0xFFFFFFFFFFFFFFFCLL;
        v92 = (long long *)(v50 + v31 * (int)v51 + 16);
        unint64_t v93 = v52 + 1;
        unint64_t v94 = v53;
        do
        {
          long long v95 = *v92;
          *(v93 - 1) = *(v92 - 1);
          _OWORD *v93 = v95;
          v92 += 2;
          v93 += 2;
          v94 -= 4;
        }
        while (v94);
        if (v53 != (int)v51) {
          goto LABEL_65;
        }
LABEL_67:
        uint64_t v101 = 0;
        unint64_t v102 = 0;
        uint64_t v103 = 0;
        int v104 = v51;
        unint64_t v59 = (char *)operator new(8 * (int)v51);
        bzero(v59, 8 * (int)v51);
        uint64_t v101 = v59;
        unint64_t v102 = &v59[8 * (int)v51];
        uint64_t v103 = v102;
        if ((v51 - 6) >= 0x7FFFFFFB)
        {
          uint64_t v61 = 0;
LABEL_74:
          uint64_t v64 = v51 - v61;
          uint64_t v65 = v61 << 32;
          do
          {
            *(void *)&v59[v65 >> 29] = *(void *)((char *)v52 + (v65 >> 29));
            v65 += 0x100000000;
            --v64;
          }
          while (v64);
          goto LABEL_76;
        }
        unint64_t v60 = 0;
        uint64_t v61 = v51 & 0xFFFFFFFC;
        do
        {
          long long v62 = v52[v60 / 0x10 + 1];
          signed int v63 = &v59[v60];
          *(_OWORD *)signed int v63 = v52[v60 / 0x10];
          *((_OWORD *)v63 + 1) = v62;
          v60 += 32;
        }
        while (((8 * v51) & 0x7FFFFFFE0) != v60);
        if (v61 != v51) {
          goto LABEL_74;
        }
LABEL_76:
        sub_19E2CB858(a1 + 8, (uint64_t)&__p, (const double **)&v101, (uint64_t)&v117);
        if (v101)
        {
          unint64_t v102 = (char *)v101;
          operator delete(v101);
        }
        if (v52) {
          operator delete(v52);
        }
        if (__p)
        {
          unsigned int v110 = __p;
          operator delete(__p);
        }
        if (v35) {
          operator delete(v35);
        }
        if (j == v32)
        {
          uint64_t v66 = SHIDWORD(v124);
          unint64_t v67 = v121;
          unint64_t v68 = v117;
          int64_t v69 = v118 - v117;
          if (v118 == v117)
          {
            uint64_t v71 = 0;
            unint64_t v70 = 0;
          }
          else
          {
            if (v69 < 0) {
              sub_19E13D694();
            }
            unint64_t v70 = (char *)operator new(v118 - v117);
            uint64_t v71 = &v70[8 * (v69 >> 3)];
            memcpy(v70, v68, v69);
          }
          uint64_t v77 = &v67[j + j * v66];
          int v78 = v120;
          vDSP_vsmulD((const double *)v70, 1, v77, (double *)v70, 1, (int)v120);
          int64_t v79 = v71 - v70;
          if (v79)
          {
            if (v79 < 0) {
              sub_19E13D694();
            }
            uint64_t v80 = (char *)operator new(v79);
            uint64_t v81 = &v80[8 * (v79 >> 3)];
            memcpy(v80, v70, v79);
          }
          else
          {
            uint64_t v81 = 0;
            uint64_t v80 = 0;
          }
          __p = (void *)0x3FE0000000000000;
          vDSP_vsmulD((const double *)v80, 1, (const double *)&__p, (double *)v80, 1, v78);
          uint64_t v125 = 0;
          int64_t v126 = 0;
          unint64_t v127 = 0;
          int64_t v86 = v81 - v80;
          if (v81 == v80)
          {
            unint64_t v87 = 0;
          }
          else
          {
            if (v86 < 0) {
              sub_19E13D694();
            }
            unint64_t v87 = (char *)operator new(v81 - v80);
            uint64_t v125 = v87;
            unint64_t v127 = &v87[8 * (v86 >> 3)];
            memcpy(v87, v80, v86);
            int64_t v126 = &v87[8 * (v86 >> 3)];
          }
          LODWORD(v128) = v78;
          vDSP_vaddD(*(const double **)a2, 1, (const double *)v87, 1, *(double **)a2, 1, v98);
          if (v87) {
            operator delete(v87);
          }
          if (v80) {
            operator delete(v80);
          }
          if (v70) {
            goto LABEL_114;
          }
        }
        else
        {
          uint64_t v72 = SHIDWORD(v124);
          uint64_t v73 = v121;
          uint64_t v74 = v117;
          int64_t v75 = v118 - v117;
          if (v118 == v117)
          {
            unint64_t v76 = 0;
            unint64_t v70 = 0;
          }
          else
          {
            if (v75 < 0) {
              sub_19E13D694();
            }
            unint64_t v70 = (char *)operator new(v118 - v117);
            unint64_t v76 = &v70[8 * (v75 >> 3)];
            memcpy(v70, v74, v75);
          }
          uint64_t v82 = &v73[v32 + j * v72];
          int v83 = v120;
          vDSP_vsmulD((const double *)v70, 1, v82, (double *)v70, 1, (int)v120);
          uint64_t v125 = 0;
          int64_t v126 = 0;
          unint64_t v127 = 0;
          uint64_t v84 = v76 - v70;
          if (v76 == v70)
          {
            unint64_t v85 = 0;
          }
          else
          {
            if (v84 < 0) {
              sub_19E13D694();
            }
            unint64_t v85 = (char *)operator new(v76 - v70);
            uint64_t v125 = v85;
            unint64_t v127 = &v85[8 * (v84 >> 3)];
            memcpy(v85, v70, v76 - v70);
            int64_t v126 = &v85[8 * (v84 >> 3)];
          }
          LODWORD(v128) = v83;
          vDSP_vaddD(*(const double **)a2, 1, (const double *)v85, 1, *(double **)a2, 1, v98);
          if (v85) {
            operator delete(v85);
          }
          if (v70) {
LABEL_114:
          }
            operator delete(v70);
        }
        if (v117)
        {
          int v118 = v117;
          operator delete(v117);
        }
        ++v32;
        v31 += 8;
      }
      while (v32 <= j);
      v97 += 8;
    }
  }
LABEL_125:
  if (v121)
  {
    uint64_t v122 = v121;
    operator delete(v121);
  }
}

void sub_19E2CB078(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  vDSP_Length v15 = *(void **)a14;
  if (*(void *)a14)
  {
    *(void *)(a14 + 8) = v15;
    operator delete(v15);
  }
  sub_19E13A9BC(a1);
}

void sub_19E2CB09C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37)
{
  if (v39) {
    operator delete(v39);
  }
  if (v38)
  {
    *(void *)(v40 - 176) = v38;
    operator delete(v38);
  }
  if (v37)
  {
    *(void *)(v40 - 208) = v37;
    operator delete(v37);
  }
  if (__p)
  {
    operator delete(__p);
    uint64_t v42 = a28;
    if (!a28)
    {
LABEL_9:
      uint64_t v43 = a32;
      if (!a32)
      {
LABEL_14:
        float64x2_t v44 = *(void **)(v40 - 152);
        if (v44)
        {
          *(void *)(v40 - 144) = v44;
          operator delete(v44);
        }
        _Unwind_Resume(exception_object);
      }
LABEL_13:
      operator delete(v43);
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v42 = a28;
    if (!a28) {
      goto LABEL_9;
    }
  }
  operator delete(v42);
  uint64_t v43 = a32;
  if (!a32) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_19E2CB2D0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37)
{
  if (__p)
  {
    operator delete(__p);
    if (!v38)
    {
LABEL_3:
      char v39 = a36;
      if (!a36) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if (!v38)
  {
    goto LABEL_3;
  }
  operator delete(v38);
  char v39 = a36;
  if (!a36)
  {
LABEL_4:
    if (v37) {
      goto LABEL_12;
    }
    goto LABEL_13;
  }
LABEL_8:
  operator delete(v39);
  if (v37) {
LABEL_12:
  }
    JUMPOUT(0x19E2CB27CLL);
LABEL_13:
  JUMPOUT(0x19E2CB280);
}

uint64_t sub_19E2CB320(uint64_t a1, int *a2)
{
  int v4 = *a2;
  *(unsigned char *)(a1 + 4) = *((unsigned char *)a2 + 4);
  *(_DWORD *)a1 = v4;
  sub_19E2CB72C(a1 + 8, (uint64_t)(a2 + 2));
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t v6 = (unsigned char *)*((void *)a2 + 12);
  int v5 = (unsigned char *)*((void *)a2 + 13);
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      sub_19E13D694();
    }
    unint64_t v8 = (char *)operator new(v5 - v6);
    *(void *)(a1 + 96) = v8;
    *(void *)(a1 + 104) = v8;
    int64_t v9 = &v8[8 * (v7 >> 3)];
    *(void *)(a1 + 112) = v9;
    memcpy(v8, v6, v7);
    *(void *)(a1 + 104) = v9;
  }
  uint64_t v10 = *((void *)a2 + 15);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 120) = v10;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  long long v12 = (unsigned char *)*((void *)a2 + 16);
  unint64_t v11 = (unsigned char *)*((void *)a2 + 17);
  int64_t v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0) {
      sub_19E13D694();
    }
    long double v14 = (char *)operator new(v11 - v12);
    *(void *)(a1 + 128) = v14;
    *(void *)(a1 + 136) = v14;
    vDSP_Length v15 = &v14[8 * (v13 >> 3)];
    *(void *)(a1 + 144) = v15;
    memcpy(v14, v12, v13);
    *(void *)(a1 + 136) = v15;
  }
  int v16 = a2[38];
  *(void *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 152) = v16;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  vDSP_Length v18 = (unsigned char *)*((void *)a2 + 20);
  unint64_t v17 = (unsigned char *)*((void *)a2 + 21);
  int64_t v19 = v17 - v18;
  if (v17 != v18)
  {
    if (v19 < 0) {
      sub_19E13D694();
    }
    uint64_t v20 = (char *)operator new(v17 - v18);
    *(void *)(a1 + 160) = v20;
    *(void *)(a1 + 168) = v20;
    uint64_t v21 = &v20[8 * (v19 >> 3)];
    *(void *)(a1 + 176) = v21;
    memcpy(v20, v18, v19);
    *(void *)(a1 + 168) = v21;
  }
  uint64_t v22 = *((void *)a2 + 23);
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 184) = v22;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  uint64_t v24 = (unsigned char *)*((void *)a2 + 24);
  unint64_t v23 = (unsigned char *)*((void *)a2 + 25);
  int64_t v25 = v23 - v24;
  if (v23 != v24)
  {
    if (v25 < 0) {
      sub_19E13D694();
    }
    long long v26 = (char *)operator new(v23 - v24);
    *(void *)(a1 + 192) = v26;
    *(void *)(a1 + 200) = v26;
    long double v27 = &v26[8 * (v25 >> 3)];
    *(void *)(a1 + 208) = v27;
    memcpy(v26, v24, v25);
    *(void *)(a1 + 200) = v27;
  }
  uint64_t v28 = *((void *)a2 + 27);
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 216) = v28;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  int v30 = (unsigned char *)*((void *)a2 + 28);
  int32x2_t v29 = (unsigned char *)*((void *)a2 + 29);
  int64_t v31 = v29 - v30;
  if (v29 != v30)
  {
    if (v31 < 0) {
      sub_19E13D694();
    }
    unint64_t v32 = (char *)operator new(v29 - v30);
    *(void *)(a1 + 224) = v32;
    *(void *)(a1 + 232) = v32;
    uint64_t v33 = &v32[8 * (v31 >> 3)];
    *(void *)(a1 + 240) = v33;
    memcpy(v32, v30, v31);
    *(void *)(a1 + 232) = v33;
  }
  *(void *)(a1 + 248) = *((void *)a2 + 31);
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  unint64_t v35 = (unsigned char *)*((void *)a2 + 32);
  uint64_t v34 = (unsigned char *)*((void *)a2 + 33);
  int64_t v36 = v34 - v35;
  if (v34 != v35)
  {
    if (v36 < 0) {
      sub_19E13D694();
    }
    uint64_t v37 = (char *)operator new(v34 - v35);
    *(void *)(a1 + 256) = v37;
    *(void *)(a1 + 264) = v37;
    uint64_t v38 = &v37[8 * (v36 >> 3)];
    *(void *)(a1 + 272) = v38;
    memcpy(v37, v35, v36);
    *(void *)(a1 + 264) = v38;
  }
  *(_DWORD *)(a1 + 280) = a2[70];
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 288) = 0;
  uint64_t v40 = (unsigned char *)*((void *)a2 + 36);
  char v39 = (unsigned char *)*((void *)a2 + 37);
  int64_t v41 = v39 - v40;
  if (v39 != v40)
  {
    if (v41 < 0) {
      sub_19E13D694();
    }
    uint64_t v42 = (char *)operator new(v39 - v40);
    *(void *)(a1 + 288) = v42;
    *(void *)(a1 + 296) = v42;
    uint64_t v43 = &v42[8 * (v41 >> 3)];
    *(void *)(a1 + 304) = v43;
    memcpy(v42, v40, v41);
    *(void *)(a1 + 296) = v43;
  }
  *(_DWORD *)(a1 + 312) = a2[78];
  return a1;
}

void sub_19E2CB5FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void *a10)
{
  vDSP_Length v18 = *v16;
  if (*v16)
  {
    v10[37] = v18;
    operator delete(v18);
    int64_t v19 = *a9;
    if (!*a9)
    {
LABEL_3:
      uint64_t v20 = *v15;
      if (!*v15) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else
  {
    int64_t v19 = *a9;
    if (!*a9) {
      goto LABEL_3;
    }
  }
  v10[33] = v19;
  operator delete(v19);
  uint64_t v20 = *v15;
  if (!*v15)
  {
LABEL_4:
    uint64_t v21 = *v14;
    if (!*v14) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  v10[29] = v20;
  operator delete(v20);
  uint64_t v21 = *v14;
  if (!*v14)
  {
LABEL_5:
    uint64_t v22 = *v13;
    if (!*v13) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  v10[25] = v21;
  operator delete(v21);
  uint64_t v22 = *v13;
  if (!*v13)
  {
LABEL_6:
    unint64_t v23 = *v12;
    if (!*v12) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }
LABEL_13:
  v10[21] = v22;
  operator delete(v22);
  unint64_t v23 = *v12;
  if (!*v12)
  {
LABEL_7:
    uint64_t v24 = *v11;
    if (!*v11) {
      goto LABEL_8;
    }
    goto LABEL_15;
  }
LABEL_14:
  v10[17] = v23;
  operator delete(v23);
  uint64_t v24 = *v11;
  if (!*v11)
  {
LABEL_8:
    sub_19E2BADC4(a10);
    _Unwind_Resume(a1);
  }
LABEL_15:
  v10[13] = v24;
  operator delete(v24);
  sub_19E2BADC4(a10);
  _Unwind_Resume(a1);
}

uint64_t sub_19E2CB72C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(unsigned char **)(a2 + 24);
  int v5 = *(unsigned char **)(a2 + 32);
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      sub_19E13D694();
    }
    unint64_t v8 = (char *)operator new(v5 - v6);
    *(void *)(a1 + 24) = v8;
    *(void *)(a1 + 32) = v8;
    int64_t v9 = &v8[8 * (v7 >> 3)];
    *(void *)(a1 + 40) = v9;
    memcpy(v8, v6, v7);
    *(void *)(a1 + 32) = v9;
  }
  int v10 = *(_DWORD *)(a2 + 48);
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 48) = v10;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  long long v12 = *(unsigned char **)(a2 + 56);
  unint64_t v11 = *(unsigned char **)(a2 + 64);
  int64_t v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0) {
      sub_19E13D694();
    }
    long double v14 = (char *)operator new(v11 - v12);
    *(void *)(a1 + 56) = v14;
    *(void *)(a1 + 64) = v14;
    vDSP_Length v15 = &v14[8 * (v13 >> 3)];
    *(void *)(a1 + 72) = v15;
    memcpy(v14, v12, v13);
    *(void *)(a1 + 64) = v15;
  }
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  return a1;
}

void sub_19E2CB824(_Unwind_Exception *exception_object)
{
  int v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 64) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2CB858(uint64_t a1@<X0>, uint64_t a2@<X1>, const double **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = 0;
  int64_t v9 = 0;
  int v10 = 0;
  int v11 = *(_DWORD *)a1;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = 0;
  *(_DWORD *)(a4 + 24) = 0;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  unint64_t v53 = 0;
  int v12 = v11 + 1;
  if (v11 != -1)
  {
    if (v11 <= -2) {
      sub_19E13D694();
    }
    int v10 = (double *)operator new(8 * v12);
    uint64_t v8 = (uint64_t)&v10[v11 + 1];
    bzero(v10, 8 * v12);
    int64_t v9 = &v10[v12];
  }
  *(void *)a4 = v10;
  *(void *)(a4 + 8) = v9;
  *(void *)(a4 + 16) = v8;
  *(_DWORD *)(a4 + 24) = v12;
  long double v14 = *(const void **)a2;
  uint64_t v13 = *(void *)(a2 + 8);
  int64_t v15 = v13 - *(void *)a2;
  if (v13 == *(void *)a2)
  {
    unint64_t v17 = 0;
    int v16 = 0;
  }
  else
  {
    if (v15 < 0) {
      sub_19E13D694();
    }
    int v16 = (char *)operator new(v13 - *(void *)a2);
    unint64_t v17 = &v16[8 * (v15 >> 3)];
    memcpy(v16, v14, v15);
  }
  int v18 = *(_DWORD *)(a2 + 24);
  vDSP_vsubD(*a3, 1, (const double *)v16, 1, (double *)v16, 1, v18);
  int64_t v19 = v17 - v16;
  if (v17 == v16)
  {
    uint64_t v21 = 0;
    uint64_t v20 = 0;
  }
  else
  {
    if (v19 < 0) {
      sub_19E13D694();
    }
    uint64_t v20 = (char *)operator new(v17 - v16);
    uint64_t v21 = &v20[8 * (v19 >> 3)];
    memcpy(v20, v16, v19);
  }
  vDSP_vdivD(*(const double **)(a1 + 24), 1, (const double *)v20, 1, (double *)v20, 1, v18);
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  long long v47 = 0;
  uint64_t v22 = v21 - v20;
  if (v21 != v20)
  {
    if (v22 < 0) {
      sub_19E13D694();
    }
    unint64_t v23 = (char *)operator new(v21 - v20);
    uint64_t v24 = &v23[8 * (v22 >> 3)];
    uint64_t v45 = v23;
    long long v47 = v24;
    memcpy(v23, v20, v21 - v20);
    uint64_t v46 = v24;
  }
  int v48 = v18;
  sub_19E2C2AC8((uint64_t)&v45, (uint64_t)__p);
  signed int v25 = v50;
  uint64_t v52 = 0;
  unint64_t v53 = 0;
  uint64_t v51 = 0;
  if (v50)
  {
    if (v50 < 0) {
      sub_19E13D694();
    }
    long long v26 = (float64x2_t *)operator new(8 * v50);
    uint64_t v51 = v26;
    unint64_t v53 = (char *)&v26->f64[v25];
    bzero(v26, 8 * v25);
    unint64_t v27 = 0;
    uint64_t v52 = (float64x2_t *)((char *)v26 + 8 * v25);
    LODWORD(__N) = v25;
    uint64_t v28 = __p[0];
    if (v25 < 4) {
      goto LABEL_52;
    }
    if ((unint64_t)((char *)v26 - (char *)__p[0]) < 0x20) {
      goto LABEL_52;
    }
    unint64_t v29 = 0;
    unint64_t v27 = v25 & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v30 = v27;
    do
    {
      long long v31 = *(_OWORD *)&v28[v29 / 8 + 2];
      f64 = (_OWORD *)v26[v29 / 0x10].f64;
      _OWORD *f64 = *(_OWORD *)&v28[v29 / 8];
      f64[1] = v31;
      v29 += 32;
      v30 -= 4;
    }
    while (v30);
    if (v27 != v25)
    {
LABEL_52:
      do
      {
        *(void *)&v26->f64[v27] = v28[v27];
        ++v27;
      }
      while (v25 != v27);
    }
  }
  else
  {
    long long v26 = 0;
    LODWORD(__N) = 0;
    uint64_t v28 = __p[0];
    if (!__p[0]) {
      goto LABEL_26;
    }
  }
  __p[1] = v28;
  operator delete(v28);
LABEL_26:
  if (v45)
  {
    uint64_t v46 = v45;
    operator delete(v45);
  }
  if (v20) {
    operator delete(v20);
  }
  if (v16) {
    operator delete(v16);
  }
  double v33 = *(double *)(a1 + 16);
  __p[0] = 0;
  vDSP_sveD(v26->f64, 1, (double *)__p, (int)__N);
  double v34 = exp(*(double *)__p * -0.5) * v33;
  double *v10 = v34 + v34;
  unint64_t v35 = *(void *)a1;
  if (*(void *)a1)
  {
    if (v35 >= 4 && (unint64_t)((char *)v10 - (char *)v26 + 8) >= 0x20)
    {
      unint64_t v36 = v35 & 0xFFFFFFFFFFFFFFFCLL;
      int64_t v41 = (float64x2_t *)(v10 + 3);
      uint64_t v42 = v26 + 1;
      unint64_t v43 = v35 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        float64x2_t v44 = vmulq_n_f64(*v42, v34);
        v41[-1] = vmulq_n_f64(v42[-1], v34);
        *int64_t v41 = v44;
        v41 += 2;
        v42 += 2;
        v43 -= 4;
      }
      while (v43);
      if (v35 == v36) {
        goto LABEL_44;
      }
    }
    else
    {
      unint64_t v36 = 0;
    }
    uint64_t v37 = &v10[v36 + 1];
    uint64_t v38 = &v26->f64[v36];
    unint64_t v39 = v35 - v36;
    do
    {
      double v40 = *v38++;
      *v37++ = v40 * v34;
      --v39;
    }
    while (v39);
LABEL_44:
    uint64_t v52 = v26;
    operator delete(v26);
    return;
  }
  if (v26) {
    goto LABEL_44;
  }
}

void sub_19E2CBC5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  if (v28) {
    operator delete(v28);
  }
  if (v26)
  {
    *(void *)(v27 + 8) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2CBD04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a9) {
    JUMPOUT(0x19E2CBCECLL);
  }
  JUMPOUT(0x19E2CBCE0);
}

BOOL sub_19E2CBD14(uint64_t a1, int *a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Early stopping already requested.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v3 = *(_DWORD *)(a1 + 12);
  if (v3 == -1) {
    return 0;
  }
  int v6 = *a2;
  uint64_t v5 = (uint64_t)(a2 + 2);
  if (v6 == 1 || *(double *)(a1 + 120) < *((double *)a2 + 13) - *(double *)(a1 + 16))
  {
    sub_19E29AB9C(a1 + 24, v5);
    *(void *)(a1 + 120) = *((void *)a2 + 13);
    *(_DWORD *)(a1 + 128) = 0;
    *(unsigned char *)(a1 + 8) = 0;
    return 0;
  }
  else
  {
    int v8 = *(_DWORD *)(a1 + 128);
    *(_DWORD *)(a1 + 128) = v8 + 1;
    BOOL v9 = v8 >= v3;
    *(unsigned char *)(a1 + 8) = v9;
    return v9;
  }
}

void sub_19E2CBE08(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char **sub_19E2CBE1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5 = *(_DWORD *)(a1 + 56);
  int v6 = *(_DWORD *)(a1 + 60);
  uint64_t v7 = *(void *)(a1 + 64);
  char v30 = 0;
  unint64_t v29 = (char *)&unk_1EF0A86A8;
  int v31 = v5;
  v21[0] = 0;
  *(_DWORD *)uint64_t v22 = v6;
  *(void *)&v22[4] = v7;
  memset(v23, 0, sizeof(v23));
  uint64_t v24 = v25;
  v25[0] = 0;
  double v26 = 0.0;
  v27[0] = 0;
  v25[1] = 0;
  v25[2] = &v26;
  int v28 = 0;
  char v33 = 0;
  unint64_t v32 = (uint64_t (**)(void **, void **))&unk_1EF0A86A8;
  int v34 = v5;
  char v36 = 0;
  unint64_t v35 = (uint64_t (**)(void **, void **))&unk_1EF0A8738;
  int v38 = HIDWORD(v7);
  uint64_t v37 = *(void *)v22;
  sub_19E2965D0(v39, (uint64_t)v23);
  v39[12] = (uint64_t *)v27[1];
  int v40 = v28;
  uint64_t v20 = &unk_1EF0A8738;
  sub_19E2470C8((char **)v23);
  int v8 = *(_DWORD *)(a1 + 72);
  (*(void (**)(char **__return_ptr))(**(void **)(a1 + 120) + 16))(&v29);
  uint64_t v9 = *(void *)(a2 + 24);
  if (!v9) {
    goto LABEL_16;
  }
  double v10 = (*(double (**)(uint64_t, char **))(*(void *)v9 + 48))(v9, &v29);
  (*(void (**)(void, char **))(**(void **)(a1 + 120) + 24))(*(void *)(a1 + 120), &v29);
  std::chrono::steady_clock::now();
  LODWORD(v20) = 1;
  sub_19E291E68((uint64_t **)v21, (uint64_t *)&v29);
  double v26 = v10;
  sub_19E2A7DDC(*(void *)(a1 + 120), (uint64_t)v27);
  if (1 % v8) {
    goto LABEL_5;
  }
  uint64_t v11 = *(void *)(a2 + 56);
  if (!v11) {
LABEL_17:
  }
    sub_19E2A8074();
  if (((*(uint64_t (**)(uint64_t, void **))(*(void *)v11 + 48))(v11, &v20) & 1) == 0)
  {
LABEL_5:
    if (((*v32)((void **)&v32, &v20) & 1) == 0)
    {
      char v12 = (*v35)((void **)&v35, &v20);
      sub_19E2470C8(v27);
      sub_19E2470C8((char **)v21);
      sub_19E2470C8(&v29);
      if (v12) {
        goto LABEL_15;
      }
      int v13 = 2;
      while (1)
      {
        (*(void (**)(char **__return_ptr))(**(void **)(a1 + 120) + 16))(&v29);
        uint64_t v14 = *(void *)(a2 + 24);
        if (!v14) {
          break;
        }
        double v15 = (*(double (**)(uint64_t, char **))(*(void *)v14 + 48))(v14, &v29);
        (*(void (**)(void, char **))(**(void **)(a1 + 120) + 24))(*(void *)(a1 + 120), &v29);
        std::chrono::steady_clock::now();
        std::chrono::steady_clock::now();
        LODWORD(v20) = v13;
        sub_19E291E68((uint64_t **)v21, (uint64_t *)&v29);
        double v26 = v15;
        sub_19E2A7DDC(*(void *)(a1 + 120), (uint64_t)v27);
        if (!(v13 % v8))
        {
          uint64_t v16 = *(void *)(a2 + 56);
          if (!v16) {
            goto LABEL_17;
          }
          if ((*(uint64_t (**)(uint64_t, void **))(*(void *)v16 + 48))(v16, &v20)) {
            goto LABEL_6;
          }
        }
        if ((*v32)((void **)&v32, &v20)) {
          goto LABEL_6;
        }
        char v17 = (*v35)((void **)&v35, &v20);
        sub_19E2470C8(v27);
        sub_19E2470C8((char **)v21);
        sub_19E2470C8(&v29);
        ++v13;
        if (v17) {
          goto LABEL_15;
        }
      }
LABEL_16:
      sub_19E2A8074();
    }
  }
LABEL_6:
  sub_19E2470C8(v27);
  sub_19E2470C8((char **)v21);
  sub_19E2470C8(&v29);
LABEL_15:
  sub_19E2A7DDC(*(void *)(a1 + 120), a3);
  unint64_t v35 = (uint64_t (**)(void **, void **))&unk_1EF0A8738;
  return sub_19E2470C8((char **)v39);
}

void sub_19E2CC2CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char *a39)
{
  sub_19E2470C8(v41);
  sub_19E2470C8(v40);
  sub_19E2470C8(&a39);
  *(void *)(v42 - 240) = a11;
  sub_19E2470C8(v39);
  _Unwind_Resume(a1);
}

void sub_19E2CC354(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 48);
  if (v1 != 1)
  {
    if (!v1) {
      sub_19E29849C();
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_19E298774(exception, "Invalid optimizer in user config.");
    __cxa_throw(exception, (struct type_info *)off_1E599CD18, MEMORY[0x1E4FBA1E8]);
  }
  sub_19E2CC408();
}

void sub_19E2CC3F4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19E2CC408()
{
}

void sub_19E2CC544(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E2934EC((uint64_t)va);
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_19E2CC560(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E2CC574(uint64_t a1, uint64_t *a2)
{
  sub_19E2933F8((uint64_t)&v15, (uint64_t)a2);
  *(void *)a1 = &unk_1EF0A8318;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  sub_19E2933F8(a1 + 32, (uint64_t)&v15);
  if (v21)
  {
    uint64_t v4 = (char **)__p;
    if (__p)
    {
      int v5 = v20;
      int v6 = __p;
      if (v20 != __p)
      {
        do
          int v5 = sub_19E2470C8(v5 - 12);
        while (v5 != v4);
        int v6 = __p;
      }
      uint64_t v20 = v4;
      operator delete(v6);
    }
  }
  uint64_t v7 = (void **)v17;
  if (v17)
  {
    int v8 = v18;
    uint64_t v9 = v17;
    if (v18 != v17)
    {
      do
      {
        if (*((char *)v8 - 17) < 0) {
          operator delete(*(v8 - 5));
        }
        v8 -= 5;
      }
      while (v8 != v7);
      uint64_t v9 = v17;
    }
    int v18 = v7;
    operator delete(v9);
  }
  double v10 = (void **)v15;
  if (v15)
  {
    uint64_t v11 = v16;
    char v12 = v15;
    if (v16 != v15)
    {
      do
      {
        if (*((char *)v11 - 25) < 0) {
          operator delete(*(v11 - 6));
        }
        v11 -= 6;
      }
      while (v11 != v10);
      char v12 = v15;
    }
    uint64_t v16 = v10;
    operator delete(v12);
  }
  *(void *)a1 = &unk_1EF0A85E8;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  int v13 = sub_19E244298(a2);
  int v14 = sub_19E244DC4((uint64_t)a2);
  *(_DWORD *)(a1 + 176) = v14 + v13;
  sub_19E2CD450(a1 + 184, v14 + v13);
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 472) = 0;
  *(_DWORD *)(a1 + 488) = 0;
  *(void *)(a1 + 480) = 0;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 316) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 444) = 0u;
  *(void *)(a1 + 528) = 0;
  *(void *)(a1 + 520) = 0;
  *(_DWORD *)(a1 + 544) = 0;
  *(void *)(a1 + 536) = 0;
  *(_DWORD *)(a1 + 560) = -1;
  *(void *)(a1 + 504) = &unk_1EF0A7EA8;
  *(void *)(a1 + 512) = a1 + 176;
  *(void *)(a1 + 576) = 0x3FB999999999999ALL;
  *(void *)(a1 + 584) = 0;
  sub_19E299010(a1 + 592);
  *(void *)(a1 + 10712) = 0;
  *(_OWORD *)(a1 + 10696) = 0u;
  if ((int)sub_19E244DC4(a1 + 32) >= 1) {
    sub_19E2CCCF8();
  }
  sub_19E2CCEA8();
}

void sub_19E2CCBE8(_Unwind_Exception *a1)
{
  sub_19E2462FC(v6);
  sub_19E298A78(v5);
  int v8 = (void **)(v1 + 65);
  uint64_t v9 = v1[73];
  v1[73] = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  void *v4 = &unk_1EF0A7D68;
  double v10 = *v8;
  if (*v8)
  {
    v1[66] = v10;
    operator delete(v10);
  }
  sub_19E2BEE60(v3);
  sub_19E29AC3C(v2);
  sub_19E298AC8(v1);
  _Unwind_Resume(a1);
}

void sub_19E2CCCF8()
{
}

void sub_19E2CCE54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_19E245FE8(&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_19E2CCE70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
  {
    sub_19E32FAD8((uint64_t)&a9, a9);
    operator delete(v9);
    _Unwind_Resume(a1);
  }
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_19E2CCEA8()
{
}

void sub_19E2CD004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_19E245FE8(&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_19E2CD020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
  {
    sub_19E32FAD8((uint64_t)&a9, a9);
    operator delete(v9);
    _Unwind_Resume(a1);
  }
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_19E2CD05C(uint64_t a1)
{
  int v1 = (void *)sub_19E2D1308(a1);

  operator delete(v1);
}

uint64_t **sub_19E2CD084@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X8>)
{
  uint64_t v4 = a1 + 8;
  unint64_t v5 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3);
  uint64_t v6 = a1 + 32;
  int v7 = sub_19E244298((uint64_t *)(a1 + 32));
  signed int v8 = 5 * (sub_19E244DC4(v6) + v7);
  if (*(unsigned char *)(v4 + 136) && v8 <= (int)(-1431655765 * ((*(void *)(a1 + 128) - *(void *)(a1 + 120)) >> 5))) {
    signed int v8 = -1431655765 * ((*(void *)(a1 + 128) - *(void *)(a1 + 120)) >> 5);
  }
  if (v5 >= v8)
  {
    (*(void (**)(char **__return_ptr))(**(void **)(a1 + 584) + 16))(v11);
    sub_19E291E68(a2, (uint64_t *)v11);
    return (uint64_t **)sub_19E2470C8(v11);
  }
  else
  {
    uint64_t v9 = (uint64_t *)(*(void *)(a1 + 10696)
                   + 96 * (int)(-991146299 * ((*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3)));
    return sub_19E291E68(a2, v9);
  }
}

void sub_19E2CD1C8(uint64_t a1, long long **a2, double a3)
{
  sub_19E29CE6C(a2, (uint64_t)&__p);
  double v6 = sub_19E2CF758(a1 + 176, (const double **)&__p);
  double v8 = sqrt(v7);
  double v26 = v8;
  double v27 = v6;
  double v9 = v6 + *(double *)(a1 + 568) * v8;
  double v25 = v9;
  unint64_t v10 = *(void *)(a1 + 160);
  if (v10 >= *(void *)(a1 + 168))
  {
    uint64_t v15 = sub_19E2A4064((uint64_t *)(a1 + 152), (uint64_t)&__p, &v27, (uint64_t *)&v26, (uint64_t *)&v25);
  }
  else
  {
    *(void *)unint64_t v10 = 0;
    *(void *)(v10 + 8) = 0;
    *(void *)(v10 + 16) = 0;
    uint64_t v11 = __p;
    int64_t v12 = v29 - (unsigned char *)__p;
    if (v29 != __p)
    {
      if (v12 < 0) {
        sub_19E13D694();
      }
      int v13 = (char *)operator new(v29 - (unsigned char *)__p);
      *(void *)unint64_t v10 = v13;
      *(void *)(v10 + 8) = v13;
      int v14 = &v13[8 * (v12 >> 3)];
      *(void *)(v10 + 16) = v14;
      memcpy(v13, v11, v12);
      *(void *)(v10 + 8) = v14;
    }
    *(_DWORD *)(v10 + 24) = v30;
    *(double *)(v10 + 32) = v6;
    *(double *)(v10 + 40) = v8;
    *(double *)(v10 + 48) = v9;
    uint64_t v15 = v10 + 56;
    *(void *)(a1 + 160) = v10 + 56;
  }
  *(void *)(a1 + 160) = v15;
  uint64_t v16 = *(int *)(a1 + 488);
  uint64_t v17 = v16 + 1;
  *(_DWORD *)(a1 + 488) = v16 + 1;
  uint64_t v18 = *(void *)(a1 + 464);
  unint64_t v19 = (*(void *)(a1 + 472) - v18) >> 3;
  if (v16 + 1 <= v19)
  {
    if (v16 + 1 < v19) {
      *(void *)(a1 + 472) = v18 + 8 * v16 + 8;
    }
  }
  else
  {
    sub_19E2482DC(a1 + 464, v16 + 1 - v19);
    uint64_t v17 = *(int *)(a1 + 488);
    uint64_t v18 = *(void *)(a1 + 464);
  }
  *(double *)(v18 + 8 * v17 - 8) = a3;
  sub_19E2D14C4(a1 + 176, (uint64_t)&__p);
  sub_19E2D269C(a1 + 496, a1 + 176);
  long double v20 = pow((double)*(int *)(*(void *)(a1 + 512) + 120), (double)*(int *)(*(void *)(a1 + 512) + 124) * 0.5 + 2.0);
  long double v21 = log(v20 * 9.8696044 / (*(double *)(a1 + 576) * 3.0));
  *(double *)(a1 + 568) = sqrt(v21 + v21);
  sub_19E2CD710(a1 + 504);
  sub_19E291E68(v31, (uint64_t *)a2);
  double v32 = a3;
  uint64_t v22 = *(uint64_t ***)(a1 + 16);
  if ((unint64_t)v22 >= *(void *)(a1 + 24))
  {
    uint64_t v24 = sub_19E299F04((uint64_t ***)(a1 + 8), (uint64_t *)v31);
  }
  else
  {
    unint64_t v23 = sub_19E291E68(v22, (uint64_t *)v31);
    *((double *)v23 + 12) = v32;
    uint64_t v24 = v23 + 13;
  }
  *(void *)(a1 + 16) = v24;
  sub_19E2470C8((char **)v31);
  if (__p)
  {
    unint64_t v29 = __p;
    operator delete(__p);
  }
}

void sub_19E2CD404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, char *a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_19E2CD450(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + 8) = xmmword_19E351FD0;
  *(void *)(a1 + 24) = 0;
  uint64_t v4 = a2 << 32;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  size_t v5 = 8 * (int)a2;
  if (a2)
  {
    if ((a2 & 0x80000000) != 0) {
      sub_19E13D694();
    }
    double v6 = (char *)operator new(8 * (int)a2);
    *(void *)(a1 + 24) = v6;
    *(void *)(a1 + 40) = &v6[8 * (int)a2];
    bzero(v6, v5);
    *(void *)(a1 + 32) = &v6[v5];
    *(_DWORD *)(a1 + 48) = a2;
    if (v4) {
      goto LABEL_4;
    }
  }
  else
  {
    double v6 = 0;
    *(_DWORD *)(a1 + 48) = 0;
    if (v4) {
LABEL_4:
    }
      memset_pattern16(v6, &unk_19E351820, v5);
  }
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(void *)(a1 + 72) = 0;
  int v7 = a2 + 1;
  if (a2 == -1)
  {
    double v8 = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 72) = 0;
    *(_DWORD *)(a1 + 80) = v7;
    MEMORY[0] = 0;
    if (!a2) {
      return a1;
    }
    goto LABEL_12;
  }
  if (v7 < 0) {
    sub_19E13D694();
  }
  double v8 = operator new(8 * v7);
  bzero(v8, 8 * v7);
  *(void *)(a1 + 56) = v8;
  *(void *)(a1 + 64) = &v8[v7];
  *(void *)(a1 + 72) = &v8[v7];
  *(_DWORD *)(a1 + 80) = v7;
  *double v8 = 0;
  if (a2)
  {
LABEL_12:
    unint64_t v9 = 0;
    if (a2 == 1) {
      goto LABEL_16;
    }
    unint64_t v9 = a2 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v10 = v8 + 1;
    unint64_t v11 = a2 & 0xFFFFFFFFFFFFFFFELL;
    int64_t v12 = (long long *)v6;
    do
    {
      long long v13 = *v12++;
      long double v20 = log(*((long double *)&v13 + 1));
      *(double *)&long long v14 = log(*(long double *)&v13);
      *((long double *)&v14 + 1) = v20;
      *v10++ = v14;
      v11 -= 2;
    }
    while (v11);
    if (v9 != a2)
    {
LABEL_16:
      uint64_t v15 = (long double *)&v8[v9 + 1];
      uint64_t v16 = (double *)&v6[8 * v9];
      uint64_t v17 = a2 - v9;
      do
      {
        long double v18 = *v16++;
        *v15++ = log(v18);
        --v17;
      }
      while (v17);
    }
  }
  return a1;
}

void sub_19E2CD630(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E13A9BC(a1);
}

void sub_19E2CD64C(void *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  sub_19E13A9BC(a1);
}

double sub_19E2CD668(uint64_t a1, double a2, double a3)
{
  return a2 + *(double *)(a1 + 64) * a3;
}

double sub_19E2CD674()
{
  return -1.79769313e308;
}

void sub_19E2CD680(uint64_t a1)
{
  long double v2 = pow((double)*(int *)(*(void *)(a1 + 8) + 120), (double)*(int *)(*(void *)(a1 + 8) + 124) * 0.5 + 2.0);
  long double v3 = log(v2 * 9.8696044 / (*(double *)(a1 + 72) * 3.0));
  *(double *)(a1 + 64) = sqrt(v3 + v3);

  sub_19E2CD710(a1);
}

double sub_19E2CD708()
{
  return 0.0;
}

void sub_19E2CD710(uint64_t a1)
{
  int v104 = 0;
  uint64_t v105 = 0;
  unint64_t v106 = 0;
  uint64_t v1 = *(void **)(a1 + 8);
  uint64_t v101 = 0;
  unint64_t v102 = 0;
  size_t v100 = 0;
  long double v3 = (unsigned char *)v1[12];
  long double v2 = (unsigned char *)v1[13];
  int64_t v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0) {
      sub_19E13D694();
    }
    size_t v5 = (char *)operator new(v2 - v3);
    double v6 = &v5[8 * (v4 >> 3)];
    size_t v100 = v5;
    unint64_t v102 = v6;
    memcpy(v5, v3, v4);
    uint64_t v101 = v6;
  }
  uint64_t v7 = v1[15];
  uint64_t v103 = v7;
  if (!v7)
  {
    uint64_t v55 = 0;
    uint64_t v58 = 0;
    *(_DWORD *)(a1 + 56) = 0;
    long long v62 = v100;
    signed int v63 = HIDWORD(v103);
    long long v107 = 0;
    int v108 = 0;
    uint64_t v109 = 0;
    if (HIDWORD(v103)) {
      goto LABEL_65;
    }
    goto LABEL_81;
  }
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  unint64_t v10 = 0;
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v90 = (int)v7;
  uint64_t v91 = v7;
  size_t v13 = 8 * (v7 >> 32);
  uint64_t v88 = v7 >> 32;
  size_t v89 = v13;
  unint64_t v87 = (v7 >> 32) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v93 = HIDWORD(v7);
  uint64_t v94 = 16;
  do
  {
    uint64_t v14 = *(void *)(a1 + 8);
    uint64_t v15 = v100;
    __p = 0;
    *(void *)uint64_t v96 = 0;
    uint64_t v97 = 0;
    if (!v93)
    {
      uint64_t v16 = 0;
      int v108 = 0;
      uint64_t v109 = 0;
      long long v107 = 0;
      unsigned int v110 = 0;
      goto LABEL_27;
    }
    if (v7 < 0) {
      sub_19E13D694();
    }
    uint64_t v16 = operator new(v13);
    bzero(v16, v13);
    if ((unint64_t)v7 >> 33 < 3)
    {
      unint64_t v17 = 0;
      unint64_t v18 = v88;
      goto LABEL_17;
    }
    unint64_t v18 = v88;
    if ((unint64_t)((char *)v16 - &v100[v13 * v12]) < 0x20)
    {
      unint64_t v17 = 0;
LABEL_17:
      unint64_t v23 = v18 - v17;
      uint64_t v24 = 8 * v17;
      double v25 = (void *)v16 + v17;
      double v26 = (uint64_t *)&v15[v8 + v24];
      do
      {
        uint64_t v27 = *v26++;
        *v25++ = v27;
        --v23;
      }
      while (v23);
      goto LABEL_19;
    }
    unint64_t v19 = (long long *)&v100[v94];
    long double v20 = v16 + 1;
    unint64_t v21 = v87;
    do
    {
      long long v22 = *v19;
      *(v20 - 1) = *(v19 - 1);
      *long double v20 = v22;
      v19 += 2;
      v20 += 2;
      v21 -= 4;
    }
    while (v21);
    unint64_t v17 = v87;
    if (v88 != v87) {
      goto LABEL_17;
    }
LABEL_19:
    long long v107 = 0;
    int v108 = 0;
    uint64_t v109 = 0;
    unsigned int v110 = v93;
    sub_19E2482DC((uint64_t)&v107, v18);
    uint64_t v28 = v110;
    if ((int)v110 >= 1)
    {
      uint64_t v29 = 0;
      int v30 = v107;
      if (v110 < 4) {
        goto LABEL_25;
      }
      if ((unint64_t)((char *)v107 - (char *)v16) < 0x20) {
        goto LABEL_25;
      }
      unint64_t v31 = 0;
      uint64_t v29 = v110 & 0xFFFFFFFC;
      uint64_t v32 = (8 * v110) & 0x7FFFFFFE0;
      do
      {
        long long v33 = v16[v31 / 0x10 + 1];
        int v34 = (double *)&v30[v31 / 8];
        *(_OWORD *)int v34 = v16[v31 / 0x10];
        *((_OWORD *)v34 + 1) = v33;
        v31 += 32;
      }
      while (v32 != v31);
      if (v29 != v28)
      {
LABEL_25:
        uint64_t v35 = v28 - v29;
        uint64_t v36 = v29 << 32;
        do
        {
          *(const double *)((char *)v30 + (v36 >> 29)) = *(const double *)((char *)v16 + (v36 >> 29));
          v36 += 0x100000000;
          --v35;
        }
        while (v35);
      }
    }
LABEL_27:
    double v37 = sub_19E2CDEE4(v14, (const double **)&v107);
    double v38 = v37;
    if (v11 < v10)
    {
      *v11++ = v37;
      uint64_t v7 = v91;
      size_t v13 = v89;
      uint64_t v105 = (uint64_t)v11;
      unint64_t v39 = v107;
      if (!v107) {
        goto LABEL_30;
      }
LABEL_29:
      int v108 = v39;
      operator delete(v39);
      goto LABEL_30;
    }
    uint64_t v40 = v11 - v9;
    unint64_t v41 = v40 + 1;
    if ((unint64_t)(v40 + 1) >> 61) {
      sub_19E13D694();
    }
    if (((char *)v10 - (char *)v9) >> 2 > v41) {
      unint64_t v41 = ((char *)v10 - (char *)v9) >> 2;
    }
    if ((unint64_t)((char *)v10 - (char *)v9) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v42 = v41;
    }
    if (v42)
    {
      if (v42 >> 61) {
        sub_19E13C418();
      }
      unint64_t v43 = operator new(8 * v42);
      float64x2_t v44 = (double *)&v43[8 * v40];
      double *v44 = v38;
      uint64_t v45 = (uint64_t)(v44 + 1);
      if (v11 != v9)
      {
LABEL_41:
        unint64_t v46 = (char *)(v11 - 1) - (char *)v9;
        if (v46 < 0x168
          || &v43[(char *)v11 - (char *)v9 - 8 - (v46 & 0xFFFFFFFFFFFFFFF8)] > &v43[(char *)v11 - (char *)v9 - 8]
          || (double *)((char *)v11 - (v46 & 0xFFFFFFFFFFFFFFF8) - 8) > v11 - 1
          || (unint64_t)((char *)v9 - v43) < 0x20)
        {
          long long v47 = v11;
          uint64_t v7 = v91;
          size_t v13 = v89;
        }
        else
        {
          uint64_t v49 = (v46 >> 3) + 1;
          uint64_t v50 = 8 * (v49 & 0x3FFFFFFFFFFFFFFCLL);
          long long v47 = &v11[v50 / 0xFFFFFFFFFFFFFFF8];
          float64x2_t v44 = (double *)((char *)v44 - v50);
          uint64_t v51 = &v43[8 * v40 - 16];
          uint64_t v52 = v11 - 2;
          uint64_t v53 = v49 & 0x3FFFFFFFFFFFFFFCLL;
          uint64_t v7 = v91;
          do
          {
            long long v54 = *(_OWORD *)v52;
            *(v51 - 1) = *((_OWORD *)v52 - 1);
            *uint64_t v51 = v54;
            v51 -= 2;
            v52 -= 4;
            v53 -= 4;
          }
          while (v53);
          size_t v13 = v89;
          if (v49 == (v49 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_44:
            unint64_t v10 = (double *)&v43[8 * v42];
            int v104 = v44;
            uint64_t v105 = v45;
            unint64_t v106 = v10;
            if (!v9) {
              goto LABEL_46;
            }
LABEL_45:
            operator delete(v9);
            goto LABEL_46;
          }
        }
        do
        {
          uint64_t v48 = *((void *)v47-- - 1);
          *((void *)v44-- - 1) = v48;
        }
        while (v47 != v9);
        goto LABEL_44;
      }
    }
    else
    {
      unint64_t v43 = 0;
      float64x2_t v44 = (double *)(8 * v40);
      *(double *)(8 * v40) = v37;
      uint64_t v45 = 8 * v40 + 8;
      if (v11 != v9) {
        goto LABEL_41;
      }
    }
    uint64_t v7 = v91;
    size_t v13 = v89;
    unint64_t v10 = (double *)&v43[8 * v42];
    int v104 = v44;
    uint64_t v105 = v45;
    unint64_t v106 = v10;
    if (v9) {
      goto LABEL_45;
    }
LABEL_46:
    unint64_t v9 = v44;
    unint64_t v11 = (double *)v45;
    uint64_t v105 = v45;
    unint64_t v39 = v107;
    if (v107) {
      goto LABEL_29;
    }
LABEL_30:
    if (v16) {
      operator delete(v16);
    }
    ++v12;
    v94 += v13;
    v8 += v13;
  }
  while (v12 != v90);
  uint64_t v55 = v104;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)(a1 + 8) + 120);
  if (v55 == v11)
  {
    uint64_t v58 = v55;
    long long v62 = v100;
    signed int v63 = HIDWORD(v103);
    long long v107 = 0;
    int v108 = 0;
    uint64_t v109 = 0;
    if (HIDWORD(v103)) {
      goto LABEL_65;
    }
    goto LABEL_81;
  }
  signed int v56 = v55 + 1;
  if (v55 + 1 == v11)
  {
    uint64_t v58 = v55;
    long long v62 = v100;
    signed int v63 = HIDWORD(v103);
    long long v107 = 0;
    int v108 = 0;
    uint64_t v109 = 0;
    if (HIDWORD(v103)) {
      goto LABEL_65;
    }
    goto LABEL_81;
  }
  double v57 = *v55;
  uint64_t v58 = v55;
  unint64_t v59 = v55 + 1;
  do
  {
    double v60 = *v59++;
    BOOL v61 = v57 < v60;
    double v57 = fmax(v57, v60);
    if (v61) {
      uint64_t v58 = v56;
    }
    signed int v56 = v59;
  }
  while (v59 != v11);
  long long v62 = v100;
  signed int v63 = HIDWORD(v103);
  long long v107 = 0;
  int v108 = 0;
  uint64_t v109 = 0;
  if (!HIDWORD(v103))
  {
LABEL_81:
    uint64_t v74 = 0;
    LODWORD(v73) = 0;
    uint64_t v64 = 0;
    *(void *)uint64_t v96 = 0;
    uint64_t v97 = 0;
    __p = 0;
    unsigned int v98 = 0;
    goto LABEL_82;
  }
LABEL_65:
  if (v63 < 0) {
    sub_19E13D694();
  }
  uint64_t v64 = operator new(8 * v63);
  uint64_t v65 = (v58 - v55) * v63;
  bzero(v64, 8 * v63);
  if (v63 < 0xA || (uint64_t v66 = &v62[8 * v65], (unint64_t)((char *)v64 - v66) < 0x20))
  {
    unint64_t v67 = 0;
    goto LABEL_69;
  }
  unint64_t v67 = v63 & 0xFFFFFFFFFFFFFFFCLL;
  int v83 = (long long *)(v66 + 16);
  uint64_t v84 = v64 + 1;
  unint64_t v85 = v67;
  do
  {
    long long v86 = *v83;
    *(v84 - 1) = *(v83 - 1);
    _OWORD *v84 = v86;
    v83 += 2;
    v84 += 2;
    v85 -= 4;
  }
  while (v85);
  if (v67 != v63)
  {
LABEL_69:
    unint64_t v68 = v63 - v67;
    uint64_t v69 = 8 * v67;
    unint64_t v70 = (void *)v64 + v67;
    uint64_t v71 = &v62[8 * v65 + v69];
    do
    {
      uint64_t v72 = *(void *)v71;
      v71 += 8;
      *v70++ = v72;
      --v68;
    }
    while (v68);
  }
  __p = 0;
  *(void *)uint64_t v96 = 0;
  uint64_t v97 = 0;
  unsigned int v98 = v63;
  sub_19E2482DC((uint64_t)&__p, v63);
  uint64_t v73 = v98;
  uint64_t v74 = (char *)__p;
  if ((int)v98 >= 1)
  {
    uint64_t v75 = 0;
    if (v98 < 4) {
      goto LABEL_77;
    }
    if ((unint64_t)((unsigned char *)__p - (unsigned char *)v64) < 0x20) {
      goto LABEL_77;
    }
    unint64_t v76 = 0;
    uint64_t v75 = v98 & 0xFFFFFFFC;
    uint64_t v77 = (8 * v98) & 0x7FFFFFFE0;
    do
    {
      long long v78 = v64[v76 / 0x10 + 1];
      int64_t v79 = &v74[v76];
      *(_OWORD *)int64_t v79 = v64[v76 / 0x10];
      *((_OWORD *)v79 + 1) = v78;
      v76 += 32;
    }
    while (v77 != v76);
    if (v75 != v73)
    {
LABEL_77:
      uint64_t v80 = v73 - v75;
      uint64_t v81 = v75 << 32;
      do
      {
        *(void *)&v74[v81 >> 29] = *(void *)((char *)v64 + (v81 >> 29));
        v81 += 0x100000000;
        --v80;
      }
      while (v80);
    }
  }
LABEL_82:
  uint64_t v82 = *(void *)v58;
  uint64_t v99 = *(void *)v58;
  if ((void **)(a1 + 16) != &__p)
  {
    sub_19E1E5B9C((void *)(a1 + 16), v74, *(char **)v96, (uint64_t)(*(void *)v96 - (void)v74) >> 3);
    LODWORD(v73) = v98;
    uint64_t v82 = v99;
    uint64_t v74 = (char *)__p;
  }
  *(_DWORD *)(a1 + 40) = v73;
  *(void *)(a1 + 48) = v82;
  if (v74)
  {
    *(void *)uint64_t v96 = v74;
    operator delete(v74);
  }
  if (v64) {
    operator delete(v64);
  }
  if (v62) {
    operator delete(v62);
  }
  if (v55)
  {
    uint64_t v105 = (uint64_t)v55;
    operator delete(v55);
  }
}

void sub_19E2CDE28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  if (__p) {
    operator delete(__p);
  }
  if (v28) {
    operator delete(v28);
  }
  if (v29) {
    operator delete(v29);
  }
  if (a27) {
    operator delete(a27);
  }
  _Unwind_Resume(exception_object);
}

double sub_19E2CDEE4(uint64_t a1, const double **a2)
{
  if (*(_DWORD *)(a1 + 120))
  {
    sub_19E2CDFC8(a1, a2, (uint64_t)__A);
    double __C = 0.0;
    vDSP_dotprD(__A[0], 1, *(const double **)(a1 + 256), 1, &__C, (int)__N);
    double v3 = __C;
    double __C = 0.0;
    vDSP_meanvD(*(const double **)(a1 + 288), 1, &__C, *(int *)(a1 + 312));
    double v4 = __C;
    if (__A[0])
    {
      __A[1] = __A[0];
      operator delete(__A[0]);
    }
    return v4 + v3;
  }
  else
  {
    __A[0] = 0;
    vDSP_meanvD(*(const double **)(a1 + 288), 1, (double *)__A, *(int *)(a1 + 312));
    return *(double *)__A;
  }
}

void sub_19E2CDFAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2CDFC8(uint64_t a1@<X0>, const double **a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *(_DWORD *)(a1 + 120);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 24) = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  if (v3)
  {
    if (v3 < 0) {
      sub_19E13D694();
    }
    uint64_t v5 = v3;
    double v6 = (char *)operator new(8 * v3);
    bzero(v6, 8 * v3);
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    *(void *)a3 = v6;
    *(void *)(a3 + 8) = &v6[8 * v3];
    *(void *)(a3 + 16) = &v6[8 * v3];
    *(_DWORD *)(a3 + 24) = v3;
    double v25 = v6;
    while (1)
    {
      uint64_t v9 = *(void *)(a1 + 96);
      signed int v10 = *(_DWORD *)(a1 + 124);
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      if (!v10)
      {
        unint64_t v11 = 0;
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        __p = 0;
        signed int v30 = 0;
        goto LABEL_14;
      }
      if (v10 < 0) {
        sub_19E13D694();
      }
      unint64_t v11 = operator new(8 * v10);
      bzero(v11, 8 * v10);
      if (v10 >= 8 && (unint64_t)v11 - v9 - 8 * v8 * v10 >= 0x20)
      {
        unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL;
        long double v20 = (long long *)(v9 + v7 * v10 + 16);
        unint64_t v21 = v11 + 1;
        unint64_t v22 = v12;
        do
        {
          long long v23 = *v20;
          *(v21 - 1) = *(v20 - 1);
          *unint64_t v21 = v23;
          v20 += 2;
          v21 += 2;
          v22 -= 4;
        }
        while (v22);
        if (v12 == v10) {
          goto LABEL_12;
        }
      }
      else
      {
        unint64_t v12 = 0;
      }
      unint64_t v13 = v10 - v12;
      uint64_t v14 = 8 * v12;
      uint64_t v15 = (void *)v11 + v12;
      uint64_t v16 = (uint64_t *)(v9 + v14 + v7 * v10);
      do
      {
        uint64_t v17 = *v16++;
        *v15++ = v17;
        --v13;
      }
      while (v13);
LABEL_12:
      __p = 0;
      uint64_t v28 = 0;
      signed int v30 = 0;
      uint64_t v29 = 0;
      __p = operator new(8 * v10);
      uint64_t v28 = (char *)__p + 8 * v10;
      uint64_t v29 = v28;
      signed int v30 = v10;
      memcpy(__p, v11, 8 * v10);
      double v6 = v25;
LABEL_14:
      double v18 = *(double *)(a1 + 24);
      double v19 = sub_19E2CE274(a1 + 8, (uint64_t)&__p, a2);
      *(long double *)&v6[8 * v8] = exp(v19 * -0.5) * v18;
      if (__p)
      {
        uint64_t v28 = (char *)__p;
        operator delete(__p);
      }
      if (v11) {
        operator delete(v11);
      }
      ++v8;
      v7 += 8;
      if (v8 == v5) {
        return;
      }
    }
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 24) = 0;
}

void sub_19E2CE200(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E13A9BC(a1);
}

void sub_19E2CE228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
  {
    operator delete(__p);
    if (!v14)
    {
LABEL_3:
      *(void *)(a10 + 8) = a11;
      operator delete(a11);
      _Unwind_Resume(a1);
    }
  }
  else if (!v14)
  {
    goto LABEL_3;
  }
  operator delete(v14);
  *(void *)(a10 + 8) = a11;
  operator delete(a11);
  _Unwind_Resume(a1);
}

double sub_19E2CE274(uint64_t a1, uint64_t a2, const double **a3)
{
  sub_19E2BC0A0(*(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 48), (uint64_t)v42);
  uint64_t v6 = *(int *)(a1 + 48);
  if (v6)
  {
    uint64_t v7 = *(double **)(a1 + 24);
    uint64_t v8 = (double *)v42[0];
    uint64_t v9 = 8 * v43 + 8;
    do
    {
      double v10 = *v7++;
      *uint64_t v8 = 1.0 / (v10 * v10);
      uint64_t v8 = (double *)((char *)v8 + v9);
      --v6;
    }
    while (v6);
  }
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  signed int v30 = 0;
  unint64_t v12 = *(const void **)a2;
  uint64_t v11 = *(void *)(a2 + 8);
  int64_t v13 = v11 - *(void *)a2;
  if (v11 == *(void *)a2)
  {
    uint64_t v15 = 0;
    uint64_t v14 = 0;
  }
  else
  {
    if (v13 < 0) {
      sub_19E13D694();
    }
    uint64_t v14 = (char *)operator new(v11 - *(void *)a2);
    uint64_t v15 = &v14[8 * (v13 >> 3)];
    signed int v30 = v14;
    uint64_t v32 = v15;
    memcpy(v14, v12, v13);
    uint64_t v31 = v15;
  }
  signed int v16 = *(_DWORD *)(a2 + 24);
  signed int v33 = v16;
  vDSP_vsubD(*a3, 1, (const double *)v14, 1, (double *)v14, 1, v16);
  double __C = 0.0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v17 = v15 - v14;
  if (v15 != v14)
  {
    if (v17 < 0) {
      sub_19E13D694();
    }
    double v18 = (char *)operator new(v15 - v14);
    *(void *)&double __C = v18;
    uint64_t v36 = &v18[8 * (v17 >> 3)];
    memcpy(v18, v14, v15 - v14);
    uint64_t v35 = v36;
    signed int v37 = v16;
    unint64_t v39 = 0;
    uint64_t v40 = 0;
    double __B = 0;
    if (!v16)
    {
      signed int v41 = 0;
      uint64_t v35 = v18;
      operator delete(v18);
      if (!v14) {
        goto LABEL_23;
      }
LABEL_22:
      uint64_t v31 = v14;
      operator delete(v14);
      goto LABEL_23;
    }
LABEL_14:
    if (v16 < 0) {
      sub_19E13D694();
    }
    double v19 = (double *)operator new(8 * v16);
    double __B = v19;
    uint64_t v40 = &v19[v16];
    bzero(v19, 8 * v16);
    unint64_t v39 = v40;
    signed int v41 = v16;
    if (v16 >= 4)
    {
      uint64_t v21 = 0;
      unint64_t v20 = v16 & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v22 = v20;
      do
      {
        long long v23 = *(_OWORD *)&v18[v21 * 8 + 16];
        uint64_t v24 = &v19[v21];
        *(_OWORD *)uint64_t v24 = *(_OWORD *)&v18[v21 * 8];
        *((_OWORD *)v24 + 1) = v23;
        v21 += 4;
        v22 -= 4;
      }
      while (v22);
      if (v20 == v16)
      {
LABEL_21:
        uint64_t v35 = v18;
        operator delete(v18);
        if (!v14) {
          goto LABEL_23;
        }
        goto LABEL_22;
      }
    }
    else
    {
      unint64_t v20 = 0;
    }
    do
    {
      v19[v20] = *(double *)&v18[8 * v20];
      ++v20;
    }
    while (v16 != v20);
    goto LABEL_21;
  }
  double v18 = 0;
  signed int v37 = v16;
  unint64_t v39 = 0;
  uint64_t v40 = 0;
  double __B = 0;
  if (v16) {
    goto LABEL_14;
  }
  signed int v41 = 0;
  if (v14) {
    goto LABEL_22;
  }
LABEL_23:
  sub_19E29FAE8((uint64_t)&__B, (uint64_t)__p);
  sub_19E2BBF98((uint64_t)__p, (uint64_t)v42, (uint64_t)__A);
  vDSP_mmulD(__A[0], 1, __B, 1, &__C, 1, 1uLL, 1uLL, (int)v29);
  double v25 = __C;
  if (__A[0])
  {
    __A[1] = __A[0];
    operator delete(__A[0]);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (__B)
  {
    unint64_t v39 = __B;
    operator delete(__B);
  }
  if (v42[0])
  {
    v42[1] = v42[0];
    operator delete(v42[0]);
  }
  return v25;
}

void sub_19E2CE570(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  if (__p)
  {
    operator delete(__p);
    signed int v30 = a11;
    if (!a11)
    {
LABEL_3:
      uint64_t v31 = a27;
      if (!a27)
      {
LABEL_8:
        uint64_t v32 = *(void **)(v28 - 112);
        if (v32)
        {
          *(void *)(v28 - 104) = v32;
          operator delete(v32);
        }
        _Unwind_Resume(exception_object);
      }
LABEL_7:
      operator delete(v31);
      goto LABEL_8;
    }
  }
  else
  {
    signed int v30 = a11;
    if (!a11) {
      goto LABEL_3;
    }
  }
  operator delete(v30);
  uint64_t v31 = a27;
  if (!a27) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

uint64_t sub_19E2CE648(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  sub_19E246830(&v13, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 4));
  __p = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  sub_19E246A1C(&__p, a3[3], a3[4], 0xCCCCCCCCCCCCCCCDLL * ((a3[4] - a3[3]) >> 3));
  sub_19E2CE7E4((void *)a1, a2, (uint64_t *)&v13);
  uint64_t v6 = (void **)__p;
  if (__p)
  {
    uint64_t v7 = v17;
    uint64_t v8 = __p;
    if (v17 != __p)
    {
      do
      {
        if (*((char *)v7 - 17) < 0) {
          operator delete(*(v7 - 5));
        }
        v7 -= 5;
      }
      while (v7 != v6);
      uint64_t v8 = __p;
    }
    uint64_t v17 = v6;
    operator delete(v8);
  }
  uint64_t v9 = (void **)v13;
  if (v13)
  {
    double v10 = v14;
    uint64_t v11 = v13;
    if (v14 != v13)
    {
      do
      {
        if (*((char *)v10 - 25) < 0) {
          operator delete(*(v10 - 6));
        }
        v10 -= 6;
      }
      while (v10 != v9);
      uint64_t v11 = v13;
    }
    uint64_t v14 = v9;
    operator delete(v11);
  }
  *(void *)a1 = &unk_1EF0A8258;
  *(_DWORD *)(a1 + 64) = 5;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_19E2CE7B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_19E2CE7C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    sub_19E32FAD8((uint64_t)&a9, a9);
  }
  _Unwind_Resume(exception_object);
}

void *sub_19E2CE7E4(void *a1, uint64_t a2, uint64_t *a3)
{
  *a1 = &unk_1EF0A8408;
  a1[1] = a2;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  sub_19E246830(a1 + 2, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 4));
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  sub_19E246A1C(a1 + 5, a3[3], a3[4], 0xCCCCCCCCCCCCCCCDLL * ((a3[4] - a3[3]) >> 3));
  return a1;
}

void sub_19E2CE884(_Unwind_Exception *exception_object)
{
  if (*v2) {
    sub_19E32FD88(v1, *v2);
  }
  _Unwind_Resume(exception_object);
}

void *sub_19E2CE8A4(void *a1)
{
  *a1 = &unk_1EF0A8258;
  long double v2 = (char **)a1[9];
  if (v2)
  {
    int v3 = (char **)a1[10];
    double v4 = v2;
    if (v3 != v2)
    {
      do
        int v3 = sub_19E2470C8(v3 - 13);
      while (v3 != v2);
      double v4 = (char **)a1[9];
    }
    a1[10] = v2;
    operator delete(v4);
  }

  return sub_19E2CEF58(a1);
}

void sub_19E2CE92C(void *a1)
{
  *a1 = &unk_1EF0A8258;
  long double v2 = (char **)a1[9];
  if (v2)
  {
    int v3 = (char **)a1[10];
    double v4 = v2;
    if (v3 != v2)
    {
      do
        int v3 = sub_19E2470C8(v3 - 13);
      while (v3 != v2);
      double v4 = (char **)a1[9];
    }
    a1[10] = v2;
    operator delete(v4);
  }
  uint64_t v5 = sub_19E2CEF58(a1);

  operator delete(v5);
}

void sub_19E2CE9B8(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  sub_19E2CF030(a1);
  uint64_t v6 = *(void *)(a1 + 72);
  if (v6 == *(void *)(a1 + 80))
  {
    uint64_t v39 = a3;
    sub_19E29CB00(a2, &v52);
    sub_19E2CF328(a2, (uint64_t)v49);
    uint64_t v7 = v50;
    if (v50 != v51)
    {
      do
      {
        uint64_t v8 = *(void *)((char *)v7 + 28);
        sub_19E291E68(v48, &v52[12 * (int)v8]);
        if (SHIDWORD(v8) >= 1)
        {
          int v9 = 0;
          unsigned int v10 = HIDWORD(v8) & ~(v8 >> 63);
          do
          {
            sub_19E2CF468(a1, (uint64_t *)v48, (uint64_t **)&__A);
            sub_19E2460A4((char **)v48, (uint64_t)&__A);
            sub_19E15A064((uint64_t)v47, v47[1]);
            sub_19E15A064((uint64_t)v46, v46[1]);
            uint64_t v11 = (char *)__p;
            if (__p)
            {
              unint64_t v12 = v45;
              int64_t v13 = __p;
              if (v45 != __p)
              {
                do
                {
                  uint64_t v14 = (void *)*((void *)v12 - 4);
                  if (v14)
                  {
                    *((void *)v12 - 3) = v14;
                    operator delete(v14);
                  }
                  if (*(v12 - 33) < 0) {
                    operator delete(*((void **)v12 - 7));
                  }
                  v12 -= 56;
                }
                while (v12 != v11);
                int64_t v13 = __p;
              }
              uint64_t v45 = v11;
              operator delete(v13);
            }
            uint64_t v15 = __A;
            if (*(double *)&__A != 0.0)
            {
              signed int v16 = v43;
              uint64_t v17 = __A;
              if (v43 != __A)
              {
                do
                {
                  uint64_t v18 = (void *)*((void *)v16 - 4);
                  if (v18)
                  {
                    *((void *)v16 - 3) = v18;
                    operator delete(v18);
                  }
                  if (*((char *)v16 - 33) < 0) {
                    operator delete(*((void **)v16 - 7));
                  }
                  v16 -= 7;
                }
                while (v16 != v15);
                uint64_t v17 = __A;
              }
              int v43 = v15;
              operator delete(v17);
            }
            signed int v41 = 0;
            uint64_t v19 = *(void *)(a1 + 8);
            sub_19E29CE6C((long long **)v48, (uint64_t)v40);
            uint64_t v20 = *(void *)(v19 + 8);
            if (*(_DWORD *)(v20 + 120))
            {
              sub_19E2CDFC8(*(void *)(v19 + 8), (const double **)v40, (uint64_t)&__A);
              __C[0] = 0.0;
              vDSP_dotprD(__A, 1, *(const double **)(v20 + 256), 1, __C, (int)__p);
              double v21 = __C[0];
              __C[0] = 0.0;
              vDSP_meanvD(*(const double **)(v20 + 288), 1, __C, *(int *)(v20 + 312));
              double v22 = __C[0];
              sub_19E2CF934(v20, (const double **)v40, (uint64_t)&__A);
              double v24 = v23;
              double v25 = *(double *)(v20 + 16);
              if (*(double *)&__A != 0.0)
              {
                int v43 = __A;
                operator delete(__A);
              }
              double v26 = v22 + v21;
              double v27 = v25 + v24;
            }
            else
            {
              *(double *)&__A = 0.0;
              vDSP_meanvD(*(const double **)(v20 + 288), 1, (double *)&__A, *(int *)(v20 + 312));
              double v26 = *(double *)&__A;
              double v27 = sub_19E2CF864(v20, (const double **)v40);
            }
            double v28 = sqrt(v27);
            if (v28 < 0.00000001 || (int v29 = *(_DWORD *)(*(void *)(v19 + 8) + 120), v29 <= 0))
            {
              double v30 = (*(double (**)(uint64_t))(*(void *)v19 + 8))(v19);
            }
            else
            {
              if (*(_DWORD *)(v19 + 56) != v29) {
                (*(void (**)(uint64_t))(*(void *)v19 + 16))(v19);
              }
              (**(void (***)(uint64_t, double, double))v19)(v19, v26, v28);
            }
            uint64_t v31 = *(uint64_t **)&v30;
            if (v40[0])
            {
              v40[1] = v40[0];
              operator delete(v40[0]);
            }
            signed int v41 = v31;
            sub_19E29D218((int *)(a1 + 64), (uint64_t *)v48, &v41);
            ++v9;
          }
          while (v10 != v9);
        }
        sub_19E2470C8((char **)v48);
        uint64_t v32 = (void *)v7[1];
        if (v32)
        {
          do
          {
            signed int v33 = (void **)v32;
            uint64_t v32 = (void *)*v32;
          }
          while (v32);
        }
        else
        {
          do
          {
            signed int v33 = (void **)v7[2];
            BOOL v34 = *v33 == v7;
            uint64_t v7 = v33;
          }
          while (!v34);
        }
        uint64_t v7 = v33;
      }
      while (v33 != v51);
    }
    uint64_t v35 = *(uint64_t **)(a1 + 72);
    sub_19E291E68((uint64_t **)v39, v35);
    *(void *)(v39 + 96) = v35[12];
    sub_19E29D74C(*(char ***)(a1 + 72), *(void *)(a1 + 80), (uint64_t)v48, 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 3));
    *(void *)(a1 + 80) = sub_19E2470C8((char **)(*(void *)(a1 + 80) - 104));
    sub_19E13C56C((uint64_t)&v50, v51[0]);
    uint64_t v36 = (char **)v52;
    if (v52)
    {
      signed int v37 = v53;
      double v38 = v52;
      if (v53 != (char **)v52)
      {
        do
          signed int v37 = sub_19E2470C8(v37 - 12);
        while (v37 != v36);
        double v38 = v52;
      }
      uint64_t v53 = v36;
      operator delete(v38);
    }
  }
  else
  {
    sub_19E291E68((uint64_t **)a3, *(uint64_t **)(a1 + 72));
    *(void *)(a3 + 96) = *(void *)(v6 + 96);
    sub_19E29D74C(*(char ***)(a1 + 72), *(void *)(a1 + 80), (uint64_t)v48, 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 3));
    *(void *)(a1 + 80) = sub_19E2470C8((char **)(*(void *)(a1 + 80) - 104));
  }
}

void sub_19E2CEE74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  sub_19E2470C8(v28);
  sub_19E13C56C(a10, *(void **)(v29 - 184));
  sub_19E2462FC((void **)(v29 - 168));
  _Unwind_Resume(a1);
}

void sub_19E2CEF0C(char *a1@<X8>)
{
  a1[23] = 17;
  strcpy(a1, "genetic_optimizer");
}

void sub_19E2CEF30(char *a1@<X8>)
{
  a1[23] = 21;
  strcpy(a1, "acquisition_optimizer");
}

void *sub_19E2CEF58(void *a1)
{
  *a1 = &unk_1EF0A8408;
  uint64_t v2 = a1[5];
  if (v2)
  {
    uint64_t v3 = a1[6];
    double v4 = (void *)a1[5];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 17) < 0) {
          operator delete(*(void **)(v3 - 40));
        }
        v3 -= 40;
      }
      while (v3 != v2);
      double v4 = (void *)a1[5];
    }
    a1[6] = v2;
    operator delete(v4);
  }
  uint64_t v5 = a1[2];
  if (v5)
  {
    uint64_t v6 = a1[3];
    uint64_t v7 = (void *)a1[2];
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 25) < 0) {
          operator delete(*(void **)(v6 - 48));
        }
        v6 -= 48;
      }
      while (v6 != v5);
      uint64_t v7 = (void *)a1[2];
    }
    a1[3] = v5;
    operator delete(v7);
  }
  return a1;
}

void sub_19E2CF030(uint64_t a1)
{
  int v18 = 5;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v19 = 0;
  uint64_t v3 = *(void *)(a1 + 72);
  uint64_t v2 = (uint64_t *)(a1 + 72);
  if (v3 == *(void *)(a1 + 80))
  {
    unint64_t v12 = 0;
    *(_DWORD *)(a1 + 64) = 5;
    if ((int *)(a1 + 64) == &v18) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  do
  {
    sub_19E291E68(v17, (uint64_t *)v3);
    v17[12] = *(uint64_t **)(v3 + 96);
    sub_19E29D74C(*(char ***)(a1 + 72), *(void *)(a1 + 80), (uint64_t)__p, 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 3));
    *(void *)(a1 + 80) = sub_19E2470C8((char **)(*(void *)(a1 + 80) - 104));
    signed int v16 = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    sub_19E29CE6C((long long **)v17, (uint64_t)__p);
    v5.n128_f64[0] = sub_19E2CF758(*(void *)(v4 + 8), (const double **)__p);
    double v7 = sqrt(v6);
    if (v7 < 0.00000001 || (int v8 = *(_DWORD *)(*(void *)(v4 + 8) + 120), v8 <= 0))
    {
      double v10 = (*(double (**)(uint64_t, __n128))(*(void *)v4 + 8))(v4, v5);
    }
    else
    {
      double v9 = v5.n128_f64[0];
      if (*(_DWORD *)(v4 + 56) != v8) {
        (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
      }
      (**(void (***)(uint64_t, double, double))v4)(v4, v9, v7);
    }
    *(double *)&uint64_t v11 = v10;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    signed int v16 = v11;
    if (*(double *)&v11 > (*(double (**)(void))(**(void **)(a1 + 8) + 8))(*(void *)(a1 + 8))) {
      sub_19E29D218(&v18, (uint64_t *)v17, &v16);
    }
    sub_19E2470C8((char **)v17);
    uint64_t v3 = *(void *)(a1 + 72);
  }
  while (v3 != *(void *)(a1 + 80));
  unint64_t v12 = v19;
  *(_DWORD *)(a1 + 64) = v18;
  if ((int *)(a1 + 64) != &v18)
  {
LABEL_17:
    sub_19E29D4FC(v2, v12, v20, 0x4EC4EC4EC4EC4EC5 * (v20 - v12));
    unint64_t v12 = v19;
  }
LABEL_18:
  if (v12)
  {
    int64_t v13 = (char **)v20;
    uint64_t v14 = v12;
    if (v20 != v12)
    {
      do
        int64_t v13 = sub_19E2470C8(v13 - 13);
      while (v13 != (char **)v12);
      uint64_t v14 = v19;
    }
    uint64_t v20 = v12;
    operator delete(v14);
  }
}

void sub_19E2CF2C4(_Unwind_Exception *a1)
{
  sub_19E29C7AC(v1 - 120);
  _Unwind_Resume(a1);
}

void sub_19E2CF2D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_19E2470C8((char **)va);
  sub_19E29C7AC(v7 - 120);
  _Unwind_Resume(a1);
}

void sub_19E2CF2FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *a15)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E2470C8(&a15);
  sub_19E29C7AC(v15 - 120);
  _Unwind_Resume(a1);
}

void sub_19E2CF328(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = a2 + 16;
  *(void *)(a2 + 24) = 0;
  sub_19E29DC58(a1, __p);
  sub_19E2459C8(v7, (uint64_t *)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v3 = 50;
  do
  {
    int v5 = sub_19E29E07C((uint64_t)v9, (uint64_t)v7, v9);
    uint64_t v4 = sub_19E29DD48((int *)a2, &v5);
    ++*(_DWORD *)v4;
    --v3;
  }
  while (v3);
  if (v9[0])
  {
    v9[1] = v9[0];
    operator delete(v9[0]);
  }
  std::random_device::~random_device(&v8);
}

void sub_19E2CF408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14)
{
  if (__p)
  {
    operator delete(__p);
    sub_19E13C56C(v14, *v15);
    _Unwind_Resume(a1);
  }
  sub_19E13C56C(v14, *v15);
  _Unwind_Resume(a1);
}

void sub_19E2CF468(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t **a3@<X8>)
{
  sub_19E291E68(a3, a2);
  sub_19E29E298((long long **)a2, (uint64_t)v8);
  sub_19E2CF5F8(a1, (uint64_t *)v8, v9);
  sub_19E29E624((uint64_t)a2, (uint64_t)v6);
  sub_19E2CF6A8(a1, (uint64_t *)v6, __p);
  sub_19E29E900((uint64_t *)a3, (uint64_t *)v9);
  sub_19E29EAC0((uint64_t)a3, (uint64_t *)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v6[0])
  {
    v6[1] = v6[0];
    operator delete(v6[0]);
  }
  if (*(void *)&v9[0])
  {
    *((void *)&v9[0] + 1) = *(void *)&v9[0];
    operator delete(*(void **)&v9[0]);
  }
  if (v8[0])
  {
    v8[1] = v8[0];
    operator delete(v8[0]);
  }
}

void sub_19E2CF538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v21 = *(void **)(v19 - 64);
    if (!v21)
    {
LABEL_3:
      double v22 = a17;
      if (!a17) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v21 = *(void **)(v19 - 64);
    if (!v21) {
      goto LABEL_3;
    }
  }
  *(void *)(v19 - 56) = v21;
  operator delete(v21);
  double v22 = a17;
  if (!a17)
  {
LABEL_4:
    sub_19E2470C8(v18);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(v22);
  sub_19E2470C8(v18);
  _Unwind_Resume(a1);
}

double sub_19E2CF5F8@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  int v5 = (uint64_t *)(a1 + 16);
  if (sub_19E244298((uint64_t *)(a1 + 16)))
  {
    sub_19E244360(v5, (uint64_t *)v7);
    sub_19E310AEC(a2, (uint64_t)v7, (uint64_t)a3);
    if (__p)
    {
      double v9 = __p;
      operator delete(__p);
    }
    if (v7[0])
    {
      v7[1] = v7[0];
      operator delete(v7[0]);
    }
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

void sub_19E2CF694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double sub_19E2CF6A8@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v5 = a1 + 16;
  if (sub_19E244DC4(a1 + 16))
  {
    sub_19E244E8C(v5, (uint64_t *)v7);
    sub_19E311780(a2, (uint64_t *)v7, (uint64_t)a3);
    if (__p)
    {
      double v9 = __p;
      operator delete(__p);
    }
    if (v7[0])
    {
      v7[1] = v7[0];
      operator delete(v7[0]);
    }
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

void sub_19E2CF744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double sub_19E2CF758(uint64_t a1, const double **a2)
{
  if (*(_DWORD *)(a1 + 120))
  {
    sub_19E2CDFC8(a1, a2, (uint64_t)__A);
    double __C = 0.0;
    vDSP_dotprD(__A[0], 1, *(const double **)(a1 + 256), 1, &__C, (int)__N);
    double v4 = __C;
    double __C = 0.0;
    vDSP_meanvD(*(const double **)(a1 + 288), 1, &__C, *(int *)(a1 + 312));
    double v5 = __C;
    sub_19E2CF934(a1, a2, (uint64_t)__A);
    if (__A[0])
    {
      __A[1] = __A[0];
      operator delete(__A[0]);
    }
    return v5 + v4;
  }
  else
  {
    double v6 = sub_19E2CDEE4(a1, a2);
    sub_19E2CF864(a1, a2);
  }
  return v6;
}

void sub_19E2CF844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_19E2CF864(uint64_t a1, const double **a2)
{
  if (*(_DWORD *)(a1 + 120))
  {
    sub_19E2CDFC8(a1, a2, (uint64_t)__p);
    sub_19E2CF934(a1, a2, (uint64_t)__p);
    double v5 = v4;
    double v6 = *(double *)(a1 + 16);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    return v6 + v5;
  }
  else
  {
    double v8 = *(double *)(a1 + 24);
    double v9 = sub_19E2CE274(a1 + 8, (uint64_t)a2, a2);
    return *(double *)(a1 + 16) + exp(v9 * -0.5) * v8;
  }
}

void sub_19E2CF918(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2CF934(uint64_t a1, const double **a2, uint64_t a3)
{
  sub_19E29F880(a1 + 192, (uint64_t)__p);
  uint64_t v6 = *(unsigned int *)(a1 + 216);
  if ((int)v6 >= 1)
  {
    uint64_t v7 = 0;
    int v8 = *(_DWORD *)(a1 + 220);
    int v9 = v24;
    int v10 = 1;
    int v11 = -1;
    unint64_t v12 = __p[0];
    do
    {
      if (v8 <= v10) {
        int v13 = v10;
      }
      else {
        int v13 = v8;
      }
      int v14 = v7 + 1;
      if ((int)v7 + 1 >= v8) {
        goto LABEL_3;
      }
      unsigned int v15 = 0;
      int v16 = v13 + v11;
      uint64_t v17 = (int)v7 * (uint64_t)v9;
      if ((v13 + v11) < 4)
      {
        int v18 = v7 + 1;
      }
      else
      {
        int v18 = v7 + 1;
        if (v13 - (int)v7 + v10 - 2 >= v10)
        {
          int v19 = 0;
          unsigned int v15 = v16 & 0xFFFFFFFC;
          int v18 = v14 + (v16 & 0xFFFFFFFC);
          do
          {
            uint64_t v20 = &v12[v17 + v10 + v19];
            *uint64_t v20 = 0uLL;
            v20[1] = 0uLL;
            v19 += 4;
          }
          while ((v16 & 0xFFFFFFFC) != v19);
          if (v16 == v15) {
            goto LABEL_3;
          }
        }
      }
      unsigned int v21 = v13 - v15;
      do
      {
        v12[v17 + v18] = 0;
        int v18 = ++v15 + v14;
        --v21;
      }
      while (v10 != v21);
LABEL_3:
      ++v7;
      ++v10;
      --v11;
    }
    while (v7 != v6);
  }
  sub_19E29F6FC((uint64_t)__p, a3, (uint64_t)__B);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  double v22 = sub_19E2CE274(a1 + 8, (uint64_t)a2, a2);
  __p[0] = 0;
  vDSP_dotprD(__B[0], 1, __B[0], 1, (double *)__p, (int)__N);
  if (__B[0])
  {
    __B[1] = __B[0];
    operator delete(__B[0]);
  }
  exp(v22 * -0.5);
}

void sub_19E2CFAFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E2CFB2C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  BOOL v34 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  sub_19E246830(&v34, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 4));
  __p = 0;
  double v38 = 0;
  uint64_t v39 = 0;
  sub_19E246A1C(&__p, a3[3], a3[4], 0xCCCCCCCCCCCCCCCDLL * ((a3[4] - a3[3]) >> 3));
  sub_19E2CE7E4((void *)a1, a2, (uint64_t *)&v34);
  int v8 = (void **)__p;
  if (__p)
  {
    int v9 = v38;
    int v10 = __p;
    if (v38 != __p)
    {
      do
      {
        if (*((char *)v9 - 17) < 0) {
          operator delete(*(v9 - 5));
        }
        v9 -= 5;
      }
      while (v9 != v8);
      int v10 = __p;
    }
    double v38 = v8;
    operator delete(v10);
  }
  int v11 = (void **)v34;
  if (v34)
  {
    unint64_t v12 = v35;
    int v13 = v34;
    if (v35 != v34)
    {
      do
      {
        if (*((char *)v12 - 25) < 0) {
          operator delete(*(v12 - 6));
        }
        v12 -= 6;
      }
      while (v12 != v11);
      int v13 = v34;
    }
    uint64_t v35 = v11;
    operator delete(v13);
  }
  *(void *)a1 = &unk_1EF0A8078;
  unsigned int v14 = sub_19E244298(a3);
  sub_19E2A099C(a1 + 64, v14);
  sub_19E299010(a1 + 184);
  sub_19E244360(a3, (uint64_t *)v32);
  sub_19E2A16E8(a1 + 64, (uint64_t *)v32);
  sub_19E2A1818(a1 + 64, (uint64_t *)v33);
  if (v33[0])
  {
    v33[1] = v33[0];
    operator delete(v33[0]);
  }
  if (v32[0])
  {
    v32[1] = v32[0];
    operator delete(v32[0]);
  }
  if ((a4 & 0xFF00000000) != 0)
  {
    uint64_t v15 = 0;
    *(_DWORD *)(a1 + 7776) = a4;
    uint64_t v16 = 1;
    unsigned int v17 = a4;
    do
    {
      int v18 = 1812433253 * (v17 ^ (v17 >> 30));
      unsigned int v17 = v18 + v16;
      *(_DWORD *)(a1 + 7780 + 4 * v15) = v15 + v18 + 1;
      ++v16;
      ++v15;
    }
    while (v15 != 623);
    *(void *)(a1 + 10272) = 0;
    *(_DWORD *)(a1 + 184) = a4;
    uint64_t v19 = 1;
    uint64_t v20 = 47;
    unsigned int v21 = a4;
    do
    {
      int v22 = 1812433253 * (v21 ^ (v21 >> 30));
      unsigned int v21 = v22 + v19;
      *(_DWORD *)(a1 + 4 * v20) = v20 + v22 - 46;
      ++v19;
      ++v20;
    }
    while (v20 != 670);
    uint64_t v23 = 0;
    *(void *)(a1 + 2680) = 0;
    *(_DWORD *)(a1 + 2712) = a4;
    uint64_t v24 = 1;
    unsigned int v25 = a4;
    do
    {
      int v26 = 1812433253 * (v25 ^ (v25 >> 30));
      unsigned int v25 = v26 + v24;
      *(_DWORD *)(a1 + 2716 + 4 * v23) = v23 + v26 + 1;
      ++v24;
      ++v23;
    }
    while (v23 != 623);
    uint64_t v27 = 0;
    *(void *)(a1 + 5208) = 0;
    *(_DWORD *)(a1 + 5232) = a4;
    uint64_t v28 = 1;
    unsigned int v29 = a4;
    do
    {
      int v30 = 1812433253 * (v29 ^ (v29 >> 30));
      unsigned int v29 = v30 + v28;
      *(_DWORD *)(a1 + 5236 + 4 * v27) = v27 + v30 + 1;
      ++v28;
      ++v27;
    }
    while (v27 != 623);
    *(void *)(a1 + 7728) = 0;
    sub_19E312C64();
  }
  return a1;
}

void sub_19E2CFE10(_Unwind_Exception *a1)
{
  sub_19E2A0A3C(v2);
  sub_19E2CEF58(v1);
  _Unwind_Resume(a1);
}

void sub_19E2CFE7C(_Unwind_Exception *a1)
{
  sub_19E2CEF58(v1);
  _Unwind_Resume(a1);
}

void sub_19E2CFE94(uint64_t a1)
{
  uint64_t v1 = sub_19E2D03DC(a1);

  operator delete(v1);
}

void sub_19E2CFEBC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v12 = 0u;
  memset(v11, 0, sizeof(v11));
  *(void *)&long long v12 = (char *)&v12 + 8;
  v15[0] = 0;
  v15[1] = 0;
  uint64_t v13 = 0;
  unsigned int v14 = v15;
  double v4 = (*(double (**)(void))(**(void **)(a1 + 8) + 8))(*(void *)(a1 + 8));
  sub_19E291E68((uint64_t **)a2, (uint64_t *)v11);
  *(double *)(a2 + 96) = v4;
  sub_19E2470C8((char **)v11);
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v16 = 0;
  sub_19E246830(&v16, *(void *)(a1 + 16), *(void *)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 4));
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  sub_19E246A1C(&v19, *(void *)(a1 + 40), *(void *)(a1 + 48), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 3));
  sub_19E2459CC((uint64_t *)&v16, a1 + 184, 5, (char **)&v22);
  double v5 = v19;
  if (v19)
  {
    uint64_t v6 = v20;
    uint64_t v7 = v19;
    if (v20 != v19)
    {
      do
      {
        if (*((char *)v6 - 17) < 0) {
          operator delete(*(v6 - 5));
        }
        v6 -= 5;
      }
      while (v6 != v5);
      uint64_t v7 = v19;
    }
    uint64_t v20 = v5;
    operator delete(v7);
  }
  uint64_t v8 = (uint64_t)v16;
  if (v16)
  {
    uint64_t v9 = v17;
    int v10 = v16;
    if ((void *)v17 != v16)
    {
      do
      {
        if (*(char *)(v9 - 25) < 0) {
          operator delete(*(void **)(v9 - 48));
        }
        v9 -= 48;
      }
      while (v9 != v8);
      int v10 = v16;
    }
    uint64_t v17 = v8;
    operator delete(v10);
  }
  sub_19E2D04B4(a1, v22);
}

void sub_19E2D0304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v8 = va_arg(va1, char *);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  sub_19E2470C8((char **)va1);
  sub_19E2470C8((char **)va);
  sub_19E2462FC((void **)(v6 - 112));
  sub_19E2470C8(v5);
  _Unwind_Resume(a1);
}

void sub_19E2D03BC(char *a1@<X8>)
{
  a1[23] = 16;
  strcpy(a1, "direct_optimizer");
}

void *sub_19E2D03DC(uint64_t a1)
{
  *(void *)a1 = &unk_1EF0A8078;
  std::random_device::~random_device((std::random_device *)(a1 + 10280));
  std::random_device::~random_device((std::random_device *)(a1 + 7736));
  std::random_device::~random_device((std::random_device *)(a1 + 5216));
  std::random_device::~random_device((std::random_device *)(a1 + 2688));
  *(void *)(a1 + 64) = &unk_1EF0A7F70;
  sub_19E311F9C(*(void *)(a1 + 72));
  uint64_t v2 = *(void **)(a1 + 128);
  if (v2)
  {
    *(void *)(a1 + 136) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 104);
  if (v3)
  {
    *(void *)(a1 + 112) = v3;
    operator delete(v3);
  }
  double v4 = *(void **)(a1 + 80);
  if (v4)
  {
    *(void *)(a1 + 88) = v4;
    operator delete(v4);
  }

  return sub_19E2CEF58((void *)a1);
}

void sub_19E2D04B4(uint64_t a1, long long **a2)
{
  v4[0] = a1;
  v4[1] = a2;
  uint64_t v2 = a1 + 64;
  sub_19E29E298(a2, (uint64_t)&__p);
  sub_19E2D0884(v2, (uint64_t)v4, (uint64_t)&__p);
}

void sub_19E2D07AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a13)
  {
    operator delete(a13);
    uint64_t v24 = __p;
    if (!__p)
    {
LABEL_4:
      sub_19E2470C8((char **)&a21);
      unsigned int v25 = *(void **)(v22 - 128);
      if (v25)
      {
        *(void *)(v22 - 120) = v25;
        operator delete(v25);
      }
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v24 = __p;
    if (!__p) {
      goto LABEL_4;
    }
  }
  operator delete(v24);
  goto LABEL_4;
}

void sub_19E2D0884(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a1 + 112)) {
    (**(void (***)(uint64_t, void))a1)(a1, *(unsigned int *)(a3 + 24));
  }
  operator new();
}

void sub_19E2D0D18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  __cxa_free_exception(v15);
  if (a2 != 3)
  {
    if (a2 == 2)
    {
      uint64_t v19 = __cxa_begin_catch(a1);
      (*(void (**)(void *))(*(void *)v19 + 16))(v19);
      sub_19E29FAE8(v14, (uint64_t)&a13);
      if (a13)
      {
        a14 = (uint64_t)a13;
        operator delete(a13);
      }
      __cxa_end_catch();
LABEL_13:
      JUMPOUT(0x19E2D0B00);
    }
    if (a2 != 1)
    {
      if (__p) {
        operator delete(__p);
      }
      _Unwind_Resume(a1);
    }
  }
  uint64_t v18 = __cxa_begin_catch(a1);
  (*(void (**)(void *))(*(void *)v18 + 16))(v18);
  __cxa_end_catch();
  goto LABEL_13;
}

void sub_19E2D0E68(uint64_t **a1, void *a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  double v5 = a1[1];
  unint64_t v7 = (char *)v5 - (char *)*a1;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  __p = 0;
  int v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  if (!(v7 >> 3))
  {
    uint64_t v8 = 0;
    __p = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    int v20 = v7 >> 3;
    if (v6 == v5) {
      goto LABEL_13;
    }
    goto LABEL_6;
  }
  if (((v7 >> 3) & 0x80000000) != 0) {
    sub_19E13D694();
  }
  uint64_t v8 = operator new((uint64_t)(v7 << 29) >> 29);
  bzero(v8, (uint64_t)(v7 << 29) >> 29);
  __p = v8;
  uint64_t v18 = (char *)v8 + ((uint64_t)(v7 << 29) >> 29);
  uint64_t v19 = (char *)v8 + 8 * (int)((uint64_t)v7 >> 3);
  int v20 = v7 >> 3;
  if (v6 != v5)
  {
LABEL_6:
    uint64_t v9 = 0;
    if (v7 - 8 < 0x18) {
      goto LABEL_11;
    }
    if ((unint64_t)((char *)v8 - (char *)v6) < 0x20) {
      goto LABEL_11;
    }
    unint64_t v10 = ((v7 - 8) >> 3) + 1;
    uint64_t v9 = v10 & 0x3FFFFFFFFFFFFFFCLL;
    uint64_t v11 = v8 + 1;
    uint64_t v12 = (long long *)(v6 + 2);
    uint64_t v13 = v10 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v14 = *v12;
      *(v11 - 1) = *(v12 - 1);
      *uint64_t v11 = v14;
      v11 += 2;
      v12 += 2;
      v13 -= 4;
    }
    while (v13);
    v6 += v10 & 0x3FFFFFFFFFFFFFFCLL;
    if (v10 != v9)
    {
LABEL_11:
      uint64_t v15 = (void *)v8 + v9;
      do
      {
        uint64_t v16 = *v6++;
        *v15++ = v16;
      }
      while (v6 != v5);
    }
  }
LABEL_13:
  if (*a2 == a2[1])
  {
    sub_19E2D103C(a3, (uint64_t)&__p);
    if (__p)
    {
      uint64_t v18 = (char *)__p;
      operator delete(__p);
    }
  }
  else
  {
    sub_19E2D103C(a3, (uint64_t)&__p);
    __break(1u);
  }
}

void sub_19E2D1000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2D1020(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E13A9BC(a1);
}

uint64_t sub_19E2D103C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*a1 + 8);
  sub_19E29E624(a1[1], (uint64_t)v25);
  uint64_t v4 = v26;
  uint64_t v28 = 0;
  unsigned int v29 = 0;
  uint64_t v27 = 0;
  if (!v26)
  {
    int v30 = 0;
    goto LABEL_11;
  }
  if ((v26 & 0x80000000) != 0) {
    sub_19E13D694();
  }
  double v5 = (float64x2_t *)operator new(8 * (int)v26);
  uint64_t v27 = v5;
  unsigned int v29 = (char *)&v5->f64[(int)v4];
  bzero(v5, 8 * (int)v4);
  uint64_t v28 = (char *)&v5->f64[(int)v4];
  int v30 = v4;
  uint64_t v6 = (char *)v25[0];
  if (v4 < 8)
  {
    uint64_t v7 = 0;
LABEL_9:
    uint64_t v16 = v4 - v7;
    uint64_t v17 = v7 << 32;
    do
    {
      *(double *)((char *)v5->f64 + (v17 >> 29)) = (double)*(int *)&v6[v17 >> 30];
      v17 += 0x100000000;
      --v16;
    }
    while (v16);
    goto LABEL_11;
  }
  uint64_t v7 = v4 & 0xFFFFFFF8;
  uint64_t v8 = v5 + 2;
  uint64_t v9 = (char *)v25[0] + 16;
  uint64_t v10 = v7;
  do
  {
    long long v11 = *((_OWORD *)v9 - 1);
    v12.i64[0] = (int)v11;
    v12.i64[1] = SDWORD1(v11);
    float64x2_t v13 = vcvtq_f64_s64(v12);
    v12.i64[0] = SDWORD2(v11);
    v12.i64[1] = SHIDWORD(v11);
    float64x2_t v14 = vcvtq_f64_s64(v12);
    v12.i64[0] = (int)*(_OWORD *)v9;
    v12.i64[1] = (int)HIDWORD(*(void *)v9);
    float64x2_t v15 = vcvtq_f64_s64(v12);
    v12.i64[0] = (int)*((void *)v9 + 1);
    v12.i64[1] = (int)HIDWORD(*(_OWORD *)v9);
    v8[-2] = v13;
    v8[-1] = v14;
    *uint64_t v8 = v15;
    v8[1] = vcvtq_f64_s64(v12);
    v8 += 4;
    v9 += 32;
    v10 -= 8;
  }
  while (v10);
  if (v7 != v4) {
    goto LABEL_9;
  }
LABEL_11:
  sub_19E29FF68(a2, (uint64_t)&v27, (uint64_t)__p);
  double v18 = sub_19E2CF758(*(void *)(v3 + 8), (const double **)__p);
  double v20 = sqrt(v19);
  if (v20 < 0.00000001 || (int v21 = *(_DWORD *)(*(void *)(v3 + 8) + 120), v21 <= 0))
  {
    double v22 = (*(double (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  else
  {
    if (*(_DWORD *)(v3 + 56) != v21) {
      (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
    (**(void (***)(uint64_t, double, double))v3)(v3, v18, v20);
  }
  double v23 = v22;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v27)
  {
    uint64_t v28 = (char *)v27;
    operator delete(v27);
  }
  if (v25[0])
  {
    v25[1] = v25[0];
    operator delete(v25[0]);
  }
  return *(void *)&v23;
}

void sub_19E2D1288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p)
  {
    operator delete(__p);
    double v19 = a9;
    if (!a9) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    double v19 = a9;
    if (!a9) {
      goto LABEL_3;
    }
  }
  operator delete(v19);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E2D1308(uint64_t a1)
{
  *(void *)a1 = &unk_1EF0A85E8;
  uint64_t v2 = *(char ***)(a1 + 10696);
  if (v2)
  {
    uint64_t v3 = *(char ***)(a1 + 10704);
    uint64_t v4 = v2;
    if (v3 != v2)
    {
      do
        uint64_t v3 = sub_19E2470C8(v3 - 12);
      while (v3 != v2);
      uint64_t v4 = *(char ***)(a1 + 10696);
    }
    *(void *)(a1 + 10704) = v2;
    operator delete(v4);
  }
  std::random_device::~random_device((std::random_device *)(a1 + 10688));
  std::random_device::~random_device((std::random_device *)(a1 + 8144));
  std::random_device::~random_device((std::random_device *)(a1 + 5624));
  std::random_device::~random_device((std::random_device *)(a1 + 3096));
  uint64_t v5 = *(void *)(a1 + 584);
  *(void *)(a1 + 584) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *(void *)(a1 + 504) = &unk_1EF0A7D68;
  uint64_t v6 = *(void **)(a1 + 520);
  if (v6)
  {
    *(void *)(a1 + 528) = v6;
    operator delete(v6);
  }
  sub_19E2BEE60((void *)(a1 + 176));
  uint64_t v7 = *(void *)(a1 + 152);
  if (v7)
  {
    uint64_t v8 = *(void *)(a1 + 160);
    uint64_t v9 = *(void **)(a1 + 152);
    if (v8 != v7)
    {
      uint64_t v10 = *(void *)(a1 + 160);
      do
      {
        int64x2_t v12 = *(void **)(v10 - 56);
        v10 -= 56;
        long long v11 = v12;
        if (v12)
        {
          *(void *)(v8 - 48) = v11;
          operator delete(v11);
        }
        uint64_t v8 = v10;
      }
      while (v10 != v7);
      uint64_t v9 = *(void **)(a1 + 152);
    }
    *(void *)(a1 + 160) = v7;
    operator delete(v9);
  }
  *(void *)a1 = &unk_1EF0A8318;
  sub_19E2934EC(a1 + 32);
  float64x2_t v13 = *(char ***)(a1 + 8);
  if (v13)
  {
    float64x2_t v14 = *(char ***)(a1 + 16);
    float64x2_t v15 = *(void **)(a1 + 8);
    if (v14 != v13)
    {
      do
        float64x2_t v14 = sub_19E2470C8(v14 - 13);
      while (v14 != v13);
      float64x2_t v15 = *(void **)(a1 + 8);
    }
    *(void *)(a1 + 16) = v13;
    operator delete(v15);
  }
  return a1;
}

void sub_19E2D14C4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t *)(a1 + 96);
  uint64_t v4 = *(void *)(a1 + 96);
  int v6 = *(_DWORD *)(a1 + 120);
  int v7 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 120) = v6 + 1;
  *(_DWORD *)(a1 + 124) = v7;
  unint64_t v8 = v7 * (v6 + 1);
  unint64_t v9 = (*(void *)(a1 + 104) - v4) >> 3;
  if (v8 <= v9)
  {
    if (v8 < v9) {
      *(void *)(a1 + 104) = v4 + 8 * v8;
    }
  }
  else
  {
    sub_19E2482DC(a1 + 96, v8 - v9);
    int v6 = *(_DWORD *)(a1 + 120) - 1;
  }
  sub_19E29FAE8(a2, (uint64_t)__p);
  uint64_t v10 = *(int *)(a1 + 124);
  long long v11 = (char *)__p[0];
  if (!v10)
  {
    if (!__p[0]) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  uint64_t v12 = (int)v10 * (uint64_t)v6;
  uint64_t v13 = *v5;
  if (v10 >= 8 && (uint64_t v14 = 8 * v12 + v13, v14 - (unint64_t)__p[0] >= 0x20))
  {
    unint64_t v15 = v10 & 0xFFFFFFFFFFFFFFFCLL;
    double v20 = (long long *)((char *)__p[0] + 16);
    int v21 = (_OWORD *)(v14 + 16);
    unint64_t v22 = v10 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      long long v23 = *v20;
      *(v21 - 1) = *(v20 - 1);
      *int v21 = v23;
      v20 += 2;
      v21 += 2;
      v22 -= 4;
    }
    while (v22);
    if (v15 == v10) {
      goto LABEL_17;
    }
  }
  else
  {
    unint64_t v15 = 0;
  }
  uint64_t v16 = v10 - v15;
  uint64_t v17 = (void *)(v13 + 8 * (v15 + v12));
  double v18 = &v11[8 * v15];
  do
  {
    uint64_t v19 = *(void *)v18;
    v18 += 8;
    *v17++ = v19;
    --v16;
  }
  while (v16);
LABEL_17:
  __p[1] = v11;
  operator delete(v11);
LABEL_18:
  sub_19E2D1600(a1, 1, 1);
}

void sub_19E2D1600(uint64_t a1, int a2, int a3)
{
  if (a2)
  {
    uint64_t v5 = (void *)(a1 + 128);
    uint64_t v4 = *(void *)(a1 + 128);
    int v6 = *(_DWORD *)(a1 + 120);
    *(_DWORD *)(a1 + 152) = v6;
    unint64_t v7 = (*(void *)(a1 + 136) - v4) >> 3;
    uint64_t v35 = v6;
    if (v6 <= v7)
    {
      if (v6 < v7) {
        *(void *)(a1 + 136) = v4 + 8 * v6;
      }
    }
    else
    {
      sub_19E2482DC(a1 + 128, v6 - v7);
      int v6 = *(_DWORD *)(a1 + 120);
      uint64_t v35 = v6;
    }
    if (v6)
    {
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      while (1)
      {
        uint64_t v10 = *(void *)(a1 + 96);
        signed int v11 = *(_DWORD *)(a1 + 124);
        double __C = 0;
        signed int v41 = 0;
        uint64_t v42 = 0;
        if (v11) {
          break;
        }
        uint64_t v12 = 0;
        signed int v37 = 0;
        uint64_t v38 = 0;
        __p = 0;
        unsigned int v39 = 0;
LABEL_26:
        double __C = 0;
        vDSP_meanvD(*(const double **)(a1 + 288), 1, (double *)&__C, *(int *)(a1 + 312));
        *(void *)(*v5 + 8 * v9) = __C;
        if (__p)
        {
          signed int v37 = __p;
          operator delete(__p);
        }
        if (v12) {
          operator delete(v12);
        }
        ++v9;
        v8 += 8;
        if (v9 == v35) {
          goto LABEL_34;
        }
      }
      if (v11 < 0) {
        sub_19E13D694();
      }
      uint64_t v12 = operator new(8 * v11);
      bzero(v12, 8 * v11);
      if (v11 >= 8 && (unint64_t)v12 - v10 - 8 * v9 * v11 >= 0x20)
      {
        unint64_t v13 = v11 & 0xFFFFFFFFFFFFFFFCLL;
        uint64_t v28 = (long long *)(v10 + v8 * v11 + 16);
        unsigned int v29 = v12 + 1;
        unint64_t v30 = v13;
        do
        {
          long long v31 = *v28;
          *(v29 - 1) = *(v28 - 1);
          *unsigned int v29 = v31;
          v28 += 2;
          v29 += 2;
          v30 -= 4;
        }
        while (v30);
        if (v13 == v11)
        {
LABEL_16:
          __p = 0;
          signed int v37 = 0;
          uint64_t v38 = 0;
          unsigned int v39 = v11;
          sub_19E2482DC((uint64_t)&__p, v11);
          uint64_t v19 = v39;
          if ((int)v39 >= 1)
          {
            uint64_t v20 = 0;
            int v21 = (char *)__p;
            if (v39 < 4) {
              goto LABEL_22;
            }
            if ((unint64_t)((unsigned char *)__p - (unsigned char *)v12) < 0x20) {
              goto LABEL_22;
            }
            unint64_t v22 = 0;
            uint64_t v20 = v39 & 0xFFFFFFFC;
            uint64_t v23 = (8 * v39) & 0x7FFFFFFE0;
            do
            {
              long long v24 = v12[v22 / 0x10 + 1];
              unsigned int v25 = &v21[v22];
              *(_OWORD *)unsigned int v25 = v12[v22 / 0x10];
              *((_OWORD *)v25 + 1) = v24;
              v22 += 32;
            }
            while (v23 != v22);
            if (v20 != v19)
            {
LABEL_22:
              uint64_t v26 = v19 - v20;
              uint64_t v27 = v20 << 32;
              do
              {
                *(void *)&v21[v27 >> 29] = *(void *)((char *)v12 + (v27 >> 29));
                v27 += 0x100000000;
                --v26;
              }
              while (v26);
            }
          }
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v13 = 0;
      }
      unint64_t v14 = v11 - v13;
      uint64_t v15 = 8 * v13;
      uint64_t v16 = (void *)v12 + v13;
      uint64_t v17 = (uint64_t *)(v10 + v15 + v8 * v11);
      do
      {
        uint64_t v18 = *v17++;
        *v16++ = v18;
        --v14;
      }
      while (v14);
      goto LABEL_16;
    }
  }
LABEL_34:
  sub_19E2D1980(a1 + 8, (uint64_t *)(a1 + 96), (uint64_t)&__C);
  if ((char **)(a1 + 160) != &__C) {
    sub_19E1E5B9C((void *)(a1 + 160), __C, v41, (v41 - __C) >> 3);
  }
  uint64_t v32 = __C;
  *(void *)(a1 + 184) = v43;
  if (v32)
  {
    signed int v41 = v32;
    operator delete(v32);
  }
  sub_19E2A4E4C(a1 + 160, (uint64_t)&__C);
  if ((char **)(a1 + 192) != &__C) {
    sub_19E1E5B9C((void *)(a1 + 192), __C, v41, (v41 - __C) >> 3);
  }
  signed int v33 = __C;
  *(void *)(a1 + 216) = v43;
  if (v33)
  {
    signed int v41 = v33;
    operator delete(v33);
  }
  sub_19E2D1E44(a1);
  if (a3) {
    sub_19E2D2068((int32x2_t *)a1);
  }
}

void sub_19E2D191C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2D1980(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *((unsigned int *)a2 + 6);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  if (!v4)
  {
    unint64_t v7 = 0;
    *(_DWORD *)(a3 + 24) = 0;
    *(_DWORD *)(a3 + 28) = 0;
LABEL_41:
    uint64_t v41 = (int)v4;
    if (v4) {
      goto LABEL_42;
    }
    return;
  }
  size_t v6 = 8 * (v4 * v4);
  unint64_t v7 = (char *)operator new(v6);
  *(void *)a3 = v7;
  *(void *)(a3 + 16) = &v7[v6];
  bzero(v7, v6);
  *(void *)(a3 + 8) = &v7[v6];
  *(_DWORD *)(a3 + 24) = v4;
  *(_DWORD *)(a3 + 28) = v4;
  if ((int)v4 <= 0) {
    goto LABEL_41;
  }
  uint64_t v49 = 0;
  uint64_t v8 = 0;
  uint64_t v52 = 1;
  uint64_t v47 = v4;
  uint64_t v48 = a1;
  do
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v51 = (int)v8 * v4;
    do
    {
      uint64_t v11 = *a2;
      signed int v12 = *((_DWORD *)a2 + 7);
      __p = 0;
      uint64_t v58 = 0;
      unint64_t v59 = 0;
      if (v12)
      {
        if (v12 < 0) {
          sub_19E13D694();
        }
        unint64_t v13 = v7;
        size_t v14 = 8 * v12;
        uint64_t v15 = operator new(v14);
        bzero(v15, v14);
        if (v12 < 8 || (unint64_t)v15 - v11 - 8 * v8 * v12 < 0x20)
        {
          unint64_t v16 = 0;
          goto LABEL_12;
        }
        unint64_t v16 = v12 & 0xFFFFFFFFFFFFFFFCLL;
        signed int v33 = (long long *)(v11 + v49 * v12 + 16);
        BOOL v34 = v15 + 1;
        unint64_t v35 = v16;
        do
        {
          long long v36 = *v33;
          *(v34 - 1) = *(v33 - 1);
          *BOOL v34 = v36;
          v33 += 2;
          v34 += 2;
          v35 -= 4;
        }
        while (v35);
        if (v16 != v12)
        {
LABEL_12:
          unint64_t v17 = v12 - v16;
          uint64_t v18 = 8 * v16;
          uint64_t v19 = (void *)v15 + v16;
          uint64_t v20 = (uint64_t *)(v11 + v18 + v49 * v12);
          do
          {
            uint64_t v21 = *v20++;
            *v19++ = v21;
            --v17;
          }
          while (v17);
        }
        uint64_t v53 = 0;
        long long v54 = 0;
        signed int v56 = 0;
        uint64_t v55 = 0;
        uint64_t v53 = operator new(8 * v12);
        long long v54 = (char *)v53 + v14;
        uint64_t v55 = (char *)v53 + 8 * v12;
        signed int v56 = v12;
        memcpy(v53, v15, 8 * v12);
        unint64_t v22 = operator new(8 * v12);
        bzero(v22, 8 * v12);
        if (v12 < 8 || (unint64_t)v22 - v11 - 8 * v10 * v12 < 0x20)
        {
          unint64_t v23 = 0;
          goto LABEL_17;
        }
        unint64_t v23 = v12 & 0xFFFFFFFFFFFFFFFCLL;
        signed int v37 = (long long *)(v11 + v9 * v12 + 16);
        uint64_t v38 = v22 + 1;
        unint64_t v39 = v23;
        do
        {
          long long v40 = *v37;
          *(v38 - 1) = *(v37 - 1);
          *uint64_t v38 = v40;
          v37 += 2;
          v38 += 2;
          v39 -= 4;
        }
        while (v39);
        if (v23 != v12)
        {
LABEL_17:
          unint64_t v24 = v12 - v23;
          uint64_t v25 = 8 * v23;
          uint64_t v26 = (void *)v22 + v23;
          uint64_t v27 = (uint64_t *)(v11 + v25 + v9 * v12);
          do
          {
            uint64_t v28 = *v27++;
            *v26++ = v28;
            --v24;
          }
          while (v24);
        }
        __p = 0;
        uint64_t v58 = 0;
        signed int v60 = 0;
        unint64_t v59 = 0;
        uint64_t v29 = (int)v10;
        __p = operator new(8 * v12);
        uint64_t v58 = (char *)__p + v14;
        unint64_t v59 = (char *)__p + 8 * v12;
        signed int v60 = v12;
        memcpy(__p, v22, 8 * v12);
        unint64_t v7 = v13;
        a1 = v48;
        goto LABEL_21;
      }
      uint64_t v15 = 0;
      unint64_t v22 = 0;
      long long v54 = 0;
      uint64_t v55 = 0;
      uint64_t v53 = 0;
      signed int v56 = 0;
      uint64_t v29 = (int)v10;
      __p = 0;
      uint64_t v58 = 0;
      signed int v60 = 0;
      unint64_t v59 = 0;
LABEL_21:
      double v30 = *(double *)(a1 + 16);
      double v31 = sub_19E2CE274(a1, (uint64_t)&v53, (const double **)&__p);
      double v32 = exp(v31 * -0.5) * v30;
      if (v8 == v10) {
        double v32 = v32 + *(double *)(a1 + 8) + 1.0e-10;
      }
      *(double *)&v7[8 * v29 + 8 * v51] = v32;
      if (__p)
      {
        uint64_t v58 = (char *)__p;
        operator delete(__p);
      }
      if (v22) {
        operator delete(v22);
      }
      if (v53)
      {
        long long v54 = (char *)v53;
        operator delete(v53);
      }
      if (v15) {
        operator delete(v15);
      }
      ++v10;
      v9 += 8;
    }
    while (v10 != v52);
    ++v8;
    ++v52;
    v49 += 8;
    uint64_t v4 = v47;
  }
  while (v8 != v47);
  uint64_t v41 = v47;
LABEL_42:
  if (v41 != 1)
  {
    uint64_t v42 = 0;
    uint64_t v43 = 8 * v41;
    float64x2_t v44 = v7;
    do
    {
      if (v42)
      {
        uint64_t v45 = 0;
        unint64_t v46 = v44;
        do
        {
          *unint64_t v46 = *(void *)&v7[8 * v45++];
          unint64_t v46 = (void *)((char *)v46 + v43);
        }
        while (v42 != v45);
      }
      ++v42;
      ++v44;
      v7 += v43;
    }
    while (v42 != v41);
  }
}

void sub_19E2D1DA0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E13A9BC(a1);
}

void sub_19E2D1DC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v27 = a10;
    if (!v25)
    {
LABEL_3:
      uint64_t v28 = a18;
      if (!a18) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v27 = a10;
    if (!v25) {
      goto LABEL_3;
    }
  }
  operator delete(v25);
  uint64_t v28 = a18;
  if (!a18)
  {
LABEL_4:
    if (!v23) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  operator delete(v28);
  if (!v23)
  {
LABEL_5:
    *(void *)(v27 + 8) = v24;
    operator delete(v24);
    _Unwind_Resume(a1);
  }
LABEL_9:
  operator delete(v23);
  *(void *)(v27 + 8) = v24;
  operator delete(v24);
  _Unwind_Resume(a1);
}

void sub_19E2D1E44(uint64_t a1)
{
  sub_19E29F880(a1 + 192, (uint64_t)v22);
  uint64_t v2 = *(unsigned int *)(a1 + 216);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 0;
    int v4 = *(_DWORD *)(a1 + 220);
    int v5 = v23;
    int v6 = 1;
    int v7 = -1;
    uint64_t v8 = v22[0];
    do
    {
      if (v4 <= v6) {
        int v9 = v6;
      }
      else {
        int v9 = v4;
      }
      int v10 = v3 + 1;
      if ((int)v3 + 1 >= v4) {
        goto LABEL_3;
      }
      unsigned int v11 = 0;
      int v12 = v9 + v7;
      uint64_t v13 = (int)v3 * (uint64_t)v5;
      if ((v9 + v7) < 4)
      {
        int v14 = v3 + 1;
      }
      else
      {
        int v14 = v3 + 1;
        if (v9 - (int)v3 + v6 - 2 >= v6)
        {
          int v15 = 0;
          unsigned int v11 = v12 & 0xFFFFFFFC;
          int v14 = v10 + (v12 & 0xFFFFFFFC);
          do
          {
            unint64_t v16 = &v8[v13 + v6 + v15];
            *unint64_t v16 = 0uLL;
            v16[1] = 0uLL;
            v15 += 4;
          }
          while ((v12 & 0xFFFFFFFC) != v15);
          if (v12 == v11) {
            goto LABEL_3;
          }
        }
      }
      unsigned int v17 = v9 - v11;
      do
      {
        v8[v13 + v14] = 0;
        int v14 = ++v11 + v10;
        --v17;
      }
      while (v6 != v17);
LABEL_3:
      ++v3;
      ++v6;
      --v7;
    }
    while (v3 != v2);
  }
  sub_19E2D22D0(a1, (uint64_t)v18);
  sub_19E29F6FC((uint64_t)v22, (uint64_t)v18, (uint64_t)&__p);
  if ((void **)(a1 + 256) != &__p) {
    sub_19E1E5B9C((void *)(a1 + 256), (char *)__p, v20, (v20 - (unsigned char *)__p) >> 3);
  }
  *(_DWORD *)(a1 + 280) = v21;
  if (__p)
  {
    uint64_t v20 = (char *)__p;
    operator delete(__p);
  }
  if (v18[0])
  {
    v18[1] = v18[0];
    operator delete(v18[0]);
  }
  sub_19E29FC64((uint64_t)v22, &__p);
  sub_19E2A58A8((uint64_t)&__p, a1 + 256);
  if (__p)
  {
    uint64_t v20 = (char *)__p;
    operator delete(__p);
  }
  if (v22[0])
  {
    v22[1] = v22[0];
    operator delete(v22[0]);
  }
}

void sub_19E2D2004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  if (a17) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2D2068(int32x2_t *a1)
{
  uint64_t v2 = a1[15].u32[0];
  sub_19E242424(v2, v2, (uint64_t)&__p);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = v29.i32[1] + 1;
    int v4 = __p;
    if (v2 == 1)
    {
      uint64_t v5 = 0;
LABEL_7:
      uint64_t v8 = v2 - v5;
      uint64_t v9 = v5 << 32;
      do
      {
        v4[(v9 >> 32) * v3] = 0x3FF0000000000000;
        v9 += 0x100000000;
        --v8;
      }
      while (v8);
      goto LABEL_9;
    }
    uint64_t v6 = 0;
    uint64_t v5 = v2 & 0xFFFFFFFE;
    uint64_t v7 = v5;
    do
    {
      v4[(v6 >> 32) * v3] = 0x3FF0000000000000;
      v4[((v6 >> 32) | 1) * v3] = 0x3FF0000000000000;
      v6 += 0x200000000;
      v7 -= 2;
    }
    while (v7);
    if (v5 != v2) {
      goto LABEL_7;
    }
  }
LABEL_9:
  if (&a1[28] != (int32x2_t *)&__p) {
    sub_19E1E5B9C(&a1[28], (char *)__p, v28, (v28 - (unsigned char *)__p) >> 3);
  }
  int v10 = (char *)__p;
  a1[31] = v29;
  if (v10)
  {
    uint64_t v28 = v10;
    operator delete(v10);
  }
  sub_19E29F880((uint64_t)&a1[24], (uint64_t)&__p);
  uint64_t v11 = a1[27].u32[0];
  if ((int)v11 >= 1)
  {
    uint64_t v12 = 0;
    int v13 = a1[27].i32[1];
    __int32 v14 = v29.i32[1];
    int v15 = 1;
    int v16 = -1;
    unsigned int v17 = __p;
    do
    {
      if (v13 <= v15) {
        int v18 = v15;
      }
      else {
        int v18 = v13;
      }
      int v19 = v12 + 1;
      if ((int)v12 + 1 >= v13) {
        goto LABEL_15;
      }
      unsigned int v20 = 0;
      int v21 = v18 + v16;
      uint64_t v22 = (int)v12 * (uint64_t)v14;
      if ((v18 + v16) < 4)
      {
        int v23 = v12 + 1;
      }
      else
      {
        int v23 = v12 + 1;
        if (v18 - (int)v12 + v15 - 2 >= v15)
        {
          int v24 = 0;
          unsigned int v20 = v21 & 0xFFFFFFFC;
          int v23 = v19 + (v21 & 0xFFFFFFFC);
          do
          {
            uint64_t v25 = &v17[v22 + v15 + v24];
            _OWORD *v25 = 0uLL;
            v25[1] = 0uLL;
            v24 += 4;
          }
          while ((v21 & 0xFFFFFFFC) != v24);
          if (v21 == v20) {
            goto LABEL_15;
          }
        }
      }
      unsigned int v26 = v18 - v20;
      do
      {
        v17[v22 + v23] = 0;
        int v23 = ++v20 + v19;
        --v26;
      }
      while (v15 != v26);
LABEL_15:
      ++v12;
      ++v15;
      --v16;
    }
    while (v12 != v11);
  }
  sub_19E2A59C0((uint64_t)&__p, a1 + 28);
  if (__p)
  {
    uint64_t v28 = (char *)__p;
    operator delete(__p);
  }
  sub_19E29FC64((uint64_t)&a1[24], &__p);
  sub_19E2A59C0((uint64_t)&__p, a1 + 28);
  if (__p)
  {
    uint64_t v28 = (char *)__p;
    operator delete(__p);
  }
}

void sub_19E2D22AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2D22D0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  signed int v4 = *(_DWORD *)(a1 + 312);
  uint64_t v5 = 8 * v4;
  if (v4)
  {
    if (v4 < 0) {
      sub_19E13D694();
    }
    uint64_t v6 = (char *)operator new(8 * v4);
    bzero(v6, 8 * v4);
    unint64_t v7 = 0;
    uint64_t v8 = &v6[v5];
    uint64_t v9 = *(void *)(a1 + 288);
    if (v4 < 4) {
      goto LABEL_48;
    }
    if ((unint64_t)&v6[-v9] < 0x20) {
      goto LABEL_48;
    }
    uint64_t v10 = 0;
    unint64_t v7 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v11 = v7;
    do
    {
      long long v12 = *(_OWORD *)(v9 + v10 + 16);
      int v13 = &v6[v10];
      *(_OWORD *)int v13 = *(_OWORD *)(v9 + v10);
      *((_OWORD *)v13 + 1) = v12;
      v10 += 32;
      v11 -= 4;
    }
    while (v11);
    if (v7 != v4)
    {
LABEL_48:
      do
      {
        *(void *)&v6[8 * v7] = *(void *)(v9 + 8 * v7);
        ++v7;
      }
      while (v4 != v7);
    }
    uint64_t v14 = *(int *)(a1 + 152);
    if (v14) {
      goto LABEL_10;
    }
LABEL_19:
    int v15 = 0;
    goto LABEL_20;
  }
  uint64_t v8 = 0;
  uint64_t v6 = 0;
  uint64_t v14 = *(int *)(a1 + 152);
  if (!v14) {
    goto LABEL_19;
  }
LABEL_10:
  if ((v14 & 0x80000000) != 0) {
    sub_19E13D694();
  }
  int v15 = (char *)operator new(8 * v14);
  bzero(v15, 8 * v14);
  unint64_t v16 = 0;
  uint64_t v17 = *(void *)(a1 + 128);
  if (v14 < 4) {
    goto LABEL_49;
  }
  if ((unint64_t)&v15[-v17] < 0x20) {
    goto LABEL_49;
  }
  uint64_t v18 = 0;
  unint64_t v16 = v14 & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v19 = v14 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    long long v20 = *(_OWORD *)(v17 + v18 + 16);
    int v21 = &v15[v18];
    *(_OWORD *)int v21 = *(_OWORD *)(v17 + v18);
    *((_OWORD *)v21 + 1) = v20;
    v18 += 32;
    v19 -= 4;
  }
  while (v19);
  if (v16 != v14)
  {
LABEL_49:
    do
    {
      *(void *)&v15[8 * v16] = *(void *)(v17 + 8 * v16);
      ++v16;
    }
    while (v14 != v16);
  }
LABEL_20:
  vDSP_vsubD((const double *)v15, 1, (const double *)v6, 1, (double *)v6, 1, v4);
  if (v8 != v6)
  {
    if (v8 - v6 < 0) {
      sub_19E13D694();
    }
    uint64_t v22 = (char *)operator new(v8 - v6);
    memcpy(v22, v6, v8 - v6);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)a2 = 0;
    if (!v4)
    {
      *(_DWORD *)(a2 + 24) = 0;
      operator delete(v22);
      if (!v15) {
        goto LABEL_35;
      }
LABEL_34:
      operator delete(v15);
      goto LABEL_35;
    }
LABEL_26:
    if (v4 < 0) {
      sub_19E13D694();
    }
    int v23 = (char *)operator new(8 * v4);
    *(void *)a2 = v23;
    *(void *)(a2 + 16) = &v23[8 * v4];
    bzero(v23, 8 * v4);
    *(void *)(a2 + 8) = &v23[v5];
    *(_DWORD *)(a2 + 24) = v4;
    if (v4 >= 4)
    {
      uint64_t v25 = 0;
      unint64_t v24 = v4 & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v26 = v24;
      do
      {
        long long v27 = *(_OWORD *)&v22[v25 + 16];
        uint64_t v28 = &v23[v25];
        *(_OWORD *)uint64_t v28 = *(_OWORD *)&v22[v25];
        *((_OWORD *)v28 + 1) = v27;
        v25 += 32;
        v26 -= 4;
      }
      while (v26);
      if (v24 == v4)
      {
LABEL_33:
        operator delete(v22);
        if (!v15) {
          goto LABEL_35;
        }
        goto LABEL_34;
      }
    }
    else
    {
      unint64_t v24 = 0;
    }
    do
    {
      *(void *)&v23[8 * v24] = *(void *)&v22[8 * v24];
      ++v24;
    }
    while (v4 != v24);
    goto LABEL_33;
  }
  uint64_t v22 = 0;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  if (v4) {
    goto LABEL_26;
  }
  *(_DWORD *)(a2 + 24) = 0;
  if (v15) {
    goto LABEL_34;
  }
LABEL_35:
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_19E2D2608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (v19)
  {
    operator delete(v19);
    if (!v18) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if (!v18)
  {
    goto LABEL_3;
  }
  operator delete(v18);
  _Unwind_Resume(exception_object);
}

void sub_19E2D266C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  if (a9) {
    operator delete(a9);
  }
  sub_19E13A9BC(a1);
}

void sub_19E2D2680(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13) {
    JUMPOUT(0x19E2D2690);
  }
  JUMPOUT(0x19E2D2694);
}

void sub_19E2D269C(uint64_t a1, uint64_t a2)
{
  uint64_t v32 = a2;
  sub_19E2A099C((uint64_t)&v31, *(_DWORD *)(a2 + 8) + 1);
  sub_19E248FE0((uint64_t)v29, *(_DWORD *)(a2 + 8) + 1);
  uint64_t v3 = v29[0];
  *(void *)v29[0] = 0xC01E000000000000;
  signed int v4 = __p[0];
  *(void *)__p[0] = 0x401E000000000000;
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5 >= 1)
  {
    unsigned int v6 = 0;
    signed int v7 = 1;
    if (v5 < 0xA) {
      goto LABEL_7;
    }
    if ((unint64_t)(v4 - v3) < 0x20) {
      goto LABEL_7;
    }
    int v8 = 0;
    unsigned int v6 = v5 & 0xFFFFFFFC;
    signed int v7 = v5 & 0xFFFFFFFC | 1;
    __asm
    {
      FMOV            V0.2D, #-10.0
      FMOV            V1.2D, #10.0
    }
    do
    {
      uint64_t v15 = 8 * v8;
      unint64_t v16 = &v3[v15 + 8];
      *unint64_t v16 = _Q0;
      v16[1] = _Q0;
      uint64_t v17 = &v4[v15 + 8];
      _OWORD *v17 = _Q1;
      v17[1] = _Q1;
      v8 += 4;
    }
    while (v6 != v8);
    if (v6 != v5)
    {
LABEL_7:
      unsigned int v18 = v5 - v6;
      do
      {
        uint64_t v19 = 8 * v7;
        *(void *)&v3[v19] = 0xC024000000000000;
        *(void *)&v4[v19] = 0x4024000000000000;
        signed int v7 = v6 + 2;
        ++v6;
        --v18;
      }
      while (v18);
    }
  }
  sub_19E2A16E8((uint64_t)&v31, (uint64_t *)v29);
  sub_19E2A1818((uint64_t)&v31, (uint64_t *)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v29[0])
  {
    v29[1] = v29[0];
    operator delete(v29[0]);
  }
  int v21 = *(unsigned char **)(a2 + 64);
  long long v20 = *(unsigned char **)(a2 + 72);
  uint64_t v25 = 0;
  unint64_t v26 = 0;
  long long v27 = 0;
  int64_t v22 = v20 - v21;
  if (v20 != v21)
  {
    if (v22 < 0) {
      sub_19E13D694();
    }
    int v23 = (char *)operator new(v20 - v21);
    unint64_t v24 = &v23[8 * (v22 >> 3)];
    uint64_t v25 = v23;
    long long v27 = v24;
    memcpy(v23, v21, v22);
    unint64_t v26 = v24;
  }
  int v28 = *(_DWORD *)(a2 + 88);
  sub_19E2D2A48((uint64_t)&v31, (uint64_t)&v32, (uint64_t)&v25);
}

void sub_19E2D29C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  if (__p)
  {
    operator delete(__p);
    sub_19E2A0A3C(&a29);
    _Unwind_Resume(a1);
  }
  sub_19E2A0A3C(&a29);
  _Unwind_Resume(a1);
}

void sub_19E2D2A2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
}

void sub_19E2D2A48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a1 + 112)) {
    (**(void (***)(uint64_t, void))a1)(a1, *(unsigned int *)(a3 + 24));
  }
  operator new();
}

void sub_19E2D2EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  __cxa_free_exception(v15);
  if (a2 != 3)
  {
    if (a2 == 2)
    {
      uint64_t v19 = __cxa_begin_catch(a1);
      (*(void (**)(void *))(*(void *)v19 + 16))(v19);
      sub_19E29FAE8(v14, (uint64_t)&a13);
      if (a13)
      {
        a14 = (uint64_t)a13;
        operator delete(a13);
      }
      __cxa_end_catch();
LABEL_13:
      JUMPOUT(0x19E2D2CC4);
    }
    if (a2 != 1)
    {
      if (__p) {
        operator delete(__p);
      }
      _Unwind_Resume(a1);
    }
  }
  unsigned int v18 = __cxa_begin_catch(a1);
  (*(void (**)(void *))(*(void *)v18 + 16))(v18);
  __cxa_end_catch();
  goto LABEL_13;
}

double sub_19E2D302C(uint64_t **a1, uint64_t *a2, int **a3)
{
  unsigned int v6 = *a1;
  int v5 = a1[1];
  unint64_t v7 = (char *)v5 - (char *)*a1;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  long long v40 = 0;
  int v43 = 0;
  double v33 = 0.0;
  __p = 0;
  unint64_t v35 = 0;
  if (!(v7 >> 3))
  {
    int v8 = 0;
    long long v40 = 0;
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    int v43 = v7 >> 3;
    if (v6 == v5) {
      goto LABEL_13;
    }
    goto LABEL_6;
  }
  if (((v7 >> 3) & 0x80000000) != 0) {
    sub_19E13D694();
  }
  int v8 = operator new((uint64_t)(v7 << 29) >> 29);
  bzero(v8, (uint64_t)(v7 << 29) >> 29);
  long long v40 = v8;
  uint64_t v41 = (char *)v8 + ((uint64_t)(v7 << 29) >> 29);
  uint64_t v42 = (char *)v8 + 8 * (int)((uint64_t)v7 >> 3);
  int v43 = v7 >> 3;
  if (v6 != v5)
  {
LABEL_6:
    uint64_t v9 = 0;
    if (v7 - 8 < 0x18) {
      goto LABEL_11;
    }
    if ((unint64_t)((char *)v8 - (char *)v6) < 0x20) {
      goto LABEL_11;
    }
    unint64_t v10 = ((v7 - 8) >> 3) + 1;
    uint64_t v9 = v10 & 0x3FFFFFFFFFFFFFFCLL;
    unint64_t v11 = v8 + 1;
    long long v12 = (long long *)(v6 + 2);
    uint64_t v13 = v10 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v14 = *v12;
      *(v11 - 1) = *(v12 - 1);
      *unint64_t v11 = v14;
      v11 += 2;
      v12 += 2;
      v13 -= 4;
    }
    while (v13);
    v6 += v10 & 0x3FFFFFFFFFFFFFFCLL;
    if (v10 != v9)
    {
LABEL_11:
      uint64_t v15 = (void *)v8 + v9;
      do
      {
        uint64_t v16 = *v6++;
        *v15++ = v16;
      }
      while (v6 != v5);
    }
  }
LABEL_13:
  if (*a2 == a2[1])
  {
    sub_19E2D3324(a3, (uint64_t)&v40, 0, (uint64_t)&v33);
    double v17 = v33;
    if (v36)
    {
      uint64_t v31 = __p;
      if (__p)
      {
        unint64_t v35 = __p;
        goto LABEL_31;
      }
    }
  }
  else
  {
    LOBYTE(v37[0]) = 0;
    char v39 = 0;
    sub_19E2D3324(a3, (uint64_t)&v40, 1, (uint64_t)&v33);
    double v17 = v33;
    sub_19E2A7CB8((uint64_t)v37, (uint64_t)&__p);
    if (v36 && __p)
    {
      unint64_t v35 = __p;
      operator delete(__p);
    }
    uint64_t v18 = v38;
    if (v38)
    {
      unint64_t v19 = 0;
      uint64_t v20 = v37[0];
      uint64_t v21 = *a2;
      if (v38 < 4) {
        goto LABEL_23;
      }
      if ((unint64_t)(v21 - v37[0]) < 0x20) {
        goto LABEL_23;
      }
      unint64_t v19 = v38 & 0xFFFFFFFFFFFFFFFCLL;
      int64_t v22 = (long long *)(v37[0] + 16);
      int v23 = (_OWORD *)(v21 + 16);
      unint64_t v24 = v19;
      do
      {
        long long v25 = *v22;
        *(v23 - 1) = *(v22 - 1);
        _OWORD *v23 = v25;
        v22 += 2;
        v23 += 2;
        v24 -= 4;
      }
      while (v24);
      if (v19 != v18)
      {
LABEL_23:
        uint64_t v26 = v18 - v19;
        uint64_t v27 = 8 * v19;
        int v28 = (void *)(v21 + 8 * v19);
        int32x2_t v29 = (uint64_t *)(v20 + v27);
        do
        {
          uint64_t v30 = *v29++;
          *v28++ = v30;
          --v26;
        }
        while (v26);
      }
    }
    if (v39)
    {
      uint64_t v31 = (void *)v37[0];
      if (v37[0])
      {
        v37[1] = v37[0];
LABEL_31:
        operator delete(v31);
      }
    }
  }
  if (v40)
  {
    uint64_t v41 = (char *)v40;
    operator delete(v40);
  }
  return v17;
}

void sub_19E2D32AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,void *__p,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2D3308(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E13A9BC(a1);
}

void *sub_19E2D3324@<X0>(int **a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  sub_19E2D44C8((uint64_t)&v31, *a1);
  if (v35 != (void *)a2) {
    sub_19E1E5B9C(v35, *(char **)a2, *(char **)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  }
  int v36 = *(_DWORD *)(a2 + 24);
  unint64_t v7 = *(char **)a2;
  long double v33 = exp(*(double *)v7 + *(double *)v7);
  unint64_t v8 = v32;
  if (v32)
  {
    uint64_t v9 = v34;
    if (v32 < 4 || (unint64_t)(v34 - v7 - 8) < 0x10)
    {
      unint64_t v10 = 0;
LABEL_7:
      unint64_t v11 = (double *)&v7[8 * v10 + 8];
      long long v12 = (long double *)&v9[8 * v10];
      unint64_t v13 = v8 - v10;
      do
      {
        long double v14 = *v11++;
        *v12++ = exp(v14);
        --v13;
      }
      while (v13);
      goto LABEL_9;
    }
    unint64_t v10 = v32 & 0xFFFFFFFFFFFFFFFELL;
    int64_t v22 = (long long *)(v7 + 8);
    unint64_t v23 = v32 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v34;
    do
    {
      long long v25 = *v22++;
      long double v27 = exp(*((long double *)&v25 + 1));
      *(double *)&long long v26 = exp(*(long double *)&v25);
      *((long double *)&v26 + 1) = v27;
      *(_OWORD *)unint64_t v24 = v26;
      v24 += 16;
      v23 -= 2;
    }
    while (v23);
    if (v8 != v10) {
      goto LABEL_7;
    }
  }
LABEL_9:
  sub_19E2D1600((uint64_t)&v31, 0, a3);
  double v15 = sub_19E2D35A0((uint64_t)&v31);
  double v16 = v15;
  if (a3)
  {
    sub_19E2D37D0((uint64_t)&v31, (uint64_t)&v28);
    *(void *)(a4 + 8) = 0;
    *(double *)a4 = v16;
    *(void *)(a4 + 16) = 0;
    *(void *)(a4 + 24) = 0;
    double v17 = v28;
    int64_t v18 = v29 - v28;
    if (v29 != v28)
    {
      if (v18 < 0) {
        sub_19E13D694();
      }
      unint64_t v19 = (char *)operator new(v29 - v28);
      *(void *)(a4 + 8) = v19;
      uint64_t v20 = &v19[8 * (v18 >> 3)];
      *(void *)(a4 + 24) = v20;
      memcpy(v19, v17, v18);
      *(void *)(a4 + 16) = v20;
    }
    *(_DWORD *)(a4 + 32) = v30;
    *(unsigned char *)(a4 + 40) = 1;
    if (v17)
    {
      int32x2_t v29 = v17;
      operator delete(v17);
    }
  }
  else
  {
    *(double *)a4 = v15;
    *(unsigned char *)(a4 + 8) = 0;
    *(unsigned char *)(a4 + 40) = 0;
  }
  return sub_19E2BEE60(&v31);
}

void sub_19E2D3518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_19E2BEE60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19E2D352C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v21 = *v19;
  if (*v19)
  {
    *(void *)(v18 + 16) = v21;
    operator delete(v21);
    int64_t v22 = __p;
    if (!__p)
    {
LABEL_3:
      sub_19E2BEE60(&a18);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    int64_t v22 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  operator delete(v22);
  sub_19E2BEE60(&a18);
  _Unwind_Resume(a1);
}

void sub_19E2D3578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_19E2BEE60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19E2D358C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_19E2BEE60((uint64_t *)va);
  _Unwind_Resume(a1);
}

double sub_19E2D35A0(uint64_t a1)
{
  sub_19E2D22D0(a1, (uint64_t)&__A);
  __C[0] = 0;
  vDSP_dotprD(__A, 1, *(const double **)(a1 + 256), 1, (double *)__C, (int)__N);
  uint64_t v2 = __C[0];
  if (__A)
  {
    double v17 = __A;
    operator delete(__A);
  }
  uint64_t v3 = *(int *)(a1 + 220);
  if ((int)v3 >= *(_DWORD *)(a1 + 216)) {
    int v4 = *(_DWORD *)(a1 + 216);
  }
  else {
    int v4 = *(_DWORD *)(a1 + 220);
  }
  __A = 0;
  double v17 = 0;
  uint64_t v18 = 0;
  if (v4)
  {
    if (v4 < 0) {
      sub_19E13D694();
    }
    int v5 = operator new(8 * v4);
    bzero(v5, 8 * v4);
    uint64_t v6 = 0;
    unint64_t v7 = *(void **)(a1 + 192);
    do
    {
      *((void *)v5 + v6++) = *v7;
      v7 += v3 + 1;
    }
    while (v4 != v6);
    __p = operator new(8 * v4);
    unint64_t v11 = (char *)__p + 8 * v4;
    long long v12 = v11;
    int v13 = v4;
    memcpy(__p, v5, 8 * v4);
  }
  else
  {
    int v5 = 0;
    unint64_t v11 = 0;
    long long v12 = 0;
    __p = 0;
    int v13 = 0;
  }
  sub_19E2A7AC4((uint64_t)&__p, (uint64_t)__C);
  __A = 0;
  vDSP_sveD((const double *)__C[0], 1, (double *)&__A, (int)v15);
  unint64_t v8 = __A;
  if (__C[0])
  {
    __C[1] = __C[0];
    operator delete(__C[0]);
  }
  if (__p)
  {
    unint64_t v11 = (char *)__p;
    operator delete(__p);
  }
  if (v5) {
    operator delete(v5);
  }
  return (double)*(int *)(a1 + 120) * -0.918938533 - (*(double *)&v8 - *(double *)&v2 * -0.5);
}

void sub_19E2D3748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v20 = a9;
    if (!a9)
    {
LABEL_3:
      if (!v18) {
LABEL_8:
      }
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(v18);
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v20 = a9;
    if (!a9) {
      goto LABEL_3;
    }
  }
  operator delete(v20);
  if (!v18) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void sub_19E2D37B4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E13A9BC(a1);
}

void sub_19E2D37D0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  CFTypeRef v121 = 0;
  uint64_t v122 = 0;
  int v123 = 0;
  uint64_t v3 = *(unsigned char **)(a1 + 224);
  uint64_t v2 = *(unsigned char **)(a1 + 232);
  int64_t v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0) {
      sub_19E13D694();
    }
    int v5 = (double *)operator new(v2 - v3);
    uint64_t v6 = &v5[v4 >> 3];
    CFTypeRef v121 = v5;
    int v123 = v6;
    memcpy(v5, v3, v4);
    uint64_t v122 = v6;
  }
  unint64_t v7 = *(unsigned char **)(a1 + 256);
  unint64_t v124 = *(void *)(a1 + 248);
  unint64_t v106 = 0;
  long long v107 = 0;
  uint64_t v105 = 0;
  unint64_t v8 = *(unsigned char **)(a1 + 264);
  int64_t v9 = v8 - v7;
  if (v8 != v7)
  {
    if (v9 < 0) {
      sub_19E13D694();
    }
    unint64_t v10 = (char *)operator new(v8 - v7);
    unint64_t v11 = &v10[8 * (v9 >> 3)];
    uint64_t v105 = v10;
    long long v107 = v11;
    memcpy(v10, v7, v9);
    unint64_t v106 = v11;
  }
  int v108 = *(_DWORD *)(a1 + 280);
  sub_19E29FAE8(a1 + 256, (uint64_t)&v101);
  sub_19E2A7BA8((uint64_t)&v105, (uint64_t)&v101, (uint64_t)&__p);
  unint64_t v113 = 0;
  char v114 = 0;
  uint64_t v115 = 0;
  long long v12 = __p;
  int64_t v13 = v110 - (unsigned char *)__p;
  if (v110 == __p)
  {
    vDSP_Length v15 = 0;
    long double v14 = 0;
  }
  else
  {
    if (v13 < 0) {
      sub_19E13D694();
    }
    long double v14 = (char *)operator new(v110 - (unsigned char *)__p);
    vDSP_Length v15 = &v14[8 * (v13 >> 3)];
    unint64_t v113 = v14;
    uint64_t v115 = v15;
    memcpy(v14, v12, v13);
    char v114 = v15;
  }
  unint64_t v16 = v112;
  unint64_t v116 = v112;
  unint64_t v17 = HIDWORD(v112);
  vDSP_Length v18 = HIDWORD(v112) * (int)v112;
  vDSP_vsubD(v121, 1, (const double *)v14, 1, (double *)v14, 1, v18);
  uint64_t v117 = 0;
  int v118 = 0;
  long long v119 = 0;
  int64_t v19 = v15 - v14;
  if (!v19)
  {
    uint64_t v20 = 0;
    unint64_t v120 = v16;
    int64_t v126 = 0;
    unint64_t v127 = 0;
    uint64_t v125 = 0;
    if (v18) {
      goto LABEL_14;
    }
LABEL_18:
    int64_t v22 = 0;
    uint64_t v21 = 0;
    unint64_t v128 = __PAIR64__(v17, v16);
    goto LABEL_23;
  }
  if (v19 < 0) {
    sub_19E13D694();
  }
  uint64_t v20 = (char *)operator new(v19);
  uint64_t v117 = v20;
  long long v119 = &v20[8 * (v19 >> 3)];
  memcpy(v20, v14, v19);
  int v118 = &v20[8 * (v19 >> 3)];
  unint64_t v120 = v16;
  int64_t v126 = 0;
  unint64_t v127 = 0;
  uint64_t v125 = 0;
  if (!v18) {
    goto LABEL_18;
  }
LABEL_14:
  if ((v18 & 0x80000000) != 0) {
    sub_19E13D694();
  }
  uint64_t v21 = (char *)operator new(8 * v18);
  uint64_t v125 = v21;
  unint64_t v127 = &v21[8 * v18];
  bzero(v21, 8 * v18);
  int64_t v22 = &v21[8 * v18];
  unint64_t v128 = __PAIR64__(v17, v16);
  if (v18 < 4)
  {
    for (unint64_t i = 0; i != v18; ++i)
LABEL_22:
      *(void *)&v21[8 * i] = *(void *)&v20[8 * i];
    goto LABEL_23;
  }
  uint64_t v24 = 0;
  unint64_t i = v18 & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v25 = v18 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    long long v26 = *(_OWORD *)&v20[v24 + 16];
    long double v27 = &v21[v24];
    *(_OWORD *)long double v27 = *(_OWORD *)&v20[v24];
    *((_OWORD *)v27 + 1) = v26;
    v24 += 32;
    v25 -= 4;
  }
  while (v25);
  if (i != v18) {
    goto LABEL_22;
  }
LABEL_23:
  sub_19E1E5B9C(&v121, v21, v22, (v22 - v21) >> 3);
  unint64_t v124 = v128;
  if (v21)
  {
    int64_t v126 = v21;
    operator delete(v21);
  }
  if (v20)
  {
    int v118 = v20;
    operator delete(v20);
  }
  if (v14)
  {
    char v114 = v14;
    operator delete(v14);
  }
  if (__p)
  {
    unsigned int v110 = __p;
    operator delete(__p);
  }
  if (v101)
  {
    unint64_t v102 = (char *)v101;
    operator delete(v101);
  }
  if (v105)
  {
    unint64_t v106 = v105;
    operator delete(v105);
  }
  int v28 = *(_DWORD *)(a1 + 8);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  vDSP_Length v98 = v28 + 1;
  if (v28 == -1)
  {
    *(_DWORD *)(a2 + 24) = 0;
    uint64_t v96 = *(int *)(a1 + 120);
    if (!v96) {
      goto LABEL_125;
    }
    goto LABEL_40;
  }
  if (v28 <= -2) {
    sub_19E13D694();
  }
  int32x2_t v29 = (char *)operator new(8 * v98);
  *(void *)a2 = v29;
  *(void *)(a2 + 8) = &v29[8 * v98];
  *(void *)(a2 + 16) = &v29[8 * v28 + 8];
  *(_DWORD *)(a2 + 24) = v28 + 1;
  bzero(v29, 8 * v98);
  uint64_t v96 = *(int *)(a1 + 120);
  if (v96)
  {
LABEL_40:
    uint64_t v97 = 0;
    for (unint64_t j = 0; j != v96; ++j)
    {
      uint64_t v31 = 0;
      unint64_t v32 = 0;
      do
      {
        uint64_t v33 = *(void *)(a1 + 96);
        uint64_t v34 = *(unsigned int *)(a1 + 124);
        uint64_t v125 = 0;
        int64_t v126 = 0;
        unint64_t v127 = 0;
        if (!v34)
        {
          unint64_t v35 = 0;
          unsigned int v110 = 0;
          char v111 = 0;
          __p = 0;
          LODWORD(v112) = 0;
LABEL_72:
          uint64_t v52 = 0;
          unint64_t v102 = 0;
          uint64_t v103 = 0;
          uint64_t v101 = 0;
          int v104 = 0;
          goto LABEL_76;
        }
        if ((v34 & 0x80000000) != 0) {
          sub_19E13D694();
        }
        unint64_t v35 = operator new(8 * (int)v34);
        bzero(v35, 8 * (int)v34);
        if (v34 < 8 || (unint64_t)v35 - v33 - 8 * j * (int)v34 < 0x20)
        {
          unint64_t v36 = 0;
LABEL_49:
          unint64_t v37 = (int)v34 - v36;
          uint64_t v38 = 8 * v36;
          char v39 = (void *)v35 + v36;
          long long v40 = (uint64_t *)(v33 + v38 + v97 * (int)v34);
          do
          {
            uint64_t v41 = *v40++;
            *v39++ = v41;
            --v37;
          }
          while (v37);
          goto LABEL_51;
        }
        unint64_t v36 = (int)v34 & 0xFFFFFFFFFFFFFFFCLL;
        uint64_t v88 = (long long *)(v33 + v97 * (int)v34 + 16);
        size_t v89 = v35 + 1;
        unint64_t v90 = v36;
        do
        {
          long long v91 = *v88;
          *(v89 - 1) = *(v88 - 1);
          *size_t v89 = v91;
          v88 += 2;
          v89 += 2;
          v90 -= 4;
        }
        while (v90);
        if (v36 != (int)v34) {
          goto LABEL_49;
        }
LABEL_51:
        __p = 0;
        unsigned int v110 = 0;
        char v111 = 0;
        LODWORD(v112) = v34;
        uint64_t v42 = operator new(8 * (int)v34);
        bzero(v42, 8 * (int)v34);
        __p = v42;
        unsigned int v110 = (char *)v42 + 8 * (int)v34;
        char v111 = v110;
        if ((v34 - 6) >= 0x7FFFFFFB)
        {
          uint64_t v43 = 0;
LABEL_58:
          uint64_t v48 = v34 - v43;
          uint64_t v49 = v43 << 32;
          do
          {
            *(void *)((char *)v42 + (v49 >> 29)) = *(void *)((char *)v35 + (v49 >> 29));
            v49 += 0x100000000;
            --v48;
          }
          while (v48);
          goto LABEL_60;
        }
        uint64_t v43 = v34 & 0xFFFFFFFC;
        float64x2_t v44 = v42 + 1;
        uint64_t v45 = v35 + 1;
        uint64_t v46 = v43;
        do
        {
          long long v47 = *v45;
          *(v44 - 1) = *(v45 - 1);
          _OWORD *v44 = v47;
          v44 += 2;
          v45 += 2;
          v46 -= 4;
        }
        while (v46);
        if (v43 != v34) {
          goto LABEL_58;
        }
LABEL_60:
        uint64_t v50 = *(void *)(a1 + 96);
        uint64_t v51 = *(unsigned int *)(a1 + 124);
        uint64_t v125 = 0;
        int64_t v126 = 0;
        unint64_t v127 = 0;
        if (!v51) {
          goto LABEL_72;
        }
        if ((v51 & 0x80000000) != 0) {
          sub_19E13D694();
        }
        uint64_t v52 = operator new(8 * (int)v51);
        bzero(v52, 8 * (int)v51);
        if (v51 < 8 || (unint64_t)v52 - v50 - 8 * v32 * (int)v51 < 0x20)
        {
          unint64_t v53 = 0;
LABEL_65:
          unint64_t v54 = (int)v51 - v53;
          uint64_t v55 = 8 * v53;
          signed int v56 = (void *)v52 + v53;
          double v57 = (uint64_t *)(v50 + v55 + v31 * (int)v51);
          do
          {
            uint64_t v58 = *v57++;
            *v56++ = v58;
            --v54;
          }
          while (v54);
          goto LABEL_67;
        }
        unint64_t v53 = (int)v51 & 0xFFFFFFFFFFFFFFFCLL;
        v92 = (long long *)(v50 + v31 * (int)v51 + 16);
        unint64_t v93 = v52 + 1;
        unint64_t v94 = v53;
        do
        {
          long long v95 = *v92;
          *(v93 - 1) = *(v92 - 1);
          _OWORD *v93 = v95;
          v92 += 2;
          v93 += 2;
          v94 -= 4;
        }
        while (v94);
        if (v53 != (int)v51) {
          goto LABEL_65;
        }
LABEL_67:
        uint64_t v101 = 0;
        unint64_t v102 = 0;
        uint64_t v103 = 0;
        int v104 = v51;
        unint64_t v59 = (char *)operator new(8 * (int)v51);
        bzero(v59, 8 * (int)v51);
        uint64_t v101 = v59;
        unint64_t v102 = &v59[8 * (int)v51];
        uint64_t v103 = v102;
        if ((v51 - 6) >= 0x7FFFFFFB)
        {
          uint64_t v61 = 0;
LABEL_74:
          uint64_t v64 = v51 - v61;
          uint64_t v65 = v61 << 32;
          do
          {
            *(void *)&v59[v65 >> 29] = *(void *)((char *)v52 + (v65 >> 29));
            v65 += 0x100000000;
            --v64;
          }
          while (v64);
          goto LABEL_76;
        }
        unint64_t v60 = 0;
        uint64_t v61 = v51 & 0xFFFFFFFC;
        do
        {
          long long v62 = v52[v60 / 0x10 + 1];
          signed int v63 = &v59[v60];
          *(_OWORD *)signed int v63 = v52[v60 / 0x10];
          *((_OWORD *)v63 + 1) = v62;
          v60 += 32;
        }
        while (((8 * v51) & 0x7FFFFFFE0) != v60);
        if (v61 != v51) {
          goto LABEL_74;
        }
LABEL_76:
        sub_19E2D4A00(a1 + 8, (uint64_t)&__p, (const double **)&v101, (uint64_t)&v117);
        if (v101)
        {
          unint64_t v102 = (char *)v101;
          operator delete(v101);
        }
        if (v52) {
          operator delete(v52);
        }
        if (__p)
        {
          unsigned int v110 = __p;
          operator delete(__p);
        }
        if (v35) {
          operator delete(v35);
        }
        if (j == v32)
        {
          uint64_t v66 = SHIDWORD(v124);
          unint64_t v67 = v121;
          unint64_t v68 = v117;
          int64_t v69 = v118 - v117;
          if (v118 == v117)
          {
            uint64_t v71 = 0;
            unint64_t v70 = 0;
          }
          else
          {
            if (v69 < 0) {
              sub_19E13D694();
            }
            unint64_t v70 = (char *)operator new(v118 - v117);
            uint64_t v71 = &v70[8 * (v69 >> 3)];
            memcpy(v70, v68, v69);
          }
          uint64_t v77 = &v67[j + j * v66];
          int v78 = v120;
          vDSP_vsmulD((const double *)v70, 1, v77, (double *)v70, 1, (int)v120);
          int64_t v79 = v71 - v70;
          if (v79)
          {
            if (v79 < 0) {
              sub_19E13D694();
            }
            uint64_t v80 = (char *)operator new(v79);
            uint64_t v81 = &v80[8 * (v79 >> 3)];
            memcpy(v80, v70, v79);
          }
          else
          {
            uint64_t v81 = 0;
            uint64_t v80 = 0;
          }
          __p = (void *)0x3FE0000000000000;
          vDSP_vsmulD((const double *)v80, 1, (const double *)&__p, (double *)v80, 1, v78);
          uint64_t v125 = 0;
          int64_t v126 = 0;
          unint64_t v127 = 0;
          int64_t v86 = v81 - v80;
          if (v81 == v80)
          {
            unint64_t v87 = 0;
          }
          else
          {
            if (v86 < 0) {
              sub_19E13D694();
            }
            unint64_t v87 = (char *)operator new(v81 - v80);
            uint64_t v125 = v87;
            unint64_t v127 = &v87[8 * (v86 >> 3)];
            memcpy(v87, v80, v86);
            int64_t v126 = &v87[8 * (v86 >> 3)];
          }
          LODWORD(v128) = v78;
          vDSP_vaddD(*(const double **)a2, 1, (const double *)v87, 1, *(double **)a2, 1, v98);
          if (v87) {
            operator delete(v87);
          }
          if (v80) {
            operator delete(v80);
          }
          if (v70) {
            goto LABEL_114;
          }
        }
        else
        {
          uint64_t v72 = SHIDWORD(v124);
          uint64_t v73 = v121;
          uint64_t v74 = v117;
          int64_t v75 = v118 - v117;
          if (v118 == v117)
          {
            unint64_t v76 = 0;
            unint64_t v70 = 0;
          }
          else
          {
            if (v75 < 0) {
              sub_19E13D694();
            }
            unint64_t v70 = (char *)operator new(v118 - v117);
            unint64_t v76 = &v70[8 * (v75 >> 3)];
            memcpy(v70, v74, v75);
          }
          uint64_t v82 = &v73[v32 + j * v72];
          int v83 = v120;
          vDSP_vsmulD((const double *)v70, 1, v82, (double *)v70, 1, (int)v120);
          uint64_t v125 = 0;
          int64_t v126 = 0;
          unint64_t v127 = 0;
          uint64_t v84 = v76 - v70;
          if (v76 == v70)
          {
            unint64_t v85 = 0;
          }
          else
          {
            if (v84 < 0) {
              sub_19E13D694();
            }
            unint64_t v85 = (char *)operator new(v76 - v70);
            uint64_t v125 = v85;
            unint64_t v127 = &v85[8 * (v84 >> 3)];
            memcpy(v85, v70, v76 - v70);
            int64_t v126 = &v85[8 * (v84 >> 3)];
          }
          LODWORD(v128) = v83;
          vDSP_vaddD(*(const double **)a2, 1, (const double *)v85, 1, *(double **)a2, 1, v98);
          if (v85) {
            operator delete(v85);
          }
          if (v70) {
LABEL_114:
          }
            operator delete(v70);
        }
        if (v117)
        {
          int v118 = v117;
          operator delete(v117);
        }
        ++v32;
        v31 += 8;
      }
      while (v32 <= j);
      v97 += 8;
    }
  }
LABEL_125:
  if (v121)
  {
    uint64_t v122 = v121;
    operator delete(v121);
  }
}

void sub_19E2D4220(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  vDSP_Length v15 = *(void **)a14;
  if (*(void *)a14)
  {
    *(void *)(a14 + 8) = v15;
    operator delete(v15);
  }
  sub_19E13A9BC(a1);
}

void sub_19E2D4244(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37)
{
  if (v39) {
    operator delete(v39);
  }
  if (v38)
  {
    *(void *)(v40 - 176) = v38;
    operator delete(v38);
  }
  if (v37)
  {
    *(void *)(v40 - 208) = v37;
    operator delete(v37);
  }
  if (__p)
  {
    operator delete(__p);
    uint64_t v42 = a28;
    if (!a28)
    {
LABEL_9:
      uint64_t v43 = a32;
      if (!a32)
      {
LABEL_14:
        float64x2_t v44 = *(void **)(v40 - 152);
        if (v44)
        {
          *(void *)(v40 - 144) = v44;
          operator delete(v44);
        }
        _Unwind_Resume(exception_object);
      }
LABEL_13:
      operator delete(v43);
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v42 = a28;
    if (!a28) {
      goto LABEL_9;
    }
  }
  operator delete(v42);
  uint64_t v43 = a32;
  if (!a32) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_19E2D4478(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37)
{
  if (__p)
  {
    operator delete(__p);
    if (!v38)
    {
LABEL_3:
      char v39 = a36;
      if (!a36) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if (!v38)
  {
    goto LABEL_3;
  }
  operator delete(v38);
  char v39 = a36;
  if (!a36)
  {
LABEL_4:
    if (v37) {
      goto LABEL_12;
    }
    goto LABEL_13;
  }
LABEL_8:
  operator delete(v39);
  if (v37) {
LABEL_12:
  }
    JUMPOUT(0x19E2D4424);
LABEL_13:
  JUMPOUT(0x19E2D4428);
}

uint64_t sub_19E2D44C8(uint64_t a1, int *a2)
{
  int v4 = *a2;
  *(unsigned char *)(a1 + 4) = *((unsigned char *)a2 + 4);
  *(_DWORD *)a1 = v4;
  sub_19E2D48D4(a1 + 8, (uint64_t)(a2 + 2));
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t v6 = (unsigned char *)*((void *)a2 + 12);
  int v5 = (unsigned char *)*((void *)a2 + 13);
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      sub_19E13D694();
    }
    unint64_t v8 = (char *)operator new(v5 - v6);
    *(void *)(a1 + 96) = v8;
    *(void *)(a1 + 104) = v8;
    int64_t v9 = &v8[8 * (v7 >> 3)];
    *(void *)(a1 + 112) = v9;
    memcpy(v8, v6, v7);
    *(void *)(a1 + 104) = v9;
  }
  uint64_t v10 = *((void *)a2 + 15);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 120) = v10;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  long long v12 = (unsigned char *)*((void *)a2 + 16);
  unint64_t v11 = (unsigned char *)*((void *)a2 + 17);
  int64_t v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0) {
      sub_19E13D694();
    }
    long double v14 = (char *)operator new(v11 - v12);
    *(void *)(a1 + 128) = v14;
    *(void *)(a1 + 136) = v14;
    vDSP_Length v15 = &v14[8 * (v13 >> 3)];
    *(void *)(a1 + 144) = v15;
    memcpy(v14, v12, v13);
    *(void *)(a1 + 136) = v15;
  }
  int v16 = a2[38];
  *(void *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 152) = v16;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  vDSP_Length v18 = (unsigned char *)*((void *)a2 + 20);
  unint64_t v17 = (unsigned char *)*((void *)a2 + 21);
  int64_t v19 = v17 - v18;
  if (v17 != v18)
  {
    if (v19 < 0) {
      sub_19E13D694();
    }
    uint64_t v20 = (char *)operator new(v17 - v18);
    *(void *)(a1 + 160) = v20;
    *(void *)(a1 + 168) = v20;
    uint64_t v21 = &v20[8 * (v19 >> 3)];
    *(void *)(a1 + 176) = v21;
    memcpy(v20, v18, v19);
    *(void *)(a1 + 168) = v21;
  }
  uint64_t v22 = *((void *)a2 + 23);
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 184) = v22;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  uint64_t v24 = (unsigned char *)*((void *)a2 + 24);
  unint64_t v23 = (unsigned char *)*((void *)a2 + 25);
  int64_t v25 = v23 - v24;
  if (v23 != v24)
  {
    if (v25 < 0) {
      sub_19E13D694();
    }
    long long v26 = (char *)operator new(v23 - v24);
    *(void *)(a1 + 192) = v26;
    *(void *)(a1 + 200) = v26;
    long double v27 = &v26[8 * (v25 >> 3)];
    *(void *)(a1 + 208) = v27;
    memcpy(v26, v24, v25);
    *(void *)(a1 + 200) = v27;
  }
  uint64_t v28 = *((void *)a2 + 27);
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 216) = v28;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  int v30 = (unsigned char *)*((void *)a2 + 28);
  int32x2_t v29 = (unsigned char *)*((void *)a2 + 29);
  int64_t v31 = v29 - v30;
  if (v29 != v30)
  {
    if (v31 < 0) {
      sub_19E13D694();
    }
    unint64_t v32 = (char *)operator new(v29 - v30);
    *(void *)(a1 + 224) = v32;
    *(void *)(a1 + 232) = v32;
    uint64_t v33 = &v32[8 * (v31 >> 3)];
    *(void *)(a1 + 240) = v33;
    memcpy(v32, v30, v31);
    *(void *)(a1 + 232) = v33;
  }
  *(void *)(a1 + 248) = *((void *)a2 + 31);
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  unint64_t v35 = (unsigned char *)*((void *)a2 + 32);
  uint64_t v34 = (unsigned char *)*((void *)a2 + 33);
  int64_t v36 = v34 - v35;
  if (v34 != v35)
  {
    if (v36 < 0) {
      sub_19E13D694();
    }
    uint64_t v37 = (char *)operator new(v34 - v35);
    *(void *)(a1 + 256) = v37;
    *(void *)(a1 + 264) = v37;
    uint64_t v38 = &v37[8 * (v36 >> 3)];
    *(void *)(a1 + 272) = v38;
    memcpy(v37, v35, v36);
    *(void *)(a1 + 264) = v38;
  }
  *(_DWORD *)(a1 + 280) = a2[70];
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 288) = 0;
  uint64_t v40 = (unsigned char *)*((void *)a2 + 36);
  char v39 = (unsigned char *)*((void *)a2 + 37);
  int64_t v41 = v39 - v40;
  if (v39 != v40)
  {
    if (v41 < 0) {
      sub_19E13D694();
    }
    uint64_t v42 = (char *)operator new(v39 - v40);
    *(void *)(a1 + 288) = v42;
    *(void *)(a1 + 296) = v42;
    uint64_t v43 = &v42[8 * (v41 >> 3)];
    *(void *)(a1 + 304) = v43;
    memcpy(v42, v40, v41);
    *(void *)(a1 + 296) = v43;
  }
  *(_DWORD *)(a1 + 312) = a2[78];
  return a1;
}

void sub_19E2D47A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void *a10)
{
  vDSP_Length v18 = *v16;
  if (*v16)
  {
    v10[37] = v18;
    operator delete(v18);
    int64_t v19 = *a9;
    if (!*a9)
    {
LABEL_3:
      uint64_t v20 = *v15;
      if (!*v15) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else
  {
    int64_t v19 = *a9;
    if (!*a9) {
      goto LABEL_3;
    }
  }
  v10[33] = v19;
  operator delete(v19);
  uint64_t v20 = *v15;
  if (!*v15)
  {
LABEL_4:
    uint64_t v21 = *v14;
    if (!*v14) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  v10[29] = v20;
  operator delete(v20);
  uint64_t v21 = *v14;
  if (!*v14)
  {
LABEL_5:
    uint64_t v22 = *v13;
    if (!*v13) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  v10[25] = v21;
  operator delete(v21);
  uint64_t v22 = *v13;
  if (!*v13)
  {
LABEL_6:
    unint64_t v23 = *v12;
    if (!*v12) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }
LABEL_13:
  v10[21] = v22;
  operator delete(v22);
  unint64_t v23 = *v12;
  if (!*v12)
  {
LABEL_7:
    uint64_t v24 = *v11;
    if (!*v11) {
      goto LABEL_8;
    }
    goto LABEL_15;
  }
LABEL_14:
  v10[17] = v23;
  operator delete(v23);
  uint64_t v24 = *v11;
  if (!*v11)
  {
LABEL_8:
    sub_19E2BADC4(a10);
    _Unwind_Resume(a1);
  }
LABEL_15:
  v10[13] = v24;
  operator delete(v24);
  sub_19E2BADC4(a10);
  _Unwind_Resume(a1);
}

uint64_t sub_19E2D48D4(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(unsigned char **)(a2 + 24);
  int v5 = *(unsigned char **)(a2 + 32);
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      sub_19E13D694();
    }
    unint64_t v8 = (char *)operator new(v5 - v6);
    *(void *)(a1 + 24) = v8;
    *(void *)(a1 + 32) = v8;
    int64_t v9 = &v8[8 * (v7 >> 3)];
    *(void *)(a1 + 40) = v9;
    memcpy(v8, v6, v7);
    *(void *)(a1 + 32) = v9;
  }
  int v10 = *(_DWORD *)(a2 + 48);
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 48) = v10;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  long long v12 = *(unsigned char **)(a2 + 56);
  unint64_t v11 = *(unsigned char **)(a2 + 64);
  int64_t v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0) {
      sub_19E13D694();
    }
    long double v14 = (char *)operator new(v11 - v12);
    *(void *)(a1 + 56) = v14;
    *(void *)(a1 + 64) = v14;
    vDSP_Length v15 = &v14[8 * (v13 >> 3)];
    *(void *)(a1 + 72) = v15;
    memcpy(v14, v12, v13);
    *(void *)(a1 + 64) = v15;
  }
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  return a1;
}

void sub_19E2D49CC(_Unwind_Exception *exception_object)
{
  int v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 64) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2D4A00(uint64_t a1@<X0>, uint64_t a2@<X1>, const double **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = 0;
  int64_t v9 = 0;
  int v10 = 0;
  int v11 = *(_DWORD *)a1;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = 0;
  *(_DWORD *)(a4 + 24) = 0;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  unint64_t v53 = 0;
  int v12 = v11 + 1;
  if (v11 != -1)
  {
    if (v11 <= -2) {
      sub_19E13D694();
    }
    int v10 = (double *)operator new(8 * v12);
    uint64_t v8 = (uint64_t)&v10[v11 + 1];
    bzero(v10, 8 * v12);
    int64_t v9 = &v10[v12];
  }
  *(void *)a4 = v10;
  *(void *)(a4 + 8) = v9;
  *(void *)(a4 + 16) = v8;
  *(_DWORD *)(a4 + 24) = v12;
  long double v14 = *(const void **)a2;
  uint64_t v13 = *(void *)(a2 + 8);
  int64_t v15 = v13 - *(void *)a2;
  if (v13 == *(void *)a2)
  {
    unint64_t v17 = 0;
    int v16 = 0;
  }
  else
  {
    if (v15 < 0) {
      sub_19E13D694();
    }
    int v16 = (char *)operator new(v13 - *(void *)a2);
    unint64_t v17 = &v16[8 * (v15 >> 3)];
    memcpy(v16, v14, v15);
  }
  int v18 = *(_DWORD *)(a2 + 24);
  vDSP_vsubD(*a3, 1, (const double *)v16, 1, (double *)v16, 1, v18);
  int64_t v19 = v17 - v16;
  if (v17 == v16)
  {
    uint64_t v21 = 0;
    uint64_t v20 = 0;
  }
  else
  {
    if (v19 < 0) {
      sub_19E13D694();
    }
    uint64_t v20 = (char *)operator new(v17 - v16);
    uint64_t v21 = &v20[8 * (v19 >> 3)];
    memcpy(v20, v16, v19);
  }
  vDSP_vdivD(*(const double **)(a1 + 24), 1, (const double *)v20, 1, (double *)v20, 1, v18);
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  long long v47 = 0;
  uint64_t v22 = v21 - v20;
  if (v21 != v20)
  {
    if (v22 < 0) {
      sub_19E13D694();
    }
    unint64_t v23 = (char *)operator new(v21 - v20);
    uint64_t v24 = &v23[8 * (v22 >> 3)];
    uint64_t v45 = v23;
    long long v47 = v24;
    memcpy(v23, v20, v21 - v20);
    uint64_t v46 = v24;
  }
  int v48 = v18;
  sub_19E2C2AC8((uint64_t)&v45, (uint64_t)__p);
  signed int v25 = v50;
  uint64_t v52 = 0;
  unint64_t v53 = 0;
  uint64_t v51 = 0;
  if (v50)
  {
    if (v50 < 0) {
      sub_19E13D694();
    }
    long long v26 = (float64x2_t *)operator new(8 * v50);
    uint64_t v51 = v26;
    unint64_t v53 = (char *)&v26->f64[v25];
    bzero(v26, 8 * v25);
    unint64_t v27 = 0;
    uint64_t v52 = (float64x2_t *)((char *)v26 + 8 * v25);
    LODWORD(__N) = v25;
    uint64_t v28 = __p[0];
    if (v25 < 4) {
      goto LABEL_52;
    }
    if ((unint64_t)((char *)v26 - (char *)__p[0]) < 0x20) {
      goto LABEL_52;
    }
    unint64_t v29 = 0;
    unint64_t v27 = v25 & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v30 = v27;
    do
    {
      long long v31 = *(_OWORD *)&v28[v29 / 8 + 2];
      f64 = (_OWORD *)v26[v29 / 0x10].f64;
      _OWORD *f64 = *(_OWORD *)&v28[v29 / 8];
      f64[1] = v31;
      v29 += 32;
      v30 -= 4;
    }
    while (v30);
    if (v27 != v25)
    {
LABEL_52:
      do
      {
        *(void *)&v26->f64[v27] = v28[v27];
        ++v27;
      }
      while (v25 != v27);
    }
  }
  else
  {
    long long v26 = 0;
    LODWORD(__N) = 0;
    uint64_t v28 = __p[0];
    if (!__p[0]) {
      goto LABEL_26;
    }
  }
  __p[1] = v28;
  operator delete(v28);
LABEL_26:
  if (v45)
  {
    uint64_t v46 = v45;
    operator delete(v45);
  }
  if (v20) {
    operator delete(v20);
  }
  if (v16) {
    operator delete(v16);
  }
  double v33 = *(double *)(a1 + 16);
  __p[0] = 0;
  vDSP_sveD(v26->f64, 1, (double *)__p, (int)__N);
  double v34 = exp(*(double *)__p * -0.5) * v33;
  double *v10 = v34 + v34;
  unint64_t v35 = *(void *)a1;
  if (*(void *)a1)
  {
    if (v35 >= 4 && (unint64_t)((char *)v10 - (char *)v26 + 8) >= 0x20)
    {
      unint64_t v36 = v35 & 0xFFFFFFFFFFFFFFFCLL;
      int64_t v41 = (float64x2_t *)(v10 + 3);
      uint64_t v42 = v26 + 1;
      unint64_t v43 = v35 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        float64x2_t v44 = vmulq_n_f64(*v42, v34);
        v41[-1] = vmulq_n_f64(v42[-1], v34);
        *int64_t v41 = v44;
        v41 += 2;
        v42 += 2;
        v43 -= 4;
      }
      while (v43);
      if (v35 == v36) {
        goto LABEL_44;
      }
    }
    else
    {
      unint64_t v36 = 0;
    }
    uint64_t v37 = &v10[v36 + 1];
    uint64_t v38 = &v26->f64[v36];
    unint64_t v39 = v35 - v36;
    do
    {
      double v40 = *v38++;
      *v37++ = v40 * v34;
      --v39;
    }
    while (v39);
LABEL_44:
    uint64_t v52 = v26;
    operator delete(v26);
    return;
  }
  if (v26) {
    goto LABEL_44;
  }
}

void sub_19E2D4E04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  if (v28) {
    operator delete(v28);
  }
  if (v26)
  {
    *(void *)(v27 + 8) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2D4EAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a9) {
    JUMPOUT(0x19E2D4E94);
  }
  JUMPOUT(0x19E2D4E88);
}

BOOL sub_19E2D4EBC(uint64_t a1, int *a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Early stopping already requested.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v3 = *(_DWORD *)(a1 + 12);
  if (v3 == -1) {
    return 0;
  }
  int v6 = *a2;
  uint64_t v5 = (uint64_t)(a2 + 2);
  if (v6 == 1 || *(double *)(a1 + 120) < *((double *)a2 + 13) - *(double *)(a1 + 16))
  {
    sub_19E29AB9C(a1 + 24, v5);
    *(void *)(a1 + 120) = *((void *)a2 + 13);
    *(_DWORD *)(a1 + 128) = 0;
    *(unsigned char *)(a1 + 8) = 0;
    return 0;
  }
  else
  {
    int v8 = *(_DWORD *)(a1 + 128);
    *(_DWORD *)(a1 + 128) = v8 + 1;
    BOOL v9 = v8 >= v3;
    *(unsigned char *)(a1 + 8) = v9;
    return v9;
  }
}

void sub_19E2D4FB0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19E2D4FC4(uint64_t a1)
{
  v2[24] = *(void **)MEMORY[0x1E4F143B8];
  sub_19E2933F8((uint64_t)&v1, a1);
  sub_19E2933F8((uint64_t)v2, (uint64_t)&v1);
  sub_19E2D63C0((uint64_t)v2);
}

void sub_19E2D53F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  uint64_t v18 = *(void *)(v16 - 96);
  if (v18 == v16 - 120)
  {
    sub_19E32FB88();
  }
  else if (v18)
  {
    (*(void (**)(uint64_t))(*(void *)v18 + 40))(v18);
    sub_19E298384((uint64_t)va);
    _Unwind_Resume(a1);
  }
  sub_19E298384((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E2D547C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
}

void sub_19E2D5498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19E2D54B0(uint64_t a1)
{
  v2[24] = *(void **)MEMORY[0x1E4F143B8];
  sub_19E2933F8((uint64_t)&v1, a1);
  sub_19E2933F8((uint64_t)v2, (uint64_t)&v1);
  sub_19E2DF4FC((uint64_t)v2);
}

void sub_19E2D58E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  uint64_t v18 = *(void *)(v16 - 96);
  if (v18 == v16 - 120)
  {
    sub_19E32FB88();
  }
  else if (v18)
  {
    (*(void (**)(uint64_t))(*(void *)v18 + 40))(v18);
    sub_19E298384((uint64_t)va);
    _Unwind_Resume(a1);
  }
  sub_19E298384((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E2D5968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
}

void sub_19E2D5984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19E2D599C(uint64_t a1)
{
  v2[24] = *(void **)MEMORY[0x1E4F143B8];
  sub_19E2933F8((uint64_t)&v1, a1);
  sub_19E2933F8((uint64_t)v2, (uint64_t)&v1);
  sub_19E2E86B0((uint64_t)v2);
}

void sub_19E2D5DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  uint64_t v18 = *(void *)(v16 - 96);
  if (v18 == v16 - 120)
  {
    sub_19E32FB88();
  }
  else if (v18)
  {
    (*(void (**)(uint64_t))(*(void *)v18 + 40))(v18);
    sub_19E298384((uint64_t)va);
    _Unwind_Resume(a1);
  }
  sub_19E298384((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E2D5E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
}

void sub_19E2D5E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char **sub_19E2D5E88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5 = *(_DWORD *)(a1 + 56);
  int v6 = *(_DWORD *)(a1 + 60);
  uint64_t v7 = *(void *)(a1 + 64);
  char v30 = 0;
  unint64_t v29 = (char *)&unk_1EF0A86A8;
  int v31 = v5;
  v21[0] = 0;
  *(_DWORD *)uint64_t v22 = v6;
  *(void *)&v22[4] = v7;
  memset(v23, 0, sizeof(v23));
  uint64_t v24 = v25;
  v25[0] = 0;
  double v26 = 0.0;
  v27[0] = 0;
  v25[1] = 0;
  v25[2] = &v26;
  int v28 = 0;
  char v33 = 0;
  unint64_t v32 = (uint64_t (**)(void **, void **))&unk_1EF0A86A8;
  int v34 = v5;
  char v36 = 0;
  unint64_t v35 = (uint64_t (**)(void **, void **))&unk_1EF0A8768;
  int v38 = HIDWORD(v7);
  uint64_t v37 = *(void *)v22;
  sub_19E2965D0(v39, (uint64_t)v23);
  v39[12] = (uint64_t *)v27[1];
  int v40 = v28;
  uint64_t v20 = &unk_1EF0A8768;
  sub_19E2470C8((char **)v23);
  int v8 = *(_DWORD *)(a1 + 72);
  (*(void (**)(char **__return_ptr))(**(void **)(a1 + 120) + 16))(&v29);
  uint64_t v9 = *(void *)(a2 + 24);
  if (!v9) {
    goto LABEL_16;
  }
  double v10 = (*(double (**)(uint64_t, char **))(*(void *)v9 + 48))(v9, &v29);
  (*(void (**)(void, char **))(**(void **)(a1 + 120) + 24))(*(void *)(a1 + 120), &v29);
  std::chrono::steady_clock::now();
  LODWORD(v20) = 1;
  sub_19E291E68((uint64_t **)v21, (uint64_t *)&v29);
  double v26 = v10;
  sub_19E2A7DDC(*(void *)(a1 + 120), (uint64_t)v27);
  if (1 % v8) {
    goto LABEL_5;
  }
  uint64_t v11 = *(void *)(a2 + 56);
  if (!v11) {
LABEL_17:
  }
    sub_19E2A8074();
  if (((*(uint64_t (**)(uint64_t, void **))(*(void *)v11 + 48))(v11, &v20) & 1) == 0)
  {
LABEL_5:
    if (((*v32)((void **)&v32, &v20) & 1) == 0)
    {
      char v12 = (*v35)((void **)&v35, &v20);
      sub_19E2470C8(v27);
      sub_19E2470C8((char **)v21);
      sub_19E2470C8(&v29);
      if (v12) {
        goto LABEL_15;
      }
      int v13 = 2;
      while (1)
      {
        (*(void (**)(char **__return_ptr))(**(void **)(a1 + 120) + 16))(&v29);
        uint64_t v14 = *(void *)(a2 + 24);
        if (!v14) {
          break;
        }
        double v15 = (*(double (**)(uint64_t, char **))(*(void *)v14 + 48))(v14, &v29);
        (*(void (**)(void, char **))(**(void **)(a1 + 120) + 24))(*(void *)(a1 + 120), &v29);
        std::chrono::steady_clock::now();
        std::chrono::steady_clock::now();
        LODWORD(v20) = v13;
        sub_19E291E68((uint64_t **)v21, (uint64_t *)&v29);
        double v26 = v15;
        sub_19E2A7DDC(*(void *)(a1 + 120), (uint64_t)v27);
        if (!(v13 % v8))
        {
          uint64_t v16 = *(void *)(a2 + 56);
          if (!v16) {
            goto LABEL_17;
          }
          if ((*(uint64_t (**)(uint64_t, void **))(*(void *)v16 + 48))(v16, &v20)) {
            goto LABEL_6;
          }
        }
        if ((*v32)((void **)&v32, &v20)) {
          goto LABEL_6;
        }
        char v17 = (*v35)((void **)&v35, &v20);
        sub_19E2470C8(v27);
        sub_19E2470C8((char **)v21);
        sub_19E2470C8(&v29);
        ++v13;
        if (v17) {
          goto LABEL_15;
        }
      }
LABEL_16:
      sub_19E2A8074();
    }
  }
LABEL_6:
  sub_19E2470C8(v27);
  sub_19E2470C8((char **)v21);
  sub_19E2470C8(&v29);
LABEL_15:
  sub_19E2A7DDC(*(void *)(a1 + 120), a3);
  unint64_t v35 = (uint64_t (**)(void **, void **))&unk_1EF0A8768;
  return sub_19E2470C8((char **)v39);
}

void sub_19E2D6338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char *a39)
{
  sub_19E2470C8(v41);
  sub_19E2470C8(v40);
  sub_19E2470C8(&a39);
  *(void *)(v42 - 240) = a11;
  sub_19E2470C8(v39);
  _Unwind_Resume(a1);
}

void sub_19E2D63C0(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 48);
  if (v1 != 1)
  {
    if (!v1) {
      sub_19E29849C();
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_19E298774(exception, "Invalid optimizer in user config.");
    __cxa_throw(exception, (struct type_info *)off_1E599CD18, MEMORY[0x1E4FBA1E8]);
  }
  sub_19E2D6474();
}

void sub_19E2D6460(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19E2D6474()
{
}

void sub_19E2D65B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E2934EC((uint64_t)va);
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_19E2D65CC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E2D65E0(uint64_t a1, uint64_t *a2)
{
  sub_19E2933F8((uint64_t)&v15, (uint64_t)a2);
  *(void *)a1 = &unk_1EF0A8318;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  sub_19E2933F8(a1 + 32, (uint64_t)&v15);
  if (v21)
  {
    uint64_t v4 = (char **)__p;
    if (__p)
    {
      int v5 = v20;
      int v6 = __p;
      if (v20 != __p)
      {
        do
          int v5 = sub_19E2470C8(v5 - 12);
        while (v5 != v4);
        int v6 = __p;
      }
      uint64_t v20 = v4;
      operator delete(v6);
    }
  }
  uint64_t v7 = (void **)v17;
  if (v17)
  {
    int v8 = v18;
    uint64_t v9 = v17;
    if (v18 != v17)
    {
      do
      {
        if (*((char *)v8 - 17) < 0) {
          operator delete(*(v8 - 5));
        }
        v8 -= 5;
      }
      while (v8 != v7);
      uint64_t v9 = v17;
    }
    uint64_t v18 = v7;
    operator delete(v9);
  }
  double v10 = (void **)v15;
  if (v15)
  {
    uint64_t v11 = v16;
    char v12 = v15;
    if (v16 != v15)
    {
      do
      {
        if (*((char *)v11 - 25) < 0) {
          operator delete(*(v11 - 6));
        }
        v11 -= 6;
      }
      while (v11 != v10);
      char v12 = v15;
    }
    uint64_t v16 = v10;
    operator delete(v12);
  }
  *(void *)a1 = &unk_1EF0A8648;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  int v13 = sub_19E244298(a2);
  int v14 = sub_19E244DC4((uint64_t)a2);
  *(_DWORD *)(a1 + 176) = v14 + v13;
  sub_19E2D7470(a1 + 184, v14 + v13);
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 472) = 0;
  *(_DWORD *)(a1 + 488) = 0;
  *(void *)(a1 + 480) = 0;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 316) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 444) = 0u;
  *(void *)(a1 + 528) = 0;
  *(void *)(a1 + 520) = 0;
  *(_DWORD *)(a1 + 544) = 0;
  *(void *)(a1 + 536) = 0;
  *(_DWORD *)(a1 + 560) = -1;
  *(void *)(a1 + 504) = &unk_1EF0A7F48;
  *(void *)(a1 + 512) = a1 + 176;
  *(void *)(a1 + 568) = 0;
  sub_19E299010(a1 + 576);
  *(void *)(a1 + 10696) = 0;
  *(_OWORD *)(a1 + 10680) = 0u;
  if ((int)sub_19E244DC4(a1 + 32) >= 1) {
    sub_19E2D6D54();
  }
  sub_19E2D6F04();
}

void sub_19E2D6C44(_Unwind_Exception *a1)
{
  sub_19E2462FC(v6);
  sub_19E298A78(v5);
  int v8 = (void **)(v1 + 65);
  uint64_t v9 = v1[71];
  v1[71] = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  void *v4 = &unk_1EF0A7DB8;
  double v10 = *v8;
  if (*v8)
  {
    v1[66] = v10;
    operator delete(v10);
  }
  sub_19E2BEE60(v3);
  sub_19E29AC3C(v2);
  sub_19E298AC8(v1);
  _Unwind_Resume(a1);
}

void sub_19E2D6D54()
{
}

void sub_19E2D6EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_19E245FE8(&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_19E2D6ECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
  {
    sub_19E32FAD8((uint64_t)&a9, a9);
    operator delete(v9);
    _Unwind_Resume(a1);
  }
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_19E2D6F04()
{
}

void sub_19E2D7060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_19E245FE8(&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_19E2D707C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
  {
    sub_19E32FAD8((uint64_t)&a9, a9);
    operator delete(v9);
    _Unwind_Resume(a1);
  }
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_19E2D70B8(uint64_t a1)
{
  int v1 = (void *)sub_19E2DB360(a1);

  operator delete(v1);
}

uint64_t **sub_19E2D70E0@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X8>)
{
  uint64_t v4 = a1 + 8;
  unint64_t v5 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3);
  uint64_t v6 = a1 + 32;
  int v7 = sub_19E244298((uint64_t *)(a1 + 32));
  signed int v8 = 5 * (sub_19E244DC4(v6) + v7);
  if (*(unsigned char *)(v4 + 136) && v8 <= (int)(-1431655765 * ((*(void *)(a1 + 128) - *(void *)(a1 + 120)) >> 5))) {
    signed int v8 = -1431655765 * ((*(void *)(a1 + 128) - *(void *)(a1 + 120)) >> 5);
  }
  if (v5 >= v8)
  {
    (*(void (**)(char **__return_ptr))(**(void **)(a1 + 568) + 16))(v11);
    sub_19E291E68(a2, (uint64_t *)v11);
    return (uint64_t **)sub_19E2470C8(v11);
  }
  else
  {
    uint64_t v9 = (uint64_t *)(*(void *)(a1 + 10680)
                   + 96 * (int)(-991146299 * ((*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3)));
    return sub_19E291E68(a2, v9);
  }
}

void sub_19E2D7224(uint64_t a1, long long **a2, double a3)
{
  sub_19E29CE6C(a2, (uint64_t)&__p);
  double v5 = sub_19E2D9794(a1 + 176, (uint64_t)&__p);
  double v7 = sqrt(v6);
  double v20 = v7;
  double v21 = v5;
  double v8 = erfc((v5 - *(double *)(a1 + 552)) * -0.707106781 / v7) * 0.5;
  double v19 = v8;
  unint64_t v9 = *(void *)(a1 + 160);
  if (v9 >= *(void *)(a1 + 168))
  {
    uint64_t v14 = sub_19E2A4064((uint64_t *)(a1 + 152), (uint64_t)&__p, &v21, (uint64_t *)&v20, (uint64_t *)&v19);
  }
  else
  {
    *(void *)unint64_t v9 = 0;
    *(void *)(v9 + 8) = 0;
    *(void *)(v9 + 16) = 0;
    double v10 = __p;
    int64_t v11 = v23 - (unsigned char *)__p;
    if (v23 != __p)
    {
      if (v11 < 0) {
        sub_19E13D694();
      }
      char v12 = (char *)operator new(v23 - (unsigned char *)__p);
      *(void *)unint64_t v9 = v12;
      *(void *)(v9 + 8) = v12;
      int v13 = &v12[8 * (v11 >> 3)];
      *(void *)(v9 + 16) = v13;
      memcpy(v12, v10, v11);
      *(void *)(v9 + 8) = v13;
    }
    *(_DWORD *)(v9 + 24) = v24;
    *(double *)(v9 + 32) = v5;
    *(double *)(v9 + 40) = v7;
    *(double *)(v9 + 48) = v8;
    uint64_t v14 = v9 + 56;
    *(void *)(a1 + 160) = v9 + 56;
  }
  *(void *)(a1 + 160) = v14;
  uint64_t v15 = *(int *)(a1 + 488);
  uint64_t v16 = v15 + 1;
  *(_DWORD *)(a1 + 488) = v15 + 1;
  uint64_t v17 = *(void *)(a1 + 464);
  unint64_t v18 = (*(void *)(a1 + 472) - v17) >> 3;
  if (v15 + 1 <= v18)
  {
    if (v15 + 1 < v18) {
      *(void *)(a1 + 472) = v17 + 8 * v15 + 8;
    }
  }
  else
  {
    sub_19E2482DC(a1 + 464, v15 + 1 - v18);
    uint64_t v16 = *(int *)(a1 + 488);
    uint64_t v17 = *(void *)(a1 + 464);
  }
  *(double *)(v17 + 8 * v16 - 8) = a3;
  sub_19E2DB51C(a1 + 176, (uint64_t)&__p);
  sub_19E2DC700(a1 + 496, a1 + 176);
}

void sub_19E2D7424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, char *a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_19E2D7470(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + 8) = xmmword_19E351FD0;
  *(void *)(a1 + 24) = 0;
  uint64_t v4 = a2 << 32;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  size_t v5 = 8 * (int)a2;
  if (a2)
  {
    if ((a2 & 0x80000000) != 0) {
      sub_19E13D694();
    }
    double v6 = (char *)operator new(8 * (int)a2);
    *(void *)(a1 + 24) = v6;
    *(void *)(a1 + 40) = &v6[8 * (int)a2];
    bzero(v6, v5);
    *(void *)(a1 + 32) = &v6[v5];
    *(_DWORD *)(a1 + 48) = a2;
    if (v4) {
      goto LABEL_4;
    }
  }
  else
  {
    double v6 = 0;
    *(_DWORD *)(a1 + 48) = 0;
    if (v4) {
LABEL_4:
    }
      memset_pattern16(v6, &unk_19E351820, v5);
  }
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(void *)(a1 + 72) = 0;
  int v7 = a2 + 1;
  if (a2 == -1)
  {
    double v8 = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 72) = 0;
    *(_DWORD *)(a1 + 80) = v7;
    MEMORY[0] = 0;
    if (!a2) {
      return a1;
    }
    goto LABEL_12;
  }
  if (v7 < 0) {
    sub_19E13D694();
  }
  double v8 = operator new(8 * v7);
  bzero(v8, 8 * v7);
  *(void *)(a1 + 56) = v8;
  *(void *)(a1 + 64) = &v8[v7];
  *(void *)(a1 + 72) = &v8[v7];
  *(_DWORD *)(a1 + 80) = v7;
  *double v8 = 0;
  if (a2)
  {
LABEL_12:
    unint64_t v9 = 0;
    if (a2 == 1) {
      goto LABEL_16;
    }
    unint64_t v9 = a2 & 0xFFFFFFFFFFFFFFFELL;
    double v10 = v8 + 1;
    unint64_t v11 = a2 & 0xFFFFFFFFFFFFFFFELL;
    char v12 = (long long *)v6;
    do
    {
      long long v13 = *v12++;
      long double v20 = log(*((long double *)&v13 + 1));
      *(double *)&long long v14 = log(*(long double *)&v13);
      *((long double *)&v14 + 1) = v20;
      *v10++ = v14;
      v11 -= 2;
    }
    while (v11);
    if (v9 != a2)
    {
LABEL_16:
      uint64_t v15 = (long double *)&v8[v9 + 1];
      uint64_t v16 = (double *)&v6[8 * v9];
      uint64_t v17 = a2 - v9;
      do
      {
        long double v18 = *v16++;
        *v15++ = log(v18);
        --v17;
      }
      while (v17);
    }
  }
  return a1;
}

void sub_19E2D7650(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E13A9BC(a1);
}

void sub_19E2D766C(void *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  sub_19E13A9BC(a1);
}

long double sub_19E2D7688(uint64_t a1, double a2, double a3)
{
  return erfc((a2 - *(double *)(a1 + 48)) * -0.707106781 / a3) * 0.5;
}

double sub_19E2D76C0()
{
  return 0.0;
}

void sub_19E2D76C8(uint64_t a1)
{
  int v104 = 0;
  uint64_t v105 = 0;
  unint64_t v106 = 0;
  uint64_t v1 = *(void **)(a1 + 8);
  uint64_t v101 = 0;
  unint64_t v102 = 0;
  size_t v100 = 0;
  int v3 = (unsigned char *)v1[12];
  uint64_t v2 = (unsigned char *)v1[13];
  int64_t v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0) {
      sub_19E13D694();
    }
    size_t v5 = (char *)operator new(v2 - v3);
    double v6 = &v5[8 * (v4 >> 3)];
    size_t v100 = v5;
    unint64_t v102 = v6;
    memcpy(v5, v3, v4);
    uint64_t v101 = v6;
  }
  uint64_t v7 = v1[15];
  uint64_t v103 = v7;
  if (!v7)
  {
    uint64_t v55 = 0;
    uint64_t v58 = 0;
    *(_DWORD *)(a1 + 56) = 0;
    long long v62 = v100;
    signed int v63 = HIDWORD(v103);
    long long v107 = 0;
    int v108 = 0;
    uint64_t v109 = 0;
    if (HIDWORD(v103)) {
      goto LABEL_65;
    }
    goto LABEL_81;
  }
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  double v10 = 0;
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v90 = (int)v7;
  uint64_t v91 = v7;
  size_t v13 = 8 * (v7 >> 32);
  uint64_t v88 = v7 >> 32;
  size_t v89 = v13;
  unint64_t v87 = (v7 >> 32) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v93 = HIDWORD(v7);
  uint64_t v94 = 16;
  do
  {
    uint64_t v14 = *(void *)(a1 + 8);
    uint64_t v15 = v100;
    __p = 0;
    *(void *)uint64_t v96 = 0;
    uint64_t v97 = 0;
    if (!v93)
    {
      uint64_t v16 = 0;
      int v108 = 0;
      uint64_t v109 = 0;
      long long v107 = 0;
      unsigned int v110 = 0;
      goto LABEL_27;
    }
    if (v7 < 0) {
      sub_19E13D694();
    }
    uint64_t v16 = operator new(v13);
    bzero(v16, v13);
    if ((unint64_t)v7 >> 33 < 3)
    {
      unint64_t v17 = 0;
      unint64_t v18 = v88;
      goto LABEL_17;
    }
    unint64_t v18 = v88;
    if ((unint64_t)((char *)v16 - &v100[v13 * v12]) < 0x20)
    {
      unint64_t v17 = 0;
LABEL_17:
      unint64_t v23 = v18 - v17;
      uint64_t v24 = 8 * v17;
      signed int v25 = (void *)v16 + v17;
      double v26 = (uint64_t *)&v15[v8 + v24];
      do
      {
        uint64_t v27 = *v26++;
        *v25++ = v27;
        --v23;
      }
      while (v23);
      goto LABEL_19;
    }
    double v19 = (long long *)&v100[v94];
    long double v20 = v16 + 1;
    unint64_t v21 = v87;
    do
    {
      long long v22 = *v19;
      *(v20 - 1) = *(v19 - 1);
      *long double v20 = v22;
      v19 += 2;
      v20 += 2;
      v21 -= 4;
    }
    while (v21);
    unint64_t v17 = v87;
    if (v88 != v87) {
      goto LABEL_17;
    }
LABEL_19:
    long long v107 = 0;
    int v108 = 0;
    uint64_t v109 = 0;
    unsigned int v110 = v93;
    sub_19E2482DC((uint64_t)&v107, v18);
    uint64_t v28 = v110;
    if ((int)v110 >= 1)
    {
      uint64_t v29 = 0;
      char v30 = v107;
      if (v110 < 4) {
        goto LABEL_25;
      }
      if ((unint64_t)(v107 - (unsigned char *)v16) < 0x20) {
        goto LABEL_25;
      }
      unint64_t v31 = 0;
      uint64_t v29 = v110 & 0xFFFFFFFC;
      uint64_t v32 = (8 * v110) & 0x7FFFFFFE0;
      do
      {
        long long v33 = v16[v31 / 0x10 + 1];
        int v34 = &v30[v31];
        *int v34 = v16[v31 / 0x10];
        v34[1] = v33;
        v31 += 32;
      }
      while (v32 != v31);
      if (v29 != v28)
      {
LABEL_25:
        uint64_t v35 = v28 - v29;
        uint64_t v36 = v29 << 32;
        do
        {
          *(void *)&v30[v36 >> 29] = *(void *)((char *)v16 + (v36 >> 29));
          v36 += 0x100000000;
          --v35;
        }
        while (v35);
      }
    }
LABEL_27:
    double v37 = sub_19E2D7E9C(v14, (uint64_t)&v107);
    double v38 = v37;
    if (v11 < v10)
    {
      *v11++ = v37;
      uint64_t v7 = v91;
      size_t v13 = v89;
      uint64_t v105 = (uint64_t)v11;
      unint64_t v39 = v107;
      if (!v107) {
        goto LABEL_30;
      }
LABEL_29:
      int v108 = v39;
      operator delete(v39);
      goto LABEL_30;
    }
    uint64_t v40 = v11 - v9;
    unint64_t v41 = v40 + 1;
    if ((unint64_t)(v40 + 1) >> 61) {
      sub_19E13D694();
    }
    if (((char *)v10 - (char *)v9) >> 2 > v41) {
      unint64_t v41 = ((char *)v10 - (char *)v9) >> 2;
    }
    if ((unint64_t)((char *)v10 - (char *)v9) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v42 = v41;
    }
    if (v42)
    {
      if (v42 >> 61) {
        sub_19E13C418();
      }
      unint64_t v43 = operator new(8 * v42);
      float64x2_t v44 = (double *)&v43[8 * v40];
      double *v44 = v38;
      uint64_t v45 = (uint64_t)(v44 + 1);
      if (v11 != v9)
      {
LABEL_41:
        unint64_t v46 = (char *)(v11 - 1) - (char *)v9;
        if (v46 < 0x168
          || &v43[(char *)v11 - (char *)v9 - 8 - (v46 & 0xFFFFFFFFFFFFFFF8)] > &v43[(char *)v11 - (char *)v9 - 8]
          || (double *)((char *)v11 - (v46 & 0xFFFFFFFFFFFFFFF8) - 8) > v11 - 1
          || (unint64_t)((char *)v9 - v43) < 0x20)
        {
          long long v47 = v11;
          uint64_t v7 = v91;
          size_t v13 = v89;
        }
        else
        {
          uint64_t v49 = (v46 >> 3) + 1;
          uint64_t v50 = 8 * (v49 & 0x3FFFFFFFFFFFFFFCLL);
          long long v47 = &v11[v50 / 0xFFFFFFFFFFFFFFF8];
          float64x2_t v44 = (double *)((char *)v44 - v50);
          uint64_t v51 = &v43[8 * v40 - 16];
          uint64_t v52 = v11 - 2;
          uint64_t v53 = v49 & 0x3FFFFFFFFFFFFFFCLL;
          uint64_t v7 = v91;
          do
          {
            long long v54 = *(_OWORD *)v52;
            *(v51 - 1) = *((_OWORD *)v52 - 1);
            *uint64_t v51 = v54;
            v51 -= 2;
            v52 -= 4;
            v53 -= 4;
          }
          while (v53);
          size_t v13 = v89;
          if (v49 == (v49 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_44:
            double v10 = (double *)&v43[8 * v42];
            int v104 = v44;
            uint64_t v105 = v45;
            unint64_t v106 = v10;
            if (!v9) {
              goto LABEL_46;
            }
LABEL_45:
            operator delete(v9);
            goto LABEL_46;
          }
        }
        do
        {
          uint64_t v48 = *((void *)v47-- - 1);
          *((void *)v44-- - 1) = v48;
        }
        while (v47 != v9);
        goto LABEL_44;
      }
    }
    else
    {
      unint64_t v43 = 0;
      float64x2_t v44 = (double *)(8 * v40);
      *(double *)(8 * v40) = v37;
      uint64_t v45 = 8 * v40 + 8;
      if (v11 != v9) {
        goto LABEL_41;
      }
    }
    uint64_t v7 = v91;
    size_t v13 = v89;
    double v10 = (double *)&v43[8 * v42];
    int v104 = v44;
    uint64_t v105 = v45;
    unint64_t v106 = v10;
    if (v9) {
      goto LABEL_45;
    }
LABEL_46:
    unint64_t v9 = v44;
    unint64_t v11 = (double *)v45;
    uint64_t v105 = v45;
    unint64_t v39 = v107;
    if (v107) {
      goto LABEL_29;
    }
LABEL_30:
    if (v16) {
      operator delete(v16);
    }
    ++v12;
    v94 += v13;
    v8 += v13;
  }
  while (v12 != v90);
  uint64_t v55 = v104;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)(a1 + 8) + 120);
  if (v55 == v11)
  {
    uint64_t v58 = v55;
    long long v62 = v100;
    signed int v63 = HIDWORD(v103);
    long long v107 = 0;
    int v108 = 0;
    uint64_t v109 = 0;
    if (HIDWORD(v103)) {
      goto LABEL_65;
    }
    goto LABEL_81;
  }
  signed int v56 = v55 + 1;
  if (v55 + 1 == v11)
  {
    uint64_t v58 = v55;
    long long v62 = v100;
    signed int v63 = HIDWORD(v103);
    long long v107 = 0;
    int v108 = 0;
    uint64_t v109 = 0;
    if (HIDWORD(v103)) {
      goto LABEL_65;
    }
    goto LABEL_81;
  }
  double v57 = *v55;
  uint64_t v58 = v55;
  unint64_t v59 = v55 + 1;
  do
  {
    double v60 = *v59++;
    BOOL v61 = v57 < v60;
    double v57 = fmax(v57, v60);
    if (v61) {
      uint64_t v58 = v56;
    }
    signed int v56 = v59;
  }
  while (v59 != v11);
  long long v62 = v100;
  signed int v63 = HIDWORD(v103);
  long long v107 = 0;
  int v108 = 0;
  uint64_t v109 = 0;
  if (!HIDWORD(v103))
  {
LABEL_81:
    uint64_t v74 = 0;
    LODWORD(v73) = 0;
    uint64_t v64 = 0;
    *(void *)uint64_t v96 = 0;
    uint64_t v97 = 0;
    __p = 0;
    unsigned int v98 = 0;
    goto LABEL_82;
  }
LABEL_65:
  if (v63 < 0) {
    sub_19E13D694();
  }
  uint64_t v64 = operator new(8 * v63);
  uint64_t v65 = (v58 - v55) * v63;
  bzero(v64, 8 * v63);
  if (v63 < 0xA || (uint64_t v66 = &v62[8 * v65], (unint64_t)((char *)v64 - v66) < 0x20))
  {
    unint64_t v67 = 0;
    goto LABEL_69;
  }
  unint64_t v67 = v63 & 0xFFFFFFFFFFFFFFFCLL;
  int v83 = (long long *)(v66 + 16);
  uint64_t v84 = v64 + 1;
  unint64_t v85 = v67;
  do
  {
    long long v86 = *v83;
    *(v84 - 1) = *(v83 - 1);
    _OWORD *v84 = v86;
    v83 += 2;
    v84 += 2;
    v85 -= 4;
  }
  while (v85);
  if (v67 != v63)
  {
LABEL_69:
    unint64_t v68 = v63 - v67;
    uint64_t v69 = 8 * v67;
    unint64_t v70 = (void *)v64 + v67;
    uint64_t v71 = &v62[8 * v65 + v69];
    do
    {
      uint64_t v72 = *(void *)v71;
      v71 += 8;
      *v70++ = v72;
      --v68;
    }
    while (v68);
  }
  __p = 0;
  *(void *)uint64_t v96 = 0;
  uint64_t v97 = 0;
  unsigned int v98 = v63;
  sub_19E2482DC((uint64_t)&__p, v63);
  uint64_t v73 = v98;
  uint64_t v74 = (char *)__p;
  if ((int)v98 >= 1)
  {
    uint64_t v75 = 0;
    if (v98 < 4) {
      goto LABEL_77;
    }
    if ((unint64_t)((unsigned char *)__p - (unsigned char *)v64) < 0x20) {
      goto LABEL_77;
    }
    unint64_t v76 = 0;
    uint64_t v75 = v98 & 0xFFFFFFFC;
    uint64_t v77 = (8 * v98) & 0x7FFFFFFE0;
    do
    {
      long long v78 = v64[v76 / 0x10 + 1];
      int64_t v79 = &v74[v76];
      *(_OWORD *)int64_t v79 = v64[v76 / 0x10];
      *((_OWORD *)v79 + 1) = v78;
      v76 += 32;
    }
    while (v77 != v76);
    if (v75 != v73)
    {
LABEL_77:
      uint64_t v80 = v73 - v75;
      uint64_t v81 = v75 << 32;
      do
      {
        *(void *)&v74[v81 >> 29] = *(void *)((char *)v64 + (v81 >> 29));
        v81 += 0x100000000;
        --v80;
      }
      while (v80);
    }
  }
LABEL_82:
  uint64_t v82 = *(void *)v58;
  uint64_t v99 = *(void *)v58;
  if ((void **)(a1 + 16) != &__p)
  {
    sub_19E1E5B9C((void *)(a1 + 16), v74, *(char **)v96, (uint64_t)(*(void *)v96 - (void)v74) >> 3);
    LODWORD(v73) = v98;
    uint64_t v82 = v99;
    uint64_t v74 = (char *)__p;
  }
  *(_DWORD *)(a1 + 40) = v73;
  *(void *)(a1 + 48) = v82;
  if (v74)
  {
    *(void *)uint64_t v96 = v74;
    operator delete(v74);
  }
  if (v64) {
    operator delete(v64);
  }
  if (v62) {
    operator delete(v62);
  }
  if (v55)
  {
    uint64_t v105 = (uint64_t)v55;
    operator delete(v55);
  }
}

void sub_19E2D7DE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  if (__p) {
    operator delete(__p);
  }
  if (v28) {
    operator delete(v28);
  }
  if (v29) {
    operator delete(v29);
  }
  if (a27) {
    operator delete(a27);
  }
  _Unwind_Resume(exception_object);
}

double sub_19E2D7E9C(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 120))
  {
    sub_19E2D7F80(a1, a2, (uint64_t)__A);
    double __C = 0.0;
    vDSP_dotprD(__A[0], 1, *(const double **)(a1 + 256), 1, &__C, (int)__N);
    double v3 = __C;
    double __C = 0.0;
    vDSP_meanvD(*(const double **)(a1 + 288), 1, &__C, *(int *)(a1 + 312));
    double v4 = __C;
    if (__A[0])
    {
      __A[1] = __A[0];
      operator delete(__A[0]);
    }
    return v4 + v3;
  }
  else
  {
    __A[0] = 0;
    vDSP_meanvD(*(const double **)(a1 + 288), 1, (double *)__A, *(int *)(a1 + 312));
    return *(double *)__A;
  }
}

void sub_19E2D7F64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2D7F80(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *(_DWORD *)(a1 + 120);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 24) = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  if (v3)
  {
    if (v3 < 0) {
      sub_19E13D694();
    }
    uint64_t v5 = v3;
    double v6 = (char *)operator new(8 * v3);
    bzero(v6, 8 * v3);
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    *(void *)a3 = v6;
    *(void *)(a3 + 8) = &v6[8 * v3];
    *(void *)(a3 + 16) = &v6[8 * v3];
    *(_DWORD *)(a3 + 24) = v3;
    double v26 = v6;
    while (1)
    {
      uint64_t v9 = *(void *)(a1 + 96);
      signed int v10 = *(_DWORD *)(a1 + 124);
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      if (!v10)
      {
        unint64_t v11 = 0;
        uint64_t v29 = 0;
        char v30 = 0;
        __p = 0;
        signed int v31 = 0;
        goto LABEL_14;
      }
      if (v10 < 0) {
        sub_19E13D694();
      }
      unint64_t v11 = operator new(8 * v10);
      bzero(v11, 8 * v10);
      if (v10 >= 8 && (unint64_t)v11 - v9 - 8 * v8 * v10 >= 0x20)
      {
        unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL;
        unint64_t v21 = (long long *)(v9 + v7 * v10 + 16);
        long long v22 = v11 + 1;
        unint64_t v23 = v12;
        do
        {
          long long v24 = *v21;
          *(v22 - 1) = *(v21 - 1);
          _OWORD *v22 = v24;
          v21 += 2;
          v22 += 2;
          v23 -= 4;
        }
        while (v23);
        if (v12 == v10) {
          goto LABEL_12;
        }
      }
      else
      {
        unint64_t v12 = 0;
      }
      unint64_t v13 = v10 - v12;
      uint64_t v14 = 8 * v12;
      uint64_t v15 = (void *)v11 + v12;
      uint64_t v16 = (uint64_t *)(v9 + v14 + v7 * v10);
      do
      {
        uint64_t v17 = *v16++;
        *v15++ = v17;
        --v13;
      }
      while (v13);
LABEL_12:
      __p = 0;
      uint64_t v29 = 0;
      signed int v31 = 0;
      char v30 = 0;
      __p = operator new(8 * v10);
      uint64_t v29 = (char *)__p + 8 * v10;
      char v30 = v29;
      signed int v31 = v10;
      memcpy(__p, v11, 8 * v10);
      double v6 = v26;
LABEL_14:
      double v18 = sub_19E2D8240(a1 + 8, (uint64_t)&__p, a2);
      double v19 = *(double *)(a1 + 24);
      *(long double *)&v6[8 * v8] = (v18 + 1.0 + v20) * (exp(-v18) * v19);
      if (__p)
      {
        uint64_t v29 = (char *)__p;
        operator delete(__p);
      }
      if (v11) {
        operator delete(v11);
      }
      ++v8;
      v7 += 8;
      if (v8 == v5) {
        return;
      }
    }
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 24) = 0;
}

void sub_19E2D81CC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E13A9BC(a1);
}

void sub_19E2D81F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
  {
    operator delete(__p);
    if (!v14)
    {
LABEL_3:
      *(void *)(a10 + 8) = a11;
      operator delete(a11);
      _Unwind_Resume(a1);
    }
  }
  else if (!v14)
  {
    goto LABEL_3;
  }
  operator delete(v14);
  *(void *)(a10 + 8) = a11;
  operator delete(a11);
  _Unwind_Resume(a1);
}

double sub_19E2D8240(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(const void **)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  int64_t v8 = v6 - *(void *)a2;
  if (v6 == *(void *)a2)
  {
    signed int v10 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    if (v8 < 0) {
      sub_19E13D694();
    }
    uint64_t v9 = (char *)operator new(v6 - *(void *)a2);
    signed int v10 = &v9[8 * (v8 >> 3)];
    memcpy(v9, v7, v8);
  }
  int v11 = *(_DWORD *)(a2 + 24);
  vDSP_vdivD(*(const double **)(a1 + 24), 1, (const double *)v9, 1, (double *)v9, 1, v11);
  int64_t v12 = v10 - v9;
  if (v12)
  {
    if (v12 < 0) {
      sub_19E13D694();
    }
    unint64_t v13 = (char *)operator new(v12);
    uint64_t v14 = &v13[8 * (v12 >> 3)];
    memcpy(v13, v9, v12);
    if (v9) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v14 = 0;
    unint64_t v13 = 0;
    if (v9) {
LABEL_8:
    }
      operator delete(v9);
  }
  uint64_t v16 = *(const void **)a3;
  uint64_t v15 = *(void *)(a3 + 8);
  int64_t v17 = v15 - *(void *)a3;
  if (v15 == *(void *)a3)
  {
    double v19 = 0;
    double v18 = 0;
  }
  else
  {
    if (v17 < 0) {
      sub_19E13D694();
    }
    double v18 = (char *)operator new(v15 - *(void *)a3);
    double v19 = &v18[8 * (v17 >> 3)];
    memcpy(v18, v16, v17);
  }
  vDSP_vdivD(*(const double **)(a1 + 24), 1, (const double *)v18, 1, (double *)v18, 1, *(int *)(a3 + 24));
  if (v19 == v18)
  {
    double v20 = 0;
    if (v18) {
LABEL_18:
    }
      operator delete(v18);
  }
  else
  {
    if (v19 - v18 < 0) {
      sub_19E13D694();
    }
    double v20 = operator new(v19 - v18);
    memcpy(v20, v18, v19 - v18);
    if (v18) {
      goto LABEL_18;
    }
  }
  uint64_t v21 = v14 - v13;
  if (v14 == v13)
  {
    unint64_t v23 = 0;
    long long v22 = 0;
  }
  else
  {
    if (v21 < 0) {
      sub_19E13D694();
    }
    long long v22 = (char *)operator new(v14 - v13);
    unint64_t v23 = &v22[8 * (v21 >> 3)];
    memcpy(v22, v13, v14 - v13);
  }
  vDSP_vsubD((const double *)v20, 1, (const double *)v22, 1, (double *)v22, 1, v11);
  size_t v24 = v23 - v22;
  if (v23 == v22)
  {
    signed int v25 = 0;
  }
  else
  {
    if ((v24 & 0x8000000000000000) != 0) {
      sub_19E13D694();
    }
    signed int v25 = operator new(v23 - v22);
    memcpy(v25, v22, v24);
  }
  cblas_dnrm2_NEWLAPACK();
  double v27 = v26;
  if (v25) {
    operator delete(v25);
  }
  if (v22) {
    operator delete(v22);
  }
  if (v20) {
    operator delete(v20);
  }
  if (v13) {
    operator delete(v13);
  }
  return v27 * 2.23606798;
}

void sub_19E2D8594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (v25) {
    operator delete(v25);
  }
  if (v26) {
    operator delete(v26);
  }
  if (v24) {
    operator delete(v24);
  }
  if (v23) {
    operator delete(v23);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2D8670(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (a26) {
    JUMPOUT(0x19E2D8664);
  }
  JUMPOUT(0x19E2D8668);
}

uint64_t sub_19E2D8684(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  sub_19E246830(&v13, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 4));
  __p = 0;
  int64_t v17 = 0;
  uint64_t v18 = 0;
  sub_19E246A1C(&__p, a3[3], a3[4], 0xCCCCCCCCCCCCCCCDLL * ((a3[4] - a3[3]) >> 3));
  sub_19E2D8820((void *)a1, a2, (uint64_t *)&v13);
  uint64_t v6 = (void **)__p;
  if (__p)
  {
    uint64_t v7 = v17;
    int64_t v8 = __p;
    if (v17 != __p)
    {
      do
      {
        if (*((char *)v7 - 17) < 0) {
          operator delete(*(v7 - 5));
        }
        v7 -= 5;
      }
      while (v7 != v6);
      int64_t v8 = __p;
    }
    int64_t v17 = v6;
    operator delete(v8);
  }
  uint64_t v9 = (void **)v13;
  if (v13)
  {
    signed int v10 = v14;
    int v11 = v13;
    if (v14 != v13)
    {
      do
      {
        if (*((char *)v10 - 25) < 0) {
          operator delete(*(v10 - 6));
        }
        v10 -= 6;
      }
      while (v10 != v9);
      int v11 = v13;
    }
    uint64_t v14 = v9;
    operator delete(v11);
  }
  *(void *)a1 = &unk_1EF0A82B8;
  *(_DWORD *)(a1 + 64) = 5;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_19E2D87F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_19E2D8804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    sub_19E32FAD8((uint64_t)&a9, a9);
  }
  _Unwind_Resume(exception_object);
}

void *sub_19E2D8820(void *a1, uint64_t a2, uint64_t *a3)
{
  *a1 = &unk_1EF0A84C8;
  a1[1] = a2;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  sub_19E246830(a1 + 2, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 4));
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  sub_19E246A1C(a1 + 5, a3[3], a3[4], 0xCCCCCCCCCCCCCCCDLL * ((a3[4] - a3[3]) >> 3));
  return a1;
}

void sub_19E2D88C0(_Unwind_Exception *exception_object)
{
  if (*v2) {
    sub_19E32FD88(v1, *v2);
  }
  _Unwind_Resume(exception_object);
}

void *sub_19E2D88E0(void *a1)
{
  *a1 = &unk_1EF0A82B8;
  uint64_t v2 = (char **)a1[9];
  if (v2)
  {
    int v3 = (char **)a1[10];
    double v4 = v2;
    if (v3 != v2)
    {
      do
        int v3 = sub_19E2470C8(v3 - 13);
      while (v3 != v2);
      double v4 = (char **)a1[9];
    }
    a1[10] = v2;
    operator delete(v4);
  }

  return sub_19E2D8F94(a1);
}

void sub_19E2D8968(void *a1)
{
  *a1 = &unk_1EF0A82B8;
  uint64_t v2 = (char **)a1[9];
  if (v2)
  {
    int v3 = (char **)a1[10];
    double v4 = v2;
    if (v3 != v2)
    {
      do
        int v3 = sub_19E2470C8(v3 - 13);
      while (v3 != v2);
      double v4 = (char **)a1[9];
    }
    a1[10] = v2;
    operator delete(v4);
  }
  uint64_t v5 = sub_19E2D8F94(a1);

  operator delete(v5);
}

void sub_19E2D89F4(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  sub_19E2D906C(a1);
  uint64_t v6 = *(void *)(a1 + 72);
  if (v6 == *(void *)(a1 + 80))
  {
    uint64_t v39 = a3;
    sub_19E29CB00(a2, &v52);
    sub_19E2D9364(a2, (uint64_t)v49);
    uint64_t v7 = v50;
    if (v50 != v51)
    {
      do
      {
        uint64_t v8 = *(void *)((char *)v7 + 28);
        sub_19E291E68(v48, &v52[12 * (int)v8]);
        if (SHIDWORD(v8) >= 1)
        {
          int v9 = 0;
          unsigned int v10 = HIDWORD(v8) & ~(v8 >> 63);
          do
          {
            sub_19E2D94A4(a1, (uint64_t *)v48, (uint64_t **)&__A);
            sub_19E2460A4((char **)v48, (uint64_t)&__A);
            sub_19E15A064((uint64_t)v47, v47[1]);
            sub_19E15A064((uint64_t)v46, v46[1]);
            int v11 = (char *)__p;
            if (__p)
            {
              int64_t v12 = v45;
              unint64_t v13 = __p;
              if (v45 != __p)
              {
                do
                {
                  uint64_t v14 = (void *)*((void *)v12 - 4);
                  if (v14)
                  {
                    *((void *)v12 - 3) = v14;
                    operator delete(v14);
                  }
                  if (*(v12 - 33) < 0) {
                    operator delete(*((void **)v12 - 7));
                  }
                  v12 -= 56;
                }
                while (v12 != v11);
                unint64_t v13 = __p;
              }
              uint64_t v45 = v11;
              operator delete(v13);
            }
            uint64_t v15 = __A;
            if (*(double *)&__A != 0.0)
            {
              uint64_t v16 = v43;
              int64_t v17 = __A;
              if (v43 != __A)
              {
                do
                {
                  uint64_t v18 = (void *)*((void *)v16 - 4);
                  if (v18)
                  {
                    *((void *)v16 - 3) = v18;
                    operator delete(v18);
                  }
                  if (*((char *)v16 - 33) < 0) {
                    operator delete(*((void **)v16 - 7));
                  }
                  v16 -= 7;
                }
                while (v16 != v15);
                int64_t v17 = __A;
              }
              unint64_t v43 = v15;
              operator delete(v17);
            }
            unint64_t v41 = 0;
            uint64_t v19 = *(void *)(a1 + 8);
            sub_19E29CE6C((long long **)v48, (uint64_t)v40);
            uint64_t v20 = *(void *)(v19 + 8);
            if (*(_DWORD *)(v20 + 120))
            {
              sub_19E2D7F80(*(void *)(v19 + 8), (uint64_t)v40, (uint64_t)&__A);
              __C[0] = 0.0;
              vDSP_dotprD(__A, 1, *(const double **)(v20 + 256), 1, __C, (int)__p);
              double v21 = __C[0];
              __C[0] = 0.0;
              vDSP_meanvD(*(const double **)(v20 + 288), 1, __C, *(int *)(v20 + 312));
              double v22 = __C[0];
              sub_19E2D997C(v20, (uint64_t)v40, (uint64_t)&__A);
              double v24 = v23;
              double v25 = *(double *)(v20 + 16);
              if (*(double *)&__A != 0.0)
              {
                unint64_t v43 = __A;
                operator delete(__A);
              }
              double v26 = v22 + v21;
              double v27 = v25 + v24;
            }
            else
            {
              *(double *)&__A = 0.0;
              vDSP_meanvD(*(const double **)(v20 + 288), 1, (double *)&__A, *(int *)(v20 + 312));
              double v26 = *(double *)&__A;
              double v27 = sub_19E2D98A0(v20, (uint64_t)v40);
            }
            double v28 = sqrt(v27);
            if (v28 < 0.00000001 || (int v29 = *(_DWORD *)(*(void *)(v19 + 8) + 120), v29 <= 0))
            {
              double v30 = (*(double (**)(uint64_t))(*(void *)v19 + 8))(v19);
            }
            else
            {
              if (*(_DWORD *)(v19 + 56) != v29) {
                (*(void (**)(uint64_t))(*(void *)v19 + 16))(v19);
              }
              (**(void (***)(uint64_t, double, double))v19)(v19, v26, v28);
            }
            signed int v31 = *(uint64_t **)&v30;
            if (v40[0])
            {
              v40[1] = v40[0];
              operator delete(v40[0]);
            }
            unint64_t v41 = v31;
            sub_19E29D218((int *)(a1 + 64), (uint64_t *)v48, &v41);
            ++v9;
          }
          while (v10 != v9);
        }
        sub_19E2470C8((char **)v48);
        uint64_t v32 = (void *)v7[1];
        if (v32)
        {
          do
          {
            uint64_t v33 = (void **)v32;
            uint64_t v32 = (void *)*v32;
          }
          while (v32);
        }
        else
        {
          do
          {
            uint64_t v33 = (void **)v7[2];
            BOOL v34 = *v33 == v7;
            uint64_t v7 = v33;
          }
          while (!v34);
        }
        uint64_t v7 = v33;
      }
      while (v33 != v51);
    }
    uint64_t v35 = *(uint64_t **)(a1 + 72);
    sub_19E291E68((uint64_t **)v39, v35);
    *(void *)(v39 + 96) = v35[12];
    sub_19E29D74C(*(char ***)(a1 + 72), *(void *)(a1 + 80), (uint64_t)v48, 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 3));
    *(void *)(a1 + 80) = sub_19E2470C8((char **)(*(void *)(a1 + 80) - 104));
    sub_19E13C56C((uint64_t)&v50, v51[0]);
    uint64_t v36 = (char **)v52;
    if (v52)
    {
      double v37 = v53;
      double v38 = v52;
      if (v53 != (char **)v52)
      {
        do
          double v37 = sub_19E2470C8(v37 - 12);
        while (v37 != v36);
        double v38 = v52;
      }
      uint64_t v53 = v36;
      operator delete(v38);
    }
  }
  else
  {
    sub_19E291E68((uint64_t **)a3, *(uint64_t **)(a1 + 72));
    *(void *)(a3 + 96) = *(void *)(v6 + 96);
    sub_19E29D74C(*(char ***)(a1 + 72), *(void *)(a1 + 80), (uint64_t)v48, 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 3));
    *(void *)(a1 + 80) = sub_19E2470C8((char **)(*(void *)(a1 + 80) - 104));
  }
}

void sub_19E2D8EB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  sub_19E2470C8(v28);
  sub_19E13C56C(a10, *(void **)(v29 - 184));
  sub_19E2462FC((void **)(v29 - 168));
  _Unwind_Resume(a1);
}

void sub_19E2D8F48(char *a1@<X8>)
{
  a1[23] = 17;
  strcpy(a1, "genetic_optimizer");
}

void sub_19E2D8F6C(char *a1@<X8>)
{
  a1[23] = 21;
  strcpy(a1, "acquisition_optimizer");
}

void *sub_19E2D8F94(void *a1)
{
  *a1 = &unk_1EF0A84C8;
  uint64_t v2 = a1[5];
  if (v2)
  {
    uint64_t v3 = a1[6];
    double v4 = (void *)a1[5];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 17) < 0) {
          operator delete(*(void **)(v3 - 40));
        }
        v3 -= 40;
      }
      while (v3 != v2);
      double v4 = (void *)a1[5];
    }
    a1[6] = v2;
    operator delete(v4);
  }
  uint64_t v5 = a1[2];
  if (v5)
  {
    uint64_t v6 = a1[3];
    uint64_t v7 = (void *)a1[2];
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 25) < 0) {
          operator delete(*(void **)(v6 - 48));
        }
        v6 -= 48;
      }
      while (v6 != v5);
      uint64_t v7 = (void *)a1[2];
    }
    a1[3] = v5;
    operator delete(v7);
  }
  return a1;
}

void sub_19E2D906C(uint64_t a1)
{
  int v18 = 5;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v19 = 0;
  uint64_t v3 = *(void *)(a1 + 72);
  uint64_t v2 = (uint64_t *)(a1 + 72);
  if (v3 == *(void *)(a1 + 80))
  {
    int64_t v12 = 0;
    *(_DWORD *)(a1 + 64) = 5;
    if ((int *)(a1 + 64) == &v18) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  do
  {
    sub_19E291E68(v17, (uint64_t *)v3);
    v17[12] = *(uint64_t **)(v3 + 96);
    sub_19E29D74C(*(char ***)(a1 + 72), *(void *)(a1 + 80), (uint64_t)__p, 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 3));
    *(void *)(a1 + 80) = sub_19E2470C8((char **)(*(void *)(a1 + 80) - 104));
    uint64_t v16 = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    sub_19E29CE6C((long long **)v17, (uint64_t)__p);
    v5.n128_f64[0] = sub_19E2D9794(*(void *)(v4 + 8), (uint64_t)__p);
    double v7 = sqrt(v6);
    if (v7 < 0.00000001 || (int v8 = *(_DWORD *)(*(void *)(v4 + 8) + 120), v8 <= 0))
    {
      double v10 = (*(double (**)(uint64_t, __n128))(*(void *)v4 + 8))(v4, v5);
    }
    else
    {
      double v9 = v5.n128_f64[0];
      if (*(_DWORD *)(v4 + 56) != v8) {
        (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
      }
      (**(void (***)(uint64_t, double, double))v4)(v4, v9, v7);
    }
    *(double *)&int v11 = v10;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    uint64_t v16 = v11;
    if (*(double *)&v11 > (*(double (**)(void))(**(void **)(a1 + 8) + 8))(*(void *)(a1 + 8))) {
      sub_19E29D218(&v18, (uint64_t *)v17, &v16);
    }
    sub_19E2470C8((char **)v17);
    uint64_t v3 = *(void *)(a1 + 72);
  }
  while (v3 != *(void *)(a1 + 80));
  int64_t v12 = v19;
  *(_DWORD *)(a1 + 64) = v18;
  if ((int *)(a1 + 64) != &v18)
  {
LABEL_17:
    sub_19E29D4FC(v2, v12, v20, 0x4EC4EC4EC4EC4EC5 * (v20 - v12));
    int64_t v12 = v19;
  }
LABEL_18:
  if (v12)
  {
    unint64_t v13 = (char **)v20;
    uint64_t v14 = v12;
    if (v20 != v12)
    {
      do
        unint64_t v13 = sub_19E2470C8(v13 - 13);
      while (v13 != (char **)v12);
      uint64_t v14 = v19;
    }
    uint64_t v20 = v12;
    operator delete(v14);
  }
}

void sub_19E2D9300(_Unwind_Exception *a1)
{
  sub_19E29C7AC(v1 - 120);
  _Unwind_Resume(a1);
}

void sub_19E2D9314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_19E2470C8((char **)va);
  sub_19E29C7AC(v7 - 120);
  _Unwind_Resume(a1);
}

void sub_19E2D9338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *a15)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E2470C8(&a15);
  sub_19E29C7AC(v15 - 120);
  _Unwind_Resume(a1);
}

void sub_19E2D9364(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = a2 + 16;
  *(void *)(a2 + 24) = 0;
  sub_19E29DC58(a1, __p);
  sub_19E2459C8(v7, (uint64_t *)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v3 = 50;
  do
  {
    int v5 = sub_19E29E07C((uint64_t)v9, (uint64_t)v7, v9);
    uint64_t v4 = sub_19E29DD48((int *)a2, &v5);
    ++*(_DWORD *)v4;
    --v3;
  }
  while (v3);
  if (v9[0])
  {
    v9[1] = v9[0];
    operator delete(v9[0]);
  }
  std::random_device::~random_device(&v8);
}

void sub_19E2D9444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14)
{
  if (__p)
  {
    operator delete(__p);
    sub_19E13C56C(v14, *v15);
    _Unwind_Resume(a1);
  }
  sub_19E13C56C(v14, *v15);
  _Unwind_Resume(a1);
}

void sub_19E2D94A4(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t **a3@<X8>)
{
  sub_19E291E68(a3, a2);
  sub_19E29E298((long long **)a2, (uint64_t)v8);
  sub_19E2D9634(a1, (uint64_t *)v8, v9);
  sub_19E29E624((uint64_t)a2, (uint64_t)v6);
  sub_19E2D96E4(a1, (uint64_t *)v6, __p);
  sub_19E29E900((uint64_t *)a3, (uint64_t *)v9);
  sub_19E29EAC0((uint64_t)a3, (uint64_t *)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v6[0])
  {
    v6[1] = v6[0];
    operator delete(v6[0]);
  }
  if (*(void *)&v9[0])
  {
    *((void *)&v9[0] + 1) = *(void *)&v9[0];
    operator delete(*(void **)&v9[0]);
  }
  if (v8[0])
  {
    v8[1] = v8[0];
    operator delete(v8[0]);
  }
}

void sub_19E2D9574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v21 = *(void **)(v19 - 64);
    if (!v21)
    {
LABEL_3:
      double v22 = a17;
      if (!a17) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v21 = *(void **)(v19 - 64);
    if (!v21) {
      goto LABEL_3;
    }
  }
  *(void *)(v19 - 56) = v21;
  operator delete(v21);
  double v22 = a17;
  if (!a17)
  {
LABEL_4:
    sub_19E2470C8(v18);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(v22);
  sub_19E2470C8(v18);
  _Unwind_Resume(a1);
}

double sub_19E2D9634@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  int v5 = (uint64_t *)(a1 + 16);
  if (sub_19E244298((uint64_t *)(a1 + 16)))
  {
    sub_19E244360(v5, (uint64_t *)v7);
    sub_19E310AEC(a2, (uint64_t)v7, (uint64_t)a3);
    if (__p)
    {
      double v9 = __p;
      operator delete(__p);
    }
    if (v7[0])
    {
      v7[1] = v7[0];
      operator delete(v7[0]);
    }
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

void sub_19E2D96D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double sub_19E2D96E4@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v5 = a1 + 16;
  if (sub_19E244DC4(a1 + 16))
  {
    sub_19E244E8C(v5, (uint64_t *)v7);
    sub_19E311780(a2, (uint64_t *)v7, (uint64_t)a3);
    if (__p)
    {
      double v9 = __p;
      operator delete(__p);
    }
    if (v7[0])
    {
      v7[1] = v7[0];
      operator delete(v7[0]);
    }
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

void sub_19E2D9780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double sub_19E2D9794(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 120))
  {
    sub_19E2D7F80(a1, a2, (uint64_t)__A);
    double __C = 0.0;
    vDSP_dotprD(__A[0], 1, *(const double **)(a1 + 256), 1, &__C, (int)__N);
    double v4 = __C;
    double __C = 0.0;
    vDSP_meanvD(*(const double **)(a1 + 288), 1, &__C, *(int *)(a1 + 312));
    double v5 = __C;
    sub_19E2D997C(a1, a2, (uint64_t)__A);
    if (__A[0])
    {
      __A[1] = __A[0];
      operator delete(__A[0]);
    }
    return v5 + v4;
  }
  else
  {
    double v6 = sub_19E2D7E9C(a1, a2);
    sub_19E2D98A0(a1, a2);
  }
  return v6;
}

void sub_19E2D9880(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_19E2D98A0(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 120))
  {
    sub_19E2D7F80(a1, a2, (uint64_t)__p);
    sub_19E2D997C(a1, a2, (uint64_t)__p);
    double v5 = v4;
    double v6 = *(double *)(a1 + 16);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    return v6 + v5;
  }
  else
  {
    double v8 = sub_19E2D8240(a1 + 8, a2, a2);
    double v9 = *(double *)(a1 + 24);
    return *(double *)(a1 + 16) + exp(-v8) * v9 * (v8 + 1.0 + v10);
  }
}

void sub_19E2D9960(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2D997C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_19E29F880(a1 + 192, (uint64_t)__p);
  uint64_t v6 = *(unsigned int *)(a1 + 216);
  if ((int)v6 >= 1)
  {
    uint64_t v7 = 0;
    int v8 = *(_DWORD *)(a1 + 220);
    int v9 = v24;
    int v10 = 1;
    int v11 = -1;
    int64_t v12 = __p[0];
    do
    {
      if (v8 <= v10) {
        int v13 = v10;
      }
      else {
        int v13 = v8;
      }
      int v14 = v7 + 1;
      if ((int)v7 + 1 >= v8) {
        goto LABEL_3;
      }
      unsigned int v15 = 0;
      int v16 = v13 + v11;
      uint64_t v17 = (int)v7 * (uint64_t)v9;
      if ((v13 + v11) < 4)
      {
        int v18 = v7 + 1;
      }
      else
      {
        int v18 = v7 + 1;
        if (v13 - (int)v7 + v10 - 2 >= v10)
        {
          int v19 = 0;
          unsigned int v15 = v16 & 0xFFFFFFFC;
          int v18 = v14 + (v16 & 0xFFFFFFFC);
          do
          {
            uint64_t v20 = &v12[v17 + v10 + v19];
            *uint64_t v20 = 0uLL;
            v20[1] = 0uLL;
            v19 += 4;
          }
          while ((v16 & 0xFFFFFFFC) != v19);
          if (v16 == v15) {
            goto LABEL_3;
          }
        }
      }
      unsigned int v21 = v13 - v15;
      do
      {
        v12[v17 + v18] = 0;
        int v18 = ++v15 + v14;
        --v21;
      }
      while (v10 != v21);
LABEL_3:
      ++v7;
      ++v10;
      --v11;
    }
    while (v7 != v6);
  }
  sub_19E29F6FC((uint64_t)__p, a3, (uint64_t)__B);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  double v22 = sub_19E2D8240(a1 + 8, a2, a2);
  __p[0] = 0;
  vDSP_dotprD(__B[0], 1, __B[0], 1, (double *)__p, (int)__N);
  if (__B[0])
  {
    __B[1] = __B[0];
    operator delete(__B[0]);
  }
  exp(-v22);
}

void sub_19E2D9B54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E2D9B84(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  BOOL v34 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  sub_19E246830(&v34, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 4));
  __p = 0;
  double v38 = 0;
  uint64_t v39 = 0;
  sub_19E246A1C(&__p, a3[3], a3[4], 0xCCCCCCCCCCCCCCCDLL * ((a3[4] - a3[3]) >> 3));
  sub_19E2D8820((void *)a1, a2, (uint64_t *)&v34);
  int v8 = (void **)__p;
  if (__p)
  {
    int v9 = v38;
    int v10 = __p;
    if (v38 != __p)
    {
      do
      {
        if (*((char *)v9 - 17) < 0) {
          operator delete(*(v9 - 5));
        }
        v9 -= 5;
      }
      while (v9 != v8);
      int v10 = __p;
    }
    double v38 = v8;
    operator delete(v10);
  }
  int v11 = (void **)v34;
  if (v34)
  {
    int64_t v12 = v35;
    int v13 = v34;
    if (v35 != v34)
    {
      do
      {
        if (*((char *)v12 - 25) < 0) {
          operator delete(*(v12 - 6));
        }
        v12 -= 6;
      }
      while (v12 != v11);
      int v13 = v34;
    }
    uint64_t v35 = v11;
    operator delete(v13);
  }
  *(void *)a1 = &unk_1EF0A80D8;
  unsigned int v14 = sub_19E244298(a3);
  sub_19E2A099C(a1 + 64, v14);
  sub_19E299010(a1 + 184);
  sub_19E244360(a3, (uint64_t *)v32);
  sub_19E2A16E8(a1 + 64, (uint64_t *)v32);
  sub_19E2A1818(a1 + 64, (uint64_t *)v33);
  if (v33[0])
  {
    v33[1] = v33[0];
    operator delete(v33[0]);
  }
  if (v32[0])
  {
    v32[1] = v32[0];
    operator delete(v32[0]);
  }
  if ((a4 & 0xFF00000000) != 0)
  {
    uint64_t v15 = 0;
    *(_DWORD *)(a1 + 7776) = a4;
    uint64_t v16 = 1;
    unsigned int v17 = a4;
    do
    {
      int v18 = 1812433253 * (v17 ^ (v17 >> 30));
      unsigned int v17 = v18 + v16;
      *(_DWORD *)(a1 + 7780 + 4 * v15) = v15 + v18 + 1;
      ++v16;
      ++v15;
    }
    while (v15 != 623);
    *(void *)(a1 + 10272) = 0;
    *(_DWORD *)(a1 + 184) = a4;
    uint64_t v19 = 1;
    uint64_t v20 = 47;
    unsigned int v21 = a4;
    do
    {
      int v22 = 1812433253 * (v21 ^ (v21 >> 30));
      unsigned int v21 = v22 + v19;
      *(_DWORD *)(a1 + 4 * v20) = v20 + v22 - 46;
      ++v19;
      ++v20;
    }
    while (v20 != 670);
    uint64_t v23 = 0;
    *(void *)(a1 + 2680) = 0;
    *(_DWORD *)(a1 + 2712) = a4;
    uint64_t v24 = 1;
    unsigned int v25 = a4;
    do
    {
      int v26 = 1812433253 * (v25 ^ (v25 >> 30));
      unsigned int v25 = v26 + v24;
      *(_DWORD *)(a1 + 2716 + 4 * v23) = v23 + v26 + 1;
      ++v24;
      ++v23;
    }
    while (v23 != 623);
    uint64_t v27 = 0;
    *(void *)(a1 + 5208) = 0;
    *(_DWORD *)(a1 + 5232) = a4;
    uint64_t v28 = 1;
    unsigned int v29 = a4;
    do
    {
      int v30 = 1812433253 * (v29 ^ (v29 >> 30));
      unsigned int v29 = v30 + v28;
      *(_DWORD *)(a1 + 5236 + 4 * v27) = v27 + v30 + 1;
      ++v28;
      ++v27;
    }
    while (v27 != 623);
    *(void *)(a1 + 7728) = 0;
    sub_19E312C64();
  }
  return a1;
}

void sub_19E2D9E68(_Unwind_Exception *a1)
{
  sub_19E2A0A3C(v2);
  sub_19E2D8F94(v1);
  _Unwind_Resume(a1);
}

void sub_19E2D9ED4(_Unwind_Exception *a1)
{
  sub_19E2D8F94(v1);
  _Unwind_Resume(a1);
}

void sub_19E2D9EEC(uint64_t a1)
{
  uint64_t v1 = sub_19E2DA434(a1);

  operator delete(v1);
}

void sub_19E2D9F14(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v12 = 0u;
  memset(v11, 0, sizeof(v11));
  *(void *)&long long v12 = (char *)&v12 + 8;
  v15[0] = 0;
  v15[1] = 0;
  uint64_t v13 = 0;
  unsigned int v14 = v15;
  double v4 = (*(double (**)(void))(**(void **)(a1 + 8) + 8))(*(void *)(a1 + 8));
  sub_19E291E68((uint64_t **)a2, (uint64_t *)v11);
  *(double *)(a2 + 96) = v4;
  sub_19E2470C8((char **)v11);
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v16 = 0;
  sub_19E246830(&v16, *(void *)(a1 + 16), *(void *)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 4));
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  sub_19E246A1C(&v19, *(void *)(a1 + 40), *(void *)(a1 + 48), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 3));
  sub_19E2459CC((uint64_t *)&v16, a1 + 184, 5, (char **)&v22);
  double v5 = v19;
  if (v19)
  {
    uint64_t v6 = v20;
    uint64_t v7 = v19;
    if (v20 != v19)
    {
      do
      {
        if (*((char *)v6 - 17) < 0) {
          operator delete(*(v6 - 5));
        }
        v6 -= 5;
      }
      while (v6 != v5);
      uint64_t v7 = v19;
    }
    uint64_t v20 = v5;
    operator delete(v7);
  }
  uint64_t v8 = (uint64_t)v16;
  if (v16)
  {
    uint64_t v9 = v17;
    int v10 = v16;
    if ((void *)v17 != v16)
    {
      do
      {
        if (*(char *)(v9 - 25) < 0) {
          operator delete(*(void **)(v9 - 48));
        }
        v9 -= 48;
      }
      while (v9 != v8);
      int v10 = v16;
    }
    uint64_t v17 = v8;
    operator delete(v10);
  }
  sub_19E2DA50C(a1, v22);
}

void sub_19E2DA35C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v8 = va_arg(va1, char *);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  sub_19E2470C8((char **)va1);
  sub_19E2470C8((char **)va);
  sub_19E2462FC((void **)(v6 - 112));
  sub_19E2470C8(v5);
  _Unwind_Resume(a1);
}

void sub_19E2DA414(char *a1@<X8>)
{
  a1[23] = 16;
  strcpy(a1, "direct_optimizer");
}

void *sub_19E2DA434(uint64_t a1)
{
  *(void *)a1 = &unk_1EF0A80D8;
  std::random_device::~random_device((std::random_device *)(a1 + 10280));
  std::random_device::~random_device((std::random_device *)(a1 + 7736));
  std::random_device::~random_device((std::random_device *)(a1 + 5216));
  std::random_device::~random_device((std::random_device *)(a1 + 2688));
  *(void *)(a1 + 64) = &unk_1EF0A7F70;
  sub_19E311F9C(*(void *)(a1 + 72));
  uint64_t v2 = *(void **)(a1 + 128);
  if (v2)
  {
    *(void *)(a1 + 136) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 104);
  if (v3)
  {
    *(void *)(a1 + 112) = v3;
    operator delete(v3);
  }
  double v4 = *(void **)(a1 + 80);
  if (v4)
  {
    *(void *)(a1 + 88) = v4;
    operator delete(v4);
  }

  return sub_19E2D8F94((void *)a1);
}

void sub_19E2DA50C(uint64_t a1, long long **a2)
{
  v4[0] = a1;
  v4[1] = a2;
  uint64_t v2 = a1 + 64;
  sub_19E29E298(a2, (uint64_t)&__p);
  sub_19E2DA8DC(v2, (uint64_t)v4, (uint64_t)&__p);
}

void sub_19E2DA804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a13)
  {
    operator delete(a13);
    uint64_t v24 = __p;
    if (!__p)
    {
LABEL_4:
      sub_19E2470C8((char **)&a21);
      unsigned int v25 = *(void **)(v22 - 128);
      if (v25)
      {
        *(void *)(v22 - 120) = v25;
        operator delete(v25);
      }
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v24 = __p;
    if (!__p) {
      goto LABEL_4;
    }
  }
  operator delete(v24);
  goto LABEL_4;
}

void sub_19E2DA8DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a1 + 112)) {
    (**(void (***)(uint64_t, void))a1)(a1, *(unsigned int *)(a3 + 24));
  }
  operator new();
}

void sub_19E2DAD70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  __cxa_free_exception(v15);
  if (a2 != 3)
  {
    if (a2 == 2)
    {
      uint64_t v19 = __cxa_begin_catch(a1);
      (*(void (**)(void *))(*(void *)v19 + 16))(v19);
      sub_19E29FAE8(v14, (uint64_t)&a13);
      if (a13)
      {
        a14 = (uint64_t)a13;
        operator delete(a13);
      }
      __cxa_end_catch();
LABEL_13:
      JUMPOUT(0x19E2DAB58);
    }
    if (a2 != 1)
    {
      if (__p) {
        operator delete(__p);
      }
      _Unwind_Resume(a1);
    }
  }
  uint64_t v18 = __cxa_begin_catch(a1);
  (*(void (**)(void *))(*(void *)v18 + 16))(v18);
  __cxa_end_catch();
  goto LABEL_13;
}

void sub_19E2DAEC0(uint64_t **a1, void *a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  double v5 = a1[1];
  unint64_t v7 = (char *)v5 - (char *)*a1;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  __p = 0;
  int v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  if (!(v7 >> 3))
  {
    uint64_t v8 = 0;
    __p = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    int v20 = v7 >> 3;
    if (v6 == v5) {
      goto LABEL_13;
    }
    goto LABEL_6;
  }
  if (((v7 >> 3) & 0x80000000) != 0) {
    sub_19E13D694();
  }
  uint64_t v8 = operator new((uint64_t)(v7 << 29) >> 29);
  bzero(v8, (uint64_t)(v7 << 29) >> 29);
  __p = v8;
  uint64_t v18 = (char *)v8 + ((uint64_t)(v7 << 29) >> 29);
  uint64_t v19 = (char *)v8 + 8 * (int)((uint64_t)v7 >> 3);
  int v20 = v7 >> 3;
  if (v6 != v5)
  {
LABEL_6:
    uint64_t v9 = 0;
    if (v7 - 8 < 0x18) {
      goto LABEL_11;
    }
    if ((unint64_t)((char *)v8 - (char *)v6) < 0x20) {
      goto LABEL_11;
    }
    unint64_t v10 = ((v7 - 8) >> 3) + 1;
    uint64_t v9 = v10 & 0x3FFFFFFFFFFFFFFCLL;
    uint64_t v11 = v8 + 1;
    uint64_t v12 = (long long *)(v6 + 2);
    uint64_t v13 = v10 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v14 = *v12;
      *(v11 - 1) = *(v12 - 1);
      *uint64_t v11 = v14;
      v11 += 2;
      v12 += 2;
      v13 -= 4;
    }
    while (v13);
    v6 += v10 & 0x3FFFFFFFFFFFFFFCLL;
    if (v10 != v9)
    {
LABEL_11:
      uint64_t v15 = (void *)v8 + v9;
      do
      {
        uint64_t v16 = *v6++;
        *v15++ = v16;
      }
      while (v6 != v5);
    }
  }
LABEL_13:
  if (*a2 == a2[1])
  {
    sub_19E2DB094(a3, (uint64_t)&__p);
    if (__p)
    {
      uint64_t v18 = (char *)__p;
      operator delete(__p);
    }
  }
  else
  {
    sub_19E2DB094(a3, (uint64_t)&__p);
    __break(1u);
  }
}

void sub_19E2DB058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2DB078(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E13A9BC(a1);
}

uint64_t sub_19E2DB094(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*a1 + 8);
  sub_19E29E624(a1[1], (uint64_t)v25);
  uint64_t v4 = v26;
  uint64_t v28 = 0;
  unsigned int v29 = 0;
  uint64_t v27 = 0;
  if (!v26)
  {
    int v30 = 0;
    goto LABEL_11;
  }
  if ((v26 & 0x80000000) != 0) {
    sub_19E13D694();
  }
  double v5 = (float64x2_t *)operator new(8 * (int)v26);
  uint64_t v27 = v5;
  unsigned int v29 = (char *)&v5->f64[(int)v4];
  bzero(v5, 8 * (int)v4);
  uint64_t v28 = (char *)&v5->f64[(int)v4];
  int v30 = v4;
  uint64_t v6 = (char *)v25[0];
  if (v4 < 8)
  {
    uint64_t v7 = 0;
LABEL_9:
    uint64_t v16 = v4 - v7;
    uint64_t v17 = v7 << 32;
    do
    {
      *(double *)((char *)v5->f64 + (v17 >> 29)) = (double)*(int *)&v6[v17 >> 30];
      v17 += 0x100000000;
      --v16;
    }
    while (v16);
    goto LABEL_11;
  }
  uint64_t v7 = v4 & 0xFFFFFFF8;
  uint64_t v8 = v5 + 2;
  uint64_t v9 = (char *)v25[0] + 16;
  uint64_t v10 = v7;
  do
  {
    long long v11 = *((_OWORD *)v9 - 1);
    v12.i64[0] = (int)v11;
    v12.i64[1] = SDWORD1(v11);
    float64x2_t v13 = vcvtq_f64_s64(v12);
    v12.i64[0] = SDWORD2(v11);
    v12.i64[1] = SHIDWORD(v11);
    float64x2_t v14 = vcvtq_f64_s64(v12);
    v12.i64[0] = (int)*(_OWORD *)v9;
    v12.i64[1] = (int)HIDWORD(*(void *)v9);
    float64x2_t v15 = vcvtq_f64_s64(v12);
    v12.i64[0] = (int)*((void *)v9 + 1);
    v12.i64[1] = (int)HIDWORD(*(_OWORD *)v9);
    v8[-2] = v13;
    v8[-1] = v14;
    *uint64_t v8 = v15;
    v8[1] = vcvtq_f64_s64(v12);
    v8 += 4;
    v9 += 32;
    v10 -= 8;
  }
  while (v10);
  if (v7 != v4) {
    goto LABEL_9;
  }
LABEL_11:
  sub_19E29FF68(a2, (uint64_t)&v27, (uint64_t)__p);
  double v18 = sub_19E2D9794(*(void *)(v3 + 8), (uint64_t)__p);
  double v20 = sqrt(v19);
  if (v20 < 0.00000001 || (int v21 = *(_DWORD *)(*(void *)(v3 + 8) + 120), v21 <= 0))
  {
    double v22 = (*(double (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  else
  {
    if (*(_DWORD *)(v3 + 56) != v21) {
      (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
    (**(void (***)(uint64_t, double, double))v3)(v3, v18, v20);
  }
  double v23 = v22;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v27)
  {
    uint64_t v28 = (char *)v27;
    operator delete(v27);
  }
  if (v25[0])
  {
    v25[1] = v25[0];
    operator delete(v25[0]);
  }
  return *(void *)&v23;
}

void sub_19E2DB2E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p)
  {
    operator delete(__p);
    double v19 = a9;
    if (!a9) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    double v19 = a9;
    if (!a9) {
      goto LABEL_3;
    }
  }
  operator delete(v19);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E2DB360(uint64_t a1)
{
  *(void *)a1 = &unk_1EF0A8648;
  uint64_t v2 = *(char ***)(a1 + 10680);
  if (v2)
  {
    uint64_t v3 = *(char ***)(a1 + 10688);
    uint64_t v4 = v2;
    if (v3 != v2)
    {
      do
        uint64_t v3 = sub_19E2470C8(v3 - 12);
      while (v3 != v2);
      uint64_t v4 = *(char ***)(a1 + 10680);
    }
    *(void *)(a1 + 10688) = v2;
    operator delete(v4);
  }
  std::random_device::~random_device((std::random_device *)(a1 + 10672));
  std::random_device::~random_device((std::random_device *)(a1 + 8128));
  std::random_device::~random_device((std::random_device *)(a1 + 5608));
  std::random_device::~random_device((std::random_device *)(a1 + 3080));
  uint64_t v5 = *(void *)(a1 + 568);
  *(void *)(a1 + 568) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *(void *)(a1 + 504) = &unk_1EF0A7DB8;
  uint64_t v6 = *(void **)(a1 + 520);
  if (v6)
  {
    *(void *)(a1 + 528) = v6;
    operator delete(v6);
  }
  sub_19E2BEE60((void *)(a1 + 176));
  uint64_t v7 = *(void *)(a1 + 152);
  if (v7)
  {
    uint64_t v8 = *(void *)(a1 + 160);
    uint64_t v9 = *(void **)(a1 + 152);
    if (v8 != v7)
    {
      uint64_t v10 = *(void *)(a1 + 160);
      do
      {
        int64x2_t v12 = *(void **)(v10 - 56);
        v10 -= 56;
        long long v11 = v12;
        if (v12)
        {
          *(void *)(v8 - 48) = v11;
          operator delete(v11);
        }
        uint64_t v8 = v10;
      }
      while (v10 != v7);
      uint64_t v9 = *(void **)(a1 + 152);
    }
    *(void *)(a1 + 160) = v7;
    operator delete(v9);
  }
  *(void *)a1 = &unk_1EF0A8318;
  sub_19E2934EC(a1 + 32);
  float64x2_t v13 = *(char ***)(a1 + 8);
  if (v13)
  {
    float64x2_t v14 = *(char ***)(a1 + 16);
    float64x2_t v15 = *(void **)(a1 + 8);
    if (v14 != v13)
    {
      do
        float64x2_t v14 = sub_19E2470C8(v14 - 13);
      while (v14 != v13);
      float64x2_t v15 = *(void **)(a1 + 8);
    }
    *(void *)(a1 + 16) = v13;
    operator delete(v15);
  }
  return a1;
}

void sub_19E2DB51C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t *)(a1 + 96);
  uint64_t v4 = *(void *)(a1 + 96);
  int v6 = *(_DWORD *)(a1 + 120);
  int v7 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 120) = v6 + 1;
  *(_DWORD *)(a1 + 124) = v7;
  unint64_t v8 = v7 * (v6 + 1);
  unint64_t v9 = (*(void *)(a1 + 104) - v4) >> 3;
  if (v8 <= v9)
  {
    if (v8 < v9) {
      *(void *)(a1 + 104) = v4 + 8 * v8;
    }
  }
  else
  {
    sub_19E2482DC(a1 + 96, v8 - v9);
    int v6 = *(_DWORD *)(a1 + 120) - 1;
  }
  sub_19E29FAE8(a2, (uint64_t)__p);
  uint64_t v10 = *(int *)(a1 + 124);
  long long v11 = (char *)__p[0];
  if (!v10)
  {
    if (!__p[0]) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  uint64_t v12 = (int)v10 * (uint64_t)v6;
  uint64_t v13 = *v5;
  if (v10 >= 8 && (uint64_t v14 = 8 * v12 + v13, v14 - (unint64_t)__p[0] >= 0x20))
  {
    unint64_t v15 = v10 & 0xFFFFFFFFFFFFFFFCLL;
    double v20 = (long long *)((char *)__p[0] + 16);
    int v21 = (_OWORD *)(v14 + 16);
    unint64_t v22 = v10 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      long long v23 = *v20;
      *(v21 - 1) = *(v20 - 1);
      *int v21 = v23;
      v20 += 2;
      v21 += 2;
      v22 -= 4;
    }
    while (v22);
    if (v15 == v10) {
      goto LABEL_17;
    }
  }
  else
  {
    unint64_t v15 = 0;
  }
  uint64_t v16 = v10 - v15;
  uint64_t v17 = (void *)(v13 + 8 * (v15 + v12));
  double v18 = &v11[8 * v15];
  do
  {
    uint64_t v19 = *(void *)v18;
    v18 += 8;
    *v17++ = v19;
    --v16;
  }
  while (v16);
LABEL_17:
  __p[1] = v11;
  operator delete(v11);
LABEL_18:
  sub_19E2DB658(a1, 1, 1);
}

void sub_19E2DB658(uint64_t a1, int a2, int a3)
{
  if (a2)
  {
    uint64_t v5 = (void *)(a1 + 128);
    uint64_t v4 = *(void *)(a1 + 128);
    int v6 = *(_DWORD *)(a1 + 120);
    *(_DWORD *)(a1 + 152) = v6;
    unint64_t v7 = (*(void *)(a1 + 136) - v4) >> 3;
    uint64_t v35 = v6;
    if (v6 <= v7)
    {
      if (v6 < v7) {
        *(void *)(a1 + 136) = v4 + 8 * v6;
      }
    }
    else
    {
      sub_19E2482DC(a1 + 128, v6 - v7);
      int v6 = *(_DWORD *)(a1 + 120);
      uint64_t v35 = v6;
    }
    if (v6)
    {
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      while (1)
      {
        uint64_t v10 = *(void *)(a1 + 96);
        signed int v11 = *(_DWORD *)(a1 + 124);
        double __C = 0;
        unint64_t v41 = 0;
        uint64_t v42 = 0;
        if (v11) {
          break;
        }
        uint64_t v12 = 0;
        double v37 = 0;
        uint64_t v38 = 0;
        __p = 0;
        unsigned int v39 = 0;
LABEL_26:
        double __C = 0;
        vDSP_meanvD(*(const double **)(a1 + 288), 1, (double *)&__C, *(int *)(a1 + 312));
        *(void *)(*v5 + 8 * v9) = __C;
        if (__p)
        {
          double v37 = __p;
          operator delete(__p);
        }
        if (v12) {
          operator delete(v12);
        }
        ++v9;
        v8 += 8;
        if (v9 == v35) {
          goto LABEL_34;
        }
      }
      if (v11 < 0) {
        sub_19E13D694();
      }
      uint64_t v12 = operator new(8 * v11);
      bzero(v12, 8 * v11);
      if (v11 >= 8 && (unint64_t)v12 - v10 - 8 * v9 * v11 >= 0x20)
      {
        unint64_t v13 = v11 & 0xFFFFFFFFFFFFFFFCLL;
        uint64_t v28 = (long long *)(v10 + v8 * v11 + 16);
        unsigned int v29 = v12 + 1;
        unint64_t v30 = v13;
        do
        {
          long long v31 = *v28;
          *(v29 - 1) = *(v28 - 1);
          *unsigned int v29 = v31;
          v28 += 2;
          v29 += 2;
          v30 -= 4;
        }
        while (v30);
        if (v13 == v11)
        {
LABEL_16:
          __p = 0;
          double v37 = 0;
          uint64_t v38 = 0;
          unsigned int v39 = v11;
          sub_19E2482DC((uint64_t)&__p, v11);
          uint64_t v19 = v39;
          if ((int)v39 >= 1)
          {
            uint64_t v20 = 0;
            int v21 = (char *)__p;
            if (v39 < 4) {
              goto LABEL_22;
            }
            if ((unint64_t)((unsigned char *)__p - (unsigned char *)v12) < 0x20) {
              goto LABEL_22;
            }
            unint64_t v22 = 0;
            uint64_t v20 = v39 & 0xFFFFFFFC;
            uint64_t v23 = (8 * v39) & 0x7FFFFFFE0;
            do
            {
              long long v24 = v12[v22 / 0x10 + 1];
              unsigned int v25 = &v21[v22];
              *(_OWORD *)unsigned int v25 = v12[v22 / 0x10];
              *((_OWORD *)v25 + 1) = v24;
              v22 += 32;
            }
            while (v23 != v22);
            if (v20 != v19)
            {
LABEL_22:
              uint64_t v26 = v19 - v20;
              uint64_t v27 = v20 << 32;
              do
              {
                *(void *)&v21[v27 >> 29] = *(void *)((char *)v12 + (v27 >> 29));
                v27 += 0x100000000;
                --v26;
              }
              while (v26);
            }
          }
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v13 = 0;
      }
      unint64_t v14 = v11 - v13;
      uint64_t v15 = 8 * v13;
      uint64_t v16 = (void *)v12 + v13;
      uint64_t v17 = (uint64_t *)(v10 + v15 + v8 * v11);
      do
      {
        uint64_t v18 = *v17++;
        *v16++ = v18;
        --v14;
      }
      while (v14);
      goto LABEL_16;
    }
  }
LABEL_34:
  sub_19E2DB9D8(a1 + 8, (uint64_t *)(a1 + 96), (uint64_t)&__C);
  if ((char **)(a1 + 160) != &__C) {
    sub_19E1E5B9C((void *)(a1 + 160), __C, v41, (v41 - __C) >> 3);
  }
  uint64_t v32 = __C;
  *(void *)(a1 + 184) = v43;
  if (v32)
  {
    unint64_t v41 = v32;
    operator delete(v32);
  }
  sub_19E2A4E4C(a1 + 160, (uint64_t)&__C);
  if ((char **)(a1 + 192) != &__C) {
    sub_19E1E5B9C((void *)(a1 + 192), __C, v41, (v41 - __C) >> 3);
  }
  uint64_t v33 = __C;
  *(void *)(a1 + 216) = v43;
  if (v33)
  {
    unint64_t v41 = v33;
    operator delete(v33);
  }
  sub_19E2DBEA8(a1);
  if (a3) {
    sub_19E2DC0CC((int32x2_t *)a1);
  }
}

void sub_19E2DB974(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2DB9D8(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *((unsigned int *)a2 + 6);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  if (!v4)
  {
    unint64_t v7 = 0;
    *(_DWORD *)(a3 + 24) = 0;
    *(_DWORD *)(a3 + 28) = 0;
LABEL_41:
    uint64_t v42 = (int)v4;
    if (v4) {
      goto LABEL_42;
    }
    return;
  }
  size_t v6 = 8 * (v4 * v4);
  unint64_t v7 = (char *)operator new(v6);
  *(void *)a3 = v7;
  *(void *)(a3 + 16) = &v7[v6];
  bzero(v7, v6);
  *(void *)(a3 + 8) = &v7[v6];
  *(_DWORD *)(a3 + 24) = v4;
  *(_DWORD *)(a3 + 28) = v4;
  if ((int)v4 <= 0) {
    goto LABEL_41;
  }
  uint64_t v52 = 0;
  uint64_t v8 = 0;
  uint64_t v55 = 1;
  uint64_t v48 = v4;
  uint64_t v50 = a1;
  do
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v49 = 8 * v8;
    uint64_t v54 = (int)v8 * v4;
    uint64_t v51 = v8;
    do
    {
      uint64_t v11 = *a2;
      signed int v12 = *((_DWORD *)a2 + 7);
      __p = 0;
      BOOL v61 = 0;
      long long v62 = 0;
      if (v12)
      {
        if (v12 < 0) {
          sub_19E13D694();
        }
        unint64_t v13 = v7;
        size_t v14 = 8 * v12;
        uint64_t v15 = operator new(v14);
        bzero(v15, v14);
        if (v12 < 8 || (unint64_t)v15 - v11 - v49 * v12 < 0x20)
        {
          unint64_t v16 = 0;
          goto LABEL_12;
        }
        unint64_t v16 = v12 & 0xFFFFFFFFFFFFFFFCLL;
        BOOL v34 = (long long *)(v11 + v52 * v12 + 16);
        uint64_t v35 = v15 + 1;
        unint64_t v36 = v16;
        do
        {
          long long v37 = *v34;
          *(v35 - 1) = *(v34 - 1);
          _OWORD *v35 = v37;
          v34 += 2;
          v35 += 2;
          v36 -= 4;
        }
        while (v36);
        if (v16 != v12)
        {
LABEL_12:
          unint64_t v17 = v12 - v16;
          uint64_t v18 = 8 * v16;
          uint64_t v19 = (void *)v15 + v16;
          uint64_t v20 = (uint64_t *)(v11 + v18 + v52 * v12);
          do
          {
            uint64_t v21 = *v20++;
            *v19++ = v21;
            --v17;
          }
          while (v17);
        }
        signed int v56 = 0;
        double v57 = 0;
        signed int v59 = 0;
        uint64_t v58 = 0;
        signed int v56 = operator new(8 * v12);
        double v57 = (char *)v56 + v14;
        uint64_t v58 = (char *)v56 + 8 * v12;
        signed int v59 = v12;
        memcpy(v56, v15, 8 * v12);
        unint64_t v22 = operator new(8 * v12);
        bzero(v22, 8 * v12);
        if (v12 < 8 || (unint64_t)v22 - v11 - 8 * v10 * v12 < 0x20)
        {
          unint64_t v23 = 0;
          goto LABEL_17;
        }
        unint64_t v23 = v12 & 0xFFFFFFFFFFFFFFFCLL;
        uint64_t v38 = (long long *)(v11 + v9 * v12 + 16);
        unsigned int v39 = v22 + 1;
        unint64_t v40 = v23;
        do
        {
          long long v41 = *v38;
          *(v39 - 1) = *(v38 - 1);
          *unsigned int v39 = v41;
          v38 += 2;
          v39 += 2;
          v40 -= 4;
        }
        while (v40);
        if (v23 != v12)
        {
LABEL_17:
          unint64_t v24 = v12 - v23;
          uint64_t v25 = 8 * v23;
          uint64_t v26 = (void *)v22 + v23;
          uint64_t v27 = (uint64_t *)(v11 + v25 + v9 * v12);
          do
          {
            uint64_t v28 = *v27++;
            *v26++ = v28;
            --v24;
          }
          while (v24);
        }
        __p = 0;
        BOOL v61 = 0;
        signed int v63 = 0;
        long long v62 = 0;
        uint64_t v29 = (int)v10;
        __p = operator new(8 * v12);
        BOOL v61 = (char *)__p + v14;
        long long v62 = (char *)__p + 8 * v12;
        signed int v63 = v12;
        memcpy(__p, v22, 8 * v12);
        unint64_t v7 = v13;
        a1 = v50;
        uint64_t v8 = v51;
        goto LABEL_21;
      }
      uint64_t v15 = 0;
      unint64_t v22 = 0;
      double v57 = 0;
      uint64_t v58 = 0;
      signed int v56 = 0;
      signed int v59 = 0;
      uint64_t v29 = (int)v10;
      __p = 0;
      BOOL v61 = 0;
      signed int v63 = 0;
      long long v62 = 0;
LABEL_21:
      double v30 = sub_19E2D8240(a1, (uint64_t)&v56, (uint64_t)&__p);
      double v31 = *(double *)(a1 + 16);
      double v33 = (v30 + 1.0 + v32) * (exp(-v30) * v31);
      if (v8 == v10) {
        double v33 = v33 + *(double *)(a1 + 8) + 1.0e-10;
      }
      *(double *)&v7[8 * v29 + 8 * v54] = v33;
      if (__p)
      {
        BOOL v61 = (char *)__p;
        operator delete(__p);
      }
      if (v22) {
        operator delete(v22);
      }
      if (v56)
      {
        double v57 = (char *)v56;
        operator delete(v56);
      }
      if (v15) {
        operator delete(v15);
      }
      ++v10;
      v9 += 8;
    }
    while (v10 != v55);
    ++v8;
    ++v55;
    v52 += 8;
    uint64_t v4 = v48;
  }
  while (v8 != v48);
  uint64_t v42 = v48;
LABEL_42:
  if (v42 != 1)
  {
    uint64_t v43 = 0;
    uint64_t v44 = 8 * v42;
    uint64_t v45 = v7;
    do
    {
      if (v43)
      {
        uint64_t v46 = 0;
        long long v47 = v45;
        do
        {
          *long long v47 = *(void *)&v7[8 * v46++];
          long long v47 = (void *)((char *)v47 + v44);
        }
        while (v43 != v46);
      }
      ++v43;
      ++v45;
      v7 += v44;
    }
    while (v43 != v42);
  }
}

void sub_19E2DBE0C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E13A9BC(a1);
}

void sub_19E2DBE34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
  {
    operator delete(__p);
    if (!v25)
    {
LABEL_3:
      uint64_t v28 = a18;
      if (!a18) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if (!v25)
  {
    goto LABEL_3;
  }
  operator delete(v25);
  uint64_t v28 = a18;
  if (!a18)
  {
LABEL_4:
    if (!v23) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  operator delete(v28);
  if (!v23)
  {
LABEL_5:
    *(void *)(v26 + 8) = v24;
    operator delete(v24);
    _Unwind_Resume(a1);
  }
LABEL_9:
  operator delete(v23);
  *(void *)(v26 + 8) = v24;
  operator delete(v24);
  _Unwind_Resume(a1);
}

void sub_19E2DBEA8(uint64_t a1)
{
  sub_19E29F880(a1 + 192, (uint64_t)v22);
  uint64_t v2 = *(unsigned int *)(a1 + 216);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 0;
    int v4 = *(_DWORD *)(a1 + 220);
    int v5 = v23;
    int v6 = 1;
    int v7 = -1;
    uint64_t v8 = v22[0];
    do
    {
      if (v4 <= v6) {
        int v9 = v6;
      }
      else {
        int v9 = v4;
      }
      int v10 = v3 + 1;
      if ((int)v3 + 1 >= v4) {
        goto LABEL_3;
      }
      unsigned int v11 = 0;
      int v12 = v9 + v7;
      uint64_t v13 = (int)v3 * (uint64_t)v5;
      if ((v9 + v7) < 4)
      {
        int v14 = v3 + 1;
      }
      else
      {
        int v14 = v3 + 1;
        if (v9 - (int)v3 + v6 - 2 >= v6)
        {
          int v15 = 0;
          unsigned int v11 = v12 & 0xFFFFFFFC;
          int v14 = v10 + (v12 & 0xFFFFFFFC);
          do
          {
            unint64_t v16 = &v8[v13 + v6 + v15];
            *unint64_t v16 = 0uLL;
            v16[1] = 0uLL;
            v15 += 4;
          }
          while ((v12 & 0xFFFFFFFC) != v15);
          if (v12 == v11) {
            goto LABEL_3;
          }
        }
      }
      unsigned int v17 = v9 - v11;
      do
      {
        v8[v13 + v14] = 0;
        int v14 = ++v11 + v10;
        --v17;
      }
      while (v6 != v17);
LABEL_3:
      ++v3;
      ++v6;
      --v7;
    }
    while (v3 != v2);
  }
  sub_19E2DC334(a1, (uint64_t)v18);
  sub_19E29F6FC((uint64_t)v22, (uint64_t)v18, (uint64_t)&__p);
  if ((void **)(a1 + 256) != &__p) {
    sub_19E1E5B9C((void *)(a1 + 256), (char *)__p, v20, (v20 - (unsigned char *)__p) >> 3);
  }
  *(_DWORD *)(a1 + 280) = v21;
  if (__p)
  {
    uint64_t v20 = (char *)__p;
    operator delete(__p);
  }
  if (v18[0])
  {
    v18[1] = v18[0];
    operator delete(v18[0]);
  }
  sub_19E29FC64((uint64_t)v22, &__p);
  sub_19E2A58A8((uint64_t)&__p, a1 + 256);
  if (__p)
  {
    uint64_t v20 = (char *)__p;
    operator delete(__p);
  }
  if (v22[0])
  {
    v22[1] = v22[0];
    operator delete(v22[0]);
  }
}

void sub_19E2DC068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  if (a17) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2DC0CC(int32x2_t *a1)
{
  uint64_t v2 = a1[15].u32[0];
  sub_19E242424(v2, v2, (uint64_t)&__p);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = v29.i32[1] + 1;
    int v4 = __p;
    if (v2 == 1)
    {
      uint64_t v5 = 0;
LABEL_7:
      uint64_t v8 = v2 - v5;
      uint64_t v9 = v5 << 32;
      do
      {
        v4[(v9 >> 32) * v3] = 0x3FF0000000000000;
        v9 += 0x100000000;
        --v8;
      }
      while (v8);
      goto LABEL_9;
    }
    uint64_t v6 = 0;
    uint64_t v5 = v2 & 0xFFFFFFFE;
    uint64_t v7 = v5;
    do
    {
      v4[(v6 >> 32) * v3] = 0x3FF0000000000000;
      v4[((v6 >> 32) | 1) * v3] = 0x3FF0000000000000;
      v6 += 0x200000000;
      v7 -= 2;
    }
    while (v7);
    if (v5 != v2) {
      goto LABEL_7;
    }
  }
LABEL_9:
  if (&a1[28] != (int32x2_t *)&__p) {
    sub_19E1E5B9C(&a1[28], (char *)__p, v28, (v28 - (unsigned char *)__p) >> 3);
  }
  int v10 = (char *)__p;
  a1[31] = v29;
  if (v10)
  {
    uint64_t v28 = v10;
    operator delete(v10);
  }
  sub_19E29F880((uint64_t)&a1[24], (uint64_t)&__p);
  uint64_t v11 = a1[27].u32[0];
  if ((int)v11 >= 1)
  {
    uint64_t v12 = 0;
    int v13 = a1[27].i32[1];
    __int32 v14 = v29.i32[1];
    int v15 = 1;
    int v16 = -1;
    unsigned int v17 = __p;
    do
    {
      if (v13 <= v15) {
        int v18 = v15;
      }
      else {
        int v18 = v13;
      }
      int v19 = v12 + 1;
      if ((int)v12 + 1 >= v13) {
        goto LABEL_15;
      }
      unsigned int v20 = 0;
      int v21 = v18 + v16;
      uint64_t v22 = (int)v12 * (uint64_t)v14;
      if ((v18 + v16) < 4)
      {
        int v23 = v12 + 1;
      }
      else
      {
        int v23 = v12 + 1;
        if (v18 - (int)v12 + v15 - 2 >= v15)
        {
          int v24 = 0;
          unsigned int v20 = v21 & 0xFFFFFFFC;
          int v23 = v19 + (v21 & 0xFFFFFFFC);
          do
          {
            uint64_t v25 = &v17[v22 + v15 + v24];
            _OWORD *v25 = 0uLL;
            v25[1] = 0uLL;
            v24 += 4;
          }
          while ((v21 & 0xFFFFFFFC) != v24);
          if (v21 == v20) {
            goto LABEL_15;
          }
        }
      }
      unsigned int v26 = v18 - v20;
      do
      {
        v17[v22 + v23] = 0;
        int v23 = ++v20 + v19;
        --v26;
      }
      while (v15 != v26);
LABEL_15:
      ++v12;
      ++v15;
      --v16;
    }
    while (v12 != v11);
  }
  sub_19E2A59C0((uint64_t)&__p, a1 + 28);
  if (__p)
  {
    uint64_t v28 = (char *)__p;
    operator delete(__p);
  }
  sub_19E29FC64((uint64_t)&a1[24], &__p);
  sub_19E2A59C0((uint64_t)&__p, a1 + 28);
  if (__p)
  {
    uint64_t v28 = (char *)__p;
    operator delete(__p);
  }
}

void sub_19E2DC310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2DC334(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  signed int v4 = *(_DWORD *)(a1 + 312);
  uint64_t v5 = 8 * v4;
  if (v4)
  {
    if (v4 < 0) {
      sub_19E13D694();
    }
    uint64_t v6 = (char *)operator new(8 * v4);
    bzero(v6, 8 * v4);
    unint64_t v7 = 0;
    uint64_t v8 = &v6[v5];
    uint64_t v9 = *(void *)(a1 + 288);
    if (v4 < 4) {
      goto LABEL_48;
    }
    if ((unint64_t)&v6[-v9] < 0x20) {
      goto LABEL_48;
    }
    uint64_t v10 = 0;
    unint64_t v7 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v11 = v7;
    do
    {
      long long v12 = *(_OWORD *)(v9 + v10 + 16);
      int v13 = &v6[v10];
      *(_OWORD *)int v13 = *(_OWORD *)(v9 + v10);
      *((_OWORD *)v13 + 1) = v12;
      v10 += 32;
      v11 -= 4;
    }
    while (v11);
    if (v7 != v4)
    {
LABEL_48:
      do
      {
        *(void *)&v6[8 * v7] = *(void *)(v9 + 8 * v7);
        ++v7;
      }
      while (v4 != v7);
    }
    uint64_t v14 = *(int *)(a1 + 152);
    if (v14) {
      goto LABEL_10;
    }
LABEL_19:
    int v15 = 0;
    goto LABEL_20;
  }
  uint64_t v8 = 0;
  uint64_t v6 = 0;
  uint64_t v14 = *(int *)(a1 + 152);
  if (!v14) {
    goto LABEL_19;
  }
LABEL_10:
  if ((v14 & 0x80000000) != 0) {
    sub_19E13D694();
  }
  int v15 = (char *)operator new(8 * v14);
  bzero(v15, 8 * v14);
  unint64_t v16 = 0;
  uint64_t v17 = *(void *)(a1 + 128);
  if (v14 < 4) {
    goto LABEL_49;
  }
  if ((unint64_t)&v15[-v17] < 0x20) {
    goto LABEL_49;
  }
  uint64_t v18 = 0;
  unint64_t v16 = v14 & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v19 = v14 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    long long v20 = *(_OWORD *)(v17 + v18 + 16);
    int v21 = &v15[v18];
    *(_OWORD *)int v21 = *(_OWORD *)(v17 + v18);
    *((_OWORD *)v21 + 1) = v20;
    v18 += 32;
    v19 -= 4;
  }
  while (v19);
  if (v16 != v14)
  {
LABEL_49:
    do
    {
      *(void *)&v15[8 * v16] = *(void *)(v17 + 8 * v16);
      ++v16;
    }
    while (v14 != v16);
  }
LABEL_20:
  vDSP_vsubD((const double *)v15, 1, (const double *)v6, 1, (double *)v6, 1, v4);
  if (v8 != v6)
  {
    if (v8 - v6 < 0) {
      sub_19E13D694();
    }
    uint64_t v22 = (char *)operator new(v8 - v6);
    memcpy(v22, v6, v8 - v6);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)a2 = 0;
    if (!v4)
    {
      *(_DWORD *)(a2 + 24) = 0;
      operator delete(v22);
      if (!v15) {
        goto LABEL_35;
      }
LABEL_34:
      operator delete(v15);
      goto LABEL_35;
    }
LABEL_26:
    if (v4 < 0) {
      sub_19E13D694();
    }
    int v23 = (char *)operator new(8 * v4);
    *(void *)a2 = v23;
    *(void *)(a2 + 16) = &v23[8 * v4];
    bzero(v23, 8 * v4);
    *(void *)(a2 + 8) = &v23[v5];
    *(_DWORD *)(a2 + 24) = v4;
    if (v4 >= 4)
    {
      uint64_t v25 = 0;
      unint64_t v24 = v4 & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v26 = v24;
      do
      {
        long long v27 = *(_OWORD *)&v22[v25 + 16];
        uint64_t v28 = &v23[v25];
        *(_OWORD *)uint64_t v28 = *(_OWORD *)&v22[v25];
        *((_OWORD *)v28 + 1) = v27;
        v25 += 32;
        v26 -= 4;
      }
      while (v26);
      if (v24 == v4)
      {
LABEL_33:
        operator delete(v22);
        if (!v15) {
          goto LABEL_35;
        }
        goto LABEL_34;
      }
    }
    else
    {
      unint64_t v24 = 0;
    }
    do
    {
      *(void *)&v23[8 * v24] = *(void *)&v22[8 * v24];
      ++v24;
    }
    while (v4 != v24);
    goto LABEL_33;
  }
  uint64_t v22 = 0;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  if (v4) {
    goto LABEL_26;
  }
  *(_DWORD *)(a2 + 24) = 0;
  if (v15) {
    goto LABEL_34;
  }
LABEL_35:
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_19E2DC66C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (v19)
  {
    operator delete(v19);
    if (!v18) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if (!v18)
  {
    goto LABEL_3;
  }
  operator delete(v18);
  _Unwind_Resume(exception_object);
}

void sub_19E2DC6D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  if (a9) {
    operator delete(a9);
  }
  sub_19E13A9BC(a1);
}

void sub_19E2DC6E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13) {
    JUMPOUT(0x19E2DC6F4);
  }
  JUMPOUT(0x19E2DC6F8);
}

void sub_19E2DC700(uint64_t a1, uint64_t a2)
{
  uint64_t v32 = a2;
  sub_19E2A099C((uint64_t)&v31, *(_DWORD *)(a2 + 8) + 1);
  sub_19E248FE0((uint64_t)v29, *(_DWORD *)(a2 + 8) + 1);
  uint64_t v3 = (char *)v29[0];
  *(void *)v29[0] = 0xC01E000000000000;
  signed int v4 = (char *)__p[0];
  *(void *)__p[0] = 0x401E000000000000;
  uint64_t v5 = *(unsigned int *)(a2 + 56);
  if ((int)v5 >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 1;
    if (v5 < 6) {
      goto LABEL_7;
    }
    if ((unint64_t)(v4 - v3) < 0x20) {
      goto LABEL_7;
    }
    uint64_t v6 = v5 & 0x7FFFFFFC;
    uint64_t v7 = v5 & 0xFFFFFFFC | 1;
    uint64_t v8 = v4 + 24;
    uint64_t v9 = v3 + 24;
    __asm
    {
      FMOV            V0.2D, #-10.0
      FMOV            V1.2D, #10.0
    }
    uint64_t v16 = v5 & 0xFFFFFFFC;
    do
    {
      *(v9 - 1) = _Q0;
      *uint64_t v9 = _Q0;
      *(v8 - 1) = _Q1;
      *uint64_t v8 = _Q1;
      v8 += 2;
      v9 += 2;
      v16 -= 4;
    }
    while (v16);
    if (v6 != v5)
    {
LABEL_7:
      uint64_t v17 = v5 - v6;
      uint64_t v18 = &v4[8 * v7];
      unint64_t v19 = &v3[8 * v7];
      do
      {
        *(void *)unint64_t v19 = 0xC024000000000000;
        v19 += 8;
        *(void *)uint64_t v18 = 0x4024000000000000;
        v18 += 8;
        --v17;
      }
      while (v17);
    }
  }
  sub_19E2A16E8((uint64_t)&v31, (uint64_t *)v29);
  sub_19E2A1818((uint64_t)&v31, (uint64_t *)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v29[0])
  {
    v29[1] = v29[0];
    operator delete(v29[0]);
  }
  int v21 = *(unsigned char **)(a2 + 64);
  long long v20 = *(unsigned char **)(a2 + 72);
  uint64_t v25 = 0;
  unint64_t v26 = 0;
  long long v27 = 0;
  int64_t v22 = v20 - v21;
  if (v20 != v21)
  {
    if (v22 < 0) {
      sub_19E13D694();
    }
    int v23 = (char *)operator new(v20 - v21);
    unint64_t v24 = &v23[8 * (v22 >> 3)];
    uint64_t v25 = v23;
    long long v27 = v24;
    memcpy(v23, v21, v22);
    unint64_t v26 = v24;
  }
  int v28 = *(_DWORD *)(a2 + 88);
  sub_19E2DCAA4((uint64_t)&v31, (uint64_t)&v32, (uint64_t)&v25);
}

void sub_19E2DCA1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  if (__p)
  {
    operator delete(__p);
    sub_19E2A0A3C(&a29);
    _Unwind_Resume(a1);
  }
  sub_19E2A0A3C(&a29);
  _Unwind_Resume(a1);
}

void sub_19E2DCA88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
}

void sub_19E2DCAA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a1 + 112)) {
    (**(void (***)(uint64_t, void))a1)(a1, *(unsigned int *)(a3 + 24));
  }
  operator new();
}

void sub_19E2DCF38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  __cxa_free_exception(v15);
  if (a2 != 3)
  {
    if (a2 == 2)
    {
      unint64_t v19 = __cxa_begin_catch(a1);
      (*(void (**)(void *))(*(void *)v19 + 16))(v19);
      sub_19E29FAE8(v14, (uint64_t)&a13);
      if (a13)
      {
        a14 = (uint64_t)a13;
        operator delete(a13);
      }
      __cxa_end_catch();
LABEL_13:
      JUMPOUT(0x19E2DCD20);
    }
    if (a2 != 1)
    {
      if (__p) {
        operator delete(__p);
      }
      _Unwind_Resume(a1);
    }
  }
  uint64_t v18 = __cxa_begin_catch(a1);
  (*(void (**)(void *))(*(void *)v18 + 16))(v18);
  __cxa_end_catch();
  goto LABEL_13;
}

double sub_19E2DD088(uint64_t **a1, uint64_t *a2, int **a3)
{
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v7 = (char *)v5 - (char *)*a1;
  long long v41 = 0;
  uint64_t v42 = 0;
  unint64_t v40 = 0;
  int v43 = 0;
  double v33 = 0.0;
  __p = 0;
  uint64_t v35 = 0;
  if (!(v7 >> 3))
  {
    uint64_t v8 = 0;
    unint64_t v40 = 0;
    long long v41 = 0;
    uint64_t v42 = 0;
    int v43 = v7 >> 3;
    if (v6 == v5) {
      goto LABEL_13;
    }
    goto LABEL_6;
  }
  if (((v7 >> 3) & 0x80000000) != 0) {
    sub_19E13D694();
  }
  uint64_t v8 = operator new((uint64_t)(v7 << 29) >> 29);
  bzero(v8, (uint64_t)(v7 << 29) >> 29);
  unint64_t v40 = v8;
  long long v41 = (char *)v8 + ((uint64_t)(v7 << 29) >> 29);
  uint64_t v42 = (char *)v8 + 8 * (int)((uint64_t)v7 >> 3);
  int v43 = v7 >> 3;
  if (v6 != v5)
  {
LABEL_6:
    uint64_t v9 = 0;
    if (v7 - 8 < 0x18) {
      goto LABEL_11;
    }
    if ((unint64_t)((char *)v8 - (char *)v6) < 0x20) {
      goto LABEL_11;
    }
    unint64_t v10 = ((v7 - 8) >> 3) + 1;
    uint64_t v9 = v10 & 0x3FFFFFFFFFFFFFFCLL;
    unint64_t v11 = v8 + 1;
    long long v12 = (long long *)(v6 + 2);
    uint64_t v13 = v10 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v14 = *v12;
      *(v11 - 1) = *(v12 - 1);
      *unint64_t v11 = v14;
      v11 += 2;
      v12 += 2;
      v13 -= 4;
    }
    while (v13);
    v6 += v10 & 0x3FFFFFFFFFFFFFFCLL;
    if (v10 != v9)
    {
LABEL_11:
      int v15 = (void *)v8 + v9;
      do
      {
        uint64_t v16 = *v6++;
        *v15++ = v16;
      }
      while (v6 != v5);
    }
  }
LABEL_13:
  if (*a2 == a2[1])
  {
    sub_19E2DD380(a3, (uint64_t)&v40, 0, (uint64_t)&v33);
    double v17 = v33;
    if (v36)
    {
      uint64_t v31 = __p;
      if (__p)
      {
        uint64_t v35 = __p;
        goto LABEL_31;
      }
    }
  }
  else
  {
    LOBYTE(v37[0]) = 0;
    char v39 = 0;
    sub_19E2DD380(a3, (uint64_t)&v40, 1, (uint64_t)&v33);
    double v17 = v33;
    sub_19E2A7CB8((uint64_t)v37, (uint64_t)&__p);
    if (v36 && __p)
    {
      uint64_t v35 = __p;
      operator delete(__p);
    }
    uint64_t v18 = v38;
    if (v38)
    {
      unint64_t v19 = 0;
      uint64_t v20 = v37[0];
      uint64_t v21 = *a2;
      if (v38 < 4) {
        goto LABEL_23;
      }
      if ((unint64_t)(v21 - v37[0]) < 0x20) {
        goto LABEL_23;
      }
      unint64_t v19 = v38 & 0xFFFFFFFFFFFFFFFCLL;
      int64_t v22 = (long long *)(v37[0] + 16);
      int v23 = (_OWORD *)(v21 + 16);
      unint64_t v24 = v19;
      do
      {
        long long v25 = *v22;
        *(v23 - 1) = *(v22 - 1);
        _OWORD *v23 = v25;
        v22 += 2;
        v23 += 2;
        v24 -= 4;
      }
      while (v24);
      if (v19 != v18)
      {
LABEL_23:
        uint64_t v26 = v18 - v19;
        uint64_t v27 = 8 * v19;
        int v28 = (void *)(v21 + 8 * v19);
        int32x2_t v29 = (uint64_t *)(v20 + v27);
        do
        {
          uint64_t v30 = *v29++;
          *v28++ = v30;
          --v26;
        }
        while (v26);
      }
    }
    if (v39)
    {
      uint64_t v31 = (void *)v37[0];
      if (v37[0])
      {
        v37[1] = v37[0];
LABEL_31:
        operator delete(v31);
      }
    }
  }
  if (v40)
  {
    long long v41 = (char *)v40;
    operator delete(v40);
  }
  return v17;
}

void sub_19E2DD308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,void *__p,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2DD364(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E13A9BC(a1);
}

void *sub_19E2DD380@<X0>(int **a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  sub_19E2DE524((uint64_t)&v31, *a1);
  if (v35 != (void *)a2) {
    sub_19E1E5B9C(v35, *(char **)a2, *(char **)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  }
  int v36 = *(_DWORD *)(a2 + 24);
  unint64_t v7 = *(char **)a2;
  long double v33 = exp(*(double *)v7 + *(double *)v7);
  unint64_t v8 = v32;
  if (v32)
  {
    uint64_t v9 = v34;
    if (v32 < 4 || (unint64_t)(v34 - v7 - 8) < 0x10)
    {
      unint64_t v10 = 0;
LABEL_7:
      unint64_t v11 = (double *)&v7[8 * v10 + 8];
      long long v12 = (long double *)&v9[8 * v10];
      unint64_t v13 = v8 - v10;
      do
      {
        long double v14 = *v11++;
        *v12++ = exp(v14);
        --v13;
      }
      while (v13);
      goto LABEL_9;
    }
    unint64_t v10 = v32 & 0xFFFFFFFFFFFFFFFELL;
    int64_t v22 = (long long *)(v7 + 8);
    unint64_t v23 = v32 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v34;
    do
    {
      long long v25 = *v22++;
      long double v27 = exp(*((long double *)&v25 + 1));
      *(double *)&long long v26 = exp(*(long double *)&v25);
      *((long double *)&v26 + 1) = v27;
      *(_OWORD *)unint64_t v24 = v26;
      v24 += 16;
      v23 -= 2;
    }
    while (v23);
    if (v8 != v10) {
      goto LABEL_7;
    }
  }
LABEL_9:
  sub_19E2DB658((uint64_t)&v31, 0, a3);
  double v15 = sub_19E2DD5FC((uint64_t)&v31);
  double v16 = v15;
  if (a3)
  {
    sub_19E2DD82C((uint64_t)&v31, (uint64_t)&v28);
    *(void *)(a4 + 8) = 0;
    *(double *)a4 = v16;
    *(void *)(a4 + 16) = 0;
    *(void *)(a4 + 24) = 0;
    double v17 = v28;
    int64_t v18 = v29 - v28;
    if (v29 != v28)
    {
      if (v18 < 0) {
        sub_19E13D694();
      }
      unint64_t v19 = (char *)operator new(v29 - v28);
      *(void *)(a4 + 8) = v19;
      uint64_t v20 = &v19[8 * (v18 >> 3)];
      *(void *)(a4 + 24) = v20;
      memcpy(v19, v17, v18);
      *(void *)(a4 + 16) = v20;
    }
    *(_DWORD *)(a4 + 32) = v30;
    *(unsigned char *)(a4 + 40) = 1;
    if (v17)
    {
      int32x2_t v29 = v17;
      operator delete(v17);
    }
  }
  else
  {
    *(double *)a4 = v15;
    *(unsigned char *)(a4 + 8) = 0;
    *(unsigned char *)(a4 + 40) = 0;
  }
  return sub_19E2BEE60(&v31);
}

void sub_19E2DD574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_19E2BEE60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19E2DD588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v21 = *v19;
  if (*v19)
  {
    *(void *)(v18 + 16) = v21;
    operator delete(v21);
    int64_t v22 = __p;
    if (!__p)
    {
LABEL_3:
      sub_19E2BEE60(&a18);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    int64_t v22 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  operator delete(v22);
  sub_19E2BEE60(&a18);
  _Unwind_Resume(a1);
}

void sub_19E2DD5D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_19E2BEE60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19E2DD5E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_19E2BEE60((uint64_t *)va);
  _Unwind_Resume(a1);
}

double sub_19E2DD5FC(uint64_t a1)
{
  sub_19E2DC334(a1, (uint64_t)&__A);
  __C[0] = 0;
  vDSP_dotprD(__A, 1, *(const double **)(a1 + 256), 1, (double *)__C, (int)__N);
  uint64_t v2 = __C[0];
  if (__A)
  {
    double v17 = __A;
    operator delete(__A);
  }
  uint64_t v3 = *(int *)(a1 + 220);
  if ((int)v3 >= *(_DWORD *)(a1 + 216)) {
    int v4 = *(_DWORD *)(a1 + 216);
  }
  else {
    int v4 = *(_DWORD *)(a1 + 220);
  }
  __A = 0;
  double v17 = 0;
  uint64_t v18 = 0;
  if (v4)
  {
    if (v4 < 0) {
      sub_19E13D694();
    }
    uint64_t v5 = operator new(8 * v4);
    bzero(v5, 8 * v4);
    uint64_t v6 = 0;
    unint64_t v7 = *(void **)(a1 + 192);
    do
    {
      *((void *)v5 + v6++) = *v7;
      v7 += v3 + 1;
    }
    while (v4 != v6);
    __p = operator new(8 * v4);
    unint64_t v11 = (char *)__p + 8 * v4;
    long long v12 = v11;
    int v13 = v4;
    memcpy(__p, v5, 8 * v4);
  }
  else
  {
    uint64_t v5 = 0;
    unint64_t v11 = 0;
    long long v12 = 0;
    __p = 0;
    int v13 = 0;
  }
  sub_19E2A7AC4((uint64_t)&__p, (uint64_t)__C);
  __A = 0;
  vDSP_sveD((const double *)__C[0], 1, (double *)&__A, (int)v15);
  unint64_t v8 = __A;
  if (__C[0])
  {
    __C[1] = __C[0];
    operator delete(__C[0]);
  }
  if (__p)
  {
    unint64_t v11 = (char *)__p;
    operator delete(__p);
  }
  if (v5) {
    operator delete(v5);
  }
  return (double)*(int *)(a1 + 120) * -0.918938533 - (*(double *)&v8 - *(double *)&v2 * -0.5);
}

void sub_19E2DD7A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v20 = a9;
    if (!a9)
    {
LABEL_3:
      if (!v18) {
LABEL_8:
      }
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(v18);
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v20 = a9;
    if (!a9) {
      goto LABEL_3;
    }
  }
  operator delete(v20);
  if (!v18) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void sub_19E2DD810(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E13A9BC(a1);
}

void sub_19E2DD82C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  CFTypeRef v121 = 0;
  uint64_t v122 = 0;
  int v123 = 0;
  uint64_t v3 = *(unsigned char **)(a1 + 224);
  uint64_t v2 = *(unsigned char **)(a1 + 232);
  int64_t v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0) {
      sub_19E13D694();
    }
    uint64_t v5 = (double *)operator new(v2 - v3);
    uint64_t v6 = &v5[v4 >> 3];
    CFTypeRef v121 = v5;
    int v123 = v6;
    memcpy(v5, v3, v4);
    uint64_t v122 = v6;
  }
  unint64_t v7 = *(unsigned char **)(a1 + 256);
  unint64_t v124 = *(void *)(a1 + 248);
  unint64_t v106 = 0;
  long long v107 = 0;
  uint64_t v105 = 0;
  unint64_t v8 = *(unsigned char **)(a1 + 264);
  int64_t v9 = v8 - v7;
  if (v8 != v7)
  {
    if (v9 < 0) {
      sub_19E13D694();
    }
    unint64_t v10 = (char *)operator new(v8 - v7);
    unint64_t v11 = &v10[8 * (v9 >> 3)];
    uint64_t v105 = v10;
    long long v107 = v11;
    memcpy(v10, v7, v9);
    unint64_t v106 = v11;
  }
  int v108 = *(_DWORD *)(a1 + 280);
  sub_19E29FAE8(a1 + 256, (uint64_t)&v101);
  sub_19E2A7BA8((uint64_t)&v105, (uint64_t)&v101, (uint64_t)&__p);
  unint64_t v113 = 0;
  char v114 = 0;
  uint64_t v115 = 0;
  long long v12 = __p;
  int64_t v13 = v110 - (unsigned char *)__p;
  if (v110 == __p)
  {
    vDSP_Length v15 = 0;
    long double v14 = 0;
  }
  else
  {
    if (v13 < 0) {
      sub_19E13D694();
    }
    long double v14 = (char *)operator new(v110 - (unsigned char *)__p);
    vDSP_Length v15 = &v14[8 * (v13 >> 3)];
    unint64_t v113 = v14;
    uint64_t v115 = v15;
    memcpy(v14, v12, v13);
    char v114 = v15;
  }
  unint64_t v16 = v112;
  unint64_t v116 = v112;
  unint64_t v17 = HIDWORD(v112);
  vDSP_Length v18 = HIDWORD(v112) * (int)v112;
  vDSP_vsubD(v121, 1, (const double *)v14, 1, (double *)v14, 1, v18);
  uint64_t v117 = 0;
  int v118 = 0;
  long long v119 = 0;
  int64_t v19 = v15 - v14;
  if (!v19)
  {
    uint64_t v20 = 0;
    unint64_t v120 = v16;
    int64_t v126 = 0;
    unint64_t v127 = 0;
    uint64_t v125 = 0;
    if (v18) {
      goto LABEL_14;
    }
LABEL_18:
    int64_t v22 = 0;
    uint64_t v21 = 0;
    unint64_t v128 = __PAIR64__(v17, v16);
    goto LABEL_23;
  }
  if (v19 < 0) {
    sub_19E13D694();
  }
  uint64_t v20 = (char *)operator new(v19);
  uint64_t v117 = v20;
  long long v119 = &v20[8 * (v19 >> 3)];
  memcpy(v20, v14, v19);
  int v118 = &v20[8 * (v19 >> 3)];
  unint64_t v120 = v16;
  int64_t v126 = 0;
  unint64_t v127 = 0;
  uint64_t v125 = 0;
  if (!v18) {
    goto LABEL_18;
  }
LABEL_14:
  if ((v18 & 0x80000000) != 0) {
    sub_19E13D694();
  }
  uint64_t v21 = (char *)operator new(8 * v18);
  uint64_t v125 = v21;
  unint64_t v127 = &v21[8 * v18];
  bzero(v21, 8 * v18);
  int64_t v22 = &v21[8 * v18];
  unint64_t v128 = __PAIR64__(v17, v16);
  if (v18 < 4)
  {
    for (unint64_t i = 0; i != v18; ++i)
LABEL_22:
      *(void *)&v21[8 * i] = *(void *)&v20[8 * i];
    goto LABEL_23;
  }
  uint64_t v24 = 0;
  unint64_t i = v18 & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v25 = v18 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    long long v26 = *(_OWORD *)&v20[v24 + 16];
    long double v27 = &v21[v24];
    *(_OWORD *)long double v27 = *(_OWORD *)&v20[v24];
    *((_OWORD *)v27 + 1) = v26;
    v24 += 32;
    v25 -= 4;
  }
  while (v25);
  if (i != v18) {
    goto LABEL_22;
  }
LABEL_23:
  sub_19E1E5B9C(&v121, v21, v22, (v22 - v21) >> 3);
  unint64_t v124 = v128;
  if (v21)
  {
    int64_t v126 = v21;
    operator delete(v21);
  }
  if (v20)
  {
    int v118 = v20;
    operator delete(v20);
  }
  if (v14)
  {
    char v114 = v14;
    operator delete(v14);
  }
  if (__p)
  {
    unsigned int v110 = __p;
    operator delete(__p);
  }
  if (v101)
  {
    unint64_t v102 = (char *)v101;
    operator delete(v101);
  }
  if (v105)
  {
    unint64_t v106 = v105;
    operator delete(v105);
  }
  int v28 = *(_DWORD *)(a1 + 8);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  vDSP_Length v98 = v28 + 1;
  if (v28 == -1)
  {
    *(_DWORD *)(a2 + 24) = 0;
    uint64_t v96 = *(int *)(a1 + 120);
    if (!v96) {
      goto LABEL_125;
    }
    goto LABEL_40;
  }
  if (v28 <= -2) {
    sub_19E13D694();
  }
  int32x2_t v29 = (char *)operator new(8 * v98);
  *(void *)a2 = v29;
  *(void *)(a2 + 8) = &v29[8 * v98];
  *(void *)(a2 + 16) = &v29[8 * v28 + 8];
  *(_DWORD *)(a2 + 24) = v28 + 1;
  bzero(v29, 8 * v98);
  uint64_t v96 = *(int *)(a1 + 120);
  if (v96)
  {
LABEL_40:
    uint64_t v97 = 0;
    for (unint64_t j = 0; j != v96; ++j)
    {
      uint64_t v31 = 0;
      unint64_t v32 = 0;
      do
      {
        uint64_t v33 = *(void *)(a1 + 96);
        uint64_t v34 = *(unsigned int *)(a1 + 124);
        uint64_t v125 = 0;
        int64_t v126 = 0;
        unint64_t v127 = 0;
        if (!v34)
        {
          uint64_t v35 = 0;
          unsigned int v110 = 0;
          char v111 = 0;
          __p = 0;
          LODWORD(v112) = 0;
LABEL_72:
          uint64_t v52 = 0;
          unint64_t v102 = 0;
          uint64_t v103 = 0;
          uint64_t v101 = 0;
          int v104 = 0;
          goto LABEL_76;
        }
        if ((v34 & 0x80000000) != 0) {
          sub_19E13D694();
        }
        uint64_t v35 = operator new(8 * (int)v34);
        bzero(v35, 8 * (int)v34);
        if (v34 < 8 || (unint64_t)v35 - v33 - 8 * j * (int)v34 < 0x20)
        {
          unint64_t v36 = 0;
LABEL_49:
          unint64_t v37 = (int)v34 - v36;
          uint64_t v38 = 8 * v36;
          char v39 = (void *)v35 + v36;
          unint64_t v40 = (uint64_t *)(v33 + v38 + v97 * (int)v34);
          do
          {
            uint64_t v41 = *v40++;
            *v39++ = v41;
            --v37;
          }
          while (v37);
          goto LABEL_51;
        }
        unint64_t v36 = (int)v34 & 0xFFFFFFFFFFFFFFFCLL;
        uint64_t v88 = (long long *)(v33 + v97 * (int)v34 + 16);
        size_t v89 = v35 + 1;
        unint64_t v90 = v36;
        do
        {
          long long v91 = *v88;
          *(v89 - 1) = *(v88 - 1);
          *size_t v89 = v91;
          v88 += 2;
          v89 += 2;
          v90 -= 4;
        }
        while (v90);
        if (v36 != (int)v34) {
          goto LABEL_49;
        }
LABEL_51:
        __p = 0;
        unsigned int v110 = 0;
        char v111 = 0;
        LODWORD(v112) = v34;
        uint64_t v42 = operator new(8 * (int)v34);
        bzero(v42, 8 * (int)v34);
        __p = v42;
        unsigned int v110 = (char *)v42 + 8 * (int)v34;
        char v111 = v110;
        if ((v34 - 6) >= 0x7FFFFFFB)
        {
          uint64_t v43 = 0;
LABEL_58:
          uint64_t v48 = v34 - v43;
          uint64_t v49 = v43 << 32;
          do
          {
            *(void *)((char *)v42 + (v49 >> 29)) = *(void *)((char *)v35 + (v49 >> 29));
            v49 += 0x100000000;
            --v48;
          }
          while (v48);
          goto LABEL_60;
        }
        uint64_t v43 = v34 & 0xFFFFFFFC;
        uint64_t v44 = v42 + 1;
        uint64_t v45 = v35 + 1;
        uint64_t v46 = v43;
        do
        {
          long long v47 = *v45;
          *(v44 - 1) = *(v45 - 1);
          _OWORD *v44 = v47;
          v44 += 2;
          v45 += 2;
          v46 -= 4;
        }
        while (v46);
        if (v43 != v34) {
          goto LABEL_58;
        }
LABEL_60:
        uint64_t v50 = *(void *)(a1 + 96);
        uint64_t v51 = *(unsigned int *)(a1 + 124);
        uint64_t v125 = 0;
        int64_t v126 = 0;
        unint64_t v127 = 0;
        if (!v51) {
          goto LABEL_72;
        }
        if ((v51 & 0x80000000) != 0) {
          sub_19E13D694();
        }
        uint64_t v52 = operator new(8 * (int)v51);
        bzero(v52, 8 * (int)v51);
        if (v51 < 8 || (unint64_t)v52 - v50 - 8 * v32 * (int)v51 < 0x20)
        {
          unint64_t v53 = 0;
LABEL_65:
          unint64_t v54 = (int)v51 - v53;
          uint64_t v55 = 8 * v53;
          signed int v56 = (void *)v52 + v53;
          double v57 = (uint64_t *)(v50 + v55 + v31 * (int)v51);
          do
          {
            uint64_t v58 = *v57++;
            *v56++ = v58;
            --v54;
          }
          while (v54);
          goto LABEL_67;
        }
        unint64_t v53 = (int)v51 & 0xFFFFFFFFFFFFFFFCLL;
        v92 = (long long *)(v50 + v31 * (int)v51 + 16);
        unint64_t v93 = v52 + 1;
        unint64_t v94 = v53;
        do
        {
          long long v95 = *v92;
          *(v93 - 1) = *(v92 - 1);
          _OWORD *v93 = v95;
          v92 += 2;
          v93 += 2;
          v94 -= 4;
        }
        while (v94);
        if (v53 != (int)v51) {
          goto LABEL_65;
        }
LABEL_67:
        uint64_t v101 = 0;
        unint64_t v102 = 0;
        uint64_t v103 = 0;
        int v104 = v51;
        signed int v59 = (char *)operator new(8 * (int)v51);
        bzero(v59, 8 * (int)v51);
        uint64_t v101 = v59;
        unint64_t v102 = &v59[8 * (int)v51];
        uint64_t v103 = v102;
        if ((v51 - 6) >= 0x7FFFFFFB)
        {
          uint64_t v61 = 0;
LABEL_74:
          uint64_t v64 = v51 - v61;
          uint64_t v65 = v61 << 32;
          do
          {
            *(void *)&v59[v65 >> 29] = *(void *)((char *)v52 + (v65 >> 29));
            v65 += 0x100000000;
            --v64;
          }
          while (v64);
          goto LABEL_76;
        }
        unint64_t v60 = 0;
        uint64_t v61 = v51 & 0xFFFFFFFC;
        do
        {
          long long v62 = v52[v60 / 0x10 + 1];
          signed int v63 = &v59[v60];
          *(_OWORD *)signed int v63 = v52[v60 / 0x10];
          *((_OWORD *)v63 + 1) = v62;
          v60 += 32;
        }
        while (((8 * v51) & 0x7FFFFFFE0) != v60);
        if (v61 != v51) {
          goto LABEL_74;
        }
LABEL_76:
        sub_19E2DEA5C(a1 + 8, (uint64_t)&__p, (const double **)&v101, (uint64_t)&v117);
        if (v101)
        {
          unint64_t v102 = (char *)v101;
          operator delete(v101);
        }
        if (v52) {
          operator delete(v52);
        }
        if (__p)
        {
          unsigned int v110 = __p;
          operator delete(__p);
        }
        if (v35) {
          operator delete(v35);
        }
        if (j == v32)
        {
          uint64_t v66 = SHIDWORD(v124);
          unint64_t v67 = v121;
          unint64_t v68 = v117;
          int64_t v69 = v118 - v117;
          if (v118 == v117)
          {
            uint64_t v71 = 0;
            unint64_t v70 = 0;
          }
          else
          {
            if (v69 < 0) {
              sub_19E13D694();
            }
            unint64_t v70 = (char *)operator new(v118 - v117);
            uint64_t v71 = &v70[8 * (v69 >> 3)];
            memcpy(v70, v68, v69);
          }
          uint64_t v77 = &v67[j + j * v66];
          int v78 = v120;
          vDSP_vsmulD((const double *)v70, 1, v77, (double *)v70, 1, (int)v120);
          int64_t v79 = v71 - v70;
          if (v79)
          {
            if (v79 < 0) {
              sub_19E13D694();
            }
            uint64_t v80 = (char *)operator new(v79);
            uint64_t v81 = &v80[8 * (v79 >> 3)];
            memcpy(v80, v70, v79);
          }
          else
          {
            uint64_t v81 = 0;
            uint64_t v80 = 0;
          }
          __p = (void *)0x3FE0000000000000;
          vDSP_vsmulD((const double *)v80, 1, (const double *)&__p, (double *)v80, 1, v78);
          uint64_t v125 = 0;
          int64_t v126 = 0;
          unint64_t v127 = 0;
          int64_t v86 = v81 - v80;
          if (v81 == v80)
          {
            unint64_t v87 = 0;
          }
          else
          {
            if (v86 < 0) {
              sub_19E13D694();
            }
            unint64_t v87 = (char *)operator new(v81 - v80);
            uint64_t v125 = v87;
            unint64_t v127 = &v87[8 * (v86 >> 3)];
            memcpy(v87, v80, v86);
            int64_t v126 = &v87[8 * (v86 >> 3)];
          }
          LODWORD(v128) = v78;
          vDSP_vaddD(*(const double **)a2, 1, (const double *)v87, 1, *(double **)a2, 1, v98);
          if (v87) {
            operator delete(v87);
          }
          if (v80) {
            operator delete(v80);
          }
          if (v70) {
            goto LABEL_114;
          }
        }
        else
        {
          uint64_t v72 = SHIDWORD(v124);
          uint64_t v73 = v121;
          uint64_t v74 = v117;
          int64_t v75 = v118 - v117;
          if (v118 == v117)
          {
            unint64_t v76 = 0;
            unint64_t v70 = 0;
          }
          else
          {
            if (v75 < 0) {
              sub_19E13D694();
            }
            unint64_t v70 = (char *)operator new(v118 - v117);
            unint64_t v76 = &v70[8 * (v75 >> 3)];
            memcpy(v70, v74, v75);
          }
          uint64_t v82 = &v73[v32 + j * v72];
          int v83 = v120;
          vDSP_vsmulD((const double *)v70, 1, v82, (double *)v70, 1, (int)v120);
          uint64_t v125 = 0;
          int64_t v126 = 0;
          unint64_t v127 = 0;
          uint64_t v84 = v76 - v70;
          if (v76 == v70)
          {
            unint64_t v85 = 0;
          }
          else
          {
            if (v84 < 0) {
              sub_19E13D694();
            }
            unint64_t v85 = (char *)operator new(v76 - v70);
            uint64_t v125 = v85;
            unint64_t v127 = &v85[8 * (v84 >> 3)];
            memcpy(v85, v70, v76 - v70);
            int64_t v126 = &v85[8 * (v84 >> 3)];
          }
          LODWORD(v128) = v83;
          vDSP_vaddD(*(const double **)a2, 1, (const double *)v85, 1, *(double **)a2, 1, v98);
          if (v85) {
            operator delete(v85);
          }
          if (v70) {
LABEL_114:
          }
            operator delete(v70);
        }
        if (v117)
        {
          int v118 = v117;
          operator delete(v117);
        }
        ++v32;
        v31 += 8;
      }
      while (v32 <= j);
      v97 += 8;
    }
  }
LABEL_125:
  if (v121)
  {
    uint64_t v122 = v121;
    operator delete(v121);
  }
}

void sub_19E2DE27C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  vDSP_Length v15 = *(void **)a14;
  if (*(void *)a14)
  {
    *(void *)(a14 + 8) = v15;
    operator delete(v15);
  }
  sub_19E13A9BC(a1);
}

void sub_19E2DE2A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37)
{
  if (v39) {
    operator delete(v39);
  }
  if (v38)
  {
    *(void *)(v40 - 176) = v38;
    operator delete(v38);
  }
  if (v37)
  {
    *(void *)(v40 - 208) = v37;
    operator delete(v37);
  }
  if (__p)
  {
    operator delete(__p);
    uint64_t v42 = a28;
    if (!a28)
    {
LABEL_9:
      uint64_t v43 = a32;
      if (!a32)
      {
LABEL_14:
        uint64_t v44 = *(void **)(v40 - 152);
        if (v44)
        {
          *(void *)(v40 - 144) = v44;
          operator delete(v44);
        }
        _Unwind_Resume(exception_object);
      }
LABEL_13:
      operator delete(v43);
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v42 = a28;
    if (!a28) {
      goto LABEL_9;
    }
  }
  operator delete(v42);
  uint64_t v43 = a32;
  if (!a32) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_19E2DE4D4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37)
{
  if (__p)
  {
    operator delete(__p);
    if (!v38)
    {
LABEL_3:
      char v39 = a36;
      if (!a36) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if (!v38)
  {
    goto LABEL_3;
  }
  operator delete(v38);
  char v39 = a36;
  if (!a36)
  {
LABEL_4:
    if (v37) {
      goto LABEL_12;
    }
    goto LABEL_13;
  }
LABEL_8:
  operator delete(v39);
  if (v37) {
LABEL_12:
  }
    JUMPOUT(0x19E2DE480);
LABEL_13:
  JUMPOUT(0x19E2DE484);
}

uint64_t sub_19E2DE524(uint64_t a1, int *a2)
{
  int v4 = *a2;
  *(unsigned char *)(a1 + 4) = *((unsigned char *)a2 + 4);
  *(_DWORD *)a1 = v4;
  sub_19E2DE930(a1 + 8, (uint64_t)(a2 + 2));
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t v6 = (unsigned char *)*((void *)a2 + 12);
  uint64_t v5 = (unsigned char *)*((void *)a2 + 13);
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      sub_19E13D694();
    }
    unint64_t v8 = (char *)operator new(v5 - v6);
    *(void *)(a1 + 96) = v8;
    *(void *)(a1 + 104) = v8;
    int64_t v9 = &v8[8 * (v7 >> 3)];
    *(void *)(a1 + 112) = v9;
    memcpy(v8, v6, v7);
    *(void *)(a1 + 104) = v9;
  }
  uint64_t v10 = *((void *)a2 + 15);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 120) = v10;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  long long v12 = (unsigned char *)*((void *)a2 + 16);
  unint64_t v11 = (unsigned char *)*((void *)a2 + 17);
  int64_t v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0) {
      sub_19E13D694();
    }
    long double v14 = (char *)operator new(v11 - v12);
    *(void *)(a1 + 128) = v14;
    *(void *)(a1 + 136) = v14;
    vDSP_Length v15 = &v14[8 * (v13 >> 3)];
    *(void *)(a1 + 144) = v15;
    memcpy(v14, v12, v13);
    *(void *)(a1 + 136) = v15;
  }
  int v16 = a2[38];
  *(void *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 152) = v16;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  vDSP_Length v18 = (unsigned char *)*((void *)a2 + 20);
  unint64_t v17 = (unsigned char *)*((void *)a2 + 21);
  int64_t v19 = v17 - v18;
  if (v17 != v18)
  {
    if (v19 < 0) {
      sub_19E13D694();
    }
    uint64_t v20 = (char *)operator new(v17 - v18);
    *(void *)(a1 + 160) = v20;
    *(void *)(a1 + 168) = v20;
    uint64_t v21 = &v20[8 * (v19 >> 3)];
    *(void *)(a1 + 176) = v21;
    memcpy(v20, v18, v19);
    *(void *)(a1 + 168) = v21;
  }
  uint64_t v22 = *((void *)a2 + 23);
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 184) = v22;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  uint64_t v24 = (unsigned char *)*((void *)a2 + 24);
  unint64_t v23 = (unsigned char *)*((void *)a2 + 25);
  int64_t v25 = v23 - v24;
  if (v23 != v24)
  {
    if (v25 < 0) {
      sub_19E13D694();
    }
    long long v26 = (char *)operator new(v23 - v24);
    *(void *)(a1 + 192) = v26;
    *(void *)(a1 + 200) = v26;
    long double v27 = &v26[8 * (v25 >> 3)];
    *(void *)(a1 + 208) = v27;
    memcpy(v26, v24, v25);
    *(void *)(a1 + 200) = v27;
  }
  uint64_t v28 = *((void *)a2 + 27);
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 216) = v28;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  int v30 = (unsigned char *)*((void *)a2 + 28);
  int32x2_t v29 = (unsigned char *)*((void *)a2 + 29);
  int64_t v31 = v29 - v30;
  if (v29 != v30)
  {
    if (v31 < 0) {
      sub_19E13D694();
    }
    unint64_t v32 = (char *)operator new(v29 - v30);
    *(void *)(a1 + 224) = v32;
    *(void *)(a1 + 232) = v32;
    uint64_t v33 = &v32[8 * (v31 >> 3)];
    *(void *)(a1 + 240) = v33;
    memcpy(v32, v30, v31);
    *(void *)(a1 + 232) = v33;
  }
  *(void *)(a1 + 248) = *((void *)a2 + 31);
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  uint64_t v35 = (unsigned char *)*((void *)a2 + 32);
  uint64_t v34 = (unsigned char *)*((void *)a2 + 33);
  int64_t v36 = v34 - v35;
  if (v34 != v35)
  {
    if (v36 < 0) {
      sub_19E13D694();
    }
    uint64_t v37 = (char *)operator new(v34 - v35);
    *(void *)(a1 + 256) = v37;
    *(void *)(a1 + 264) = v37;
    uint64_t v38 = &v37[8 * (v36 >> 3)];
    *(void *)(a1 + 272) = v38;
    memcpy(v37, v35, v36);
    *(void *)(a1 + 264) = v38;
  }
  *(_DWORD *)(a1 + 280) = a2[70];
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 288) = 0;
  uint64_t v40 = (unsigned char *)*((void *)a2 + 36);
  char v39 = (unsigned char *)*((void *)a2 + 37);
  int64_t v41 = v39 - v40;
  if (v39 != v40)
  {
    if (v41 < 0) {
      sub_19E13D694();
    }
    uint64_t v42 = (char *)operator new(v39 - v40);
    *(void *)(a1 + 288) = v42;
    *(void *)(a1 + 296) = v42;
    uint64_t v43 = &v42[8 * (v41 >> 3)];
    *(void *)(a1 + 304) = v43;
    memcpy(v42, v40, v41);
    *(void *)(a1 + 296) = v43;
  }
  *(_DWORD *)(a1 + 312) = a2[78];
  return a1;
}

void sub_19E2DE800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void *a10)
{
  vDSP_Length v18 = *v16;
  if (*v16)
  {
    v10[37] = v18;
    operator delete(v18);
    int64_t v19 = *a9;
    if (!*a9)
    {
LABEL_3:
      uint64_t v20 = *v15;
      if (!*v15) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else
  {
    int64_t v19 = *a9;
    if (!*a9) {
      goto LABEL_3;
    }
  }
  v10[33] = v19;
  operator delete(v19);
  uint64_t v20 = *v15;
  if (!*v15)
  {
LABEL_4:
    uint64_t v21 = *v14;
    if (!*v14) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  v10[29] = v20;
  operator delete(v20);
  uint64_t v21 = *v14;
  if (!*v14)
  {
LABEL_5:
    uint64_t v22 = *v13;
    if (!*v13) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  v10[25] = v21;
  operator delete(v21);
  uint64_t v22 = *v13;
  if (!*v13)
  {
LABEL_6:
    unint64_t v23 = *v12;
    if (!*v12) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }
LABEL_13:
  v10[21] = v22;
  operator delete(v22);
  unint64_t v23 = *v12;
  if (!*v12)
  {
LABEL_7:
    uint64_t v24 = *v11;
    if (!*v11) {
      goto LABEL_8;
    }
    goto LABEL_15;
  }
LABEL_14:
  v10[17] = v23;
  operator delete(v23);
  uint64_t v24 = *v11;
  if (!*v11)
  {
LABEL_8:
    sub_19E2BADC4(a10);
    _Unwind_Resume(a1);
  }
LABEL_15:
  v10[13] = v24;
  operator delete(v24);
  sub_19E2BADC4(a10);
  _Unwind_Resume(a1);
}

uint64_t sub_19E2DE930(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(unsigned char **)(a2 + 24);
  uint64_t v5 = *(unsigned char **)(a2 + 32);
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      sub_19E13D694();
    }
    unint64_t v8 = (char *)operator new(v5 - v6);
    *(void *)(a1 + 24) = v8;
    *(void *)(a1 + 32) = v8;
    int64_t v9 = &v8[8 * (v7 >> 3)];
    *(void *)(a1 + 40) = v9;
    memcpy(v8, v6, v7);
    *(void *)(a1 + 32) = v9;
  }
  int v10 = *(_DWORD *)(a2 + 48);
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 48) = v10;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  long long v12 = *(unsigned char **)(a2 + 56);
  unint64_t v11 = *(unsigned char **)(a2 + 64);
  int64_t v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0) {
      sub_19E13D694();
    }
    long double v14 = (char *)operator new(v11 - v12);
    *(void *)(a1 + 56) = v14;
    *(void *)(a1 + 64) = v14;
    vDSP_Length v15 = &v14[8 * (v13 >> 3)];
    *(void *)(a1 + 72) = v15;
    memcpy(v14, v12, v13);
    *(void *)(a1 + 64) = v15;
  }
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  return a1;
}

void sub_19E2DEA28(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 64) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2DEA5C(uint64_t a1@<X0>, uint64_t a2@<X1>, const double **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = 0;
  int64_t v9 = 0;
  int v10 = 0;
  int v11 = *(_DWORD *)a1;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = 0;
  *(_DWORD *)(a4 + 24) = 0;
  double v57 = 0;
  uint64_t v58 = 0;
  signed int v59 = 0;
  int v12 = v11 + 1;
  if (v11 != -1)
  {
    if (v11 <= -2) {
      sub_19E13D694();
    }
    int v10 = (double *)operator new(8 * v12);
    uint64_t v8 = (uint64_t)&v10[v11 + 1];
    bzero(v10, 8 * v12);
    int64_t v9 = &v10[v12];
  }
  *(void *)a4 = v10;
  *(void *)(a4 + 8) = v9;
  *(void *)(a4 + 16) = v8;
  *(_DWORD *)(a4 + 24) = v12;
  double v13 = sub_19E2D8240(a1, a2, (uint64_t)a3);
  double v15 = v14;
  double v16 = exp(-v13);
  double v17 = v13 + 1.0;
  double *v10 = v16 * *(double *)(a1 + 16) * (v17 + v15 + v17 + v15);
  int64_t v19 = *(const void **)a2;
  uint64_t v18 = *(void *)(a2 + 8);
  int64_t v20 = v18 - *(void *)a2;
  if (v18 == *(void *)a2)
  {
    uint64_t v22 = 0;
    uint64_t v21 = 0;
  }
  else
  {
    if (v20 < 0) {
      sub_19E13D694();
    }
    uint64_t v21 = (char *)operator new(v18 - *(void *)a2);
    uint64_t v22 = &v21[8 * (v20 >> 3)];
    memcpy(v21, v19, v20);
  }
  int v23 = *(_DWORD *)(a2 + 24);
  vDSP_vsubD(*a3, 1, (const double *)v21, 1, (double *)v21, 1, v23);
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  unint64_t v53 = 0;
  uint64_t v24 = v22 - v21;
  if (v22 != v21)
  {
    if (v24 < 0) {
      sub_19E13D694();
    }
    int64_t v25 = (char *)operator new(v22 - v21);
    long long v26 = &v25[8 * (v24 >> 3)];
    uint64_t v51 = v25;
    unint64_t v53 = v26;
    memcpy(v25, v21, v22 - v21);
    uint64_t v52 = v26;
  }
  int v54 = v23;
  sub_19E2C2AC8((uint64_t)&v51, (uint64_t)__p);
  signed int v27 = v56;
  uint64_t v58 = 0;
  signed int v59 = 0;
  double v57 = 0;
  if (v56)
  {
    if (v56 < 0) {
      sub_19E13D694();
    }
    uint64_t v28 = (float64x2_t *)operator new(8 * v56);
    double v57 = v28;
    signed int v59 = (char *)&v28->f64[v27];
    bzero(v28, 8 * v27);
    unint64_t v29 = 0;
    uint64_t v58 = (float64x2_t *)((char *)v28 + 8 * v27);
    signed int v60 = v27;
    int v30 = __p[0];
    if (v27 < 4) {
      goto LABEL_46;
    }
    if ((unint64_t)((char *)v28 - (char *)__p[0]) < 0x20) {
      goto LABEL_46;
    }
    unint64_t v31 = 0;
    unint64_t v29 = v27 & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v32 = v29;
    do
    {
      long long v33 = *(_OWORD *)&v30[v31 / 8 + 2];
      f64 = (_OWORD *)v28[v31 / 0x10].f64;
      _OWORD *f64 = *(_OWORD *)&v30[v31 / 8];
      f64[1] = v33;
      v31 += 32;
      v32 -= 4;
    }
    while (v32);
    if (v29 != v27)
    {
LABEL_46:
      do
      {
        *(void *)&v28->f64[v29] = v30[v29];
        ++v29;
      }
      while (v27 != v29);
    }
  }
  else
  {
    uint64_t v28 = 0;
    signed int v60 = 0;
    int v30 = __p[0];
    if (!__p[0]) {
      goto LABEL_22;
    }
  }
  __p[1] = v30;
  operator delete(v30);
LABEL_22:
  if (v51)
  {
    uint64_t v52 = v51;
    operator delete(v51);
  }
  if (v21) {
    operator delete(v21);
  }
  uint64_t v35 = *(int *)(a1 + 48);
  if (v35)
  {
    int64_t v36 = *(float64x2_t **)(a1 + 24);
    double v37 = v16 * 1.66666667 * (v17 * *(double *)(a1 + 16));
    if (v35 >= 6)
    {
      unint64_t v38 = 0;
      if ((unint64_t)((char *)(v10 + 1) - (char *)v36) >= 0x20
        && (unint64_t)((char *)(v10 + 1) - (char *)v28) >= 0x20)
      {
        unint64_t v38 = v35 & 0xFFFFFFFFFFFFFFFCLL;
        uint64_t v46 = (float64x2_t *)(v10 + 3);
        long long v47 = v36 + 1;
        uint64_t v48 = v28 + 1;
        unint64_t v49 = v35 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          float64x2_t v50 = vdivq_f64(vmulq_n_f64(*v48, v37), vmulq_f64(*v47, *v47));
          v46[-1] = vdivq_f64(vmulq_n_f64(v48[-1], v37), vmulq_f64(v47[-1], v47[-1]));
          *uint64_t v46 = v50;
          v46 += 2;
          v47 += 2;
          v48 += 2;
          v49 -= 4;
        }
        while (v49);
        if (v38 == v35) {
          goto LABEL_39;
        }
      }
    }
    else
    {
      unint64_t v38 = 0;
    }
    char v39 = &v10[v38 + 1];
    uint64_t v40 = &v28->f64[v38];
    int64_t v41 = &v36->f64[v38];
    uint64_t v42 = v35 - v38;
    do
    {
      double v43 = *v41++;
      double v44 = v43;
      double v45 = *v40++;
      *v39++ = v37 * v45 / (v44 * v44);
      --v42;
    }
    while (v42);
LABEL_39:
    uint64_t v58 = v28;
    operator delete(v28);
    return;
  }
  if (v28) {
    goto LABEL_39;
  }
}

void sub_19E2DEE3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  if (v23) {
    operator delete(v23);
  }
  *(void *)(v24 + 8) = v22;
  operator delete(v22);
  _Unwind_Resume(a1);
}

void sub_19E2DEEAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a9) {
    JUMPOUT(0x19E2DEE98);
  }
  JUMPOUT(0x19E2DEE8CLL);
}

BOOL sub_19E2DEEBC(uint64_t a1, int *a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Early stopping already requested.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v3 = *(_DWORD *)(a1 + 12);
  if (v3 == -1) {
    return 0;
  }
  int v6 = *a2;
  uint64_t v5 = (uint64_t)(a2 + 2);
  if (v6 == 1 || *(double *)(a1 + 120) < *((double *)a2 + 13) - *(double *)(a1 + 16))
  {
    sub_19E29AB9C(a1 + 24, v5);
    *(void *)(a1 + 120) = *((void *)a2 + 13);
    *(_DWORD *)(a1 + 128) = 0;
    *(unsigned char *)(a1 + 8) = 0;
    return 0;
  }
  else
  {
    int v8 = *(_DWORD *)(a1 + 128);
    *(_DWORD *)(a1 + 128) = v8 + 1;
    BOOL v9 = v8 >= v3;
    *(unsigned char *)(a1 + 8) = v9;
    return v9;
  }
}

void sub_19E2DEFB0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char **sub_19E2DEFC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5 = *(_DWORD *)(a1 + 56);
  int v6 = *(_DWORD *)(a1 + 60);
  uint64_t v7 = *(void *)(a1 + 64);
  char v30 = 0;
  unint64_t v29 = (char *)&unk_1EF0A86A8;
  int v31 = v5;
  v21[0] = 0;
  *(_DWORD *)uint64_t v22 = v6;
  *(void *)&v22[4] = v7;
  memset(v23, 0, sizeof(v23));
  uint64_t v24 = v25;
  v25[0] = 0;
  double v26 = 0.0;
  v27[0] = 0;
  v25[1] = 0;
  v25[2] = &v26;
  int v28 = 0;
  char v33 = 0;
  unint64_t v32 = (uint64_t (**)(void **, void **))&unk_1EF0A86A8;
  int v34 = v5;
  char v36 = 0;
  uint64_t v35 = (uint64_t (**)(void **, void **))&unk_1EF0A8750;
  int v38 = HIDWORD(v7);
  uint64_t v37 = *(void *)v22;
  sub_19E2965D0(v39, (uint64_t)v23);
  v39[12] = (uint64_t *)v27[1];
  int v40 = v28;
  int64_t v20 = &unk_1EF0A8750;
  sub_19E2470C8((char **)v23);
  int v8 = *(_DWORD *)(a1 + 72);
  (*(void (**)(char **__return_ptr))(**(void **)(a1 + 120) + 16))(&v29);
  uint64_t v9 = *(void *)(a2 + 24);
  if (!v9) {
    goto LABEL_16;
  }
  double v10 = (*(double (**)(uint64_t, char **))(*(void *)v9 + 48))(v9, &v29);
  (*(void (**)(void, char **))(**(void **)(a1 + 120) + 24))(*(void *)(a1 + 120), &v29);
  std::chrono::steady_clock::now();
  LODWORD(v20) = 1;
  sub_19E291E68((uint64_t **)v21, (uint64_t *)&v29);
  double v26 = v10;
  sub_19E2A7DDC(*(void *)(a1 + 120), (uint64_t)v27);
  if (1 % v8) {
    goto LABEL_5;
  }
  uint64_t v11 = *(void *)(a2 + 56);
  if (!v11) {
LABEL_17:
  }
    sub_19E2A8074();
  if (((*(uint64_t (**)(uint64_t, void **))(*(void *)v11 + 48))(v11, &v20) & 1) == 0)
  {
LABEL_5:
    if (((*v32)((void **)&v32, &v20) & 1) == 0)
    {
      char v12 = (*v35)((void **)&v35, &v20);
      sub_19E2470C8(v27);
      sub_19E2470C8((char **)v21);
      sub_19E2470C8(&v29);
      if (v12) {
        goto LABEL_15;
      }
      int v13 = 2;
      while (1)
      {
        (*(void (**)(char **__return_ptr))(**(void **)(a1 + 120) + 16))(&v29);
        uint64_t v14 = *(void *)(a2 + 24);
        if (!v14) {
          break;
        }
        double v15 = (*(double (**)(uint64_t, char **))(*(void *)v14 + 48))(v14, &v29);
        (*(void (**)(void, char **))(**(void **)(a1 + 120) + 24))(*(void *)(a1 + 120), &v29);
        std::chrono::steady_clock::now();
        std::chrono::steady_clock::now();
        LODWORD(v20) = v13;
        sub_19E291E68((uint64_t **)v21, (uint64_t *)&v29);
        double v26 = v15;
        sub_19E2A7DDC(*(void *)(a1 + 120), (uint64_t)v27);
        if (!(v13 % v8))
        {
          uint64_t v16 = *(void *)(a2 + 56);
          if (!v16) {
            goto LABEL_17;
          }
          if ((*(uint64_t (**)(uint64_t, void **))(*(void *)v16 + 48))(v16, &v20)) {
            goto LABEL_6;
          }
        }
        if ((*v32)((void **)&v32, &v20)) {
          goto LABEL_6;
        }
        char v17 = (*v35)((void **)&v35, &v20);
        sub_19E2470C8(v27);
        sub_19E2470C8((char **)v21);
        sub_19E2470C8(&v29);
        ++v13;
        if (v17) {
          goto LABEL_15;
        }
      }
LABEL_16:
      sub_19E2A8074();
    }
  }
LABEL_6:
  sub_19E2470C8(v27);
  sub_19E2470C8((char **)v21);
  sub_19E2470C8(&v29);
LABEL_15:
  sub_19E2A7DDC(*(void *)(a1 + 120), a3);
  uint64_t v35 = (uint64_t (**)(void **, void **))&unk_1EF0A8750;
  return sub_19E2470C8((char **)v39);
}

void sub_19E2DF474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char *a39)
{
  sub_19E2470C8(v41);
  sub_19E2470C8(v40);
  sub_19E2470C8(&a39);
  *(void *)(v42 - 240) = a11;
  sub_19E2470C8(v39);
  _Unwind_Resume(a1);
}

void sub_19E2DF4FC(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 48);
  if (v1 != 1)
  {
    if (!v1) {
      sub_19E29849C();
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_19E298774(exception, "Invalid optimizer in user config.");
    __cxa_throw(exception, (struct type_info *)off_1E599CD18, MEMORY[0x1E4FBA1E8]);
  }
  sub_19E2DF5B0();
}

void sub_19E2DF59C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19E2DF5B0()
{
}

void sub_19E2DF6EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E2934EC((uint64_t)va);
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_19E2DF708(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E2DF71C(uint64_t a1, uint64_t *a2)
{
  sub_19E2933F8((uint64_t)&v15, (uint64_t)a2);
  *(void *)a1 = &unk_1EF0A8318;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  sub_19E2933F8(a1 + 32, (uint64_t)&v15);
  if (v21)
  {
    uint64_t v4 = (char **)__p;
    if (__p)
    {
      int v5 = v20;
      int v6 = __p;
      if (v20 != __p)
      {
        do
          int v5 = sub_19E2470C8(v5 - 12);
        while (v5 != v4);
        int v6 = __p;
      }
      int64_t v20 = v4;
      operator delete(v6);
    }
  }
  uint64_t v7 = (void **)v17;
  if (v17)
  {
    int v8 = v18;
    uint64_t v9 = v17;
    if (v18 != v17)
    {
      do
      {
        if (*((char *)v8 - 17) < 0) {
          operator delete(*(v8 - 5));
        }
        v8 -= 5;
      }
      while (v8 != v7);
      uint64_t v9 = v17;
    }
    uint64_t v18 = v7;
    operator delete(v9);
  }
  double v10 = (void **)v15;
  if (v15)
  {
    uint64_t v11 = v16;
    char v12 = v15;
    if (v16 != v15)
    {
      do
      {
        if (*((char *)v11 - 25) < 0) {
          operator delete(*(v11 - 6));
        }
        v11 -= 6;
      }
      while (v11 != v10);
      char v12 = v15;
    }
    uint64_t v16 = v10;
    operator delete(v12);
  }
  *(void *)a1 = &unk_1EF0A8618;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  int v13 = sub_19E244298(a2);
  int v14 = sub_19E244DC4((uint64_t)a2);
  *(_DWORD *)(a1 + 176) = v14 + v13;
  sub_19E2E05E4(a1 + 184, v14 + v13);
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 472) = 0;
  *(_DWORD *)(a1 + 488) = 0;
  *(void *)(a1 + 480) = 0;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 316) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 444) = 0u;
  *(void *)(a1 + 528) = 0;
  *(void *)(a1 + 520) = 0;
  *(_DWORD *)(a1 + 544) = 0;
  *(void *)(a1 + 536) = 0;
  *(_DWORD *)(a1 + 560) = -1;
  *(void *)(a1 + 504) = &unk_1EF0A7E58;
  *(void *)(a1 + 512) = a1 + 176;
  *(void *)(a1 + 568) = 0;
  *(void *)(a1 + 584) = 0;
  sub_19E299010(a1 + 592);
  *(void *)(a1 + 10712) = 0;
  *(_OWORD *)(a1 + 10696) = 0u;
  if ((int)sub_19E244DC4(a1 + 32) >= 1) {
    sub_19E2DFE94();
  }
  sub_19E2E0044();
}

void sub_19E2DFD84(_Unwind_Exception *a1)
{
  sub_19E2462FC(v6);
  sub_19E298A78(v5);
  int v8 = (void **)(v1 + 65);
  uint64_t v9 = v1[73];
  v1[73] = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  void *v4 = &unk_1EF0A7D90;
  double v10 = *v8;
  if (*v8)
  {
    v1[66] = v10;
    operator delete(v10);
  }
  sub_19E2BEE60(v3);
  sub_19E29AC3C(v2);
  sub_19E298AC8(v1);
  _Unwind_Resume(a1);
}

void sub_19E2DFE94()
{
}

void sub_19E2DFFF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_19E245FE8(&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_19E2E000C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
  {
    sub_19E32FAD8((uint64_t)&a9, a9);
    operator delete(v9);
    _Unwind_Resume(a1);
  }
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_19E2E0044()
{
}

void sub_19E2E01A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_19E245FE8(&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_19E2E01BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
  {
    sub_19E32FAD8((uint64_t)&a9, a9);
    operator delete(v9);
    _Unwind_Resume(a1);
  }
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_19E2E01F8(uint64_t a1)
{
  int v1 = (void *)sub_19E2E4514(a1);

  operator delete(v1);
}

uint64_t **sub_19E2E0220@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X8>)
{
  uint64_t v4 = a1 + 8;
  unint64_t v5 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3);
  uint64_t v6 = a1 + 32;
  int v7 = sub_19E244298((uint64_t *)(a1 + 32));
  signed int v8 = 5 * (sub_19E244DC4(v6) + v7);
  if (*(unsigned char *)(v4 + 136) && v8 <= (int)(-1431655765 * ((*(void *)(a1 + 128) - *(void *)(a1 + 120)) >> 5))) {
    signed int v8 = -1431655765 * ((*(void *)(a1 + 128) - *(void *)(a1 + 120)) >> 5);
  }
  if (v5 >= v8)
  {
    (*(void (**)(char **__return_ptr))(**(void **)(a1 + 584) + 16))(v11);
    sub_19E291E68(a2, (uint64_t *)v11);
    return (uint64_t **)sub_19E2470C8(v11);
  }
  else
  {
    uint64_t v9 = (uint64_t *)(*(void *)(a1 + 10696)
                   + 96 * (int)(-991146299 * ((*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3)));
    return sub_19E291E68(a2, v9);
  }
}

void sub_19E2E0364(uint64_t a1, long long **a2, double a3)
{
  sub_19E29CE6C(a2, (uint64_t)&__p);
  double v5 = sub_19E2E2948(a1 + 176, (uint64_t)&__p);
  double v7 = sqrt(v6);
  double v23 = v7;
  double v24 = v5;
  double v8 = v5 - (*(double *)(a1 + 552) + *(double *)(a1 + 568));
  double v9 = v8 / v7;
  long double v10 = erfc(v8 / v7 * -0.707106781) * (0.5 * v8);
  double v11 = v10 + v7 * 0.39894228 * exp(v9 * v9 * -0.5);
  double v22 = v11;
  unint64_t v12 = *(void *)(a1 + 160);
  if (v12 >= *(void *)(a1 + 168))
  {
    uint64_t v17 = sub_19E2A4064((uint64_t *)(a1 + 152), (uint64_t)&__p, &v24, (uint64_t *)&v23, (uint64_t *)&v22);
  }
  else
  {
    *(void *)unint64_t v12 = 0;
    *(void *)(v12 + 8) = 0;
    *(void *)(v12 + 16) = 0;
    int v13 = __p;
    int64_t v14 = v26 - (unsigned char *)__p;
    if (v26 != __p)
    {
      if (v14 < 0) {
        sub_19E13D694();
      }
      double v15 = (char *)operator new(v26 - (unsigned char *)__p);
      *(void *)unint64_t v12 = v15;
      *(void *)(v12 + 8) = v15;
      uint64_t v16 = &v15[8 * (v14 >> 3)];
      *(void *)(v12 + 16) = v16;
      memcpy(v15, v13, v14);
      *(void *)(v12 + 8) = v16;
    }
    *(_DWORD *)(v12 + 24) = v27;
    *(double *)(v12 + 32) = v5;
    *(double *)(v12 + 40) = v7;
    *(double *)(v12 + 48) = v11;
    uint64_t v17 = v12 + 56;
    *(void *)(a1 + 160) = v12 + 56;
  }
  *(void *)(a1 + 160) = v17;
  uint64_t v18 = *(int *)(a1 + 488);
  uint64_t v19 = v18 + 1;
  *(_DWORD *)(a1 + 488) = v18 + 1;
  uint64_t v20 = *(void *)(a1 + 464);
  unint64_t v21 = (*(void *)(a1 + 472) - v20) >> 3;
  if (v18 + 1 <= v21)
  {
    if (v18 + 1 < v21) {
      *(void *)(a1 + 472) = v20 + 8 * v18 + 8;
    }
  }
  else
  {
    sub_19E2482DC(a1 + 464, v18 + 1 - v21);
    uint64_t v19 = *(int *)(a1 + 488);
    uint64_t v20 = *(void *)(a1 + 464);
  }
  *(double *)(v20 + 8 * v19 - 8) = a3;
  sub_19E2E46D0(a1 + 176, (uint64_t)&__p);
  sub_19E2E58B4(a1 + 496, a1 + 176);
}

void sub_19E2E0598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, char *a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_19E2E05E4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + 8) = xmmword_19E351FD0;
  *(void *)(a1 + 24) = 0;
  uint64_t v4 = a2 << 32;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  size_t v5 = 8 * (int)a2;
  if (a2)
  {
    if ((a2 & 0x80000000) != 0) {
      sub_19E13D694();
    }
    double v6 = (char *)operator new(8 * (int)a2);
    *(void *)(a1 + 24) = v6;
    *(void *)(a1 + 40) = &v6[8 * (int)a2];
    bzero(v6, v5);
    *(void *)(a1 + 32) = &v6[v5];
    *(_DWORD *)(a1 + 48) = a2;
    if (v4) {
      goto LABEL_4;
    }
  }
  else
  {
    double v6 = 0;
    *(_DWORD *)(a1 + 48) = 0;
    if (v4) {
LABEL_4:
    }
      memset_pattern16(v6, &unk_19E351820, v5);
  }
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(void *)(a1 + 72) = 0;
  int v7 = a2 + 1;
  if (a2 == -1)
  {
    double v8 = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 72) = 0;
    *(_DWORD *)(a1 + 80) = v7;
    MEMORY[0] = 0;
    if (!a2) {
      return a1;
    }
    goto LABEL_12;
  }
  if (v7 < 0) {
    sub_19E13D694();
  }
  double v8 = operator new(8 * v7);
  bzero(v8, 8 * v7);
  *(void *)(a1 + 56) = v8;
  *(void *)(a1 + 64) = &v8[v7];
  *(void *)(a1 + 72) = &v8[v7];
  *(_DWORD *)(a1 + 80) = v7;
  *double v8 = 0;
  if (a2)
  {
LABEL_12:
    unint64_t v9 = 0;
    if (a2 == 1) {
      goto LABEL_16;
    }
    unint64_t v9 = a2 & 0xFFFFFFFFFFFFFFFELL;
    long double v10 = v8 + 1;
    unint64_t v11 = a2 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v12 = (long long *)v6;
    do
    {
      long long v13 = *v12++;
      long double v20 = log(*((long double *)&v13 + 1));
      *(double *)&long long v14 = log(*(long double *)&v13);
      *((long double *)&v14 + 1) = v20;
      *v10++ = v14;
      v11 -= 2;
    }
    while (v11);
    if (v9 != a2)
    {
LABEL_16:
      double v15 = (long double *)&v8[v9 + 1];
      uint64_t v16 = (double *)&v6[8 * v9];
      uint64_t v17 = a2 - v9;
      do
      {
        long double v18 = *v16++;
        *v15++ = log(v18);
        --v17;
      }
      while (v17);
    }
  }
  return a1;
}

void sub_19E2E07C4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E13A9BC(a1);
}

void sub_19E2E07E0(void *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  sub_19E13A9BC(a1);
}

long double sub_19E2E07FC(uint64_t a1, double a2, double a3)
{
  double v4 = a2 - (*(double *)(a1 + 48) + *(double *)(a1 + 64));
  double v5 = v4 / a3;
  long double v6 = erfc(v4 / a3 * -0.707106781) * (0.5 * v4);
  return v6 + a3 * 0.39894228 * exp(v5 * v5 * -0.5);
}

double sub_19E2E0874()
{
  return 0.0;
}

void sub_19E2E087C(uint64_t a1)
{
  int v104 = 0;
  uint64_t v105 = 0;
  unint64_t v106 = 0;
  uint64_t v1 = *(void **)(a1 + 8);
  uint64_t v101 = 0;
  unint64_t v102 = 0;
  size_t v100 = 0;
  int v3 = (unsigned char *)v1[12];
  uint64_t v2 = (unsigned char *)v1[13];
  int64_t v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0) {
      sub_19E13D694();
    }
    double v5 = (char *)operator new(v2 - v3);
    long double v6 = &v5[8 * (v4 >> 3)];
    size_t v100 = v5;
    unint64_t v102 = v6;
    memcpy(v5, v3, v4);
    uint64_t v101 = v6;
  }
  uint64_t v7 = v1[15];
  uint64_t v103 = v7;
  if (!v7)
  {
    uint64_t v55 = 0;
    uint64_t v58 = 0;
    *(_DWORD *)(a1 + 56) = 0;
    long long v62 = v100;
    signed int v63 = HIDWORD(v103);
    long long v107 = 0;
    int v108 = 0;
    uint64_t v109 = 0;
    if (HIDWORD(v103)) {
      goto LABEL_65;
    }
    goto LABEL_81;
  }
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  long double v10 = 0;
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v90 = (int)v7;
  uint64_t v91 = v7;
  size_t v13 = 8 * (v7 >> 32);
  uint64_t v88 = v7 >> 32;
  size_t v89 = v13;
  unint64_t v87 = (v7 >> 32) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v93 = HIDWORD(v7);
  uint64_t v94 = 16;
  do
  {
    uint64_t v14 = *(void *)(a1 + 8);
    double v15 = v100;
    __p = 0;
    *(void *)uint64_t v96 = 0;
    uint64_t v97 = 0;
    if (!v93)
    {
      uint64_t v16 = 0;
      int v108 = 0;
      uint64_t v109 = 0;
      long long v107 = 0;
      unsigned int v110 = 0;
      goto LABEL_27;
    }
    if (v7 < 0) {
      sub_19E13D694();
    }
    uint64_t v16 = operator new(v13);
    bzero(v16, v13);
    if ((unint64_t)v7 >> 33 < 3)
    {
      unint64_t v17 = 0;
      unint64_t v18 = v88;
      goto LABEL_17;
    }
    unint64_t v18 = v88;
    if ((unint64_t)((char *)v16 - &v100[v13 * v12]) < 0x20)
    {
      unint64_t v17 = 0;
LABEL_17:
      unint64_t v23 = v18 - v17;
      uint64_t v24 = 8 * v17;
      int64_t v25 = (void *)v16 + v17;
      double v26 = (uint64_t *)&v15[v8 + v24];
      do
      {
        uint64_t v27 = *v26++;
        *v25++ = v27;
        --v23;
      }
      while (v23);
      goto LABEL_19;
    }
    uint64_t v19 = (long long *)&v100[v94];
    long double v20 = v16 + 1;
    unint64_t v21 = v87;
    do
    {
      long long v22 = *v19;
      *(v20 - 1) = *(v19 - 1);
      *long double v20 = v22;
      v19 += 2;
      v20 += 2;
      v21 -= 4;
    }
    while (v21);
    unint64_t v17 = v87;
    if (v88 != v87) {
      goto LABEL_17;
    }
LABEL_19:
    long long v107 = 0;
    int v108 = 0;
    uint64_t v109 = 0;
    unsigned int v110 = v93;
    sub_19E2482DC((uint64_t)&v107, v18);
    uint64_t v28 = v110;
    if ((int)v110 >= 1)
    {
      uint64_t v29 = 0;
      char v30 = v107;
      if (v110 < 4) {
        goto LABEL_25;
      }
      if ((unint64_t)(v107 - (unsigned char *)v16) < 0x20) {
        goto LABEL_25;
      }
      unint64_t v31 = 0;
      uint64_t v29 = v110 & 0xFFFFFFFC;
      uint64_t v32 = (8 * v110) & 0x7FFFFFFE0;
      do
      {
        long long v33 = v16[v31 / 0x10 + 1];
        int v34 = &v30[v31];
        *int v34 = v16[v31 / 0x10];
        v34[1] = v33;
        v31 += 32;
      }
      while (v32 != v31);
      if (v29 != v28)
      {
LABEL_25:
        uint64_t v35 = v28 - v29;
        uint64_t v36 = v29 << 32;
        do
        {
          *(void *)&v30[v36 >> 29] = *(void *)((char *)v16 + (v36 >> 29));
          v36 += 0x100000000;
          --v35;
        }
        while (v35);
      }
    }
LABEL_27:
    double v37 = sub_19E2E1050(v14, (uint64_t)&v107);
    double v38 = v37;
    if (v11 < v10)
    {
      *v11++ = v37;
      uint64_t v7 = v91;
      size_t v13 = v89;
      uint64_t v105 = (uint64_t)v11;
      char v39 = v107;
      if (!v107) {
        goto LABEL_30;
      }
LABEL_29:
      int v108 = v39;
      operator delete(v39);
      goto LABEL_30;
    }
    uint64_t v40 = v11 - v9;
    unint64_t v41 = v40 + 1;
    if ((unint64_t)(v40 + 1) >> 61) {
      sub_19E13D694();
    }
    if (((char *)v10 - (char *)v9) >> 2 > v41) {
      unint64_t v41 = ((char *)v10 - (char *)v9) >> 2;
    }
    if ((unint64_t)((char *)v10 - (char *)v9) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v42 = v41;
    }
    if (v42)
    {
      if (v42 >> 61) {
        sub_19E13C418();
      }
      double v43 = operator new(8 * v42);
      double v44 = (double *)&v43[8 * v40];
      double *v44 = v38;
      uint64_t v45 = (uint64_t)(v44 + 1);
      if (v11 != v9)
      {
LABEL_41:
        unint64_t v46 = (char *)(v11 - 1) - (char *)v9;
        if (v46 < 0x168
          || &v43[(char *)v11 - (char *)v9 - 8 - (v46 & 0xFFFFFFFFFFFFFFF8)] > &v43[(char *)v11 - (char *)v9 - 8]
          || (double *)((char *)v11 - (v46 & 0xFFFFFFFFFFFFFFF8) - 8) > v11 - 1
          || (unint64_t)((char *)v9 - v43) < 0x20)
        {
          long long v47 = v11;
          uint64_t v7 = v91;
          size_t v13 = v89;
        }
        else
        {
          uint64_t v49 = (v46 >> 3) + 1;
          uint64_t v50 = 8 * (v49 & 0x3FFFFFFFFFFFFFFCLL);
          long long v47 = &v11[v50 / 0xFFFFFFFFFFFFFFF8];
          double v44 = (double *)((char *)v44 - v50);
          uint64_t v51 = &v43[8 * v40 - 16];
          uint64_t v52 = v11 - 2;
          uint64_t v53 = v49 & 0x3FFFFFFFFFFFFFFCLL;
          uint64_t v7 = v91;
          do
          {
            long long v54 = *(_OWORD *)v52;
            *(v51 - 1) = *((_OWORD *)v52 - 1);
            *uint64_t v51 = v54;
            v51 -= 2;
            v52 -= 4;
            v53 -= 4;
          }
          while (v53);
          size_t v13 = v89;
          if (v49 == (v49 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_44:
            long double v10 = (double *)&v43[8 * v42];
            int v104 = v44;
            uint64_t v105 = v45;
            unint64_t v106 = v10;
            if (!v9) {
              goto LABEL_46;
            }
LABEL_45:
            operator delete(v9);
            goto LABEL_46;
          }
        }
        do
        {
          uint64_t v48 = *((void *)v47-- - 1);
          *((void *)v44-- - 1) = v48;
        }
        while (v47 != v9);
        goto LABEL_44;
      }
    }
    else
    {
      double v43 = 0;
      double v44 = (double *)(8 * v40);
      *(double *)(8 * v40) = v37;
      uint64_t v45 = 8 * v40 + 8;
      if (v11 != v9) {
        goto LABEL_41;
      }
    }
    uint64_t v7 = v91;
    size_t v13 = v89;
    long double v10 = (double *)&v43[8 * v42];
    int v104 = v44;
    uint64_t v105 = v45;
    unint64_t v106 = v10;
    if (v9) {
      goto LABEL_45;
    }
LABEL_46:
    unint64_t v9 = v44;
    unint64_t v11 = (double *)v45;
    uint64_t v105 = v45;
    char v39 = v107;
    if (v107) {
      goto LABEL_29;
    }
LABEL_30:
    if (v16) {
      operator delete(v16);
    }
    ++v12;
    v94 += v13;
    v8 += v13;
  }
  while (v12 != v90);
  uint64_t v55 = v104;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)(a1 + 8) + 120);
  if (v55 == v11)
  {
    uint64_t v58 = v55;
    long long v62 = v100;
    signed int v63 = HIDWORD(v103);
    long long v107 = 0;
    int v108 = 0;
    uint64_t v109 = 0;
    if (HIDWORD(v103)) {
      goto LABEL_65;
    }
    goto LABEL_81;
  }
  signed int v56 = v55 + 1;
  if (v55 + 1 == v11)
  {
    uint64_t v58 = v55;
    long long v62 = v100;
    signed int v63 = HIDWORD(v103);
    long long v107 = 0;
    int v108 = 0;
    uint64_t v109 = 0;
    if (HIDWORD(v103)) {
      goto LABEL_65;
    }
    goto LABEL_81;
  }
  double v57 = *v55;
  uint64_t v58 = v55;
  signed int v59 = v55 + 1;
  do
  {
    double v60 = *v59++;
    BOOL v61 = v57 < v60;
    double v57 = fmax(v57, v60);
    if (v61) {
      uint64_t v58 = v56;
    }
    signed int v56 = v59;
  }
  while (v59 != v11);
  long long v62 = v100;
  signed int v63 = HIDWORD(v103);
  long long v107 = 0;
  int v108 = 0;
  uint64_t v109 = 0;
  if (!HIDWORD(v103))
  {
LABEL_81:
    uint64_t v74 = 0;
    LODWORD(v73) = 0;
    uint64_t v64 = 0;
    *(void *)uint64_t v96 = 0;
    uint64_t v97 = 0;
    __p = 0;
    unsigned int v98 = 0;
    goto LABEL_82;
  }
LABEL_65:
  if (v63 < 0) {
    sub_19E13D694();
  }
  uint64_t v64 = operator new(8 * v63);
  uint64_t v65 = (v58 - v55) * v63;
  bzero(v64, 8 * v63);
  if (v63 < 0xA || (uint64_t v66 = &v62[8 * v65], (unint64_t)((char *)v64 - v66) < 0x20))
  {
    unint64_t v67 = 0;
    goto LABEL_69;
  }
  unint64_t v67 = v63 & 0xFFFFFFFFFFFFFFFCLL;
  int v83 = (long long *)(v66 + 16);
  uint64_t v84 = v64 + 1;
  unint64_t v85 = v67;
  do
  {
    long long v86 = *v83;
    *(v84 - 1) = *(v83 - 1);
    _OWORD *v84 = v86;
    v83 += 2;
    v84 += 2;
    v85 -= 4;
  }
  while (v85);
  if (v67 != v63)
  {
LABEL_69:
    unint64_t v68 = v63 - v67;
    uint64_t v69 = 8 * v67;
    unint64_t v70 = (void *)v64 + v67;
    uint64_t v71 = &v62[8 * v65 + v69];
    do
    {
      uint64_t v72 = *(void *)v71;
      v71 += 8;
      *v70++ = v72;
      --v68;
    }
    while (v68);
  }
  __p = 0;
  *(void *)uint64_t v96 = 0;
  uint64_t v97 = 0;
  unsigned int v98 = v63;
  sub_19E2482DC((uint64_t)&__p, v63);
  uint64_t v73 = v98;
  uint64_t v74 = (char *)__p;
  if ((int)v98 >= 1)
  {
    uint64_t v75 = 0;
    if (v98 < 4) {
      goto LABEL_77;
    }
    if ((unint64_t)((unsigned char *)__p - (unsigned char *)v64) < 0x20) {
      goto LABEL_77;
    }
    unint64_t v76 = 0;
    uint64_t v75 = v98 & 0xFFFFFFFC;
    uint64_t v77 = (8 * v98) & 0x7FFFFFFE0;
    do
    {
      long long v78 = v64[v76 / 0x10 + 1];
      int64_t v79 = &v74[v76];
      *(_OWORD *)int64_t v79 = v64[v76 / 0x10];
      *((_OWORD *)v79 + 1) = v78;
      v76 += 32;
    }
    while (v77 != v76);
    if (v75 != v73)
    {
LABEL_77:
      uint64_t v80 = v73 - v75;
      uint64_t v81 = v75 << 32;
      do
      {
        *(void *)&v74[v81 >> 29] = *(void *)((char *)v64 + (v81 >> 29));
        v81 += 0x100000000;
        --v80;
      }
      while (v80);
    }
  }
LABEL_82:
  uint64_t v82 = *(void *)v58;
  uint64_t v99 = *(void *)v58;
  if ((void **)(a1 + 16) != &__p)
  {
    sub_19E1E5B9C((void *)(a1 + 16), v74, *(char **)v96, (uint64_t)(*(void *)v96 - (void)v74) >> 3);
    LODWORD(v73) = v98;
    uint64_t v82 = v99;
    uint64_t v74 = (char *)__p;
  }
  *(_DWORD *)(a1 + 40) = v73;
  *(void *)(a1 + 48) = v82;
  if (v74)
  {
    *(void *)uint64_t v96 = v74;
    operator delete(v74);
  }
  if (v64) {
    operator delete(v64);
  }
  if (v62) {
    operator delete(v62);
  }
  if (v55)
  {
    uint64_t v105 = (uint64_t)v55;
    operator delete(v55);
  }
}

void sub_19E2E0F94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  if (__p) {
    operator delete(__p);
  }
  if (v28) {
    operator delete(v28);
  }
  if (v29) {
    operator delete(v29);
  }
  if (a27) {
    operator delete(a27);
  }
  _Unwind_Resume(exception_object);
}

double sub_19E2E1050(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 120))
  {
    sub_19E2E1134(a1, a2, (uint64_t)__A);
    double __C = 0.0;
    vDSP_dotprD(__A[0], 1, *(const double **)(a1 + 256), 1, &__C, (int)__N);
    double v3 = __C;
    double __C = 0.0;
    vDSP_meanvD(*(const double **)(a1 + 288), 1, &__C, *(int *)(a1 + 312));
    double v4 = __C;
    if (__A[0])
    {
      __A[1] = __A[0];
      operator delete(__A[0]);
    }
    return v4 + v3;
  }
  else
  {
    __A[0] = 0;
    vDSP_meanvD(*(const double **)(a1 + 288), 1, (double *)__A, *(int *)(a1 + 312));
    return *(double *)__A;
  }
}

void sub_19E2E1118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2E1134(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *(_DWORD *)(a1 + 120);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 24) = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  if (v3)
  {
    if (v3 < 0) {
      sub_19E13D694();
    }
    uint64_t v5 = v3;
    long double v6 = (char *)operator new(8 * v3);
    bzero(v6, 8 * v3);
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    *(void *)a3 = v6;
    *(void *)(a3 + 8) = &v6[8 * v3];
    *(void *)(a3 + 16) = &v6[8 * v3];
    *(_DWORD *)(a3 + 24) = v3;
    double v26 = v6;
    while (1)
    {
      uint64_t v9 = *(void *)(a1 + 96);
      signed int v10 = *(_DWORD *)(a1 + 124);
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      if (!v10)
      {
        unint64_t v11 = 0;
        uint64_t v29 = 0;
        char v30 = 0;
        __p = 0;
        signed int v31 = 0;
        goto LABEL_14;
      }
      if (v10 < 0) {
        sub_19E13D694();
      }
      unint64_t v11 = operator new(8 * v10);
      bzero(v11, 8 * v10);
      if (v10 >= 8 && (unint64_t)v11 - v9 - 8 * v8 * v10 >= 0x20)
      {
        unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL;
        unint64_t v21 = (long long *)(v9 + v7 * v10 + 16);
        long long v22 = v11 + 1;
        unint64_t v23 = v12;
        do
        {
          long long v24 = *v21;
          *(v22 - 1) = *(v21 - 1);
          _OWORD *v22 = v24;
          v21 += 2;
          v22 += 2;
          v23 -= 4;
        }
        while (v23);
        if (v12 == v10) {
          goto LABEL_12;
        }
      }
      else
      {
        unint64_t v12 = 0;
      }
      unint64_t v13 = v10 - v12;
      uint64_t v14 = 8 * v12;
      double v15 = (void *)v11 + v12;
      uint64_t v16 = (uint64_t *)(v9 + v14 + v7 * v10);
      do
      {
        uint64_t v17 = *v16++;
        *v15++ = v17;
        --v13;
      }
      while (v13);
LABEL_12:
      __p = 0;
      uint64_t v29 = 0;
      signed int v31 = 0;
      char v30 = 0;
      __p = operator new(8 * v10);
      uint64_t v29 = (char *)__p + 8 * v10;
      char v30 = v29;
      signed int v31 = v10;
      memcpy(__p, v11, 8 * v10);
      long double v6 = v26;
LABEL_14:
      double v18 = sub_19E2E13F4(a1 + 8, (uint64_t)&__p, a2);
      double v19 = *(double *)(a1 + 24);
      *(long double *)&v6[8 * v8] = (v18 + 1.0 + v20) * (exp(-v18) * v19);
      if (__p)
      {
        uint64_t v29 = (char *)__p;
        operator delete(__p);
      }
      if (v11) {
        operator delete(v11);
      }
      ++v8;
      v7 += 8;
      if (v8 == v5) {
        return;
      }
    }
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 24) = 0;
}

void sub_19E2E1380(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E13A9BC(a1);
}

void sub_19E2E13A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
  {
    operator delete(__p);
    if (!v14)
    {
LABEL_3:
      *(void *)(a10 + 8) = a11;
      operator delete(a11);
      _Unwind_Resume(a1);
    }
  }
  else if (!v14)
  {
    goto LABEL_3;
  }
  operator delete(v14);
  *(void *)(a10 + 8) = a11;
  operator delete(a11);
  _Unwind_Resume(a1);
}

double sub_19E2E13F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(const void **)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  int64_t v8 = v6 - *(void *)a2;
  if (v6 == *(void *)a2)
  {
    signed int v10 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    if (v8 < 0) {
      sub_19E13D694();
    }
    uint64_t v9 = (char *)operator new(v6 - *(void *)a2);
    signed int v10 = &v9[8 * (v8 >> 3)];
    memcpy(v9, v7, v8);
  }
  int v11 = *(_DWORD *)(a2 + 24);
  vDSP_vdivD(*(const double **)(a1 + 24), 1, (const double *)v9, 1, (double *)v9, 1, v11);
  int64_t v12 = v10 - v9;
  if (v12)
  {
    if (v12 < 0) {
      sub_19E13D694();
    }
    unint64_t v13 = (char *)operator new(v12);
    uint64_t v14 = &v13[8 * (v12 >> 3)];
    memcpy(v13, v9, v12);
    if (v9) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v14 = 0;
    unint64_t v13 = 0;
    if (v9) {
LABEL_8:
    }
      operator delete(v9);
  }
  uint64_t v16 = *(const void **)a3;
  uint64_t v15 = *(void *)(a3 + 8);
  int64_t v17 = v15 - *(void *)a3;
  if (v15 == *(void *)a3)
  {
    double v19 = 0;
    double v18 = 0;
  }
  else
  {
    if (v17 < 0) {
      sub_19E13D694();
    }
    double v18 = (char *)operator new(v15 - *(void *)a3);
    double v19 = &v18[8 * (v17 >> 3)];
    memcpy(v18, v16, v17);
  }
  vDSP_vdivD(*(const double **)(a1 + 24), 1, (const double *)v18, 1, (double *)v18, 1, *(int *)(a3 + 24));
  if (v19 == v18)
  {
    double v20 = 0;
    if (v18) {
LABEL_18:
    }
      operator delete(v18);
  }
  else
  {
    if (v19 - v18 < 0) {
      sub_19E13D694();
    }
    double v20 = operator new(v19 - v18);
    memcpy(v20, v18, v19 - v18);
    if (v18) {
      goto LABEL_18;
    }
  }
  uint64_t v21 = v14 - v13;
  if (v14 == v13)
  {
    unint64_t v23 = 0;
    long long v22 = 0;
  }
  else
  {
    if (v21 < 0) {
      sub_19E13D694();
    }
    long long v22 = (char *)operator new(v14 - v13);
    unint64_t v23 = &v22[8 * (v21 >> 3)];
    memcpy(v22, v13, v14 - v13);
  }
  vDSP_vsubD((const double *)v20, 1, (const double *)v22, 1, (double *)v22, 1, v11);
  size_t v24 = v23 - v22;
  if (v23 == v22)
  {
    int64_t v25 = 0;
  }
  else
  {
    if ((v24 & 0x8000000000000000) != 0) {
      sub_19E13D694();
    }
    int64_t v25 = operator new(v23 - v22);
    memcpy(v25, v22, v24);
  }
  cblas_dnrm2_NEWLAPACK();
  double v27 = v26;
  if (v25) {
    operator delete(v25);
  }
  if (v22) {
    operator delete(v22);
  }
  if (v20) {
    operator delete(v20);
  }
  if (v13) {
    operator delete(v13);
  }
  return v27 * 2.23606798;
}

void sub_19E2E1748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (v25) {
    operator delete(v25);
  }
  if (v26) {
    operator delete(v26);
  }
  if (v24) {
    operator delete(v24);
  }
  if (v23) {
    operator delete(v23);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2E1824(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (a26) {
    JUMPOUT(0x19E2E1818);
  }
  JUMPOUT(0x19E2E181CLL);
}

uint64_t sub_19E2E1838(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  sub_19E246830(&v13, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 4));
  __p = 0;
  int64_t v17 = 0;
  uint64_t v18 = 0;
  sub_19E246A1C(&__p, a3[3], a3[4], 0xCCCCCCCCCCCCCCCDLL * ((a3[4] - a3[3]) >> 3));
  sub_19E2E19D4((void *)a1, a2, (uint64_t *)&v13);
  uint64_t v6 = (void **)__p;
  if (__p)
  {
    uint64_t v7 = v17;
    int64_t v8 = __p;
    if (v17 != __p)
    {
      do
      {
        if (*((char *)v7 - 17) < 0) {
          operator delete(*(v7 - 5));
        }
        v7 -= 5;
      }
      while (v7 != v6);
      int64_t v8 = __p;
    }
    int64_t v17 = v6;
    operator delete(v8);
  }
  uint64_t v9 = (void **)v13;
  if (v13)
  {
    signed int v10 = v14;
    int v11 = v13;
    if (v14 != v13)
    {
      do
      {
        if (*((char *)v10 - 25) < 0) {
          operator delete(*(v10 - 6));
        }
        v10 -= 6;
      }
      while (v10 != v9);
      int v11 = v13;
    }
    uint64_t v14 = v9;
    operator delete(v11);
  }
  *(void *)a1 = &unk_1EF0A8288;
  *(_DWORD *)(a1 + 64) = 5;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 72) = 0;
  return a1;
}

void sub_19E2E19A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_19E2E19B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    sub_19E32FAD8((uint64_t)&a9, a9);
  }
  _Unwind_Resume(exception_object);
}

void *sub_19E2E19D4(void *a1, uint64_t a2, uint64_t *a3)
{
  *a1 = &unk_1EF0A83A8;
  a1[1] = a2;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  sub_19E246830(a1 + 2, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 4));
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  sub_19E246A1C(a1 + 5, a3[3], a3[4], 0xCCCCCCCCCCCCCCCDLL * ((a3[4] - a3[3]) >> 3));
  return a1;
}

void sub_19E2E1A74(_Unwind_Exception *exception_object)
{
  if (*v2) {
    sub_19E32FD88(v1, *v2);
  }
  _Unwind_Resume(exception_object);
}

void *sub_19E2E1A94(void *a1)
{
  *a1 = &unk_1EF0A8288;
  uint64_t v2 = (char **)a1[9];
  if (v2)
  {
    int v3 = (char **)a1[10];
    double v4 = v2;
    if (v3 != v2)
    {
      do
        int v3 = sub_19E2470C8(v3 - 13);
      while (v3 != v2);
      double v4 = (char **)a1[9];
    }
    a1[10] = v2;
    operator delete(v4);
  }

  return sub_19E2E2148(a1);
}

void sub_19E2E1B1C(void *a1)
{
  *a1 = &unk_1EF0A8288;
  uint64_t v2 = (char **)a1[9];
  if (v2)
  {
    int v3 = (char **)a1[10];
    double v4 = v2;
    if (v3 != v2)
    {
      do
        int v3 = sub_19E2470C8(v3 - 13);
      while (v3 != v2);
      double v4 = (char **)a1[9];
    }
    a1[10] = v2;
    operator delete(v4);
  }
  uint64_t v5 = sub_19E2E2148(a1);

  operator delete(v5);
}

void sub_19E2E1BA8(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  sub_19E2E2220(a1);
  uint64_t v6 = *(void *)(a1 + 72);
  if (v6 == *(void *)(a1 + 80))
  {
    uint64_t v39 = a3;
    sub_19E29CB00(a2, &v52);
    sub_19E2E2518(a2, (uint64_t)v49);
    uint64_t v7 = v50;
    if (v50 != v51)
    {
      do
      {
        uint64_t v8 = *(void *)((char *)v7 + 28);
        sub_19E291E68(v48, &v52[12 * (int)v8]);
        if (SHIDWORD(v8) >= 1)
        {
          int v9 = 0;
          unsigned int v10 = HIDWORD(v8) & ~(v8 >> 63);
          do
          {
            sub_19E2E2658(a1, (uint64_t *)v48, (uint64_t **)&__A);
            sub_19E2460A4((char **)v48, (uint64_t)&__A);
            sub_19E15A064((uint64_t)v47, v47[1]);
            sub_19E15A064((uint64_t)v46, v46[1]);
            int v11 = (char *)__p;
            if (__p)
            {
              int64_t v12 = v45;
              unint64_t v13 = __p;
              if (v45 != __p)
              {
                do
                {
                  uint64_t v14 = (void *)*((void *)v12 - 4);
                  if (v14)
                  {
                    *((void *)v12 - 3) = v14;
                    operator delete(v14);
                  }
                  if (*(v12 - 33) < 0) {
                    operator delete(*((void **)v12 - 7));
                  }
                  v12 -= 56;
                }
                while (v12 != v11);
                unint64_t v13 = __p;
              }
              uint64_t v45 = v11;
              operator delete(v13);
            }
            uint64_t v15 = __A;
            if (*(double *)&__A != 0.0)
            {
              uint64_t v16 = v43;
              int64_t v17 = __A;
              if (v43 != __A)
              {
                do
                {
                  uint64_t v18 = (void *)*((void *)v16 - 4);
                  if (v18)
                  {
                    *((void *)v16 - 3) = v18;
                    operator delete(v18);
                  }
                  if (*((char *)v16 - 33) < 0) {
                    operator delete(*((void **)v16 - 7));
                  }
                  v16 -= 7;
                }
                while (v16 != v15);
                int64_t v17 = __A;
              }
              double v43 = v15;
              operator delete(v17);
            }
            unint64_t v41 = 0;
            uint64_t v19 = *(void *)(a1 + 8);
            sub_19E29CE6C((long long **)v48, (uint64_t)v40);
            uint64_t v20 = *(void *)(v19 + 8);
            if (*(_DWORD *)(v20 + 120))
            {
              sub_19E2E1134(*(void *)(v19 + 8), (uint64_t)v40, (uint64_t)&__A);
              __C[0] = 0.0;
              vDSP_dotprD(__A, 1, *(const double **)(v20 + 256), 1, __C, (int)__p);
              double v21 = __C[0];
              __C[0] = 0.0;
              vDSP_meanvD(*(const double **)(v20 + 288), 1, __C, *(int *)(v20 + 312));
              double v22 = __C[0];
              sub_19E2E2B30(v20, (uint64_t)v40, (uint64_t)&__A);
              double v24 = v23;
              double v25 = *(double *)(v20 + 16);
              if (*(double *)&__A != 0.0)
              {
                double v43 = __A;
                operator delete(__A);
              }
              double v26 = v22 + v21;
              double v27 = v25 + v24;
            }
            else
            {
              *(double *)&__A = 0.0;
              vDSP_meanvD(*(const double **)(v20 + 288), 1, (double *)&__A, *(int *)(v20 + 312));
              double v26 = *(double *)&__A;
              double v27 = sub_19E2E2A54(v20, (uint64_t)v40);
            }
            double v28 = sqrt(v27);
            if (v28 < 0.00000001 || (int v29 = *(_DWORD *)(*(void *)(v19 + 8) + 120), v29 <= 0))
            {
              double v30 = (*(double (**)(uint64_t))(*(void *)v19 + 8))(v19);
            }
            else
            {
              if (*(_DWORD *)(v19 + 56) != v29) {
                (*(void (**)(uint64_t))(*(void *)v19 + 16))(v19);
              }
              (**(void (***)(uint64_t, double, double))v19)(v19, v26, v28);
            }
            signed int v31 = *(uint64_t **)&v30;
            if (v40[0])
            {
              v40[1] = v40[0];
              operator delete(v40[0]);
            }
            unint64_t v41 = v31;
            sub_19E29D218((int *)(a1 + 64), (uint64_t *)v48, &v41);
            ++v9;
          }
          while (v10 != v9);
        }
        sub_19E2470C8((char **)v48);
        uint64_t v32 = (void *)v7[1];
        if (v32)
        {
          do
          {
            uint64_t v33 = (void **)v32;
            uint64_t v32 = (void *)*v32;
          }
          while (v32);
        }
        else
        {
          do
          {
            uint64_t v33 = (void **)v7[2];
            BOOL v34 = *v33 == v7;
            uint64_t v7 = v33;
          }
          while (!v34);
        }
        uint64_t v7 = v33;
      }
      while (v33 != v51);
    }
    uint64_t v35 = *(uint64_t **)(a1 + 72);
    sub_19E291E68((uint64_t **)v39, v35);
    *(void *)(v39 + 96) = v35[12];
    sub_19E29D74C(*(char ***)(a1 + 72), *(void *)(a1 + 80), (uint64_t)v48, 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 3));
    *(void *)(a1 + 80) = sub_19E2470C8((char **)(*(void *)(a1 + 80) - 104));
    sub_19E13C56C((uint64_t)&v50, v51[0]);
    uint64_t v36 = (char **)v52;
    if (v52)
    {
      double v37 = v53;
      double v38 = v52;
      if (v53 != (char **)v52)
      {
        do
          double v37 = sub_19E2470C8(v37 - 12);
        while (v37 != v36);
        double v38 = v52;
      }
      uint64_t v53 = v36;
      operator delete(v38);
    }
  }
  else
  {
    sub_19E291E68((uint64_t **)a3, *(uint64_t **)(a1 + 72));
    *(void *)(a3 + 96) = *(void *)(v6 + 96);
    sub_19E29D74C(*(char ***)(a1 + 72), *(void *)(a1 + 80), (uint64_t)v48, 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 3));
    *(void *)(a1 + 80) = sub_19E2470C8((char **)(*(void *)(a1 + 80) - 104));
  }
}

void sub_19E2E2064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  sub_19E2470C8(v28);
  sub_19E13C56C(a10, *(void **)(v29 - 184));
  sub_19E2462FC((void **)(v29 - 168));
  _Unwind_Resume(a1);
}

void sub_19E2E20FC(char *a1@<X8>)
{
  a1[23] = 17;
  strcpy(a1, "genetic_optimizer");
}

void sub_19E2E2120(char *a1@<X8>)
{
  a1[23] = 21;
  strcpy(a1, "acquisition_optimizer");
}

void *sub_19E2E2148(void *a1)
{
  *a1 = &unk_1EF0A83A8;
  uint64_t v2 = a1[5];
  if (v2)
  {
    uint64_t v3 = a1[6];
    double v4 = (void *)a1[5];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 17) < 0) {
          operator delete(*(void **)(v3 - 40));
        }
        v3 -= 40;
      }
      while (v3 != v2);
      double v4 = (void *)a1[5];
    }
    a1[6] = v2;
    operator delete(v4);
  }
  uint64_t v5 = a1[2];
  if (v5)
  {
    uint64_t v6 = a1[3];
    uint64_t v7 = (void *)a1[2];
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 25) < 0) {
          operator delete(*(void **)(v6 - 48));
        }
        v6 -= 48;
      }
      while (v6 != v5);
      uint64_t v7 = (void *)a1[2];
    }
    a1[3] = v5;
    operator delete(v7);
  }
  return a1;
}

void sub_19E2E2220(uint64_t a1)
{
  int v18 = 5;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v19 = 0;
  uint64_t v3 = *(void *)(a1 + 72);
  uint64_t v2 = (uint64_t *)(a1 + 72);
  if (v3 == *(void *)(a1 + 80))
  {
    int64_t v12 = 0;
    *(_DWORD *)(a1 + 64) = 5;
    if ((int *)(a1 + 64) == &v18) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  do
  {
    sub_19E291E68(v17, (uint64_t *)v3);
    v17[12] = *(uint64_t **)(v3 + 96);
    sub_19E29D74C(*(char ***)(a1 + 72), *(void *)(a1 + 80), (uint64_t)__p, 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 3));
    *(void *)(a1 + 80) = sub_19E2470C8((char **)(*(void *)(a1 + 80) - 104));
    uint64_t v16 = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    sub_19E29CE6C((long long **)v17, (uint64_t)__p);
    v5.n128_f64[0] = sub_19E2E2948(*(void *)(v4 + 8), (uint64_t)__p);
    double v7 = sqrt(v6);
    if (v7 < 0.00000001 || (int v8 = *(_DWORD *)(*(void *)(v4 + 8) + 120), v8 <= 0))
    {
      double v10 = (*(double (**)(uint64_t, __n128))(*(void *)v4 + 8))(v4, v5);
    }
    else
    {
      double v9 = v5.n128_f64[0];
      if (*(_DWORD *)(v4 + 56) != v8) {
        (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
      }
      (**(void (***)(uint64_t, double, double))v4)(v4, v9, v7);
    }
    *(double *)&int v11 = v10;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    uint64_t v16 = v11;
    if (*(double *)&v11 > (*(double (**)(void))(**(void **)(a1 + 8) + 8))(*(void *)(a1 + 8))) {
      sub_19E29D218(&v18, (uint64_t *)v17, &v16);
    }
    sub_19E2470C8((char **)v17);
    uint64_t v3 = *(void *)(a1 + 72);
  }
  while (v3 != *(void *)(a1 + 80));
  int64_t v12 = v19;
  *(_DWORD *)(a1 + 64) = v18;
  if ((int *)(a1 + 64) != &v18)
  {
LABEL_17:
    sub_19E29D4FC(v2, v12, v20, 0x4EC4EC4EC4EC4EC5 * (v20 - v12));
    int64_t v12 = v19;
  }
LABEL_18:
  if (v12)
  {
    unint64_t v13 = (char **)v20;
    uint64_t v14 = v12;
    if (v20 != v12)
    {
      do
        unint64_t v13 = sub_19E2470C8(v13 - 13);
      while (v13 != (char **)v12);
      uint64_t v14 = v19;
    }
    uint64_t v20 = v12;
    operator delete(v14);
  }
}

void sub_19E2E24B4(_Unwind_Exception *a1)
{
  sub_19E29C7AC(v1 - 120);
  _Unwind_Resume(a1);
}

void sub_19E2E24C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_19E2470C8((char **)va);
  sub_19E29C7AC(v7 - 120);
  _Unwind_Resume(a1);
}

void sub_19E2E24EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *a15)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E2470C8(&a15);
  sub_19E29C7AC(v15 - 120);
  _Unwind_Resume(a1);
}

void sub_19E2E2518(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = a2 + 16;
  *(void *)(a2 + 24) = 0;
  sub_19E29DC58(a1, __p);
  sub_19E2459C8(v7, (uint64_t *)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v3 = 50;
  do
  {
    int v5 = sub_19E29E07C((uint64_t)v9, (uint64_t)v7, v9);
    uint64_t v4 = sub_19E29DD48((int *)a2, &v5);
    ++*(_DWORD *)v4;
    --v3;
  }
  while (v3);
  if (v9[0])
  {
    v9[1] = v9[0];
    operator delete(v9[0]);
  }
  std::random_device::~random_device(&v8);
}

void sub_19E2E25F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14)
{
  if (__p)
  {
    operator delete(__p);
    sub_19E13C56C(v14, *v15);
    _Unwind_Resume(a1);
  }
  sub_19E13C56C(v14, *v15);
  _Unwind_Resume(a1);
}

void sub_19E2E2658(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t **a3@<X8>)
{
  sub_19E291E68(a3, a2);
  sub_19E29E298((long long **)a2, (uint64_t)v8);
  sub_19E2E27E8(a1, (uint64_t *)v8, v9);
  sub_19E29E624((uint64_t)a2, (uint64_t)v6);
  sub_19E2E2898(a1, (uint64_t *)v6, __p);
  sub_19E29E900((uint64_t *)a3, (uint64_t *)v9);
  sub_19E29EAC0((uint64_t)a3, (uint64_t *)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v6[0])
  {
    v6[1] = v6[0];
    operator delete(v6[0]);
  }
  if (*(void *)&v9[0])
  {
    *((void *)&v9[0] + 1) = *(void *)&v9[0];
    operator delete(*(void **)&v9[0]);
  }
  if (v8[0])
  {
    v8[1] = v8[0];
    operator delete(v8[0]);
  }
}

void sub_19E2E2728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v21 = *(void **)(v19 - 64);
    if (!v21)
    {
LABEL_3:
      double v22 = a17;
      if (!a17) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v21 = *(void **)(v19 - 64);
    if (!v21) {
      goto LABEL_3;
    }
  }
  *(void *)(v19 - 56) = v21;
  operator delete(v21);
  double v22 = a17;
  if (!a17)
  {
LABEL_4:
    sub_19E2470C8(v18);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(v22);
  sub_19E2470C8(v18);
  _Unwind_Resume(a1);
}

double sub_19E2E27E8@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  int v5 = (uint64_t *)(a1 + 16);
  if (sub_19E244298((uint64_t *)(a1 + 16)))
  {
    sub_19E244360(v5, (uint64_t *)v7);
    sub_19E310AEC(a2, (uint64_t)v7, (uint64_t)a3);
    if (__p)
    {
      double v9 = __p;
      operator delete(__p);
    }
    if (v7[0])
    {
      v7[1] = v7[0];
      operator delete(v7[0]);
    }
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

void sub_19E2E2884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double sub_19E2E2898@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v5 = a1 + 16;
  if (sub_19E244DC4(a1 + 16))
  {
    sub_19E244E8C(v5, (uint64_t *)v7);
    sub_19E311780(a2, (uint64_t *)v7, (uint64_t)a3);
    if (__p)
    {
      double v9 = __p;
      operator delete(__p);
    }
    if (v7[0])
    {
      v7[1] = v7[0];
      operator delete(v7[0]);
    }
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

void sub_19E2E2934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double sub_19E2E2948(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 120))
  {
    sub_19E2E1134(a1, a2, (uint64_t)__A);
    double __C = 0.0;
    vDSP_dotprD(__A[0], 1, *(const double **)(a1 + 256), 1, &__C, (int)__N);
    double v4 = __C;
    double __C = 0.0;
    vDSP_meanvD(*(const double **)(a1 + 288), 1, &__C, *(int *)(a1 + 312));
    double v5 = __C;
    sub_19E2E2B30(a1, a2, (uint64_t)__A);
    if (__A[0])
    {
      __A[1] = __A[0];
      operator delete(__A[0]);
    }
    return v5 + v4;
  }
  else
  {
    double v6 = sub_19E2E1050(a1, a2);
    sub_19E2E2A54(a1, a2);
  }
  return v6;
}

void sub_19E2E2A34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_19E2E2A54(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 120))
  {
    sub_19E2E1134(a1, a2, (uint64_t)__p);
    sub_19E2E2B30(a1, a2, (uint64_t)__p);
    double v5 = v4;
    double v6 = *(double *)(a1 + 16);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    return v6 + v5;
  }
  else
  {
    double v8 = sub_19E2E13F4(a1 + 8, a2, a2);
    double v9 = *(double *)(a1 + 24);
    return *(double *)(a1 + 16) + exp(-v8) * v9 * (v8 + 1.0 + v10);
  }
}

void sub_19E2E2B14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2E2B30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_19E29F880(a1 + 192, (uint64_t)__p);
  uint64_t v6 = *(unsigned int *)(a1 + 216);
  if ((int)v6 >= 1)
  {
    uint64_t v7 = 0;
    int v8 = *(_DWORD *)(a1 + 220);
    int v9 = v24;
    int v10 = 1;
    int v11 = -1;
    int64_t v12 = __p[0];
    do
    {
      if (v8 <= v10) {
        int v13 = v10;
      }
      else {
        int v13 = v8;
      }
      int v14 = v7 + 1;
      if ((int)v7 + 1 >= v8) {
        goto LABEL_3;
      }
      unsigned int v15 = 0;
      int v16 = v13 + v11;
      uint64_t v17 = (int)v7 * (uint64_t)v9;
      if ((v13 + v11) < 4)
      {
        int v18 = v7 + 1;
      }
      else
      {
        int v18 = v7 + 1;
        if (v13 - (int)v7 + v10 - 2 >= v10)
        {
          int v19 = 0;
          unsigned int v15 = v16 & 0xFFFFFFFC;
          int v18 = v14 + (v16 & 0xFFFFFFFC);
          do
          {
            uint64_t v20 = &v12[v17 + v10 + v19];
            *uint64_t v20 = 0uLL;
            v20[1] = 0uLL;
            v19 += 4;
          }
          while ((v16 & 0xFFFFFFFC) != v19);
          if (v16 == v15) {
            goto LABEL_3;
          }
        }
      }
      unsigned int v21 = v13 - v15;
      do
      {
        v12[v17 + v18] = 0;
        int v18 = ++v15 + v14;
        --v21;
      }
      while (v10 != v21);
LABEL_3:
      ++v7;
      ++v10;
      --v11;
    }
    while (v7 != v6);
  }
  sub_19E29F6FC((uint64_t)__p, a3, (uint64_t)__B);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  double v22 = sub_19E2E13F4(a1 + 8, a2, a2);
  __p[0] = 0;
  vDSP_dotprD(__B[0], 1, __B[0], 1, (double *)__p, (int)__N);
  if (__B[0])
  {
    __B[1] = __B[0];
    operator delete(__B[0]);
  }
  exp(-v22);
}

void sub_19E2E2D08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E2E2D38(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  BOOL v34 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  sub_19E246830(&v34, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 4));
  __p = 0;
  double v38 = 0;
  uint64_t v39 = 0;
  sub_19E246A1C(&__p, a3[3], a3[4], 0xCCCCCCCCCCCCCCCDLL * ((a3[4] - a3[3]) >> 3));
  sub_19E2E19D4((void *)a1, a2, (uint64_t *)&v34);
  int v8 = (void **)__p;
  if (__p)
  {
    int v9 = v38;
    int v10 = __p;
    if (v38 != __p)
    {
      do
      {
        if (*((char *)v9 - 17) < 0) {
          operator delete(*(v9 - 5));
        }
        v9 -= 5;
      }
      while (v9 != v8);
      int v10 = __p;
    }
    double v38 = v8;
    operator delete(v10);
  }
  int v11 = (void **)v34;
  if (v34)
  {
    int64_t v12 = v35;
    int v13 = v34;
    if (v35 != v34)
    {
      do
      {
        if (*((char *)v12 - 25) < 0) {
          operator delete(*(v12 - 6));
        }
        v12 -= 6;
      }
      while (v12 != v11);
      int v13 = v34;
    }
    uint64_t v35 = v11;
    operator delete(v13);
  }
  *(void *)a1 = &unk_1EF0A80A8;
  unsigned int v14 = sub_19E244298(a3);
  sub_19E2A099C(a1 + 64, v14);
  sub_19E299010(a1 + 184);
  sub_19E244360(a3, (uint64_t *)v32);
  sub_19E2A16E8(a1 + 64, (uint64_t *)v32);
  sub_19E2A1818(a1 + 64, (uint64_t *)v33);
  if (v33[0])
  {
    v33[1] = v33[0];
    operator delete(v33[0]);
  }
  if (v32[0])
  {
    v32[1] = v32[0];
    operator delete(v32[0]);
  }
  if ((a4 & 0xFF00000000) != 0)
  {
    uint64_t v15 = 0;
    *(_DWORD *)(a1 + 7776) = a4;
    uint64_t v16 = 1;
    unsigned int v17 = a4;
    do
    {
      int v18 = 1812433253 * (v17 ^ (v17 >> 30));
      unsigned int v17 = v18 + v16;
      *(_DWORD *)(a1 + 7780 + 4 * v15) = v15 + v18 + 1;
      ++v16;
      ++v15;
    }
    while (v15 != 623);
    *(void *)(a1 + 10272) = 0;
    *(_DWORD *)(a1 + 184) = a4;
    uint64_t v19 = 1;
    uint64_t v20 = 47;
    unsigned int v21 = a4;
    do
    {
      int v22 = 1812433253 * (v21 ^ (v21 >> 30));
      unsigned int v21 = v22 + v19;
      *(_DWORD *)(a1 + 4 * v20) = v20 + v22 - 46;
      ++v19;
      ++v20;
    }
    while (v20 != 670);
    uint64_t v23 = 0;
    *(void *)(a1 + 2680) = 0;
    *(_DWORD *)(a1 + 2712) = a4;
    uint64_t v24 = 1;
    unsigned int v25 = a4;
    do
    {
      int v26 = 1812433253 * (v25 ^ (v25 >> 30));
      unsigned int v25 = v26 + v24;
      *(_DWORD *)(a1 + 2716 + 4 * v23) = v23 + v26 + 1;
      ++v24;
      ++v23;
    }
    while (v23 != 623);
    uint64_t v27 = 0;
    *(void *)(a1 + 5208) = 0;
    *(_DWORD *)(a1 + 5232) = a4;
    uint64_t v28 = 1;
    unsigned int v29 = a4;
    do
    {
      int v30 = 1812433253 * (v29 ^ (v29 >> 30));
      unsigned int v29 = v30 + v28;
      *(_DWORD *)(a1 + 5236 + 4 * v27) = v27 + v30 + 1;
      ++v28;
      ++v27;
    }
    while (v27 != 623);
    *(void *)(a1 + 7728) = 0;
    sub_19E312C64();
  }
  return a1;
}

void sub_19E2E301C(_Unwind_Exception *a1)
{
  sub_19E2A0A3C(v2);
  sub_19E2E2148(v1);
  _Unwind_Resume(a1);
}

void sub_19E2E3088(_Unwind_Exception *a1)
{
  sub_19E2E2148(v1);
  _Unwind_Resume(a1);
}

void sub_19E2E30A0(uint64_t a1)
{
  uint64_t v1 = sub_19E2E35E8(a1);

  operator delete(v1);
}

void sub_19E2E30C8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v12 = 0u;
  memset(v11, 0, sizeof(v11));
  *(void *)&long long v12 = (char *)&v12 + 8;
  v15[0] = 0;
  v15[1] = 0;
  uint64_t v13 = 0;
  unsigned int v14 = v15;
  double v4 = (*(double (**)(void))(**(void **)(a1 + 8) + 8))(*(void *)(a1 + 8));
  sub_19E291E68((uint64_t **)a2, (uint64_t *)v11);
  *(double *)(a2 + 96) = v4;
  sub_19E2470C8((char **)v11);
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v16 = 0;
  sub_19E246830(&v16, *(void *)(a1 + 16), *(void *)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 4));
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  sub_19E246A1C(&v19, *(void *)(a1 + 40), *(void *)(a1 + 48), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 3));
  sub_19E2459CC((uint64_t *)&v16, a1 + 184, 5, (char **)&v22);
  double v5 = v19;
  if (v19)
  {
    uint64_t v6 = v20;
    uint64_t v7 = v19;
    if (v20 != v19)
    {
      do
      {
        if (*((char *)v6 - 17) < 0) {
          operator delete(*(v6 - 5));
        }
        v6 -= 5;
      }
      while (v6 != v5);
      uint64_t v7 = v19;
    }
    uint64_t v20 = v5;
    operator delete(v7);
  }
  uint64_t v8 = (uint64_t)v16;
  if (v16)
  {
    uint64_t v9 = v17;
    int v10 = v16;
    if ((void *)v17 != v16)
    {
      do
      {
        if (*(char *)(v9 - 25) < 0) {
          operator delete(*(void **)(v9 - 48));
        }
        v9 -= 48;
      }
      while (v9 != v8);
      int v10 = v16;
    }
    uint64_t v17 = v8;
    operator delete(v10);
  }
  sub_19E2E36C0(a1, v22);
}

void sub_19E2E3510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v8 = va_arg(va1, char *);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  sub_19E2470C8((char **)va1);
  sub_19E2470C8((char **)va);
  sub_19E2462FC((void **)(v6 - 112));
  sub_19E2470C8(v5);
  _Unwind_Resume(a1);
}

void sub_19E2E35C8(char *a1@<X8>)
{
  a1[23] = 16;
  strcpy(a1, "direct_optimizer");
}

void *sub_19E2E35E8(uint64_t a1)
{
  *(void *)a1 = &unk_1EF0A80A8;
  std::random_device::~random_device((std::random_device *)(a1 + 10280));
  std::random_device::~random_device((std::random_device *)(a1 + 7736));
  std::random_device::~random_device((std::random_device *)(a1 + 5216));
  std::random_device::~random_device((std::random_device *)(a1 + 2688));
  *(void *)(a1 + 64) = &unk_1EF0A7F70;
  sub_19E311F9C(*(void *)(a1 + 72));
  uint64_t v2 = *(void **)(a1 + 128);
  if (v2)
  {
    *(void *)(a1 + 136) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 104);
  if (v3)
  {
    *(void *)(a1 + 112) = v3;
    operator delete(v3);
  }
  double v4 = *(void **)(a1 + 80);
  if (v4)
  {
    *(void *)(a1 + 88) = v4;
    operator delete(v4);
  }

  return sub_19E2E2148((void *)a1);
}

void sub_19E2E36C0(uint64_t a1, long long **a2)
{
  v4[0] = a1;
  v4[1] = a2;
  uint64_t v2 = a1 + 64;
  sub_19E29E298(a2, (uint64_t)&__p);
  sub_19E2E3A90(v2, (uint64_t)v4, (uint64_t)&__p);
}

void sub_19E2E39B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a13)
  {
    operator delete(a13);
    uint64_t v24 = __p;
    if (!__p)
    {
LABEL_4:
      sub_19E2470C8((char **)&a21);
      unsigned int v25 = *(void **)(v22 - 128);
      if (v25)
      {
        *(void *)(v22 - 120) = v25;
        operator delete(v25);
      }
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v24 = __p;
    if (!__p) {
      goto LABEL_4;
    }
  }
  operator delete(v24);
  goto LABEL_4;
}

void sub_19E2E3A90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a1 + 112)) {
    (**(void (***)(uint64_t, void))a1)(a1, *(unsigned int *)(a3 + 24));
  }
  operator new();
}

void sub_19E2E3F24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  __cxa_free_exception(v15);
  if (a2 != 3)
  {
    if (a2 == 2)
    {
      uint64_t v19 = __cxa_begin_catch(a1);
      (*(void (**)(void *))(*(void *)v19 + 16))(v19);
      sub_19E29FAE8(v14, (uint64_t)&a13);
      if (a13)
      {
        a14 = (uint64_t)a13;
        operator delete(a13);
      }
      __cxa_end_catch();
LABEL_13:
      JUMPOUT(0x19E2E3D0CLL);
    }
    if (a2 != 1)
    {
      if (__p) {
        operator delete(__p);
      }
      _Unwind_Resume(a1);
    }
  }
  uint64_t v18 = __cxa_begin_catch(a1);
  (*(void (**)(void *))(*(void *)v18 + 16))(v18);
  __cxa_end_catch();
  goto LABEL_13;
}

void sub_19E2E4074(uint64_t **a1, void *a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  double v5 = a1[1];
  unint64_t v7 = (char *)v5 - (char *)*a1;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  __p = 0;
  int v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  if (!(v7 >> 3))
  {
    uint64_t v8 = 0;
    __p = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    int v20 = v7 >> 3;
    if (v6 == v5) {
      goto LABEL_13;
    }
    goto LABEL_6;
  }
  if (((v7 >> 3) & 0x80000000) != 0) {
    sub_19E13D694();
  }
  uint64_t v8 = operator new((uint64_t)(v7 << 29) >> 29);
  bzero(v8, (uint64_t)(v7 << 29) >> 29);
  __p = v8;
  uint64_t v18 = (char *)v8 + ((uint64_t)(v7 << 29) >> 29);
  uint64_t v19 = (char *)v8 + 8 * (int)((uint64_t)v7 >> 3);
  int v20 = v7 >> 3;
  if (v6 != v5)
  {
LABEL_6:
    uint64_t v9 = 0;
    if (v7 - 8 < 0x18) {
      goto LABEL_11;
    }
    if ((unint64_t)((char *)v8 - (char *)v6) < 0x20) {
      goto LABEL_11;
    }
    unint64_t v10 = ((v7 - 8) >> 3) + 1;
    uint64_t v9 = v10 & 0x3FFFFFFFFFFFFFFCLL;
    uint64_t v11 = v8 + 1;
    uint64_t v12 = (long long *)(v6 + 2);
    uint64_t v13 = v10 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v14 = *v12;
      *(v11 - 1) = *(v12 - 1);
      *uint64_t v11 = v14;
      v11 += 2;
      v12 += 2;
      v13 -= 4;
    }
    while (v13);
    v6 += v10 & 0x3FFFFFFFFFFFFFFCLL;
    if (v10 != v9)
    {
LABEL_11:
      uint64_t v15 = (void *)v8 + v9;
      do
      {
        uint64_t v16 = *v6++;
        *v15++ = v16;
      }
      while (v6 != v5);
    }
  }
LABEL_13:
  if (*a2 == a2[1])
  {
    sub_19E2E4248(a3, (uint64_t)&__p);
    if (__p)
    {
      uint64_t v18 = (char *)__p;
      operator delete(__p);
    }
  }
  else
  {
    sub_19E2E4248(a3, (uint64_t)&__p);
    __break(1u);
  }
}

void sub_19E2E420C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2E422C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E13A9BC(a1);
}

uint64_t sub_19E2E4248(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*a1 + 8);
  sub_19E29E624(a1[1], (uint64_t)v25);
  uint64_t v4 = v26;
  uint64_t v28 = 0;
  unsigned int v29 = 0;
  uint64_t v27 = 0;
  if (!v26)
  {
    int v30 = 0;
    goto LABEL_11;
  }
  if ((v26 & 0x80000000) != 0) {
    sub_19E13D694();
  }
  double v5 = (float64x2_t *)operator new(8 * (int)v26);
  uint64_t v27 = v5;
  unsigned int v29 = (char *)&v5->f64[(int)v4];
  bzero(v5, 8 * (int)v4);
  uint64_t v28 = (char *)&v5->f64[(int)v4];
  int v30 = v4;
  uint64_t v6 = (char *)v25[0];
  if (v4 < 8)
  {
    uint64_t v7 = 0;
LABEL_9:
    uint64_t v16 = v4 - v7;
    uint64_t v17 = v7 << 32;
    do
    {
      *(double *)((char *)v5->f64 + (v17 >> 29)) = (double)*(int *)&v6[v17 >> 30];
      v17 += 0x100000000;
      --v16;
    }
    while (v16);
    goto LABEL_11;
  }
  uint64_t v7 = v4 & 0xFFFFFFF8;
  uint64_t v8 = v5 + 2;
  uint64_t v9 = (char *)v25[0] + 16;
  uint64_t v10 = v7;
  do
  {
    long long v11 = *((_OWORD *)v9 - 1);
    v12.i64[0] = (int)v11;
    v12.i64[1] = SDWORD1(v11);
    float64x2_t v13 = vcvtq_f64_s64(v12);
    v12.i64[0] = SDWORD2(v11);
    v12.i64[1] = SHIDWORD(v11);
    float64x2_t v14 = vcvtq_f64_s64(v12);
    v12.i64[0] = (int)*(_OWORD *)v9;
    v12.i64[1] = (int)HIDWORD(*(void *)v9);
    float64x2_t v15 = vcvtq_f64_s64(v12);
    v12.i64[0] = (int)*((void *)v9 + 1);
    v12.i64[1] = (int)HIDWORD(*(_OWORD *)v9);
    v8[-2] = v13;
    v8[-1] = v14;
    *uint64_t v8 = v15;
    v8[1] = vcvtq_f64_s64(v12);
    v8 += 4;
    v9 += 32;
    v10 -= 8;
  }
  while (v10);
  if (v7 != v4) {
    goto LABEL_9;
  }
LABEL_11:
  sub_19E29FF68(a2, (uint64_t)&v27, (uint64_t)__p);
  double v18 = sub_19E2E2948(*(void *)(v3 + 8), (uint64_t)__p);
  double v20 = sqrt(v19);
  if (v20 < 0.00000001 || (int v21 = *(_DWORD *)(*(void *)(v3 + 8) + 120), v21 <= 0))
  {
    double v22 = (*(double (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  else
  {
    if (*(_DWORD *)(v3 + 56) != v21) {
      (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
    (**(void (***)(uint64_t, double, double))v3)(v3, v18, v20);
  }
  double v23 = v22;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v27)
  {
    uint64_t v28 = (char *)v27;
    operator delete(v27);
  }
  if (v25[0])
  {
    v25[1] = v25[0];
    operator delete(v25[0]);
  }
  return *(void *)&v23;
}

void sub_19E2E4494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p)
  {
    operator delete(__p);
    double v19 = a9;
    if (!a9) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    double v19 = a9;
    if (!a9) {
      goto LABEL_3;
    }
  }
  operator delete(v19);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E2E4514(uint64_t a1)
{
  *(void *)a1 = &unk_1EF0A8618;
  uint64_t v2 = *(char ***)(a1 + 10696);
  if (v2)
  {
    uint64_t v3 = *(char ***)(a1 + 10704);
    uint64_t v4 = v2;
    if (v3 != v2)
    {
      do
        uint64_t v3 = sub_19E2470C8(v3 - 12);
      while (v3 != v2);
      uint64_t v4 = *(char ***)(a1 + 10696);
    }
    *(void *)(a1 + 10704) = v2;
    operator delete(v4);
  }
  std::random_device::~random_device((std::random_device *)(a1 + 10688));
  std::random_device::~random_device((std::random_device *)(a1 + 8144));
  std::random_device::~random_device((std::random_device *)(a1 + 5624));
  std::random_device::~random_device((std::random_device *)(a1 + 3096));
  uint64_t v5 = *(void *)(a1 + 584);
  *(void *)(a1 + 584) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *(void *)(a1 + 504) = &unk_1EF0A7D90;
  uint64_t v6 = *(void **)(a1 + 520);
  if (v6)
  {
    *(void *)(a1 + 528) = v6;
    operator delete(v6);
  }
  sub_19E2BEE60((void *)(a1 + 176));
  uint64_t v7 = *(void *)(a1 + 152);
  if (v7)
  {
    uint64_t v8 = *(void *)(a1 + 160);
    uint64_t v9 = *(void **)(a1 + 152);
    if (v8 != v7)
    {
      uint64_t v10 = *(void *)(a1 + 160);
      do
      {
        int64x2_t v12 = *(void **)(v10 - 56);
        v10 -= 56;
        long long v11 = v12;
        if (v12)
        {
          *(void *)(v8 - 48) = v11;
          operator delete(v11);
        }
        uint64_t v8 = v10;
      }
      while (v10 != v7);
      uint64_t v9 = *(void **)(a1 + 152);
    }
    *(void *)(a1 + 160) = v7;
    operator delete(v9);
  }
  *(void *)a1 = &unk_1EF0A8318;
  sub_19E2934EC(a1 + 32);
  float64x2_t v13 = *(char ***)(a1 + 8);
  if (v13)
  {
    float64x2_t v14 = *(char ***)(a1 + 16);
    float64x2_t v15 = *(void **)(a1 + 8);
    if (v14 != v13)
    {
      do
        float64x2_t v14 = sub_19E2470C8(v14 - 13);
      while (v14 != v13);
      float64x2_t v15 = *(void **)(a1 + 8);
    }
    *(void *)(a1 + 16) = v13;
    operator delete(v15);
  }
  return a1;
}

void sub_19E2E46D0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t *)(a1 + 96);
  uint64_t v4 = *(void *)(a1 + 96);
  int v6 = *(_DWORD *)(a1 + 120);
  int v7 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 120) = v6 + 1;
  *(_DWORD *)(a1 + 124) = v7;
  unint64_t v8 = v7 * (v6 + 1);
  unint64_t v9 = (*(void *)(a1 + 104) - v4) >> 3;
  if (v8 <= v9)
  {
    if (v8 < v9) {
      *(void *)(a1 + 104) = v4 + 8 * v8;
    }
  }
  else
  {
    sub_19E2482DC(a1 + 96, v8 - v9);
    int v6 = *(_DWORD *)(a1 + 120) - 1;
  }
  sub_19E29FAE8(a2, (uint64_t)__p);
  uint64_t v10 = *(int *)(a1 + 124);
  long long v11 = (char *)__p[0];
  if (!v10)
  {
    if (!__p[0]) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  uint64_t v12 = (int)v10 * (uint64_t)v6;
  uint64_t v13 = *v5;
  if (v10 >= 8 && (uint64_t v14 = 8 * v12 + v13, v14 - (unint64_t)__p[0] >= 0x20))
  {
    unint64_t v15 = v10 & 0xFFFFFFFFFFFFFFFCLL;
    double v20 = (long long *)((char *)__p[0] + 16);
    int v21 = (_OWORD *)(v14 + 16);
    unint64_t v22 = v10 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      long long v23 = *v20;
      *(v21 - 1) = *(v20 - 1);
      *int v21 = v23;
      v20 += 2;
      v21 += 2;
      v22 -= 4;
    }
    while (v22);
    if (v15 == v10) {
      goto LABEL_17;
    }
  }
  else
  {
    unint64_t v15 = 0;
  }
  uint64_t v16 = v10 - v15;
  uint64_t v17 = (void *)(v13 + 8 * (v15 + v12));
  double v18 = &v11[8 * v15];
  do
  {
    uint64_t v19 = *(void *)v18;
    v18 += 8;
    *v17++ = v19;
    --v16;
  }
  while (v16);
LABEL_17:
  __p[1] = v11;
  operator delete(v11);
LABEL_18:
  sub_19E2E480C(a1, 1, 1);
}

void sub_19E2E480C(uint64_t a1, int a2, int a3)
{
  if (a2)
  {
    uint64_t v5 = (void *)(a1 + 128);
    uint64_t v4 = *(void *)(a1 + 128);
    int v6 = *(_DWORD *)(a1 + 120);
    *(_DWORD *)(a1 + 152) = v6;
    unint64_t v7 = (*(void *)(a1 + 136) - v4) >> 3;
    uint64_t v35 = v6;
    if (v6 <= v7)
    {
      if (v6 < v7) {
        *(void *)(a1 + 136) = v4 + 8 * v6;
      }
    }
    else
    {
      sub_19E2482DC(a1 + 128, v6 - v7);
      int v6 = *(_DWORD *)(a1 + 120);
      uint64_t v35 = v6;
    }
    if (v6)
    {
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      while (1)
      {
        uint64_t v10 = *(void *)(a1 + 96);
        signed int v11 = *(_DWORD *)(a1 + 124);
        double __C = 0;
        unint64_t v41 = 0;
        uint64_t v42 = 0;
        if (v11) {
          break;
        }
        uint64_t v12 = 0;
        double v37 = 0;
        uint64_t v38 = 0;
        __p = 0;
        unsigned int v39 = 0;
LABEL_26:
        double __C = 0;
        vDSP_meanvD(*(const double **)(a1 + 288), 1, (double *)&__C, *(int *)(a1 + 312));
        *(void *)(*v5 + 8 * v9) = __C;
        if (__p)
        {
          double v37 = __p;
          operator delete(__p);
        }
        if (v12) {
          operator delete(v12);
        }
        ++v9;
        v8 += 8;
        if (v9 == v35) {
          goto LABEL_34;
        }
      }
      if (v11 < 0) {
        sub_19E13D694();
      }
      uint64_t v12 = operator new(8 * v11);
      bzero(v12, 8 * v11);
      if (v11 >= 8 && (unint64_t)v12 - v10 - 8 * v9 * v11 >= 0x20)
      {
        unint64_t v13 = v11 & 0xFFFFFFFFFFFFFFFCLL;
        uint64_t v28 = (long long *)(v10 + v8 * v11 + 16);
        unsigned int v29 = v12 + 1;
        unint64_t v30 = v13;
        do
        {
          long long v31 = *v28;
          *(v29 - 1) = *(v28 - 1);
          *unsigned int v29 = v31;
          v28 += 2;
          v29 += 2;
          v30 -= 4;
        }
        while (v30);
        if (v13 == v11)
        {
LABEL_16:
          __p = 0;
          double v37 = 0;
          uint64_t v38 = 0;
          unsigned int v39 = v11;
          sub_19E2482DC((uint64_t)&__p, v11);
          uint64_t v19 = v39;
          if ((int)v39 >= 1)
          {
            uint64_t v20 = 0;
            int v21 = (char *)__p;
            if (v39 < 4) {
              goto LABEL_22;
            }
            if ((unint64_t)((unsigned char *)__p - (unsigned char *)v12) < 0x20) {
              goto LABEL_22;
            }
            unint64_t v22 = 0;
            uint64_t v20 = v39 & 0xFFFFFFFC;
            uint64_t v23 = (8 * v39) & 0x7FFFFFFE0;
            do
            {
              long long v24 = v12[v22 / 0x10 + 1];
              unsigned int v25 = &v21[v22];
              *(_OWORD *)unsigned int v25 = v12[v22 / 0x10];
              *((_OWORD *)v25 + 1) = v24;
              v22 += 32;
            }
            while (v23 != v22);
            if (v20 != v19)
            {
LABEL_22:
              uint64_t v26 = v19 - v20;
              uint64_t v27 = v20 << 32;
              do
              {
                *(void *)&v21[v27 >> 29] = *(void *)((char *)v12 + (v27 >> 29));
                v27 += 0x100000000;
                --v26;
              }
              while (v26);
            }
          }
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v13 = 0;
      }
      unint64_t v14 = v11 - v13;
      uint64_t v15 = 8 * v13;
      uint64_t v16 = (void *)v12 + v13;
      uint64_t v17 = (uint64_t *)(v10 + v15 + v8 * v11);
      do
      {
        uint64_t v18 = *v17++;
        *v16++ = v18;
        --v14;
      }
      while (v14);
      goto LABEL_16;
    }
  }
LABEL_34:
  sub_19E2E4B8C(a1 + 8, (uint64_t *)(a1 + 96), (uint64_t)&__C);
  if ((char **)(a1 + 160) != &__C) {
    sub_19E1E5B9C((void *)(a1 + 160), __C, v41, (v41 - __C) >> 3);
  }
  uint64_t v32 = __C;
  *(void *)(a1 + 184) = v43;
  if (v32)
  {
    unint64_t v41 = v32;
    operator delete(v32);
  }
  sub_19E2A4E4C(a1 + 160, (uint64_t)&__C);
  if ((char **)(a1 + 192) != &__C) {
    sub_19E1E5B9C((void *)(a1 + 192), __C, v41, (v41 - __C) >> 3);
  }
  uint64_t v33 = __C;
  *(void *)(a1 + 216) = v43;
  if (v33)
  {
    unint64_t v41 = v33;
    operator delete(v33);
  }
  sub_19E2E505C(a1);
  if (a3) {
    sub_19E2E5280((int32x2_t *)a1);
  }
}

void sub_19E2E4B28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2E4B8C(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *((unsigned int *)a2 + 6);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  if (!v4)
  {
    unint64_t v7 = 0;
    *(_DWORD *)(a3 + 24) = 0;
    *(_DWORD *)(a3 + 28) = 0;
LABEL_41:
    uint64_t v42 = (int)v4;
    if (v4) {
      goto LABEL_42;
    }
    return;
  }
  size_t v6 = 8 * (v4 * v4);
  unint64_t v7 = (char *)operator new(v6);
  *(void *)a3 = v7;
  *(void *)(a3 + 16) = &v7[v6];
  bzero(v7, v6);
  *(void *)(a3 + 8) = &v7[v6];
  *(_DWORD *)(a3 + 24) = v4;
  *(_DWORD *)(a3 + 28) = v4;
  if ((int)v4 <= 0) {
    goto LABEL_41;
  }
  uint64_t v52 = 0;
  uint64_t v8 = 0;
  uint64_t v55 = 1;
  uint64_t v48 = v4;
  uint64_t v50 = a1;
  do
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v49 = 8 * v8;
    uint64_t v54 = (int)v8 * v4;
    uint64_t v51 = v8;
    do
    {
      uint64_t v11 = *a2;
      signed int v12 = *((_DWORD *)a2 + 7);
      __p = 0;
      BOOL v61 = 0;
      long long v62 = 0;
      if (v12)
      {
        if (v12 < 0) {
          sub_19E13D694();
        }
        unint64_t v13 = v7;
        size_t v14 = 8 * v12;
        uint64_t v15 = operator new(v14);
        bzero(v15, v14);
        if (v12 < 8 || (unint64_t)v15 - v11 - v49 * v12 < 0x20)
        {
          unint64_t v16 = 0;
          goto LABEL_12;
        }
        unint64_t v16 = v12 & 0xFFFFFFFFFFFFFFFCLL;
        BOOL v34 = (long long *)(v11 + v52 * v12 + 16);
        uint64_t v35 = v15 + 1;
        unint64_t v36 = v16;
        do
        {
          long long v37 = *v34;
          *(v35 - 1) = *(v34 - 1);
          _OWORD *v35 = v37;
          v34 += 2;
          v35 += 2;
          v36 -= 4;
        }
        while (v36);
        if (v16 != v12)
        {
LABEL_12:
          unint64_t v17 = v12 - v16;
          uint64_t v18 = 8 * v16;
          uint64_t v19 = (void *)v15 + v16;
          uint64_t v20 = (uint64_t *)(v11 + v18 + v52 * v12);
          do
          {
            uint64_t v21 = *v20++;
            *v19++ = v21;
            --v17;
          }
          while (v17);
        }
        signed int v56 = 0;
        double v57 = 0;
        signed int v59 = 0;
        uint64_t v58 = 0;
        signed int v56 = operator new(8 * v12);
        double v57 = (char *)v56 + v14;
        uint64_t v58 = (char *)v56 + 8 * v12;
        signed int v59 = v12;
        memcpy(v56, v15, 8 * v12);
        unint64_t v22 = operator new(8 * v12);
        bzero(v22, 8 * v12);
        if (v12 < 8 || (unint64_t)v22 - v11 - 8 * v10 * v12 < 0x20)
        {
          unint64_t v23 = 0;
          goto LABEL_17;
        }
        unint64_t v23 = v12 & 0xFFFFFFFFFFFFFFFCLL;
        uint64_t v38 = (long long *)(v11 + v9 * v12 + 16);
        unsigned int v39 = v22 + 1;
        unint64_t v40 = v23;
        do
        {
          long long v41 = *v38;
          *(v39 - 1) = *(v38 - 1);
          *unsigned int v39 = v41;
          v38 += 2;
          v39 += 2;
          v40 -= 4;
        }
        while (v40);
        if (v23 != v12)
        {
LABEL_17:
          unint64_t v24 = v12 - v23;
          uint64_t v25 = 8 * v23;
          uint64_t v26 = (void *)v22 + v23;
          uint64_t v27 = (uint64_t *)(v11 + v25 + v9 * v12);
          do
          {
            uint64_t v28 = *v27++;
            *v26++ = v28;
            --v24;
          }
          while (v24);
        }
        __p = 0;
        BOOL v61 = 0;
        signed int v63 = 0;
        long long v62 = 0;
        uint64_t v29 = (int)v10;
        __p = operator new(8 * v12);
        BOOL v61 = (char *)__p + v14;
        long long v62 = (char *)__p + 8 * v12;
        signed int v63 = v12;
        memcpy(__p, v22, 8 * v12);
        unint64_t v7 = v13;
        a1 = v50;
        uint64_t v8 = v51;
        goto LABEL_21;
      }
      uint64_t v15 = 0;
      unint64_t v22 = 0;
      double v57 = 0;
      uint64_t v58 = 0;
      signed int v56 = 0;
      signed int v59 = 0;
      uint64_t v29 = (int)v10;
      __p = 0;
      BOOL v61 = 0;
      signed int v63 = 0;
      long long v62 = 0;
LABEL_21:
      double v30 = sub_19E2E13F4(a1, (uint64_t)&v56, (uint64_t)&__p);
      double v31 = *(double *)(a1 + 16);
      double v33 = (v30 + 1.0 + v32) * (exp(-v30) * v31);
      if (v8 == v10) {
        double v33 = v33 + *(double *)(a1 + 8) + 1.0e-10;
      }
      *(double *)&v7[8 * v29 + 8 * v54] = v33;
      if (__p)
      {
        BOOL v61 = (char *)__p;
        operator delete(__p);
      }
      if (v22) {
        operator delete(v22);
      }
      if (v56)
      {
        double v57 = (char *)v56;
        operator delete(v56);
      }
      if (v15) {
        operator delete(v15);
      }
      ++v10;
      v9 += 8;
    }
    while (v10 != v55);
    ++v8;
    ++v55;
    v52 += 8;
    uint64_t v4 = v48;
  }
  while (v8 != v48);
  uint64_t v42 = v48;
LABEL_42:
  if (v42 != 1)
  {
    uint64_t v43 = 0;
    uint64_t v44 = 8 * v42;
    uint64_t v45 = v7;
    do
    {
      if (v43)
      {
        uint64_t v46 = 0;
        long long v47 = v45;
        do
        {
          *long long v47 = *(void *)&v7[8 * v46++];
          long long v47 = (void *)((char *)v47 + v44);
        }
        while (v43 != v46);
      }
      ++v43;
      ++v45;
      v7 += v44;
    }
    while (v43 != v42);
  }
}

void sub_19E2E4FC0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E13A9BC(a1);
}

void sub_19E2E4FE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
  {
    operator delete(__p);
    if (!v25)
    {
LABEL_3:
      uint64_t v28 = a18;
      if (!a18) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if (!v25)
  {
    goto LABEL_3;
  }
  operator delete(v25);
  uint64_t v28 = a18;
  if (!a18)
  {
LABEL_4:
    if (!v23) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  operator delete(v28);
  if (!v23)
  {
LABEL_5:
    *(void *)(v26 + 8) = v24;
    operator delete(v24);
    _Unwind_Resume(a1);
  }
LABEL_9:
  operator delete(v23);
  *(void *)(v26 + 8) = v24;
  operator delete(v24);
  _Unwind_Resume(a1);
}

void sub_19E2E505C(uint64_t a1)
{
  sub_19E29F880(a1 + 192, (uint64_t)v22);
  uint64_t v2 = *(unsigned int *)(a1 + 216);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 0;
    int v4 = *(_DWORD *)(a1 + 220);
    int v5 = v23;
    int v6 = 1;
    int v7 = -1;
    uint64_t v8 = v22[0];
    do
    {
      if (v4 <= v6) {
        int v9 = v6;
      }
      else {
        int v9 = v4;
      }
      int v10 = v3 + 1;
      if ((int)v3 + 1 >= v4) {
        goto LABEL_3;
      }
      unsigned int v11 = 0;
      int v12 = v9 + v7;
      uint64_t v13 = (int)v3 * (uint64_t)v5;
      if ((v9 + v7) < 4)
      {
        int v14 = v3 + 1;
      }
      else
      {
        int v14 = v3 + 1;
        if (v9 - (int)v3 + v6 - 2 >= v6)
        {
          int v15 = 0;
          unsigned int v11 = v12 & 0xFFFFFFFC;
          int v14 = v10 + (v12 & 0xFFFFFFFC);
          do
          {
            unint64_t v16 = &v8[v13 + v6 + v15];
            *unint64_t v16 = 0uLL;
            v16[1] = 0uLL;
            v15 += 4;
          }
          while ((v12 & 0xFFFFFFFC) != v15);
          if (v12 == v11) {
            goto LABEL_3;
          }
        }
      }
      unsigned int v17 = v9 - v11;
      do
      {
        v8[v13 + v14] = 0;
        int v14 = ++v11 + v10;
        --v17;
      }
      while (v6 != v17);
LABEL_3:
      ++v3;
      ++v6;
      --v7;
    }
    while (v3 != v2);
  }
  sub_19E2E54E8(a1, (uint64_t)v18);
  sub_19E29F6FC((uint64_t)v22, (uint64_t)v18, (uint64_t)&__p);
  if ((void **)(a1 + 256) != &__p) {
    sub_19E1E5B9C((void *)(a1 + 256), (char *)__p, v20, (v20 - (unsigned char *)__p) >> 3);
  }
  *(_DWORD *)(a1 + 280) = v21;
  if (__p)
  {
    uint64_t v20 = (char *)__p;
    operator delete(__p);
  }
  if (v18[0])
  {
    v18[1] = v18[0];
    operator delete(v18[0]);
  }
  sub_19E29FC64((uint64_t)v22, &__p);
  sub_19E2A58A8((uint64_t)&__p, a1 + 256);
  if (__p)
  {
    uint64_t v20 = (char *)__p;
    operator delete(__p);
  }
  if (v22[0])
  {
    v22[1] = v22[0];
    operator delete(v22[0]);
  }
}

void sub_19E2E521C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  if (a17) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2E5280(int32x2_t *a1)
{
  uint64_t v2 = a1[15].u32[0];
  sub_19E242424(v2, v2, (uint64_t)&__p);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = v29.i32[1] + 1;
    int v4 = __p;
    if (v2 == 1)
    {
      uint64_t v5 = 0;
LABEL_7:
      uint64_t v8 = v2 - v5;
      uint64_t v9 = v5 << 32;
      do
      {
        v4[(v9 >> 32) * v3] = 0x3FF0000000000000;
        v9 += 0x100000000;
        --v8;
      }
      while (v8);
      goto LABEL_9;
    }
    uint64_t v6 = 0;
    uint64_t v5 = v2 & 0xFFFFFFFE;
    uint64_t v7 = v5;
    do
    {
      v4[(v6 >> 32) * v3] = 0x3FF0000000000000;
      v4[((v6 >> 32) | 1) * v3] = 0x3FF0000000000000;
      v6 += 0x200000000;
      v7 -= 2;
    }
    while (v7);
    if (v5 != v2) {
      goto LABEL_7;
    }
  }
LABEL_9:
  if (&a1[28] != (int32x2_t *)&__p) {
    sub_19E1E5B9C(&a1[28], (char *)__p, v28, (v28 - (unsigned char *)__p) >> 3);
  }
  int v10 = (char *)__p;
  a1[31] = v29;
  if (v10)
  {
    uint64_t v28 = v10;
    operator delete(v10);
  }
  sub_19E29F880((uint64_t)&a1[24], (uint64_t)&__p);
  uint64_t v11 = a1[27].u32[0];
  if ((int)v11 >= 1)
  {
    uint64_t v12 = 0;
    int v13 = a1[27].i32[1];
    __int32 v14 = v29.i32[1];
    int v15 = 1;
    int v16 = -1;
    unsigned int v17 = __p;
    do
    {
      if (v13 <= v15) {
        int v18 = v15;
      }
      else {
        int v18 = v13;
      }
      int v19 = v12 + 1;
      if ((int)v12 + 1 >= v13) {
        goto LABEL_15;
      }
      unsigned int v20 = 0;
      int v21 = v18 + v16;
      uint64_t v22 = (int)v12 * (uint64_t)v14;
      if ((v18 + v16) < 4)
      {
        int v23 = v12 + 1;
      }
      else
      {
        int v23 = v12 + 1;
        if (v18 - (int)v12 + v15 - 2 >= v15)
        {
          int v24 = 0;
          unsigned int v20 = v21 & 0xFFFFFFFC;
          int v23 = v19 + (v21 & 0xFFFFFFFC);
          do
          {
            uint64_t v25 = &v17[v22 + v15 + v24];
            _OWORD *v25 = 0uLL;
            v25[1] = 0uLL;
            v24 += 4;
          }
          while ((v21 & 0xFFFFFFFC) != v24);
          if (v21 == v20) {
            goto LABEL_15;
          }
        }
      }
      unsigned int v26 = v18 - v20;
      do
      {
        v17[v22 + v23] = 0;
        int v23 = ++v20 + v19;
        --v26;
      }
      while (v15 != v26);
LABEL_15:
      ++v12;
      ++v15;
      --v16;
    }
    while (v12 != v11);
  }
  sub_19E2A59C0((uint64_t)&__p, a1 + 28);
  if (__p)
  {
    uint64_t v28 = (char *)__p;
    operator delete(__p);
  }
  sub_19E29FC64((uint64_t)&a1[24], &__p);
  sub_19E2A59C0((uint64_t)&__p, a1 + 28);
  if (__p)
  {
    uint64_t v28 = (char *)__p;
    operator delete(__p);
  }
}

void sub_19E2E54C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2E54E8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  signed int v4 = *(_DWORD *)(a1 + 312);
  uint64_t v5 = 8 * v4;
  if (v4)
  {
    if (v4 < 0) {
      sub_19E13D694();
    }
    uint64_t v6 = (char *)operator new(8 * v4);
    bzero(v6, 8 * v4);
    unint64_t v7 = 0;
    uint64_t v8 = &v6[v5];
    uint64_t v9 = *(void *)(a1 + 288);
    if (v4 < 4) {
      goto LABEL_48;
    }
    if ((unint64_t)&v6[-v9] < 0x20) {
      goto LABEL_48;
    }
    uint64_t v10 = 0;
    unint64_t v7 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v11 = v7;
    do
    {
      long long v12 = *(_OWORD *)(v9 + v10 + 16);
      int v13 = &v6[v10];
      *(_OWORD *)int v13 = *(_OWORD *)(v9 + v10);
      *((_OWORD *)v13 + 1) = v12;
      v10 += 32;
      v11 -= 4;
    }
    while (v11);
    if (v7 != v4)
    {
LABEL_48:
      do
      {
        *(void *)&v6[8 * v7] = *(void *)(v9 + 8 * v7);
        ++v7;
      }
      while (v4 != v7);
    }
    uint64_t v14 = *(int *)(a1 + 152);
    if (v14) {
      goto LABEL_10;
    }
LABEL_19:
    int v15 = 0;
    goto LABEL_20;
  }
  uint64_t v8 = 0;
  uint64_t v6 = 0;
  uint64_t v14 = *(int *)(a1 + 152);
  if (!v14) {
    goto LABEL_19;
  }
LABEL_10:
  if ((v14 & 0x80000000) != 0) {
    sub_19E13D694();
  }
  int v15 = (char *)operator new(8 * v14);
  bzero(v15, 8 * v14);
  unint64_t v16 = 0;
  uint64_t v17 = *(void *)(a1 + 128);
  if (v14 < 4) {
    goto LABEL_49;
  }
  if ((unint64_t)&v15[-v17] < 0x20) {
    goto LABEL_49;
  }
  uint64_t v18 = 0;
  unint64_t v16 = v14 & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v19 = v14 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    long long v20 = *(_OWORD *)(v17 + v18 + 16);
    int v21 = &v15[v18];
    *(_OWORD *)int v21 = *(_OWORD *)(v17 + v18);
    *((_OWORD *)v21 + 1) = v20;
    v18 += 32;
    v19 -= 4;
  }
  while (v19);
  if (v16 != v14)
  {
LABEL_49:
    do
    {
      *(void *)&v15[8 * v16] = *(void *)(v17 + 8 * v16);
      ++v16;
    }
    while (v14 != v16);
  }
LABEL_20:
  vDSP_vsubD((const double *)v15, 1, (const double *)v6, 1, (double *)v6, 1, v4);
  if (v8 != v6)
  {
    if (v8 - v6 < 0) {
      sub_19E13D694();
    }
    uint64_t v22 = (char *)operator new(v8 - v6);
    memcpy(v22, v6, v8 - v6);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)a2 = 0;
    if (!v4)
    {
      *(_DWORD *)(a2 + 24) = 0;
      operator delete(v22);
      if (!v15) {
        goto LABEL_35;
      }
LABEL_34:
      operator delete(v15);
      goto LABEL_35;
    }
LABEL_26:
    if (v4 < 0) {
      sub_19E13D694();
    }
    int v23 = (char *)operator new(8 * v4);
    *(void *)a2 = v23;
    *(void *)(a2 + 16) = &v23[8 * v4];
    bzero(v23, 8 * v4);
    *(void *)(a2 + 8) = &v23[v5];
    *(_DWORD *)(a2 + 24) = v4;
    if (v4 >= 4)
    {
      uint64_t v25 = 0;
      unint64_t v24 = v4 & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v26 = v24;
      do
      {
        long long v27 = *(_OWORD *)&v22[v25 + 16];
        uint64_t v28 = &v23[v25];
        *(_OWORD *)uint64_t v28 = *(_OWORD *)&v22[v25];
        *((_OWORD *)v28 + 1) = v27;
        v25 += 32;
        v26 -= 4;
      }
      while (v26);
      if (v24 == v4)
      {
LABEL_33:
        operator delete(v22);
        if (!v15) {
          goto LABEL_35;
        }
        goto LABEL_34;
      }
    }
    else
    {
      unint64_t v24 = 0;
    }
    do
    {
      *(void *)&v23[8 * v24] = *(void *)&v22[8 * v24];
      ++v24;
    }
    while (v4 != v24);
    goto LABEL_33;
  }
  uint64_t v22 = 0;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  if (v4) {
    goto LABEL_26;
  }
  *(_DWORD *)(a2 + 24) = 0;
  if (v15) {
    goto LABEL_34;
  }
LABEL_35:
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_19E2E5820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (v19)
  {
    operator delete(v19);
    if (!v18) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if (!v18)
  {
    goto LABEL_3;
  }
  operator delete(v18);
  _Unwind_Resume(exception_object);
}

void sub_19E2E5884(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  if (a9) {
    operator delete(a9);
  }
  sub_19E13A9BC(a1);
}

void sub_19E2E5898(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13) {
    JUMPOUT(0x19E2E58A8);
  }
  JUMPOUT(0x19E2E58ACLL);
}

void sub_19E2E58B4(uint64_t a1, uint64_t a2)
{
  uint64_t v32 = a2;
  sub_19E2A099C((uint64_t)&v31, *(_DWORD *)(a2 + 8) + 1);
  sub_19E248FE0((uint64_t)v29, *(_DWORD *)(a2 + 8) + 1);
  uint64_t v3 = (char *)v29[0];
  *(void *)v29[0] = 0xC01E000000000000;
  signed int v4 = (char *)__p[0];
  *(void *)__p[0] = 0x401E000000000000;
  uint64_t v5 = *(unsigned int *)(a2 + 56);
  if ((int)v5 >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 1;
    if (v5 < 6) {
      goto LABEL_7;
    }
    if ((unint64_t)(v4 - v3) < 0x20) {
      goto LABEL_7;
    }
    uint64_t v6 = v5 & 0x7FFFFFFC;
    uint64_t v7 = v5 & 0xFFFFFFFC | 1;
    uint64_t v8 = v4 + 24;
    uint64_t v9 = v3 + 24;
    __asm
    {
      FMOV            V0.2D, #-10.0
      FMOV            V1.2D, #10.0
    }
    uint64_t v16 = v5 & 0xFFFFFFFC;
    do
    {
      *(v9 - 1) = _Q0;
      *uint64_t v9 = _Q0;
      *(v8 - 1) = _Q1;
      *uint64_t v8 = _Q1;
      v8 += 2;
      v9 += 2;
      v16 -= 4;
    }
    while (v16);
    if (v6 != v5)
    {
LABEL_7:
      uint64_t v17 = v5 - v6;
      uint64_t v18 = &v4[8 * v7];
      unint64_t v19 = &v3[8 * v7];
      do
      {
        *(void *)unint64_t v19 = 0xC024000000000000;
        v19 += 8;
        *(void *)uint64_t v18 = 0x4024000000000000;
        v18 += 8;
        --v17;
      }
      while (v17);
    }
  }
  sub_19E2A16E8((uint64_t)&v31, (uint64_t *)v29);
  sub_19E2A1818((uint64_t)&v31, (uint64_t *)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v29[0])
  {
    v29[1] = v29[0];
    operator delete(v29[0]);
  }
  int v21 = *(unsigned char **)(a2 + 64);
  long long v20 = *(unsigned char **)(a2 + 72);
  uint64_t v25 = 0;
  unint64_t v26 = 0;
  long long v27 = 0;
  int64_t v22 = v20 - v21;
  if (v20 != v21)
  {
    if (v22 < 0) {
      sub_19E13D694();
    }
    int v23 = (char *)operator new(v20 - v21);
    unint64_t v24 = &v23[8 * (v22 >> 3)];
    uint64_t v25 = v23;
    long long v27 = v24;
    memcpy(v23, v21, v22);
    unint64_t v26 = v24;
  }
  int v28 = *(_DWORD *)(a2 + 88);
  sub_19E2E5C58((uint64_t)&v31, (uint64_t)&v32, (uint64_t)&v25);
}

void sub_19E2E5BD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  if (__p)
  {
    operator delete(__p);
    sub_19E2A0A3C(&a29);
    _Unwind_Resume(a1);
  }
  sub_19E2A0A3C(&a29);
  _Unwind_Resume(a1);
}

void sub_19E2E5C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
}

void sub_19E2E5C58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a1 + 112)) {
    (**(void (***)(uint64_t, void))a1)(a1, *(unsigned int *)(a3 + 24));
  }
  operator new();
}

void sub_19E2E60EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  __cxa_free_exception(v15);
  if (a2 != 3)
  {
    if (a2 == 2)
    {
      unint64_t v19 = __cxa_begin_catch(a1);
      (*(void (**)(void *))(*(void *)v19 + 16))(v19);
      sub_19E29FAE8(v14, (uint64_t)&a13);
      if (a13)
      {
        a14 = (uint64_t)a13;
        operator delete(a13);
      }
      __cxa_end_catch();
LABEL_13:
      JUMPOUT(0x19E2E5ED4);
    }
    if (a2 != 1)
    {
      if (__p) {
        operator delete(__p);
      }
      _Unwind_Resume(a1);
    }
  }
  uint64_t v18 = __cxa_begin_catch(a1);
  (*(void (**)(void *))(*(void *)v18 + 16))(v18);
  __cxa_end_catch();
  goto LABEL_13;
}

double sub_19E2E623C(uint64_t **a1, uint64_t *a2, int **a3)
{
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v7 = (char *)v5 - (char *)*a1;
  long long v41 = 0;
  uint64_t v42 = 0;
  unint64_t v40 = 0;
  int v43 = 0;
  double v33 = 0.0;
  __p = 0;
  uint64_t v35 = 0;
  if (!(v7 >> 3))
  {
    uint64_t v8 = 0;
    unint64_t v40 = 0;
    long long v41 = 0;
    uint64_t v42 = 0;
    int v43 = v7 >> 3;
    if (v6 == v5) {
      goto LABEL_13;
    }
    goto LABEL_6;
  }
  if (((v7 >> 3) & 0x80000000) != 0) {
    sub_19E13D694();
  }
  uint64_t v8 = operator new((uint64_t)(v7 << 29) >> 29);
  bzero(v8, (uint64_t)(v7 << 29) >> 29);
  unint64_t v40 = v8;
  long long v41 = (char *)v8 + ((uint64_t)(v7 << 29) >> 29);
  uint64_t v42 = (char *)v8 + 8 * (int)((uint64_t)v7 >> 3);
  int v43 = v7 >> 3;
  if (v6 != v5)
  {
LABEL_6:
    uint64_t v9 = 0;
    if (v7 - 8 < 0x18) {
      goto LABEL_11;
    }
    if ((unint64_t)((char *)v8 - (char *)v6) < 0x20) {
      goto LABEL_11;
    }
    unint64_t v10 = ((v7 - 8) >> 3) + 1;
    uint64_t v9 = v10 & 0x3FFFFFFFFFFFFFFCLL;
    unint64_t v11 = v8 + 1;
    long long v12 = (long long *)(v6 + 2);
    uint64_t v13 = v10 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v14 = *v12;
      *(v11 - 1) = *(v12 - 1);
      *unint64_t v11 = v14;
      v11 += 2;
      v12 += 2;
      v13 -= 4;
    }
    while (v13);
    v6 += v10 & 0x3FFFFFFFFFFFFFFCLL;
    if (v10 != v9)
    {
LABEL_11:
      int v15 = (void *)v8 + v9;
      do
      {
        uint64_t v16 = *v6++;
        *v15++ = v16;
      }
      while (v6 != v5);
    }
  }
LABEL_13:
  if (*a2 == a2[1])
  {
    sub_19E2E6534(a3, (uint64_t)&v40, 0, (uint64_t)&v33);
    double v17 = v33;
    if (v36)
    {
      uint64_t v31 = __p;
      if (__p)
      {
        uint64_t v35 = __p;
        goto LABEL_31;
      }
    }
  }
  else
  {
    LOBYTE(v37[0]) = 0;
    char v39 = 0;
    sub_19E2E6534(a3, (uint64_t)&v40, 1, (uint64_t)&v33);
    double v17 = v33;
    sub_19E2A7CB8((uint64_t)v37, (uint64_t)&__p);
    if (v36 && __p)
    {
      uint64_t v35 = __p;
      operator delete(__p);
    }
    uint64_t v18 = v38;
    if (v38)
    {
      unint64_t v19 = 0;
      uint64_t v20 = v37[0];
      uint64_t v21 = *a2;
      if (v38 < 4) {
        goto LABEL_23;
      }
      if ((unint64_t)(v21 - v37[0]) < 0x20) {
        goto LABEL_23;
      }
      unint64_t v19 = v38 & 0xFFFFFFFFFFFFFFFCLL;
      int64_t v22 = (long long *)(v37[0] + 16);
      int v23 = (_OWORD *)(v21 + 16);
      unint64_t v24 = v19;
      do
      {
        long long v25 = *v22;
        *(v23 - 1) = *(v22 - 1);
        _OWORD *v23 = v25;
        v22 += 2;
        v23 += 2;
        v24 -= 4;
      }
      while (v24);
      if (v19 != v18)
      {
LABEL_23:
        uint64_t v26 = v18 - v19;
        uint64_t v27 = 8 * v19;
        int v28 = (void *)(v21 + 8 * v19);
        int32x2_t v29 = (uint64_t *)(v20 + v27);
        do
        {
          uint64_t v30 = *v29++;
          *v28++ = v30;
          --v26;
        }
        while (v26);
      }
    }
    if (v39)
    {
      uint64_t v31 = (void *)v37[0];
      if (v37[0])
      {
        v37[1] = v37[0];
LABEL_31:
        operator delete(v31);
      }
    }
  }
  if (v40)
  {
    long long v41 = (char *)v40;
    operator delete(v40);
  }
  return v17;
}

void sub_19E2E64BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,void *__p,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2E6518(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E13A9BC(a1);
}

void *sub_19E2E6534@<X0>(int **a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  sub_19E2E76D8((uint64_t)&v31, *a1);
  if (v35 != (void *)a2) {
    sub_19E1E5B9C(v35, *(char **)a2, *(char **)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  }
  int v36 = *(_DWORD *)(a2 + 24);
  unint64_t v7 = *(char **)a2;
  long double v33 = exp(*(double *)v7 + *(double *)v7);
  unint64_t v8 = v32;
  if (v32)
  {
    uint64_t v9 = v34;
    if (v32 < 4 || (unint64_t)(v34 - v7 - 8) < 0x10)
    {
      unint64_t v10 = 0;
LABEL_7:
      unint64_t v11 = (double *)&v7[8 * v10 + 8];
      long long v12 = (long double *)&v9[8 * v10];
      unint64_t v13 = v8 - v10;
      do
      {
        long double v14 = *v11++;
        *v12++ = exp(v14);
        --v13;
      }
      while (v13);
      goto LABEL_9;
    }
    unint64_t v10 = v32 & 0xFFFFFFFFFFFFFFFELL;
    int64_t v22 = (long long *)(v7 + 8);
    unint64_t v23 = v32 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v24 = v34;
    do
    {
      long long v25 = *v22++;
      long double v27 = exp(*((long double *)&v25 + 1));
      *(double *)&long long v26 = exp(*(long double *)&v25);
      *((long double *)&v26 + 1) = v27;
      *(_OWORD *)unint64_t v24 = v26;
      v24 += 16;
      v23 -= 2;
    }
    while (v23);
    if (v8 != v10) {
      goto LABEL_7;
    }
  }
LABEL_9:
  sub_19E2E480C((uint64_t)&v31, 0, a3);
  double v15 = sub_19E2E67B0((uint64_t)&v31);
  double v16 = v15;
  if (a3)
  {
    sub_19E2E69E0((uint64_t)&v31, (uint64_t)&v28);
    *(void *)(a4 + 8) = 0;
    *(double *)a4 = v16;
    *(void *)(a4 + 16) = 0;
    *(void *)(a4 + 24) = 0;
    double v17 = v28;
    int64_t v18 = v29 - v28;
    if (v29 != v28)
    {
      if (v18 < 0) {
        sub_19E13D694();
      }
      unint64_t v19 = (char *)operator new(v29 - v28);
      *(void *)(a4 + 8) = v19;
      uint64_t v20 = &v19[8 * (v18 >> 3)];
      *(void *)(a4 + 24) = v20;
      memcpy(v19, v17, v18);
      *(void *)(a4 + 16) = v20;
    }
    *(_DWORD *)(a4 + 32) = v30;
    *(unsigned char *)(a4 + 40) = 1;
    if (v17)
    {
      int32x2_t v29 = v17;
      operator delete(v17);
    }
  }
  else
  {
    *(double *)a4 = v15;
    *(unsigned char *)(a4 + 8) = 0;
    *(unsigned char *)(a4 + 40) = 0;
  }
  return sub_19E2BEE60(&v31);
}

void sub_19E2E6728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_19E2BEE60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19E2E673C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v21 = *v19;
  if (*v19)
  {
    *(void *)(v18 + 16) = v21;
    operator delete(v21);
    int64_t v22 = __p;
    if (!__p)
    {
LABEL_3:
      sub_19E2BEE60(&a18);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    int64_t v22 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  operator delete(v22);
  sub_19E2BEE60(&a18);
  _Unwind_Resume(a1);
}

void sub_19E2E6788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_19E2BEE60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19E2E679C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_19E2BEE60((uint64_t *)va);
  _Unwind_Resume(a1);
}

double sub_19E2E67B0(uint64_t a1)
{
  sub_19E2E54E8(a1, (uint64_t)&__A);
  __C[0] = 0;
  vDSP_dotprD(__A, 1, *(const double **)(a1 + 256), 1, (double *)__C, (int)__N);
  uint64_t v2 = __C[0];
  if (__A)
  {
    double v17 = __A;
    operator delete(__A);
  }
  uint64_t v3 = *(int *)(a1 + 220);
  if ((int)v3 >= *(_DWORD *)(a1 + 216)) {
    int v4 = *(_DWORD *)(a1 + 216);
  }
  else {
    int v4 = *(_DWORD *)(a1 + 220);
  }
  __A = 0;
  double v17 = 0;
  uint64_t v18 = 0;
  if (v4)
  {
    if (v4 < 0) {
      sub_19E13D694();
    }
    uint64_t v5 = operator new(8 * v4);
    bzero(v5, 8 * v4);
    uint64_t v6 = 0;
    unint64_t v7 = *(void **)(a1 + 192);
    do
    {
      *((void *)v5 + v6++) = *v7;
      v7 += v3 + 1;
    }
    while (v4 != v6);
    __p = operator new(8 * v4);
    unint64_t v11 = (char *)__p + 8 * v4;
    long long v12 = v11;
    int v13 = v4;
    memcpy(__p, v5, 8 * v4);
  }
  else
  {
    uint64_t v5 = 0;
    unint64_t v11 = 0;
    long long v12 = 0;
    __p = 0;
    int v13 = 0;
  }
  sub_19E2A7AC4((uint64_t)&__p, (uint64_t)__C);
  __A = 0;
  vDSP_sveD((const double *)__C[0], 1, (double *)&__A, (int)v15);
  unint64_t v8 = __A;
  if (__C[0])
  {
    __C[1] = __C[0];
    operator delete(__C[0]);
  }
  if (__p)
  {
    unint64_t v11 = (char *)__p;
    operator delete(__p);
  }
  if (v5) {
    operator delete(v5);
  }
  return (double)*(int *)(a1 + 120) * -0.918938533 - (*(double *)&v8 - *(double *)&v2 * -0.5);
}

void sub_19E2E6958(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v20 = a9;
    if (!a9)
    {
LABEL_3:
      if (!v18) {
LABEL_8:
      }
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(v18);
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v20 = a9;
    if (!a9) {
      goto LABEL_3;
    }
  }
  operator delete(v20);
  if (!v18) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void sub_19E2E69C4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E13A9BC(a1);
}

void sub_19E2E69E0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  CFTypeRef v121 = 0;
  uint64_t v122 = 0;
  int v123 = 0;
  uint64_t v3 = *(unsigned char **)(a1 + 224);
  uint64_t v2 = *(unsigned char **)(a1 + 232);
  int64_t v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0) {
      sub_19E13D694();
    }
    uint64_t v5 = (double *)operator new(v2 - v3);
    uint64_t v6 = &v5[v4 >> 3];
    CFTypeRef v121 = v5;
    int v123 = v6;
    memcpy(v5, v3, v4);
    uint64_t v122 = v6;
  }
  unint64_t v7 = *(unsigned char **)(a1 + 256);
  unint64_t v124 = *(void *)(a1 + 248);
  unint64_t v106 = 0;
  long long v107 = 0;
  uint64_t v105 = 0;
  unint64_t v8 = *(unsigned char **)(a1 + 264);
  int64_t v9 = v8 - v7;
  if (v8 != v7)
  {
    if (v9 < 0) {
      sub_19E13D694();
    }
    unint64_t v10 = (char *)operator new(v8 - v7);
    unint64_t v11 = &v10[8 * (v9 >> 3)];
    uint64_t v105 = v10;
    long long v107 = v11;
    memcpy(v10, v7, v9);
    unint64_t v106 = v11;
  }
  int v108 = *(_DWORD *)(a1 + 280);
  sub_19E29FAE8(a1 + 256, (uint64_t)&v101);
  sub_19E2A7BA8((uint64_t)&v105, (uint64_t)&v101, (uint64_t)&__p);
  unint64_t v113 = 0;
  char v114 = 0;
  uint64_t v115 = 0;
  long long v12 = __p;
  int64_t v13 = v110 - (unsigned char *)__p;
  if (v110 == __p)
  {
    vDSP_Length v15 = 0;
    long double v14 = 0;
  }
  else
  {
    if (v13 < 0) {
      sub_19E13D694();
    }
    long double v14 = (char *)operator new(v110 - (unsigned char *)__p);
    vDSP_Length v15 = &v14[8 * (v13 >> 3)];
    unint64_t v113 = v14;
    uint64_t v115 = v15;
    memcpy(v14, v12, v13);
    char v114 = v15;
  }
  unint64_t v16 = v112;
  unint64_t v116 = v112;
  unint64_t v17 = HIDWORD(v112);
  vDSP_Length v18 = HIDWORD(v112) * (int)v112;
  vDSP_vsubD(v121, 1, (const double *)v14, 1, (double *)v14, 1, v18);
  uint64_t v117 = 0;
  int v118 = 0;
  long long v119 = 0;
  int64_t v19 = v15 - v14;
  if (!v19)
  {
    uint64_t v20 = 0;
    unint64_t v120 = v16;
    int64_t v126 = 0;
    unint64_t v127 = 0;
    uint64_t v125 = 0;
    if (v18) {
      goto LABEL_14;
    }
LABEL_18:
    int64_t v22 = 0;
    uint64_t v21 = 0;
    unint64_t v128 = __PAIR64__(v17, v16);
    goto LABEL_23;
  }
  if (v19 < 0) {
    sub_19E13D694();
  }
  uint64_t v20 = (char *)operator new(v19);
  uint64_t v117 = v20;
  long long v119 = &v20[8 * (v19 >> 3)];
  memcpy(v20, v14, v19);
  int v118 = &v20[8 * (v19 >> 3)];
  unint64_t v120 = v16;
  int64_t v126 = 0;
  unint64_t v127 = 0;
  uint64_t v125 = 0;
  if (!v18) {
    goto LABEL_18;
  }
LABEL_14:
  if ((v18 & 0x80000000) != 0) {
    sub_19E13D694();
  }
  uint64_t v21 = (char *)operator new(8 * v18);
  uint64_t v125 = v21;
  unint64_t v127 = &v21[8 * v18];
  bzero(v21, 8 * v18);
  int64_t v22 = &v21[8 * v18];
  unint64_t v128 = __PAIR64__(v17, v16);
  if (v18 < 4)
  {
    for (unint64_t i = 0; i != v18; ++i)
LABEL_22:
      *(void *)&v21[8 * i] = *(void *)&v20[8 * i];
    goto LABEL_23;
  }
  uint64_t v24 = 0;
  unint64_t i = v18 & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v25 = v18 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    long long v26 = *(_OWORD *)&v20[v24 + 16];
    long double v27 = &v21[v24];
    *(_OWORD *)long double v27 = *(_OWORD *)&v20[v24];
    *((_OWORD *)v27 + 1) = v26;
    v24 += 32;
    v25 -= 4;
  }
  while (v25);
  if (i != v18) {
    goto LABEL_22;
  }
LABEL_23:
  sub_19E1E5B9C(&v121, v21, v22, (v22 - v21) >> 3);
  unint64_t v124 = v128;
  if (v21)
  {
    int64_t v126 = v21;
    operator delete(v21);
  }
  if (v20)
  {
    int v118 = v20;
    operator delete(v20);
  }
  if (v14)
  {
    char v114 = v14;
    operator delete(v14);
  }
  if (__p)
  {
    unsigned int v110 = __p;
    operator delete(__p);
  }
  if (v101)
  {
    unint64_t v102 = (char *)v101;
    operator delete(v101);
  }
  if (v105)
  {
    unint64_t v106 = v105;
    operator delete(v105);
  }
  int v28 = *(_DWORD *)(a1 + 8);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  vDSP_Length v98 = v28 + 1;
  if (v28 == -1)
  {
    *(_DWORD *)(a2 + 24) = 0;
    uint64_t v96 = *(int *)(a1 + 120);
    if (!v96) {
      goto LABEL_125;
    }
    goto LABEL_40;
  }
  if (v28 <= -2) {
    sub_19E13D694();
  }
  int32x2_t v29 = (char *)operator new(8 * v98);
  *(void *)a2 = v29;
  *(void *)(a2 + 8) = &v29[8 * v98];
  *(void *)(a2 + 16) = &v29[8 * v28 + 8];
  *(_DWORD *)(a2 + 24) = v28 + 1;
  bzero(v29, 8 * v98);
  uint64_t v96 = *(int *)(a1 + 120);
  if (v96)
  {
LABEL_40:
    uint64_t v97 = 0;
    for (unint64_t j = 0; j != v96; ++j)
    {
      uint64_t v31 = 0;
      unint64_t v32 = 0;
      do
      {
        uint64_t v33 = *(void *)(a1 + 96);
        uint64_t v34 = *(unsigned int *)(a1 + 124);
        uint64_t v125 = 0;
        int64_t v126 = 0;
        unint64_t v127 = 0;
        if (!v34)
        {
          uint64_t v35 = 0;
          unsigned int v110 = 0;
          char v111 = 0;
          __p = 0;
          LODWORD(v112) = 0;
LABEL_72:
          uint64_t v52 = 0;
          unint64_t v102 = 0;
          uint64_t v103 = 0;
          uint64_t v101 = 0;
          int v104 = 0;
          goto LABEL_76;
        }
        if ((v34 & 0x80000000) != 0) {
          sub_19E13D694();
        }
        uint64_t v35 = operator new(8 * (int)v34);
        bzero(v35, 8 * (int)v34);
        if (v34 < 8 || (unint64_t)v35 - v33 - 8 * j * (int)v34 < 0x20)
        {
          unint64_t v36 = 0;
LABEL_49:
          unint64_t v37 = (int)v34 - v36;
          uint64_t v38 = 8 * v36;
          char v39 = (void *)v35 + v36;
          unint64_t v40 = (uint64_t *)(v33 + v38 + v97 * (int)v34);
          do
          {
            uint64_t v41 = *v40++;
            *v39++ = v41;
            --v37;
          }
          while (v37);
          goto LABEL_51;
        }
        unint64_t v36 = (int)v34 & 0xFFFFFFFFFFFFFFFCLL;
        uint64_t v88 = (long long *)(v33 + v97 * (int)v34 + 16);
        size_t v89 = v35 + 1;
        unint64_t v90 = v36;
        do
        {
          long long v91 = *v88;
          *(v89 - 1) = *(v88 - 1);
          *size_t v89 = v91;
          v88 += 2;
          v89 += 2;
          v90 -= 4;
        }
        while (v90);
        if (v36 != (int)v34) {
          goto LABEL_49;
        }
LABEL_51:
        __p = 0;
        unsigned int v110 = 0;
        char v111 = 0;
        LODWORD(v112) = v34;
        uint64_t v42 = operator new(8 * (int)v34);
        bzero(v42, 8 * (int)v34);
        __p = v42;
        unsigned int v110 = (char *)v42 + 8 * (int)v34;
        char v111 = v110;
        if ((v34 - 6) >= 0x7FFFFFFB)
        {
          uint64_t v43 = 0;
LABEL_58:
          uint64_t v48 = v34 - v43;
          uint64_t v49 = v43 << 32;
          do
          {
            *(void *)((char *)v42 + (v49 >> 29)) = *(void *)((char *)v35 + (v49 >> 29));
            v49 += 0x100000000;
            --v48;
          }
          while (v48);
          goto LABEL_60;
        }
        uint64_t v43 = v34 & 0xFFFFFFFC;
        uint64_t v44 = v42 + 1;
        uint64_t v45 = v35 + 1;
        uint64_t v46 = v43;
        do
        {
          long long v47 = *v45;
          *(v44 - 1) = *(v45 - 1);
          _OWORD *v44 = v47;
          v44 += 2;
          v45 += 2;
          v46 -= 4;
        }
        while (v46);
        if (v43 != v34) {
          goto LABEL_58;
        }
LABEL_60:
        uint64_t v50 = *(void *)(a1 + 96);
        uint64_t v51 = *(unsigned int *)(a1 + 124);
        uint64_t v125 = 0;
        int64_t v126 = 0;
        unint64_t v127 = 0;
        if (!v51) {
          goto LABEL_72;
        }
        if ((v51 & 0x80000000) != 0) {
          sub_19E13D694();
        }
        uint64_t v52 = operator new(8 * (int)v51);
        bzero(v52, 8 * (int)v51);
        if (v51 < 8 || (unint64_t)v52 - v50 - 8 * v32 * (int)v51 < 0x20)
        {
          unint64_t v53 = 0;
LABEL_65:
          unint64_t v54 = (int)v51 - v53;
          uint64_t v55 = 8 * v53;
          signed int v56 = (void *)v52 + v53;
          double v57 = (uint64_t *)(v50 + v55 + v31 * (int)v51);
          do
          {
            uint64_t v58 = *v57++;
            *v56++ = v58;
            --v54;
          }
          while (v54);
          goto LABEL_67;
        }
        unint64_t v53 = (int)v51 & 0xFFFFFFFFFFFFFFFCLL;
        v92 = (long long *)(v50 + v31 * (int)v51 + 16);
        unint64_t v93 = v52 + 1;
        unint64_t v94 = v53;
        do
        {
          long long v95 = *v92;
          *(v93 - 1) = *(v92 - 1);
          _OWORD *v93 = v95;
          v92 += 2;
          v93 += 2;
          v94 -= 4;
        }
        while (v94);
        if (v53 != (int)v51) {
          goto LABEL_65;
        }
LABEL_67:
        uint64_t v101 = 0;
        unint64_t v102 = 0;
        uint64_t v103 = 0;
        int v104 = v51;
        signed int v59 = (char *)operator new(8 * (int)v51);
        bzero(v59, 8 * (int)v51);
        uint64_t v101 = v59;
        unint64_t v102 = &v59[8 * (int)v51];
        uint64_t v103 = v102;
        if ((v51 - 6) >= 0x7FFFFFFB)
        {
          uint64_t v61 = 0;
LABEL_74:
          uint64_t v64 = v51 - v61;
          uint64_t v65 = v61 << 32;
          do
          {
            *(void *)&v59[v65 >> 29] = *(void *)((char *)v52 + (v65 >> 29));
            v65 += 0x100000000;
            --v64;
          }
          while (v64);
          goto LABEL_76;
        }
        unint64_t v60 = 0;
        uint64_t v61 = v51 & 0xFFFFFFFC;
        do
        {
          long long v62 = v52[v60 / 0x10 + 1];
          signed int v63 = &v59[v60];
          *(_OWORD *)signed int v63 = v52[v60 / 0x10];
          *((_OWORD *)v63 + 1) = v62;
          v60 += 32;
        }
        while (((8 * v51) & 0x7FFFFFFE0) != v60);
        if (v61 != v51) {
          goto LABEL_74;
        }
LABEL_76:
        sub_19E2E7C10(a1 + 8, (uint64_t)&__p, (const double **)&v101, (uint64_t)&v117);
        if (v101)
        {
          unint64_t v102 = (char *)v101;
          operator delete(v101);
        }
        if (v52) {
          operator delete(v52);
        }
        if (__p)
        {
          unsigned int v110 = __p;
          operator delete(__p);
        }
        if (v35) {
          operator delete(v35);
        }
        if (j == v32)
        {
          uint64_t v66 = SHIDWORD(v124);
          unint64_t v67 = v121;
          unint64_t v68 = v117;
          int64_t v69 = v118 - v117;
          if (v118 == v117)
          {
            uint64_t v71 = 0;
            unint64_t v70 = 0;
          }
          else
          {
            if (v69 < 0) {
              sub_19E13D694();
            }
            unint64_t v70 = (char *)operator new(v118 - v117);
            uint64_t v71 = &v70[8 * (v69 >> 3)];
            memcpy(v70, v68, v69);
          }
          uint64_t v77 = &v67[j + j * v66];
          int v78 = v120;
          vDSP_vsmulD((const double *)v70, 1, v77, (double *)v70, 1, (int)v120);
          int64_t v79 = v71 - v70;
          if (v79)
          {
            if (v79 < 0) {
              sub_19E13D694();
            }
            uint64_t v80 = (char *)operator new(v79);
            uint64_t v81 = &v80[8 * (v79 >> 3)];
            memcpy(v80, v70, v79);
          }
          else
          {
            uint64_t v81 = 0;
            uint64_t v80 = 0;
          }
          __p = (void *)0x3FE0000000000000;
          vDSP_vsmulD((const double *)v80, 1, (const double *)&__p, (double *)v80, 1, v78);
          uint64_t v125 = 0;
          int64_t v126 = 0;
          unint64_t v127 = 0;
          int64_t v86 = v81 - v80;
          if (v81 == v80)
          {
            unint64_t v87 = 0;
          }
          else
          {
            if (v86 < 0) {
              sub_19E13D694();
            }
            unint64_t v87 = (char *)operator new(v81 - v80);
            uint64_t v125 = v87;
            unint64_t v127 = &v87[8 * (v86 >> 3)];
            memcpy(v87, v80, v86);
            int64_t v126 = &v87[8 * (v86 >> 3)];
          }
          LODWORD(v128) = v78;
          vDSP_vaddD(*(const double **)a2, 1, (const double *)v87, 1, *(double **)a2, 1, v98);
          if (v87) {
            operator delete(v87);
          }
          if (v80) {
            operator delete(v80);
          }
          if (v70) {
            goto LABEL_114;
          }
        }
        else
        {
          uint64_t v72 = SHIDWORD(v124);
          uint64_t v73 = v121;
          uint64_t v74 = v117;
          int64_t v75 = v118 - v117;
          if (v118 == v117)
          {
            unint64_t v76 = 0;
            unint64_t v70 = 0;
          }
          else
          {
            if (v75 < 0) {
              sub_19E13D694();
            }
            unint64_t v70 = (char *)operator new(v118 - v117);
            unint64_t v76 = &v70[8 * (v75 >> 3)];
            memcpy(v70, v74, v75);
          }
          uint64_t v82 = &v73[v32 + j * v72];
          int v83 = v120;
          vDSP_vsmulD((const double *)v70, 1, v82, (double *)v70, 1, (int)v120);
          uint64_t v125 = 0;
          int64_t v126 = 0;
          unint64_t v127 = 0;
          uint64_t v84 = v76 - v70;
          if (v76 == v70)
          {
            unint64_t v85 = 0;
          }
          else
          {
            if (v84 < 0) {
              sub_19E13D694();
            }
            unint64_t v85 = (char *)operator new(v76 - v70);
            uint64_t v125 = v85;
            unint64_t v127 = &v85[8 * (v84 >> 3)];
            memcpy(v85, v70, v76 - v70);
            int64_t v126 = &v85[8 * (v84 >> 3)];
          }
          LODWORD(v128) = v83;
          vDSP_vaddD(*(const double **)a2, 1, (const double *)v85, 1, *(double **)a2, 1, v98);
          if (v85) {
            operator delete(v85);
          }
          if (v70) {
LABEL_114:
          }
            operator delete(v70);
        }
        if (v117)
        {
          int v118 = v117;
          operator delete(v117);
        }
        ++v32;
        v31 += 8;
      }
      while (v32 <= j);
      v97 += 8;
    }
  }
LABEL_125:
  if (v121)
  {
    uint64_t v122 = v121;
    operator delete(v121);
  }
}

void sub_19E2E7430(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  vDSP_Length v15 = *(void **)a14;
  if (*(void *)a14)
  {
    *(void *)(a14 + 8) = v15;
    operator delete(v15);
  }
  sub_19E13A9BC(a1);
}

void sub_19E2E7454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37)
{
  if (v39) {
    operator delete(v39);
  }
  if (v38)
  {
    *(void *)(v40 - 176) = v38;
    operator delete(v38);
  }
  if (v37)
  {
    *(void *)(v40 - 208) = v37;
    operator delete(v37);
  }
  if (__p)
  {
    operator delete(__p);
    uint64_t v42 = a28;
    if (!a28)
    {
LABEL_9:
      uint64_t v43 = a32;
      if (!a32)
      {
LABEL_14:
        uint64_t v44 = *(void **)(v40 - 152);
        if (v44)
        {
          *(void *)(v40 - 144) = v44;
          operator delete(v44);
        }
        _Unwind_Resume(exception_object);
      }
LABEL_13:
      operator delete(v43);
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v42 = a28;
    if (!a28) {
      goto LABEL_9;
    }
  }
  operator delete(v42);
  uint64_t v43 = a32;
  if (!a32) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_19E2E7688(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37)
{
  if (__p)
  {
    operator delete(__p);
    if (!v38)
    {
LABEL_3:
      char v39 = a36;
      if (!a36) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if (!v38)
  {
    goto LABEL_3;
  }
  operator delete(v38);
  char v39 = a36;
  if (!a36)
  {
LABEL_4:
    if (v37) {
      goto LABEL_12;
    }
    goto LABEL_13;
  }
LABEL_8:
  operator delete(v39);
  if (v37) {
LABEL_12:
  }
    JUMPOUT(0x19E2E7634);
LABEL_13:
  JUMPOUT(0x19E2E7638);
}

uint64_t sub_19E2E76D8(uint64_t a1, int *a2)
{
  int v4 = *a2;
  *(unsigned char *)(a1 + 4) = *((unsigned char *)a2 + 4);
  *(_DWORD *)a1 = v4;
  sub_19E2E7AE4(a1 + 8, (uint64_t)(a2 + 2));
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t v6 = (unsigned char *)*((void *)a2 + 12);
  uint64_t v5 = (unsigned char *)*((void *)a2 + 13);
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      sub_19E13D694();
    }
    unint64_t v8 = (char *)operator new(v5 - v6);
    *(void *)(a1 + 96) = v8;
    *(void *)(a1 + 104) = v8;
    int64_t v9 = &v8[8 * (v7 >> 3)];
    *(void *)(a1 + 112) = v9;
    memcpy(v8, v6, v7);
    *(void *)(a1 + 104) = v9;
  }
  uint64_t v10 = *((void *)a2 + 15);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 120) = v10;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  long long v12 = (unsigned char *)*((void *)a2 + 16);
  unint64_t v11 = (unsigned char *)*((void *)a2 + 17);
  int64_t v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0) {
      sub_19E13D694();
    }
    long double v14 = (char *)operator new(v11 - v12);
    *(void *)(a1 + 128) = v14;
    *(void *)(a1 + 136) = v14;
    vDSP_Length v15 = &v14[8 * (v13 >> 3)];
    *(void *)(a1 + 144) = v15;
    memcpy(v14, v12, v13);
    *(void *)(a1 + 136) = v15;
  }
  int v16 = a2[38];
  *(void *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 152) = v16;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  vDSP_Length v18 = (unsigned char *)*((void *)a2 + 20);
  unint64_t v17 = (unsigned char *)*((void *)a2 + 21);
  int64_t v19 = v17 - v18;
  if (v17 != v18)
  {
    if (v19 < 0) {
      sub_19E13D694();
    }
    uint64_t v20 = (char *)operator new(v17 - v18);
    *(void *)(a1 + 160) = v20;
    *(void *)(a1 + 168) = v20;
    uint64_t v21 = &v20[8 * (v19 >> 3)];
    *(void *)(a1 + 176) = v21;
    memcpy(v20, v18, v19);
    *(void *)(a1 + 168) = v21;
  }
  uint64_t v22 = *((void *)a2 + 23);
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 184) = v22;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  uint64_t v24 = (unsigned char *)*((void *)a2 + 24);
  unint64_t v23 = (unsigned char *)*((void *)a2 + 25);
  int64_t v25 = v23 - v24;
  if (v23 != v24)
  {
    if (v25 < 0) {
      sub_19E13D694();
    }
    long long v26 = (char *)operator new(v23 - v24);
    *(void *)(a1 + 192) = v26;
    *(void *)(a1 + 200) = v26;
    long double v27 = &v26[8 * (v25 >> 3)];
    *(void *)(a1 + 208) = v27;
    memcpy(v26, v24, v25);
    *(void *)(a1 + 200) = v27;
  }
  uint64_t v28 = *((void *)a2 + 27);
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 216) = v28;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  int v30 = (unsigned char *)*((void *)a2 + 28);
  int32x2_t v29 = (unsigned char *)*((void *)a2 + 29);
  int64_t v31 = v29 - v30;
  if (v29 != v30)
  {
    if (v31 < 0) {
      sub_19E13D694();
    }
    unint64_t v32 = (char *)operator new(v29 - v30);
    *(void *)(a1 + 224) = v32;
    *(void *)(a1 + 232) = v32;
    uint64_t v33 = &v32[8 * (v31 >> 3)];
    *(void *)(a1 + 240) = v33;
    memcpy(v32, v30, v31);
    *(void *)(a1 + 232) = v33;
  }
  *(void *)(a1 + 248) = *((void *)a2 + 31);
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  uint64_t v35 = (unsigned char *)*((void *)a2 + 32);
  uint64_t v34 = (unsigned char *)*((void *)a2 + 33);
  int64_t v36 = v34 - v35;
  if (v34 != v35)
  {
    if (v36 < 0) {
      sub_19E13D694();
    }
    uint64_t v37 = (char *)operator new(v34 - v35);
    *(void *)(a1 + 256) = v37;
    *(void *)(a1 + 264) = v37;
    uint64_t v38 = &v37[8 * (v36 >> 3)];
    *(void *)(a1 + 272) = v38;
    memcpy(v37, v35, v36);
    *(void *)(a1 + 264) = v38;
  }
  *(_DWORD *)(a1 + 280) = a2[70];
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 288) = 0;
  uint64_t v40 = (unsigned char *)*((void *)a2 + 36);
  char v39 = (unsigned char *)*((void *)a2 + 37);
  int64_t v41 = v39 - v40;
  if (v39 != v40)
  {
    if (v41 < 0) {
      sub_19E13D694();
    }
    uint64_t v42 = (char *)operator new(v39 - v40);
    *(void *)(a1 + 288) = v42;
    *(void *)(a1 + 296) = v42;
    uint64_t v43 = &v42[8 * (v41 >> 3)];
    *(void *)(a1 + 304) = v43;
    memcpy(v42, v40, v41);
    *(void *)(a1 + 296) = v43;
  }
  *(_DWORD *)(a1 + 312) = a2[78];
  return a1;
}

void sub_19E2E79B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void *a10)
{
  vDSP_Length v18 = *v16;
  if (*v16)
  {
    v10[37] = v18;
    operator delete(v18);
    int64_t v19 = *a9;
    if (!*a9)
    {
LABEL_3:
      uint64_t v20 = *v15;
      if (!*v15) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else
  {
    int64_t v19 = *a9;
    if (!*a9) {
      goto LABEL_3;
    }
  }
  v10[33] = v19;
  operator delete(v19);
  uint64_t v20 = *v15;
  if (!*v15)
  {
LABEL_4:
    uint64_t v21 = *v14;
    if (!*v14) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  v10[29] = v20;
  operator delete(v20);
  uint64_t v21 = *v14;
  if (!*v14)
  {
LABEL_5:
    uint64_t v22 = *v13;
    if (!*v13) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  v10[25] = v21;
  operator delete(v21);
  uint64_t v22 = *v13;
  if (!*v13)
  {
LABEL_6:
    unint64_t v23 = *v12;
    if (!*v12) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }
LABEL_13:
  v10[21] = v22;
  operator delete(v22);
  unint64_t v23 = *v12;
  if (!*v12)
  {
LABEL_7:
    uint64_t v24 = *v11;
    if (!*v11) {
      goto LABEL_8;
    }
    goto LABEL_15;
  }
LABEL_14:
  v10[17] = v23;
  operator delete(v23);
  uint64_t v24 = *v11;
  if (!*v11)
  {
LABEL_8:
    sub_19E2BADC4(a10);
    _Unwind_Resume(a1);
  }
LABEL_15:
  v10[13] = v24;
  operator delete(v24);
  sub_19E2BADC4(a10);
  _Unwind_Resume(a1);
}

uint64_t sub_19E2E7AE4(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(unsigned char **)(a2 + 24);
  uint64_t v5 = *(unsigned char **)(a2 + 32);
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      sub_19E13D694();
    }
    unint64_t v8 = (char *)operator new(v5 - v6);
    *(void *)(a1 + 24) = v8;
    *(void *)(a1 + 32) = v8;
    int64_t v9 = &v8[8 * (v7 >> 3)];
    *(void *)(a1 + 40) = v9;
    memcpy(v8, v6, v7);
    *(void *)(a1 + 32) = v9;
  }
  int v10 = *(_DWORD *)(a2 + 48);
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 48) = v10;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  long long v12 = *(unsigned char **)(a2 + 56);
  unint64_t v11 = *(unsigned char **)(a2 + 64);
  int64_t v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0) {
      sub_19E13D694();
    }
    long double v14 = (char *)operator new(v11 - v12);
    *(void *)(a1 + 56) = v14;
    *(void *)(a1 + 64) = v14;
    vDSP_Length v15 = &v14[8 * (v13 >> 3)];
    *(void *)(a1 + 72) = v15;
    memcpy(v14, v12, v13);
    *(void *)(a1 + 64) = v15;
  }
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  return a1;
}

void sub_19E2E7BDC(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 64) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2E7C10(uint64_t a1@<X0>, uint64_t a2@<X1>, const double **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = 0;
  int64_t v9 = 0;
  int v10 = 0;
  int v11 = *(_DWORD *)a1;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = 0;
  *(_DWORD *)(a4 + 24) = 0;
  double v57 = 0;
  uint64_t v58 = 0;
  signed int v59 = 0;
  int v12 = v11 + 1;
  if (v11 != -1)
  {
    if (v11 <= -2) {
      sub_19E13D694();
    }
    int v10 = (double *)operator new(8 * v12);
    uint64_t v8 = (uint64_t)&v10[v11 + 1];
    bzero(v10, 8 * v12);
    int64_t v9 = &v10[v12];
  }
  *(void *)a4 = v10;
  *(void *)(a4 + 8) = v9;
  *(void *)(a4 + 16) = v8;
  *(_DWORD *)(a4 + 24) = v12;
  double v13 = sub_19E2E13F4(a1, a2, (uint64_t)a3);
  double v15 = v14;
  double v16 = exp(-v13);
  double v17 = v13 + 1.0;
  double *v10 = v16 * *(double *)(a1 + 16) * (v17 + v15 + v17 + v15);
  int64_t v19 = *(const void **)a2;
  uint64_t v18 = *(void *)(a2 + 8);
  int64_t v20 = v18 - *(void *)a2;
  if (v18 == *(void *)a2)
  {
    uint64_t v22 = 0;
    uint64_t v21 = 0;
  }
  else
  {
    if (v20 < 0) {
      sub_19E13D694();
    }
    uint64_t v21 = (char *)operator new(v18 - *(void *)a2);
    uint64_t v22 = &v21[8 * (v20 >> 3)];
    memcpy(v21, v19, v20);
  }
  int v23 = *(_DWORD *)(a2 + 24);
  vDSP_vsubD(*a3, 1, (const double *)v21, 1, (double *)v21, 1, v23);
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  unint64_t v53 = 0;
  uint64_t v24 = v22 - v21;
  if (v22 != v21)
  {
    if (v24 < 0) {
      sub_19E13D694();
    }
    int64_t v25 = (char *)operator new(v22 - v21);
    long long v26 = &v25[8 * (v24 >> 3)];
    uint64_t v51 = v25;
    unint64_t v53 = v26;
    memcpy(v25, v21, v22 - v21);
    uint64_t v52 = v26;
  }
  int v54 = v23;
  sub_19E2C2AC8((uint64_t)&v51, (uint64_t)__p);
  signed int v27 = v56;
  uint64_t v58 = 0;
  signed int v59 = 0;
  double v57 = 0;
  if (v56)
  {
    if (v56 < 0) {
      sub_19E13D694();
    }
    uint64_t v28 = (float64x2_t *)operator new(8 * v56);
    double v57 = v28;
    signed int v59 = (char *)&v28->f64[v27];
    bzero(v28, 8 * v27);
    unint64_t v29 = 0;
    uint64_t v58 = (float64x2_t *)((char *)v28 + 8 * v27);
    signed int v60 = v27;
    int v30 = __p[0];
    if (v27 < 4) {
      goto LABEL_46;
    }
    if ((unint64_t)((char *)v28 - (char *)__p[0]) < 0x20) {
      goto LABEL_46;
    }
    unint64_t v31 = 0;
    unint64_t v29 = v27 & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v32 = v29;
    do
    {
      long long v33 = *(_OWORD *)&v30[v31 / 8 + 2];
      f64 = (_OWORD *)v28[v31 / 0x10].f64;
      _OWORD *f64 = *(_OWORD *)&v30[v31 / 8];
      f64[1] = v33;
      v31 += 32;
      v32 -= 4;
    }
    while (v32);
    if (v29 != v27)
    {
LABEL_46:
      do
      {
        *(void *)&v28->f64[v29] = v30[v29];
        ++v29;
      }
      while (v27 != v29);
    }
  }
  else
  {
    uint64_t v28 = 0;
    signed int v60 = 0;
    int v30 = __p[0];
    if (!__p[0]) {
      goto LABEL_22;
    }
  }
  __p[1] = v30;
  operator delete(v30);
LABEL_22:
  if (v51)
  {
    uint64_t v52 = v51;
    operator delete(v51);
  }
  if (v21) {
    operator delete(v21);
  }
  uint64_t v35 = *(int *)(a1 + 48);
  if (v35)
  {
    int64_t v36 = *(float64x2_t **)(a1 + 24);
    double v37 = v16 * 1.66666667 * (v17 * *(double *)(a1 + 16));
    if (v35 >= 6)
    {
      unint64_t v38 = 0;
      if ((unint64_t)((char *)(v10 + 1) - (char *)v36) >= 0x20
        && (unint64_t)((char *)(v10 + 1) - (char *)v28) >= 0x20)
      {
        unint64_t v38 = v35 & 0xFFFFFFFFFFFFFFFCLL;
        uint64_t v46 = (float64x2_t *)(v10 + 3);
        long long v47 = v36 + 1;
        uint64_t v48 = v28 + 1;
        unint64_t v49 = v35 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          float64x2_t v50 = vdivq_f64(vmulq_n_f64(*v48, v37), vmulq_f64(*v47, *v47));
          v46[-1] = vdivq_f64(vmulq_n_f64(v48[-1], v37), vmulq_f64(v47[-1], v47[-1]));
          *uint64_t v46 = v50;
          v46 += 2;
          v47 += 2;
          v48 += 2;
          v49 -= 4;
        }
        while (v49);
        if (v38 == v35) {
          goto LABEL_39;
        }
      }
    }
    else
    {
      unint64_t v38 = 0;
    }
    char v39 = &v10[v38 + 1];
    uint64_t v40 = &v28->f64[v38];
    int64_t v41 = &v36->f64[v38];
    uint64_t v42 = v35 - v38;
    do
    {
      double v43 = *v41++;
      double v44 = v43;
      double v45 = *v40++;
      *v39++ = v37 * v45 / (v44 * v44);
      --v42;
    }
    while (v42);
LABEL_39:
    uint64_t v58 = v28;
    operator delete(v28);
    return;
  }
  if (v28) {
    goto LABEL_39;
  }
}

void sub_19E2E7FF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  if (v23) {
    operator delete(v23);
  }
  *(void *)(v24 + 8) = v22;
  operator delete(v22);
  _Unwind_Resume(a1);
}

void sub_19E2E8060(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a9) {
    JUMPOUT(0x19E2E804CLL);
  }
  JUMPOUT(0x19E2E8040);
}

BOOL sub_19E2E8070(uint64_t a1, int *a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Early stopping already requested.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v3 = *(_DWORD *)(a1 + 12);
  if (v3 == -1) {
    return 0;
  }
  int v6 = *a2;
  uint64_t v5 = (uint64_t)(a2 + 2);
  if (v6 == 1 || *(double *)(a1 + 120) < *((double *)a2 + 13) - *(double *)(a1 + 16))
  {
    sub_19E29AB9C(a1 + 24, v5);
    *(void *)(a1 + 120) = *((void *)a2 + 13);
    *(_DWORD *)(a1 + 128) = 0;
    *(unsigned char *)(a1 + 8) = 0;
    return 0;
  }
  else
  {
    int v8 = *(_DWORD *)(a1 + 128);
    *(_DWORD *)(a1 + 128) = v8 + 1;
    BOOL v9 = v8 >= v3;
    *(unsigned char *)(a1 + 8) = v9;
    return v9;
  }
}

void sub_19E2E8164(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char **sub_19E2E8178@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5 = *(_DWORD *)(a1 + 56);
  int v6 = *(_DWORD *)(a1 + 60);
  uint64_t v7 = *(void *)(a1 + 64);
  char v30 = 0;
  unint64_t v29 = (char *)&unk_1EF0A86A8;
  int v31 = v5;
  v21[0] = 0;
  *(_DWORD *)uint64_t v22 = v6;
  *(void *)&v22[4] = v7;
  memset(v23, 0, sizeof(v23));
  uint64_t v24 = v25;
  v25[0] = 0;
  double v26 = 0.0;
  v27[0] = 0;
  v25[1] = 0;
  v25[2] = &v26;
  int v28 = 0;
  char v33 = 0;
  unint64_t v32 = (uint64_t (**)(void **, void **))&unk_1EF0A86A8;
  int v34 = v5;
  char v36 = 0;
  uint64_t v35 = (uint64_t (**)(void **, void **))&unk_1EF0A8780;
  int v38 = HIDWORD(v7);
  uint64_t v37 = *(void *)v22;
  sub_19E2965D0(v39, (uint64_t)v23);
  v39[12] = (uint64_t *)v27[1];
  int v40 = v28;
  int64_t v20 = &unk_1EF0A8780;
  sub_19E2470C8((char **)v23);
  int v8 = *(_DWORD *)(a1 + 72);
  (*(void (**)(char **__return_ptr))(**(void **)(a1 + 120) + 16))(&v29);
  uint64_t v9 = *(void *)(a2 + 24);
  if (!v9) {
    goto LABEL_16;
  }
  double v10 = (*(double (**)(uint64_t, char **))(*(void *)v9 + 48))(v9, &v29);
  (*(void (**)(void, char **))(**(void **)(a1 + 120) + 24))(*(void *)(a1 + 120), &v29);
  std::chrono::steady_clock::now();
  LODWORD(v20) = 1;
  sub_19E291E68((uint64_t **)v21, (uint64_t *)&v29);
  double v26 = v10;
  sub_19E2A7DDC(*(void *)(a1 + 120), (uint64_t)v27);
  if (1 % v8) {
    goto LABEL_5;
  }
  uint64_t v11 = *(void *)(a2 + 56);
  if (!v11) {
LABEL_17:
  }
    sub_19E2A8074();
  if (((*(uint64_t (**)(uint64_t, void **))(*(void *)v11 + 48))(v11, &v20) & 1) == 0)
  {
LABEL_5:
    if (((*v32)((void **)&v32, &v20) & 1) == 0)
    {
      char v12 = (*v35)((void **)&v35, &v20);
      sub_19E2470C8(v27);
      sub_19E2470C8((char **)v21);
      sub_19E2470C8(&v29);
      if (v12) {
        goto LABEL_15;
      }
      int v13 = 2;
      while (1)
      {
        (*(void (**)(char **__return_ptr))(**(void **)(a1 + 120) + 16))(&v29);
        uint64_t v14 = *(void *)(a2 + 24);
        if (!v14) {
          break;
        }
        double v15 = (*(double (**)(uint64_t, char **))(*(void *)v14 + 48))(v14, &v29);
        (*(void (**)(void, char **))(**(void **)(a1 + 120) + 24))(*(void *)(a1 + 120), &v29);
        std::chrono::steady_clock::now();
        std::chrono::steady_clock::now();
        LODWORD(v20) = v13;
        sub_19E291E68((uint64_t **)v21, (uint64_t *)&v29);
        double v26 = v15;
        sub_19E2A7DDC(*(void *)(a1 + 120), (uint64_t)v27);
        if (!(v13 % v8))
        {
          uint64_t v16 = *(void *)(a2 + 56);
          if (!v16) {
            goto LABEL_17;
          }
          if ((*(uint64_t (**)(uint64_t, void **))(*(void *)v16 + 48))(v16, &v20)) {
            goto LABEL_6;
          }
        }
        if ((*v32)((void **)&v32, &v20)) {
          goto LABEL_6;
        }
        char v17 = (*v35)((void **)&v35, &v20);
        sub_19E2470C8(v27);
        sub_19E2470C8((char **)v21);
        sub_19E2470C8(&v29);
        ++v13;
        if (v17) {
          goto LABEL_15;
        }
      }
LABEL_16:
      sub_19E2A8074();
    }
  }
LABEL_6:
  sub_19E2470C8(v27);
  sub_19E2470C8((char **)v21);
  sub_19E2470C8(&v29);
LABEL_15:
  sub_19E2A7DDC(*(void *)(a1 + 120), a3);
  uint64_t v35 = (uint64_t (**)(void **, void **))&unk_1EF0A8780;
  return sub_19E2470C8((char **)v39);
}

void sub_19E2E8628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char *a39)
{
  sub_19E2470C8(v41);
  sub_19E2470C8(v40);
  sub_19E2470C8(&a39);
  *(void *)(v42 - 240) = a11;
  sub_19E2470C8(v39);
  _Unwind_Resume(a1);
}

void sub_19E2E86B0(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 48);
  if (v1 != 1)
  {
    if (!v1) {
      sub_19E29849C();
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_19E298774(exception, "Invalid optimizer in user config.");
    __cxa_throw(exception, (struct type_info *)off_1E599CD18, MEMORY[0x1E4FBA1E8]);
  }
  sub_19E2E8764();
}

void sub_19E2E8750(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19E2E8764()
{
}

void sub_19E2E88A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E2934EC((uint64_t)va);
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_19E2E88BC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E2E88D0(uint64_t a1, uint64_t *a2)
{
  sub_19E2933F8((uint64_t)&v15, (uint64_t)a2);
  *(void *)a1 = &unk_1EF0A8318;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  sub_19E2933F8(a1 + 32, (uint64_t)&v15);
  if (v21)
  {
    uint64_t v4 = (char **)__p;
    if (__p)
    {
      int v5 = v20;
      int v6 = __p;
      if (v20 != __p)
      {
        do
          int v5 = sub_19E2470C8(v5 - 12);
        while (v5 != v4);
        int v6 = __p;
      }
      int64_t v20 = v4;
      operator delete(v6);
    }
  }
  uint64_t v7 = (void **)v17;
  if (v17)
  {
    int v8 = v18;
    uint64_t v9 = v17;
    if (v18 != v17)
    {
      do
      {
        if (*((char *)v8 - 17) < 0) {
          operator delete(*(v8 - 5));
        }
        v8 -= 5;
      }
      while (v8 != v7);
      uint64_t v9 = v17;
    }
    uint64_t v18 = v7;
    operator delete(v9);
  }
  double v10 = (void **)v15;
  if (v15)
  {
    uint64_t v11 = v16;
    char v12 = v15;
    if (v16 != v15)
    {
      do
      {
        if (*((char *)v11 - 25) < 0) {
          operator delete(*(v11 - 6));
        }
        v11 -= 6;
      }
      while (v11 != v10);
      char v12 = v15;
    }
    uint64_t v16 = v10;
    operator delete(v12);
  }
  *(void *)a1 = &unk_1EF0A8678;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  int v13 = sub_19E244298(a2);
  int v14 = sub_19E244DC4((uint64_t)a2);
  *(_DWORD *)(a1 + 176) = v14 + v13;
  sub_19E2E97AC(a1 + 184, v14 + v13);
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 472) = 0;
  *(_DWORD *)(a1 + 488) = 0;
  *(void *)(a1 + 480) = 0;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 316) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 444) = 0u;
  *(void *)(a1 + 528) = 0;
  *(void *)(a1 + 520) = 0;
  *(_DWORD *)(a1 + 544) = 0;
  *(void *)(a1 + 536) = 0;
  *(_DWORD *)(a1 + 560) = -1;
  *(void *)(a1 + 504) = &unk_1EF0A7ED0;
  *(void *)(a1 + 512) = a1 + 176;
  *(void *)(a1 + 576) = 0x3FB999999999999ALL;
  *(void *)(a1 + 584) = 0;
  sub_19E299010(a1 + 592);
  *(void *)(a1 + 10712) = 0;
  *(_OWORD *)(a1 + 10696) = 0u;
  if ((int)sub_19E244DC4(a1 + 32) >= 1) {
    sub_19E2E9054();
  }
  sub_19E2E9204();
}

void sub_19E2E8F44(_Unwind_Exception *a1)
{
  sub_19E2462FC(v6);
  sub_19E298A78(v5);
  int v8 = (void **)(v1 + 65);
  uint64_t v9 = v1[73];
  v1[73] = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  void *v4 = &unk_1EF0A7DE0;
  double v10 = *v8;
  if (*v8)
  {
    v1[66] = v10;
    operator delete(v10);
  }
  sub_19E2BEE60(v3);
  sub_19E29AC3C(v2);
  sub_19E298AC8(v1);
  _Unwind_Resume(a1);
}

void sub_19E2E9054()
{
}

void sub_19E2E91B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_19E245FE8(&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_19E2E91CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
  {
    sub_19E32FAD8((uint64_t)&a9, a9);
    operator delete(v9);
    _Unwind_Resume(a1);
  }
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_19E2E9204()
{
}

void sub_19E2E9360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_19E245FE8(&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_19E2E937C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
  {
    sub_19E32FAD8((uint64_t)&a9, a9);
    operator delete(v9);
    _Unwind_Resume(a1);
  }
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_19E2E93B8(uint64_t a1)
{
  int v1 = (void *)sub_19E2ED704(a1);

  operator delete(v1);
}

uint64_t **sub_19E2E93E0@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X8>)
{
  uint64_t v4 = a1 + 8;
  unint64_t v5 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3);
  uint64_t v6 = a1 + 32;
  int v7 = sub_19E244298((uint64_t *)(a1 + 32));
  signed int v8 = 5 * (sub_19E244DC4(v6) + v7);
  if (*(unsigned char *)(v4 + 136) && v8 <= (int)(-1431655765 * ((*(void *)(a1 + 128) - *(void *)(a1 + 120)) >> 5))) {
    signed int v8 = -1431655765 * ((*(void *)(a1 + 128) - *(void *)(a1 + 120)) >> 5);
  }
  if (v5 >= v8)
  {
    (*(void (**)(char **__return_ptr))(**(void **)(a1 + 584) + 16))(v11);
    sub_19E291E68(a2, (uint64_t *)v11);
    return (uint64_t **)sub_19E2470C8(v11);
  }
  else
  {
    uint64_t v9 = (uint64_t *)(*(void *)(a1 + 10696)
                   + 96 * (int)(-991146299 * ((*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3)));
    return sub_19E291E68(a2, v9);
  }
}

void sub_19E2E9524(uint64_t a1, long long **a2, double a3)
{
  sub_19E29CE6C(a2, (uint64_t)&__p);
  double v5 = sub_19E2EBB38(a1 + 176, (uint64_t)&__p);
  double v7 = sqrt(v6);
  double v20 = v7;
  double v21 = v5;
  double v8 = v5 + *(double *)(a1 + 568) * v7;
  double v19 = v8;
  unint64_t v9 = *(void *)(a1 + 160);
  if (v9 >= *(void *)(a1 + 168))
  {
    uint64_t v14 = sub_19E2A4064((uint64_t *)(a1 + 152), (uint64_t)&__p, &v21, (uint64_t *)&v20, (uint64_t *)&v19);
  }
  else
  {
    *(void *)unint64_t v9 = 0;
    *(void *)(v9 + 8) = 0;
    *(void *)(v9 + 16) = 0;
    double v10 = __p;
    int64_t v11 = v23 - (unsigned char *)__p;
    if (v23 != __p)
    {
      if (v11 < 0) {
        sub_19E13D694();
      }
      char v12 = (char *)operator new(v23 - (unsigned char *)__p);
      *(void *)unint64_t v9 = v12;
      *(void *)(v9 + 8) = v12;
      int v13 = &v12[8 * (v11 >> 3)];
      *(void *)(v9 + 16) = v13;
      memcpy(v12, v10, v11);
      *(void *)(v9 + 8) = v13;
    }
    *(_DWORD *)(v9 + 24) = v24;
    *(double *)(v9 + 32) = v5;
    *(double *)(v9 + 40) = v7;
    *(double *)(v9 + 48) = v8;
    uint64_t v14 = v9 + 56;
    *(void *)(a1 + 160) = v9 + 56;
  }
  *(void *)(a1 + 160) = v14;
  uint64_t v15 = *(int *)(a1 + 488);
  uint64_t v16 = v15 + 1;
  *(_DWORD *)(a1 + 488) = v15 + 1;
  uint64_t v17 = *(void *)(a1 + 464);
  unint64_t v18 = (*(void *)(a1 + 472) - v17) >> 3;
  if (v15 + 1 <= v18)
  {
    if (v15 + 1 < v18) {
      *(void *)(a1 + 472) = v17 + 8 * v15 + 8;
    }
  }
  else
  {
    sub_19E2482DC(a1 + 464, v15 + 1 - v18);
    uint64_t v16 = *(int *)(a1 + 488);
    uint64_t v17 = *(void *)(a1 + 464);
  }
  *(double *)(v17 + 8 * v16 - 8) = a3;
  sub_19E2ED8C0(a1 + 176, (uint64_t)&__p);
  sub_19E2EEAA4(a1 + 496, a1 + 176);
}

void sub_19E2E9760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, char *a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_19E2E97AC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + 8) = xmmword_19E351FD0;
  *(void *)(a1 + 24) = 0;
  uint64_t v4 = a2 << 32;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  size_t v5 = 8 * (int)a2;
  if (a2)
  {
    if ((a2 & 0x80000000) != 0) {
      sub_19E13D694();
    }
    double v6 = (char *)operator new(8 * (int)a2);
    *(void *)(a1 + 24) = v6;
    *(void *)(a1 + 40) = &v6[8 * (int)a2];
    bzero(v6, v5);
    *(void *)(a1 + 32) = &v6[v5];
    *(_DWORD *)(a1 + 48) = a2;
    if (v4) {
      goto LABEL_4;
    }
  }
  else
  {
    double v6 = 0;
    *(_DWORD *)(a1 + 48) = 0;
    if (v4) {
LABEL_4:
    }
      memset_pattern16(v6, &unk_19E351820, v5);
  }
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(void *)(a1 + 72) = 0;
  int v7 = a2 + 1;
  if (a2 == -1)
  {
    double v8 = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 72) = 0;
    *(_DWORD *)(a1 + 80) = v7;
    MEMORY[0] = 0;
    if (!a2) {
      return a1;
    }
    goto LABEL_12;
  }
  if (v7 < 0) {
    sub_19E13D694();
  }
  double v8 = operator new(8 * v7);
  bzero(v8, 8 * v7);
  *(void *)(a1 + 56) = v8;
  *(void *)(a1 + 64) = &v8[v7];
  *(void *)(a1 + 72) = &v8[v7];
  *(_DWORD *)(a1 + 80) = v7;
  *double v8 = 0;
  if (a2)
  {
LABEL_12:
    unint64_t v9 = 0;
    if (a2 == 1) {
      goto LABEL_16;
    }
    unint64_t v9 = a2 & 0xFFFFFFFFFFFFFFFELL;
    double v10 = v8 + 1;
    unint64_t v11 = a2 & 0xFFFFFFFFFFFFFFFELL;
    char v12 = (long long *)v6;
    do
    {
      long long v13 = *v12++;
      long double v20 = log(*((long double *)&v13 + 1));
      *(double *)&long long v14 = log(*(long double *)&v13);
      *((long double *)&v14 + 1) = v20;
      *v10++ = v14;
      v11 -= 2;
    }
    while (v11);
    if (v9 != a2)
    {
LABEL_16:
      uint64_t v15 = (long double *)&v8[v9 + 1];
      uint64_t v16 = (double *)&v6[8 * v9];
      uint64_t v17 = a2 - v9;
      do
      {
        long double v18 = *v16++;
        *v15++ = log(v18);
        --v17;
      }
      while (v17);
    }
  }
  return a1;
}

void sub_19E2E998C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E13A9BC(a1);
}

void sub_19E2E99A8(void *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  sub_19E13A9BC(a1);
}

double sub_19E2E99C4(uint64_t a1, double a2, double a3)
{
  return a2 + *(double *)(a1 + 64) * a3;
}

double sub_19E2E99D0()
{
  return -1.79769313e308;
}

void sub_19E2E99DC(uint64_t a1)
{
  long double v2 = pow((double)*(int *)(*(void *)(a1 + 8) + 120), (double)*(int *)(*(void *)(a1 + 8) + 124) * 0.5 + 2.0);
  long double v3 = log(v2 * 9.8696044 / (*(double *)(a1 + 72) * 3.0));
  *(double *)(a1 + 64) = sqrt(v3 + v3);

  sub_19E2E9A6C(a1);
}

double sub_19E2E9A64()
{
  return 0.0;
}

void sub_19E2E9A6C(uint64_t a1)
{
  int v104 = 0;
  uint64_t v105 = 0;
  unint64_t v106 = 0;
  uint64_t v1 = *(void **)(a1 + 8);
  uint64_t v101 = 0;
  unint64_t v102 = 0;
  size_t v100 = 0;
  long double v3 = (unsigned char *)v1[12];
  long double v2 = (unsigned char *)v1[13];
  int64_t v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0) {
      sub_19E13D694();
    }
    size_t v5 = (char *)operator new(v2 - v3);
    double v6 = &v5[8 * (v4 >> 3)];
    size_t v100 = v5;
    unint64_t v102 = v6;
    memcpy(v5, v3, v4);
    uint64_t v101 = v6;
  }
  uint64_t v7 = v1[15];
  uint64_t v103 = v7;
  if (!v7)
  {
    uint64_t v55 = 0;
    uint64_t v58 = 0;
    *(_DWORD *)(a1 + 56) = 0;
    long long v62 = v100;
    signed int v63 = HIDWORD(v103);
    long long v107 = 0;
    int v108 = 0;
    uint64_t v109 = 0;
    if (HIDWORD(v103)) {
      goto LABEL_65;
    }
    goto LABEL_81;
  }
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  double v10 = 0;
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v90 = (int)v7;
  uint64_t v91 = v7;
  size_t v13 = 8 * (v7 >> 32);
  uint64_t v88 = v7 >> 32;
  size_t v89 = v13;
  unint64_t v87 = (v7 >> 32) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v93 = HIDWORD(v7);
  uint64_t v94 = 16;
  do
  {
    uint64_t v14 = *(void *)(a1 + 8);
    uint64_t v15 = v100;
    __p = 0;
    *(void *)uint64_t v96 = 0;
    uint64_t v97 = 0;
    if (!v93)
    {
      uint64_t v16 = 0;
      int v108 = 0;
      uint64_t v109 = 0;
      long long v107 = 0;
      unsigned int v110 = 0;
      goto LABEL_27;
    }
    if (v7 < 0) {
      sub_19E13D694();
    }
    uint64_t v16 = operator new(v13);
    bzero(v16, v13);
    if ((unint64_t)v7 >> 33 < 3)
    {
      unint64_t v17 = 0;
      unint64_t v18 = v88;
      goto LABEL_17;
    }
    unint64_t v18 = v88;
    if ((unint64_t)((char *)v16 - &v100[v13 * v12]) < 0x20)
    {
      unint64_t v17 = 0;
LABEL_17:
      unint64_t v23 = v18 - v17;
      uint64_t v24 = 8 * v17;
      int64_t v25 = (void *)v16 + v17;
      double v26 = (uint64_t *)&v15[v8 + v24];
      do
      {
        uint64_t v27 = *v26++;
        *v25++ = v27;
        --v23;
      }
      while (v23);
      goto LABEL_19;
    }
    double v19 = (long long *)&v100[v94];
    long double v20 = v16 + 1;
    unint64_t v21 = v87;
    do
    {
      long long v22 = *v19;
      *(v20 - 1) = *(v19 - 1);
      *long double v20 = v22;
      v19 += 2;
      v20 += 2;
      v21 -= 4;
    }
    while (v21);
    unint64_t v17 = v87;
    if (v88 != v87) {
      goto LABEL_17;
    }
LABEL_19:
    long long v107 = 0;
    int v108 = 0;
    uint64_t v109 = 0;
    unsigned int v110 = v93;
    sub_19E2482DC((uint64_t)&v107, v18);
    uint64_t v28 = v110;
    if ((int)v110 >= 1)
    {
      uint64_t v29 = 0;
      char v30 = v107;
      if (v110 < 4) {
        goto LABEL_25;
      }
      if ((unint64_t)(v107 - (unsigned char *)v16) < 0x20) {
        goto LABEL_25;
      }
      unint64_t v31 = 0;
      uint64_t v29 = v110 & 0xFFFFFFFC;
      uint64_t v32 = (8 * v110) & 0x7FFFFFFE0;
      do
      {
        long long v33 = v16[v31 / 0x10 + 1];
        int v34 = &v30[v31];
        *int v34 = v16[v31 / 0x10];
        v34[1] = v33;
        v31 += 32;
      }
      while (v32 != v31);
      if (v29 != v28)
      {
LABEL_25:
        uint64_t v35 = v28 - v29;
        uint64_t v36 = v29 << 32;
        do
        {
          *(void *)&v30[v36 >> 29] = *(void *)((char *)v16 + (v36 >> 29));
          v36 += 0x100000000;
          --v35;
        }
        while (v35);
      }
    }
LABEL_27:
    double v37 = sub_19E2EA240(v14, (uint64_t)&v107);
    double v38 = v37;
    if (v11 < v10)
    {
      *v11++ = v37;
      uint64_t v7 = v91;
      size_t v13 = v89;
      uint64_t v105 = (uint64_t)v11;
      char v39 = v107;
      if (!v107) {
        goto LABEL_30;
      }
LABEL_29:
      int v108 = v39;
      operator delete(v39);
      goto LABEL_30;
    }
    uint64_t v40 = v11 - v9;
    unint64_t v41 = v40 + 1;
    if ((unint64_t)(v40 + 1) >> 61) {
      sub_19E13D694();
    }
    if (((char *)v10 - (char *)v9) >> 2 > v41) {
      unint64_t v41 = ((char *)v10 - (char *)v9) >> 2;
    }
    if ((unint64_t)((char *)v10 - (char *)v9) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v42 = v41;
    }
    if (v42)
    {
      if (v42 >> 61) {
        sub_19E13C418();
      }
      double v43 = operator new(8 * v42);
      double v44 = (double *)&v43[8 * v40];
      double *v44 = v38;
      uint64_t v45 = (uint64_t)(v44 + 1);
      if (v11 != v9)
      {
LABEL_41:
        unint64_t v46 = (char *)(v11 - 1) - (char *)v9;
        if (v46 < 0x168
          || &v43[(char *)v11 - (char *)v9 - 8 - (v46 & 0xFFFFFFFFFFFFFFF8)] > &v43[(char *)v11 - (char *)v9 - 8]
          || (double *)((char *)v11 - (v46 & 0xFFFFFFFFFFFFFFF8) - 8) > v11 - 1
          || (unint64_t)((char *)v9 - v43) < 0x20)
        {
          long long v47 = v11;
          uint64_t v7 = v91;
          size_t v13 = v89;
        }
        else
        {
          uint64_t v49 = (v46 >> 3) + 1;
          uint64_t v50 = 8 * (v49 & 0x3FFFFFFFFFFFFFFCLL);
          long long v47 = &v11[v50 / 0xFFFFFFFFFFFFFFF8];
          double v44 = (double *)((char *)v44 - v50);
          uint64_t v51 = &v43[8 * v40 - 16];
          uint64_t v52 = v11 - 2;
          uint64_t v53 = v49 & 0x3FFFFFFFFFFFFFFCLL;
          uint64_t v7 = v91;
          do
          {
            long long v54 = *(_OWORD *)v52;
            *(v51 - 1) = *((_OWORD *)v52 - 1);
            *uint64_t v51 = v54;
            v51 -= 2;
            v52 -= 4;
            v53 -= 4;
          }
          while (v53);
          size_t v13 = v89;
          if (v49 == (v49 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_44:
            double v10 = (double *)&v43[8 * v42];
            int v104 = v44;
            uint64_t v105 = v45;
            unint64_t v106 = v10;
            if (!v9) {
              goto LABEL_46;
            }
LABEL_45:
            operator delete(v9);
            goto LABEL_46;
          }
        }
        do
        {
          uint64_t v48 = *((void *)v47-- - 1);
          *((void *)v44-- - 1) = v48;
        }
        while (v47 != v9);
        goto LABEL_44;
      }
    }
    else
    {
      double v43 = 0;
      double v44 = (double *)(8 * v40);
      *(double *)(8 * v40) = v37;
      uint64_t v45 = 8 * v40 + 8;
      if (v11 != v9) {
        goto LABEL_41;
      }
    }
    uint64_t v7 = v91;
    size_t v13 = v89;
    double v10 = (double *)&v43[8 * v42];
    int v104 = v44;
    uint64_t v105 = v45;
    unint64_t v106 = v10;
    if (v9) {
      goto LABEL_45;
    }
LABEL_46:
    unint64_t v9 = v44;
    unint64_t v11 = (double *)v45;
    uint64_t v105 = v45;
    char v39 = v107;
    if (v107) {
      goto LABEL_29;
    }
LABEL_30:
    if (v16) {
      operator delete(v16);
    }
    ++v12;
    v94 += v13;
    v8 += v13;
  }
  while (v12 != v90);
  uint64_t v55 = v104;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)(a1 + 8) + 120);
  if (v55 == v11)
  {
    uint64_t v58 = v55;
    long long v62 = v100;
    signed int v63 = HIDWORD(v103);
    long long v107 = 0;
    int v108 = 0;
    uint64_t v109 = 0;
    if (HIDWORD(v103)) {
      goto LABEL_65;
    }
    goto LABEL_81;
  }
  signed int v56 = v55 + 1;
  if (v55 + 1 == v11)
  {
    uint64_t v58 = v55;
    long long v62 = v100;
    signed int v63 = HIDWORD(v103);
    long long v107 = 0;
    int v108 = 0;
    uint64_t v109 = 0;
    if (HIDWORD(v103)) {
      goto LABEL_65;
    }
    goto LABEL_81;
  }
  double v57 = *v55;
  uint64_t v58 = v55;
  signed int v59 = v55 + 1;
  do
  {
    double v60 = *v59++;
    BOOL v61 = v57 < v60;
    double v57 = fmax(v57, v60);
    if (v61) {
      uint64_t v58 = v56;
    }
    signed int v56 = v59;
  }
  while (v59 != v11);
  long long v62 = v100;
  signed int v63 = HIDWORD(v103);
  long long v107 = 0;
  int v108 = 0;
  uint64_t v109 = 0;
  if (!HIDWORD(v103))
  {
LABEL_81:
    uint64_t v74 = 0;
    LODWORD(v73) = 0;
    uint64_t v64 = 0;
    *(void *)uint64_t v96 = 0;
    uint64_t v97 = 0;
    __p = 0;
    unsigned int v98 = 0;
    goto LABEL_82;
  }
LABEL_65:
  if (v63 < 0) {
    sub_19E13D694();
  }
  uint64_t v64 = operator new(8 * v63);
  uint64_t v65 = (v58 - v55) * v63;
  bzero(v64, 8 * v63);
  if (v63 < 0xA || (uint64_t v66 = &v62[8 * v65], (unint64_t)((char *)v64 - v66) < 0x20))
  {
    unint64_t v67 = 0;
    goto LABEL_69;
  }
  unint64_t v67 = v63 & 0xFFFFFFFFFFFFFFFCLL;
  int v83 = (long long *)(v66 + 16);
  uint64_t v84 = v64 + 1;
  unint64_t v85 = v67;
  do
  {
    long long v86 = *v83;
    *(v84 - 1) = *(v83 - 1);
    _OWORD *v84 = v86;
    v83 += 2;
    v84 += 2;
    v85 -= 4;
  }
  while (v85);
  if (v67 != v63)
  {
LABEL_69:
    unint64_t v68 = v63 - v67;
    uint64_t v69 = 8 * v67;
    unint64_t v70 = (void *)v64 + v67;
    uint64_t v71 = &v62[8 * v65 + v69];
    do
    {
      uint64_t v72 = *(void *)v71;
      v71 += 8;
      *v70++ = v72;
      --v68;
    }
    while (v68);
  }
  __p = 0;
  *(void *)uint64_t v96 = 0;
  uint64_t v97 = 0;
  unsigned int v98 = v63;
  sub_19E2482DC((uint64_t)&__p, v63);
  uint64_t v73 = v98;
  uint64_t v74 = (char *)__p;
  if ((int)v98 >= 1)
  {
    uint64_t v75 = 0;
    if (v98 < 4) {
      goto LABEL_77;
    }
    if ((unint64_t)((unsigned char *)__p - (unsigned char *)v64) < 0x20) {
      goto LABEL_77;
    }
    unint64_t v76 = 0;
    uint64_t v75 = v98 & 0xFFFFFFFC;
    uint64_t v77 = (8 * v98) & 0x7FFFFFFE0;
    do
    {
      long long v78 = v64[v76 / 0x10 + 1];
      int64_t v79 = &v74[v76];
      *(_OWORD *)int64_t v79 = v64[v76 / 0x10];
      *((_OWORD *)v79 + 1) = v78;
      v76 += 32;
    }
    while (v77 != v76);
    if (v75 != v73)
    {
LABEL_77:
      uint64_t v80 = v73 - v75;
      uint64_t v81 = v75 << 32;
      do
      {
        *(void *)&v74[v81 >> 29] = *(void *)((char *)v64 + (v81 >> 29));
        v81 += 0x100000000;
        --v80;
      }
      while (v80);
    }
  }
LABEL_82:
  uint64_t v82 = *(void *)v58;
  uint64_t v99 = *(void *)v58;
  if ((void **)(a1 + 16) != &__p)
  {
    sub_19E1E5B9C((void *)(a1 + 16), v74, *(char **)v96, (uint64_t)(*(void *)v96 - (void)v74) >> 3);
    LODWORD(v73) = v98;
    uint64_t v82 = v99;
    uint64_t v74 = (char *)__p;
  }
  *(_DWORD *)(a1 + 40) = v73;
  *(void *)(a1 + 48) = v82;
  if (v74)
  {
    *(void *)uint64_t v96 = v74;
    operator delete(v74);
  }
  if (v64) {
    operator delete(v64);
  }
  if (v62) {
    operator delete(v62);
  }
  if (v55)
  {
    uint64_t v105 = (uint64_t)v55;
    operator delete(v55);
  }
}

void sub_19E2EA184(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  if (__p) {
    operator delete(__p);
  }
  if (v28) {
    operator delete(v28);
  }
  if (v29) {
    operator delete(v29);
  }
  if (a27) {
    operator delete(a27);
  }
  _Unwind_Resume(exception_object);
}

double sub_19E2EA240(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 120))
  {
    sub_19E2EA324(a1, a2, (uint64_t)__A);
    double __C = 0.0;
    vDSP_dotprD(__A[0], 1, *(const double **)(a1 + 256), 1, &__C, (int)__N);
    double v3 = __C;
    double __C = 0.0;
    vDSP_meanvD(*(const double **)(a1 + 288), 1, &__C, *(int *)(a1 + 312));
    double v4 = __C;
    if (__A[0])
    {
      __A[1] = __A[0];
      operator delete(__A[0]);
    }
    return v4 + v3;
  }
  else
  {
    __A[0] = 0;
    vDSP_meanvD(*(const double **)(a1 + 288), 1, (double *)__A, *(int *)(a1 + 312));
    return *(double *)__A;
  }
}

void sub_19E2EA308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2EA324(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *(_DWORD *)(a1 + 120);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 24) = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  if (v3)
  {
    if (v3 < 0) {
      sub_19E13D694();
    }
    uint64_t v5 = v3;
    double v6 = (char *)operator new(8 * v3);
    bzero(v6, 8 * v3);
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    *(void *)a3 = v6;
    *(void *)(a3 + 8) = &v6[8 * v3];
    *(void *)(a3 + 16) = &v6[8 * v3];
    *(_DWORD *)(a3 + 24) = v3;
    double v26 = v6;
    while (1)
    {
      uint64_t v9 = *(void *)(a1 + 96);
      signed int v10 = *(_DWORD *)(a1 + 124);
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      if (!v10)
      {
        unint64_t v11 = 0;
        uint64_t v29 = 0;
        char v30 = 0;
        __p = 0;
        signed int v31 = 0;
        goto LABEL_14;
      }
      if (v10 < 0) {
        sub_19E13D694();
      }
      unint64_t v11 = operator new(8 * v10);
      bzero(v11, 8 * v10);
      if (v10 >= 8 && (unint64_t)v11 - v9 - 8 * v8 * v10 >= 0x20)
      {
        unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL;
        unint64_t v21 = (long long *)(v9 + v7 * v10 + 16);
        long long v22 = v11 + 1;
        unint64_t v23 = v12;
        do
        {
          long long v24 = *v21;
          *(v22 - 1) = *(v21 - 1);
          _OWORD *v22 = v24;
          v21 += 2;
          v22 += 2;
          v23 -= 4;
        }
        while (v23);
        if (v12 == v10) {
          goto LABEL_12;
        }
      }
      else
      {
        unint64_t v12 = 0;
      }
      unint64_t v13 = v10 - v12;
      uint64_t v14 = 8 * v12;
      uint64_t v15 = (void *)v11 + v12;
      uint64_t v16 = (uint64_t *)(v9 + v14 + v7 * v10);
      do
      {
        uint64_t v17 = *v16++;
        *v15++ = v17;
        --v13;
      }
      while (v13);
LABEL_12:
      __p = 0;
      uint64_t v29 = 0;
      signed int v31 = 0;
      char v30 = 0;
      __p = operator new(8 * v10);
      uint64_t v29 = (char *)__p + 8 * v10;
      char v30 = v29;
      signed int v31 = v10;
      memcpy(__p, v11, 8 * v10);
      double v6 = v26;
LABEL_14:
      double v18 = sub_19E2EA5E4(a1 + 8, (uint64_t)&__p, a2);
      double v19 = *(double *)(a1 + 24);
      *(long double *)&v6[8 * v8] = (v18 + 1.0 + v20) * (exp(-v18) * v19);
      if (__p)
      {
        uint64_t v29 = (char *)__p;
        operator delete(__p);
      }
      if (v11) {
        operator delete(v11);
      }
      ++v8;
      v7 += 8;
      if (v8 == v5) {
        return;
      }
    }
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 24) = 0;
}