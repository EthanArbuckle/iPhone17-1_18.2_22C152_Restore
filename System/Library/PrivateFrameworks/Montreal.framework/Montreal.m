uint64_t sub_19E139E88()
{
  uint64_t result;

  if ((byte_1EB220860 & 1) == 0)
  {
    byte_1EB220860 = 1;
    qword_1EB2207B0 = 0;
    unk_1EB2207B8 = 0;
    qword_1EB2207A8 = 0;
    return __cxa_atexit((void (*)(void *))sub_19E170BBC, &qword_1EB2207A8, &dword_19E138000);
  }
  return result;
}

uint64_t sub_19E139ED0()
{
  if ((byte_1EB220830 & 1) == 0)
  {
    byte_1EB220830 = 1;
    qword_1EB220768 = 0;
    unk_1EB220770 = 0;
    qword_1EB220760 = 0;
    return __cxa_atexit((void (*)(void *))sub_19E170BBC, &qword_1EB220760, &dword_19E138000);
  }
  return result;
}

uint64_t sub_19E139F18()
{
  if ((byte_1EB220828 & 1) == 0)
  {
    byte_1EB220828 = 1;
    qword_1EB220798 = 0;
    unk_1EB2207A0 = 0;
    qword_1EB220790 = 0;
    return __cxa_atexit((void (*)(void *))sub_19E170BBC, &qword_1EB220790, &dword_19E138000);
  }
  return result;
}

uint64_t sub_19E139F60()
{
  if ((byte_1EB220820 & 1) == 0)
  {
    byte_1EB220820 = 1;
    qword_1EB220780 = 0;
    qword_1EB220788 = 0;
    qword_1EB220778 = 0;
    return __cxa_atexit((void (*)(void *))sub_19E170B88, &qword_1EB220778, &dword_19E138000);
  }
  return result;
}

uint64_t sub_19E139FA8()
{
  if ((byte_1EB220858 & 1) == 0)
  {
    byte_1EB220858 = 1;
    qword_1EB220738 = 0;
    unk_1EB220740 = 0;
    qword_1EB220730 = 0;
    return __cxa_atexit((void (*)(void *))sub_19E170BBC, &qword_1EB220730, &dword_19E138000);
  }
  return result;
}

uint64_t sub_19E139FF0()
{
  if ((byte_1EB220850 & 1) == 0)
  {
    byte_1EB220850 = 1;
    qword_1EB220708 = 0;
    unk_1EB220710 = 0;
    qword_1EB220700 = 0;
    return __cxa_atexit((void (*)(void *))sub_19E170BBC, &qword_1EB220700, &dword_19E138000);
  }
  return result;
}

uint64_t sub_19E13A038()
{
  if ((byte_1EB220848 & 1) == 0)
  {
    byte_1EB220848 = 1;
    qword_1EB2206F0 = 0;
    qword_1EB2206F8 = 0;
    qword_1EB2206E8 = 0;
    return __cxa_atexit((void (*)(void *))sub_19E170B88, &qword_1EB2206E8, &dword_19E138000);
  }
  return result;
}

uint64_t sub_19E13A080()
{
  if ((byte_1EB220840 & 1) == 0)
  {
    byte_1EB220840 = 1;
    qword_1EB220690 = 0;
    unk_1EB220698 = 0;
    qword_1EB220688 = 0;
    return __cxa_atexit((void (*)(void *))sub_19E170BBC, &qword_1EB220688, &dword_19E138000);
  }
  return result;
}

uint64_t sub_19E13A0C8()
{
  if ((byte_1EB220818 & 1) == 0)
  {
    byte_1EB220818 = 1;
    qword_1EB220678 = 0;
    unk_1EB220680 = 0;
    qword_1EB220670 = 0;
    return __cxa_atexit((void (*)(void *))sub_19E170BBC, &qword_1EB220670, &dword_19E138000);
  }
  return result;
}

uint64_t sub_19E13A110()
{
  if ((byte_1EB220810 & 1) == 0)
  {
    byte_1EB220810 = 1;
    qword_1EB220648 = 0;
    unk_1EB220650 = 0;
    qword_1EB220640 = 0;
    return __cxa_atexit((void (*)(void *))sub_19E170BBC, &qword_1EB220640, &dword_19E138000);
  }
  return result;
}

uint64_t sub_19E13A158()
{
  if ((byte_1EB220808 & 1) == 0)
  {
    byte_1EB220808 = 1;
    qword_1EB220660 = 0;
    qword_1EB220668 = 0;
    qword_1EB220658 = 0;
    return __cxa_atexit((void (*)(void *))sub_19E170B88, &qword_1EB220658, &dword_19E138000);
  }
  return result;
}

uint64_t sub_19E13A1A0()
{
  if ((byte_1EB220800 & 1) == 0)
  {
    byte_1EB220800 = 1;
    qword_1EB2207C8 = 0;
    unk_1EB2207D0 = 0;
    qword_1EB2207C0 = 0;
    return __cxa_atexit((void (*)(void *))sub_19E170BBC, &qword_1EB2207C0, &dword_19E138000);
  }
  return result;
}

uint64_t sub_19E13A1E8()
{
  if ((byte_1EB220868 & 1) == 0)
  {
    byte_1EB220868 = 1;
    qword_1EB220750 = 0;
    unk_1EB220758 = 0;
    qword_1EB220748 = 0;
    return __cxa_atexit((void (*)(void *))sub_19E170BBC, &qword_1EB220748, &dword_19E138000);
  }
  return result;
}

uint64_t sub_19E13A230()
{
  if ((byte_1EB220870 & 1) == 0)
  {
    byte_1EB220870 = 1;
    qword_1EB220720 = 0;
    qword_1EB220728 = 0;
    qword_1EB220718 = 0;
    return __cxa_atexit((void (*)(void *))sub_19E170B88, &qword_1EB220718, &dword_19E138000);
  }
  return result;
}

uint64_t sub_19E13A278()
{
  if ((byte_1EB2207F8 & 1) == 0)
  {
    byte_1EB2207F8 = 1;
    qword_1EB2206C0 = 0;
    unk_1EB2206C8 = 0;
    qword_1EB2206B8 = 0;
    return __cxa_atexit((void (*)(void *))sub_19E170BBC, &qword_1EB2206B8, &dword_19E138000);
  }
  return result;
}

uint64_t sub_19E13A2C0()
{
  if ((byte_1EB220838 & 1) == 0)
  {
    byte_1EB220838 = 1;
    qword_1EB2206D8 = 0;
    qword_1EB2206E0 = 0;
    qword_1EB2206D0 = 0;
    return __cxa_atexit((void (*)(void *))sub_19E170B88, &qword_1EB2206D0, &dword_19E138000);
  }
  return result;
}

uint64_t sub_19E13A308()
{
  if ((byte_1EB2207F0 & 1) == 0)
  {
    byte_1EB2207F0 = 1;
    qword_1EB2206A8 = 0;
    unk_1EB2206B0 = 0;
    qword_1EB2206A0 = 0;
    return __cxa_atexit((void (*)(void *))sub_19E170BBC, &qword_1EB2206A0, &dword_19E138000);
  }
  return result;
}

uint64_t sub_19E13A350()
{
  if ((byte_1EB220878 & 1) == 0)
  {
    byte_1EB220878 = 1;
    qword_1EB2207E0 = 0;
    qword_1EB2207E8 = 0;
    qword_1EB2207D8 = 0;
    return __cxa_atexit((void (*)(void *))sub_19E170B88, &qword_1EB2207D8, &dword_19E138000);
  }
  return result;
}

void sub_19E13A398(uint64_t a1, uint64_t a2, uint64_t a3, void *__src)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_19E13C2D0(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    uint64_t v8 = *(void *)(a2 + 16);
  }
  sub_19E25BD4C(a1, (long long *)__p, a3, __src);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p[0]);
  }
  *(void *)a1 = &unk_1EF0AB700;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_DWORD *)(a1 + 1048) = 1065353216;
  *(void *)(a1 + 1056) = 0;
  *(void *)(a1 + 1072) = 0;
  *(void *)(a1 + 1064) = 0;
  operator new();
}

void sub_19E13A5B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  sub_19E13A748((void **)(v14 + 1056));
  sub_19E13A7BC(v15);
  sub_19E25BF30(v14);
  _Unwind_Resume(a1);
}

void sub_19E13A628(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = objc_msgSend_sharedConnection(MEMORY[0x1E4F4E030], (const char *)a2, a3, a4);
  v7 = *(void **)a1;
  *(void *)a1 = v6;

  v10 = (void *)MEMORY[0x1E4F1CB10];
  if (*(char *)(a2 + 23) >= 0) {
    objc_msgSend_stringWithUTF8String_(NSString, v8, a2, v9);
  }
  else {
  v11 = objc_msgSend_stringWithUTF8String_(NSString, v8, *(void *)a2, v9);
  }
  uint64_t v14 = objc_msgSend_fileURLWithPath_(v10, v12, (uint64_t)v11, v13);

  uint64_t v16 = objc_msgSend_modelAtURL_key_(MEMORY[0x1E4F4E060], v15, (uint64_t)v14, (uint64_t)&stru_1EF0AC120);
  v17 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v16;

  v18 = *(void **)a1;
  uint64_t v19 = *(void *)(a1 + 8);
  uint64_t v20 = *(void *)(a1 + 16);
  uint64_t v24 = objc_msgSend_aneUserInteractiveTaskQoS(MEMORY[0x1E4F4E080], v21, v22, v23);
  uint64_t v26 = 0;
  objc_msgSend_loadModel_options_qos_error_(v18, v25, v19, v20, v24, &v26);
}

void sub_19E13A718(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E13A728(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E13A738(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void **sub_19E13A748(void **a1)
{
  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0) {
          operator delete(*(v3 - 3));
        }
        v3 -= 3;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_19E13A7BC(uint64_t a1)
{
  v2 = *(char **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = *(char **)v2;
      uint64_t v6 = *((void *)v2 + 5);
      *((void *)v2 + 5) = 0;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
      if (v2[39] < 0) {
        operator delete(*((void **)v2 + 2));
      }
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_19E13A85C(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  *a1 = &unk_1EF0AB700;
  v5 = (void **)a1[135];
  if (v5)
  {
    uint64_t v6 = (uint64_t)v5[1];
    if (!v6
      || (v7 = *v5,
          uint64_t v8 = (uint64_t)v5[2],
          uint64_t v9 = objc_msgSend_aneUserInteractiveTaskQoS(MEMORY[0x1E4F4E080], a2, a3, a4),
          uint64_t v20 = 0,
          objc_msgSend_unloadModel_options_qos_error_(v7, v10, v6, v8, v9, &v20),
          (v5 = (void **)a1[135]) != 0))
    {
      v11 = (void *)sub_19E13C18C((uint64_t)v5);
      operator delete(v11);
    }
  }
  uint64_t v12 = a1[132];
  if (v12)
  {
    uint64_t v13 = a1[133];
    uint64_t v14 = (void *)a1[132];
    if (v13 != v12)
    {
      do
      {
        if (*(char *)(v13 - 1) < 0) {
          operator delete(*(void **)(v13 - 24));
        }
        v13 -= 24;
      }
      while (v13 != v12);
      uint64_t v14 = (void *)a1[132];
    }
    a1[133] = v12;
    operator delete(v14);
  }
  uint64_t v15 = (char *)a1[129];
  if (v15)
  {
    do
    {
      v18 = *(char **)v15;
      uint64_t v19 = *((void *)v15 + 5);
      *((void *)v15 + 5) = 0;
      if (v19) {
        (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
      }
      if (v15[39] < 0) {
        operator delete(*((void **)v15 + 2));
      }
      operator delete(v15);
      uint64_t v15 = v18;
    }
    while (v18);
  }
  uint64_t v16 = (void *)a1[127];
  a1[127] = 0;
  if (v16) {
    operator delete(v16);
  }
  return sub_19E25BF30((uint64_t)a1);
}

void sub_19E13A9BC(void *a1)
{
}

void sub_19E13A9D4(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  v4 = (void *)sub_19E13A85C(a1, a2, a3, a4);

  operator delete(v4);
}

uint64_t sub_19E13A9FC(uint64_t *a1, int a2, int a3)
{
  int v6 = (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 56))(a1, 1);
  int v7 = (*(uint64_t (**)(uint64_t *))(*a1 + 88))(a1);
  int v8 = (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 64))(a1, 9);
  int v9 = (*(uint64_t (**)(uint64_t *))(*a1 + 88))(a1);
  if (a2 >= 1)
  {
    int v10 = 0;
    int v11 = v8 * a3;
    int v12 = v6 * a3 / v7;
    uint64_t v13 = v12;
    uint64_t v59 = v11 / v9;
    int v57 = a2;
    int v58 = a3;
    uint64_t v56 = v12;
    do
    {
      uint64_t v20 = sub_19E25D8B0((uint64_t)a1, 1);
      uint64_t v24 = a1[135];
      if (*(_DWORD *)(v24 + 36) && *(_DWORD *)(v24 + 44))
      {
        v25 = *v20;
        vImagePixelCount v26 = *(int *)(v24 + 32) * (uint64_t)*(int *)(v24 + 40);
        v27 = (__IOSurface *)objc_msgSend_ioSurface(*(void **)(v24 + 56), v21, v22, v23);
        BaseAddress = (char *)IOSurfaceGetBaseAddress(v27);
        int v29 = *(_DWORD *)(v24 + 44) * a3;
        uint64_t v30 = (v29 - 1);
        if (v29 < 2)
        {
          int v33 = 0;
        }
        else
        {
          uint64_t v31 = 0;
          v32 = v25;
          do
          {
            sub_19E302FA0(v32, &BaseAddress[2 * v31 * *(int *)(v24 + 36)], v26);
            ++v31;
            v32 = (uint64_t *)((char *)v32 + 4 * v26);
          }
          while (v30 != v31);
          int v33 = v30;
          a2 = v57;
          a3 = v58;
          uint64_t v13 = v56;
        }
        sub_19E302FA0((char *)v25 + 4 * v33 * (int)v26, &BaseAddress[2 * *(_DWORD *)(v24 + 36) * v33], *(_DWORD *)(v24 + 52) * a3 - (int)v30 * (int)v26);
      }
      v34 = sub_19E25D8B0((uint64_t)a1, 1);
      *v34 = (uint64_t *)((char *)*v34 + 4 * v13);
      sub_19E13ADCC(a1[135]);
      uint64_t v35 = a1[135];
      v36 = sub_19E25DA90((uint64_t)a1, 9);
      if (*(_DWORD *)(v35 + 68) && *(_DWORD *)(v35 + 76))
      {
        v40 = *v36;
        vImagePixelCount v41 = *(int *)(v35 + 64) * (uint64_t)*(int *)(v35 + 72);
        v42 = (__IOSurface *)objc_msgSend_ioSurface(*(void **)(v35 + 88), v37, v38, v39);
        v43 = (char *)IOSurfaceGetBaseAddress(v42);
        int v44 = *(_DWORD *)(v35 + 76) * a3;
        uint64_t v45 = (v44 - 1);
        if (v44 < 2)
        {
          int v48 = 0;
        }
        else
        {
          uint64_t v46 = 0;
          v47 = v40;
          do
          {
            sub_19E302FE8(&v43[2 * v46 * *(int *)(v35 + 68)], v47, v41);
            ++v46;
            v47 = (uint64_t *)((char *)v47 + 4 * v41);
          }
          while (v45 != v46);
          int v48 = v45;
          a2 = v57;
          a3 = v58;
          uint64_t v13 = v56;
        }
        sub_19E302FE8(&v43[2 * *(_DWORD *)(v35 + 68) * v48], (char *)v40 + 4 * v48 * (int)v41, *(_DWORD *)(v35 + 84) * a3 - (int)v45 * (int)v41);
      }
      v49 = sub_19E25DA90((uint64_t)a1, 9);
      *v49 = (uint64_t *)((char *)*v49 + 4 * v59);
      uint64_t v50 = a1[135];
      uint64_t v51 = *(void *)(v50 + 144);
      uint64_t v14 = *(void *)(v50 + 152);
      if (v51 == v14)
      {
        uint64_t v14 = *(void *)(v50 + 144);
      }
      else if (*(void *)(v50 + 88) == *(void *)(v14 - 8))
      {
        uint64_t v52 = *(void *)(v50 + 104);
        uint64_t v53 = *(void *)(v52 - 16);
        *(_OWORD *)(v50 + 64) = *(_OWORD *)(v52 - 32);
        *(void *)(v50 + 80) = v53;
        objc_storeStrong((id *)(v50 + 88), *(id *)(v52 - 8));
        uint64_t v50 = a1[135];
        uint64_t v51 = *(void *)(v50 + 144);
        uint64_t v14 = *(void *)(v50 + 152);
      }
      long long v15 = *(_OWORD *)(v50 + 96);
      *(void *)(v50 + 96) = v51;
      *(void *)(v50 + 104) = v14;
      *(_OWORD *)(v50 + 144) = v15;
      uint64_t v16 = *(void *)(v50 + 112);
      *(void *)(v50 + 112) = *(void *)(v50 + 160);
      *(void *)(v50 + 160) = v16;
      uint64_t v17 = a1[135];
      long long v18 = *(_OWORD *)(v17 + 120);
      *(_OWORD *)(v17 + 120) = *(_OWORD *)(v17 + 168);
      *(_OWORD *)(v17 + 168) = v18;
      uint64_t v19 = *(void *)(v17 + 136);
      *(void *)(v17 + 136) = *(void *)(v17 + 184);
      *(void *)(v17 + 184) = v19;
      ++v10;
    }
    while (v10 != a2);
  }
  v54 = *(uint64_t (**)(uint64_t *))(*a1 + 32);

  return v54(a1);
}

void sub_19E13ADCC(uint64_t a1)
{
  v2 = objc_opt_new();
  v3 = objc_opt_new();
  objc_msgSend_addObject_(v2, v4, *(void *)(a1 + 56), v5);
  int v8 = objc_msgSend_numberWithUnsignedInteger_(NSNumber, v6, 0, v7);
  objc_msgSend_addObject_(v3, v9, (uint64_t)v8, v10);

  uint64_t v13 = *(void *)(a1 + 96);
  uint64_t v14 = *(void *)(a1 + 104);
  for (uint64_t i = 1; v13 != v14; ++i)
  {
    objc_msgSend_addObject_(v2, v11, *(void *)(v13 + 24), v12);
    long long v18 = objc_msgSend_numberWithUnsignedInteger_(NSNumber, v16, i, v17);
    objc_msgSend_addObject_(v3, v19, (uint64_t)v18, v20);

    v13 += 32;
  }
  uint64_t v21 = *(void *)(a1 + 120);
  uint64_t v22 = *(void *)(a1 + 128);
  if (v21 != v22)
  {
    uint64_t i = i;
    do
    {
      objc_msgSend_addObject_(v2, v11, *(void *)(v21 + 24), v12);
      v25 = objc_msgSend_numberWithUnsignedInteger_(NSNumber, v23, i, v24);
      objc_msgSend_addObject_(v3, v26, (uint64_t)v25, v27);

      v21 += 32;
      ++i;
    }
    while (v21 != v22);
  }
  v28 = objc_opt_new();
  v32 = objc_opt_new();
  uint64_t v33 = *(void *)(a1 + 168);
  uint64_t v34 = *(void *)(a1 + 176);
  if (v33 == v34)
  {
    LODWORD(v35) = 0;
    uint64_t v41 = *(void *)(a1 + 144);
    uint64_t v42 = *(void *)(a1 + 152);
    if (v41 != v42) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v35 = 0;
    do
    {
      objc_msgSend_addObject_(v28, v29, *(void *)(v33 + 24), v31);
      uint64_t v38 = objc_msgSend_numberWithUnsignedInteger_(NSNumber, v36, v35, v37);
      objc_msgSend_addObject_(v32, v39, (uint64_t)v38, v40);

      v33 += 32;
      ++v35;
    }
    while (v33 != v34);
    uint64_t v41 = *(void *)(a1 + 144);
    uint64_t v42 = *(void *)(a1 + 152);
    if (v41 != v42)
    {
LABEL_10:
      uint64_t v35 = v35;
      do
      {
        objc_msgSend_addObject_(v28, v29, *(void *)(v41 + 24), v31);
        uint64_t v45 = objc_msgSend_numberWithUnsignedInteger_(NSNumber, v43, v35, v44);
        objc_msgSend_addObject_(v32, v46, (uint64_t)v45, v47);

        v41 += 32;
        ++v35;
      }
      while (v41 != v42);
      if (!v35) {
        goto LABEL_13;
      }
      goto LABEL_16;
    }
  }
  if (!v35)
  {
LABEL_13:
    objc_msgSend_addObject_(v28, v29, *(void *)(a1 + 88), v31);
LABEL_19:
    uint64_t v51 = objc_msgSend_numberWithUnsignedInteger_(NSNumber, v48, v35, v49);
    objc_msgSend_addObject_(v32, v52, (uint64_t)v51, v53);

    goto LABEL_20;
  }
LABEL_16:
  uint64_t v50 = *(void *)(a1 + 152);
  if (*(void *)(a1 + 144) != v50)
  {
    uint64_t v30 = *(void *)(a1 + 88);
    if (v30 != *(void *)(v50 - 8))
    {
      objc_msgSend_addObject_(v28, v29, v30, v31);
      goto LABEL_19;
    }
  }
LABEL_20:
  v54 = (void *)MEMORY[0x1E4F4E088];
  v55 = objc_msgSend_copy(v2, v29, v30, v31);
  uint64_t v59 = objc_msgSend_copy(v3, v56, v57, v58);
  v63 = objc_msgSend_copy(v28, v60, v61, v62);
  v67 = objc_msgSend_copy(v32, v64, v65, v66);
  v69 = objc_msgSend_requestWithInputs_inputIndices_outputs_outputIndices_procedureIndex_(v54, v68, (uint64_t)v55, (uint64_t)v59, v63, v67, &unk_1EF0B33E8);

  objc_msgSend_validate(v69, v70, v71, v72);
  v73 = *(void **)a1;
  uint64_t v74 = *(void *)(a1 + 8);
  uint64_t v75 = *(void *)(a1 + 16);
  uint64_t v79 = objc_msgSend_aneUserInteractiveTaskQoS(MEMORY[0x1E4F4E080], v76, v77, v78);
  uint64_t v81 = 0;
  objc_msgSend_evaluateWithModel_options_request_qos_error_(v73, v80, v74, v75, v69, v79, &v81);
}

void sub_19E13B0E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E13B104(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E13B1E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E13B1F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E13B218(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E13B230(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E13B248(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E13B268(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E13B27C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E13B290(uint64_t **a1, int a2)
{
  uint64_t v5 = a1 + 6;
  v4 = (char *)a1[6];
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        int v6 = v4;
        int v7 = *((_DWORD *)v4 + 8);
        if (v7 <= a2) {
          break;
        }
        v4 = *(char **)v6;
        uint64_t v5 = (uint64_t **)v6;
        if (!*(void *)v6) {
          goto LABEL_8;
        }
      }
      if (v7 >= a2) {
        break;
      }
      v4 = (char *)*((void *)v6 + 1);
      if (!v4)
      {
        uint64_t v5 = (uint64_t **)(v6 + 8);
        goto LABEL_8;
      }
    }
  }
  else
  {
    int v6 = (char *)(a1 + 6);
LABEL_8:
    int v8 = v6;
    int v6 = (char *)operator new(0x50uLL);
    *((_DWORD *)v6 + 8) = a2;
    *(_OWORD *)(v6 + 40) = 0u;
    *(_OWORD *)(v6 + 56) = 0u;
    *((void *)v6 + 9) = 0;
    *(void *)int v6 = 0;
    *((void *)v6 + 1) = 0;
    *((void *)v6 + 2) = v8;
    void *v5 = (uint64_t *)v6;
    int v9 = (uint64_t *)*a1[5];
    uint64_t v10 = (uint64_t *)v6;
    if (v9)
    {
      a1[5] = v9;
      uint64_t v10 = *v5;
    }
    sub_19E13C8A0(a1[6], v10);
    a1[7] = (uint64_t *)((char *)a1[7] + 1);
  }
  uint64_t v12 = *((void *)v6 + 5);
  int v11 = v6 + 40;
  int v13 = ((uint64_t (*)(uint64_t **))(*a1)[28])(a1);
  int v14 = ((uint64_t (*)(uint64_t **, uint64_t))(*a1)[27])(a1, 1);
  *(void *)int v11 = v12;
  *((void *)v11 + 3) = v13;
  *((void *)v11 + 4) = v14;
  if (!a1[135][7])
  {
    sub_19E13B82C((const char *)a1[2] + 40, v15, (uint64_t)&v61);
    uint64_t v16 = (int64x2_t *)a1[135];
    v16[2] = v61;
    uint64_t v17 = v63;
    uint64_t v63 = 0;
    long long v18 = (void *)v16[3].i64[1];
    v16[3].i64[0] = v62;
    v16[3].i64[1] = v17;

    uint64_t v19 = (uint64_t)a1[132];
    uint64_t v20 = a1[133];
    if ((uint64_t *)v19 != v20)
    {
      int64x2_t v57 = vdupq_n_s64(1uLL);
      do
      {
        v61.i64[0] = v19;
        uint64_t v24 = sub_19E13CA54((uint64_t)(a1 + 127), v19, (uint64_t)&unk_19E351150, (long long **)&v61);
        (*(void (**)(int64x2_t *__return_ptr))(*(void *)v24[5] + 152))(&v61);
        if (v61.i64[0] == 5)
        {
          v25 = (const void *)v24[5];
          if (v25) {
            vImagePixelCount v26 = (int *)__dynamic_cast(v25, (const struct __class_type_info *)&unk_1EF0A4880, (const struct __class_type_info *)&unk_1EF0A4CC0, 0);
          }
          else {
            vImagePixelCount v26 = 0;
          }
          int v27 = (*(uint64_t (**)(int *, uint64_t))(*(void *)v26 + 80))(v26, 9);
          int v28 = ((uint64_t (*)(uint64_t **))(*a1)[28])(a1);
          int64x2_t v61 = v57;
          uint64_t v62 = v27;
          uint64_t v63 = v28;
          int v29 = a1[135];
          sub_19E13B82C(v61.i8, v30, (uint64_t)&v58);
          unint64_t v31 = v29[13];
          if (v31 >= v29[14])
          {
            uint64_t v34 = sub_19E13D54C((void **)v29 + 12, (uint64_t)&v58);
          }
          else
          {
            long long v32 = v58;
            *(void *)(v31 + 16) = v59;
            *(_OWORD *)unint64_t v31 = v32;
            id v33 = v60;
            id v60 = 0;
            *(void *)(v31 + 24) = v33;
            uint64_t v34 = (char *)(v31 + 32);
          }
          v29[13] = (uint64_t)v34;

          uint64_t v35 = a1[135];
          sub_19E13B82C(v61.i8, v36, (uint64_t)&v58);
          unint64_t v37 = v35[19];
          if (v37 >= v35[20])
          {
            uint64_t v40 = sub_19E13D54C((void **)v35 + 18, (uint64_t)&v58);
          }
          else
          {
            long long v38 = v58;
            *(void *)(v37 + 16) = v59;
            *(_OWORD *)unint64_t v37 = v38;
            id v39 = v60;
            id v60 = 0;
            *(void *)(v37 + 24) = v39;
            uint64_t v40 = (char *)(v37 + 32);
          }
          v35[19] = (uint64_t)v40;

          uint64_t v62 = v26[318];
          uint64_t v41 = a1[135];
          sub_19E13B82C(v61.i8, v42, (uint64_t)&v58);
          unint64_t v43 = v41[16];
          if (v43 >= v41[17])
          {
            uint64_t v46 = sub_19E13D54C((void **)v41 + 15, (uint64_t)&v58);
          }
          else
          {
            long long v44 = v58;
            *(void *)(v43 + 16) = v59;
            *(_OWORD *)unint64_t v43 = v44;
            id v45 = v60;
            id v60 = 0;
            *(void *)(v43 + 24) = v45;
            uint64_t v46 = (char *)(v43 + 32);
          }
          v41[16] = (uint64_t)v46;

          uint64_t v47 = a1[135];
          sub_19E13B82C(v61.i8, v48, (uint64_t)&v58);
          unint64_t v49 = v47[22];
          if (v49 < v47[23])
          {
            long long v21 = v58;
            *(void *)(v49 + 16) = v59;
            *(_OWORD *)unint64_t v49 = v21;
            id v22 = v60;
            id v60 = 0;
            *(void *)(v49 + 24) = v22;
            uint64_t v23 = (char *)(v49 + 32);
          }
          else
          {
            uint64_t v23 = sub_19E13D54C((void **)v47 + 21, (uint64_t)&v58);
          }
          v47[22] = (uint64_t)v23;

          *((_DWORD *)a1[135] + 6) += *(_DWORD *)(a1[135][16] - 12) + *(_DWORD *)(a1[135][13] - 12);
        }
        v19 += 24;
      }
      while ((uint64_t *)v19 != v20);
      uint64_t v19 = (uint64_t)a1[133];
    }
    v61.i64[0] = v19 - 24;
    uint64_t v50 = sub_19E13CA54((uint64_t)(a1 + 127), v19 - 24, (uint64_t)&unk_19E351150, (long long **)&v61);
    (*(void (**)(int64x2_t *__return_ptr))(*(void *)v50[5] + 152))(&v61);
    if (v61.i64[0] == 5)
    {
      uint64_t v52 = a1[135][19];
      uint64_t v53 = *(void *)(v52 - 16);
      long long v58 = *(_OWORD *)(v52 - 32);
      uint64_t v59 = v53;
      id v54 = *(id *)(v52 - 8);
    }
    else
    {
      sub_19E13B82C(v11, v51, (uint64_t)&v58);
      id v54 = v60;
    }
    v55 = a1[135];
    *((_OWORD *)v55 + 4) = v58;
    id v60 = 0;
    uint64_t v56 = (void *)v55[11];
    v55[10] = v59;
    v55[11] = (uint64_t)v54;
  }
}

void sub_19E13B7DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_19E13B7F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_19E13B804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_19E13B818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_19E13B82C(const char *a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  v28[3] = *MEMORY[0x1E4F143B8];
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  int v4 = *(_DWORD *)a1;
  int v5 = *((_DWORD *)a1 + 4) * *((_DWORD *)a1 + 2);
  int v6 = *((_DWORD *)a1 + 6);
  int v7 = v5 * *(_DWORD *)a1;
  if (v6 <= 1)
  {
    int v8 = 32 / v4;
    if (32 / v4 <= 1) {
      int v8 = 1;
    }
    if (v7 >= 8) {
      int v9 = 8;
    }
    else {
      int v9 = v5 * *(_DWORD *)a1;
    }
    if (v8 >= v9) {
      int v8 = v9;
    }
  }
  else
  {
    int v8 = 1;
  }
  unsigned int v10 = (v8 * v4 + 31) & 0xFFFFFFE0;
  *(_DWORD *)a3 = v8;
  *(_DWORD *)(a3 + 4) = v10;
  int v11 = (v5 + v8 - 1) / v8;
  *(_DWORD *)(a3 + 8) = v4;
  *(_DWORD *)(a3 + 12) = v11;
  *(_DWORD *)(a3 + 16) = v11 * v10;
  *(_DWORD *)(a3 + 20) = v7;
  int v12 = 2 * v6 * v11 * v10;
  uint64_t v13 = *MEMORY[0x1E4F2F0E8];
  v27[0] = *MEMORY[0x1E4F2F2C0];
  v27[1] = v13;
  v28[0] = &unk_1EF0B33D0;
  v28[1] = &unk_1EF0B33D0;
  v27[2] = *MEMORY[0x1E4F2EFE0];
  int v14 = objc_msgSend_numberWithInt_(NSNumber, a1, v12, a2);
  v28[2] = v14;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v15, (uint64_t)v28, (uint64_t)v27, 3);
  CFDictionaryRef v16 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();

  uint64_t v17 = (void *)MEMORY[0x1E4F4E048];
  IOSurfaceRef v18 = IOSurfaceCreate(v16);
  long long v21 = objc_msgSend_objectWithIOSurface_(v17, v19, (uint64_t)v18, v20);
  *(void *)(a3 + 24) = v21;
  v25 = (__IOSurface *)objc_msgSend_ioSurface(v21, v22, v23, v24);
  BaseAddress = IOSurfaceGetBaseAddress(v25);
  bzero(BaseAddress, v12);
}

void sub_19E13B9D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E13BA10(uint64_t a1, const char *theArray, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 1080);
  uint64_t v5 = *(void *)(v4 + 96);
  uint64_t v6 = *(void *)(v4 + 104);
  if (v5 != v6)
  {
    CFArrayRef v7 = (const __CFArray *)theArray;
    if (theArray)
    {
      if ((int)a3 >= 1)
      {
        unint64_t v8 = v6 - v5;
        unint64_t v9 = (unint64_t)(v6 - v5) >> 5;
        unsigned int v10 = (const void **)(a1 + 256);
        uint64_t v11 = a3;
        if ((int)v9 <= 0)
        {
          for (CFIndex i = 0; i != v11; ++i)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(v7, i);
            sub_19E2533F8((uint64_t)ValueAtIndex + 16, v10);
          }
        }
        else
        {
          CFIndex v12 = 0;
          uint64_t v67 = (v8 >> 5);
          uint64_t v63 = a3;
          do
          {
            uint64_t v30 = CFArrayGetValueAtIndex(v7, v12);
            uint64_t v34 = sub_19E2533F8((uint64_t)v30 + 16, v10);
            uint64_t v35 = 0;
            uint64_t v36 = a1;
            CFIndex v66 = v12;
            do
            {
              uint64_t v38 = *(void *)(v36 + 1080);
              uint64_t v39 = 32 * v35;
              uint64_t v40 = (int *)(*(void *)(v38 + 96) + 32 * v35);
              if (v40[1] && v40[3])
              {
                uint64_t v41 = v40[4] * (int)v12;
                vImagePixelCount v42 = *v40 * (uint64_t)v40[2];
                unint64_t v43 = (__IOSurface *)objc_msgSend_ioSurface(*((void **)v40 + 3), v31, v32, v33);
                long long v44 = (char *)IOSurfaceGetBaseAddress(v43) + 2 * v41;
                int v45 = v40[3];
                uint64_t v46 = (v45 - 1);
                if (v45 < 2)
                {
                  int v49 = 0;
                }
                else
                {
                  uint64_t v47 = 0;
                  uint64_t v48 = v34;
                  do
                  {
                    sub_19E302FA0(v48, &v44[2 * v47 * v40[1]], v42);
                    ++v47;
                    uint64_t v48 = (uint64_t *)((char *)v48 + 4 * v42);
                  }
                  while (v46 != v47);
                  int v49 = v46;
                  uint64_t v36 = a1;
                }
                sub_19E302FA0((char *)v34 + 4 * v49 * (int)v42, &v44[2 * v40[1] * v49], v40[5] - (uint64_t)((int)v46 * (int)v42));
                uint64_t v38 = *(void *)(v36 + 1080);
                CFIndex v12 = v66;
              }
              uint64_t v50 = (char *)v34 + 4 * v40[5];
              uint64_t v51 = *(void *)(v38 + 120);
              uint64_t v52 = v51 + v39;
              if (*(_DWORD *)(v51 + v39 + 4) && *(_DWORD *)(v52 + 12))
              {
                uint64_t v53 = *(_DWORD *)(v52 + 16) * (int)v12;
                vImagePixelCount v54 = *(int *)(v51 + 32 * v35) * (uint64_t)*(int *)(v52 + 8);
                v55 = (__IOSurface *)objc_msgSend_ioSurface(*(void **)(v52 + 24), v31, v32, v33);
                uint64_t v56 = (char *)IOSurfaceGetBaseAddress(v55) + 2 * v53;
                int v57 = *(_DWORD *)(v52 + 12);
                uint64_t v58 = (v57 - 1);
                if (v57 < 2)
                {
                  int v37 = 0;
                }
                else
                {
                  uint64_t v59 = 0;
                  id v60 = v50;
                  do
                  {
                    sub_19E302FA0(v60, &v56[2 * v59 * *(int *)(v52 + 4)], v54);
                    ++v59;
                    v60 += 4 * v54;
                  }
                  while (v58 != v59);
                  int v37 = v58;
                  CFIndex v12 = v66;
                }
                sub_19E302FA0(&v50[4 * v37 * (int)v54], &v56[2 * *(_DWORD *)(v52 + 4) * v37], *(int *)(v52 + 20) - (uint64_t)((int)v58 * (int)v54));
              }
              uint64_t v34 = (uint64_t *)&v50[4 * *(int *)(v52 + 20)];
              ++v35;
            }
            while (v35 != v67);
            ++v12;
            unsigned int v10 = (const void **)(a1 + 256);
            CFArrayRef v7 = (const __CFArray *)theArray;
          }
          while (v12 != v63);
        }
      }
    }
    else
    {
      do
      {
        uint64_t v13 = (__IOSurface *)objc_msgSend_ioSurface(*(void **)(v5 + 24), theArray, a3, a4);
        BaseAddress = IOSurfaceGetBaseAddress(v13);
        IOSurfaceRef v18 = (__IOSurface *)objc_msgSend_ioSurface(*(void **)(v5 + 24), v15, v16, v17);
        size_t AllocSize = IOSurfaceGetAllocSize(v18);
        bzero(BaseAddress, AllocSize);
        v5 += 32;
      }
      while (v5 != v6);
      uint64_t v20 = *(void *)(a1 + 1080);
      uint64_t v21 = *(void *)(v20 + 120);
      for (uint64_t j = *(void *)(v20 + 128); v21 != j; v21 += 32)
      {
        uint64_t v23 = (__IOSurface *)objc_msgSend_ioSurface(*(void **)(v21 + 24), theArray, a3, a4);
        uint64_t v24 = IOSurfaceGetBaseAddress(v23);
        int v28 = (__IOSurface *)objc_msgSend_ioSurface(*(void **)(v21 + 24), v25, v26, v27);
        size_t v29 = IOSurfaceGetAllocSize(v28);
        bzero(v24, v29);
      }
    }
  }
}

void sub_19E13BD38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v42 = a3;
  uint64_t v4 = *(void *)(a1 + 1080);
  uint64_t v5 = *(void *)(v4 + 96);
  uint64_t v6 = *(void *)(v4 + 104);
  if (v5 != v6)
  {
    uint64_t v7 = a1;
    uint64_t v8 = *(int *)(v4 + 24);
    int v45 = 0;
    uint64_t v46 = 0;
    __p = 0;
    if (v8)
    {
      if ((v8 & 0x80000000) != 0) {
        sub_19E13D694();
      }
      size_t v9 = 4 * v8;
      unsigned int v10 = (char *)operator new(4 * v8);
      __p = v10;
      uint64_t v46 = &v10[v9];
      bzero(v10, v9);
      int v45 = &v10[v9];
      unint64_t v11 = v6 - v5;
      if ((int)((unint64_t)(v6 - v5) >> 5) < 1) {
        goto LABEL_25;
      }
    }
    else
    {
      unsigned int v10 = 0;
      unint64_t v11 = v6 - v5;
      if ((int)((unint64_t)(v6 - v5) >> 5) < 1)
      {
LABEL_25:
        sub_19E253694((uint64_t **)(a2 + 16), (long long *)(v7 + 256), (char **)&__p);
        if (__p)
        {
          int v45 = (char *)__p;
          operator delete(__p);
        }
        return;
      }
    }
    uint64_t v12 = 0;
    uint64_t v43 = (v11 >> 5);
    uint64_t v41 = v7;
    do
    {
      uint64_t v14 = *(void *)(v7 + 1080);
      uint64_t v15 = *(void *)(v14 + 96) + 32 * v12;
      if (*(_DWORD *)(v15 + 4) && *(_DWORD *)(v15 + 12))
      {
        int v16 = *(_DWORD *)(v15 + 16);
        int v17 = *(_DWORD *)(v15 + 8);
        int v18 = *(_DWORD *)v15;
        uint64_t v19 = (__IOSurface *)objc_msgSend_ioSurface(*(void **)(v15 + 24), (const char *)a2, a3, a4);
        vImagePixelCount v20 = v18 * (uint64_t)v17;
        uint64_t v21 = (char *)IOSurfaceGetBaseAddress(v19) + 2 * v16 * v42;
        int v22 = *(_DWORD *)(v15 + 12);
        uint64_t v23 = (v22 - 1);
        if (v22 < 2)
        {
          int v26 = 0;
        }
        else
        {
          uint64_t v24 = 0;
          v25 = v10;
          do
          {
            sub_19E302FE8(&v21[2 * v24 * *(int *)(v15 + 4)], v25, v20);
            ++v24;
            v25 += 4 * v20;
          }
          while (v23 != v24);
          int v26 = v23;
          uint64_t v7 = v41;
        }
        sub_19E302FE8(&v21[2 * *(_DWORD *)(v15 + 4) * v26], &v10[4 * v26 * (int)v20], *(int *)(v15 + 20) - (uint64_t)((int)v23 * (int)v20));
        uint64_t v14 = *(void *)(v7 + 1080);
      }
      uint64_t v27 = &v10[4 * *(int *)(v15 + 20)];
      uint64_t v28 = *(void *)(v14 + 120);
      uint64_t v29 = v28 + 32 * v12;
      if (*(_DWORD *)(v29 + 4) && *(_DWORD *)(v29 + 12))
      {
        int v30 = *(_DWORD *)(v29 + 16);
        int v31 = *(_DWORD *)(v29 + 8);
        int v32 = *(_DWORD *)(v28 + 32 * v12);
        uint64_t v33 = (__IOSurface *)objc_msgSend_ioSurface(*(void **)(v29 + 24), (const char *)a2, a3, a4);
        vImagePixelCount v34 = v32 * (uint64_t)v31;
        uint64_t v35 = (char *)IOSurfaceGetBaseAddress(v33) + 2 * v30 * v42;
        int v36 = *(_DWORD *)(v29 + 12);
        uint64_t v37 = (v36 - 1);
        if (v36 < 2)
        {
          int v13 = 0;
        }
        else
        {
          uint64_t v38 = 0;
          uint64_t v39 = v27;
          do
          {
            sub_19E302FE8(&v35[2 * v38 * *(int *)(v29 + 4)], v39, v34);
            ++v38;
            v39 += 4 * v34;
          }
          while (v37 != v38);
          int v13 = v37;
        }
        sub_19E302FE8(&v35[2 * *(_DWORD *)(v29 + 4) * v13], &v27[4 * v13 * (int)v34], *(int *)(v29 + 20) - (uint64_t)((int)v37 * (int)v34));
      }
      unsigned int v10 = &v27[4 * *(int *)(v29 + 20)];
      ++v12;
    }
    while (v12 != v43);
    goto LABEL_25;
  }
}

void sub_19E13BFE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E13C018(uint64_t a1, uint64_t *a2)
{
  (*(void (**)(void **__return_ptr))(*(void *)*a2 + 232))(__p);
  unint64_t v4 = *(void *)(a1 + 1064);
  if (v4 >= *(void *)(a1 + 1072))
  {
    uint64_t v6 = sub_19E13D6AC((char **)(a1 + 1056), (uint64_t)__p);
  }
  else
  {
    if (SHIBYTE(v11) < 0)
    {
      sub_19E13C2D0(*(unsigned char **)(a1 + 1064), __p[0], (unint64_t)__p[1]);
    }
    else
    {
      long long v5 = *(_OWORD *)__p;
      *(void *)(v4 + 16) = v11;
      *(_OWORD *)unint64_t v4 = v5;
    }
    uint64_t v6 = (char *)(v4 + 24);
    *(void *)(a1 + 1064) = v4 + 24;
  }
  *(void *)(a1 + 1064) = v6;
  uint64_t v12 = __p;
  uint64_t v7 = sub_19E13CA54(a1 + 1016, (uint64_t)__p, (uint64_t)&unk_19E351150, (long long **)&v12);
  uint64_t v8 = *a2;
  *a2 = 0;
  uint64_t v9 = v7[5];
  v7[5] = v8;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[0]);
  }
}

void sub_19E13C150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  *(void *)(v15 + 1064) = v16;
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E13C178()
{
  return 0;
}

uint64_t sub_19E13C184()
{
  return 0;
}

uint64_t sub_19E13C18C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 168);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 176);
    unint64_t v4 = *(void **)(a1 + 168);
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = v3 - 32;

        uint64_t v3 = v5;
      }
      while (v5 != v2);
      unint64_t v4 = *(void **)(a1 + 168);
    }
    *(void *)(a1 + 176) = v2;
    operator delete(v4);
  }
  uint64_t v6 = *(void *)(a1 + 144);
  if (v6)
  {
    uint64_t v7 = *(void *)(a1 + 152);
    uint64_t v8 = *(void **)(a1 + 144);
    if (v7 != v6)
    {
      do
      {
        uint64_t v9 = v7 - 32;

        uint64_t v7 = v9;
      }
      while (v9 != v6);
      uint64_t v8 = *(void **)(a1 + 144);
    }
    *(void *)(a1 + 152) = v6;
    operator delete(v8);
  }
  uint64_t v10 = *(void *)(a1 + 120);
  if (v10)
  {
    uint64_t v11 = *(void *)(a1 + 128);
    uint64_t v12 = *(void **)(a1 + 120);
    if (v11 != v10)
    {
      do
      {
        uint64_t v13 = v11 - 32;

        uint64_t v11 = v13;
      }
      while (v13 != v10);
      uint64_t v12 = *(void **)(a1 + 120);
    }
    *(void *)(a1 + 128) = v10;
    operator delete(v12);
  }
  uint64_t v14 = *(void *)(a1 + 96);
  if (v14)
  {
    uint64_t v15 = *(void *)(a1 + 104);
    uint64_t v16 = *(void **)(a1 + 96);
    if (v15 != v14)
    {
      do
      {
        uint64_t v17 = v15 - 32;

        uint64_t v15 = v17;
      }
      while (v17 != v14);
      uint64_t v16 = *(void **)(a1 + 96);
    }
    *(void *)(a1 + 104) = v14;
    operator delete(v16);
  }

  return a1;
}

void *sub_19E13C2D0(unsigned char *__dst, void *__src, unint64_t a3)
{
  uint64_t v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8) {
      sub_19E13C370();
    }
    uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v6 = a3 | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    void *v5 = v8;
    uint64_t v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }

  return memmove(v5, __src, a3 + 1);
}

void sub_19E13C370()
{
}

void sub_19E13C388(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_19E13C3E4(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E599CD00, MEMORY[0x1E4FBA1C8]);
}

void sub_19E13C3D0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_19E13C3E4(std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D0] + 16);
  return result;
}

void sub_19E13C418()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E4FBA350], MEMORY[0x1E4FBA1F8]);
}

uint64_t *sub_19E13C44C(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v3 = *a1;
    uint64_t v2 = (uint64_t *)a1[1];
    uint64_t v4 = *v2;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v3 + 8) = v4;
    a1[2] = 0;
    if (v2 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v2[1];
        operator delete(v2);
        uint64_t v2 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

void **sub_19E13C4B0(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = (std::__shared_weak_count *)*((void *)v3 - 1);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_19E13C56C(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_19E13C56C(a1, *a2);
    sub_19E13C56C(a1, a2[1]);
    operator delete(a2);
  }
}

void sub_19E13C5C0(uint64_t a1, int *a2, int *a3)
{
  if (*(void *)(a1 + 16))
  {
    uint64_t v6 = *(uint64_t **)a1;
    uint64_t v8 = (uint64_t **)(a1 + 8);
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)a1 = a1 + 8;
    *(void *)(v7 + 16) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 8) = 0;
    if (v6[1]) {
      uint64_t v9 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v9 = v6;
    }
    if (!v9)
    {
LABEL_36:
      uint64_t v23 = a1;
      uint64_t v24 = 0;
LABEL_42:
      sub_19E13C56C(v23, v24);
      goto LABEL_43;
    }
    uint64_t v10 = (uint64_t *)v9[2];
    if (v10)
    {
      uint64_t v11 = (uint64_t *)*v10;
      if ((uint64_t *)*v10 == v9)
      {
        uint64_t *v10 = 0;
        while (1)
        {
          uint64_t v37 = (uint64_t *)v10[1];
          if (!v37) {
            break;
          }
          do
          {
            uint64_t v10 = v37;
            uint64_t v37 = (uint64_t *)*v37;
          }
          while (v37);
        }
      }
      else
      {
        for (v10[1] = 0; v11; uint64_t v11 = (uint64_t *)v10[1])
        {
          do
          {
            uint64_t v10 = v11;
            uint64_t v11 = (uint64_t *)*v11;
          }
          while (v11);
        }
      }
    }
    if (a2 != a3)
    {
      while (1)
      {
        uint64_t v12 = *v8;
        int v13 = *a2;
        uint64_t v14 = (uint64_t **)(a1 + 8);
        uint64_t v15 = (uint64_t **)(a1 + 8);
        if (*v8)
        {
          while (1)
          {
            while (1)
            {
              uint64_t v15 = (uint64_t **)v12;
              int v16 = *((_DWORD *)v12 + 8);
              if (v13 >= v16) {
                break;
              }
              uint64_t v12 = (uint64_t *)*v12;
              uint64_t v14 = v15;
              if (!*v15) {
                goto LABEL_19;
              }
            }
            if (v16 >= v13) {
              break;
            }
            uint64_t v12 = (uint64_t *)v12[1];
            if (!v12)
            {
              uint64_t v14 = v15 + 1;
              goto LABEL_19;
            }
          }
          vImagePixelCount v20 = v10;
          a2 += 12;
        }
        else
        {
LABEL_19:
          *((_DWORD *)v9 + 8) = v13;
          long long v17 = *(_OWORD *)(a2 + 2);
          long long v18 = *(_OWORD *)(a2 + 6);
          v9[9] = *((void *)a2 + 5);
          *(_OWORD *)(v9 + 7) = v18;
          *(_OWORD *)(v9 + 5) = v17;
          *uint64_t v9 = 0;
          v9[1] = 0;
          v9[2] = (uint64_t)v15;
          *uint64_t v14 = v9;
          uint64_t v19 = **(void **)a1;
          if (v19)
          {
            *(void *)a1 = v19;
            uint64_t v9 = *v14;
          }
          sub_19E13C8A0(*(uint64_t **)(a1 + 8), v9);
          ++*(void *)(a1 + 16);
          if (!v10)
          {
            a2 += 12;
            goto LABEL_36;
          }
          vImagePixelCount v20 = (uint64_t *)v10[2];
          if (v20)
          {
            uint64_t v21 = (uint64_t *)*v20;
            if ((uint64_t *)*v20 == v10)
            {
              *vImagePixelCount v20 = 0;
              while (1)
              {
                int v22 = (void *)v20[1];
                if (!v22) {
                  break;
                }
                do
                {
                  vImagePixelCount v20 = v22;
                  int v22 = (void *)*v22;
                }
                while (v22);
              }
            }
            else
            {
              for (v20[1] = 0; v21; uint64_t v21 = (uint64_t *)v20[1])
              {
                do
                {
                  vImagePixelCount v20 = v21;
                  uint64_t v21 = (uint64_t *)*v21;
                }
                while (v21);
              }
            }
          }
          uint64_t v9 = v10;
          a2 += 12;
        }
        uint64_t v10 = v20;
        if (a2 == a3) {
          goto LABEL_38;
        }
      }
    }
    vImagePixelCount v20 = v10;
LABEL_38:
    sub_19E13C56C(a1, v9);
    if (v20)
    {
      for (CFIndex i = (void *)v20[2]; i; CFIndex i = (void *)i[2])
        vImagePixelCount v20 = i;
      uint64_t v23 = a1;
      uint64_t v24 = v20;
      goto LABEL_42;
    }
  }
LABEL_43:
  if (a2 != a3)
  {
    int v26 = (uint64_t **)(a1 + 8);
    do
    {
      uint64_t v28 = *v26;
      int v29 = *a2;
      int v30 = (uint64_t **)(a1 + 8);
      int v31 = (uint64_t **)(a1 + 8);
      if (*v26)
      {
        while (1)
        {
          while (1)
          {
            int v31 = (uint64_t **)v28;
            int v32 = *((_DWORD *)v28 + 8);
            if (v29 >= v32) {
              break;
            }
            uint64_t v28 = *v31;
            int v30 = v31;
            if (!*v31) {
              goto LABEL_55;
            }
          }
          if (v32 >= v29) {
            break;
          }
          uint64_t v28 = v31[1];
          if (!v28)
          {
            int v30 = v31 + 1;
            goto LABEL_55;
          }
        }
      }
      else
      {
LABEL_55:
        uint64_t v33 = (char *)operator new(0x50uLL);
        *((_DWORD *)v33 + 8) = v29;
        uint64_t v34 = *((void *)a2 + 5);
        long long v35 = *(_OWORD *)(a2 + 6);
        *(_OWORD *)(v33 + 40) = *(_OWORD *)(a2 + 2);
        *(_OWORD *)(v33 + 56) = v35;
        *((void *)v33 + 9) = v34;
        *(void *)uint64_t v33 = 0;
        *((void *)v33 + 1) = 0;
        *((void *)v33 + 2) = v31;
        *int v30 = (uint64_t *)v33;
        uint64_t v36 = **(void **)a1;
        if (v36)
        {
          *(void *)a1 = v36;
          uint64_t v27 = *v30;
        }
        else
        {
          uint64_t v27 = (uint64_t *)v33;
        }
        sub_19E13C8A0(*(uint64_t **)(a1 + 8), v27);
        ++*(void *)(a1 + 16);
      }
      a2 += 12;
    }
    while (a2 != a3);
  }
}

uint64_t *sub_19E13C8A0(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 == result) {
    return result;
  }
  while (1)
  {
    uint64_t v2 = a2[2];
    if (*(unsigned char *)(v2 + 24)) {
      return result;
    }
    uint64_t v3 = *(uint64_t **)(v2 + 16);
    uint64_t v4 = *v3;
    if (*v3 != v2) {
      break;
    }
    uint64_t v7 = v3[1];
    if (!v7 || (int v8 = *(unsigned __int8 *)(v7 + 24), v5 = (unsigned char *)(v7 + 24), v8))
    {
      if (*(uint64_t **)v2 == a2)
      {
        *(unsigned char *)(v2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v11 = *(void *)(v2 + 8);
        uint64_t *v3 = v11;
        if (v11) {
          goto LABEL_15;
        }
      }
      else
      {
        uint64_t v9 = *(uint64_t **)(v2 + 8);
        uint64_t v10 = *v9;
        *(void *)(v2 + 8) = *v9;
        if (v10)
        {
          *(void *)(v10 + 16) = v2;
          uint64_t v3 = *(uint64_t **)(v2 + 16);
        }
        v9[2] = (uint64_t)v3;
        *(void *)(*(void *)(v2 + 16) + 8 * (**(void **)(v2 + 16) != v2)) = v9;
        *uint64_t v9 = v2;
        *(void *)(v2 + 16) = v9;
        uint64_t v3 = (uint64_t *)v9[2];
        uint64_t v2 = *v3;
        *((unsigned char *)v9 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v11 = *(void *)(v2 + 8);
        uint64_t *v3 = v11;
        if (v11) {
LABEL_15:
        }
          *(void *)(v11 + 16) = v3;
      }
      *(void *)(v2 + 16) = v3[2];
      *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
      *(void *)(v2 + 8) = v3;
      v3[2] = v2;
      return result;
    }
LABEL_3:
    *(unsigned char *)(v2 + 24) = 1;
    a2 = v3;
    *((unsigned char *)v3 + 24) = v3 == result;
    unsigned char *v5 = 1;
    if (v3 == result) {
      return result;
    }
  }
  if (v4)
  {
    int v6 = *(unsigned __int8 *)(v4 + 24);
    uint64_t v5 = (unsigned char *)(v4 + 24);
    if (!v6) {
      goto LABEL_3;
    }
  }
  if (*(uint64_t **)v2 == a2)
  {
    uint64_t v12 = a2[1];
    *(void *)uint64_t v2 = v12;
    if (v12)
    {
      *(void *)(v12 + 16) = v2;
      uint64_t v3 = *(uint64_t **)(v2 + 16);
    }
    a2[2] = (uint64_t)v3;
    *(void *)(*(void *)(v2 + 16) + 8 * (**(void **)(v2 + 16) != v2)) = a2;
    a2[1] = v2;
    *(void *)(v2 + 16) = a2;
    uint64_t v3 = (uint64_t *)a2[2];
  }
  else
  {
    a2 = (uint64_t *)a2[2];
  }
  *((unsigned char *)a2 + 24) = 1;
  *((unsigned char *)v3 + 24) = 0;
  int v13 = (uint64_t *)v3[1];
  uint64_t v14 = *v13;
  v3[1] = *v13;
  if (v14) {
    *(void *)(v14 + 16) = v3;
  }
  v13[2] = v3[2];
  *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v13;
  *int v13 = (uint64_t)v3;
  v3[2] = (uint64_t)v13;
  return result;
}

uint64_t *sub_19E13CA54(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  int v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = sub_19E13CF50((uint64_t)v47, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    uint64_t v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      uint64_t v15 = *v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          int v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v23 = v15[1];
            if (v23 == v11)
            {
              uint64_t v24 = *((unsigned __int8 *)v15 + 39);
              if ((v24 & 0x80u) == 0) {
                uint64_t v25 = *((unsigned __int8 *)v15 + 39);
              }
              else {
                uint64_t v25 = v15[3];
              }
              if (v25 == v17)
              {
                int v26 = (const void **)(v15 + 2);
                if ((v24 & 0x80) != 0)
                {
                  if (!memcmp(*v26, v6, v15[3])) {
                    return v15;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v15 + 39)) {
                    return v15;
                  }
                  for (CFIndex i = v6; *(unsigned __int8 *)v26 == *i; ++i)
                  {
                    int v26 = (const void **)((char *)v26 + 1);
                    if (!--v24) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v23 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            uint64_t v15 = (uint64_t *)*v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = v15[1];
          if (v18 == v11)
          {
            uint64_t v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = *((unsigned __int8 *)v15 + 39);
            }
            else {
              uint64_t v20 = v15[3];
            }
            if (v20 == v17)
            {
              uint64_t v21 = (const void **)(v15 + 2);
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*v21, v6, v15[3])) {
                  return v15;
                }
              }
              else
              {
                if (!*((unsigned char *)v15 + 39)) {
                  return v15;
                }
                for (uint64_t j = v6; *(unsigned __int8 *)v21 == *j; ++j)
                {
                  uint64_t v21 = (const void **)((char *)v21 + 1);
                  if (!--v19) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          uint64_t v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  uint64_t v28 = operator new(0x30uLL);
  v47[0] = v28;
  v47[1] = a1 + 16;
  char v48 = 0;
  void *v28 = 0;
  v28[1] = v11;
  int v29 = v28 + 2;
  int v30 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_19E13C2D0(v29, *(void **)v30, *((void *)v30 + 1));
  }
  else
  {
    long long v31 = *v30;
    void v28[4] = *((void *)v30 + 2);
    *(_OWORD *)int v29 = v31;
  }
  v28[5] = 0;
  char v48 = 1;
  float v32 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v33 = *(float *)(a1 + 32);
  if (!v12 || (float)(v33 * (float)v12) < v32)
  {
    BOOL v36 = 1;
    if (v12 >= 3) {
      BOOL v36 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v37 = v36 | (2 * v12);
    unint64_t v38 = vcvtps_u32_f32(v32 / v33);
    if (v37 <= v38) {
      size_t prime = v38;
    }
    else {
      size_t prime = v37;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v40 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v40) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v40)
    {
      unint64_t v41 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v40 < 3uLL || (uint8x8_t v42 = (uint8x8_t)vcnt_s8(v40), v42.i16[0] = vaddlv_u8(v42), v42.u32[0] > 1uLL))
      {
        unint64_t v41 = std::__next_prime(v41);
      }
      else
      {
        uint64_t v43 = 1 << -(char)__clz(v41 - 1);
        if (v41 >= 2) {
          unint64_t v41 = v43;
        }
      }
      if (prime <= v41) {
        size_t prime = v41;
      }
      if (prime < *(void *)&v40) {
LABEL_68:
      }
        sub_19E13D39C(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v44 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        uint64_t v34 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        long long v35 = (void *)v47[0];
        if (v34) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v4 = v11;
        uint64_t v34 = *(void **)(*(void *)a1 + 8 * v11);
        long long v35 = (void *)v47[0];
        if (v34) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v4 = v44 & v11;
      uint64_t v34 = *(void **)(*(void *)a1 + 8 * (v44 & v11));
      long long v35 = (void *)v47[0];
      if (v34) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *long long v35 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v47[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v47[0])
    {
      unint64_t v45 = *(void *)(*(void *)v47[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v45 >= v12) {
          v45 %= v12;
        }
      }
      else
      {
        v45 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v45) = v47[0];
    }
    goto LABEL_92;
  }
  uint64_t v34 = *(void **)(*(void *)a1 + 8 * v4);
  long long v35 = (void *)v47[0];
  if (!v34) {
    goto LABEL_81;
  }
LABEL_57:
  *long long v35 = *v34;
  *uint64_t v34 = v47[0];
LABEL_92:
  uint64_t v15 = (uint64_t *)v47[0];
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_19E13CEA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E13CED0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19E13CEB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E13CED0((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_19E13CED0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      uint64_t v3 = *(void *)(v2 + 40);
      *(void *)(v2 + 40) = 0;
      if (v3) {
        (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
      }
      if (*(char *)(v2 + 39) < 0) {
        operator delete(*(void **)(v2 + 16));
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

unint64_t sub_19E13CF50(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      uint64_t v23 = *(uint64_t *)((char *)a2 + a3 - 48);
      uint64_t v24 = *(uint64_t *)((char *)a2 + a3 - 40);
      uint64_t v25 = *(uint64_t *)((char *)a2 + a3 - 24);
      uint64_t v27 = *(uint64_t *)((char *)a2 + a3 - 64);
      uint64_t v26 = *(uint64_t *)((char *)a2 + a3 - 56);
      uint64_t v28 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v29 = *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v30 = v26 + v28;
      unint64_t v31 = 0x9DDFEA08EB382D69
          * (v25 ^ ((0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))));
      unint64_t v32 = 0x9DDFEA08EB382D69 * (v31 ^ (v31 >> 47));
      unint64_t v33 = v27 + a3 + v26 + v23;
      uint64_t v34 = v33 + v24;
      unint64_t v35 = __ROR8__(v33, 44) + v27 + a3 + __ROR8__(v24 + v27 + a3 - 0x622015F714C7D297 * (v31 ^ (v31 >> 47)), 21);
      uint64_t v36 = v26 + v28 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v37 = v36 + v25 + v28;
      uint64_t v38 = __ROR8__(v37, 44);
      uint64_t v39 = v37 + v29;
      uint64_t v40 = v38 + v36 + __ROR8__(v36 + v24 + v29, 21);
      uint64_t v42 = *a2;
      unint64_t v41 = a2 + 4;
      unint64_t v43 = v42 - 0x4B6D499041670D8DLL * v24;
      uint64_t v44 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v45 = *(v41 - 3);
        uint64_t v46 = v43 + v34 + v30 + v45;
        uint64_t v47 = v41[2];
        uint64_t v48 = v41[3];
        uint64_t v49 = v41[1];
        unint64_t v30 = v49 + v34 - 0x4B6D499041670D8DLL * __ROR8__(v30 + v35 + v47, 42);
        uint64_t v50 = v32 + v39;
        uint64_t v51 = *(v41 - 2);
        uint64_t v52 = *(v41 - 1);
        uint64_t v53 = *(v41 - 4) - 0x4B6D499041670D8DLL * v35;
        uint64_t v54 = v53 + v39 + v52;
        uint64_t v55 = v53 + v45 + v51;
        uint64_t v34 = v55 + v52;
        uint64_t v56 = __ROR8__(v55, 44) + v53;
        unint64_t v57 = (0xB492B66FBE98F273 * __ROR8__(v46, 37)) ^ v40;
        unint64_t v43 = 0xB492B66FBE98F273 * __ROR8__(v50, 33);
        unint64_t v35 = v56 + __ROR8__(v54 + v57, 21);
        unint64_t v58 = v43 + v40 + *v41;
        uint64_t v39 = v58 + v49 + v47 + v48;
        uint64_t v40 = __ROR8__(v58 + v49 + v47, 44) + v58 + __ROR8__(v30 + v51 + v58 + v48, 21);
        v41 += 8;
        unint64_t v32 = v57;
        v44 += 64;
      }
      while (v44);
      unint64_t v59 = v43
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) ^ ((0x9DDFEA08EB382D69 * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) >> 47));
      unint64_t v60 = 0x9DDFEA08EB382D69
          * (v59 ^ (v57
                  - 0x4B6D499041670D8DLL * (v30 ^ (v30 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) ^ ((0x9DDFEA08EB382D69 * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) ^ ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) >> 47));
    }
    else
    {
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v7 = *a2 - 0x3C5A37A36834CED9 * (v6 + a3);
      uint64_t v9 = a2[2];
      uint64_t v8 = a2[3];
      uint64_t v10 = __ROR8__(v7 + v8, 52);
      uint64_t v11 = v7 + a2[1];
      uint64_t v12 = __ROR8__(v11, 7);
      uint64_t v13 = v11 + v9;
      uint64_t v14 = *(uint64_t *)((char *)a2 + a3 - 32) + v9;
      uint64_t v15 = v12 + __ROR8__(*a2 - 0x3C5A37A36834CED9 * (v6 + a3), 37) + v10 + __ROR8__(v13, 31);
      uint64_t v16 = *(uint64_t *)((char *)a2 + a3 - 24) + v14 + v6;
      unint64_t v17 = 0xC3A5C85C97CB3127 * (v16 + *(uint64_t *)((char *)a2 + a3 - 8) + v8 + v15)
          - 0x651E95C4D06FBFB1
          * (v13
           + v8
           + __ROR8__(v14, 37)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 24) + v14, 7)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 8) + v8 + v14, 52)
           + __ROR8__(v16, 31));
      return 0x9AE16A3B2F90404FLL
           * ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) ^ ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) >> 47));
    }
  }
  else if (a3 > 0x10)
  {
    uint64_t v18 = a2[1];
    unint64_t v19 = 0xB492B66FBE98F273 * *a2;
    uint64_t v20 = __ROR8__(0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8), 30) + __ROR8__(v19 - v18, 43);
    unint64_t v21 = v19 + a3 + __ROR8__(v18 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8);
    unint64_t v22 = 0x9DDFEA08EB382D69 * ((v20 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)a2 + a3 - 16)) ^ v21);
    return 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) ^ ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) >> 47));
  }
  else if (a3 < 9)
  {
    if (a3 < 4)
    {
      unint64_t result = 0x9AE16A3B2F90404FLL;
      if (a3)
      {
        unint64_t v63 = (0xC949D7C7509E6557 * (a3 + 4 * *((unsigned __int8 *)a2 + a3 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                       * (*(unsigned __int8 *)a2 | ((unint64_t)*((unsigned __int8 *)a2 + (a3 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v63 ^ (v63 >> 47));
      }
    }
    else
    {
      uint64_t v61 = *(unsigned int *)((char *)a2 + a3 - 4);
      unint64_t v62 = 0x9DDFEA08EB382D69 * (((8 * *(_DWORD *)a2) + a3) ^ v61);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) ^ ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) >> 47));
    }
  }
  else
  {
    uint64_t v3 = *(uint64_t *)((char *)a2 + a3 - 8);
    uint64_t v4 = __ROR8__(v3 + a3, a3);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) >> 47))) ^ v3;
  }
  return result;
}

void sub_19E13D39C(uint64_t a1, unint64_t a2)
{
  if (!a2)
  {
    uint64_t v15 = *(void **)a1;
    *(void *)a1 = 0;
    if (v15) {
      operator delete(v15);
    }
    *(void *)(a1 + 8) = 0;
    return;
  }
  if (a2 >> 61) {
    sub_19E13C418();
  }
  uint64_t v4 = operator new(8 * a2);
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = 0;
  *(void *)(a1 + 8) = a2;
  do
    *(void *)(*(void *)a1 + 8 * v6++) = 0;
  while (a2 != v6);
  uint64_t v8 = a1 + 16;
  uint64_t v7 = *(void **)(a1 + 16);
  if (v7)
  {
    unint64_t v9 = v7[1];
    unint64_t v10 = a2 - 1;
    if ((a2 & (a2 - 1)) == 0)
    {
      uint64_t v11 = v9 & v10;
      *(void *)(*(void *)a1 + 8 * v11) = v8;
      while (1)
      {
        uint64_t v12 = (void *)*v7;
        if (!*v7) {
          break;
        }
        uint64_t v13 = v12[1] & v10;
        if (v13 == v11)
        {
          uint64_t v7 = (void *)*v7;
        }
        else if (*(void *)(*(void *)a1 + 8 * v13))
        {
          void *v7 = *v12;
          uint64_t v14 = 8 * v13;
          void *v12 = **(void **)(*(void *)a1 + v14);
          **(void **)(*(void *)a1 + v14) = v12;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v13) = v7;
          uint64_t v7 = v12;
          uint64_t v11 = v13;
        }
      }
      return;
    }
    if (v9 >= a2) {
      v9 %= a2;
    }
    *(void *)(*(void *)a1 + 8 * v9) = v8;
    uint64_t v16 = (void *)*v7;
    if (*v7)
    {
      while (1)
      {
        unint64_t v18 = v16[1];
        if (v18 >= a2) {
          v18 %= a2;
        }
        if (v18 == v9) {
          goto LABEL_25;
        }
        if (*(void *)(*(void *)a1 + 8 * v18))
        {
          void *v7 = *v16;
          uint64_t v17 = 8 * v18;
          *uint64_t v16 = **(void **)(*(void *)a1 + v17);
          **(void **)(*(void *)a1 + v17) = v16;
          uint64_t v16 = v7;
LABEL_25:
          uint64_t v7 = v16;
          uint64_t v16 = (void *)*v16;
          if (!v16) {
            return;
          }
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v18) = v7;
          uint64_t v7 = v16;
          uint64_t v16 = (void *)*v16;
          unint64_t v9 = v18;
          if (!v16) {
            return;
          }
        }
      }
    }
  }
}

char *sub_19E13D54C(void **a1, uint64_t a2)
{
  uint64_t v4 = (id *)*a1;
  uint64_t v3 = (id *)a1[1];
  uint64_t v5 = (char *)v3 - (unsigned char *)*a1;
  unint64_t v6 = (v5 >> 5) + 1;
  if (v6 >> 59) {
    sub_19E13D694();
  }
  uint64_t v7 = (unsigned char *)a1[2] - (unsigned char *)v4;
  if (v7 >> 4 > v6) {
    unint64_t v6 = v7 >> 4;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v6 = 0x7FFFFFFFFFFFFFFLL;
  }
  if (v6 >> 59) {
    sub_19E13C418();
  }
  uint64_t v9 = 32 * v6;
  unint64_t v10 = (char *)operator new(32 * v6);
  uint64_t v11 = &v10[32 * (v5 >> 5)];
  uint64_t v12 = &v10[v9];
  *(_OWORD *)uint64_t v11 = *(_OWORD *)a2;
  uint64_t v13 = *(void *)(a2 + 24);
  *((void *)v11 + 2) = *(void *)(a2 + 16);
  *(void *)(a2 + 24) = 0;
  *(void *)&v10[v5 + 24] = v13;
  uint64_t v14 = v11 + 32;
  if (v3 == v4)
  {
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v12;
    if (!v3) {
      return v14;
    }
    goto LABEL_13;
  }
  uint64_t v15 = 0;
  do
  {
    uint64_t v16 = &v11[v15 * 8];
    long long v17 = *(_OWORD *)&v3[v15 - 4];
    *((void *)v16 - 2) = v3[v15 - 2];
    *((_OWORD *)v16 - 2) = v17;
    id v18 = v3[v15 - 1];
    v3[v15 - 1] = 0;
    *((void *)v16 - 1) = v18;
    v15 -= 4;
  }
  while (&v3[v15] != v4);
  *a1 = &v11[v15 * 8];
  a1[1] = v14;
  a1[2] = v12;
  do
  {

    v3 -= 4;
  }
  while (v3 != v4);
  uint64_t v3 = v4;
  if (v4) {
LABEL_13:
  }
    operator delete(v3);
  return v14;
}

void sub_19E13D694()
{
}

char *sub_19E13D6AC(char **a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_19E13D694();
  }
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555) {
    unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL) {
      sub_19E13C418();
    }
    uint64_t v9 = (char *)operator new(24 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  unint64_t v10 = &v9[24 * v5];
  uint64_t v16 = v10;
  long long v17 = v10;
  id v18 = &v9[24 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_19E13C2D0(v10, *(void **)a2, *(void *)(a2 + 8));
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    unint64_t v10 = v16;
    uint64_t v11 = v17 + 24;
    if (v4 == *a1)
    {
LABEL_17:
      uint64_t v13 = v3;
      goto LABEL_18;
    }
  }
  else
  {
    *(_OWORD *)unint64_t v10 = *(_OWORD *)a2;
    *((void *)v10 + 2) = *(void *)(a2 + 16);
    uint64_t v11 = v10 + 24;
    if (v4 == v3) {
      goto LABEL_17;
    }
  }
  do
  {
    long long v12 = *(_OWORD *)(v4 - 24);
    *((void *)v10 - 1) = *((void *)v4 - 1);
    *(_OWORD *)(v10 - 24) = v12;
    v10 -= 24;
    *((void *)v4 - 2) = 0;
    *((void *)v4 - 1) = 0;
    *((void *)v4 - 3) = 0;
    v4 -= 24;
  }
  while (v4 != v3);
  uint64_t v13 = *a1;
  uint64_t v3 = a1[1];
LABEL_18:
  *a1 = v10;
  a1[1] = v11;
  a1[2] = v18;
  if (v3 != v13)
  {
    uint64_t v14 = (void **)(v3 - 24);
    do
    {
      if (*((char *)v14 + 23) < 0) {
        operator delete(*v14);
      }
      v14 -= 3;
    }
    while (v14 + 3 != (void **)v13);
    uint64_t v3 = v13;
  }
  if (v3) {
    operator delete(v3);
  }
  return v11;
}

void sub_19E13D870(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E13D884((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E13D884(uint64_t a1)
{
  uint64_t v3 = *(void ***)(a1 + 8);
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      unint64_t v5 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        unint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_19E13D8EC(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA498] + 64;
  *(void *)(a1 + 112) = MEMORY[0x1E4FBA498] + 64;
  uint64_t v3 = *(void *)(MEMORY[0x1E4FBA418] + 16);
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA418] + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v3;
  unint64_t v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 8));
  uint64_t v6 = MEMORY[0x1E4FBA498] + 24;
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  *(void *)a1 = v6;
  *(void *)(a1 + 112) = v2;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_19E13DA5C(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x19F3BBB40](v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19E13DA90(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA418];
  uint64_t v3 = *MEMORY[0x1E4FBA418];
  *(void *)a1 = *MEMORY[0x1E4FBA418];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x19F3BBB40](a1 + 112);
  return a1;
}

void *sub_19E13DB94(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x19F3BB9C0](v13, a1);
  if (v13[0])
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      unint64_t v10 = std::locale::use_facet(&v14, MEMORY[0x1E4FBA258]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!sub_19E13DD38(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x19F3BB9D0](v13);
  return a1;
}

void sub_19E13DCD0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  MEMORY[0x19F3BB9D0](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x19E13DCB0);
}

void sub_19E13DD24(_Unwind_Exception *a1)
{
}

uint64_t sub_19E13DD38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      size_t v12 = 0;
    }
    else {
      size_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if ((uint64_t)v12 >= 1)
    {
      if (v12 >= 0x7FFFFFFFFFFFFFF8) {
        sub_19E13C370();
      }
      if (v12 >= 0x17)
      {
        uint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17) {
          uint64_t v14 = v12 | 7;
        }
        uint64_t v15 = v14 + 1;
        uint64_t v13 = (void **)operator new(v14 + 1);
        __b[1] = (void *)v12;
        int64_t v22 = v15 | 0x8000000000000000;
        __b[0] = v13;
      }
      else
      {
        HIBYTE(v22) = v12;
        uint64_t v13 = __b;
      }
      memset(v13, __c, v12);
      *((unsigned char *)v13 + v12) = 0;
      if (v22 >= 0) {
        uint64_t v16 = __b;
      }
      else {
        uint64_t v16 = (void **)__b[0];
      }
      uint64_t v17 = (*(uint64_t (**)(uint64_t, void **, size_t))(*(void *)v6 + 96))(v6, v16, v12);
      uint64_t v18 = v17;
      if (SHIBYTE(v22) < 0)
      {
        operator delete(__b[0]);
        if (v18 != v12) {
          return 0;
        }
      }
      else if (v17 != v12)
      {
        return 0;
      }
    }
    uint64_t v19 = a4 - a3;
    if (v19 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v19) == v19)
    {
      *(void *)(a5 + 24) = 0;
      return v6;
    }
    return 0;
  }
  return v6;
}

void sub_19E13DF0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E13DF28()
{
}

void sub_19E13DF40(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_19E13DF9C(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E599CD08, MEMORY[0x1E4FBA1D0]);
}

void sub_19E13DF88(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_19E13DF9C(std::logic_error *a1, const char *a2)
{
  unint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
  return result;
}

uint64_t MLPModelTrainerCreate(void *a1)
{
  id v1 = a1;
  if (qword_1E9457ED0 != -1) {
    dispatch_once(&qword_1E9457ED0, &unk_1EF0ABF20);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  sub_19E263DC8(Instance + 16, 0, v1);

  return Instance;
}

void sub_19E13E064(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t MLPModelTrainerCreateWithModel(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (qword_1E9457ED0 != -1) {
    dispatch_once(&qword_1E9457ED0, &unk_1EF0ABF20);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  sub_19E263DC8(Instance + 16, a1, v3);

  return Instance;
}

void sub_19E13E114(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t MLPModelTrainerTrain(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  return sub_19E263538((void *)(a1 + 16), a4, a2, a3, 0, a5);
}

uint64_t MLPModelTrainerTrainModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  return sub_19E263538((void *)(a1 + 16), a4, a2, a3, a5, a6);
}

uint64_t MLPModelTrainerEvaluateModel(uint64_t a1, void *a2)
{
  return sub_19E263044(a1 + 16, a2);
}

uint64_t MLPModelTrainerComputeInference(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return sub_19E263068((void **)(a1 + 16), a2, a3, a4);
}

uint64_t sub_19E13E16C()
{
  qword_1E9457ED8 = 0;
  unk_1E9457EE0 = "MLPModelTrainer";
  qword_1E9457EE8 = 0;
  unk_1E9457EF0 = 0;
  qword_1E9457EF8 = (uint64_t)sub_19E13E1C4;
  unk_1E9457F00 = 0u;
  unk_1E9457F10 = 0u;
  uint64_t result = _CFRuntimeRegisterClass();
  qword_1E9457F38 = result;
  return result;
}

uint64_t sub_19E13E1C4(uint64_t a1)
{
  return sub_19E263E54(a1 + 16);
}

void sub_19E13E1CC(uint64_t a1)
{
}

uint64_t sub_19E13E24C(uint64_t a1)
{
  *(void *)a1 = &unk_1EF0AA018;
  espresso_plan_destroy();
  espresso_context_destroy();
  uint64_t v2 = *(void ***)(a1 + 496);
  if (v2)
  {
    do
    {
      uint64_t v14 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v14;
    }
    while (v14);
  }
  id v3 = *(void **)(a1 + 480);
  *(void *)(a1 + 480) = 0;
  if (v3) {
    operator delete(v3);
  }
  uint64_t v4 = *(void ***)(a1 + 456);
  if (v4)
  {
    do
    {
      uint64_t v15 = (void **)*v4;
      if (*((char *)v4 + 39) < 0) {
        operator delete(v4[2]);
      }
      operator delete(v4);
      uint64_t v4 = v15;
    }
    while (v15);
  }
  unint64_t v5 = *(void **)(a1 + 440);
  *(void *)(a1 + 440) = 0;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = *(char **)(a1 + 416);
  if (v6)
  {
    do
    {
      uint64_t v16 = *(char **)v6;
      uint64_t v17 = (void *)*((void *)v6 + 5);
      if (v17)
      {
        *((void *)v6 + 6) = v17;
        operator delete(v17);
      }
      if (v6[39] < 0) {
        operator delete(*((void **)v6 + 2));
      }
      operator delete(v6);
      uint64_t v6 = v16;
    }
    while (v16);
  }
  uint64_t v7 = *(void **)(a1 + 400);
  *(void *)(a1 + 400) = 0;
  if (v7) {
    operator delete(v7);
  }
  int v8 = *(void ***)(a1 + 376);
  if (v8)
  {
    do
    {
      uint64_t v18 = (void **)*v8;
      if (*((char *)v8 + 39) < 0) {
        operator delete(v8[2]);
      }
      operator delete(v8);
      int v8 = v18;
    }
    while (v18);
  }
  int v9 = *(void **)(a1 + 360);
  *(void *)(a1 + 360) = 0;
  if (v9) {
    operator delete(v9);
  }
  unint64_t v10 = *(void ***)(a1 + 336);
  if (v10)
  {
    do
    {
      uint64_t v19 = (void **)*v10;
      if (*((char *)v10 + 39) < 0) {
        operator delete(v10[2]);
      }
      operator delete(v10);
      unint64_t v10 = v19;
    }
    while (v19);
  }
  uint64_t v11 = *(void **)(a1 + 320);
  *(void *)(a1 + 320) = 0;
  if (v11) {
    operator delete(v11);
  }
  if (*(char *)(a1 + 319) < 0)
  {
    operator delete(*(void **)(a1 + 296));
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t v12 = a1;
  }
  return sub_19E304940(v12);
}

void sub_19E13E440(uint64_t a1)
{
  id v1 = (void *)sub_19E13E24C(a1);

  operator delete(v1);
}

__CFArray *sub_19E13E468(uint64_t a1)
{
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  if (*(int *)(a1 + 56) >= 1)
  {
    uint64_t v33 = 0;
    while (1)
    {
      if (qword_1E9457D20 != -1) {
        dispatch_once(&qword_1E9457D20, &unk_1EF0ABF40);
      }
      uint64_t Instance = (uint64_t **)_CFRuntimeCreateInstance();
      Instance[3] = 0;
      Instance[2] = (uint64_t *)(Instance + 3);
      id v3 = Instance + 2;
      Instance[6] = 0;
      Instance[4] = 0;
      Instance[5] = (uint64_t *)(Instance + 6);
      Instance[8] = 0;
      Instance[9] = 0;
      Instance[7] = 0;
      unint64_t v31 = Instance;
      uint64_t v4 = *(uint64_t **)(a1 + 376);
      if (v4) {
        break;
      }
LABEL_6:
      CFArrayAppendValue(Mutable, v31);
      CFRelease(v31);
      if (++v33 >= *(int *)(a1 + 56)) {
        return Mutable;
      }
    }
    while (1)
    {
      if (v4[18] != *(_DWORD *)(a1 + 56)) {
        return Mutable;
      }
      unint64_t v5 = v4 + 2;
      uint64_t v6 = *((unsigned __int8 *)v4 + 39);
      if (*((char *)v4 + 39) < 0)
      {
        uint64_t v7 = (char *)v4[2];
        uint64_t v8 = v4[3];
        int v9 = &v7[v8];
        if (v8 < 6) {
          goto LABEL_21;
        }
      }
      else
      {
        uint64_t v7 = (char *)(v4 + 2);
        uint64_t v8 = *((unsigned __int8 *)v4 + 39);
        int v9 = (char *)v5 + v6;
        if ((unint64_t)v8 < 6) {
          goto LABEL_21;
        }
      }
      unint64_t v10 = v7;
      do
      {
        uint64_t v11 = (char *)memchr(v10, 95, v8 - 5);
        if (!v11) {
          break;
        }
        if (*(_DWORD *)v11 == 1868526431 && *((_WORD *)v11 + 2) == 29813) {
          goto LABEL_22;
        }
        unint64_t v10 = v11 + 1;
        uint64_t v8 = v9 - (unsigned char *)v10;
      }
      while (v9 - (unsigned char *)v10 > 5);
LABEL_21:
      uint64_t v11 = v9;
LABEL_22:
      if (v11 == v9 || v11 - v7 == -1 || !v4[5]) {
        goto LABEL_8;
      }
      if ((v6 & 0x80) != 0)
      {
        unint64_t v5 = (uint64_t *)v4[2];
        uint64_t v6 = v4[3];
      }
      uint64_t v13 = (uint64_t)v5 + v6 - 4;
      unint64_t v14 = v6 - 4;
      if ((unint64_t)(v6 - 4) >= 0x7FFFFFFFFFFFFFF8) {
        sub_19E13C370();
      }
      if (v14 > 0x16)
      {
        uint64_t v23 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v14 | 7) != 0x17) {
          uint64_t v23 = v14 | 7;
        }
        uint64_t v24 = v23 + 1;
        p_p = (char *)operator new(v23 + 1);
        *((void *)&__p + 1) = v6 - 4;
        unint64_t v36 = v24 | 0x8000000000000000;
        *(void *)&long long __p = p_p;
        if (v5 == (uint64_t *)v13)
        {
LABEL_39:
          uint64_t v17 = p_p;
          goto LABEL_42;
        }
      }
      else
      {
        HIBYTE(v36) = v6 - 4;
        p_p = (char *)&__p;
        if (v5 == (uint64_t *)v13) {
          goto LABEL_39;
        }
      }
      uint64_t v16 = v6 - 4;
      if ((unint64_t)(v6 - 4) < 0x20 || (unint64_t)(p_p - (char *)v5) < 0x20)
      {
        uint64_t v17 = p_p;
        uint64_t v18 = (char *)v5;
        do
        {
LABEL_41:
          char v25 = *v18++;
          *v17++ = v25;
        }
        while (v18 != (char *)v13);
        goto LABEL_42;
      }
      uint64_t v17 = &p_p[v16 & 0xFFFFFFFFFFFFFFE0];
      uint64_t v18 = (char *)v5 + (v16 & 0xFFFFFFFFFFFFFFE0);
      uint64_t v19 = (long long *)(v5 + 2);
      uint64_t v20 = p_p + 16;
      unint64_t v21 = v16 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v22 = *v19;
        *(v20 - 1) = *(v19 - 1);
        *uint64_t v20 = v22;
        v19 += 2;
        v20 += 2;
        v21 -= 32;
      }
      while (v21);
      if (v16 != (v16 & 0xFFFFFFFFFFFFFFE0)) {
        goto LABEL_41;
      }
LABEL_42:
      char *v17 = 0;
      uint64_t v27 = v4[16];
      uint64_t v28 = v4[17];
      uint64_t v29 = v4[19];
      v34[0] = v4[15];
      int v26 = v34[0];
      v34[1] = v27;
      v34[2] = v28;
      v34[3] = 1;
      v34[4] = v29;
      sub_19E253744((uint64_t)v3, &__p, (uint64_t)v34);
      sub_19E2536EC(v3, &__p, (char *)(v4[5] + 4 * v26 * (int)v27 * (int)v28 * (int)v29 * v33), 4 * v26 * (int)v27 * (int)v28 * (int)v29);
      if (SHIBYTE(v36) < 0) {
        operator delete((void *)__p);
      }
LABEL_8:
      uint64_t v4 = (uint64_t *)*v4;
      if (!v4) {
        goto LABEL_6;
      }
    }
  }
  return Mutable;
}

void sub_19E13E7A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E13E7C4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_19E304C24(a1, a2, (uint64_t)__p);
  char v5 = v9;
  if (v9 < 0)
  {
    if (__p[1])
    {
LABEL_3:
      unint64_t v10 = __p;
      uint64_t v6 = sub_19E1403B8(a1 + 440, (uint64_t)__p, (uint64_t)&unk_19E351150, (long long **)&v10);
      long long v7 = *(_OWORD *)(v6 + 7);
      *(_OWORD *)a3 = *(_OWORD *)(v6 + 5);
      *(_OWORD *)(a3 + 16) = v7;
      *(void *)(a3 + 32) = v6[9];
      if ((v9 & 0x80) == 0) {
        return;
      }
LABEL_7:
      operator delete(__p[0]);
      return;
    }
  }
  else if (v9)
  {
    goto LABEL_3;
  }
  *(void *)(a3 + 32) = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  if (v5 < 0) {
    goto LABEL_7;
  }
}

void sub_19E13E874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E13E890(uint64_t a1)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t context = espresso_create_context();
  *(void *)(a1 + 280) = context;
  if (context)
  {
    *(void *)(a1 + 272) = espresso_create_plan();
    if (espresso_plan_add_network())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      espresso_plan_get_error_info();
      std::runtime_error::runtime_error(exception, v24);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    if (espresso_plan_set_priority())
    {
      unint64_t v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v21, "unable to set priority on espresso plan with ANE_RUNTIME");
LABEL_52:
      __cxa_throw(v21, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  if (*(_DWORD *)(a1 + 264) == -1 || !*(void *)(a1 + 256))
  {
    unint64_t v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v21, "unable to load model");
    goto LABEL_52;
  }
  uint64_t v29 = 0;
  unint64_t v30 = 0;
  uint64_t v31 = 0;
  long long __p = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  c_network_get_input_names();
  c_network_get_output_names();
  char v25 = (void *)(*(void *)(a1 + 8) + 32);
  id v3 = sub_19E1403B8(a1 + 440, (uint64_t)v25, (uint64_t)&unk_19E351150, (long long **)&v25);
  uint64_t v4 = v3[7];
  LODWORD(v25) = v3[8];
  LODWORD(v34) = v4;
  sub_19E13FF74("batchsize=", (uint64_t)&v25, ",seqlen=");
  char v5 = (void **)(a1 + 296);
  if (*(char *)(a1 + 319) < 0) {
    operator delete(*v5);
  }
  *(_OWORD *)char v5 = v32;
  *(void *)(a1 + 312) = v33;
  espresso_network_select_configuration();
  if (espresso_plan_build())
  {
    long long v22 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v22, "Failed to build espresso plan");
    __cxa_throw(v22, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v6 = *(void **)(a1 + 8);
  if (v6 != (void *)(a1 + 16))
  {
    while (!espresso_network_bind_buffer())
    {
      sub_19E140F1C(a1 + 320, (uint64_t)(v6 + 4), (uint64_t)(v6 + 4), (uint64_t)&v32);
      long long v7 = (void *)v6[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          long long v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void *)v6[2];
          BOOL v9 = *v8 == (void)v6;
          uint64_t v6 = v8;
        }
        while (!v9);
      }
      uint64_t v6 = v8;
      if (v8 == (void *)(a1 + 16)) {
        goto LABEL_19;
      }
    }
LABEL_29:
    uint64_t v13 = 0;
    unint64_t v14 = (void **)__p;
    if (!__p) {
      goto LABEL_39;
    }
    goto LABEL_32;
  }
LABEL_19:
  unint64_t v10 = *(void **)(a1 + 32);
  if (v10 != (void *)(a1 + 40))
  {
    while (!espresso_network_bind_buffer())
    {
      sub_19E140F1C(a1 + 360, (uint64_t)(v10 + 4), (uint64_t)(v10 + 4), (uint64_t)&v32);
      uint64_t v11 = (void *)v10[1];
      if (v11)
      {
        do
        {
          uint64_t v12 = v11;
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          uint64_t v12 = (void *)v10[2];
          BOOL v9 = *v12 == (void)v10;
          unint64_t v10 = v12;
        }
        while (!v9);
      }
      unint64_t v10 = v12;
      if (v12 == (void *)(a1 + 40)) {
        goto LABEL_31;
      }
    }
    goto LABEL_29;
  }
LABEL_31:
  uint64_t v13 = 1;
  unint64_t v14 = (void **)__p;
  if (!__p) {
    goto LABEL_39;
  }
LABEL_32:
  uint64_t v15 = v27;
  uint64_t v16 = v14;
  if (v27 != v14)
  {
    do
    {
      if (*((char *)v15 - 1) < 0) {
        operator delete(*(v15 - 3));
      }
      v15 -= 3;
    }
    while (v15 != v14);
    uint64_t v16 = __p;
  }
  uint64_t v27 = v14;
  operator delete(v16);
LABEL_39:
  uint64_t v17 = (void **)v29;
  if (v29)
  {
    uint64_t v18 = v30;
    uint64_t v19 = v29;
    if (v30 != v29)
    {
      do
      {
        if (*((char *)v18 - 1) < 0) {
          operator delete(*(v18 - 3));
        }
        v18 -= 3;
      }
      while (v18 != v17);
      uint64_t v19 = v29;
    }
    unint64_t v30 = v17;
    operator delete(v19);
  }
  return v13;
}

uint64_t sub_19E13F098(uint64_t a1, const void *a2, uint64_t a3, long long *a4)
{
  sub_19E304C24(a1, a3, (uint64_t)__p);
  *(_DWORD *)(a1 + 56) = *((void *)a4 + 3);
  v22[0] = (long long *)__p;
  long long v7 = sub_19E1403B8(a1 + 440, (uint64_t)__p, (uint64_t)&unk_19E351150, v22);
  long long v8 = *a4;
  long long v9 = a4[1];
  v7[9] = *((void *)a4 + 4);
  *(_OWORD *)(v7 + 7) = v9;
  *(_OWORD *)(v7 + 5) = v8;
  uint64_t v10 = a1 + 400;
  v22[0] = (long long *)__p;
  uint64_t v11 = sub_19E140A3C(v10, (uint64_t)__p, (uint64_t)&unk_19E351150, v22);
  uint64_t v12 = (*(_DWORD *)a4
                     * *((_DWORD *)a4 + 2)
                     * *((_DWORD *)a4 + 4)
                     * *((_DWORD *)a4 + 6)
                     * *((_DWORD *)a4 + 8));
  uint64_t v13 = (int)v12;
  if ((int)v12 > (unint64_t)((v11[6] - v11[5]) >> 2))
  {
    unint64_t v14 = v12 << 32;
    memset(v22, 0, sizeof(v22));
    if ((v14 & 0x8000000000000000) != 0) {
      sub_19E13D694();
    }
    unint64_t v15 = v14 >> 30;
    uint64_t v16 = (char *)operator new(v14 >> 30);
    bzero(v16, v15 & 0x3FFFFFFFCLL);
    char v25 = __p;
    uint64_t v17 = sub_19E140A3C(v10, (uint64_t)__p, (uint64_t)&unk_19E351150, (long long **)&v25);
    uint64_t v18 = &v16[4 * v13];
    uint64_t v19 = (void *)v17[5];
    if (v19)
    {
      v17[6] = (uint64_t)v19;
      operator delete(v19);
      v17[5] = 0;
      v17[6] = 0;
      v17[7] = 0;
    }
    v17[5] = (uint64_t)v16;
    v17[6] = (uint64_t)v18;
    v17[7] = (uint64_t)v18;
  }
  v22[0] = (long long *)__p;
  uint64_t v20 = sub_19E140A3C(v10, (uint64_t)__p, (uint64_t)&unk_19E351150, v22);
  memcpy((void *)v20[5], a2, 4 * *(_DWORD *)a4 * *((_DWORD *)a4 + 2) * *((_DWORD *)a4 + 4) * *((_DWORD *)a4 + 6) * *((_DWORD *)a4 + 8));
  if (v24 < 0) {
    operator delete(__p[0]);
  }
  return 1;
}

void sub_19E13F278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  operator delete(v17);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_19E13F2D0(uint64_t a1, uint64_t a2)
{
  sub_19E304C24(a1, a2, (uint64_t)__p);
  long long v8 = __p;
  id v3 = sub_19E1403B8(a1 + 440, (uint64_t)__p, (uint64_t)&unk_19E351150, (long long **)&v8);
  uint64_t v4 = v3[5];
  if ((v7 & 0x80000000) == 0) {
    return v3[5];
  }
  operator delete(__p[0]);
  return v4;
}

void sub_19E13F350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E13F36C(uint64_t a1, uint64_t a2)
{
  sub_19E304F28(a1, a2, (uint64_t)__p);
  long long v8 = __p;
  id v3 = sub_19E1403B8(a1 + 480, (uint64_t)__p, (uint64_t)&unk_19E351150, (long long **)&v8);
  uint64_t v4 = v3[5];
  if ((v7 & 0x80000000) == 0) {
    return v3[5];
  }
  operator delete(__p[0]);
  return v4;
}

void sub_19E13F3EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_19E13F408(uint64_t a1, const __CFArray *a2)
{
  uint64_t v2 = a1;
  uint64_t v3 = a1 + 440;
  uint64_t v65 = (long long *)(*(void *)(a1 + 8) + 32);
  uint64_t v4 = sub_19E1403B8(a1 + 440, (uint64_t)v65, (uint64_t)&unk_19E351150, &v65);
  uint64_t v5 = v4[7];
  LODWORD(v65) = v4[8];
  LODWORD(v63) = v5;
  sub_19E13FF74("batchsize=", (uint64_t)&v65, ",seqlen=");
  uint64_t v6 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
  }
  uint64_t v8 = *(unsigned __int8 *)(v2 + 319);
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(v2 + 304);
  }
  if (size == v8)
  {
    if (v9 >= 0) {
      uint64_t v10 = (unsigned __int8 *)(v2 + 296);
    }
    else {
      uint64_t v10 = *(unsigned __int8 **)(v2 + 296);
    }
    if ((*((unsigned char *)&__str.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (!memcmp(__str.__r_.__value_.__l.__data_, v10, __str.__r_.__value_.__l.__size_)) {
        goto LABEL_31;
      }
    }
    else
    {
      if (!*((unsigned char *)&__str.__r_.__value_.__s + 23)) {
        goto LABEL_31;
      }
      p_str = &__str;
      while (p_str->__r_.__value_.__s.__data_[0] == *v10)
      {
        p_str = (std::string *)((char *)p_str + 1);
        ++v10;
        if (!--v6) {
          goto LABEL_31;
        }
      }
    }
  }
  std::string::operator=((std::string *)(v2 + 296), &__str);
  if (espresso_plan_build_clean())
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to clean espresso plan");
    goto LABEL_101;
  }
  espresso_network_select_configuration();
  if (espresso_plan_build())
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to build espresso plan");
LABEL_101:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (*(void *)(v2 + 344))
  {
    uint64_t v12 = *(void ***)(v2 + 336);
    if (v12)
    {
      do
      {
        uint64_t v42 = (void **)*v12;
        if (*((char *)v12 + 39) < 0) {
          operator delete(v12[2]);
        }
        operator delete(v12);
        uint64_t v12 = v42;
      }
      while (v42);
    }
    *(void *)(v2 + 336) = 0;
    uint64_t v13 = *(void *)(v2 + 328);
    if (v13)
    {
      for (uint64_t i = 0; i != v13; ++i)
        *(void *)(*(void *)(v2 + 320) + 8 * i) = 0;
    }
    *(void *)(v2 + 344) = 0;
  }
  if (*(void *)(v2 + 384))
  {
    unint64_t v15 = *(void ***)(v2 + 376);
    if (v15)
    {
      do
      {
        unint64_t v43 = (void **)*v15;
        if (*((char *)v15 + 39) < 0) {
          operator delete(v15[2]);
        }
        operator delete(v15);
        unint64_t v15 = v43;
      }
      while (v43);
    }
    *(void *)(v2 + 376) = 0;
    uint64_t v16 = *(void *)(v2 + 368);
    if (v16)
    {
      for (uint64_t j = 0; j != v16; ++j)
        *(void *)(*(void *)(v2 + 360) + 8 * j) = 0;
    }
    *(void *)(v2 + 384) = 0;
  }
LABEL_31:
  if (!*(void *)(v2 + 344))
  {
    uint64_t v50 = *(void **)(v2 + 8);
    if (v50 != (void *)(v2 + 16))
    {
      while (!espresso_network_bind_buffer())
      {
        sub_19E140F1C(v2 + 320, (uint64_t)(v50 + 4), (uint64_t)(v50 + 4), (uint64_t)&v65);
        if (v70 != *(_DWORD *)(v2 + 56))
        {
          uint64_t v56 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v56, "new config does not bind to new input shape");
          __cxa_throw(v56, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        uint64_t v51 = (void *)v50[1];
        if (v51)
        {
          do
          {
            uint64_t v52 = v51;
            uint64_t v51 = (void *)*v51;
          }
          while (v51);
        }
        else
        {
          do
          {
            uint64_t v52 = (void *)v50[2];
            BOOL v41 = *v52 == (void)v50;
            uint64_t v50 = v52;
          }
          while (!v41);
        }
        uint64_t v50 = v52;
        if (v52 == (void *)(v2 + 16)) {
          goto LABEL_32;
        }
      }
LABEL_95:
      BOOL v48 = 1;
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return !v48;
      }
      goto LABEL_72;
    }
  }
LABEL_32:
  uint64_t v61 = v2;
  if (!*(void *)(v2 + 384))
  {
    uint64_t v53 = *(void **)(v2 + 32);
    if (v53 != (void *)(v2 + 40))
    {
      while (!espresso_network_bind_buffer())
      {
        sub_19E140F1C(v2 + 360, (uint64_t)(v53 + 4), (uint64_t)(v53 + 4), (uint64_t)&v65);
        uint64_t v54 = (void *)v53[1];
        if (v54)
        {
          do
          {
            uint64_t v55 = v54;
            uint64_t v54 = (void *)*v54;
          }
          while (v54);
        }
        else
        {
          do
          {
            uint64_t v55 = (void *)v53[2];
            BOOL v41 = *v55 == (void)v53;
            uint64_t v53 = v55;
          }
          while (!v41);
        }
        uint64_t v53 = v55;
        if (v55 == (void *)(v2 + 40)) {
          goto LABEL_33;
        }
      }
      goto LABEL_95;
    }
  }
LABEL_33:
  uint64_t v58 = v2 + 320;
  uint64_t v59 = v3;
  if (a2 && *(int *)(v2 + 56) >= 1)
  {
    CFIndex v18 = 0;
    uint64_t v19 = (const void **)(v2 + 16);
    uint64_t v62 = v2 + 400;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a2, v18);
      unint64_t v21 = *(const void ***)(v2 + 8);
      if (v21 != v19) {
        break;
      }
LABEL_36:
      if (++v18 >= *(int *)(v2 + 56)) {
        goto LABEL_69;
      }
    }
    uint64_t v22 = (uint64_t)ValueAtIndex + 16;
    while (1)
    {
      if (*((char *)v21 + 55) < 0)
      {
        char v24 = (char *)v21[4];
        uint64_t v23 = (uint64_t)v21[5];
        if (v23 >= 2)
        {
LABEL_44:
          char v25 = &v24[v23];
          int v26 = v24;
          do
          {
            uint64_t v27 = (char *)memchr(v26, 95, v23 - 1);
            if (!v27) {
              break;
            }
            if (*(_WORD *)v27 == 29535)
            {
              if (v27 != v25 && v27 - v24 != -1)
              {
                uint64_t v28 = sub_19E2533F8(v22, v21 + 4);
                sub_19E253538(v22, v21 + 4, (uint64_t)&v65);
                *(void *)&long long v63 = v21 + 4;
                uint64_t v29 = sub_19E140A3C(v62, (uint64_t)(v21 + 4), (uint64_t)&unk_19E351150, (long long **)&v63);
                uint64_t v30 = (v65 * v66 * v67 * v68 * v69);
                uint64_t v31 = *(int *)(v2 + 56);
                unint64_t v32 = (int)v31 * (uint64_t)(int)v30;
                if (v32 > (v29[6] - v29[5]) >> 2)
                {
                  long long v63 = 0uLL;
                  uint64_t v64 = 0;
                  if (v32 >> 62) {
                    sub_19E13D694();
                  }
                  uint64_t v33 = (char *)operator new(4 * v32);
                  uint64_t v34 = v30 << 32;
                  uint64_t v35 = &v33[4 * v32];
                  *(void *)&long long v63 = v33;
                  uint64_t v64 = (uint64_t)v35;
                  bzero(v33, ((v34 >> 30) * v31) & 0xFFFFFFFFFFFFFFFCLL);
                  *((void *)&v63 + 1) = v35;
                  uint64_t v72 = (long long *)(v21 + 4);
                  unint64_t v36 = sub_19E140A3C(v62, (uint64_t)(v21 + 4), (uint64_t)&unk_19E351150, &v72);
                  uint64_t v37 = (void *)v36[5];
                  if (v37)
                  {
                    v36[6] = (uint64_t)v37;
                    operator delete(v37);
                  }
                  *(_OWORD *)(v36 + 5) = v63;
                  v36[7] = v64;
                }
                *(void *)&long long v63 = v21 + 4;
                uint64_t v38 = sub_19E140A3C(v62, (uint64_t)(v21 + 4), (uint64_t)&unk_19E351150, (long long **)&v63);
                uint64_t v2 = v61;
                memcpy((void *)(v38[5] + 4 * (int)v65 * v66 * v67 * v68 * v69 * v18), v28, 4 * (int)v65 * v66 * v67 * v68 * v69);
              }
              break;
            }
            int v26 = v27 + 1;
            uint64_t v23 = v25 - (unsigned char *)v26;
          }
          while (v25 - (unsigned char *)v26 >= 2);
        }
      }
      else
      {
        uint64_t v23 = *((unsigned __int8 *)v21 + 55);
        char v24 = (char *)(v21 + 4);
        if ((unint64_t)v23 >= 2) {
          goto LABEL_44;
        }
      }
      uint64_t v39 = (const void **)v21[1];
      if (v39)
      {
        do
        {
          uint64_t v40 = v39;
          uint64_t v39 = (const void **)*v39;
        }
        while (v39);
      }
      else
      {
        do
        {
          uint64_t v40 = (const void **)v21[2];
          BOOL v41 = *v40 == v21;
          unint64_t v21 = v40;
        }
        while (!v41);
      }
      unint64_t v21 = v40;
      if (v40 == v19) {
        goto LABEL_36;
      }
    }
  }
LABEL_69:
  for (k = *(uint64_t **)(v2 + 416); k; k = (uint64_t *)*k)
  {
    uint64_t v65 = (long long *)(k + 2);
    uint64_t v45 = (void *)sub_19E1413DC(v58, (uint64_t)(k + 2), (uint64_t)&unk_19E351150, &v65)[5];
    uint64_t v46 = (const void *)k[5];
    uint64_t v65 = (long long *)(k + 2);
    uint64_t v47 = sub_19E1403B8(v59, (uint64_t)(k + 2), (uint64_t)&unk_19E351150, &v65);
    memcpy(v45, v46, 4* *((_DWORD *)v47 + 10)* *((_DWORD *)v47 + 12)* *((_DWORD *)v47 + 14)* *((_DWORD *)v47 + 16)* *((_DWORD *)v47 + 18));
  }
  BOOL v48 = espresso_plan_execute_sync() != 0;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
LABEL_72:
  }
    operator delete(__str.__r_.__value_.__l.__data_);
  return !v48;
}

void sub_19E13FB64(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  __cxa_free_exception(v16);
  if (*(char *)(v17 - 105) < 0) {
    operator delete(*(void **)(v17 - 128));
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x19E13F94CLL);
}

uint64_t sub_19E13FBF8(uint64_t a1, uint64_t a2)
{
  sub_19E304F28(a1, a2, (uint64_t)__p);
  uint64_t v8 = __p;
  uint64_t v3 = sub_19E1413DC(a1 + 360, (uint64_t)__p, (uint64_t)&unk_19E351150, (long long **)&v8);
  uint64_t v4 = v3[5];
  if ((v7 & 0x80000000) == 0) {
    return v3[5];
  }
  operator delete(__p[0]);
  return v4;
}

void sub_19E13FC78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E13FC94(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_19E304F28(a1, a2, (uint64_t)__p);
  uint64_t v5 = (void *)(a1 + 480);
  if (sub_19E140120(v5, (uint64_t)__p))
  {
    uint64_t v10 = __p;
    uint64_t v6 = sub_19E1403B8((uint64_t)v5, (uint64_t)__p, (uint64_t)&unk_19E351150, (long long **)&v10);
    long long v7 = *(_OWORD *)(v6 + 7);
    *(_OWORD *)a3 = *(_OWORD *)(v6 + 5);
    *(_OWORD *)(a3 + 16) = v7;
    *(void *)(a3 + 32) = v6[9];
    if ((v9 & 0x80000000) == 0) {
      return;
    }
LABEL_5:
    operator delete(__p[0]);
    return;
  }
  *(void *)(a3 + 32) = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  if (v9 < 0) {
    goto LABEL_5;
  }
}

void sub_19E13FD48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E13FD64(void *a1)
{
  if (a1[48])
  {
    uint64_t v2 = (void **)a1[47];
    if (v2)
    {
      do
      {
        uint64_t v11 = (void **)*v2;
        if (*((char *)v2 + 39) < 0) {
          operator delete(v2[2]);
        }
        operator delete(v2);
        uint64_t v2 = v11;
      }
      while (v11);
    }
    a1[47] = 0;
    uint64_t v3 = a1[46];
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(a1[45] + 8 * i) = 0;
    }
    a1[48] = 0;
  }
  if (a1[43])
  {
    uint64_t v5 = (void **)a1[42];
    if (v5)
    {
      do
      {
        uint64_t v12 = (void **)*v5;
        if (*((char *)v5 + 39) < 0) {
          operator delete(v5[2]);
        }
        operator delete(v5);
        uint64_t v5 = v12;
      }
      while (v12);
    }
    a1[42] = 0;
    uint64_t v6 = a1[41];
    if (v6)
    {
      for (uint64_t j = 0; j != v6; ++j)
        *(void *)(a1[40] + 8 * j) = 0;
    }
    a1[43] = 0;
  }
  if (a1[53])
  {
    uint64_t v8 = (char *)a1[52];
    if (v8)
    {
      do
      {
        uint64_t v13 = *(char **)v8;
        unint64_t v14 = (void *)*((void *)v8 + 5);
        if (v14)
        {
          *((void *)v8 + 6) = v14;
          operator delete(v14);
        }
        if (v8[39] < 0) {
          operator delete(*((void **)v8 + 2));
        }
        operator delete(v8);
        uint64_t v8 = v13;
      }
      while (v13);
    }
    a1[52] = 0;
    uint64_t v9 = a1[51];
    if (v9)
    {
      for (uint64_t k = 0; k != v9; ++k)
        *(void *)(a1[50] + 8 * k) = 0;
    }
    a1[53] = 0;
  }
}

void sub_19E13FEBC()
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Cannot declare runtime output on ANE");
  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_19E13FF04(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19E13FF18()
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "no supported");
  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_19E13FF60(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19E13FF74(const char *a1, uint64_t a2, const char *a3)
{
  sub_19E13D8EC((uint64_t)v8);
  size_t v5 = strlen(a1);
  sub_19E13DB94(v8, (uint64_t)a1, v5);
  std::ostream::operator<<();
  size_t v6 = strlen(a3);
  sub_19E13DB94(v8, (uint64_t)a3, v6);
  std::ostream::operator<<();
  std::stringbuf::str();
  v8[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v8 + *(void *)(v8[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v8[1] = MEMORY[0x1E4FBA470] + 16;
  if (v9 < 0) {
    operator delete((void *)v8[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x19F3BBB40](&v10);
}

void sub_19E1400F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E13DA90((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E14010C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E13DA90((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_19E140120(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = sub_19E13CF50((uint64_t)&v27, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  uint64_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    uint64_t v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        uint64_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v22 = v13[1];
          if (v8 == v22)
          {
            uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            if ((v23 & 0x80u) == 0) {
              uint64_t v24 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v24 = v13[3];
            }
            if (v24 == v15)
            {
              char v25 = (const void **)(v13 + 2);
              if ((v23 & 0x80) != 0)
              {
                if (!memcmp(*v25, v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                for (uint64_t i = v2; *(unsigned __int8 *)v25 == *i; ++i)
                {
                  char v25 = (const void **)((char *)v25 + 1);
                  if (!--v23) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v22 & v16) != v10)
          {
            return 0;
          }
          uint64_t result = 0;
          uint64_t v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v8 == v17)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            uint64_t v20 = (const void **)(v13 + 2);
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp(*v20, v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              for (uint64_t j = v2; *(unsigned __int8 *)v20 == *j; ++j)
              {
                uint64_t v20 = (const void **)((char *)v20 + 1);
                if (!--v18) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        uint64_t result = 0;
        uint64_t v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

uint64_t sub_19E140358()
{
  qword_1E9457D28 = 0;
  unk_1E9457D30 = "MontrealNeuralNetworkState";
  qword_1E9457D38 = 0;
  unk_1E9457D40 = 0;
  qword_1E9457D48 = (uint64_t)sub_19E1403B0;
  unk_1E9457D50 = 0u;
  unk_1E9457D60 = 0u;
  uint64_t result = _CFRuntimeRegisterClass();
  qword_1E9457D88 = result;
  return result;
}

uint64_t sub_19E1403B0(uint64_t a1)
{
  return sub_19E2533BC(a1 + 16);
}

uint64_t *sub_19E1403B8(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  unint64_t v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = sub_19E13CF50((uint64_t)v47, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    char v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      uint64_t v15 = *v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          unint64_t v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v23 = v15[1];
            if (v23 == v11)
            {
              uint64_t v24 = *((unsigned __int8 *)v15 + 39);
              if ((v24 & 0x80u) == 0) {
                uint64_t v25 = *((unsigned __int8 *)v15 + 39);
              }
              else {
                uint64_t v25 = v15[3];
              }
              if (v25 == v17)
              {
                int v26 = (const void **)(v15 + 2);
                if ((v24 & 0x80) != 0)
                {
                  if (!memcmp(*v26, v6, v15[3])) {
                    return v15;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v15 + 39)) {
                    return v15;
                  }
                  for (uint64_t i = v6; *(unsigned __int8 *)v26 == *i; ++i)
                  {
                    int v26 = (const void **)((char *)v26 + 1);
                    if (!--v24) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v23 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            uint64_t v15 = (uint64_t *)*v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = v15[1];
          if (v18 == v11)
          {
            uint64_t v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = *((unsigned __int8 *)v15 + 39);
            }
            else {
              uint64_t v20 = v15[3];
            }
            if (v20 == v17)
            {
              unint64_t v21 = (const void **)(v15 + 2);
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*v21, v6, v15[3])) {
                  return v15;
                }
              }
              else
              {
                if (!*((unsigned char *)v15 + 39)) {
                  return v15;
                }
                for (uint64_t j = v6; *(unsigned __int8 *)v21 == *j; ++j)
                {
                  unint64_t v21 = (const void **)((char *)v21 + 1);
                  if (!--v19) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          uint64_t v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  uint64_t v28 = (char *)operator new(0x50uLL);
  v47[0] = v28;
  v47[1] = a1 + 16;
  char v48 = 0;
  *(void *)uint64_t v28 = 0;
  *((void *)v28 + 1) = v11;
  uint64_t v29 = v28 + 16;
  uint64_t v30 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_19E13C2D0(v29, *(void **)v30, *((void *)v30 + 1));
  }
  else
  {
    long long v31 = *v30;
    *((void *)v28 + 4) = *((void *)v30 + 2);
    *(_OWORD *)uint64_t v29 = v31;
  }
  *((void *)v28 + 9) = 0;
  *(_OWORD *)(v28 + 56) = 0u;
  *(_OWORD *)(v28 + 40) = 0u;
  char v48 = 1;
  float v32 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v33 = *(float *)(a1 + 32);
  if (!v12 || (float)(v33 * (float)v12) < v32)
  {
    BOOL v36 = 1;
    if (v12 >= 3) {
      BOOL v36 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v37 = v36 | (2 * v12);
    unint64_t v38 = vcvtps_u32_f32(v32 / v33);
    if (v37 <= v38) {
      size_t prime = v38;
    }
    else {
      size_t prime = v37;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v40 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v40) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v40)
    {
      unint64_t v41 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v40 < 3uLL || (uint8x8_t v42 = (uint8x8_t)vcnt_s8(v40), v42.i16[0] = vaddlv_u8(v42), v42.u32[0] > 1uLL))
      {
        unint64_t v41 = std::__next_prime(v41);
      }
      else
      {
        uint64_t v43 = 1 << -(char)__clz(v41 - 1);
        if (v41 >= 2) {
          unint64_t v41 = v43;
        }
      }
      if (prime <= v41) {
        size_t prime = v41;
      }
      if (prime < *(void *)&v40) {
LABEL_68:
      }
        sub_19E13D39C(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v44 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        uint64_t v34 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        uint64_t v35 = (void *)v47[0];
        if (v34) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v4 = v11;
        uint64_t v34 = *(void **)(*(void *)a1 + 8 * v11);
        uint64_t v35 = (void *)v47[0];
        if (v34) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v4 = v44 & v11;
      uint64_t v34 = *(void **)(*(void *)a1 + 8 * (v44 & v11));
      uint64_t v35 = (void *)v47[0];
      if (v34) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *uint64_t v35 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v47[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v47[0])
    {
      unint64_t v45 = *(void *)(*(void *)v47[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v45 >= v12) {
          v45 %= v12;
        }
      }
      else
      {
        v45 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v45) = v47[0];
    }
    goto LABEL_92;
  }
  uint64_t v34 = *(void **)(*(void *)a1 + 8 * v4);
  uint64_t v35 = (void *)v47[0];
  if (!v34) {
    goto LABEL_81;
  }
LABEL_57:
  *uint64_t v35 = *v34;
  *uint64_t v34 = v47[0];
LABEL_92:
  uint64_t v15 = (uint64_t *)v47[0];
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_19E140814(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E140840((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19E140828(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E140840((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_19E140840(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16) && *(char *)(v2 + 39) < 0) {
      operator delete(*(void **)(v2 + 16));
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t *sub_19E140890(uint64_t **a1, const void **a2, uint64_t a3)
{
  unint64_t v6 = a1 + 1;
  unint64_t v5 = a1[1];
  if (v5)
  {
    int v7 = *((char *)a2 + 23);
    if (v7 >= 0) {
      size_t v8 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v8 = (size_t)a2[1];
    }
    if (v7 >= 0) {
      unint64_t v9 = a2;
    }
    else {
      unint64_t v9 = *a2;
    }
    do
    {
      while (1)
      {
        unint64_t v10 = (uint64_t **)v5;
        uint8x8_t v13 = (const void *)v5[4];
        unint64_t v11 = v5 + 4;
        unint64_t v12 = v13;
        int v14 = *((char *)v11 + 23);
        if (v14 >= 0) {
          size_t v15 = *((unsigned __int8 *)v11 + 23);
        }
        else {
          size_t v15 = v11[1];
        }
        if (v14 >= 0) {
          char v16 = v11;
        }
        else {
          char v16 = v12;
        }
        if (v15 >= v8) {
          size_t v17 = v8;
        }
        else {
          size_t v17 = v15;
        }
        int v18 = memcmp(v9, v16, v17);
        BOOL v19 = v8 < v15;
        if (v18) {
          BOOL v19 = v18 < 0;
        }
        if (!v19) {
          break;
        }
        unint64_t v5 = *v10;
        unint64_t v6 = v10;
        if (!*v10) {
          goto LABEL_26;
        }
      }
      int v20 = memcmp(v16, v9, v17);
      BOOL v21 = v15 < v8;
      if (v20) {
        BOOL v21 = v20 < 0;
      }
      if (!v21) {
        return (uint64_t *)v10;
      }
      unint64_t v5 = v10[1];
    }
    while (v5);
    unint64_t v6 = v10 + 1;
LABEL_26:
    uint64_t v22 = (uint64_t *)operator new(0x38uLL);
    uint64_t v23 = v22 + 4;
    if (*(char *)(a3 + 23) < 0) {
      goto LABEL_29;
    }
  }
  else
  {
    unint64_t v10 = a1 + 1;
    uint64_t v22 = (uint64_t *)operator new(0x38uLL);
    uint64_t v23 = v22 + 4;
    if (*(char *)(a3 + 23) < 0)
    {
LABEL_29:
      sub_19E13C2D0(v23, *(void **)a3, *(void *)(a3 + 8));
      goto LABEL_30;
    }
  }
  *(_OWORD *)uint64_t v23 = *(_OWORD *)a3;
  v23[2] = *(void *)(a3 + 16);
LABEL_30:
  *uint64_t v22 = 0;
  v22[1] = 0;
  v22[2] = (uint64_t)v10;
  *unint64_t v6 = v22;
  uint64_t v24 = (uint64_t *)**a1;
  uint64_t v25 = v22;
  if (v24)
  {
    *a1 = v24;
    uint64_t v25 = *v6;
  }
  sub_19E13C8A0(a1[1], v25);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v22;
}

void sub_19E140A28(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_19E140A3C(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  unint64_t v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = sub_19E13CF50((uint64_t)v47, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    int v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      size_t v15 = *v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          unint64_t v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v23 = v15[1];
            if (v23 == v11)
            {
              uint64_t v24 = *((unsigned __int8 *)v15 + 39);
              if ((v24 & 0x80u) == 0) {
                uint64_t v25 = *((unsigned __int8 *)v15 + 39);
              }
              else {
                uint64_t v25 = v15[3];
              }
              if (v25 == v17)
              {
                int v26 = (const void **)(v15 + 2);
                if ((v24 & 0x80) != 0)
                {
                  if (!memcmp(*v26, v6, v15[3])) {
                    return v15;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v15 + 39)) {
                    return v15;
                  }
                  for (uint64_t i = v6; *(unsigned __int8 *)v26 == *i; ++i)
                  {
                    int v26 = (const void **)((char *)v26 + 1);
                    if (!--v24) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v23 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            size_t v15 = (uint64_t *)*v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = v15[1];
          if (v18 == v11)
          {
            uint64_t v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = *((unsigned __int8 *)v15 + 39);
            }
            else {
              uint64_t v20 = v15[3];
            }
            if (v20 == v17)
            {
              BOOL v21 = (const void **)(v15 + 2);
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*v21, v6, v15[3])) {
                  return v15;
                }
              }
              else
              {
                if (!*((unsigned char *)v15 + 39)) {
                  return v15;
                }
                for (uint64_t j = v6; *(unsigned __int8 *)v21 == *j; ++j)
                {
                  BOOL v21 = (const void **)((char *)v21 + 1);
                  if (!--v19) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          size_t v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  uint64_t v28 = operator new(0x40uLL);
  v47[0] = v28;
  v47[1] = a1 + 16;
  char v48 = 0;
  void *v28 = 0;
  v28[1] = v11;
  uint64_t v29 = v28 + 2;
  uint64_t v30 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_19E13C2D0(v29, *(void **)v30, *((void *)v30 + 1));
  }
  else
  {
    long long v31 = *v30;
    void v28[4] = *((void *)v30 + 2);
    *(_OWORD *)uint64_t v29 = v31;
  }
  v28[5] = 0;
  v28[6] = 0;
  v28[7] = 0;
  char v48 = 1;
  float v32 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v33 = *(float *)(a1 + 32);
  if (!v12 || (float)(v33 * (float)v12) < v32)
  {
    BOOL v36 = 1;
    if (v12 >= 3) {
      BOOL v36 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v37 = v36 | (2 * v12);
    unint64_t v38 = vcvtps_u32_f32(v32 / v33);
    if (v37 <= v38) {
      size_t prime = v38;
    }
    else {
      size_t prime = v37;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v40 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v40) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v40)
    {
      unint64_t v41 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v40 < 3uLL || (uint8x8_t v42 = (uint8x8_t)vcnt_s8(v40), v42.i16[0] = vaddlv_u8(v42), v42.u32[0] > 1uLL))
      {
        unint64_t v41 = std::__next_prime(v41);
      }
      else
      {
        uint64_t v43 = 1 << -(char)__clz(v41 - 1);
        if (v41 >= 2) {
          unint64_t v41 = v43;
        }
      }
      if (prime <= v41) {
        size_t prime = v41;
      }
      if (prime < *(void *)&v40) {
LABEL_68:
      }
        sub_19E13D39C(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v44 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        uint64_t v34 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        uint64_t v35 = (void *)v47[0];
        if (v34) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v4 = v11;
        uint64_t v34 = *(void **)(*(void *)a1 + 8 * v11);
        uint64_t v35 = (void *)v47[0];
        if (v34) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v4 = v44 & v11;
      uint64_t v34 = *(void **)(*(void *)a1 + 8 * (v44 & v11));
      uint64_t v35 = (void *)v47[0];
      if (v34) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *uint64_t v35 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v47[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v47[0])
    {
      unint64_t v45 = *(void *)(*(void *)v47[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v45 >= v12) {
          v45 %= v12;
        }
      }
      else
      {
        v45 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v45) = v47[0];
    }
    goto LABEL_92;
  }
  uint64_t v34 = *(void **)(*(void *)a1 + 8 * v4);
  uint64_t v35 = (void *)v47[0];
  if (!v34) {
    goto LABEL_81;
  }
LABEL_57:
  *uint64_t v35 = *v34;
  *uint64_t v34 = v47[0];
LABEL_92:
  size_t v15 = (uint64_t *)v47[0];
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_19E140E90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E140EBC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19E140EA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E140EBC((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_19E140EBC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      uint64_t v3 = *(void **)(v2 + 40);
      if (v3)
      {
        *(void *)(v2 + 48) = v3;
        operator delete(v3);
      }
      if (*(char *)(v2 + 39) < 0) {
        operator delete(*(void **)(v2 + 16));
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t *sub_19E140F1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7 = (unsigned char *)a2;
  unint64_t v9 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v10 = v9;
  }
  unint64_t v11 = sub_19E13CF50((uint64_t)v51, (uint64_t *)a2, v10);
  unint64_t v12 = v11;
  unint64_t v13 = *(void *)(a1 + 8);
  if (v13)
  {
    uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v4 = v11;
      if (v11 >= v13) {
        unint64_t v4 = v11 % v13;
      }
    }
    else
    {
      unint64_t v4 = (v13 - 1) & v11;
    }
    size_t v15 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      char v16 = *v15;
      if (*v15)
      {
        char v17 = v7[23];
        if (v17 >= 0) {
          uint64_t v18 = v7[23];
        }
        else {
          uint64_t v18 = *((void *)v7 + 1);
        }
        if (v17 < 0) {
          int v7 = *(unsigned char **)v7;
        }
        if (v14.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v24 = v16[1];
            if (v24 == v12)
            {
              uint64_t v25 = *((unsigned __int8 *)v16 + 39);
              if ((v25 & 0x80u) == 0) {
                uint64_t v26 = *((unsigned __int8 *)v16 + 39);
              }
              else {
                uint64_t v26 = v16[3];
              }
              if (v26 == v18)
              {
                char v27 = (const void **)(v16 + 2);
                if ((v25 & 0x80) != 0)
                {
                  if (!memcmp(*v27, v7, v16[3])) {
                    return v16;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v16 + 39)) {
                    return v16;
                  }
                  for (uint64_t i = v7; *(unsigned __int8 *)v27 == *i; ++i)
                  {
                    char v27 = (const void **)((char *)v27 + 1);
                    if (!--v25) {
                      return v16;
                    }
                  }
                }
              }
            }
            else if ((v24 & (v13 - 1)) != v4)
            {
              goto LABEL_51;
            }
            char v16 = (uint64_t *)*v16;
            if (!v16) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v19 = v16[1];
          if (v19 == v12)
          {
            uint64_t v20 = *((unsigned __int8 *)v16 + 39);
            if ((v20 & 0x80u) == 0) {
              uint64_t v21 = *((unsigned __int8 *)v16 + 39);
            }
            else {
              uint64_t v21 = v16[3];
            }
            if (v21 == v18)
            {
              uint64_t v22 = (const void **)(v16 + 2);
              if ((v20 & 0x80) != 0)
              {
                if (!memcmp(*v22, v7, v16[3])) {
                  return v16;
                }
              }
              else
              {
                if (!*((unsigned char *)v16 + 39)) {
                  return v16;
                }
                for (uint64_t j = v7; *(unsigned __int8 *)v22 == *j; ++j)
                {
                  uint64_t v22 = (const void **)((char *)v22 + 1);
                  if (!--v20) {
                    return v16;
                  }
                }
              }
            }
          }
          else
          {
            if (v19 >= v13) {
              v19 %= v13;
            }
            if (v19 != v4) {
              break;
            }
          }
          char v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
    }
  }
LABEL_51:
  uint64_t v29 = (char *)operator new(0xD0uLL);
  v51[0] = v29;
  v51[1] = a1 + 16;
  char v52 = 0;
  *(void *)uint64_t v29 = 0;
  *((void *)v29 + 1) = v12;
  uint64_t v30 = v29 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_19E13C2D0(v30, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v30 = *(_OWORD *)a3;
    *((void *)v29 + 4) = *(void *)(a3 + 16);
  }
  long long v31 = *(_OWORD *)(a4 + 96);
  *(_OWORD *)(v29 + 152) = *(_OWORD *)(a4 + 112);
  long long v32 = *(_OWORD *)(a4 + 144);
  *(_OWORD *)(v29 + 168) = *(_OWORD *)(a4 + 128);
  *(_OWORD *)(v29 + 184) = v32;
  long long v33 = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(v29 + 88) = *(_OWORD *)(a4 + 48);
  long long v34 = *(_OWORD *)(a4 + 80);
  *(_OWORD *)(v29 + 104) = *(_OWORD *)(a4 + 64);
  *(_OWORD *)(v29 + 120) = v34;
  *(_OWORD *)(v29 + 136) = v31;
  long long v35 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v29 + 40) = *(_OWORD *)a4;
  *((void *)v29 + 25) = *(void *)(a4 + 160);
  *(_OWORD *)(v29 + 56) = v35;
  *(_OWORD *)(v29 + 72) = v33;
  char v52 = 1;
  float v36 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v37 = *(float *)(a1 + 32);
  if (!v13 || (float)(v37 * (float)v13) < v36)
  {
    BOOL v40 = v13 < 3 || (v13 & (v13 - 1)) != 0;
    unint64_t v41 = v40 | (2 * v13);
    unint64_t v42 = vcvtps_u32_f32(v36 / v37);
    if (v41 <= v42) {
      size_t prime = v42;
    }
    else {
      size_t prime = v41;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v44 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v44) {
      goto LABEL_69;
    }
    if (prime < *(void *)&v44)
    {
      unint64_t v45 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v44 < 3uLL || (uint8x8_t v46 = (uint8x8_t)vcnt_s8(v44), v46.i16[0] = vaddlv_u8(v46), v46.u32[0] > 1uLL))
      {
        unint64_t v45 = std::__next_prime(v45);
      }
      else
      {
        uint64_t v47 = 1 << -(char)__clz(v45 - 1);
        if (v45 >= 2) {
          unint64_t v45 = v47;
        }
      }
      if (prime <= v45) {
        size_t prime = v45;
      }
      if (prime < *(void *)&v44) {
LABEL_69:
      }
        sub_19E13D39C(a1, prime);
    }
    unint64_t v13 = *(void *)(a1 + 8);
    unint64_t v48 = v13 - 1;
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13)
      {
        unint64_t v4 = v12 % v13;
        unint64_t v38 = *(void **)(*(void *)a1 + 8 * (v12 % v13));
        uint64_t v39 = (void *)v51[0];
        if (v38) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v4 = v12;
        unint64_t v38 = *(void **)(*(void *)a1 + 8 * v12);
        uint64_t v39 = (void *)v51[0];
        if (v38) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v4 = v48 & v12;
      unint64_t v38 = *(void **)(*(void *)a1 + 8 * (v48 & v12));
      uint64_t v39 = (void *)v51[0];
      if (v38) {
        goto LABEL_57;
      }
    }
LABEL_82:
    *uint64_t v39 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v51[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v51[0])
    {
      unint64_t v49 = *(void *)(*(void *)v51[0] + 8);
      if ((v13 & (v13 - 1)) != 0)
      {
        if (v49 >= v13) {
          v49 %= v13;
        }
      }
      else
      {
        v49 &= v13 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v49) = v51[0];
    }
    goto LABEL_93;
  }
  unint64_t v38 = *(void **)(*(void *)a1 + 8 * v4);
  uint64_t v39 = (void *)v51[0];
  if (!v38) {
    goto LABEL_82;
  }
LABEL_57:
  *uint64_t v39 = *v38;
  *unint64_t v38 = v51[0];
LABEL_93:
  char v16 = (uint64_t *)v51[0];
  ++*(void *)(a1 + 24);
  return v16;
}

void sub_19E1413B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E140840((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19E1413C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E140840((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_19E1413DC(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  unint64_t v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = sub_19E13CF50((uint64_t)v47, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    uint8x8_t v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      size_t v15 = *v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          unint64_t v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v23 = v15[1];
            if (v23 == v11)
            {
              uint64_t v24 = *((unsigned __int8 *)v15 + 39);
              if ((v24 & 0x80u) == 0) {
                uint64_t v25 = *((unsigned __int8 *)v15 + 39);
              }
              else {
                uint64_t v25 = v15[3];
              }
              if (v25 == v17)
              {
                uint64_t v26 = (const void **)(v15 + 2);
                if ((v24 & 0x80) != 0)
                {
                  if (!memcmp(*v26, v6, v15[3])) {
                    return v15;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v15 + 39)) {
                    return v15;
                  }
                  for (uint64_t i = v6; *(unsigned __int8 *)v26 == *i; ++i)
                  {
                    uint64_t v26 = (const void **)((char *)v26 + 1);
                    if (!--v24) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v23 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            size_t v15 = (uint64_t *)*v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = v15[1];
          if (v18 == v11)
          {
            uint64_t v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = *((unsigned __int8 *)v15 + 39);
            }
            else {
              uint64_t v20 = v15[3];
            }
            if (v20 == v17)
            {
              uint64_t v21 = (const void **)(v15 + 2);
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*v21, v6, v15[3])) {
                  return v15;
                }
              }
              else
              {
                if (!*((unsigned char *)v15 + 39)) {
                  return v15;
                }
                for (uint64_t j = v6; *(unsigned __int8 *)v21 == *j; ++j)
                {
                  uint64_t v21 = (const void **)((char *)v21 + 1);
                  if (!--v19) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          size_t v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  uint64_t v28 = (char *)operator new(0xD0uLL);
  v47[0] = v28;
  v47[1] = a1 + 16;
  char v48 = 0;
  *(void *)uint64_t v28 = 0;
  *((void *)v28 + 1) = v11;
  uint64_t v29 = v28 + 16;
  uint64_t v30 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_19E13C2D0(v29, *(void **)v30, *((void *)v30 + 1));
  }
  else
  {
    long long v31 = *v30;
    *((void *)v28 + 4) = *((void *)v30 + 2);
    *(_OWORD *)uint64_t v29 = v31;
  }
  *((void *)v28 + 25) = 0;
  *(_OWORD *)(v28 + 184) = 0u;
  *(_OWORD *)(v28 + 168) = 0u;
  *(_OWORD *)(v28 + 152) = 0u;
  *(_OWORD *)(v28 + 136) = 0u;
  *(_OWORD *)(v28 + 120) = 0u;
  *(_OWORD *)(v28 + 104) = 0u;
  *(_OWORD *)(v28 + 88) = 0u;
  *(_OWORD *)(v28 + 72) = 0u;
  *(_OWORD *)(v28 + 56) = 0u;
  *(_OWORD *)(v28 + 40) = 0u;
  char v48 = 1;
  float v32 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v33 = *(float *)(a1 + 32);
  if (!v12 || (float)(v33 * (float)v12) < v32)
  {
    BOOL v36 = 1;
    if (v12 >= 3) {
      BOOL v36 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v37 = v36 | (2 * v12);
    unint64_t v38 = vcvtps_u32_f32(v32 / v33);
    if (v37 <= v38) {
      size_t prime = v38;
    }
    else {
      size_t prime = v37;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v40 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v40) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v40)
    {
      unint64_t v41 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v40 < 3uLL || (uint8x8_t v42 = (uint8x8_t)vcnt_s8(v40), v42.i16[0] = vaddlv_u8(v42), v42.u32[0] > 1uLL))
      {
        unint64_t v41 = std::__next_prime(v41);
      }
      else
      {
        uint64_t v43 = 1 << -(char)__clz(v41 - 1);
        if (v41 >= 2) {
          unint64_t v41 = v43;
        }
      }
      if (prime <= v41) {
        size_t prime = v41;
      }
      if (prime < *(void *)&v40) {
LABEL_68:
      }
        sub_19E13D39C(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v44 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        long long v34 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        long long v35 = (void *)v47[0];
        if (v34) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v4 = v11;
        long long v34 = *(void **)(*(void *)a1 + 8 * v11);
        long long v35 = (void *)v47[0];
        if (v34) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v4 = v44 & v11;
      long long v34 = *(void **)(*(void *)a1 + 8 * (v44 & v11));
      long long v35 = (void *)v47[0];
      if (v34) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *long long v35 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v47[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v47[0])
    {
      unint64_t v45 = *(void *)(*(void *)v47[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v45 >= v12) {
          v45 %= v12;
        }
      }
      else
      {
        v45 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v45) = v47[0];
    }
    goto LABEL_92;
  }
  long long v34 = *(void **)(*(void *)a1 + 8 * v4);
  long long v35 = (void *)v47[0];
  if (!v34) {
    goto LABEL_81;
  }
LABEL_57:
  *long long v35 = *v34;
  *long long v34 = v47[0];
LABEL_92:
  size_t v15 = (uint64_t *)v47[0];
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_19E141858(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E140840((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19E14186C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E140840((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t MRLNeuralNetworkCopyEvaluationResults(uint64_t a1, void *a2, void *a3, CFErrorRef *a4)
{
  v86 = a3;
  v95 = objc_alloc_init(MLPInferenceResult);
  v87 = (void *)a1;
  unint64_t OutputDimension = MRLNeuralNetworkGetOutputDimension(a1, 0);
  uint64_t v90 = 0;
  CFTypeRef v98 = 0;
  size_t v6 = 4 * OutputDimension;
  while (1)
  {
    char v97 = 0;
    int v7 = (void *)v86[2](v86, &v97);
    if (v97)
    {
      uint64_t v80 = sub_19E150D18(v95, v90, OutputDimension);
      CFTypeRef v81 = v98;
      if (!v98) {
        goto LABEL_55;
      }
      goto LABEL_54;
    }
    unint64_t v10 = v7;
    v89 = v7;
    objc_msgSend_exMRL_dataForKey_(v7, v8, @"MRLNeuralNetworkEvaluateInputDataKey", v9);
    id v91 = (id)objc_claimAutoreleasedReturnValue();
    v94 = objc_msgSend_exMRL_arrayForKey_(v10, v11, @"MRLNeuralNetworkEvaluateOutputLabelKey", v12);
    if (!objc_msgSend_length(v91, v13, v14, v15))
    {
      if (!a4) {
        goto LABEL_53;
      }
      uint64_t v82 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], v16, (uint64_t)MRLNeuralNetworkErrorDomain, 1, 0);
      goto LABEL_52;
    }
    if (!objc_msgSend_count(v94, v16, v17, v18)) {
      break;
    }
    uint64_t v93 = objc_msgSend_count(v94, v19, v20, v21);
    id v22 = a2;
    v88 = v22;
    if (a2)
    {
      uint64_t v26 = objc_msgSend_mutableCopy(v22, v23, v24, v25);
      uint64_t v29 = objc_msgSend_numberWithUnsignedInteger_(NSNumber, v27, v93, v28);
      objc_msgSend_setObject_forKeyedSubscript_(v26, v30, (uint64_t)v29, @"SequenceLength");

      long long v31 = (const void *)MRLNeuralNetworkTensorCreate(v26);
      if (v98) {
        CFRelease(v98);
      }
      CFTypeRef v98 = v31;
      id v32 = v91;
      BOOL v36 = (char *)objc_msgSend_bytes(v32, v33, v34, v35);
      unint64_t v40 = objc_msgSend_length(v32, v37, v38, v39);
      MRLNeuralNetworkTensorAppendData((uint64_t)v31, v36, v40);
      MRLNeuralNetworkSetInputTensor((uint64_t)v87, 0, (uint64_t)v31, a4);

      uint64_t v41 = (uint64_t)v87;
    }
    else
    {
      id v42 = v91;
      uint64_t v46 = objc_msgSend_bytes(v42, v43, v44, v45);
      uint64_t v41 = (uint64_t)v87;
      MRLNeuralNetworkSetInput(v87, 0, 1, v93, v46, 0);
    }
    MRLNeuralNetworkPredict(v41);
    uint64_t Output = MRLNeuralNetworkGetOutput(v41, 0);
    if (v93)
    {
      uint64_t v50 = 0;
      objc_msgSend_objectAtIndexedSubscript_(v94, v47, 0, v49);
      while (1)
        uint64_t v51 = {;
        uint64_t v55 = objc_msgSend_unsignedIntegerValue(v51, v52, v53, v54);

        v96 = 0;
        if (OutputDimension)
        {
          if ((OutputDimension & 0x8000000000000000) != 0) {
            sub_19E13D694();
          }
          v96 = operator new(v6);
          memcpy(v96, (const void *)(Output + 4 * v50 * OutputDimension), v6);
          uint64_t v56 = (float *)operator new(v6);
          memcpy(v56, v96, v6);
          unint64_t v57 = v56;
          if (OutputDimension != 1)
          {
            uint64_t v58 = v56 + 1;
            float v59 = *v56;
            uint64_t v60 = 4 * OutputDimension - 4;
            unint64_t v57 = v56;
            uint64_t v61 = v56 + 1;
            do
            {
              float v62 = *v61++;
              BOOL v63 = v59 < v62;
              float v59 = fmaxf(v59, v62);
              if (v63) {
                unint64_t v57 = v58;
              }
              uint64_t v58 = v61;
              v60 -= 4;
            }
            while (v60);
          }
          unint64_t v64 = (unint64_t)((char *)v57 - (char *)v56) >> 2;
          operator delete(v56);
        }
        else
        {
          LODWORD(v64) = 0;
        }
        p_confusionMatrix = &v95->confusionMatrix;
        p_pair1 = &v95->confusionMatrix.__tree_.__pair1_;
        left = v95->confusionMatrix.__tree_.__pair1_.__value_.__left_;
        if (left) {
          break;
        }
        int v68 = &v95->confusionMatrix.__tree_.__pair1_;
LABEL_31:
        uint64_t v70 = (char *)operator new(0x40uLL);
        *((_DWORD *)v70 + 8) = v55;
        *((void *)v70 + 7) = 0;
        *((void *)v70 + 6) = 0;
        *((void *)v70 + 5) = v70 + 48;
        *(void *)uint64_t v70 = 0;
        *((void *)v70 + 1) = 0;
        *((void *)v70 + 2) = v68;
        p_pair1->__value_.__left_ = v70;
        uint64_t v71 = *(void **)p_confusionMatrix->__tree_.__begin_node_;
        uint64_t v72 = (uint64_t *)v70;
        if (v71)
        {
          p_confusionMatrix->__tree_.__begin_node_ = v71;
          uint64_t v72 = (uint64_t *)p_pair1->__value_.__left_;
        }
        sub_19E13C8A0((uint64_t *)v95->confusionMatrix.__tree_.__pair1_.__value_.__left_, v72);
        ++v95->confusionMatrix.__tree_.__pair3_.__value_;
        uint64_t v74 = (__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<unsigned int, std::map<unsigned int, unsigned int>>, void *>>> *)(v70 + 48);
        v73 = (void *)*((void *)v70 + 6);
        if (!v73) {
          goto LABEL_36;
        }
        while (1)
        {
LABEL_38:
          while (1)
          {
            uint64_t v75 = (__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<unsigned int, std::map<unsigned int, unsigned int>>, void *>>> *)v73;
            unsigned int v76 = *((_DWORD *)v73 + 7);
            if (v76 <= v64) {
              break;
            }
            v73 = v75->__value_.__left_;
            uint64_t v74 = v75;
            if (!v75->__value_.__left_) {
              goto LABEL_42;
            }
          }
          if (v76 >= v64) {
            break;
          }
          v73 = v75[1].__value_.__left_;
          if (!v73)
          {
            uint64_t v74 = v75 + 1;
            goto LABEL_42;
          }
        }
        uint64_t v77 = v75;
LABEL_13:
        ++v77[8];
        v95->logLikelihood = v95->logLikelihood + log2f(*((float *)v96 + v55));
        operator delete(v96);
        if (++v50 == v93) {
          goto LABEL_45;
        }
        objc_msgSend_objectAtIndexedSubscript_(v94, v47, v50, v49);
      }
      while (1)
      {
        while (1)
        {
          int v68 = (__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<unsigned int, std::map<unsigned int, unsigned int>>, void *>>> *)left;
          unsigned int v69 = *((_DWORD *)left + 8);
          if (v69 <= v55) {
            break;
          }
          left = v68->__value_.__left_;
          p_pair1 = v68;
          if (!v68->__value_.__left_) {
            goto LABEL_31;
          }
        }
        if (v69 >= v55) {
          break;
        }
        left = v68[1].__value_.__left_;
        if (!left)
        {
          p_pair1 = v68 + 1;
          goto LABEL_31;
        }
      }
      uint64_t v70 = (char *)v68;
      uint64_t v74 = v68 + 6;
      v73 = v68[6].__value_.__left_;
      if (v73) {
        goto LABEL_38;
      }
LABEL_36:
      uint64_t v75 = v74;
LABEL_42:
      uint64_t v77 = operator new(0x28uLL);
      v77[7] = v64;
      v77[8] = 0;
      *(void *)uint64_t v77 = 0;
      *((void *)v77 + 1) = 0;
      *((void *)v77 + 2) = v75;
      v74->__value_.__left_ = v77;
      uint64_t v78 = **((void **)v70 + 5);
      uint64_t v79 = (uint64_t *)v77;
      if (v78)
      {
        *((void *)v70 + 5) = v78;
        uint64_t v79 = (uint64_t *)v74->__value_.__left_;
      }
      sub_19E13C8A0(*((uint64_t **)v70 + 6), v79);
      ++*((void *)v70 + 7);
      goto LABEL_13;
    }
LABEL_45:
    v90 += objc_msgSend_count(v94, v47, v48, v49);
  }
  if (!a4) {
    goto LABEL_53;
  }
  uint64_t v82 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], v19, (uint64_t)MRLNeuralNetworkErrorDomain, 2, 0);
LABEL_52:
  *a4 = (CFErrorRef)v82;
LABEL_53:

  uint64_t v80 = 0;
  CFTypeRef v81 = v98;
  if (!v98) {
    goto LABEL_55;
  }
LABEL_54:
  CFRelease(v81);
LABEL_55:

  return v80;
}

void sub_19E141E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,void *a26)
{
  sub_19E141F60((const void **)(v26 - 96));
  _Unwind_Resume(a1);
}

const void **sub_19E141F60(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  *a1 = 0;
  return a1;
}

uint64_t MRLModelCreate(const __CFDictionary *a1)
{
  std::mutex::lock(&stru_1E9457DA0);
  if (a1)
  {
    if (CFDictionaryContainsKey(a1, (const void *)kMRLModelParametersKey))
    {
      uint64_t valuePtr = 0;
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a1, (const void *)kMRLModelParameterSizeKey);
      CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
      uint64_t __dst = 0;
      CFNumberRef v3 = (const __CFNumber *)CFDictionaryGetValue(a1, (const void *)kMRLModelParametersKey);
      CFNumberGetValue(v3, kCFNumberLongLongType, &__dst);
      operator new();
    }
    if (CFDictionaryContainsKey(a1, (const void *)kMRLModelFileLocationKey))
    {
      CFStringRef v4 = (const __CFString *)CFDictionaryGetValue(a1, (const void *)kMRLModelFileLocationKey);
      CFIndex Length = CFStringGetLength(v4);
      CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
      operator new[]();
    }
  }
  std::mutex::unlock(&stru_1E9457DA0);
  return 0;
}

void sub_19E14252C(_Unwind_Exception *a1)
{
}

CFDictionaryRef sub_19E142544(const __CFDictionary *result, _DWORD *a2)
{
  if (result)
  {
    CFDictionaryRef v3 = result;
    uint64_t v8 = 0;
    uint64_t valuePtr = 0;
    if (CFDictionaryContainsKey(result, (const void *)kMRLModelLearningRateKey))
    {
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v3, (const void *)kMRLModelLearningRateKey);
      CFNumberGetValue(Value, kCFNumberFloatType, (char *)&valuePtr + 4);
      *a2 = HIDWORD(valuePtr);
    }
    if (CFDictionaryContainsKey(v3, (const void *)kMRLModelBeta1Key))
    {
      CFNumberRef v5 = (const __CFNumber *)CFDictionaryGetValue(v3, (const void *)kMRLModelBeta1Key);
      CFNumberGetValue(v5, kCFNumberFloatType, &valuePtr);
      a2[1] = valuePtr;
    }
    if (CFDictionaryContainsKey(v3, (const void *)kMRLModelBeta2Key))
    {
      CFNumberRef v6 = (const __CFNumber *)CFDictionaryGetValue(v3, (const void *)kMRLModelBeta2Key);
      CFNumberGetValue(v6, kCFNumberFloatType, (char *)&v8 + 4);
      a2[2] = HIDWORD(v8);
    }
    uint64_t result = (const __CFDictionary *)CFDictionaryContainsKey(v3, (const void *)kMRLModelEstimatorTypeKey);
    if (result)
    {
      CFNumberRef v7 = (const __CFNumber *)CFDictionaryGetValue(v3, (const void *)kMRLModelEstimatorTypeKey);
      uint64_t result = (const __CFDictionary *)CFNumberGetValue(v7, kCFNumberSInt32Type, &v8);
      a2[3] = v8;
    }
  }
  return result;
}

CFDictionaryRef sub_19E142650(const __CFDictionary *result, _DWORD *a2)
{
  if (result)
  {
    CFDictionaryRef v3 = result;
    uint64_t valuePtr = 0;
    int v7 = 0;
    if (CFDictionaryContainsKey(result, (const void *)kMRLModelHiddenNodesKey))
    {
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v3, (const void *)kMRLModelHiddenNodesKey);
      CFNumberGetValue(Value, kCFNumberSInt32Type, (char *)&valuePtr + 4);
      a2[2] = HIDWORD(valuePtr);
    }
    if (CFDictionaryContainsKey(v3, (const void *)kMRLModelInputEncodingKey))
    {
      CFNumberRef v5 = (const __CFNumber *)CFDictionaryGetValue(v3, (const void *)kMRLModelInputEncodingKey);
      CFNumberGetValue(v5, kCFNumberSInt32Type, &valuePtr);
      a2[7] = valuePtr;
    }
    uint64_t result = (const __CFDictionary *)CFDictionaryContainsKey(v3, (const void *)kMRLModelModelConfigKey);
    if (result)
    {
      CFNumberRef v6 = (const __CFNumber *)CFDictionaryGetValue(v3, (const void *)kMRLModelModelConfigKey);
      uint64_t result = (const __CFDictionary *)CFNumberGetValue(v6, kCFNumberSInt32Type, &v7);
      a2[5] = v7;
    }
  }
  return result;
}

void MRLModelCompile(int a1, int a2, const __CFDictionary *a3)
{
  std::mutex::lock(&stru_1E9457DA0);
  v10[0] = 0x3F7D70A43C23D70ALL;
  v10[1] = 1065353199;
  sub_19E142544(a3, v10);
  if (a3)
  {
    if (CFDictionaryContainsKey(a3, (const void *)kMRLModelDataKey))
    {
      CFDataRef Value = (const __CFData *)CFDictionaryGetValue(a3, (const void *)kMRLModelDataKey);
      CFDataGetLength(Value);
      CFDataGetBytePtr(Value);
      operator new();
    }
  }
  v7[0] = a1;
  v7[1] = a2;
  v7[2] = 256;
  int v9 = 1;
  uint64_t v8 = 0x2000000004;
  sub_19E142650(a3, v7);
  operator new();
}

void sub_19E1428B0(void *a1)
{
  operator delete(v1);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x19E14288CLL);
}

void sub_19E142908(_Unwind_Exception *a1)
{
}

void MRLModelInitEpoch(uint64_t a1)
{
  std::mutex::lock(&stru_1E9457DA0);
  ++*(_DWORD *)(a1 + 48);
  sub_19E170B54(a1);

  std::mutex::unlock(&stru_1E9457DA0);
}

void sub_19E142978(_Unwind_Exception *a1)
{
}

void sub_19E142990(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  if (a4 >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v61 = a4;
    while (1)
    {
      uint64_t v70 = 0;
      uint64_t v71 = 0;
      uint64_t v72 = 0;
      long long __p = 0;
      int v68 = 0;
      unsigned int v69 = 0;
      if (a3 >= 1) {
        break;
      }
LABEL_58:
      uint64_t v48 = *(void **)(a5 + 8);
      if ((unint64_t)v48 >= *(void *)(a5 + 16))
      {
        uint64_t v54 = sub_19E148D3C((char **)a5, (uint64_t)&v70);
        uint64_t v51 = a6;
      }
      else
      {
        *uint64_t v48 = 0;
        v48[1] = 0;
        v48[2] = 0;
        uint64_t v49 = v70;
        int64_t v50 = v71 - (unsigned char *)v70;
        uint64_t v51 = a6;
        if (v71 != v70)
        {
          if (v50 < 0) {
            sub_19E13D694();
          }
          char v52 = (char *)operator new(v71 - (unsigned char *)v70);
          *uint64_t v48 = v52;
          v48[1] = v52;
          uint64_t v53 = &v52[4 * (v50 >> 2)];
          v48[2] = v53;
          memcpy(v52, v49, v50);
          v48[1] = v53;
        }
        uint64_t v54 = (char *)(v48 + 3);
        *(void *)(a5 + 8) = v48 + 3;
      }
      *(void *)(a5 + 8) = v54;
      uint64_t v55 = *(void **)(v51 + 8);
      if ((unint64_t)v55 >= *(void *)(v51 + 16))
      {
        uint64_t v60 = sub_19E148D3C((char **)v51, (uint64_t)&__p);
      }
      else
      {
        void *v55 = 0;
        v55[1] = 0;
        v55[2] = 0;
        uint64_t v56 = __p;
        int64_t v57 = v68 - (unsigned char *)__p;
        if (v68 != __p)
        {
          if (v57 < 0) {
            sub_19E13D694();
          }
          uint64_t v58 = (char *)operator new(v68 - (unsigned char *)__p);
          void *v55 = v58;
          v55[1] = v58;
          float v59 = &v58[4 * (v57 >> 2)];
          v55[2] = v59;
          memcpy(v58, v56, v57);
          v55[1] = v59;
        }
        uint64_t v60 = (char *)(v55 + 3);
        *(void *)(v51 + 8) = v55 + 3;
      }
      *(void *)(v51 + 8) = v60;
      if (__p)
      {
        int v68 = (char *)__p;
        operator delete(__p);
      }
      if (v70)
      {
        uint64_t v71 = (char *)v70;
        operator delete(v70);
      }
      if (++v6 == v61) {
        return;
      }
    }
    int v7 = 0;
    uint64_t v8 = 0;
    while (1)
    {
      int v10 = (int)**(float **)(*(void *)(a1 + 8 * v6) + 8 * v8);
      if (!v10) {
        goto LABEL_8;
      }
      unint64_t v11 = v71;
      if (v71 < v72)
      {
        *(_DWORD *)uint64_t v71 = v10;
        uint64_t v12 = (uint64_t)(v11 + 4);
        goto LABEL_31;
      }
      uint8x8_t v13 = (char *)v70;
      int64_t v14 = v71 - (unsigned char *)v70;
      uint64_t v15 = (v71 - (unsigned char *)v70) >> 2;
      unint64_t v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 62) {
        goto LABEL_76;
      }
      uint64_t v17 = v72 - (unsigned char *)v70;
      if ((v72 - (unsigned char *)v70) >> 1 > v16) {
        unint64_t v16 = v17 >> 1;
      }
      unint64_t v18 = (unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v16;
      if (v18) {
        break;
      }
      uint64_t v19 = 0;
      uint64_t v20 = (int *)(4 * v15);
      *(_DWORD *)(4 * v15) = v10;
      uint64_t v12 = 4 * v15 + 4;
      if (v11 != v13) {
        goto LABEL_23;
      }
LABEL_29:
      uint64_t v70 = v20;
      uint64_t v71 = (char *)v12;
      uint64_t v72 = &v19[4 * v18];
      if (v13)
      {
        operator delete(v13);
        int v7 = v68;
      }
LABEL_31:
      uint64_t v71 = (char *)v12;
      uint64_t v30 = *(void *)(a2 + 8 * v6);
      if (v7 >= v69)
      {
        long long v31 = (char *)__p;
        int64_t v32 = v7 - (unsigned char *)__p;
        uint64_t v33 = (v7 - (unsigned char *)__p) >> 2;
        unint64_t v34 = v33 + 1;
        if ((unint64_t)(v33 + 1) >> 62) {
LABEL_76:
        }
          sub_19E13D694();
        uint64_t v35 = v69 - (unsigned char *)__p;
        if ((v69 - (unsigned char *)__p) >> 1 > v34) {
          unint64_t v34 = v35 >> 1;
        }
        if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v36 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v36 = v34;
        }
        if (v36)
        {
          if (v36 >> 62) {
LABEL_75:
          }
            sub_19E13C418();
          unint64_t v37 = operator new(4 * v36);
          uint64_t v38 = &v37[4 * v33];
          *uint64_t v38 = *(_DWORD *)(v30 + 4 * v8);
          uint64_t v9 = (uint64_t)(v38 + 1);
          if (v7 == v31) {
            goto LABEL_46;
          }
LABEL_43:
          unint64_t v39 = v7 - 4 - v31;
          if (v39 < 0xBC)
          {
            unint64_t v40 = v7;
            goto LABEL_45;
          }
          if (&v37[v32 - 4 - (v39 & 0xFFFFFFFFFFFFFFFCLL)] > &v37[v32 - 4])
          {
            unint64_t v40 = v7;
            goto LABEL_45;
          }
          if (&v7[-(v39 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v7 - 4)
          {
            unint64_t v40 = v7;
            goto LABEL_45;
          }
          if ((unint64_t)(v7 - v37 - v32) < 0x20)
          {
            unint64_t v40 = v7;
            goto LABEL_45;
          }
          uint64_t v42 = (v39 >> 2) + 1;
          uint64_t v43 = 4 * (v42 & 0x7FFFFFFFFFFFFFF8);
          unint64_t v40 = &v7[-v43];
          uint64_t v38 = (_DWORD *)((char *)v38 - v43);
          uint64_t v44 = &v37[4 * v33 - 16];
          uint64_t v45 = v7 - 16;
          uint64_t v46 = v42 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v47 = *(_OWORD *)v45;
            *(v44 - 1) = *((_OWORD *)v45 - 1);
            *uint64_t v44 = v47;
            v44 -= 2;
            v45 -= 32;
            v46 -= 8;
          }
          while (v46);
          if (v42 != (v42 & 0x7FFFFFFFFFFFFFF8))
          {
            do
            {
LABEL_45:
              int v41 = *((_DWORD *)v40 - 1);
              v40 -= 4;
              *--uint64_t v38 = v41;
            }
            while (v40 != v31);
          }
        }
        else
        {
          unint64_t v37 = 0;
          uint64_t v38 = (_DWORD *)(4 * v33);
          *(_DWORD *)(4 * v33) = *(_DWORD *)(v30 + 4 * v8);
          uint64_t v9 = 4 * v33 + 4;
          if (v7 != v31) {
            goto LABEL_43;
          }
        }
LABEL_46:
        long long __p = v38;
        int v68 = (char *)v9;
        unsigned int v69 = &v37[4 * v36];
        if (v31) {
          operator delete(v31);
        }
        goto LABEL_7;
      }
      *(_DWORD *)int v7 = *(_DWORD *)(v30 + 4 * v8);
      uint64_t v9 = (uint64_t)(v7 + 4);
LABEL_7:
      int v68 = (char *)v9;
      int v7 = (char *)v9;
LABEL_8:
      if (++v8 == a3) {
        goto LABEL_58;
      }
    }
    if (v18 >> 62) {
      goto LABEL_75;
    }
    uint64_t v19 = (char *)operator new(4 * v18);
    uint64_t v20 = (int *)&v19[4 * v15];
    *uint64_t v20 = v10;
    uint64_t v12 = (uint64_t)(v20 + 1);
    if (v11 == v13) {
      goto LABEL_29;
    }
LABEL_23:
    unint64_t v21 = v11 - 4 - v13;
    if (v21 < 0x2C) {
      goto LABEL_81;
    }
    if ((unint64_t)(v11 - &v19[v14]) < 0x20) {
      goto LABEL_81;
    }
    uint64_t v22 = (v21 >> 2) + 1;
    uint64_t v23 = 4 * (v22 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v24 = &v11[-v23];
    uint64_t v20 = (int *)((char *)v20 - v23);
    uint64_t v25 = &v19[4 * v15 - 16];
    uint64_t v26 = v11 - 16;
    uint64_t v27 = v22 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v28 = *(_OWORD *)v26;
      *((_OWORD *)v25 - 1) = *((_OWORD *)v26 - 1);
      *(_OWORD *)uint64_t v25 = v28;
      v25 -= 32;
      v26 -= 32;
      v27 -= 8;
    }
    while (v27);
    unint64_t v11 = v24;
    if (v22 != (v22 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_81:
      do
      {
        int v29 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *--uint64_t v20 = v29;
      }
      while (v11 != v13);
    }
    goto LABEL_29;
  }
}

void sub_19E142E60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  uint64_t v23 = *(void **)v21;
  if (*(void *)v21)
  {
    *(void *)(v21 + 8) = v23;
    operator delete(v23);
  }
  *(void *)(a12 + 8) = v21;
  if (__p)
  {
    operator delete(__p);
    uint64_t v24 = a20;
    if (!a20) {
LABEL_5:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v24 = a20;
    if (!a20) {
      goto LABEL_5;
    }
  }
  operator delete(v24);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E142EEC(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void MRLModelTrainBatch(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  std::mutex::lock(&stru_1E9457DA0);
  dword_1E9457D98 = *(_DWORD *)(a1 + 224);
  if (!*(unsigned char *)(a1 + 188)) {
    sub_19E168088(a1);
  }
  memset(v11, 0, sizeof(v11));
  memset(v10, 0, sizeof(v10));
  sub_19E142990(a2, a3, a4, a5, (uint64_t)v11, (uint64_t)v10);
  sub_19E16F698();
}

void sub_19E143100(_Unwind_Exception *a1)
{
}

void sub_19E143118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_19E14315C(&a18);
  sub_19E14315C(&a21);
  std::mutex::unlock(&stru_1E9457DA0);
  _Unwind_Resume(a1);
}

void **sub_19E14315C(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    CFDictionaryRef v3 = (char *)a1[1];
    CFStringRef v4 = *a1;
    if (v3 != v2)
    {
      CFNumberRef v5 = (char *)a1[1];
      do
      {
        int v7 = (void *)*((void *)v5 - 3);
        v5 -= 24;
        uint64_t v6 = v7;
        if (v7)
        {
          *((void *)v3 - 2) = v6;
          operator delete(v6);
        }
        CFDictionaryRef v3 = v5;
      }
      while (v5 != v2);
      CFStringRef v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

__CFDictionary *MRLModelEvaluate(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  std::mutex::lock(&stru_1E9457DA0);
  dword_1E9457D98 = *(_DWORD *)(a1 + 224);
  if (!*(unsigned char *)(a1 + 188)) {
    sub_19E168088(a1);
  }
  unint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  unint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  sub_19E142990(a2, a3, a4, a5, (uint64_t)&v37, (uint64_t)&v34);
  char v33 = 10;
  strcpy((char *)__p, "Evaluate: ");
  uint64_t v10 = sub_19E168518(a1);
  LODWORD(v29) = v10;
  sub_19E170008(a1, &v37, &v34, a5, 1, 0, (uint64_t)__p, v10, v29, (uint64_t)valuePtr);
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D048], MEMORY[0x1E4F1D540]);
  CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFNumberRef v13 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberFloatType, &v31);
  CFNumberRef v14 = CFNumberCreate(v12, kCFNumberIntType, valuePtr);
  CFNumberRef v15 = CFNumberCreate(v12, kCFNumberFloatType, (char *)&v31 + 4);
  CFDictionaryAddValue(Mutable, (const void *)kMRLModelErrorRateKey, v13);
  CFDictionaryAddValue(Mutable, (const void *)kMRLModelErrorCountKey, v14);
  CFDictionaryAddValue(Mutable, (const void *)kMRLModelLogProbabilityKey, v15);
  CFRelease(v13);
  CFRelease(v14);
  CFRelease(v15);
  if (v33 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v16 = (char *)v34;
  if (v34)
  {
    uint64_t v17 = v35;
    unint64_t v18 = v34;
    if (v35 != v34)
    {
      uint64_t v19 = v35;
      do
      {
        uint64_t v21 = (void *)*((void *)v19 - 3);
        v19 -= 24;
        uint64_t v20 = v21;
        if (v21)
        {
          *((void *)v17 - 2) = v20;
          operator delete(v20);
        }
        uint64_t v17 = v19;
      }
      while (v19 != v16);
      unint64_t v18 = v34;
    }
    uint64_t v35 = v16;
    operator delete(v18);
  }
  uint64_t v22 = v37;
  if (v37)
  {
    uint64_t v23 = v38;
    uint64_t v24 = v37;
    if (v38 != v37)
    {
      uint64_t v25 = v38;
      do
      {
        uint64_t v27 = (void *)*((void *)v25 - 3);
        v25 -= 24;
        uint64_t v26 = v27;
        if (v27)
        {
          *((void *)v23 - 2) = v26;
          operator delete(v26);
        }
        uint64_t v23 = v25;
      }
      while (v25 != v22);
      uint64_t v24 = v37;
    }
    uint64_t v38 = v22;
    operator delete(v24);
  }
  std::mutex::unlock(&stru_1E9457DA0);
  return Mutable;
}

void sub_19E14344C(_Unwind_Exception *a1)
{
}

void sub_19E143464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  sub_19E14315C(&a20);
  sub_19E14315C((void **)(v20 - 72));
  std::mutex::unlock(&stru_1E9457DA0);
  _Unwind_Resume(a1);
}

__CFData *MRLModelCopySerializedData(uint64_t a1)
{
  std::mutex::lock(&stru_1E9457DA0);
  Mutable = CFDataCreateMutable(0, 0);
  CFDataIncreaseLength(Mutable, 104857600);
  MutableBytePtr = CFDataGetMutableBytePtr(Mutable);
  CFStringRef v4 = fmemopen(MutableBytePtr, 0x6400000uLL, "wb");
  int v5 = sub_19E167A04(a1, v4);
  CFDataSetLength(Mutable, v5);
  fclose(v4);
  std::mutex::unlock(&stru_1E9457DA0);
  return Mutable;
}

void sub_19E143550(_Unwind_Exception *a1)
{
}

void sub_19E143568(_Unwind_Exception *a1)
{
}

void sub_19E143580(_Unwind_Exception *a1)
{
}

void sub_19E143598(_Unwind_Exception *a1)
{
}

__CFData *MRLModelCopyQuantizedSerializedData(uint64_t a1, int a2)
{
  std::mutex::lock(&stru_1E9457DA0);
  if (*(void *)(a1 + 136) != 32 || a2 != 8) {
    sub_19E2F6320(42);
  }
  Mutable = CFDataCreateMutable(0, 0);
  CFDataIncreaseLength(Mutable, 104857600);
  MutableBytePtr = CFDataGetMutableBytePtr(Mutable);
  int v7 = fmemopen(MutableBytePtr, 0x6400000uLL, "wb");
  int v8 = sub_19E167B70(a1, v7);
  CFDataSetLength(Mutable, v8);
  fclose(v7);
  std::mutex::unlock(&stru_1E9457DA0);
  return Mutable;
}

void sub_19E143668(_Unwind_Exception *a1)
{
}

void sub_19E143680(_Unwind_Exception *a1)
{
}

void sub_19E143698(_Unwind_Exception *a1)
{
}

void sub_19E1436B0(_Unwind_Exception *a1)
{
}

void sub_19E1436C8(_Unwind_Exception *a1)
{
}

uint64_t MRLModelGetOutputSize(uint64_t a1)
{
  std::mutex::lock(&stru_1E9457DA0);
  if (!a1) {
    sub_19E2F6320(14);
  }
  uint64_t v2 = (int)sub_19E168518(a1);
  std::mutex::unlock(&stru_1E9457DA0);
  return v2;
}

void sub_19E143738(_Unwind_Exception *a1)
{
}

uint64_t MRLModelGetInputSize(uint64_t a1)
{
  std::mutex::lock(&stru_1E9457DA0);
  uint64_t v2 = sub_19E16EA04(a1);
  std::mutex::unlock(&stru_1E9457DA0);
  return v2;
}

void sub_19E143798(_Unwind_Exception *a1)
{
}

void MRLModelRecognize(uint64_t a1, long long *a2, uint64_t a3, float32x4_t *a4, int a5)
{
  std::mutex::lock(&stru_1E9457DA0);
  dword_1E9457D98 = *(_DWORD *)(a1 + 224);
  if (*(unsigned char *)(a1 + 216))
  {
    sub_19E143914(a1, a2, a3, a4, 0, -1, a5);
  }
  else
  {
    if (a5) {
      sub_19E2F6320(201);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9458890, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_1E9458890))
    {
      qword_1E94588B8 = 0;
      unk_1E94588C0 = 0;
      qword_1E94588B0 = 0;
      __cxa_atexit((void (*)(void *))sub_19E142EEC, &qword_1E94588B0, &dword_19E138000);
      __cxa_guard_release(&qword_1E9458890);
    }
    sub_19E143C10(a1, a2, a3, a4, 0, (uint64_t)&qword_1E94588B0);
  }

  std::mutex::unlock(&stru_1E9457DA0);
}

void sub_19E1438DC(void *a1)
{
}

void sub_19E1438FC(_Unwind_Exception *a1)
{
}

void sub_19E143914(uint64_t a1, long long *a2, uint64_t a3, float32x4_t *a4, float32x4_t *a5, int a6, int a7)
{
  uint64_t v8 = *(int *)(a1 + 220);
  dword_1E9457D98 = *(_DWORD *)(a1 + 224);
  if (v8 < a3) {
    sub_19E2F6320(90);
  }
  sub_19E167CE4(a1, (uint64_t)"recognizeSequenceInternalFullBiDir, tokenID - activate all buffer to %d length", v8);
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  if (a3)
  {
    if (a3 < 0) {
      sub_19E13D694();
    }
    CFNumberRef v15 = operator new(4 * a3);
    memcpy(v15, a2, 4 * a3);
  }
  else
  {
    CFNumberRef v15 = 0;
  }
  uint64_t v16 = *(void *)(a1 + 176);
  sub_19E16EA0C(a1, v16);
  int v17 = *(_DWORD *)(a1 + 220) - 1;
  if (v17 >= (int)a3) {
    int v17 = a3;
  }
  long long __p = 0;
  unint64_t v37 = 0;
  uint64_t v38 = 0;
  if (v17)
  {
    uint64_t v35 = v15;
    int v18 = a6;
    uint64_t v19 = a5;
    uint64_t v20 = v17;
    if (v17 < 0) {
      sub_19E13D694();
    }
    size_t v21 = 4 * v17;
    uint64_t v22 = operator new(v21);
    long long __p = v22;
    uint64_t v38 = (char *)v22 + 4 * v20;
    bzero(v22, 4 * v20);
    unint64_t v37 = (char *)v22 + v21;
    uint64_t v23 = v20;
    if (v20 < 8)
    {
      uint64_t v24 = 0;
      a5 = v19;
      a6 = v18;
      CFNumberRef v15 = v35;
LABEL_15:
      uint64_t v29 = (int *)a2 + v24;
      uint64_t v30 = (_DWORD *)v22 + v24;
      uint64_t v31 = v23 - v24;
      do
      {
        int v32 = *v29++;
        *v30++ = v32;
        --v31;
      }
      while (v31);
      goto LABEL_17;
    }
    uint64_t v24 = v20 & 0xFFFFFFF8;
    uint64_t v25 = a2 + 1;
    uint64_t v26 = v22 + 1;
    uint64_t v27 = v24;
    a5 = v19;
    do
    {
      long long v28 = *v25;
      *(v26 - 1) = *(v25 - 1);
      *uint64_t v26 = v28;
      v25 += 2;
      v26 += 2;
      v27 -= 8;
    }
    while (v27);
    a6 = v18;
    CFNumberRef v15 = v35;
    if (v24 != v23) {
      goto LABEL_15;
    }
  }
LABEL_17:
  sub_19E16ECAC(a1, v16);
  sub_19E16DAE4(a1, (uint64_t *)&__p);
  int v33 = sub_19E168518(a1);
  if (a7)
  {
    if (!a4) {
      sub_19E2F6320(103);
    }
    if (a6 < 1) {
      sub_19E16ED20(a1, (char *)a4, (unint64_t)(v37 - (unsigned char *)__p) >> 2);
    }
    else {
      sub_19E16EE10(a1, a4, a5, a6, (unint64_t)(v37 - (unsigned char *)__p) >> 2);
    }
LABEL_25:
    unint64_t v34 = (char *)__p;
    if (!__p) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  if (!a4) {
    goto LABEL_25;
  }
  if (a6 >= 1)
  {
    sub_19E16F3F8(a1, a4, (unint64_t)a5, a6, (unint64_t)(v37 - (unsigned char *)__p) >> 2);
    goto LABEL_25;
  }
  memcpy(a4, *(const void **)(a1 + 168), 4 * v33);
  unint64_t v34 = (char *)__p;
  if (__p)
  {
LABEL_26:
    unint64_t v37 = v34;
    operator delete(v34);
  }
LABEL_27:
  if (v15) {
    operator delete(v15);
  }
}

void sub_19E143BB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  if (v15) {
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E143C10(uint64_t a1, _DWORD *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = a3;
  dword_1E9457D98 = *(_DWORD *)(a1 + 224);
  if (!*(unsigned char *)(a1 + 188))
  {
    sub_19E168088(a1);
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    if (v9) {
      goto LABEL_3;
    }
LABEL_6:
    CFAllocatorRef v12 = 0;
    goto LABEL_7;
  }
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  if (!a3) {
    goto LABEL_6;
  }
LABEL_3:
  if (v9 < 0) {
    sub_19E13D694();
  }
  CFAllocatorRef v12 = operator new(4 * v9);
  memcpy(v12, a2, 4 * v9);
LABEL_7:
  uint64_t v13 = *(void *)(a1 + 176);
  int v22 = 1;
  sub_19E16EA0C(a1, v13);
  if (v9)
  {
    if (a5)
    {
      CFNumberRef v14 = operator new(4uLL);
      *CFNumberRef v14 = *a2;
      uint64_t v20 = v14 + 1;
      size_t v21 = v14 + 1;
      long long __p = v14;
      sub_19E147708(&__p, v14, (char *)&v22);
      sub_19E16ECAC(a1, a5);
      sub_19E16CF7C(a1, (uint64_t *)&__p, a4, v13, 1, 0, a6);
      sub_19E16EC44(a1, v13, 1);
      if (__p)
      {
        uint64_t v20 = __p;
        operator delete(__p);
      }
      uint64_t v15 = v9 - 1;
      if (v15)
      {
        int v17 = a2 + 1;
        do
        {
          int v18 = operator new(4uLL);
          _DWORD *v18 = *v17;
          uint64_t v20 = v18 + 1;
          size_t v21 = v18 + 1;
          long long __p = v18;
          sub_19E147708(&__p, v18, (char *)&v22);
          sub_19E16ECAC(a1, v13);
          sub_19E16CF7C(a1, (uint64_t *)&__p, a4, v13, 1, 0, a6);
          sub_19E16EC44(a1, v13, 1);
          if (__p)
          {
            uint64_t v20 = __p;
            operator delete(__p);
          }
          ++v17;
          --v15;
        }
        while (v15);
      }
    }
    else
    {
      do
      {
        uint64_t v16 = operator new(4uLL);
        *uint64_t v16 = *a2;
        uint64_t v20 = v16 + 1;
        size_t v21 = v16 + 1;
        long long __p = v16;
        sub_19E147708(&__p, v16, (char *)&v22);
        sub_19E16ECAC(a1, v13);
        sub_19E16CF7C(a1, (uint64_t *)&__p, a4, v13, 1, 0, a6);
        sub_19E16EC44(a1, v13, 1);
        if (__p)
        {
          uint64_t v20 = __p;
          operator delete(__p);
        }
        ++a2;
        --v9;
      }
      while (v9);
    }
  }
  if (v12) {
    operator delete(v12);
  }
}

void sub_19E143E94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  if (v15) {
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

void MRLModelRecognizeVectors(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, int a5, uint64_t a6)
{
  std::mutex::lock(&stru_1E9457DA0);
  if (!a1) {
    sub_19E2F6320(992);
  }
  dword_1E9457D98 = *(_DWORD *)(a1 + 224);
  if (!a4)
  {
    int v13 = 991;
    goto LABEL_20;
  }
  if (!a2)
  {
    int v13 = 99;
LABEL_20:
    sub_19E2F6320(v13);
  }
  if (*(unsigned char *)(a1 + 216))
  {
    if (a6 >= 1)
    {
      do
      {
        sub_19E1440B8(a1, a2, a3, a4, a5);
        a4 += 8 * *(int *)(a1 + 36) * a3;
        a2 += 8 * a3;
        --a6;
      }
      while (a6);
    }
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 200);
    if (v12 && !*(_DWORD *)(v12 + 8))
    {
      sub_19E1441C8(a1, a2, a3, a6, a4, 0, a5);
    }
    else if (a6 >= 1)
    {
      do
      {
        sub_19E1441C8(a1, a2, a3, 1, a4, 0, 0);
        a4 += 8 * *(int *)(a1 + 36) * a3;
        a2 += 8 * a3;
        --a6;
      }
      while (a6);
    }
  }

  std::mutex::unlock(&stru_1E9457DA0);
}

void sub_19E144070(void *a1)
{
}

void sub_19E1440A0(_Unwind_Exception *a1)
{
}

void *sub_19E1440B8(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, char a5)
{
  int v10 = *(_DWORD *)(a1 + 220);
  dword_1E9457D98 = *(_DWORD *)(a1 + 224);
  sub_19E167CE4(a1, (uint64_t)"recognizeSequenceInternalFullBiDir, float* - activate all buffer to %d length", v10);
  uint64_t v11 = *(void *)(a1 + 176);
  sub_19E16EA0C(a1, v11);
  if (*(_DWORD *)(a1 + 220) - 1 >= (int)a3) {
    int v12 = a3;
  }
  else {
    int v12 = *(_DWORD *)(a1 + 220) - 1;
  }
  sub_19E16ECAC(a1, v11);
  sub_19E16E47C(a1, a2, a3);
  if (a5)
  {
    if (!a4) {
      sub_19E2F6320(303);
    }
    return (void *)sub_19E16ED20(a1, a4, v12);
  }
  else
  {
    CFNumberRef v14 = *(const void **)(a1 + 168);
    size_t v15 = 4 * (int)sub_19E168518(a1);
    return memcpy(a4, v14, v15);
  }
}

void sub_19E1441C8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char *a5, uint64_t a6, int a7)
{
  dword_1E9457D98 = *(_DWORD *)(a1 + 224);
  uint64_t v14 = *(void *)(a1 + 200);
  if (v14)
  {
    if (*(_DWORD *)(v14 + 28) >= a4) {
      goto LABEL_3;
    }
LABEL_29:
    sub_19E2F6320(1764);
  }
  if (a4 > 1) {
    goto LABEL_29;
  }
LABEL_3:
  if (!*(unsigned char *)(a1 + 188)) {
    sub_19E168088(a1);
  }
  uint64_t v15 = *(void *)(a1 + 176);
  int v34 = 1;
  sub_19E16EA0C(a1, v15);
  if (a3 >= 1)
  {
    uint64_t v16 = 0;
    do
    {
      int v17 = *(long long **)(a2 + 8 * v16);
      uint64_t v18 = (*(_DWORD *)(a1 + 32) * a4);
      if ((int)v18 >= 1)
      {
        uint64_t v19 = 0;
        uint64_t v20 = ***(void ***)(a1 + 208);
        if (v18 < 8) {
          goto LABEL_14;
        }
        if ((unint64_t)(v20 - (void)v17) < 0x20) {
          goto LABEL_14;
        }
        uint64_t v19 = v18 & 0x7FFFFFF8;
        size_t v21 = v17 + 1;
        int v22 = (_OWORD *)(v20 + 16);
        uint64_t v23 = v18 & 0xFFFFFFF8;
        do
        {
          long long v24 = *v21;
          *(v22 - 1) = *(v21 - 1);
          *int v22 = v24;
          v21 += 2;
          v22 += 2;
          v23 -= 8;
        }
        while (v23);
        if (v19 != v18)
        {
LABEL_14:
          uint64_t v25 = (int *)v17 + v19;
          uint64_t v26 = (_DWORD *)(v20 + 4 * v19);
          uint64_t v27 = v18 - v19;
          do
          {
            int v28 = *v25++;
            *v26++ = v28;
            --v27;
          }
          while (v27);
        }
      }
      uint64_t v29 = operator new(4uLL);
      *uint64_t v29 = 0;
      int v32 = v29 + 1;
      int v33 = v29 + 1;
      long long __p = v29;
      sub_19E147708(&__p, v29, (char *)&v34);
      if (v16 || !a6) {
        sub_19E16ECAC(a1, v15);
      }
      else {
        sub_19E16ECAC(a1, a6);
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E94588A8, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_1E94588A8))
      {
        qword_1E9458900 = 0;
        unk_1E9458908 = 0;
        qword_1E94588F8 = 0;
        __cxa_atexit((void (*)(void *))sub_19E142EEC, &qword_1E94588F8, &dword_19E138000);
        __cxa_guard_release(&qword_1E94588A8);
      }
      uint64_t v30 = a5;
      if (a7) {
        uint64_t v30 = &a5[4 * *(_DWORD *)(a1 + 36) * (int)v16];
      }
      sub_19E16CF7C(a1, (uint64_t *)&__p, v30, v15, a4, v17, (uint64_t)&qword_1E94588F8);
      sub_19E16EC44(a1, v15, 1);
      if (__p)
      {
        int v32 = __p;
        operator delete(__p);
      }
      ++v16;
    }
    while (v16 != a3);
  }
}

void sub_19E14442C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MRLModelRecognizeVectorsIncremental(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5, uint64_t a6)
{
  std::mutex::lock(&stru_1E9457DA0);
  if (!a1) {
    sub_19E2F6320(992);
  }
  dword_1E9457D98 = *(_DWORD *)(a1 + 224);
  if (*(unsigned char *)(a1 + 216))
  {
    int v14 = 456;
    goto LABEL_19;
  }
  if (!a5)
  {
    int v14 = 991;
    goto LABEL_19;
  }
  if (!a3)
  {
    int v14 = 99;
LABEL_19:
    sub_19E2F6320(v14);
  }
  uint64_t v12 = *(void *)(a1 + 200);
  if (v12 && !*(_DWORD *)(v12 + 8))
  {
    sub_19E1441C8(a1, a3, a4, a6, a5, a2, 0);
  }
  else if (a6 >= 1)
  {
    uint64_t v13 = 0;
    do
    {
      sub_19E1441C8(a1, a3, a4, 1, &a5[4 * *(_DWORD *)(a1 + 36) * (int)v13++], a2, 0);
      a3 += 8 * a4;
    }
    while (a6 != v13);
  }

  std::mutex::unlock(&stru_1E9457DA0);
}

void sub_19E144584(void *a1)
{
}

void sub_19E1445AC(_Unwind_Exception *a1)
{
}

void MRLModelRecognizeVectorsTopN(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, float32x4_t *a5, float32x4_t *a6)
{
  std::mutex::lock(&stru_1E9457DA0);
  if (!a1) {
    sub_19E2F6320(992);
  }
  dword_1E9457D98 = *(_DWORD *)(a1 + 224);
  if (!a6)
  {
    int v126 = 991;
    goto LABEL_152;
  }
  if (!a2)
  {
    int v126 = 99;
LABEL_152:
    sub_19E2F6320(v126);
  }
  if (*(unsigned char *)(a1 + 216)) {
    int v12 = *(_DWORD *)(a1 + 220);
  }
  else {
    int v12 = 2;
  }
  sub_19E167CE4(a1, (uint64_t)"MRLModelWrapper::MRLModelRecognizeVectorsTopN() float* allocate", v12);
  unsigned int v13 = sub_19E168518(a1);
  if (*(unsigned char *)(a1 + 216))
  {
    int v14 = *(_DWORD *)(a1 + 220);
    dword_1E9457D98 = *(_DWORD *)(a1 + 224);
    sub_19E167CE4(a1, (uint64_t)"recognizeSequenceInternalFullBiDir, float* - activate all buffer to %d length", v14);
    uint64_t v15 = *(void *)(a1 + 176);
    sub_19E16EA0C(a1, v15);
    sub_19E16ECAC(a1, v15);
    sub_19E16E47C(a1, a2, a3);
    uint64_t v16 = *(const void **)(a1 + 168);
    int v17 = sub_19E168518(a1);
    memcpy(a6, v16, 4 * v17);
    goto LABEL_9;
  }
  unsigned int v18 = v13;
  uint64_t v19 = *(char **)(a1 + 168);
  sub_19E1441C8(a1, a2, a3, 1, v19, 0, 0);
  uint64_t v20 = *(float ***)(a1 + 160);
  size_t v21 = *v20;
  if ((int)v18 >= 1)
  {
    if (v18 < 8 || v21 + 1 < (float *)&v19[4 * v18] && v19 < (char *)&v21[2 * v18])
    {
      uint64_t v22 = 0;
LABEL_17:
      uint64_t v23 = &v21[2 * v22 + 1];
      do
      {
        *((_DWORD *)v23 - 1) = v22;
        *uint64_t v23 = *(float *)&v19[4 * v22];
        v23 += 2;
        ++v22;
      }
      while (v18 != v22);
      goto LABEL_19;
    }
    uint64_t v22 = v18 & 0xFFFFFFF8;
    uint64_t v70 = v21 + 8;
    int32x4_t v71 = (int32x4_t)xmmword_19E351190;
    uint64_t v72 = (float32x4_t *)(v19 + 16);
    v73.i64[0] = 0x400000004;
    v73.i64[1] = 0x400000004;
    v74.i64[0] = 0x800000008;
    v74.i64[1] = 0x800000008;
    uint64_t v75 = v22;
    do
    {
      v130.val[0] = (float32x4_t)vaddq_s32(v71, v73);
      float32x4_t v76 = v72[-1];
      v130.val[1] = *v72;
      uint64_t v77 = v70 - 8;
      vst2q_f32(v77, *(float32x4x2_t *)v71.i8);
      vst2q_f32(v70, v130);
      int32x4_t v71 = vaddq_s32(v71, v74);
      v70 += 16;
      v72 += 2;
      v75 -= 8;
    }
    while (v75);
    if (v22 != v18) {
      goto LABEL_17;
    }
  }
LABEL_19:
  long long v24 = &v21[2 * a4];
  uint64_t v25 = v20[1];
  if (v24 != v25)
  {
    uint64_t v26 = v21;
    do
    {
      unint64_t v27 = ((char *)v25 - (char *)v26) >> 3;
      if (v27 < 2) {
        break;
      }
      if (v27 == 3)
      {
        float v78 = v26[3];
        float v79 = v26[1];
        float v80 = *(v25 - 1);
        if (v78 <= v79)
        {
          if (v80 > v78)
          {
            int v90 = *((_DWORD *)v26 + 2);
            v26[2] = *(v25 - 2);
            *((_DWORD *)v25 - 2) = v90;
            v26[3] = v80;
            *(v25 - 1) = v78;
            float v91 = v26[3];
            float v92 = v26[1];
            if (v91 > v92)
            {
              int v93 = *(_DWORD *)v26;
              *uint64_t v26 = v26[2];
              *((_DWORD *)v26 + 2) = v93;
              v26[1] = v91;
              v26[3] = v92;
            }
          }
        }
        else
        {
          int v81 = *(_DWORD *)v26;
          if (v80 <= v78)
          {
            *uint64_t v26 = v26[2];
            *((_DWORD *)v26 + 2) = v81;
            v26[1] = v78;
            v26[3] = v79;
            float v94 = *(v25 - 1);
            if (v94 <= v79) {
              break;
            }
            v26[2] = *(v25 - 2);
            *((_DWORD *)v25 - 2) = v81;
            v26[3] = v94;
          }
          else
          {
            *uint64_t v26 = *(v25 - 2);
            *((_DWORD *)v25 - 2) = v81;
            v26[1] = v80;
          }
          *(v25 - 1) = v79;
        }
        break;
      }
      if (v27 == 2)
      {
        float v82 = *(v25 - 1);
        float v83 = v26[1];
        if (v82 > v83)
        {
          int v84 = *(_DWORD *)v26;
          *uint64_t v26 = *(v25 - 2);
          *((_DWORD *)v25 - 2) = v84;
          v26[1] = v82;
          *(v25 - 1) = v83;
        }
        break;
      }
      if ((char *)v25 - (char *)v26 <= 63)
      {
        while (v26 != v25 - 2)
        {
          v85 = v26;
          v26 += 2;
          if (v85 != v25 && v26 != v25)
          {
            v86 = v26;
            v87 = v85;
            do
            {
              if (v86[1] > v87[1]) {
                v87 = v86;
              }
              v86 += 2;
            }
            while (v86 != v25);
            if (v87 != v85)
            {
              int v88 = *(_DWORD *)v85;
              float *v85 = *v87;
              *(_DWORD *)v87 = v88;
              int v89 = *((_DWORD *)v85 + 1);
              v85[1] = v87[1];
              *((_DWORD *)v87 + 1) = v89;
            }
          }
        }
        break;
      }
      unint64_t v28 = (unint64_t)&v26[2 * (v27 >> 1)];
      float v29 = *(float *)(v28 + 4);
      float v30 = v26[1];
      float v31 = *(v25 - 1);
      if (v29 <= v30)
      {
        if (v31 <= v29)
        {
          int v33 = 0;
          unint64_t v34 = (unint64_t)(v25 - 2);
          float v35 = v26[1];
          float v36 = *(float *)(v28 + 4);
          if (v35 <= v36) {
            goto LABEL_45;
          }
          goto LABEL_28;
        }
        float v45 = *(float *)v28;
        *(float *)unint64_t v28 = *(v25 - 2);
        *(v25 - 2) = v45;
        *(float *)(v28 + 4) = v31;
        *(v25 - 1) = v29;
        float v46 = *(float *)(v28 + 4);
        float v47 = v26[1];
        if (v46 > v47)
        {
          int v48 = *(_DWORD *)v26;
          *uint64_t v26 = *(float *)v28;
          *(_DWORD *)unint64_t v28 = v48;
          v26[1] = v46;
          *(float *)(v28 + 4) = v47;
          goto LABEL_42;
        }
      }
      else
      {
        int v32 = *(_DWORD *)v26;
        if (v31 > v29)
        {
          *uint64_t v26 = *(v25 - 2);
          *((_DWORD *)v25 - 2) = v32;
          v26[1] = v31;
          *(v25 - 1) = v30;
          int v33 = 1;
          unint64_t v34 = (unint64_t)(v25 - 2);
          float v35 = v26[1];
          float v36 = *(float *)(v28 + 4);
          if (v35 <= v36) {
            goto LABEL_45;
          }
          goto LABEL_28;
        }
        *uint64_t v26 = *(float *)v28;
        *(_DWORD *)unint64_t v28 = v32;
        v26[1] = v29;
        *(float *)(v28 + 4) = v30;
        float v49 = *(v25 - 1);
        if (v49 > v30)
        {
          *(float *)unint64_t v28 = *(v25 - 2);
          *((_DWORD *)v25 - 2) = v32;
          *(float *)(v28 + 4) = v49;
          *(v25 - 1) = v30;
LABEL_42:
          int v33 = 2;
          unint64_t v34 = (unint64_t)(v25 - 2);
          float v35 = v26[1];
          float v36 = *(float *)(v28 + 4);
          if (v35 <= v36) {
            goto LABEL_45;
          }
          goto LABEL_28;
        }
      }
      int v33 = 1;
      unint64_t v34 = (unint64_t)(v25 - 2);
      float v35 = v26[1];
      float v36 = *(float *)(v28 + 4);
      if (v35 <= v36)
      {
LABEL_45:
        unint64_t v50 = v34;
        while (1)
        {
          unint64_t v37 = v50 - 8;
          if ((float *)(v50 - 8) == v26) {
            break;
          }
          float v51 = *(float *)(v50 - 4);
          v50 -= 8;
          if (v51 > v36)
          {
            int v52 = *(_DWORD *)v26;
            *uint64_t v26 = *(float *)v37;
            *(_DWORD *)unint64_t v37 = v52;
            v26[1] = v51;
            *(float *)(v37 + 4) = v35;
            ++v33;
            uint64_t v38 = v26 + 2;
            if ((unint64_t)(v26 + 2) < v37) {
              goto LABEL_29;
            }
            goto LABEL_49;
          }
        }
        float v59 = v26 + 2;
        float v60 = *(v25 - 1);
        if (v35 <= v60)
        {
          if (v59 == (float *)v34) {
            break;
          }
          while (1)
          {
            float v61 = v59[1];
            if (v35 > v61) {
              break;
            }
            v59 += 2;
            if (v59 == (float *)v34) {
              goto LABEL_110;
            }
          }
          int v65 = *(_DWORD *)v59;
          *float v59 = *(v25 - 2);
          *((_DWORD *)v25 - 2) = v65;
          v59[1] = v60;
          *(v25 - 1) = v61;
          v59 += 2;
        }
        if (v59 == (float *)v34) {
          break;
        }
        while (1)
        {
          float v67 = v26[1];
          do
          {
            unint64_t v56 = (unint64_t)v59;
            float v68 = v59[1];
            v59 += 2;
          }
          while (v67 <= v68);
          do
          {
            float v69 = *(float *)(v34 - 4);
            v34 -= 8;
          }
          while (v67 > v69);
          if (v56 >= v34) {
            break;
          }
          int v66 = *(_DWORD *)v56;
          *(_DWORD *)unint64_t v56 = *(_DWORD *)v34;
          *(_DWORD *)unint64_t v34 = v66;
          *(float *)(v56 + 4) = v69;
          *(float *)(v34 + 4) = v68;
        }
        if (v56 > (unint64_t)v24) {
          break;
        }
        goto LABEL_82;
      }
LABEL_28:
      unint64_t v37 = v34;
      uint64_t v38 = v26 + 2;
      if ((unint64_t)(v26 + 2) >= v37)
      {
LABEL_49:
        uint64_t v41 = v38;
      }
      else
      {
LABEL_29:
        uint64_t v39 = v38;
        while (1)
        {
          float v40 = *(float *)(v28 + 4);
          do
          {
            uint64_t v41 = v39;
            float v42 = v39[1];
            v39 += 2;
          }
          while (v42 > v40);
          do
          {
            float v43 = *(float *)(v37 - 4);
            v37 -= 8;
          }
          while (v43 <= v40);
          if ((unint64_t)v41 >= v37) {
            break;
          }
          float v44 = *v41;
          *uint64_t v41 = *(float *)v37;
          *(float *)unint64_t v37 = v44;
          v41[1] = v43;
          *(float *)(v37 + 4) = v42;
          ++v33;
          if ((float *)v28 == v41) {
            unint64_t v28 = v37;
          }
        }
      }
      if (v41 != (float *)v28)
      {
        float v53 = *(float *)(v28 + 4);
        float v54 = v41[1];
        if (v53 > v54)
        {
          int v55 = *(_DWORD *)v41;
          *uint64_t v41 = *(float *)v28;
          *(_DWORD *)unint64_t v28 = v55;
          v41[1] = v53;
          *(float *)(v28 + 4) = v54;
          ++v33;
        }
      }
      if (v41 == v24) {
        break;
      }
      if (!v33)
      {
        if (v41 <= v24)
        {
          float v62 = v41 + 2;
          while (v62 != v25)
          {
            float v63 = v62[1];
            float v64 = *(v62 - 1);
            v62 += 2;
            if (v63 > v64) {
              goto LABEL_55;
            }
          }
        }
        else
        {
          while (v38 != v41)
          {
            float v57 = v38[1];
            float v58 = *(v38 - 1);
            v38 += 2;
            if (v57 > v58) {
              goto LABEL_55;
            }
          }
        }
        break;
      }
LABEL_55:
      if (v41 <= v24)
      {
        unint64_t v56 = (unint64_t)(v41 + 2);
      }
      else
      {
        uint64_t v25 = v41;
        unint64_t v56 = (unint64_t)v26;
      }
LABEL_82:
      uint64_t v26 = (float *)v56;
    }
    while (v25 != v24);
  }
LABEL_110:
  unint64_t v95 = 126 - 2 * __clz(a4);
  if (a4) {
    uint64_t v96 = v95;
  }
  else {
    uint64_t v96 = 0;
  }
  sub_19E148FB0(v21, v24, v96, 1);
  bzero(a5, 4 * a4);
  bzero(a6, 4 * a4);
  if ((int)v18 >= (int)a4) {
    uint64_t v97 = a4;
  }
  else {
    uint64_t v97 = v18;
  }
  if ((int)v97 < 1) {
    goto LABEL_9;
  }
  unint64_t v98 = (unint64_t)*v20;
  if (a5)
  {
    if (v97 >= 0xC)
    {
      uint64_t v99 = 0;
      unint64_t v106 = v98 + 8 * v97;
      BOOL v108 = v106 > (unint64_t)a6 && v98 + 4 < (unint64_t)a6->u64 + 4 * v97;
      if ((v98 >= (unint64_t)a5->u64 + 4 * v97 || v106 - 4 <= (unint64_t)a5) && !v108)
      {
        uint64_t v99 = v97 & 0x7FFFFFF8;
        v110 = (const float *)(v98 + 32);
        v111 = a5 + 1;
        v112 = a6 + 1;
        uint64_t v113 = v97 & 0xFFFFFFF8;
        do
        {
          v114 = v110 - 8;
          float32x4x2_t v128 = vld2q_f32(v114);
          float32x4x2_t v129 = vld2q_f32(v110);
          v111[-1] = v128.val[0];
          float32x4_t *v111 = v129.val[0];
          v112[-1] = v128.val[1];
          float32x4_t *v112 = v129.val[1];
          v110 += 16;
          v111 += 2;
          v112 += 2;
          v113 -= 8;
        }
        while (v113);
        if (v99 == v97) {
          goto LABEL_9;
        }
      }
    }
    else
    {
      uint64_t v99 = 0;
    }
    v100 = (__int32 *)(v98 + 8 * v99 + 4);
    v101 = &a6->i32[v99];
    v102 = &a5->i32[v99];
    uint64_t v103 = v97 - v99;
    do
    {
      *v102++ = *(v100 - 1);
      __int32 v104 = *v100;
      v100 += 2;
      *v101++ = v104;
      --v103;
    }
    while (v103);
  }
  else
  {
    if (v97 >= 0xD
      && (v98 + 8 * v97 <= (unint64_t)a6 || v98 + 4 >= (unint64_t)a6->u64 + 4 * v97))
    {
      uint64_t v115 = v97 & 7;
      if ((v97 & 7) == 0) {
        uint64_t v115 = 8;
      }
      uint64_t v105 = v97 - v115;
      v116 = (const float *)(v98 + 36);
      v117 = (unsigned long long *)&a6[1];
      uint64_t v118 = v105;
      do
      {
        v119 = v116 - 8;
        unsigned long long v120 = (unsigned __int128)vld2q_f32(v119);
        unsigned long long v121 = (unsigned __int128)vld2q_f32(v116);
        *(v117 - 1) = v120;
        unsigned long long *v117 = v121;
        v116 += 16;
        v117 += 2;
        v118 -= 8;
      }
      while (v118);
    }
    else
    {
      uint64_t v105 = 0;
    }
    v122 = (__int32 *)(v98 + 8 * v105 + 4);
    v123 = &a6->i32[v105];
    uint64_t v124 = v97 - v105;
    do
    {
      __int32 v125 = *v122;
      v122 += 2;
      *v123++ = v125;
      --v124;
    }
    while (v124);
  }
LABEL_9:

  std::mutex::unlock(&stru_1E9457DA0);
}

void sub_19E144E50(void *a1)
{
}

void sub_19E144E80(_Unwind_Exception *a1)
{
}

void MRLModelRecognizeVectorsIncrementalTopN(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, float32x4_t *a6, float32x4_t *a7)
{
  std::mutex::lock(&stru_1E9457DA0);
  if (!a1) {
    sub_19E2F6320(992);
  }
  dword_1E9457D98 = *(_DWORD *)(a1 + 224);
  if (*(unsigned char *)(a1 + 216))
  {
    int v122 = 456;
    goto LABEL_147;
  }
  if (!a7)
  {
    int v122 = 991;
    goto LABEL_147;
  }
  if (!a3)
  {
    int v122 = 99;
LABEL_147:
    sub_19E2F6320(v122);
  }
  unsigned int v14 = sub_19E168518(a1);
  uint64_t v16 = *(float ***)(a1 + 160);
  uint64_t v15 = *(char **)(a1 + 168);
  sub_19E1441C8(a1, a3, a4, 1, v15, a2, 0);
  int v17 = *v16;
  if ((int)v14 < 1) {
    goto LABEL_12;
  }
  if (v14 < 8 || v17 + 1 < (float *)&v15[4 * v14] && v15 < (char *)&v17[2 * v14])
  {
    uint64_t v18 = 0;
LABEL_10:
    uint64_t v19 = &v17[2 * v18 + 1];
    do
    {
      *((_DWORD *)v19 - 1) = v18;
      *uint64_t v19 = *(float *)&v15[4 * v18];
      v19 += 2;
      ++v18;
    }
    while (v14 != v18);
    goto LABEL_12;
  }
  uint64_t v18 = v14 & 0xFFFFFFF8;
  int v66 = v17 + 8;
  int32x4_t v67 = (int32x4_t)xmmword_19E351190;
  float v68 = (float32x4_t *)(v15 + 16);
  v69.i64[0] = 0x400000004;
  v69.i64[1] = 0x400000004;
  v70.i64[0] = 0x800000008;
  v70.i64[1] = 0x800000008;
  uint64_t v71 = v18;
  do
  {
    v126.val[0] = (float32x4_t)vaddq_s32(v67, v69);
    float32x4_t v72 = v68[-1];
    v126.val[1] = *v68;
    int32x4_t v73 = v66 - 8;
    vst2q_f32(v73, *(float32x4x2_t *)v67.i8);
    vst2q_f32(v66, v126);
    int32x4_t v67 = vaddq_s32(v67, v70);
    v66 += 16;
    v68 += 2;
    v71 -= 8;
  }
  while (v71);
  if (v18 != v14) {
    goto LABEL_10;
  }
LABEL_12:
  uint64_t v20 = &v17[2 * a5];
  size_t v21 = v16[1];
  if (v20 != v21)
  {
    uint64_t v22 = v17;
    do
    {
      unint64_t v23 = ((char *)v21 - (char *)v22) >> 3;
      if (v23 < 2) {
        break;
      }
      if (v23 == 3)
      {
        float v77 = v22[3];
        float v78 = v22[1];
        float v79 = *(v21 - 1);
        if (v77 <= v78)
        {
          if (v79 > v77)
          {
            int v86 = *((_DWORD *)v22 + 2);
            v22[2] = *(v21 - 2);
            *((_DWORD *)v21 - 2) = v86;
            v22[3] = v79;
            *(v21 - 1) = v77;
            float v87 = v22[3];
            float v88 = v22[1];
            if (v87 > v88)
            {
              int v89 = *(_DWORD *)v22;
              *uint64_t v22 = v22[2];
              *((_DWORD *)v22 + 2) = v89;
              v22[1] = v87;
              v22[3] = v88;
            }
          }
        }
        else
        {
          int v80 = *(_DWORD *)v22;
          if (v79 <= v77)
          {
            *uint64_t v22 = v22[2];
            *((_DWORD *)v22 + 2) = v80;
            v22[1] = v77;
            v22[3] = v78;
            float v90 = *(v21 - 1);
            if (v90 <= v78) {
              break;
            }
            v22[2] = *(v21 - 2);
            *((_DWORD *)v21 - 2) = v80;
            v22[3] = v90;
          }
          else
          {
            *uint64_t v22 = *(v21 - 2);
            *((_DWORD *)v21 - 2) = v80;
            v22[1] = v79;
          }
          *(v21 - 1) = v78;
        }
        break;
      }
      if (v23 == 2)
      {
        float v74 = *(v21 - 1);
        float v75 = v22[1];
        if (v74 > v75)
        {
          int v76 = *(_DWORD *)v22;
          *uint64_t v22 = *(v21 - 2);
          *((_DWORD *)v21 - 2) = v76;
          v22[1] = v74;
          *(v21 - 1) = v75;
        }
        break;
      }
      if ((char *)v21 - (char *)v22 <= 63)
      {
        while (v22 != v21 - 2)
        {
          int v81 = v22;
          v22 += 2;
          if (v81 != v21 && v22 != v21)
          {
            float v82 = v22;
            float v83 = v81;
            do
            {
              if (v82[1] > v83[1]) {
                float v83 = v82;
              }
              v82 += 2;
            }
            while (v82 != v21);
            if (v83 != v81)
            {
              int v84 = *(_DWORD *)v81;
              *int v81 = *v83;
              *(_DWORD *)float v83 = v84;
              int v85 = *((_DWORD *)v81 + 1);
              v81[1] = v83[1];
              *((_DWORD *)v83 + 1) = v85;
            }
          }
        }
        break;
      }
      unint64_t v24 = (unint64_t)&v22[2 * (v23 >> 1)];
      float v25 = *(float *)(v24 + 4);
      float v26 = v22[1];
      float v27 = *(v21 - 1);
      if (v25 <= v26)
      {
        if (v27 <= v25)
        {
          int v29 = 0;
          unint64_t v30 = (unint64_t)(v21 - 2);
          float v31 = v22[1];
          float v32 = *(float *)(v24 + 4);
          if (v31 <= v32) {
            goto LABEL_38;
          }
          goto LABEL_21;
        }
        float v41 = *(float *)v24;
        *(float *)unint64_t v24 = *(v21 - 2);
        *(v21 - 2) = v41;
        *(float *)(v24 + 4) = v27;
        *(v21 - 1) = v25;
        float v42 = *(float *)(v24 + 4);
        float v43 = v22[1];
        if (v42 > v43)
        {
          int v44 = *(_DWORD *)v22;
          *uint64_t v22 = *(float *)v24;
          *(_DWORD *)unint64_t v24 = v44;
          v22[1] = v42;
          *(float *)(v24 + 4) = v43;
          goto LABEL_35;
        }
      }
      else
      {
        int v28 = *(_DWORD *)v22;
        if (v27 > v25)
        {
          *uint64_t v22 = *(v21 - 2);
          *((_DWORD *)v21 - 2) = v28;
          v22[1] = v27;
          *(v21 - 1) = v26;
          int v29 = 1;
          unint64_t v30 = (unint64_t)(v21 - 2);
          float v31 = v22[1];
          float v32 = *(float *)(v24 + 4);
          if (v31 <= v32) {
            goto LABEL_38;
          }
          goto LABEL_21;
        }
        *uint64_t v22 = *(float *)v24;
        *(_DWORD *)unint64_t v24 = v28;
        v22[1] = v25;
        *(float *)(v24 + 4) = v26;
        float v45 = *(v21 - 1);
        if (v45 > v26)
        {
          *(float *)unint64_t v24 = *(v21 - 2);
          *((_DWORD *)v21 - 2) = v28;
          *(float *)(v24 + 4) = v45;
          *(v21 - 1) = v26;
LABEL_35:
          int v29 = 2;
          unint64_t v30 = (unint64_t)(v21 - 2);
          float v31 = v22[1];
          float v32 = *(float *)(v24 + 4);
          if (v31 <= v32) {
            goto LABEL_38;
          }
          goto LABEL_21;
        }
      }
      int v29 = 1;
      unint64_t v30 = (unint64_t)(v21 - 2);
      float v31 = v22[1];
      float v32 = *(float *)(v24 + 4);
      if (v31 <= v32)
      {
LABEL_38:
        unint64_t v46 = v30;
        while (1)
        {
          unint64_t v33 = v46 - 8;
          if ((float *)(v46 - 8) == v22) {
            break;
          }
          float v47 = *(float *)(v46 - 4);
          v46 -= 8;
          if (v47 > v32)
          {
            int v48 = *(_DWORD *)v22;
            *uint64_t v22 = *(float *)v33;
            *(_DWORD *)unint64_t v33 = v48;
            v22[1] = v47;
            *(float *)(v33 + 4) = v31;
            ++v29;
            unint64_t v34 = v22 + 2;
            if ((unint64_t)(v22 + 2) < v33) {
              goto LABEL_22;
            }
            goto LABEL_42;
          }
        }
        int v55 = v22 + 2;
        float v56 = *(v21 - 1);
        if (v31 <= v56)
        {
          if (v55 == (float *)v30) {
            break;
          }
          while (1)
          {
            float v57 = v55[1];
            if (v31 > v57) {
              break;
            }
            v55 += 2;
            if (v55 == (float *)v30) {
              goto LABEL_102;
            }
          }
          int v61 = *(_DWORD *)v55;
          float *v55 = *(v21 - 2);
          *((_DWORD *)v21 - 2) = v61;
          v55[1] = v56;
          *(v21 - 1) = v57;
          v55 += 2;
        }
        if (v55 == (float *)v30) {
          break;
        }
        while (1)
        {
          float v62 = v22[1];
          do
          {
            unint64_t v52 = (unint64_t)v55;
            float v63 = v55[1];
            v55 += 2;
          }
          while (v62 <= v63);
          do
          {
            float v64 = *(float *)(v30 - 4);
            v30 -= 8;
          }
          while (v62 > v64);
          if (v52 >= v30) {
            break;
          }
          int v65 = *(_DWORD *)v52;
          *(_DWORD *)unint64_t v52 = *(_DWORD *)v30;
          *(_DWORD *)unint64_t v30 = v65;
          *(float *)(v52 + 4) = v64;
          *(float *)(v30 + 4) = v63;
        }
        if (v52 > (unint64_t)v20) {
          break;
        }
        goto LABEL_74;
      }
LABEL_21:
      unint64_t v33 = v30;
      unint64_t v34 = v22 + 2;
      if ((unint64_t)(v22 + 2) >= v33)
      {
LABEL_42:
        unint64_t v37 = v34;
      }
      else
      {
LABEL_22:
        float v35 = v34;
        while (1)
        {
          float v36 = *(float *)(v24 + 4);
          do
          {
            unint64_t v37 = v35;
            float v38 = v35[1];
            v35 += 2;
          }
          while (v38 > v36);
          do
          {
            float v39 = *(float *)(v33 - 4);
            v33 -= 8;
          }
          while (v39 <= v36);
          if ((unint64_t)v37 >= v33) {
            break;
          }
          float v40 = *v37;
          float *v37 = *(float *)v33;
          *(float *)unint64_t v33 = v40;
          v37[1] = v39;
          *(float *)(v33 + 4) = v38;
          ++v29;
          if ((float *)v24 == v37) {
            unint64_t v24 = v33;
          }
        }
      }
      if (v37 != (float *)v24)
      {
        float v49 = *(float *)(v24 + 4);
        float v50 = v37[1];
        if (v49 > v50)
        {
          int v51 = *(_DWORD *)v37;
          float *v37 = *(float *)v24;
          *(_DWORD *)unint64_t v24 = v51;
          v37[1] = v49;
          *(float *)(v24 + 4) = v50;
          ++v29;
        }
      }
      if (v37 == v20) {
        break;
      }
      if (!v29)
      {
        if (v37 <= v20)
        {
          float v58 = v37 + 2;
          while (v58 != v21)
          {
            float v59 = v58[1];
            float v60 = *(v58 - 1);
            v58 += 2;
            if (v59 > v60) {
              goto LABEL_48;
            }
          }
        }
        else
        {
          while (v34 != v37)
          {
            float v53 = v34[1];
            float v54 = *(v34 - 1);
            v34 += 2;
            if (v53 > v54) {
              goto LABEL_48;
            }
          }
        }
        break;
      }
LABEL_48:
      if (v37 <= v20)
      {
        unint64_t v52 = (unint64_t)(v37 + 2);
      }
      else
      {
        size_t v21 = v37;
        unint64_t v52 = (unint64_t)v22;
      }
LABEL_74:
      uint64_t v22 = (float *)v52;
    }
    while (v21 != v20);
  }
LABEL_102:
  unint64_t v91 = 126 - 2 * __clz(a5);
  if (a5) {
    uint64_t v92 = v91;
  }
  else {
    uint64_t v92 = 0;
  }
  sub_19E14A090(v17, v20, v92, 1);
  bzero(a6, 4 * a5);
  bzero(a7, 4 * a5);
  if ((int)v14 >= (int)a5) {
    uint64_t v93 = a5;
  }
  else {
    uint64_t v93 = v14;
  }
  if ((int)v93 >= 1)
  {
    unint64_t v94 = (unint64_t)*v16;
    if (a6)
    {
      if (v93 >= 0xC)
      {
        uint64_t v95 = 0;
        unint64_t v102 = v94 + 8 * v93;
        BOOL v104 = v102 > (unint64_t)a7 && v94 + 4 < (unint64_t)a7->u64 + 4 * v93;
        if ((v94 >= (unint64_t)a6->u64 + 4 * v93 || v102 - 4 <= (unint64_t)a6) && !v104)
        {
          uint64_t v95 = v93 & 0x7FFFFFF8;
          unint64_t v106 = (const float *)(v94 + 32);
          v107 = a6 + 1;
          BOOL v108 = a7 + 1;
          uint64_t v109 = v93 & 0xFFFFFFF8;
          do
          {
            v110 = v106 - 8;
            float32x4x2_t v124 = vld2q_f32(v110);
            float32x4x2_t v125 = vld2q_f32(v106);
            v107[-1] = v124.val[0];
            float32x4_t *v107 = v125.val[0];
            v108[-1] = v124.val[1];
            *BOOL v108 = v125.val[1];
            v106 += 16;
            v107 += 2;
            v108 += 2;
            v109 -= 8;
          }
          while (v109);
          if (v95 == v93) {
            goto LABEL_140;
          }
        }
      }
      else
      {
        uint64_t v95 = 0;
      }
      uint64_t v96 = (__int32 *)(v94 + 8 * v95 + 4);
      uint64_t v97 = &a7->i32[v95];
      unint64_t v98 = &a6->i32[v95];
      uint64_t v99 = v93 - v95;
      do
      {
        *v98++ = *(v96 - 1);
        __int32 v100 = *v96;
        v96 += 2;
        *v97++ = v100;
        --v99;
      }
      while (v99);
    }
    else
    {
      if (v93 >= 0xD
        && (v94 + 8 * v93 <= (unint64_t)a7 || v94 + 4 >= (unint64_t)a7->u64 + 4 * v93))
      {
        uint64_t v111 = v93 & 7;
        if ((v93 & 7) == 0) {
          uint64_t v111 = 8;
        }
        uint64_t v101 = v93 - v111;
        v112 = (const float *)(v94 + 36);
        uint64_t v113 = (unsigned long long *)&a7[1];
        uint64_t v114 = v101;
        do
        {
          uint64_t v115 = v112 - 8;
          unsigned long long v116 = (unsigned __int128)vld2q_f32(v115);
          unsigned long long v117 = (unsigned __int128)vld2q_f32(v112);
          *(v113 - 1) = v116;
          *uint64_t v113 = v117;
          v112 += 16;
          v113 += 2;
          v114 -= 8;
        }
        while (v114);
      }
      else
      {
        uint64_t v101 = 0;
      }
      uint64_t v118 = (__int32 *)(v94 + 8 * v101 + 4);
      v119 = &a7->i32[v101];
      uint64_t v120 = v93 - v101;
      do
      {
        __int32 v121 = *v118;
        v118 += 2;
        *v119++ = v121;
        --v120;
      }
      while (v120);
    }
  }
LABEL_140:

  std::mutex::unlock(&stru_1E9457DA0);
}

void sub_19E1456A8(void *a1)
{
}

void sub_19E1456D4(_Unwind_Exception *a1)
{
}

void MRLModelRecognizeTopN(uint64_t a1, long long *a2, uint64_t a3, unint64_t a4, float32x4_t *a5, float32x4_t *a6, int a7)
{
  std::mutex::lock(&stru_1E9457DA0);
  dword_1E9457D98 = *(_DWORD *)(a1 + 224);
  unsigned int v14 = sub_19E168518(a1);
  if (*(unsigned char *)(a1 + 216))
  {
    sub_19E169788(a1);
    if (*(unsigned char *)(a1 + 216)) {
      int v15 = *(_DWORD *)(a1 + 220);
    }
    else {
      int v15 = 2;
    }
    sub_19E167CE4(a1, (uint64_t)"MRLModelWrapper::MRLModelRecognizeTopN() token allocate", v15);
    sub_19E143914(a1, a2, a3, a6, a5, a4, a7);
    goto LABEL_81;
  }
  if (a7) {
    sub_19E2F6320(204);
  }
  unsigned int v16 = v14;
  if (!*(unsigned char *)(a1 + 188)) {
    sub_19E168088(a1);
  }
  int v17 = *(float32x4_t **)(a1 + 168);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9458898, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1E9458898))
  {
    qword_1E94588D0 = 0;
    unk_1E94588D8 = 0;
    qword_1E94588C8 = 0;
    __cxa_atexit((void (*)(void *))sub_19E142EEC, &qword_1E94588C8, &dword_19E138000);
    __cxa_guard_release(&qword_1E9458898);
  }
  sub_19E143C10(a1, a2, a3, v17, 0, (uint64_t)&qword_1E94588C8);
  uint64_t v18 = *(float ***)(a1 + 160);
  uint64_t v19 = *v18;
  if ((int)v16 >= 1)
  {
    if (v16 < 8 || v19 + 1 < &v17->f32[v16] && v17 < (float32x4_t *)&v19[2 * v16])
    {
      uint64_t v20 = 0;
LABEL_13:
      size_t v21 = &v19[2 * v20 + 1];
      do
      {
        *((_DWORD *)v21 - 1) = v20;
        float *v21 = v17->f32[v20];
        v21 += 2;
        ++v20;
      }
      while (v16 != v20);
      goto LABEL_15;
    }
    uint64_t v20 = v16 & 0xFFFFFFF8;
    float v68 = v19 + 8;
    int32x4_t v69 = (int32x4_t)xmmword_19E351190;
    int32x4_t v70 = v17 + 1;
    v71.i64[0] = 0x400000004;
    v71.i64[1] = 0x400000004;
    v72.i64[0] = 0x800000008;
    v72.i64[1] = 0x800000008;
    uint64_t v73 = v20;
    do
    {
      v140.val[0] = (float32x4_t)vaddq_s32(v69, v71);
      float32x4_t v74 = v70[-1];
      v140.val[1] = *v70;
      float v75 = v68 - 8;
      vst2q_f32(v75, *(float32x4x2_t *)v69.i8);
      vst2q_f32(v68, v140);
      int32x4_t v69 = vaddq_s32(v69, v72);
      v68 += 16;
      v70 += 2;
      v73 -= 8;
    }
    while (v73);
    if (v20 != v16) {
      goto LABEL_13;
    }
  }
LABEL_15:
  uint64_t v22 = &v19[2 * a4];
  unint64_t v23 = v18[1];
  if (v22 != v23)
  {
    unint64_t v24 = v19;
    do
    {
      unint64_t v25 = ((char *)v23 - (char *)v24) >> 3;
      if (v25 < 2) {
        break;
      }
      if (v25 == 3)
      {
        float v76 = v24[3];
        float v77 = v24[1];
        float v78 = *(v23 - 1);
        if (v76 <= v77)
        {
          if (v78 > v76)
          {
            int v88 = *((_DWORD *)v24 + 2);
            v24[2] = *(v23 - 2);
            *((_DWORD *)v23 - 2) = v88;
            v24[3] = v78;
            *(v23 - 1) = v76;
            float v89 = v24[3];
            float v90 = v24[1];
            if (v89 > v90)
            {
              int v91 = *(_DWORD *)v24;
              *unint64_t v24 = v24[2];
              *((_DWORD *)v24 + 2) = v91;
              v24[1] = v89;
              v24[3] = v90;
            }
          }
        }
        else
        {
          int v79 = *(_DWORD *)v24;
          if (v78 <= v76)
          {
            *unint64_t v24 = v24[2];
            *((_DWORD *)v24 + 2) = v79;
            v24[1] = v76;
            v24[3] = v77;
            float v92 = *(v23 - 1);
            if (v92 <= v77) {
              break;
            }
            v24[2] = *(v23 - 2);
            *((_DWORD *)v23 - 2) = v79;
            v24[3] = v92;
          }
          else
          {
            *unint64_t v24 = *(v23 - 2);
            *((_DWORD *)v23 - 2) = v79;
            v24[1] = v78;
          }
          *(v23 - 1) = v77;
        }
        break;
      }
      if (v25 == 2)
      {
        float v80 = *(v23 - 1);
        float v81 = v24[1];
        if (v80 > v81)
        {
          int v82 = *(_DWORD *)v24;
          *unint64_t v24 = *(v23 - 2);
          *((_DWORD *)v23 - 2) = v82;
          v24[1] = v80;
          *(v23 - 1) = v81;
        }
        break;
      }
      if ((char *)v23 - (char *)v24 <= 63)
      {
        while (v24 != v23 - 2)
        {
          float v83 = v24;
          v24 += 2;
          if (v83 != v23 && v24 != v23)
          {
            int v84 = v24;
            int v85 = v83;
            do
            {
              if (v84[1] > v85[1]) {
                int v85 = v84;
              }
              v84 += 2;
            }
            while (v84 != v23);
            if (v85 != v83)
            {
              int v86 = *(_DWORD *)v83;
              *float v83 = *v85;
              *(_DWORD *)int v85 = v86;
              int v87 = *((_DWORD *)v83 + 1);
              v83[1] = v85[1];
              *((_DWORD *)v85 + 1) = v87;
            }
          }
        }
        break;
      }
      unint64_t v26 = (unint64_t)&v24[2 * (v25 >> 1)];
      float v27 = *(float *)(v26 + 4);
      float v28 = v24[1];
      float v29 = *(v23 - 1);
      if (v27 <= v28)
      {
        if (v29 <= v27)
        {
          int v31 = 0;
          unint64_t v32 = (unint64_t)(v23 - 2);
          float v33 = v24[1];
          float v34 = *(float *)(v26 + 4);
          if (v33 <= v34) {
            goto LABEL_41;
          }
          goto LABEL_24;
        }
        float v43 = *(float *)v26;
        *(float *)unint64_t v26 = *(v23 - 2);
        *(v23 - 2) = v43;
        *(float *)(v26 + 4) = v29;
        *(v23 - 1) = v27;
        float v44 = *(float *)(v26 + 4);
        float v45 = v24[1];
        if (v44 > v45)
        {
          int v46 = *(_DWORD *)v24;
          *unint64_t v24 = *(float *)v26;
          *(_DWORD *)unint64_t v26 = v46;
          v24[1] = v44;
          *(float *)(v26 + 4) = v45;
          goto LABEL_38;
        }
      }
      else
      {
        int v30 = *(_DWORD *)v24;
        if (v29 > v27)
        {
          *unint64_t v24 = *(v23 - 2);
          *((_DWORD *)v23 - 2) = v30;
          v24[1] = v29;
          *(v23 - 1) = v28;
          int v31 = 1;
          unint64_t v32 = (unint64_t)(v23 - 2);
          float v33 = v24[1];
          float v34 = *(float *)(v26 + 4);
          if (v33 <= v34) {
            goto LABEL_41;
          }
          goto LABEL_24;
        }
        *unint64_t v24 = *(float *)v26;
        *(_DWORD *)unint64_t v26 = v30;
        v24[1] = v27;
        *(float *)(v26 + 4) = v28;
        float v47 = *(v23 - 1);
        if (v47 > v28)
        {
          *(float *)unint64_t v26 = *(v23 - 2);
          *((_DWORD *)v23 - 2) = v30;
          *(float *)(v26 + 4) = v47;
          *(v23 - 1) = v28;
LABEL_38:
          int v31 = 2;
          unint64_t v32 = (unint64_t)(v23 - 2);
          float v33 = v24[1];
          float v34 = *(float *)(v26 + 4);
          if (v33 <= v34) {
            goto LABEL_41;
          }
          goto LABEL_24;
        }
      }
      int v31 = 1;
      unint64_t v32 = (unint64_t)(v23 - 2);
      float v33 = v24[1];
      float v34 = *(float *)(v26 + 4);
      if (v33 <= v34)
      {
LABEL_41:
        unint64_t v48 = v32;
        while (1)
        {
          unint64_t v35 = v48 - 8;
          if ((float *)(v48 - 8) == v24) {
            break;
          }
          float v49 = *(float *)(v48 - 4);
          v48 -= 8;
          if (v49 > v34)
          {
            int v50 = *(_DWORD *)v24;
            *unint64_t v24 = *(float *)v35;
            *(_DWORD *)unint64_t v35 = v50;
            v24[1] = v49;
            *(float *)(v35 + 4) = v33;
            ++v31;
            float v36 = v24 + 2;
            if ((unint64_t)(v24 + 2) < v35) {
              goto LABEL_25;
            }
            goto LABEL_45;
          }
        }
        float v57 = v24 + 2;
        float v58 = *(v23 - 1);
        if (v33 <= v58)
        {
          if (v57 == (float *)v32) {
            break;
          }
          while (1)
          {
            float v59 = v57[1];
            if (v33 > v59) {
              break;
            }
            v57 += 2;
            if (v57 == (float *)v32) {
              goto LABEL_110;
            }
          }
          int v63 = *(_DWORD *)v57;
          *float v57 = *(v23 - 2);
          *((_DWORD *)v23 - 2) = v63;
          v57[1] = v58;
          *(v23 - 1) = v59;
          v57 += 2;
        }
        if (v57 == (float *)v32) {
          break;
        }
        while (1)
        {
          float v64 = v24[1];
          do
          {
            unint64_t v54 = (unint64_t)v57;
            float v65 = v57[1];
            v57 += 2;
          }
          while (v64 <= v65);
          do
          {
            float v66 = *(float *)(v32 - 4);
            v32 -= 8;
          }
          while (v64 > v66);
          if (v54 >= v32) {
            break;
          }
          int v67 = *(_DWORD *)v54;
          *(_DWORD *)unint64_t v54 = *(_DWORD *)v32;
          *(_DWORD *)unint64_t v32 = v67;
          *(float *)(v54 + 4) = v66;
          *(float *)(v32 + 4) = v65;
        }
        if (v54 > (unint64_t)v22) {
          break;
        }
        goto LABEL_77;
      }
LABEL_24:
      unint64_t v35 = v32;
      float v36 = v24 + 2;
      if ((unint64_t)(v24 + 2) >= v35)
      {
LABEL_45:
        float v39 = v36;
      }
      else
      {
LABEL_25:
        unint64_t v37 = v36;
        while (1)
        {
          float v38 = *(float *)(v26 + 4);
          do
          {
            float v39 = v37;
            float v40 = v37[1];
            v37 += 2;
          }
          while (v40 > v38);
          do
          {
            float v41 = *(float *)(v35 - 4);
            v35 -= 8;
          }
          while (v41 <= v38);
          if ((unint64_t)v39 >= v35) {
            break;
          }
          float v42 = *v39;
          *float v39 = *(float *)v35;
          *(float *)unint64_t v35 = v42;
          v39[1] = v41;
          *(float *)(v35 + 4) = v40;
          ++v31;
          if ((float *)v26 == v39) {
            unint64_t v26 = v35;
          }
        }
      }
      if (v39 != (float *)v26)
      {
        float v51 = *(float *)(v26 + 4);
        float v52 = v39[1];
        if (v51 > v52)
        {
          int v53 = *(_DWORD *)v39;
          *float v39 = *(float *)v26;
          *(_DWORD *)unint64_t v26 = v53;
          v39[1] = v51;
          *(float *)(v26 + 4) = v52;
          ++v31;
        }
      }
      if (v39 == v22) {
        break;
      }
      if (!v31)
      {
        if (v39 <= v22)
        {
          float v60 = v39 + 2;
          while (v60 != v23)
          {
            float v61 = v60[1];
            float v62 = *(v60 - 1);
            v60 += 2;
            if (v61 > v62) {
              goto LABEL_51;
            }
          }
        }
        else
        {
          while (v36 != v39)
          {
            float v55 = v36[1];
            float v56 = *(v36 - 1);
            v36 += 2;
            if (v55 > v56) {
              goto LABEL_51;
            }
          }
        }
        break;
      }
LABEL_51:
      if (v39 <= v22)
      {
        unint64_t v54 = (unint64_t)(v39 + 2);
      }
      else
      {
        unint64_t v23 = v39;
        unint64_t v54 = (unint64_t)v24;
      }
LABEL_77:
      unint64_t v24 = (float *)v54;
    }
    while (v23 != v22);
  }
LABEL_110:
  unint64_t v93 = 126 - 2 * __clz(a4);
  if (a4) {
    uint64_t v94 = v93;
  }
  else {
    uint64_t v94 = 0;
  }
  sub_19E14B01C(v19, v22, v94, 1);
  bzero(a5, 4 * a4);
  bzero(a6, 4 * a4);
  if ((int)v16 >= (int)a4) {
    uint64_t v95 = a4;
  }
  else {
    uint64_t v95 = v16;
  }
  if ((int)v95 < 1) {
    goto LABEL_81;
  }
  if (a5)
  {
    unint64_t v96 = (unint64_t)*v18;
    if (a6)
    {
      if (v95 >= 0xC)
      {
        uint64_t v97 = 0;
        unint64_t v106 = v96 + 8 * v95;
        BOOL v108 = v106 > (unint64_t)a6 && v96 + 4 < (unint64_t)a6->u64 + 4 * v95;
        if ((v96 >= (unint64_t)a5->u64 + 4 * v95 || v106 - 4 <= (unint64_t)a5) && !v108)
        {
          uint64_t v97 = v95 & 0x7FFFFFF8;
          v110 = (const float *)(v96 + 32);
          uint64_t v111 = a5 + 1;
          v112 = a6 + 1;
          uint64_t v113 = v95 & 0xFFFFFFF8;
          do
          {
            uint64_t v114 = v110 - 8;
            float32x4x2_t v138 = vld2q_f32(v114);
            float32x4x2_t v139 = vld2q_f32(v110);
            v111[-1] = v138.val[0];
            float32x4_t *v111 = v139.val[0];
            v112[-1] = v138.val[1];
            float32x4_t *v112 = v139.val[1];
            v110 += 16;
            v111 += 2;
            v112 += 2;
            v113 -= 8;
          }
          while (v113);
          if (v97 == v95) {
            goto LABEL_81;
          }
        }
      }
      else
      {
        uint64_t v97 = 0;
      }
      unint64_t v98 = (__int32 *)(v96 + 8 * v97 + 4);
      uint64_t v99 = &a6->i32[v97];
      __int32 v100 = &a5->i32[v97];
      uint64_t v101 = v95 - v97;
      do
      {
        *v100++ = *(v98 - 1);
        __int32 v102 = *v98;
        v98 += 2;
        *v99++ = v102;
        --v101;
      }
      while (v101);
    }
    else
    {
      if (v95 >= 0xD
        && (v96 + 8 * v95 - 4 <= (unint64_t)a5 || v96 >= (unint64_t)a5->u64 + 4 * v95))
      {
        uint64_t v126 = v95 & 7;
        if ((v95 & 7) == 0) {
          uint64_t v126 = 8;
        }
        uint64_t v105 = v95 - v126;
        v127 = (const float *)(v96 + 32);
        float32x4x2_t v128 = (unsigned long long *)&a5[1];
        uint64_t v129 = v105;
        do
        {
          float32x4x2_t v130 = v127 - 8;
          unsigned long long v131 = (unsigned __int128)vld2q_f32(v130);
          unsigned long long v132 = (unsigned __int128)vld2q_f32(v127);
          *(v128 - 1) = v131;
          *float32x4x2_t v128 = v132;
          v127 += 16;
          v128 += 2;
          v129 -= 8;
        }
        while (v129);
      }
      else
      {
        uint64_t v105 = 0;
      }
      v133 = (__int32 *)(v96 + 8 * v105);
      uint64_t v134 = v95 - v105;
      v135 = &a5->i32[v105];
      do
      {
        __int32 v136 = *v133;
        v133 += 2;
        *v135++ = v136;
        --v134;
      }
      while (v134);
    }
  }
  else if (a6)
  {
    uint64_t v103 = *v18;
    if (v95 >= 0xD && (&v103[2 * v95] <= (float *)a6 || v103 + 1 >= &a6->f32[v95]))
    {
      uint64_t v115 = v95 & 7;
      if ((v95 & 7) == 0) {
        uint64_t v115 = 8;
      }
      uint64_t v104 = v95 - v115;
      unsigned long long v116 = v103 + 9;
      unsigned long long v117 = (unsigned long long *)&a6[1];
      uint64_t v118 = v104;
      do
      {
        v119 = v116 - 8;
        unsigned long long v120 = (unsigned __int128)vld2q_f32(v119);
        unsigned long long v121 = (unsigned __int128)vld2q_f32(v116);
        *(v117 - 1) = v120;
        unsigned long long *v117 = v121;
        v116 += 16;
        v117 += 2;
        v118 -= 8;
      }
      while (v118);
    }
    else
    {
      uint64_t v104 = 0;
    }
    int v122 = &v103[2 * v104 + 1];
    v123 = &a6->i32[v104];
    uint64_t v124 = v95 - v104;
    do
    {
      __int32 v125 = *(_DWORD *)v122;
      v122 += 2;
      *v123++ = v125;
      --v124;
    }
    while (v124);
  }
LABEL_81:

  std::mutex::unlock(&stru_1E9457DA0);
}

void sub_19E146028(void *a1)
{
}

void sub_19E146050(_Unwind_Exception *a1)
{
}

void MRLModelStateCreate(uint64_t a1)
{
  dword_1E9457D98 = *(_DWORD *)(a1 + 224);
  sub_19E168520(a1);
}

void sub_19E1460C0(void *a1)
{
}

void sub_19E1460E4(_Unwind_Exception *a1)
{
}

uint64_t MRLModelStateSave(uint64_t a1, uint64_t a2, uint64_t a3)
{
  dword_1E9457D98 = *(_DWORD *)(a1 + 224);
  if (!*(unsigned char *)(a1 + 188)) {
    sub_19E168088(a1);
  }
  if (!a2) {
    sub_19E2F6320(40);
  }
  sub_19E16EC44(a1, a2, a3);
  std::mutex::unlock(&stru_1E9457DA0);
  return a2;
}

void sub_19E146188(void *a1)
{
}

void sub_19E1461B0(_Unwind_Exception *a1)
{
}

uint64_t MRLModelStateRestore(uint64_t a1, uint64_t a2)
{
  dword_1E9457D98 = *(_DWORD *)(a1 + 224);
  if (!*(unsigned char *)(a1 + 188)) {
    sub_19E168088(a1);
  }
  if (!a2) {
    sub_19E2F6320(41);
  }
  sub_19E16ECAC(a1, a2);
  std::mutex::unlock(&stru_1E9457DA0);
  return a2;
}

void sub_19E146244(void *a1)
{
}

void sub_19E14626C(_Unwind_Exception *a1)
{
}

uint64_t MRLModelStateIsEmpty(uint64_t a1, uint64_t *a2)
{
  std::mutex::lock(&stru_1E9457DA0);
  if (!a2) {
    sub_19E2F6320(45);
  }
  uint64_t v4 = sub_19E16EA6C(a1, a2);
  std::mutex::unlock(&stru_1E9457DA0);
  return v4;
}

void sub_19E1462E4(void *a1)
{
}

void sub_19E146308(_Unwind_Exception *a1)
{
}

void MRLModelRecognizeIncremental(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, void *a5)
{
  long long __p = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  sub_19E146380(a1, a2, a3, a4, a5, (uint64_t)&__p);
  if (__p)
  {
    uint64_t v6 = __p;
    operator delete(__p);
  }
}

void sub_19E146364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E146380(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, void *a5, uint64_t a6)
{
  std::mutex::lock(&stru_1E9457DA0);
  dword_1E9457D98 = *(_DWORD *)(a1 + 224);
  long long __p = 0;
  int v15 = 0;
  unsigned int v16 = 0;
  if (!a4)
  {
    int v12 = 0;
    if (!a2) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (a4 < 0) {
    sub_19E13D694();
  }
  int v12 = (char *)operator new(4 * a4);
  long long __p = v12;
  unsigned int v16 = &v12[4 * a4];
  memcpy(v12, a3, 4 * a4);
  int v15 = v16;
  if (a2)
  {
LABEL_6:
    int v13 = 1;
    sub_19E147708(&__p, v12, (char *)&v13);
  }
LABEL_7:
  if (*(unsigned char *)(a1 + 216)) {
    sub_19E2F6320(456);
  }
  sub_19E143C10(a1, a3, a4, a5, a2, a6);
  if (__p)
  {
    int v15 = __p;
    operator delete(__p);
  }
  std::mutex::unlock(&stru_1E9457DA0);
}

void sub_19E1464B4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x19E146470);
}

void sub_19E1464F8(_Unwind_Exception *a1)
{
}

void MRLModelRecognizeIncrementalOneClassOnly(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, void *a5, uint64_t a6, int a7)
{
  long long __p = 0;
  float v34 = 0;
  unint64_t v35 = 0;
  if (!a6 || a7 < 1) {
    sub_19E2F6320(98);
  }
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  int v10 = 0;
  uint64_t v11 = v34;
  uint64_t v12 = a7;
  do
  {
    while (v7 < v9)
    {
      *(_DWORD *)uint64_t v7 = *(_DWORD *)(a6 + 4 * v8);
      v7 += 4;
      uint64_t v11 = v7;
      if (++v8 == v12) {
        goto LABEL_34;
      }
    }
    uint64_t v13 = (v7 - v10) >> 2;
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 62)
    {
      float v34 = v11;
      unint64_t v35 = v9;
      long long __p = v10;
      sub_19E13D694();
    }
    if ((v9 - v10) >> 1 > v14) {
      unint64_t v14 = (v9 - v10) >> 1;
    }
    if ((unint64_t)(v9 - v10) >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v14;
    }
    if (v15)
    {
      if (v15 >> 62)
      {
        float v34 = v11;
        unint64_t v35 = v9;
        long long __p = v10;
        sub_19E13C418();
      }
      unsigned int v16 = operator new(4 * v15);
    }
    else
    {
      unsigned int v16 = 0;
    }
    int v17 = &v16[4 * v13];
    *(_DWORD *)int v17 = *(_DWORD *)(a6 + 4 * v8);
    uint64_t v11 = v17 + 4;
    if (v7 != v10)
    {
      unint64_t v18 = v7 - 4 - v10;
      if (v18 < 0xBC)
      {
        uint64_t v19 = v7;
        goto LABEL_19;
      }
      if (&v16[v7 - v10 - 4 - (v18 & 0xFFFFFFFFFFFFFFFCLL)] > &v16[v7 - v10 - 4])
      {
        uint64_t v19 = v7;
        do
        {
LABEL_19:
          int v20 = *((_DWORD *)v19 - 1);
          v19 -= 4;
          *((_DWORD *)v17 - 1) = v20;
          v17 -= 4;
        }
        while (v19 != v10);
        goto LABEL_20;
      }
      if (&v7[-(v18 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v7 - 4)
      {
        uint64_t v19 = v7;
        goto LABEL_19;
      }
      if ((unint64_t)(v10 - v16) < 0x20)
      {
        uint64_t v19 = v7;
        goto LABEL_19;
      }
      uint64_t v21 = (v18 >> 2) + 1;
      uint64_t v22 = 4 * (v21 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v19 = &v7[-v22];
      v17 -= v22;
      unint64_t v23 = &v16[4 * v13 - 16];
      unint64_t v24 = v7 - 16;
      uint64_t v25 = v21 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v26 = *(_OWORD *)v24;
        *(v23 - 1) = *((_OWORD *)v24 - 1);
        *unint64_t v23 = v26;
        v23 -= 2;
        v24 -= 32;
        v25 -= 8;
      }
      while (v25);
      if (v21 != (v21 & 0x7FFFFFFFFFFFFFF8)) {
        goto LABEL_19;
      }
    }
LABEL_20:
    uint64_t v9 = &v16[4 * v15];
    if (v10) {
      operator delete(v10);
    }
    int v10 = v17;
    ++v8;
    uint64_t v7 = v11;
  }
  while (v8 != v12);
LABEL_34:
  float v34 = v11;
  unint64_t v35 = v9;
  long long __p = v10;
  sub_19E146380(a1, a2, a3, a4, a5, (uint64_t)&__p);
  if (__p)
  {
    float v34 = (char *)__p;
    operator delete(__p);
  }
}

void sub_19E146768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MRLModelRecognizeIncrementalClassPlusSuffixIds(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, void *a5, uint64_t a6, int a7, uint64_t a8, unsigned int a9)
{
  long long __p = 0;
  int32x4_t v71 = 0;
  int32x4_t v72 = 0;
  int v10 = 98;
  if (!a6) {
    goto LABEL_98;
  }
  uint64_t v63 = a1;
  if (a7 < 1) {
    goto LABEL_98;
  }
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  unint64_t v14 = 0;
  unint64_t v15 = v71;
  uint64_t v16 = a7;
  do
  {
    while (v11 < v13)
    {
      *(_DWORD *)uint64_t v11 = *(_DWORD *)(a6 + 4 * v12);
      v11 += 4;
      unint64_t v15 = v11;
      if (++v12 == v16) {
        goto LABEL_34;
      }
    }
    uint64_t v17 = (v11 - v14) >> 2;
    unint64_t v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 62)
    {
      int32x4_t v71 = v15;
      int32x4_t v72 = v13;
      long long __p = v14;
      sub_19E13D694();
    }
    if ((v13 - v14) >> 1 > v18) {
      unint64_t v18 = (v13 - v14) >> 1;
    }
    if ((unint64_t)(v13 - v14) >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v19 = v18;
    }
    if (v19)
    {
      if (v19 >> 62)
      {
        int32x4_t v71 = v15;
        int32x4_t v72 = v13;
        long long __p = v14;
        sub_19E13C418();
      }
      int v20 = operator new(4 * v19);
    }
    else
    {
      int v20 = 0;
    }
    uint64_t v21 = &v20[4 * v17];
    *(_DWORD *)uint64_t v21 = *(_DWORD *)(a6 + 4 * v12);
    unint64_t v15 = v21 + 4;
    if (v11 != v14)
    {
      unint64_t v22 = v11 - 4 - v14;
      if (v22 < 0xBC)
      {
        unint64_t v23 = v11;
        goto LABEL_19;
      }
      if (&v20[v11 - v14 - 4 - (v22 & 0xFFFFFFFFFFFFFFFCLL)] > &v20[v11 - v14 - 4])
      {
        unint64_t v23 = v11;
        do
        {
LABEL_19:
          int v24 = *((_DWORD *)v23 - 1);
          v23 -= 4;
          *((_DWORD *)v21 - 1) = v24;
          v21 -= 4;
        }
        while (v23 != v14);
        goto LABEL_20;
      }
      if (&v11[-(v22 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v11 - 4)
      {
        unint64_t v23 = v11;
        goto LABEL_19;
      }
      if ((unint64_t)(v14 - v20) < 0x20)
      {
        unint64_t v23 = v11;
        goto LABEL_19;
      }
      uint64_t v25 = (v22 >> 2) + 1;
      uint64_t v26 = 4 * (v25 & 0x7FFFFFFFFFFFFFF8);
      unint64_t v23 = &v11[-v26];
      v21 -= v26;
      float v27 = &v20[4 * v17 - 16];
      float v28 = v11 - 16;
      uint64_t v29 = v25 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v30 = *(_OWORD *)v28;
        *(v27 - 1) = *((_OWORD *)v28 - 1);
        _OWORD *v27 = v30;
        v27 -= 2;
        v28 -= 32;
        v29 -= 8;
      }
      while (v29);
      if (v25 != (v25 & 0x7FFFFFFFFFFFFFF8)) {
        goto LABEL_19;
      }
    }
LABEL_20:
    uint64_t v13 = &v20[4 * v19];
    if (v14) {
      operator delete(v14);
    }
    unint64_t v14 = v21;
    ++v12;
    uint64_t v11 = v15;
  }
  while (v12 != v16);
LABEL_34:
  int32x4_t v71 = v15;
  int32x4_t v72 = v13;
  long long __p = v14;
  if (v15 < v13)
  {
    *(_DWORD *)unint64_t v15 = -1;
    int v31 = v15 + 4;
    uint64_t v32 = a9;
    goto LABEL_58;
  }
  uint64_t v33 = (v15 - v14) >> 2;
  unint64_t v34 = v33 + 1;
  uint64_t v32 = a9;
  if ((unint64_t)(v33 + 1) >> 62) {
    sub_19E13D694();
  }
  if ((v13 - v14) >> 1 > v34) {
    unint64_t v34 = (v13 - v14) >> 1;
  }
  if ((unint64_t)(v13 - v14) >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v35 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v35 = v34;
  }
  if (v35)
  {
    if (v35 >> 62) {
      sub_19E13C418();
    }
    float v36 = operator new(4 * v35);
  }
  else
  {
    float v36 = 0;
  }
  unint64_t v37 = &v36[4 * v33];
  uint64_t v13 = &v36[4 * v35];
  *(_DWORD *)unint64_t v37 = -1;
  int v31 = v37 + 4;
  if (v15 != v14)
  {
    unint64_t v38 = v15 - v14 - 4;
    if (v38 < 0x2C)
    {
      float v39 = v15;
      goto LABEL_54;
    }
    if ((unint64_t)(v14 - v36) < 0x20)
    {
      float v39 = v15;
      goto LABEL_54;
    }
    uint64_t v40 = (v38 >> 2) + 1;
    uint64_t v41 = 4 * (v40 & 0x7FFFFFFFFFFFFFF8);
    float v39 = &v15[-v41];
    v37 -= v41;
    float v42 = &v36[4 * v33 - 16];
    float v43 = v15 - 16;
    uint64_t v44 = v40 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v45 = *(_OWORD *)v43;
      *(v42 - 1) = *((_OWORD *)v43 - 1);
      _OWORD *v42 = v45;
      v42 -= 2;
      v43 -= 32;
      v44 -= 8;
    }
    while (v44);
    if (v40 != (v40 & 0x7FFFFFFFFFFFFFF8))
    {
      do
      {
LABEL_54:
        int v46 = *((_DWORD *)v39 - 1);
        v39 -= 4;
        *((_DWORD *)v37 - 1) = v46;
        v37 -= 4;
      }
      while (v39 != v14);
    }
  }
  long long __p = v37;
  int32x4_t v72 = &v36[4 * v35];
  if (v14) {
    operator delete(v14);
  }
  unint64_t v14 = v37;
LABEL_58:
  int32x4_t v71 = v31;
  int v10 = 97;
  if (!a8 || (int)v32 < 1) {
LABEL_98:
  }
    sub_19E2F6320(v10);
  uint64_t v47 = 0;
  do
  {
    while (v31 < v13)
    {
      *(_DWORD *)int v31 = *(_DWORD *)(a8 + 4 * v47);
      v31 += 4;
      if (++v47 == v32) {
        goto LABEL_91;
      }
    }
    uint64_t v48 = (v31 - v14) >> 2;
    unint64_t v49 = v48 + 1;
    if ((unint64_t)(v48 + 1) >> 62)
    {
      int32x4_t v71 = v31;
      int32x4_t v72 = v13;
      long long __p = v14;
      sub_19E13D694();
    }
    if ((v13 - v14) >> 1 > v49) {
      unint64_t v49 = (v13 - v14) >> 1;
    }
    if ((unint64_t)(v13 - v14) >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v50 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v50 = v49;
    }
    if (v50)
    {
      if (v50 >> 62)
      {
        int32x4_t v71 = v31;
        int32x4_t v72 = v13;
        long long __p = v14;
        sub_19E13C418();
      }
      float v51 = operator new(4 * v50);
    }
    else
    {
      float v51 = 0;
    }
    float v52 = &v51[4 * v48];
    *(_DWORD *)float v52 = *(_DWORD *)(a8 + 4 * v47);
    int v53 = v52 + 4;
    if (v31 != v14)
    {
      unint64_t v54 = v31 - 4 - v14;
      if (v54 < 0xBC)
      {
        float v55 = v31;
        goto LABEL_76;
      }
      if (&v51[v31 - v14 - 4 - (v54 & 0xFFFFFFFFFFFFFFFCLL)] > &v51[v31 - v14 - 4])
      {
        float v55 = v31;
        do
        {
LABEL_76:
          int v56 = *((_DWORD *)v55 - 1);
          v55 -= 4;
          *((_DWORD *)v52 - 1) = v56;
          v52 -= 4;
        }
        while (v55 != v14);
        goto LABEL_77;
      }
      if (&v31[-(v54 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v31 - 4)
      {
        float v55 = v31;
        goto LABEL_76;
      }
      if ((unint64_t)(v14 - v51) < 0x20)
      {
        float v55 = v31;
        goto LABEL_76;
      }
      uint64_t v57 = (v54 >> 2) + 1;
      uint64_t v58 = 4 * (v57 & 0x7FFFFFFFFFFFFFF8);
      float v55 = &v31[-v58];
      v52 -= v58;
      float v59 = &v51[4 * v48 - 16];
      float v60 = v31 - 16;
      uint64_t v61 = v57 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v62 = *(_OWORD *)v60;
        *(v59 - 1) = *((_OWORD *)v60 - 1);
        *float v59 = v62;
        v59 -= 2;
        v60 -= 32;
        v61 -= 8;
      }
      while (v61);
      if (v57 != (v57 & 0x7FFFFFFFFFFFFFF8)) {
        goto LABEL_76;
      }
    }
LABEL_77:
    uint64_t v13 = &v51[4 * v50];
    if (v14) {
      operator delete(v14);
    }
    unint64_t v14 = v52;
    int v31 = v53;
    uint64_t v32 = a9;
    ++v47;
  }
  while (v47 != a9);
LABEL_91:
  int32x4_t v71 = v31;
  int32x4_t v72 = v13;
  long long __p = v14;
  sub_19E146380(v63, a2, a3, a4, a5, (uint64_t)&__p);
  if (__p)
  {
    int32x4_t v71 = (char *)__p;
    operator delete(__p);
  }
}

void sub_19E146D00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MRLModelRecognizeIncrementalTopN(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, unint64_t a5, float32x4_t *a6, float32x4_t *a7)
{
  std::mutex::lock(&stru_1E9457DA0);
  dword_1E9457D98 = *(_DWORD *)(a1 + 224);
  if (*(unsigned char *)(a1 + 216)) {
    sub_19E2F6320(456);
  }
  long long __p = 0;
  float32x4x2_t v138 = 0;
  float32x4x2_t v139 = 0;
  if (!a4)
  {
    unint64_t v14 = 0;
    if (!a2) {
      goto LABEL_8;
    }
LABEL_7:
    int v136 = 1;
    sub_19E147708(&__p, v14, (char *)&v136);
    goto LABEL_8;
  }
  if (a4 < 0) {
    sub_19E13D694();
  }
  unint64_t v14 = operator new(4 * a4);
  long long __p = v14;
  float32x4x2_t v139 = &v14[4 * a4];
  memcpy(v14, a3, 4 * a4);
  float32x4x2_t v138 = v139;
  if (a2) {
    goto LABEL_7;
  }
LABEL_8:
  unsigned int v15 = sub_19E168518(a1);
  uint64_t v17 = *(float ***)(a1 + 160);
  uint64_t v16 = *(float32x4_t **)(a1 + 168);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E94588A0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1E94588A0))
  {
    qword_1E94588E8 = 0;
    unk_1E94588F0 = 0;
    qword_1E94588E0 = 0;
    __cxa_atexit((void (*)(void *))sub_19E142EEC, &qword_1E94588E0, &dword_19E138000);
    __cxa_guard_release(&qword_1E94588A0);
  }
  sub_19E143C10(a1, a3, a4, v16, a2, (uint64_t)&qword_1E94588E0);
  unint64_t v18 = *v17;
  if ((int)v15 >= 1)
  {
    if (v15 < 8 || v18 + 1 < &v16->f32[v15] && v16 < (float32x4_t *)&v18[2 * v15])
    {
      uint64_t v19 = 0;
LABEL_14:
      int v20 = &v18[2 * v19 + 1];
      do
      {
        *((_DWORD *)v20 - 1) = v19;
        *int v20 = v16->f32[v19];
        v20 += 2;
        ++v19;
      }
      while (v15 != v19);
      goto LABEL_16;
    }
    uint64_t v19 = v15 & 0xFFFFFFF8;
    int v67 = v18 + 8;
    int32x4_t v68 = (int32x4_t)xmmword_19E351190;
    int32x4_t v69 = v16 + 1;
    v70.i64[0] = 0x400000004;
    v70.i64[1] = 0x400000004;
    v71.i64[0] = 0x800000008;
    v71.i64[1] = 0x800000008;
    uint64_t v72 = v19;
    do
    {
      v142.val[0] = (float32x4_t)vaddq_s32(v68, v70);
      float32x4_t v73 = v69[-1];
      v142.val[1] = *v69;
      float32x4_t v74 = v67 - 8;
      vst2q_f32(v74, *(float32x4x2_t *)v68.i8);
      vst2q_f32(v67, v142);
      int32x4_t v68 = vaddq_s32(v68, v71);
      v67 += 16;
      v69 += 2;
      v72 -= 8;
    }
    while (v72);
    if (v19 != v15) {
      goto LABEL_14;
    }
  }
LABEL_16:
  uint64_t v21 = &v18[2 * a5];
  unint64_t v22 = v17[1];
  if (v21 != v22)
  {
    unint64_t v23 = v18;
    do
    {
      unint64_t v24 = ((char *)v22 - (char *)v23) >> 3;
      if (v24 < 2) {
        break;
      }
      if (v24 == 3)
      {
        float v75 = v23[3];
        float v76 = v23[1];
        float v77 = *(v22 - 1);
        if (v75 <= v76)
        {
          if (v77 > v75)
          {
            int v87 = *((_DWORD *)v23 + 2);
            v23[2] = *(v22 - 2);
            *((_DWORD *)v22 - 2) = v87;
            v23[3] = v77;
            *(v22 - 1) = v75;
            float v88 = v23[3];
            float v89 = v23[1];
            if (v88 > v89)
            {
              int v90 = *(_DWORD *)v23;
              *unint64_t v23 = v23[2];
              *((_DWORD *)v23 + 2) = v90;
              v23[1] = v88;
              v23[3] = v89;
            }
          }
        }
        else
        {
          int v78 = *(_DWORD *)v23;
          if (v77 <= v75)
          {
            *unint64_t v23 = v23[2];
            *((_DWORD *)v23 + 2) = v78;
            v23[1] = v75;
            v23[3] = v76;
            float v91 = *(v22 - 1);
            if (v91 <= v76) {
              break;
            }
            v23[2] = *(v22 - 2);
            *((_DWORD *)v22 - 2) = v78;
            v23[3] = v91;
          }
          else
          {
            *unint64_t v23 = *(v22 - 2);
            *((_DWORD *)v22 - 2) = v78;
            v23[1] = v77;
          }
          *(v22 - 1) = v76;
        }
        break;
      }
      if (v24 == 2)
      {
        float v79 = *(v22 - 1);
        float v80 = v23[1];
        if (v79 > v80)
        {
          int v81 = *(_DWORD *)v23;
          *unint64_t v23 = *(v22 - 2);
          *((_DWORD *)v22 - 2) = v81;
          v23[1] = v79;
          *(v22 - 1) = v80;
        }
        break;
      }
      if ((char *)v22 - (char *)v23 <= 63)
      {
        while (v23 != v22 - 2)
        {
          int v82 = v23;
          v23 += 2;
          if (v82 != v22 && v23 != v22)
          {
            float v83 = v23;
            int v84 = v82;
            do
            {
              if (v83[1] > v84[1]) {
                int v84 = v83;
              }
              v83 += 2;
            }
            while (v83 != v22);
            if (v84 != v82)
            {
              int v85 = *(_DWORD *)v82;
              *int v82 = *v84;
              *(_DWORD *)int v84 = v85;
              int v86 = *((_DWORD *)v82 + 1);
              v82[1] = v84[1];
              *((_DWORD *)v84 + 1) = v86;
            }
          }
        }
        break;
      }
      unint64_t v25 = (unint64_t)&v23[2 * (v24 >> 1)];
      float v26 = *(float *)(v25 + 4);
      float v27 = v23[1];
      float v28 = *(v22 - 1);
      if (v26 <= v27)
      {
        if (v28 <= v26)
        {
          int v30 = 0;
          unint64_t v31 = (unint64_t)(v22 - 2);
          float v32 = v23[1];
          float v33 = *(float *)(v25 + 4);
          if (v32 <= v33) {
            goto LABEL_42;
          }
          goto LABEL_25;
        }
        float v42 = *(float *)v25;
        *(float *)unint64_t v25 = *(v22 - 2);
        *(v22 - 2) = v42;
        *(float *)(v25 + 4) = v28;
        *(v22 - 1) = v26;
        float v43 = *(float *)(v25 + 4);
        float v44 = v23[1];
        if (v43 > v44)
        {
          int v45 = *(_DWORD *)v23;
          *unint64_t v23 = *(float *)v25;
          *(_DWORD *)unint64_t v25 = v45;
          v23[1] = v43;
          *(float *)(v25 + 4) = v44;
          goto LABEL_39;
        }
      }
      else
      {
        int v29 = *(_DWORD *)v23;
        if (v28 > v26)
        {
          *unint64_t v23 = *(v22 - 2);
          *((_DWORD *)v22 - 2) = v29;
          v23[1] = v28;
          *(v22 - 1) = v27;
          int v30 = 1;
          unint64_t v31 = (unint64_t)(v22 - 2);
          float v32 = v23[1];
          float v33 = *(float *)(v25 + 4);
          if (v32 <= v33) {
            goto LABEL_42;
          }
          goto LABEL_25;
        }
        *unint64_t v23 = *(float *)v25;
        *(_DWORD *)unint64_t v25 = v29;
        v23[1] = v26;
        *(float *)(v25 + 4) = v27;
        float v46 = *(v22 - 1);
        if (v46 > v27)
        {
          *(float *)unint64_t v25 = *(v22 - 2);
          *((_DWORD *)v22 - 2) = v29;
          *(float *)(v25 + 4) = v46;
          *(v22 - 1) = v27;
LABEL_39:
          int v30 = 2;
          unint64_t v31 = (unint64_t)(v22 - 2);
          float v32 = v23[1];
          float v33 = *(float *)(v25 + 4);
          if (v32 <= v33) {
            goto LABEL_42;
          }
          goto LABEL_25;
        }
      }
      int v30 = 1;
      unint64_t v31 = (unint64_t)(v22 - 2);
      float v32 = v23[1];
      float v33 = *(float *)(v25 + 4);
      if (v32 <= v33)
      {
LABEL_42:
        unint64_t v47 = v31;
        while (1)
        {
          unint64_t v34 = v47 - 8;
          if ((float *)(v47 - 8) == v23) {
            break;
          }
          float v48 = *(float *)(v47 - 4);
          v47 -= 8;
          if (v48 > v33)
          {
            int v49 = *(_DWORD *)v23;
            *unint64_t v23 = *(float *)v34;
            *(_DWORD *)unint64_t v34 = v49;
            v23[1] = v48;
            *(float *)(v34 + 4) = v32;
            ++v30;
            unint64_t v35 = v23 + 2;
            if ((unint64_t)(v23 + 2) < v34) {
              goto LABEL_26;
            }
            goto LABEL_46;
          }
        }
        int v56 = v23 + 2;
        float v57 = *(v22 - 1);
        if (v32 <= v57)
        {
          if (v56 == (float *)v31) {
            break;
          }
          while (1)
          {
            float v58 = v56[1];
            if (v32 > v58) {
              break;
            }
            v56 += 2;
            if (v56 == (float *)v31) {
              goto LABEL_107;
            }
          }
          int v62 = *(_DWORD *)v56;
          *int v56 = *(v22 - 2);
          *((_DWORD *)v22 - 2) = v62;
          v56[1] = v57;
          *(v22 - 1) = v58;
          v56 += 2;
        }
        if (v56 == (float *)v31) {
          break;
        }
        while (1)
        {
          float v64 = v23[1];
          do
          {
            unint64_t v53 = (unint64_t)v56;
            float v65 = v56[1];
            v56 += 2;
          }
          while (v64 <= v65);
          do
          {
            float v66 = *(float *)(v31 - 4);
            v31 -= 8;
          }
          while (v64 > v66);
          if (v53 >= v31) {
            break;
          }
          int v63 = *(_DWORD *)v53;
          *(_DWORD *)unint64_t v53 = *(_DWORD *)v31;
          *(_DWORD *)unint64_t v31 = v63;
          *(float *)(v53 + 4) = v66;
          *(float *)(v31 + 4) = v65;
        }
        if (v53 > (unint64_t)v21) {
          break;
        }
        goto LABEL_79;
      }
LABEL_25:
      unint64_t v34 = v31;
      unint64_t v35 = v23 + 2;
      if ((unint64_t)(v23 + 2) >= v34)
      {
LABEL_46:
        unint64_t v38 = v35;
      }
      else
      {
LABEL_26:
        float v36 = v35;
        while (1)
        {
          float v37 = *(float *)(v25 + 4);
          do
          {
            unint64_t v38 = v36;
            float v39 = v36[1];
            v36 += 2;
          }
          while (v39 > v37);
          do
          {
            float v40 = *(float *)(v34 - 4);
            v34 -= 8;
          }
          while (v40 <= v37);
          if ((unint64_t)v38 >= v34) {
            break;
          }
          float v41 = *v38;
          *unint64_t v38 = *(float *)v34;
          *(float *)unint64_t v34 = v41;
          v38[1] = v40;
          *(float *)(v34 + 4) = v39;
          ++v30;
          if ((float *)v25 == v38) {
            unint64_t v25 = v34;
          }
        }
      }
      if (v38 != (float *)v25)
      {
        float v50 = *(float *)(v25 + 4);
        float v51 = v38[1];
        if (v50 > v51)
        {
          int v52 = *(_DWORD *)v38;
          *unint64_t v38 = *(float *)v25;
          *(_DWORD *)unint64_t v25 = v52;
          v38[1] = v50;
          *(float *)(v25 + 4) = v51;
          ++v30;
        }
      }
      if (v38 == v21) {
        break;
      }
      if (!v30)
      {
        if (v38 <= v21)
        {
          float v59 = v38 + 2;
          while (v59 != v22)
          {
            float v60 = v59[1];
            float v61 = *(v59 - 1);
            v59 += 2;
            if (v60 > v61) {
              goto LABEL_52;
            }
          }
        }
        else
        {
          while (v35 != v38)
          {
            float v54 = v35[1];
            float v55 = *(v35 - 1);
            v35 += 2;
            if (v54 > v55) {
              goto LABEL_52;
            }
          }
        }
        break;
      }
LABEL_52:
      if (v38 <= v21)
      {
        unint64_t v53 = (unint64_t)(v38 + 2);
      }
      else
      {
        unint64_t v22 = v38;
        unint64_t v53 = (unint64_t)v23;
      }
LABEL_79:
      unint64_t v23 = (float *)v53;
    }
    while (v22 != v21);
  }
LABEL_107:
  unint64_t v92 = 126 - 2 * __clz(a5);
  if (a5) {
    uint64_t v93 = v92;
  }
  else {
    uint64_t v93 = 0;
  }
  sub_19E14BFA8(v18, v21, v93, 1);
  bzero(a6, 4 * a5);
  bzero(a7, 4 * a5);
  if ((int)v15 >= (int)a5) {
    uint64_t v94 = a5;
  }
  else {
    uint64_t v94 = v15;
  }
  if ((int)v94 >= 1)
  {
    if (a6)
    {
      unint64_t v95 = (unint64_t)*v17;
      if (a7)
      {
        if (v94 >= 0xC)
        {
          uint64_t v96 = 0;
          unint64_t v105 = v95 + 8 * v94;
          BOOL v107 = v105 > (unint64_t)a7 && v95 + 4 < (unint64_t)a7->u64 + 4 * v94;
          if ((v95 >= (unint64_t)a6->u64 + 4 * v94 || v105 - 4 <= (unint64_t)a6) && !v107)
          {
            uint64_t v96 = v94 & 0x7FFFFFF8;
            uint64_t v109 = (const float *)(v95 + 32);
            v110 = a6 + 1;
            uint64_t v111 = a7 + 1;
            uint64_t v112 = v94 & 0xFFFFFFF8;
            do
            {
              uint64_t v113 = v109 - 8;
              float32x4x2_t v140 = vld2q_f32(v113);
              float32x4x2_t v141 = vld2q_f32(v109);
              v110[-1] = v140.val[0];
              float32x4_t *v110 = v141.val[0];
              v111[-1] = v140.val[1];
              float32x4_t *v111 = v141.val[1];
              v109 += 16;
              v110 += 2;
              v111 += 2;
              v112 -= 8;
            }
            while (v112);
            if (v96 == v94) {
              goto LABEL_158;
            }
          }
        }
        else
        {
          uint64_t v96 = 0;
        }
        uint64_t v97 = (__int32 *)(v95 + 8 * v96 + 4);
        unint64_t v98 = &a7->i32[v96];
        uint64_t v99 = &a6->i32[v96];
        uint64_t v100 = v94 - v96;
        do
        {
          *v99++ = *(v97 - 1);
          __int32 v101 = *v97;
          v97 += 2;
          *v98++ = v101;
          --v100;
        }
        while (v100);
      }
      else
      {
        if (v94 >= 0xD
          && (v95 + 8 * v94 - 4 <= (unint64_t)a6 || v95 >= (unint64_t)a6->u64 + 4 * v94))
        {
          uint64_t v125 = v94 & 7;
          if ((v94 & 7) == 0) {
            uint64_t v125 = 8;
          }
          uint64_t v104 = v94 - v125;
          uint64_t v126 = (const float *)(v95 + 32);
          v127 = (unsigned long long *)&a6[1];
          uint64_t v128 = v104;
          do
          {
            uint64_t v129 = v126 - 8;
            unsigned long long v130 = (unsigned __int128)vld2q_f32(v129);
            unsigned long long v131 = (unsigned __int128)vld2q_f32(v126);
            *(v127 - 1) = v130;
            unsigned long long *v127 = v131;
            v126 += 16;
            v127 += 2;
            v128 -= 8;
          }
          while (v128);
        }
        else
        {
          uint64_t v104 = 0;
        }
        unsigned long long v132 = (__int32 *)(v95 + 8 * v104);
        uint64_t v133 = v94 - v104;
        uint64_t v134 = &a6->i32[v104];
        do
        {
          __int32 v135 = *v132;
          v132 += 2;
          *v134++ = v135;
          --v133;
        }
        while (v133);
      }
    }
    else if (a7)
    {
      __int32 v102 = *v17;
      if (v94 >= 0xD && (&v102[2 * v94] <= (float *)a7 || v102 + 1 >= &a7->f32[v94]))
      {
        uint64_t v114 = v94 & 7;
        if ((v94 & 7) == 0) {
          uint64_t v114 = 8;
        }
        uint64_t v103 = v94 - v114;
        uint64_t v115 = v102 + 9;
        unsigned long long v116 = (unsigned long long *)&a7[1];
        uint64_t v117 = v103;
        do
        {
          uint64_t v118 = v115 - 8;
          unsigned long long v119 = (unsigned __int128)vld2q_f32(v118);
          unsigned long long v120 = (unsigned __int128)vld2q_f32(v115);
          *(v116 - 1) = v119;
          unsigned long long *v116 = v120;
          v115 += 16;
          v116 += 2;
          v117 -= 8;
        }
        while (v117);
      }
      else
      {
        uint64_t v103 = 0;
      }
      unsigned long long v121 = &v102[2 * v103 + 1];
      int v122 = &a7->i32[v103];
      uint64_t v123 = v94 - v103;
      do
      {
        __int32 v124 = *(_DWORD *)v121;
        v121 += 2;
        *v122++ = v124;
        --v123;
      }
      while (v123);
    }
  }
LABEL_158:
  if (__p)
  {
    float32x4x2_t v138 = __p;
    operator delete(__p);
  }
  std::mutex::unlock(&stru_1E9457DA0);
}

void sub_19E1476A0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x19E147610);
}

void sub_19E1476F0(_Unwind_Exception *a1)
{
}

char *sub_19E147708(void **a1, unsigned char *a2, char *a3)
{
  CFDictionaryRef v3 = a3;
  unint64_t v6 = (unint64_t)*a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = a2 - (unsigned char *)*a1;
  uint64_t v8 = v7 >> 2;
  uint64_t v9 = (char *)*a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(_DWORD *)uint64_t v9 = *(_DWORD *)a3;
      a1[1] = v9 + 4;
      return v9;
    }
    int64_t v11 = v5 - (void)(v9 + 4);
    uint64_t v12 = v11 >> 2;
    uint64_t v13 = (int *)(v5 - 4);
    if (v5 < 4)
    {
      uint64_t v19 = a1[1];
    }
    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFFCLL) + v11;
      unsigned int v15 = (char *)(v14 + v6);
      unint64_t v16 = v14 + v6 + 4;
      if (v5 > v16) {
        unint64_t v16 = (unint64_t)a1[1];
      }
      unint64_t v17 = v16 + ~v6 - v14;
      if (v17 < 0x2C)
      {
        uint64_t v19 = a1[1];
      }
      else
      {
        unint64_t v18 = v5 - (void)v15;
        uint64_t v19 = a1[1];
        if (v18 >= 0x20)
        {
          uint64_t v20 = (v17 >> 2) + 1;
          uint64_t v21 = 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v13 = (int *)((char *)v13 + v21);
          uint64_t v19 = (_DWORD *)(v5 + v21);
          unint64_t v22 = (_OWORD *)(v5 + 16);
          unint64_t v23 = (long long *)(4 * v12 + 4 * v8 + v6 + 16);
          uint64_t v24 = v20 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v25 = *v23;
            *(v22 - 1) = *(v23 - 1);
            *unint64_t v22 = v25;
            v22 += 2;
            v23 += 2;
            v24 -= 8;
          }
          while (v24);
          if (v20 == (v20 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_50;
          }
        }
      }
      do
      {
        int v55 = *v13++;
        *v19++ = v55;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_50:
    a1[1] = v19;
    if ((char *)v5 != v9 + 4) {
      memmove((void *)(v5 - 4 * v12), v9, v11);
    }
    if (v9 <= v3) {
      v3 += 4 * (a1[1] > v3);
    }
    *(_DWORD *)uint64_t v9 = *(_DWORD *)v3;
    return v9;
  }
  unint64_t v26 = ((uint64_t)(v5 - v6) >> 2) + 1;
  if (v26 >> 62) {
    sub_19E13D694();
  }
  uint64_t v28 = v10 - v6;
  if (v28 >> 1 > v26) {
    unint64_t v26 = v28 >> 1;
  }
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v29 = v26;
  }
  if (v29)
  {
    if (v29 >> 62) {
      sub_19E13C418();
    }
    int v30 = (char *)operator new(4 * v29);
    unint64_t v31 = &v30[4 * v8];
    float v32 = &v30[4 * v29];
    if (v8 != v29) {
      goto LABEL_28;
    }
  }
  else
  {
    int v30 = 0;
    unint64_t v31 = (char *)(4 * v8);
    float v32 = 0;
    if (v8) {
      goto LABEL_28;
    }
  }
  if (v7 < 1)
  {
    if ((unsigned char *)v6 == a2) {
      unint64_t v52 = 1;
    }
    else {
      unint64_t v52 = v7 >> 1;
    }
    if (v52 >> 62) {
      sub_19E13C418();
    }
    unint64_t v53 = (char *)operator new(4 * v52);
    unint64_t v31 = &v53[v52 & 0xFFFFFFFFFFFFFFFCLL];
    float v32 = &v53[4 * v52];
    if (v30)
    {
      float v54 = &v53[4 * v52];
      operator delete(v30);
      float v32 = v54;
      unint64_t v34 = (char *)*a1;
      *(_DWORD *)unint64_t v31 = *(_DWORD *)v3;
      unint64_t v35 = v31 + 4;
      float v36 = v31;
      if (v34 != v9) {
        goto LABEL_29;
      }
      goto LABEL_35;
    }
  }
  else
  {
    unint64_t v33 = v8 + 2;
    if (v8 >= -1) {
      unint64_t v33 = v8 + 1;
    }
    v31 -= 4 * (v33 >> 1);
  }
LABEL_28:
  unint64_t v34 = (char *)v6;
  *(_DWORD *)unint64_t v31 = *(_DWORD *)v3;
  unint64_t v35 = v31 + 4;
  float v36 = v31;
  if ((char *)v6 != v9)
  {
LABEL_29:
    float v37 = (char *)((v7 & 0xFFFFFFFFFFFFFFFCLL) + v6);
    unint64_t v38 = v37 - v34 - 4;
    float v39 = v9;
    float v36 = v31;
    if (v38 < 0x2C) {
      goto LABEL_61;
    }
    float v39 = v9;
    float v36 = v31;
    if ((unint64_t)(v37 - v31) < 0x20) {
      goto LABEL_61;
    }
    uint64_t v40 = (v38 >> 2) + 1;
    uint64_t v41 = 4 * (v40 & 0x7FFFFFFFFFFFFFF8);
    float v39 = &v9[-v41];
    float v36 = &v31[-v41];
    float v42 = v31 - 16;
    float v43 = (long long *)(v6 + 4 * v8 - 16);
    uint64_t v44 = v40 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v45 = *v43;
      *((_OWORD *)v42 - 1) = *(v43 - 1);
      *(_OWORD *)float v42 = v45;
      v42 -= 32;
      v43 -= 2;
      v44 -= 8;
    }
    while (v44);
    if (v40 != (v40 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_61:
      do
      {
        int v46 = *((_DWORD *)v39 - 1);
        v39 -= 4;
        *((_DWORD *)v36 - 1) = v46;
        v36 -= 4;
      }
      while (v39 != v34);
    }
  }
LABEL_35:
  unint64_t v47 = (char *)a1[1];
  int64_t v48 = v47 - v9;
  if (v47 != v9)
  {
    int v49 = v9;
    size_t v50 = v47 - v9;
    float v51 = v32;
    memmove(v35, v49, v50);
    float v32 = v51;
    unint64_t v34 = (char *)*a1;
  }
  *a1 = v36;
  a1[1] = &v35[v48];
  a1[2] = v32;
  if (v34) {
    operator delete(v34);
  }
  return v31;
}

void sub_19E147A78(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void MRLModelStateReset(uint64_t a1, uint64_t a2)
{
  std::mutex::lock(&stru_1E9457DA0);
  if (a2) {
    sub_19E16EA0C(a1, a2);
  }

  std::mutex::unlock(&stru_1E9457DA0);
}

void sub_19E147AE8(void *a1, int a2)
{
  __cxa_begin_catch(a1);
  if (a2 != 2)
  {
    __cxa_end_catch();
    JUMPOUT(0x19E147AC4);
  }
  __cxa_end_catch();
  std::mutex::unlock(&stru_1E9457DA0);
}

void sub_19E147B28(_Unwind_Exception *a1)
{
}

void MRLModelStateRelease(uint64_t a1, char **a2)
{
  std::mutex::lock(&stru_1E9457DA0);
  if (a2) {
    sub_19E1686BC(a1, a2);
  }

  std::mutex::unlock(&stru_1E9457DA0);
}

void sub_19E147B98(void *a1, int a2)
{
  __cxa_begin_catch(a1);
  if (a2 != 2)
  {
    __cxa_end_catch();
    JUMPOUT(0x19E147B74);
  }
  __cxa_end_catch();
  std::mutex::unlock(&stru_1E9457DA0);
}

void sub_19E147BD8(_Unwind_Exception *a1)
{
}

uint64_t MRLModelStateSize(uint64_t a1, void *a2)
{
  std::mutex::lock(&stru_1E9457DA0);
  if (a2) {
    uint64_t v3 = (a2[1] - *a2) >> 4;
  }
  else {
    uint64_t v3 = 0xFFFFFFFFLL;
  }
  std::mutex::unlock(&stru_1E9457DA0);
  return v3;
}

uint64_t MRLModelStatePieceSize(uint64_t a1, void *a2, int a3)
{
  std::mutex::lock(&stru_1E9457DA0);
  if (!a2 || ((v5 = (a2[1] - *a2) >> 4, (int)v5 >= 1) ? (BOOL v6 = (int)v5 <= a3) : (BOOL v6 = 1), v6)) {
    uint64_t v7 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v7 = *(unsigned int *)(*a2 + 16 * a3);
  }
  std::mutex::unlock(&stru_1E9457DA0);
  return v7;
}

uint64_t MRLModelStatePieceData(uint64_t a1, void *a2, int a3)
{
  std::mutex::lock(&stru_1E9457DA0);
  if (!a2 || ((v5 = (a2[1] - *a2) >> 4, (int)v5 >= 1) ? (BOOL v6 = (int)v5 <= a3) : (BOOL v6 = 1), v6)) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = **(void **)(*a2 + 16 * a3 + 8);
  }
  std::mutex::unlock(&stru_1E9457DA0);
  return v7;
}

uint64_t MRLModelStateCreateDescription()
{
  return 0;
}

uint64_t MRLModelGetIOMappings(uint64_t a1)
{
  std::mutex::lock(&stru_1E9457DA0);
  uint64_t v2 = sub_19E16ED18(a1);
  std::mutex::unlock(&stru_1E9457DA0);
  return v2;
}

void sub_19E147D70(_Unwind_Exception *a1)
{
}

void MRLModelRelease(uint64_t a1)
{
  std::mutex::lock(&stru_1E9457DA0);
  if (a1)
  {
    dword_1E9457D98 = *(_DWORD *)(a1 + 224);
    uint64_t v2 = (void *)sub_19E168994(a1);
    operator delete(v2);
  }

  std::mutex::unlock(&stru_1E9457DA0);
}

void MRLModelReset(uint64_t a1)
{
  std::mutex::lock(&stru_1E9457DA0);
  if (a1)
  {
    dword_1E9457D98 = *(_DWORD *)(a1 + 224);
    if (*(unsigned char *)(a1 + 188)) {
      sub_19E167DCC(a1);
    }
    *(unsigned char *)(a1 + 188) = 0;
  }

  std::mutex::unlock(&stru_1E9457DA0);
}

void sub_19E147E58(_Unwind_Exception *a1)
{
}

uint64_t MRLModelLock(uint64_t a1)
{
  std::mutex::lock(&stru_1E9457DA0);
  if (a1)
  {
    dword_1E9457D98 = *(_DWORD *)(a1 + 224);
    int v2 = *(unsigned __int8 *)(a1 + 228);
    if (*(unsigned char *)(a1 + 228)) {
      goto LABEL_3;
    }
    size_t v5 = sub_19E1679E8(a1);
    unint64_t v6 = sub_19E1679CC(a1);
    unsigned int v3 = 0;
    if (!v6 || !v5) {
      goto LABEL_4;
    }
    if (v6 % getpagesize() || mlock((const void *)v6, v5) == -1)
    {
LABEL_3:
      unsigned int v3 = 0;
    }
    else
    {
      unsigned int v3 = 1;
      *(unsigned char *)(a1 + 228) = 1;
    }
LABEL_4:
    if (v2) {
      a1 = 1;
    }
    else {
      a1 = v3;
    }
  }
  std::mutex::unlock(&stru_1E9457DA0);
  return a1;
}

void sub_19E147F34(_Unwind_Exception *a1)
{
}

void sub_19E147F4C(_Unwind_Exception *a1)
{
}

void sub_19E147F64(_Unwind_Exception *a1)
{
}

uint64_t MRLModelUnlock(uint64_t a1)
{
  std::mutex::lock(&stru_1E9457DA0);
  if (a1)
  {
    dword_1E9457D98 = *(_DWORD *)(a1 + 224);
    if (*(unsigned char *)(a1 + 228)
      && (size_t v2 = sub_19E1679E8(a1), (v3 = (const void *)sub_19E1679CC(a1)) != 0)
      && munlock(v3, v2) != -1)
    {
      *(unsigned char *)(a1 + 228) = 0;
      a1 = 1;
    }
    else
    {
      a1 = 0;
    }
  }
  std::mutex::unlock(&stru_1E9457DA0);
  return a1;
}

void sub_19E14800C(_Unwind_Exception *a1)
{
}

void sub_19E148024(_Unwind_Exception *a1)
{
}

void sub_19E14803C(_Unwind_Exception *a1)
{
}

uint64_t MRLModelSetMaxSequenceLength(uint64_t a1, int a2)
{
  std::mutex::lock(&stru_1E9457DA0);
  if (!a1) {
    goto LABEL_6;
  }
  dword_1E9457D98 = *(_DWORD *)(a1 + 224);
  if (*(unsigned char *)(a1 + 188)) {
    sub_19E167DCC(a1);
  }
  *(unsigned char *)(a1 + 188) = 0;
  if ((a2 - 1) <= 0x270E)
  {
    uint64_t v4 = 0;
    *(_DWORD *)(a1 + 220) = a2;
    *(_DWORD *)(a1 + 224) = a2;
    dword_1E9457D98 = a2;
  }
  else
  {
LABEL_6:
    uint64_t v4 = 0xFFFFFFFFLL;
  }
  std::mutex::unlock(&stru_1E9457DA0);
  return v4;
}

void sub_19E1480E8(_Unwind_Exception *a1)
{
}

CFMutableDataRef MRLModelCopyFlatWeights(uint64_t a1, _DWORD *a2)
{
  MRLModelGetWeights_0(a1);
  CFMutableDataRef Mutable = CFDataCreateMutable(0, 0);
  if (a2) {
    *a2 = *(void *)(a1 + 136);
  }
  return Mutable;
}

void sub_19E1481C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL MRLModelConvertFlatWeights(const char *a1)
{
  v10[19] = *MEMORY[0x1E4F143B8];
  sub_19E148808(v8);
  std::istream::seekg();
  std::istream::tellg();
  std::istream::seekg();
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFStringRef v3 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a1, 0x8000100u);
  CFMutableDataRef Mutable = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionaryAddValue(Mutable, (const void *)kMRLModelFileLocationKey, v3);
  uint64_t v5 = MRLModelCreate(Mutable);
  MRLModelGetWeights_0(v5);
  if (!v7) {
    operator new[]();
  }
  v8[0] = *MEMORY[0x1E4FBA3F8];
  *(uint64_t *)((char *)v8 + *(void *)(v8[0] - 24)) = *(void *)(MEMORY[0x1E4FBA3F8] + 24);
  MEMORY[0x19F3BB910](&v9);
  std::istream::~istream();
  MEMORY[0x19F3BBB40](v10);
  return v7 == 0;
}

void sub_19E148748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E148C70(&STACK[0x258]);
  _Unwind_Resume(a1);
}

uint64_t *sub_19E148808(uint64_t *a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA460] + 64;
  a1[53] = MEMORY[0x1E4FBA460] + 64;
  CFStringRef v3 = a1 + 2;
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA3F8] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x1E4FBA3F8] + 8);
  *a1 = v5;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = v4;
  a1[1] = 0;
  unint64_t v6 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v6, a1 + 2);
  uint64_t v7 = MEMORY[0x1E4FBA460] + 24;
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *a1 = v7;
  a1[53] = v2;
  MEMORY[0x19F3BB900](v3);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 4);
  }
  return a1;
}

void sub_19E148994(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x19F3BBB40](v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_19E1489D8(uint64_t *a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA468] + 64;
  a1[52] = MEMORY[0x1E4FBA468] + 64;
  CFStringRef v3 = a1 + 1;
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA400] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x1E4FBA400] + 8);
  *a1 = v5;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = v4;
  unint64_t v6 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v6, a1 + 1);
  uint64_t v7 = MEMORY[0x1E4FBA468] + 24;
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *a1 = v7;
  a1[52] = v2;
  MEMORY[0x19F3BB900](v3);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 4);
  }
  return a1;
}

void sub_19E148B60(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x19F3BBB40](v1);
  _Unwind_Resume(a1);
}

void *sub_19E148BA4(void *a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA400];
  uint64_t v3 = *MEMORY[0x1E4FBA400];
  *a1 = *MEMORY[0x1E4FBA400];
  *(void *)((char *)a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  MEMORY[0x19F3BB910](a1 + 1);
  std::ostream::~ostream();
  MEMORY[0x19F3BBB40](a1 + 52);
  return a1;
}

void *sub_19E148C70(void *a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA3F8];
  uint64_t v3 = *MEMORY[0x1E4FBA3F8];
  *a1 = *MEMORY[0x1E4FBA3F8];
  *(void *)((char *)a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  MEMORY[0x19F3BB910](a1 + 2);
  std::istream::~istream();
  MEMORY[0x19F3BBB40](a1 + 53);
  return a1;
}

char *sub_19E148D3C(char **a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = v3 - *a1;
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 3) + 1;
  if (v6 > 0xAAAAAAAAAAAAAAALL) {
    sub_19E13D694();
  }
  if (0x5555555555555556 * ((a1[2] - v4) >> 3) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - v4) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3) >= 0x555555555555555) {
    unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL) {
      sub_19E13C418();
    }
    uint64_t v9 = (char *)operator new(24 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  unint64_t v10 = &v9[8 * (v5 >> 3)];
  int64_t v11 = &v9[24 * v8];
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *(void *)unint64_t v10 = 0;
  uint64_t v12 = *(const void **)a2;
  int64_t v13 = *(void *)(a2 + 8) - *(void *)a2;
  if (v13)
  {
    unint64_t v14 = &v9[v5];
    if (v13 < 0) {
      sub_19E13D694();
    }
    unsigned int v15 = (char *)operator new(v13);
    *(void *)unint64_t v10 = v15;
    unint64_t v16 = &v15[4 * (v13 >> 2)];
    *((void *)v14 + 1) = v15;
    *((void *)v14 + 2) = v16;
    memcpy(v15, v12, v13);
    *((void *)v14 + 1) = v16;
  }
  unint64_t v17 = v10 + 24;
  long long v25 = v10 + 24;
  if (v3 == v4)
  {
    *a1 = v10;
    a1[1] = v17;
    a1[2] = v11;
  }
  else
  {
    do
    {
      unint64_t v18 = v10;
      *((void *)v10 - 2) = 0;
      *((void *)v10 - 1) = 0;
      long long v19 = *(_OWORD *)(v3 - 24);
      v3 -= 24;
      *(_OWORD *)(v10 - 24) = v19;
      v10 -= 24;
      *((void *)v18 - 1) = *((void *)v3 + 2);
      *(void *)uint64_t v3 = 0;
      *((void *)v3 + 1) = 0;
      *((void *)v3 + 2) = 0;
    }
    while (v3 != v4);
    uint64_t v20 = *a1;
    uint64_t v3 = a1[1];
    unint64_t v17 = v25;
    *a1 = v10;
    a1[1] = v25;
    a1[2] = v11;
    if (v3 != v20)
    {
      uint64_t v21 = v3;
      do
      {
        unint64_t v23 = (void *)*((void *)v21 - 3);
        v21 -= 24;
        unint64_t v22 = v23;
        if (v23)
        {
          *((void *)v3 - 2) = v22;
          operator delete(v22);
        }
        uint64_t v3 = v21;
      }
      while (v21 != v20);
      uint64_t v3 = v20;
    }
  }
  if (v3) {
    operator delete(v3);
  }
  return v17;
}

void sub_19E148F1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v5 = *v2;
  if (*v2)
  {
    *(void *)(v3 + 8) = v5;
    operator delete(v5);
  }
  sub_19E148F40((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E148F40(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        uint64_t v5 = v2 - 24;
        uint64_t v4 = *(void **)(v2 - 24);
        *(void *)(a1 + 16) = v2 - 24;
        if (!v4) {
          break;
        }
        *(void *)(v2 - 16) = v4;
        operator delete(v4);
        uint64_t v2 = *(void *)(a1 + 16);
        if (v2 == v3) {
          goto LABEL_6;
        }
      }
      v2 -= 24;
    }
    while (v5 != v3);
  }
LABEL_6:
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

float *sub_19E148FB0(float *result, float *a2, uint64_t a3, char a4)
{
  unint64_t v9 = (unint64_t)result;
LABEL_2:
  unint64_t v10 = (float *)v9;
  while (1)
  {
    unint64_t v9 = (unint64_t)v10;
    uint64_t v11 = (char *)a2 - (char *)v10;
    uint64_t v12 = ((char *)a2 - (char *)v10) >> 3;
    if (v5 || !v4)
    {
      switch(v12)
      {
        case 0:
        case 1:
          return result;
        case 2:
          float v83 = *(a2 - 1);
          float v84 = v10[1];
          if (v83 > v84)
          {
            float v85 = *v10;
            float *v10 = *(a2 - 2);
            *(a2 - 2) = v85;
            v10[1] = v83;
            *(a2 - 1) = v84;
          }
          return result;
        case 3:
          float v86 = v10[3];
          float v87 = v10[1];
          float v88 = *(a2 - 1);
          if (v86 <= v87)
          {
            if (v88 > v86)
            {
              int v136 = *((_DWORD *)v10 + 2);
              void v10[2] = *(a2 - 2);
              *((_DWORD *)a2 - 2) = v136;
              v10[3] = v88;
              *(a2 - 1) = v86;
              float v93 = v10[3];
              float v99 = v10[1];
              if (v93 > v99)
              {
                int v137 = *(_DWORD *)v10;
                float *v10 = v10[2];
                *((_DWORD *)v10 + 2) = v137;
LABEL_165:
                v10[1] = v93;
                v10[3] = v99;
              }
            }
          }
          else
          {
            int v89 = *(_DWORD *)v10;
            if (v88 <= v86)
            {
              float *v10 = v10[2];
              *((_DWORD *)v10 + 2) = v89;
              v10[1] = v86;
              v10[3] = v87;
              float v144 = *(a2 - 1);
              if (v144 <= v87) {
                return result;
              }
              void v10[2] = *(a2 - 2);
              *((_DWORD *)a2 - 2) = v89;
              v10[3] = v144;
            }
            else
            {
              float *v10 = *(a2 - 2);
              *((_DWORD *)a2 - 2) = v89;
              v10[1] = v88;
            }
            *(a2 - 1) = v87;
          }
          break;
        case 4:
          return sub_19E149F3C(v10, v10 + 2, v10 + 4, a2 - 2);
        case 5:
          uint64_t result = sub_19E149F3C(v10, v10 + 2, v10 + 4, v10 + 6);
          float v90 = *(a2 - 1);
          float v91 = v10[7];
          if (v90 <= v91) {
            return result;
          }
          int v92 = *((_DWORD *)v10 + 6);
          v10[6] = *(a2 - 2);
          *((_DWORD *)a2 - 2) = v92;
          v10[7] = v90;
          *(a2 - 1) = v91;
          float v93 = v10[7];
          float v94 = v10[5];
          if (v93 <= v94) {
            return result;
          }
          int v95 = *((_DWORD *)v10 + 4);
          int v96 = *((_DWORD *)v10 + 6);
          *((_DWORD *)v10 + 4) = v96;
          *((_DWORD *)v10 + 6) = v95;
          v10[5] = v93;
          v10[7] = v94;
          float v97 = v10[3];
          if (v93 <= v97) {
            return result;
          }
          int v98 = *((_DWORD *)v10 + 2);
          *((_DWORD *)v10 + 2) = v96;
          *((_DWORD *)v10 + 4) = v98;
          v10[3] = v93;
          v10[5] = v97;
          float v99 = v10[1];
          if (v93 <= v99) {
            return result;
          }
          float v100 = *v10;
          *(_DWORD *)unint64_t v10 = v96;
          void v10[2] = v100;
          goto LABEL_165;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v11 <= 191) {
      break;
    }
    if (!a3)
    {
      if (v10 == a2) {
        return result;
      }
      int64_t v111 = (unint64_t)(v12 - 2) >> 1;
      uint64_t v112 = v10 + 2;
      int64_t v113 = v111;
      do
      {
        if (v111 >= v113)
        {
          uint64_t v115 = (2 * v113) | 1;
          unsigned long long v116 = &v112[4 * v113];
          if (2 * v113 + 2 < v12 && v116[1] > v116[3])
          {
            v116 += 2;
            uint64_t v115 = 2 * v113 + 2;
          }
          uint64_t v117 = &v10[2 * v113];
          float v118 = v117[1];
          if (v116[1] <= v118)
          {
            int v119 = *(_DWORD *)v117;
            do
            {
              unsigned long long v120 = v117;
              uint64_t v117 = v116;
              *unsigned long long v120 = *v116;
              v120[1] = v116[1];
              if (v111 < v115) {
                break;
              }
              uint64_t result = (float *)(2 * v115);
              uint64_t v121 = (2 * v115) | 1;
              unsigned long long v116 = &v112[4 * v115];
              uint64_t v122 = 2 * v115 + 2;
              if (v122 < v12 && v116[1] > v116[3])
              {
                v116 += 2;
                uint64_t v121 = v122;
              }
              uint64_t v115 = v121;
            }
            while (v116[1] <= v118);
            *(_DWORD *)uint64_t v117 = v119;
            v117[1] = v118;
          }
        }
        BOOL v114 = v113-- <= 0;
      }
      while (!v114);
      uint64_t v123 = (unint64_t)v11 >> 3;
      while (2)
      {
        uint64_t v124 = 0;
        float v125 = *v10;
        float v126 = v10[1];
        v127 = v10;
        do
        {
          uint64_t v128 = v127;
          v127 += 2 * v124 + 2;
          uint64_t v129 = 2 * v124;
          uint64_t v124 = (2 * v124) | 1;
          uint64_t v130 = v129 + 2;
          if (v130 < v123 && v127[1] > v127[3])
          {
            v127 += 2;
            uint64_t v124 = v130;
          }
          *uint64_t v128 = *v127;
          v128[1] = v127[1];
        }
        while (v124 <= (uint64_t)((unint64_t)(v123 - 2) >> 1));
        if (v127 == a2 - 2)
        {
          float *v127 = v125;
          goto LABEL_147;
        }
        float *v127 = *(a2 - 2);
        v127[1] = *(a2 - 1);
        *(a2 - 2) = v125;
        *(a2 - 1) = v126;
        uint64_t v131 = (char *)v127 - (char *)v10 + 8;
        if (v131 >= 9)
        {
          unint64_t v132 = (((unint64_t)v131 >> 3) - 2) >> 1;
          uint64_t v133 = &v10[2 * v132];
          float v126 = v127[1];
          if (v133[1] > v126)
          {
            int v134 = *(_DWORD *)v127;
            do
            {
              __int32 v135 = v127;
              v127 = v133;
              float *v135 = *v133;
              v135[1] = v133[1];
              if (!v132) {
                break;
              }
              unint64_t v132 = (v132 - 1) >> 1;
              uint64_t v133 = &v10[2 * v132];
            }
            while (v133[1] > v126);
            *(_DWORD *)v127 = v134;
LABEL_147:
            v127[1] = v126;
          }
        }
        a2 -= 2;
        BOOL v114 = v123-- <= 2;
        if (v114) {
          return result;
        }
        continue;
      }
    }
    int64_t v13 = &v10[2 * ((unint64_t)v12 >> 1)];
    float v14 = *(a2 - 1);
    if ((unint64_t)v11 < 0x401)
    {
      float v18 = v10[1];
      float v19 = v13[1];
      if (v18 > v19)
      {
        float v20 = *v13;
        if (v14 > v18)
        {
          *int64_t v13 = *(a2 - 2);
          *(a2 - 2) = v20;
          v13[1] = v14;
          goto LABEL_32;
        }
        *int64_t v13 = *v10;
        float *v10 = v20;
        v13[1] = v18;
        v10[1] = v19;
        float v39 = *(a2 - 1);
        if (v39 > v19)
        {
          float *v10 = *(a2 - 2);
          *(a2 - 2) = v20;
          v10[1] = v39;
LABEL_32:
          *(a2 - 1) = v19;
        }
LABEL_33:
        --a3;
        if ((a4 & 1) == 0) {
          goto LABEL_58;
        }
        goto LABEL_34;
      }
      if (v14 <= v18) {
        goto LABEL_33;
      }
      float v25 = *v10;
      float *v10 = *(a2 - 2);
      *(a2 - 2) = v25;
      v10[1] = v14;
      *(a2 - 1) = v18;
      float v26 = v10[1];
      float v27 = v13[1];
      if (v26 <= v27) {
        goto LABEL_33;
      }
      int v28 = *(_DWORD *)v13;
      *int64_t v13 = *v10;
      *(_DWORD *)unint64_t v10 = v28;
      v13[1] = v26;
      v10[1] = v27;
      --a3;
      if (a4) {
        goto LABEL_34;
      }
LABEL_58:
      float v41 = v10[1];
      float v40 = *v10;
      if (*(v10 - 1) > v41) {
        goto LABEL_59;
      }
      if (v41 > *(a2 - 1))
      {
        uint64_t v72 = v10;
        do
        {
          unint64_t v10 = v72 + 2;
          float v73 = v72[3];
          v72 += 2;
        }
        while (v41 <= v73);
      }
      else
      {
        float32x4_t v74 = v10 + 2;
        do
        {
          unint64_t v10 = v74;
          if (v74 >= a2) {
            break;
          }
          float v75 = v74[1];
          v74 += 2;
        }
        while (v41 <= v75);
      }
      float v76 = a2;
      if (v10 < a2)
      {
        float v77 = a2;
        do
        {
          float v76 = v77 - 2;
          float v78 = *(v77 - 1);
          v77 -= 2;
        }
        while (v41 > v78);
      }
      while (v10 < v76)
      {
        float v79 = *v10;
        float *v10 = *v76;
        float *v76 = v79;
        int v80 = *((_DWORD *)v10 + 1);
        v10[1] = v76[1];
        *((_DWORD *)v76 + 1) = v80;
        do
        {
          float v81 = v10[3];
          v10 += 2;
        }
        while (v41 <= v81);
        do
        {
          float v82 = *(v76 - 1);
          v76 -= 2;
        }
        while (v41 > v82);
      }
      BOOL v4 = (unint64_t)(v10 - 2) >= v9;
      BOOL v5 = v10 - 2 == (float *)v9;
      if (v10 - 2 != (float *)v9)
      {
        *(float *)unint64_t v9 = *(v10 - 2);
        *(float *)(v9 + 4) = *(v10 - 1);
      }
      a4 = 0;
      *(v10 - 2) = v40;
      *(v10 - 1) = v41;
    }
    else
    {
      float v15 = v13[1];
      float v16 = v10[1];
      if (v15 <= v16)
      {
        if (v14 > v15)
        {
          int v21 = *(_DWORD *)v13;
          *int64_t v13 = *(a2 - 2);
          *((_DWORD *)a2 - 2) = v21;
          v13[1] = v14;
          *(a2 - 1) = v15;
          float v22 = v13[1];
          float v23 = v10[1];
          if (v22 > v23)
          {
            float v24 = *v10;
            float *v10 = *v13;
            *int64_t v13 = v24;
            v10[1] = v22;
            v13[1] = v23;
          }
        }
      }
      else
      {
        float v17 = *v10;
        if (v14 <= v15)
        {
          float *v10 = *v13;
          *int64_t v13 = v17;
          v10[1] = v15;
          v13[1] = v16;
          float v29 = *(a2 - 1);
          if (v29 <= v16) {
            goto LABEL_24;
          }
          *int64_t v13 = *(a2 - 2);
          *(a2 - 2) = v17;
          v13[1] = v29;
        }
        else
        {
          float *v10 = *(a2 - 2);
          *(a2 - 2) = v17;
          v10[1] = v14;
        }
        *(a2 - 1) = v16;
      }
LABEL_24:
      int v30 = &v10[2 * ((unint64_t)v12 >> 1)];
      float v31 = *(v30 - 1);
      float v32 = v10[3];
      float v33 = *(a2 - 3);
      if (v31 <= v32)
      {
        if (v33 > v31)
        {
          int v35 = *((_DWORD *)v30 - 2);
          *(v30 - 2) = *(a2 - 4);
          *((_DWORD *)a2 - 4) = v35;
          *(v30 - 1) = v33;
          *(a2 - 3) = v31;
          float v36 = *(v30 - 1);
          float v37 = v10[3];
          if (v36 > v37)
          {
            int v38 = *((_DWORD *)v10 + 2);
            void v10[2] = *(v30 - 2);
            *((_DWORD *)v30 - 2) = v38;
            v10[3] = v36;
            *(v30 - 1) = v37;
          }
        }
      }
      else
      {
        int v34 = *((_DWORD *)v10 + 2);
        if (v33 <= v31)
        {
          void v10[2] = *(v30 - 2);
          *((_DWORD *)v30 - 2) = v34;
          v10[3] = v31;
          *(v30 - 1) = v32;
          float v42 = *(a2 - 3);
          if (v42 <= v32) {
            goto LABEL_38;
          }
          *(v30 - 2) = *(a2 - 4);
          *((_DWORD *)a2 - 4) = v34;
          *(v30 - 1) = v42;
        }
        else
        {
          void v10[2] = *(a2 - 4);
          *((_DWORD *)a2 - 4) = v34;
          v10[3] = v33;
        }
        *(a2 - 3) = v32;
      }
LABEL_38:
      float v43 = v30[3];
      float v44 = v10[5];
      float v45 = *(a2 - 5);
      if (v43 <= v44)
      {
        if (v45 > v43)
        {
          int v47 = *((_DWORD *)v30 + 2);
          v30[2] = *(a2 - 6);
          *((_DWORD *)a2 - 6) = v47;
          v30[3] = v45;
          *(a2 - 5) = v43;
          float v48 = v30[3];
          float v49 = v10[5];
          if (v48 > v49)
          {
            int v50 = *((_DWORD *)v10 + 4);
            v10[4] = v30[2];
            *((_DWORD *)v30 + 2) = v50;
            v10[5] = v48;
            v30[3] = v49;
          }
        }
      }
      else
      {
        int v46 = *((_DWORD *)v10 + 4);
        if (v45 <= v43)
        {
          v10[4] = v30[2];
          *((_DWORD *)v30 + 2) = v46;
          v10[5] = v43;
          v30[3] = v44;
          float v51 = *(a2 - 5);
          if (v51 <= v44) {
            goto LABEL_47;
          }
          v30[2] = *(a2 - 6);
          *((_DWORD *)a2 - 6) = v46;
          v30[3] = v51;
        }
        else
        {
          v10[4] = *(a2 - 6);
          *((_DWORD *)a2 - 6) = v46;
          v10[5] = v45;
        }
        *(a2 - 5) = v44;
      }
LABEL_47:
      float v52 = v13[1];
      float v53 = *(v30 - 1);
      float v54 = v30[3];
      if (v52 <= v53)
      {
        float v55 = *v13;
        if (v54 <= v52) {
          goto LABEL_53;
        }
        float v56 = v30[2];
        *int64_t v13 = v56;
        v30[2] = v55;
        v13[1] = v54;
        v30[3] = v52;
        if (v54 > v53)
        {
          float v55 = *(v30 - 2);
          *(v30 - 2) = v56;
          *int64_t v13 = v55;
          *(v30 - 1) = v54;
          v13[1] = v53;
          goto LABEL_57;
        }
        goto LABEL_56;
      }
      float v55 = *(v30 - 2);
      if (v54 > v52)
      {
        *(v30 - 2) = v30[2];
        v30[2] = v55;
        *(v30 - 1) = v54;
        v30[3] = v53;
        float v55 = *v13;
LABEL_53:
        float v53 = v52;
        goto LABEL_57;
      }
      *(v30 - 2) = *v13;
      *int64_t v13 = v55;
      *(v30 - 1) = v52;
      v13[1] = v53;
      if (v54 > v53)
      {
        float v56 = v30[2];
        *int64_t v13 = v56;
        v30[2] = v55;
        v13[1] = v54;
        v30[3] = v53;
LABEL_56:
        float v53 = v54;
        float v55 = v56;
      }
LABEL_57:
      float v57 = *v10;
      float *v10 = v55;
      *int64_t v13 = v57;
      int v58 = *((_DWORD *)v10 + 1);
      v10[1] = v53;
      *((_DWORD *)v30 + 1) = v58;
      --a3;
      if ((a4 & 1) == 0) {
        goto LABEL_58;
      }
LABEL_34:
      float v40 = *v10;
      float v41 = v10[1];
LABEL_59:
      float v59 = v10;
      do
      {
        float v60 = v59;
        v59 += 2;
      }
      while (v60[3] > v41);
      float v61 = a2;
      if (v60 == v10)
      {
        float v64 = a2;
        while (v59 < v64)
        {
          int v62 = v64 - 2;
          float v65 = *(v64 - 1);
          v64 -= 2;
          if (v65 > v41) {
            goto LABEL_67;
          }
        }
        int v62 = v64;
        unint64_t v10 = v59;
      }
      else
      {
        do
        {
          int v62 = v61 - 2;
          float v63 = *(v61 - 1);
          v61 -= 2;
        }
        while (v63 <= v41);
LABEL_67:
        unint64_t v10 = v59;
        if (v59 < v62)
        {
          float v66 = v62;
          do
          {
            float v67 = *v10;
            float *v10 = *v66;
            *float v66 = v67;
            int v68 = *((_DWORD *)v10 + 1);
            v10[1] = v66[1];
            *((_DWORD *)v66 + 1) = v68;
            do
            {
              float v69 = v10[3];
              v10 += 2;
            }
            while (v69 > v41);
            do
            {
              float v70 = *(v66 - 1);
              v66 -= 2;
            }
            while (v70 <= v41);
          }
          while (v10 < v66);
        }
      }
      if (v10 - 2 != (float *)v9)
      {
        *(float *)unint64_t v9 = *(v10 - 2);
        *(float *)(v9 + 4) = *(v10 - 1);
      }
      *(v10 - 2) = v40;
      *(v10 - 1) = v41;
      if (v59 < v62) {
        goto LABEL_78;
      }
      BOOL v71 = sub_19E149B70((float *)v9, v10 - 2);
      uint64_t result = (float *)sub_19E149B70(v10, a2);
      if (result)
      {
        a2 = v10 - 2;
        if (v71) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v71)
      {
LABEL_78:
        uint64_t result = (float *)sub_19E148FB0(v9, v10 - 2, a3, a4 & 1);
        a4 = 0;
      }
    }
  }
  __int32 v101 = v10 + 2;
  BOOL v103 = v10 == a2 || v101 == a2;
  if (a4)
  {
    if (!v103)
    {
      uint64_t v104 = 0;
      unint64_t v105 = v10;
      do
      {
        float v107 = v105[3];
        if (v107 > v105[1])
        {
          unint64_t v108 = 0;
          int v109 = *(_DWORD *)v101;
          do
          {
            v110 = &v105[v108 / 4];
            v110[2] = v105[v108 / 4];
            v110[3] = v105[v108 / 4 + 1];
            if (v104 == v108)
            {
              unint64_t v106 = v10;
              goto LABEL_123;
            }
            v108 -= 8;
          }
          while (v107 > *(v110 - 1));
          unint64_t v106 = &v101[v108 / 4];
LABEL_123:
          *(_DWORD *)unint64_t v106 = v109;
          v106[1] = v107;
        }
        v101 += 2;
        v105 += 2;
        v104 -= 8;
      }
      while (v101 != a2);
    }
  }
  else if (!v103)
  {
    float32x4x2_t v138 = v10 + 1;
    do
    {
      float v139 = *(float *)(v9 + 12);
      float v140 = *(float *)(v9 + 4);
      unint64_t v9 = (unint64_t)v101;
      if (v139 > v140)
      {
        int v141 = *(_DWORD *)v101;
        float32x4x2_t v142 = v138;
        do
        {
          v142[1] = *(v142 - 1);
          v142[2] = *v142;
          float v143 = *(v142 - 2);
          v142 -= 2;
        }
        while (v139 > v143);
        *((_DWORD *)v142 + 1) = v141;
        v142[2] = v139;
      }
      __int32 v101 = (float *)(v9 + 8);
      v138 += 2;
    }
    while ((float *)(v9 + 8) != a2);
  }
  return result;
}

BOOL sub_19E149B70(float *a1, float *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      float v6 = *(a2 - 1);
      float v7 = a1[1];
      if (v6 > v7)
      {
        float v8 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v8;
        a1[1] = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      float v9 = a1[3];
      float v10 = a1[1];
      float v11 = *(a2 - 1);
      if (v9 <= v10)
      {
        if (v11 > v9)
        {
          int v30 = *((_DWORD *)a1 + 2);
          a1[2] = *(a2 - 2);
          *((_DWORD *)a2 - 2) = v30;
          a1[3] = v11;
          *(a2 - 1) = v9;
          float v31 = a1[3];
          float v32 = a1[1];
          if (v31 > v32)
          {
            int v33 = *(_DWORD *)a1;
            *a1 = a1[2];
            *((_DWORD *)a1 + 2) = v33;
            a1[1] = v31;
            a1[3] = v32;
          }
        }
      }
      else
      {
        int v12 = *(_DWORD *)a1;
        if (v11 <= v9)
        {
          *a1 = a1[2];
          *((_DWORD *)a1 + 2) = v12;
          a1[1] = v9;
          a1[3] = v10;
          float v37 = *(a2 - 1);
          if (v37 > v10)
          {
            a1[2] = *(a2 - 2);
            *((_DWORD *)a2 - 2) = v12;
            a1[3] = v37;
            *(a2 - 1) = v10;
          }
        }
        else
        {
          *a1 = *(a2 - 2);
          *((_DWORD *)a2 - 2) = v12;
          a1[1] = v11;
          *(a2 - 1) = v10;
        }
      }
      return result;
    case 4:
      sub_19E149F3C(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_19E149F3C(a1, a1 + 2, a1 + 4, a1 + 6);
      float v19 = *(a2 - 1);
      float v20 = a1[7];
      if (v19 <= v20) {
        return 1;
      }
      int v21 = *((_DWORD *)a1 + 6);
      a1[6] = *(a2 - 2);
      *((_DWORD *)a2 - 2) = v21;
      a1[7] = v19;
      *(a2 - 1) = v20;
      float v22 = a1[7];
      float v23 = a1[5];
      if (v22 <= v23) {
        return 1;
      }
      int v24 = *((_DWORD *)a1 + 4);
      int v25 = *((_DWORD *)a1 + 6);
      *((_DWORD *)a1 + 4) = v25;
      *((_DWORD *)a1 + 6) = v24;
      a1[5] = v22;
      a1[7] = v23;
      float v26 = a1[3];
      if (v22 <= v26) {
        return 1;
      }
      int v27 = *((_DWORD *)a1 + 2);
      *((_DWORD *)a1 + 2) = v25;
      *((_DWORD *)a1 + 4) = v27;
      a1[3] = v22;
      a1[5] = v26;
      float v28 = a1[1];
      if (v22 <= v28) {
        return 1;
      }
      float v29 = *a1;
      *(_DWORD *)a1 = v25;
      a1[2] = v29;
      a1[1] = v22;
      a1[3] = v28;
      return 1;
    default:
      float v13 = a1[1];
      float v14 = a1 + 3;
      float v15 = a1[3];
      float v16 = a1[5];
      if (v15 > v13)
      {
        float v17 = *a1;
        if (v16 <= v15)
        {
          *a1 = a1[2];
          a1[2] = v17;
          a1[1] = v15;
          a1[3] = v13;
          if (v16 <= v13) {
            goto LABEL_30;
          }
          a1[2] = a1[4];
          a1[4] = v17;
          float v18 = a1 + 3;
        }
        else
        {
          *a1 = a1[4];
          a1[4] = v17;
          float v18 = a1 + 1;
        }
        float v14 = a1 + 5;
        goto LABEL_29;
      }
      if (v16 > v15)
      {
        int v34 = *((_DWORD *)a1 + 2);
        int v35 = *((_DWORD *)a1 + 4);
        *((_DWORD *)a1 + 2) = v35;
        *((_DWORD *)a1 + 4) = v34;
        a1[3] = v16;
        a1[5] = v15;
        if (v16 > v13)
        {
          float v36 = *a1;
          *(_DWORD *)a1 = v35;
          a1[2] = v36;
          float v18 = a1 + 1;
LABEL_29:
          float *v18 = v16;
          *float v14 = v13;
        }
      }
LABEL_30:
      int v38 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v39 = 0;
      int v40 = 0;
      float v41 = a1 + 4;
      while (1)
      {
        float v42 = v38[1];
        if (v42 > v41[1]) {
          break;
        }
LABEL_39:
        float v41 = v38;
        v39 += 8;
        v38 += 2;
        if (v38 == a2) {
          return 1;
        }
      }
      int v43 = *(_DWORD *)v38;
      uint64_t v44 = v39;
      do
      {
        float v45 = (float *)((char *)a1 + v44);
        v45[6] = *(float *)((char *)a1 + v44 + 16);
        v45[7] = *(float *)((char *)a1 + v44 + 20);
        if (v44 == -16)
        {
          *(_DWORD *)a1 = v43;
          a1[1] = v42;
          if (++v40 != 8) {
            goto LABEL_39;
          }
          return v38 + 2 == a2;
        }
        v44 -= 8;
      }
      while (v42 > v45[3]);
      int v46 = (char *)a1 + v44;
      *((_DWORD *)v46 + 6) = v43;
      *((float *)v46 + 7) = v42;
      if (++v40 != 8) {
        goto LABEL_39;
      }
      return v38 + 2 == a2;
  }
}

float *sub_19E149F3C(float *result, float *a2, float *a3, float *a4)
{
  float v4 = a2[1];
  float v5 = result[1];
  float v6 = a3[1];
  if (v4 > v5)
  {
    float v7 = *result;
    if (v6 <= v4)
    {
      *BOOL result = *a2;
      *a2 = v7;
      result[1] = v4;
      a2[1] = v5;
      float v4 = a3[1];
      if (v4 <= v5) {
        goto LABEL_11;
      }
      *a2 = *a3;
      *a3 = v7;
      a2[1] = v4;
    }
    else
    {
      *BOOL result = *a3;
      *a3 = v7;
      result[1] = v6;
    }
    a3[1] = v5;
    float v4 = v5;
LABEL_11:
    float v12 = a4[1];
    if (v12 <= v4) {
      return result;
    }
    goto LABEL_14;
  }
  if (v6 <= v4)
  {
    float v4 = a3[1];
    float v12 = a4[1];
    if (v12 <= v6) {
      return result;
    }
    goto LABEL_14;
  }
  float v8 = *a2;
  *a2 = *a3;
  *a3 = v8;
  a2[1] = v6;
  a3[1] = v4;
  float v9 = a2[1];
  float v10 = result[1];
  if (v9 <= v10) {
    goto LABEL_11;
  }
  float v11 = *result;
  *BOOL result = *a2;
  *a2 = v11;
  result[1] = v9;
  a2[1] = v10;
  float v4 = a3[1];
  float v12 = a4[1];
  if (v12 <= v4) {
    return result;
  }
LABEL_14:
  float v13 = *a3;
  *a3 = *a4;
  *a4 = v13;
  a3[1] = v12;
  a4[1] = v4;
  float v14 = a3[1];
  float v15 = a2[1];
  if (v14 > v15)
  {
    float v16 = *a2;
    *a2 = *a3;
    *a3 = v16;
    a2[1] = v14;
    a3[1] = v15;
    float v17 = a2[1];
    float v18 = result[1];
    if (v17 > v18)
    {
      float v19 = *result;
      *BOOL result = *a2;
      *a2 = v19;
      result[1] = v17;
      a2[1] = v18;
    }
  }
  return result;
}

float *sub_19E14A090(float *result, float *a2, uint64_t a3, char a4)
{
  unint64_t v9 = (unint64_t)result;
LABEL_2:
  float v10 = (float *)v9;
  while (1)
  {
    unint64_t v9 = (unint64_t)v10;
    uint64_t v11 = (char *)a2 - (char *)v10;
    uint64_t v12 = ((char *)a2 - (char *)v10) >> 3;
    if (v5 || !v4)
    {
      switch(v12)
      {
        case 0:
        case 1:
          return result;
        case 2:
          float v83 = *(a2 - 1);
          float v84 = v10[1];
          if (v83 > v84)
          {
            float v85 = *v10;
            float *v10 = *(a2 - 2);
            *(a2 - 2) = v85;
            v10[1] = v83;
            *(a2 - 1) = v84;
          }
          return result;
        case 3:
          float v86 = v10[3];
          float v87 = v10[1];
          float v88 = *(a2 - 1);
          if (v86 <= v87)
          {
            if (v88 > v86)
            {
              int v136 = *((_DWORD *)v10 + 2);
              void v10[2] = *(a2 - 2);
              *((_DWORD *)a2 - 2) = v136;
              v10[3] = v88;
              *(a2 - 1) = v86;
              float v93 = v10[3];
              float v99 = v10[1];
              if (v93 > v99)
              {
                int v137 = *(_DWORD *)v10;
                float *v10 = v10[2];
                *((_DWORD *)v10 + 2) = v137;
LABEL_165:
                v10[1] = v93;
                v10[3] = v99;
              }
            }
          }
          else
          {
            int v89 = *(_DWORD *)v10;
            if (v88 <= v86)
            {
              float *v10 = v10[2];
              *((_DWORD *)v10 + 2) = v89;
              v10[1] = v86;
              v10[3] = v87;
              float v144 = *(a2 - 1);
              if (v144 <= v87) {
                return result;
              }
              void v10[2] = *(a2 - 2);
              *((_DWORD *)a2 - 2) = v89;
              v10[3] = v144;
            }
            else
            {
              float *v10 = *(a2 - 2);
              *((_DWORD *)a2 - 2) = v89;
              v10[1] = v88;
            }
            *(a2 - 1) = v87;
          }
          break;
        case 4:
          return sub_19E149F3C(v10, v10 + 2, v10 + 4, a2 - 2);
        case 5:
          BOOL result = sub_19E149F3C(v10, v10 + 2, v10 + 4, v10 + 6);
          float v90 = *(a2 - 1);
          float v91 = v10[7];
          if (v90 <= v91) {
            return result;
          }
          int v92 = *((_DWORD *)v10 + 6);
          v10[6] = *(a2 - 2);
          *((_DWORD *)a2 - 2) = v92;
          v10[7] = v90;
          *(a2 - 1) = v91;
          float v93 = v10[7];
          float v94 = v10[5];
          if (v93 <= v94) {
            return result;
          }
          int v95 = *((_DWORD *)v10 + 4);
          int v96 = *((_DWORD *)v10 + 6);
          *((_DWORD *)v10 + 4) = v96;
          *((_DWORD *)v10 + 6) = v95;
          v10[5] = v93;
          v10[7] = v94;
          float v97 = v10[3];
          if (v93 <= v97) {
            return result;
          }
          int v98 = *((_DWORD *)v10 + 2);
          *((_DWORD *)v10 + 2) = v96;
          *((_DWORD *)v10 + 4) = v98;
          v10[3] = v93;
          v10[5] = v97;
          float v99 = v10[1];
          if (v93 <= v99) {
            return result;
          }
          float v100 = *v10;
          *(_DWORD *)float v10 = v96;
          void v10[2] = v100;
          goto LABEL_165;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v11 <= 191) {
      break;
    }
    if (!a3)
    {
      if (v10 == a2) {
        return result;
      }
      int64_t v111 = (unint64_t)(v12 - 2) >> 1;
      uint64_t v112 = v10 + 2;
      int64_t v113 = v111;
      do
      {
        if (v111 >= v113)
        {
          uint64_t v115 = (2 * v113) | 1;
          unsigned long long v116 = &v112[4 * v113];
          if (2 * v113 + 2 < v12 && v116[1] > v116[3])
          {
            v116 += 2;
            uint64_t v115 = 2 * v113 + 2;
          }
          uint64_t v117 = &v10[2 * v113];
          float v118 = v117[1];
          if (v116[1] <= v118)
          {
            int v119 = *(_DWORD *)v117;
            do
            {
              unsigned long long v120 = v117;
              uint64_t v117 = v116;
              *unsigned long long v120 = *v116;
              v120[1] = v116[1];
              if (v111 < v115) {
                break;
              }
              BOOL result = (float *)(2 * v115);
              uint64_t v121 = (2 * v115) | 1;
              unsigned long long v116 = &v112[4 * v115];
              uint64_t v122 = 2 * v115 + 2;
              if (v122 < v12 && v116[1] > v116[3])
              {
                v116 += 2;
                uint64_t v121 = v122;
              }
              uint64_t v115 = v121;
            }
            while (v116[1] <= v118);
            *(_DWORD *)uint64_t v117 = v119;
            v117[1] = v118;
          }
        }
        BOOL v114 = v113-- <= 0;
      }
      while (!v114);
      uint64_t v123 = (unint64_t)v11 >> 3;
      while (2)
      {
        uint64_t v124 = 0;
        float v125 = *v10;
        float v126 = v10[1];
        v127 = v10;
        do
        {
          uint64_t v128 = v127;
          v127 += 2 * v124 + 2;
          uint64_t v129 = 2 * v124;
          uint64_t v124 = (2 * v124) | 1;
          uint64_t v130 = v129 + 2;
          if (v130 < v123 && v127[1] > v127[3])
          {
            v127 += 2;
            uint64_t v124 = v130;
          }
          *uint64_t v128 = *v127;
          v128[1] = v127[1];
        }
        while (v124 <= (uint64_t)((unint64_t)(v123 - 2) >> 1));
        if (v127 == a2 - 2)
        {
          float *v127 = v125;
          goto LABEL_147;
        }
        float *v127 = *(a2 - 2);
        v127[1] = *(a2 - 1);
        *(a2 - 2) = v125;
        *(a2 - 1) = v126;
        uint64_t v131 = (char *)v127 - (char *)v10 + 8;
        if (v131 >= 9)
        {
          unint64_t v132 = (((unint64_t)v131 >> 3) - 2) >> 1;
          uint64_t v133 = &v10[2 * v132];
          float v126 = v127[1];
          if (v133[1] > v126)
          {
            int v134 = *(_DWORD *)v127;
            do
            {
              __int32 v135 = v127;
              v127 = v133;
              float *v135 = *v133;
              v135[1] = v133[1];
              if (!v132) {
                break;
              }
              unint64_t v132 = (v132 - 1) >> 1;
              uint64_t v133 = &v10[2 * v132];
            }
            while (v133[1] > v126);
            *(_DWORD *)v127 = v134;
LABEL_147:
            v127[1] = v126;
          }
        }
        a2 -= 2;
        BOOL v114 = v123-- <= 2;
        if (v114) {
          return result;
        }
        continue;
      }
    }
    float v13 = &v10[2 * ((unint64_t)v12 >> 1)];
    float v14 = *(a2 - 1);
    if ((unint64_t)v11 < 0x401)
    {
      float v18 = v10[1];
      float v19 = v13[1];
      if (v18 > v19)
      {
        float v20 = *v13;
        if (v14 > v18)
        {
          *float v13 = *(a2 - 2);
          *(a2 - 2) = v20;
          v13[1] = v14;
          goto LABEL_32;
        }
        *float v13 = *v10;
        float *v10 = v20;
        v13[1] = v18;
        v10[1] = v19;
        float v39 = *(a2 - 1);
        if (v39 > v19)
        {
          float *v10 = *(a2 - 2);
          *(a2 - 2) = v20;
          v10[1] = v39;
LABEL_32:
          *(a2 - 1) = v19;
        }
LABEL_33:
        --a3;
        if ((a4 & 1) == 0) {
          goto LABEL_58;
        }
        goto LABEL_34;
      }
      if (v14 <= v18) {
        goto LABEL_33;
      }
      float v25 = *v10;
      float *v10 = *(a2 - 2);
      *(a2 - 2) = v25;
      v10[1] = v14;
      *(a2 - 1) = v18;
      float v26 = v10[1];
      float v27 = v13[1];
      if (v26 <= v27) {
        goto LABEL_33;
      }
      int v28 = *(_DWORD *)v13;
      *float v13 = *v10;
      *(_DWORD *)float v10 = v28;
      v13[1] = v26;
      v10[1] = v27;
      --a3;
      if (a4) {
        goto LABEL_34;
      }
LABEL_58:
      float v41 = v10[1];
      float v40 = *v10;
      if (*(v10 - 1) > v41) {
        goto LABEL_59;
      }
      if (v41 > *(a2 - 1))
      {
        uint64_t v72 = v10;
        do
        {
          float v10 = v72 + 2;
          float v73 = v72[3];
          v72 += 2;
        }
        while (v41 <= v73);
      }
      else
      {
        float32x4_t v74 = v10 + 2;
        do
        {
          float v10 = v74;
          if (v74 >= a2) {
            break;
          }
          float v75 = v74[1];
          v74 += 2;
        }
        while (v41 <= v75);
      }
      float v76 = a2;
      if (v10 < a2)
      {
        float v77 = a2;
        do
        {
          float v76 = v77 - 2;
          float v78 = *(v77 - 1);
          v77 -= 2;
        }
        while (v41 > v78);
      }
      while (v10 < v76)
      {
        float v79 = *v10;
        float *v10 = *v76;
        float *v76 = v79;
        int v80 = *((_DWORD *)v10 + 1);
        v10[1] = v76[1];
        *((_DWORD *)v76 + 1) = v80;
        do
        {
          float v81 = v10[3];
          v10 += 2;
        }
        while (v41 <= v81);
        do
        {
          float v82 = *(v76 - 1);
          v76 -= 2;
        }
        while (v41 > v82);
      }
      BOOL v4 = (unint64_t)(v10 - 2) >= v9;
      BOOL v5 = v10 - 2 == (float *)v9;
      if (v10 - 2 != (float *)v9)
      {
        *(float *)unint64_t v9 = *(v10 - 2);
        *(float *)(v9 + 4) = *(v10 - 1);
      }
      a4 = 0;
      *(v10 - 2) = v40;
      *(v10 - 1) = v41;
    }
    else
    {
      float v15 = v13[1];
      float v16 = v10[1];
      if (v15 <= v16)
      {
        if (v14 > v15)
        {
          int v21 = *(_DWORD *)v13;
          *float v13 = *(a2 - 2);
          *((_DWORD *)a2 - 2) = v21;
          v13[1] = v14;
          *(a2 - 1) = v15;
          float v22 = v13[1];
          float v23 = v10[1];
          if (v22 > v23)
          {
            float v24 = *v10;
            float *v10 = *v13;
            *float v13 = v24;
            v10[1] = v22;
            v13[1] = v23;
          }
        }
      }
      else
      {
        float v17 = *v10;
        if (v14 <= v15)
        {
          float *v10 = *v13;
          *float v13 = v17;
          v10[1] = v15;
          v13[1] = v16;
          float v29 = *(a2 - 1);
          if (v29 <= v16) {
            goto LABEL_24;
          }
          *float v13 = *(a2 - 2);
          *(a2 - 2) = v17;
          v13[1] = v29;
        }
        else
        {
          float *v10 = *(a2 - 2);
          *(a2 - 2) = v17;
          v10[1] = v14;
        }
        *(a2 - 1) = v16;
      }
LABEL_24:
      int v30 = &v10[2 * ((unint64_t)v12 >> 1)];
      float v31 = *(v30 - 1);
      float v32 = v10[3];
      float v33 = *(a2 - 3);
      if (v31 <= v32)
      {
        if (v33 > v31)
        {
          int v35 = *((_DWORD *)v30 - 2);
          *(v30 - 2) = *(a2 - 4);
          *((_DWORD *)a2 - 4) = v35;
          *(v30 - 1) = v33;
          *(a2 - 3) = v31;
          float v36 = *(v30 - 1);
          float v37 = v10[3];
          if (v36 > v37)
          {
            int v38 = *((_DWORD *)v10 + 2);
            void v10[2] = *(v30 - 2);
            *((_DWORD *)v30 - 2) = v38;
            v10[3] = v36;
            *(v30 - 1) = v37;
          }
        }
      }
      else
      {
        int v34 = *((_DWORD *)v10 + 2);
        if (v33 <= v31)
        {
          void v10[2] = *(v30 - 2);
          *((_DWORD *)v30 - 2) = v34;
          v10[3] = v31;
          *(v30 - 1) = v32;
          float v42 = *(a2 - 3);
          if (v42 <= v32) {
            goto LABEL_38;
          }
          *(v30 - 2) = *(a2 - 4);
          *((_DWORD *)a2 - 4) = v34;
          *(v30 - 1) = v42;
        }
        else
        {
          void v10[2] = *(a2 - 4);
          *((_DWORD *)a2 - 4) = v34;
          v10[3] = v33;
        }
        *(a2 - 3) = v32;
      }
LABEL_38:
      float v43 = v30[3];
      float v44 = v10[5];
      float v45 = *(a2 - 5);
      if (v43 <= v44)
      {
        if (v45 > v43)
        {
          int v47 = *((_DWORD *)v30 + 2);
          v30[2] = *(a2 - 6);
          *((_DWORD *)a2 - 6) = v47;
          v30[3] = v45;
          *(a2 - 5) = v43;
          float v48 = v30[3];
          float v49 = v10[5];
          if (v48 > v49)
          {
            int v50 = *((_DWORD *)v10 + 4);
            v10[4] = v30[2];
            *((_DWORD *)v30 + 2) = v50;
            v10[5] = v48;
            v30[3] = v49;
          }
        }
      }
      else
      {
        int v46 = *((_DWORD *)v10 + 4);
        if (v45 <= v43)
        {
          v10[4] = v30[2];
          *((_DWORD *)v30 + 2) = v46;
          v10[5] = v43;
          v30[3] = v44;
          float v51 = *(a2 - 5);
          if (v51 <= v44) {
            goto LABEL_47;
          }
          v30[2] = *(a2 - 6);
          *((_DWORD *)a2 - 6) = v46;
          v30[3] = v51;
        }
        else
        {
          v10[4] = *(a2 - 6);
          *((_DWORD *)a2 - 6) = v46;
          v10[5] = v45;
        }
        *(a2 - 5) = v44;
      }
LABEL_47:
      float v52 = v13[1];
      float v53 = *(v30 - 1);
      float v54 = v30[3];
      if (v52 <= v53)
      {
        float v55 = *v13;
        if (v54 <= v52) {
          goto LABEL_53;
        }
        float v56 = v30[2];
        *float v13 = v56;
        v30[2] = v55;
        v13[1] = v54;
        v30[3] = v52;
        if (v54 > v53)
        {
          float v55 = *(v30 - 2);
          *(v30 - 2) = v56;
          *float v13 = v55;
          *(v30 - 1) = v54;
          v13[1] = v53;
          goto LABEL_57;
        }
        goto LABEL_56;
      }
      float v55 = *(v30 - 2);
      if (v54 > v52)
      {
        *(v30 - 2) = v30[2];
        v30[2] = v55;
        *(v30 - 1) = v54;
        v30[3] = v53;
        float v55 = *v13;
LABEL_53:
        float v53 = v52;
        goto LABEL_57;
      }
      *(v30 - 2) = *v13;
      *float v13 = v55;
      *(v30 - 1) = v52;
      v13[1] = v53;
      if (v54 > v53)
      {
        float v56 = v30[2];
        *float v13 = v56;
        v30[2] = v55;
        v13[1] = v54;
        v30[3] = v53;
LABEL_56:
        float v53 = v54;
        float v55 = v56;
      }
LABEL_57:
      float v57 = *v10;
      float *v10 = v55;
      *float v13 = v57;
      int v58 = *((_DWORD *)v10 + 1);
      v10[1] = v53;
      *((_DWORD *)v30 + 1) = v58;
      --a3;
      if ((a4 & 1) == 0) {
        goto LABEL_58;
      }
LABEL_34:
      float v40 = *v10;
      float v41 = v10[1];
LABEL_59:
      float v59 = v10;
      do
      {
        float v60 = v59;
        v59 += 2;
      }
      while (v60[3] > v41);
      float v61 = a2;
      if (v60 == v10)
      {
        float v64 = a2;
        while (v59 < v64)
        {
          int v62 = v64 - 2;
          float v65 = *(v64 - 1);
          v64 -= 2;
          if (v65 > v41) {
            goto LABEL_67;
          }
        }
        int v62 = v64;
        float v10 = v59;
      }
      else
      {
        do
        {
          int v62 = v61 - 2;
          float v63 = *(v61 - 1);
          v61 -= 2;
        }
        while (v63 <= v41);
LABEL_67:
        float v10 = v59;
        if (v59 < v62)
        {
          float v66 = v62;
          do
          {
            float v67 = *v10;
            float *v10 = *v66;
            *float v66 = v67;
            int v68 = *((_DWORD *)v10 + 1);
            v10[1] = v66[1];
            *((_DWORD *)v66 + 1) = v68;
            do
            {
              float v69 = v10[3];
              v10 += 2;
            }
            while (v69 > v41);
            do
            {
              float v70 = *(v66 - 1);
              v66 -= 2;
            }
            while (v70 <= v41);
          }
          while (v10 < v66);
        }
      }
      if (v10 - 2 != (float *)v9)
      {
        *(float *)unint64_t v9 = *(v10 - 2);
        *(float *)(v9 + 4) = *(v10 - 1);
      }
      *(v10 - 2) = v40;
      *(v10 - 1) = v41;
      if (v59 < v62) {
        goto LABEL_78;
      }
      BOOL v71 = sub_19E14AC50((float *)v9, v10 - 2);
      BOOL result = (float *)sub_19E14AC50(v10, a2);
      if (result)
      {
        a2 = v10 - 2;
        if (v71) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v71)
      {
LABEL_78:
        BOOL result = (float *)sub_19E14A090(v9, v10 - 2, a3, a4 & 1);
        a4 = 0;
      }
    }
  }
  __int32 v101 = v10 + 2;
  BOOL v103 = v10 == a2 || v101 == a2;
  if (a4)
  {
    if (!v103)
    {
      uint64_t v104 = 0;
      unint64_t v105 = v10;
      do
      {
        float v107 = v105[3];
        if (v107 > v105[1])
        {
          unint64_t v108 = 0;
          int v109 = *(_DWORD *)v101;
          do
          {
            v110 = &v105[v108 / 4];
            v110[2] = v105[v108 / 4];
            v110[3] = v105[v108 / 4 + 1];
            if (v104 == v108)
            {
              unint64_t v106 = v10;
              goto LABEL_123;
            }
            v108 -= 8;
          }
          while (v107 > *(v110 - 1));
          unint64_t v106 = &v101[v108 / 4];
LABEL_123:
          *(_DWORD *)unint64_t v106 = v109;
          v106[1] = v107;
        }
        v101 += 2;
        v105 += 2;
        v104 -= 8;
      }
      while (v101 != a2);
    }
  }
  else if (!v103)
  {
    float32x4x2_t v138 = v10 + 1;
    do
    {
      float v139 = *(float *)(v9 + 12);
      float v140 = *(float *)(v9 + 4);
      unint64_t v9 = (unint64_t)v101;
      if (v139 > v140)
      {
        int v141 = *(_DWORD *)v101;
        float32x4x2_t v142 = v138;
        do
        {
          v142[1] = *(v142 - 1);
          v142[2] = *v142;
          float v143 = *(v142 - 2);
          v142 -= 2;
        }
        while (v139 > v143);
        *((_DWORD *)v142 + 1) = v141;
        v142[2] = v139;
      }
      __int32 v101 = (float *)(v9 + 8);
      v138 += 2;
    }
    while ((float *)(v9 + 8) != a2);
  }
  return result;
}

BOOL sub_19E14AC50(float *a1, float *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      float v6 = *(a2 - 1);
      float v7 = a1[1];
      if (v6 > v7)
      {
        float v8 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v8;
        a1[1] = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      float v9 = a1[3];
      float v10 = a1[1];
      float v11 = *(a2 - 1);
      if (v9 <= v10)
      {
        if (v11 > v9)
        {
          int v30 = *((_DWORD *)a1 + 2);
          a1[2] = *(a2 - 2);
          *((_DWORD *)a2 - 2) = v30;
          a1[3] = v11;
          *(a2 - 1) = v9;
          float v31 = a1[3];
          float v32 = a1[1];
          if (v31 > v32)
          {
            int v33 = *(_DWORD *)a1;
            *a1 = a1[2];
            *((_DWORD *)a1 + 2) = v33;
            a1[1] = v31;
            a1[3] = v32;
          }
        }
      }
      else
      {
        int v12 = *(_DWORD *)a1;
        if (v11 <= v9)
        {
          *a1 = a1[2];
          *((_DWORD *)a1 + 2) = v12;
          a1[1] = v9;
          a1[3] = v10;
          float v37 = *(a2 - 1);
          if (v37 > v10)
          {
            a1[2] = *(a2 - 2);
            *((_DWORD *)a2 - 2) = v12;
            a1[3] = v37;
            *(a2 - 1) = v10;
          }
        }
        else
        {
          *a1 = *(a2 - 2);
          *((_DWORD *)a2 - 2) = v12;
          a1[1] = v11;
          *(a2 - 1) = v10;
        }
      }
      return result;
    case 4:
      sub_19E149F3C(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_19E149F3C(a1, a1 + 2, a1 + 4, a1 + 6);
      float v19 = *(a2 - 1);
      float v20 = a1[7];
      if (v19 <= v20) {
        return 1;
      }
      int v21 = *((_DWORD *)a1 + 6);
      a1[6] = *(a2 - 2);
      *((_DWORD *)a2 - 2) = v21;
      a1[7] = v19;
      *(a2 - 1) = v20;
      float v22 = a1[7];
      float v23 = a1[5];
      if (v22 <= v23) {
        return 1;
      }
      int v24 = *((_DWORD *)a1 + 4);
      int v25 = *((_DWORD *)a1 + 6);
      *((_DWORD *)a1 + 4) = v25;
      *((_DWORD *)a1 + 6) = v24;
      a1[5] = v22;
      a1[7] = v23;
      float v26 = a1[3];
      if (v22 <= v26) {
        return 1;
      }
      int v27 = *((_DWORD *)a1 + 2);
      *((_DWORD *)a1 + 2) = v25;
      *((_DWORD *)a1 + 4) = v27;
      a1[3] = v22;
      a1[5] = v26;
      float v28 = a1[1];
      if (v22 <= v28) {
        return 1;
      }
      float v29 = *a1;
      *(_DWORD *)a1 = v25;
      a1[2] = v29;
      a1[1] = v22;
      a1[3] = v28;
      return 1;
    default:
      float v13 = a1[1];
      float v14 = a1 + 3;
      float v15 = a1[3];
      float v16 = a1[5];
      if (v15 > v13)
      {
        float v17 = *a1;
        if (v16 <= v15)
        {
          *a1 = a1[2];
          a1[2] = v17;
          a1[1] = v15;
          a1[3] = v13;
          if (v16 <= v13) {
            goto LABEL_30;
          }
          a1[2] = a1[4];
          a1[4] = v17;
          float v18 = a1 + 3;
        }
        else
        {
          *a1 = a1[4];
          a1[4] = v17;
          float v18 = a1 + 1;
        }
        float v14 = a1 + 5;
        goto LABEL_29;
      }
      if (v16 > v15)
      {
        int v34 = *((_DWORD *)a1 + 2);
        int v35 = *((_DWORD *)a1 + 4);
        *((_DWORD *)a1 + 2) = v35;
        *((_DWORD *)a1 + 4) = v34;
        a1[3] = v16;
        a1[5] = v15;
        if (v16 > v13)
        {
          float v36 = *a1;
          *(_DWORD *)a1 = v35;
          a1[2] = v36;
          float v18 = a1 + 1;
LABEL_29:
          float *v18 = v16;
          *float v14 = v13;
        }
      }
LABEL_30:
      int v38 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v39 = 0;
      int v40 = 0;
      float v41 = a1 + 4;
      while (1)
      {
        float v42 = v38[1];
        if (v42 > v41[1]) {
          break;
        }
LABEL_39:
        float v41 = v38;
        v39 += 8;
        v38 += 2;
        if (v38 == a2) {
          return 1;
        }
      }
      int v43 = *(_DWORD *)v38;
      uint64_t v44 = v39;
      do
      {
        float v45 = (float *)((char *)a1 + v44);
        v45[6] = *(float *)((char *)a1 + v44 + 16);
        v45[7] = *(float *)((char *)a1 + v44 + 20);
        if (v44 == -16)
        {
          *(_DWORD *)a1 = v43;
          a1[1] = v42;
          if (++v40 != 8) {
            goto LABEL_39;
          }
          return v38 + 2 == a2;
        }
        v44 -= 8;
      }
      while (v42 > v45[3]);
      int v46 = (char *)a1 + v44;
      *((_DWORD *)v46 + 6) = v43;
      *((float *)v46 + 7) = v42;
      if (++v40 != 8) {
        goto LABEL_39;
      }
      return v38 + 2 == a2;
  }
}

float *sub_19E14B01C(float *result, float *a2, uint64_t a3, char a4)
{
  unint64_t v9 = (unint64_t)result;
LABEL_2:
  float v10 = (float *)v9;
  while (1)
  {
    unint64_t v9 = (unint64_t)v10;
    uint64_t v11 = (char *)a2 - (char *)v10;
    uint64_t v12 = ((char *)a2 - (char *)v10) >> 3;
    if (v5 || !v4)
    {
      switch(v12)
      {
        case 0:
        case 1:
          return result;
        case 2:
          float v83 = *(a2 - 1);
          float v84 = v10[1];
          if (v83 > v84)
          {
            float v85 = *v10;
            float *v10 = *(a2 - 2);
            *(a2 - 2) = v85;
            v10[1] = v83;
            *(a2 - 1) = v84;
          }
          return result;
        case 3:
          float v86 = v10[3];
          float v87 = v10[1];
          float v88 = *(a2 - 1);
          if (v86 <= v87)
          {
            if (v88 > v86)
            {
              int v136 = *((_DWORD *)v10 + 2);
              void v10[2] = *(a2 - 2);
              *((_DWORD *)a2 - 2) = v136;
              v10[3] = v88;
              *(a2 - 1) = v86;
              float v93 = v10[3];
              float v99 = v10[1];
              if (v93 > v99)
              {
                int v137 = *(_DWORD *)v10;
                float *v10 = v10[2];
                *((_DWORD *)v10 + 2) = v137;
LABEL_165:
                v10[1] = v93;
                v10[3] = v99;
              }
            }
          }
          else
          {
            int v89 = *(_DWORD *)v10;
            if (v88 <= v86)
            {
              float *v10 = v10[2];
              *((_DWORD *)v10 + 2) = v89;
              v10[1] = v86;
              v10[3] = v87;
              float v144 = *(a2 - 1);
              if (v144 <= v87) {
                return result;
              }
              void v10[2] = *(a2 - 2);
              *((_DWORD *)a2 - 2) = v89;
              v10[3] = v144;
            }
            else
            {
              float *v10 = *(a2 - 2);
              *((_DWORD *)a2 - 2) = v89;
              v10[1] = v88;
            }
            *(a2 - 1) = v87;
          }
          break;
        case 4:
          return sub_19E149F3C(v10, v10 + 2, v10 + 4, a2 - 2);
        case 5:
          BOOL result = sub_19E149F3C(v10, v10 + 2, v10 + 4, v10 + 6);
          float v90 = *(a2 - 1);
          float v91 = v10[7];
          if (v90 <= v91) {
            return result;
          }
          int v92 = *((_DWORD *)v10 + 6);
          v10[6] = *(a2 - 2);
          *((_DWORD *)a2 - 2) = v92;
          v10[7] = v90;
          *(a2 - 1) = v91;
          float v93 = v10[7];
          float v94 = v10[5];
          if (v93 <= v94) {
            return result;
          }
          int v95 = *((_DWORD *)v10 + 4);
          int v96 = *((_DWORD *)v10 + 6);
          *((_DWORD *)v10 + 4) = v96;
          *((_DWORD *)v10 + 6) = v95;
          v10[5] = v93;
          v10[7] = v94;
          float v97 = v10[3];
          if (v93 <= v97) {
            return result;
          }
          int v98 = *((_DWORD *)v10 + 2);
          *((_DWORD *)v10 + 2) = v96;
          *((_DWORD *)v10 + 4) = v98;
          v10[3] = v93;
          v10[5] = v97;
          float v99 = v10[1];
          if (v93 <= v99) {
            return result;
          }
          float v100 = *v10;
          *(_DWORD *)float v10 = v96;
          void v10[2] = v100;
          goto LABEL_165;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v11 <= 191) {
      break;
    }
    if (!a3)
    {
      if (v10 == a2) {
        return result;
      }
      int64_t v111 = (unint64_t)(v12 - 2) >> 1;
      uint64_t v112 = v10 + 2;
      int64_t v113 = v111;
      do
      {
        if (v111 >= v113)
        {
          uint64_t v115 = (2 * v113) | 1;
          unsigned long long v116 = &v112[4 * v113];
          if (2 * v113 + 2 < v12 && v116[1] > v116[3])
          {
            v116 += 2;
            uint64_t v115 = 2 * v113 + 2;
          }
          uint64_t v117 = &v10[2 * v113];
          float v118 = v117[1];
          if (v116[1] <= v118)
          {
            int v119 = *(_DWORD *)v117;
            do
            {
              unsigned long long v120 = v117;
              uint64_t v117 = v116;
              *unsigned long long v120 = *v116;
              v120[1] = v116[1];
              if (v111 < v115) {
                break;
              }
              BOOL result = (float *)(2 * v115);
              uint64_t v121 = (2 * v115) | 1;
              unsigned long long v116 = &v112[4 * v115];
              uint64_t v122 = 2 * v115 + 2;
              if (v122 < v12 && v116[1] > v116[3])
              {
                v116 += 2;
                uint64_t v121 = v122;
              }
              uint64_t v115 = v121;
            }
            while (v116[1] <= v118);
            *(_DWORD *)uint64_t v117 = v119;
            v117[1] = v118;
          }
        }
        BOOL v114 = v113-- <= 0;
      }
      while (!v114);
      uint64_t v123 = (unint64_t)v11 >> 3;
      while (2)
      {
        uint64_t v124 = 0;
        float v125 = *v10;
        float v126 = v10[1];
        v127 = v10;
        do
        {
          uint64_t v128 = v127;
          v127 += 2 * v124 + 2;
          uint64_t v129 = 2 * v124;
          uint64_t v124 = (2 * v124) | 1;
          uint64_t v130 = v129 + 2;
          if (v130 < v123 && v127[1] > v127[3])
          {
            v127 += 2;
            uint64_t v124 = v130;
          }
          *uint64_t v128 = *v127;
          v128[1] = v127[1];
        }
        while (v124 <= (uint64_t)((unint64_t)(v123 - 2) >> 1));
        if (v127 == a2 - 2)
        {
          float *v127 = v125;
          goto LABEL_147;
        }
        float *v127 = *(a2 - 2);
        v127[1] = *(a2 - 1);
        *(a2 - 2) = v125;
        *(a2 - 1) = v126;
        uint64_t v131 = (char *)v127 - (char *)v10 + 8;
        if (v131 >= 9)
        {
          unint64_t v132 = (((unint64_t)v131 >> 3) - 2) >> 1;
          uint64_t v133 = &v10[2 * v132];
          float v126 = v127[1];
          if (v133[1] > v126)
          {
            int v134 = *(_DWORD *)v127;
            do
            {
              __int32 v135 = v127;
              v127 = v133;
              float *v135 = *v133;
              v135[1] = v133[1];
              if (!v132) {
                break;
              }
              unint64_t v132 = (v132 - 1) >> 1;
              uint64_t v133 = &v10[2 * v132];
            }
            while (v133[1] > v126);
            *(_DWORD *)v127 = v134;
LABEL_147:
            v127[1] = v126;
          }
        }
        a2 -= 2;
        BOOL v114 = v123-- <= 2;
        if (v114) {
          return result;
        }
        continue;
      }
    }
    float v13 = &v10[2 * ((unint64_t)v12 >> 1)];
    float v14 = *(a2 - 1);
    if ((unint64_t)v11 < 0x401)
    {
      float v18 = v10[1];
      float v19 = v13[1];
      if (v18 > v19)
      {
        float v20 = *v13;
        if (v14 > v18)
        {
          *float v13 = *(a2 - 2);
          *(a2 - 2) = v20;
          v13[1] = v14;
          goto LABEL_32;
        }
        *float v13 = *v10;
        float *v10 = v20;
        v13[1] = v18;
        v10[1] = v19;
        float v39 = *(a2 - 1);
        if (v39 > v19)
        {
          float *v10 = *(a2 - 2);
          *(a2 - 2) = v20;
          v10[1] = v39;
LABEL_32:
          *(a2 - 1) = v19;
        }
LABEL_33:
        --a3;
        if ((a4 & 1) == 0) {
          goto LABEL_58;
        }
        goto LABEL_34;
      }
      if (v14 <= v18) {
        goto LABEL_33;
      }
      float v25 = *v10;
      float *v10 = *(a2 - 2);
      *(a2 - 2) = v25;
      v10[1] = v14;
      *(a2 - 1) = v18;
      float v26 = v10[1];
      float v27 = v13[1];
      if (v26 <= v27) {
        goto LABEL_33;
      }
      int v28 = *(_DWORD *)v13;
      *float v13 = *v10;
      *(_DWORD *)float v10 = v28;
      v13[1] = v26;
      v10[1] = v27;
      --a3;
      if (a4) {
        goto LABEL_34;
      }
LABEL_58:
      float v41 = v10[1];
      float v40 = *v10;
      if (*(v10 - 1) > v41) {
        goto LABEL_59;
      }
      if (v41 > *(a2 - 1))
      {
        uint64_t v72 = v10;
        do
        {
          float v10 = v72 + 2;
          float v73 = v72[3];
          v72 += 2;
        }
        while (v41 <= v73);
      }
      else
      {
        float32x4_t v74 = v10 + 2;
        do
        {
          float v10 = v74;
          if (v74 >= a2) {
            break;
          }
          float v75 = v74[1];
          v74 += 2;
        }
        while (v41 <= v75);
      }
      float v76 = a2;
      if (v10 < a2)
      {
        float v77 = a2;
        do
        {
          float v76 = v77 - 2;
          float v78 = *(v77 - 1);
          v77 -= 2;
        }
        while (v41 > v78);
      }
      while (v10 < v76)
      {
        float v79 = *v10;
        float *v10 = *v76;
        float *v76 = v79;
        int v80 = *((_DWORD *)v10 + 1);
        v10[1] = v76[1];
        *((_DWORD *)v76 + 1) = v80;
        do
        {
          float v81 = v10[3];
          v10 += 2;
        }
        while (v41 <= v81);
        do
        {
          float v82 = *(v76 - 1);
          v76 -= 2;
        }
        while (v41 > v82);
      }
      BOOL v4 = (unint64_t)(v10 - 2) >= v9;
      BOOL v5 = v10 - 2 == (float *)v9;
      if (v10 - 2 != (float *)v9)
      {
        *(float *)unint64_t v9 = *(v10 - 2);
        *(float *)(v9 + 4) = *(v10 - 1);
      }
      a4 = 0;
      *(v10 - 2) = v40;
      *(v10 - 1) = v41;
    }
    else
    {
      float v15 = v13[1];
      float v16 = v10[1];
      if (v15 <= v16)
      {
        if (v14 > v15)
        {
          int v21 = *(_DWORD *)v13;
          *float v13 = *(a2 - 2);
          *((_DWORD *)a2 - 2) = v21;
          v13[1] = v14;
          *(a2 - 1) = v15;
          float v22 = v13[1];
          float v23 = v10[1];
          if (v22 > v23)
          {
            float v24 = *v10;
            float *v10 = *v13;
            *float v13 = v24;
            v10[1] = v22;
            v13[1] = v23;
          }
        }
      }
      else
      {
        float v17 = *v10;
        if (v14 <= v15)
        {
          float *v10 = *v13;
          *float v13 = v17;
          v10[1] = v15;
          v13[1] = v16;
          float v29 = *(a2 - 1);
          if (v29 <= v16) {
            goto LABEL_24;
          }
          *float v13 = *(a2 - 2);
          *(a2 - 2) = v17;
          v13[1] = v29;
        }
        else
        {
          float *v10 = *(a2 - 2);
          *(a2 - 2) = v17;
          v10[1] = v14;
        }
        *(a2 - 1) = v16;
      }
LABEL_24:
      int v30 = &v10[2 * ((unint64_t)v12 >> 1)];
      float v31 = *(v30 - 1);
      float v32 = v10[3];
      float v33 = *(a2 - 3);
      if (v31 <= v32)
      {
        if (v33 > v31)
        {
          int v35 = *((_DWORD *)v30 - 2);
          *(v30 - 2) = *(a2 - 4);
          *((_DWORD *)a2 - 4) = v35;
          *(v30 - 1) = v33;
          *(a2 - 3) = v31;
          float v36 = *(v30 - 1);
          float v37 = v10[3];
          if (v36 > v37)
          {
            int v38 = *((_DWORD *)v10 + 2);
            void v10[2] = *(v30 - 2);
            *((_DWORD *)v30 - 2) = v38;
            v10[3] = v36;
            *(v30 - 1) = v37;
          }
        }
      }
      else
      {
        int v34 = *((_DWORD *)v10 + 2);
        if (v33 <= v31)
        {
          void v10[2] = *(v30 - 2);
          *((_DWORD *)v30 - 2) = v34;
          v10[3] = v31;
          *(v30 - 1) = v32;
          float v42 = *(a2 - 3);
          if (v42 <= v32) {
            goto LABEL_38;
          }
          *(v30 - 2) = *(a2 - 4);
          *((_DWORD *)a2 - 4) = v34;
          *(v30 - 1) = v42;
        }
        else
        {
          void v10[2] = *(a2 - 4);
          *((_DWORD *)a2 - 4) = v34;
          v10[3] = v33;
        }
        *(a2 - 3) = v32;
      }
LABEL_38:
      float v43 = v30[3];
      float v44 = v10[5];
      float v45 = *(a2 - 5);
      if (v43 <= v44)
      {
        if (v45 > v43)
        {
          int v47 = *((_DWORD *)v30 + 2);
          v30[2] = *(a2 - 6);
          *((_DWORD *)a2 - 6) = v47;
          v30[3] = v45;
          *(a2 - 5) = v43;
          float v48 = v30[3];
          float v49 = v10[5];
          if (v48 > v49)
          {
            int v50 = *((_DWORD *)v10 + 4);
            v10[4] = v30[2];
            *((_DWORD *)v30 + 2) = v50;
            v10[5] = v48;
            v30[3] = v49;
          }
        }
      }
      else
      {
        int v46 = *((_DWORD *)v10 + 4);
        if (v45 <= v43)
        {
          v10[4] = v30[2];
          *((_DWORD *)v30 + 2) = v46;
          v10[5] = v43;
          v30[3] = v44;
          float v51 = *(a2 - 5);
          if (v51 <= v44) {
            goto LABEL_47;
          }
          v30[2] = *(a2 - 6);
          *((_DWORD *)a2 - 6) = v46;
          v30[3] = v51;
        }
        else
        {
          v10[4] = *(a2 - 6);
          *((_DWORD *)a2 - 6) = v46;
          v10[5] = v45;
        }
        *(a2 - 5) = v44;
      }
LABEL_47:
      float v52 = v13[1];
      float v53 = *(v30 - 1);
      float v54 = v30[3];
      if (v52 <= v53)
      {
        float v55 = *v13;
        if (v54 <= v52) {
          goto LABEL_53;
        }
        float v56 = v30[2];
        *float v13 = v56;
        v30[2] = v55;
        v13[1] = v54;
        v30[3] = v52;
        if (v54 > v53)
        {
          float v55 = *(v30 - 2);
          *(v30 - 2) = v56;
          *float v13 = v55;
          *(v30 - 1) = v54;
          v13[1] = v53;
          goto LABEL_57;
        }
        goto LABEL_56;
      }
      float v55 = *(v30 - 2);
      if (v54 > v52)
      {
        *(v30 - 2) = v30[2];
        v30[2] = v55;
        *(v30 - 1) = v54;
        v30[3] = v53;
        float v55 = *v13;
LABEL_53:
        float v53 = v52;
        goto LABEL_57;
      }
      *(v30 - 2) = *v13;
      *float v13 = v55;
      *(v30 - 1) = v52;
      v13[1] = v53;
      if (v54 > v53)
      {
        float v56 = v30[2];
        *float v13 = v56;
        v30[2] = v55;
        v13[1] = v54;
        v30[3] = v53;
LABEL_56:
        float v53 = v54;
        float v55 = v56;
      }
LABEL_57:
      float v57 = *v10;
      float *v10 = v55;
      *float v13 = v57;
      int v58 = *((_DWORD *)v10 + 1);
      v10[1] = v53;
      *((_DWORD *)v30 + 1) = v58;
      --a3;
      if ((a4 & 1) == 0) {
        goto LABEL_58;
      }
LABEL_34:
      float v40 = *v10;
      float v41 = v10[1];
LABEL_59:
      float v59 = v10;
      do
      {
        float v60 = v59;
        v59 += 2;
      }
      while (v60[3] > v41);
      float v61 = a2;
      if (v60 == v10)
      {
        float v64 = a2;
        while (v59 < v64)
        {
          int v62 = v64 - 2;
          float v65 = *(v64 - 1);
          v64 -= 2;
          if (v65 > v41) {
            goto LABEL_67;
          }
        }
        int v62 = v64;
        float v10 = v59;
      }
      else
      {
        do
        {
          int v62 = v61 - 2;
          float v63 = *(v61 - 1);
          v61 -= 2;
        }
        while (v63 <= v41);
LABEL_67:
        float v10 = v59;
        if (v59 < v62)
        {
          float v66 = v62;
          do
          {
            float v67 = *v10;
            float *v10 = *v66;
            *float v66 = v67;
            int v68 = *((_DWORD *)v10 + 1);
            v10[1] = v66[1];
            *((_DWORD *)v66 + 1) = v68;
            do
            {
              float v69 = v10[3];
              v10 += 2;
            }
            while (v69 > v41);
            do
            {
              float v70 = *(v66 - 1);
              v66 -= 2;
            }
            while (v70 <= v41);
          }
          while (v10 < v66);
        }
      }
      if (v10 - 2 != (float *)v9)
      {
        *(float *)unint64_t v9 = *(v10 - 2);
        *(float *)(v9 + 4) = *(v10 - 1);
      }
      *(v10 - 2) = v40;
      *(v10 - 1) = v41;
      if (v59 < v62) {
        goto LABEL_78;
      }
      BOOL v71 = sub_19E14BBDC((float *)v9, v10 - 2);
      BOOL result = (float *)sub_19E14BBDC(v10, a2);
      if (result)
      {
        a2 = v10 - 2;
        if (v71) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v71)
      {
LABEL_78:
        BOOL result = (float *)sub_19E14B01C(v9, v10 - 2, a3, a4 & 1);
        a4 = 0;
      }
    }
  }
  __int32 v101 = v10 + 2;
  BOOL v103 = v10 == a2 || v101 == a2;
  if (a4)
  {
    if (!v103)
    {
      uint64_t v104 = 0;
      unint64_t v105 = v10;
      do
      {
        float v107 = v105[3];
        if (v107 > v105[1])
        {
          unint64_t v108 = 0;
          int v109 = *(_DWORD *)v101;
          do
          {
            v110 = &v105[v108 / 4];
            v110[2] = v105[v108 / 4];
            v110[3] = v105[v108 / 4 + 1];
            if (v104 == v108)
            {
              unint64_t v106 = v10;
              goto LABEL_123;
            }
            v108 -= 8;
          }
          while (v107 > *(v110 - 1));
          unint64_t v106 = &v101[v108 / 4];
LABEL_123:
          *(_DWORD *)unint64_t v106 = v109;
          v106[1] = v107;
        }
        v101 += 2;
        v105 += 2;
        v104 -= 8;
      }
      while (v101 != a2);
    }
  }
  else if (!v103)
  {
    float32x4x2_t v138 = v10 + 1;
    do
    {
      float v139 = *(float *)(v9 + 12);
      float v140 = *(float *)(v9 + 4);
      unint64_t v9 = (unint64_t)v101;
      if (v139 > v140)
      {
        int v141 = *(_DWORD *)v101;
        float32x4x2_t v142 = v138;
        do
        {
          v142[1] = *(v142 - 1);
          v142[2] = *v142;
          float v143 = *(v142 - 2);
          v142 -= 2;
        }
        while (v139 > v143);
        *((_DWORD *)v142 + 1) = v141;
        v142[2] = v139;
      }
      __int32 v101 = (float *)(v9 + 8);
      v138 += 2;
    }
    while ((float *)(v9 + 8) != a2);
  }
  return result;
}

BOOL sub_19E14BBDC(float *a1, float *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      float v6 = *(a2 - 1);
      float v7 = a1[1];
      if (v6 > v7)
      {
        float v8 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v8;
        a1[1] = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      float v9 = a1[3];
      float v10 = a1[1];
      float v11 = *(a2 - 1);
      if (v9 <= v10)
      {
        if (v11 > v9)
        {
          int v30 = *((_DWORD *)a1 + 2);
          a1[2] = *(a2 - 2);
          *((_DWORD *)a2 - 2) = v30;
          a1[3] = v11;
          *(a2 - 1) = v9;
          float v31 = a1[3];
          float v32 = a1[1];
          if (v31 > v32)
          {
            int v33 = *(_DWORD *)a1;
            *a1 = a1[2];
            *((_DWORD *)a1 + 2) = v33;
            a1[1] = v31;
            a1[3] = v32;
          }
        }
      }
      else
      {
        int v12 = *(_DWORD *)a1;
        if (v11 <= v9)
        {
          *a1 = a1[2];
          *((_DWORD *)a1 + 2) = v12;
          a1[1] = v9;
          a1[3] = v10;
          float v37 = *(a2 - 1);
          if (v37 > v10)
          {
            a1[2] = *(a2 - 2);
            *((_DWORD *)a2 - 2) = v12;
            a1[3] = v37;
            *(a2 - 1) = v10;
          }
        }
        else
        {
          *a1 = *(a2 - 2);
          *((_DWORD *)a2 - 2) = v12;
          a1[1] = v11;
          *(a2 - 1) = v10;
        }
      }
      return result;
    case 4:
      sub_19E149F3C(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_19E149F3C(a1, a1 + 2, a1 + 4, a1 + 6);
      float v19 = *(a2 - 1);
      float v20 = a1[7];
      if (v19 <= v20) {
        return 1;
      }
      int v21 = *((_DWORD *)a1 + 6);
      a1[6] = *(a2 - 2);
      *((_DWORD *)a2 - 2) = v21;
      a1[7] = v19;
      *(a2 - 1) = v20;
      float v22 = a1[7];
      float v23 = a1[5];
      if (v22 <= v23) {
        return 1;
      }
      int v24 = *((_DWORD *)a1 + 4);
      int v25 = *((_DWORD *)a1 + 6);
      *((_DWORD *)a1 + 4) = v25;
      *((_DWORD *)a1 + 6) = v24;
      a1[5] = v22;
      a1[7] = v23;
      float v26 = a1[3];
      if (v22 <= v26) {
        return 1;
      }
      int v27 = *((_DWORD *)a1 + 2);
      *((_DWORD *)a1 + 2) = v25;
      *((_DWORD *)a1 + 4) = v27;
      a1[3] = v22;
      a1[5] = v26;
      float v28 = a1[1];
      if (v22 <= v28) {
        return 1;
      }
      float v29 = *a1;
      *(_DWORD *)a1 = v25;
      a1[2] = v29;
      a1[1] = v22;
      a1[3] = v28;
      return 1;
    default:
      float v13 = a1[1];
      float v14 = a1 + 3;
      float v15 = a1[3];
      float v16 = a1[5];
      if (v15 > v13)
      {
        float v17 = *a1;
        if (v16 <= v15)
        {
          *a1 = a1[2];
          a1[2] = v17;
          a1[1] = v15;
          a1[3] = v13;
          if (v16 <= v13) {
            goto LABEL_30;
          }
          a1[2] = a1[4];
          a1[4] = v17;
          float v18 = a1 + 3;
        }
        else
        {
          *a1 = a1[4];
          a1[4] = v17;
          float v18 = a1 + 1;
        }
        float v14 = a1 + 5;
        goto LABEL_29;
      }
      if (v16 > v15)
      {
        int v34 = *((_DWORD *)a1 + 2);
        int v35 = *((_DWORD *)a1 + 4);
        *((_DWORD *)a1 + 2) = v35;
        *((_DWORD *)a1 + 4) = v34;
        a1[3] = v16;
        a1[5] = v15;
        if (v16 > v13)
        {
          float v36 = *a1;
          *(_DWORD *)a1 = v35;
          a1[2] = v36;
          float v18 = a1 + 1;
LABEL_29:
          float *v18 = v16;
          *float v14 = v13;
        }
      }
LABEL_30:
      int v38 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v39 = 0;
      int v40 = 0;
      float v41 = a1 + 4;
      while (1)
      {
        float v42 = v38[1];
        if (v42 > v41[1]) {
          break;
        }
LABEL_39:
        float v41 = v38;
        v39 += 8;
        v38 += 2;
        if (v38 == a2) {
          return 1;
        }
      }
      int v43 = *(_DWORD *)v38;
      uint64_t v44 = v39;
      do
      {
        float v45 = (float *)((char *)a1 + v44);
        v45[6] = *(float *)((char *)a1 + v44 + 16);
        v45[7] = *(float *)((char *)a1 + v44 + 20);
        if (v44 == -16)
        {
          *(_DWORD *)a1 = v43;
          a1[1] = v42;
          if (++v40 != 8) {
            goto LABEL_39;
          }
          return v38 + 2 == a2;
        }
        v44 -= 8;
      }
      while (v42 > v45[3]);
      int v46 = (char *)a1 + v44;
      *((_DWORD *)v46 + 6) = v43;
      *((float *)v46 + 7) = v42;
      if (++v40 != 8) {
        goto LABEL_39;
      }
      return v38 + 2 == a2;
  }
}

float *sub_19E14BFA8(float *result, float *a2, uint64_t a3, char a4)
{
  unint64_t v9 = (unint64_t)result;
LABEL_2:
  float v10 = (float *)v9;
  while (1)
  {
    unint64_t v9 = (unint64_t)v10;
    uint64_t v11 = (char *)a2 - (char *)v10;
    uint64_t v12 = ((char *)a2 - (char *)v10) >> 3;
    if (v5 || !v4)
    {
      switch(v12)
      {
        case 0:
        case 1:
          return result;
        case 2:
          float v83 = *(a2 - 1);
          float v84 = v10[1];
          if (v83 > v84)
          {
            float v85 = *v10;
            float *v10 = *(a2 - 2);
            *(a2 - 2) = v85;
            v10[1] = v83;
            *(a2 - 1) = v84;
          }
          return result;
        case 3:
          float v86 = v10[3];
          float v87 = v10[1];
          float v88 = *(a2 - 1);
          if (v86 <= v87)
          {
            if (v88 > v86)
            {
              int v136 = *((_DWORD *)v10 + 2);
              void v10[2] = *(a2 - 2);
              *((_DWORD *)a2 - 2) = v136;
              v10[3] = v88;
              *(a2 - 1) = v86;
              float v93 = v10[3];
              float v99 = v10[1];
              if (v93 > v99)
              {
                int v137 = *(_DWORD *)v10;
                float *v10 = v10[2];
                *((_DWORD *)v10 + 2) = v137;
LABEL_165:
                v10[1] = v93;
                v10[3] = v99;
              }
            }
          }
          else
          {
            int v89 = *(_DWORD *)v10;
            if (v88 <= v86)
            {
              float *v10 = v10[2];
              *((_DWORD *)v10 + 2) = v89;
              v10[1] = v86;
              v10[3] = v87;
              float v144 = *(a2 - 1);
              if (v144 <= v87) {
                return result;
              }
              void v10[2] = *(a2 - 2);
              *((_DWORD *)a2 - 2) = v89;
              v10[3] = v144;
            }
            else
            {
              float *v10 = *(a2 - 2);
              *((_DWORD *)a2 - 2) = v89;
              v10[1] = v88;
            }
            *(a2 - 1) = v87;
          }
          break;
        case 4:
          return sub_19E149F3C(v10, v10 + 2, v10 + 4, a2 - 2);
        case 5:
          BOOL result = sub_19E149F3C(v10, v10 + 2, v10 + 4, v10 + 6);
          float v90 = *(a2 - 1);
          float v91 = v10[7];
          if (v90 <= v91) {
            return result;
          }
          int v92 = *((_DWORD *)v10 + 6);
          v10[6] = *(a2 - 2);
          *((_DWORD *)a2 - 2) = v92;
          v10[7] = v90;
          *(a2 - 1) = v91;
          float v93 = v10[7];
          float v94 = v10[5];
          if (v93 <= v94) {
            return result;
          }
          int v95 = *((_DWORD *)v10 + 4);
          int v96 = *((_DWORD *)v10 + 6);
          *((_DWORD *)v10 + 4) = v96;
          *((_DWORD *)v10 + 6) = v95;
          v10[5] = v93;
          v10[7] = v94;
          float v97 = v10[3];
          if (v93 <= v97) {
            return result;
          }
          int v98 = *((_DWORD *)v10 + 2);
          *((_DWORD *)v10 + 2) = v96;
          *((_DWORD *)v10 + 4) = v98;
          v10[3] = v93;
          v10[5] = v97;
          float v99 = v10[1];
          if (v93 <= v99) {
            return result;
          }
          float v100 = *v10;
          *(_DWORD *)float v10 = v96;
          void v10[2] = v100;
          goto LABEL_165;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v11 <= 191) {
      break;
    }
    if (!a3)
    {
      if (v10 == a2) {
        return result;
      }
      int64_t v111 = (unint64_t)(v12 - 2) >> 1;
      uint64_t v112 = v10 + 2;
      int64_t v113 = v111;
      do
      {
        if (v111 >= v113)
        {
          uint64_t v115 = (2 * v113) | 1;
          unsigned long long v116 = &v112[4 * v113];
          if (2 * v113 + 2 < v12 && v116[1] > v116[3])
          {
            v116 += 2;
            uint64_t v115 = 2 * v113 + 2;
          }
          uint64_t v117 = &v10[2 * v113];
          float v118 = v117[1];
          if (v116[1] <= v118)
          {
            int v119 = *(_DWORD *)v117;
            do
            {
              unsigned long long v120 = v117;
              uint64_t v117 = v116;
              *unsigned long long v120 = *v116;
              v120[1] = v116[1];
              if (v111 < v115) {
                break;
              }
              BOOL result = (float *)(2 * v115);
              uint64_t v121 = (2 * v115) | 1;
              unsigned long long v116 = &v112[4 * v115];
              uint64_t v122 = 2 * v115 + 2;
              if (v122 < v12 && v116[1] > v116[3])
              {
                v116 += 2;
                uint64_t v121 = v122;
              }
              uint64_t v115 = v121;
            }
            while (v116[1] <= v118);
            *(_DWORD *)uint64_t v117 = v119;
            v117[1] = v118;
          }
        }
        BOOL v114 = v113-- <= 0;
      }
      while (!v114);
      uint64_t v123 = (unint64_t)v11 >> 3;
      while (2)
      {
        uint64_t v124 = 0;
        float v125 = *v10;
        float v126 = v10[1];
        v127 = v10;
        do
        {
          uint64_t v128 = v127;
          v127 += 2 * v124 + 2;
          uint64_t v129 = 2 * v124;
          uint64_t v124 = (2 * v124) | 1;
          uint64_t v130 = v129 + 2;
          if (v130 < v123 && v127[1] > v127[3])
          {
            v127 += 2;
            uint64_t v124 = v130;
          }
          *uint64_t v128 = *v127;
          v128[1] = v127[1];
        }
        while (v124 <= (uint64_t)((unint64_t)(v123 - 2) >> 1));
        if (v127 == a2 - 2)
        {
          float *v127 = v125;
          goto LABEL_147;
        }
        float *v127 = *(a2 - 2);
        v127[1] = *(a2 - 1);
        *(a2 - 2) = v125;
        *(a2 - 1) = v126;
        uint64_t v131 = (char *)v127 - (char *)v10 + 8;
        if (v131 >= 9)
        {
          unint64_t v132 = (((unint64_t)v131 >> 3) - 2) >> 1;
          uint64_t v133 = &v10[2 * v132];
          float v126 = v127[1];
          if (v133[1] > v126)
          {
            int v134 = *(_DWORD *)v127;
            do
            {
              __int32 v135 = v127;
              v127 = v133;
              float *v135 = *v133;
              v135[1] = v133[1];
              if (!v132) {
                break;
              }
              unint64_t v132 = (v132 - 1) >> 1;
              uint64_t v133 = &v10[2 * v132];
            }
            while (v133[1] > v126);
            *(_DWORD *)v127 = v134;
LABEL_147:
            v127[1] = v126;
          }
        }
        a2 -= 2;
        BOOL v114 = v123-- <= 2;
        if (v114) {
          return result;
        }
        continue;
      }
    }
    float v13 = &v10[2 * ((unint64_t)v12 >> 1)];
    float v14 = *(a2 - 1);
    if ((unint64_t)v11 < 0x401)
    {
      float v18 = v10[1];
      float v19 = v13[1];
      if (v18 > v19)
      {
        float v20 = *v13;
        if (v14 > v18)
        {
          *float v13 = *(a2 - 2);
          *(a2 - 2) = v20;
          v13[1] = v14;
          goto LABEL_32;
        }
        *float v13 = *v10;
        float *v10 = v20;
        v13[1] = v18;
        v10[1] = v19;
        float v39 = *(a2 - 1);
        if (v39 > v19)
        {
          float *v10 = *(a2 - 2);
          *(a2 - 2) = v20;
          v10[1] = v39;
LABEL_32:
          *(a2 - 1) = v19;
        }
LABEL_33:
        --a3;
        if ((a4 & 1) == 0) {
          goto LABEL_58;
        }
        goto LABEL_34;
      }
      if (v14 <= v18) {
        goto LABEL_33;
      }
      float v25 = *v10;
      float *v10 = *(a2 - 2);
      *(a2 - 2) = v25;
      v10[1] = v14;
      *(a2 - 1) = v18;
      float v26 = v10[1];
      float v27 = v13[1];
      if (v26 <= v27) {
        goto LABEL_33;
      }
      int v28 = *(_DWORD *)v13;
      *float v13 = *v10;
      *(_DWORD *)float v10 = v28;
      v13[1] = v26;
      v10[1] = v27;
      --a3;
      if (a4) {
        goto LABEL_34;
      }
LABEL_58:
      float v41 = v10[1];
      float v40 = *v10;
      if (*(v10 - 1) > v41) {
        goto LABEL_59;
      }
      if (v41 > *(a2 - 1))
      {
        uint64_t v72 = v10;
        do
        {
          float v10 = v72 + 2;
          float v73 = v72[3];
          v72 += 2;
        }
        while (v41 <= v73);
      }
      else
      {
        float32x4_t v74 = v10 + 2;
        do
        {
          float v10 = v74;
          if (v74 >= a2) {
            break;
          }
          float v75 = v74[1];
          v74 += 2;
        }
        while (v41 <= v75);
      }
      float v76 = a2;
      if (v10 < a2)
      {
        float v77 = a2;
        do
        {
          float v76 = v77 - 2;
          float v78 = *(v77 - 1);
          v77 -= 2;
        }
        while (v41 > v78);
      }
      while (v10 < v76)
      {
        float v79 = *v10;
        float *v10 = *v76;
        float *v76 = v79;
        int v80 = *((_DWORD *)v10 + 1);
        v10[1] = v76[1];
        *((_DWORD *)v76 + 1) = v80;
        do
        {
          float v81 = v10[3];
          v10 += 2;
        }
        while (v41 <= v81);
        do
        {
          float v82 = *(v76 - 1);
          v76 -= 2;
        }
        while (v41 > v82);
      }
      BOOL v4 = (unint64_t)(v10 - 2) >= v9;
      BOOL v5 = v10 - 2 == (float *)v9;
      if (v10 - 2 != (float *)v9)
      {
        *(float *)unint64_t v9 = *(v10 - 2);
        *(float *)(v9 + 4) = *(v10 - 1);
      }
      a4 = 0;
      *(v10 - 2) = v40;
      *(v10 - 1) = v41;
    }
    else
    {
      float v15 = v13[1];
      float v16 = v10[1];
      if (v15 <= v16)
      {
        if (v14 > v15)
        {
          int v21 = *(_DWORD *)v13;
          *float v13 = *(a2 - 2);
          *((_DWORD *)a2 - 2) = v21;
          v13[1] = v14;
          *(a2 - 1) = v15;
          float v22 = v13[1];
          float v23 = v10[1];
          if (v22 > v23)
          {
            float v24 = *v10;
            float *v10 = *v13;
            *float v13 = v24;
            v10[1] = v22;
            v13[1] = v23;
          }
        }
      }
      else
      {
        float v17 = *v10;
        if (v14 <= v15)
        {
          float *v10 = *v13;
          *float v13 = v17;
          v10[1] = v15;
          v13[1] = v16;
          float v29 = *(a2 - 1);
          if (v29 <= v16) {
            goto LABEL_24;
          }
          *float v13 = *(a2 - 2);
          *(a2 - 2) = v17;
          v13[1] = v29;
        }
        else
        {
          float *v10 = *(a2 - 2);
          *(a2 - 2) = v17;
          v10[1] = v14;
        }
        *(a2 - 1) = v16;
      }
LABEL_24:
      int v30 = &v10[2 * ((unint64_t)v12 >> 1)];
      float v31 = *(v30 - 1);
      float v32 = v10[3];
      float v33 = *(a2 - 3);
      if (v31 <= v32)
      {
        if (v33 > v31)
        {
          int v35 = *((_DWORD *)v30 - 2);
          *(v30 - 2) = *(a2 - 4);
          *((_DWORD *)a2 - 4) = v35;
          *(v30 - 1) = v33;
          *(a2 - 3) = v31;
          float v36 = *(v30 - 1);
          float v37 = v10[3];
          if (v36 > v37)
          {
            int v38 = *((_DWORD *)v10 + 2);
            void v10[2] = *(v30 - 2);
            *((_DWORD *)v30 - 2) = v38;
            v10[3] = v36;
            *(v30 - 1) = v37;
          }
        }
      }
      else
      {
        int v34 = *((_DWORD *)v10 + 2);
        if (v33 <= v31)
        {
          void v10[2] = *(v30 - 2);
          *((_DWORD *)v30 - 2) = v34;
          v10[3] = v31;
          *(v30 - 1) = v32;
          float v42 = *(a2 - 3);
          if (v42 <= v32) {
            goto LABEL_38;
          }
          *(v30 - 2) = *(a2 - 4);
          *((_DWORD *)a2 - 4) = v34;
          *(v30 - 1) = v42;
        }
        else
        {
          void v10[2] = *(a2 - 4);
          *((_DWORD *)a2 - 4) = v34;
          v10[3] = v33;
        }
        *(a2 - 3) = v32;
      }
LABEL_38:
      float v43 = v30[3];
      float v44 = v10[5];
      float v45 = *(a2 - 5);
      if (v43 <= v44)
      {
        if (v45 > v43)
        {
          int v47 = *((_DWORD *)v30 + 2);
          v30[2] = *(a2 - 6);
          *((_DWORD *)a2 - 6) = v47;
          v30[3] = v45;
          *(a2 - 5) = v43;
          float v48 = v30[3];
          float v49 = v10[5];
          if (v48 > v49)
          {
            int v50 = *((_DWORD *)v10 + 4);
            v10[4] = v30[2];
            *((_DWORD *)v30 + 2) = v50;
            v10[5] = v48;
            v30[3] = v49;
          }
        }
      }
      else
      {
        int v46 = *((_DWORD *)v10 + 4);
        if (v45 <= v43)
        {
          v10[4] = v30[2];
          *((_DWORD *)v30 + 2) = v46;
          v10[5] = v43;
          v30[3] = v44;
          float v51 = *(a2 - 5);
          if (v51 <= v44) {
            goto LABEL_47;
          }
          v30[2] = *(a2 - 6);
          *((_DWORD *)a2 - 6) = v46;
          v30[3] = v51;
        }
        else
        {
          v10[4] = *(a2 - 6);
          *((_DWORD *)a2 - 6) = v46;
          v10[5] = v45;
        }
        *(a2 - 5) = v44;
      }
LABEL_47:
      float v52 = v13[1];
      float v53 = *(v30 - 1);
      float v54 = v30[3];
      if (v52 <= v53)
      {
        float v55 = *v13;
        if (v54 <= v52) {
          goto LABEL_53;
        }
        float v56 = v30[2];
        *float v13 = v56;
        v30[2] = v55;
        v13[1] = v54;
        v30[3] = v52;
        if (v54 > v53)
        {
          float v55 = *(v30 - 2);
          *(v30 - 2) = v56;
          *float v13 = v55;
          *(v30 - 1) = v54;
          v13[1] = v53;
          goto LABEL_57;
        }
        goto LABEL_56;
      }
      float v55 = *(v30 - 2);
      if (v54 > v52)
      {
        *(v30 - 2) = v30[2];
        v30[2] = v55;
        *(v30 - 1) = v54;
        v30[3] = v53;
        float v55 = *v13;
LABEL_53:
        float v53 = v52;
        goto LABEL_57;
      }
      *(v30 - 2) = *v13;
      *float v13 = v55;
      *(v30 - 1) = v52;
      v13[1] = v53;
      if (v54 > v53)
      {
        float v56 = v30[2];
        *float v13 = v56;
        v30[2] = v55;
        v13[1] = v54;
        v30[3] = v53;
LABEL_56:
        float v53 = v54;
        float v55 = v56;
      }
LABEL_57:
      float v57 = *v10;
      float *v10 = v55;
      *float v13 = v57;
      int v58 = *((_DWORD *)v10 + 1);
      v10[1] = v53;
      *((_DWORD *)v30 + 1) = v58;
      --a3;
      if ((a4 & 1) == 0) {
        goto LABEL_58;
      }
LABEL_34:
      float v40 = *v10;
      float v41 = v10[1];
LABEL_59:
      float v59 = v10;
      do
      {
        float v60 = v59;
        v59 += 2;
      }
      while (v60[3] > v41);
      float v61 = a2;
      if (v60 == v10)
      {
        float v64 = a2;
        while (v59 < v64)
        {
          int v62 = v64 - 2;
          float v65 = *(v64 - 1);
          v64 -= 2;
          if (v65 > v41) {
            goto LABEL_67;
          }
        }
        int v62 = v64;
        float v10 = v59;
      }
      else
      {
        do
        {
          int v62 = v61 - 2;
          float v63 = *(v61 - 1);
          v61 -= 2;
        }
        while (v63 <= v41);
LABEL_67:
        float v10 = v59;
        if (v59 < v62)
        {
          float v66 = v62;
          do
          {
            float v67 = *v10;
            float *v10 = *v66;
            *float v66 = v67;
            int v68 = *((_DWORD *)v10 + 1);
            v10[1] = v66[1];
            *((_DWORD *)v66 + 1) = v68;
            do
            {
              float v69 = v10[3];
              v10 += 2;
            }
            while (v69 > v41);
            do
            {
              float v70 = *(v66 - 1);
              v66 -= 2;
            }
            while (v70 <= v41);
          }
          while (v10 < v66);
        }
      }
      if (v10 - 2 != (float *)v9)
      {
        *(float *)unint64_t v9 = *(v10 - 2);
        *(float *)(v9 + 4) = *(v10 - 1);
      }
      *(v10 - 2) = v40;
      *(v10 - 1) = v41;
      if (v59 < v62) {
        goto LABEL_78;
      }
      BOOL v71 = sub_19E14CB68((float *)v9, v10 - 2);
      BOOL result = (float *)sub_19E14CB68(v10, a2);
      if (result)
      {
        a2 = v10 - 2;
        if (v71) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v71)
      {
LABEL_78:
        BOOL result = (float *)sub_19E14BFA8(v9, v10 - 2, a3, a4 & 1);
        a4 = 0;
      }
    }
  }
  __int32 v101 = v10 + 2;
  BOOL v103 = v10 == a2 || v101 == a2;
  if (a4)
  {
    if (!v103)
    {
      uint64_t v104 = 0;
      unint64_t v105 = v10;
      do
      {
        float v107 = v105[3];
        if (v107 > v105[1])
        {
          unint64_t v108 = 0;
          int v109 = *(_DWORD *)v101;
          do
          {
            v110 = &v105[v108 / 4];
            v110[2] = v105[v108 / 4];
            v110[3] = v105[v108 / 4 + 1];
            if (v104 == v108)
            {
              unint64_t v106 = v10;
              goto LABEL_123;
            }
            v108 -= 8;
          }
          while (v107 > *(v110 - 1));
          unint64_t v106 = &v101[v108 / 4];
LABEL_123:
          *(_DWORD *)unint64_t v106 = v109;
          v106[1] = v107;
        }
        v101 += 2;
        v105 += 2;
        v104 -= 8;
      }
      while (v101 != a2);
    }
  }
  else if (!v103)
  {
    float32x4x2_t v138 = v10 + 1;
    do
    {
      float v139 = *(float *)(v9 + 12);
      float v140 = *(float *)(v9 + 4);
      unint64_t v9 = (unint64_t)v101;
      if (v139 > v140)
      {
        int v141 = *(_DWORD *)v101;
        float32x4x2_t v142 = v138;
        do
        {
          v142[1] = *(v142 - 1);
          v142[2] = *v142;
          float v143 = *(v142 - 2);
          v142 -= 2;
        }
        while (v139 > v143);
        *((_DWORD *)v142 + 1) = v141;
        v142[2] = v139;
      }
      __int32 v101 = (float *)(v9 + 8);
      v138 += 2;
    }
    while ((float *)(v9 + 8) != a2);
  }
  return result;
}

BOOL sub_19E14CB68(float *a1, float *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      float v6 = *(a2 - 1);
      float v7 = a1[1];
      if (v6 > v7)
      {
        float v8 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v8;
        a1[1] = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      float v9 = a1[3];
      float v10 = a1[1];
      float v11 = *(a2 - 1);
      if (v9 <= v10)
      {
        if (v11 > v9)
        {
          int v30 = *((_DWORD *)a1 + 2);
          a1[2] = *(a2 - 2);
          *((_DWORD *)a2 - 2) = v30;
          a1[3] = v11;
          *(a2 - 1) = v9;
          float v31 = a1[3];
          float v32 = a1[1];
          if (v31 > v32)
          {
            int v33 = *(_DWORD *)a1;
            *a1 = a1[2];
            *((_DWORD *)a1 + 2) = v33;
            a1[1] = v31;
            a1[3] = v32;
          }
        }
      }
      else
      {
        int v12 = *(_DWORD *)a1;
        if (v11 <= v9)
        {
          *a1 = a1[2];
          *((_DWORD *)a1 + 2) = v12;
          a1[1] = v9;
          a1[3] = v10;
          float v37 = *(a2 - 1);
          if (v37 > v10)
          {
            a1[2] = *(a2 - 2);
            *((_DWORD *)a2 - 2) = v12;
            a1[3] = v37;
            *(a2 - 1) = v10;
          }
        }
        else
        {
          *a1 = *(a2 - 2);
          *((_DWORD *)a2 - 2) = v12;
          a1[1] = v11;
          *(a2 - 1) = v10;
        }
      }
      return result;
    case 4:
      sub_19E149F3C(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_19E149F3C(a1, a1 + 2, a1 + 4, a1 + 6);
      float v19 = *(a2 - 1);
      float v20 = a1[7];
      if (v19 <= v20) {
        return 1;
      }
      int v21 = *((_DWORD *)a1 + 6);
      a1[6] = *(a2 - 2);
      *((_DWORD *)a2 - 2) = v21;
      a1[7] = v19;
      *(a2 - 1) = v20;
      float v22 = a1[7];
      float v23 = a1[5];
      if (v22 <= v23) {
        return 1;
      }
      int v24 = *((_DWORD *)a1 + 4);
      int v25 = *((_DWORD *)a1 + 6);
      *((_DWORD *)a1 + 4) = v25;
      *((_DWORD *)a1 + 6) = v24;
      a1[5] = v22;
      a1[7] = v23;
      float v26 = a1[3];
      if (v22 <= v26) {
        return 1;
      }
      int v27 = *((_DWORD *)a1 + 2);
      *((_DWORD *)a1 + 2) = v25;
      *((_DWORD *)a1 + 4) = v27;
      a1[3] = v22;
      a1[5] = v26;
      float v28 = a1[1];
      if (v22 <= v28) {
        return 1;
      }
      float v29 = *a1;
      *(_DWORD *)a1 = v25;
      a1[2] = v29;
      a1[1] = v22;
      a1[3] = v28;
      return 1;
    default:
      float v13 = a1[1];
      float v14 = a1 + 3;
      float v15 = a1[3];
      float v16 = a1[5];
      if (v15 > v13)
      {
        float v17 = *a1;
        if (v16 <= v15)
        {
          *a1 = a1[2];
          a1[2] = v17;
          a1[1] = v15;
          a1[3] = v13;
          if (v16 <= v13) {
            goto LABEL_30;
          }
          a1[2] = a1[4];
          a1[4] = v17;
          float v18 = a1 + 3;
        }
        else
        {
          *a1 = a1[4];
          a1[4] = v17;
          float v18 = a1 + 1;
        }
        float v14 = a1 + 5;
        goto LABEL_29;
      }
      if (v16 > v15)
      {
        int v34 = *((_DWORD *)a1 + 2);
        int v35 = *((_DWORD *)a1 + 4);
        *((_DWORD *)a1 + 2) = v35;
        *((_DWORD *)a1 + 4) = v34;
        a1[3] = v16;
        a1[5] = v15;
        if (v16 > v13)
        {
          float v36 = *a1;
          *(_DWORD *)a1 = v35;
          a1[2] = v36;
          float v18 = a1 + 1;
LABEL_29:
          float *v18 = v16;
          *float v14 = v13;
        }
      }
LABEL_30:
      int v38 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v39 = 0;
      int v40 = 0;
      float v41 = a1 + 4;
      while (1)
      {
        float v42 = v38[1];
        if (v42 > v41[1]) {
          break;
        }
LABEL_39:
        float v41 = v38;
        v39 += 8;
        v38 += 2;
        if (v38 == a2) {
          return 1;
        }
      }
      int v43 = *(_DWORD *)v38;
      uint64_t v44 = v39;
      do
      {
        float v45 = (float *)((char *)a1 + v44);
        v45[6] = *(float *)((char *)a1 + v44 + 16);
        v45[7] = *(float *)((char *)a1 + v44 + 20);
        if (v44 == -16)
        {
          *(_DWORD *)a1 = v43;
          a1[1] = v42;
          if (++v40 != 8) {
            goto LABEL_39;
          }
          return v38 + 2 == a2;
        }
        v44 -= 8;
      }
      while (v42 > v45[3]);
      int v46 = (char *)a1 + v44;
      *((_DWORD *)v46 + 6) = v43;
      *((float *)v46 + 7) = v42;
      if (++v40 != 8) {
        goto LABEL_39;
      }
      return v38 + 2 == a2;
  }
}

uint64_t sub_19E14D0B4()
{
  return v0;
}

uint64_t sub_19E14D128(uint64_t a1, uint64_t a2, int *a3, long long *a4, uint64_t a5, long long *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  *(void *)a1 = &unk_1EF0AB0C8;
  *(void *)(a1 + 8) = a2;
  long long v11 = *a4;
  long long v12 = a4[1];
  *(void *)(a1 + 48) = *((void *)a4 + 4);
  *(_OWORD *)(a1 + 16) = v11;
  *(_OWORD *)(a1 + 32) = v12;
  long long v13 = *a6;
  long long v14 = a6[1];
  *(void *)(a1 + 88) = *((void *)a6 + 4);
  *(_OWORD *)(a1 + 72) = v14;
  *(_OWORD *)(a1 + 56) = v13;
  int v15 = *a3;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 96) = a5;
  *(void *)(a1 + 104) = a7;
  *(void *)(a1 + 112) = a8;
  *(_DWORD *)(a1 + 120) = 0;
  *(unsigned char *)(a1 + 124) = 0;
  *(_DWORD *)(a1 + 128) = v15;
  *(void *)(a1 + 136) = a9;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  float v17 = *(const void **)a10;
  uint64_t v16 = *(void *)(a10 + 8);
  int64_t v18 = v16 - *(void *)a10;
  if (v16 != *(void *)a10)
  {
    if (v18 < 0) {
      sub_19E13D694();
    }
    float v19 = (char *)operator new(v16 - (void)v17);
    *(void *)(a1 + 144) = v19;
    *(void *)(a1 + 152) = v19;
    float v20 = &v19[4 * (v18 >> 2)];
    *(void *)(a1 + 160) = v20;
    memcpy(v19, v17, v18);
    *(void *)(a1 + 152) = v20;
  }
  return a1;
}

void sub_19E14D204(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 152) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E14D220(uint64_t a1, uint64_t a2, int *a3, long long *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  *(void *)a1 = &unk_1EF0AB0C8;
  *(void *)(a1 + 8) = a2;
  long long v10 = *a4;
  long long v11 = a4[1];
  *(void *)(a1 + 48) = *((void *)a4 + 4);
  *(_OWORD *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 32) = v11;
  long long v12 = *a4;
  long long v13 = a4[1];
  *(void *)(a1 + 88) = *((void *)a4 + 4);
  *(_OWORD *)(a1 + 72) = v13;
  *(_OWORD *)(a1 + 56) = v12;
  int v14 = *a3;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 96) = a5;
  *(void *)(a1 + 104) = a5;
  *(void *)(a1 + 112) = a6;
  *(float *)(a1 + 120) = a9;
  *(unsigned char *)(a1 + 124) = 1;
  *(_DWORD *)(a1 + 128) = v14;
  *(void *)(a1 + 136) = a7;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  uint64_t v16 = *(const void **)a8;
  uint64_t v15 = *(void *)(a8 + 8);
  int64_t v17 = v15 - *(void *)a8;
  if (v15 != *(void *)a8)
  {
    if (v17 < 0) {
      sub_19E13D694();
    }
    int64_t v18 = (char *)operator new(v15 - *(void *)a8);
    *(void *)(a1 + 144) = v18;
    *(void *)(a1 + 152) = v18;
    float v19 = &v18[4 * (v17 >> 2)];
    *(void *)(a1 + 160) = v19;
    memcpy(v18, v16, v17);
    *(void *)(a1 + 152) = v19;
  }
  return a1;
}

void sub_19E14D2FC(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 152) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E14D318(uint64_t a1)
{
  uint64_t v1 = **(const float ***)(a1 + 104);
  if (!v1) {
    return;
  }
  if (*(unsigned char *)(a1 + 124))
  {
    switch(*(_DWORD *)(a1 + 128))
    {
      case 0:
        uint64_t v3 = **(const float ***)(a1 + 96);
        uint64_t v4 = (const float *)(a1 + 120);
        BOOL v5 = **(float ***)(a1 + 112);
        vDSP_Length v6 = *(_DWORD *)(a1 + 16)
           * *(_DWORD *)(a1 + 24)
           * *(_DWORD *)(a1 + 32)
           * *(_DWORD *)(a1 + 40)
           * *(_DWORD *)(a1 + 48);
        goto LABEL_29;
      case 1:
        *(float *)BOOL v71 = -*(float *)(a1 + 120);
        goto LABEL_28;
      case 2:
        int64_t v17 = **(const float ***)(a1 + 96);
        int64_t v18 = (const float *)(a1 + 120);
        float v19 = **(float ***)(a1 + 112);
        vDSP_Length v20 = *(_DWORD *)(a1 + 16)
            * *(_DWORD *)(a1 + 24)
            * *(_DWORD *)(a1 + 32)
            * *(_DWORD *)(a1 + 40)
            * *(_DWORD *)(a1 + 48);
        goto LABEL_31;
      case 3:
        int v21 = **(const float ***)(a1 + 96);
        float v22 = (const float *)(a1 + 120);
        float v23 = **(float ***)(a1 + 112);
        vDSP_Length v24 = *(_DWORD *)(a1 + 16)
            * *(_DWORD *)(a1 + 24)
            * *(_DWORD *)(a1 + 32)
            * *(_DWORD *)(a1 + 40)
            * *(_DWORD *)(a1 + 48);
        goto LABEL_33;
      default:
        goto LABEL_84;
    }
    goto LABEL_84;
  }
  if (*(void *)(a1 + 16) == *(void *)(a1 + 56)
    && *(void *)(a1 + 24) == *(void *)(a1 + 64)
    && *(void *)(a1 + 32) == *(void *)(a1 + 72)
    && *(void *)(a1 + 40) == *(void *)(a1 + 80)
    && *(void *)(a1 + 48) == *(void *)(a1 + 88))
  {
    int v16 = *(_DWORD *)(a1 + 128);
    switch(v16)
    {
      case 2:
        vDSP_vmul(**(const float ***)(a1 + 96), 1, v1, 1, **(float ***)(a1 + 112), 1, *(_DWORD *)(a1 + 16)* *(_DWORD *)(a1 + 24)* *(_DWORD *)(a1 + 32)* *(_DWORD *)(a1 + 40)* *(_DWORD *)(a1 + 48));
        break;
      case 1:
        vDSP_vsub(**(const float ***)(a1 + 96), 1, v1, 1, **(float ***)(a1 + 112), 1, *(_DWORD *)(a1 + 16)* *(_DWORD *)(a1 + 24)* *(_DWORD *)(a1 + 32)* *(_DWORD *)(a1 + 40)* *(_DWORD *)(a1 + 48));
        break;
      case 0:
        vDSP_vadd(**(const float ***)(a1 + 96), 1, v1, 1, **(float ***)(a1 + 112), 1, *(_DWORD *)(a1 + 16)* *(_DWORD *)(a1 + 24)* *(_DWORD *)(a1 + 32)* *(_DWORD *)(a1 + 40)* *(_DWORD *)(a1 + 48));
        break;
    }
    goto LABEL_84;
  }
  unint64_t v11 = *(void *)(a1 + 88);
  uint64_t v12 = *(void *)(a1 + 56);
  uint64_t v13 = *(void *)(a1 + 64);
  if (v11 == 1)
  {
    LODWORD(v14) = v13 * v12 * *(void *)(a1 + 72);
    if (v14 == 1)
    {
      if (*(void *)(a1 + 80) == 1)
      {
        float v15 = *v1;
        *(float *)BOOL v71 = *v1;
        switch(*(_DWORD *)(a1 + 128))
        {
          case 0:
LABEL_28:
            uint64_t v3 = **(const float ***)(a1 + 96);
            BOOL v5 = **(float ***)(a1 + 112);
            vDSP_Length v6 = *(_DWORD *)(a1 + 16)
               * *(_DWORD *)(a1 + 24)
               * *(_DWORD *)(a1 + 32)
               * *(_DWORD *)(a1 + 40)
               * *(_DWORD *)(a1 + 48);
            uint64_t v4 = (const float *)v71;
            goto LABEL_29;
          case 1:
            *(float *)__B = -v15;
            uint64_t v3 = **(const float ***)(a1 + 96);
            BOOL v5 = **(float ***)(a1 + 112);
            vDSP_Length v6 = *(_DWORD *)(a1 + 16)
               * *(_DWORD *)(a1 + 24)
               * *(_DWORD *)(a1 + 32)
               * *(_DWORD *)(a1 + 40)
               * *(_DWORD *)(a1 + 48);
            uint64_t v4 = (const float *)__B;
LABEL_29:
            vDSP_vsadd(v3, 1, v4, v5, 1, v6);
            break;
          case 2:
            int64_t v17 = **(const float ***)(a1 + 96);
            float v19 = **(float ***)(a1 + 112);
            vDSP_Length v20 = *(_DWORD *)(a1 + 16)
                * *(_DWORD *)(a1 + 24)
                * *(_DWORD *)(a1 + 32)
                * *(_DWORD *)(a1 + 40)
                * *(_DWORD *)(a1 + 48);
            int64_t v18 = (const float *)v71;
LABEL_31:
            vDSP_vsmul(v17, 1, v18, v19, 1, v20);
            break;
          case 3:
            int v21 = **(const float ***)(a1 + 96);
            float v23 = **(float ***)(a1 + 112);
            vDSP_Length v24 = *(_DWORD *)(a1 + 16)
                * *(_DWORD *)(a1 + 24)
                * *(_DWORD *)(a1 + 32)
                * *(_DWORD *)(a1 + 40)
                * *(_DWORD *)(a1 + 48);
            float v22 = (const float *)v71;
LABEL_33:
            vDSP_vsdiv(v21, 1, v22, v23, 1, v24);
            break;
          default:
            goto LABEL_84;
        }
      }
      else
      {
        unint64_t v52 = *(void *)(a1 + 48);
        if (v52)
        {
          unint64_t v53 = 0;
          uint64_t v54 = *(void *)(a1 + 16);
          uint64_t v55 = *(void *)(a1 + 24);
          uint64_t v56 = *(void *)(a1 + 32);
          unint64_t v57 = *(void *)(a1 + 40);
          do
          {
            if (v57)
            {
              unint64_t v58 = 0;
              uint64_t v59 = 4 * v57 * v53 * (int)v54 * (int)v55 * (int)v56;
              float v60 = (float *)(**(void **)(a1 + 112) + v59);
              float v61 = (const float *)(**(void **)(a1 + 96) + v59);
              uint64_t v62 = **(void **)(a1 + 104);
              do
              {
                LODWORD(v71[0]) = 0;
                float v64 = *(float *)(v62 + 4 * v58);
                *(float *)BOOL v71 = v64;
                switch(*(_DWORD *)(a1 + 128))
                {
                  case 0:
                    vDSP_Length v65 = (int)v54 * (int)v55 * (int)v56;
                    float v66 = (const float *)v71;
                    goto LABEL_83;
                  case 1:
                    *(float *)__B = -v64;
                    vDSP_Length v65 = (int)v54 * (int)v55 * (int)v56;
                    float v66 = (const float *)__B;
LABEL_83:
                    vDSP_vsadd(v61, 1, v66, v60, 1, v65);
                    break;
                  case 2:
                    vDSP_vsmul(v61, 1, (const float *)v71, v60, 1, (int)v54 * (int)v55 * (int)v56);
                    break;
                  case 3:
                    vDSP_vsdiv(v61, 1, (const float *)v71, v60, 1, (int)v54 * (int)v55 * (int)v56);
                    break;
                  default:
                    break;
                }
                uint64_t v54 = *(void *)(a1 + 16);
                uint64_t v55 = *(void *)(a1 + 24);
                uint64_t v56 = *(void *)(a1 + 32);
                unint64_t v57 = *(void *)(a1 + 40);
                uint64_t v63 = 4 * (int)v54 * (int)v55 * (int)v56;
                float v61 = (const float *)((char *)v61 + v63);
                float v60 = (float *)((char *)v60 + v63);
                ++v58;
              }
              while (v57 > v58);
              unint64_t v52 = *(void *)(a1 + 48);
            }
            ++v53;
          }
          while (v52 > v53);
        }
      }
      goto LABEL_84;
    }
  }
  else
  {
    uint64_t v14 = v13 * v12 * *(void *)(a1 + 72);
  }
  uint64_t v25 = *(void *)(a1 + 16);
  uint64_t v26 = *(void *)(a1 + 24);
  uint64_t v27 = *(void *)(a1 + 32);
  unint64_t v28 = *(void *)(a1 + 48);
  if (v14 == v26 * v25 * v27)
  {
    if (!v28) {
      goto LABEL_84;
    }
    uint64_t v42 = 0;
    unint64_t v43 = *(void *)(a1 + 40);
    while (!v43)
    {
LABEL_54:
      if (v28 <= ++v42) {
        goto LABEL_84;
      }
    }
    unint64_t v44 = 0;
    uint64_t v45 = 4 * v43 * v42 * (int)v25 * (int)v26 * (int)v27;
    int v46 = (float *)(**(void **)(a1 + 112) + v45);
    int v47 = (const float *)(**(void **)(a1 + 96) + v45);
    float v48 = **(const float ***)(a1 + 104);
    while (1)
    {
      int v51 = *(_DWORD *)(a1 + 128);
      if (v51 == 2) {
        break;
      }
      if (v51 != 1)
      {
        if (!v51)
        {
          vDSP_vadd(v47, 1, v48, 1, v46, 1, (int)v25 * (int)v26 * (int)v27);
          uint64_t v25 = *(void *)(a1 + 16);
          uint64_t v26 = *(void *)(a1 + 24);
          uint64_t v27 = *(void *)(a1 + 32);
          if (*(void *)(a1 + 80) == 1) {
            goto LABEL_68;
          }
          goto LABEL_57;
        }
        goto LABEL_65;
      }
      vDSP_vsub(v47, 1, v48, 1, v46, 1, (int)v25 * (int)v26 * (int)v27);
      uint64_t v25 = *(void *)(a1 + 16);
      uint64_t v26 = *(void *)(a1 + 24);
      uint64_t v27 = *(void *)(a1 + 32);
      if (*(void *)(a1 + 80) == 1)
      {
LABEL_68:
        uint64_t v49 = 0;
        goto LABEL_58;
      }
LABEL_57:
      uint64_t v49 = *(_DWORD *)(a1 + 56) * *(_DWORD *)(a1 + 64) * *(_DWORD *)(a1 + 72);
LABEL_58:
      uint64_t v50 = 4 * (int)v25 * (int)v26 * (int)v27;
      int v47 = (const float *)((char *)v47 + v50);
      int v46 = (float *)((char *)v46 + v50);
      v48 += v49;
      ++v44;
      unint64_t v43 = *(void *)(a1 + 40);
      if (v43 <= v44)
      {
        unint64_t v28 = *(void *)(a1 + 48);
        goto LABEL_54;
      }
    }
    vDSP_vmul(v47, 1, v48, 1, v46, 1, (int)v25 * (int)v26 * (int)v27);
LABEL_65:
    uint64_t v25 = *(void *)(a1 + 16);
    uint64_t v26 = *(void *)(a1 + 24);
    uint64_t v27 = *(void *)(a1 + 32);
    if (*(void *)(a1 + 80) == 1) {
      goto LABEL_68;
    }
    goto LABEL_57;
  }
  if (v28 == v11 && v11)
  {
    uint64_t v29 = 0;
    unint64_t v30 = *(void *)(a1 + 40);
    uint64_t v31 = *(void *)(a1 + 80);
    while (!v30)
    {
LABEL_40:
      if (v11 <= ++v29) {
        goto LABEL_84;
      }
    }
    uint64_t v32 = 0;
    uint64_t v33 = 4 * v30 * v29 * (int)v25 * (int)v26 * (int)v27;
    int v34 = (float *)(**(void **)(a1 + 112) + v33);
    int v35 = (const float *)(**(void **)(a1 + 104)
                        + 4 * v31 * v29 * *(_DWORD *)(a1 + 56) * *(_DWORD *)(a1 + 64) * *(_DWORD *)(a1 + 72));
    float v36 = (const float *)(**(void **)(a1 + 96) + v33);
    while (1)
    {
      int v41 = *(_DWORD *)(a1 + 128);
      if (v41 == 2)
      {
        vDSP_vsmul(v36, 1, v35, v34, 1, (int)v25 * (int)v26 * (int)v27);
        goto LABEL_45;
      }
      if (v41 == 1)
      {
        LODWORD(v71[0]) = 0;
        *(float *)BOOL v71 = -*v35;
        vDSP_Length v37 = (int)v25 * (int)v26 * (int)v27;
        int v38 = (const float *)v71;
        uint64_t v39 = v36;
      }
      else
      {
        vDSP_Length v37 = (int)v25 * (int)v26 * (int)v27;
        uint64_t v39 = v36;
        int v38 = v35;
        if (v41)
        {
          vDSP_vsdiv(v36, 1, v35, v34, 1, v37);
          goto LABEL_45;
        }
      }
      vDSP_vsadd(v39, 1, v38, v34, 1, v37);
LABEL_45:
      uint64_t v25 = *(void *)(a1 + 16);
      uint64_t v26 = *(void *)(a1 + 24);
      uint64_t v27 = *(void *)(a1 + 32);
      unint64_t v30 = *(void *)(a1 + 40);
      uint64_t v40 = 4 * (int)v25 * (int)v26 * (int)v27;
      float v36 = (const float *)((char *)v36 + v40);
      int v34 = (float *)((char *)v34 + v40);
      uint64_t v31 = *(void *)(a1 + 80);
      v35 += v31 != 1;
      if (v30 <= ++v32)
      {
        unint64_t v11 = *(void *)(a1 + 48);
        goto LABEL_40;
      }
    }
  }
LABEL_84:
  uint64_t v67 = *(_DWORD *)(a1 + 16) * *(_DWORD *)(a1 + 24) * *(_DWORD *)(a1 + 32);
  v72[2] = 0;
  __B[0] = v67;
  __B[1] = 0x3F80000000010020;
  __B[2] = 0;
  v72[0] = v67;
  v72[1] = 0x3F80000000010020;
  memset(v71, 0, sizeof(v71));
  switch(*(void *)(a1 + 136))
  {
    case 1:
      LODWORD(v71[0]) = 3;
      goto LABEL_91;
    case 2:
      LODWORD(v71[0]) = 4;
      goto LABEL_91;
    case 4:
      LODWORD(v71[0]) = 11;
      goto LABEL_91;
    case 5:
      LODWORD(v71[0]) = 1;
      goto LABEL_91;
    case 8:
    case 0xALL:
    case 0xCLL:
      return;
    case 9:
      LODWORD(v71[0]) = 8;
      *(void *)((char *)v71 + 4) = **(void **)(a1 + 144);
      goto LABEL_91;
    default:
LABEL_91:
      int v68 = (void *)MEMORY[0x19F3BB110](__B, v72, v71, 0);
      float v69 = v68;
      if (v68)
      {
        int v70 = *(_DWORD *)(a1 + 16) * *(_DWORD *)(a1 + 24) * *(_DWORD *)(a1 + 32);
        BNNSFilterApplyBatch(v68, v70 * *(_DWORD *)(a1 + 40) * *(_DWORD *)(a1 + 48) / (unint64_t)v70, **(const void ***)(a1 + 112), v70, **(void ***)(a1 + 112), v70);
      }
      BNNSFilterDestroy(v69);
      break;
  }
}

void *sub_19E14DD10(void *a1)
{
  *a1 = &unk_1EF0AB0C8;
  uint64_t v2 = (void *)a1[18];
  if (v2)
  {
    a1[19] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_19E14DD60(void *__p)
{
  void *__p = &unk_1EF0AB0C8;
  uint64_t v2 = (void *)__p[18];
  if (v2)
  {
    __p[19] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

id sub_19E14DDC0(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = objc_msgSend_objectForKeyedSubscript_(a1, a2, a3, a4);
  if (v4 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    id v5 = v4;

    vDSP_Length v6 = v5;
  }
  else
  {

    vDSP_Length v6 = 0;
  }
  return v6;
}

id sub_19E14DE50(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = objc_msgSend_objectForKeyedSubscript_(a1, a2, a3, a4);
  if (v4 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    id v5 = v4;

    vDSP_Length v6 = v5;
  }
  else
  {

    vDSP_Length v6 = 0;
  }
  return v6;
}

uint64_t sub_19E14DEE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4181798](a1, sel_exMRL_BOOLForKey_keyPresent_, a3, 0);
}

uint64_t sub_19E14DEE8(void *a1, const char *a2, uint64_t a3, BOOL *a4)
{
  id v5 = objc_msgSend_exMRL_numberForKey_(a1, a2, a3, (uint64_t)a4);
  float v9 = v5;
  if (a4) {
    *a4 = v5 != 0;
  }
  if (v5)
  {
    uint64_t v10 = objc_msgSend_BOOLValue(v5, v6, v7, v8);

    return v10;
  }
  else
  {

    return 0;
  }
}

id sub_19E14DF54(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v4 = objc_msgSend_objectForKeyedSubscript_(a1, a2, a3, a4);
    if (v4 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    {
      id v5 = v4;

      vDSP_Length v6 = v5;
    }
    else
    {

      vDSP_Length v6 = 0;
    }
  }
  else
  {
    vDSP_Length v6 = 0;
  }
  return v6;
}

id sub_19E14E00C(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = objc_msgSend_objectForKeyedSubscript_(a1, a2, a3, a4);
  if (v4 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    id v5 = v4;

    vDSP_Length v6 = v5;
  }
  else
  {

    vDSP_Length v6 = 0;
  }
  return v6;
}

id sub_19E14E09C(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = objc_msgSend_objectForKeyedSubscript_(a1, a2, a3, a4);
  if (v4 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    id v5 = v4;

    vDSP_Length v6 = v5;
  }
  else
  {

    vDSP_Length v6 = 0;
  }
  return v6;
}

id sub_19E14E12C(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = objc_msgSend_objectForKeyedSubscript_(a1, a2, a3, a4);
  if (v4 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    id v5 = v4;

    vDSP_Length v6 = v5;
  }
  else
  {

    vDSP_Length v6 = 0;
  }
  return v6;
}

id sub_19E14E1BC(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v5 = objc_msgSend_string(MEMORY[0x1E4F28E78], a2, a3, a4);
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  id v6 = a1;
  uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v7, (uint64_t)&v22, (uint64_t)v26, 16);
  if (v8)
  {
    uint64_t v11 = v8;
    uint64_t v12 = *(void *)v23;
    do
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        if (*(void *)v23 != v12) {
          objc_enumerationMutation(v6);
        }
        uint64_t v14 = objc_msgSend_stringWithFormat_(NSString, v9, @"%@, ", v10, *(void *)(*((void *)&v22 + 1) + 8 * i));
        objc_msgSend_appendString_(v5, v15, (uint64_t)v14, v16);
      }
      uint64_t v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v9, (uint64_t)&v22, (uint64_t)v26, 16);
    }
    while (v11);
  }

  vDSP_Length v20 = objc_msgSend_copy(v5, v17, v18, v19);

  return v20;
}

uint64_t sub_19E14E5FC(uint64_t result, uint64_t a2)
{
  *(void *)BOOL result = a2;
  *(void *)(result + 8) = &off_1E94583C0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

void sub_19E14E610(void *a1)
{
  if (a1 != &off_1E94583C0)
  {
    sub_19E14E610(a1[2]);
    sub_19E14E610(a1[1]);
    free(a1);
  }
}

void sub_19E14E668(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = v2;
  do
  {
    if (v3 == (void **)&off_1E94583C0) {
      goto LABEL_5;
    }
    uint64_t v4 = v3;
    uint64_t v3 = (void **)v3[2];
  }
  while (v3 != (void **)&off_1E94583C0);
  if (!v4)
  {
LABEL_5:
    sub_19E14E610(v2);
    *(void *)(a1 + 8) = &off_1E94583C0;
    return;
  }
  while (1)
  {
    free(v4[3]);
    v4[3] = 0;
    id v5 = (void **)v4[1];
    if (v5 == (void **)&off_1E94583C0) {
      break;
    }
    do
    {
      uint64_t v4 = v5;
      id v5 = (void **)v5[2];
    }
    while (v5 != (void **)&off_1E94583C0);
LABEL_6:
    if (!v4) {
      goto LABEL_15;
    }
  }
  do
  {
    id v6 = v4;
    uint64_t v4 = (void **)*v4;
  }
  while (v4 != (void **)&off_1E94583C0 && v6 == v4[1]);
  if (v4 != (void **)&off_1E94583C0) {
    goto LABEL_6;
  }
LABEL_15:
  sub_19E14E610(*(void **)(a1 + 8));
  *(void *)(a1 + 8) = &off_1E94583C0;
}

uint64_t sub_19E14E730(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  while ((_UNKNOWN **)v1 != &off_1E94583C0)
  {
    uint64_t result = v1;
    uint64_t v1 = *(void *)(v1 + 16);
    if ((_UNKNOWN **)v1 == &off_1E94583C0) {
      return result;
    }
  }
  return 0;
}

void *sub_19E14E760(void *result)
{
  if (result)
  {
    uint64_t v1 = (void *)result[1];
    if (v1 == &off_1E94583C0)
    {
      do
      {
        uint64_t v2 = (_UNKNOWN **)*result;
        BOOL v3 = (_UNKNOWN **)*result != &off_1E94583C0 && result == *(void **)(*result + 8);
        uint64_t result = (void *)*result;
      }
      while (v3);
      if (v2 == &off_1E94583C0) {
        return 0;
      }
      else {
        return v2;
      }
    }
    else
    {
      do
      {
        uint64_t result = v1;
        uint64_t v1 = (void *)v1[2];
      }
      while (v1 != &off_1E94583C0);
    }
  }
  return result;
}

void *sub_19E14E7B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = malloc_type_malloc(0x28uLL, 0x10A0040E109E3ABuLL);
  id v5 = v4;
  if (v4)
  {
    v4[3] = a2;
    sub_19E14E810(a1, (uint64_t)v4);
  }
  return v5;
}

uint64_t sub_19E14E810(uint64_t result, uint64_t a2)
{
  uint64_t v2 = (_UNKNOWN **)a2;
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(a2 + 24);
  id v6 = *(uint64_t (**)(uint64_t, void *))result;
  id v5 = *(_UNKNOWN ***)(result + 8);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = &off_1E94583C0;
  *(void *)(a2 + 16) = &off_1E94583C0;
  *(void *)a2 = &off_1E94583C0;
  ++*(_DWORD *)(result + 16);
  if (v5 == &off_1E94583C0)
  {
    *(void *)(result + 8) = a2;
    *(_DWORD *)(a2 + 32) = 1;
  }
  else
  {
    do
    {
      while (1)
      {
        uint64_t v7 = v5;
        uint64_t result = v6(v4, v5[3]);
        if ((int)result <= 0) {
          break;
        }
        id v5 = (_UNKNOWN **)v7[1];
        if (v5 == &off_1E94583C0)
        {
          v7[1] = v2;
          void *v2 = v7;
          if (*((_DWORD *)v7 + 8)) {
            return result;
          }
          while (1)
          {
LABEL_10:
            uint64_t v8 = (uint64_t)*v7;
            float v9 = (_UNKNOWN **)*((void *)*v7 + 2);
            uint64_t v10 = v9;
            if (v7 == v9) {
              uint64_t v10 = *(_UNKNOWN ***)(v8 + 8);
            }
            if (v10 == &off_1E94583C0 || *((_DWORD *)v10 + 8)) {
              break;
            }
            *((_DWORD *)v10 + 8) = 1;
            *((_DWORD *)v7 + 8) = 1;
            uint64_t v7 = *(_UNKNOWN ***)v8;
            if (*(_UNKNOWN ***)v8 != &off_1E94583C0)
            {
              *(_DWORD *)(v8 + 32) = 0;
              uint64_t v2 = (_UNKNOWN **)v8;
              if (!*((_DWORD *)v7 + 8)) {
                continue;
              }
            }
            return result;
          }
          if (v7 == v9 && v2 == (_UNKNOWN **)v7[1])
          {
            uint64_t v16 = (_UNKNOWN **)v2[2];
            v7[1] = v16;
            v2[2] = v7;
            if ((_UNKNOWN **)v8 == &off_1E94583C0)
            {
              *(void *)(v3 + 8) = v2;
            }
            else if (*(_UNKNOWN ***)(v8 + 16) == v7)
            {
              *(void *)(v8 + 16) = v2;
            }
            else
            {
              *(void *)(v8 + 8) = v2;
              uint64_t v16 = (_UNKNOWN **)v7[1];
            }
            void *v2 = (_UNKNOWN *)v8;
            const char *v7 = v2;
            if (v16 != &off_1E94583C0) {
              *uint64_t v16 = v7;
            }
            uint64_t v13 = (_UNKNOWN **)v2[2];
LABEL_35:
            *((_DWORD *)v2 + 8) = 1;
            uint64_t v14 = *v2;
            *((_DWORD *)*v2 + 8) = 0;
            float v15 = v2 + 2;
            uint64_t v12 = v13;
            goto LABEL_36;
          }
          uint64_t v12 = (_UNKNOWN **)v7[2];
          if (v2 != v12)
          {
            uint64_t v13 = v2;
            uint64_t v2 = v7;
            goto LABEL_23;
          }
          if (v7 != *(_UNKNOWN ***)(v8 + 8))
          {
            uint64_t v13 = v2;
            uint64_t v2 = v7;
            goto LABEL_35;
          }
          uint64_t v18 = (_UNKNOWN **)v2[1];
          v7[2] = v18;
          v2[1] = v7;
          if ((_UNKNOWN **)v8 == &off_1E94583C0)
          {
            *(void *)(v3 + 8) = v2;
          }
          else if (*(_UNKNOWN ***)(v8 + 16) == v7)
          {
            *(void *)(v8 + 16) = v2;
            uint64_t v18 = (_UNKNOWN **)v7[2];
          }
          else
          {
            *(void *)(v8 + 8) = v2;
          }
          void *v2 = (_UNKNOWN *)v8;
          const char *v7 = v2;
          if (v18 != &off_1E94583C0) {
            const float *v18 = v7;
          }
          uint64_t v13 = (_UNKNOWN **)v2[1];
          uint64_t v12 = (_UNKNOWN **)v2[2];
LABEL_23:
          *((_DWORD *)v2 + 8) = 1;
          uint64_t v14 = *v2;
          *((_DWORD *)*v2 + 8) = 0;
          float v15 = v2 + 2;
          if (v13 == v12)
          {
LABEL_36:
            if (v2 != (_UNKNOWN **)v14[2]) {
              goto LABEL_37;
            }
            uint64_t v12 = (_UNKNOWN **)v2[1];
            v14[2] = v12;
            v2[1] = v14;
            int64_t v17 = (_UNKNOWN **)*v14;
            if ((_UNKNOWN **)*v14 != &off_1E94583C0)
            {
              if (v17[2] == (_UNKNOWN *)v14)
              {
                v17[2] = v2;
                uint64_t v12 = (_UNKNOWN **)v14[2];
              }
              else
              {
                v17[1] = v2;
              }
LABEL_52:
              void *v2 = v17;
              *uint64_t v14 = v2;
              if (v12 != &off_1E94583C0) {
                const void *v12 = v14;
              }
              return result;
            }
          }
          else
          {
LABEL_37:
            if (v13 != (_UNKNOWN **)v2[1] || v2 != (_UNKNOWN **)v14[1]) {
              return result;
            }
            v14[1] = v12;
            *float v15 = v14;
            int64_t v17 = (_UNKNOWN **)*v14;
            if ((_UNKNOWN **)*v14 != &off_1E94583C0)
            {
              if (v17[2] == (_UNKNOWN *)v14)
              {
                v17[2] = v2;
              }
              else
              {
                v17[1] = v2;
                uint64_t v12 = (_UNKNOWN **)v14[1];
              }
              goto LABEL_52;
            }
          }
          *(void *)(v3 + 8) = v2;
          goto LABEL_52;
        }
      }
      id v5 = (_UNKNOWN **)v7[2];
    }
    while (v5 != &off_1E94583C0);
    v7[2] = v2;
    void *v2 = v7;
    if (!*((_DWORD *)v7 + 8)) {
      goto LABEL_10;
    }
  }
  return result;
}

uint64_t sub_19E14EB04(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if ((_UNKNOWN **)v2 == &off_1E94583C0) {
    return 0;
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t, void))a1;
  while (1)
  {
    int v5 = v4(a2, *(void *)(v2 + 24));
    if (!v5) {
      break;
    }
    if (v5 >= 1) {
      uint64_t v6 = 8;
    }
    else {
      uint64_t v6 = 16;
    }
    uint64_t v2 = *(void *)(v2 + v6);
    if ((_UNKNOWN **)v2 == &off_1E94583C0) {
      return 0;
    }
  }
  return v2;
}

uint64_t sub_19E14EB80(uint64_t a1, uint64_t a2)
{
  return sub_19E14EB8C(*(_UNKNOWN ***)(a1 + 8), a2, (int (**)(void *, uint64_t))a1);
}

uint64_t sub_19E14EB8C(_UNKNOWN **a1, uint64_t a2, int (**a3)(void *, uint64_t))
{
  if (a1 == &off_1E94583C0) {
    return 0;
  }
  int v5 = a1;
  uint64_t v6 = *a3;
  while (v6(v5[3], a2) <= 0)
  {
    int v5 = (_UNKNOWN **)v5[1];
    if (v5 == &off_1E94583C0) {
      return 0;
    }
  }
  uint64_t result = sub_19E14EB8C(v5[2], a2, a3);
  if (!result) {
    return (uint64_t)v5;
  }
  return result;
}

uint64_t sub_19E14EC28(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  while ((_UNKNOWN **)v1 != &off_1E94583C0)
  {
    uint64_t result = v1;
    uint64_t v1 = *(void *)(v1 + 8);
    if ((_UNKNOWN **)v1 == &off_1E94583C0) {
      return result;
    }
  }
  return 0;
}

void *sub_19E14EC58(void *result)
{
  if (result)
  {
    uint64_t v1 = (void *)result[2];
    if (v1 == &off_1E94583C0)
    {
      do
      {
        uint64_t v2 = (_UNKNOWN **)*result;
        BOOL v3 = (_UNKNOWN **)*result != &off_1E94583C0 && result == *(void **)(*result + 16);
        uint64_t result = (void *)*result;
      }
      while (v3);
      if (v2 == &off_1E94583C0) {
        return 0;
      }
      else {
        return v2;
      }
    }
    else
    {
      do
      {
        uint64_t result = v1;
        uint64_t v1 = (void *)v1[1];
      }
      while (v1 != &off_1E94583C0);
    }
  }
  return result;
}

_UNKNOWN **sub_19E14ECA8(uint64_t a1, _UNKNOWN **a2)
{
  BOOL v3 = (_UNKNOWN **)a2[2];
  uint64_t v2 = a2[3];
  if (v3 == &off_1E94583C0)
  {
    uint64_t v4 = a2;
    goto LABEL_7;
  }
  if (a2[1] != (_UNKNOWN *)&off_1E94583C0)
  {
    do
    {
      uint64_t v4 = v3;
      BOOL v3 = (_UNKNOWN **)v3[1];
    }
    while (v3 != &off_1E94583C0);
    BOOL v3 = (_UNKNOWN **)v4[2];
    a2[3] = v4[3];
    if (v3 != &off_1E94583C0)
    {
LABEL_8:
      int v5 = (_UNKNOWN **)*v4;
      if (*v4 != (_UNKNOWN *)&off_1E94583C0) {
        goto LABEL_9;
      }
LABEL_48:
      *(void *)(a1 + 8) = v3;
      if (v3 == &off_1E94583C0) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
LABEL_7:
    BOOL v3 = (_UNKNOWN **)v4[1];
    goto LABEL_8;
  }
  uint64_t v4 = a2;
  int v5 = (_UNKNOWN **)*a2;
  if (*a2 == (_UNKNOWN *)&off_1E94583C0) {
    goto LABEL_48;
  }
LABEL_9:
  uint64_t v6 = v5 + 1;
  if (v5[1] != (_UNKNOWN *)v4) {
    uint64_t v6 = v5 + 2;
  }
  *uint64_t v6 = v3;
  if (v3 == &off_1E94583C0) {
    goto LABEL_13;
  }
LABEL_12:
  const float *v3 = v5;
LABEL_13:
  if (*((_DWORD *)v4 + 8) != 1) {
    goto LABEL_51;
  }
  if (!*((_DWORD *)v3 + 8))
  {
    *((_DWORD *)v3 + 8) = 1;
    goto LABEL_51;
  }
  if (v5 == &off_1E94583C0)
  {
LABEL_51:
    --*(_DWORD *)(a1 + 16);
    v4[3] = v2;
    return v4;
  }
  while (1)
  {
    uint64_t v7 = v5;
    uint64_t v8 = v5[2];
    if (v3 != (_UNKNOWN **)v8)
    {
      if (v8[8])
      {
        float v9 = v5[2];
        goto LABEL_39;
      }
      *((_DWORD *)v5 + 8) = 0;
      v8[8] = 1;
      uint64_t v10 = (_UNKNOWN **)*((void *)v8 + 1);
      v5[2] = v10;
      *((void *)v8 + 1) = v5;
      uint64_t v12 = *v5;
      if (*v7 == (_UNKNOWN *)&off_1E94583C0)
      {
        *(void *)(a1 + 8) = v8;
        *(void *)uint64_t v8 = v12;
        const char *v7 = v8;
        if (v10 == &off_1E94583C0) {
          goto LABEL_36;
        }
      }
      else if ((_UNKNOWN **)v12[2] == v7)
      {
        v12[2] = v8;
        uint64_t v10 = (_UNKNOWN **)v7[2];
        *(void *)uint64_t v8 = v12;
        const char *v7 = v8;
        if (v10 == &off_1E94583C0) {
          goto LABEL_36;
        }
      }
      else
      {
        v12[1] = v8;
        *(void *)uint64_t v8 = v12;
        const char *v7 = v8;
        if (v10 == &off_1E94583C0) {
          goto LABEL_36;
        }
      }
LABEL_35:
      float *v10 = v7;
      goto LABEL_36;
    }
    float v9 = v5[1];
    if (v9[8]) {
      goto LABEL_38;
    }
    *((_DWORD *)v7 + 8) = 0;
    v9[8] = 1;
    uint64_t v10 = (_UNKNOWN **)*((void *)v9 + 2);
    v7[1] = v10;
    *((void *)v9 + 2) = v7;
    uint64_t v11 = (uint64_t)*v7;
    if (*v7 != (_UNKNOWN *)&off_1E94583C0)
    {
      if (*(_UNKNOWN ***)(v11 + 16) == v7)
      {
        *(void *)(v11 + 16) = v9;
        *(void *)float v9 = v11;
        const char *v7 = v9;
        if (v10 == &off_1E94583C0) {
          goto LABEL_36;
        }
      }
      else
      {
        *(void *)(v11 + 8) = v9;
        uint64_t v10 = (_UNKNOWN **)v7[1];
        *(void *)float v9 = v11;
        const char *v7 = v9;
        if (v10 == &off_1E94583C0) {
          goto LABEL_36;
        }
      }
      goto LABEL_35;
    }
    *(void *)(a1 + 8) = v9;
    *(void *)float v9 = v11;
    const char *v7 = v9;
    if (v10 != &off_1E94583C0) {
      goto LABEL_35;
    }
LABEL_36:
    uint64_t v8 = v7[2];
    float v9 = v8;
    if (v3 != (_UNKNOWN **)v8) {
      goto LABEL_39;
    }
    float v9 = v7[1];
LABEL_38:
    uint64_t v8 = v3;
LABEL_39:
    int v13 = *((_DWORD *)v7 + 8);
    if (v13 != 1) {
      break;
    }
    if (v9[8] != 1 || *(_DWORD *)(*((void *)v9 + 2) + 32) != 1 || *(_DWORD *)(*((void *)v9 + 1) + 32) != 1) {
      goto LABEL_59;
    }
    if (v9 != (_DWORD *)&off_1E94583C0) {
      v9[8] = 0;
    }
    int v5 = (_UNKNOWN **)*v7;
    BOOL v3 = v7;
    if (*v7 == (_UNKNOWN *)&off_1E94583C0) {
      goto LABEL_51;
    }
  }
  if (v13)
  {
LABEL_59:
    float v15 = v7 + 4;
    goto LABEL_60;
  }
  float v15 = v7 + 4;
  if (v9[8] == 1 && *(_DWORD *)(*((void *)v9 + 2) + 32) == 1 && *(_DWORD *)(*((void *)v9 + 1) + 32) == 1)
  {
    if (v9 != (_DWORD *)&off_1E94583C0) {
      v9[8] = 0;
    }
    *float v15 = 1;
    --*(_DWORD *)(a1 + 16);
    v4[3] = v2;
    return v4;
  }
LABEL_60:
  if (v3 == (_UNKNOWN **)v8
    && v9[8] == 1
    && (uint64_t v16 = *((void *)v9 + 2), !*(_DWORD *)(v16 + 32))
    && *(_DWORD *)(*((void *)v9 + 1) + 32) == 1)
  {
    v9[8] = 0;
    *(_DWORD *)(v16 + 32) = 1;
    int64_t v17 = *(_UNKNOWN ***)(v16 + 8);
    *((void *)v9 + 2) = v17;
    *(void *)(v16 + 8) = v9;
    uint64_t v18 = *(void **)v9;
    if (*(_UNKNOWN ***)v9 == &off_1E94583C0)
    {
      *(void *)(a1 + 8) = v16;
    }
    else if ((_DWORD *)v18[2] == v9)
    {
      v18[2] = v16;
      int64_t v17 = (_UNKNOWN **)*((void *)v9 + 2);
    }
    else
    {
      v18[1] = v16;
    }
    *(void *)uint64_t v16 = v18;
    *(void *)float v9 = v16;
    if (v17 != &off_1E94583C0) {
      const char *v17 = v9;
    }
    uint64_t v8 = v7[2];
    float v9 = v8;
    if (v3 == (_UNKNOWN **)v8)
    {
      uint64_t v19 = (void **)(v7 + 1);
      goto LABEL_85;
    }
  }
  else
  {
    uint64_t v19 = (void **)(v7 + 1);
    if (v3 == (_UNKNOWN **)v7[1] && v9[8] == 1)
    {
      uint64_t v20 = *((void *)v9 + 1);
      if (!*(_DWORD *)(v20 + 32) && *(_DWORD *)(*((void *)v9 + 2) + 32) == 1)
      {
        v9[8] = 0;
        *(_DWORD *)(v20 + 32) = 1;
        int v21 = *(_UNKNOWN ***)(v20 + 16);
        *((void *)v9 + 1) = v21;
        *(void *)(v20 + 16) = v9;
        long long v22 = *(void **)v9;
        if (*(_UNKNOWN ***)v9 == &off_1E94583C0)
        {
          *(void *)(a1 + 8) = v20;
        }
        else if ((_DWORD *)v22[2] == v9)
        {
          v22[2] = v20;
        }
        else
        {
          v22[1] = v20;
          int v21 = (_UNKNOWN **)*((void *)v9 + 1);
        }
        *(void *)uint64_t v20 = v22;
        *(void *)float v9 = v20;
        if (v21 != &off_1E94583C0) {
          const float *v21 = v9;
        }
        uint64_t v8 = v7[2];
        float v9 = v8;
        if (v3 == (_UNKNOWN **)v8)
        {
LABEL_85:
          float v9 = *v19;
          uint64_t v8 = v3;
        }
      }
    }
  }
  v9[8] = *v15;
  *float v15 = 1;
  if (v3 == (_UNKNOWN **)v8)
  {
    *(_DWORD *)(*((void *)v9 + 1) + 32) = 1;
    uint64_t v26 = (uint64_t)*v7;
    long long v25 = v7[1];
    uint64_t v27 = (_UNKNOWN **)v25[2];
    v7[1] = v27;
    v25[2] = v7;
    if ((_UNKNOWN **)v26 == &off_1E94583C0)
    {
      *(void *)(a1 + 8) = v25;
    }
    else if (*(_UNKNOWN ***)(v26 + 16) == v7)
    {
      *(void *)(v26 + 16) = v25;
    }
    else
    {
      *(void *)(v26 + 8) = v25;
      uint64_t v27 = (_UNKNOWN **)v7[1];
    }
    void *v25 = v26;
    const char *v7 = v25;
    if (v27 != &off_1E94583C0)
    {
      _OWORD *v27 = v7;
      --*(_DWORD *)(a1 + 16);
      v4[3] = v2;
      return v4;
    }
    goto LABEL_51;
  }
  *(_DWORD *)(*((void *)v9 + 2) + 32) = 1;
  long long v23 = (_UNKNOWN **)*((void *)v8 + 1);
  v7[2] = v23;
  *((void *)v8 + 1) = v7;
  uint64_t v24 = (uint64_t)*v7;
  if (*v7 == (_UNKNOWN *)&off_1E94583C0)
  {
    *(void *)(a1 + 8) = v8;
    *(void *)uint64_t v8 = v24;
    const char *v7 = v8;
    if (v23 == &off_1E94583C0) {
      goto LABEL_51;
    }
  }
  else if (*(_UNKNOWN ***)(v24 + 16) == v7)
  {
    *(void *)(v24 + 16) = v8;
    long long v23 = (_UNKNOWN **)v7[2];
    *(void *)uint64_t v8 = v24;
    const char *v7 = v8;
    if (v23 == &off_1E94583C0) {
      goto LABEL_51;
    }
  }
  else
  {
    *(void *)(v24 + 8) = v8;
    *(void *)uint64_t v8 = v24;
    const char *v7 = v8;
    if (v23 == &off_1E94583C0) {
      goto LABEL_51;
    }
  }
  *long long v23 = v7;
  --*(_DWORD *)(a1 + 16);
  v4[3] = v2;
  return v4;
}

_UNKNOWN **sub_19E14F1E4(uint64_t a1, _UNKNOWN **a2)
{
  BOOL v3 = sub_19E14ECA8(a1, a2);
  sub_19E14E810(a1, (uint64_t)v3);
  return v3;
}

void sub_19E14F784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_19E14F950(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E14F96C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E14F984(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E14FA20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E14FD7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_19E14FE84(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2) {
    free(v2);
  }
  BOOL v3 = *(void **)(a1 + 8);
  if (v3) {
    free(v3);
  }
  uint64_t v4 = *(void **)(a1 + 16);
  if (v4) {
    free(v4);
  }
  int v5 = *(void **)(a1 + 24);
  if (v5) {
    free(v5);
  }
  uint64_t v6 = *(void **)(a1 + 32);
  if (v6) {
    free(v6);
  }
  uint64_t v7 = *(void **)(a1 + 40);
  if (v7) {
    free(v7);
  }
  uint64_t v8 = *(void **)(a1 + 48);
  if (v8) {
    free(v8);
  }
  float v9 = *(void **)(a1 + 56);
  if (v9) {
    free(v9);
  }
  uint64_t v10 = *(void **)(a1 + 64);
  if (v10) {
    free(v10);
  }
  uint64_t v11 = *(void **)(a1 + 72);
  if (v11) {
    free(v11);
  }
  uint64_t v12 = *(void **)(a1 + 80);
  if (v12) {
    free(v12);
  }
  int v13 = *(void **)(a1 + 88);
  if (v13) {
    free(v13);
  }
  uint64_t v14 = *(void **)(a1 + 96);
  if (v14) {
    free(v14);
  }
  float v15 = *(void **)(a1 + 104);
  if (v15) {
    free(v15);
  }
  uint64_t v16 = *(void **)(a1 + 112);
  if (v16) {
    free(v16);
  }
  int64_t v17 = *(void **)(a1 + 120);
  if (v17)
  {
    free(v17);
  }
}

void sub_19E150044(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E150070(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E150154(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E150180(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E150238(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E150250(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E150264(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E150300(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E150314(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E150608()
{
}

void *sub_19E1506B0(void *a1, uint64_t a2, uint64_t a3, int32x2_t *__src)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_19E13C2D0(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a2;
    uint64_t v17 = *(void *)(a2 + 16);
  }
  sub_19E25BD4C((uint64_t)a1, (long long *)__p, a3, __src);
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[0]);
  }
  *a1 = &unk_1EF0A8D58;
  int32x2_t v7 = __src[32];
  LODWORD(v8) = __src[17].i32[0];
  if ((int)v8 <= 1) {
    uint64_t v8 = 1;
  }
  else {
    uint64_t v8 = v8;
  }
  int v9 = __src[33].i32[0];
  int v18 = 1;
  int32x2_t v10 = vmax_s32(__src[16], (int32x2_t)0x100000001);
  *(void *)&long long v11 = v10.u32[0];
  *((void *)&v11 + 1) = v10.u32[1];
  long long v19 = v11;
  uint64_t v20 = v8;
  sub_19E13C5C0((uint64_t)(a1 + 2), &v18, (int *)&v21);
  if (v9 <= 1) {
    uint64_t v12 = 1;
  }
  else {
    uint64_t v12 = v9;
  }
  int32x2_t v13 = vmax_s32(v7, (int32x2_t)0x100000001);
  int v18 = 9;
  *(void *)&long long v14 = v13.u32[0];
  *((void *)&v14 + 1) = v13.u32[1];
  long long v19 = v14;
  uint64_t v20 = v12;
  sub_19E13C5C0((uint64_t)(a1 + 5), &v18, (int *)&v21);
  return a1;
}

void sub_19E15080C(_Unwind_Exception *a1)
{
  sub_19E25BF30(v1);
  _Unwind_Resume(a1);
}

void sub_19E150820(_Unwind_Exception *a1)
{
  sub_19E25BF30(v1);
  _Unwind_Resume(a1);
}

void sub_19E150834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E150854(unsigned int *a1)
{
  uint64_t v2 = *sub_19E25DA90((uint64_t)a1, 9);
  (*(void (**)(uint64_t *__return_ptr, unsigned int *, uint64_t))(*(void *)a1 + 168))(&v35, a1, 9);
  uint64_t v3 = v35;
  uint64_t v4 = v36;
  uint64_t v5 = v38;
  uint64_t v33 = *sub_19E25D8B0((uint64_t)a1, 1);
  (*(void (**)(uint64_t *__return_ptr, unsigned int *, uint64_t))(*(void *)a1 + 160))(&v35, a1, 1);
  uint64_t v6 = v35;
  uint64_t v34 = v36;
  uint64_t v31 = v38;
  int v7 = (*(uint64_t (**)(unsigned int *))(*(void *)a1 + 224))(a1);
  int v8 = (*(uint64_t (**)(unsigned int *, uint64_t))(*(void *)a1 + 216))(a1, 1);
  if (v7)
  {
    int v9 = (int)v37 * (int)v34 / (int)v37;
    int v10 = (int)v37 * (int)v34 % (int)v37;
    if (v9 | v10)
    {
      if (v6)
      {
        int v11 = 0;
        int v12 = 0;
        int v13 = 0;
        uint64_t v14 = a1[158];
        if ((int)v14 < 0) {
          uint64_t v14 = (int)v14 + 5;
        }
        uint64_t v15 = a1[159];
        if ((int)v15 < 0) {
          uint64_t v15 = (int)v15 + 5;
        }
        uint64_t v16 = a1[160];
        if ((int)v16 < 0) {
          uint64_t v16 = (int)v16 + 5;
        }
        uint64_t v17 = a1[161];
        if ((int)v17 < 0) {
          uint64_t v17 = (int)v17 + 5;
        }
        uint64_t v18 = a1[162];
        if ((int)v18 < 0) {
          uint64_t v18 = (int)v18 + 5;
        }
        do
        {
          int v32 = v13;
          int v19 = 0;
          int v20 = 0;
          int v21 = 0;
          uint64_t v22 = (v12 + v31 * v11) * v37;
          do
          {
            for (uint64_t i = 0; i != v6; ++i)
            {
              uint64_t v35 = i;
              uint64_t v36 = v20;
              uint64_t v37 = v19;
              uint64_t v38 = v12;
              uint64_t v39 = v11;
              *((_DWORD *)v2
              + *(&v35 + v14)
              + v3 * *(&v35 + v15)
              + v4 * v3 * (*(&v35 + v16) + (*(&v35 + v17) + v5 * *(&v35 + v18)) * v19)) = *(_DWORD *)((char *)v33 + 4 * i + 4 * v6 * (v20 + v34 * (v22 + v19)));
            }
            int v20 = ++v21 / (int)v37;
            int v19 = v21 % (int)v37;
          }
          while (v21 / (int)v37 != v9 || v19 != v10);
          int v13 = v32 + 1;
          int v12 = (v32 + 1) / v8;
          int v11 = (v32 + 1) % v8;
        }
        while (v12 != v7 || v11);
      }
      else
      {
        int v27 = 0;
        do
        {
          int v28 = 1;
          do
          {
            BOOL v29 = v28 / (int)v37 == v9 && v37 * v34 + v37 * (v28 / (int)v37 - v9) == v28;
            ++v28;
          }
          while (!v29);
          ++v27;
        }
        while (v27 / v8 != v7 || v27 % v8);
      }
    }
    else
    {
      int v25 = 1;
      do
      {
        BOOL v26 = v25 / v8 == v7 && v25 / v8 * v8 == v25;
        ++v25;
      }
      while (!v26);
    }
  }
  return (*(uint64_t (**)(unsigned int *))(*(void *)a1 + 32))(a1);
}

uint64_t *sub_19E150B80(uint64_t *result, int a2)
{
  uint64_t v3 = result;
  uint64_t v5 = (uint64_t **)(result + 6);
  uint64_t v4 = (char *)result[6];
  uint64_t v6 = result[2] + 40;
  uint64_t v7 = *((unsigned int *)result + 158);
  if ((int)v7 < 0) {
    uint64_t v7 = (int)v7 + 5;
  }
  uint64_t v8 = *(void *)(v6 + 8 * v7);
  uint64_t v9 = *((unsigned int *)result + 159);
  if ((int)v9 < 0) {
    uint64_t v9 = (int)v9 + 5;
  }
  uint64_t v10 = *(void *)(v6 + 8 * v9);
  uint64_t v11 = *((unsigned int *)result + 160);
  if ((int)v11 < 0) {
    uint64_t v11 = (int)v11 + 5;
  }
  uint64_t v12 = *(void *)(v6 + 8 * v11);
  uint64_t v13 = *((unsigned int *)result + 161);
  if ((int)v13 < 0) {
    uint64_t v13 = (int)v13 + 5;
  }
  uint64_t v14 = *(void *)(v6 + 8 * v13);
  uint64_t v15 = *((unsigned int *)result + 162);
  if ((int)v15 < 0) {
    uint64_t v15 = (int)v15 + 5;
  }
  uint64_t v16 = *(void *)(v6 + 8 * v15);
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v17 = v4;
        int v18 = *((_DWORD *)v4 + 8);
        if (v18 <= a2) {
          break;
        }
        uint64_t v4 = *(char **)v17;
        uint64_t v5 = (uint64_t **)v17;
        if (!*(void *)v17) {
          goto LABEL_18;
        }
      }
      if (v18 >= a2) {
        break;
      }
      uint64_t v4 = (char *)*((void *)v17 + 1);
      if (!v4)
      {
        uint64_t v5 = (uint64_t **)(v17 + 8);
        goto LABEL_18;
      }
    }
  }
  else
  {
    uint64_t v17 = (char *)(result + 6);
LABEL_18:
    int v19 = v17;
    uint64_t v17 = (char *)operator new(0x50uLL);
    *((_DWORD *)v17 + 8) = a2;
    *(_OWORD *)(v17 + 40) = 0u;
    *(_OWORD *)(v17 + 56) = 0u;
    *((void *)v17 + 9) = 0;
    *(void *)uint64_t v17 = 0;
    *((void *)v17 + 1) = 0;
    *((void *)v17 + 2) = v19;
    void *v5 = (uint64_t *)v17;
    uint64_t v20 = *(void *)v3[5];
    int v21 = (uint64_t *)v17;
    if (v20)
    {
      v3[5] = v20;
      int v21 = *v5;
    }
    uint64_t result = sub_19E13C8A0((uint64_t *)v3[6], v21);
    ++v3[7];
  }
  *((void *)v17 + 5) = v8;
  *((void *)v17 + 6) = v10;
  *((void *)v17 + 7) = v12;
  *((void *)v17 + 8) = v14;
  *((void *)v17 + 9) = v16;
  return result;
}

void sub_19E150CF0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_19E25BF30(a1);

  operator delete(v1);
}

id sub_19E150D18(void *a1, uint64_t a2, unint64_t a3)
{
  v216 = a1;
  v209 = objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], v5, v6, v7);
  v222 = 0;
  if (a3)
  {
    unint64_t v11 = a3;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    LODWORD(a3) = 0;
    uint64_t v14 = 0;
    while (1)
    {
      while (v12 < v13)
      {
        *(_DWORD *)uint64_t v12 = a3;
        v12 += 4;
        uint64_t v15 = (uint64_t)v12;
        a3 = (a3 + 1);
        if (a3 >= v11) {
          goto LABEL_31;
        }
      }
      uint64_t v16 = (v12 - v14) >> 2;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 62) {
        sub_19E13D694();
      }
      if ((v13 - v14) >> 1 > v17) {
        unint64_t v17 = (v13 - v14) >> 1;
      }
      if ((unint64_t)(v13 - v14) >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v18 = v17;
      }
      if (v18)
      {
        if (v18 >> 62) {
          sub_19E13C418();
        }
        int v19 = (char *)operator new(4 * v18);
        uint64_t v20 = &v19[4 * v16];
        *(_DWORD *)uint64_t v20 = a3;
        uint64_t v15 = (uint64_t)(v20 + 4);
        if (v12 == v14) {
          goto LABEL_23;
        }
      }
      else
      {
        int v19 = 0;
        uint64_t v20 = (char *)(4 * v16);
        *(_DWORD *)(4 * v16) = a3;
        uint64_t v15 = 4 * v16 + 4;
        if (v12 == v14) {
          goto LABEL_23;
        }
      }
      unint64_t v21 = v12 - 4 - v14;
      if (v21 >= 0xBC)
      {
        if (&v19[v12 - v14 - 4 - (v21 & 0xFFFFFFFFFFFFFFFCLL)] <= &v19[v12 - v14 - 4]
          && &v12[-(v21 & 0xFFFFFFFFFFFFFFFCLL) - 4] <= v12 - 4
          && (unint64_t)(v14 - v19) >= 0x20)
        {
          uint64_t v26 = (v21 >> 2) + 1;
          uint64_t v27 = 4 * (v26 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v22 = &v12[-v27];
          v20 -= v27;
          int v28 = &v19[4 * v16 - 16];
          BOOL v29 = (long long *)(v12 - 16);
          uint64_t v30 = v26 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v31 = *v29;
            *((_OWORD *)v28 - 1) = *(v29 - 1);
            *(_OWORD *)int v28 = v31;
            v28 -= 32;
            v29 -= 2;
            v30 -= 8;
          }
          while (v30);
          if (v26 == (v26 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_23;
          }
        }
        else
        {
          uint64_t v22 = v12;
        }
      }
      else
      {
        uint64_t v22 = v12;
      }
      do
      {
        int v23 = *((_DWORD *)v22 - 1);
        v22 -= 4;
        *((_DWORD *)v20 - 1) = v23;
        v20 -= 4;
      }
      while (v22 != v14);
LABEL_23:
      uint64_t v13 = &v19[4 * v18];
      if (v14)
      {
        uint64_t v24 = v14;
        uint64_t v25 = v15;
        operator delete(v24);
        uint64_t v15 = v25;
      }
      uint64_t v14 = v20;
      a3 = (a3 + 1);
      uint64_t v12 = (char *)v15;
      if (a3 >= v11)
      {
LABEL_31:
        v214 = (char *)v15;
        v222 = (char *)v15;
        a3 = v11;
        goto LABEL_33;
      }
    }
  }
  v214 = 0;
  uint64_t v14 = 0;
LABEL_33:
  long long __p = v14;
  v212 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v8, v9, v10, a2);
  v211 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v32, v33, v34);
  v210 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v35, v36, v37);
  if (v14 != v214)
  {
    unint64_t v213 = a3;
    double v41 = 0.0;
    uint64_t v42 = v14;
    while (1)
    {
      unint64_t v43 = (void **)(v216 + 8);
      uint64_t v45 = (uint64_t **)(v216 + 16);
      unint64_t v44 = (uint64_t *)*((void *)v216 + 2);
      v218 = v42;
      unsigned int v46 = *(_DWORD *)v42;
      if (v44)
      {
        while (1)
        {
          while (1)
          {
            int v47 = (uint64_t **)v44;
            unsigned int v48 = *((_DWORD *)v44 + 8);
            if (v46 >= v48) {
              break;
            }
            unint64_t v44 = *v47;
            uint64_t v45 = v47;
            if (!*v47) {
              goto LABEL_43;
            }
          }
          if (v48 >= v46) {
            break;
          }
          unint64_t v44 = v47[1];
          if (!v44)
          {
            uint64_t v45 = v47 + 1;
            goto LABEL_43;
          }
        }
        uint64_t v49 = (char *)v47;
        uint64_t v55 = v47[6];
        unint64_t v53 = v47 + 6;
        unint64_t v52 = v55;
        uint64_t v54 = v53;
        v219 = v53;
        if (v55) {
          goto LABEL_50;
        }
      }
      else
      {
        int v47 = (uint64_t **)(v216 + 16);
LABEL_43:
        uint64_t v49 = (char *)operator new(0x40uLL);
        *((_DWORD *)v49 + 8) = v46;
        *((void *)v49 + 7) = 0;
        *((void *)v49 + 6) = 0;
        *((void *)v49 + 5) = v49 + 48;
        *(void *)uint64_t v49 = 0;
        *((void *)v49 + 1) = 0;
        *((void *)v49 + 2) = v47;
        *uint64_t v45 = (uint64_t *)v49;
        uint64_t v50 = (void *)**v43;
        int v51 = (uint64_t *)v49;
        if (v50)
        {
          long long *v43 = v50;
          int v51 = *v45;
        }
        sub_19E13C8A0(*((uint64_t **)v216 + 2), v51);
        ++*((void *)v216 + 3);
        unsigned int v46 = *(_DWORD *)v218;
        unint64_t v53 = (uint64_t **)(v49 + 48);
        unint64_t v52 = (uint64_t *)*((void *)v49 + 6);
        uint64_t v54 = (uint64_t **)(v49 + 48);
        v219 = (uint64_t **)(v49 + 48);
        if (v52)
        {
          while (1)
          {
LABEL_50:
            while (1)
            {
              unint64_t v53 = (uint64_t **)v52;
              unsigned int v56 = *((_DWORD *)v52 + 7);
              if (v46 >= v56) {
                break;
              }
              unint64_t v52 = *v53;
              uint64_t v54 = v53;
              if (!*v53) {
                goto LABEL_54;
              }
            }
            if (v56 >= v46) {
              break;
            }
            unint64_t v52 = v53[1];
            if (!v52)
            {
              uint64_t v54 = v53 + 1;
              goto LABEL_54;
            }
          }
          LODWORD(v3) = *((_DWORD *)v53 + 8);
          if (v213 > 0x31) {
            goto LABEL_35;
          }
LABEL_59:
          v217 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v38, v39, v40);
          uint64_t v63 = (unsigned int *)__p;
          double v64 = 0.0;
          if (__p == v222)
          {
            unsigned int v65 = 0;
          }
          else
          {
            v215 = v49;
            unsigned int v65 = 0;
            unsigned int v66 = 0;
            do
            {
              uint64_t v67 = v219;
              int v68 = *v219;
              unsigned int v69 = *v63;
LABEL_63:
              int v70 = v67;
              if (v68)
              {
                while (1)
                {
                  uint64_t v67 = (uint64_t **)v68;
                  unsigned int v71 = *((_DWORD *)v68 + 7);
                  if (v69 < v71)
                  {
                    int v68 = *v67;
                    goto LABEL_63;
                  }
                  if (v71 >= v69) {
                    break;
                  }
                  int v68 = v67[1];
                  if (!v68)
                  {
                    int v70 = v67 + 1;
                    goto LABEL_68;
                  }
                }
                unsigned int v220 = *((_DWORD *)v67 + 8);
              }
              else
              {
LABEL_68:
                uint64_t v72 = (uint64_t *)operator new(0x28uLL);
                *((_DWORD *)v72 + 7) = v69;
                *((_DWORD *)v72 + 8) = 0;
                *uint64_t v72 = 0;
                v72[1] = 0;
                v72[2] = (uint64_t)v67;
                float32x4_t *v70 = v72;
                float v73 = (void *)**((void **)v215 + 5);
                if (v73)
                {
                  *((void *)v215 + 5) = v73;
                  uint64_t v72 = *v70;
                }
                float32x4_t v74 = *v219;
                BOOL v75 = v72 == *v219;
                *((unsigned char *)v72 + 24) = v75;
                if (!v75)
                {
                  do
                  {
                    uint64_t v76 = v72[2];
                    if (*(unsigned char *)(v76 + 24)) {
                      break;
                    }
                    float v77 = *(uint64_t **)(v76 + 16);
                    uint64_t v78 = *v77;
                    if (*v77 == v76)
                    {
                      uint64_t v81 = v77[1];
                      if (!v81 || (v82 = *(unsigned __int8 *)(v81 + 24), float v79 = (unsigned char *)(v81 + 24), v82))
                      {
                        if (*(uint64_t **)v76 == v72)
                        {
                          *(unsigned char *)(v76 + 24) = 1;
                          *((unsigned char *)v77 + 24) = 0;
                          uint64_t v85 = *(void *)(v76 + 8);
                          *float v77 = v85;
                          if (v85) {
                            goto LABEL_85;
                          }
                        }
                        else
                        {
                          float v83 = *(uint64_t **)(v76 + 8);
                          uint64_t v84 = *v83;
                          *(void *)(v76 + 8) = *v83;
                          if (v84)
                          {
                            *(void *)(v84 + 16) = v76;
                            float v77 = *(uint64_t **)(v76 + 16);
                          }
                          v83[2] = (uint64_t)v77;
                          *(void *)(*(void *)(v76 + 16) + 8 * (**(void **)(v76 + 16) != v76)) = v83;
                          *float v83 = v76;
                          *(void *)(v76 + 16) = v83;
                          float v77 = (uint64_t *)v83[2];
                          uint64_t v76 = *v77;
                          *((unsigned char *)v83 + 24) = 1;
                          *((unsigned char *)v77 + 24) = 0;
                          uint64_t v85 = *(void *)(v76 + 8);
                          *float v77 = v85;
                          if (v85) {
LABEL_85:
                          }
                            *(void *)(v85 + 16) = v77;
                        }
                        *(void *)(v76 + 16) = v77[2];
                        *(void *)(v77[2] + 8 * (*(void *)v77[2] != (void)v77)) = v76;
                        *(void *)(v76 + 8) = v77;
LABEL_92:
                        v77[2] = v76;
                        break;
                      }
                    }
                    else if (!v78 || (v80 = *(unsigned __int8 *)(v78 + 24), float v79 = (unsigned char *)(v78 + 24), v80))
                    {
                      if (*(uint64_t **)v76 == v72)
                      {
                        uint64_t v133 = v72[1];
                        *(void *)uint64_t v76 = v133;
                        if (v133)
                        {
                          *(void *)(v133 + 16) = v76;
                          float v77 = *(uint64_t **)(v76 + 16);
                        }
                        v72[2] = (uint64_t)v77;
                        *(void *)(*(void *)(v76 + 16) + 8 * (**(void **)(v76 + 16) != v76)) = v72;
                        v72[1] = v76;
                        *(void *)(v76 + 16) = v72;
                        float v77 = (uint64_t *)v72[2];
                        *((unsigned char *)v72 + 24) = 1;
                        *((unsigned char *)v77 + 24) = 0;
                        uint64_t v76 = v77[1];
                        float v86 = *(uint64_t **)v76;
                        v77[1] = *(void *)v76;
                        if (v86) {
LABEL_90:
                        }
                          v86[2] = (uint64_t)v77;
                      }
                      else
                      {
                        *(unsigned char *)(v76 + 24) = 1;
                        *((unsigned char *)v77 + 24) = 0;
                        uint64_t v76 = v77[1];
                        float v86 = *(uint64_t **)v76;
                        v77[1] = *(void *)v76;
                        if (v86) {
                          goto LABEL_90;
                        }
                      }
                      *(void *)(v76 + 16) = v77[2];
                      *(void *)(v77[2] + 8 * (*(void *)v77[2] != (void)v77)) = v76;
                      *(void *)uint64_t v76 = v77;
                      goto LABEL_92;
                    }
                    *(unsigned char *)(v76 + 24) = 1;
                    uint64_t v72 = v77;
                    *((unsigned char *)v77 + 24) = v77 == v74;
                    *float v79 = 1;
                  }
                  while (v77 != v74);
                }
                unsigned int v220 = 0;
                ++*((void *)v215 + 7);
                unsigned int v69 = *v63;
              }
              float v87 = (void **)(v216 + 8);
              int v89 = (char **)(v216 + 16);
              float v88 = (char *)*((void *)v216 + 2);
              float v90 = (char **)(v216 + 16);
              float v91 = (char **)(v216 + 16);
              if (v88)
              {
                while (1)
                {
                  while (1)
                  {
                    float v91 = (char **)v88;
                    unsigned int v92 = *((_DWORD *)v88 + 8);
                    if (v69 >= v92) {
                      break;
                    }
                    float v88 = *v91;
                    float v90 = v91;
                    if (!*v91) {
                      goto LABEL_101;
                    }
                  }
                  if (v92 >= v69) {
                    break;
                  }
                  float v88 = v91[1];
                  if (!v88)
                  {
                    float v90 = v91 + 1;
                    goto LABEL_101;
                  }
                }
                float v93 = (char *)v91;
              }
              else
              {
LABEL_101:
                float v93 = (char *)operator new(0x40uLL);
                *((_DWORD *)v93 + 8) = v69;
                *((void *)v93 + 7) = 0;
                *((void *)v93 + 6) = 0;
                *((void *)v93 + 5) = v93 + 48;
                *(void *)float v93 = 0;
                *((void *)v93 + 1) = 0;
                *((void *)v93 + 2) = v91;
                *float v90 = v93;
                float v94 = (void *)**v87;
                int v95 = v93;
                if (v94)
                {
                  float *v87 = v94;
                  int v95 = *v90;
                }
                int v96 = *v89;
                BOOL v75 = v95 == *v89;
                v95[24] = v75;
                if (!v75)
                {
                  do
                  {
                    uint64_t v97 = *((void *)v95 + 2);
                    if (*(unsigned char *)(v97 + 24)) {
                      break;
                    }
                    int v98 = *(char **)(v97 + 16);
                    uint64_t v99 = *(void *)v98;
                    if (*(void *)v98 == v97)
                    {
                      uint64_t v102 = *((void *)v98 + 1);
                      if (!v102 || (int v103 = *(unsigned __int8 *)(v102 + 24), v100 = (unsigned char *)(v102 + 24), v103))
                      {
                        if (*(char **)v97 == v95)
                        {
                          *(unsigned char *)(v97 + 24) = 1;
                          v98[24] = 0;
                          uint64_t v106 = *(void *)(v97 + 8);
                          *(void *)int v98 = v106;
                          if (v106) {
                            goto LABEL_118;
                          }
                        }
                        else
                        {
                          uint64_t v104 = *(uint64_t **)(v97 + 8);
                          uint64_t v105 = *v104;
                          *(void *)(v97 + 8) = *v104;
                          if (v105)
                          {
                            *(void *)(v105 + 16) = v97;
                            int v98 = *(char **)(v97 + 16);
                          }
                          v104[2] = (uint64_t)v98;
                          *(void *)(*(void *)(v97 + 16) + 8 * (**(void **)(v97 + 16) != v97)) = v104;
                          *uint64_t v104 = v97;
                          *(void *)(v97 + 16) = v104;
                          int v98 = (char *)v104[2];
                          uint64_t v97 = *(void *)v98;
                          *((unsigned char *)v104 + 24) = 1;
                          v98[24] = 0;
                          uint64_t v106 = *(void *)(v97 + 8);
                          *(void *)int v98 = v106;
                          if (v106) {
LABEL_118:
                          }
                            *(void *)(v106 + 16) = v98;
                        }
                        *(void *)(v97 + 16) = *((void *)v98 + 2);
                        *(void *)(*((void *)v98 + 2) + 8 * (**((void **)v98 + 2) != (void)v98)) = v97;
                        *(void *)(v97 + 8) = v98;
LABEL_125:
                        *((void *)v98 + 2) = v97;
                        break;
                      }
                    }
                    else if (!v99 || (v101 = *(unsigned __int8 *)(v99 + 24), float v100 = (unsigned char *)(v99 + 24), v101))
                    {
                      if (*(char **)v97 == v95)
                      {
                        uint64_t v134 = *((void *)v95 + 1);
                        *(void *)uint64_t v97 = v134;
                        if (v134)
                        {
                          *(void *)(v134 + 16) = v97;
                          int v98 = *(char **)(v97 + 16);
                        }
                        *((void *)v95 + 2) = v98;
                        *(void *)(*(void *)(v97 + 16) + 8 * (**(void **)(v97 + 16) != v97)) = v95;
                        *((void *)v95 + 1) = v97;
                        *(void *)(v97 + 16) = v95;
                        int v98 = (char *)*((void *)v95 + 2);
                        v95[24] = 1;
                        v98[24] = 0;
                        uint64_t v97 = *((void *)v98 + 1);
                        float v107 = *(char **)v97;
                        *((void *)v98 + 1) = *(void *)v97;
                        if (v107) {
LABEL_123:
                        }
                          *((void *)v107 + 2) = v98;
                      }
                      else
                      {
                        *(unsigned char *)(v97 + 24) = 1;
                        v98[24] = 0;
                        uint64_t v97 = *((void *)v98 + 1);
                        float v107 = *(char **)v97;
                        *((void *)v98 + 1) = *(void *)v97;
                        if (v107) {
                          goto LABEL_123;
                        }
                      }
                      *(void *)(v97 + 16) = *((void *)v98 + 2);
                      *(void *)(*((void *)v98 + 2) + 8 * (**((void **)v98 + 2) != (void)v98)) = v97;
                      *(void *)uint64_t v97 = v98;
                      goto LABEL_125;
                    }
                    *(unsigned char *)(v97 + 24) = 1;
                    int v95 = v98;
                    v98[24] = v98 == v96;
                    unsigned char *v100 = 1;
                  }
                  while (v98 != v96);
                }
                ++*((void *)v216 + 3);
              }
              int v109 = (void **)(v93 + 48);
              unint64_t v108 = (char *)*((void *)v93 + 6);
              unsigned int v110 = *(_DWORD *)v218;
              int64_t v111 = v93 + 48;
              uint64_t v112 = v93 + 48;
              if (v108)
              {
                while (1)
                {
                  while (1)
                  {
                    uint64_t v112 = v108;
                    unsigned int v113 = *((_DWORD *)v108 + 7);
                    if (v110 >= v113) {
                      break;
                    }
                    unint64_t v108 = *(char **)v112;
                    int64_t v111 = v112;
                    if (!*(void *)v112) {
                      goto LABEL_134;
                    }
                  }
                  if (v113 >= v110) {
                    break;
                  }
                  unint64_t v108 = (char *)*((void *)v112 + 1);
                  if (!v108)
                  {
                    int64_t v111 = v112 + 8;
                    goto LABEL_134;
                  }
                }
                int v127 = *((_DWORD *)v112 + 8);
              }
              else
              {
LABEL_134:
                BOOL v114 = operator new(0x28uLL);
                v114[7] = v110;
                v114[8] = 0;
                *(void *)BOOL v114 = 0;
                *((void *)v114 + 1) = 0;
                *((void *)v114 + 2) = v112;
                void *v111 = v114;
                uint64_t v115 = **((void **)v93 + 5);
                if (v115)
                {
                  *((void *)v93 + 5) = v115;
                  BOOL v114 = (_DWORD *)*v111;
                }
                unsigned long long v116 = *v109;
                BOOL v75 = v114 == *v109;
                *((unsigned char *)v114 + 24) = v75;
                if (!v75)
                {
                  do
                  {
                    uint64_t v117 = *((void *)v114 + 2);
                    if (*(unsigned char *)(v117 + 24)) {
                      break;
                    }
                    float v118 = *(unsigned char **)(v117 + 16);
                    uint64_t v119 = *(void *)v118;
                    if (*(void *)v118 == v117)
                    {
                      uint64_t v122 = *((void *)v118 + 1);
                      if (!v122 || (v123 = *(unsigned __int8 *)(v122 + 24), unsigned long long v120 = (unsigned char *)(v122 + 24), v123))
                      {
                        if (*(_DWORD **)v117 == v114)
                        {
                          *(unsigned char *)(v117 + 24) = 1;
                          v118[24] = 0;
                          uint64_t v126 = *(void *)(v117 + 8);
                          *(void *)float v118 = v126;
                          if (v126) {
                            goto LABEL_151;
                          }
                        }
                        else
                        {
                          uint64_t v124 = *(uint64_t **)(v117 + 8);
                          uint64_t v125 = *v124;
                          *(void *)(v117 + 8) = *v124;
                          if (v125)
                          {
                            *(void *)(v125 + 16) = v117;
                            float v118 = *(unsigned char **)(v117 + 16);
                          }
                          v124[2] = (uint64_t)v118;
                          *(void *)(*(void *)(v117 + 16) + 8 * (**(void **)(v117 + 16) != v117)) = v124;
                          *uint64_t v124 = v117;
                          *(void *)(v117 + 16) = v124;
                          float v118 = (unsigned char *)v124[2];
                          uint64_t v117 = *(void *)v118;
                          *((unsigned char *)v124 + 24) = 1;
                          v118[24] = 0;
                          uint64_t v126 = *(void *)(v117 + 8);
                          *(void *)float v118 = v126;
                          if (v126) {
LABEL_151:
                          }
                            *(void *)(v126 + 16) = v118;
                        }
                        *(void *)(v117 + 16) = *((void *)v118 + 2);
                        *(void *)(*((void *)v118 + 2) + 8 * (**((void **)v118 + 2) != (void)v118)) = v117;
                        *(void *)(v117 + 8) = v118;
LABEL_158:
                        *((void *)v118 + 2) = v117;
                        break;
                      }
                    }
                    else if (!v119 || (v121 = *(unsigned __int8 *)(v119 + 24), unsigned long long v120 = (unsigned char *)(v119 + 24), v121))
                    {
                      if (*(_DWORD **)v117 == v114)
                      {
                        uint64_t v135 = *((void *)v114 + 1);
                        *(void *)uint64_t v117 = v135;
                        if (v135)
                        {
                          *(void *)(v135 + 16) = v117;
                          float v118 = *(unsigned char **)(v117 + 16);
                        }
                        *((void *)v114 + 2) = v118;
                        *(void *)(*(void *)(v117 + 16) + 8 * (**(void **)(v117 + 16) != v117)) = v114;
                        *((void *)v114 + 1) = v117;
                        *(void *)(v117 + 16) = v114;
                        float v118 = (unsigned char *)*((void *)v114 + 2);
                        *((unsigned char *)v114 + 24) = 1;
                        v118[24] = 0;
                        uint64_t v117 = *((void *)v118 + 1);
                        uint64_t v128 = *(_DWORD **)v117;
                        *((void *)v118 + 1) = *(void *)v117;
                        if (v128) {
LABEL_156:
                        }
                          *((void *)v128 + 2) = v118;
                      }
                      else
                      {
                        *(unsigned char *)(v117 + 24) = 1;
                        v118[24] = 0;
                        uint64_t v117 = *((void *)v118 + 1);
                        uint64_t v128 = *(_DWORD **)v117;
                        *((void *)v118 + 1) = *(void *)v117;
                        if (v128) {
                          goto LABEL_156;
                        }
                      }
                      *(void *)(v117 + 16) = *((void *)v118 + 2);
                      *(void *)(*((void *)v118 + 2) + 8 * (**((void **)v118 + 2) != (void)v118)) = v117;
                      *(void *)uint64_t v117 = v118;
                      goto LABEL_158;
                    }
                    *(unsigned char *)(v117 + 24) = 1;
                    BOOL v114 = v118;
                    v118[24] = v118 == (unsigned char *)v116;
                    *unsigned long long v120 = 1;
                  }
                  while (v118 != (unsigned char *)v116);
                }
                int v127 = 0;
                ++*((void *)v93 + 7);
              }
              uint64_t v129 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v60, v220, v62);
              objc_msgSend_addObject_(v217, v130, (uint64_t)v129, v131);
              v66 += v127;
              v65 += v220;

              ++v63;
            }
            while (v63 != (unsigned int *)v222);
            int v136 = v219;
            if (v66)
            {
              int v137 = *v219;
              unsigned int v138 = *(_DWORD *)v218;
              float v139 = v219;
              uint64_t v49 = v215;
              if (*v219)
              {
                while (1)
                {
                  while (1)
                  {
                    int v136 = (uint64_t **)v137;
                    unsigned int v140 = *((_DWORD *)v137 + 7);
                    if (v138 >= v140) {
                      break;
                    }
                    int v137 = *v136;
                    float v139 = v136;
                    if (!*v136) {
                      goto LABEL_188;
                    }
                  }
                  if (v140 >= v138) {
                    break;
                  }
                  int v137 = v136[1];
                  if (!v137)
                  {
                    float v139 = v136 + 1;
                    goto LABEL_188;
                  }
                }
                int v141 = v136;
              }
              else
              {
LABEL_188:
                int v141 = operator new(0x28uLL);
                v141[7] = v138;
                v141[8] = 0;
                *(void *)int v141 = 0;
                *((void *)v141 + 1) = 0;
                *((void *)v141 + 2) = v136;
                *float v139 = (uint64_t *)v141;
                float32x4x2_t v142 = (void *)**((void **)v215 + 5);
                float v143 = (uint64_t *)v141;
                if (v142)
                {
                  *((void *)v215 + 5) = v142;
                  float v143 = *v139;
                }
                sub_19E13C8A0(*((uint64_t **)v215 + 6), v143);
                ++*((void *)v215 + 7);
              }
              LODWORD(v132) = v141[8];
              double v64 = (double)v132 * 100.0 / (double)v66;
            }
            else
            {
              uint64_t v49 = v215;
            }
          }
          float v144 = objc_msgSend_numberWithDouble_(NSNumber, v60, v61, v62, v64);
          objc_msgSend_addObject_(v212, v145, (uint64_t)v144, v146);

          if (v65)
          {
            v151 = v219;
            v152 = *v219;
            unsigned int v153 = *(_DWORD *)v218;
            v154 = v219;
            if (*v219)
            {
              while (1)
              {
                while (1)
                {
                  v154 = (uint64_t **)v152;
                  unsigned int v155 = *((_DWORD *)v152 + 7);
                  if (v153 >= v155) {
                    break;
                  }
                  v152 = *v154;
                  v151 = v154;
                  if (!*v154) {
                    goto LABEL_203;
                  }
                }
                if (v155 >= v153) {
                  break;
                }
                v152 = v154[1];
                if (!v152)
                {
                  v151 = v154 + 1;
                  goto LABEL_203;
                }
              }
              v157 = v154;
            }
            else
            {
LABEL_203:
              v156 = v151;
              v157 = operator new(0x28uLL);
              v157[7] = v153;
              v157[8] = 0;
              *(void *)v157 = 0;
              *((void *)v157 + 1) = 0;
              *((void *)v157 + 2) = v154;
              *v156 = (uint64_t *)v157;
              uint64_t v158 = **((void **)v49 + 5);
              v159 = (uint64_t *)v157;
              if (v158)
              {
                *((void *)v49 + 5) = v158;
                v159 = *v156;
              }
              sub_19E13C8A0(*((uint64_t **)v49 + 6), v159);
              ++*((void *)v49 + 7);
            }
            LODWORD(v150) = v157[8];
            objc_msgSend_numberWithDouble_(NSNumber, v147, v148, v149, (double)v150 * 100.0 / (double)v65);
          }
          else
          {
            objc_msgSend_numberWithDouble_(NSNumber, v147, v148, v149, 0.0);
          v160 = };
          objc_msgSend_addObject_(v211, v161, (uint64_t)v160, v162);

          v166 = objc_msgSend_copy(v217, v163, v164, v165);
          objc_msgSend_addObject_(v210, v167, (uint64_t)v166, v168);

          goto LABEL_35;
        }
      }
LABEL_54:
      unint64_t v57 = operator new(0x28uLL);
      v57[7] = v46;
      v57[8] = 0;
      *(void *)unint64_t v57 = 0;
      *((void *)v57 + 1) = 0;
      *((void *)v57 + 2) = v53;
      char *v54 = (uint64_t *)v57;
      uint64_t v58 = **((void **)v49 + 5);
      uint64_t v59 = (uint64_t *)v57;
      if (v58)
      {
        *((void *)v49 + 5) = v58;
        uint64_t v59 = *v54;
      }
      sub_19E13C8A0(*((uint64_t **)v49 + 6), v59);
      ++*((void *)v49 + 7);
      LODWORD(v3) = v57[8];
      if (v213 <= 0x31) {
        goto LABEL_59;
      }
LABEL_35:
      double v41 = v41 + (double)v3;
      uint64_t v42 = v218 + 4;
      if (v218 + 4 == v214) {
        goto LABEL_211;
      }
    }
  }
  double v41 = 0.0;
LABEL_211:
  v169 = objc_msgSend_numberWithDouble_(NSNumber, v38, v39, v40, v41 * 100.0 / (double)v208);
  objc_msgSend_setObject_forKeyedSubscript_(v209, v170, (uint64_t)v169, (uint64_t)MLPModelTrainerOverallAccuracyKey);

  v174 = objc_msgSend_copy(v212, v171, v172, v173);
  objc_msgSend_setObject_forKeyedSubscript_(v209, v175, (uint64_t)v174, (uint64_t)MLPModelTrainerPerClassPrecisionKey);

  v179 = objc_msgSend_copy(v211, v176, v177, v178);
  objc_msgSend_setObject_forKeyedSubscript_(v209, v180, (uint64_t)v179, (uint64_t)MLPModelTrainerPerClassRecallKey);

  v184 = objc_msgSend_copy(v210, v181, v182, v183);
  objc_msgSend_setObject_forKeyedSubscript_(v209, v185, (uint64_t)v184, (uint64_t)MLPModelTrainerConfusionMatrixKey);

  float v186 = (float)-*((float *)v216 + 8) / (float)v208;
  long double v187 = exp2(v186);
  *(float *)&long double v187 = v187;
  v191 = objc_msgSend_numberWithFloat_(NSNumber, v188, v189, v190, (double)v187);
  objc_msgSend_setObject_forKeyedSubscript_(v209, v192, (uint64_t)v191, (uint64_t)MLPModelTrainerPerplexityKey);

  *(float *)&double v193 = v186;
  v197 = objc_msgSend_numberWithFloat_(NSNumber, v194, v195, v196, v193);
  objc_msgSend_setObject_forKeyedSubscript_(v209, v198, (uint64_t)v197, (uint64_t)MLPModelTrainerBpcKey);

  LODWORD(v202) = *((_DWORD *)v216 + 9);
  if (*(float *)&v202 > 0.0)
  {
    *(float *)&double v202 = *(float *)&v202 / (float)v208;
    v203 = objc_msgSend_numberWithFloat_(NSNumber, v199, v200, v201, v202);
    objc_msgSend_setObject_forKeyedSubscript_(v209, v204, (uint64_t)v203, (uint64_t)MLPModelTrainerLossValueKey);
  }
  id v205 = v209;

  if (__p) {
    operator delete(__p);
  }

  return v205;
}

void sub_19E151D00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_19E151E98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E151F14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t MRLNeuralNetworkCreateModelContainerWithJSON(uint64_t a1)
{
  uint64_t v2 = [MontrealModelJSONParser alloc];
  uint64_t v5 = objc_msgSend_initWithURL_(v2, v3, a1, v4);
  uint64_t v9 = v5;
  if (v5)
  {
    uint64_t v10 = objc_msgSend_network(v5, v6, v7, v8);
    uint64_t ModelContainer = objc_msgSend_generateModelContainer(v10, v11, v12, v13);

    return ModelContainer;
  }
  else
  {

    return 0;
  }
}

void sub_19E15201C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E152030(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E152040(char **a1)
{
  if (!*((unsigned char *)a1 + 66))
  {
    uint64_t v1 = (unint64_t *)a1;
    int v2 = *((unsigned __int8 *)a1 + 65);
    uint64_t v3 = 7;
    if (!*((unsigned char *)a1 + 65)) {
      uint64_t v3 = 6;
    }
    if ((unint64_t)a1[v3] >= 2)
    {
      uint64_t v4 = 6;
      if (!*((unsigned char *)a1 + 65)) {
        uint64_t v4 = 7;
      }
      uint64_t v5 = *a1;
      if (!a1[v4]
        || (uint64_t v6 = (*((_DWORD *)a1 + 6) * *((_DWORD *)a1 + 8) * *((_DWORD *)a1 + 10)), v6 << 32 < 1))
      {
        *a1 = 0;
        a1[1] = 0;
        a1[2] = 0;
        if (!v5) {
          goto LABEL_78;
        }
        goto LABEL_77;
      }
      uint64_t v7 = 0;
      unint64_t v8 = 0;
      uint64_t v9 = 0;
      unint64_t v10 = 0;
      unint64_t v11 = (unint64_t *)(a1 + 7);
      uint64_t v12 = (unint64_t *)(a1 + 6);
      uint64_t v13 = (int)v6;
      uint64_t __n = 4 * (int)v6;
      uint64_t v67 = (unint64_t *)(a1 + 7);
      unsigned int v66 = (unint64_t *)(a1 + 6);
      uint64_t v70 = (int)v6;
      while (1)
      {
        BOOL v15 = v2 == 0;
        uint64_t v16 = v2 ? v11 : v12;
        if (*v16) {
          break;
        }
LABEL_11:
        v5 += 4 * v13;
        ++v8;
        if (v2) {
          uint64_t v14 = v12;
        }
        else {
          uint64_t v14 = v11;
        }
        if (*v14 <= v8)
        {
          uint64_t v5 = (char *)*v1;
          unint64_t *v1 = v10;
          v1[1] = (unint64_t)v7;
          v1[2] = (unint64_t)v9;
          if (!v5) {
            goto LABEL_78;
          }
LABEL_77:
          operator delete(v5);
          int v2 = *((unsigned __int8 *)v1 + 65);
          goto LABEL_78;
        }
      }
      unint64_t v63 = v8;
      unint64_t v17 = 0;
      unsigned int v69 = v5;
      while (1)
      {
        if (v15) {
          int v19 = v11;
        }
        else {
          int v19 = v12;
        }
        uint64_t v20 = &v5[4 * v17 * v13 * *v19];
        int64_t v21 = (int64_t)&v7[-v10];
        uint64_t v22 = (uint64_t)&v7[-v10] >> 2;
        int v23 = (unsigned char *)(v10 + ((unint64_t)&v7[-v10] & 0xFFFFFFFFFFFFFFFCLL));
        if (v13 > (v9 - v7) >> 2)
        {
          unint64_t v24 = v22 + v13;
          if ((unint64_t)(v22 + v13) >> 62) {
            sub_19E13D694();
          }
          if ((uint64_t)&v9[-v10] >> 1 > v24) {
            unint64_t v24 = (uint64_t)&v9[-v10] >> 1;
          }
          if ((unint64_t)&v9[-v10] >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v25 = v24;
          }
          if (v25)
          {
            if (v25 >> 62) {
              sub_19E13C418();
            }
            uint64_t v26 = operator new(4 * v25);
          }
          else
          {
            uint64_t v26 = 0;
          }
          uint64_t v40 = &v26[4 * v22];
          memcpy(v40, v20, __n);
          if ((char *)v10 != v7)
          {
            unint64_t v41 = v21 - 4;
            if ((unint64_t)(v21 - 4) < 0xBC
              || &v26[(v21 & 0xFFFFFFFFFFFFFFFCLL) - 4 - (v41 & 0xFFFFFFFFFFFFFFFCLL)] > &v26[(v21 & 0xFFFFFFFFFFFFFFFCLL)
                                                                                            - 4]
              || v10 + (v21 & 0xFFFFFFFFFFFFFFFCLL) - 4 - (v41 & 0xFFFFFFFFFFFFFFFCLL) > v10
                                                                                       + (v21 & 0xFFFFFFFFFFFFFFFCLL)
                                                                                       - 4)
            {
              uint64_t v42 = (char *)(v10 + ((unint64_t)&v7[-v10] & 0xFFFFFFFFFFFFFFFCLL));
              unint64_t v43 = &v26[4 * v22];
            }
            else
            {
              uint64_t v42 = (char *)(v10 + ((unint64_t)&v7[-v10] & 0xFFFFFFFFFFFFFFFCLL));
              unint64_t v43 = &v26[4 * v22];
              if (v10 - (unint64_t)v26 >= 0x20)
              {
                uint64_t v47 = (v41 >> 2) + 1;
                uint64_t v48 = 4 * (v47 & 0x7FFFFFFFFFFFFFF8);
                uint64_t v42 = &v23[-v48];
                unint64_t v43 = &v40[-v48];
                uint64_t v49 = &v26[4 * v22 - 16];
                uint64_t v50 = (long long *)(v10 + 4 * v22 - 16);
                uint64_t v51 = v47 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  long long v52 = *v50;
                  *(v49 - 1) = *(v50 - 1);
                  *uint64_t v49 = v52;
                  v49 -= 2;
                  v50 -= 2;
                  v51 -= 8;
                }
                while (v51);
                if (v47 == (v47 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_51:
                  uint64_t v45 = &v40[4 * v70];
                  size_t v46 = v7 - v23;
                  if (v46) {
                    goto LABEL_52;
                  }
                  goto LABEL_53;
                }
              }
            }
            do
            {
              int v44 = *((_DWORD *)v42 - 1);
              v42 -= 4;
              *((_DWORD *)v43 - 1) = v44;
              v43 -= 4;
            }
            while (v42 != (char *)v10);
            goto LABEL_51;
          }
          unint64_t v43 = &v26[4 * v22];
          uint64_t v45 = &v40[4 * v70];
          size_t v46 = v7 - v23;
          if (v46) {
LABEL_52:
          }
            memmove(v45, v23, v46);
LABEL_53:
          uint64_t v9 = &v26[4 * v25];
          uint64_t v7 = &v45[v46];
          uint64_t v1 = (unint64_t *)a1;
          uint64_t v5 = v69;
          uint64_t v12 = v66;
          unint64_t v11 = v67;
          if (v10) {
            operator delete((void *)v10);
          }
          unint64_t v10 = (unint64_t)v43;
          uint64_t v13 = v70;
          goto LABEL_21;
        }
        unsigned int v65 = v9;
        uint64_t v27 = &v20[4 * v13];
        uint64_t v28 = (v7 - v23) >> 2;
        if (v28 >= v13) {
          break;
        }
        BOOL v29 = &v20[4 * v28];
        size_t v30 = v27 - v29;
        memmove(v7, v29, v30);
        long long v31 = &v7[v30];
        if (v7 - v23 >= 1)
        {
          uint64_t v27 = v29;
          uint64_t v13 = v70;
          goto LABEL_41;
        }
        v7 += v30;
LABEL_74:
        uint64_t v1 = (unint64_t *)a1;
        uint64_t v5 = v69;
        uint64_t v12 = v66;
        unint64_t v11 = v67;
        uint64_t v13 = v70;
        uint64_t v9 = v65;
LABEL_21:
        ++v17;
        int v2 = *((unsigned __int8 *)v1 + 65);
        BOOL v15 = *((unsigned char *)v1 + 65) == 0;
        uint64_t v18 = 7;
        if (!*((unsigned char *)v1 + 65)) {
          uint64_t v18 = 6;
        }
        if (v1[v18] <= v17)
        {
          unint64_t v8 = v63;
          goto LABEL_11;
        }
      }
      long long v31 = v7;
LABEL_41:
      int v32 = &v23[4 * v13];
      size_t v33 = v31 - v32;
      uint64_t v34 = (v31 - v32) >> 2;
      uint64_t v35 = &v31[-4 * v13];
      uint64_t v36 = v31;
      if (v35 < v7)
      {
        unint64_t v37 = (v21 & 0xFFFFFFFFFFFFFFFCLL) + v33;
        unint64_t v38 = v10 + v37 + 4;
        if ((unint64_t)v7 > v38) {
          unint64_t v38 = (unint64_t)v7;
        }
        unint64_t v39 = v38 + ~v10 - v37;
        if (v39 >= 0x2C)
        {
          uint64_t v36 = v31;
          if ((unint64_t)&v32[-(v21 & 0xFFFFFFFFFFFFFFFCLL) - v10] >= 0x20)
          {
            uint64_t v53 = (v39 >> 2) + 1;
            uint64_t v54 = 4 * (v53 & 0x7FFFFFFFFFFFFFF8);
            v35 += v54;
            uint64_t v36 = &v31[v54];
            uint64_t v55 = v31 + 16;
            unsigned int v56 = (long long *)(v10 + 4 * v34 + 4 * v22 + 16);
            uint64_t v57 = v53 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v58 = *v56;
              *(v55 - 1) = *(v56 - 1);
              _OWORD *v55 = v58;
              v55 += 2;
              v56 += 2;
              v57 -= 8;
            }
            while (v57);
            if (v53 == (v53 & 0x7FFFFFFFFFFFFFF8)) {
              goto LABEL_69;
            }
          }
        }
        else
        {
          uint64_t v36 = v31;
        }
        do
        {
          int v59 = *(_DWORD *)v35;
          v35 += 4;
          *(_DWORD *)uint64_t v36 = v59;
          v36 += 4;
        }
        while (v35 < v7);
      }
LABEL_69:
      if (v31 != v32) {
        memmove(&v31[-4 * v34], (const void *)(v10 + ((unint64_t)&v7[-v10] & 0xFFFFFFFFFFFFFFFCLL)), v33);
      }
      if (v27 != v20) {
        memmove((void *)(v10 + ((unint64_t)&v7[-v10] & 0xFFFFFFFFFFFFFFFCLL)), v20, v27 - v20);
      }
      uint64_t v7 = v36;
      goto LABEL_74;
    }
LABEL_78:
    uint64_t v60 = 7;
    if (v2) {
      uint64_t v61 = 7;
    }
    else {
      uint64_t v61 = 6;
    }
    if (v2) {
      uint64_t v60 = 6;
    }
    uint64_t v62 = (char *)v1[v61];
    v1[v61] = v1[v60];
    v1[v60] = (unint64_t)v62;
    *((unsigned char *)v1 + 65) = v2 ^ 1;
    *((unsigned char *)v1 + 66) = 1;
  }
}

void sub_19E152550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (v20) {
    operator delete(v20);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E152580(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 3) {
      goto LABEL_14;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 3)
  {
    goto LABEL_14;
  }
  if (*(_WORD *)a2 == 20547 && *((unsigned char *)a2 + 2) == 85)
  {
    *((unsigned char *)&v6.__r_.__value_.__s + 23) = 0;
    v6.__r_.__value_.__s.__data_[0] = 0;
    if (qword_1E9457E60 != -1) {
      dispatch_once(&qword_1E9457E60, &unk_1EF0ABF60);
    }
    uint64_t Instance = _CFRuntimeCreateInstance();
    sub_19E304834(Instance + 16);
  }
LABEL_14:
  sub_19E152B34(&v6, "Invalid Engine. Support Engines = {CPU}");
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, &v6);
  exception->__vftable = (std::runtime_error_vtbl *)&unk_1EF0A7C28;
  __cxa_throw(exception, (struct type_info *)&unk_1EF0A3FA0, (void (*)(void *))std::runtime_error::~runtime_error);
}

void sub_19E152908(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (v19)
  {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
    if ((a19 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a19 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19E152920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  std::runtime_error::~runtime_error(&a11);
  __cxa_end_catch();
  if (v18)
  {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    if ((a18 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else if ((a18 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  JUMPOUT(0x19E152B24);
}

void sub_19E152934(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11, uint64_t a12, std::string *a13)
{
  if (a10) {
    sub_19E32EA30();
  }
  if (a2 == 3)
  {
    exception_ptr = (const std::runtime_error *)__cxa_get_exception_ptr(a1);
    std::runtime_error::runtime_error(&a11, exception_ptr);
    __cxa_begin_catch(a1);
    uint64_t v16 = std::runtime_error::what(&a11);
    std::string::append((std::string *)&a13, v16);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, (const std::string *)&a13);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EF0A7C50;
    __cxa_throw(exception, (struct type_info *)&unk_1EF0A3FB8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  __cxa_begin_catch(a1);
  uint64_t v18 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(v18, (const std::string *)&a13);
  v18->__vftable = (std::runtime_error_vtbl *)&unk_1EF0A7C50;
  __cxa_throw(v18, (struct type_info *)&unk_1EF0A3FB8, (void (*)(void *))std::runtime_error::~runtime_error);
}

void sub_19E152A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  __cxa_free_exception(v19);
  std::runtime_error::~runtime_error(&a11);
  __cxa_end_catch();
  if (v18)
  {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    if ((a18 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else if ((a18 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  JUMPOUT(0x19E152B24);
}

void sub_19E152AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(a14);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19E152AB0);
}

void sub_19E152B00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  __cxa_free_exception(v19);
  if (a19 < 0)
  {
    operator delete(a14);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19E152AB0);
}

void sub_19E152B18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    JUMPOUT(0x19E152B24);
  }
  JUMPOUT(0x19E152AB0);
}

void *sub_19E152B34(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_19E13C370();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    std::string v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    std::string v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void sub_19E152BF4(char *a1, uint64_t *a2)
{
  char v15 = 0;
  LOBYTE(__p) = 0;
  if (a1[23] < 0) {
    a1 = *(char **)a1;
  }
  uint64_t v3 = strstr(a1, ".espresso.net");
  int v4 = *((unsigned __int8 *)a2 + 23);
  if (v3)
  {
    if ((v4 & 0x80) != 0)
    {
      if (a2[1] != 3) {
        goto LABEL_37;
      }
      a2 = (uint64_t *)*a2;
    }
    else if (v4 != 3)
    {
      goto LABEL_37;
    }
    if (*(_WORD *)a2 == 20547 && *((unsigned char *)a2 + 2) == 85)
    {
      if (qword_1E9457E60 != -1) {
        dispatch_once(&qword_1E9457E60, &unk_1EF0ABF60);
      }
      uint64_t Instance = _CFRuntimeCreateInstance();
      sub_19E15FC40(Instance + 16);
    }
    if (*(_WORD *)a2 == 20033 && *((unsigned char *)a2 + 2) == 69)
    {
      if (qword_1E9457E60 != -1) {
        dispatch_once(&qword_1E9457E60, &unk_1EF0ABF60);
      }
      uint64_t v7 = _CFRuntimeCreateInstance();
      sub_19E13E1CC(v7 + 16);
    }
LABEL_37:
    sub_19E152B34(&v13, "Invalid Engine. Support Engines = {CPU, ANE}");
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, &v13);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EF0A7C28;
    __cxa_throw(exception, (struct type_info *)&unk_1EF0A3FA0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if ((v4 & 0x80) != 0)
  {
    if (a2[1] != 3) {
      goto LABEL_38;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v4 != 3)
  {
    goto LABEL_38;
  }
  if (*(_WORD *)a2 == 20547 && *((unsigned char *)a2 + 2) == 85)
  {
    if (qword_1E9457E60 != -1) {
      dispatch_once(&qword_1E9457E60, &unk_1EF0ABF60);
    }
    uint64_t v10 = _CFRuntimeCreateInstance();
    sub_19E15FC40(v10 + 16);
  }
LABEL_38:
  sub_19E152B34(&v13, "Invalid Engine. Support Engines = {CPU}");
  uint64_t v12 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(v12, &v13);
  v12->__vftable = (std::runtime_error_vtbl *)&unk_1EF0A7C28;
  __cxa_throw(v12, (struct type_info *)&unk_1EF0A3FA0, (void (*)(void *))std::runtime_error::~runtime_error);
}

void sub_19E152F54(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::string *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  MEMORY[0x19F3BB880](&a15, "Unable to load Espresso Model");
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, (const std::string *)&a15);
  exception->__vftable = (std::runtime_error_vtbl *)&unk_1EF0A7C50;
  __cxa_throw(exception, (struct type_info *)&unk_1EF0A3FB8, (void (*)(void *))std::runtime_error::~runtime_error);
}

void sub_19E153008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  __cxa_free_exception(v17);
  __cxa_end_catch();
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_19E15303C(uint64_t a1, uint64_t *a2)
{
  char v8 = 0;
  char v7 = 0;
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 3) {
      goto LABEL_14;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 3)
  {
    goto LABEL_14;
  }
  if (*(_WORD *)a2 == 20547 && *((unsigned char *)a2 + 2) == 85)
  {
    if (qword_1E9457E60 != -1) {
      dispatch_once(&qword_1E9457E60, &unk_1EF0ABF60);
    }
    uint64_t Instance = _CFRuntimeCreateInstance();
    sub_19E24AD0C(Instance + 16);
  }
LABEL_14:
  sub_19E152B34(&v6, "Invalid Engine. Support Engines for E5RT = {CPU}");
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, &v6);
  exception->__vftable = (std::runtime_error_vtbl *)&unk_1EF0A7C28;
  __cxa_throw(exception, (struct type_info *)&unk_1EF0A3FA0, (void (*)(void *))std::runtime_error::~runtime_error);
}

void sub_19E1531B0(void *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, std::string *a7)
{
}

void sub_19E15325C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  __cxa_free_exception(v18);
  __cxa_end_catch();
  if (v17)
  {
    operator delete(v17);
    if (a17 < 0)
    {
LABEL_3:
      operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  else if (a17 < 0)
  {
    goto LABEL_3;
  }
  _Unwind_Resume(a1);
}

void sub_19E1532AC()
{
  if (qword_1E9457E60 != -1) {
    dispatch_once(&qword_1E9457E60, &unk_1EF0ABF60);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  sub_19E304834(Instance + 16);
}

void sub_19E1534AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_19E32EA30();
  }
  (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  _Unwind_Resume(a1);
}

uint64_t MRLNeuralNetworkCreate(CFDictionaryRef theDict)
{
  if (!theDict) {
    goto LABEL_26;
  }
  if (!CFDictionaryContainsKey(theDict, @"MRLNeuralNetworkOptionModelURLKey"))
  {
    if (CFDictionaryContainsKey(theDict, @"MRLNeuralNetworkOptionModelDataKey"))
    {
      CFDictionaryGetValue(theDict, @"MRLNeuralNetworkOptionModelDataKey");
      CFDictionaryGetValue(theDict, @"kMRLNeuralNetworkOptionModelTypeKey");
      sub_19E1532AC();
    }
LABEL_26:
    if (qword_1E9457E60 != -1) {
      dispatch_once(&qword_1E9457E60, &unk_1EF0ABF60);
    }
    uint64_t Instance = _CFRuntimeCreateInstance();
    sub_19E304834(Instance + 16);
  }
  CFURLRef Value = (const __CFURL *)CFDictionaryGetValue(theDict, @"MRLNeuralNetworkOptionModelURLKey");
  CFStringRef v3 = CFURLCopyFileSystemPath(Value, kCFURLPOSIXPathStyle);
  sub_19E31A250(v3, &v30);
  CFStringRef v4 = CFURLCopyFragment(Value, 0);
  sub_19E1592DC(&v29, v4);
  if (!v29) {
    goto LABEL_12;
  }
  v26[0] = &v29;
  sub_19E1540E8((const __CFString ***)v26, &v27);
  size_t v5 = std::string::insert(&v27, 0, "#");
  long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(&v30, (const std::string::value_type *)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_12;
    }
  }
  else if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_12;
  }
  operator delete(v27.__r_.__value_.__l.__data_);
LABEL_12:
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 3;
  LODWORD(__p.__r_.__value_.__l.__data_) = 5591107;
  if (CFDictionaryContainsKey(theDict, @"MRLNeuralNetworkOptionEngineKey"))
  {
    CFStringRef v9 = (const __CFString *)CFDictionaryGetValue(theDict, @"MRLNeuralNetworkOptionEngineKey");
    sub_19E31A250(v9, &v27);
    std::string __p = v27;
  }
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v10 = &v30;
  }
  else {
    uint64_t v10 = (std::string *)v30.__r_.__value_.__r.__words[0];
  }
  unint64_t v11 = strstr((char *)v10, ".espresso.");
  int v12 = CFDictionaryContainsKey(theDict, @"kMRLNeuralNetworkOptionModelTypeKey");
  if (v11) {
    std::string v13 = @"Espresso";
  }
  else {
    std::string v13 = @"FlatModel";
  }
  if (v12) {
    std::string v13 = (__CFString *)CFDictionaryGetValue(theDict, @"kMRLNeuralNetworkOptionModelTypeKey");
  }
  if (CFEqual(v13, @"Espresso")) {
    sub_19E152BF4((char *)&v30, (uint64_t *)&__p);
  }
  if (CFEqual(v13, @"EspressoE5RT")) {
    sub_19E15303C((uint64_t)&v30, (uint64_t *)&__p);
  }
  if (CFEqual(v13, @"FlatModel")) {
    sub_19E152580((uint64_t)&v30, (uint64_t *)&__p);
  }
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v15 = CFDictionaryContainsKey(theDict, @"MRLNeuralNetworkOptionANENetworkURLKey");
  if (v15 && sub_19E237774(v15, v16, v17, v18))
  {
    CFURLRef v19 = (const __CFURL *)CFDictionaryGetValue(theDict, @"MRLNeuralNetworkOptionANENetworkURLKey");
    CFStringRef v20 = CFURLCopyFileSystemPath(v19, kCFURLPOSIXPathStyle);
    CFStringRef v21 = (const __CFString *)CFDictionaryGetValue(theDict, @"MRLNeuralNetworkOptionANEStartNodeName");
    CFStringRef v22 = (const __CFString *)CFDictionaryGetValue(theDict, @"MRLNeuralNetworkOptionANEEndNodeName");
    sub_19E31A250(v21, &v27);
    sub_19E31A250(v22, v26);
    sub_19E31A250(v20, &v25);
    sub_19E30B7B4(16, (unsigned __int8 **)&v27, (char *)v26);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    int v23 = v29;
    if (!v29) {
      goto LABEL_44;
    }
    goto LABEL_43;
  }
  int v23 = v29;
  if (v29) {
LABEL_43:
  }
    CFRelease(v23);
LABEL_44:
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_19E153D48(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  sub_19E13A748(&a28);
  sub_19E13A748((void **)(v34 - 88));
  unint64_t v37 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    if (v33)
    {
      unint64_t v38 = v37;
      CFAllocatorRef v39 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFMutableDataRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      unint64_t v41 = (const char *)(*(uint64_t (**)(void *))(*(void *)v38 + 16))(v38);
      CFStringRef v42 = CFStringCreateWithCString(v39, v41, 0);
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F1D170], v42);
      *size_t v33 = CFErrorCreate(v39, MRLNeuralNetworkErrorDomain, 0, Mutable);
      CFRelease(v42);
      CFRelease(Mutable);
    }
  }
  else if (v33)
  {
    CFAllocatorRef v43 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    int v44 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    sub_19E152B34((void *)(v34 - 88), "Unknown expection");
    uint64_t v45 = *(char *)(v34 - 65) >= 0 ? (const char *)(v34 - 88) : *(const char **)(v34 - 88);
    CFStringRef v46 = CFStringCreateWithCString(v43, v45, 0);
    CFDictionaryAddValue(v44, (const void *)*MEMORY[0x1E4F1D170], v46);
    *size_t v33 = CFErrorCreate(v43, MRLNeuralNetworkErrorDomain, 0, v44);
    CFRelease(v46);
    CFRelease(v44);
    if (*(char *)(v34 - 65) < 0) {
      operator delete(*(void **)(v34 - 88));
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x19E153CECLL);
}

void sub_19E1540A4(_Unwind_Exception *a1)
{
}

unint64_t sub_19E1540E8@<X0>(const __CFString ***a1@<X0>, void *a2@<X8>)
{
  CFStringRef v3 = **a1;
  if (!v3 || (CFTypeID TypeID = CFStringGetTypeID(), TypeID != CFGetTypeID(v3)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_19E15A3B4(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }

  return sub_19E15A3C4(v3, a2);
}

void sub_19E154180(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

const void **sub_19E154194(const void **a1)
{
  int v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t MRLNeuralNetworkSetInput(void *a1, const __CFString *a2, uint64_t a3, uint64_t a4, uint64_t a5, CFErrorRef *a6)
{
  sub_19E31A250(a2, v30);
  uint64_t v12 = a1[2];
  a1 += 2;
  (*(void (**)(long long *__return_ptr, void *, void **))(v12 + 32))(&v27, a1, v30);
  *((void *)&v28 + 1) = a3;
  uint64_t v29 = a4;
  uint64_t v26 = a4;
  v25[0] = v27;
  v25[1] = v28;
  uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, void **, _OWORD *, uint64_t))(*a1 + 40))(a1, a5, v30, v25, 1);
  uint64_t v14 = v13;
  if (a6) {
    char v15 = v13;
  }
  else {
    char v15 = 1;
  }
  if ((v15 & 1) == 0)
  {
    CFAllocatorRef v16 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableDataRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    sub_19E31A250(a2, __p);
    sub_19E1543F8("Please provide a valid input name. ", (uint64_t)__p, " input cannot be set");
    if (v22 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v18 = v24 >= 0 ? (const char *)&v23 : (const char *)v23;
    CFStringRef v19 = CFStringCreateWithCString(v16, v18, 0);
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F1D170], v19);
    *a6 = CFErrorCreate(v16, MRLNeuralNetworkErrorDomain, 0, Mutable);
    CFRelease(v19);
    CFRelease(Mutable);
    if (v24 < 0)
    {
      operator delete(v23);
      if ((v31 & 0x80000000) == 0) {
        return v14;
      }
      goto LABEL_12;
    }
  }
  if (v31 < 0) {
LABEL_12:
  }
    operator delete(v30[0]);
  return v14;
}

void sub_19E1543A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v20 - 49) < 0) {
    operator delete(*(void **)(v20 - 72));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E1543F8(const char *a1, uint64_t a2, const char *a3)
{
  sub_19E13D8EC((uint64_t)v12);
  size_t v6 = strlen(a1);
  sub_19E13DB94(v12, (uint64_t)a1, v6);
  int v7 = *(char *)(a2 + 23);
  if (v7 >= 0) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = *(void *)a2;
  }
  if (v7 >= 0) {
    uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v9 = *(void *)(a2 + 8);
  }
  sub_19E13DB94(v12, v8, v9);
  size_t v10 = strlen(a3);
  sub_19E13DB94(v12, (uint64_t)a3, v10);
  std::stringbuf::str();
  v12[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v12 + *(void *)(v12[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v12[1] = MEMORY[0x1E4FBA470] + 16;
  if (v13 < 0) {
    operator delete((void *)v12[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x19F3BBB40](&v14);
}

void sub_19E154580(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E13DA90((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E154594(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E13DA90((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t MRLNeuralNetworkSetInputTensor(uint64_t a1, const __CFString *a2, uint64_t a3, CFErrorRef *a4)
{
  sub_19E152040((char **)(a3 + 16));
  uint64_t v8 = *(void *)(a3 + 16);
  sub_19E31A250(a2, __p);
  long long v9 = *(_OWORD *)(a3 + 56);
  v21[0] = *(_OWORD *)(a3 + 40);
  v21[1] = v9;
  uint64_t v22 = *(void *)(a3 + 72);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, void **, _OWORD *, void))(*(void *)(a1 + 16) + 40))(a1 + 16, v8, __p, v21, 0);
  uint64_t v11 = v10;
  if (v24 < 0)
  {
    operator delete(__p[0]);
    if (a4) {
      char v13 = v11;
    }
    else {
      char v13 = 1;
    }
    if (v13) {
      return v11;
    }
  }
  else
  {
    if (a4) {
      char v12 = v10;
    }
    else {
      char v12 = 1;
    }
    if (v12) {
      return v11;
    }
  }
  CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDataRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  sub_19E31A250(a2, v19);
  sub_19E1543F8("Please provide a valid input name. ", (uint64_t)v19, " input cannot be set");
  if (v20 < 0) {
    operator delete(v19[0]);
  }
  if (v24 >= 0) {
    CFAllocatorRef v16 = __p;
  }
  else {
    CFAllocatorRef v16 = (void **)__p[0];
  }
  CFStringRef v17 = CFStringCreateWithCString(v14, (const char *)v16, 0);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F1D170], v17);
  *a4 = CFErrorCreate(v14, MRLNeuralNetworkErrorDomain, 0, Mutable);
  CFRelease(v17);
  CFRelease(Mutable);
  if (v24 < 0) {
    operator delete(__p[0]);
  }
  return v11;
}

void sub_19E154760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MRLNeuralNetworkPredict(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 72))();
}

uint64_t MRLNeuralNetworkGetOutput(uint64_t a1, const __CFString *a2)
{
  sub_19E31A250(a2, __p);
  uint64_t result = (*(uint64_t (**)(uint64_t, void **))(*(void *)(a1 + 16) + 48))(a1 + 16, __p);
  uint64_t v4 = result;
  if (v6 < 0)
  {
    operator delete(__p[0]);
    return v4;
  }
  return result;
}

void sub_19E154844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MRLNeuralNetworkCopyOutputTensor(uint64_t a1, const __CFString *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  sub_19E31A250(a2, __p);
  uint64_t v4 = a1 + 16;
  size_t v5 = (char *)(*(uint64_t (**)(uint64_t, void **))(*(void *)(a1 + 16) + 48))(a1 + 16, __p);
  if (SHIBYTE(v13) < 0) {
    operator delete(__p[0]);
  }
  sub_19E31A250(a2, v16);
  (*(void (**)(void **__return_ptr, uint64_t, void **))(*(void *)v4 + 56))(__p, v4, v16);
  if (SHIBYTE(v17) < 0) {
    operator delete(v16[0]);
  }
  *(_OWORD *)CFAllocatorRef v16 = *(_OWORD *)__p;
  unint64_t v6 = v15;
  uint64_t v17 = v13;
  if (qword_1E9457DF0 != -1) {
    dispatch_once(&qword_1E9457DF0, &unk_1EF0AC080);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  *(void *)(Instance + 16) = 0;
  *(void *)(Instance + 24) = 0;
  *(void *)(Instance + 32) = 0;
  *(_OWORD *)(Instance + 40) = *(_OWORD *)v16;
  uint64_t v8 = v17;
  *(void *)(Instance + 72) = v6;
  *(_WORD *)(Instance + 80) = 1;
  *(unsigned char *)(Instance + 82) = 0;
  unint64_t v9 = *(_DWORD *)(Instance + 40) * *(_DWORD *)(Instance + 48) * (int)v8;
  unint64_t v10 = 4 * LODWORD(__p[0]) * LODWORD(__p[1]) * (int)v13 * v14 * (int)v15 / v9 / v6;
  *(void *)(Instance + 56) = v8;
  *(void *)(Instance + 64) = (int)((uint64_t)v10 >> 2);
  sub_19E15A5A4((unint64_t *)(Instance + 16), 0, v5, &v5[4 * v9 * v6 * (v10 >> 2)], v9 * v6 * (v10 >> 2));
  sub_19E152040((char **)(Instance + 16));
  return Instance;
}

void sub_19E154A68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char *MRLNeuralNetworkTensorAppendData(uint64_t a1, char *__src, unint64_t a3)
{
  unint64_t v3 = *(_DWORD *)(a1 + 56) * *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 40);
  uint64_t v4 = 64;
  if (*(unsigned char *)(a1 + 81)) {
    uint64_t v5 = 64;
  }
  else {
    uint64_t v5 = 72;
  }
  unint64_t v6 = *(void *)(a1 + v5);
  unint64_t v7 = (a3 / v3 / v6) >> 2;
  if (*(unsigned char *)(a1 + 81)) {
    uint64_t v4 = 72;
  }
  *(void *)(a1 + v4) += (int)v7;
  return sub_19E15A5A4((unint64_t *)(a1 + 16), *(void **)(a1 + 24), __src, &__src[4 * v6 * v3 * v7], v6 * v3 * v7);
}

uint64_t MRLNeuralNetworkTensorGetData(uint64_t a1, int a2)
{
  uint64_t v2 = 64;
  if (!*(unsigned char *)(a1 + 81)) {
    uint64_t v2 = 72;
  }
  return *(void *)(a1 + 16)
       + 4 * a2 * *(_DWORD *)(a1 + 40) * *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 56) * *(_DWORD *)(a1 + v2);
}

CFDictionaryRef MRLNeuralNetworkTensorCopyShape(uint64_t a1)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (uint64_t *)(a1 + 48);
  unint64_t v3 = (uint64_t *)(a1 + 40);
  if (*(void *)(a1 + 40) == 1 && *(void *)(a1 + 48) == 1)
  {
    CFRetain(@"ShapeDimension");
    sub_19E1592DC(&v15, @"ShapeDimension");
    LODWORD(v10) = 3;
    sub_19E15AD60(&v19, &v15, (int *)&v10);
    CFRetain(@"InputDimension");
    sub_19E1592DC(&v14, @"InputDimension");
    CFTypeRef v13 = (CFTypeRef)(*(_DWORD *)(a1 + 40) * *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 56));
    sub_19E15AE48(&v21, &v14, (uint64_t *)&v13);
    CFRetain(@"SequenceLength");
    sub_19E1592DC(&v12, @"SequenceLength");
    if (*(unsigned char *)(a1 + 81)) {
      uint64_t v8 = (uint64_t *)(a1 + 64);
    }
    else {
      uint64_t v8 = (uint64_t *)(a1 + 72);
    }
    sub_19E15AE48(&v23, &v12, v8);
    CFAllocatorRef v16 = &v19;
    uint64_t v17 = 3;
    CFDictionaryRef v6 = sub_19E159394((uint64_t)&v16);
    CFDictionaryRef v18 = v6;
    if (v24) {
      CFRelease(v24);
    }
    if (v23) {
      CFRelease(v23);
    }
    if (v22) {
      CFRelease(v22);
    }
    if (v21) {
      CFRelease(v21);
    }
    if (v20) {
      CFRelease(v20);
    }
    if (v19) {
      CFRelease(v19);
    }
    if (v12) {
      CFRelease(v12);
    }
    if (v14) {
      CFRelease(v14);
    }
    if (v15) {
      CFRelease(v15);
    }
    CFDictionaryRef Copy = CFDictionaryCreateCopy(0, v6);
    if (v6) {
      goto LABEL_62;
    }
  }
  else
  {
    CFRetain(@"ShapeDimension");
    sub_19E1592DC(&v15, @"ShapeDimension");
    int v11 = 5;
    sub_19E15AD60(&v19, &v15, &v11);
    CFRetain(@"Width");
    sub_19E1592DC(&v14, @"Width");
    sub_19E15AE48(&v21, &v14, v3);
    CFRetain(@"Height");
    sub_19E1592DC(&v13, @"Height");
    sub_19E15AE48(&v23, &v13, v2);
    CFRetain(@"Channel");
    sub_19E1592DC(&v12, @"Channel");
    sub_19E15AE48(&v25, &v12, (uint64_t *)(a1 + 56));
    CFRetain(@"SequenceLength");
    sub_19E1592DC(&v10, @"SequenceLength");
    if (*(unsigned char *)(a1 + 81)) {
      uint64_t v5 = (uint64_t *)(a1 + 64);
    }
    else {
      uint64_t v5 = (uint64_t *)(a1 + 72);
    }
    sub_19E15AE48(&v27, &v10, v5);
    CFAllocatorRef v16 = &v19;
    uint64_t v17 = 5;
    CFDictionaryRef v6 = sub_19E159394((uint64_t)&v16);
    CFDictionaryRef v18 = v6;
    if (cf) {
      CFRelease(cf);
    }
    if (v27) {
      CFRelease(v27);
    }
    if (v26) {
      CFRelease(v26);
    }
    if (v25) {
      CFRelease(v25);
    }
    if (v24) {
      CFRelease(v24);
    }
    if (v23) {
      CFRelease(v23);
    }
    if (v22) {
      CFRelease(v22);
    }
    if (v21) {
      CFRelease(v21);
    }
    if (v20) {
      CFRelease(v20);
    }
    if (v19) {
      CFRelease(v19);
    }
    if (v10) {
      CFRelease(v10);
    }
    if (v12) {
      CFRelease(v12);
    }
    if (v13) {
      CFRelease(v13);
    }
    if (v14) {
      CFRelease(v14);
    }
    if (v15) {
      CFRelease(v15);
    }
    CFDictionaryRef Copy = CFDictionaryCreateCopy(0, v6);
    if (v6) {
LABEL_62:
    }
      CFRelease(v6);
  }
  return Copy;
}

void sub_19E154F54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,char a26,int a27,__int16 a28,char a29,char a30)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_19E13A9BC(exception_object);
}

uint64_t sub_19E1551A4(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    CFRelease(v2);
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  return a1;
}

const void **sub_19E1551E8(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t MRLNeuralNetworkCopyStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 64))();
}

uint64_t MRLNeuralNetworkGetOutputDimension(uint64_t a1, const __CFString *a2)
{
  sub_19E31A250(a2, __p);
  LODWORD(result) = (*(uint64_t (**)(uint64_t, void **))(*(void *)(a1 + 16) + 24))(a1 + 16, __p);
  int v4 = result;
  if ((v6 & 0x80000000) == 0) {
    return (int)result;
  }
  operator delete(__p[0]);
  return v4;
}

void sub_19E1552CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MRLNeuralNetworkClear(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 80))();
}

uint64_t MRLNeuralNetworkAddNode(uint64_t a1, const __CFString *a2, void *__src)
{
  uint64_t v4 = a1 + 16;
  memcpy(__dst, __src, sizeof(__dst));
  sub_19E31A250(a2, __p);
  sub_19E305584(v4, (uint64_t)__dst, __p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  return 1;
}

void sub_19E1553B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MRLNeuralNetworkConnectNodes(uint64_t a1, const __CFString *a2, int a3, const __CFString *a4, int a5)
{
  sub_19E31A250(a2, v13);
  sub_19E31A250(a4, __p);
  uint64_t v9 = sub_19E3072C4(a1 + 16, (uint64_t)v13, a3, (uint64_t)__p, a5);
  if (v12 < 0)
  {
    operator delete(__p[0]);
    if ((v14 & 0x80000000) == 0) {
      return v9;
    }
  }
  else if ((v14 & 0x80000000) == 0)
  {
    return v9;
  }
  operator delete(v13[0]);
  return v9;
}

void sub_19E155480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t MRLNeuralNetworkCopyModelData(uint64_t a1)
{
  return sub_19E30CD50(a1 + 16);
}

uint64_t MRLNeuralNetworkSave(uint64_t a1, CFDictionaryRef theDict)
{
  CFURLRef Value = (const __CFURL *)CFDictionaryGetValue(theDict, @"MRLNeuralNetworkOptionModelURLKey");
  CFStringRef v5 = CFURLCopyFileSystemPath(Value, kCFURLPOSIXPathStyle);
  sub_19E31A250(v5, v125);
  if (v5) {
    CFRelease(v5);
  }
  int v123 = 0;
  uint64_t v124 = 0;
  char v6 = &v123;
  uint64_t v122 = &v123;
  char v7 = CFDictionaryGetValue(theDict, @"MRLNeuralNetworkOptionQuantizationParamsKey");
  CFStringRef v8 = (const __CFString *)CFDictionaryGetValue(theDict, @"MRLNeuralNetworkOptionModelNameKey");
  CFStringRef v9 = (const __CFString *)CFDictionaryGetValue(theDict, @"MRLNeuralNetworkOptionModelVersionKey");
  CFTypeRef v10 = (__CFString *)CFDictionaryGetValue(theDict, @"kMRLNeuralNetworkOptionModelTypeKey");
  if (!v10) {
    CFTypeRef v10 = @"FlatModel";
  }
  int v11 = CFEqual(v10, @"Espresso");
  if (v8)
  {
    CFTypeID TypeID = CFStringGetTypeID();
    if (TypeID != CFGetTypeID(v8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not convert");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    sub_19E15A3C4(v8, v120);
    int v119 = 0;
    if (!v9) {
      goto LABEL_12;
    }
  }
  else
  {
    char v121 = 5;
    int v119 = 0;
    strcpy((char *)v120, "model");
    if (!v9) {
      goto LABEL_12;
    }
  }
  CFTypeID v13 = CFStringGetTypeID();
  if (v13 != CFGetTypeID(v9))
  {
    int v95 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v95, "Could not convert");
    __cxa_throw(v95, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  sub_19E15A3C4(v9, &__str);
  int v119 = std::stoi(&__str, 0, 0);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (!v7) {
      goto LABEL_167;
    }
    goto LABEL_13;
  }
LABEL_12:
  if (!v7) {
    goto LABEL_167;
  }
LABEL_13:
  CFRetain(v7);
  int v96 = v11;
  uint64_t v97 = a1;
  sub_19E159840(&v118, v7);
  sub_19E1598F8((uint64_t)&__str, v118);
  while (1)
  {
    *(void *)theDicta = v118;
    CFDictionaryRef v14 = v118;
    *(_OWORD *)&theDicta[8] = 0u;
    long long v112 = 0u;
    memset(__p, 0, sizeof(__p));
    if (v118)
    {
      unint64_t Count = CFDictionaryGetCount(v118);
      unint64_t v16 = Count;
      unint64_t v17 = (uint64_t)(v112 - *(void *)&theDicta[16]) >> 3;
      if (Count <= v17)
      {
        if (Count < v17) {
          *(void *)&long long v112 = *(void *)&theDicta[16] + 8 * Count;
        }
      }
      else
      {
        sub_19E1599BC((void **)&theDicta[16], Count - v17);
      }
      CFTypeRef v20 = (const void **)__p[0];
      unint64_t v21 = ((char *)__p[1] - (char *)__p[0]) >> 3;
      if (v16 <= v21)
      {
        if (v16 < v21) {
          __p[1] = (char *)__p[0] + 8 * v16;
        }
      }
      else
      {
        sub_19E1599BC(__p, v16 - v21);
        CFTypeRef v20 = (const void **)__p[0];
      }
      CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)theDicta, *(const void ***)&theDicta[16], v20);
      CFDictionaryRef v14 = *(const __CFDictionary **)&theDicta[16];
      uint64_t v18 = (uint64_t)(v112 - *(void *)&theDicta[16]) >> 3;
      *(void *)&theDicta[8] = v18;
      std::string::size_type v19 = __str.__r_.__value_.__r.__words[0];
      if (!__str.__r_.__value_.__r.__words[0])
      {
LABEL_27:
        int v22 = 0;
        CFTypeRef v23 = __p[0];
        if (!__p[0]) {
          goto LABEL_29;
        }
LABEL_28:
        __p[1] = v23;
        operator delete(v23);
        CFDictionaryRef v14 = *(const __CFDictionary **)&theDicta[16];
        goto LABEL_29;
      }
    }
    else
    {
      uint64_t v18 = 0;
      *(void *)&theDicta[8] = 0;
      std::string::size_type v19 = __str.__r_.__value_.__r.__words[0];
      if (!__str.__r_.__value_.__r.__words[0]) {
        goto LABEL_27;
      }
    }
    if (__str.__r_.__value_.__l.__size_ == (int64_t)(v115 - __str.__r_.__value_.__r.__words[2]) >> 3) {
      goto LABEL_27;
    }
    BOOL v58 = v19 == *(void *)theDicta && __str.__r_.__value_.__l.__size_ == v18;
    int v22 = !v58;
    CFTypeRef v23 = __p[0];
    if (__p[0]) {
      goto LABEL_28;
    }
LABEL_29:
    if (v14)
    {
      *(void *)&long long v112 = v14;
      operator delete(v14);
    }
    if (!v22) {
      break;
    }
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
    if ((__str.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
      || __str.__r_.__value_.__l.__size_ >= (int64_t)(v115 - __str.__r_.__value_.__r.__words[2]) >> 3)
    {
      float v87 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v87, "DictionaryRef_iterator iterator out of range.");
      v87->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
      __cxa_throw(v87, (struct type_info *)off_1E599CD08, MEMORY[0x1E4FBA1D0]);
    }
    CFStringRef v25 = *(const __CFString **)(__str.__r_.__value_.__r.__words[2] + 8 * __str.__r_.__value_.__l.__size_);
    if (v25)
    {
      CFRetain(*(CFTypeRef *)(__str.__r_.__value_.__r.__words[2] + 8 * __str.__r_.__value_.__l.__size_));
      std::string::size_type size = __str.__r_.__value_.__l.__size_;
    }
    CFTypeRef v26 = (const void *)*((void *)v116 + size);
    if (v26) {
      CFRetain(*((CFTypeRef *)v116 + size));
    }
    if (v25) {
      CFRetain(v25);
    }
    CFStringRef v109 = v25;
    if (v26)
    {
      CFRetain(v26);
      unsigned int v110 = v26;
      CFRelease(v26);
      if (!v25) {
        goto LABEL_189;
      }
    }
    else
    {
      unsigned int v110 = 0;
      if (!v25) {
        goto LABEL_189;
      }
    }
    CFRelease(v25);
    CFTypeID v27 = CFStringGetTypeID();
    if (v27 != CFGetTypeID(v25))
    {
LABEL_189:
      float v88 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v88, "Could not convert");
      __cxa_throw(v88, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    sub_19E15A3C4(v25, theDicta);
    if (v26) {
      CFRelease(v26);
    }
    CFRelease(v25);
    std::string::size_type v28 = __str.__r_.__value_.__l.__size_;
    if ((__str.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
      || __str.__r_.__value_.__l.__size_ >= (int64_t)(v115 - __str.__r_.__value_.__r.__words[2]) >> 3)
    {
      int v89 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v89, "DictionaryRef_iterator iterator out of range.");
      v89->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
      __cxa_throw(v89, (struct type_info *)off_1E599CD08, MEMORY[0x1E4FBA1D0]);
    }
    CFStringRef v29 = *(const __CFString **)(__str.__r_.__value_.__r.__words[2] + 8 * __str.__r_.__value_.__l.__size_);
    if (v29)
    {
      CFRetain(*(CFTypeRef *)(__str.__r_.__value_.__r.__words[2] + 8 * __str.__r_.__value_.__l.__size_));
      std::string::size_type v28 = __str.__r_.__value_.__l.__size_;
    }
    std::string v30 = (const void *)*((void *)v116 + v28);
    if (v30) {
      CFRetain(*((CFTypeRef *)v116 + v28));
    }
    if (v29) {
      CFRetain(v29);
    }
    CFStringRef v109 = v29;
    if (!v30)
    {
      unsigned int v110 = 0;
      if (!v29) {
        goto LABEL_60;
      }
LABEL_59:
      CFRelease(v29);
      goto LABEL_60;
    }
    CFRetain(v30);
    unsigned int v110 = v30;
    CFRelease(v30);
    if (v29) {
      goto LABEL_59;
    }
LABEL_60:
    if (!v30)
    {
      CFDictionaryRef v108 = 0;
      if (!v29) {
        goto LABEL_66;
      }
LABEL_65:
      CFRelease(v29);
      goto LABEL_66;
    }
    CFRetain(v30);
    CFDictionaryRef v108 = (CFDictionaryRef)v30;
    CFTypeID v31 = CFGetTypeID(v30);
    if (v31 != CFDictionaryGetTypeID())
    {
      float v93 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v93, "Could not construct");
      __cxa_throw(v93, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    CFRelease(v30);
    if (v29) {
      goto LABEL_65;
    }
LABEL_66:
    if (!v30)
    {
      unsigned int v92 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v92, "Could not construct");
      goto LABEL_195;
    }
    if (!CFDictionaryGetValue((CFDictionaryRef)v30, @"MRLNeuralNetworkOptionQuantizationSchemeNameKey"))
    {
      unsigned int v92 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v92, "Could not find item");
LABEL_195:
      __cxa_throw(v92, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    if (!v108)
    {
      float v90 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v90, "Could not construct");
LABEL_198:
      __cxa_throw(v90, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    CFNumberRef v32 = (const __CFNumber *)CFDictionaryGetValue(v108, @"MRLNeuralNetworkOptionQuantizationSchemeLinearInt8RangeMinKey");
    if (!v32)
    {
      float v90 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v90, "Could not find item");
      goto LABEL_198;
    }
    CFTypeID v33 = CFNumberGetTypeID();
    if (v33 == CFGetTypeID(v32))
    {
      uint64_t v34 = sub_19E15AF30(v32);
    }
    else
    {
      CFTypeID v35 = CFBooleanGetTypeID();
      if (v35 != CFGetTypeID(v32)) {
        goto LABEL_191;
      }
      uint64_t v34 = COERCE_UNSIGNED_INT((float)CFBooleanGetValue(v32)) | 0x100000000;
    }
    if ((v34 & 0xFF00000000) == 0)
    {
LABEL_191:
      float v90 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v90, "Could not convert");
      goto LABEL_198;
    }
    CFNumberRef v36 = (const __CFNumber *)CFDictionaryGetValue(v108, @"MRLNeuralNetworkOptionQuantizationSchemeLinearInt8RangeMaxKey");
    if (!v36)
    {
      float v91 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v91, "Could not find item");
LABEL_200:
      __cxa_throw(v91, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    CFTypeID v37 = CFNumberGetTypeID();
    if (v37 == CFGetTypeID(v36))
    {
      uint64_t v38 = sub_19E15AF30(v36);
    }
    else
    {
      CFTypeID v39 = CFBooleanGetTypeID();
      if (v39 != CFGetTypeID(v36)) {
        goto LABEL_192;
      }
      uint64_t v38 = COERCE_UNSIGNED_INT((float)CFBooleanGetValue(v36)) | 0x100000000;
    }
    if ((v38 & 0xFF00000000) == 0)
    {
LABEL_192:
      float v91 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v91, "Could not convert");
      goto LABEL_200;
    }
    uint64_t v40 = v123;
    unint64_t v41 = v6;
    CFStringRef v42 = v6;
    if (v123)
    {
      if (theDicta[23] >= 0) {
        size_t v43 = theDicta[23];
      }
      else {
        size_t v43 = *(void *)&theDicta[8];
      }
      if (theDicta[23] >= 0) {
        int v44 = theDicta;
      }
      else {
        int v44 = *(unsigned char **)theDicta;
      }
      while (1)
      {
        while (1)
        {
          char v6 = (char **)v40;
          uint64_t v47 = (char *)*((void *)v40 + 4);
          uint64_t v45 = v40 + 32;
          CFStringRef v46 = v47;
          int v48 = v45[23];
          if (v48 >= 0) {
            size_t v49 = v45[23];
          }
          else {
            size_t v49 = *((void *)v45 + 1);
          }
          if (v48 >= 0) {
            uint64_t v50 = v45;
          }
          else {
            uint64_t v50 = v46;
          }
          if (v49 >= v43) {
            size_t v51 = v43;
          }
          else {
            size_t v51 = v49;
          }
          int v52 = memcmp(v44, v50, v51);
          BOOL v53 = v43 < v49;
          if (v52) {
            BOOL v53 = v52 < 0;
          }
          if (!v53) {
            break;
          }
          uint64_t v40 = *v6;
          unint64_t v41 = v6;
          if (!*v6) {
            goto LABEL_106;
          }
        }
        int v54 = memcmp(v50, v44, v51);
        BOOL v55 = v49 < v43;
        if (v54) {
          BOOL v55 = v54 < 0;
        }
        if (!v55) {
          break;
        }
        uint64_t v40 = v6[1];
        if (!v40)
        {
          unint64_t v41 = v6 + 1;
          goto LABEL_106;
        }
      }
      unsigned int v56 = (char *)v6;
    }
    else
    {
LABEL_106:
      unsigned int v56 = (char *)operator new(0x40uLL);
      uint64_t v57 = v56 + 32;
      if ((theDicta[23] & 0x80000000) != 0)
      {
        sub_19E13C2D0(v57, *(void **)theDicta, *(unint64_t *)&theDicta[8]);
      }
      else
      {
        *(_OWORD *)uint64_t v57 = *(_OWORD *)theDicta;
        *((void *)v56 + 6) = *(void *)&theDicta[16];
      }
      *((void *)v56 + 7) = 0;
      *(void *)unsigned int v56 = 0;
      *((void *)v56 + 1) = 0;
      *((void *)v56 + 2) = v6;
      *unint64_t v41 = v56;
      int v59 = v56;
      if (*v122)
      {
        uint64_t v122 = (char **)*v122;
        int v59 = *v41;
      }
      uint64_t v60 = v123;
      v59[24] = v59 == v123;
      if (v59 != v60)
      {
        do
        {
          uint64_t v61 = *((void *)v59 + 2);
          if (*(unsigned char *)(v61 + 24)) {
            break;
          }
          uint64_t v62 = *(char **)(v61 + 16);
          uint64_t v63 = *(void *)v62;
          if (*(void *)v62 == v61)
          {
            uint64_t v66 = *((void *)v62 + 1);
            if (!v66 || (int v67 = *(unsigned __int8 *)(v66 + 24), v64 = (unsigned char *)(v66 + 24), v67))
            {
              if (*(char **)v61 == v59)
              {
                *(unsigned char *)(v61 + 24) = 1;
                v62[24] = 0;
                uint64_t v70 = *(void *)(v61 + 8);
                *(void *)uint64_t v62 = v70;
                if (v70) {
                  goto LABEL_133;
                }
              }
              else
              {
                int v68 = *(uint64_t **)(v61 + 8);
                uint64_t v69 = *v68;
                *(void *)(v61 + 8) = *v68;
                if (v69)
                {
                  *(void *)(v69 + 16) = v61;
                  uint64_t v62 = *(char **)(v61 + 16);
                }
                v68[2] = (uint64_t)v62;
                *(void *)(*(void *)(v61 + 16) + 8 * (**(void **)(v61 + 16) != v61)) = v68;
                uint64_t *v68 = v61;
                *(void *)(v61 + 16) = v68;
                uint64_t v62 = (char *)v68[2];
                uint64_t v61 = *(void *)v62;
                *((unsigned char *)v68 + 24) = 1;
                v62[24] = 0;
                uint64_t v70 = *(void *)(v61 + 8);
                *(void *)uint64_t v62 = v70;
                if (v70) {
LABEL_133:
                }
                  *(void *)(v70 + 16) = v62;
              }
              *(void *)(v61 + 16) = *((void *)v62 + 2);
              *(void *)(*((void *)v62 + 2) + 8 * (**((void **)v62 + 2) != (void)v62)) = v61;
              *(void *)(v61 + 8) = v62;
LABEL_140:
              *((void *)v62 + 2) = v61;
              break;
            }
          }
          else if (!v63 || (int v65 = *(unsigned __int8 *)(v63 + 24), v64 = (unsigned char *)(v63 + 24), v65))
          {
            if (*(char **)v61 == v59)
            {
              uint64_t v76 = *((void *)v59 + 1);
              *(void *)uint64_t v61 = v76;
              if (v76)
              {
                *(void *)(v76 + 16) = v61;
                uint64_t v62 = *(char **)(v61 + 16);
              }
              *((void *)v59 + 2) = v62;
              *(void *)(*(void *)(v61 + 16) + 8 * (**(void **)(v61 + 16) != v61)) = v59;
              *((void *)v59 + 1) = v61;
              *(void *)(v61 + 16) = v59;
              uint64_t v62 = (char *)*((void *)v59 + 2);
              v59[24] = 1;
              v62[24] = 0;
              uint64_t v61 = *((void *)v62 + 1);
              unsigned int v71 = *(char **)v61;
              *((void *)v62 + 1) = *(void *)v61;
              if (v71) {
LABEL_138:
              }
                *((void *)v71 + 2) = v62;
            }
            else
            {
              *(unsigned char *)(v61 + 24) = 1;
              v62[24] = 0;
              uint64_t v61 = *((void *)v62 + 1);
              unsigned int v71 = *(char **)v61;
              *((void *)v62 + 1) = *(void *)v61;
              if (v71) {
                goto LABEL_138;
              }
            }
            *(void *)(v61 + 16) = *((void *)v62 + 2);
            *(void *)(*((void *)v62 + 2) + 8 * (**((void **)v62 + 2) != (void)v62)) = v61;
            *(void *)uint64_t v61 = v62;
            goto LABEL_140;
          }
          *(unsigned char *)(v61 + 24) = 1;
          int v59 = v62;
          v62[24] = v62 == v60;
          unsigned char *v64 = 1;
        }
        while (v62 != v60);
      }
      ++v124;
    }
    *((_DWORD *)v56 + 14) = v34;
    *((_DWORD *)v56 + 15) = v38;
    long long v101 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
    int v103 = 0;
    uint64_t v104 = 0;
    uint64_t v102 = 0;
    uint64_t v72 = (const void *)__str.__r_.__value_.__r.__words[2];
    int64_t v73 = v115 - __str.__r_.__value_.__r.__words[2];
    if (v115 == __str.__r_.__value_.__r.__words[2])
    {
      float32x4_t v74 = 0;
      char v6 = v42;
      uint64_t v105 = 0;
      uint64_t v106 = 0;
      float v107 = 0;
      int64_t v75 = v117 - (unsigned char *)v116;
      if (v117 == v116) {
        goto LABEL_153;
      }
    }
    else
    {
      if (v73 < 0) {
        sub_19E13D694();
      }
      float32x4_t v74 = (char *)operator new(v115 - __str.__r_.__value_.__r.__words[2]);
      char v6 = v42;
      uint64_t v102 = v74;
      uint64_t v104 = &v74[8 * (v73 >> 3)];
      memcpy(v74, v72, v73);
      int v103 = v104;
      uint64_t v105 = 0;
      uint64_t v106 = 0;
      float v107 = 0;
      int64_t v75 = v117 - (unsigned char *)v116;
      if (v117 == v116)
      {
LABEL_153:
        ++__str.__r_.__value_.__l.__size_;
        if (v74) {
          goto LABEL_147;
        }
        goto LABEL_148;
      }
    }
    if (v75 < 0) {
      sub_19E13D694();
    }
    uint64_t v105 = operator new(v75);
    uint64_t v106 = v105;
    float v107 = (char *)v105 + 8 * (v75 >> 3);
    ++__str.__r_.__value_.__l.__size_;
    operator delete(v105);
    float32x4_t v74 = (char *)v102;
    if (v102)
    {
LABEL_147:
      int v103 = v74;
      operator delete(v74);
    }
LABEL_148:
    if (v108) {
      CFRelease(v108);
    }
    if ((theDicta[23] & 0x80000000) != 0) {
      operator delete(*(void **)theDicta);
    }
  }
  if (v116)
  {
    uint64_t v117 = v116;
    operator delete(v116);
  }
  a1 = v97;
  int v11 = v96;
  if (__str.__r_.__value_.__r.__words[2])
  {
    uint64_t v115 = __str.__r_.__value_.__r.__words[2];
    operator delete((void *)__str.__r_.__value_.__r.__words[2]);
  }
  if (v118) {
    CFRelease(v118);
  }
LABEL_167:
  uint64_t v99 = 0;
  uint64_t v100 = 0;
  int v98 = &v99;
  float v77 = v122;
  if (v122 != v6)
  {
    do
    {
      int v80 = sub_19E159C68((uint64_t **)&v98, (uint64_t *)&v99, (uint64_t **)theDicta, (uint64_t **)&v109, (const void **)v77 + 4);
      if (*v80)
      {
        uint64_t v81 = v77[1];
        if (v81) {
          goto LABEL_181;
        }
      }
      else
      {
        int v82 = (uint64_t *)operator new(0x40uLL);
        float v83 = v82 + 4;
        if (*((char *)v77 + 55) < 0)
        {
          sub_19E13C2D0(v83, v77[4], (unint64_t)v77[5]);
        }
        else
        {
          long long v84 = *((_OWORD *)v77 + 2);
          v82[6] = (uint64_t)v77[6];
          *(_OWORD *)float v83 = v84;
        }
        v82[7] = (uint64_t)v77[7];
        uint64_t v85 = *(void *)theDicta;
        *int v82 = 0;
        v82[1] = 0;
        v82[2] = v85;
        uint64_t *v80 = (uint64_t)v82;
        if (*v98)
        {
          int v98 = (uint64_t **)*v98;
          int v82 = (uint64_t *)*v80;
        }
        sub_19E13C8A0(v99, v82);
        ++v100;
        uint64_t v81 = v77[1];
        if (v81)
        {
          do
          {
LABEL_181:
            float v86 = (char **)v81;
            uint64_t v81 = *(char **)v81;
          }
          while (v81);
          goto LABEL_171;
        }
      }
      do
      {
        float v86 = (char **)v77[2];
        BOOL v58 = *v86 == (char *)v77;
        float v77 = v86;
      }
      while (!v58);
LABEL_171:
      float v77 = v86;
    }
    while (v86 != v6);
  }
  uint64_t v78 = sub_19E30B0D0(a1 + 16, (uint64_t *)v125, (const void ***)&v98, (uint64_t)v120, (uint64_t)&v119, v11 != 0);
  sub_19E15A064((uint64_t)&v98, (char *)v99);
  if (v121 < 0)
  {
    operator delete(v120[0]);
    sub_19E15A064((uint64_t)&v122, v123);
    if ((v126 & 0x80000000) == 0) {
      return v78;
    }
LABEL_207:
    operator delete(v125[0]);
    return v78;
  }
  sub_19E15A064((uint64_t)&v122, v123);
  if (v126 < 0) {
    goto LABEL_207;
  }
  return v78;
}

void sub_19E156694(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
}

void *sub_19E156760(void *a1)
{
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_19E1567A4(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    CFRelease(v2);
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  return a1;
}

CFDictionaryRef MRLNeuralNetworkCopyInputNamesAndDimensions(uint64_t a1)
{
  v27[0] = 0;
  v27[1] = 0;
  v25[1] = 0;
  CFTypeRef v26 = v27;
  CFTypeRef v24 = v25;
  v25[0] = 0;
  uint64_t v1 = *(const void ***)(a1 + 24);
  uint64_t v2 = (const void ***)(a1 + 32);
  if (v1 != (const void **)(a1 + 32))
  {
    uint64_t v3 = a1 + 16;
    do
    {
      sub_19E159B70((uint64_t **)&v24, (uint64_t *)v25, v1 + 4, (uint64_t)(v1 + 4));
      uint64_t v4 = (const void **)v1[1];
      if (v4)
      {
        do
        {
          CFStringRef v5 = (const void ***)v4;
          uint64_t v4 = (const void **)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          CFStringRef v5 = (const void ***)v1[2];
          BOOL v6 = *v5 == v1;
          uint64_t v1 = (const void **)v5;
        }
        while (!v6);
      }
      uint64_t v1 = (const void **)v5;
    }
    while (v5 != v2);
    char v7 = (uint64_t *)v24;
    if (v24 != v25)
    {
      do
      {
        int v8 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v3 + 16))(v3, v7 + 4);
        std::string::size_type v28 = (long long *)(v7 + 4);
        CFStringRef v9 = sub_19E15A210((uint64_t **)&v26, (const void **)v7 + 4, (uint64_t)&unk_19E351150, &v28);
        CFTypeRef v10 = v9[7];
        int v11 = v9[9];
        if (v11 == v10)
        {
          if (v11)
          {
            v9[8] = v11;
            operator delete(v11);
            v9[7] = 0;
            v9[8] = 0;
            v9[9] = 0;
          }
          CFTypeID v13 = (uint64_t *)operator new(8uLL);
          v9[8] = v13;
          CFDictionaryRef v14 = v9 + 8;
          *(v14 - 1) = v13;
          v14[1] = v13 + 1;
          *CFTypeID v13 = v8;
          *CFDictionaryRef v14 = v13 + 1;
          char v12 = (char *)v7[1];
          if (v12)
          {
            do
            {
LABEL_19:
              CFTypeRef v15 = (char **)v12;
              char v12 = *(char **)v12;
            }
            while (v12);
            goto LABEL_12;
          }
        }
        else
        {
          uint64_t *v10 = v8;
          v9[8] = v10 + 1;
          char v12 = (char *)v7[1];
          if (v12) {
            goto LABEL_19;
          }
        }
        do
        {
          CFTypeRef v15 = (char **)v7[2];
          BOOL v6 = *v15 == (char *)v7;
          char v7 = (uint64_t *)v15;
        }
        while (!v6);
LABEL_12:
        char v7 = (uint64_t *)v15;
      }
      while (v15 != v25);
    }
  }
  sub_19E15A064((uint64_t)&v24, v25[0]);
  v23[0] = 0;
  v23[1] = 0;
  int v22 = v23;
  unint64_t v16 = (uint64_t *)v26;
  if (v26 != v27)
  {
    do
    {
      sub_19E15C5E0((uint64_t **)&v22, (uint64_t *)v23, (const void **)v16 + 4, (long long *)v16 + 2);
      CFTypeRef v20 = (char *)v16[1];
      if (v20)
      {
        do
        {
          unint64_t v21 = (char **)v20;
          CFTypeRef v20 = *(char **)v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          unint64_t v21 = (char **)v16[2];
          BOOL v6 = *v21 == (char *)v16;
          unint64_t v16 = (uint64_t *)v21;
        }
        while (!v6);
      }
      unint64_t v16 = (uint64_t *)v21;
    }
    while (v21 != v27);
  }
  unint64_t v17 = (uint64_t *)sub_19E15B18C(&v22);
  CFTypeRef v24 = (char **)v17;
  CFDictionaryRef Copy = CFDictionaryCreateCopy(0, (CFDictionaryRef)v17);
  if (v17) {
    CFRelease(v17);
  }
  sub_19E15C54C((uint64_t)&v22, v23[0]);
  sub_19E15C54C((uint64_t)&v26, v27[0]);
  return Copy;
}

void sub_19E156A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11, uint64_t a12, const void *a13, uint64_t a14, uint64_t a15, char a16, char *a17)
{
}

void sub_19E156ABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, char *a14, uint64_t a15, char a16, char *a17)
{
}

CFDictionaryRef MRLNeuralNetworkCopyOutputNamesAndDimensions(uint64_t a1)
{
  v27[0] = 0;
  v27[1] = 0;
  v25[1] = 0;
  CFTypeRef v26 = v27;
  CFTypeRef v24 = v25;
  v25[0] = 0;
  uint64_t v1 = *(const void ***)(a1 + 48);
  uint64_t v2 = (const void ***)(a1 + 56);
  if (v1 != (const void **)(a1 + 56))
  {
    uint64_t v3 = a1 + 16;
    do
    {
      sub_19E159B70((uint64_t **)&v24, (uint64_t *)v25, v1 + 4, (uint64_t)(v1 + 4));
      uint64_t v4 = (const void **)v1[1];
      if (v4)
      {
        do
        {
          CFStringRef v5 = (const void ***)v4;
          uint64_t v4 = (const void **)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          CFStringRef v5 = (const void ***)v1[2];
          BOOL v6 = *v5 == v1;
          uint64_t v1 = (const void **)v5;
        }
        while (!v6);
      }
      uint64_t v1 = (const void **)v5;
    }
    while (v5 != v2);
    char v7 = (uint64_t *)v24;
    if (v24 != v25)
    {
      do
      {
        int v8 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v3 + 24))(v3, v7 + 4);
        std::string::size_type v28 = (long long *)(v7 + 4);
        CFStringRef v9 = sub_19E15A210((uint64_t **)&v26, (const void **)v7 + 4, (uint64_t)&unk_19E351150, &v28);
        CFTypeRef v10 = v9[7];
        int v11 = v9[9];
        if (v11 == v10)
        {
          if (v11)
          {
            v9[8] = v11;
            operator delete(v11);
            v9[7] = 0;
            v9[8] = 0;
            v9[9] = 0;
          }
          CFTypeID v13 = (uint64_t *)operator new(8uLL);
          v9[8] = v13;
          CFDictionaryRef v14 = v9 + 8;
          *(v14 - 1) = v13;
          v14[1] = v13 + 1;
          *CFTypeID v13 = v8;
          *CFDictionaryRef v14 = v13 + 1;
          char v12 = (char *)v7[1];
          if (v12)
          {
            do
            {
LABEL_19:
              CFTypeRef v15 = (char **)v12;
              char v12 = *(char **)v12;
            }
            while (v12);
            goto LABEL_12;
          }
        }
        else
        {
          uint64_t *v10 = v8;
          v9[8] = v10 + 1;
          char v12 = (char *)v7[1];
          if (v12) {
            goto LABEL_19;
          }
        }
        do
        {
          CFTypeRef v15 = (char **)v7[2];
          BOOL v6 = *v15 == (char *)v7;
          char v7 = (uint64_t *)v15;
        }
        while (!v6);
LABEL_12:
        char v7 = (uint64_t *)v15;
      }
      while (v15 != v25);
    }
  }
  sub_19E15A064((uint64_t)&v24, v25[0]);
  v23[0] = 0;
  v23[1] = 0;
  int v22 = v23;
  unint64_t v16 = (uint64_t *)v26;
  if (v26 != v27)
  {
    do
    {
      sub_19E15C5E0((uint64_t **)&v22, (uint64_t *)v23, (const void **)v16 + 4, (long long *)v16 + 2);
      CFTypeRef v20 = (char *)v16[1];
      if (v20)
      {
        do
        {
          unint64_t v21 = (char **)v20;
          CFTypeRef v20 = *(char **)v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          unint64_t v21 = (char **)v16[2];
          BOOL v6 = *v21 == (char *)v16;
          unint64_t v16 = (uint64_t *)v21;
        }
        while (!v6);
      }
      unint64_t v16 = (uint64_t *)v21;
    }
    while (v21 != v27);
  }
  unint64_t v17 = (uint64_t *)sub_19E15B18C(&v22);
  CFTypeRef v24 = (char **)v17;
  CFDictionaryRef Copy = CFDictionaryCreateCopy(0, (CFDictionaryRef)v17);
  if (v17) {
    CFRelease(v17);
  }
  sub_19E15C54C((uint64_t)&v22, v23[0]);
  sub_19E15C54C((uint64_t)&v26, v27[0]);
  return Copy;
}

void sub_19E156D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11, uint64_t a12, const void *a13, uint64_t a14, uint64_t a15, char a16, char *a17)
{
}

void sub_19E156DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, char *a14, uint64_t a15, char a16, char *a17)
{
}

void MRLNeuralNetworkGetNodeParams(uint64_t a1, const __CFString *a2)
{
  if (!a2 || (CFTypeID TypeID = CFStringGetTypeID(), TypeID != CFGetTypeID(a2)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not convert");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  sub_19E15A3C4(a2, __p);
  sub_19E30AD68(a1 + 16, (uint64_t)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_19E156EC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (v34 < 0) {
    operator delete(Mutable);
  }
  if (a2 != 1) {
    _Unwind_Resume(exception_object);
  }
  CFStringRef v29 = __cxa_begin_catch(exception_object);
  CFAllocatorRef v30 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFTypeID v31 = (const char *)(*(uint64_t (**)(void *))(*(void *)v29 + 16))(v29);
  CFStringRef v32 = CFStringCreateWithCString(v30, v31, 0);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F1D170], v32);
  *CFTypeRef v26 = CFErrorCreate(v30, MRLNeuralNetworkErrorDomain, 0, Mutable);
  bzero(v25, 0x2C0uLL);
  sub_19E157014((const void **)&v32);
  sub_19E15704C((const void **)&Mutable);
  __cxa_end_catch();
}

const void **sub_19E157014(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  *a1 = 0;
  return a1;
}

const void **sub_19E15704C(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  *a1 = 0;
  return a1;
}

void *MRLNeuralNetworkStateCreate()
{
  if (qword_1E9457D20 != -1) {
    dispatch_once(&qword_1E9457D20, &unk_1EF0AC0A0);
  }
  uint64_t result = (void *)_CFRuntimeCreateInstance();
  result[3] = 0;
  result[2] = result + 3;
  result[6] = 0;
  result[4] = 0;
  result[5] = result + 6;
  result[8] = 0;
  result[9] = 0;
  result[7] = 0;
  return result;
}

uint64_t MRLNeuralNetworkTensorCreate(CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  sub_19E159840(&theDict, cf);
  if (!theDict)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFURLRef Value = CFDictionaryGetValue(theDict, @"ShapeDimension");
  if (Value && (sub_19E15C808((uint64_t)Value) & 0xFF00000000) != 0)
  {
    if (!theDict)
    {
      uint64_t v38 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v38, "Could not construct");
      __cxa_throw(v38, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v3 = CFDictionaryGetValue(theDict, @"ShapeDimension");
    if (v3)
    {
      if (sub_19E15C808((uint64_t)v3) == 5)
      {
        if (!theDict)
        {
          CFStringRef v42 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v42, "Could not construct");
          __cxa_throw(v42, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        uint64_t v4 = CFDictionaryGetValue(theDict, @"Width");
        if (v4)
        {
          int v5 = sub_19E15C808((uint64_t)v4);
          CFDictionaryRef v6 = theDict;
          if (theDict) {
            goto LABEL_12;
          }
        }
        else
        {
          int v5 = 0;
          CFDictionaryRef v6 = theDict;
          if (theDict)
          {
LABEL_12:
            char v7 = CFDictionaryGetValue(v6, @"Height");
            if (v7)
            {
              LODWORD(v8) = sub_19E15C808((uint64_t)v7);
              CFDictionaryRef v9 = theDict;
              if (theDict) {
                goto LABEL_14;
              }
            }
            else
            {
              LODWORD(v8) = 0;
              CFDictionaryRef v9 = theDict;
              if (theDict)
              {
LABEL_14:
                CFTypeRef v10 = CFDictionaryGetValue(v9, @"Channel");
                if (v10)
                {
                  int v11 = sub_19E15C808((uint64_t)v10);
                  CFDictionaryRef v12 = theDict;
                  if (theDict)
                  {
LABEL_16:
                    CFTypeID v13 = CFDictionaryGetValue(v12, @"SequenceLength");
                    uint64_t v14 = v5;
                    uint64_t v8 = (int)v8;
                    if (v13 && (sub_19E15C808((uint64_t)v13) & 0xFF00000000) != 0)
                    {
                      if (!theDict)
                      {
                        size_t v43 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                        std::runtime_error::runtime_error(v43, "Could not construct");
                        __cxa_throw(v43, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                      }
                      CFTypeRef v15 = CFDictionaryGetValue(theDict, @"SequenceLength");
                      if (v15) {
                        LODWORD(v15) = sub_19E15C808((uint64_t)v15);
                      }
                      uint64_t v16 = (int)v15;
                      goto LABEL_33;
                    }
LABEL_32:
                    uint64_t v16 = 1;
                    goto LABEL_33;
                  }
                }
                else
                {
                  int v11 = 0;
                  CFDictionaryRef v12 = theDict;
                  if (theDict) {
                    goto LABEL_16;
                  }
                }
                char v34 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v34, "Could not construct");
                __cxa_throw(v34, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
            }
            CFTypeID v33 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v33, "Could not construct");
            __cxa_throw(v33, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
        }
        CFStringRef v32 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v32, "Could not construct");
        __cxa_throw(v32, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
    }
  }
  if (!theDict)
  {
    CFTypeID v37 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v37, "Could not construct");
    __cxa_throw(v37, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t v17 = CFDictionaryGetValue(theDict, @"InputDimension");
  if (!v17)
  {
    int v11 = 0;
    CFDictionaryRef v18 = theDict;
    if (theDict) {
      goto LABEL_25;
    }
LABEL_41:
    CFTypeRef v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v26, "Could not construct");
    __cxa_throw(v26, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v11 = sub_19E15C808((uint64_t)v17);
  CFDictionaryRef v18 = theDict;
  if (!theDict) {
    goto LABEL_41;
  }
LABEL_25:
  std::string::size_type v19 = CFDictionaryGetValue(v18, @"SequenceLength");
  if (!v19 || (sub_19E15C808((uint64_t)v19) & 0xFF00000000) == 0)
  {
    uint64_t v14 = 1;
    uint64_t v8 = 1;
    goto LABEL_32;
  }
  if (!theDict)
  {
    CFTypeID v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v39, "Could not construct");
    __cxa_throw(v39, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFTypeRef v20 = CFDictionaryGetValue(theDict, @"SequenceLength");
  if (v20) {
    LODWORD(v20) = sub_19E15C808((uint64_t)v20);
  }
  uint64_t v16 = (int)v20;
  uint64_t v14 = 1;
  uint64_t v8 = 1;
LABEL_33:
  if (!theDict)
  {
    CFNumberRef v36 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v36, "Could not construct");
    __cxa_throw(v36, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFBooleanRef v21 = (const __CFBoolean *)CFDictionaryGetValue(theDict, @"isBatchFirst");
  if (v21 && (unsigned __int16)sub_19E15CB1C(v21) >= 0x100u)
  {
    if (!theDict)
    {
      uint64_t v40 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v40, "Could not construct");
      __cxa_throw(v40, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    CFBooleanRef v27 = (const __CFBoolean *)CFDictionaryGetValue(theDict, @"isBatchFirst");
    if (v27)
    {
      BOOL v22 = sub_19E15CB1C(v27) != 0;
      CFDictionaryRef v23 = theDict;
      if (theDict) {
        goto LABEL_37;
      }
    }
    else
    {
      BOOL v22 = 0;
      CFDictionaryRef v23 = theDict;
      if (theDict) {
        goto LABEL_37;
      }
    }
LABEL_45:
    std::string::size_type v28 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v28, "Could not construct");
    __cxa_throw(v28, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  BOOL v22 = 1;
  CFDictionaryRef v23 = theDict;
  if (!theDict) {
    goto LABEL_45;
  }
LABEL_37:
  CFBooleanRef v24 = (const __CFBoolean *)CFDictionaryGetValue(v23, @"isChannelLast");
  if (v24 && (unsigned __int16)sub_19E15CB1C(v24) >= 0x100u)
  {
    if (!theDict)
    {
      unint64_t v41 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v41, "Could not construct");
      __cxa_throw(v41, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    CFBooleanRef v29 = (const __CFBoolean *)CFDictionaryGetValue(theDict, @"isChannelLast");
    if (v29) {
      BOOL v25 = sub_19E15CB1C(v29) != 0;
    }
    else {
      BOOL v25 = 0;
    }
  }
  else
  {
    BOOL v25 = 1;
  }
  if (qword_1E9457DF0 != -1) {
    dispatch_once(&qword_1E9457DF0, &unk_1EF0AC080);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  *(void *)(Instance + 16) = 0;
  *(void *)(Instance + 24) = 0;
  *(void *)(Instance + 32) = 0;
  *(void *)(Instance + 40) = v14;
  *(void *)(Instance + 48) = v8;
  *(void *)(Instance + 56) = v11;
  *(void *)(Instance + 64) = v16;
  *(void *)(Instance + 72) = 0;
  *(unsigned char *)(Instance + 80) = v25;
  *(unsigned char *)(Instance + 81) = v22;
  *(unsigned char *)(Instance + 82) = 0;
  if (theDict) {
    CFRelease(theDict);
  }
  return Instance;
}

void sub_19E1577A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E1551E8((const void **)va);
  _Unwind_Resume(a1);
}

void sub_19E1577B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  __cxa_free_exception(v10);
  sub_19E1551E8(&a10);
  _Unwind_Resume(a1);
}

void sub_19E157940(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E1551E8((const void **)va);
  _Unwind_Resume(a1);
}

void MRLNeuralNetworkStateSetData(uint64_t a1, const __CFString *a2, char *a3, unint64_t a4)
{
  if (!a2 || (CFTypeID TypeID = CFStringGetTypeID(), TypeID != CFGetTypeID(a2)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_19E15A3B4(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  sub_19E15A3C4(a2, __p);
  sub_19E2536EC((uint64_t **)(a1 + 16), (long long *)__p, a3, a4);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
}

void sub_19E157A40(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19E157A54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MRLNeuralNetworkSetPartialOutputIndices(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4)
{
  std::string __p = 0;
  uint64_t v38 = 0;
  CFTypeID v39 = 0;
  if (a4)
  {
    uint64_t v7 = 4 * a4;
    if ((unint64_t)(4 * a4) >= 0x7FFFFFFFFFFFFFFDLL) {
      sub_19E13D694();
    }
    CFDictionaryRef v9 = operator new(8 * a4);
    std::string __p = v9;
    CFTypeID v39 = (char *)v9 + 8 * a4;
    CFTypeRef v10 = (unsigned int *)a3;
    char v11 = (char *)v9;
    if ((unint64_t)(v7 - 4) < 0xC) {
      goto LABEL_35;
    }
    unint64_t v12 = ((unint64_t)(v7 - 4) >> 2) + 1;
    CFTypeRef v10 = (unsigned int *)(a3 + 4 * (v12 & 0x7FFFFFFFFFFFFFFCLL));
    char v11 = (char *)v9 + 8 * (v12 & 0x7FFFFFFFFFFFFFFCLL);
    CFTypeID v13 = v9 + 1;
    uint64_t v14 = (void *)(a3 + 8);
    uint64_t v15 = v12 & 0x7FFFFFFFFFFFFFFCLL;
    do
    {
      uint64_t v16 = *(v14 - 1);
      *(void *)&long long v17 = v16;
      *((void *)&v17 + 1) = HIDWORD(v16);
      long long v18 = v17;
      *(void *)&long long v17 = *v14;
      *((void *)&v17 + 1) = HIDWORD(*v14);
      *(v13 - 1) = v18;
      *CFTypeID v13 = v17;
      v13 += 2;
      v14 += 2;
      v15 -= 4;
    }
    while (v15);
    if (v12 != (v12 & 0x7FFFFFFFFFFFFFFCLL))
    {
LABEL_35:
      do
      {
        unsigned int v19 = *v10++;
        *(void *)char v11 = v19;
        v11 += 8;
      }
      while (v10 != (unsigned int *)(a3 + 4 * a4));
    }
    uint64_t v38 = v11;
  }
  std::__sort<std::__less<long,long> &,long *>();
  CFTypeRef v20 = v38;
  if (__p != v38)
  {
    CFBooleanRef v21 = (char *)__p + 8;
    while (v21 != v38)
    {
      BOOL v22 = v21 - 8;
      uint64_t v23 = *((void *)v21 - 1);
      uint64_t v24 = *(void *)v21;
      v21 += 8;
      if (v23 == v24)
      {
        for (uint64_t i = v22 + 16; i != v20; i += 8)
        {
          uint64_t v26 = v23;
          uint64_t v23 = *(void *)i;
          if (v26 != *(void *)i)
          {
            *((void *)v22 + 1) = v23;
            v22 += 8;
          }
        }
        CFBooleanRef v27 = v22 + 8;
        int64_t v28 = v20 - (v22 + 8);
        if (v28)
        {
          int64_t v29 = v20 - &v27[v28];
          if (v20 != &v27[v28]) {
            memmove(v27, &v27[v28], v20 - &v27[v28]);
          }
          uint64_t v38 = &v27[v29];
        }
        break;
      }
    }
  }
  char v34 = 0;
  LOBYTE(v33) = 0;
  sub_19E157E48(a2, (uint64_t)&v33, (uint64_t)v35);
  char v30 = sub_19E30B528(a1 + 16, (uint64_t)v35, (uint64_t)&__p, 0);
  if (v36 < 0)
  {
    operator delete(v35[0]);
    if ((v34 & 0x80000000) == 0)
    {
LABEL_25:
      if (v30) {
        goto LABEL_26;
      }
LABEL_31:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Unknown error. ");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else if ((v34 & 0x80000000) == 0)
  {
    goto LABEL_25;
  }
  operator delete(v33);
  if ((v30 & 1) == 0) {
    goto LABEL_31;
  }
LABEL_26:
  if (__p)
  {
    uint64_t v38 = (char *)__p;
    operator delete(__p);
  }
  return 1;
}

uint64_t sub_19E157CC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  if (v53) {
    operator delete(v53);
  }
  if (a2 != 1) {
    _Unwind_Resume(a1);
  }
  int v44 = __cxa_begin_catch(a1);
  if (v43)
  {
    uint64_t v45 = v44;
    CFAllocatorRef v46 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    int v48 = (const char *)(*(uint64_t (**)(void *))(*(void *)v45 + 16))(v45);
    CFStringRef v49 = CFStringCreateWithCString(v46, v48, 0);
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F1D170], v49);
    CFErrorRef *v43 = CFErrorCreate(v46, MRLNeuralNetworkErrorDomain, 0, Mutable);
    CFRelease(v49);
    CFRelease(Mutable);
  }
  __cxa_end_catch();
  return 0;
}

void sub_19E157E48(const __CFString *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (a1 && (CFTypeID TypeID = CFStringGetTypeID(), TypeID == CFGetTypeID(a1)))
  {
    sub_19E15CF70(a1, __p);
    char v9 = 1;
    if (SHIBYTE(v8) < 0)
    {
      sub_19E13C2D0((unsigned char *)a3, __p[0], (unint64_t)__p[1]);
      if (v9)
      {
        if (SHIBYTE(v8) < 0) {
          operator delete(__p[0]);
        }
      }
    }
    else
    {
      *(_OWORD *)a3 = *(_OWORD *)__p;
      *(void *)(a3 + 16) = v8;
    }
  }
  else
  {
    *(_OWORD *)a3 = *(_OWORD *)a2;
    *(void *)(a3 + 16) = *(void *)(a2 + 16);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)a2 = 0;
  }
}

uint64_t MRLNeuralNetworkSetPartialOutputRange(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4)
{
  char v15 = 0;
  LOBYTE(v14) = 0;
  sub_19E157E48(a2, (uint64_t)&v14, (uint64_t)v16);
  uint64_t v7 = operator new(0x10uLL);
  unint64_t v12 = v7 + 2;
  CFTypeID v13 = v7 + 2;
  void *v7 = a3;
  v7[1] = a4;
  std::string __p = v7;
  char v8 = sub_19E30B528(a1 + 16, (uint64_t)v16, (uint64_t)&__p, 1);
  if (__p)
  {
    unint64_t v12 = __p;
    operator delete(__p);
  }
  if ((v17 & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0) {
      goto LABEL_5;
    }
LABEL_8:
    operator delete(v14);
    if (v8) {
      return 1;
    }
LABEL_9:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unknown error. ");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  operator delete(v16[0]);
  if (v15 < 0) {
    goto LABEL_8;
  }
LABEL_5:
  if ((v8 & 1) == 0) {
    goto LABEL_9;
  }
  return 1;
}

uint64_t sub_19E158040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  if (a2 != 1) {
    _Unwind_Resume(exception_object);
  }
  CFTypeID v31 = __cxa_begin_catch(exception_object);
  if (v30)
  {
    CFStringRef v32 = v31;
    CFAllocatorRef v33 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFTypeID v35 = (const char *)(*(uint64_t (**)(void *))(*(void *)v32 + 16))(v32);
    CFStringRef v36 = CFStringCreateWithCString(v33, v35, 0);
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F1D170], v36);
    *char v30 = CFErrorCreate(v33, MRLNeuralNetworkErrorDomain, 0, Mutable);
    CFRelease(v36);
    CFRelease(Mutable);
  }
  __cxa_end_catch();
  return 0;
}

uint64_t MRLNeuralNetworkModelLock(uint64_t result)
{
  if (result) {
    return sub_19E30CD78(result + 16);
  }
  return result;
}

uint64_t MRLNeuralNetworkModelUnLock(uint64_t result)
{
  if (result) {
    return sub_19E30CDA8(result + 16);
  }
  return result;
}

uint64_t MRLNeuralNetworkDeclareOutput(uint64_t a1, const __CFString *a2)
{
  sub_19E31A250(a2, __p);
  uint64_t result = (*(uint64_t (**)(uint64_t, void **))(*(void *)(a1 + 16) + 88))(a1 + 16, __p);
  uint64_t v4 = result;
  if (v6 < 0)
  {
    operator delete(__p[0]);
    return v4;
  }
  return result;
}

void sub_19E15826C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MRLNeuralNetworkCopyIncrementalStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 96))();
}

void sub_19E1583CC(_Unwind_Exception *a1)
{
}

void *MRLNeuralNetworkIncrementalStateCreate(uint64_t a1)
{
  if (qword_1E9457D20 != -1) {
    dispatch_once(&qword_1E9457D20, &unk_1EF0AC0A0);
  }
  uint64_t result = (void *)_CFRuntimeCreateInstance();
  result[3] = 0;
  result[2] = result + 3;
  result[6] = 0;
  result[4] = 0;
  result[5] = result + 6;
  result[7] = 0;
  result[8] = a1;
  result[9] = 0;
  return result;
}

void MRLNeuralNetworkAppendIncrementalState(uint64_t a1, uint64_t a2)
{
}

void sub_19E158488(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t)a1;
  if (!a1[7])
  {
    uint64_t v47 = (void *)sub_19E25368C(a2);
    int v48 = (void *)*v47;
    float v91 = v47 + 1;
    if ((void *)*v47 != v47 + 1)
    {
      do
      {
        if (*((char *)v48 + 55) < 0)
        {
          sub_19E13C2D0(&__dst, (void *)v48[4], v48[5]);
        }
        else
        {
          long long __dst = *((_OWORD *)v48 + 2);
          uint64_t v100 = v48[6];
        }
        uint64_t v49 = v48[7];
        int v50 = *((_DWORD *)v48 + 16);
        uint64_t v52 = v48[9];
        uint64_t v51 = v48[10];
        uint64_t v53 = v48[11];
        uint64_t v54 = *(void *)(v2 + 48);
        __p[0] = &__dst;
        BOOL v55 = sub_19E15A210((uint64_t **)v2, (const void **)&__dst, (uint64_t)&unk_19E351150, (long long **)__p);
        unint64_t v56 = (int)v49 * v50 * (int)v52 * (int)v51 * (int)v53 * v54;
        if ((char *)v55[8] - (char *)v55[7] < v56)
        {
          __p[0] = &__dst;
          uint64_t v57 = sub_19E15A210(a1, (const void **)&__dst, (uint64_t)&unk_19E351150, (long long **)__p);
          BOOL v58 = v57[7];
          int v59 = v57[8];
          size_t v60 = v56 - ((char *)v59 - (char *)v58);
          if (v56 <= (char *)v59 - (char *)v58)
          {
            if (v56 < (char *)v59 - (char *)v58) {
              v57[8] = (uint64_t *)((char *)v58 + v56);
            }
          }
          else
          {
            uint64_t v61 = v57[9];
            if ((char *)v61 - (char *)v59 >= v60)
            {
              bzero(v57[8], v60);
              v57[8] = (uint64_t *)((char *)v58 + v56);
              goto LABEL_126;
            }
            unint64_t v88 = (char *)v59 - (char *)v58;
            if ((v56 & 0x8000000000000000) != 0) {
              sub_19E13D694();
            }
            unint64_t v62 = (char *)v61 - (char *)v58;
            uint64_t v63 = 2 * v62;
            if (2 * v62 <= v56) {
              uint64_t v63 = v56;
            }
            if (v62 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v64 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v64 = v63;
            }
            size_t v86 = v64;
            float v83 = (uint64_t *)operator new(v64);
            uint64_t v81 = (uint64_t *)((char *)v83 + v88);
            bzero((char *)v83 + v88, v60);
            if (v59 != v58)
            {
              if (v88 < 8)
              {
                size_t v65 = v86;
                int v67 = (char *)v83 + v88;
                uint64_t v66 = v83;
                goto LABEL_122;
              }
              int v67 = (char *)v83 + v88;
              uint64_t v66 = v83;
              size_t v65 = v86;
              if ((unint64_t)((char *)v58 - (char *)v83) < 0x20) {
                goto LABEL_122;
              }
              if (v88 >= 0x20)
              {
                unint64_t v68 = v88 & 0xFFFFFFFFFFFFFFE0;
                uint64_t v69 = (char *)v83 + v88 - 16;
                uint64_t v70 = v59 - 2;
                unint64_t v71 = v88 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  long long v72 = *(_OWORD *)v70;
                  *((_OWORD *)v69 - 1) = *((_OWORD *)v70 - 1);
                  *(_OWORD *)uint64_t v69 = v72;
                  v69 -= 32;
                  v70 -= 4;
                  v71 -= 32;
                }
                while (v71);
                if (v88 != v68)
                {
                  if ((v88 & 0x18) == 0)
                  {
                    int v67 = (char *)v81 - v68;
                    int v59 = (uint64_t *)((char *)v59 - v68);
                    goto LABEL_122;
                  }
                  goto LABEL_117;
                }
              }
              else
              {
                unint64_t v68 = 0;
LABEL_117:
                int v67 = (char *)v81 - (v88 & 0xFFFFFFFFFFFFFFF8);
                int64_t v73 = (char *)v83 + (char *)v59 - v68 - (char *)v58 - 8;
                float32x4_t v74 = (uint64_t *)((char *)v59 - v68 - 8);
                unint64_t v75 = v68 - (v88 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  uint64_t v76 = *v74--;
                  *(void *)int64_t v73 = v76;
                  v73 -= 8;
                  v75 += 8;
                }
                while (v75);
                int v59 = (uint64_t *)((char *)v59 - (v88 & 0xFFFFFFFFFFFFFFF8));
                if (v88 != (v88 & 0xFFFFFFFFFFFFFFF8))
                {
LABEL_122:
                  float v77 = v67 - 1;
                  do
                  {
                    char v78 = *((unsigned char *)v59 - 1);
                    int v59 = (uint64_t *)((char *)v59 - 1);
                    *v77-- = v78;
                  }
                  while (v59 != v58);
                }
              }
              int v59 = v58;
              v57[7] = v66;
              v57[8] = (uint64_t *)((char *)v66 + v56);
              v57[9] = (uint64_t *)((char *)v66 + v65);
              if (!v58) {
                goto LABEL_126;
              }
LABEL_125:
              operator delete(v59);
              goto LABEL_126;
            }
            v57[7] = v81;
            v57[8] = (uint64_t *)((char *)v83 + v56);
            v57[9] = (uint64_t *)((char *)v83 + v86);
            if (v59) {
              goto LABEL_125;
            }
          }
        }
LABEL_126:
        v98[0] = v49;
        v98[1] = 0;
        v98[2] = v52;
        v98[3] = v51;
        v98[4] = v53;
        sub_19E253744((uint64_t)a1, &__dst, (uint64_t)v98);
        if (SHIBYTE(v100) < 0)
        {
          operator delete((void *)__dst);
          float v79 = (void *)v48[1];
          if (v79)
          {
            do
            {
LABEL_130:
              int v80 = v79;
              float v79 = (void *)*v79;
            }
            while (v79);
            goto LABEL_89;
          }
        }
        else
        {
          float v79 = (void *)v48[1];
          if (v79) {
            goto LABEL_130;
          }
        }
        do
        {
          int v80 = (void *)v48[2];
          BOOL v31 = *v80 == (void)v48;
          int v48 = v80;
        }
        while (!v31);
LABEL_89:
        int v48 = v80;
        uint64_t v2 = (uint64_t)a1;
      }
      while (v80 != v91);
    }
  }
  uint64_t v3 = (void *)sub_19E25368C(a2);
  uint64_t v4 = v3 + 1;
  int v5 = (void *)*v3;
  if ((void *)*v3 != v3 + 1)
  {
    float v90 = (uint64_t **)(v2 + 8);
    int v82 = v3 + 1;
    do
    {
      if (*((char *)v5 + 55) < 0)
      {
        sub_19E13C2D0(__p, (void *)v5[4], v5[5]);
      }
      else
      {
        *(_OWORD *)std::string __p = *((_OWORD *)v5 + 2);
        uint64_t v97 = v5[6];
      }
      long long v6 = *(_OWORD *)(v5 + 9);
      v94[0] = *(_OWORD *)(v5 + 7);
      v94[1] = v6;
      uint64_t v95 = v5[11];
      if (sub_19E15A0E8(v2, (const void **)__p, (uint64_t)v94))
      {
        float v87 = sub_19E2533F8(a2, (const void **)__p);
        sub_19E253538(v2, (const void **)__p, (uint64_t)&__dst);
        uint64_t v85 = v100;
        if (v100)
        {
          uint64_t v7 = 0;
          size_t v8 = __dst;
          do
          {
            uint64_t v9 = *(void *)(v2 + 56);
            CFTypeRef v10 = *(uint64_t **)(v2 + 8);
            char v11 = v90;
            unint64_t v12 = v90;
            if (v10)
            {
              if (v97 >= 0) {
                CFTypeID v13 = (void *)HIBYTE(v97);
              }
              else {
                CFTypeID v13 = __p[1];
              }
              if (v97 >= 0) {
                uint64_t v14 = __p;
              }
              else {
                uint64_t v14 = (void **)__p[0];
              }
              while (1)
              {
                while (1)
                {
                  char v11 = (uint64_t **)v10;
                  char v17 = (const void *)v10[4];
                  char v15 = v10 + 4;
                  uint64_t v16 = v17;
                  int v18 = *((char *)v15 + 23);
                  if (v18 >= 0) {
                    size_t v19 = *((unsigned __int8 *)v15 + 23);
                  }
                  else {
                    size_t v19 = v15[1];
                  }
                  if (v18 >= 0) {
                    CFTypeRef v20 = v15;
                  }
                  else {
                    CFTypeRef v20 = v16;
                  }
                  if (v19 >= (unint64_t)v13) {
                    size_t v21 = (size_t)v13;
                  }
                  else {
                    size_t v21 = v19;
                  }
                  int v22 = memcmp(v14, v20, v21);
                  BOOL v23 = (unint64_t)v13 < v19;
                  if (v22) {
                    BOOL v23 = v22 < 0;
                  }
                  if (!v23) {
                    break;
                  }
                  CFTypeRef v10 = *v11;
                  unint64_t v12 = v11;
                  if (!*v11) {
                    goto LABEL_41;
                  }
                }
                int v24 = memcmp(v20, v14, v21);
                BOOL v25 = v19 < (unint64_t)v13;
                if (v24) {
                  BOOL v25 = v24 < 0;
                }
                if (!v25) {
                  break;
                }
                CFTypeRef v10 = v11[1];
                if (!v10)
                {
                  unint64_t v12 = v11 + 1;
                  goto LABEL_41;
                }
              }
              uint64_t v26 = v11;
              uint64_t v2 = (uint64_t)a1;
            }
            else
            {
LABEL_41:
              uint64_t v26 = operator new(0x50uLL);
              CFBooleanRef v27 = v26 + 4;
              if (SHIBYTE(v97) < 0)
              {
                sub_19E13C2D0(v27, __p[0], (unint64_t)__p[1]);
              }
              else
              {
                *(_OWORD *)CFBooleanRef v27 = *(_OWORD *)__p;
                v26[6] = v97;
              }
              uint64_t v2 = (uint64_t)a1;
              v26[7] = 0;
              v26[8] = 0;
              v26[9] = 0;
              *uint64_t v26 = 0;
              v26[1] = 0;
              v26[2] = v11;
              void *v12 = v26;
              int64_t v28 = (uint64_t *)**a1;
              int64_t v29 = v26;
              if (v28)
              {
                *a1 = v28;
                int64_t v29 = *v12;
              }
              char v30 = *v90;
              BOOL v31 = v29 == *v90;
              *((unsigned char *)v29 + 24) = v31;
              if (!v31)
              {
                do
                {
                  uint64_t v32 = v29[2];
                  if (*(unsigned char *)(v32 + 24)) {
                    break;
                  }
                  CFAllocatorRef v33 = *(uint64_t **)(v32 + 16);
                  uint64_t v34 = *v33;
                  if (*v33 == v32)
                  {
                    uint64_t v37 = v33[1];
                    if (!v37 || (v38 = *(unsigned __int8 *)(v37 + 24), CFTypeID v35 = (unsigned char *)(v37 + 24), v38))
                    {
                      if (*(uint64_t **)v32 == v29)
                      {
                        *(unsigned char *)(v32 + 24) = 1;
                        *((unsigned char *)v33 + 24) = 0;
                        uint64_t v41 = *(void *)(v32 + 8);
                        *CFAllocatorRef v33 = v41;
                        if (v41) {
                          goto LABEL_61;
                        }
                      }
                      else
                      {
                        CFTypeID v39 = *(uint64_t **)(v32 + 8);
                        uint64_t v40 = *v39;
                        *(void *)(v32 + 8) = *v39;
                        if (v40)
                        {
                          *(void *)(v40 + 16) = v32;
                          CFAllocatorRef v33 = *(uint64_t **)(v32 + 16);
                        }
                        v39[2] = (uint64_t)v33;
                        *(void *)(*(void *)(v32 + 16) + 8 * (**(void **)(v32 + 16) != v32)) = v39;
                        *CFTypeID v39 = v32;
                        *(void *)(v32 + 16) = v39;
                        CFAllocatorRef v33 = (uint64_t *)v39[2];
                        uint64_t v32 = *v33;
                        *((unsigned char *)v39 + 24) = 1;
                        *((unsigned char *)v33 + 24) = 0;
                        uint64_t v41 = *(void *)(v32 + 8);
                        *CFAllocatorRef v33 = v41;
                        if (v41) {
LABEL_61:
                        }
                          *(void *)(v41 + 16) = v33;
                      }
                      *(void *)(v32 + 16) = v33[2];
                      *(void *)(v33[2] + 8 * (*(void *)v33[2] != (void)v33)) = v32;
                      *(void *)(v32 + 8) = v33;
LABEL_13:
                      v33[2] = v32;
                      break;
                    }
                  }
                  else if (!v34 || (v36 = *(unsigned __int8 *)(v34 + 24), CFTypeID v35 = (unsigned char *)(v34 + 24), v36))
                  {
                    if (*(uint64_t **)v32 == v29)
                    {
                      uint64_t v43 = v29[1];
                      *(void *)uint64_t v32 = v43;
                      if (v43)
                      {
                        *(void *)(v43 + 16) = v32;
                        CFAllocatorRef v33 = *(uint64_t **)(v32 + 16);
                      }
                      v29[2] = (uint64_t)v33;
                      *(void *)(*(void *)(v32 + 16) + 8 * (**(void **)(v32 + 16) != v32)) = v29;
                      v29[1] = v32;
                      *(void *)(v32 + 16) = v29;
                      CFAllocatorRef v33 = (uint64_t *)v29[2];
                      *((unsigned char *)v29 + 24) = 1;
                      *((unsigned char *)v33 + 24) = 0;
                      uint64_t v32 = v33[1];
                      CFStringRef v42 = *(uint64_t **)v32;
                      v33[1] = *(void *)v32;
                      if (!v42) {
                        goto LABEL_12;
                      }
                    }
                    else
                    {
                      *(unsigned char *)(v32 + 24) = 1;
                      *((unsigned char *)v33 + 24) = 0;
                      uint64_t v32 = v33[1];
                      CFStringRef v42 = *(uint64_t **)v32;
                      v33[1] = *(void *)v32;
                      if (!v42) {
                        goto LABEL_12;
                      }
                    }
                    v42[2] = (uint64_t)v33;
LABEL_12:
                    *(void *)(v32 + 16) = v33[2];
                    *(void *)(v33[2] + 8 * (*(void *)v33[2] != (void)v33)) = v32;
                    *(void *)uint64_t v32 = v33;
                    goto LABEL_13;
                  }
                  *(unsigned char *)(v32 + 24) = 1;
                  int64_t v29 = v33;
                  *((unsigned char *)v33 + 24) = v33 == v30;
                  *CFTypeID v35 = 1;
                }
                while (v33 != v30);
              }
              a1[2] = (uint64_t *)((char *)a1[2] + 1);
            }
            memcpy((void *)(v26[7] + v9 * v8 + *(void *)(v2 + 48) * v7 * v8), (char *)v87 + v7 * v8, v8);
            ++v7;
          }
          while (v7 != v85);
        }
        uint64_t v4 = v82;
        if ((SHIBYTE(v97) & 0x80000000) == 0)
        {
LABEL_75:
          uint64_t v45 = (void *)v5[1];
          if (!v45) {
            goto LABEL_81;
          }
          goto LABEL_79;
        }
      }
      else
      {
        int v44 = sub_19E26EDD8();
        if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
        {
          sub_19E32EA64(&buf, v93, v44);
          if ((SHIBYTE(v97) & 0x80000000) == 0) {
            goto LABEL_75;
          }
        }
        else if ((SHIBYTE(v97) & 0x80000000) == 0)
        {
          goto LABEL_75;
        }
      }
      operator delete(__p[0]);
      uint64_t v45 = (void *)v5[1];
      if (!v45)
      {
        do
        {
LABEL_81:
          CFAllocatorRef v46 = (void *)v5[2];
          BOOL v31 = *v46 == (void)v5;
          int v5 = v46;
        }
        while (!v31);
        goto LABEL_4;
      }
      do
      {
LABEL_79:
        CFAllocatorRef v46 = v45;
        uint64_t v45 = (void *)*v45;
      }
      while (v45);
LABEL_4:
      int v5 = v46;
    }
    while (v46 != v4);
  }
  ++*(void *)(v2 + 56);
}

void sub_19E158C98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (*(char *)(v30 - 105) < 0) {
    operator delete(*(void **)(v30 - 128));
  }
  _Unwind_Resume(exception_object);
}

uint64_t MRLNeuralNetworkResetIncrementalState(uint64_t result, uint64_t a2)
{
  *(void *)(result + 64) = a2;
  *(void *)(result + 72) = 0;
  return result;
}

uint64_t MRLEmbeddingMemoryModelCreate(CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  sub_19E159840(&theDict, cf);
  if (!theDict)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFURLRef Value = CFDictionaryGetValue(theDict, @"MRLEmbeddingMemoryModelEmbeddingDimensionKey");
  if (Value)
  {
    unint64_t v3 = sub_19E15D140((unint64_t)Value);
    CFDictionaryRef v4 = theDict;
    if (theDict) {
      goto LABEL_6;
    }
LABEL_9:
    uint64_t v7 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v7, "Could not construct");
    __cxa_throw(v7, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t v3 = 0;
  CFDictionaryRef v4 = theDict;
  if (!theDict) {
    goto LABEL_9;
  }
LABEL_6:
  int v5 = CFDictionaryGetValue(v4, @"MRLEmbeddingMemoryModelSizeKey");
  if (v5) {
    unint64_t v6 = sub_19E15D140((unint64_t)v5);
  }
  else {
    unint64_t v6 = 0;
  }
  if (qword_1E94583F0 != -1) {
    dispatch_once(&qword_1E94583F0, &unk_1EF0AC0C0);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  sub_19E2502B0(Instance + 16, v3, v6);
  if (theDict) {
    CFRelease(theDict);
  }
  return Instance;
}

void sub_19E158E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_19E1551E8((const void **)va);
  _Unwind_Resume(a1);
}

void sub_19E158E98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, const void *a12)
{
  __cxa_free_exception(v12);
  sub_19E1551E8(&a12);
  _Unwind_Resume(a1);
}

void sub_19E158EDC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  int v18 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    if (v15)
    {
      size_t v19 = v18;
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v16, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      size_t v21 = (const char *)(*(uint64_t (**)(void *))(*(void *)v19 + 16))(v19);
      CFStringRef v22 = CFStringCreateWithCString(v16, v21, 0);
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F1D170], v22);
      *char v15 = CFErrorCreate(v16, MRLNeuralNetworkErrorDomain, 0, Mutable);
      CFRelease(v22);
      CFRelease(Mutable);
    }
  }
  else if (v15)
  {
    BOOL v23 = CFDictionaryCreateMutable(v16, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    sub_19E152B34(&__p, "Unknown expection");
    int v24 = a14 >= 0 ? (const char *)&__p : (const char *)__p;
    CFStringRef v25 = CFStringCreateWithCString(v16, v24, 0);
    CFDictionaryAddValue(v23, (const void *)*MEMORY[0x1E4F1D170], v25);
    *char v15 = CFErrorCreate(v16, MRLNeuralNetworkErrorDomain, 0, v23);
    CFRelease(v25);
    CFRelease(v23);
    if (a14 < 0) {
      operator delete(__p);
    }
  }
  __cxa_end_catch();
  if (!a15) {
    JUMPOUT(0x19E158E14);
  }
  JUMPOUT(0x19E158E10);
}

void sub_19E15905C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

uint64_t MRLEmbeddingMemoryModelAddEmbedding(uint64_t a1, CFArrayRef theArray, CFIndex a3, const __CFString *a4, uint64_t a5)
{
  if (CFArrayGetCount(theArray) <= a3 || *(void *)(a1 + 88) != a5) {
    return 0xFFFFFFFFLL;
  }
  ValueAtIndex = CFArrayGetValueAtIndex(theArray, a3);
  sub_19E31A250(a4, __p);
  uint64_t v11 = sub_19E250308(a1 + 16, (uint64_t)ValueAtIndex, (const void **)__p);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  return v11;
}

void sub_19E159178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

float *MRLEmbeddingMemoryModelGetOutputDistances(uint64_t a1, CFArrayRef theArray, CFIndex a3, const __CFString *a4, uint64_t a5)
{
  if (CFArrayGetCount(theArray) <= a3 || *(void *)(a1 + 88) != a5) {
    return 0;
  }
  ValueAtIndex = CFArrayGetValueAtIndex(theArray, a3);
  sub_19E31A250(a4, __p);
  uint64_t v11 = sub_19E2504D0(a1 + 16, (uint64_t)ValueAtIndex, (const void **)__p);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  return v11;
}

void sub_19E159248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E159264(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);

  operator delete(v1);
}

void sub_19E15928C(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);

  operator delete(v1);
}

void sub_19E1592B4(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);

  operator delete(v1);
}

void *sub_19E1592DC(void *a1, CFTypeRef cf)
{
  *a1 = cf;
  if (cf)
  {
    CFTypeID v3 = CFGetTypeID(cf);
    if (v3 != CFStringGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  return a1;
}

void sub_19E159364(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(a1);
}

CFDictionaryRef sub_19E159394(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  int v50 = 0;
  if (v1)
  {
    if (v1 >> 61) {
      sub_19E13D694();
    }
    int v50 = (char *)operator new(8 * v1);
    uint64_t v51 = v50;
    uint64_t v52 = &v50[8 * v1];
    std::string __p = (char *)operator new(8 * v1);
    int v48 = __p;
    uint64_t v49 = &__p[8 * v1];
    CFTypeID v3 = *(uint64_t **)a1;
    unint64_t v46 = v1;
    uint64_t v4 = *(void *)a1 + 16 * v1;
    while (1)
    {
      uint64_t v6 = *v3;
      uint64_t v7 = v51;
      if (v51 < v52)
      {
        *(void *)uint64_t v51 = v6;
        uint64_t v8 = (uint64_t)(v51 + 8);
        goto LABEL_19;
      }
      uint64_t v9 = (v51 - v50) >> 3;
      unint64_t v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 61) {
        sub_19E13D694();
      }
      uint64_t v11 = v52 - v50;
      if ((v52 - v50) >> 2 > v10) {
        unint64_t v10 = v11 >> 2;
      }
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v10;
      }
      if (v12)
      {
        if (v12 >> 61) {
          sub_19E13C418();
        }
        CFTypeID v13 = operator new(8 * v12);
        char v14 = &v13[8 * v9];
        *(void *)char v14 = v6;
        uint64_t v8 = (uint64_t)(v14 + 8);
        if (v51 == v50)
        {
LABEL_17:
          int v50 = v14;
          uint64_t v52 = &v13[8 * v12];
          if (!v51) {
            goto LABEL_19;
          }
LABEL_18:
          operator delete(v7);
          goto LABEL_19;
        }
      }
      else
      {
        CFTypeID v13 = 0;
        char v14 = (char *)(8 * v9);
        *(void *)(8 * v9) = v6;
        uint64_t v8 = 8 * v9 + 8;
        if (v51 == v50) {
          goto LABEL_17;
        }
      }
      unint64_t v23 = v51 - 8 - v50;
      if (v23 < 0x58) {
        goto LABEL_65;
      }
      if ((unint64_t)(v50 - v13) < 0x20) {
        goto LABEL_65;
      }
      uint64_t v24 = (v23 >> 3) + 1;
      uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v26 = &v51[-v25];
      v14 -= v25;
      CFBooleanRef v27 = &v13[8 * v9 - 16];
      int64_t v28 = v51 - 16;
      uint64_t v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v30 = *(_OWORD *)v28;
        *(v27 - 1) = *((_OWORD *)v28 - 1);
        _OWORD *v27 = v30;
        v27 -= 2;
        v28 -= 32;
        v29 -= 4;
      }
      while (v29);
      uint64_t v7 = v26;
      if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_65:
        do
        {
          uint64_t v31 = *((void *)v7 - 1);
          v7 -= 8;
          *((void *)v14 - 1) = v31;
          v14 -= 8;
        }
        while (v7 != v50);
      }
      uint64_t v7 = v50;
      int v50 = v14;
      uint64_t v52 = &v13[8 * v12];
      if (v7) {
        goto LABEL_18;
      }
LABEL_19:
      uint64_t v51 = (char *)v8;
      uint64_t v15 = v3[1];
      CFAllocatorRef v16 = v48;
      if (v48 >= v49)
      {
        uint64_t v17 = (v48 - __p) >> 3;
        unint64_t v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 61) {
          sub_19E13D694();
        }
        uint64_t v19 = v49 - __p;
        if ((v49 - __p) >> 2 > v18) {
          unint64_t v18 = v19 >> 2;
        }
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v20 = v18;
        }
        if (v20)
        {
          if (v20 >> 61) {
            sub_19E13C418();
          }
          size_t v21 = operator new(8 * v20);
          CFStringRef v22 = &v21[8 * v17];
          *(void *)CFStringRef v22 = v15;
          uint64_t v5 = (uint64_t)(v22 + 8);
          if (v48 == __p) {
            goto LABEL_29;
          }
LABEL_41:
          unint64_t v32 = v48 - 8 - __p;
          if (v32 < 0x58) {
            goto LABEL_66;
          }
          if ((unint64_t)(__p - v21) < 0x20) {
            goto LABEL_66;
          }
          uint64_t v33 = (v32 >> 3) + 1;
          uint64_t v34 = 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
          CFTypeID v35 = &v48[-v34];
          v22 -= v34;
          int v36 = &v21[8 * v17 - 16];
          uint64_t v37 = v48 - 16;
          uint64_t v38 = v33 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v39 = *(_OWORD *)v37;
            *(v36 - 1) = *((_OWORD *)v37 - 1);
            _OWORD *v36 = v39;
            v36 -= 2;
            v37 -= 32;
            v38 -= 4;
          }
          while (v38);
          CFAllocatorRef v16 = v35;
          if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_66:
            do
            {
              uint64_t v40 = *((void *)v16 - 1);
              v16 -= 8;
              *((void *)v22 - 1) = v40;
              v22 -= 8;
            }
            while (v16 != __p);
          }
          CFAllocatorRef v16 = __p;
          std::string __p = v22;
          uint64_t v49 = &v21[8 * v20];
          if (!v16) {
            goto LABEL_5;
          }
        }
        else
        {
          size_t v21 = 0;
          CFStringRef v22 = (char *)(8 * v17);
          *(void *)(8 * v17) = v15;
          uint64_t v5 = 8 * v17 + 8;
          if (v48 != __p) {
            goto LABEL_41;
          }
LABEL_29:
          std::string __p = v22;
          uint64_t v49 = &v21[8 * v20];
          if (!v48) {
            goto LABEL_5;
          }
        }
        operator delete(v16);
        goto LABEL_5;
      }
      *(void *)int v48 = v15;
      uint64_t v5 = (uint64_t)(v48 + 8);
LABEL_5:
      int v48 = (char *)v5;
      v3 += 2;
      if (v3 == (uint64_t *)v4)
      {
        uint64_t v41 = (const void **)v50;
        unint64_t v1 = v46;
        CFStringRef v42 = (const void **)__p;
        goto LABEL_51;
      }
    }
  }
  CFStringRef v42 = 0;
  uint64_t v41 = 0;
  std::string __p = 0;
LABEL_51:
  CFDictionaryRef v43 = CFDictionaryCreate(0, v41, v42, v1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v43)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (__p) {
    operator delete(__p);
  }
  if (v50) {
    operator delete(v50);
  }
  return v43;
}

void sub_19E15979C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  __cxa_free_exception(v15);
  if (__p)
  {
    operator delete(__p);
    uint64_t v17 = a14;
    if (!a14) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    uint64_t v17 = a14;
    if (!a14) {
      goto LABEL_3;
    }
  }
  operator delete(v17);
  _Unwind_Resume(a1);
}

const void **sub_19E15980C(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void *sub_19E159840(void *a1, CFTypeRef cf)
{
  *a1 = cf;
  if (cf)
  {
    CFTypeID v3 = CFGetTypeID(cf);
    if (v3 != CFDictionaryGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  return a1;
}

void sub_19E1598C8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_19E1598F8(uint64_t a1, CFDictionaryRef theDict)
{
  *(void *)a1 = theDict;
  *(_OWORD *)(a1 + 40) = 0u;
  CFTypeID v3 = (void **)(a1 + 40);
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 56) = 0;
  if (theDict)
  {
    unint64_t Count = CFDictionaryGetCount(theDict);
    unint64_t v5 = Count;
    uint64_t v6 = *(void *)(a1 + 16);
    unint64_t v7 = (*(void *)(a1 + 24) - v6) >> 3;
    if (Count <= v7)
    {
      if (Count < v7) {
        *(void *)(a1 + 24) = v6 + 8 * Count;
      }
    }
    else
    {
      sub_19E1599BC((void **)(a1 + 16), Count - v7);
    }
    uint64_t v8 = *(const void ***)(a1 + 40);
    unint64_t v9 = (uint64_t)(*(void *)(a1 + 48) - (void)v8) >> 3;
    if (v5 <= v9)
    {
      if (v5 < v9) {
        *(void *)(a1 + 48) = &v8[v5];
      }
    }
    else
    {
      sub_19E1599BC(v3, v5 - v9);
      uint64_t v8 = (const void **)*v3;
    }
    CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)a1, *(const void ***)(a1 + 16), v8);
  }
  return a1;
}

void sub_19E1599BC(void **a1, unint64_t a2)
{
  unint64_t v5 = (char *)a1[1];
  uint64_t v4 = a1[2];
  uint64_t v6 = v5;
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      uint64_t v6 = &v5[8 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    unint64_t v7 = (char *)*a1;
    uint64_t v8 = v5 - (unsigned char *)*a1;
    uint64_t v9 = v8 >> 3;
    unint64_t v10 = (v8 >> 3) + a2;
    if (v10 >> 61) {
      sub_19E13D694();
    }
    uint64_t v11 = v4 - v7;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 61) {
        sub_19E13C418();
      }
      CFTypeID v13 = operator new(8 * v12);
    }
    else
    {
      CFTypeID v13 = 0;
    }
    char v14 = &v13[8 * v9];
    size_t v15 = 8 * a2;
    CFAllocatorRef v16 = &v13[8 * v12];
    bzero(v14, v15);
    uint64_t v17 = &v14[v15];
    if (v5 != v7)
    {
      unint64_t v18 = v5 - v7 - 8;
      if (v18 < 0x58) {
        goto LABEL_32;
      }
      if ((unint64_t)(v5 - v13 - v8) < 0x20) {
        goto LABEL_32;
      }
      uint64_t v19 = (v18 >> 3) + 1;
      uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v6 = &v5[-v20];
      v14 -= v20;
      size_t v21 = &v13[8 * v9 - 16];
      CFStringRef v22 = v5 - 16;
      uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        _OWORD *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_32:
        do
        {
          uint64_t v25 = *((void *)v6 - 1);
          v6 -= 8;
          *((void *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
      uint64_t v6 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v16;
    if (v6)
    {
      operator delete(v6);
    }
  }
}

void *sub_19E159B70(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t v6 = sub_19E159C68(a1, a2, &v15, &v14, a3);
  if (*v6) {
    return (void *)*v6;
  }
  uint64_t v8 = v6;
  uint64_t v9 = operator new(0x38uLL);
  unint64_t v10 = v9 + 4;
  if (*(char *)(a4 + 23) < 0)
  {
    sub_19E13C2D0(v10, *(void **)a4, *(void *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)unint64_t v10 = *(_OWORD *)a4;
    v9[6] = *(void *)(a4 + 16);
  }
  uint64_t v11 = v15;
  *uint64_t v9 = 0;
  v9[1] = 0;
  v9[2] = v11;
  *uint64_t v8 = (uint64_t)v9;
  unint64_t v12 = (uint64_t *)**a1;
  CFTypeID v13 = v9;
  if (v12)
  {
    *a1 = v12;
    CFTypeID v13 = (uint64_t *)*v8;
  }
  sub_19E13C8A0(a1[1], v13);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v9;
}

void sub_19E159C54(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_19E159C68(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, const void **a5)
{
  uint64_t v8 = a1 + 1;
  if (a1 + 1 == (uint64_t **)a2) {
    goto LABEL_20;
  }
  int v10 = *((char *)a2 + 55);
  int v11 = *((char *)a5 + 23);
  if (v11 >= 0) {
    size_t v12 = *((unsigned __int8 *)a5 + 23);
  }
  else {
    size_t v12 = (size_t)a5[1];
  }
  if (v11 >= 0) {
    CFTypeID v13 = a5;
  }
  else {
    CFTypeID v13 = *a5;
  }
  if (v10 >= 0) {
    size_t v14 = *((unsigned __int8 *)a2 + 55);
  }
  else {
    size_t v14 = a2[5];
  }
  if (v10 >= 0) {
    size_t v15 = a2 + 4;
  }
  else {
    size_t v15 = (const void *)a2[4];
  }
  if (v14 >= v12) {
    size_t v16 = v12;
  }
  else {
    size_t v16 = v14;
  }
  int v17 = memcmp(v13, v15, v16);
  BOOL v18 = v12 < v14;
  if (v17) {
    BOOL v18 = v17 < 0;
  }
  if (v18)
  {
LABEL_20:
    uint64_t v19 = (uint64_t *)*a2;
    if (*a1 == a2)
    {
      size_t v21 = a2;
LABEL_53:
      if (v19)
      {
        *a3 = v21;
        return v21 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v19)
    {
      uint64_t v20 = (uint64_t *)*a2;
      do
      {
        size_t v21 = v20;
        uint64_t v20 = (uint64_t *)v20[1];
      }
      while (v20);
    }
    else
    {
      uint64_t v26 = a2;
      do
      {
        size_t v21 = (uint64_t *)v26[2];
        BOOL v27 = *v21 == (void)v26;
        uint64_t v26 = v21;
      }
      while (v27);
    }
    int v28 = *((char *)a5 + 23);
    int v29 = *((char *)v21 + 55);
    if (v29 >= 0) {
      size_t v30 = *((unsigned __int8 *)v21 + 55);
    }
    else {
      size_t v30 = v21[5];
    }
    if (v29 >= 0) {
      uint64_t v31 = v21 + 4;
    }
    else {
      uint64_t v31 = (const void *)v21[4];
    }
    if (v28 >= 0) {
      size_t v32 = *((unsigned __int8 *)a5 + 23);
    }
    else {
      size_t v32 = (size_t)a5[1];
    }
    if (v28 >= 0) {
      uint64_t v33 = a5;
    }
    else {
      uint64_t v33 = *a5;
    }
    if (v32 >= v30) {
      size_t v34 = v30;
    }
    else {
      size_t v34 = v32;
    }
    int v35 = memcmp(v31, v33, v34);
    BOOL v36 = v30 < v32;
    if (v35) {
      BOOL v36 = v35 < 0;
    }
    if (v36) {
      goto LABEL_53;
    }
    uint64_t v37 = *v8;
    if (*v8)
    {
      do
      {
        while (1)
        {
          uint64_t v38 = (uint64_t **)v37;
          uint64_t v41 = (const void *)v37[4];
          long long v39 = v37 + 4;
          uint64_t v40 = v41;
          int v42 = *((char *)v39 + 23);
          if (v42 >= 0) {
            size_t v43 = *((unsigned __int8 *)v39 + 23);
          }
          else {
            size_t v43 = v39[1];
          }
          if (v42 >= 0) {
            int v44 = v39;
          }
          else {
            int v44 = v40;
          }
          if (v43 >= v32) {
            size_t v45 = v32;
          }
          else {
            size_t v45 = v43;
          }
          int v46 = memcmp(v33, v44, v45);
          BOOL v47 = v32 < v43;
          if (v46) {
            BOOL v47 = v46 < 0;
          }
          if (!v47) {
            break;
          }
          uint64_t v37 = *v38;
          uint64_t v8 = v38;
          if (!*v38) {
            goto LABEL_74;
          }
        }
        int v48 = memcmp(v44, v33, v45);
        BOOL v49 = v43 < v32;
        if (v48) {
          BOOL v49 = v48 < 0;
        }
        if (!v49) {
          break;
        }
        uint64_t v8 = v38 + 1;
        uint64_t v37 = v38[1];
      }
      while (v37);
    }
    else
    {
      uint64_t v38 = v8;
    }
LABEL_74:
    *a3 = (uint64_t *)v38;
    return (uint64_t *)v8;
  }
  int v22 = memcmp(v15, v13, v16);
  BOOL v23 = v14 < v12;
  if (v22) {
    BOOL v23 = v22 < 0;
  }
  if (!v23)
  {
    *a3 = a2;
    *a4 = a2;
    return (uint64_t *)a4;
  }
  uint64_t v24 = a2[1];
  if (v24)
  {
    uint64_t v25 = (uint64_t *)a2[1];
    do
    {
      a4 = (uint64_t **)v25;
      uint64_t v25 = (uint64_t *)*v25;
    }
    while (v25);
  }
  else
  {
    int v50 = a2;
    do
    {
      a4 = (uint64_t **)v50[2];
      BOOL v27 = *a4 == v50;
      int v50 = (uint64_t *)a4;
    }
    while (!v27);
  }
  if (a4 != v8)
  {
    int v51 = *((char *)a4 + 55);
    if (v51 >= 0) {
      size_t v52 = *((unsigned __int8 *)a4 + 55);
    }
    else {
      size_t v52 = (size_t)a4[5];
    }
    if (v51 >= 0) {
      uint64_t v53 = (uint64_t *)(a4 + 4);
    }
    else {
      uint64_t v53 = a4[4];
    }
    if (v52 >= v12) {
      size_t v54 = v12;
    }
    else {
      size_t v54 = v52;
    }
    int v55 = memcmp(v13, v53, v54);
    BOOL v56 = v12 < v52;
    if (v55) {
      BOOL v56 = v55 < 0;
    }
    if (!v56)
    {
      uint64_t v57 = *v8;
      if (*v8)
      {
        BOOL v58 = a3;
        do
        {
          while (1)
          {
            int v59 = (uint64_t **)v57;
            unint64_t v62 = (const void *)v57[4];
            size_t v60 = v57 + 4;
            uint64_t v61 = v62;
            int v63 = *((char *)v60 + 23);
            if (v63 >= 0) {
              size_t v64 = *((unsigned __int8 *)v60 + 23);
            }
            else {
              size_t v64 = v60[1];
            }
            if (v63 >= 0) {
              size_t v65 = v60;
            }
            else {
              size_t v65 = v61;
            }
            if (v64 >= v12) {
              size_t v66 = v12;
            }
            else {
              size_t v66 = v64;
            }
            int v67 = memcmp(v13, v65, v66);
            BOOL v68 = v12 < v64;
            if (v67) {
              BOOL v68 = v67 < 0;
            }
            if (!v68) {
              break;
            }
            uint64_t v57 = *v59;
            uint64_t v8 = v59;
            if (!*v59) {
              goto LABEL_119;
            }
          }
          int v69 = memcmp(v65, v13, v66);
          BOOL v70 = v64 < v12;
          if (v69) {
            BOOL v70 = v69 < 0;
          }
          if (!v70) {
            break;
          }
          uint64_t v8 = v59 + 1;
          uint64_t v57 = v59[1];
        }
        while (v57);
      }
      else
      {
        int v59 = v8;
        BOOL v58 = a3;
      }
LABEL_119:
      *BOOL v58 = (uint64_t *)v59;
      return (uint64_t *)v8;
    }
  }
  if (v24)
  {
    *a3 = (uint64_t *)a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return (uint64_t *)a4;
}

void sub_19E15A064(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_19E15A064(a1, *(void *)a2);
    sub_19E15A064(a1, *((void *)a2 + 1));
    if (a2[55] < 0)
    {
      operator delete(*((void **)a2 + 4));
      uint64_t v4 = a2;
    }
    else
    {
      uint64_t v4 = a2;
    }
    operator delete(v4);
  }
}

BOOL sub_19E15A0E8(uint64_t a1, const void **a2, uint64_t a3)
{
  sub_19E253538(a1, a2, (uint64_t)&v11);
  if (*(void *)(a3 + 8) == 1)
  {
    if (*(void *)a3 == (void)v11
      && *(void *)(a3 + 16) == *(void *)v12
      && *(_OWORD *)(a3 + 24) == *(_OWORD *)&v12[8])
    {
      ++*((void *)&v11 + 1);
      uint64_t v10 = *(void *)&v12[16];
      v9[0] = v11;
      v9[1] = *(_OWORD *)v12;
      sub_19E253744(a1, (long long *)a2, (uint64_t)v9);
      return 1;
    }
    else
    {
      uint64_t v8 = sub_19E26EDD8();
      BOOL result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
      if (result)
      {
        sub_19E32EAA4(v8);
        return 0;
      }
    }
  }
  else
  {
    unint64_t v7 = sub_19E26EDD8();
    BOOL result = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_19E32EAE8(v7);
      return 0;
    }
  }
  return result;
}

uint64_t **sub_19E15A210(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  unint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *((char *)a2 + 23);
    if (v8 >= 0) {
      size_t v9 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v9 = (size_t)a2[1];
    }
    if (v8 >= 0) {
      uint64_t v10 = a2;
    }
    else {
      uint64_t v10 = *a2;
    }
    while (1)
    {
      while (1)
      {
        long long v11 = (uint64_t **)v6;
        size_t v14 = (const void *)v6[4];
        size_t v12 = v6 + 4;
        CFTypeID v13 = v14;
        int v15 = *((char *)v12 + 23);
        if (v15 >= 0) {
          size_t v16 = *((unsigned __int8 *)v12 + 23);
        }
        else {
          size_t v16 = v12[1];
        }
        if (v15 >= 0) {
          int v17 = v12;
        }
        else {
          int v17 = v13;
        }
        if (v16 >= v9) {
          size_t v18 = v9;
        }
        else {
          size_t v18 = v16;
        }
        int v19 = memcmp(v10, v17, v18);
        BOOL v20 = v9 < v16;
        if (v19) {
          BOOL v20 = v19 < 0;
        }
        if (!v20) {
          break;
        }
        uint64_t v6 = *v11;
        unint64_t v7 = v11;
        if (!*v11) {
          goto LABEL_27;
        }
      }
      int v21 = memcmp(v17, v10, v18);
      BOOL v22 = v16 < v9;
      if (v21) {
        BOOL v22 = v21 < 0;
      }
      if (!v22) {
        return v11;
      }
      uint64_t v6 = v11[1];
      if (!v6)
      {
        unint64_t v7 = v11 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    long long v11 = a1 + 1;
LABEL_27:
    BOOL v23 = operator new(0x50uLL);
    uint64_t v24 = v23 + 4;
    uint64_t v25 = *a4;
    if (*((char *)*a4 + 23) < 0)
    {
      sub_19E13C2D0(v24, *(void **)v25, *((void *)v25 + 1));
    }
    else
    {
      long long v26 = *v25;
      v23[6] = *((void *)v25 + 2);
      *(_OWORD *)uint64_t v24 = v26;
    }
    v23[7] = 0;
    v23[8] = 0;
    v23[9] = 0;
    *BOOL v23 = 0;
    v23[1] = 0;
    v23[2] = v11;
    NSObject *v7 = v23;
    BOOL v27 = (uint64_t *)**a1;
    int v28 = v23;
    if (v27)
    {
      *a1 = v27;
      int v28 = *v7;
    }
    sub_19E13C8A0(a1[1], v28);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return (uint64_t **)v23;
}

void sub_19E15A3A0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *sub_19E15A3B4@<X0>(std::runtime_error *a1@<X8>)
{
  return std::runtime_error::runtime_error(a1, "Could not convert");
}

unint64_t sub_19E15A3C4@<X0>(const __CFString *a1@<X0>, void *a2@<X8>)
{
  CStringPtr = CFStringGetCStringPtr(a1, 0x8000100u);
  if (CStringPtr)
  {
    unint64_t v5 = CStringPtr;
    unint64_t result = strlen(CStringPtr);
    if (result <= 0x7FFFFFFFFFFFFFF7)
    {
      size_t v7 = result;
      if (result >= 0x17)
      {
        uint64_t v11 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((result | 7) != 0x17) {
          uint64_t v11 = result | 7;
        }
        uint64_t v12 = v11 + 1;
        CFTypeID v13 = operator new(v11 + 1);
        a2[1] = v7;
        a2[2] = v12 | 0x8000000000000000;
        *a2 = v13;
        a2 = v13;
      }
      else
      {
        *((unsigned char *)a2 + 23) = result;
        if (!result) {
          goto LABEL_14;
        }
      }
      unint64_t result = (unint64_t)memmove(a2, v5, v7);
LABEL_14:
      *((unsigned char *)a2 + v7) = 0;
      return result;
    }
LABEL_23:
    sub_19E13C370();
  }
  CFIndex Length = CFStringGetLength(a1);
  CFIndex maxBufLen = 0;
  v18.location = 0;
  v18.length = Length;
  CFStringGetBytes(a1, v18, 0x8000100u, 0, 0, 0, 0, &maxBufLen);
  CFIndex v9 = maxBufLen;
  if ((unint64_t)maxBufLen > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_23;
  }
  if ((unint64_t)maxBufLen >= 0x17)
  {
    CFIndex v14 = (maxBufLen & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((maxBufLen | 7) != 0x17) {
      CFIndex v14 = maxBufLen | 7;
    }
    CFIndex v15 = v14 + 1;
    uint64_t v10 = operator new(v14 + 1);
    a2[1] = v9;
    a2[2] = v15 | 0x8000000000000000;
    *a2 = v10;
  }
  else
  {
    *((unsigned char *)a2 + 23) = maxBufLen;
    uint64_t v10 = a2;
    if (!v9) {
      goto LABEL_19;
    }
  }
  bzero(v10, v9);
LABEL_19:
  *((unsigned char *)v10 + v9) = 0;
  if (*((char *)a2 + 23) >= 0) {
    size_t v16 = (UInt8 *)a2;
  }
  else {
    size_t v16 = (UInt8 *)*a2;
  }
  v19.location = 0;
  v19.length = Length;
  return CFStringGetBytes(a1, v19, 0x8000100u, 0, 0, v16, maxBufLen, &maxBufLen);
}

void sub_19E15A588(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_19E15A5A4(unint64_t *a1, void *a2, char *__src, char *a4, uint64_t a5)
{
  unint64_t v6 = *a1;
  uint64_t v7 = (uint64_t)a2 - *a1;
  int v8 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL));
  if (a5 < 1) {
    return v8;
  }
  unint64_t v13 = a1[1];
  unint64_t v12 = a1[2];
  if (a5 > (uint64_t)(v12 - v13) >> 2)
  {
    unint64_t v14 = a5 + ((uint64_t)(v13 - v6) >> 2);
    if (v14 >> 62) {
      sub_19E13D694();
    }
    uint64_t v15 = v12 - v6;
    if (v15 >> 1 > v14) {
      unint64_t v14 = v15 >> 1;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16)
    {
      if (v16 >> 62) {
        sub_19E13C418();
      }
      int v17 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL));
      CFRange v18 = (char *)operator new(4 * v16);
    }
    else
    {
      int v17 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL));
      CFRange v18 = 0;
    }
    size_t v40 = 4 * a5;
    uint64_t v59 = 4 * a5;
    uint64_t v41 = &v18[4 * (v7 >> 2)];
    int v42 = v18;
    memcpy(v41, __src, v40);
    size_t v43 = v41;
    if ((void *)v6 != a2)
    {
      int v44 = v17;
      size_t v43 = v41;
      if ((unint64_t)(v7 - 4) < 0x3C) {
        goto LABEL_51;
      }
      int v44 = v17;
      size_t v43 = v41;
      if ((v7 & 0xFFFFFFFFFFFFFFFCLL) + v6 - (unint64_t)&v42[v7 & 0xFFFFFFFFFFFFFFFCLL] < 0x20) {
        goto LABEL_51;
      }
      unint64_t v45 = ((unint64_t)(v7 - 4) >> 2) + 1;
      uint64_t v46 = 4 * (v45 & 0x7FFFFFFFFFFFFFF8);
      int v44 = &v17[-v46];
      size_t v43 = &v41[-v46];
      uint64_t v47 = 4 * (v7 >> 2) - 16;
      int v48 = &v42[v47];
      BOOL v49 = (long long *)(v6 + v47);
      uint64_t v50 = v45 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v51 = *v49;
        *((_OWORD *)v48 - 1) = *(v49 - 1);
        *(_OWORD *)int v48 = v51;
        v48 -= 32;
        v49 -= 2;
        v50 -= 8;
      }
      while (v50);
      if (v45 != (v45 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_51:
        do
        {
          int v52 = *((_DWORD *)v44 - 1);
          v44 -= 4;
          *((_DWORD *)v43 - 1) = v52;
          v43 -= 4;
        }
        while (v44 != (char *)v6);
      }
    }
    uint64_t v53 = &v42[4 * v16];
    size_t v54 = v13 - (void)v17;
    if (v54) {
      memmove(&v41[v59], v17, v54);
    }
    *a1 = (unint64_t)v43;
    a1[1] = (unint64_t)&v41[v59 + v54];
    a1[2] = (unint64_t)v53;
    if (v6) {
      operator delete((void *)v6);
    }
    return v41;
  }
  uint64_t v19 = v13 - (void)v8;
  uint64_t v20 = (uint64_t)(v13 - (void)v8) >> 2;
  if (v20 >= a5)
  {
    int v21 = &__src[4 * a5];
    unint64_t v23 = a1[1];
  }
  else
  {
    int v21 = &__src[4 * v20];
    int64_t v22 = a4 - v21;
    if (a4 != v21)
    {
      unint64_t v58 = *a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL);
      memmove((void *)a1[1], &__src[4 * v20], a4 - v21);
      int v8 = (char *)v58;
    }
    unint64_t v23 = v13 + v22;
    a1[1] = v13 + v22;
    if (v19 < 1) {
      return v8;
    }
  }
  uint64_t v24 = &v8[4 * a5];
  size_t v25 = v23 - (void)v24;
  uint64_t v26 = (uint64_t)(v23 - (void)v24) >> 2;
  BOOL v27 = (int *)(v23 - 4 * a5);
  int v28 = (_DWORD *)v23;
  if ((unint64_t)v27 < v13)
  {
    unint64_t v29 = (v7 & 0xFFFFFFFFFFFFFFFCLL) + v25;
    size_t v30 = (char *)(v29 + v6);
    unint64_t v31 = v29 + v6 + 4;
    if (v13 > v31) {
      unint64_t v31 = v13;
    }
    unint64_t v32 = v31 + ~v6 - v29;
    if (v32 < 0x2C)
    {
      int v28 = (_DWORD *)v23;
    }
    else
    {
      unint64_t v33 = v23 - (void)v30;
      int v28 = (_DWORD *)v23;
      if (v33 >= 0x20)
      {
        uint64_t v34 = (v32 >> 2) + 1;
        uint64_t v35 = 4 * (v34 & 0x7FFFFFFFFFFFFFF8);
        BOOL v27 = (int *)((char *)v27 + v35);
        int v28 = (_DWORD *)(v23 + v35);
        BOOL v36 = (_OWORD *)(v23 + 16);
        uint64_t v37 = (long long *)(4 * v26 + 4 * (v7 >> 2) + v6 + 16);
        uint64_t v38 = v34 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v39 = *v37;
          *(v36 - 1) = *(v37 - 1);
          _OWORD *v36 = v39;
          v36 += 2;
          v37 += 2;
          v38 -= 8;
        }
        while (v38);
        if (v34 == (v34 & 0x7FFFFFFFFFFFFFF8)) {
          goto LABEL_41;
        }
      }
    }
    do
    {
      int v55 = *v27++;
      *v28++ = v55;
    }
    while ((unint64_t)v27 < v13);
  }
LABEL_41:
  a1[1] = (unint64_t)v28;
  if ((char *)v23 != v24)
  {
    BOOL v56 = v8;
    memmove((void *)(v23 - 4 * v26), v8, v25);
    int v8 = v56;
  }
  if (v21 != __src)
  {
    uint64_t v41 = v8;
    memmove(v8, __src, v21 - __src);
    return v41;
  }
  return v8;
}

uint64_t sub_19E15A8D4()
{
  qword_1E9457E68 = 0;
  unk_1E9457E70 = "MontrealNeuralNetwork";
  qword_1E9457E78 = 0;
  unk_1E9457E80 = 0;
  qword_1E9457E88 = (uint64_t)sub_19E15A92C;
  unk_1E9457E90 = 0u;
  unk_1E9457EA0 = 0u;
  uint64_t result = _CFRuntimeRegisterClass();
  qword_1E9457EC8 = result;
  return result;
}

uint64_t sub_19E15A92C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 16))();
}

char *sub_19E15A950(void **a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_19E13D694();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      sub_19E13C418();
    }
    uint64_t v7 = (char *)operator new(24 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  int v8 = &v7[24 * v3];
  CFIndex v9 = &v7[24 * v6];
  *(_OWORD *)int v8 = *(_OWORD *)a2;
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v10 = v8 + 24;
  uint64_t v11 = (char *)*a1;
  unint64_t v12 = (char *)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    if (!v12) {
      return v10;
    }
    goto LABEL_20;
  }
  do
  {
    long long v13 = *(_OWORD *)(v12 - 24);
    *((void *)v8 - 1) = *((void *)v12 - 1);
    *(_OWORD *)(v8 - 24) = v13;
    v8 -= 24;
    *((void *)v12 - 2) = 0;
    *((void *)v12 - 1) = 0;
    *((void *)v12 - 3) = 0;
    v12 -= 24;
  }
  while (v12 != v11);
  unint64_t v14 = (char *)*a1;
  unint64_t v12 = (char *)a1[1];
  *a1 = v8;
  a1[1] = v10;
  a1[2] = v9;
  if (v12 != v14)
  {
    do
    {
      if (*(v12 - 1) < 0) {
        operator delete(*((void **)v12 - 3));
      }
      v12 -= 24;
    }
    while (v12 != v14);
    unint64_t v12 = v14;
  }
  if (v12) {
LABEL_20:
  }
    operator delete(v12);
  return v10;
}

char *sub_19E15AABC(void **a1, const char **a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_19E13D694();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      sub_19E13C418();
    }
    uint64_t v7 = (char *)operator new(24 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  int v8 = &v7[24 * v3];
  int64_t v22 = v8;
  unint64_t v23 = v8;
  uint64_t v24 = &v7[24 * v6];
  CFIndex v9 = *a2;
  size_t v10 = strlen(*a2);
  if (v10 >= 0x7FFFFFFFFFFFFFF8) {
    sub_19E13C370();
  }
  size_t v11 = v10;
  if (v10 >= 0x17)
  {
    uint64_t v16 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17) {
      uint64_t v16 = v10 | 7;
    }
    uint64_t v17 = v16 + 1;
    CFRange v18 = (char *)operator new(v16 + 1);
    *((void *)v8 + 1) = v11;
    *((void *)v8 + 2) = v17 | 0x8000000000000000;
    *(void *)int v8 = v18;
    int v8 = v18;
  }
  else
  {
    v8[23] = v10;
    if (!v10)
    {
      *int v8 = 0;
      unint64_t v12 = v8;
      long long v13 = v8 + 24;
      unint64_t v14 = (char *)*a1;
      uint64_t v15 = (char *)a1[1];
      if (v15 == *a1) {
        goto LABEL_23;
      }
      goto LABEL_20;
    }
  }
  memmove(v8, v9, v11);
  v8[v11] = 0;
  unint64_t v12 = v22;
  long long v13 = v23 + 24;
  unint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == *a1)
  {
LABEL_23:
    *a1 = v12;
    a1[1] = v13;
    a1[2] = v24;
    goto LABEL_28;
  }
  do
  {
LABEL_20:
    long long v19 = *(_OWORD *)(v15 - 24);
    *((void *)v12 - 1) = *((void *)v15 - 1);
    *(_OWORD *)(v12 - 24) = v19;
    v12 -= 24;
    *((void *)v15 - 2) = 0;
    *((void *)v15 - 1) = 0;
    *((void *)v15 - 3) = 0;
    v15 -= 24;
  }
  while (v15 != v14);
  uint64_t v20 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  *a1 = v12;
  a1[1] = v13;
  a1[2] = v24;
  if (v15 != v20)
  {
    do
    {
      if (*(v15 - 1) < 0) {
        operator delete(*((void **)v15 - 3));
      }
      v15 -= 24;
    }
    while (v15 != v20);
    uint64_t v15 = v20;
  }
LABEL_28:
  if (v15) {
    operator delete(v15);
  }
  return v13;
}

void sub_19E15ACDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E13D884((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E15ACF0()
{
  qword_1E9457DF8 = 0;
  unk_1E9457E00 = "MontrealNeuralNetworkTensor";
  qword_1E9457E08 = 0;
  unk_1E9457E10 = 0;
  qword_1E9457E18 = (uint64_t)sub_19E15AD48;
  unk_1E9457E20 = 0u;
  unk_1E9457E30 = 0u;
  uint64_t result = _CFRuntimeRegisterClass();
  qword_1E9457E58 = result;
  return result;
}

void sub_19E15AD48(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(void *)(a1 + 24) = v2;
    operator delete(v2);
  }
}

void *sub_19E15AD60(void *a1, CFTypeRef *a2, int *a3)
{
  CFTypeRef v5 = *a2;
  if (*a2) {
    CFRetain(*a2);
  }
  *a1 = v5;
  int valuePtr = *a3;
  CFNumberRef v6 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  a1[1] = v6;
  if (!v6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return a1;
}

void sub_19E15AE08(_Unwind_Exception *a1)
{
  unint64_t v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  sub_19E15980C((const void **)v1);
  _Unwind_Resume(a1);
}

void *sub_19E15AE48(void *a1, CFTypeRef *a2, uint64_t *a3)
{
  CFTypeRef v5 = *a2;
  if (*a2) {
    CFRetain(*a2);
  }
  *a1 = v5;
  uint64_t valuePtr = *a3;
  CFNumberRef v6 = CFNumberCreate(0, kCFNumberLongType, &valuePtr);
  a1[1] = v6;
  if (!v6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return a1;
}

void sub_19E15AEF0(_Unwind_Exception *a1)
{
  unint64_t v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  sub_19E15980C((const void **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19E15AF30(const __CFNumber *a1)
{
  switch(CFNumberGetType(a1))
  {
    case kCFNumberSInt8Type:
      LOBYTE(valuePtr) = 0;
      CFNumberRef v2 = a1;
      CFNumberType v3 = kCFNumberSInt8Type;
      goto LABEL_10;
    case kCFNumberSInt16Type:
      LOWORD(valuePtr) = 0;
      CFNumberRef v7 = a1;
      CFNumberType v8 = kCFNumberSInt16Type;
      goto LABEL_12;
    case kCFNumberSInt32Type:
      LODWORD(valuePtr) = 0;
      CFNumberRef v9 = a1;
      CFNumberType v10 = kCFNumberSInt32Type;
      goto LABEL_14;
    case kCFNumberSInt64Type:
      double valuePtr = 0.0;
      CFNumberRef v11 = a1;
      CFNumberType v12 = kCFNumberSInt64Type;
      goto LABEL_22;
    case kCFNumberFloat32Type:
      LODWORD(valuePtr) = 0;
      CFNumberRef v13 = a1;
      CFNumberType v14 = kCFNumberFloat32Type;
      goto LABEL_18;
    case kCFNumberFloat64Type:
      double valuePtr = 0.0;
      CFNumberRef v15 = a1;
      CFNumberType v16 = kCFNumberFloat64Type;
      goto LABEL_24;
    case kCFNumberCharType:
      LOBYTE(valuePtr) = 0;
      CFNumberRef v2 = a1;
      CFNumberType v3 = kCFNumberCharType;
LABEL_10:
      int Value = CFNumberGetValue(v2, v3, &valuePtr);
      v18.i8[0] = LOBYTE(valuePtr);
      float v19 = (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v18)).i32[0];
      goto LABEL_25;
    case kCFNumberShortType:
      LOWORD(valuePtr) = 0;
      CFNumberRef v7 = a1;
      CFNumberType v8 = kCFNumberShortType;
LABEL_12:
      int Value = CFNumberGetValue(v7, v8, &valuePtr);
      v20.i16[0] = LOWORD(valuePtr);
      float v19 = (float)vmovl_s16(v20).i32[0];
      goto LABEL_25;
    case kCFNumberIntType:
      LODWORD(valuePtr) = 0;
      CFNumberRef v9 = a1;
      CFNumberType v10 = kCFNumberIntType;
LABEL_14:
      int Value = CFNumberGetValue(v9, v10, &valuePtr);
      float v19 = (float)SLODWORD(valuePtr);
      goto LABEL_25;
    case kCFNumberLongType:
      double valuePtr = 0.0;
      CFNumberRef v11 = a1;
      CFNumberType v12 = kCFNumberLongType;
      goto LABEL_22;
    case kCFNumberLongLongType:
      double valuePtr = 0.0;
      CFNumberRef v11 = a1;
      CFNumberType v12 = kCFNumberLongLongType;
      goto LABEL_22;
    case kCFNumberFloatType:
      LODWORD(valuePtr) = 0;
      CFNumberRef v13 = a1;
      CFNumberType v14 = kCFNumberFloatType;
LABEL_18:
      int Value = CFNumberGetValue(v13, v14, &valuePtr);
      uint64_t v21 = LODWORD(valuePtr);
      goto LABEL_26;
    case kCFNumberDoubleType:
      double valuePtr = 0.0;
      CFNumberRef v15 = a1;
      CFNumberType v16 = kCFNumberDoubleType;
      goto LABEL_24;
    case kCFNumberCFIndexType:
      double valuePtr = 0.0;
      CFNumberRef v11 = a1;
      CFNumberType v12 = kCFNumberCFIndexType;
      goto LABEL_22;
    case kCFNumberNSIntegerType:
      double valuePtr = 0.0;
      CFNumberRef v11 = a1;
      CFNumberType v12 = kCFNumberNSIntegerType;
LABEL_22:
      int Value = CFNumberGetValue(v11, v12, &valuePtr);
      float v19 = (float)*(uint64_t *)&valuePtr;
      goto LABEL_25;
    case kCFNumberCGFloatType:
      double valuePtr = 0.0;
      CFNumberRef v15 = a1;
      CFNumberType v16 = kCFNumberCGFloatType;
LABEL_24:
      int Value = CFNumberGetValue(v15, v16, &valuePtr);
      float v19 = valuePtr;
LABEL_25:
      uint64_t v21 = LODWORD(v19);
LABEL_26:
      uint64_t v6 = v21 | 0x100000000;
      if (!Value) {
        uint64_t v6 = 0;
      }
      int v4 = v6 & 0xFFFFFF00;
      uint64_t v5 = v6 & 0x100000000;
      break;
    default:
      int v4 = 0;
      uint64_t v5 = 0;
      LOBYTE(v6) = 0;
      break;
  }
  return v5 | v4 & 0xFFFFFF00 | v6;
}

CFDictionaryRef sub_19E15B18C(void *a1)
{
  std::string __p = 0;
  float v19 = 0;
  unint64_t v20 = 0;
  sub_19E15B2F8((uint64_t)&__p, a1[2]);
  int v4 = (void *)*a1;
  CFNumberRef v2 = a1 + 1;
  CFNumberType v3 = v4;
  if (v4 != v2)
  {
    uint64_t v5 = v19;
    do
    {
      uint64_t v6 = (const UInt8 *)(v3 + 4);
      CFNumberRef v7 = (uint64_t **)(v3 + 7);
      if ((unint64_t)v5 >= v20)
      {
        uint64_t v5 = sub_19E15BA70((CFStringRef **)&__p, v6, v7);
        float v19 = v5;
        CFNumberType v8 = (void *)v3[1];
        if (v8)
        {
          do
          {
LABEL_8:
            CFNumberRef v9 = v8;
            CFNumberType v8 = (void *)*v8;
          }
          while (v8);
          goto LABEL_3;
        }
      }
      else
      {
        sub_19E15BC88(v5, v6, v7);
        v5 += 2;
        float v19 = v5;
        CFNumberType v8 = (void *)v3[1];
        if (v8) {
          goto LABEL_8;
        }
      }
      do
      {
        CFNumberRef v9 = (void *)v3[2];
        BOOL v10 = *v9 == (void)v3;
        CFNumberType v3 = v9;
      }
      while (!v10);
LABEL_3:
      CFNumberType v3 = v9;
    }
    while (v9 != v2);
  }
  CFDictionaryRef v11 = sub_19E15B498((char **)&__p);
  CFNumberType v12 = (CFStringRef *)__p;
  if (__p)
  {
    CFNumberRef v13 = v19;
    CFNumberType v14 = __p;
    if (v19 != __p)
    {
      do
      {
        CFNumberRef v15 = *(v13 - 1);
        if (v15) {
          CFRelease(v15);
        }
        CFNumberType v16 = *(v13 - 2);
        if (v16) {
          CFRelease(v16);
        }
        v13 -= 2;
      }
      while (v13 != v12);
      CFNumberType v14 = __p;
    }
    float v19 = v12;
    operator delete(v14);
  }
  return v11;
}

void sub_19E15B2C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E15B974((void **)va);
  _Unwind_Resume(a1);
}

void sub_19E15B2E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E15B974((void **)va);
  _Unwind_Resume(a1);
}

void sub_19E15B2F8(uint64_t a1, unint64_t a2)
{
  CFNumberRef v2 = *(char **)a1;
  if (a2 <= (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) {
    return;
  }
  if (a2 >> 60) {
    sub_19E13D694();
  }
  int v4 = *(char **)(a1 + 8);
  uint64_t v5 = 16 * a2;
  uint64_t v6 = (char *)operator new(16 * a2);
  CFNumberRef v7 = &v6[v5];
  int64_t v8 = v4 - v2;
  unint64_t v9 = (unint64_t)&v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF0];
  if (v4 == v2)
  {
    *(void *)a1 = v9;
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = v7;
    if (!v2) {
      return;
    }
    goto LABEL_19;
  }
  unint64_t v10 = v8 - 16;
  if ((unint64_t)(v8 - 16) < 0x90)
  {
    CFDictionaryRef v11 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF0];
    do
    {
LABEL_16:
      uint64_t v19 = *((void *)v4 - 2);
      v4 -= 16;
      *((void *)v11 - 2) = v19;
      v11 -= 16;
      *(void *)int v4 = 0;
      *((void *)v11 + 1) = *((void *)v4 + 1);
      *((void *)v4 + 1) = 0;
    }
    while (v4 != v2);
    goto LABEL_17;
  }
  BOOL v12 = &v6[(v8 & 0xFFFFFFFFFFFFFFF0) - (v10 & 0xFFFFFFFFFFFFFFF0) - 16] >= v4
     || (unint64_t)&v4[-(v10 & 0xFFFFFFFFFFFFFFF0) - 16] >= v9;
  CFDictionaryRef v11 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF0];
  if (!v12) {
    goto LABEL_16;
  }
  uint64_t v13 = (v10 >> 4) + 1;
  uint64_t v14 = 16 * (v13 & 0x1FFFFFFFFFFFFFFELL);
  CFDictionaryRef v11 = (char *)(v9 - v14);
  CFNumberRef v15 = &v4[-v14];
  CFNumberType v16 = (const double *)(v4 - 32);
  uint64_t v17 = (double *)(v9 - 32);
  uint64_t v18 = v13 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    float64x2x2_t v24 = vld2q_f64(v16);
    vst2q_f64(v17, v24);
    *(_OWORD *)CFNumberType v16 = 0uLL;
    *((_OWORD *)v16 + 1) = 0uLL;
    v16 -= 4;
    v17 -= 4;
    v18 -= 2;
  }
  while (v18);
  int v4 = v15;
  if (v13 != (v13 & 0x1FFFFFFFFFFFFFFELL)) {
    goto LABEL_16;
  }
LABEL_17:
  unint64_t v20 = *(char **)a1;
  CFNumberRef v2 = *(char **)(a1 + 8);
  *(void *)a1 = v11;
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + 16) = v7;
  if (v2 == v20)
  {
    if (!v2) {
      return;
    }
    goto LABEL_19;
  }
  do
  {
    uint64_t v21 = (const void *)*((void *)v2 - 1);
    if (v21) {
      CFRelease(v21);
    }
    int64_t v22 = (const void *)*((void *)v2 - 2);
    if (v22) {
      CFRelease(v22);
    }
    v2 -= 16;
  }
  while (v2 != v20);
  CFNumberRef v2 = v20;
  if (v20)
  {
LABEL_19:
    operator delete(v2);
  }
}

CFDictionaryRef sub_19E15B498(char **a1)
{
  CFNumberRef v2 = *a1;
  uint64_t v1 = a1[1];
  int v52 = 0;
  uint64_t v3 = v1 - *a1;
  CFIndex v4 = v3 >> 4;
  if (v1 == *a1)
  {
    uint64_t v6 = 0;
    CFNumberRef v7 = 0;
    std::string __p = 0;
    goto LABEL_55;
  }
  if (v3 < 0) {
    sub_19E13D694();
  }
  size_t v5 = (unint64_t)v3 >> 1;
  uint64_t v6 = (const void **)operator new((unint64_t)v3 >> 1);
  int v52 = v6;
  uint64_t v53 = v6;
  size_t v54 = &v6[v4];
  CFNumberRef v7 = (const void **)operator new(v5);
  std::string __p = v7;
  uint64_t v50 = v7;
  long long v51 = &v7[v4];
  if (v1 != v2)
  {
    uint64_t v48 = (v1 - v2) >> 4;
    while (1)
    {
      unint64_t v9 = *(const void **)v2;
      if (!*(void *)v2 || !*((void *)v2 + 1))
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      unint64_t v10 = v53;
      if (v53 < v54)
      {
        *uint64_t v53 = v9;
        uint64_t v11 = (uint64_t)(v53 + 1);
        goto LABEL_24;
      }
      uint64_t v12 = v53 - v52;
      unint64_t v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 61) {
        sub_19E13D694();
      }
      uint64_t v14 = (char *)v54 - (char *)v52;
      if (((char *)v54 - (char *)v52) >> 2 > v13) {
        unint64_t v13 = v14 >> 2;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v13;
      }
      if (v15)
      {
        if (v15 >> 61) {
          sub_19E13C418();
        }
        CFNumberType v16 = operator new(8 * v15);
        uint64_t v17 = (const void **)&v16[8 * v12];
        double *v17 = v9;
        uint64_t v11 = (uint64_t)(v17 + 1);
        if (v53 == v52)
        {
LABEL_22:
          int v52 = v17;
          size_t v54 = (const void **)&v16[8 * v15];
          if (!v53) {
            goto LABEL_24;
          }
LABEL_23:
          operator delete(v10);
          goto LABEL_24;
        }
      }
      else
      {
        CFNumberType v16 = 0;
        uint64_t v17 = (const void **)(8 * v12);
        *(void *)(8 * v12) = v9;
        uint64_t v11 = 8 * v12 + 8;
        if (v53 == v52) {
          goto LABEL_22;
        }
      }
      unint64_t v26 = (char *)(v53 - 1) - (char *)v52;
      if (v26 < 0x58) {
        goto LABEL_70;
      }
      if ((unint64_t)((char *)v52 - v16) < 0x20) {
        goto LABEL_70;
      }
      uint64_t v27 = (v26 >> 3) + 1;
      uint64_t v28 = 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
      unint64_t v29 = &v53[v28 / 0xFFFFFFFFFFFFFFF8];
      uint64_t v17 = (const void **)((char *)v17 - v28);
      size_t v30 = &v16[8 * v12 - 16];
      unint64_t v31 = v53 - 2;
      uint64_t v32 = v27 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v33 = *(_OWORD *)v31;
        *(v30 - 1) = *((_OWORD *)v31 - 1);
        *size_t v30 = v33;
        v30 -= 2;
        v31 -= 4;
        v32 -= 4;
      }
      while (v32);
      unint64_t v10 = v29;
      if (v27 != (v27 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_70:
        do
        {
          uint64_t v34 = *--v10;
          *--uint64_t v17 = v34;
        }
        while (v10 != v52);
      }
      unint64_t v10 = v52;
      int v52 = v17;
      size_t v54 = (const void **)&v16[8 * v15];
      if (v10) {
        goto LABEL_23;
      }
LABEL_24:
      uint64_t v53 = (const void **)v11;
      uint64_t v18 = (const void *)*((void *)v2 + 1);
      uint64_t v19 = v50;
      if (v50 >= v51)
      {
        uint64_t v20 = v50 - __p;
        unint64_t v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 61) {
          sub_19E13D694();
        }
        uint64_t v22 = (char *)v51 - (char *)__p;
        if (((char *)v51 - (char *)__p) >> 2 > v21) {
          unint64_t v21 = v22 >> 2;
        }
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v23 = v21;
        }
        if (v23)
        {
          if (v23 >> 61) {
            sub_19E13C418();
          }
          float64x2x2_t v24 = operator new(8 * v23);
          size_t v25 = (const void **)&v24[8 * v20];
          long long *v25 = v18;
          uint64_t v8 = (uint64_t)(v25 + 1);
          if (v50 == __p) {
            goto LABEL_34;
          }
LABEL_46:
          unint64_t v35 = (char *)(v50 - 1) - (char *)__p;
          if (v35 < 0x58) {
            goto LABEL_71;
          }
          if ((unint64_t)((char *)__p - v24) < 0x20) {
            goto LABEL_71;
          }
          uint64_t v36 = (v35 >> 3) + 1;
          uint64_t v37 = 8 * (v36 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v38 = &v50[v37 / 0xFFFFFFFFFFFFFFF8];
          size_t v25 = (const void **)((char *)v25 - v37);
          long long v39 = &v24[8 * v20 - 16];
          size_t v40 = v50 - 2;
          uint64_t v41 = v36 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v42 = *(_OWORD *)v40;
            *(v39 - 1) = *((_OWORD *)v40 - 1);
            *long long v39 = v42;
            v39 -= 2;
            v40 -= 4;
            v41 -= 4;
          }
          while (v41);
          uint64_t v19 = v38;
          if (v36 != (v36 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_71:
            do
            {
              size_t v43 = *--v19;
              *--size_t v25 = v43;
            }
            while (v19 != __p);
          }
          uint64_t v19 = __p;
          std::string __p = v25;
          long long v51 = (const void **)&v24[8 * v23];
          if (!v19) {
            goto LABEL_8;
          }
        }
        else
        {
          float64x2x2_t v24 = 0;
          size_t v25 = (const void **)(8 * v20);
          *(void *)(8 * v20) = v18;
          uint64_t v8 = 8 * v20 + 8;
          if (v50 != __p) {
            goto LABEL_46;
          }
LABEL_34:
          std::string __p = v25;
          long long v51 = (const void **)&v24[8 * v23];
          if (!v50) {
            goto LABEL_8;
          }
        }
        operator delete(v19);
        goto LABEL_8;
      }
      *uint64_t v50 = v18;
      uint64_t v8 = (uint64_t)(v50 + 1);
LABEL_8:
      uint64_t v50 = (const void **)v8;
      v2 += 16;
      if (v2 == v1)
      {
        uint64_t v6 = v52;
        CFIndex v4 = v48;
        CFNumberRef v7 = __p;
        break;
      }
    }
  }
LABEL_55:
  CFDictionaryRef v44 = CFDictionaryCreate(0, v6, v7, v4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v44)
  {
    uint64_t v47 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v47, "Could not construct");
    __cxa_throw(v47, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (__p) {
    operator delete(__p);
  }
  if (v52) {
    operator delete(v52);
  }
  return v44;
}

void sub_19E15B8FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  __cxa_free_exception(v15);
  if (__p)
  {
    operator delete(__p);
    uint64_t v17 = a14;
    if (!a14) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    uint64_t v17 = a14;
    if (!a14) {
      goto LABEL_3;
    }
  }
  operator delete(v17);
  _Unwind_Resume(a1);
}

void **sub_19E15B974(void **a1)
{
  CFNumberRef v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    CFIndex v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        size_t v5 = (const void *)*((void *)v3 - 1);
        if (v5) {
          CFRelease(v5);
        }
        uint64_t v6 = (const void *)*((void *)v3 - 2);
        if (v6) {
          CFRelease(v6);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      CFIndex v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_19E15B9F8(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    CFIndex v4 = (CFTypeRef *)(i - 16);
    *(void *)(a1 + 16) = i - 16;
    size_t v5 = *(const void **)(i - 8);
    if (v5) {
      CFRelease(v5);
    }
    if (*v4) {
      CFRelease(*v4);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

CFStringRef *sub_19E15BA70(CFStringRef **a1, const UInt8 *a2, uint64_t **a3)
{
  uint64_t v4 = ((char *)a1[1] - (char *)*a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    sub_19E13D694();
  }
  uint64_t v8 = (char *)a1[2] - (char *)*a1;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 >> 60) {
      sub_19E13C418();
    }
    unint64_t v10 = (char *)operator new(16 * v9);
  }
  else
  {
    unint64_t v10 = 0;
  }
  unint64_t v29 = (CFStringRef *)&v10[16 * v4];
  size_t v30 = (CFStringRef *)&v10[16 * v9];
  sub_19E15BC88(v29, a2, a3);
  uint64_t v11 = v29;
  uint64_t v12 = v29 + 2;
  unint64_t v13 = *a1;
  uint64_t v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v29;
    a1[1] = v12;
    a1[2] = v30;
  }
  else
  {
    unint64_t v15 = (char *)v14 - (char *)*a1 - 16;
    if (v15 < 0x70) {
      goto LABEL_18;
    }
    unint64_t v16 = ((char *)v13 - (char *)v14 + 15) & 0xFFFFFFFFFFFFFFF0;
    if ((CFStringRef *)((char *)v29 + v16) < v14 && (CFStringRef *)((char *)v14 + v16) < v29) {
      goto LABEL_18;
    }
    uint64_t v17 = (v15 >> 4) + 1;
    uint64_t v18 = 16 * (v17 & 0x1FFFFFFFFFFFFFFELL);
    uint64_t v19 = &v29[v18 / 0xFFFFFFFFFFFFFFF8];
    uint64_t v20 = &v14[v18 / 0xFFFFFFFFFFFFFFF8];
    unint64_t v21 = (const double *)(v14 - 4);
    uint64_t v22 = (double *)(v29 - 4);
    uint64_t v23 = v17 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      float64x2x2_t v31 = vld2q_f64(v21);
      vst2q_f64(v22, v31);
      *(_OWORD *)unint64_t v21 = 0uLL;
      *((_OWORD *)v21 + 1) = 0uLL;
      v21 -= 4;
      v22 -= 4;
      v23 -= 2;
    }
    while (v23);
    uint64_t v11 = v19;
    uint64_t v14 = v20;
    if (v17 != (v17 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_18:
      uint64_t v19 = v11;
      do
      {
        CFStringRef v24 = *(v14 - 2);
        v14 -= 2;
        *(v19 - 2) = v24;
        v19 -= 2;
        *uint64_t v14 = 0;
        v19[1] = v14[1];
        v14[1] = 0;
      }
      while (v14 != v13);
    }
    size_t v25 = *a1;
    uint64_t v14 = a1[1];
    *a1 = v19;
    a1[1] = v12;
    a1[2] = v30;
    if (v14 != v25)
    {
      do
      {
        unint64_t v26 = *(v14 - 1);
        if (v26) {
          CFRelease(v26);
        }
        uint64_t v27 = *(v14 - 2);
        if (v27) {
          CFRelease(v27);
        }
        v14 -= 2;
      }
      while (v14 != v25);
      uint64_t v14 = v25;
    }
  }
  if (v14) {
    operator delete(v14);
  }
  return v29 + 2;
}

void sub_19E15BC6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E15B9F8((uint64_t)va);
  _Unwind_Resume(a1);
}

CFStringRef *sub_19E15BC88(CFStringRef *a1, const UInt8 *a2, uint64_t **a3)
{
  CFIndex v5 = *((void *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    CFIndex v6 = a2[23];
  }
  else
  {
    a2 = *(const UInt8 **)a2;
    CFIndex v6 = v5;
  }
  CFStringRef v7 = CFStringCreateWithBytes(0, a2, v6, 0x8000100u, 0);
  *a1 = v7;
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  a1[1] = (CFStringRef)sub_19E15BD74(a3);
  return a1;
}

void sub_19E15BD34(_Unwind_Exception *exception_object)
{
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E15BD60(_Unwind_Exception *a1)
{
  sub_19E15980C(v1);
  _Unwind_Resume(a1);
}

CFArrayRef sub_19E15BD74(uint64_t **a1)
{
  unint64_t v2 = a1[1] - *a1;
  std::string __p = 0;
  unint64_t v15 = 0;
  unint64_t v16 = 0;
  sub_19E15BEB0((uint64_t)&__p, v2);
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 != v4)
  {
    CFIndex v5 = v15;
    do
    {
      uint64_t v13 = *v3;
      if ((unint64_t)v5 >= v16) {
        CFIndex v5 = sub_19E15C2A0((CFNumberRef **)&__p, &v13);
      }
      else {
        sub_19E15C494((uint64_t)&v16, v5++, &v13);
      }
      unint64_t v15 = v5;
      ++v3;
    }
    while (v3 != v4);
  }
  CFArrayRef v6 = sub_19E15C03C((char **)&__p);
  CFStringRef v7 = (CFNumberRef *)__p;
  if (__p)
  {
    uint64_t v8 = v15;
    unint64_t v9 = __p;
    if (v15 != __p)
    {
      do
      {
        uint64_t v11 = *--v8;
        unint64_t v10 = v11;
        if (v11) {
          CFRelease(v10);
        }
      }
      while (v8 != v7);
      unint64_t v9 = __p;
    }
    unint64_t v15 = v7;
    operator delete(v9);
  }
  return v6;
}

void sub_19E15BE7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E15C1D8((void **)va);
  _Unwind_Resume(a1);
}

void sub_19E15BE98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E15C1D8((void **)va);
  _Unwind_Resume(a1);
}

void sub_19E15BEB0(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(char **)a1;
  if (a2 <= (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) {
    return;
  }
  if (a2 >> 61) {
    sub_19E13D694();
  }
  uint64_t v4 = *(char **)(a1 + 8);
  uint64_t v5 = 8 * a2;
  CFArrayRef v6 = (char *)operator new(8 * a2);
  CFStringRef v7 = &v6[v5];
  uint64_t v8 = v4 - v2;
  unint64_t v9 = (unint64_t)&v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF8];
  if (v4 == v2)
  {
    *(void *)a1 = v9;
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = v7;
    if (!v2) {
      return;
    }
    goto LABEL_19;
  }
  unint64_t v10 = v8 - 8;
  if ((unint64_t)(v8 - 8) < 0x78)
  {
    uint64_t v11 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF8];
    do
    {
LABEL_16:
      uint64_t v21 = *((void *)v4 - 1);
      v4 -= 8;
      *((void *)v11 - 1) = v21;
      v11 -= 8;
      *(void *)uint64_t v4 = 0;
    }
    while (v4 != v2);
    goto LABEL_17;
  }
  BOOL v12 = &v6[(v8 & 0xFFFFFFFFFFFFFFF8) - (v10 & 0xFFFFFFFFFFFFFFF8) - 8] >= v4
     || (unint64_t)&v4[-(v10 & 0xFFFFFFFFFFFFFFF8) - 8] >= v9;
  uint64_t v11 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF8];
  if (!v12) {
    goto LABEL_16;
  }
  uint64_t v13 = v8 >> 3;
  uint64_t v14 = (v10 >> 3) + 1;
  uint64_t v15 = 8 * (v14 & 0x3FFFFFFFFFFFFFFCLL);
  uint64_t v11 = (char *)(v9 - v15);
  unint64_t v16 = &v4[-v15];
  uint64_t v17 = v4 - 16;
  uint64_t v18 = &v6[8 * v13 - 16];
  uint64_t v19 = v14 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v20 = *(_OWORD *)v17;
    *((_OWORD *)v18 - 1) = *((_OWORD *)v17 - 1);
    *(_OWORD *)uint64_t v18 = v20;
    *((_OWORD *)v17 - 1) = 0uLL;
    *(_OWORD *)uint64_t v17 = 0uLL;
    v17 -= 32;
    v18 -= 32;
    v19 -= 4;
  }
  while (v19);
  uint64_t v4 = v16;
  if (v14 != (v14 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_16;
  }
LABEL_17:
  uint64_t v22 = *(char **)a1;
  unint64_t v2 = *(char **)(a1 + 8);
  *(void *)a1 = v11;
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + 16) = v7;
  if (v2 == v22)
  {
    if (!v2) {
      return;
    }
    goto LABEL_19;
  }
  do
  {
    CFStringRef v24 = (const void *)*((void *)v2 - 1);
    v2 -= 8;
    uint64_t v23 = v24;
    if (v24) {
      CFRelease(v23);
    }
  }
  while (v2 != v22);
  unint64_t v2 = v22;
  if (v22)
  {
LABEL_19:
    operator delete(v2);
  }
}

CFArrayRef sub_19E15C03C(char **a1)
{
  unint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  unint64_t v3 = v1 - *a1;
  if (v1 == *a1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    goto LABEL_12;
  }
  if ((v3 & 0x8000000000000000) != 0) {
    sub_19E13D694();
  }
  uint64_t v4 = (char *)operator new(v1 - v2);
  bzero(v4, v1 - v2);
  uint64_t v5 = &v4[v3];
  if (v3 - 8 < 0x18)
  {
    CFArrayRef v6 = v4;
    do
    {
LABEL_11:
      uint64_t v14 = *(void *)v2;
      v2 += 8;
      *(void *)CFArrayRef v6 = v14;
      v6 += 8;
    }
    while (v2 != v1);
    goto LABEL_12;
  }
  CFArrayRef v6 = v4;
  if ((unint64_t)(v4 - v2) < 0x20) {
    goto LABEL_11;
  }
  uint64_t v7 = 0;
  unint64_t v8 = ((v3 - 8) >> 3) + 1;
  uint64_t v9 = 8 * (v8 & 0x3FFFFFFFFFFFFFFCLL);
  CFArrayRef v6 = &v4[v9];
  unint64_t v10 = &v2[v9];
  uint64_t v11 = v8 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    BOOL v12 = &v4[v7];
    long long v13 = *(_OWORD *)&v2[v7 + 16];
    *(_OWORD *)BOOL v12 = *(_OWORD *)&v2[v7];
    *((_OWORD *)v12 + 1) = v13;
    v7 += 32;
    v11 -= 4;
  }
  while (v11);
  unint64_t v2 = v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_11;
  }
LABEL_12:
  CFArrayRef v15 = CFArrayCreate(0, (const void **)v4, (v5 - v4) >> 3, MEMORY[0x1E4F1D510]);
  if (!v15)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v4) {
    operator delete(v4);
  }
  return v15;
}

void sub_19E15C19C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  __cxa_free_exception(v12);
  if (v11) {
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void **sub_19E15C1D8(void **a1)
{
  unint64_t v2 = (char *)*a1;
  if (*a1)
  {
    unint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        CFArrayRef v6 = (const void *)*((void *)v3 - 1);
        v3 -= 8;
        uint64_t v5 = v6;
        if (v6) {
          CFRelease(v5);
        }
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_19E15C248(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    uint64_t v5 = *(const void **)(v2 - 8);
    v2 -= 8;
    uint64_t v4 = v5;
    *(void *)(a1 + 16) = v2;
    if (v5)
    {
      CFRelease(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

CFNumberRef *sub_19E15C2A0(CFNumberRef **a1, uint64_t *a2)
{
  uint64_t v3 = a1[1] - *a1;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 61) {
    sub_19E13D694();
  }
  uint64_t v6 = (char *)a1[2] - (char *)*a1;
  if (v6 >> 2 > v4) {
    unint64_t v4 = v6 >> 2;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v7 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  if (v7)
  {
    if (v7 >> 61) {
      sub_19E13C418();
    }
    unint64_t v8 = (char *)operator new(8 * v7);
  }
  else
  {
    unint64_t v8 = 0;
  }
  uint64_t v28 = (CFNumberRef *)&v8[8 * v3];
  unint64_t v29 = (CFNumberRef *)&v8[8 * v7];
  sub_19E15C494((uint64_t)(a1 + 2), v28, a2);
  uint64_t v9 = v28;
  unint64_t v10 = v28 + 1;
  uint64_t v11 = *a1;
  BOOL v12 = a1[1];
  if (v12 == *a1)
  {
    *a1 = v28;
    a1[1] = v10;
    a1[2] = v29;
  }
  else
  {
    unint64_t v13 = (char *)v12 - (char *)*a1 - 8;
    if (v13 < 0x58) {
      goto LABEL_18;
    }
    unint64_t v14 = ((char *)v11 - (char *)v12 + 7) & 0xFFFFFFFFFFFFFFF8;
    if ((CFNumberRef *)((char *)v28 + v14) < v12 && (CFNumberRef *)((char *)v12 + v14) < v28) {
      goto LABEL_18;
    }
    uint64_t v15 = (v13 >> 3) + 1;
    uint64_t v16 = 8 * (v15 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v17 = &v28[v16 / 0xFFFFFFFFFFFFFFF8];
    uint64_t v18 = &v12[v16 / 0xFFFFFFFFFFFFFFF8];
    uint64_t v19 = v12 - 2;
    long long v20 = v28 - 2;
    uint64_t v21 = v15 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v22 = *(_OWORD *)v19;
      *((_OWORD *)v20 - 1) = *((_OWORD *)v19 - 1);
      *(_OWORD *)long long v20 = v22;
      *((_OWORD *)v19 - 1) = 0uLL;
      *(_OWORD *)uint64_t v19 = 0uLL;
      v19 -= 4;
      v20 -= 4;
      v21 -= 4;
    }
    while (v21);
    uint64_t v9 = v17;
    BOOL v12 = v18;
    if (v15 != (v15 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_18:
      uint64_t v17 = v9;
      do
      {
        CFNumberRef v23 = *--v12;
        *--uint64_t v17 = v23;
        CFNumberRef *v12 = 0;
      }
      while (v12 != v11);
    }
    CFStringRef v24 = *a1;
    BOOL v12 = a1[1];
    *a1 = v17;
    a1[1] = v10;
    a1[2] = v29;
    if (v12 != v24)
    {
      do
      {
        unint64_t v26 = *--v12;
        size_t v25 = v26;
        if (v26) {
          CFRelease(v25);
        }
      }
      while (v12 != v24);
      BOOL v12 = v24;
    }
  }
  if (v12) {
    operator delete(v12);
  }
  return v28 + 1;
}

void sub_19E15C47C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E15C248((uint64_t)va);
  _Unwind_Resume(a1);
}

CFNumberRef sub_19E15C494(uint64_t a1, CFNumberRef *a2, uint64_t *a3)
{
  uint64_t valuePtr = *a3;
  CFNumberRef result = CFNumberCreate(0, kCFNumberLongType, &valuePtr);
  *a2 = result;
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_19E15C520(_Unwind_Exception *exception_object)
{
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E15C54C(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_19E15C54C(a1, *(void *)a2);
    sub_19E15C54C(a1, *((void *)a2 + 1));
    unint64_t v4 = (void *)*((void *)a2 + 7);
    if (v4)
    {
      *((void *)a2 + 8) = v4;
      operator delete(v4);
    }
    if (a2[55] < 0)
    {
      operator delete(*((void **)a2 + 4));
      uint64_t v5 = a2;
    }
    else
    {
      uint64_t v5 = a2;
    }
    operator delete(v5);
  }
}

uint64_t *sub_19E15C5E0(uint64_t **a1, uint64_t *a2, const void **a3, long long *a4)
{
  uint64_t v6 = sub_19E159C68(a1, a2, &v14, &v13, a3);
  if (*v6) {
    return (uint64_t *)*v6;
  }
  unint64_t v8 = v6;
  uint64_t v9 = (uint64_t *)operator new(0x50uLL);
  sub_19E15C6BC(v9 + 4, a4);
  unint64_t v10 = v14;
  *uint64_t v9 = 0;
  v9[1] = 0;
  _OWORD v9[2] = (uint64_t)v10;
  *unint64_t v8 = (uint64_t)v9;
  uint64_t v11 = (uint64_t *)**a1;
  BOOL v12 = v9;
  if (v11)
  {
    *a1 = v11;
    BOOL v12 = (uint64_t *)*v8;
  }
  sub_19E13C8A0(a1[1], v12);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v9;
}

void sub_19E15C6A8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_19E15C6BC(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_19E13C2D0(__dst, *(void **)a2, *((void *)a2 + 1));
    __dst[3] = 0;
    __dst[4] = 0;
    __dst[5] = 0;
    uint64_t v6 = (unsigned char *)*((void *)a2 + 3);
    uint64_t v9 = (unsigned char *)*((void *)a2 + 4);
    int64_t v7 = v9 - v6;
    if (v9 == v6) {
      return __dst;
    }
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
    __dst[3] = 0;
    __dst[4] = 0;
    __dst[5] = 0;
    uint64_t v6 = (unsigned char *)*((void *)a2 + 3);
    uint64_t v5 = (unsigned char *)*((void *)a2 + 4);
    int64_t v7 = v5 - v6;
    if (v5 == v6) {
      return __dst;
    }
  }
  if (v7 < 0) {
    sub_19E13D694();
  }
  unint64_t v10 = (char *)operator new(v7);
  __dst[3] = v10;
  __dst[4] = v10;
  uint64_t v11 = &v10[8 * (v7 >> 3)];
  __dst[5] = v11;
  memcpy(v10, v6, v7);
  __dst[4] = v11;
  return __dst;
}

void sub_19E15C78C(_Unwind_Exception *a1)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  sub_19E32EB2C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19E15C7B0()
{
  qword_1E9457D28 = 0;
  unk_1E9457D30 = "MontrealNeuralNetworkState";
  qword_1E9457D38 = 0;
  unk_1E9457D40 = 0;
  qword_1E9457D48 = (uint64_t)sub_19E1403B0;
  unk_1E9457D50 = 0u;
  unk_1E9457D60 = 0u;
  uint64_t result = _CFRuntimeRegisterClass();
  qword_1E9457D88 = result;
  return result;
}

uint64_t sub_19E15C808(uint64_t result)
{
  if (result)
  {
    CFNumberRef v1 = (const __CFNumber *)result;
    CFTypeID TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(v1))
    {
      return sub_19E15C8A4(v1);
    }
    else
    {
      CFTypeID v3 = CFBooleanGetTypeID();
      if (v3 == CFGetTypeID(v1)) {
        return CFBooleanGetValue(v1) | 0x100000000;
      }
      else {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_19E15C8A4(const __CFNumber *a1)
{
  switch(CFNumberGetType(a1))
  {
    case kCFNumberSInt8Type:
      LOBYTE(valuePtr) = 0;
      CFNumberRef v2 = a1;
      CFNumberType v3 = kCFNumberSInt8Type;
      goto LABEL_10;
    case kCFNumberSInt16Type:
      LOWORD(valuePtr) = 0;
      CFNumberRef v7 = a1;
      CFNumberType v8 = kCFNumberSInt16Type;
      goto LABEL_17;
    case kCFNumberSInt32Type:
      LODWORD(valuePtr) = 0;
      CFNumberRef v9 = a1;
      CFNumberType v10 = kCFNumberSInt32Type;
      goto LABEL_28;
    case kCFNumberSInt64Type:
      double valuePtr = 0.0;
      CFNumberRef v9 = a1;
      CFNumberType v10 = kCFNumberSInt64Type;
      goto LABEL_28;
    case kCFNumberFloat32Type:
      LODWORD(valuePtr) = 0;
      CFNumberRef v11 = a1;
      CFNumberType v12 = kCFNumberFloat32Type;
      goto LABEL_24;
    case kCFNumberFloat64Type:
      double valuePtr = 0.0;
      CFNumberRef v13 = a1;
      CFNumberType v14 = kCFNumberFloat64Type;
      goto LABEL_30;
    case kCFNumberCharType:
      LOBYTE(valuePtr) = 0;
      CFNumberRef v2 = a1;
      CFNumberType v3 = kCFNumberCharType;
LABEL_10:
      int Value = CFNumberGetValue(v2, v3, &valuePtr);
      uint64_t v16 = Value != 0;
      if (Value) {
        unsigned __int8 v17 = LOBYTE(valuePtr);
      }
      else {
        unsigned __int8 v17 = 0;
      }
      int v18 = -256;
      if ((v16 & (SLOBYTE(valuePtr) < 0)) == 0) {
        int v18 = 0;
      }
      uint64_t v5 = v16 << 32;
      LODWORD(v6) = v18 & 0xFFFFFF00 | v17;
      int v4 = v6 & 0xFFFFFF00;
      return v5 | v4 & 0xFFFFFF00 | v6;
    case kCFNumberShortType:
      LOWORD(valuePtr) = 0;
      CFNumberRef v7 = a1;
      CFNumberType v8 = kCFNumberShortType;
LABEL_17:
      if (CFNumberGetValue(v7, v8, &valuePtr)) {
        uint64_t v6 = SLOWORD(valuePtr) & 0xFFFFFFFFLL | 0x100000000;
      }
      else {
        uint64_t v6 = 0;
      }
      goto LABEL_33;
    case kCFNumberIntType:
      LODWORD(valuePtr) = 0;
      CFNumberRef v9 = a1;
      CFNumberType v10 = kCFNumberIntType;
      goto LABEL_28;
    case kCFNumberLongType:
      double valuePtr = 0.0;
      CFNumberRef v9 = a1;
      CFNumberType v10 = kCFNumberLongType;
      goto LABEL_28;
    case kCFNumberLongLongType:
      double valuePtr = 0.0;
      CFNumberRef v9 = a1;
      CFNumberType v10 = kCFNumberLongLongType;
      goto LABEL_28;
    case kCFNumberFloatType:
      LODWORD(valuePtr) = 0;
      CFNumberRef v11 = a1;
      CFNumberType v12 = kCFNumberFloatType;
LABEL_24:
      int v19 = CFNumberGetValue(v11, v12, &valuePtr);
      uint64_t v20 = (int)*(float *)&valuePtr;
      goto LABEL_31;
    case kCFNumberDoubleType:
      double valuePtr = 0.0;
      CFNumberRef v13 = a1;
      CFNumberType v14 = kCFNumberDoubleType;
      goto LABEL_30;
    case kCFNumberCFIndexType:
      double valuePtr = 0.0;
      CFNumberRef v9 = a1;
      CFNumberType v10 = kCFNumberCFIndexType;
      goto LABEL_28;
    case kCFNumberNSIntegerType:
      double valuePtr = 0.0;
      CFNumberRef v9 = a1;
      CFNumberType v10 = kCFNumberNSIntegerType;
LABEL_28:
      int v19 = CFNumberGetValue(v9, v10, &valuePtr);
      uint64_t v20 = LODWORD(valuePtr);
      goto LABEL_31;
    case kCFNumberCGFloatType:
      double valuePtr = 0.0;
      CFNumberRef v13 = a1;
      CFNumberType v14 = kCFNumberCGFloatType;
LABEL_30:
      int v19 = CFNumberGetValue(v13, v14, &valuePtr);
      uint64_t v20 = (int)valuePtr;
LABEL_31:
      uint64_t v6 = v20 | 0x100000000;
      if (!v19) {
        uint64_t v6 = 0;
      }
LABEL_33:
      int v4 = v6 & 0xFFFFFF00;
      uint64_t v5 = v6 & 0x100000000;
      break;
    default:
      int v4 = 0;
      uint64_t v5 = 0;
      LOBYTE(v6) = 0;
      break;
  }
  return v5 | v4 & 0xFFFFFF00 | v6;
}

uint64_t sub_19E15CB1C(const __CFBoolean *a1)
{
  if (!a1) {
    return 0;
  }
  CFTypeID TypeID = CFBooleanGetTypeID();
  if (TypeID == CFGetTypeID(a1)) {
    return (CFBooleanGetValue(a1) != 0) | 0x100u;
  }
  CFTypeID v4 = CFNumberGetTypeID();
  if (v4 != CFGetTypeID(a1)) {
    return 0;
  }
  __int16 v5 = sub_19E15CBE4(a1);
  return v5 | (HIBYTE(v5) << 8);
}

uint64_t sub_19E15CBE4(const __CFNumber *a1)
{
  switch(CFNumberGetType(a1))
  {
    case kCFNumberSInt8Type:
      LOBYTE(valuePtr) = 0;
      int Value = CFNumberGetValue(a1, kCFNumberSInt8Type, &valuePtr);
      if (Value) {
        BOOL v3 = LOBYTE(valuePtr) == 0;
      }
      else {
        BOOL v3 = 1;
      }
      BOOL v4 = !v3;
      if (Value) {
        goto LABEL_18;
      }
      goto LABEL_26;
    case kCFNumberSInt16Type:
      LOWORD(valuePtr) = 0;
      int v6 = CFNumberGetValue(a1, kCFNumberSInt16Type, &valuePtr);
      if (v6) {
        BOOL v7 = LOWORD(valuePtr) == 0;
      }
      else {
        BOOL v7 = 1;
      }
      BOOL v4 = !v7;
      if (v6) {
        goto LABEL_18;
      }
      goto LABEL_26;
    case kCFNumberSInt32Type:
      LODWORD(valuePtr) = 0;
      int v8 = CFNumberGetValue(a1, kCFNumberSInt32Type, &valuePtr);
      if (v8) {
        BOOL v9 = LODWORD(valuePtr) == 0;
      }
      else {
        BOOL v9 = 1;
      }
      BOOL v4 = !v9;
      if (!v8) {
        goto LABEL_26;
      }
      goto LABEL_18;
    case kCFNumberSInt64Type:
      double valuePtr = 0.0;
      int v10 = CFNumberGetValue(a1, kCFNumberSInt64Type, &valuePtr);
      if (v10) {
        BOOL v11 = *(void *)&valuePtr == 0;
      }
      else {
        BOOL v11 = 1;
      }
      BOOL v4 = !v11;
      if (!v10) {
        goto LABEL_26;
      }
      goto LABEL_18;
    case kCFNumberFloat32Type:
      LODWORD(valuePtr) = 0;
      int v12 = CFNumberGetValue(a1, kCFNumberFloat32Type, &valuePtr);
      BOOL v4 = *(float *)&valuePtr != 0.0 && v12 != 0;
      if (!v12) {
        goto LABEL_26;
      }
      goto LABEL_18;
    case kCFNumberFloat64Type:
      double valuePtr = 0.0;
      int v14 = CFNumberGetValue(a1, kCFNumberFloat64Type, &valuePtr);
      BOOL v4 = valuePtr != 0.0 && v14 != 0;
      if (!v14) {
        goto LABEL_26;
      }
      goto LABEL_18;
    case kCFNumberCharType:
      LOBYTE(valuePtr) = 0;
      int v16 = CFNumberGetValue(a1, kCFNumberCharType, &valuePtr);
      if (v16) {
        BOOL v17 = LOBYTE(valuePtr) == 0;
      }
      else {
        BOOL v17 = 1;
      }
      BOOL v4 = !v17;
      if (!v16) {
        goto LABEL_26;
      }
      goto LABEL_18;
    case kCFNumberShortType:
      LOWORD(valuePtr) = 0;
      int v18 = CFNumberGetValue(a1, kCFNumberShortType, &valuePtr);
      if (v18) {
        BOOL v19 = LOWORD(valuePtr) == 0;
      }
      else {
        BOOL v19 = 1;
      }
      BOOL v4 = !v19;
      if (!v18) {
        goto LABEL_26;
      }
      goto LABEL_18;
    case kCFNumberIntType:
      LODWORD(valuePtr) = 0;
      int v20 = CFNumberGetValue(a1, kCFNumberIntType, &valuePtr);
      if (v20) {
        BOOL v21 = LODWORD(valuePtr) == 0;
      }
      else {
        BOOL v21 = 1;
      }
      BOOL v4 = !v21;
      if (!v20) {
        goto LABEL_26;
      }
      goto LABEL_18;
    case kCFNumberLongType:
      double valuePtr = 0.0;
      int v22 = CFNumberGetValue(a1, kCFNumberLongType, &valuePtr);
      if (v22) {
        BOOL v23 = *(void *)&valuePtr == 0;
      }
      else {
        BOOL v23 = 1;
      }
      BOOL v4 = !v23;
      if (!v22) {
        goto LABEL_26;
      }
      goto LABEL_18;
    case kCFNumberLongLongType:
      double valuePtr = 0.0;
      int v24 = CFNumberGetValue(a1, kCFNumberLongLongType, &valuePtr);
      if (v24) {
        BOOL v25 = *(void *)&valuePtr == 0;
      }
      else {
        BOOL v25 = 1;
      }
      BOOL v4 = !v25;
      if (!v24) {
        goto LABEL_26;
      }
      goto LABEL_18;
    case kCFNumberFloatType:
      LODWORD(valuePtr) = 0;
      int v26 = CFNumberGetValue(a1, kCFNumberFloatType, &valuePtr);
      BOOL v4 = *(float *)&valuePtr != 0.0 && v26 != 0;
      if (!v26) {
        goto LABEL_26;
      }
      goto LABEL_18;
    case kCFNumberDoubleType:
      double valuePtr = 0.0;
      int v28 = CFNumberGetValue(a1, kCFNumberDoubleType, &valuePtr);
      BOOL v4 = valuePtr != 0.0 && v28 != 0;
      if (!v28) {
        goto LABEL_26;
      }
      goto LABEL_18;
    case kCFNumberCFIndexType:
      double valuePtr = 0.0;
      int v30 = CFNumberGetValue(a1, kCFNumberCFIndexType, &valuePtr);
      if (v30) {
        BOOL v31 = *(void *)&valuePtr == 0;
      }
      else {
        BOOL v31 = 1;
      }
      BOOL v4 = !v31;
      if (!v30) {
        goto LABEL_26;
      }
      goto LABEL_18;
    case kCFNumberNSIntegerType:
      double valuePtr = 0.0;
      int v32 = CFNumberGetValue(a1, kCFNumberNSIntegerType, &valuePtr);
      if (v32) {
        BOOL v33 = *(void *)&valuePtr == 0;
      }
      else {
        BOOL v33 = 1;
      }
      BOOL v4 = !v33;
      if (!v32) {
        goto LABEL_26;
      }
      goto LABEL_18;
    case kCFNumberCGFloatType:
      double valuePtr = 0.0;
      int v34 = CFNumberGetValue(a1, kCFNumberCGFloatType, &valuePtr);
      BOOL v4 = valuePtr != 0.0 && v34 != 0;
      if (v34) {
LABEL_18:
      }
        uint64_t result = v4 | 0x100u;
      else {
LABEL_26:
      }
        uint64_t result = v4;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

unint64_t sub_19E15CF70@<X0>(const __CFString *a1@<X0>, void *a2@<X8>)
{
  CStringPtr = CFStringGetCStringPtr(a1, 0x8000100u);
  __int16 v5 = CStringPtr;
  if (CStringPtr)
  {
    unint64_t result = strlen(CStringPtr);
    if (result <= 0x7FFFFFFFFFFFFFF7)
    {
      size_t v7 = result;
      if (result >= 0x17)
      {
        uint64_t v11 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((result | 7) != 0x17) {
          uint64_t v11 = result | 7;
        }
        uint64_t v12 = v11 + 1;
        CFNumberRef v13 = operator new(v11 + 1);
        a2[1] = v7;
        a2[2] = v12 | 0x8000000000000000;
        *a2 = v13;
        a2 = v13;
      }
      else
      {
        *((unsigned char *)a2 + 23) = result;
        if (!result) {
          goto LABEL_14;
        }
      }
      unint64_t result = (unint64_t)memmove(a2, v5, v7);
LABEL_14:
      *((unsigned char *)a2 + v7) = 0;
      return result;
    }
LABEL_23:
    sub_19E13C370();
  }
  CFIndex Length = CFStringGetLength(a1);
  CFIndex maxBufLen = 0;
  v18.location = 0;
  v18.length = Length;
  CFStringGetBytes(a1, v18, 0x8000100u, 0, 0, 0, 0, &maxBufLen);
  CFIndex v9 = maxBufLen;
  if ((unint64_t)maxBufLen > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_23;
  }
  if ((unint64_t)maxBufLen >= 0x17)
  {
    CFIndex v14 = (maxBufLen & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((maxBufLen | 7) != 0x17) {
      CFIndex v14 = maxBufLen | 7;
    }
    CFIndex v15 = v14 + 1;
    int v10 = operator new(v14 + 1);
    a2[1] = v9;
    a2[2] = v15 | 0x8000000000000000;
    *a2 = v10;
  }
  else
  {
    *((unsigned char *)a2 + 23) = maxBufLen;
    int v10 = a2;
    if (!v9) {
      goto LABEL_19;
    }
  }
  bzero(v10, v9);
LABEL_19:
  *((unsigned char *)v10 + v9) = 0;
  if (*((char *)a2 + 23) >= 0) {
    int v16 = (UInt8 *)a2;
  }
  else {
    int v16 = (UInt8 *)*a2;
  }
  v19.location = 0;
  v19.length = Length;
  return CFStringGetBytes(a1, v19, 0x8000100u, 0, 0, v16, maxBufLen, &maxBufLen);
}

unint64_t sub_19E15D140(unint64_t result)
{
  if (result)
  {
    CFNumberRef v1 = (const __CFNumber *)result;
    CFTypeID TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(v1))
    {
      return sub_19E15D1E4(v1);
    }
    else
    {
      CFTypeID v3 = CFBooleanGetTypeID();
      if (v3 == CFGetTypeID(v1)) {
        return CFBooleanGetValue(v1);
      }
      else {
        return 0;
      }
    }
  }
  return result;
}

unint64_t sub_19E15D1E4(const __CFNumber *a1)
{
  switch(CFNumberGetType(a1))
  {
    case kCFNumberSInt8Type:
      LOBYTE(valuePtr) = 0;
      CFNumberRef v2 = a1;
      CFNumberType v3 = kCFNumberSInt8Type;
      goto LABEL_10;
    case kCFNumberSInt16Type:
      LOWORD(valuePtr) = 0;
      CFNumberRef v6 = a1;
      CFNumberType v7 = kCFNumberSInt16Type;
      goto LABEL_18;
    case kCFNumberSInt32Type:
      LODWORD(valuePtr) = 0;
      CFNumberRef v8 = a1;
      CFNumberType v9 = kCFNumberSInt32Type;
      goto LABEL_20;
    case kCFNumberSInt64Type:
      double valuePtr = 0.0;
      CFNumberRef v10 = a1;
      CFNumberType v11 = kCFNumberSInt64Type;
      goto LABEL_31;
    case kCFNumberFloat32Type:
      LODWORD(valuePtr) = 0;
      CFNumberRef v12 = a1;
      CFNumberType v13 = kCFNumberFloat32Type;
      goto LABEL_27;
    case kCFNumberFloat64Type:
      double valuePtr = 0.0;
      CFNumberRef v14 = a1;
      CFNumberType v15 = kCFNumberFloat64Type;
      goto LABEL_33;
    case kCFNumberCharType:
      LOBYTE(valuePtr) = 0;
      CFNumberRef v2 = a1;
      CFNumberType v3 = kCFNumberCharType;
LABEL_10:
      int Value = CFNumberGetValue(v2, v3, &valuePtr);
      if (Value) {
        char v17 = LOBYTE(valuePtr);
      }
      else {
        char v17 = 0;
      }
      if (Value != 0 && SLOBYTE(valuePtr) < 0) {
        unint64_t v4 = -256;
      }
      else {
        unint64_t v4 = 0;
      }
      LOBYTE(v5) = v17;
      return v5 | v4;
    case kCFNumberShortType:
      LOWORD(valuePtr) = 0;
      CFNumberRef v6 = a1;
      CFNumberType v7 = kCFNumberShortType;
LABEL_18:
      BOOL v18 = CFNumberGetValue(v6, v7, &valuePtr) == 0;
      unsigned __int8 v19 = LOBYTE(valuePtr);
      uint64_t v20 = SLOWORD(valuePtr);
      goto LABEL_21;
    case kCFNumberIntType:
      LODWORD(valuePtr) = 0;
      CFNumberRef v8 = a1;
      CFNumberType v9 = kCFNumberIntType;
LABEL_20:
      BOOL v18 = CFNumberGetValue(v8, v9, &valuePtr) == 0;
      unsigned __int8 v19 = LOBYTE(valuePtr);
      uint64_t v20 = SLODWORD(valuePtr);
LABEL_21:
      unint64_t v21 = v20 & 0xFFFFFFFFFFFFFF00 | v19;
      if (v18) {
        unint64_t v5 = 0;
      }
      else {
        unint64_t v5 = v21;
      }
      goto LABEL_37;
    case kCFNumberLongType:
      double valuePtr = 0.0;
      CFNumberRef v10 = a1;
      CFNumberType v11 = kCFNumberLongType;
      goto LABEL_31;
    case kCFNumberLongLongType:
      double valuePtr = 0.0;
      CFNumberRef v10 = a1;
      CFNumberType v11 = kCFNumberLongLongType;
      goto LABEL_31;
    case kCFNumberFloatType:
      LODWORD(valuePtr) = 0;
      CFNumberRef v12 = a1;
      CFNumberType v13 = kCFNumberFloatType;
LABEL_27:
      BOOL v22 = CFNumberGetValue(v12, v13, &valuePtr) == 0;
      unint64_t v5 = (unint64_t)*(float *)&valuePtr;
      goto LABEL_34;
    case kCFNumberDoubleType:
      double valuePtr = 0.0;
      CFNumberRef v14 = a1;
      CFNumberType v15 = kCFNumberDoubleType;
      goto LABEL_33;
    case kCFNumberCFIndexType:
      double valuePtr = 0.0;
      CFNumberRef v10 = a1;
      CFNumberType v11 = kCFNumberCFIndexType;
      goto LABEL_31;
    case kCFNumberNSIntegerType:
      double valuePtr = 0.0;
      CFNumberRef v10 = a1;
      CFNumberType v11 = kCFNumberNSIntegerType;
LABEL_31:
      BOOL v22 = CFNumberGetValue(v10, v11, &valuePtr) == 0;
      unint64_t v5 = *(void *)&valuePtr;
      goto LABEL_34;
    case kCFNumberCGFloatType:
      double valuePtr = 0.0;
      CFNumberRef v14 = a1;
      CFNumberType v15 = kCFNumberCGFloatType;
LABEL_33:
      BOOL v22 = CFNumberGetValue(v14, v15, &valuePtr) == 0;
      unint64_t v5 = (unint64_t)valuePtr;
LABEL_34:
      if (v22) {
        unint64_t v5 = 0;
      }
LABEL_37:
      unint64_t v4 = v5 & 0xFFFFFFFFFFFFFF00;
      break;
    default:
      unint64_t v4 = 0;
      LOBYTE(v5) = 0;
      break;
  }
  return v5 | v4;
}

uint64_t sub_19E15D474()
{
  qword_1E94583F8 = 0;
  unk_1E9458400 = "MRLEmbeddingMemoryModel";
  qword_1E9458408 = 0;
  unk_1E9458410 = 0;
  qword_1E9458418 = (uint64_t)sub_19E15D4CC;
  unk_1E9458420 = 0u;
  unk_1E9458430 = 0u;
  uint64_t result = _CFRuntimeRegisterClass();
  qword_1E9458458 = result;
  return result;
}

uint64_t sub_19E15D4CC(uint64_t a1)
{
  return sub_19E2502B4(a1 + 16);
}

double sub_19E15D4E0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = sub_19E30F818(a1, a2, a3, (int *)a4);
  void *v5 = &unk_1EF0A9EA8;
  v5[127] = *(void *)(a4 + 464);
  v5[128] = *(void *)(a4 + 456);
  v5[129] = *(void *)(a4 + 448);
  v5[130] = *(void *)(a4 + 592);
  v5[131] = *(void *)(a4 + 584);
  v5[132] = *(void *)(a4 + 576);
  *((_DWORD *)v5 + 270) = *(_DWORD *)(a4 + 320);
  *((_DWORD *)v5 + 271) = *(_DWORD *)(a4 + 324);
  *((unsigned char *)v5 + 1088) = *(_DWORD *)(a4 + 328) != 0;
  double result = 0.0;
  *(_OWORD *)(v5 + 133) = 0u;
  return result;
}

uint64_t sub_19E15D57C(void *a1, uint64_t a2)
{
  unint64_t v4 = (void *)a1[20];
  unint64_t v5 = (void *)a1[21];
  if (v4 == v5)
  {
    a1[21] = v4;
    if (!a1[31]) {
      goto LABEL_10;
    }
    goto LABEL_8;
  }
  do
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  while (v4 != v5);
  a1[21] = a1[20];
  if (a1[31])
  {
LABEL_8:
    uint64_t v7 = a1[29];
    CFNumberRef v6 = (uint64_t *)a1[30];
    uint64_t v8 = *v6;
    *(void *)(v8 + 8) = *(void *)(v7 + 8);
    **(void **)(v7 + 8) = v8;
    a1[31] = 0;
    if (v6 != a1 + 29)
    {
      do
      {
        CFNumberType v9 = (uint64_t *)v6[1];
        operator delete(v6);
        CFNumberRef v6 = v9;
      }
      while (v9 != a1 + 29);
    }
  }
LABEL_10:
  CFNumberRef v10 = *(uint64_t (**)(uint64_t, void *))(*(void *)a2 + 104);

  return v10(a2, a1);
}

void sub_19E15D684(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 1088)) {
    operator new[]();
  }
  sub_19E25D6DC(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 312))(a1, a3, a2);
  unint64_t v6 = *(void *)(a1 + 168) - *(void *)(a1 + 160);
  if ((int)(v6 >> 3) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = (a3 * a2);
    uint64_t v9 = v6 & 0x7FFFFFFF8;
    do
    {
      (*(void (**)(void, uint64_t))(**(void **)(*(void *)(a1 + 160) + v7) + 16))(*(void *)(*(void *)(a1 + 160) + v7), v8);
      v7 += 8;
    }
    while (v9 != v7);
  }
  sub_19E25D738(a1, a3);
  (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
  if (*(unsigned char *)(a1 + 1088))
  {
    CFNumberRef v10 = *(void **)(a1 + 1064);
    if (v10) {
      operator delete[](v10);
    }
    CFNumberType v11 = *(void **)(a1 + 1072);
    if (v11)
    {
      operator delete[](v11);
    }
  }
}

uint64_t *sub_19E15D8D0(uint64_t *result, int a2)
{
  CFNumberType v3 = result;
  unint64_t v5 = (uint64_t **)(result + 3);
  unint64_t v4 = (int *)result[3];
  unint64_t v6 = (uint64_t **)(result + 3);
  uint64_t v7 = (char *)(result + 3);
  if (v4)
  {
    uint64_t v8 = (int *)result[3];
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (char *)v8;
        int v9 = v8[8];
        if (v9 < 3) {
          break;
        }
        uint64_t v8 = *(int **)v7;
        unint64_t v6 = (uint64_t **)v7;
        if (!*(void *)v7) {
          goto LABEL_8;
        }
      }
      if (v9 == 2) {
        break;
      }
      uint64_t v8 = (int *)*((void *)v7 + 1);
      if (!v8)
      {
        unint64_t v6 = (uint64_t **)(v7 + 8);
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    CFNumberRef v10 = v7;
    uint64_t v7 = (char *)operator new(0x50uLL);
    *((_DWORD *)v7 + 8) = 2;
    *(_OWORD *)(v7 + 40) = 0u;
    *(_OWORD *)(v7 + 56) = 0u;
    *((void *)v7 + 9) = 0;
    *(void *)uint64_t v7 = 0;
    *((void *)v7 + 1) = 0;
    *((void *)v7 + 2) = v10;
    *unint64_t v6 = (uint64_t *)v7;
    uint64_t v11 = *(void *)v3[2];
    CFNumberRef v12 = (uint64_t *)v7;
    if (v11)
    {
      v3[2] = v11;
      CFNumberRef v12 = *v6;
    }
    double result = sub_19E13C8A0((uint64_t *)v3[3], v12);
    unint64_t v4 = (int *)v3[3];
    ++v3[4];
  }
  uint64_t v13 = *((void *)v7 + 7);
  uint64_t v14 = *((void *)v7 + 9);
  CFNumberType v15 = (char *)v5;
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        CFNumberType v15 = (char *)v4;
        int v16 = v4[8];
        if (v16 < 2) {
          break;
        }
        unint64_t v4 = *(int **)v15;
        unint64_t v5 = (uint64_t **)v15;
        if (!*(void *)v15) {
          goto LABEL_18;
        }
      }
      if (v16 == 1) {
        break;
      }
      unint64_t v4 = (int *)*((void *)v15 + 1);
      if (!v4)
      {
        unint64_t v5 = (uint64_t **)(v15 + 8);
        goto LABEL_18;
      }
    }
  }
  else
  {
LABEL_18:
    char v17 = v15;
    CFNumberType v15 = (char *)operator new(0x50uLL);
    *((_DWORD *)v15 + 8) = 1;
    *(_OWORD *)(v15 + 40) = 0u;
    *(_OWORD *)(v15 + 56) = 0u;
    *((void *)v15 + 9) = 0;
    *(void *)CFNumberType v15 = 0;
    *((void *)v15 + 1) = 0;
    *((void *)v15 + 2) = v17;
    void *v5 = (uint64_t *)v15;
    uint64_t v18 = *(void *)v3[2];
    unsigned __int8 v19 = (uint64_t *)v15;
    if (v18)
    {
      v3[2] = v18;
      unsigned __int8 v19 = *v5;
    }
    double result = sub_19E13C8A0((uint64_t *)v3[3], v19);
    ++v3[4];
  }
  uint64_t v20 = *((void *)v15 + 9);
  if (a2 == 10)
  {
    uint64_t v13 = *((void *)v15 + 9);
    uint64_t v20 = *((int *)v3 + 271);
    uint64_t v21 = *((void *)v15 + 8);
    BOOL v23 = (uint64_t **)(v3 + 6);
    BOOL v22 = (char *)v3[6];
    if (v22) {
      goto LABEL_27;
    }
LABEL_25:
    int v24 = (char *)v23;
LABEL_31:
    int v26 = v24;
    int v24 = (char *)operator new(0x50uLL);
    *((_DWORD *)v24 + 8) = a2;
    *(_OWORD *)(v24 + 40) = 0u;
    *(_OWORD *)(v24 + 56) = 0u;
    *((void *)v24 + 9) = 0;
    *(void *)int v24 = 0;
    *((void *)v24 + 1) = 0;
    *((void *)v24 + 2) = v26;
    *BOOL v23 = (uint64_t *)v24;
    uint64_t v27 = *(void *)v3[5];
    int v28 = (uint64_t *)v24;
    if (v27)
    {
      v3[5] = v27;
      int v28 = *v23;
    }
    double result = sub_19E13C8A0((uint64_t *)v3[6], v28);
    ++v3[7];
    goto LABEL_34;
  }
  uint64_t v14 = 1;
  uint64_t v21 = *((void *)v15 + 8);
  BOOL v23 = (uint64_t **)(v3 + 6);
  BOOL v22 = (char *)v3[6];
  if (!v22) {
    goto LABEL_25;
  }
  while (1)
  {
LABEL_27:
    while (1)
    {
      int v24 = v22;
      int v25 = *((_DWORD *)v22 + 8);
      if (v25 <= a2) {
        break;
      }
      BOOL v22 = *(char **)v24;
      BOOL v23 = (uint64_t **)v24;
      if (!*(void *)v24) {
        goto LABEL_31;
      }
    }
    if (v25 >= a2) {
      break;
    }
    BOOL v22 = (char *)*((void *)v24 + 1);
    if (!v22)
    {
      BOOL v23 = (uint64_t **)(v24 + 8);
      goto LABEL_31;
    }
  }
LABEL_34:
  *((void *)v24 + 5) = 1;
  *((void *)v24 + 6) = v14;
  *((void *)v24 + 7) = v13;
  *((void *)v24 + 8) = v21;
  *((void *)v24 + 9) = v20;
  return result;
}

void sub_19E15DB44(uint64_t a1)
{
  CFNumberRef v1 = (void *)sub_19E25BF30(a1);

  operator delete(v1);
}

void sub_19E15DB6C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v9 = a1;
  id v10 = [NSString alloc];
  CFNumberRef v12 = objc_msgSend_initWithFormat_arguments_(v10, v11, (uint64_t)v9, (uint64_t)&a9);
  uint64_t v13 = sub_19E26EDD8();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    id v14 = v12;
    *(_DWORD *)uint8_t buf = 136315138;
    uint64_t v21 = objc_msgSend_UTF8String(v14, v15, v16, v17);
    _os_log_error_impl(&dword_19E138000, v13, OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
  }

  objc_msgSend_exceptionWithName_reason_userInfo_(MEMORY[0x1E4F1CA00], v18, *MEMORY[0x1E4F1C3B8], (uint64_t)v12, 0);
  id v19 = (id)objc_claimAutoreleasedReturnValue();
  objc_exception_throw(v19);
}

void sub_19E15DC4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_19E15DC7C(uint64_t a1, uint64_t a2, uint64_t a3, int *__src)
{
  uint64_t v135 = *MEMORY[0x1E4F143B8];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_19E13C2D0(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v130 = *(void *)(a2 + 16);
  }
  sub_19E25BD4C(a1, (long long *)__p, a3, __src);
  if (SHIBYTE(v130) < 0) {
    operator delete(__p[0]);
  }
  *(void *)a1 = &unk_1EF0AAC78;
  uint64_t v125 = (void **)(a1 + 1072);
  char v126 = (char **)(a1 + 1040);
  uint64_t v124 = (void **)(a1 + 1096);
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1032) = 0u;
  int v127 = (char **)(a1 + 1016);
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  LODWORD(v7) = __src[32];
  if ((int)v7 <= 1) {
    uint64_t v7 = 1;
  }
  else {
    uint64_t v7 = v7;
  }
  int v131 = 1;
  int64x2_t v132 = vdupq_n_s64(1uLL);
  uint64_t v133 = v7;
  int64x2_t v134 = v132;
  sub_19E13C5C0(a1 + 16, &v131, (int *)&v135);
  uint64_t v8 = __src[64];
  int v131 = 9;
  int64x2_t v132 = vdupq_n_s64(1uLL);
  int64x2_t v134 = 0uLL;
  uint64_t v133 = v8;
  sub_19E13C5C0(a1 + 40, &v131, (int *)&v135);
  LODWORD(v9) = __src[80];
  *(_DWORD *)(a1 + 1064) = v9;
  if ((int)v9 >= 1)
  {
    uint64_t v10 = 0;
    while (1)
    {
      float v12 = *(float *)(*((void *)__src + 71) + 4 * v10);
      int v13 = (int)(*(float *)(*((void *)__src + 70) + 4 * v10) + 0.5);
      id v14 = *(int **)(a1 + 1080);
      unint64_t v15 = *(void *)(a1 + 1088);
      if ((unint64_t)v14 < v15)
      {
        *id v14 = v13;
        uint64_t v16 = (uint64_t)(v14 + 1);
        goto LABEL_34;
      }
      uint64_t v17 = (int *)*v125;
      uint64_t v18 = (char *)v14 - (unsigned char *)*v125;
      uint64_t v19 = v18 >> 2;
      unint64_t v20 = (v18 >> 2) + 1;
      if (v20 >> 62) {
        sub_19E13D694();
      }
      uint64_t v21 = v15 - (void)v17;
      if (v21 >> 1 > v20) {
        unint64_t v20 = v21 >> 1;
      }
      unint64_t v22 = (unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v20;
      if (v22) {
        break;
      }
      BOOL v23 = 0;
      int v24 = (int *)(4 * v19);
      *(_DWORD *)(4 * v19) = v13;
      uint64_t v16 = 4 * v19 + 4;
      if (v14 != v17) {
        goto LABEL_26;
      }
LABEL_32:
      *(void *)(a1 + 1072) = v24;
      *(void *)(a1 + 1080) = v16;
      *(void *)(a1 + 1088) = &v23[4 * v22];
      if (v17) {
        operator delete(v17);
      }
LABEL_34:
      *(void *)(a1 + 1080) = v16;
      int v34 = (int)(v12 + 0.5);
      unint64_t v35 = *(int **)(a1 + 1104);
      unint64_t v36 = *(void *)(a1 + 1112);
      if ((unint64_t)v35 >= v36)
      {
        uint64_t v37 = (int *)*v124;
        uint64_t v38 = (char *)v35 - (unsigned char *)*v124;
        uint64_t v39 = v38 >> 2;
        unint64_t v40 = (v38 >> 2) + 1;
        if (v40 >> 62) {
          sub_19E13D694();
        }
        uint64_t v41 = v36 - (void)v37;
        if (v41 >> 1 > v40) {
          unint64_t v40 = v41 >> 1;
        }
        if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v42 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v42 = v40;
        }
        if (v42)
        {
          if (v42 >> 62) {
            sub_19E13C418();
          }
          size_t v43 = operator new(4 * v42);
          CFDictionaryRef v44 = (int *)&v43[4 * v39];
          *CFDictionaryRef v44 = v34;
          uint64_t v11 = (uint64_t)(v44 + 1);
          if (v35 == v37) {
            goto LABEL_52;
          }
LABEL_46:
          unint64_t v45 = (char *)(v35 - 1) - (char *)v37;
          if (v45 < 0x2C) {
            goto LABEL_138;
          }
          if ((unint64_t)((char *)v35 - &v43[v38]) < 0x20) {
            goto LABEL_138;
          }
          uint64_t v46 = (v45 >> 2) + 1;
          uint64_t v47 = 4 * (v46 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v48 = &v35[v47 / 0xFFFFFFFFFFFFFFFCLL];
          CFDictionaryRef v44 = (int *)((char *)v44 - v47);
          BOOL v49 = &v43[4 * v39 - 16];
          uint64_t v50 = v35 - 4;
          uint64_t v51 = v46 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v52 = *(_OWORD *)v50;
            *(v49 - 1) = *((_OWORD *)v50 - 1);
            *BOOL v49 = v52;
            v49 -= 2;
            v50 -= 8;
            v51 -= 8;
          }
          while (v51);
          unint64_t v35 = v48;
          if (v46 != (v46 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_138:
            do
            {
              int v53 = *--v35;
              *--CFDictionaryRef v44 = v53;
            }
            while (v35 != v37);
          }
        }
        else
        {
          size_t v43 = 0;
          CFDictionaryRef v44 = (int *)(4 * v39);
          *(_DWORD *)(4 * v39) = v34;
          uint64_t v11 = 4 * v39 + 4;
          if (v35 != v37) {
            goto LABEL_46;
          }
        }
LABEL_52:
        *(void *)(a1 + 1096) = v44;
        *(void *)(a1 + 1104) = v11;
        *(void *)(a1 + 1112) = &v43[4 * v42];
        if (v37) {
          operator delete(v37);
        }
        goto LABEL_12;
      }
      *unint64_t v35 = v34;
      uint64_t v11 = (uint64_t)(v35 + 1);
LABEL_12:
      *(void *)(a1 + 1104) = v11;
      ++v10;
      uint64_t v9 = *(int *)(a1 + 1064);
      if (v10 >= v9) {
        goto LABEL_54;
      }
    }
    if (v22 >> 62) {
      sub_19E13C418();
    }
    BOOL v23 = operator new(4 * v22);
    int v24 = (int *)&v23[4 * v19];
    *int v24 = v13;
    uint64_t v16 = (uint64_t)(v24 + 1);
    if (v14 == v17) {
      goto LABEL_32;
    }
LABEL_26:
    unint64_t v25 = (char *)(v14 - 1) - (char *)v17;
    if (v25 < 0x2C) {
      goto LABEL_139;
    }
    if ((unint64_t)((char *)v14 - &v23[v18]) < 0x20) {
      goto LABEL_139;
    }
    uint64_t v26 = (v25 >> 2) + 1;
    uint64_t v27 = 4 * (v26 & 0x7FFFFFFFFFFFFFF8);
    int v28 = &v14[v27 / 0xFFFFFFFFFFFFFFFCLL];
    int v24 = (int *)((char *)v24 - v27);
    unint64_t v29 = &v23[4 * v19 - 16];
    int v30 = v14 - 4;
    uint64_t v31 = v26 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v32 = *(_OWORD *)v30;
      *(v29 - 1) = *((_OWORD *)v30 - 1);
      *unint64_t v29 = v32;
      v29 -= 2;
      v30 -= 8;
      v31 -= 8;
    }
    while (v31);
    id v14 = v28;
    if (v26 != (v26 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_139:
      do
      {
        int v33 = *--v14;
        *--int v24 = v33;
      }
      while (v14 != v17);
    }
    goto LABEL_32;
  }
LABEL_54:
  uint64_t v54 = *((void *)__src + 56);
  int v55 = *(char **)(a1 + 1024);
  unint64_t v56 = *(void *)(a1 + 1032);
  if ((unint64_t)v55 < v56)
  {
    *(void *)int v55 = v54;
    uint64_t v57 = (uint64_t)(v55 + 8);
    goto LABEL_76;
  }
  unint64_t v58 = *v127;
  uint64_t v59 = v55 - *v127;
  uint64_t v60 = v59 >> 3;
  unint64_t v61 = (v59 >> 3) + 1;
  if (v61 >> 61) {
    sub_19E13D694();
  }
  uint64_t v62 = v56 - (void)v58;
  if (v62 >> 2 > v61) {
    unint64_t v61 = v62 >> 2;
  }
  if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v63 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v63 = v61;
  }
  if (!v63)
  {
    size_t v64 = 0;
    size_t v65 = (void *)(8 * v60);
    size_t v66 = 0;
    *(void *)(8 * v60) = v54;
    uint64_t v57 = 8 * v60 + 8;
    int v67 = (char *)(v55 - v58);
    if (v55 != v58) {
      goto LABEL_65;
    }
LABEL_74:
    *(void *)(a1 + 1016) = v65;
    *(void *)(a1 + 1024) = v57;
    *(void *)(a1 + 1032) = v66;
    if (!v55) {
      goto LABEL_76;
    }
    goto LABEL_75;
  }
  if (v63 >> 61) {
    sub_19E13C418();
  }
  size_t v64 = operator new(8 * v63);
  size_t v65 = &v64[8 * v60];
  size_t v66 = &v64[8 * v63];
  *size_t v65 = v54;
  uint64_t v57 = (uint64_t)(v65 + 1);
  int v67 = (char *)(v55 - v58);
  if (v55 == v58) {
    goto LABEL_74;
  }
LABEL_65:
  unint64_t v68 = (unint64_t)(v67 - 8);
  if (v68 < 0x58) {
    goto LABEL_140;
  }
  if ((unint64_t)(v55 - &v64[v59]) < 0x20) {
    goto LABEL_140;
  }
  uint64_t v69 = (v68 >> 3) + 1;
  uint64_t v70 = 8 * (v69 & 0x3FFFFFFFFFFFFFFCLL);
  unint64_t v71 = &v55[-v70];
  size_t v65 = (void *)((char *)v65 - v70);
  long long v72 = &v64[8 * v60 - 16];
  int64_t v73 = v55 - 16;
  uint64_t v74 = v69 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v75 = *(_OWORD *)v73;
    *(v72 - 1) = *((_OWORD *)v73 - 1);
    *long long v72 = v75;
    v72 -= 2;
    v73 -= 32;
    v74 -= 4;
  }
  while (v74);
  int v55 = v71;
  if (v69 != (v69 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_140:
    do
    {
      uint64_t v76 = *((void *)v55 - 1);
      v55 -= 8;
      *--size_t v65 = v76;
    }
    while (v55 != v58);
  }
  int v55 = *v127;
  *(void *)(a1 + 1016) = v65;
  *(void *)(a1 + 1024) = v57;
  *(void *)(a1 + 1032) = v66;
  if (v55)
  {
LABEL_75:
    operator delete(v55);
    LODWORD(v9) = *(_DWORD *)(a1 + 1064);
  }
LABEL_76:
  *(void *)(a1 + 1024) = v57;
  if ((int)v9 >= 2)
  {
    uint64_t v77 = 1;
    uint64_t v128 = __src;
    do
    {
      float v79 = &__src[2 * v77];
      uint64_t v80 = *((void *)v79 + 56);
      uint64_t v81 = *(char **)(a1 + 1024);
      unint64_t v82 = *(void *)(a1 + 1032);
      if ((unint64_t)v81 < v82)
      {
        *(void *)uint64_t v81 = v80;
        uint64_t v83 = (uint64_t)(v81 + 8);
        goto LABEL_103;
      }
      long long v84 = *v127;
      uint64_t v85 = v81 - *v127;
      uint64_t v86 = v85 >> 3;
      unint64_t v87 = (v85 >> 3) + 1;
      if (v87 >> 61) {
        sub_19E13D694();
      }
      uint64_t v88 = v82 - (void)v84;
      if (v88 >> 2 > v87) {
        unint64_t v87 = v88 >> 2;
      }
      if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v89 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v89 = v87;
      }
      if (v89)
      {
        if (v89 >> 61) {
          sub_19E13C418();
        }
        float v90 = operator new(8 * v89);
        float v91 = &v90[8 * v86];
        *float v91 = v80;
        uint64_t v83 = (uint64_t)(v91 + 1);
        if (v81 != v84)
        {
LABEL_91:
          unint64_t v92 = v81 - 8 - v84;
          if (v92 < 0x58)
          {
            __src = v128;
            goto LABEL_100;
          }
          unint64_t v93 = v81 - &v90[v85];
          __src = v128;
          if (v93 < 0x20) {
            goto LABEL_141;
          }
          uint64_t v94 = (v92 >> 3) + 1;
          uint64_t v95 = 8 * (v94 & 0x3FFFFFFFFFFFFFFCLL);
          int v96 = &v81[-v95];
          float v91 = (void *)((char *)v91 - v95);
          uint64_t v97 = &v90[8 * v86 - 16];
          int v98 = v81 - 16;
          uint64_t v99 = v94 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v100 = *(_OWORD *)v98;
            *(v97 - 1) = *((_OWORD *)v98 - 1);
            *uint64_t v97 = v100;
            v97 -= 2;
            v98 -= 32;
            v99 -= 4;
          }
          while (v99);
          uint64_t v81 = v96;
          if (v94 != (v94 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_141:
            do
            {
LABEL_100:
              uint64_t v101 = *((void *)v81 - 1);
              v81 -= 8;
              *--float v91 = v101;
            }
            while (v81 != v84);
          }
          uint64_t v81 = *v127;
          *(void *)(a1 + 1016) = v91;
          *(void *)(a1 + 1024) = v83;
          *(void *)(a1 + 1032) = &v90[8 * v89];
          if (!v81) {
            goto LABEL_103;
          }
LABEL_102:
          operator delete(v81);
          goto LABEL_103;
        }
      }
      else
      {
        float v90 = 0;
        float v91 = (void *)(8 * v86);
        *(void *)(8 * v86) = v80;
        uint64_t v83 = 8 * v86 + 8;
        if (v81 != v84) {
          goto LABEL_91;
        }
      }
      __src = v128;
      *(void *)(a1 + 1016) = v91;
      *(void *)(a1 + 1024) = v83;
      *(void *)(a1 + 1032) = &v90[8 * v89];
      if (v81) {
        goto LABEL_102;
      }
LABEL_103:
      *(void *)(a1 + 1024) = v83;
      uint64_t v102 = *((void *)v79 + 71);
      int v103 = *(char **)(a1 + 1048);
      unint64_t v104 = *(void *)(a1 + 1056);
      if ((unint64_t)v103 < v104)
      {
        *(void *)int v103 = v102;
        uint64_t v78 = (uint64_t)(v103 + 8);
        goto LABEL_79;
      }
      uint64_t v105 = *v126;
      uint64_t v106 = v103 - *v126;
      uint64_t v107 = v106 >> 3;
      unint64_t v108 = (v106 >> 3) + 1;
      if (v108 >> 61) {
        sub_19E13D694();
      }
      uint64_t v109 = v104 - (void)v105;
      if (v109 >> 2 > v108) {
        unint64_t v108 = v109 >> 2;
      }
      if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v110 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v110 = v108;
      }
      if (v110)
      {
        if (v110 >> 61) {
          sub_19E13C418();
        }
        int64_t v111 = operator new(8 * v110);
        long long v112 = &v111[8 * v107];
        void *v112 = v102;
        uint64_t v78 = (uint64_t)(v112 + 1);
        if (v103 == v105)
        {
LABEL_116:
          __src = v128;
          *(void *)(a1 + 1040) = v112;
          *(void *)(a1 + 1048) = v78;
          *(void *)(a1 + 1056) = &v111[8 * v110];
          if (!v103) {
            goto LABEL_79;
          }
LABEL_124:
          operator delete(v103);
          goto LABEL_79;
        }
      }
      else
      {
        int64_t v111 = 0;
        long long v112 = (void *)(8 * v107);
        *(void *)(8 * v107) = v102;
        uint64_t v78 = 8 * v107 + 8;
        if (v103 == v105) {
          goto LABEL_116;
        }
      }
      unint64_t v113 = v103 - 8 - v105;
      if (v113 < 0x58)
      {
        __src = v128;
        do
        {
LABEL_122:
          uint64_t v122 = *((void *)v103 - 1);
          v103 -= 8;
          *--long long v112 = v122;
        }
        while (v103 != v105);
        goto LABEL_123;
      }
      unint64_t v114 = v103 - &v111[v106];
      __src = v128;
      if (v114 < 0x20) {
        goto LABEL_122;
      }
      uint64_t v115 = (v113 >> 3) + 1;
      uint64_t v116 = 8 * (v115 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v117 = &v103[-v116];
      long long v112 = (void *)((char *)v112 - v116);
      CFDictionaryRef v118 = &v111[8 * v107 - 16];
      int v119 = (long long *)(v103 - 16);
      uint64_t v120 = v115 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v121 = *v119;
        *(v118 - 1) = *(v119 - 1);
        *CFDictionaryRef v118 = v121;
        v118 -= 2;
        v119 -= 2;
        v120 -= 4;
      }
      while (v120);
      int v103 = v117;
      if (v115 != (v115 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_122;
      }
LABEL_123:
      int v103 = *v126;
      *(void *)(a1 + 1040) = v112;
      *(void *)(a1 + 1048) = v78;
      *(void *)(a1 + 1056) = &v111[8 * v110];
      if (v103) {
        goto LABEL_124;
      }
LABEL_79:
      *(void *)(a1 + 1048) = v78;
      ++v77;
    }
    while (v77 < *(int *)(a1 + 1064));
  }
  return a1;
}

void sub_19E15E5A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, void **a12, void **a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  unint64_t v22 = *a10;
  if (*a10)
  {
    v20[138] = v22;
    operator delete(v22);
    BOOL v23 = *a11;
    if (!*a11)
    {
LABEL_3:
      int v24 = *a12;
      if (!*a12) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    BOOL v23 = *a11;
    if (!*a11) {
      goto LABEL_3;
    }
  }
  v20[135] = v23;
  operator delete(v23);
  int v24 = *a12;
  if (!*a12)
  {
LABEL_4:
    unint64_t v25 = *a13;
    if (!*a13) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  v20[131] = v24;
  operator delete(v24);
  unint64_t v25 = *a13;
  if (!*a13)
  {
LABEL_5:
    sub_19E25BF30((uint64_t)v20);
    _Unwind_Resume(a1);
  }
LABEL_9:
  v20[128] = v25;
  operator delete(v25);
  sub_19E25BF30((uint64_t)v20);
  _Unwind_Resume(a1);
}

uint64_t sub_19E15E67C(void *a1, uint64_t a2)
{
  unint64_t v4 = (void *)a1[20];
  unint64_t v5 = (void *)a1[21];
  if (v4 == v5)
  {
    a1[21] = v4;
    if (!a1[31]) {
      goto LABEL_10;
    }
    goto LABEL_8;
  }
  do
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  while (v4 != v5);
  a1[21] = a1[20];
  if (a1[31])
  {
LABEL_8:
    uint64_t v7 = a1[29];
    unint64_t v6 = (uint64_t *)a1[30];
    uint64_t v8 = *v6;
    *(void *)(v8 + 8) = *(void *)(v7 + 8);
    **(void **)(v7 + 8) = v8;
    a1[31] = 0;
    if (v6 != a1 + 29)
    {
      do
      {
        uint64_t v9 = (uint64_t *)v6[1];
        operator delete(v6);
        unint64_t v6 = v9;
      }
      while (v9 != a1 + 29);
    }
  }
LABEL_10:
  uint64_t v10 = *(uint64_t (**)(uint64_t, void *))(*(void *)a2 + 56);

  return v10(a2, a1);
}

int64x2_t sub_19E15E784(uint64_t a1, int a2)
{
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 224))(a1);
  int v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 216))(a1, 1);
  uint64_t v7 = (uint64_t **)(a1 + 48);
  unint64_t v6 = *(char **)(a1 + 48);
  uint64_t v8 = *(int *)(a1 + 568);
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v9 = v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v10 <= a2) {
          break;
        }
        unint64_t v6 = *(char **)v9;
        uint64_t v7 = (uint64_t **)v9;
        if (!*(void *)v9) {
          goto LABEL_8;
        }
      }
      if (v10 >= a2) {
        break;
      }
      unint64_t v6 = (char *)*((void *)v9 + 1);
      if (!v6)
      {
        uint64_t v7 = (uint64_t **)(v9 + 8);
        goto LABEL_8;
      }
    }
  }
  else
  {
    uint64_t v9 = (char *)(a1 + 48);
LABEL_8:
    uint64_t v11 = v9;
    uint64_t v9 = (char *)operator new(0x50uLL);
    *((_DWORD *)v9 + 8) = a2;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *((void *)v9 + 9) = 0;
    *(void *)uint64_t v9 = 0;
    *((void *)v9 + 1) = 0;
    *((void *)v9 + 2) = v11;
    char *v7 = (uint64_t *)v9;
    uint64_t v12 = **(void **)(a1 + 40);
    int v13 = (uint64_t *)v9;
    if (v12)
    {
      *(void *)(a1 + 40) = v12;
      int v13 = *v7;
    }
    sub_19E13C8A0(*(uint64_t **)(a1 + 48), v13);
    ++*(void *)(a1 + 56);
  }
  int64x2_t result = vdupq_n_s64(1uLL);
  *(int64x2_t *)(v9 + 40) = result;
  *((void *)v9 + 7) = v8;
  *((void *)v9 + 8) = v4;
  *((void *)v9 + 9) = v5;
  return result;
}

uint64_t sub_19E15E8D4(uint64_t a1, uint64_t a2, uint64_t a3, int *__src)
{
  uint64_t v135 = *MEMORY[0x1E4F143B8];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_19E13C2D0(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v130 = *(void *)(a2 + 16);
  }
  sub_19E25E2E0(a1, (long long *)__p, a3, __src);
  if (SHIBYTE(v130) < 0) {
    operator delete(__p[0]);
  }
  *(void *)a1 = &unk_1EF0AAB08;
  uint64_t v125 = (void **)(a1 + 1072);
  char v126 = (char **)(a1 + 1040);
  uint64_t v124 = (void **)(a1 + 1096);
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1032) = 0u;
  int v127 = (char **)(a1 + 1016);
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  LODWORD(v7) = __src[32];
  if ((int)v7 <= 1) {
    uint64_t v7 = 1;
  }
  else {
    uint64_t v7 = v7;
  }
  int v131 = 1;
  int64x2_t v132 = vdupq_n_s64(1uLL);
  uint64_t v133 = v7;
  int64x2_t v134 = v132;
  sub_19E13C5C0(a1 + 16, &v131, (int *)&v135);
  uint64_t v8 = __src[64];
  int v131 = 9;
  int64x2_t v132 = vdupq_n_s64(1uLL);
  int64x2_t v134 = 0uLL;
  uint64_t v133 = v8;
  sub_19E13C5C0(a1 + 40, &v131, (int *)&v135);
  LODWORD(v9) = __src[80];
  *(_DWORD *)(a1 + 1064) = v9;
  if ((int)v9 >= 1)
  {
    uint64_t v10 = 0;
    while (1)
    {
      float v12 = *(float *)(*((void *)__src + 71) + 4 * v10);
      int v13 = (int)(*(float *)(*((void *)__src + 70) + 4 * v10) + 0.5);
      id v14 = *(int **)(a1 + 1080);
      unint64_t v15 = *(void *)(a1 + 1088);
      if ((unint64_t)v14 < v15)
      {
        *id v14 = v13;
        uint64_t v16 = (uint64_t)(v14 + 1);
        goto LABEL_34;
      }
      uint64_t v17 = (int *)*v125;
      uint64_t v18 = (char *)v14 - (unsigned char *)*v125;
      uint64_t v19 = v18 >> 2;
      unint64_t v20 = (v18 >> 2) + 1;
      if (v20 >> 62) {
        sub_19E13D694();
      }
      uint64_t v21 = v15 - (void)v17;
      if (v21 >> 1 > v20) {
        unint64_t v20 = v21 >> 1;
      }
      unint64_t v22 = (unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v20;
      if (v22) {
        break;
      }
      BOOL v23 = 0;
      int v24 = (int *)(4 * v19);
      *(_DWORD *)(4 * v19) = v13;
      uint64_t v16 = 4 * v19 + 4;
      if (v14 != v17) {
        goto LABEL_26;
      }
LABEL_32:
      *(void *)(a1 + 1072) = v24;
      *(void *)(a1 + 1080) = v16;
      *(void *)(a1 + 1088) = &v23[4 * v22];
      if (v17) {
        operator delete(v17);
      }
LABEL_34:
      *(void *)(a1 + 1080) = v16;
      int v34 = (int)(v12 + 0.5);
      unint64_t v35 = *(int **)(a1 + 1104);
      unint64_t v36 = *(void *)(a1 + 1112);
      if ((unint64_t)v35 >= v36)
      {
        uint64_t v37 = (int *)*v124;
        uint64_t v38 = (char *)v35 - (unsigned char *)*v124;
        uint64_t v39 = v38 >> 2;
        unint64_t v40 = (v38 >> 2) + 1;
        if (v40 >> 62) {
          sub_19E13D694();
        }
        uint64_t v41 = v36 - (void)v37;
        if (v41 >> 1 > v40) {
          unint64_t v40 = v41 >> 1;
        }
        if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v42 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v42 = v40;
        }
        if (v42)
        {
          if (v42 >> 62) {
            sub_19E13C418();
          }
          size_t v43 = operator new(4 * v42);
          CFDictionaryRef v44 = (int *)&v43[4 * v39];
          *CFDictionaryRef v44 = v34;
          uint64_t v11 = (uint64_t)(v44 + 1);
          if (v35 == v37) {
            goto LABEL_52;
          }
LABEL_46:
          unint64_t v45 = (char *)(v35 - 1) - (char *)v37;
          if (v45 < 0x2C) {
            goto LABEL_138;
          }
          if ((unint64_t)((char *)v35 - &v43[v38]) < 0x20) {
            goto LABEL_138;
          }
          uint64_t v46 = (v45 >> 2) + 1;
          uint64_t v47 = 4 * (v46 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v48 = &v35[v47 / 0xFFFFFFFFFFFFFFFCLL];
          CFDictionaryRef v44 = (int *)((char *)v44 - v47);
          BOOL v49 = &v43[4 * v39 - 16];
          uint64_t v50 = v35 - 4;
          uint64_t v51 = v46 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v52 = *(_OWORD *)v50;
            *(v49 - 1) = *((_OWORD *)v50 - 1);
            *BOOL v49 = v52;
            v49 -= 2;
            v50 -= 8;
            v51 -= 8;
          }
          while (v51);
          unint64_t v35 = v48;
          if (v46 != (v46 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_138:
            do
            {
              int v53 = *--v35;
              *--CFDictionaryRef v44 = v53;
            }
            while (v35 != v37);
          }
        }
        else
        {
          size_t v43 = 0;
          CFDictionaryRef v44 = (int *)(4 * v39);
          *(_DWORD *)(4 * v39) = v34;
          uint64_t v11 = 4 * v39 + 4;
          if (v35 != v37) {
            goto LABEL_46;
          }
        }
LABEL_52:
        *(void *)(a1 + 1096) = v44;
        *(void *)(a1 + 1104) = v11;
        *(void *)(a1 + 1112) = &v43[4 * v42];
        if (v37) {
          operator delete(v37);
        }
        goto LABEL_12;
      }
      *unint64_t v35 = v34;
      uint64_t v11 = (uint64_t)(v35 + 1);
LABEL_12:
      *(void *)(a1 + 1104) = v11;
      ++v10;
      uint64_t v9 = *(int *)(a1 + 1064);
      if (v10 >= v9) {
        goto LABEL_54;
      }
    }
    if (v22 >> 62) {
      sub_19E13C418();
    }
    BOOL v23 = operator new(4 * v22);
    int v24 = (int *)&v23[4 * v19];
    *int v24 = v13;
    uint64_t v16 = (uint64_t)(v24 + 1);
    if (v14 == v17) {
      goto LABEL_32;
    }
LABEL_26:
    unint64_t v25 = (char *)(v14 - 1) - (char *)v17;
    if (v25 < 0x2C) {
      goto LABEL_139;
    }
    if ((unint64_t)((char *)v14 - &v23[v18]) < 0x20) {
      goto LABEL_139;
    }
    uint64_t v26 = (v25 >> 2) + 1;
    uint64_t v27 = 4 * (v26 & 0x7FFFFFFFFFFFFFF8);
    int v28 = &v14[v27 / 0xFFFFFFFFFFFFFFFCLL];
    int v24 = (int *)((char *)v24 - v27);
    unint64_t v29 = &v23[4 * v19 - 16];
    int v30 = v14 - 4;
    uint64_t v31 = v26 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v32 = *(_OWORD *)v30;
      *(v29 - 1) = *((_OWORD *)v30 - 1);
      *unint64_t v29 = v32;
      v29 -= 2;
      v30 -= 8;
      v31 -= 8;
    }
    while (v31);
    id v14 = v28;
    if (v26 != (v26 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_139:
      do
      {
        int v33 = *--v14;
        *--int v24 = v33;
      }
      while (v14 != v17);
    }
    goto LABEL_32;
  }
LABEL_54:
  uint64_t v54 = *((void *)__src + 56);
  int v55 = *(char **)(a1 + 1024);
  unint64_t v56 = *(void *)(a1 + 1032);
  if ((unint64_t)v55 < v56)
  {
    *(void *)int v55 = v54;
    uint64_t v57 = (uint64_t)(v55 + 8);
    goto LABEL_76;
  }
  unint64_t v58 = *v127;
  uint64_t v59 = v55 - *v127;
  uint64_t v60 = v59 >> 3;
  unint64_t v61 = (v59 >> 3) + 1;
  if (v61 >> 61) {
    sub_19E13D694();
  }
  uint64_t v62 = v56 - (void)v58;
  if (v62 >> 2 > v61) {
    unint64_t v61 = v62 >> 2;
  }
  if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v63 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v63 = v61;
  }
  if (!v63)
  {
    size_t v64 = 0;
    size_t v65 = (void *)(8 * v60);
    size_t v66 = 0;
    *(void *)(8 * v60) = v54;
    uint64_t v57 = 8 * v60 + 8;
    int v67 = (char *)(v55 - v58);
    if (v55 != v58) {
      goto LABEL_65;
    }
LABEL_74:
    *(void *)(a1 + 1016) = v65;
    *(void *)(a1 + 1024) = v57;
    *(void *)(a1 + 1032) = v66;
    if (!v55) {
      goto LABEL_76;
    }
    goto LABEL_75;
  }
  if (v63 >> 61) {
    sub_19E13C418();
  }
  size_t v64 = operator new(8 * v63);
  size_t v65 = &v64[8 * v60];
  size_t v66 = &v64[8 * v63];
  *size_t v65 = v54;
  uint64_t v57 = (uint64_t)(v65 + 1);
  int v67 = (char *)(v55 - v58);
  if (v55 == v58) {
    goto LABEL_74;
  }
LABEL_65:
  unint64_t v68 = (unint64_t)(v67 - 8);
  if (v68 < 0x58) {
    goto LABEL_140;
  }
  if ((unint64_t)(v55 - &v64[v59]) < 0x20) {
    goto LABEL_140;
  }
  uint64_t v69 = (v68 >> 3) + 1;
  uint64_t v70 = 8 * (v69 & 0x3FFFFFFFFFFFFFFCLL);
  unint64_t v71 = &v55[-v70];
  size_t v65 = (void *)((char *)v65 - v70);
  long long v72 = &v64[8 * v60 - 16];
  int64_t v73 = v55 - 16;
  uint64_t v74 = v69 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v75 = *(_OWORD *)v73;
    *(v72 - 1) = *((_OWORD *)v73 - 1);
    *long long v72 = v75;
    v72 -= 2;
    v73 -= 32;
    v74 -= 4;
  }
  while (v74);
  int v55 = v71;
  if (v69 != (v69 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_140:
    do
    {
      uint64_t v76 = *((void *)v55 - 1);
      v55 -= 8;
      *--size_t v65 = v76;
    }
    while (v55 != v58);
  }
  int v55 = *v127;
  *(void *)(a1 + 1016) = v65;
  *(void *)(a1 + 1024) = v57;
  *(void *)(a1 + 1032) = v66;
  if (v55)
  {
LABEL_75:
    operator delete(v55);
    LODWORD(v9) = *(_DWORD *)(a1 + 1064);
  }
LABEL_76:
  *(void *)(a1 + 1024) = v57;
  if ((int)v9 >= 2)
  {
    uint64_t v77 = 1;
    uint64_t v128 = __src;
    do
    {
      float v79 = &__src[2 * v77];
      uint64_t v80 = *((void *)v79 + 56);
      uint64_t v81 = *(char **)(a1 + 1024);
      unint64_t v82 = *(void *)(a1 + 1032);
      if ((unint64_t)v81 < v82)
      {
        *(void *)uint64_t v81 = v80;
        uint64_t v83 = (uint64_t)(v81 + 8);
        goto LABEL_103;
      }
      long long v84 = *v127;
      uint64_t v85 = v81 - *v127;
      uint64_t v86 = v85 >> 3;
      unint64_t v87 = (v85 >> 3) + 1;
      if (v87 >> 61) {
        sub_19E13D694();
      }
      uint64_t v88 = v82 - (void)v84;
      if (v88 >> 2 > v87) {
        unint64_t v87 = v88 >> 2;
      }
      if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v89 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v89 = v87;
      }
      if (v89)
      {
        if (v89 >> 61) {
          sub_19E13C418();
        }
        float v90 = operator new(8 * v89);
        float v91 = &v90[8 * v86];
        *float v91 = v80;
        uint64_t v83 = (uint64_t)(v91 + 1);
        if (v81 != v84)
        {
LABEL_91:
          unint64_t v92 = v81 - 8 - v84;
          if (v92 < 0x58)
          {
            __src = v128;
            goto LABEL_100;
          }
          unint64_t v93 = v81 - &v90[v85];
          __src = v128;
          if (v93 < 0x20) {
            goto LABEL_141;
          }
          uint64_t v94 = (v92 >> 3) + 1;
          uint64_t v95 = 8 * (v94 & 0x3FFFFFFFFFFFFFFCLL);
          int v96 = &v81[-v95];
          float v91 = (void *)((char *)v91 - v95);
          uint64_t v97 = &v90[8 * v86 - 16];
          int v98 = v81 - 16;
          uint64_t v99 = v94 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v100 = *(_OWORD *)v98;
            *(v97 - 1) = *((_OWORD *)v98 - 1);
            *uint64_t v97 = v100;
            v97 -= 2;
            v98 -= 32;
            v99 -= 4;
          }
          while (v99);
          uint64_t v81 = v96;
          if (v94 != (v94 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_141:
            do
            {
LABEL_100:
              uint64_t v101 = *((void *)v81 - 1);
              v81 -= 8;
              *--float v91 = v101;
            }
            while (v81 != v84);
          }
          uint64_t v81 = *v127;
          *(void *)(a1 + 1016) = v91;
          *(void *)(a1 + 1024) = v83;
          *(void *)(a1 + 1032) = &v90[8 * v89];
          if (!v81) {
            goto LABEL_103;
          }
LABEL_102:
          operator delete(v81);
          goto LABEL_103;
        }
      }
      else
      {
        float v90 = 0;
        float v91 = (void *)(8 * v86);
        *(void *)(8 * v86) = v80;
        uint64_t v83 = 8 * v86 + 8;
        if (v81 != v84) {
          goto LABEL_91;
        }
      }
      __src = v128;
      *(void *)(a1 + 1016) = v91;
      *(void *)(a1 + 1024) = v83;
      *(void *)(a1 + 1032) = &v90[8 * v89];
      if (v81) {
        goto LABEL_102;
      }
LABEL_103:
      *(void *)(a1 + 1024) = v83;
      uint64_t v102 = *((void *)v79 + 71);
      int v103 = *(char **)(a1 + 1048);
      unint64_t v104 = *(void *)(a1 + 1056);
      if ((unint64_t)v103 < v104)
      {
        *(void *)int v103 = v102;
        uint64_t v78 = (uint64_t)(v103 + 8);
        goto LABEL_79;
      }
      uint64_t v105 = *v126;
      uint64_t v106 = v103 - *v126;
      uint64_t v107 = v106 >> 3;
      unint64_t v108 = (v106 >> 3) + 1;
      if (v108 >> 61) {
        sub_19E13D694();
      }
      uint64_t v109 = v104 - (void)v105;
      if (v109 >> 2 > v108) {
        unint64_t v108 = v109 >> 2;
      }
      if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v110 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v110 = v108;
      }
      if (v110)
      {
        if (v110 >> 61) {
          sub_19E13C418();
        }
        int64_t v111 = operator new(8 * v110);
        long long v112 = &v111[8 * v107];
        void *v112 = v102;
        uint64_t v78 = (uint64_t)(v112 + 1);
        if (v103 == v105)
        {
LABEL_116:
          __src = v128;
          *(void *)(a1 + 1040) = v112;
          *(void *)(a1 + 1048) = v78;
          *(void *)(a1 + 1056) = &v111[8 * v110];
          if (!v103) {
            goto LABEL_79;
          }
LABEL_124:
          operator delete(v103);
          goto LABEL_79;
        }
      }
      else
      {
        int64_t v111 = 0;
        long long v112 = (void *)(8 * v107);
        *(void *)(8 * v107) = v102;
        uint64_t v78 = 8 * v107 + 8;
        if (v103 == v105) {
          goto LABEL_116;
        }
      }
      unint64_t v113 = v103 - 8 - v105;
      if (v113 < 0x58)
      {
        __src = v128;
        do
        {
LABEL_122:
          uint64_t v122 = *((void *)v103 - 1);
          v103 -= 8;
          *--long long v112 = v122;
        }
        while (v103 != v105);
        goto LABEL_123;
      }
      unint64_t v114 = v103 - &v111[v106];
      __src = v128;
      if (v114 < 0x20) {
        goto LABEL_122;
      }
      uint64_t v115 = (v113 >> 3) + 1;
      uint64_t v116 = 8 * (v115 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v117 = &v103[-v116];
      long long v112 = (void *)((char *)v112 - v116);
      CFDictionaryRef v118 = &v111[8 * v107 - 16];
      int v119 = (long long *)(v103 - 16);
      uint64_t v120 = v115 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v121 = *v119;
        *(v118 - 1) = *(v119 - 1);
        *CFDictionaryRef v118 = v121;
        v118 -= 2;
        v119 -= 2;
        v120 -= 4;
      }
      while (v120);
      int v103 = v117;
      if (v115 != (v115 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_122;
      }
LABEL_123:
      int v103 = *v126;
      *(void *)(a1 + 1040) = v112;
      *(void *)(a1 + 1048) = v78;
      *(void *)(a1 + 1056) = &v111[8 * v110];
      if (v103) {
        goto LABEL_124;
      }
LABEL_79:
      *(void *)(a1 + 1048) = v78;
      ++v77;
    }
    while (v77 < *(int *)(a1 + 1064));
  }
  return a1;
}

void sub_19E15F1F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, void **a12, void **a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  unint64_t v22 = *a10;
  if (*a10)
  {
    v20[138] = v22;
    operator delete(v22);
    BOOL v23 = *a11;
    if (!*a11)
    {
LABEL_3:
      int v24 = *a12;
      if (!*a12) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    BOOL v23 = *a11;
    if (!*a11) {
      goto LABEL_3;
    }
  }
  v20[135] = v23;
  operator delete(v23);
  int v24 = *a12;
  if (!*a12)
  {
LABEL_4:
    unint64_t v25 = *a13;
    if (!*a13) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  v20[131] = v24;
  operator delete(v24);
  unint64_t v25 = *a13;
  if (!*a13)
  {
LABEL_5:
    sub_19E25E4C4((uint64_t)v20);
    _Unwind_Resume(a1);
  }
LABEL_9:
  v20[128] = v25;
  operator delete(v25);
  sub_19E25E4C4((uint64_t)v20);
  _Unwind_Resume(a1);
}

uint64_t sub_19E15F2D4(void *a1, uint64_t a2)
{
  int v4 = (void *)a1[20];
  int v5 = (void *)a1[21];
  if (v4 == v5)
  {
    a1[21] = v4;
    if (!a1[31]) {
      goto LABEL_10;
    }
    goto LABEL_8;
  }
  do
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  while (v4 != v5);
  a1[21] = a1[20];
  if (a1[31])
  {
LABEL_8:
    uint64_t v7 = a1[29];
    unint64_t v6 = (uint64_t *)a1[30];
    uint64_t v8 = *v6;
    *(void *)(v8 + 8) = *(void *)(v7 + 8);
    **(void **)(v7 + 8) = v8;
    a1[31] = 0;
    if (v6 != a1 + 29)
    {
      do
      {
        uint64_t v9 = (uint64_t *)v6[1];
        operator delete(v6);
        unint64_t v6 = v9;
      }
      while (v9 != a1 + 29);
    }
  }
LABEL_10:
  uint64_t v10 = *(uint64_t (**)(uint64_t, void *))(*(void *)a2 + 160);

  return v10(a2, a1);
}

int64x2_t sub_19E15F3DC(uint64_t a1, int a2)
{
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 224))(a1);
  int v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 216))(a1, 1);
  uint64_t v7 = (uint64_t **)(a1 + 48);
  unint64_t v6 = *(char **)(a1 + 48);
  uint64_t v8 = *(int *)(a1 + 568);
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v9 = v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v10 <= a2) {
          break;
        }
        unint64_t v6 = *(char **)v9;
        uint64_t v7 = (uint64_t **)v9;
        if (!*(void *)v9) {
          goto LABEL_8;
        }
      }
      if (v10 >= a2) {
        break;
      }
      unint64_t v6 = (char *)*((void *)v9 + 1);
      if (!v6)
      {
        uint64_t v7 = (uint64_t **)(v9 + 8);
        goto LABEL_8;
      }
    }
  }
  else
  {
    uint64_t v9 = (char *)(a1 + 48);
LABEL_8:
    uint64_t v11 = v9;
    uint64_t v9 = (char *)operator new(0x50uLL);
    *((_DWORD *)v9 + 8) = a2;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *((void *)v9 + 9) = 0;
    *(void *)uint64_t v9 = 0;
    *((void *)v9 + 1) = 0;
    *((void *)v9 + 2) = v11;
    char *v7 = (uint64_t *)v9;
    uint64_t v12 = **(void **)(a1 + 40);
    int v13 = (uint64_t *)v9;
    if (v12)
    {
      *(void *)(a1 + 40) = v12;
      int v13 = *v7;
    }
    sub_19E13C8A0(*(uint64_t **)(a1 + 48), v13);
    ++*(void *)(a1 + 56);
  }
  int64x2_t result = vdupq_n_s64(1uLL);
  *(int64x2_t *)(v9 + 40) = result;
  *((void *)v9 + 7) = v8;
  *((void *)v9 + 8) = v4;
  *((void *)v9 + 9) = v5;
  return result;
}

uint64_t sub_19E15F52C(void *a1, int a2, int a3)
{
  uint64_t v4 = (a3 * a2);
  sub_19E25D6DC((uint64_t)a1);
  (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 312))(a1, 1, v4);
  if ((int)v4 >= 1)
  {
    do
    {
      uint64_t v7 = sub_19E25D8B0((uint64_t)a1, 1);
      uint64_t v8 = (char *)a1[138];
      uint64_t v9 = (char *)a1[137];
      uint64_t v10 = v8 - v9;
      if (v8 != v9)
      {
        int v11 = (int)(*(float *)*v7 + 0.5);
        int v12 = v11 - *(_DWORD *)v9;
        if (v11 < *(_DWORD *)v9)
        {
          *(float *)*sub_19E25D8B0((uint64_t)a1, 1) = (float)v11;
          int v5 = (void *)a1[20];
        }
        else
        {
          if ((unint64_t)v10 < 5) {
            goto LABEL_5;
          }
          unint64_t v13 = v10 >> 2;
          unint64_t v14 = 1;
          while (1)
          {
            int v15 = *(_DWORD *)&v9[4 * v14];
            BOOL v16 = __OFSUB__(v12, v15);
            int v17 = v12 - v15;
            if (v17 < 0 != v16) {
              break;
            }
            ++v14;
            int v12 = v17;
            if (v13 <= v14) {
              goto LABEL_5;
            }
          }
          *(float *)*sub_19E25D8B0((uint64_t)a1, 1) = (float)v12;
          int v18 = 2 * v14;
          uint64_t v19 = *(void *)(a1[20] + 8 * (v18 - 1));
          (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 16))(v19, 1);
          int v5 = (void *)(a1[20] + 8 * v18);
        }
        (*(void (**)(void, uint64_t))(*(void *)*v5 + 16))(*v5, 1);
      }
LABEL_5:
      (*(void (**)(void *, uint64_t))(*a1 + 320))(a1, 1);
      (*(void (**)(void *, uint64_t))(*a1 + 328))(a1, 1);
      BOOL v6 = (int)v4 <= 1;
      LODWORD(v4) = v4 - 1;
    }
    while (!v6);
  }
  sub_19E25D738((uint64_t)a1, 1);
  unint64_t v20 = *(uint64_t (**)(void *))(*a1 + 32);

  return v20(a1);
}

uint64_t sub_19E15F778(uint64_t a1, int a2, int a3)
{
  uint64_t v4 = (a3 * a2);
  sub_19E25D6DC(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 312))(a1, 1, v4);
  if ((int)v4 >= 1)
  {
    do
    {
      uint64_t v8 = sub_19E25D8B0(a1, 1);
      uint64_t v9 = *(char **)(a1 + 1104);
      uint64_t v10 = *(char **)(a1 + 1096);
      uint64_t v11 = v9 - v10;
      if (v9 != v10)
      {
        int v12 = (int)(*(float *)*v8 + 0.5);
        int v13 = v12 - *(_DWORD *)v10;
        if (v12 < *(_DWORD *)v10)
        {
          *(float *)*sub_19E25D8B0(a1, 1) = (float)v12;
          (*(void (**)(void, uint64_t))(***(void ***)(a1 + 160) + 16))(**(void **)(a1 + 160), 1);
          uint64_t v5 = 1;
        }
        else
        {
          if ((unint64_t)v11 < 5) {
            goto LABEL_5;
          }
          unint64_t v14 = v11 >> 2;
          unint64_t v15 = 1;
          while (1)
          {
            int v16 = *(_DWORD *)&v10[4 * v15];
            BOOL v17 = __OFSUB__(v13, v16);
            int v18 = v13 - v16;
            if (v18 < 0 != v17) {
              break;
            }
            ++v15;
            int v13 = v18;
            if (v14 <= v15) {
              goto LABEL_5;
            }
          }
          *(float *)*sub_19E25D8B0(a1, 1) = (float)v13;
          uint64_t v19 = *(void *)(*(void *)(a1 + 160) + ((uint64_t)(v15 << 33) >> 29));
          (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 16))(v19, 1);
          uint64_t v5 = (int)((2 * v15) | 1);
        }
        uint64_t v6 = *(void *)(*(void *)(a1 + 160) + 8 * v5);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, 1);
      }
LABEL_5:
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 320))(a1, 1);
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 328))(a1, 1);
      BOOL v7 = (int)v4 <= 1;
      LODWORD(v4) = v4 - 1;
    }
    while (!v7);
  }
  sub_19E25D738(a1, 1);
  unint64_t v20 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 32);

  return v20(a1);
}

uint64_t sub_19E15F9F8(void *a1)
{
  *a1 = &unk_1EF0AAC78;
  CFNumberRef v2 = (void *)a1[137];
  if (v2)
  {
    a1[138] = v2;
    operator delete(v2);
  }
  CFNumberType v3 = (void *)a1[134];
  if (v3)
  {
    a1[135] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[130];
  if (v4)
  {
    a1[131] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[127];
  if (v5)
  {
    a1[128] = v5;
    operator delete(v5);
  }

  return sub_19E25BF30((uint64_t)a1);
}

void sub_19E15FA88(void *a1)
{
  *a1 = &unk_1EF0AAC78;
  CFNumberRef v2 = (void *)a1[137];
  if (v2)
  {
    a1[138] = v2;
    operator delete(v2);
  }
  CFNumberType v3 = (void *)a1[134];
  if (v3)
  {
    a1[135] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[130];
  if (v4)
  {
    a1[131] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[127];
  if (v5)
  {
    a1[128] = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)sub_19E25BF30((uint64_t)a1);

  operator delete(v6);
}

uint64_t sub_19E15FB1C(void *a1)
{
  *a1 = &unk_1EF0AAB08;
  CFNumberRef v2 = (void *)a1[137];
  if (v2)
  {
    a1[138] = v2;
    operator delete(v2);
  }
  CFNumberType v3 = (void *)a1[134];
  if (v3)
  {
    a1[135] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[130];
  if (v4)
  {
    a1[131] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[127];
  if (v5)
  {
    a1[128] = v5;
    operator delete(v5);
  }

  return sub_19E25E4C4((uint64_t)a1);
}

void sub_19E15FBAC(void *a1)
{
  *a1 = &unk_1EF0AAB08;
  CFNumberRef v2 = (void *)a1[137];
  if (v2)
  {
    a1[138] = v2;
    operator delete(v2);
  }
  CFNumberType v3 = (void *)a1[134];
  if (v3)
  {
    a1[135] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[130];
  if (v4)
  {
    a1[131] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[127];
  if (v5)
  {
    a1[128] = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)sub_19E25E4C4((uint64_t)a1);

  operator delete(v6);
}

void sub_19E15FC40(uint64_t a1)
{
}

uint64_t sub_19E15FD10(void *a1)
{
  *a1 = &unk_1EF0A9C10;
  espresso_plan_destroy();
  espresso_context_destroy();
  CFNumberRef v2 = (void **)a1[98];
  if (v2)
  {
    do
    {
      uint64_t v11 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      CFNumberRef v2 = v11;
    }
    while (v11);
  }
  CFNumberType v3 = (void *)a1[96];
  a1[96] = 0;
  if (v3) {
    operator delete(v3);
  }
  uint64_t v4 = (void **)a1[93];
  if (v4)
  {
    do
    {
      int v12 = (void **)*v4;
      if (*((char *)v4 + 39) < 0) {
        operator delete(v4[2]);
      }
      operator delete(v4);
      uint64_t v4 = v12;
    }
    while (v12);
  }
  uint64_t v5 = (void *)a1[91];
  a1[91] = 0;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = (void **)a1[88];
  if (v6)
  {
    do
    {
      int v13 = (void **)*v6;
      if (*((char *)v6 + 39) < 0) {
        operator delete(v6[2]);
      }
      operator delete(v6);
      uint64_t v6 = v13;
    }
    while (v13);
  }
  BOOL v7 = (void *)a1[86];
  a1[86] = 0;
  if (v7) {
    operator delete(v7);
  }
  uint64_t v8 = a1[83];
  if (v8)
  {
    uint64_t v9 = a1[84];
    uint64_t v10 = (void *)a1[83];
    if (v9 != v8)
    {
      do
      {
        if (*(char *)(v9 - 1) < 0) {
          operator delete(*(void **)(v9 - 24));
        }
        v9 -= 24;
      }
      while (v9 != v8);
      uint64_t v10 = (void *)a1[83];
    }
    a1[84] = v8;
    operator delete(v10);
  }
  unint64_t v14 = (void **)a1[80];
  if (v14)
  {
    do
    {
      int v33 = (void **)*v14;
      if (*((char *)v14 + 39) < 0) {
        operator delete(v14[2]);
      }
      operator delete(v14);
      unint64_t v14 = v33;
    }
    while (v33);
  }
  unint64_t v15 = (void *)a1[78];
  a1[78] = 0;
  if (v15) {
    operator delete(v15);
  }
  int v16 = (char *)a1[75];
  if (v16)
  {
    do
    {
      int v34 = *(char **)v16;
      unint64_t v35 = (void *)*((void *)v16 + 5);
      if (v35)
      {
        *((void *)v16 + 6) = v35;
        operator delete(v35);
      }
      if (v16[39] < 0) {
        operator delete(*((void **)v16 + 2));
      }
      operator delete(v16);
      int v16 = v34;
    }
    while (v34);
  }
  BOOL v17 = (void *)a1[73];
  a1[73] = 0;
  if (v17) {
    operator delete(v17);
  }
  int v18 = (void **)a1[70];
  if (v18)
  {
    do
    {
      unint64_t v36 = (void **)*v18;
      if (*((char *)v18 + 39) < 0) {
        operator delete(v18[2]);
      }
      operator delete(v18);
      int v18 = v36;
    }
    while (v36);
  }
  uint64_t v19 = (void *)a1[68];
  a1[68] = 0;
  if (v19) {
    operator delete(v19);
  }
  unint64_t v20 = (char *)a1[65];
  if (v20)
  {
    do
    {
      uint64_t v37 = *(char **)v20;
      uint64_t v38 = (void *)*((void *)v20 + 5);
      if (v38)
      {
        *((void *)v20 + 6) = v38;
        operator delete(v38);
      }
      if (v20[39] < 0) {
        operator delete(*((void **)v20 + 2));
      }
      operator delete(v20);
      unint64_t v20 = v37;
    }
    while (v37);
  }
  uint64_t v21 = (void *)a1[63];
  a1[63] = 0;
  if (v21) {
    operator delete(v21);
  }
  unint64_t v22 = (char *)a1[60];
  if (v22)
  {
    do
    {
      uint64_t v39 = *(char **)v22;
      unint64_t v40 = (void *)*((void *)v22 + 5);
      if (v40)
      {
        *((void *)v22 + 6) = v40;
        operator delete(v40);
      }
      if (v22[39] < 0) {
        operator delete(*((void **)v22 + 2));
      }
      operator delete(v22);
      unint64_t v22 = v39;
    }
    while (v39);
  }
  BOOL v23 = (void *)a1[58];
  a1[58] = 0;
  if (v23) {
    operator delete(v23);
  }
  int v24 = (void **)a1[55];
  if (v24)
  {
    do
    {
      uint64_t v41 = (void **)*v24;
      if (*((char *)v24 + 39) < 0) {
        operator delete(v24[2]);
      }
      operator delete(v24);
      int v24 = v41;
    }
    while (v41);
  }
  unint64_t v25 = (void *)a1[53];
  a1[53] = 0;
  if (v25) {
    operator delete(v25);
  }
  uint64_t v26 = (void **)a1[50];
  if (v26)
  {
    do
    {
      unint64_t v42 = (void **)*v26;
      if (*((char *)v26 + 39) < 0) {
        operator delete(v26[2]);
      }
      operator delete(v26);
      uint64_t v26 = v42;
    }
    while (v42);
  }
  uint64_t v27 = (void *)a1[48];
  a1[48] = 0;
  if (v27) {
    operator delete(v27);
  }
  int v28 = (void **)a1[45];
  if (v28)
  {
    do
    {
      size_t v43 = (void **)*v28;
      if (*((char *)v28 + 39) < 0) {
        operator delete(v28[2]);
      }
      operator delete(v28);
      int v28 = v43;
    }
    while (v43);
  }
  unint64_t v29 = (void *)a1[43];
  a1[43] = 0;
  if (v29) {
    operator delete(v29);
  }
  uint64_t v30 = a1[40];
  if (v30)
  {
    uint64_t v31 = a1[41];
    long long v32 = (void *)a1[40];
    if (v31 != v30)
    {
      do
      {
        if (*(char *)(v31 - 49) < 0) {
          operator delete(*(void **)(v31 - 72));
        }
        v31 -= 72;
      }
      while (v31 != v30);
      long long v32 = (void *)a1[40];
    }
    a1[41] = v30;
    operator delete(v32);
  }
  uint64_t v44 = a1[36];
  if (v44)
  {
    uint64_t v45 = a1[37];
    uint64_t v46 = (void *)a1[36];
    if (v45 != v44)
    {
      do
      {
        if (*(char *)(v45 - 1) < 0) {
          operator delete(*(void **)(v45 - 24));
        }
        v45 -= 24;
      }
      while (v45 != v44);
      uint64_t v46 = (void *)a1[36];
    }
    a1[37] = v44;
    operator delete(v46);
  }

  return sub_19E304940((uint64_t)a1);
}

void sub_19E160148(void *a1)
{
  CFNumberRef v1 = (void *)sub_19E15FD10(a1);

  operator delete(v1);
}

BOOL sub_19E160170(uint64_t a1, char **a2)
{
  char v2 = *((unsigned char *)a2 + 23);
  if (v2 >= 0) {
    uint64_t v3 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    uint64_t v3 = (uint64_t)a2[1];
  }
  if (v2 >= 0) {
    uint64_t v4 = (char *)a2;
  }
  else {
    uint64_t v4 = *a2;
  }
  if (v3 >= 7)
  {
    uint64_t v5 = v4;
    uint64_t v6 = &v4[v3];
    uint64_t v7 = v3;
    uint64_t v8 = v4;
    while (1)
    {
      uint64_t v9 = (char *)memchr(v8, 95, v7 - 6);
      if (!v9) {
        goto LABEL_18;
      }
      if (*(_DWORD *)v9 == 1935633247 && *(_DWORD *)(v9 + 3) == 1852399475) {
        break;
      }
      uint64_t v8 = v9 + 1;
      uint64_t v7 = v6 - (unsigned char *)v8;
      if (v6 - (unsigned char *)v8 < 7) {
        goto LABEL_18;
      }
    }
    if (v9 == v6 || v9 - v4 == -1)
    {
LABEL_18:
      uint64_t v11 = v3;
      int v12 = v4;
      do
      {
        int v13 = (char *)memchr(v12, 95, v11 - 6);
        if (!v13) {
          break;
        }
        if (*(_DWORD *)v13 == 1935636063 && *(_DWORD *)(v13 + 3) == 1852399475)
        {
          if (v13 != v6 && v13 - v4 != -1) {
            return 1;
          }
          break;
        }
        int v12 = v13 + 1;
        uint64_t v11 = v6 - (unsigned char *)v12;
      }
      while (v6 - (unsigned char *)v12 >= 7);
      if (v3 <= 7) {
        return 0;
      }
      uint64_t v15 = v3;
      int v16 = v4;
      while (1)
      {
        BOOL v17 = (char *)memchr(v16, 95, v15 - 7);
        if (!v17) {
          goto LABEL_39;
        }
        if (*(void *)v17 == 0x74756F5F735F6B5FLL) {
          break;
        }
        int v16 = v17 + 1;
        uint64_t v15 = v6 - (unsigned char *)v16;
        if (v6 - (unsigned char *)v16 < 8) {
          goto LABEL_39;
        }
      }
      if (v17 == v6 || v17 - v4 == -1)
      {
LABEL_39:
        while (1)
        {
          int v18 = (char *)memchr(v5, 95, v3 - 7);
          if (!v18) {
            break;
          }
          if (*(void *)v18 == 0x74756F5F735F765FLL) {
            return v18 != v6 && v18 - v4 != -1;
          }
          uint64_t v5 = v18 + 1;
          uint64_t v3 = v6 - (v18 + 1);
          if (v3 < 8) {
            return 0;
          }
        }
        return 0;
      }
    }
    return 1;
  }
  return 0;
}

BOOL sub_19E16034C(int a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 23);
  if (v3 >= 0) {
    uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v4 = *(void *)(a2 + 8);
  }
  if (v3 >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = *(void *)a2;
  }
  if (v4 >= 5)
  {
    uint64_t v6 = (void *)v5;
    uint64_t v7 = (char *)(v5 + v4);
    uint64_t v8 = v4;
    uint64_t v9 = (void *)v5;
    do
    {
      uint64_t v10 = (char *)memchr(v9, 95, v8 - 4);
      if (!v10) {
        break;
      }
      if (*(_DWORD *)v10 == 1767860319 && v10[4] == 110)
      {
        if (v10 != v7 && &v10[-v5] != (char *)-1) {
          return 1;
        }
        break;
      }
      uint64_t v9 = v10 + 1;
      uint64_t v8 = v7 - (unsigned char *)v9;
    }
    while (v7 - (unsigned char *)v9 >= 5);
    uint64_t v12 = v4;
    int v13 = (void *)v5;
    do
    {
      unint64_t v14 = (char *)memchr(v13, 95, v12 - 4);
      if (!v14) {
        break;
      }
      if (*(_DWORD *)v14 == 1767859039 && v14[4] == 110)
      {
        if (v14 != v7 && &v14[-v5] != (char *)-1) {
          return 1;
        }
        break;
      }
      int v13 = v14 + 1;
      uint64_t v12 = v7 - (unsigned char *)v13;
    }
    while (v7 - (unsigned char *)v13 >= 5);
    if (v4 < 7) {
      goto LABEL_48;
    }
    uint64_t v16 = v4;
    BOOL v17 = (void *)v5;
    while (1)
    {
      int v18 = memchr(v17, 95, v16 - 6);
      if (!v18) {
        goto LABEL_39;
      }
      if (*v18 == 1751085663 && *(_DWORD *)((char *)v18 + 3) == 1852399464) {
        break;
      }
      BOOL v17 = (char *)v18 + 1;
      uint64_t v16 = v7 - (unsigned char *)v17;
      if (v7 - (unsigned char *)v17 < 7) {
        goto LABEL_39;
      }
    }
    if (v18 != (_DWORD *)v7 && (_DWORD *)((char *)v18 - v5) != (_DWORD *)-1) {
      return 1;
    }
LABEL_39:
    do
    {
      unint64_t v20 = memchr(v6, 95, v4 - 6);
      if (!v20) {
        break;
      }
      if (*v20 == 1667199583 && *(_DWORD *)((char *)v20 + 3) == 1852399459)
      {
        if (v20 != (_DWORD *)v7 && (_DWORD *)((char *)v20 - v5) != (_DWORD *)-1) {
          return 1;
        }
        break;
      }
      uint64_t v6 = (char *)v20 + 1;
      uint64_t v4 = v7 - ((char *)v20 + 1);
    }
    while (v4 >= 7);
  }
LABEL_48:
  if (sub_19E1605BC((uint64_t *)a2, "_h_out", 0) != -1
    || sub_19E1605BC((uint64_t *)a2, "_c_out", 0) != -1
    || sub_19E1605BC((uint64_t *)a2, "_r_h_out", 0) != -1)
  {
    return 1;
  }
  return sub_19E1605BC((uint64_t *)a2, "_r_c_out", 0) != -1;
}

unint64_t sub_19E1605BC(uint64_t *a1, char *__s, unint64_t a3)
{
  uint64_t v5 = (uint64_t)a1;
  if (*((char *)a1 + 23) < 0)
  {
    uint64_t v5 = *a1;
    unint64_t v6 = a1[1];
    size_t v7 = strlen(__s);
    if (v6 < a3) {
      return -1;
    }
  }
  else
  {
    unint64_t v6 = *((unsigned __int8 *)a1 + 23);
    size_t v7 = strlen(__s);
    if (v6 < a3) {
      return -1;
    }
  }
  int64_t v9 = v7;
  if (v7)
  {
    uint64_t v10 = (void *)(v5 + a3);
    uint64_t v11 = (char *)(v5 + v6);
    int64_t v12 = v6 - a3;
    if ((uint64_t)(v6 - a3) >= v9)
    {
      int v14 = *__s;
      do
      {
        uint64_t v15 = v12 - v9;
        if (v15 == -1) {
          break;
        }
        uint64_t v16 = (char *)memchr(v10, v14, v15 + 1);
        if (!v16) {
          break;
        }
        int v13 = v16;
        if (!memcmp(v16, __s, v9)) {
          goto LABEL_9;
        }
        uint64_t v10 = v13 + 1;
        int64_t v12 = v11 - (v13 + 1);
      }
      while (v12 >= v9);
    }
    int v13 = v11;
LABEL_9:
    if (v13 == v11) {
      return -1;
    }
    else {
      return (unint64_t)&v13[-v5];
    }
  }
  return a3;
}

uint64_t sub_19E1606B4(uint64_t a1)
{
  CFNumberRef v1 = *(const void ***)(a1 + 664);
  char v2 = *(const void ***)(a1 + 672);
  if (v1 != v2)
  {
    LOBYTE(v3) = 1;
    while (1)
    {
      if (v3)
      {
        int v4 = *((char *)v1 + 23);
        if (v4 >= 0) {
          size_t v5 = *((unsigned __int8 *)v1 + 23);
        }
        else {
          size_t v5 = (size_t)v1[1];
        }
        unint64_t v6 = v5 + 3;
        if (v5 + 3 >= 0x7FFFFFFFFFFFFFF8) {
          sub_19E13C370();
        }
        if (v6 >= 0x17)
        {
          uint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v6 | 7) != 0x17) {
            uint64_t v8 = v6 | 7;
          }
          uint64_t v9 = v8 + 1;
          p_dst = (char *)operator new(v8 + 1);
          size_t v14 = v5 + 3;
          unint64_t v15 = v9 | 0x8000000000000000;
          long long __dst = p_dst;
LABEL_17:
          if (v4 >= 0) {
            uint64_t v10 = v1;
          }
          else {
            uint64_t v10 = *v1;
          }
          uint64_t v11 = memmove(p_dst, v10, v5);
          *(_DWORD *)&p_dst[v5] = 7235935;
          a1 = sub_19E160170((uint64_t)v11, &__dst);
          uint64_t v3 = a1;
          if ((SHIBYTE(v15) & 0x80000000) == 0) {
            goto LABEL_4;
          }
LABEL_21:
          operator delete(__dst);
          goto LABEL_4;
        }
        size_t v14 = 0;
        unint64_t v15 = 0;
        long long __dst = 0;
        p_dst = (char *)&__dst;
        HIBYTE(v15) = v5 + 3;
        if (v5) {
          goto LABEL_17;
        }
        LODWORD(__dst) = 7235935;
        a1 = sub_19E160170(a1, &__dst);
        uint64_t v3 = a1;
        if (SHIBYTE(v15) < 0) {
          goto LABEL_21;
        }
      }
      else
      {
        uint64_t v3 = 0;
      }
LABEL_4:
      v1 += 3;
      if (v1 == v2) {
        return v3;
      }
    }
  }
  return 0;
}

void sub_19E160804(uint64_t *a1@<X1>, void *a2@<X8>)
{
  int v3 = *((char *)a1 + 23);
  if (v3 >= 0) {
    int v4 = a1;
  }
  else {
    int v4 = (uint64_t *)*a1;
  }
  if (v3 >= 0) {
    uint64_t v5 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    uint64_t v5 = a1[1];
  }
  uint64_t v6 = (uint64_t)v4 + v5 - 3;
  unint64_t v7 = v5 - 3;
  if ((unint64_t)(v5 - 3) > 0x7FFFFFFFFFFFFFF7) {
    sub_19E13C370();
  }
  if (v7 > 0x16)
  {
    uint64_t v16 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v16 = v7 | 7;
    }
    uint64_t v17 = v16 + 1;
    p_p = operator new(v16 + 1);
    size_t v28 = v5 - 3;
    int64_t v29 = v17 | 0x8000000000000000;
    std::string __p = p_p;
    if (v4 != (uint64_t *)v6) {
      goto LABEL_10;
    }
LABEL_19:
    uint64_t v10 = p_p;
    goto LABEL_22;
  }
  HIBYTE(v29) = v5 - 3;
  p_p = &__p;
  if (v4 == (uint64_t *)v6) {
    goto LABEL_19;
  }
LABEL_10:
  uint64_t v9 = v5 - 3;
  if ((unint64_t)(v5 - 3) < 0x20 || (unint64_t)((char *)p_p - (char *)v4) < 0x20)
  {
    uint64_t v10 = p_p;
    uint64_t v11 = (char *)v4;
  }
  else
  {
    uint64_t v10 = (char *)p_p + (v9 & 0xFFFFFFFFFFFFFFE0);
    uint64_t v11 = (char *)v4 + (v9 & 0xFFFFFFFFFFFFFFE0);
    int64_t v12 = (long long *)(v4 + 2);
    int v13 = p_p + 1;
    unint64_t v14 = v9 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v15 = *v12;
      *(v13 - 1) = *(v12 - 1);
      *int v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 32;
    }
    while (v14);
    if (v9 == (v9 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_22;
    }
  }
  do
  {
    char v18 = *v11++;
    *v10++ = v18;
  }
  while (v11 != (char *)v6);
LABEL_22:
  unsigned char *v10 = 0;
  int v19 = SHIBYTE(v29);
  if (v29 >= 0) {
    size_t v20 = HIBYTE(v29);
  }
  else {
    size_t v20 = v28;
  }
  unint64_t v21 = v20 + 4;
  if (v20 + 4 > 0x7FFFFFFFFFFFFFF7) {
    sub_19E13C370();
  }
  if (v21 >= 0x17)
  {
    uint64_t v22 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17) {
      uint64_t v22 = v21 | 7;
    }
    uint64_t v23 = v22 + 1;
    int v24 = operator new(v22 + 1);
    a2[1] = v21;
    a2[2] = v23 | 0x8000000000000000;
    *a2 = v24;
    a2 = v24;
  }
  else
  {
    a2[1] = 0;
    a2[2] = 0;
    *a2 = 0;
    *((unsigned char *)a2 + 23) = v21;
    if (!v20)
    {
      strcpy((char *)a2, "_out");
      if ((v19 & 0x80000000) == 0) {
        return;
      }
      goto LABEL_37;
    }
  }
  if (v19 >= 0) {
    unint64_t v25 = &__p;
  }
  else {
    unint64_t v25 = __p;
  }
  memmove(a2, v25, v20);
  strcpy((char *)a2 + v20, "_out");
  if (v19 < 0)
  {
LABEL_37:
    uint64_t v26 = __p;
    operator delete(v26);
  }
}

void sub_19E160A34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (v10 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__CFArray *sub_19E160A4C(uint64_t a1)
{
  theArray = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  char v2 = sub_19E1606B4(a1);
  uint64_t v91 = a1;
  int v3 = *(_DWORD *)(a1 + 56);
  if ((v2 & 1) == 0)
  {
    if (v3 < 1) {
      return theArray;
    }
    int v33 = 0;
    while (1)
    {
      if (qword_1E9457D20 != -1) {
        dispatch_once(&qword_1E9457D20, &unk_1EF0ABF80);
      }
      uint64_t Instance = (uint64_t **)_CFRuntimeCreateInstance();
      Instance[3] = 0;
      Instance[2] = (uint64_t *)(Instance + 3);
      unint64_t v35 = Instance + 2;
      Instance[6] = 0;
      Instance[4] = 0;
      Instance[5] = (uint64_t *)(Instance + 6);
      Instance[8] = 0;
      Instance[9] = 0;
      Instance[7] = 0;
      valuea = Instance;
      unint64_t v36 = *(long long **)(v91 + 440);
      if (v36) {
        break;
      }
LABEL_43:
      CFArrayAppendValue(theArray, valuea);
      CFRelease(valuea);
      if (++v33 >= *(_DWORD *)(v91 + 56)) {
        return theArray;
      }
    }
    while (1)
    {
      if (*((void *)v36 + 18) != *(_DWORD *)(v91 + 56)) {
        return theArray;
      }
      if (*((void *)v36 + 5)) {
        break;
      }
LABEL_45:
      unint64_t v36 = *(long long **)v36;
      if (!v36) {
        goto LABEL_43;
      }
    }
    size_t v37 = *((void *)v36 + 16);
    uint64_t v39 = *((void *)v36 + 17);
    uint64_t v40 = *((void *)v36 + 19);
    v102[0] = *((void *)v36 + 15);
    int v38 = v102[0];
    v102[1] = v37;
    v102[2] = v39;
    v102[3] = 1;
    v102[4] = v40;
    sub_19E253744((uint64_t)v35, v36 + 1, (uint64_t)v102);
    uint64_t v41 = *((void *)v36 + 19);
    uint64_t v42 = (v38 * v37 * v39);
    uint64_t v43 = *((void *)v36 + 5);
    uint64_t v44 = (v42 * v40);
    uint64_t v99 = 0;
    long long v100 = 0;
    uint64_t v101 = 0;
    if (v44 << 32)
    {
      int v86 = v41;
      int v88 = v38;
      int v90 = v37;
      if (v44 << 32 < 0) {
        sub_19E13D694();
      }
      uint64_t v45 = (int)v44;
      size_t v37 = (4 * v44) & 0x3FFFFFFFFLL;
      uint64_t v46 = (char *)operator new(v37);
      uint64_t v99 = v46;
      uint64_t v101 = &v46[4 * v45];
      bzero(v46, v37);
      uint64_t v47 = v101;
      long long v100 = v101;
      int v38 = v88;
      LODWORD(v37) = v90;
      LODWORD(v41) = v86;
      if (v86 < 1) {
        goto LABEL_59;
      }
    }
    else
    {
      uint64_t v47 = 0;
      uint64_t v46 = 0;
      if ((int)v41 < 1)
      {
LABEL_59:
        sub_19E2536EC(v35, v36 + 1, v46, v47 - v46);
        if (v99) {
          operator delete(v99);
        }
        goto LABEL_45;
      }
    }
    if ((int)v42 >= 1)
    {
      uint64_t v48 = v41;
      int v49 = *(_DWORD *)(v91 + 56) * v38 * v37 * v39;
      uint64_t v50 = 4 * v42;
      int v51 = v33 * v38;
      if (v42 >= 8)
      {
        uint64_t v58 = 0;
        uint64_t v59 = 0;
        unint64_t v60 = v42 - 1;
        unint64_t v61 = v46 + 16;
        int v62 = v51 * v37 * v39;
        do
        {
          uint64_t v63 = 0;
          int v64 = v49 * v59 + v42 * v33;
          if (v64 + (int)v60 < v64 || HIDWORD(v60) != 0) {
            goto LABEL_72;
          }
          if ((unint64_t)&v46[v50 * v59 - v43 + -4 * v64] < 0x20) {
            goto LABEL_72;
          }
          int v66 = v62;
          uint64_t v67 = v42 & 0xFFFFFFF8;
          unint64_t v68 = v61;
          do
          {
            uint64_t v69 = (_OWORD *)(v43 + 4 * v66);
            long long v70 = v69[1];
            *(v68 - 1) = *v69;
            _OWORD *v68 = v70;
            v68 += 2;
            v66 += 8;
            v67 -= 8;
          }
          while (v67);
          uint64_t v63 = v42 & 0xFFFFFFF8;
          if (v63 != v42)
          {
LABEL_72:
            unint64_t v71 = &v46[4 * v63 + 4 * v58];
            int v72 = v62 + v63;
            uint64_t v73 = v42 - v63;
            do
            {
              *(_DWORD *)unint64_t v71 = *(_DWORD *)(v43 + 4 * v72);
              v71 += 4;
              ++v72;
              --v73;
            }
            while (v73);
          }
          ++v59;
          unint64_t v61 = (_OWORD *)((char *)v61 + v50);
          v62 += v49;
          v58 += v42;
        }
        while (v59 != v48);
      }
      else
      {
        uint64_t v52 = 0;
        int v53 = v51 * v37 * v39;
        uint64_t v54 = v46;
        do
        {
          int v55 = v53;
          unint64_t v56 = v54;
          uint64_t v57 = v42;
          do
          {
            *v56++ = *(_DWORD *)(v43 + 4 * v55++);
            --v57;
          }
          while (v57);
          ++v52;
          uint64_t v54 = (_DWORD *)((char *)v54 + v50);
          v53 += v49;
        }
        while (v52 != v48);
      }
    }
    goto LABEL_59;
  }
  if (v3 >= 1)
  {
    uint64_t v78 = 0;
    uint64_t v4 = 0;
    uint64_t v81 = a1 + 544;
    uint64_t v82 = a1 + 504;
    uint64_t v79 = a1 + 624;
    uint64_t v80 = a1 + 584;
    while (1)
    {
      uint64_t v75 = v4;
      if (qword_1E9457D20 != -1) {
        dispatch_once(&qword_1E9457D20, &unk_1EF0ABF80);
      }
      uint64_t v5 = (uint64_t **)_CFRuntimeCreateInstance();
      v5[3] = 0;
      v5[2] = (uint64_t *)(v5 + 3);
      unint64_t v89 = v5 + 2;
      v5[6] = 0;
      v5[4] = 0;
      v5[5] = (uint64_t *)(v5 + 6);
      v5[8] = 0;
      v5[9] = 0;
      v5[7] = 0;
      uint64_t v76 = v5;
      uint64_t v99 = 0;
      long long v100 = 0;
      uint64_t v101 = 0;
      uint64_t v6 = *(char **)(v91 + 664);
      value = *(char **)(v91 + 672);
      if (v6 != value) {
        break;
      }
LABEL_7:
      CFArrayAppendValue(theArray, v76);
      CFRelease(v76);
      if (v99)
      {
        long long v100 = v99;
        operator delete(v99);
      }
      uint64_t v4 = v75 + 1;
      v78 += 4;
      if (v75 + 1 >= *(int *)(v91 + 56)) {
        return theArray;
      }
    }
    while (1)
    {
      std::string __p = v6;
      uint64_t v7 = sub_19E140A3C(v82, (uint64_t)v6, (uint64_t)&unk_19E351150, (long long **)&__p)[5];
      std::string __p = v6;
      uint64_t v8 = sub_19E1403B8(v81, (uint64_t)v6, (uint64_t)&unk_19E351150, (long long **)&__p);
      uint64_t v10 = v8[5];
      uint64_t v9 = v8[6];
      uint64_t v11 = v8[7];
      uint64_t v12 = v8[9];
      std::string __p = v6;
      uint64_t v13 = sub_19E140A3C(v80, (uint64_t)v6, (uint64_t)&unk_19E351150, (long long **)&__p)[5];
      std::string __p = v6;
      unint64_t v14 = sub_19E1403B8(v79, (uint64_t)v6, (uint64_t)&unk_19E351150, (long long **)&__p);
      uint64_t v15 = v14[5];
      uint64_t v16 = v14[7];
      if (v16 != v11 || v15 != v10) {
        break;
      }
      uint64_t v85 = v7;
      uint64_t v87 = v13;
      uint64_t v18 = v14[6];
      v98[0] = v10;
      v98[1] = v18 + v9;
      v98[2] = v11;
      v98[3] = 1;
      v98[4] = v12;
      sub_19E253744((uint64_t)v89, (long long *)v6, (uint64_t)v98);
      uint64_t v19 = (v10 * (v18 + v9) * v11 * v12);
      std::string __p = 0;
      int v96 = 0;
      uint64_t v97 = 0;
      if (v19 << 32)
      {
        if (v19 << 32 < 0) {
          sub_19E13D694();
        }
        size_t v20 = (int)v19;
        unint64_t v21 = (char *)operator new((int)v19);
        uint64_t v22 = &v21[v20];
        std::string __p = v21;
        uint64_t v97 = &v21[v20];
        bzero(v21, v20);
        int v96 = v22;
      }
      unint64_t v23 = (int)v10 * ((int)v18 + (int)v9);
      unint64_t v24 = (v100 - v99) >> 2;
      if (v23 <= v24)
      {
        if (v23 < v24) {
          long long v100 = &v99[4 * v23];
        }
      }
      else
      {
        sub_19E164E6C((uint64_t)&v99, v23 - v24);
      }
      if (v11)
      {
        int v25 = v10 * v9;
        uint64_t v26 = (int)v15 * (int)v18 * (int)v16;
        vDSP_Length v27 = (int)v10 * (int)v9;
        vDSP_Length v28 = (int)v10 * (int)v18;
        if (v25)
        {
          uint64_t v29 = 0;
          uint64_t v30 = (const float *)(v87 + v78 * v26);
          uint64_t v31 = (const float *)(v85 + v78 * v25 * (int)v11);
          do
          {
            float __B = 128.0 / *(float *)(v91 + 808);
            float __C = 127.1;
            float v92 = -127.1;
            vDSP_vsmul(v31, 1, &__B, (float *)v99, 1, v27);
            vDSP_vclip((const float *)v99, 1, &v92, &__C, (float *)v99, 1, v27);
            vDSP_vfixr8((const float *)v99, 1, (char *)__p + v29, 1, v27);
            if (v28)
            {
              vDSP_vsmul(v30, 1, &__B, (float *)v99, 1, v28);
              vDSP_vclip((const float *)v99, 1, &v92, &__C, (float *)v99, 1, v28);
              vDSP_vfixr8((const float *)v99, 1, (char *)__p + v27 + v29, 1, v28);
            }
            sub_19E253694(v89, (long long *)v6, (char **)&__p);
            v30 += v28;
            v29 += v23;
            v31 += v27;
            --v11;
          }
          while (v11);
        }
        else if (v28)
        {
          long long v32 = (const float *)(v87 + v78 * v26);
          do
          {
            float __B = 128.0 / *(float *)(v91 + 808);
            float __C = 127.1;
            float v92 = -127.1;
            vDSP_vsmul(v32, 1, &__B, (float *)v99, 1, v28);
            vDSP_vclip((const float *)v99, 1, &v92, &__C, (float *)v99, 1, v28);
            vDSP_vfixr8((const float *)v99, 1, (char *)__p + v27, 1, v28);
            sub_19E253694(v89, (long long *)v6, (char **)&__p);
            v27 += v23;
            v32 += v28;
            --v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            float __B = 128.0 / *(float *)(v91 + 808);
            float __C = 127.1;
            float v92 = -127.1;
            sub_19E253694(v89, (long long *)v6, (char **)&__p);
            --v11;
          }
          while (v11);
        }
      }
      if (__p)
      {
        int v96 = __p;
        operator delete(__p);
      }
      v6 += 24;
      if (v6 == value) {
        goto LABEL_7;
      }
    }
    if (v99)
    {
      long long v100 = v99;
      operator delete(v99);
    }
  }
  return theArray;
}

void sub_19E1612D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  uint64_t v29 = *(void **)(v27 - 168);
  if (v29)
  {
    *(void *)(v27 - 160) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(exception_object);
}

__CFArray *sub_19E161340(uint64_t a1)
{
  theArray = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  if (!sub_19E1606B4(a1))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "no supported");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (*(int *)(a1 + 56) >= 1)
  {
    uint64_t v47 = 0;
    uint64_t v2 = 0;
    while (1)
    {
      uint64_t v45 = v2;
      if (qword_1E9457D20 != -1) {
        dispatch_once(&qword_1E9457D20, &unk_1EF0ABF80);
      }
      uint64_t Instance = (uint64_t **)_CFRuntimeCreateInstance();
      Instance[3] = 0;
      Instance[2] = (uint64_t *)(Instance + 3);
      int v53 = Instance + 2;
      Instance[6] = 0;
      Instance[4] = 0;
      Instance[5] = (uint64_t *)(Instance + 6);
      Instance[8] = 0;
      Instance[9] = 0;
      Instance[7] = 0;
      value = Instance;
      unint64_t v61 = 0;
      int v62 = 0;
      uint64_t v63 = 0;
      uint64_t v4 = *(char **)(a1 + 664);
      int v51 = *(char **)(a1 + 672);
      if (v4 != v51) {
        break;
      }
LABEL_54:
      CFArrayAppendValue(theArray, value);
      CFRelease(value);
      if (v61) {
        operator delete(v61);
      }
      uint64_t v2 = v45 + 1;
      v47 += 4;
      if (v45 + 1 >= *(int *)(a1 + 56)) {
        return theArray;
      }
    }
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    while (1)
    {
      std::string __p = v4;
      uint64_t v7 = sub_19E140A3C(a1 + 584, (uint64_t)v4, (uint64_t)&unk_19E351150, (long long **)&__p)[5];
      std::string __p = v4;
      uint64_t v8 = sub_19E1403B8(a1 + 624, (uint64_t)v4, (uint64_t)&unk_19E351150, (long long **)&__p);
      uint64_t v10 = v8[6];
      uint64_t v11 = v8[7];
      uint64_t v12 = v8[8];
      uint64_t v13 = v8[9];
      v60[0] = v8[5];
      int v9 = v60[0];
      v60[1] = v10;
      v60[2] = v11;
      v60[3] = v12;
      v60[4] = v13;
      sub_19E253744((uint64_t)v53, (long long *)v4, (uint64_t)v60);
      uint64_t v14 = (v9 * v10 * v11 * v12 * v13);
      std::string __p = 0;
      uint64_t v58 = 0;
      uint64_t v59 = 0;
      if (v14 << 32)
      {
        if (v14 << 32 < 0) {
          sub_19E13D694();
        }
        size_t v15 = (int)v14;
        uint64_t v16 = (char *)operator new((int)v14);
        uint64_t v17 = &v16[v15];
        std::string __p = v16;
        uint64_t v59 = &v16[v15];
        bzero(v16, v15);
        uint64_t v58 = v17;
      }
      uint64_t v52 = v7;
      int v18 = v9 * v10;
      vDSP_Length v19 = v18;
      unint64_t v20 = (v6 - v5) >> 2;
      unint64_t v21 = v18 - v20;
      if (v18 <= v20)
      {
        if (v18 >= v20) {
          goto LABEL_28;
        }
        uint64_t v6 = &v5[4 * v18];
      }
      else
      {
        if (v21 > (v63 - v6) >> 2)
        {
          if (v18 < 0) {
            sub_19E13D694();
          }
          unint64_t v22 = (v63 - v5) >> 1;
          if (v22 <= v18) {
            unint64_t v22 = v18;
          }
          if ((unint64_t)(v63 - v5) >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
          }
          if (v22 >> 62) {
            sub_19E13C418();
          }
          int v49 = v18;
          unint64_t v50 = v22;
          uint64_t v48 = operator new(4 * v22);
          unint64_t v23 = &v48[4 * v20];
          bzero(v23, 4 * v21);
          if (v6 == v5)
          {
            uint64_t v26 = &v48[4 * v20];
            unint64_t v27 = v50;
            uint64_t v28 = 4 * v21;
            uint64_t v29 = v48;
          }
          else
          {
            unint64_t v24 = v6 - 4 - v5;
            if (v24 < 0xBC)
            {
              int v25 = v6;
              uint64_t v26 = &v48[4 * v20];
              unint64_t v27 = v50;
              uint64_t v28 = 4 * v21;
              uint64_t v29 = v48;
              goto LABEL_37;
            }
            uint64_t v29 = v48;
            BOOL v30 = &v48[v6 - v5 - 4 - (v24 & 0xFFFFFFFFFFFFFFFCLL)] > &v48[v6 - v5 - 4]
               || &v6[-(v24 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v6 - 4;
            if (v30 || (unint64_t)(v5 - v48) < 0x20)
            {
              int v25 = v6;
              uint64_t v26 = &v48[4 * v20];
              unint64_t v27 = v50;
              uint64_t v28 = 4 * v21;
              goto LABEL_37;
            }
            uint64_t v35 = (v24 >> 2) + 1;
            uint64_t v36 = 4 * (v35 & 0x7FFFFFFFFFFFFFF8);
            int v25 = &v6[-v36];
            uint64_t v26 = &v23[-v36];
            size_t v37 = &v48[4 * v20 - 16];
            int v38 = v6 - 16;
            uint64_t v39 = v35 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v40 = *(_OWORD *)v38;
              *(v37 - 1) = *((_OWORD *)v38 - 1);
              _OWORD *v37 = v40;
              v37 -= 2;
              v38 -= 32;
              v39 -= 8;
            }
            while (v39);
            BOOL v41 = v35 == (v35 & 0x7FFFFFFFFFFFFFF8);
            unint64_t v27 = v50;
            uint64_t v28 = 4 * v21;
            if (!v41)
            {
              do
              {
LABEL_37:
                int v31 = *((_DWORD *)v25 - 1);
                v25 -= 4;
                *((_DWORD *)v26 - 1) = v31;
                v26 -= 4;
              }
              while (v25 != v5);
            }
          }
          unint64_t v61 = v26;
          int v62 = &v23[v28];
          uint64_t v6 = &v23[v28];
          uint64_t v63 = &v29[4 * v27];
          if (v5) {
            operator delete(v5);
          }
          uint64_t v5 = v26;
          int v18 = v49;
          if (!v11) {
            goto LABEL_47;
          }
LABEL_41:
          if (v18)
          {
            uint64_t v32 = 0;
            int v33 = (const float *)(v52 + v47 * v18 * (int)v11);
            do
            {
              float __B = 128.0 / *(float *)(a1 + 808);
              float v54 = -127.1;
              float __C = 127.1;
              uint64_t v5 = v61;
              vDSP_vsmul(v33, 1, &__B, (float *)v61, 1, v19);
              vDSP_vclip((const float *)v5, 1, &v54, &__C, (float *)v5, 1, v19);
              vDSP_vfixr8((const float *)v5, 1, (char *)__p + v32, 1, v19);
              v32 += v19;
              v33 += v19;
              --v11;
            }
            while (v11);
          }
          else
          {
            float v34 = 128.0 / *(float *)(a1 + 808);
            do
            {
              float __B = v34;
              --v11;
            }
            while (v11);
          }
          goto LABEL_47;
        }
        bzero(v6, 4 * v21);
        v6 += 4 * v21;
      }
      int v62 = v6;
LABEL_28:
      if (v11) {
        goto LABEL_41;
      }
LABEL_47:
      sub_19E253694(v53, (long long *)v4, (char **)&__p);
      if (__p)
      {
        uint64_t v58 = __p;
        operator delete(__p);
      }
      v4 += 24;
      if (v4 == v51) {
        goto LABEL_54;
      }
    }
  }
  return theArray;
}

void sub_19E1618B0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19E1618C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  uint64_t v28 = *(void **)(v26 - 128);
  if (!v28) {
    _Unwind_Resume(exception_object);
  }
  *(void *)(v26 - 120) = v28;
  operator delete(v28);
  _Unwind_Resume(exception_object);
}

void sub_19E161928(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_19E304C24(a1, a2, (uint64_t)__p);
  char v5 = v9;
  if (v9 < 0)
  {
    if (__p[1])
    {
LABEL_3:
      uint64_t v10 = __p;
      uint64_t v6 = sub_19E1403B8(a1 + 728, (uint64_t)__p, (uint64_t)&unk_19E351150, (long long **)&v10);
      long long v7 = *(_OWORD *)(v6 + 7);
      *(_OWORD *)a3 = *(_OWORD *)(v6 + 5);
      *(_OWORD *)(a3 + 16) = v7;
      *(void *)(a3 + 32) = v6[9];
      if ((v9 & 0x80) == 0) {
        return;
      }
LABEL_7:
      operator delete(__p[0]);
      return;
    }
  }
  else if (v9)
  {
    goto LABEL_3;
  }
  *(void *)(a3 + 32) = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  if (v5 < 0) {
    goto LABEL_7;
  }
}

void sub_19E1619D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E1619F4(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t result = espresso_create_context();
  *(void *)(a1 + 280) = result;
  if (result)
  {
    uint64_t result = espresso_create_plan();
    *(void *)(a1 + 272) = result;
    if (result)
    {
      int v3 = (uint64_t *)(a1 + 256);
      if (espresso_plan_add_network() || *(_DWORD *)(a1 + 264) == -1)
      {
        return 0;
      }
      else
      {
        uint64_t result = *v3;
        if (*v3)
        {
          uint64_t v10 = 0;
          uint64_t v11 = 0;
          uint64_t v12 = 0;
          long long v7 = 0;
          uint64_t v8 = 0;
          uint64_t v9 = 0;
          c_network_get_input_names();
          c_network_get_output_names();
          *(unsigned char *)(a1 + 312) = 1;
          uint64_t v4 = (void **)v10;
          if (v10)
          {
            char v5 = v11;
            uint64_t v6 = v10;
            if (v11 != v10)
            {
              do
              {
                if (*((char *)v5 - 1) < 0) {
                  operator delete(*(v5 - 3));
                }
                v5 -= 3;
              }
              while (v5 != v4);
              uint64_t v6 = v10;
            }
            uint64_t v11 = v4;
            operator delete(v6);
          }
          return 1;
        }
      }
    }
  }
  return result;
}

void sub_19E161F74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a2)
  {
    *(void *)(v33 + 672) = v34;
    if (a19 < 0) {
      operator delete(__p);
    }
    sub_19E13A748(&a20);
    sub_19E13A748(&a23);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x19E161A7CLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E16202C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = *(char *)(a3 + 23);
  if (v8 < 0)
  {
    sub_19E13C2D0(&__dst, *(void **)a3, *(void *)(a3 + 8));
    if (*(char *)(a3 + 23) < 0)
    {
      if (*(void *)(a3 + 8)) {
        goto LABEL_9;
      }
    }
    else if (*(unsigned char *)(a3 + 23))
    {
      goto LABEL_9;
    }
  }
  else
  {
    std::string __dst = *(std::string *)a3;
    if ((_BYTE)v8) {
      goto LABEL_9;
    }
  }
  if (*(void *)(a1 + 24) != 1) {
    goto LABEL_48;
  }
  std::string::operator=(&__dst, (const std::string *)(*(void *)(a1 + 8) + 32));
LABEL_9:
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9) {
    goto LABEL_48;
  }
  uint64_t v38 = a4;
  int v10 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
  long long v11 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
  std::string::size_type v12 = (__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
      ? HIBYTE(__dst.__r_.__value_.__r.__words[2])
      : __dst.__r_.__value_.__l.__size_;
  uint64_t v13 = (__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
      ? &__dst
      : (std::string *)__dst.__r_.__value_.__r.__words[0];
  uint64_t v14 = a1 + 16;
  do
  {
    int v15 = *(char *)(v9 + 55);
    if (v15 >= 0) {
      size_t v16 = *(unsigned __int8 *)(v9 + 55);
    }
    else {
      size_t v16 = *(void *)(v9 + 40);
    }
    if (v15 >= 0) {
      uint64_t v17 = (const void *)(v9 + 32);
    }
    else {
      uint64_t v17 = *(const void **)(v9 + 32);
    }
    if (v12 >= v16) {
      size_t v18 = v16;
    }
    else {
      size_t v18 = v12;
    }
    int v19 = memcmp(v17, v13, v18);
    BOOL v20 = v16 < v12;
    if (v19) {
      BOOL v20 = v19 < 0;
    }
    BOOL v21 = !v20;
    if (v20) {
      unint64_t v22 = (uint64_t *)(v9 + 8);
    }
    else {
      unint64_t v22 = (uint64_t *)v9;
    }
    if (v21) {
      uint64_t v14 = v9;
    }
    uint64_t v9 = *v22;
  }
  while (*v22);
  if (v14 == a1 + 16) {
    goto LABEL_48;
  }
  int v25 = *(const void **)(v14 + 32);
  uint64_t v24 = v14 + 32;
  unint64_t v23 = v25;
  int v26 = *(char *)(v24 + 23);
  if (v26 >= 0) {
    size_t v27 = *(unsigned __int8 *)(v24 + 23);
  }
  else {
    size_t v27 = *(void *)(v24 + 8);
  }
  if (v26 >= 0) {
    uint64_t v28 = (const void *)v24;
  }
  else {
    uint64_t v28 = v23;
  }
  if (v27 >= v12) {
    size_t v29 = v12;
  }
  else {
    size_t v29 = v27;
  }
  int v30 = memcmp(v13, v28, v29);
  BOOL v31 = v12 < v27;
  if (v30) {
    BOOL v31 = v30 < 0;
  }
  if (v31)
  {
LABEL_48:
    uint64_t v32 = 0;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_49;
    }
    return v32;
  }
  *(_DWORD *)(a1 + 56) = *(void *)(v38 + 24);
  uint64_t v39 = a2;
  unint64_t v34 = *(void *)(a1 + 328);
  if (v34 >= *(void *)(a1 + 336))
  {
    *(void *)(a1 + 328) = sub_19E16501C((char **)(a1 + 320), (uint64_t)&__dst, &v39, v38);
    uint64_t v32 = 1;
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return v32;
    }
    goto LABEL_49;
  }
  if (v10 < 0)
  {
    sub_19E13C2D0(*(unsigned char **)(a1 + 328), (void *)v11, *((unint64_t *)&v11 + 1));
  }
  else
  {
    long long v35 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
    *(void *)(v34 + 16) = *((void *)&__dst.__r_.__value_.__l + 2);
    *(_OWORD *)unint64_t v34 = v35;
  }
  *(void *)(v34 + 24) = a2;
  long long v36 = *(_OWORD *)v38;
  long long v37 = *(_OWORD *)(v38 + 16);
  *(void *)(v34 + 64) = *(void *)(v38 + 32);
  *(_OWORD *)(v34 + 32) = v36;
  *(_OWORD *)(v34 + 48) = v37;
  *(void *)(a1 + 328) = v34 + 72;
  *(void *)(a1 + 328) = v34 + 72;
  uint64_t v32 = 1;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
LABEL_49:
  }
    operator delete(__dst.__r_.__value_.__l.__data_);
  return v32;
}

void sub_19E162274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  *(void *)(v18 + 328) = v19;
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E1622A0(uint64_t a1, uint64_t a2)
{
  sub_19E304C24(a1, a2, (uint64_t)__p);
  int v10 = __p;
  int v3 = sub_19E1403B8(a1 + 728, (uint64_t)__p, (uint64_t)&unk_19E351150, (long long **)&v10);
  uint64_t v4 = v3[5];
  uint64_t v5 = v3[6];
  uint64_t v6 = v3[7];
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  return (v4 * v5 * v6);
}

void sub_19E16231C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E162338(uint64_t a1, uint64_t a2)
{
  sub_19E304F28(a1, a2, (uint64_t)__p);
  int v10 = __p;
  int v3 = sub_19E1403B8(a1 + 768, (uint64_t)__p, (uint64_t)&unk_19E351150, (long long **)&v10);
  uint64_t v4 = v3[5];
  uint64_t v5 = v3[6];
  uint64_t v6 = v3[7];
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  return (v4 * v5 * v6);
}

void sub_19E1623B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E1623D0(uint64_t a1, const __CFArray *a2)
{
  uint64_t v2 = a1;
  v289[1] = *(long long **)MEMORY[0x1E4F143B8];
  int v3 = (void *)(a1 + 384);
  if (*(void *)(a1 + 408))
  {
    uint64_t v4 = *(void ***)(a1 + 400);
    if (v4)
    {
      do
      {
        uint64_t v17 = (void **)*v4;
        if (*((char *)v4 + 39) < 0) {
          operator delete(v4[2]);
        }
        operator delete(v4);
        uint64_t v4 = v17;
      }
      while (v17);
    }
    *(void *)(a1 + 400) = 0;
    uint64_t v5 = *(void *)(a1 + 392);
    if (v5)
    {
      for (uint64_t i = 0; i != v5; ++i)
        *(void *)(*v3 + 8 * i) = 0;
    }
    uint64_t v2 = a1;
    *(void *)(a1 + 408) = 0;
  }
  long long v7 = (void *)(v2 + 344);
  if (*(void *)(v2 + 368))
  {
    int v8 = *(void ***)(v2 + 360);
    if (v8)
    {
      do
      {
        uint64_t v18 = (void **)*v8;
        if (*((char *)v8 + 39) < 0) {
          operator delete(v8[2]);
        }
        operator delete(v8);
        int v8 = v18;
      }
      while (v18);
    }
    *(void *)(a1 + 360) = 0;
    uint64_t v9 = *(void *)(a1 + 352);
    if (v9)
    {
      for (uint64_t j = 0; j != v9; ++j)
        *(void *)(*v7 + 8 * j) = 0;
    }
    uint64_t v2 = a1;
    *(void *)(a1 + 368) = 0;
  }
  uint64_t v249 = (uint64_t)v7;
  long long v11 = (void *)(v2 + 424);
  if (*(void *)(v2 + 448))
  {
    std::string::size_type v12 = *(void ***)(v2 + 440);
    if (v12)
    {
      do
      {
        uint64_t v19 = (void **)*v12;
        if (*((char *)v12 + 39) < 0) {
          operator delete(v12[2]);
        }
        operator delete(v12);
        std::string::size_type v12 = v19;
      }
      while (v19);
    }
    *(void *)(a1 + 440) = 0;
    uint64_t v13 = *(void *)(a1 + 432);
    if (v13)
    {
      for (uint64_t k = 0; k != v13; ++k)
        *(void *)(*v11 + 8 * k) = 0;
    }
    uint64_t v2 = a1;
    *(void *)(a1 + 448) = 0;
  }
  if (!*(unsigned char *)(v2 + 312)) {
    espresso_plan_build_clean();
  }
  unint64_t v15 = *(void *)(v2 + 712) - 0x71C71C71C71C71C7 * ((uint64_t)(*(void *)(v2 + 328) - *(void *)(v2 + 320)) >> 3);
  v282 = 0;
  v283 = 0;
  v284 = 0;
  uint64_t v244 = (uint64_t)v11;
  uint64_t v245 = (uint64_t)v3;
  if (v15)
  {
    if (v15 >> 62) {
      sub_19E13D694();
    }
    size_t v16 = (char *)operator new(4 * v15);
    v282 = v16;
    v284 = &v16[4 * v15];
    bzero(v16, 4 * v15);
    v283 = v284;
    v262 = (char *)operator new(4 * v15);
    bzero(v262, 4 * v15);
    v261 = (char *)operator new(4 * v15);
    bzero(v261, 4 * v15);
    v260 = (char *)operator new(4 * v15);
    bzero(v260, 4 * v15);
    v259 = (char *)operator new(4 * v15);
    bzero(v259, 4 * v15);
    v246 = operator new(4 * v15);
    memset_pattern16(v246, &unk_19E351350, 4 * v15);
  }
  else
  {
    size_t v16 = 0;
    v261 = 0;
    v262 = 0;
    v259 = 0;
    v260 = 0;
    v246 = 0;
  }
  sub_19E164130(&v280, v15);
  uint64_t v21 = *(void *)(a1 + 320);
  uint64_t v20 = *(void *)(a1 + 328);
  if (v21 == v20)
  {
    LODWORD(v23) = 0;
    int v25 = 0;
    size_t v27 = *(char **)(a1 + 704);
    if (!v27) {
      goto LABEL_68;
    }
    goto LABEL_40;
  }
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  do
  {
    uint64_t v24 = *(void *)(v21 + 64);
    int v25 = *(_DWORD *)(v21 + 56);
    uint64_t v26 = 4 * v23;
    *(_DWORD *)&v16[v26] = *(void *)(v21 + 32);
    *(_DWORD *)&v262[v26] = *(void *)(v21 + 40);
    *(_DWORD *)&v261[v26] = *(void *)(v21 + 48);
    *(_DWORD *)&v260[v26] = v25;
    *(_DWORD *)&v259[v26] = v24;
    std::string::operator=(&v280[v22], (const std::string *)v21);
    ++v23;
    v21 += 72;
    ++v22;
  }
  while (v21 != v20);
  size_t v27 = *(char **)(a1 + 704);
  if (v27)
  {
LABEL_40:
    uint64_t v28 = v23;
    do
    {
      if (v27[39] < 0)
      {
        int v30 = (int8x16_t *)*((void *)v27 + 2);
        uint64_t v29 = *((void *)v27 + 3);
      }
      else
      {
        uint64_t v29 = v27[39];
        int v30 = (int8x16_t *)(v27 + 16);
      }
      uint64_t v31 = (uint64_t)v30->i64 + v29 - 3;
      unint64_t v32 = v29 - 3;
      if ((unint64_t)(v29 - 3) > 0x7FFFFFFFFFFFFFF7) {
        sub_19E13C370();
      }
      uint64_t v33 = *((void *)v27 + 6);
      uint64_t v252 = *((void *)v27 + 5);
      uint64_t v255 = *((void *)v27 + 7);
      uint64_t v34 = *((void *)v27 + 9);
      if (v32 > 0x16)
      {
        uint64_t v42 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v32 | 7) != 0x17) {
          uint64_t v42 = v32 | 7;
        }
        uint64_t v43 = v42 + 1;
        long long v35 = (int8x16_t *)operator new(v42 + 1);
        v286.i64[1] = v32;
        v287.i64[0] = v43 | 0x8000000000000000;
        v286.i64[0] = (uint64_t)v35;
        if (v30 == (int8x16_t *)v31)
        {
LABEL_57:
          long long v36 = v35;
          goto LABEL_60;
        }
      }
      else
      {
        v287.i8[7] = v29 - 3;
        long long v35 = &v286;
        if (v30 == (int8x16_t *)v31) {
          goto LABEL_57;
        }
      }
      if (v32 < 0x20 || (unint64_t)((char *)v35 - (char *)v30) < 0x20)
      {
        long long v36 = v35;
        long long v37 = (__int8 *)v30;
      }
      else
      {
        long long v36 = (int8x16_t *)((char *)v35 + (v32 & 0xFFFFFFFFFFFFFFE0));
        long long v37 = &v30->i8[v32 & 0xFFFFFFFFFFFFFFE0];
        uint64_t v38 = v30 + 1;
        uint64_t v39 = v35 + 1;
        unint64_t v40 = v32 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          int8x16_t v41 = *v38;
          v39[-1] = v38[-1];
          *uint64_t v39 = v41;
          v38 += 2;
          v39 += 2;
          v40 -= 32;
        }
        while (v40);
        if (v32 == (v32 & 0xFFFFFFFFFFFFFFE0)) {
          goto LABEL_60;
        }
      }
      do
      {
        __int8 v44 = *v37++;
        v36->i8[0] = v44;
        long long v36 = (int8x16_t *)((char *)v36 + 1);
      }
      while (v37 != (__int8 *)v31);
LABEL_60:
      v36->i8[0] = 0;
      if (a2)
      {
        BOOL v45 = sub_19E160170((uint64_t)v35, (char **)v27 + 2);
        if (v45 || sub_19E16034C(v45, (uint64_t)(v27 + 16)))
        {
          ValueAtIndex = CFArrayGetValueAtIndex(a2, 0);
          sub_19E253538((uint64_t)ValueAtIndex + 16, (const void **)&v286, (uint64_t)&__B);
          if (sub_19E160170(v47, (char **)v27 + 2)) {
            LODWORD(v33) = DWORD2(__B);
          }
          else {
            LODWORD(v34) = v268;
          }
        }
      }
      uint64_t v48 = 4 * v28;
      *(_DWORD *)&v282[v48] = v252;
      *(_DWORD *)&v262[v48] = v33;
      *(_DWORD *)&v261[v48] = v255;
      *(_DWORD *)&v260[v48] = v25;
      *(_DWORD *)&v259[v48] = v34;
      std::string::operator=(&v280[v28], (const std::string *)(v27 + 16));
      if (v287.i8[7] < 0) {
        operator delete((void *)v286.i64[0]);
      }
      ++v28;
      size_t v27 = *(char **)v27;
    }
    while (v27);
  }
LABEL_68:
  std::string __p = 0;
  v278 = 0;
  v279 = 0;
  int v49 = v280;
  if (v281 != v280)
  {
    unint64_t v50 = 0;
    for (unint64_t m = 0; 0xAAAAAAAAAAAAAAABLL * (((char *)v281 - (char *)v280) >> 3) > m; ++m)
    {
      uint64_t v52 = &v49[m];
      if (SHIBYTE(v52->__r_.__value_.__r.__words[2]) < 0)
      {
        uint64_t v52 = (std::string *)v52->__r_.__value_.__r.__words[0];
        int v53 = v279;
        if (v50 >= v279)
        {
LABEL_76:
          float v54 = (char *)__p;
          int64_t v55 = v50 - (unsigned char *)__p;
          uint64_t v56 = (v50 - (unsigned char *)__p) >> 3;
          unint64_t v57 = v56 + 1;
          if ((unint64_t)(v56 + 1) >> 61) {
            sub_19E13D694();
          }
          uint64_t v58 = v53 - (unsigned char *)__p;
          if (v58 >> 2 > v57) {
            unint64_t v57 = v58 >> 2;
          }
          if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v59 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v59 = v57;
          }
          if (v59)
          {
            if (v59 >> 61) {
              sub_19E13C418();
            }
            unint64_t v60 = operator new(8 * v59);
            unint64_t v61 = (std::string **)&v60[8 * v56];
            *unint64_t v61 = v52;
            uint64_t v62 = (uint64_t)(v61 + 1);
            if (v50 != v54)
            {
LABEL_85:
              unint64_t v63 = v50 - 8 - v54;
              if (v63 < 0x168)
              {
                int v64 = v50;
                goto LABEL_87;
              }
              if (&v60[v55 - 8 - (v63 & 0xFFFFFFFFFFFFFFF8)] > &v60[v55 - 8])
              {
                int v64 = v50;
                goto LABEL_87;
              }
              if (&v50[-(v63 & 0xFFFFFFFFFFFFFFF8) - 8] > v50 - 8)
              {
                int v64 = v50;
                goto LABEL_87;
              }
              if ((unint64_t)(v50 - &v60[v55]) < 0x20)
              {
                int v64 = v50;
                goto LABEL_87;
              }
              uint64_t v66 = (v63 >> 3) + 1;
              uint64_t v67 = 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
              int v64 = &v50[-v67];
              unint64_t v61 = (std::string **)((char *)v61 - v67);
              unint64_t v68 = &v60[8 * v56 - 16];
              uint64_t v69 = v50 - 16;
              uint64_t v70 = v66 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v71 = *(_OWORD *)v69;
                *(v68 - 1) = *((_OWORD *)v69 - 1);
                _OWORD *v68 = v71;
                v68 -= 2;
                v69 -= 32;
                v70 -= 4;
              }
              while (v70);
              if (v66 != (v66 & 0x3FFFFFFFFFFFFFFCLL))
              {
                do
                {
LABEL_87:
                  size_t v65 = (std::string *)*((void *)v64 - 1);
                  v64 -= 8;
                  *--unint64_t v61 = v65;
                }
                while (v64 != v54);
              }
              unint64_t v50 = (char *)__p;
              std::string __p = v61;
              v278 = (char *)v62;
              v279 = &v60[8 * v59];
              if (!v50)
              {
LABEL_93:
                unint64_t v50 = (char *)v62;
                goto LABEL_71;
              }
LABEL_92:
              operator delete(v50);
              goto LABEL_93;
            }
          }
          else
          {
            unint64_t v60 = 0;
            unint64_t v61 = (std::string **)(8 * v56);
            *(void *)(8 * v56) = v52;
            uint64_t v62 = 8 * v56 + 8;
            if (v50 != v54) {
              goto LABEL_85;
            }
          }
          std::string __p = v61;
          v278 = (char *)v62;
          v279 = &v60[8 * v59];
          if (!v50) {
            goto LABEL_93;
          }
          goto LABEL_92;
        }
      }
      else
      {
        int v53 = v279;
        if (v50 >= v279) {
          goto LABEL_76;
        }
      }
      *(void *)unint64_t v50 = v52;
      v50 += 8;
LABEL_71:
      v278 = v50;
      int v49 = v280;
    }
  }
  if (espresso_network_change_input_blob_shapes_seq_rank()) {
    goto LABEL_109;
  }
  uint64_t v72 = *(void *)(a1 + 288);
  for (uint64_t n = *(void *)(a1 + 296); v72 != n; v72 += 24)
    espresso_network_declare_output();
  uint64_t v74 = *(void **)(a1 + 32);
  v253 = (void *)(a1 + 40);
  if (v74 != (void *)(a1 + 40))
  {
    do
    {
      espresso_network_declare_output();
      uint64_t v81 = (void *)v74[1];
      if (v81)
      {
        do
        {
          uint64_t v82 = v81;
          uint64_t v81 = (void *)*v81;
        }
        while (v81);
      }
      else
      {
        do
        {
          uint64_t v82 = (void *)v74[2];
          BOOL v83 = *v82 == (void)v74;
          uint64_t v74 = v82;
        }
        while (!v83);
      }
      uint64_t v74 = v82;
    }
    while (v82 != v253);
  }
  uint64_t blob_shape = espresso_plan_build();
  if (blob_shape) {
    goto LABEL_109;
  }
  *(unsigned char *)(a1 + 312) = 0;
  uint64_t v88 = *(void *)(a1 + 320);
  uint64_t v87 = *(void *)(a1 + 328);
  while (v88 != v87)
  {
    if (sub_19E1606B4(a1))
    {
      uint64_t v276 = 0;
      long long v274 = 0u;
      long long v275 = 0u;
      long long v273 = 0u;
      long long v271 = 0u;
      long long v272 = 0u;
      long long v269 = 0u;
      long long v270 = 0u;
      long long v267 = 0u;
      long long v268 = 0u;
      long long __B = 0u;
      int8x16_t v89 = vextq_s8(*(int8x16_t *)(v88 + 40), *(int8x16_t *)(v88 + 40), 8uLL);
      int8x16_t v286 = vextq_s8(*(int8x16_t *)(v88 + 56), *(int8x16_t *)(v88 + 56), 8uLL);
      int8x16_t v287 = v89;
      uint64_t v288 = *(void *)(v88 + 32);
      espresso_buffer_pack_tensor_shape();
      *(void *)&long long __B = *(void *)(v88 + 24);
      LODWORD(v276) = 65568;
      uint64_t blob_shape = espresso_network_bind_buffer();
    }
    else
    {
      if (espresso_network_bind_buffer()) {
        goto LABEL_109;
      }
      uint64_t v90 = (*(_DWORD *)(v88 + 32)
                         * *(_DWORD *)(v88 + 40)
                         * *(_DWORD *)(v88 + 48)
                         * *(_DWORD *)(v88 + 56)
                         * *(_DWORD *)(v88 + 64));
      unint64_t v91 = (int)v90;
      if ((void)v273 * *((void *)&v275 + 1) != (int)v90) {
        goto LABEL_109;
      }
      if (v90 << 32)
      {
        unint64_t v92 = 0;
        uint64_t v93 = __B;
        uint64_t v94 = *(void *)(v88 + 24);
        if (v91 <= 1) {
          unint64_t v91 = 1;
        }
        if (v91 < 8) {
          goto LABEL_161;
        }
        if ((unint64_t)(__B - v94) < 0x20) {
          goto LABEL_161;
        }
        unint64_t v92 = v91 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v95 = (long long *)(v94 + 16);
        int v96 = (_OWORD *)(__B + 16);
        unint64_t v97 = v91 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          long long v98 = *v95;
          *(v96 - 1) = *(v95 - 1);
          _OWORD *v96 = v98;
          v95 += 2;
          v96 += 2;
          v97 -= 8;
        }
        while (v97);
        if (v91 != v92)
        {
LABEL_161:
          uint64_t v99 = (_DWORD *)(v93 + 4 * v92);
          long long v100 = (int *)(v94 + 4 * v92);
          unint64_t v101 = v91 - v92;
          do
          {
            int v102 = *v100++;
            *v99++ = v102;
            --v101;
          }
          while (v101);
        }
      }
      uint64_t blob_shape = (uint64_t)sub_19E140F1C(v249, v88, v88, (uint64_t)&__B);
    }
    v88 += 72;
  }
  int v103 = *(const void ***)(a1 + 664);
  v243 = *(const void ***)(a1 + 672);
  if (v103 != v243)
  {
    uint64_t v242 = a1 + 544;
    v248 = (void *)(a1 + 504);
    do
    {
      size_t v104 = *((unsigned __int8 *)v103 + 23);
      int v105 = (char)v104;
      v256 = v103;
      size_t v106 = (size_t)v103[1];
      if ((v104 & 0x80u) == 0) {
        size_t v107 = v104;
      }
      else {
        size_t v107 = v106;
      }
      unint64_t v108 = v107 + 3;
      if (v107 + 3 > 0x7FFFFFFFFFFFFFF7) {
        sub_19E13C370();
      }
      if (v108 >= 0x17)
      {
        uint64_t v118 = (v108 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v108 | 7) != 0x17) {
          uint64_t v118 = v108 | 7;
        }
        uint64_t v119 = v118 + 1;
        p_dst = (long long *)operator new(v118 + 1);
        size_t v264 = v107 + 3;
        unint64_t v265 = v119 | 0x8000000000000000;
        std::string __dst = p_dst;
      }
      else
      {
        size_t v264 = 0;
        unint64_t v265 = 0;
        std::string __dst = 0;
        p_dst = (long long *)&__dst;
        HIBYTE(v265) = v107 + 3;
        if (!v107)
        {
          LODWORD(__dst) = 7235935;
          if (sub_19E160170(blob_shape, (char **)&__dst)) {
            goto LABEL_174;
          }
          goto LABEL_191;
        }
      }
      if (v105 >= 0) {
        uint64_t v120 = v256;
      }
      else {
        uint64_t v120 = *v256;
      }
      long long v121 = memmove(p_dst, v120, v107);
      *(_DWORD *)((char *)p_dst + v107) = 7235935;
      if (sub_19E160170((uint64_t)v121, (char **)&__dst))
      {
LABEL_174:
        if (espresso_network_query_blob_shape()) {
          goto LABEL_336;
        }
        if (v285)
        {
          unint64_t v110 = v286.i64[0];
          *(void *)&long long __B = v256;
          sub_19E1403B8(v242, (uint64_t)v256, (uint64_t)&unk_19E351150, (long long **)&__B)[9] = v110;
          if (v285 >= 2)
          {
            uint64_t v111 = v286.i64[1];
            *(void *)&long long __B = v256;
            v110 *= v286.i64[1];
            sub_19E1403B8(v242, (uint64_t)v256, (uint64_t)&unk_19E351150, (long long **)&__B)[8] = v111;
            if (v285 >= 3)
            {
              uint64_t v112 = v287.i64[0];
              *(void *)&long long __B = v256;
              v110 *= v287.i64[0];
              sub_19E1403B8(v242, (uint64_t)v256, (uint64_t)&unk_19E351150, (long long **)&__B)[7] = v112;
              if (v285 >= 4)
              {
                uint64_t v113 = v287.i64[1];
                *(void *)&long long __B = v256;
                v110 *= v287.i64[1];
                sub_19E1403B8(v242, (uint64_t)v256, (uint64_t)&unk_19E351150, (long long **)&__B)[6] = v113;
                if (v285 >= 5)
                {
                  uint64_t v114 = v288;
                  *(void *)&long long __B = v256;
                  v110 *= v288;
                  sub_19E1403B8(v242, (uint64_t)v256, (uint64_t)&unk_19E351150, (long long **)&__B)[5] = v114;
                  if (v285 >= 6)
                  {
                    uint64_t v115 = 9;
                    for (iuint64_t i = 5; ii < v285; ++ii)
                    {
                      uint64_t v117 = v286.i64[ii];
                      *(void *)&long long __B = v256;
                      v110 *= v117;
                      sub_19E1403B8(v242, (uint64_t)v256, (uint64_t)&unk_19E351150, (long long **)&__B)[v115--] = v117;
                    }
                  }
                }
              }
            }
          }
        }
        else
        {
          unint64_t v110 = 1;
        }
        if (!sub_19E1652BC(v248, (uint64_t)v256))
        {
          *(void *)&long long __B = v256;
          unsigned int v155 = sub_19E140A3C((uint64_t)v248, (uint64_t)v256, (uint64_t)&unk_19E351150, (long long **)&__B);
          v157 = v155 + 5;
          v156 = (void *)v155[5];
          if (v156)
          {
            v155[6] = (uint64_t)v156;
            operator delete(v156);
          }
          void *v157 = 0;
          v157[1] = 0;
          v157[2] = 0;
        }
        *(void *)&long long __B = v256;
        uint64_t v158 = sub_19E140A3C((uint64_t)v248, (uint64_t)v256, (uint64_t)&unk_19E351150, (long long **)&__B);
        if (v110 > (v158[6] - v158[5]) >> 2)
        {
          *(void *)&long long __B = v256;
          v159 = sub_19E140A3C((uint64_t)v248, (uint64_t)v256, (uint64_t)&unk_19E351150, (long long **)&__B);
          uint64_t v160 = v159[5];
          unint64_t v161 = (v159[6] - v160) >> 2;
          if (v110 <= v161)
          {
            if (v110 < v161) {
              v159[6] = v160 + 4 * v110;
            }
          }
          else
          {
            sub_19E164E6C((uint64_t)(v159 + 5), v110 - v161);
          }
        }
        if (a2 && v110 && *(int *)(a1 + 56) >= 1)
        {
          CFIndex v162 = 0;
          do
          {
            v163 = CFArrayGetValueAtIndex(a2, v162);
            unint64_t v164 = *(int *)(a1 + 56);
            uint64_t v165 = sub_19E2533F8((uint64_t)v163 + 16, v256);
            *(void *)&long long __B = v256;
            v166 = sub_19E140A3C((uint64_t)v248, (uint64_t)v256, (uint64_t)&unk_19E351150, (long long **)&__B);
            unint64_t v167 = v110 / v164;
            uint64_t v168 = (float *)(v166[5] + 4 * (int)(v162 * (v110 / v164)));
            vDSP_Length v169 = (int)v167;
            vDSP_vflt8((const char *)v165, 1, v168, 1, (int)v167);
            *(float *)&long long __B = *(float *)(a1 + 808) * 0.0078125;
            vDSP_vsmul(v168, 1, (const float *)&__B, v168, 1, v169);
            ++v162;
          }
          while (v162 < *(int *)(a1 + 56));
        }
        uint64_t v276 = 0;
        long long v274 = 0u;
        long long v275 = 0u;
        long long v273 = 0u;
        long long v271 = 0u;
        long long v272 = 0u;
        long long v269 = 0u;
        long long v270 = 0u;
        long long v267 = 0u;
        long long v268 = 0u;
        long long __B = 0u;
        espresso_buffer_pack_tensor_shape();
        v289[0] = (long long *)v256;
        *(void *)&long long __B = sub_19E140A3C((uint64_t)v248, (uint64_t)v256, (uint64_t)&unk_19E351150, v289)[5];
        LODWORD(v276) = 65568;
        uint64_t blob_shape = espresso_network_bind_buffer();
        if (blob_shape)
        {
LABEL_336:
          if (SHIBYTE(v265) < 0)
          {
            operator delete(__dst);
            BOOL v76 = 1;
            uint64_t v77 = __p;
            if (!__p) {
              goto LABEL_111;
            }
LABEL_110:
            operator delete(v77);
            goto LABEL_111;
          }
LABEL_109:
          BOOL v76 = 1;
          uint64_t v77 = __p;
          if (!__p) {
            goto LABEL_111;
          }
          goto LABEL_110;
        }
        goto LABEL_230;
      }
LABEL_191:
      uint64_t blob_shape = espresso_network_bind_buffer();
      if (blob_shape) {
        goto LABEL_336;
      }
      if (a2 && (int)v273 >= 1 && *(int *)(a1 + 56) >= 1)
      {
        int v122 = DWORD2(v271) * v271 * v272;
        if (v122 > 0)
        {
          int v250 = 0;
          CFIndex v123 = 0;
          uint64_t v124 = __B;
          uint64_t v125 = v122;
          uint64_t v126 = v273;
          unint64_t v127 = (DWORD2(v271) * v271 * v272);
          uint64_t v128 = 4 * v122;
          int v247 = DWORD2(v271) * v271 * v272;
          uint64_t v129 = v122 & 7;
          unint64_t v130 = v127 - ((*((void *)&v271 + 1) * v271 * v272) & 7);
          uint64_t v131 = __B + 16;
          while (1)
          {
            int64x2_t v132 = CFArrayGetValueAtIndex(a2, v123);
            uint64_t blob_shape = (uint64_t)sub_19E2533F8((uint64_t)v132 + 16, v256);
            CFIndex v133 = *(int *)(a1 + 56);
            int v134 = v133 * v247;
            if (v127 >= 8) {
              break;
            }
            uint64_t v135 = 0;
            int v136 = v250;
            do
            {
              int v137 = (_DWORD *)(v124 + 4 * v136);
              unsigned int v138 = (int *)blob_shape;
              unint64_t v139 = v127;
              do
              {
                int v140 = *v138++;
                *v137++ = v140;
                --v139;
              }
              while (v139);
              ++v135;
              v136 += v134;
              blob_shape += v128;
            }
            while (v135 != v126);
LABEL_197:
            ++v123;
            v250 += v247;
            if (v123 >= v133) {
              goto LABEL_230;
            }
          }
          uint64_t v141 = 0;
          uint64_t v142 = 0;
          float v143 = (long long *)(blob_shape + 16);
          int v144 = v250;
          while (2)
          {
            uint64_t v145 = v144;
            if ((unint64_t)(v124 + 4 * (v247 * (int)v123 + (int)v142 * v134) - (blob_shape + v128 * v142)) < 0x20)
            {
              unint64_t v146 = 0;
              goto LABEL_211;
            }
            v147 = (_OWORD *)(v131 + 4 * v144);
            unint64_t v148 = v130;
            uint64_t v149 = v143;
            do
            {
              long long v150 = *v149;
              *(v147 - 1) = *(v149 - 1);
              _OWORD *v147 = v150;
              v149 += 2;
              v147 += 2;
              v148 -= 8;
            }
            while (v148);
            unint64_t v146 = v130;
            if (v129)
            {
LABEL_211:
              v151 = (_DWORD *)(v124 + 4 * (v146 + v145));
              v152 = (int *)(blob_shape + 4 * (v146 + v141));
              unint64_t v153 = v127 - v146;
              do
              {
                int v154 = *v152++;
                *v151++ = v154;
                --v153;
              }
              while (v153);
            }
            ++v142;
            float v143 = (long long *)((char *)v143 + v128);
            int v144 = v145 + v134;
            v141 += v125;
            if (v142 == v126) {
              goto LABEL_197;
            }
            continue;
          }
        }
        CFIndex v170 = 0;
        do
        {
          v171 = CFArrayGetValueAtIndex(a2, v170);
          uint64_t blob_shape = (uint64_t)sub_19E2533F8((uint64_t)v171 + 16, v256);
          ++v170;
        }
        while (v170 < *(int *)(a1 + 56));
      }
LABEL_230:
      if (SHIBYTE(v265) < 0) {
        operator delete(__dst);
      }
      int v103 = v256 + 3;
    }
    while (v256 + 3 != v243);
  }
  uint64_t v172 = *(void **)(a1 + 32);
  if (v172 != v253)
  {
    uint64_t v173 = (void *)(a1 + 464);
    while (1)
    {
      if ((sub_19E1606B4(a1) & 1) == 0)
      {
        if (espresso_network_bind_buffer()) {
          goto LABEL_109;
        }
        uint64_t blob_shape = (uint64_t)sub_19E140F1C(v245, (uint64_t)(v172 + 4), (uint64_t)(v172 + 4), (uint64_t)&__B);
        goto LABEL_261;
      }
      if (!sub_19E1652BC(v173, (uint64_t)(v172 + 4)))
      {
        *(void *)&long long __B = v172 + 4;
        v176 = sub_19E140A3C((uint64_t)v173, (uint64_t)(v172 + 4), (uint64_t)&unk_19E351150, (long long **)&__B);
        uint64_t v178 = v176 + 5;
        uint64_t v177 = (void *)v176[5];
        if (v177)
        {
          v176[6] = (uint64_t)v177;
          operator delete(v177);
        }
        *uint64_t v178 = 0;
        v178[1] = 0;
        v178[2] = 0;
      }
      if (espresso_network_query_blob_shape()) {
        goto LABEL_109;
      }
      if (!v289[0])
      {
        unint64_t v175 = 1;
        goto LABEL_255;
      }
      if (v289[0] == (long long *)1) {
        break;
      }
      unint64_t v174 = (unint64_t)v289[0] & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v179 = (unint64_t)v289[0] & 0xFFFFFFFFFFFFFFFELL;
      v180 = &v286.i64[1];
      uint64_t v181 = 1;
      uint64_t v182 = 1;
      do
      {
        v181 *= *(v180 - 1);
        v182 *= *v180;
        v180 += 2;
        v179 -= 2;
      }
      while (v179);
      unint64_t v175 = v182 * v181;
      if (v289[0] != (long long *)v174) {
        goto LABEL_253;
      }
LABEL_255:
      *(void *)&long long __B = v172 + 4;
      float v186 = sub_19E140A3C((uint64_t)v173, (uint64_t)(v172 + 4), (uint64_t)&unk_19E351150, (long long **)&__B);
      if (v175 > (v186[6] - v186[5]) >> 2)
      {
        *(void *)&long long __B = v172 + 4;
        long double v187 = sub_19E140A3C((uint64_t)v173, (uint64_t)(v172 + 4), (uint64_t)&unk_19E351150, (long long **)&__B);
        uint64_t v188 = v187[5];
        unint64_t v189 = (v187[6] - v188) >> 2;
        if (v175 <= v189)
        {
          if (v175 < v189) {
            v187[6] = v188 + 4 * v175;
          }
        }
        else
        {
          sub_19E164E6C((uint64_t)(v187 + 5), v175 - v189);
        }
      }
      uint64_t v276 = 0;
      long long v274 = 0u;
      long long v275 = 0u;
      long long v273 = 0u;
      long long v271 = 0u;
      long long v272 = 0u;
      long long v269 = 0u;
      long long v270 = 0u;
      long long v267 = 0u;
      long long v268 = 0u;
      long long __B = 0u;
      espresso_buffer_pack_tensor_shape();
      std::string __dst = (long long *)(v172 + 4);
      *(void *)&long long __B = sub_19E140A3C((uint64_t)v173, (uint64_t)(v172 + 4), (uint64_t)&unk_19E351150, &__dst)[5];
      LODWORD(v276) = 65568;
      uint64_t blob_shape = espresso_network_bind_buffer();
      if (blob_shape) {
        goto LABEL_109;
      }
LABEL_261:
      uint64_t v190 = (void *)v172[1];
      if (v190)
      {
        do
        {
          v191 = v190;
          uint64_t v190 = (void *)*v190;
        }
        while (v190);
      }
      else
      {
        do
        {
          v191 = (void *)v172[2];
          BOOL v83 = *v191 == (void)v172;
          uint64_t v172 = v191;
        }
        while (!v83);
      }
      uint64_t v172 = v191;
      if (v191 == v253) {
        goto LABEL_267;
      }
    }
    unint64_t v174 = 0;
    unint64_t v175 = 1;
LABEL_253:
    uint64_t v183 = &v286.i64[v174];
    v184 = (char *)v289[0] - v174;
    do
    {
      uint64_t v185 = *v183++;
      v175 *= v185;
      --v184;
    }
    while (v184);
    goto LABEL_255;
  }
LABEL_267:
  uint64_t v192 = *(void *)(a1 + 288);
  uint64_t v193 = *(void *)(a1 + 296);
  if (v192 != v193)
  {
    v194 = (void *)(a1 + 584);
    uint64_t v257 = a1 + 624;
    int64x2_t v254 = vdupq_n_s64(1uLL);
    while (1)
    {
      if (sub_19E160170(blob_shape, (char **)v192))
      {
        if (*(char *)(v192 + 23) < 0)
        {
          uint64_t v196 = *(char **)v192;
          uint64_t v195 = *(void *)(v192 + 8);
        }
        else
        {
          uint64_t v195 = *(unsigned __int8 *)(v192 + 23);
          uint64_t v196 = (char *)v192;
        }
        uint64_t v199 = (uint64_t)&v196[v195 - 4];
        unint64_t v200 = v195 - 4;
        if ((unint64_t)(v195 - 4) > 0x7FFFFFFFFFFFFFF7) {
          sub_19E13C370();
        }
        if (v200 > 0x16)
        {
          uint64_t v209 = (v200 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v200 | 7) != 0x17) {
            uint64_t v209 = v200 | 7;
          }
          uint64_t v210 = v209 + 1;
          uint64_t v201 = (long long *)operator new(v209 + 1);
          size_t v264 = v195 - 4;
          unint64_t v265 = v210 | 0x8000000000000000;
          std::string __dst = v201;
          if (v196 == (char *)v199) {
            goto LABEL_291;
          }
LABEL_282:
          uint64_t v202 = v195 - 4;
          if ((unint64_t)(v195 - 4) < 0x20 || (unint64_t)((char *)v201 - v196) < 0x20)
          {
            v203 = v201;
            v204 = v196;
          }
          else
          {
            v203 = (long long *)((char *)v201 + (v202 & 0xFFFFFFFFFFFFFFE0));
            v204 = &v196[v202 & 0xFFFFFFFFFFFFFFE0];
            id v205 = (long long *)(v196 + 16);
            v206 = v201 + 1;
            unint64_t v207 = v202 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v208 = *v205;
              *(v206 - 1) = *(v205 - 1);
              _OWORD *v206 = v208;
              v205 += 2;
              v206 += 2;
              v207 -= 32;
            }
            while (v207);
            if (v202 == (v202 & 0xFFFFFFFFFFFFFFE0)) {
              goto LABEL_308;
            }
          }
          do
          {
            char v223 = *v204++;
            *(unsigned char *)v203 = v223;
            v203 = (long long *)((char *)v203 + 1);
          }
          while (v204 != (char *)v199);
          goto LABEL_308;
        }
        HIBYTE(v265) = v195 - 4;
        uint64_t v201 = (long long *)&__dst;
        if (v196 != (char *)v199) {
          goto LABEL_282;
        }
LABEL_291:
        v203 = v201;
LABEL_308:
        *(unsigned char *)v203 = 0;
        if (!sub_19E1652BC(v194, (uint64_t)&__dst))
        {
          *(void *)&long long __B = &__dst;
          v225 = sub_19E140A3C((uint64_t)v194, (uint64_t)&__dst, (uint64_t)&unk_19E351150, (long long **)&__B);
          v227 = v225 + 5;
          v226 = (void *)v225[5];
          if (v226)
          {
            v225[6] = (uint64_t)v226;
            operator delete(v226);
          }
          void *v227 = 0;
          v227[1] = 0;
          v227[2] = 0;
          *(void *)&long long __B = &__dst;
          v228 = sub_19E1403B8(v257, (uint64_t)&__dst, (uint64_t)&unk_19E351150, (long long **)&__B);
          *(int64x2_t *)(v228 + 5) = v254;
          *(int64x2_t *)(v228 + 7) = v254;
          v228[9] = 1;
        }
        uint64_t blob_shape = espresso_network_query_blob_shape();
        if (blob_shape)
        {
          BOOL v224 = 1;
          if (SHIBYTE(v265) < 0) {
            goto LABEL_269;
          }
        }
        else
        {
          if (v285)
          {
            unint64_t v229 = v286.i64[0];
            *(void *)&long long __B = &__dst;
            sub_19E1403B8(v257, (uint64_t)&__dst, (uint64_t)&unk_19E351150, (long long **)&__B)[9] = v229;
            if (v285 >= 2)
            {
              uint64_t v230 = v286.i64[1];
              *(void *)&long long __B = &__dst;
              v229 *= v286.i64[1];
              sub_19E1403B8(v257, (uint64_t)&__dst, (uint64_t)&unk_19E351150, (long long **)&__B)[8] = v230;
              if (v285 >= 3)
              {
                uint64_t v231 = v287.i64[0];
                *(void *)&long long __B = &__dst;
                v229 *= v287.i64[0];
                sub_19E1403B8(v257, (uint64_t)&__dst, (uint64_t)&unk_19E351150, (long long **)&__B)[7] = v231;
                if (v285 >= 4)
                {
                  uint64_t v232 = v287.i64[1];
                  *(void *)&long long __B = &__dst;
                  v229 *= v287.i64[1];
                  sub_19E1403B8(v257, (uint64_t)&__dst, (uint64_t)&unk_19E351150, (long long **)&__B)[6] = v232;
                  if (v285 >= 5)
                  {
                    uint64_t v233 = v288;
                    *(void *)&long long __B = &__dst;
                    v229 *= v288;
                    sub_19E1403B8(v257, (uint64_t)&__dst, (uint64_t)&unk_19E351150, (long long **)&__B)[5] = v233;
                    if (v285 >= 6)
                    {
                      uint64_t v234 = 9;
                      for (juint64_t j = 5; jj < v285; ++jj)
                      {
                        uint64_t v236 = v286.i64[jj];
                        *(void *)&long long __B = &__dst;
                        v229 *= v236;
                        sub_19E1403B8(v257, (uint64_t)&__dst, (uint64_t)&unk_19E351150, (long long **)&__B)[v234--] = v236;
                      }
                    }
                  }
                }
              }
            }
          }
          else
          {
            unint64_t v229 = 1;
          }
          *(void *)&long long __B = &__dst;
          v238 = sub_19E140A3C((uint64_t)v194, (uint64_t)&__dst, (uint64_t)&unk_19E351150, (long long **)&__B);
          if (v229 > (v238[6] - v238[5]) >> 2)
          {
            *(void *)&long long __B = &__dst;
            v239 = sub_19E140A3C((uint64_t)v194, (uint64_t)&__dst, (uint64_t)&unk_19E351150, (long long **)&__B);
            uint64_t v240 = v239[5];
            unint64_t v241 = (v239[6] - v240) >> 2;
            if (v229 <= v241)
            {
              if (v229 < v241) {
                v239[6] = v240 + 4 * v229;
              }
            }
            else
            {
              sub_19E164E6C((uint64_t)(v239 + 5), v229 - v241);
            }
          }
          uint64_t v276 = 0;
          long long v274 = 0u;
          long long v275 = 0u;
          long long v273 = 0u;
          long long v271 = 0u;
          long long v272 = 0u;
          long long v269 = 0u;
          long long v270 = 0u;
          long long v267 = 0u;
          long long v268 = 0u;
          long long __B = 0u;
          espresso_buffer_pack_tensor_shape();
          v289[0] = (long long *)&__dst;
          *(void *)&long long __B = sub_19E140A3C((uint64_t)v194, (uint64_t)&__dst, (uint64_t)&unk_19E351150, v289)[5];
          LODWORD(v276) = 65568;
          uint64_t blob_shape = espresso_network_bind_buffer();
          BOOL v224 = blob_shape != 0;
          if (SHIBYTE(v265) < 0) {
LABEL_269:
          }
            operator delete(__dst);
        }
        if (v224) {
          goto LABEL_109;
        }
        goto LABEL_271;
      }
      if (espresso_network_bind_buffer()) {
        goto LABEL_109;
      }
      if (*(char *)(v192 + 23) < 0)
      {
        v198 = *(char **)v192;
        uint64_t v197 = *(void *)(v192 + 8);
      }
      else
      {
        uint64_t v197 = *(unsigned __int8 *)(v192 + 23);
        v198 = (char *)v192;
      }
      uint64_t v211 = (uint64_t)&v198[v197 - 4];
      unint64_t v212 = v197 - 4;
      if ((unint64_t)(v197 - 4) > 0x7FFFFFFFFFFFFFF7) {
        sub_19E13C370();
      }
      if (v212 > 0x16)
      {
        uint64_t v221 = (v212 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v212 | 7) != 0x17) {
          uint64_t v221 = v212 | 7;
        }
        uint64_t v222 = v221 + 1;
        unint64_t v213 = (int8x16_t *)operator new(v221 + 1);
        v286.i64[1] = v197 - 4;
        v287.i64[0] = v222 | 0x8000000000000000;
        v286.i64[0] = (uint64_t)v213;
        if (v198 == (char *)v211)
        {
LABEL_305:
          v215 = v213;
          goto LABEL_326;
        }
      }
      else
      {
        v287.i8[7] = v197 - 4;
        unint64_t v213 = &v286;
        if (v198 == (char *)v211) {
          goto LABEL_305;
        }
      }
      uint64_t v214 = v197 - 4;
      if ((unint64_t)(v197 - 4) < 0x20 || (unint64_t)((char *)v213 - v198) < 0x20) {
        break;
      }
      v215 = (int8x16_t *)((char *)v213 + (v214 & 0xFFFFFFFFFFFFFFE0));
      v216 = &v198[v214 & 0xFFFFFFFFFFFFFFE0];
      v217 = (int8x16_t *)(v198 + 16);
      v218 = v213 + 1;
      unint64_t v219 = v214 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        int8x16_t v220 = *v217;
        v218[-1] = v217[-1];
        int8x16_t *v218 = v220;
        v217 += 2;
        v218 += 2;
        v219 -= 32;
      }
      while (v219);
      if (v214 != (v214 & 0xFFFFFFFFFFFFFFE0)) {
        goto LABEL_325;
      }
LABEL_326:
      v215->i8[0] = 0;
      uint64_t blob_shape = (uint64_t)sub_19E140F1C(v244, (uint64_t)&v286, (uint64_t)&v286, (uint64_t)&__B);
      if (v287.i8[7] < 0) {
        operator delete((void *)v286.i64[0]);
      }
LABEL_271:
      v192 += 24;
      if (v192 == v193) {
        goto LABEL_339;
      }
    }
    v215 = v213;
    v216 = v198;
    do
    {
LABEL_325:
      __int8 v237 = *v216++;
      v215->i8[0] = v237;
      v215 = (int8x16_t *)((char *)v215 + 1);
    }
    while (v216 != (char *)v211);
    goto LABEL_326;
  }
LABEL_339:
  BOOL v76 = espresso_plan_execute_sync() != 0;
  uint64_t v77 = __p;
  if (__p) {
    goto LABEL_110;
  }
LABEL_111:
  uint64_t v78 = v280;
  if (v280)
  {
    uint64_t v79 = v281;
    uint64_t v80 = v280;
    if (v281 != v280)
    {
      do
      {
        if (SHIBYTE(v79[-1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v79[-1].__r_.__value_.__l.__data_);
        }
        --v79;
      }
      while (v79 != v78);
      uint64_t v80 = v280;
    }
    v281 = v78;
    operator delete(v80);
  }
  if (v246) {
    operator delete(v246);
  }
  if (v259) {
    operator delete(v259);
  }
  if (v260) {
    operator delete(v260);
  }
  if (v261) {
    operator delete(v261);
  }
  if (v262) {
    operator delete(v262);
  }
  if (v282) {
    operator delete(v282);
  }
  if (v76) {
    return 0;
  }
  uint64_t v85 = *(void *)(a1 + 320);
  for (kuint64_t k = *(void *)(a1 + 328); kk != v85; kk -= 72)
  {
    if (*(char *)(kk - 49) < 0) {
      operator delete(*(void **)(kk - 72));
    }
  }
  *(void *)(a1 + 328) = v85;
  return 1;
}

void sub_19E163F10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,void *a27,void *a28,void *a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58)
{
  if (a2)
  {
    if (a35 < 0) {
      operator delete(__p);
    }
    if (a57) {
      operator delete(a57);
    }
    sub_19E13A748((void **)(v58 - 240));
    if (a16) {
      operator delete(a16);
    }
    if (a26) {
      operator delete(a26);
    }
    if (a27) {
      operator delete(a27);
    }
    if (a28) {
      operator delete(a28);
    }
    if (a29) {
      operator delete(a29);
    }
    unint64_t v60 = *(void **)(v58 - 216);
    if (v60) {
      operator delete(v60);
    }
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x19E162C60);
  }
  _Unwind_Resume(exception_object);
}

void *sub_19E164130(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      sub_19E13D694();
    }
    uint64_t v4 = (char *)operator new(24 * a2);
    *a1 = v4;
    a1[2] = &v4[24 * a2];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_19E1641DC(_Unwind_Exception *exception_object)
{
  if (*(void *)v1) {
    sub_19E32EB40((void **)(v1 + 8), *(void ***)v1, (void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E1641FC(void *a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_19E13C2D0(&__p, *(void **)a2, *(void *)(a2 + 8));
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    if (size) {
      goto LABEL_11;
    }
  }
  else
  {
    std::string __p = *(std::string *)a2;
    std::string::size_type v3 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v3 = __p.__r_.__value_.__l.__size_;
    }
    if (v3) {
      goto LABEL_11;
    }
  }
  if (a1[6] != 1) {
    goto LABEL_17;
  }
  std::string::operator=(&__p, (const std::string *)(a1[4] + 32));
LABEL_11:
  if (sub_19E1652BC(a1 + 48, (uint64_t)&__p))
  {
    p_p = &__p;
    size_t v5 = sub_19E1413DC((uint64_t)(a1 + 48), (uint64_t)&__p, (uint64_t)&unk_19E351150, (long long **)&p_p);
    goto LABEL_15;
  }
  uint64_t v6 = a1 + 58;
  if (!sub_19E1652BC(v6, (uint64_t)&__p))
  {
LABEL_17:
    uint64_t v7 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return v7;
    }
    goto LABEL_18;
  }
  p_p = &__p;
  size_t v5 = sub_19E140A3C((uint64_t)v6, (uint64_t)&__p, (uint64_t)&unk_19E351150, (long long **)&p_p);
LABEL_15:
  uint64_t v7 = v5[5];
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    return v7;
  }
LABEL_18:
  operator delete(__p.__r_.__value_.__l.__data_);
  return v7;
}

void sub_19E16434C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E164374(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_19E304F28(a1, a2, (uint64_t)__p);
  size_t v5 = (void *)(a1 + 768);
  if (sub_19E140120(v5, (uint64_t)__p))
  {
    int v10 = __p;
    uint64_t v6 = sub_19E1403B8((uint64_t)v5, (uint64_t)__p, (uint64_t)&unk_19E351150, (long long **)&v10);
    long long v7 = *(_OWORD *)(v6 + 7);
    *(_OWORD *)a3 = *(_OWORD *)(v6 + 5);
    *(_OWORD *)(a3 + 16) = v7;
    *(void *)(a3 + 32) = v6[9];
    if ((v9 & 0x80000000) == 0) {
      return;
    }
LABEL_5:
    operator delete(__p[0]);
    return;
  }
  *(void *)(a3 + 32) = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  if (v9 < 0) {
    goto LABEL_5;
  }
}

void sub_19E164428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E164444(uint64_t a1)
{
  if (*(void *)(a1 + 408))
  {
    uint64_t v2 = *(void ***)(a1 + 400);
    if (v2)
    {
      do
      {
        int v25 = (void **)*v2;
        if (*((char *)v2 + 39) < 0) {
          operator delete(v2[2]);
        }
        operator delete(v2);
        uint64_t v2 = v25;
      }
      while (v25);
    }
    *(void *)(a1 + 400) = 0;
    uint64_t v3 = *(void *)(a1 + 392);
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*(void *)(a1 + 384) + 8 * i) = 0;
    }
    *(void *)(a1 + 408) = 0;
  }
  if (*(void *)(a1 + 368))
  {
    size_t v5 = *(void ***)(a1 + 360);
    if (v5)
    {
      do
      {
        uint64_t v26 = (void **)*v5;
        if (*((char *)v5 + 39) < 0) {
          operator delete(v5[2]);
        }
        operator delete(v5);
        size_t v5 = v26;
      }
      while (v26);
    }
    *(void *)(a1 + 360) = 0;
    uint64_t v6 = *(void *)(a1 + 352);
    if (v6)
    {
      for (uint64_t j = 0; j != v6; ++j)
        *(void *)(*(void *)(a1 + 344) + 8 * j) = 0;
    }
    *(void *)(a1 + 368) = 0;
  }
  if (*(void *)(a1 + 448))
  {
    int v8 = *(void ***)(a1 + 440);
    if (v8)
    {
      do
      {
        size_t v27 = (void **)*v8;
        if (*((char *)v8 + 39) < 0) {
          operator delete(v8[2]);
        }
        operator delete(v8);
        int v8 = v27;
      }
      while (v27);
    }
    *(void *)(a1 + 440) = 0;
    uint64_t v9 = *(void *)(a1 + 432);
    if (v9)
    {
      for (uint64_t k = 0; k != v9; ++k)
        *(void *)(*(void *)(a1 + 424) + 8 * k) = 0;
    }
    *(void *)(a1 + 448) = 0;
  }
  if (*(void *)(a1 + 488))
  {
    long long v11 = *(char **)(a1 + 480);
    if (v11)
    {
      do
      {
        uint64_t v28 = *(char **)v11;
        uint64_t v29 = (void *)*((void *)v11 + 5);
        if (v29)
        {
          *((void *)v11 + 6) = v29;
          operator delete(v29);
        }
        if (v11[39] < 0) {
          operator delete(*((void **)v11 + 2));
        }
        operator delete(v11);
        long long v11 = v28;
      }
      while (v28);
    }
    *(void *)(a1 + 480) = 0;
    uint64_t v12 = *(void *)(a1 + 472);
    if (v12)
    {
      for (uint64_t m = 0; m != v12; ++m)
        *(void *)(*(void *)(a1 + 464) + 8 * m) = 0;
    }
    *(void *)(a1 + 488) = 0;
  }
  if (*(void *)(a1 + 528))
  {
    uint64_t v14 = *(char **)(a1 + 520);
    if (v14)
    {
      do
      {
        int v30 = *(char **)v14;
        uint64_t v31 = (void *)*((void *)v14 + 5);
        if (v31)
        {
          *((void *)v14 + 6) = v31;
          operator delete(v31);
        }
        if (v14[39] < 0) {
          operator delete(*((void **)v14 + 2));
        }
        operator delete(v14);
        uint64_t v14 = v30;
      }
      while (v30);
    }
    *(void *)(a1 + 520) = 0;
    uint64_t v15 = *(void *)(a1 + 512);
    if (v15)
    {
      for (uint64_t n = 0; n != v15; ++n)
        *(void *)(*(void *)(a1 + 504) + 8 * n) = 0;
    }
    *(void *)(a1 + 528) = 0;
  }
  if (*(void *)(a1 + 608))
  {
    uint64_t v17 = *(char **)(a1 + 600);
    if (v17)
    {
      do
      {
        unint64_t v32 = *(char **)v17;
        uint64_t v33 = (void *)*((void *)v17 + 5);
        if (v33)
        {
          *((void *)v17 + 6) = v33;
          operator delete(v33);
        }
        if (v17[39] < 0) {
          operator delete(*((void **)v17 + 2));
        }
        operator delete(v17);
        uint64_t v17 = v32;
      }
      while (v32);
    }
    *(void *)(a1 + 600) = 0;
    uint64_t v18 = *(void *)(a1 + 592);
    if (v18)
    {
      for (iuint64_t i = 0; ii != v18; ++ii)
        *(void *)(*(void *)(a1 + 584) + 8 * ii) = 0;
    }
    *(void *)(a1 + 608) = 0;
  }
  if (*(void *)(a1 + 648))
  {
    uint64_t v20 = *(void ***)(a1 + 640);
    if (v20)
    {
      do
      {
        uint64_t v34 = (void **)*v20;
        if (*((char *)v20 + 39) < 0) {
          operator delete(v20[2]);
        }
        operator delete(v20);
        uint64_t v20 = v34;
      }
      while (v34);
    }
    *(void *)(a1 + 640) = 0;
    uint64_t v21 = *(void *)(a1 + 632);
    if (v21)
    {
      for (juint64_t j = 0; jj != v21; ++jj)
        *(void *)(*(void *)(a1 + 624) + 8 * jj) = 0;
    }
    *(void *)(a1 + 648) = 0;
  }
  uint64_t v23 = *(void *)(a1 + 320);
  for (kuint64_t k = *(void *)(a1 + 328); kk != v23; kk -= 72)
  {
    if (*(char *)(kk - 49) < 0) {
      operator delete(*(void **)(kk - 72));
    }
  }
  *(void *)(a1 + 328) = v23;
  if (!*(unsigned char *)(a1 + 312)) {
    espresso_plan_build_clean();
  }
  if (!sub_19E1606B4(a1)) {
    goto LABEL_156;
  }
  uint64_t v35 = *(void *)(a1 + 752);
  uint64_t v36 = *(void *)(a1 + 712);
  int v96 = 0;
  unint64_t v97 = 0;
  long long v98 = 0;
  unint64_t v37 = v36 + v35;
  if (v36 + v35)
  {
    if (v37 >> 62) {
      sub_19E13D694();
    }
    int v96 = (char *)operator new(4 * v37);
    long long v98 = &v96[4 * v37];
    bzero(v96, 4 * v37);
    unint64_t v97 = v98;
    uint64_t v38 = (char *)operator new(4 * v37);
    bzero(v38, 4 * v37);
    uint64_t v39 = (char *)operator new(4 * v37);
    bzero(v39, 4 * v37);
    int8x16_t v89 = (char *)operator new(4 * v37);
    bzero(v89, 4 * v37);
    unint64_t v40 = (char *)operator new(4 * v37);
    bzero(v40, 4 * v37);
    int v86 = operator new(4 * v37);
    memset_pattern16(v86, &unk_19E351350, 4 * v37);
    int8x16_t v41 = v89;
  }
  else
  {
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    int8x16_t v41 = 0;
    unint64_t v40 = 0;
    int v86 = 0;
  }
  uint64_t v90 = v41;
  unint64_t v91 = v40;
  uint64_t v87 = v39;
  uint64_t v88 = v38;
  uint64_t v42 = (std::string *)sub_19E164130(&v94, v37);
  uint64_t v43 = *(uint64_t **)(a1 + 744);
  if (v43)
  {
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    do
    {
      uint64_t v46 = v43[6];
      uint64_t v47 = v43[7];
      uint64_t v48 = 4 * v45;
      *(_DWORD *)&v96[v48] = v43[5];
      *(_DWORD *)&v38[v48] = v46;
      *(_DWORD *)&v39[v48] = v47;
      *(_DWORD *)&v41[v48] = 1;
      *(_DWORD *)&v40[v48] = 1;
      uint64_t v42 = std::string::operator=((std::string *)((char *)v94 + v44), (const std::string *)(v43 + 2));
      ++v45;
      uint64_t v43 = (uint64_t *)*v43;
      v44 += 24;
    }
    while (v43);
    int v49 = *(uint64_t **)(a1 + 704);
    if (!v49) {
      goto LABEL_96;
    }
LABEL_88:
    uint64_t v50 = 4 * v45;
    uint64_t v51 = 24 * v45;
    do
    {
      uint64_t v52 = v49[5];
      int v53 = *((_DWORD *)v49 + 12);
      uint64_t v54 = v49[7];
      int v55 = *((_DWORD *)v49 + 18);
      BOOL v56 = sub_19E160170((uint64_t)v42, (char **)v49 + 2);
      *(_DWORD *)&v96[v50] = v52;
      if (v56) {
        int v57 = 0;
      }
      else {
        int v57 = v53;
      }
      *(_DWORD *)&v88[v50] = v57;
      *(_DWORD *)&v87[v50] = v54;
      *(_DWORD *)&v90[v50] = 1;
      if (v56) {
        int v58 = v55;
      }
      else {
        int v58 = 0;
      }
      *(_DWORD *)&v91[v50] = v58;
      uint64_t v42 = std::string::operator=((std::string *)((char *)v94 + v51), (const std::string *)(v49 + 2));
      int v49 = (uint64_t *)*v49;
      v50 += 4;
      v51 += 24;
    }
    while (v49);
    goto LABEL_96;
  }
  LODWORD(v45) = 0;
  int v49 = *(uint64_t **)(a1 + 704);
  if (v49) {
    goto LABEL_88;
  }
LABEL_96:
  std::string __p = 0;
  uint64_t v93 = 0;
  unint64_t v59 = (char *)v94;
  if (v95 != v94)
  {
    unint64_t v60 = 0;
    unint64_t v61 = 0;
    uint64_t v62 = v91;
    while (1)
    {
      unint64_t v63 = &v59[24 * v61];
      if (v63[23] < 0)
      {
        unint64_t v63 = *(char **)v63;
        int v64 = v93;
        if (v60 >= v93)
        {
LABEL_104:
          uint64_t v65 = (v60 - __p) >> 3;
          unint64_t v66 = v65 + 1;
          if ((unint64_t)(v65 + 1) >> 61) {
            sub_19E13D694();
          }
          uint64_t v67 = v64 - __p;
          if (v67 >> 2 > v66) {
            unint64_t v66 = v67 >> 2;
          }
          if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v68 = v66;
          }
          if (v68)
          {
            if (v68 >> 61) {
              sub_19E13C418();
            }
            uint64_t v69 = operator new(8 * v68);
            uint64_t v70 = &v69[8 * v65];
            *(void *)uint64_t v70 = v63;
            uint64_t v71 = (uint64_t)(v70 + 8);
            if (v60 != __p)
            {
LABEL_113:
              unint64_t v72 = v60 - 8 - __p;
              if (v72 < 0x168)
              {
                uint64_t v73 = v60;
                goto LABEL_115;
              }
              if (&v69[v60 - __p - 8 - (v72 & 0xFFFFFFFFFFFFFFF8)] > &v69[v60 - __p - 8])
              {
                uint64_t v73 = v60;
                goto LABEL_115;
              }
              if (&v60[-(v72 & 0xFFFFFFFFFFFFFFF8) - 8] > v60 - 8)
              {
                uint64_t v73 = v60;
                goto LABEL_115;
              }
              if ((unint64_t)(__p - v69) < 0x20)
              {
                uint64_t v73 = v60;
                goto LABEL_115;
              }
              uint64_t v75 = (v72 >> 3) + 1;
              uint64_t v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v73 = &v60[-v76];
              v70 -= v76;
              uint64_t v77 = &v69[8 * v65 - 16];
              uint64_t v78 = v60 - 16;
              uint64_t v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v80 = *(_OWORD *)v78;
                *(v77 - 1) = *((_OWORD *)v78 - 1);
                *uint64_t v77 = v80;
                v77 -= 2;
                v78 -= 32;
                v79 -= 4;
              }
              while (v79);
              if (v75 != (v75 & 0x3FFFFFFFFFFFFFFCLL))
              {
                do
                {
LABEL_115:
                  uint64_t v74 = *((void *)v73 - 1);
                  v73 -= 8;
                  *((void *)v70 - 1) = v74;
                  v70 -= 8;
                }
                while (v73 != __p);
              }
              unint64_t v60 = __p;
              std::string __p = v70;
              uint64_t v93 = &v69[8 * v68];
              if (!v60)
              {
LABEL_121:
                unint64_t v60 = (char *)v71;
                uint64_t v62 = v91;
                goto LABEL_99;
              }
LABEL_120:
              operator delete(v60);
              goto LABEL_121;
            }
          }
          else
          {
            uint64_t v69 = 0;
            uint64_t v70 = (char *)(8 * v65);
            *(void *)(8 * v65) = v63;
            uint64_t v71 = 8 * v65 + 8;
            if (v60 != __p) {
              goto LABEL_113;
            }
          }
          std::string __p = v70;
          uint64_t v93 = &v69[8 * v68];
          if (!v60) {
            goto LABEL_121;
          }
          goto LABEL_120;
        }
      }
      else
      {
        int v64 = v93;
        if (v60 >= v93) {
          goto LABEL_104;
        }
      }
      *(void *)unint64_t v60 = v63;
      v60 += 8;
LABEL_99:
      ++v61;
      unint64_t v59 = (char *)v94;
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v95 - (unsigned char *)v94) >> 3) <= v61)
      {
        uint64_t v81 = __p;
        goto LABEL_134;
      }
    }
  }
  uint64_t v81 = 0;
  uint64_t v62 = v91;
LABEL_134:
  uint64_t v82 = v96;
  espresso_network_change_input_blob_shapes_seq_rank();
  espresso_plan_build();
  espresso_plan_build_clean();
  if (v81) {
    operator delete(v81);
  }
  BOOL v83 = (void **)v94;
  if (v94)
  {
    long long v84 = v95;
    uint64_t v85 = v94;
    if (v95 != v94)
    {
      do
      {
        if (*((char *)v84 - 1) < 0) {
          operator delete(*(v84 - 3));
        }
        v84 -= 3;
      }
      while (v84 != v83);
      uint64_t v85 = v94;
    }
    uint64_t v95 = v83;
    operator delete(v85);
  }
  if (v86) {
    operator delete(v86);
  }
  if (v62) {
    operator delete(v62);
  }
  if (v90) {
    operator delete(v90);
  }
  if (v87) {
    operator delete(v87);
  }
  if (v88) {
    operator delete(v88);
  }
  if (v82) {
    operator delete(v82);
  }
LABEL_156:
  *(unsigned char *)(a1 + 312) = 1;
}

void sub_19E164C90(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  operator delete(v25);
  if (a14) {
    operator delete(a14);
  }
  if (v24) {
    operator delete(v24);
  }
  if (v23) {
    operator delete(v23);
  }
  if (a22) {
    operator delete(a22);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x19E164C50);
}

uint64_t sub_19E164D94(uint64_t a1, const void **a2)
{
  if (espresso_network_declare_output()) {
    return 0;
  }
  sub_19E140890((uint64_t **)(a1 + 32), a2, (uint64_t)a2);
  return 1;
}

uint64_t sub_19E164E14()
{
  qword_1E9457D28 = 0;
  unk_1E9457D30 = "MontrealNeuralNetworkState";
  qword_1E9457D38 = 0;
  unk_1E9457D40 = 0;
  qword_1E9457D48 = (uint64_t)sub_19E1403B0;
  unk_1E9457D50 = 0u;
  unk_1E9457D60 = 0u;
  uint64_t result = _CFRuntimeRegisterClass();
  qword_1E9457D88 = result;
  return result;
}

void sub_19E164E6C(uint64_t a1, unint64_t a2)
{
  size_t v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 2)
  {
    if (a2)
    {
      bzero(v5, 4 * a2);
      uint64_t v6 = &v5[4 * a2];
    }
    *(void *)(a1 + 8) = v6;
  }
  else
  {
    long long v7 = *(char **)a1;
    uint64_t v8 = (uint64_t)&v5[-*(void *)a1];
    uint64_t v9 = v8 >> 2;
    unint64_t v10 = (v8 >> 2) + a2;
    if (v10 >> 62) {
      sub_19E13D694();
    }
    uint64_t v11 = v4 - (void)v7;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 62) {
        sub_19E13C418();
      }
      uint64_t v13 = operator new(4 * v12);
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[4 * v9];
    size_t v15 = 4 * a2;
    size_t v16 = &v13[4 * v12];
    bzero(v14, v15);
    uint64_t v17 = &v14[v15];
    if (v5 != v7)
    {
      unint64_t v18 = v5 - v7 - 4;
      if (v18 < 0x2C) {
        goto LABEL_31;
      }
      if ((unint64_t)(v5 - v13 - v8) < 0x20) {
        goto LABEL_31;
      }
      uint64_t v19 = (v18 >> 2) + 1;
      uint64_t v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v6 = &v5[-v20];
      v14 -= v20;
      uint64_t v21 = &v13[4 * v9 - 16];
      uint64_t v22 = v5 - 16;
      uint64_t v23 = v19 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        _OWORD *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 8;
      }
      while (v23);
      if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_31:
        do
        {
          int v25 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *((_DWORD *)v14 - 1) = v25;
          v14 -= 4;
        }
        while (v6 != v7);
      }
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v17;
    *(void *)(a1 + 16) = v16;
    if (v7)
    {
      operator delete(v7);
    }
  }
}

char *sub_19E16501C(char **a1, uint64_t a2, void *a3, uint64_t a4)
{
  size_t v5 = *a1;
  uint64_t v6 = a1[1];
  unint64_t v7 = 0x8E38E38E38E38E39 * ((v6 - *a1) >> 3);
  unint64_t v8 = v7 + 1;
  if (v7 + 1 > 0x38E38E38E38E38ELL) {
    sub_19E13D694();
  }
  if (0x1C71C71C71C71C72 * ((a1[2] - v5) >> 3) > v8) {
    unint64_t v8 = 0x1C71C71C71C71C72 * ((a1[2] - v5) >> 3);
  }
  if (0x8E38E38E38E38E39 * ((a1[2] - v5) >> 3) >= 0x1C71C71C71C71C7) {
    unint64_t v12 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v12 = v8;
  }
  if (v12)
  {
    if (v12 > 0x38E38E38E38E38ELL) {
      sub_19E13C418();
    }
    uint64_t v13 = (char *)operator new(72 * v12);
  }
  else
  {
    uint64_t v13 = 0;
  }
  uint64_t v14 = &v13[72 * v7];
  long long v24 = &v13[72 * v12];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_19E13C2D0(v14, *(void **)a2, *(void *)(a2 + 8));
    size_t v5 = *a1;
    uint64_t v6 = a1[1];
  }
  else
  {
    *(_OWORD *)uint64_t v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
  }
  size_t v15 = v14;
  *((void *)v14 + 3) = *a3;
  long long v16 = *(_OWORD *)(a4 + 16);
  *((_OWORD *)v14 + 2) = *(_OWORD *)a4;
  *((_OWORD *)v14 + 3) = v16;
  *((void *)v14 + 8) = *(void *)(a4 + 32);
  uint64_t v17 = v14 + 72;
  if (v6 == v5)
  {
    uint64_t v21 = v5;
  }
  else
  {
    do
    {
      long long v18 = *(_OWORD *)(v6 - 72);
      *((void *)v15 - 7) = *((void *)v6 - 7);
      *(_OWORD *)(v15 - 72) = v18;
      *((void *)v6 - 8) = 0;
      *((void *)v6 - 7) = 0;
      *((void *)v6 - 9) = 0;
      *((void *)v15 - 6) = *((void *)v6 - 6);
      long long v19 = *(_OWORD *)(v6 - 40);
      long long v20 = *(_OWORD *)(v6 - 24);
      *((void *)v15 - 1) = *((void *)v6 - 1);
      *(_OWORD *)(v15 - 24) = v20;
      *(_OWORD *)(v15 - 40) = v19;
      v15 -= 72;
      v6 -= 72;
    }
    while (v6 != v5);
    uint64_t v21 = *a1;
    size_t v5 = a1[1];
    uint64_t v17 = v14 + 72;
  }
  *a1 = v15;
  a1[1] = v17;
  a1[2] = v24;
  if (v5 != v21)
  {
    uint64_t v22 = (void **)(v5 - 72);
    do
    {
      if (*((char *)v22 + 23) < 0) {
        operator delete(*v22);
      }
      v22 -= 9;
    }
    while (v22 + 9 != (void **)v21);
    size_t v5 = v21;
  }
  if (v5) {
    operator delete(v5);
  }
  return v17;
}

void sub_19E165240(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E165254((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E165254(uint64_t a1)
{
  uint64_t v3 = *(void ***)(a1 + 8);
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      size_t v5 = v2 - 9;
      *(void *)(a1 + 16) = v2 - 9;
      if (*((char *)v2 - 49) < 0)
      {
        operator delete(*v5);
        size_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t *sub_19E1652BC(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = sub_19E13CF50((uint64_t)&v27, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  unint64_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    uint64_t v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        uint64_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v22 = v13[1];
          if (v22 == v8)
          {
            uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            if ((v23 & 0x80u) == 0) {
              uint64_t v24 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v24 = v13[3];
            }
            if (v24 == v15)
            {
              int v25 = (const void **)(v13 + 2);
              if ((v23 & 0x80) != 0)
              {
                if (!memcmp(*v25, v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                for (uint64_t i = v2; *(unsigned __int8 *)v25 == *i; ++i)
                {
                  int v25 = (const void **)((char *)v25 + 1);
                  if (!--v23) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v22 & v16) != v10)
          {
            return 0;
          }
          uint64_t result = 0;
          uint64_t v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v17 == v8)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            long long v20 = (const void **)(v13 + 2);
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp(*v20, v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              for (uint64_t j = v2; *(unsigned __int8 *)v20 == *j; ++j)
              {
                long long v20 = (const void **)((char *)v20 + 1);
                if (!--v18) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        uint64_t result = 0;
        uint64_t v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

uint64_t sub_19E1654F4(uint64_t a1, std::string *this)
{
  uint64_t v2 = *(int *)(a1 + 72);
  uint64_t v3 = (unsigned int *)(*(void *)a1 + v2);
  if ((unint64_t)v3 > *(void *)a1 + *(void *)(a1 + 8) - 4
    || (std::string::size_type v5 = *v3, *(_DWORD *)(a1 + 72) = v2 + 4, v5 >= 0x2711)
    || !v5)
  {
    sub_19E2F6320(24);
  }
  uint64_t v7 = (int)v5;
  std::string::resize(this, v5, 0);
  if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v8 = this;
  }
  else {
    unint64_t v8 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  do
  {
    uint64_t v9 = *(int *)(a1 + 72);
    unint64_t v10 = (std::string::value_type *)(*(void *)a1 + v9);
    if ((unint64_t)v10 > *(void *)a1 + *(void *)(a1 + 8) - 1) {
      sub_19E2F6320(23);
    }
    std::string::value_type v11 = *v10;
    *(_DWORD *)(a1 + 72) = v9 + 1;
    v8->__r_.__value_.__s.__data_[0] = v11;
    unint64_t v8 = (std::string *)((char *)v8 + 1);
    --v5;
  }
  while (v5);
  return v7;
}

void sub_19E1655C4(float32x2_t **a1, uint64_t *a2, unsigned int a3, uint64_t a4, unsigned int a5)
{
  if ((int)a3 < 1) {
    return;
  }
  uint64_t v5 = a4;
  int v6 = a4 - 1;
  if ((int)a4 < 1) {
    int v6 = a4 + 2;
  }
  if (a5 > 5) {
    sub_19E2F6320(41);
  }
  uint64_t v7 = a2;
  vDSP_Length v9 = (int)a4;
  uint64_t v10 = 4 * (int)a4;
  uint64_t v11 = a4;
  vDSP_Length __N = (int)a4;
  switch(a5)
  {
    case 0u:
      uint64_t v12 = 0;
      uint64_t v13 = a3;
      do
      {
        memmove((char *)*a1 + v12, (const void *)(*v7 + v12), 4 * (int)v5);
        v12 += v10;
        --v13;
      }
      while (v13);
      return;
    case 1u:
      uint64_t v50 = 0;
      uint64_t v51 = 0;
      uint64_t v94 = a3;
      int v93 = (v6 >> 2) + 1;
      __asm { FMOV            V0.4S, #1.0 }
      float32x4_t v98 = _Q0;
      uint64_t v96 = 4 * (int)a4;
      while (1)
      {
        int v53 = v7;
        uint64_t v54 = v5;
        int v55 = *a1;
        uint64_t v56 = (uint64_t)*a1 + 4 * v51 * v9;
        uint64_t v57 = *v53;
        if ((v56 & 0xF) == 0)
        {
          if ((int)v54 >= -2)
          {
            int v63 = v93;
            do
            {
              *(double *)v64.i64 = MEMORY[0x19F3BC9C0]((__n128)vnegq_f32(*(float32x4_t *)(v57 + v50)));
              *(float32x4_t *)((char *)v55->f32 + v50) = vdivq_f32(v98, vaddq_f32(v64, v98));
              v55 += 2;
              v57 += 16;
              --v63;
            }
            while (v63);
          }
          goto LABEL_48;
        }
        if ((int)v54 >= 1)
        {
          if (v54 >= 4 && (unint64_t)(v56 - (v96 * v51 + v57)) >= 0x10)
          {
            uint64_t v65 = (float32x4_t *)(v57 + v50);
            unint64_t v66 = (float32x4_t *)((char *)v55 + v50);
            uint64_t v67 = v11 & 0xFFFFFFFC;
            do
            {
              float32x4_t v68 = *v65++;
              float32x4_t v102 = vnegq_f32(v68);
              float v99 = expf(v102.f32[1]);
              v69.f32[0] = expf(v102.f32[0]);
              v69.f32[1] = v99;
              float32x4_t v100 = v69;
              float v70 = expf(v102.f32[2]);
              float32x4_t v71 = v100;
              v71.f32[2] = v70;
              float32x4_t v101 = v71;
              float v72 = expf(v102.f32[3]);
              float32x4_t v73 = v101;
              v73.f32[3] = v72;
              *v66++ = vdivq_f32(v98, vaddq_f32(v73, v98));
              v67 -= 4;
            }
            while (v67);
            uint64_t v58 = v11 & 0xFFFFFFFC;
            if (v58 == v11) {
              goto LABEL_48;
            }
          }
          else
          {
            uint64_t v58 = 0;
          }
          uint64_t v59 = v11 - v58;
          uint64_t v60 = 4 * v58;
          uint64_t v61 = (uint64_t)v55 + v60;
          uint64_t v62 = v57 + v60;
          do
          {
            *(float *)(v61 + v50) = 1.0 / (float)(expf(-*(float *)(v62 + v50)) + 1.0);
            v61 += 4;
            v62 += 4;
            --v59;
          }
          while (v59);
        }
LABEL_48:
        ++v51;
        vDSP_Length v9 = __N;
        v50 += v96;
        uint64_t v5 = v54;
        uint64_t v7 = a2;
        if (v51 == v94) {
          return;
        }
      }
    case 2u:
      uint64_t v14 = 0;
      uint64_t v15 = a3;
      do
      {
        uint64_t v16 = (float *)((char *)*a1 + v14);
        unint64_t v17 = (const float *)(*v7 + v14);
        int v105 = v5;
        vvtanhf(v16, v17, &v105);
        v14 += v10;
        --v15;
      }
      while (v15);
      return;
    case 3u:
      uint64_t v74 = 0;
      uint64_t v75 = a3;
      do
      {
        uint64_t v76 = (float *)((char *)*a1 + v74);
        uint64_t v77 = (const float *)(*v7 + v74);
        int v105 = v5;
        float v103 = 1.7159;
        float __B = 0.66667;
        vDSP_vsmul(v77, 1, &__B, v76, 1, __N);
        vvtanhf(v76, v76, &v105);
        vDSP_vsmul(v76, 1, &v103, v76, 1, v105);
        v74 += v10;
        --v75;
      }
      while (v75);
      return;
    case 4u:
      if ((int)a4 < 1) {
        return;
      }
      uint64_t v18 = (float32x4_t *)*a1;
      uint64_t v19 = (float32x4_t *)*a2;
      uint64_t v20 = a3;
      if (a4 >= 8)
      {
        uint64_t v78 = 0;
        uint64_t v79 = v19 + 1;
        long long v80 = v18 + 1;
        uint64_t v81 = *a2;
        uint64_t v82 = *a1;
        while (1)
        {
          if ((unint64_t)((char *)v18 + v10 * v78 - ((char *)v19 + v10 * v78)) >= 0x20)
          {
            uint64_t v84 = a4 & 0xFFFFFFF8;
            uint64_t v85 = v80;
            int v86 = v79;
            do
            {
              float32x4_t v87 = vmaxnmq_f32(*v86, (float32x4_t)0);
              v85[-1] = vmaxnmq_f32(v86[-1], (float32x4_t)0);
              float32x4_t *v85 = v87;
              v86 += 2;
              v85 += 2;
              v84 -= 8;
            }
            while (v84);
            uint64_t v83 = a4 & 0xFFFFFFF8;
            if (v83 == a4) {
              goto LABEL_69;
            }
          }
          else
          {
            uint64_t v83 = 0;
          }
          uint64_t v88 = a4 - v83;
          uint64_t v89 = 4 * v83;
          uint64_t v90 = (float *)v82 + v83;
          unint64_t v91 = (float *)(v81 + v89);
          do
          {
            float v92 = *v91++;
            *v90++ = fmaxf(v92, 0.0);
            --v88;
          }
          while (v88);
LABEL_69:
          ++v78;
          uint64_t v79 = (float32x4_t *)((char *)v79 + v10);
          long long v80 = (float32x4_t *)((char *)v80 + v10);
          uint64_t v82 = (float32x2_t *)((char *)v82 + v10);
          v81 += v10;
          if (v78 == a3) {
            return;
          }
        }
      }
      uint64_t v21 = 0;
      uint64_t v22 = (uint64_t)&v19->i64[1] + 4;
      do
      {
        *(float *)((char *)v18->f32 + v21) = fmaxf(*(float *)(v22 + v21 - 12), 0.0);
        if (a4 != 1)
        {
          *(float *)((char *)&v18->f32[1] + v21) = fmaxf(*(float *)(v22 + v21 - 8), 0.0);
          if (a4 != 2)
          {
            *(float *)((char *)&v18->f32[2] + v21) = fmaxf(*(float *)(v22 + v21 - 4), 0.0);
            if (a4 != 3)
            {
              *(float *)((char *)&v18->f32[3] + v21) = fmaxf(*(float *)(v22 + v21), 0.0);
              if (a4 != 4)
              {
                *(float *)((char *)v18[1].f32 + v21) = fmaxf(*(float *)(v22 + v21 + 4), 0.0);
                if (a4 != 5)
                {
                  *(float *)((char *)&v18[1].f32[1] + v21) = fmaxf(*(float *)(v22 + v21 + 8), 0.0);
                  if (a4 != 6) {
                    *(float *)((char *)&v18[1].f32[2] + v21) = fmaxf(*(float *)(v22 + v21 + 12), 0.0);
                  }
                }
              }
            }
          }
        }
        v21 += v10;
        --v20;
      }
      while (v20);
      return;
    default:
      if ((int)a4 < 1) {
        return;
      }
      uint64_t v23 = 0;
      uint64_t v24 = *a1;
      uint64_t v25 = *a2;
      uint64_t v26 = 4 * (int)a4;
      float64x2_t v27 = (float64x2_t)vdupq_n_s64(0x3FC999999999999AuLL);
      __asm
      {
        FMOV            V3.2D, #0.5
        FMOV            V4.2S, #1.0
      }
      uint64_t v33 = (float32x2_t *)*a2;
      uint64_t v34 = *a1;
      break;
  }
  while (1)
  {
    if (a4 < 4)
    {
      uint64_t v35 = 0;
      goto LABEL_44;
    }
    uint64_t v36 = 4 * a4 + v10 * v23;
    unint64_t v37 = v25 + v36;
    unint64_t v38 = (unint64_t)v24 + v36;
    if ((unint64_t)v24 + v10 * v23 >= v37 || v25 + v10 * v23 >= v38) {
      break;
    }
    uint64_t v35 = 0;
    do
    {
LABEL_44:
      float v48 = v33->f32[v35] * 0.2 + 0.5;
      v34->f32[v35] = v48;
      float v49 = 0.0;
      if (v48 < 0.0 || (float v49 = 1.0, v48 > 1.0)) {
        v34->f32[v35] = v49;
      }
      ++v35;
    }
    while (a4 != v35);
LABEL_25:
    ++v23;
    uint64_t v34 = (float32x2_t *)((char *)v34 + v26);
    uint64_t v33 = (float32x2_t *)((char *)v33 + v26);
    if (v23 == a3) {
      return;
    }
  }
  uint64_t v40 = a4 & 0xFFFFFFFE;
  int8x16_t v41 = v33;
  uint64_t v42 = v34;
  while (1)
  {
    float32x2_t v43 = vcvt_f32_f64(vmlaq_f64(_Q3, vcvtq_f64_f32(*v41), v27));
    float32x2_t *v42 = v43;
    int8x8_t v44 = (int8x8_t)vcltz_f32(v43);
    int8x8_t v45 = (int8x8_t)vcgt_f32(v43, _D4);
    int8x8_t v46 = vand_s8(vand_s8((int8x8_t)_D4, (int8x8_t)vcgez_f32(v43)), v45);
    int8x8_t v47 = vorr_s8(v45, v44);
    if (v47.i8[0])
    {
      v42->i32[0] = v46.i32[0];
      if (v47.i8[4]) {
        goto LABEL_39;
      }
    }
    else if (v47.i8[4])
    {
LABEL_39:
      v42->i32[1] = v46.i32[1];
    }
    ++v42;
    ++v41;
    v40 -= 2;
    if (!v40)
    {
      uint64_t v35 = a4 & 0xFFFFFFFE;
      if (v35 == a4) {
        goto LABEL_25;
      }
      goto LABEL_44;
    }
  }
}

uint64_t sub_19E165C28(FILE *__stream, int a2, int *a3, _DWORD *a4, void *a5, void *a6, void *a7, _DWORD *a8, _DWORD *a9, int *a10, unsigned int *a11, _DWORD *a12)
{
  *a10 = 32;
  unsigned int __ptr = -1;
  fread(&__ptr, 4uLL, 1uLL, __stream);
  unsigned int v16 = __ptr;
  if (__ptr > 1)
  {
    if ((__ptr & 0xFFFFFFFE) == 4)
    {
      *a11 = 3;
      long long v24 = xmmword_19E3513A0;
      uint64_t v25 = 0x100000001;
      int v26 = 32;
      sub_19E165E1C((int *)&v24, __stream, 1);
      int v19 = HIDWORD(v25);
      *a10 = v26;
      int v20 = DWORD1(v24);
      *a8 = v25;
      *a9 = v20;
      *a12 = v19;
      *a3 = 0;
      if (v16 != 5) {
        goto LABEL_4;
      }
      goto LABEL_3;
    }
    if ((__ptr & 0xFFFFFFFE) != 2) {
      sub_19E2F6320(38);
    }
    *a11 = 2;
    long long v24 = xmmword_19E3513A0;
    uint64_t v25 = 0x100000001;
    int v26 = 32;
    sub_19E165E1C((int *)&v24, __stream, 1);
    int v18 = DWORD1(v24);
    *a8 = v25;
    *a9 = v18;
    if (v16 == 3)
    {
LABEL_3:
      (*(void (**)(_DWORD *, FILE *, uint64_t))(*(void *)a4 + 8))(a4, __stream, 1);
      *a3 = a4[2];
    }
  }
  else
  {
    *a11 = 1;
    *a8 = -1;
    *a9 = 2;
    if (*a3 >= 1) {
      goto LABEL_3;
    }
  }
LABEL_4:
  sub_19E2F6698(__stream, (int)"LMTRAINER", a5);
  sub_19E2F6698(__stream, (int)"LMTRAINER", a6);
  sub_19E2F6698(__stream, (int)"LMTRAINER", a7);
  return *a11;
}

size_t sub_19E165E1C(int *__ptr, FILE *__stream, int a3)
{
  if (a3)
  {
    int __ptra = 0;
    fread(&__ptra, 4uLL, 1uLL, __stream);
  }
  size_t v5 = fread(__ptr, 4uLL, 1uLL, __stream);
  size_t v6 = fread(__ptr + 1, 4uLL, 1uLL, __stream) + v5;
  size_t v7 = fread(__ptr + 2, 4uLL, 1uLL, __stream);
  unint64_t v8 = __ptr + 3;
  size_t v9 = v6 + v7 + fread(__ptr + 3, 4uLL, 1uLL, __stream);
  size_t v10 = fread(__ptr + 4, 4uLL, 1uLL, __stream);
  size_t result = fread(__ptr + 5, 4uLL, 1uLL, __stream);
  if (v9 + v10 + result != 6) {
    sub_19E2F6320(67);
  }
  int v12 = *v8 & 3;
  if (!v12) {
    goto LABEL_10;
  }
  unsigned int v13 = *v8 & 0xFFFFFFFC;
  if (!v13) {
    unsigned int v13 = 32;
  }
  __ptr[6] = v13;
  if (v13 > 0x20 || ((1 << v13) & 0x100010100) == 0) {
LABEL_10:
  }
    sub_19E2F6320(25);
  *unint64_t v8 = v12;
  return result;
}

uint64_t sub_19E165F6C(void *a1)
{
  *a1 = &unk_1EF0A5018;
  uint64_t v2 = a1[6];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 48))(v2);
  }
  uint64_t v3 = (void *)a1[7];
  if (v3)
  {
    uint64_t v4 = v3[5];
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 368))(v4);
    }
    uint64_t v5 = v3[12];
    if (v5)
    {
      size_t v6 = (void *)sub_19E170BF0(v5);
      operator delete(v6);
    }
    size_t v7 = (void *)v3[13];
    if (v7)
    {
      v3[14] = v7;
      operator delete(v7);
    }
    operator delete(v3);
  }
  if (dword_1E9457D98 >= 1)
  {
    uint64_t v8 = 0;
    do
    {
      size_t v9 = *(void **)(a1[8] + 8 * v8);
      if (v9) {
        operator delete(v9);
      }
      size_t v10 = *(void **)(a1[14] + 8 * v8);
      if (v10) {
        operator delete(v10);
      }
      ++v8;
    }
    while (v8 < dword_1E9457D98);
  }
  uint64_t v11 = (void *)a1[14];
  if (v11)
  {
    a1[15] = v11;
    operator delete(v11);
  }
  uint64_t v12 = a1[11];
  if (v12)
  {
    uint64_t v13 = a1[12];
    uint64_t v14 = (void *)a1[11];
    if (v13 != v12)
    {
      uint64_t v15 = a1[12];
      do
      {
        unint64_t v17 = *(void **)(v15 - 24);
        v15 -= 24;
        unsigned int v16 = v17;
        if (v17)
        {
          *(void *)(v13 - 16) = v16;
          operator delete(v16);
        }
        uint64_t v13 = v15;
      }
      while (v15 != v12);
      uint64_t v14 = (void *)a1[11];
    }
    a1[12] = v12;
    operator delete(v14);
  }
  int v18 = (void *)a1[8];
  if (v18)
  {
    a1[9] = v18;
    operator delete(v18);
  }

  return nullsub_171(a1);
}

uint64_t sub_19E16610C(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_19E166144(void *a1)
{
  uint64_t v1 = (void *)sub_19E165F6C(a1);

  operator delete(v1);
}

void sub_19E16616C(uint64_t a1, uint64_t a2, int a3, int a4, int a5, uint64_t (***a6)(void), float a7, uint64_t a8, int a9, int a10, char a11)
{
  *(void *)(a1 + 152) = a2;
  *(_DWORD *)(a1 + 136) = a3;
  *(float *)(a1 + 144) = a7;
  *(_DWORD *)(a1 + 148) = a9;
  *(unsigned char *)(a1 + 140) = a11;
  *(_DWORD *)(a1 + 160) = a4;
  *(_DWORD *)(a1 + 164) = a5;
  *(void *)(a1 + 40) = a6;
  *(_DWORD *)(a1 + 36) = (**a6)(a6);
  operator new();
}

void sub_19E16651C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E166530(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E166548(uint64_t a1)
{
  double Current = CFAbsoluteTimeGetCurrent();
  if (*(unsigned char *)(a1 + 208))
  {
    (*(void (**)(void, void, void, float, float))(**(void **)(*(void *)(a1 + 152) + 40) + 336))(*(void *)(*(void *)(a1 + 152) + 40), *(void *)(*(void *)(a1 + 56) + 40), *(unsigned int *)(*(void *)(a1 + 56) + 12), *(float *)(*(void *)(*(void *)(a1 + 152) + 40) + 32), *(float *)(*(void *)(*(void *)(a1 + 152) + 40) + 36));
    *(CFAbsoluteTime *)(a1 + 240) = CFAbsoluteTimeGetCurrent() - Current;
    return;
  }
  uint64_t v3 = (*(void *)(*(void *)(a1 + 192) + 8) - **(void **)(a1 + 192)) >> 2;
  if (dword_1E9457D98 >= (int)v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = dword_1E9457D98;
  }
  uint64_t v59 = 0;
  uint64_t v6 = *(void *)(a1 + 88);
  uint64_t v5 = *(void *)(a1 + 96);
  if (v5 == v6)
  {
    uint64_t v6 = *(void *)(a1 + 96);
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 96);
    do
    {
      size_t v9 = *(void **)(v7 - 24);
      v7 -= 24;
      uint64_t v8 = v9;
      if (v9)
      {
        *(void *)(v5 - 16) = v8;
        operator delete(v8);
      }
      uint64_t v5 = v7;
    }
    while (v7 != v6);
    *(void *)(a1 + 96) = v6;
    uint64_t v5 = *(void *)(a1 + 88);
  }
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v5) >> 3);
  if ((int)v4 <= v10)
  {
    if ((int)v4 < v10)
    {
      uint64_t v11 = v5 + 24 * (int)v4;
      if (v6 != v11)
      {
        uint64_t v12 = v6;
        do
        {
          uint64_t v14 = *(void **)(v12 - 24);
          v12 -= 24;
          uint64_t v13 = v14;
          if (v14)
          {
            *(void *)(v6 - 16) = v13;
            operator delete(v13);
          }
          uint64_t v6 = v12;
        }
        while (v12 != v11);
      }
      *(void *)(a1 + 96) = v11;
    }
  }
  else
  {
    sub_19E232360(a1 + 88, (int)v4 - v10);
  }
  uint64_t v58 = a1 + 88;
  *(void *)(a1 + 220) = 0;
  *(void *)(a1 + 212) = 0;
  if ((int)v4 >= 1)
  {
    uint64_t v15 = 0;
    while (1)
    {
      uint64_t v17 = *(unsigned int *)(**(void **)(a1 + 200) + 4 * v15);
      uint64_t v18 = *(void *)(a1 + 64);
      uint64_t v19 = 8 * v15;
      uint64_t v20 = **(void **)(*(void *)(a1 + 152) + 104);
      int v21 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 264))(v20);
      bzero(*(void **)(v18 + 8 * v15), 4 * v21);
      uint64_t v22 = *(void *)(a1 + 112);
      int v23 = (*(uint64_t (**)(void))(**(void **)(*(void *)(*(void *)(a1 + 152) + 112) - 8) + 272))();
      bzero(*(void **)(v22 + 8 * v15), 4 * v23);
      if (*(_DWORD *)(a1 + 136) >= 6u)
      {
        uint64_t v56 = sub_19E166BD0(MEMORY[0x1E4FBA250], "inputEncoding has wrong value!");
        sub_19E166BD0(v56, "not allowed ");
        uint64_t v57 = (void *)std::ostream::operator<<();
        sub_19E166C18(v57);
        exit(5);
      }
      (*(void (**)(void, void, uint64_t))(**(void **)(a1 + 40) + 8))(*(void *)(a1 + 40), *(unsigned int *)(**(void **)(a1 + 192) + 4 * v15), *(void *)(a1 + 64) + v19);
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 48) + 8))(*(void *)(a1 + 48), v17, *(void *)(a1 + 112) + v19);
      if (*(_DWORD *)(a1 + 136) != 1) {
        goto LABEL_26;
      }
      uint64_t v24 = *(void *)(a1 + 88) + 24 * v15;
      uint64_t v25 = **(void **)(a1 + 192);
      float64x2_t v27 = *(char **)(v24 + 8);
      unint64_t v26 = *(void *)(v24 + 16);
      if ((unint64_t)v27 >= v26) {
        break;
      }
      *(_DWORD *)float64x2_t v27 = *(_DWORD *)(v25 + 4 * v15);
      uint64_t v16 = (uint64_t)(v27 + 4);
LABEL_25:
      *(void *)(v24 + 8) = v16;
LABEL_26:
      if (++v15 == v4) {
        goto LABEL_50;
      }
    }
    uint64_t v28 = *(char **)v24;
    uint64_t v29 = (uint64_t)&v27[-*(void *)v24];
    uint64_t v30 = v29 >> 2;
    unint64_t v31 = (v29 >> 2) + 1;
    if (v31 >> 62) {
      sub_19E13D694();
    }
    uint64_t v32 = v26 - (void)v28;
    if (v32 >> 1 > v31) {
      unint64_t v31 = v32 >> 1;
    }
    if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v33 = v31;
    }
    if (v33)
    {
      if (v33 >> 62) {
        sub_19E13C418();
      }
      uint64_t v34 = operator new(4 * v33);
      uint64_t v35 = &v34[4 * v30];
      *uint64_t v35 = *(_DWORD *)(v25 + 4 * v15);
      uint64_t v16 = (uint64_t)(v35 + 1);
      if (v27 == v28) {
        goto LABEL_48;
      }
    }
    else
    {
      uint64_t v34 = 0;
      uint64_t v35 = (_DWORD *)(4 * v30);
      *(_DWORD *)(4 * v30) = *(_DWORD *)(v25 + 4 * v15);
      uint64_t v16 = 4 * v30 + 4;
      if (v27 == v28)
      {
LABEL_48:
        *(void *)uint64_t v24 = v35;
        *(void *)(v24 + 8) = v16;
        *(void *)(v24 + 16) = &v34[4 * v33];
        if (v28) {
          operator delete(v28);
        }
        goto LABEL_25;
      }
    }
    unint64_t v36 = v27 - 4 - v28;
    if (v36 < 0x2C) {
      goto LABEL_73;
    }
    if ((unint64_t)(v27 - &v34[v29]) < 0x20) {
      goto LABEL_73;
    }
    uint64_t v37 = (v36 >> 2) + 1;
    uint64_t v38 = 4 * (v37 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v39 = &v27[-v38];
    uint64_t v35 = (_DWORD *)((char *)v35 - v38);
    uint64_t v40 = &v34[4 * v30 - 16];
    int8x16_t v41 = v27 - 16;
    uint64_t v42 = v37 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v43 = *(_OWORD *)v41;
      *(v40 - 1) = *((_OWORD *)v41 - 1);
      _OWORD *v40 = v43;
      v40 -= 2;
      v41 -= 32;
      v42 -= 8;
    }
    while (v42);
    float64x2_t v27 = v39;
    if (v37 != (v37 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_73:
      do
      {
        int v44 = *((_DWORD *)v27 - 1);
        v27 -= 4;
        *--uint64_t v35 = v44;
      }
      while (v27 != v28);
    }
    goto LABEL_48;
  }
LABEL_50:
  if (*(_DWORD *)(a1 + 136) != 1)
  {
    uint64_t v46 = *(void *)(a1 + 88);
    uint64_t v45 = *(void *)(a1 + 96);
    if (v45 != v46)
    {
      uint64_t v47 = *(void *)(a1 + 96);
      do
      {
        float v49 = *(void **)(v47 - 24);
        v47 -= 24;
        float v48 = v49;
        if (v49)
        {
          *(void *)(v45 - 16) = v48;
          operator delete(v48);
        }
        uint64_t v45 = v47;
      }
      while (v47 != v46);
    }
    *(void *)(a1 + 96) = v46;
  }
  if (*(_DWORD *)(a1 + 168))
  {
    uint64_t v50 = sub_19E13DB94(MEMORY[0x1E4FBA250], (uint64_t)"Threaded recognize not supported", 32);
    std::ios_base::getloc((const std::ios_base *)((char *)v50 + *(void *)(*v50 - 24)));
    uint64_t v51 = std::locale::use_facet(&v60, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v51->__vftable[2].~facet_0)(v51, 10);
    std::locale::~locale(&v60);
    std::ostream::put();
    std::ostream::flush();
  }
  else
  {
    uint64_t v52 = *(void *)(a1 + 56);
    if (*(unsigned char *)(v52 + 28)) {
      sub_19E2F6320(43);
    }
    uint64_t v53 = *(unsigned int *)(a1 + 184);
    *(_DWORD *)(v52 + 12) = v4;
    if ((int)v4 < 1 || dword_1E9457D98 <= (int)v4) {
      sub_19E2F6320(39);
    }
    if (*(unsigned char *)(v52 + 16))
    {
      (*(void (**)(void, uint64_t, uint64_t, uint64_t, void))(**(void **)(*(void *)(v52 + 112) - 8)
                                                                        + 216))(*(void *)(*(void *)(v52 + 112) - 8), a1 + 112, v58, v4, 0);
      uint64_t v54 = *(unsigned int *)(v52 + 12);
    }
    else
    {
      uint64_t v54 = v4;
    }
    sub_19E22EEB8(*(float **)(v52 + 40), a1 + 64, v58, a1 + 112, v54, (uint64_t)&v59 + 4, (float *)&v59, v53, 1);
    *(_DWORD *)(a1 + 212) += SHIDWORD(v59) / (int)v4;
    *(float *)(a1 + 216) = *(float *)(a1 + 216) + *(float *)&v59;
    int v55 = *(_DWORD *)(a1 + 224) + v4;
    ++*(_DWORD *)(a1 + 220);
    *(_DWORD *)(a1 + 224) = v55;
    *(CFAbsoluteTime *)(a1 + 232) = CFAbsoluteTimeGetCurrent() - Current;
  }
}

void sub_19E166BBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::locale a12)
{
}

void *sub_19E166BD0(void *a1, char *__s)
{
  size_t v4 = strlen(__s);

  return sub_19E13DB94(a1, (uint64_t)__s, v4);
}

void *sub_19E166C18(void *a1)
{
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
  uint64_t v2 = std::locale::use_facet(&v4, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  return a1;
}

void sub_19E166CBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void sub_19E166CD0(uint64_t a1)
{
  *(_DWORD *)a1 = 1;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 2;
  operator new();
}

void sub_19E166DFC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 119) < 0)
  {
    operator delete(*(void **)(v1 + 96));
    if ((*v2 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((*v2 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v1 + 72));
  _Unwind_Resume(exception_object);
}

void sub_19E166E38(uint64_t a1)
{
  dword_1E9457D98 = 2;
  nullsub_171("MRLModelWrapper, layer #0 ");
  uint64_t v2 = *(void *)(a1 + 200);
  if (!*(_DWORD *)v2)
  {
    char v3 = *(_DWORD *)(v2 + 8) == 7;
    int v4 = *(_DWORD *)(v2 + 496 * (*(_DWORD *)(a1 + 192) - 1) + 16) << v3;
    *(_DWORD *)(a1 + 36) = v4;
    *(unsigned char *)(a1 + 188) = 0;
    *(_DWORD *)(a1 + 184) = 1;
    *(_DWORD *)(a1 + 20) = -1;
    *(unsigned char *)(a1 + 152) = 0;
    *(unsigned char *)(a1 + 216) = v3;
    int v5 = *(_DWORD *)(v2 + 12);
    *(_DWORD *)(a1 + 32) = v5;
    *(_DWORD *)(a1 + 40) = v4;
    if (*(unsigned char *)(v2 + 20))
    {
      *(_DWORD *)a1 = 1;
      *(_DWORD *)(a1 + 16) = 16;
      *(unsigned char *)(a1 + 152) = 0;
      *(void *)(a1 + 144) = 0;
      sub_19E169148(a1, *(_DWORD *)a1, (_DWORD *)(a1 + 32), (_DWORD *)(a1 + 36), v5, *(_DWORD *)(a1 + 36));
    }
    *(_DWORD *)a1 = 6;
    operator new();
  }
  sub_19E2F6320(90);
}

void sub_19E1670B8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E1670CC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E1670E8(uint64_t a1)
{
  *(_DWORD *)a1 = 1;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 2;
  operator new();
}

void sub_19E167258(_Unwind_Exception *exception_object)
{
  if ((*(char *)(v1 + 95) & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_19E1672A4(uint64_t a1)
{
  *(unsigned char *)(a1 + 188) = 0;
  *(_DWORD *)(a1 + 184) = -1;
  *(_DWORD *)(a1 + 20) = -1;
  *(unsigned char *)(a1 + 152) = 0;
  unsigned int v6 = -1;
  int v7 = -1;
  uint64_t v2 = (const char *)(a1 + 72);
  if (*(char *)(a1 + 95) < 0) {
    uint64_t v2 = *(const char **)v2;
  }
  char v3 = fopen(v2, "rb");
  if (v3)
  {
    int v4 = v3;
    sub_19E16C07C(a1, v3, &v7, &v6);
    *(void *)(a1 + 136) = v7;
    fclose(v4);
    dword_1E9457D98 = 2;
    if (*(unsigned char *)(a1 + 216)) {
      int v5 = 70;
    }
    else {
      int v5 = 2;
    }
    *(_DWORD *)(a1 + 224) = v5;
    sub_19E169148(a1, *(_DWORD *)a1, (_DWORD *)(a1 + 32), (_DWORD *)(a1 + 36), *(_DWORD *)(a1 + 32), *(_DWORD *)(a1 + 36));
  }
  sub_19E2F6320(12);
}

void sub_19E16746C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E167484(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = 1;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 20) = -1;
  operator new();
}

void sub_19E167684(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 119) < 0)
  {
    operator delete(*(void **)(v1 + 96));
    if ((*v2 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((*v2 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v1 + 72));
  _Unwind_Resume(exception_object);
}

void sub_19E1676C4(uint64_t a1)
{
  *(_DWORD *)a1 = 1;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0xFFFFFFFF00000002;
  operator new();
}

void sub_19E167828(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 119) < 0)
  {
    operator delete(*(void **)(v1 + 96));
    if ((*v2 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((*v2 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v1 + 72));
  _Unwind_Resume(exception_object);
}

void sub_19E167864(int *a1, void *__buf, int a3)
{
  unsigned int v6 = -1;
  int v7 = -1;
  int v4 = fmemopen(__buf, a3, "rb");
  if (v4)
  {
    int v5 = v4;
    sub_19E16C07C((uint64_t)a1, v4, &v7, &v6);
    fclose(v5);
    sub_19E169148((uint64_t)a1, *a1, a1 + 8, a1 + 9, a1[8], a1[9]);
  }
  sub_19E2F6320(12);
}

uint64_t sub_19E1679CC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 120);
  if (v1) {
    return **(void **)(v1 + 96);
  }
  else {
    return 0;
  }
}

uint64_t sub_19E1679E8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 120);
  if (v1) {
    return *(void *)(*(void *)(v1 + 96) + 8);
  }
  else {
    return 0;
  }
}

uint64_t sub_19E167A04(uint64_t a1, FILE *a2)
{
  return sub_19E167A0C(*(void *)(a1 + 120), a2);
}

uint64_t sub_19E167A0C(uint64_t a1, FILE *__stream)
{
  int v4 = *(_DWORD *)(a1 + 68);
  if (*(unsigned char *)(a1 + 16)) {
    int v5 = 5;
  }
  else {
    int v5 = 4;
  }
  int v12 = v5;
  unsigned int v13 = 0;
  sub_19E2F6848(__stream, &v13, &v12);
  int v11 = 6;
  sub_19E2F6848(__stream, &v13, &v11);
  int v6 = *(_DWORD *)(a1 + 24);
  int v7 = sub_19E2F62F0();
  *(_DWORD *)(a1 + 64) = 3;
  *(_DWORD *)(a1 + 68) = v4;
  *(void *)(a1 + 72) = 0x100000001;
  *(_DWORD *)(a1 + 80) = v6;
  *(_DWORD *)(a1 + 84) = 1;
  *(_DWORD *)(a1 + 88) = v7;
  sub_19E232568((_DWORD *)(a1 + 64), __stream, &v13);
  if (*(unsigned char *)(a1 + 16)) {
    (***(void (****)(void, FILE *, unsigned int *))(a1 + 56))(*(void *)(a1 + 56), __stream, &v13);
  }
  sub_19E2F6788(__stream, &v13, *(_DWORD *)a1);
  sub_19E2F6788(__stream, &v13, *(_DWORD *)(a1 + 4));
  sub_19E2F6788(__stream, &v13, *(_DWORD *)(a1 + 8));
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v9 = sub_19E2F62F0();
  (*(void (**)(uint64_t, FILE *, unsigned int *, uint64_t, uint64_t))(*(void *)v8 + 72))(v8, __stream, &v13, 1, v9);
  return v13;
}

uint64_t sub_19E167B70(uint64_t a1, FILE *a2)
{
  return sub_19E167B78(*(void *)(a1 + 120), a2);
}

uint64_t sub_19E167B78(uint64_t a1, FILE *__stream)
{
  int v4 = *(_DWORD *)(a1 + 68);
  if (*(unsigned char *)(a1 + 16)) {
    int v5 = 5;
  }
  else {
    int v5 = 4;
  }
  int v12 = v5;
  unsigned int v13 = 0;
  sub_19E2F6848(__stream, &v13, &v12);
  int v11 = 6;
  sub_19E2F6848(__stream, &v13, &v11);
  int v6 = *(_DWORD *)(a1 + 24);
  int v7 = sub_19E2F6300();
  *(_DWORD *)(a1 + 64) = 3;
  *(_DWORD *)(a1 + 68) = v4;
  *(void *)(a1 + 72) = 0x100000001;
  *(_DWORD *)(a1 + 80) = v6;
  *(_DWORD *)(a1 + 84) = 1;
  *(_DWORD *)(a1 + 88) = v7;
  sub_19E232568((_DWORD *)(a1 + 64), __stream, &v13);
  if (*(unsigned char *)(a1 + 16)) {
    (***(void (****)(void, FILE *, unsigned int *))(a1 + 56))(*(void *)(a1 + 56), __stream, &v13);
  }
  sub_19E2F6788(__stream, &v13, *(_DWORD *)a1);
  sub_19E2F6788(__stream, &v13, *(_DWORD *)(a1 + 4));
  sub_19E2F6788(__stream, &v13, *(_DWORD *)(a1 + 8));
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v9 = sub_19E2F6300();
  (*(void (**)(uint64_t, FILE *, unsigned int *, uint64_t, uint64_t))(*(void *)v8 + 72))(v8, __stream, &v13, 1, v9);
  return v13;
}

uint64_t sub_19E167CE4(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v4 = result;
  if (dword_1E9457D98 < a3 || !*(unsigned char *)(result + 188))
  {
    sub_19E167DCC(result);
    *(unsigned char *)(v4 + 188) = 0;
    dword_1E9457D98 = *(_DWORD *)(v4 + 220);
    *(_DWORD *)(v4 + 224) = a3;
    uint64_t v5 = *(void *)(v4 + 120);
    if (v5)
    {
      if (*(unsigned char *)(v4 + 216)) {
        (*(void (**)(void))(**(void **)(v5 + 40) + 184))(*(void *)(v5 + 40));
      }
      sub_19E168384(v4);
    }
    sub_19E2F6320(37);
  }
  return result;
}

void sub_19E167DCC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 120);
  if (v1 && *(unsigned char *)(a1 + 188))
  {
    (*(void (**)(void))(**(void **)(v1 + 40) + 208))(*(void *)(v1 + 40));
    sub_19E1685A0((void *)a1);
    char v3 = (void *)qword_1EB220718;
    qword_1EB220720 = qword_1EB220718;
    qword_1EB220750 = qword_1EB220748;
    qword_1EB2207C8 = qword_1EB2207C0;
    if (qword_1EB220728 != qword_1EB220718)
    {
      qword_1EB220718 = 0;
      qword_1EB220720 = 0;
      qword_1EB220728 = 0;
      if (v3) {
        operator delete(v3);
      }
    }
    sub_19E235900((uint64_t)&qword_1EB220748);
    sub_19E235900((uint64_t)&qword_1EB2207C0);
    uint64_t v4 = (void *)qword_1EB220658;
    qword_1EB220660 = qword_1EB220658;
    qword_1EB220648 = qword_1EB220640;
    qword_1EB220678 = qword_1EB220670;
    if (qword_1EB220668 != qword_1EB220658)
    {
      qword_1EB220658 = 0;
      qword_1EB220660 = 0;
      qword_1EB220668 = 0;
      if (v4) {
        operator delete(v4);
      }
    }
    sub_19E235900((uint64_t)&qword_1EB220640);
    sub_19E235900((uint64_t)&qword_1EB220670);
    uint64_t v5 = (void *)qword_1EB2207D8;
    qword_1EB2207E0 = qword_1EB2207D8;
    qword_1EB220690 = qword_1EB220688;
    qword_1EB2206A8 = qword_1EB2206A0;
    if (qword_1EB2207E8 != qword_1EB2207D8)
    {
      qword_1EB2207D8 = 0;
      qword_1EB2207E0 = 0;
      qword_1EB2207E8 = 0;
      if (v5) {
        operator delete(v5);
      }
    }
    sub_19E235900((uint64_t)&qword_1EB220688);
    sub_19E235900((uint64_t)&qword_1EB2206A0);
    int v6 = (void *)qword_1EB2206E8;
    qword_1EB2206F0 = qword_1EB2206E8;
    qword_1EB220708 = qword_1EB220700;
    qword_1EB220738 = qword_1EB220730;
    if (qword_1EB2206F8 != qword_1EB2206E8)
    {
      qword_1EB2206E8 = 0;
      qword_1EB2206F0 = 0;
      qword_1EB2206F8 = 0;
      if (v6) {
        operator delete(v6);
      }
    }
    sub_19E235900((uint64_t)&qword_1EB220700);
    sub_19E235900((uint64_t)&qword_1EB220730);
    int v7 = (void *)qword_1EB220778;
    qword_1EB220780 = qword_1EB220778;
    qword_1EB220798 = qword_1EB220790;
    qword_1EB220768 = qword_1EB220760;
    if (qword_1EB220788 != qword_1EB220778)
    {
      qword_1EB220778 = 0;
      qword_1EB220780 = 0;
      qword_1EB220788 = 0;
      if (v7) {
        operator delete(v7);
      }
    }
    sub_19E235900((uint64_t)&qword_1EB220790);
    sub_19E235900((uint64_t)&qword_1EB220760);
    uint64_t v8 = (void *)qword_1EB2206D0;
    qword_1EB2206D8 = qword_1EB2206D0;
    qword_1EB2207B0 = qword_1EB2207A8;
    qword_1EB2206C0 = qword_1EB2206B8;
    if (qword_1EB2206E0 != qword_1EB2206D0)
    {
      qword_1EB2206D0 = 0;
      qword_1EB2206D8 = 0;
      qword_1EB2206E0 = 0;
      if (v8) {
        operator delete(v8);
      }
    }
    sub_19E235900((uint64_t)&qword_1EB2207A8);
    sub_19E235900((uint64_t)&qword_1EB2206B8);
    *(unsigned char *)(a1 + 188) = 0;
  }
}

uint64_t sub_19E168088(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 120);
  if (!v1) {
    sub_19E2F6320(37);
  }
  uint64_t v2 = result;
  if (!*(unsigned char *)(result + 188))
  {
    if (*(unsigned char *)(result + 216)) {
      (*(void (**)(void))(**(void **)(v1 + 40) + 184))(*(void *)(v1 + 40));
    }
    sub_19E168384(v2);
  }
  return result;
}

uint64_t MRLModelGetWeights_0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 120) + 40) + 168))();
}

uint64_t sub_19E168164(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 120) + 40) + 176))();
}

void sub_19E168190(uint64_t a1, int a2)
{
  uint64_t v4 = *(void ****)(a1 + 128);
  uint64_t v5 = *v4;
  int v6 = v4[1];
  if (v6 == *v4)
  {
    unint64_t v10 = 0;
LABEL_16:
    sub_19E232360((uint64_t)v4, 1 - v10);
    goto LABEL_18;
  }
  int v7 = *v5;
  if (v5[1] != *v5)
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t v9 = (void *)v7[v8];
      if (v9)
      {
        operator delete[](v9);
        uint64_t v5 = *v4;
        int v7 = **v4;
      }
      ++v8;
    }
    while (v8 < ((unsigned char *)v5[1] - (unsigned char *)v7) >> 3);
    int v6 = v4[1];
  }
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v6 - v5);
  if (v6 == v5) {
    goto LABEL_16;
  }
  if (v10 >= 2)
  {
    int v11 = v5 + 3;
    if (v6 != v5 + 3)
    {
      int v12 = v6;
      do
      {
        uint64_t v14 = *(v12 - 3);
        v12 -= 3;
        unsigned int v13 = v14;
        if (v14)
        {
          *(v6 - 2) = v13;
          operator delete(v13);
        }
        int v6 = v12;
      }
      while (v12 != v11);
    }
    v4[1] = v11;
  }
LABEL_18:
  uint64_t v15 = *v4;
  uint64_t v16 = **v4;
  unint64_t v17 = ((unsigned char *)(*v4)[1] - v16) >> 3;
  if (a2 <= v17)
  {
    if (a2 < v17) {
      v15[1] = &v16[8 * a2];
    }
  }
  else
  {
    sub_19E1599BC(v15, a2 - v17);
  }
  if (a2 >= 1)
  {
    uint64_t v18 = **(void **)(*(void *)(a1 + 120) + 104);
    (*(void (**)(uint64_t))(*(void *)v18 + 264))(v18);
    operator new[]();
  }
}

void sub_19E168384(uint64_t a1)
{
  if (*(void *)(a1 + 120)) {
    operator new();
  }
  sub_19E2F6320(639);
}

void sub_19E1684F4(_Unwind_Exception *a1)
{
  char v3 = *v1;
  if (*v1)
  {
    v1[1] = v3;
    operator delete(v3);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19E168518(uint64_t a1)
{
  return *(unsigned int *)(a1 + 36);
}

void sub_19E168520(uint64_t a1)
{
  if (*(void *)(a1 + 120)) {
    operator new();
  }
  sub_19E2F6320(34);
}

void sub_19E1685A0(void *a1)
{
  uint64_t v2 = (uint64_t **)a1[16];
  if (v2)
  {
    char v3 = *v2;
    uint64_t v4 = **v2;
    if ((*v2)[1] == v4) {
      goto LABEL_9;
    }
    unint64_t v5 = 0;
    do
    {
      int v6 = *(void **)(v4 + 8 * v5);
      if (v6)
      {
        operator delete[](v6);
        char v3 = *v2;
        uint64_t v4 = **v2;
      }
      ++v5;
    }
    while (v5 < (v3[1] - v4) >> 3);
    uint64_t v2 = (uint64_t **)a1[16];
    if (!v2) {
      goto LABEL_17;
    }
    char v3 = *v2;
    if (*v2)
    {
LABEL_9:
      int v7 = v2[1];
      unint64_t v8 = v3;
      if (v7 != v3)
      {
        uint64_t v9 = v2[1];
        do
        {
          int v11 = (void *)*(v9 - 3);
          v9 -= 3;
          unint64_t v10 = v11;
          if (v11)
          {
            *(v7 - 2) = (uint64_t)v10;
            operator delete(v10);
          }
          int v7 = v9;
        }
        while (v9 != v3);
        unint64_t v8 = *v2;
      }
      v2[1] = v3;
      operator delete(v8);
    }
    operator delete(v2);
LABEL_17:
    a1[16] = 0;
  }
  int v12 = (void *)a1[21];
  if (v12)
  {
    operator delete[](v12);
    a1[21] = 0;
  }
  unsigned int v13 = (char **)a1[22];
  if (v13)
  {
    sub_19E1686BC((uint64_t)a1, v13);
    a1[22] = 0;
  }
  uint64_t v14 = (void **)a1[20];
  if (v14)
  {
    uint64_t v15 = *v14;
    if (*v14)
    {
      v14[1] = v15;
      operator delete(v15);
    }
    operator delete(v14);
    a1[20] = 0;
  }
}

void sub_19E1686BC(uint64_t a1, char **__p)
{
  if (!*(void *)(a1 + 120)) {
    sub_19E2F6320(40);
  }
  if (!__p) {
    sub_19E2F6320(41);
  }
  char v3 = __p[1];
  if (v3 != *__p)
  {
    unint64_t v4 = 0;
    uint64_t v5 = 8;
    char v3 = *__p;
    do
    {
      int v6 = *(void ***)&v3[v5];
      if (!*v6 || (operator delete[](*v6), v3 = *__p, (int v6 = *(void ***)&(*__p)[v5]) != 0))
      {
        operator delete(v6);
        char v3 = *__p;
      }
      ++v4;
      v5 += 16;
    }
    while (v4 < (__p[1] - v3) >> 4);
  }
  if (v3)
  {
    __p[1] = v3;
    operator delete(v3);
  }

  operator delete(__p);
}

uint64_t sub_19E168780(uint64_t a1)
{
  sub_19E167DCC(a1);
  *(unsigned char *)(a1 + 188) = 0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 48))(v2);
    *(void *)(a1 + 8) = 0;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3)
  {
    unint64_t v4 = (void *)sub_19E2309A8(v3);
    operator delete(v4);
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v5 = *(void **)(a1 + 120);
  if (v5)
  {
    uint64_t v6 = v5[5];
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 368))(v6);
    }
    uint64_t v7 = v5[12];
    if (v7)
    {
      unint64_t v8 = (void *)sub_19E170BF0(v7);
      operator delete(v8);
    }
    uint64_t v9 = (void *)v5[13];
    if (v9)
    {
      v5[14] = v9;
      operator delete(v9);
    }
    operator delete(v5);
    *(void *)(a1 + 120) = 0;
  }
  uint64_t v10 = *(void *)(a1 + 144);
  if (v10)
  {
    int v11 = *(_DWORD *)(a1 + 184);
    if (v11 == 3)
    {
      sub_19E13C56C(v10 + 72, *(void **)(v10 + 80));
      sub_19E13C56C(v10 + 48, *(void **)(v10 + 56));
      sub_19E230B84(v10 + 24, *(char **)(v10 + 32));
      sub_19E15A064(v10, *(char **)(v10 + 8));
    }
    else
    {
      if (v11 != 2)
      {
LABEL_19:
        *(void *)(a1 + 144) = 0;
        goto LABEL_20;
      }
      sub_19E13C56C(v10 + 72, *(void **)(v10 + 80));
      sub_19E13C56C(v10 + 48, *(void **)(v10 + 56));
      sub_19E13C56C(v10 + 24, *(void **)(v10 + 32));
      sub_19E13C56C(v10, *(void **)(v10 + 8));
    }
    operator delete((void *)v10);
    goto LABEL_19;
  }
LABEL_20:
  int v12 = *(void ***)(a1 + 208);
  if (v12)
  {
    unsigned int v13 = (char *)*v12;
    if (*v12)
    {
      uint64_t v14 = (char *)v12[1];
      uint64_t v15 = *v12;
      if (v14 != v13)
      {
        uint64_t v16 = (char *)v12[1];
        do
        {
          uint64_t v18 = (void *)*((void *)v16 - 3);
          v16 -= 24;
          unint64_t v17 = v18;
          if (v18)
          {
            *((void *)v14 - 2) = v17;
            operator delete(v17);
          }
          uint64_t v14 = v16;
        }
        while (v16 != v13);
        uint64_t v15 = *v12;
      }
      v12[1] = v13;
      operator delete(v15);
    }
    operator delete(v12);
  }
  dword_1E9457D98 = 2;
  if (*(char *)(a1 + 119) < 0)
  {
    operator delete(*(void **)(a1 + 96));
    if ((*(char *)(a1 + 95) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 72));
  return a1;
}

void sub_19E168998(void *a1, int a2, int a3, char **a4)
{
  int v6 = a3 + a2;
  uint64_t v7 = (a3 + a2 - 2) % a3;
  uint64_t v8 = *a1;
  uint64_t v10 = a4[1];
  uint64_t v9 = a4[2];
  int v11 = v10;
  uint64_t v111 = a1;
  int v110 = a3 + a2;
  if (v10 < v9)
  {
    *(_DWORD *)uint64_t v10 = *(_DWORD *)(v8 + 4 * v7);
    int v12 = v10 + 4;
    goto LABEL_25;
  }
  unsigned int v13 = *a4;
  uint64_t v14 = v10 - *a4;
  uint64_t v15 = v14 >> 2;
  unint64_t v16 = (v14 >> 2) + 1;
  if (v16 >> 62) {
    goto LABEL_127;
  }
  uint64_t v17 = v9 - v13;
  if (v17 >> 1 > v16) {
    unint64_t v16 = v17 >> 1;
  }
  if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v18 = v16;
  }
  if (v18)
  {
    if (v18 >> 62) {
      goto LABEL_128;
    }
    uint64_t v19 = operator new(4 * v18);
  }
  else
  {
    uint64_t v19 = 0;
  }
  uint64_t v20 = &v19[4 * v15];
  uint64_t v9 = &v19[4 * v18];
  *(_DWORD *)uint64_t v20 = *(_DWORD *)(v8 + 4 * v7);
  int v12 = v20 + 4;
  if (v10 == v13)
  {
    int v6 = v110;
  }
  else
  {
    unint64_t v21 = v10 - v13 - 4;
    if (v21 >= 0x2C)
    {
      unint64_t v22 = v10 - v19 - v14;
      int v6 = v110;
      if (v22 >= 0x20)
      {
        uint64_t v23 = (v21 >> 2) + 1;
        uint64_t v24 = 4 * (v23 & 0x7FFFFFFFFFFFFFF8);
        int v11 = &v10[-v24];
        v20 -= v24;
        uint64_t v25 = &v19[4 * v15 - 16];
        unint64_t v26 = v10 - 16;
        uint64_t v27 = v23 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          _OWORD *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 8;
        }
        while (v27);
        if (v23 == (v23 & 0x7FFFFFFFFFFFFFF8)) {
          goto LABEL_22;
        }
      }
    }
    else
    {
      int v6 = v110;
    }
    do
    {
      int v29 = *((_DWORD *)v11 - 1);
      v11 -= 4;
      *((_DWORD *)v20 - 1) = v29;
      v20 -= 4;
    }
    while (v11 != v13);
  }
LABEL_22:
  *a4 = v20;
  a4[1] = v12;
  a4[2] = v9;
  if (v13)
  {
    operator delete(v13);
    uint64_t v9 = a4[2];
  }
  a1 = v111;
LABEL_25:
  a4[1] = v12;
  uint64_t v30 = (v6 - 1) % a3;
  uint64_t v31 = *a1;
  if (v12 < v9)
  {
    *(_DWORD *)int v12 = *(_DWORD *)(v31 + 4 * v30);
    uint64_t v32 = v12 + 4;
    goto LABEL_45;
  }
  unint64_t v33 = *a4;
  uint64_t v34 = v12 - *a4;
  uint64_t v35 = v34 >> 2;
  unint64_t v36 = (v34 >> 2) + 1;
  if (v36 >> 62) {
    goto LABEL_127;
  }
  uint64_t v37 = v9 - v33;
  if (v37 >> 1 > v36) {
    unint64_t v36 = v37 >> 1;
  }
  if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v38 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v38 = v36;
  }
  if (v38)
  {
    if (v38 >> 62) {
      goto LABEL_128;
    }
    uint64_t v39 = operator new(4 * v38);
  }
  else
  {
    uint64_t v39 = 0;
  }
  uint64_t v40 = &v39[4 * v35];
  uint64_t v9 = &v39[4 * v38];
  *(_DWORD *)uint64_t v40 = *(_DWORD *)(v31 + 4 * v30);
  uint64_t v32 = v40 + 4;
  if (v12 == v33)
  {
    int v6 = v110;
    *a4 = v40;
    a4[1] = v32;
    a4[2] = v9;
    if (!v33) {
      goto LABEL_44;
    }
    goto LABEL_43;
  }
  unint64_t v41 = v12 - v33 - 4;
  if (v41 < 0x2C || (unint64_t)(v12 - v39 - v34) < 0x20)
  {
    uint64_t v42 = v12;
    int v6 = v110;
    do
    {
LABEL_41:
      int v43 = *((_DWORD *)v42 - 1);
      v42 -= 4;
      *((_DWORD *)v40 - 1) = v43;
      v40 -= 4;
    }
    while (v42 != v33);
    goto LABEL_42;
  }
  uint64_t v85 = (v41 >> 2) + 1;
  uint64_t v86 = 4 * (v85 & 0x7FFFFFFFFFFFFFF8);
  uint64_t v42 = &v12[-v86];
  v40 -= v86;
  float32x4_t v87 = &v39[4 * v35 - 16];
  uint64_t v88 = v12 - 16;
  uint64_t v89 = v85 & 0x7FFFFFFFFFFFFFF8;
  int v6 = v110;
  do
  {
    long long v90 = *(_OWORD *)v88;
    *(v87 - 1) = *((_OWORD *)v88 - 1);
    _OWORD *v87 = v90;
    v87 -= 2;
    v88 -= 32;
    v89 -= 8;
  }
  while (v89);
  if (v85 != (v85 & 0x7FFFFFFFFFFFFFF8)) {
    goto LABEL_41;
  }
LABEL_42:
  *a4 = v40;
  a4[1] = v32;
  a4[2] = v9;
  if (v33)
  {
LABEL_43:
    operator delete(v33);
    uint64_t v9 = a4[2];
  }
LABEL_44:
  a1 = v111;
LABEL_45:
  a4[1] = v32;
  uint64_t v44 = v6 % a3;
  uint64_t v45 = *a1;
  if (v32 < v9)
  {
    *(_DWORD *)uint64_t v32 = *(_DWORD *)(v45 + 4 * v44);
    uint64_t v46 = v32 + 4;
    goto LABEL_67;
  }
  uint64_t v47 = *a4;
  uint64_t v48 = v32 - *a4;
  uint64_t v49 = v48 >> 2;
  unint64_t v50 = (v48 >> 2) + 1;
  if (v50 >> 62) {
    goto LABEL_127;
  }
  uint64_t v51 = v9 - v47;
  if (v51 >> 1 > v50) {
    unint64_t v50 = v51 >> 1;
  }
  if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v52 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v52 = v50;
  }
  if (v52)
  {
    if (v52 >> 62) {
      goto LABEL_128;
    }
    uint64_t v53 = operator new(4 * v52);
  }
  else
  {
    uint64_t v53 = 0;
  }
  uint64_t v54 = &v53[4 * v49];
  uint64_t v9 = &v53[4 * v52];
  *(_DWORD *)uint64_t v54 = *(_DWORD *)(v45 + 4 * v44);
  uint64_t v46 = v54 + 4;
  if (v32 == v47)
  {
    int v6 = v110;
    *a4 = v54;
    a4[1] = v46;
    a4[2] = v9;
    if (!v47) {
      goto LABEL_66;
    }
    goto LABEL_65;
  }
  unint64_t v55 = v32 - v47 - 4;
  if (v55 < 0x2C || (unint64_t)(v32 - v53 - v48) < 0x20)
  {
    uint64_t v56 = v32;
    int v6 = v110;
    do
    {
LABEL_63:
      int v57 = *((_DWORD *)v56 - 1);
      v56 -= 4;
      *((_DWORD *)v54 - 1) = v57;
      v54 -= 4;
    }
    while (v56 != v47);
    goto LABEL_64;
  }
  uint64_t v91 = (v55 >> 2) + 1;
  uint64_t v92 = 4 * (v91 & 0x7FFFFFFFFFFFFFF8);
  uint64_t v56 = &v32[-v92];
  v54 -= v92;
  int v93 = &v53[4 * v49 - 16];
  uint64_t v94 = v32 - 16;
  uint64_t v95 = v91 & 0x7FFFFFFFFFFFFFF8;
  int v6 = v110;
  do
  {
    long long v96 = *(_OWORD *)v94;
    *(v93 - 1) = *((_OWORD *)v94 - 1);
    *int v93 = v96;
    v93 -= 2;
    v94 -= 32;
    v95 -= 8;
  }
  while (v95);
  if (v91 != (v91 & 0x7FFFFFFFFFFFFFF8)) {
    goto LABEL_63;
  }
LABEL_64:
  *a4 = v54;
  a4[1] = v46;
  a4[2] = v9;
  if (v47)
  {
LABEL_65:
    operator delete(v47);
    uint64_t v9 = a4[2];
  }
LABEL_66:
  a1 = v111;
LABEL_67:
  a4[1] = v46;
  uint64_t v58 = (v6 + 1) % a3;
  uint64_t v59 = *a1;
  if (v46 < v9)
  {
    *(_DWORD *)uint64_t v46 = *(_DWORD *)(v59 + 4 * v58);
    std::locale v60 = v46 + 4;
    goto LABEL_89;
  }
  uint64_t v61 = *a4;
  uint64_t v62 = v46 - *a4;
  uint64_t v63 = v62 >> 2;
  unint64_t v64 = (v62 >> 2) + 1;
  if (v64 >> 62) {
    goto LABEL_127;
  }
  uint64_t v65 = v9 - v61;
  if (v65 >> 1 > v64) {
    unint64_t v64 = v65 >> 1;
  }
  if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v66 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v66 = v64;
  }
  if (v66)
  {
    if (v66 >> 62) {
      goto LABEL_128;
    }
    uint64_t v67 = operator new(4 * v66);
  }
  else
  {
    uint64_t v67 = 0;
  }
  float32x4_t v68 = &v67[4 * v63];
  uint64_t v9 = &v67[4 * v66];
  *(_DWORD *)float32x4_t v68 = *(_DWORD *)(v59 + 4 * v58);
  std::locale v60 = v68 + 4;
  if (v46 == v61)
  {
    int v6 = v110;
    *a4 = v68;
    a4[1] = v60;
    a4[2] = v9;
    if (!v61) {
      goto LABEL_88;
    }
    goto LABEL_87;
  }
  unint64_t v69 = v46 - v61 - 4;
  if (v69 < 0x2C || (unint64_t)(v46 - v67 - v62) < 0x20)
  {
    float v70 = v46;
    int v6 = v110;
    do
    {
LABEL_85:
      int v71 = *((_DWORD *)v70 - 1);
      v70 -= 4;
      *((_DWORD *)v68 - 1) = v71;
      v68 -= 4;
    }
    while (v70 != v61);
    goto LABEL_86;
  }
  uint64_t v97 = (v69 >> 2) + 1;
  uint64_t v98 = 4 * (v97 & 0x7FFFFFFFFFFFFFF8);
  float v70 = &v46[-v98];
  v68 -= v98;
  float v99 = &v67[4 * v63 - 16];
  float32x4_t v100 = v46 - 16;
  uint64_t v101 = v97 & 0x7FFFFFFFFFFFFFF8;
  int v6 = v110;
  do
  {
    long long v102 = *(_OWORD *)v100;
    *(v99 - 1) = *((_OWORD *)v100 - 1);
    *float v99 = v102;
    v99 -= 2;
    v100 -= 32;
    v101 -= 8;
  }
  while (v101);
  if (v97 != (v97 & 0x7FFFFFFFFFFFFFF8)) {
    goto LABEL_85;
  }
LABEL_86:
  *a4 = v68;
  a4[1] = v60;
  a4[2] = v9;
  if (v61)
  {
LABEL_87:
    operator delete(v61);
    uint64_t v9 = a4[2];
  }
LABEL_88:
  a1 = v111;
LABEL_89:
  a4[1] = v60;
  uint64_t v72 = (v6 + 2) % a3;
  uint64_t v73 = *a1;
  if (v60 < v9)
  {
    *(_DWORD *)std::locale v60 = *(_DWORD *)(v73 + 4 * v72);
    uint64_t v74 = v60 + 4;
    goto LABEL_126;
  }
  uint64_t v75 = *a4;
  uint64_t v76 = v60 - *a4;
  uint64_t v77 = v76 >> 2;
  unint64_t v78 = (v76 >> 2) + 1;
  if (v78 >> 62) {
LABEL_127:
  }
    sub_19E13D694();
  uint64_t v79 = v9 - v75;
  if (v79 >> 1 > v78) {
    unint64_t v78 = v79 >> 1;
  }
  if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v80 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v80 = v78;
  }
  if (v80)
  {
    if (!(v80 >> 62))
    {
      uint64_t v81 = operator new(4 * v80);
      goto LABEL_103;
    }
LABEL_128:
    sub_19E13C418();
  }
  uint64_t v81 = 0;
LABEL_103:
  uint64_t v82 = &v81[4 * v77];
  *(_DWORD *)uint64_t v82 = *(_DWORD *)(v73 + 4 * v72);
  uint64_t v74 = v82 + 4;
  if (v60 == v75) {
    goto LABEL_124;
  }
  unint64_t v83 = v60 - v75 - 4;
  if (v83 < 0x2C)
  {
    uint64_t v84 = v60;
    goto LABEL_123;
  }
  if ((unint64_t)(v60 - v81 - v76) < 0x20)
  {
    uint64_t v84 = v60;
    do
    {
LABEL_123:
      int v109 = *((_DWORD *)v84 - 1);
      v84 -= 4;
      *((_DWORD *)v82 - 1) = v109;
      v82 -= 4;
    }
    while (v84 != v75);
    goto LABEL_124;
  }
  uint64_t v103 = (v83 >> 2) + 1;
  uint64_t v104 = 4 * (v103 & 0x7FFFFFFFFFFFFFF8);
  uint64_t v84 = &v60[-v104];
  v82 -= v104;
  int v105 = &v81[4 * v77 - 16];
  size_t v106 = v60 - 16;
  uint64_t v107 = v103 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    long long v108 = *(_OWORD *)v106;
    *(v105 - 1) = *((_OWORD *)v106 - 1);
    *int v105 = v108;
    v105 -= 2;
    v106 -= 32;
    v107 -= 8;
  }
  while (v107);
  if (v103 != (v103 & 0x7FFFFFFFFFFFFFF8)) {
    goto LABEL_123;
  }
LABEL_124:
  *a4 = v82;
  a4[1] = v74;
  a4[2] = &v81[4 * v80];
  if (v75) {
    operator delete(v75);
  }
LABEL_126:
  a4[1] = v74;
}

void sub_19E169078(int *a1, float *a2, char a3, char a4, int a5, int a6)
{
  int v6 = a1[8];
  double v7 = a2[2];
  int v8 = *((_DWORD *)a2 + 3);
  int v9 = *a1;
  int v11 = a1[4];
  int v12 = v6;
  uint64_t v10 = *(void *)a2;
  int32x2_t v13 = vrev64_s32(*(int32x2_t *)(a1 + 9));
  uint64_t v14 = v10;
  double v15 = v7;
  int v16 = v8;
  int v17 = v9;
  int v18 = a6;
  char v19 = 0;
  char v20 = a3;
  char v21 = a4;
  int v22 = a5;
  char v23 = 1;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  if ((a5 & 7) == 0) {
    operator new();
  }
  sub_19E2F6320(234);
}

void sub_19E169134(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E169148(uint64_t a1, int a2, _DWORD *a3, _DWORD *a4, int a5, int a6)
{
  switch(a2)
  {
    case 0:
      *a3 = 20;
      *a4 = a6;
      operator new();
    case 1:
      *a3 = a5;
      *a4 = a6;
      operator new();
    case 2:
      operator new();
    case 3:
      *a3 = 20;
      *a4 = a6;
      operator new();
    case 4:
      *a3 = a5;
      *a4 = a6;
      operator new();
    case 5:
      *a4 = a6;
      operator new();
    case 6:
      *a3 = a5;
      *a4 = a6;
      if (*(void *)(a1 + 208)) {
        operator new();
      }
      int v6 = 100;
      break;
    default:
      int v6 = 46;
      break;
  }
  sub_19E2F6320(v6);
}

void sub_19E1696E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  operator delete(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_19E169788(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 120) + 40) + 184))();
}

void sub_19E1697B4(uint64_t a1, int a2)
{
  if (*(unsigned char *)(a1 + 216)) {
    (*(void (**)(void))(**(void **)(*(void *)(a1 + 120) + 40) + 184))(*(void *)(*(void *)(a1 + 120) + 40));
  }
  if (*(unsigned char *)(a1 + 152))
  {
    int v4 = *(_DWORD *)(a1 + 184);
    if ((v4 & 0xFFFFFFFE) == 2)
    {
      if (v4 == 2)
      {
        if (a2 != 16)
        {
          if (a2 == 8)
          {
            if (*(char *)(a1 + 95) < 0)
            {
              sub_19E13C2D0(&v21, *(void **)(a1 + 72), *(void *)(a1 + 80));
            }
            else
            {
              long long v21 = *(_OWORD *)(a1 + 72);
              uint64_t v22 = *(void *)(a1 + 88);
            }
            sub_19E169C84();
          }
          if (*(char *)(a1 + 95) < 0)
          {
            sub_19E13C2D0(&v17, *(void **)(a1 + 72), *(void *)(a1 + 80));
          }
          else
          {
            long long v17 = *(_OWORD *)(a1 + 72);
            uint64_t v18 = *(void *)(a1 + 88);
          }
          sub_19E16A024();
        }
        if (*(char *)(a1 + 95) < 0)
        {
          sub_19E13C2D0(&v19, *(void **)(a1 + 72), *(void *)(a1 + 80));
        }
        else
        {
          long long v19 = *(_OWORD *)(a1 + 72);
          uint64_t v20 = *(void *)(a1 + 88);
        }
        sub_19E169E54();
      }
      if (a2 != 16)
      {
        if (a2 == 8)
        {
          if (*(char *)(a1 + 95) < 0)
          {
            sub_19E13C2D0(&v15, *(void **)(a1 + 72), *(void *)(a1 + 80));
          }
          else
          {
            long long v15 = *(_OWORD *)(a1 + 72);
            uint64_t v16 = *(void *)(a1 + 88);
          }
          sub_19E16A1F4();
        }
        if (*(char *)(a1 + 95) < 0)
        {
          sub_19E13C2D0(&v11, *(void **)(a1 + 72), *(void *)(a1 + 80));
        }
        else
        {
          long long v11 = *(_OWORD *)(a1 + 72);
          uint64_t v12 = *(void *)(a1 + 88);
        }
        sub_19E16A594();
      }
      if (*(char *)(a1 + 95) < 0)
      {
        sub_19E13C2D0(&v13, *(void **)(a1 + 72), *(void *)(a1 + 80));
      }
      else
      {
        long long v13 = *(_OWORD *)(a1 + 72);
        uint64_t v14 = *(void *)(a1 + 88);
      }
      sub_19E16A3C4();
    }
    sub_19E2F6320(19);
  }
  if (a2 != 16)
  {
    if (a2 == 8)
    {
      if (*(char *)(a1 + 95) < 0)
      {
        sub_19E13C2D0(&__dst, *(void **)(a1 + 72), *(void *)(a1 + 80));
      }
      else
      {
        long long __dst = *(_OWORD *)(a1 + 72);
        uint64_t v10 = *(void *)(a1 + 88);
      }
      sub_19E16A764();
    }
    if (*(char *)(a1 + 95) < 0)
    {
      sub_19E13C2D0(&v5, *(void **)(a1 + 72), *(void *)(a1 + 80));
    }
    else
    {
      long long v5 = *(_OWORD *)(a1 + 72);
      uint64_t v6 = *(void *)(a1 + 88);
    }
    sub_19E16AE6C();
  }
  if (*(char *)(a1 + 95) < 0)
  {
    sub_19E13C2D0(&v7, *(void **)(a1 + 72), *(void *)(a1 + 80));
  }
  else
  {
    long long v7 = *(_OWORD *)(a1 + 72);
    uint64_t v8 = *(void *)(a1 + 88);
  }
  sub_19E16AAE8();
}

void sub_19E169BC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,char a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (a35 < 0) {
    operator delete(a30);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E169C84()
{
}

void sub_19E169DF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      operator delete(v20);
      _Unwind_Resume(a1);
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  operator delete(v20);
  _Unwind_Resume(a1);
}

void sub_19E169E40(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E169E54()
{
}

void sub_19E169FC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      operator delete(v20);
      _Unwind_Resume(a1);
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  operator delete(v20);
  _Unwind_Resume(a1);
}

void sub_19E16A010(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E16A024()
{
}

void sub_19E16A194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      operator delete(v20);
      _Unwind_Resume(a1);
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  operator delete(v20);
  _Unwind_Resume(a1);
}

void sub_19E16A1E0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E16A1F4()
{
}

void sub_19E16A364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      operator delete(v20);
      _Unwind_Resume(a1);
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  operator delete(v20);
  _Unwind_Resume(a1);
}

void sub_19E16A3B0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E16A3C4()
{
}

void sub_19E16A534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      operator delete(v20);
      _Unwind_Resume(a1);
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  operator delete(v20);
  _Unwind_Resume(a1);
}

void sub_19E16A580(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E16A594()
{
}

void sub_19E16A704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      operator delete(v20);
      _Unwind_Resume(a1);
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  operator delete(v20);
  _Unwind_Resume(a1);
}

void sub_19E16A750(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E16A764()
{
}

void sub_19E16AA88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      operator delete(v20);
      _Unwind_Resume(a1);
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  operator delete(v20);
  _Unwind_Resume(a1);
}

void sub_19E16AAD4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E16AAE8()
{
}

void sub_19E16AE0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      operator delete(v20);
      _Unwind_Resume(a1);
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  operator delete(v20);
  _Unwind_Resume(a1);
}

void sub_19E16AE58(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E16AE6C()
{
}

void sub_19E16B190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      operator delete(v20);
      _Unwind_Resume(a1);
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  operator delete(v20);
  _Unwind_Resume(a1);
}

void sub_19E16B1DC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E16B1F0(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (*(unsigned char *)(a1 + 216)) {
    (*(void (**)(void))(**(void **)(*(void *)(a1 + 120) + 40) + 184))(*(void *)(*(void *)(a1 + 120) + 40));
  }
  if (*(unsigned char *)(a1 + 152))
  {
    int v6 = *(_DWORD *)(a1 + 184);
    if ((v6 & 0xFFFFFFFE) == 2)
    {
      if (v6 == 2)
      {
        if (a4 != 16)
        {
          if (a4 == 8) {
            operator new();
          }
          operator new();
        }
        operator new();
      }
      if (a4 != 16)
      {
        if (a4 == 8) {
          operator new();
        }
        operator new();
      }
      operator new();
    }
    sub_19E2F6320(19);
  }
  if (a4 != 16)
  {
    if (a4 == 8)
    {
      sub_19E16B848();
    }
    sub_19E16BDC0();
  }

  sub_19E16BB04();
}

void sub_19E16B7D0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E16B7E4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E16B7F8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E16B80C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E16B820(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E16B834(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E16B848()
{
}

void sub_19E16BAF0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E16BB04()
{
}

void sub_19E16BDAC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E16BDC0()
{
}

void sub_19E16C068(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E16C07C(uint64_t a1, FILE *__stream, int *a3, unsigned int *a4)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  long long v5 = (int *)(a1 + 16);
  sub_19E165C28(__stream, (int)__stream, (int *)(a1 + 20), *(_DWORD **)(a1 + 24), (void *)(a1 + 32), (void *)(a1 + 40), (void *)(a1 + 36), (_DWORD *)a1, (_DWORD *)(a1 + 16), a3, a4, (_DWORD *)(a1 + 184));
  if ((atomic_load_explicit((atomic_uchar *volatile)dword_1E9458910, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire((__guard *)dword_1E9458910))
  {
    int v14 = 52;
    v13[0] = xmmword_19E351450;
    v13[1] = unk_19E351460;
    sub_19E16C3A8((uint64_t)&qword_1E94589C0, (int *)v13, 9);
    __cxa_atexit((void (*)(void *))sub_19E16C438, &qword_1E94589C0, &dword_19E138000);
    __cxa_guard_release((__guard *)dword_1E9458910);
  }
  if (qword_1E94589C8)
  {
    unint64_t v6 = *v5;
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1E94589C8);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v8 = *v5;
      if (qword_1E94589C8 <= v6) {
        unint64_t v8 = v6 % qword_1E94589C8;
      }
    }
    else
    {
      unint64_t v8 = (qword_1E94589C8 - 1) & v6;
    }
    int v9 = *(uint64_t **)(qword_1E94589C0 + 8 * v8);
    if (v9)
    {
      int v9 = (uint64_t *)*v9;
      if (v9)
      {
        if (v7.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v11 = v9[1];
            if (v11 == v6)
            {
              if (*((_DWORD *)v9 + 4) == v6) {
                goto LABEL_23;
              }
            }
            else if ((v11 & (qword_1E94589C8 - 1)) != v8)
            {
              goto LABEL_22;
            }
            int v9 = (uint64_t *)*v9;
            if (!v9) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v10 = v9[1];
          if (v10 == v6)
          {
            if (*((_DWORD *)v9 + 4) == v6) {
              break;
            }
          }
          else
          {
            if (v10 >= qword_1E94589C8) {
              v10 %= (unint64_t)qword_1E94589C8;
            }
            if (v10 != v8) {
              goto LABEL_22;
            }
          }
          int v9 = (uint64_t *)*v9;
        }
        while (v9);
      }
    }
  }
  else
  {
LABEL_22:
    int v9 = 0;
  }
LABEL_23:
  *(unsigned char *)(a1 + 216) = v9 != 0;
  int v12 = *(_DWORD *)(a1 + 184);
  *(unsigned char *)(a1 + 152) = v12 != 1;
  *(void *)(a1 + 144) = 0;
  if (v12 == 3) {
    operator new();
  }
  if (v12 == 2) {
    operator new();
  }
}

void sub_19E16C38C(_Unwind_Exception *a1)
{
}

uint64_t sub_19E16C3A8(uint64_t a1, int *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 4 * a3;
    do
    {
      sub_19E2354DC(a1, a2, a2);
      ++a2;
      v5 -= 4;
    }
    while (v5);
  }
  return a1;
}

void sub_19E16C40C(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void **)(v1 + 16);
  if (v3)
  {
    do
    {
      int v4 = (void *)*v3;
      operator delete(v3);
      uint64_t v3 = v4;
    }
    while (v4);
  }
  sub_19E32EBBC((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19E16C438(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  int v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

size_t sub_19E16C484(FILE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v8 = (uint64_t **)(a2 + 8);
  sub_19E13C56C(a2, *(void **)(a2 + 8));
  *(void *)a2 = v8;
  *(void *)(a2 + 16) = 0;
  *unint64_t v8 = 0;
  int v9 = (uint64_t **)(a3 + 8);
  sub_19E13C56C(a3, *(void **)(a3 + 8));
  *(void *)a3 = a3 + 8;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 8) = 0;
  int __ptr = -1;
  __streauint64_t m = a1;
  sub_19E2F6698(a1, (int)"SentenceRecognizer", &__ptr);
  if (__ptr >= 1)
  {
    for (int i = 0; i < __ptr; ++i)
    {
      HIDWORD(v54) = 0;
      int v55 = 0;
      sub_19E2F6698(__stream, (int)"SentenceRecognizer", &v55);
      sub_19E2F6698(__stream, (int)"SentenceRecognizer", (char *)&v54 + 4);
      int v11 = HIDWORD(v54);
      int v12 = v55;
      long long v13 = *v8;
      int v14 = v8;
      uint64_t v15 = v8;
      if (*v8)
      {
        while (1)
        {
          while (1)
          {
            uint64_t v15 = (uint64_t **)v13;
            int v16 = *((_DWORD *)v13 + 7);
            if (v55 >= v16) {
              break;
            }
            long long v13 = *v15;
            int v14 = v15;
            if (!*v15) {
              goto LABEL_12;
            }
          }
          if (v16 >= v55) {
            break;
          }
          long long v13 = v15[1];
          if (!v13)
          {
            int v14 = v15 + 1;
            goto LABEL_12;
          }
        }
        int v21 = HIDWORD(v54);
        *((_DWORD *)v15 + 8) = HIDWORD(v54);
        uint64_t v22 = *v9;
        char v23 = (uint64_t **)(a3 + 8);
        uint64_t v24 = (uint64_t **)(a3 + 8);
        if (*v9) {
          goto LABEL_19;
        }
      }
      else
      {
LABEL_12:
        long long v17 = v15;
        uint64_t v18 = operator new(0x28uLL);
        v18[7] = v12;
        v18[8] = 0;
        *(void *)uint64_t v18 = 0;
        *((void *)v18 + 1) = 0;
        *((void *)v18 + 2) = v17;
        *int v14 = (uint64_t *)v18;
        uint64_t v19 = **(void **)a2;
        uint64_t v20 = (uint64_t *)v18;
        if (v19)
        {
          *(void *)a2 = v19;
          uint64_t v20 = *v14;
        }
        sub_19E13C8A0(*(uint64_t **)(a2 + 8), v20);
        ++*(void *)(a2 + 16);
        int v21 = HIDWORD(v54);
        int v12 = v55;
        v18[8] = v11;
        uint64_t v22 = *v9;
        char v23 = (uint64_t **)(a3 + 8);
        uint64_t v24 = (uint64_t **)(a3 + 8);
        if (*v9)
        {
          while (1)
          {
LABEL_19:
            while (1)
            {
              uint64_t v24 = (uint64_t **)v22;
              int v25 = *((_DWORD *)v22 + 7);
              if (v21 >= v25) {
                break;
              }
              uint64_t v22 = *v24;
              char v23 = v24;
              if (!*v24) {
                goto LABEL_23;
              }
            }
            if (v25 >= v21) {
              goto LABEL_4;
            }
            uint64_t v22 = v24[1];
            if (!v22)
            {
              char v23 = v24 + 1;
              break;
            }
          }
        }
      }
LABEL_23:
      unint64_t v26 = (uint64_t *)v24;
      uint64_t v24 = (uint64_t **)operator new(0x28uLL);
      *((_DWORD *)v24 + 7) = v21;
      *((_DWORD *)v24 + 8) = 0;
      *uint64_t v24 = 0;
      v24[1] = 0;
      v24[2] = v26;
      *char v23 = (uint64_t *)v24;
      uint64_t v27 = **(void **)a3;
      long long v28 = (uint64_t *)v24;
      if (v27)
      {
        *(void *)a3 = v27;
        long long v28 = *v23;
      }
      sub_19E13C8A0(*(uint64_t **)(a3 + 8), v28);
      ++*(void *)(a3 + 16);
LABEL_4:
      *((_DWORD *)v24 + 8) = v12;
    }
  }
  int v29 = (uint64_t *)(a4 + 8);
  sub_19E13C56C(a4, *(void **)(a4 + 8));
  *(void *)a4 = a4 + 8;
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 8) = 0;
  uint64_t v30 = (uint64_t **)(a5 + 8);
  sub_19E13C56C(a5, *(void **)(a5 + 8));
  *(void *)a5 = a5 + 8;
  *(void *)(a5 + 16) = 0;
  *(void *)(a5 + 8) = 0;
  int v55 = -1;
  size_t result = sub_19E2F6698(__stream, (int)"SentenceRecognizer", &v55);
  if (v55 >= 1)
  {
    for (int j = 0; j < v55; ++j)
    {
      uint64_t v54 = 0;
      sub_19E2F6698(__stream, (int)"SentenceRecognizer", (char *)&v54 + 4);
      size_t result = sub_19E2F6698(__stream, (int)"SentenceRecognizer", &v54);
      int v33 = v54;
      int v34 = HIDWORD(v54);
      uint64_t v35 = *v29;
      unint64_t v36 = (uint64_t **)(a4 + 8);
      uint64_t v37 = a4 + 8;
      if (*v29)
      {
        while (1)
        {
          while (1)
          {
            uint64_t v37 = v35;
            int v38 = *(_DWORD *)(v35 + 28);
            if (SHIDWORD(v54) >= v38) {
              break;
            }
            uint64_t v35 = *(void *)v37;
            unint64_t v36 = (uint64_t **)v37;
            if (!*(void *)v37) {
              goto LABEL_36;
            }
          }
          if (v38 >= SHIDWORD(v54)) {
            break;
          }
          uint64_t v35 = *(void *)(v37 + 8);
          if (!v35)
          {
            unint64_t v36 = (uint64_t **)(v37 + 8);
            goto LABEL_36;
          }
        }
        int v43 = v54;
        *(_DWORD *)(v37 + 32) = v54;
        uint64_t v44 = *v30;
        uint64_t v45 = (uint64_t **)(a5 + 8);
        uint64_t v46 = (uint64_t **)(a5 + 8);
        if (*v30) {
          goto LABEL_43;
        }
      }
      else
      {
LABEL_36:
        uint64_t v39 = v37;
        uint64_t v40 = operator new(0x28uLL);
        v40[7] = v34;
        v40[8] = 0;
        *(void *)uint64_t v40 = 0;
        *((void *)v40 + 1) = 0;
        *((void *)v40 + 2) = v39;
        int8x16_t *v36 = (uint64_t *)v40;
        uint64_t v41 = **(void **)a4;
        uint64_t v42 = (uint64_t *)v40;
        if (v41)
        {
          *(void *)a4 = v41;
          uint64_t v42 = *v36;
        }
        size_t result = (size_t)sub_19E13C8A0(*(uint64_t **)(a4 + 8), v42);
        ++*(void *)(a4 + 16);
        int v43 = v54;
        int v34 = HIDWORD(v54);
        v40[8] = v33;
        uint64_t v44 = *v30;
        uint64_t v45 = (uint64_t **)(a5 + 8);
        uint64_t v46 = (uint64_t **)(a5 + 8);
        if (*v30)
        {
          while (1)
          {
LABEL_43:
            while (1)
            {
              uint64_t v46 = (uint64_t **)v44;
              int v47 = *((_DWORD *)v44 + 7);
              if (v43 >= v47) {
                break;
              }
              uint64_t v44 = *v46;
              uint64_t v45 = v46;
              if (!*v46) {
                goto LABEL_47;
              }
            }
            if (v47 >= v43) {
              goto LABEL_28;
            }
            uint64_t v44 = v46[1];
            if (!v44)
            {
              uint64_t v45 = v46 + 1;
              break;
            }
          }
        }
      }
LABEL_47:
      uint64_t v48 = (uint64_t *)v46;
      uint64_t v46 = (uint64_t **)operator new(0x28uLL);
      *((_DWORD *)v46 + 7) = v43;
      *((_DWORD *)v46 + 8) = 0;
      *uint64_t v46 = 0;
      v46[1] = 0;
      v46[2] = v48;
      *uint64_t v45 = (uint64_t *)v46;
      uint64_t v49 = **(void **)a5;
      unint64_t v50 = (uint64_t *)v46;
      if (v49)
      {
        *(void *)a5 = v49;
        unint64_t v50 = *v45;
      }
      size_t result = (size_t)sub_19E13C8A0(*(uint64_t **)(a5 + 8), v50);
      ++*(void *)(a5 + 16);
LABEL_28:
      *((_DWORD *)v46 + 8) = v34;
    }
  }
  return result;
}

size_t sub_19E16C8D8(FILE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v9 = (void *)(a2 + 8);
  sub_19E15A064(a2, *(char **)(a2 + 8));
  *(void *)a2 = v9;
  unint64_t v10 = (uint64_t **)a2;
  *(void *)(a2 + 16) = 0;
  *int v9 = 0;
  int v11 = (uint64_t **)(a3 + 8);
  sub_19E230B84(a3, *(char **)(a3 + 8));
  *(void *)a3 = a3 + 8;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 8) = 0;
  int __ptr = -1;
  sub_19E2F6698(a1, (int)"SentenceRecognizer", &__ptr);
  if (__ptr >= 1)
  {
    for (int i = 0; i < __ptr; ++i)
    {
      memset(&__str, 0, sizeof(__str));
      int v45 = 0;
      sub_19E2F66AC(a1, (uint64_t)"SentenceRecognizer", (uint64_t)&__str);
      sub_19E2F6698(a1, (int)"SentenceRecognizer", &v45);
      int v13 = v45;
      p_str = &__str;
      *((_DWORD *)sub_19E23466C(v10, (const void **)&__str.__r_.__value_.__l.__data_, (uint64_t)&unk_19E351150, (long long **)&p_str)+ 14) = v13;
      int v14 = *v11;
      int v15 = v45;
      int v16 = (uint64_t **)(a3 + 8);
      long long v17 = (uint64_t **)(a3 + 8);
      if (*v11)
      {
        while (1)
        {
          while (1)
          {
            long long v17 = (uint64_t **)v14;
            int v18 = *((_DWORD *)v14 + 8);
            if (v45 >= v18) {
              break;
            }
            int v14 = *v17;
            int v16 = v17;
            if (!*v17) {
              goto LABEL_11;
            }
          }
          if (v18 >= v45) {
            break;
          }
          int v14 = v17[1];
          if (!v14)
          {
            int v16 = v17 + 1;
            goto LABEL_11;
          }
        }
        uint64_t v19 = (char *)v17;
      }
      else
      {
LABEL_11:
        uint64_t v19 = (char *)operator new(0x40uLL);
        *((_DWORD *)v19 + 8) = v15;
        *((void *)v19 + 6) = 0;
        *((void *)v19 + 7) = 0;
        *((void *)v19 + 5) = 0;
        *(void *)uint64_t v19 = 0;
        *((void *)v19 + 1) = 0;
        *((void *)v19 + 2) = v17;
        *int v16 = (uint64_t *)v19;
        uint64_t v20 = **(void **)a3;
        int v21 = (uint64_t *)v19;
        if (v20)
        {
          *(void *)a3 = v20;
          int v21 = *v16;
        }
        sub_19E13C8A0(*(uint64_t **)(a3 + 8), v21);
        ++*(void *)(a3 + 16);
      }
      std::string::operator=((std::string *)(v19 + 40), &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
    }
  }
  uint64_t v22 = (uint64_t *)(a4 + 8);
  sub_19E13C56C(a4, *(void **)(a4 + 8));
  *(void *)a4 = a4 + 8;
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 8) = 0;
  char v23 = (uint64_t **)(a5 + 8);
  sub_19E13C56C(a5, *(void **)(a5 + 8));
  *(void *)a5 = a5 + 8;
  *(void *)(a5 + 16) = 0;
  *(void *)(a5 + 8) = 0;
  LODWORD(__str.__r_.__value_.__l.__data_) = -1;
  size_t result = sub_19E2F6698(a1, (int)"SentenceRecognizer", &__str);
  if (SLODWORD(__str.__r_.__value_.__l.__data_) >= 1)
  {
    for (int j = 0; j < SLODWORD(__str.__r_.__value_.__l.__data_); ++j)
    {
      LODWORD(p_str) = 0;
      int v45 = 0;
      sub_19E2F6698(a1, (int)"SentenceRecognizer", &p_str);
      size_t result = sub_19E2F6698(a1, (int)"SentenceRecognizer", &v45);
      int v26 = v45;
      uint64_t v27 = *v22;
      long long v28 = (uint64_t **)(a4 + 8);
      uint64_t v29 = a4 + 8;
      int v30 = (int)p_str;
      if (*v22)
      {
        while (1)
        {
          while (1)
          {
            uint64_t v29 = v27;
            int v31 = *(_DWORD *)(v27 + 28);
            if ((int)p_str >= v31) {
              break;
            }
            uint64_t v27 = *(void *)v29;
            long long v28 = (uint64_t **)v29;
            if (!*(void *)v29) {
              goto LABEL_28;
            }
          }
          if (v31 >= (int)p_str) {
            break;
          }
          uint64_t v27 = *(void *)(v29 + 8);
          if (!v27)
          {
            long long v28 = (uint64_t **)(v29 + 8);
            goto LABEL_28;
          }
        }
        int v36 = v45;
        *(_DWORD *)(v29 + 32) = v45;
        uint64_t v37 = *v23;
        int v38 = (uint64_t **)(a5 + 8);
        uint64_t v39 = (uint64_t **)(a5 + 8);
        if (*v23) {
          goto LABEL_35;
        }
      }
      else
      {
LABEL_28:
        uint64_t v32 = v29;
        int v33 = operator new(0x28uLL);
        v33[7] = v30;
        v33[8] = 0;
        *(void *)int v33 = 0;
        *((void *)v33 + 1) = 0;
        *((void *)v33 + 2) = v32;
        uint64_t *v28 = (uint64_t *)v33;
        uint64_t v34 = **(void **)a4;
        uint64_t v35 = (uint64_t *)v33;
        if (v34)
        {
          *(void *)a4 = v34;
          uint64_t v35 = *v28;
        }
        size_t result = (size_t)sub_19E13C8A0(*(uint64_t **)(a4 + 8), v35);
        ++*(void *)(a4 + 16);
        int v30 = (int)p_str;
        int v36 = v45;
        v33[8] = v26;
        uint64_t v37 = *v23;
        int v38 = (uint64_t **)(a5 + 8);
        uint64_t v39 = (uint64_t **)(a5 + 8);
        if (*v23)
        {
          while (1)
          {
LABEL_35:
            while (1)
            {
              uint64_t v39 = (uint64_t **)v37;
              int v40 = *((_DWORD *)v37 + 7);
              if (v36 >= v40) {
                break;
              }
              uint64_t v37 = *v39;
              int v38 = v39;
              if (!*v39) {
                goto LABEL_39;
              }
            }
            if (v40 >= v36) {
              goto LABEL_20;
            }
            uint64_t v37 = v39[1];
            if (!v37)
            {
              int v38 = v39 + 1;
              break;
            }
          }
        }
      }
LABEL_39:
      uint64_t v41 = (uint64_t *)v39;
      uint64_t v39 = (uint64_t **)operator new(0x28uLL);
      *((_DWORD *)v39 + 7) = v36;
      *((_DWORD *)v39 + 8) = 0;
      *uint64_t v39 = 0;
      v39[1] = 0;
      v39[2] = v41;
      *int v38 = (uint64_t *)v39;
      uint64_t v42 = **(void **)a5;
      int v43 = (uint64_t *)v39;
      if (v42)
      {
        *(void *)a5 = v42;
        int v43 = *v38;
      }
      size_t result = (size_t)sub_19E13C8A0(*(uint64_t **)(a5 + 8), v43);
      ++*(void *)(a5 + 16);
LABEL_20:
      *((_DWORD *)v39 + 8) = v30;
    }
  }
  return result;
}

void sub_19E16CCD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E16CCF0(uint64_t a1, int *a2)
{
  int v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8));
  int v5 = *a2;
  if (v4 != 1)
  {
    if ((v5 & 0x80000000) == 0) {
      return;
    }
LABEL_6:
    int v7 = *(_DWORD *)(a1 + 184);
    if (v7 != 3)
    {
      if (v7 == 1)
      {
        int v8 = 3;
LABEL_20:
        *a2 = v8;
        return;
      }
LABEL_19:
      int v8 = 1;
      goto LABEL_20;
    }
    int v9 = *(const void ****)(a1 + 144);
    if (!v9) {
      goto LABEL_19;
    }
    v44[0] = 0;
    v44[1] = 0;
    int v43 = v44;
    int v12 = *v9;
    unint64_t v10 = v9 + 1;
    int v11 = v12;
    if (v12 == (const void **)v10)
    {
      int v13 = 0;
    }
    else
    {
      do
      {
        sub_19E235800(&v43, v44, v11 + 4, (uint64_t)(v11 + 4));
        int v14 = (const void **)v11[1];
        if (v14)
        {
          do
          {
            int v15 = (const void ***)v14;
            int v14 = (const void **)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            int v15 = (const void ***)v11[2];
            BOOL v31 = *v15 == v11;
            int v11 = (const void **)v15;
          }
          while (!v31);
        }
        int v11 = (const void **)v15;
      }
      while (v15 != v10);
      int v13 = (char *)v44[0];
      char v42 = 3;
      v41[0] = 4935253;
      if (v44[0])
      {
        int v16 = v44;
        uint64_t v17 = v44[0];
        do
        {
          int v18 = (uint64_t *)v17;
          uint64_t v19 = v16;
          int v21 = (const void *)(v17 + 32);
          uint64_t v20 = *(const void **)(v17 + 32);
          unint64_t v22 = *(unsigned __int8 *)(v17 + 55);
          int v23 = (char)v22;
          if ((v22 & 0x80u) != 0) {
            unint64_t v22 = v18[5];
          }
          if (v23 >= 0) {
            uint64_t v24 = v21;
          }
          else {
            uint64_t v24 = v20;
          }
          if (v22 >= 3) {
            size_t v25 = 3;
          }
          else {
            size_t v25 = v22;
          }
          BOOL v26 = v22 < 3;
          int v27 = memcmp(v24, v41, v25);
          BOOL v28 = v27 < 0;
          if (!v27) {
            BOOL v28 = v26;
          }
          uint64_t v29 = v18 + 1;
          if (v28)
          {
            int v16 = v19;
          }
          else
          {
            uint64_t v29 = v18;
            int v16 = v18;
          }
          uint64_t v17 = *v29;
        }
        while (v17);
        if (v16 != v44)
        {
          int v30 = v19 + 4;
          BOOL v31 = !v28;
          if (v28) {
            uint64_t v32 = v19;
          }
          else {
            uint64_t v32 = v18;
          }
          if (v31) {
            int v30 = v21;
          }
          uint64_t v34 = (const void *)v32[4];
          unint64_t v33 = v32[5];
          if (*((char *)v16 + 55) < 0)
          {
            uint64_t v35 = v34;
          }
          else
          {
            unint64_t v33 = *((unsigned __int8 *)v16 + 55);
            uint64_t v35 = v30;
          }
          size_t v36 = v33 >= 3 ? 3 : v33;
          BOOL v37 = v33 > 3;
          int v38 = memcmp(v41, v35, v36);
          BOOL v39 = v38 < 0;
          if (!v38) {
            BOOL v39 = v37;
          }
          if (!v39)
          {
            int v40 = *((_DWORD *)v16 + 14);
            goto LABEL_55;
          }
        }
      }
    }
    int v40 = 1;
LABEL_55:
    *a2 = v40;
    sub_19E15A064((uint64_t)&v43, v13);
    return;
  }
  uint64_t v6 = **(void **)(*(void *)(a1 + 120) + 104);
  if (v5 >= (*(int (**)(uint64_t))(*(void *)v6 + 264))(v6) || *a2 < 0) {
    goto LABEL_6;
  }
}

void sub_19E16CF64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
}

void sub_19E16CF7C(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4, int a5, const void *a6, uint64_t a7)
{
  (***(void (****)(void))(a1 + 8))(*(void *)(a1 + 8));
  uint64_t v98 = *(uint64_t ***)(a1 + 128);
  if (dword_1E9457D98 >= (int)((unint64_t)(a2[1] - *a2) >> 2)) {
    int v9 = (unint64_t)(a2[1] - *a2) >> 2;
  }
  else {
    int v9 = dword_1E9457D98;
  }
  uint64_t v96 = v9;
  sub_19E16DA18(&v104, v9);
  if (v9 >= 1)
  {
    uint64_t v10 = 0;
    do
    {
      sub_19E16CCF0(a1, (int *)(*a2 + v10));
      v10 += 4;
    }
    while (4 * v96 != v10);
    uint64_t v11 = 0;
    while (1)
    {
      uint64_t v13 = **v98;
      uint64_t v14 = **(void **)(*(void *)(a1 + 120) + 104);
      int v15 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 264))(v14);
      bzero(*(void **)(v13 + 8 * v11), 4 * v15 * a5);
      (*(void (**)(void, void, uint64_t))(**(void **)(a1 + 8) + 8))(*(void *)(a1 + 8), *(unsigned int *)(*a2 + 4 * v11), **v98 + 8 * v11);
      if ((*(unsigned int (**)(void))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8)) == 5)
      {
        std::string __p = 0;
        long long v102 = 0;
        uint64_t v103 = 0;
        sub_19E168998(a2, v11, v96, (char **)&__p);
        int v16 = __dynamic_cast(*(const void **)(a1 + 8), (const struct __class_type_info *)&unk_1EF0A3E58, (const struct __class_type_info *)&unk_1EF0A3BD8, 0);
        if (!v16) {
          __cxa_bad_cast();
        }
        (*(void (**)(void *, void **, uint64_t))(*(void *)v16 + 56))(v16, &__p, **v98 + 8 * v11);
        if (__p)
        {
          long long v102 = __p;
          operator delete(__p);
        }
      }
      else if ((*(unsigned int (**)(void))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8)) == 6)
      {
        if (!a6) {
          sub_19E2F6320(7345);
        }
        if (v11)
        {
          uint64_t v17 = *(void **)(**v98 + 8 * v11);
          uint64_t v18 = **(void **)(*(void *)(a1 + 120) + 104);
          int v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 264))(v18);
          memcpy(v17, a6, 4 * v19 * a5);
        }
      }
      else
      {
        (*(void (**)(void, void, uint64_t))(**(void **)(a1 + 8) + 8))(*(void *)(a1 + 8), *(unsigned int *)(*a2 + 4 * v11), **v98 + 8 * v11);
      }
      if ((*(unsigned int (**)(void))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8)) == 1) {
        break;
      }
LABEL_43:
      if ((*(unsigned int (**)(void))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8)) != 4) {
        goto LABEL_10;
      }
      char v42 = &v104[24 * v11];
      uint64_t v43 = *a2;
      int v45 = (char *)*((void *)v42 + 1);
      unint64_t v44 = *((void *)v42 + 2);
      if ((unint64_t)v45 >= v44)
      {
        uint64_t v46 = *(char **)v42;
        uint64_t v47 = (uint64_t)&v45[-*(void *)v42];
        uint64_t v48 = v47 >> 2;
        unint64_t v49 = (v47 >> 2) + 1;
        if (v49 >> 62) {
LABEL_99:
        }
          sub_19E13D694();
        uint64_t v50 = v44 - (void)v46;
        if (v50 >> 1 > v49) {
          unint64_t v49 = v50 >> 1;
        }
        if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v51 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v51 = v49;
        }
        if (v51)
        {
          if (v51 >> 62) {
LABEL_100:
          }
            sub_19E13C418();
          unint64_t v52 = operator new(4 * v51);
          uint64_t v53 = &v52[4 * v48];
          *uint64_t v53 = *(_DWORD *)(v43 + 4 * v11);
          uint64_t v12 = (uint64_t)(v53 + 1);
          if (v45 == v46) {
            goto LABEL_62;
          }
LABEL_56:
          unint64_t v54 = v45 - 4 - v46;
          if (v54 < 0x2C) {
            goto LABEL_110;
          }
          if ((unint64_t)(v45 - &v52[v47]) < 0x20) {
            goto LABEL_110;
          }
          uint64_t v55 = (v54 >> 2) + 1;
          uint64_t v56 = 4 * (v55 & 0x7FFFFFFFFFFFFFF8);
          int v57 = &v45[-v56];
          uint64_t v53 = (_DWORD *)((char *)v53 - v56);
          uint64_t v58 = &v52[4 * v48 - 16];
          uint64_t v59 = v45 - 16;
          uint64_t v60 = v55 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v61 = *(_OWORD *)v59;
            *(v58 - 1) = *((_OWORD *)v59 - 1);
            *uint64_t v58 = v61;
            v58 -= 2;
            v59 -= 32;
            v60 -= 8;
          }
          while (v60);
          int v45 = v57;
          if (v55 != (v55 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_110:
            do
            {
              int v62 = *((_DWORD *)v45 - 1);
              v45 -= 4;
              *--uint64_t v53 = v62;
            }
            while (v45 != v46);
          }
        }
        else
        {
          unint64_t v52 = 0;
          uint64_t v53 = (_DWORD *)(4 * v48);
          *(_DWORD *)(4 * v48) = *(_DWORD *)(v43 + 4 * v11);
          uint64_t v12 = 4 * v48 + 4;
          if (v45 != v46) {
            goto LABEL_56;
          }
        }
LABEL_62:
        *(void *)char v42 = v53;
        *((void *)v42 + 1) = v12;
        *((void *)v42 + 2) = &v52[4 * v51];
        if (v46) {
          operator delete(v46);
        }
        goto LABEL_9;
      }
      *(_DWORD *)int v45 = *(_DWORD *)(v43 + 4 * v11);
      uint64_t v12 = (uint64_t)(v45 + 4);
LABEL_9:
      *((void *)v42 + 1) = v12;
LABEL_10:
      if (++v11 == v96) {
        goto LABEL_64;
      }
    }
    uint64_t v20 = &v104[24 * v11];
    uint64_t v21 = *a2;
    int v23 = (char *)*((void *)v20 + 1);
    unint64_t v22 = *((void *)v20 + 2);
    if ((unint64_t)v23 < v22)
    {
      *(_DWORD *)int v23 = *(_DWORD *)(v21 + 4 * v11);
      uint64_t v24 = (uint64_t)(v23 + 4);
LABEL_42:
      *((void *)v20 + 1) = v24;
      goto LABEL_43;
    }
    size_t v25 = *(char **)v20;
    uint64_t v26 = (uint64_t)&v23[-*(void *)v20];
    uint64_t v27 = v26 >> 2;
    unint64_t v28 = (v26 >> 2) + 1;
    if (v28 >> 62) {
      goto LABEL_99;
    }
    uint64_t v29 = v22 - (void)v25;
    if (v29 >> 1 > v28) {
      unint64_t v28 = v29 >> 1;
    }
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v30 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v30 = v28;
    }
    if (v30)
    {
      if (v30 >> 62) {
        goto LABEL_100;
      }
      BOOL v31 = operator new(4 * v30);
      uint64_t v32 = &v31[4 * v27];
      _DWORD *v32 = *(_DWORD *)(v21 + 4 * v11);
      uint64_t v24 = (uint64_t)(v32 + 1);
      if (v23 == v25) {
        goto LABEL_40;
      }
    }
    else
    {
      BOOL v31 = 0;
      uint64_t v32 = (_DWORD *)(4 * v27);
      *(_DWORD *)(4 * v27) = *(_DWORD *)(v21 + 4 * v11);
      uint64_t v24 = 4 * v27 + 4;
      if (v23 == v25)
      {
LABEL_40:
        *(void *)uint64_t v20 = v32;
        *((void *)v20 + 1) = v24;
        *((void *)v20 + 2) = &v31[4 * v30];
        if (v25) {
          operator delete(v25);
        }
        goto LABEL_42;
      }
    }
    unint64_t v33 = v23 - 4 - v25;
    if (v33 < 0x2C) {
      goto LABEL_111;
    }
    if ((unint64_t)(v23 - &v31[v26]) < 0x20) {
      goto LABEL_111;
    }
    uint64_t v34 = (v33 >> 2) + 1;
    uint64_t v35 = 4 * (v34 & 0x7FFFFFFFFFFFFFF8);
    size_t v36 = &v23[-v35];
    uint64_t v32 = (_DWORD *)((char *)v32 - v35);
    BOOL v37 = &v31[4 * v27 - 16];
    int v38 = v23 - 16;
    uint64_t v39 = v34 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v40 = *(_OWORD *)v38;
      *(v37 - 1) = *((_OWORD *)v38 - 1);
      _OWORD *v37 = v40;
      v37 -= 2;
      v38 -= 32;
      v39 -= 8;
    }
    while (v39);
    int v23 = v36;
    if (v34 != (v34 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_111:
      do
      {
        int v41 = *((_DWORD *)v23 - 1);
        v23 -= 4;
        *--uint64_t v32 = v41;
      }
      while (v23 != v25);
    }
    goto LABEL_40;
  }
LABEL_64:
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8)) != 1)
  {
    unint64_t v64 = v104;
    uint64_t v63 = v105;
    if (v105 != v104)
    {
      uint64_t v65 = v105;
      do
      {
        uint64_t v67 = (void *)*((void *)v65 - 3);
        v65 -= 24;
        unint64_t v66 = v67;
        if (v67)
        {
          *((void *)v63 - 2) = v66;
          operator delete(v66);
        }
        uint64_t v63 = v65;
      }
      while (v65 != v64);
    }
    int v105 = v64;
  }
  int v68 = *(unsigned __int8 *)(a1 + 152);
  uint64_t v100 = 0;
  int v99 = 0;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9458918, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1E9458918))
  {
    qword_1E9458950 = 0;
    unk_1E9458958 = 0;
    qword_1E9458948 = 0;
    __cxa_atexit((void (*)(void *))sub_19E16610C, &qword_1E9458948, &dword_19E138000);
    __cxa_guard_release(&qword_1E9458918);
  }
  if ((int)v96 > 0x1000000)
  {
    int v91 = 34;
    goto LABEL_106;
  }
  if (a5 >= 257)
  {
    int v91 = 35;
LABEL_106:
    sub_19E2F6320(v91);
  }
  uint64_t v69 = v96 | (a5 << 24);
  uint64_t v70 = *(void *)(a1 + 120);
  int v71 = *v98;
  *(_DWORD *)(v70 + 12) = v69;
  uint64_t v72 = qword_1E9458948;
  uint64_t v73 = qword_1E9458950;
  if (*(unsigned char *)(v70 + 16)) {
    BOOL v74 = qword_1E9458950 == qword_1E9458948;
  }
  else {
    BOOL v74 = 1;
  }
  if (!v74)
  {
    (*(void (**)(void, uint64_t *, char **, uint64_t, BOOL))(**(void **)(*(void *)(v70 + 112) - 8)
                                                                      + 216))(*(void *)(*(void *)(v70 + 112) - 8), &qword_1E9458948, &v104, v69, v68 == 0);
    uint64_t v72 = qword_1E9458948;
    uint64_t v73 = qword_1E9458950;
  }
  if (v73 == v72)
  {
    if ((int)v69 >= 0x2000000) {
      int v75 = v96 & 0xFF000000 | (a5 << 24);
    }
    else {
      int v75 = 0x1000000;
    }
    (*(void (**)(void, uint64_t *, char **, uint64_t, uint64_t, int *, uint64_t))(**(void **)(v70 + 40)
                                                                                         + 304))(*(void *)(v70 + 40), v71, &v104, v75 & 0xFF000000 | v96 & 0xFFFFFF, a4, &v99, a7);
  }
  else
  {
    LODWORD(__p) = 0;
    sub_19E2321A0(*(void *)(v70 + 40), (uint64_t)v71, (uint64_t)&v104, (uint64_t)&qword_1E9458948, v69, (uint64_t)&v100, (float *)&v100 + 1, 0, (uint64_t)&__p, a4, (uint64_t)&v99);
  }
  uint64_t v76 = *(void *)(*(void *)(*(void *)(a1 + 120) + 112) - 8);
  uint64_t v77 = (*(uint64_t (**)(uint64_t))(*(void *)v76 + 32))(v76);
  std::string __p = 0;
  long long v102 = 0;
  uint64_t v103 = 0;
  uint64_t v79 = *(const void **)v77;
  uint64_t v78 = *(void *)(v77 + 8);
  uint64_t v80 = v78 - *(void *)v77;
  if (v78 == *(void *)v77)
  {
    uint64_t v81 = 0;
  }
  else
  {
    if (v80 < 0) {
      sub_19E13D694();
    }
    uint64_t v81 = operator new(v78 - *(void *)v77);
    memcpy(v81, v79, v80 & 0xFFFFFFFFFFFFFFF8);
  }
  uint64_t v82 = (const void *)*((void *)v81 + v96 - 1);
  uint64_t v83 = *(void *)(*(void *)(*(void *)(a1 + 120) + 112) - 8);
  int v84 = (*(uint64_t (**)(uint64_t))(*(void *)v83 + 272))(v83);
  memcpy(a3, v82, 4 * a5 * (uint64_t)v84);
  operator delete(v81);
  uint64_t v85 = v104;
  if (v104)
  {
    uint64_t v86 = v105;
    float32x4_t v87 = v104;
    if (v105 != v104)
    {
      uint64_t v88 = v105;
      do
      {
        long long v90 = (void *)*((void *)v88 - 3);
        v88 -= 24;
        uint64_t v89 = v90;
        if (v90)
        {
          *((void *)v86 - 2) = v89;
          operator delete(v89);
        }
        uint64_t v86 = v88;
      }
      while (v88 != v85);
      float32x4_t v87 = v104;
    }
    int v105 = v85;
    operator delete(v87);
  }
}

void sub_19E16D948(_Unwind_Exception *a1)
{
  operator delete(v1);
  sub_19E14315C((void **)(v2 - 112));
  _Unwind_Resume(a1);
}

void sub_19E16D964(_Unwind_Exception *a1)
{
  sub_19E14315C((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_19E16D978(_Unwind_Exception *a1)
{
  sub_19E14315C((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_19E16D98C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  if (__p)
  {
    operator delete(__p);
    sub_19E14315C((void **)(v25 - 112));
    _Unwind_Resume(a1);
  }
  sub_19E14315C((void **)(v25 - 112));
  _Unwind_Resume(a1);
}

void *sub_19E16DA18(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      sub_19E13D694();
    }
    int v4 = (char *)operator new(24 * a2);
    *a1 = v4;
    a1[2] = &v4[24 * a2];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_19E16DAC4(_Unwind_Exception *exception_object)
{
  if (*(void *)v1) {
    sub_19E32EBD4((void **)(v1 + 8), *(char **)v1, (void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E16DAE4(uint64_t a1, uint64_t *a2)
{
  (***(void (****)(void))(a1 + 8))(*(void *)(a1 + 8));
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  int v6 = *(_DWORD *)(a1 + 220);
  if (dword_1E9457D98 < v6 || !*(unsigned char *)(a1 + 188))
  {
    sub_19E167DCC(a1);
    *(unsigned char *)(a1 + 188) = 0;
    dword_1E9457D98 = *(_DWORD *)(a1 + 220);
    *(_DWORD *)(a1 + 224) = v6;
    uint64_t v7 = *(void *)(a1 + 120);
    if (v7)
    {
      if (*(unsigned char *)(a1 + 216)) {
        (*(void (**)(void))(**(void **)(v7 + 40) + 184))(*(void *)(v7 + 40));
      }
      sub_19E168384(a1);
    }
    sub_19E2F6320(37);
  }
  uint64_t v8 = v4 - v5;
  uint64_t v9 = (unint64_t)(v4 - v5) >> 2;
  if ((int)v9 >= 1)
  {
    uint64_t v10 = 0;
    do
    {
      sub_19E16CCF0(a1, (int *)(*a2 + v10));
      (*(void (**)(void))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8));
      v10 += 4;
    }
    while ((v8 & 0x3FFFFFFFCLL) != v10);
  }
  uint64_t v11 = *(uint64_t ***)(a1 + 128);
  sub_19E16DA18(&__p, (int)(v8 >> 2));
  (*(void (**)(void))(**(void **)(*(void *)(a1 + 120) + 40) + 184))(*(void *)(*(void *)(a1 + 120) + 40));
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8)) == 4) {
    sub_19E168190(a1, v9);
  }
  uint64_t v12 = **v11;
  if ((*v11)[1] != v12)
  {
    unint64_t v13 = 0;
    do
    {
      uint64_t v14 = **(void **)(*(void *)(a1 + 120) + 104);
      int v15 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 264))(v14);
      bzero(*(void **)(v12 + 8 * v13++), 4 * v15);
      uint64_t v12 = **v11;
    }
    while (v13 < ((*v11)[1] - v12) >> 3);
  }
  uint64_t v78 = v8;
  uint64_t v79 = v11;
  uint64_t v77 = v9;
  if ((int)v9 >= 1)
  {
    uint64_t v16 = 0;
    uint64_t v80 = ((unint64_t)v8 >> 2);
    do
    {
      if ((*(unsigned int (**)(void))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8)) == 1)
      {
        uint64_t v18 = (char *)__p + 24 * v16;
        uint64_t v19 = *a2;
        uint64_t v21 = (char *)*((void *)v18 + 1);
        unint64_t v20 = *((void *)v18 + 2);
        if ((unint64_t)v21 >= v20)
        {
          unint64_t v22 = *(char **)v18;
          uint64_t v23 = (uint64_t)&v21[-*(void *)v18];
          uint64_t v24 = v23 >> 2;
          unint64_t v25 = (v23 >> 2) + 1;
          if (v25 >> 62) {
            goto LABEL_90;
          }
          uint64_t v26 = v20 - (void)v22;
          if (v26 >> 1 > v25) {
            unint64_t v25 = v26 >> 1;
          }
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v27 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v27 = v25;
          }
          if (v27)
          {
            if (v27 >> 62) {
              goto LABEL_91;
            }
            unint64_t v28 = operator new(4 * v27);
            uint64_t v29 = &v28[4 * v24];
            *uint64_t v29 = *(_DWORD *)(v19 + 4 * v16);
            uint64_t v17 = (uint64_t)(v29 + 1);
            if (v21 == v22) {
              goto LABEL_59;
            }
          }
          else
          {
            unint64_t v28 = 0;
            uint64_t v29 = (_DWORD *)(4 * v24);
            *(_DWORD *)(4 * v24) = *(_DWORD *)(v19 + 4 * v16);
            uint64_t v17 = 4 * v24 + 4;
            if (v21 == v22) {
              goto LABEL_59;
            }
          }
          unint64_t v35 = v21 - 4 - v22;
          if (v35 < 0x2C) {
            goto LABEL_99;
          }
          if ((unint64_t)(v21 - &v28[v23]) < 0x20) {
            goto LABEL_99;
          }
          uint64_t v36 = (v35 >> 2) + 1;
          uint64_t v37 = 4 * (v36 & 0x7FFFFFFFFFFFFFF8);
          int v38 = &v21[-v37];
          uint64_t v29 = (_DWORD *)((char *)v29 - v37);
          uint64_t v39 = &v28[4 * v24 - 16];
          long long v40 = v21 - 16;
          uint64_t v41 = v36 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v42 = *(_OWORD *)v40;
            *(v39 - 1) = *((_OWORD *)v40 - 1);
            *uint64_t v39 = v42;
            v39 -= 2;
            v40 -= 32;
            v41 -= 8;
          }
          while (v41);
          uint64_t v21 = v38;
          if (v36 != (v36 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_99:
            do
            {
              int v43 = *((_DWORD *)v21 - 1);
              v21 -= 4;
              *--uint64_t v29 = v43;
            }
            while (v21 != v22);
          }
          goto LABEL_59;
        }
      }
      else
      {
        if ((*(unsigned int (**)(void))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8)) != 4) {
          goto LABEL_19;
        }
        (*(void (**)(void, void, uint64_t))(**(void **)(a1 + 8) + 8))(*(void *)(a1 + 8), *(unsigned int *)(*a2 + 4 * v16), **v79 + 8 * v16);
        uint64_t v18 = (char *)__p + 24 * v16;
        uint64_t v19 = *a2;
        uint64_t v21 = (char *)*((void *)v18 + 1);
        unint64_t v30 = *((void *)v18 + 2);
        if ((unint64_t)v21 >= v30)
        {
          unint64_t v22 = *(char **)v18;
          uint64_t v31 = (uint64_t)&v21[-*(void *)v18];
          uint64_t v32 = v31 >> 2;
          unint64_t v33 = (v31 >> 2) + 1;
          if (v33 >> 62) {
LABEL_90:
          }
            sub_19E13D694();
          uint64_t v34 = v30 - (void)v22;
          if (v34 >> 1 > v33) {
            unint64_t v33 = v34 >> 1;
          }
          if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v27 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v27 = v33;
          }
          if (v27)
          {
            if (v27 >> 62) {
LABEL_91:
            }
              sub_19E13C418();
            unint64_t v28 = operator new(4 * v27);
            uint64_t v29 = &v28[4 * v32];
            *uint64_t v29 = *(_DWORD *)(v19 + 4 * v16);
            uint64_t v17 = (uint64_t)(v29 + 1);
            if (v21 == v22) {
              goto LABEL_59;
            }
LABEL_53:
            unint64_t v44 = v21 - 4 - v22;
            if (v44 < 0x2C) {
              goto LABEL_100;
            }
            if ((unint64_t)(v21 - &v28[v31]) < 0x20) {
              goto LABEL_100;
            }
            uint64_t v45 = (v44 >> 2) + 1;
            uint64_t v46 = 4 * (v45 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v47 = &v21[-v46];
            uint64_t v29 = (_DWORD *)((char *)v29 - v46);
            uint64_t v48 = &v28[4 * v32 - 16];
            unint64_t v49 = v21 - 16;
            uint64_t v50 = v45 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v51 = *(_OWORD *)v49;
              *(v48 - 1) = *((_OWORD *)v49 - 1);
              *uint64_t v48 = v51;
              v48 -= 2;
              v49 -= 32;
              v50 -= 8;
            }
            while (v50);
            uint64_t v21 = v47;
            if (v45 != (v45 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_100:
              do
              {
                int v52 = *((_DWORD *)v21 - 1);
                v21 -= 4;
                *--uint64_t v29 = v52;
              }
              while (v21 != v22);
            }
          }
          else
          {
            unint64_t v28 = 0;
            uint64_t v29 = (_DWORD *)(4 * v32);
            *(_DWORD *)(4 * v32) = *(_DWORD *)(v19 + 4 * v16);
            uint64_t v17 = 4 * v32 + 4;
            if (v21 != v22) {
              goto LABEL_53;
            }
          }
LABEL_59:
          *(void *)uint64_t v18 = v29;
          *((void *)v18 + 1) = v17;
          *((void *)v18 + 2) = &v28[4 * v27];
          if (v22) {
            operator delete(v22);
          }
          goto LABEL_18;
        }
      }
      *(_DWORD *)uint64_t v21 = *(_DWORD *)(v19 + 4 * v16);
      uint64_t v17 = (uint64_t)(v21 + 4);
LABEL_18:
      *((void *)v18 + 1) = v17;
LABEL_19:
      ++v16;
    }
    while (v16 != v80);
  }
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8)) != 1)
  {
    unint64_t v54 = (char *)__p;
    uint64_t v53 = v84;
    if (v84 != __p)
    {
      uint64_t v55 = v84;
      do
      {
        int v57 = (void *)*((void *)v55 - 3);
        v55 -= 24;
        uint64_t v56 = v57;
        if (v57)
        {
          *((void *)v53 - 2) = v56;
          operator delete(v56);
        }
        uint64_t v53 = v55;
      }
      while (v55 != v54);
    }
    int v84 = v54;
  }
  int v58 = *(unsigned __int8 *)(a1 + 152);
  uint64_t v82 = 0;
  int v81 = 0;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9458920, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1E9458920))
  {
    qword_1E9458968 = 0;
    unk_1E9458970 = 0;
    qword_1E9458960 = 0;
    __cxa_atexit((void (*)(void *))sub_19E16610C, &qword_1E9458960, &dword_19E138000);
    __cxa_guard_release(&qword_1E9458920);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9458928, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1E9458928))
  {
    qword_1E9458980 = 0;
    unk_1E9458988 = 0;
    qword_1E9458978 = 0;
    __cxa_atexit((void (*)(void *))sub_19E142EEC, &qword_1E9458978, &dword_19E138000);
    __cxa_guard_release(&qword_1E9458928);
  }
  uint64_t v59 = *(void *)(a1 + 120);
  uint64_t v60 = *v79;
  *(_DWORD *)(v59 + 12) = v77;
  uint64_t v61 = qword_1E9458960;
  uint64_t v62 = qword_1E9458968;
  if (*(unsigned char *)(v59 + 16)) {
    BOOL v63 = qword_1E9458968 == qword_1E9458960;
  }
  else {
    BOOL v63 = 1;
  }
  if (!v63)
  {
    (*(void (**)(void, uint64_t *, void **, uint64_t, BOOL))(**(void **)(*(void *)(v59 + 112) - 8)
                                                                      + 216))(*(void *)(*(void *)(v59 + 112) - 8), &qword_1E9458960, &__p, v77, v58 == 0);
    uint64_t v61 = qword_1E9458960;
    uint64_t v62 = qword_1E9458968;
  }
  if (v62 == v61)
  {
    if ((int)v77 >= 0x2000000) {
      int v64 = v77 & 0xFF000000;
    }
    else {
      int v64 = 0x1000000;
    }
    (*(void (**)(void, uint64_t *, void **, uint64_t, void, int *, uint64_t *))(**(void **)(v59 + 40)
                                                                                          + 304))(*(void *)(v59 + 40), v60, &__p, v64 & 0xFF000000 | v77 & 0xFFFFFF, 0, &v81, &qword_1E9458978);
  }
  else
  {
    int v85 = 0;
    sub_19E2321A0(*(void *)(v59 + 40), (uint64_t)v60, (uint64_t)&__p, (uint64_t)&qword_1E9458960, v77, (uint64_t)&v82, (float *)&v82 + 1, 0, (uint64_t)&v85, 0, (uint64_t)&v81);
  }
  uint64_t v65 = *(void *)(*(void *)(*(void *)(a1 + 120) + 112) - 8);
  unint64_t v66 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v65 + 32))(v65);
  uint64_t v67 = *(void **)(a1 + 168);
  int v68 = *(const void **)(*v66 + (((v78 << 30) - 0x100000000) >> 29));
  uint64_t v69 = *(void *)(*(void *)(*(void *)(a1 + 120) + 112) - 8);
  int v70 = (*(uint64_t (**)(uint64_t))(*(void *)v69 + 272))(v69);
  memcpy(v67, v68, 4 * v70);
  (*(void (**)(void))(**(void **)(*(void *)(a1 + 120) + 40) + 192))(*(void *)(*(void *)(a1 + 120) + 40));
  int v71 = (char *)__p;
  if (__p)
  {
    uint64_t v72 = v84;
    uint64_t v73 = __p;
    if (v84 != __p)
    {
      BOOL v74 = v84;
      do
      {
        uint64_t v76 = (void *)*((void *)v74 - 3);
        v74 -= 24;
        int v75 = v76;
        if (v76)
        {
          *((void *)v72 - 2) = v75;
          operator delete(v75);
        }
        uint64_t v72 = v74;
      }
      while (v74 != v71);
      uint64_t v73 = __p;
    }
    int v84 = v71;
    operator delete(v73);
  }
}

void sub_19E16E404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_19E14315C((void **)va);
  _Unwind_Resume(a1);
}

void sub_19E16E418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_19E14315C((void **)va);
  _Unwind_Resume(a1);
}

void sub_19E16E42C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_19E14315C((void **)va);
  _Unwind_Resume(a1);
}

void sub_19E16E440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_19E14315C((void **)va);
  _Unwind_Resume(a1);
}

void sub_19E16E454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_19E14315C((void **)va);
  _Unwind_Resume(a1);
}

void sub_19E16E468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_19E14315C((void **)va);
  _Unwind_Resume(a1);
}

void sub_19E16E47C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(**(void **)(*(void *)(a1 + 120) + 40) + 184))(*(void *)(*(void *)(a1 + 120) + 40));
  int v6 = *(_DWORD *)(a1 + 220);
  if (dword_1E9457D98 < v6 || !*(unsigned char *)(a1 + 188))
  {
    sub_19E167DCC(a1);
    *(unsigned char *)(a1 + 188) = 0;
    dword_1E9457D98 = *(_DWORD *)(a1 + 220);
    *(_DWORD *)(a1 + 224) = v6;
    uint64_t v7 = *(void *)(a1 + 120);
    if (v7)
    {
      if (*(unsigned char *)(a1 + 216)) {
        (*(void (**)(void))(**(void **)(v7 + 40) + 184))(*(void *)(v7 + 40));
      }
      sub_19E168384(a1);
    }
    sub_19E2F6320(37);
  }
  uint64_t v8 = *(uint64_t **)(a1 + 128);
  uint64_t v9 = (int)a3;
  if ((int)a3 > (unint64_t)((uint64_t)(*(void *)(*v8 + 8) - *(void *)*v8) >> 3)) {
    sub_19E168190(a1, a3);
  }
  std::string __p = 0;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  int v10 = (*(uint64_t (**)(void))(***(void ***)(*(void *)(a1 + 120) + 104) + 264))();
  if ((int)a3 >= 1)
  {
    uint64_t v11 = 0;
    size_t v12 = 4 * v10;
    do
    {
      bzero(*(void **)(*(void *)*v8 + v11), v12);
      memcpy(*(void **)(*(void *)*v8 + v11), *(const void **)(a2 + v11), v12);
      v11 += 8;
    }
    while (8 * a3 != v11);
  }
  int v13 = *(unsigned __int8 *)(a1 + 152);
  uint64_t v37 = 0;
  int v36 = 0;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9458930, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1E9458930))
  {
    qword_1E9458998 = 0;
    unk_1E94589A0 = 0;
    qword_1E9458990 = 0;
    __cxa_atexit((void (*)(void *))sub_19E16610C, &qword_1E9458990, &dword_19E138000);
    __cxa_guard_release(&qword_1E9458930);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9458938, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1E9458938))
  {
    qword_1E94589B0 = 0;
    unk_1E94589B8 = 0;
    qword_1E94589A8 = 0;
    __cxa_atexit((void (*)(void *))sub_19E142EEC, &qword_1E94589A8, &dword_19E138000);
    __cxa_guard_release(&qword_1E9458938);
  }
  uint64_t v14 = *(void *)(a1 + 120);
  uint64_t v15 = *v8;
  *(_DWORD *)(v14 + 12) = a3;
  uint64_t v16 = qword_1E9458990;
  uint64_t v17 = qword_1E9458998;
  if (*(unsigned char *)(v14 + 16) && qword_1E9458998 != qword_1E9458990)
  {
    (*(void (**)(void, uint64_t *, void **, uint64_t, BOOL))(**(void **)(*(void *)(v14 + 112) - 8)
                                                                      + 216))(*(void *)(*(void *)(v14 + 112) - 8), &qword_1E9458990, &__p, a3, v13 == 0);
    uint64_t v16 = qword_1E9458990;
    uint64_t v17 = qword_1E9458998;
  }
  if (v17 == v16)
  {
    if ((int)a3 >= 0x2000000) {
      int v18 = a3 & 0xFF000000;
    }
    else {
      int v18 = 0x1000000;
    }
    (*(void (**)(void, uint64_t, void **, uint64_t, void, int *, uint64_t *))(**(void **)(v14 + 40) + 304))(*(void *)(v14 + 40), v15, &__p, v18 & 0xFF000000 | a3 & 0xFFFFFF, 0, &v36, &qword_1E94589A8);
  }
  else
  {
    LODWORD(v35[0]) = 0;
    sub_19E2321A0(*(void *)(v14 + 40), v15, (uint64_t)&__p, (uint64_t)&qword_1E9458990, a3, (uint64_t)&v37, (float *)&v37 + 1, 0, (uint64_t)v35, 0, (uint64_t)&v36);
  }
  uint64_t v19 = *(void *)(*(void *)(*(void *)(a1 + 120) + 112) - 8);
  uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 32))(v19);
  memset(v35, 0, sizeof(v35));
  unint64_t v22 = *(const void **)v20;
  uint64_t v21 = *(void *)(v20 + 8);
  uint64_t v23 = v21 - *(void *)v20;
  if (v21 == *(void *)v20)
  {
    uint64_t v24 = 0;
  }
  else
  {
    if (v23 < 0) {
      sub_19E13D694();
    }
    uint64_t v24 = operator new(v21 - *(void *)v20);
    memcpy(v24, v22, v23 & 0xFFFFFFFFFFFFFFF8);
  }
  unint64_t v25 = *(void **)(a1 + 168);
  uint64_t v26 = (const void *)*((void *)v24 + v9 - 1);
  uint64_t v27 = *(void *)(*(void *)(*(void *)(a1 + 120) + 112) - 8);
  int v28 = (*(uint64_t (**)(uint64_t))(*(void *)v27 + 272))(v27);
  memcpy(v25, v26, 4 * v28);
  dword_1E9457D98 = 2;
  (*(void (**)(void))(**(void **)(*(void *)(a1 + 120) + 40) + 192))(*(void *)(*(void *)(a1 + 120) + 40));
  operator delete(v24);
  uint64_t v29 = (char *)__p;
  if (__p)
  {
    unint64_t v30 = v39;
    uint64_t v31 = __p;
    if (v39 != __p)
    {
      uint64_t v32 = v39;
      do
      {
        uint64_t v34 = (void *)*((void *)v32 - 3);
        v32 -= 24;
        unint64_t v33 = v34;
        if (v34)
        {
          *((void *)v30 - 2) = v33;
          operator delete(v33);
        }
        unint64_t v30 = v32;
      }
      while (v32 != v29);
      uint64_t v31 = __p;
    }
    uint64_t v39 = v29;
    operator delete(v31);
  }
}

void sub_19E16E998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_19E14315C((void **)va);
  _Unwind_Resume(a1);
}

void sub_19E16E9AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_19E14315C((void **)va);
  _Unwind_Resume(a1);
}

void sub_19E16E9C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  if (__p) {
    operator delete(__p);
  }
  sub_19E14315C(&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_19E16EA04(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t sub_19E16EA0C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 120);
  if (!v2) {
    sub_19E2F6320(36);
  }
  if (a2)
  {
    int v3 = 0;
    return (*(uint64_t (**)(void, uint64_t, int *))(**(void **)(v2 + 40) + 152))(*(void *)(v2 + 40), a2, &v3);
  }
  return result;
}

uint64_t sub_19E16EA6C(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)(a1 + 120)) {
    sub_19E2F6320(36);
  }
  if (a2)
  {
    uint64_t v2 = *a2;
    uint64_t v3 = a2[1];
    uint64_t v4 = v3 - *a2;
    if (v3 != *a2)
    {
      uint64_t v5 = 0;
      unint64_t v6 = v4 >> 4;
      if (v6 <= 1) {
        unint64_t v6 = 1;
      }
      LOBYTE(v7) = 1;
      while (1)
      {
        if (v7)
        {
          uint64_t v8 = *(unsigned int *)(v2 + 16 * v5);
          if ((int)v8 >= 1)
          {
            uint64_t v9 = **(float32x4_t ***)(v2 + 8 + 16 * v5);
            if (v8 < 8)
            {
              uint64_t v10 = 0;
              LOBYTE(v7) = 1;
LABEL_23:
              uint64_t v22 = v8 - v10;
              uint64_t v23 = &v9->f32[v10];
              do
              {
                float v24 = *v23++;
                LOBYTE(v7) = (v24 == 0.0) & v7;
                --v22;
              }
              while (v22);
              goto LABEL_8;
            }
            if (v8 >= 0x20)
            {
              uint64_t v10 = v8 & 0x7FFFFFE0;
              uint64_t v11 = v9 + 4;
              v12.i64[0] = 0x101010101010101;
              v12.i64[1] = 0x101010101010101;
              uint64_t v13 = v8 & 0xFFFFFFE0;
              v14.i64[0] = 0x101010101010101;
              v14.i64[1] = 0x101010101010101;
              do
              {
                int8x16_t v12 = vandq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_f32(v11[-4]), (int16x8_t)vceqzq_f32(v11[-3])), (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_f32(v11[-2]), (int16x8_t)vceqzq_f32(v11[-1]))), v12);
                int8x16_t v14 = vandq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_f32(*v11), (int16x8_t)vceqzq_f32(v11[1])), (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_f32(v11[2]), (int16x8_t)vceqzq_f32(v11[3]))), v14);
                v11 += 8;
                v13 -= 32;
              }
              while (v13);
              uint8x16_t v15 = (uint8x16_t)vcltzq_s8(vshlq_n_s8(vmvnq_s8(vandq_s8(v12, v14)), 7uLL));
              v15.i8[0] = vmaxvq_u8(v15);
              unsigned int v7 = v15.i32[0] ^ 1;
              if (v10 == v8) {
                goto LABEL_8;
              }
              if ((v8 & 0x18) == 0) {
                goto LABEL_23;
              }
            }
            else
            {
              uint64_t v10 = 0;
              unsigned int v7 = 1;
            }
            uint64_t v16 = v10;
            uint64_t v10 = v8 & 0xFFFFFFF8;
            int8x8_t v17 = vdup_n_s8(v7);
            int v18 = (float32x4_t *)((char *)v9 + 4 * v16);
            uint64_t v19 = v16 - v10;
            do
            {
              float32x4_t v20 = *v18;
              float32x4_t v21 = v18[1];
              v18 += 2;
              int8x8_t v17 = vand_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vceqzq_f32(v20), (int16x8_t)vceqzq_f32(v21))), v17);
              v19 += 8;
            }
            while (v19);
            LOBYTE(v7) = vmaxv_u8((uint8x8_t)vcltz_s8(vshl_n_s8(vmvn_s8(v17), 7uLL))) ^ 1;
            if (v10 == v8) {
              goto LABEL_8;
            }
            goto LABEL_23;
          }
          LOBYTE(v7) = 1;
        }
        else
        {
          LOBYTE(v7) = 0;
        }
LABEL_8:
        if (++v5 == v6) {
          return v7 & 1;
        }
      }
    }
    return 1;
  }
  else
  {
    LOBYTE(v7) = 0;
    return v7 & 1;
  }
}

uint64_t sub_19E16EC44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 120);
  if (!v3) {
    sub_19E2F6320(36);
  }
  if (!a2) {
    sub_19E2F6320(37);
  }
  int v5 = 0;
  return (*(uint64_t (**)(void, uint64_t, uint64_t, int *))(**(void **)(v3 + 40) + 136))(*(void *)(v3 + 40), a2, a3, &v5);
}

uint64_t sub_19E16ECAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 120);
  if (!v2) {
    sub_19E2F6320(38);
  }
  if (!a2) {
    sub_19E2F6320(39);
  }
  int v4 = 0;
  return (*(uint64_t (**)(void, uint64_t, void, int *))(**(void **)(v2 + 40) + 144))(*(void *)(v2 + 40), a2, 0, &v4);
}

uint64_t sub_19E16ED18(uint64_t a1)
{
  return *(void *)(a1 + 144);
}

uint64_t sub_19E16ED20(uint64_t a1, char *a2, int a3)
{
  if (!a2) {
    sub_19E2F6320(103);
  }
  int v4 = a2;
  uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 120) + 112) - 8);
  int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 272))(v6);
  uint64_t v8 = *(void *)(*(void *)(*(void *)(a1 + 120) + 112) - 8);
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 32))(v8);
  if (a3 >= 1)
  {
    uint64_t v10 = (void *)v9;
    uint64_t v11 = 0;
    size_t v12 = 4 * v7;
    uint64_t v13 = 8 * a3;
    do
    {
      memcpy(v4, *(const void **)(*v10 + v11), v12);
      v4 += v12;
      v11 += 8;
    }
    while (v13 != v11);
  }
  return 1;
}

uint64_t sub_19E16EE10(uint64_t a1, float32x4_t *a2, float32x4_t *a3, int a4, unsigned int a5)
{
  if (!a2 || !a3) {
    sub_19E2F6320(103);
  }
  LODWORD(v6) = a4;
  uint64_t v8 = *(void *)(*(void *)(*(void *)(a1 + 120) + 112) - 8);
  unsigned int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 272))(v8);
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a1 + 120) + 112) - 8);
  uint64_t v92 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v10 + 32))(v10);
  if ((int)a5 >= 1)
  {
    unsigned int v11 = v9;
    uint64_t v12 = (int)v6;
    unint64_t v13 = 126 - 2 * __clz((int)v6);
    if (!v6) {
      unint64_t v13 = 0;
    }
    uint64_t v93 = v13;
    if ((int)v9 >= (int)v6) {
      uint64_t v6 = v6;
    }
    else {
      uint64_t v6 = v9;
    }
    unsigned int v91 = v9;
    if ((int)v6 >= 1)
    {
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = 4 * v12;
      uint64_t v88 = 2 * v6;
      int8x8_t v17 = a2 + 1;
      v18.i64[0] = 0x400000004;
      v18.i64[1] = 0x400000004;
      v19.i64[0] = 0x800000008;
      v19.i64[1] = 0x800000008;
      float32x4_t v20 = a3 + 1;
      uint64_t v89 = a5;
      while (1)
      {
        float32x4_t v21 = *(float32x4_t **)(*v92 + 8 * v15);
        uint64_t v22 = *(float ***)(a1 + 160);
        uint64_t v23 = *v22;
        if (v11 < 8) {
          break;
        }
        if (v23 + 1 < &v21->f32[v9] && v21 < (float32x4_t *)&v23[2 * v9]) {
          break;
        }
        unint64_t v25 = v23 + 8;
        uint64_t v26 = v21 + 1;
        uint64_t v27 = v9 & 0xFFFFFFF8;
        int32x4_t v28 = (int32x4_t)xmmword_19E351190;
        do
        {
          v97.val[0] = (float32x4_t)vaddq_s32(v28, v18);
          float32x4_t v29 = v26[-1];
          v97.val[1] = *v26;
          unint64_t v30 = v25 - 8;
          vst2q_f32(v30, *(float32x4x2_t *)v28.i8);
          vst2q_f32(v25, v97);
          int32x4_t v28 = vaddq_s32(v28, v19);
          v25 += 16;
          v26 += 2;
          v27 -= 8;
        }
        while (v27);
        uint64_t v31 = v9 & 0xFFFFFFF8;
        if (v31 != v9) {
          goto LABEL_23;
        }
LABEL_25:
        unint64_t v33 = &v23[2 * v12];
        uint64_t v34 = v22[1];
        if (v33 != v34)
        {
          sub_19E235A3C(v23, v33, v34);
          uint64_t v23 = *v22;
        }
        sub_19E235F0C(v23, (char *)&v23[2 * v12], (uint64_t)&v95, v93, 1);
        unint64_t v35 = *v22;
        if (v6 >= 8)
        {
          uint64_t v36 = 0;
          uint64_t v37 = a3;
          uint64_t v44 = 4 * v6 + v16 * v15;
          unint64_t v45 = (unint64_t)a3 + v44;
          unint64_t v46 = (unint64_t)a2 + v44;
          BOOL v48 = (char *)a2 + v16 * v15 < (char *)&v35[v88] && (unint64_t)(v35 + 1) < v46;
          BOOL v49 = (unint64_t)v35 >= v45 || (char *)a3 + v16 * v15 >= (char *)&v35[v88 - 1];
          v18.i64[0] = 0x400000004;
          v18.i64[1] = 0x400000004;
          v19.i64[0] = 0x800000008;
          v19.i64[1] = 0x800000008;
          if (v49)
          {
            unsigned int v11 = v9;
            if (!v48)
            {
              uint64_t v50 = v35 + 8;
              long long v51 = v20;
              int v52 = v17;
              uint64_t v53 = v6 & 0xFFFFFFF8;
              do
              {
                unint64_t v54 = v50 - 8;
                float32x4x2_t v96 = vld2q_f32(v54);
                float32x4x2_t v98 = vld2q_f32(v50);
                v51[-1] = v96.val[0];
                *long long v51 = v98.val[0];
                v52[-1] = v96.val[1];
                *int v52 = v98.val[1];
                v50 += 16;
                v52 += 2;
                v51 += 2;
                v53 -= 8;
              }
              while (v53);
              uint64_t v36 = v6 & 0x7FFFFFF8;
              if ((v6 & 0xFFFFFFF8) == v6) {
                goto LABEL_11;
              }
            }
          }
          else
          {
            unsigned int v11 = v9;
          }
        }
        else
        {
          uint64_t v36 = 0;
          uint64_t v37 = a3;
          unsigned int v11 = v9;
          v18.i64[0] = 0x400000004;
          v18.i64[1] = 0x400000004;
          v19.i64[0] = 0x800000008;
          v19.i64[1] = 0x800000008;
        }
        int v38 = &v35[2 * v36 + 1];
        uint64_t v39 = 4 * (v36 + v14);
        uint64_t v40 = (__int32 *)((char *)v37 + v39);
        uint64_t v41 = (__int32 *)((char *)a2 + v39);
        uint64_t v42 = v6 - v36;
        do
        {
          *v40++ = *((_DWORD *)v38 - 1);
          int v43 = *(_DWORD *)v38;
          v38 += 2;
          *v41++ = v43;
          --v42;
        }
        while (v42);
LABEL_11:
        ++v15;
        int8x8_t v17 = (float32x4_t *)((char *)v17 + v16);
        float32x4_t v20 = (float32x4_t *)((char *)v20 + v16);
        v14 += v12;
        if (v15 == v89) {
          return 1;
        }
      }
      uint64_t v31 = 0;
LABEL_23:
      uint64_t v32 = &v23[2 * v31 + 1];
      do
      {
        *((_DWORD *)v32 - 1) = v31;
        float *v32 = v21->f32[v31];
        v32 += 2;
        ++v31;
      }
      while (v9 != v31);
      goto LABEL_25;
    }
    if ((int)v9 > 0)
    {
      uint64_t v55 = a5;
      if (v9 < 8)
      {
        uint64_t v56 = 0;
        do
        {
          uint64_t v61 = *(_DWORD **)(*v92 + v56);
          uint64_t v62 = *(uint64_t **)(a1 + 160);
          uint64_t v63 = *v62;
          *(_DWORD *)uint64_t v63 = 0;
          *(_DWORD *)(v63 + 4) = *v61;
          if (v11 != 1)
          {
            *(_DWORD *)(v63 + 8) = 1;
            *(_DWORD *)(v63 + 12) = v61[1];
            if (v11 != 2)
            {
              *(_DWORD *)(v63 + 16) = 2;
              *(_DWORD *)(v63 + 20) = v61[2];
              if (v11 != 3)
              {
                *(_DWORD *)(v63 + 24) = 3;
                *(_DWORD *)(v63 + 28) = v61[3];
                if (v11 != 4)
                {
                  *(_DWORD *)(v63 + 32) = 4;
                  *(_DWORD *)(v63 + 36) = v61[4];
                  if (v11 != 5)
                  {
                    *(_DWORD *)(v63 + 40) = 5;
                    *(_DWORD *)(v63 + 44) = v61[5];
                    if (v11 != 6)
                    {
                      *(_DWORD *)(v63 + 48) = 6;
                      *(_DWORD *)(v63 + 52) = v61[6];
                    }
                  }
                }
              }
            }
          }
          int v64 = (float *)(v63 + 8 * v12);
          uint64_t v65 = (float *)v62[1];
          if (v64 != v65)
          {
            sub_19E235A3C((float *)v63, v64, v65);
            uint64_t v63 = *v62;
          }
          sub_19E235F0C((float *)v63, (char *)(v63 + 8 * v12), (uint64_t)&v95, v93, 1);
          v56 += 8;
          unsigned int v11 = v91;
        }
        while (8 * a5 != v56);
        return 1;
      }
      uint64_t v66 = 0;
      uint64_t v67 = v11;
      uint64_t v68 = 2 * v11;
      uint64_t v69 = v11;
      uint64_t v70 = v11 & 0xFFFFFFF8;
      v71.i64[0] = 0x400000004;
      v71.i64[1] = 0x400000004;
      v72.i64[0] = 0x800000008;
      for (v72.i64[1] = 0x800000008; ; v72.i64[1] = 0x800000008)
      {
        uint64_t v73 = *(float32x4_t **)(*v92 + 8 * v66);
        BOOL v74 = *(float ***)(a1 + 160);
        int v75 = *v74;
        if (*v74 + 1 >= &v73->f32[v69] || v73 >= (float32x4_t *)&(*v74)[v68])
        {
          uint64_t v77 = v75 + 8;
          uint64_t v78 = v73 + 1;
          uint64_t v79 = v70;
          int32x4_t v80 = (int32x4_t)xmmword_19E351190;
          do
          {
            v99.val[0] = (float32x4_t)vaddq_s32(v80, v71);
            float32x4_t v81 = v78[-1];
            v99.val[1] = *v78;
            uint64_t v82 = v77 - 8;
            vst2q_f32(v82, *(float32x4x2_t *)v80.i8);
            vst2q_f32(v77, v99);
            int32x4_t v80 = vaddq_s32(v80, v72);
            v77 += 16;
            v78 += 2;
            v79 -= 8;
          }
          while (v79);
          uint64_t v83 = v70;
          if (v70 == v67) {
            goto LABEL_76;
          }
        }
        else
        {
          uint64_t v83 = 0;
        }
        int v84 = &v75[2 * v83 + 1];
        do
        {
          *((_DWORD *)v84 - 1) = v83;
          *int v84 = v73->f32[v83];
          v84 += 2;
          ++v83;
        }
        while (v67 != v83);
LABEL_76:
        int v85 = &v75[2 * v12];
        uint64_t v86 = v74[1];
        if (v85 != v86)
        {
          sub_19E235A3C(v75, v85, v86);
          int v75 = *v74;
        }
        sub_19E235F0C(v75, (char *)&v75[2 * v12], (uint64_t)&v95, v93, 1);
        ++v66;
        v71.i64[0] = 0x400000004;
        v71.i64[1] = 0x400000004;
        v72.i64[0] = 0x800000008;
        if (v66 == v55) {
          return 1;
        }
      }
    }
    do
    {
      int v57 = *(float ***)(a1 + 160);
      int v58 = *v57;
      uint64_t v59 = v57[1];
      uint64_t v60 = &(*v57)[2 * v12];
      if (v60 != v59)
      {
        sub_19E235A3C(v58, v60, v59);
        int v58 = *v57;
      }
      sub_19E235F0C(v58, (char *)&v58[2 * v12], (uint64_t)&v95, v93, 1);
      --a5;
    }
    while (a5);
  }
  return 1;
}

uint64_t sub_19E16F3F8(uint64_t a1, float32x4_t *a2, unint64_t a3, signed int a4, int a5)
{
  if (!a2 || !a3) {
    sub_19E2F6320(103);
  }
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a1 + 120) + 112) - 8);
  unsigned int v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 272))(v10);
  uint64_t v12 = *(void *)(*(void *)(*(void *)(a1 + 120) + 112) - 8);
  unint64_t v13 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 32))(v12);
  if (a5 <= 1) {
    int v14 = 1;
  }
  else {
    int v14 = a5;
  }
  uint64_t v15 = *(float ***)(a1 + 160);
  uint64_t v16 = *v15;
  if ((int)v11 >= 1)
  {
    int8x8_t v17 = *(float32x4_t **)(*v13 + 8 * (v14 - 1));
    if (v11 < 8 || (v16 + 1 < &v17->f32[v11] ? (BOOL v18 = v17 >= (float32x4_t *)&v16[2 * v11]) : (BOOL v18 = 1), !v18))
    {
      uint64_t v19 = 0;
LABEL_18:
      int32x4_t v28 = &v16[2 * v19 + 1];
      do
      {
        *((_DWORD *)v28 - 1) = v19;
        float *v28 = v17->f32[v19];
        v28 += 2;
        ++v19;
      }
      while (v11 != v19);
      goto LABEL_20;
    }
    uint64_t v19 = v11 & 0x7FFFFFF8;
    float32x4_t v20 = v16 + 8;
    int32x4_t v21 = (int32x4_t)xmmword_19E351190;
    uint64_t v22 = v17 + 1;
    v23.i64[0] = 0x400000004;
    v23.i64[1] = 0x400000004;
    v24.i64[0] = 0x800000008;
    v24.i64[1] = 0x800000008;
    uint64_t v25 = v11 & 0xFFFFFFF8;
    do
    {
      v54.val[0] = (float32x4_t)vaddq_s32(v21, v23);
      float32x4_t v26 = v22[-1];
      v54.val[1] = *v22;
      uint64_t v27 = v20 - 8;
      vst2q_f32(v27, *(float32x4x2_t *)v21.i8);
      vst2q_f32(v20, v54);
      int32x4_t v21 = vaddq_s32(v21, v24);
      v20 += 16;
      v22 += 2;
      v25 -= 8;
    }
    while (v25);
    if (v19 != v11) {
      goto LABEL_18;
    }
  }
LABEL_20:
  float32x4_t v29 = &v16[2 * a4];
  unint64_t v30 = v15[1];
  if (v29 != v30)
  {
    sub_19E235A3C(v16, v29, v30);
    uint64_t v16 = *v15;
  }
  unint64_t v31 = 126 - 2 * __clz(a4);
  if (a4) {
    uint64_t v32 = v31;
  }
  else {
    uint64_t v32 = 0;
  }
  sub_19E235F0C(v16, (char *)&v16[2 * a4], (uint64_t)&v51, v32, 1);
  if ((int)v11 >= a4) {
    uint64_t v33 = a4;
  }
  else {
    uint64_t v33 = v11;
  }
  if ((int)v33 >= 1)
  {
    unint64_t v34 = (unint64_t)*v15;
    if (v33 < 0xC)
    {
      uint64_t v35 = 0;
LABEL_45:
      unint64_t v45 = (__int32 *)(v34 + 8 * v35 + 4);
      unint64_t v46 = &a2->i32[v35];
      uint64_t v47 = (_DWORD *)(a3 + 4 * v35);
      uint64_t v48 = v33 - v35;
      do
      {
        *v47++ = *(v45 - 1);
        __int32 v49 = *v45;
        v45 += 2;
        *v46++ = v49;
        --v48;
      }
      while (v48);
      return 1;
    }
    uint64_t v35 = 0;
    unint64_t v36 = v34 + 8 * v33;
    BOOL v38 = v36 > (unint64_t)a2 && v34 + 4 < (unint64_t)a2->u64 + 4 * v33;
    if (v34 < a3 + 4 * v33 && v36 - 4 > a3) {
      goto LABEL_45;
    }
    if (v38) {
      goto LABEL_45;
    }
    uint64_t v35 = v33 & 0x7FFFFFF8;
    uint64_t v40 = (const float *)(v34 + 32);
    uint64_t v41 = (float32x4_t *)(a3 + 16);
    uint64_t v42 = a2 + 1;
    uint64_t v43 = v33 & 0xFFFFFFF8;
    do
    {
      uint64_t v44 = v40 - 8;
      float32x4x2_t v52 = vld2q_f32(v44);
      float32x4x2_t v53 = vld2q_f32(v40);
      v41[-1] = v52.val[0];
      *uint64_t v41 = v53.val[0];
      v42[-1] = v52.val[1];
      float32x4_t *v42 = v53.val[1];
      v40 += 16;
      v41 += 2;
      v42 += 2;
      v43 -= 8;
    }
    while (v43);
    if (v35 != v33) {
      goto LABEL_45;
    }
  }
  return 1;
}

void sub_19E16F698()
{
}

void sub_19E16F78C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E16F7A0()
{
}

void sub_19E16F82C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19E16F840(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 8))(a2);
  }
  return result;
}

uint64_t sub_19E16F870(uint64_t result, void *a2, void *a3, unsigned int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, char a12, char a13)
{
  uint64_t v37 = result;
  int v18 = 0;
  unsigned int v36 = *(_DWORD *)(a10 + 8);
  while (1)
  {
    uint64_t v19 = (int)v36 >= (int)a4 ? a4 : v36;
    if (v19)
    {
      unsigned int v20 = 0;
      do
      {
        uint64_t v21 = sub_19E2FDB30(a10, v20);
        *(_DWORD *)(v21 + 168) = a5;
        *(void *)(v21 + 176) = a7;
        uint64_t v22 = *a3 + 24 * (v18 + v20);
        *(void *)(v21 + 192) = *a2 + 24 * (v18 + v20);
        *(void *)(v21 + 200) = v22;
        *(unsigned char *)(v21 + 208) = 0;
        ++v20;
      }
      while (v19 != v20);
      v18 += v20;
      if (a12)
      {
        unsigned int v23 = 0;
        do
        {
          uint64_t v24 = sub_19E2FDB30(a10, v23);
          uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 16))(v24);
          ++v23;
        }
        while (v19 != v23);
      }
      else
      {
        uint64_t result = sub_19E2FDB70(a10, v19);
        if (result)
        {
LABEL_35:
          uint64_t v33 = "***Error executing ThreadPool.run()";
          goto LABEL_37;
        }
      }
    }
    else
    {
      if (a12) {
        goto LABEL_2;
      }
      uint64_t result = sub_19E2FDB70(a10, v19);
      if (result) {
        goto LABEL_35;
      }
    }
    if (a13) {
      break;
    }
    if (v19)
    {
      unsigned int v28 = 0;
      do
      {
        sub_19E2FDB30(a10, v28);
        float32x4_t v29 = *(_DWORD **)(*(void *)(v37 + 120) + 40);
        v30.n128_u32[0] = v29[8];
        v31.n128_u32[0] = v29[9];
        uint64_t result = (*(uint64_t (**)(__n128, __n128))(*(void *)v29 + 336))(v30, v31);
        ++v28;
      }
      while (v19 != v28);
LABEL_31:
      if (v19)
      {
        unsigned int v32 = 0;
        do
          uint64_t result = sub_19E2FDB30(a10, v32++);
        while (v19 != v32);
      }
    }
LABEL_2:
    a4 -= v19;
    if (!a4) {
      return result;
    }
  }
  if (!v19)
  {
    if ((a12 & 1) == 0) {
      goto LABEL_30;
    }
    goto LABEL_2;
  }
  unsigned int v25 = 0;
  do
    *(unsigned char *)(sub_19E2FDB30(a10, v25++) + 208) = 1;
  while (v19 != v25);
  if (a12)
  {
    unsigned int v26 = 0;
    do
    {
      uint64_t v27 = sub_19E2FDB30(a10, v26);
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v27 + 16))(v27);
      ++v26;
    }
    while (v19 != v26);
    goto LABEL_31;
  }
LABEL_30:
  uint64_t result = sub_19E2FDB70(a10, v19);
  if (!result) {
    goto LABEL_31;
  }
  uint64_t v33 = "***Error execuring ThreadPool.run()";
LABEL_37:
  unint64_t v34 = sub_19E13DB94(MEMORY[0x1E4FBA250], (uint64_t)v33, 35);
  std::ios_base::getloc((const std::ios_base *)((char *)v34 + *(void *)(*v34 - 24)));
  uint64_t v35 = std::locale::use_facet(&v38, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v35->__vftable[2].~facet_0)(v35, 10);
  std::locale::~locale(&v38);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_19E16FBA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::locale a12)
{
}

void sub_19E16FBBC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, int a5, void *a6, uint64_t *a7, uint64_t a8, int a9, int a10, uint64_t a11, _DWORD **a12)
{
  uint64_t v15 = a10;
  uint64_t v17 = *a7;
  uint64_t v16 = a7[1];
  std::string __p = 0;
  unsigned int v28 = 0;
  float32x4_t v29 = 0;
  if (a10)
  {
    if (a10 < 0) {
      sub_19E13D694();
    }
    std::string __p = operator new(8 * a10);
    float32x4_t v29 = (char *)__p + 8 * a10;
    bzero(__p, 8 * a10);
    unsigned int v28 = v29;
  }
  uint64_t v18 = (((v16 - v17) << 30) - 0x100000000) >> 32;
  if (a5 < 1)
  {
    int v19 = 0;
  }
  else
  {
    int v19 = 0;
    uint64_t v20 = 0;
    float v21 = 1.1755e-38;
    do
    {
      float v22 = *(float *)(*(void *)(*a3 + 8 * v18) + 4 * v20);
      if (v22 > v21) {
        int v19 = v20;
      }
      float v21 = fmaxf(v22, v21);
      ++v20;
    }
    while (a5 != v20);
  }
  sub_19E16FD4C(*a6 + 8 * v18, (float32x4_t **)(*a6 + 8 * v18), a5, &__p, a10);
  if (v19 >= 1 && a10 >= 1)
  {
    uint64_t v24 = (int *)__p;
    unsigned int v25 = *a12;
    do
    {
      int v26 = *v24;
      v24 += 2;
      if (v26 == v19) {
        ++*v25;
      }
      ++v25;
      --v15;
    }
    while (v15);
  }
  if (__p)
  {
    unsigned int v28 = __p;
    operator delete(__p);
  }
}

void sub_19E16FD2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E16FD4C(uint64_t a1, float32x4_t **a2, int a3, void **a4, int a5)
{
  if (a5 <= a3) {
    int v6 = a3;
  }
  else {
    int v6 = a5;
  }
  unint64_t v7 = v6;
  std::string __p = 0;
  if (!v6)
  {
    uint64_t v10 = 0;
    unsigned int v11 = 0;
    goto LABEL_14;
  }
  if (v6 < 0) {
    sub_19E13D694();
  }
  size_t v9 = 2 * v6;
  uint64_t v10 = (float *)operator new(v9 * 4);
  std::string __p = v10;
  bzero(v10, 8 * v7);
  unsigned int v11 = &v10[v9];
  uint64_t v12 = *a2;
  if (v7 < 8 || v10 + 1 < &v12->f32[v7] && v12 < (float32x4_t *)&v10[2 * v7])
  {
    uint64_t v13 = 0;
LABEL_10:
    int v14 = &v10[2 * v13 + 1];
    do
    {
      *((_DWORD *)v14 - 1) = v13;
      *int v14 = v12->f32[v13];
      v14 += 2;
      ++v13;
    }
    while (v7 != v13);
    goto LABEL_14;
  }
  uint64_t v13 = v7 & 0xFFFFFFF8;
  std::locale v38 = v10 + 8;
  int32x4_t v39 = (int32x4_t)xmmword_19E351190;
  uint64_t v40 = v12 + 1;
  v41.i64[0] = 0x400000004;
  v41.i64[1] = 0x400000004;
  v42.i64[0] = 0x800000008;
  v42.i64[1] = 0x800000008;
  uint64_t v43 = v13;
  do
  {
    v48.val[0] = (float32x4_t)vaddq_s32(v39, v41);
    float32x4_t v44 = v40[-1];
    v48.val[1] = *v40;
    unint64_t v45 = v38 - 8;
    vst2q_f32(v45, *(float32x4x2_t *)v39.i8);
    vst2q_f32(v38, v48);
    int32x4_t v39 = vaddq_s32(v39, v42);
    v38 += 16;
    v40 += 2;
    v43 -= 8;
  }
  while (v43);
  if (v13 != v7) {
    goto LABEL_10;
  }
LABEL_14:
  if (&v10[2 * v7] != v11) {
    sub_19E235A3C(v10, &v10[2 * v7], v11);
  }
  unint64_t v15 = 126 - 2 * __clz(v7);
  if (v7) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  sub_19E235F0C(v10, (char *)&v10[2 * v7], (uint64_t)&v47, v16, 1);
  unint64_t v17 = ((unsigned char *)a4[1] - (unsigned char *)*a4) >> 3;
  if (v7 <= v17)
  {
    if (v7 < v17) {
      a4[1] = (char *)*a4 + 8 * v7;
    }
  }
  else
  {
    sub_19E1599BC(a4, v7 - v17);
  }
  if (v7)
  {
    uint64_t v18 = (char *)*a4;
    if (v7 >= 0xC)
    {
      uint64_t v19 = 0;
      unint64_t v25 = (unint64_t)&v18[8 * v7];
      unint64_t v26 = (unint64_t)&__p[2 * v7];
      unint64_t v27 = v26 - 4;
      BOOL v29 = (unint64_t)(v18 + 4) < v26 && (unint64_t)(__p + 1) < v25;
      if (((unint64_t)__p >= v25 - 4 || (unint64_t)v18 >= v27) && !v29)
      {
        uint64_t v19 = v7 & 0xFFFFFFF8;
        __n128 v31 = (long long *)(__p + 8);
        unsigned int v32 = v18 + 32;
        uint64_t v33 = v19;
        do
        {
          long long v35 = *(v31 - 2);
          long long v34 = *(v31 - 1);
          long long v37 = *v31;
          long long v36 = v31[1];
          v31 += 4;
          *(v32 - 2) = v35;
          *(v32 - 1) = v34;
          _OWORD *v32 = v37;
          v32[1] = v36;
          v32 += 4;
          v33 -= 8;
        }
        while (v33);
        if (v19 == v7) {
          goto LABEL_46;
        }
      }
    }
    else
    {
      uint64_t v19 = 0;
    }
    uint64_t v20 = (8 * v19) | 4;
    float v21 = &v18[v20];
    float v22 = (int *)((char *)__p + v20);
    uint64_t v23 = v7 - v19;
    do
    {
      *((_DWORD *)v21 - 1) = *(v22 - 1);
      int v24 = *v22;
      v22 += 2;
      *(_DWORD *)float v21 = v24;
      v21 += 8;
      --v23;
    }
    while (v23);
LABEL_46:
    operator delete(__p);
    return;
  }
  if (__p) {
    goto LABEL_46;
  }
}

void sub_19E16FFD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E170008(uint64_t a1, void *a2, void *a3, int a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v13 = a1;
  int v109 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8));
  (***(void (****)(void))(v13 + 8))(*(void *)(v13 + 8));
  int v14 = (*(uint64_t (**)(void))(**(void **)(*(void *)(*(void *)(v13 + 120) + 112) - 8) + 272))();
  uint64_t v125 = &unk_1EF0A5040;
  int v126 = v14;
  int v124 = 0;
  unint64_t v15 = (int *)operator new(4uLL);
  *unint64_t v15 = 0;
  v123[1] = v15 + 1;
  v123[2] = v15 + 1;
  long long v102 = v15;
  v123[0] = v15;
  float v122 = 0.0;
  uint64_t v119 = 0;
  uint64_t v120 = 0;
  uint64_t v121 = 0;
  uint64_t v116 = 0;
  uint64_t v117 = 0;
  uint64_t v118 = 0;
  sub_19E232360((uint64_t)&v119, 1uLL);
  sub_19E232360((uint64_t)&v116, 1uLL);
  int v16 = dword_1E9457D98;
  unint64_t v17 = dword_1E9457D98;
  unint64_t v18 = (uint64_t)(*((void *)v119 + 1) - *(void *)v119) >> 3;
  if (dword_1E9457D98 <= v18)
  {
    if (dword_1E9457D98 < v18) {
      *((void *)v119 + 1) = *(void *)v119 + 8 * dword_1E9457D98;
    }
  }
  else
  {
    sub_19E1599BC((void **)v119, dword_1E9457D98 - v18);
    int v16 = dword_1E9457D98;
    unint64_t v17 = dword_1E9457D98;
  }
  unint64_t v19 = (uint64_t)(*((void *)v116 + 1) - *(void *)v116) >> 3;
  size_t v106 = a2;
  if (v17 <= v19)
  {
    if (v17 < v19) {
      *((void *)v116 + 1) = *(void *)v116 + 8 * v17;
    }
  }
  else
  {
    sub_19E1599BC((void **)v116, v17 - v19);
    int v16 = dword_1E9457D98;
  }
  if (v16 >= 1)
  {
    uint64_t v20 = **(void **)(*(void *)(v13 + 120) + 104);
    (*(uint64_t (**)(uint64_t))(*(void *)v20 + 264))(v20);
    operator new[]();
  }
  int v101 = a4;
  if (a4 >= 1)
  {
    unsigned int v21 = a4;
    uint64_t v22 = 0;
    float v23 = 0.0;
    uint64_t v104 = v21;
    int v105 = a3;
    int v24 = a2;
    uint64_t v107 = v13;
    while (1)
    {
      uint64_t v26 = (*(void *)(*v24 + 24 * v22 + 8) - *(void *)(*v24 + 24 * v22)) >> 2;
      if (dword_1E9457D98 >= (int)v26) {
        uint64_t v27 = v26;
      }
      else {
        uint64_t v27 = dword_1E9457D98;
      }
      int v124 = 0;
      float v122 = 0.0;
      sub_19E16DA18(&__p, (int)v27);
      if (v109 != 1)
      {
        BOOL v29 = (char *)__p;
        unsigned int v28 = v115;
        if (v115 != __p)
        {
          __n128 v30 = v115;
          do
          {
            unsigned int v32 = (void *)*((void *)v30 - 3);
            v30 -= 24;
            __n128 v31 = v32;
            if (v32)
            {
              *((void *)v28 - 2) = v31;
              operator delete(v31);
            }
            unsigned int v28 = v30;
          }
          while (v30 != v29);
        }
        uint64_t v115 = v29;
      }
      if ((int)v27 >= 1) {
        break;
      }
LABEL_54:
      int v113 = 0;
      uint64_t v111 = 0;
      uint64_t v112 = 0;
      int v110 = 0;
      uint64_t v64 = *(void *)(v13 + 120);
      uint64_t v65 = v119;
      uint64_t v66 = (uint64_t *)v116;
      *(_DWORD *)(v64 + 12) = v27;
      uint64_t v67 = *v66;
      uint64_t v68 = v66[1];
      if (*(unsigned char *)(v64 + 16)) {
        BOOL v69 = v68 == v67;
      }
      else {
        BOOL v69 = 1;
      }
      if (!v69)
      {
        (*(void (**)(void, uint64_t *, void **, uint64_t, void))(**(void **)(*(void *)(v64 + 112) - 8)
                                                                            + 216))(*(void *)(*(void *)(v64 + 112) - 8), v66, &__p, v27, 0);
        uint64_t v67 = *v66;
        uint64_t v68 = v66[1];
      }
      if (v68 == v67)
      {
        if ((int)v27 >= 0x2000000) {
          int v70 = v27 & 0xFF000000;
        }
        else {
          int v70 = 0x1000000;
        }
        (*(void (**)(void, void *, void **, uint64_t, void, int *, void **))(**(void **)(v64 + 40)
                                                                                         + 304))(*(void *)(v64 + 40), v65, &__p, v70 & 0xFF000000 | v27 & 0xFFFFFF, 0, &v113, &v110);
      }
      else
      {
        v127[0] = 0;
        sub_19E2321A0(*(void *)(v64 + 40), (uint64_t)v65, (uint64_t)&__p, (uint64_t)v66, v27, (uint64_t)&v124, &v122, a6, (uint64_t)v127, 0, (uint64_t)&v113);
      }
      int32x4_t v71 = v116;
      uint64_t v72 = **(void **)(*(void *)(v13 + 120) + 104);
      (*(void (**)(uint64_t))(*(void *)v72 + 264))(v72);
      uint64_t v73 = *(void *)(*(void *)(*(void *)(v13 + 120) + 112) - 8);
      int v74 = (*(uint64_t (**)(uint64_t))(*(void *)v73 + 272))(v73);
      uint64_t v75 = *(void *)(*(void *)(*(void *)(v13 + 120) + 112) - 8);
      uint64_t v76 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v75 + 32))(v75);
      sub_19E16FBBC((uint64_t)v76, v77, v71, v78, v74, v76, (uint64_t *)(*v106 + 24 * v22), v79, v99, 1, v100, v123);
      float v80 = v122;
      if (v110)
      {
        uint64_t v111 = v110;
        operator delete(v110);
      }
      float32x4_t v81 = (char *)__p;
      a3 = v105;
      int v24 = v106;
      if (__p)
      {
        uint64_t v82 = v115;
        unint64_t v25 = __p;
        if (v115 != __p)
        {
          uint64_t v83 = v115;
          do
          {
            int v85 = (void *)*((void *)v83 - 3);
            v83 -= 24;
            int v84 = v85;
            if (v85)
            {
              *((void *)v82 - 2) = v84;
              operator delete(v84);
            }
            uint64_t v82 = v83;
          }
          while (v83 != v81);
          unint64_t v25 = __p;
        }
        uint64_t v115 = v81;
        operator delete(v25);
      }
      float v23 = v80 + v23;
      if (++v22 == v104) {
        goto LABEL_74;
      }
    }
    uint64_t v33 = 0;
    uint64_t v108 = v22;
    while (1)
    {
      uint64_t v35 = *(void *)v119;
      uint64_t v36 = **(void **)(*(void *)(v13 + 120) + 104);
      int v37 = (*(uint64_t (**)(uint64_t))(*(void *)v36 + 264))(v36);
      bzero(*(void **)(v35 + 8 * v33), 4 * v37);
      uint64_t v38 = *(void *)v116;
      int v39 = (*(uint64_t (**)(void))(**(void **)(*(void *)(*(void *)(v13 + 120) + 112) - 8) + 272))();
      bzero(*(void **)(v38 + 8 * v33), 4 * v39);
      (*(void (**)(void, void, uint64_t))(**(void **)(v13 + 8) + 8))(*(void *)(v13 + 8), *(unsigned int *)(*(void *)(*v24 + 24 * v22) + 4 * v33), *(void *)v119 + 8 * v33);
      uint64_t v40 = *(int *)(*(void *)(*a3 + 24 * v22) + 4 * v33);
      uint64_t v41 = *(void *)v116;
      bzero(*(void **)(*(void *)v116 + 8 * v33), 4 * v126);
      *(_DWORD *)(*(void *)(v41 + 8 * v33) + 4 * v40) = 1065353216;
      if (v109 != 1) {
        goto LABEL_30;
      }
      int32x4_t v42 = (char *)__p + 24 * v33;
      uint64_t v43 = *(void *)(*v24 + 24 * v22);
      unint64_t v45 = (char *)*((void *)v42 + 1);
      unint64_t v44 = *((void *)v42 + 2);
      if ((unint64_t)v45 >= v44) {
        break;
      }
      *(_DWORD *)unint64_t v45 = *(_DWORD *)(v43 + 4 * v33);
      uint64_t v34 = (uint64_t)(v45 + 4);
LABEL_29:
      *((void *)v42 + 1) = v34;
      uint64_t v13 = v107;
      uint64_t v22 = v108;
LABEL_30:
      if (++v33 == v27) {
        goto LABEL_54;
      }
    }
    unint64_t v46 = *(char **)v42;
    uint64_t v47 = (uint64_t)&v45[-*(void *)v42];
    uint64_t v48 = v47 >> 2;
    unint64_t v49 = (v47 >> 2) + 1;
    if (v49 >> 62) {
      sub_19E13D694();
    }
    uint64_t v50 = v44 - (void)v46;
    if (v50 >> 1 > v49) {
      unint64_t v49 = v50 >> 1;
    }
    if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v51 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v51 = v49;
    }
    if (v51)
    {
      if (v51 >> 62) {
        sub_19E13C418();
      }
      float32x4x2_t v52 = operator new(4 * v51);
      float32x4x2_t v53 = &v52[4 * v48];
      *float32x4x2_t v53 = *(_DWORD *)(v43 + 4 * v33);
      uint64_t v34 = (uint64_t)(v53 + 1);
      if (v45 != v46) {
        goto LABEL_42;
      }
    }
    else
    {
      float32x4x2_t v52 = 0;
      float32x4x2_t v53 = (_DWORD *)(4 * v48);
      *(_DWORD *)(4 * v48) = *(_DWORD *)(v43 + 4 * v33);
      uint64_t v34 = 4 * v48 + 4;
      if (v45 != v46)
      {
LABEL_42:
        unint64_t v54 = v45 - 4 - v46;
        if (v54 >= 0x2C)
        {
          unint64_t v55 = v45 - &v52[v47];
          int v24 = v106;
          if (v55 >= 0x20)
          {
            uint64_t v56 = (v54 >> 2) + 1;
            uint64_t v57 = 4 * (v56 & 0x7FFFFFFFFFFFFFF8);
            int v58 = &v45[-v57];
            float32x4x2_t v53 = (_DWORD *)((char *)v53 - v57);
            uint64_t v59 = &v52[4 * v48 - 16];
            uint64_t v60 = v45 - 16;
            uint64_t v61 = v56 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v62 = *(_OWORD *)v60;
              *(v59 - 1) = *((_OWORD *)v60 - 1);
              *uint64_t v59 = v62;
              v59 -= 2;
              v60 -= 32;
              v61 -= 8;
            }
            while (v61);
            unint64_t v45 = v58;
            if (v56 == (v56 & 0x7FFFFFFFFFFFFFF8)) {
              goto LABEL_51;
            }
          }
        }
        else
        {
          int v24 = v106;
        }
        do
        {
          int v63 = *((_DWORD *)v45 - 1);
          v45 -= 4;
          *--float32x4x2_t v53 = v63;
        }
        while (v45 != v46);
LABEL_51:
        *(void *)int32x4_t v42 = v53;
        *((void *)v42 + 1) = v34;
        *((void *)v42 + 2) = &v52[4 * v51];
        if (v46) {
          operator delete(v46);
        }
        a3 = v105;
        goto LABEL_29;
      }
    }
    int v24 = v106;
    goto LABEL_51;
  }
  float v23 = 0.0;
LABEL_74:
  float v86 = (float)*v102;
  *(float *)(a10 + 8) = v23;
  *(float *)(a10 + 12) = v23 / (float)v101;
  *(float *)(a10 + 4) = 100.0 - (float)((float)(v86 * 100.0) / (float)v101);
  *(_DWORD *)a10 = (int)(float)((float)v101 - v86);
  *(_DWORD *)(a10 + 16) = v101;
  float32x4_t v87 = (char *)v116;
  if (v116)
  {
    uint64_t v88 = v117;
    uint64_t v89 = v116;
    if (v117 != v116)
    {
      long long v90 = v117;
      do
      {
        uint64_t v92 = (void *)*((void *)v90 - 3);
        v90 -= 24;
        unsigned int v91 = v92;
        if (v92)
        {
          *((void *)v88 - 2) = v91;
          operator delete(v91);
        }
        uint64_t v88 = v90;
      }
      while (v90 != v87);
      uint64_t v89 = v116;
    }
    uint64_t v117 = v87;
    operator delete(v89);
  }
  uint64_t v93 = (char *)v119;
  if (v119)
  {
    uint64_t v94 = v120;
    char v95 = v119;
    if (v120 != v119)
    {
      float32x4x2_t v96 = v120;
      do
      {
        float32x4x2_t v98 = (void *)*((void *)v96 - 3);
        v96 -= 24;
        float32x4x2_t v97 = v98;
        if (v98)
        {
          *((void *)v94 - 2) = v97;
          operator delete(v97);
        }
        uint64_t v94 = v96;
      }
      while (v96 != v93);
      char v95 = v119;
    }
    uint64_t v120 = v93;
    operator delete(v95);
  }
  operator delete(v102);
}

void sub_19E170AA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31)
{
}

uint64_t sub_19E170B0C(uint64_t a1, int a2, void **a3)
{
  *((_DWORD *)*a3 + a2) = 1065353216;
  return 0;
}

uint64_t sub_19E170B54(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 120);
  if (v1) {
    return (*(uint64_t (**)(void))(**(void **)(v1 + 40) + 160))();
  }
  return result;
}

uint64_t sub_19E170B88(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_19E170BBC(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_19E170BF0(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (*(void *)a1)
  {
    if (*(unsigned char *)(a1 + 68))
    {
      uint64_t v3 = (char *)operator new(0x28uLL);
      int v4 = v3;
      strcpy(v3, "do-not-us-this-path,from-raw-buffer");
      uint64_t v5 = *(unsigned __int8 *)(a1 + 39);
      if ((v5 & 0x80u) == 0) {
        uint64_t v6 = *(unsigned __int8 *)(a1 + 39);
      }
      else {
        uint64_t v6 = *(void *)(a1 + 24);
      }
      if (v6 != 35)
      {
LABEL_20:
        operator delete(v3);
LABEL_21:
        munmap(*(void **)a1, *(void *)(a1 + 8));
        goto LABEL_22;
      }
      unint64_t v7 = (const void **)(a1 + 16);
      if ((v5 & 0x80) == 0)
      {
        if (!*(unsigned char *)(a1 + 39))
        {
LABEL_12:
          operator delete(v3);
          goto LABEL_22;
        }
        uint64_t v8 = v3;
        while (*(unsigned __int8 *)v7 == *v8)
        {
          unint64_t v7 = (const void **)((char *)v7 + 1);
          ++v8;
          if (!--v5) {
            goto LABEL_12;
          }
        }
        goto LABEL_20;
      }
      int v13 = memcmp(*v7, v3, *(void *)(a1 + 24));
      operator delete(v4);
      if (v13) {
        goto LABEL_21;
      }
    }
    else
    {
      if (*(_DWORD *)(a1 + 64) != 2) {
        goto LABEL_19;
      }
      size_t v9 = (const char *)(a1 + 16);
      if (*(char *)(a1 + 39) < 0) {
        size_t v9 = *(const char **)v9;
      }
      int v10 = open(v9, 2);
      int v11 = v10;
      uint64_t v2 = *(void **)a1;
      if ((v10 & 0x80000000) == 0)
      {
        write(v10, v2, *(void *)(a1 + 8));
        close(v11);
        uint64_t v2 = *(void **)a1;
      }
      if (v2) {
LABEL_19:
      }
        operator delete[](v2);
    }
  }
LABEL_22:
  if (*(char *)(a1 + 63) < 0)
  {
    operator delete(*(void **)(a1 + 40));
    if ((*(char *)(a1 + 39) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((*(char *)(a1 + 39) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t sub_19E170D78(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t sub_19E170D80()
{
  return 1;
}

uint64_t sub_19E170D88()
{
  return 1;
}

uint64_t sub_19E170D98(uint64_t result, uint64_t a2)
{
  if (result != a2) {
    *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  }
  return result;
}

uint64_t sub_19E170DAC(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 56) = a3;
  *(_OWORD *)(a1 + 64) = xmmword_19E3513A0;
  *(void *)(a1 + 80) = 0x100000001;
  *(_DWORD *)(a1 + 88) = 32;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 48) = a2[4];
  *(_DWORD *)(a1 + 32) = a2[17];
  int v4 = a2[12];
  if (v4 == 8)
  {
    sub_19E1868D4(a1);
  }
  else if (v4 == 16)
  {
    sub_19E170E60(a1);
  }
  else
  {
    sub_19E19C348(a1);
  }
  return a1;
}

void sub_19E170E40(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 112) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

#error "19E170E60: too big function (funcsize=0)"

void sub_19E184AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  operator delete(v19);
  uint64_t v22 = (void *)STACK[0x218];
  if (STACK[0x218])
  {
    STACK[0x220] = (unint64_t)v22;
    operator delete(v22);
  }
  float v23 = (void *)STACK[0x260];
  if (STACK[0x260])
  {
    STACK[0x268] = (unint64_t)v23;
    operator delete(v23);
    int v24 = (void *)STACK[0x278];
    if (!STACK[0x278])
    {
LABEL_5:
      unint64_t v25 = (void *)STACK[0x290];
      if (!STACK[0x290])
      {
LABEL_10:
        uint64_t v26 = (void *)STACK[0x2D8];
        if (STACK[0x2D8])
        {
          STACK[0x2E0] = (unint64_t)v26;
          operator delete(v26);
          uint64_t v27 = (void *)STACK[0x2F0];
          if (!STACK[0x2F0]) {
            goto LABEL_16;
          }
        }
        else
        {
          uint64_t v27 = (void *)STACK[0x2F0];
          if (!STACK[0x2F0])
          {
LABEL_16:
            unsigned int v28 = (void *)STACK[0x9C8];
            if (!STACK[0x9C8]) {
              goto LABEL_18;
            }
            goto LABEL_17;
          }
        }
        STACK[0x2F8] = (unint64_t)v27;
        operator delete(v27);
        unsigned int v28 = (void *)STACK[0x9C8];
        if (!STACK[0x9C8]) {
          goto LABEL_18;
        }
LABEL_17:
        STACK[0x9D0] = (unint64_t)v28;
        operator delete(v28);
LABEL_18:
        BOOL v29 = *(void **)(v20 - 208);
        if (v29)
        {
          *(void *)(v20 - 200) = v29;
          operator delete(v29);
        }
        __n128 v30 = *(void **)(v20 - 136);
        if (v30)
        {
          *(void *)(v20 - 128) = v30;
          operator delete(v30);
        }
        operator delete(a18);
        operator delete(a19);
        _Unwind_Resume(a1);
      }
LABEL_9:
      STACK[0x298] = (unint64_t)v25;
      operator delete(v25);
      goto LABEL_10;
    }
  }
  else
  {
    int v24 = (void *)STACK[0x278];
    if (!STACK[0x278]) {
      goto LABEL_5;
    }
  }
  STACK[0x280] = (unint64_t)v24;
  operator delete(v24);
  unint64_t v25 = (void *)STACK[0x290];
  if (!STACK[0x290]) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

#error "19E1868D4: too big function (funcsize=0)"

void sub_19E19A564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  operator delete(v19);
  uint64_t v22 = (void *)STACK[0x218];
  if (STACK[0x218])
  {
    STACK[0x220] = (unint64_t)v22;
    operator delete(v22);
  }
  float v23 = (void *)STACK[0x260];
  if (STACK[0x260])
  {
    STACK[0x268] = (unint64_t)v23;
    operator delete(v23);
    int v24 = (void *)STACK[0x278];
    if (!STACK[0x278])
    {
LABEL_5:
      unint64_t v25 = (void *)STACK[0x290];
      if (!STACK[0x290])
      {
LABEL_10:
        uint64_t v26 = (void *)STACK[0x2D8];
        if (STACK[0x2D8])
        {
          STACK[0x2E0] = (unint64_t)v26;
          operator delete(v26);
          uint64_t v27 = (void *)STACK[0x2F0];
          if (!STACK[0x2F0]) {
            goto LABEL_16;
          }
        }
        else
        {
          uint64_t v27 = (void *)STACK[0x2F0];
          if (!STACK[0x2F0])
          {
LABEL_16:
            unsigned int v28 = (void *)STACK[0x9C8];
            if (!STACK[0x9C8]) {
              goto LABEL_18;
            }
            goto LABEL_17;
          }
        }
        STACK[0x2F8] = (unint64_t)v27;
        operator delete(v27);
        unsigned int v28 = (void *)STACK[0x9C8];
        if (!STACK[0x9C8]) {
          goto LABEL_18;
        }
LABEL_17:
        STACK[0x9D0] = (unint64_t)v28;
        operator delete(v28);
LABEL_18:
        BOOL v29 = *(void **)(v20 - 208);
        if (v29)
        {
          *(void *)(v20 - 200) = v29;
          operator delete(v29);
        }
        __n128 v30 = *(void **)(v20 - 136);
        if (v30)
        {
          *(void *)(v20 - 128) = v30;
          operator delete(v30);
        }
        operator delete(a18);
        operator delete(a19);
        _Unwind_Resume(a1);
      }
LABEL_9:
      STACK[0x298] = (unint64_t)v25;
      operator delete(v25);
      goto LABEL_10;
    }
  }
  else
  {
    int v24 = (void *)STACK[0x278];
    if (!STACK[0x278]) {
      goto LABEL_5;
    }
  }
  STACK[0x280] = (unint64_t)v24;
  operator delete(v24);
  unint64_t v25 = (void *)STACK[0x290];
  if (!STACK[0x290]) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

#error "19E19C348: too big function (funcsize=0)"

void sub_19E1AFFD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  operator delete(v19);
  uint64_t v22 = (void *)STACK[0x218];
  if (STACK[0x218])
  {
    STACK[0x220] = (unint64_t)v22;
    operator delete(v22);
  }
  float v23 = (void *)STACK[0x260];
  if (STACK[0x260])
  {
    STACK[0x268] = (unint64_t)v23;
    operator delete(v23);
    int v24 = (void *)STACK[0x278];
    if (!STACK[0x278])
    {
LABEL_5:
      unint64_t v25 = (void *)STACK[0x290];
      if (!STACK[0x290])
      {
LABEL_10:
        uint64_t v26 = (void *)STACK[0x2D8];
        if (STACK[0x2D8])
        {
          STACK[0x2E0] = (unint64_t)v26;
          operator delete(v26);
          uint64_t v27 = (void *)STACK[0x2F0];
          if (!STACK[0x2F0]) {
            goto LABEL_16;
          }
        }
        else
        {
          uint64_t v27 = (void *)STACK[0x2F0];
          if (!STACK[0x2F0])
          {
LABEL_16:
            unsigned int v28 = (void *)STACK[0x9C8];
            if (!STACK[0x9C8]) {
              goto LABEL_18;
            }
            goto LABEL_17;
          }
        }
        STACK[0x2F8] = (unint64_t)v27;
        operator delete(v27);
        unsigned int v28 = (void *)STACK[0x9C8];
        if (!STACK[0x9C8]) {
          goto LABEL_18;
        }
LABEL_17:
        STACK[0x9D0] = (unint64_t)v28;
        operator delete(v28);
LABEL_18:
        BOOL v29 = *(void **)(v20 - 208);
        if (v29)
        {
          *(void *)(v20 - 200) = v29;
          operator delete(v29);
        }
        __n128 v30 = *(void **)(v20 - 136);
        if (v30)
        {
          *(void *)(v20 - 128) = v30;
          operator delete(v30);
        }
        operator delete(a18);
        operator delete(a19);
        _Unwind_Resume(a1);
      }
LABEL_9:
      STACK[0x298] = (unint64_t)v25;
      operator delete(v25);
      goto LABEL_10;
    }
  }
  else
  {
    int v24 = (void *)STACK[0x278];
    if (!STACK[0x278]) {
      goto LABEL_5;
    }
  }
  STACK[0x280] = (unint64_t)v24;
  operator delete(v24);
  unint64_t v25 = (void *)STACK[0x290];
  if (!STACK[0x290]) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void sub_19E1B1DBC(uint64_t a1, int a2, int a3, _DWORD **a4, int a5, int a6, uint64_t a7, int a8, uint64_t a9, char a10)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF0A69E8;
  *(_DWORD *)(a1 + 44) = a2;
  *(_DWORD *)(a1 + 52) = a3;
  *(_DWORD *)(a1 + 56) = a6;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(unsigned char *)(a1 + 1072) = 0;
  *(unsigned char *)(a1 + 1192) = 0;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(unsigned char *)(a1 + 1312) = 0;
  *(_OWORD *)(a1 + 1296) = 0u;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1368) = 0u;
  *(_OWORD *)(a1 + 1384) = 0u;
  *(_OWORD *)(a1 + 1400) = 0u;
  *(_OWORD *)(a1 + 1416) = 0u;
  *(unsigned char *)(a1 + 1432) = 0;
  bzero((void *)(a1 + 64), 0x2A0uLL);
  *(_OWORD *)(a1 + 988) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1108) = 0u;
  *(_OWORD *)(a1 + 1228) = 0u;
  *(_OWORD *)(a1 + 1216) = 0u;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(_OWORD *)(a1 + 1348) = 0u;
  *(_OWORD *)(a1 + 1320) = 0u;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_OWORD *)(a1 + 1536) = 0u;
  *(_OWORD *)(a1 + 1520) = 0u;
  *(_OWORD *)(a1 + 1504) = 0u;
  *(_OWORD *)(a1 + 1488) = 0u;
  *(_OWORD *)(a1 + 1472) = 0u;
  *(_OWORD *)(a1 + 1456) = 0u;
  *(_OWORD *)(a1 + 1440) = 0u;
  *(_OWORD *)(a1 + 1640) = 0u;
  *(_OWORD *)(a1 + 1656) = 0u;
  *(_OWORD *)(a1 + 1672) = 0u;
  *(void *)(a1 + 1688) = 0;
  sub_19E3030A0(a1 + 1704);
  sub_19E3030A0(a1 + 1776);
  sub_19E3030A0(a1 + 1848);
  sub_19E3030A0(a1 + 1920);
  sub_19E3030A0(a1 + 1992);
  sub_19E3030A0(a1 + 2064);
  sub_19E3030A0(a1 + 2136);
  sub_19E3030A0(a1 + 2208);
  sub_19E3030A0(a1 + 2280);
  sub_19E3030A0(a1 + 2352);
  sub_19E3030A0(a1 + 2424);
  *(_DWORD *)(a1 + 2496) = a5;
  *(_OWORD *)(a1 + 2624) = 0u;
  *(_OWORD *)(a1 + 2640) = 0u;
  *(_OWORD *)(a1 + 2656) = 0u;
  (*(void (**)(uint64_t))(*(void *)a1 + 192))(a1);
  int v14 = *(unsigned __int8 *)(a7 + 45);
  *(unsigned char *)(a1 + 2692) = v14 ^ 1;
  *(unsigned char *)(a1 + 2672) = 0;
  *(unsigned char *)(a1 + 41) = 0;
  *(void *)(a1 + 2680) = a9;
  if (a9)
  {
    int v15 = *(unsigned __int8 *)(a9 + 376);
    *(_DWORD *)(a1 + 2688) = *(_DWORD *)(a9 + 28);
    nullsub_171("LSTM constructor");
    int v16 = v15 ^ 1;
    a8 = *(unsigned __int8 *)(*(void *)(a1 + 2680) + 376);
    *(unsigned char *)(a1 + 40) = a8;
    int v14 = *(unsigned __int8 *)(a7 + 45);
  }
  else
  {
    int v16 = 1;
    *(_DWORD *)(a1 + 2688) = 1;
    *(unsigned char *)(a1 + 40) = a8;
  }
  *(unsigned char *)(a1 + 1696) = v14;
  *(unsigned char *)(a1 + 1697) = *(unsigned char *)(a7 + 46);
  unint64_t v17 = *a4;
  *(_DWORD *)(a1 + 736) = **a4;
  *(_DWORD *)(a1 + 740) = v17[1];
  *(_DWORD *)(a1 + 744) = v17[2];
  if (!a8) {
    int v16 = 0;
  }
  *(_DWORD *)(a1 + 48) = v16 + *(_DWORD *)(a1 + 44);
  if (a10)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
    *(unsigned char *)(a1 + 2672) = 1;
    int v14 = *(unsigned __int8 *)(a1 + 1696);
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a7 + 16);
  *(_OWORD *)(a1 + 1552) = 0u;
  *(_OWORD *)(a1 + 1568) = 0u;
  *(_OWORD *)(a1 + 1584) = 0u;
  *(_OWORD *)(a1 + 1600) = 0u;
  *(_OWORD *)(a1 + 1616) = 0u;
  *(void *)(a1 + 1632) = 0;
  if (!v14)
  {
    int v18 = *(_DWORD *)(a7 + 32);
    switch(v18)
    {
      case 2:
        operator new();
      case 1:
        operator new();
      case 0:
        operator new();
    }
  }
  strcpy((char *)operator new(0x20uLL), "LSTM alloc, from constructor");
  sub_19E1B3104();
}

void sub_19E1B2BCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, void **a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  operator delete(v57);
  float32x4x2_t v98 = (void **)(v56 + 328);
  int v99 = (void *)v56[331];
  if (v99)
  {
    v56[332] = v99;
    operator delete(v99);
    uint64_t v65 = *v98;
    if (!*v98)
    {
LABEL_6:
      sub_19E3030E8(v62);
      sub_19E3030E8(v58);
      sub_19E3030E8(a9);
      sub_19E3030E8(a10);
      sub_19E3030E8(a11);
      sub_19E3030E8(a12);
      sub_19E3030E8(v63);
      sub_19E3030E8(v61);
      sub_19E3030E8(v60);
      sub_19E3030E8(v59);
      sub_19E3030E8(a13);
      sub_19E1C6038(a15);
      sub_19E1C6038(a16);
      sub_19E1C6038(a14);
      sub_19E1C6038(a17);
      uint64_t v66 = (void *)v56[120];
      if (v66)
      {
        v56[121] = v66;
        operator delete(v66);
        uint64_t v67 = (void *)v56[117];
        if (!v67)
        {
LABEL_8:
          uint64_t v68 = (void *)v56[114];
          if (!v68) {
            goto LABEL_9;
          }
          goto LABEL_40;
        }
      }
      else
      {
        uint64_t v67 = (void *)v56[117];
        if (!v67) {
          goto LABEL_8;
        }
      }
      v56[118] = v67;
      operator delete(v67);
      uint64_t v68 = (void *)v56[114];
      if (!v68)
      {
LABEL_9:
        BOOL v69 = (void *)v56[111];
        if (!v69) {
          goto LABEL_10;
        }
        goto LABEL_41;
      }
LABEL_40:
      v56[115] = v68;
      operator delete(v68);
      BOOL v69 = (void *)v56[111];
      if (!v69)
      {
LABEL_10:
        int v70 = (void *)v56[108];
        if (!v70) {
          goto LABEL_11;
        }
        goto LABEL_42;
      }
LABEL_41:
      v56[112] = v69;
      operator delete(v69);
      int v70 = (void *)v56[108];
      if (!v70)
      {
LABEL_11:
        int32x4_t v71 = (void *)v56[105];
        if (!v71) {
          goto LABEL_12;
        }
        goto LABEL_43;
      }
LABEL_42:
      v56[109] = v70;
      operator delete(v70);
      int32x4_t v71 = (void *)v56[105];
      if (!v71)
      {
LABEL_12:
        uint64_t v72 = (void *)v56[102];
        if (!v72) {
          goto LABEL_13;
        }
        goto LABEL_44;
      }
LABEL_43:
      v56[106] = v71;
      operator delete(v71);
      uint64_t v72 = (void *)v56[102];
      if (!v72)
      {
LABEL_13:
        uint64_t v73 = (void *)v56[99];
        if (!v73) {
          goto LABEL_14;
        }
        goto LABEL_45;
      }
LABEL_44:
      v56[103] = v72;
      operator delete(v72);
      uint64_t v73 = (void *)v56[99];
      if (!v73)
      {
LABEL_14:
        int v74 = (void *)v56[89];
        if (!v74) {
          goto LABEL_15;
        }
        goto LABEL_46;
      }
LABEL_45:
      v56[100] = v73;
      operator delete(v73);
      int v74 = (void *)v56[89];
      if (!v74)
      {
LABEL_15:
        uint64_t v75 = (void *)v56[86];
        if (!v75) {
          goto LABEL_16;
        }
        goto LABEL_47;
      }
LABEL_46:
      v56[90] = v74;
      operator delete(v74);
      uint64_t v75 = (void *)v56[86];
      if (!v75)
      {
LABEL_16:
        uint64_t v76 = (void *)v56[83];
        if (!v76) {
          goto LABEL_17;
        }
        goto LABEL_48;
      }
LABEL_47:
      v56[87] = v75;
      operator delete(v75);
      uint64_t v76 = (void *)v56[83];
      if (!v76)
      {
LABEL_17:
        uint64_t v77 = (void *)v56[80];
        if (!v77) {
          goto LABEL_18;
        }
        goto LABEL_49;
      }
LABEL_48:
      v56[84] = v76;
      operator delete(v76);
      uint64_t v77 = (void *)v56[80];
      if (!v77)
      {
LABEL_18:
        uint64_t v78 = (void *)v56[77];
        if (!v78) {
          goto LABEL_19;
        }
        goto LABEL_50;
      }
LABEL_49:
      v56[81] = v77;
      operator delete(v77);
      uint64_t v78 = (void *)v56[77];
      if (!v78)
      {
LABEL_19:
        uint64_t v79 = (void *)v56[74];
        if (!v79) {
          goto LABEL_20;
        }
        goto LABEL_51;
      }
LABEL_50:
      v56[78] = v78;
      operator delete(v78);
      uint64_t v79 = (void *)v56[74];
      if (!v79)
      {
LABEL_20:
        float v80 = (void *)v56[71];
        if (!v80) {
          goto LABEL_21;
        }
        goto LABEL_52;
      }
LABEL_51:
      v56[75] = v79;
      operator delete(v79);
      float v80 = (void *)v56[71];
      if (!v80)
      {
LABEL_21:
        float32x4_t v81 = (void *)v56[68];
        if (!v81) {
          goto LABEL_22;
        }
        goto LABEL_53;
      }
LABEL_52:
      v56[72] = v80;
      operator delete(v80);
      float32x4_t v81 = (void *)v56[68];
      if (!v81)
      {
LABEL_22:
        uint64_t v82 = (void *)v56[65];
        if (!v82) {
          goto LABEL_23;
        }
        goto LABEL_54;
      }
LABEL_53:
      v56[69] = v81;
      operator delete(v81);
      uint64_t v82 = (void *)v56[65];
      if (!v82)
      {
LABEL_23:
        uint64_t v83 = (void *)v56[62];
        if (!v83) {
          goto LABEL_24;
        }
        goto LABEL_55;
      }
LABEL_54:
      v56[66] = v82;
      operator delete(v82);
      uint64_t v83 = (void *)v56[62];
      if (!v83)
      {
LABEL_24:
        int v84 = (void *)v56[59];
        if (!v84) {
          goto LABEL_25;
        }
        goto LABEL_56;
      }
LABEL_55:
      v56[63] = v83;
      operator delete(v83);
      int v84 = (void *)v56[59];
      if (!v84)
      {
LABEL_25:
        int v85 = (void *)v56[56];
        if (!v85) {
          goto LABEL_26;
        }
        goto LABEL_57;
      }
LABEL_56:
      v56[60] = v84;
      operator delete(v84);
      int v85 = (void *)v56[56];
      if (!v85)
      {
LABEL_26:
        float v86 = (void *)v56[53];
        if (!v86) {
          goto LABEL_27;
        }
        goto LABEL_58;
      }
LABEL_57:
      v56[57] = v85;
      operator delete(v85);
      float v86 = (void *)v56[53];
      if (!v86)
      {
LABEL_27:
        float32x4_t v87 = (void *)v56[50];
        if (!v87) {
          goto LABEL_28;
        }
        goto LABEL_59;
      }
LABEL_58:
      v56[54] = v86;
      operator delete(v86);
      float32x4_t v87 = (void *)v56[50];
      if (!v87)
      {
LABEL_28:
        uint64_t v88 = (void **)(v56 + 26);
        uint64_t v89 = (void *)v56[47];
        if (!v89) {
          goto LABEL_29;
        }
        goto LABEL_60;
      }
LABEL_59:
      v56[51] = v87;
      operator delete(v87);
      uint64_t v88 = (void **)(v56 + 26);
      uint64_t v89 = (void *)v56[47];
      if (!v89)
      {
LABEL_29:
        long long v90 = (void *)v56[44];
        if (!v90) {
          goto LABEL_30;
        }
        goto LABEL_61;
      }
LABEL_60:
      v56[48] = v89;
      operator delete(v89);
      long long v90 = (void *)v56[44];
      if (!v90)
      {
LABEL_30:
        sub_19E14315C(v88);
        unsigned int v91 = (void *)v56[23];
        if (!v91) {
          goto LABEL_31;
        }
        goto LABEL_62;
      }
LABEL_61:
      v56[45] = v90;
      operator delete(v90);
      sub_19E14315C(v88);
      unsigned int v91 = (void *)v56[23];
      if (!v91)
      {
LABEL_31:
        uint64_t v92 = (void *)v56[20];
        if (!v92) {
          goto LABEL_32;
        }
        goto LABEL_63;
      }
LABEL_62:
      v56[24] = v91;
      operator delete(v91);
      uint64_t v92 = (void *)v56[20];
      if (!v92)
      {
LABEL_32:
        uint64_t v93 = (void *)v56[17];
        if (!v93) {
          goto LABEL_33;
        }
        goto LABEL_64;
      }
LABEL_63:
      v56[21] = v92;
      operator delete(v92);
      uint64_t v93 = (void *)v56[17];
      if (!v93)
      {
LABEL_33:
        uint64_t v94 = (void *)v56[14];
        if (!v94) {
          goto LABEL_34;
        }
        goto LABEL_65;
      }
LABEL_64:
      v56[18] = v93;
      operator delete(v93);
      uint64_t v94 = (void *)v56[14];
      if (!v94)
      {
LABEL_34:
        char v95 = (void *)v56[11];
        if (!v95) {
          goto LABEL_35;
        }
        goto LABEL_66;
      }
LABEL_65:
      v56[15] = v94;
      operator delete(v94);
      char v95 = (void *)v56[11];
      if (!v95)
      {
LABEL_35:
        float32x4x2_t v96 = *a18;
        if (!*a18) {
          goto LABEL_36;
        }
        goto LABEL_67;
      }
LABEL_66:
      v56[12] = v95;
      operator delete(v95);
      float32x4x2_t v96 = *a18;
      if (!*a18)
      {
LABEL_36:
        *uint64_t v56 = a19;
        float32x4x2_t v97 = (void *)v56[1];
        if (!v97) {
          goto LABEL_37;
        }
        goto LABEL_68;
      }
LABEL_67:
      v56[9] = v96;
      operator delete(v96);
      *uint64_t v56 = a19;
      float32x4x2_t v97 = (void *)v56[1];
      if (!v97) {
LABEL_37:
      }
        _Unwind_Resume(a1);
LABEL_68:
      v56[2] = v97;
      operator delete(v97);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v65 = *v98;
    if (!*v98) {
      goto LABEL_6;
    }
  }
  v56[329] = v65;
  operator delete(v65);
  goto LABEL_6;
}

void sub_19E1B3104()
{
}

void sub_19E1BA15C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_19E1C6038((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19E1BA170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_19E1C6038((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19E1BA184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_19E1C6038((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19E1BA198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_19E1C6038((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E1BA1AC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 41);
}

uint64_t sub_19E1BA1B4(uint64_t result)
{
  *(unsigned char *)(result + 41) = 1;
  return result;
}

void sub_19E1BA1C0()
{
}

uint64_t sub_19E1BA1D4(uint64_t a1)
{
  return a1 + 64;
}

uint64_t *sub_19E1BA1DC(void *a1)
{
  uint64_t v2 = a1 + 99;
  uint64_t v3 = a1[20];
  uint64_t v4 = a1[21];
  unint64_t v5 = (v4 - v3) >> 3;
  uint64_t v6 = a1[99];
  unint64_t v7 = (a1[100] - v6) >> 3;
  if (v5 <= v7)
  {
    if (v5 < v7) {
      a1[100] = v6 + 8 * v5;
    }
  }
  else
  {
    sub_19E1599BC((void **)a1 + 99, v5 - v7);
    uint64_t v3 = a1[20];
    uint64_t v4 = a1[21];
    unint64_t v5 = (v4 - v3) >> 3;
  }
  if (v4 != v3)
  {
    uint64_t v8 = *v2;
    if (v5 <= 1) {
      unint64_t v9 = 1;
    }
    else {
      unint64_t v9 = v5;
    }
    if (v9 < 4)
    {
      unint64_t v10 = 0;
LABEL_14:
      int v15 = (void *)(v8 + 8 * v10);
      int v16 = (uint64_t *)(v3 + 8 * v10);
      unint64_t v17 = v9 - v10;
      do
      {
        uint64_t v18 = *v16++;
        *v15++ = v18;
        --v17;
      }
      while (v17);
      return v2;
    }
    unint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFCLL;
    int v11 = (long long *)(v3 + 16);
    uint64_t v12 = (_OWORD *)(v8 + 16);
    unint64_t v13 = v9 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      long long v14 = *v11;
      *(v12 - 1) = *(v11 - 1);
      _OWORD *v12 = v14;
      v11 += 2;
      v12 += 2;
      v13 -= 4;
    }
    while (v13);
    if (v9 != v10) {
      goto LABEL_14;
    }
  }
  return v2;
}

void sub_19E1BA2C0()
{
}

uint64_t sub_19E1BA2D4(uint64_t a1)
{
  return a1 + 816;
}

uint64_t sub_19E1BA2DC()
{
  return 0;
}

unsigned char *sub_19E1BA2E4(uint64_t a1, uint64_t a2, int *a3, int a4)
{
  if (!a2) {
LABEL_21:
  }
    sub_19E2F6320(3);
  int v7 = *(_DWORD *)(a2 + 72);
  uint64_t v8 = *(void *)a2;
  unint64_t v9 = (int *)(*(void *)a2 + v7);
  unint64_t v10 = *(void *)a2 + *(void *)(a2 + 8) - 4;
  if ((unint64_t)v9 <= v10)
  {
    int v11 = *v9;
    v7 += 4;
    *(_DWORD *)(a2 + 72) = v7;
    uint64_t v12 = (int *)(v8 + v7);
    if ((unint64_t)v12 <= v10)
    {
LABEL_4:
      int v13 = *v12;
      v7 += 4;
      *(_DWORD *)(a2 + 72) = v7;
      if (a4 < 1) {
        goto LABEL_16;
      }
LABEL_8:
      uint64_t v14 = v7;
      int v15 = (int *)(v8 + v7);
      if ((unint64_t)v15 <= v10)
      {
        int v19 = *v15;
        v7 += 4;
        *(_DWORD *)(a2 + 72) = v7;
        uint64_t v14 = v7;
        *(_DWORD *)(a1 + 736) = v19;
        uint64_t v20 = (int *)(v8 + v7);
        if ((unint64_t)v20 <= v10)
        {
          int v16 = *v20;
          v7 += 4;
          *(_DWORD *)(a2 + 72) = v7;
          *(_DWORD *)(a1 + 740) = v16;
          unint64_t v17 = (int *)(v8 + v7);
          if ((unint64_t)v17 > v10)
          {
LABEL_14:
            int v18 = 0;
            goto LABEL_15;
          }
LABEL_11:
          int v18 = *v17;
          *(_DWORD *)(a2 + 72) = v7 + 4;
LABEL_15:
          *(_DWORD *)(a1 + 744) = v18;
          goto LABEL_16;
        }
      }
      else
      {
        *(_DWORD *)(a1 + 736) = 0;
      }
      *(_DWORD *)(a1 + 740) = 0;
      unint64_t v17 = (int *)(v8 + v14);
      if ((unint64_t)v17 > v10) {
        goto LABEL_14;
      }
      goto LABEL_11;
    }
  }
  else
  {
    int v11 = 0;
    uint64_t v12 = (int *)(v8 + v7);
    if ((unint64_t)v12 <= v10) {
      goto LABEL_4;
    }
  }
  int v13 = 0;
  if (a4 >= 1) {
    goto LABEL_8;
  }
LABEL_16:
  if (*(_DWORD *)(a1 + 52) != v11 || *(_DWORD *)(a1 + 48) != v13) {
    goto LABEL_21;
  }
  unsigned int v21 = *(unsigned char **)(a1 + 2568);
  int v22 = *a3;
  int v23 = *(unsigned __int8 *)(a1 + 1697);
  int v24 = sub_19E2F62F8();
  sub_19E1C6130(v21, (uint64_t *)a2, v22, v23, v24, *(_DWORD *)(a1 + 52));
  unint64_t v25 = *(unsigned char **)(a1 + 2576);
  int v26 = *a3;
  int v27 = *(unsigned __int8 *)(a1 + 1697);
  int v28 = sub_19E2F62F8();
  sub_19E1C6130(v25, (uint64_t *)a2, v26, v27, v28, *(_DWORD *)(a1 + 52));
  BOOL v29 = *(unsigned char **)(a1 + 2584);
  int v30 = *a3;
  int v31 = *(unsigned __int8 *)(a1 + 1697);
  int v32 = sub_19E2F62F8();
  sub_19E1C6130(v29, (uint64_t *)a2, v30, v31, v32, *(_DWORD *)(a1 + 52));
  uint64_t v33 = *(unsigned char **)(a1 + 2504);
  int v34 = *a3;
  int v35 = *(unsigned __int8 *)(a1 + 1697);
  int v36 = sub_19E2F62F8();
  sub_19E1C632C(v33, (uint64_t *)a2, v34, v35, v36, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
  int v37 = *(unsigned char **)(a1 + 2512);
  int v38 = *a3;
  int v39 = *(unsigned __int8 *)(a1 + 1697);
  int v40 = sub_19E2F62F8();
  sub_19E1C632C(v37, (uint64_t *)a2, v38, v39, v40, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
  uint64_t v41 = *(unsigned char **)(a1 + 2520);
  int v42 = *a3;
  int v43 = *(unsigned __int8 *)(a1 + 1697);
  int v44 = sub_19E2F62F8();
  sub_19E1C632C(v41, (uint64_t *)a2, v42, v43, v44, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
  unint64_t v45 = *(unsigned char **)(a1 + 2528);
  int v46 = *a3;
  int v47 = *(unsigned __int8 *)(a1 + 1697);
  int v48 = sub_19E2F62F8();
  sub_19E1C632C(v45, (uint64_t *)a2, v46, v47, v48, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
  unint64_t v49 = *(unsigned char **)(a1 + 2536);
  int v50 = *a3;
  int v51 = *(unsigned __int8 *)(a1 + 1697);
  int v52 = sub_19E2F62F8();
  sub_19E1C632C(v49, (uint64_t *)a2, v50, v51, v52, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52));
  float32x4x2_t v53 = *(unsigned char **)(a1 + 2544);
  int v54 = *a3;
  int v55 = *(unsigned __int8 *)(a1 + 1697);
  int v56 = sub_19E2F62F8();
  sub_19E1C632C(v53, (uint64_t *)a2, v54, v55, v56, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52));
  uint64_t v57 = *(unsigned char **)(a1 + 2552);
  int v58 = *a3;
  int v59 = *(unsigned __int8 *)(a1 + 1697);
  int v60 = sub_19E2F62F8();
  sub_19E1C632C(v57, (uint64_t *)a2, v58, v59, v60, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52));
  uint64_t v61 = *(unsigned char **)(a1 + 2560);
  int v62 = *a3;
  int v63 = *(unsigned __int8 *)(a1 + 1697);
  int v64 = sub_19E2F62F8();
  int v65 = *(_DWORD *)(a1 + 52);

  return sub_19E1C632C(v61, (uint64_t *)a2, v62, v63, v64, v65, v65);
}

uint64_t sub_19E1BA66C(uint64_t a1, FILE *__stream, int *a3, int a4, unsigned int a5)
{
  if (!__stream) {
    sub_19E2F6320(3);
  }
  int v10 = *(_DWORD *)(a1 + 48);
  sub_19E2F6788(__stream, a3, *(_DWORD *)(a1 + 52));
  sub_19E2F6788(__stream, a3, v10);
  if (a4 >= 1)
  {
    int __ptr = *(_DWORD *)(a1 + 736);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    int __ptr = *(_DWORD *)(a1 + 740);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    int __ptr = *(_DWORD *)(a1 + 744);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    *a3 += 12;
  }
  uint64_t v11 = *(void *)(a1 + 2568);
  int v12 = sub_19E2F62F8();
  sub_19E1C6530(v11, __stream, a3, 3, v12, a5);
  uint64_t v13 = *(void *)(a1 + 2576);
  int v14 = sub_19E2F62F8();
  sub_19E1C6530(v13, __stream, a3, 3, v14, a5);
  uint64_t v15 = *(void *)(a1 + 2584);
  int v16 = sub_19E2F62F8();
  sub_19E1C6530(v15, __stream, a3, 3, v16, a5);
  uint64_t v17 = *(void *)(a1 + 2504);
  int v18 = sub_19E2F62F8();
  sub_19E1C6648(v17, __stream, a3, 3, v18, a5);
  uint64_t v19 = *(void *)(a1 + 2512);
  int v20 = sub_19E2F62F8();
  sub_19E1C6648(v19, __stream, a3, 3, v20, a5);
  uint64_t v21 = *(void *)(a1 + 2520);
  int v22 = sub_19E2F62F8();
  sub_19E1C6648(v21, __stream, a3, 3, v22, a5);
  uint64_t v23 = *(void *)(a1 + 2528);
  int v24 = sub_19E2F62F8();
  sub_19E1C6648(v23, __stream, a3, 3, v24, a5);
  uint64_t v25 = *(void *)(a1 + 2536);
  int v26 = sub_19E2F62F8();
  sub_19E1C6648(v25, __stream, a3, 3, v26, a5);
  uint64_t v27 = *(void *)(a1 + 2544);
  int v28 = sub_19E2F62F8();
  sub_19E1C6648(v27, __stream, a3, 3, v28, a5);
  uint64_t v29 = *(void *)(a1 + 2552);
  int v30 = sub_19E2F62F8();
  sub_19E1C6648(v29, __stream, a3, 3, v30, a5);
  uint64_t v31 = *(void *)(a1 + 2560);
  int v32 = sub_19E2F62F8();
  return sub_19E1C6648(v31, __stream, a3, 3, v32, a5);
}

void **sub_19E1BA93C(uint64_t a1, void *lpsrc, const void *a3)
{
  if (lpsrc)
  {
    unint64_t v5 = (void **)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3E28, 0);
    if (a3) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = 0;
    uint64_t v7 = *(unsigned int *)(a1 + 52);
    if ((int)v7 < 1) {
      goto LABEL_34;
    }
    goto LABEL_7;
  }
  unint64_t v5 = 0;
  if (!a3) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t result = (void **)__dynamic_cast(a3, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3E28, 0);
  uint64_t v7 = *(unsigned int *)(a1 + 52);
  if ((int)v7 < 1) {
    goto LABEL_34;
  }
LABEL_7:
  uint64_t v8 = (int16x8_t *)*result[321];
  unint64_t v9 = (int16x8_t *)*v5[321];
  int v10 = **(int16x8_t ***)(a1 + 2568);
  if (v7 < 0x10)
  {
    uint64_t v11 = 0;
LABEL_14:
    uint64_t v17 = v7 - v11;
    uint64_t v18 = v11;
    uint64_t v19 = &v10->i16[v18];
    int v20 = &v9->i16[v18];
    uint64_t v21 = &v8->i16[v18];
    do
    {
      __int16 v23 = *v21++;
      __int16 v22 = v23;
      __int16 v24 = *v20++;
      *v19++ = v22 - v24;
      --v17;
    }
    while (v17);
    goto LABEL_16;
  }
  uint64_t v11 = 0;
  if ((unint64_t)((char *)v10 - (char *)v8) < 0x20) {
    goto LABEL_14;
  }
  if ((unint64_t)((char *)v10 - (char *)v9) < 0x20) {
    goto LABEL_14;
  }
  uint64_t v11 = v7 & 0x7FFFFFF0;
  int v12 = v8 + 1;
  uint64_t v13 = v9 + 1;
  int v14 = v10 + 1;
  uint64_t v15 = v7 & 0xFFFFFFF0;
  do
  {
    int16x8_t v16 = vsubq_s16(*v12, *v13);
    v14[-1] = vsubq_s16(v12[-1], v13[-1]);
    *int v14 = v16;
    v12 += 2;
    v13 += 2;
    v14 += 2;
    v15 -= 16;
  }
  while (v15);
  if (v11 != v7) {
    goto LABEL_14;
  }
LABEL_16:
  uint64_t v25 = (int16x8_t *)*result[322];
  int v26 = (int16x8_t *)*v5[322];
  uint64_t v27 = **(int16x8_t ***)(a1 + 2576);
  if (v7 < 0x10)
  {
    uint64_t v28 = 0;
LABEL_23:
    uint64_t v34 = v7 - v28;
    uint64_t v35 = v28;
    int v36 = &v27->i16[v35];
    int v37 = &v26->i16[v35];
    int v38 = &v25->i16[v35];
    do
    {
      __int16 v40 = *v38++;
      __int16 v39 = v40;
      __int16 v41 = *v37++;
      *v36++ = v39 - v41;
      --v34;
    }
    while (v34);
    goto LABEL_25;
  }
  uint64_t v28 = 0;
  if ((unint64_t)((char *)v27 - (char *)v25) < 0x20) {
    goto LABEL_23;
  }
  if ((unint64_t)((char *)v27 - (char *)v26) < 0x20) {
    goto LABEL_23;
  }
  uint64_t v28 = v7 & 0x7FFFFFF0;
  uint64_t v29 = v25 + 1;
  int v30 = v26 + 1;
  uint64_t v31 = v27 + 1;
  uint64_t v32 = v7 & 0xFFFFFFF0;
  do
  {
    int16x8_t v33 = vsubq_s16(*v29, *v30);
    v31[-1] = vsubq_s16(v29[-1], v30[-1]);
    *uint64_t v31 = v33;
    v29 += 2;
    v30 += 2;
    v31 += 2;
    v32 -= 16;
  }
  while (v32);
  if (v28 != v7) {
    goto LABEL_23;
  }
LABEL_25:
  int v42 = (int16x8_t *)*result[323];
  int v43 = (int16x8_t *)*v5[323];
  int v44 = **(int16x8_t ***)(a1 + 2584);
  if (v7 < 0x10)
  {
    uint64_t v45 = 0;
LABEL_32:
    uint64_t v51 = v7 - v45;
    uint64_t v52 = v45;
    float32x4x2_t v53 = &v44->i16[v52];
    int v54 = &v43->i16[v52];
    int v55 = &v42->i16[v52];
    do
    {
      __int16 v57 = *v55++;
      __int16 v56 = v57;
      __int16 v58 = *v54++;
      *v53++ = v56 - v58;
      --v51;
    }
    while (v51);
    goto LABEL_34;
  }
  uint64_t v45 = 0;
  if ((unint64_t)((char *)v44 - (char *)v42) < 0x20) {
    goto LABEL_32;
  }
  if ((unint64_t)((char *)v44 - (char *)v43) < 0x20) {
    goto LABEL_32;
  }
  uint64_t v45 = v7 & 0x7FFFFFF0;
  int v46 = v42 + 1;
  int v47 = v43 + 1;
  int v48 = v44 + 1;
  uint64_t v49 = v7 & 0xFFFFFFF0;
  do
  {
    int16x8_t v50 = vsubq_s16(*v46, *v47);
    v48[-1] = vsubq_s16(v46[-1], v47[-1]);
    *int v48 = v50;
    v46 += 2;
    v47 += 2;
    v48 += 2;
    v49 -= 16;
  }
  while (v49);
  if (v45 != v7) {
    goto LABEL_32;
  }
LABEL_34:
  uint64_t v59 = (*(_DWORD *)(a1 + 48) * v7);
  if ((int)v59 < 1) {
    goto LABEL_71;
  }
  int v60 = (int16x8_t *)*result[313];
  uint64_t v61 = (int16x8_t *)*v5[313];
  int v62 = **(int16x8_t ***)(a1 + 2504);
  if (v59 < 0x10)
  {
    uint64_t v63 = 0;
LABEL_42:
    uint64_t v69 = v59 - v63;
    uint64_t v70 = v63;
    int32x4_t v71 = &v62->i16[v70];
    uint64_t v72 = &v61->i16[v70];
    uint64_t v73 = &v60->i16[v70];
    do
    {
      __int16 v75 = *v73++;
      __int16 v74 = v75;
      __int16 v76 = *v72++;
      *v71++ = v74 - v76;
      --v69;
    }
    while (v69);
    goto LABEL_44;
  }
  uint64_t v63 = 0;
  if ((unint64_t)((char *)v62 - (char *)v60) < 0x20) {
    goto LABEL_42;
  }
  if ((unint64_t)((char *)v62 - (char *)v61) < 0x20) {
    goto LABEL_42;
  }
  uint64_t v63 = v59 & 0x7FFFFFF0;
  int v64 = v60 + 1;
  int v65 = v61 + 1;
  uint64_t v66 = v62 + 1;
  uint64_t v67 = v59 & 0xFFFFFFF0;
  do
  {
    int16x8_t v68 = vsubq_s16(*v64, *v65);
    v66[-1] = vsubq_s16(v64[-1], v65[-1]);
    *uint64_t v66 = v68;
    v64 += 2;
    v65 += 2;
    v66 += 2;
    v67 -= 16;
  }
  while (v67);
  if (v63 != v59) {
    goto LABEL_42;
  }
LABEL_44:
  uint64_t v77 = (int16x8_t *)*result[315];
  uint64_t v78 = (int16x8_t *)*v5[315];
  uint64_t v79 = **(int16x8_t ***)(a1 + 2520);
  if (v59 < 0x10)
  {
    uint64_t v80 = 0;
LABEL_51:
    uint64_t v86 = v59 - v80;
    uint64_t v87 = v80;
    uint64_t v88 = &v79->i16[v87];
    uint64_t v89 = &v78->i16[v87];
    long long v90 = &v77->i16[v87];
    do
    {
      __int16 v92 = *v90++;
      __int16 v91 = v92;
      __int16 v93 = *v89++;
      *v88++ = v91 - v93;
      --v86;
    }
    while (v86);
    goto LABEL_53;
  }
  uint64_t v80 = 0;
  if ((unint64_t)((char *)v79 - (char *)v77) < 0x20) {
    goto LABEL_51;
  }
  if ((unint64_t)((char *)v79 - (char *)v78) < 0x20) {
    goto LABEL_51;
  }
  uint64_t v80 = v59 & 0x7FFFFFF0;
  float32x4_t v81 = v77 + 1;
  uint64_t v82 = v78 + 1;
  uint64_t v83 = v79 + 1;
  uint64_t v84 = v59 & 0xFFFFFFF0;
  do
  {
    int16x8_t v85 = vsubq_s16(*v81, *v82);
    v83[-1] = vsubq_s16(v81[-1], v82[-1]);
    *uint64_t v83 = v85;
    v81 += 2;
    v82 += 2;
    v83 += 2;
    v84 -= 16;
  }
  while (v84);
  if (v80 != v59) {
    goto LABEL_51;
  }
LABEL_53:
  uint64_t v94 = (int16x8_t *)*result[314];
  char v95 = (int16x8_t *)*v5[314];
  float32x4x2_t v96 = **(int16x8_t ***)(a1 + 2512);
  if (v59 < 0x10)
  {
    uint64_t v97 = 0;
LABEL_60:
    uint64_t v103 = v59 - v97;
    uint64_t v104 = v97;
    int v105 = &v96->i16[v104];
    size_t v106 = &v95->i16[v104];
    uint64_t v107 = &v94->i16[v104];
    do
    {
      __int16 v109 = *v107++;
      __int16 v108 = v109;
      __int16 v110 = *v106++;
      *v105++ = v108 - v110;
      --v103;
    }
    while (v103);
    goto LABEL_62;
  }
  uint64_t v97 = 0;
  if ((unint64_t)((char *)v96 - (char *)v94) < 0x20) {
    goto LABEL_60;
  }
  if ((unint64_t)((char *)v96 - (char *)v95) < 0x20) {
    goto LABEL_60;
  }
  uint64_t v97 = v59 & 0x7FFFFFF0;
  float32x4x2_t v98 = v94 + 1;
  int v99 = v95 + 1;
  uint64_t v100 = v96 + 1;
  uint64_t v101 = v59 & 0xFFFFFFF0;
  do
  {
    int16x8_t v102 = vsubq_s16(*v98, *v99);
    v100[-1] = vsubq_s16(v98[-1], v99[-1]);
    int16x8_t *v100 = v102;
    v98 += 2;
    v99 += 2;
    v100 += 2;
    v101 -= 16;
  }
  while (v101);
  if (v97 != v59) {
    goto LABEL_60;
  }
LABEL_62:
  uint64_t v111 = (int16x8_t *)*result[316];
  uint64_t v112 = (int16x8_t *)*v5[316];
  int v113 = **(int16x8_t ***)(a1 + 2528);
  if (v59 < 0x10)
  {
    uint64_t v114 = 0;
LABEL_69:
    uint64_t v120 = v59 - v114;
    uint64_t v121 = v114;
    float v122 = &v113->i16[v121];
    CFIndex v123 = &v112->i16[v121];
    int v124 = &v111->i16[v121];
    do
    {
      __int16 v126 = *v124++;
      __int16 v125 = v126;
      __int16 v127 = *v123++;
      *v122++ = v125 - v127;
      --v120;
    }
    while (v120);
    goto LABEL_71;
  }
  uint64_t v114 = 0;
  if ((unint64_t)((char *)v113 - (char *)v111) < 0x20) {
    goto LABEL_69;
  }
  if ((unint64_t)((char *)v113 - (char *)v112) < 0x20) {
    goto LABEL_69;
  }
  uint64_t v114 = v59 & 0x7FFFFFF0;
  uint64_t v115 = v111 + 1;
  uint64_t v116 = v112 + 1;
  uint64_t v117 = v113 + 1;
  uint64_t v118 = v59 & 0xFFFFFFF0;
  do
  {
    int16x8_t v119 = vsubq_s16(*v115, *v116);
    v117[-1] = vsubq_s16(v115[-1], v116[-1]);
    int16x8_t *v117 = v119;
    v115 += 2;
    v116 += 2;
    v117 += 2;
    v118 -= 16;
  }
  while (v118);
  if (v114 != v59) {
    goto LABEL_69;
  }
LABEL_71:
  if (!v7) {
    return result;
  }
  uint64_t v128 = (v7 * v7);
  uint64_t v129 = (int16x8_t *)*result[317];
  unint64_t v130 = (int16x8_t *)*v5[317];
  uint64_t v131 = **(int16x8_t ***)(a1 + 2536);
  if (v128 < 0x10)
  {
    uint64_t v132 = 0;
LABEL_79:
    uint64_t v138 = v128 - v132;
    uint64_t v139 = v132;
    int v140 = &v131->i16[v139];
    uint64_t v141 = &v130->i16[v139];
    uint64_t v142 = &v129->i16[v139];
    do
    {
      __int16 v144 = *v142++;
      __int16 v143 = v144;
      __int16 v145 = *v141++;
      *v140++ = v143 - v145;
      --v138;
    }
    while (v138);
    goto LABEL_81;
  }
  uint64_t v132 = 0;
  if ((unint64_t)((char *)v131 - (char *)v129) < 0x20) {
    goto LABEL_79;
  }
  if ((unint64_t)((char *)v131 - (char *)v130) < 0x20) {
    goto LABEL_79;
  }
  uint64_t v132 = v128 & 0x7FFFFFF0;
  CFIndex v133 = v129 + 1;
  int v134 = v130 + 1;
  uint64_t v135 = v131 + 1;
  uint64_t v136 = v132;
  do
  {
    int16x8_t v137 = vsubq_s16(*v133, *v134);
    v135[-1] = vsubq_s16(v133[-1], v134[-1]);
    int16x8_t *v135 = v137;
    v133 += 2;
    v134 += 2;
    v135 += 2;
    v136 -= 16;
  }
  while (v136);
  if (v132 != v128) {
    goto LABEL_79;
  }
LABEL_81:
  unint64_t v146 = (int16x8_t *)*result[319];
  v147 = (int16x8_t *)*v5[319];
  unint64_t v148 = **(int16x8_t ***)(a1 + 2552);
  if (v128 < 0x10)
  {
    uint64_t v149 = 0;
LABEL_88:
    uint64_t v155 = v128 - v149;
    uint64_t v156 = v149;
    v157 = &v148->i16[v156];
    uint64_t v158 = &v147->i16[v156];
    v159 = &v146->i16[v156];
    do
    {
      __int16 v161 = *v159++;
      __int16 v160 = v161;
      __int16 v162 = *v158++;
      *v157++ = v160 - v162;
      --v155;
    }
    while (v155);
    goto LABEL_90;
  }
  uint64_t v149 = 0;
  if ((unint64_t)((char *)v148 - (char *)v146) < 0x20) {
    goto LABEL_88;
  }
  if ((unint64_t)((char *)v148 - (char *)v147) < 0x20) {
    goto LABEL_88;
  }
  uint64_t v149 = v128 & 0x7FFFFFF0;
  long long v150 = v146 + 1;
  v151 = v147 + 1;
  v152 = v148 + 1;
  uint64_t v153 = v149;
  do
  {
    int16x8_t v154 = vsubq_s16(*v150, *v151);
    v152[-1] = vsubq_s16(v150[-1], v151[-1]);
    int16x8_t *v152 = v154;
    v150 += 2;
    v151 += 2;
    v152 += 2;
    v153 -= 16;
  }
  while (v153);
  if (v149 != v128) {
    goto LABEL_88;
  }
LABEL_90:
  v163 = (int16x8_t *)*result[318];
  unint64_t v164 = (int16x8_t *)*v5[318];
  uint64_t v165 = **(int16x8_t ***)(a1 + 2544);
  if (v128 < 0x10)
  {
    uint64_t v166 = 0;
LABEL_97:
    uint64_t v172 = v128 - v166;
    uint64_t v173 = v166;
    unint64_t v174 = &v165->i16[v173];
    unint64_t v175 = &v164->i16[v173];
    v176 = &v163->i16[v173];
    do
    {
      __int16 v178 = *v176++;
      __int16 v177 = v178;
      __int16 v179 = *v175++;
      *v174++ = v177 - v179;
      --v172;
    }
    while (v172);
    goto LABEL_99;
  }
  uint64_t v166 = 0;
  if ((unint64_t)((char *)v165 - (char *)v163) < 0x20) {
    goto LABEL_97;
  }
  if ((unint64_t)((char *)v165 - (char *)v164) < 0x20) {
    goto LABEL_97;
  }
  uint64_t v166 = v128 & 0x7FFFFFF0;
  unint64_t v167 = v163 + 1;
  uint64_t v168 = v164 + 1;
  vDSP_Length v169 = v165 + 1;
  uint64_t v170 = v166;
  do
  {
    int16x8_t v171 = vsubq_s16(*v167, *v168);
    v169[-1] = vsubq_s16(v167[-1], v168[-1]);
    int16x8_t *v169 = v171;
    v167 += 2;
    v168 += 2;
    v169 += 2;
    v170 -= 16;
  }
  while (v170);
  if (v166 != v128) {
    goto LABEL_97;
  }
LABEL_99:
  v180 = (int16x8_t *)*result[320];
  uint64_t v181 = (int16x8_t *)*v5[320];
  uint64_t v182 = **(int16x8_t ***)(a1 + 2560);
  if (v128 < 0x10)
  {
    uint64_t v183 = 0;
LABEL_106:
    uint64_t v189 = v128 - v183;
    uint64_t v190 = v183;
    v191 = &v182->i16[v190];
    uint64_t v192 = &v181->i16[v190];
    uint64_t v193 = &v180->i16[v190];
    do
    {
      __int16 v195 = *v193++;
      __int16 v194 = v195;
      __int16 v196 = *v192++;
      *v191++ = v194 - v196;
      --v189;
    }
    while (v189);
    return result;
  }
  uint64_t v183 = 0;
  if ((unint64_t)((char *)v182 - (char *)v180) < 0x20) {
    goto LABEL_106;
  }
  if ((unint64_t)((char *)v182 - (char *)v181) < 0x20) {
    goto LABEL_106;
  }
  uint64_t v183 = v128 & 0x7FFFFFF0;
  v184 = v180 + 1;
  uint64_t v185 = v181 + 1;
  float v186 = v182 + 1;
  uint64_t v187 = v183;
  do
  {
    int16x8_t v188 = vsubq_s16(*v184, *v185);
    v186[-1] = vsubq_s16(v184[-1], v185[-1]);
    *float v186 = v188;
    v184 += 2;
    v185 += 2;
    v186 += 2;
    v187 -= 16;
  }
  while (v187);
  if (v183 != v128) {
    goto LABEL_106;
  }
  return result;
}

void sub_19E1BB1FC(int a1, void *lpsrc, const void *a3)
{
  if (lpsrc) {
    __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3E28, 0);
  }
  if (a3)
  {
    __dynamic_cast(a3, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3E28, 0);
  }
}

void *sub_19E1BB2C8(uint64_t a1, void *lpsrc)
{
  if (lpsrc) {
    uint64_t result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3E28, 0);
  }
  else {
    uint64_t result = 0;
  }
  uint64_t v4 = *(float32x4_t ***)(a1 + 2568);
  unint64_t v5 = (float32x4_t **)*((void *)result + 321);
  uint64_t v6 = *(int *)(a1 + 52);
  if ((int)v6 >= 8)
  {
    uint64_t v7 = *v4;
    uint64_t v8 = *v5;
    int v9 = (int)v6 / 8;
    do
    {
      float32x4_t v10 = *v8;
      float32x4_t v11 = v8[1];
      v8 += 2;
      float32x4_t v12 = vaddq_f32(v7[1], v11);
      float32x4_t *v7 = vaddq_f32(*v7, v10);
      v7[1] = v12;
      v7 += 2;
      --v9;
    }
    while (v9);
  }
  LODWORD(v13) = 8 * ((int)v6 / 8);
  if ((int)v13 < (int)v6)
  {
    int v14 = *v5;
    uint64_t v15 = *v4;
    unint64_t v13 = (int)v13;
    unint64_t v16 = v6 - (int)v13;
    if (v16 < 0x10) {
      goto LABEL_14;
    }
    uint64_t v17 = 2 * (int)v13;
    if ((char *)v15 + v17 < (char *)v14 + 2 * v6 && (char *)v14 + v17 < (char *)v15 + 2 * v6) {
      goto LABEL_14;
    }
    unint64_t v13 = (v16 & 0xFFFFFFFFFFFFFFF0) + (int)v13;
    uint64_t v18 = v17 + 16;
    uint64_t v19 = (int16x8_t *)((char *)&v14[1] + v17);
    int v20 = (int16x8_t *)((char *)v15 + v18);
    unint64_t v21 = v16 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      int16x8_t v22 = vaddq_s16(*v20, *v19);
      v20[-1] = vaddq_s16(v20[-1], v19[-1]);
      *int v20 = v22;
      v19 += 2;
      v20 += 2;
      v21 -= 16;
    }
    while (v21);
    if (v16 != (v16 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_14:
      uint64_t v23 = v6 - v13;
      uint64_t v24 = 2 * v13;
      uint64_t v25 = (float32x4_t *)((char *)v15 + v24);
      int v26 = (float32x4_t *)((char *)v14 + v24);
      do
      {
        __int16 v27 = v26->i16[0];
        int v26 = (float32x4_t *)((char *)v26 + 2);
        v25->i16[0] += v27;
        uint64_t v25 = (float32x4_t *)((char *)v25 + 2);
        --v23;
      }
      while (v23);
    }
  }
  uint64_t v28 = *(float32x4_t ***)(a1 + 2576);
  uint64_t v29 = (float32x4_t **)*((void *)result + 322);
  uint64_t v30 = *(int *)(a1 + 52);
  if ((int)v30 >= 8)
  {
    uint64_t v31 = *v28;
    uint64_t v32 = *v29;
    int v33 = (int)v30 / 8;
    do
    {
      float32x4_t v34 = *v32;
      float32x4_t v35 = v32[1];
      v32 += 2;
      float32x4_t v36 = vaddq_f32(v31[1], v35);
      *uint64_t v31 = vaddq_f32(*v31, v34);
      v31[1] = v36;
      v31 += 2;
      --v33;
    }
    while (v33);
  }
  LODWORD(v37) = 8 * ((int)v30 / 8);
  if ((int)v37 < (int)v30)
  {
    int v38 = *v29;
    __int16 v39 = *v28;
    unint64_t v37 = (int)v37;
    unint64_t v40 = v30 - (int)v37;
    if (v40 < 0x10) {
      goto LABEL_26;
    }
    uint64_t v41 = 2 * (int)v37;
    if ((char *)v39 + v41 < (char *)v38 + 2 * v30 && (char *)v38 + v41 < (char *)v39 + 2 * v30) {
      goto LABEL_26;
    }
    unint64_t v37 = (v40 & 0xFFFFFFFFFFFFFFF0) + (int)v37;
    uint64_t v42 = v41 + 16;
    int v43 = (int16x8_t *)((char *)&v38[1] + v41);
    int v44 = (int16x8_t *)((char *)v39 + v42);
    unint64_t v45 = v40 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      int16x8_t v46 = vaddq_s16(*v44, *v43);
      v44[-1] = vaddq_s16(v44[-1], v43[-1]);
      *int v44 = v46;
      v43 += 2;
      v44 += 2;
      v45 -= 16;
    }
    while (v45);
    if (v40 != (v40 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_26:
      uint64_t v47 = v30 - v37;
      uint64_t v48 = 2 * v37;
      uint64_t v49 = (float32x4_t *)((char *)v39 + v48);
      int16x8_t v50 = (float32x4_t *)((char *)v38 + v48);
      do
      {
        __int16 v51 = v50->i16[0];
        int16x8_t v50 = (float32x4_t *)((char *)v50 + 2);
        v49->i16[0] += v51;
        uint64_t v49 = (float32x4_t *)((char *)v49 + 2);
        --v47;
      }
      while (v47);
    }
  }
  uint64_t v52 = *(float32x4_t ***)(a1 + 2584);
  float32x4x2_t v53 = (float32x4_t **)*((void *)result + 323);
  uint64_t v54 = *(int *)(a1 + 52);
  if ((int)v54 >= 8)
  {
    int v55 = *v52;
    __int16 v56 = *v53;
    int v57 = (int)v54 / 8;
    do
    {
      float32x4_t v58 = *v56;
      float32x4_t v59 = v56[1];
      v56 += 2;
      float32x4_t v60 = vaddq_f32(v55[1], v59);
      float32x4_t *v55 = vaddq_f32(*v55, v58);
      v55[1] = v60;
      v55 += 2;
      --v57;
    }
    while (v57);
  }
  LODWORD(v61) = 8 * ((int)v54 / 8);
  if ((int)v61 < (int)v54)
  {
    int v62 = *v53;
    uint64_t v63 = *v52;
    unint64_t v61 = (int)v61;
    unint64_t v64 = v54 - (int)v61;
    if (v64 < 0x10) {
      goto LABEL_38;
    }
    uint64_t v65 = 2 * (int)v61;
    if ((char *)v63 + v65 < (char *)v62 + 2 * v54 && (char *)v62 + v65 < (char *)v63 + 2 * v54) {
      goto LABEL_38;
    }
    unint64_t v61 = (v64 & 0xFFFFFFFFFFFFFFF0) + (int)v61;
    uint64_t v66 = v65 + 16;
    uint64_t v67 = (int16x8_t *)((char *)&v62[1] + v65);
    int16x8_t v68 = (int16x8_t *)((char *)v63 + v66);
    unint64_t v69 = v64 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      int16x8_t v70 = vaddq_s16(*v68, *v67);
      v68[-1] = vaddq_s16(v68[-1], v67[-1]);
      int16x8_t *v68 = v70;
      v67 += 2;
      v68 += 2;
      v69 -= 16;
    }
    while (v69);
    if (v64 != (v64 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_38:
      uint64_t v71 = v54 - v61;
      uint64_t v72 = 2 * v61;
      uint64_t v73 = (float32x4_t *)((char *)v63 + v72);
      __int16 v74 = (float32x4_t *)((char *)v62 + v72);
      do
      {
        __int16 v75 = v74->i16[0];
        __int16 v74 = (float32x4_t *)((char *)v74 + 2);
        v73->i16[0] += v75;
        uint64_t v73 = (float32x4_t *)((char *)v73 + 2);
        --v71;
      }
      while (v71);
    }
  }
  int v76 = *(_DWORD *)(a1 + 52);
  uint64_t v77 = (*(_DWORD *)(a1 + 48) * v76);
  if ((int)v77 < 1) {
    goto LABEL_93;
  }
  unint64_t v78 = **(void **)(a1 + 2504);
  unint64_t v79 = **((void **)result + 313);
  if (v77 >= 0x10 && (v78 < v79 + 2 * v77 ? (BOOL v80 = v79 >= v78 + 2 * v77) : (BOOL v80 = 1), v80))
  {
    uint64_t v81 = v77 & 0x7FFFFFF0;
    uint64_t v82 = (int16x8_t *)(v78 + 16);
    uint64_t v83 = (int16x8_t *)(v79 + 16);
    uint64_t v84 = v77 & 0xFFFFFFF0;
    do
    {
      int16x8_t v85 = vaddq_s16(*v83, *v82);
      v82[-1] = vaddq_s16(v83[-1], v82[-1]);
      *uint64_t v82 = v85;
      v82 += 2;
      v83 += 2;
      v84 -= 16;
    }
    while (v84);
    if (v81 == v77) {
      goto LABEL_54;
    }
  }
  else
  {
    uint64_t v81 = 0;
  }
  uint64_t v86 = v77 - v81;
  uint64_t v87 = 2 * v81;
  uint64_t v88 = (__int16 *)(v79 + v87);
  uint64_t v89 = (_WORD *)(v78 + v87);
  do
  {
    __int16 v90 = *v88++;
    *v89++ += v90;
    --v86;
  }
  while (v86);
LABEL_54:
  unint64_t v91 = **(void **)(a1 + 2512);
  unint64_t v92 = **((void **)result + 314);
  if (v77 >= 0x10 && (v91 < v92 + 2 * v77 ? (BOOL v93 = v92 >= v91 + 2 * v77) : (BOOL v93 = 1), v93))
  {
    uint64_t v94 = v77 & 0x7FFFFFF0;
    char v95 = (int16x8_t *)(v91 + 16);
    float32x4x2_t v96 = (int16x8_t *)(v92 + 16);
    uint64_t v97 = v77 & 0xFFFFFFF0;
    do
    {
      int16x8_t v98 = vaddq_s16(*v96, *v95);
      v95[-1] = vaddq_s16(v96[-1], v95[-1]);
      int16x8_t *v95 = v98;
      v95 += 2;
      v96 += 2;
      v97 -= 16;
    }
    while (v97);
    if (v94 == v77) {
      goto LABEL_67;
    }
  }
  else
  {
    uint64_t v94 = 0;
  }
  uint64_t v99 = v77 - v94;
  uint64_t v100 = 2 * v94;
  uint64_t v101 = (__int16 *)(v92 + v100);
  int16x8_t v102 = (_WORD *)(v91 + v100);
  do
  {
    __int16 v103 = *v101++;
    *v102++ += v103;
    --v99;
  }
  while (v99);
LABEL_67:
  unint64_t v104 = **(void **)(a1 + 2520);
  unint64_t v105 = **((void **)result + 315);
  if (v77 < 0x10 || (v104 < v105 + 2 * v77 ? (BOOL v106 = v105 >= v104 + 2 * v77) : (BOOL v106 = 1), !v106))
  {
    uint64_t v107 = 0;
LABEL_78:
    uint64_t v112 = v77 - v107;
    uint64_t v113 = 2 * v107;
    uint64_t v114 = (__int16 *)(v105 + v113);
    uint64_t v115 = (_WORD *)(v104 + v113);
    do
    {
      __int16 v116 = *v114++;
      *v115++ += v116;
      --v112;
    }
    while (v112);
    goto LABEL_80;
  }
  uint64_t v107 = v77 & 0x7FFFFFF0;
  __int16 v108 = (int16x8_t *)(v104 + 16);
  __int16 v109 = (int16x8_t *)(v105 + 16);
  uint64_t v110 = v77 & 0xFFFFFFF0;
  do
  {
    int16x8_t v111 = vaddq_s16(*v109, *v108);
    v108[-1] = vaddq_s16(v109[-1], v108[-1]);
    *__int16 v108 = v111;
    v108 += 2;
    v109 += 2;
    v110 -= 16;
  }
  while (v110);
  if (v107 != v77) {
    goto LABEL_78;
  }
LABEL_80:
  unint64_t v117 = **(void **)(a1 + 2528);
  unint64_t v118 = **((void **)result + 316);
  if (v77 < 0x10 || (v117 < v118 + 2 * v77 ? (BOOL v119 = v118 >= v117 + 2 * v77) : (BOOL v119 = 1), !v119))
  {
    uint64_t v120 = 0;
LABEL_91:
    uint64_t v125 = v77 - v120;
    uint64_t v126 = 2 * v120;
    __int16 v127 = (__int16 *)(v118 + v126);
    uint64_t v128 = (_WORD *)(v117 + v126);
    do
    {
      __int16 v129 = *v127++;
      *v128++ += v129;
      --v125;
    }
    while (v125);
    goto LABEL_93;
  }
  uint64_t v120 = v77 & 0x7FFFFFF0;
  uint64_t v121 = (int16x8_t *)(v117 + 16);
  float v122 = (int16x8_t *)(v118 + 16);
  uint64_t v123 = v77 & 0xFFFFFFF0;
  do
  {
    int16x8_t v124 = vaddq_s16(*v122, *v121);
    v121[-1] = vaddq_s16(v122[-1], v121[-1]);
    *uint64_t v121 = v124;
    v121 += 2;
    v122 += 2;
    v123 -= 16;
  }
  while (v123);
  if (v120 != v77) {
    goto LABEL_91;
  }
LABEL_93:
  if (!v76) {
    return result;
  }
  uint64_t v130 = (v76 * v76);
  unint64_t v131 = **(void **)(a1 + 2536);
  unint64_t v132 = **((void **)result + 317);
  if (v130 >= 0x10 && (v131 < v132 + 2 * v130 ? (BOOL v133 = v132 >= v131 + 2 * v130) : (BOOL v133 = 1), v133))
  {
    uint64_t v134 = v130 & 0x7FFFFFF0;
    uint64_t v135 = (int16x8_t *)(v131 + 16);
    uint64_t v136 = (int16x8_t *)(v132 + 16);
    uint64_t v137 = v134;
    do
    {
      int16x8_t v138 = vaddq_s16(*v136, *v135);
      v135[-1] = vaddq_s16(v136[-1], v135[-1]);
      int16x8_t *v135 = v138;
      v135 += 2;
      v136 += 2;
      v137 -= 16;
    }
    while (v137);
    if (v134 == v130) {
      goto LABEL_107;
    }
  }
  else
  {
    uint64_t v134 = 0;
  }
  uint64_t v139 = v130 - v134;
  uint64_t v140 = 2 * v134;
  uint64_t v141 = (__int16 *)(v132 + v140);
  uint64_t v142 = (_WORD *)(v131 + v140);
  do
  {
    __int16 v143 = *v141++;
    *v142++ += v143;
    --v139;
  }
  while (v139);
LABEL_107:
  unint64_t v144 = **(void **)(a1 + 2544);
  unint64_t v145 = **((void **)result + 318);
  if (v130 >= 0x10 && (v144 < v145 + 2 * v130 ? (BOOL v146 = v145 >= v144 + 2 * v130) : (BOOL v146 = 1), v146))
  {
    uint64_t v147 = v130 & 0x7FFFFFF0;
    unint64_t v148 = (int16x8_t *)(v144 + 16);
    uint64_t v149 = (int16x8_t *)(v145 + 16);
    uint64_t v150 = v147;
    do
    {
      int16x8_t v151 = vaddq_s16(*v149, *v148);
      v148[-1] = vaddq_s16(v149[-1], v148[-1]);
      *unint64_t v148 = v151;
      v148 += 2;
      v149 += 2;
      v150 -= 16;
    }
    while (v150);
    if (v147 == v130) {
      goto LABEL_120;
    }
  }
  else
  {
    uint64_t v147 = 0;
  }
  uint64_t v152 = v130 - v147;
  uint64_t v153 = 2 * v147;
  int16x8_t v154 = (__int16 *)(v145 + v153);
  uint64_t v155 = (_WORD *)(v144 + v153);
  do
  {
    __int16 v156 = *v154++;
    *v155++ += v156;
    --v152;
  }
  while (v152);
LABEL_120:
  unint64_t v157 = **(void **)(a1 + 2552);
  unint64_t v158 = **((void **)result + 319);
  if (v130 >= 0x10 && (v157 < v158 + 2 * v130 ? (BOOL v159 = v158 >= v157 + 2 * v130) : (BOOL v159 = 1), v159))
  {
    uint64_t v160 = v130 & 0x7FFFFFF0;
    __int16 v161 = (int16x8_t *)(v157 + 16);
    __int16 v162 = (int16x8_t *)(v158 + 16);
    uint64_t v163 = v160;
    do
    {
      int16x8_t v164 = vaddq_s16(*v162, *v161);
      v161[-1] = vaddq_s16(v162[-1], v161[-1]);
      int16x8_t *v161 = v164;
      v161 += 2;
      v162 += 2;
      v163 -= 16;
    }
    while (v163);
    if (v160 == v130) {
      goto LABEL_133;
    }
  }
  else
  {
    uint64_t v160 = 0;
  }
  uint64_t v165 = v130 - v160;
  uint64_t v166 = 2 * v160;
  unint64_t v167 = (__int16 *)(v158 + v166);
  uint64_t v168 = (_WORD *)(v157 + v166);
  do
  {
    __int16 v169 = *v167++;
    *v168++ += v169;
    --v165;
  }
  while (v165);
LABEL_133:
  unint64_t v170 = **(void **)(a1 + 2560);
  unint64_t v171 = **((void **)result + 320);
  if (v130 < 0x10 || (v170 < v171 + 2 * v130 ? (BOOL v172 = v171 >= v170 + 2 * v130) : (BOOL v172 = 1), !v172))
  {
    uint64_t v173 = 0;
LABEL_144:
    uint64_t v178 = v130 - v173;
    uint64_t v179 = 2 * v173;
    v180 = (__int16 *)(v171 + v179);
    uint64_t v181 = (_WORD *)(v170 + v179);
    do
    {
      __int16 v182 = *v180++;
      *v181++ += v182;
      --v178;
    }
    while (v178);
    return result;
  }
  uint64_t v173 = v130 & 0x7FFFFFF0;
  unint64_t v174 = (int16x8_t *)(v170 + 16);
  unint64_t v175 = (int16x8_t *)(v171 + 16);
  uint64_t v176 = v173;
  do
  {
    int16x8_t v177 = vaddq_s16(*v175, *v174);
    v174[-1] = vaddq_s16(v175[-1], v174[-1]);
    int16x8_t *v174 = v177;
    v174 += 2;
    v175 += 2;
    v176 -= 16;
  }
  while (v176);
  if (v173 != v130) {
    goto LABEL_144;
  }
  return result;
}

void sub_19E1BBB40(uint64_t a1, void *lpsrc)
{
  if (lpsrc) {
    __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3E10, 0);
  }
  (*(void (**)(void))(**(void **)(a1 + 1552) + 64))(*(void *)(a1 + 1552));
  (*(void (**)(void))(**(void **)(a1 + 1552) + 64))(*(void *)(a1 + 1552));
  sub_19E2F6320(23);
}

uint64_t sub_19E1BBBF8(uint64_t result, float a2, double a3, double a4)
{
  float v4 = -a2;
  uint64_t v5 = *(unsigned int *)(result + 52);
  if ((int)v5 >= 1)
  {
    uint64_t v6 = **(_WORD ***)(result + 2568);
    uint64_t v7 = *(unsigned int *)(result + 52);
    do
    {
      LOWORD(a4) = *v6;
      *(void *)&a4 = vmovl_s16(*(int16x4_t *)&a4).u64[0];
      float v8 = (float)SLODWORD(a4);
      BOOL v9 = (float)SLODWORD(a4) < v4;
      *(float *)&a4 = -a2;
      if (v9 || (*(float *)&a4 = a2, v8 > a2)) {
        *uint64_t v6 = (int)*(float *)&a4;
      }
      ++v6;
      --v7;
    }
    while (v7);
    float32x4_t v10 = **(_WORD ***)(result + 2576);
    uint64_t v11 = v5;
    do
    {
      LOWORD(a4) = *v10;
      *(void *)&a4 = vmovl_s16(*(int16x4_t *)&a4).u64[0];
      float v12 = (float)SLODWORD(a4);
      BOOL v9 = (float)SLODWORD(a4) < v4;
      *(float *)&a4 = -a2;
      if (v9 || (*(float *)&a4 = a2, v12 > a2)) {
        _WORD *v10 = (int)*(float *)&a4;
      }
      ++v10;
      --v11;
    }
    while (v11);
    unint64_t v13 = **(_WORD ***)(result + 2584);
    uint64_t v14 = v5;
    do
    {
      LOWORD(a4) = *v13;
      *(void *)&a4 = vmovl_s16(*(int16x4_t *)&a4).u64[0];
      float v15 = (float)SLODWORD(a4);
      BOOL v9 = (float)SLODWORD(a4) < v4;
      *(float *)&a4 = -a2;
      if (v9 || (*(float *)&a4 = a2, v15 > a2)) {
        *unint64_t v13 = (int)*(float *)&a4;
      }
      ++v13;
      --v14;
    }
    while (v14);
  }
  uint64_t v16 = (*(_DWORD *)(result + 48) * v5);
  if ((int)v16 >= 1)
  {
    uint64_t v17 = **(_WORD ***)(result + 2504);
    uint64_t v18 = (*(_DWORD *)(result + 48) * v5);
    do
    {
      LOWORD(a4) = *v17;
      *(void *)&a4 = vmovl_s16(*(int16x4_t *)&a4).u64[0];
      float v19 = (float)SLODWORD(a4);
      BOOL v9 = (float)SLODWORD(a4) < v4;
      *(float *)&a4 = -a2;
      if (v9 || (*(float *)&a4 = a2, v19 > a2)) {
        _WORD *v17 = (int)*(float *)&a4;
      }
      ++v17;
      --v18;
    }
    while (v18);
    int v20 = **(_WORD ***)(result + 2512);
    uint64_t v21 = v16;
    do
    {
      LOWORD(a4) = *v20;
      *(void *)&a4 = vmovl_s16(*(int16x4_t *)&a4).u64[0];
      float v22 = (float)SLODWORD(a4);
      BOOL v9 = (float)SLODWORD(a4) < v4;
      *(float *)&a4 = -a2;
      if (v9 || (*(float *)&a4 = a2, v22 > a2)) {
        *int v20 = (int)*(float *)&a4;
      }
      ++v20;
      --v21;
    }
    while (v21);
    uint64_t v23 = **(_WORD ***)(result + 2520);
    uint64_t v24 = v16;
    do
    {
      LOWORD(a4) = *v23;
      *(void *)&a4 = vmovl_s16(*(int16x4_t *)&a4).u64[0];
      float v25 = (float)SLODWORD(a4);
      BOOL v9 = (float)SLODWORD(a4) < v4;
      *(float *)&a4 = -a2;
      if (v9 || (*(float *)&a4 = a2, v25 > a2)) {
        *uint64_t v23 = (int)*(float *)&a4;
      }
      ++v23;
      --v24;
    }
    while (v24);
    int v26 = **(_WORD ***)(result + 2528);
    do
    {
      LOWORD(a4) = *v26;
      *(void *)&a4 = vmovl_s16(*(int16x4_t *)&a4).u64[0];
      float v27 = (float)SLODWORD(a4);
      BOOL v9 = (float)SLODWORD(a4) < v4;
      *(float *)&a4 = -a2;
      if (v9 || (*(float *)&a4 = a2, v27 > a2)) {
        *int v26 = (int)*(float *)&a4;
      }
      ++v26;
      --v16;
    }
    while (v16);
  }
  if (v5)
  {
    uint64_t v28 = (v5 * v5);
    uint64_t v29 = **(_WORD ***)(result + 2536);
    uint64_t v30 = v28;
    do
    {
      LOWORD(a4) = *v29;
      *(void *)&a4 = vmovl_s16(*(int16x4_t *)&a4).u64[0];
      float v31 = (float)SLODWORD(a4);
      BOOL v9 = (float)SLODWORD(a4) < v4;
      *(float *)&a4 = -a2;
      if (v9 || (*(float *)&a4 = a2, v31 > a2)) {
        *uint64_t v29 = (int)*(float *)&a4;
      }
      ++v29;
      --v30;
    }
    while (v30);
    uint64_t v32 = **(_WORD ***)(result + 2544);
    uint64_t v33 = v28;
    do
    {
      LOWORD(a4) = *v32;
      *(void *)&a4 = vmovl_s16(*(int16x4_t *)&a4).u64[0];
      float v34 = (float)SLODWORD(a4);
      BOOL v9 = (float)SLODWORD(a4) < v4;
      *(float *)&a4 = -a2;
      if (v9 || (*(float *)&a4 = a2, v34 > a2)) {
        _WORD *v32 = (int)*(float *)&a4;
      }
      ++v32;
      --v33;
    }
    while (v33);
    float32x4_t v35 = **(_WORD ***)(result + 2552);
    uint64_t v36 = v28;
    do
    {
      LOWORD(a4) = *v35;
      *(void *)&a4 = vmovl_s16(*(int16x4_t *)&a4).u64[0];
      float v37 = (float)SLODWORD(a4);
      BOOL v9 = (float)SLODWORD(a4) < v4;
      *(float *)&a4 = -a2;
      if (v9 || (*(float *)&a4 = a2, v37 > a2)) {
        *float32x4_t v35 = (int)*(float *)&a4;
      }
      ++v35;
      --v36;
    }
    while (v36);
    int v38 = **(_WORD ***)(result + 2560);
    do
    {
      LOWORD(a4) = *v38;
      *(void *)&a4 = vmovl_s16(*(int16x4_t *)&a4).u64[0];
      float v39 = (float)SLODWORD(a4);
      BOOL v9 = (float)SLODWORD(a4) < v4;
      *(float *)&a4 = -a2;
      if (v9 || (*(float *)&a4 = a2, v39 > a2)) {
        *int v38 = (int)*(float *)&a4;
      }
      ++v38;
      --v28;
    }
    while (v28);
  }
  return result;
}

uint64_t sub_19E1BBF60(uint64_t result, float a2, __n128 a3)
{
  uint64_t v3 = *(unsigned int *)(result + 52);
  if ((int)v3 < 1) {
    goto LABEL_23;
  }
  float v4 = **(int16x4_t ***)(result + 2568);
  if (v3 < 0x10)
  {
    uint64_t v5 = 0;
LABEL_7:
    uint64_t v9 = v3 - v5;
    float32x4_t v10 = (unsigned __int16 *)v4 + v5;
    do
    {
      a3.n128_u16[0] = *v10;
      a3.n128_u64[0] = vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
      a3.n128_f32[0] = (float)a3.n128_i32[0] * a2;
      *v10++ = (int)a3.n128_f32[0];
      --v9;
    }
    while (v9);
    goto LABEL_9;
  }
  uint64_t v5 = v3 & 0x7FFFFFF0;
  uint64_t v6 = v4 + 2;
  uint64_t v7 = v3 & 0xFFFFFFF0;
  do
  {
    a3 = (__n128)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(v6[-2])), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v6[-2].i8)), a2)));
    int16x8_t v8 = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*v6)), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v6->i8)), a2)));
    *(__n128 *)v6[-2].i8 = a3;
    *(int16x8_t *)v6->i8 = v8;
    v6 += 4;
    v7 -= 16;
  }
  while (v7);
  if (v5 != v3) {
    goto LABEL_7;
  }
LABEL_9:
  uint64_t v11 = **(int16x4_t ***)(result + 2576);
  if (v3 >= 0x10)
  {
    uint64_t v12 = v3 & 0x7FFFFFF0;
    unint64_t v13 = v11 + 2;
    uint64_t v14 = v3 & 0xFFFFFFF0;
    do
    {
      a3 = (__n128)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(v13[-2])), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v13[-2].i8)), a2)));
      int16x8_t v15 = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*v13)), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v13->i8)), a2)));
      *(__n128 *)v13[-2].i8 = a3;
      *(int16x8_t *)v13->i8 = v15;
      v13 += 4;
      v14 -= 16;
    }
    while (v14);
    if (v12 == v3) {
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  uint64_t v16 = v3 - v12;
  uint64_t v17 = (unsigned __int16 *)v11 + v12;
  do
  {
    a3.n128_u16[0] = *v17;
    a3.n128_u64[0] = vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
    a3.n128_f32[0] = (float)a3.n128_i32[0] * a2;
    *v17++ = (int)a3.n128_f32[0];
    --v16;
  }
  while (v16);
LABEL_16:
  uint64_t v18 = **(int16x4_t ***)(result + 2584);
  if (v3 < 0x10)
  {
    uint64_t v19 = 0;
LABEL_21:
    uint64_t v23 = v3 - v19;
    uint64_t v24 = (unsigned __int16 *)v18 + v19;
    do
    {
      a3.n128_u16[0] = *v24;
      a3.n128_u64[0] = vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
      a3.n128_f32[0] = (float)a3.n128_i32[0] * a2;
      *v24++ = (int)a3.n128_f32[0];
      --v23;
    }
    while (v23);
    goto LABEL_23;
  }
  uint64_t v19 = v3 & 0x7FFFFFF0;
  int v20 = v18 + 2;
  uint64_t v21 = v3 & 0xFFFFFFF0;
  do
  {
    a3 = (__n128)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(v20[-2])), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v20[-2].i8)), a2)));
    int16x8_t v22 = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*v20)), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v20->i8)), a2)));
    *(__n128 *)v20[-2].i8 = a3;
    *(int16x8_t *)v20->i8 = v22;
    v20 += 4;
    v21 -= 16;
  }
  while (v21);
  if (v19 != v3) {
    goto LABEL_21;
  }
LABEL_23:
  uint64_t v25 = (*(_DWORD *)(result + 48) * v3);
  if ((int)v25 < 1) {
    goto LABEL_52;
  }
  int v26 = **(int16x4_t ***)(result + 2504);
  if (v25 < 0x10)
  {
    uint64_t v27 = 0;
LABEL_29:
    uint64_t v31 = v25 - v27;
    uint64_t v32 = (unsigned __int16 *)v26 + v27;
    do
    {
      a3.n128_u16[0] = *v32;
      a3.n128_u64[0] = vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
      a3.n128_f32[0] = (float)a3.n128_i32[0] * a2;
      *v32++ = (int)a3.n128_f32[0];
      --v31;
    }
    while (v31);
    goto LABEL_31;
  }
  uint64_t v27 = v25 & 0x7FFFFFF0;
  uint64_t v28 = v26 + 2;
  uint64_t v29 = v25 & 0xFFFFFFF0;
  do
  {
    a3 = (__n128)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(v28[-2])), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v28[-2].i8)), a2)));
    int16x8_t v30 = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*v28)), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v28->i8)), a2)));
    *(__n128 *)v28[-2].i8 = a3;
    *(int16x8_t *)v28->i8 = v30;
    v28 += 4;
    v29 -= 16;
  }
  while (v29);
  if (v27 != v25) {
    goto LABEL_29;
  }
LABEL_31:
  uint64_t v33 = **(int16x4_t ***)(result + 2512);
  if (v25 < 0x10)
  {
    uint64_t v34 = 0;
LABEL_36:
    uint64_t v38 = v25 - v34;
    float v39 = (unsigned __int16 *)v33 + v34;
    do
    {
      a3.n128_u16[0] = *v39;
      a3.n128_u64[0] = vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
      a3.n128_f32[0] = (float)a3.n128_i32[0] * a2;
      *v39++ = (int)a3.n128_f32[0];
      --v38;
    }
    while (v38);
    goto LABEL_38;
  }
  uint64_t v34 = v25 & 0x7FFFFFF0;
  float32x4_t v35 = v33 + 2;
  uint64_t v36 = v25 & 0xFFFFFFF0;
  do
  {
    a3 = (__n128)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(v35[-2])), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v35[-2].i8)), a2)));
    int16x8_t v37 = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*v35)), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v35->i8)), a2)));
    *(__n128 *)v35[-2].i8 = a3;
    *(int16x8_t *)v35->i8 = v37;
    v35 += 4;
    v36 -= 16;
  }
  while (v36);
  if (v34 != v25) {
    goto LABEL_36;
  }
LABEL_38:
  unint64_t v40 = **(int16x4_t ***)(result + 2520);
  if (v25 < 0x10)
  {
    uint64_t v41 = 0;
LABEL_43:
    uint64_t v45 = v25 - v41;
    int16x8_t v46 = (unsigned __int16 *)v40 + v41;
    do
    {
      a3.n128_u16[0] = *v46;
      a3.n128_u64[0] = vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
      a3.n128_f32[0] = (float)a3.n128_i32[0] * a2;
      *v46++ = (int)a3.n128_f32[0];
      --v45;
    }
    while (v45);
    goto LABEL_45;
  }
  uint64_t v41 = v25 & 0x7FFFFFF0;
  uint64_t v42 = v40 + 2;
  uint64_t v43 = v25 & 0xFFFFFFF0;
  do
  {
    a3 = (__n128)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(v42[-2])), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v42[-2].i8)), a2)));
    int16x8_t v44 = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*v42)), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v42->i8)), a2)));
    *(__n128 *)v42[-2].i8 = a3;
    *(int16x8_t *)v42->i8 = v44;
    v42 += 4;
    v43 -= 16;
  }
  while (v43);
  if (v41 != v25) {
    goto LABEL_43;
  }
LABEL_45:
  uint64_t v47 = **(int16x4_t ***)(result + 2528);
  if (v25 < 0x10)
  {
    uint64_t v48 = 0;
LABEL_50:
    uint64_t v52 = v25 - v48;
    float32x4x2_t v53 = (unsigned __int16 *)v47 + v48;
    do
    {
      a3.n128_u16[0] = *v53;
      a3.n128_u64[0] = vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
      a3.n128_f32[0] = (float)a3.n128_i32[0] * a2;
      *v53++ = (int)a3.n128_f32[0];
      --v52;
    }
    while (v52);
    goto LABEL_52;
  }
  uint64_t v48 = v25 & 0x7FFFFFF0;
  uint64_t v49 = v47 + 2;
  uint64_t v50 = v25 & 0xFFFFFFF0;
  do
  {
    a3 = (__n128)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(v49[-2])), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v49[-2].i8)), a2)));
    int16x8_t v51 = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*v49)), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v49->i8)), a2)));
    *(__n128 *)v49[-2].i8 = a3;
    *(int16x8_t *)v49->i8 = v51;
    v49 += 4;
    v50 -= 16;
  }
  while (v50);
  if (v48 != v25) {
    goto LABEL_50;
  }
LABEL_52:
  if (!v3) {
    return result;
  }
  uint64_t v54 = (v3 * v3);
  int v55 = **(int16x4_t ***)(result + 2536);
  if (v54 < 0x10)
  {
    uint64_t v56 = 0;
LABEL_58:
    uint64_t v60 = v54 - v56;
    unint64_t v61 = (unsigned __int16 *)v55 + v56;
    do
    {
      a3.n128_u16[0] = *v61;
      a3.n128_u64[0] = vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
      a3.n128_f32[0] = (float)a3.n128_i32[0] * a2;
      *v61++ = (int)a3.n128_f32[0];
      --v60;
    }
    while (v60);
    goto LABEL_60;
  }
  uint64_t v56 = v54 & 0x7FFFFFF0;
  int v57 = v55 + 2;
  uint64_t v58 = v56;
  do
  {
    a3 = (__n128)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(v57[-2])), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v57[-2].i8)), a2)));
    int16x8_t v59 = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*v57)), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v57->i8)), a2)));
    *(__n128 *)v57[-2].i8 = a3;
    *(int16x8_t *)v57->i8 = v59;
    v57 += 4;
    v58 -= 16;
  }
  while (v58);
  if (v56 != v54) {
    goto LABEL_58;
  }
LABEL_60:
  int v62 = **(int16x4_t ***)(result + 2544);
  if (v54 < 0x10)
  {
    uint64_t v63 = 0;
LABEL_65:
    uint64_t v67 = v54 - v63;
    int16x8_t v68 = (unsigned __int16 *)v62 + v63;
    do
    {
      a3.n128_u16[0] = *v68;
      a3.n128_u64[0] = vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
      a3.n128_f32[0] = (float)a3.n128_i32[0] * a2;
      *v68++ = (int)a3.n128_f32[0];
      --v67;
    }
    while (v67);
    goto LABEL_67;
  }
  uint64_t v63 = v54 & 0x7FFFFFF0;
  unint64_t v64 = v62 + 2;
  uint64_t v65 = v63;
  do
  {
    a3 = (__n128)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(v64[-2])), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v64[-2].i8)), a2)));
    int16x8_t v66 = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*v64)), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v64->i8)), a2)));
    *(__n128 *)v64[-2].i8 = a3;
    *(int16x8_t *)v64->i8 = v66;
    v64 += 4;
    v65 -= 16;
  }
  while (v65);
  if (v63 != v54) {
    goto LABEL_65;
  }
LABEL_67:
  unint64_t v69 = **(int16x4_t ***)(result + 2552);
  if (v54 < 0x10)
  {
    uint64_t v70 = 0;
LABEL_72:
    uint64_t v74 = v54 - v70;
    __int16 v75 = (unsigned __int16 *)v69 + v70;
    do
    {
      a3.n128_u16[0] = *v75;
      a3.n128_u64[0] = vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
      a3.n128_f32[0] = (float)a3.n128_i32[0] * a2;
      *v75++ = (int)a3.n128_f32[0];
      --v74;
    }
    while (v74);
    goto LABEL_74;
  }
  uint64_t v70 = v54 & 0x7FFFFFF0;
  uint64_t v71 = v69 + 2;
  uint64_t v72 = v70;
  do
  {
    a3 = (__n128)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(v71[-2])), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v71[-2].i8)), a2)));
    int16x8_t v73 = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*v71)), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v71->i8)), a2)));
    *(__n128 *)v71[-2].i8 = a3;
    *(int16x8_t *)v71->i8 = v73;
    v71 += 4;
    v72 -= 16;
  }
  while (v72);
  if (v70 != v54) {
    goto LABEL_72;
  }
LABEL_74:
  int v76 = **(int16x4_t ***)(result + 2560);
  if (v54 < 0x10)
  {
    uint64_t v77 = 0;
LABEL_79:
    uint64_t v81 = v54 - v77;
    uint64_t v82 = (unsigned __int16 *)v76 + v77;
    do
    {
      a3.n128_u16[0] = *v82;
      a3.n128_u64[0] = vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
      a3.n128_f32[0] = (float)a3.n128_i32[0] * a2;
      *v82++ = (int)a3.n128_f32[0];
      --v81;
    }
    while (v81);
    return result;
  }
  uint64_t v77 = v54 & 0x7FFFFFF0;
  unint64_t v78 = v76 + 2;
  uint64_t v79 = v77;
  do
  {
    a3 = (__n128)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(v78[-2])), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v78[-2].i8)), a2)));
    int16x8_t v80 = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*v78)), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v78->i8)), a2)));
    *(__n128 *)v78[-2].i8 = a3;
    *(int16x8_t *)v78->i8 = v80;
    v78 += 4;
    v79 -= 16;
  }
  while (v79);
  if (v77 != v54) {
    goto LABEL_79;
  }
  return result;
}

uint64_t sub_19E1BC718(uint64_t result)
{
  if (*(int *)(result + 2688) >= 1) {
    operator new();
  }
  return result;
}

void sub_19E1BCA20(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E1BCA34(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

int *sub_19E1BCA48(int *result, uint64_t *a2, int a3, int *a4)
{
  if (result[672] >= 1)
  {
    uint64_t v6 = result;
    int v7 = 0;
    int v8 = *a4;
    uint64_t v9 = 8 * a3;
    do
    {
      uint64_t v10 = v6[13];
      uint64_t v11 = *(void *)(*((void *)v6 + 20) + v9);
      uint64_t v12 = 4 * (int)v10 * v7;
      uint64_t v13 = *a2;
      *(_DWORD *)(v13 + 16 * v8) = v10;
      memmove(**(void ***)(v13 + 16 * *a4 + 8), (const void *)(v11 + v12), 4 * v10);
      uint64_t v14 = *a4;
      *a4 = v14 + 1;
      int16x8_t v15 = (const void *)(*(void *)(*((void *)v6 + 23) + v9) + v12);
      uint64_t v16 = v6[13];
      uint64_t v17 = *a2;
      *(_DWORD *)(*a2 + 16 * v14 + 16) = v16;
      uint64_t result = (int *)memmove(**(void ***)(v17 + 16 * *a4 + 8), v15, 4 * v16);
      int v8 = *a4 + 1;
      *a4 = v8;
      ++v7;
    }
    while (v7 < v6[672]);
  }
  return result;
}

int *sub_19E1BCB34(int *result, void *a2, int a3, int *a4)
{
  if (result[672] >= 1)
  {
    uint64_t v6 = result;
    int v7 = 0;
    uint64_t v8 = 8 * a3;
    do
    {
      uint64_t v9 = 4 * v6[13] * v7;
      uint64_t v10 = (void *)(*(void *)(*((void *)v6 + 20) + v8) + v9);
      uint64_t v11 = (void *)(*(void *)(*((void *)v6 + 23) + v8) + v9);
      uint64_t v12 = *a4;
      *a4 = v12 + 1;
      memmove(v10, **(const void ***)(*a2 + 16 * v12 + 8), 4 * v6[13]);
      uint64_t v13 = *a4;
      *a4 = v13 + 1;
      uint64_t result = (int *)memmove(v11, **(const void ***)(*a2 + 16 * v13 + 8), 4 * v6[13]);
      ++v7;
    }
    while (v7 < v6[672]);
  }
  return result;
}

void sub_19E1BCC0C(uint64_t a1, void *a2, int *a3)
{
  if (*(int *)(a1 + 2688) >= 1)
  {
    int v6 = 0;
    int v7 = *a3;
    do
    {
      bzero(**(void ***)(*a2 + 16 * v7 + 8), 4 * *(int *)(*a2 + 16 * v7));
      uint64_t v8 = *a3;
      *a3 = v8 + 1;
      bzero(**(void ***)(*a2 + 16 * v8 + 24), 4 * *(int *)(*a2 + 16 * v8 + 16));
      int v7 = *a3 + 1;
      *a3 = v7;
      ++v6;
    }
    while (v6 < *(_DWORD *)(a1 + 2688));
  }
}

void sub_19E1BCCB0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 2692))
  {
    uint64_t v2 = *(void *)(a1 + 1552);
    BYTE7(v18[2]) = 18;
    strcpy((char *)v18, "LSTM before reseLSTM before reset ");
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v2 + 40))(v2, &v18[1]);
    if (SBYTE7(v18[2]) < 0) {
      operator delete(*(void **)&v18[1]);
    }
    uint64_t v3 = *(void *)(a1 + 1560);
    BYTE7(v18[2]) = 18;
    strcpy((char *)&v18[2], "t ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v3 + 40))(v3, &v18[1]);
    if (SBYTE7(v18[2]) < 0) {
      operator delete(*(void **)&v18[1]);
    }
    uint64_t v4 = *(void *)(a1 + 1568);
    BYTE7(v18[2]) = 18;
    strcpy((char *)&v18[2], "t ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v4 + 40))(v4, &v18[1]);
    if (SBYTE7(v18[2]) < 0) {
      operator delete(*(void **)&v18[1]);
    }
    uint64_t v5 = *(void *)(a1 + 1576);
    BYTE7(v18[2]) = 18;
    strcpy((char *)&v18[2], "t ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v5 + 40))(v5, &v18[1]);
    if (SBYTE7(v18[2]) < 0) {
      operator delete(*(void **)&v18[1]);
    }
    uint64_t v6 = *(void *)(a1 + 1584);
    BYTE7(v18[2]) = 18;
    strcpy((char *)&v18[2], "t ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v6 + 40))(v6, &v18[1]);
    if (SBYTE7(v18[2]) < 0) {
      operator delete(*(void **)&v18[1]);
    }
    uint64_t v7 = *(void *)(a1 + 1592);
    BYTE7(v18[2]) = 18;
    strcpy((char *)&v18[2], "t ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v7 + 40))(v7, &v18[1]);
    if (SBYTE7(v18[2]) < 0) {
      operator delete(*(void **)&v18[1]);
    }
    uint64_t v8 = *(void *)(a1 + 1600);
    BYTE7(v18[2]) = 18;
    strcpy((char *)&v18[2], "t ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v8 + 40))(v8, &v18[1]);
    if (SBYTE7(v18[2]) < 0) {
      operator delete(*(void **)&v18[1]);
    }
    uint64_t v9 = *(void *)(a1 + 1608);
    BYTE7(v18[2]) = 18;
    strcpy((char *)&v18[2], "t ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v9 + 40))(v9, &v18[1]);
    if (SBYTE7(v18[2]) < 0) {
      operator delete(*(void **)&v18[1]);
    }
    (*(void (**)(void))(**(void **)(a1 + 1552) + 16))(*(void *)(a1 + 1552));
    (*(void (**)(void))(**(void **)(a1 + 1560) + 16))(*(void *)(a1 + 1560));
    (*(void (**)(void))(**(void **)(a1 + 1568) + 16))(*(void *)(a1 + 1568));
    (*(void (**)(void))(**(void **)(a1 + 1576) + 16))(*(void *)(a1 + 1576));
    (*(void (**)(void))(**(void **)(a1 + 1584) + 16))(*(void *)(a1 + 1584));
    (*(void (**)(void))(**(void **)(a1 + 1592) + 16))(*(void *)(a1 + 1592));
    (*(void (**)(void))(**(void **)(a1 + 1600) + 16))(*(void *)(a1 + 1600));
    (*(void (**)(void))(**(void **)(a1 + 1608) + 16))(*(void *)(a1 + 1608));
    uint64_t v10 = *(void *)(a1 + 1552);
    BYTE7(v18[2]) = 17;
    strcpy((char *)v18, "LSTM AFTER resetLSTM AFTER reset ");
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v10 + 40))(v10, &v18[1]);
    if (SBYTE7(v18[2]) < 0) {
      operator delete(*(void **)&v18[1]);
    }
    uint64_t v11 = *(void *)(a1 + 1560);
    BYTE7(v18[2]) = 17;
    strcpy((char *)&v18[2], " ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v11 + 40))(v11, &v18[1]);
    if (SBYTE7(v18[2]) < 0) {
      operator delete(*(void **)&v18[1]);
    }
    uint64_t v12 = *(void *)(a1 + 1568);
    BYTE7(v18[2]) = 17;
    strcpy((char *)&v18[2], " ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v12 + 40))(v12, &v18[1]);
    if (SBYTE7(v18[2]) < 0) {
      operator delete(*(void **)&v18[1]);
    }
    uint64_t v13 = *(void *)(a1 + 1576);
    BYTE7(v18[2]) = 17;
    strcpy((char *)&v18[2], " ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v13 + 40))(v13, &v18[1]);
    if (SBYTE7(v18[2]) < 0) {
      operator delete(*(void **)&v18[1]);
    }
    uint64_t v14 = *(void *)(a1 + 1584);
    BYTE7(v18[2]) = 17;
    strcpy((char *)&v18[2], " ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v14 + 40))(v14, &v18[1]);
    if (SBYTE7(v18[2]) < 0) {
      operator delete(*(void **)&v18[1]);
    }
    uint64_t v15 = *(void *)(a1 + 1592);
    BYTE7(v18[2]) = 17;
    strcpy((char *)&v18[2], " ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v15 + 40))(v15, &v18[1]);
    if (SBYTE7(v18[2]) < 0) {
      operator delete(*(void **)&v18[1]);
    }
    uint64_t v16 = *(void *)(a1 + 1600);
    BYTE7(v18[2]) = 17;
    strcpy((char *)&v18[2], " ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v16 + 40))(v16, &v18[1]);
    if (SBYTE7(v18[2]) < 0) {
      operator delete(*(void **)&v18[1]);
    }
    uint64_t v17 = *(void *)(a1 + 1608);
    BYTE7(v18[2]) = 17;
    strcpy((char *)&v18[2], " ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v17 + 40))(v17, &v18[1]);
    if (SBYTE7(v18[2]) < 0) {
      operator delete(*(void **)&v18[1]);
    }
  }
}

void sub_19E1BD3A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E1BD3F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = **(void **)(a1 + 2504);
  int v6 = *(_DWORD *)(a1 + 48);
  unsigned int v5 = *(_DWORD *)(a1 + 52);
  uint64_t v8 = *(void **)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  if ((unint64_t)v8 >= v7)
  {
    uint64_t v10 = *(void **)a2;
    uint64_t v11 = (uint64_t)v8 - *(void *)a2;
    unint64_t v12 = (v11 >> 4) + 1;
    if (v12 >> 60) {
      goto LABEL_134;
    }
    uint64_t v13 = v7 - (void)v10;
    if (v13 >> 3 > v12) {
      unint64_t v12 = v13 >> 3;
    }
    BOOL v14 = (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14) {
      unint64_t v15 = v12;
    }
    if (v15 >> 60) {
      goto LABEL_135;
    }
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (char *)operator new(16 * v15);
    uint64_t v18 = &v17[16 * (v11 >> 4)];
    *(void *)uint64_t v18 = v4;
    uint64_t v9 = v18 + 16;
    uint64_t v19 = &v17[v11];
    *((_DWORD *)v19 + 2) = v5;
    for (*((_DWORD *)v19 + 3) = v6; v8 != v10; *((void *)v18 + 1) = v8[1])
    {
      uint64_t v20 = *(v8 - 2);
      v8 -= 2;
      *((void *)v18 - 2) = v20;
      v18 -= 16;
    }
    *(void *)a2 = v18;
    *(void *)(a2 + 8) = v9;
    *(void *)(a2 + 16) = &v17[v16];
    if (v10)
    {
      operator delete(v10);
      int v6 = *(_DWORD *)(a1 + 48);
      unsigned int v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    *uint64_t v8 = v4;
    uint64_t v9 = v8 + 2;
    *((_DWORD *)v8 + 2) = v5;
    *((_DWORD *)v8 + 3) = v6;
  }
  *(void *)(a2 + 8) = v9;
  uint64_t v21 = **(void **)(a1 + 2512);
  unint64_t v22 = *(void *)(a2 + 16);
  if ((unint64_t)v9 >= v22)
  {
    uint64_t v24 = *(void **)a2;
    uint64_t v25 = (uint64_t)v9 - *(void *)a2;
    unint64_t v26 = (v25 >> 4) + 1;
    if (v26 >> 60) {
      goto LABEL_134;
    }
    uint64_t v27 = v22 - (void)v24;
    if (v27 >> 3 > v26) {
      unint64_t v26 = v27 >> 3;
    }
    BOOL v14 = (unint64_t)v27 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v28 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14) {
      unint64_t v28 = v26;
    }
    if (v28 >> 60) {
      goto LABEL_135;
    }
    uint64_t v29 = 16 * v28;
    int16x8_t v30 = (char *)operator new(16 * v28);
    uint64_t v31 = &v30[16 * (v25 >> 4)];
    *(void *)uint64_t v31 = v21;
    uint64_t v23 = v31 + 16;
    uint64_t v32 = &v30[v25];
    *((_DWORD *)v32 + 2) = v5;
    for (*((_DWORD *)v32 + 3) = v6; v9 != v24; *((void *)v31 + 1) = v9[1])
    {
      uint64_t v33 = *(v9 - 2);
      v9 -= 2;
      *((void *)v31 - 2) = v33;
      v31 -= 16;
    }
    *(void *)a2 = v31;
    *(void *)(a2 + 8) = v23;
    *(void *)(a2 + 16) = &v30[v29];
    if (v24)
    {
      operator delete(v24);
      int v6 = *(_DWORD *)(a1 + 48);
      unsigned int v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    *uint64_t v9 = v21;
    uint64_t v23 = v9 + 2;
    *((_DWORD *)v9 + 2) = v5;
    *((_DWORD *)v9 + 3) = v6;
  }
  *(void *)(a2 + 8) = v23;
  uint64_t v34 = **(void **)(a1 + 2528);
  unint64_t v35 = *(void *)(a2 + 16);
  if ((unint64_t)v23 >= v35)
  {
    int16x8_t v37 = *(void **)a2;
    uint64_t v38 = (uint64_t)v23 - *(void *)a2;
    unint64_t v39 = (v38 >> 4) + 1;
    if (v39 >> 60) {
      goto LABEL_134;
    }
    uint64_t v40 = v35 - (void)v37;
    if (v40 >> 3 > v39) {
      unint64_t v39 = v40 >> 3;
    }
    BOOL v14 = (unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v41 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14) {
      unint64_t v41 = v39;
    }
    if (v41 >> 60) {
      goto LABEL_135;
    }
    uint64_t v42 = 16 * v41;
    uint64_t v43 = (char *)operator new(16 * v41);
    int16x8_t v44 = &v43[16 * (v38 >> 4)];
    *(void *)int16x8_t v44 = v34;
    uint64_t v36 = v44 + 16;
    uint64_t v45 = &v43[v38];
    *((_DWORD *)v45 + 2) = v5;
    for (*((_DWORD *)v45 + 3) = v6; v23 != v37; *((void *)v44 + 1) = v23[1])
    {
      uint64_t v46 = *(v23 - 2);
      v23 -= 2;
      *((void *)v44 - 2) = v46;
      v44 -= 16;
    }
    *(void *)a2 = v44;
    *(void *)(a2 + 8) = v36;
    *(void *)(a2 + 16) = &v43[v42];
    if (v37)
    {
      operator delete(v37);
      int v6 = *(_DWORD *)(a1 + 48);
      unsigned int v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    *uint64_t v23 = v34;
    uint64_t v36 = v23 + 2;
    *((_DWORD *)v23 + 2) = v5;
    *((_DWORD *)v23 + 3) = v6;
  }
  *(void *)(a2 + 8) = v36;
  uint64_t v47 = **(void **)(a1 + 2520);
  unint64_t v48 = *(void *)(a2 + 16);
  if ((unint64_t)v36 >= v48)
  {
    uint64_t v50 = *(void **)a2;
    uint64_t v51 = (uint64_t)v36 - *(void *)a2;
    unint64_t v52 = (v51 >> 4) + 1;
    if (v52 >> 60) {
      goto LABEL_134;
    }
    uint64_t v53 = v48 - (void)v50;
    if (v53 >> 3 > v52) {
      unint64_t v52 = v53 >> 3;
    }
    BOOL v14 = (unint64_t)v53 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v54 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14) {
      unint64_t v54 = v52;
    }
    if (v54 >> 60) {
      goto LABEL_135;
    }
    uint64_t v55 = 16 * v54;
    uint64_t v56 = (char *)operator new(16 * v54);
    int v57 = &v56[16 * (v51 >> 4)];
    *(void *)int v57 = v47;
    uint64_t v49 = v57 + 16;
    uint64_t v58 = &v56[v51];
    *((_DWORD *)v58 + 2) = v5;
    for (*((_DWORD *)v58 + 3) = v6; v36 != v50; *((void *)v57 + 1) = v36[1])
    {
      uint64_t v59 = *(v36 - 2);
      v36 -= 2;
      *((void *)v57 - 2) = v59;
      v57 -= 16;
    }
    *(void *)a2 = v57;
    *(void *)(a2 + 8) = v49;
    *(void *)(a2 + 16) = &v56[v55];
    if (v50)
    {
      operator delete(v50);
      unsigned int v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    void *v36 = v47;
    uint64_t v49 = v36 + 2;
    *((_DWORD *)v36 + 2) = v5;
    *((_DWORD *)v36 + 3) = v6;
  }
  *(void *)(a2 + 8) = v49;
  uint64_t v60 = **(void **)(a1 + 2536);
  unint64_t v61 = *(void *)(a2 + 16);
  if ((unint64_t)v49 >= v61)
  {
    uint64_t v63 = *(void **)a2;
    uint64_t v64 = (uint64_t)v49 - *(void *)a2;
    unint64_t v65 = (v64 >> 4) + 1;
    if (v65 >> 60) {
      goto LABEL_134;
    }
    uint64_t v66 = v61 - (void)v63;
    if (v66 >> 3 > v65) {
      unint64_t v65 = v66 >> 3;
    }
    BOOL v14 = (unint64_t)v66 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v67 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14) {
      unint64_t v67 = v65;
    }
    if (v67 >> 60) {
      goto LABEL_135;
    }
    uint64_t v68 = 16 * v67;
    unint64_t v69 = (char *)operator new(16 * v67);
    uint64_t v70 = &v69[16 * (v64 >> 4)];
    *(void *)uint64_t v70 = v60;
    int v62 = v70 + 16;
    for (*(int32x2_t *)&v69[v64 + 8] = vdup_n_s32(v5); v49 != v63; *((void *)v70 + 1) = v49[1])
    {
      uint64_t v71 = *(v49 - 2);
      v49 -= 2;
      *((void *)v70 - 2) = v71;
      v70 -= 16;
    }
    *(void *)a2 = v70;
    *(void *)(a2 + 8) = v62;
    *(void *)(a2 + 16) = &v69[v68];
    if (v63)
    {
      operator delete(v63);
      unsigned int v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    *uint64_t v49 = v60;
    int v62 = v49 + 2;
    *((_DWORD *)v49 + 2) = v5;
    *((_DWORD *)v49 + 3) = v5;
  }
  *(void *)(a2 + 8) = v62;
  uint64_t v72 = **(void **)(a1 + 2544);
  unint64_t v73 = *(void *)(a2 + 16);
  if ((unint64_t)v62 >= v73)
  {
    __int16 v75 = *(void **)a2;
    uint64_t v76 = (uint64_t)v62 - *(void *)a2;
    unint64_t v77 = (v76 >> 4) + 1;
    if (v77 >> 60) {
      goto LABEL_134;
    }
    uint64_t v78 = v73 - (void)v75;
    if (v78 >> 3 > v77) {
      unint64_t v77 = v78 >> 3;
    }
    BOOL v14 = (unint64_t)v78 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v79 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14) {
      unint64_t v79 = v77;
    }
    if (v79 >> 60) {
      goto LABEL_135;
    }
    uint64_t v80 = 16 * v79;
    uint64_t v81 = (char *)operator new(16 * v79);
    uint64_t v82 = &v81[16 * (v76 >> 4)];
    *(void *)uint64_t v82 = v72;
    uint64_t v74 = v82 + 16;
    for (*(int32x2_t *)&v81[v76 + 8] = vdup_n_s32(v5); v62 != v75; *((void *)v82 + 1) = v62[1])
    {
      uint64_t v83 = *(v62 - 2);
      v62 -= 2;
      *((void *)v82 - 2) = v83;
      v82 -= 16;
    }
    *(void *)a2 = v82;
    *(void *)(a2 + 8) = v74;
    *(void *)(a2 + 16) = &v81[v80];
    if (v75)
    {
      operator delete(v75);
      unsigned int v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    *int v62 = v72;
    uint64_t v74 = v62 + 2;
    *((_DWORD *)v62 + 2) = v5;
    *((_DWORD *)v62 + 3) = v5;
  }
  *(void *)(a2 + 8) = v74;
  uint64_t v84 = **(void **)(a1 + 2560);
  unint64_t v85 = *(void *)(a2 + 16);
  if ((unint64_t)v74 >= v85)
  {
    uint64_t v87 = *(void **)a2;
    uint64_t v88 = (uint64_t)v74 - *(void *)a2;
    unint64_t v89 = (v88 >> 4) + 1;
    if (v89 >> 60) {
      goto LABEL_134;
    }
    uint64_t v90 = v85 - (void)v87;
    if (v90 >> 3 > v89) {
      unint64_t v89 = v90 >> 3;
    }
    BOOL v14 = (unint64_t)v90 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v91 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14) {
      unint64_t v91 = v89;
    }
    if (v91 >> 60) {
      goto LABEL_135;
    }
    uint64_t v92 = 16 * v91;
    BOOL v93 = (char *)operator new(16 * v91);
    uint64_t v94 = &v93[16 * (v88 >> 4)];
    *(void *)uint64_t v94 = v84;
    uint64_t v86 = v94 + 16;
    for (*(int32x2_t *)&v93[v88 + 8] = vdup_n_s32(v5); v74 != v87; *((void *)v94 + 1) = v74[1])
    {
      uint64_t v95 = *(v74 - 2);
      v74 -= 2;
      *((void *)v94 - 2) = v95;
      v94 -= 16;
    }
    *(void *)a2 = v94;
    *(void *)(a2 + 8) = v86;
    *(void *)(a2 + 16) = &v93[v92];
    if (v87)
    {
      operator delete(v87);
      unsigned int v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    *uint64_t v74 = v84;
    uint64_t v86 = v74 + 2;
    *((_DWORD *)v74 + 2) = v5;
    *((_DWORD *)v74 + 3) = v5;
  }
  *(void *)(a2 + 8) = v86;
  uint64_t v96 = **(void **)(a1 + 2552);
  unint64_t v97 = *(void *)(a2 + 16);
  if ((unint64_t)v86 >= v97)
  {
    uint64_t v99 = *(void **)a2;
    uint64_t v100 = (uint64_t)v86 - *(void *)a2;
    unint64_t v101 = (v100 >> 4) + 1;
    if (v101 >> 60) {
      goto LABEL_134;
    }
    uint64_t v102 = v97 - (void)v99;
    if (v102 >> 3 > v101) {
      unint64_t v101 = v102 >> 3;
    }
    BOOL v14 = (unint64_t)v102 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v103 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14) {
      unint64_t v103 = v101;
    }
    if (v103 >> 60) {
      goto LABEL_135;
    }
    uint64_t v104 = 16 * v103;
    unint64_t v105 = (char *)operator new(16 * v103);
    BOOL v106 = &v105[16 * (v100 >> 4)];
    *(void *)BOOL v106 = v96;
    int16x8_t v98 = v106 + 16;
    for (*(int32x2_t *)&v105[v100 + 8] = vdup_n_s32(v5); v86 != v99; *((void *)v106 + 1) = v86[1])
    {
      uint64_t v107 = *(v86 - 2);
      v86 -= 2;
      *((void *)v106 - 2) = v107;
      v106 -= 16;
    }
    *(void *)a2 = v106;
    *(void *)(a2 + 8) = v98;
    *(void *)(a2 + 16) = &v105[v104];
    if (v99)
    {
      operator delete(v99);
      unsigned int v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    void *v86 = v96;
    int16x8_t v98 = v86 + 2;
    *((_DWORD *)v86 + 2) = v5;
    *((_DWORD *)v86 + 3) = v5;
  }
  *(void *)(a2 + 8) = v98;
  uint64_t v108 = **(void **)(a1 + 2568);
  unint64_t v109 = *(void *)(a2 + 16);
  if ((unint64_t)v98 >= v109)
  {
    int16x8_t v111 = *(void **)a2;
    uint64_t v112 = (uint64_t)v98 - *(void *)a2;
    unint64_t v113 = (v112 >> 4) + 1;
    if (v113 >> 60) {
      goto LABEL_134;
    }
    uint64_t v114 = v109 - (void)v111;
    if (v114 >> 3 > v113) {
      unint64_t v113 = v114 >> 3;
    }
    BOOL v14 = (unint64_t)v114 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v115 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14) {
      unint64_t v115 = v113;
    }
    if (v115 >> 60) {
      goto LABEL_135;
    }
    uint64_t v116 = 16 * v115;
    unint64_t v117 = (char *)operator new(16 * v115);
    unint64_t v118 = &v117[16 * (v112 >> 4)];
    *(void *)unint64_t v118 = v108;
    uint64_t v110 = v118 + 16;
    BOOL v119 = &v117[v112];
    *((_DWORD *)v119 + 2) = v5;
    for (*((_DWORD *)v119 + 3) = 0; v98 != v111; *((void *)v118 + 1) = v98[1])
    {
      uint64_t v120 = *(v98 - 2);
      v98 -= 2;
      *((void *)v118 - 2) = v120;
      v118 -= 16;
    }
    *(void *)a2 = v118;
    *(void *)(a2 + 8) = v110;
    *(void *)(a2 + 16) = &v117[v116];
    if (v111)
    {
      operator delete(v111);
      unsigned int v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    *int16x8_t v98 = v108;
    uint64_t v110 = v98 + 2;
    *((_DWORD *)v98 + 2) = v5;
    *((_DWORD *)v98 + 3) = 0;
  }
  *(void *)(a2 + 8) = v110;
  uint64_t v121 = **(void **)(a1 + 2576);
  unint64_t v122 = *(void *)(a2 + 16);
  if ((unint64_t)v110 < v122)
  {
    void *v110 = v121;
    uint64_t v123 = v110 + 2;
    *((_DWORD *)v110 + 2) = v5;
    *((_DWORD *)v110 + 3) = 0;
    goto LABEL_121;
  }
  int16x8_t v124 = *(void **)a2;
  uint64_t v125 = (uint64_t)v110 - *(void *)a2;
  unint64_t v126 = (v125 >> 4) + 1;
  if (v126 >> 60) {
    goto LABEL_134;
  }
  uint64_t v127 = v122 - (void)v124;
  if (v127 >> 3 > v126) {
    unint64_t v126 = v127 >> 3;
  }
  BOOL v14 = (unint64_t)v127 >= 0x7FFFFFFFFFFFFFF0;
  unint64_t v128 = 0xFFFFFFFFFFFFFFFLL;
  if (!v14) {
    unint64_t v128 = v126;
  }
  if (v128 >> 60) {
LABEL_135:
  }
    sub_19E13C418();
  uint64_t v129 = 16 * v128;
  uint64_t v130 = (char *)operator new(16 * v128);
  unint64_t v131 = &v130[16 * (v125 >> 4)];
  unint64_t v132 = &v130[v129];
  *(void *)unint64_t v131 = v121;
  uint64_t v123 = v131 + 16;
  BOOL v133 = &v130[v125];
  *((_DWORD *)v133 + 2) = v5;
  for (*((_DWORD *)v133 + 3) = 0; v110 != v124; *((void *)v131 + 1) = v110[1])
  {
    uint64_t v134 = *(v110 - 2);
    v110 -= 2;
    *((void *)v131 - 2) = v134;
    v131 -= 16;
  }
  *(void *)a2 = v131;
  *(void *)(a2 + 8) = v123;
  *(void *)(a2 + 16) = v132;
  if (v124)
  {
    operator delete(v124);
    unsigned int v5 = *(_DWORD *)(a1 + 52);
  }
LABEL_121:
  *(void *)(a2 + 8) = v123;
  uint64_t v135 = **(void **)(a1 + 2584);
  unint64_t v136 = *(void *)(a2 + 16);
  if ((unint64_t)v123 < v136)
  {
    void *v123 = v135;
    uint64_t v137 = v123 + 2;
    *((_DWORD *)v123 + 2) = v5;
    *((_DWORD *)v123 + 3) = 0;
    goto LABEL_133;
  }
  int16x8_t v138 = *(void **)a2;
  uint64_t v139 = (uint64_t)v123 - *(void *)a2;
  unint64_t v140 = (v139 >> 4) + 1;
  if (v140 >> 60) {
LABEL_134:
  }
    sub_19E13D694();
  uint64_t v141 = v136 - (void)v138;
  if (v141 >> 3 > v140) {
    unint64_t v140 = v141 >> 3;
  }
  BOOL v14 = (unint64_t)v141 >= 0x7FFFFFFFFFFFFFF0;
  unint64_t v142 = 0xFFFFFFFFFFFFFFFLL;
  if (!v14) {
    unint64_t v142 = v140;
  }
  if (v142 >> 60) {
    goto LABEL_135;
  }
  uint64_t v143 = 16 * v142;
  unint64_t v144 = (char *)operator new(16 * v142);
  unint64_t v145 = &v144[16 * (v139 >> 4)];
  BOOL v146 = &v144[v143];
  *(void *)unint64_t v145 = v135;
  uint64_t v137 = v145 + 16;
  uint64_t v147 = &v144[v139];
  *((_DWORD *)v147 + 2) = v5;
  for (*((_DWORD *)v147 + 3) = 0; v123 != v138; *((void *)v145 + 1) = v123[1])
  {
    uint64_t v148 = *(v123 - 2);
    v123 -= 2;
    *((void *)v145 - 2) = v148;
    v145 -= 16;
  }
  *(void *)a2 = v145;
  *(void *)(a2 + 8) = v137;
  *(void *)(a2 + 16) = v146;
  if (v138) {
    operator delete(v138);
  }
LABEL_133:
  *(void *)(a2 + 8) = v137;
}

__n128 sub_19E1BDCC4(void *a1, uint64_t a2)
{
  uint64_t v2 = *(_OWORD **)(a2 + 8);
  uint64_t v3 = *((void *)v2-- - 2);
  a1[29] = v3;
  a1[313] = a1 + 29;
  *(void *)(a2 + 8) = v2;
  _OWORD *v2 = *(v2 - 1);
  a1[30] = *(void *)v2;
  a1[314] = a1 + 30;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v4 - 16;
  _OWORD *v2 = *(_OWORD *)(v4 - 32);
  a1[32] = *(void *)v2;
  a1[316] = a1 + 32;
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v5 - 16;
  _OWORD *v2 = *(_OWORD *)(v5 - 32);
  a1[31] = *(void *)v2;
  int v6 = a1 + 31;
  v6[284] = v6;
  uint64_t v7 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v7 - 16;
  _OWORD *v2 = *(_OWORD *)(v7 - 32);
  v6[2] = *(void *)v2;
  v6[286] = v6 + 2;
  uint64_t v8 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v8 - 16;
  _OWORD *v2 = *(_OWORD *)(v8 - 32);
  v6[3] = *(void *)v2;
  v6[287] = v6 + 3;
  uint64_t v9 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v9 - 16;
  _OWORD *v2 = *(_OWORD *)(v9 - 32);
  v6[5] = *(void *)v2;
  v6[289] = v6 + 5;
  uint64_t v10 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v10 - 16;
  _OWORD *v2 = *(_OWORD *)(v10 - 32);
  v6[4] = *(void *)v2;
  v6[288] = v6 + 4;
  uint64_t v11 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v11 - 16;
  _OWORD *v2 = *(_OWORD *)(v11 - 32);
  v6[6] = *(void *)v2;
  v6[290] = v6 + 6;
  uint64_t v12 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v12 - 16;
  _OWORD *v2 = *(_OWORD *)(v12 - 32);
  v6[7] = *(void *)v2;
  v6[291] = v6 + 7;
  uint64_t v13 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v13 - 16;
  __n128 result = *(__n128 *)(v13 - 32);
  _OWORD *v2 = result;
  v6[8] = *(void *)v2;
  v6[292] = v6 + 8;
  *(void *)(a2 + 8) -= 16;
  return result;
}

uint64_t sub_19E1BDE44(uint64_t result)
{
  *(unsigned char *)(result + 42) = 1;
  return result;
}

uint64_t sub_19E1BDE50(uint64_t result)
{
  *(unsigned char *)(result + 42) = 0;
  return result;
}

void sub_19E1BDE58()
{
}

void sub_19E1BDEE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E1BDEFC(void *a1)
{
  uint64_t v2 = a1[329];
  uint64_t v3 = a1[328];
  if (v2 == v3)
  {
    uint64_t v3 = a1[329];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void **)(v3 + 8 * v4);
      if (v5)
      {
        operator delete[](v5);
        uint64_t v2 = a1[329];
        uint64_t v3 = a1[328];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  uint64_t v6 = a1[332];
  uint64_t v7 = a1[331];
  if (v6 != v7)
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(void **)(v7 + 8 * v8);
      if (v9)
      {
        operator delete[](v9);
        uint64_t v6 = a1[332];
        uint64_t v7 = a1[331];
      }
      ++v8;
    }
    while (v8 < (v6 - v7) >> 3);
    a1[329] = a1[328];
    a1[332] = v7;
    uint64_t v10 = a1[136];
    uint64_t v11 = a1[135];
    if (v10 != v11) {
      goto LABEL_13;
    }
LABEL_18:
    uint64_t v11 = v10;
    goto LABEL_19;
  }
  a1[329] = v3;
  a1[332] = v6;
  uint64_t v10 = a1[136];
  uint64_t v11 = a1[135];
  if (v10 == v11) {
    goto LABEL_18;
  }
LABEL_13:
  unint64_t v12 = 0;
  do
  {
    uint64_t v13 = *(void **)(v11 + 8 * v12);
    if (v13)
    {
      operator delete[](v13);
      uint64_t v10 = a1[136];
      uint64_t v11 = a1[135];
    }
    ++v12;
  }
  while (v12 < (v10 - v11) >> 3);
LABEL_19:
  a1[136] = v11;
  BOOL v14 = (void *)a1[133];
  if (v14)
  {
    operator delete(v14);
    a1[133] = 0;
  }
  unint64_t v15 = (void *)a1[132];
  if (v15)
  {
    operator delete(v15);
    a1[132] = 0;
  }
  uint64_t v16 = a1[166];
  uint64_t v17 = a1[165];
  if (v16 == v17)
  {
    uint64_t v17 = a1[166];
  }
  else
  {
    unint64_t v18 = 0;
    do
    {
      uint64_t v19 = *(void **)(v17 + 8 * v18);
      if (v19)
      {
        operator delete[](v19);
        uint64_t v16 = a1[166];
        uint64_t v17 = a1[165];
      }
      ++v18;
    }
    while (v18 < (v16 - v17) >> 3);
  }
  a1[166] = v17;
  uint64_t v20 = (void *)a1[163];
  if (v20)
  {
    operator delete(v20);
    a1[163] = 0;
  }
  uint64_t v21 = (void *)a1[162];
  if (v21)
  {
    operator delete(v21);
    a1[162] = 0;
  }
  uint64_t v22 = a1[151];
  uint64_t v23 = a1[150];
  if (v22 == v23)
  {
    uint64_t v23 = a1[151];
  }
  else
  {
    unint64_t v24 = 0;
    do
    {
      uint64_t v25 = *(void **)(v23 + 8 * v24);
      if (v25)
      {
        operator delete[](v25);
        uint64_t v22 = a1[151];
        uint64_t v23 = a1[150];
      }
      ++v24;
    }
    while (v24 < (v22 - v23) >> 3);
  }
  a1[151] = v23;
  unint64_t v26 = (void *)a1[148];
  if (v26)
  {
    operator delete(v26);
    a1[148] = 0;
  }
  uint64_t v27 = (void *)a1[147];
  if (v27)
  {
    operator delete(v27);
    a1[147] = 0;
  }
  uint64_t v28 = a1[181];
  uint64_t v29 = a1[180];
  if (v28 == v29)
  {
    uint64_t v29 = a1[181];
  }
  else
  {
    unint64_t v30 = 0;
    do
    {
      uint64_t v31 = *(void **)(v29 + 8 * v30);
      if (v31)
      {
        operator delete[](v31);
        uint64_t v28 = a1[181];
        uint64_t v29 = a1[180];
      }
      ++v30;
    }
    while (v30 < (v28 - v29) >> 3);
  }
  a1[181] = v29;
  uint64_t v32 = (void *)a1[178];
  if (v32)
  {
    operator delete(v32);
    a1[178] = 0;
  }
  uint64_t v33 = (void *)a1[177];
  if (v33)
  {
    operator delete(v33);
    a1[177] = 0;
  }
}

void sub_19E1BE16C()
{
}

uint64_t sub_19E1BE190(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_19E1BE198(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

uint64_t sub_19E1BE1A4(uint64_t result, float a2, __n128 a3)
{
  uint64_t v3 = result;
  unsigned int v4 = *(_DWORD *)(result + 52);
  int v5 = (int)a2;
  if (*(int *)(result + 56) >= 1)
  {
    sub_19E1C703C(result + 984, (float)v5, result + 232, v4);
    sub_19E1C703C(v3 + 1224, (float)v5, v3 + 248, *(_DWORD *)(v3 + 52));
    sub_19E1C703C(v3 + 1104, (float)v5, v3 + 240, *(_DWORD *)(v3 + 52));
    __n128 result = sub_19E1C703C(v3 + 1344, (float)v5, v3 + 256, *(_DWORD *)(v3 + 52));
    goto LABEL_32;
  }
  uint64_t v6 = v4 * *(_DWORD *)(result + 48);
  if ((int)v6 < 1) {
    goto LABEL_32;
  }
  uint64_t v7 = *(void *)(result + 232);
  uint64_t v8 = *(void *)(result + 1464);
  float v9 = (float)v5;
  if (v6 < 8)
  {
    uint64_t v10 = 0;
LABEL_9:
    uint64_t v16 = v6 - v10;
    uint64_t v17 = (float *)(v8 + 4 * v10);
    unint64_t v18 = (unsigned __int16 *)(v7 + 2 * v10);
    do
    {
      a3.n128_u16[0] = *v18;
      a3.n128_u64[0] = vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
      float v19 = *v17++;
      a3.n128_f32[0] = (float)a3.n128_i32[0] + (float)(v19 * v9);
      *v18++ = (int)a3.n128_f32[0];
      --v16;
    }
    while (v16);
    goto LABEL_11;
  }
  uint64_t v10 = v6 & 0x7FFFFFF8;
  uint64_t v11 = v6 & 0xFFFFFFF8;
  unint64_t v12 = *(float32x4_t **)(result + 1464);
  uint64_t v13 = *(int16x4_t **)(result + 232);
  do
  {
    float32x4_t v14 = *v12;
    float32x4_t v15 = v12[1];
    v12 += 2;
    a3 = (__n128)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmlaq_n_f32(vcvtq_f32_s32(vmovl_s16(*v13)), v14, v9)), (int16x8_t)vcvtq_s32_f32(vmlaq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v13->i8)), v15, v9)));
    *(__n128 *)v13->i8 = a3;
    v13 += 2;
    v11 -= 8;
  }
  while (v11);
  if (v10 != v6) {
    goto LABEL_9;
  }
LABEL_11:
  uint64_t v20 = *(void *)(result + 248);
  uint64_t v21 = *(void *)(result + 1480);
  if (v6 < 8)
  {
    uint64_t v22 = 0;
LABEL_16:
    uint64_t v28 = v6 - v22;
    uint64_t v29 = (float *)(v21 + 4 * v22);
    unint64_t v30 = (unsigned __int16 *)(v20 + 2 * v22);
    do
    {
      a3.n128_u16[0] = *v30;
      a3.n128_u64[0] = vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
      float v31 = *v29++;
      a3.n128_f32[0] = (float)a3.n128_i32[0] + (float)(v31 * v9);
      *v30++ = (int)a3.n128_f32[0];
      --v28;
    }
    while (v28);
    goto LABEL_18;
  }
  uint64_t v22 = v6 & 0x7FFFFFF8;
  uint64_t v23 = v6 & 0xFFFFFFF8;
  unint64_t v24 = *(float32x4_t **)(result + 1480);
  uint64_t v25 = *(int16x4_t **)(result + 248);
  do
  {
    float32x4_t v26 = *v24;
    float32x4_t v27 = v24[1];
    v24 += 2;
    a3 = (__n128)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmlaq_n_f32(vcvtq_f32_s32(vmovl_s16(*v25)), v26, v9)), (int16x8_t)vcvtq_s32_f32(vmlaq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v25->i8)), v27, v9)));
    *(__n128 *)v25->i8 = a3;
    v25 += 2;
    v23 -= 8;
  }
  while (v23);
  if (v22 != v6) {
    goto LABEL_16;
  }
LABEL_18:
  uint64_t v32 = *(void *)(result + 240);
  uint64_t v33 = *(void *)(result + 1472);
  if (v6 >= 8)
  {
    uint64_t v34 = v6 & 0x7FFFFFF8;
    uint64_t v35 = v6 & 0xFFFFFFF8;
    uint64_t v36 = *(float32x4_t **)(result + 1472);
    int16x8_t v37 = *(int16x4_t **)(result + 240);
    do
    {
      float32x4_t v38 = *v36;
      float32x4_t v39 = v36[1];
      v36 += 2;
      a3 = (__n128)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmlaq_n_f32(vcvtq_f32_s32(vmovl_s16(*v37)), v38, v9)), (int16x8_t)vcvtq_s32_f32(vmlaq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v37->i8)), v39, v9)));
      *(__n128 *)v37->i8 = a3;
      v37 += 2;
      v35 -= 8;
    }
    while (v35);
    if (v34 == v6) {
      goto LABEL_25;
    }
  }
  else
  {
    uint64_t v34 = 0;
  }
  uint64_t v40 = v6 - v34;
  unint64_t v41 = (float *)(v33 + 4 * v34);
  uint64_t v42 = (unsigned __int16 *)(v32 + 2 * v34);
  do
  {
    a3.n128_u16[0] = *v42;
    a3.n128_u64[0] = vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
    float v43 = *v41++;
    a3.n128_f32[0] = (float)a3.n128_i32[0] + (float)(v43 * v9);
    *v42++ = (int)a3.n128_f32[0];
    --v40;
  }
  while (v40);
LABEL_25:
  uint64_t v44 = *(void *)(result + 256);
  uint64_t v45 = *(void *)(result + 1488);
  if (v6 < 8)
  {
    uint64_t v46 = 0;
LABEL_30:
    uint64_t v52 = v6 - v46;
    uint64_t v53 = (float *)(v45 + 4 * v46);
    unint64_t v54 = (unsigned __int16 *)(v44 + 2 * v46);
    do
    {
      a3.n128_u16[0] = *v54;
      a3.n128_u64[0] = vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
      float v55 = *v53++;
      a3.n128_f32[0] = (float)a3.n128_i32[0] + (float)(v55 * v9);
      *v54++ = (int)a3.n128_f32[0];
      --v52;
    }
    while (v52);
    goto LABEL_32;
  }
  uint64_t v46 = v6 & 0x7FFFFFF8;
  uint64_t v47 = v6 & 0xFFFFFFF8;
  unint64_t v48 = *(float32x4_t **)(result + 1488);
  uint64_t v49 = *(int16x4_t **)(result + 256);
  do
  {
    float32x4_t v50 = *v48;
    float32x4_t v51 = v48[1];
    v48 += 2;
    a3 = (__n128)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmlaq_n_f32(vcvtq_f32_s32(vmovl_s16(*v49)), v50, v9)), (int16x8_t)vcvtq_s32_f32(vmlaq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v49->i8)), v51, v9)));
    *(__n128 *)v49->i8 = a3;
    v49 += 2;
    v47 -= 8;
  }
  while (v47);
  if (v46 != v6) {
    goto LABEL_30;
  }
LABEL_32:
  if (!v4)
  {
    float v59 = (float)v5;
    goto LABEL_62;
  }
  uint64_t v56 = v4 * v4;
  uint64_t v57 = *(void *)(v3 + 264);
  uint64_t v58 = *(void *)(v3 + 1496);
  float v59 = (float)v5;
  if (v56 < 8)
  {
    uint64_t v60 = 0;
LABEL_39:
    uint64_t v66 = v56 - v60;
    unint64_t v67 = (float *)(v58 + 4 * v60);
    uint64_t v68 = (unsigned __int16 *)(v57 + 2 * v60);
    do
    {
      a3.n128_u16[0] = *v68;
      a3.n128_u64[0] = vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
      float v69 = *v67++;
      a3.n128_f32[0] = (float)a3.n128_i32[0] + (float)(v69 * v59);
      *v68++ = (int)a3.n128_f32[0];
      --v66;
    }
    while (v66);
    goto LABEL_41;
  }
  uint64_t v60 = v56 & 0x7FFFFFF8;
  uint64_t v61 = v60;
  int v62 = *(float32x4_t **)(v3 + 1496);
  uint64_t v63 = *(int16x4_t **)(v3 + 264);
  do
  {
    float32x4_t v64 = *v62;
    float32x4_t v65 = v62[1];
    v62 += 2;
    a3 = (__n128)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmlaq_n_f32(vcvtq_f32_s32(vmovl_s16(*v63)), v64, v59)), (int16x8_t)vcvtq_s32_f32(vmlaq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v63->i8)), v65, v59)));
    *(__n128 *)v63->i8 = a3;
    v63 += 2;
    v61 -= 8;
  }
  while (v61);
  if (v60 != v56) {
    goto LABEL_39;
  }
LABEL_41:
  uint64_t v70 = *(void *)(v3 + 280);
  uint64_t v71 = *(void *)(v3 + 1512);
  if (v56 < 8)
  {
    uint64_t v72 = 0;
LABEL_46:
    uint64_t v78 = v56 - v72;
    unint64_t v79 = (float *)(v71 + 4 * v72);
    uint64_t v80 = (unsigned __int16 *)(v70 + 2 * v72);
    do
    {
      a3.n128_u16[0] = *v80;
      a3.n128_u64[0] = vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
      float v81 = *v79++;
      a3.n128_f32[0] = (float)a3.n128_i32[0] + (float)(v81 * v59);
      *v80++ = (int)a3.n128_f32[0];
      --v78;
    }
    while (v78);
    goto LABEL_48;
  }
  uint64_t v72 = v56 & 0x7FFFFFF8;
  uint64_t v73 = v72;
  uint64_t v74 = *(float32x4_t **)(v3 + 1512);
  __int16 v75 = *(int16x4_t **)(v3 + 280);
  do
  {
    float32x4_t v76 = *v74;
    float32x4_t v77 = v74[1];
    v74 += 2;
    a3 = (__n128)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmlaq_n_f32(vcvtq_f32_s32(vmovl_s16(*v75)), v76, v59)), (int16x8_t)vcvtq_s32_f32(vmlaq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v75->i8)), v77, v59)));
    *(__n128 *)v75->i8 = a3;
    v75 += 2;
    v73 -= 8;
  }
  while (v73);
  if (v72 != v56) {
    goto LABEL_46;
  }
LABEL_48:
  uint64_t v82 = *(void *)(v3 + 272);
  uint64_t v83 = *(void *)(v3 + 1504);
  if (v56 < 8)
  {
    uint64_t v84 = 0;
LABEL_53:
    uint64_t v90 = v56 - v84;
    unint64_t v91 = (float *)(v83 + 4 * v84);
    uint64_t v92 = (unsigned __int16 *)(v82 + 2 * v84);
    do
    {
      a3.n128_u16[0] = *v92;
      a3.n128_u64[0] = vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
      float v93 = *v91++;
      a3.n128_f32[0] = (float)a3.n128_i32[0] + (float)(v93 * v59);
      *v92++ = (int)a3.n128_f32[0];
      --v90;
    }
    while (v90);
    goto LABEL_55;
  }
  uint64_t v84 = v56 & 0x7FFFFFF8;
  uint64_t v85 = v84;
  uint64_t v86 = *(float32x4_t **)(v3 + 1504);
  uint64_t v87 = *(int16x4_t **)(v3 + 272);
  do
  {
    float32x4_t v88 = *v86;
    float32x4_t v89 = v86[1];
    v86 += 2;
    a3 = (__n128)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmlaq_n_f32(vcvtq_f32_s32(vmovl_s16(*v87)), v88, v59)), (int16x8_t)vcvtq_s32_f32(vmlaq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v87->i8)), v89, v59)));
    *(__n128 *)v87->i8 = a3;
    v87 += 2;
    v85 -= 8;
  }
  while (v85);
  if (v84 != v56) {
    goto LABEL_53;
  }
LABEL_55:
  uint64_t v94 = *(void *)(v3 + 288);
  uint64_t v95 = *(void *)(v3 + 1520);
  if (v56 < 8)
  {
    uint64_t v96 = 0;
LABEL_60:
    uint64_t v102 = v56 - v96;
    unint64_t v103 = (float *)(v95 + 4 * v96);
    uint64_t v104 = (unsigned __int16 *)(v94 + 2 * v96);
    do
    {
      a3.n128_u16[0] = *v104;
      a3.n128_u64[0] = vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
      float v105 = *v103++;
      a3.n128_f32[0] = (float)a3.n128_i32[0] + (float)(v105 * v59);
      *v104++ = (int)a3.n128_f32[0];
      --v102;
    }
    while (v102);
    goto LABEL_62;
  }
  uint64_t v96 = v56 & 0x7FFFFFF8;
  uint64_t v97 = v96;
  int16x8_t v98 = *(float32x4_t **)(v3 + 1520);
  uint64_t v99 = *(int16x4_t **)(v3 + 288);
  do
  {
    float32x4_t v100 = *v98;
    float32x4_t v101 = v98[1];
    v98 += 2;
    a3 = (__n128)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmlaq_n_f32(vcvtq_f32_s32(vmovl_s16(*v99)), v100, v59)), (int16x8_t)vcvtq_s32_f32(vmlaq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v99->i8)), v101, v59)));
    *(__n128 *)v99->i8 = a3;
    v99 += 2;
    v97 -= 8;
  }
  while (v97);
  if (v96 != v56) {
    goto LABEL_60;
  }
LABEL_62:
  uint64_t v106 = *(unsigned int *)(v3 + 52);
  if ((int)v106 < 1) {
    return result;
  }
  uint64_t v107 = *(float32x4_t **)(v3 + 1528);
  uint64_t v108 = *(int16x8_t **)(v3 + 296);
  if (v106 < 0x10)
  {
    uint64_t v109 = 0;
LABEL_68:
    uint64_t v119 = v106 - v109;
    uint64_t v120 = &v108->i16[v109];
    uint64_t v121 = &v107->f32[v109];
    do
    {
      float v122 = *v121++;
      *v120++ += (int)(float)(v122 * v59);
      --v119;
    }
    while (v119);
    goto LABEL_70;
  }
  uint64_t v109 = v106 & 0x7FFFFFF0;
  uint64_t v110 = v107 + 2;
  int16x8_t v111 = v108 + 1;
  uint64_t v112 = v106 & 0xFFFFFFF0;
  do
  {
    float32x4_t v114 = v110[-2];
    float32x4_t v113 = v110[-1];
    float32x4_t v116 = *v110;
    float32x4_t v115 = v110[1];
    v110 += 4;
    int16x8_t v117 = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(v114, v59)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(v113, v59)));
    int16x8_t v118 = vaddq_s16(*v111, vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(v116, v59)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(v115, v59))));
    v111[-1] = vaddq_s16(v111[-1], v117);
    int16x8_t *v111 = v118;
    v111 += 2;
    v112 -= 16;
  }
  while (v112);
  if (v109 != v106) {
    goto LABEL_68;
  }
LABEL_70:
  uint64_t v123 = *(float32x4_t **)(v3 + 1544);
  int16x8_t v124 = *(int16x8_t **)(v3 + 312);
  if (v106 < 0x10)
  {
    uint64_t v125 = 0;
LABEL_75:
    uint64_t v135 = v106 - v125;
    unint64_t v136 = &v124->i16[v125];
    uint64_t v137 = &v123->f32[v125];
    do
    {
      float v138 = *v137++;
      *v136++ += (int)(float)(v138 * v59);
      --v135;
    }
    while (v135);
    goto LABEL_77;
  }
  uint64_t v125 = v106 & 0x7FFFFFF0;
  unint64_t v126 = v123 + 2;
  uint64_t v127 = v124 + 1;
  uint64_t v128 = v106 & 0xFFFFFFF0;
  do
  {
    float32x4_t v130 = v126[-2];
    float32x4_t v129 = v126[-1];
    float32x4_t v132 = *v126;
    float32x4_t v131 = v126[1];
    v126 += 4;
    int16x8_t v133 = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(v130, v59)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(v129, v59)));
    int16x8_t v134 = vaddq_s16(*v127, vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(v132, v59)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(v131, v59))));
    v127[-1] = vaddq_s16(v127[-1], v133);
    int16x8_t *v127 = v134;
    v127 += 2;
    v128 -= 16;
  }
  while (v128);
  if (v125 != v106) {
    goto LABEL_75;
  }
LABEL_77:
  uint64_t v139 = *(float32x4_t **)(v3 + 1536);
  unint64_t v140 = *(int16x8_t **)(v3 + 304);
  if (v106 < 0x10)
  {
    uint64_t v141 = 0;
LABEL_82:
    uint64_t v151 = v106 - v141;
    uint64_t v152 = &v140->i16[v141];
    uint64_t v153 = &v139->f32[v141];
    do
    {
      float v154 = *v153++;
      *v152++ += (int)(float)(v154 * v59);
      --v151;
    }
    while (v151);
    return result;
  }
  uint64_t v141 = v106 & 0x7FFFFFF0;
  unint64_t v142 = v139 + 2;
  uint64_t v143 = v140 + 1;
  uint64_t v144 = v106 & 0xFFFFFFF0;
  do
  {
    float32x4_t v146 = v142[-2];
    float32x4_t v145 = v142[-1];
    float32x4_t v148 = *v142;
    float32x4_t v147 = v142[1];
    v142 += 4;
    int16x8_t v149 = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(v146, v59)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(v145, v59)));
    int16x8_t v150 = vaddq_s16(*v143, vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(v148, v59)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(v147, v59))));
    v143[-1] = vaddq_s16(v143[-1], v149);
    *uint64_t v143 = v150;
    v143 += 2;
    v144 -= 16;
  }
  while (v144);
  if (v141 != v106) {
    goto LABEL_82;
  }
  return result;
}

void sub_19E1BE928(uint64_t a1, uint64_t a2, void *a3, void *a4, int a5)
{
  int v530 = a5 - 1;
  if (a5 >= 1)
  {
    v517 = (void **)(a1 + 1648);
    uint64_t v6 = (void **)(a1 + 1656);
    v524 = (float **)(a1 + 1672);
    v525 = (void **)(a1 + 1640);
    v521 = (float **)(a1 + 1680);
    v523 = (void **)(a1 + 1664);
    v520 = (void **)(a1 + 1688);
    int v7 = a5 - 1;
    v513 = (void **)(a1 + 1656);
    while (1)
    {
      int v8 = v530 - v7;
      int v519 = v7;
      if (*(unsigned char *)(a1 + 2672))
      {
        BOOL v9 = v8 < v530;
      }
      else
      {
        int v8 = v7;
        BOOL v9 = v7 > 0;
      }
      BOOL v527 = v9;
      if (*(unsigned char *)(a1 + 2672)) {
        BOOL v10 = v8 > 0;
      }
      else {
        BOOL v10 = v8 < v530;
      }
      if (*(unsigned char *)(a1 + 2672)) {
        int v11 = v8 + 1;
      }
      else {
        int v11 = v8 - 1;
      }
      int v516 = v11;
      uint64_t v12 = v8;
      memmove(*(void **)(*(void *)(a1 + 840) + 8 * v8), *(const void **)(*a4 + 8 * v8), 4 * *(int *)(a1 + 52));
      uint64_t v13 = v12;
      uint64_t v14 = 8 * v12;
      if (v10) {
        sub_19E1C7A94();
      }
      v534 = *(const void **)(*(void *)(a1 + 352) + 8 * v12);
      v533 = *(const void **)(*(void *)(a1 + 376) + 8 * v12);
      v532 = *(const void **)(*(void *)(a1 + 424) + 8 * v12);
      v531 = *(const void **)(*(void *)(a1 + 400) + 8 * v12);
      float32x4_t v15 = *(float32x4_t **)(*(void *)(a1 + 448) + 8 * v12);
      uint64_t v16 = *(float32x4_t **)(*(void *)(a1 + 496) + v14);
      sub_19E1C7244(v525, &v531, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 736));
      sub_19E1C7244(v517, &v533, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 736));
      sub_19E1C7244(v6, &v534, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 736));
      sub_19E1C7520(v524, (const float **)&v532, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 740));
      sub_19E1C7244(v523, &v532, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 740));
      sub_19E1C7520(v521, (const float **)(*(void *)(a1 + 88) + v14), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 744));
      sub_19E1C7244(v520, (const void **)(*(void *)(a1 + 88) + v14), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 744));
      uint64_t v17 = *(void *)(a1 + 864);
      uint64_t v18 = *(void *)(a1 + 840);
      uint64_t v19 = *(int *)(a1 + 52);
      uint64_t v20 = 4 * v19;
      bzero(*(void **)(v17 + v14), 4 * v19);
      int v21 = (int)v19 / 8;
      if ((int)v19 >= 8)
      {
        uint64_t v22 = *(float32x4_t **)(v17 + v14);
        uint64_t v23 = *(float32x4_t **)(v18 + v14);
        unint64_t v24 = *v521;
        int v25 = (int)v19 / 8;
        float32x4_t v26 = (float32x4_t *)*v525;
        do
        {
          float32x4_t v27 = *v26;
          float32x4_t v28 = v26[1];
          v26 += 2;
          float32x4_t v29 = *(float32x4_t *)v24;
          float32x4_t v30 = *(float32x4_t *)(v24 + 4);
          v24 += 8;
          float32x4_t v31 = vmulq_f32(v30, v28);
          float32x4_t v32 = vmulq_f32(v29, v27);
          float32x4_t v34 = *v23;
          float32x4_t v33 = v23[1];
          v23 += 2;
          float32x4_t v35 = vmlaq_f32(v22[1], v31, v33);
          *uint64_t v22 = vmlaq_f32(*v22, v32, v34);
          v22[1] = v35;
          v22 += 2;
          --v25;
        }
        while (v25);
      }
      int v36 = 8 * v21;
      if (8 * v21 < (int)v19)
      {
        int16x8_t v37 = (char *)*v525;
        uint64_t v38 = *(void *)(v18 + v14);
        float32x4_t v39 = *v521;
        uint64_t v40 = *(void *)(v17 + v14);
        uint64_t v41 = v36;
        unint64_t v42 = v19 - v36;
        if (v42 < 8) {
          goto LABEL_42;
        }
        uint64_t v43 = 4 * v36;
        unint64_t v44 = v40 + v43;
        unint64_t v45 = v40 + v20;
        BOOL v46 = v40 + v43 >= (unint64_t)&v39[(unint64_t)v20 / 4]
           || (unint64_t)&v39[(unint64_t)v43 / 4] >= v45;
        BOOL v47 = !v46;
        BOOL v48 = v44 >= v38 + v20 || v38 + 4 * v41 >= v45;
        BOOL v49 = !v48;
        if ((unint64_t)&v37[v43] < v45 && v44 < (unint64_t)&v37[v20]) {
          goto LABEL_42;
        }
        if (v47) {
          goto LABEL_42;
        }
        if (v49) {
          goto LABEL_42;
        }
        uint64_t v51 = v42 - (v19 & 7) + v41;
        uint64_t v52 = v41 + (v19 & 7) - v19;
        uint64_t v53 = (float32x4_t *)(v40 + v43 + 16);
        unint64_t v54 = (float32x4_t *)&v37[v43 + 16];
        float v55 = (float32x4_t *)(v38 + v43 + 16);
        uint64_t v56 = (float32x4_t *)&v39[(unint64_t)v43 / 4 + 4];
        do
        {
          float32x4_t v57 = vmlaq_f32(*v53, vmulq_f32(*v56, *v54), *v55);
          v53[-1] = vmlaq_f32(v53[-1], vmulq_f32(v56[-1], v54[-1]), v55[-1]);
          *uint64_t v53 = v57;
          v53 += 2;
          v54 += 2;
          v55 += 2;
          v56 += 2;
          v52 += 8;
        }
        while (v52);
        uint64_t v41 = v51;
        if ((v19 & 7) != 0)
        {
LABEL_42:
          uint64_t v58 = v19 - v41;
          float v59 = (float *)(v40 + 4 * v41);
          uint64_t v60 = (float *)(v38 + 4 * v41);
          uint64_t v61 = &v39[v41];
          int v62 = (float *)&v37[4 * v41];
          do
          {
            float v63 = *v62++;
            float v64 = v63;
            float v65 = *v61++;
            float v66 = v65;
            float v67 = *v60++;
            *float v59 = *v59 + (float)((float)(v66 * v64) * v67);
            ++v59;
            --v58;
          }
          while (v58);
        }
      }
      uint64_t v68 = *(void *)(a1 + 960);
      uint64_t v69 = *(void *)(a1 + 840);
      uint64_t v70 = *(int *)(a1 + 52);
      uint64_t v71 = 4 * v70;
      bzero(*(void **)(v68 + 8 * v13), 4 * v70);
      int v72 = (int)v70 / 8;
      if ((int)v70 >= 8)
      {
        uint64_t v73 = *(float32x4_t **)(v68 + v14);
        uint64_t v74 = *(float32x4_t **)(v69 + v14);
        int v75 = (int)v70 / 8;
        float32x4_t v76 = v16;
        float32x4_t v77 = (float32x4_t *)*v520;
        do
        {
          float32x4_t v78 = *v77;
          float32x4_t v79 = v77[1];
          v77 += 2;
          float32x4_t v80 = *v76;
          float32x4_t v81 = v76[1];
          v76 += 2;
          float32x4_t v82 = vmulq_f32(v81, v79);
          float32x4_t v83 = vmulq_f32(v80, v78);
          float32x4_t v85 = *v74;
          float32x4_t v84 = v74[1];
          v74 += 2;
          float32x4_t v86 = vmlaq_f32(v73[1], v82, v84);
          float32x4_t *v73 = vmlaq_f32(*v73, v83, v85);
          v73[1] = v86;
          v73 += 2;
          --v75;
        }
        while (v75);
      }
      int v87 = 8 * v72;
      if (8 * v72 < (int)v70)
      {
        uint64_t v88 = *(void *)(v69 + v14);
        float32x4_t v89 = (char *)*v520;
        uint64_t v90 = *(void *)(v68 + v14);
        uint64_t v91 = v87;
        unint64_t v92 = v70 - v87;
        if (v92 < 8) {
          goto LABEL_71;
        }
        uint64_t v93 = 4 * v87;
        unint64_t v94 = v90 + v93;
        unint64_t v95 = v90 + v71;
        BOOL v96 = v90 + v93 >= (unint64_t)v16 + v71 || (unint64_t)v16 + v93 >= v95;
        BOOL v97 = !v96;
        BOOL v98 = v94 >= v88 + v71 || v88 + 4 * v91 >= v95;
        BOOL v99 = !v98;
        if ((unint64_t)&v89[v93] < v95 && v94 < (unint64_t)&v89[v71]) {
          goto LABEL_71;
        }
        if (v97) {
          goto LABEL_71;
        }
        if (v99) {
          goto LABEL_71;
        }
        uint64_t v101 = v92 - (v70 & 7) + v91;
        uint64_t v102 = v91 + (v70 & 7) - v70;
        unint64_t v103 = (float32x4_t *)(v90 + v93 + 16);
        uint64_t v104 = (float32x4_t *)&v89[v93 + 16];
        float v105 = (float32x4_t *)(v88 + v93 + 16);
        uint64_t v106 = (float32x4_t *)((char *)v16 + v93 + 16);
        do
        {
          float32x4_t v107 = vmlaq_f32(*v103, vmulq_f32(*v106, *v104), *v105);
          v103[-1] = vmlaq_f32(v103[-1], vmulq_f32(v106[-1], v104[-1]), v105[-1]);
          *unint64_t v103 = v107;
          v103 += 2;
          v104 += 2;
          v105 += 2;
          v106 += 2;
          v102 += 8;
        }
        while (v102);
        uint64_t v91 = v101;
        if ((v70 & 7) != 0)
        {
LABEL_71:
          uint64_t v108 = v70 - v91;
          uint64_t v109 = 4 * v91;
          uint64_t v110 = (float *)(v90 + v109);
          int16x8_t v111 = (float *)(v88 + v109);
          uint64_t v112 = &v16->f32[(unint64_t)v109 / 4];
          float32x4_t v113 = (float *)&v89[v109];
          do
          {
            float v114 = *v113++;
            float v115 = v114;
            float v116 = *v112++;
            float v117 = v116;
            float v118 = *v111++;
            float *v110 = *v110 + (float)((float)(v117 * v115) * v118);
            ++v110;
            --v108;
          }
          while (v108);
        }
      }
      uint64_t v119 = *(void *)(a1 + 960);
      uint64_t v120 = *(unsigned int *)(a1 + 52);
      if ((int)v120 >= 1) {
        break;
      }
      int16x8_t v124 = v15;
      int v126 = v519;
LABEL_88:
      uint64_t v147 = *(void *)(a1 + 936);
      size_t v148 = 4 * (int)v120;
      bzero(*(void **)(v147 + 8 * v13), v148);
      int v149 = (int)v120 / 8;
      if ((int)v120 >= 8)
      {
        int16x8_t v150 = *(float32x4_t **)(v147 + v14);
        uint64_t v151 = *(float32x4_t **)(v119 + v14);
        int v152 = (int)v120 / 8;
        uint64_t v153 = v124;
        float v154 = (float32x4_t *)*v523;
        do
        {
          float32x4_t v155 = *v154;
          float32x4_t v156 = v154[1];
          v154 += 2;
          float32x4_t v157 = *v151;
          float32x4_t v158 = v151[1];
          v151 += 2;
          float32x4_t v159 = vmulq_f32(v158, v156);
          float32x4_t v160 = vmulq_f32(v157, v155);
          float32x4_t v162 = *v153;
          float32x4_t v161 = v153[1];
          v153 += 2;
          float32x4_t v163 = vmlaq_f32(v150[1], v159, v161);
          *int16x8_t v150 = vmlaq_f32(*v150, v160, v162);
          v150[1] = v163;
          v150 += 2;
          --v152;
        }
        while (v152);
      }
      int v164 = 8 * v149;
      if (8 * v149 < (int)v120)
      {
        uint64_t v165 = *(void *)(v119 + v14);
        uint64_t v166 = (char *)*v523;
        uint64_t v167 = *(void *)(v147 + v14);
        uint64_t v168 = v164;
        unint64_t v169 = (int)v120 - (uint64_t)v164;
        if (v169 < 8) {
          goto LABEL_115;
        }
        uint64_t v170 = 4 * v164;
        unint64_t v171 = v167 + v170;
        unint64_t v172 = v167 + v148;
        BOOL v173 = v167 + v170 >= v165 + v148 || v165 + v170 >= v172;
        BOOL v174 = !v173;
        BOOL v175 = v171 >= (unint64_t)v124 + v148 || (unint64_t)v124->u64 + 4 * v168 >= v172;
        BOOL v176 = !v175;
        if ((unint64_t)&v166[v170] < v172 && v171 < (unint64_t)&v166[v148]) {
          goto LABEL_115;
        }
        if (v174) {
          goto LABEL_115;
        }
        if (v176) {
          goto LABEL_115;
        }
        uint64_t v178 = v169 - (v120 & 7) + v168;
        uint64_t v179 = v168 + (v120 & 7) - (int)v120;
        v180 = (float32x4_t *)(v167 + v170 + 16);
        uint64_t v181 = (float32x4_t *)&v166[v170 + 16];
        __int16 v182 = (float32x4_t *)((char *)v124 + v170 + 16);
        uint64_t v183 = (float32x4_t *)(v165 + v170 + 16);
        do
        {
          float32x4_t v184 = vmlaq_f32(*v180, vmulq_f32(*v183, *v181), *v182);
          v180[-1] = vmlaq_f32(v180[-1], vmulq_f32(v183[-1], v181[-1]), v182[-1]);
          float32x4_t *v180 = v184;
          v180 += 2;
          v181 += 2;
          v182 += 2;
          v183 += 2;
          v179 += 8;
        }
        while (v179);
        uint64_t v168 = v178;
        if ((v120 & 7) != 0)
        {
LABEL_115:
          uint64_t v185 = (int)v120 - v168;
          float v186 = (float *)(v167 + 4 * v168);
          uint64_t v187 = &v124->f32[v168];
          int16x8_t v188 = (float *)(v165 + 4 * v168);
          uint64_t v189 = (float *)&v166[4 * v168];
          do
          {
            float v190 = *v189++;
            float v191 = v190;
            float v192 = *v188++;
            float v193 = v192;
            float v194 = *v187++;
            *float v186 = *v186 + (float)((float)(v193 * v191) * v194);
            ++v186;
            --v185;
          }
          while (v185);
        }
      }
      if (v527)
      {
        uint64_t v195 = *(void *)(a1 + 888);
        uint64_t v196 = *(void *)(a1 + 960);
        uint64_t v197 = *(void *)(a1 + 88);
        uint64_t v198 = *(int *)(a1 + 52);
        uint64_t v199 = 4 * v198;
        bzero(*(void **)(v195 + 8 * v13), 4 * v198);
        int v200 = (int)v198 / 8;
        if ((int)v198 >= 8)
        {
          uint64_t v201 = *(float32x4_t **)(v195 + v14);
          uint64_t v202 = *(float32x4_t **)(v197 + 8 * v516);
          int v203 = (int)v198 / 8;
          v204 = *(float32x4_t **)(v196 + v14);
          id v205 = (float32x4_t *)*v517;
          do
          {
            float32x4_t v206 = *v205;
            float32x4_t v207 = v205[1];
            v205 += 2;
            float32x4_t v208 = *v204;
            float32x4_t v209 = v204[1];
            v204 += 2;
            float32x4_t v210 = vmulq_f32(v209, v207);
            float32x4_t v211 = vmulq_f32(v208, v206);
            float32x4_t v213 = *v202;
            float32x4_t v212 = v202[1];
            v202 += 2;
            float32x4_t v214 = vmlaq_f32(v201[1], v210, v212);
            *uint64_t v201 = vmlaq_f32(*v201, v211, v213);
            v201[1] = v214;
            v201 += 2;
            --v203;
          }
          while (v203);
        }
        int v215 = 8 * v200;
        if (8 * v200 < (int)v198)
        {
          uint64_t v216 = *(void *)(v196 + v14);
          uint64_t v217 = *(void *)(v197 + 8 * v516);
          v218 = (char *)*v517;
          uint64_t v219 = *(void *)(v195 + v14);
          uint64_t v220 = v215;
          unint64_t v221 = v198 - v215;
          if (v221 < 8) {
            goto LABEL_145;
          }
          uint64_t v222 = 4 * v215;
          unint64_t v223 = v219 + v222;
          unint64_t v224 = v219 + v199;
          BOOL v225 = v219 + v222 >= (unint64_t)(v216 + v199) || v216 + v222 >= v224;
          BOOL v226 = !v225;
          BOOL v227 = v223 >= v217 + v199 || v217 + 4 * v220 >= v224;
          BOOL v228 = !v227;
          if ((unint64_t)&v218[v222] < v224 && v223 < (unint64_t)&v218[v199]) {
            goto LABEL_145;
          }
          if (v226) {
            goto LABEL_145;
          }
          if (v228) {
            goto LABEL_145;
          }
          uint64_t v230 = v221 - (v198 & 7) + v220;
          uint64_t v231 = v220 + (v198 & 7) - v198;
          uint64_t v232 = (float32x4_t *)(v219 + v222 + 16);
          uint64_t v233 = (float32x4_t *)&v218[v222 + 16];
          uint64_t v234 = (float32x4_t *)(v217 + v222 + 16);
          v235 = (float32x4_t *)(v216 + v222 + 16);
          do
          {
            float32x4_t v236 = vmlaq_f32(*v232, vmulq_f32(*v235, *v233), *v234);
            v232[-1] = vmlaq_f32(v232[-1], vmulq_f32(v235[-1], v233[-1]), v234[-1]);
            *uint64_t v232 = v236;
            v232 += 2;
            v233 += 2;
            v234 += 2;
            v235 += 2;
            v231 += 8;
          }
          while (v231);
          uint64_t v220 = v230;
          if ((v198 & 7) != 0)
          {
LABEL_145:
            uint64_t v237 = v198 - v220;
            v238 = (float *)(v219 + 4 * v220);
            v239 = (float *)(v217 + 4 * v220);
            uint64_t v240 = (float *)(v216 + 4 * v220);
            unint64_t v241 = (float *)&v218[4 * v220];
            do
            {
              float v242 = *v241++;
              float v243 = v242;
              float v244 = *v240++;
              float v245 = v244;
              float v246 = *v239++;
              float *v238 = *v238 + (float)((float)(v245 * v243) * v246);
              ++v238;
              --v237;
            }
            while (v237);
          }
        }
      }
      uint64_t v247 = *(void *)(a1 + 912);
      uint64_t v248 = *(void *)(a1 + 960);
      uint64_t v249 = *(int *)(a1 + 52);
      uint64_t v250 = 4 * v249;
      bzero(*(void **)(v247 + 8 * v13), 4 * v249);
      int v251 = (int)v249 / 8;
      uint64_t v6 = v513;
      if ((int)v249 >= 8)
      {
        uint64_t v252 = *(float32x4_t **)(v247 + v14);
        v253 = *v524;
        int64x2_t v254 = *(float32x4_t **)(v248 + v14);
        int v255 = (int)v249 / 8;
        v256 = (float32x4_t *)*v513;
        do
        {
          float32x4_t v257 = *v256;
          float32x4_t v258 = v256[1];
          v256 += 2;
          float32x4_t v259 = *v254;
          float32x4_t v260 = v254[1];
          v254 += 2;
          float32x4_t v261 = vmulq_f32(v260, v258);
          float32x4_t v262 = vmulq_f32(v259, v257);
          float32x4_t v264 = *(float32x4_t *)v253;
          float32x4_t v263 = *(float32x4_t *)(v253 + 4);
          v253 += 8;
          float32x4_t v265 = vmlaq_f32(v252[1], v261, v263);
          *uint64_t v252 = vmlaq_f32(*v252, v262, v264);
          v252[1] = v265;
          v252 += 2;
          --v255;
        }
        while (v255);
      }
      int v266 = 8 * v251;
      if (8 * v251 < (int)v249)
      {
        long long v267 = (char *)*v513;
        uint64_t v268 = *(void *)(v248 + v14);
        long long v269 = *v524;
        uint64_t v270 = *(void *)(v247 + v14);
        uint64_t v271 = v266;
        unint64_t v272 = v249 - v266;
        if (v272 < 8) {
          goto LABEL_174;
        }
        uint64_t v273 = 4 * v266;
        unint64_t v274 = v270 + v273;
        unint64_t v275 = v270 + v250;
        BOOL v276 = v270 + v273 >= (unint64_t)(v268 + v250) || v268 + v273 >= v275;
        BOOL v277 = !v276;
        BOOL v278 = v274 >= (unint64_t)&v269[(unint64_t)v250 / 4] || (unint64_t)&v269[v271] >= v275;
        BOOL v279 = !v278;
        if ((unint64_t)&v267[v273] < v275 && v274 < (unint64_t)&v267[v250]) {
          goto LABEL_174;
        }
        if (v277) {
          goto LABEL_174;
        }
        if (v279) {
          goto LABEL_174;
        }
        uint64_t v281 = v272 - (v249 & 7) + v271;
        uint64_t v282 = v271 + (v249 & 7) - v249;
        v283 = (float32x4_t *)(v270 + v273 + 16);
        v284 = (float32x4_t *)&v267[v273 + 16];
        unint64_t v285 = (float32x4_t *)&v269[(unint64_t)v273 / 4 + 4];
        int8x16_t v286 = (float32x4_t *)(v268 + v273 + 16);
        do
        {
          float32x4_t v287 = vmlaq_f32(*v283, vmulq_f32(*v286, *v284), *v285);
          v283[-1] = vmlaq_f32(v283[-1], vmulq_f32(v286[-1], v284[-1]), v285[-1]);
          float32x4_t *v283 = v287;
          v283 += 2;
          v284 += 2;
          v285 += 2;
          v286 += 2;
          v282 += 8;
        }
        while (v282);
        uint64_t v271 = v281;
        if ((v249 & 7) != 0)
        {
LABEL_174:
          uint64_t v288 = v249 - v271;
          v289 = (float *)(v270 + 4 * v271);
          v290 = &v269[v271];
          v291 = (float *)(v268 + 4 * v271);
          v292 = (float *)&v267[4 * v271];
          do
          {
            float v293 = *v292++;
            float v294 = v293;
            float v295 = *v291++;
            float v296 = v295;
            float v297 = *v290++;
            float *v289 = *v289 + (float)((float)(v296 * v294) * v297);
            ++v289;
            --v288;
          }
          while (v288);
        }
      }
      if (((**(uint64_t (***)(uint64_t))a1)(a1) & 1) == 0)
      {
        bzero(*(void **)(*(void *)(a1 + 816) + v14), 4 * *(int *)(a1 + 48));
        sub_19E1C7A94();
      }
      int v7 = v126 - 1;
      if (v126 <= 0) {
        goto LABEL_178;
      }
    }
    unint64_t v121 = *(void *)(*(void *)(a1 + 864) + v14);
    float v122 = **(int16x4_t ***)(a1 + 2584);
    unint64_t v123 = *(void *)(v119 + v14);
    int16x8_t v124 = v15;
    if (v120 >= 0x10)
    {
      BOOL v127 = v123 >= v121 + 4 * v120 || v121 >= v123 + 4 * v120;
      int v126 = v519;
      if (v127)
      {
        uint64_t v125 = v120 & 0x7FFFFFF0;
        uint64_t v128 = (float32x4_t *)(v121 + 32);
        float32x4_t v129 = v122 + 2;
        float32x4_t v130 = (float32x4_t *)(v123 + 32);
        uint64_t v131 = v120 & 0xFFFFFFF0;
        do
        {
          float32x4_t v132 = v128[-2];
          float32x4_t v133 = v128[-1];
          float32x4_t v134 = *v128;
          float32x4_t v135 = v128[1];
          v128 += 4;
          int16x8_t v136 = *(int16x8_t *)v129[-2].i8;
          float32x4_t v137 = vmlaq_f32(v130[-1], v133, vcvtq_f32_s32(vmovl_high_s16(v136)));
          float32x4_t v138 = vmlaq_f32(*v130, v134, vcvtq_f32_s32(vmovl_s16(*v129)));
          float32x4_t v139 = vmlaq_f32(v130[1], v135, vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v129->i8)));
          v130[-2] = vmlaq_f32(v130[-2], v132, vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v136.i8)));
          v130[-1] = v137;
          *float32x4_t v130 = v138;
          v130[1] = v139;
          v130 += 4;
          v129 += 4;
          v131 -= 16;
        }
        while (v131);
        if (v125 == v120) {
          goto LABEL_87;
        }
      }
      else
      {
        uint64_t v125 = 0;
      }
    }
    else
    {
      uint64_t v125 = 0;
      int v126 = v519;
    }
    uint64_t v140 = v120 - v125;
    uint64_t v141 = (float *)(v123 + 4 * v125);
    unint64_t v142 = (__int16 *)v122 + v125;
    uint64_t v143 = (float *)(v121 + 4 * v125);
    do
    {
      float v144 = *v143++;
      float v145 = v144;
      int v146 = *v142++;
      *uint64_t v141 = *v141 + (float)(v145 * (float)v146);
      ++v141;
      --v140;
    }
    while (v140);
LABEL_87:
    LODWORD(v120) = *(_DWORD *)(a1 + 52);
    uint64_t v119 = *(void *)(a1 + 960);
    goto LABEL_88;
  }
LABEL_178:
  uint64_t v298 = *(unsigned int *)(a1 + 52);
  if ((int)v298 > 0)
  {
    size_t v299 = 4 * v298;
    bzero(*(void **)(a1 + 1528), 4 * v298);
    v526 = (float32x4_t **)(a1 + 1536);
    bzero(*(void **)(a1 + 1536), v299);
    bzero(*(void **)(a1 + 1544), v299);
    v522 = (float32x4_t **)(a1 + 1544);
    int v300 = a5;
    if (*(int *)(a1 + 56) <= 0) {
      goto LABEL_181;
    }
    goto LABEL_180;
  }
  v526 = (float32x4_t **)(a1 + 1536);
  v522 = (float32x4_t **)(a1 + 1544);
  int v300 = a5;
  if (*(int *)(a1 + 56) > 0)
  {
LABEL_180:
    *(_DWORD *)(a1 + 1000) = 0;
    *(_DWORD *)(a1 + 1240) = 0;
    *(_DWORD *)(a1 + 1120) = 0;
    *(_DWORD *)(a1 + 1360) = 0;
  }
LABEL_181:
  if (v300 > 1)
  {
    int v528 = v300 - 2;
    for (int i = 1; i != v300; ++i)
    {
      int v305 = v300 - 2;
      int v306 = v530 - i;
      if (*(unsigned char *)(a1 + 2672))
      {
        uint64_t v307 = v306 + 1;
      }
      else
      {
        int v306 = i;
        int v305 = 1;
        uint64_t v307 = i - 1;
      }
      uint64_t v308 = *(void *)(a1 + 912);
      uint64_t v309 = *(void *)(a1 + 88);
      uint64_t v310 = *(int *)(a1 + 52);
      int v311 = (int)v310 / 8;
      if ((int)v310 >= 8)
      {
        v312 = *(float32x4_t **)(a1 + 1528);
        v313 = *(float32x4_t **)(v309 + 8 * v307);
        int v314 = (int)v310 / 8;
        v315 = *(float32x4_t **)(v308 + 8 * v306);
        do
        {
          float32x4_t v317 = *v315;
          float32x4_t v316 = v315[1];
          v315 += 2;
          float32x4_t v319 = *v313;
          float32x4_t v318 = v313[1];
          v313 += 2;
          float32x4_t v320 = vmlaq_f32(v312[1], v318, v316);
          float32x4_t *v312 = vmlaq_f32(*v312, v319, v317);
          v312[1] = v320;
          v312 += 2;
          --v314;
        }
        while (v314);
      }
      int v321 = 8 * v311;
      if (8 * v311 < (int)v310)
      {
        uint64_t v322 = *(void *)(v308 + 8 * v306);
        uint64_t v323 = *(void *)(v309 + 8 * v307);
        uint64_t v324 = *(void *)(a1 + 1528);
        uint64_t v325 = v321;
        unint64_t v326 = v310 - v321;
        if (v326 < 8) {
          goto LABEL_207;
        }
        uint64_t v327 = 4 * v321;
        unint64_t v328 = v324 + 4 * v310;
        BOOL v329 = v324 + v327 >= (unint64_t)(v323 + 4 * v310) || v323 + 4 * v321 >= v328;
        BOOL v330 = !v329;
        if (v322 + v327 < v328 && v324 + v327 < (unint64_t)(v322 + 4 * v310)) {
          goto LABEL_207;
        }
        if (v330) {
          goto LABEL_207;
        }
        uint64_t v332 = v326 - (v310 & 7) + v325;
        uint64_t v333 = v325 + (v310 & 7) - v310;
        v334 = (float32x4_t *)(v324 + v327 + 16);
        v335 = (float32x4_t *)(v322 + v327 + 16);
        v336 = (float32x4_t *)(v323 + v327 + 16);
        do
        {
          float32x4_t v337 = vmlaq_f32(*v334, *v336, *v335);
          v334[-1] = vmlaq_f32(v334[-1], v336[-1], v335[-1]);
          float32x4_t *v334 = v337;
          v334 += 2;
          v335 += 2;
          v336 += 2;
          v333 += 8;
        }
        while (v333);
        uint64_t v325 = v332;
        if ((v310 & 7) != 0)
        {
LABEL_207:
          uint64_t v338 = v310 - v325;
          v339 = (float *)(v324 + 4 * v325);
          v340 = (float *)(v323 + 4 * v325);
          v341 = (float *)(v322 + 4 * v325);
          do
          {
            float v342 = *v341++;
            float v343 = v342;
            float v344 = *v340++;
            float *v339 = *v339 + (float)(v344 * v343);
            ++v339;
            --v338;
          }
          while (v338);
        }
      }
      uint64_t v345 = *(void *)(a1 + 888);
      uint64_t v346 = *(void *)(a1 + 88);
      uint64_t v347 = *(int *)(a1 + 52);
      int v348 = (int)v347 / 8;
      if ((int)v347 >= 8)
      {
        v349 = *v526;
        v350 = *(float32x4_t **)(v346 + 8 * v307);
        int v351 = (int)v347 / 8;
        v352 = *(float32x4_t **)(v345 + 8 * v306);
        do
        {
          float32x4_t v354 = *v352;
          float32x4_t v353 = v352[1];
          v352 += 2;
          float32x4_t v356 = *v350;
          float32x4_t v355 = v350[1];
          v350 += 2;
          float32x4_t v357 = vmlaq_f32(v349[1], v355, v353);
          float32x4_t *v349 = vmlaq_f32(*v349, v356, v354);
          v349[1] = v357;
          v349 += 2;
          --v351;
        }
        while (v351);
      }
      int v358 = 8 * v348;
      if (8 * v348 < (int)v347)
      {
        uint64_t v359 = *(void *)(v345 + 8 * v306);
        uint64_t v360 = *(void *)(v346 + 8 * v307);
        v361 = *v526;
        uint64_t v362 = v358;
        unint64_t v363 = v347 - v358;
        if (v363 < 8) {
          goto LABEL_229;
        }
        uint64_t v364 = 4 * v358;
        unint64_t v365 = (unint64_t)v361->u64 + 4 * v347;
        BOOL v366 = (unint64_t)v361 + v364 >= v360 + 4 * v347 || v360 + 4 * v358 >= v365;
        BOOL v367 = !v366;
        if (v359 + v364 < v365 && (unint64_t)v361 + v364 < v359 + 4 * v347) {
          goto LABEL_229;
        }
        if (v367) {
          goto LABEL_229;
        }
        uint64_t v369 = v363 - (v347 & 7) + v362;
        uint64_t v370 = v362 + (v347 & 7) - v347;
        v371 = (float32x4_t *)((char *)v361 + v364 + 16);
        v372 = (float32x4_t *)(v359 + v364 + 16);
        v373 = (float32x4_t *)(v360 + v364 + 16);
        do
        {
          float32x4_t v374 = vmlaq_f32(*v371, *v373, *v372);
          v371[-1] = vmlaq_f32(v371[-1], v373[-1], v372[-1]);
          float32x4_t *v371 = v374;
          v371 += 2;
          v372 += 2;
          v373 += 2;
          v370 += 8;
        }
        while (v370);
        uint64_t v362 = v369;
        if ((v347 & 7) != 0)
        {
LABEL_229:
          uint64_t v375 = v347 - v362;
          v376 = &v361->f32[v362];
          v377 = (float *)(v360 + 4 * v362);
          v378 = (float *)(v359 + 4 * v362);
          do
          {
            float v379 = *v378++;
            float v380 = v379;
            float v381 = *v377++;
            float *v376 = *v376 + (float)(v381 * v380);
            ++v376;
            --v375;
          }
          while (v375);
        }
      }
      BOOL v302 = v306 == v305;
      uint64_t v303 = 8 * v306;
      uint64_t v304 = 8 * v307;
      sub_19E1C7984(*(void *)(a1 + 64) + v303, *(void *)(a1 + 912) + v303, *(void *)(a1 + 112) + 8 * v307, (void **)(a1 + 1496), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v302);
      sub_19E1C7984(*(void *)(a1 + 64) + v303, *(void *)(a1 + 888) + v303, *(void *)(a1 + 112) + v304, (void **)(a1 + 1504), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v302);
      sub_19E1C7984(*(void *)(a1 + 64) + v303, *(void *)(a1 + 864) + v303, *(void *)(a1 + 112) + v304, (void **)(a1 + 1512), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v302);
      sub_19E1C7984(*(void *)(a1 + 64) + v303, *(void *)(a1 + 936) + v303, *(void *)(a1 + 112) + v304, (void **)(a1 + 1520), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v302);
    }
    int v382 = 1;
    while (1)
    {
      if (*(unsigned char *)(a1 + 2672)) {
        int v383 = v530 - v382;
      }
      else {
        int v383 = v382;
      }
      if (*(unsigned char *)(a1 + 2672)) {
        int v384 = v528;
      }
      else {
        int v384 = 1;
      }
      if (a3[1] == *a3 || *(int *)(a1 + 56) < 1 || !(**(unsigned int (***)(uint64_t))a1)(a1))
      {
        sub_19E1C7984(*(void *)(a1 + 64) + 8 * v383, *(void *)(a1 + 888) + 8 * v383, *(void *)(a1 + 64) + 8 * v383, (void **)(a1 + 1472), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v383 == v384);
        goto LABEL_234;
      }
      uint64_t v385 = *(void *)(a1 + 888);
      uint64_t v386 = *(void *)(a1 + 208) + 24 * v383;
      v388 = *(unsigned char **)v386;
      v387 = *(unsigned char **)(v386 + 8);
      size_t v389 = v387 - v388;
      if (v387 != v388) {
        break;
      }
      v390 = 0;
      uint64_t v391 = *(unsigned int *)(a1 + 52);
      if ((int)v391 >= 1) {
        goto LABEL_249;
      }
LABEL_256:
      if (*(int *)(a1 + 1116) >= 1)
      {
        uint64_t v404 = 0;
        uint64_t v405 = *(void *)(a1 + 1152);
        do
        {
          *(_DWORD *)(*(void *)(v405 + 24 * *(int *)(a1 + 1120)) + 4 * v404) = v390[v404];
          ++v404;
        }
        while (v404 < *(int *)(a1 + 1116));
        ++*(_DWORD *)(a1 + 1120);
LABEL_261:
        operator delete(v390);
        goto LABEL_234;
      }
      ++*(_DWORD *)(a1 + 1120);
      if (v390) {
        goto LABEL_261;
      }
LABEL_234:
      if (++v382 == v300) {
        goto LABEL_262;
      }
    }
    if ((v389 & 0x8000000000000000) != 0) {
      sub_19E13D694();
    }
    v390 = operator new(v387 - v388);
    memcpy(v390, v388, v389);
    int v300 = a5;
    uint64_t v391 = *(unsigned int *)(a1 + 52);
    if ((int)v391 < 1) {
      goto LABEL_256;
    }
LABEL_249:
    uint64_t v392 = 0;
    uint64_t v393 = *(void *)(v385 + 8 * v383);
    uint64_t v394 = *(void *)(*(void *)(a1 + 1128) + 8 * *(int *)(a1 + 1120));
    if (v391 < 8) {
      goto LABEL_254;
    }
    if ((unint64_t)(v394 - v393) < 0x20) {
      goto LABEL_254;
    }
    uint64_t v392 = v391 & 0x7FFFFFF8;
    v395 = (long long *)(v393 + 16);
    v396 = (_OWORD *)(v394 + 16);
    uint64_t v397 = v391 & 0xFFFFFFF8;
    do
    {
      long long v398 = *v395;
      *(v396 - 1) = *(v395 - 1);
      _OWORD *v396 = v398;
      v395 += 2;
      v396 += 2;
      v397 -= 8;
    }
    while (v397);
    if (v392 != v391)
    {
LABEL_254:
      uint64_t v399 = v391 - v392;
      uint64_t v400 = 4 * v392;
      v401 = (_DWORD *)(v394 + 4 * v392);
      v402 = (int *)(v393 + v400);
      do
      {
        int v403 = *v402++;
        *v401++ = v403;
        --v399;
      }
      while (v399);
    }
    goto LABEL_256;
  }
LABEL_262:
  v406 = v522;
  if (v300 >= 1)
  {
    int v407 = 0;
    while (1)
    {
      int v410 = v530 - v407;
      if (*(unsigned char *)(a1 + 2672))
      {
        int v411 = v530;
      }
      else
      {
        int v410 = v407;
        int v411 = 0;
      }
      uint64_t v412 = v410;
      uint64_t v413 = *(void *)(a1 + 864);
      uint64_t v414 = *(void *)(a1 + 88);
      uint64_t v415 = *(int *)(a1 + 52);
      int v416 = (int)v415 / 8;
      uint64_t v417 = 8 * v412;
      if ((int)v415 >= 8)
      {
        v418 = *v406;
        v419 = *(float32x4_t **)(v414 + 8 * v412);
        int v420 = (int)v415 / 8;
        v421 = *(float32x4_t **)(v413 + 8 * v412);
        do
        {
          float32x4_t v423 = *v421;
          float32x4_t v422 = v421[1];
          v421 += 2;
          float32x4_t v425 = *v419;
          float32x4_t v424 = v419[1];
          v419 += 2;
          float32x4_t v426 = vmlaq_f32(v418[1], v424, v422);
          float32x4_t *v418 = vmlaq_f32(*v418, v425, v423);
          v418[1] = v426;
          v418 += 2;
          --v420;
        }
        while (v420);
      }
      int v427 = 8 * v416;
      if (8 * v416 < (int)v415)
      {
        uint64_t v428 = *(void *)(v413 + 8 * v412);
        uint64_t v429 = *(void *)(v414 + 8 * v412);
        v430 = *v406;
        uint64_t v431 = v427;
        unint64_t v432 = v415 - v427;
        if (v432 < 8) {
          goto LABEL_290;
        }
        uint64_t v433 = 4 * v427;
        unint64_t v434 = (unint64_t)v430->u64 + 4 * v415;
        BOOL v435 = (unint64_t)v430 + v433 >= v429 + 4 * v415 || v429 + 4 * v427 >= v434;
        BOOL v436 = !v435;
        if (v428 + v433 < v434 && (unint64_t)v430 + v433 < v428 + 4 * v415) {
          goto LABEL_290;
        }
        if (v436) {
          goto LABEL_290;
        }
        uint64_t v438 = v432 - (v415 & 7) + v431;
        uint64_t v439 = v431 + (v415 & 7) - v415;
        v440 = (float32x4_t *)((char *)v430 + v433 + 16);
        v441 = (float32x4_t *)(v428 + v433 + 16);
        v442 = (float32x4_t *)(v429 + v433 + 16);
        do
        {
          float32x4_t v443 = vmlaq_f32(*v440, *v442, *v441);
          v440[-1] = vmlaq_f32(v440[-1], v442[-1], v441[-1]);
          float32x4_t *v440 = v443;
          v440 += 2;
          v441 += 2;
          v442 += 2;
          v439 += 8;
        }
        while (v439);
        uint64_t v431 = v438;
        if ((v415 & 7) != 0)
        {
LABEL_290:
          uint64_t v444 = v415 - v431;
          v445 = &v430->f32[v431];
          v446 = (float *)(v429 + 4 * v431);
          v447 = (float *)(v428 + 4 * v431);
          do
          {
            float v448 = *v447++;
            float v449 = v448;
            float v450 = *v446++;
            float *v445 = *v445 + (float)(v450 * v449);
            ++v445;
            --v444;
          }
          while (v444);
        }
      }
      if (a3[1] == *a3)
      {
        uint64_t v408 = *(void *)(a1 + 912);
LABEL_265:
        BOOL v409 = v412 == v411;
        sub_19E1C7984(*(void *)(a1 + 64) + v417, v408 + v417, *(void *)(a1 + 64) + v417, (void **)(a1 + 1464), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v409);
        sub_19E1C7984(*(void *)(a1 + 64) + v417, *(void *)(a1 + 864) + v417, *(void *)(a1 + 64) + v417, (void **)(a1 + 1480), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v409);
        sub_19E1C7984(*(void *)(a1 + 64) + v417, *(void *)(a1 + 936) + v417, *(void *)(a1 + 64) + v417, (void **)(a1 + 1488), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v409);
        goto LABEL_266;
      }
      uint64_t v408 = *(void *)(a1 + 912);
      if (*(int *)(a1 + 56) < 1) {
        goto LABEL_265;
      }
      int v529 = v407;
      uint64_t v451 = *(void *)(a1 + 208);
      uint64_t v452 = 24 * v412;
      uint64_t v453 = v451 + 24 * v412;
      v455 = *(unsigned char **)v453;
      v454 = *(unsigned char **)(v453 + 8);
      size_t v456 = v454 - v455;
      if (v454 == v455) {
        break;
      }
      if ((v456 & 0x8000000000000000) != 0) {
        sub_19E13D694();
      }
      v457 = operator new(v454 - v455);
      memcpy(v457, v455, v456);
      uint64_t v452 = 24 * v412;
      uint64_t v458 = *(unsigned int *)(a1 + 52);
      if ((int)v458 >= 1) {
        goto LABEL_299;
      }
LABEL_306:
      if (*(int *)(a1 + 996) < 1)
      {
        ++*(_DWORD *)(a1 + 1000);
        if (!v457) {
          goto LABEL_312;
        }
      }
      else
      {
        uint64_t v471 = 0;
        uint64_t v472 = *(void *)(a1 + 1032);
        do
        {
          *(_DWORD *)(*(void *)(v472 + 24 * *(int *)(a1 + 1000)) + 4 * v471) = *((_DWORD *)v457 + v471);
          ++v471;
        }
        while (v471 < *(int *)(a1 + 996));
        ++*(_DWORD *)(a1 + 1000);
      }
      operator delete(v457);
      uint64_t v451 = *(void *)(a1 + 208);
LABEL_312:
      uint64_t v473 = *(void *)(a1 + 864);
      v474 = *(unsigned char **)(v451 + 24 * (int)v412);
      v475 = *(unsigned char **)(v451 + v452 + 8);
      size_t v476 = v475 - v474;
      if (v475 == v474)
      {
        v477 = 0;
        uint64_t v478 = *(unsigned int *)(a1 + 52);
        if ((int)v478 < 1) {
          goto LABEL_324;
        }
LABEL_317:
        uint64_t v479 = 0;
        uint64_t v480 = *(void *)(v473 + 8 * v412);
        uint64_t v481 = *(void *)(*(void *)(a1 + 1248) + 8 * *(int *)(a1 + 1240));
        if (v478 < 8) {
          goto LABEL_322;
        }
        if ((unint64_t)(v481 - v480) < 0x20) {
          goto LABEL_322;
        }
        uint64_t v479 = v478 & 0x7FFFFFF8;
        v482 = (long long *)(v480 + 16);
        v483 = (_OWORD *)(v481 + 16);
        uint64_t v484 = v478 & 0xFFFFFFF8;
        do
        {
          long long v485 = *v482;
          *(v483 - 1) = *(v482 - 1);
          _OWORD *v483 = v485;
          v482 += 2;
          v483 += 2;
          v484 -= 8;
        }
        while (v484);
        if (v479 != v478)
        {
LABEL_322:
          uint64_t v486 = v478 - v479;
          uint64_t v487 = 4 * v479;
          v488 = (_DWORD *)(v481 + 4 * v479);
          v489 = (int *)(v480 + v487);
          do
          {
            int v490 = *v489++;
            *v488++ = v490;
            --v486;
          }
          while (v486);
        }
        goto LABEL_324;
      }
      if ((v476 & 0x8000000000000000) != 0) {
        sub_19E13D694();
      }
      v477 = operator new(v475 - v474);
      memcpy(v477, v474, v476);
      uint64_t v478 = *(unsigned int *)(a1 + 52);
      if ((int)v478 >= 1) {
        goto LABEL_317;
      }
LABEL_324:
      if (*(int *)(a1 + 1236) < 1)
      {
        ++*(_DWORD *)(a1 + 1240);
        if (!v477) {
          goto LABEL_330;
        }
      }
      else
      {
        uint64_t v491 = 0;
        uint64_t v492 = *(void *)(a1 + 1272);
        do
        {
          *(_DWORD *)(*(void *)(v492 + 24 * *(int *)(a1 + 1240)) + 4 * v491) = *((_DWORD *)v477 + v491);
          ++v491;
        }
        while (v491 < *(int *)(a1 + 1236));
        ++*(_DWORD *)(a1 + 1240);
      }
      operator delete(v477);
      uint64_t v451 = *(void *)(a1 + 208);
LABEL_330:
      uint64_t v493 = *(void *)(a1 + 936);
      v494 = *(unsigned char **)(v451 + 24 * (int)v412);
      v495 = *(unsigned char **)(v451 + v452 + 8);
      size_t v496 = v495 - v494;
      if (v495 != v494)
      {
        if ((v496 & 0x8000000000000000) != 0) {
          sub_19E13D694();
        }
        v497 = operator new(v495 - v494);
        memcpy(v497, v494, v496);
        uint64_t v498 = *(unsigned int *)(a1 + 52);
        v406 = v522;
        int v407 = v529;
        if ((int)v498 < 1) {
          goto LABEL_342;
        }
LABEL_335:
        uint64_t v499 = 0;
        uint64_t v500 = *(void *)(v493 + 8 * v412);
        uint64_t v501 = *(void *)(*(void *)(a1 + 1368) + 8 * *(int *)(a1 + 1360));
        if (v498 < 8) {
          goto LABEL_340;
        }
        if ((unint64_t)(v501 - v500) < 0x20) {
          goto LABEL_340;
        }
        uint64_t v499 = v498 & 0x7FFFFFF8;
        v502 = (long long *)(v500 + 16);
        v503 = (_OWORD *)(v501 + 16);
        uint64_t v504 = v498 & 0xFFFFFFF8;
        do
        {
          long long v505 = *v502;
          *(v503 - 1) = *(v502 - 1);
          _OWORD *v503 = v505;
          v502 += 2;
          v503 += 2;
          v504 -= 8;
        }
        while (v504);
        if (v499 != v498)
        {
LABEL_340:
          uint64_t v506 = v498 - v499;
          uint64_t v507 = 4 * v499;
          v508 = (_DWORD *)(v501 + 4 * v499);
          v509 = (int *)(v500 + v507);
          do
          {
            int v510 = *v509++;
            *v508++ = v510;
            --v506;
          }
          while (v506);
        }
        goto LABEL_342;
      }
      v497 = 0;
      uint64_t v498 = *(unsigned int *)(a1 + 52);
      v406 = v522;
      int v407 = v529;
      if ((int)v498 >= 1) {
        goto LABEL_335;
      }
LABEL_342:
      if (*(int *)(a1 + 1356) >= 1)
      {
        uint64_t v511 = 0;
        uint64_t v512 = *(void *)(a1 + 1392);
        do
        {
          *(_DWORD *)(*(void *)(v512 + 24 * *(int *)(a1 + 1360)) + 4 * v511) = *((_DWORD *)v497 + v511);
          ++v511;
        }
        while (v511 < *(int *)(a1 + 1356));
        ++*(_DWORD *)(a1 + 1360);
LABEL_347:
        operator delete(v497);
        goto LABEL_266;
      }
      ++*(_DWORD *)(a1 + 1360);
      if (v497) {
        goto LABEL_347;
      }
LABEL_266:
      if (++v407 == a5) {
        return;
      }
    }
    v457 = 0;
    uint64_t v458 = *(unsigned int *)(a1 + 52);
    if ((int)v458 < 1) {
      goto LABEL_306;
    }
LABEL_299:
    uint64_t v459 = 0;
    uint64_t v460 = *(void *)(v408 + 8 * v412);
    uint64_t v461 = *(void *)(*(void *)(a1 + 1008) + 8 * *(int *)(a1 + 1000));
    if (v458 < 8) {
      goto LABEL_304;
    }
    if ((unint64_t)(v461 - v460) < 0x20) {
      goto LABEL_304;
    }
    uint64_t v459 = v458 & 0x7FFFFFF8;
    v462 = (long long *)(v460 + 16);
    v463 = (_OWORD *)(v461 + 16);
    uint64_t v464 = v458 & 0xFFFFFFF8;
    do
    {
      long long v465 = *v462;
      *(v463 - 1) = *(v462 - 1);
      _OWORD *v463 = v465;
      v462 += 2;
      v463 += 2;
      v464 -= 8;
    }
    while (v464);
    if (v459 != v458)
    {
LABEL_304:
      uint64_t v466 = v458 - v459;
      uint64_t v467 = 4 * v459;
      v468 = (_DWORD *)(v461 + 4 * v459);
      v469 = (int *)(v460 + v467);
      do
      {
        int v470 = *v469++;
        *v468++ = v470;
        --v466;
      }
      while (v466);
    }
    goto LABEL_306;
  }
}

void sub_19E1C0670(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  float32x4_t v33 = *(void **)(v31 - 144);
  if (v33)
  {
    *(void *)(v31 - 136) = v33;
    operator delete(v33);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E1C06CC(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  a1[2672] = 1;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9458498, memory_order_acquire) & 1) == 0)
  {
    uint64_t v13 = a6;
    uint64_t v12 = a5;
    unsigned int v11 = a4;
    uint64_t v9 = a2;
    uint64_t v10 = a3;
    int v8 = __cxa_guard_acquire(&qword_1E9458498);
    a2 = v9;
    a3 = v10;
    a4 = v11;
    a5 = v12;
    a6 = v13;
    if (v8)
    {
      qword_1E9458480 = 0;
      *(void *)algn_1E9458488 = 0;
      qword_1E9458490 = 0;
      __cxa_atexit((void (*)(void *))sub_19E142EEC, &qword_1E9458480, &dword_19E138000);
      __cxa_guard_release(&qword_1E9458498);
      a2 = v9;
      a3 = v10;
      a4 = v11;
      a5 = v12;
      a6 = v13;
    }
  }
  uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 304))(a1, a2, a3, a4, a5, a6, &qword_1E9458480);
  a1[2672] = 0;
  return result;
}

uint64_t sub_19E1C07C4(unsigned char *a1)
{
  a1[2672] = 1;
  uint64_t result = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 296))(a1);
  a1[2672] = 0;
  return result;
}

char *sub_19E1C081C(uint64_t a1, void *lpsrc)
{
  if (*(_DWORD *)(a1 + 2496) != 1) {
    sub_19E2F6320(1);
  }
  uint64_t result = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3E28, 0);
  if (!result) {
    __cxa_bad_cast();
  }
  *(void *)(a1 + 2504) = result + 232;
  *(void *)(a1 + 2520) = result + 248;
  *(void *)(a1 + 2512) = result + 240;
  *(void *)(a1 + 2528) = result + 256;
  *(void *)(a1 + 2536) = result + 264;
  *(void *)(a1 + 2552) = result + 280;
  *(void *)(a1 + 2544) = result + 272;
  *(void *)(a1 + 2560) = result + 288;
  *(void *)(a1 + 2568) = result + 296;
  *(void *)(a1 + 2576) = result + 304;
  *(void *)(a1 + 2584) = result + 312;
  *(void *)(a1 + 2592) = result + 320;
  *(void *)(a1 + 2600) = result + 328;
  *(void *)(a1 + 2608) = result + 336;
  *(void *)(a1 + 2616) = result + 344;
  return result;
}

void sub_19E1C0918(uint64_t a1, void *lpsrc)
{
  if (!*(_DWORD *)(a1 + 2496))
  {
    if (!__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3E28, 0))__cxa_bad_cast(); {
    sub_19E2F6320(34);
    }
  }
  sub_19E2F6320(1);
}

void sub_19E1C098C()
{
}

void sub_19E1C09A0()
{
}

void sub_19E1C09B8(void *a1)
{
  uint64_t v1 = sub_19E1C9830(a1);

  operator delete(v1);
}

uint64_t sub_19E1C09E4(uint64_t a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9458478, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = a1;
    int v3 = __cxa_guard_acquire(&qword_1E9458478);
    a1 = v4;
    if (v3)
    {
      qword_1E9458460 = 0;
      *(void *)algn_1E9458468 = 0;
      qword_1E9458470 = 0;
      __cxa_atexit((void (*)(void *))sub_19E142EEC, &qword_1E9458460, &dword_19E138000);
      __cxa_guard_release(&qword_1E9458478);
      a1 = v4;
    }
  }
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)a1 + 304);

  return v1();
}

uint64_t sub_19E1C0AD4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 296))();
}

void sub_19E1C0B00(uint64_t a1, long long *a2, int a3, int a4, char a5, float a6)
{
  *(void *)a1 = &unk_1EF0A57F0;
  *(float *)(a1 + 8) = a6;
  *(_DWORD *)(a1 + 12) = a3;
  *(_DWORD *)(a1 + 16) = a4;
  *(void *)(a1 + 24) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    sub_19E13C2D0((unsigned char *)(a1 + 32), *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v8 = *a2;
    *(void *)(a1 + 48) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v8;
  }
  *(unsigned char *)(a1 + 56) = a5;
  operator new();
}

void sub_19E1C0BF4(_Unwind_Exception *a1)
{
  operator delete(v3);
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(a1);
}

void sub_19E1C0C20(uint64_t a1, const float **a2, const float **a3, float a4)
{
  if (a4 == 0.0) {
    a4 = *(float *)(a1 + 8);
  }
  else {
    *(float *)(a1 + 8) = a4;
  }
  vDSP_Length v4 = *(int *)(a1 + 16) * (uint64_t)*(int *)(a1 + 12);
  float __B = a4;
  vDSP_vsma(*a3, 1, &__B, *a2, 1, (float *)*a2, 1, v4);
}

void sub_19E1C0C7C(uint64_t a1, uint64_t *a2, uint64_t a3, float a4)
{
  if (a4 != 0.0) {
    *(float *)(a1 + 8) = a4;
  }
  sub_19E1C1214(a3, a2, *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 16), a1);
}

float sub_19E1C0CB0(uint64_t a1, float a2)
{
  return *(float *)(a1 + 8) * a2;
}

float32_t sub_19E1C0CBC(uint64_t a1, float32x4_t a2, uint64_t a3, float32x4_t *a4, unint64_t a5, unsigned int a6)
{
  if ((int)a6 >= 1)
  {
    uint64_t v6 = (const float *)(a1 + 8);
    if (a6 < 8)
    {
      uint64_t v7 = 0;
LABEL_18:
      uint64_t v16 = (_DWORD *)(a5 + 4 * v7);
      uint64_t v17 = &a4->f32[v7];
      uint64_t v18 = a6 - v7;
      do
      {
        float v19 = *v17++;
        a2.f32[0] = *v6 * v19;
        *v16++ = a2.i32[0];
        --v18;
      }
      while (v18);
      return a2.f32[0];
    }
    uint64_t v7 = 0;
    unint64_t v8 = a5 + 4 * a6;
    BOOL v10 = a1 + 12 > a5 && (unint64_t)v6 < v8;
    if (v8 > (unint64_t)a4 && (unint64_t)a4->u64 + 4 * a6 > a5) {
      goto LABEL_18;
    }
    if (v10) {
      goto LABEL_18;
    }
    uint64_t v7 = a6 & 0x7FFFFFF8;
    a2 = vld1q_dup_f32(v6);
    uint64_t v12 = a4 + 1;
    uint64_t v13 = (float32x4_t *)(a5 + 16);
    uint64_t v14 = a6 & 0xFFFFFFF8;
    do
    {
      float32x4_t v15 = vmulq_f32(a2, *v12);
      v13[-1] = vmulq_f32(a2, v12[-1]);
      *uint64_t v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 8;
    }
    while (v14);
    if (v7 != a6) {
      goto LABEL_18;
    }
  }
  return a2.f32[0];
}

char *sub_19E1C0D78@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[55] < 0) {
    return (char *)sub_19E13C2D0((unsigned char *)a2, *((void **)result + 4), *((void *)result + 5));
  }
  *(_OWORD *)a2 = *((_OWORD *)result + 2);
  *(void *)(a2 + 16) = *((void *)result + 6);
  return result;
}

uint64_t sub_19E1C0DA4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 56);
}

float sub_19E1C0DAC(uint64_t a1)
{
  return *(float *)(a1 + 8);
}

uint64_t sub_19E1C0DB4(uint64_t a1)
{
  *(void *)a1 = &unk_1EF0A57F0;
  uint64_t v2 = *(void ***)(a1 + 24);
  if (v2)
  {
    if (!*v2 || (operator delete[](*v2), (uint64_t v2 = *(void ***)(a1 + 24)) != 0)) {
      operator delete(v2);
    }
    *(void *)(a1 + 24) = 0;
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  return a1;
}

void sub_19E1C0E3C(char *__p)
{
  *(void *)std::string __p = &unk_1EF0A57F0;
  uint64_t v2 = (void **)*((void *)__p + 3);
  if (v2)
  {
    if (!*v2 || (operator delete[](*v2), (uint64_t v2 = (void **)*((void *)__p + 3)) != 0)) {
      operator delete(v2);
    }
    *((void *)__p + 3) = 0;
  }
  if (__p[55] < 0)
  {
    operator delete(*((void **)__p + 4));
    int v3 = __p;
  }
  else
  {
    int v3 = __p;
  }
  operator delete(v3);
}

void *sub_19E1C0EE4(void *result, int a2, float a3)
{
  if (a2 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = a2;
    float v5 = a3 * 4.6566e-10;
    do
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9458940, memory_order_acquire) & 1) == 0)
      {
        float32x4_t v32 = result;
        float v28 = a3;
        float v30 = v5;
        uint64_t v24 = v4;
        uint64_t v26 = v3;
        int v11 = __cxa_guard_acquire(&qword_1E9458940);
        uint64_t v4 = v24;
        uint64_t v3 = v26;
        float v5 = v30;
        a3 = v28;
        int v12 = v11;
        uint64_t result = v32;
        if (v12)
        {
          unsigned int v13 = 5489;
          dword_1E94589E8[0] = 5489;
          uint64_t v14 = 55;
          uint64_t v15 = 1;
          do
          {
            int v16 = 1812433253 * (v13 ^ (v13 >> 30));
            unsigned int v13 = v16 + v15;
            dword_1E9458910[v14] = v14 + v16 - 54;
            ++v15;
            ++v14;
          }
          while (v14 != 678);
          qword_1E94593A8 = 0;
          __cxa_guard_release(&qword_1E9458940);
          a3 = v28;
          uint64_t result = v32;
          uint64_t v4 = v24;
          uint64_t v3 = v26;
          float v5 = v30;
        }
      }
      unint64_t v6 = (qword_1E94593A8 + 1) % 0x270uLL;
      int v7 = dword_1E94589E8[v6];
      unsigned int v8 = dword_1E94589E8[(qword_1E94593A8 + 397) % 0x270uLL] ^ ((v7 & 0x7FFFFFFE | dword_1E94589E8[qword_1E94593A8] & 0x80000000) >> 1);
      unsigned int v9 = v8 ^ (v7 << 31 >> 31) & 0x9908B0DF;
      dword_1E94589E8[qword_1E94593A8] = v9;
      qword_1E94593A8 = v6;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9458940, memory_order_acquire) & 1) == 0)
      {
        float32x4_t v33 = result;
        float v29 = a3;
        float v31 = v5;
        uint64_t v25 = v4;
        uint64_t v27 = v3;
        unsigned int v23 = v8 ^ (v7 << 31 >> 31) & 0x9908B0DF;
        int v17 = __cxa_guard_acquire(&qword_1E9458940);
        unsigned int v9 = v23;
        uint64_t v4 = v25;
        uint64_t v3 = v27;
        float v5 = v31;
        a3 = v29;
        int v18 = v17;
        uint64_t result = v33;
        if (v18)
        {
          unsigned int v19 = 5489;
          dword_1E94589E8[0] = 5489;
          uint64_t v20 = 55;
          uint64_t v21 = 1;
          do
          {
            int v22 = 1812433253 * (v19 ^ (v19 >> 30));
            unsigned int v19 = v22 + v21;
            dword_1E9458910[v20] = v20 + v22 - 54;
            ++v21;
            ++v20;
          }
          while (v20 != 678);
          qword_1E94593A8 = 0;
          __cxa_guard_release(&qword_1E9458940);
          a3 = v29;
          uint64_t result = v33;
          uint64_t v4 = v25;
          uint64_t v3 = v27;
          float v5 = v31;
          unsigned int v9 = v23;
        }
      }
      unsigned int v10 = ((v9 ^ (v9 >> 11)) << 7) & 0x9D2C5680 ^ v9 ^ (v9 >> 11);
      *(float *)(*result + 4 * v3++) = -(float)(a3
                                              - (float)(v5
                                                      * (float)((v10 << 15) & 0xEFC60000 ^ v10 ^ (((v10 << 15) & 0xEFC60000 ^ v10) >> 18))));
    }
    while (v3 != v4);
  }
  return result;
}

void sub_19E1C1214(uint64_t a1, uint64_t *a2, unsigned int a3, int a4, uint64_t a5)
{
  uint64_t v198 = 0;
  uint64_t v199 = 0;
  uint64_t v197 = &v198;
  uint64_t v195 = 0;
  uint64_t v196 = 0;
  float v194 = &v195;
  int v5 = *(_DWORD *)(a1 + 16);
  int v184 = a3;
  uint64_t v185 = a1;
  if (v5 < 1 || (int v6 = *(_DWORD *)(a1 + 12), v6 < 1))
  {
    float32x4_t v76 = &v198;
    goto LABEL_145;
  }
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  for (uint64_t i = 0; i < v5; ++i)
  {
    if (v6 >= 1)
    {
      uint64_t v9 = 0;
      while (1)
      {
        while (1)
        {
          int v10 = *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 24 * i) + 4 * v9);
          int v11 = v198;
          int v12 = &v198;
          unsigned int v13 = &v198;
          if (v198)
          {
            uint64_t v14 = &v198;
            uint64_t v15 = v198;
            do
            {
              int v16 = v15;
              int v17 = v14;
              int v18 = *((_DWORD *)v15 + 7);
              if (v18 >= v10) {
                uint64_t v14 = (void **)v15;
              }
              else {
                ++v15;
              }
              uint64_t v15 = (void *)*v15;
            }
            while (v15);
            if (v14 == &v198) {
              goto LABEL_26;
            }
            if (v18 < v10) {
              int v16 = v17;
            }
            if (v10 < *((_DWORD *)v16 + 7))
            {
LABEL_26:
              while (1)
              {
                while (1)
                {
                  unsigned int v13 = (void **)v11;
                  int v19 = *((_DWORD *)v11 + 7);
                  if (v10 >= v19) {
                    break;
                  }
                  int v11 = *v13;
                  int v12 = v13;
                  if (!*v13) {
                    goto LABEL_29;
                  }
                }
                if (v19 >= v10) {
                  break;
                }
                int v11 = v13[1];
                if (!v11)
                {
                  int v12 = v13 + 1;
                  goto LABEL_29;
                }
              }
            }
          }
          else
          {
LABEL_29:
            uint64_t v20 = operator new(0x20uLL);
            *((_DWORD *)v20 + 7) = v10;
            *uint64_t v20 = 0;
            v20[1] = 0;
            v20[2] = v13;
            void *v12 = v20;
            if (*v197)
            {
              uint64_t v197 = (void *)*v197;
              uint64_t v20 = (void *)*v12;
            }
            uint64_t v21 = v198;
            *((unsigned char *)v20 + 24) = v20 == v198;
            if (v20 != v21)
            {
              do
              {
                uint64_t v22 = v20[2];
                if (*(unsigned char *)(v22 + 24)) {
                  break;
                }
                unsigned int v23 = *(void **)(v22 + 16);
                uint64_t v24 = *v23;
                if (*v23 == v22)
                {
                  uint64_t v27 = v23[1];
                  if (!v27 || (int v28 = *(unsigned __int8 *)(v27 + 24), v25 = (unsigned char *)(v27 + 24), v28))
                  {
                    if (*(void **)v22 == v20)
                    {
                      *(unsigned char *)(v22 + 24) = 1;
                      *((unsigned char *)v23 + 24) = 0;
                      uint64_t v31 = *(void *)(v22 + 8);
                      *unsigned int v23 = v31;
                      if (v31) {
                        goto LABEL_45;
                      }
                    }
                    else
                    {
                      float v29 = *(uint64_t **)(v22 + 8);
                      uint64_t v30 = *v29;
                      *(void *)(v22 + 8) = *v29;
                      if (v30)
                      {
                        *(void *)(v30 + 16) = v22;
                        unsigned int v23 = *(void **)(v22 + 16);
                      }
                      v29[2] = (uint64_t)v23;
                      *(void *)(*(void *)(v22 + 16) + 8 * (**(void **)(v22 + 16) != v22)) = v29;
                      *float v29 = v22;
                      *(void *)(v22 + 16) = v29;
                      unsigned int v23 = (void *)v29[2];
                      uint64_t v22 = *v23;
                      *((unsigned char *)v29 + 24) = 1;
                      *((unsigned char *)v23 + 24) = 0;
                      uint64_t v31 = *(void *)(v22 + 8);
                      *unsigned int v23 = v31;
                      if (v31) {
LABEL_45:
                      }
                        *(void *)(v31 + 16) = v23;
                    }
                    *(void *)(v22 + 16) = v23[2];
                    *(void *)(v23[2] + 8 * (*(void *)v23[2] != (void)v23)) = v22;
                    *(void *)(v22 + 8) = v23;
LABEL_51:
                    v23[2] = v22;
                    break;
                  }
                }
                else if (!v24 || (int v26 = *(unsigned __int8 *)(v24 + 24), v25 = (unsigned char *)(v24 + 24), v26))
                {
                  if (*(void **)v22 == v20)
                  {
                    uint64_t v72 = v20[1];
                    *(void *)uint64_t v22 = v72;
                    if (v72)
                    {
                      *(void *)(v72 + 16) = v22;
                      unsigned int v23 = *(void **)(v22 + 16);
                    }
                    v20[2] = v23;
                    *(void *)(*(void *)(v22 + 16) + 8 * (**(void **)(v22 + 16) != v22)) = v20;
                    v20[1] = v22;
                    *(void *)(v22 + 16) = v20;
                    unsigned int v23 = (void *)v20[2];
                    *((unsigned char *)v20 + 24) = 1;
                    *((unsigned char *)v23 + 24) = 0;
                    uint64_t v22 = v23[1];
                    float32x4_t v32 = *(void **)v22;
                    v23[1] = *(void *)v22;
                    if (v32) {
LABEL_49:
                    }
                      v32[2] = v23;
                  }
                  else
                  {
                    *(unsigned char *)(v22 + 24) = 1;
                    *((unsigned char *)v23 + 24) = 0;
                    uint64_t v22 = v23[1];
                    float32x4_t v32 = *(void **)v22;
                    v23[1] = *(void *)v22;
                    if (v32) {
                      goto LABEL_49;
                    }
                  }
                  *(void *)(v22 + 16) = v23[2];
                  *(void *)(v23[2] + 8 * (*(void *)v23[2] != (void)v23)) = v22;
                  *(void *)uint64_t v22 = v23;
                  goto LABEL_51;
                }
                *(unsigned char *)(v22 + 24) = 1;
                uint64_t v20 = v23;
                *((unsigned char *)v23 + 24) = v23 == v21;
                unsigned char *v25 = 1;
              }
              while (v23 != v21);
            }
            uint64_t v199 = ++v8;
          }
          float32x4_t v33 = v195;
          float32x4_t v34 = &v195;
          float32x4_t v35 = &v195;
          if (v195) {
            break;
          }
LABEL_69:
          unint64_t v42 = (uint64_t *)operator new(0x28uLL);
          *((_DWORD *)v42 + 7) = v10;
          *((_DWORD *)v42 + 8) = 1;
          uint64_t *v42 = 0;
          v42[1] = 0;
          v42[2] = (uint64_t)v35;
          *float32x4_t v34 = v42;
          if (*v194)
          {
            float v194 = (uint64_t **)*v194;
            unint64_t v42 = *v34;
          }
          uint64_t v43 = v195;
          BOOL v157 = v42 == v195;
          *((unsigned char *)v42 + 24) = v42 == v195;
          if (!v157)
          {
            do
            {
              uint64_t v44 = v42[2];
              if (*(unsigned char *)(v44 + 24)) {
                break;
              }
              unint64_t v45 = *(uint64_t **)(v44 + 16);
              uint64_t v46 = *v45;
              if (*v45 == v44)
              {
                uint64_t v49 = v45[1];
                if (!v49 || (int v50 = *(unsigned __int8 *)(v49 + 24), v47 = (unsigned char *)(v49 + 24), v50))
                {
                  if (*(uint64_t **)v44 == v42)
                  {
                    *(unsigned char *)(v44 + 24) = 1;
                    *((unsigned char *)v45 + 24) = 0;
                    uint64_t v53 = *(void *)(v44 + 8);
                    *unint64_t v45 = v53;
                    if (v53) {
                      goto LABEL_86;
                    }
                  }
                  else
                  {
                    uint64_t v51 = *(uint64_t **)(v44 + 8);
                    uint64_t v52 = *v51;
                    *(void *)(v44 + 8) = *v51;
                    if (v52)
                    {
                      *(void *)(v52 + 16) = v44;
                      unint64_t v45 = *(uint64_t **)(v44 + 16);
                    }
                    void v51[2] = (uint64_t)v45;
                    *(void *)(*(void *)(v44 + 16) + 8 * (**(void **)(v44 + 16) != v44)) = v51;
                    *uint64_t v51 = v44;
                    *(void *)(v44 + 16) = v51;
                    unint64_t v45 = (uint64_t *)v51[2];
                    uint64_t v44 = *v45;
                    *((unsigned char *)v51 + 24) = 1;
                    *((unsigned char *)v45 + 24) = 0;
                    uint64_t v53 = *(void *)(v44 + 8);
                    *unint64_t v45 = v53;
                    if (v53) {
LABEL_86:
                    }
                      *(void *)(v53 + 16) = v45;
                  }
                  *(void *)(v44 + 16) = v45[2];
                  *(void *)(v45[2] + 8 * (*(void *)v45[2] != (void)v45)) = v44;
                  *(void *)(v44 + 8) = v45;
LABEL_10:
                  v45[2] = v44;
                  break;
                }
              }
              else if (!v46 || (int v48 = *(unsigned __int8 *)(v46 + 24), v47 = (unsigned char *)(v46 + 24), v48))
              {
                if (*(uint64_t **)v44 == v42)
                {
                  uint64_t v73 = v42[1];
                  *(void *)uint64_t v44 = v73;
                  if (v73)
                  {
                    *(void *)(v73 + 16) = v44;
                    unint64_t v45 = *(uint64_t **)(v44 + 16);
                  }
                  v42[2] = (uint64_t)v45;
                  *(void *)(*(void *)(v44 + 16) + 8 * (**(void **)(v44 + 16) != v44)) = v42;
                  v42[1] = v44;
                  *(void *)(v44 + 16) = v42;
                  unint64_t v45 = (uint64_t *)v42[2];
                  *((unsigned char *)v42 + 24) = 1;
                  *((unsigned char *)v45 + 24) = 0;
                  uint64_t v44 = v45[1];
                  float32x4_t v57 = *(uint64_t **)v44;
                  v45[1] = *(void *)v44;
                  if (!v57) {
                    goto LABEL_9;
                  }
                }
                else
                {
                  *(unsigned char *)(v44 + 24) = 1;
                  *((unsigned char *)v45 + 24) = 0;
                  uint64_t v44 = v45[1];
                  float32x4_t v57 = *(uint64_t **)v44;
                  v45[1] = *(void *)v44;
                  if (!v57) {
                    goto LABEL_9;
                  }
                }
                v57[2] = (uint64_t)v45;
LABEL_9:
                *(void *)(v44 + 16) = v45[2];
                *(void *)(v45[2] + 8 * (*(void *)v45[2] != (void)v45)) = v44;
                *(void *)uint64_t v44 = v45;
                goto LABEL_10;
              }
              *(unsigned char *)(v44 + 24) = 1;
              unint64_t v42 = v45;
              *((unsigned char *)v45 + 24) = v45 == v43;
              unsigned char *v47 = 1;
            }
            while (v45 != v43);
          }
          uint64_t v196 = ++v7;
LABEL_12:
          a1 = v185;
          if (++v9 >= v6) {
            goto LABEL_4;
          }
        }
        int v36 = &v195;
        int16x8_t v37 = v195;
        do
        {
          uint64_t v38 = v37;
          float32x4_t v39 = v36;
          int v40 = *((_DWORD *)v37 + 7);
          if (v40 >= v10) {
            int v36 = (uint64_t **)v37;
          }
          else {
            ++v37;
          }
          int16x8_t v37 = (uint64_t *)*v37;
        }
        while (v37);
        if (v36 == &v195) {
          goto LABEL_66;
        }
        if (v40 < v10) {
          uint64_t v38 = (uint64_t *)v39;
        }
        if (v10 < *((_DWORD *)v38 + 7))
        {
LABEL_66:
          while (1)
          {
            while (1)
            {
              float32x4_t v35 = (uint64_t **)v33;
              int v41 = *((_DWORD *)v33 + 7);
              if (v10 >= v41) {
                break;
              }
              float32x4_t v33 = *v35;
              float32x4_t v34 = v35;
              if (!*v35) {
                goto LABEL_69;
              }
            }
            if (v41 >= v10) {
              goto LABEL_12;
            }
            float32x4_t v33 = v35[1];
            if (!v33)
            {
              float32x4_t v34 = v35 + 1;
              goto LABEL_69;
            }
          }
        }
        do
        {
          while (1)
          {
            unint64_t v54 = v33;
            int v55 = *((_DWORD *)v33 + 7);
            if (v10 < v55) {
              break;
            }
            if (v55 >= v10)
            {
              int v71 = *((_DWORD *)v54 + 8);
              uint64_t v58 = v54;
              goto LABEL_135;
            }
            float32x4_t v33 = (uint64_t *)v54[1];
            if (!v33)
            {
              uint64_t v56 = (uint64_t **)(v54 + 1);
              goto LABEL_97;
            }
          }
          float32x4_t v33 = (uint64_t *)*v54;
        }
        while (*v54);
        uint64_t v56 = (uint64_t **)v54;
LABEL_97:
        uint64_t v58 = operator new(0x28uLL);
        v58[7] = v10;
        v58[8] = 0;
        *(void *)uint64_t v58 = 0;
        *((void *)v58 + 1) = 0;
        *((void *)v58 + 2) = v54;
        *uint64_t v56 = (uint64_t *)v58;
        float v59 = (uint64_t *)v58;
        if (*v194)
        {
          float v194 = (uint64_t **)*v194;
          float v59 = *v56;
        }
        uint64_t v60 = v195;
        BOOL v157 = v59 == v195;
        *((unsigned char *)v59 + 24) = v59 == v195;
        if (!v157)
        {
          do
          {
            uint64_t v61 = v59[2];
            if (*(unsigned char *)(v61 + 24)) {
              break;
            }
            int v62 = *(uint64_t **)(v61 + 16);
            uint64_t v63 = *v62;
            if (*v62 == v61)
            {
              uint64_t v66 = v62[1];
              if (!v66 || (int v67 = *(unsigned __int8 *)(v66 + 24), v64 = (unsigned char *)(v66 + 24), v67))
              {
                if (*(uint64_t **)v61 == v59)
                {
                  *(unsigned char *)(v61 + 24) = 1;
                  *((unsigned char *)v62 + 24) = 0;
                  uint64_t v70 = *(void *)(v61 + 8);
                  *int v62 = v70;
                  if (v70) {
                    goto LABEL_114;
                  }
                }
                else
                {
                  uint64_t v68 = *(uint64_t **)(v61 + 8);
                  uint64_t v69 = *v68;
                  *(void *)(v61 + 8) = *v68;
                  if (v69)
                  {
                    *(void *)(v69 + 16) = v61;
                    int v62 = *(uint64_t **)(v61 + 16);
                  }
                  v68[2] = (uint64_t)v62;
                  *(void *)(*(void *)(v61 + 16) + 8 * (**(void **)(v61 + 16) != v61)) = v68;
                  uint64_t *v68 = v61;
                  *(void *)(v61 + 16) = v68;
                  int v62 = (uint64_t *)v68[2];
                  uint64_t v61 = *v62;
                  *((unsigned char *)v68 + 24) = 1;
                  *((unsigned char *)v62 + 24) = 0;
                  uint64_t v70 = *(void *)(v61 + 8);
                  *int v62 = v70;
                  if (v70) {
LABEL_114:
                  }
                    *(void *)(v70 + 16) = v62;
                }
                *(void *)(v61 + 16) = v62[2];
                *(void *)(v62[2] + 8 * (*(void *)v62[2] != (void)v62)) = v61;
                *(void *)(v61 + 8) = v62;
LABEL_133:
                v62[2] = v61;
                break;
              }
            }
            else if (!v63 || (int v65 = *(unsigned __int8 *)(v63 + 24), v64 = (unsigned char *)(v63 + 24), v65))
            {
              if (*(uint64_t **)v61 == v59)
              {
                uint64_t v75 = v59[1];
                *(void *)uint64_t v61 = v75;
                if (v75)
                {
                  *(void *)(v75 + 16) = v61;
                  int v62 = *(uint64_t **)(v61 + 16);
                }
                v59[2] = (uint64_t)v62;
                *(void *)(*(void *)(v61 + 16) + 8 * (**(void **)(v61 + 16) != v61)) = v59;
                v59[1] = v61;
                *(void *)(v61 + 16) = v59;
                int v62 = (uint64_t *)v59[2];
                *((unsigned char *)v59 + 24) = 1;
                *((unsigned char *)v62 + 24) = 0;
                uint64_t v61 = v62[1];
                uint64_t v74 = *(uint64_t **)v61;
                v62[1] = *(void *)v61;
                if (v74) {
LABEL_131:
                }
                  v74[2] = (uint64_t)v62;
              }
              else
              {
                *(unsigned char *)(v61 + 24) = 1;
                *((unsigned char *)v62 + 24) = 0;
                uint64_t v61 = v62[1];
                uint64_t v74 = *(uint64_t **)v61;
                v62[1] = *(void *)v61;
                if (v74) {
                  goto LABEL_131;
                }
              }
              *(void *)(v61 + 16) = v62[2];
              *(void *)(v62[2] + 8 * (*(void *)v62[2] != (void)v62)) = v61;
              *(void *)uint64_t v61 = v62;
              goto LABEL_133;
            }
            *(unsigned char *)(v61 + 24) = 1;
            float v59 = v62;
            *((unsigned char *)v62 + 24) = v62 == v60;
            unsigned char *v64 = 1;
          }
          while (v62 != v60);
        }
        int v71 = 0;
        uint64_t v196 = ++v7;
LABEL_135:
        v58[8] = v71 + 1;
        a1 = v185;
        int v6 = *(_DWORD *)(v185 + 12);
        if (++v9 >= v6)
        {
LABEL_4:
          int v5 = *(_DWORD *)(a1 + 16);
          break;
        }
      }
    }
  }
  float32x4_t v76 = (void **)v197;
  a3 = v184;
LABEL_145:
  float v191 = 0;
  float v192 = 0;
  float v193 = 0;
  std::string __p = 0;
  uint64_t v189 = 0;
  float v190 = 0;
  uint64_t v77 = **(void **)(a1 + 80);
  if (v76 != &v198)
  {
    float32x4_t v78 = 0;
    uint64_t v79 = 0;
    uint64_t v180 = 4 * a3;
    while (1)
    {
      int v80 = *((_DWORD *)v76 + 7);
      float32x4_t v81 = v192;
      if (v192 < v193)
      {
        *(_DWORD *)float v192 = v80;
        uint64_t v82 = (uint64_t)(v192 + 4);
        goto LABEL_170;
      }
      __int16 v182 = v78;
      float32x4_t v83 = v191;
      uint64_t v84 = (v192 - v191) >> 2;
      unint64_t v85 = v84 + 1;
      if ((unint64_t)(v84 + 1) >> 62) {
        goto LABEL_288;
      }
      uint64_t v86 = v193 - v191;
      if ((v193 - v191) >> 1 > v85) {
        unint64_t v85 = v86 >> 1;
      }
      unint64_t v87 = (unint64_t)v86 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v85;
      if (v87)
      {
        if (v87 >> 62) {
          goto LABEL_287;
        }
        unint64_t v88 = v87;
        float32x4_t v89 = operator new(4 * v87);
        unint64_t v87 = v88;
        uint64_t v90 = &v89[4 * v84];
        *(_DWORD *)uint64_t v90 = v80;
        uint64_t v82 = (uint64_t)(v90 + 4);
        if (v192 == v191)
        {
LABEL_162:
          float32x4_t v78 = v182;
          goto LABEL_168;
        }
      }
      else
      {
        float32x4_t v89 = 0;
        uint64_t v90 = (char *)(4 * v84);
        *(_DWORD *)(4 * v84) = v80;
        uint64_t v82 = 4 * v84 + 4;
        if (v192 == v191) {
          goto LABEL_162;
        }
      }
      unint64_t v91 = v192 - 4 - v191;
      if (v91 < 0x2C) {
        break;
      }
      float32x4_t v78 = v182;
      if ((unint64_t)(v191 - v89) < 0x20) {
        goto LABEL_167;
      }
      uint64_t v92 = (v91 >> 2) + 1;
      uint64_t v93 = 4 * (v92 & 0x7FFFFFFFFFFFFFF8);
      unint64_t v94 = &v192[-v93];
      v90 -= v93;
      unint64_t v95 = &v89[4 * v84 - 16];
      BOOL v96 = v192 - 16;
      uint64_t v97 = v92 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v98 = *(_OWORD *)v96;
        *(v95 - 1) = *((_OWORD *)v96 - 1);
        _OWORD *v95 = v98;
        v95 -= 2;
        v96 -= 32;
        v97 -= 8;
      }
      while (v97);
      float32x4_t v81 = v94;
      if (v92 != (v92 & 0x7FFFFFFFFFFFFFF8)) {
        goto LABEL_167;
      }
LABEL_168:
      float v191 = v90;
      float v193 = &v89[4 * v87];
      if (v83)
      {
        uint64_t v100 = v82;
        operator delete(v83);
        uint64_t v82 = v100;
      }
LABEL_170:
      float v192 = (char *)v82;
      uint64_t v101 = v195;
      uint64_t v102 = &v195;
      unint64_t v103 = &v195;
      if (v195)
      {
        while (1)
        {
          while (1)
          {
            unint64_t v103 = (uint64_t **)v101;
            int v104 = *((_DWORD *)v101 + 7);
            if (v80 >= v104) {
              break;
            }
            uint64_t v101 = *v103;
            uint64_t v102 = v103;
            if (!*v103) {
              goto LABEL_177;
            }
          }
          if (v104 >= v80) {
            break;
          }
          uint64_t v101 = v103[1];
          if (!v101)
          {
            uint64_t v102 = v103 + 1;
            goto LABEL_177;
          }
        }
        float32x4_t v107 = (char *)v79;
        float v105 = v103;
        if (v107 < v78)
        {
LABEL_180:
          *(_DWORD *)float32x4_t v107 = v105[8];
          uint64_t v79 = (uint64_t)(v107 + 4);
          goto LABEL_196;
        }
      }
      else
      {
LABEL_177:
        float v105 = operator new(0x28uLL);
        v105[7] = v80;
        v105[8] = 0;
        *(void *)float v105 = 0;
        *((void *)v105 + 1) = 0;
        *((void *)v105 + 2) = v103;
        _WORD *v102 = (uint64_t *)v105;
        uint64_t v106 = (uint64_t *)v105;
        if (*v194)
        {
          float v194 = (uint64_t **)*v194;
          uint64_t v106 = *v102;
        }
        sub_19E13C8A0(v195, v106);
        ++v196;
        float32x4_t v107 = v189;
        float32x4_t v78 = v190;
        if (v189 < v190) {
          goto LABEL_180;
        }
      }
      uint64_t v108 = __p;
      int64_t v109 = v107 - __p;
      uint64_t v110 = (v107 - __p) >> 2;
      unint64_t v111 = v110 + 1;
      if ((unint64_t)(v110 + 1) >> 62) {
LABEL_288:
      }
        sub_19E13D694();
      if ((v78 - __p) >> 1 > v111) {
        unint64_t v111 = (v78 - __p) >> 1;
      }
      if ((unint64_t)(v78 - __p) >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v112 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v112 = v111;
      }
      if (v112)
      {
        if (v112 >> 62) {
LABEL_287:
        }
          sub_19E13C418();
        unint64_t v113 = v112;
        float v114 = operator new(4 * v112);
        unint64_t v112 = v113;
        int64_t v109 = v107 - __p;
        float v115 = &v114[4 * v110];
        *(_DWORD *)float v115 = v105[8];
        uint64_t v79 = (uint64_t)(v115 + 4);
        if (v107 == __p)
        {
LABEL_205:
          float32x4_t v78 = &v114[4 * v112];
          std::string __p = v115;
          float v190 = v78;
          if (!v108) {
            goto LABEL_196;
          }
LABEL_195:
          operator delete(v108);
          goto LABEL_196;
        }
      }
      else
      {
        float v114 = 0;
        float v115 = (char *)(4 * v110);
        *(_DWORD *)(4 * v110) = v105[8];
        uint64_t v79 = 4 * v110 + 4;
        if (v107 == __p) {
          goto LABEL_205;
        }
      }
      unint64_t v116 = v107 - 4 - __p;
      if (v116 < 0xBC)
      {
        float v117 = v107;
        goto LABEL_193;
      }
      if (&v114[v109 - 4 - (v116 & 0xFFFFFFFFFFFFFFFCLL)] > &v114[v109 - 4])
      {
        float v117 = v107;
        do
        {
LABEL_193:
          int v118 = *((_DWORD *)v117 - 1);
          v117 -= 4;
          *((_DWORD *)v115 - 1) = v118;
          v115 -= 4;
        }
        while (v117 != __p);
        goto LABEL_194;
      }
      if (&v107[-(v116 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v107 - 4)
      {
        float v117 = v107;
        goto LABEL_193;
      }
      if ((unint64_t)(v107 - v114 - v109) < 0x20)
      {
        float v117 = v107;
        goto LABEL_193;
      }
      uint64_t v121 = (v116 >> 2) + 1;
      uint64_t v122 = 4 * (v121 & 0x7FFFFFFFFFFFFFF8);
      float v117 = &v107[-v122];
      v115 -= v122;
      unint64_t v123 = &v114[4 * v110 - 16];
      int16x8_t v124 = v107 - 16;
      uint64_t v125 = v121 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v126 = *(_OWORD *)v124;
        *(v123 - 1) = *((_OWORD *)v124 - 1);
        _OWORD *v123 = v126;
        v123 -= 2;
        v124 -= 32;
        v125 -= 8;
      }
      while (v125);
      if (v121 != (v121 & 0x7FFFFFFFFFFFFFF8)) {
        goto LABEL_193;
      }
LABEL_194:
      float32x4_t v78 = &v114[4 * v112];
      std::string __p = v115;
      float v190 = v78;
      if (v108) {
        goto LABEL_195;
      }
LABEL_196:
      uint64_t v189 = (char *)v79;
      if (v184 >= 1) {
        bzero((void *)(v77 + 4 * v80 * v184), v180);
      }
      uint64_t v119 = v76[1];
      if (v119)
      {
        do
        {
          uint64_t v120 = (void **)v119;
          uint64_t v119 = (void *)*v119;
        }
        while (v119);
      }
      else
      {
        do
        {
          uint64_t v120 = (void **)v76[2];
          BOOL v157 = *v120 == v76;
          float32x4_t v76 = v120;
        }
        while (!v157);
      }
      float32x4_t v76 = v120;
      if (v120 == &v198)
      {
        a3 = v184;
        int v5 = *(_DWORD *)(v185 + 16);
        goto LABEL_218;
      }
    }
    float32x4_t v78 = v182;
    do
    {
LABEL_167:
      int v99 = *((_DWORD *)v81 - 1);
      v81 -= 4;
      *((_DWORD *)v90 - 1) = v99;
      v90 -= 4;
    }
    while (v81 != v191);
    goto LABEL_168;
  }
LABEL_218:
  if (v5 >= 1)
  {
    uint64_t v127 = *(unsigned int *)(v185 + 12);
    if ((int)v127 >= 1 && (int)a3 >= 1)
    {
      uint64_t v128 = *(void *)(v185 + 48);
      uint64_t v129 = *(void *)(v185 + 24);
      if (a3 < 8)
      {
        for (uint64_t j = 0; j != v5; ++j)
        {
          uint64_t v131 = *(int **)(v128 + 24 * j);
          float32x4_t v132 = *(float **)(v129 + 8 * j);
          uint64_t v133 = v127;
          do
          {
            int v134 = *v131++;
            int v135 = v134 * a3;
            *(float *)(v77 + 4 * (int)(v134 * a3)) = *(float *)(v77 + 4 * (int)(v134 * a3)) + *v132;
            if (a3 != 1)
            {
              int16x8_t v136 = (float *)(v77 + 4 * v135);
              v136[1] = v136[1] + v132[1];
              if (a3 != 2)
              {
                v136[2] = v136[2] + v132[2];
                if (a3 != 3)
                {
                  v136[3] = v136[3] + v132[3];
                  if (a3 != 4)
                  {
                    v136[4] = v136[4] + v132[4];
                    if (a3 != 5)
                    {
                      v136[5] = v136[5] + v132[5];
                      if (a3 != 6) {
                        v136[6] = v136[6] + v132[6];
                      }
                    }
                  }
                }
              }
            }
            --v133;
          }
          while (v133);
        }
        goto LABEL_248;
      }
      uint64_t v137 = 0;
      uint64_t v138 = 4 * a3;
LABEL_235:
      uint64_t v139 = 0;
      uint64_t v140 = *(void *)(v128 + 24 * v137);
      unint64_t v141 = *(void *)(v129 + 8 * v137);
      while (1)
      {
        uint64_t v142 = *(int *)(v140 + 4 * v139) * (uint64_t)(int)a3;
        if (v77 + 4 * v142 >= v141 + v138 || v141 >= v77 + v138 + 4 * v142)
        {
          float v144 = (float32x4_t *)(v77 + 16 + 4 * v142);
          uint64_t v145 = a3 & 0xFFFFFFF8;
          int v146 = (float32x4_t *)(v141 + 16);
          do
          {
            float32x4_t v147 = vaddq_f32(*v144, *v146);
            v144[-1] = vaddq_f32(v144[-1], v146[-1]);
            *float v144 = v147;
            v144 += 2;
            v146 += 2;
            v145 -= 8;
          }
          while (v145);
          uint64_t v148 = a3 & 0xFFFFFFF8;
          if (v148 == a3) {
            goto LABEL_236;
          }
        }
        else
        {
          uint64_t v148 = 0;
        }
        int v149 = (float *)(v141 + 4 * v148);
        int16x8_t v150 = (float *)(v77 + 4 * (v148 + v142));
        uint64_t v151 = a3 - v148;
        do
        {
          float v152 = *v149++;
          *int16x8_t v150 = *v150 + v152;
          ++v150;
          --v151;
        }
        while (v151);
LABEL_236:
        if (++v139 == v127)
        {
          if (++v137 == v5) {
            break;
          }
          goto LABEL_235;
        }
      }
    }
  }
LABEL_248:
  if (v192 != v191)
  {
    unint64_t v153 = **(void **)(v185 + 72);
    unint64_t v154 = (v192 - v191) >> 2;
    if (v184 > 0)
    {
      uint64_t v155 = 0;
      uint64_t v156 = 4 * v184;
      BOOL v157 = v184 >= 6 && a4 == 1;
      int v158 = !v157;
      int v187 = v158;
      while (1)
      {
        uint64_t v159 = *(int *)&v191[4 * v155];
        (*(void (**)(uint64_t, void, uint64_t, unint64_t))(*(void *)a5 + 32))(a5, (v159 * v184), v77 + 4 * (int)v159 * v184, v153);
        unint64_t v153 = **(void **)(v185 + 72);
        uint64_t v160 = *a2;
        if (!v187)
        {
          unint64_t v161 = v160 + 4 * v159;
          if (v161 >= v153 + v156 || v153 >= v161 + v156) {
            break;
          }
        }
        uint64_t v171 = 0;
LABEL_272:
        uint64_t v172 = v184 - v171;
        BOOL v173 = (float *)(v153 + 4 * v171);
        BOOL v174 = (float *)(v160 + 4 * (v159 + a4 * v171));
        do
        {
          float v175 = *v174 + *v173;
          float *v174 = v175;
          float v176 = 2.0;
          if (v175 > 2.0 || (float v176 = -2.0, v175 < -2.0)) {
            float *v174 = v176;
          }
          ++v173;
          v174 += a4;
          --v172;
        }
        while (v172);
LABEL_257:
        if (v154 <= ++v155) {
          goto LABEL_282;
        }
      }
      float32x4_t v163 = **(float32x2_t ***)(v185 + 72);
      uint64_t v164 = *a2;
      uint64_t v165 = v184 & 0xFFFFFFFE;
      while (1)
      {
        float32x2_t v166 = vadd_f32(*(float32x2_t *)(v164 + 4 * v159), *v163);
        *(float32x2_t *)(v164 + 4 * v159) = v166;
        int8x8_t v167 = (int8x8_t)vcgt_f32(v166, (float32x2_t)0x4000000040000000);
        int8x8_t v168 = (int8x8_t)vcgt_f32((float32x2_t)0xC0000000C0000000, v166);
        int8x8_t v169 = vbsl_s8(vand_s8((int8x8_t)vcge_f32((float32x2_t)0x4000000040000000, v166), v168), (int8x8_t)0xC0000000C0000000, (int8x8_t)0x4000000040000000);
        int8x8_t v170 = vorr_s8(v168, v167);
        if (v170.i8[0])
        {
          *(_DWORD *)(v164 + 4 * v159) = v169.i32[0];
          if (v170.i8[4]) {
            goto LABEL_270;
          }
        }
        else if (v170.i8[4])
        {
LABEL_270:
          *(_DWORD *)(v164 + 4 * (a4 + v159)) = v169.i32[1];
        }
        v164 += 8 * a4;
        ++v163;
        v165 -= 2;
        if (!v165)
        {
          uint64_t v171 = v184 & 0xFFFFFFFE;
          if (v171 == v184) {
            goto LABEL_257;
          }
          goto LABEL_272;
        }
      }
    }
    unint64_t v177 = 0;
    do
    {
      uint64_t v178 = (*(_DWORD *)&v191[4 * v177] * v184);
      (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(*(void *)a5 + 32))(a5, v178, v77 + 4 * (int)v178, v153);
      unint64_t v153 = **(void **)(v185 + 72);
      ++v177;
    }
    while (v154 > v177);
  }
LABEL_282:
  if (__p) {
    operator delete(__p);
  }
  if (v191) {
    operator delete(v191);
  }
  sub_19E13C56C((uint64_t)&v194, v195);
  sub_19E13C56C((uint64_t)&v197, v198);
}

void sub_19E1C2310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,char a24,void *a25)
{
  if (__p) {
    operator delete(__p);
  }
  if (a21) {
    operator delete(a21);
  }
  sub_19E13C56C((uint64_t)&a24, a25);
  sub_19E13C56C(v25 - 128, *(void **)(v25 - 120));
  _Unwind_Resume(a1);
}

uint64_t sub_19E1C236C(uint64_t result, float a2)
{
  if (a2 != 0.0) {
    *(float *)(result + 20) = a2;
  }
  if (!*(unsigned char *)(result + 16)) {
    sub_19E1C27D0();
  }
  return result;
}

double sub_19E1C2388(uint64_t a1, uint64_t *a2, uint64_t a3, float a4)
{
  if (a4 != 0.0) {
    *(float *)(a1 + 20) = a4;
  }
  if (!*(unsigned char *)(a1 + 16)) {
    sub_19E1C27D0();
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1))
  {
    int v8 = *(_DWORD *)(a1 + 56);
    unsigned int v7 = *(_DWORD *)(a1 + 60);
  }
  else
  {
    unsigned int v7 = *(_DWORD *)(a1 + 56);
    int v8 = *(_DWORD *)(a1 + 60);
  }
  sub_19E1C1214(a3, a2, v7, v8, a1);
  *(float *)(a1 + 40) = *(float *)(a1 + 40) * *(float *)(a1 + 24);
  double result = *(double *)(a1 + 48) * *(double *)(a1 + 32);
  *(double *)(a1 + 48) = result;
  ++*(void *)(a1 + 8);
  return result;
}

void sub_19E1C244C(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 24);
  *(void *)(a1 + 48) = *(void *)(a1 + 32);
  bzero(**(void ***)(a1 + 72), 4 * *(_DWORD *)(a1 + 60) * *(_DWORD *)(a1 + 56));
  bzero(**(void ***)(a1 + 80), 4 * *(_DWORD *)(a1 + 60) * *(_DWORD *)(a1 + 56));
  bzero(**(void ***)(a1 + 88), 4 * *(_DWORD *)(a1 + 60) * *(_DWORD *)(a1 + 56));
  bzero(**(void ***)(a1 + 96), 4 * *(_DWORD *)(a1 + 60) * *(_DWORD *)(a1 + 56));
  bzero(**(void ***)(a1 + 120), 4 * *(_DWORD *)(a1 + 60) * *(_DWORD *)(a1 + 56));
  uint64_t v2 = *(void ***)(a1 + 128);
  if (v2) {
    bzero(*v2, 4 * *(_DWORD *)(a1 + 60) * *(_DWORD *)(a1 + 56));
  }
  uint64_t v3 = *(void ***)(a1 + 64);
  if (v3)
  {
    uint64_t v4 = *v3;
    size_t v5 = 4 * *(_DWORD *)(a1 + 60) * *(_DWORD *)(a1 + 56);
    bzero(v4, v5);
  }
}

float sub_19E1C2548(uint64_t a1, int a2, float a3)
{
  uint64_t v4 = *(void **)(a1 + 88);
  uint64_t v3 = *(void **)(a1 + 96);
  uint64_t v5 = 4 * a2;
  uint64_t v6 = **(void **)(a1 + 80);
  *(float *)(v6 + v5) = a3 + (float)((float)(*(float *)(**(void **)(a1 + 72) + v5) - a3) * *(float *)(a1 + 24));
  float v7 = a3 * a3 + (*(float *)(*v4 + v5) - a3 * a3) * *(double *)(a1 + 32);
  *(float *)(*v3 + v5) = v7;
  float v8 = v7 / (1.0 - *(double *)(a1 + 48));
  float v9 = sqrtf(v8);
  float result = (float)(*(float *)(a1 + 20) * *(float *)(v6 + v5))
         / (float)((float)(v9 + *(float *)(a1 + 28)) - (float)(*(float *)(a1 + 40) * (float)(v9 + *(float *)(a1 + 28))));
  *(float *)(**(void **)(a1 + 120) + v5) = result;
  return result;
}

void sub_19E1C25EC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 16)) {
    sub_19E1C27D0();
  }
  if (*(int *)(a1 + 164) >= 2)
  {
    sub_19E1C2C5C(*(float ***)(a1 + 72), "prevM=", *(_DWORD *)(a1 + 56), *(_DWORD *)(a1 + 60), 6, 10);
    if (*(int *)(a1 + 164) >= 2)
    {
      uint64_t v2 = *(float ***)(a1 + 80);
      int v3 = *(_DWORD *)(a1 + 56);
      int v4 = *(_DWORD *)(a1 + 60);
      sub_19E1C2C5C(v2, "M=", v3, v4, 6, 10);
    }
  }
}

char *sub_19E1C269C@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[159] < 0) {
    return (char *)sub_19E13C2D0((unsigned char *)a2, *((void **)result + 17), *((void *)result + 18));
  }
  *(_OWORD *)a2 = *(_OWORD *)(result + 136);
  *(void *)(a2 + 16) = *((void *)result + 19);
  return result;
}

uint64_t sub_19E1C26C8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 160);
}

float sub_19E1C26D0(uint64_t a1)
{
  return *(float *)(a1 + 20);
}

uint64_t sub_19E1C26D8(uint64_t a1)
{
  *(void *)a1 = &unk_1EF0A5090;
  sub_19E1C3C24(a1);
  *(unsigned char *)(a1 + 16) = 0;
  if (*(char *)(a1 + 159) < 0) {
    operator delete(*(void **)(a1 + 136));
  }
  return a1;
}

void sub_19E1C2744(uint64_t a1)
{
  *(void *)a1 = &unk_1EF0A5090;
  sub_19E1C3C24(a1);
  *(unsigned char *)(a1 + 16) = 0;
  if (*(char *)(a1 + 159) < 0)
  {
    operator delete(*(void **)(a1 + 136));
    uint64_t v2 = (void *)a1;
  }
  else
  {
    uint64_t v2 = (void *)a1;
  }
  operator delete(v2);
}

void sub_19E1C27D0()
{
}

void sub_19E1C2BA8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E1C2BBC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E1C2BD0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E1C2BE4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E1C2BF8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E1C2C0C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E1C2C20(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E1C2C34(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E1C2C48(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E1C2C5C(float **a1, const char *a2, int a3, int a4, int a5, int a6)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  sprintf(__s, "0x%lx", *a1);
  size_t v11 = strlen(__s);
  if (v11 > 0x7FFFFFFFFFFFFFF7) {
    sub_19E13C370();
  }
  std::string::size_type v12 = v11;
  if (v11 >= 0x17)
  {
    uint64_t v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v14 = v11 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (std::string *)operator new(v14 + 1);
    __dst.__r_.__value_.__l.__size_ = v12;
    __dst.__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v11;
  p_dst = &__dst;
  if (v11) {
LABEL_8:
  }
    memcpy(p_dst, __s, v12);
  p_dst->__r_.__value_.__s.__data_[v12] = 0;
  int v16 = std::string::insert(&__dst, 0, " (");
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v64.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  int v18 = std::string::append(&v64, ") ");
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  int64_t v73 = v18->__r_.__value_.__r.__words[2];
  long long v72 = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(v64.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_11;
    }
LABEL_22:
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (a4 * a3 >= a6) {
      uint64_t v20 = a6;
    }
    else {
      uint64_t v20 = (a4 * a3);
    }
    if ((int)v20 > 0) {
      goto LABEL_15;
    }
LABEL_26:
    char v22 = 1;
    goto LABEL_27;
  }
  operator delete(v64.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_22;
  }
LABEL_11:
  if (a4 * a3 >= a6) {
    uint64_t v20 = a6;
  }
  else {
    uint64_t v20 = (a4 * a3);
  }
  if ((int)v20 <= 0) {
    goto LABEL_26;
  }
LABEL_15:
  uint64_t v21 = *a1;
  char v22 = 1;
  uint64_t v23 = v20;
  do
  {
    float v24 = *v21++;
    BOOL v25 = v24 >= -1.0;
    if (v24 > 1.0) {
      BOOL v25 = 0;
    }
    v22 &= v25;
    --v23;
  }
  while (v23);
  if ((v22 & 1) == 0)
  {
    int v26 = "no";
    goto LABEL_28;
  }
LABEL_27:
  int v26 = "yes";
LABEL_28:
  if (v22) {
    size_t v27 = 3;
  }
  else {
    size_t v27 = 2;
  }
  *((unsigned char *)&v70.__r_.__value_.__s + 23) = v27;
  memcpy(&v70, v26, v27);
  *(unsigned char *)((unint64_t)&v70 | v27) = 0;
  int v28 = std::string::insert(&v70, 0, " (");
  long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v64.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  uint64_t v30 = std::string::append(&v64, ") ");
  long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v64.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v70.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_33;
    }
  }
  else if ((SHIBYTE(v70.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_33;
  }
  operator delete(v70.__r_.__value_.__l.__data_);
LABEL_33:
  sub_19E1C3534((uint64_t)&v64);
  size_t v32 = strlen(a2);
  if (v32 > 0x7FFFFFFFFFFFFFF7) {
    sub_19E13C370();
  }
  std::string::size_type v33 = v32;
  if (v32 >= 0x17)
  {
    uint64_t v35 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v32 | 7) != 0x17) {
      uint64_t v35 = v32 | 7;
    }
    uint64_t v36 = v35 + 1;
    float32x4_t v34 = operator new(v35 + 1);
    v61.__r_.__value_.__l.__size_ = v33;
    v61.__r_.__value_.__r.__words[2] = v36 | 0x8000000000000000;
    v61.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
    goto LABEL_40;
  }
  *((unsigned char *)&v61.__r_.__value_.__s + 23) = v32;
  float32x4_t v34 = &v61;
  if (v32) {
LABEL_40:
  }
    memcpy(v34, a2, v33);
  *((unsigned char *)v34 + v33) = 0;
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int16x8_t v37 = &__dst;
  }
  else {
    int16x8_t v37 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __dst.__r_.__value_.__l.__size_;
  }
  float32x4_t v39 = std::string::append(&v61, (const std::string::value_type *)v37, size);
  long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  v62.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v40;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  if (v73 >= 0) {
    int v41 = (const std::string::value_type *)&v72;
  }
  else {
    int v41 = (const std::string::value_type *)v72;
  }
  if (v73 >= 0) {
    std::string::size_type v42 = HIBYTE(v73);
  }
  else {
    std::string::size_type v42 = *((void *)&v72 + 1);
  }
  uint64_t v43 = std::string::append(&v62, v41, v42);
  long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
  v63.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v44;
  v43->__r_.__value_.__l.__size_ = 0;
  v43->__r_.__value_.__r.__words[2] = 0;
  v43->__r_.__value_.__r.__words[0] = 0;
  unint64_t v45 = std::string::append(&v63, "[");
  long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
  v70.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v46;
  v45->__r_.__value_.__l.__size_ = 0;
  v45->__r_.__value_.__r.__words[2] = 0;
  v45->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v63.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v62.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_55:
      if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_56;
      }
LABEL_62:
      operator delete(v61.__r_.__value_.__l.__data_);
      if ((int)v20 < 1) {
        goto LABEL_89;
      }
      goto LABEL_63;
    }
  }
  else if ((SHIBYTE(v62.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_55;
  }
  operator delete(v62.__r_.__value_.__l.__data_);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_62;
  }
LABEL_56:
  if ((int)v20 >= 1)
  {
LABEL_63:
    uint64_t v47 = 0;
    uint64_t v48 = a5;
    uint64_t v49 = 4 * v20;
    while (1)
    {
      memset(&v63, 0, sizeof(v63));
      std::ios_base::clear((std::ios_base *)((char *)&v64 + *(void *)(v64.__r_.__value_.__r.__words[0] - 24)), 0);
      *(void *)&v66[*(void *)(v64.__r_.__value_.__r.__words[2] - 24)] = v48;
      std::ostream::operator<<();
      sub_19E1C3818((uint64_t *)&v64, (uint64_t)&v63);
      int v50 = SHIBYTE(v63.__r_.__value_.__r.__words[2]);
      if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v51 = HIBYTE(v63.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v51 = v63.__r_.__value_.__l.__size_;
      }
      unint64_t v52 = v51 + 1;
      if (v51 + 1 > 0x7FFFFFFFFFFFFFF7) {
        sub_19E13C370();
      }
      if (v52 >= 0x17) {
        break;
      }
      memset(&v62, 0, sizeof(v62));
      uint64_t v53 = (char *)&v62;
      *((unsigned char *)&v62.__r_.__value_.__s + 23) = v51 + 1;
      if (v51) {
        goto LABEL_76;
      }
LABEL_80:
      *(_WORD *)&v53[v51] = 32;
      if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        float32x4_t v57 = &v62;
      }
      else {
        float32x4_t v57 = (std::string *)v62.__r_.__value_.__r.__words[0];
      }
      if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v58 = HIBYTE(v62.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v58 = v62.__r_.__value_.__l.__size_;
      }
      std::string::append(&v70, (const std::string::value_type *)v57, v58);
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v62.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v63.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_65;
        }
LABEL_88:
        operator delete(v63.__r_.__value_.__l.__data_);
        v47 += 4;
        if (v49 == v47) {
          goto LABEL_89;
        }
      }
      else
      {
        if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_88;
        }
LABEL_65:
        v47 += 4;
        if (v49 == v47) {
          goto LABEL_89;
        }
      }
    }
    uint64_t v54 = (v52 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v52 | 7) != 0x17) {
      uint64_t v54 = v52 | 7;
    }
    uint64_t v55 = v54 + 1;
    uint64_t v53 = (char *)operator new(v54 + 1);
    v62.__r_.__value_.__l.__size_ = v51 + 1;
    v62.__r_.__value_.__r.__words[2] = v55 | 0x8000000000000000;
    v62.__r_.__value_.__r.__words[0] = (std::string::size_type)v53;
LABEL_76:
    if (v50 >= 0) {
      uint64_t v56 = &v63;
    }
    else {
      uint64_t v56 = (std::string *)v63.__r_.__value_.__r.__words[0];
    }
    memmove(v53, v56, v51);
    goto LABEL_80;
  }
LABEL_89:
  std::string::append(&v70, " ]");
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v70.__r_.__value_.__l.__data_);
  }
  v64.__r_.__value_.__r.__words[0] = *MEMORY[0x1E4FBA408];
  std::string::size_type v59 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(std::string::size_type *)((char *)v64.__r_.__value_.__r.__words + *(void *)(v64.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v64.__r_.__value_.__r.__words[2] = v59;
  uint64_t v65 = MEMORY[0x1E4FBA470] + 16;
  if (v68 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x19F3BBB40](&v69);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v73) & 0x80000000) == 0) {
      return;
    }
LABEL_97:
    operator delete((void *)v72);
    return;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v73) < 0) {
    goto LABEL_97;
  }
}

void sub_19E1C33A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,int a61,__int16 a62,char a63)
{
  if (a64 < 0) {
    operator delete(__p);
  }
  sub_19E1C3AEC((uint64_t)&a23);
  if (a71 < 0) {
    operator delete(a66);
  }
  if (*(char *)(v71 - 217) < 0) {
    operator delete(*(void **)(v71 - 240));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_19E1C3534(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA488] + 104;
  *(void *)(a1 + 128) = MEMORY[0x1E4FBA488] + 104;
  uint64_t v3 = a1 + 16;
  uint64_t v4 = MEMORY[0x1E4FBA488] + 64;
  *(void *)(a1 + 16) = MEMORY[0x1E4FBA488] + 64;
  uint64_t v5 = (void *)MEMORY[0x1E4FBA408];
  uint64_t v6 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  uint64_t v7 = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + *(void *)(v7 - 24)) = v6;
  *(void *)(a1 + 8) = 0;
  float v8 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  uint64_t v9 = MEMORY[0x1E4FBA488] + 24;
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  uint64_t v10 = v5[5];
  uint64_t v11 = v5[4];
  *(void *)(a1 + 16) = v11;
  *(void *)(v3 + *(void *)(v11 - 24)) = v10;
  uint64_t v12 = v5[1];
  *(void *)a1 = v12;
  *(void *)(a1 + *(void *)(v12 - 24)) = v5[6];
  *(void *)a1 = v9;
  *(void *)(a1 + 128) = v2;
  *(void *)(a1 + 16) = v4;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 24) = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_19E1C37E4(_Unwind_Exception *a1)
{
  std::iostream::~basic_iostream();
  MEMORY[0x19F3BBB40](v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_19E1C3818(uint64_t *a1, uint64_t a2)
{
  MEMORY[0x19F3BB950](&v20, a1, 0);
  if (!v20) {
    return a1;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  uint64_t v4 = *(void *)(*a1 - 24);
  uint64_t v5 = *(uint64_t *)((char *)a1 + v4 + 24);
  if (v5 <= 1) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = *(uint64_t *)((char *)a1 + v4 + 24);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + v4));
  uint64_t v7 = std::locale::use_facet(&v19, MEMORY[0x1E4FBA258]);
  std::locale::~locale(&v19);
  uint64_t v8 = 0;
  uint64_t v9 = a1 + 5;
  if (v5 >= 1) {
    uint64_t v10 = v6;
  }
  else {
    uint64_t v10 = 0x7FFFFFFFFFFFFFF7;
  }
  while (1)
  {
    uint64_t v11 = *(void **)((char *)v9 + *(void *)(*a1 - 24));
    uint64_t v12 = (unsigned char *)v11[3];
    if (v12 == (unsigned char *)v11[4]) {
      break;
    }
    LOBYTE(v13) = *v12;
LABEL_16:
    if ((v13 & 0x80) == 0 && (*((_DWORD *)&v7[1].~facet + v13) & 0x4000) != 0)
    {
      int v16 = 0;
      goto LABEL_23;
    }
    std::string::push_back((std::string *)a2, v13);
    uint64_t v14 = *(void **)((char *)v9 + *(void *)(*a1 - 24));
    uint64_t v15 = v14[3];
    if (v15 == v14[4]) {
      (*(void (**)(void *))(*v14 + 80))(v14);
    }
    else {
      v14[3] = v15 + 1;
    }
    if (v10 == ++v8)
    {
      int v16 = 0;
      uint64_t v8 = 1;
      goto LABEL_23;
    }
  }
  int v13 = (*(uint64_t (**)(void *))(*v11 + 72))(v11);
  if (v13 != -1) {
    goto LABEL_16;
  }
  int v16 = 2;
LABEL_23:
  uint64_t v17 = *a1;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 24) = 0;
  if (!v8) {
    v16 |= 4u;
  }
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(v17 - 24)), *(_DWORD *)((char *)a1 + *(void *)(v17 - 24) + 32) | v16);
  return a1;
}

void sub_19E1C3A3C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::locale::~locale(&a9);
  __cxa_begin_catch(a1);
  uint64_t v11 = *v9;
  *(_DWORD *)((char *)v9 + *(void *)(*v9 - 24) + 32) |= 1u;
  if ((*((unsigned char *)v9 + *(void *)(v11 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x19E1C39F8);
  }
  __cxa_rethrow();
}

void sub_19E1C3AD8(_Unwind_Exception *a1)
{
}

uint64_t sub_19E1C3AEC(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA408];
  uint64_t v3 = *MEMORY[0x1E4FBA408];
  *(void *)a1 = *MEMORY[0x1E4FBA408];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 64);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x19F3BBB40](a1 + 128);
  return a1;
}

double sub_19E1C3C24(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 72);
  if (v2)
  {
    if (*v2)
    {
      operator delete[](*v2);
      uint64_t v3 = *(void **)(a1 + 72);
      if (v3) {
        operator delete(v3);
      }
    }
  }
  uint64_t v4 = *(void ***)(a1 + 80);
  if (v4)
  {
    if (*v4)
    {
      operator delete[](*v4);
      uint64_t v5 = *(void **)(a1 + 80);
      if (v5) {
        operator delete(v5);
      }
    }
  }
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6)
  {
    if (*v6)
    {
      operator delete[](*v6);
      uint64_t v7 = *(void **)(a1 + 88);
      if (v7) {
        operator delete(v7);
      }
    }
  }
  uint64_t v8 = *(void ***)(a1 + 96);
  if (v8)
  {
    if (*v8)
    {
      operator delete[](*v8);
      uint64_t v9 = *(void **)(a1 + 96);
      if (v9) {
        operator delete(v9);
      }
    }
  }
  uint64_t v10 = *(void ***)(a1 + 104);
  if (v10)
  {
    if (*v10)
    {
      operator delete[](*v10);
      uint64_t v11 = *(void **)(a1 + 104);
      if (v11) {
        operator delete(v11);
      }
    }
  }
  uint64_t v12 = *(void ***)(a1 + 112);
  if (v12)
  {
    if (*v12)
    {
      operator delete[](*v12);
      int v13 = *(void **)(a1 + 112);
      if (v13) {
        operator delete(v13);
      }
    }
  }
  uint64_t v14 = *(void ***)(a1 + 120);
  if (v14)
  {
    if (*v14)
    {
      operator delete[](*v14);
      uint64_t v15 = *(void **)(a1 + 120);
      if (v15) {
        operator delete(v15);
      }
    }
  }
  uint64_t v17 = (void **)(a1 + 64);
  int v16 = *(void ***)(a1 + 64);
  if (v16)
  {
    if (*v16)
    {
      operator delete[](*v16);
      if (*v17) {
        operator delete(*v17);
      }
    }
  }
  int v18 = *(void ***)(a1 + 128);
  if (v18)
  {
    if (*v18)
    {
      operator delete[](*v18);
      std::locale v19 = *(void **)(a1 + 128);
      if (v19) {
        operator delete(v19);
      }
    }
  }
  *(unsigned char *)(a1 + 16) = 0;
  double result = 0.0;
  *(_OWORD *)uint64_t v17 = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(void *)(a1 + 128) = 0;
  return result;
}

float32x2_t sub_19E1C3D7C(uint64_t a1, const float **a2, void *a3, float a4)
{
  if (a4 != 0.0) {
    *(float *)(a1 + 24) = a4;
  }
  if (!*(unsigned char *)(a1 + 12)) {
    sub_19E1C457C();
  }

  return sub_19E1C4A08(a1, a2, a3, a4);
}

float32x2_t sub_19E1C3DF4(uint64_t a1, uint64_t *a2, uint64_t a3, float a4)
{
  if (a4 != 0.0) {
    *(float *)(a1 + 24) = a4;
  }
  if (!*(unsigned char *)(a1 + 12)) {
    sub_19E1C457C();
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1))
  {
    int v8 = *(_DWORD *)(a1 + 16);
    unsigned int v7 = *(_DWORD *)(a1 + 20);
  }
  else
  {
    unsigned int v7 = *(_DWORD *)(a1 + 16);
    int v8 = *(_DWORD *)(a1 + 20);
  }
  sub_19E1C1214(a3, a2, v7, v8, a1);
  uint64_t v10 = *(void ***)(a1 + 72);
  uint64_t v9 = *(const void ***)(a1 + 80);
  memmove(**(void ***)(a1 + 56), **(const void ***)(a1 + 64), 4 * *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
  memmove(*v10, *v9, 4 * *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
  v11.i32[0] = *(_DWORD *)(a1 + 28);
  v11.i32[1] = *(_DWORD *)(a1 + 36);
  float32x2_t result = vmul_f32(*(float32x2_t *)(a1 + 40), v11);
  *(float32x2_t *)(a1 + 40) = result;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

void sub_19E1C3EE8(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 0;
  int v2 = *(_DWORD *)(a1 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 44) = v2;
  bzero(**(void ***)(a1 + 56), 4 * *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
  bzero(**(void ***)(a1 + 64), 4 * *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
  bzero(**(void ***)(a1 + 72), 4 * *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
  bzero(**(void ***)(a1 + 80), 4 * *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
  bzero(**(void ***)(a1 + 104), 4 * *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
  uint64_t v3 = *(void ***)(a1 + 112);
  if (v3) {
    bzero(*v3, 4 * *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
  }
  uint64_t v4 = *(void ***)(a1 + 48);
  if (v4)
  {
    uint64_t v5 = *v4;
    size_t v6 = 4 * *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16);
    bzero(v5, v6);
  }
}

float sub_19E1C3FE0(uint64_t a1, int a2, float a3)
{
  uint64_t v4 = *(void **)(a1 + 72);
  uint64_t v3 = *(void **)(a1 + 80);
  uint64_t v5 = 4 * a2;
  uint64_t v6 = **(void **)(a1 + 64);
  *(float *)(v6 + v5) = a3 + (float)((float)(*(float *)(**(void **)(a1 + 56) + v5) - a3) * *(float *)(a1 + 28));
  float v7 = fmaxf(*(float *)(*v4 + v5) * *(float *)(a1 + 36), fabsf(a3));
  *(float *)(*v3 + v5) = v7;
  float result = (float)(*(float *)(v6 + v5) * *(float *)(a1 + 24))
         / (float)((float)(*(float *)(a1 + 32) + v7) - (float)(*(float *)(a1 + 40) * (float)(*(float *)(a1 + 32) + v7)));
  *(float *)(**(void **)(a1 + 104) + v5) = result;
  return result;
}

uint64_t sub_19E1C4058(uint64_t result, int a2, float32x4_t *a3, float32x4_t *a4, unsigned int a5, double a6, double a7, double a8, float32x4_t a9)
{
  if ((int)a5 < 1) {
    return result;
  }
  uint64_t v9 = **(void **)(result + 56);
  uint64_t v10 = **(void **)(result + 64);
  uint64_t v11 = **(void **)(result + 72);
  uint64_t v12 = **(void **)(result + 80);
  uint64_t v13 = **(void **)(result + 104);
  uint64_t v14 = a2;
  uint64_t v15 = a5;
  if (a5 < 0x14)
  {
    uint64_t v16 = 0;
    goto LABEL_4;
  }
  uint64_t v16 = 0;
  unint64_t v31 = result + 24;
  uint64_t v124 = a2;
  uint64_t v32 = 4 * a2;
  unint64_t v33 = v10 + v32;
  uint64_t v125 = a5;
  uint64_t v34 = v32 + 4 * a5;
  unint64_t v35 = v10 + v34;
  unint64_t v36 = v12 + 4 * v14;
  unint64_t v37 = v12 + v34;
  unint64_t v38 = v13 + 4 * v14;
  unint64_t v39 = v13 + v34;
  long long v40 = &a4->i8[4 * v15];
  int v41 = &a3->i8[4 * v15];
  unint64_t v42 = result + 44;
  unint64_t v43 = v9 + 4 * v14;
  unint64_t v44 = v9 + v34;
  unint64_t v45 = v11 + 4 * v14;
  unint64_t v46 = v11 + v34;
  BOOL v48 = v10 + v32 < (unint64_t)(v13 + v34) && v38 < v35;
  BOOL v50 = v33 < (unint64_t)v40 && v35 > (unint64_t)a4;
  BOOL v122 = v50;
  BOOL v123 = v48;
  BOOL v52 = v33 < (unint64_t)v41 && v35 > (unint64_t)a3;
  BOOL v54 = v33 < v42 && v31 < v35;
  BOOL v120 = v54;
  BOOL v121 = v52;
  BOOL v56 = v33 < v44 && v43 < v35;
  BOOL v58 = v33 < v46 && v45 < v35;
  BOOL v118 = v58;
  BOOL v119 = v56;
  BOOL v60 = v36 < v39 && v38 < v37;
  BOOL v62 = v36 < (unint64_t)v40 && v37 > (unint64_t)a4;
  BOOL v64 = v36 < (unint64_t)v41 && v37 > (unint64_t)a3;
  BOOL v66 = v36 < v42 && v31 < v37;
  BOOL v68 = v36 < v44 && v43 < v37;
  BOOL v70 = v36 < v46 && v45 < v37;
  BOOL v72 = v38 < (unint64_t)v40 && v39 > (unint64_t)a4;
  BOOL v74 = v38 < (unint64_t)v41 && v39 > (unint64_t)a3;
  BOOL v76 = v38 < v42 && v31 < v39;
  BOOL v78 = v38 < v44 && v43 < v39;
  BOOL v80 = v38 < v46 && v45 < v39;
  BOOL v82 = v41 > (char *)a4 && v40 > (char *)a3;
  BOOL v84 = v42 > (unint64_t)a4 && v31 < (unint64_t)v40;
  BOOL v86 = v44 > (unint64_t)a4 && v43 < (unint64_t)v40;
  BOOL v88 = v46 > (unint64_t)a4 && v45 < (unint64_t)v40;
  BOOL v89 = v36 >= v35 || v33 >= v37;
  if (!v89 || v123 || v122 || v121 || v120 || v119 || v118 || v60 || v62)
  {
    uint64_t v12 = **(void **)(result + 80);
    uint64_t v15 = v125;
    uint64_t v11 = **(void **)(result + 72);
    uint64_t v13 = **(void **)(result + 104);
    uint64_t v9 = **(void **)(result + 56);
    uint64_t v10 = **(void **)(result + 64);
    uint64_t v14 = v124;
LABEL_4:
    uint64_t v17 = 0;
    uint64_t v18 = 4 * (v16 + v14);
    uint64_t v19 = v9 + v18;
    uint64_t v20 = v10 + v18;
    uint64_t v21 = v11 + v18;
    uint64_t v22 = v12 + v18;
    uint64_t v23 = v13 + v18;
    float v24 = &a4->i8[4 * v16];
    BOOL v25 = &a3->i8[4 * v16];
    uint64_t v26 = v15 - v16;
    do
    {
      uint64_t v27 = 4 * v17;
      float v28 = *(float *)&v25[4 * v17];
      *(float *)(v20 + v27) = v28 + (float)((float)(*(float *)(v19 + 4 * v17) - v28) * *(float *)(result + 28));
      float v29 = fmaxf(*(float *)(v21 + 4 * v17) * *(float *)(result + 36), fabsf(v28));
      *(float *)(v22 + v27) = v29;
      float v30 = (float)(*(float *)(v20 + 4 * v17) * *(float *)(result + 24))
          / (float)((float)(*(float *)(result + 32) + v29)
                  - (float)(*(float *)(result + 40) * (float)(*(float *)(result + 32) + v29)));
      *(float *)(v23 + v27) = v30;
      *(float *)&v24[v27] = v30;
      ++v17;
    }
    while (v26 != v17);
    return result;
  }
  uint64_t v9 = **(void **)(result + 56);
  if (v64 || v66 || v68 || v70)
  {
    uint64_t v12 = **(void **)(result + 80);
    uint64_t v15 = v125;
    uint64_t v11 = **(void **)(result + 72);
    uint64_t v13 = **(void **)(result + 104);
    goto LABEL_164;
  }
  uint64_t v11 = **(void **)(result + 72);
  if (v72 || v74 || v76 || v78 || v80 || v82 || v84)
  {
    uint64_t v12 = **(void **)(result + 80);
    uint64_t v15 = v125;
    uint64_t v13 = **(void **)(result + 104);
LABEL_164:
    uint64_t v10 = **(void **)(result + 64);
    uint64_t v14 = v124;
    goto LABEL_4;
  }
  uint64_t v12 = **(void **)(result + 80);
  uint64_t v15 = v125;
  uint64_t v13 = **(void **)(result + 104);
  uint64_t v10 = **(void **)(result + 64);
  uint64_t v14 = v124;
  if (v86) {
    goto LABEL_4;
  }
  if (v88) {
    goto LABEL_4;
  }
  uint64_t v90 = (const float *)(result + 28);
  float32x4_t v91 = vld1q_dup_f32(v90);
  uint64_t v92 = (const float *)(result + 36);
  float32x4_t v93 = vld1q_dup_f32(v92);
  uint64_t v16 = v125 & 0xFFFFFFFC;
  unint64_t v94 = (const float *)(result + 24);
  float32x4_t v95 = vld1q_dup_f32(v94);
  a9.i32[0] = *(_DWORD *)(result + 40);
  __asm { FMOV            V4.4S, #1.0 }
  a9.i32[0] = vsubq_f32(_Q4, a9).u32[0];
  uint64_t v100 = (const float *)(result + 32);
  uint64_t v101 = (float32x4_t *)(**(void **)(result + 104) + v32);
  uint64_t v102 = (float32x4_t *)(**(void **)(result + 80) + v32);
  unint64_t v103 = (float32x4_t *)(**(void **)(result + 72) + v32);
  int v104 = (float32x4_t *)(**(void **)(result + 64) + v32);
  float32x4_t v105 = vld1q_dup_f32(v100);
  uint64_t v106 = (float32x4_t *)(**(void **)(result + 56) + v32);
  uint64_t v107 = v16;
  uint64_t v108 = a4;
  int64_t v109 = a3;
  do
  {
    float32x4_t v110 = *v109++;
    float32x4_t v111 = v110;
    float32x4_t v112 = *v106++;
    float32x4_t v113 = vabsq_f32(v111);
    float32x4_t v114 = vmlaq_f32(v111, vsubq_f32(v112, v111), v91);
    *v104++ = v114;
    float32x4_t v115 = *v103++;
    float32x4_t v116 = vmaxnmq_f32(vmulq_f32(v115, v93), v113);
    *v102++ = v116;
    float32x4_t v117 = vdivq_f32(vmulq_f32(v114, v95), vmulq_n_f32(vaddq_f32(v105, v116), a9.f32[0]));
    *v101++ = v117;
    *v108++ = v117;
    v107 -= 4;
  }
  while (v107);
  if (v16 != v125) {
    goto LABEL_4;
  }
  return result;
}

uint64_t sub_19E1C4438(uint64_t result)
{
  if (!*(unsigned char *)(result + 12)) {
    sub_19E1C457C();
  }
  return result;
}

char *sub_19E1C4448@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[143] < 0) {
    return (char *)sub_19E13C2D0((unsigned char *)a2, *((void **)result + 15), *((void *)result + 16));
  }
  *(_OWORD *)a2 = *(_OWORD *)(result + 120);
  *(void *)(a2 + 16) = *((void *)result + 17);
  return result;
}

uint64_t sub_19E1C4474(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 144);
}

float sub_19E1C447C(uint64_t a1)
{
  return *(float *)(a1 + 24);
}

uint64_t sub_19E1C4484(uint64_t a1)
{
  *(void *)a1 = &unk_1EF0A5788;
  sub_19E1C4B58((void *)a1);
  *(unsigned char *)(a1 + 12) = 0;
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  return a1;
}

void sub_19E1C44F0(uint64_t a1)
{
  *(void *)a1 = &unk_1EF0A5788;
  sub_19E1C4B58((void *)a1);
  *(unsigned char *)(a1 + 12) = 0;
  if (*(char *)(a1 + 143) < 0)
  {
    operator delete(*(void **)(a1 + 120));
    int v2 = (void *)a1;
  }
  else
  {
    int v2 = (void *)a1;
  }
  operator delete(v2);
}

void sub_19E1C457C()
{
}

void sub_19E1C4954(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E1C4968(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E1C497C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E1C4990(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E1C49A4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E1C49B8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E1C49CC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E1C49E0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E1C49F4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

float32x2_t sub_19E1C4A08(uint64_t a1, const float **a2, void *a3, float a4)
{
  int v7 = *(_DWORD *)(a1 + 16);
  int v8 = *(_DWORD *)(a1 + 20);
  if (a4 != 0.0) {
    *(float *)(a1 + 24) = a4;
  }
  uint64_t v9 = (v8 * v7);
  if (!*(unsigned char *)(a1 + 12)) {
    sub_19E1C457C();
  }
  if ((int)v9 >= 1)
  {
    for (uint64_t i = 0; i != v9; ++i)
      *(float *)(**(void **)(a1 + 104) + 4 * i) = (*(float (**)(uint64_t, uint64_t, float))(*(void *)a1 + 24))(a1, i, *(float *)(*a3 + 4 * i));
  }
  uint64_t v12 = *(void ***)(a1 + 72);
  uint64_t v11 = *(const void ***)(a1 + 80);
  memmove(**(void ***)(a1 + 56), **(const void ***)(a1 + 64), 4 * (int)v9);
  memmove(*v12, *v11, 4 * (int)v9);
  uint64_t v13 = *(const float ***)(a1 + 104);
  vDSP_Length v14 = *(int *)(a1 + 20) * (uint64_t)*(int *)(a1 + 16);
  float __B = 1.0;
  vDSP_vsma(*v13, 1, &__B, *a2, 1, (float *)*a2, 1, v14);
  v15.i32[0] = *(_DWORD *)(a1 + 28);
  v15.i32[1] = *(_DWORD *)(a1 + 36);
  float32x2_t result = vmul_f32(*(float32x2_t *)(a1 + 40), v15);
  *(float32x2_t *)(a1 + 40) = result;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

void sub_19E1C4B58(void *a1)
{
  int v2 = (void **)a1[7];
  if (v2)
  {
    if (*v2)
    {
      operator delete[](*v2);
      uint64_t v3 = (void *)a1[7];
      if (v3) {
        operator delete(v3);
      }
    }
  }
  uint64_t v4 = (void **)a1[8];
  if (v4)
  {
    if (*v4)
    {
      operator delete[](*v4);
      uint64_t v5 = (void *)a1[8];
      if (v5) {
        operator delete(v5);
      }
    }
  }
  uint64_t v6 = (void **)a1[9];
  if (v6)
  {
    if (*v6)
    {
      operator delete[](*v6);
      int v7 = (void *)a1[9];
      if (v7) {
        operator delete(v7);
      }
    }
  }
  int v8 = (void **)a1[10];
  if (v8)
  {
    if (*v8)
    {
      operator delete[](*v8);
      uint64_t v9 = (void *)a1[10];
      if (v9) {
        operator delete(v9);
      }
    }
  }
  uint64_t v10 = (void **)a1[11];
  if (v10)
  {
    if (*v10)
    {
      operator delete[](*v10);
      uint64_t v11 = (void *)a1[11];
      if (v11) {
        operator delete(v11);
      }
    }
  }
  uint64_t v12 = (void **)a1[12];
  if (v12)
  {
    if (*v12)
    {
      operator delete[](*v12);
      uint64_t v13 = (void *)a1[12];
      if (v13) {
        operator delete(v13);
      }
    }
  }
  vDSP_Length v14 = (void **)a1[13];
  if (v14)
  {
    if (*v14)
    {
      operator delete[](*v14);
      float32x2_t v15 = (void *)a1[13];
      if (v15) {
        operator delete(v15);
      }
    }
  }
  uint64_t v16 = (void **)a1[6];
  if (v16)
  {
    if (*v16)
    {
      operator delete[](*v16);
      uint64_t v17 = (void *)a1[6];
      if (v17) {
        operator delete(v17);
      }
    }
  }
  uint64_t v18 = (void **)a1[14];
  if (v18)
  {
    if (*v18)
    {
      operator delete[](*v18);
      uint64_t v19 = (void *)a1[14];
      if (v19)
      {
        operator delete(v19);
      }
    }
  }
}

uint64_t sub_19E1C4CB0(uint64_t a1, int a2, int a3, int a4, int a5)
{
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_DWORD *)(a1 + 8) = a4;
  *(_DWORD *)(a1 + 12) = a5;
  *(_DWORD *)(a1 + 16) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(unsigned char *)(a1 + 88) = 0;
  sub_19E1C57EC(a1);
  return a1;
}

void sub_19E1C4D08(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 104) = v5;
    operator delete(v5);
  }
  sub_19E32EC4C((void **)(v1 + 48), (void **)(v1 + 24), v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19E1C4D38(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(_OWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
  *(void *)(a1 + 104) = *(void *)(a1 + 96);
  uint64_t v5 = *(void ***)(a1 + 72);
  if (!v5) {
    operator new();
  }
  memmove(*v5, **((const void ***)a2 + 9), 4 * (int)v4);
  uint64_t v6 = *(void ***)(a1 + 80);
  if (!v6) {
    operator new();
  }
  memmove(*v6, **((const void ***)a2 + 10), 4 * *(_DWORD *)(a1 + 4) * *(_DWORD *)a1);
  uint64_t v7 = *(void *)(a1 + 24);
  *(unsigned char *)(a1 + 88) = *((unsigned char *)a2 + 88);
  int v8 = *(_DWORD *)(a1 + 8);
  unint64_t v9 = (*(void *)(a1 + 32) - v7) >> 3;
  if (v8 <= v9)
  {
    if (v8 < v9) {
      *(void *)(a1 + 32) = v7 + 8 * v8;
    }
  }
  else
  {
    sub_19E1599BC((void **)(a1 + 24), v8 - v9);
    int v8 = *(_DWORD *)(a1 + 8);
  }
  if (v8 > 0) {
    operator new[]();
  }
  unint64_t v10 = v8;
  uint64_t v12 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v13 = (void *)(a1 + 48);
  unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v12) >> 3);
  if (v10 <= v14)
  {
    if (v10 < v14)
    {
      uint64_t v15 = v12 + 24 * (int)v10;
      if (v11 != v15)
      {
        uint64_t v16 = *(void *)(a1 + 56);
        do
        {
          uint64_t v18 = *(void **)(v16 - 24);
          v16 -= 24;
          uint64_t v17 = v18;
          if (v18)
          {
            *(void *)(v11 - 16) = v17;
            operator delete(v17);
          }
          uint64_t v11 = v16;
        }
        while (v16 != v15);
      }
      *(void *)(a1 + 56) = v15;
    }
  }
  else
  {
    sub_19E232360(a1 + 48, v10 - v14);
  }
  if (*(int *)(a1 + 8) >= 1)
  {
    uint64_t v19 = 0;
    int v20 = *(_DWORD *)(a1 + 12);
    do
    {
      uint64_t v21 = (void *)(*v13 + 24 * v19);
      unint64_t v22 = (uint64_t)(v21[1] - *v21) >> 2;
      if (v20 <= v22)
      {
        if (v20 < v22) {
          v21[1] = *v21 + 4 * v20;
        }
      }
      else
      {
        sub_19E1C5E88((uint64_t)v21, v20 - v22);
        int v20 = *(_DWORD *)(a1 + 12);
      }
      if (v20 >= 1)
      {
        uint64_t v23 = 0;
        uint64_t v24 = *(void *)(*((void *)a2 + 6) + 24 * v19);
        uint64_t v25 = *(void *)(*v13 + 24 * v19);
        do
        {
          *(_DWORD *)(v25 + 4 * v23) = *(_DWORD *)(v24 + 4 * v23);
          ++v23;
        }
        while (v23 < *(int *)(a1 + 12));
        int v20 = *(_DWORD *)(a1 + 12);
      }
      ++v19;
    }
    while (v19 < *(int *)(a1 + 8));
  }
  return a1;
}

void sub_19E1C5490(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E1C54A4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_19E1C54B8(void *result, int a2, float a3)
{
  if (a2 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = a2;
    float v5 = a3 * 4.6566e-10;
    do
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9458940, memory_order_acquire) & 1) == 0)
      {
        uint64_t v32 = result;
        float v28 = a3;
        float v30 = v5;
        uint64_t v24 = v4;
        uint64_t v26 = v3;
        int v11 = __cxa_guard_acquire(&qword_1E9458940);
        uint64_t v4 = v24;
        uint64_t v3 = v26;
        float v5 = v30;
        a3 = v28;
        int v12 = v11;
        float32x2_t result = v32;
        if (v12)
        {
          unsigned int v13 = 5489;
          dword_1E94589E8[0] = 5489;
          uint64_t v14 = 55;
          uint64_t v15 = 1;
          do
          {
            int v16 = 1812433253 * (v13 ^ (v13 >> 30));
            unsigned int v13 = v16 + v15;
            dword_1E9458910[v14] = v14 + v16 - 54;
            ++v15;
            ++v14;
          }
          while (v14 != 678);
          qword_1E94593A8 = 0;
          __cxa_guard_release(&qword_1E9458940);
          a3 = v28;
          float32x2_t result = v32;
          uint64_t v4 = v24;
          uint64_t v3 = v26;
          float v5 = v30;
        }
      }
      unint64_t v6 = (qword_1E94593A8 + 1) % 0x270uLL;
      int v7 = dword_1E94589E8[v6];
      unsigned int v8 = dword_1E94589E8[(qword_1E94593A8 + 397) % 0x270uLL] ^ ((v7 & 0x7FFFFFFE | dword_1E94589E8[qword_1E94593A8] & 0x80000000) >> 1);
      unsigned int v9 = v8 ^ (v7 << 31 >> 31) & 0x9908B0DF;
      dword_1E94589E8[qword_1E94593A8] = v9;
      qword_1E94593A8 = v6;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9458940, memory_order_acquire) & 1) == 0)
      {
        unint64_t v33 = result;
        float v29 = a3;
        float v31 = v5;
        uint64_t v25 = v4;
        uint64_t v27 = v3;
        unsigned int v23 = v8 ^ (v7 << 31 >> 31) & 0x9908B0DF;
        int v17 = __cxa_guard_acquire(&qword_1E9458940);
        unsigned int v9 = v23;
        uint64_t v4 = v25;
        uint64_t v3 = v27;
        float v5 = v31;
        a3 = v29;
        int v18 = v17;
        float32x2_t result = v33;
        if (v18)
        {
          unsigned int v19 = 5489;
          dword_1E94589E8[0] = 5489;
          uint64_t v20 = 55;
          uint64_t v21 = 1;
          do
          {
            int v22 = 1812433253 * (v19 ^ (v19 >> 30));
            unsigned int v19 = v22 + v21;
            dword_1E9458910[v20] = v20 + v22 - 54;
            ++v21;
            ++v20;
          }
          while (v20 != 678);
          qword_1E94593A8 = 0;
          __cxa_guard_release(&qword_1E9458940);
          a3 = v29;
          float32x2_t result = v33;
          uint64_t v4 = v25;
          uint64_t v3 = v27;
          float v5 = v31;
          unsigned int v9 = v23;
        }
      }
      unsigned int v10 = ((v9 ^ (v9 >> 11)) << 7) & 0x9D2C5680 ^ v9 ^ (v9 >> 11);
      *(_WORD *)(*result + 2 * v3++) = (int)(float)-(float)(a3
                                                          - (float)(v5
                                                                  * (float)((v10 << 15) & 0xEFC60000 ^ v10 ^ (((v10 << 15) & 0xEFC60000 ^ v10) >> 18))));
    }
    while (v3 != v4);
  }
  return result;
}

void sub_19E1C57EC(uint64_t a1)
{
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v2 = a1 + 24;
  uint64_t v3 = v4;
  int v5 = *(_DWORD *)(v2 - 16);
  unint64_t v6 = (*(void *)(v2 + 8) - v4) >> 3;
  if (v5 <= v6)
  {
    if (v5 < v6) {
      *(void *)(a1 + 32) = v3 + 8 * v5;
    }
  }
  else
  {
    sub_19E1599BC((void **)v2, v5 - v6);
    int v5 = *(_DWORD *)(a1 + 8);
  }
  if (v5 > 0) {
    operator new[]();
  }
  unint64_t v7 = v5;
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v9) >> 3);
  if (v7 <= v10)
  {
    if (v7 < v10)
    {
      uint64_t v11 = v9 + 24 * (int)v7;
      if (v8 != v11)
      {
        uint64_t v12 = *(void *)(a1 + 56);
        do
        {
          uint64_t v14 = *(void **)(v12 - 24);
          v12 -= 24;
          unsigned int v13 = v14;
          if (v14)
          {
            *(void *)(v8 - 16) = v13;
            operator delete(v13);
          }
          uint64_t v8 = v12;
        }
        while (v12 != v11);
      }
      *(void *)(a1 + 56) = v11;
    }
  }
  else
  {
    sub_19E232360(a1 + 48, v7 - v10);
  }
  int v15 = *(_DWORD *)(a1 + 8);
  if (v15 >= 1)
  {
    uint64_t v16 = 0;
    for (uint64_t i = 0; i < v15; ++i)
    {
      int v18 = (void *)(*(void *)(a1 + 48) + v16);
      unint64_t v19 = *(int *)(a1 + 12);
      unint64_t v20 = (uint64_t)(v18[1] - *v18) >> 2;
      if (v19 > v20)
      {
        sub_19E1C5E88((uint64_t)v18, v19 - v20);
        int v15 = *(_DWORD *)(a1 + 8);
      }
      else if (v19 < v20)
      {
        v18[1] = *v18 + 4 * v19;
      }
      v16 += 24;
    }
  }
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  if (!*(unsigned char *)(a1 + 88)) {
    operator new();
  }
}

void sub_19E1C5E60(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E1C5E74(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E1C5E88(uint64_t a1, unint64_t a2)
{
  int v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  unint64_t v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 2)
  {
    if (a2)
    {
      bzero(v5, 4 * a2);
      unint64_t v6 = &v5[4 * a2];
    }
    *(void *)(a1 + 8) = v6;
  }
  else
  {
    unint64_t v7 = *(char **)a1;
    uint64_t v8 = (uint64_t)&v5[-*(void *)a1];
    uint64_t v9 = v8 >> 2;
    unint64_t v10 = (v8 >> 2) + a2;
    if (v10 >> 62) {
      sub_19E13D694();
    }
    uint64_t v11 = v4 - (void)v7;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 62) {
        sub_19E13C418();
      }
      unsigned int v13 = operator new(4 * v12);
    }
    else
    {
      unsigned int v13 = 0;
    }
    uint64_t v14 = &v13[4 * v9];
    size_t v15 = 4 * a2;
    uint64_t v16 = &v13[4 * v12];
    bzero(v14, v15);
    int v17 = &v14[v15];
    if (v5 != v7)
    {
      unint64_t v18 = v5 - v7 - 4;
      if (v18 < 0x2C) {
        goto LABEL_31;
      }
      if ((unint64_t)(v5 - v13 - v8) < 0x20) {
        goto LABEL_31;
      }
      uint64_t v19 = (v18 >> 2) + 1;
      uint64_t v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
      unint64_t v6 = &v5[-v20];
      v14 -= v20;
      uint64_t v21 = &v13[4 * v9 - 16];
      int v22 = v5 - 16;
      uint64_t v23 = v19 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        _OWORD *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 8;
      }
      while (v23);
      if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_31:
        do
        {
          int v25 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *((_DWORD *)v14 - 1) = v25;
          v14 -= 4;
        }
        while (v6 != v7);
      }
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v17;
    *(void *)(a1 + 16) = v16;
    if (v7)
    {
      operator delete(v7);
    }
  }
}

void *sub_19E1C6038(void *a1)
{
  uint64_t v3 = a1[12];
  uint64_t v2 = a1[13];
  if (v2 == v3)
  {
    uint64_t v3 = a1[13];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      int v5 = *(void **)(v3 + 8 * v4);
      if (v5)
      {
        operator delete[](v5);
        uint64_t v3 = a1[12];
        uint64_t v2 = a1[13];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  a1[13] = v3;
  unint64_t v6 = (void *)a1[10];
  if (v6)
  {
    operator delete(v6);
    a1[10] = 0;
  }
  unint64_t v7 = (void *)a1[9];
  if (v7)
  {
    operator delete(v7);
    a1[9] = 0;
  }
  uint64_t v8 = (void *)a1[12];
  if (v8)
  {
    a1[13] = v8;
    operator delete(v8);
  }
  uint64_t v9 = a1[6];
  if (v9)
  {
    uint64_t v10 = a1[7];
    uint64_t v11 = (void *)a1[6];
    if (v10 != v9)
    {
      uint64_t v12 = a1[7];
      do
      {
        uint64_t v14 = *(void **)(v12 - 24);
        v12 -= 24;
        unsigned int v13 = v14;
        if (v14)
        {
          *(void *)(v10 - 16) = v13;
          operator delete(v13);
        }
        uint64_t v10 = v12;
      }
      while (v12 != v9);
      uint64_t v11 = (void *)a1[6];
    }
    a1[7] = v9;
    operator delete(v11);
  }
  size_t v15 = (void *)a1[3];
  if (v15)
  {
    a1[4] = v15;
    operator delete(v15);
  }
  return a1;
}

unsigned char *sub_19E1C6130(unsigned char *result, uint64_t *a2, int a3, int a4, int a5, int a6)
{
  if (!a2) {
    goto LABEL_41;
  }
  if (a3 == 3)
  {
    uint64_t v6 = *((int *)a2 + 18);
    uint64_t v7 = *a2;
    uint64_t v8 = (unsigned __int8 *)(*a2 + v6);
    unint64_t v9 = *a2 + a2[1] - 1;
    if ((unint64_t)v8 <= v9)
    {
      int v10 = *v8;
      LODWORD(v6) = v6 + 1;
      for (*((_DWORD *)a2 + 18) = v6; v10; --v10)
      {
        if (v7 + (int)v6 <= v9)
        {
          LODWORD(v6) = v6 + 1;
          *((_DWORD *)a2 + 18) = v6;
        }
      }
    }
    if ((v6 & 0xF) != 0) {
LABEL_6:
    }
      sub_19E2F6320(19);
  }
  else if ((*result & 0xF) != 0)
  {
    goto LABEL_6;
  }
  if (a4)
  {
    *(void *)float32x2_t result = 0;
    if (a5 != 8)
    {
      if (a5 == 16)
      {
        a6 *= 2;
      }
      else
      {
        if (a5 != 32) {
          sub_19E2F6320(46);
        }
        a6 *= 4;
      }
    }
    uint64_t v19 = *((int *)a2 + 18);
    uint64_t v11 = (_WORD *)(*a2 + v19);
    *(void *)float32x2_t result = v11;
    *((_DWORD *)a2 + 18) = v19 + a6;
    goto LABEL_26;
  }
  if (a5 != 8)
  {
    if (a5 == 16)
    {
      uint64_t v11 = *(_WORD **)result;
      int v12 = 2 * a6;
      if (a6 >= 1)
      {
        uint64_t v24 = *a2;
        unint64_t v25 = *a2 + a2[1] - 4;
        int v26 = *((_DWORD *)a2 + 18);
        uint64_t v27 = a6;
        while (1)
        {
          float v28 = (__int16 *)(v24 + v26);
          if ((unint64_t)v28 > v25) {
            break;
          }
          __int16 v29 = *v28;
          *((_DWORD *)a2 + 18) = ++v26;
          *v11++ = v29;
          if (!--v27) {
            goto LABEL_27;
          }
        }
LABEL_40:
        sub_19E2F6320(25);
      }
    }
    else
    {
      if (a5 != 32) {
        sub_19E2F6320(45);
      }
      uint64_t v11 = *(_WORD **)result;
      int v12 = 4 * a6;
      if (a6 >= 1)
      {
        uint64_t v13 = *a2;
        unint64_t v14 = *a2 + a2[1] - 4;
        int v15 = *((_DWORD *)a2 + 18);
        uint64_t v16 = a6;
        while (1)
        {
          int v17 = (int *)(v13 + v15);
          if ((unint64_t)v17 > v14) {
            goto LABEL_40;
          }
          int v18 = *v17;
          v15 += 4;
          *((_DWORD *)a2 + 18) = v15;
          *(_DWORD *)uint64_t v11 = v18;
          v11 += 2;
          if (!--v16) {
            goto LABEL_27;
          }
        }
      }
    }
    a6 = v12;
    goto LABEL_26;
  }
  uint64_t v11 = *(_WORD **)result;
  if (a6 >= 1)
  {
    uint64_t v20 = a6;
    do
    {
      uint64_t v21 = *((int *)a2 + 18);
      int v22 = (char *)(*a2 + v21);
      if ((unint64_t)v22 > *a2 + a2[1] - 1) {
        goto LABEL_40;
      }
      char v23 = *v22;
      *((_DWORD *)a2 + 18) = v21 + 1;
      *(unsigned char *)uint64_t v11 = v23;
      uint64_t v11 = (_WORD *)((char *)v11 + 1);
      --v20;
    }
    while (v20);
    uint64_t v11 = *(_WORD **)result;
  }
LABEL_26:
  int v12 = a6;
  if (!v11) {
    goto LABEL_41;
  }
LABEL_27:
  if (!v12) {
LABEL_41:
  }
    sub_19E2F6320(9);
  return result;
}

unsigned char *sub_19E1C632C(unsigned char *result, uint64_t *a2, int a3, int a4, int a5, int a6, int a7)
{
  if (!a2) {
    goto LABEL_41;
  }
  if (a3 == 3)
  {
    uint64_t v7 = *((int *)a2 + 18);
    uint64_t v8 = *a2;
    unint64_t v9 = (unsigned __int8 *)(*a2 + v7);
    unint64_t v10 = *a2 + a2[1] - 1;
    if ((unint64_t)v9 <= v10)
    {
      int v11 = *v9;
      LODWORD(v7) = v7 + 1;
      for (*((_DWORD *)a2 + 18) = v7; v11; --v11)
      {
        if (v8 + (int)v7 <= v10)
        {
          LODWORD(v7) = v7 + 1;
          *((_DWORD *)a2 + 18) = v7;
        }
      }
    }
    if ((v7 & 0xF) != 0) {
LABEL_6:
    }
      sub_19E2F6320(18);
  }
  else if ((*result & 0xF) != 0)
  {
    goto LABEL_6;
  }
  if (a4)
  {
    *(void *)float32x2_t result = 0;
    switch(a5)
    {
      case 8:
        int v12 = a7 * a6;
        break;
      case 16:
        int v12 = 2 * a7 * a6;
        break;
      case 32:
        int v12 = 4 * a7 * a6;
        break;
      default:
        sub_19E2F6320(46);
    }
    uint64_t v20 = *((int *)a2 + 18);
    uint64_t v13 = (_WORD *)(*a2 + v20);
    *(void *)float32x2_t result = v13;
    *((_DWORD *)a2 + 18) = v20 + v12;
    goto LABEL_27;
  }
  switch(a5)
  {
    case 8:
      uint64_t v13 = *(_WORD **)result;
      int v12 = a7 * a6;
      if (a7 * a6 >= 1)
      {
        uint64_t v21 = (a7 * a6);
        do
        {
          uint64_t v22 = *((int *)a2 + 18);
          char v23 = (char *)(*a2 + v22);
          if ((unint64_t)v23 > *a2 + a2[1] - 1) {
            goto LABEL_40;
          }
          char v24 = *v23;
          *((_DWORD *)a2 + 18) = v22 + 1;
          *(unsigned char *)uint64_t v13 = v24;
          uint64_t v13 = (_WORD *)((char *)v13 + 1);
          --v21;
        }
        while (v21);
        uint64_t v13 = *(_WORD **)result;
      }
      break;
    case 16:
      uint64_t v13 = *(_WORD **)result;
      uint64_t v25 = (a7 * a6);
      int v12 = 2 * v25;
      if ((int)v25 < 1) {
        break;
      }
      uint64_t v26 = *a2;
      unint64_t v27 = *a2 + a2[1] - 4;
      int v28 = *((_DWORD *)a2 + 18);
      while (1)
      {
        __int16 v29 = (__int16 *)(v26 + v28);
        if ((unint64_t)v29 > v27) {
          break;
        }
        __int16 v30 = *v29;
        *((_DWORD *)a2 + 18) = ++v28;
        *v13++ = v30;
        if (!--v25) {
          goto LABEL_28;
        }
      }
LABEL_40:
      sub_19E2F6320(25);
    case 32:
      uint64_t v13 = *(_WORD **)result;
      uint64_t v14 = (a7 * a6);
      int v12 = 4 * v14;
      if ((int)v14 >= 1)
      {
        uint64_t v15 = *a2;
        unint64_t v16 = *a2 + a2[1] - 4;
        int v17 = *((_DWORD *)a2 + 18);
        while (1)
        {
          int v18 = (int *)(v15 + v17);
          if ((unint64_t)v18 > v16) {
            goto LABEL_40;
          }
          int v19 = *v18;
          v17 += 4;
          *((_DWORD *)a2 + 18) = v17;
          *(_DWORD *)uint64_t v13 = v19;
          v13 += 2;
          if (!--v14) {
            goto LABEL_28;
          }
        }
      }
      break;
    default:
      sub_19E2F6320(45);
  }
LABEL_27:
  if (!v13) {
    goto LABEL_41;
  }
LABEL_28:
  if (!v12) {
LABEL_41:
  }
    sub_19E2F6320(9);
  return result;
}

uint64_t sub_19E1C6530(uint64_t result, FILE *a2, int *a3, int a4, int a5, unsigned int a6)
{
  if (a6 > 0x20 || ((1 << a6) & 0x100010100) == 0) {
    sub_19E2F6320(23);
  }
  switch(a5)
  {
    case 8:
      if (a6 == 32)
      {
LABEL_9:
        sub_19E1C6774(result, a2, a3, a4);
      }
LABEL_27:
      sub_19E2F6320(45);
    case 16:
      if (a6 == 32)
      {
        goto LABEL_9;
      }
      goto LABEL_27;
    case 32:
      switch(a6)
      {
        case 0x20u:
          goto LABEL_9;
        case 8u:
          sub_19E1C696C(result, a2, a3, a4);
        case 0x10u:
          sub_19E1C689C(result, a2, a3, a4);
      }
      break;
  }
  return result;
}

uint64_t sub_19E1C6648(uint64_t result, FILE *a2, int *a3, int a4, int a5, unsigned int a6)
{
  if (a6 > 0x20 || ((1 << a6) & 0x100010100) == 0) {
    sub_19E2F6320(23);
  }
  switch(a5)
  {
    case 8:
      if (a6 == 32)
      {
LABEL_9:
        sub_19E1C6D68(result, a2, a3, a4);
      }
LABEL_27:
      sub_19E2F6320(45);
    case 16:
      if (a6 == 32)
      {
        goto LABEL_9;
      }
      goto LABEL_27;
    case 32:
      switch(a6)
      {
        case 0x20u:
          goto LABEL_9;
        case 8u:
          sub_19E1C6F68(result, a2, a3, a4);
        case 0x10u:
          sub_19E1C6E8C(result, a2, a3, a4);
      }
      break;
  }
  return result;
}

void sub_19E1C6774(int a1, FILE *__stream, int *a3, int a4)
{
  if (__stream)
  {
    if (a4 == 3)
    {
      int v6 = *a3 & 0xF;
      if (*a3 <= 0) {
        int v6 = -(-*a3 & 0xF);
      }
      if (v6 >= 15) {
        int v7 = 16;
      }
      else {
        int v7 = 15 - v6;
      }
      sub_19E2F673C(__stream, a3, v7);
      sub_19E2F67D4((size_t)__stream, a3, 85, v7);
      if ((*(unsigned char *)a3 & 0xF) != 0) {
        sub_19E2F6320(17);
      }
    }
    operator new[]();
  }
  sub_19E2F6320(9);
}

void sub_19E1C689C(int a1, FILE *__stream, int *a3, int a4)
{
  if (!__stream) {
    sub_19E2F6320(9);
  }
  if (a4 == 3)
  {
    int v6 = *a3 & 0xF;
    if (*a3 <= 0) {
      int v6 = -(-*a3 & 0xF);
    }
    if (v6 >= 15) {
      int v7 = 16;
    }
    else {
      int v7 = 15 - v6;
    }
    sub_19E2F673C(__stream, a3, v7);
    sub_19E2F67D4((size_t)__stream, a3, 85, v7);
    if ((*(unsigned char *)a3 & 0xF) != 0) {
      sub_19E2F6320(17);
    }
  }
  operator new[]();
}

void sub_19E1C696C(int a1, FILE *__stream, int *a3, int a4)
{
  if (!__stream) {
    sub_19E2F6320(9);
  }
  if (a4 == 3)
  {
    int v6 = *a3 & 0xF;
    if (*a3 <= 0) {
      int v6 = -(-*a3 & 0xF);
    }
    if (v6 >= 15) {
      int v7 = 16;
    }
    else {
      int v7 = 15 - v6;
    }
    sub_19E2F673C(__stream, a3, v7);
    sub_19E2F67D4((size_t)__stream, a3, 85, v7);
    if ((*(unsigned char *)a3 & 0xF) != 0) {
      sub_19E2F6320(17);
    }
  }
  operator new[]();
}

void *sub_19E1C6A34(void *result, int a2, float a3)
{
  if (a2 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = a2;
    float v5 = a3 * 4.6566e-10;
    do
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9458940, memory_order_acquire) & 1) == 0)
      {
        uint64_t v32 = result;
        float v28 = a3;
        float v30 = v5;
        uint64_t v24 = v4;
        uint64_t v26 = v3;
        int v11 = __cxa_guard_acquire(&qword_1E9458940);
        uint64_t v4 = v24;
        uint64_t v3 = v26;
        float v5 = v30;
        a3 = v28;
        int v12 = v11;
        float32x2_t result = v32;
        if (v12)
        {
          unsigned int v13 = 5489;
          dword_1E94589E8[0] = 5489;
          uint64_t v14 = 55;
          uint64_t v15 = 1;
          do
          {
            int v16 = 1812433253 * (v13 ^ (v13 >> 30));
            unsigned int v13 = v16 + v15;
            dword_1E9458910[v14] = v14 + v16 - 54;
            ++v15;
            ++v14;
          }
          while (v14 != 678);
          qword_1E94593A8 = 0;
          __cxa_guard_release(&qword_1E9458940);
          a3 = v28;
          float32x2_t result = v32;
          uint64_t v4 = v24;
          uint64_t v3 = v26;
          float v5 = v30;
        }
      }
      unint64_t v6 = (qword_1E94593A8 + 1) % 0x270uLL;
      int v7 = dword_1E94589E8[v6];
      unsigned int v8 = dword_1E94589E8[(qword_1E94593A8 + 397) % 0x270uLL] ^ ((v7 & 0x7FFFFFFE | dword_1E94589E8[qword_1E94593A8] & 0x80000000) >> 1);
      unsigned int v9 = v8 ^ (v7 << 31 >> 31) & 0x9908B0DF;
      dword_1E94589E8[qword_1E94593A8] = v9;
      qword_1E94593A8 = v6;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9458940, memory_order_acquire) & 1) == 0)
      {
        unint64_t v33 = result;
        float v29 = a3;
        float v31 = v5;
        uint64_t v25 = v4;
        uint64_t v27 = v3;
        unsigned int v23 = v8 ^ (v7 << 31 >> 31) & 0x9908B0DF;
        int v17 = __cxa_guard_acquire(&qword_1E9458940);
        unsigned int v9 = v23;
        uint64_t v4 = v25;
        uint64_t v3 = v27;
        float v5 = v31;
        a3 = v29;
        int v18 = v17;
        float32x2_t result = v33;
        if (v18)
        {
          unsigned int v19 = 5489;
          dword_1E94589E8[0] = 5489;
          uint64_t v20 = 55;
          uint64_t v21 = 1;
          do
          {
            int v22 = 1812433253 * (v19 ^ (v19 >> 30));
            unsigned int v19 = v22 + v21;
            dword_1E9458910[v20] = v20 + v22 - 54;
            ++v21;
            ++v20;
          }
          while (v20 != 678);
          qword_1E94593A8 = 0;
          __cxa_guard_release(&qword_1E9458940);
          a3 = v29;
          float32x2_t result = v33;
          uint64_t v4 = v25;
          uint64_t v3 = v27;
          float v5 = v31;
          unsigned int v9 = v23;
        }
      }
      unsigned int v10 = ((v9 ^ (v9 >> 11)) << 7) & 0x9D2C5680 ^ v9 ^ (v9 >> 11);
      *(unsigned char *)(*result + v3++) = (int)(float)-(float)(a3
                                                      - (float)(v5
                                                              * (float)((v10 << 15) & 0xEFC60000 ^ v10 ^ (((v10 << 15) & 0xEFC60000 ^ v10) >> 18))));
    }
    while (v3 != v4);
  }
  return result;
}

void sub_19E1C6D68(int a1, FILE *__stream, int *a3, int a4)
{
  if (__stream)
  {
    if (a4 == 3)
    {
      int v6 = *a3 & 0xF;
      if (*a3 <= 0) {
        int v6 = -(-*a3 & 0xF);
      }
      if (v6 >= 15) {
        int v7 = 16;
      }
      else {
        int v7 = 15 - v6;
      }
      sub_19E2F673C(__stream, a3, v7);
      sub_19E2F67D4((size_t)__stream, a3, 85, v7);
      if ((*(unsigned char *)a3 & 0xF) != 0) {
        sub_19E2F6320(18);
      }
    }
    operator new[]();
  }
  sub_19E2F6320(9);
}

void sub_19E1C6E8C(int a1, FILE *__stream, int *a3, int a4)
{
  if (!__stream) {
    sub_19E2F6320(9);
  }
  if (a4 == 3)
  {
    int v6 = *a3 & 0xF;
    if (*a3 <= 0) {
      int v6 = -(-*a3 & 0xF);
    }
    if (v6 >= 15) {
      int v7 = 16;
    }
    else {
      int v7 = 15 - v6;
    }
    sub_19E2F673C(__stream, a3, v7);
    sub_19E2F67D4((size_t)__stream, a3, 85, v7);
    if ((*(unsigned char *)a3 & 0xF) != 0) {
      sub_19E2F6320(18);
    }
  }
  operator new[]();
}

void sub_19E1C6F68(int a1, FILE *__stream, int *a3, int a4)
{
  if (!__stream) {
    sub_19E2F6320(9);
  }
  if (a4 == 3)
  {
    int v6 = *a3 & 0xF;
    if (*a3 <= 0) {
      int v6 = -(-*a3 & 0xF);
    }
    if (v6 >= 15) {
      int v7 = 16;
    }
    else {
      int v7 = 15 - v6;
    }
    sub_19E2F673C(__stream, a3, v7);
    sub_19E2F67D4((size_t)__stream, a3, 85, v7);
    if ((*(unsigned char *)a3 & 0xF) != 0) {
      sub_19E2F6320(18);
    }
  }
  operator new[]();
}

uint64_t sub_19E1C703C(uint64_t result, float a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4 = *(unsigned int *)(result + 16);
  if ((int)v4 >= 1)
  {
    if ((int)a4 >= 1)
    {
      float v5 = *(float ***)(result + 24);
      if (a4 <= 7)
      {
        do
        {
          int v11 = *v5;
          *void *v5 = **v5 * a2;
          if (a4 != 1)
          {
            v11[1] = v11[1] * a2;
            if (a4 != 2)
            {
              v11[2] = v11[2] * a2;
              if (a4 != 3)
              {
                v11[3] = v11[3] * a2;
                if (a4 != 4)
                {
                  v11[4] = v11[4] * a2;
                  if (a4 != 5)
                  {
                    v11[5] = v11[5] * a2;
                    if (a4 != 6) {
                      v11[6] = v11[6] * a2;
                    }
                  }
                }
              }
            }
          }
          ++v5;
          --v4;
        }
        while (v4);
      }
      else
      {
        uint64_t v6 = a4 & 0xFFFFFFF8;
        uint64_t v7 = a4 - v6;
        if (a4 == v6)
        {
          do
          {
            unsigned int v8 = (float32x4_t *)(v5[v7] + 4);
            uint64_t v9 = a4 & 0xFFFFFFF8;
            do
            {
              float32x4_t v10 = vmulq_n_f32(*v8, a2);
              v8[-1] = vmulq_n_f32(v8[-1], a2);
              *unsigned int v8 = v10;
              v8 += 2;
              v9 -= 8;
            }
            while (v9);
            ++v7;
          }
          while (v7 != v4);
        }
        else
        {
          for (uint64_t i = 0; i != v4; ++i)
          {
            unsigned int v13 = (float32x4_t *)v5[i];
            uint64_t v14 = v13 + 1;
            uint64_t v15 = a4 & 0xFFFFFFF8;
            do
            {
              float32x4_t v16 = vmulq_n_f32(*v14, a2);
              v14[-1] = vmulq_n_f32(v14[-1], a2);
              *uint64_t v14 = v16;
              v14 += 2;
              v15 -= 8;
            }
            while (v15);
            int v17 = (float *)((char *)v13->f32 + ((4 * a4) & 0x3FFFFFFE0));
            uint64_t v18 = a4 - v6;
            do
            {
              float *v17 = *v17 * a2;
              ++v17;
              --v18;
            }
            while (v18);
          }
        }
      }
    }
    uint64_t v19 = *(void *)(result + 48);
    uint64_t v21 = *(unsigned char **)v19;
    uint64_t v20 = *(unsigned char **)(v19 + 8);
    size_t v22 = v20 - v21;
    if (v20 != v21)
    {
      if ((v22 & 0x8000000000000000) != 0) {
        sub_19E13D694();
      }
      unsigned int v23 = operator new(v20 - v21);
      memcpy(v23, v21, v22);
    }
    sub_19E2F6320(67);
  }
  return result;
}

void sub_19E1C7218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E1C7244(void **a1, const void **a2, int a3, int a4)
{
  switch(a4)
  {
    case 0:
      size_t v4 = 4 * a3;
      float v5 = *a1;
      uint64_t v6 = *a2;
      memmove(v5, v6, v4);
      break;
    case 1:
      if (a3 >= 1)
      {
        uint64_t v7 = 0;
        unsigned int v8 = *a2;
        uint64_t v9 = *a1;
        uint64_t v10 = a3;
        if (a3 < 4) {
          goto LABEL_11;
        }
        if ((unint64_t)(v9 - v8) < 0x10) {
          goto LABEL_11;
        }
        uint64_t v7 = a3 & 0x7FFFFFFC;
        __asm { FMOV            V0.4S, #1.0 }
        float32x4_t v55 = _Q0;
        uint64_t v16 = a3 & 0xFFFFFFFC;
        int v17 = (float32x4_t *)*a1;
        uint64_t v18 = (float32x4_t *)*a2;
        do
        {
          float32x4_t v19 = *v18++;
          float32x4_t v59 = vnegq_f32(v19);
          float v56 = expf(v59.f32[1]);
          v20.f32[0] = expf(v59.f32[0]);
          v20.f32[1] = v56;
          float32x4_t v57 = v20;
          float v21 = expf(v59.f32[2]);
          float32x4_t v22 = v57;
          v22.f32[2] = v21;
          float32x4_t v58 = v22;
          float v23 = expf(v59.f32[3]);
          float32x4_t v24 = v58;
          v24.f32[3] = v23;
          float32x4_t v25 = vdivq_f32(v55, vaddq_f32(v24, v55));
          *v17++ = vmlsq_f32(v25, v25, v25);
          v16 -= 4;
        }
        while (v16);
        if (v7 != v10)
        {
LABEL_11:
          uint64_t v26 = v10 - v7;
          uint64_t v27 = (float *)&v9[4 * v7];
          float v28 = (float *)&v8[4 * v7];
          do
          {
            float v29 = *v28++;
            float v30 = expf(-v29);
            *v27++ = (float)(1.0 / (float)(v30 + 1.0))
                   - (float)((float)(1.0 / (float)(v30 + 1.0)) * (float)(1.0 / (float)(v30 + 1.0)));
            --v26;
          }
          while (v26);
        }
      }
      break;
    case 2:
      if (a3 >= 1)
      {
        float v31 = (float *)*a2;
        uint64_t v32 = (float *)*a1;
        uint64_t v33 = a3;
        do
        {
          float v34 = *v31++;
          float v35 = tanhf(v34);
          *v32++ = 1.0 - (float)(v35 * v35);
          --v33;
        }
        while (v33);
      }
      break;
    case 3:
      if (a3 >= 1)
      {
        unint64_t v36 = (float *)*a2;
        unint64_t v37 = (float *)*a1;
        uint64_t v38 = a3;
        do
        {
          float v39 = *v36++;
          float v40 = tanhf(v39 * 0.66667);
          *v37++ = 1.1439 - (float)((float)(v40 * v40) * 1.1439);
          --v38;
        }
        while (v38);
      }
      break;
    case 4:
      if (a3 >= 1)
      {
        uint64_t v41 = 0;
        unint64_t v42 = (float32x4_t *)*a2;
        unint64_t v43 = (int8x16_t *)*a1;
        if (a3 < 8) {
          goto LABEL_28;
        }
        if ((unint64_t)((char *)v43 - (char *)v42) < 0x20) {
          goto LABEL_28;
        }
        uint64_t v41 = a3 & 0x7FFFFFF8;
        unint64_t v44 = v42 + 1;
        unint64_t v45 = v43 + 1;
        __asm { FMOV            V0.4S, #1.0 }
        uint64_t v47 = a3 & 0xFFFFFFF8;
        do
        {
          int8x16_t v48 = vbicq_s8(_Q0, (int8x16_t)vclezq_f32(*v44));
          v45[-1] = vbicq_s8(_Q0, (int8x16_t)vclezq_f32(v44[-1]));
          *unint64_t v45 = v48;
          v44 += 2;
          v45 += 2;
          v47 -= 8;
        }
        while (v47);
        if (v41 != a3)
        {
LABEL_28:
          uint64_t v49 = a3 - v41;
          uint64_t v50 = v41;
          std::string::size_type v51 = (float *)&v43->i32[v50];
          BOOL v52 = &v42->f32[v50];
          do
          {
            float v53 = *v52++;
            if (v53 > 0.0) {
              float v54 = 1.0;
            }
            else {
              float v54 = 0.0;
            }
            *v51++ = v54;
            --v49;
          }
          while (v49);
        }
      }
      break;
    default:
      return;
  }
}

void sub_19E1C7520(float **a1, const float **a2, int a3, int a4)
{
  switch(a4)
  {
    case 0:
      size_t v5 = 4 * a3;
      uint64_t v6 = *a1;
      uint64_t v7 = *a2;
      memmove(v6, v7, v5);
      return;
    case 1:
      unsigned int v8 = (float32x4_t *)*a1;
      if (((unint64_t)*a1 & 0xF) != 0)
      {
        if (a3 >= 1)
        {
          uint64_t v9 = 0;
          uint64_t v10 = *a2;
          uint64_t v11 = a3;
          if (a3 < 4) {
            goto LABEL_12;
          }
          if ((unint64_t)((char *)v8 - (char *)v10) < 0x10) {
            goto LABEL_12;
          }
          uint64_t v9 = a3 & 0x7FFFFFFC;
          __asm { FMOV            V0.4S, #1.0 }
          float32x4_t v68 = _Q0;
          uint64_t v16 = a3 & 0xFFFFFFFC;
          int v17 = (float32x4_t *)*a1;
          uint64_t v18 = (float32x4_t *)*a2;
          do
          {
            float32x4_t v19 = *v18++;
            float32x4_t v72 = vnegq_f32(v19);
            float v69 = expf(v72.f32[1]);
            v20.f32[0] = expf(v72.f32[0]);
            v20.f32[1] = v69;
            float32x4_t v70 = v20;
            float v21 = expf(v72.f32[2]);
            float32x4_t v22 = v70;
            v22.f32[2] = v21;
            float32x4_t v71 = v22;
            float v23 = expf(v72.f32[3]);
            float32x4_t v24 = v71;
            v24.f32[3] = v23;
            *v17++ = vdivq_f32(v68, vaddq_f32(v24, v68));
            v16 -= 4;
          }
          while (v16);
          if (v9 != v11)
          {
LABEL_12:
            uint64_t v25 = v11 - v9;
            uint64_t v26 = &v8->f32[v9];
            uint64_t v27 = (float *)&v10[v9];
            do
            {
              float v28 = *v27++;
              *v26++ = 1.0 / (float)(expf(-v28) + 1.0);
              --v25;
            }
            while (v25);
          }
        }
      }
      else if (a3 >= -2)
      {
        BOOL v62 = (float32x4_t *)*a2;
        int v63 = a3 - 1;
        if (a3 < 1) {
          int v63 = a3 + 2;
        }
        int v64 = (v63 >> 2) + 1;
        __asm { FMOV            V0.4S, #1.0 }
        float32x4_t v73 = _Q0;
        do
        {
          float32x4_t v66 = *v62++;
          *(double *)v67.i64 = MEMORY[0x19F3BC9C0]((__n128)vnegq_f32(v66));
          *v8++ = vdivq_f32(v73, vaddq_f32(v67, v73));
          --v64;
        }
        while (v64);
      }
      return;
    case 2:
      LODWORD(__N) = a3;
      vvtanhf(*a1, *a2, (const int *)&__N);
      return;
    case 3:
      float __B = 0.66667;
      LODWORD(__N) = a3;
      float v74 = 1.7159;
      vDSP_vsmul(*a2, 1, &__B, *a1, 1, a3);
      vvtanhf(*a1, *a1, (const int *)&__N);
      vDSP_vsmul(*a1, 1, &v74, *a1, 1, (int)__N);
      return;
    case 4:
      if (a3 >= 1)
      {
        uint64_t v29 = 0;
        float v30 = *a2;
        float v31 = *a1;
        if (a3 < 8) {
          goto LABEL_23;
        }
        if ((unint64_t)((char *)v31 - (char *)v30) < 0x20) {
          goto LABEL_23;
        }
        uint64_t v29 = a3 & 0xFFFFFFF8;
        uint64_t v32 = (float32x4_t *)(v30 + 4);
        uint64_t v33 = (float32x4_t *)(v31 + 4);
        uint64_t v34 = v29;
        do
        {
          float32x4_t v35 = vmaxnmq_f32(*v32, (float32x4_t)0);
          v33[-1] = vmaxnmq_f32(v32[-1], (float32x4_t)0);
          *uint64_t v33 = v35;
          v32 += 2;
          v33 += 2;
          v34 -= 8;
        }
        while (v34);
        if (v29 != a3)
        {
LABEL_23:
          uint64_t v36 = a3 - v29;
          uint64_t v37 = v29;
          uint64_t v38 = &v31[v37];
          float v39 = (float *)&v30[v37];
          do
          {
            float v40 = *v39++;
            *v38++ = fmaxf(v40, 0.0);
            --v36;
          }
          while (v36);
        }
      }
      return;
    case 5:
      if (a3 < 1) {
        return;
      }
      uint64_t v41 = *a2;
      unint64_t v42 = *a1;
      if (a3 < 4 || (v42 < &v41[a3] ? (_CF = v41 >= &v42[a3]) : (_CF = 1), !_CF))
      {
        uint64_t v45 = 0;
        goto LABEL_41;
      }
      float64x2_t v44 = (float64x2_t)vdupq_n_s64(0x3FC999999999999AuLL);
      uint64_t v45 = a3 & 0xFFFFFFFE;
      __asm
      {
        FMOV            V1.2D, #0.5
        FMOV            V2.2S, #1.0
      }
      uint64_t v48 = v45;
      uint64_t v49 = (float32x2_t *)*a2;
      uint64_t v50 = *a1;
      break;
    default:
      sub_19E2F6320(4);
  }
  do
  {
    float32x2_t v51 = vcvt_f32_f64(vmlaq_f64(_Q1, vcvtq_f64_f32(*v49), v44));
    *(float32x2_t *)uint64_t v50 = v51;
    int8x8_t v52 = (int8x8_t)vcltz_f32(v51);
    int8x8_t v53 = (int8x8_t)vcgt_f32(v51, _D2);
    int8x8_t v54 = vand_s8(vand_s8((int8x8_t)_D2, (int8x8_t)vcgez_f32(v51)), v53);
    int8x8_t v55 = vorr_s8(v53, v52);
    if (v55.i8[0])
    {
      *uint64_t v50 = *(float *)v54.i32;
      if ((v55.i8[4] & 1) == 0) {
        goto LABEL_34;
      }
    }
    else if ((v55.i8[4] & 1) == 0)
    {
      goto LABEL_34;
    }
    v50[1] = *(float *)&v54.i32[1];
LABEL_34:
    v50 += 2;
    ++v49;
    v48 -= 2;
  }
  while (v48);
  if (v45 == a3) {
    return;
  }
LABEL_41:
  uint64_t v56 = a3 - v45;
  uint64_t v57 = v45;
  float32x4_t v58 = &v42[v57];
  float32x4_t v59 = (float *)&v41[v57];
  do
  {
    float v60 = *v59 * 0.2 + 0.5;
    *float32x4_t v58 = v60;
    float v61 = 0.0;
    if (v60 < 0.0 || (float v61 = 1.0, v60 > 1.0)) {
      *float32x4_t v58 = v61;
    }
    ++v58;
    ++v59;
    --v56;
  }
  while (v56);
}

void sub_19E1C7984(uint64_t a1, uint64_t a2, uint64_t a3, void **a4, int a5, int a6, int a7)
{
  if (a7)
  {
    bzero(*a4, 4 * a6 * a5);
    cblas_sger_NEWLAPACK();
  }
  else
  {
    uint64_t v11 = *a4;
    global_queue = dispatch_get_global_queue(0, 0);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = sub_19E1C7E74;
    block[3] = &unk_1E599D040;
    int v14 = a6;
    block[4] = v11;
    block[5] = a2;
    block[6] = a3;
    dispatch_apply(a5, global_queue, block);
  }
}

void sub_19E1C7A94()
{
}

void sub_19E1C7E74(uint64_t a1, uint64_t a2)
{
  vDSP_Length v2 = *(int *)(a1 + 56);
  uint64_t v3 = (float *)(*(void *)(a1 + 32) + 4 * v2 * a2);
  float __B = *(float *)(**(void **)(a1 + 40) + 4 * (int)a2);
  vDSP_vsma(**(const float ***)(a1 + 48), 1, &__B, v3, 1, v3, 1, v2);
}

void sub_19E1C7ED0(uint64_t a1, void *a2, void *a3, int a4, uint64_t a5)
{
  if (a4 < 0x2000000) {
    uint64_t v8 = 1;
  }
  else {
    uint64_t v8 = HIBYTE(a4);
  }
  uint64_t v9 = *(void *)(a1 + 2680);
  if (v9)
  {
    BOOL v282 = *(unsigned char *)(v9 + 464) != 0;
    if (a3[1] == *a3) {
      goto LABEL_11;
    }
  }
  else
  {
    BOOL v282 = 0;
    if (a3[1] == *a3) {
      goto LABEL_11;
    }
  }
  if (*(int *)(a1 + 56) >= 1)
  {
    int v10 = (**(uint64_t (***)(uint64_t))a1)(a1);
    uint64_t v9 = *(void *)(a1 + 2680);
    if (!v9) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_11:
  int v10 = 0;
  if (!v9)
  {
LABEL_13:
    float v11 = 50.0;
    goto LABEL_14;
  }
LABEL_12:
  float v11 = *(float *)(v9 + 468);
  if (v11 <= 0.0) {
    goto LABEL_13;
  }
LABEL_14:
  if (a5 && *(unsigned char *)(a1 + 2672)) {
LABEL_277:
  }
    sub_19E2F6320(34);
  unsigned int v12 = a4 & 0xFFFFFF;
  if (a5) {
    _ZF = *(unsigned char *)(a1 + 42) == 0;
  }
  else {
    _ZF = 0;
  }
  unsigned int v14 = _ZF;
  if (v12 > v14)
  {
    int v285 = v12 - 1;
    v284 = (float32x2_t **)(a1 + 752);
    int16x4_t v15 = vdup_n_s16(0x8001u);
    __asm
    {
      FMOV            V5.4S, #-5.0
      FMOV            V6.4S, #5.0
    }
    int v288 = v10;
    int v283 = a4 & 0xFFFFFF;
    int8x16_t v293 = _Q5;
    float32x4_t v294 = (float32x4_t)vdupq_n_s32(0x39200000u);
    int8x16_t v292 = _Q6;
    while (1)
    {
      unsigned int v289 = v14;
      int v20 = *(unsigned char *)(a1 + 2672) ? v12 + ~v14 : v14;
      int v21 = *(unsigned char *)(a1 + 2672) ? 1 : -1;
      int v295 = v21;
      BOOL v22 = *(unsigned char *)(a1 + 2672) ? v20 < v285 : v20 > 0;
      BOOL v291 = v22;
      int v23 = *(unsigned __int8 *)(a1 + 42);
      uint64_t v24 = ((*(unsigned char *)(a1 + 42) != 0) & v10) != 0 ? 1 : v20;
      uint64_t v25 = *(void *)(a1 + 64);
      uint64_t v296 = v20;
      if (v10) {
        break;
      }
      memmove(*(void **)(v25 + 8 * v24), *(const void **)(*a2 + 8 * v24), 4 * *(int *)(a1 + 44));
      int v26 = *(unsigned __int8 *)(a1 + 40);
      if (*(unsigned char *)(a1 + 40)) {
        goto LABEL_41;
      }
LABEL_42:
      if (v10)
      {
        int v27 = *(_DWORD *)(a1 + 48);
        float v28 = *(_DWORD **)(*(void *)(a1 + 208) + 24 * v20);
        _DWORD *v28 = **(_DWORD **)(*a3 + 24 * v20);
        if (v26) {
          v28[1] = v27 - 1;
        }
      }
      uint64_t v29 = *(void *)(a1 + 136);
      if (v8 == 1) {
        memcpy(*(void **)(v29 + 8 * v24), *(const void **)(*(void *)(a1 + 64) + 8 * v24), 4 * *(int *)(a1 + 48));
      }
      else {
        memmove(*(void **)(v29 + 8 * v24), *(const void **)(*a2 + 8 * v24), 4 * *(_DWORD *)(a1 + 44) * (int)v8);
      }
      if ((int)v8 > *(_DWORD *)(a1 + 2688)) {
        sub_19E2F6320(83724);
      }
      if (v23) {
        uint64_t v30 = 1;
      }
      else {
        uint64_t v30 = v20;
      }
      if (*(unsigned char *)(a1 + 2692))
      {
        bzero(*(void **)(*(void *)(a1 + 544) + 8 * v30), 4 * *(int *)(a1 + 52));
        bzero(*(void **)(*(void *)(a1 + 568) + 8 * v30), 4 * *(int *)(a1 + 52));
        bzero(*(void **)(*(void *)(a1 + 616) + 8 * v30), 4 * *(int *)(a1 + 52));
        bzero(*(void **)(*(void *)(a1 + 592) + 8 * v30), 4 * *(int *)(a1 + 52));
      }
      int v290 = v20 + v295;
      bzero(*(void **)(*(void *)(a1 + 352) + 8 * v30), 4 * *(_DWORD *)(a1 + 52) * (int)v8);
      bzero(*(void **)(*(void *)(a1 + 376) + 8 * v30), 4 * *(_DWORD *)(a1 + 52) * (int)v8);
      bzero(*(void **)(*(void *)(a1 + 400) + 8 * v30), 4 * *(_DWORD *)(a1 + 52) * (int)v8);
      bzero(*(void **)(*(void *)(a1 + 424) + 8 * v30), 4 * *(_DWORD *)(a1 + 52) * (int)v8);
      uint64_t v31 = *(void *)(a1 + 2680);
      if (!v31) {
        goto LABEL_69;
      }
      int v32 = *(_DWORD *)(v31 + 40);
      if (!*(unsigned char *)(v31 + 20) && (v32 == 5 || v32 == 2))
      {
        BOOL v33 = *(_DWORD *)(v31 + 44) == 6;
        if (v32 == 5) {
          goto LABEL_62;
        }
      }
      else
      {
        BOOL v33 = 0;
        if (v32 == 5) {
          goto LABEL_62;
        }
      }
      if (v32 != 2)
      {
        if (v33) {
LABEL_68:
        }
          sub_19E1C951C(a1, 0);
LABEL_69:
        char v35 = 0;
        BOOL v37 = !v291;
        goto LABEL_70;
      }
LABEL_62:
      BOOL v34 = *(_DWORD *)(v31 + 60) == 22;
      char v35 = v34;
      if (v33) {
        goto LABEL_68;
      }
      BOOL v36 = v291;
      BOOL v37 = !v291;
      if (!v34) {
        BOOL v36 = 0;
      }
      if (v36) {
        sub_19E1C951C(a1, 0);
      }
LABEL_70:
      sub_19E1C96FC(a1, v288, (const float **)(*(void *)(a1 + 424) + 8 * v30), *(void *)(a1 + 136) + 8 * v24, *(uint64_t **)(a1 + 2528), *(void *)(a1 + 208) + 24 * (int)v296, v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1);
      if (!v37 && (v35 & 1) == 0) {
        goto LABEL_277;
      }
      uint64_t v38 = *(void *)(a1 + 2680);
      if (v38 && *(unsigned char *)(v38 + 244)) {
        goto LABEL_276;
      }
      uint64_t v39 = *(unsigned int *)(a1 + 52);
      float v40 = (uint64_t *)(*(void *)(a1 + 424) + 8 * v30);
      uint64_t v41 = (v39 * v8);
      if ((int)v41 >= 1)
      {
        unint64_t v42 = (float *)*v40;
        do
        {
          int v43 = -1035468800;
          if (*v42 < -50.0 || (int v43 = 1112014848, *v42 > 50.0)) {
            *(_DWORD *)unint64_t v42 = v43;
          }
          ++v42;
          --v41;
        }
        while (v41);
      }
      sub_19E1655C4((float32x2_t **)(*(void *)(a1 + 520) + 8 * v30), v40, v8, v39, *(_DWORD *)(a1 + 740));
      sub_19E1C96FC(a1, v288, (const float **)(*(void *)(a1 + 352) + 8 * v30), *(void *)(a1 + 136) + 8 * v24, *(uint64_t **)(a1 + 2504), *(void *)(a1 + 208) + 24 * (int)v296, v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1);
      uint64_t v44 = *(void *)(a1 + 2680);
      if (v44)
      {
        if (*(unsigned char *)(v44 + 244)) {
LABEL_276:
        }
          sub_19E2F6320(200);
      }
      if (!v291)
      {
        uint64_t v45 = *(void *)(a1 + 352);
        uint64_t v46 = *(unsigned int *)(a1 + 52);
LABEL_90:
        uint64_t v47 = (uint64_t *)(v45 + 8 * v30);
        uint64_t v48 = (v46 * v8);
        if ((int)v48 >= 1) {
          goto LABEL_113;
        }
        goto LABEL_119;
      }
      if ((v35 & 1) == 0) {
        goto LABEL_277;
      }
      uint64_t v45 = *(void *)(a1 + 352);
      uint64_t v46 = *(unsigned int *)(a1 + 52);
      if (v44)
      {
        char v35 = 1;
        if (!v8 || !*(unsigned char *)(v44 + 384)) {
          goto LABEL_90;
        }
      }
      else if (!v8)
      {
        goto LABEL_112;
      }
      if ((int)v46 >= 1)
      {
        uint64_t v49 = 0;
        uint64_t v50 = *(float32x4_t **)(v45 + 8 * v30);
        float32x2_t v51 = *(float32x4_t **)(*(void *)(a1 + 184) + 8 * v290);
        uint64_t v52 = 4 * v46;
        int8x8_t v53 = **(int16x4_t ***)(a1 + 2568);
        int8x8_t v54 = v50 + 1;
        int8x8_t v55 = v51 + 1;
        uint64_t v56 = v51;
        uint64_t v57 = v50;
        while (v46 >= 8)
        {
          uint64_t v58 = v52 + v52 * v49;
          unint64_t v59 = (unint64_t)v51 + v58;
          unint64_t v60 = (unint64_t)v50 + v58;
          if ((unint64_t)v50 + v52 * v49 < v59 && (unint64_t)v51 + v52 * v49 < v60) {
            break;
          }
          BOOL v62 = v55;
          int v63 = v54;
          int v64 = v53 + 1;
          uint64_t v65 = v46 & 0xFFFFFFF8;
          do
          {
            float32x4_t v66 = vmlaq_f32(*v63, *v62, (float32x4_t)vbslq_s8((int8x16_t)vmovl_s16(vceq_s16(*v64, (int16x4_t)0x8000800080008000)), v292, vbslq_s8((int8x16_t)vmovl_s16(vcgt_s16(*v64, v15)), (int8x16_t)vmulq_f32(vcvtq_f32_s32(vmovl_s16(*v64)), v294), v293)));
            v63[-1] = vmlaq_f32(v63[-1], v62[-1], (float32x4_t)vbslq_s8((int8x16_t)vmovl_s16(vceq_s16(v64[-1], (int16x4_t)0x8000800080008000)), v292, vbslq_s8((int8x16_t)vmovl_s16(vcgt_s16(v64[-1], v15)), (int8x16_t)vmulq_f32(vcvtq_f32_s32(vmovl_s16(v64[-1])), v294), v293)));
            float32x4_t *v63 = v66;
            v64 += 2;
            v63 += 2;
            v62 += 2;
            v65 -= 8;
          }
          while (v65);
          uint64_t v67 = v46 & 0xFFFFFFF8;
          if (v67 != v46) {
            goto LABEL_107;
          }
LABEL_95:
          ++v49;
          int8x8_t v54 = (float32x4_t *)((char *)v54 + v52);
          int8x8_t v55 = (float32x4_t *)((char *)v55 + v52);
          uint64_t v57 = (float32x4_t *)((char *)v57 + v52);
          uint64_t v56 = (float32x4_t *)((char *)v56 + v52);
          if (v49 == v8) {
            goto LABEL_112;
          }
        }
        uint64_t v67 = 0;
LABEL_107:
        uint64_t v68 = v46 - v67;
        float v69 = &v57->f32[v67];
        float32x4_t v70 = &v56->f32[v67];
        float32x4_t v71 = (__int16 *)v53 + v67;
        do
        {
          int v74 = *v71++;
          int v73 = v74;
          float v75 = -5.0;
          if (v74 >= -32766)
          {
            float v75 = 5.0;
            if (v73 != 0x7FFF) {
              float v75 = (float)v73 * 0.00015259;
            }
          }
          float v72 = *v70++;
          float *v69 = *v69 + (float)(v72 * v75);
          ++v69;
          --v68;
        }
        while (v68);
        goto LABEL_95;
      }
LABEL_112:
      char v35 = 1;
      uint64_t v47 = (uint64_t *)(v45 + 8 * v30);
      uint64_t v48 = (v46 * v8);
      if ((int)v48 >= 1)
      {
LABEL_113:
        BOOL v76 = (float *)*v47;
        do
        {
          int v77 = -1035468800;
          if (*v76 < -50.0 || (int v77 = 1112014848, *v76 > 50.0)) {
            *(_DWORD *)BOOL v76 = v77;
          }
          ++v76;
          --v48;
        }
        while (v48);
      }
LABEL_119:
      sub_19E1655C4((float32x2_t **)(*(void *)(a1 + 448) + 8 * v30), v47, v8, v46, *(_DWORD *)(a1 + 736));
      sub_19E1C96FC(a1, v288, (const float **)(*(void *)(a1 + 376) + 8 * v30), *(void *)(a1 + 136) + 8 * v24, *(uint64_t **)(a1 + 2512), *(void *)(a1 + 208) + 24 * (int)v296, v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1);
      BOOL v78 = *(unsigned char **)(a1 + 2680);
      if (v78 && v78[244]) {
        goto LABEL_276;
      }
      if (v291)
      {
        if ((v35 & 1) == 0) {
          goto LABEL_277;
        }
        uint64_t v79 = *(unsigned int *)(a1 + 52);
        uint64_t v80 = v296;
        if (v78)
        {
          if (!v8 || !v78[384]) {
            goto LABEL_148;
          }
        }
        else if (!v8)
        {
          goto LABEL_152;
        }
        if ((int)v79 >= 1)
        {
          uint64_t v81 = 0;
          BOOL v82 = *(float32x4_t **)(*(void *)(a1 + 376) + 8 * v30);
          float32x4_t v83 = *(float32x4_t **)(*(void *)(a1 + 184) + 8 * v290);
          uint64_t v84 = 4 * v79;
          unint64_t v85 = **(int16x4_t ***)(a1 + 2576);
          BOOL v86 = v82 + 1;
          unint64_t v87 = v83 + 1;
          BOOL v88 = v83;
          BOOL v89 = v82;
          while (v79 >= 8)
          {
            uint64_t v90 = v84 + v84 * v81;
            unint64_t v91 = (unint64_t)v83 + v90;
            unint64_t v92 = (unint64_t)v82 + v90;
            if ((unint64_t)v82 + v84 * v81 < v91 && (unint64_t)v83 + v84 * v81 < v92) {
              break;
            }
            unint64_t v94 = v87;
            float32x4_t v95 = v86;
            BOOL v96 = v85 + 1;
            uint64_t v97 = v79 & 0xFFFFFFF8;
            do
            {
              float32x4_t v98 = vmlaq_f32(*v95, *v94, (float32x4_t)vbslq_s8((int8x16_t)vmovl_s16(vceq_s16(*v96, (int16x4_t)0x8000800080008000)), v292, vbslq_s8((int8x16_t)vmovl_s16(vcgt_s16(*v96, v15)), (int8x16_t)vmulq_f32(vcvtq_f32_s32(vmovl_s16(*v96)), v294), v293)));
              v95[-1] = vmlaq_f32(v95[-1], v94[-1], (float32x4_t)vbslq_s8((int8x16_t)vmovl_s16(vceq_s16(v96[-1], (int16x4_t)0x8000800080008000)), v292, vbslq_s8((int8x16_t)vmovl_s16(vcgt_s16(v96[-1], v15)), (int8x16_t)vmulq_f32(vcvtq_f32_s32(vmovl_s16(v96[-1])), v294), v293)));
              float32x4_t *v95 = v98;
              v96 += 2;
              v95 += 2;
              v94 += 2;
              v97 -= 8;
            }
            while (v97);
            uint64_t v99 = v79 & 0xFFFFFFF8;
            if (v99 != v79) {
              goto LABEL_142;
            }
LABEL_130:
            ++v81;
            BOOL v86 = (float32x4_t *)((char *)v86 + v84);
            unint64_t v87 = (float32x4_t *)((char *)v87 + v84);
            BOOL v89 = (float32x4_t *)((char *)v89 + v84);
            BOOL v88 = (float32x4_t *)((char *)v88 + v84);
            if (v81 == v8) {
              goto LABEL_147;
            }
          }
          uint64_t v99 = 0;
LABEL_142:
          uint64_t v100 = v79 - v99;
          uint64_t v101 = &v89->f32[v99];
          uint64_t v102 = &v88->f32[v99];
          unint64_t v103 = (__int16 *)v85 + v99;
          do
          {
            int v106 = *v103++;
            int v105 = v106;
            float v107 = -5.0;
            if (v106 >= -32766)
            {
              float v107 = 5.0;
              if (v105 != 0x7FFF) {
                float v107 = (float)v105 * 0.00015259;
              }
            }
            float v104 = *v102++;
            float *v101 = *v101 + (float)(v104 * v107);
            ++v101;
            --v100;
          }
          while (v100);
          goto LABEL_130;
        }
      }
LABEL_147:
      uint64_t v80 = v296;
      if (!v78)
      {
LABEL_152:
        uint64_t v108 = *(unsigned int *)(a1 + 52);
        goto LABEL_158;
      }
LABEL_148:
      uint64_t v108 = *(unsigned int *)(a1 + 52);
      if (v78[465])
      {
        uint64_t v109 = (v108 * v8);
        if ((int)v109 >= 1)
        {
          float32x4_t v110 = *(float32x4_t **)(*(void *)(a1 + 376) + 8 * v30);
          if (v109 < 8)
          {
            uint64_t v111 = 0;
LABEL_156:
            uint64_t v116 = v109 - v111;
            float32x4_t v117 = &v110->f32[v111];
            do
            {
              float *v117 = *v117 + 1.0;
              ++v117;
              --v116;
            }
            while (v116);
            goto LABEL_158;
          }
          uint64_t v111 = v109 & 0xFFFFFFF8;
          float32x4_t v112 = v110 + 1;
          uint64_t v113 = v111;
          do
          {
            __asm { FMOV            V2.4S, #1.0 }
            float32x4_t v115 = vaddq_f32(*v112, _Q2);
            v112[-1] = vaddq_f32(v112[-1], _Q2);
            float32x4_t *v112 = v115;
            v112 += 2;
            v113 -= 8;
          }
          while (v113);
          if (v111 != v109) {
            goto LABEL_156;
          }
        }
      }
LABEL_158:
      BOOL v118 = (uint64_t *)(*(void *)(a1 + 376) + 8 * v30);
      uint64_t v119 = (v108 * v8);
      if ((int)v119 >= 1)
      {
        BOOL v120 = (float *)*v118;
        do
        {
          int v121 = -1035468800;
          if (*v120 < -50.0 || (int v121 = 1112014848, *v120 > 50.0)) {
            *(_DWORD *)BOOL v120 = v121;
          }
          ++v120;
          --v119;
        }
        while (v119);
      }
      sub_19E1655C4((float32x2_t **)(*(void *)(a1 + 472) + 8 * v30), v118, v8, v108, *(_DWORD *)(a1 + 736));
      uint64_t v122 = *(void *)(a1 + 184);
      uint64_t v123 = *(void *)(a1 + 520);
      uint64_t v124 = *(void *)(a1 + 448);
      uint64_t v125 = *(int *)(a1 + 52) * (uint64_t)(int)v8;
      if ((int)v125 >= 8)
      {
        long long v126 = *(float32x4_t **)(v122 + 8 * v80);
        uint64_t v127 = *(float32x4_t **)(v124 + 8 * v30);
        int v128 = (int)v125 / 8;
        uint64_t v129 = *(float32x4_t **)(v123 + 8 * v30);
        do
        {
          float32x4_t v131 = *v129;
          float32x4_t v130 = v129[1];
          v129 += 2;
          float32x4_t v133 = *v127;
          float32x4_t v132 = v127[1];
          v127 += 2;
          *long long v126 = vmulq_f32(v133, v131);
          v126[1] = vmulq_f32(v132, v130);
          v126 += 2;
          --v128;
        }
        while (v128);
      }
      int v134 = 8 * ((int)v125 / 8);
      if (v134 < (int)v125)
      {
        uint64_t v135 = *(void *)(v123 + 8 * v30);
        uint64_t v136 = *(void *)(v124 + 8 * v30);
        uint64_t v137 = *(void *)(v122 + 8 * v80);
        unint64_t v138 = v134;
        unint64_t v139 = v125 - v134;
        if (v139 < 0xC) {
          goto LABEL_175;
        }
        uint64_t v140 = 4 * v134;
        if ((unint64_t)(v137 - v135) < 0x20) {
          goto LABEL_175;
        }
        if ((unint64_t)(v137 - v136) < 0x20) {
          goto LABEL_175;
        }
        unint64_t v141 = v139 - (v125 & 7) + v134;
        unint64_t v142 = v134 + (unint64_t)(v125 & 7) - v125;
        uint64_t v143 = (float32x4_t *)(v137 + v140 + 16);
        float v144 = (float32x4_t *)(v135 + v140 + 16);
        uint64_t v145 = (float32x4_t *)(v136 + v140 + 16);
        do
        {
          float32x4_t v146 = vmulq_f32(*v145, *v144);
          v143[-1] = vmulq_f32(v145[-1], v144[-1]);
          *uint64_t v143 = v146;
          v143 += 2;
          v144 += 2;
          v145 += 2;
          v142 += 8;
        }
        while (v142);
        unint64_t v138 = v141;
        if ((v125 & 7) != 0)
        {
LABEL_175:
          unint64_t v147 = v125 - v138;
          uint64_t v148 = (float *)(v137 + 4 * v138);
          int v149 = (float *)(v136 + 4 * v138);
          int16x8_t v150 = (float *)(v135 + 4 * v138);
          do
          {
            float v151 = *v150++;
            float v152 = v151;
            float v153 = *v149++;
            *v148++ = v153 * v152;
            --v147;
          }
          while (v147);
        }
      }
      if (v291)
      {
        if (v282)
        {
          uint64_t v154 = (*(_DWORD *)(a1 + 52) * v8);
          if ((int)v154 < 1) {
            goto LABEL_222;
          }
          uint64_t v155 = *(void *)(a1 + 184);
          uint64_t v156 = *(float32x4_t **)(v155 + 8 * v290);
          BOOL v157 = *(float32x4_t **)(*(void *)(a1 + 448) + 8 * v30);
          unint64_t v158 = *(void *)(v155 + 8 * v80);
          if (v154 < 8)
          {
            uint64_t v159 = 0;
LABEL_220:
            uint64_t v205 = v154 - v159;
            uint64_t v206 = v159;
            float32x4_t v207 = (float *)(v158 + v206 * 4);
            float32x4_t v208 = &v157->f32[v206];
            float32x4_t v209 = &v156->f32[v206];
            do
            {
              float v210 = *v209++;
              float v211 = v210;
              float v212 = *v208++;
              *float32x4_t v207 = (float)(v211 - (float)(v212 * v211)) + *v207;
              ++v207;
              --v205;
            }
            while (v205);
            goto LABEL_222;
          }
          uint64_t v159 = 0;
          unint64_t v196 = v158 + 4 * v154;
          BOOL v198 = v158 < (unint64_t)v157->u64 + 4 * v154 && (unint64_t)v157 < v196;
          if ((unint64_t)v156 < v196 && v158 < (unint64_t)v156->u64 + 4 * v154) {
            goto LABEL_220;
          }
          if (v198) {
            goto LABEL_220;
          }
          uint64_t v159 = v154 & 0xFFFFFFF8;
          int v200 = v156 + 1;
          uint64_t v201 = v157 + 1;
          uint64_t v202 = (float32x4_t *)(v158 + 16);
          uint64_t v203 = v159;
          do
          {
            float32x4_t v204 = vaddq_f32(vmlsq_f32(*v200, *v200, *v201), *v202);
            v202[-1] = vaddq_f32(vmlsq_f32(v200[-1], v200[-1], v201[-1]), v202[-1]);
            *uint64_t v202 = v204;
            v200 += 2;
            v201 += 2;
            v202 += 2;
            v203 -= 8;
          }
          while (v203);
          if (v159 != v154) {
            goto LABEL_220;
          }
        }
        else
        {
          uint64_t v160 = *(void *)(a1 + 184);
          uint64_t v161 = *(void *)(a1 + 472);
          uint64_t v162 = *(int *)(a1 + 52) * (uint64_t)(int)v8;
          if ((int)v162 >= 8)
          {
            float32x4_t v163 = *(float32x4_t **)(v160 + 8 * v80);
            uint64_t v164 = *(float32x4_t **)(v160 + 8 * v290);
            int v165 = (int)v162 / 8;
            float32x2_t v166 = *(float32x4_t **)(v161 + 8 * v30);
            do
            {
              float32x4_t v168 = *v166;
              float32x4_t v167 = v166[1];
              v166 += 2;
              float32x4_t v170 = *v164;
              float32x4_t v169 = v164[1];
              v164 += 2;
              float32x4_t v171 = vmlaq_f32(v163[1], v169, v167);
              float32x4_t *v163 = vmlaq_f32(*v163, v170, v168);
              v163[1] = v171;
              v163 += 2;
              --v165;
            }
            while (v165);
          }
          int v172 = 8 * ((int)v162 / 8);
          if (v172 < (int)v162)
          {
            uint64_t v173 = *(void *)(v161 + 8 * v30);
            uint64_t v174 = *(void *)(v160 + 8 * v290);
            uint64_t v175 = *(void *)(v160 + 8 * v80);
            uint64_t v176 = v172;
            unint64_t v177 = v162 - v172;
            if (v177 < 8) {
              goto LABEL_202;
            }
            uint64_t v178 = 4 * v172;
            unint64_t v179 = v175 + 4 * v162;
            BOOL v180 = v175 + v178 >= (unint64_t)(v174 + 4 * v162) || v174 + 4 * v172 >= v179;
            BOOL v181 = !v180;
            if (v173 + v178 < v179 && v175 + v178 < (unint64_t)(v173 + 4 * v162)) {
              goto LABEL_202;
            }
            if (v181) {
              goto LABEL_202;
            }
            uint64_t v183 = v177 - (v162 & 7) + v176;
            uint64_t v184 = v176 + (v162 & 7) - v162;
            uint64_t v185 = (float32x4_t *)(v175 + v178 + 16);
            float v186 = (float32x4_t *)(v173 + v178 + 16);
            int v187 = (float32x4_t *)(v174 + v178 + 16);
            do
            {
              float32x4_t v188 = vmlaq_f32(*v185, *v187, *v186);
              v185[-1] = vmlaq_f32(v185[-1], v187[-1], v186[-1]);
              float32x4_t *v185 = v188;
              v185 += 2;
              v186 += 2;
              v187 += 2;
              v184 += 8;
            }
            while (v184);
            uint64_t v176 = v183;
            if ((v162 & 7) != 0)
            {
LABEL_202:
              uint64_t v189 = v162 - v176;
              float v190 = (float *)(v175 + 4 * v176);
              float v191 = (float *)(v174 + 4 * v176);
              float v192 = (float *)(v173 + 4 * v176);
              do
              {
                float v193 = *v192++;
                float v194 = v193;
                float v195 = *v191++;
                *float v190 = *v190 + (float)(v195 * v194);
                ++v190;
                --v189;
              }
              while (v189);
            }
          }
        }
      }
LABEL_222:
      int v213 = *(_DWORD *)(a1 + 52);
      uint64_t v214 = (v213 * v8);
      if ((int)v214 >= 1)
      {
        int v215 = *(float **)(*(void *)(a1 + 184) + 8 * v80);
        do
        {
          float v216 = -v11;
          if (*v215 < (float)-v11 || (float v216 = v11, *v215 > v11)) {
            float *v215 = v216;
          }
          ++v215;
          --v214;
        }
        while (v214);
      }
      sub_19E1C96FC(a1, v288, (const float **)(*(void *)(a1 + 400) + 8 * v30), *(void *)(a1 + 136) + 8 * v24, *(uint64_t **)(a1 + 2520), *(void *)(a1 + 208) + 24 * (int)v80, v8, v213, *(_DWORD *)(a1 + 48), 1);
      uint64_t v217 = *(void *)(a1 + 2680);
      if (v217)
      {
        if (*(unsigned char *)(v217 + 244)) {
          goto LABEL_276;
        }
        v218 = (uint64_t *)(*(void *)(a1 + 400) + 8 * v30);
        uint64_t v219 = *(unsigned int *)(a1 + 52);
        if (!v8 || !*(unsigned char *)(v217 + 384)) {
          goto LABEL_254;
        }
      }
      else
      {
        v218 = (uint64_t *)(*(void *)(a1 + 400) + 8 * v30);
        uint64_t v219 = *(unsigned int *)(a1 + 52);
        if (!v8) {
          goto LABEL_254;
        }
      }
      if ((int)v219 >= 1)
      {
        uint64_t v220 = 0;
        unint64_t v221 = *(float32x4_t **)(*(void *)(a1 + 184) + 8 * v80);
        uint64_t v222 = **(int16x4_t ***)(a1 + 2584);
        uint64_t v223 = 4 * v219;
        uint64_t v224 = *v218;
        uint64_t v225 = *v218 + 16;
        BOOL v226 = v221 + 1;
        BOOL v227 = v221;
        uint64_t v228 = *v218;
        while (v219 >= 8)
        {
          uint64_t v229 = v223 + v223 * v220;
          unint64_t v230 = (unint64_t)v221 + v229;
          unint64_t v231 = v224 + v229;
          if (v224 + v223 * v220 < v230 && (unint64_t)v221 + v223 * v220 < v231) {
            break;
          }
          uint64_t v233 = v226;
          uint64_t v234 = (float32x4_t *)v225;
          v235 = v222 + 1;
          uint64_t v236 = v219 & 0xFFFFFFF8;
          do
          {
            float32x4_t v237 = vmlaq_f32(*v234, *v233, (float32x4_t)vbslq_s8((int8x16_t)vmovl_s16(vceq_s16(*v235, (int16x4_t)0x8000800080008000)), v292, vbslq_s8((int8x16_t)vmovl_s16(vcgt_s16(*v235, v15)), (int8x16_t)vmulq_f32(vcvtq_f32_s32(vmovl_s16(*v235)), v294), v293)));
            v234[-1] = vmlaq_f32(v234[-1], v233[-1], (float32x4_t)vbslq_s8((int8x16_t)vmovl_s16(vceq_s16(v235[-1], (int16x4_t)0x8000800080008000)), v292, vbslq_s8((int8x16_t)vmovl_s16(vcgt_s16(v235[-1], v15)), (int8x16_t)vmulq_f32(vcvtq_f32_s32(vmovl_s16(v235[-1])), v294), v293)));
            *uint64_t v234 = v237;
            v235 += 2;
            v234 += 2;
            v233 += 2;
            v236 -= 8;
          }
          while (v236);
          uint64_t v238 = v219 & 0xFFFFFFF8;
          if (v238 != v219) {
            goto LABEL_249;
          }
LABEL_237:
          ++v220;
          v225 += v223;
          BOOL v226 = (float32x4_t *)((char *)v226 + v223);
          v228 += v223;
          BOOL v227 = (float32x4_t *)((char *)v227 + v223);
          if (v220 == v8) {
            goto LABEL_254;
          }
        }
        uint64_t v238 = 0;
LABEL_249:
        uint64_t v239 = v219 - v238;
        uint64_t v240 = (float *)(v228 + 4 * v238);
        unint64_t v241 = &v227->f32[v238];
        float v242 = (__int16 *)v222 + v238;
        do
        {
          int v245 = *v242++;
          int v244 = v245;
          float v246 = -5.0;
          if (v245 >= -32766)
          {
            float v246 = 5.0;
            if (v244 != 0x7FFF) {
              float v246 = (float)v244 * 0.00015259;
            }
          }
          float v243 = *v241++;
          *uint64_t v240 = *v240 + (float)(v243 * v246);
          ++v240;
          --v239;
        }
        while (v239);
        goto LABEL_237;
      }
LABEL_254:
      uint64_t v247 = (v219 * v8);
      if ((int)v247 >= 1)
      {
        uint64_t v248 = (float *)*v218;
        do
        {
          int v249 = -1035468800;
          if (*v248 < -50.0 || (int v249 = 1112014848, *v248 > 50.0)) {
            *(_DWORD *)uint64_t v248 = v249;
          }
          ++v248;
          --v247;
        }
        while (v247);
      }
      sub_19E1655C4((float32x2_t **)(*(void *)(a1 + 496) + 8 * v30), v218, v8, v219, *(_DWORD *)(a1 + 736));
      sub_19E1655C4(v284, (uint64_t *)(*(void *)(a1 + 184) + 8 * v80), v8, *(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 744));
      uint64_t v250 = *(void *)(a1 + 160);
      uint64_t v251 = *(void *)(a1 + 496);
      uint64_t v252 = *(int *)(a1 + 52) * (uint64_t)(int)v8;
      int v253 = (int)v252 / 8;
      if ((int)v252 >= 8)
      {
        int64x2_t v254 = *(float32x4_t **)(v250 + 8 * v80);
        int v255 = *(float32x4_t **)(v251 + 8 * v30);
        int v256 = (int)v252 / 8;
        float32x4_t v257 = *v284;
        do
        {
          float32x4_t v259 = *(float32x4_t *)v257->f32;
          float32x4_t v258 = *(float32x4_t *)v257[2].f32;
          v257 += 4;
          float32x4_t v261 = *v255;
          float32x4_t v260 = v255[1];
          v255 += 2;
          *int64x2_t v254 = vmulq_f32(v261, v259);
          v254[1] = vmulq_f32(v260, v258);
          v254 += 2;
          --v256;
        }
        while (v256);
      }
      int v262 = 8 * v253;
      if (8 * v253 < (int)v252)
      {
        uint64_t v263 = *(void *)(v251 + 8 * v30);
        float32x4_t v264 = *v284;
        uint64_t v265 = *(void *)(v250 + 8 * v80);
        unint64_t v266 = v262;
        unint64_t v267 = v252 - v262;
        if (v267 < 0xC) {
          goto LABEL_271;
        }
        uint64_t v268 = 4 * v262;
        if ((unint64_t)(v265 - (void)v264) < 0x20) {
          goto LABEL_271;
        }
        if ((unint64_t)(v265 - v263) < 0x20) {
          goto LABEL_271;
        }
        unint64_t v269 = v267 - (v252 & 7) + v262;
        unint64_t v270 = v262 + (unint64_t)(v252 & 7) - v252;
        uint64_t v271 = (float32x4_t *)(v265 + v268 + 16);
        unint64_t v272 = (float32x4_t *)((char *)&v264[2] + v268);
        uint64_t v273 = (float32x4_t *)(v263 + v268 + 16);
        do
        {
          float32x4_t v274 = vmulq_f32(*v273, *v272);
          v271[-1] = vmulq_f32(v273[-1], v272[-1]);
          *uint64_t v271 = v274;
          v271 += 2;
          v272 += 2;
          v273 += 2;
          v270 += 8;
        }
        while (v270);
        unint64_t v266 = v269;
        if ((v252 & 7) != 0)
        {
LABEL_271:
          unint64_t v275 = v252 - v266;
          BOOL v276 = (float *)(v265 + 4 * v266);
          BOOL v277 = (float *)(v263 + 4 * v266);
          BOOL v278 = (float *)v264 + v266;
          do
          {
            float v279 = *v278++;
            float v280 = v279;
            float v281 = *v277++;
            *v276++ = v281 * v280;
            --v275;
          }
          while (v275);
        }
      }
      if (*(unsigned char *)(a1 + 2692))
      {
        memcpy(*(void **)(*(void *)(a1 + 112) + 8 * v80), *(const void **)(*(void *)(a1 + 160) + 8 * v80), 4 * *(int *)(a1 + 52));
        memcpy(*(void **)(*(void *)(a1 + 88) + 8 * v80), *(const void **)(*(void *)(a1 + 184) + 8 * v80), 4 * *(int *)(a1 + 52));
      }
      int v10 = v288;
      unsigned int v14 = v289 + 1;
      unsigned int v12 = v283;
      if (v289 + 1 == v283) {
        return;
      }
    }
    bzero(*(void **)(v25 + 8 * v24), 4 * *(int *)(a1 + 48));
    *(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 8 * v24) + 4 * **(int **)(*a3 + 24 * v20)) = 1065353216;
    int v26 = *(unsigned __int8 *)(a1 + 40);
    if (!*(unsigned char *)(a1 + 40)) {
      goto LABEL_42;
    }
LABEL_41:
    *(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 8 * v24) + 4 * *(int *)(a1 + 48) - 4) = 1065353216;
    goto LABEL_42;
  }
}

void sub_19E1C92D4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 160);
  if (v3)
  {
    *(void *)(v1 - 152) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E1C92F0(void **a1, int **a2, uint64_t *a3, int a4, int a5)
{
  float v10 = sub_19E2F6314();
  double v11 = (float)(sub_19E2F6314() * v10);
  unsigned int v13 = *a2;
  unsigned int v14 = a2[1];
  uint64_t v15 = (char *)v14 - (char *)*a2;
  if (v15 == 8)
  {
    if (a4 < 1) {
      return;
    }
    uint64_t v17 = *v13;
    uint64_t v16 = v13[1];
    double v18 = v11 * 6554.0;
    uint64_t v19 = *a3;
    int v20 = (char *)*a1;
    uint64_t v21 = 2 * a5;
    if (a4 == 1)
    {
      uint64_t v22 = 0;
      uint64_t v23 = 0;
LABEL_16:
      uint64_t v38 = a4 - v22;
      uint64_t v39 = v23 + v17;
      uint64_t v40 = v23 + v16;
      uint64_t v41 = (float *)&v20[4 * v22];
      do
      {
        float v42 = v18 * (float)(*(__int16 *)(v19 + 2 * v40) + *(__int16 *)(v19 + 2 * v39));
        *v41++ = v42;
        v19 += v21;
        --v38;
      }
      while (v38);
      return;
    }
    uint64_t v22 = a4 & 0xFFFFFFFE;
    uint64_t v23 = v22 * a5;
    BOOL v33 = (float *)(v20 + 4);
    uint64_t v34 = v22;
    uint64_t v35 = *a3;
    do
    {
      float v36 = v18 * (float)(*(__int16 *)(v35 + 2 * v16) + *(__int16 *)(v35 + 2 * v17));
      float v37 = v18 * (float)(*(__int16 *)(v35 + v21 + 2 * v16) + *(__int16 *)(v35 + v21 + 2 * v17));
      *(v33 - 1) = v36;
      *BOOL v33 = v37;
      v35 += 4 * a5;
      v33 += 2;
      v34 -= 2;
    }
    while (v34);
    if (v22 != a4) {
      goto LABEL_16;
    }
  }
  else if (a4 >= 1)
  {
    uint64_t v24 = *a1;
    if (v14 == v13)
    {
      bzero(v24, 4 * a4);
    }
    else
    {
      uint64_t v25 = 0;
      unint64_t v26 = v15 >> 2;
      double v27 = v11 * 6554.0;
      uint64_t v28 = *a3;
      if (v26 <= 1) {
        unint64_t v26 = 1;
      }
      do
      {
        float v29 = 0.0;
        unint64_t v30 = v26;
        uint64_t v31 = v13;
        do
        {
          uint64_t v32 = *v31++;
          LOWORD(v12) = *(_WORD *)(v28 + 2 * (v25 * a5 + v32));
          double v12 = (double)vmovl_s16(*(int16x4_t *)&v12).i32[0];
          float v29 = v29 + v27 * v12;
          --v30;
        }
        while (v30);
        *((float *)v24 + v25++) = v29;
      }
      while (v25 != a4);
    }
  }
}

void sub_19E1C951C(uint64_t a1, int a2)
{
  if (a2) {
    sub_19E2F6320(545);
  }
  if (!*(void *)(a1 + 784)) {
    operator new[]();
  }
  sub_19E2F6320(34);
}

void sub_19E1C96FC(uint64_t a1, int a2, const float **a3, uint64_t a4, uint64_t *a5, uint64_t a6, int a7, int a8, int a9, char a10)
{
  if ((a10 & 1) == 0)
  {
    if (a2) {
      sub_19E2F6320(456);
    }
LABEL_12:
    sub_19E2F6320(34);
  }
  if (!a2) {
    goto LABEL_12;
  }
  if (a7 != 1) {
    sub_19E2F6320(502);
  }
  std::string __p = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v15 = *(const void **)a6;
  uint64_t v14 = *(void *)(a6 + 8);
  int64_t v16 = v14 - *(void *)a6;
  if (v14 != *(void *)a6)
  {
    if (v16 < 0) {
      sub_19E13D694();
    }
    uint64_t v17 = (char *)operator new(v14 - *(void *)a6);
    double v18 = &v17[4 * (v16 >> 2)];
    std::string __p = v17;
    uint64_t v22 = v18;
    memcpy(v17, v15, v16);
    uint64_t v21 = v18;
  }
  uint64_t v19 = (void **)(a1 + 760);
  sub_19E1C92F0(v19, (int **)&__p, a5, a8, a9);
  if (__p)
  {
    uint64_t v21 = __p;
    operator delete(__p);
  }
  vDSP_vadd((const float *)*v19, 1, *a3, 1, (float *)*a3, 1, a8);
}

void sub_19E1C9810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_19E1C9830(void *a1)
{
  *a1 = &unk_1EF0A69E8;
  sub_19E1BDEFC(a1);
  uint64_t v2 = a1[194];
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 80))(v2);
    a1[194] = 0;
    uint64_t v3 = a1[195];
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 80))(v3);
    }
    a1[195] = 0;
    uint64_t v4 = a1[196];
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 80))(v4);
    }
    a1[196] = 0;
    uint64_t v5 = a1[197];
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 80))(v5);
    }
    a1[197] = 0;
    uint64_t v6 = a1[198];
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 80))(v6);
    }
    a1[198] = 0;
    uint64_t v7 = a1[199];
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 80))(v7);
    }
    a1[199] = 0;
    uint64_t v8 = a1[200];
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 80))(v8);
    }
    a1[200] = 0;
    uint64_t v9 = a1[201];
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 80))(v9);
    }
    a1[201] = 0;
  }
  float v10 = (void *)a1[331];
  if (v10)
  {
    a1[332] = v10;
    operator delete(v10);
  }
  double v11 = (void *)a1[328];
  if (v11)
  {
    a1[329] = v11;
    operator delete(v11);
  }
  sub_19E3030E8((uint64_t)(a1 + 303));
  sub_19E3030E8((uint64_t)(a1 + 294));
  sub_19E3030E8((uint64_t)(a1 + 285));
  sub_19E3030E8((uint64_t)(a1 + 276));
  sub_19E3030E8((uint64_t)(a1 + 267));
  sub_19E3030E8((uint64_t)(a1 + 258));
  sub_19E3030E8((uint64_t)(a1 + 249));
  sub_19E3030E8((uint64_t)(a1 + 240));
  sub_19E3030E8((uint64_t)(a1 + 231));
  sub_19E3030E8((uint64_t)(a1 + 222));
  sub_19E3030E8((uint64_t)(a1 + 213));
  sub_19E1C6038(a1 + 168);
  sub_19E1C6038(a1 + 153);
  sub_19E1C6038(a1 + 138);
  sub_19E1C6038(a1 + 123);
  double v12 = (void *)a1[120];
  if (v12)
  {
    a1[121] = v12;
    operator delete(v12);
  }
  unsigned int v13 = (void *)a1[117];
  if (v13)
  {
    a1[118] = v13;
    operator delete(v13);
  }
  uint64_t v14 = (void *)a1[114];
  if (v14)
  {
    a1[115] = v14;
    operator delete(v14);
  }
  uint64_t v15 = (void *)a1[111];
  if (v15)
  {
    a1[112] = v15;
    operator delete(v15);
  }
  int64_t v16 = (void *)a1[108];
  if (v16)
  {
    a1[109] = v16;
    operator delete(v16);
  }
  uint64_t v17 = (void *)a1[105];
  if (v17)
  {
    a1[106] = v17;
    operator delete(v17);
  }
  double v18 = (void *)a1[102];
  if (v18)
  {
    a1[103] = v18;
    operator delete(v18);
  }
  uint64_t v19 = (void *)a1[99];
  if (v19)
  {
    a1[100] = v19;
    operator delete(v19);
  }
  int v20 = (void *)a1[89];
  if (v20)
  {
    a1[90] = v20;
    operator delete(v20);
  }
  uint64_t v21 = (void *)a1[86];
  if (v21)
  {
    a1[87] = v21;
    operator delete(v21);
  }
  uint64_t v22 = (void *)a1[83];
  if (v22)
  {
    a1[84] = v22;
    operator delete(v22);
  }
  uint64_t v23 = (void *)a1[80];
  if (v23)
  {
    a1[81] = v23;
    operator delete(v23);
  }
  uint64_t v24 = (void *)a1[77];
  if (v24)
  {
    a1[78] = v24;
    operator delete(v24);
  }
  uint64_t v25 = (void *)a1[74];
  if (v25)
  {
    a1[75] = v25;
    operator delete(v25);
  }
  unint64_t v26 = (void *)a1[71];
  if (v26)
  {
    a1[72] = v26;
    operator delete(v26);
  }
  double v27 = (void *)a1[68];
  if (v27)
  {
    a1[69] = v27;
    operator delete(v27);
  }
  uint64_t v28 = (void *)a1[65];
  if (v28)
  {
    a1[66] = v28;
    operator delete(v28);
  }
  float v29 = (void *)a1[62];
  if (v29)
  {
    a1[63] = v29;
    operator delete(v29);
  }
  unint64_t v30 = (void *)a1[59];
  if (v30)
  {
    a1[60] = v30;
    operator delete(v30);
  }
  uint64_t v31 = (void *)a1[56];
  if (v31)
  {
    a1[57] = v31;
    operator delete(v31);
  }
  uint64_t v32 = (void *)a1[53];
  if (v32)
  {
    a1[54] = v32;
    operator delete(v32);
  }
  BOOL v33 = (void *)a1[50];
  if (v33)
  {
    a1[51] = v33;
    operator delete(v33);
  }
  uint64_t v34 = (void *)a1[47];
  if (v34)
  {
    a1[48] = v34;
    operator delete(v34);
  }
  uint64_t v35 = (void *)a1[44];
  if (v35)
  {
    a1[45] = v35;
    operator delete(v35);
  }
  uint64_t v36 = a1[26];
  if (v36)
  {
    uint64_t v37 = a1[27];
    uint64_t v38 = (void *)a1[26];
    if (v37 != v36)
    {
      uint64_t v39 = a1[27];
      do
      {
        uint64_t v41 = *(void **)(v39 - 24);
        v39 -= 24;
        uint64_t v40 = v41;
        if (v41)
        {
          *(void *)(v37 - 16) = v40;
          operator delete(v40);
        }
        uint64_t v37 = v39;
      }
      while (v39 != v36);
      uint64_t v38 = (void *)a1[26];
    }
    a1[27] = v36;
    operator delete(v38);
  }
  float v42 = (void *)a1[23];
  if (v42)
  {
    a1[24] = v42;
    operator delete(v42);
  }
  int v43 = (void *)a1[20];
  if (v43)
  {
    a1[21] = v43;
    operator delete(v43);
  }
  uint64_t v44 = (void *)a1[17];
  if (v44)
  {
    a1[18] = v44;
    operator delete(v44);
  }
  uint64_t v45 = (void *)a1[14];
  if (v45)
  {
    a1[15] = v45;
    operator delete(v45);
  }
  uint64_t v46 = (void *)a1[11];
  if (v46)
  {
    a1[12] = v46;
    operator delete(v46);
  }
  uint64_t v47 = (void *)a1[8];
  if (v47)
  {
    a1[9] = v47;
    operator delete(v47);
  }
  *a1 = &unk_1EF0A50F8;
  uint64_t v48 = (void *)a1[1];
  if (v48)
  {
    a1[2] = v48;
    operator delete(v48);
  }
  return a1;
}

uint64_t sub_19E1C9CEC(uint64_t a1)
{
  return (***(uint64_t (****)(void))(a1 + 48))(*(void *)(a1 + 48));
}

uint64_t sub_19E1C9D14(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 8))();
}

uint64_t sub_19E1C9D3C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 16))();
}

uint64_t sub_19E1C9D64(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 24))();
}

uint64_t sub_19E1C9D8C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 32))();
}

uint64_t sub_19E1C9DB4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 40))();
}

uint64_t sub_19E1C9DDC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 48))();
}

uint64_t sub_19E1C9E04(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 56))();
}

uint64_t sub_19E1C9E2C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 64))();
}

uint64_t sub_19E1C9E54(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 72))();
}

uint64_t sub_19E1C9E7C(uint64_t a1, void *lpsrc, const void *a3)
{
  if (lpsrc) {
    uint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3E78, 0);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = __dynamic_cast(a3, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3E78, 0);
  uint64_t v7 = v5[6];
  uint64_t v8 = v6[6];
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 48) + 80);
  uint64_t v10 = *(void *)(a1 + 48);

  return v9(v10, v7, v8);
}

uint64_t sub_19E1C9F84(uint64_t a1, void *lpsrc, const void *a3)
{
  if (lpsrc) {
    uint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3E78, 0);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = __dynamic_cast(a3, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3E78, 0);
  uint64_t v7 = v5[6];
  uint64_t v8 = v6[6];
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 48) + 88);
  uint64_t v10 = *(void *)(a1 + 48);

  return v9(v10, v7, v8);
}

uint64_t sub_19E1CA08C(uint64_t a1, void *lpsrc)
{
  uint64_t v3 = *((void *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3E78, 0)+ 6);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)(a1 + 48) + 96);
  uint64_t v5 = *(void *)(a1 + 48);

  return v4(v5, v3);
}

uint64_t sub_19E1CA130(uint64_t a1, void *lpsrc)
{
  uint64_t v3 = *((void *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3E78, 0)+ 6);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)(a1 + 48) + 104);
  uint64_t v5 = *(void *)(a1 + 48);

  return v4(v5, v3);
}

uint64_t sub_19E1CA1D4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 112))();
}

uint64_t sub_19E1CA1FC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 120))();
}

uint64_t sub_19E1CA224(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 128))();
}

uint64_t sub_19E1CA24C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 136))();
}

uint64_t sub_19E1CA274(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 144))();
}

uint64_t sub_19E1CA29C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 152))();
}

uint64_t sub_19E1CA2C4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 160))();
}

uint64_t sub_19E1CA2EC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 168))();
}

uint64_t sub_19E1CA314(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 176))();
}

uint64_t sub_19E1CA33C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 184))();
}

uint64_t sub_19E1CA364(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 192))();
}

uint64_t sub_19E1CA38C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 200))();
}

uint64_t sub_19E1CA3B4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 208))();
}

uint64_t sub_19E1CA3DC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 264))();
}

uint64_t sub_19E1CA40C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 272))();
}

uint64_t sub_19E1CA440(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 288))();
}

uint64_t sub_19E1CA470(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 320))();
}

uint64_t sub_19E1CA4A0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 312))();
}

uint64_t sub_19E1CA4D0(uint64_t a1, void *lpsrc)
{
  uint64_t v3 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3E78, 0);
  if (!v3) {
    __cxa_bad_cast();
  }
  uint64_t v4 = v3[6];
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)(a1 + 48) + 328);
  uint64_t v6 = *(void *)(a1 + 48);

  return v5(v6, v4);
}

uint64_t sub_19E1CA584(uint64_t a1, void *lpsrc, uint64_t a3, float a4, float a5)
{
  uint64_t v9 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3E78, 0);
  if (!v9) {
    __cxa_bad_cast();
  }
  uint64_t v12 = v9[6];
  unsigned int v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128, __n128))(**(void **)(a1 + 48) + 336);
  uint64_t v14 = *(void *)(a1 + 48);
  v10.n128_f32[0] = a4;
  v11.n128_f32[0] = a5;

  return v13(v14, v12, a3, v10, v11);
}

uint64_t sub_19E1CA658(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 344))();
}

uint64_t sub_19E1CA688(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 352))();
}

void *sub_19E1CA6B8(void *a1)
{
  *a1 = &unk_1EF0A6D20;
  uint64_t v2 = a1[6];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 368))(v2);
  }
  *a1 = &unk_1EF0A50F8;
  uint64_t v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_19E1CA758(void *__p)
{
  void *__p = &unk_1EF0A6D20;
  uint64_t v2 = __p[6];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 368))(v2);
  }
  void *__p = &unk_1EF0A50F8;
  uint64_t v3 = (void *)__p[1];
  if (v3)
  {
    __p[2] = v3;
    operator delete(v3);
  }

  operator delete(__p);
}

uint64_t sub_19E1CA808(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF0A7528;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  uint64_t v4 = *(const void **)a2;
  int64_t v5 = *(void *)(a2 + 8) - *(void *)a2;
  if (v5 < 0) {
    sub_19E13D694();
  }
  uint64_t v7 = (char *)operator new(v5);
  *(void *)(a1 + 80) = v7;
  *(void *)(a1 + 88) = v7;
  uint64_t v8 = &v7[8 * (v5 >> 3)];
  *(void *)(a1 + 96) = v8;
  memcpy(v7, v4, v5);
  unint64_t v9 = 0;
  *(void *)(a1 + 88) = v8;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = a3;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  do
  {
    (*(void (**)(void))(**(void **)&v7[8 * v9] + 192))(*(void *)&v7[8 * v9]);
    ++v9;
    uint64_t v7 = *(char **)(a1 + 80);
    __n128 v10 = *(unsigned char **)(a1 + 88);
  }
  while (v9 < (v10 - v7) >> 3);
  *(_DWORD *)(a1 + 72) = 0;
  if (v10 != v7)
  {
    unint64_t v11 = 0;
    do
    {
      *(_DWORD *)(a1 + 72) += (*(uint64_t (**)(void))(**(void **)&v7[8 * v11] + 272))(*(void *)&v7[8 * v11]);
      ++v11;
      uint64_t v7 = *(char **)(a1 + 80);
    }
    while (v11 < (uint64_t)(*(void *)(a1 + 88) - (void)v7) >> 3);
  }
  *(unsigned char *)(a1 + 41) = 0;
  if (*(unsigned char *)(*(void *)v7 + 40)) {
    *(unsigned char *)(a1 + 40) = 1;
  }
  sub_19E1CAADC(a1);
  return a1;
}

void sub_19E1CA9F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v19 = (void *)v10[32];
  if (v19)
  {
    v10[33] = v19;
    operator delete(v19);
  }
  int v20 = *v17;
  if (*v17)
  {
    v10[30] = v20;
    operator delete(v20);
  }
  sub_19E14315C(v14);
  sub_19E14315C(v13);
  sub_19E14315C(v12);
  uint64_t v21 = (void *)v10[16];
  if (v21)
  {
    v10[17] = v21;
    operator delete(v21);
    uint64_t v22 = *v16;
    if (!*v16)
    {
LABEL_7:
      uint64_t v23 = *v11;
      if (!*v11) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v22 = *v16;
    if (!*v16) {
      goto LABEL_7;
    }
  }
  v10[14] = v22;
  operator delete(v22);
  uint64_t v23 = *v11;
  if (!*v11)
  {
LABEL_8:
    uint64_t v24 = *v15;
    if (!*v15) {
      goto LABEL_9;
    }
    goto LABEL_14;
  }
LABEL_13:
  v10[11] = v23;
  operator delete(v23);
  uint64_t v24 = *v15;
  if (!*v15)
  {
LABEL_9:
    void *v10 = a10;
    uint64_t v25 = (void *)v10[1];
    if (!v25) {
      goto LABEL_10;
    }
    goto LABEL_15;
  }
LABEL_14:
  v10[7] = v24;
  operator delete(v24);
  void *v10 = a10;
  uint64_t v25 = (void *)v10[1];
  if (!v25) {
LABEL_10:
  }
    _Unwind_Resume(a1);
LABEL_15:
  void v10[2] = v25;
  operator delete(v25);
  _Unwind_Resume(a1);
}

void sub_19E1CAADC(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 104);
  uint64_t v4 = *(void *)(a1 + 112);
  uint64_t v2 = (void **)(a1 + 104);
  unint64_t v5 = 0x1E9457000uLL;
  int v6 = dword_1E9457D98;
  unint64_t v7 = dword_1E9457D98;
  unint64_t v8 = (v4 - v3) >> 3;
  if (dword_1E9457D98 <= v8)
  {
    if (dword_1E9457D98 < v8) {
      *(void *)(a1 + 112) = v3 + 8 * dword_1E9457D98;
    }
  }
  else
  {
    sub_19E1599BC(v2, dword_1E9457D98 - v8);
    int v6 = dword_1E9457D98;
    unint64_t v7 = dword_1E9457D98;
  }
  uint64_t v9 = *(void *)(a1 + 128);
  unint64_t v10 = (*(void *)(a1 + 136) - v9) >> 3;
  if (v7 <= v10)
  {
    if (v7 < v10) {
      *(void *)(a1 + 136) = v9 + 8 * v7;
    }
  }
  else
  {
    sub_19E1599BC((void **)(a1 + 128), v7 - v10);
    int v6 = dword_1E9457D98;
  }
  if (v6 >= 1) {
    operator new[]();
  }
  uint64_t v11 = *(void *)(a1 + 176);
  unint64_t v12 = (uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 3;
  uint64_t v13 = *(void *)(a1 + 184);
  unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v13 - v11) >> 3);
  if (v12 <= v14)
  {
    if (v12 < v14)
    {
      uint64_t v15 = v11 + 24 * v12;
      if (v13 != v15)
      {
        uint64_t v16 = *(void *)(a1 + 184);
        do
        {
          double v18 = *(void **)(v16 - 24);
          v16 -= 24;
          uint64_t v17 = v18;
          if (v18)
          {
            *(void *)(v13 - 16) = v17;
            operator delete(v17);
          }
          uint64_t v13 = v16;
        }
        while (v16 != v15);
      }
      *(void *)(a1 + 184) = v15;
    }
  }
  else
  {
    sub_19E232360(a1 + 176, v12 - v14);
  }
  uint64_t v19 = *(void *)(a1 + 152);
  unint64_t v20 = (uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 3;
  uint64_t v21 = *(void *)(a1 + 160);
  unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((v21 - v19) >> 3);
  float32x4_t v95 = (void *)(a1 + 152);
  if (v20 <= v22)
  {
    if (v20 < v22)
    {
      uint64_t v23 = v19 + 24 * v20;
      if (v21 != v23)
      {
        uint64_t v24 = *(void *)(a1 + 160);
        do
        {
          unint64_t v26 = *(void **)(v24 - 24);
          v24 -= 24;
          uint64_t v25 = v26;
          if (v26)
          {
            *(void *)(v21 - 16) = v25;
            operator delete(v25);
          }
          uint64_t v21 = v24;
        }
        while (v24 != v23);
      }
      *(void *)(a1 + 160) = v23;
    }
  }
  else
  {
    sub_19E232360(a1 + 152, v20 - v22);
  }
  uint64_t v27 = *(void *)(a1 + 200);
  unint64_t v28 = (uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 3;
  uint64_t v29 = *(void *)(a1 + 208);
  unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * ((v29 - v27) >> 3);
  unint64_t v94 = (void *)(a1 + 200);
  if (v28 <= v30)
  {
    if (v28 < v30)
    {
      uint64_t v31 = v27 + 24 * v28;
      if (v29 != v31)
      {
        uint64_t v32 = *(void *)(a1 + 208);
        do
        {
          uint64_t v34 = *(void **)(v32 - 24);
          v32 -= 24;
          BOOL v33 = v34;
          if (v34)
          {
            *(void *)(v29 - 16) = v33;
            operator delete(v33);
          }
          uint64_t v29 = v32;
        }
        while (v32 != v31);
      }
      *(void *)(a1 + 208) = v31;
    }
  }
  else
  {
    sub_19E232360(a1 + 200, v28 - v30);
  }
  *(void *)(a1 + 240) = *(void *)(a1 + 232);
  BOOL v96 = (void **)(a1 + 256);
  *(void *)(a1 + 264) = *(void *)(a1 + 256);
  uint64_t v35 = *(void *)(a1 + 80);
  float32x4_t v93 = (void **)(a1 + 232);
  if (*(void *)(a1 + 88) != v35)
  {
    unint64_t v36 = 0;
    while (1)
    {
      int v37 = (*(uint64_t (**)(void))(**(void **)(v35 + 8 * v36) + 272))(*(void *)(v35 + 8 * v36));
      int v38 = v37;
      uint64_t v40 = *(char **)(a1 + 264);
      unint64_t v39 = *(void *)(a1 + 272);
      if ((unint64_t)v40 < v39)
      {
        *(_DWORD *)uint64_t v40 = v37;
        uint64_t v41 = (uint64_t)(v40 + 4);
        goto LABEL_63;
      }
      float v42 = (char *)*v96;
      uint64_t v43 = v40 - (unsigned char *)*v96;
      uint64_t v44 = v43 >> 2;
      unint64_t v45 = (v43 >> 2) + 1;
      if (v45 >> 62) {
        sub_19E13D694();
      }
      uint64_t v46 = v39 - (void)v42;
      if (v46 >> 1 > v45) {
        unint64_t v45 = v46 >> 1;
      }
      unint64_t v47 = (unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v45;
      if (v47) {
        break;
      }
      uint64_t v48 = 0;
      uint64_t v49 = (_DWORD *)(4 * v44);
      *(_DWORD *)(4 * v44) = v38;
      uint64_t v41 = 4 * v44 + 4;
      if (v40 != v42) {
        goto LABEL_54;
      }
LABEL_60:
      *(void *)(a1 + 256) = v49;
      *(void *)(a1 + 264) = v41;
      *(void *)(a1 + 272) = &v48[4 * v47];
      if (v42) {
        operator delete(v42);
      }
      unint64_t v5 = 0x1E9457000;
LABEL_63:
      *(void *)(a1 + 264) = v41;
      uint64_t v59 = *(void *)(*(void *)(a1 + 80) + 8 * v36);
      int v60 = (*(uint64_t (**)(uint64_t))(*(void *)v59 + 264))(v59);
      int v61 = v60;
      int v63 = *(char **)(a1 + 240);
      unint64_t v62 = *(void *)(a1 + 248);
      if ((unint64_t)v63 >= v62)
      {
        uint64_t v65 = (char *)*v93;
        uint64_t v66 = v63 - (unsigned char *)*v93;
        uint64_t v67 = v66 >> 2;
        unint64_t v68 = (v66 >> 2) + 1;
        if (v68 >> 62) {
          sub_19E13D694();
        }
        uint64_t v69 = v62 - (void)v65;
        if (v69 >> 1 > v68) {
          unint64_t v68 = v69 >> 1;
        }
        if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v70 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v70 = v68;
        }
        if (v70)
        {
          if (v70 >> 62) {
LABEL_100:
          }
            sub_19E13C418();
          float32x4_t v71 = operator new(4 * v70);
          float v72 = &v71[4 * v67];
          *float v72 = v61;
          uint64_t v64 = (uint64_t)(v72 + 1);
          if (v63 == v65) {
            goto LABEL_82;
          }
LABEL_76:
          unint64_t v73 = v63 - 4 - v65;
          if (v73 < 0x2C) {
            goto LABEL_105;
          }
          if ((unint64_t)(v63 - &v71[v66]) < 0x20) {
            goto LABEL_105;
          }
          uint64_t v74 = (v73 >> 2) + 1;
          uint64_t v75 = 4 * (v74 & 0x7FFFFFFFFFFFFFF8);
          BOOL v76 = &v63[-v75];
          float v72 = (_DWORD *)((char *)v72 - v75);
          int v77 = &v71[4 * v67 - 16];
          BOOL v78 = v63 - 16;
          uint64_t v79 = v74 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v80 = *(_OWORD *)v78;
            *(v77 - 1) = *((_OWORD *)v78 - 1);
            *int v77 = v80;
            v77 -= 2;
            v78 -= 32;
            v79 -= 8;
          }
          while (v79);
          int v63 = v76;
          if (v74 != (v74 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_105:
            do
            {
              int v81 = *((_DWORD *)v63 - 1);
              v63 -= 4;
              *--float v72 = v81;
            }
            while (v63 != v65);
          }
        }
        else
        {
          float32x4_t v71 = 0;
          float v72 = (_DWORD *)(4 * v67);
          *(_DWORD *)(4 * v67) = v61;
          uint64_t v64 = 4 * v67 + 4;
          if (v63 != v65) {
            goto LABEL_76;
          }
        }
LABEL_82:
        *(void *)(a1 + 232) = v72;
        *(void *)(a1 + 240) = v64;
        *(void *)(a1 + 248) = &v71[4 * v70];
        if (v65) {
          operator delete(v65);
        }
        unint64_t v5 = 0x1E9457000uLL;
        goto LABEL_85;
      }
      *(_DWORD *)int v63 = v60;
      uint64_t v64 = (uint64_t)(v63 + 4);
LABEL_85:
      *(void *)(a1 + 240) = v64;
      uint64_t v82 = 24 * v36;
      uint64_t v83 = *(void *)(a1 + 176) + 24 * v36;
      int v84 = *(_DWORD *)(v5 + 3480);
      unint64_t v85 = v84;
      unint64_t v86 = (uint64_t)(*(void *)(v83 + 8) - *(void *)v83) >> 3;
      if (v84 <= v86)
      {
        if (v84 < v86) {
          *(void *)(v83 + 8) = *(void *)v83 + 8 * v84;
        }
      }
      else
      {
        sub_19E1599BC((void **)v83, v84 - v86);
        int v84 = *(_DWORD *)(v5 + 3480);
        unint64_t v85 = v84;
      }
      unint64_t v87 = (void **)(*v95 + 24 * v36);
      uint64_t v88 = *v95 + v82;
      unint64_t v89 = (uint64_t)(*(void *)(v88 + 8) - (void)*v87) >> 3;
      if (v85 <= v89)
      {
        if (v85 < v89) {
          *(void *)(v88 + 8) = (char *)*v87 + 8 * v85;
        }
      }
      else
      {
        sub_19E1599BC(v87, v85 - v89);
        int v84 = *(_DWORD *)(v5 + 3480);
        unint64_t v85 = v84;
      }
      uint64_t v90 = (void **)(*v94 + 24 * v36);
      uint64_t v91 = *v94 + v82;
      unint64_t v92 = (uint64_t)(*(void *)(v91 + 8) - (void)*v90) >> 3;
      if (v85 <= v92)
      {
        if (v85 < v92) {
          *(void *)(v91 + 8) = (char *)*v90 + 8 * v85;
        }
      }
      else
      {
        sub_19E1599BC(v90, v85 - v92);
        int v84 = *(_DWORD *)(v5 + 3480);
      }
      if (v84 >= 1) {
        operator new[]();
      }
      ++v36;
      uint64_t v35 = *(void *)(a1 + 80);
      if (v36 >= (*(void *)(a1 + 88) - v35) >> 3) {
        return;
      }
    }
    if (v47 >> 62) {
      goto LABEL_100;
    }
    uint64_t v48 = operator new(4 * v47);
    uint64_t v49 = &v48[4 * v44];
    *uint64_t v49 = v38;
    uint64_t v41 = (uint64_t)(v49 + 1);
    if (v40 == v42) {
      goto LABEL_60;
    }
LABEL_54:
    unint64_t v50 = v40 - 4 - v42;
    if (v50 < 0x2C) {
      goto LABEL_106;
    }
    if ((unint64_t)(v40 - &v48[v43]) < 0x20) {
      goto LABEL_106;
    }
    uint64_t v51 = (v50 >> 2) + 1;
    uint64_t v52 = 4 * (v51 & 0x7FFFFFFFFFFFFFF8);
    int8x8_t v53 = &v40[-v52];
    uint64_t v49 = (_DWORD *)((char *)v49 - v52);
    int8x8_t v54 = &v48[4 * v44 - 16];
    int8x8_t v55 = v40 - 16;
    uint64_t v56 = v51 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v57 = *(_OWORD *)v55;
      *(v54 - 1) = *((_OWORD *)v55 - 1);
      _OWORD *v54 = v57;
      v54 -= 2;
      v55 -= 32;
      v56 -= 8;
    }
    while (v56);
    uint64_t v40 = v53;
    if (v51 != (v51 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_106:
      do
      {
        int v58 = *((_DWORD *)v40 - 1);
        v40 -= 4;
        *--uint64_t v49 = v58;
      }
      while (v40 != v42);
    }
    goto LABEL_60;
  }
}

uint64_t sub_19E1CBA10(uint64_t a1)
{
  return (****(uint64_t (*****)(void))(a1 + 80))(**(void **)(a1 + 80));
}

uint64_t sub_19E1CBA3C(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 80);
  if (*(void *)(result + 88) != v1)
  {
    uint64_t v2 = result;
    unint64_t v3 = 0;
    do
    {
      float32x2_t result = (*(uint64_t (**)(void))(**(void **)(v1 + 8 * v3) + 8))(*(void *)(v1 + 8 * v3));
      ++v3;
      uint64_t v1 = *(void *)(v2 + 80);
    }
    while (v3 < (*(void *)(v2 + 88) - v1) >> 3);
  }
  return result;
}

void sub_19E1CBAA8()
{
}

void sub_19E1CBABC()
{
}

uint64_t sub_19E1CBAD0(uint64_t a1)
{
  return a1 + 104;
}

uint64_t sub_19E1CBAD8(uint64_t a1)
{
  return a1 + 128;
}

uint64_t sub_19E1CBAE0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 88) - 8) + 48))();
}

uint64_t sub_19E1CBB0C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 80);
  if (*(void *)(a1 + 88) == v1) {
    return 0;
  }
  unint64_t v3 = 0;
  do
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(v1 + 8 * v3) + 56))(*(void *)(v1 + 8 * v3));
    if (result) {
      break;
    }
    ++v3;
    uint64_t v1 = *(void *)(a1 + 80);
  }
  while (v3 < (*(void *)(a1 + 88) - v1) >> 3);
  return result;
}

uint64_t sub_19E1CBB8C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(result + 80);
  if (*(void *)(result + 88) != v4)
  {
    uint64_t v8 = result;
    unint64_t v9 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(v4 + 8 * v9) + 64))(*(void *)(v4 + 8 * v9), a2, a3, a4);
      ++v9;
      uint64_t v4 = *(void *)(v8 + 80);
    }
    while (v9 < (*(void *)(v8 + 88) - v4) >> 3);
  }
  return result;
}

uint64_t sub_19E1CBC20(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(result + 80);
  if (*(void *)(result + 88) != v5)
  {
    uint64_t v10 = result;
    unint64_t v11 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(v5 + 8 * v11) + 72))(*(void *)(v5 + 8 * v11), a2, a3, a4, a5);
      ++v11;
      uint64_t v5 = *(void *)(v10 + 80);
    }
    while (v11 < (*(void *)(v10 + 88) - v5) >> 3);
  }
  return result;
}

void *sub_19E1CBCBC(void *result, void *lpsrc, void *a3)
{
  unint64_t v3 = a3;
  uint64_t v4 = (uint64_t)result;
  if (lpsrc)
  {
    uint64_t result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3EF0, 0);
    uint64_t v5 = (uint64_t)result;
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v5 = 0;
  if (a3)
  {
LABEL_3:
    uint64_t result = __dynamic_cast(v3, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3EF0, 0);
    unint64_t v3 = result;
  }
LABEL_4:
  uint64_t v6 = *(void *)(v4 + 80);
  if (*(void *)(v4 + 88) != v6)
  {
    unint64_t v7 = 0;
    do
    {
      uint64_t result = (void *)(*(uint64_t (**)(void, void, void))(**(void **)(v6 + 8 * v7) + 80))(*(void *)(v6 + 8 * v7), *(void *)(*(void *)(v5 + 80) + 8 * v7), *(void *)(v3[10] + 8 * v7));
      ++v7;
      uint64_t v6 = *(void *)(v4 + 80);
    }
    while (v7 < (*(void *)(v4 + 88) - v6) >> 3);
  }
  return result;
}

void *sub_19E1CBDF0(void *result, void *lpsrc, void *a3)
{
  unint64_t v3 = a3;
  uint64_t v4 = (uint64_t)result;
  if (lpsrc)
  {
    uint64_t result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3EF0, 0);
    uint64_t v5 = (uint64_t)result;
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v5 = 0;
  if (a3)
  {
LABEL_3:
    uint64_t result = __dynamic_cast(v3, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3EF0, 0);
    unint64_t v3 = result;
  }
LABEL_4:
  uint64_t v6 = *(void *)(v4 + 80);
  if (*(void *)(v4 + 88) != v6)
  {
    unint64_t v7 = 0;
    do
    {
      uint64_t result = (void *)(*(uint64_t (**)(void, void, void))(**(void **)(v6 + 8 * v7) + 88))(*(void *)(v6 + 8 * v7), *(void *)(*(void *)(v5 + 80) + 8 * v7), *(void *)(v3[10] + 8 * v7));
      ++v7;
      uint64_t v6 = *(void *)(v4 + 80);
    }
    while (v7 < (*(void *)(v4 + 88) - v6) >> 3);
  }
  return result;
}

void *sub_19E1CBF24(void *result, void *lpsrc)
{
  uint64_t v2 = result;
  if (lpsrc)
  {
    uint64_t result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3EF0, 0);
    unint64_t v3 = result;
    uint64_t v4 = v2[10];
    if (v2[11] == v4) {
      return result;
    }
  }
  else
  {
    unint64_t v3 = 0;
    uint64_t v4 = result[10];
    if (result[11] == v4) {
      return result;
    }
  }
  unint64_t v5 = 0;
  do
  {
    uint64_t result = (void *)(*(uint64_t (**)(void, void))(**(void **)(v4 + 8 * v5) + 96))(*(void *)(v4 + 8 * v5), *(void *)(v3[10] + 8 * v5));
    ++v5;
    uint64_t v4 = v2[10];
  }
  while (v5 < (v2[11] - v4) >> 3);
  return result;
}

void *sub_19E1CC008(void *result, void *lpsrc)
{
  uint64_t v2 = result;
  if (lpsrc)
  {
    uint64_t result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3EF0, 0);
    unint64_t v3 = result;
    uint64_t v4 = v2[10];
    if (v2[11] == v4) {
      return result;
    }
  }
  else
  {
    unint64_t v3 = 0;
    uint64_t v4 = result[10];
    if (result[11] == v4) {
      return result;
    }
  }
  unint64_t v5 = 0;
  do
  {
    uint64_t result = (void *)(*(uint64_t (**)(void, void))(**(void **)(v4 + 8 * v5) + 104))(*(void *)(v4 + 8 * v5), *(void *)(v3[10] + 8 * v5));
    ++v5;
    uint64_t v4 = v2[10];
  }
  while (v5 < (v2[11] - v4) >> 3);
  return result;
}

uint64_t sub_19E1CC0EC(uint64_t result, float a2)
{
  uint64_t v2 = *(void *)(result + 80);
  if (*(void *)(result + 88) != v2)
  {
    uint64_t v4 = result;
    unint64_t v5 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(void, float))(**(void **)(v2 + 8 * v5) + 112))(*(void *)(v2 + 8 * v5), a2);
      ++v5;
      uint64_t v2 = *(void *)(v4 + 80);
    }
    while (v5 < (*(void *)(v4 + 88) - v2) >> 3);
  }
  return result;
}

uint64_t sub_19E1CC168(uint64_t result, float a2)
{
  uint64_t v2 = *(void *)(result + 80);
  if (*(void *)(result + 88) != v2)
  {
    uint64_t v4 = result;
    unint64_t v5 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(void, float))(**(void **)(v2 + 8 * v5) + 120))(*(void *)(v2 + 8 * v5), a2);
      ++v5;
      uint64_t v2 = *(void *)(v4 + 80);
    }
    while (v5 < (*(void *)(v4 + 88) - v2) >> 3);
  }
  return result;
}

uint64_t sub_19E1CC1E4(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 80);
  if (*(void *)(result + 88) != v2)
  {
    uint64_t v4 = result;
    unint64_t v5 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 8 * v5) + 128))(*(void *)(v2 + 8 * v5), a2);
      ++v5;
      uint64_t v2 = *(void *)(v4 + 80);
    }
    while (v5 < (*(void *)(v4 + 88) - v2) >> 3);
  }
  return result;
}

uint64_t sub_19E1CC260(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(result + 80);
  if (*(void *)(result + 88) != v4)
  {
    uint64_t v8 = result;
    unint64_t v9 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(v4 + 8 * v9) + 136))(*(void *)(v4 + 8 * v9), a2, a3, a4);
      ++v9;
      uint64_t v4 = *(void *)(v8 + 80);
    }
    while (v9 < (*(void *)(v8 + 88) - v4) >> 3);
  }
  return result;
}

uint64_t sub_19E1CC2F4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(result + 80);
  if (*(void *)(result + 88) != v4)
  {
    uint64_t v8 = result;
    unint64_t v9 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(v4 + 8 * v9) + 144))(*(void *)(v4 + 8 * v9), a2, a3, a4);
      ++v9;
      uint64_t v4 = *(void *)(v8 + 80);
    }
    while (v9 < (*(void *)(v8 + 88) - v4) >> 3);
  }
  return result;
}

uint64_t sub_19E1CC388(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 80);
  if (*(void *)(result + 88) != v3)
  {
    uint64_t v6 = result;
    unint64_t v7 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v3 + 8 * v7) + 152))(*(void *)(v3 + 8 * v7), a2, a3);
      ++v7;
      uint64_t v3 = *(void *)(v6 + 80);
    }
    while (v7 < (*(void *)(v6 + 88) - v3) >> 3);
  }
  return result;
}

uint64_t sub_19E1CC40C(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 80);
  if (*(void *)(result + 88) != v1)
  {
    uint64_t v2 = result;
    unint64_t v3 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(void))(**(void **)(v1 + 8 * v3) + 160))(*(void *)(v1 + 8 * v3));
      ++v3;
      uint64_t v1 = *(void *)(v2 + 80);
    }
    while (v3 < (*(void *)(v2 + 88) - v1) >> 3);
  }
  return result;
}

uint64_t sub_19E1CC478(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 80);
  if (*(void *)(result + 88) != v2)
  {
    uint64_t v4 = result;
    unint64_t v5 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 8 * v5) + 168))(*(void *)(v2 + 8 * v5), a2);
      ++v5;
      uint64_t v2 = *(void *)(v4 + 80);
    }
    while (v5 < (*(void *)(v4 + 88) - v2) >> 3);
  }
  return result;
}

uint64_t sub_19E1CC4F4(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 80);
  if (*(void *)(result + 88) != v2)
  {
    uint64_t v4 = result;
    unint64_t v5 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 8 * v5) + 176))(*(void *)(v2 + 8 * v5), a2);
      ++v5;
      uint64_t v2 = *(void *)(v4 + 80);
    }
    while (v5 < (*(void *)(v4 + 88) - v2) >> 3);
  }
  return result;
}

uint64_t sub_19E1CC570(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 80);
  if (*(void *)(result + 88) != v1)
  {
    uint64_t v2 = result;
    unint64_t v3 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(void))(**(void **)(v1 + 8 * v3) + 184))(*(void *)(v1 + 8 * v3));
      ++v3;
      uint64_t v1 = *(void *)(v2 + 80);
    }
    while (v3 < (*(void *)(v2 + 88) - v1) >> 3);
  }
  return result;
}

uint64_t sub_19E1CC5DC(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 80);
  if (*(void *)(result + 88) != v1)
  {
    uint64_t v2 = result;
    unint64_t v3 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(void))(**(void **)(v1 + 8 * v3) + 192))(*(void *)(v1 + 8 * v3));
      ++v3;
      uint64_t v1 = *(void *)(v2 + 80);
    }
    while (v3 < (*(void *)(v2 + 88) - v1) >> 3);
  }
  return result;
}

void sub_19E1CC648(uint64_t a1)
{
  sub_19E1CAADC(a1);
  uint64_t v2 = *(void *)(a1 + 80);
  if (*(void *)(a1 + 88) != v2)
  {
    unint64_t v3 = 0;
    do
    {
      (*(void (**)(void))(**(void **)(v2 + 8 * v3) + 200))(*(void *)(v2 + 8 * v3));
      ++v3;
      uint64_t v2 = *(void *)(a1 + 80);
    }
    while (v3 < (*(void *)(a1 + 88) - v2) >> 3);
  }
}

void sub_19E1CC6B8(void *a1)
{
  uint64_t v2 = a1[10];
  if (a1[11] != v2)
  {
    unint64_t v3 = 0;
    do
    {
      (*(void (**)(void))(**(void **)(v2 + 8 * v3) + 208))(*(void *)(v2 + 8 * v3));
      ++v3;
      uint64_t v2 = a1[10];
    }
    while (v3 < (a1[11] - v2) >> 3);
  }
  uint64_t v5 = a1[6];
  uint64_t v4 = a1[7];
  if (v4 == v5)
  {
    uint64_t v5 = a1[7];
  }
  else
  {
    unint64_t v6 = 0;
    do
    {
      unint64_t v7 = *(void **)(v5 + 8 * v6);
      if (v7)
      {
        operator delete[](v7);
        uint64_t v5 = a1[6];
        uint64_t v4 = a1[7];
      }
      ++v6;
    }
    while (v6 < (v4 - v5) >> 3);
  }
  a1[7] = v5;
}

uint64_t sub_19E1CC764(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 80) + 264))();
}

uint64_t sub_19E1CC798(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 80);
  if (*(void *)(a1 + 88) == v1) {
    return 0;
  }
  unint64_t v3 = 0;
  LODWORD(v4) = 0;
  do
  {
    uint64_t v4 = (*(unsigned int (**)(void))(**(void **)(v1 + 8 * v3) + 272))(*(void *)(v1 + 8 * v3))
       + v4;
    ++v3;
    uint64_t v1 = *(void *)(a1 + 80);
  }
  while (v3 < (*(void *)(a1 + 88) - v1) >> 3);
  return v4;
}

uint64_t sub_19E1CC838(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 80);
  if (*(void *)(result + 88) != v2)
  {
    uint64_t v4 = result;
    unint64_t v5 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 8 * v5) + 280))(*(void *)(v2 + 8 * v5), a2);
      ++v5;
      uint64_t v2 = *(void *)(v4 + 80);
    }
    while (v5 < (*(void *)(v4 + 88) - v2) >> 3);
  }
  return result;
}

uint64_t sub_19E1CC8BC(uint64_t result, float a2, float a3)
{
  uint64_t v3 = *(void *)(result + 80);
  if (*(void *)(result + 88) != v3)
  {
    uint64_t v6 = result;
    unint64_t v7 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(void, float, float))(**(void **)(v3 + 8 * v7) + 288))(*(void *)(v3 + 8 * v7), a2, a3);
      ++v7;
      uint64_t v3 = *(void *)(v6 + 80);
    }
    while (v7 < (*(void *)(v6 + 88) - v3) >> 3);
  }
  return result;
}

void sub_19E1CC948(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v10 = (unsigned char *)a1[10];
  unint64_t v9 = (unsigned char *)a1[11];
  int64_t v11 = v9 - v10;
  if (v9 == v10)
  {
    unint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v15 = (unsigned char *)a1[32];
    double v18 = (unsigned char *)a1[33];
    size_t v16 = v18 - v15;
    if (v18 != v15) {
      goto LABEL_4;
    }
  }
  else
  {
    if (v11 < 0) {
      sub_19E13D694();
    }
    unint64_t v12 = (char *)operator new(v9 - v10);
    uint64_t v13 = &v12[8 * (v11 >> 3)];
    memcpy(v12, v10, v11);
    uint64_t v15 = (unsigned char *)a1[32];
    unint64_t v14 = (unsigned char *)a1[33];
    size_t v16 = v14 - v15;
    if (v14 != v15)
    {
LABEL_4:
      if ((v16 & 0x8000000000000000) != 0) {
        sub_19E13D694();
      }
      uint64_t v17 = (unsigned int *)operator new(v16);
      memcpy(v17, v15, v16);
      if ((int)a5 < 1 || v13 == v12)
      {
LABEL_28:
        operator delete(v17);
        goto LABEL_29;
      }
      goto LABEL_12;
    }
  }
  if ((int)a5 >= 1 && v13 != v12)
  {
    uint64_t v17 = 0;
LABEL_12:
    uint64_t v41 = a3;
    unint64_t v19 = 0;
    int v20 = 0;
    unsigned int v42 = a5;
    uint64_t v21 = a5;
    uint64_t v43 = v12;
    unint64_t v45 = (v13 - v12) >> 3;
    while (1)
    {
      uint64_t v22 = 0;
      uint64_t v23 = v20;
      uint64_t v46 = 4 * v20;
      do
      {
        uint64_t v24 = *(void *)(a1[22] + 24 * v19);
        uint64_t v25 = *a4;
        uint64_t v26 = v17[v19];
        (*(void (**)(void *))(*a1 + 272))(a1);
        if ((int)v26 < 1) {
          goto LABEL_15;
        }
        uint64_t v27 = *(void *)(v25 + 8 * v22);
        uint64_t v28 = *(void *)(v24 + 8 * v22);
        if (v26 < 8 || (unint64_t)(v28 - (v46 + v27)) < 0x20)
        {
          uint64_t v29 = 0;
LABEL_20:
          uint64_t v30 = v26 - v29;
          uint64_t v31 = (_DWORD *)(v28 + 4 * v29);
          uint64_t v32 = (int *)(v27 + 4 * (v23 + v29));
          do
          {
            int v33 = *v32++;
            *v31++ = v33;
            --v30;
          }
          while (v30);
          goto LABEL_15;
        }
        uint64_t v29 = v26 & 0x7FFFFFF8;
        uint64_t v34 = (long long *)(v27 + v46 + 16);
        uint64_t v35 = (_OWORD *)(v28 + 16);
        uint64_t v36 = v26 & 0xFFFFFFF8;
        do
        {
          long long v37 = *v34;
          *(v35 - 1) = *(v34 - 1);
          *uint64_t v35 = v37;
          v34 += 2;
          v35 += 2;
          v36 -= 8;
        }
        while (v36);
        if (v29 != v26) {
          goto LABEL_20;
        }
LABEL_15:
        ++v22;
      }
      while (v22 != v21);
      int v20 = v17[v19++] + v23;
      if (v45 <= v19)
      {
        a5 = v42;
        a3 = v41;
        unint64_t v12 = v43;
        goto LABEL_28;
      }
    }
  }
LABEL_29:
  if (v12) {
    operator delete(v12);
  }
  uint64_t v38 = (a1[11] - a1[10]) >> 3;
  if ((int)v38 - 1 >= 0)
  {
    uint64_t v39 = 8 * (v38 - 1);
    uint64_t v40 = 24 * (v38 - 1);
    do
    {
      (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(a1[10] + v39) + 296))(*(void *)(a1[10] + v39), a2, a3, a1[22] + v40, a5);
      v39 -= 8;
      v40 -= 24;
      LODWORD(v38) = v38 - 1;
    }
    while (v38);
  }
}

void sub_19E1CCC48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  if (v19) {
    operator delete(v19);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E1CCC9C(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5 = a4 & 0xFFFFFF;
  uint64_t v6 = (void **)a1[11];
  if (v6 == (void **)a1[10])
  {
    uint64_t v25 = 0;
    unint64_t v9 = (unsigned char *)a1[11];
    uint64_t v27 = (unsigned char *)a1[32];
    uint64_t v30 = (unsigned char *)a1[33];
    size_t v28 = v30 - v27;
    if (v30 == v27) {
      goto LABEL_22;
    }
LABEL_26:
    if ((v28 & 0x8000000000000000) != 0) {
      sub_19E13D694();
    }
    uint64_t v29 = (unsigned int *)operator new(v28);
    memcpy(v29, v27, v28);
    if (v5 && v9 != (unsigned char *)v6) {
      goto LABEL_29;
    }
LABEL_45:
    operator delete(v29);
    goto LABEL_46;
  }
  unint64_t v8 = 0;
  uint64_t v6 = (void **)a1[10];
  do
  {
    uint64_t v10 = a1[28];
    if (v10)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 32))(v10, a2);
      uint64_t v6 = (void **)a1[10];
    }
    (*(void (**)(void *))(*v6[v8] + 304))(v6[v8]);
    ++v8;
    uint64_t v6 = (void **)a1[10];
    unint64_t v9 = (unsigned char *)a1[11];
  }
  while (v8 < (v9 - (unsigned char *)v6) >> 3);
  if (v9 == (unsigned char *)v6)
  {
    uint64_t v25 = 0;
    uint64_t v27 = (unsigned char *)a1[32];
    uint64_t v51 = (unsigned char *)a1[33];
    size_t v28 = v51 - v27;
    if (v51 == v27) {
      goto LABEL_22;
    }
    goto LABEL_26;
  }
  unint64_t v11 = 0;
  if (v5)
  {
    do
    {
      uint64_t v13 = (uint64_t *)(*(uint64_t (**)(void *))(*v6[v11] + 32))(v6[v11]);
      uint64_t v14 = 0;
      uint64_t v15 = *v13;
      uint64_t v16 = *(void *)(a1[19] + 24 * v11);
      if (v5 < 4) {
        goto LABEL_15;
      }
      if ((unint64_t)(v16 - v15) < 0x20) {
        goto LABEL_15;
      }
      uint64_t v17 = (long long *)(v15 + 16);
      double v18 = (_OWORD *)(v16 + 16);
      uint64_t v19 = v5 & 0xFFFFFC;
      do
      {
        long long v20 = *v17;
        *(v18 - 1) = *(v17 - 1);
        _OWORD *v18 = v20;
        v17 += 2;
        v18 += 2;
        v19 -= 4;
      }
      while (v19);
      uint64_t v14 = v5 & 0xFFFFFC;
      if ((v5 & 0xFFFFFC) != v5)
      {
LABEL_15:
        uint64_t v21 = (uint64_t *)(v15 + 8 * v14);
        uint64_t v22 = (void *)(v16 + 8 * v14);
        uint64_t v23 = v5 - v14;
        do
        {
          uint64_t v24 = *v21++;
          *v22++ = v24;
          --v23;
        }
        while (v23);
      }
      ++v11;
      uint64_t v6 = (void **)a1[10];
      unint64_t v9 = (unsigned char *)a1[11];
      size_t v12 = v9 - (unsigned char *)v6;
    }
    while ((v9 - (unsigned char *)v6) >> 3 > v11);
  }
  else
  {
    do
    {
      (*(void (**)(void *))(*v6[v11] + 32))(v6[v11]);
      ++v11;
      uint64_t v6 = (void **)a1[10];
      unint64_t v9 = (unsigned char *)a1[11];
      size_t v12 = v9 - (unsigned char *)v6;
    }
    while ((v9 - (unsigned char *)v6) >> 3 > v11);
  }
  if (v9 == (unsigned char *)v6)
  {
    uint64_t v25 = 0;
    uint64_t v27 = (unsigned char *)a1[32];
    uint64_t v52 = (unsigned char *)a1[33];
    size_t v28 = v52 - v27;
    if (v52 == v27) {
      goto LABEL_22;
    }
    goto LABEL_26;
  }
  if ((v12 & 0x8000000000000000) != 0) {
    sub_19E13D694();
  }
  uint64_t v25 = operator new(v12);
  memcpy(v25, v6, v12);
  uint64_t v27 = (unsigned char *)a1[32];
  uint64_t v26 = (unsigned char *)a1[33];
  size_t v28 = v26 - v27;
  if (v26 != v27) {
    goto LABEL_26;
  }
LABEL_22:
  if (v5 && v9 != (unsigned char *)v6)
  {
    uint64_t v29 = 0;
LABEL_29:
    int8x8_t v53 = v25;
    unint64_t v31 = 0;
    int v32 = 0;
    while (1)
    {
      uint64_t v33 = 0;
      uint64_t v34 = v32;
      uint64_t v35 = 4 * v32;
      do
      {
        uint64_t v36 = v5;
        uint64_t v37 = a1[13];
        uint64_t v38 = *(void *)(a1[19] + 24 * v31);
        uint64_t v39 = v29[v31];
        (*(void (**)(void *))(*a1 + 272))(a1);
        if ((int)v39 < 1) {
          goto LABEL_32;
        }
        uint64_t v40 = *(void *)(v38 + 8 * v33);
        uint64_t v41 = *(void *)(v37 + 8 * v33);
        if (v39 < 8 || (unint64_t)(v35 + v41 - v40) < 0x20)
        {
          uint64_t v42 = 0;
LABEL_37:
          uint64_t v43 = v39 - v42;
          uint64_t v44 = (_DWORD *)(v41 + 4 * (v34 + v42));
          unint64_t v45 = (int *)(v40 + 4 * v42);
          do
          {
            int v46 = *v45++;
            *v44++ = v46;
            --v43;
          }
          while (v43);
          goto LABEL_32;
        }
        uint64_t v42 = v39 & 0x7FFFFFF8;
        unint64_t v47 = (long long *)(v40 + 16);
        uint64_t v48 = (_OWORD *)(v41 + v35 + 16);
        uint64_t v49 = v39 & 0xFFFFFFF8;
        do
        {
          long long v50 = *v47;
          *(v48 - 1) = *(v47 - 1);
          *uint64_t v48 = v50;
          v47 += 2;
          v48 += 2;
          v49 -= 8;
        }
        while (v49);
        if (v42 != v39) {
          goto LABEL_37;
        }
LABEL_32:
        ++v33;
        uint64_t v5 = v36;
      }
      while (v33 != v36);
      int v32 = v29[v31++] + v34;
      if (v31 >= (uint64_t)(a1[11] - a1[10]) >> 3)
      {
        uint64_t v25 = v53;
        goto LABEL_45;
      }
    }
  }
LABEL_46:
  if (v25)
  {
    operator delete(v25);
  }
}

void sub_19E1CD140(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_19E1CD194(uint64_t a1, void *lpsrc)
{
  uint64_t result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3EF0, 0);
  if (!result) {
    __cxa_bad_cast();
  }
  uint64_t v4 = *(void *)(a1 + 80);
  if (*(void *)(a1 + 88) != v4)
  {
    uint64_t v5 = (uint64_t)result;
    unint64_t v6 = 0;
    do
    {
      uint64_t result = (void *)(*(uint64_t (**)(void, void))(**(void **)(v4 + 8 * v6) + 328))(*(void *)(v4 + 8 * v6), *(void *)(*(void *)(v5 + 80) + 8 * v6));
      ++v6;
      uint64_t v4 = *(void *)(a1 + 80);
    }
    while (v6 < (*(void *)(a1 + 88) - v4) >> 3);
  }
  return result;
}

void *sub_19E1CD270(uint64_t a1, void *lpsrc, uint64_t a3, float a4, float a5)
{
  uint64_t result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3EF0, 0);
  if (!result) {
    __cxa_bad_cast();
  }
  uint64_t v10 = *(void *)(a1 + 80);
  if (*(void *)(a1 + 88) != v10)
  {
    uint64_t v11 = (uint64_t)result;
    unint64_t v12 = 0;
    do
    {
      uint64_t result = (void *)(*(uint64_t (**)(void, void, uint64_t, float, float))(**(void **)(v10 + 8 * v12)
                                                                                        + 336))(*(void *)(v10 + 8 * v12), *(void *)(*(void *)(v11 + 80) + 8 * v12), a3, a4, a5);
      ++v12;
      uint64_t v10 = *(void *)(a1 + 80);
    }
    while (v12 < (*(void *)(a1 + 88) - v10) >> 3);
  }
  return result;
}

void sub_19E1CD36C(void *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = (unsigned char *)a1[10];
  uint64_t v10 = (unsigned char *)a1[11];
  int64_t v12 = v10 - v11;
  if (v10 == v11)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v16 = (unsigned char *)a1[32];
    long long v20 = (unsigned char *)a1[33];
    size_t v17 = v20 - v16;
    if (v20 != v16) {
      goto LABEL_4;
    }
  }
  else
  {
    if (v12 < 0) {
      sub_19E13D694();
    }
    uint64_t v13 = (char *)operator new(v10 - v11);
    uint64_t v14 = &v13[8 * (v12 >> 3)];
    memcpy(v13, v11, v12);
    uint64_t v16 = (unsigned char *)a1[32];
    uint64_t v15 = (unsigned char *)a1[33];
    size_t v17 = v15 - v16;
    if (v15 != v16)
    {
LABEL_4:
      if ((v17 & 0x8000000000000000) != 0) {
        sub_19E13D694();
      }
      double v18 = (unsigned int *)operator new(v17);
      memcpy(v18, v16, v17);
      BOOL v19 = (int)a4 > 0;
      if ((int)a4 < 1 || v14 == v13)
      {
LABEL_28:
        operator delete(v18);
        goto LABEL_29;
      }
      goto LABEL_12;
    }
  }
  BOOL v19 = (int)a4 > 0;
  if ((int)a4 >= 1)
  {
    uint64_t v21 = a5;
    if (v14 == v13) {
      goto LABEL_30;
    }
    double v18 = 0;
LABEL_12:
    unsigned int v73 = a6;
    BOOL v74 = v19;
    unint64_t v22 = 0;
    int v23 = 0;
    unsigned int v75 = a4;
    uint64_t v24 = a4;
    BOOL v76 = v13;
    unint64_t v79 = (v14 - v13) >> 3;
    while (1)
    {
      uint64_t v25 = 0;
      uint64_t v26 = v23;
      uint64_t v80 = 4 * v23;
      do
      {
        uint64_t v27 = *(void *)(a1[25] + 24 * v22);
        uint64_t v28 = *a2;
        uint64_t v29 = v18[v22];
        (*(void (**)(void *))(*a1 + 272))(a1);
        if ((int)v29 < 1) {
          goto LABEL_15;
        }
        uint64_t v30 = *(void *)(v28 + 8 * v25);
        uint64_t v31 = *(void *)(v27 + 8 * v25);
        if (v29 < 8 || (unint64_t)(v31 - (v80 + v30)) < 0x20)
        {
          uint64_t v32 = 0;
LABEL_20:
          uint64_t v33 = v29 - v32;
          uint64_t v34 = (_DWORD *)(v31 + 4 * v32);
          uint64_t v35 = (int *)(v30 + 4 * (v26 + v32));
          do
          {
            int v36 = *v35++;
            *v34++ = v36;
            --v33;
          }
          while (v33);
          goto LABEL_15;
        }
        uint64_t v32 = v29 & 0x7FFFFFF8;
        uint64_t v37 = (long long *)(v30 + v80 + 16);
        uint64_t v38 = (_OWORD *)(v31 + 16);
        uint64_t v39 = v29 & 0xFFFFFFF8;
        do
        {
          long long v40 = *v37;
          *(v38 - 1) = *(v37 - 1);
          *uint64_t v38 = v40;
          v37 += 2;
          v38 += 2;
          v39 -= 8;
        }
        while (v39);
        if (v32 != v29) {
          goto LABEL_20;
        }
LABEL_15:
        ++v25;
      }
      while (v25 != v24);
      int v23 = v18[v22++] + v26;
      if (v79 <= v22)
      {
        uint64_t v13 = v76;
        BOOL v19 = v74;
        a4 = v75;
        a6 = v73;
        goto LABEL_28;
      }
    }
  }
LABEL_29:
  uint64_t v21 = a5;
LABEL_30:
  if (v13) {
    operator delete(v13);
  }
  uint64_t v42 = (void **)a1[10];
  uint64_t v41 = (unsigned char *)a1[11];
  if (v41 == (unsigned char *)v42) {
    goto LABEL_42;
  }
  uint64_t v43 = 0;
  unint64_t v44 = 0;
  do
  {
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*v42[v44] + 344))(v42[v44], a1[25] + v43, a1[22] + v43, a4, v21, a6);
    ++v44;
    uint64_t v42 = (void **)a1[10];
    uint64_t v41 = (unsigned char *)a1[11];
    v43 += 24;
  }
  while (v44 < (v41 - (unsigned char *)v42) >> 3);
  if (v41 == (unsigned char *)v42)
  {
LABEL_42:
    int v46 = a4;
    unint64_t v45 = 0;
    uint64_t v48 = (unsigned char *)a1[32];
    uint64_t v52 = (unsigned char *)a1[33];
    size_t v49 = v52 - v48;
    if (v52 == v48) {
      goto LABEL_38;
    }
LABEL_43:
    if ((v49 & 0x8000000000000000) != 0) {
      sub_19E13D694();
    }
    uint64_t v51 = (unsigned int *)operator new(v49);
    memcpy(v51, v48, v49);
    if (v41 != (unsigned char *)v42 && v19) {
      goto LABEL_48;
    }
LABEL_64:
    operator delete(v51);
    goto LABEL_65;
  }
  if (v41 - (unsigned char *)v42 < 0) {
    sub_19E13D694();
  }
  unint64_t v45 = operator new(v41 - (unsigned char *)v42);
  int v46 = a4;
  memcpy(v45, v42, v41 - (unsigned char *)v42);
  uint64_t v48 = (unsigned char *)a1[32];
  unint64_t v47 = (unsigned char *)a1[33];
  size_t v49 = v47 - v48;
  if (v47 != v48) {
    goto LABEL_43;
  }
LABEL_38:
  char v50 = !v19;
  if (v41 == (unsigned char *)v42) {
    char v50 = 1;
  }
  if ((v50 & 1) == 0)
  {
    uint64_t v51 = 0;
LABEL_48:
    int v77 = v45;
    unint64_t v54 = 0;
    int v55 = 0;
    while (1)
    {
      uint64_t v56 = 0;
      uint64_t v57 = v55;
      uint64_t v58 = 4 * v55;
      do
      {
        uint64_t v59 = *a3;
        uint64_t v60 = *(void *)(a1[22] + 24 * v54);
        uint64_t v61 = v51[v54];
        (*(void (**)(void *))(*a1 + 272))(a1);
        if ((int)v61 < 1) {
          goto LABEL_51;
        }
        uint64_t v62 = *(void *)(v60 + 8 * v56);
        uint64_t v63 = *(void *)(v59 + 8 * v56);
        if (v61 < 8 || (unint64_t)(v58 + v63 - v62) < 0x20)
        {
          uint64_t v64 = 0;
LABEL_56:
          uint64_t v65 = v61 - v64;
          uint64_t v66 = (_DWORD *)(v63 + 4 * (v57 + v64));
          uint64_t v67 = (int *)(v62 + 4 * v64);
          do
          {
            int v68 = *v67++;
            *v66++ = v68;
            --v65;
          }
          while (v65);
          goto LABEL_51;
        }
        uint64_t v64 = v61 & 0x7FFFFFF8;
        uint64_t v69 = (long long *)(v62 + 16);
        unint64_t v70 = (_OWORD *)(v63 + v58 + 16);
        uint64_t v71 = v61 & 0xFFFFFFF8;
        do
        {
          long long v72 = *v69;
          *(v70 - 1) = *(v69 - 1);
          _OWORD *v70 = v72;
          v69 += 2;
          v70 += 2;
          v71 -= 8;
        }
        while (v71);
        if (v64 != v61) {
          goto LABEL_56;
        }
LABEL_51:
        ++v56;
      }
      while (v56 != v46);
      int v55 = v51[v54++] + v57;
      if (v54 >= (uint64_t)(a1[11] - a1[10]) >> 3)
      {
        unint64_t v45 = v77;
        goto LABEL_64;
      }
    }
  }
LABEL_65:
  if (v45)
  {
    operator delete(v45);
  }
}

void sub_19E1CD8BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

float sub_19E1CD960(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1[10];
  if (a1[11] == v3) {
    return 0.0;
  }
  uint64_t v6 = 0;
  unint64_t v7 = 0;
  float v8 = 0.0;
  do
  {
    float v8 = (*(float (**)(void, uint64_t, uint64_t))(**(void **)(v3 + 8 * v7) + 352))(*(void *)(v3 + 8 * v7), a1[25] + v6, a3)+ v8;
    ++v7;
    uint64_t v3 = a1[10];
    v6 += 24;
  }
  while (v7 < (a1[11] - v3) >> 3);
  return v8;
}

void sub_19E1CDA28(void *a1)
{
  uint64_t v1 = sub_19E1CDA54(a1);

  operator delete(v1);
}

void *sub_19E1CDA54(void *a1)
{
  *a1 = &unk_1EF0A7528;
  uint64_t v3 = a1[6];
  uint64_t v2 = a1[7];
  if (v2 == v3)
  {
    uint64_t v3 = a1[7];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void **)(v3 + 8 * v4);
      if (v5)
      {
        operator delete[](v5);
        uint64_t v3 = a1[6];
        uint64_t v2 = a1[7];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  a1[7] = v3;
  uint64_t v7 = a1[10];
  uint64_t v6 = a1[11];
  if (v6 != v7)
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(void *)(v7 + 8 * v8);
      if (v9)
      {
        (*(void (**)(uint64_t))(*(void *)v9 + 368))(v9);
        uint64_t v7 = a1[10];
        uint64_t v6 = a1[11];
      }
      ++v8;
    }
    while (v8 < (v6 - v7) >> 3);
  }
  uint64_t v10 = (void *)a1[32];
  if (v10)
  {
    a1[33] = v10;
    operator delete(v10);
  }
  uint64_t v11 = (void *)a1[29];
  if (v11)
  {
    a1[30] = v11;
    operator delete(v11);
  }
  uint64_t v12 = a1[25];
  if (v12)
  {
    uint64_t v13 = a1[26];
    uint64_t v14 = (void *)a1[25];
    if (v13 != v12)
    {
      uint64_t v15 = a1[26];
      do
      {
        size_t v17 = *(void **)(v15 - 24);
        v15 -= 24;
        uint64_t v16 = v17;
        if (v17)
        {
          *(void *)(v13 - 16) = v16;
          operator delete(v16);
        }
        uint64_t v13 = v15;
      }
      while (v15 != v12);
      uint64_t v14 = (void *)a1[25];
    }
    a1[26] = v12;
    operator delete(v14);
  }
  uint64_t v18 = a1[22];
  if (v18)
  {
    uint64_t v19 = a1[23];
    long long v20 = (void *)a1[22];
    if (v19 != v18)
    {
      uint64_t v21 = a1[23];
      do
      {
        int v23 = *(void **)(v21 - 24);
        v21 -= 24;
        unint64_t v22 = v23;
        if (v23)
        {
          *(void *)(v19 - 16) = v22;
          operator delete(v22);
        }
        uint64_t v19 = v21;
      }
      while (v21 != v18);
      long long v20 = (void *)a1[22];
    }
    a1[23] = v18;
    operator delete(v20);
  }
  uint64_t v24 = a1[19];
  if (v24)
  {
    uint64_t v25 = a1[20];
    uint64_t v26 = (void *)a1[19];
    if (v25 != v24)
    {
      uint64_t v27 = a1[20];
      do
      {
        uint64_t v29 = *(void **)(v27 - 24);
        v27 -= 24;
        uint64_t v28 = v29;
        if (v29)
        {
          *(void *)(v25 - 16) = v28;
          operator delete(v28);
        }
        uint64_t v25 = v27;
      }
      while (v27 != v24);
      uint64_t v26 = (void *)a1[19];
    }
    a1[20] = v24;
    operator delete(v26);
  }
  uint64_t v30 = (void *)a1[16];
  if (v30)
  {
    a1[17] = v30;
    operator delete(v30);
  }
  uint64_t v31 = (void *)a1[13];
  if (v31)
  {
    a1[14] = v31;
    operator delete(v31);
  }
  uint64_t v32 = (void *)a1[10];
  if (v32)
  {
    a1[11] = v32;
    operator delete(v32);
  }
  uint64_t v33 = (void *)a1[6];
  if (v33)
  {
    a1[7] = v33;
    operator delete(v33);
  }
  *a1 = &unk_1EF0A50F8;
  uint64_t v34 = (void *)a1[1];
  if (v34)
  {
    a1[2] = v34;
    operator delete(v34);
  }
  return a1;
}

uint64_t sub_19E1CDCAC(uint64_t a1, int a2, int a3, int a4, int a5, int a6, uint64_t a7, char a8, uint64_t a9)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF0A7A08;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = a2;
  *(_DWORD *)(a1 + 100) = a3;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(unsigned char *)(a1 + 232) = 0;
  *(void *)(a1 + 416) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 160) = 0;
  *(void *)(a1 + 400) = 0;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  sub_19E3030A0(a1 + 432);
  *(_DWORD *)(a1 + 504) = a5;
  *(_DWORD *)(a1 + 112) = a6;
  (*(void (**)(uint64_t))(*(void *)a1 + 192))(a1);
  *(unsigned char *)(a1 + 41) = 0;
  *(_DWORD *)(a1 + 408) = a4;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a7 + 68);
  *(void *)(a1 + 528) = a9;
  if (a9)
  {
    nullsub_171("FullLayer constructor");
    a8 = *(unsigned char *)(*(void *)(a1 + 528) + 376);
  }
  *(unsigned char *)(a1 + 40) = a8;
  *(unsigned char *)(a1 + 520) = 0;
  *(_WORD *)(a1 + 116) = *(_WORD *)(a7 + 45);
  char v18 = 9;
  strcpy((char *)__p, "FullLayer");
  (*(void (**)(uint64_t, void **, void, float))(*(void *)a1 + 400))(a1, __p, 0, -0.44);
  if (v18 < 0)
  {
    operator delete(__p[0]);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a7 + 16);
    *(void *)(a1 + 424) = 0;
    if (*(unsigned char *)(a1 + 116)) {
      return a1;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a7 + 16);
    *(void *)(a1 + 424) = 0;
    if (*(unsigned char *)(a1 + 116)) {
      return a1;
    }
  }
  int v15 = *(_DWORD *)(a7 + 32);
  switch(v15)
  {
    case 2:
      operator new();
    case 1:
      operator new();
    case 0:
      operator new();
  }
  return a1;
}

void sub_19E1CE080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  operator delete(v24);
  sub_19E3030E8(v23);
  uint64_t v27 = *(void **)(v20 + 384);
  if (v27)
  {
    *(void *)(v20 + 392) = v27;
    operator delete(v27);
    sub_19E14315C((void **)(v20 + 360));
    uint64_t v28 = *(void **)(v20 + 336);
    if (!v28)
    {
LABEL_5:
      uint64_t v29 = *(void **)(v20 + 312);
      if (!v29) {
        goto LABEL_6;
      }
      goto LABEL_14;
    }
  }
  else
  {
    sub_19E14315C((void **)(v20 + 360));
    uint64_t v28 = *(void **)(v20 + 336);
    if (!v28) {
      goto LABEL_5;
    }
  }
  *(void *)(v20 + 344) = v28;
  operator delete(v28);
  uint64_t v29 = *(void **)(v20 + 312);
  if (!v29)
  {
LABEL_6:
    uint64_t v30 = *(void **)(v20 + 288);
    if (!v30) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  *(void *)(v20 + 320) = v29;
  operator delete(v29);
  uint64_t v30 = *(void **)(v20 + 288);
  if (!v30)
  {
LABEL_7:
    uint64_t v31 = *(void **)(v20 + 264);
    if (!v31) {
      goto LABEL_8;
    }
    goto LABEL_16;
  }
LABEL_15:
  *(void *)(v20 + 296) = v30;
  operator delete(v30);
  uint64_t v31 = *(void **)(v20 + 264);
  if (!v31)
  {
LABEL_8:
    sub_19E1C6038(v22);
    uint64_t v32 = *(void **)(v20 + 72);
    if (!v32) {
      goto LABEL_9;
    }
    goto LABEL_17;
  }
LABEL_16:
  *(void *)(v20 + 272) = v31;
  operator delete(v31);
  sub_19E1C6038(v22);
  uint64_t v32 = *(void **)(v20 + 72);
  if (!v32)
  {
LABEL_9:
    uint64_t v33 = *v25;
    if (!*v25) {
      goto LABEL_10;
    }
    goto LABEL_18;
  }
LABEL_17:
  *(void *)(v20 + 80) = v32;
  operator delete(v32);
  uint64_t v33 = *v25;
  if (!*v25)
  {
LABEL_10:
    *(void *)uint64_t v20 = v21;
    uint64_t v34 = *(void **)(v20 + 8);
    if (!v34) {
      goto LABEL_11;
    }
    goto LABEL_19;
  }
LABEL_18:
  *(void *)(v20 + 56) = v33;
  operator delete(v33);
  *(void *)uint64_t v20 = v21;
  uint64_t v34 = *(void **)(v20 + 8);
  if (!v34) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_19:
  *(void *)(v20 + 16) = v34;
  operator delete(v34);
  _Unwind_Resume(a1);
}

void sub_19E1CE1C4()
{
}

uint64_t sub_19E1CE1D8(uint64_t a1)
{
  return a1 + 264;
}

uint64_t sub_19E1CE1E0(uint64_t a1)
{
  return a1 + 288;
}

uint64_t sub_19E1CE1E8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 376))();
}

uint64_t sub_19E1CE214(uint64_t a1)
{
  return a1 + 312;
}

uint64_t sub_19E1CE21C()
{
  return 0;
}

unsigned char *sub_19E1CE224(uint64_t a1, uint64_t a2, int *a3, int a4)
{
  if (!a2) {
LABEL_17:
  }
    sub_19E2F6320(3);
  int v6 = *(_DWORD *)(a2 + 72);
  uint64_t v7 = *(void *)a2;
  unint64_t v8 = (int *)(*(void *)a2 + v6);
  unint64_t v9 = *(void *)a2 + *(void *)(a2 + 8) - 4;
  if ((unint64_t)v8 > v9)
  {
    int v10 = 0;
    uint64_t v11 = (int *)(v7 + v6);
    if ((unint64_t)v11 <= v9) {
      goto LABEL_4;
    }
LABEL_7:
    int v12 = 0;
    if (a4 < 1) {
      goto LABEL_12;
    }
    goto LABEL_8;
  }
  int v10 = *v8;
  v6 += 4;
  *(_DWORD *)(a2 + 72) = v6;
  uint64_t v11 = (int *)(v7 + v6);
  if ((unint64_t)v11 > v9) {
    goto LABEL_7;
  }
LABEL_4:
  int v12 = *v11;
  v6 += 4;
  *(_DWORD *)(a2 + 72) = v6;
  if (a4 < 1) {
    goto LABEL_12;
  }
LABEL_8:
  uint64_t v13 = (int *)(v7 + v6);
  if ((unint64_t)v13 <= v9)
  {
    int v14 = *v13;
    *(_DWORD *)(a2 + 72) = v6 + 4;
  }
  else
  {
    int v14 = 0;
  }
  *(_DWORD *)(a1 + 408) = v14;
LABEL_12:
  if (*(_DWORD *)(a1 + 100) != v10 || *(_DWORD *)(a1 + 104) != v12) {
    goto LABEL_17;
  }
  int v15 = *(unsigned char **)(a1 + 512);
  int v16 = *a3;
  int v17 = *(unsigned __int8 *)(a1 + 117);
  int v18 = sub_19E2F62F8();
  int v19 = *(_DWORD *)(a1 + 100);
  int v20 = *(_DWORD *)(a1 + 104);

  return sub_19E1C632C(v15, (uint64_t *)a2, v16, v17, v18, v19, v20);
}

uint64_t sub_19E1CE34C(uint64_t a1, FILE *__stream, int *a3, int a4, unsigned int a5)
{
  if (!__stream) {
    sub_19E2F6320(3);
  }
  int v10 = *(_DWORD *)(a1 + 104);
  sub_19E2F6788(__stream, a3, *(_DWORD *)(a1 + 100));
  sub_19E2F6788(__stream, a3, v10);
  if (a4 >= 1) {
    sub_19E2F6788(__stream, a3, *(_DWORD *)(a1 + 408));
  }
  uint64_t v11 = *(void *)(a1 + 512);
  int v12 = sub_19E2F62F8();

  return sub_19E1C6648(v11, __stream, a3, 3, v12, a5);
}

void *sub_19E1CE408(uint64_t a1, void *lpsrc, const void *a3)
{
  if (lpsrc)
  {
    uint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3F48, 0);
    if (a3) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = 0;
    uint64_t v7 = (*(_DWORD *)(a1 + 104) * *(_DWORD *)(a1 + 100));
    if ((int)v7 < 1) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t v5 = 0;
  if (!a3) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t result = __dynamic_cast(a3, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3F48, 0);
  uint64_t v7 = (*(_DWORD *)(a1 + 104) * *(_DWORD *)(a1 + 100));
  if ((int)v7 < 1) {
    return result;
  }
LABEL_7:
  unint64_t v8 = (int16x8_t *)result[16];
  unint64_t v9 = (int16x8_t *)v5[16];
  int v10 = **(int16x8_t ***)(a1 + 512);
  if (v7 < 0x10)
  {
    uint64_t v11 = 0;
LABEL_14:
    uint64_t v17 = v7 - v11;
    uint64_t v18 = v11;
    int v19 = &v10->i16[v18];
    int v20 = &v9->i16[v18];
    uint64_t v21 = &v8->i16[v18];
    do
    {
      __int16 v23 = *v21++;
      __int16 v22 = v23;
      __int16 v24 = *v20++;
      *v19++ = v22 - v24;
      --v17;
    }
    while (v17);
    return result;
  }
  uint64_t v11 = 0;
  if ((unint64_t)((char *)v10 - (char *)v8) < 0x20) {
    goto LABEL_14;
  }
  if ((unint64_t)((char *)v10 - (char *)v9) < 0x20) {
    goto LABEL_14;
  }
  uint64_t v11 = v7 & 0x7FFFFFF0;
  int v12 = v8 + 1;
  uint64_t v13 = v9 + 1;
  int v14 = v10 + 1;
  uint64_t v15 = v7 & 0xFFFFFFF0;
  do
  {
    int16x8_t v16 = vsubq_s16(*v12, *v13);
    v14[-1] = vsubq_s16(v12[-1], v13[-1]);
    *int v14 = v16;
    v12 += 2;
    v13 += 2;
    v14 += 2;
    v15 -= 16;
  }
  while (v15);
  if (v11 != v7) {
    goto LABEL_14;
  }
  return result;
}

void sub_19E1CE5A8(int a1, void *lpsrc, const void *a3)
{
  if (lpsrc) {
    __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3F48, 0);
  }
  if (a3)
  {
    __dynamic_cast(a3, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3F48, 0);
  }
}

void *sub_19E1CE674(uint64_t a1, void *lpsrc)
{
  if (lpsrc)
  {
    uint64_t result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3F48, 0);
    uint64_t v4 = (*(_DWORD *)(a1 + 104) * *(_DWORD *)(a1 + 100));
    if ((int)v4 < 1) {
      return result;
    }
  }
  else
  {
    uint64_t result = 0;
    uint64_t v4 = (*(_DWORD *)(a1 + 104) * *(_DWORD *)(a1 + 100));
    if ((int)v4 < 1) {
      return result;
    }
  }
  unint64_t v5 = **(void **)(a1 + 512);
  unint64_t v6 = result[16];
  if (v4 < 0x10 || (v5 < v6 + 2 * v4 ? (BOOL v7 = v6 >= v5 + 2 * v4) : (BOOL v7 = 1), !v7))
  {
    uint64_t v8 = 0;
LABEL_16:
    uint64_t v13 = v4 - v8;
    uint64_t v14 = 2 * v8;
    uint64_t v15 = (__int16 *)(v6 + v14);
    int16x8_t v16 = (_WORD *)(v5 + v14);
    do
    {
      __int16 v17 = *v15++;
      *v16++ += v17;
      --v13;
    }
    while (v13);
    return result;
  }
  uint64_t v8 = v4 & 0x7FFFFFF0;
  unint64_t v9 = (int16x8_t *)(v5 + 16);
  int v10 = (int16x8_t *)(v6 + 16);
  uint64_t v11 = v4 & 0xFFFFFFF0;
  do
  {
    int16x8_t v12 = vaddq_s16(*v10, *v9);
    v9[-1] = vaddq_s16(v10[-1], v9[-1]);
    *unint64_t v9 = v12;
    v9 += 2;
    v10 += 2;
    v11 -= 16;
  }
  while (v11);
  if (v8 != v4) {
    goto LABEL_16;
  }
  return result;
}

void sub_19E1CE7A0(uint64_t a1, void *lpsrc)
{
  if (lpsrc) {
    __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3F30, 0);
  }
  (*(void (**)(void))(**(void **)(a1 + 424) + 64))(*(void *)(a1 + 424));
  sub_19E2F6320(23);
}

uint64_t sub_19E1CE830(uint64_t result, float a2, double a3, double a4)
{
  uint64_t v4 = *(unsigned int *)(result + 108);
  if ((int)v4 >= 1)
  {
    unint64_t v5 = **(_WORD ***)(result + 512);
    do
    {
      LOWORD(a4) = *v5;
      *(void *)&a4 = vmovl_s16(*(int16x4_t *)&a4).u64[0];
      float v6 = (float)SLODWORD(a4);
      BOOL v7 = (float)SLODWORD(a4) < (float)-a2;
      *(float *)&a4 = -a2;
      if (v7 || (*(float *)&a4 = a2, v6 > a2)) {
        _WORD *v5 = (int)*(float *)&a4;
      }
      ++v5;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_19E1CE88C(uint64_t result, float a2, __n128 a3)
{
  uint64_t v3 = *(unsigned int *)(result + 108);
  if ((int)v3 >= 1)
  {
    uint64_t v4 = **(int16x4_t ***)(result + 512);
    if (v3 < 0x10)
    {
      uint64_t v5 = 0;
LABEL_7:
      uint64_t v9 = v3 - v5;
      int v10 = (unsigned __int16 *)v4 + v5;
      do
      {
        a3.n128_u16[0] = *v10;
        a3.n128_u64[0] = vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
        a3.n128_f32[0] = (float)a3.n128_i32[0] * a2;
        *v10++ = (int)a3.n128_f32[0];
        --v9;
      }
      while (v9);
      return result;
    }
    uint64_t v5 = v3 & 0x7FFFFFF0;
    float v6 = v4 + 2;
    uint64_t v7 = v3 & 0xFFFFFFF0;
    do
    {
      a3 = (__n128)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(v6[-2])), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v6[-2].i8)), a2)));
      int16x8_t v8 = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*v6)), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v6->i8)), a2)));
      *(__n128 *)v6[-2].i8 = a3;
      *(int16x8_t *)v6->i8 = v8;
      v6 += 4;
      v7 -= 16;
    }
    while (v7);
    if (v5 != v3) {
      goto LABEL_7;
    }
  }
  return result;
}

uint64_t sub_19E1CE95C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 424) + 16))();
}

void sub_19E1CE984(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = **(void **)(a1 + 512);
  int v5 = *(_DWORD *)(a1 + 100);
  int v4 = *(_DWORD *)(a1 + 104);
  uint64_t v7 = *(void **)(a2 + 8);
  unint64_t v6 = *(void *)(a2 + 16);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = *(void **)a2;
    uint64_t v10 = (uint64_t)v7 - *(void *)a2;
    unint64_t v11 = (v10 >> 4) + 1;
    if (v11 >> 60) {
      sub_19E13D694();
    }
    uint64_t v12 = v6 - (void)v9;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    BOOL v13 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
    if (!v13) {
      unint64_t v14 = v11;
    }
    if (v14 >> 60) {
      sub_19E13C418();
    }
    uint64_t v15 = 16 * v14;
    int16x8_t v16 = (char *)operator new(16 * v14);
    __int16 v17 = &v16[16 * (v10 >> 4)];
    uint64_t v18 = &v16[v15];
    *(void *)__int16 v17 = v3;
    int16x8_t v8 = v17 + 16;
    int v19 = &v16[v10];
    *((_DWORD *)v19 + 2) = v5;
    for (*((_DWORD *)v19 + 3) = v4; v7 != v9; *((void *)v17 + 1) = v7[1])
    {
      uint64_t v20 = *(v7 - 2);
      v7 -= 2;
      *((void *)v17 - 2) = v20;
      v17 -= 16;
    }
    *(void *)a2 = v17;
    *(void *)(a2 + 8) = v8;
    *(void *)(a2 + 16) = v18;
    if (v9) {
      operator delete(v9);
    }
  }
  else
  {
    void *v7 = v3;
    int16x8_t v8 = v7 + 2;
    *((_DWORD *)v7 + 2) = v5;
    *((_DWORD *)v7 + 3) = v4;
  }
  *(void *)(a2 + 8) = v8;
}

uint64_t sub_19E1CEA94(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(v2 - 16);
  *(void *)(a2 + 8) = v2 - 16;
  *(void *)(a1 + 128) = v3;
  uint64_t result = a1 + 128;
  *(void *)(result + 384) = result;
  return result;
}

uint64_t sub_19E1CEAAC(uint64_t result)
{
  *(unsigned char *)(result + 42) = 1;
  return result;
}

uint64_t sub_19E1CEAB8(uint64_t result)
{
  *(unsigned char *)(result + 42) = 0;
  return result;
}

void sub_19E1CEAC0(uint64_t a1)
{
  std::string __p = operator new(0x20uLL);
  long long v3 = xmmword_19E351400;
  strcpy((char *)__p, "FullLayer, from allocAll");
  (*(void (**)(uint64_t, void **, void, float))(*(void *)a1 + 400))(a1, &__p, 0, -0.44);
  if (SHIBYTE(v3) < 0) {
    operator delete(__p);
  }
}

void sub_19E1CEB8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E1CEBA8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 56);
  if (v3 == v2)
  {
    uint64_t v2 = *(void *)(a1 + 56);
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      int v5 = *(void **)(v2 + 8 * v4);
      if (v5)
      {
        operator delete[](v5);
        uint64_t v2 = *(void *)(a1 + 48);
        uint64_t v3 = *(void *)(a1 + 56);
      }
      ++v4;
    }
    while (v4 < (v3 - v2) >> 3);
  }
  uint64_t v6 = *(void *)(a1 + 72);
  uint64_t v7 = *(void *)(a1 + 80);
  if (v7 != v6)
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(void **)(v6 + 8 * v8);
      if (v9)
      {
        operator delete[](v9);
        uint64_t v6 = *(void *)(a1 + 72);
        uint64_t v7 = *(void *)(a1 + 80);
      }
      ++v8;
    }
    while (v8 < (v7 - v6) >> 3);
    *(void *)(a1 + 56) = *(void *)(a1 + 48);
    *(void *)(a1 + 80) = v6;
    uint64_t v11 = *(void *)(a1 + 240);
    uint64_t v10 = *(void *)(a1 + 248);
    if (v10 != v11) {
      goto LABEL_13;
    }
LABEL_18:
    uint64_t v11 = v10;
    goto LABEL_19;
  }
  *(void *)(a1 + 56) = v2;
  *(void *)(a1 + 80) = v7;
  uint64_t v11 = *(void *)(a1 + 240);
  uint64_t v10 = *(void *)(a1 + 248);
  if (v10 == v11) {
    goto LABEL_18;
  }
LABEL_13:
  unint64_t v12 = 0;
  do
  {
    BOOL v13 = *(void **)(v11 + 8 * v12);
    if (v13)
    {
      operator delete[](v13);
      uint64_t v11 = *(void *)(a1 + 240);
      uint64_t v10 = *(void *)(a1 + 248);
    }
    ++v12;
  }
  while (v12 < (v10 - v11) >> 3);
LABEL_19:
  *(void *)(a1 + 248) = v11;
  unint64_t v14 = *(void **)(a1 + 224);
  if (v14)
  {
    operator delete(v14);
    *(void *)(a1 + 224) = 0;
  }
  uint64_t v15 = *(void **)(a1 + 216);
  if (v15)
  {
    operator delete(v15);
    *(void *)(a1 + 216) = 0;
  }
  *(void *)(a1 + 272) = *(void *)(a1 + 264);
  *(void *)(a1 + 296) = *(void *)(a1 + 288);
  *(void *)(a1 + 392) = *(void *)(a1 + 384);
  uint64_t v17 = *(void *)(a1 + 360);
  uint64_t v16 = *(void *)(a1 + 368);
  if (v16 != v17)
  {
    uint64_t v18 = *(void *)(a1 + 368);
    do
    {
      uint64_t v20 = *(void **)(v18 - 24);
      v18 -= 24;
      int v19 = v20;
      if (v20)
      {
        *(void *)(v16 - 16) = v19;
        operator delete(v19);
      }
      uint64_t v16 = v18;
    }
    while (v18 != v17);
  }
  *(void *)(a1 + 368) = v17;
  if (!*(unsigned char *)(a1 + 116))
  {
    *(void *)(a1 + 320) = *(void *)(a1 + 312);
    *(void *)(a1 + 344) = *(void *)(a1 + 336);
  }
}

float sub_19E1CED40(uint64_t a1, void *a2, float *a3, int a4)
{
  uint64_t v5 = *(unsigned int *)(a1 + 100);
  if ((int)v5 < 1)
  {
    uint64_t v10 = 0;
  }
  else
  {
    int v6 = 0;
    uint64_t v7 = 0;
    float v8 = 1.1755e-38;
    do
    {
      float v9 = *(float *)(*(void *)(*a2 + 8 * a4) + 4 * v7);
      if (v9 > v8) {
        int v6 = v7;
      }
      float v8 = fmaxf(v9, v8);
      ++v7;
    }
    while (v5 != v7);
    uint64_t v10 = v6;
  }
  float v11 = *(float *)(*(void *)(*(void *)(a1 + 288) + 8 * a4) + 4 * v10);
  if (v11 <= 1.0e-10)
  {
    float result = 99.0;
    *a3 = 99.0;
  }
  else
  {
    float result = -log2f(v11);
    *a3 = result;
  }
  return result;
}

float32_t sub_19E1CEDF4(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4, _DWORD *a5, float32x4_t a6)
{
  uint64_t v6 = *(void *)(a1 + 288);
  uint64_t v7 = *(unsigned int *)(a1 + 100);
  if ((int)v7 <= 0)
  {
    uint64_t v14 = *a2;
    uint64_t v15 = (float32x4_t **)(*a2 + 8 * a4);
    uint64_t v17 = *a3;
    if (a4 >= (unint64_t)((a3[1] - *a3) >> 3)) {
      return a6.f32[0];
    }
  }
  else
  {
    int v8 = 0;
    uint64_t v9 = 0;
    float v10 = 1.1755e-38;
    do
    {
      float v11 = *(float *)(*(void *)(v6 + 8 * a4) + 4 * v9);
      if (v11 > v10) {
        int v8 = v9;
      }
      float v10 = fmaxf(v11, v10);
      ++v9;
    }
    while (v7 != v9);
    int v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = *a2;
    uint64_t v15 = (float32x4_t **)(*a2 + 8 * a4);
    a6.i32[0] = 0x800000;
    do
    {
      float v16 = (*v15)->f32[v13];
      if (v16 > a6.f32[0]) {
        int v12 = v13;
      }
      a6.f32[0] = fmaxf(v16, a6.f32[0]);
      ++v13;
    }
    while (v7 != v13);
    if (v8 != v12) {
      ++*a5;
    }
    uint64_t v17 = *a3;
    if (a4 >= (unint64_t)((a3[1] - *a3) >> 3)) {
      return a6.f32[0];
    }
  }
  if (a4 < (unint64_t)((a2[1] - v14) >> 3) && a4 < (unint64_t)((*(void *)(a1 + 296) - v6) >> 3))
  {
    uint64_t v18 = *(unsigned int *)(a1 + 100);
    if ((int)v18 >= 1)
    {
      int v19 = *v15;
      uint64_t v20 = *(float32x4_t **)(v6 + 8 * a4);
      uint64_t v21 = *(float32x4_t **)(v17 + 8 * a4);
      if (v18 >= 8)
      {
        uint64_t v22 = 0;
        if ((unint64_t)((char *)v21 - (char *)v19) >= 0x20
          && (unint64_t)((char *)v21 - (char *)v20) >= 0x20)
        {
          uint64_t v22 = v18 & 0x7FFFFFF8;
          __int16 v23 = v19 + 1;
          __int16 v24 = v20 + 1;
          uint64_t v25 = v21 + 1;
          uint64_t v26 = v18 & 0xFFFFFFF8;
          do
          {
            a6 = vsubq_f32(v23[-1], v24[-1]);
            float32x4_t v27 = vsubq_f32(*v23, *v24);
            v25[-1] = a6;
            float32x4_t *v25 = v27;
            v23 += 2;
            v24 += 2;
            v25 += 2;
            v26 -= 8;
          }
          while (v26);
          if (v22 == v18) {
            return a6.f32[0];
          }
        }
      }
      else
      {
        uint64_t v22 = 0;
      }
      uint64_t v28 = &v21->i32[v22];
      uint64_t v29 = &v20->f32[v22];
      uint64_t v30 = &v19->f32[v22];
      uint64_t v31 = v18 - v22;
      do
      {
        float v32 = *v30++;
        float v33 = v32;
        float v34 = *v29++;
        a6.f32[0] = v33 - v34;
        *v28++ = a6.i32[0];
        --v31;
      }
      while (v31);
    }
  }
  return a6.f32[0];
}

void sub_19E1CEF8C(uint64_t a1, uint64_t *a2, void *a3, int a4)
{
  if (((**(uint64_t (***)(uint64_t))a1)(a1) & 1) == 0)
  {
    sub_19E1D0E88((void **)(a1 + 416), (float32x4_t **)(*(void *)(a1 + 384) + 8 * a4), (const void **)(*a2 + 8 * a4), *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 408), v8);
    sub_19E1C7A94();
  }
  if (a3[1] == *a3 || *(int *)(a1 + 112) < 1 || !(**(unsigned int (***)(uint64_t))a1)(a1))
  {
    uint64_t v16 = *(void *)(a1 + 264) + 8 * a4;
    uint64_t v17 = a1 + 416;
    int v18 = *(_DWORD *)(a1 + 104);
    size_t v19 = *(int *)(a1 + 100);
    uint64_t v20 = *(void *)(a1 + 136);
    global_queue = dispatch_get_global_queue(0, 0);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = sub_19E1C7E74;
    block[3] = &unk_1E599D040;
    int v37 = v18;
    block[4] = v20;
    block[5] = v17;
    block[6] = v16;
    dispatch_apply(v19, global_queue, block);
    return;
  }
  uint64_t v9 = *a2;
  uint64_t v10 = *(void *)(a1 + 360) + 24 * a4;
  int v12 = *(unsigned char **)v10;
  float v11 = *(unsigned char **)(v10 + 8);
  size_t v13 = v11 - v12;
  if (v11 == v12)
  {
    uint64_t v14 = 0;
    uint64_t v15 = *(unsigned int *)(a1 + 100);
    if ((int)v15 < 1) {
      goto LABEL_20;
    }
    goto LABEL_13;
  }
  if ((v13 & 0x8000000000000000) != 0) {
    sub_19E13D694();
  }
  uint64_t v14 = operator new(v11 - v12);
  memcpy(v14, v12, v13);
  uint64_t v15 = *(unsigned int *)(a1 + 100);
  if ((int)v15 >= 1)
  {
LABEL_13:
    uint64_t v22 = 0;
    uint64_t v23 = *(void *)(v9 + 8 * a4);
    uint64_t v24 = *(void *)(*(void *)(a1 + 168) + 8 * *(int *)(a1 + 160));
    if (v15 < 8) {
      goto LABEL_18;
    }
    if ((unint64_t)(v24 - v23) < 0x20) {
      goto LABEL_18;
    }
    uint64_t v22 = v15 & 0x7FFFFFF8;
    uint64_t v25 = (long long *)(v23 + 16);
    uint64_t v26 = (_OWORD *)(v24 + 16);
    uint64_t v27 = v15 & 0xFFFFFFF8;
    do
    {
      long long v28 = *v25;
      *(v26 - 1) = *(v25 - 1);
      *uint64_t v26 = v28;
      v25 += 2;
      v26 += 2;
      v27 -= 8;
    }
    while (v27);
    if (v22 != v15)
    {
LABEL_18:
      uint64_t v29 = v15 - v22;
      uint64_t v30 = 4 * v22;
      uint64_t v31 = (_DWORD *)(v24 + 4 * v22);
      float v32 = (int *)(v23 + v30);
      do
      {
        int v33 = *v32++;
        *v31++ = v33;
        --v29;
      }
      while (v29);
    }
  }
LABEL_20:
  if (*(int *)(a1 + 156) < 1)
  {
    ++*(_DWORD *)(a1 + 160);
    if (!v14) {
      return;
    }
  }
  else
  {
    uint64_t v34 = 0;
    uint64_t v35 = *(void *)(a1 + 192);
    do
    {
      *(_DWORD *)(*(void *)(v35 + 24 * *(int *)(a1 + 160)) + 4 * v34) = *((_DWORD *)v14 + v34);
      ++v34;
    }
    while (v34 < *(int *)(a1 + 156));
    ++*(_DWORD *)(a1 + 160);
  }

  operator delete(v14);
}

void sub_19E1CF2D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E1CF2EC(uint64_t a1, int a2)
{
  if (!*(unsigned char *)(a1 + 116))
  {
    if (!*(_DWORD *)(a1 + 112))
    {
      bzero(*(void **)(a1 + 136), 4 * *(int *)(a1 + 108));
      uint64_t v4 = *(void *)(a1 + 264);
      if (*(void *)(a1 + 272) == v4) {
        goto LABEL_7;
      }
      goto LABEL_5;
    }
    *(_DWORD *)(a1 + 160) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 264);
  if (*(void *)(a1 + 272) == v4) {
    goto LABEL_7;
  }
LABEL_5:
  unint64_t v5 = 0;
  do
  {
    bzero(*(void **)(v4 + 8 * v5++), 4 * *(int *)(a1 + 104));
    uint64_t v4 = *(void *)(a1 + 264);
  }
  while (v5 < (*(void *)(a1 + 272) - v4) >> 3);
LABEL_7:
  uint64_t v6 = *(void *)(a1 + 288);
  if (*(void *)(a1 + 296) != v6)
  {
    unint64_t v7 = 0;
    do
    {
      bzero(*(void **)(v6 + 8 * v7++), 4 * *(int *)(a1 + 100));
      uint64_t v6 = *(void *)(a1 + 288);
    }
    while (v7 < (*(void *)(a1 + 296) - v6) >> 3);
  }
  if (a2 >= 1 && !*(unsigned char *)(a1 + 116))
  {
    uint64_t v8 = 0;
    uint64_t v9 = 8 * a2 - 8;
LABEL_14:
    bzero(*(void **)(*(void *)(a1 + 312) + v8), 4 * *(int *)(a1 + 104));
    bzero(*(void **)(*(void *)(a1 + 336) + v8), 4 * *(int *)(a1 + 100));
    while (v9 != v8)
    {
      v8 += 8;
      if (!*(unsigned char *)(a1 + 116)) {
        goto LABEL_14;
      }
    }
  }
}

uint64_t sub_19E1CF414(uint64_t a1)
{
  return *(unsigned int *)(a1 + 104);
}

uint64_t sub_19E1CF41C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 100);
}

void sub_19E1CF428(uint64_t a1)
{
  if (*(int *)(a1 + 112) >= 1) {
    sub_19E2F6320(33);
  }
  sub_19E2F6320(23);
}

void sub_19E1CF450(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  if (*(int *)(a1 + 112) < 1)
  {
    bzero(*(void **)(a1 + 136), 4 * *(int *)(a1 + 108));
    BOOL v10 = __OFSUB__(a5, 1);
    int v9 = a5 - 1;
    if (v9 < 0 != v10) {
      return;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 160) = 0;
    int v9 = a5 - 1;
    if (a5 < 1) {
      return;
    }
  }
  unsigned int v11 = 0;
  do
  {
    if (*(unsigned char *)(a1 + 520)) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = v9;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 248))(a1, a4, a3, v12, 0xFFFFFFFFLL, 0xFFFFFFFFLL);
    --v9;
    ++v11;
  }
  while (v9 != -1);
}

void sub_19E1CF518(uint64_t a1, void *a2, void *a3, int a4, uint64_t a5)
{
  unint64_t v7 = a3;
  if (a3[1] == *a3 || *(int *)(a1 + 112) < 1)
  {
    uint64_t v9 = 0;
    if (!a5) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v9 = (**(uint64_t (***)(uint64_t))a1)(a1);
    if (!a5) {
      goto LABEL_7;
    }
  }
  if (*(unsigned char *)(a1 + 520)) {
    sub_19E2F6320(34);
  }
LABEL_7:
  uint64_t v10 = a4 & 0xFFFFFF;
  unsigned int v11 = a5 != 0;
  if (v10 > v11)
  {
    while (1)
    {
      int v12 = *(unsigned char *)(a1 + 520) ? v10 + ~v11 : v11;
      uint64_t v13 = v12;
      int v14 = *(unsigned char *)(a1 + 42) ? 1 : v12;
      uint64_t v15 = ((*(unsigned char *)(a1 + 42) != 0) & v9) != 0 ? 1 : v12;
      uint64_t v16 = *(void *)(a1 + 264);
      if (v9) {
        break;
      }
      memmove(*(void **)(v16 + 8 * v15), *(const void **)(*a2 + 8 * v15), 4 * *(int *)(a1 + 96));
      int v17 = *(unsigned __int8 *)(a1 + 40);
      if (*(unsigned char *)(a1 + 40)) {
        goto LABEL_23;
      }
LABEL_24:
      if (!v9) {
        sub_19E1C7A94();
      }
      uint64_t v35 = v13;
      uint64_t v18 = *(void *)(a1 + 360);
      size_t v19 = (void *)(v18 + 24 * v13);
      uint64_t v20 = (_DWORD *)*v19;
      *(_DWORD *)*size_t v19 = **(_DWORD **)(*v7 + 24 * v13);
      if (v17) {
        v20[1] = *(_DWORD *)(a1 + 104) - 1;
      }
      uint64_t v21 = *(void *)(a1 + 384);
      int v37 = 0;
      uint64_t v38 = 0;
      int v36 = 0;
      uint64_t v22 = (_DWORD *)*v19;
      uint64_t v23 = *(void *)(v18 + 24 * (int)v35 + 8);
      int64_t v24 = v23 - *v19;
      if (v23 != *v19)
      {
        if (v24 < 0) {
          sub_19E13D694();
        }
        uint64_t v25 = v9;
        uint64_t v26 = v10;
        uint64_t v27 = v7;
        int v36 = (int *)operator new(v23 - *v19);
        int v37 = v36;
        long long v28 = &v36[v24 >> 2];
        uint64_t v38 = v28;
        memcpy(v36, v22, v24);
        int v37 = v28;
        unint64_t v7 = v27;
        uint64_t v10 = v26;
        uint64_t v9 = v25;
      }
      sub_19E1C92F0((void **)(v21 + 8 * v14), &v36, *(uint64_t **)(a1 + 512), *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104));
      if (v36)
      {
        int v37 = v36;
        operator delete(v36);
      }
      uint64_t v29 = (const float **)(*(void *)(a1 + 384) + 8 * v14);
      int v30 = *(_DWORD *)(a1 + 100);
      if (v30 >= 1)
      {
        uint64_t v31 = (float *)*v29;
        uint64_t v32 = *(unsigned int *)(a1 + 100);
        do
        {
          int v33 = -1035468800;
          if (*v31 < -50.0 || (int v33 = 1112014848, *v31 > 50.0)) {
            *(_DWORD *)uint64_t v31 = v33;
          }
          ++v31;
          --v32;
        }
        while (v32);
      }
      sub_19E1C7520((float **)(*(void *)(a1 + 288) + 8 * v35), v29, v30, *(_DWORD *)(a1 + 408));
      if (++v11 == v10) {
        return;
      }
    }
    bzero(*(void **)(v16 + 8 * v15), 4 * *(int *)(a1 + 104));
    *(_DWORD *)(*(void *)(*(void *)(a1 + 264) + 8 * v15) + 4 * **(int **)(*v7 + 24 * (int)v13)) = 1065353216;
    int v17 = *(unsigned __int8 *)(a1 + 40);
    if (!*(unsigned char *)(a1 + 40)) {
      goto LABEL_24;
    }
LABEL_23:
    *(_DWORD *)(*(void *)(*(void *)(a1 + 264) + 8 * v15) + 4 * *(int *)(a1 + 104) - 4) = 1065353216;
    goto LABEL_24;
  }
}

void sub_19E1CF820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E1CF840(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  a1[520] = 1;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E94584B8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v13 = a6;
    uint64_t v12 = a5;
    unsigned int v11 = a4;
    uint64_t v9 = a2;
    uint64_t v10 = a3;
    int v8 = __cxa_guard_acquire(&qword_1E94584B8);
    a2 = v9;
    a3 = v10;
    a4 = v11;
    a5 = v12;
    a6 = v13;
    if (v8)
    {
      qword_1E94584A0 = 0;
      *(void *)algn_1E94584A8 = 0;
      qword_1E94584B0 = 0;
      __cxa_atexit((void (*)(void *))sub_19E142EEC, &qword_1E94584A0, &dword_19E138000);
      __cxa_guard_release(&qword_1E94584B8);
      a2 = v9;
      a3 = v10;
      a4 = v11;
      a5 = v12;
      a6 = v13;
    }
  }
  uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 304))(a1, a2, a3, a4, a5, a6, &qword_1E94584A0);
  a1[520] = 0;
  return result;
}

uint64_t sub_19E1CF938(unsigned char *a1)
{
  a1[520] = 1;
  uint64_t result = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 296))(a1);
  a1[520] = 0;
  return result;
}

char *sub_19E1CF990(uint64_t a1, void *lpsrc)
{
  if (*(_DWORD *)(a1 + 504) != 1) {
    sub_19E2F6320(1);
  }
  uint64_t result = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3F48, 0);
  if (!result) {
    __cxa_bad_cast();
  }
  *(void *)(a1 + 512) = result + 128;
  return result;
}

void sub_19E1CFA1C(uint64_t a1, void *lpsrc)
{
  if (!*(_DWORD *)(a1 + 504))
  {
    if (!__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3F48, 0))__cxa_bad_cast(); {
    sub_19E303188(a1 + 432);
    }
    if (!*(_DWORD *)(a1 + 112)) {
      sub_19E2F6320(23);
    }
    sub_19E2F6320(33);
  }
  sub_19E2F6320(1);
}

_DWORD *sub_19E1CFAB0(_DWORD *result)
{
  if (!result[30]) {
    return (_DWORD *)(*(uint64_t (**)(void))(*(void *)result + 392))();
  }
  return result;
}

float sub_19E1CFAE8(uint64_t a1, uint64_t *a2, int a3)
{
  if (a3 < 1) {
    return 0.0;
  }
  uint64_t v3 = *(unsigned int *)(a1 + 100);
  uint64_t v4 = *(float ***)(a1 + 288);
  uint64_t v5 = a3;
  if ((int)v3 <= 0)
  {
    float v8 = 0.0;
    do
    {
      while (1)
      {
        float v14 = **v4;
        if (v14 <= 1.0e-10) {
          break;
        }
        float v8 = v8 - log2f(v14);
        ++v4;
        if (!--v5) {
          return v8;
        }
      }
      float v8 = v8 + 99.0;
      ++v4;
      --v5;
    }
    while (v5);
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a2;
    float v8 = 0.0;
    do
    {
      while (1)
      {
        int v9 = 0;
        uint64_t v10 = 0;
        float v11 = 1.1755e-38;
        do
        {
          float v12 = *(float *)(*(void *)(v7 + 8 * v6) + 4 * v10);
          if (v12 > v11) {
            int v9 = v10;
          }
          float v11 = fmaxf(v12, v11);
          ++v10;
        }
        while (v3 != v10);
        float v13 = v4[v6][v9];
        if (v13 <= 1.0e-10) {
          break;
        }
        float v8 = v8 - log2f(v13);
        if (++v6 == v5) {
          return v8;
        }
      }
      float v8 = v8 + 99.0;
      ++v6;
    }
    while (v6 != v5);
  }
  return v8;
}

void sub_19E1CFC2C(void *a1)
{
  uint64_t v1 = sub_19E1D12D0(a1);

  operator delete(v1);
}

uint64_t sub_19E1CFC54(uint64_t a1)
{
  return a1 + 336;
}

float sub_19E1CFC5C(uint64_t a1, int a2, int a3)
{
  return *(float *)(*(void *)(*(void *)(a1 + 288) + 8 * a2) + 4 * a3);
}

uint64_t sub_19E1CFC6C(uint64_t result, uint64_t *a2, uint64_t *a3, int a4, int *a5)
{
  uint64_t v5 = (a4 - 1);
  if (a4 >= 1)
  {
    unint64_t v6 = *(unsigned int *)(result + 100);
    if ((int)v6 >= 1)
    {
      uint64_t v7 = *(void *)(result + 288);
      uint64_t v8 = *a2;
      uint64_t v9 = *a3;
      int v10 = *a5;
      do
      {
        if ((int)v6 >= 1)
        {
          int v12 = 0;
          uint64_t v13 = 0;
          float v14 = 1.1755e-38;
          do
          {
            float v15 = *(float *)(*(void *)(v7 + 8 * v5) + 4 * v13);
            if (v15 > v14) {
              int v12 = v13;
            }
            float v14 = fmaxf(v15, v14);
            ++v13;
          }
          while (v6 != v13);
          int v16 = 0;
          uint64_t v17 = 0;
          float v18 = 1.1755e-38;
          do
          {
            float v19 = *(float *)(*(void *)(v8 + 8 * v5) + 4 * v17);
            if (v19 > v18) {
              int v16 = v17;
            }
            float v18 = fmaxf(v19, v18);
            ++v17;
          }
          while (v6 != v17);
          if (v12 == v16)
          {
            unint64_t v6 = v6;
          }
          else
          {
            *a5 = ++v10;
            unint64_t v6 = *(unsigned int *)(result + 100);
            if ((int)v6 < 1) {
              continue;
            }
          }
          uint64_t v20 = *(float32x4_t **)(v8 + 8 * v5);
          uint64_t v21 = *(float32x4_t **)(v7 + 8 * v5);
          uint64_t v22 = *(float32x4_t **)(v9 + 8 * v5);
          if (v6 >= 8)
          {
            unint64_t v23 = 0;
            if ((unint64_t)((char *)v22 - (char *)v20) >= 0x20
              && (unint64_t)((char *)v22 - (char *)v21) >= 0x20)
            {
              unint64_t v23 = v6 & 0x7FFFFFF8;
              int64_t v24 = v20 + 1;
              uint64_t v25 = v21 + 1;
              uint64_t v26 = v22 + 1;
              uint64_t v27 = v6 & 0xFFFFFFF8;
              do
              {
                float32x4_t v28 = vsubq_f32(*v24, *v25);
                v26[-1] = vsubq_f32(v24[-1], v25[-1]);
                *uint64_t v26 = v28;
                v24 += 2;
                v25 += 2;
                v26 += 2;
                v27 -= 8;
              }
              while (v27);
              if (v23 == v6) {
                continue;
              }
            }
          }
          else
          {
            unint64_t v23 = 0;
          }
          uint64_t v29 = &v22->f32[v23];
          int v30 = &v21->f32[v23];
          uint64_t v31 = &v20->f32[v23];
          unint64_t v32 = v6 - v23;
          do
          {
            float v33 = *v31++;
            float v34 = v33;
            float v35 = *v30++;
            *v29++ = v34 - v35;
            --v32;
          }
          while (v32);
        }
      }
      while (v5-- > 0);
    }
  }
  return result;
}

void sub_19E1CFDEC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 528);
  if (v2)
  {
    int v3 = *(unsigned __int8 *)(v2 + 376);
    if (*(unsigned char *)(a1 + 40)) {
      goto LABEL_3;
    }
  }
  else
  {
    int v3 = 0;
    if (*(unsigned char *)(a1 + 40))
    {
LABEL_3:
      int v4 = *(_DWORD *)(a1 + 96) + (v3 ^ 1);
      int v5 = *(_DWORD *)(a1 + 100) * v4;
      *(_DWORD *)(a1 + 104) = v4;
      *(_DWORD *)(a1 + 108) = v5;
      if (*(_DWORD *)(a1 + 504)) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  int v7 = *(_DWORD *)(a1 + 96);
  int v8 = *(_DWORD *)(a1 + 100) * v7;
  *(_DWORD *)(a1 + 104) = v7;
  *(_DWORD *)(a1 + 108) = v8;
  if (*(_DWORD *)(a1 + 504))
  {
LABEL_4:
    if (*(unsigned char *)(a1 + 116)) {
      goto LABEL_5;
    }
LABEL_15:
    operator new[]();
  }
LABEL_9:
  if (!*(unsigned char *)(a1 + 117))
  {
    if (!v2 || *(_DWORD *)(v2 + 40) != 1) {
      operator new[]();
    }
    *(void *)(a1 + 128) = *(void *)(v2 + 112);
  }
  *(void *)(a1 + 512) = a1 + 128;
  if (!*(unsigned char *)(a1 + 116)) {
    goto LABEL_15;
  }
LABEL_5:
  if (*(int *)(a1 + 112) < 1) {
    unsigned __int8 v6 = 0;
  }
  else {
    unsigned __int8 v6 = (**(uint64_t (***)(uint64_t))a1)(a1);
  }
  if (*(unsigned char *)(a1 + 42)) {
    int v9 = 2;
  }
  else {
    int v9 = dword_1E9457D98;
  }
  int v32 = v9;
  if (((*(unsigned char *)(a1 + 42) != 0) & v6) != 0) {
    int v10 = 2;
  }
  else {
    int v10 = dword_1E9457D98;
  }
  unint64_t v11 = v10;
  uint64_t v12 = *(void *)(a1 + 264);
  unint64_t v13 = (*(void *)(a1 + 272) - v12) >> 3;
  if (v11 <= v13)
  {
    if (v11 < v13) {
      *(void *)(a1 + 272) = v12 + 8 * v11;
    }
  }
  else
  {
    sub_19E1599BC((void **)(a1 + 264), v11 - v13);
  }
  uint64_t v14 = *(void *)(a1 + 384);
  unint64_t v15 = (*(void *)(a1 + 392) - v14) >> 3;
  if (v32 <= v15)
  {
    if (v32 < v15) {
      *(void *)(a1 + 392) = v14 + 8 * v32;
    }
  }
  else
  {
    sub_19E1599BC((void **)(a1 + 384), v32 - v15);
  }
  int v16 = dword_1E9457D98;
  uint64_t v17 = *(void *)(a1 + 288);
  unint64_t v18 = (*(void *)(a1 + 296) - v17) >> 3;
  if (dword_1E9457D98 <= v18)
  {
    if (dword_1E9457D98 < v18) {
      *(void *)(a1 + 296) = v17 + 8 * dword_1E9457D98;
    }
  }
  else
  {
    sub_19E1599BC((void **)(a1 + 288), dword_1E9457D98 - v18);
    int v16 = dword_1E9457D98;
  }
  if (!*(unsigned char *)(a1 + 116))
  {
    unint64_t v19 = v16;
    uint64_t v20 = *(void *)(a1 + 312);
    unint64_t v21 = (*(void *)(a1 + 320) - v20) >> 3;
    if (v16 <= v21)
    {
      if (v16 < v21) {
        *(void *)(a1 + 320) = v20 + 8 * v16;
      }
    }
    else
    {
      sub_19E1599BC((void **)(a1 + 312), v16 - v21);
      int v16 = dword_1E9457D98;
      unint64_t v19 = dword_1E9457D98;
    }
    uint64_t v22 = *(void *)(a1 + 336);
    unint64_t v23 = (*(void *)(a1 + 344) - v22) >> 3;
    if (v19 <= v23)
    {
      if (v19 < v23) {
        *(void *)(a1 + 344) = v22 + 8 * v19;
      }
    }
    else
    {
      sub_19E1599BC((void **)(a1 + 336), v19 - v23);
      int v16 = dword_1E9457D98;
    }
  }
  unint64_t v24 = v16;
  uint64_t v26 = *(void *)(a1 + 360);
  uint64_t v25 = *(void *)(a1 + 368);
  unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((v25 - v26) >> 3);
  if (v24 <= v27)
  {
    if (v24 < v27)
    {
      uint64_t v28 = v26 + 24 * (int)v24;
      if (v25 != v28)
      {
        uint64_t v29 = *(void *)(a1 + 368);
        do
        {
          uint64_t v31 = *(void **)(v29 - 24);
          v29 -= 24;
          int v30 = v31;
          if (v31)
          {
            *(void *)(v25 - 16) = v30;
            operator delete(v30);
          }
          uint64_t v25 = v29;
        }
        while (v29 != v28);
      }
      *(void *)(a1 + 368) = v28;
    }
  }
  else
  {
    sub_19E232360(a1 + 360, v24 - v27);
  }
  if ((int)v11 >= 1) {
    operator new[]();
  }
  if (v32 >= 1) {
    operator new[]();
  }
  if (dword_1E9457D98 >= 1)
  {
    if (!*(unsigned char *)(a1 + 116)) {
      operator new[]();
    }
    operator new[]();
  }
}

void sub_19E1D0E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_19E1C6038((uint64_t *)va);
  _Unwind_Resume(a1);
}

float32_t sub_19E1D0E88(void **a1, float32x4_t **a2, const void **a3, unsigned int a4, int a5, float32x4_t a6)
{
  switch(a5)
  {
    case 0:
      memmove(*a1, *a3, 4 * (int)a4);
      return a6.f32[0];
    case 1:
      if ((int)a4 < 1) {
        return a6.f32[0];
      }
      unsigned __int8 v6 = *a2;
      int v7 = (float32x4_t *)*a3;
      int v8 = (float32x4_t *)*a1;
      if (a4 < 8)
      {
        uint64_t v9 = 0;
LABEL_42:
        uint64_t v52 = a4 - v9;
        uint64_t v53 = v9;
        unint64_t v54 = (char *)v8 + v53 * 4;
        int v55 = &v7->f32[v53];
        uint64_t v56 = &v6->f32[v53];
        do
        {
          float v57 = *v56++;
          float v58 = v57 - (float)(v57 * v57);
          float v59 = *v55++;
          a6.f32[0] = v58 * v59;
          *(_DWORD *)unint64_t v54 = a6.i32[0];
          v54 += 4;
          --v52;
        }
        while (v52);
        return a6.f32[0];
      }
      uint64_t v9 = 0;
      if ((unint64_t)((char *)v8 - (char *)v6) < 0x20) {
        goto LABEL_42;
      }
      if ((unint64_t)((char *)v8 - (char *)v7) < 0x20) {
        goto LABEL_42;
      }
      uint64_t v9 = a4 & 0x7FFFFFF8;
      unint64_t v47 = v6 + 1;
      uint64_t v48 = v7 + 1;
      size_t v49 = v8 + 1;
      uint64_t v50 = a4 & 0xFFFFFFF8;
      do
      {
        a6 = vmulq_f32(vmlsq_f32(v47[-1], v47[-1], v47[-1]), v48[-1]);
        float32x4_t v51 = vmulq_f32(vmlsq_f32(*v47, *v47, *v47), *v48);
        v49[-1] = a6;
        *size_t v49 = v51;
        v47 += 2;
        v48 += 2;
        v49 += 2;
        v50 -= 8;
      }
      while (v50);
      if (v9 != a4) {
        goto LABEL_42;
      }
      return a6.f32[0];
    case 2:
      if ((int)a4 < 1) {
        return a6.f32[0];
      }
      int v10 = *a2;
      unint64_t v11 = (float32x4_t *)*a3;
      uint64_t v12 = (float32x4_t *)*a1;
      if (a4 < 8)
      {
        uint64_t v13 = 0;
LABEL_50:
        uint64_t v65 = a4 - v13;
        uint64_t v66 = v13;
        uint64_t v67 = (char *)v12 + v66 * 4;
        int v68 = &v11->f32[v66];
        uint64_t v69 = &v10->f32[v66];
        do
        {
          float v70 = *v69++;
          float v71 = v70 * v70;
          float v72 = *v68++;
          a6.f32[0] = v72 - (float)(v71 * v72);
          *(_DWORD *)uint64_t v67 = a6.i32[0];
          v67 += 4;
          --v65;
        }
        while (v65);
        return a6.f32[0];
      }
      uint64_t v13 = 0;
      if ((unint64_t)((char *)v12 - (char *)v10) < 0x20) {
        goto LABEL_50;
      }
      if ((unint64_t)((char *)v12 - (char *)v11) < 0x20) {
        goto LABEL_50;
      }
      uint64_t v13 = a4 & 0xFFFFFFF8;
      uint64_t v60 = v10 + 1;
      uint64_t v61 = v11 + 1;
      uint64_t v62 = v12 + 1;
      uint64_t v63 = v13;
      do
      {
        a6 = vmulq_f32(v60[-1], v60[-1]);
        float32x4_t v64 = vmlsq_f32(*v61, *v61, vmulq_f32(*v60, *v60));
        v62[-1] = vmlsq_f32(v61[-1], v61[-1], a6);
        *uint64_t v62 = v64;
        v60 += 2;
        v61 += 2;
        v62 += 2;
        v63 -= 8;
      }
      while (v63);
      if (v13 != a4) {
        goto LABEL_50;
      }
      return a6.f32[0];
    case 3:
      if ((int)a4 < 1) {
        return a6.f32[0];
      }
      uint64_t v14 = *a2;
      unint64_t v15 = (float32x4_t *)*a3;
      int v16 = (float32x4_t *)*a1;
      if (a4 < 8)
      {
        uint64_t v17 = 0;
LABEL_58:
        uint64_t v80 = a4 - v17;
        uint64_t v81 = v17;
        uint64_t v82 = (char *)v16 + v81 * 4;
        uint64_t v83 = &v15->f32[v81];
        int v84 = &v14->f32[v81];
        do
        {
          float v85 = *v84++;
          float v86 = v85;
          float v87 = (float)(v85 * -0.38853) + 0.66667;
          float v88 = *v83++;
          a6.f32[0] = (float)(v88 * (float)(v86 + 1.7159)) * v87;
          *(_DWORD *)uint64_t v82 = a6.i32[0];
          v82 += 4;
          --v80;
        }
        while (v80);
        return a6.f32[0];
      }
      uint64_t v17 = 0;
      if ((unint64_t)((char *)v16 - (char *)v14) < 0x20) {
        goto LABEL_58;
      }
      if ((unint64_t)((char *)v16 - (char *)v15) < 0x20) {
        goto LABEL_58;
      }
      uint64_t v17 = a4 & 0xFFFFFFF8;
      unsigned int v73 = v14 + 1;
      BOOL v74 = v15 + 1;
      unsigned int v75 = v16 + 1;
      a6 = (float32x4_t)vdupq_n_s32(0x3EC6ECC0u);
      float32x4_t v76 = (float32x4_t)vdupq_n_s32(0x3F2AAAE3u);
      float32x4_t v77 = (float32x4_t)vdupq_n_s32(0x3FDBA29Cu);
      uint64_t v78 = v17;
      do
      {
        float32x4_t v79 = vmulq_f32(vmulq_f32(*v74, vmlsq_f32(v76, *v73, a6)), vaddq_f32(*v73, v77));
        v75[-1] = vmulq_f32(vmulq_f32(v74[-1], vmlsq_f32(v76, v73[-1], a6)), vaddq_f32(v73[-1], v77));
        *unsigned int v75 = v79;
        v73 += 2;
        v74 += 2;
        v75 += 2;
        v78 -= 8;
      }
      while (v78);
      if (v17 != a4) {
        goto LABEL_58;
      }
      return a6.f32[0];
    case 4:
      unint64_t v18 = (int8x16_t *)*a1;
      *(_DWORD *)*a1 = -971227136;
      if ((int)a4 < 1) {
        return a6.f32[0];
      }
      uint64_t v19 = 0;
      uint64_t v20 = *a2;
      if (a4 < 8) {
        goto LABEL_18;
      }
      if ((unint64_t)((char *)v18 - (char *)v20) < 0x20) {
        goto LABEL_18;
      }
      uint64_t v19 = a4 & 0xFFFFFFF8;
      unint64_t v21 = v20 + 1;
      uint64_t v22 = v18 + 1;
      __asm { FMOV            V0.4S, #1.0 }
      uint64_t v27 = v19;
      do
      {
        int8x16_t v28 = vbicq_s8(_Q0, (int8x16_t)vclezq_f32(*v21));
        v22[-1] = vbicq_s8(_Q0, (int8x16_t)vclezq_f32(v21[-1]));
        *uint64_t v22 = v28;
        v21 += 2;
        v22 += 2;
        v27 -= 8;
      }
      while (v27);
      if (v19 != a4)
      {
LABEL_18:
        uint64_t v29 = a4 - v19;
        uint64_t v30 = v19;
        uint64_t v31 = (float *)&v18->i32[v19];
        int v32 = &v20->f32[v30];
        do
        {
          float v33 = *v32++;
          if (v33 > 0.0) {
            float v34 = 1.0;
          }
          else {
            float v34 = 0.0;
          }
          *v31++ = v34;
          --v29;
        }
        while (v29);
      }
      float v35 = (float32x4_t *)*a3;
      if (a4 < 8
        || (v18 < (int8x16_t *)&v35->f32[a4] ? (_CF = v35 >= (float32x4_t *)((char *)v18 + 4 * a4)) : (_CF = 1), !_CF))
      {
        uint64_t v37 = 0;
LABEL_34:
        uint64_t v42 = a4 - v37;
        uint64_t v43 = v37;
        unint64_t v44 = &v35->f32[v43];
        unint64_t v45 = (float *)&v18->i32[v43];
        do
        {
          float v46 = *v44++;
          a6.f32[0] = v46 * *v45;
          *v45++ = a6.f32[0];
          --v42;
        }
        while (v42);
        return a6.f32[0];
      }
      uint64_t v37 = a4 & 0xFFFFFFF8;
      uint64_t v38 = (float32x4_t *)&v18[1];
      uint64_t v39 = v35 + 1;
      uint64_t v40 = v37;
      do
      {
        a6 = vmulq_f32(v39[-1], v38[-1]);
        float32x4_t v41 = vmulq_f32(*v39, *v38);
        v38[-1] = a6;
        *uint64_t v38 = v41;
        v38 += 2;
        v39 += 2;
        v40 -= 8;
      }
      while (v40);
      if (v37 != a4) {
        goto LABEL_34;
      }
      return a6.f32[0];
    default:
      return a6.f32[0];
  }
}

void *sub_19E1D12D0(void *a1)
{
  *a1 = &unk_1EF0A7A08;
  sub_19E1CEBA8((uint64_t)a1);
  uint64_t v2 = a1[53];
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 80))(v2);
    a1[53] = 0;
  }
  sub_19E3030E8((uint64_t)(a1 + 54));
  int v3 = (void *)a1[48];
  if (v3)
  {
    a1[49] = v3;
    operator delete(v3);
  }
  uint64_t v4 = a1[45];
  if (v4)
  {
    uint64_t v5 = a1[46];
    unsigned __int8 v6 = (void *)a1[45];
    if (v5 != v4)
    {
      uint64_t v7 = a1[46];
      do
      {
        uint64_t v9 = *(void **)(v7 - 24);
        v7 -= 24;
        int v8 = v9;
        if (v9)
        {
          *(void *)(v5 - 16) = v8;
          operator delete(v8);
        }
        uint64_t v5 = v7;
      }
      while (v7 != v4);
      unsigned __int8 v6 = (void *)a1[45];
    }
    a1[46] = v4;
    operator delete(v6);
  }
  int v10 = (void *)a1[42];
  if (v10)
  {
    a1[43] = v10;
    operator delete(v10);
  }
  unint64_t v11 = (void *)a1[39];
  if (v11)
  {
    a1[40] = v11;
    operator delete(v11);
  }
  uint64_t v12 = (void *)a1[36];
  if (v12)
  {
    a1[37] = v12;
    operator delete(v12);
  }
  uint64_t v13 = (void *)a1[33];
  if (v13)
  {
    a1[34] = v13;
    operator delete(v13);
  }
  sub_19E1C6038(a1 + 18);
  uint64_t v14 = (void *)a1[9];
  if (v14)
  {
    a1[10] = v14;
    operator delete(v14);
  }
  unint64_t v15 = (void *)a1[6];
  if (v15)
  {
    a1[7] = v15;
    operator delete(v15);
  }
  *a1 = &unk_1EF0A50F8;
  int v16 = (void *)a1[1];
  if (v16)
  {
    a1[2] = v16;
    operator delete(v16);
  }
  return a1;
}

uint64_t sub_19E1D1444(uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)a1 = &unk_1EF0A73A0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  uint64_t v5 = (const void *)*a2;
  uint64_t v4 = a2[1];
  int64_t v6 = v4 - *a2;
  if (v4 == *a2)
  {
    *(unsigned char *)(a1 + 41) = 0;
  }
  else
  {
    if (v6 < 0) {
      sub_19E13D694();
    }
    uint64_t v7 = (char *)operator new(v4 - *a2);
    *(void *)(a1 + 48) = v7;
    *(void *)(a1 + 56) = v7;
    int v8 = &v7[8 * (v6 >> 3)];
    *(void *)(a1 + 64) = v8;
    memcpy(v7, v5, v6);
    unint64_t v9 = 0;
    *(void *)(a1 + 56) = v8;
    *(unsigned char *)(a1 + 41) = 0;
    do
    {
      (*(void (**)(void))(**(void **)&v7[8 * v9] + 192))(*(void *)&v7[8 * v9]);
      ++v9;
      uint64_t v7 = *(char **)(a1 + 48);
    }
    while (v9 < (uint64_t)(*(void *)(a1 + 56) - (void)v7) >> 3);
  }
  *(_DWORD *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(*(void *)*a2 + 40);
  return a1;
}

void sub_19E1D1578(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    v1[7] = v5;
    operator delete(v5);
    void *v1 = v2;
    int64_t v6 = (void *)v1[1];
    if (!v6) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    void *v1 = v2;
    int64_t v6 = (void *)v1[1];
    if (!v6) {
      goto LABEL_3;
    }
  }
  v1[2] = v6;
  operator delete(v6);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E1D15C0(uint64_t a1)
{
  return (****(uint64_t (*****)(void))(a1 + 48))(**(void **)(a1 + 48));
}

uint64_t sub_19E1D15EC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 48) + 8))();
}

uint64_t sub_19E1D1618(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 56) - 8) + 16))();
}

uint64_t sub_19E1D1644(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 48) + 24))();
}

uint64_t sub_19E1D1670(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 56) - 8) + 32))();
}

uint64_t sub_19E1D169C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 56) - 8) + 40))();
}

uint64_t sub_19E1D16C8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 56) - 8) + 48))();
}

uint64_t sub_19E1D16F4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (*(void *)(a1 + 56) == v1) {
    return 0;
  }
  unint64_t v3 = 0;
  do
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(v1 + 8 * v3) + 56))(*(void *)(v1 + 8 * v3));
    if (result) {
      break;
    }
    ++v3;
    uint64_t v1 = *(void *)(a1 + 48);
  }
  while (v3 < (*(void *)(a1 + 56) - v1) >> 3);
  return result;
}

uint64_t sub_19E1D1774(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(result + 48);
  if (*(void *)(result + 56) != v4)
  {
    uint64_t v8 = result;
    unint64_t v9 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(v4 + 8 * v9) + 64))(*(void *)(v4 + 8 * v9), a2, a3, a4);
      ++v9;
      uint64_t v4 = *(void *)(v8 + 48);
    }
    while (v9 < (*(void *)(v8 + 56) - v4) >> 3);
  }
  return result;
}

uint64_t sub_19E1D1808(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(result + 48);
  if (*(void *)(result + 56) != v5)
  {
    uint64_t v10 = result;
    unint64_t v11 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(v5 + 8 * v11) + 72))(*(void *)(v5 + 8 * v11), a2, a3, a4, a5);
      ++v11;
      uint64_t v5 = *(void *)(v10 + 48);
    }
    while (v11 < (*(void *)(v10 + 56) - v5) >> 3);
  }
  return result;
}

uint64_t sub_19E1D18A4(uint64_t result, void *lpsrc, void *a3)
{
  uint64_t v3 = *(void *)(result + 48);
  if (*(void *)(result + 56) != v3)
  {
    uint64_t v6 = result;
    if (lpsrc)
    {
      unint64_t v7 = 0;
      do
      {
        uint64_t v8 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3ED8, 0);
        unint64_t v9 = __dynamic_cast(a3, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3ED8, 0);
        uint64_t result = (*(uint64_t (**)(void, void, void))(**(void **)(v3 + 8 * v7) + 80))(*(void *)(v3 + 8 * v7), *(void *)(v8[6] + 8 * v7), *(void *)(v9[6] + 8 * v7));
        ++v7;
        uint64_t v3 = *(void *)(v6 + 48);
      }
      while (v7 < (*(void *)(v6 + 56) - v3) >> 3);
    }
    else
    {
      unint64_t v10 = 0;
      do
      {
        unint64_t v11 = __dynamic_cast(a3, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3ED8, 0);
        uint64_t result = (*(uint64_t (**)(void, void, void))(**(void **)(v3 + 8 * v10) + 80))(*(void *)(v3 + 8 * v10), *(void *)(MEMORY[0x30] + 8 * v10), *(void *)(v11[6] + 8 * v10));
        ++v10;
        uint64_t v3 = *(void *)(v6 + 48);
      }
      while (v10 < (*(void *)(v6 + 56) - v3) >> 3);
    }
  }
  return result;
}

uint64_t sub_19E1D1A84(uint64_t result, void *lpsrc, void *a3)
{
  uint64_t v3 = *(void *)(result + 48);
  if (*(void *)(result + 56) != v3)
  {
    uint64_t v6 = result;
    if (lpsrc)
    {
      unint64_t v7 = 0;
      do
      {
        uint64_t v8 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3ED8, 0);
        unint64_t v9 = __dynamic_cast(a3, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3ED8, 0);
        uint64_t result = (*(uint64_t (**)(void, void, void))(**(void **)(v3 + 8 * v7) + 88))(*(void *)(v3 + 8 * v7), *(void *)(v8[6] + 8 * v7), *(void *)(v9[6] + 8 * v7));
        ++v7;
        uint64_t v3 = *(void *)(v6 + 48);
      }
      while (v7 < (*(void *)(v6 + 56) - v3) >> 3);
    }
    else
    {
      unint64_t v10 = 0;
      do
      {
        unint64_t v11 = __dynamic_cast(a3, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3ED8, 0);
        uint64_t result = (*(uint64_t (**)(void, void, void))(**(void **)(v3 + 8 * v10) + 88))(*(void *)(v3 + 8 * v10), *(void *)(MEMORY[0x30] + 8 * v10), *(void *)(v11[6] + 8 * v10));
        ++v10;
        uint64_t v3 = *(void *)(v6 + 48);
      }
      while (v10 < (*(void *)(v6 + 56) - v3) >> 3);
    }
  }
  return result;
}

uint64_t sub_19E1D1C64(uint64_t result, void *lpsrc)
{
  uint64_t v2 = *(void *)(result + 48);
  if (*(void *)(result + 56) != v2)
  {
    uint64_t v4 = result;
    unint64_t v5 = 0;
    do
    {
      uint64_t v6 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3ED8, 0);
      uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(v2 + 8 * v5) + 96))(*(void *)(v2 + 8 * v5), *(void *)(v6[6] + 8 * v5));
      ++v5;
      uint64_t v2 = *(void *)(v4 + 48);
    }
    while (v5 < (*(void *)(v4 + 56) - v2) >> 3);
  }
  return result;
}

uint64_t sub_19E1D1D40(uint64_t result, void *lpsrc)
{
  uint64_t v2 = *(void *)(result + 48);
  if (*(void *)(result + 56) != v2)
  {
    uint64_t v4 = result;
    unint64_t v5 = 0;
    do
    {
      uint64_t v6 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3ED8, 0);
      uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(v2 + 8 * v5) + 104))(*(void *)(v2 + 8 * v5), *(void *)(v6[6] + 8 * v5));
      ++v5;
      uint64_t v2 = *(void *)(v4 + 48);
    }
    while (v5 < (*(void *)(v4 + 56) - v2) >> 3);
  }
  return result;
}

uint64_t sub_19E1D1E1C(uint64_t result, float a2)
{
  uint64_t v2 = *(void *)(result + 48);
  if (*(void *)(result + 56) != v2)
  {
    uint64_t v4 = result;
    unint64_t v5 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(void, float))(**(void **)(v2 + 8 * v5) + 112))(*(void *)(v2 + 8 * v5), a2);
      ++v5;
      uint64_t v2 = *(void *)(v4 + 48);
    }
    while (v5 < (*(void *)(v4 + 56) - v2) >> 3);
  }
  return result;
}

uint64_t sub_19E1D1E98(uint64_t result, float a2)
{
  uint64_t v2 = *(void *)(result + 48);
  if (*(void *)(result + 56) != v2)
  {
    uint64_t v4 = result;
    unint64_t v5 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(void, float))(**(void **)(v2 + 8 * v5) + 120))(*(void *)(v2 + 8 * v5), a2);
      ++v5;
      uint64_t v2 = *(void *)(v4 + 48);
    }
    while (v5 < (*(void *)(v4 + 56) - v2) >> 3);
  }
  return result;
}

uint64_t sub_19E1D1F14(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 48);
  if (*(void *)(result + 56) != v2)
  {
    uint64_t v4 = result;
    unint64_t v5 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 8 * v5) + 128))(*(void *)(v2 + 8 * v5), a2);
      ++v5;
      uint64_t v2 = *(void *)(v4 + 48);
    }
    while (v5 < (*(void *)(v4 + 56) - v2) >> 3);
  }
  return result;
}

uint64_t sub_19E1D1F90(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(result + 48);
  if (*(void *)(result + 56) != v4)
  {
    uint64_t v8 = result;
    unint64_t v9 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(v4 + 8 * v9) + 136))(*(void *)(v4 + 8 * v9), a2, a3, a4);
      ++v9;
      uint64_t v4 = *(void *)(v8 + 48);
    }
    while (v9 < (*(void *)(v8 + 56) - v4) >> 3);
  }
  return result;
}

uint64_t sub_19E1D2024(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(result + 48);
  if (*(void *)(result + 56) != v4)
  {
    uint64_t v8 = result;
    unint64_t v9 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(v4 + 8 * v9) + 144))(*(void *)(v4 + 8 * v9), a2, a3, a4);
      ++v9;
      uint64_t v4 = *(void *)(v8 + 48);
    }
    while (v9 < (*(void *)(v8 + 56) - v4) >> 3);
  }
  return result;
}

uint64_t sub_19E1D20B8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 48);
  if (*(void *)(result + 56) != v3)
  {
    uint64_t v6 = result;
    unint64_t v7 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v3 + 8 * v7) + 152))(*(void *)(v3 + 8 * v7), a2, a3);
      ++v7;
      uint64_t v3 = *(void *)(v6 + 48);
    }
    while (v7 < (*(void *)(v6 + 56) - v3) >> 3);
  }
  return result;
}

uint64_t sub_19E1D213C(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 48);
  if (*(void *)(result + 56) != v1)
  {
    uint64_t v2 = result;
    unint64_t v3 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(void))(**(void **)(v1 + 8 * v3) + 160))(*(void *)(v1 + 8 * v3));
      ++v3;
      uint64_t v1 = *(void *)(v2 + 48);
    }
    while (v3 < (*(void *)(v2 + 56) - v1) >> 3);
  }
  return result;
}

uint64_t sub_19E1D21A8(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 48);
  if (*(void *)(result + 56) != v2)
  {
    uint64_t v4 = result;
    unint64_t v5 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 8 * v5) + 168))(*(void *)(v2 + 8 * v5), a2);
      ++v5;
      uint64_t v2 = *(void *)(v4 + 48);
    }
    while (v5 < (*(void *)(v4 + 56) - v2) >> 3);
  }
  return result;
}

uint64_t sub_19E1D2224(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 48);
  if (*(void *)(result + 56) != v2)
  {
    uint64_t v4 = result;
    unint64_t v5 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 8 * v5) + 176))(*(void *)(v2 + 8 * v5), a2);
      ++v5;
      uint64_t v2 = *(void *)(v4 + 48);
    }
    while (v5 < (*(void *)(v4 + 56) - v2) >> 3);
  }
  return result;
}

uint64_t sub_19E1D22A0(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 48);
  if (*(void *)(result + 56) != v1)
  {
    uint64_t v2 = result;
    unint64_t v3 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(void))(**(void **)(v1 + 8 * v3) + 184))(*(void *)(v1 + 8 * v3));
      ++v3;
      uint64_t v1 = *(void *)(v2 + 48);
    }
    while (v3 < (*(void *)(v2 + 56) - v1) >> 3);
  }
  return result;
}

uint64_t sub_19E1D230C(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 48);
  if (*(void *)(result + 56) != v1)
  {
    uint64_t v2 = result;
    unint64_t v3 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(void))(**(void **)(v1 + 8 * v3) + 192))(*(void *)(v1 + 8 * v3));
      ++v3;
      uint64_t v1 = *(void *)(v2 + 48);
    }
    while (v3 < (*(void *)(v2 + 56) - v1) >> 3);
  }
  return result;
}

uint64_t sub_19E1D2378(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 48);
  if (*(void *)(result + 56) != v1)
  {
    uint64_t v2 = result;
    unint64_t v3 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(void))(**(void **)(v1 + 8 * v3) + 200))(*(void *)(v1 + 8 * v3));
      ++v3;
      uint64_t v1 = *(void *)(v2 + 48);
    }
    while (v3 < (*(void *)(v2 + 56) - v1) >> 3);
  }
  return result;
}

uint64_t sub_19E1D23E4(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 48);
  if (*(void *)(result + 56) != v1)
  {
    uint64_t v2 = result;
    unint64_t v3 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(void))(**(void **)(v1 + 8 * v3) + 208))(*(void *)(v1 + 8 * v3));
      ++v3;
      uint64_t v1 = *(void *)(v2 + 48);
    }
    while (v3 < (*(void *)(v2 + 56) - v1) >> 3);
  }
  return result;
}

uint64_t sub_19E1D2450(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 48) + 264))();
}

uint64_t sub_19E1D2484(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 56) - 8) + 272))();
}

uint64_t sub_19E1D24B8(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 48);
  if (*(void *)(result + 56) != v2)
  {
    uint64_t v4 = result;
    unint64_t v5 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 8 * v5) + 280))(*(void *)(v2 + 8 * v5), a2);
      ++v5;
      uint64_t v2 = *(void *)(v4 + 48);
    }
    while (v5 < (*(void *)(v4 + 56) - v2) >> 3);
  }
  return result;
}

uint64_t sub_19E1D253C(uint64_t result, float a2, float a3)
{
  uint64_t v3 = *(void *)(result + 48);
  if (*(void *)(result + 56) != v3)
  {
    uint64_t v6 = result;
    unint64_t v7 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(void, float, float))(**(void **)(v3 + 8 * v7) + 288))(*(void *)(v3 + 8 * v7), a2, a3);
      ++v7;
      uint64_t v3 = *(void *)(v6 + 48);
    }
    while (v7 < (*(void *)(v6 + 56) - v3) >> 3);
  }
  return result;
}

uint64_t sub_19E1D25C8(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 48);
  unint64_t v2 = (unint64_t)(*(void *)(result + 56) - v1) >> 3;
  unint64_t v3 = (v2 - 1);
  if ((int)v2 - 1 >= 0)
  {
    uint64_t v4 = result;
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(v1 + 8 * v3) + 296))(*(void *)(v1 + 8 * v3));
    if (v3)
    {
      do
      {
        uint64_t v5 = *(void *)(*(void *)(v4 + 48) + 8 * v3);
        (*(void (**)(uint64_t))(*(void *)v5 + 48))(v5);
        uint64_t result = (*(uint64_t (**)(void))(**(void **)(*(void *)(v4 + 48) + 8 * v3 - 8) + 296))();
      }
      while (v3-- > 1);
    }
  }
  return result;
}

uint64_t sub_19E1D26D8(uint64_t result)
{
  uint64_t v1 = *(void **)(result + 48);
  if (*(void **)(result + 56) != v1)
  {
    uint64_t v2 = result;
    uint64_t result = (*(uint64_t (**)(void))(*(void *)*v1 + 304))(*v1);
    uint64_t v3 = *(void *)(v2 + 48);
    if ((unint64_t)(*(void *)(v2 + 56) - v3) >= 9)
    {
      uint64_t v4 = 0;
      do
      {
        (*(void (**)(void))(**(void **)(v3 + 8 * v4) + 32))(*(void *)(v3 + 8 * v4));
        uint64_t result = (*(uint64_t (**)(void))(**(void **)(*(void *)(v2 + 48) + 8 * v4 + 8) + 304))();
        uint64_t v3 = *(void *)(v2 + 48);
        unint64_t v5 = v4 + 2;
        ++v4;
      }
      while (v5 < (*(void *)(v2 + 56) - v3) >> 3);
    }
  }
  return result;
}

uint64_t sub_19E1D2814(uint64_t result)
{
  uint64_t v1 = *(void **)(result + 48);
  if (*(void **)(result + 56) != v1)
  {
    uint64_t v2 = result;
    uint64_t result = (*(uint64_t (**)(void))(*(void *)*v1 + 312))(*v1);
    uint64_t v3 = *(void *)(v2 + 48);
    if ((unint64_t)(*(void *)(v2 + 56) - v3) >= 9)
    {
      uint64_t v4 = 0;
      do
      {
        (*(void (**)(void))(**(void **)(v3 + 8 * v4) + 32))(*(void *)(v3 + 8 * v4));
        uint64_t result = (*(uint64_t (**)(void))(**(void **)(*(void *)(v2 + 48) + 8 * v4 + 8) + 312))();
        uint64_t v3 = *(void *)(v2 + 48);
        unint64_t v5 = v4 + 2;
        ++v4;
      }
      while (v5 < (*(void *)(v2 + 56) - v3) >> 3);
    }
  }
  return result;
}

uint64_t sub_19E1D2948(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 48);
  unint64_t v2 = (unint64_t)(*(void *)(result + 56) - v1) >> 3;
  unint64_t v3 = (v2 - 1);
  if ((int)v2 - 1 >= 0)
  {
    uint64_t v4 = result;
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(v1 + 8 * v3) + 320))(*(void *)(v1 + 8 * v3));
    if (v3)
    {
      do
      {
        uint64_t v5 = *(void *)(*(void *)(v4 + 48) + 8 * v3);
        (*(void (**)(uint64_t))(*(void *)v5 + 48))(v5);
        uint64_t result = (*(uint64_t (**)(void))(**(void **)(*(void *)(v4 + 48) + 8 * v3 - 8) + 320))();
      }
      while (v3-- > 1);
    }
  }
  return result;
}

void *sub_19E1D2A58(uint64_t a1, void *lpsrc)
{
  uint64_t result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3ED8, 0);
  if (!result) {
    __cxa_bad_cast();
  }
  uint64_t v4 = *(void *)(a1 + 48);
  if (*(void *)(a1 + 56) != v4)
  {
    uint64_t v5 = (uint64_t)result;
    unint64_t v6 = 0;
    do
    {
      uint64_t result = (void *)(*(uint64_t (**)(void, void))(**(void **)(v4 + 8 * v6) + 328))(*(void *)(v4 + 8 * v6), *(void *)(*(void *)(v5 + 48) + 8 * v6));
      ++v6;
      uint64_t v4 = *(void *)(a1 + 48);
    }
    while (v6 < (*(void *)(a1 + 56) - v4) >> 3);
  }
  return result;
}

void *sub_19E1D2B34(uint64_t a1, void *lpsrc, uint64_t a3, float a4, float a5)
{
  uint64_t result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3ED8, 0);
  if (!result) {
    __cxa_bad_cast();
  }
  uint64_t v11 = (uint64_t)result;
  if (*(float *)(a1 + 32) != a4) {
    *(float *)(a1 + 32) = a4;
  }
  if (*((float *)lpsrc + 8) != a4) {
    *((float *)lpsrc + 8) = a4;
  }
  uint64_t v12 = *(void *)(a1 + 48);
  if (*(void *)(a1 + 56) != v12)
  {
    unint64_t v13 = 0;
    do
    {
      uint64_t result = (void *)(*(uint64_t (**)(void, void, uint64_t, float, float))(**(void **)(v12 + 8 * v13)
                                                                                        + 336))(*(void *)(v12 + 8 * v13), *(void *)(*(void *)(v11 + 48) + 8 * v13), a3, a4, a5);
      ++v13;
      uint64_t v12 = *(void *)(a1 + 48);
    }
    while (v13 < (*(void *)(a1 + 56) - v12) >> 3);
  }
  return result;
}

uint64_t sub_19E1D2C50(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 56) - 8) + 344))();
}

uint64_t sub_19E1D2C84(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 56) - 8) + 352))();
}

void *sub_19E1D2CB8(void *a1)
{
  *a1 = &unk_1EF0A73A0;
  uint64_t v4 = a1 + 6;
  unint64_t v2 = (void *)a1[6];
  unint64_t v3 = (void *)v4[1];
  if (v3 == v2)
  {
    unint64_t v2 = v3;
  }
  else
  {
    unint64_t v5 = 0;
    do
    {
      uint64_t v6 = v2[v5];
      if (v6)
      {
        (*(void (**)(void))(*(void *)v6 + 368))(v2[v5]);
        unint64_t v2 = (void *)a1[6];
        unint64_t v3 = (void *)a1[7];
      }
      ++v5;
    }
    while (v5 < v3 - v2);
  }
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  *a1 = &unk_1EF0A50F8;
  unint64_t v7 = (void *)a1[1];
  if (v7)
  {
    a1[2] = v7;
    operator delete(v7);
  }
  return a1;
}

void sub_19E1D2D98(char *__p)
{
  *(void *)std::string __p = &unk_1EF0A73A0;
  uint64_t v4 = __p + 48;
  unint64_t v2 = (void *)*((void *)__p + 6);
  unint64_t v3 = (void *)*((void *)v4 + 1);
  if (v3 == v2)
  {
    unint64_t v2 = v3;
  }
  else
  {
    unint64_t v5 = 0;
    do
    {
      uint64_t v6 = v2[v5];
      if (v6)
      {
        (*(void (**)(void))(*(void *)v6 + 368))(v2[v5]);
        unint64_t v2 = (void *)*((void *)__p + 6);
        unint64_t v3 = (void *)*((void *)__p + 7);
      }
      ++v5;
    }
    while (v5 < v3 - v2);
  }
  if (v2)
  {
    *((void *)__p + 7) = v2;
    operator delete(v2);
  }
  *(void *)std::string __p = &unk_1EF0A50F8;
  unint64_t v7 = (void *)*((void *)__p + 1);
  if (v7)
  {
    *((void *)__p + 2) = v7;
    operator delete(v7);
  }

  operator delete(__p);
}

uint64_t sub_19E1D2E88(uint64_t a1, int a2, int a3, int a4, int a5, char a6, char a7, char a8, uint64_t a9)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF0A55E8;
  *(_DWORD *)(a1 + 44) = a2;
  *(_DWORD *)(a1 + 48) = a3;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  sub_19E3030A0(a1 + 296);
  *(_DWORD *)(a1 + 368) = a5;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 376) = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 192))(a1);
  *(unsigned char *)(a1 + 232) = 0;
  *(unsigned char *)(a1 + 41) = 0;
  *(_DWORD *)(a1 + 208) = a4;
  *(void *)(a1 + 240) = a9;
  *(unsigned char *)(a1 + 40) = a8;
  *(unsigned char *)(a1 + 60) = a6;
  *(unsigned char *)(a1 + 61) = a7;
  std::string __p = operator new(0x20uLL);
  long long v17 = xmmword_19E351410;
  strcpy((char *)__p, "RecurrentLayer from Constructor");
  (*(void (**)(uint64_t, void **, void, float))(*(void *)a1 + 392))(a1, &__p, 0, -0.44);
  if (SHIBYTE(v17) < 0) {
    operator delete(__p);
  }
  return a1;
}

void sub_19E1D303C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_19E3030E8(v17);
  uint64_t v20 = (void *)v15[34];
  if (v20)
  {
    v15[35] = v20;
    operator delete(v20);
    unint64_t v21 = *v18;
    if (!*v18)
    {
LABEL_5:
      uint64_t v22 = (void *)v15[23];
      if (!v22) {
        goto LABEL_6;
      }
      goto LABEL_14;
    }
  }
  else
  {
    unint64_t v21 = *v18;
    if (!*v18) {
      goto LABEL_5;
    }
  }
  v15[32] = v21;
  operator delete(v21);
  uint64_t v22 = (void *)v15[23];
  if (!v22)
  {
LABEL_6:
    unint64_t v23 = (void *)v15[20];
    if (!v23) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  v15[24] = v22;
  operator delete(v22);
  unint64_t v23 = (void *)v15[20];
  if (!v23)
  {
LABEL_7:
    unint64_t v24 = (void *)v15[17];
    if (!v24) {
      goto LABEL_8;
    }
    goto LABEL_16;
  }
LABEL_15:
  v15[21] = v23;
  operator delete(v23);
  unint64_t v24 = (void *)v15[17];
  if (!v24)
  {
LABEL_8:
    uint64_t v25 = (void *)v15[14];
    if (!v25) {
      goto LABEL_9;
    }
    goto LABEL_17;
  }
LABEL_16:
  v15[18] = v24;
  operator delete(v24);
  uint64_t v25 = (void *)v15[14];
  if (!v25)
  {
LABEL_9:
    uint64_t v26 = (void *)v15[11];
    if (!v26) {
      goto LABEL_10;
    }
    goto LABEL_18;
  }
LABEL_17:
  v15[15] = v25;
  operator delete(v25);
  uint64_t v26 = (void *)v15[11];
  if (!v26)
  {
LABEL_10:
    *unint64_t v15 = v16;
    uint64_t v27 = (void *)v15[1];
    if (!v27) {
      goto LABEL_11;
    }
    goto LABEL_19;
  }
LABEL_18:
  v15[12] = v26;
  operator delete(v26);
  *unint64_t v15 = v16;
  uint64_t v27 = (void *)v15[1];
  if (!v27) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_19:
  v15[2] = v27;
  operator delete(v27);
  _Unwind_Resume(a1);
}

void sub_19E1D313C()
{
}

uint64_t sub_19E1D3150(uint64_t a1)
{
  return a1 + 88;
}

uint64_t sub_19E1D3158(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_19E1D3160(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 376))();
}

uint64_t sub_19E1D318C(uint64_t a1)
{
  return a1 + 136;
}

uint64_t sub_19E1D3194()
{
  return 0;
}

unsigned char *sub_19E1D319C(uint64_t a1, uint64_t a2, int *a3, int a4)
{
  if (!a2) {
LABEL_17:
  }
    sub_19E2F6320(3);
  int v6 = *(_DWORD *)(a2 + 72);
  uint64_t v7 = *(void *)a2;
  uint64_t v8 = (int *)(*(void *)a2 + v6);
  unint64_t v9 = *(void *)a2 + *(void *)(a2 + 8) - 4;
  if ((unint64_t)v8 > v9)
  {
    int v10 = 0;
    uint64_t v11 = (int *)(v7 + v6);
    if ((unint64_t)v11 <= v9) {
      goto LABEL_4;
    }
LABEL_7:
    int v12 = 0;
    if (a4 < 1) {
      goto LABEL_12;
    }
    goto LABEL_8;
  }
  int v10 = *v8;
  v6 += 4;
  *(_DWORD *)(a2 + 72) = v6;
  uint64_t v11 = (int *)(v7 + v6);
  if ((unint64_t)v11 > v9) {
    goto LABEL_7;
  }
LABEL_4:
  int v12 = *v11;
  v6 += 4;
  *(_DWORD *)(a2 + 72) = v6;
  if (a4 < 1) {
    goto LABEL_12;
  }
LABEL_8:
  unint64_t v13 = (int *)(v7 + v6);
  if ((unint64_t)v13 <= v9)
  {
    int v14 = *v13;
    *(_DWORD *)(a2 + 72) = v6 + 4;
  }
  else
  {
    int v14 = 0;
  }
  *(_DWORD *)(a1 + 208) = v14;
LABEL_12:
  if (*(_DWORD *)(a1 + 48) != v10 || *(_DWORD *)(a1 + 52) != v12) {
    goto LABEL_17;
  }
  unint64_t v15 = *(unsigned char **)(a1 + 376);
  int v16 = *a3;
  int v17 = *(unsigned __int8 *)(a1 + 61);
  int v18 = sub_19E2F62F8();
  int v19 = *(_DWORD *)(a1 + 48);
  int v20 = *(_DWORD *)(a1 + 52);

  return sub_19E1C632C(v15, (uint64_t *)a2, v16, v17, v18, v19, v20);
}

uint64_t sub_19E1D32C4(uint64_t a1, FILE *__stream, int *a3, int a4, unsigned int a5)
{
  if (!__stream) {
    sub_19E2F6320(3);
  }
  int v10 = *(_DWORD *)(a1 + 52);
  sub_19E2F6788(__stream, a3, *(_DWORD *)(a1 + 48));
  sub_19E2F6788(__stream, a3, v10);
  if (a4 >= 1) {
    sub_19E2F6788(__stream, a3, *(_DWORD *)(a1 + 208));
  }
  uint64_t v11 = *(void *)(a1 + 376);
  int v12 = sub_19E2F62F8();

  return sub_19E1C6648(v11, __stream, a3, 3, v12, a5);
}

void *sub_19E1D3380(uint64_t a1, void *lpsrc, const void *a3)
{
  if (lpsrc)
  {
    unint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3C88, 0);
    if (a3) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = 0;
    uint64_t v7 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 48));
    if ((int)v7 < 1) {
      return result;
    }
    goto LABEL_7;
  }
  unint64_t v5 = 0;
  if (!a3) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t result = __dynamic_cast(a3, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3C88, 0);
  uint64_t v7 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 48));
  if ((int)v7 < 1) {
    return result;
  }
LABEL_7:
  uint64_t v8 = (int16x8_t *)result[8];
  unint64_t v9 = (int16x8_t *)v5[8];
  int v10 = **(int16x8_t ***)(a1 + 376);
  if (v7 < 0x10)
  {
    uint64_t v11 = 0;
LABEL_14:
    uint64_t v17 = v7 - v11;
    uint64_t v18 = v11;
    int v19 = &v10->i16[v18];
    int v20 = &v9->i16[v18];
    unint64_t v21 = &v8->i16[v18];
    do
    {
      __int16 v23 = *v21++;
      __int16 v22 = v23;
      __int16 v24 = *v20++;
      *v19++ = v22 - v24;
      --v17;
    }
    while (v17);
    return result;
  }
  uint64_t v11 = 0;
  if ((unint64_t)((char *)v10 - (char *)v8) < 0x20) {
    goto LABEL_14;
  }
  if ((unint64_t)((char *)v10 - (char *)v9) < 0x20) {
    goto LABEL_14;
  }
  uint64_t v11 = v7 & 0x7FFFFFF0;
  int v12 = v8 + 1;
  unint64_t v13 = v9 + 1;
  int v14 = v10 + 1;
  uint64_t v15 = v7 & 0xFFFFFFF0;
  do
  {
    int16x8_t v16 = vsubq_s16(*v12, *v13);
    v14[-1] = vsubq_s16(v12[-1], v13[-1]);
    *int v14 = v16;
    v12 += 2;
    v13 += 2;
    v14 += 2;
    v15 -= 16;
  }
  while (v15);
  if (v11 != v7) {
    goto LABEL_14;
  }
  return result;
}

void sub_19E1D3520(int a1, void *lpsrc, const void *a3)
{
  if (lpsrc) {
    __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3C88, 0);
  }
  if (a3)
  {
    __dynamic_cast(a3, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3C88, 0);
  }
}

void *sub_19E1D35EC(uint64_t a1, void *lpsrc)
{
  if (lpsrc)
  {
    uint64_t result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3C88, 0);
    uint64_t v4 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 48));
    if ((int)v4 < 1) {
      return result;
    }
  }
  else
  {
    uint64_t result = 0;
    uint64_t v4 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 48));
    if ((int)v4 < 1) {
      return result;
    }
  }
  unint64_t v5 = **(void **)(a1 + 376);
  unint64_t v6 = result[8];
  if (v4 < 0x10 || (v5 < v6 + 2 * v4 ? (BOOL v7 = v6 >= v5 + 2 * v4) : (BOOL v7 = 1), !v7))
  {
    uint64_t v8 = 0;
LABEL_16:
    uint64_t v13 = v4 - v8;
    uint64_t v14 = 2 * v8;
    uint64_t v15 = (__int16 *)(v6 + v14);
    int16x8_t v16 = (_WORD *)(v5 + v14);
    do
    {
      __int16 v17 = *v15++;
      *v16++ += v17;
      --v13;
    }
    while (v13);
    return result;
  }
  uint64_t v8 = v4 & 0x7FFFFFF0;
  unint64_t v9 = (int16x8_t *)(v5 + 16);
  int v10 = (int16x8_t *)(v6 + 16);
  uint64_t v11 = v4 & 0xFFFFFFF0;
  do
  {
    int16x8_t v12 = vaddq_s16(*v10, *v9);
    v9[-1] = vaddq_s16(v10[-1], v9[-1]);
    *unint64_t v9 = v12;
    v9 += 2;
    v10 += 2;
    v11 -= 16;
  }
  while (v11);
  if (v8 != v4) {
    goto LABEL_16;
  }
  return result;
}

void sub_19E1D3724()
{
}

void sub_19E1D389C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_19E1D38B0(uint64_t a1, uint64_t *a2, int a3, int *a4)
{
  uint64_t v5 = *(int *)(a1 + 48);
  uint64_t v6 = *a2;
  *(_DWORD *)(v6 + 16 * *a4) = v5;
  uint64_t result = memmove(**(void ***)(v6 + 16 * *a4 + 8), *(const void **)(*(void *)(a1 + 112) + 8 * a3), 4 * v5);
  ++*a4;
  return result;
}

void *sub_19E1D3914(uint64_t a1, void *a2, int a3, int *a4)
{
  uint64_t v4 = *(void *)(a1 + 112);
  uint64_t v5 = *a4;
  *a4 = v5 + 1;
  return memmove(*(void **)(v4 + 8 * a3), **(const void ***)(*a2 + 16 * v5 + 8), 4 * *(int *)(a1 + 48));
}

void sub_19E1D3948(uint64_t a1, void *a2, int *a3)
{
  uint64_t v4 = (int *)(*a2 + 16 * *a3);
  bzero(**((void ***)v4 + 1), 4 * *v4);
  ++*a3;
}

void sub_19E1D3998(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = **(void **)(a1 + 376);
  int v5 = *(_DWORD *)(a1 + 48);
  int v4 = *(_DWORD *)(a1 + 52);
  BOOL v7 = *(void **)(a2 + 8);
  unint64_t v6 = *(void *)(a2 + 16);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = *(void **)a2;
    uint64_t v10 = (uint64_t)v7 - *(void *)a2;
    unint64_t v11 = (v10 >> 4) + 1;
    if (v11 >> 60) {
      sub_19E13D694();
    }
    uint64_t v12 = v6 - (void)v9;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    BOOL v13 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
    if (!v13) {
      unint64_t v14 = v11;
    }
    if (v14 >> 60) {
      sub_19E13C418();
    }
    uint64_t v15 = 16 * v14;
    int16x8_t v16 = (char *)operator new(16 * v14);
    __int16 v17 = &v16[16 * (v10 >> 4)];
    uint64_t v18 = &v16[v15];
    *(void *)__int16 v17 = v3;
    uint64_t v8 = v17 + 16;
    int v19 = &v16[v10];
    *((_DWORD *)v19 + 2) = v5;
    for (*((_DWORD *)v19 + 3) = v4; v7 != v9; *((void *)v17 + 1) = v7[1])
    {
      uint64_t v20 = *(v7 - 2);
      v7 -= 2;
      *((void *)v17 - 2) = v20;
      v17 -= 16;
    }
    *(void *)a2 = v17;
    *(void *)(a2 + 8) = v8;
    *(void *)(a2 + 16) = v18;
    if (v9) {
      operator delete(v9);
    }
  }
  else
  {
    void *v7 = v3;
    uint64_t v8 = v7 + 2;
    *((_DWORD *)v7 + 2) = v5;
    *((_DWORD *)v7 + 3) = v4;
  }
  *(void *)(a2 + 8) = v8;
}

uint64_t sub_19E1D3AA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(v2 - 16);
  *(void *)(a2 + 8) = v2 - 16;
  *(void *)(a1 + 64) = v3;
  uint64_t result = a1 + 64;
  *(void *)(result + 312) = result;
  return result;
}

uint64_t sub_19E1D3AC0(uint64_t result)
{
  *(unsigned char *)(result + 42) = 1;
  return result;
}

uint64_t sub_19E1D3ACC(uint64_t result)
{
  *(unsigned char *)(result + 42) = 0;
  return result;
}

void sub_19E1D3AD4(uint64_t a1)
{
  std::string __p = operator new(0x20uLL);
  long long v3 = xmmword_19E3513E0;
  strcpy((char *)__p, "RecurrentLayer from allocAll");
  (*(void (**)(uint64_t, void **, void, float))(*(void *)a1 + 392))(a1, &__p, 0, -0.44);
  if (SHIBYTE(v3) < 0) {
    operator delete(__p);
  }
}

void sub_19E1D3BA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E1D3BBC(void *a1)
{
  uint64_t v2 = a1[31];
  uint64_t v3 = a1[32];
  if (v3 == v2)
  {
    uint64_t v2 = a1[32];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      int v5 = *(void **)(v2 + 8 * v4);
      if (v5)
      {
        operator delete[](v5);
        uint64_t v2 = a1[31];
        uint64_t v3 = a1[32];
      }
      ++v4;
    }
    while (v4 < (v3 - v2) >> 3);
  }
  uint64_t v6 = a1[34];
  uint64_t v7 = a1[35];
  if (v7 == v6)
  {
    a1[32] = v2;
    a1[35] = v7;
  }
  else
  {
    unint64_t v8 = 0;
    do
    {
      unint64_t v9 = *(void **)(v6 + 8 * v8);
      if (v9)
      {
        operator delete[](v9);
        uint64_t v6 = a1[34];
        uint64_t v7 = a1[35];
      }
      ++v8;
    }
    while (v8 < (v7 - v6) >> 3);
    a1[32] = a1[31];
    a1[35] = v6;
  }
}

uint64_t sub_19E1D3C70(uint64_t a1)
{
  return *(_DWORD *)(a1 + 44) + *(unsigned __int8 *)(a1 + 40);
}

uint64_t sub_19E1D3C80(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_19E1D3C8C(uint64_t result, float a2, __n128 a3)
{
  uint64_t v3 = *(unsigned int *)(result + 56);
  if ((int)v3 >= 1)
  {
    uint64_t v4 = *(void *)(result + 64);
    uint64_t v5 = *(void *)(result + 80);
    float v6 = truncf(a2);
    if (v3 < 8)
    {
      uint64_t v7 = 0;
LABEL_7:
      uint64_t v13 = v3 - v7;
      unint64_t v14 = (float *)(v5 + 4 * v7);
      uint64_t v15 = (unsigned __int16 *)(v4 + 2 * v7);
      do
      {
        a3.n128_u16[0] = *v15;
        a3.n128_u64[0] = vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
        float v16 = *v14++;
        a3.n128_f32[0] = (float)a3.n128_i32[0] + (float)(v16 * v6);
        *v15++ = (int)a3.n128_f32[0];
        --v13;
      }
      while (v13);
      return result;
    }
    uint64_t v7 = v3 & 0x7FFFFFF8;
    uint64_t v8 = v3 & 0xFFFFFFF8;
    unint64_t v9 = *(float32x4_t **)(result + 80);
    uint64_t v10 = *(int16x4_t **)(result + 64);
    do
    {
      float32x4_t v11 = *v9;
      float32x4_t v12 = v9[1];
      v9 += 2;
      a3 = (__n128)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmlaq_n_f32(vcvtq_f32_s32(vmovl_s16(*v10)), v11, v6)), (int16x8_t)vcvtq_s32_f32(vmlaq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v10->i8)), v12, v6)));
      *(__n128 *)v10->i8 = a3;
      v10 += 2;
      v8 -= 8;
    }
    while (v8);
    if (v7 != v3) {
      goto LABEL_7;
    }
  }
  return result;
}

void sub_19E1D3D38(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, int a5)
{
  char v8 = (**(uint64_t (***)(uint64_t))a1)(a1);
  if (a5 >= 1 && (v8 & 1) == 0)
  {
    if (*(unsigned char *)(a1 + 232)) {
      int v10 = 0;
    }
    else {
      int v10 = a5 - 1;
    }
    sub_19E1D0E88((void **)(a1 + 216), (float32x4_t **)(*(void *)(a1 + 184) + 8 * v10), (const void **)(*a4 + 8 * v10), *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 208), v9);
    sub_19E1C7A94();
  }
  bzero(*(void **)(a1 + 80), 4 * *(int *)(a1 + 56));
  if (a5 >= 1)
  {
    global_queue = dispatch_get_global_queue(0, 0);
    int v12 = 0;
    uint64_t v13 = MEMORY[0x1E4F143A8];
    do
    {
      --a5;
      if (*(unsigned char *)(a1 + 232)) {
        int v14 = v12;
      }
      else {
        int v14 = a5;
      }
      uint64_t v15 = 8 * v14;
      uint64_t v16 = *(void *)(a1 + 80);
      uint64_t v17 = *(void *)(a1 + 88) + v15;
      uint64_t v18 = *a4 + v15;
      int v19 = *(_DWORD *)(a1 + 52);
      size_t v20 = *(int *)(a1 + 48);
      v21[0] = v13;
      v21[1] = 0x40000000;
      _OWORD v21[2] = sub_19E1C7E74;
      v21[3] = &unk_1E599D040;
      int v22 = v19;
      v21[4] = v16;
      v21[5] = v18;
      v21[6] = v17;
      dispatch_apply(v20, global_queue, v21);
      if (*(unsigned char *)(a1 + 40)) {
        *(_DWORD *)(*(void *)(*(void *)(a1 + 136) + 8 * v14) + 4 * *(int *)(a1 + 52) - 4) = 1065353216;
      }
      ++v12;
    }
    while (a5 > 0);
  }
}

uint64_t sub_19E1D3F78(uint64_t result, void *a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(result + 240);
  if (v5)
  {
    if (*(unsigned char *)(v5 + 20) || *(_DWORD *)(v5 + 40) != 1)
    {
      BOOL v6 = 0;
      int v7 = *(unsigned __int8 *)(result + 232);
      if (!a5) {
        goto LABEL_10;
      }
    }
    else
    {
      BOOL v6 = *(_DWORD *)(v5 + 44) == 1;
      int v7 = *(unsigned __int8 *)(result + 232);
      if (!a5) {
        goto LABEL_10;
      }
    }
  }
  else
  {
    BOOL v6 = 1;
    int v7 = *(unsigned __int8 *)(result + 232);
    if (!a5) {
      goto LABEL_10;
    }
  }
  if (v7) {
    sub_19E2F6320(34);
  }
LABEL_10:
  int v8 = a4 & 0xFFFFFF;
  unsigned int v9 = a5 != 0;
  if ((a4 & 0xFFFFFFu) > v9)
  {
    BOOL v45 = v6;
    if (v7) {
      signed int v11 = v8 + ~v9;
    }
    else {
      signed int v11 = a5 != 0;
    }
    BOOL v12 = v11 < v8 - 1;
    if (v7) {
      int v13 = 1;
    }
    else {
      int v13 = -1;
    }
    if (v7) {
      BOOL v14 = v12;
    }
    else {
      BOOL v14 = a5 != 0;
    }
    uint64_t v15 = 8 * v11;
    uint64_t v16 = result;
    bzero(*(void **)(*(void *)(result + 88) + v15), 4 * *(int *)(result + 52));
    uint64_t v17 = (uint64_t *)(*(void *)(v16 + 88) + v15);
    uint64_t v18 = *(unsigned int *)(v16 + 44);
    if ((int)v18 >= 1)
    {
      uint64_t v19 = 0;
      uint64_t v20 = *(void *)(*a2 + 8 * v11);
      uint64_t v21 = *v17;
      if (v18 < 8) {
        goto LABEL_28;
      }
      if ((unint64_t)(v21 - v20) < 0x20) {
        goto LABEL_28;
      }
      uint64_t v19 = v18 & 0x7FFFFFF8;
      int v22 = (long long *)(v20 + 16);
      __int16 v23 = (_OWORD *)(v21 + 16);
      uint64_t v24 = v18 & 0xFFFFFFF8;
      do
      {
        long long v25 = *v22;
        *(v23 - 1) = *(v22 - 1);
        *__int16 v23 = v25;
        v22 += 2;
        v23 += 2;
        v24 -= 8;
      }
      while (v24);
      if (v19 != v18)
      {
LABEL_28:
        uint64_t v26 = v18 - v19;
        uint64_t v27 = 4 * v19;
        int8x16_t v28 = (_DWORD *)(v21 + 4 * v19);
        uint64_t v29 = (int *)(v20 + v27);
        do
        {
          int v30 = *v29++;
          *v28++ = v30;
          --v26;
        }
        while (v26);
      }
    }
    int v31 = v11 + v13;
    if (v45 && v14)
    {
      uint64_t v32 = *(unsigned int *)(v16 + 48);
      if ((int)v32 >= 1)
      {
        uint64_t v33 = *(void *)(*(void *)(v16 + 112) + 8 * v31);
        uint64_t v34 = *v17;
        if (v32 >= 8 && (uint64_t v35 = 4 * (int)v18 + v34, (unint64_t)(v35 - v33) >= 0x20))
        {
          uint64_t v36 = v32 & 0x7FFFFFF8;
          float32x4_t v41 = (long long *)(v33 + 16);
          uint64_t v42 = (_OWORD *)(v35 + 16);
          uint64_t v43 = v32 & 0xFFFFFFF8;
          do
          {
            long long v44 = *v41;
            *(v42 - 1) = *(v41 - 1);
            _OWORD *v42 = v44;
            v41 += 2;
            v42 += 2;
            v43 -= 8;
          }
          while (v43);
          if (v36 == v32) {
            goto LABEL_37;
          }
        }
        else
        {
          uint64_t v36 = 0;
        }
        uint64_t v37 = v32 - v36;
        uint64_t v38 = (_DWORD *)(v34 + 4 * (v36 + (int)v18));
        uint64_t v39 = (int *)(v33 + 4 * v36);
        do
        {
          int v40 = *v39++;
          *v38++ = v40;
          --v37;
        }
        while (v37);
      }
    }
LABEL_37:
    if (*(unsigned char *)(v16 + 40)) {
      *(_DWORD *)(*v17 + 4 * *(int *)(v16 + 52) - 4) = 1065353216;
    }
    sub_19E1C7A94();
  }
  return result;
}

char *sub_19E1D4234(uint64_t a1, void *lpsrc)
{
  if (*(_DWORD *)(a1 + 368) != 1) {
    sub_19E2F6320(1);
  }
  uint64_t result = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3C88, 0);
  if (!result) {
    __cxa_bad_cast();
  }
  *(void *)(a1 + 376) = result + 64;
  return result;
}

uint64_t sub_19E1D42C0(uint64_t a1, void *lpsrc, float a3)
{
  if (*(_DWORD *)(a1 + 368)) {
    sub_19E2F6320(1);
  }
  uint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3C88, 0);
  if (!v5) {
    __cxa_bad_cast();
  }
  BOOL v6 = v5;
  sub_19E303188(a1 + 296);
  uint64_t v8 = *(unsigned int *)(a1 + 56);
  if ((int)v8 >= 1)
  {
    uint64_t v9 = *(void *)(a1 + 64);
    uint64_t v10 = *((void *)v6 + 10);
    float v11 = truncf(a3);
    if (v8 < 8)
    {
      uint64_t v12 = 0;
LABEL_9:
      uint64_t v18 = v8 - v12;
      uint64_t v19 = (float *)(v10 + 4 * v12);
      uint64_t v20 = (__int16 *)(v9 + 2 * v12);
      do
      {
        v7.i16[0] = *v20;
        v7.i64[0] = vmovl_s16(*(int16x4_t *)v7.i8).u64[0];
        float v21 = *v19++;
        *(float *)v7.i32 = (float)v7.i32[0] + (float)(v21 * v11);
        *v20++ = (int)*(float *)v7.i32;
        --v18;
      }
      while (v18);
      goto LABEL_11;
    }
    uint64_t v12 = v8 & 0x7FFFFFF8;
    uint64_t v13 = v8 & 0xFFFFFFF8;
    BOOL v14 = (float32x4_t *)*((void *)v6 + 10);
    uint64_t v15 = *(int16x4_t **)(a1 + 64);
    do
    {
      float32x4_t v16 = *v14;
      float32x4_t v17 = v14[1];
      v14 += 2;
      int16x8_t v7 = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmlaq_n_f32(vcvtq_f32_s32(vmovl_s16(*v15)), v16, v11)), (int16x8_t)vcvtq_s32_f32(vmlaq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v15->i8)), v17, v11)));
      *(int16x8_t *)v15->i8 = v7;
      v15 += 2;
      v13 -= 8;
    }
    while (v13);
    if (v12 != v8) {
      goto LABEL_9;
    }
  }
LABEL_11:

  return sub_19E303190(a1 + 296);
}

uint64_t sub_19E1D4420(uint64_t result, uint64_t *a2, uint64_t *a3, int a4, int *a5)
{
  uint64_t v5 = (a4 - 1);
  if (a4 >= 1)
  {
    unint64_t v6 = *(unsigned int *)(result + 48);
    if ((int)v6 >= 1)
    {
      uint64_t v7 = *(void *)(result + 112);
      uint64_t v8 = *a2;
      uint64_t v9 = *a3;
      int v10 = *a5;
      do
      {
        if ((int)v6 >= 1)
        {
          int v12 = 0;
          uint64_t v13 = 0;
          float v14 = 1.1755e-38;
          do
          {
            float v15 = *(float *)(*(void *)(v7 + 8 * v5) + 4 * v13);
            if (v15 > v14) {
              int v12 = v13;
            }
            float v14 = fmaxf(v15, v14);
            ++v13;
          }
          while (v6 != v13);
          int v16 = 0;
          uint64_t v17 = 0;
          float v18 = 1.1755e-38;
          do
          {
            float v19 = *(float *)(*(void *)(v8 + 8 * v5) + 4 * v17);
            if (v19 > v18) {
              int v16 = v17;
            }
            float v18 = fmaxf(v19, v18);
            ++v17;
          }
          while (v6 != v17);
          if (v12 == v16)
          {
            unint64_t v6 = v6;
          }
          else
          {
            *a5 = ++v10;
            unint64_t v6 = *(unsigned int *)(result + 48);
            if ((int)v6 < 1) {
              continue;
            }
          }
          uint64_t v20 = *(float32x4_t **)(v8 + 8 * v5);
          float v21 = *(float32x4_t **)(v7 + 8 * v5);
          int v22 = *(float32x4_t **)(v9 + 8 * v5);
          if (v6 >= 8)
          {
            unint64_t v23 = 0;
            if ((unint64_t)((char *)v22 - (char *)v20) >= 0x20
              && (unint64_t)((char *)v22 - (char *)v21) >= 0x20)
            {
              unint64_t v23 = v6 & 0x7FFFFFF8;
              uint64_t v24 = v20 + 1;
              long long v25 = v21 + 1;
              uint64_t v26 = v22 + 1;
              uint64_t v27 = v6 & 0xFFFFFFF8;
              do
              {
                float32x4_t v28 = vsubq_f32(*v24, *v25);
                v26[-1] = vsubq_f32(v24[-1], v25[-1]);
                *uint64_t v26 = v28;
                v24 += 2;
                v25 += 2;
                v26 += 2;
                v27 -= 8;
              }
              while (v27);
              if (v23 == v6) {
                continue;
              }
            }
          }
          else
          {
            unint64_t v23 = 0;
          }
          uint64_t v29 = &v22->f32[v23];
          int v30 = &v21->f32[v23];
          int v31 = &v20->f32[v23];
          unint64_t v32 = v6 - v23;
          do
          {
            float v33 = *v31++;
            float v34 = v33;
            float v35 = *v30++;
            *v29++ = v34 - v35;
            --v32;
          }
          while (v32);
        }
      }
      while (v5-- > 0);
    }
  }
  return result;
}

float sub_19E1D45A0(uint64_t a1, uint64_t *a2, int a3)
{
  if (a3 < 1) {
    return 0.0;
  }
  uint64_t v3 = *(unsigned int *)(a1 + 48);
  uint64_t v4 = *(float ***)(a1 + 112);
  uint64_t v5 = a3;
  if ((int)v3 <= 0)
  {
    float v8 = 0.0;
    do
    {
      while (1)
      {
        float v14 = **v4;
        if (v14 <= 1.0e-10) {
          break;
        }
        float v8 = v8 - log2f(v14);
        ++v4;
        if (!--v5) {
          return v8;
        }
      }
      float v8 = v8 + 99.0;
      ++v4;
      --v5;
    }
    while (v5);
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a2;
    float v8 = 0.0;
    do
    {
      while (1)
      {
        int v9 = 0;
        uint64_t v10 = 0;
        float v11 = 1.1755e-38;
        do
        {
          float v12 = *(float *)(*(void *)(v7 + 8 * v6) + 4 * v10);
          if (v12 > v11) {
            int v9 = v10;
          }
          float v11 = fmaxf(v12, v11);
          ++v10;
        }
        while (v3 != v10);
        float v13 = v4[v6][v9];
        if (v13 <= 1.0e-10) {
          break;
        }
        float v8 = v8 - log2f(v13);
        if (++v6 == v5) {
          return v8;
        }
      }
      float v8 = v8 + 99.0;
      ++v6;
    }
    while (v6 != v5);
  }
  return v8;
}

void sub_19E1D46E4(void *a1)
{
  uint64_t v1 = sub_19E1D5630(a1);

  operator delete(v1);
}

uint64_t sub_19E1D470C(uint64_t a1)
{
  return a1 + 160;
}

float sub_19E1D4714(uint64_t a1, int a2, int a3)
{
  return *(float *)(*(void *)(*(void *)(a1 + 112) + 8 * a2) + 4 * a3);
}

void sub_19E1D4724(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 240);
  if (v1)
  {
    if (*(unsigned char *)(v1 + 20) || *(_DWORD *)(v1 + 40) != 1)
    {
      BOOL v2 = 0;
      if (!*(unsigned char *)(a1 + 42)) {
        goto LABEL_11;
      }
    }
    else
    {
      BOOL v2 = *(_DWORD *)(v1 + 44) == 1;
      if (!*(unsigned char *)(a1 + 42))
      {
LABEL_11:
        int v3 = *(_DWORD *)(a1 + 48);
        int v4 = *(_DWORD *)(a1 + 44) + *(unsigned __int8 *)(a1 + 40);
        *(_DWORD *)(a1 + 52) = v4;
        if (!v2)
        {
LABEL_9:
          *(_DWORD *)(a1 + 56) = v3 * v4;
          operator new[]();
        }
LABEL_8:
        v4 += v3;
        *(_DWORD *)(a1 + 52) = v4;
        goto LABEL_9;
      }
    }
  }
  else
  {
    BOOL v2 = 1;
    if (!*(unsigned char *)(a1 + 42)) {
      goto LABEL_11;
    }
  }
  int v3 = *(_DWORD *)(a1 + 48);
  int v4 = *(_DWORD *)(a1 + 44) + *(unsigned __int8 *)(a1 + 40);
  *(_DWORD *)(a1 + 52) = v4;
  if (!v2) {
    goto LABEL_9;
  }
  goto LABEL_8;
}

void *sub_19E1D5630(void *a1)
{
  *a1 = &unk_1EF0A55E8;
  uint64_t v2 = a1[31];
  uint64_t v3 = a1[32];
  if (v3 == v2)
  {
    uint64_t v2 = a1[32];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void **)(v2 + 8 * v4);
      if (v5)
      {
        operator delete[](v5);
        uint64_t v2 = a1[31];
        uint64_t v3 = a1[32];
      }
      ++v4;
    }
    while (v4 < (v3 - v2) >> 3);
  }
  uint64_t v6 = a1[34];
  uint64_t v7 = a1[35];
  if (v7 == v6)
  {
    a1[32] = v2;
    a1[35] = v7;
    sub_19E3030E8((uint64_t)(a1 + 37));
    uint64_t v10 = (void *)a1[34];
    if (v10)
    {
LABEL_13:
      a1[35] = v10;
      operator delete(v10);
    }
  }
  else
  {
    unint64_t v8 = 0;
    do
    {
      int v9 = *(void **)(v6 + 8 * v8);
      if (v9)
      {
        operator delete[](v9);
        uint64_t v6 = a1[34];
        uint64_t v7 = a1[35];
      }
      ++v8;
    }
    while (v8 < (v7 - v6) >> 3);
    a1[32] = a1[31];
    a1[35] = v6;
    sub_19E3030E8((uint64_t)(a1 + 37));
    uint64_t v10 = (void *)a1[34];
    if (v10) {
      goto LABEL_13;
    }
  }
  float v11 = (void *)a1[31];
  if (v11)
  {
    a1[32] = v11;
    operator delete(v11);
  }
  float v12 = (void *)a1[23];
  if (v12)
  {
    a1[24] = v12;
    operator delete(v12);
  }
  float v13 = (void *)a1[20];
  if (v13)
  {
    a1[21] = v13;
    operator delete(v13);
  }
  float v14 = (void *)a1[17];
  if (v14)
  {
    a1[18] = v14;
    operator delete(v14);
  }
  float v15 = (void *)a1[14];
  if (v15)
  {
    a1[15] = v15;
    operator delete(v15);
  }
  int v16 = (void *)a1[11];
  if (v16)
  {
    a1[12] = v16;
    operator delete(v16);
  }
  *a1 = &unk_1EF0A50F8;
  uint64_t v17 = (void *)a1[1];
  if (v17)
  {
    a1[2] = v17;
    operator delete(v17);
  }
  return a1;
}

uint64_t sub_19E1D57B0(uint64_t a1, int a2, int a3, int a4, int a5, int a6)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF0A6B70;
  *(_DWORD *)(a1 + 44) = a2;
  *(_DWORD *)(a1 + 48) = a3;
  *(_DWORD *)(a1 + 52) = a4;
  *(_DWORD *)(a1 + 56) = a5;
  *(_OWORD *)(a1 + 64) = 0u;
  unint64_t v8 = (void **)(a1 + 64);
  int v9 = (void **)(a1 + 88);
  *(_OWORD *)(a1 + 112) = 0u;
  uint64_t v10 = (void **)(a1 + 136);
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  int v22 = (void **)(a1 + 112);
  sub_19E3030A0(a1 + 160);
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  *(unsigned char *)(a1 + 40) = a6;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a1 + 44) + a6;
  *(unsigned char *)(a1 + 41) = 0;
  int v11 = dword_1E9457D98;
  unint64_t v12 = dword_1E9457D98;
  uint64_t v13 = *(void *)(a1 + 64);
  unint64_t v14 = (*(void *)(a1 + 72) - v13) >> 3;
  if (dword_1E9457D98 <= v14)
  {
    if (dword_1E9457D98 < v14) {
      *(void *)(a1 + 72) = v13 + 8 * dword_1E9457D98;
    }
  }
  else
  {
    sub_19E1599BC(v8, dword_1E9457D98 - v14);
    int v11 = dword_1E9457D98;
    unint64_t v12 = dword_1E9457D98;
  }
  uint64_t v15 = *(void *)(a1 + 88);
  unint64_t v16 = (*(void *)(a1 + 96) - v15) >> 3;
  if (v12 <= v16)
  {
    if (v12 < v16) {
      *(void *)(a1 + 96) = v15 + 8 * v12;
    }
  }
  else
  {
    sub_19E1599BC(v9, v12 - v16);
    int v11 = dword_1E9457D98;
    unint64_t v12 = dword_1E9457D98;
  }
  uint64_t v17 = *(void *)(a1 + 112);
  unint64_t v18 = (*(void *)(a1 + 120) - v17) >> 3;
  if (v12 <= v18)
  {
    if (v12 < v18) {
      *(void *)(a1 + 120) = v17 + 8 * v12;
    }
  }
  else
  {
    sub_19E1599BC(v22, v12 - v18);
    int v11 = dword_1E9457D98;
    unint64_t v12 = dword_1E9457D98;
  }
  uint64_t v19 = *(void *)(a1 + 136);
  unint64_t v20 = (*(void *)(a1 + 144) - v19) >> 3;
  if (v12 <= v20)
  {
    if (v12 < v20) {
      *(void *)(a1 + 144) = v19 + 8 * v12;
    }
  }
  else
  {
    sub_19E1599BC(v10, v12 - v20);
    int v11 = dword_1E9457D98;
  }
  if (v11 >= 1) {
    operator new[]();
  }
  return a1;
}

void sub_19E1D606C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  unint64_t v20 = *v18;
  if (*v18)
  {
    v14[18] = v20;
    operator delete(v20);
    float v21 = *a14;
    if (!*a14)
    {
LABEL_3:
      int v22 = *v17;
      if (!*v17) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    float v21 = *a14;
    if (!*a14) {
      goto LABEL_3;
    }
  }
  v14[15] = v21;
  operator delete(v21);
  int v22 = *v17;
  if (!*v17)
  {
LABEL_4:
    unint64_t v23 = *v16;
    if (!*v16) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  v14[12] = v22;
  operator delete(v22);
  unint64_t v23 = *v16;
  if (!*v16)
  {
LABEL_5:
    *unint64_t v14 = v15;
    uint64_t v24 = (void *)v14[1];
    if (!v24) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
LABEL_10:
  v14[9] = v23;
  operator delete(v23);
  *unint64_t v14 = v15;
  uint64_t v24 = (void *)v14[1];
  if (!v24) {
LABEL_6:
  }
    _Unwind_Resume(exception_object);
LABEL_11:
  v14[2] = v24;
  operator delete(v24);
  _Unwind_Resume(exception_object);
}

void sub_19E1D615C()
{
}

uint64_t sub_19E1D6170(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_19E1D6178(uint64_t a1)
{
  return a1 + 88;
}

void sub_19E1D6180()
{
}

uint64_t sub_19E1D6194(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_19E1D619C()
{
  return 0;
}

uint64_t sub_19E1D61EC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 60);
}

uint64_t sub_19E1D61F4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_19E1D6204(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, int a5)
{
  if (a5 >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = *a4;
    uint64_t v7 = *(void *)(result + 112);
    if (a5 < 4) {
      goto LABEL_7;
    }
    if ((unint64_t)(v7 - v6) < 0x20) {
      goto LABEL_7;
    }
    uint64_t v5 = a5 & 0x7FFFFFFC;
    unint64_t v8 = (long long *)(v6 + 16);
    int v9 = (_OWORD *)(v7 + 16);
    uint64_t v10 = a5 & 0xFFFFFFFC;
    do
    {
      long long v11 = *v8;
      *(v9 - 1) = *(v8 - 1);
      *int v9 = v11;
      v8 += 2;
      v9 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v5 != a5)
    {
LABEL_7:
      unint64_t v12 = (uint64_t *)(v6 + 8 * v5);
      uint64_t v13 = (void *)(v7 + 8 * v5);
      uint64_t v14 = a5 - v5;
      do
      {
        uint64_t v15 = *v12++;
        *v13++ = v15;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

int *sub_19E1D6284(int *result, void *a2, uint64_t a3, int a4)
{
  if ((a4 & 0xFFFFFF) != 0)
  {
    uint64_t v5 = result;
    uint64_t v6 = 0;
    uint64_t v7 = 8 * (a4 & 0xFFFFFF);
    do
    {
      memmove(*(void **)(*((void *)v5 + 8) + v6), *(const void **)(*a2 + v6), 4 * v5[11]);
      if (*((unsigned char *)v5 + 40)) {
        *(_DWORD *)(*(void *)(*((void *)v5 + 8) + v6) + 4 * v5[11]) = 1065353216;
      }
      uint64_t result = (int *)memmove(*(void **)(*((void *)v5 + 11) + v6), *(const void **)(*a2 + v6), 4 * v5[12]);
      v6 += 8;
    }
    while (v7 != v6);
  }
  return result;
}

void sub_19E1D633C()
{
}

void sub_19E1D6350()
{
}

void sub_19E1D6368(void *a1)
{
  uint64_t v1 = sub_19E1D63A4(a1);

  operator delete(v1);
}

void sub_19E1D6390()
{
}

void *sub_19E1D63A4(void *a1)
{
  *a1 = &unk_1EF0A6B70;
  unint64_t v4 = a1 + 29;
  uint64_t v2 = (void **)a1[29];
  uint64_t v3 = (void **)v4[1];
  if (v3 == v2)
  {
    uint64_t v2 = v3;
  }
  else
  {
    unint64_t v5 = 0;
    do
    {
      if (v2[v5])
      {
        operator delete[](v2[v5]);
        uint64_t v2 = (void **)a1[29];
        uint64_t v3 = (void **)a1[30];
      }
      ++v5;
    }
    while (v5 < v3 - v2);
  }
  if (v2)
  {
    a1[30] = v2;
    operator delete(v2);
  }
  sub_19E3030E8((uint64_t)(a1 + 20));
  uint64_t v6 = (void *)a1[17];
  if (v6)
  {
    a1[18] = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)a1[14];
  if (v7)
  {
    a1[15] = v7;
    operator delete(v7);
  }
  unint64_t v8 = (void *)a1[11];
  if (v8)
  {
    a1[12] = v8;
    operator delete(v8);
  }
  int v9 = (void *)a1[8];
  if (v9)
  {
    a1[9] = v9;
    operator delete(v9);
  }
  *a1 = &unk_1EF0A50F8;
  uint64_t v10 = (void *)a1[1];
  if (v10)
  {
    a1[2] = v10;
    operator delete(v10);
  }
  return a1;
}

uint64_t sub_19E1D64A4(uint64_t a1, int a2, int a3, int a4, int a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v15 = sub_19E1D6818(a1, a5);
  *(void *)uint64_t v15 = &unk_1EF0A71F8;
  *(_WORD *)(v15 + 41) = 0;
  *(_DWORD *)(v15 + 112) = 0;
  *(_DWORD *)(v15 + 408) = a4;
  *(void *)(v15 + 528) = a8;
  *(_DWORD *)(v15 + 120) = *(_DWORD *)(a6 + 68);
  if (a8) {
    a7 = *(unsigned char *)(a8 + 376);
  }
  *(unsigned char *)(a1 + 40) = a7;
  *(_DWORD *)(a1 + 96) = a2;
  *(_DWORD *)(a1 + 100) = a3;
  *(void *)(a1 + 104) = 0;
  *(_WORD *)(a1 + 116) = *(_WORD *)(a6 + 45);
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 528) = a8;
  if (a2 < 1 || a3 <= 0) {
    sub_19E2F6320(34);
  }
  char v19 = 7;
  strcpy(__p, "SoftMax");
  sub_19E1CFDEC(a1);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a6 + 16);
  *(void *)(a1 + 424) = 0;
  if (!*(unsigned char *)(a1 + 116))
  {
    int v16 = *(_DWORD *)(a6 + 32);
    switch(v16)
    {
      case 2:
        operator new();
      case 1:
        operator new();
      case 0:
        operator new();
    }
  }
  return a1;
}

void sub_19E1D67B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  operator delete(v15);
  sub_19E1D12D0(v14);
  _Unwind_Resume(a1);
}

void sub_19E1D67DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_19E1D12D0(v17);
  _Unwind_Resume(a1);
}

uint64_t sub_19E1D6818(uint64_t a1, int a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF0A7A08;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(unsigned char *)(a1 + 232) = 0;
  *(void *)(a1 + 416) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(void *)(a1 + 400) = 0;
  sub_19E3030A0(a1 + 432);
  *(_DWORD *)(a1 + 504) = a2;
  *(_WORD *)(a1 + 40) = 0;
  *(void *)(a1 + 424) = 0;
  *(unsigned char *)(a1 + 520) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 110) = 0;
  *(_DWORD *)(a1 + 408) = 1;
  *(void *)(a1 + 528) = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 192))(a1);
  return a1;
}

void sub_19E1D6938(_Unwind_Exception *a1)
{
  uint64_t v6 = v4;
  sub_19E3030E8(v6);
  unint64_t v8 = *(void **)(v1 + 384);
  if (v8)
  {
    *(void *)(v1 + 392) = v8;
    operator delete(v8);
    sub_19E14315C((void **)(v1 + 360));
    int v9 = *(void **)(v1 + 336);
    if (!v9)
    {
LABEL_3:
      uint64_t v10 = *(void **)(v1 + 312);
      if (!v10) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else
  {
    sub_19E14315C((void **)(v1 + 360));
    int v9 = *(void **)(v1 + 336);
    if (!v9) {
      goto LABEL_3;
    }
  }
  *(void *)(v1 + 344) = v9;
  operator delete(v9);
  uint64_t v10 = *(void **)(v1 + 312);
  if (!v10)
  {
LABEL_4:
    long long v11 = *(void **)(v1 + 288);
    if (!v11) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  *(void *)(v1 + 320) = v10;
  operator delete(v10);
  long long v11 = *(void **)(v1 + 288);
  if (!v11)
  {
LABEL_5:
    unint64_t v12 = *(void **)(v1 + 264);
    if (!v12) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
LABEL_13:
  *(void *)(v1 + 296) = v11;
  operator delete(v11);
  unint64_t v12 = *(void **)(v1 + 264);
  if (!v12)
  {
LABEL_6:
    sub_19E1C6038(v3);
    uint64_t v13 = *(void **)(v1 + 72);
    if (!v13) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  *(void *)(v1 + 272) = v12;
  operator delete(v12);
  sub_19E1C6038(v3);
  uint64_t v13 = *(void **)(v1 + 72);
  if (!v13)
  {
LABEL_7:
    uint64_t v14 = *v5;
    if (!*v5) {
      goto LABEL_8;
    }
    goto LABEL_16;
  }
LABEL_15:
  *(void *)(v1 + 80) = v13;
  operator delete(v13);
  uint64_t v14 = *v5;
  if (!*v5)
  {
LABEL_8:
    *(void *)uint64_t v1 = v2;
    uint64_t v15 = *(void **)(v1 + 8);
    if (!v15) {
      goto LABEL_9;
    }
    goto LABEL_17;
  }
LABEL_16:
  *(void *)(v1 + 56) = v14;
  operator delete(v14);
  *(void *)uint64_t v1 = v2;
  uint64_t v15 = *(void **)(v1 + 8);
  if (!v15) {
LABEL_9:
  }
    _Unwind_Resume(a1);
LABEL_17:
  *(void *)(v1 + 16) = v15;
  operator delete(v15);
  _Unwind_Resume(a1);
}

void sub_19E1D6A44()
{
}

uint64_t sub_19E1D6A58(uint64_t a1)
{
  return a1 + 264;
}

uint64_t sub_19E1D6A60(uint64_t a1)
{
  return a1 + 288;
}

void sub_19E1D6A68(uint64_t a1)
{
  strcpy((char *)__p, "SoftMax, from allocAll");
  sub_19E1CFDEC(a1);
}

void sub_19E1D6AE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E1D6B00(uint64_t a1, void *a2, uint64_t a3, int a4, void *a5)
{
  uint64_t v9 = a4;
  uint64_t v10 = *(int *)(a1 + 96);
  uint64_t v11 = *(int *)(a1 + 104);
  unint64_t v12 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  memmove(*(void **)(*v12 + 8 * a4), *(const void **)(*a2 + 8 * a4), 4 * v10);
  if (*(unsigned char *)(a1 + 40)) {
    *(_DWORD *)(*(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1) + 8 * v9)
  }
              + 4 * v11
              - 4) = 1065353216;
  if (a5[1] == *a5)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
    sub_19E1C7A94();
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  sub_19E2F6320(65);
}

uint64_t sub_19E1D6DDC(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = result;
  if (a5 && *(unsigned char *)(result + 520)) {
    sub_19E2F6320(34);
  }
  int v11 = a4 & 0xFFFFFF;
  uint64_t v12 = a5 != 0;
  if ((a4 & 0xFFFFFFu) > v12)
  {
    do
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v10 + 224))(v10, a2, a3, v12, a7);
      uint64_t v12 = (v12 + 1);
    }
    while (v11 != v12);
  }
  return result;
}

void sub_19E1D6E88(void *a1)
{
  uint64_t v1 = sub_19E1D12D0(a1);

  operator delete(v1);
}

void sub_19E1D6EB0(uint64_t a1, int a2, int a3, _DWORD **a4, int a5, int a6, uint64_t a7, int a8, uint64_t a9, char a10)
{
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_1EF0A6550;
  *(_DWORD *)(a1 + 44) = a2;
  *(_DWORD *)(a1 + 52) = a3;
  *(_DWORD *)(a1 + 56) = a6;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(unsigned char *)(a1 + 800) = 0;
  *(unsigned char *)(a1 + 920) = 0;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(unsigned char *)(a1 + 1040) = 0;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_DWORD *)(a1 + 728) = 0;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 836) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 956) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(void *)(a1 + 1112) = 0;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(void *)(a1 + 1184) = 0;
  *(_OWORD *)(a1 + 1168) = 0u;
  sub_19E3030A0(a1 + 1192);
  sub_19E3030A0(a1 + 1264);
  sub_19E3030A0(a1 + 1336);
  sub_19E3030A0(a1 + 1408);
  sub_19E3030A0(a1 + 1480);
  sub_19E3030A0(a1 + 1552);
  sub_19E3030A0(a1 + 1624);
  sub_19E3030A0(a1 + 1696);
  sub_19E3030A0(a1 + 1768);
  sub_19E3030A0(a1 + 1840);
  sub_19E3030A0(a1 + 1912);
  *(_DWORD *)(a1 + 1988) = a5;
  *(_OWORD *)(a1 + 1992) = 0u;
  *(_OWORD *)(a1 + 2008) = 0u;
  *(_OWORD *)(a1 + 2024) = 0u;
  (*(void (**)(uint64_t))(*(void *)a1 + 192))(a1);
  *(unsigned char *)(a1 + 2040) = 0;
  *(unsigned char *)(a1 + 41) = 0;
  *(void *)(a1 + 2048) = a9;
  if (a9)
  {
    int v15 = *(unsigned __int8 *)(a9 + 376);
    nullsub_171("GRU constructor");
    int v16 = v15 ^ 1;
    a8 = *(unsigned __int8 *)(*(void *)(a1 + 2048) + 376);
  }
  else
  {
    int v16 = 1;
  }
  *(unsigned char *)(a1 + 40) = a8;
  *(_WORD *)(a1 + 1984) = *(_WORD *)(a7 + 45);
  uint64_t v17 = *a4;
  *(_DWORD *)(a1 + 520) = **a4;
  *(_DWORD *)(a1 + 524) = v17[1];
  *(_DWORD *)(a1 + 528) = v17[2];
  if (!a8) {
    int v16 = 0;
  }
  *(_DWORD *)(a1 + 48) = v16 + *(_DWORD *)(a1 + 44);
  if (a10)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
    *(unsigned char *)(a1 + 2040) = 1;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a7 + 16);
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_OWORD *)(a1 + 1152) = 0u;
  strcpy((char *)operator new(0x20uLL), "GRU alloc, from constructor");
  sub_19E1D7534(a1);
}

void sub_19E1D71FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void **a19, void **a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
  {
    operator delete(__p);
    float v35 = (void *)v27[252];
    if (!v35)
    {
LABEL_3:
      uint64_t v36 = *v32;
      if (!*v32) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else
  {
    float v35 = (void *)v27[252];
    if (!v35) {
      goto LABEL_3;
    }
  }
  v27[253] = v35;
  operator delete(v35);
  uint64_t v36 = *v32;
  if (!*v32)
  {
LABEL_5:
    sub_19E3030E8(v33);
    sub_19E3030E8(v29);
    sub_19E3030E8(a9);
    sub_19E3030E8(a10);
    sub_19E3030E8(a11);
    sub_19E3030E8(a12);
    sub_19E3030E8(a13);
    sub_19E3030E8(a14);
    sub_19E3030E8(a15);
    sub_19E3030E8(a16);
    sub_19E3030E8(a17);
    sub_19E1C6038(v31);
    sub_19E1C6038(v30);
    sub_19E1C6038(a18);
    uint64_t v37 = (void *)v27[85];
    if (v37)
    {
      v27[86] = v37;
      operator delete(v37);
      uint64_t v38 = (void *)v27[82];
      if (!v38)
      {
LABEL_7:
        uint64_t v39 = (void *)v27[79];
        if (!v39) {
          goto LABEL_8;
        }
        goto LABEL_27;
      }
    }
    else
    {
      uint64_t v38 = (void *)v27[82];
      if (!v38) {
        goto LABEL_7;
      }
    }
    v27[83] = v38;
    operator delete(v38);
    uint64_t v39 = (void *)v27[79];
    if (!v39)
    {
LABEL_8:
      int v40 = (void *)v27[76];
      if (!v40) {
        goto LABEL_9;
      }
      goto LABEL_28;
    }
LABEL_27:
    v27[80] = v39;
    operator delete(v39);
    int v40 = (void *)v27[76];
    if (!v40)
    {
LABEL_9:
      float32x4_t v41 = (void *)v27[73];
      if (!v41) {
        goto LABEL_10;
      }
      goto LABEL_29;
    }
LABEL_28:
    v27[77] = v40;
    operator delete(v40);
    float32x4_t v41 = (void *)v27[73];
    if (!v41)
    {
LABEL_10:
      uint64_t v42 = (void *)v27[70];
      if (!v42) {
        goto LABEL_11;
      }
      goto LABEL_30;
    }
LABEL_29:
    v27[74] = v41;
    operator delete(v41);
    uint64_t v42 = (void *)v27[70];
    if (!v42)
    {
LABEL_11:
      uint64_t v43 = (void *)v27[62];
      if (!v43) {
        goto LABEL_12;
      }
      goto LABEL_31;
    }
LABEL_30:
    v27[71] = v42;
    operator delete(v42);
    uint64_t v43 = (void *)v27[62];
    if (!v43)
    {
LABEL_12:
      long long v44 = (void *)v27[59];
      if (!v44) {
        goto LABEL_13;
      }
      goto LABEL_32;
    }
LABEL_31:
    v27[63] = v43;
    operator delete(v43);
    long long v44 = (void *)v27[59];
    if (!v44)
    {
LABEL_13:
      BOOL v45 = (void *)v27[56];
      if (!v45) {
        goto LABEL_14;
      }
      goto LABEL_33;
    }
LABEL_32:
    v27[60] = v44;
    operator delete(v44);
    BOOL v45 = (void *)v27[56];
    if (!v45)
    {
LABEL_14:
      float v46 = (void *)v27[53];
      if (!v46) {
        goto LABEL_15;
      }
      goto LABEL_34;
    }
LABEL_33:
    v27[57] = v45;
    operator delete(v45);
    float v46 = (void *)v27[53];
    if (!v46)
    {
LABEL_15:
      unint64_t v47 = (void *)v27[50];
      if (!v47) {
        goto LABEL_16;
      }
      goto LABEL_35;
    }
LABEL_34:
    v27[54] = v46;
    operator delete(v46);
    unint64_t v47 = (void *)v27[50];
    if (!v47)
    {
LABEL_16:
      uint64_t v48 = *v28;
      if (!*v28) {
        goto LABEL_17;
      }
      goto LABEL_36;
    }
LABEL_35:
    v27[51] = v47;
    operator delete(v47);
    uint64_t v48 = *v28;
    if (!*v28)
    {
LABEL_17:
      sub_19E14315C(a19);
      size_t v49 = (void *)v27[23];
      if (!v49) {
        goto LABEL_18;
      }
      goto LABEL_37;
    }
LABEL_36:
    v27[48] = v48;
    operator delete(v48);
    sub_19E14315C(a19);
    size_t v49 = (void *)v27[23];
    if (!v49)
    {
LABEL_18:
      uint64_t v50 = (void *)v27[20];
      if (!v50) {
        goto LABEL_19;
      }
      goto LABEL_38;
    }
LABEL_37:
    v27[24] = v49;
    operator delete(v49);
    uint64_t v50 = (void *)v27[20];
    if (!v50)
    {
LABEL_19:
      float32x4_t v51 = (void *)v27[17];
      if (!v51) {
        goto LABEL_20;
      }
      goto LABEL_39;
    }
LABEL_38:
    v27[21] = v50;
    operator delete(v50);
    float32x4_t v51 = (void *)v27[17];
    if (!v51)
    {
LABEL_20:
      uint64_t v52 = (void *)v27[14];
      if (!v52) {
        goto LABEL_21;
      }
      goto LABEL_40;
    }
LABEL_39:
    v27[18] = v51;
    operator delete(v51);
    uint64_t v52 = (void *)v27[14];
    if (!v52)
    {
LABEL_21:
      uint64_t v53 = (void *)v27[11];
      if (!v53) {
        goto LABEL_22;
      }
      goto LABEL_41;
    }
LABEL_40:
    v27[15] = v52;
    operator delete(v52);
    uint64_t v53 = (void *)v27[11];
    if (!v53)
    {
LABEL_22:
      unint64_t v54 = *a20;
      if (!*a20) {
        goto LABEL_23;
      }
      goto LABEL_42;
    }
LABEL_41:
    v27[12] = v53;
    operator delete(v53);
    unint64_t v54 = *a20;
    if (!*a20)
    {
LABEL_23:
      void *v27 = a21;
      int v55 = (void *)v27[1];
      if (!v55) {
        goto LABEL_24;
      }
      goto LABEL_43;
    }
LABEL_42:
    v27[9] = v54;
    operator delete(v54);
    void *v27 = a21;
    int v55 = (void *)v27[1];
    if (!v55) {
LABEL_24:
    }
      _Unwind_Resume(a1);
LABEL_43:
    v27[2] = v55;
    operator delete(v55);
    _Unwind_Resume(a1);
  }
LABEL_4:
  v27[250] = v36;
  operator delete(v36);
  goto LABEL_5;
}

void sub_19E1D7534(uint64_t a1)
{
  unsigned int v1 = 3;
  unsigned int v2 = 6;
  if (*(unsigned char *)(a1 + 42))
  {
    if (*(_DWORD *)(a1 + 1988)) {
      goto LABEL_22;
    }
  }
  else
  {
    if (*(unsigned char *)(a1 + 2040)) {
      unsigned int v2 = 6;
    }
    else {
      unsigned int v2 = 0;
    }
    if (*(unsigned char *)(a1 + 2040)) {
      unsigned int v1 = 3;
    }
    else {
      unsigned int v1 = 0;
    }
    if (*(_DWORD *)(a1 + 1988)) {
      goto LABEL_22;
    }
  }
  uint64_t v3 = *(void *)(a1 + 2048);
  if (v3 && (int v4 = *(_DWORD *)(v3 + 40), v4 >= 1))
  {
    unint64_t v5 = (void *)(v3 + 8 * v2);
    if (v4 == 6)
    {
      *(void *)(a1 + 232) = v5[14];
      *(void *)(a1 + 240) = v5[15];
      *(void *)(a1 + 248) = v5[16];
    }
    else
    {
      if (v4 != 4) {
        sub_19E2F6320(45);
      }
      *(void *)(a1 + 232) = v5[14];
    }
    *(void *)(a1 + 256) = v5[17];
    *(void *)(a1 + 264) = v5[18];
    *(void *)(a1 + 272) = v5[19];
  }
  else if (!*(unsigned char *)(a1 + 1985))
  {
    operator new[]();
  }
  if (!*(unsigned char *)(a1 + 1985))
  {
    uint64_t v6 = *(void *)(a1 + 2048);
    if (v6)
    {
      if (!*(unsigned char *)(v6 + 244)) {
        operator new[]();
      }
      uint64_t v7 = (void *)(v6 + 8 * v1);
      *(void *)(a1 + 280) = v7[31];
      *(void *)(a1 + 288) = v7[32];
      *(void *)(a1 + 296) = v7[33];
    }
  }
  *(void *)(a1 + 304) = a1 + 232;
  *(void *)(a1 + 312) = a1 + 240;
  *(void *)(a1 + 320) = a1 + 248;
  *(void *)(a1 + 328) = a1 + 256;
  *(void *)(a1 + 336) = a1 + 264;
  *(void *)(a1 + 344) = a1 + 272;
  *(void *)(a1 + 352) = a1 + 280;
  *(void *)(a1 + 360) = a1 + 288;
  *(void *)(a1 + 368) = a1 + 296;
LABEL_22:
  operator new[]();
}

void sub_19E1D9844()
{
}

uint64_t sub_19E1D9858(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_19E1D9860(uint64_t a1)
{
  return a1 + 112;
}

void sub_19E1D9868()
{
}

uint64_t sub_19E1D987C(uint64_t a1)
{
  return a1 + 560;
}

uint64_t sub_19E1D9884()
{
  return 0;
}

unsigned char *sub_19E1D988C(uint64_t a1, uint64_t a2, int *a3, int a4)
{
  if (!a2) {
LABEL_21:
  }
    sub_19E2F6320(3);
  int v7 = *(_DWORD *)(a2 + 72);
  uint64_t v8 = *(void *)a2;
  uint64_t v9 = (int *)(*(void *)a2 + v7);
  unint64_t v10 = *(void *)a2 + *(void *)(a2 + 8) - 4;
  if ((unint64_t)v9 <= v10)
  {
    int v11 = *v9;
    v7 += 4;
    *(_DWORD *)(a2 + 72) = v7;
    uint64_t v12 = (int *)(v8 + v7);
    if ((unint64_t)v12 <= v10)
    {
LABEL_4:
      int v13 = *v12;
      v7 += 4;
      *(_DWORD *)(a2 + 72) = v7;
      if (a4 < 1) {
        goto LABEL_16;
      }
LABEL_8:
      uint64_t v14 = v7;
      int v15 = (int *)(v8 + v7);
      if ((unint64_t)v15 <= v10)
      {
        int v19 = *v15;
        v7 += 4;
        *(_DWORD *)(a2 + 72) = v7;
        uint64_t v14 = v7;
        *(_DWORD *)(a1 + 520) = v19;
        unint64_t v20 = (int *)(v8 + v7);
        if ((unint64_t)v20 <= v10)
        {
          int v16 = *v20;
          v7 += 4;
          *(_DWORD *)(a2 + 72) = v7;
          *(_DWORD *)(a1 + 524) = v16;
          uint64_t v17 = (int *)(v8 + v7);
          if ((unint64_t)v17 > v10)
          {
LABEL_14:
            int v18 = 0;
            goto LABEL_15;
          }
LABEL_11:
          int v18 = *v17;
          *(_DWORD *)(a2 + 72) = v7 + 4;
LABEL_15:
          *(_DWORD *)(a1 + 528) = v18;
          goto LABEL_16;
        }
      }
      else
      {
        *(_DWORD *)(a1 + 520) = 0;
      }
      *(_DWORD *)(a1 + 524) = 0;
      uint64_t v17 = (int *)(v8 + v14);
      if ((unint64_t)v17 > v10) {
        goto LABEL_14;
      }
      goto LABEL_11;
    }
  }
  else
  {
    int v11 = 0;
    uint64_t v12 = (int *)(v8 + v7);
    if ((unint64_t)v12 <= v10) {
      goto LABEL_4;
    }
  }
  int v13 = 0;
  if (a4 >= 1) {
    goto LABEL_8;
  }
LABEL_16:
  if (*(_DWORD *)(a1 + 52) != v11 || *(_DWORD *)(a1 + 48) != v13) {
    goto LABEL_21;
  }
  float v21 = *(unsigned char **)(a1 + 312);
  int v22 = *a3;
  int v23 = *(unsigned __int8 *)(a1 + 1985);
  int v24 = sub_19E2F62F8();
  sub_19E1C632C(v21, (uint64_t *)a2, v22, v23, v24, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
  long long v25 = *(unsigned char **)(a1 + 304);
  int v26 = *a3;
  int v27 = *(unsigned __int8 *)(a1 + 1985);
  int v28 = sub_19E2F62F8();
  sub_19E1C632C(v25, (uint64_t *)a2, v26, v27, v28, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
  uint64_t v29 = *(unsigned char **)(a1 + 320);
  int v30 = *a3;
  int v31 = *(unsigned __int8 *)(a1 + 1985);
  int v32 = sub_19E2F62F8();
  sub_19E1C632C(v29, (uint64_t *)a2, v30, v31, v32, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
  uint64_t v33 = *(unsigned char **)(a1 + 336);
  int v34 = *a3;
  int v35 = *(unsigned __int8 *)(a1 + 1985);
  int v36 = sub_19E2F62F8();
  sub_19E1C632C(v33, (uint64_t *)a2, v34, v35, v36, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52));
  uint64_t v37 = *(unsigned char **)(a1 + 328);
  int v38 = *a3;
  int v39 = *(unsigned __int8 *)(a1 + 1985);
  int v40 = sub_19E2F62F8();
  sub_19E1C632C(v37, (uint64_t *)a2, v38, v39, v40, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52));
  float32x4_t v41 = *(unsigned char **)(a1 + 344);
  int v42 = *a3;
  int v43 = *(unsigned __int8 *)(a1 + 1985);
  int v44 = sub_19E2F62F8();
  int v45 = *(_DWORD *)(a1 + 52);

  return sub_19E1C632C(v41, (uint64_t *)a2, v42, v43, v44, v45, v45);
}

uint64_t sub_19E1D9B20(uint64_t a1, FILE *__stream, int *a3, int a4, unsigned int a5)
{
  if (!__stream) {
    sub_19E2F6320(3);
  }
  int v10 = *(_DWORD *)(a1 + 48);
  sub_19E2F6788(__stream, a3, *(_DWORD *)(a1 + 52));
  sub_19E2F6788(__stream, a3, v10);
  if (a4 >= 1)
  {
    int __ptr = *(_DWORD *)(a1 + 520);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    int __ptr = *(_DWORD *)(a1 + 524);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    int __ptr = *(_DWORD *)(a1 + 528);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    *a3 += 12;
  }
  uint64_t v11 = *(void *)(a1 + 312);
  int v12 = sub_19E2F62F8();
  sub_19E1C6648(v11, __stream, a3, 3, v12, a5);
  uint64_t v13 = *(void *)(a1 + 304);
  int v14 = sub_19E2F62F8();
  sub_19E1C6648(v13, __stream, a3, 3, v14, a5);
  uint64_t v15 = *(void *)(a1 + 320);
  int v16 = sub_19E2F62F8();
  sub_19E1C6648(v15, __stream, a3, 3, v16, a5);
  uint64_t v17 = *(void *)(a1 + 336);
  int v18 = sub_19E2F62F8();
  sub_19E1C6648(v17, __stream, a3, 3, v18, a5);
  uint64_t v19 = *(void *)(a1 + 328);
  int v20 = sub_19E2F62F8();
  sub_19E1C6648(v19, __stream, a3, 3, v20, a5);
  uint64_t v21 = *(void *)(a1 + 344);
  int v22 = sub_19E2F62F8();
  return sub_19E1C6648(v21, __stream, a3, 3, v22, a5);
}

void **sub_19E1D9D10(uint64_t a1, void *lpsrc, const void *a3)
{
  if (lpsrc)
  {
    unint64_t v5 = (void **)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3DE0, 0);
    if (a3) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = 0;
    int v7 = *(_DWORD *)(a1 + 52);
    uint64_t v8 = (*(_DWORD *)(a1 + 48) * v7);
    if ((int)v8 < 1) {
      goto LABEL_34;
    }
    goto LABEL_7;
  }
  unint64_t v5 = 0;
  if (!a3) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t result = (void **)__dynamic_cast(a3, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3DE0, 0);
  int v7 = *(_DWORD *)(a1 + 52);
  uint64_t v8 = (*(_DWORD *)(a1 + 48) * v7);
  if ((int)v8 < 1) {
    goto LABEL_34;
  }
LABEL_7:
  uint64_t v9 = (int16x8_t *)*result[39];
  int v10 = (int16x8_t *)*v5[39];
  uint64_t v11 = **(int16x8_t ***)(a1 + 312);
  if (v8 < 0x10)
  {
    uint64_t v12 = 0;
LABEL_14:
    uint64_t v18 = v8 - v12;
    uint64_t v19 = v12;
    int v20 = &v11->i16[v19];
    uint64_t v21 = &v10->i16[v19];
    int v22 = &v9->i16[v19];
    do
    {
      __int16 v24 = *v22++;
      __int16 v23 = v24;
      __int16 v25 = *v21++;
      *v20++ = v23 - v25;
      --v18;
    }
    while (v18);
    goto LABEL_16;
  }
  uint64_t v12 = 0;
  if ((unint64_t)((char *)v11 - (char *)v9) < 0x20) {
    goto LABEL_14;
  }
  if ((unint64_t)((char *)v11 - (char *)v10) < 0x20) {
    goto LABEL_14;
  }
  uint64_t v12 = v8 & 0x7FFFFFF0;
  uint64_t v13 = v9 + 1;
  int v14 = v10 + 1;
  uint64_t v15 = v11 + 1;
  uint64_t v16 = v8 & 0xFFFFFFF0;
  do
  {
    int16x8_t v17 = vsubq_s16(*v13, *v14);
    v15[-1] = vsubq_s16(v13[-1], v14[-1]);
    *uint64_t v15 = v17;
    v13 += 2;
    v14 += 2;
    v15 += 2;
    v16 -= 16;
  }
  while (v16);
  if (v12 != v8) {
    goto LABEL_14;
  }
LABEL_16:
  int v26 = (int16x8_t *)*result[40];
  int v27 = (int16x8_t *)*v5[40];
  int v28 = **(int16x8_t ***)(a1 + 320);
  if (v8 < 0x10)
  {
    uint64_t v29 = 0;
LABEL_23:
    uint64_t v35 = v8 - v29;
    uint64_t v36 = v29;
    uint64_t v37 = &v28->i16[v36];
    int v38 = &v27->i16[v36];
    int v39 = &v26->i16[v36];
    do
    {
      __int16 v41 = *v39++;
      __int16 v40 = v41;
      __int16 v42 = *v38++;
      *v37++ = v40 - v42;
      --v35;
    }
    while (v35);
    goto LABEL_25;
  }
  uint64_t v29 = 0;
  if ((unint64_t)((char *)v28 - (char *)v26) < 0x20) {
    goto LABEL_23;
  }
  if ((unint64_t)((char *)v28 - (char *)v27) < 0x20) {
    goto LABEL_23;
  }
  uint64_t v29 = v8 & 0x7FFFFFF0;
  int v30 = v26 + 1;
  int v31 = v27 + 1;
  int v32 = v28 + 1;
  uint64_t v33 = v8 & 0xFFFFFFF0;
  do
  {
    int16x8_t v34 = vsubq_s16(*v30, *v31);
    v32[-1] = vsubq_s16(v30[-1], v31[-1]);
    int16x8_t *v32 = v34;
    v30 += 2;
    v31 += 2;
    v32 += 2;
    v33 -= 16;
  }
  while (v33);
  if (v29 != v8) {
    goto LABEL_23;
  }
LABEL_25:
  int v43 = (int16x8_t *)*result[38];
  int v44 = (int16x8_t *)*v5[38];
  int v45 = **(int16x8_t ***)(a1 + 304);
  if (v8 < 0x10)
  {
    uint64_t v46 = 0;
LABEL_32:
    uint64_t v52 = v8 - v46;
    uint64_t v53 = v46;
    unint64_t v54 = &v45->i16[v53];
    int v55 = &v44->i16[v53];
    uint64_t v56 = &v43->i16[v53];
    do
    {
      __int16 v58 = *v56++;
      __int16 v57 = v58;
      __int16 v59 = *v55++;
      *v54++ = v57 - v59;
      --v52;
    }
    while (v52);
    goto LABEL_34;
  }
  uint64_t v46 = 0;
  if ((unint64_t)((char *)v45 - (char *)v43) < 0x20) {
    goto LABEL_32;
  }
  if ((unint64_t)((char *)v45 - (char *)v44) < 0x20) {
    goto LABEL_32;
  }
  uint64_t v46 = v8 & 0x7FFFFFF0;
  unint64_t v47 = v43 + 1;
  uint64_t v48 = v44 + 1;
  size_t v49 = v45 + 1;
  uint64_t v50 = v8 & 0xFFFFFFF0;
  do
  {
    int16x8_t v51 = vsubq_s16(*v47, *v48);
    v49[-1] = vsubq_s16(v47[-1], v48[-1]);
    *size_t v49 = v51;
    v47 += 2;
    v48 += 2;
    v49 += 2;
    v50 -= 16;
  }
  while (v50);
  if (v46 != v8) {
    goto LABEL_32;
  }
LABEL_34:
  if (!v7) {
    return result;
  }
  uint64_t v60 = (v7 * v7);
  uint64_t v61 = (int16x8_t *)*result[42];
  uint64_t v62 = (int16x8_t *)*v5[42];
  uint64_t v63 = **(int16x8_t ***)(a1 + 336);
  if (v60 < 0x10)
  {
    uint64_t v64 = 0;
LABEL_42:
    uint64_t v70 = v60 - v64;
    uint64_t v71 = v64;
    float v72 = &v63->i16[v71];
    unsigned int v73 = &v62->i16[v71];
    BOOL v74 = &v61->i16[v71];
    do
    {
      __int16 v76 = *v74++;
      __int16 v75 = v76;
      __int16 v77 = *v73++;
      *v72++ = v75 - v77;
      --v70;
    }
    while (v70);
    goto LABEL_44;
  }
  uint64_t v64 = 0;
  if ((unint64_t)((char *)v63 - (char *)v61) < 0x20) {
    goto LABEL_42;
  }
  if ((unint64_t)((char *)v63 - (char *)v62) < 0x20) {
    goto LABEL_42;
  }
  uint64_t v64 = v60 & 0x7FFFFFF0;
  uint64_t v65 = v61 + 1;
  uint64_t v66 = v62 + 1;
  uint64_t v67 = v63 + 1;
  uint64_t v68 = v64;
  do
  {
    int16x8_t v69 = vsubq_s16(*v65, *v66);
    v67[-1] = vsubq_s16(v65[-1], v66[-1]);
    int16x8_t *v67 = v69;
    v65 += 2;
    v66 += 2;
    v67 += 2;
    v68 -= 16;
  }
  while (v68);
  if (v64 != v60) {
    goto LABEL_42;
  }
LABEL_44:
  uint64_t v78 = (int16x8_t *)*result[43];
  float32x4_t v79 = (int16x8_t *)*v5[43];
  uint64_t v80 = **(int16x8_t ***)(a1 + 344);
  if (v60 < 0x10)
  {
    uint64_t v81 = 0;
LABEL_51:
    uint64_t v87 = v60 - v81;
    uint64_t v88 = v81;
    unint64_t v89 = &v80->i16[v88];
    uint64_t v90 = &v79->i16[v88];
    uint64_t v91 = &v78->i16[v88];
    do
    {
      __int16 v93 = *v91++;
      __int16 v92 = v93;
      __int16 v94 = *v90++;
      *v89++ = v92 - v94;
      --v87;
    }
    while (v87);
    goto LABEL_53;
  }
  uint64_t v81 = 0;
  if ((unint64_t)((char *)v80 - (char *)v78) < 0x20) {
    goto LABEL_51;
  }
  if ((unint64_t)((char *)v80 - (char *)v79) < 0x20) {
    goto LABEL_51;
  }
  uint64_t v81 = v60 & 0x7FFFFFF0;
  uint64_t v82 = v78 + 1;
  uint64_t v83 = v79 + 1;
  int v84 = v80 + 1;
  uint64_t v85 = v81;
  do
  {
    int16x8_t v86 = vsubq_s16(*v82, *v83);
    v84[-1] = vsubq_s16(v82[-1], v83[-1]);
    *int v84 = v86;
    v82 += 2;
    v83 += 2;
    v84 += 2;
    v85 -= 16;
  }
  while (v85);
  if (v81 != v60) {
    goto LABEL_51;
  }
LABEL_53:
  float32x4_t v95 = (int16x8_t *)*result[41];
  BOOL v96 = (int16x8_t *)*v5[41];
  uint64_t v97 = **(int16x8_t ***)(a1 + 328);
  if (v60 < 0x10)
  {
    uint64_t v98 = 0;
LABEL_60:
    uint64_t v104 = v60 - v98;
    uint64_t v105 = v98;
    int v106 = &v97->i16[v105];
    float v107 = &v96->i16[v105];
    uint64_t v108 = &v95->i16[v105];
    do
    {
      __int16 v110 = *v108++;
      __int16 v109 = v110;
      __int16 v111 = *v107++;
      *v106++ = v109 - v111;
      --v104;
    }
    while (v104);
    return result;
  }
  uint64_t v98 = 0;
  if ((unint64_t)((char *)v97 - (char *)v95) < 0x20) {
    goto LABEL_60;
  }
  if ((unint64_t)((char *)v97 - (char *)v96) < 0x20) {
    goto LABEL_60;
  }
  uint64_t v98 = v60 & 0x7FFFFFF0;
  uint64_t v99 = v95 + 1;
  uint64_t v100 = v96 + 1;
  uint64_t v101 = v97 + 1;
  uint64_t v102 = v98;
  do
  {
    int16x8_t v103 = vsubq_s16(*v99, *v100);
    v101[-1] = vsubq_s16(v99[-1], v100[-1]);
    int16x8_t *v101 = v103;
    v99 += 2;
    v100 += 2;
    v101 += 2;
    v102 -= 16;
  }
  while (v102);
  if (v98 != v60) {
    goto LABEL_60;
  }
  return result;
}

void sub_19E1DA244(int a1, void *lpsrc, const void *a3)
{
  if (lpsrc) {
    __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3DE0, 0);
  }
  if (a3)
  {
    __dynamic_cast(a3, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3DE0, 0);
  }
}

void **sub_19E1DA310(uint64_t a1, void *lpsrc)
{
  if (lpsrc)
  {
    uint64_t result = (void **)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3DE0, 0);
    int v4 = *(_DWORD *)(a1 + 52);
    uint64_t v5 = (*(_DWORD *)(a1 + 48) * v4);
    if ((int)v5 < 1) {
      goto LABEL_44;
    }
  }
  else
  {
    uint64_t result = 0;
    int v4 = *(_DWORD *)(a1 + 52);
    uint64_t v5 = (*(_DWORD *)(a1 + 48) * v4);
    if ((int)v5 < 1) {
      goto LABEL_44;
    }
  }
  uint64_t v6 = **(int16x8_t ***)(a1 + 312);
  int v7 = (int16x8_t *)*result[39];
  uint64_t v8 = 2 * v5;
  if (v5 >= 0x10
    && (v6 < (int16x8_t *)&v7->i8[v8] ? (BOOL v9 = v7 >= (int16x8_t *)&v6->i8[v8]) : (BOOL v9 = 1), v9))
  {
    uint64_t v10 = v5 & 0x7FFFFFF0;
    uint64_t v11 = v6 + 1;
    uint64_t v12 = v7 + 1;
    uint64_t v13 = v5 & 0xFFFFFFF0;
    do
    {
      int16x8_t v14 = vaddq_s16(*v12, *v11);
      v11[-1] = vaddq_s16(v12[-1], v11[-1]);
      int16x8_t *v11 = v14;
      v11 += 2;
      v12 += 2;
      v13 -= 16;
    }
    while (v13);
    if (v10 == v5) {
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v15 = v5 - v10;
  uint64_t v16 = v10;
  int16x8_t v17 = &v7->i16[v16];
  uint64_t v18 = &v6->i16[v16];
  do
  {
    __int16 v19 = *v17++;
    *v18++ += v19;
    --v15;
  }
  while (v15);
LABEL_18:
  int v20 = **(int16x8_t ***)(a1 + 304);
  uint64_t v21 = (int16x8_t *)*result[38];
  if (v5 >= 0x10
    && (v20 < (int16x8_t *)&v21->i8[v8] ? (BOOL v22 = v21 >= (int16x8_t *)&v20->i8[v8]) : (BOOL v22 = 1), v22))
  {
    uint64_t v23 = v5 & 0x7FFFFFF0;
    __int16 v24 = v20 + 1;
    __int16 v25 = v21 + 1;
    uint64_t v26 = v5 & 0xFFFFFFF0;
    do
    {
      int16x8_t v27 = vaddq_s16(*v25, *v24);
      v24[-1] = vaddq_s16(v25[-1], v24[-1]);
      *__int16 v24 = v27;
      v24 += 2;
      v25 += 2;
      v26 -= 16;
    }
    while (v26);
    if (v23 == v5) {
      goto LABEL_31;
    }
  }
  else
  {
    uint64_t v23 = 0;
  }
  uint64_t v28 = v5 - v23;
  uint64_t v29 = v23;
  int v30 = &v21->i16[v29];
  int v31 = &v20->i16[v29];
  do
  {
    __int16 v32 = *v30++;
    *v31++ += v32;
    --v28;
  }
  while (v28);
LABEL_31:
  uint64_t v33 = **(int16x8_t ***)(a1 + 320);
  int16x8_t v34 = (int16x8_t *)*result[40];
  if (v5 < 0x10
    || (v33 < (int16x8_t *)&v34->i8[v8] ? (BOOL v35 = v34 >= (int16x8_t *)&v33->i8[v8]) : (BOOL v35 = 1), !v35))
  {
    uint64_t v36 = 0;
LABEL_42:
    uint64_t v41 = v5 - v36;
    uint64_t v42 = v36;
    int v43 = &v34->i16[v36];
    int v44 = &v33->i16[v42];
    do
    {
      __int16 v45 = *v43++;
      *v44++ += v45;
      --v41;
    }
    while (v41);
    goto LABEL_44;
  }
  uint64_t v36 = v5 & 0x7FFFFFF0;
  uint64_t v37 = v33 + 1;
  int v38 = v34 + 1;
  uint64_t v39 = v5 & 0xFFFFFFF0;
  do
  {
    int16x8_t v40 = vaddq_s16(*v38, *v37);
    v37[-1] = vaddq_s16(v38[-1], v37[-1]);
    int16x8_t *v37 = v40;
    v37 += 2;
    v38 += 2;
    v39 -= 16;
  }
  while (v39);
  if (v36 != v5) {
    goto LABEL_42;
  }
LABEL_44:
  if (!v4) {
    return result;
  }
  uint64_t v46 = (v4 * v4);
  unint64_t v47 = **(int16x8_t ***)(a1 + 336);
  uint64_t v48 = (int16x8_t *)*result[42];
  uint64_t v49 = 2 * v46;
  if (v46 >= 0x10
    && (v47 < (int16x8_t *)&v48->i8[v49] ? (BOOL v50 = v48 >= (int16x8_t *)&v47->i8[v49]) : (BOOL v50 = 1), v50))
  {
    uint64_t v51 = v46 & 0x7FFFFFF0;
    uint64_t v52 = v47 + 1;
    uint64_t v53 = v48 + 1;
    uint64_t v54 = v51;
    do
    {
      int16x8_t v55 = vaddq_s16(*v53, *v52);
      v52[-1] = vaddq_s16(v53[-1], v52[-1]);
      *uint64_t v52 = v55;
      v52 += 2;
      v53 += 2;
      v54 -= 16;
    }
    while (v54);
    if (v51 == v46) {
      goto LABEL_58;
    }
  }
  else
  {
    uint64_t v51 = 0;
  }
  uint64_t v56 = v46 - v51;
  uint64_t v57 = v51;
  __int16 v58 = &v48->i16[v57];
  __int16 v59 = &v47->i16[v57];
  do
  {
    __int16 v60 = *v58++;
    *v59++ += v60;
    --v56;
  }
  while (v56);
LABEL_58:
  uint64_t v61 = **(int16x8_t ***)(a1 + 328);
  uint64_t v62 = (int16x8_t *)*result[41];
  if (v46 >= 0x10
    && (v61 < (int16x8_t *)&v62->i8[v49] ? (BOOL v63 = v62 >= (int16x8_t *)&v61->i8[v49]) : (BOOL v63 = 1), v63))
  {
    uint64_t v64 = v46 & 0x7FFFFFF0;
    uint64_t v65 = v61 + 1;
    uint64_t v66 = v62 + 1;
    uint64_t v67 = v64;
    do
    {
      int16x8_t v68 = vaddq_s16(*v66, *v65);
      v65[-1] = vaddq_s16(v66[-1], v65[-1]);
      *uint64_t v65 = v68;
      v65 += 2;
      v66 += 2;
      v67 -= 16;
    }
    while (v67);
    if (v64 == v46) {
      goto LABEL_71;
    }
  }
  else
  {
    uint64_t v64 = 0;
  }
  uint64_t v69 = v46 - v64;
  uint64_t v70 = v64;
  uint64_t v71 = &v62->i16[v70];
  float v72 = &v61->i16[v70];
  do
  {
    __int16 v73 = *v71++;
    *v72++ += v73;
    --v69;
  }
  while (v69);
LABEL_71:
  BOOL v74 = **(int16x8_t ***)(a1 + 344);
  __int16 v75 = (int16x8_t *)*result[43];
  if (v46 < 0x10
    || (v74 < (int16x8_t *)&v75->i8[v49] ? (BOOL v76 = v75 >= (int16x8_t *)&v74->i8[v49]) : (BOOL v76 = 1), !v76))
  {
    uint64_t v77 = 0;
LABEL_82:
    uint64_t v82 = v46 - v77;
    uint64_t v83 = v77;
    int v84 = &v75->i16[v77];
    uint64_t v85 = &v74->i16[v83];
    do
    {
      __int16 v86 = *v84++;
      *v85++ += v86;
      --v82;
    }
    while (v82);
    return result;
  }
  uint64_t v77 = v46 & 0x7FFFFFF0;
  uint64_t v78 = v74 + 1;
  float32x4_t v79 = v75 + 1;
  uint64_t v80 = v77;
  do
  {
    int16x8_t v81 = vaddq_s16(*v79, *v78);
    v78[-1] = vaddq_s16(v79[-1], v78[-1]);
    *uint64_t v78 = v81;
    v78 += 2;
    v79 += 2;
    v80 -= 16;
  }
  while (v80);
  if (v77 != v46) {
    goto LABEL_82;
  }
  return result;
}

void sub_19E1DA744(uint64_t a1, void *lpsrc)
{
  if (lpsrc) {
    __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3DC8, 0);
  }
  (*(void (**)(void))(**(void **)(a1 + 1128) + 64))(*(void *)(a1 + 1128));
  sub_19E2F6320(23);
}

uint64_t sub_19E1DA7D4(uint64_t result, float a2, double a3, double a4)
{
  float v4 = -a2;
  int v5 = *(_DWORD *)(result + 52);
  uint64_t v6 = (*(_DWORD *)(result + 48) * v5);
  if ((int)v6 >= 1)
  {
    int v7 = **(_WORD ***)(result + 312);
    uint64_t v8 = (*(_DWORD *)(result + 48) * v5);
    do
    {
      LOWORD(a4) = *v7;
      *(void *)&a4 = vmovl_s16(*(int16x4_t *)&a4).u64[0];
      float v9 = (float)SLODWORD(a4);
      BOOL v10 = (float)SLODWORD(a4) < v4;
      *(float *)&a4 = -a2;
      if (v10 || (*(float *)&a4 = a2, v9 > a2)) {
        _WORD *v7 = (int)*(float *)&a4;
      }
      ++v7;
      --v8;
    }
    while (v8);
    uint64_t v11 = **(_WORD ***)(result + 304);
    uint64_t v12 = v6;
    do
    {
      LOWORD(a4) = *v11;
      *(void *)&a4 = vmovl_s16(*(int16x4_t *)&a4).u64[0];
      float v13 = (float)SLODWORD(a4);
      BOOL v10 = (float)SLODWORD(a4) < v4;
      *(float *)&a4 = -a2;
      if (v10 || (*(float *)&a4 = a2, v13 > a2)) {
        _WORD *v11 = (int)*(float *)&a4;
      }
      ++v11;
      --v12;
    }
    while (v12);
    int16x8_t v14 = **(_WORD ***)(result + 320);
    do
    {
      LOWORD(a4) = *v14;
      *(void *)&a4 = vmovl_s16(*(int16x4_t *)&a4).u64[0];
      float v15 = (float)SLODWORD(a4);
      BOOL v10 = (float)SLODWORD(a4) < v4;
      *(float *)&a4 = -a2;
      if (v10 || (*(float *)&a4 = a2, v15 > a2)) {
        *int16x8_t v14 = (int)*(float *)&a4;
      }
      ++v14;
      --v6;
    }
    while (v6);
  }
  if (v5)
  {
    uint64_t v16 = (v5 * v5);
    int16x8_t v17 = **(_WORD ***)(result + 336);
    uint64_t v18 = v16;
    do
    {
      LOWORD(a4) = *v17;
      *(void *)&a4 = vmovl_s16(*(int16x4_t *)&a4).u64[0];
      float v19 = (float)SLODWORD(a4);
      BOOL v10 = (float)SLODWORD(a4) < v4;
      *(float *)&a4 = -a2;
      if (v10 || (*(float *)&a4 = a2, v19 > a2)) {
        _WORD *v17 = (int)*(float *)&a4;
      }
      ++v17;
      --v18;
    }
    while (v18);
    int v20 = **(_WORD ***)(result + 328);
    uint64_t v21 = v16;
    do
    {
      LOWORD(a4) = *v20;
      *(void *)&a4 = vmovl_s16(*(int16x4_t *)&a4).u64[0];
      float v22 = (float)SLODWORD(a4);
      BOOL v10 = (float)SLODWORD(a4) < v4;
      *(float *)&a4 = -a2;
      if (v10 || (*(float *)&a4 = a2, v22 > a2)) {
        *int v20 = (int)*(float *)&a4;
      }
      ++v20;
      --v21;
    }
    while (v21);
    uint64_t v23 = **(_WORD ***)(result + 344);
    do
    {
      LOWORD(a4) = *v23;
      *(void *)&a4 = vmovl_s16(*(int16x4_t *)&a4).u64[0];
      float v24 = (float)SLODWORD(a4);
      BOOL v10 = (float)SLODWORD(a4) < v4;
      *(float *)&a4 = -a2;
      if (v10 || (*(float *)&a4 = a2, v24 > a2)) {
        *uint64_t v23 = (int)*(float *)&a4;
      }
      ++v23;
      --v16;
    }
    while (v16);
  }
  return result;
}

uint64_t sub_19E1DA9B4(uint64_t result, float a2, __n128 a3)
{
  int v3 = *(_DWORD *)(result + 52);
  uint64_t v4 = (*(_DWORD *)(result + 48) * v3);
  if ((int)v4 < 1) {
    goto LABEL_23;
  }
  int v5 = **(int16x4_t ***)(result + 312);
  if (v4 < 0x10)
  {
    uint64_t v6 = 0;
LABEL_7:
    uint64_t v10 = v4 - v6;
    uint64_t v11 = (unsigned __int16 *)v5 + v6;
    do
    {
      a3.n128_u16[0] = *v11;
      a3.n128_u64[0] = vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
      a3.n128_f32[0] = (float)a3.n128_i32[0] * a2;
      *v11++ = (int)a3.n128_f32[0];
      --v10;
    }
    while (v10);
    goto LABEL_9;
  }
  uint64_t v6 = v4 & 0x7FFFFFF0;
  int v7 = v5 + 2;
  uint64_t v8 = v4 & 0xFFFFFFF0;
  do
  {
    a3 = (__n128)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(v7[-2])), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v7[-2].i8)), a2)));
    int16x8_t v9 = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*v7)), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v7->i8)), a2)));
    *(__n128 *)v7[-2].i8 = a3;
    *(int16x8_t *)v7->i8 = v9;
    v7 += 4;
    v8 -= 16;
  }
  while (v8);
  if (v6 != v4) {
    goto LABEL_7;
  }
LABEL_9:
  if (v4 >= 0x10)
  {
    uint64_t v12 = v4 & 0x7FFFFFF0;
    float v13 = v5 + 2;
    uint64_t v14 = v4 & 0xFFFFFFF0;
    do
    {
      a3 = (__n128)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(v13[-2])), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v13[-2].i8)), a2)));
      int16x8_t v15 = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*v13)), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v13->i8)), a2)));
      *(__n128 *)v13[-2].i8 = a3;
      *(int16x8_t *)v13->i8 = v15;
      v13 += 4;
      v14 -= 16;
    }
    while (v14);
    if (v12 == v4) {
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  uint64_t v16 = v4 - v12;
  int16x8_t v17 = (unsigned __int16 *)v5 + v12;
  do
  {
    a3.n128_u16[0] = *v17;
    a3.n128_u64[0] = vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
    a3.n128_f32[0] = (float)a3.n128_i32[0] * a2;
    *v17++ = (int)a3.n128_f32[0];
    --v16;
  }
  while (v16);
LABEL_16:
  uint64_t v18 = **(int16x4_t ***)(result + 320);
  if (v4 < 0x10)
  {
    uint64_t v19 = 0;
LABEL_21:
    uint64_t v23 = v4 - v19;
    float v24 = (unsigned __int16 *)v18 + v19;
    do
    {
      a3.n128_u16[0] = *v24;
      a3.n128_u64[0] = vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
      a3.n128_f32[0] = (float)a3.n128_i32[0] * a2;
      *v24++ = (int)a3.n128_f32[0];
      --v23;
    }
    while (v23);
    goto LABEL_23;
  }
  uint64_t v19 = v4 & 0x7FFFFFF0;
  int v20 = v18 + 2;
  uint64_t v21 = v4 & 0xFFFFFFF0;
  do
  {
    a3 = (__n128)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(v20[-2])), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v20[-2].i8)), a2)));
    int16x8_t v22 = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*v20)), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v20->i8)), a2)));
    *(__n128 *)v20[-2].i8 = a3;
    *(int16x8_t *)v20->i8 = v22;
    v20 += 4;
    v21 -= 16;
  }
  while (v21);
  if (v19 != v4) {
    goto LABEL_21;
  }
LABEL_23:
  if (!v3) {
    return result;
  }
  uint64_t v25 = (v3 * v3);
  uint64_t v26 = **(int16x4_t ***)(result + 336);
  if (v25 < 0x10)
  {
    uint64_t v27 = 0;
LABEL_29:
    uint64_t v31 = v25 - v27;
    __int16 v32 = (unsigned __int16 *)v26 + v27;
    do
    {
      a3.n128_u16[0] = *v32;
      a3.n128_u64[0] = vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
      a3.n128_f32[0] = (float)a3.n128_i32[0] * a2;
      *v32++ = (int)a3.n128_f32[0];
      --v31;
    }
    while (v31);
    goto LABEL_31;
  }
  uint64_t v27 = v25 & 0x7FFFFFF0;
  uint64_t v28 = v26 + 2;
  uint64_t v29 = v27;
  do
  {
    a3 = (__n128)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(v28[-2])), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v28[-2].i8)), a2)));
    int16x8_t v30 = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*v28)), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v28->i8)), a2)));
    *(__n128 *)v28[-2].i8 = a3;
    *(int16x8_t *)v28->i8 = v30;
    v28 += 4;
    v29 -= 16;
  }
  while (v29);
  if (v27 != v25) {
    goto LABEL_29;
  }
LABEL_31:
  uint64_t v33 = **(int16x4_t ***)(result + 328);
  if (v25 < 0x10)
  {
    uint64_t v34 = 0;
LABEL_36:
    uint64_t v38 = v25 - v34;
    uint64_t v39 = (unsigned __int16 *)v33 + v34;
    do
    {
      a3.n128_u16[0] = *v39;
      a3.n128_u64[0] = vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
      a3.n128_f32[0] = (float)a3.n128_i32[0] * a2;
      *v39++ = (int)a3.n128_f32[0];
      --v38;
    }
    while (v38);
    goto LABEL_38;
  }
  uint64_t v34 = v25 & 0x7FFFFFF0;
  BOOL v35 = v33 + 2;
  uint64_t v36 = v34;
  do
  {
    a3 = (__n128)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(v35[-2])), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v35[-2].i8)), a2)));
    int16x8_t v37 = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*v35)), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v35->i8)), a2)));
    *(__n128 *)v35[-2].i8 = a3;
    *(int16x8_t *)v35->i8 = v37;
    v35 += 4;
    v36 -= 16;
  }
  while (v36);
  if (v34 != v25) {
    goto LABEL_36;
  }
LABEL_38:
  int16x8_t v40 = **(int16x4_t ***)(result + 344);
  if (v25 < 0x10)
  {
    uint64_t v41 = 0;
LABEL_43:
    uint64_t v45 = v25 - v41;
    uint64_t v46 = (unsigned __int16 *)v40 + v41;
    do
    {
      a3.n128_u16[0] = *v46;
      a3.n128_u64[0] = vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
      a3.n128_f32[0] = (float)a3.n128_i32[0] * a2;
      *v46++ = (int)a3.n128_f32[0];
      --v45;
    }
    while (v45);
    return result;
  }
  uint64_t v41 = v25 & 0x7FFFFFF0;
  uint64_t v42 = v40 + 2;
  uint64_t v43 = v41;
  do
  {
    a3 = (__n128)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(v42[-2])), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v42[-2].i8)), a2)));
    int16x8_t v44 = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*v42)), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v42->i8)), a2)));
    *(__n128 *)v42[-2].i8 = a3;
    *(int16x8_t *)v42->i8 = v44;
    v42 += 4;
    v43 -= 16;
  }
  while (v43);
  if (v41 != v25) {
    goto LABEL_43;
  }
  return result;
}

void sub_19E1DADE8()
{
}

void sub_19E1DB090(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E1DB0A4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_19E1DB0B8(uint64_t a1, uint64_t *a2, int a3, int *a4)
{
  uint64_t v7 = *(int *)(a1 + 52);
  uint64_t v8 = *a2;
  *(_DWORD *)(v8 + 16 * *a4) = v7;
  uint64_t v9 = 8 * a3;
  memmove(**(void ***)(v8 + 16 * *a4 + 8), *(const void **)(*(void *)(a1 + 112) + v9), 4 * v7);
  uint64_t v10 = *a4;
  *a4 = v10 + 1;
  uint64_t v11 = *(int *)(a1 + 52);
  uint64_t v12 = *a2;
  *(_DWORD *)(*a2 + 16 * v10 + 16) = v11;
  uint64_t result = memmove(**(void ***)(v12 + 16 * *a4 + 8), *(const void **)(*(void *)(a1 + 88) + v9), 4 * v11);
  ++*a4;
  return result;
}

void *sub_19E1DB168(uint64_t a1, void *a2, int a3, int *a4)
{
  uint64_t v7 = *(void *)(a1 + 112);
  uint64_t v8 = 8 * a3;
  uint64_t v9 = *a4;
  *a4 = v9 + 1;
  memmove(*(void **)(v7 + v8), **(const void ***)(*a2 + 16 * v9 + 8), 4 * *(int *)(a1 + 52));
  uint64_t v10 = *(void *)(a1 + 88);
  uint64_t v11 = *a4;
  *a4 = v11 + 1;
  size_t v12 = 4 * *(int *)(a1 + 52);
  float v13 = *(void **)(v10 + v8);
  uint64_t v14 = **(const void ***)(*a2 + 16 * v11 + 8);

  return memmove(v13, v14, v12);
}

void sub_19E1DB208(uint64_t a1, void *a2, int *a3)
{
  int v5 = (int *)(*a2 + 16 * *a3);
  bzero(**((void ***)v5 + 1), 4 * *v5);
  uint64_t v6 = *a3;
  *a3 = v6 + 1;
  bzero(**(void ***)(*a2 + 16 * v6 + 24), 4 * *(int *)(*a2 + 16 * v6 + 16));
  ++*a3;
}

void sub_19E1DB280(void *a1)
{
  uint64_t v2 = a1[140];
  BYTE7(v14[2]) = 17;
  strcpy((char *)v14, "GRU before resetGRU before reset ");
  (*(void (**)(uint64_t, _OWORD *))(*(void *)v2 + 40))(v2, &v14[1]);
  if (SBYTE7(v14[2]) < 0) {
    operator delete(*(void **)&v14[1]);
  }
  uint64_t v3 = a1[141];
  BYTE7(v14[2]) = 17;
  strcpy((char *)&v14[2], " ");
  v14[1] = v14[0];
  (*(void (**)(uint64_t, _OWORD *))(*(void *)v3 + 40))(v3, &v14[1]);
  if (SBYTE7(v14[2]) < 0) {
    operator delete(*(void **)&v14[1]);
  }
  uint64_t v4 = a1[142];
  BYTE7(v14[2]) = 17;
  strcpy((char *)&v14[2], " ");
  v14[1] = v14[0];
  (*(void (**)(uint64_t, _OWORD *))(*(void *)v4 + 40))(v4, &v14[1]);
  if (SBYTE7(v14[2]) < 0) {
    operator delete(*(void **)&v14[1]);
  }
  uint64_t v5 = a1[143];
  BYTE7(v14[2]) = 17;
  strcpy((char *)&v14[2], " ");
  v14[1] = v14[0];
  (*(void (**)(uint64_t, _OWORD *))(*(void *)v5 + 40))(v5, &v14[1]);
  if (SBYTE7(v14[2]) < 0) {
    operator delete(*(void **)&v14[1]);
  }
  uint64_t v6 = a1[144];
  BYTE7(v14[2]) = 17;
  strcpy((char *)&v14[2], " ");
  v14[1] = v14[0];
  (*(void (**)(uint64_t, _OWORD *))(*(void *)v6 + 40))(v6, &v14[1]);
  if (SBYTE7(v14[2]) < 0) {
    operator delete(*(void **)&v14[1]);
  }
  uint64_t v7 = a1[145];
  BYTE7(v14[2]) = 17;
  strcpy((char *)&v14[2], " ");
  v14[1] = v14[0];
  (*(void (**)(uint64_t, _OWORD *))(*(void *)v7 + 40))(v7, &v14[1]);
  if (SBYTE7(v14[2]) < 0) {
    operator delete(*(void **)&v14[1]);
  }
  (*(void (**)(void))(*(void *)a1[140] + 16))(a1[140]);
  (*(void (**)(void))(*(void *)a1[141] + 16))(a1[141]);
  (*(void (**)(void))(*(void *)a1[142] + 16))(a1[142]);
  (*(void (**)(void))(*(void *)a1[143] + 16))(a1[143]);
  (*(void (**)(void))(*(void *)a1[144] + 16))(a1[144]);
  (*(void (**)(void))(*(void *)a1[145] + 16))(a1[145]);
  uint64_t v8 = a1[140];
  BYTE7(v14[2]) = 16;
  strcpy((char *)v14, "GRU AFTER reset GRU AFTER reset ");
  (*(void (**)(uint64_t, _OWORD *))(*(void *)v8 + 40))(v8, &v14[1]);
  if (SBYTE7(v14[2]) < 0) {
    operator delete(*(void **)&v14[1]);
  }
  uint64_t v9 = a1[141];
  BYTE7(v14[2]) = 16;
  v14[1] = v14[0];
  LOBYTE(v14[2]) = 0;
  (*(void (**)(uint64_t, _OWORD *))(*(void *)v9 + 40))(v9, &v14[1]);
  if (SBYTE7(v14[2]) < 0) {
    operator delete(*(void **)&v14[1]);
  }
  uint64_t v10 = a1[142];
  BYTE7(v14[2]) = 16;
  v14[1] = v14[0];
  LOBYTE(v14[2]) = 0;
  (*(void (**)(uint64_t, _OWORD *))(*(void *)v10 + 40))(v10, &v14[1]);
  if (SBYTE7(v14[2]) < 0) {
    operator delete(*(void **)&v14[1]);
  }
  uint64_t v11 = a1[143];
  BYTE7(v14[2]) = 16;
  v14[1] = v14[0];
  LOBYTE(v14[2]) = 0;
  (*(void (**)(uint64_t, _OWORD *))(*(void *)v11 + 40))(v11, &v14[1]);
  if (SBYTE7(v14[2]) < 0) {
    operator delete(*(void **)&v14[1]);
  }
  uint64_t v12 = a1[144];
  BYTE7(v14[2]) = 16;
  v14[1] = v14[0];
  LOBYTE(v14[2]) = 0;
  (*(void (**)(uint64_t, _OWORD *))(*(void *)v12 + 40))(v12, &v14[1]);
  if (SBYTE7(v14[2]) < 0) {
    operator delete(*(void **)&v14[1]);
  }
  uint64_t v13 = a1[145];
  BYTE7(v14[2]) = 16;
  v14[1] = v14[0];
  LOBYTE(v14[2]) = 0;
  (*(void (**)(uint64_t, _OWORD *))(*(void *)v13 + 40))(v13, &v14[1]);
  if (SBYTE7(v14[2]) < 0) {
    operator delete(*(void **)&v14[1]);
  }
}

void sub_19E1DB790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E1DB7D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = **(void **)(a1 + 304);
  int v6 = *(_DWORD *)(a1 + 48);
  unsigned int v5 = *(_DWORD *)(a1 + 52);
  uint64_t v8 = *(void **)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  if ((unint64_t)v8 >= v7)
  {
    uint64_t v10 = *(void **)a2;
    uint64_t v11 = (uint64_t)v8 - *(void *)a2;
    unint64_t v12 = (v11 >> 4) + 1;
    if (v12 >> 60) {
      goto LABEL_74;
    }
    uint64_t v13 = v7 - (void)v10;
    if (v13 >> 3 > v12) {
      unint64_t v12 = v13 >> 3;
    }
    BOOL v14 = (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14) {
      unint64_t v15 = v12;
    }
    if (v15 >> 60) {
      goto LABEL_75;
    }
    uint64_t v16 = 16 * v15;
    int16x8_t v17 = (char *)operator new(16 * v15);
    uint64_t v18 = &v17[16 * (v11 >> 4)];
    *(void *)uint64_t v18 = v4;
    uint64_t v9 = v18 + 16;
    uint64_t v19 = &v17[v11];
    *((_DWORD *)v19 + 2) = v5;
    for (*((_DWORD *)v19 + 3) = v6; v8 != v10; *((void *)v18 + 1) = v8[1])
    {
      uint64_t v20 = *(v8 - 2);
      v8 -= 2;
      *((void *)v18 - 2) = v20;
      v18 -= 16;
    }
    *(void *)a2 = v18;
    *(void *)(a2 + 8) = v9;
    *(void *)(a2 + 16) = &v17[v16];
    if (v10)
    {
      operator delete(v10);
      int v6 = *(_DWORD *)(a1 + 48);
      unsigned int v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    *uint64_t v8 = v4;
    uint64_t v9 = v8 + 2;
    *((_DWORD *)v8 + 2) = v5;
    *((_DWORD *)v8 + 3) = v6;
  }
  *(void *)(a2 + 8) = v9;
  uint64_t v21 = **(void **)(a1 + 312);
  unint64_t v22 = *(void *)(a2 + 16);
  if ((unint64_t)v9 >= v22)
  {
    float v24 = *(void **)a2;
    uint64_t v25 = (uint64_t)v9 - *(void *)a2;
    unint64_t v26 = (v25 >> 4) + 1;
    if (v26 >> 60) {
      goto LABEL_74;
    }
    uint64_t v27 = v22 - (void)v24;
    if (v27 >> 3 > v26) {
      unint64_t v26 = v27 >> 3;
    }
    BOOL v14 = (unint64_t)v27 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v28 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14) {
      unint64_t v28 = v26;
    }
    if (v28 >> 60) {
      goto LABEL_75;
    }
    uint64_t v29 = 16 * v28;
    int16x8_t v30 = (char *)operator new(16 * v28);
    uint64_t v31 = &v30[16 * (v25 >> 4)];
    *(void *)uint64_t v31 = v21;
    uint64_t v23 = v31 + 16;
    __int16 v32 = &v30[v25];
    *((_DWORD *)v32 + 2) = v5;
    for (*((_DWORD *)v32 + 3) = v6; v9 != v24; *((void *)v31 + 1) = v9[1])
    {
      uint64_t v33 = *(v9 - 2);
      v9 -= 2;
      *((void *)v31 - 2) = v33;
      v31 -= 16;
    }
    *(void *)a2 = v31;
    *(void *)(a2 + 8) = v23;
    *(void *)(a2 + 16) = &v30[v29];
    if (v24)
    {
      operator delete(v24);
      int v6 = *(_DWORD *)(a1 + 48);
      unsigned int v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    *uint64_t v9 = v21;
    uint64_t v23 = v9 + 2;
    *((_DWORD *)v9 + 2) = v5;
    *((_DWORD *)v9 + 3) = v6;
  }
  *(void *)(a2 + 8) = v23;
  uint64_t v34 = **(void **)(a1 + 320);
  unint64_t v35 = *(void *)(a2 + 16);
  if ((unint64_t)v23 >= v35)
  {
    int16x8_t v37 = *(void **)a2;
    uint64_t v38 = (uint64_t)v23 - *(void *)a2;
    unint64_t v39 = (v38 >> 4) + 1;
    if (v39 >> 60) {
      goto LABEL_74;
    }
    uint64_t v40 = v35 - (void)v37;
    if (v40 >> 3 > v39) {
      unint64_t v39 = v40 >> 3;
    }
    BOOL v14 = (unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v41 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14) {
      unint64_t v41 = v39;
    }
    if (v41 >> 60) {
      goto LABEL_75;
    }
    uint64_t v42 = 16 * v41;
    uint64_t v43 = (char *)operator new(16 * v41);
    int16x8_t v44 = &v43[16 * (v38 >> 4)];
    *(void *)int16x8_t v44 = v34;
    uint64_t v36 = v44 + 16;
    uint64_t v45 = &v43[v38];
    *((_DWORD *)v45 + 2) = v5;
    for (*((_DWORD *)v45 + 3) = v6; v23 != v37; *((void *)v44 + 1) = v23[1])
    {
      uint64_t v46 = *(v23 - 2);
      v23 -= 2;
      *((void *)v44 - 2) = v46;
      v44 -= 16;
    }
    *(void *)a2 = v44;
    *(void *)(a2 + 8) = v36;
    *(void *)(a2 + 16) = &v43[v42];
    if (v37)
    {
      operator delete(v37);
      unsigned int v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    *uint64_t v23 = v34;
    uint64_t v36 = v23 + 2;
    *((_DWORD *)v23 + 2) = v5;
    *((_DWORD *)v23 + 3) = v6;
  }
  *(void *)(a2 + 8) = v36;
  uint64_t v47 = **(void **)(a1 + 328);
  unint64_t v48 = *(void *)(a2 + 16);
  if ((unint64_t)v36 >= v48)
  {
    BOOL v50 = *(void **)a2;
    uint64_t v51 = (uint64_t)v36 - *(void *)a2;
    unint64_t v52 = (v51 >> 4) + 1;
    if (v52 >> 60) {
      goto LABEL_74;
    }
    uint64_t v53 = v48 - (void)v50;
    if (v53 >> 3 > v52) {
      unint64_t v52 = v53 >> 3;
    }
    BOOL v14 = (unint64_t)v53 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v54 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14) {
      unint64_t v54 = v52;
    }
    if (v54 >> 60) {
      goto LABEL_75;
    }
    uint64_t v55 = 16 * v54;
    uint64_t v56 = (char *)operator new(16 * v54);
    uint64_t v57 = &v56[16 * (v51 >> 4)];
    *(void *)uint64_t v57 = v47;
    uint64_t v49 = v57 + 16;
    for (*(int32x2_t *)&v56[v51 + 8] = vdup_n_s32(v5); v36 != v50; *((void *)v57 + 1) = v36[1])
    {
      uint64_t v58 = *(v36 - 2);
      v36 -= 2;
      *((void *)v57 - 2) = v58;
      v57 -= 16;
    }
    *(void *)a2 = v57;
    *(void *)(a2 + 8) = v49;
    *(void *)(a2 + 16) = &v56[v55];
    if (v50)
    {
      operator delete(v50);
      unsigned int v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    void *v36 = v47;
    uint64_t v49 = v36 + 2;
    *((_DWORD *)v36 + 2) = v5;
    *((_DWORD *)v36 + 3) = v5;
  }
  *(void *)(a2 + 8) = v49;
  uint64_t v59 = **(void **)(a1 + 336);
  unint64_t v60 = *(void *)(a2 + 16);
  if ((unint64_t)v49 < v60)
  {
    *uint64_t v49 = v59;
    uint64_t v61 = v49 + 2;
    *((_DWORD *)v49 + 2) = v5;
    *((_DWORD *)v49 + 3) = v5;
    goto LABEL_61;
  }
  uint64_t v62 = *(void **)a2;
  uint64_t v63 = (uint64_t)v49 - *(void *)a2;
  unint64_t v64 = (v63 >> 4) + 1;
  if (v64 >> 60) {
    goto LABEL_74;
  }
  uint64_t v65 = v60 - (void)v62;
  if (v65 >> 3 > v64) {
    unint64_t v64 = v65 >> 3;
  }
  BOOL v14 = (unint64_t)v65 >= 0x7FFFFFFFFFFFFFF0;
  unint64_t v66 = 0xFFFFFFFFFFFFFFFLL;
  if (!v14) {
    unint64_t v66 = v64;
  }
  if (v66 >> 60) {
LABEL_75:
  }
    sub_19E13C418();
  uint64_t v67 = 16 * v66;
  int16x8_t v68 = (char *)operator new(16 * v66);
  uint64_t v69 = &v68[16 * (v63 >> 4)];
  *(void *)uint64_t v69 = v59;
  uint64_t v61 = v69 + 16;
  for (*(int32x2_t *)&v68[v63 + 8] = vdup_n_s32(v5); v49 != v62; *((void *)v69 + 1) = v49[1])
  {
    uint64_t v70 = *(v49 - 2);
    v49 -= 2;
    *((void *)v69 - 2) = v70;
    v69 -= 16;
  }
  *(void *)a2 = v69;
  *(void *)(a2 + 8) = v61;
  *(void *)(a2 + 16) = &v68[v67];
  if (v62)
  {
    operator delete(v62);
    unsigned int v5 = *(_DWORD *)(a1 + 52);
  }
LABEL_61:
  *(void *)(a2 + 8) = v61;
  uint64_t v71 = **(void **)(a1 + 344);
  unint64_t v72 = *(void *)(a2 + 16);
  if ((unint64_t)v61 < v72)
  {
    *uint64_t v61 = v71;
    __int16 v73 = v61 + 2;
    *((_DWORD *)v61 + 2) = v5;
    *((_DWORD *)v61 + 3) = v5;
    goto LABEL_73;
  }
  BOOL v74 = *(void **)a2;
  uint64_t v75 = (uint64_t)v61 - *(void *)a2;
  unint64_t v76 = (v75 >> 4) + 1;
  if (v76 >> 60) {
LABEL_74:
  }
    sub_19E13D694();
  uint64_t v77 = v72 - (void)v74;
  if (v77 >> 3 > v76) {
    unint64_t v76 = v77 >> 3;
  }
  BOOL v14 = (unint64_t)v77 >= 0x7FFFFFFFFFFFFFF0;
  unint64_t v78 = 0xFFFFFFFFFFFFFFFLL;
  if (!v14) {
    unint64_t v78 = v76;
  }
  if (v78 >> 60) {
    goto LABEL_75;
  }
  uint64_t v79 = 16 * v78;
  uint64_t v80 = (char *)operator new(16 * v78);
  int16x8_t v81 = &v80[16 * (v75 >> 4)];
  *(void *)int16x8_t v81 = v71;
  __int16 v73 = v81 + 16;
  for (*(int32x2_t *)&v80[v75 + 8] = vdup_n_s32(v5); v61 != v74; *((void *)v81 + 1) = v61[1])
  {
    uint64_t v82 = *(v61 - 2);
    v61 -= 2;
    *((void *)v81 - 2) = v82;
    v81 -= 16;
  }
  *(void *)a2 = v81;
  *(void *)(a2 + 8) = v73;
  *(void *)(a2 + 16) = &v80[v79];
  if (v74) {
    operator delete(v74);
  }
LABEL_73:
  *(void *)(a2 + 8) = v73;
}

uint64_t sub_19E1DBCCC(uint64_t result)
{
  *(unsigned char *)(result + 42) = 1;
  return result;
}

uint64_t sub_19E1DBCD8(uint64_t result)
{
  *(unsigned char *)(result + 42) = 0;
  return result;
}

void sub_19E1DBCE0(uint64_t a1)
{
}

void sub_19E1DBD68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E1DBD84(void *a1)
{
  uint64_t v2 = a1[250];
  uint64_t v3 = a1[249];
  if (v2 == v3)
  {
    uint64_t v3 = a1[250];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      unsigned int v5 = *(void **)(v3 + 8 * v4);
      if (v5)
      {
        operator delete[](v5);
        uint64_t v2 = a1[250];
        uint64_t v3 = a1[249];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  uint64_t v6 = a1[253];
  uint64_t v7 = a1[252];
  if (v6 != v7)
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(void **)(v7 + 8 * v8);
      if (v9)
      {
        operator delete[](v9);
        uint64_t v6 = a1[253];
        uint64_t v7 = a1[252];
      }
      ++v8;
    }
    while (v8 < (v6 - v7) >> 3);
    a1[250] = a1[249];
    a1[253] = v7;
    uint64_t v10 = a1[102];
    uint64_t v11 = a1[101];
    if (v10 != v11) {
      goto LABEL_13;
    }
LABEL_18:
    uint64_t v11 = v10;
    goto LABEL_19;
  }
  a1[250] = v3;
  a1[253] = v6;
  uint64_t v10 = a1[102];
  uint64_t v11 = a1[101];
  if (v10 == v11) {
    goto LABEL_18;
  }
LABEL_13:
  unint64_t v12 = 0;
  do
  {
    uint64_t v13 = *(void **)(v11 + 8 * v12);
    if (v13)
    {
      operator delete[](v13);
      uint64_t v10 = a1[102];
      uint64_t v11 = a1[101];
    }
    ++v12;
  }
  while (v12 < (v10 - v11) >> 3);
LABEL_19:
  a1[102] = v11;
  BOOL v14 = (void *)a1[99];
  if (v14)
  {
    operator delete(v14);
    a1[99] = 0;
  }
  unint64_t v15 = (void *)a1[98];
  if (v15)
  {
    operator delete(v15);
    a1[98] = 0;
  }
  uint64_t v16 = a1[132];
  uint64_t v17 = a1[131];
  if (v16 == v17)
  {
    uint64_t v17 = a1[132];
  }
  else
  {
    unint64_t v18 = 0;
    do
    {
      uint64_t v19 = *(void **)(v17 + 8 * v18);
      if (v19)
      {
        operator delete[](v19);
        uint64_t v16 = a1[132];
        uint64_t v17 = a1[131];
      }
      ++v18;
    }
    while (v18 < (v16 - v17) >> 3);
  }
  a1[132] = v17;
  uint64_t v20 = (void *)a1[129];
  if (v20)
  {
    operator delete(v20);
    a1[129] = 0;
  }
  uint64_t v21 = (void *)a1[128];
  if (v21)
  {
    operator delete(v21);
    a1[128] = 0;
  }
  uint64_t v22 = a1[117];
  uint64_t v23 = a1[116];
  if (v22 == v23)
  {
    uint64_t v23 = a1[117];
  }
  else
  {
    unint64_t v24 = 0;
    do
    {
      uint64_t v25 = *(void **)(v23 + 8 * v24);
      if (v25)
      {
        operator delete[](v25);
        uint64_t v22 = a1[117];
        uint64_t v23 = a1[116];
      }
      ++v24;
    }
    while (v24 < (v22 - v23) >> 3);
  }
  a1[117] = v23;
  unint64_t v26 = (void *)a1[114];
  if (v26)
  {
    operator delete(v26);
    a1[114] = 0;
  }
  uint64_t v27 = (void *)a1[113];
  if (v27)
  {
    operator delete(v27);
    a1[113] = 0;
  }
}

uint64_t sub_19E1DBF88(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_19E1DBF90(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

uint64_t sub_19E1DBF9C(uint64_t result, float a2, __n128 a3)
{
  uint64_t v3 = result;
  unsigned int v4 = *(_DWORD *)(result + 52);
  int v5 = (int)a2;
  if (*(int *)(result + 56) >= 1)
  {
    sub_19E1C703C(result + 712, (float)v5, result + 240, v4);
    sub_19E1C703C(v3 + 952, (float)v5, v3 + 248, *(_DWORD *)(v3 + 52));
    uint64_t result = sub_19E1C703C(v3 + 832, (float)v5, v3 + 232, *(_DWORD *)(v3 + 52));
    goto LABEL_25;
  }
  uint64_t v6 = v4 * *(_DWORD *)(result + 48);
  if ((int)v6 < 1) {
    goto LABEL_25;
  }
  uint64_t v7 = *(void *)(result + 240);
  uint64_t v8 = *(void *)(result + 1072);
  float v9 = (float)v5;
  if (v6 < 8)
  {
    uint64_t v10 = 0;
LABEL_9:
    uint64_t v16 = v6 - v10;
    uint64_t v17 = (float *)(v8 + 4 * v10);
    unint64_t v18 = (unsigned __int16 *)(v7 + 2 * v10);
    do
    {
      a3.n128_u16[0] = *v18;
      a3.n128_u64[0] = vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
      float v19 = *v17++;
      a3.n128_f32[0] = (float)a3.n128_i32[0] + (float)(v19 * v9);
      *v18++ = (int)a3.n128_f32[0];
      --v16;
    }
    while (v16);
    goto LABEL_11;
  }
  uint64_t v10 = v6 & 0x7FFFFFF8;
  uint64_t v11 = v6 & 0xFFFFFFF8;
  unint64_t v12 = *(float32x4_t **)(result + 1072);
  uint64_t v13 = *(int16x4_t **)(result + 240);
  do
  {
    float32x4_t v14 = *v12;
    float32x4_t v15 = v12[1];
    v12 += 2;
    a3 = (__n128)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmlaq_n_f32(vcvtq_f32_s32(vmovl_s16(*v13)), v14, v9)), (int16x8_t)vcvtq_s32_f32(vmlaq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v13->i8)), v15, v9)));
    *(__n128 *)v13->i8 = a3;
    v13 += 2;
    v11 -= 8;
  }
  while (v11);
  if (v10 != v6) {
    goto LABEL_9;
  }
LABEL_11:
  uint64_t v20 = *(void *)(result + 248);
  uint64_t v21 = *(void *)(result + 1088);
  if (v6 >= 8)
  {
    uint64_t v22 = v6 & 0x7FFFFFF8;
    uint64_t v23 = v6 & 0xFFFFFFF8;
    unint64_t v24 = *(float32x4_t **)(result + 1088);
    uint64_t v25 = *(int16x4_t **)(result + 248);
    do
    {
      float32x4_t v26 = *v24;
      float32x4_t v27 = v24[1];
      v24 += 2;
      a3 = (__n128)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmlaq_n_f32(vcvtq_f32_s32(vmovl_s16(*v25)), v26, v9)), (int16x8_t)vcvtq_s32_f32(vmlaq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v25->i8)), v27, v9)));
      *(__n128 *)v25->i8 = a3;
      v25 += 2;
      v23 -= 8;
    }
    while (v23);
    if (v22 == v6) {
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v22 = 0;
  }
  uint64_t v28 = v6 - v22;
  uint64_t v29 = (float *)(v21 + 4 * v22);
  int16x8_t v30 = (unsigned __int16 *)(v20 + 2 * v22);
  do
  {
    a3.n128_u16[0] = *v30;
    a3.n128_u64[0] = vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
    float v31 = *v29++;
    a3.n128_f32[0] = (float)a3.n128_i32[0] + (float)(v31 * v9);
    *v30++ = (int)a3.n128_f32[0];
    --v28;
  }
  while (v28);
LABEL_18:
  uint64_t v32 = *(void *)(result + 232);
  uint64_t v33 = *(void *)(result + 1080);
  if (v6 < 8)
  {
    uint64_t v34 = 0;
LABEL_23:
    uint64_t v40 = v6 - v34;
    unint64_t v41 = (float *)(v33 + 4 * v34);
    uint64_t v42 = (unsigned __int16 *)(v32 + 2 * v34);
    do
    {
      a3.n128_u16[0] = *v42;
      a3.n128_u64[0] = vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
      float v43 = *v41++;
      a3.n128_f32[0] = (float)a3.n128_i32[0] + (float)(v43 * v9);
      *v42++ = (int)a3.n128_f32[0];
      --v40;
    }
    while (v40);
    goto LABEL_25;
  }
  uint64_t v34 = v6 & 0x7FFFFFF8;
  uint64_t v35 = v6 & 0xFFFFFFF8;
  uint64_t v36 = *(float32x4_t **)(result + 1080);
  int16x8_t v37 = *(int16x4_t **)(result + 232);
  do
  {
    float32x4_t v38 = *v36;
    float32x4_t v39 = v36[1];
    v36 += 2;
    a3 = (__n128)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmlaq_n_f32(vcvtq_f32_s32(vmovl_s16(*v37)), v38, v9)), (int16x8_t)vcvtq_s32_f32(vmlaq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v37->i8)), v39, v9)));
    *(__n128 *)v37->i8 = a3;
    v37 += 2;
    v35 -= 8;
  }
  while (v35);
  if (v34 != v6) {
    goto LABEL_23;
  }
LABEL_25:
  if (!v4) {
    return result;
  }
  uint64_t v44 = v4 * v4;
  uint64_t v45 = *(void *)(v3 + 264);
  uint64_t v46 = *(void *)(v3 + 1096);
  float v47 = (float)v5;
  if (v44 < 8)
  {
    uint64_t v48 = 0;
LABEL_31:
    uint64_t v54 = v44 - v48;
    uint64_t v55 = (float *)(v46 + 4 * v48);
    uint64_t v56 = (unsigned __int16 *)(v45 + 2 * v48);
    do
    {
      a3.n128_u16[0] = *v56;
      a3.n128_u64[0] = vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
      float v57 = *v55++;
      a3.n128_f32[0] = (float)a3.n128_i32[0] + (float)(v57 * v47);
      *v56++ = (int)a3.n128_f32[0];
      --v54;
    }
    while (v54);
    goto LABEL_33;
  }
  uint64_t v48 = v44 & 0x7FFFFFF8;
  uint64_t v49 = v48;
  BOOL v50 = *(float32x4_t **)(v3 + 1096);
  uint64_t v51 = *(int16x4_t **)(v3 + 264);
  do
  {
    float32x4_t v52 = *v50;
    float32x4_t v53 = v50[1];
    v50 += 2;
    a3 = (__n128)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmlaq_n_f32(vcvtq_f32_s32(vmovl_s16(*v51)), v52, v47)), (int16x8_t)vcvtq_s32_f32(vmlaq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v51->i8)), v53, v47)));
    *(__n128 *)v51->i8 = a3;
    v51 += 2;
    v49 -= 8;
  }
  while (v49);
  if (v48 != v44) {
    goto LABEL_31;
  }
LABEL_33:
  uint64_t v58 = *(void *)(v3 + 272);
  uint64_t v59 = *(void *)(v3 + 1112);
  if (v44 < 8)
  {
    uint64_t v60 = 0;
LABEL_38:
    uint64_t v66 = v44 - v60;
    uint64_t v67 = (float *)(v59 + 4 * v60);
    int16x8_t v68 = (unsigned __int16 *)(v58 + 2 * v60);
    do
    {
      a3.n128_u16[0] = *v68;
      a3.n128_u64[0] = vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
      float v69 = *v67++;
      a3.n128_f32[0] = (float)a3.n128_i32[0] + (float)(v69 * v47);
      *v68++ = (int)a3.n128_f32[0];
      --v66;
    }
    while (v66);
    goto LABEL_40;
  }
  uint64_t v60 = v44 & 0x7FFFFFF8;
  uint64_t v61 = v60;
  uint64_t v62 = *(float32x4_t **)(v3 + 1112);
  uint64_t v63 = *(int16x4_t **)(v3 + 272);
  do
  {
    float32x4_t v64 = *v62;
    float32x4_t v65 = v62[1];
    v62 += 2;
    a3 = (__n128)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmlaq_n_f32(vcvtq_f32_s32(vmovl_s16(*v63)), v64, v47)), (int16x8_t)vcvtq_s32_f32(vmlaq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v63->i8)), v65, v47)));
    *(__n128 *)v63->i8 = a3;
    v63 += 2;
    v61 -= 8;
  }
  while (v61);
  if (v60 != v44) {
    goto LABEL_38;
  }
LABEL_40:
  uint64_t v70 = *(void *)(v3 + 256);
  uint64_t v71 = *(void *)(v3 + 1104);
  if (v44 < 8)
  {
    uint64_t v72 = 0;
LABEL_45:
    uint64_t v78 = v44 - v72;
    uint64_t v79 = (float *)(v71 + 4 * v72);
    uint64_t v80 = (unsigned __int16 *)(v70 + 2 * v72);
    do
    {
      a3.n128_u16[0] = *v80;
      a3.n128_u64[0] = vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
      float v81 = *v79++;
      a3.n128_f32[0] = (float)a3.n128_i32[0] + (float)(v81 * v47);
      *v80++ = (int)a3.n128_f32[0];
      --v78;
    }
    while (v78);
    return result;
  }
  uint64_t v72 = v44 & 0x7FFFFFF8;
  uint64_t v73 = v72;
  BOOL v74 = *(float32x4_t **)(v3 + 1104);
  uint64_t v75 = *(int16x4_t **)(v3 + 256);
  do
  {
    float32x4_t v76 = *v74;
    float32x4_t v77 = v74[1];
    v74 += 2;
    a3 = (__n128)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmlaq_n_f32(vcvtq_f32_s32(vmovl_s16(*v75)), v76, v47)), (int16x8_t)vcvtq_s32_f32(vmlaq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v75->i8)), v77, v47)));
    *(__n128 *)v75->i8 = a3;
    v75 += 2;
    v73 -= 8;
  }
  while (v73);
  if (v72 != v44) {
    goto LABEL_45;
  }
  return result;
}

void sub_19E1DC3D0(uint64_t a1, uint64_t a2, void *a3, void *a4, int a5)
{
  int v275 = a5 - 1;
  if (a5 >= 1)
  {
    uint64_t v273 = (void **)(a1 + 1168);
    uint64_t v271 = (void **)(a1 + 1184);
    uint64_t v6 = (float32x4_t **)(a1 + 1176);
    int v7 = a5 - 1;
    while (1)
    {
      if (*(unsigned char *)(a1 + 2040)) {
        int v9 = v275 - v7;
      }
      else {
        int v9 = v7;
      }
      if (*(unsigned char *)(a1 + 2040)) {
        BOOL v10 = v9 < v275;
      }
      else {
        BOOL v10 = v9 > 0;
      }
      if (*(unsigned char *)(a1 + 2040)) {
        BOOL v11 = v9 > 0;
      }
      else {
        BOOL v11 = v9 < v275;
      }
      if (*(unsigned char *)(a1 + 2040)) {
        int v12 = v9 + 1;
      }
      else {
        int v12 = v9 - 1;
      }
      int v272 = v12;
      memmove(*(void **)(*(void *)(a1 + 584) + 8 * v9), *(const void **)(*a4 + 8 * v9), 4 * *(int *)(a1 + 52));
      uint64_t v13 = 8 * v9;
      if (v11)
      {
        bzero(*(void **)(a1 + 704), 4 * *(int *)(a1 + 52));
        sub_19E1C7A94();
      }
      sub_19E1C7244(v273, (const void **)(*(void *)(a1 + 424) + v13), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 528));
      sub_19E1C7244(v271, (const void **)(*(void *)(a1 + 400) + v13), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 524));
      sub_19E1C7244((void **)(a1 + 1176), (const void **)(*(void *)(a1 + 376) + v13), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 520));
      bzero(*(void **)(*(void *)(a1 + 608) + 8 * v9), 4 * *(int *)(a1 + 52));
      uint64_t v14 = *(void *)(a1 + 608);
      uint64_t v15 = *(unsigned int *)(a1 + 52);
      uint64_t v16 = (int)v15;
      if ((int)v15 <= 0)
      {
        int v35 = -8 * (-(int)v15 >> 3);
        if (v35 >= (int)v16) {
          goto LABEL_37;
        }
LABEL_29:
        uint64_t v36 = *(void *)(v14 + 8 * v9);
        int16x8_t v37 = (char *)*v273;
        unint64_t v38 = v35;
        unint64_t v39 = v16 - v35;
        if (v39 < 8) {
          goto LABEL_35;
        }
        unint64_t v40 = v36 + 4 * v35;
        unint64_t v41 = (unint64_t)&v37[4 * v35];
        if (v40 < (unint64_t)&v37[4 * v16] && v41 < v36 + 4 * v16) {
          goto LABEL_35;
        }
        unint64_t v42 = v39 - (v16 & 7) + v35;
        uint64_t v43 = v35 + (unint64_t)(v16 & 7) - v16;
        uint64_t v44 = (float32x4_t *)(v40 + 16);
        uint64_t v45 = (float32x4_t *)(v41 + 16);
        do
        {
          float32x4_t v46 = vmulq_f32(*v45, *v44);
          v44[-1] = vmulq_f32(v45[-1], v44[-1]);
          *uint64_t v44 = v46;
          v44 += 2;
          v45 += 2;
          v43 += 8;
        }
        while (v43);
        unint64_t v38 = v42;
        if ((v16 & 7) != 0)
        {
LABEL_35:
          uint64_t v47 = v16 - v38;
          uint64_t v48 = (float *)&v37[4 * v38];
          uint64_t v49 = (float *)(v36 + 4 * v38);
          do
          {
            float v50 = *v48++;
            *uint64_t v49 = v50 * *v49;
            ++v49;
            --v47;
          }
          while (v47);
        }
        goto LABEL_37;
      }
      uint64_t v17 = *(float32x4_t **)(*(void *)(a1 + 584) + 8 * v9);
      unint64_t v18 = *(float32x4_t **)(*(void *)(a1 + 448) + 8 * v9);
      unint64_t v19 = *(void *)(v14 + 8 * v9);
      if (v15 < 8) {
        break;
      }
      uint64_t v20 = 0;
      unint64_t v79 = v19 + 4 * v15;
      BOOL v81 = v19 < (unint64_t)v18->u64 + 4 * v15 && (unint64_t)v18 < v79;
      if ((unint64_t)v17 < v79 && v19 < (unint64_t)v17->u64 + 4 * v15) {
        goto LABEL_21;
      }
      if (v81) {
        goto LABEL_21;
      }
      uint64_t v20 = v15 & 0x7FFFFFF8;
      uint64_t v83 = v17 + 1;
      int v84 = v18 + 1;
      uint64_t v85 = (float32x4_t *)(v19 + 16);
      uint64_t v86 = v15 & 0xFFFFFFF8;
      do
      {
        float32x4_t v87 = vaddq_f32(vmlsq_f32(*v83, *v83, *v84), *v85);
        v85[-1] = vaddq_f32(vmlsq_f32(v83[-1], v83[-1], v84[-1]), v85[-1]);
        float32x4_t *v85 = v87;
        v83 += 2;
        v84 += 2;
        v85 += 2;
        v86 -= 8;
      }
      while (v86);
      if (v20 != v15) {
        goto LABEL_21;
      }
LABEL_23:
      int v29 = (int)v15 / 8;
      if ((int)v15 > 7)
      {
        uint64_t v30 = 0;
        float v31 = (char *)*v273;
        do
        {
          uint64_t v32 = (float32x4_t *)(v19 + 32 * v30);
          uint64_t v33 = (float32x4_t *)&v31[32 * v30];
          float32x4_t v34 = vmulq_f32(v33[1], v32[1]);
          float32x4_t *v32 = vmulq_f32(*v33, *v32);
          v32[1] = v34;
          ++v30;
        }
        while (v29 != v30);
      }
      int v35 = 8 * v29;
      if (8 * v29 < (int)v16) {
        goto LABEL_29;
      }
LABEL_37:
      uint64_t v51 = *(void *)(a1 + 632);
      if (!v10)
      {
        memmove(*(void **)(v51 + 8 * v9), *(const void **)(*(void *)(a1 + 496) + 8 * v9), 4 * *(int *)(a1 + 52));
        uint64_t v74 = *(void *)(a1 + 632);
        uint64_t v75 = *(unsigned int *)(a1 + 52);
        uint64_t v76 = (int)v75;
        if ((int)v75 <= 0)
        {
          float32x4_t v130 = (uint64_t *)(*(void *)(a1 + 584) + 8 * v9);
          int v131 = -(-(int)v75 >> 3);
        }
        else
        {
          float32x4_t v77 = *(float32x4_t **)(v74 + 8 * v9);
          if (v75 < 8)
          {
            uint64_t v78 = 0;
            goto LABEL_105;
          }
          uint64_t v78 = v75 & 0x7FFFFFF8;
          uint64_t v137 = v77 + 1;
          uint64_t v138 = v75 & 0xFFFFFFF8;
          do
          {
            float32x4_t v139 = vnegq_f32(*v137);
            v137[-1] = vnegq_f32(v137[-1]);
            *uint64_t v137 = v139;
            v137 += 2;
            v138 -= 8;
          }
          while (v138);
          if (v78 != v75)
          {
LABEL_105:
            uint64_t v140 = v75 - v78;
            unint64_t v141 = &v77->f32[v78];
            do
            {
              *unint64_t v141 = -*v141;
              ++v141;
              --v140;
            }
            while (v140);
          }
          float32x4_t v130 = (uint64_t *)(*(void *)(a1 + 584) + 8 * v9);
          int v131 = (int)v75 / 8;
          if ((int)v75 > 7)
          {
            uint64_t v142 = 0;
            uint64_t v143 = *v130;
            do
            {
              float v144 = &v77[2 * v142];
              uint64_t v145 = (float32x4_t *)(v143 + 32 * v142);
              float32x4_t v146 = vmulq_f32(v144[1], v145[1]);
              *float v144 = vmulq_f32(*v144, *v145);
              v144[1] = v146;
              ++v142;
            }
            while (v131 != v142);
          }
        }
        int v147 = 8 * v131;
        if (8 * v131 < (int)v76)
        {
          uint64_t v148 = *v130;
          uint64_t v149 = *(void *)(v74 + 8 * v9);
          unint64_t v150 = v147;
          unint64_t v151 = v76 - v147;
          if (v151 < 8) {
            goto LABEL_117;
          }
          unint64_t v152 = v149 + 4 * v147;
          unint64_t v153 = v148 + 4 * v147;
          if (v152 < v148 + 4 * v76 && v153 < v149 + 4 * v76) {
            goto LABEL_117;
          }
          unint64_t v154 = v151 - (v76 & 7) + v147;
          uint64_t v155 = v147 + (unint64_t)(v76 & 7) - v76;
          uint64_t v156 = (float32x4_t *)(v153 + 16);
          BOOL v157 = (float32x4_t *)(v152 + 16);
          do
          {
            float32x4_t v158 = vmulq_f32(*v157, *v156);
            v157[-1] = vmulq_f32(v157[-1], v156[-1]);
            float32x4_t *v157 = v158;
            v156 += 2;
            v157 += 2;
            v155 += 8;
          }
          while (v155);
          unint64_t v150 = v154;
          if ((v76 & 7) != 0)
          {
LABEL_117:
            uint64_t v159 = v76 - v150;
            uint64_t v160 = (float *)(v149 + 4 * v150);
            uint64_t v161 = (float *)(v148 + 4 * v150);
            do
            {
              float v162 = *v161++;
              float *v160 = *v160 * v162;
              ++v160;
              --v159;
            }
            while (v159);
          }
        }
        uint64_t v163 = *(void *)(a1 + 632);
        uint64_t v164 = *(int *)(a1 + 52);
        int v165 = (int)v164 / 8;
        if ((int)v164 >= 8)
        {
          float32x2_t v166 = *(float32x4_t **)(v163 + 8 * v9);
          float32x4_t v167 = *v6;
          int v168 = (int)v164 / 8;
          do
          {
            float32x4_t v169 = *v167;
            float32x4_t v170 = v167[1];
            v167 += 2;
            float32x4_t v171 = vmulq_f32(v170, v166[1]);
            float32x4_t *v166 = vmulq_f32(v169, *v166);
            v166[1] = v171;
            v166 += 2;
            --v168;
          }
          while (v168);
        }
        int v172 = 8 * v165;
        if (8 * v165 < (int)v164)
        {
          uint64_t v173 = *(void *)(v163 + 8 * v9);
          uint64_t v174 = *v6;
          unint64_t v175 = v172;
          unint64_t v176 = v164 - v172;
          if (v176 < 8) {
            goto LABEL_132;
          }
          unint64_t v177 = v173 + 4 * v172;
          unint64_t v178 = (unint64_t)&v174[v172 / 4u];
          if (v177 < (unint64_t)v174->u64 + 4 * v164 && v178 < v173 + 4 * v164) {
            goto LABEL_132;
          }
          unint64_t v180 = v176 - (v164 & 7) + v172;
          uint64_t v181 = v172 + (unint64_t)(v164 & 7) - v164;
          __int16 v182 = (float32x4_t *)(v177 + 16);
          uint64_t v183 = (float32x4_t *)(v178 + 16);
          do
          {
            float32x4_t v184 = vmulq_f32(*v183, *v182);
            v182[-1] = vmulq_f32(v183[-1], v182[-1]);
            *__int16 v182 = v184;
            v182 += 2;
            v183 += 2;
            v181 += 8;
          }
          while (v181);
          unint64_t v175 = v180;
          if ((v164 & 7) != 0)
          {
LABEL_132:
            uint64_t v185 = v164 - v175;
            float v186 = &v174->f32[v175];
            int v187 = (float *)(v173 + 4 * v175);
            do
            {
              float v188 = *v186++;
              *int v187 = v188 * *v187;
              ++v187;
              --v185;
            }
            while (v185);
          }
        }
        goto LABEL_134;
      }
      uint64_t v52 = *(unsigned int *)(a1 + 52);
      uint64_t v53 = (int)v52;
      if ((int)v52 > 0)
      {
        uint64_t v54 = *(float32x4_t **)(*(void *)(a1 + 112) + 8 * v272);
        uint64_t v55 = *(float32x4_t **)(*(void *)(a1 + 496) + 8 * v9);
        uint64_t v56 = *(float32x4_t **)(v51 + 8 * v9);
        if (v52 < 8)
        {
          uint64_t v57 = 0;
          goto LABEL_41;
        }
        uint64_t v57 = 0;
        if ((unint64_t)((char *)v56 - (char *)v54) < 0x20) {
          goto LABEL_41;
        }
        if ((unint64_t)((char *)v56 - (char *)v55) < 0x20) {
          goto LABEL_41;
        }
        uint64_t v57 = v52 & 0x7FFFFFF8;
        float32x4_t v132 = v54 + 1;
        float32x4_t v133 = v55 + 1;
        int v134 = v56 + 1;
        uint64_t v135 = v52 & 0xFFFFFFF8;
        do
        {
          float32x4_t v136 = vsubq_f32(*v132, *v133);
          v134[-1] = vsubq_f32(v132[-1], v133[-1]);
          *int v134 = v136;
          v132 += 2;
          v133 += 2;
          v134 += 2;
          v135 -= 8;
        }
        while (v135);
        if (v57 != v52)
        {
LABEL_41:
          uint64_t v58 = v52 - v57;
          uint64_t v59 = v57;
          uint64_t v60 = &v56->f32[v57];
          uint64_t v61 = &v55->f32[v59];
          uint64_t v62 = &v54->f32[v59];
          do
          {
            float v63 = *v62++;
            float v64 = v63;
            float v65 = *v61++;
            *v60++ = v64 - v65;
            --v58;
          }
          while (v58);
        }
        uint64_t v66 = (uint64_t *)(*(void *)(a1 + 584) + 8 * v9);
        int v67 = (int)v52 / 8;
        if ((int)v52 > 7)
        {
          uint64_t v68 = 0;
          uint64_t v69 = *v66;
          do
          {
            uint64_t v70 = &v56[2 * v68];
            uint64_t v71 = (float32x4_t *)(v69 + 32 * v68);
            float32x4_t v72 = vmulq_f32(v70[1], v71[1]);
            float32x4_t *v70 = vmulq_f32(*v70, *v71);
            v70[1] = v72;
            ++v68;
          }
          while (v67 != v68);
        }
        int v73 = 8 * v67;
        if (8 * v67 >= (int)v53) {
          goto LABEL_79;
        }
LABEL_68:
        uint64_t v88 = *v66;
        uint64_t v89 = *(void *)(v51 + 8 * v9);
        unint64_t v90 = v73;
        unint64_t v91 = v53 - v73;
        if (v91 < 8) {
          goto LABEL_77;
        }
        unint64_t v92 = v89 + 4 * v73;
        unint64_t v93 = v88 + 4 * v73;
        if (v92 < v88 + 4 * v53 && v93 < v89 + 4 * v53) {
          goto LABEL_77;
        }
        unint64_t v95 = v91 - (v53 & 7) + v73;
        uint64_t v96 = v73 + (unint64_t)(v53 & 7) - v53;
        uint64_t v97 = (float32x4_t *)(v93 + 16);
        uint64_t v98 = (float32x4_t *)(v92 + 16);
        do
        {
          float32x4_t v99 = vmulq_f32(*v98, *v97);
          v98[-1] = vmulq_f32(v98[-1], v97[-1]);
          *uint64_t v98 = v99;
          v97 += 2;
          v98 += 2;
          v96 += 8;
        }
        while (v96);
        unint64_t v90 = v95;
        if ((v53 & 7) != 0)
        {
LABEL_77:
          uint64_t v100 = v53 - v90;
          uint64_t v101 = (float *)(v89 + 4 * v90);
          uint64_t v102 = (float *)(v88 + 4 * v90);
          do
          {
            float v103 = *v102++;
            float *v101 = *v101 * v103;
            ++v101;
            --v100;
          }
          while (v100);
        }
        goto LABEL_79;
      }
      uint64_t v66 = (uint64_t *)(*(void *)(a1 + 584) + 8 * v9);
      int v73 = -8 * (-(int)v52 >> 3);
      if (v73 < (int)v53) {
        goto LABEL_68;
      }
LABEL_79:
      uint64_t v104 = *(void *)(a1 + 632);
      uint64_t v105 = *(int *)(a1 + 52);
      int v106 = (int)v105 / 8;
      if ((int)v105 >= 8)
      {
        float v107 = *(float32x4_t **)(v104 + 8 * v9);
        uint64_t v108 = *v6;
        int v109 = (int)v105 / 8;
        do
        {
          float32x4_t v110 = *v108;
          float32x4_t v111 = v108[1];
          v108 += 2;
          float32x4_t v112 = vmulq_f32(v111, v107[1]);
          float32x4_t *v107 = vmulq_f32(v110, *v107);
          v107[1] = v112;
          v107 += 2;
          --v109;
        }
        while (v109);
      }
      int v113 = 8 * v106;
      if (8 * v106 < (int)v105)
      {
        uint64_t v114 = *(void *)(v104 + 8 * v9);
        float32x4_t v115 = *v6;
        unint64_t v116 = v113;
        unint64_t v117 = v105 - v113;
        if (v117 < 8) {
          goto LABEL_92;
        }
        unint64_t v118 = v114 + 4 * v113;
        unint64_t v119 = (unint64_t)&v115[v113 / 4u];
        if (v118 < (unint64_t)v115->u64 + 4 * v105 && v119 < v114 + 4 * v105) {
          goto LABEL_92;
        }
        unint64_t v121 = v117 - (v105 & 7) + v113;
        uint64_t v122 = v113 + (unint64_t)(v105 & 7) - v105;
        uint64_t v123 = (float32x4_t *)(v118 + 16);
        uint64_t v124 = (float32x4_t *)(v119 + 16);
        do
        {
          float32x4_t v125 = vmulq_f32(*v124, *v123);
          v123[-1] = vmulq_f32(v124[-1], v123[-1]);
          float32x4_t *v123 = v125;
          v123 += 2;
          v124 += 2;
          v122 += 8;
        }
        while (v122);
        unint64_t v116 = v121;
        if ((v105 & 7) != 0)
        {
LABEL_92:
          uint64_t v126 = v105 - v116;
          uint64_t v127 = &v115->f32[v116];
          int v128 = (float *)(v114 + 4 * v116);
          do
          {
            float v129 = *v127++;
            *int v128 = v129 * *v128;
            ++v128;
            --v126;
          }
          while (v126);
        }
      }
LABEL_134:
      if (v10) {
        sub_19E1C7A94();
      }
      bzero(*(void **)(*(void *)(a1 + 656) + 8 * v9), 4 * *(int *)(a1 + 52));
      if (((**(uint64_t (***)(uint64_t))a1)(a1) & 1) == 0)
      {
        bzero(*(void **)(*(void *)(a1 + 560) + 8 * v9), 4 * *(int *)(a1 + 48));
        sub_19E1C7A94();
      }
      if (v7-- <= 0) {
        goto LABEL_138;
      }
    }
    uint64_t v20 = 0;
LABEL_21:
    uint64_t v21 = v15 - v20;
    uint64_t v22 = v20;
    uint64_t v23 = (float *)(v19 + 4 * v20);
    unint64_t v24 = &v18->f32[v22];
    uint64_t v25 = &v17->f32[v22];
    do
    {
      float v26 = *v25++;
      float v27 = v26;
      float v28 = *v24++;
      *uint64_t v23 = (float)(v27 - (float)(v28 * v27)) + *v23;
      ++v23;
      --v21;
    }
    while (v21);
    goto LABEL_23;
  }
LABEL_138:
  if (*(int *)(a1 + 56) > 0)
  {
    *(_DWORD *)(a1 + 728) = 0;
    *(_DWORD *)(a1 + 968) = 0;
    *(_DWORD *)(a1 + 848) = 0;
  }
  if (a5 > 1)
  {
    int v189 = 1;
    int v190 = a5 - 2;
    do
    {
      if (*(unsigned char *)(a1 + 2040)) {
        int v191 = v190;
      }
      else {
        int v191 = v189;
      }
      if (*(unsigned char *)(a1 + 2040)) {
        int v192 = 1;
      }
      else {
        int v192 = -1;
      }
      int v193 = v191 + v192;
      if (*(unsigned char *)(a1 + 2040)) {
        int v194 = a5 - 2;
      }
      else {
        int v194 = 1;
      }
      BOOL v195 = v191 == v194;
      uint64_t v196 = 8 * v191;
      uint64_t v197 = 8 * v193;
      sub_19E1C7984(*(void *)(a1 + 64) + v196, *(void *)(a1 + 632) + v196, *(void *)(a1 + 112) + v197, (void **)(a1 + 1104), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v195);
      sub_19E1C7984(*(void *)(a1 + 64) + v196, *(void *)(a1 + 656) + v196, *(void *)(a1 + 112) + v197, (void **)(a1 + 1096), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v195);
      sub_19E1C7984(*(void *)(a1 + 64) + v196, *(void *)(a1 + 608) + v196, *(void *)(a1 + 112) + v197, (void **)(a1 + 1112), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v195);
      ++v189;
      --v190;
    }
    while (v190 != -1);
  }
  int v198 = a5;
  uint64_t v199 = a3;
  if (a5 >= 1)
  {
    int v200 = 0;
    while (1)
    {
      if (*(unsigned char *)(a1 + 2040)) {
        int v204 = v275 - v200;
      }
      else {
        int v204 = v200;
      }
      if (*(unsigned char *)(a1 + 2040)) {
        int v205 = v275;
      }
      else {
        int v205 = 0;
      }
      if (v199[1] == *v199)
      {
        uint64_t v201 = *(void *)(a1 + 656);
LABEL_155:
        BOOL v202 = v204 == v205;
        uint64_t v203 = 8 * v204;
        sub_19E1C7984(*(void *)(a1 + 64) + v203, v201 + v203, *(void *)(a1 + 64) + v203, (void **)(a1 + 1072), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v202);
        sub_19E1C7984(*(void *)(a1 + 64) + v203, *(void *)(a1 + 632) + v203, *(void *)(a1 + 64) + v203, (void **)(a1 + 1080), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v202);
        sub_19E1C7984(*(void *)(a1 + 64) + v203, *(void *)(a1 + 608) + v203, *(void *)(a1 + 64) + v203, (void **)(a1 + 1088), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v202);
        goto LABEL_156;
      }
      uint64_t v201 = *(void *)(a1 + 656);
      if (*(int *)(a1 + 56) < 1) {
        goto LABEL_155;
      }
      int v274 = v200;
      uint64_t v206 = v204;
      uint64_t v207 = *(void *)(a1 + 208);
      uint64_t v208 = 24 * v204;
      float v210 = *(unsigned char **)(v207 + v208);
      float32x4_t v209 = *(unsigned char **)(v207 + v208 + 8);
      size_t v211 = v209 - v210;
      if (v209 == v210) {
        break;
      }
      if ((v211 & 0x8000000000000000) != 0) {
        sub_19E13D694();
      }
      float v212 = operator new(v209 - v210);
      memcpy(v212, v210, v211);
      uint64_t v213 = *(unsigned int *)(a1 + 52);
      if ((int)v213 >= 1) {
        goto LABEL_170;
      }
LABEL_177:
      if (*(int *)(a1 + 724) < 1)
      {
        ++*(_DWORD *)(a1 + 728);
        if (!v212) {
          goto LABEL_183;
        }
      }
      else
      {
        uint64_t v226 = 0;
        uint64_t v227 = *(void *)(a1 + 760);
        do
        {
          *(_DWORD *)(*(void *)(v227 + 24 * *(int *)(a1 + 728)) + 4 * v226) = *((_DWORD *)v212 + v226);
          ++v226;
        }
        while (v226 < *(int *)(a1 + 724));
        ++*(_DWORD *)(a1 + 728);
      }
      operator delete(v212);
      uint64_t v207 = *(void *)(a1 + 208);
LABEL_183:
      uint64_t v228 = *(void *)(a1 + 632);
      uint64_t v229 = *(unsigned char **)(v207 + 24 * (int)v206);
      unint64_t v230 = *(unsigned char **)(v207 + v208 + 8);
      size_t v231 = v230 - v229;
      if (v230 == v229)
      {
        uint64_t v232 = 0;
        uint64_t v233 = *(unsigned int *)(a1 + 52);
        if ((int)v233 < 1) {
          goto LABEL_195;
        }
LABEL_188:
        uint64_t v234 = 0;
        uint64_t v235 = *(void *)(v228 + 8 * v206);
        uint64_t v236 = *(void *)(*(void *)(a1 + 856) + 8 * *(int *)(a1 + 848));
        if (v233 < 8) {
          goto LABEL_193;
        }
        if ((unint64_t)(v236 - v235) < 0x20) {
          goto LABEL_193;
        }
        uint64_t v234 = v233 & 0x7FFFFFF8;
        float32x4_t v237 = (long long *)(v235 + 16);
        uint64_t v238 = (_OWORD *)(v236 + 16);
        uint64_t v239 = v233 & 0xFFFFFFF8;
        do
        {
          long long v240 = *v237;
          *(v238 - 1) = *(v237 - 1);
          _OWORD *v238 = v240;
          v237 += 2;
          v238 += 2;
          v239 -= 8;
        }
        while (v239);
        if (v234 != v233)
        {
LABEL_193:
          uint64_t v241 = v233 - v234;
          uint64_t v242 = 4 * v234;
          float v243 = (_DWORD *)(v236 + 4 * v234);
          int v244 = (int *)(v235 + v242);
          do
          {
            int v245 = *v244++;
            *v243++ = v245;
            --v241;
          }
          while (v241);
        }
        goto LABEL_195;
      }
      if ((v231 & 0x8000000000000000) != 0) {
        sub_19E13D694();
      }
      uint64_t v232 = operator new(v230 - v229);
      memcpy(v232, v229, v231);
      uint64_t v233 = *(unsigned int *)(a1 + 52);
      if ((int)v233 >= 1) {
        goto LABEL_188;
      }
LABEL_195:
      if (*(int *)(a1 + 844) < 1)
      {
        ++*(_DWORD *)(a1 + 848);
        if (!v232) {
          goto LABEL_201;
        }
      }
      else
      {
        uint64_t v246 = 0;
        uint64_t v247 = *(void *)(a1 + 880);
        do
        {
          *(_DWORD *)(*(void *)(v247 + 24 * *(int *)(a1 + 848)) + 4 * v246) = *((_DWORD *)v232 + v246);
          ++v246;
        }
        while (v246 < *(int *)(a1 + 844));
        ++*(_DWORD *)(a1 + 848);
      }
      operator delete(v232);
      uint64_t v207 = *(void *)(a1 + 208);
LABEL_201:
      uint64_t v248 = *(void *)(a1 + 608);
      int v249 = *(unsigned char **)(v207 + 24 * (int)v206);
      uint64_t v250 = *(unsigned char **)(v207 + v208 + 8);
      size_t v251 = v250 - v249;
      if (v250 != v249)
      {
        if ((v251 & 0x8000000000000000) != 0) {
          sub_19E13D694();
        }
        uint64_t v252 = operator new(v250 - v249);
        memcpy(v252, v249, v251);
        uint64_t v253 = *(unsigned int *)(a1 + 52);
        int v198 = a5;
        uint64_t v199 = a3;
        int v200 = v274;
        if ((int)v253 < 1) {
          goto LABEL_213;
        }
LABEL_206:
        uint64_t v254 = 0;
        uint64_t v255 = *(void *)(v248 + 8 * v206);
        uint64_t v256 = *(void *)(*(void *)(a1 + 976) + 8 * *(int *)(a1 + 968));
        if (v253 < 8) {
          goto LABEL_211;
        }
        if ((unint64_t)(v256 - v255) < 0x20) {
          goto LABEL_211;
        }
        uint64_t v254 = v253 & 0x7FFFFFF8;
        float32x4_t v257 = (long long *)(v255 + 16);
        float32x4_t v258 = (_OWORD *)(v256 + 16);
        uint64_t v259 = v253 & 0xFFFFFFF8;
        do
        {
          long long v260 = *v257;
          *(v258 - 1) = *(v257 - 1);
          *float32x4_t v258 = v260;
          v257 += 2;
          v258 += 2;
          v259 -= 8;
        }
        while (v259);
        if (v254 != v253)
        {
LABEL_211:
          uint64_t v261 = v253 - v254;
          uint64_t v262 = 4 * v254;
          uint64_t v263 = (_DWORD *)(v256 + 4 * v254);
          float32x4_t v264 = (int *)(v255 + v262);
          do
          {
            int v265 = *v264++;
            *v263++ = v265;
            --v261;
          }
          while (v261);
        }
        goto LABEL_213;
      }
      uint64_t v252 = 0;
      uint64_t v253 = *(unsigned int *)(a1 + 52);
      int v198 = a5;
      uint64_t v199 = a3;
      int v200 = v274;
      if ((int)v253 >= 1) {
        goto LABEL_206;
      }
LABEL_213:
      if (*(int *)(a1 + 964) >= 1)
      {
        uint64_t v266 = 0;
        uint64_t v267 = *(void *)(a1 + 1000);
        do
        {
          *(_DWORD *)(*(void *)(v267 + 24 * *(int *)(a1 + 968)) + 4 * v266) = *((_DWORD *)v252 + v266);
          ++v266;
        }
        while (v266 < *(int *)(a1 + 964));
        ++*(_DWORD *)(a1 + 968);
LABEL_218:
        operator delete(v252);
        goto LABEL_156;
      }
      ++*(_DWORD *)(a1 + 968);
      if (v252) {
        goto LABEL_218;
      }
LABEL_156:
      if (++v200 == v198) {
        return;
      }
    }
    float v212 = 0;
    uint64_t v213 = *(unsigned int *)(a1 + 52);
    if ((int)v213 < 1) {
      goto LABEL_177;
    }
LABEL_170:
    uint64_t v214 = 0;
    uint64_t v215 = *(void *)(v201 + 8 * v206);
    uint64_t v216 = *(void *)(*(void *)(a1 + 736) + 8 * *(int *)(a1 + 728));
    if (v213 < 8) {
      goto LABEL_175;
    }
    if ((unint64_t)(v216 - v215) < 0x20) {
      goto LABEL_175;
    }
    uint64_t v214 = v213 & 0x7FFFFFF8;
    uint64_t v217 = (long long *)(v215 + 16);
    v218 = (_OWORD *)(v216 + 16);
    uint64_t v219 = v213 & 0xFFFFFFF8;
    do
    {
      long long v220 = *v217;
      *(v218 - 1) = *(v217 - 1);
      _OWORD *v218 = v220;
      v217 += 2;
      v218 += 2;
      v219 -= 8;
    }
    while (v219);
    if (v214 != v213)
    {
LABEL_175:
      uint64_t v221 = v213 - v214;
      uint64_t v222 = 4 * v214;
      uint64_t v223 = (_DWORD *)(v216 + 4 * v214);
      uint64_t v224 = (int *)(v215 + v222);
      do
      {
        int v225 = *v224++;
        *v223++ = v225;
        --v221;
      }
      while (v221);
    }
    goto LABEL_177;
  }
}

void sub_19E1DD834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E1DD87C(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  a1[2040] = 1;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E94584D8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v13 = a6;
    uint64_t v12 = a5;
    unsigned int v11 = a4;
    uint64_t v9 = a2;
    uint64_t v10 = a3;
    int v8 = __cxa_guard_acquire(&qword_1E94584D8);
    a2 = v9;
    a3 = v10;
    a4 = v11;
    a5 = v12;
    a6 = v13;
    if (v8)
    {
      qword_1E94584C0 = 0;
      *(void *)algn_1E94584C8 = 0;
      qword_1E94584D0 = 0;
      __cxa_atexit((void (*)(void *))sub_19E142EEC, &qword_1E94584C0, &dword_19E138000);
      __cxa_guard_release(&qword_1E94584D8);
      a2 = v9;
      a3 = v10;
      a4 = v11;
      a5 = v12;
      a6 = v13;
    }
  }
  uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 304))(a1, a2, a3, a4, a5, a6, &qword_1E94584C0);
  a1[2040] = 0;
  return result;
}

uint64_t sub_19E1DD974(unsigned char *a1)
{
  a1[2040] = 1;
  uint64_t result = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 296))(a1);
  a1[2040] = 0;
  return result;
}

char *sub_19E1DD9CC(uint64_t a1, void *lpsrc)
{
  if (*(_DWORD *)(a1 + 1988) != 1) {
    sub_19E2F6320(1);
  }
  uint64_t result = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3DE0, 0);
  if (!result) {
    __cxa_bad_cast();
  }
  *(void *)(a1 + 304) = result + 232;
  *(void *)(a1 + 312) = result + 240;
  *(void *)(a1 + 320) = result + 248;
  *(void *)(a1 + 328) = result + 256;
  *(void *)(a1 + 336) = result + 264;
  *(void *)(a1 + 344) = result + 272;
  *(void *)(a1 + 352) = result + 280;
  *(void *)(a1 + 360) = result + 288;
  *(void *)(a1 + 368) = result + 296;
  return result;
}

void sub_19E1DDA88(uint64_t a1, void *lpsrc)
{
  if (!*(_DWORD *)(a1 + 1988))
  {
    if (!__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3DE0, 0))__cxa_bad_cast(); {
    sub_19E2F6320(34);
    }
  }
  sub_19E2F6320(1);
}

void sub_19E1DDAFC()
{
}

void sub_19E1DDB10()
{
}

void sub_19E1DDB28(void *a1)
{
  unsigned int v1 = sub_19E1DFC70(a1);

  operator delete(v1);
}

uint64_t sub_19E1DDB50(uint64_t result, void *a2, void *a3, int a4, uint64_t a5)
{
  uint64_t v7 = result;
  if (a3[1] != *a3 && *(int *)(result + 56) >= 1)
  {
    uint64_t result = (**(uint64_t (***)(uint64_t))result)(result);
    int v8 = result;
    unsigned int v9 = a4 & 0xFFFFFF;
    uint64_t v10 = *(void *)(v7 + 2048);
    if (!v10) {
      goto LABEL_7;
    }
LABEL_6:
    float v11 = *(float *)(v10 + 468);
    if (v11 > 0.0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  int v8 = 0;
  unsigned int v9 = a4 & 0xFFFFFF;
  uint64_t v10 = *(void *)(result + 2048);
  if (v10) {
    goto LABEL_6;
  }
LABEL_7:
  float v11 = 50.0;
LABEL_8:
  unsigned int v12 = a5 != 0;
  if (v9 > v12)
  {
    float v13 = -v11;
    if (*(unsigned char *)(v7 + 2040)) {
      signed int v14 = v9 + ~v12;
    }
    else {
      signed int v14 = a5 != 0;
    }
    if (*(unsigned char *)(v7 + 2040)) {
      BOOL v15 = v14 < (int)(v9 - 1);
    }
    else {
      BOOL v15 = v14 > 0;
    }
    BOOL v67 = v15;
    memmove(*(void **)(*(void *)(v7 + 64) + 8 * v14), *(const void **)(*a2 + 8 * v14), 4 * *(int *)(v7 + 44));
    int v16 = *(unsigned __int8 *)(v7 + 40);
    if (*(unsigned char *)(v7 + 40)) {
      *(_DWORD *)(*(void *)(*(void *)(v7 + 64) + 8 * v14) + 4 * *(int *)(v7 + 48) - 4) = 1065353216;
    }
    if (v8)
    {
      int v17 = *(_DWORD *)(v7 + 48);
      unint64_t v18 = *(_DWORD **)(*(void *)(v7 + 208) + 24 * v14);
      _DWORD *v18 = **(_DWORD **)(*a3 + 24 * v14);
      if (v16) {
        v18[1] = v17 - 1;
      }
    }
    uint64_t v19 = 8 * v14;
    bzero(*(void **)(*(void *)(v7 + 376) + v19), 4 * *(int *)(v7 + 52));
    bzero(*(void **)(*(void *)(v7 + 400) + v19), 4 * *(int *)(v7 + 52));
    bzero(*(void **)(*(void *)(v7 + 424) + v19), 4 * *(int *)(v7 + 52));
    uint64_t v20 = *(void *)(v7 + 2048);
    uint64_t v66 = v14;
    if (v20)
    {
      if (!*(unsigned char *)(v20 + 20))
      {
        int v59 = *(_DWORD *)(v20 + 40);
        if ((v59 == 4 || v59 == 2) && *(_DWORD *)(v20 + 44) == 3)
        {
          uint64_t v60 = *(void *)(v7 + 208) + 24 * v14;
          uint64_t v78 = 0;
          unint64_t v79 = 0;
          float32x4_t v77 = 0;
          uint64_t v62 = *(unsigned char **)v60;
          uint64_t v61 = *(unsigned char **)(v60 + 8);
          int64_t v63 = v61 - v62;
          if (v61 != v62)
          {
            if (v63 < 0) {
              sub_19E13D694();
            }
            float32x4_t v77 = (char *)operator new(v61 - v62);
            unint64_t v79 = &v77[4 * (v63 >> 2)];
            memcpy(v77, v62, v63);
            uint64_t v78 = v79;
          }
          sub_19E1DE6F4(v7, 0);
        }
      }
    }
    uint64_t v21 = *(void *)(v7 + 376);
    uint64_t v22 = *(void *)(v7 + 64);
    uint64_t v23 = *(uint64_t **)(v7 + 304);
    uint64_t v24 = *(void *)(v7 + 208) + 24 * v14;
    uint64_t v75 = 0;
    uint64_t v76 = 0;
    std::string __p = 0;
    float v26 = *(unsigned char **)v24;
    uint64_t v25 = *(unsigned char **)(v24 + 8);
    int64_t v27 = v25 - v26;
    if (v25 != v26)
    {
      if (v27 < 0) {
        sub_19E13D694();
      }
      std::string __p = operator new(v25 - v26);
      uint64_t v76 = (char *)__p + 4 * (v27 >> 2);
      memcpy(__p, v26, v27);
      uint64_t v75 = v76;
    }
    sub_19E1DEFB0(v7, v8, (void **)(v21 + v19), v22 + v19, v23, (uint64_t)&__p, *(_DWORD *)(v7 + 52), *(_DWORD *)(v7 + 48), 1);
    if (__p)
    {
      uint64_t v75 = __p;
      operator delete(__p);
    }
    uint64_t v28 = *(void *)(v7 + 2048);
    if (!v28 || !*(unsigned char *)(v28 + 244))
    {
      int v29 = *(_DWORD *)(v7 + 52);
      if (v67) {
        sub_19E1C7A94();
      }
      uint64_t v30 = (const float **)(*(void *)(v7 + 376) + 8 * v14);
      if (v29 >= 1)
      {
        float v31 = (float *)*v30;
        uint64_t v32 = v29;
        do
        {
          float v33 = -v11;
          if (*v31 < v13 || (float v33 = v11, *v31 > v11)) {
            *float v31 = v33;
          }
          ++v31;
          --v32;
        }
        while (v32);
      }
      sub_19E1C7520((float **)(*(void *)(v7 + 448) + 8 * v14), v30, v29, *(_DWORD *)(v7 + 520));
      uint64_t v34 = *(void *)(v7 + 400);
      uint64_t v35 = *(void *)(v7 + 64);
      uint64_t v36 = *(uint64_t **)(v7 + 312);
      uint64_t v37 = *(void *)(v7 + 208) + 24 * (int)v66;
      float32x4_t v72 = 0;
      int v73 = 0;
      uint64_t v71 = 0;
      unint64_t v39 = *(unsigned char **)v37;
      unint64_t v38 = *(unsigned char **)(v37 + 8);
      int64_t v40 = v38 - v39;
      if (v38 != v39)
      {
        if (v40 < 0) {
          sub_19E13D694();
        }
        uint64_t v71 = operator new(v38 - v39);
        int v73 = (char *)v71 + 4 * (v40 >> 2);
        memcpy(v71, v39, v40);
        float32x4_t v72 = v73;
      }
      sub_19E1DEFB0(v7, v8, (void **)(v34 + v19), v35 + v19, v36, (uint64_t)&v71, *(_DWORD *)(v7 + 52), *(_DWORD *)(v7 + 48), 1);
      if (v71)
      {
        float32x4_t v72 = v71;
        operator delete(v71);
      }
      uint64_t v41 = *(void *)(v7 + 2048);
      if (!v41 || !*(unsigned char *)(v41 + 244))
      {
        int v42 = *(_DWORD *)(v7 + 52);
        uint64_t v43 = (const float **)(*(void *)(v7 + 400) + 8 * v66);
        if (v42 >= 1)
        {
          uint64_t v44 = (float *)*v43;
          uint64_t v45 = v42;
          do
          {
            float v46 = -v11;
            if (*v44 < v13 || (float v46 = v11, *v44 > v11)) {
              *uint64_t v44 = v46;
            }
            ++v44;
            --v45;
          }
          while (v45);
        }
        sub_19E1C7520((float **)(*(void *)(v7 + 472) + v19), v43, v42, *(_DWORD *)(v7 + 524));
        bzero(*(void **)(*(void *)(v7 + 88) + v19), 4 * *(int *)(v7 + 52));
        int v47 = *(_DWORD *)(v7 + 52);
        if (v47 >= 1)
        {
          uint64_t v48 = *(float **)(*(void *)(v7 + 88) + 8 * v66);
          uint64_t v49 = *(unsigned int *)(v7 + 52);
          do
          {
            float v50 = -v11;
            if (*v48 < v13 || (float v50 = v11, *v48 > v11)) {
              *uint64_t v48 = v50;
            }
            ++v48;
            --v49;
          }
          while (v49);
        }
        uint64_t v51 = *(void *)(v7 + 424);
        uint64_t v52 = *(void *)(v7 + 64);
        uint64_t v53 = *(uint64_t **)(v7 + 320);
        uint64_t v54 = *(void *)(v7 + 208) + 24 * (int)v66;
        uint64_t v69 = 0;
        uint64_t v70 = 0;
        uint64_t v68 = 0;
        uint64_t v56 = *(unsigned char **)v54;
        uint64_t v55 = *(unsigned char **)(v54 + 8);
        int64_t v57 = v55 - v56;
        if (v55 != v56)
        {
          if (v57 < 0) {
            sub_19E13D694();
          }
          uint64_t v68 = operator new(v55 - v56);
          uint64_t v70 = (char *)v68 + 4 * (v57 >> 2);
          memcpy(v68, v56, v57);
          uint64_t v69 = v70;
        }
        sub_19E1DEFB0(v7, v8, (void **)(v51 + v19), v52 + v19, v53, (uint64_t)&v68, v47, *(_DWORD *)(v7 + 48), 1);
        if (v68)
        {
          uint64_t v69 = v68;
          operator delete(v68);
        }
        uint64_t v58 = *(void *)(v7 + 2048);
        if (!v58 || !*(unsigned char *)(v58 + 244)) {
          sub_19E1C7A94();
        }
      }
    }
    sub_19E2F6320(76);
  }
  return result;
}

void sub_19E1DE668(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  int v29 = *(void **)(v27 - 128);
  if (v29)
  {
    *(void *)(v27 - 120) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E1DE6F4(uint64_t a1, int a2)
{
  if (!a2)
  {
    if (!*(void *)(a1 + 552)) {
      operator new[]();
    }
    sub_19E1C7A94();
  }
  sub_19E2F6320(545);
}

float32_t sub_19E1DEFB0(uint64_t a1, int a2, void **a3, uint64_t a4, uint64_t *a5, uint64_t a6, int a7, int a8, char a9)
{
  if (a9)
  {
    float v13 = (void **)(a1 + 536);
    if (!a2) {
      sub_19E1C7A94();
    }
    std::string __p = 0;
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    BOOL v15 = *(const void **)a6;
    uint64_t v14 = *(void *)(a6 + 8);
    int64_t v16 = v14 - *(void *)a6;
    if (v14 != *(void *)a6)
    {
      if (v16 < 0) {
        sub_19E13D694();
      }
      int v17 = (char *)operator new(v14 - *(void *)a6);
      unint64_t v18 = &v17[4 * (v16 >> 2)];
      std::string __p = v17;
      uint64_t v49 = v18;
      memcpy(v17, v15, v16);
      uint64_t v48 = v18;
    }
    sub_19E1C92F0(v13, (int **)&__p, a5, a7, a8);
    if (__p)
    {
      uint64_t v48 = __p;
      operator delete(__p);
    }
    int v20 = a7 / 8;
    if (a7 >= 8)
    {
      float v26 = (float32x4_t *)*a3;
      uint64_t v27 = (float32x4_t *)*v13;
      int v28 = a7 / 8;
      do
      {
        float32x4_t v29 = *v27;
        float32x4_t v30 = v27[1];
        v27 += 2;
        float32x4_t v31 = vaddq_f32(v26[1], v30);
        float32x4_t v19 = vaddq_f32(*v26, v29);
        *float v26 = v19;
        v26[1] = v31;
        v26 += 2;
        --v28;
      }
      while (v28);
    }
    int v32 = 8 * v20;
    if (8 * v20 < a7)
    {
      float v33 = (char *)*v13;
      uint64_t v34 = (char *)*a3;
      uint64_t v35 = v32;
      if ((unint64_t)(a7 - (uint64_t)v32) < 8) {
        goto LABEL_26;
      }
      uint64_t v36 = 4 * v32;
      if (&v34[v36] < &v33[4 * a7] && &v33[v36] < &v34[4 * a7]) {
        goto LABEL_26;
      }
      uint64_t v37 = v32 + (a7 & 7) - a7;
      uint64_t v38 = v36 + 16;
      unint64_t v39 = (float32x4_t *)&v33[v36 + 16];
      int64_t v40 = (float32x4_t *)&v34[v38];
      do
      {
        float32x4_t v19 = vaddq_f32(v40[-1], v39[-1]);
        float32x4_t v41 = vaddq_f32(*v40, *v39);
        v40[-1] = v19;
        float32x4_t *v40 = v41;
        v39 += 2;
        v40 += 2;
        v37 += 8;
      }
      while (v37);
      uint64_t v35 = a7 - (a7 & 7);
      if ((a7 & 7) != 0)
      {
LABEL_26:
        uint64_t v42 = a7 - v35;
        uint64_t v43 = (float *)&v34[4 * v35];
        uint64_t v44 = (float *)&v33[4 * v35];
        do
        {
          float v45 = *v44++;
          v19.f32[0] = *v43 + v45;
          *v43++ = v19.f32[0];
          --v42;
        }
        while (v42);
      }
    }
  }
  else
  {
    if (!a2)
    {
      sub_19E1C7A94();
    }
    float v50 = 0;
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    uint64_t v22 = *(const void **)a6;
    uint64_t v21 = *(void *)(a6 + 8);
    int64_t v23 = v21 - *(void *)a6;
    if (v21 != *(void *)a6)
    {
      if (v23 < 0) {
        sub_19E13D694();
      }
      uint64_t v24 = (char *)operator new(v21 - *(void *)a6);
      uint64_t v25 = &v24[4 * (v23 >> 2)];
      float v50 = v24;
      uint64_t v52 = v25;
      memcpy(v24, v22, v23);
      uint64_t v51 = v25;
    }
    sub_19E1C92F0(a3, (int **)&v50, a5, a7, a8);
    if (v50)
    {
      uint64_t v51 = v50;
      operator delete(v50);
    }
  }
  return v19.f32[0];
}

void sub_19E1DF284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E1DF2C8(float **a1, const char *a2, int a3)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  sprintf(v77, "0x%lx", *a1);
  char v76 = 5;
  strcpy((char *)v75, "() ");
  if (a3 <= 0)
  {
    char v8 = 1;
  }
  else
  {
    uint64_t v6 = *a1;
    uint64_t v7 = a3;
    char v8 = 1;
    do
    {
      float v9 = *v6++;
      BOOL v10 = v9 >= -1.0;
      if (v9 > 1.0) {
        BOOL v10 = 0;
      }
      v8 &= v10;
      --v7;
    }
    while (v7);
    if ((v8 & 1) == 0)
    {
      float v11 = "inRange:no";
      goto LABEL_10;
    }
  }
  float v11 = "inRange:yes";
LABEL_10:
  if (v8) {
    size_t v12 = 11;
  }
  else {
    size_t v12 = 10;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v12;
  memcpy(&__dst, v11, v12);
  __dst.__r_.__value_.__s.__data_[v12] = 0;
  float v13 = std::string::insert(&__dst, 0, " (");
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v68.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  BOOL v15 = std::string::append(&v68, ") ");
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  int64_t v74 = v15->__r_.__value_.__r.__words[2];
  long long v73 = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v68.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_15;
    }
  }
  else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_15;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_15:
  sub_19E1C3534((uint64_t)&v68);
  v66[0] = 0;
  v66[1] = 0;
  uint64_t v67 = 0;
  std::ostream::operator<<();
  sub_19E1C3818((uint64_t *)&v68, (uint64_t)v66);
  std::operator+<char>();
  int v17 = std::string::append(&__dst, "] ");
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  int64_t v65 = v17->__r_.__value_.__r.__words[2];
  long long v64 = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  sub_19E1C3534((uint64_t)&__dst);
  size_t v19 = strlen(a2);
  if (v19 > 0x7FFFFFFFFFFFFFF7) {
    sub_19E13C370();
  }
  std::string::size_type v20 = v19;
  if (v19 >= 0x17)
  {
    uint64_t v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17) {
      uint64_t v22 = v19 | 7;
    }
    uint64_t v23 = v22 + 1;
    uint64_t v21 = operator new(v22 + 1);
    v54.__r_.__value_.__l.__size_ = v20;
    v54.__r_.__value_.__r.__words[2] = v23 | 0x8000000000000000;
    v54.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
    goto LABEL_24;
  }
  *((unsigned char *)&v54.__r_.__value_.__s + 23) = v19;
  uint64_t v21 = &v54;
  if (v19) {
LABEL_24:
  }
    memcpy(v21, a2, v20);
  *((unsigned char *)v21 + v20) = 0;
  if (v74 >= 0) {
    uint64_t v24 = (const std::string::value_type *)&v73;
  }
  else {
    uint64_t v24 = (const std::string::value_type *)v73;
  }
  if (v74 >= 0) {
    std::string::size_type v25 = HIBYTE(v74);
  }
  else {
    std::string::size_type v25 = *((void *)&v73 + 1);
  }
  float v26 = std::string::append(&v54, v24, v25);
  long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v55.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  if (v76 >= 0) {
    int v28 = (const std::string::value_type *)v75;
  }
  else {
    int v28 = (const std::string::value_type *)v75[0];
  }
  if (v76 >= 0) {
    std::string::size_type v29 = v76;
  }
  else {
    std::string::size_type v29 = (std::string::size_type)v75[1];
  }
  float32x4_t v30 = std::string::append(&v55, v28, v29);
  long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v56.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  if (v65 >= 0) {
    int v32 = (const std::string::value_type *)&v64;
  }
  else {
    int v32 = (const std::string::value_type *)v64;
  }
  if (v65 >= 0) {
    std::string::size_type v33 = HIBYTE(v65);
  }
  else {
    std::string::size_type v33 = *((void *)&v64 + 1);
  }
  uint64_t v34 = std::string::append(&v56, v32, v33);
  long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  v57.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  uint64_t v36 = std::string::append(&v57, "[ ");
  long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
  v58.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v37;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v57.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_45:
      if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_46;
      }
      goto LABEL_53;
    }
  }
  else if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_45;
  }
  operator delete(v56.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_46:
    if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_47;
    }
LABEL_54:
    operator delete(v54.__r_.__value_.__l.__data_);
    if (a3 < 1) {
      goto LABEL_85;
    }
    goto LABEL_55;
  }
LABEL_53:
  operator delete(v55.__r_.__value_.__l.__data_);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_54;
  }
LABEL_47:
  if (a3 >= 1)
  {
LABEL_55:
    uint64_t v38 = 0;
    if (a3 >= 1000) {
      unsigned int v39 = 1000;
    }
    else {
      unsigned int v39 = a3;
    }
    uint64_t v40 = 4 * v39;
    do
    {
      memset(&v57, 0, sizeof(v57));
      std::ios_base::clear((std::ios_base *)((char *)&__dst + *(void *)(__dst.__r_.__value_.__r.__words[0] - 24)), 0);
      std::ostream::operator<<();
      sub_19E1C3818((uint64_t *)&__dst, (uint64_t)&v57);
      int v41 = SHIBYTE(v57.__r_.__value_.__r.__words[2]);
      if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v57.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v57.__r_.__value_.__l.__size_;
      }
      unint64_t v43 = size + 3;
      if (size + 3 > 0x7FFFFFFFFFFFFFF7) {
        sub_19E13C370();
      }
      if (v43 >= 0x17)
      {
        uint64_t v45 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v43 | 7) != 0x17) {
          uint64_t v45 = v43 | 7;
        }
        uint64_t v46 = v45 + 1;
        uint64_t v44 = (char *)operator new(v45 + 1);
        v56.__r_.__value_.__l.__size_ = size + 3;
        v56.__r_.__value_.__r.__words[2] = v46 | 0x8000000000000000;
        v56.__r_.__value_.__r.__words[0] = (std::string::size_type)v44;
      }
      else
      {
        memset(&v56, 0, sizeof(v56));
        uint64_t v44 = (char *)&v56;
        *((unsigned char *)&v56.__r_.__value_.__s + 23) = size + 3;
        if (!size) {
          goto LABEL_74;
        }
      }
      if (v41 >= 0) {
        int v47 = &v57;
      }
      else {
        int v47 = (std::string *)v57.__r_.__value_.__r.__words[0];
      }
      memmove(v44, v47, size);
LABEL_74:
      *(_DWORD *)&v44[size] = 2108448;
      if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v48 = &v56;
      }
      else {
        uint64_t v48 = (std::string *)v56.__r_.__value_.__r.__words[0];
      }
      if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v49 = HIBYTE(v56.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v49 = v56.__r_.__value_.__l.__size_;
      }
      std::string::append(&v58, (const std::string::value_type *)v48, v49);
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v56.__r_.__value_.__l.__data_);
        if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
LABEL_84:
        }
          operator delete(v57.__r_.__value_.__l.__data_);
      }
      else if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
      {
        goto LABEL_84;
      }
      v38 += 4;
    }
    while (v40 != v38);
  }
LABEL_85:
  std::string::append(&v58, "]");
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
  __dst.__r_.__value_.__r.__words[0] = *MEMORY[0x1E4FBA408];
  std::string::size_type v50 = __dst.__r_.__value_.__r.__words[0];
  std::string::size_type v51 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  std::string::size_type v52 = *(void *)(MEMORY[0x1E4FBA408] + 64);
  *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words
                            + *(void *)(__dst.__r_.__value_.__r.__words[0] - 24)) = v52;
  std::string::size_type v53 = v51;
  __dst.__r_.__value_.__r.__words[2] = v51;
  uint64_t v60 = MEMORY[0x1E4FBA470] + 16;
  if (v62 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x19F3BBB40](&v63);
  if (SHIBYTE(v65) < 0)
  {
    operator delete((void *)v64);
    if ((SHIBYTE(v67) & 0x80000000) == 0) {
      goto LABEL_91;
    }
  }
  else if ((SHIBYTE(v67) & 0x80000000) == 0)
  {
    goto LABEL_91;
  }
  operator delete(v66[0]);
LABEL_91:
  v68.__r_.__value_.__r.__words[0] = v50;
  *(std::string::size_type *)((char *)v68.__r_.__value_.__r.__words + *(void *)(v50 - 24)) = v52;
  v68.__r_.__value_.__r.__words[2] = v53;
  uint64_t v69 = MEMORY[0x1E4FBA470] + 16;
  if (v71 < 0) {
    operator delete(v70);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x19F3BBB40](&v72);
  if ((SHIBYTE(v74) & 0x80000000) == 0)
  {
    if ((v76 & 0x80000000) == 0) {
      return;
    }
LABEL_99:
    operator delete(v75[0]);
    return;
  }
  operator delete((void *)v73);
  if (v76 < 0) {
    goto LABEL_99;
  }
}

void sub_19E1DFA98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  sub_19E1C3AEC((uint64_t)&a33);
  if (a72 < 0) {
    operator delete(a68);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  sub_19E1C3AEC((uint64_t)&a75);
  if (*(char *)(v75 - 233) < 0) {
    operator delete(*(void **)(v75 - 256));
  }
  if (*(char *)(v75 - 209) < 0) {
    operator delete(*(void **)(v75 - 232));
  }
  _Unwind_Resume(a1);
}

void *sub_19E1DFC70(void *a1)
{
  *a1 = &unk_1EF0A6550;
  sub_19E1DBD84(a1);
  uint64_t v2 = (void *)a1[252];
  if (v2)
  {
    a1[253] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[249];
  if (v3)
  {
    a1[250] = v3;
    operator delete(v3);
  }
  sub_19E3030E8((uint64_t)(a1 + 239));
  sub_19E3030E8((uint64_t)(a1 + 230));
  sub_19E3030E8((uint64_t)(a1 + 221));
  sub_19E3030E8((uint64_t)(a1 + 212));
  sub_19E3030E8((uint64_t)(a1 + 203));
  sub_19E3030E8((uint64_t)(a1 + 194));
  sub_19E3030E8((uint64_t)(a1 + 185));
  sub_19E3030E8((uint64_t)(a1 + 176));
  sub_19E3030E8((uint64_t)(a1 + 167));
  sub_19E3030E8((uint64_t)(a1 + 158));
  sub_19E3030E8((uint64_t)(a1 + 149));
  sub_19E1C6038(a1 + 119);
  sub_19E1C6038(a1 + 104);
  sub_19E1C6038(a1 + 89);
  unsigned int v4 = (void *)a1[85];
  if (v4)
  {
    a1[86] = v4;
    operator delete(v4);
  }
  int v5 = (void *)a1[82];
  if (v5)
  {
    a1[83] = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)a1[79];
  if (v6)
  {
    a1[80] = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)a1[76];
  if (v7)
  {
    a1[77] = v7;
    operator delete(v7);
  }
  char v8 = (void *)a1[73];
  if (v8)
  {
    a1[74] = v8;
    operator delete(v8);
  }
  float v9 = (void *)a1[70];
  if (v9)
  {
    a1[71] = v9;
    operator delete(v9);
  }
  BOOL v10 = (void *)a1[62];
  if (v10)
  {
    a1[63] = v10;
    operator delete(v10);
  }
  float v11 = (void *)a1[59];
  if (v11)
  {
    a1[60] = v11;
    operator delete(v11);
  }
  size_t v12 = (void *)a1[56];
  if (v12)
  {
    a1[57] = v12;
    operator delete(v12);
  }
  float v13 = (void *)a1[53];
  if (v13)
  {
    a1[54] = v13;
    operator delete(v13);
  }
  long long v14 = (void *)a1[50];
  if (v14)
  {
    a1[51] = v14;
    operator delete(v14);
  }
  BOOL v15 = (void *)a1[47];
  if (v15)
  {
    a1[48] = v15;
    operator delete(v15);
  }
  uint64_t v16 = a1[26];
  if (v16)
  {
    uint64_t v17 = a1[27];
    long long v18 = (void *)a1[26];
    if (v17 != v16)
    {
      uint64_t v19 = a1[27];
      do
      {
        uint64_t v21 = *(void **)(v19 - 24);
        v19 -= 24;
        std::string::size_type v20 = v21;
        if (v21)
        {
          *(void *)(v17 - 16) = v20;
          operator delete(v20);
        }
        uint64_t v17 = v19;
      }
      while (v19 != v16);
      long long v18 = (void *)a1[26];
    }
    a1[27] = v16;
    operator delete(v18);
  }
  uint64_t v22 = (void *)a1[23];
  if (v22)
  {
    a1[24] = v22;
    operator delete(v22);
  }
  uint64_t v23 = (void *)a1[20];
  if (v23)
  {
    a1[21] = v23;
    operator delete(v23);
  }
  uint64_t v24 = (void *)a1[17];
  if (v24)
  {
    a1[18] = v24;
    operator delete(v24);
  }
  std::string::size_type v25 = (void *)a1[14];
  if (v25)
  {
    a1[15] = v25;
    operator delete(v25);
  }
  float v26 = (void *)a1[11];
  if (v26)
  {
    a1[12] = v26;
    operator delete(v26);
  }
  long long v27 = (void *)a1[8];
  if (v27)
  {
    a1[9] = v27;
    operator delete(v27);
  }
  *a1 = &unk_1EF0A50F8;
  int v28 = (void *)a1[1];
  if (v28)
  {
    a1[2] = v28;
    operator delete(v28);
  }
  return a1;
}

uint64_t sub_19E1DFEE4(uint64_t a1, int a2, uint64_t a3, float a4)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF0A6018;
  *(_DWORD *)(a1 + 44) = a2;
  *(float *)(a1 + 48) = a4;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)a3;
  long long v5 = *(_OWORD *)(a3 + 16);
  long long v6 = *(_OWORD *)(a3 + 32);
  long long v7 = *(_OWORD *)(a3 + 48);
  *(void *)(a1 + 120) = *(void *)(a3 + 64);
  *(_OWORD *)(a1 + 104) = v7;
  *(_OWORD *)(a1 + 88) = v6;
  *(_OWORD *)(a1 + 72) = v5;
  *(_OWORD *)(a1 + 168) = 0u;
  uint64_t v16 = (void **)(a1 + 168);
  BOOL v15 = (void **)(a1 + 192);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  sub_19E3030A0(a1 + 216);
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(unsigned char *)(a1 + 41) = 0;
  int v8 = dword_1E9457D98;
  unint64_t v9 = dword_1E9457D98;
  uint64_t v10 = *(void *)(a1 + 168);
  unint64_t v11 = (*(void *)(a1 + 176) - v10) >> 3;
  if (dword_1E9457D98 <= v11)
  {
    if (dword_1E9457D98 < v11) {
      *(void *)(a1 + 176) = v10 + 8 * dword_1E9457D98;
    }
  }
  else
  {
    sub_19E1599BC(v16, dword_1E9457D98 - v11);
    int v8 = dword_1E9457D98;
    unint64_t v9 = dword_1E9457D98;
  }
  uint64_t v12 = *(void *)(a1 + 192);
  unint64_t v13 = (*(void *)(a1 + 200) - v12) >> 3;
  if (v9 <= v13)
  {
    if (v9 < v13) {
      *(void *)(a1 + 200) = v12 + 8 * v9;
    }
  }
  else
  {
    sub_19E1599BC(v15, v9 - v13);
    int v8 = dword_1E9457D98;
  }
  *(_WORD *)(a1 + 160) = *(_WORD *)(a1 + 101);
  if (v8 >= 1) {
    operator new[]();
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 200))(a1);
  return a1;
}

void sub_19E1E0428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, void **a13, uint64_t a14)
{
  uint64_t v16 = *a12;
  if (*a12)
  {
    v14[25] = v16;
    operator delete(v16);
    uint64_t v17 = *a13;
    if (!*a13)
    {
LABEL_3:
      *long long v14 = a11;
      long long v18 = (void *)v14[1];
      if (!v18) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v17 = *a13;
    if (!*a13) {
      goto LABEL_3;
    }
  }
  v14[22] = v17;
  operator delete(v17);
  *long long v14 = a11;
  long long v18 = (void *)v14[1];
  if (!v18) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  v14[2] = v18;
  operator delete(v18);
  _Unwind_Resume(exception_object);
}

void sub_19E1E04D4()
{
}

uint64_t sub_19E1E04E8(uint64_t a1)
{
  return a1 + 168;
}

uint64_t sub_19E1E04F0(uint64_t a1)
{
  return a1 + 192;
}

void sub_19E1E04F8()
{
}

void sub_19E1E050C()
{
}

uint64_t sub_19E1E0520()
{
  return 0;
}

unsigned char *sub_19E1E0528(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(int *)(a2 + 72);
  long long v7 = (int *)(*(void *)a2 + v6);
  if ((unint64_t)v7 <= *(void *)a2 + *(void *)(a2 + 8) - 4)
  {
    int v8 = *v7;
    *(_DWORD *)(a2 + 72) = v6 + 4;
  }
  else
  {
    int v8 = 0;
  }
  if (*(_DWORD *)(a1 + 44) != v8) {
    sub_19E2F6320(3);
  }
  int v9 = *a3;
  int v10 = *(unsigned __int8 *)(a1 + 161);
  int v11 = sub_19E2F62F8();
  sub_19E1C6130((unsigned char *)(a1 + 128), (uint64_t *)a2, v9, v10, v11, *(_DWORD *)(a1 + 44));
  int v12 = *a3;
  int v13 = *(unsigned __int8 *)(a1 + 161);
  int v14 = sub_19E2F62F8();
  sub_19E1C6130((unsigned char *)(a1 + 136), (uint64_t *)a2, v12, v13, v14, *(_DWORD *)(a1 + 44));
  int v15 = *a3;
  int v16 = *(unsigned __int8 *)(a1 + 161);
  int v17 = sub_19E2F62F8();
  sub_19E1C6130((unsigned char *)(a1 + 144), (uint64_t *)a2, v15, v16, v17, *(_DWORD *)(a1 + 44));
  int v18 = *a3;
  int v19 = *(unsigned __int8 *)(a1 + 161);
  int v20 = sub_19E2F62F8();
  int v21 = *(_DWORD *)(a1 + 44);

  return sub_19E1C6130((unsigned char *)(a1 + 152), (uint64_t *)a2, v18, v19, v20, v21);
}

uint64_t sub_19E1E0670(uint64_t a1, FILE *__stream, int *a3, uint64_t a4, unsigned int a5)
{
  sub_19E2F6788(__stream, a3, *(_DWORD *)(a1 + 44));
  int v9 = sub_19E2F62F8();
  sub_19E1E0BD4(a1 + 128, __stream, a3, 3, v9, a5);
  int v10 = sub_19E2F62F8();
  sub_19E1E0BD4(a1 + 136, __stream, a3, 3, v10, a5);
  int v11 = sub_19E2F62F8();
  sub_19E1E0BD4(a1 + 144, __stream, a3, 3, v11, a5);
  int v12 = sub_19E2F62F8();

  return sub_19E1E0BD4(a1 + 152, __stream, a3, 3, v12, a5);
}

void sub_19E1E07B0(uint64_t a1)
{
  std::string __p = (char *)operator new(0x28uLL);
  strcpy(__p, "BatchNormalization, from allocAll");
  sub_19E1E105C(a1);
  operator delete(__p);
}

void sub_19E1E0844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E1E0860(void *a1)
{
  uint64_t v3 = a1[36];
  uint64_t v2 = a1[37];
  if (v2 == v3)
  {
    uint64_t v3 = a1[37];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      long long v5 = *(void **)(v3 + 8 * v4);
      if (v5)
      {
        operator delete[](v5);
        uint64_t v3 = a1[36];
        uint64_t v2 = a1[37];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  a1[37] = v3;
  a1[22] = a1[21];
  a1[25] = a1[24];
}

uint64_t sub_19E1E08D0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t sub_19E1E08D8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

void sub_19E1E08E8()
{
}

int *sub_19E1E08FC(int *result, void *a2, uint64_t a3, int a4)
{
  uint64_t v4 = a4 & 0xFFFFFF;
  if ((a4 & 0xFFFFFF) != 0)
  {
    uint64_t v6 = result;
    for (uint64_t i = 0; i != v4; ++i)
    {
      memmove(*(void **)(*((void *)v6 + 21) + 8 * i), *(const void **)(*a2 + 8 * i), 4 * v6[11]);
      uint64_t v9 = v6[11];
      int v10 = *(float32x4_t **)(*((void *)v6 + 21) + 8 * i);
      if ((int)v9 >= 1)
      {
        v8.i32[0] = v6[12];
        int v11 = (float32x4_t *)*((void *)v6 + 16);
        int v12 = (float32x4_t *)*((void *)v6 + 17);
        int v13 = (float32x4_t *)*((void *)v6 + 18);
        int v14 = (float32x4_t *)*((void *)v6 + 19);
        if (v9 >= 8)
        {
          uint64_t v15 = 0;
          int v16 = (float32x4_t *)((char *)v10 + 4 * v9);
          BOOL v18 = v10 < (float32x4_t *)&v12->f32[v9] && v12 < v16;
          BOOL v20 = v10 < (float32x4_t *)&v13->f32[v9] && v13 < v16;
          BOOL v22 = v10 < (float32x4_t *)&v14->f32[v9] && v14 < v16;
          if ((v11 >= v16 || v10 >= (float32x4_t *)&v11->f32[v9]) && !v18 && !v20 && !v22)
          {
            uint64_t v15 = v9 & 0x7FFFFFF8;
            uint64_t v24 = v11 + 1;
            std::string::size_type v25 = v10 + 1;
            float32x4_t v26 = (float32x4_t)vdupq_lane_s32(v8, 0);
            long long v27 = v12 + 1;
            int v28 = v14 + 1;
            std::string::size_type v29 = v13 + 1;
            uint64_t v30 = v9 & 0xFFFFFFF8;
            do
            {
              float32x4_t v31 = vaddq_f32(vdivq_f32(vmulq_f32(vsubq_f32(*v25, *v24), *v29), vsqrtq_f32(vaddq_f32(*v27, v26))), *v28);
              v25[-1] = vaddq_f32(vdivq_f32(vmulq_f32(vsubq_f32(v25[-1], v24[-1]), v29[-1]), vsqrtq_f32(vaddq_f32(v27[-1], v26))), v28[-1]);
              float32x4_t *v25 = v31;
              v24 += 2;
              v25 += 2;
              v27 += 2;
              v28 += 2;
              v29 += 2;
              v30 -= 8;
            }
            while (v30);
            if (v15 == v9) {
              goto LABEL_3;
            }
          }
        }
        else
        {
          uint64_t v15 = 0;
        }
        uint64_t v32 = v9 - v15;
        uint64_t v33 = v15;
        uint64_t v34 = &v10->f32[v15];
        long long v35 = &v14->f32[v33];
        uint64_t v36 = &v13->f32[v33];
        long long v37 = &v12->f32[v33];
        uint64_t v38 = &v11->f32[v33];
        do
        {
          float v39 = *v38++;
          float v40 = v39;
          float v41 = *v37++;
          float v42 = sqrtf(v41 + *(float *)v8.i32);
          float v43 = *v36++;
          float v44 = v43;
          float v45 = *v35++;
          *uint64_t v34 = (float)((float)((float)(*v34 - v40) * v44) / v42) + v45;
          ++v34;
          --v32;
        }
        while (v32);
      }
LABEL_3:
      uint64_t result = (int *)memmove(*(void **)(*((void *)v6 + 24) + 8 * i), v10, 4 * (int)v9);
    }
  }
  return result;
}

void *sub_19E1E0AEC(void *a1, void *lpsrc)
{
  uint64_t result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3D48, 0);
  if (!result) {
    __cxa_bad_cast();
  }
  a1[18] = result[18];
  a1[19] = result[19];
  a1[16] = result[16];
  a1[17] = result[17];
  return result;
}

void sub_19E1E0B80()
{
}

void sub_19E1E0B94()
{
}

void sub_19E1E0BAC(void *a1)
{
  unsigned int v1 = sub_19E1E1B08(a1);

  operator delete(v1);
}

uint64_t sub_19E1E0BD4(uint64_t result, FILE *a2, int *a3, int a4, int a5, unsigned int a6)
{
  if (a6 > 0x20 || ((1 << a6) & 0x100010100) == 0) {
    sub_19E2F6320(23);
  }
  switch(a5)
  {
    case 8:
      if (a6 == 32)
      {
LABEL_9:
        sub_19E1E0CEC(result, a2, a3, a4);
      }
LABEL_27:
      sub_19E2F6320(45);
    case 16:
      if (a6 == 32)
      {
        goto LABEL_9;
      }
      goto LABEL_27;
    case 32:
      switch(a6)
      {
        case 0x20u:
          goto LABEL_9;
        case 8u:
          sub_19E1E0F3C(result, a2, a3, a4);
        case 0x10u:
          sub_19E1E0E14(result, a2, a3, a4);
      }
      break;
  }
  return result;
}

void sub_19E1E0CEC(int a1, FILE *__stream, int *a3, int a4)
{
  if (__stream)
  {
    if (a4 == 3)
    {
      int v6 = *a3 & 0xF;
      if (*a3 <= 0) {
        int v6 = -(-*a3 & 0xF);
      }
      if (v6 >= 15) {
        int v7 = 16;
      }
      else {
        int v7 = 15 - v6;
      }
      sub_19E2F673C(__stream, a3, v7);
      sub_19E2F67D4((size_t)__stream, a3, 85, v7);
      if ((*(unsigned char *)a3 & 0xF) != 0) {
        sub_19E2F6320(17);
      }
    }
    operator new[]();
  }
  sub_19E2F6320(9);
}

void sub_19E1E0E14(int a1, FILE *__stream, int *a3, int a4)
{
  if (__stream)
  {
    if (a4 == 3)
    {
      int v6 = *a3 & 0xF;
      if (*a3 <= 0) {
        int v6 = -(-*a3 & 0xF);
      }
      if (v6 >= 15) {
        int v7 = 16;
      }
      else {
        int v7 = 15 - v6;
      }
      sub_19E2F673C(__stream, a3, v7);
      sub_19E2F67D4((size_t)__stream, a3, 85, v7);
      if ((*(unsigned char *)a3 & 0xF) != 0) {
        sub_19E2F6320(17);
      }
    }
    operator new[]();
  }
  sub_19E2F6320(9);
}

void sub_19E1E0F3C(int a1, FILE *__stream, int *a3, int a4)
{
  if (__stream)
  {
    if (a4 == 3)
    {
      int v6 = *a3 & 0xF;
      if (*a3 <= 0) {
        int v6 = -(-*a3 & 0xF);
      }
      if (v6 >= 15) {
        int v7 = 16;
      }
      else {
        int v7 = 15 - v6;
      }
      sub_19E2F673C(__stream, a3, v7);
      sub_19E2F67D4((size_t)__stream, a3, 85, v7);
      if ((*(unsigned char *)a3 & 0xF) != 0) {
        sub_19E2F6320(17);
      }
    }
    operator new[]();
  }
  sub_19E2F6320(9);
}

void sub_19E1E105C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 168);
  uint64_t v4 = *(void *)(a1 + 176);
  uint64_t v2 = (void **)(a1 + 168);
  unint64_t v5 = dword_1E9457D98;
  unint64_t v6 = (v4 - v3) >> 3;
  if (dword_1E9457D98 <= v6)
  {
    if (dword_1E9457D98 < v6) {
      *(void *)(a1 + 176) = v3 + 8 * dword_1E9457D98;
    }
  }
  else
  {
    sub_19E1599BC(v2, dword_1E9457D98 - v6);
    unint64_t v5 = dword_1E9457D98;
  }
  uint64_t v7 = *(void *)(a1 + 192);
  unint64_t v8 = (*(void *)(a1 + 200) - v7) >> 3;
  if (v5 <= v8)
  {
    if (v5 < v8) {
      *(void *)(a1 + 200) = v7 + 8 * v5;
    }
  }
  else
  {
    sub_19E1599BC((void **)(a1 + 192), v5 - v8);
  }
  if (!*(unsigned char *)(a1 + 161)) {
    operator new[]();
  }
  if (dword_1E9457D98 >= 1) {
    operator new[]();
  }
}

void *sub_19E1E1B08(void *a1)
{
  *a1 = &unk_1EF0A6018;
  uint64_t v4 = a1 + 36;
  uint64_t v2 = (void **)a1[36];
  uint64_t v3 = (void **)v4[1];
  if (v3 == v2)
  {
    uint64_t v2 = v3;
  }
  else
  {
    unint64_t v5 = 0;
    do
    {
      if (v2[v5])
      {
        operator delete[](v2[v5]);
        uint64_t v2 = (void **)a1[36];
        uint64_t v3 = (void **)a1[37];
      }
      ++v5;
    }
    while (v5 < v3 - v2);
  }
  if (v2)
  {
    a1[37] = v2;
    operator delete(v2);
  }
  sub_19E3030E8((uint64_t)(a1 + 27));
  unint64_t v6 = (void *)a1[24];
  if (v6)
  {
    a1[25] = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)a1[21];
  if (v7)
  {
    a1[22] = v7;
    operator delete(v7);
  }
  *a1 = &unk_1EF0A50F8;
  unint64_t v8 = (void *)a1[1];
  if (v8)
  {
    a1[2] = v8;
    operator delete(v8);
  }
  return a1;
}

uint64_t sub_19E1E1BE8(uint64_t a1, char **a2, uint64_t a3, uint64_t a4, int a5, char a6)
{
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  unint64_t v8 = (char **)(a1 + 80);
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(void *)a1 = &unk_1EF0A5B78;
  uint64_t v70 = (void **)(a1 + 352);
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(void *)(a1 + 496) = a4;
  *(void *)(a1 + 520) = 0;
  *(_OWORD *)(a1 + 504) = 0u;
  *(void *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 536) = 0u;
  *(unsigned char *)(a1 + 41) = 0;
  *(unsigned char *)(a1 + 529) = a6;
  *(_OWORD *)(a1 + 332) = xmmword_19E351440;
  *(_DWORD *)(a1 + 328) = a5;
  *(unsigned char *)(a1 + 528) = 0;
  if (v8 != a2) {
    sub_19E1E5B9C(v8, *a2, a2[1], (a2[1] - *a2) >> 3);
  }
  *(void *)(a1 + 224) = a3;
  char v72 = 16;
  strcpy(__p, "From constructor");
  sub_19E1E22E4(a1);
  *(void *)(a1 + 264) = *(void *)(a1 + 256);
  *(void *)(a1 + 240) = *(void *)(a1 + 232);
  *(void *)(a1 + 360) = *(void *)(a1 + 352);
  uint64_t v9 = *(void *)(a1 + 80);
  if (*(void *)(a1 + 88) != v9)
  {
    unint64_t v10 = 0;
    int v11 = (void **)(a1 + 256);
    while (1)
    {
      int v13 = (*(uint64_t (**)(void))(**(void **)(v9 + 8 * v10) + 272))(*(void *)(v9 + 8 * v10));
      int v14 = v13;
      int v16 = *(char **)(a1 + 264);
      unint64_t v15 = *(void *)(a1 + 272);
      if ((unint64_t)v16 < v15)
      {
        *(_DWORD *)int v16 = v13;
        uint64_t v17 = (uint64_t)(v16 + 4);
        goto LABEL_29;
      }
      BOOL v18 = (char *)*v11;
      uint64_t v19 = v16 - (unsigned char *)*v11;
      uint64_t v20 = v19 >> 2;
      unint64_t v21 = (v19 >> 2) + 1;
      if (v21 >> 62) {
        goto LABEL_73;
      }
      uint64_t v22 = v15 - (void)v18;
      if (v22 >> 1 > v21) {
        unint64_t v21 = v22 >> 1;
      }
      unint64_t v23 = (unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v21;
      if (v23) {
        break;
      }
      uint64_t v24 = 0;
      std::string::size_type v25 = (_DWORD *)(4 * v20);
      *(_DWORD *)(4 * v20) = v14;
      uint64_t v17 = 4 * v20 + 4;
      if (v16 != v18) {
        goto LABEL_21;
      }
LABEL_27:
      *(void *)(a1 + 256) = v25;
      *(void *)(a1 + 264) = v17;
      *(void *)(a1 + 272) = &v24[4 * v23];
      if (v18) {
        operator delete(v18);
      }
LABEL_29:
      *(void *)(a1 + 264) = v17;
      if (!v10) {
        goto LABEL_7;
      }
      uint64_t v36 = *(char **)(a1 + 360);
      unint64_t v35 = *(void *)(a1 + 368);
      if ((unint64_t)v36 >= v35)
      {
        long long v37 = (char *)*v70;
        uint64_t v38 = v36 - (unsigned char *)*v70;
        uint64_t v39 = v38 >> 2;
        unint64_t v40 = (v38 >> 2) + 1;
        if (v40 >> 62) {
LABEL_73:
        }
          sub_19E13D694();
        uint64_t v41 = v35 - (void)v37;
        if (v41 >> 1 > v40) {
          unint64_t v40 = v41 >> 1;
        }
        if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v42 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v42 = v40;
        }
        if (v42)
        {
          if (v42 >> 62) {
LABEL_72:
          }
            sub_19E13C418();
          float v43 = operator new(4 * v42);
          float v44 = &v43[4 * v39];
          *float v44 = v10;
          uint64_t v12 = (uint64_t)(v44 + 1);
          if (v36 == v37) {
            goto LABEL_48;
          }
LABEL_42:
          unint64_t v45 = v36 - 4 - v37;
          if (v45 < 0x2C) {
            goto LABEL_76;
          }
          if ((unint64_t)(v36 - &v43[v38]) < 0x20) {
            goto LABEL_76;
          }
          uint64_t v46 = (v45 >> 2) + 1;
          uint64_t v47 = 4 * (v46 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v48 = &v36[-v47];
          float v44 = (_DWORD *)((char *)v44 - v47);
          std::string::size_type v49 = &v43[4 * v39 - 16];
          std::string::size_type v50 = v36 - 16;
          uint64_t v51 = v46 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v52 = *(_OWORD *)v50;
            *(v49 - 1) = *((_OWORD *)v50 - 1);
            *std::string::size_type v49 = v52;
            v49 -= 2;
            v50 -= 32;
            v51 -= 8;
          }
          while (v51);
          uint64_t v36 = v48;
          if (v46 != (v46 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_76:
            do
            {
              int v53 = *((_DWORD *)v36 - 1);
              v36 -= 4;
              *--float v44 = v53;
            }
            while (v36 != v37);
          }
        }
        else
        {
          float v43 = 0;
          float v44 = (_DWORD *)(4 * v39);
          *(_DWORD *)(4 * v39) = v10;
          uint64_t v12 = 4 * v39 + 4;
          if (v36 != v37) {
            goto LABEL_42;
          }
        }
LABEL_48:
        *(void *)(a1 + 352) = v44;
        *(void *)(a1 + 360) = v12;
        *(void *)(a1 + 368) = &v43[4 * v42];
        if (v37) {
          operator delete(v37);
        }
        goto LABEL_6;
      }
      *(_DWORD *)uint64_t v36 = v10;
      uint64_t v12 = (uint64_t)(v36 + 4);
LABEL_6:
      *(void *)(a1 + 360) = v12;
LABEL_7:
      ++v10;
      uint64_t v9 = *(void *)(a1 + 80);
      if (v10 >= (*(void *)(a1 + 88) - v9) >> 3) {
        goto LABEL_50;
      }
    }
    if (v23 >> 62) {
      goto LABEL_72;
    }
    uint64_t v24 = operator new(4 * v23);
    std::string::size_type v25 = &v24[4 * v20];
    _DWORD *v25 = v14;
    uint64_t v17 = (uint64_t)(v25 + 1);
    if (v16 == v18) {
      goto LABEL_27;
    }
LABEL_21:
    unint64_t v26 = v16 - 4 - v18;
    if (v26 < 0x2C) {
      goto LABEL_77;
    }
    if ((unint64_t)(v16 - &v24[v19]) < 0x20) {
      goto LABEL_77;
    }
    uint64_t v27 = (v26 >> 2) + 1;
    uint64_t v28 = 4 * (v27 & 0x7FFFFFFFFFFFFFF8);
    std::string::size_type v29 = &v16[-v28];
    std::string::size_type v25 = (_DWORD *)((char *)v25 - v28);
    uint64_t v30 = &v24[4 * v20 - 16];
    float32x4_t v31 = v16 - 16;
    uint64_t v32 = v27 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v33 = *(_OWORD *)v31;
      *(v30 - 1) = *((_OWORD *)v31 - 1);
      *uint64_t v30 = v33;
      v30 -= 2;
      v31 -= 32;
      v32 -= 8;
    }
    while (v32);
    int v16 = v29;
    if (v27 != (v27 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_77:
      do
      {
        int v34 = *((_DWORD *)v16 - 1);
        v16 -= 4;
        *--std::string::size_type v25 = v34;
      }
      while (v16 != v18);
    }
    goto LABEL_27;
  }
LABEL_50:
  unint64_t v54 = dword_1E9457D98;
  uint64_t v55 = *(void *)(a1 + 376);
  unint64_t v56 = (*(void *)(a1 + 384) - v55) >> 2;
  if (dword_1E9457D98 <= v56)
  {
    if (dword_1E9457D98 < v56) {
      *(void *)(a1 + 384) = v55 + 4 * dword_1E9457D98;
    }
  }
  else
  {
    sub_19E1C5E88(a1 + 376, dword_1E9457D98 - v56);
    unint64_t v54 = dword_1E9457D98;
  }
  uint64_t v57 = *(void *)(a1 + 400);
  unint64_t v58 = (*(void *)(a1 + 408) - v57) >> 2;
  if (v54 <= v58)
  {
    if (v54 < v58) {
      *(void *)(a1 + 408) = v57 + 4 * v54;
    }
  }
  else
  {
    sub_19E1C5E88(a1 + 400, v54 - v58);
    unint64_t v54 = dword_1E9457D98;
  }
  uint64_t v59 = *(void *)(a1 + 424);
  unint64_t v60 = (*(void *)(a1 + 432) - v59) >> 2;
  if (v54 <= v60)
  {
    if (v54 < v60) {
      *(void *)(a1 + 432) = v59 + 4 * v54;
    }
  }
  else
  {
    sub_19E1C5E88(a1 + 424, v54 - v60);
  }
  unint64_t v61 = (uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 3;
  uint64_t v62 = *(void *)(a1 + 544);
  uint64_t v63 = *(void *)(a1 + 536);
  unint64_t v64 = 0xAAAAAAAAAAAAAAABLL * ((v62 - v63) >> 3);
  if (v61 <= v64)
  {
    if (v61 < v64)
    {
      uint64_t v65 = v63 + 24 * v61;
      if (v62 != v65)
      {
        uint64_t v66 = *(void *)(a1 + 544);
        do
        {
          std::string v68 = *(void **)(v66 - 24);
          v66 -= 24;
          uint64_t v67 = v68;
          if (v68)
          {
            *(void *)(v62 - 16) = v67;
            operator delete(v67);
          }
          uint64_t v62 = v66;
        }
        while (v66 != v65);
      }
      *(void *)(a1 + 544) = v65;
    }
  }
  else
  {
    sub_19E232360(a1 + 536, v61 - v64);
  }
  return a1;
}

void sub_19E1E2170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
  {
    operator delete(__p);
    uint64_t v24 = (void **)(v22 + 59);
    sub_19E14315C(a12);
    std::string::size_type v25 = *a10;
    if (!*a10)
    {
LABEL_3:
      sub_19E14315C(v24);
      unint64_t v26 = (void *)v22[56];
      if (!v26) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v24 = (void **)(v22 + 59);
    sub_19E14315C(a12);
    std::string::size_type v25 = *a10;
    if (!*a10) {
      goto LABEL_3;
    }
  }
  v22[64] = v25;
  operator delete(v25);
  sub_19E14315C(v24);
  unint64_t v26 = (void *)v22[56];
  if (!v26)
  {
LABEL_4:
    uint64_t v27 = *a13;
    if (!*a13) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  v22[57] = v26;
  operator delete(v26);
  uint64_t v27 = *a13;
  if (!*a13)
  {
LABEL_5:
    uint64_t v28 = *a14;
    if (!*a14) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  v22[54] = v27;
  operator delete(v27);
  uint64_t v28 = *a14;
  if (!*a14)
  {
LABEL_6:
    std::string::size_type v29 = *a15;
    if (!*a15) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  v22[51] = v28;
  operator delete(v28);
  std::string::size_type v29 = *a15;
  if (!*a15)
  {
LABEL_7:
    uint64_t v30 = *a16;
    if (!*a16) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  v22[48] = v29;
  operator delete(v29);
  uint64_t v30 = *a16;
  if (!*a16)
  {
LABEL_8:
    float32x4_t v31 = (void *)v22[38];
    if (!v31) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
LABEL_17:
  v22[45] = v30;
  operator delete(v30);
  float32x4_t v31 = (void *)v22[38];
  if (!v31)
  {
LABEL_9:
    uint64_t v32 = *a11;
    if (!*a11) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  v22[39] = v31;
  operator delete(v31);
  uint64_t v32 = *a11;
  if (!*a11)
  {
LABEL_10:
    sub_19E1CDA54(v22);
    _Unwind_Resume(a1);
  }
LABEL_19:
  v22[36] = v32;
  operator delete(v32);
  sub_19E1CDA54(v22);
  _Unwind_Resume(a1);
}

void sub_19E1E22E4(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 529);
  uint64_t v3 = *(void *)(a1 + 496);
  int v4 = *(_DWORD *)(v3 + 8);
  *(_DWORD *)(a1 + 340) = v4;
  unint64_t v5 = *(int **)(v3 + 16);
  unint64_t v6 = *(int **)(v3 + 24);
  uint64_t v7 = v5 + 1;
  if (v5 != v6 && v7 != v6)
  {
    int v9 = *v5;
    unint64_t v10 = v5 + 1;
    do
    {
      int v12 = *v10++;
      int v11 = v12;
      BOOL v13 = v9 < v12;
      if (v9 <= v12) {
        int v9 = v11;
      }
      if (v13) {
        unint64_t v5 = v7;
      }
      uint64_t v7 = v10;
    }
    while (v10 != v6);
  }
  int v14 = *v5;
  if (v14 > v4) {
    int v4 = v14;
  }
  *(_DWORD *)(a1 + 344) = v4;
  (*(void (**)(void))(***(void ***)(a1 + 80) + 272))(**(void **)(a1 + 80));
  int v15 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 272))(a1);
  uint64_t v16 = *(void *)(a1 + 104);
  *(_DWORD *)(a1 + 72) = v15;
  *(_DWORD *)(a1 + 348) = v15;
  *(void *)(a1 + 112) = v16;
  if (!dword_1E9457D98)
  {
    int v17 = 0;
    if (v2) {
      goto LABEL_79;
    }
LABEL_19:
    *(void *)(a1 + 456) = *(void *)(a1 + 448);
    uint64_t v18 = *(void *)(a1 + 504);
    *(void *)(a1 + 512) = v18;
    if (v17)
    {
      sub_19E1599BC((void **)(a1 + 448), v17);
      int v17 = dword_1E9457D98;
      uint64_t v18 = *(void *)(a1 + 504);
      uint64_t v19 = dword_1E9457D98;
      unint64_t v20 = (*(void *)(a1 + 512) - v18) >> 3;
      BOOL v21 = dword_1E9457D98 >= v20;
      if (dword_1E9457D98 > v20)
      {
        sub_19E1599BC((void **)(a1 + 504), dword_1E9457D98 - v20);
        int v17 = dword_1E9457D98;
LABEL_25:
        if (v17 >= 1) {
          operator new[]();
        }
        uint64_t v22 = *(void *)(a1 + 200);
        uint64_t v57 = (uint64_t *)(a1 + 200);
        uint64_t v23 = *(void *)(a1 + 208);
        if (v23 == v22)
        {
          unint64_t v25 = 0x1E9457000uLL;
        }
        else
        {
          uint64_t v24 = *(void *)(a1 + 208);
          unint64_t v25 = 0x1E9457000;
          do
          {
            uint64_t v27 = *(void **)(v24 - 24);
            v24 -= 24;
            unint64_t v26 = v27;
            if (v27)
            {
              *(void *)(v23 - 16) = v26;
              operator delete(v26);
            }
            uint64_t v23 = v24;
          }
          while (v24 != v22);
          uint64_t v23 = *v57;
        }
        *(void *)(a1 + 208) = v22;
        unint64_t v28 = (uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 3;
        unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * ((v22 - v23) >> 3);
        if (v28 <= v29)
        {
          if (v28 < v29)
          {
            uint64_t v30 = v23 + 24 * v28;
            if (v22 != v30)
            {
              uint64_t v31 = v22;
              do
              {
                long long v33 = *(void **)(v31 - 24);
                v31 -= 24;
                uint64_t v32 = v33;
                if (v33)
                {
                  *(void *)(v22 - 16) = v32;
                  operator delete(v32);
                }
                uint64_t v22 = v31;
              }
              while (v31 != v30);
            }
            *(void *)(a1 + 208) = v30;
          }
        }
        else
        {
          sub_19E232360((uint64_t)v57, v28 - v29);
        }
        if (*(void *)(a1 + 88) != *(void *)(a1 + 80))
        {
          unint64_t v34 = 0;
          int v35 = *(_DWORD *)(v25 + 3480);
          do
          {
            uint64_t v36 = *v57 + 24 * v34;
            unint64_t v37 = (uint64_t)(*(void *)(v36 + 8) - *(void *)v36) >> 3;
            if (v35 <= v37)
            {
              if (v35 < v37) {
                *(void *)(v36 + 8) = *(void *)v36 + 8 * v35;
              }
            }
            else
            {
              sub_19E1599BC((void **)v36, v35 - v37);
              int v35 = *(_DWORD *)(v25 + 3480);
            }
            if (v35 >= 1)
            {
              uint64_t v38 = *(void *)(*(void *)(a1 + 80) + 8 * v34);
              (*(uint64_t (**)(uint64_t))(*(void *)v38 + 272))(v38);
              operator new[]();
            }
            ++v34;
          }
          while (v34 < (uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 3);
        }
        uint64_t v39 = (uint64_t *)(a1 + 472);
        uint64_t v41 = *(void *)(a1 + 472);
        uint64_t v40 = *(void *)(a1 + 480);
        if (v40 != v41)
        {
          uint64_t v42 = *(void *)(a1 + 480);
          do
          {
            float v44 = *(void **)(v42 - 24);
            v42 -= 24;
            float v43 = v44;
            if (v44)
            {
              *(void *)(v40 - 16) = v43;
              operator delete(v43);
            }
            uint64_t v40 = v42;
          }
          while (v42 != v41);
          uint64_t v40 = *v39;
        }
        *(void *)(a1 + 480) = v41;
        unint64_t v45 = 0xAAAAAAAAAAAAAAABLL * ((v41 - v40) >> 3);
        if (v45 > 1)
        {
          if (v41 - v40 != 48)
          {
            uint64_t v46 = v40 + 48;
            if (v41 != v40 + 48)
            {
              uint64_t v47 = v41;
              do
              {
                std::string::size_type v49 = *(void **)(v47 - 24);
                v47 -= 24;
                uint64_t v48 = v49;
                if (v49)
                {
                  *(void *)(v41 - 16) = v48;
                  operator delete(v48);
                }
                uint64_t v41 = v47;
              }
              while (v47 != v46);
            }
            *(void *)(a1 + 480) = v46;
          }
        }
        else
        {
          sub_19E232360(a1 + 472, 2 - v45);
        }
        uint64_t v50 = *(void *)(a1 + 472);
        int v51 = *(_DWORD *)(v25 + 3480);
        unint64_t v52 = (uint64_t)(*(void *)(v50 + 8) - *(void *)v50) >> 3;
        if (v51 <= v52)
        {
          if (v51 < v52) {
            *(void *)(v50 + 8) = *(void *)v50 + 8 * v51;
          }
        }
        else
        {
          sub_19E1599BC((void **)v50, v51 - v52);
          int v51 = *(_DWORD *)(v25 + 3480);
        }
        if (v51 > 0) {
          operator new[]();
        }
        uint64_t v53 = *(void *)(*v39 + 24);
        unint64_t v54 = (*(void *)(*v39 + 32) - v53) >> 3;
        if (v51 <= v54)
        {
          if (v51 < v54) {
            *(void *)(*v39 + 32) = v53 + 8 * v51;
          }
        }
        else
        {
          sub_19E1599BC((void **)(*v39 + 24), v51 - v54);
          int v51 = *(_DWORD *)(v25 + 3480);
        }
        if (v51 >= 1) {
          operator new[]();
        }
        goto LABEL_79;
      }
    }
    else
    {
      uint64_t v19 = 0;
      BOOL v21 = 1;
    }
    if (!v21) {
      *(void *)(a1 + 512) = v18 + 8 * v19;
    }
    goto LABEL_25;
  }
  sub_19E1599BC((void **)(a1 + 104), dword_1E9457D98);
  int v17 = dword_1E9457D98;
  if (dword_1E9457D98 >= 1) {
    operator new[]();
  }
  if (!v2) {
    goto LABEL_19;
  }
LABEL_79:
  *(void *)(a1 + 312) = *(void *)(a1 + 304);
  int v55 = *(_DWORD *)(a1 + 340);
  BOOL v21 = __CFADD__(v55, 1);
  int v56 = v55 + 1;
  if (!v21)
  {
    sub_19E1C5E88(a1 + 304, v56);
  }
}

uint64_t sub_19E1E32B4(uint64_t a1)
{
  return a1 + 104;
}

uint64_t sub_19E1E32BC(uint64_t a1)
{
  return a1 + 448;
}

uint64_t sub_19E1E32C4(uint64_t a1)
{
  return a1 + 504;
}

uint64_t sub_19E1E32CC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 80);
  if (*(void *)(a1 + 88) == v1) {
    return 0;
  }
  unint64_t v3 = 0;
  do
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(v1 + 8 * v3) + 56))(*(void *)(v1 + 8 * v3));
    if (result) {
      break;
    }
    ++v3;
    uint64_t v1 = *(void *)(a1 + 80);
  }
  while (v3 < (*(void *)(a1 + 88) - v1) >> 3);
  return result;
}

uint64_t sub_19E1E334C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(result + 80);
  if (*(void *)(result + 88) != v4)
  {
    uint64_t v8 = result;
    unint64_t v9 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(v4 + 8 * v9) + 64))(*(void *)(v4 + 8 * v9), a2, a3, a4);
      ++v9;
      uint64_t v4 = *(void *)(v8 + 80);
    }
    while (v9 < (*(void *)(v8 + 88) - v4) >> 3);
  }
  return result;
}

uint64_t sub_19E1E33E0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(result + 80);
  if (*(void *)(result + 88) != v5)
  {
    uint64_t v10 = result;
    unint64_t v11 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(v5 + 8 * v11) + 72))(*(void *)(v5 + 8 * v11), a2, a3, a4, a5);
      ++v11;
      uint64_t v5 = *(void *)(v10 + 80);
    }
    while (v11 < (*(void *)(v10 + 88) - v5) >> 3);
  }
  return result;
}

void *sub_19E1E347C(void *result, void *lpsrc, void *a3)
{
  unint64_t v3 = a3;
  uint64_t v4 = (uint64_t)result;
  if (lpsrc)
  {
    uint64_t result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3D00, 0);
    uint64_t v5 = (uint64_t)result;
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v5 = 0;
  if (a3)
  {
LABEL_3:
    uint64_t result = __dynamic_cast(v3, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3D00, 0);
    unint64_t v3 = result;
  }
LABEL_4:
  uint64_t v6 = *(void *)(v4 + 80);
  if (*(void *)(v4 + 88) != v6)
  {
    unint64_t v7 = 0;
    do
    {
      uint64_t result = (void *)(*(uint64_t (**)(void, void, void))(**(void **)(v6 + 8 * v7) + 80))(*(void *)(v6 + 8 * v7), *(void *)(*(void *)(v5 + 80) + 8 * v7), *(void *)(v3[10] + 8 * v7));
      ++v7;
      uint64_t v6 = *(void *)(v4 + 80);
    }
    while (v7 < (*(void *)(v4 + 88) - v6) >> 3);
  }
  return result;
}

void *sub_19E1E35B0(void *result, void *lpsrc, void *a3)
{
  unint64_t v3 = a3;
  uint64_t v4 = (uint64_t)result;
  if (lpsrc)
  {
    uint64_t result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3D00, 0);
    uint64_t v5 = (uint64_t)result;
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v5 = 0;
  if (a3)
  {
LABEL_3:
    uint64_t result = __dynamic_cast(v3, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3D00, 0);
    unint64_t v3 = result;
  }
LABEL_4:
  uint64_t v6 = *(void *)(v4 + 80);
  if (*(void *)(v4 + 88) != v6)
  {
    unint64_t v7 = 0;
    do
    {
      uint64_t result = (void *)(*(uint64_t (**)(void, void, void))(**(void **)(v6 + 8 * v7) + 88))(*(void *)(v6 + 8 * v7), *(void *)(*(void *)(v5 + 80) + 8 * v7), *(void *)(v3[10] + 8 * v7));
      ++v7;
      uint64_t v6 = *(void *)(v4 + 80);
    }
    while (v7 < (*(void *)(v4 + 88) - v6) >> 3);
  }
  return result;
}

void *sub_19E1E36E4(void *result, void *lpsrc)
{
  int v2 = result;
  if (lpsrc)
  {
    uint64_t result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3D00, 0);
    unint64_t v3 = result;
    uint64_t v4 = v2[10];
    if (v2[11] == v4) {
      return result;
    }
  }
  else
  {
    unint64_t v3 = 0;
    uint64_t v4 = result[10];
    if (result[11] == v4) {
      return result;
    }
  }
  unint64_t v5 = 0;
  do
  {
    uint64_t result = (void *)(*(uint64_t (**)(void, void))(**(void **)(v4 + 8 * v5) + 96))(*(void *)(v4 + 8 * v5), *(void *)(v3[10] + 8 * v5));
    ++v5;
    uint64_t v4 = v2[10];
  }
  while (v5 < (v2[11] - v4) >> 3);
  return result;
}

void *sub_19E1E37C8(void *result, void *lpsrc)
{
  int v2 = result;
  if (lpsrc)
  {
    uint64_t result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3D00, 0);
    unint64_t v3 = result;
    uint64_t v4 = v2[10];
    if (v2[11] == v4) {
      return result;
    }
  }
  else
  {
    unint64_t v3 = 0;
    uint64_t v4 = result[10];
    if (result[11] == v4) {
      return result;
    }
  }
  unint64_t v5 = 0;
  do
  {
    uint64_t result = (void *)(*(uint64_t (**)(void, void))(**(void **)(v4 + 8 * v5) + 104))(*(void *)(v4 + 8 * v5), *(void *)(v3[10] + 8 * v5));
    ++v5;
    uint64_t v4 = v2[10];
  }
  while (v5 < (v2[11] - v4) >> 3);
  return result;
}

uint64_t sub_19E1E38AC(uint64_t result, float a2)
{
  uint64_t v2 = *(void *)(result + 80);
  if (*(void *)(result + 88) != v2)
  {
    uint64_t v4 = result;
    unint64_t v5 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(void, float))(**(void **)(v2 + 8 * v5) + 112))(*(void *)(v2 + 8 * v5), a2);
      ++v5;
      uint64_t v2 = *(void *)(v4 + 80);
    }
    while (v5 < (*(void *)(v4 + 88) - v2) >> 3);
  }
  return result;
}

uint64_t sub_19E1E3928(uint64_t result, float a2)
{
  uint64_t v2 = *(void *)(result + 80);
  if (*(void *)(result + 88) != v2)
  {
    uint64_t v4 = result;
    unint64_t v5 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(void, float))(**(void **)(v2 + 8 * v5) + 120))(*(void *)(v2 + 8 * v5), a2);
      ++v5;
      uint64_t v2 = *(void *)(v4 + 80);
    }
    while (v5 < (*(void *)(v4 + 88) - v2) >> 3);
  }
  return result;
}

uint64_t sub_19E1E39B4(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 80);
  if (*(void *)(result + 88) != v1)
  {
    uint64_t v2 = result;
    unint64_t v3 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(void))(**(void **)(v1 + 8 * v3) + 160))(*(void *)(v1 + 8 * v3));
      ++v3;
      uint64_t v1 = *(void *)(v2 + 80);
    }
    while (v3 < (*(void *)(v2 + 88) - v1) >> 3);
  }
  return result;
}

void sub_19E1E3A20(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  if (*(void *)(a1 + 88) != v2)
  {
    unint64_t v3 = 0;
    do
    {
      (*(void (**)(void))(**(void **)(v2 + 8 * v3) + 200))(*(void *)(v2 + 8 * v3));
      ++v3;
      uint64_t v2 = *(void *)(a1 + 80);
    }
    while (v3 < (*(void *)(a1 + 88) - v2) >> 3);
  }
  strcpy(__p, "From allocAllBuffers");
  sub_19E1E22E4(a1);
}

void sub_19E1E3AE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E1E3B04(void *a1)
{
  uint64_t v3 = a1[35];
  uint64_t v2 = a1[36];
  if (v2 == v3)
  {
    uint64_t v3 = a1[36];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      unint64_t v5 = *(void ***)(v3 + 8 * v4);
      if (*v5)
      {
        operator delete[](*v5);
        int *v5 = 0;
        uint64_t v3 = a1[35];
        uint64_t v2 = a1[36];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  a1[36] = v3;
  uint64_t v6 = a1[10];
  if (a1[11] != v6)
  {
    unint64_t v7 = 0;
    do
    {
      (*(void (**)(void))(**(void **)(v6 + 8 * v7) + 208))(*(void *)(v6 + 8 * v7));
      ++v7;
      uint64_t v6 = a1[10];
    }
    while (v7 < (a1[11] - v6) >> 3);
  }
  a1[14] = a1[13];
  a1[57] = a1[56];
  a1[64] = a1[63];
  uint64_t v9 = a1[25];
  uint64_t v8 = a1[26];
  if (v8 != v9)
  {
    uint64_t v10 = a1[26];
    do
    {
      int v12 = *(void **)(v10 - 24);
      v10 -= 24;
      unint64_t v11 = v12;
      if (v12)
      {
        *(void *)(v8 - 16) = v11;
        operator delete(v11);
      }
      uint64_t v8 = v10;
    }
    while (v10 != v9);
  }
  a1[26] = v9;
  uint64_t v14 = a1[59];
  uint64_t v13 = a1[60];
  if (v13 != v14)
  {
    uint64_t v15 = a1[60];
    do
    {
      int v17 = *(void **)(v15 - 24);
      v15 -= 24;
      uint64_t v16 = v17;
      if (v17)
      {
        *(void *)(v13 - 16) = v16;
        operator delete(v16);
      }
      uint64_t v13 = v15;
    }
    while (v15 != v14);
  }
  a1[60] = v14;
  a1[39] = a1[38];
}

void sub_19E1E3C50(uint64_t a1, void *a2, void *a3, int a4, char a5)
{
  int v44 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 272))(a1);
  if (a4 >= 1)
  {
    unint64_t v8 = 0;
    while ((a5 & 1) != 0)
    {
      if (a3[1] == *a3)
      {
        if (v44 >= 1)
        {
          int v16 = 0;
          uint64_t v23 = 0;
          float v24 = 1.1755e-38;
          do
          {
            float v25 = *(float *)(*(void *)(*a2 + 8 * v8) + 4 * v23);
            if (v25 > v24) {
              int v16 = v23;
            }
            float v24 = fmaxf(v25, v24);
            ++v23;
          }
          while (v44 != v23);
          goto LABEL_21;
        }
LABEL_24:
        int v16 = 0;
        uint64_t v17 = *(void *)(a1 + 376);
        *(_DWORD *)(v17 + 4 * v8) = 0;
        uint64_t v18 = *(void **)(a1 + 496);
        uint64_t v19 = v18[8];
        if (v19) {
          goto LABEL_22;
        }
        goto LABEL_25;
      }
      if (v8 >= (a4 - 1))
      {
        int v16 = 2;
        uint64_t v17 = *(void *)(a1 + 376);
        *(_DWORD *)(v17 + 4 * v8) = 2;
        uint64_t v18 = *(void **)(a1 + 496);
        uint64_t v19 = v18[8];
        if (v19)
        {
LABEL_22:
          unint64_t v26 = (int *)(v19 + 8 * v16 + 4);
LABEL_23:
          int v27 = *v26;
          goto LABEL_36;
        }
      }
      else
      {
        int v16 = **(_DWORD **)(*a3 + 24 * v8 + 24);
        uint64_t v17 = *(void *)(a1 + 376);
        *(_DWORD *)(v17 + 4 * v8) = v16;
        uint64_t v18 = *(void **)(a1 + 496);
        uint64_t v19 = v18[8];
        if (v19) {
          goto LABEL_22;
        }
      }
LABEL_25:
      uint64_t v28 = v18[6];
      if (v28)
      {
        unint64_t v29 = v18 + 6;
        do
        {
          int v30 = *(_DWORD *)(v28 + 28);
          BOOL v31 = v30 < v16;
          if (v30 >= v16) {
            uint64_t v32 = (uint64_t *)v28;
          }
          else {
            uint64_t v32 = (uint64_t *)(v28 + 8);
          }
          if (!v31) {
            unint64_t v29 = (void *)v28;
          }
          uint64_t v28 = *v32;
        }
        while (*v32);
        if (v29 != v18 + 6 && *((_DWORD *)v29 + 7) <= v16)
        {
          unint64_t v26 = (int *)(v29 + 4);
          goto LABEL_23;
        }
      }
      int v27 = -1;
LABEL_36:
      *(_DWORD *)(*(void *)(a1 + 400) + 4 * v8) = v27 + 1;
      uint64_t v33 = *(int *)(v17 + 4 * v8);
      uint64_t v34 = v18[13];
      if (v34)
      {
        int v35 = (int *)(v34 + 8 * v33 + 4);
LABEL_38:
        int v9 = *v35;
        goto LABEL_4;
      }
      uint64_t v38 = v18[11];
      uint64_t v36 = v18 + 11;
      uint64_t v37 = v38;
      if (v38)
      {
        uint64_t v39 = v36;
        do
        {
          int v40 = *(_DWORD *)(v37 + 28);
          BOOL v41 = v40 < (int)v33;
          if (v40 >= (int)v33) {
            uint64_t v42 = (uint64_t *)v37;
          }
          else {
            uint64_t v42 = (uint64_t *)(v37 + 8);
          }
          if (!v41) {
            uint64_t v39 = (void *)v37;
          }
          uint64_t v37 = *v42;
        }
        while (*v42);
        if (v39 != v36 && *((_DWORD *)v39 + 7) <= (int)v33)
        {
          int v35 = (int *)(v39 + 4);
          goto LABEL_38;
        }
      }
      int v9 = -1;
LABEL_4:
      *(_DWORD *)(*(void *)(a1 + 424) + 4 * v8) = v9;
      uint64_t v10 = **(void **)(a1 + 200);
      int v11 = (*(uint64_t (**)(void))(***(void ***)(a1 + 80) + 272))(**(void **)(a1 + 80));
      bzero(*(void **)(v10 + 8 * v8), 4 * v11);
      int v12 = *(void **)(a1 + 200);
      uint64_t v13 = *(int *)(*(void *)(a1 + 400) + 4 * v8);
      *(_DWORD *)(*(void *)(*v12 + 8 * v8) + 4 * v13 - 4) = 1065353216;
      uint64_t v14 = v12[3 * (int)v13];
      int v15 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 80) + 8 * v13) + 272))();
      bzero(*(void **)(v14 + 8 * v8), 4 * v15);
      *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 200) + 24 * *(int *)(*(void *)(a1 + 400) + 4 * v8))
                            + 8 * v8)
                + 4 * *(int *)(*(void *)(a1 + 424) + 4 * v8)) = 1065353216;
      if (++v8 == a4) {
        return;
      }
    }
    if (v44 >= 1)
    {
      int v16 = 0;
      uint64_t v20 = 0;
      float v21 = 1.1755e-38;
      do
      {
        float v22 = *(float *)(*(void *)(*a2 + 8 * v8) + 4 * v20);
        if (v22 > v21) {
          int v16 = v20;
        }
        float v21 = fmaxf(v22, v21);
        ++v20;
      }
      while (v44 != v20);
LABEL_21:
      uint64_t v17 = *(void *)(a1 + 376);
      *(_DWORD *)(v17 + 4 * v8) = v16;
      uint64_t v18 = *(void **)(a1 + 496);
      uint64_t v19 = v18[8];
      if (v19) {
        goto LABEL_22;
      }
      goto LABEL_25;
    }
    goto LABEL_24;
  }
}

uint64_t sub_19E1E3FE8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 80);
  if ((unint64_t)(*(void *)(a1 + 88) - v1) < 9) {
    return 0;
  }
  LODWORD(v3) = 0;
  unint64_t v4 = 1;
  do
  {
    uint64_t v3 = (*(unsigned int (**)(void))(**(void **)(v1 + 8 * v4) + 272))(*(void *)(v1 + 8 * v4))
       + v3;
    ++v4;
    uint64_t v1 = *(void *)(a1 + 80);
  }
  while (v4 < (*(void *)(a1 + 88) - v1) >> 3);
  return v3;
}

uint64_t sub_19E1E408C(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(result + 528) = a2;
  uint64_t v2 = *(void *)(result + 80);
  if (*(void *)(result + 88) != v2)
  {
    uint64_t v4 = result;
    unint64_t v5 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 8 * v5) + 280))(*(void *)(v2 + 8 * v5), a2);
      ++v5;
      uint64_t v2 = *(void *)(v4 + 80);
    }
    while (v5 < (*(void *)(v4 + 88) - v2) >> 3);
  }
  return result;
}

void sub_19E1E4114()
{
}

void sub_19E1E4128(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  if (a5 >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 8 * a5;
    uint64_t v9 = a5;
    do
    {
      uint64_t v10 = *(void *)(a1 + 504);
      int v11 = (*(uint64_t (**)(void))(***(void ***)(a1 + 80) + 264))(**(void **)(a1 + 80));
      bzero(*(void **)(v10 + v7), 4 * v11);
      v7 += 8;
    }
    while (v8 != v7);
    for (uint64_t i = 0; i != v9; ++i)
    {
      uint64_t v13 = *(int *)(a1 + 332);
      uint64_t v14 = *(void *)(*(void *)(a1 + 80) + 8 * v13);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void))(*(void *)v14 + 248))(v14, *(void *)(a1 + 472) + 24 * (int)v13, a3, i, *(unsigned int *)(*(void *)(a1 + 256) + 4 * v13), *(unsigned int *)(*(void *)(a1 + 256) + 4 * v13));
      uint64_t v15 = *(void *)(*(void *)(a1 + 80) + 8 * v13);
      uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 48))(v15);
      uint64_t v18 = *(const void **)v16;
      uint64_t v17 = *(void *)(v16 + 8);
      uint64_t v19 = v17 - *(void *)v16;
      if (v17 == *(void *)v16)
      {
        uint64_t v20 = 0;
      }
      else
      {
        if (v19 < 0) {
          sub_19E13D694();
        }
        uint64_t v20 = operator new(v17 - *(void *)v16);
        memcpy(v20, v18, v19 & 0xFFFFFFFFFFFFFFF8);
      }
      uint64_t v21 = *(void *)(a1 + 504);
      uint64_t v22 = *(void *)(*(void *)(a1 + 80) + 8 * v13);
      int v23 = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 264))(v22);
      int v24 = v23 / 8;
      if (v23 >= 8)
      {
        float v25 = *(float32x4_t **)(v21 + 8 * i);
        unint64_t v26 = (float32x4_t *)*((void *)v20 + i);
        int v27 = v23 / 8;
        do
        {
          float32x4_t v28 = *v26;
          float32x4_t v29 = v26[1];
          v26 += 2;
          float32x4_t v30 = vaddq_f32(v25[1], v29);
          float32x4_t *v25 = vaddq_f32(*v25, v28);
          v25[1] = v30;
          v25 += 2;
          --v27;
        }
        while (v27);
      }
      int v31 = 8 * v24;
      if (8 * v24 < v23)
      {
        uint64_t v32 = *((void *)v20 + i);
        uint64_t v33 = *(void *)(v21 + 8 * i);
        uint64_t v34 = v31;
        if ((unint64_t)(v23 - (uint64_t)v31) < 8) {
          goto LABEL_23;
        }
        unint64_t v35 = v33 + 4 * v31;
        unint64_t v36 = v32 + 4 * v31;
        if (v35 < v32 + 4 * v23 && v36 < v33 + 4 * v23) {
          goto LABEL_23;
        }
        uint64_t v38 = v31 + (v23 & 7) - v23;
        uint64_t v39 = (float32x4_t *)(v36 + 16);
        int v40 = (float32x4_t *)(v35 + 16);
        do
        {
          float32x4_t v41 = vaddq_f32(*v40, *v39);
          v40[-1] = vaddq_f32(v40[-1], v39[-1]);
          float32x4_t *v40 = v41;
          v39 += 2;
          v40 += 2;
          v38 += 8;
        }
        while (v38);
        uint64_t v34 = v23 - (v23 & 7);
        if ((v23 & 7) != 0)
        {
LABEL_23:
          uint64_t v42 = v23 - v34;
          float v43 = (float *)(v33 + 4 * v34);
          int v44 = (float *)(v32 + 4 * v34);
          do
          {
            float v45 = *v44++;
            float *v43 = *v43 + v45;
            ++v43;
            --v42;
          }
          while (v42);
        }
      }
      uint64_t v46 = *(int *)(*(void *)(a1 + 400) + 4 * i);
      uint64_t v47 = *(void *)(*(void *)(a1 + 80) + 8 * v46);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void))(*(void *)v47 + 248))(v47, *(void *)(a1 + 472) + 24 * *(int *)(a1 + 336), a3, i, *(unsigned int *)(a1 + 344), *(unsigned int *)(*(void *)(a1 + 256) + 4 * v46));
      uint64_t v48 = *(void *)(*(void *)(a1 + 80) + 8 * v46);
      uint64_t v49 = (*(uint64_t (**)(uint64_t))(*(void *)v48 + 48))(v48);
      int v51 = *(const void **)v49;
      uint64_t v50 = *(void *)(v49 + 8);
      uint64_t v52 = v50 - *(void *)v49;
      if (v50 == *(void *)v49)
      {
        uint64_t v53 = 0;
      }
      else
      {
        if (v52 < 0) {
          sub_19E13D694();
        }
        uint64_t v53 = operator new(v50 - *(void *)v49);
        memcpy(v53, v51, v52 & 0xFFFFFFFFFFFFFFF8);
      }
      uint64_t v54 = *(void *)(a1 + 504);
      uint64_t v55 = *(void *)(*(void *)(a1 + 80) + 8 * v46);
      int v56 = (*(uint64_t (**)(uint64_t))(*(void *)v55 + 264))(v55);
      int v57 = v56 / 8;
      if (v56 >= 8)
      {
        unint64_t v58 = *(float32x4_t **)(v54 + 8 * i);
        uint64_t v59 = (float32x4_t *)*((void *)v53 + i);
        int v60 = v56 / 8;
        do
        {
          float32x4_t v61 = *v59;
          float32x4_t v62 = v59[1];
          v59 += 2;
          float32x4_t v63 = vaddq_f32(v58[1], v62);
          *unint64_t v58 = vaddq_f32(*v58, v61);
          v58[1] = v63;
          v58 += 2;
          --v60;
        }
        while (v60);
      }
      int v64 = 8 * v57;
      if (8 * v57 < v56)
      {
        uint64_t v65 = *((void *)v53 + i);
        uint64_t v66 = *(void *)(v54 + 8 * i);
        uint64_t v67 = v64;
        if ((unint64_t)(v56 - (uint64_t)v64) < 8) {
          goto LABEL_42;
        }
        unint64_t v68 = v66 + 4 * v64;
        unint64_t v69 = v65 + 4 * v64;
        if (v68 < v65 + 4 * v56 && v69 < v66 + 4 * v56) {
          goto LABEL_42;
        }
        uint64_t v71 = v64 + (v56 & 7) - v56;
        char v72 = (float32x4_t *)(v69 + 16);
        long long v73 = (float32x4_t *)(v68 + 16);
        do
        {
          float32x4_t v74 = vaddq_f32(*v73, *v72);
          v73[-1] = vaddq_f32(v73[-1], v72[-1]);
          float32x4_t *v73 = v74;
          v72 += 2;
          v73 += 2;
          v71 += 8;
        }
        while (v71);
        uint64_t v67 = v56 - (v56 & 7);
        if ((v56 & 7) != 0)
        {
LABEL_42:
          uint64_t v75 = v56 - v67;
          char v76 = (float *)(v66 + 4 * v67);
          float32x4_t v77 = (float *)(v65 + 4 * v67);
          do
          {
            float v78 = *v77++;
            float *v76 = *v76 + v78;
            ++v76;
            --v75;
          }
          while (v75);
        }
      }
      if (v53) {
        operator delete(v53);
      }
      if (v20) {
        operator delete(v20);
      }
    }
  }
}

void sub_19E1E4628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (v13) {
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E1E4684(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  long long v240 = 0;
  uint64_t v241 = 0;
  uint64_t v242 = 0;
  if ((*(_DWORD *)(a1 + 340) & 0x80000000) == 0)
  {
    uint64_t v13 = 0;
    uint64_t v14 = *(void *)(a1 + 304);
    do
    {
      *(_DWORD *)(v14 + 4 * v13) = 0;
      BOOL v84 = v13++ < *(int *)(a1 + 340);
    }
    while (v84);
  }
  uint64_t v15 = *(void *)(a1 + 224);
  if (v15) {
    a2 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 32))(v15);
  }
  uint64_t v16 = a4 & 0xFFFFFF;
  if (v16 > (a5 != 0))
  {
    uint64_t v17 = a5 != 0;
    uint64_t v227 = a2;
    uint64_t v228 = a3;
    uint64_t v229 = v16;
    do
    {
      uint64_t v18 = *(int *)(a1 + 332);
      uint64_t v19 = *(void *)(*(void *)(a1 + 80) + 8 * v18);
      (*(void (**)(uint64_t))(*(void *)v19 + 272))(v19);
      uint64_t v20 = *(void *)(*(void *)(a1 + 80) + 8 * v18);
      (*(void (**)(uint64_t))(*(void *)v20 + 264))(v20);
      uint64_t v21 = *(void *)(a1 + 304);
      if (!*(_DWORD *)(v21 + 4 * v18))
      {
        *(_DWORD *)(v21 + 4 * v18) = 1;
        uint64_t v22 = *(void *)(*(void *)(a1 + 80) + 8 * v18);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v22 + 256))(v22, v229);
      }
      float32x4_t v237 = 0;
      uint64_t v238 = 0;
      uint64_t v239 = 0;
      uint64_t v23 = *(void *)(*(void *)(a1 + 80) + 8 * v18);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void **))(*(void *)v23 + 224))(v23, a2, a3, v17, &v237);
      uint64_t v24 = *(void *)(*(void *)(a1 + 80) + 8 * v18);
      uint64_t v233 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v24 + 32))(v24);
      std::string __p = 0;
      uint64_t v235 = 0;
      uint64_t v236 = 0;
      int v25 = *(_DWORD *)(a1 + 328);
      if (v25 == 1)
      {
        int v42 = *(_DWORD *)(*(void *)(a1 + 400) + 4 * v17);
        float v43 = (int *)operator new(4uLL);
        int *v43 = v42;
        uint64_t v235 = v43 + 1;
        uint64_t v236 = (char *)(v43 + 1);
        std::string __p = v43;
        goto LABEL_212;
      }
      if (v25 == 2)
      {
        uint64_t v31 = *v233;
        uint64_t v32 = *(void *)(*(void *)(a1 + 80) + 8 * *(int *)(a1 + 332));
        int v33 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 272))(v32);
        if (v33 < 1)
        {
          int v38 = 1;
          int v40 = v235;
          uint64_t v39 = v236;
          if (v235 < (int *)v236) {
            goto LABEL_25;
          }
        }
        else
        {
          int v34 = 0;
          uint64_t v35 = 0;
          float v36 = 1.1755e-38;
          do
          {
            float v37 = *(float *)(*(void *)(v31 + 8 * v17) + 4 * v35);
            if (v37 > v36) {
              int v34 = v35;
            }
            float v36 = fmaxf(v37, v36);
            ++v35;
          }
          while (v33 != v35);
          int v38 = v34 + 1;
          int v40 = v235;
          uint64_t v39 = v236;
          if (v235 < (int *)v236)
          {
LABEL_25:
            int *v40 = v38;
            uint64_t v41 = (uint64_t)(v40 + 1);
LABEL_182:
            uint64_t v235 = (int *)v41;
            p_p = &__p;
            goto LABEL_213;
          }
        }
        float v45 = (int *)__p;
        int64_t v46 = (char *)v40 - (unsigned char *)__p;
        uint64_t v47 = ((char *)v40 - (unsigned char *)__p) >> 2;
        unint64_t v48 = v47 + 1;
        if ((unint64_t)(v47 + 1) >> 62) {
          sub_19E13D694();
        }
        uint64_t v49 = v39 - (unsigned char *)__p;
        if (v49 >> 1 > v48) {
          unint64_t v48 = v49 >> 1;
        }
        if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v50 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v50 = v48;
        }
        if (v50)
        {
          if (v50 >> 62) {
            sub_19E13C418();
          }
          int v51 = operator new(4 * v50);
          uint64_t v52 = (int *)&v51[4 * v47];
          *uint64_t v52 = v38;
          uint64_t v41 = (uint64_t)(v52 + 1);
          if (v40 == v45) {
            goto LABEL_180;
          }
LABEL_174:
          unint64_t v161 = (char *)(v40 - 1) - (char *)v45;
          if (v161 < 0x2C) {
            goto LABEL_259;
          }
          if ((unint64_t)((char *)v40 - &v51[v46]) < 0x20) {
            goto LABEL_259;
          }
          uint64_t v162 = (v161 >> 2) + 1;
          uint64_t v163 = 4 * (v162 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v164 = &v40[v163 / 0xFFFFFFFFFFFFFFFCLL];
          uint64_t v52 = (int *)((char *)v52 - v163);
          int v165 = &v51[4 * v47 - 16];
          float32x2_t v166 = v40 - 4;
          uint64_t v167 = v162 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v168 = *(_OWORD *)v166;
            *(v165 - 1) = *((_OWORD *)v166 - 1);
            *int v165 = v168;
            v165 -= 2;
            v166 -= 8;
            v167 -= 8;
          }
          while (v167);
          int v40 = v164;
          if (v162 != (v162 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_259:
            do
            {
              int v169 = *--v40;
              *--uint64_t v52 = v169;
            }
            while (v40 != v45);
          }
        }
        else
        {
          int v51 = 0;
          uint64_t v52 = (int *)(4 * v47);
          *(_DWORD *)(4 * v47) = v38;
          uint64_t v41 = 4 * v47 + 4;
          if (v40 != v45) {
            goto LABEL_174;
          }
        }
LABEL_180:
        std::string __p = v52;
        uint64_t v235 = (int *)v41;
        uint64_t v236 = &v51[4 * v50];
        if (v45) {
          operator delete(v45);
        }
        goto LABEL_182;
      }
      if (v25 != 4)
      {
        p_p = &__p;
        sub_19E1E5CE4(*v233 + 8 * v17, (float32x4_t **)(*v233 + 8 * v17), *(_DWORD *)(a1 + 340), (unint64_t *)&__p, *(_DWORD *)(*(void *)(a1 + 496) + 8), 1u);
        goto LABEL_213;
      }
      unint64_t v26 = v240;
      uint64_t v241 = v240;
      uint64_t v27 = *(void *)(a1 + 536);
      uint64_t v28 = *(void *)(a1 + 544) - v27;
      if (!v28) {
        goto LABEL_44;
      }
      unint64_t v29 = v28 / 24;
      if (v29 <= 1) {
        unint64_t v29 = 1;
      }
      if (v29 >= 2)
      {
        unint64_t v30 = v29 & 0xFFFFFFFFFFFFFFFELL;
        uint64_t v53 = (void *)(v27 + 32);
        unint64_t v54 = v29 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          uint64_t v55 = *(v53 - 1);
          *(v53 - 3) = *(v53 - 4);
          *uint64_t v53 = v55;
          v53 += 6;
          v54 -= 2;
        }
        while (v54);
        if (v29 == v30) {
          goto LABEL_44;
        }
      }
      else
      {
        unint64_t v30 = 0;
      }
      int v56 = (void *)(v27 + 24 * v30 + 8);
      unint64_t v57 = v29 - v30;
      do
      {
        *int v56 = *(v56 - 1);
        v56 += 3;
        --v57;
      }
      while (v57);
LABEL_44:
      uint64_t v59 = *(_DWORD **)a7;
      uint64_t v58 = *(void *)(a7 + 8);
      p_p = (void **)(a1 + 352);
      unint64_t v60 = v58 - *(void *)a7;
      if (v58 == *(void *)a7) {
        goto LABEL_213;
      }
      if (v60 < 5)
      {
        uint64_t v241 = v26;
        if (v60 != 4) {
          goto LABEL_212;
        }
        float32x4_t v133 = operator new(4uLL);
        _DWORD *v133 = *v59;
        float32x4_t v62 = (char *)(v133 + 1);
        int v134 = v133;
        if (*v133 != -1) {
          goto LABEL_145;
        }
LABEL_184:
        uint64_t v170 = *(void *)(a1 + 544);
        uint64_t v171 = *(void *)(a1 + 536);
        if (v170 == v171)
        {
LABEL_211:
          operator delete(v134);
          goto LABEL_212;
        }
        unint64_t v172 = 0;
        uint64_t v232 = v134;
        while (2)
        {
          uint64_t v174 = *(void *)(v171 + 24 * v172);
          uint64_t v175 = *(void *)(v171 + 24 * v172++ + 8);
          if (v175 == v174) {
            goto LABEL_188;
          }
          unint64_t v176 = (char *)v235;
          if (v235 < (int *)v236)
          {
            int *v235 = v172;
            uint64_t v173 = (uint64_t)(v176 + 4);
            goto LABEL_187;
          }
          unint64_t v177 = (char *)__p;
          int64_t v178 = (char *)v235 - (unsigned char *)__p;
          uint64_t v179 = ((char *)v235 - (unsigned char *)__p) >> 2;
          unint64_t v180 = v179 + 1;
          if ((unint64_t)(v179 + 1) >> 62) {
            sub_19E13D694();
          }
          uint64_t v181 = v236 - (unsigned char *)__p;
          if ((v236 - (unsigned char *)__p) >> 1 > v180) {
            unint64_t v180 = v181 >> 1;
          }
          if ((unint64_t)v181 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v182 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v182 = v180;
          }
          if (v182)
          {
            int64_t v226 = (char *)v235 - (unsigned char *)__p;
            if (v182 >> 62) {
              sub_19E13C418();
            }
            uint64_t v183 = ((char *)v235 - (unsigned char *)__p) >> 2;
            uint64_t v184 = v171;
            unint64_t v185 = v182;
            float v186 = (char *)operator new(4 * v182);
            uint64_t v171 = v184;
            unint64_t v182 = v185;
            uint64_t v179 = v183;
            int64_t v178 = v226;
            int v187 = &v186[4 * v183];
            *(_DWORD *)int v187 = v172;
            uint64_t v173 = (uint64_t)(v187 + 4);
            if (v176 != v177)
            {
LABEL_200:
              unint64_t v188 = v176 - 4 - v177;
              if (v188 < 0x2C)
              {
                int v134 = v232;
                goto LABEL_208;
              }
              int v134 = v232;
              if ((unint64_t)(v176 - &v186[v178]) < 0x20) {
                goto LABEL_260;
              }
              uint64_t v189 = (v188 >> 2) + 1;
              uint64_t v190 = 4 * (v189 & 0x7FFFFFFFFFFFFFF8);
              int v191 = &v176[-v190];
              v187 -= v190;
              int v192 = &v186[4 * v179 - 16];
              int v193 = v176 - 16;
              uint64_t v194 = v189 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v195 = *(_OWORD *)v193;
                *((_OWORD *)v192 - 1) = *((_OWORD *)v193 - 1);
                *(_OWORD *)int v192 = v195;
                v192 -= 32;
                v193 -= 32;
                v194 -= 8;
              }
              while (v194);
              unint64_t v176 = v191;
              if (v189 != (v189 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_260:
                do
                {
LABEL_208:
                  int v196 = *((_DWORD *)v176 - 1);
                  v176 -= 4;
                  *((_DWORD *)v187 - 1) = v196;
                  v187 -= 4;
                }
                while (v176 != v177);
              }
LABEL_209:
              std::string __p = v187;
              uint64_t v235 = (int *)v173;
              uint64_t v236 = &v186[4 * v182];
              if (v177)
              {
                operator delete(v177);
                uint64_t v170 = *(void *)(a1 + 544);
                uint64_t v171 = *(void *)(a1 + 536);
              }
LABEL_187:
              uint64_t v235 = (int *)v173;
LABEL_188:
              if (0xAAAAAAAAAAAAAAABLL * ((v170 - v171) >> 3) <= v172) {
                goto LABEL_171;
              }
              continue;
            }
          }
          else
          {
            float v186 = 0;
            int v187 = (char *)(4 * v179);
            *(_DWORD *)(4 * v179) = v172;
            uint64_t v173 = 4 * v179 + 4;
            if (v176 != v177) {
              goto LABEL_200;
            }
          }
          break;
        }
        int v134 = v232;
        goto LABEL_209;
      }
      float32x4_t v61 = operator new(4uLL);
      unint64_t v230 = v61;
      *float32x4_t v61 = *v59;
      float32x4_t v62 = (char *)(v61 + 1);
      if (v59[1] != -1) {
        sub_19E2F6320(900);
      }
      if (v60 < 9)
      {
        int v134 = v61;
        if (*v61 == -1) {
          goto LABEL_184;
        }
        goto LABEL_145;
      }
      unint64_t v63 = 2;
      int v225 = (char *)(v61 + 1);
      do
      {
        uint64_t v65 = (int)v59[v63];
        uint64_t v66 = *(void *)(a1 + 496);
        uint64_t v67 = *(void *)(v66 + 104);
        if (*v59 != -1)
        {
          if (v67)
          {
            int v68 = *(_DWORD *)(v67 + 8 * v65 + 4);
            uint64_t v70 = v241;
            unint64_t v69 = v242;
            if (v241 >= (int *)v242) {
              goto LABEL_74;
            }
LABEL_49:
            int *v70 = v68;
            uint64_t v64 = (uint64_t)(v70 + 1);
LABEL_50:
            uint64_t v241 = (int *)v64;
            goto LABEL_51;
          }
          uint64_t v81 = *(void *)(v66 + 88);
          uint64_t v79 = v66 + 88;
          uint64_t v80 = v81;
          if (!v81) {
            goto LABEL_73;
          }
          uint64_t v82 = v79;
          do
          {
            int v83 = *(_DWORD *)(v80 + 28);
            BOOL v84 = v83 < (int)v65;
            if (v83 >= (int)v65) {
              uint64_t v85 = (uint64_t *)v80;
            }
            else {
              uint64_t v85 = (uint64_t *)(v80 + 8);
            }
            if (!v84) {
              uint64_t v82 = v80;
            }
            uint64_t v80 = *v85;
          }
          while (*v85);
          if (v82 == v79 || *(_DWORD *)(v82 + 28) > (int)v65)
          {
LABEL_73:
            int v68 = -1;
            uint64_t v70 = v241;
            unint64_t v69 = v242;
            if (v241 >= (int *)v242) {
              goto LABEL_74;
            }
            goto LABEL_49;
          }
          int v68 = *(_DWORD *)(v82 + 32);
          uint64_t v70 = v241;
          unint64_t v69 = v242;
          if (v241 < (int *)v242) {
            goto LABEL_49;
          }
LABEL_74:
          uint64_t v86 = v240;
          uint64_t v87 = v70 - v240;
          unint64_t v88 = v87 + 1;
          if ((unint64_t)(v87 + 1) >> 62) {
            sub_19E13D694();
          }
          uint64_t v89 = v69 - (char *)v240;
          if (v89 >> 1 > v88) {
            unint64_t v88 = v89 >> 1;
          }
          if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v90 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v90 = v88;
          }
          if (v90)
          {
            if (v90 >> 62) {
              sub_19E13C418();
            }
            unint64_t v91 = v90;
            unint64_t v92 = operator new(4 * v90);
            unint64_t v90 = v91;
            unint64_t v93 = (int *)&v92[4 * v87];
            *unint64_t v93 = v68;
            uint64_t v64 = (uint64_t)(v93 + 1);
            if (v70 != v86)
            {
LABEL_83:
              unint64_t v94 = (char *)(v70 - 1) - (char *)v86;
              if (v94 < 0x2C)
              {
                float32x4_t v62 = v225;
                goto LABEL_93;
              }
              float32x4_t v62 = v225;
              if ((unint64_t)((char *)v86 - v92) < 0x20) {
                goto LABEL_261;
              }
              uint64_t v95 = (v94 >> 2) + 1;
              uint64_t v96 = 4 * (v95 & 0x7FFFFFFFFFFFFFF8);
              uint64_t v97 = &v70[v96 / 0xFFFFFFFFFFFFFFFCLL];
              unint64_t v93 = (int *)((char *)v93 - v96);
              uint64_t v98 = &v92[4 * v87 - 16];
              float32x4_t v99 = v70 - 4;
              uint64_t v100 = v95 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v101 = *(_OWORD *)v99;
                *(v98 - 1) = *((_OWORD *)v99 - 1);
                *uint64_t v98 = v101;
                v98 -= 2;
                v99 -= 8;
                v100 -= 8;
              }
              while (v100);
              uint64_t v70 = v97;
              if (v95 != (v95 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_261:
                do
                {
LABEL_93:
                  int v102 = *--v70;
                  *--unint64_t v93 = v102;
                }
                while (v70 != v86);
              }
LABEL_94:
              long long v240 = v93;
              uint64_t v241 = (int *)v64;
              uint64_t v242 = &v92[4 * v90];
              if (v86) {
                operator delete(v86);
              }
              goto LABEL_50;
            }
          }
          else
          {
            unint64_t v92 = 0;
            unint64_t v93 = (int *)(4 * v87);
            *(_DWORD *)(4 * v87) = v68;
            uint64_t v64 = 4 * v87 + 4;
            if (v70 != v86) {
              goto LABEL_83;
            }
          }
          float32x4_t v62 = v225;
          goto LABEL_94;
        }
        if (v67)
        {
          if ((int)v65 >= *(_DWORD *)(v66 + 112)) {
            goto LABEL_86;
          }
        }
        else if ((int)v65 >= *(_DWORD *)(v66 + 96))
        {
LABEL_86:
          fprintf((FILE *)*MEMORY[0x1E4F143D8], "WARNING: Invalid (too large) Montreal id (%d) - IGNORE\n", v59[v63]);
          goto LABEL_51;
        }
        uint64_t v71 = *(void *)(v66 + 64);
        if (v71)
        {
          int v72 = *(_DWORD *)(v71 + 8 * v65 + 4);
          if (v67) {
            goto LABEL_60;
          }
        }
        else
        {
          uint64_t v103 = *(void *)(v66 + 48);
          if (!v103) {
            goto LABEL_106;
          }
          uint64_t v104 = v66 + 48;
          do
          {
            int v105 = *(_DWORD *)(v103 + 28);
            BOOL v106 = v105 < (int)v65;
            if (v105 >= (int)v65) {
              float v107 = (uint64_t *)v103;
            }
            else {
              float v107 = (uint64_t *)(v103 + 8);
            }
            if (!v106) {
              uint64_t v104 = v103;
            }
            uint64_t v103 = *v107;
          }
          while (*v107);
          if (v104 != v66 + 48 && *(_DWORD *)(v104 + 28) <= (int)v65)
          {
            int v72 = *(_DWORD *)(v104 + 32);
            if (v67)
            {
LABEL_60:
              long long v73 = (int *)(v67 + 8 * v65 + 4);
              goto LABEL_61;
            }
          }
          else
          {
LABEL_106:
            int v72 = -1;
            if (v67) {
              goto LABEL_60;
            }
          }
        }
        uint64_t v110 = *(void *)(v66 + 88);
        uint64_t v108 = v66 + 88;
        uint64_t v109 = v110;
        if (v110)
        {
          uint64_t v111 = v108;
          do
          {
            int v112 = *(_DWORD *)(v109 + 28);
            BOOL v113 = v112 < (int)v65;
            if (v112 >= (int)v65) {
              uint64_t v114 = (uint64_t *)v109;
            }
            else {
              uint64_t v114 = (uint64_t *)(v109 + 8);
            }
            if (!v113) {
              uint64_t v111 = v109;
            }
            uint64_t v109 = *v114;
          }
          while (*v114);
          if (v111 != v108 && *(_DWORD *)(v111 + 28) <= (int)v65)
          {
            long long v73 = (int *)(v111 + 32);
LABEL_61:
            int v74 = *v73;
            uint64_t v75 = *(void *)(a1 + 536) + 24 * v72;
            float32x4_t v77 = *(char **)(v75 + 8);
            unint64_t v76 = *(void *)(v75 + 16);
            if ((unint64_t)v77 >= v76) {
              goto LABEL_118;
            }
            goto LABEL_62;
          }
        }
        int v74 = -1;
        uint64_t v75 = *(void *)(a1 + 536) + 24 * v72;
        float32x4_t v77 = *(char **)(v75 + 8);
        unint64_t v76 = *(void *)(v75 + 16);
        if ((unint64_t)v77 >= v76)
        {
LABEL_118:
          float32x4_t v115 = *(char **)v75;
          uint64_t v116 = (uint64_t)&v77[-*(void *)v75];
          uint64_t v117 = v116 >> 2;
          unint64_t v118 = (v116 >> 2) + 1;
          if (v118 >> 62) {
            sub_19E13D694();
          }
          uint64_t v119 = v76 - (void)v115;
          if (v119 >> 1 > v118) {
            unint64_t v118 = v119 >> 1;
          }
          if ((unint64_t)v119 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v120 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v120 = v118;
          }
          if (v120)
          {
            uint64_t v223 = &v77[-*(void *)v75];
            if (v120 >> 62) {
              sub_19E13C418();
            }
            unint64_t v121 = v120;
            uint64_t v122 = operator new(4 * v120);
            unint64_t v120 = v121;
            uint64_t v116 = (uint64_t)v223;
            uint64_t v123 = (int *)&v122[4 * v117];
            int *v123 = v74;
            uint64_t v78 = (uint64_t)(v123 + 1);
            if (v77 == v115) {
              goto LABEL_137;
            }
LABEL_131:
            unint64_t v124 = v77 - 4 - v115;
            if (v124 < 0x2C) {
              goto LABEL_262;
            }
            if ((unint64_t)(v77 - &v122[v116]) < 0x20) {
              goto LABEL_262;
            }
            uint64_t v125 = (v124 >> 2) + 1;
            uint64_t v126 = 4 * (v125 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v127 = &v77[-v126];
            uint64_t v123 = (int *)((char *)v123 - v126);
            int v128 = &v122[4 * v117 - 16];
            float v129 = v77 - 16;
            uint64_t v130 = v125 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v131 = *(_OWORD *)v129;
              *(v128 - 1) = *((_OWORD *)v129 - 1);
              *int v128 = v131;
              v128 -= 2;
              v129 -= 32;
              v130 -= 8;
            }
            while (v130);
            float32x4_t v77 = v127;
            if (v125 != (v125 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_262:
              do
              {
                int v132 = *((_DWORD *)v77 - 1);
                v77 -= 4;
                *--uint64_t v123 = v132;
              }
              while (v77 != v115);
            }
          }
          else
          {
            uint64_t v122 = 0;
            uint64_t v123 = (int *)(4 * v117);
            *(_DWORD *)(4 * v117) = v74;
            uint64_t v78 = 4 * v117 + 4;
            if (v77 != v115) {
              goto LABEL_131;
            }
          }
LABEL_137:
          *(void *)uint64_t v75 = v123;
          *(void *)(v75 + 8) = v78;
          *(void *)(v75 + 16) = &v122[4 * v120];
          if (v115) {
            operator delete(v115);
          }
          goto LABEL_139;
        }
LABEL_62:
        *(_DWORD *)float32x4_t v77 = v74;
        uint64_t v78 = (uint64_t)(v77 + 4);
LABEL_139:
        *(void *)(v75 + 8) = v78;
        float32x4_t v62 = v225;
LABEL_51:
        ++v63;
        uint64_t v59 = *(_DWORD **)a7;
      }
      while (v63 < (uint64_t)(*(void *)(a7 + 8) - *(void *)a7) >> 2);
      int v134 = v230;
      if (*v230 == -1) {
        goto LABEL_184;
      }
LABEL_145:
      uint64_t v135 = 0;
      uint64_t v224 = v17;
      while (1)
      {
LABEL_147:
        uint64_t v136 = v134[v135];
        if ((v136 & 0x80000000) != 0
          || (int v137 = v136 + 1,
              (uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 3 <= (unint64_t)(v136 + 1)))
        {
          sub_19E2F6320(45);
        }
        uint64_t v138 = v235;
        if (v235 >= (int *)v236) {
          break;
        }
        int *v235 = v137;
        uint64_t v235 = v138 + 1;
        if (++v135 >= (unint64_t)((v62 - (char *)v134) >> 2)) {
          goto LABEL_171;
        }
      }
      uint64_t v139 = a7;
      uint64_t v140 = v62;
      size_t v231 = v134;
      unint64_t v141 = (int *)__p;
      int64_t v142 = (char *)v235 - (unsigned char *)__p;
      uint64_t v143 = ((char *)v235 - (unsigned char *)__p) >> 2;
      unint64_t v144 = v143 + 1;
      if ((unint64_t)(v143 + 1) >> 62) {
        sub_19E13D694();
      }
      uint64_t v145 = v236 - (unsigned char *)__p;
      if ((v236 - (unsigned char *)__p) >> 1 > v144) {
        unint64_t v144 = v145 >> 1;
      }
      if ((unint64_t)v145 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v146 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v146 = v144;
      }
      if (!v146)
      {
        uint64_t v148 = 0;
        uint64_t v149 = (char *)(4 * v143);
        *(_DWORD *)(4 * v143) = v137;
        uint64_t v150 = 4 * v143 + 4;
        if (v138 != v141) {
          goto LABEL_159;
        }
LABEL_162:
        float32x4_t v62 = v140;
        a7 = v139;
        uint64_t v17 = v224;
        goto LABEL_168;
      }
      if (v146 >> 62) {
        sub_19E13C418();
      }
      unint64_t v147 = v146;
      uint64_t v148 = (char *)operator new(4 * v146);
      unint64_t v146 = v147;
      uint64_t v149 = &v148[4 * v143];
      *(_DWORD *)uint64_t v149 = v137;
      uint64_t v150 = (uint64_t)(v149 + 4);
      if (v138 == v141) {
        goto LABEL_162;
      }
LABEL_159:
      unint64_t v151 = (char *)(v138 - 1) - (char *)v141;
      if (v151 < 0x2C)
      {
        float32x4_t v62 = v140;
        a7 = v139;
        uint64_t v17 = v224;
        goto LABEL_167;
      }
      unint64_t v152 = (char *)v138 - &v148[v142];
      float32x4_t v62 = v140;
      a7 = v139;
      uint64_t v17 = v224;
      if (v152 < 0x20) {
        goto LABEL_263;
      }
      uint64_t v153 = (v151 >> 2) + 1;
      uint64_t v154 = 4 * (v153 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v155 = &v138[v154 / 0xFFFFFFFFFFFFFFFCLL];
      v149 -= v154;
      uint64_t v156 = &v148[4 * v143 - 16];
      BOOL v157 = (long long *)(v138 - 4);
      uint64_t v158 = v153 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v159 = *v157;
        *((_OWORD *)v156 - 1) = *(v157 - 1);
        *(_OWORD *)uint64_t v156 = v159;
        v156 -= 32;
        v157 -= 2;
        v158 -= 8;
      }
      while (v158);
      uint64_t v138 = v155;
      if (v153 != (v153 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_263:
        do
        {
LABEL_167:
          int v160 = *--v138;
          *((_DWORD *)v149 - 1) = v160;
          v149 -= 4;
        }
        while (v138 != v141);
      }
LABEL_168:
      std::string __p = v149;
      uint64_t v235 = (int *)v150;
      uint64_t v236 = &v148[4 * v146];
      if (v141) {
        operator delete(v141);
      }
      int v134 = v231;
      uint64_t v235 = (int *)v150;
      if (++v135 < (unint64_t)((v62 - (char *)v231) >> 2)) {
        goto LABEL_147;
      }
LABEL_171:
      if (v134) {
        goto LABEL_211;
      }
LABEL_212:
      p_p = &__p;
LABEL_213:
      bzero(*(void **)(*(void *)(a1 + 104) + 8 * v17), 4 * *(int *)(a1 + 348));
      uint64_t v197 = (int *)*p_p;
      a2 = v227;
      a3 = v228;
      if (p_p[1] != *p_p)
      {
        unint64_t v198 = 0;
        while (1)
        {
          uint64_t v199 = v197[v198];
          uint64_t v200 = *(void *)(a1 + 304);
          if (!*(_DWORD *)(v200 + 4 * v199))
          {
            *(_DWORD *)(v200 + 4 * v199) = 1;
            uint64_t v201 = *(void *)(*(void *)(a1 + 80) + 8 * v199);
            (*(void (**)(uint64_t, uint64_t))(*(void *)v201 + 256))(v201, v229);
          }
          BOOL v202 = *(void *)(a7 + 8) != *(void *)a7 && **(_DWORD **)a7 == -1
               ? (void **)(*(void *)(a1 + 536) + 24 * (int)v199 - 24)
               : (void **)&v240;
          uint64_t v203 = *(void *)(*(void *)(a1 + 80) + 8 * v199);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void **))(*(void *)v203 + 224))(v203, v227, v228, v17, v202);
          uint64_t v204 = *(void *)(*(void *)(a1 + 80) + 8 * v199);
          int v205 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v204 + 32))(v204);
          uint64_t v206 = *(void *)(a1 + 256);
          if ((*(_DWORD *)(a1 + 328) - 3) >= 2) {
            break;
          }
          unint64_t v207 = *(unsigned int *)(v206 + 4 * v199);
          if ((int)v207 >= 1)
          {
            float v208 = *(float *)(*(void *)(*v233 + 8 * v17) + 4 * v199 - 4);
            float32x4_t v209 = *(float32x4_t **)(*v205 + 8 * v17);
            if (v207 < 8)
            {
              unint64_t v210 = 0;
              goto LABEL_230;
            }
            unint64_t v210 = v207 & 0x7FFFFFF8;
            size_t v211 = v209 + 1;
            uint64_t v212 = v207 & 0xFFFFFFF8;
            do
            {
              float32x4_t v213 = vmulq_n_f32(*v211, v208);
              v211[-1] = vmulq_n_f32(v211[-1], v208);
              float32x4_t *v211 = v213;
              v211 += 2;
              v212 -= 8;
            }
            while (v212);
            if (v210 != v207)
            {
LABEL_230:
              unint64_t v214 = v207 - v210;
              uint64_t v215 = &v209->f32[v210];
              do
              {
                float *v215 = *v215 * v208;
                ++v215;
                --v214;
              }
              while (v214);
            }
LABEL_232:
            if ((int)v207 >= 1)
            {
              uint64_t v216 = *(int **)(*(void *)(*(void *)(a1 + 496) + 120) + 24 * (int)v199 - 24);
              uint64_t v217 = *(_DWORD **)(*v205 + 8 * v17);
              uint64_t v218 = *(void *)(*(void *)(a1 + 104) + 8 * v17);
              do
              {
                uint64_t v220 = *v216++;
                uint64_t v219 = v220;
                LODWORD(v220) = *v217++;
                *(_DWORD *)(v218 + 4 * v219) = v220;
                --v207;
              }
              while (v207);
            }
          }
          ++v198;
          uint64_t v197 = (int *)*p_p;
          if (v198 >= ((unsigned char *)p_p[1] - (unsigned char *)*p_p) >> 2) {
            goto LABEL_236;
          }
        }
        unint64_t v207 = *(unsigned int *)(v206 + 4 * v199);
        goto LABEL_232;
      }
LABEL_236:
      uint64_t v221 = *(void *)(a1 + 104);
      vDSP_Length v222 = *(int *)(a1 + 348);
      __C[0] = 0.0;
      vDSP_sve(*(const float **)(v221 + 8 * v17), 1, __C, v222);
      if (__p)
      {
        uint64_t v235 = (int *)__p;
        operator delete(__p);
      }
      if (v237)
      {
        uint64_t v238 = v237;
        operator delete(v237);
      }
      ++v17;
    }
    while (v17 != v229);
  }
  if (v240)
  {
    uint64_t v241 = v240;
    operator delete(v240);
  }
}

void sub_19E1E5718(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  unint64_t v26 = *(void **)(v24 - 120);
  if (!v26) {
    _Unwind_Resume(exception_object);
  }
  *(void *)(v24 - 112) = v26;
  operator delete(v26);
  _Unwind_Resume(exception_object);
}

void *sub_19E1E5810(uint64_t a1, void *lpsrc, uint64_t a3, float a4, float a5)
{
  uint64_t result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3D00, 0);
  if (!result) {
    __cxa_bad_cast();
  }
  int v10 = *(_DWORD *)(a1 + 340);
  if ((v10 & 0x80000000) == 0)
  {
    uint64_t v11 = (uint64_t)result;
    uint64_t v12 = 0;
    do
    {
      if (*(int *)(*(void *)(v11 + 304) + 4 * v12) >= 1)
      {
        uint64_t v14 = *(void *)(*(void *)(a1 + 80) + 8 * v12);
        uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void, uint64_t, float, float))(*(void *)v14 + 336))(v14, *(void *)(*(void *)(v11 + 80) + 8 * v12), a3, a4, a5);
        int v10 = *(_DWORD *)(a1 + 340);
      }
    }
    while (v12++ < v10);
  }
  return result;
}

uint64_t sub_19E1E5920(uint64_t result, uint64_t a2, uint64_t a3, int a4, _DWORD *a5, uint64_t a6)
{
  if (a4 >= 1)
  {
    uint64_t v19 = v6;
    uint64_t v20 = v7;
    uint64_t v10 = result;
    uint64_t v11 = 0;
    uint64_t v12 = a4;
    do
    {
      int v18 = 0;
      uint64_t v13 = *(int *)(v10 + 332);
      uint64_t v14 = *(void *)(*(void *)(v10 + 80) + 8 * v13);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, int *, uint64_t))(*(void *)v14 + 240))(v14, *(void *)(v10 + 200) + 24 * v13, *(void *)(v10 + 472) + 24 * v13, v11, &v18, a6);
      int v17 = 0;
      uint64_t v15 = *(int *)(*(void *)(v10 + 400) + 4 * v11);
      uint64_t v16 = *(void *)(*(void *)(v10 + 80) + 8 * v15);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, int *, uint64_t))(*(void *)v16 + 240))(v16, *(void *)(v10 + 200) + 24 * (int)v15, *(void *)(v10 + 472) + 24 * *(int *)(v10 + 336), v11, &v17, a6);
      if (v18 == 1 || v17 == 1) {
        ++*a5;
      }
      ++v11;
    }
    while (v12 != v11);
  }
  return result;
}

float sub_19E1E5A60(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v13 = 0;
  if (a3 < 1) {
    return 0.0;
  }
  uint64_t v4 = 0;
  uint64_t v5 = a3;
  float v6 = 0.0;
  do
  {
    uint64_t v7 = *(int *)(a1 + 332);
    uint64_t v8 = *(void *)(*(void *)(a1 + 80) + 8 * v7);
    (*(void (**)(uint64_t, uint64_t, char *, uint64_t))(*(void *)v8 + 232))(v8, *(void *)(a1 + 200) + 24 * (int)v7, (char *)&v13 + 4, v4);
    uint64_t v9 = *(int *)(*(void *)(a1 + 400) + 4 * v4);
    uint64_t v10 = *(void *)(*(void *)(a1 + 80) + 8 * v9);
    (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(*(void *)v10 + 232))(v10, *(void *)(a1 + 200) + 24 * (int)v9, &v13, v4);
    float v11 = *((float *)&v13 + 1);
    if ((*(_DWORD *)(a1 + 328) - 3) < 2) {
      float v11 = -0.0;
    }
    float v6 = (float)(*(float *)&v13 + v6) + v11;
    ++v4;
  }
  while (v5 != v4);
  return v6;
}

void sub_19E1E5B74(void *a1)
{
  uint64_t v1 = sub_19E1E5F98(a1);

  operator delete(v1);
}

void *sub_19E1E5B9C(void *result, char *__src, char *a3, size_t __sz)
{
  float v6 = __src;
  uint64_t v7 = result;
  uint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 3)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 61) {
      goto LABEL_22;
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8;
    unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11) {
      unint64_t v12 = v10;
    }
    if (v12 >> 61) {
LABEL_22:
    }
      sub_19E13D694();
    uint64_t v13 = v12;
    uint64_t result = operator new(8 * v12);
    uint64_t v9 = (char *)result;
    void *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    size_t v14 = a3 - v6;
    if (v14) {
      uint64_t result = memcpy(result, v6, v14);
    }
    uint64_t v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  uint64_t v15 = (void **)(result + 1);
  uint64_t v16 = (unsigned char *)result[1];
  unint64_t v17 = (v16 - v9) >> 3;
  if (v17 >= __sz)
  {
    size_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_21;
    }
    uint64_t v19 = (void *)*result;
LABEL_20:
    uint64_t result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  int v18 = &__src[8 * v17];
  if (v16 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v16 - v9);
    uint64_t v9 = (char *)*v15;
  }
  size_t v14 = a3 - v18;
  if (v14)
  {
    uint64_t v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *uint64_t v15 = &v9[v14];
  return result;
}

void sub_19E1E5CE4(uint64_t a1, float32x4_t **a2, unsigned int a3, unint64_t *a4, int a5, unsigned int a6)
{
  std::string __p = 0;
  if (!a3)
  {
    unint64_t v12 = 0;
    uint64_t v13 = 0;
    int v25 = (float *)(8 * a5);
    if (!v25) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if ((a3 & 0x80000000) != 0) {
    sub_19E13D694();
  }
  size_t v11 = 2 * (int)a3;
  unint64_t v12 = (float *)operator new(v11 * 4);
  std::string __p = v12;
  bzero(v12, 8 * (int)a3);
  uint64_t v13 = &v12[v11];
  size_t v14 = *a2;
  if (a3 < 8 || (v12 + 1 < &v14->f32[a3] ? (BOOL v15 = v14 >= (float32x4_t *)&v12[2 * a3]) : (BOOL v15 = 1), !v15))
  {
    uint64_t v17 = 0;
LABEL_14:
    uint64_t v24 = (char *)&v12[2 * v17 + 1];
    do
    {
      *((_DWORD *)v24 - 1) = v17;
      *(_DWORD *)uint64_t v24 = v14->i32[v17];
      v24 += 8;
      ++v17;
    }
    while (a3 != v17);
    goto LABEL_16;
  }
  unint64_t v16 = 0;
  uint64_t v17 = a3 & 0xFFFFFFF8;
  int v18 = v14 + 1;
  int32x4_t v19 = (int32x4_t)xmmword_19E351190;
  v20.i64[0] = 0x400000004;
  v20.i64[1] = 0x400000004;
  v21.i64[0] = 0x800000008;
  v21.i64[1] = 0x800000008;
  do
  {
    v45.val[0] = (float32x4_t)vaddq_s32(v19, v20);
    float32x4_t v22 = v18[-1];
    v45.val[1] = *v18;
    uint64_t v23 = &v12[v16 / 4];
    vst2q_f32(v23, *(float32x4x2_t *)v19.i8);
    v23 += 8;
    vst2q_f32(v23, v45);
    int32x4_t v19 = vaddq_s32(v19, v21);
    v16 += 64;
    v18 += 2;
  }
  while (((8 * a3) & 0x7FFFFFFC0) != v16);
  if (v17 != a3) {
    goto LABEL_14;
  }
LABEL_16:
  int v25 = &v12[2 * a5];
  if (v25 != v13) {
LABEL_19:
  }
    sub_19E235A3C(v12, v25, v13);
LABEL_20:
  unint64_t v26 = 126 - 2 * __clz(a5);
  if (a5) {
    uint64_t v27 = v26;
  }
  else {
    uint64_t v27 = 0;
  }
  sub_19E235F0C(v12, (char *)v25, (uint64_t)&v44, v27, 1);
  unint64_t v28 = (uint64_t)(a4[1] - *a4) >> 2;
  if (a5 <= v28)
  {
    if (a5 < v28) {
      a4[1] = *a4 + 4 * a5;
    }
  }
  else
  {
    sub_19E1C5E88((uint64_t)a4, a5 - v28);
  }
  if (a5 >= 1)
  {
    unint64_t v29 = *a4;
    if (a5 > 0xC
      && (v29 >= (unint64_t)&__p[2 * a5 - 1] || (unint64_t)__p >= v29 + 4 * a5))
    {
      uint64_t v31 = a5 & 7;
      if ((a5 & 7) == 0) {
        uint64_t v31 = 8;
      }
      uint64_t v30 = a5 - v31;
      int32x4_t v32 = vdupq_n_s32(a6);
      int v33 = __p + 8;
      int v34 = (int32x4_t *)(v29 + 16);
      uint64_t v35 = v30;
      do
      {
        float v36 = v33 - 8;
        unsigned long long v37 = (unsigned __int128)vld2q_f32(v36);
        unsigned long long v38 = (unsigned __int128)vld2q_f32(v33);
        v34[-1] = vaddq_s32((int32x4_t)v37, v32);
        *int v34 = vaddq_s32((int32x4_t)v38, v32);
        v33 += 16;
        v34 += 2;
        v35 -= 8;
      }
      while (v35);
    }
    else
    {
      uint64_t v30 = 0;
    }
    uint64_t v39 = &__p[2 * v30];
    uint64_t v40 = a5 - v30;
    uint64_t v41 = (_DWORD *)(v29 + 4 * v30);
    do
    {
      int v42 = *(_DWORD *)v39;
      v39 += 2;
      *v41++ = v42 + a6;
      --v40;
    }
    while (v40);
    goto LABEL_40;
  }
  if (__p) {
LABEL_40:
  }
    operator delete(__p);
}

void sub_19E1E5F64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_19E1E5F98(void *a1)
{
  *a1 = &unk_1EF0A5B78;
  uint64_t v3 = a1[35];
  uint64_t v2 = a1[36];
  if (v2 == v3)
  {
    uint64_t v3 = a1[36];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void ***)(v3 + 8 * v4);
      if (*v5)
      {
        operator delete[](*v5);
        int *v5 = 0;
        uint64_t v3 = a1[35];
        uint64_t v2 = a1[36];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  a1[36] = v3;
  uint64_t v6 = a1[67];
  if (v6)
  {
    uint64_t v7 = a1[68];
    uint64_t v8 = (void *)a1[67];
    if (v7 != v6)
    {
      uint64_t v9 = a1[68];
      do
      {
        size_t v11 = *(void **)(v9 - 24);
        v9 -= 24;
        uint64_t v10 = v11;
        if (v11)
        {
          *(void *)(v7 - 16) = v10;
          operator delete(v10);
        }
        uint64_t v7 = v9;
      }
      while (v9 != v6);
      uint64_t v8 = (void *)a1[67];
    }
    a1[68] = v6;
    operator delete(v8);
  }
  unint64_t v12 = (void *)a1[63];
  if (v12)
  {
    a1[64] = v12;
    operator delete(v12);
  }
  uint64_t v13 = a1[59];
  if (v13)
  {
    uint64_t v14 = a1[60];
    BOOL v15 = (void *)a1[59];
    if (v14 != v13)
    {
      uint64_t v16 = a1[60];
      do
      {
        int v18 = *(void **)(v16 - 24);
        v16 -= 24;
        uint64_t v17 = v18;
        if (v18)
        {
          *(void *)(v14 - 16) = v17;
          operator delete(v17);
        }
        uint64_t v14 = v16;
      }
      while (v16 != v13);
      BOOL v15 = (void *)a1[59];
    }
    a1[60] = v13;
    operator delete(v15);
  }
  int32x4_t v19 = (void *)a1[56];
  if (v19)
  {
    a1[57] = v19;
    operator delete(v19);
  }
  int32x4_t v20 = (void *)a1[53];
  if (v20)
  {
    a1[54] = v20;
    operator delete(v20);
  }
  int32x4_t v21 = (void *)a1[50];
  if (v21)
  {
    a1[51] = v21;
    operator delete(v21);
  }
  float32x4_t v22 = (void *)a1[47];
  if (v22)
  {
    a1[48] = v22;
    operator delete(v22);
  }
  uint64_t v23 = (void *)a1[44];
  if (v23)
  {
    a1[45] = v23;
    operator delete(v23);
  }
  uint64_t v24 = (void *)a1[38];
  if (v24)
  {
    a1[39] = v24;
    operator delete(v24);
  }
  int v25 = (void *)a1[35];
  if (v25)
  {
    a1[36] = v25;
    operator delete(v25);
  }

  return sub_19E1CDA54(a1);
}

void sub_19E1E6150(uint64_t a1, int a2, int a3, _DWORD **a4, int a5, int a6, uint64_t a7, int a8, uint64_t a9, char a10)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF0A66D8;
  *(_DWORD *)(a1 + 44) = a2;
  *(_DWORD *)(a1 + 52) = a3;
  *(_DWORD *)(a1 + 56) = a6;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(unsigned char *)(a1 + 1072) = 0;
  *(unsigned char *)(a1 + 1192) = 0;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(unsigned char *)(a1 + 1312) = 0;
  *(_OWORD *)(a1 + 1296) = 0u;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1368) = 0u;
  *(_OWORD *)(a1 + 1384) = 0u;
  *(_OWORD *)(a1 + 1400) = 0u;
  *(_OWORD *)(a1 + 1416) = 0u;
  *(unsigned char *)(a1 + 1432) = 0;
  bzero((void *)(a1 + 64), 0x2A0uLL);
  *(_OWORD *)(a1 + 988) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1108) = 0u;
  *(_OWORD *)(a1 + 1228) = 0u;
  *(_OWORD *)(a1 + 1216) = 0u;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(_OWORD *)(a1 + 1348) = 0u;
  *(_OWORD *)(a1 + 1320) = 0u;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_OWORD *)(a1 + 1536) = 0u;
  *(_OWORD *)(a1 + 1520) = 0u;
  *(_OWORD *)(a1 + 1504) = 0u;
  *(_OWORD *)(a1 + 1488) = 0u;
  *(_OWORD *)(a1 + 1472) = 0u;
  *(_OWORD *)(a1 + 1456) = 0u;
  *(_OWORD *)(a1 + 1440) = 0u;
  *(_OWORD *)(a1 + 1640) = 0u;
  *(_OWORD *)(a1 + 1656) = 0u;
  *(_OWORD *)(a1 + 1672) = 0u;
  *(void *)(a1 + 1688) = 0;
  sub_19E3030A0(a1 + 1704);
  sub_19E3030A0(a1 + 1776);
  sub_19E3030A0(a1 + 1848);
  sub_19E3030A0(a1 + 1920);
  sub_19E3030A0(a1 + 1992);
  sub_19E3030A0(a1 + 2064);
  sub_19E3030A0(a1 + 2136);
  sub_19E3030A0(a1 + 2208);
  sub_19E3030A0(a1 + 2280);
  sub_19E3030A0(a1 + 2352);
  sub_19E3030A0(a1 + 2424);
  *(_DWORD *)(a1 + 2496) = a5;
  *(_OWORD *)(a1 + 2624) = 0u;
  *(_OWORD *)(a1 + 2640) = 0u;
  *(_OWORD *)(a1 + 2656) = 0u;
  (*(void (**)(uint64_t))(*(void *)a1 + 192))(a1);
  int v14 = *(unsigned __int8 *)(a7 + 45);
  *(unsigned char *)(a1 + 2692) = v14 ^ 1;
  *(unsigned char *)(a1 + 2672) = 0;
  *(unsigned char *)(a1 + 41) = 0;
  *(void *)(a1 + 2680) = a9;
  if (a9)
  {
    int v15 = *(unsigned __int8 *)(a9 + 376);
    *(_DWORD *)(a1 + 2688) = *(_DWORD *)(a9 + 28);
    nullsub_171("LSTM constructor");
    int v16 = v15 ^ 1;
    a8 = *(unsigned __int8 *)(*(void *)(a1 + 2680) + 376);
    *(unsigned char *)(a1 + 40) = a8;
    int v14 = *(unsigned __int8 *)(a7 + 45);
  }
  else
  {
    int v16 = 1;
    *(_DWORD *)(a1 + 2688) = 1;
    *(unsigned char *)(a1 + 40) = a8;
  }
  *(unsigned char *)(a1 + 1696) = v14;
  *(unsigned char *)(a1 + 1697) = *(unsigned char *)(a7 + 46);
  uint64_t v17 = *a4;
  *(_DWORD *)(a1 + 736) = **a4;
  *(_DWORD *)(a1 + 740) = v17[1];
  *(_DWORD *)(a1 + 744) = v17[2];
  if (!a8) {
    int v16 = 0;
  }
  *(_DWORD *)(a1 + 48) = v16 + *(_DWORD *)(a1 + 44);
  if (a10)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
    *(unsigned char *)(a1 + 2672) = 1;
    int v14 = *(unsigned __int8 *)(a1 + 1696);
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a7 + 16);
  *(_OWORD *)(a1 + 1552) = 0u;
  *(_OWORD *)(a1 + 1568) = 0u;
  *(_OWORD *)(a1 + 1584) = 0u;
  *(_OWORD *)(a1 + 1600) = 0u;
  *(_OWORD *)(a1 + 1616) = 0u;
  *(void *)(a1 + 1632) = 0;
  if (!v14)
  {
    int v18 = *(_DWORD *)(a7 + 32);
    switch(v18)
    {
      case 2:
        operator new();
      case 1:
        operator new();
      case 0:
        operator new();
    }
  }
  strcpy((char *)operator new(0x20uLL), "LSTM alloc, from constructor");
  sub_19E1E7498();
}

void sub_19E1E6F60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, void **a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  operator delete(v57);
  uint64_t v98 = (void **)(v56 + 328);
  float32x4_t v99 = (void *)v56[331];
  if (v99)
  {
    v56[332] = v99;
    operator delete(v99);
    uint64_t v65 = *v98;
    if (!*v98)
    {
LABEL_6:
      sub_19E3030E8(v62);
      sub_19E3030E8(v58);
      sub_19E3030E8(a9);
      sub_19E3030E8(a10);
      sub_19E3030E8(a11);
      sub_19E3030E8(a12);
      sub_19E3030E8(v63);
      sub_19E3030E8(v61);
      sub_19E3030E8(v60);
      sub_19E3030E8(v59);
      sub_19E3030E8(a13);
      sub_19E1C6038(a15);
      sub_19E1C6038(a16);
      sub_19E1C6038(a14);
      sub_19E1C6038(a17);
      uint64_t v66 = (void *)v56[120];
      if (v66)
      {
        v56[121] = v66;
        operator delete(v66);
        uint64_t v67 = (void *)v56[117];
        if (!v67)
        {
LABEL_8:
          int v68 = (void *)v56[114];
          if (!v68) {
            goto LABEL_9;
          }
          goto LABEL_40;
        }
      }
      else
      {
        uint64_t v67 = (void *)v56[117];
        if (!v67) {
          goto LABEL_8;
        }
      }
      v56[118] = v67;
      operator delete(v67);
      int v68 = (void *)v56[114];
      if (!v68)
      {
LABEL_9:
        unint64_t v69 = (void *)v56[111];
        if (!v69) {
          goto LABEL_10;
        }
        goto LABEL_41;
      }
LABEL_40:
      v56[115] = v68;
      operator delete(v68);
      unint64_t v69 = (void *)v56[111];
      if (!v69)
      {
LABEL_10:
        uint64_t v70 = (void *)v56[108];
        if (!v70) {
          goto LABEL_11;
        }
        goto LABEL_42;
      }
LABEL_41:
      v56[112] = v69;
      operator delete(v69);
      uint64_t v70 = (void *)v56[108];
      if (!v70)
      {
LABEL_11:
        uint64_t v71 = (void *)v56[105];
        if (!v71) {
          goto LABEL_12;
        }
        goto LABEL_43;
      }
LABEL_42:
      v56[109] = v70;
      operator delete(v70);
      uint64_t v71 = (void *)v56[105];
      if (!v71)
      {
LABEL_12:
        int v72 = (void *)v56[102];
        if (!v72) {
          goto LABEL_13;
        }
        goto LABEL_44;
      }
LABEL_43:
      v56[106] = v71;
      operator delete(v71);
      int v72 = (void *)v56[102];
      if (!v72)
      {
LABEL_13:
        long long v73 = (void *)v56[99];
        if (!v73) {
          goto LABEL_14;
        }
        goto LABEL_45;
      }
LABEL_44:
      v56[103] = v72;
      operator delete(v72);
      long long v73 = (void *)v56[99];
      if (!v73)
      {
LABEL_14:
        int v74 = (void *)v56[89];
        if (!v74) {
          goto LABEL_15;
        }
        goto LABEL_46;
      }
LABEL_45:
      v56[100] = v73;
      operator delete(v73);
      int v74 = (void *)v56[89];
      if (!v74)
      {
LABEL_15:
        uint64_t v75 = (void *)v56[86];
        if (!v75) {
          goto LABEL_16;
        }
        goto LABEL_47;
      }
LABEL_46:
      v56[90] = v74;
      operator delete(v74);
      uint64_t v75 = (void *)v56[86];
      if (!v75)
      {
LABEL_16:
        unint64_t v76 = (void *)v56[83];
        if (!v76) {
          goto LABEL_17;
        }
        goto LABEL_48;
      }
LABEL_47:
      v56[87] = v75;
      operator delete(v75);
      unint64_t v76 = (void *)v56[83];
      if (!v76)
      {
LABEL_17:
        float32x4_t v77 = (void *)v56[80];
        if (!v77) {
          goto LABEL_18;
        }
        goto LABEL_49;
      }
LABEL_48:
      v56[84] = v76;
      operator delete(v76);
      float32x4_t v77 = (void *)v56[80];
      if (!v77)
      {
LABEL_18:
        uint64_t v78 = (void *)v56[77];
        if (!v78) {
          goto LABEL_19;
        }
        goto LABEL_50;
      }
LABEL_49:
      v56[81] = v77;
      operator delete(v77);
      uint64_t v78 = (void *)v56[77];
      if (!v78)
      {
LABEL_19:
        uint64_t v79 = (void *)v56[74];
        if (!v79) {
          goto LABEL_20;
        }
        goto LABEL_51;
      }
LABEL_50:
      v56[78] = v78;
      operator delete(v78);
      uint64_t v79 = (void *)v56[74];
      if (!v79)
      {
LABEL_20:
        uint64_t v80 = (void *)v56[71];
        if (!v80) {
          goto LABEL_21;
        }
        goto LABEL_52;
      }
LABEL_51:
      v56[75] = v79;
      operator delete(v79);
      uint64_t v80 = (void *)v56[71];
      if (!v80)
      {
LABEL_21:
        uint64_t v81 = (void *)v56[68];
        if (!v81) {
          goto LABEL_22;
        }
        goto LABEL_53;
      }
LABEL_52:
      v56[72] = v80;
      operator delete(v80);
      uint64_t v81 = (void *)v56[68];
      if (!v81)
      {
LABEL_22:
        uint64_t v82 = (void *)v56[65];
        if (!v82) {
          goto LABEL_23;
        }
        goto LABEL_54;
      }
LABEL_53:
      v56[69] = v81;
      operator delete(v81);
      uint64_t v82 = (void *)v56[65];
      if (!v82)
      {
LABEL_23:
        int v83 = (void *)v56[62];
        if (!v83) {
          goto LABEL_24;
        }
        goto LABEL_55;
      }
LABEL_54:
      v56[66] = v82;
      operator delete(v82);
      int v83 = (void *)v56[62];
      if (!v83)
      {
LABEL_24:
        BOOL v84 = (void *)v56[59];
        if (!v84) {
          goto LABEL_25;
        }
        goto LABEL_56;
      }
LABEL_55:
      v56[63] = v83;
      operator delete(v83);
      BOOL v84 = (void *)v56[59];
      if (!v84)
      {
LABEL_25:
        uint64_t v85 = (void *)v56[56];
        if (!v85) {
          goto LABEL_26;
        }
        goto LABEL_57;
      }
LABEL_56:
      v56[60] = v84;
      operator delete(v84);
      uint64_t v85 = (void *)v56[56];
      if (!v85)
      {
LABEL_26:
        uint64_t v86 = (void *)v56[53];
        if (!v86) {
          goto LABEL_27;
        }
        goto LABEL_58;
      }
LABEL_57:
      v56[57] = v85;
      operator delete(v85);
      uint64_t v86 = (void *)v56[53];
      if (!v86)
      {
LABEL_27:
        uint64_t v87 = (void *)v56[50];
        if (!v87) {
          goto LABEL_28;
        }
        goto LABEL_59;
      }
LABEL_58:
      v56[54] = v86;
      operator delete(v86);
      uint64_t v87 = (void *)v56[50];
      if (!v87)
      {
LABEL_28:
        unint64_t v88 = (void **)(v56 + 26);
        uint64_t v89 = (void *)v56[47];
        if (!v89) {
          goto LABEL_29;
        }
        goto LABEL_60;
      }
LABEL_59:
      v56[51] = v87;
      operator delete(v87);
      unint64_t v88 = (void **)(v56 + 26);
      uint64_t v89 = (void *)v56[47];
      if (!v89)
      {
LABEL_29:
        unint64_t v90 = (void *)v56[44];
        if (!v90) {
          goto LABEL_30;
        }
        goto LABEL_61;
      }
LABEL_60:
      v56[48] = v89;
      operator delete(v89);
      unint64_t v90 = (void *)v56[44];
      if (!v90)
      {
LABEL_30:
        sub_19E14315C(v88);
        unint64_t v91 = (void *)v56[23];
        if (!v91) {
          goto LABEL_31;
        }
        goto LABEL_62;
      }
LABEL_61:
      v56[45] = v90;
      operator delete(v90);
      sub_19E14315C(v88);
      unint64_t v91 = (void *)v56[23];
      if (!v91)
      {
LABEL_31:
        unint64_t v92 = (void *)v56[20];
        if (!v92) {
          goto LABEL_32;
        }
        goto LABEL_63;
      }
LABEL_62:
      v56[24] = v91;
      operator delete(v91);
      unint64_t v92 = (void *)v56[20];
      if (!v92)
      {
LABEL_32:
        unint64_t v93 = (void *)v56[17];
        if (!v93) {
          goto LABEL_33;
        }
        goto LABEL_64;
      }
LABEL_63:
      v56[21] = v92;
      operator delete(v92);
      unint64_t v93 = (void *)v56[17];
      if (!v93)
      {
LABEL_33:
        unint64_t v94 = (void *)v56[14];
        if (!v94) {
          goto LABEL_34;
        }
        goto LABEL_65;
      }
LABEL_64:
      v56[18] = v93;
      operator delete(v93);
      unint64_t v94 = (void *)v56[14];
      if (!v94)
      {
LABEL_34:
        uint64_t v95 = (void *)v56[11];
        if (!v95) {
          goto LABEL_35;
        }
        goto LABEL_66;
      }
LABEL_65:
      v56[15] = v94;
      operator delete(v94);
      uint64_t v95 = (void *)v56[11];
      if (!v95)
      {
LABEL_35:
        uint64_t v96 = *a18;
        if (!*a18) {
          goto LABEL_36;
        }
        goto LABEL_67;
      }
LABEL_66:
      v56[12] = v95;
      operator delete(v95);
      uint64_t v96 = *a18;
      if (!*a18)
      {
LABEL_36:
        *int v56 = a19;
        uint64_t v97 = (void *)v56[1];
        if (!v97) {
          goto LABEL_37;
        }
        goto LABEL_68;
      }
LABEL_67:
      v56[9] = v96;
      operator delete(v96);
      *int v56 = a19;
      uint64_t v97 = (void *)v56[1];
      if (!v97) {
LABEL_37:
      }
        _Unwind_Resume(a1);
LABEL_68:
      v56[2] = v97;
      operator delete(v97);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v65 = *v98;
    if (!*v98) {
      goto LABEL_6;
    }
  }
  v56[329] = v65;
  operator delete(v65);
  goto LABEL_6;
}

void sub_19E1E7498()
{
}

void sub_19E1EE478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_19E1C6038((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19E1EE48C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_19E1C6038((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19E1EE4A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_19E1C6038((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19E1EE4B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_19E1C6038((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19E1EE4C8()
{
}

uint64_t sub_19E1EE4DC(uint64_t a1)
{
  return a1 + 64;
}

uint64_t *sub_19E1EE4E4(void *a1)
{
  uint64_t v2 = a1 + 99;
  uint64_t v3 = a1[20];
  uint64_t v4 = a1[21];
  unint64_t v5 = (v4 - v3) >> 3;
  uint64_t v6 = a1[99];
  unint64_t v7 = (a1[100] - v6) >> 3;
  if (v5 <= v7)
  {
    if (v5 < v7) {
      a1[100] = v6 + 8 * v5;
    }
  }
  else
  {
    sub_19E1599BC((void **)a1 + 99, v5 - v7);
    uint64_t v3 = a1[20];
    uint64_t v4 = a1[21];
    unint64_t v5 = (v4 - v3) >> 3;
  }
  if (v4 != v3)
  {
    uint64_t v8 = *v2;
    if (v5 <= 1) {
      unint64_t v9 = 1;
    }
    else {
      unint64_t v9 = v5;
    }
    if (v9 < 4)
    {
      unint64_t v10 = 0;
LABEL_14:
      int v15 = (void *)(v8 + 8 * v10);
      int v16 = (uint64_t *)(v3 + 8 * v10);
      unint64_t v17 = v9 - v10;
      do
      {
        uint64_t v18 = *v16++;
        *v15++ = v18;
        --v17;
      }
      while (v17);
      return v2;
    }
    unint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFCLL;
    size_t v11 = (long long *)(v3 + 16);
    unint64_t v12 = (_OWORD *)(v8 + 16);
    unint64_t v13 = v9 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      long long v14 = *v11;
      *(v12 - 1) = *(v11 - 1);
      _OWORD *v12 = v14;
      v11 += 2;
      v12 += 2;
      v13 -= 4;
    }
    while (v13);
    if (v9 != v10) {
      goto LABEL_14;
    }
  }
  return v2;
}

void sub_19E1EE5C8()
{
}

uint64_t sub_19E1EE5DC(uint64_t a1)
{
  return a1 + 816;
}

uint64_t sub_19E1EE5E4()
{
  return 0;
}

unsigned char *sub_19E1EE5EC(uint64_t a1, uint64_t a2, int *a3, int a4)
{
  if (!a2) {
LABEL_21:
  }
    sub_19E2F6320(3);
  int v7 = *(_DWORD *)(a2 + 72);
  uint64_t v8 = *(void *)a2;
  unint64_t v9 = (int *)(*(void *)a2 + v7);
  unint64_t v10 = *(void *)a2 + *(void *)(a2 + 8) - 4;
  if ((unint64_t)v9 <= v10)
  {
    int v11 = *v9;
    v7 += 4;
    *(_DWORD *)(a2 + 72) = v7;
    unint64_t v12 = (int *)(v8 + v7);
    if ((unint64_t)v12 <= v10)
    {
LABEL_4:
      int v13 = *v12;
      v7 += 4;
      *(_DWORD *)(a2 + 72) = v7;
      if (a4 < 1) {
        goto LABEL_16;
      }
LABEL_8:
      uint64_t v14 = v7;
      int v15 = (int *)(v8 + v7);
      if ((unint64_t)v15 <= v10)
      {
        int v19 = *v15;
        v7 += 4;
        *(_DWORD *)(a2 + 72) = v7;
        uint64_t v14 = v7;
        *(_DWORD *)(a1 + 736) = v19;
        int32x4_t v20 = (int *)(v8 + v7);
        if ((unint64_t)v20 <= v10)
        {
          int v16 = *v20;
          v7 += 4;
          *(_DWORD *)(a2 + 72) = v7;
          *(_DWORD *)(a1 + 740) = v16;
          unint64_t v17 = (int *)(v8 + v7);
          if ((unint64_t)v17 > v10)
          {
LABEL_14:
            int v18 = 0;
            goto LABEL_15;
          }
LABEL_11:
          int v18 = *v17;
          *(_DWORD *)(a2 + 72) = v7 + 4;
LABEL_15:
          *(_DWORD *)(a1 + 744) = v18;
          goto LABEL_16;
        }
      }
      else
      {
        *(_DWORD *)(a1 + 736) = 0;
      }
      *(_DWORD *)(a1 + 740) = 0;
      unint64_t v17 = (int *)(v8 + v14);
      if ((unint64_t)v17 > v10) {
        goto LABEL_14;
      }
      goto LABEL_11;
    }
  }
  else
  {
    int v11 = 0;
    unint64_t v12 = (int *)(v8 + v7);
    if ((unint64_t)v12 <= v10) {
      goto LABEL_4;
    }
  }
  int v13 = 0;
  if (a4 >= 1) {
    goto LABEL_8;
  }
LABEL_16:
  if (*(_DWORD *)(a1 + 52) != v11 || *(_DWORD *)(a1 + 48) != v13) {
    goto LABEL_21;
  }
  int32x4_t v21 = *(unsigned char **)(a1 + 2568);
  int v22 = *a3;
  int v23 = *(unsigned __int8 *)(a1 + 1697);
  int v24 = sub_19E2F6300();
  sub_19E1C6130(v21, (uint64_t *)a2, v22, v23, v24, *(_DWORD *)(a1 + 52));
  int v25 = *(unsigned char **)(a1 + 2576);
  int v26 = *a3;
  int v27 = *(unsigned __int8 *)(a1 + 1697);
  int v28 = sub_19E2F6300();
  sub_19E1C6130(v25, (uint64_t *)a2, v26, v27, v28, *(_DWORD *)(a1 + 52));
  unint64_t v29 = *(unsigned char **)(a1 + 2584);
  int v30 = *a3;
  int v31 = *(unsigned __int8 *)(a1 + 1697);
  int v32 = sub_19E2F6300();
  sub_19E1C6130(v29, (uint64_t *)a2, v30, v31, v32, *(_DWORD *)(a1 + 52));
  int v33 = *(unsigned char **)(a1 + 2504);
  int v34 = *a3;
  int v35 = *(unsigned __int8 *)(a1 + 1697);
  int v36 = sub_19E2F6300();
  sub_19E1C632C(v33, (uint64_t *)a2, v34, v35, v36, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
  unsigned long long v37 = *(unsigned char **)(a1 + 2512);
  int v38 = *a3;
  int v39 = *(unsigned __int8 *)(a1 + 1697);
  int v40 = sub_19E2F6300();
  sub_19E1C632C(v37, (uint64_t *)a2, v38, v39, v40, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
  uint64_t v41 = *(unsigned char **)(a1 + 2520);
  int v42 = *a3;
  int v43 = *(unsigned __int8 *)(a1 + 1697);
  int v44 = sub_19E2F6300();
  sub_19E1C632C(v41, (uint64_t *)a2, v42, v43, v44, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
  float32x4x2_t v45 = *(unsigned char **)(a1 + 2528);
  int v46 = *a3;
  int v47 = *(unsigned __int8 *)(a1 + 1697);
  int v48 = sub_19E2F6300();
  sub_19E1C632C(v45, (uint64_t *)a2, v46, v47, v48, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
  uint64_t v49 = *(unsigned char **)(a1 + 2536);
  int v50 = *a3;
  int v51 = *(unsigned __int8 *)(a1 + 1697);
  int v52 = sub_19E2F6300();
  sub_19E1C632C(v49, (uint64_t *)a2, v50, v51, v52, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52));
  uint64_t v53 = *(unsigned char **)(a1 + 2544);
  int v54 = *a3;
  int v55 = *(unsigned __int8 *)(a1 + 1697);
  int v56 = sub_19E2F6300();
  sub_19E1C632C(v53, (uint64_t *)a2, v54, v55, v56, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52));
  unint64_t v57 = *(unsigned char **)(a1 + 2552);
  int v58 = *a3;
  int v59 = *(unsigned __int8 *)(a1 + 1697);
  int v60 = sub_19E2F6300();
  sub_19E1C632C(v57, (uint64_t *)a2, v58, v59, v60, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52));
  uint64_t v61 = *(unsigned char **)(a1 + 2560);
  int v62 = *a3;
  int v63 = *(unsigned __int8 *)(a1 + 1697);
  int v64 = sub_19E2F6300();
  int v65 = *(_DWORD *)(a1 + 52);

  return sub_19E1C632C(v61, (uint64_t *)a2, v62, v63, v64, v65, v65);
}

uint64_t sub_19E1EE974(uint64_t a1, FILE *__stream, int *a3, int a4, unsigned int a5)
{
  if (!__stream) {
    sub_19E2F6320(3);
  }
  int v10 = *(_DWORD *)(a1 + 48);
  sub_19E2F6788(__stream, a3, *(_DWORD *)(a1 + 52));
  sub_19E2F6788(__stream, a3, v10);
  if (a4 >= 1)
  {
    int __ptr = *(_DWORD *)(a1 + 736);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    int __ptr = *(_DWORD *)(a1 + 740);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    int __ptr = *(_DWORD *)(a1 + 744);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    *a3 += 12;
  }
  uint64_t v11 = *(void *)(a1 + 2568);
  int v12 = sub_19E2F6300();
  sub_19E1F3DA0(v11, __stream, a3, 3, v12, a5);
  uint64_t v13 = *(void *)(a1 + 2576);
  int v14 = sub_19E2F6300();
  sub_19E1F3DA0(v13, __stream, a3, 3, v14, a5);
  uint64_t v15 = *(void *)(a1 + 2584);
  int v16 = sub_19E2F6300();
  sub_19E1F3DA0(v15, __stream, a3, 3, v16, a5);
  uint64_t v17 = *(void *)(a1 + 2504);
  int v18 = sub_19E2F6300();
  sub_19E1F3EB8(v17, __stream, a3, 3, v18, a5);
  uint64_t v19 = *(void *)(a1 + 2512);
  int v20 = sub_19E2F6300();
  sub_19E1F3EB8(v19, __stream, a3, 3, v20, a5);
  uint64_t v21 = *(void *)(a1 + 2520);
  int v22 = sub_19E2F6300();
  sub_19E1F3EB8(v21, __stream, a3, 3, v22, a5);
  uint64_t v23 = *(void *)(a1 + 2528);
  int v24 = sub_19E2F6300();
  sub_19E1F3EB8(v23, __stream, a3, 3, v24, a5);
  uint64_t v25 = *(void *)(a1 + 2536);
  int v26 = sub_19E2F6300();
  sub_19E1F3EB8(v25, __stream, a3, 3, v26, a5);
  uint64_t v27 = *(void *)(a1 + 2544);
  int v28 = sub_19E2F6300();
  sub_19E1F3EB8(v27, __stream, a3, 3, v28, a5);
  uint64_t v29 = *(void *)(a1 + 2552);
  int v30 = sub_19E2F6300();
  sub_19E1F3EB8(v29, __stream, a3, 3, v30, a5);
  uint64_t v31 = *(void *)(a1 + 2560);
  int v32 = sub_19E2F6300();
  return sub_19E1F3EB8(v31, __stream, a3, 3, v32, a5);
}

void *sub_19E1EEC44(uint64_t a1, void *lpsrc, const void *a3)
{
  if (lpsrc)
  {
    unint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3DF8, 0);
    if (a3) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = 0;
    uint64_t v7 = *(unsigned int *)(a1 + 52);
    if ((int)v7 < 1) {
      goto LABEL_17;
    }
    goto LABEL_7;
  }
  unint64_t v5 = 0;
  if (!a3) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t result = __dynamic_cast(a3, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3DF8, 0);
  uint64_t v7 = *(unsigned int *)(a1 + 52);
  if ((int)v7 < 1) {
    goto LABEL_17;
  }
LABEL_7:
  uint64_t v8 = 0;
  unint64_t v9 = *(void **)(a1 + 2568);
  int v10 = (void *)result[321];
  uint64_t v11 = (void *)v5[321];
  do
  {
    *(unsigned char *)(*v9 + v8) = *(unsigned char *)(*v10 + v8) - *(unsigned char *)(*v11 + v8);
    ++v8;
  }
  while (v7 != v8);
  uint64_t v7 = *(unsigned int *)(a1 + 52);
  if ((int)v7 < 1)
  {
LABEL_17:
    uint64_t v20 = (*(_DWORD *)(a1 + 48) * v7);
    if ((int)v20 < 1) {
      goto LABEL_31;
    }
    goto LABEL_18;
  }
  uint64_t v12 = 0;
  uint64_t v13 = *(void **)(a1 + 2576);
  int v14 = (void *)result[322];
  uint64_t v15 = (void *)v5[322];
  do
  {
    *(unsigned char *)(*v13 + v12) = *(unsigned char *)(*v14 + v12) - *(unsigned char *)(*v15 + v12);
    ++v12;
  }
  while (v7 != v12);
  uint64_t v7 = *(unsigned int *)(a1 + 52);
  if ((int)v7 < 1)
  {
    uint64_t v20 = (*(_DWORD *)(a1 + 48) * v7);
    if ((int)v20 < 1) {
      goto LABEL_31;
    }
  }
  else
  {
    uint64_t v16 = 0;
    uint64_t v17 = *(void **)(a1 + 2584);
    int v18 = (void *)result[323];
    uint64_t v19 = (void *)v5[323];
    do
    {
      *(unsigned char *)(*v17 + v16) = *(unsigned char *)(*v18 + v16) - *(unsigned char *)(*v19 + v16);
      ++v16;
    }
    while (v7 != v16);
    LODWORD(v7) = *(_DWORD *)(a1 + 52);
    uint64_t v20 = (*(_DWORD *)(a1 + 48) * v7);
    if ((int)v20 < 1) {
      goto LABEL_31;
    }
  }
LABEL_18:
  uint64_t v21 = 0;
  int v22 = *(void **)(a1 + 2504);
  uint64_t v23 = (void *)result[313];
  int v24 = (void *)v5[313];
  do
  {
    *(unsigned char *)(*v22 + v21) = *(unsigned char *)(*v23 + v21) - *(unsigned char *)(*v24 + v21);
    ++v21;
  }
  while (v20 != v21);
  LODWORD(v7) = *(_DWORD *)(a1 + 52);
  uint64_t v25 = (*(_DWORD *)(a1 + 48) * v7);
  if ((int)v25 >= 1)
  {
    uint64_t v26 = 0;
    uint64_t v27 = *(void **)(a1 + 2520);
    int v28 = (void *)result[315];
    uint64_t v29 = (void *)v5[315];
    do
    {
      *(unsigned char *)(*v27 + v26) = *(unsigned char *)(*v28 + v26) - *(unsigned char *)(*v29 + v26);
      ++v26;
    }
    while (v25 != v26);
    LODWORD(v7) = *(_DWORD *)(a1 + 52);
    uint64_t v30 = (*(_DWORD *)(a1 + 48) * v7);
    if ((int)v30 >= 1)
    {
      uint64_t v31 = 0;
      int v32 = *(void **)(a1 + 2512);
      int v33 = (void *)result[314];
      int v34 = (void *)v5[314];
      do
      {
        *(unsigned char *)(*v32 + v31) = *(unsigned char *)(*v33 + v31) - *(unsigned char *)(*v34 + v31);
        ++v31;
      }
      while (v30 != v31);
      LODWORD(v7) = *(_DWORD *)(a1 + 52);
      uint64_t v35 = (*(_DWORD *)(a1 + 48) * v7);
      if ((int)v35 >= 1)
      {
        uint64_t v36 = 0;
        unsigned long long v37 = *(void **)(a1 + 2528);
        int v38 = (void *)result[316];
        int v39 = (void *)v5[316];
        do
        {
          *(unsigned char *)(*v37 + v36) = *(unsigned char *)(*v38 + v36) - *(unsigned char *)(*v39 + v36);
          ++v36;
        }
        while (v35 != v36);
        LODWORD(v7) = *(_DWORD *)(a1 + 52);
      }
    }
  }
LABEL_31:
  if (v7)
  {
    uint64_t v40 = 0;
    uint64_t v41 = *(void **)(a1 + 2536);
    int v42 = (void *)result[317];
    uint64_t v43 = (v7 * v7);
    int v44 = (void *)v5[317];
    do
    {
      *(unsigned char *)(*v41 + v40) = *(unsigned char *)(*v42 + v40) - *(unsigned char *)(*v44 + v40);
      ++v40;
    }
    while (v43 != v40);
    int v45 = *(_DWORD *)(a1 + 52);
    if (v45)
    {
      uint64_t v46 = 0;
      int v47 = *(void **)(a1 + 2552);
      int v48 = (void *)result[319];
      uint64_t v49 = (v45 * v45);
      int v50 = (void *)v5[319];
      do
      {
        *(unsigned char *)(*v47 + v46) = *(unsigned char *)(*v48 + v46) - *(unsigned char *)(*v50 + v46);
        ++v46;
      }
      while (v49 != v46);
      int v51 = *(_DWORD *)(a1 + 52);
      if (v51)
      {
        uint64_t v52 = 0;
        uint64_t v53 = *(void **)(a1 + 2544);
        int v54 = (void *)result[318];
        uint64_t v55 = (v51 * v51);
        int v56 = (void *)v5[318];
        do
        {
          *(unsigned char *)(*v53 + v52) = *(unsigned char *)(*v54 + v52) - *(unsigned char *)(*v56 + v52);
          ++v52;
        }
        while (v55 != v52);
        int v57 = *(_DWORD *)(a1 + 52);
        if (v57)
        {
          uint64_t v58 = 0;
          int v59 = *(void **)(a1 + 2560);
          int v60 = (void *)result[320];
          uint64_t v61 = (v57 * v57);
          int v62 = (void *)v5[320];
          do
          {
            *(unsigned char *)(*v59 + v58) = *(unsigned char *)(*v60 + v58) - *(unsigned char *)(*v62 + v58);
            ++v58;
          }
          while (v61 != v58);
        }
      }
    }
  }
  return result;
}

void sub_19E1EF048(int a1, void *lpsrc, const void *a3)
{
  if (lpsrc) {
    __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3DF8, 0);
  }
  if (a3)
  {
    __dynamic_cast(a3, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3DF8, 0);
  }
}

void *sub_19E1EF114(uint64_t a1, void *lpsrc)
{
  if (lpsrc) {
    uint64_t result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3DF8, 0);
  }
  else {
    uint64_t result = 0;
  }
  uint64_t v4 = *(float32x4_t ***)(a1 + 2568);
  unint64_t v5 = (float32x4_t **)result[321];
  uint64_t v6 = *(int *)(a1 + 52);
  if ((int)v6 >= 8)
  {
    uint64_t v7 = *v4;
    uint64_t v8 = *v5;
    int v9 = (int)v6 / 8;
    do
    {
      float32x4_t v10 = *v8;
      float32x4_t v11 = v8[1];
      v8 += 2;
      float32x4_t v12 = vaddq_f32(v7[1], v11);
      float32x4_t *v7 = vaddq_f32(*v7, v10);
      v7[1] = v12;
      v7 += 2;
      --v9;
    }
    while (v9);
  }
  LODWORD(v13) = 8 * ((int)v6 / 8);
  if ((int)v13 < (int)v6)
  {
    uint64_t v13 = (int)v13;
    do
    {
      (*v4)->i8[v13] += (*v5)->i8[v13];
      ++v13;
    }
    while (v6 != v13);
  }
  int v14 = *(float32x4_t ***)(a1 + 2576);
  uint64_t v15 = (float32x4_t **)result[322];
  uint64_t v16 = *(int *)(a1 + 52);
  if ((int)v16 >= 8)
  {
    uint64_t v17 = *v14;
    int v18 = *v15;
    int v19 = (int)v16 / 8;
    do
    {
      float32x4_t v20 = *v18;
      float32x4_t v21 = v18[1];
      v18 += 2;
      float32x4_t v22 = vaddq_f32(v17[1], v21);
      float32x4_t *v17 = vaddq_f32(*v17, v20);
      v17[1] = v22;
      v17 += 2;
      --v19;
    }
    while (v19);
  }
  LODWORD(v23) = 8 * ((int)v16 / 8);
  if ((int)v23 < (int)v16)
  {
    uint64_t v23 = (int)v23;
    do
    {
      (*v14)->i8[v23] += (*v15)->i8[v23];
      ++v23;
    }
    while (v16 != v23);
  }
  int v24 = *(float32x4_t ***)(a1 + 2584);
  uint64_t v25 = (float32x4_t **)result[323];
  uint64_t v26 = *(int *)(a1 + 52);
  if ((int)v26 >= 8)
  {
    uint64_t v27 = *v24;
    int v28 = *v25;
    int v29 = (int)v26 / 8;
    do
    {
      float32x4_t v30 = *v28;
      float32x4_t v31 = v28[1];
      v28 += 2;
      float32x4_t v32 = vaddq_f32(v27[1], v31);
      float32x4_t *v27 = vaddq_f32(*v27, v30);
      v27[1] = v32;
      v27 += 2;
      --v29;
    }
    while (v29);
  }
  LODWORD(v33) = 8 * ((int)v26 / 8);
  if ((int)v33 < (int)v26)
  {
    uint64_t v33 = (int)v33;
    do
    {
      (*v24)->i8[v33] += (*v25)->i8[v33];
      ++v33;
    }
    while (v26 != v33);
  }
  int v34 = *(_DWORD *)(a1 + 52);
  uint64_t v35 = (*(_DWORD *)(a1 + 48) * v34);
  if ((int)v35 >= 1)
  {
    uint64_t v36 = 0;
    unsigned long long v37 = *(void **)(a1 + 2504);
    int v38 = (void *)result[313];
    do
    {
      *(unsigned char *)(*v37 + v36) += *(unsigned char *)(*v38 + v36);
      ++v36;
    }
    while (v35 != v36);
    int v34 = *(_DWORD *)(a1 + 52);
    uint64_t v39 = (*(_DWORD *)(a1 + 48) * v34);
    if ((int)v39 >= 1)
    {
      uint64_t v40 = 0;
      uint64_t v41 = *(void **)(a1 + 2512);
      int v42 = (void *)result[314];
      do
      {
        *(unsigned char *)(*v41 + v40) += *(unsigned char *)(*v42 + v40);
        ++v40;
      }
      while (v39 != v40);
      int v34 = *(_DWORD *)(a1 + 52);
      uint64_t v43 = (*(_DWORD *)(a1 + 48) * v34);
      if ((int)v43 >= 1)
      {
        uint64_t v44 = 0;
        int v45 = *(void **)(a1 + 2520);
        uint64_t v46 = (void *)result[315];
        do
        {
          *(unsigned char *)(*v45 + v44) += *(unsigned char *)(*v46 + v44);
          ++v44;
        }
        while (v43 != v44);
        int v34 = *(_DWORD *)(a1 + 52);
        uint64_t v47 = (*(_DWORD *)(a1 + 48) * v34);
        if ((int)v47 >= 1)
        {
          uint64_t v48 = 0;
          uint64_t v49 = *(void **)(a1 + 2528);
          int v50 = (void *)result[316];
          do
          {
            *(unsigned char *)(*v49 + v48) += *(unsigned char *)(*v50 + v48);
            ++v48;
          }
          while (v47 != v48);
          int v34 = *(_DWORD *)(a1 + 52);
        }
      }
    }
  }
  if (v34)
  {
    uint64_t v51 = 0;
    uint64_t v52 = *(void **)(a1 + 2536);
    uint64_t v53 = (void *)result[317];
    uint64_t v54 = (v34 * v34);
    do
    {
      *(unsigned char *)(*v52 + v51) += *(unsigned char *)(*v53 + v51);
      ++v51;
    }
    while (v54 != v51);
    int v55 = *(_DWORD *)(a1 + 52);
    if (v55)
    {
      uint64_t v56 = 0;
      int v57 = *(void **)(a1 + 2544);
      uint64_t v58 = (void *)result[318];
      uint64_t v59 = (v55 * v55);
      do
      {
        *(unsigned char *)(*v57 + v56) += *(unsigned char *)(*v58 + v56);
        ++v56;
      }
      while (v59 != v56);
      int v60 = *(_DWORD *)(a1 + 52);
      if (v60)
      {
        uint64_t v61 = 0;
        int v62 = *(void **)(a1 + 2552);
        int v63 = (void *)result[319];
        uint64_t v64 = (v60 * v60);
        do
        {
          *(unsigned char *)(*v62 + v61) += *(unsigned char *)(*v63 + v61);
          ++v61;
        }
        while (v64 != v61);
        int v65 = *(_DWORD *)(a1 + 52);
        if (v65)
        {
          uint64_t v66 = 0;
          uint64_t v67 = *(void **)(a1 + 2560);
          int v68 = (void *)result[320];
          uint64_t v69 = (v65 * v65);
          do
          {
            *(unsigned char *)(*v67 + v66) += *(unsigned char *)(*v68 + v66);
            ++v66;
          }
          while (v69 != v66);
        }
      }
    }
  }
  return result;
}

void sub_19E1EF4F8(uint64_t a1, void *lpsrc)
{
  if (lpsrc) {
    __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3E10, 0);
  }
  (*(void (**)(void))(**(void **)(a1 + 1552) + 64))(*(void *)(a1 + 1552));
  (*(void (**)(void))(**(void **)(a1 + 1552) + 64))(*(void *)(a1 + 1552));
  sub_19E2F6320(23);
}

uint64_t sub_19E1EF5B0(uint64_t result, float a2, double a3, double a4)
{
  float v4 = -a2;
  uint64_t v5 = *(unsigned int *)(result + 52);
  if ((int)v5 < 1) {
    goto LABEL_24;
  }
  uint64_t v6 = 0;
  uint64_t v7 = *(void **)(result + 2568);
  do
  {
    LOBYTE(a4) = *(unsigned char *)(*v7 + v6);
    *(void *)&a4 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a4)).u64[0];
    float v8 = (float)SLODWORD(a4);
    BOOL v9 = (float)SLODWORD(a4) < v4;
    *(float *)&a4 = -a2;
    if (v9 || (*(float *)&a4 = a2, v8 > a2)) {
      *(unsigned char *)(*v7 + v6) = (int)*(float *)&a4;
    }
    ++v6;
  }
  while (v5 != v6);
  uint64_t v5 = *(unsigned int *)(result + 52);
  if ((int)v5 < 1)
  {
LABEL_24:
    uint64_t v16 = (*(_DWORD *)(result + 48) * v5);
    if ((int)v16 < 1) {
      goto LABEL_55;
    }
    goto LABEL_25;
  }
  uint64_t v10 = 0;
  float32x4_t v11 = *(void **)(result + 2576);
  do
  {
    LOBYTE(a4) = *(unsigned char *)(*v11 + v10);
    *(void *)&a4 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a4)).u64[0];
    float v12 = (float)SLODWORD(a4);
    BOOL v9 = (float)SLODWORD(a4) < v4;
    *(float *)&a4 = -a2;
    if (v9 || (*(float *)&a4 = a2, v12 > a2)) {
      *(unsigned char *)(*v11 + v10) = (int)*(float *)&a4;
    }
    ++v10;
  }
  while (v5 != v10);
  uint64_t v5 = *(unsigned int *)(result + 52);
  if ((int)v5 < 1)
  {
    uint64_t v16 = (*(_DWORD *)(result + 48) * v5);
    if ((int)v16 < 1) {
      goto LABEL_55;
    }
    goto LABEL_25;
  }
  uint64_t v13 = 0;
  int v14 = *(void **)(result + 2584);
  do
  {
    LOBYTE(a4) = *(unsigned char *)(*v14 + v13);
    *(void *)&a4 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a4)).u64[0];
    float v15 = (float)SLODWORD(a4);
    BOOL v9 = (float)SLODWORD(a4) < v4;
    *(float *)&a4 = -a2;
    if (v9 || (*(float *)&a4 = a2, v15 > a2)) {
      *(unsigned char *)(*v14 + v13) = (int)*(float *)&a4;
    }
    ++v13;
  }
  while (v5 != v13);
  LODWORD(v5) = *(_DWORD *)(result + 52);
  uint64_t v16 = (*(_DWORD *)(result + 48) * v5);
  if ((int)v16 >= 1)
  {
LABEL_25:
    uint64_t v17 = 0;
    int v18 = *(void **)(result + 2504);
    do
    {
      LOBYTE(a4) = *(unsigned char *)(*v18 + v17);
      *(void *)&a4 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a4)).u64[0];
      float v19 = (float)SLODWORD(a4);
      BOOL v9 = (float)SLODWORD(a4) < v4;
      *(float *)&a4 = -a2;
      if (v9 || (*(float *)&a4 = a2, v19 > a2)) {
        *(unsigned char *)(*v18 + v17) = (int)*(float *)&a4;
      }
      ++v17;
    }
    while (v16 != v17);
    LODWORD(v5) = *(_DWORD *)(result + 52);
    uint64_t v20 = (*(_DWORD *)(result + 48) * v5);
    if ((int)v20 >= 1)
    {
      uint64_t v21 = 0;
      float32x4_t v22 = *(void **)(result + 2512);
      do
      {
        LOBYTE(a4) = *(unsigned char *)(*v22 + v21);
        *(void *)&a4 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a4)).u64[0];
        float v23 = (float)SLODWORD(a4);
        BOOL v9 = (float)SLODWORD(a4) < v4;
        *(float *)&a4 = -a2;
        if (v9 || (*(float *)&a4 = a2, v23 > a2)) {
          *(unsigned char *)(*v22 + v21) = (int)*(float *)&a4;
        }
        ++v21;
      }
      while (v20 != v21);
      LODWORD(v5) = *(_DWORD *)(result + 52);
      uint64_t v24 = (*(_DWORD *)(result + 48) * v5);
      if ((int)v24 >= 1)
      {
        uint64_t v25 = 0;
        uint64_t v26 = *(void **)(result + 2520);
        do
        {
          LOBYTE(a4) = *(unsigned char *)(*v26 + v25);
          *(void *)&a4 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a4)).u64[0];
          float v27 = (float)SLODWORD(a4);
          BOOL v9 = (float)SLODWORD(a4) < v4;
          *(float *)&a4 = -a2;
          if (v9 || (*(float *)&a4 = a2, v27 > a2)) {
            *(unsigned char *)(*v26 + v25) = (int)*(float *)&a4;
          }
          ++v25;
        }
        while (v24 != v25);
        LODWORD(v5) = *(_DWORD *)(result + 52);
        uint64_t v28 = (*(_DWORD *)(result + 48) * v5);
        if ((int)v28 >= 1)
        {
          uint64_t v29 = 0;
          float32x4_t v30 = *(void **)(result + 2528);
          do
          {
            LOBYTE(a4) = *(unsigned char *)(*v30 + v29);
            *(void *)&a4 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a4)).u64[0];
            float v31 = (float)SLODWORD(a4);
            BOOL v9 = (float)SLODWORD(a4) < v4;
            *(float *)&a4 = -a2;
            if (v9 || (*(float *)&a4 = a2, v31 > a2)) {
              *(unsigned char *)(*v30 + v29) = (int)*(float *)&a4;
            }
            ++v29;
          }
          while (v28 != v29);
          LODWORD(v5) = *(_DWORD *)(result + 52);
        }
      }
    }
  }
LABEL_55:
  if (v5)
  {
    uint64_t v32 = 0;
    uint64_t v33 = *(void **)(result + 2536);
    uint64_t v34 = (v5 * v5);
    do
    {
      LOBYTE(a4) = *(unsigned char *)(*v33 + v32);
      *(void *)&a4 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a4)).u64[0];
      float v35 = (float)SLODWORD(a4);
      BOOL v9 = (float)SLODWORD(a4) < v4;
      *(float *)&a4 = -a2;
      if (v9 || (*(float *)&a4 = a2, v35 > a2)) {
        *(unsigned char *)(*v33 + v32) = (int)*(float *)&a4;
      }
      ++v32;
    }
    while (v34 != v32);
    int v36 = *(_DWORD *)(result + 52);
    if (v36)
    {
      uint64_t v37 = 0;
      int v38 = *(void **)(result + 2544);
      uint64_t v39 = (v36 * v36);
      do
      {
        LOBYTE(a4) = *(unsigned char *)(*v38 + v37);
        *(void *)&a4 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a4)).u64[0];
        float v40 = (float)SLODWORD(a4);
        BOOL v9 = (float)SLODWORD(a4) < v4;
        *(float *)&a4 = -a2;
        if (v9 || (*(float *)&a4 = a2, v40 > a2)) {
          *(unsigned char *)(*v38 + v37) = (int)*(float *)&a4;
        }
        ++v37;
      }
      while (v39 != v37);
      int v41 = *(_DWORD *)(result + 52);
      if (v41)
      {
        uint64_t v42 = 0;
        uint64_t v43 = *(void **)(result + 2552);
        uint64_t v44 = (v41 * v41);
        do
        {
          LOBYTE(a4) = *(unsigned char *)(*v43 + v42);
          *(void *)&a4 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a4)).u64[0];
          float v45 = (float)SLODWORD(a4);
          BOOL v9 = (float)SLODWORD(a4) < v4;
          *(float *)&a4 = -a2;
          if (v9 || (*(float *)&a4 = a2, v45 > a2)) {
            *(unsigned char *)(*v43 + v42) = (int)*(float *)&a4;
          }
          ++v42;
        }
        while (v44 != v42);
        int v46 = *(_DWORD *)(result + 52);
        if (v46)
        {
          uint64_t v47 = 0;
          uint64_t v48 = *(void **)(result + 2560);
          uint64_t v49 = (v46 * v46);
          do
          {
            LOBYTE(a4) = *(unsigned char *)(*v48 + v47);
            *(void *)&a4 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a4)).u64[0];
            float v50 = (float)SLODWORD(a4);
            BOOL v9 = (float)SLODWORD(a4) < v4;
            *(float *)&a4 = -a2;
            if (v9 || (*(float *)&a4 = a2, v50 > a2)) {
              *(unsigned char *)(*v48 + v47) = (int)*(float *)&a4;
            }
            ++v47;
          }
          while (v49 != v47);
        }
      }
    }
  }
  return result;
}

uint64_t sub_19E1EF9E4(uint64_t result, float a2, double a3)
{
  uint64_t v3 = *(unsigned int *)(result + 52);
  if ((int)v3 < 1) {
    goto LABEL_12;
  }
  uint64_t v4 = 0;
  uint64_t v5 = *(void **)(result + 2568);
  do
  {
    LOBYTE(a3) = *(unsigned char *)(*v5 + v4);
    *(void *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
    *(float *)&a3 = (float)SLODWORD(a3) * a2;
    *(unsigned char *)(*v5 + v4++) = (int)*(float *)&a3;
  }
  while (v3 != v4);
  uint64_t v3 = *(unsigned int *)(result + 52);
  if ((int)v3 < 1)
  {
LABEL_12:
    uint64_t v10 = (*(_DWORD *)(result + 48) * v3);
    if ((int)v10 < 1) {
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void **)(result + 2576);
    do
    {
      LOBYTE(a3) = *(unsigned char *)(*v7 + v6);
      *(void *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
      *(float *)&a3 = (float)SLODWORD(a3) * a2;
      *(unsigned char *)(*v7 + v6++) = (int)*(float *)&a3;
    }
    while (v3 != v6);
    uint64_t v3 = *(unsigned int *)(result + 52);
    if ((int)v3 < 1)
    {
      uint64_t v10 = (*(_DWORD *)(result + 48) * v3);
      if ((int)v10 < 1) {
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v8 = 0;
      BOOL v9 = *(void **)(result + 2584);
      do
      {
        LOBYTE(a3) = *(unsigned char *)(*v9 + v8);
        *(void *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
        *(float *)&a3 = (float)SLODWORD(a3) * a2;
        *(unsigned char *)(*v9 + v8++) = (int)*(float *)&a3;
      }
      while (v3 != v8);
      LODWORD(v3) = *(_DWORD *)(result + 52);
      uint64_t v10 = (*(_DWORD *)(result + 48) * v3);
      if ((int)v10 < 1) {
        goto LABEL_26;
      }
    }
  }
  uint64_t v11 = 0;
  float v12 = *(void **)(result + 2504);
  do
  {
    LOBYTE(a3) = *(unsigned char *)(*v12 + v11);
    *(void *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
    *(float *)&a3 = (float)SLODWORD(a3) * a2;
    *(unsigned char *)(*v12 + v11++) = (int)*(float *)&a3;
  }
  while (v10 != v11);
  LODWORD(v3) = *(_DWORD *)(result + 52);
  uint64_t v13 = (*(_DWORD *)(result + 48) * v3);
  if ((int)v13 >= 1)
  {
    uint64_t v14 = 0;
    float v15 = *(void **)(result + 2512);
    do
    {
      LOBYTE(a3) = *(unsigned char *)(*v15 + v14);
      *(void *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
      *(float *)&a3 = (float)SLODWORD(a3) * a2;
      *(unsigned char *)(*v15 + v14++) = (int)*(float *)&a3;
    }
    while (v13 != v14);
    LODWORD(v3) = *(_DWORD *)(result + 52);
    uint64_t v16 = (*(_DWORD *)(result + 48) * v3);
    if ((int)v16 >= 1)
    {
      uint64_t v17 = 0;
      int v18 = *(void **)(result + 2520);
      do
      {
        LOBYTE(a3) = *(unsigned char *)(*v18 + v17);
        *(void *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
        *(float *)&a3 = (float)SLODWORD(a3) * a2;
        *(unsigned char *)(*v18 + v17++) = (int)*(float *)&a3;
      }
      while (v16 != v17);
      LODWORD(v3) = *(_DWORD *)(result + 52);
      uint64_t v19 = (*(_DWORD *)(result + 48) * v3);
      if ((int)v19 >= 1)
      {
        uint64_t v20 = 0;
        uint64_t v21 = *(void **)(result + 2528);
        do
        {
          LOBYTE(a3) = *(unsigned char *)(*v21 + v20);
          *(void *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
          *(float *)&a3 = (float)SLODWORD(a3) * a2;
          *(unsigned char *)(*v21 + v20++) = (int)*(float *)&a3;
        }
        while (v19 != v20);
        LODWORD(v3) = *(_DWORD *)(result + 52);
      }
    }
  }
LABEL_26:
  if (v3)
  {
    uint64_t v22 = 0;
    float v23 = *(void **)(result + 2536);
    uint64_t v24 = (v3 * v3);
    do
    {
      LOBYTE(a3) = *(unsigned char *)(*v23 + v22);
      *(void *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
      *(float *)&a3 = (float)SLODWORD(a3) * a2;
      *(unsigned char *)(*v23 + v22++) = (int)*(float *)&a3;
    }
    while (v24 != v22);
    int v25 = *(_DWORD *)(result + 52);
    if (v25)
    {
      uint64_t v26 = 0;
      float v27 = *(void **)(result + 2544);
      uint64_t v28 = (v25 * v25);
      do
      {
        LOBYTE(a3) = *(unsigned char *)(*v27 + v26);
        *(void *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
        *(float *)&a3 = (float)SLODWORD(a3) * a2;
        *(unsigned char *)(*v27 + v26++) = (int)*(float *)&a3;
      }
      while (v28 != v26);
      int v29 = *(_DWORD *)(result + 52);
      if (v29)
      {
        uint64_t v30 = 0;
        float v31 = *(void **)(result + 2552);
        uint64_t v32 = (v29 * v29);
        do
        {
          LOBYTE(a3) = *(unsigned char *)(*v31 + v30);
          *(void *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
          *(float *)&a3 = (float)SLODWORD(a3) * a2;
          *(unsigned char *)(*v31 + v30++) = (int)*(float *)&a3;
        }
        while (v32 != v30);
        int v33 = *(_DWORD *)(result + 52);
        if (v33)
        {
          uint64_t v34 = 0;
          float v35 = *(void **)(result + 2560);
          uint64_t v36 = (v33 * v33);
          do
          {
            LOBYTE(a3) = *(unsigned char *)(*v35 + v34);
            *(void *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
            *(float *)&a3 = (float)SLODWORD(a3) * a2;
            *(unsigned char *)(*v35 + v34++) = (int)*(float *)&a3;
          }
          while (v36 != v34);
        }
      }
    }
  }
  return result;
}

uint64_t sub_19E1EFCE0(uint64_t result)
{
  if (*(int *)(result + 2688) >= 1) {
    operator new();
  }
  return result;
}

void sub_19E1EFFE8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E1EFFFC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

int *sub_19E1F0010(int *result, uint64_t *a2, int a3, int *a4)
{
  if (result[672] >= 1)
  {
    uint64_t v6 = result;
    int v7 = 0;
    int v8 = *a4;
    uint64_t v9 = 8 * a3;
    do
    {
      uint64_t v10 = v6[13];
      uint64_t v11 = *(void *)(*((void *)v6 + 20) + v9);
      uint64_t v12 = 4 * (int)v10 * v7;
      uint64_t v13 = *a2;
      *(_DWORD *)(v13 + 16 * v8) = v10;
      memmove(**(void ***)(v13 + 16 * *a4 + 8), (const void *)(v11 + v12), 4 * v10);
      uint64_t v14 = *a4;
      *a4 = v14 + 1;
      float v15 = (const void *)(*(void *)(*((void *)v6 + 23) + v9) + v12);
      uint64_t v16 = v6[13];
      uint64_t v17 = *a2;
      *(_DWORD *)(*a2 + 16 * v14 + 16) = v16;
      uint64_t result = (int *)memmove(**(void ***)(v17 + 16 * *a4 + 8), v15, 4 * v16);
      int v8 = *a4 + 1;
      *a4 = v8;
      ++v7;
    }
    while (v7 < v6[672]);
  }
  return result;
}

int *sub_19E1F00FC(int *result, void *a2, int a3, int *a4)
{
  if (result[672] >= 1)
  {
    uint64_t v6 = result;
    int v7 = 0;
    uint64_t v8 = 8 * a3;
    do
    {
      uint64_t v9 = 4 * v6[13] * v7;
      uint64_t v10 = (void *)(*(void *)(*((void *)v6 + 20) + v8) + v9);
      uint64_t v11 = (void *)(*(void *)(*((void *)v6 + 23) + v8) + v9);
      uint64_t v12 = *a4;
      *a4 = v12 + 1;
      memmove(v10, **(const void ***)(*a2 + 16 * v12 + 8), 4 * v6[13]);
      uint64_t v13 = *a4;
      *a4 = v13 + 1;
      uint64_t result = (int *)memmove(v11, **(const void ***)(*a2 + 16 * v13 + 8), 4 * v6[13]);
      ++v7;
    }
    while (v7 < v6[672]);
  }
  return result;
}

void sub_19E1F01D4(uint64_t a1, void *a2, int *a3)
{
  if (*(int *)(a1 + 2688) >= 1)
  {
    int v6 = 0;
    int v7 = *a3;
    do
    {
      bzero(**(void ***)(*a2 + 16 * v7 + 8), 4 * *(int *)(*a2 + 16 * v7));
      uint64_t v8 = *a3;
      *a3 = v8 + 1;
      bzero(**(void ***)(*a2 + 16 * v8 + 24), 4 * *(int *)(*a2 + 16 * v8 + 16));
      int v7 = *a3 + 1;
      *a3 = v7;
      ++v6;
    }
    while (v6 < *(_DWORD *)(a1 + 2688));
  }
}

void sub_19E1F0278(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 2692))
  {
    uint64_t v2 = *(void *)(a1 + 1552);
    BYTE7(v18[2]) = 18;
    strcpy((char *)v18, "LSTM before reseLSTM before reset ");
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v2 + 40))(v2, &v18[1]);
    if (SBYTE7(v18[2]) < 0) {
      operator delete(*(void **)&v18[1]);
    }
    uint64_t v3 = *(void *)(a1 + 1560);
    BYTE7(v18[2]) = 18;
    strcpy((char *)&v18[2], "t ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v3 + 40))(v3, &v18[1]);
    if (SBYTE7(v18[2]) < 0) {
      operator delete(*(void **)&v18[1]);
    }
    uint64_t v4 = *(void *)(a1 + 1568);
    BYTE7(v18[2]) = 18;
    strcpy((char *)&v18[2], "t ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v4 + 40))(v4, &v18[1]);
    if (SBYTE7(v18[2]) < 0) {
      operator delete(*(void **)&v18[1]);
    }
    uint64_t v5 = *(void *)(a1 + 1576);
    BYTE7(v18[2]) = 18;
    strcpy((char *)&v18[2], "t ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v5 + 40))(v5, &v18[1]);
    if (SBYTE7(v18[2]) < 0) {
      operator delete(*(void **)&v18[1]);
    }
    uint64_t v6 = *(void *)(a1 + 1584);
    BYTE7(v18[2]) = 18;
    strcpy((char *)&v18[2], "t ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v6 + 40))(v6, &v18[1]);
    if (SBYTE7(v18[2]) < 0) {
      operator delete(*(void **)&v18[1]);
    }
    uint64_t v7 = *(void *)(a1 + 1592);
    BYTE7(v18[2]) = 18;
    strcpy((char *)&v18[2], "t ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v7 + 40))(v7, &v18[1]);
    if (SBYTE7(v18[2]) < 0) {
      operator delete(*(void **)&v18[1]);
    }
    uint64_t v8 = *(void *)(a1 + 1600);
    BYTE7(v18[2]) = 18;
    strcpy((char *)&v18[2], "t ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v8 + 40))(v8, &v18[1]);
    if (SBYTE7(v18[2]) < 0) {
      operator delete(*(void **)&v18[1]);
    }
    uint64_t v9 = *(void *)(a1 + 1608);
    BYTE7(v18[2]) = 18;
    strcpy((char *)&v18[2], "t ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v9 + 40))(v9, &v18[1]);
    if (SBYTE7(v18[2]) < 0) {
      operator delete(*(void **)&v18[1]);
    }
    (*(void (**)(void))(**(void **)(a1 + 1552) + 16))(*(void *)(a1 + 1552));
    (*(void (**)(void))(**(void **)(a1 + 1560) + 16))(*(void *)(a1 + 1560));
    (*(void (**)(void))(**(void **)(a1 + 1568) + 16))(*(void *)(a1 + 1568));
    (*(void (**)(void))(**(void **)(a1 + 1576) + 16))(*(void *)(a1 + 1576));
    (*(void (**)(void))(**(void **)(a1 + 1584) + 16))(*(void *)(a1 + 1584));
    (*(void (**)(void))(**(void **)(a1 + 1592) + 16))(*(void *)(a1 + 1592));
    (*(void (**)(void))(**(void **)(a1 + 1600) + 16))(*(void *)(a1 + 1600));
    (*(void (**)(void))(**(void **)(a1 + 1608) + 16))(*(void *)(a1 + 1608));
    uint64_t v10 = *(void *)(a1 + 1552);
    BYTE7(v18[2]) = 17;
    strcpy((char *)v18, "LSTM AFTER resetLSTM AFTER reset ");
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v10 + 40))(v10, &v18[1]);
    if (SBYTE7(v18[2]) < 0) {
      operator delete(*(void **)&v18[1]);
    }
    uint64_t v11 = *(void *)(a1 + 1560);
    BYTE7(v18[2]) = 17;
    strcpy((char *)&v18[2], " ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v11 + 40))(v11, &v18[1]);
    if (SBYTE7(v18[2]) < 0) {
      operator delete(*(void **)&v18[1]);
    }
    uint64_t v12 = *(void *)(a1 + 1568);
    BYTE7(v18[2]) = 17;
    strcpy((char *)&v18[2], " ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v12 + 40))(v12, &v18[1]);
    if (SBYTE7(v18[2]) < 0) {
      operator delete(*(void **)&v18[1]);
    }
    uint64_t v13 = *(void *)(a1 + 1576);
    BYTE7(v18[2]) = 17;
    strcpy((char *)&v18[2], " ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v13 + 40))(v13, &v18[1]);
    if (SBYTE7(v18[2]) < 0) {
      operator delete(*(void **)&v18[1]);
    }
    uint64_t v14 = *(void *)(a1 + 1584);
    BYTE7(v18[2]) = 17;
    strcpy((char *)&v18[2], " ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v14 + 40))(v14, &v18[1]);
    if (SBYTE7(v18[2]) < 0) {
      operator delete(*(void **)&v18[1]);
    }
    uint64_t v15 = *(void *)(a1 + 1592);
    BYTE7(v18[2]) = 17;
    strcpy((char *)&v18[2], " ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v15 + 40))(v15, &v18[1]);
    if (SBYTE7(v18[2]) < 0) {
      operator delete(*(void **)&v18[1]);
    }
    uint64_t v16 = *(void *)(a1 + 1600);
    BYTE7(v18[2]) = 17;
    strcpy((char *)&v18[2], " ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v16 + 40))(v16, &v18[1]);
    if (SBYTE7(v18[2]) < 0) {
      operator delete(*(void **)&v18[1]);
    }
    uint64_t v17 = *(void *)(a1 + 1608);
    BYTE7(v18[2]) = 17;
    strcpy((char *)&v18[2], " ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v17 + 40))(v17, &v18[1]);
    if (SBYTE7(v18[2]) < 0) {
      operator delete(*(void **)&v18[1]);
    }
  }
}

void sub_19E1F0968(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E1F09C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = **(void **)(a1 + 2504);
  int v6 = *(_DWORD *)(a1 + 48);
  unsigned int v5 = *(_DWORD *)(a1 + 52);
  uint64_t v8 = *(void **)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  if ((unint64_t)v8 >= v7)
  {
    uint64_t v10 = *(void **)a2;
    uint64_t v11 = (uint64_t)v8 - *(void *)a2;
    unint64_t v12 = (v11 >> 4) + 1;
    if (v12 >> 60) {
      goto LABEL_134;
    }
    uint64_t v13 = v7 - (void)v10;
    if (v13 >> 3 > v12) {
      unint64_t v12 = v13 >> 3;
    }
    BOOL v14 = (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14) {
      unint64_t v15 = v12;
    }
    if (v15 >> 60) {
      goto LABEL_135;
    }
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (char *)operator new(16 * v15);
    int v18 = &v17[16 * (v11 >> 4)];
    *(void *)int v18 = v4;
    uint64_t v9 = v18 + 16;
    uint64_t v19 = &v17[v11];
    *((_DWORD *)v19 + 2) = v5;
    for (*((_DWORD *)v19 + 3) = v6; v8 != v10; *((void *)v18 + 1) = v8[1])
    {
      uint64_t v20 = *(v8 - 2);
      v8 -= 2;
      *((void *)v18 - 2) = v20;
      v18 -= 16;
    }
    *(void *)a2 = v18;
    *(void *)(a2 + 8) = v9;
    *(void *)(a2 + 16) = &v17[v16];
    if (v10)
    {
      operator delete(v10);
      int v6 = *(_DWORD *)(a1 + 48);
      unsigned int v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    *uint64_t v8 = v4;
    uint64_t v9 = v8 + 2;
    *((_DWORD *)v8 + 2) = v5;
    *((_DWORD *)v8 + 3) = v6;
  }
  *(void *)(a2 + 8) = v9;
  uint64_t v21 = **(void **)(a1 + 2512);
  unint64_t v22 = *(void *)(a2 + 16);
  if ((unint64_t)v9 >= v22)
  {
    uint64_t v24 = *(void **)a2;
    uint64_t v25 = (uint64_t)v9 - *(void *)a2;
    unint64_t v26 = (v25 >> 4) + 1;
    if (v26 >> 60) {
      goto LABEL_134;
    }
    uint64_t v27 = v22 - (void)v24;
    if (v27 >> 3 > v26) {
      unint64_t v26 = v27 >> 3;
    }
    BOOL v14 = (unint64_t)v27 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v28 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14) {
      unint64_t v28 = v26;
    }
    if (v28 >> 60) {
      goto LABEL_135;
    }
    uint64_t v29 = 16 * v28;
    uint64_t v30 = (char *)operator new(16 * v28);
    float v31 = &v30[16 * (v25 >> 4)];
    *(void *)float v31 = v21;
    float v23 = v31 + 16;
    uint64_t v32 = &v30[v25];
    *((_DWORD *)v32 + 2) = v5;
    for (*((_DWORD *)v32 + 3) = v6; v9 != v24; *((void *)v31 + 1) = v9[1])
    {
      uint64_t v33 = *(v9 - 2);
      v9 -= 2;
      *((void *)v31 - 2) = v33;
      v31 -= 16;
    }
    *(void *)a2 = v31;
    *(void *)(a2 + 8) = v23;
    *(void *)(a2 + 16) = &v30[v29];
    if (v24)
    {
      operator delete(v24);
      int v6 = *(_DWORD *)(a1 + 48);
      unsigned int v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    *uint64_t v9 = v21;
    float v23 = v9 + 2;
    *((_DWORD *)v9 + 2) = v5;
    *((_DWORD *)v9 + 3) = v6;
  }
  *(void *)(a2 + 8) = v23;
  uint64_t v34 = **(void **)(a1 + 2528);
  unint64_t v35 = *(void *)(a2 + 16);
  if ((unint64_t)v23 >= v35)
  {
    uint64_t v37 = *(void **)a2;
    uint64_t v38 = (uint64_t)v23 - *(void *)a2;
    unint64_t v39 = (v38 >> 4) + 1;
    if (v39 >> 60) {
      goto LABEL_134;
    }
    uint64_t v40 = v35 - (void)v37;
    if (v40 >> 3 > v39) {
      unint64_t v39 = v40 >> 3;
    }
    BOOL v14 = (unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v41 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14) {
      unint64_t v41 = v39;
    }
    if (v41 >> 60) {
      goto LABEL_135;
    }
    uint64_t v42 = 16 * v41;
    uint64_t v43 = (char *)operator new(16 * v41);
    uint64_t v44 = &v43[16 * (v38 >> 4)];
    *(void *)uint64_t v44 = v34;
    uint64_t v36 = v44 + 16;
    float v45 = &v43[v38];
    *((_DWORD *)v45 + 2) = v5;
    for (*((_DWORD *)v45 + 3) = v6; v23 != v37; *((void *)v44 + 1) = v23[1])
    {
      uint64_t v46 = *(v23 - 2);
      v23 -= 2;
      *((void *)v44 - 2) = v46;
      v44 -= 16;
    }
    *(void *)a2 = v44;
    *(void *)(a2 + 8) = v36;
    *(void *)(a2 + 16) = &v43[v42];
    if (v37)
    {
      operator delete(v37);
      int v6 = *(_DWORD *)(a1 + 48);
      unsigned int v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    *float v23 = v34;
    uint64_t v36 = v23 + 2;
    *((_DWORD *)v23 + 2) = v5;
    *((_DWORD *)v23 + 3) = v6;
  }
  *(void *)(a2 + 8) = v36;
  uint64_t v47 = **(void **)(a1 + 2520);
  unint64_t v48 = *(void *)(a2 + 16);
  if ((unint64_t)v36 >= v48)
  {
    float v50 = *(void **)a2;
    uint64_t v51 = (uint64_t)v36 - *(void *)a2;
    unint64_t v52 = (v51 >> 4) + 1;
    if (v52 >> 60) {
      goto LABEL_134;
    }
    uint64_t v53 = v48 - (void)v50;
    if (v53 >> 3 > v52) {
      unint64_t v52 = v53 >> 3;
    }
    BOOL v14 = (unint64_t)v53 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v54 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14) {
      unint64_t v54 = v52;
    }
    if (v54 >> 60) {
      goto LABEL_135;
    }
    uint64_t v55 = 16 * v54;
    uint64_t v56 = (char *)operator new(16 * v54);
    int v57 = &v56[16 * (v51 >> 4)];
    *(void *)int v57 = v47;
    uint64_t v49 = v57 + 16;
    uint64_t v58 = &v56[v51];
    *((_DWORD *)v58 + 2) = v5;
    for (*((_DWORD *)v58 + 3) = v6; v36 != v50; *((void *)v57 + 1) = v36[1])
    {
      uint64_t v59 = *(v36 - 2);
      v36 -= 2;
      *((void *)v57 - 2) = v59;
      v57 -= 16;
    }
    *(void *)a2 = v57;
    *(void *)(a2 + 8) = v49;
    *(void *)(a2 + 16) = &v56[v55];
    if (v50)
    {
      operator delete(v50);
      unsigned int v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    void *v36 = v47;
    uint64_t v49 = v36 + 2;
    *((_DWORD *)v36 + 2) = v5;
    *((_DWORD *)v36 + 3) = v6;
  }
  *(void *)(a2 + 8) = v49;
  uint64_t v60 = **(void **)(a1 + 2536);
  unint64_t v61 = *(void *)(a2 + 16);
  if ((unint64_t)v49 >= v61)
  {
    int v63 = *(void **)a2;
    uint64_t v64 = (uint64_t)v49 - *(void *)a2;
    unint64_t v65 = (v64 >> 4) + 1;
    if (v65 >> 60) {
      goto LABEL_134;
    }
    uint64_t v66 = v61 - (void)v63;
    if (v66 >> 3 > v65) {
      unint64_t v65 = v66 >> 3;
    }
    BOOL v14 = (unint64_t)v66 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v67 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14) {
      unint64_t v67 = v65;
    }
    if (v67 >> 60) {
      goto LABEL_135;
    }
    uint64_t v68 = 16 * v67;
    uint64_t v69 = (char *)operator new(16 * v67);
    uint64_t v70 = &v69[16 * (v64 >> 4)];
    *(void *)uint64_t v70 = v60;
    int v62 = v70 + 16;
    for (*(int32x2_t *)&v69[v64 + 8] = vdup_n_s32(v5); v49 != v63; *((void *)v70 + 1) = v49[1])
    {
      uint64_t v71 = *(v49 - 2);
      v49 -= 2;
      *((void *)v70 - 2) = v71;
      v70 -= 16;
    }
    *(void *)a2 = v70;
    *(void *)(a2 + 8) = v62;
    *(void *)(a2 + 16) = &v69[v68];
    if (v63)
    {
      operator delete(v63);
      unsigned int v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    *uint64_t v49 = v60;
    int v62 = v49 + 2;
    *((_DWORD *)v49 + 2) = v5;
    *((_DWORD *)v49 + 3) = v5;
  }
  *(void *)(a2 + 8) = v62;
  uint64_t v72 = **(void **)(a1 + 2544);
  unint64_t v73 = *(void *)(a2 + 16);
  if ((unint64_t)v62 >= v73)
  {
    uint64_t v75 = *(void **)a2;
    uint64_t v76 = (uint64_t)v62 - *(void *)a2;
    unint64_t v77 = (v76 >> 4) + 1;
    if (v77 >> 60) {
      goto LABEL_134;
    }
    uint64_t v78 = v73 - (void)v75;
    if (v78 >> 3 > v77) {
      unint64_t v77 = v78 >> 3;
    }
    BOOL v14 = (unint64_t)v78 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v79 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14) {
      unint64_t v79 = v77;
    }
    if (v79 >> 60) {
      goto LABEL_135;
    }
    uint64_t v80 = 16 * v79;
    uint64_t v81 = (char *)operator new(16 * v79);
    uint64_t v82 = &v81[16 * (v76 >> 4)];
    *(void *)uint64_t v82 = v72;
    int v74 = v82 + 16;
    for (*(int32x2_t *)&v81[v76 + 8] = vdup_n_s32(v5); v62 != v75; *((void *)v82 + 1) = v62[1])
    {
      uint64_t v83 = *(v62 - 2);
      v62 -= 2;
      *((void *)v82 - 2) = v83;
      v82 -= 16;
    }
    *(void *)a2 = v82;
    *(void *)(a2 + 8) = v74;
    *(void *)(a2 + 16) = &v81[v80];
    if (v75)
    {
      operator delete(v75);
      unsigned int v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    *int v62 = v72;
    int v74 = v62 + 2;
    *((_DWORD *)v62 + 2) = v5;
    *((_DWORD *)v62 + 3) = v5;
  }
  *(void *)(a2 + 8) = v74;
  uint64_t v84 = **(void **)(a1 + 2560);
  unint64_t v85 = *(void *)(a2 + 16);
  if ((unint64_t)v74 >= v85)
  {
    uint64_t v87 = *(void **)a2;
    uint64_t v88 = (uint64_t)v74 - *(void *)a2;
    unint64_t v89 = (v88 >> 4) + 1;
    if (v89 >> 60) {
      goto LABEL_134;
    }
    uint64_t v90 = v85 - (void)v87;
    if (v90 >> 3 > v89) {
      unint64_t v89 = v90 >> 3;
    }
    BOOL v14 = (unint64_t)v90 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v91 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14) {
      unint64_t v91 = v89;
    }
    if (v91 >> 60) {
      goto LABEL_135;
    }
    uint64_t v92 = 16 * v91;
    unint64_t v93 = (char *)operator new(16 * v91);
    unint64_t v94 = &v93[16 * (v88 >> 4)];
    *(void *)unint64_t v94 = v84;
    uint64_t v86 = v94 + 16;
    for (*(int32x2_t *)&v93[v88 + 8] = vdup_n_s32(v5); v74 != v87; *((void *)v94 + 1) = v74[1])
    {
      uint64_t v95 = *(v74 - 2);
      v74 -= 2;
      *((void *)v94 - 2) = v95;
      v94 -= 16;
    }
    *(void *)a2 = v94;
    *(void *)(a2 + 8) = v86;
    *(void *)(a2 + 16) = &v93[v92];
    if (v87)
    {
      operator delete(v87);
      unsigned int v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    *int v74 = v84;
    uint64_t v86 = v74 + 2;
    *((_DWORD *)v74 + 2) = v5;
    *((_DWORD *)v74 + 3) = v5;
  }
  *(void *)(a2 + 8) = v86;
  uint64_t v96 = **(void **)(a1 + 2552);
  unint64_t v97 = *(void *)(a2 + 16);
  if ((unint64_t)v86 >= v97)
  {
    float32x4_t v99 = *(void **)a2;
    uint64_t v100 = (uint64_t)v86 - *(void *)a2;
    unint64_t v101 = (v100 >> 4) + 1;
    if (v101 >> 60) {
      goto LABEL_134;
    }
    uint64_t v102 = v97 - (void)v99;
    if (v102 >> 3 > v101) {
      unint64_t v101 = v102 >> 3;
    }
    BOOL v14 = (unint64_t)v102 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v103 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14) {
      unint64_t v103 = v101;
    }
    if (v103 >> 60) {
      goto LABEL_135;
    }
    uint64_t v104 = 16 * v103;
    int v105 = (char *)operator new(16 * v103);
    BOOL v106 = &v105[16 * (v100 >> 4)];
    *(void *)BOOL v106 = v96;
    uint64_t v98 = v106 + 16;
    for (*(int32x2_t *)&v105[v100 + 8] = vdup_n_s32(v5); v86 != v99; *((void *)v106 + 1) = v86[1])
    {
      uint64_t v107 = *(v86 - 2);
      v86 -= 2;
      *((void *)v106 - 2) = v107;
      v106 -= 16;
    }
    *(void *)a2 = v106;
    *(void *)(a2 + 8) = v98;
    *(void *)(a2 + 16) = &v105[v104];
    if (v99)
    {
      operator delete(v99);
      unsigned int v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    void *v86 = v96;
    uint64_t v98 = v86 + 2;
    *((_DWORD *)v86 + 2) = v5;
    *((_DWORD *)v86 + 3) = v5;
  }
  *(void *)(a2 + 8) = v98;
  uint64_t v108 = **(void **)(a1 + 2568);
  unint64_t v109 = *(void *)(a2 + 16);
  if ((unint64_t)v98 >= v109)
  {
    uint64_t v111 = *(void **)a2;
    uint64_t v112 = (uint64_t)v98 - *(void *)a2;
    unint64_t v113 = (v112 >> 4) + 1;
    if (v113 >> 60) {
      goto LABEL_134;
    }
    uint64_t v114 = v109 - (void)v111;
    if (v114 >> 3 > v113) {
      unint64_t v113 = v114 >> 3;
    }
    BOOL v14 = (unint64_t)v114 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v115 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14) {
      unint64_t v115 = v113;
    }
    if (v115 >> 60) {
      goto LABEL_135;
    }
    uint64_t v116 = 16 * v115;
    uint64_t v117 = (char *)operator new(16 * v115);
    unint64_t v118 = &v117[16 * (v112 >> 4)];
    *(void *)unint64_t v118 = v108;
    uint64_t v110 = v118 + 16;
    uint64_t v119 = &v117[v112];
    *((_DWORD *)v119 + 2) = v5;
    for (*((_DWORD *)v119 + 3) = 0; v98 != v111; *((void *)v118 + 1) = v98[1])
    {
      uint64_t v120 = *(v98 - 2);
      v98 -= 2;
      *((void *)v118 - 2) = v120;
      v118 -= 16;
    }
    *(void *)a2 = v118;
    *(void *)(a2 + 8) = v110;
    *(void *)(a2 + 16) = &v117[v116];
    if (v111)
    {
      operator delete(v111);
      unsigned int v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    *uint64_t v98 = v108;
    uint64_t v110 = v98 + 2;
    *((_DWORD *)v98 + 2) = v5;
    *((_DWORD *)v98 + 3) = 0;
  }
  *(void *)(a2 + 8) = v110;
  uint64_t v121 = **(void **)(a1 + 2576);
  unint64_t v122 = *(void *)(a2 + 16);
  if ((unint64_t)v110 < v122)
  {
    void *v110 = v121;
    uint64_t v123 = v110 + 2;
    *((_DWORD *)v110 + 2) = v5;
    *((_DWORD *)v110 + 3) = 0;
    goto LABEL_121;
  }
  unint64_t v124 = *(void **)a2;
  uint64_t v125 = (uint64_t)v110 - *(void *)a2;
  unint64_t v126 = (v125 >> 4) + 1;
  if (v126 >> 60) {
    goto LABEL_134;
  }
  uint64_t v127 = v122 - (void)v124;
  if (v127 >> 3 > v126) {
    unint64_t v126 = v127 >> 3;
  }
  BOOL v14 = (unint64_t)v127 >= 0x7FFFFFFFFFFFFFF0;
  unint64_t v128 = 0xFFFFFFFFFFFFFFFLL;
  if (!v14) {
    unint64_t v128 = v126;
  }
  if (v128 >> 60) {
LABEL_135:
  }
    sub_19E13C418();
  uint64_t v129 = 16 * v128;
  uint64_t v130 = (char *)operator new(16 * v128);
  long long v131 = &v130[16 * (v125 >> 4)];
  int v132 = &v130[v129];
  *(void *)long long v131 = v121;
  uint64_t v123 = v131 + 16;
  float32x4_t v133 = &v130[v125];
  *((_DWORD *)v133 + 2) = v5;
  for (*((_DWORD *)v133 + 3) = 0; v110 != v124; *((void *)v131 + 1) = v110[1])
  {
    uint64_t v134 = *(v110 - 2);
    v110 -= 2;
    *((void *)v131 - 2) = v134;
    v131 -= 16;
  }
  *(void *)a2 = v131;
  *(void *)(a2 + 8) = v123;
  *(void *)(a2 + 16) = v132;
  if (v124)
  {
    operator delete(v124);
    unsigned int v5 = *(_DWORD *)(a1 + 52);
  }
LABEL_121:
  *(void *)(a2 + 8) = v123;
  uint64_t v135 = **(void **)(a1 + 2584);
  unint64_t v136 = *(void *)(a2 + 16);
  if ((unint64_t)v123 < v136)
  {
    void *v123 = v135;
    int v137 = v123 + 2;
    *((_DWORD *)v123 + 2) = v5;
    *((_DWORD *)v123 + 3) = 0;
    goto LABEL_133;
  }
  uint64_t v138 = *(void **)a2;
  uint64_t v139 = (uint64_t)v123 - *(void *)a2;
  unint64_t v140 = (v139 >> 4) + 1;
  if (v140 >> 60) {
LABEL_134:
  }
    sub_19E13D694();
  uint64_t v141 = v136 - (void)v138;
  if (v141 >> 3 > v140) {
    unint64_t v140 = v141 >> 3;
  }
  BOOL v14 = (unint64_t)v141 >= 0x7FFFFFFFFFFFFFF0;
  unint64_t v142 = 0xFFFFFFFFFFFFFFFLL;
  if (!v14) {
    unint64_t v142 = v140;
  }
  if (v142 >> 60) {
    goto LABEL_135;
  }
  uint64_t v143 = 16 * v142;
  unint64_t v144 = (char *)operator new(16 * v142);
  uint64_t v145 = &v144[16 * (v139 >> 4)];
  unint64_t v146 = &v144[v143];
  *(void *)uint64_t v145 = v135;
  int v137 = v145 + 16;
  unint64_t v147 = &v144[v139];
  *((_DWORD *)v147 + 2) = v5;
  for (*((_DWORD *)v147 + 3) = 0; v123 != v138; *((void *)v145 + 1) = v123[1])
  {
    uint64_t v148 = *(v123 - 2);
    v123 -= 2;
    *((void *)v145 - 2) = v148;
    v145 -= 16;
  }
  *(void *)a2 = v145;
  *(void *)(a2 + 8) = v137;
  *(void *)(a2 + 16) = v146;
  if (v138) {
    operator delete(v138);
  }
LABEL_133:
  *(void *)(a2 + 8) = v137;
}

__n128 sub_19E1F128C(void *a1, uint64_t a2)
{
  uint64_t v2 = *(_OWORD **)(a2 + 8);
  uint64_t v3 = *((void *)v2-- - 2);
  a1[29] = v3;
  a1[313] = a1 + 29;
  *(void *)(a2 + 8) = v2;
  _OWORD *v2 = *(v2 - 1);
  a1[30] = *(void *)v2;
  a1[314] = a1 + 30;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v4 - 16;
  _OWORD *v2 = *(_OWORD *)(v4 - 32);
  a1[32] = *(void *)v2;
  a1[316] = a1 + 32;
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v5 - 16;
  _OWORD *v2 = *(_OWORD *)(v5 - 32);
  a1[31] = *(void *)v2;
  int v6 = a1 + 31;
  v6[284] = v6;
  uint64_t v7 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v7 - 16;
  _OWORD *v2 = *(_OWORD *)(v7 - 32);
  v6[2] = *(void *)v2;
  v6[286] = v6 + 2;
  uint64_t v8 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v8 - 16;
  _OWORD *v2 = *(_OWORD *)(v8 - 32);
  v6[3] = *(void *)v2;
  v6[287] = v6 + 3;
  uint64_t v9 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v9 - 16;
  _OWORD *v2 = *(_OWORD *)(v9 - 32);
  v6[5] = *(void *)v2;
  v6[289] = v6 + 5;
  uint64_t v10 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v10 - 16;
  _OWORD *v2 = *(_OWORD *)(v10 - 32);
  v6[4] = *(void *)v2;
  v6[288] = v6 + 4;
  uint64_t v11 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v11 - 16;
  _OWORD *v2 = *(_OWORD *)(v11 - 32);
  v6[6] = *(void *)v2;
  v6[290] = v6 + 6;
  uint64_t v12 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v12 - 16;
  _OWORD *v2 = *(_OWORD *)(v12 - 32);
  v6[7] = *(void *)v2;
  v6[291] = v6 + 7;
  uint64_t v13 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v13 - 16;
  __n128 result = *(__n128 *)(v13 - 32);
  _OWORD *v2 = result;
  v6[8] = *(void *)v2;
  v6[292] = v6 + 8;
  *(void *)(a2 + 8) -= 16;
  return result;
}

uint64_t sub_19E1F140C(uint64_t result)
{
  *(unsigned char *)(result + 42) = 1;
  return result;
}

uint64_t sub_19E1F1418(uint64_t result)
{
  *(unsigned char *)(result + 42) = 0;
  return result;
}

void sub_19E1F1420()
{
}

void sub_19E1F14A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E1F14C4(void *a1)
{
  uint64_t v2 = a1[329];
  uint64_t v3 = a1[328];
  if (v2 == v3)
  {
    uint64_t v3 = a1[329];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void **)(v3 + 8 * v4);
      if (v5)
      {
        operator delete[](v5);
        uint64_t v2 = a1[329];
        uint64_t v3 = a1[328];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  uint64_t v6 = a1[332];
  uint64_t v7 = a1[331];
  if (v6 != v7)
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(void **)(v7 + 8 * v8);
      if (v9)
      {
        operator delete[](v9);
        uint64_t v6 = a1[332];
        uint64_t v7 = a1[331];
      }
      ++v8;
    }
    while (v8 < (v6 - v7) >> 3);
    a1[329] = a1[328];
    a1[332] = v7;
    uint64_t v10 = a1[136];
    uint64_t v11 = a1[135];
    if (v10 != v11) {
      goto LABEL_13;
    }
LABEL_18:
    uint64_t v11 = v10;
    goto LABEL_19;
  }
  a1[329] = v3;
  a1[332] = v6;
  uint64_t v10 = a1[136];
  uint64_t v11 = a1[135];
  if (v10 == v11) {
    goto LABEL_18;
  }
LABEL_13:
  unint64_t v12 = 0;
  do
  {
    uint64_t v13 = *(void **)(v11 + 8 * v12);
    if (v13)
    {
      operator delete[](v13);
      uint64_t v10 = a1[136];
      uint64_t v11 = a1[135];
    }
    ++v12;
  }
  while (v12 < (v10 - v11) >> 3);
LABEL_19:
  a1[136] = v11;
  BOOL v14 = (void *)a1[133];
  if (v14)
  {
    operator delete(v14);
    a1[133] = 0;
  }
  unint64_t v15 = (void *)a1[132];
  if (v15)
  {
    operator delete(v15);
    a1[132] = 0;
  }
  uint64_t v16 = a1[166];
  uint64_t v17 = a1[165];
  if (v16 == v17)
  {
    uint64_t v17 = a1[166];
  }
  else
  {
    unint64_t v18 = 0;
    do
    {
      uint64_t v19 = *(void **)(v17 + 8 * v18);
      if (v19)
      {
        operator delete[](v19);
        uint64_t v16 = a1[166];
        uint64_t v17 = a1[165];
      }
      ++v18;
    }
    while (v18 < (v16 - v17) >> 3);
  }
  a1[166] = v17;
  uint64_t v20 = (void *)a1[163];
  if (v20)
  {
    operator delete(v20);
    a1[163] = 0;
  }
  uint64_t v21 = (void *)a1[162];
  if (v21)
  {
    operator delete(v21);
    a1[162] = 0;
  }
  uint64_t v22 = a1[151];
  uint64_t v23 = a1[150];
  if (v22 == v23)
  {
    uint64_t v23 = a1[151];
  }
  else
  {
    unint64_t v24 = 0;
    do
    {
      uint64_t v25 = *(void **)(v23 + 8 * v24);
      if (v25)
      {
        operator delete[](v25);
        uint64_t v22 = a1[151];
        uint64_t v23 = a1[150];
      }
      ++v24;
    }
    while (v24 < (v22 - v23) >> 3);
  }
  a1[151] = v23;
  unint64_t v26 = (void *)a1[148];
  if (v26)
  {
    operator delete(v26);
    a1[148] = 0;
  }
  uint64_t v27 = (void *)a1[147];
  if (v27)
  {
    operator delete(v27);
    a1[147] = 0;
  }
  uint64_t v28 = a1[181];
  uint64_t v29 = a1[180];
  if (v28 == v29)
  {
    uint64_t v29 = a1[181];
  }
  else
  {
    unint64_t v30 = 0;
    do
    {
      float v31 = *(void **)(v29 + 8 * v30);
      if (v31)
      {
        operator delete[](v31);
        uint64_t v28 = a1[181];
        uint64_t v29 = a1[180];
      }
      ++v30;
    }
    while (v30 < (v28 - v29) >> 3);
  }
  a1[181] = v29;
  uint64_t v32 = (void *)a1[178];
  if (v32)
  {
    operator delete(v32);
    a1[178] = 0;
  }
  uint64_t v33 = (void *)a1[177];
  if (v33)
  {
    operator delete(v33);
    a1[177] = 0;
  }
}

uint64_t sub_19E1F1730(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_19E1F1738(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

uint64_t sub_19E1F1744(uint64_t result, float a2, double a3)
{
  uint64_t v3 = result;
  unsigned int v4 = *(_DWORD *)(result + 52);
  int v5 = (int)a2;
  if (*(int *)(result + 56) < 1)
  {
    uint64_t v6 = v4 * *(_DWORD *)(result + 48);
    if ((int)v6 >= 1)
    {
      uint64_t v7 = 0;
      float v8 = (float)v5;
      do
      {
        uint64_t v9 = *(void *)(result + 232);
        LOBYTE(a3) = *(unsigned char *)(v9 + v7);
        *(void *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
        *(float *)&a3 = (float)SLODWORD(a3) + (float)(*(float *)(*(void *)(result + 1464) + 4 * v7) * v8);
        *(unsigned char *)(v9 + v7++) = (int)*(float *)&a3;
      }
      while (v6 != v7);
      for (uint64_t i = 0; i != v6; ++i)
      {
        uint64_t v11 = *(void *)(result + 248);
        LOBYTE(a3) = *(unsigned char *)(v11 + i);
        *(void *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
        *(float *)&a3 = (float)SLODWORD(a3) + (float)(*(float *)(*(void *)(result + 1480) + 4 * i) * v8);
        *(unsigned char *)(v11 + i) = (int)*(float *)&a3;
      }
      for (uint64_t j = 0; j != v6; ++j)
      {
        uint64_t v13 = *(void *)(result + 240);
        LOBYTE(a3) = *(unsigned char *)(v13 + j);
        *(void *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
        *(float *)&a3 = (float)SLODWORD(a3) + (float)(*(float *)(*(void *)(result + 1472) + 4 * j) * v8);
        *(unsigned char *)(v13 + j) = (int)*(float *)&a3;
      }
      for (uint64_t k = 0; k != v6; ++k)
      {
        uint64_t v15 = *(void *)(result + 256);
        LOBYTE(a3) = *(unsigned char *)(v15 + k);
        *(void *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
        *(float *)&a3 = (float)SLODWORD(a3) + (float)(*(float *)(*(void *)(result + 1488) + 4 * k) * v8);
        *(unsigned char *)(v15 + k) = (int)*(float *)&a3;
      }
    }
  }
  else
  {
    sub_19E1F4230(result + 984, (float)v5, result + 232, v4);
    sub_19E1F4230(v3 + 1224, (float)v5, v3 + 248, *(_DWORD *)(v3 + 52));
    sub_19E1F4230(v3 + 1104, (float)v5, v3 + 240, *(_DWORD *)(v3 + 52));
    __n128 result = sub_19E1F4230(v3 + 1344, (float)v5, v3 + 256, *(_DWORD *)(v3 + 52));
  }
  if (v4)
  {
    uint64_t v16 = 0;
    uint64_t v17 = v4 * v4;
    float v18 = (float)v5;
    do
    {
      uint64_t v19 = *(void *)(v3 + 264);
      LOBYTE(a3) = *(unsigned char *)(v19 + v16);
      *(void *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
      *(float *)&a3 = (float)SLODWORD(a3) + (float)(*(float *)(*(void *)(v3 + 1496) + 4 * v16) * v18);
      *(unsigned char *)(v19 + v16++) = (int)*(float *)&a3;
    }
    while (v17 != v16);
    uint64_t v20 = 0;
    do
    {
      uint64_t v21 = *(void *)(v3 + 280);
      LOBYTE(a3) = *(unsigned char *)(v21 + v20);
      *(void *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
      *(float *)&a3 = (float)SLODWORD(a3) + (float)(*(float *)(*(void *)(v3 + 1512) + 4 * v20) * v18);
      *(unsigned char *)(v21 + v20++) = (int)*(float *)&a3;
    }
    while (v17 != v20);
    uint64_t v22 = 0;
    do
    {
      uint64_t v23 = *(void *)(v3 + 272);
      LOBYTE(a3) = *(unsigned char *)(v23 + v22);
      *(void *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
      *(float *)&a3 = (float)SLODWORD(a3) + (float)(*(float *)(*(void *)(v3 + 1504) + 4 * v22) * v18);
      *(unsigned char *)(v23 + v22++) = (int)*(float *)&a3;
    }
    while (v17 != v22);
    uint64_t v24 = 0;
    do
    {
      uint64_t v25 = *(void *)(v3 + 288);
      LOBYTE(a3) = *(unsigned char *)(v25 + v24);
      *(void *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
      *(float *)&a3 = (float)SLODWORD(a3) + (float)(*(float *)(*(void *)(v3 + 1520) + 4 * v24) * v18);
      *(unsigned char *)(v25 + v24++) = (int)*(float *)&a3;
    }
    while (v17 != v24);
    uint64_t v26 = *(unsigned int *)(v3 + 52);
    if ((int)v26 < 1) {
      return result;
    }
  }
  else
  {
    float v18 = (float)v5;
    uint64_t v26 = *(unsigned int *)(v3 + 52);
    if ((int)v26 < 1) {
      return result;
    }
  }
  for (uint64_t m = 0; m != v26; ++m)
    *(unsigned char *)(*(void *)(v3 + 296) + m) += (int)(float)(*(float *)(*(void *)(v3 + 1528) + 4 * m) * v18);
  uint64_t v28 = *(unsigned int *)(v3 + 52);
  if ((int)v28 >= 1)
  {
    for (uint64_t n = 0; n != v28; ++n)
      *(unsigned char *)(*(void *)(v3 + 312) + n) += (int)(float)(*(float *)(*(void *)(v3 + 1544) + 4 * n) * v18);
    uint64_t v30 = *(unsigned int *)(v3 + 52);
    if ((int)v30 >= 1)
    {
      for (iuint64_t i = 0; ii != v30; ++ii)
        *(unsigned char *)(*(void *)(v3 + 304) + ii) += (int)(float)(*(float *)(*(void *)(v3 + 1536) + 4 * ii) * v18);
    }
  }
  return result;
}

void sub_19E1F1A84(uint64_t a1, uint64_t a2, void *a3, void *a4, int a5)
{
  int v652 = a5 - 1;
  if (a5 >= 1)
  {
    v638 = (void **)(a1 + 1648);
    uint64_t v6 = (void **)(a1 + 1656);
    v646 = (float **)(a1 + 1672);
    v647 = (void **)(a1 + 1640);
    v643 = (float **)(a1 + 1680);
    v645 = (void **)(a1 + 1664);
    v642 = (void **)(a1 + 1688);
    int v7 = a5 - 1;
    v634 = (void **)(a1 + 1656);
    do
    {
      int v8 = v652 - v7;
      int v641 = v7;
      if (*(unsigned char *)(a1 + 2672))
      {
        BOOL v9 = v8 < v652;
      }
      else
      {
        int v8 = v7;
        BOOL v9 = v7 > 0;
      }
      BOOL v649 = v9;
      if (*(unsigned char *)(a1 + 2672)) {
        BOOL v10 = v8 > 0;
      }
      else {
        BOOL v10 = v8 < v652;
      }
      if (*(unsigned char *)(a1 + 2672)) {
        int v11 = v8 - 1;
      }
      else {
        int v11 = v8 + 1;
      }
      if (*(unsigned char *)(a1 + 2672)) {
        int v12 = v8 + 1;
      }
      else {
        int v12 = v8 - 1;
      }
      int v637 = v12;
      uint64_t v13 = v8;
      memmove(*(void **)(*(void *)(a1 + 840) + 8 * v8), *(const void **)(*a4 + 8 * v8), 4 * *(int *)(a1 + 52));
      uint64_t v14 = v13;
      uint64_t v15 = 8 * v13;
      BOOL v640 = v10;
      if (v10)
      {
        uint64_t v16 = 8 * v11;
        sub_19E1F4438((float **)(*(void *)(a1 + 840) + v15), (void *)(*(void *)(a1 + 936) + v16), *(void **)(a1 + 2560), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1.0);
        sub_19E1F4438((float **)(*(void *)(a1 + 840) + v15), (void *)(*(void *)(a1 + 912) + v16), *(void **)(a1 + 2536), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1.0);
        sub_19E1F4438((float **)(*(void *)(a1 + 840) + v15), (void *)(*(void *)(a1 + 888) + v16), *(void **)(a1 + 2544), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1.0);
        sub_19E1F4438((float **)(*(void *)(a1 + 840) + v15), (void *)(*(void *)(a1 + 864) + v16), *(void **)(a1 + 2552), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1.0);
      }
      v656 = *(const void **)(*(void *)(a1 + 352) + 8 * v13);
      v655 = *(const void **)(*(void *)(a1 + 376) + 8 * v13);
      v654 = *(const void **)(*(void *)(a1 + 424) + 8 * v13);
      v653 = *(const void **)(*(void *)(a1 + 400) + 8 * v13);
      uint64_t v17 = *(float32x4_t **)(*(void *)(a1 + 448) + 8 * v13);
      float v18 = *(float32x4_t **)(*(void *)(a1 + 496) + v15);
      sub_19E1C7244(v647, &v653, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 736));
      sub_19E1C7244(v638, &v655, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 736));
      sub_19E1C7244(v6, &v656, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 736));
      sub_19E1C7520(v646, (const float **)&v654, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 740));
      sub_19E1C7244(v645, &v654, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 740));
      sub_19E1C7520(v643, (const float **)(*(void *)(a1 + 88) + v15), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 744));
      sub_19E1C7244(v642, (const void **)(*(void *)(a1 + 88) + v15), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 744));
      uint64_t v19 = *(void *)(a1 + 864);
      uint64_t v20 = *(void *)(a1 + 840);
      uint64_t v21 = *(int *)(a1 + 52);
      uint64_t v22 = 4 * v21;
      bzero(*(void **)(v19 + v15), 4 * v21);
      int v23 = (int)v21 / 8;
      if ((int)v21 >= 8)
      {
        uint64_t v24 = *(float32x4_t **)(v19 + v15);
        uint64_t v25 = *(float32x4_t **)(v20 + v15);
        uint64_t v26 = *v643;
        int v27 = (int)v21 / 8;
        uint64_t v28 = (float32x4_t *)*v647;
        do
        {
          float32x4_t v29 = *v28;
          float32x4_t v30 = v28[1];
          v28 += 2;
          float32x4_t v31 = *(float32x4_t *)v26;
          float32x4_t v32 = *(float32x4_t *)(v26 + 4);
          v26 += 8;
          float32x4_t v33 = vmulq_f32(v32, v30);
          float32x4_t v34 = vmulq_f32(v31, v29);
          float32x4_t v36 = *v25;
          float32x4_t v35 = v25[1];
          v25 += 2;
          float32x4_t v37 = vmlaq_f32(v24[1], v33, v35);
          *uint64_t v24 = vmlaq_f32(*v24, v34, v36);
          v24[1] = v37;
          v24 += 2;
          --v27;
        }
        while (v27);
      }
      int v38 = 8 * v23;
      if (8 * v23 < (int)v21)
      {
        unint64_t v39 = (char *)*v647;
        uint64_t v40 = *(void *)(v20 + v15);
        unint64_t v41 = *v643;
        uint64_t v42 = *(void *)(v19 + v15);
        uint64_t v43 = v38;
        unint64_t v44 = v21 - v38;
        if (v44 < 8) {
          goto LABEL_46;
        }
        uint64_t v45 = 4 * v38;
        unint64_t v46 = v42 + v45;
        unint64_t v47 = v42 + v22;
        BOOL v48 = v42 + v45 >= (unint64_t)&v41[(unint64_t)v22 / 4]
           || (unint64_t)&v41[(unint64_t)v45 / 4] >= v47;
        BOOL v49 = !v48;
        BOOL v50 = v46 >= v40 + v22 || v40 + 4 * v43 >= v47;
        BOOL v51 = !v50;
        if ((unint64_t)&v39[v45] < v47 && v46 < (unint64_t)&v39[v22]) {
          goto LABEL_46;
        }
        if (v49) {
          goto LABEL_46;
        }
        if (v51) {
          goto LABEL_46;
        }
        uint64_t v53 = v44 - (v21 & 7) + v43;
        uint64_t v54 = v43 + (v21 & 7) - v21;
        uint64_t v55 = (float32x4_t *)(v42 + v45 + 16);
        uint64_t v56 = (float32x4_t *)&v39[v45 + 16];
        int v57 = (float32x4_t *)(v40 + v45 + 16);
        uint64_t v58 = (float32x4_t *)&v41[(unint64_t)v45 / 4 + 4];
        do
        {
          float32x4_t v59 = vmlaq_f32(*v55, vmulq_f32(*v58, *v56), *v57);
          v55[-1] = vmlaq_f32(v55[-1], vmulq_f32(v58[-1], v56[-1]), v57[-1]);
          float32x4_t *v55 = v59;
          v55 += 2;
          v56 += 2;
          v57 += 2;
          v58 += 2;
          v54 += 8;
        }
        while (v54);
        uint64_t v43 = v53;
        if ((v21 & 7) != 0)
        {
LABEL_46:
          uint64_t v60 = v21 - v43;
          unint64_t v61 = (float *)(v42 + 4 * v43);
          int v62 = (float *)(v40 + 4 * v43);
          int v63 = &v41[v43];
          uint64_t v64 = (float *)&v39[4 * v43];
          do
          {
            float v65 = *v64++;
            float v66 = v65;
            float v67 = *v63++;
            float v68 = v67;
            float v69 = *v62++;
            *unint64_t v61 = *v61 + (float)((float)(v68 * v66) * v69);
            ++v61;
            --v60;
          }
          while (v60);
        }
      }
      uint64_t v70 = *(void *)(a1 + 960);
      uint64_t v71 = *(void *)(a1 + 840);
      uint64_t v72 = *(int *)(a1 + 52);
      uint64_t v73 = 4 * v72;
      bzero(*(void **)(v70 + 8 * v14), 4 * v72);
      int v74 = (int)v72 / 8;
      if ((int)v72 >= 8)
      {
        uint64_t v75 = *(float32x4_t **)(v70 + v15);
        uint64_t v76 = *(float32x4_t **)(v71 + v15);
        int v77 = (int)v72 / 8;
        uint64_t v78 = v18;
        unint64_t v79 = (float32x4_t *)*v642;
        do
        {
          float32x4_t v80 = *v79;
          float32x4_t v81 = v79[1];
          v79 += 2;
          float32x4_t v82 = *v78;
          float32x4_t v83 = v78[1];
          v78 += 2;
          float32x4_t v84 = vmulq_f32(v83, v81);
          float32x4_t v85 = vmulq_f32(v82, v80);
          float32x4_t v87 = *v76;
          float32x4_t v86 = v76[1];
          v76 += 2;
          float32x4_t v88 = vmlaq_f32(v75[1], v84, v86);
          *uint64_t v75 = vmlaq_f32(*v75, v85, v87);
          v75[1] = v88;
          v75 += 2;
          --v77;
        }
        while (v77);
      }
      int v89 = 8 * v74;
      if (8 * v74 < (int)v72)
      {
        uint64_t v90 = *(void *)(v71 + v15);
        unint64_t v91 = (char *)*v642;
        uint64_t v92 = *(void *)(v70 + v15);
        uint64_t v93 = v89;
        unint64_t v94 = v72 - v89;
        if (v94 < 8) {
          goto LABEL_75;
        }
        uint64_t v95 = 4 * v89;
        unint64_t v96 = v92 + v95;
        unint64_t v97 = v92 + v73;
        BOOL v98 = v92 + v95 >= (unint64_t)v18 + v73 || (unint64_t)v18 + v95 >= v97;
        BOOL v99 = !v98;
        BOOL v100 = v96 >= v90 + v73 || v90 + 4 * v93 >= v97;
        BOOL v101 = !v100;
        if ((unint64_t)&v91[v95] < v97 && v96 < (unint64_t)&v91[v73]) {
          goto LABEL_75;
        }
        if (v99) {
          goto LABEL_75;
        }
        if (v101) {
          goto LABEL_75;
        }
        uint64_t v103 = v94 - (v72 & 7) + v93;
        uint64_t v104 = v93 + (v72 & 7) - v72;
        int v105 = (float32x4_t *)(v92 + v95 + 16);
        BOOL v106 = (float32x4_t *)&v91[v95 + 16];
        uint64_t v107 = (float32x4_t *)(v90 + v95 + 16);
        uint64_t v108 = (float32x4_t *)((char *)v18 + v95 + 16);
        do
        {
          float32x4_t v109 = vmlaq_f32(*v105, vmulq_f32(*v108, *v106), *v107);
          v105[-1] = vmlaq_f32(v105[-1], vmulq_f32(v108[-1], v106[-1]), v107[-1]);
          *int v105 = v109;
          v105 += 2;
          v106 += 2;
          v107 += 2;
          v108 += 2;
          v104 += 8;
        }
        while (v104);
        uint64_t v93 = v103;
        if ((v72 & 7) != 0)
        {
LABEL_75:
          uint64_t v110 = v72 - v93;
          uint64_t v111 = 4 * v93;
          uint64_t v112 = (float *)(v92 + v111);
          unint64_t v113 = (float *)(v90 + v111);
          uint64_t v114 = &v18->f32[(unint64_t)v111 / 4];
          unint64_t v115 = (float *)&v91[v111];
          do
          {
            float v116 = *v115++;
            float v117 = v116;
            float v118 = *v114++;
            float v119 = v118;
            float v120 = *v113++;
            float *v112 = *v112 + (float)((float)(v119 * v117) * v120);
            ++v112;
            --v110;
          }
          while (v110);
        }
      }
      uint64_t v121 = *(void *)(a1 + 960);
      uint64_t v122 = *(unsigned int *)(a1 + 52);
      if ((int)v122 < 1)
      {
        unint64_t v126 = v17;
        if (!v640)
        {
          int v128 = v641;
          goto LABEL_117;
        }
        uint64_t v167 = 8 * v11;
        uint64_t v137 = *(void *)(*(void *)(a1 + 472) + v167);
        uint64_t v158 = (uint64_t *)(v121 + v167);
        int v128 = v641;
        int v166 = -8 * (-(int)v122 >> 3);
        if (v166 < (int)v122) {
          goto LABEL_98;
        }
        goto LABEL_116;
      }
      unint64_t v123 = *(void *)(*(void *)(a1 + 864) + v15);
      unint64_t v124 = **(void **)(a1 + 2584);
      unint64_t v125 = *(void *)(v121 + v15);
      unint64_t v126 = v17;
      uint64_t v127 = 0;
      if (v122 < 8)
      {
        int v128 = v641;
LABEL_80:
        uint64_t v129 = v122 - v127;
        uint64_t v130 = (float *)(v125 + 4 * v127);
        long long v131 = (char *)(v124 + v127);
        int v132 = (float *)(v123 + 4 * v127);
        do
        {
          float v133 = *v132++;
          float v134 = v133;
          int v135 = *v131++;
          *uint64_t v130 = *v130 + (float)(v134 * (float)v135);
          ++v130;
          --v129;
        }
        while (v129);
        goto LABEL_82;
      }
      unint64_t v341 = v125 + 4 * v122;
      BOOL v343 = v125 < v124 + v122 && v124 < v341;
      BOOL v344 = v123 >= v341 || v125 >= v123 + 4 * v122;
      int v128 = v641;
      if (!v344 || v343) {
        goto LABEL_80;
      }
      if (v122 >= 0x10)
      {
        uint64_t v127 = v122 & 0x7FFFFFF0;
        uint64_t v380 = v122 & 0xFFFFFFF0;
        float v381 = *(float32x4_t **)(v121 + v15);
        int v382 = **(int8x16_t ***)(a1 + 2584);
        int v383 = *(float32x4_t **)(*(void *)(a1 + 864) + v15);
        do
        {
          float32x4_t v385 = v383[2];
          float32x4_t v384 = v383[3];
          float32x4_t v387 = *v383;
          float32x4_t v386 = v383[1];
          v383 += 4;
          int8x16_t v388 = *v382++;
          int8x8_t v389 = (int8x8_t)vextq_s8(v388, v388, 8uLL).u64[0];
          float32x4_t v390 = v381[2];
          float32x4_t v391 = vmlaq_f32(v381[3], v384, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v389, *(int8x8_t *)v384.f32), 8uLL), 8uLL))));
          float32x4_t v392 = vmlaq_f32(v381[1], v386, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v388.i8, *(int8x8_t *)v384.f32), 8uLL), 8uLL))));
          *float v381 = vmlaq_f32(*v381, v387, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(*(int8x8_t *)v388.i8, *(int8x8_t *)v384.f32), 8uLL), 8uLL))));
          v381[1] = v392;
          v381[2] = vmlaq_f32(v390, v385, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v389, *(int8x8_t *)v384.f32), 8uLL), 8uLL))));
          v381[3] = v391;
          v381 += 4;
          v380 -= 16;
        }
        while (v380);
        if (v127 == v122) {
          goto LABEL_82;
        }
        if ((v122 & 8) == 0) {
          goto LABEL_80;
        }
      }
      else
      {
        uint64_t v127 = 0;
      }
      uint64_t v345 = v127;
      uint64_t v127 = v122 & 0xFFFFFFF8;
      uint64_t v346 = (float32x4_t *)(v123 + 4 * v345);
      uint64_t v347 = (int8x8_t *)(v124 + v345);
      int v348 = (float32x4_t *)(v125 + 4 * v345);
      uint64_t v349 = v345 - v127;
      do
      {
        float32x4_t v351 = *v346;
        float32x4_t v350 = v346[1];
        v346 += 2;
        int8x8_t v352 = *v347++;
        float32x4_t v353 = vmlaq_f32(v348[1], v350, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v352, *(int8x8_t *)v350.f32), 8uLL), 8uLL))));
        *int v348 = vmlaq_f32(*v348, v351, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v352, *(int8x8_t *)v350.f32), 8uLL), 8uLL))));
        v348[1] = v353;
        v348 += 2;
        v349 += 8;
      }
      while (v349);
      if (v127 != v122) {
        goto LABEL_80;
      }
LABEL_82:
      if (v640)
      {
        uint64_t v136 = 8 * v11;
        uint64_t v137 = *(void *)(*(void *)(a1 + 472) + v136);
        uint64_t v138 = *(float32x4_t **)(*(void *)(a1 + 888) + v136);
        unint64_t v139 = **(void **)(a1 + 2576);
        if (v122 < 8)
        {
          uint64_t v140 = 0;
          goto LABEL_85;
        }
        uint64_t v140 = 0;
        unint64_t v354 = v125 + 4 * v122;
        BOOL v356 = v125 < v139 + v122 && v139 < v354;
        BOOL v357 = (unint64_t)v138 >= v354 || v125 >= (unint64_t)v138->u64 + 4 * v122;
        if (!v357 || v356) {
          goto LABEL_85;
        }
        if (v122 < 0x10)
        {
          uint64_t v140 = 0;
          goto LABEL_241;
        }
        uint64_t v140 = v122 & 0x7FFFFFF0;
        uint64_t v393 = v122 & 0xFFFFFFF0;
        uint64_t v394 = (float32x4_t *)v125;
        v395 = **(int8x16_t ***)(a1 + 2576);
        v396 = v138;
        do
        {
          float32x4_t v398 = v396[2];
          float32x4_t v397 = v396[3];
          float32x4_t v400 = *v396;
          float32x4_t v399 = v396[1];
          v396 += 4;
          int8x16_t v401 = *v395++;
          int8x8_t v402 = (int8x8_t)vextq_s8(v401, v401, 8uLL).u64[0];
          float32x4_t v403 = v394[2];
          float32x4_t v404 = vmlaq_f32(v394[3], v397, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v402, *(int8x8_t *)v397.f32), 8uLL), 8uLL))));
          float32x4_t v405 = vmlaq_f32(v394[1], v399, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v401.i8, *(int8x8_t *)v397.f32), 8uLL), 8uLL))));
          *uint64_t v394 = vmlaq_f32(*v394, v400, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(*(int8x8_t *)v401.i8, *(int8x8_t *)v397.f32), 8uLL), 8uLL))));
          v394[1] = v405;
          v394[2] = vmlaq_f32(v403, v398, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v402, *(int8x8_t *)v397.f32), 8uLL), 8uLL))));
          v394[3] = v404;
          v394 += 4;
          v393 -= 16;
        }
        while (v393);
        if (v140 != v122)
        {
          if ((v122 & 8) == 0) {
            goto LABEL_85;
          }
LABEL_241:
          uint64_t v358 = v140;
          uint64_t v140 = v122 & 0xFFFFFFF8;
          uint64_t v359 = (float32x4_t *)((char *)v138 + 4 * v358);
          uint64_t v360 = (int8x8_t *)(v139 + v358);
          v361 = (float32x4_t *)(v125 + 4 * v358);
          uint64_t v362 = v358 - v140;
          do
          {
            float32x4_t v364 = *v359;
            float32x4_t v363 = v359[1];
            v359 += 2;
            int8x8_t v365 = *v360++;
            float32x4_t v366 = vmlaq_f32(v361[1], v363, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v365, *(int8x8_t *)v363.f32), 8uLL), 8uLL))));
            float32x4_t *v361 = vmlaq_f32(*v361, v364, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v365, *(int8x8_t *)v363.f32), 8uLL), 8uLL))));
            v361[1] = v366;
            v361 += 2;
            v362 += 8;
          }
          while (v362);
          if (v140 != v122)
          {
LABEL_85:
            uint64_t v141 = v122 - v140;
            unint64_t v142 = (float *)(v125 + 4 * v140);
            uint64_t v143 = (char *)(v139 + v140);
            unint64_t v144 = &v138->f32[v140];
            do
            {
              float v145 = *v144++;
              float v146 = v145;
              int v147 = *v143++;
              *unint64_t v142 = *v142 + (float)(v146 * (float)v147);
              ++v142;
              --v141;
            }
            while (v141);
          }
        }
        unint64_t v148 = *(void *)(*(void *)(a1 + 912) + 8 * v11);
        unint64_t v149 = **(void **)(a1 + 2568);
        if (v122 < 8)
        {
          uint64_t v150 = 0;
          goto LABEL_89;
        }
        uint64_t v150 = 0;
        unint64_t v367 = v125 + 4 * v122;
        BOOL v369 = v125 < v149 + v122 && v149 < v367;
        BOOL v370 = v148 >= v367 || v125 >= v148 + 4 * v122;
        if (!v370 || v369) {
          goto LABEL_89;
        }
        if (v122 < 0x10)
        {
          uint64_t v150 = 0;
          goto LABEL_259;
        }
        uint64_t v150 = v122 & 0x7FFFFFF0;
        uint64_t v406 = v122 & 0xFFFFFFF0;
        int v407 = (float32x4_t *)v125;
        uint64_t v408 = **(int8x16_t ***)(a1 + 2568);
        BOOL v409 = *(float32x4_t **)(*(void *)(a1 + 912) + 8 * v11);
        do
        {
          float32x4_t v411 = v409[2];
          float32x4_t v410 = v409[3];
          float32x4_t v413 = *v409;
          float32x4_t v412 = v409[1];
          v409 += 4;
          int8x16_t v414 = *v408++;
          int8x8_t v415 = (int8x8_t)vextq_s8(v414, v414, 8uLL).u64[0];
          float32x4_t v416 = v407[2];
          float32x4_t v417 = vmlaq_f32(v407[3], v410, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v415, *(int8x8_t *)v410.f32), 8uLL), 8uLL))));
          float32x4_t v418 = vmlaq_f32(v407[1], v412, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v414.i8, *(int8x8_t *)v410.f32), 8uLL), 8uLL))));
          *int v407 = vmlaq_f32(*v407, v413, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(*(int8x8_t *)v414.i8, *(int8x8_t *)v410.f32), 8uLL), 8uLL))));
          v407[1] = v418;
          v407[2] = vmlaq_f32(v416, v411, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v415, *(int8x8_t *)v410.f32), 8uLL), 8uLL))));
          v407[3] = v417;
          v407 += 4;
          v406 -= 16;
        }
        while (v406);
        if (v150 != v122)
        {
          if ((v122 & 8) == 0) {
            goto LABEL_89;
          }
LABEL_259:
          uint64_t v371 = v150;
          uint64_t v150 = v122 & 0xFFFFFFF8;
          v372 = (float32x4_t *)(v148 + 4 * v371);
          v373 = (int8x8_t *)(v149 + v371);
          float32x4_t v374 = (float32x4_t *)(v125 + 4 * v371);
          uint64_t v375 = v371 - v150;
          do
          {
            float32x4_t v377 = *v372;
            float32x4_t v376 = v372[1];
            v372 += 2;
            int8x8_t v378 = *v373++;
            float32x4_t v379 = vmlaq_f32(v374[1], v376, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v378, *(int8x8_t *)v376.f32), 8uLL), 8uLL))));
            *float32x4_t v374 = vmlaq_f32(*v374, v377, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v378, *(int8x8_t *)v376.f32), 8uLL), 8uLL))));
            v374[1] = v379;
            v374 += 2;
            v375 += 8;
          }
          while (v375);
          if (v150 != v122)
          {
LABEL_89:
            uint64_t v151 = v122 - v150;
            unint64_t v152 = (float *)(v125 + 4 * v150);
            uint64_t v153 = (char *)(v149 + v150);
            uint64_t v154 = (float *)(v148 + 4 * v150);
            do
            {
              float v155 = *v154++;
              float v156 = v155;
              int v157 = *v153++;
              float *v152 = *v152 + (float)(v156 * (float)v157);
              ++v152;
              --v151;
            }
            while (v151);
          }
        }
        uint64_t v158 = (uint64_t *)(v121 + 8 * v11);
        int v159 = (int)v122 >> 3;
        if ((int)v122 > 7)
        {
          uint64_t v160 = 0;
          uint64_t v161 = *v158;
          do
          {
            uint64_t v162 = (float32x4_t *)(v125 + 32 * v160);
            uint64_t v163 = (float32x4_t *)(v137 + 32 * v160);
            uint64_t v164 = (float32x4_t *)(v161 + 32 * v160);
            float32x4_t v165 = vmlaq_f32(v162[1], v163[1], v164[1]);
            *uint64_t v162 = vmlaq_f32(*v162, *v163, *v164);
            v162[1] = v165;
            ++v160;
          }
          while (v159 != v160);
        }
        int v166 = 8 * v159;
        if (8 * v159 >= (int)v122) {
          goto LABEL_116;
        }
LABEL_98:
        uint64_t v168 = *v158;
        uint64_t v169 = *(void *)(v121 + 8 * v14);
        uint64_t v170 = v166;
        unint64_t v171 = (int)v122 - (uint64_t)v166;
        if (v171 < 8) {
          goto LABEL_114;
        }
        uint64_t v172 = 4 * v166;
        unint64_t v173 = v169 + 4 * (int)v122;
        BOOL v174 = v169 + v172 >= (unint64_t)(v137 + 4 * (int)v122) || v137 + 4 * v166 >= v173;
        BOOL v175 = !v174;
        if (v168 + v172 < v173 && v169 + v172 < (unint64_t)(v168 + 4 * (int)v122)) {
          goto LABEL_114;
        }
        if (v175) {
          goto LABEL_114;
        }
        uint64_t v177 = v171 - (v122 & 7) + v170;
        uint64_t v178 = v170 + (v122 & 7) - (int)v122;
        uint64_t v179 = (float32x4_t *)(v169 + v172 + 16);
        unint64_t v180 = (float32x4_t *)(v168 + v172 + 16);
        uint64_t v181 = (float32x4_t *)(v137 + v172 + 16);
        do
        {
          float32x4_t v182 = vmlaq_f32(*v179, *v181, *v180);
          v179[-1] = vmlaq_f32(v179[-1], v181[-1], v180[-1]);
          float32x4_t *v179 = v182;
          v179 += 2;
          v180 += 2;
          v181 += 2;
          v178 += 8;
        }
        while (v178);
        uint64_t v170 = v177;
        if ((v122 & 7) != 0)
        {
LABEL_114:
          uint64_t v183 = (int)v122 - v170;
          uint64_t v184 = (float *)(v169 + 4 * v170);
          unint64_t v185 = (float *)(v137 + 4 * v170);
          float v186 = (float *)(v168 + 4 * v170);
          do
          {
            float v187 = *v186++;
            float v188 = v187;
            float v189 = *v185++;
            float *v184 = *v184 + (float)(v189 * v188);
            ++v184;
            --v183;
          }
          while (v183);
        }
      }
LABEL_116:
      LODWORD(v122) = *(_DWORD *)(a1 + 52);
      uint64_t v121 = *(void *)(a1 + 960);
LABEL_117:
      uint64_t v190 = *(void *)(a1 + 936);
      size_t v191 = 4 * (int)v122;
      bzero(*(void **)(v190 + 8 * v14), v191);
      int v192 = (int)v122 / 8;
      if ((int)v122 >= 8)
      {
        int v193 = *(float32x4_t **)(v190 + v15);
        uint64_t v194 = *(float32x4_t **)(v121 + v15);
        int v195 = (int)v122 / 8;
        int v196 = v126;
        uint64_t v197 = (float32x4_t *)*v645;
        do
        {
          float32x4_t v198 = *v197;
          float32x4_t v199 = v197[1];
          v197 += 2;
          float32x4_t v200 = *v194;
          float32x4_t v201 = v194[1];
          v194 += 2;
          float32x4_t v202 = vmulq_f32(v201, v199);
          float32x4_t v203 = vmulq_f32(v200, v198);
          float32x4_t v205 = *v196;
          float32x4_t v204 = v196[1];
          v196 += 2;
          float32x4_t v206 = vmlaq_f32(v193[1], v202, v204);
          *int v193 = vmlaq_f32(*v193, v203, v205);
          v193[1] = v206;
          v193 += 2;
          --v195;
        }
        while (v195);
      }
      int v207 = 8 * v192;
      if (8 * v192 < (int)v122)
      {
        uint64_t v208 = *(void *)(v121 + v15);
        float32x4_t v209 = (char *)*v645;
        uint64_t v210 = *(void *)(v190 + v15);
        uint64_t v211 = v207;
        unint64_t v212 = (int)v122 - (uint64_t)v207;
        if (v212 < 8) {
          goto LABEL_144;
        }
        uint64_t v213 = 4 * v207;
        unint64_t v214 = v210 + v213;
        unint64_t v215 = v210 + v191;
        BOOL v216 = v210 + v213 >= v208 + v191 || v208 + v213 >= v215;
        BOOL v217 = !v216;
        BOOL v218 = v214 >= (unint64_t)v126 + v191 || (unint64_t)v126->u64 + 4 * v211 >= v215;
        BOOL v219 = !v218;
        if ((unint64_t)&v209[v213] < v215 && v214 < (unint64_t)&v209[v191]) {
          goto LABEL_144;
        }
        if (v217) {
          goto LABEL_144;
        }
        if (v219) {
          goto LABEL_144;
        }
        uint64_t v221 = v212 - (v122 & 7) + v211;
        uint64_t v222 = v211 + (v122 & 7) - (int)v122;
        uint64_t v223 = (float32x4_t *)(v210 + v213 + 16);
        uint64_t v224 = (float32x4_t *)&v209[v213 + 16];
        int v225 = (float32x4_t *)((char *)v126 + v213 + 16);
        int64_t v226 = (float32x4_t *)(v208 + v213 + 16);
        do
        {
          float32x4_t v227 = vmlaq_f32(*v223, vmulq_f32(*v226, *v224), *v225);
          v223[-1] = vmlaq_f32(v223[-1], vmulq_f32(v226[-1], v224[-1]), v225[-1]);
          *uint64_t v223 = v227;
          v223 += 2;
          v224 += 2;
          v225 += 2;
          v226 += 2;
          v222 += 8;
        }
        while (v222);
        uint64_t v211 = v221;
        if ((v122 & 7) != 0)
        {
LABEL_144:
          uint64_t v228 = (int)v122 - v211;
          uint64_t v229 = (float *)(v210 + 4 * v211);
          unint64_t v230 = &v126->f32[v211];
          size_t v231 = (float *)(v208 + 4 * v211);
          uint64_t v232 = (float *)&v209[4 * v211];
          do
          {
            float v233 = *v232++;
            float v234 = v233;
            float v235 = *v231++;
            float v236 = v235;
            float v237 = *v230++;
            *uint64_t v229 = *v229 + (float)((float)(v236 * v234) * v237);
            ++v229;
            --v228;
          }
          while (v228);
        }
      }
      if (v649)
      {
        uint64_t v238 = *(void *)(a1 + 888);
        uint64_t v239 = *(void *)(a1 + 960);
        uint64_t v240 = *(void *)(a1 + 88);
        uint64_t v241 = *(int *)(a1 + 52);
        uint64_t v242 = 4 * v241;
        bzero(*(void **)(v238 + 8 * v14), 4 * v241);
        int v243 = (int)v241 / 8;
        if ((int)v241 >= 8)
        {
          int v244 = *(float32x4_t **)(v238 + v15);
          int v245 = *(float32x4_t **)(v240 + 8 * v637);
          int v246 = (int)v241 / 8;
          uint64_t v247 = *(float32x4_t **)(v239 + v15);
          uint64_t v248 = (float32x4_t *)*v638;
          do
          {
            float32x4_t v249 = *v248;
            float32x4_t v250 = v248[1];
            v248 += 2;
            float32x4_t v251 = *v247;
            float32x4_t v252 = v247[1];
            v247 += 2;
            float32x4_t v253 = vmulq_f32(v252, v250);
            float32x4_t v254 = vmulq_f32(v251, v249);
            float32x4_t v256 = *v245;
            float32x4_t v255 = v245[1];
            v245 += 2;
            float32x4_t v257 = vmlaq_f32(v244[1], v253, v255);
            *int v244 = vmlaq_f32(*v244, v254, v256);
            v244[1] = v257;
            v244 += 2;
            --v246;
          }
          while (v246);
        }
        int v258 = 8 * v243;
        if (8 * v243 < (int)v241)
        {
          uint64_t v259 = *(void *)(v239 + v15);
          uint64_t v260 = *(void *)(v240 + 8 * v637);
          uint64_t v261 = (char *)*v638;
          uint64_t v262 = *(void *)(v238 + v15);
          uint64_t v263 = v258;
          unint64_t v264 = v241 - v258;
          if (v264 < 8) {
            goto LABEL_174;
          }
          uint64_t v265 = 4 * v258;
          unint64_t v266 = v262 + v265;
          unint64_t v267 = v262 + v242;
          BOOL v268 = v262 + v265 >= (unint64_t)(v259 + v242) || v259 + v265 >= v267;
          BOOL v269 = !v268;
          BOOL v270 = v266 >= v260 + v242 || v260 + 4 * v263 >= v267;
          BOOL v271 = !v270;
          if ((unint64_t)&v261[v265] < v267 && v266 < (unint64_t)&v261[v242]) {
            goto LABEL_174;
          }
          if (v269) {
            goto LABEL_174;
          }
          if (v271) {
            goto LABEL_174;
          }
          uint64_t v273 = v264 - (v241 & 7) + v263;
          uint64_t v274 = v263 + (v241 & 7) - v241;
          int v275 = (float32x4_t *)(v262 + v265 + 16);
          BOOL v276 = (float32x4_t *)&v261[v265 + 16];
          BOOL v277 = (float32x4_t *)(v260 + v265 + 16);
          BOOL v278 = (float32x4_t *)(v259 + v265 + 16);
          do
          {
            float32x4_t v279 = vmlaq_f32(*v275, vmulq_f32(*v278, *v276), *v277);
            v275[-1] = vmlaq_f32(v275[-1], vmulq_f32(v278[-1], v276[-1]), v277[-1]);
            *int v275 = v279;
            v275 += 2;
            v276 += 2;
            v277 += 2;
            v278 += 2;
            v274 += 8;
          }
          while (v274);
          uint64_t v263 = v273;
          if ((v241 & 7) != 0)
          {
LABEL_174:
            uint64_t v280 = v241 - v263;
            float v281 = (float *)(v262 + 4 * v263);
            BOOL v282 = (float *)(v260 + 4 * v263);
            int v283 = (float *)(v259 + 4 * v263);
            v284 = (float *)&v261[4 * v263];
            do
            {
              float v285 = *v284++;
              float v286 = v285;
              float v287 = *v283++;
              float v288 = v287;
              float v289 = *v282++;
              float *v281 = *v281 + (float)((float)(v288 * v286) * v289);
              ++v281;
              --v280;
            }
            while (v280);
          }
        }
      }
      uint64_t v290 = *(void *)(a1 + 912);
      uint64_t v291 = *(void *)(a1 + 960);
      uint64_t v292 = *(int *)(a1 + 52);
      uint64_t v293 = 4 * v292;
      bzero(*(void **)(v290 + 8 * v14), 4 * v292);
      int v294 = (int)v292 / 8;
      uint64_t v6 = v634;
      if ((int)v292 >= 8)
      {
        int v295 = *(float32x4_t **)(v290 + v15);
        uint64_t v296 = *v646;
        float v297 = *(float32x4_t **)(v291 + v15);
        int v298 = (int)v292 / 8;
        size_t v299 = (float32x4_t *)*v634;
        do
        {
          float32x4_t v300 = *v299;
          float32x4_t v301 = v299[1];
          v299 += 2;
          float32x4_t v302 = *v297;
          float32x4_t v303 = v297[1];
          v297 += 2;
          float32x4_t v304 = vmulq_f32(v303, v301);
          float32x4_t v305 = vmulq_f32(v302, v300);
          float32x4_t v307 = *(float32x4_t *)v296;
          float32x4_t v306 = *(float32x4_t *)(v296 + 4);
          v296 += 8;
          float32x4_t v308 = vmlaq_f32(v295[1], v304, v306);
          *int v295 = vmlaq_f32(*v295, v305, v307);
          v295[1] = v308;
          v295 += 2;
          --v298;
        }
        while (v298);
      }
      int v309 = 8 * v294;
      if (8 * v294 < (int)v292)
      {
        uint64_t v310 = (char *)*v634;
        uint64_t v311 = *(void *)(v291 + v15);
        v312 = *v646;
        uint64_t v313 = *(void *)(v290 + v15);
        uint64_t v314 = v309;
        unint64_t v315 = v292 - v309;
        if (v315 < 8) {
          goto LABEL_203;
        }
        uint64_t v316 = 4 * v309;
        unint64_t v317 = v313 + v316;
        unint64_t v318 = v313 + v293;
        BOOL v319 = v313 + v316 >= (unint64_t)(v311 + v293) || v311 + v316 >= v318;
        BOOL v320 = !v319;
        BOOL v321 = v317 >= (unint64_t)&v312[(unint64_t)v293 / 4] || (unint64_t)&v312[v314] >= v318;
        BOOL v322 = !v321;
        if ((unint64_t)&v310[v316] < v318 && v317 < (unint64_t)&v310[v293]) {
          goto LABEL_203;
        }
        if (v320) {
          goto LABEL_203;
        }
        if (v322) {
          goto LABEL_203;
        }
        uint64_t v324 = v315 - (v292 & 7) + v314;
        uint64_t v325 = v314 + (v292 & 7) - v292;
        unint64_t v326 = (float32x4_t *)(v313 + v316 + 16);
        uint64_t v327 = (float32x4_t *)&v310[v316 + 16];
        unint64_t v328 = (float32x4_t *)&v312[(unint64_t)v316 / 4 + 4];
        BOOL v329 = (float32x4_t *)(v311 + v316 + 16);
        do
        {
          float32x4_t v330 = vmlaq_f32(*v326, vmulq_f32(*v329, *v327), *v328);
          v326[-1] = vmlaq_f32(v326[-1], vmulq_f32(v329[-1], v327[-1]), v328[-1]);
          *unint64_t v326 = v330;
          v326 += 2;
          v327 += 2;
          v328 += 2;
          v329 += 2;
          v325 += 8;
        }
        while (v325);
        uint64_t v314 = v324;
        if ((v292 & 7) != 0)
        {
LABEL_203:
          uint64_t v331 = v292 - v314;
          uint64_t v332 = (float *)(v313 + 4 * v314);
          uint64_t v333 = &v312[v314];
          v334 = (float *)(v311 + 4 * v314);
          v335 = (float *)&v310[4 * v314];
          do
          {
            float v336 = *v335++;
            float v337 = v336;
            float v338 = *v334++;
            float v339 = v338;
            float v340 = *v333++;
            *uint64_t v332 = *v332 + (float)((float)(v339 * v337) * v340);
            ++v332;
            --v331;
          }
          while (v331);
        }
      }
      if (((**(uint64_t (***)(uint64_t))a1)(a1) & 1) == 0)
      {
        bzero(*(void **)(*(void *)(a1 + 816) + v15), 4 * *(int *)(a1 + 48));
        sub_19E1F4438((float **)(*(void *)(a1 + 816) + v15), (void *)(*(void *)(a1 + 912) + v15), *(void **)(a1 + 2504), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 0.0);
        if (v649) {
          sub_19E1F4438((float **)(*(void *)(a1 + 816) + v15), (void *)(*(void *)(a1 + 888) + v15), *(void **)(a1 + 2512), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1.0);
        }
        sub_19E1F4438((float **)(*(void *)(a1 + 816) + v15), (void *)(*(void *)(a1 + 864) + v15), *(void **)(a1 + 2520), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1.0);
        sub_19E1F4438((float **)(*(void *)(a1 + 816) + v15), (void *)(*(void *)(a1 + 936) + v15), *(void **)(a1 + 2528), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1.0);
      }
      int v7 = v128 - 1;
    }
    while (v128 > 0);
  }
  uint64_t v419 = *(unsigned int *)(a1 + 52);
  if ((int)v419 > 0)
  {
    size_t v420 = 4 * v419;
    bzero(*(void **)(a1 + 1528), 4 * v419);
    v648 = (float32x4_t **)(a1 + 1536);
    bzero(*(void **)(a1 + 1536), v420);
    bzero(*(void **)(a1 + 1544), v420);
    v644 = (float32x4_t **)(a1 + 1544);
    int v421 = a5;
    if (*(int *)(a1 + 56) <= 0) {
      goto LABEL_281;
    }
    goto LABEL_280;
  }
  v648 = (float32x4_t **)(a1 + 1536);
  v644 = (float32x4_t **)(a1 + 1544);
  int v421 = a5;
  if (*(int *)(a1 + 56) > 0)
  {
LABEL_280:
    *(_DWORD *)(a1 + 1000) = 0;
    *(_DWORD *)(a1 + 1240) = 0;
    *(_DWORD *)(a1 + 1120) = 0;
    *(_DWORD *)(a1 + 1360) = 0;
  }
LABEL_281:
  if (v421 > 1)
  {
    int v650 = v421 - 2;
    for (int i = 1; i != v421; ++i)
    {
      int v426 = v421 - 2;
      int v427 = v652 - i;
      if (*(unsigned char *)(a1 + 2672))
      {
        uint64_t v428 = v427 + 1;
      }
      else
      {
        int v427 = i;
        int v426 = 1;
        uint64_t v428 = i - 1;
      }
      uint64_t v429 = *(void *)(a1 + 912);
      uint64_t v430 = *(void *)(a1 + 88);
      uint64_t v431 = *(int *)(a1 + 52);
      int v432 = (int)v431 / 8;
      if ((int)v431 >= 8)
      {
        uint64_t v433 = *(float32x4_t **)(a1 + 1528);
        unint64_t v434 = *(float32x4_t **)(v430 + 8 * v428);
        int v435 = (int)v431 / 8;
        BOOL v436 = *(float32x4_t **)(v429 + 8 * v427);
        do
        {
          float32x4_t v438 = *v436;
          float32x4_t v437 = v436[1];
          v436 += 2;
          float32x4_t v440 = *v434;
          float32x4_t v439 = v434[1];
          v434 += 2;
          float32x4_t v441 = vmlaq_f32(v433[1], v439, v437);
          *uint64_t v433 = vmlaq_f32(*v433, v440, v438);
          v433[1] = v441;
          v433 += 2;
          --v435;
        }
        while (v435);
      }
      int v442 = 8 * v432;
      if (8 * v432 < (int)v431)
      {
        uint64_t v443 = *(void *)(v429 + 8 * v427);
        uint64_t v444 = *(void *)(v430 + 8 * v428);
        uint64_t v445 = *(void *)(a1 + 1528);
        uint64_t v446 = v442;
        unint64_t v447 = v431 - v442;
        if (v447 < 8) {
          goto LABEL_307;
        }
        uint64_t v448 = 4 * v442;
        unint64_t v449 = v445 + 4 * v431;
        BOOL v450 = v445 + v448 >= (unint64_t)(v444 + 4 * v431) || v444 + 4 * v442 >= v449;
        BOOL v451 = !v450;
        if (v443 + v448 < v449 && v445 + v448 < (unint64_t)(v443 + 4 * v431)) {
          goto LABEL_307;
        }
        if (v451) {
          goto LABEL_307;
        }
        uint64_t v453 = v447 - (v431 & 7) + v446;
        uint64_t v454 = v446 + (v431 & 7) - v431;
        v455 = (float32x4_t *)(v445 + v448 + 16);
        size_t v456 = (float32x4_t *)(v443 + v448 + 16);
        v457 = (float32x4_t *)(v444 + v448 + 16);
        do
        {
          float32x4_t v458 = vmlaq_f32(*v455, *v457, *v456);
          v455[-1] = vmlaq_f32(v455[-1], v457[-1], v456[-1]);
          float32x4_t *v455 = v458;
          v455 += 2;
          v456 += 2;
          v457 += 2;
          v454 += 8;
        }
        while (v454);
        uint64_t v446 = v453;
        if ((v431 & 7) != 0)
        {
LABEL_307:
          uint64_t v459 = v431 - v446;
          uint64_t v460 = (float *)(v445 + 4 * v446);
          uint64_t v461 = (float *)(v444 + 4 * v446);
          v462 = (float *)(v443 + 4 * v446);
          do
          {
            float v463 = *v462++;
            float v464 = v463;
            float v465 = *v461++;
            *uint64_t v460 = *v460 + (float)(v465 * v464);
            ++v460;
            --v459;
          }
          while (v459);
        }
      }
      uint64_t v466 = *(void *)(a1 + 888);
      uint64_t v467 = *(void *)(a1 + 88);
      uint64_t v468 = *(int *)(a1 + 52);
      int v469 = (int)v468 / 8;
      if ((int)v468 >= 8)
      {
        int v470 = *v648;
        uint64_t v471 = *(float32x4_t **)(v467 + 8 * v428);
        int v472 = (int)v468 / 8;
        uint64_t v473 = *(float32x4_t **)(v466 + 8 * v427);
        do
        {
          float32x4_t v475 = *v473;
          float32x4_t v474 = v473[1];
          v473 += 2;
          float32x4_t v477 = *v471;
          float32x4_t v476 = v471[1];
          v471 += 2;
          float32x4_t v478 = vmlaq_f32(v470[1], v476, v474);
          *int v470 = vmlaq_f32(*v470, v477, v475);
          v470[1] = v478;
          v470 += 2;
          --v472;
        }
        while (v472);
      }
      int v479 = 8 * v469;
      if (8 * v469 < (int)v468)
      {
        uint64_t v480 = *(void *)(v466 + 8 * v427);
        uint64_t v481 = *(void *)(v467 + 8 * v428);
        v482 = *v648;
        uint64_t v483 = v479;
        unint64_t v484 = v468 - v479;
        if (v484 < 8) {
          goto LABEL_329;
        }
        uint64_t v485 = 4 * v479;
        unint64_t v486 = (unint64_t)v482->u64 + 4 * v468;
        BOOL v487 = (unint64_t)v482 + v485 >= v481 + 4 * v468 || v481 + 4 * v479 >= v486;
        BOOL v488 = !v487;
        if (v480 + v485 < v486 && (unint64_t)v482 + v485 < v480 + 4 * v468) {
          goto LABEL_329;
        }
        if (v488) {
          goto LABEL_329;
        }
        uint64_t v490 = v484 - (v468 & 7) + v483;
        uint64_t v491 = v483 + (v468 & 7) - v468;
        uint64_t v492 = (float32x4_t *)((char *)v482 + v485 + 16);
        uint64_t v493 = (float32x4_t *)(v480 + v485 + 16);
        v494 = (float32x4_t *)(v481 + v485 + 16);
        do
        {
          float32x4_t v495 = vmlaq_f32(*v492, *v494, *v493);
          v492[-1] = vmlaq_f32(v492[-1], v494[-1], v493[-1]);
          *uint64_t v492 = v495;
          v492 += 2;
          v493 += 2;
          v494 += 2;
          v491 += 8;
        }
        while (v491);
        uint64_t v483 = v490;
        if ((v468 & 7) != 0)
        {
LABEL_329:
          uint64_t v496 = v468 - v483;
          v497 = &v482->f32[v483];
          uint64_t v498 = (float *)(v481 + 4 * v483);
          uint64_t v499 = (float *)(v480 + 4 * v483);
          do
          {
            float v500 = *v499++;
            float v501 = v500;
            float v502 = *v498++;
            float *v497 = *v497 + (float)(v502 * v501);
            ++v497;
            --v496;
          }
          while (v496);
        }
      }
      BOOL v423 = v427 == v426;
      uint64_t v424 = 8 * v427;
      uint64_t v425 = 8 * v428;
      sub_19E1C7984(*(void *)(a1 + 64) + v424, *(void *)(a1 + 912) + v424, *(void *)(a1 + 112) + 8 * v428, (void **)(a1 + 1496), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v423);
      sub_19E1C7984(*(void *)(a1 + 64) + v424, *(void *)(a1 + 888) + v424, *(void *)(a1 + 112) + v425, (void **)(a1 + 1504), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v423);
      sub_19E1C7984(*(void *)(a1 + 64) + v424, *(void *)(a1 + 864) + v424, *(void *)(a1 + 112) + v425, (void **)(a1 + 1512), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v423);
      sub_19E1C7984(*(void *)(a1 + 64) + v424, *(void *)(a1 + 936) + v424, *(void *)(a1 + 112) + v425, (void **)(a1 + 1520), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v423);
    }
    int v503 = 1;
    while (1)
    {
      if (*(unsigned char *)(a1 + 2672)) {
        int v504 = v652 - v503;
      }
      else {
        int v504 = v503;
      }
      if (*(unsigned char *)(a1 + 2672)) {
        int v505 = v650;
      }
      else {
        int v505 = 1;
      }
      if (a3[1] == *a3 || *(int *)(a1 + 56) < 1 || !(**(unsigned int (***)(uint64_t))a1)(a1))
      {
        sub_19E1C7984(*(void *)(a1 + 64) + 8 * v504, *(void *)(a1 + 888) + 8 * v504, *(void *)(a1 + 64) + 8 * v504, (void **)(a1 + 1472), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v504 == v505);
        goto LABEL_334;
      }
      uint64_t v506 = *(void *)(a1 + 888);
      uint64_t v507 = *(void *)(a1 + 208) + 24 * v504;
      v509 = *(unsigned char **)v507;
      v508 = *(unsigned char **)(v507 + 8);
      size_t v510 = v508 - v509;
      if (v508 != v509) {
        break;
      }
      uint64_t v511 = 0;
      uint64_t v512 = *(unsigned int *)(a1 + 52);
      if ((int)v512 >= 1) {
        goto LABEL_349;
      }
LABEL_356:
      if (*(int *)(a1 + 1116) >= 1)
      {
        uint64_t v525 = 0;
        uint64_t v526 = *(void *)(a1 + 1152);
        do
        {
          *(_DWORD *)(*(void *)(v526 + 24 * *(int *)(a1 + 1120)) + 4 * v525) = v511[v525];
          ++v525;
        }
        while (v525 < *(int *)(a1 + 1116));
        ++*(_DWORD *)(a1 + 1120);
LABEL_361:
        operator delete(v511);
        goto LABEL_334;
      }
      ++*(_DWORD *)(a1 + 1120);
      if (v511) {
        goto LABEL_361;
      }
LABEL_334:
      if (++v503 == v421) {
        goto LABEL_362;
      }
    }
    if ((v510 & 0x8000000000000000) != 0) {
      sub_19E13D694();
    }
    uint64_t v511 = operator new(v508 - v509);
    memcpy(v511, v509, v510);
    int v421 = a5;
    uint64_t v512 = *(unsigned int *)(a1 + 52);
    if ((int)v512 < 1) {
      goto LABEL_356;
    }
LABEL_349:
    uint64_t v513 = 0;
    uint64_t v514 = *(void *)(v506 + 8 * v504);
    uint64_t v515 = *(void *)(*(void *)(a1 + 1128) + 8 * *(int *)(a1 + 1120));
    if (v512 < 8) {
      goto LABEL_354;
    }
    if ((unint64_t)(v515 - v514) < 0x20) {
      goto LABEL_354;
    }
    uint64_t v513 = v512 & 0x7FFFFFF8;
    int v516 = (long long *)(v514 + 16);
    v517 = (_OWORD *)(v515 + 16);
    uint64_t v518 = v512 & 0xFFFFFFF8;
    do
    {
      long long v519 = *v516;
      *(v517 - 1) = *(v516 - 1);
      _OWORD *v517 = v519;
      v516 += 2;
      v517 += 2;
      v518 -= 8;
    }
    while (v518);
    if (v513 != v512)
    {
LABEL_354:
      uint64_t v520 = v512 - v513;
      uint64_t v521 = 4 * v513;
      v522 = (_DWORD *)(v515 + 4 * v513);
      v523 = (int *)(v514 + v521);
      do
      {
        int v524 = *v523++;
        *v522++ = v524;
        --v520;
      }
      while (v520);
    }
    goto LABEL_356;
  }
LABEL_362:
  BOOL v527 = v644;
  if (v421 >= 1)
  {
    int v528 = 0;
    while (1)
    {
      int v531 = v652 - v528;
      if (*(unsigned char *)(a1 + 2672))
      {
        int v532 = v652;
      }
      else
      {
        int v531 = v528;
        int v532 = 0;
      }
      uint64_t v533 = v531;
      uint64_t v534 = *(void *)(a1 + 864);
      uint64_t v535 = *(void *)(a1 + 88);
      uint64_t v536 = *(int *)(a1 + 52);
      int v537 = (int)v536 / 8;
      uint64_t v538 = 8 * v533;
      if ((int)v536 >= 8)
      {
        v539 = *v527;
        v540 = *(float32x4_t **)(v535 + 8 * v533);
        int v541 = (int)v536 / 8;
        v542 = *(float32x4_t **)(v534 + 8 * v533);
        do
        {
          float32x4_t v544 = *v542;
          float32x4_t v543 = v542[1];
          v542 += 2;
          float32x4_t v546 = *v540;
          float32x4_t v545 = v540[1];
          v540 += 2;
          float32x4_t v547 = vmlaq_f32(v539[1], v545, v543);
          float32x4_t *v539 = vmlaq_f32(*v539, v546, v544);
          v539[1] = v547;
          v539 += 2;
          --v541;
        }
        while (v541);
      }
      int v548 = 8 * v537;
      if (8 * v537 < (int)v536)
      {
        uint64_t v549 = *(void *)(v534 + 8 * v533);
        uint64_t v550 = *(void *)(v535 + 8 * v533);
        v551 = *v527;
        uint64_t v552 = v548;
        unint64_t v553 = v536 - v548;
        if (v553 < 8) {
          goto LABEL_390;
        }
        uint64_t v554 = 4 * v548;
        unint64_t v555 = (unint64_t)v551->u64 + 4 * v536;
        BOOL v556 = (unint64_t)v551 + v554 >= v550 + 4 * v536 || v550 + 4 * v548 >= v555;
        BOOL v557 = !v556;
        if (v549 + v554 < v555 && (unint64_t)v551 + v554 < v549 + 4 * v536) {
          goto LABEL_390;
        }
        if (v557) {
          goto LABEL_390;
        }
        uint64_t v559 = v553 - (v536 & 7) + v552;
        uint64_t v560 = v552 + (v536 & 7) - v536;
        v561 = (float32x4_t *)((char *)v551 + v554 + 16);
        v562 = (float32x4_t *)(v549 + v554 + 16);
        v563 = (float32x4_t *)(v550 + v554 + 16);
        do
        {
          float32x4_t v564 = vmlaq_f32(*v561, *v563, *v562);
          v561[-1] = vmlaq_f32(v561[-1], v563[-1], v562[-1]);
          float32x4_t *v561 = v564;
          v561 += 2;
          v562 += 2;
          v563 += 2;
          v560 += 8;
        }
        while (v560);
        uint64_t v552 = v559;
        if ((v536 & 7) != 0)
        {
LABEL_390:
          uint64_t v565 = v536 - v552;
          v566 = &v551->f32[v552];
          v567 = (float *)(v550 + 4 * v552);
          v568 = (float *)(v549 + 4 * v552);
          do
          {
            float v569 = *v568++;
            float v570 = v569;
            float v571 = *v567++;
            float *v566 = *v566 + (float)(v571 * v570);
            ++v566;
            --v565;
          }
          while (v565);
        }
      }
      if (a3[1] == *a3)
      {
        uint64_t v529 = *(void *)(a1 + 912);
LABEL_365:
        BOOL v530 = v533 == v532;
        sub_19E1C7984(*(void *)(a1 + 64) + v538, v529 + v538, *(void *)(a1 + 64) + v538, (void **)(a1 + 1464), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v530);
        sub_19E1C7984(*(void *)(a1 + 64) + v538, *(void *)(a1 + 864) + v538, *(void *)(a1 + 64) + v538, (void **)(a1 + 1480), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v530);
        sub_19E1C7984(*(void *)(a1 + 64) + v538, *(void *)(a1 + 936) + v538, *(void *)(a1 + 64) + v538, (void **)(a1 + 1488), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v530);
        goto LABEL_366;
      }
      uint64_t v529 = *(void *)(a1 + 912);
      if (*(int *)(a1 + 56) < 1) {
        goto LABEL_365;
      }
      int v651 = v528;
      uint64_t v572 = *(void *)(a1 + 208);
      uint64_t v573 = 24 * v533;
      uint64_t v574 = v572 + 24 * v533;
      v576 = *(unsigned char **)v574;
      v575 = *(unsigned char **)(v574 + 8);
      size_t v577 = v575 - v576;
      if (v575 == v576) {
        break;
      }
      if ((v577 & 0x8000000000000000) != 0) {
        sub_19E13D694();
      }
      v578 = operator new(v575 - v576);
      memcpy(v578, v576, v577);
      uint64_t v573 = 24 * v533;
      uint64_t v579 = *(unsigned int *)(a1 + 52);
      if ((int)v579 >= 1) {
        goto LABEL_399;
      }
LABEL_406:
      if (*(int *)(a1 + 996) < 1)
      {
        ++*(_DWORD *)(a1 + 1000);
        if (!v578) {
          goto LABEL_412;
        }
      }
      else
      {
        uint64_t v592 = 0;
        uint64_t v593 = *(void *)(a1 + 1032);
        do
        {
          *(_DWORD *)(*(void *)(v593 + 24 * *(int *)(a1 + 1000)) + 4 * v592) = *((_DWORD *)v578 + v592);
          ++v592;
        }
        while (v592 < *(int *)(a1 + 996));
        ++*(_DWORD *)(a1 + 1000);
      }
      operator delete(v578);
      uint64_t v572 = *(void *)(a1 + 208);
LABEL_412:
      uint64_t v594 = *(void *)(a1 + 864);
      v595 = *(unsigned char **)(v572 + 24 * (int)v533);
      v596 = *(unsigned char **)(v572 + v573 + 8);
      size_t v597 = v596 - v595;
      if (v596 == v595)
      {
        v598 = 0;
        uint64_t v599 = *(unsigned int *)(a1 + 52);
        if ((int)v599 < 1) {
          goto LABEL_424;
        }
LABEL_417:
        uint64_t v600 = 0;
        uint64_t v601 = *(void *)(v594 + 8 * v533);
        uint64_t v602 = *(void *)(*(void *)(a1 + 1248) + 8 * *(int *)(a1 + 1240));
        if (v599 < 8) {
          goto LABEL_422;
        }
        if ((unint64_t)(v602 - v601) < 0x20) {
          goto LABEL_422;
        }
        uint64_t v600 = v599 & 0x7FFFFFF8;
        v603 = (long long *)(v601 + 16);
        v604 = (_OWORD *)(v602 + 16);
        uint64_t v605 = v599 & 0xFFFFFFF8;
        do
        {
          long long v606 = *v603;
          *(v604 - 1) = *(v603 - 1);
          _OWORD *v604 = v606;
          v603 += 2;
          v604 += 2;
          v605 -= 8;
        }
        while (v605);
        if (v600 != v599)
        {
LABEL_422:
          uint64_t v607 = v599 - v600;
          uint64_t v608 = 4 * v600;
          v609 = (_DWORD *)(v602 + 4 * v600);
          v610 = (int *)(v601 + v608);
          do
          {
            int v611 = *v610++;
            *v609++ = v611;
            --v607;
          }
          while (v607);
        }
        goto LABEL_424;
      }
      if ((v597 & 0x8000000000000000) != 0) {
        sub_19E13D694();
      }
      v598 = operator new(v596 - v595);
      memcpy(v598, v595, v597);
      uint64_t v599 = *(unsigned int *)(a1 + 52);
      if ((int)v599 >= 1) {
        goto LABEL_417;
      }
LABEL_424:
      if (*(int *)(a1 + 1236) < 1)
      {
        ++*(_DWORD *)(a1 + 1240);
        if (!v598) {
          goto LABEL_430;
        }
      }
      else
      {
        uint64_t v612 = 0;
        uint64_t v613 = *(void *)(a1 + 1272);
        do
        {
          *(_DWORD *)(*(void *)(v613 + 24 * *(int *)(a1 + 1240)) + 4 * v612) = *((_DWORD *)v598 + v612);
          ++v612;
        }
        while (v612 < *(int *)(a1 + 1236));
        ++*(_DWORD *)(a1 + 1240);
      }
      operator delete(v598);
      uint64_t v572 = *(void *)(a1 + 208);
LABEL_430:
      uint64_t v614 = *(void *)(a1 + 936);
      v615 = *(unsigned char **)(v572 + 24 * (int)v533);
      v616 = *(unsigned char **)(v572 + v573 + 8);
      size_t v617 = v616 - v615;
      if (v616 != v615)
      {
        if ((v617 & 0x8000000000000000) != 0) {
          sub_19E13D694();
        }
        v618 = operator new(v616 - v615);
        memcpy(v618, v615, v617);
        uint64_t v619 = *(unsigned int *)(a1 + 52);
        BOOL v527 = v644;
        int v528 = v651;
        if ((int)v619 < 1) {
          goto LABEL_442;
        }
LABEL_435:
        uint64_t v620 = 0;
        uint64_t v621 = *(void *)(v614 + 8 * v533);
        uint64_t v622 = *(void *)(*(void *)(a1 + 1368) + 8 * *(int *)(a1 + 1360));
        if (v619 < 8) {
          goto LABEL_440;
        }
        if ((unint64_t)(v622 - v621) < 0x20) {
          goto LABEL_440;
        }
        uint64_t v620 = v619 & 0x7FFFFFF8;
        v623 = (long long *)(v621 + 16);
        v624 = (_OWORD *)(v622 + 16);
        uint64_t v625 = v619 & 0xFFFFFFF8;
        do
        {
          long long v626 = *v623;
          *(v624 - 1) = *(v623 - 1);
          _OWORD *v624 = v626;
          v623 += 2;
          v624 += 2;
          v625 -= 8;
        }
        while (v625);
        if (v620 != v619)
        {
LABEL_440:
          uint64_t v627 = v619 - v620;
          uint64_t v628 = 4 * v620;
          v629 = (_DWORD *)(v622 + 4 * v620);
          v630 = (int *)(v621 + v628);
          do
          {
            int v631 = *v630++;
            *v629++ = v631;
            --v627;
          }
          while (v627);
        }
        goto LABEL_442;
      }
      v618 = 0;
      uint64_t v619 = *(unsigned int *)(a1 + 52);
      BOOL v527 = v644;
      int v528 = v651;
      if ((int)v619 >= 1) {
        goto LABEL_435;
      }
LABEL_442:
      if (*(int *)(a1 + 1356) >= 1)
      {
        uint64_t v632 = 0;
        uint64_t v633 = *(void *)(a1 + 1392);
        do
        {
          *(_DWORD *)(*(void *)(v633 + 24 * *(int *)(a1 + 1360)) + 4 * v632) = *((_DWORD *)v618 + v632);
          ++v632;
        }
        while (v632 < *(int *)(a1 + 1356));
        ++*(_DWORD *)(a1 + 1360);
LABEL_447:
        operator delete(v618);
        goto LABEL_366;
      }
      ++*(_DWORD *)(a1 + 1360);
      if (v618) {
        goto LABEL_447;
      }
LABEL_366:
      if (++v528 == a5) {
        return;
      }
    }
    v578 = 0;
    uint64_t v579 = *(unsigned int *)(a1 + 52);
    if ((int)v579 < 1) {
      goto LABEL_406;
    }
LABEL_399:
    uint64_t v580 = 0;
    uint64_t v581 = *(void *)(v529 + 8 * v533);
    uint64_t v582 = *(void *)(*(void *)(a1 + 1008) + 8 * *(int *)(a1 + 1000));
    if (v579 < 8) {
      goto LABEL_404;
    }
    if ((unint64_t)(v582 - v581) < 0x20) {
      goto LABEL_404;
    }
    uint64_t v580 = v579 & 0x7FFFFFF8;
    v583 = (long long *)(v581 + 16);
    v584 = (_OWORD *)(v582 + 16);
    uint64_t v585 = v579 & 0xFFFFFFF8;
    do
    {
      long long v586 = *v583;
      *(v584 - 1) = *(v583 - 1);
      _OWORD *v584 = v586;
      v583 += 2;
      v584 += 2;
      v585 -= 8;
    }
    while (v585);
    if (v580 != v579)
    {
LABEL_404:
      uint64_t v587 = v579 - v580;
      uint64_t v588 = 4 * v580;
      v589 = (_DWORD *)(v582 + 4 * v580);
      v590 = (int *)(v581 + v588);
      do
      {
        int v591 = *v590++;
        *v589++ = v591;
        --v587;
      }
      while (v587);
    }
    goto LABEL_406;
  }
}

void sub_19E1F3A30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  float32x4_t v31 = *(void **)(v29 - 144);
  if (v31)
  {
    *(void *)(v29 - 136) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E1F3A8C(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  a1[2672] = 1;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9457D00, memory_order_acquire) & 1) == 0)
  {
    uint64_t v13 = a6;
    uint64_t v12 = a5;
    unsigned int v11 = a4;
    uint64_t v9 = a2;
    uint64_t v10 = a3;
    int v8 = __cxa_guard_acquire(&qword_1E9457D00);
    a2 = v9;
    a3 = v10;
    a4 = v11;
    a5 = v12;
    a6 = v13;
    if (v8)
    {
      qword_1E94584E0 = 0;
      *(void *)algn_1E94584E8 = 0;
      qword_1E94584F0 = 0;
      __cxa_atexit((void (*)(void *))sub_19E142EEC, &qword_1E94584E0, &dword_19E138000);
      __cxa_guard_release(&qword_1E9457D00);
      a2 = v9;
      a3 = v10;
      a4 = v11;
      a5 = v12;
      a6 = v13;
    }
  }
  uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 304))(a1, a2, a3, a4, a5, a6, &qword_1E94584E0);
  a1[2672] = 0;
  return result;
}

uint64_t sub_19E1F3B84(unsigned char *a1)
{
  a1[2672] = 1;
  uint64_t result = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 296))(a1);
  a1[2672] = 0;
  return result;
}

char *sub_19E1F3BDC(uint64_t a1, void *lpsrc)
{
  if (*(_DWORD *)(a1 + 2496) != 1) {
    sub_19E2F6320(1);
  }
  uint64_t result = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3DF8, 0);
  if (!result) {
    __cxa_bad_cast();
  }
  *(void *)(a1 + 2504) = result + 232;
  *(void *)(a1 + 2520) = result + 248;
  *(void *)(a1 + 2512) = result + 240;
  *(void *)(a1 + 2528) = result + 256;
  *(void *)(a1 + 2536) = result + 264;
  *(void *)(a1 + 2552) = result + 280;
  *(void *)(a1 + 2544) = result + 272;
  *(void *)(a1 + 2560) = result + 288;
  *(void *)(a1 + 2568) = result + 296;
  *(void *)(a1 + 2576) = result + 304;
  *(void *)(a1 + 2584) = result + 312;
  *(void *)(a1 + 2592) = result + 320;
  *(void *)(a1 + 2600) = result + 328;
  *(void *)(a1 + 2608) = result + 336;
  *(void *)(a1 + 2616) = result + 344;
  return result;
}

void sub_19E1F3CD8(uint64_t a1, void *lpsrc)
{
  if (!*(_DWORD *)(a1 + 2496))
  {
    if (!__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0A3C38, (const struct __class_type_info *)&unk_1EF0A3DF8, 0))__cxa_bad_cast(); {
    sub_19E2F6320(34);
    }
  }
  sub_19E2F6320(1);
}

void sub_19E1F3D4C()
{
}

void sub_19E1F3D60()
{
}

void sub_19E1F3D78(void *a1)
{
  uint64_t v1 = sub_19E1F6D8C(a1);

  operator delete(v1);
}

uint64_t sub_19E1F3DA0(uint64_t result, FILE *a2, int *a3, int a4, int a5, unsigned int a6)
{
  if (a6 > 0x20 || ((1 << a6) & 0x100010100) == 0) {
    sub_19E2F6320(23);
  }
  switch(a5)
  {
    case 8:
      if (a6 == 32)
      {
LABEL_9:
        sub_19E1F3FE4(result, a2, a3, a4);
      }
LABEL_27:
      sub_19E2F6320(45);
    case 16:
      if (a6 == 32)
      {
        goto LABEL_9;
      }
      goto LABEL_27;
    case 32:
      switch(a6)
      {
        case 0x20u:
          goto LABEL_9;
        case 8u:
          sub_19E1C696C(result, a2, a3, a4);
        case 0x10u:
          sub_19E1C689C(result, a2, a3, a4);
      }
      break;
  }
  return result;
}

uint64_t sub_19E1F3EB8(uint64_t result, FILE *a2, int *a3, int a4, int a5, unsigned int a6)
{
  if (a6 > 0x20 || ((1 << a6) & 0x100010100) == 0) {
    sub_19E2F6320(23);
  }
  switch(a5)
  {
    case 8:
      if (a6 == 32)
      {
LABEL_9:
        sub_19E1F410C(result, a2, a3, a4);
      }
LABEL_27:
      sub_19E2F6320(45);
    case 16:
      if (a6 == 32)
      {
        goto LABEL_9;
      }
      goto LABEL_27;
    case 32:
      switch(a6)
      {
        case 0x20u:
          goto LABEL_9;
        case 8u:
          sub_19E1C6F68(result, a2, a3, a4);
        case 0x10u:
          sub_19E1C6E8C(result, a2, a3, a4);
      }
      break;
  }
  return result;
}

void sub_19E1F3FE4(int a1, FILE *__stream, int *a3, int a4)
{
  if (__stream)
  {
    if (a4 == 3)
    {
      int v6 = *a3 & 0xF;
      if (*a3 <= 0) {
        int v6 = -(-*a3 & 0xF);
      }
      if (v6 >= 15) {
        int v7 = 16;
      }
      else {
        int v7 = 15 - v6;
      }
      sub_19E2F673C(__stream, a3, v7);
      sub_19E2F67D4((size_t)__stream, a3, 85, v7);
      if ((*(unsigned char *)a3 & 0xF) != 0) {
        sub_19E2F6320(17);
      }
    }
    operator new[]();
  }
  sub_19E2F6320(9);
}

void sub_19E1F410C(int a1, FILE *__stream, int *a3, int a4)
{
  if (__stream)
  {
    if (a4 == 3)
    {
      int v6 = *a3 & 0xF;
      if (*a3 <= 0) {
        int v6 = -(-*a3 & 0xF);
      }
      if (v6 >= 15) {
        int v7 = 16;
      }
      else {
        int v7 = 15 - v6;
      }
      sub_19E2F673C(__stream, a3, v7);
      sub_19E2F67D4((size_t)__stream, a3, 85, v7);
      if ((*(unsigned char *)a3 & 0xF) != 0) {
        sub_19E2F6320(18);
      }
    }
    operator new[]();
  }
  sub_19E2F6320(9);
}

uint64_t sub_19E1F4230(uint64_t result, float a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4 = *(unsigned int *)(result + 16);
  if ((int)v4 >= 1)
  {
    if ((int)a4 >= 1)
    {
      int v5 = *(float ***)(result + 24);
      if (a4 <= 7)
      {
        do
        {
          unsigned int v11 = *v5;
          *void *v5 = **v5 * a2;
          if (a4 != 1)
          {
            v11[1] = v11[1] * a2;
            if (a4 != 2)
            {
              v11[2] = v11[2] * a2;
              if (a4 != 3)
              {
                v11[3] = v11[3] * a2;
                if (a4 != 4)
                {
                  v11[4] = v11[4] * a2;
                  if (a4 != 5)
                  {
                    v11[5] = v11[5] * a2;
                    if (a4 != 6) {
                      v11[6] = v11[6] * a2;
                    }
                  }
                }
              }
            }
          }
          ++v5;
          --v4;
        }
        while (v4);
      }
      else
      {
        uint64_t v6 = a4 & 0xFFFFFFF8;
        uint64_t v7 = a4 - v6;
        if (a4 == v6)
        {
          do
          {
            int v8 = (float32x4_t *)(v5[v7] + 4);
            uint64_t v9 = a4 & 0xFFFFFFF8;
            do
            {
              float32x4_t v10 = vmulq_n_f32(*v8, a2);
              v8[-1] = vmulq_n_f32(v8[-1], a2);
              *int v8 = v10;
              v8 += 2;
              v9 -= 8;
            }
            while (v9);
            ++v7;
          }
          while (v7 != v4);
        }
        else
        {
          for (uint64_t i = 0; i != v4; ++i)
          {
            uint64_t v13 = (float32x4_t *)v5[i];
            uint64_t v14 = v13 + 1;
            uint64_t v15 = a4 & 0xFFFFFFF8;
            do
            {
              float32x4_t v16 = vmulq_n_f32(*v14, a2);
              v14[-1] = vmulq_n_f32(v14[-1], a2);
              *uint64_t v14 = v16;
              v14 += 2;
              v15 -= 8;
            }
            while (v15);
            uint64_t v17 = (float *)((char *)v13->f32 + ((4 * a4) & 0x3FFFFFFE0));
            uint64_t v18 = a4 - v6;
            do
            {
              float *v17 = *v17 * a2;
              ++v17;
              --v18;
            }
            while (v18);
          }
        }
      }
    }
    uint64_t v19 = *(void *)(result + 48);
    uint64_t v21 = *(unsigned char **)v19;
    uint64_t v20 = *(unsigned char **)(v19 + 8);
    size_t v22 = v20 - v21;
    if (v20 != v21)
    {
      if ((v22 & 0x8000000000000000) != 0) {
        sub_19E13D694();
      }
      int v23 = operator new(v20 - v21);
      memcpy(v23, v21, v22);
    }
    sub_19E2F6320(67);
  }
  return result;
}

void sub_19E1F440C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E1F4438(float **a1, void *a2, void *a3, int a4, int a5, float a6)
{
  float v11 = sub_19E2F6308();
  float __B = sub_19E2F6308() * v11;
  uint64_t v13 = qword_1EB2207D8;
  uint64_t v12 = (char *)qword_1EB2207E0;
  unint64_t v14 = qword_1EB2207E0 - qword_1EB2207D8;
  size_t v15 = a5 - (qword_1EB2207E0 - qword_1EB2207D8);
  if (a5 <= (unint64_t)(qword_1EB2207E0 - qword_1EB2207D8))
  {
    int v22 = a4;
    if (a5 < (unint64_t)(qword_1EB2207E0 - qword_1EB2207D8)) {
      qword_1EB2207E0 = qword_1EB2207D8 + a5;
    }
  }
  else
  {
    if (qword_1EB2207E8 - qword_1EB2207E0 >= v15)
    {
      bzero((void *)qword_1EB2207E0, a5 - (qword_1EB2207E0 - qword_1EB2207D8));
      qword_1EB2207E0 = (uint64_t)&v12[v15];
      int v22 = a4;
      goto LABEL_33;
    }
    uint64_t v45 = a1;
    unint64_t v46 = a3;
    if (a5 < 0) {
      sub_19E13D694();
    }
    unint64_t v16 = 2 * (qword_1EB2207E8 - qword_1EB2207D8);
    if (v16 <= a5) {
      unint64_t v16 = a5;
    }
    if ((unint64_t)(qword_1EB2207E8 - qword_1EB2207D8) >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v17 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v17 = v16;
    }
    uint64_t v18 = (uint64_t)operator new(v17);
    uint64_t v44 = v18 + v17;
    uint64_t v43 = v18 + a5;
    uint64_t v19 = v18 + v14;
    bzero((void *)(v18 + v14), v15);
    if (v12 != (char *)v13)
    {
      if (v14 < 8)
      {
        uint64_t v21 = v18 + a5;
        uint64_t v20 = v44;
        goto LABEL_29;
      }
      uint64_t v21 = v18 + a5;
      uint64_t v20 = v44;
      if ((unint64_t)(v13 - v18) >= 0x20)
      {
        if (v14 < 0x20)
        {
          unint64_t v23 = 0;
          goto LABEL_24;
        }
        unint64_t v23 = v14 & 0xFFFFFFFFFFFFFFE0;
        uint64_t v24 = v12 - 16;
        uint64_t v25 = &v12[v18 - 16 - v13];
        unint64_t v26 = v14 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v27 = *(_OWORD *)v24;
          *((_OWORD *)v25 - 1) = *((_OWORD *)v24 - 1);
          *(_OWORD *)uint64_t v25 = v27;
          v25 -= 32;
          v24 -= 32;
          v26 -= 32;
        }
        while (v26);
        if (v14 == v23) {
          goto LABEL_31;
        }
        if ((v14 & 0x18) != 0)
        {
LABEL_24:
          v19 -= v14 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v28 = &v12[-v23 - 8];
          uint64_t v29 = &v28[-v13];
          unint64_t v30 = v23 - (v14 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v31 = *(void *)v28;
            v28 -= 8;
            *(void *)&v29[v18] = v31;
            v29 -= 8;
            v30 += 8;
          }
          while (v30);
          v12 -= v14 & 0xFFFFFFFFFFFFFFF8;
          if (v14 != (v14 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_29;
          }
LABEL_31:
          uint64_t v12 = (char *)v13;
          int v22 = a4;
          qword_1EB2207D8 = v18;
          qword_1EB2207E0 = v21;
          qword_1EB2207E8 = v20;
          a1 = v45;
          a3 = v46;
          if (!v13) {
            goto LABEL_33;
          }
          goto LABEL_32;
        }
        v19 -= v23;
        v12 -= v23;
      }
LABEL_29:
      float32x4_t v32 = (unsigned char *)(v19 - 1);
      do
      {
        char v33 = *--v12;
        *v32-- = v33;
      }
      while (v12 != (char *)v13);
      goto LABEL_31;
    }
    a1 = v45;
    qword_1EB2207D8 = v19;
    qword_1EB2207E0 = v43;
    qword_1EB2207E8 = v44;
    a3 = v46;
    int v22 = a4;
    if (v12) {
LABEL_32:
    }
      operator delete(v12);
  }
LABEL_33:
  unint64_t v34 = (qword_1EB2206A8 - qword_1EB2206A0) >> 2;
  if (v22 <= v34)
  {
    if (v22 < v34) {
      qword_1EB2206A8 = qword_1EB2206A0 + 4 * v22;
    }
  }
  else
  {
    sub_19E164E6C((uint64_t)&qword_1EB2206A0, v22 - v34);
  }
  if (a5 >= 1)
  {
    uint64_t v35 = 0;
    do
    {
      float v37 = *(float *)(*a2 + 4 * v35);
      if (v37 <= -5.0)
      {
        LOBYTE(v36) = -127;
      }
      else if (v37 < 5.0 && (int v36 = llroundf(v37 * 25.6), v36 <= 127))
      {
        if (v36 <= -127) {
          LOBYTE(v36) = -127;
        }
      }
      else
      {
        LOBYTE(v36) = 127;
      }
      *(unsigned char *)(qword_1EB2207D8 + v35++) = v36;
    }
    while (a5 != v35);
  }
  uint64_t v38 = *a3;
  v57[1] = 0x3F80000000020008;
  v57[2] = 0;
  v56[2] = 0;
  v57[0] = a5;
  v56[0] = v22;
  v56[1] = 0x3F80000000010020;
  v50[0] = a5;
  v50[1] = v22;
  v50[2] = v38;
  v50[3] = 0x3F80000000020008;
  v50[4] = 0;
  v50[5] = 0;
  long long v51 = xmmword_19E351628;
  long long v52 = unk_19E351638;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  bzero(v49, 0x20uLL);
  v49[0] = 1;
  unint64_t v39 = (void *)MEMORY[0x19F3BB0D0](v57, v56, v50, v49);
  if (!v39) {
    sub_19E2F6320(1012);
  }
  uint64_t v40 = v39;
  int v41 = BNNSFilterApply(v39, (const void *)qword_1EB2207D8, (void *)qword_1EB2206A0);
  uint64_t v42 = *a1;
  if (a6 != 0.0)
  {
    vDSP_vsma((const float *)qword_1EB2206A0, 1, &__B, v42, 1, *a1, 1, v22);
    if (!v41) {
      goto LABEL_50;
    }
LABEL_52:
    sub_19E2F6320(345);
  }
  vDSP_vsmul((const float *)qword_1EB2206A0, 1, &__B, v42, 1, v22);
  if (v41) {
    goto LABEL_52;
  }
LABEL_50:
  BNNSFilterDestroy(v40);
}

void sub_19E1F4834(uint64_t a1, void *a2, void *a3, int a4, uint64_t a5)
{
  if (a4 < 0x2000000) {
    uint64_t v8 = 1;
  }
  else {
    uint64_t v8 = HIBYTE(a4);
  }
  uint64_t v9 = *(void *)(a1 + 2680);
  if (v9)
  {
    BOOL v297 = *(unsigned char *)(v9 + 464) != 0;
    if (a3[1] == *a3) {
      goto LABEL_11;
    }
  }
  else
  {
    BOOL v297 = 0;
    if (a3[1] == *a3) {
      goto LABEL_11;
    }
  }
  if (*(int *)(a1 + 56) >= 1)
  {
    int v302 = (**(uint64_t (***)(uint64_t))a1)(a1);
    uint64_t v9 = *(void *)(a1 + 2680);
    if (!v9) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_11:
  int v302 = 0;
  if (!v9)
  {
LABEL_13:
    float v10 = 50.0;
    goto LABEL_14;
  }
LABEL_12:
  float v10 = *(float *)(v9 + 468);
  if (v10 <= 0.0) {
    goto LABEL_13;
  }
LABEL_14:
  if (a5 && *(unsigned char *)(a1 + 2672)) {
    sub_19E2F6320(34);
  }
  unsigned int v11 = a4 & 0xFFFFFF;
  if (a5) {
    _ZF = *(unsigned char *)(a1 + 42) == 0;
  }
  else {
    _ZF = 0;
  }
  unsigned int v13 = _ZF;
  int v14 = v302;
  if (v11 > v13)
  {
    signed int v299 = v11 - 1;
    __asm { FMOV            V0.4S, #-5.0 }
    int8x16_t v305 = _Q0;
    float32x4_t v306 = (float32x4_t)vdupq_n_s32(0x3D200000u);
    __asm { FMOV            V5.4S, #5.0 }
    unsigned int v298 = v11;
    int8x16_t v304 = _Q5;
    while (1)
    {
      signed int v19 = v11 + ~v13;
      if (!*(unsigned char *)(a1 + 2672)) {
        signed int v19 = v13;
      }
      uint64_t v20 = v19;
      BOOL v21 = *(unsigned char *)(a1 + 2672) ? v19 < v299 : v19 > 0;
      BOOL v310 = v21;
      uint64_t v22 = *(unsigned char *)(a1 + 2672) ? v20 + 1 : v20 - 1;
      int v23 = *(unsigned __int8 *)(a1 + 42);
      uint64_t v24 = ((*(unsigned char *)(a1 + 42) != 0) & v14) != 0 ? 1 : v20;
      uint64_t v25 = *(void *)(a1 + 64);
      uint64_t v307 = v22;
      uint64_t v308 = v24;
      uint64_t v26 = 8 * v24;
      if (v14) {
        break;
      }
      memmove(*(void **)(v25 + 8 * v24), *(const void **)(*a2 + 8 * v24), 4 * *(int *)(a1 + 44));
      int v27 = *(unsigned __int8 *)(a1 + 40);
      if (*(unsigned char *)(a1 + 40)) {
        goto LABEL_40;
      }
LABEL_41:
      if (v14)
      {
        int v28 = *(_DWORD *)(a1 + 48);
        uint64_t v29 = *(_DWORD **)(*(void *)(a1 + 208) + 24 * v20);
        *uint64_t v29 = **(_DWORD **)(*a3 + 24 * v20);
        if (v27) {
          v29[1] = v28 - 1;
        }
      }
      uint64_t v30 = *(void *)(a1 + 136);
      if (v8 == 1) {
        memcpy(*(void **)(v30 + v26), *(const void **)(*(void *)(a1 + 64) + v26), 4 * *(int *)(a1 + 48));
      }
      else {
        memmove(*(void **)(v30 + v26), *(const void **)(*a2 + v26), 4 * *(_DWORD *)(a1 + 44) * (int)v8);
      }
      if ((int)v8 > *(_DWORD *)(a1 + 2688)) {
        sub_19E2F6320(83724);
      }
      if (v23) {
        uint64_t v31 = 1;
      }
      else {
        uint64_t v31 = v20;
      }
      uint64_t v32 = 8 * v31;
      if (*(unsigned char *)(a1 + 2692))
      {
        bzero(*(void **)(*(void *)(a1 + 544) + 8 * v31), 4 * *(int *)(a1 + 52));
        bzero(*(void **)(*(void *)(a1 + 568) + 8 * v31), 4 * *(int *)(a1 + 52));
        bzero(*(void **)(*(void *)(a1 + 616) + 8 * v31), 4 * *(int *)(a1 + 52));
        bzero(*(void **)(*(void *)(a1 + 592) + 8 * v31), 4 * *(int *)(a1 + 52));
      }
      bzero(*(void **)(*(void *)(a1 + 352) + 8 * v31), 4 * *(_DWORD *)(a1 + 52) * (int)v8);
      bzero(*(void **)(*(void *)(a1 + 376) + 8 * v31), 4 * *(_DWORD *)(a1 + 52) * (int)v8);
      bzero(*(void **)(*(void *)(a1 + 400) + 8 * v31), 4 * *(_DWORD *)(a1 + 52) * (int)v8);
      bzero(*(void **)(*(void *)(a1 + 424) + 8 * v31), 4 * *(_DWORD *)(a1 + 52) * (int)v8);
      uint64_t v33 = *(void *)(a1 + 2680);
      if (!v33)
      {
LABEL_73:
        int v37 = 0;
        BOOL v39 = !v310;
LABEL_74:
        sub_19E1F678C(a1, v302, (const float **)(*(void *)(a1 + 424) + 8 * v31), (void *)(*(void *)(a1 + 136) + 8 * v308), *(uint64_t **)(a1 + 2528), *(void *)(a1 + 208) + 24 * (int)v20, v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1);
        char v309 = 0;
LABEL_75:
        char v41 = 1;
        if (!v39 && (v37 & 1) == 0)
        {
          sub_19E1F697C((float **)(*(void *)(a1 + 424) + 8 * v31), (void *)(*(void *)(a1 + 160) + 8 * (int)v307), *(void **)(a1 + 2560), v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1.0);
          char v41 = 0;
        }
        goto LABEL_78;
      }
      int v34 = *(_DWORD *)(v33 + 40);
      if (!*(unsigned char *)(v33 + 20) && (v34 == 5 || v34 == 2))
      {
        BOOL v35 = *(_DWORD *)(v33 + 44) == 6;
        if (v34 == 5) {
          goto LABEL_61;
        }
      }
      else
      {
        BOOL v35 = 0;
        if (v34 == 5) {
          goto LABEL_61;
        }
      }
      if (v34 != 2)
      {
        if (!v35) {
          goto LABEL_73;
        }
        int v37 = 0;
LABEL_68:
        char v40 = 1;
        sub_19E1F5DE8(a1, 0, (float **)(*(void *)(a1 + 352) + v32), (float **)(*(void *)(a1 + 376) + v32), (float **)(*(void *)(a1 + 424) + v32), (void **)(*(void *)(a1 + 400) + v32), (void *)(*(void *)(a1 + 136) + 8 * v308), *(void **)(a1 + 2504), *(void *)(a1 + 208) + 24 * (int)v20, v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1u);
        BOOL v39 = !v310;
        char v309 = 1;
        if ((v310 & v37 & 1) == 0) {
          goto LABEL_75;
        }
        goto LABEL_69;
      }
LABEL_61:
      BOOL v36 = *(_DWORD *)(v33 + 60) == 22;
      int v37 = v36;
      if (v35) {
        goto LABEL_68;
      }
      BOOL v38 = v310;
      BOOL v39 = !v310;
      if (!v36) {
        BOOL v38 = 0;
      }
      if (!v38) {
        goto LABEL_74;
      }
      char v40 = 0;
LABEL_69:
      std::string __p = 0;
      v312 = 0;
      uint64_t v313 = 0;
      sub_19E1F5DE8(a1, 0, (float **)(*(void *)(a1 + 352) + v32), (float **)(*(void *)(a1 + 376) + v32), (float **)(*(void *)(a1 + 424) + v32), (void **)(*(void *)(a1 + 400) + v32), (void *)(*(void *)(a1 + 160) + 8 * (int)v307), *(void **)(a1 + 2536), (uint64_t)&__p, v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1u);
      if (__p)
      {
        v312 = __p;
        operator delete(__p);
      }
      int v37 = 1;
      char v41 = 1;
      char v309 = 1;
      if ((v40 & 1) == 0) {
        goto LABEL_74;
      }
LABEL_78:
      uint64_t v42 = *(void *)(a1 + 2680);
      if (v42 && *(unsigned char *)(v42 + 244)) {
        goto LABEL_310;
      }
      uint64_t v43 = *(unsigned int *)(a1 + 52);
      uint64_t v44 = (uint64_t *)(*(void *)(a1 + 424) + 8 * v31);
      uint64_t v45 = (v43 * v8);
      int v14 = v302;
      if ((int)v45 >= 1)
      {
        unint64_t v46 = (float *)*v44;
        do
        {
          int v47 = -1035468800;
          if (*v46 < -50.0 || (int v47 = 1112014848, *v46 > 50.0)) {
            *(_DWORD *)unint64_t v46 = v47;
          }
          ++v46;
          --v45;
        }
        while (v45);
      }
      char v303 = v41;
      sub_19E1655C4((float32x2_t **)(*(void *)(a1 + 520) + 8 * v31), v44, v8, v43, *(_DWORD *)(a1 + 740));
      if ((v309 & 1) == 0) {
        sub_19E1F678C(a1, v302, (const float **)(*(void *)(a1 + 352) + 8 * v31), (void *)(*(void *)(a1 + 136) + 8 * v308), *(uint64_t **)(a1 + 2504), *(void *)(a1 + 208) + 24 * (int)v20, v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1);
      }
      uint64_t v49 = *(void *)(a1 + 2680);
      if (v49)
      {
        if (*(unsigned char *)(v49 + 244)) {
LABEL_310:
        }
          sub_19E2F6320(200);
      }
      uint64_t v50 = *(void *)(a1 + 352);
      uint64_t v51 = *(unsigned int *)(a1 + 52);
      int8x16_t v53 = v305;
      float32x4_t v52 = v306;
      int8x16_t v54 = v304;
      if (v310)
      {
        if (v37)
        {
          uint64_t v55 = (int)v307;
          uint64_t v56 = *(__int32 ***)(a1 + 2568);
          uint64_t v57 = *(void *)(a1 + 184);
          if (!v49) {
            goto LABEL_98;
          }
        }
        else
        {
          sub_19E1F697C((float **)(v50 + 8 * v31), (void *)(*(void *)(a1 + 160) + 8 * v307), *(void **)(a1 + 2536), v8, *(_DWORD *)(a1 + 52), v51, 1.0);
          int8x16_t v54 = v304;
          int8x16_t v53 = v305;
          float32x4_t v52 = v306;
          uint64_t v49 = *(void *)(a1 + 2680);
          uint64_t v50 = *(void *)(a1 + 352);
          uint64_t v55 = v307;
          uint64_t v51 = *(unsigned int *)(a1 + 52);
          uint64_t v56 = *(__int32 ***)(a1 + 2568);
          uint64_t v57 = *(void *)(a1 + 184);
          if (!v49)
          {
LABEL_98:
            if (!v8) {
              goto LABEL_124;
            }
LABEL_99:
            if ((int)v51 < 1) {
              goto LABEL_124;
            }
            uint64_t v58 = 0;
            float32x4_t v59 = *(float32x4_t **)(v50 + 8 * v31);
            uint64_t v60 = *(float32x4_t **)(v57 + 8 * v55);
            uint64_t v61 = 4 * v51;
            int v62 = *v56;
            int v63 = v59;
            uint64_t v64 = v60;
            while (2)
            {
              if (v51 >= 8)
              {
                uint64_t v65 = 0;
                uint64_t v66 = v61 + v61 * v58;
                unint64_t v67 = (unint64_t)v60 + v66;
                unint64_t v68 = (unint64_t)v59 + v66;
                unint64_t v69 = (unint64_t)v59 + v61 * v58;
                BOOL v71 = v69 < v67 && (unint64_t)v60 + v61 * v58 < v68;
                if ((unint64_t)v62 < v68 && v69 < (unint64_t)v62 + v51) {
                  goto LABEL_121;
                }
                if (v71) {
                  goto LABEL_121;
                }
                uint64_t v73 = v51 & 0xFFFFFFFC;
                int v74 = v63;
                uint64_t v75 = v64;
                uint64_t v76 = v62;
                do
                {
                  __int32 v77 = *v76++;
                  v48.i32[0] = v77;
                  int16x4_t v78 = (int16x4_t)vmovl_u8(*(uint8x8_t *)v48.f32).u64[0];
                  int16x4_t v79 = vshr_n_s16(vshl_n_s16(v78, 8uLL), 8uLL);
                  float32x4_t v80 = *v75++;
                  float32x4_t v48 = (float32x4_t)vbslq_s8((int8x16_t)vmovl_s16(vceq_s16(v78, (int16x4_t)0x7F007F007F007FLL)), v54, vbslq_s8((int8x16_t)vmovl_s16(vcgt_s16(v79, (int16x4_t)0x7E007E007E007ELL)), (int8x16_t)vmulq_f32(vcvtq_f32_s32(vmovl_s16(v79)), v52), v53));
                  *int v74 = vmlaq_f32(*v74, v80, v48);
                  ++v74;
                  v73 -= 4;
                }
                while (v73);
                uint64_t v65 = v51 & 0xFFFFFFFC;
                if (v65 != v51) {
                  goto LABEL_121;
                }
              }
              else
              {
                uint64_t v65 = 0;
                do
                {
LABEL_121:
                  int v81 = *((char *)v62 + v65);
                  float v82 = -5.0;
                  if (v81 >= -126)
                  {
                    float v82 = 5.0;
                    if (v81 != 127) {
                      float v82 = (float)v81 * 0.039062;
                    }
                  }
                  v63->f32[v65] = v63->f32[v65] + (float)(v64->f32[v65] * v82);
                  ++v65;
                }
                while (v51 != v65);
              }
              ++v58;
              uint64_t v64 = (float32x4_t *)((char *)v64 + v61);
              int v63 = (float32x4_t *)((char *)v63 + v61);
              if (v58 == v8) {
                goto LABEL_124;
              }
              continue;
            }
          }
        }
        if (v8 && *(unsigned char *)(v49 + 384)) {
          goto LABEL_99;
        }
      }
LABEL_124:
      float32x4_t v83 = (uint64_t *)(v50 + 8 * v31);
      uint64_t v84 = (v51 * v8);
      if ((int)v84 >= 1)
      {
        float32x4_t v85 = (float *)*v83;
        do
        {
          int v86 = -1035468800;
          if (*v85 < -50.0 || (int v86 = 1112014848, *v85 > 50.0)) {
            *(_DWORD *)float32x4_t v85 = v86;
          }
          ++v85;
          --v84;
        }
        while (v84);
      }
      sub_19E1655C4((float32x2_t **)(*(void *)(a1 + 448) + 8 * v31), v83, v8, v51, *(_DWORD *)(a1 + 736));
      if ((v309 & 1) == 0) {
        sub_19E1F678C(a1, v302, (const float **)(*(void *)(a1 + 376) + 8 * v31), (void *)(*(void *)(a1 + 136) + 8 * v308), *(uint64_t **)(a1 + 2512), *(void *)(a1 + 208) + 24 * (int)v20, v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1);
      }
      float32x4_t v88 = *(unsigned char **)(a1 + 2680);
      if (v88 && v88[244]) {
        goto LABEL_310;
      }
      int8x16_t v90 = v305;
      float32x4_t v89 = v306;
      int8x16_t v91 = v304;
      if (!v310) {
        goto LABEL_168;
      }
      uint64_t v92 = *(void *)(a1 + 376);
      unsigned int v93 = *(_DWORD *)(a1 + 52);
      if (v37)
      {
        uint64_t v94 = (int)v307;
        uint64_t v95 = *(__int32 ***)(a1 + 2576);
        uint64_t v96 = *(void *)(a1 + 184);
        if (!v88) {
          goto LABEL_142;
        }
      }
      else
      {
        uint64_t v94 = (int)v307;
        sub_19E1F697C((float **)(v92 + 8 * v31), (void *)(*(void *)(a1 + 160) + 8 * (int)v307), *(void **)(a1 + 2544), v8, v93, *(_DWORD *)(a1 + 52), 1.0);
        int8x16_t v91 = v304;
        int8x16_t v90 = v305;
        float32x4_t v89 = v306;
        float32x4_t v88 = *(unsigned char **)(a1 + 2680);
        uint64_t v92 = *(void *)(a1 + 376);
        unsigned int v93 = *(_DWORD *)(a1 + 52);
        uint64_t v95 = *(__int32 ***)(a1 + 2576);
        uint64_t v96 = *(void *)(a1 + 184);
        if (!v88)
        {
LABEL_142:
          if (!v8) {
            goto LABEL_173;
          }
          goto LABEL_143;
        }
      }
      if (!v8 || !v88[384]) {
        goto LABEL_169;
      }
LABEL_143:
      if ((int)v93 >= 1)
      {
        uint64_t v97 = 0;
        BOOL v98 = *(float32x4_t **)(v92 + 8 * v31);
        BOOL v99 = *(float32x4_t **)(v96 + 8 * v94);
        uint64_t v100 = 4 * v93;
        BOOL v101 = *v95;
        uint64_t v102 = v98;
        uint64_t v103 = v99;
        while (v93 >= 8)
        {
          uint64_t i = 0;
          uint64_t v105 = v100 + v100 * v97;
          unint64_t v106 = (unint64_t)v99 + v105;
          unint64_t v107 = (unint64_t)v98 + v105;
          unint64_t v108 = (unint64_t)v98 + v100 * v97;
          BOOL v110 = v108 < v106 && (unint64_t)v99 + v100 * v97 < v107;
          if ((unint64_t)v101 < v107 && v108 < (unint64_t)v101 + v93) {
            goto LABEL_165;
          }
          if (v110) {
            goto LABEL_165;
          }
          uint64_t v112 = v93 & 0xFFFFFFFC;
          unint64_t v113 = v102;
          uint64_t v114 = v103;
          unint64_t v115 = v101;
          do
          {
            __int32 v116 = *v115++;
            v87.i32[0] = v116;
            int16x4_t v117 = (int16x4_t)vmovl_u8(*(uint8x8_t *)v87.f32).u64[0];
            int16x4_t v118 = vshr_n_s16(vshl_n_s16(v117, 8uLL), 8uLL);
            float32x4_t v119 = *v114++;
            float32x4_t v87 = (float32x4_t)vbslq_s8((int8x16_t)vmovl_s16(vceq_s16(v117, (int16x4_t)0x7F007F007F007FLL)), v91, vbslq_s8((int8x16_t)vmovl_s16(vcgt_s16(v118, (int16x4_t)0x7E007E007E007ELL)), (int8x16_t)vmulq_f32(vcvtq_f32_s32(vmovl_s16(v118)), v89), v90));
            *unint64_t v113 = vmlaq_f32(*v113, v119, v87);
            ++v113;
            v112 -= 4;
          }
          while (v112);
          uint64_t i = v93 & 0xFFFFFFFC;
          if (i != v93) {
            goto LABEL_165;
          }
LABEL_145:
          ++v97;
          uint64_t v103 = (float32x4_t *)((char *)v103 + v100);
          uint64_t v102 = (float32x4_t *)((char *)v102 + v100);
          if (v97 == v8) {
            goto LABEL_168;
          }
        }
        for (uint64_t i = 0; i != v93; ++i)
        {
LABEL_165:
          int v120 = *((char *)v101 + i);
          float v121 = -5.0;
          if (v120 >= -126)
          {
            float v121 = 5.0;
            if (v120 != 127) {
              float v121 = (float)v120 * 0.039062;
            }
          }
          v102->f32[i] = v102->f32[i] + (float)(v103->f32[i] * v121);
        }
        goto LABEL_145;
      }
LABEL_168:
      if (!v88)
      {
LABEL_173:
        uint64_t v122 = *(unsigned int *)(a1 + 52);
LABEL_174:
        unint64_t v124 = (float32x2_t **)(a1 + 752);
        goto LABEL_180;
      }
LABEL_169:
      uint64_t v122 = *(unsigned int *)(a1 + 52);
      if (!v88[465]) {
        goto LABEL_174;
      }
      uint64_t v123 = (v122 * v8);
      unint64_t v124 = (float32x2_t **)(a1 + 752);
      if ((int)v123 < 1) {
        goto LABEL_180;
      }
      unint64_t v125 = *(float32x4_t **)(*(void *)(a1 + 376) + 8 * v31);
      if (v123 < 8)
      {
        uint64_t v126 = 0;
LABEL_178:
        uint64_t v131 = v123 - v126;
        int v132 = &v125->f32[v126];
        do
        {
          *int v132 = *v132 + 1.0;
          ++v132;
          --v131;
        }
        while (v131);
        goto LABEL_180;
      }
      uint64_t v126 = v123 & 0x7FFFFFF8;
      uint64_t v127 = v125 + 1;
      uint64_t v128 = v123 & 0xFFFFFFF8;
      do
      {
        __asm { FMOV            V2.4S, #1.0 }
        float32x4_t v130 = vaddq_f32(*v127, _Q2);
        v127[-1] = vaddq_f32(v127[-1], _Q2);
        float32x4_t *v127 = v130;
        v127 += 2;
        v128 -= 8;
      }
      while (v128);
      if (v126 != v123) {
        goto LABEL_178;
      }
LABEL_180:
      float v133 = (uint64_t *)(*(void *)(a1 + 376) + 8 * v31);
      uint64_t v134 = (v122 * v8);
      if ((int)v134 >= 1)
      {
        int v135 = (float *)*v133;
        do
        {
          int v136 = -1035468800;
          if (*v135 < -50.0 || (int v136 = 1112014848, *v135 > 50.0)) {
            *(_DWORD *)int v135 = v136;
          }
          ++v135;
          --v134;
        }
        while (v134);
      }
      sub_19E1655C4((float32x2_t **)(*(void *)(a1 + 472) + 8 * v31), v133, v8, v122, *(_DWORD *)(a1 + 736));
      uint64_t v138 = *(void *)(a1 + 184);
      uint64_t v139 = *(void *)(a1 + 520);
      uint64_t v140 = *(void *)(a1 + 448);
      uint64_t v141 = *(int *)(a1 + 52) * (uint64_t)(int)v8;
      if ((int)v141 >= 8)
      {
        unint64_t v142 = *(float32x4_t **)(v138 + 8 * v20);
        uint64_t v143 = *(float32x4_t **)(v140 + 8 * v31);
        int v144 = (int)v141 / 8;
        float v145 = *(float32x4_t **)(v139 + 8 * v31);
        do
        {
          float32x4_t v147 = *v145;
          float32x4_t v146 = v145[1];
          v145 += 2;
          float32x4_t v149 = *v143;
          float32x4_t v148 = v143[1];
          v143 += 2;
          float32x4_t v137 = vmulq_f32(v148, v146);
          *unint64_t v142 = vmulq_f32(v149, v147);
          v142[1] = v137;
          v142 += 2;
          --v144;
        }
        while (v144);
      }
      int v150 = 8 * ((int)v141 / 8);
      if (v150 < (int)v141)
      {
        uint64_t v151 = *(void *)(v139 + 8 * v31);
        uint64_t v152 = *(void *)(v140 + 8 * v31);
        uint64_t v153 = *(void *)(v138 + 8 * v20);
        unint64_t v154 = v150;
        unint64_t v155 = v141 - v150;
        if (v155 < 0xC) {
          goto LABEL_197;
        }
        uint64_t v156 = 4 * v150;
        if ((unint64_t)(v153 - v151) < 0x20) {
          goto LABEL_197;
        }
        if ((unint64_t)(v153 - v152) < 0x20) {
          goto LABEL_197;
        }
        unint64_t v157 = v155 - (v141 & 7) + v150;
        unint64_t v158 = v150 + (unint64_t)(v141 & 7) - v141;
        int v159 = (float32x4_t *)(v153 + v156 + 16);
        uint64_t v160 = (float32x4_t *)(v151 + v156 + 16);
        uint64_t v161 = (float32x4_t *)(v152 + v156 + 16);
        do
        {
          float32x4_t v137 = vmulq_f32(v161[-1], v160[-1]);
          float32x4_t v162 = vmulq_f32(*v161, *v160);
          v159[-1] = v137;
          float32x4_t *v159 = v162;
          v159 += 2;
          v160 += 2;
          v161 += 2;
          v158 += 8;
        }
        while (v158);
        unint64_t v154 = v157;
        if ((v141 & 7) != 0)
        {
LABEL_197:
          unint64_t v163 = v141 - v154;
          uint64_t v164 = (float *)(v153 + 4 * v154);
          float32x4_t v165 = (float *)(v152 + 4 * v154);
          int v166 = (float *)(v151 + 4 * v154);
          do
          {
            float v167 = *v166++;
            float v168 = v167;
            float v169 = *v165++;
            *v164++ = v169 * v168;
            --v163;
          }
          while (v163);
        }
      }
      if (v310)
      {
        if (v297)
        {
          uint64_t v170 = (*(_DWORD *)(a1 + 52) * v8);
          if ((int)v170 < 1) {
            goto LABEL_229;
          }
          uint64_t v171 = *(void *)(a1 + 184);
          uint64_t v172 = *(float32x4_t **)(v171 + 8 * (int)v307);
          unint64_t v173 = *(float32x4_t **)(*(void *)(a1 + 448) + 8 * v31);
          unint64_t v174 = *(void *)(v171 + 8 * v20);
          if (v170 < 8)
          {
            uint64_t v175 = 0;
LABEL_204:
            uint64_t v176 = v170 - v175;
            uint64_t v177 = v175;
            uint64_t v178 = (float *)(v174 + v177 * 4);
            uint64_t v179 = &v173->f32[v177];
            unint64_t v180 = &v172->f32[v177];
            do
            {
              float v181 = *v180++;
              float v182 = v181;
              float v183 = *v179++;
              *uint64_t v178 = (float)(v182 - (float)(v183 * v182)) + *v178;
              ++v178;
              --v176;
            }
            while (v176);
            goto LABEL_229;
          }
          uint64_t v175 = 0;
          unint64_t v288 = v174 + 4 * v170;
          BOOL v290 = v174 < (unint64_t)v173->u64 + 4 * v170 && (unint64_t)v173 < v288;
          if ((unint64_t)v172 < v288 && v174 < (unint64_t)v172->u64 + 4 * v170) {
            goto LABEL_204;
          }
          if (v290) {
            goto LABEL_204;
          }
          uint64_t v175 = v170 & 0x7FFFFFF8;
          uint64_t v292 = v172 + 1;
          uint64_t v293 = v173 + 1;
          int v294 = (float32x4_t *)(v174 + 16);
          uint64_t v295 = v170 & 0xFFFFFFF8;
          do
          {
            float32x4_t v137 = vaddq_f32(vmlsq_f32(v292[-1], v292[-1], v293[-1]), v294[-1]);
            float32x4_t v296 = vaddq_f32(vmlsq_f32(*v292, *v292, *v293), *v294);
            v294[-1] = v137;
            *int v294 = v296;
            v292 += 2;
            v293 += 2;
            v294 += 2;
            v295 -= 8;
          }
          while (v295);
          if (v175 != v170) {
            goto LABEL_204;
          }
        }
        else
        {
          uint64_t v184 = *(void *)(a1 + 184);
          uint64_t v185 = *(void *)(a1 + 472);
          uint64_t v186 = *(int *)(a1 + 52) * (uint64_t)(int)v8;
          if ((int)v186 >= 8)
          {
            float v187 = *(float32x4_t **)(v184 + 8 * v20);
            float v188 = *(float32x4_t **)(v184 + 8 * (int)v307);
            int v189 = (int)v186 / 8;
            uint64_t v190 = *(float32x4_t **)(v185 + 8 * v31);
            do
            {
              float32x4_t v191 = *v190;
              float32x4_t v137 = v190[1];
              v190 += 2;
              float32x4_t v193 = *v188;
              float32x4_t v192 = v188[1];
              v188 += 2;
              float32x4_t v194 = vmlaq_f32(v187[1], v192, v137);
              *float v187 = vmlaq_f32(*v187, v193, v191);
              v187[1] = v194;
              v187 += 2;
              --v189;
            }
            while (v189);
          }
          int v195 = 8 * ((int)v186 / 8);
          if (v195 < (int)v186)
          {
            uint64_t v196 = *(void *)(v185 + 8 * v31);
            uint64_t v197 = *(void *)(v184 + 8 * (int)v307);
            uint64_t v198 = *(void *)(v184 + 8 * v20);
            uint64_t v199 = v195;
            unint64_t v200 = v186 - v195;
            if (v200 < 8) {
              goto LABEL_227;
            }
            uint64_t v201 = 4 * v195;
            unint64_t v202 = v198 + 4 * v186;
            BOOL v203 = v198 + v201 >= (unint64_t)(v197 + 4 * v186) || v197 + 4 * v195 >= v202;
            BOOL v204 = !v203;
            if (v196 + v201 < v202 && v198 + v201 < (unint64_t)(v196 + 4 * v186)) {
              goto LABEL_227;
            }
            if (v204) {
              goto LABEL_227;
            }
            uint64_t v206 = v200 - (v186 & 7) + v199;
            uint64_t v207 = v199 + (v186 & 7) - v186;
            uint64_t v208 = (float32x4_t *)(v198 + v201 + 16);
            float32x4_t v209 = (float32x4_t *)(v196 + v201 + 16);
            uint64_t v210 = (float32x4_t *)(v197 + v201 + 16);
            do
            {
              float32x4_t v137 = v209[-1];
              float32x4_t v211 = vmlaq_f32(*v208, *v210, *v209);
              v208[-1] = vmlaq_f32(v208[-1], v210[-1], v137);
              *uint64_t v208 = v211;
              v208 += 2;
              v209 += 2;
              v210 += 2;
              v207 += 8;
            }
            while (v207);
            uint64_t v199 = v206;
            if ((v186 & 7) != 0)
            {
LABEL_227:
              uint64_t v212 = v186 - v199;
              uint64_t v213 = (float *)(v198 + 4 * v199);
              unint64_t v214 = (float *)(v197 + 4 * v199);
              unint64_t v215 = (float *)(v196 + 4 * v199);
              do
              {
                float v216 = *v215++;
                float v217 = v216;
                float v218 = *v214++;
                *uint64_t v213 = *v213 + (float)(v218 * v217);
                ++v213;
                --v212;
              }
              while (v212);
            }
          }
        }
      }
LABEL_229:
      int v219 = *(_DWORD *)(a1 + 52);
      uint64_t v220 = (v219 * v8);
      if ((int)v220 >= 1)
      {
        uint64_t v221 = *(float **)(*(void *)(a1 + 184) + 8 * v20);
        do
        {
          float v222 = -v10;
          if (*v221 < (float)-v10 || (float v222 = v10, *v221 > v10)) {
            *uint64_t v221 = v222;
          }
          ++v221;
          --v220;
        }
        while (v220);
      }
      if ((v309 & 1) == 0) {
        sub_19E1F678C(a1, v302, (const float **)(*(void *)(a1 + 400) + 8 * v31), (void *)(*(void *)(a1 + 136) + 8 * v308), *(uint64_t **)(a1 + 2520), *(void *)(a1 + 208) + 24 * (int)v20, v8, v219, *(_DWORD *)(a1 + 48), 1);
      }
      uint64_t v223 = *(void *)(a1 + 2680);
      if (v223 && *(unsigned char *)(v223 + 244)) {
        goto LABEL_310;
      }
      uint64_t v224 = *(void *)(a1 + 400);
      uint64_t v225 = *(unsigned int *)(a1 + 52);
      if ((v303 & 1) == 0)
      {
        sub_19E1F697C((float **)(v224 + 8 * v31), (void *)(*(void *)(a1 + 160) + 8 * (int)v307), *(void **)(a1 + 2552), v8, *(_DWORD *)(a1 + 52), v225, 1.0);
        uint64_t v223 = *(void *)(a1 + 2680);
        uint64_t v224 = *(void *)(a1 + 400);
        uint64_t v225 = *(unsigned int *)(a1 + 52);
      }
      int64_t v226 = (uint64_t *)(v224 + 8 * v31);
      if (v223)
      {
        if (!v8 || !*(unsigned char *)(v223 + 384)) {
          goto LABEL_272;
        }
      }
      else if (!v8)
      {
        goto LABEL_272;
      }
      if ((int)v225 >= 1)
      {
        uint64_t v227 = 0;
        uint64_t v228 = *v226;
        uint64_t v229 = *(float32x4_t **)(*(void *)(a1 + 184) + 8 * v20);
        uint64_t v230 = 4 * v225;
        size_t v231 = **(__int32 ***)(a1 + 2584);
        uint64_t v232 = (float32x4_t *)*v226;
        float v233 = v229;
        while (v225 >= 8)
        {
          uint64_t v234 = 0;
          uint64_t v235 = v230 + v230 * v227;
          unint64_t v236 = (unint64_t)v229 + v235;
          unint64_t v237 = v228 + v235;
          unint64_t v238 = v228 + v230 * v227;
          BOOL v240 = v238 < v236 && (unint64_t)v229 + v230 * v227 < v237;
          if ((unint64_t)v231 < v237 && v238 < (unint64_t)v231 + v225) {
            goto LABEL_269;
          }
          if (v240) {
            goto LABEL_269;
          }
          uint64_t v242 = v225 & 0xFFFFFFFC;
          int v243 = v232;
          int v244 = v233;
          int v245 = v231;
          do
          {
            __int32 v246 = *v245++;
            v137.i32[0] = v246;
            int16x4_t v247 = (int16x4_t)vmovl_u8(*(uint8x8_t *)v137.f32).u64[0];
            int16x4_t v248 = vshr_n_s16(vshl_n_s16(v247, 8uLL), 8uLL);
            float32x4_t v249 = *v244++;
            float32x4_t v137 = (float32x4_t)vbslq_s8((int8x16_t)vmovl_s16(vceq_s16(v247, (int16x4_t)0x7F007F007F007FLL)), v304, vbslq_s8((int8x16_t)vmovl_s16(vcgt_s16(v248, (int16x4_t)0x7E007E007E007ELL)), (int8x16_t)vmulq_f32(vcvtq_f32_s32(vmovl_s16(v248)), v306), v305));
            *int v243 = vmlaq_f32(*v243, v249, v137);
            ++v243;
            v242 -= 4;
          }
          while (v242);
          uint64_t v234 = v225 & 0xFFFFFFFC;
          if (v234 != v225) {
            goto LABEL_269;
          }
LABEL_249:
          ++v227;
          float v233 = (float32x4_t *)((char *)v233 + v230);
          uint64_t v232 = (float32x4_t *)((char *)v232 + v230);
          if (v227 == v8) {
            goto LABEL_272;
          }
        }
        uint64_t v234 = 0;
        do
        {
LABEL_269:
          int v250 = *((char *)v231 + v234);
          float v251 = -5.0;
          if (v250 >= -126)
          {
            float v251 = 5.0;
            if (v250 != 127) {
              float v251 = (float)v250 * 0.039062;
            }
          }
          v232->f32[v234] = v232->f32[v234] + (float)(v233->f32[v234] * v251);
          ++v234;
        }
        while (v225 != v234);
        goto LABEL_249;
      }
LABEL_272:
      uint64_t v252 = (v225 * v8);
      if ((int)v252 >= 1)
      {
        float32x4_t v253 = (float *)*v226;
        do
        {
          int v254 = -1035468800;
          if (*v253 < -50.0 || (int v254 = 1112014848, *v253 > 50.0)) {
            *(_DWORD *)float32x4_t v253 = v254;
          }
          ++v253;
          --v252;
        }
        while (v252);
      }
      sub_19E1655C4((float32x2_t **)(*(void *)(a1 + 496) + 8 * v31), v226, v8, v225, *(_DWORD *)(a1 + 736));
      sub_19E1655C4(v124, (uint64_t *)(*(void *)(a1 + 184) + 8 * v20), v8, *(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 744));
      uint64_t v255 = *(void *)(a1 + 160);
      uint64_t v256 = *(void *)(a1 + 496);
      uint64_t v257 = *(int *)(a1 + 52) * (uint64_t)(int)v8;
      int v258 = (int)v257 / 8;
      if ((int)v257 >= 8)
      {
        uint64_t v259 = *(float32x4_t **)(v255 + 8 * v20);
        uint64_t v260 = *(float32x4_t **)(v256 + 8 * v31);
        int v261 = (int)v257 / 8;
        uint64_t v262 = *v124;
        do
        {
          float32x4_t v264 = *(float32x4_t *)v262->f32;
          float32x4_t v263 = *(float32x4_t *)v262[2].f32;
          v262 += 4;
          float32x4_t v266 = *v260;
          float32x4_t v265 = v260[1];
          v260 += 2;
          float32x4_t *v259 = vmulq_f32(v266, v264);
          v259[1] = vmulq_f32(v265, v263);
          v259 += 2;
          --v261;
        }
        while (v261);
      }
      int v267 = 8 * v258;
      if (8 * v258 < (int)v257)
      {
        uint64_t v268 = *(void *)(v256 + 8 * v31);
        BOOL v269 = *v124;
        uint64_t v270 = *(void *)(v255 + 8 * v20);
        unint64_t v271 = v267;
        unint64_t v272 = v257 - v267;
        if (v272 < 0xC) {
          goto LABEL_289;
        }
        uint64_t v273 = 4 * v267;
        if ((unint64_t)(v270 - (void)v269) < 0x20) {
          goto LABEL_289;
        }
        if ((unint64_t)(v270 - v268) < 0x20) {
          goto LABEL_289;
        }
        unint64_t v274 = v272 - (v257 & 7) + v267;
        unint64_t v275 = v267 + (unint64_t)(v257 & 7) - v257;
        BOOL v276 = (float32x4_t *)(v270 + v273 + 16);
        BOOL v277 = (float32x4_t *)((char *)&v269[2] + v273);
        BOOL v278 = (float32x4_t *)(v268 + v273 + 16);
        do
        {
          float32x4_t v279 = vmulq_f32(*v278, *v277);
          v276[-1] = vmulq_f32(v278[-1], v277[-1]);
          *BOOL v276 = v279;
          v276 += 2;
          v277 += 2;
          v278 += 2;
          v275 += 8;
        }
        while (v275);
        unint64_t v271 = v274;
        if ((v257 & 7) != 0)
        {
LABEL_289:
          unint64_t v280 = v257 - v271;
          float v281 = (float *)(v270 + 4 * v271);
          BOOL v282 = (float *)(v268 + 4 * v271);
          int v283 = (float *)v269 + v271;
          do
          {
            float v284 = *v283++;
            float v285 = v284;
            float v286 = *v282++;
            *v281++ = v286 * v285;
            --v280;
          }
          while (v280);
        }
      }
      if (*(unsigned char *)(a1 + 2692))
      {
        uint64_t v287 = 8 * v20;
        memcpy(*(void **)(*(void *)(a1 + 112) + v287), *(const void **)(*(void *)(a1 + 160) + v287), 4 * *(int *)(a1 + 52));
        memcpy(*(void **)(*(void *)(a1 + 88) + v287), *(const void **)(*(void *)(a1 + 184) + v287), 4 * *(int *)(a1 + 52));
      }
      ++v13;
      unsigned int v11 = v298;
      if (v13 == v298) {
        return;
      }
    }
    bzero(*(void **)(v25 + 8 * v24), 4 * *(int *)(a1 + 48));
    *(_DWORD *)(*(void *)(*(void *)(a1 + 64) + v26) + 4 * **(int **)(*a3 + 24 * (int)v20)) = 1065353216;
    int v27 = *(unsigned __int8 *)(a1 + 40);
    if (!*(unsigned char *)(a1 + 40)) {
      goto LABEL_41;
    }
LABEL_40:
    *(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 8 * v308) + 4 * *(int *)(a1 + 48) - 4) = 1065353216;
    goto LABEL_41;
  }
}

void sub_19E1F5C64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E1F5C80(float **a1, int **a2, uint64_t *a3, int a4, int a5)
{
  float v10 = sub_19E2F6308();
  float v11 = sub_19E2F6308() * v10;
  unsigned int v13 = *a2;
  int v14 = a2[1];
  uint64_t v15 = (char *)v14 - (char *)*a2;
  if (v15 == 8)
  {
    if (a4 >= 1)
    {
      uint64_t v16 = *v13;
      uint64_t v17 = (*a2)[1];
      float v18 = v11 * 26.0;
      uint64_t v19 = *a3;
      uint64_t v20 = *a1;
      uint64_t v21 = a4;
      do
      {
        *v20++ = v18 * (float)(*(char *)(v19 + v17) + *(char *)(v19 + v16));
        v19 += a5;
        --v21;
      }
      while (v21);
    }
  }
  else if (a4 >= 1)
  {
    uint64_t v22 = *a1;
    if (v14 == v13)
    {
      bzero(v22, 4 * a4);
    }
    else
    {
      uint64_t v23 = 0;
      unint64_t v24 = v15 >> 2;
      float v25 = v11 * 26.0;
      uint64_t v26 = *a3;
      if (v24 <= 1) {
        unint64_t v24 = 1;
      }
      do
      {
        v22[v23] = 0.0;
        float v27 = 0.0;
        unint64_t v28 = v24;
        uint64_t v29 = v13;
        do
        {
          uint64_t v30 = *v29++;
          v12.i8[0] = *(unsigned char *)(v26 + v23 * a5 + v30);
          int8x8_t v12 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v12)).u64[0];
          *(float *)v12.i32 = (float)v12.i32[0];
          float v27 = v27 + (float)(v25 * *(float *)v12.i32);
          v22[v23] = v27;
          --v28;
        }
        while (v28);
        ++v23;
      }
      while (v23 != a4);
    }
  }
}

void sub_19E1F5DE8(uint64_t a1, int a2, float **a3, float **a4, float **a5, void **a6, void *a7, void *a8, uint64_t a9, int a10, int a11, int a12, unsigned __int8 a13)
{
  if (a2) {
    sub_19E2F6320(545);
  }
  int v18 = 4 * a11;
  if (!*(void *)(a1 + 784)) {
    operator new[]();
  }
  sub_19E1F697C((float **)(a1 + 784), a7, a8, a10, a12, 4 * a11, 0.0);
  uint64_t v19 = *a3;
  uint64_t v20 = *a4;
  uint64_t v21 = *a5;
  uint64_t v22 = (float *)*a6;
  int v23 = a11 * a10;
  vDSP_Length __N = a11 * a10;
  size_t v24 = 4 * __N;
  if (a10 >= 1)
  {
    float __C = v21;
    bzero(*(void **)(a1 + 752), 4 * v23);
    uint64_t v25 = 4 * a11;
    uint64_t v26 = 4 * v18;
    if (a11 <= 0)
    {
LABEL_28:
      if (a13)
      {
        vDSP_vadd(*(const float **)(a1 + 752), 1, v19, 1, v19, 1, __N);
        bzero(*(void **)(a1 + 752), v24);
        int v50 = a13;
        if (a11 < 1) {
          goto LABEL_52;
        }
      }
      else
      {
        memmove(v19, *(const void **)(a1 + 752), v24);
        bzero(*(void **)(a1 + 752), v24);
        int v50 = a13;
        if (a11 < 1)
        {
LABEL_52:
          if (v50)
          {
            vDSP_vadd(*(const float **)(a1 + 752), 1, v20, 1, v20, 1, __N);
            bzero(*(void **)(a1 + 752), v24);
            if (a11 < 1) {
              goto LABEL_68;
            }
          }
          else
          {
            memmove(v20, *(const void **)(a1 + 752), v24);
            bzero(*(void **)(a1 + 752), v24);
            if (a11 < 1)
            {
LABEL_68:
              if (v50)
              {
                vDSP_vadd(*(const float **)(a1 + 752), 1, __C, 1, __C, 1, __N);
                bzero(*(void **)(a1 + 752), v24);
                if (a11 < 1)
                {
LABEL_84:
                  uint64_t v105 = *(const void **)(a1 + 752);
                  if (v50)
                  {
                    uint64_t v32 = *(const float **)(a1 + 752);
                    uint64_t v33 = v22;
                    vDSP_Length v35 = a11 * a10;
                    int v34 = v22;
                    goto LABEL_86;
                  }
                  goto LABEL_91;
                }
              }
              else
              {
                memmove(__C, *(const void **)(a1 + 752), v24);
                bzero(*(void **)(a1 + 752), v24);
                if (a11 < 1) {
                  goto LABEL_84;
                }
              }
              uint64_t v88 = 0;
              uint64_t v89 = 0;
              uint64_t v90 = 3 * a11;
              uint64_t v91 = *(void *)(a1 + 784);
              uint64_t v92 = *(void *)(a1 + 752);
              uint64_t v93 = v91 + 12 * a11;
              uint64_t v94 = (long long *)(v93 + 16);
              uint64_t v95 = (_OWORD *)(v92 + 16);
              while (1)
              {
                if (a11 >= 8 && (unint64_t)(v92 + v25 * v89 - (v93 + v26 * v89)) >= 0x20)
                {
                  BOOL v101 = v95;
                  uint64_t v102 = v94;
                  uint64_t v103 = a11 & 0xFFFFFFF8;
                  do
                  {
                    long long v104 = *v102;
                    *(v101 - 1) = *(v102 - 1);
                    _OWORD *v101 = v104;
                    v102 += 2;
                    v101 += 2;
                    v103 -= 8;
                  }
                  while (v103);
                  uint64_t v96 = a11 & 0x7FFFFFF8;
                  if ((a11 & 0xFFFFFFF8) == (unint64_t)a11) {
                    goto LABEL_73;
                  }
                }
                else
                {
                  uint64_t v96 = 0;
                }
                uint64_t v97 = a11 - v96;
                BOOL v98 = (_DWORD *)(v92 + 4 * (v96 + v88));
                BOOL v99 = (int *)(v91 + 4 * (v96 + v90));
                do
                {
                  int v100 = *v99++;
                  *v98++ = v100;
                  --v97;
                }
                while (v97);
LABEL_73:
                ++v89;
                uint64_t v94 = (long long *)((char *)v94 + v26);
                uint64_t v95 = (_OWORD *)((char *)v95 + v25);
                v88 += a11;
                v90 += v18;
                if (v89 == a10) {
                  goto LABEL_84;
                }
              }
            }
          }
          uint64_t v71 = 0;
          uint64_t v72 = 0;
          uint64_t v73 = 2 * a11;
          uint64_t v74 = *(void *)(a1 + 784);
          uint64_t v75 = *(void *)(a1 + 752);
          uint64_t v76 = v74 + 8 * a11;
          __int32 v77 = (long long *)(v76 + 16);
          int16x4_t v78 = (_OWORD *)(v75 + 16);
          while (1)
          {
            if (a11 >= 8 && (unint64_t)(v75 + v25 * v72 - (v76 + v26 * v72)) >= 0x20)
            {
              uint64_t v84 = v78;
              float32x4_t v85 = v77;
              uint64_t v86 = a11 & 0xFFFFFFF8;
              do
              {
                long long v87 = *v85;
                *(v84 - 1) = *(v85 - 1);
                *uint64_t v84 = v87;
                v85 += 2;
                v84 += 2;
                v86 -= 8;
              }
              while (v86);
              uint64_t v79 = a11 & 0x7FFFFFF8;
              if ((a11 & 0xFFFFFFF8) == (unint64_t)a11) {
                goto LABEL_57;
              }
            }
            else
            {
              uint64_t v79 = 0;
            }
            uint64_t v80 = a11 - v79;
            int v81 = (_DWORD *)(v75 + 4 * (v79 + v71));
            float v82 = (int *)(v74 + 4 * (v79 + v73));
            do
            {
              int v83 = *v82++;
              *v81++ = v83;
              --v80;
            }
            while (v80);
LABEL_57:
            ++v72;
            __int32 v77 = (long long *)((char *)v77 + v26);
            int16x4_t v78 = (_OWORD *)((char *)v78 + v25);
            v71 += a11;
            v73 += v18;
            if (v72 == a10) {
              goto LABEL_68;
            }
          }
        }
      }
      uint64_t v51 = *(void *)(a1 + 784);
      uint64_t v52 = *(void *)(a1 + 752);
      uint64_t v53 = v25 + v51;
      if (a11 < 8)
      {
        int8x16_t v54 = (_DWORD *)(v52 + 12);
        uint64_t v55 = (_DWORD *)(v53 + 12);
        uint64_t v56 = a10;
        do
        {
          *(v54 - 3) = *(v55 - 3);
          if (a11 != 1)
          {
            *(v54 - 2) = *(v55 - 2);
            if (a11 != 2)
            {
              *(v54 - 1) = *(v55 - 1);
              if (a11 != 3)
              {
                _DWORD *v54 = *v55;
                if (a11 != 4)
                {
                  v54[1] = v55[1];
                  if (a11 != 5)
                  {
                    v54[2] = v55[2];
                    if (a11 != 6) {
                      v54[3] = v55[3];
                    }
                  }
                }
              }
            }
          }
          int8x16_t v54 = (_DWORD *)((char *)v54 + v25);
          uint64_t v55 = (_DWORD *)((char *)v55 + v26);
          --v56;
        }
        while (v56);
        goto LABEL_52;
      }
      uint64_t v57 = 0;
      uint64_t v58 = 0;
      float32x4_t v59 = (long long *)(v53 + 16);
      uint64_t v60 = (_OWORD *)(v52 + 16);
      uint64_t v61 = a11;
      while (1)
      {
        if ((unint64_t)(v52 + v25 * v58 - (v53 + v26 * v58)) >= 0x20)
        {
          int v63 = v60;
          uint64_t v64 = v59;
          uint64_t v65 = a11 & 0xFFFFFFF8;
          do
          {
            long long v66 = *v64;
            *(v63 - 1) = *(v64 - 1);
            _OWORD *v63 = v66;
            v64 += 2;
            v63 += 2;
            v65 -= 8;
          }
          while (v65);
          uint64_t v62 = a11 & 0x7FFFFFF8;
          if ((a11 & 0xFFFFFFF8) == (unint64_t)a11) {
            goto LABEL_43;
          }
        }
        else
        {
          uint64_t v62 = 0;
        }
        uint64_t v67 = a11 - v62;
        unint64_t v68 = (_DWORD *)(v52 + 4 * (v62 + v57));
        unint64_t v69 = (int *)(v51 + 4 * (v62 + v61));
        do
        {
          int v70 = *v69++;
          *v68++ = v70;
          --v67;
        }
        while (v67);
LABEL_43:
        ++v58;
        float32x4_t v59 = (long long *)((char *)v59 + v26);
        uint64_t v60 = (_OWORD *)((char *)v60 + v25);
        v57 += a11;
        v61 += v18;
        if (v58 == a10) {
          goto LABEL_52;
        }
      }
    }
    uint64_t v27 = *(void *)(a1 + 784);
    uint64_t v28 = *(void *)(a1 + 752);
    if (a11 < 8)
    {
      uint64_t v29 = (_DWORD *)(v28 + 12);
      uint64_t v30 = (_DWORD *)(v27 + 12);
      uint64_t v31 = a10;
      do
      {
        *(v29 - 3) = *(v30 - 3);
        if (a11 != 1)
        {
          *(v29 - 2) = *(v30 - 2);
          if (a11 != 2)
          {
            *(v29 - 1) = *(v30 - 1);
            if (a11 != 3)
            {
              *uint64_t v29 = *v30;
              if (a11 != 4)
              {
                v29[1] = v30[1];
                if (a11 != 5)
                {
                  v29[2] = v30[2];
                  if (a11 != 6) {
                    v29[3] = v30[3];
                  }
                }
              }
            }
          }
        }
        uint64_t v29 = (_DWORD *)((char *)v29 + v25);
        uint64_t v30 = (_DWORD *)((char *)v30 + v26);
        --v31;
      }
      while (v31);
      goto LABEL_28;
    }
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    BOOL v39 = (long long *)(v27 + 16);
    char v40 = (_OWORD *)(v28 + 16);
    while (1)
    {
      if ((unint64_t)(v28 + v25 * v38 - (v27 + v26 * v38)) >= 0x20)
      {
        uint64_t v42 = a11 & 0x7FFFFFF8;
        uint64_t v43 = v40;
        uint64_t v44 = v39;
        do
        {
          long long v45 = *v44;
          *(v43 - 1) = *(v44 - 1);
          _OWORD *v43 = v45;
          v44 += 2;
          v43 += 2;
          v42 -= 8;
        }
        while (v42);
        uint64_t v41 = a11 & 0xFFFFFFF8;
        if (v41 == a11) {
          goto LABEL_19;
        }
      }
      else
      {
        uint64_t v41 = 0;
      }
      uint64_t v46 = a11 - v41;
      int v47 = (_DWORD *)(v28 + 4 * (v41 + v36));
      float32x4_t v48 = (int *)(v27 + 4 * (v41 + v37));
      do
      {
        int v49 = *v48++;
        *v47++ = v49;
        --v46;
      }
      while (v46);
LABEL_19:
      v37 += v18;
      ++v38;
      BOOL v39 = (long long *)((char *)v39 + v26);
      char v40 = (_OWORD *)((char *)v40 + v25);
      v36 += a11;
      if (v38 == a10) {
        goto LABEL_28;
      }
    }
  }
  bzero(*(void **)(a1 + 752), 4 * v23);
  if (a13)
  {
    vDSP_vadd(*(const float **)(a1 + 752), 1, v19, 1, v19, 1, __N);
    bzero(*(void **)(a1 + 752), v24);
    vDSP_vadd(*(const float **)(a1 + 752), 1, v20, 1, v20, 1, __N);
    bzero(*(void **)(a1 + 752), v24);
    vDSP_vadd(*(const float **)(a1 + 752), 1, v21, 1, v21, 1, __N);
    bzero(*(void **)(a1 + 752), v24);
    uint64_t v32 = *(const float **)(a1 + 752);
    uint64_t v33 = v22;
    int v34 = v22;
    vDSP_Length v35 = a11 * a10;
LABEL_86:
    vDSP_vadd(v32, 1, v33, 1, v34, 1, v35);
    return;
  }
  memmove(v19, *(const void **)(a1 + 752), v24);
  bzero(*(void **)(a1 + 752), v24);
  memmove(v20, *(const void **)(a1 + 752), v24);
  bzero(*(void **)(a1 + 752), v24);
  memmove(v21, *(const void **)(a1 + 752), v24);
  bzero(*(void **)(a1 + 752), v24);
  uint64_t v105 = *(const void **)(a1 + 752);
LABEL_91:

  memmove(v22, v105, v24);
}

void sub_19E1F678C(uint64_t a1, int a2, const float **a3, void *a4, uint64_t *a5, uint64_t a6, int a7, int a8, int a9, char a10)
{
  if (a10)
  {
    if (a2)
    {
      if (a7 != 1) {
        sub_19E2F6320(502);
      }
      std::string __p = 0;
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      uint64_t v16 = *(const void **)a6;
      uint64_t v15 = *(void *)(a6 + 8);
      int64_t v17 = v15 - *(void *)a6;
      if (v15 != *(void *)a6)
      {
        if (v17 < 0) {
          sub_19E13D694();
        }
        int v18 = (char *)operator new(v15 - *(void *)a6);
        uint64_t v19 = &v18[4 * (v17 >> 2)];
        std::string __p = v18;
        uint64_t v26 = v19;
        memcpy(v18, v16, v17);
        uint64_t v25 = v19;
      }
      uint64_t v20 = (float **)(a1 + 760);
      sub_19E1F5C80(v20, (int **)&__p, a5, a8, a9);
      if (__p)
      {
        uint64_t v25 = __p;
        operator delete(__p);
      }
      vDSP_vadd(*v20, 1, *a3, 1, (float *)*a3, 1, a8);
    }
    else
    {
      sub_19E1F697C((float **)(a1 + 752), a4, a5, a7, a9, a8, 0.0);
      uint64_t v21 = *(const float **)(a1 + 752);
      uint64_t v22 = *a3;
      int v23 = (float *)*a3;
      vDSP_vadd(v21, 1, v22, 1, v23, 1, a8 * a7);
    }
  }
  else
  {
    if (a2) {
      sub_19E2F6320(456);
    }
    sub_19E1F697C((float **)a3, a4, a5, a7, a9, a8, 0.0);
  }
}

void sub_19E1F695C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E1F697C(float **a1, void *a2, void *a3, int a4, int a5, int a6, float a7)
{
  float v13 = sub_19E2F6308();
  float __B = sub_19E2F6308() * v13;
  if (a4 != 1) {
    sub_19E2F6320(354);
  }
  uint64_t v15 = qword_1EB2206D0;
  int v14 = (char *)qword_1EB2206D8;
  unint64_t v16 = qword_1EB2206D8 - qword_1EB2206D0;
  size_t v17 = a5 - (qword_1EB2206D8 - qword_1EB2206D0);
  if (a5 <= (unint64_t)(qword_1EB2206D8 - qword_1EB2206D0))
  {
    int v24 = a6;
    if (a5 < (unint64_t)(qword_1EB2206D8 - qword_1EB2206D0)) {
      qword_1EB2206D8 = qword_1EB2206D0 + a5;
    }
  }
  else
  {
    if (qword_1EB2206E0 - qword_1EB2206D8 >= v17)
    {
      bzero((void *)qword_1EB2206D8, a5 - (qword_1EB2206D8 - qword_1EB2206D0));
      qword_1EB2206D8 = (uint64_t)&v14[v17];
      int v24 = a6;
      goto LABEL_34;
    }
    int v47 = a1;
    float32x4_t v48 = a3;
    if (a5 < 0) {
      sub_19E13D694();
    }
    unint64_t v18 = 2 * (qword_1EB2206E0 - qword_1EB2206D0);
    if (v18 <= a5) {
      unint64_t v18 = a5;
    }
    if ((unint64_t)(qword_1EB2206E0 - qword_1EB2206D0) >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v19 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v19 = v18;
    }
    uint64_t v20 = (uint64_t)operator new(v19);
    uint64_t v46 = v20 + v19;
    uint64_t v45 = v20 + a5;
    uint64_t v21 = v20 + v16;
    bzero((void *)(v20 + v16), v17);
    if (v14 != (char *)v15)
    {
      if (v16 < 8)
      {
        uint64_t v23 = v20 + a5;
        uint64_t v22 = v46;
        goto LABEL_30;
      }
      uint64_t v23 = v20 + a5;
      uint64_t v22 = v46;
      if ((unint64_t)(v15 - v20) >= 0x20)
      {
        if (v16 < 0x20)
        {
          unint64_t v25 = 0;
          goto LABEL_25;
        }
        unint64_t v25 = v16 & 0xFFFFFFFFFFFFFFE0;
        uint64_t v26 = v14 - 16;
        uint64_t v27 = &v14[v20 - 16 - v15];
        unint64_t v28 = v16 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v29 = *(_OWORD *)v26;
          *((_OWORD *)v27 - 1) = *((_OWORD *)v26 - 1);
          *(_OWORD *)uint64_t v27 = v29;
          v27 -= 32;
          v26 -= 32;
          v28 -= 32;
        }
        while (v28);
        if (v16 == v25) {
          goto LABEL_32;
        }
        if ((v16 & 0x18) != 0)
        {
LABEL_25:
          v21 -= v16 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v30 = &v14[-v25 - 8];
          uint64_t v31 = &v30[-v15];
          unint64_t v32 = v25 - (v16 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v33 = *(void *)v30;
            v30 -= 8;
            *(void *)&v31[v20] = v33;
            v31 -= 8;
            v32 += 8;
          }
          while (v32);
          v14 -= v16 & 0xFFFFFFFFFFFFFFF8;
          if (v16 != (v16 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_30;
          }
LABEL_32:
          int v14 = (char *)v15;
          int v24 = a6;
          qword_1EB2206D0 = v20;
          qword_1EB2206D8 = v23;
          qword_1EB2206E0 = v22;
          a1 = v47;
          a3 = v48;
          if (!v15) {
            goto LABEL_34;
          }
          goto LABEL_33;
        }
        v21 -= v25;
        v14 -= v25;
      }
LABEL_30:
      int v34 = (unsigned char *)(v21 - 1);
      do
      {
        char v35 = *--v14;
        *v34-- = v35;
      }
      while (v14 != (char *)v15);
      goto LABEL_32;
    }
    a1 = v47;
    qword_1EB2206D0 = v21;
    qword_1EB2206D8 = v45;
    qword_1EB2206E0 = v46;
    a3 = v48;
    int v24 = a6;
    if (v14) {
LABEL_33:
    }
      operator delete(v14);
  }
LABEL_34:
  unint64_t v36 = (qword_1EB2206C0 - qword_1EB2206B8) >> 2;
  if (v24 <= v36)
  {
    if (v24 < v36) {
      qword_1EB2206C0 = qword_1EB2206B8 + 4 * v24;
    }
  }
  else
  {
    sub_19E164E6C((uint64_t)&qword_1EB2206B8, v24 - v36);
  }
  if (a5 >= 1)
  {
    uint64_t v37 = 0;
    do
    {
      float v39 = *(float *)(*a2 + 4 * v37);
      if (v39 <= -5.0)
      {
        LOBYTE(v38) = -127;
      }
      else if (v39 < 5.0 && (int v38 = llroundf(v39 * 25.6), v38 <= 127))
      {
        if (v38 <= -127) {
          LOBYTE(v38) = -127;
        }
      }
      else
      {
        LOBYTE(v38) = 127;
      }
      *(unsigned char *)(qword_1EB2206D0 + v37++) = v38;
    }
    while (a5 != v37);
  }
  uint64_t v40 = *a3;
  v59[1] = 0x3F80000000020008;
  v59[2] = 0;
  v58[2] = 0;
  v59[0] = a5;
  v58[0] = v24;
  v58[1] = 0x3F80000000010020;
  v52[0] = a5;
  v52[1] = v24;
  v52[2] = v40;
  v52[3] = 0x3F80000000020008;
  v52[4] = 0;
  v52[5] = 0;
  long long v53 = xmmword_19E351628;
  long long v54 = unk_19E351638;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  bzero(v51, 0x20uLL);
  v51[0] = 1;
  uint64_t v41 = (void *)MEMORY[0x19F3BB0D0](v59, v58, v52, v51);
  if (!v41) {
    sub_19E2F6320(1010);
  }
  uint64_t v42 = v41;
  int v43 = BNNSFilterApply(v41, (const void *)qword_1EB2206D0, (void *)qword_1EB2206B8);
  uint64_t v44 = *a1;
  if (a7 != 0.0)
  {
    vDSP_vsma((const float *)qword_1EB2206B8, 1, &__B, v44, 1, *a1, 1, v24);
    if (!v43) {
      goto LABEL_51;
    }
LABEL_53:
    sub_19E2F6320(345);
  }
  vDSP_vsmul((const float *)qword_1EB2206B8, 1, &__B, v44, 1, v24);
  if (v43) {
    goto LABEL_53;
  }
LABEL_51:
  BNNSFilterDestroy(v42);
}

void *sub_19E1F6D8C(void *a1)
{
  *a1 = &unk_1EF0A66D8;
  sub_19E1F14C4(a1);
  uint64_t v2 = a1[194];
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 80))(v2);
    a1[194] = 0;
    uint64_t v3 = a1[195];
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 80))(v3);
    }
    a1[195] = 0;
    uint64_t v4 = a1[196];
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 80))(v4);
    }
    a1[196] = 0;
    uint64_t v5 = a1[197];
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 80))(v5);
    }
    a1[197] = 0;
    uint64_t v6 = a1[198];
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 80))(v6);
    }
    a1[198] = 0;
    uint64_t v7 = a1[199];
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 80))(v7);
    }
    a1[199] = 0;
    uint64_t v8 = a1[200];
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 80))(v8);
    }
    a1[200] = 0;
    uint64_t v9 = a1[201];
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 80))(v9);
    }
    a1[201] = 0;
  }
  float v10 = (void *)a1[331];
  if (v10)
  {
    a1[332] = v10;
    operator delete(v10);
  }
  float v11 = (void *)a1[328];
  if (v11)
  {
    a1[329] = v11;
    operator delete(v11);
  }
  sub_19E3030E8((uint64_t)(a1 + 303));
  sub_19E3030E8((uint64_t)(a1 + 294));
  sub_19E3030E8((uint64_t)(a1 + 285));
  sub_19E3030E8((uint64_t)(a1 + 276));
  sub_19E3030E8((uint64_t)(a1 + 267));
  sub_19E3030E8((uint64_t)(a1 + 258));
  sub_19E3030E8((uint64_t)(a1 + 249));
  sub_19E3030E8((uint64_t)(a1 + 240));
  sub_19E3030E8((uint64_t)(a1 + 231));
  sub_19E3030E8((uint64_t)(a1 + 222));
  sub_19E3030E8((uint64_t)(a1 + 213));
  sub_19E1C6038(a1 + 168);
  sub_19E1C6038(a1 + 153);
  sub_19E1C6038(a1 + 138);
  sub_19E1C6038(a1 + 123);
  int8x8_t v12 = (void *)a1[120];
  if (v12)
  {
    a1[121] = v12;
    operator delete(v12);
  }
  float v13 = (void *)a1[117];
  if (v13)
  {
    a1[118] = v13;
    operator delete(v13);
  }
  int v14 = (void *)a1[114];
  if (v14)
  {
    a1[115] = v14;
    operator delete(v14);
  }
  uint64_t v15 = (void *)a1[111];
  if (v15)
  {
    a1[112] = v15;
    operator delete(v15);
  }
  unint64_t v16 = (void *)a1[108];
  if (v16)
  {
    a1[109] = v16;
    operator delete(v16);
  }
  size_t v17 = (void *)a1[105];
  if (v17)
  {
    a1[106] = v17;
    operator delete(v17);
  }
  unint64_t v18 = (void *)a1[102];
  if (v18)
  {
    a1[103] = v18;
    operator delete(v18);
  }
  size_t v19 = (void *)a1[99];
  if (v19)
  {
    a1[100] = v19;
    operator delete(v19);
  }
  uint64_t v20 = (void *)a1[89];
  if (v20)
  {
    a1[90] = v20;
    operator delete(v20);
  }
  uint64_t v21 = (void *)a1[86];
  if (v21)
  {
    a1[87] = v21;
    operator delete(v21);
  }
  uint64_t v22 = (void *)a1[83];
  if (v22)
  {
    a1[84] = v22;
    operator delete(v22);
  }
  uint64_t v23 = (void *)a1[80];
  if (v23)
  {
    a1[81] = v23;
    operator delete(v23);
  }
  int v24 = (void *)a1[77];
  if (v24)
  {
    a1[78] = v24;
    operator delete(v24);
  }
  unint64_t v25 = (void *)a1[74];
  if (v25)
  {
    a1[75] = v25;
    operator delete(v25);
  }
  uint64_t v26 = (void *)a1[71];
  if (v26)
  {
    a1[72] = v26;
    operator delete(v26);
  }
  uint64_t v27 = (void *)a1[68];
  if (v27)
  {
    a1[69] = v27;
    operator delete(v27);
  }
  unint64_t v28 = (void *)a1[65];
  if (v28)
  {
    a1[66] = v28;
    operator delete(v28);
  }
  long long v29 = (void *)a1[62];
  if (v29)
  {
    a1[63] = v29;
    operator delete(v29);
  }
  uint64_t v30 = (void *)a1[59];
  if (v30)
  {
    a1[60] = v30;
    operator delete(v30);
  }
  uint64_t v31 = (void *)a1[56];
  if (v31)
  {
    a1[57] = v31;
    operator delete(v31);
  }
  unint64_t v32 = (void *)a1[53];
  if (v32)
  {
    a1[54] = v32;
    operator delete(v32);
  }
  uint64_t v33 = (void *)a1[50];
  if (v33)
  {
    a1[51] = v33;
    operator delete(v33);
  }
  int v34 = (void *)a1[47];
  if (v34)
  {
    a1[48] = v34;
    operator delete(v34);
  }
  char v35 = (void *)a1[44];
  if (v35)
  {
    a1[45] = v35;
    operator delete(v35);
  }
  uint64_t v36 = a1[26];
  if (v36)
  {
    uint64_t v37 = a1[27];
    int v38 = (void *)a1[26];
    if (v37 != v36)
    {
      uint64_t v39 = a1[27];
      do
      {
        uint64_t v41 = *(void **)(v39 - 24);
        v39 -= 24;
        uint64_t v40 = v41;
        if (v41)
        {
          *(void *)(v37 - 16) = v40;
          operator delete(v40);
        }
        uint64_t v37 = v39;
      }
      while (v39 != v36);
      int v38 = (void *)a1[26];
    }
    a1[27] = v36;
    operator delete(v38);
  }
  uint64_t v42 = (void *)a1[23];
  if (v42)
  {
    a1[24] = v42;
    operator delete(v42);
  }
  int v43 = (void *)a1[20];
  if (v43)
  {
    a1[21] = v43;
    operator delete(v43);
  }
  uint64_t v44 = (void *)a1[17];
  if (v44)
  {
    a1[18] = v44;
    operator delete(v44);
  }
  uint64_t v45 = (void *)a1[14];
  if (v45)
  {
    a1[15] = v45;
    operator delete(v45);
  }
  uint64_t v46 = (void *)a1[11];
  if (v46)
  {
    a1[12] = v46;
    operator delete(v46);
  }
  int v47 = (void *)a1[8];
  if (v47)
  {
    a1[9] = v47;
    operator delete(v47);
  }
  *a1 = &unk_1EF0A50F8;
  float32x4_t v48 = (void *)a1[1];
  if (v48)
  {
    a1[2] = v48;
    operator delete(v48);
  }
  return a1;
}